
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/4.0.1/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000e4d0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c24f0  000c24f0  000124f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c2514  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c8  2003d60c  000c2518  0002d60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000101c  2003d7d8  2003d7d8  0003d7d8  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c26e0  000c26e0  000326e0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c270c  000c270c  0003270c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   002a449a  00000000  00000000  00032710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002d275  00000000  00000000  002d6baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0006d45a  00000000  00000000  00303e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004ff0  00000000  00000000  00371279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000123a0  00000000  00000000  00376269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0006046b  00000000  00000000  00388609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00097712  00000000  00000000  003e8a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172c1d  00000000  00000000  00480186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000efd8  00000000  00000000  005f2da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00c f92f 	bl	c0294 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00c f951 	bl	c02e4 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d60c 	.word	0x2003d60c
   b404c:	000c2518 	.word	0x000c2518
   b4050:	2003d7d4 	.word	0x2003d7d4
   b4054:	2003d7d8 	.word	0x2003d7d8
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00b fa69 	bl	bf538 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c24a8 	.word	0x000c24a8
   b4080:	000c24ec 	.word	0x000c24ec

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 ba10 	b.w	b54a8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fb0f 	bl	b56ac <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00b ba09 	b.w	bf4a8 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f008 b9b1 	b.w	bc3fc <malloc>

000b409a <_Znaj>:
   b409a:	f008 b9af 	b.w	bc3fc <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f008 b9b5 	b.w	bc40c <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f008 f83a 	bl	bc124 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000bbcc5 	.word	0x000bbcc5
   b40b8:	000c08b8 	.word	0x000c08b8

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b40ce:	b510      	push	{r4, lr}
}
   b40d0:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b40d2:	4604      	mov	r4, r0
}
   b40d4:	f7ff ffe3 	bl	b409e <_ZdlPvj>
   b40d8:	4620      	mov	r0, r4
   b40da:	bd10      	pop	{r4, pc}

000b40dc <_ZN16JsonParserStaticILj1024ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40dc:	b510      	push	{r4, lr}
   b40de:	4b03      	ldr	r3, [pc, #12]	; (b40ec <_ZN16JsonParserStaticILj1024ELj50EED1Ev+0x10>)
   b40e0:	6003      	str	r3, [r0, #0]
   b40e2:	4604      	mov	r4, r0
   b40e4:	f003 fd80 	bl	b7be8 <_ZN10JsonParserD1Ev>
   b40e8:	4620      	mov	r0, r4
   b40ea:	bd10      	pop	{r4, pc}
   b40ec:	000c0e94 	.word	0x000c0e94

000b40f0 <_ZN16JsonParserStaticILj1024ELj50EED0Ev>:
   b40f0:	b510      	push	{r4, lr}
   b40f2:	4604      	mov	r4, r0
   b40f4:	f7ff fff2 	bl	b40dc <_ZN16JsonParserStaticILj1024ELj50EED1Ev>
   b40f8:	4620      	mov	r0, r4
   b40fa:	f240 714c 	movw	r1, #1868	; 0x74c
   b40fe:	f7ff ffce 	bl	b409e <_ZdlPvj>
   b4102:	4620      	mov	r0, r4
   b4104:	bd10      	pop	{r4, pc}

000b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4106:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4108:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b410a:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b410c:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b410e:	f003 ff35 	bl	b7f7c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b4112:	b120      	cbz	r0, b411e <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4114:	9901      	ldr	r1, [sp, #4]
   b4116:	462a      	mov	r2, r5
   b4118:	4620      	mov	r0, r4
   b411a:	f003 fe53 	bl	b7dc4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	}
   b411e:	b003      	add	sp, #12
   b4120:	bd30      	pop	{r4, r5, pc}

000b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4122:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4124:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b4126:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4128:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b412a:	f003 ff27 	bl	b7f7c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b412e:	b120      	cbz	r0, b413a <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4130:	9901      	ldr	r1, [sp, #4]
   b4132:	462a      	mov	r2, r5
   b4134:	4620      	mov	r0, r4
   b4136:	f003 ff03 	bl	b7f40 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b413a:	b003      	add	sp, #12
   b413c:	bd30      	pop	{r4, r5, pc}

000b413e <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b413e:	b40e      	push	{r1, r2, r3}
   b4140:	b500      	push	{lr}
   b4142:	b08c      	sub	sp, #48	; 0x30
   b4144:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4146:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b414a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b414e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4150:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4154:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4156:	6801      	ldr	r1, [r0, #0]
   b4158:	aa04      	add	r2, sp, #16
   b415a:	201e      	movs	r0, #30
    attr.flags = 0;
   b415c:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4160:	f007 fff0 	bl	bc144 <log_message_v>
}
   b4164:	b00c      	add	sp, #48	; 0x30
   b4166:	f85d eb04 	ldr.w	lr, [sp], #4
   b416a:	b003      	add	sp, #12
   b416c:	4770      	bx	lr
	...

000b4170 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4170:	b510      	push	{r4, lr}
    if (!_instance) {
   b4172:	4c06      	ldr	r4, [pc, #24]	; (b418c <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4174:	6823      	ldr	r3, [r4, #0]
   b4176:	b933      	cbnz	r3, b4186 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4178:	2004      	movs	r0, #4
   b417a:	f7ff ff8c 	bl	b4096 <_Znwj>
   b417e:	b108      	cbz	r0, b4184 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b4180:	4b03      	ldr	r3, [pc, #12]	; (b4190 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b4182:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4184:	6020      	str	r0, [r4, #0]
}
   b4186:	6820      	ldr	r0, [r4, #0]
   b4188:	bd10      	pop	{r4, pc}
   b418a:	bf00      	nop
   b418c:	2003d7dc 	.word	0x2003d7dc
   b4190:	000c0ea4 	.word	0x000c0ea4

000b4194 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b4194:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b4196:	4c06      	ldr	r4, [pc, #24]	; (b41b0 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b4198:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b419a:	f10d 0203 	add.w	r2, sp, #3
   b419e:	a901      	add	r1, sp, #4
   b41a0:	4620      	mov	r0, r4
   b41a2:	f006 fd99 	bl	bacd8 <_ZN7RH_RF954recvEPhS0_>
   b41a6:	2800      	cmp	r0, #0
   b41a8:	d1f7      	bne.n	b419a <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b41aa:	b040      	add	sp, #256	; 0x100
   b41ac:	bd10      	pop	{r4, pc}
   b41ae:	bf00      	nop
   b41b0:	2003d864 	.word	0x2003d864

000b41b4 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             // Here is where we will power down the LoRA radio module
   b41b4:	4801      	ldr	r0, [pc, #4]	; (b41bc <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b41b6:	f006 bd7c 	b.w	bacb2 <_ZN7RH_RF955sleepEv>
   b41ba:	bf00      	nop
   b41bc:	2003d864 	.word	0x2003d864

000b41c0 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>:
	return false; 
}

// These are the receive and respond messages for data reports

bool LoRA_Functions::decipherDataReportGateway() {			// Receives the data report and loads results into current object for reporting
   b41c0:	b537      	push	{r0, r1, r2, r4, r5, lr}

	current.set_hourlyCount(buf[3] << 8 | buf[4]);
   b41c2:	4c2a      	ldr	r4, [pc, #168]	; (b426c <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xac>)
   b41c4:	f001 fe44 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b41c8:	f8b4 1003 	ldrh.w	r1, [r4, #3]
   b41cc:	ba49      	rev16	r1, r1
   b41ce:	b289      	uxth	r1, r1
   b41d0:	f002 f829 	bl	b6226 <_ZN17currentStatusData15set_hourlyCountEt>
	current.set_dailyCount(buf[5] << 8 | buf[6]);
   b41d4:	f001 fe3c 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b41d8:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   b41dc:	ba49      	rev16	r1, r1
   b41de:	b289      	uxth	r1, r1
   b41e0:	f002 f827 	bl	b6232 <_ZN17currentStatusData14set_dailyCountEt>
	current.set_sensorType(buf[7]);
   b41e4:	f001 fe34 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b41e8:	79e1      	ldrb	r1, [r4, #7]
   b41ea:	f001 ff9f 	bl	b612c <_ZN17currentStatusData14set_sensorTypeEh>
	current.set_internalTempC(buf[8]);
   b41ee:	f001 fe2f 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b41f2:	7a21      	ldrb	r1, [r4, #8]
   b41f4:	f001 ff7c 	bl	b60f0 <_ZN17currentStatusData17set_internalTempCEh>
	current.set_stateOfCharge(buf[9]);
   b41f8:	f001 fe2a 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b41fc:	4605      	mov	r5, r0
   b41fe:	7a60      	ldrb	r0, [r4, #9]
   b4200:	f00b fc84 	bl	bfb0c <__aeabi_ui2d>
   b4204:	ec41 0b10 	vmov	d0, r0, r1
   b4208:	4628      	mov	r0, r5
   b420a:	f001 fe5d 	bl	b5ec8 <_ZN17currentStatusData17set_stateOfChargeEd>
	current.set_batteryState(buf[10]);
   b420e:	f001 fe1f 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4212:	7aa1      	ldrb	r1, [r4, #10]
   b4214:	f001 ff72 	bl	b60fc <_ZN17currentStatusData16set_batteryStateEh>
	current.set_resetCount(buf[11]);
   b4218:	f001 fe1a 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b421c:	7ae1      	ldrb	r1, [r4, #11]
   b421e:	f001 ff73 	bl	b6108 <_ZN17currentStatusData14set_resetCountEh>
	current.set_messageNumber(buf[12]);
   b4222:	f001 fe15 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4226:	7b21      	ldrb	r1, [r4, #12]
   b4228:	f001 ff74 	bl	b6114 <_ZN17currentStatusData17set_messageNumberEh>
	current.set_RSSI(driver.lastRssi());
   b422c:	f001 fe10 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4230:	4604      	mov	r4, r0
   b4232:	480f      	ldr	r0, [pc, #60]	; (b4270 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xb0>)
   b4234:	f005 fe85 	bl	b9f42 <_ZN15RHGenericDriver8lastRssiEv>
   b4238:	b281      	uxth	r1, r0
   b423a:	4620      	mov	r0, r4
   b423c:	f001 ffed 	bl	b621a <_ZN17currentStatusData8set_RSSIEt>

	Log.info("Deciphered data report %d from node %d", current.get_messageNumber(), current.get_nodeNumber());
   b4240:	f001 fe06 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4244:	f001 ff09 	bl	b605a <_ZNK17currentStatusData17get_messageNumberEv>
   b4248:	9001      	str	r0, [sp, #4]
   b424a:	f001 fe01 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b424e:	f001 feeb 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4252:	9a01      	ldr	r2, [sp, #4]
   b4254:	4907      	ldr	r1, [pc, #28]	; (b4274 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xb4>)
   b4256:	4603      	mov	r3, r0
   b4258:	4807      	ldr	r0, [pc, #28]	; (b4278 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xb8>)
   b425a:	f7ff ff70 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>

	lora_state = DATA_ACK;		// Prepare to respond
   b425e:	4b07      	ldr	r3, [pc, #28]	; (b427c <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xbc>)
   b4260:	2204      	movs	r2, #4

	return true;
}
   b4262:	2001      	movs	r0, #1
	lora_state = DATA_ACK;		// Prepare to respond
   b4264:	701a      	strb	r2, [r3, #0]
}
   b4266:	b003      	add	sp, #12
   b4268:	bd30      	pop	{r4, r5, pc}
   b426a:	bf00      	nop
   b426c:	2003d7e8 	.word	0x2003d7e8
   b4270:	2003d864 	.word	0x2003d864
   b4274:	000c08cd 	.word	0x000c08cd
   b4278:	2003e654 	.word	0x2003e654
   b427c:	2003d7d8 	.word	0x2003d7d8

000b4280 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>:
		return false;
	}
}

// These are the receive and respond messages for Alert Reports
bool LoRA_Functions::decipherAlertReportGateway() {
   b4280:	b510      	push	{r4, lr}
	current.set_alertCodeNode(buf[2]);
   b4282:	f001 fde5 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4286:	4b13      	ldr	r3, [pc, #76]	; (b42d4 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x54>)
   b4288:	7899      	ldrb	r1, [r3, #2]
   b428a:	f001 ff49 	bl	b6120 <_ZN17currentStatusData17set_alertCodeNodeEh>
	current.set_alertTimestampNode(Time.now());
   b428e:	f001 fddf 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4292:	4604      	mov	r4, r0
   b4294:	f00a ffd9 	bl	bf24a <_ZN9TimeClass3nowEv>
   b4298:	17c3      	asrs	r3, r0, #31
   b429a:	4602      	mov	r2, r0
   b429c:	4620      	mov	r0, r4
   b429e:	f002 f843 	bl	b6328 <_ZN17currentStatusData22set_alertTimestampNodeEx>
	current.set_RSSI(driver.lastRssi() );
   b42a2:	f001 fdd5 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b42a6:	4604      	mov	r4, r0
   b42a8:	480b      	ldr	r0, [pc, #44]	; (b42d8 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x58>)
   b42aa:	f005 fe4a 	bl	b9f42 <_ZN15RHGenericDriver8lastRssiEv>
   b42ae:	b281      	uxth	r1, r0
   b42b0:	4620      	mov	r0, r4
   b42b2:	f001 ffb2 	bl	b621a <_ZN17currentStatusData8set_RSSIEt>
	Log.info("Deciphered alert report from node %d", current.get_nodeNumber());
   b42b6:	f001 fdcb 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b42ba:	f001 feb5 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b42be:	4907      	ldr	r1, [pc, #28]	; (b42dc <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x5c>)
   b42c0:	4602      	mov	r2, r0
   b42c2:	4807      	ldr	r0, [pc, #28]	; (b42e0 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x60>)
   b42c4:	f7ff ff3b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>

	lora_state = ALERT_ACK;		// Prepare to respond
   b42c8:	4b06      	ldr	r3, [pc, #24]	; (b42e4 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x64>)
   b42ca:	2206      	movs	r2, #6
   b42cc:	701a      	strb	r2, [r3, #0]

	return true;
}
   b42ce:	2001      	movs	r0, #1
   b42d0:	bd10      	pop	{r4, pc}
   b42d2:	bf00      	nop
   b42d4:	2003d7e8 	.word	0x2003d7e8
   b42d8:	2003d864 	.word	0x2003d864
   b42dc:	000c08f4 	.word	0x000c08f4
   b42e0:	2003e654 	.word	0x2003e654
   b42e4:	2003d7d8 	.word	0x2003d7d8

000b42e8 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>:

bool LoRA_Functions::acknowledgeAlertReportGateway() {
   b42e8:	b570      	push	{r4, r5, r6, lr}
   b42ea:	b088      	sub	sp, #32
	// uint16_t nextSecondsShort = (uint16_t)nextSeconds;

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client

	buf[0] = highByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b42ec:	f001 fd60 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b42f0:	f001 ff34 	bl	b615c <_ZNK13sysStatusData15get_magicNumberEv>
   b42f4:	4c32      	ldr	r4, [pc, #200]	; (b43c0 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xd8>)
   b42f6:	0a00      	lsrs	r0, r0, #8
   b42f8:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b42fa:	f001 fd59 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b42fe:	f001 ff2d 	bl	b615c <_ZNK13sysStatusData15get_magicNumberEv>
   b4302:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  				// Fourth byte - current time
   b4304:	f00a ffa1 	bl	bf24a <_ZN9TimeClass3nowEv>
   b4308:	1600      	asrs	r0, r0, #24
   b430a:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));					// Third byte
   b430c:	f00a ff9d 	bl	bf24a <_ZN9TimeClass3nowEv>
   b4310:	1400      	asrs	r0, r0, #16
   b4312:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));					// Second byte
   b4314:	f00a ff99 	bl	bf24a <_ZN9TimeClass3nowEv>
   b4318:	1200      	asrs	r0, r0, #8
   b431a:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    				// First byte	
   b431c:	f00a ff95 	bl	bf24a <_ZN9TimeClass3nowEv>
   b4320:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());		// Frequency of reports - for Gateways
   b4322:	f001 fd45 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b4326:	f001 ff1e 	bl	b6166 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b432a:	0a00      	lsrs	r0, r0, #8
   b432c:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());			
   b432e:	f001 fd3f 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b4332:	f001 ff18 	bl	b6166 <_ZNK13sysStatusData20get_frequencyMinutesEv>
	buf[8] = 0;													// Send a zero for the alertcode to reset it
	
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4336:	4b23      	ldr	r3, [pc, #140]	; (b43c4 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xdc>)
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());			
   b4338:	71e0      	strb	r0, [r4, #7]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b433a:	881e      	ldrh	r6, [r3, #0]
	buf[8] = 0;													// Send a zero for the alertcode to reset it
   b433c:	2500      	movs	r5, #0
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b433e:	2101      	movs	r1, #1
	buf[8] = 0;													// Send a zero for the alertcode to reset it
   b4340:	7225      	strb	r5, [r4, #8]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4342:	4630      	mov	r0, r6
   b4344:	f00b f991 	bl	bf66a <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), ALERT_ACK) == RH_ROUTER_ERROR_NONE) {
   b4348:	f001 fd82 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b434c:	f001 fe6c 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4350:	2206      	movs	r2, #6
   b4352:	4603      	mov	r3, r0
   b4354:	9200      	str	r2, [sp, #0]
   b4356:	4621      	mov	r1, r4
   b4358:	481b      	ldr	r0, [pc, #108]	; (b43c8 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe0>)
   b435a:	2209      	movs	r2, #9
   b435c:	f006 f80c 	bl	ba378 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4360:	4604      	mov	r4, r0
   b4362:	bb10      	cbnz	r0, b43aa <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xc2>
		Log.info("Sent acknowledgment to Node %d, time = %s and frequency %d minutes", current.get_nodeNumber(), Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b4364:	f001 fd74 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4368:	f001 fe5e 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b436c:	4605      	mov	r5, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b436e:	f00a ff6c 	bl	bf24a <_ZN9TimeClass3nowEv>
   b4372:	4602      	mov	r2, r0
   b4374:	17c3      	asrs	r3, r0, #31
   b4376:	a804      	add	r0, sp, #16
   b4378:	f00a fe62 	bl	bf040 <_ZN9TimeClass7timeStrEx>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b437c:	9b04      	ldr	r3, [sp, #16]
   b437e:	9303      	str	r3, [sp, #12]
   b4380:	f001 fd16 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b4384:	f001 feef 	bl	b6166 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4388:	9b03      	ldr	r3, [sp, #12]
   b438a:	4910      	ldr	r1, [pc, #64]	; (b43cc <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe4>)
   b438c:	9000      	str	r0, [sp, #0]
   b438e:	462a      	mov	r2, r5
   b4390:	480f      	ldr	r0, [pc, #60]	; (b43d0 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe8>)
   b4392:	f7ff fed4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4396:	a804      	add	r0, sp, #16
   b4398:	f00a fba4 	bl	beae4 <_ZN6StringD1Ev>
		digitalWrite(BLUE_LED,LOW);
   b439c:	4630      	mov	r0, r6
   b439e:	4621      	mov	r1, r4
   b43a0:	f00b f963 	bl	bf66a <digitalWrite>
		return true;
   b43a4:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b43a6:	b008      	add	sp, #32
   b43a8:	bd70      	pop	{r4, r5, r6, pc}
	Log.info("Response not acknowledged");
   b43aa:	490a      	ldr	r1, [pc, #40]	; (b43d4 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xec>)
   b43ac:	4808      	ldr	r0, [pc, #32]	; (b43d0 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe8>)
   b43ae:	f7ff fec6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b43b2:	4630      	mov	r0, r6
   b43b4:	4629      	mov	r1, r5
   b43b6:	f00b f958 	bl	bf66a <digitalWrite>
	return false;
   b43ba:	4628      	mov	r0, r5
   b43bc:	e7f3      	b.n	b43a6 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xbe>
   b43be:	bf00      	nop
   b43c0:	2003d7e8 	.word	0x2003d7e8
   b43c4:	000c14b4 	.word	0x000c14b4
   b43c8:	2003e0e0 	.word	0x2003e0e0
   b43cc:	000c0919 	.word	0x000c0919
   b43d0:	2003e654 	.word	0x2003e654
   b43d4:	000c095c 	.word	0x000c095c

000b43d8 <_ZN14LoRA_Functions12findDeviceIDEh>:
	Log.info("Returning index %d",index);

	return index;
}

String LoRA_Functions::findDeviceID(uint8_t nodeNumber)  {
   b43d8:	b530      	push	{r4, r5, lr}
   b43da:	b087      	sub	sp, #28
	String nodeDeviceID;
   b43dc:	4917      	ldr	r1, [pc, #92]	; (b443c <_ZN14LoRA_Functions12findDeviceIDEh+0x64>)
String LoRA_Functions::findDeviceID(uint8_t nodeNumber)  {
   b43de:	4604      	mov	r4, r0
	String nodeDeviceID;
   b43e0:	a802      	add	r0, sp, #8
String LoRA_Functions::findDeviceID(uint8_t nodeNumber)  {
   b43e2:	4615      	mov	r5, r2
	String nodeDeviceID;
   b43e4:	f00a fbc9 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b43e8:	4815      	ldr	r0, [pc, #84]	; (b4440 <_ZN14LoRA_Functions12findDeviceIDEh+0x68>)
   b43ea:	f003 fc70 	bl	b7cce <_ZNK10JsonParser14getOuterObjectEv>
   b43ee:	4a15      	ldr	r2, [pc, #84]	; (b4444 <_ZN14LoRA_Functions12findDeviceIDEh+0x6c>)
   b43f0:	4601      	mov	r1, r0
   b43f2:	ab01      	add	r3, sp, #4
   b43f4:	4812      	ldr	r0, [pc, #72]	; (b4440 <_ZN14LoRA_Functions12findDeviceIDEh+0x68>)
   b43f6:	f003 fdc1 	bl	b7f7c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b43fa:	9901      	ldr	r1, [sp, #4]
   b43fc:	4810      	ldr	r0, [pc, #64]	; (b4440 <_ZN14LoRA_Functions12findDeviceIDEh+0x68>)
   b43fe:	1e6a      	subs	r2, r5, #1
   b4400:	f003 fc87 	bl	b7d12 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return "null";							// Ran out of entries - no match found
   b4404:	4601      	mov	r1, r0
   b4406:	b948      	cbnz	r0, b441c <_ZN14LoRA_Functions12findDeviceIDEh+0x44>
   b4408:	490f      	ldr	r1, [pc, #60]	; (b4448 <_ZN14LoRA_Functions12findDeviceIDEh+0x70>)
   b440a:	4620      	mov	r0, r4
   b440c:	f00a fbb5 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
	String nodeDeviceID;
   b4410:	a802      	add	r0, sp, #8
   b4412:	f00a fb67 	bl	beae4 <_ZN6StringD1Ev>
	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);	// Get the deviceID and compare
	if (nodeDeviceID == NULL) return "null";
		
	return nodeDeviceID;
}
   b4416:	4620      	mov	r0, r4
   b4418:	b007      	add	sp, #28
   b441a:	bd30      	pop	{r4, r5, pc}
	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);	// Get the deviceID and compare
   b441c:	4808      	ldr	r0, [pc, #32]	; (b4440 <_ZN14LoRA_Functions12findDeviceIDEh+0x68>)
   b441e:	4a0b      	ldr	r2, [pc, #44]	; (b444c <_ZN14LoRA_Functions12findDeviceIDEh+0x74>)
   b4420:	ab02      	add	r3, sp, #8
   b4422:	f7ff fe7e 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4426:	2100      	movs	r1, #0
   b4428:	a802      	add	r0, sp, #8
   b442a:	f00a fc6c 	bl	bed06 <_ZNK6String6equalsEPKc>
	if (nodeDeviceID == NULL) return "null";
   b442e:	2800      	cmp	r0, #0
   b4430:	d1ea      	bne.n	b4408 <_ZN14LoRA_Functions12findDeviceIDEh+0x30>
	return nodeDeviceID;
   b4432:	a902      	add	r1, sp, #8
   b4434:	4620      	mov	r0, r4
   b4436:	f00a fbd1 	bl	bebdc <_ZN6StringC1EOS_>
   b443a:	e7e9      	b.n	b4410 <_ZN14LoRA_Functions12findDeviceIDEh+0x38>
   b443c:	000c20fc 	.word	0x000c20fc
   b4440:	2003d994 	.word	0x2003d994
   b4444:	000c0976 	.word	0x000c0976
   b4448:	000c097c 	.word	0x000c097c
   b444c:	000c0981 	.word	0x000c0981

000b4450 <_ZN14LoRA_Functions14nodeConfiguredEi>:

bool LoRA_Functions::nodeConfigured(int nodeNumber)  {
   b4450:	b513      	push	{r0, r1, r4, lr}

	int nodeNumberConfigured;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4452:	480c      	ldr	r0, [pc, #48]	; (b4484 <_ZN14LoRA_Functions14nodeConfiguredEi+0x34>)
bool LoRA_Functions::nodeConfigured(int nodeNumber)  {
   b4454:	460c      	mov	r4, r1
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4456:	f003 fc3a 	bl	b7cce <_ZNK10JsonParser14getOuterObjectEv>
   b445a:	4a0b      	ldr	r2, [pc, #44]	; (b4488 <_ZN14LoRA_Functions14nodeConfiguredEi+0x38>)
   b445c:	4601      	mov	r1, r0
   b445e:	ab01      	add	r3, sp, #4
   b4460:	4808      	ldr	r0, [pc, #32]	; (b4484 <_ZN14LoRA_Functions14nodeConfiguredEi+0x34>)
   b4462:	f003 fd8b 	bl	b7f7c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4466:	9901      	ldr	r1, [sp, #4]
   b4468:	4806      	ldr	r0, [pc, #24]	; (b4484 <_ZN14LoRA_Functions14nodeConfiguredEi+0x34>)
   b446a:	1e62      	subs	r2, r4, #1
   b446c:	f003 fc51 	bl	b7d12 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries - no match found
   b4470:	b130      	cbz	r0, b4480 <_ZN14LoRA_Functions14nodeConfiguredEi+0x30>
	jp.getValueByKey(nodeObjectContainer, "node", nodeNumberConfigured);	// Get the deviceID and compare
   b4472:	4601      	mov	r1, r0
   b4474:	4a05      	ldr	r2, [pc, #20]	; (b448c <_ZN14LoRA_Functions14nodeConfiguredEi+0x3c>)
   b4476:	4803      	ldr	r0, [pc, #12]	; (b4484 <_ZN14LoRA_Functions14nodeConfiguredEi+0x34>)
   b4478:	466b      	mov	r3, sp
   b447a:	f7ff fe44 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	if (nodeNumberConfigured == nodeNumber) return true;

	return true;
   b447e:	2001      	movs	r0, #1
}
   b4480:	b002      	add	sp, #8
   b4482:	bd10      	pop	{r4, pc}
   b4484:	2003d994 	.word	0x2003d994
   b4488:	000c0976 	.word	0x000c0976
   b448c:	000c0985 	.word	0x000c0985

000b4490 <_ZN14LoRA_Functions7getTypeEi>:

byte LoRA_Functions::getType(int nodeNumber) {
   b4490:	b513      	push	{r0, r1, r4, lr}

	int type;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4492:	4810      	ldr	r0, [pc, #64]	; (b44d4 <_ZN14LoRA_Functions7getTypeEi+0x44>)
byte LoRA_Functions::getType(int nodeNumber) {
   b4494:	460c      	mov	r4, r1
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4496:	f003 fc1a 	bl	b7cce <_ZNK10JsonParser14getOuterObjectEv>
   b449a:	4a0f      	ldr	r2, [pc, #60]	; (b44d8 <_ZN14LoRA_Functions7getTypeEi+0x48>)
   b449c:	4601      	mov	r1, r0
   b449e:	ab01      	add	r3, sp, #4
   b44a0:	480c      	ldr	r0, [pc, #48]	; (b44d4 <_ZN14LoRA_Functions7getTypeEi+0x44>)
   b44a2:	f003 fd6b 	bl	b7f7c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b44a6:	9901      	ldr	r1, [sp, #4]
   b44a8:	480a      	ldr	r0, [pc, #40]	; (b44d4 <_ZN14LoRA_Functions7getTypeEi+0x44>)
   b44aa:	1e62      	subs	r2, r4, #1
   b44ac:	f003 fc31 	bl	b7d12 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   b44b0:	4601      	mov	r1, r0
   b44b2:	b930      	cbnz	r0, b44c2 <_ZN14LoRA_Functions7getTypeEi+0x32>
		Log.info("Node number not found");
   b44b4:	4809      	ldr	r0, [pc, #36]	; (b44dc <_ZN14LoRA_Functions7getTypeEi+0x4c>)
   b44b6:	490a      	ldr	r1, [pc, #40]	; (b44e0 <_ZN14LoRA_Functions7getTypeEi+0x50>)
   b44b8:	f7ff fe41 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		return 255;								// Ran out of entries 
   b44bc:	20ff      	movs	r0, #255	; 0xff

	jp.getValueByKey(nodeObjectContainer, "type", type);

	return type;

}
   b44be:	b002      	add	sp, #8
   b44c0:	bd10      	pop	{r4, pc}
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b44c2:	4804      	ldr	r0, [pc, #16]	; (b44d4 <_ZN14LoRA_Functions7getTypeEi+0x44>)
   b44c4:	4a07      	ldr	r2, [pc, #28]	; (b44e4 <_ZN14LoRA_Functions7getTypeEi+0x54>)
   b44c6:	466b      	mov	r3, sp
   b44c8:	f7ff fe1d 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	return type;
   b44cc:	f89d 0000 	ldrb.w	r0, [sp]
   b44d0:	e7f5      	b.n	b44be <_ZN14LoRA_Functions7getTypeEi+0x2e>
   b44d2:	bf00      	nop
   b44d4:	2003d994 	.word	0x2003d994
   b44d8:	000c0976 	.word	0x000c0976
   b44dc:	2003e654 	.word	0x2003e654
   b44e0:	000c098a 	.word	0x000c098a
   b44e4:	000c0c84 	.word	0x000c0c84

000b44e8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>:
bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b44e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b44ea:	b087      	sub	sp, #28
   b44ec:	4605      	mov	r5, r0
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b44ee:	f001 fc5f 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b44f2:	f001 fe33 	bl	b615c <_ZNK13sysStatusData15get_magicNumberEv>
   b44f6:	4c40      	ldr	r4, [pc, #256]	; (b45f8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x110>)
   b44f8:	0a00      	lsrs	r0, r0, #8
   b44fa:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b44fc:	f001 fc58 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b4500:	f001 fe2c 	bl	b615c <_ZNK13sysStatusData15get_magicNumberEv>
   b4504:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  					// Fourth byte - current time
   b4506:	f00a fea0 	bl	bf24a <_ZN9TimeClass3nowEv>
   b450a:	1600      	asrs	r0, r0, #24
   b450c:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));						// Third byte
   b450e:	f00a fe9c 	bl	bf24a <_ZN9TimeClass3nowEv>
   b4512:	1400      	asrs	r0, r0, #16
   b4514:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));						// Second byte
   b4516:	f00a fe98 	bl	bf24a <_ZN9TimeClass3nowEv>
   b451a:	1200      	asrs	r0, r0, #8
   b451c:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    					// First byte		
   b451e:	f00a fe94 	bl	bf24a <_ZN9TimeClass3nowEv>
   b4522:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());			// Frequency of reports - for Gateways
   b4524:	f001 fc44 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b4528:	f001 fe1d 	bl	b6166 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b452c:	0a00      	lsrs	r0, r0, #8
   b452e:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b4530:	f001 fc3e 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b4534:	f001 fe17 	bl	b6166 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4538:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_nodeNumber();
   b453a:	f001 fc89 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b453e:	f001 fd73 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4542:	7220      	strb	r0, [r4, #8]
	buf[9] = getType(current.get_nodeNumber());
   b4544:	f001 fc84 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4548:	f001 fd6e 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b454c:	4601      	mov	r1, r0
   b454e:	4628      	mov	r0, r5
   b4550:	f7ff ff9e 	bl	b4490 <_ZN14LoRA_Functions7getTypeEi>
   b4554:	7260      	strb	r0, [r4, #9]
   b4556:	4605      	mov	r5, r0
	Log.info("Sent response to sensorType %d node %d, time = %s and frequency %d minutes",  buf[9], current.get_tempNodeNumber(), Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b4558:	f001 fc7a 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b455c:	f001 fd69 	bl	b6032 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4560:	4606      	mov	r6, r0
   b4562:	f00a fe72 	bl	bf24a <_ZN9TimeClass3nowEv>
   b4566:	4602      	mov	r2, r0
   b4568:	17c3      	asrs	r3, r0, #31
   b456a:	a802      	add	r0, sp, #8
   b456c:	f00a fd68 	bl	bf040 <_ZN9TimeClass7timeStrEx>
	const char * c_str() const { return buffer; }
   b4570:	9f02      	ldr	r7, [sp, #8]
   b4572:	f001 fc1d 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b4576:	f001 fdf6 	bl	b6166 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b457a:	462a      	mov	r2, r5
   b457c:	491f      	ldr	r1, [pc, #124]	; (b45fc <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x114>)
   b457e:	4633      	mov	r3, r6
   b4580:	e9cd 7000 	strd	r7, r0, [sp]
   b4584:	481e      	ldr	r0, [pc, #120]	; (b4600 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x118>)
   b4586:	f7ff fdda 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b458a:	a802      	add	r0, sp, #8
   b458c:	f00a faaa 	bl	beae4 <_ZN6StringD1Ev>
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4590:	4b1c      	ldr	r3, [pc, #112]	; (b4604 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x11c>)
   b4592:	881d      	ldrh	r5, [r3, #0]
   b4594:	2101      	movs	r1, #1
   b4596:	4628      	mov	r0, r5
   b4598:	f00b f867 	bl	bf66a <digitalWrite>
	if (manager.sendtoWait(buf, 10, current.get_tempNodeNumber(), JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b459c:	f001 fc58 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b45a0:	f001 fd47 	bl	b6032 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b45a4:	2202      	movs	r2, #2
   b45a6:	4603      	mov	r3, r0
   b45a8:	9200      	str	r2, [sp, #0]
   b45aa:	4621      	mov	r1, r4
   b45ac:	4816      	ldr	r0, [pc, #88]	; (b4608 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x120>)
   b45ae:	220a      	movs	r2, #10
   b45b0:	f005 fee2 	bl	ba378 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b45b4:	4604      	mov	r4, r0
   b45b6:	b9a8      	cbnz	r0, b45e4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xfc>
		Log.info("Response received successfully");
   b45b8:	4914      	ldr	r1, [pc, #80]	; (b460c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x124>)
   b45ba:	4811      	ldr	r0, [pc, #68]	; (b4600 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x118>)
   b45bc:	f7ff fdbf 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		current.set_tempNodeNumber(current.get_nodeNumber());		// Temp no longer needed
   b45c0:	f001 fc46 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b45c4:	4606      	mov	r6, r0
   b45c6:	f001 fc43 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b45ca:	f001 fd2d 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b45ce:	4601      	mov	r1, r0
   b45d0:	4630      	mov	r0, r6
   b45d2:	f001 fd87 	bl	b60e4 <_ZN17currentStatusData18set_tempNodeNumberEh>
		digitalWrite(BLUE_LED,LOW);
   b45d6:	4628      	mov	r0, r5
   b45d8:	4621      	mov	r1, r4
   b45da:	f00b f846 	bl	bf66a <digitalWrite>
		return true;
   b45de:	2001      	movs	r0, #1
}
   b45e0:	b007      	add	sp, #28
   b45e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("Response not acknowledged");							// Acknowledgement not received - this needs more attention as node is in undefined state
   b45e4:	490a      	ldr	r1, [pc, #40]	; (b4610 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x128>)
   b45e6:	4806      	ldr	r0, [pc, #24]	; (b4600 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x118>)
   b45e8:	f7ff fda9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b45ec:	4628      	mov	r0, r5
   b45ee:	2100      	movs	r1, #0
   b45f0:	f00b f83b 	bl	bf66a <digitalWrite>
		return false;
   b45f4:	2000      	movs	r0, #0
   b45f6:	e7f3      	b.n	b45e0 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf8>
   b45f8:	2003d7e8 	.word	0x2003d7e8
   b45fc:	000c09a0 	.word	0x000c09a0
   b4600:	2003e654 	.word	0x2003e654
   b4604:	000c14b4 	.word	0x000c14b4
   b4608:	2003e0e0 	.word	0x2003e0e0
   b460c:	000c09eb 	.word	0x000c09eb
   b4610:	000c095c 	.word	0x000c095c

000b4614 <_ZN14LoRA_Functions13printNodeDataEv>:

	return true;

}

void LoRA_Functions::printNodeData() {
   b4614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4618:	b0b3      	sub	sp, #204	; 0xcc

	int nodeNumber;
	String nodeDeviceID;
   b461a:	493e      	ldr	r1, [pc, #248]	; (b4714 <_ZN14LoRA_Functions13printNodeDataEv+0x100>)
	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b461c:	4e3e      	ldr	r6, [pc, #248]	; (b4718 <_ZN14LoRA_Functions13printNodeDataEv+0x104>)
		if(nodeObjectContainer == NULL) {
			Log.info("Last entry at i = %d", i);
			break;								// Ran out of entries 
		} 
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b461e:	4f3f      	ldr	r7, [pc, #252]	; (b471c <_ZN14LoRA_Functions13printNodeDataEv+0x108>)
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b4620:	f8df 8120 	ldr.w	r8, [pc, #288]	; b4744 <_ZN14LoRA_Functions13printNodeDataEv+0x130>
	String nodeDeviceID;
   b4624:	a80a      	add	r0, sp, #40	; 0x28
   b4626:	f00a faa8 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
	Log.info("Print Node result:");
   b462a:	493d      	ldr	r1, [pc, #244]	; (b4720 <_ZN14LoRA_Functions13printNodeDataEv+0x10c>)
   b462c:	483d      	ldr	r0, [pc, #244]	; (b4724 <_ZN14LoRA_Functions13printNodeDataEv+0x110>)
   b462e:	f7ff fd86 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4632:	4839      	ldr	r0, [pc, #228]	; (b4718 <_ZN14LoRA_Functions13printNodeDataEv+0x104>)
   b4634:	f003 fb4b 	bl	b7cce <_ZNK10JsonParser14getOuterObjectEv>
   b4638:	4a3b      	ldr	r2, [pc, #236]	; (b4728 <_ZN14LoRA_Functions13printNodeDataEv+0x114>)
   b463a:	4601      	mov	r1, r0
   b463c:	ab09      	add	r3, sp, #36	; 0x24
   b463e:	4836      	ldr	r0, [pc, #216]	; (b4718 <_ZN14LoRA_Functions13printNodeDataEv+0x104>)
   b4640:	f003 fc9c 	bl	b7f7c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4644:	2500      	movs	r5, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4646:	9909      	ldr	r1, [sp, #36]	; 0x24
   b4648:	462a      	mov	r2, r5
   b464a:	4630      	mov	r0, r6
   b464c:	f003 fb61 	bl	b7d12 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   b4650:	4601      	mov	r1, r0
   b4652:	b950      	cbnz	r0, b466a <_ZN14LoRA_Functions13printNodeDataEv+0x56>
			Log.info("Last entry at i = %d", i);
   b4654:	4935      	ldr	r1, [pc, #212]	; (b472c <_ZN14LoRA_Functions13printNodeDataEv+0x118>)
   b4656:	4833      	ldr	r0, [pc, #204]	; (b4724 <_ZN14LoRA_Functions13printNodeDataEv+0x110>)
   b4658:	462a      	mov	r2, r5
   b465a:	f7ff fd70 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	String nodeDeviceID;
   b465e:	a80a      	add	r0, sp, #40	; 0x28
   b4660:	f00a fa40 	bl	beae4 <_ZN6StringD1Ev>
		if (Particle.connected()) Particle.publish("nodeData", data, PRIVATE);
	}

	//#endif

}
   b4664:	b033      	add	sp, #204	; 0xcc
   b4666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b466a:	ab0a      	add	r3, sp, #40	; 0x28
   b466c:	463a      	mov	r2, r7
   b466e:	9005      	str	r0, [sp, #20]
   b4670:	4630      	mov	r0, r6
   b4672:	f7ff fd56 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b4676:	9905      	ldr	r1, [sp, #20]
   b4678:	ab06      	add	r3, sp, #24
   b467a:	4642      	mov	r2, r8
   b467c:	4630      	mov	r0, r6
   b467e:	f7ff fd42 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b4682:	4a2b      	ldr	r2, [pc, #172]	; (b4730 <_ZN14LoRA_Functions13printNodeDataEv+0x11c>)
   b4684:	9905      	ldr	r1, [sp, #20]
   b4686:	ab07      	add	r3, sp, #28
   b4688:	4630      	mov	r0, r6
   b468a:	f7ff fd3c 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);
   b468e:	9905      	ldr	r1, [sp, #20]
   b4690:	4a28      	ldr	r2, [pc, #160]	; (b4734 <_ZN14LoRA_Functions13printNodeDataEv+0x120>)
   b4692:	ab08      	add	r3, sp, #32
   b4694:	4630      	mov	r0, r6
   b4696:	f7ff fd36 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		snprintf(data, sizeof(data), "Node %d, deviceID: %s, lastConnected: %s, type %d", nodeNumber, nodeDeviceID.c_str(),Time.timeStr(lastConnect).c_str(), sensorType);
   b469a:	9a07      	ldr	r2, [sp, #28]
   b469c:	9c06      	ldr	r4, [sp, #24]
   b469e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   b46a2:	17d3      	asrs	r3, r2, #31
   b46a4:	a80e      	add	r0, sp, #56	; 0x38
   b46a6:	f00a fccb 	bl	bf040 <_ZN9TimeClass7timeStrEx>
   b46aa:	9b08      	ldr	r3, [sp, #32]
   b46ac:	9302      	str	r3, [sp, #8]
   b46ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b46b0:	4a21      	ldr	r2, [pc, #132]	; (b4738 <_ZN14LoRA_Functions13printNodeDataEv+0x124>)
   b46b2:	2180      	movs	r1, #128	; 0x80
   b46b4:	e9cd 9300 	strd	r9, r3, [sp]
   b46b8:	a812      	add	r0, sp, #72	; 0x48
   b46ba:	4623      	mov	r3, r4
   b46bc:	f007 fec6 	bl	bc44c <snprintf>
   b46c0:	a80e      	add	r0, sp, #56	; 0x38
   b46c2:	f00a fa0f 	bl	beae4 <_ZN6StringD1Ev>
		Log.info(data);
   b46c6:	4817      	ldr	r0, [pc, #92]	; (b4724 <_ZN14LoRA_Functions13printNodeDataEv+0x110>)
   b46c8:	a912      	add	r1, sp, #72	; 0x48
   b46ca:	f7ff fd38 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b46ce:	f007 fdf5 	bl	bc2bc <spark_cloud_flag_connected>
		if (Particle.connected()) Particle.publish("nodeData", data, PRIVATE);
   b46d2:	b1d8      	cbz	r0, b470c <_ZN14LoRA_Functions13printNodeDataEv+0xf8>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b46d4:	4b19      	ldr	r3, [pc, #100]	; (b473c <_ZN14LoRA_Functions13printNodeDataEv+0x128>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b46d6:	491a      	ldr	r1, [pc, #104]	; (b4740 <_ZN14LoRA_Functions13printNodeDataEv+0x12c>)
   b46d8:	781b      	ldrb	r3, [r3, #0]
   b46da:	f88d 3000 	strb.w	r3, [sp]
   b46de:	aa12      	add	r2, sp, #72	; 0x48
   b46e0:	233c      	movs	r3, #60	; 0x3c
   b46e2:	a80e      	add	r0, sp, #56	; 0x38
   b46e4:	f008 f9d6 	bl	bca94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b46e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   b46ea:	b17c      	cbz	r4, b470c <_ZN14LoRA_Functions13printNodeDataEv+0xf8>
      if (--_M_use_count == 0)
   b46ec:	6863      	ldr	r3, [r4, #4]
   b46ee:	3b01      	subs	r3, #1
   b46f0:	6063      	str	r3, [r4, #4]
   b46f2:	b95b      	cbnz	r3, b470c <_ZN14LoRA_Functions13printNodeDataEv+0xf8>
          _M_dispose();
   b46f4:	6823      	ldr	r3, [r4, #0]
   b46f6:	4620      	mov	r0, r4
   b46f8:	689b      	ldr	r3, [r3, #8]
   b46fa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b46fc:	68a3      	ldr	r3, [r4, #8]
   b46fe:	3b01      	subs	r3, #1
   b4700:	60a3      	str	r3, [r4, #8]
   b4702:	b91b      	cbnz	r3, b470c <_ZN14LoRA_Functions13printNodeDataEv+0xf8>
            _M_destroy();
   b4704:	6823      	ldr	r3, [r4, #0]
   b4706:	4620      	mov	r0, r4
   b4708:	68db      	ldr	r3, [r3, #12]
   b470a:	4798      	blx	r3
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b470c:	3501      	adds	r5, #1
   b470e:	2d0a      	cmp	r5, #10
   b4710:	d199      	bne.n	b4646 <_ZN14LoRA_Functions13printNodeDataEv+0x32>
   b4712:	e7a4      	b.n	b465e <_ZN14LoRA_Functions13printNodeDataEv+0x4a>
   b4714:	000c20fc 	.word	0x000c20fc
   b4718:	2003d994 	.word	0x2003d994
   b471c:	000c0981 	.word	0x000c0981
   b4720:	000c0a0a 	.word	0x000c0a0a
   b4724:	2003e654 	.word	0x2003e654
   b4728:	000c0976 	.word	0x000c0976
   b472c:	000c0a1d 	.word	0x000c0a1d
   b4730:	000c0a32 	.word	0x000c0a32
   b4734:	000c0c84 	.word	0x000c0c84
   b4738:	000c0a37 	.word	0x000c0a37
   b473c:	2003d7d9 	.word	0x2003d7d9
   b4740:	000c0a69 	.word	0x000c0a69
   b4744:	000c0985 	.word	0x000c0985

000b4748 <_ZN14LoRA_Functions5setupEb>:
bool LoRA_Functions::setup(bool gatewayID) {
   b4748:	b570      	push	{r4, r5, r6, lr}
   b474a:	4605      	mov	r5, r0
   b474c:	b086      	sub	sp, #24
	if (!manager.init()) {
   b474e:	483f      	ldr	r0, [pc, #252]	; (b484c <_ZN14LoRA_Functions5setupEb+0x104>)
bool LoRA_Functions::setup(bool gatewayID) {
   b4750:	460e      	mov	r6, r1
	if (!manager.init()) {
   b4752:	f006 f84c 	bl	ba7ee <_ZN8RHRouter4initEv>
   b4756:	4604      	mov	r4, r0
   b4758:	b930      	cbnz	r0, b4768 <_ZN14LoRA_Functions5setupEb+0x20>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b475a:	493d      	ldr	r1, [pc, #244]	; (b4850 <_ZN14LoRA_Functions5setupEb+0x108>)
   b475c:	483d      	ldr	r0, [pc, #244]	; (b4854 <_ZN14LoRA_Functions5setupEb+0x10c>)
   b475e:	f7ff fcee 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b4762:	4620      	mov	r0, r4
   b4764:	b006      	add	sp, #24
   b4766:	bd70      	pop	{r4, r5, r6, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b4768:	ed9f 0a3b 	vldr	s0, [pc, #236]	; b4858 <_ZN14LoRA_Functions5setupEb+0x110>
   b476c:	483b      	ldr	r0, [pc, #236]	; (b485c <_ZN14LoRA_Functions5setupEb+0x114>)
   b476e:	f006 fb37 	bl	bade0 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4772:	483a      	ldr	r0, [pc, #232]	; (b485c <_ZN14LoRA_Functions5setupEb+0x114>)
   b4774:	2200      	movs	r2, #0
   b4776:	2117      	movs	r1, #23
   b4778:	f006 fcac 	bl	bb0d4 <_ZN7RH_RF9510setTxPowerEab>
	if (gatewayID == true) {
   b477c:	b37e      	cbz	r6, b47de <_ZN14LoRA_Functions5setupEb+0x96>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b477e:	f001 fb17 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b4782:	2100      	movs	r1, #0
   b4784:	f001 fc96 	bl	b60b4 <_ZN13sysStatusData14set_nodeNumberEh>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4788:	a802      	add	r0, sp, #8
   b478a:	f007 fd9f 	bl	bc2cc <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b478e:	9a02      	ldr	r2, [sp, #8]
   b4790:	4933      	ldr	r1, [pc, #204]	; (b4860 <_ZN14LoRA_Functions5setupEb+0x118>)
   b4792:	4830      	ldr	r0, [pc, #192]	; (b4854 <_ZN14LoRA_Functions5setupEb+0x10c>)
   b4794:	f7ff fcd3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4798:	a802      	add	r0, sp, #8
   b479a:	f00a f9a3 	bl	beae4 <_ZN6StringD1Ev>
	jp.addString(nodeID.get_nodeIDJson());				// Read in the JSON string from memory
   b479e:	f001 fbd5 	bl	b5f4c <_ZN10nodeIDData8instanceEv>
   b47a2:	4601      	mov	r1, r0
   b47a4:	a802      	add	r0, sp, #8
   b47a6:	f001 fbf7 	bl	b5f98 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b47aa:	9902      	ldr	r1, [sp, #8]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b47ac:	9101      	str	r1, [sp, #4]
   b47ae:	4608      	mov	r0, r1
   b47b0:	f00b fe53 	bl	c045a <strlen>
   b47b4:	9901      	ldr	r1, [sp, #4]
   b47b6:	4602      	mov	r2, r0
   b47b8:	482a      	ldr	r0, [pc, #168]	; (b4864 <_ZN14LoRA_Functions5setupEb+0x11c>)
   b47ba:	f003 fa50 	bl	b7c5e <_ZN10JsonBuffer7addDataEPKcj>
   b47be:	a802      	add	r0, sp, #8
   b47c0:	f00a f990 	bl	beae4 <_ZN6StringD1Ev>
	if (jp.parse()) Log.info("Parsed Successfully");
   b47c4:	4827      	ldr	r0, [pc, #156]	; (b4864 <_ZN14LoRA_Functions5setupEb+0x11c>)
   b47c6:	f003 ff41 	bl	b864c <_ZN10JsonParser5parseEv>
   b47ca:	2800      	cmp	r0, #0
   b47cc:	d03c      	beq.n	b4848 <_ZN14LoRA_Functions5setupEb+0x100>
   b47ce:	4926      	ldr	r1, [pc, #152]	; (b4868 <_ZN14LoRA_Functions5setupEb+0x120>)
	else Log.info("Parsing error");
   b47d0:	4820      	ldr	r0, [pc, #128]	; (b4854 <_ZN14LoRA_Functions5setupEb+0x10c>)
   b47d2:	f7ff fcb4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	printNodeData();
   b47d6:	4628      	mov	r0, r5
   b47d8:	f7ff ff1c 	bl	b4614 <_ZN14LoRA_Functions13printNodeDataEv>
	return true;
   b47dc:	e7c1      	b.n	b4762 <_ZN14LoRA_Functions5setupEb+0x1a>
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b47de:	f001 fae7 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b47e2:	f001 fc03 	bl	b5fec <_ZNK13sysStatusData14get_nodeNumberEv>
   b47e6:	b1d8      	cbz	r0, b4820 <_ZN14LoRA_Functions5setupEb+0xd8>
   b47e8:	f001 fae2 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b47ec:	f001 fbfe 	bl	b5fec <_ZNK13sysStatusData14get_nodeNumberEv>
   b47f0:	280a      	cmp	r0, #10
   b47f2:	d815      	bhi.n	b4820 <_ZN14LoRA_Functions5setupEb+0xd8>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b47f4:	f001 fadc 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b47f8:	f001 fbf8 	bl	b5fec <_ZNK13sysStatusData14get_nodeNumberEv>
   b47fc:	4601      	mov	r1, r0
   b47fe:	481b      	ldr	r0, [pc, #108]	; (b486c <_ZN14LoRA_Functions5setupEb+0x124>)
   b4800:	f005 fb21 	bl	b9e46 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4804:	4819      	ldr	r0, [pc, #100]	; (b486c <_ZN14LoRA_Functions5setupEb+0x124>)
   b4806:	f005 fb04 	bl	b9e12 <_ZN10RHDatagram11thisAddressEv>
   b480a:	9001      	str	r0, [sp, #4]
   b480c:	a802      	add	r0, sp, #8
   b480e:	f007 fd5d 	bl	bc2cc <spark_deviceID>
   b4812:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b4816:	4916      	ldr	r1, [pc, #88]	; (b4870 <_ZN14LoRA_Functions5setupEb+0x128>)
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4818:	480e      	ldr	r0, [pc, #56]	; (b4854 <_ZN14LoRA_Functions5setupEb+0x10c>)
   b481a:	f7ff fc90 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b481e:	e7bb      	b.n	b4798 <_ZN14LoRA_Functions5setupEb+0x50>
		sysStatus.set_nodeNumber(11);
   b4820:	f001 fac6 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b4824:	210b      	movs	r1, #11
   b4826:	f001 fc45 	bl	b60b4 <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b482a:	210b      	movs	r1, #11
   b482c:	480f      	ldr	r0, [pc, #60]	; (b486c <_ZN14LoRA_Functions5setupEb+0x124>)
   b482e:	f005 fb0a 	bl	b9e46 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4832:	480e      	ldr	r0, [pc, #56]	; (b486c <_ZN14LoRA_Functions5setupEb+0x124>)
   b4834:	f005 faed 	bl	b9e12 <_ZN10RHDatagram11thisAddressEv>
   b4838:	9001      	str	r0, [sp, #4]
   b483a:	a802      	add	r0, sp, #8
   b483c:	f007 fd46 	bl	bc2cc <spark_deviceID>
   b4840:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b4844:	490b      	ldr	r1, [pc, #44]	; (b4874 <_ZN14LoRA_Functions5setupEb+0x12c>)
   b4846:	e7e7      	b.n	b4818 <_ZN14LoRA_Functions5setupEb+0xd0>
	else Log.info("Parsing error");
   b4848:	490b      	ldr	r1, [pc, #44]	; (b4878 <_ZN14LoRA_Functions5setupEb+0x130>)
   b484a:	e7c1      	b.n	b47d0 <_ZN14LoRA_Functions5setupEb+0x88>
   b484c:	2003e0e0 	.word	0x2003e0e0
   b4850:	000c0a72 	.word	0x000c0a72
   b4854:	2003e654 	.word	0x2003e654
   b4858:	4464c000 	.word	0x4464c000
   b485c:	2003d864 	.word	0x2003d864
   b4860:	000c0a7e 	.word	0x000c0a7e
   b4864:	2003d994 	.word	0x2003d994
   b4868:	000c0b36 	.word	0x000c0b36
   b486c:	2003e0e4 	.word	0x2003e0e4
   b4870:	000c0ab8 	.word	0x000c0ab8
   b4874:	000c0aef 	.word	0x000c0aef
   b4878:	000c0b4a 	.word	0x000c0b4a

000b487c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>:
bool LoRA_Functions::acknowledgeDataReportGateway() { 		// This is a response to a data message it has a length of 11 and a specific payload and message flag
   b487c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	attempts++;
   b4880:	4d6b      	ldr	r5, [pc, #428]	; (b4a30 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1b4>)
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b4882:	4c6c      	ldr	r4, [pc, #432]	; (b4a34 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1b8>)
	attempts++;
   b4884:	682b      	ldr	r3, [r5, #0]
bool LoRA_Functions::acknowledgeDataReportGateway() { 		// This is a response to a data message it has a length of 11 and a specific payload and message flag
   b4886:	b089      	sub	sp, #36	; 0x24
	attempts++;
   b4888:	3301      	adds	r3, #1
   b488a:	602b      	str	r3, [r5, #0]
bool LoRA_Functions::acknowledgeDataReportGateway() { 		// This is a response to a data message it has a length of 11 and a specific payload and message flag
   b488c:	4606      	mov	r6, r0
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b488e:	f00a fcdc 	bl	bf24a <_ZN9TimeClass3nowEv>
   b4892:	1600      	asrs	r0, r0, #24
   b4894:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));		// Third byte
   b4896:	f00a fcd8 	bl	bf24a <_ZN9TimeClass3nowEv>
   b489a:	1400      	asrs	r0, r0, #16
   b489c:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));		// Second byte
   b489e:	f00a fcd4 	bl	bf24a <_ZN9TimeClass3nowEv>
   b48a2:	1200      	asrs	r0, r0, #8
   b48a4:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    	// First byte			
   b48a6:	f00a fcd0 	bl	bf24a <_ZN9TimeClass3nowEv>
   b48aa:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports - for Gateways
   b48ac:	f001 fa80 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b48b0:	f001 fc59 	bl	b6166 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b48b4:	0a00      	lsrs	r0, r0, #8
   b48b6:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b48b8:	f001 fa7a 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b48bc:	f001 fc53 	bl	b6166 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b48c0:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_openHours();
   b48c2:	f001 fac5 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b48c6:	f001 fd46 	bl	b6356 <_ZNK17currentStatusData13get_openHoursEv>
   b48ca:	7220      	strb	r0, [r4, #8]
	if (nodeConfigured(current.get_nodeNumber())) {			// Check to see if we need to set an alert code
   b48cc:	f001 fac0 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b48d0:	f001 fbaa 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b48d4:	4601      	mov	r1, r0
   b48d6:	4630      	mov	r0, r6
   b48d8:	f7ff fdba 	bl	b4450 <_ZN14LoRA_Functions14nodeConfiguredEi>
   b48dc:	2800      	cmp	r0, #0
   b48de:	d06f      	beq.n	b49c0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x144>
		Log.info("Data Ack- Node number %d valid", current.get_nodeNumber());
   b48e0:	f001 fab6 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b48e4:	f001 fba0 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b48e8:	4953      	ldr	r1, [pc, #332]	; (b4a38 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1bc>)
   b48ea:	4602      	mov	r2, r0
   b48ec:	4853      	ldr	r0, [pc, #332]	; (b4a3c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c0>)
   b48ee:	f7ff fc26 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		buf[9] = 0;											// Default is that there is no alert code
   b48f2:	2300      	movs	r3, #0
   b48f4:	7263      	strb	r3, [r4, #9]
	buf[10] = current.get_messageNumber();			 // Message number
   b48f6:	f001 faab 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b48fa:	f001 fbae 	bl	b605a <_ZNK17currentStatusData17get_messageNumberEv>
	Log.info("Acknowlegment to %snode %d message %d, time = %s and frequency %d minutes", (buf[9] > 0) ? "misconfigured ":"", current.get_nodeNumber(), buf[10], Time.timeStr(Time.now()).c_str(), sysStatus.get_frequencyMinutes());
   b48fe:	4f50      	ldr	r7, [pc, #320]	; (b4a40 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c4>)
   b4900:	7a62      	ldrb	r2, [r4, #9]
   b4902:	4b50      	ldr	r3, [pc, #320]	; (b4a44 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c8>)
	buf[10] = current.get_messageNumber();			 // Message number
   b4904:	72a0      	strb	r0, [r4, #10]
	Log.info("Acknowlegment to %snode %d message %d, time = %s and frequency %d minutes", (buf[9] > 0) ? "misconfigured ":"", current.get_nodeNumber(), buf[10], Time.timeStr(Time.now()).c_str(), sysStatus.get_frequencyMinutes());
   b4906:	2a00      	cmp	r2, #0
   b4908:	bf08      	it	eq
   b490a:	461f      	moveq	r7, r3
   b490c:	f001 faa0 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4910:	f001 fb8a 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4914:	7aa4      	ldrb	r4, [r4, #10]
   b4916:	4680      	mov	r8, r0
   b4918:	f00a fc97 	bl	bf24a <_ZN9TimeClass3nowEv>
   b491c:	4602      	mov	r2, r0
   b491e:	17c3      	asrs	r3, r0, #31
   b4920:	a804      	add	r0, sp, #16
   b4922:	f00a fb8d 	bl	bf040 <_ZN9TimeClass7timeStrEx>
   b4926:	f8dd 9010 	ldr.w	r9, [sp, #16]
   b492a:	f001 fa41 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b492e:	f001 fc1a 	bl	b6166 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4932:	463a      	mov	r2, r7
   b4934:	4944      	ldr	r1, [pc, #272]	; (b4a48 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1cc>)
   b4936:	9400      	str	r4, [sp, #0]
   b4938:	4643      	mov	r3, r8
   b493a:	e9cd 9001 	strd	r9, r0, [sp, #4]
   b493e:	483f      	ldr	r0, [pc, #252]	; (b4a3c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c0>)
   b4940:	f7ff fbfd 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4944:	a804      	add	r0, sp, #16
   b4946:	f00a f8cd 	bl	beae4 <_ZN6StringD1Ev>
	printNodeData();
   b494a:	4630      	mov	r0, r6
   b494c:	f7ff fe62 	bl	b4614 <_ZN14LoRA_Functions13printNodeDataEv>
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4950:	4b3e      	ldr	r3, [pc, #248]	; (b4a4c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1d0>)
   b4952:	881e      	ldrh	r6, [r3, #0]
   b4954:	2101      	movs	r1, #1
   b4956:	4630      	mov	r0, r6
   b4958:	f00a fe87 	bl	bf66a <digitalWrite>
	if (manager.sendtoWait(buf, 11, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b495c:	f001 fa78 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4960:	f001 fb62 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4964:	2204      	movs	r2, #4
   b4966:	4603      	mov	r3, r0
   b4968:	9200      	str	r2, [sp, #0]
   b496a:	4932      	ldr	r1, [pc, #200]	; (b4a34 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1b8>)
   b496c:	4838      	ldr	r0, [pc, #224]	; (b4a50 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1d4>)
   b496e:	220b      	movs	r2, #11
   b4970:	f005 fd02 	bl	ba378 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4974:	4b37      	ldr	r3, [pc, #220]	; (b4a54 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1d8>)
   b4976:	4604      	mov	r4, r0
		success++;
   b4978:	6818      	ldr	r0, [r3, #0]
	if (manager.sendtoWait(buf, 11, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b497a:	2c00      	cmp	r4, #0
   b497c:	d13b      	bne.n	b49f6 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x17a>
		success++;
   b497e:	3001      	adds	r0, #1
   b4980:	6018      	str	r0, [r3, #0]
		Log.info("Response received successfully - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b4982:	f00b f8d3 	bl	bfb2c <__aeabi_i2d>
   b4986:	4680      	mov	r8, r0
   b4988:	6828      	ldr	r0, [r5, #0]
   b498a:	4689      	mov	r9, r1
   b498c:	f00b f8ce 	bl	bfb2c <__aeabi_i2d>
   b4990:	4602      	mov	r2, r0
   b4992:	460b      	mov	r3, r1
   b4994:	4640      	mov	r0, r8
   b4996:	4649      	mov	r1, r9
   b4998:	f00b fa5c 	bl	bfe54 <__aeabi_ddiv>
   b499c:	4b2e      	ldr	r3, [pc, #184]	; (b4a58 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1dc>)
   b499e:	2200      	movs	r2, #0
   b49a0:	f00b f92e 	bl	bfc00 <__aeabi_dmul>
   b49a4:	4602      	mov	r2, r0
   b49a6:	460b      	mov	r3, r1
   b49a8:	4824      	ldr	r0, [pc, #144]	; (b4a3c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c0>)
   b49aa:	492c      	ldr	r1, [pc, #176]	; (b4a5c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1e0>)
   b49ac:	f7ff fbc7 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b49b0:	4630      	mov	r0, r6
   b49b2:	4621      	mov	r1, r4
   b49b4:	f00a fe59 	bl	bf66a <digitalWrite>
		return true;
   b49b8:	2001      	movs	r0, #1
}
   b49ba:	b009      	add	sp, #36	; 0x24
   b49bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		Log.info("Data Ack - Node number %d is invalid - resetting", current.get_nodeNumber());
   b49c0:	f001 fa46 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b49c4:	f001 fb30 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b49c8:	4925      	ldr	r1, [pc, #148]	; (b4a60 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1e4>)
   b49ca:	4602      	mov	r2, r0
   b49cc:	481b      	ldr	r0, [pc, #108]	; (b4a3c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c0>)
   b49ce:	f7ff fbb6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		current.set_alertCodeNode(true);						// Store as this will impact reporting
   b49d2:	f001 fa3d 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b49d6:	2101      	movs	r1, #1
   b49d8:	f001 fba2 	bl	b6120 <_ZN17currentStatusData17set_alertCodeNodeEh>
		buf[9] = 1;												// Set the alert code
   b49dc:	2301      	movs	r3, #1
   b49de:	7263      	strb	r3, [r4, #9]
		current.set_alertTimestampNode(Time.now());
   b49e0:	f001 fa36 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b49e4:	4607      	mov	r7, r0
   b49e6:	f00a fc30 	bl	bf24a <_ZN9TimeClass3nowEv>
   b49ea:	4602      	mov	r2, r0
   b49ec:	17c3      	asrs	r3, r0, #31
   b49ee:	4638      	mov	r0, r7
   b49f0:	f001 fc9a 	bl	b6328 <_ZN17currentStatusData22set_alertTimestampNodeEx>
   b49f4:	e77f      	b.n	b48f6 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x7a>
		Log.info("Response not acknowledged - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b49f6:	f00b f899 	bl	bfb2c <__aeabi_i2d>
   b49fa:	4680      	mov	r8, r0
   b49fc:	6828      	ldr	r0, [r5, #0]
   b49fe:	4689      	mov	r9, r1
   b4a00:	f00b f894 	bl	bfb2c <__aeabi_i2d>
   b4a04:	4602      	mov	r2, r0
   b4a06:	460b      	mov	r3, r1
   b4a08:	4640      	mov	r0, r8
   b4a0a:	4649      	mov	r1, r9
   b4a0c:	f00b fa22 	bl	bfe54 <__aeabi_ddiv>
   b4a10:	4b11      	ldr	r3, [pc, #68]	; (b4a58 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1dc>)
   b4a12:	2200      	movs	r2, #0
   b4a14:	f00b f8f4 	bl	bfc00 <__aeabi_dmul>
   b4a18:	4602      	mov	r2, r0
   b4a1a:	460b      	mov	r3, r1
   b4a1c:	4807      	ldr	r0, [pc, #28]	; (b4a3c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c0>)
   b4a1e:	4911      	ldr	r1, [pc, #68]	; (b4a64 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1e8>)
   b4a20:	f7ff fb8d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b4a24:	4630      	mov	r0, r6
   b4a26:	2100      	movs	r1, #0
   b4a28:	f00a fe1f 	bl	bf66a <digitalWrite>
		return false;
   b4a2c:	2000      	movs	r0, #0
   b4a2e:	e7c4      	b.n	b49ba <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x13e>
   b4a30:	2003d7e4 	.word	0x2003d7e4
   b4a34:	2003d7e8 	.word	0x2003d7e8
   b4a38:	000c0b67 	.word	0x000c0b67
   b4a3c:	2003e654 	.word	0x2003e654
   b4a40:	000c0b58 	.word	0x000c0b58
   b4a44:	000c20fc 	.word	0x000c20fc
   b4a48:	000c0bb7 	.word	0x000c0bb7
   b4a4c:	000c14b4 	.word	0x000c14b4
   b4a50:	2003e0e0 	.word	0x2003e0e0
   b4a54:	2003d7e0 	.word	0x2003d7e0
   b4a58:	40590000 	.word	0x40590000
   b4a5c:	000c0c01 	.word	0x000c0c01
   b4a60:	000c0b86 	.word	0x000c0b86
   b4a64:	000c0c35 	.word	0x000c0c35

000b4a68 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>:
bool LoRA_Functions::respondToLoRAMessageGateway() {
   b4a68:	b510      	push	{r4, lr}
	Log.info("Responding using the %s message type", loraStateNames[lora_state]);
   b4a6a:	4c13      	ldr	r4, [pc, #76]	; (b4ab8 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x50>)
   b4a6c:	4b13      	ldr	r3, [pc, #76]	; (b4abc <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x54>)
   b4a6e:	7822      	ldrb	r2, [r4, #0]
   b4a70:	4913      	ldr	r1, [pc, #76]	; (b4ac0 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x58>)
   b4a72:	4814      	ldr	r0, [pc, #80]	; (b4ac4 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x5c>)
   b4a74:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b4a78:	f7ff fb61 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b4a7c:	7823      	ldrb	r3, [r4, #0]
   b4a7e:	2b04      	cmp	r3, #4
   b4a80:	d00c      	beq.n	b4a9c <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x34>
	if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().acknowledgeJoinRequestGateway()) return true;}
   b4a82:	7823      	ldrb	r3, [r4, #0]
   b4a84:	2b02      	cmp	r3, #2
   b4a86:	d104      	bne.n	b4a92 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x2a>
   b4a88:	f7ff fb72 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4a8c:	f7ff fd2c 	bl	b44e8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>
   b4a90:	b950      	cbnz	r0, b4aa8 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x40>
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b4a92:	7823      	ldrb	r3, [r4, #0]
   b4a94:	2b06      	cmp	r3, #6
   b4a96:	d009      	beq.n	b4aac <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x44>
	return false; 
   b4a98:	2000      	movs	r0, #0
   b4a9a:	e006      	b.n	b4aaa <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x42>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b4a9c:	f7ff fb68 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4aa0:	f7ff feec 	bl	b487c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>
   b4aa4:	2800      	cmp	r0, #0
   b4aa6:	d0ec      	beq.n	b4a82 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x1a>
   b4aa8:	2001      	movs	r0, #1
}
   b4aaa:	bd10      	pop	{r4, pc}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b4aac:	f7ff fb60 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
}
   b4ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b4ab4:	f7ff bc18 	b.w	b42e8 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>
   b4ab8:	2003d7d8 	.word	0x2003d7d8
   b4abc:	2003d60c 	.word	0x2003d60c
   b4ac0:	000c0c64 	.word	0x000c0c64
   b4ac4:	2003e654 	.word	0x2003e654

000b4ac8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   b4ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4aca:	4604      	mov	r4, r0
   b4acc:	4615      	mov	r5, r2
   b4ace:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b4ad0:	f003 fb78 	bl	b81c4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4ad4:	9901      	ldr	r1, [sp, #4]
   b4ad6:	2201      	movs	r2, #1
   b4ad8:	4620      	mov	r0, r4
   b4ada:	f003 fae1 	bl	b80a0 <_ZN10JsonWriter12insertStringEPKcb>
		insertValue(key);
		insertChar(':');
   b4ade:	4620      	mov	r0, r4
   b4ae0:	213a      	movs	r1, #58	; 0x3a
   b4ae2:	f003 fa91 	bl	b8008 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   b4ae6:	4904      	ldr	r1, [pc, #16]	; (b4af8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   b4ae8:	462a      	mov	r2, r5
   b4aea:	4620      	mov	r0, r4
		insertValue(value);
	}
   b4aec:	b003      	add	sp, #12
   b4aee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   b4af2:	f003 bac8 	b.w	b8086 <_ZN10JsonWriter13insertsprintfEPKcz>
   b4af6:	bf00      	nop
   b4af8:	000c0cb2 	.word	0x000c0cb2

000b4afc <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b4afc:	b513      	push	{r0, r1, r4, lr}
        val_(val) {
   b4afe:	4b11      	ldr	r3, [pc, #68]	; (b4b44 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x48>)
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b4b00:	4c11      	ldr	r4, [pc, #68]	; (b4b48 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x4c>)
   b4b02:	2201      	movs	r2, #1
   b4b04:	701a      	strb	r2, [r3, #0]
   b4b06:	2332      	movs	r3, #50	; 0x32
   b4b08:	9300      	str	r3, [sp, #0]
   b4b0a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b4b0e:	f204 432c 	addw	r3, r4, #1068	; 0x42c
   b4b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4b16:	4620      	mov	r0, r4
   b4b18:	f003 f8be 	bl	b7c98 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b4b1c:	4b0b      	ldr	r3, [pc, #44]	; (b4b4c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x50>)
   b4b1e:	6023      	str	r3, [r4, #0]
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b4b20:	4a0b      	ldr	r2, [pc, #44]	; (b4b50 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x54>)
   b4b22:	4c0c      	ldr	r4, [pc, #48]	; (b4b54 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x58>)
   b4b24:	490c      	ldr	r1, [pc, #48]	; (b4b58 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x5c>)
   b4b26:	4b0d      	ldr	r3, [pc, #52]	; (b4b5c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x60>)
   b4b28:	7812      	ldrb	r2, [r2, #0]
   b4b2a:	7809      	ldrb	r1, [r1, #0]
   b4b2c:	4620      	mov	r0, r4
   b4b2e:	f006 f919 	bl	bad64 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4b32:	480b      	ldr	r0, [pc, #44]	; (b4b60 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x64>)
   b4b34:	2200      	movs	r2, #0
   b4b36:	4621      	mov	r1, r4
}
   b4b38:	b002      	add	sp, #8
   b4b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4b3e:	f005 bc11 	b.w	ba364 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b4b42:	bf00      	nop
   b4b44:	2003d7d9 	.word	0x2003d7d9
   b4b48:	2003d994 	.word	0x2003d994
   b4b4c:	000c0e94 	.word	0x000c0e94
   b4b50:	000c14ba 	.word	0x000c14ba
   b4b54:	2003d864 	.word	0x2003d864
   b4b58:	000c14b8 	.word	0x000c14b8
   b4b5c:	2003e458 	.word	0x2003e458
   b4b60:	2003e0e0 	.word	0x2003e0e0

000b4b64 <_ZN14LoRA_Functions14findNodeNumberEPKc>:
uint8_t LoRA_Functions::findNodeNumber(const char* deviceID) {
   b4b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4b68:	b096      	sub	sp, #88	; 0x58
   b4b6a:	460e      	mov	r6, r1
	String nodeDeviceID;
   b4b6c:	a802      	add	r0, sp, #8
   b4b6e:	494d      	ldr	r1, [pc, #308]	; (b4ca4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x140>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4b70:	f8df 8134 	ldr.w	r8, [pc, #308]	; b4ca8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b4b74:	f8df a148 	ldr.w	sl, [pc, #328]	; b4cc0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x15c>
	String nodeDeviceID;
   b4b78:	f009 ffff 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4b7c:	484a      	ldr	r0, [pc, #296]	; (b4ca8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>)
   b4b7e:	f003 f8a6 	bl	b7cce <_ZNK10JsonParser14getOuterObjectEv>
   b4b82:	4a4a      	ldr	r2, [pc, #296]	; (b4cac <_ZN14LoRA_Functions14findNodeNumberEPKc+0x148>)
   b4b84:	4601      	mov	r1, r0
   b4b86:	ab01      	add	r3, sp, #4
   b4b88:	4847      	ldr	r0, [pc, #284]	; (b4ca8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>)
   b4b8a:	f003 f9f7 	bl	b7f7c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4b8e:	2500      	movs	r5, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4b90:	9901      	ldr	r1, [sp, #4]
   b4b92:	462a      	mov	r2, r5
   b4b94:	4640      	mov	r0, r8
   b4b96:	f003 f8bc 	bl	b7d12 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
   b4b9a:	1c6c      	adds	r4, r5, #1
		if(nodeObjectContainer == NULL) {
   b4b9c:	4607      	mov	r7, r0
   b4b9e:	46a1      	mov	r9, r4
   b4ba0:	2800      	cmp	r0, #0
   b4ba2:	d15f      	bne.n	b4c64 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x100>
			Log.info("findNodeNumber ran out of entries at i = %d",i);
   b4ba4:	4942      	ldr	r1, [pc, #264]	; (b4cb0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x14c>)
   b4ba6:	4843      	ldr	r0, [pc, #268]	; (b4cb4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x150>)
   b4ba8:	462a      	mov	r2, r5
   b4baa:	f7ff fac8 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   b4bae:	493e      	ldr	r1, [pc, #248]	; (b4ca8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>)
   b4bb0:	a806      	add	r0, sp, #24
   b4bb2:	f003 fb2b 	bl	b820c <_ZN12JsonModifierC1ER10JsonParser>
	Log.info("New node will be assigned number %d, deviceID of %s and type of 3",index, deviceID);
   b4bb6:	4633      	mov	r3, r6
   b4bb8:	4622      	mov	r2, r4
   b4bba:	493f      	ldr	r1, [pc, #252]	; (b4cb8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x154>)
   b4bbc:	483d      	ldr	r0, [pc, #244]	; (b4cb4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x150>)
   b4bbe:	f7ff fabe 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	mod.startAppend(jp.getOuterArray());
   b4bc2:	4839      	ldr	r0, [pc, #228]	; (b4ca8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>)
   b4bc4:	f003 f878 	bl	b7cb8 <_ZNK10JsonParser13getOuterArrayEv>
   b4bc8:	4601      	mov	r1, r0
   b4bca:	a806      	add	r0, sp, #24
   b4bcc:	f003 fb30 	bl	b8230 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
	bool startObject() { return startObjectOrArray('{', '}'); };
   b4bd0:	227d      	movs	r2, #125	; 0x7d
   b4bd2:	217b      	movs	r1, #123	; 0x7b
   b4bd4:	a806      	add	r0, sp, #24
   b4bd6:	f003 fb00 	bl	b81da <_ZN10JsonWriter18startObjectOrArrayEcc>
		mod.insertKeyValue("node", (int)index);
   b4bda:	4622      	mov	r2, r4
   b4bdc:	4937      	ldr	r1, [pc, #220]	; (b4cbc <_ZN14LoRA_Functions14findNodeNumberEPKc+0x158>)
   b4bde:	a806      	add	r0, sp, #24
   b4be0:	f7ff ff72 	bl	b4ac8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   b4be4:	a806      	add	r0, sp, #24
   b4be6:	f003 faed 	bl	b81c4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4bea:	2201      	movs	r2, #1
   b4bec:	a806      	add	r0, sp, #24
   b4bee:	4934      	ldr	r1, [pc, #208]	; (b4cc0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x15c>)
   b4bf0:	f003 fa56 	bl	b80a0 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4bf4:	a806      	add	r0, sp, #24
   b4bf6:	213a      	movs	r1, #58	; 0x3a
   b4bf8:	f003 fa06 	bl	b8008 <_ZN10JsonWriter10insertCharEc>
	void insertValue(const char *value) { insertString(value, true); }
   b4bfc:	4631      	mov	r1, r6
   b4bfe:	2201      	movs	r2, #1
   b4c00:	a806      	add	r0, sp, #24
   b4c02:	f003 fa4d 	bl	b80a0 <_ZN10JsonWriter12insertStringEPKcb>
		mod.insertKeyValue("last", Time.now());
   b4c06:	f00a fb20 	bl	bf24a <_ZN9TimeClass3nowEv>
   b4c0a:	4605      	mov	r5, r0
		insertCheckSeparator();
   b4c0c:	a806      	add	r0, sp, #24
   b4c0e:	f003 fad9 	bl	b81c4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4c12:	2201      	movs	r2, #1
   b4c14:	a806      	add	r0, sp, #24
   b4c16:	492b      	ldr	r1, [pc, #172]	; (b4cc4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x160>)
   b4c18:	f003 fa42 	bl	b80a0 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4c1c:	a806      	add	r0, sp, #24
   b4c1e:	213a      	movs	r1, #58	; 0x3a
   b4c20:	f003 f9f2 	bl	b8008 <_ZN10JsonWriter10insertCharEc>
	void insertValue(long value) { insertsprintf("%ld", value); }
   b4c24:	462a      	mov	r2, r5
   b4c26:	a806      	add	r0, sp, #24
   b4c28:	4927      	ldr	r1, [pc, #156]	; (b4cc8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x164>)
   b4c2a:	f003 fa2c 	bl	b8086 <_ZN10JsonWriter13insertsprintfEPKcz>
		mod.insertKeyValue("type", (int)3);
   b4c2e:	2203      	movs	r2, #3
   b4c30:	4926      	ldr	r1, [pc, #152]	; (b4ccc <_ZN14LoRA_Functions14findNodeNumberEPKc+0x168>)
   b4c32:	a806      	add	r0, sp, #24
   b4c34:	f7ff ff48 	bl	b4ac8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.finishObjectOrArray();
   b4c38:	a806      	add	r0, sp, #24
   b4c3a:	f003 f9f3 	bl	b8024 <_ZN10JsonWriter19finishObjectOrArrayEv>
	mod.finish();
   b4c3e:	a806      	add	r0, sp, #24
   b4c40:	f003 fd51 	bl	b86e6 <_ZN12JsonModifier6finishEv>
	nodeID.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4c44:	f001 f982 	bl	b5f4c <_ZN10nodeIDData8instanceEv>
   b4c48:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b4c4c:	f001 f9b6 	bl	b5fbc <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	Log.info("Returning index %d",index);
   b4c50:	4622      	mov	r2, r4
   b4c52:	491f      	ldr	r1, [pc, #124]	; (b4cd0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x16c>)
   b4c54:	4817      	ldr	r0, [pc, #92]	; (b4cb4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x150>)
   b4c56:	f7ff fa72 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   b4c5a:	a806      	add	r0, sp, #24
	return index;
   b4c5c:	b2e4      	uxtb	r4, r4
	JsonModifier mod(jp);
   b4c5e:	f002 ffaf 	bl	b7bc0 <_ZN12JsonModifierD1Ev>
   b4c62:	e012      	b.n	b4c8a <_ZN14LoRA_Functions14findNodeNumberEPKc+0x126>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b4c64:	4601      	mov	r1, r0
   b4c66:	ab02      	add	r3, sp, #8
   b4c68:	4640      	mov	r0, r8
   b4c6a:	4652      	mov	r2, sl
   b4c6c:	f7ff fa59 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4c70:	4631      	mov	r1, r6
   b4c72:	a802      	add	r0, sp, #8
   b4c74:	f00a f847 	bl	bed06 <_ZNK6String6equalsEPKc>
		if (nodeDeviceID == deviceID) {
   b4c78:	b170      	cbz	r0, b4c98 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x134>
			jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);		// A match!
   b4c7a:	4a10      	ldr	r2, [pc, #64]	; (b4cbc <_ZN14LoRA_Functions14findNodeNumberEPKc+0x158>)
   b4c7c:	480a      	ldr	r0, [pc, #40]	; (b4ca8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>)
   b4c7e:	466b      	mov	r3, sp
   b4c80:	4639      	mov	r1, r7
   b4c82:	f7ff fa40 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
			return nodeNumber;												// All is good - return node number for the deviceID passed to the function
   b4c86:	f89d 4000 	ldrb.w	r4, [sp]
	String nodeDeviceID;
   b4c8a:	a802      	add	r0, sp, #8
   b4c8c:	f009 ff2a 	bl	beae4 <_ZN6StringD1Ev>
}
   b4c90:	4620      	mov	r0, r4
   b4c92:	b016      	add	sp, #88	; 0x58
   b4c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;															// This will be the node number for the next node if no match is found
   b4c98:	1cac      	adds	r4, r5, #2
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4c9a:	464d      	mov	r5, r9
   b4c9c:	2d0a      	cmp	r5, #10
   b4c9e:	f47f af77 	bne.w	b4b90 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x2c>
   b4ca2:	e784      	b.n	b4bae <_ZN14LoRA_Functions14findNodeNumberEPKc+0x4a>
   b4ca4:	000c20fc 	.word	0x000c20fc
   b4ca8:	2003d994 	.word	0x2003d994
   b4cac:	000c0976 	.word	0x000c0976
   b4cb0:	000c0c89 	.word	0x000c0c89
   b4cb4:	2003e654 	.word	0x2003e654
   b4cb8:	000c0cb5 	.word	0x000c0cb5
   b4cbc:	000c0985 	.word	0x000c0985
   b4cc0:	000c0981 	.word	0x000c0981
   b4cc4:	000c0a32 	.word	0x000c0a32
   b4cc8:	000c18f4 	.word	0x000c18f4
   b4ccc:	000c0c84 	.word	0x000c0c84
   b4cd0:	000c0cf7 	.word	0x000c0cf7

000b4cd4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>:
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	lora_state = JOIN_ACK;			// Prepare to respond
   b4cd6:	4b33      	ldr	r3, [pc, #204]	; (b4da4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xd0>)
   b4cd8:	2202      	movs	r2, #2
   b4cda:	701a      	strb	r2, [r3, #0]
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4cdc:	b091      	sub	sp, #68	; 0x44
		nodeDeviceID[i] = buf[i+2];
   b4cde:	4b32      	ldr	r3, [pc, #200]	; (b4da8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xd4>)
   b4ce0:	ac09      	add	r4, sp, #36	; 0x24
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4ce2:	4605      	mov	r5, r0
		nodeDeviceID[i] = buf[i+2];
   b4ce4:	f103 0218 	add.w	r2, r3, #24
   b4ce8:	4627      	mov	r7, r4
   b4cea:	6818      	ldr	r0, [r3, #0]
   b4cec:	6859      	ldr	r1, [r3, #4]
   b4cee:	4626      	mov	r6, r4
   b4cf0:	c603      	stmia	r6!, {r0, r1}
   b4cf2:	3308      	adds	r3, #8
   b4cf4:	4293      	cmp	r3, r2
   b4cf6:	4634      	mov	r4, r6
   b4cf8:	d1f7      	bne.n	b4cea <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x16>
   b4cfa:	781b      	ldrb	r3, [r3, #0]
   b4cfc:	7033      	strb	r3, [r6, #0]
	current.set_tempNodeNumber(current.get_nodeNumber());			// Store the old node number for the ack - also differentiates between unconfigured node and time set
   b4cfe:	f001 f8a7 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4d02:	4604      	mov	r4, r0
   b4d04:	f001 f8a4 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4d08:	f001 f98e 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d0c:	4601      	mov	r1, r0
   b4d0e:	4620      	mov	r0, r4
   b4d10:	f001 f9e8 	bl	b60e4 <_ZN17currentStatusData18set_tempNodeNumberEh>
	if (current.get_nodeNumber() > 10) {							// An unconfigured node
   b4d14:	f001 f89c 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4d18:	f001 f986 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d1c:	280a      	cmp	r0, #10
   b4d1e:	d91d      	bls.n	b4d5c <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x88>
		current.set_nodeNumber(findNodeNumber(nodeDeviceID));		// Look up the new node number
   b4d20:	f001 f896 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4d24:	4639      	mov	r1, r7
   b4d26:	4604      	mov	r4, r0
   b4d28:	4628      	mov	r0, r5
   b4d2a:	f7ff ff1b 	bl	b4b64 <_ZN14LoRA_Functions14findNodeNumberEPKc>
   b4d2e:	4601      	mov	r1, r0
   b4d30:	4620      	mov	r0, r4
   b4d32:	f001 f9d1 	bl	b60d8 <_ZN17currentStatusData14set_nodeNumberEh>
		Log.info("Join request from Unconfigured node %s will change node number from %d to %d",  nodeDeviceID, current.get_tempNodeNumber(), current.get_nodeNumber());
   b4d36:	f001 f88b 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4d3a:	f001 f97a 	bl	b6032 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4d3e:	9003      	str	r0, [sp, #12]
   b4d40:	f001 f886 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4d44:	f001 f970 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d48:	9b03      	ldr	r3, [sp, #12]
   b4d4a:	9000      	str	r0, [sp, #0]
   b4d4c:	4917      	ldr	r1, [pc, #92]	; (b4dac <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xd8>)
   b4d4e:	4818      	ldr	r0, [pc, #96]	; (b4db0 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xdc>)
   b4d50:	463a      	mov	r2, r7
   b4d52:	f7ff f9f4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b4d56:	2001      	movs	r0, #1
   b4d58:	b011      	add	sp, #68	; 0x44
   b4d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf[27] = getType(current.get_nodeNumber());
   b4d5c:	f001 f878 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4d60:	f001 f962 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d64:	4601      	mov	r1, r0
   b4d66:	4628      	mov	r0, r5
   b4d68:	f7ff fb92 	bl	b4490 <_ZN14LoRA_Functions7getTypeEi>
   b4d6c:	4c11      	ldr	r4, [pc, #68]	; (b4db4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xe0>)
   b4d6e:	76e0      	strb	r0, [r4, #27]
		Log.info("Join request from %s with node %d - setting clock and setting sensorType to %d", LoRA_Functions::instance().findDeviceID(1).c_str(), current.get_nodeNumber(), buf[27]);
   b4d70:	f7ff f9fe 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4d74:	2201      	movs	r2, #1
   b4d76:	4601      	mov	r1, r0
   b4d78:	a805      	add	r0, sp, #20
   b4d7a:	f7ff fb2d 	bl	b43d8 <_ZN14LoRA_Functions12findDeviceIDEh>
	const char * c_str() const { return buffer; }
   b4d7e:	9a05      	ldr	r2, [sp, #20]
   b4d80:	9203      	str	r2, [sp, #12]
   b4d82:	f001 f865 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4d86:	f001 f94f 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d8a:	7ee1      	ldrb	r1, [r4, #27]
   b4d8c:	9100      	str	r1, [sp, #0]
   b4d8e:	4603      	mov	r3, r0
   b4d90:	9a03      	ldr	r2, [sp, #12]
   b4d92:	4909      	ldr	r1, [pc, #36]	; (b4db8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xe4>)
   b4d94:	4806      	ldr	r0, [pc, #24]	; (b4db0 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xdc>)
   b4d96:	f7ff f9d2 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4d9a:	a805      	add	r0, sp, #20
   b4d9c:	f009 fea2 	bl	beae4 <_ZN6StringD1Ev>
   b4da0:	e7d9      	b.n	b4d56 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x82>
   b4da2:	bf00      	nop
   b4da4:	2003d7d8 	.word	0x2003d7d8
   b4da8:	2003d7ea 	.word	0x2003d7ea
   b4dac:	000c0d0a 	.word	0x000c0d0a
   b4db0:	2003e654 	.word	0x2003e654
   b4db4:	2003d7e8 	.word	0x2003d7e8
   b4db8:	000c0d57 	.word	0x000c0d57

000b4dbc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>:
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b4dbc:	b570      	push	{r4, r5, r6, lr}
   b4dbe:	b088      	sub	sp, #32
	uint8_t len = sizeof(buf);
   b4dc0:	2379      	movs	r3, #121	; 0x79
   b4dc2:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b4dc6:	f10d 031f 	add.w	r3, sp, #31
   b4dca:	9303      	str	r3, [sp, #12]
   b4dcc:	f10d 031e 	add.w	r3, sp, #30
   b4dd0:	4e49      	ldr	r6, [pc, #292]	; (b4ef8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x13c>)
   b4dd2:	9302      	str	r3, [sp, #8]
   b4dd4:	f10d 031d 	add.w	r3, sp, #29
   b4dd8:	9301      	str	r3, [sp, #4]
   b4dda:	ab07      	add	r3, sp, #28
   b4ddc:	9300      	str	r3, [sp, #0]
   b4dde:	4847      	ldr	r0, [pc, #284]	; (b4efc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x140>)
   b4de0:	f10d 031b 	add.w	r3, sp, #27
   b4de4:	f10d 021a 	add.w	r2, sp, #26
   b4de8:	4631      	mov	r1, r6
   b4dea:	f005 faf9 	bl	ba3e0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b4dee:	b910      	cbnz	r0, b4df6 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x3a>
	return false;
   b4df0:	2000      	movs	r0, #0
}
   b4df2:	b008      	add	sp, #32
   b4df4:	bd70      	pop	{r4, r5, r6, pc}
		buf[len] = 0;
   b4df6:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b4dfa:	2400      	movs	r4, #0
   b4dfc:	54f4      	strb	r4, [r6, r3]
		if (!((buf[0] << 8 | buf[1]) == sysStatus.get_magicNumber())) {
   b4dfe:	8835      	ldrh	r5, [r6, #0]
   b4e00:	f000 ffd6 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b4e04:	f001 f9aa 	bl	b615c <_ZNK13sysStatusData15get_magicNumberEv>
   b4e08:	ba6d      	rev16	r5, r5
   b4e0a:	b2ad      	uxth	r5, r5
   b4e0c:	42a8      	cmp	r0, r5
   b4e0e:	d00e      	beq.n	b4e2e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x72>
			Log.info("Message magic number of %d did not match the Magic Number in memory %d - Ignoring", (buf[0] << 8 | buf[1]), sysStatus.get_magicNumber());
   b4e10:	8832      	ldrh	r2, [r6, #0]
   b4e12:	ba52      	rev16	r2, r2
   b4e14:	b292      	uxth	r2, r2
   b4e16:	9205      	str	r2, [sp, #20]
   b4e18:	f000 ffca 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b4e1c:	f001 f99e 	bl	b615c <_ZNK13sysStatusData15get_magicNumberEv>
   b4e20:	9a05      	ldr	r2, [sp, #20]
   b4e22:	4937      	ldr	r1, [pc, #220]	; (b4f00 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x144>)
   b4e24:	4603      	mov	r3, r0
   b4e26:	4837      	ldr	r0, [pc, #220]	; (b4f04 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x148>)
   b4e28:	f7ff f989 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
			return false;
   b4e2c:	e7e0      	b.n	b4df0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
			current.set_nodeNumber(from);
   b4e2e:	f001 f80f 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4e32:	f89d 101b 	ldrb.w	r1, [sp, #27]
			lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b4e36:	4c34      	ldr	r4, [pc, #208]	; (b4f08 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x14c>)
			current.set_nodeNumber(from);
   b4e38:	f001 f94e 	bl	b60d8 <_ZN17currentStatusData14set_nodeNumberEh>
			lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b4e3c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b4e40:	f003 030f 	and.w	r3, r3, #15
   b4e44:	7023      	strb	r3, [r4, #0]
			Log.info("From node %d with rssi=%d - a %s message of length %d in %d hops", current.get_nodeNumber(), driver.lastRssi(), loraStateNames[lora_state], len, hops);
   b4e46:	f001 f803 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b4e4a:	f001 f8ed 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e4e:	9005      	str	r0, [sp, #20]
   b4e50:	482e      	ldr	r0, [pc, #184]	; (b4f0c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x150>)
   b4e52:	f005 f876 	bl	b9f42 <_ZN15RHGenericDriver8lastRssiEv>
   b4e56:	f89d 101f 	ldrb.w	r1, [sp, #31]
   b4e5a:	9102      	str	r1, [sp, #8]
   b4e5c:	f89d 101a 	ldrb.w	r1, [sp, #26]
   b4e60:	9101      	str	r1, [sp, #4]
   b4e62:	4603      	mov	r3, r0
   b4e64:	492a      	ldr	r1, [pc, #168]	; (b4f10 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x154>)
   b4e66:	7820      	ldrb	r0, [r4, #0]
   b4e68:	9a05      	ldr	r2, [sp, #20]
   b4e6a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b4e6e:	9100      	str	r1, [sp, #0]
   b4e70:	4824      	ldr	r0, [pc, #144]	; (b4f04 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x148>)
   b4e72:	4928      	ldr	r1, [pc, #160]	; (b4f14 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x158>)
   b4e74:	f7ff f963 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_RPT) { if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b4e78:	7823      	ldrb	r3, [r4, #0]
   b4e7a:	2b03      	cmp	r3, #3
   b4e7c:	d10f      	bne.n	b4e9e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xe2>
   b4e7e:	f7ff f977 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4e82:	f7ff f99d 	bl	b41c0 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>
		else if (lora_state == ALERT_RPT) { if(!LoRA_Functions::instance().decipherAlertReportGateway()) return false;}
   b4e86:	2800      	cmp	r0, #0
   b4e88:	d0b2      	beq.n	b4df0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (sysStatus.get_updatedFrequencyMinutes() > 0) {              							// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b4e8a:	f000 ff91 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b4e8e:	f001 f96f 	bl	b6170 <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b4e92:	b990      	cbnz	r0, b4eba <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xfe>
		else Log.info("Reporting frequency unchanged");
   b4e94:	4920      	ldr	r1, [pc, #128]	; (b4f18 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x15c>)
   b4e96:	481b      	ldr	r0, [pc, #108]	; (b4f04 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x148>)
   b4e98:	f7ff f951 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4e9c:	e026      	b.n	b4eec <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x130>
		else if (lora_state == JOIN_REQ) { if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b4e9e:	2b01      	cmp	r3, #1
   b4ea0:	d104      	bne.n	b4eac <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xf0>
   b4ea2:	f7ff f965 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4ea6:	f7ff ff15 	bl	b4cd4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>
   b4eaa:	e7ec      	b.n	b4e86 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xca>
		else if (lora_state == ALERT_RPT) { if(!LoRA_Functions::instance().decipherAlertReportGateway()) return false;}
   b4eac:	2b05      	cmp	r3, #5
   b4eae:	d1ec      	bne.n	b4e8a <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xce>
   b4eb0:	f7ff f95e 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4eb4:	f7ff f9e4 	bl	b4280 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>
   b4eb8:	e7e5      	b.n	b4e86 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xca>
			sysStatus.set_frequencyMinutes(sysStatus.get_updatedFrequencyMinutes());		// This was the temporary value from the particle function
   b4eba:	f000 ff79 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b4ebe:	4604      	mov	r4, r0
   b4ec0:	f000 ff76 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b4ec4:	f001 f954 	bl	b6170 <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b4ec8:	4601      	mov	r1, r0
   b4eca:	4620      	mov	r0, r4
   b4ecc:	f001 f993 	bl	b61f6 <_ZN13sysStatusData20set_frequencyMinutesEt>
			sysStatus.set_updatedFrequencyMinutes(0);
   b4ed0:	f000 ff6e 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b4ed4:	2100      	movs	r1, #0
   b4ed6:	f001 f994 	bl	b6202 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
			Log.info("We are updating the publish frequency to %i minutes", sysStatus.get_frequencyMinutes());
   b4eda:	f000 ff69 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b4ede:	f001 f942 	bl	b6166 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4ee2:	490e      	ldr	r1, [pc, #56]	; (b4f1c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x160>)
   b4ee4:	4602      	mov	r2, r0
   b4ee6:	4807      	ldr	r0, [pc, #28]	; (b4f04 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x148>)
   b4ee8:	f7ff f929 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (LoRA_Functions::instance().respondToLoRAMessageGateway()) return true;
   b4eec:	f7ff f940 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4ef0:	f7ff fdba 	bl	b4a68 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>
   b4ef4:	e77d      	b.n	b4df2 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x36>
   b4ef6:	bf00      	nop
   b4ef8:	2003d7e8 	.word	0x2003d7e8
   b4efc:	2003e0e0 	.word	0x2003e0e0
   b4f00:	000c0da6 	.word	0x000c0da6
   b4f04:	2003e654 	.word	0x2003e654
   b4f08:	2003d7d8 	.word	0x2003d7d8
   b4f0c:	2003d864 	.word	0x2003d864
   b4f10:	2003d60c 	.word	0x2003d60c
   b4f14:	000c0df8 	.word	0x000c0df8
   b4f18:	000c0e6d 	.word	0x000c0e6d
   b4f1c:	000c0e39 	.word	0x000c0e39

000b4f20 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b4f20:	4b01      	ldr	r3, [pc, #4]	; (b4f28 <_Z18outOfMemoryHandleryi+0x8>)
   b4f22:	601a      	str	r2, [r3, #0]
}
   b4f24:	4770      	bx	lr
   b4f26:	bf00      	nop
   b4f28:	2003d67c 	.word	0x2003d67c

000b4f2c <_Z13userSwitchISRv>:

void userSwitchISR() {
	userSwitchDectected = true;
   b4f2c:	4b01      	ldr	r3, [pc, #4]	; (b4f34 <_Z13userSwitchISRv+0x8>)
   b4f2e:	2201      	movs	r2, #1
   b4f30:	701a      	strb	r2, [r3, #0]
}
   b4f32:	4770      	bx	lr
   b4f34:	2003e3d4 	.word	0x2003e3d4

000b4f38 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b4f38:	b530      	push	{r4, r5, lr}
   b4f3a:	b085      	sub	sp, #20
   b4f3c:	4604      	mov	r4, r0
   b4f3e:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b4f40:	b160      	cbz	r0, b4f5c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b4f42:	6840      	ldr	r0, [r0, #4]
   b4f44:	b150      	cbz	r0, b4f5c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b4f46:	6885      	ldr	r5, [r0, #8]
   b4f48:	b145      	cbz	r5, b4f5c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b4f4a:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b4f4e:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4f52:	68c4      	ldr	r4, [r0, #12]
   b4f54:	ab01      	add	r3, sp, #4
   b4f56:	466a      	mov	r2, sp
   b4f58:	a902      	add	r1, sp, #8
   b4f5a:	47a0      	blx	r4
    }
   b4f5c:	b005      	add	sp, #20
   b4f5e:	bd30      	pop	{r4, r5, pc}

000b4f60 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4f60:	b530      	push	{r4, r5, lr}
   b4f62:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b4f64:	6800      	ldr	r0, [r0, #0]
   b4f66:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b4f68:	9301      	str	r3, [sp, #4]
   b4f6a:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b4f6e:	6883      	ldr	r3, [r0, #8]
   b4f70:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b4f74:	b90b      	cbnz	r3, b4f7a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b4f76:	f00a fc83 	bl	bf880 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4f7a:	68c3      	ldr	r3, [r0, #12]
   b4f7c:	aa01      	add	r2, sp, #4
   b4f7e:	a902      	add	r1, sp, #8
   b4f80:	4798      	blx	r3
      }
   b4f82:	b005      	add	sp, #20
   b4f84:	bd30      	pop	{r4, r5, pc}

000b4f86 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4f86:	2a01      	cmp	r2, #1
   b4f88:	d102      	bne.n	b4f90 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4f8a:	6001      	str	r1, [r0, #0]
      }
   b4f8c:	2000      	movs	r0, #0
   b4f8e:	4770      	bx	lr
	  switch (__op)
   b4f90:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4f92:	bf04      	itt	eq
   b4f94:	680b      	ldreq	r3, [r1, #0]
   b4f96:	6003      	streq	r3, [r0, #0]
	      break;
   b4f98:	e7f8      	b.n	b4f8c <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4f9a <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4f9a:	6803      	ldr	r3, [r0, #0]
   b4f9c:	6812      	ldr	r2, [r2, #0]
   b4f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4fa2:	4718      	bx	r3

000b4fa4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b4fa4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4fa6:	2000      	movs	r0, #0
   b4fa8:	f007 f9a8 	bl	bc2fc <spark_sync_time_pending>
   b4fac:	b128      	cbz	r0, b4fba <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4fae:	f007 f985 	bl	bc2bc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4fb2:	f080 0001 	eor.w	r0, r0, #1
   b4fb6:	b2c0      	uxtb	r0, r0
    }
   b4fb8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4fba:	2001      	movs	r0, #1
   b4fbc:	e7fc      	b.n	b4fb8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b4fbe <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4fbe:	b510      	push	{r4, lr}
      if (_M_manager)
   b4fc0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4fc2:	4604      	mov	r4, r0
      if (_M_manager)
   b4fc4:	b113      	cbz	r3, b4fcc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4fc6:	2203      	movs	r2, #3
   b4fc8:	4601      	mov	r1, r0
   b4fca:	4798      	blx	r3
    }
   b4fcc:	4620      	mov	r0, r4
   b4fce:	bd10      	pop	{r4, pc}

000b4fd0 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b4fd0:	b510      	push	{r4, lr}
            delete callableWrapper;
   b4fd2:	4604      	mov	r4, r0
   b4fd4:	b138      	cbz	r0, b4fe6 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b4fd6:	f7ff fff2 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
   b4fda:	4620      	mov	r0, r4
   b4fdc:	2110      	movs	r1, #16
        };
   b4fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b4fe2:	f7ff b85c 	b.w	b409e <_ZdlPvj>
        };
   b4fe6:	bd10      	pop	{r4, pc}

000b4fe8 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 10 if the device is in test mode or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {											// Time till next scheduled event
   b4fe8:	b538      	push	{r3, r4, r5, lr}
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop

	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b4fea:	f000 fee1 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b4fee:	f001 f8ba 	bl	b6166 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4ff2:	4604      	mov	r4, r0
   	if (Time.isValid() && !testModeFlag) {
   b4ff4:	f00a f90c 	bl	bf210 <_ZN9TimeClass7isValidEv>
   b4ff8:	b1f0      	cbz	r0, b5038 <_Z21secondsUntilNextEventv+0x50>
   b4ffa:	4b10      	ldr	r3, [pc, #64]	; (b503c <_Z21secondsUntilNextEventv+0x54>)
   b4ffc:	781b      	ldrb	r3, [r3, #0]
   b4ffe:	b9db      	cbnz	r3, b5038 <_Z21secondsUntilNextEventv+0x50>
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b5000:	f00a f923 	bl	bf24a <_ZN9TimeClass3nowEv>
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b5004:	253c      	movs	r5, #60	; 0x3c
   b5006:	4365      	muls	r5, r4
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b5008:	fbb0 f4f5 	udiv	r4, r0, r5
   b500c:	fb04 0015 	mls	r0, r4, r5, r0
   b5010:	1a2c      	subs	r4, r5, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b5012:	2c09      	cmp	r4, #9
   b5014:	d90e      	bls.n	b5034 <_Z21secondsUntilNextEventv+0x4c>
   b5016:	42ac      	cmp	r4, r5
   b5018:	bf28      	it	cs
   b501a:	462c      	movcs	r4, r5
        Log.info("Report frequency %d mins, next event in %lu seconds", sysStatus.get_frequencyMinutes(), secondsToReturn);
   b501c:	f000 fec8 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5020:	f001 f8a1 	bl	b6166 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5024:	4906      	ldr	r1, [pc, #24]	; (b5040 <_Z21secondsUntilNextEventv+0x58>)
   b5026:	4602      	mov	r2, r0
   b5028:	4623      	mov	r3, r4
   b502a:	4806      	ldr	r0, [pc, #24]	; (b5044 <_Z21secondsUntilNextEventv+0x5c>)
   b502c:	f7ff f887 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    }
	return secondsToReturn;
}
   b5030:	4620      	mov	r0, r4
   b5032:	bd38      	pop	{r3, r4, r5, pc}
   b5034:	240a      	movs	r4, #10
   b5036:	e7f1      	b.n	b501c <_Z21secondsUntilNextEventv+0x34>
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop
   b5038:	240a      	movs	r4, #10
   b503a:	e7f9      	b.n	b5030 <_Z21secondsUntilNextEventv+0x48>
   b503c:	2003e3d3 	.word	0x2003e3d3
   b5040:	000c0eac 	.word	0x000c0eac
   b5044:	2003e654 	.word	0x2003e654

000b5048 <_Z22publishStateTransitionv>:
{
   b5048:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b504a:	4e1c      	ldr	r6, [pc, #112]	; (b50bc <_Z22publishStateTransitionv+0x74>)
   b504c:	4c1c      	ldr	r4, [pc, #112]	; (b50c0 <_Z22publishStateTransitionv+0x78>)
   b504e:	7832      	ldrb	r2, [r6, #0]
   b5050:	4d1c      	ldr	r5, [pc, #112]	; (b50c4 <_Z22publishStateTransitionv+0x7c>)
   b5052:	2a02      	cmp	r2, #2
{
   b5054:	b0c4      	sub	sp, #272	; 0x110
	if (state == IDLE_STATE) {
   b5056:	d128      	bne.n	b50aa <_Z22publishStateTransitionv+0x62>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b5058:	f00a f8da 	bl	bf210 <_ZN9TimeClass7isValidEv>
   b505c:	7832      	ldrb	r2, [r6, #0]
   b505e:	782b      	ldrb	r3, [r5, #0]
   b5060:	b958      	cbnz	r0, b507a <_Z22publishStateTransitionv+0x32>
   b5062:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b5066:	9200      	str	r2, [sp, #0]
   b5068:	4a17      	ldr	r2, [pc, #92]	; (b50c8 <_Z22publishStateTransitionv+0x80>)
   b506a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b506e:	f44f 7180 	mov.w	r1, #256	; 0x100
   b5072:	a804      	add	r0, sp, #16
   b5074:	f007 f9ea 	bl	bc44c <snprintf>
   b5078:	e00f      	b.n	b509a <_Z22publishStateTransitionv+0x52>
		else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s for %u seconds", stateNames[oldState],stateNames[state],(secondsUntilNextEvent()));	
   b507a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b507e:	9303      	str	r3, [sp, #12]
   b5080:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   b5084:	f7ff ffb0 	bl	b4fe8 <_Z21secondsUntilNextEventv>
   b5088:	9b03      	ldr	r3, [sp, #12]
   b508a:	4a10      	ldr	r2, [pc, #64]	; (b50cc <_Z22publishStateTransitionv+0x84>)
   b508c:	e9cd 4000 	strd	r4, r0, [sp]
   b5090:	f44f 7180 	mov.w	r1, #256	; 0x100
   b5094:	a804      	add	r0, sp, #16
   b5096:	f007 f9d9 	bl	bc44c <snprintf>
	oldState = state;
   b509a:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b509c:	480c      	ldr	r0, [pc, #48]	; (b50d0 <_Z22publishStateTransitionv+0x88>)
	oldState = state;
   b509e:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b50a0:	a904      	add	r1, sp, #16
   b50a2:	f7ff f84c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b50a6:	b044      	add	sp, #272	; 0x110
   b50a8:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b50aa:	782b      	ldrb	r3, [r5, #0]
   b50ac:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b50b0:	9200      	str	r2, [sp, #0]
   b50b2:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b50b6:	4a07      	ldr	r2, [pc, #28]	; (b50d4 <_Z22publishStateTransitionv+0x8c>)
   b50b8:	e7d9      	b.n	b506e <_Z22publishStateTransitionv+0x26>
   b50ba:	bf00      	nop
   b50bc:	2003e3d2 	.word	0x2003e3d2
   b50c0:	2003d680 	.word	0x2003d680
   b50c4:	2003e3d1 	.word	0x2003e3d1
   b50c8:	000c0ee0 	.word	0x000c0ee0
   b50cc:	000c0f00 	.word	0x000c0f00
   b50d0:	2003e654 	.word	0x2003e654
   b50d4:	000c0f1d 	.word	0x000c0f1d

000b50d8 <_Z14publishWebhookh>:
 * @details Nodes and Gateways will use the same format for this webook - data sources will change
 * 
 * 
 */

void publishWebhook(uint8_t nodeNumber) {
   b50d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b50dc:	ed2d 8b02 	vpush	{d8}
   b50e0:	b0db      	sub	sp, #364	; 0x16c
	char data[256];                             						// Store the date in this character array - not global
	// Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
    const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b50e2:	ac12      	add	r4, sp, #72	; 0x48
   b50e4:	4b6a      	ldr	r3, [pc, #424]	; (b5290 <_Z14publishWebhookh+0x1b8>)
   b50e6:	6023      	str	r3, [r4, #0]
   b50e8:	4b6a      	ldr	r3, [pc, #424]	; (b5294 <_Z14publishWebhookh+0x1bc>)
   b50ea:	6063      	str	r3, [r4, #4]
   b50ec:	4b6a      	ldr	r3, [pc, #424]	; (b5298 <_Z14publishWebhookh+0x1c0>)
   b50ee:	60a3      	str	r3, [r4, #8]
   b50f0:	4b6a      	ldr	r3, [pc, #424]	; (b529c <_Z14publishWebhookh+0x1c4>)
   b50f2:	60e3      	str	r3, [r4, #12]
   b50f4:	4b6a      	ldr	r3, [pc, #424]	; (b52a0 <_Z14publishWebhookh+0x1c8>)
   b50f6:	6123      	str	r3, [r4, #16]
   b50f8:	4b6a      	ldr	r3, [pc, #424]	; (b52a4 <_Z14publishWebhookh+0x1cc>)
   b50fa:	6163      	str	r3, [r4, #20]
   b50fc:	f04f 0800 	mov.w	r8, #0
   b5100:	4b69      	ldr	r3, [pc, #420]	; (b52a8 <_Z14publishWebhookh+0x1d0>)
   b5102:	f8c4 801c 	str.w	r8, [r4, #28]
   b5106:	61a3      	str	r3, [r4, #24]

	if (nodeNumber > 0) {												// Webhook for a node
   b5108:	4605      	mov	r5, r0
   b510a:	2800      	cmp	r0, #0
   b510c:	d06c      	beq.n	b51e8 <_Z14publishWebhookh+0x110>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b510e:	f7ff f82f 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5112:	462a      	mov	r2, r5
   b5114:	4601      	mov	r1, r0
   b5116:	a80e      	add	r0, sp, #56	; 0x38
   b5118:	f7ff f95e 	bl	b43d8 <_ZN14LoRA_Functions12findDeviceIDEh>
   b511c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b511e:	930d      	str	r3, [sp, #52]	; 0x34
   b5120:	f000 fe96 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b5124:	f001 f833 	bl	b618e <_ZNK17currentStatusData15get_hourlyCountEv>
   b5128:	4605      	mov	r5, r0
   b512a:	f000 fe91 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b512e:	f001 f833 	bl	b6198 <_ZNK17currentStatusData14get_dailyCountEv>
   b5132:	4606      	mov	r6, r0
   b5134:	f000 fe8c 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b5138:	f000 ff99 	bl	b606e <_ZNK17currentStatusData14get_sensorTypeEv>
   b513c:	4607      	mov	r7, r0
   b513e:	f000 fe87 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b5142:	f000 fea1 	bl	b5e88 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5146:	eeb0 8a40 	vmov.f32	s16, s0
   b514a:	eef0 8a60 	vmov.f32	s17, s1
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b514e:	f000 fe7f 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b5152:	f000 ff78 	bl	b6046 <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b5156:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
   b515a:	920c      	str	r2, [sp, #48]	; 0x30
		current.get_internalTempC(), current.get_resetCount(), current.get_RSSI(), current.get_messageNumber(), Time.now());
   b515c:	f000 fe78 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b5160:	f000 ff6c 	bl	b603c <_ZNK17currentStatusData17get_internalTempCEv>
   b5164:	4604      	mov	r4, r0
   b5166:	f000 fe73 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b516a:	f000 ff71 	bl	b6050 <_ZNK17currentStatusData14get_resetCountEv>
   b516e:	4681      	mov	r9, r0
   b5170:	f000 fe6e 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b5174:	f001 f806 	bl	b6184 <_ZNK17currentStatusData8get_RSSIEv>
   b5178:	4682      	mov	sl, r0
   b517a:	f000 fe69 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b517e:	f000 ff6c 	bl	b605a <_ZNK17currentStatusData17get_messageNumberEv>
   b5182:	4683      	mov	fp, r0
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b5184:	f00a f861 	bl	bf24a <_ZN9TimeClass3nowEv>
   b5188:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   b518a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b518c:	9407      	str	r4, [sp, #28]
   b518e:	f44f 7180 	mov.w	r1, #256	; 0x100
   b5192:	e9cd b00a 	strd	fp, r0, [sp, #40]	; 0x28
   b5196:	9206      	str	r2, [sp, #24]
   b5198:	e9cd 9a08 	strd	r9, sl, [sp, #32]
   b519c:	4a43      	ldr	r2, [pc, #268]	; (b52ac <_Z14publishWebhookh+0x1d4>)
   b519e:	9500      	str	r5, [sp, #0]
   b51a0:	ed8d 8b04 	vstr	d8, [sp, #16]
   b51a4:	e9cd 6701 	strd	r6, r7, [sp, #4]
   b51a8:	a81a      	add	r0, sp, #104	; 0x68
   b51aa:	f007 f94f 	bl	bc44c <snprintf>
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b51ae:	a80e      	add	r0, sp, #56	; 0x38
   b51b0:	f009 fc98 	bl	beae4 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Node-v1", data, PRIVATE | WITH_ACK);
   b51b4:	f004 f9a0 	bl	b94f8 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b51b8:	4b3d      	ldr	r3, [pc, #244]	; (b52b0 <_Z14publishWebhookh+0x1d8>)
   b51ba:	4a3e      	ldr	r2, [pc, #248]	; (b52b4 <_Z14publishWebhookh+0x1dc>)
   b51bc:	781b      	ldrb	r3, [r3, #0]
   b51be:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b51c0:	493d      	ldr	r1, [pc, #244]	; (b52b8 <_Z14publishWebhookh+0x1e0>)
   b51c2:	4313      	orrs	r3, r2
   b51c4:	6802      	ldr	r2, [r0, #0]
   b51c6:	f88d 3000 	strb.w	r3, [sp]
   b51ca:	f88d 8004 	strb.w	r8, [sp, #4]
   b51ce:	6814      	ldr	r4, [r2, #0]
   b51d0:	233c      	movs	r3, #60	; 0x3c
   b51d2:	aa1a      	add	r2, sp, #104	; 0x68
   b51d4:	47a0      	blx	r4
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_RSSI(), sysStatus.get_messageCount(), Time.now());
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
	}

	Log.info(data);
   b51d6:	4839      	ldr	r0, [pc, #228]	; (b52bc <_Z14publishWebhookh+0x1e4>)
   b51d8:	a91a      	add	r1, sp, #104	; 0x68
   b51da:	f7fe ffb0 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>



	return;
}
   b51de:	b05b      	add	sp, #364	; 0x16c
   b51e0:	ecbd 8b02 	vpop	{d8}
   b51e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return spark_deviceID();
   b51e8:	a80e      	add	r0, sp, #56	; 0x38
   b51ea:	f007 f86f 	bl	bc2cc <spark_deviceID>
   b51ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b51f0:	930c      	str	r3, [sp, #48]	; 0x30
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b51f2:	f000 fddd 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b51f6:	f000 ff12 	bl	b601e <_ZNK13sysStatusData14get_sensorTypeEv>
   b51fa:	4606      	mov	r6, r0
   b51fc:	f000 fe28 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b5200:	f000 fe42 	bl	b5e88 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5204:	eeb0 8a40 	vmov.f32	s16, s0
   b5208:	eef0 8a60 	vmov.f32	s17, s1
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b520c:	f000 fe20 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b5210:	f000 ff19 	bl	b6046 <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b5214:	f854 a020 	ldr.w	sl, [r4, r0, lsl #2]
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_RSSI(), sysStatus.get_messageCount(), Time.now());
   b5218:	f000 fe1a 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b521c:	f000 ff0e 	bl	b603c <_ZNK17currentStatusData17get_internalTempCEv>
   b5220:	4604      	mov	r4, r0
   b5222:	f000 fdc5 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5226:	f000 fee6 	bl	b5ff6 <_ZNK13sysStatusData14get_resetCountEv>
   b522a:	4607      	mov	r7, r0
   b522c:	f000 fdc0 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5230:	f000 ffa3 	bl	b617a <_ZNK13sysStatusData8get_RSSIEv>
   b5234:	4680      	mov	r8, r0
   b5236:	f000 fdbb 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b523a:	f000 fee1 	bl	b6000 <_ZNK13sysStatusData16get_messageCountEv>
   b523e:	4681      	mov	r9, r0
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b5240:	f00a f803 	bl	bf24a <_ZN9TimeClass3nowEv>
   b5244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5246:	4a19      	ldr	r2, [pc, #100]	; (b52ac <_Z14publishWebhookh+0x1d4>)
   b5248:	9500      	str	r5, [sp, #0]
   b524a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b524e:	e9cd 900a 	strd	r9, r0, [sp, #40]	; 0x28
   b5252:	e9cd a406 	strd	sl, r4, [sp, #24]
   b5256:	e9cd 7808 	strd	r7, r8, [sp, #32]
   b525a:	ed8d 8b04 	vstr	d8, [sp, #16]
   b525e:	e9cd 5601 	strd	r5, r6, [sp, #4]
   b5262:	a81a      	add	r0, sp, #104	; 0x68
   b5264:	f007 f8f2 	bl	bc44c <snprintf>
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5268:	a80e      	add	r0, sp, #56	; 0x38
   b526a:	f009 fc3b 	bl	beae4 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
   b526e:	f004 f943 	bl	b94f8 <_ZN17PublishQueuePosix8instanceEv>
   b5272:	4b0f      	ldr	r3, [pc, #60]	; (b52b0 <_Z14publishWebhookh+0x1d8>)
   b5274:	4a0f      	ldr	r2, [pc, #60]	; (b52b4 <_Z14publishWebhookh+0x1dc>)
   b5276:	781b      	ldrb	r3, [r3, #0]
   b5278:	7812      	ldrb	r2, [r2, #0]
   b527a:	4911      	ldr	r1, [pc, #68]	; (b52c0 <_Z14publishWebhookh+0x1e8>)
   b527c:	4313      	orrs	r3, r2
   b527e:	6802      	ldr	r2, [r0, #0]
   b5280:	f88d 3000 	strb.w	r3, [sp]
   b5284:	f88d 5004 	strb.w	r5, [sp, #4]
   b5288:	6814      	ldr	r4, [r2, #0]
   b528a:	233c      	movs	r3, #60	; 0x3c
   b528c:	aa1a      	add	r2, sp, #104	; 0x68
   b528e:	e7a1      	b.n	b51d4 <_Z14publishWebhookh+0xfc>
   b5290:	000c0f2b 	.word	0x000c0f2b
   b5294:	000c0f33 	.word	0x000c0f33
   b5298:	000c0f37 	.word	0x000c0f37
   b529c:	000c0f40 	.word	0x000c0f40
   b52a0:	000c0f48 	.word	0x000c0f48
   b52a4:	000c0f54 	.word	0x000c0f54
   b52a8:	000c0f5a 	.word	0x000c0f5a
   b52ac:	000c0f66 	.word	0x000c0f66
   b52b0:	2003e294 	.word	0x2003e294
   b52b4:	2003e295 	.word	0x2003e295
   b52b8:	000c0ffd 	.word	0x000c0ffd
   b52bc:	2003e654 	.word	0x2003e654
   b52c0:	000c1012 	.word	0x000c1012

000b52c4 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b52c4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b52c6:	2300      	movs	r3, #0
   b52c8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b52ca:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b52cc:	4604      	mov	r4, r0
   b52ce:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b52d0:	b12b      	cbz	r3, b52de <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b52d2:	2202      	movs	r2, #2
   b52d4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b52d6:	68eb      	ldr	r3, [r5, #12]
   b52d8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b52da:	68ab      	ldr	r3, [r5, #8]
   b52dc:	60a3      	str	r3, [r4, #8]
    }
   b52de:	4620      	mov	r0, r4
   b52e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b52e4 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b52e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b52e8:	b095      	sub	sp, #84	; 0x54
   b52ea:	4605      	mov	r5, r0
        };
   b52ec:	991c      	ldr	r1, [sp, #112]	; 0x70
   b52ee:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b52f0:	4690      	mov	r8, r2
   b52f2:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b52f4:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b52f6:	f7ff ffe5 	bl	b52c4 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b52fa:	a904      	add	r1, sp, #16
   b52fc:	a808      	add	r0, sp, #32
   b52fe:	f7ff ffe1 	bl	b52c4 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b5302:	a908      	add	r1, sp, #32
   b5304:	4630      	mov	r0, r6
   b5306:	f7ff ffdd 	bl	b52c4 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b530a:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b530e:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b5310:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5314:	f7fe febf 	bl	b4096 <_Znwj>
   b5318:	4604      	mov	r4, r0
   b531a:	b1a0      	cbz	r0, b5346 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b531c:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5320:	ab01      	add	r3, sp, #4
   b5322:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5326:	e894 0003 	ldmia.w	r4, {r0, r1}
   b532a:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b532e:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b5334:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5336:	60a3      	str	r3, [r4, #8]
   b5338:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b533c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b533e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b5342:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b5344:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b5346:	4b24      	ldr	r3, [pc, #144]	; (b53d8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b5348:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b534a:	4b24      	ldr	r3, [pc, #144]	; (b53dc <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b534c:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b534e:	2200      	movs	r2, #0
   b5350:	2300      	movs	r3, #0
   b5352:	f04f 0900 	mov.w	r9, #0
   b5356:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b535a:	4b21      	ldr	r3, [pc, #132]	; (b53e0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b535c:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b5360:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5362:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b5364:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b5368:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b536c:	f7fe fe93 	bl	b4096 <_Znwj>
   b5370:	4604      	mov	r4, r0
   b5372:	b1d8      	cbz	r0, b53ac <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b5374:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b5376:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b537a:	b133      	cbz	r3, b538a <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b537c:	2202      	movs	r2, #2
   b537e:	a910      	add	r1, sp, #64	; 0x40
   b5380:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5382:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b5384:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5386:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5388:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b538a:	4b16      	ldr	r3, [pc, #88]	; (b53e4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b538c:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b538e:	4a16      	ldr	r2, [pc, #88]	; (b53e8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b5390:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b5392:	ab01      	add	r3, sp, #4
   b5394:	4640      	mov	r0, r8
   b5396:	4639      	mov	r1, r7
   b5398:	f006 ff0e 	bl	bc1b8 <system_subscribe_event>
        if (r) {
   b539c:	b1b0      	cbz	r0, b53cc <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b539e:	4620      	mov	r0, r4
   b53a0:	f7ff fe0d 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b53a4:	2110      	movs	r1, #16
   b53a6:	4620      	mov	r0, r4
   b53a8:	f7fe fe79 	bl	b409e <_ZdlPvj>
   b53ac:	a810      	add	r0, sp, #64	; 0x40
   b53ae:	f7ff fe06 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
   b53b2:	4630      	mov	r0, r6
   b53b4:	f7ff fe03 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
   b53b8:	a808      	add	r0, sp, #32
   b53ba:	f7ff fe00 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
   b53be:	a804      	add	r0, sp, #16
   b53c0:	f7ff fdfd 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
    }
   b53c4:	4628      	mov	r0, r5
   b53c6:	b015      	add	sp, #84	; 0x54
   b53c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b53cc:	9b02      	ldr	r3, [sp, #8]
   b53ce:	60ab      	str	r3, [r5, #8]
   b53d0:	e9c5 8700 	strd	r8, r7, [r5]
   b53d4:	e7ea      	b.n	b53ac <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b53d6:	bf00      	nop
   b53d8:	000b4f61 	.word	0x000b4f61
   b53dc:	000b53ed 	.word	0x000b53ed
   b53e0:	000c0002 	.word	0x000c0002
   b53e4:	000b4fd1 	.word	0x000b4fd1
   b53e8:	000b4f39 	.word	0x000b4f39

000b53ec <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b53ec:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b53ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b53f0:	4604      	mov	r4, r0
	switch (__op)
   b53f2:	d104      	bne.n	b53fe <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b53f4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b53f6:	6003      	str	r3, [r0, #0]
      }
   b53f8:	2000      	movs	r0, #0
   b53fa:	b003      	add	sp, #12
   b53fc:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b53fe:	2a02      	cmp	r2, #2
   b5400:	d00c      	beq.n	b541c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b5402:	2a03      	cmp	r2, #3
   b5404:	d1f8      	bne.n	b53f8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5406:	6804      	ldr	r4, [r0, #0]
   b5408:	2c00      	cmp	r4, #0
   b540a:	d0f5      	beq.n	b53f8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b540c:	4620      	mov	r0, r4
   b540e:	f7ff fdd6 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5412:	2110      	movs	r1, #16
   b5414:	4620      	mov	r0, r4
   b5416:	f7fe fe42 	bl	b409e <_ZdlPvj>
   b541a:	e7ed      	b.n	b53f8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b541c:	6809      	ldr	r1, [r1, #0]
   b541e:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5420:	2010      	movs	r0, #16
   b5422:	f7fe fe38 	bl	b4096 <_Znwj>
   b5426:	4605      	mov	r5, r0
   b5428:	b110      	cbz	r0, b5430 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b542a:	9901      	ldr	r1, [sp, #4]
   b542c:	f7ff ff4a 	bl	b52c4 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b5430:	6025      	str	r5, [r4, #0]
	}
   b5432:	e7e1      	b.n	b53f8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b5434 <_GLOBAL__sub_I___appProductVersion>:
        val_(val) {
   b5434:	4b16      	ldr	r3, [pc, #88]	; (b5490 <_GLOBAL__sub_I___appProductVersion+0x5c>)
}
   b5436:	b510      	push	{r4, lr}
   b5438:	2401      	movs	r4, #1
   b543a:	701c      	strb	r4, [r3, #0]
   b543c:	4b15      	ldr	r3, [pc, #84]	; (b5494 <_GLOBAL__sub_I___appProductVersion+0x60>)
   b543e:	2208      	movs	r2, #8
   b5440:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b5442:	f00a f8ab 	bl	bf59c <spark_protocol_instance>
   b5446:	2300      	movs	r3, #0
   b5448:	461a      	mov	r2, r3
   b544a:	4619      	mov	r1, r3
   b544c:	f00a f8b6 	bl	bf5bc <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b5450:	f00a f8a4 	bl	bf59c <spark_protocol_instance>
   b5454:	2300      	movs	r3, #0
   b5456:	461a      	mov	r2, r3
   b5458:	210d      	movs	r1, #13
   b545a:	f00a f8a7 	bl	bf5ac <spark_protocol_set_product_id>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b545e:	4b0e      	ldr	r3, [pc, #56]	; (b5498 <_GLOBAL__sub_I___appProductVersion+0x64>)
   b5460:	1d1a      	adds	r2, r3, #4
   b5462:	601a      	str	r2, [r3, #0]
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   b5464:	4a0d      	ldr	r2, [pc, #52]	; (b549c <_GLOBAL__sub_I___appProductVersion+0x68>)
   b5466:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b5468:	2200      	movs	r2, #0
   b546a:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b546e:	611a      	str	r2, [r3, #16]
   b5470:	751c      	strb	r4, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b5472:	f00a f973 	bl	bf75c <_Z19__fetch_global_Wirev>
   b5476:	2269      	movs	r2, #105	; 0x69
   b5478:	4601      	mov	r1, r0
   b547a:	4809      	ldr	r0, [pc, #36]	; (b54a0 <_GLOBAL__sub_I___appProductVersion+0x6c>)
   b547c:	f001 fbfa 	bl	b6c74 <_ZN6AB1805C1ER7TwoWireh>
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b5480:	4808      	ldr	r0, [pc, #32]	; (b54a4 <_GLOBAL__sub_I___appProductVersion+0x70>)
   b5482:	2306      	movs	r3, #6
   b5484:	f840 3b04 	str.w	r3, [r0], #4
}
   b5488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b548c:	f003 baec 	b.w	b8a68 <_ZN22LocalTimePosixTimezoneC1Ev>
   b5490:	2003e294 	.word	0x2003e294
   b5494:	2003e295 	.word	0x2003e295
   b5498:	2003e2c8 	.word	0x2003e2c8
   b549c:	00030010 	.word	0x00030010
   b54a0:	2003e2a8 	.word	0x2003e2a8
   b54a4:	2003e2e0 	.word	0x2003e2e0

000b54a8 <setup>:
{
   b54a8:	b5f0      	push	{r4, r5, r6, r7, lr}
        return hal_timer_millis(nullptr);
   b54aa:	2000      	movs	r0, #0
   b54ac:	b09d      	sub	sp, #116	; 0x74
   b54ae:	f006 fc21 	bl	bbcf4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b54b2:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b54b6:	4604      	mov	r4, r0
   b54b8:	2000      	movs	r0, #0
   b54ba:	f006 fc1b 	bl	bbcf4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b54be:	1b00      	subs	r0, r0, r4
   b54c0:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b54c4:	42a8      	cmp	r0, r5
   b54c6:	f171 0300 	sbcs.w	r3, r1, #0
   b54ca:	d207      	bcs.n	b54dc <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b54cc:	f009 ffa4 	bl	bf418 <_Z16_fetch_usbserialv>
   b54d0:	f009 ff97 	bl	bf402 <_ZN9USBSerial11isConnectedEv>
   b54d4:	b910      	cbnz	r0, b54dc <setup+0x34>
            spark_process();
   b54d6:	f006 fee1 	bl	bc29c <spark_process>
        while (_while() && !_condition()) {
   b54da:	e7ed      	b.n	b54b8 <setup+0x10>
   b54dc:	f009 ff9c 	bl	bf418 <_Z16_fetch_usbserialv>
   b54e0:	f009 ff8f 	bl	bf402 <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b54e4:	f001 fa04 	bl	b68f0 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b54e8:	f001 fa2e 	bl	b6948 <_Z18initializePowerCfgv>
		current.setup();
   b54ec:	f000 fcb0 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b54f0:	6803      	ldr	r3, [r0, #0]
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b54f2:	4e5b      	ldr	r6, [pc, #364]	; (b5660 <setup+0x1b8>)
   b54f4:	681b      	ldr	r3, [r3, #0]
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b54f6:	4f5b      	ldr	r7, [pc, #364]	; (b5664 <setup+0x1bc>)
   b54f8:	4798      	blx	r3
  		sysStatus.setup();
   b54fa:	f000 fc59 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b54fe:	6803      	ldr	r3, [r0, #0]
   b5500:	681b      	ldr	r3, [r3, #0]
   b5502:	4798      	blx	r3
		nodeID.setup();
   b5504:	f000 fd22 	bl	b5f4c <_ZN10nodeIDData8instanceEv>
   b5508:	6803      	ldr	r3, [r0, #0]
   b550a:	681b      	ldr	r3, [r3, #0]
   b550c:	4798      	blx	r3
    Particle_Functions::instance().setup();         // Sets up all the Particle functions and variables defined in particle_fn.h
   b550e:	f001 f81b 	bl	b6548 <_ZN18Particle_Functions8instanceEv>
   b5512:	f001 f82b 	bl	b656c <_ZN18Particle_Functions5setupEv>
   b5516:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b5518:	2101      	movs	r1, #1
   b551a:	4630      	mov	r0, r6
   b551c:	8173      	strh	r3, [r6, #10]
   b551e:	f002 f8a5 	bl	b766c <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b5522:	217c      	movs	r1, #124	; 0x7c
   b5524:	4630      	mov	r0, r6
   b5526:	f001 fca3 	bl	b6e70 <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b552a:	4b4f      	ldr	r3, [pc, #316]	; (b5668 <setup+0x1c0>)
   b552c:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b552e:	4b4f      	ldr	r3, [pc, #316]	; (b566c <setup+0x1c4>)
   b5530:	9309      	str	r3, [sp, #36]	; 0x24
	System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b5532:	ad06      	add	r5, sp, #24
	    _M_manager = &_My_handler::_M_manager;
   b5534:	4b4e      	ldr	r3, [pc, #312]	; (b5670 <setup+0x1c8>)
   b5536:	9308      	str	r3, [sp, #32]
   b5538:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b553c:	2300      	movs	r3, #0
   b553e:	a802      	add	r0, sp, #8
   b5540:	9500      	str	r5, [sp, #0]
   b5542:	f7ff fecf 	bl	b52e4 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b5546:	4628      	mov	r0, r5
   b5548:	f7ff fd39 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b554c:	f003 ffd4 	bl	b94f8 <_ZN17PublishQueuePosix8instanceEv>
   b5550:	f004 f9d8 	bl	b9904 <_ZN17PublishQueuePosix5setupEv>
	LoRA_Functions::instance().setup(true);			// Start the LoRA radio (true for Gateway and false for Node)
   b5554:	f7fe fe0c 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5558:	2101      	movs	r1, #1
   b555a:	f7ff f8f5 	bl	b4748 <_ZN14LoRA_Functions5setupEb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b555e:	f003 fc63 	bl	b8e28 <_ZN9LocalTime8instanceEv>
   b5562:	4944      	ldr	r1, [pc, #272]	; (b5674 <setup+0x1cc>)
   b5564:	4604      	mov	r4, r0
   b5566:	4628      	mov	r0, r5
   b5568:	f003 fb30 	bl	b8bcc <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b556c:	a907      	add	r1, sp, #28
   b556e:	f104 0008 	add.w	r0, r4, #8
   b5572:	f009 fb3e 	bl	bebf2 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5578:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b557a:	a90d      	add	r1, sp, #52	; 0x34
   b557c:	f104 0020 	add.w	r0, r4, #32
   b5580:	f009 fb37 	bl	bebf2 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5584:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5586:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b5588:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b558a:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b558c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b558e:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b5590:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5592:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b5594:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b5596:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b5598:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   b559c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b55a0:	4628      	mov	r0, r5
   b55a2:	f003 f8cf 	bl	b8744 <_ZN22LocalTimePosixTimezoneD1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b55a6:	f009 fe50 	bl	bf24a <_ZN9TimeClass3nowEv>
   b55aa:	17c3      	asrs	r3, r0, #31
   b55ac:	e9c7 0318 	strd	r0, r3, [r7, #96]	; 0x60
	conv.withCurrentTime().convert();  				        // Convert to local time for use later
   b55b0:	4638      	mov	r0, r7
   b55b2:	f003 fcb1 	bl	b8f18 <_ZN16LocalTimeConvert7convertEv>
	if (Time.isValid()) {
   b55b6:	f009 fe2b 	bl	bf210 <_ZN9TimeClass7isValidEv>
   b55ba:	4c2f      	ldr	r4, [pc, #188]	; (b5678 <setup+0x1d0>)
   b55bc:	2800      	cmp	r0, #0
   b55be:	d043      	beq.n	b5648 <setup+0x1a0>
		Log.info("LocalTime initialized, time is %s and RTC %s set", conv.format("%I:%M:%S%p").c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b55c0:	4639      	mov	r1, r7
   b55c2:	4a2e      	ldr	r2, [pc, #184]	; (b567c <setup+0x1d4>)
   b55c4:	4628      	mov	r0, r5
   b55c6:	f003 fb91 	bl	b8cec <_ZN16LocalTimeConvert6formatEPKc>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   b55ca:	2301      	movs	r3, #1
   b55cc:	461a      	mov	r2, r3
   b55ce:	2110      	movs	r1, #16
   b55d0:	4630      	mov	r0, r6
   b55d2:	9f06      	ldr	r7, [sp, #24]
   b55d4:	f001 fccd 	bl	b6f72 <_ZN6AB180510isBitClearEhhb>
   b55d8:	4929      	ldr	r1, [pc, #164]	; (b5680 <setup+0x1d8>)
   b55da:	4b2a      	ldr	r3, [pc, #168]	; (b5684 <setup+0x1dc>)
   b55dc:	463a      	mov	r2, r7
   b55de:	2800      	cmp	r0, #0
   b55e0:	bf18      	it	ne
   b55e2:	460b      	movne	r3, r1
   b55e4:	4828      	ldr	r0, [pc, #160]	; (b5688 <setup+0x1e0>)
   b55e6:	4929      	ldr	r1, [pc, #164]	; (b568c <setup+0x1e4>)
   b55e8:	f7fe fda9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b55ec:	4628      	mov	r0, r5
   b55ee:	f009 fa79 	bl	beae4 <_ZN6StringD1Ev>
	if (!digitalRead(BUTTON_PIN)) {
   b55f2:	4b27      	ldr	r3, [pc, #156]	; (b5690 <setup+0x1e8>)
   b55f4:	881e      	ldrh	r6, [r3, #0]
   b55f6:	4630      	mov	r0, r6
   b55f8:	f00a f850 	bl	bf69c <digitalRead>
   b55fc:	4605      	mov	r5, r0
   b55fe:	bb50      	cbnz	r0, b5656 <setup+0x1ae>
		Log.info("User button pressed, test mode");
   b5600:	4924      	ldr	r1, [pc, #144]	; (b5694 <setup+0x1ec>)
   b5602:	4821      	ldr	r0, [pc, #132]	; (b5688 <setup+0x1e0>)
   b5604:	f7fe fd9b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		testModeFlag = true;
   b5608:	4b23      	ldr	r3, [pc, #140]	; (b5698 <setup+0x1f0>)
   b560a:	2101      	movs	r1, #1
   b560c:	7019      	strb	r1, [r3, #0]
		digitalWrite(BLUE_LED,HIGH);
   b560e:	4b23      	ldr	r3, [pc, #140]	; (b569c <setup+0x1f4>)
   b5610:	881f      	ldrh	r7, [r3, #0]
   b5612:	4638      	mov	r0, r7
   b5614:	f00a f829 	bl	bf66a <digitalWrite>
		delay(2000);
   b5618:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b561c:	f006 ff6e 	bl	bc4fc <delay>
		digitalWrite(BLUE_LED,LOW);
   b5620:	4629      	mov	r1, r5
   b5622:	4638      	mov	r0, r7
   b5624:	f00a f821 	bl	bf66a <digitalWrite>
		state = LoRA_STATE;
   b5628:	2304      	movs	r3, #4
   b562a:	7023      	strb	r3, [r4, #0]
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b562c:	2200      	movs	r2, #0
   b562e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5632:	491b      	ldr	r1, [pc, #108]	; (b56a0 <setup+0x1f8>)
   b5634:	9200      	str	r2, [sp, #0]
   b5636:	4630      	mov	r0, r6
   b5638:	f007 fce0 	bl	bcffc <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b563c:	7823      	ldrb	r3, [r4, #0]
   b563e:	b90b      	cbnz	r3, b5644 <setup+0x19c>
   b5640:	2302      	movs	r3, #2
   b5642:	7023      	strb	r3, [r4, #0]
}
   b5644:	b01d      	add	sp, #116	; 0x74
   b5646:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("LocalTime not initialized so will need to Connect to Particle");
   b5648:	4916      	ldr	r1, [pc, #88]	; (b56a4 <setup+0x1fc>)
   b564a:	480f      	ldr	r0, [pc, #60]	; (b5688 <setup+0x1e0>)
   b564c:	f7fe fd77 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		state = CONNECTING_STATE;
   b5650:	2305      	movs	r3, #5
   b5652:	7023      	strb	r3, [r4, #0]
   b5654:	e7cd      	b.n	b55f2 <setup+0x14a>
	else Log.info("No user button push detechted");
   b5656:	4914      	ldr	r1, [pc, #80]	; (b56a8 <setup+0x200>)
   b5658:	480b      	ldr	r0, [pc, #44]	; (b5688 <setup+0x1e0>)
   b565a:	f7fe fd70 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b565e:	e7e5      	b.n	b562c <setup+0x184>
   b5660:	2003e2a8 	.word	0x2003e2a8
   b5664:	2003e2e0 	.word	0x2003e2e0
   b5668:	000b4f21 	.word	0x000b4f21
   b566c:	000b4f9b 	.word	0x000b4f9b
   b5670:	000b4f87 	.word	0x000b4f87
   b5674:	000c1034 	.word	0x000c1034
   b5678:	2003e3d2 	.word	0x2003e3d2
   b567c:	000c105b 	.word	0x000c105b
   b5680:	000c102a 	.word	0x000c102a
   b5684:	000c102d 	.word	0x000c102d
   b5688:	2003e654 	.word	0x2003e654
   b568c:	000c1066 	.word	0x000c1066
   b5690:	000c14b6 	.word	0x000c14b6
   b5694:	000c10d5 	.word	0x000c10d5
   b5698:	2003e3d3 	.word	0x2003e3d3
   b569c:	000c14b4 	.word	0x000c14b4
   b56a0:	000b4f2d 	.word	0x000b4f2d
   b56a4:	000c1097 	.word	0x000c1097
   b56a8:	000c10f4 	.word	0x000c10f4

000b56ac <loop>:
void loop() {
   b56ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (state) {
   b56b0:	4d7d      	ldr	r5, [pc, #500]	; (b58a8 <loop+0x1fc>)
   b56b2:	782b      	ldrb	r3, [r5, #0]
   b56b4:	3b01      	subs	r3, #1
void loop() {
   b56b6:	b090      	sub	sp, #64	; 0x40
   b56b8:	2b06      	cmp	r3, #6
   b56ba:	d817      	bhi.n	b56ec <loop+0x40>
   b56bc:	e8df f013 	tbh	[pc, r3, lsl #1]
   b56c0:	00070282 	.word	0x00070282
   b56c4:	010c0033 	.word	0x010c0033
   b56c8:	024101cd 	.word	0x024101cd
   b56cc:	01af      	.short	0x01af
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b56ce:	4b77      	ldr	r3, [pc, #476]	; (b58ac <loop+0x200>)
   b56d0:	781b      	ldrb	r3, [r3, #0]
   b56d2:	2b02      	cmp	r3, #2
   b56d4:	d001      	beq.n	b56da <loop+0x2e>
   b56d6:	f7ff fcb7 	bl	b5048 <_Z22publishStateTransitionv>
			if (nextEventTime) {
   b56da:	4b75      	ldr	r3, [pc, #468]	; (b58b0 <loop+0x204>)
   b56dc:	781a      	ldrb	r2, [r3, #0]
   b56de:	b11a      	cbz	r2, b56e8 <loop+0x3c>
				nextEventTime = false;
   b56e0:	2200      	movs	r2, #0
   b56e2:	701a      	strb	r2, [r3, #0]
			state = LoRA_STATE;
   b56e4:	2304      	movs	r3, #4
   b56e6:	e000      	b.n	b56ea <loop+0x3e>
			else state = SLEEPING_STATE;
   b56e8:	2303      	movs	r3, #3
   b56ea:	702b      	strb	r3, [r5, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b56ec:	4871      	ldr	r0, [pc, #452]	; (b58b4 <loop+0x208>)
   b56ee:	f001 ff6b 	bl	b75c8 <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   b56f2:	f003 ff01 	bl	b94f8 <_ZN17PublishQueuePosix8instanceEv>
   b56f6:	f003 fdf1 	bl	b92dc <_ZN17PublishQueuePosix4loopEv>
	current.loop();
   b56fa:	f000 fba9 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b56fe:	f000 fbb7 	bl	b5e70 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b5702:	f000 fb55 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5706:	f000 fb7b 	bl	b5e00 <_ZN13sysStatusData4loopEv>
	nodeID.loop();
   b570a:	f000 fc1f 	bl	b5f4c <_ZN10nodeIDData8instanceEv>
   b570e:	f000 fc3a 	bl	b5f86 <_ZN10nodeIDData4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b5712:	4b69      	ldr	r3, [pc, #420]	; (b58b8 <loop+0x20c>)
   b5714:	681b      	ldr	r3, [r3, #0]
   b5716:	2b00      	cmp	r3, #0
   b5718:	f2c0 8288 	blt.w	b5c2c <loop+0x580>
}
   b571c:	b010      	add	sp, #64	; 0x40
   b571e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		System.reset();
   b5722:	f009 bb9e 	b.w	bee62 <_ZN11SystemClass5resetEv>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5726:	4b61      	ldr	r3, [pc, #388]	; (b58ac <loop+0x200>)
   b5728:	781b      	ldrb	r3, [r3, #0]
   b572a:	2b03      	cmp	r3, #3
   b572c:	d001      	beq.n	b5732 <loop+0x86>
   b572e:	f7ff fc8b 	bl	b5048 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b5732:	2100      	movs	r1, #0
   b5734:	485f      	ldr	r0, [pc, #380]	; (b58b4 <loop+0x208>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b5736:	4c61      	ldr	r4, [pc, #388]	; (b58bc <loop+0x210>)
   b5738:	f001 fb9a 	bl	b6e70 <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent();  		   		   	   // Time till next event
   b573c:	f7ff fc54 	bl	b4fe8 <_Z21secondsUntilNextEventv>
   b5740:	4607      	mov	r7, r0
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.timeStr(Time.now()+wakeInSeconds).c_str(),System.freeMemory());
   b5742:	f009 fd82 	bl	bf24a <_ZN9TimeClass3nowEv>
   b5746:	19c2      	adds	r2, r0, r7
   b5748:	17d3      	asrs	r3, r2, #31
   b574a:	a808      	add	r0, sp, #32
   b574c:	f009 fc78 	bl	bf040 <_ZN9TimeClass7timeStrEx>
   b5750:	9b08      	ldr	r3, [sp, #32]
   b5752:	9302      	str	r3, [sp, #8]
   b5754:	f009 fbe8 	bl	bef28 <_ZN11SystemClass10freeMemoryEv>
   b5758:	9b02      	ldr	r3, [sp, #8]
   b575a:	4959      	ldr	r1, [pc, #356]	; (b58c0 <loop+0x214>)
   b575c:	9000      	str	r0, [sp, #0]
   b575e:	463a      	mov	r2, r7
   b5760:	4858      	ldr	r0, [pc, #352]	; (b58c4 <loop+0x218>)
   b5762:	f7fe fcec 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5766:	a808      	add	r0, sp, #32
   b5768:	f009 f9bc 	bl	beae4 <_ZN6StringD1Ev>
			delay(2000);									// Make sure message gets out
   b576c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5770:	f006 fec4 	bl	bc4fc <delay>
   b5774:	7d23      	ldrb	r3, [r4, #20]
   b5776:	2b00      	cmp	r3, #0
   b5778:	d050      	beq.n	b581c <loop+0x170>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b577a:	2302      	movs	r3, #2
   b577c:	7223      	strb	r3, [r4, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b577e:	4b52      	ldr	r3, [pc, #328]	; (b58c8 <loop+0x21c>)
   b5780:	f8b3 8000 	ldrh.w	r8, [r3]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5784:	6823      	ldr	r3, [r4, #0]
   b5786:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b5788:	b1f3      	cbz	r3, b57c8 <loop+0x11c>
            if (start->type == type) {
   b578a:	889a      	ldrh	r2, [r3, #4]
   b578c:	2a01      	cmp	r2, #1
   b578e:	d006      	beq.n	b579e <loop+0xf2>
            start = start->next;
   b5790:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5792:	e7f9      	b.n	b5788 <loop+0xdc>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b5794:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b5796:	b1bb      	cbz	r3, b57c8 <loop+0x11c>
            if (start->type == type) {
   b5798:	889a      	ldrh	r2, [r3, #4]
   b579a:	2a01      	cmp	r2, #1
   b579c:	d1fa      	bne.n	b5794 <loop+0xe8>
                if (gpioWakeup->pin == pin) {
   b579e:	899a      	ldrh	r2, [r3, #12]
   b57a0:	4542      	cmp	r2, r8
   b57a2:	d1f7      	bne.n	b5794 <loop+0xe8>
                    gpioWakeup->mode = mode;
   b57a4:	2200      	movs	r2, #0
   b57a6:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b57a8:	7d23      	ldrb	r3, [r4, #20]
   b57aa:	2b00      	cmp	r3, #0
   b57ac:	d036      	beq.n	b581c <loop+0x170>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b57ae:	6823      	ldr	r3, [r4, #0]
				.duration(wakeInSeconds * 1000L);
   b57b0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b57b4:	68db      	ldr	r3, [r3, #12]
   b57b6:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b57ba:	b1db      	cbz	r3, b57f4 <loop+0x148>
            if (start->type == type) {
   b57bc:	889a      	ldrh	r2, [r3, #4]
   b57be:	2a04      	cmp	r2, #4
   b57c0:	f000 822f 	beq.w	b5c22 <loop+0x576>
            start = start->next;
   b57c4:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b57c6:	e7f8      	b.n	b57ba <loop+0x10e>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b57c8:	4940      	ldr	r1, [pc, #256]	; (b58cc <loop+0x220>)
   b57ca:	2010      	movs	r0, #16
   b57cc:	f00a f84e 	bl	bf86c <_ZnwjRKSt9nothrow_t>
   b57d0:	4606      	mov	r6, r0
   b57d2:	2800      	cmp	r0, #0
   b57d4:	f000 8228 	beq.w	b5c28 <loop+0x57c>
   b57d8:	2210      	movs	r2, #16
   b57da:	2100      	movs	r1, #0
   b57dc:	f00a fd82 	bl	c02e4 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b57e0:	4b3b      	ldr	r3, [pc, #236]	; (b58d0 <loop+0x224>)
   b57e2:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b57e4:	2301      	movs	r3, #1
   b57e6:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b57e8:	6923      	ldr	r3, [r4, #16]
   b57ea:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b57ec:	f8a6 800c 	strh.w	r8, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b57f0:	6126      	str	r6, [r4, #16]
   b57f2:	e7d9      	b.n	b57a8 <loop+0xfc>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b57f4:	4935      	ldr	r1, [pc, #212]	; (b58cc <loop+0x220>)
   b57f6:	2010      	movs	r0, #16
   b57f8:	f00a f838 	bl	bf86c <_ZnwjRKSt9nothrow_t>
   b57fc:	4606      	mov	r6, r0
   b57fe:	2800      	cmp	r0, #0
   b5800:	f000 8212 	beq.w	b5c28 <loop+0x57c>
   b5804:	2210      	movs	r2, #16
   b5806:	2100      	movs	r1, #0
   b5808:	f00a fd6c 	bl	c02e4 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b580c:	4b30      	ldr	r3, [pc, #192]	; (b58d0 <loop+0x224>)
   b580e:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b5810:	2304      	movs	r3, #4
   b5812:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5814:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5816:	6126      	str	r6, [r4, #16]
            wakeupSource->ms = ms;
   b5818:	e9c6 3802 	strd	r3, r8, [r6, #8]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b581c:	4927      	ldr	r1, [pc, #156]	; (b58bc <loop+0x210>)
   b581e:	a805      	add	r0, sp, #20
   b5820:	f009 fb22 	bl	bee68 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b5824:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5828:	4822      	ldr	r0, [pc, #136]	; (b58b4 <loop+0x208>)
   b582a:	f001 fb21 	bl	b6e70 <_ZN6AB18056setWDTEi>
        return hal_timer_millis(nullptr);
   b582e:	2000      	movs	r0, #0
   b5830:	f006 fa60 	bl	bbcf4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5834:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b5838:	4604      	mov	r4, r0
   b583a:	2000      	movs	r0, #0
   b583c:	f006 fa5a 	bl	bbcf4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5840:	1b00      	subs	r0, r0, r4
   b5842:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5846:	42b0      	cmp	r0, r6
   b5848:	f171 0300 	sbcs.w	r3, r1, #0
   b584c:	d207      	bcs.n	b585e <loop+0x1b2>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b584e:	f009 fde3 	bl	bf418 <_Z16_fetch_usbserialv>
   b5852:	f009 fdd6 	bl	bf402 <_ZN9USBSerial11isConnectedEv>
   b5856:	b910      	cbnz	r0, b585e <loop+0x1b2>
            spark_process();
   b5858:	f006 fd20 	bl	bc29c <spark_process>
        while (_while() && !_condition()) {
   b585c:	e7ed      	b.n	b583a <loop+0x18e>
   b585e:	f009 fddb 	bl	bf418 <_Z16_fetch_usbserialv>
   b5862:	f009 fdce 	bl	bf402 <_ZN9USBSerial11isConnectedEv>
			state = IDLE_STATE;
   b5866:	2302      	movs	r3, #2
   b5868:	702b      	strb	r3, [r5, #0]
			nextEventTime = true;
   b586a:	4b11      	ldr	r3, [pc, #68]	; (b58b0 <loop+0x204>)
   b586c:	2201      	movs	r2, #1
   b586e:	701a      	strb	r2, [r3, #0]
			Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b5870:	f009 fceb 	bl	bf24a <_ZN9TimeClass3nowEv>
   b5874:	19c2      	adds	r2, r0, r7
   b5876:	17d3      	asrs	r3, r2, #31
   b5878:	a808      	add	r0, sp, #32
   b587a:	f009 fbe1 	bl	bf040 <_ZN9TimeClass7timeStrEx>
   b587e:	9a08      	ldr	r2, [sp, #32]
   b5880:	9202      	str	r2, [sp, #8]
   b5882:	f009 fb51 	bl	bef28 <_ZN11SystemClass10freeMemoryEv>
   b5886:	9a02      	ldr	r2, [sp, #8]
   b5888:	4912      	ldr	r1, [pc, #72]	; (b58d4 <loop+0x228>)
   b588a:	4603      	mov	r3, r0
   b588c:	480d      	ldr	r0, [pc, #52]	; (b58c4 <loop+0x218>)
   b588e:	f7fe fc56 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5892:	a808      	add	r0, sp, #32
   b5894:	f009 f926 	bl	beae4 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b5898:	9805      	ldr	r0, [sp, #20]
   b589a:	2800      	cmp	r0, #0
   b589c:	f43f af26 	beq.w	b56ec <loop+0x40>
            free(wakeupSource_);
   b58a0:	f006 fdb4 	bl	bc40c <free>
		} break;
   b58a4:	e722      	b.n	b56ec <loop+0x40>
   b58a6:	bf00      	nop
   b58a8:	2003e3d2 	.word	0x2003e3d2
   b58ac:	2003e3d1 	.word	0x2003e3d1
   b58b0:	2003e3d0 	.word	0x2003e3d0
   b58b4:	2003e2a8 	.word	0x2003e2a8
   b58b8:	2003d67c 	.word	0x2003d67c
   b58bc:	2003e2c8 	.word	0x2003e2c8
   b58c0:	000c111e 	.word	0x000c111e
   b58c4:	2003e654 	.word	0x2003e654
   b58c8:	000c14b6 	.word	0x000c14b6
   b58cc:	000c2284 	.word	0x000c2284
   b58d0:	00030010 	.word	0x00030010
   b58d4:	000c115e 	.word	0x000c115e
			if (state != oldState) {
   b58d8:	4ba9      	ldr	r3, [pc, #676]	; (b5b80 <loop+0x4d4>)
   b58da:	781b      	ldrb	r3, [r3, #0]
   b58dc:	2b04      	cmp	r3, #4
   b58de:	d062      	beq.n	b59a6 <loop+0x2fa>
				if (oldState != REPORTING_STATE) startLoRAWindow = millis();    // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b58e0:	2b07      	cmp	r3, #7
   b58e2:	d003      	beq.n	b58ec <loop+0x240>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b58e4:	f006 f9f6 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
   b58e8:	4ba6      	ldr	r3, [pc, #664]	; (b5b84 <loop+0x4d8>)
   b58ea:	6018      	str	r0, [r3, #0]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b58ec:	f7ff fbac 	bl	b5048 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();						// Clear the buffer before we start the LoRA state
   b58f0:	f7fe fc3e 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b58f4:	f7fe fc4e 	bl	b4194 <_ZN14LoRA_Functions11clearBufferEv>
   b58f8:	f009 fca7 	bl	bf24a <_ZN9TimeClass3nowEv>
   b58fc:	4ca2      	ldr	r4, [pc, #648]	; (b5b88 <loop+0x4dc>)
   b58fe:	17c3      	asrs	r3, r0, #31
   b5900:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
				conv.withCurrentTime().convert();								// Get the time and convert to Local
   b5904:	4620      	mov	r0, r4
   b5906:	f003 fb07 	bl	b8f18 <_ZN16LocalTimeConvert7convertEv>
    /**
     * @brief Get the value of this object as a LocalTimeHMS (hour minute second)
     * 
     * @return LocalTimeHMS 
     */
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   b590a:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b590e:	a805      	add	r0, sp, #20
   b5910:	f003 f994 	bl	b8c3c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour < sysStatus.get_closeTime()) current.set_openHours(true);
   b5914:	f99d 6018 	ldrsb.w	r6, [sp, #24]
   b5918:	f000 fa4a 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b591c:	f000 fb75 	bl	b600a <_ZNK13sysStatusData12get_openTimeEv>
   b5920:	4286      	cmp	r6, r0
   b5922:	db76      	blt.n	b5a12 <loop+0x366>
   b5924:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b5928:	a808      	add	r0, sp, #32
   b592a:	f003 f987 	bl	b8c3c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b592e:	f99d 6024 	ldrsb.w	r6, [sp, #36]	; 0x24
   b5932:	f000 fa3d 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5936:	f000 fb6d 	bl	b6014 <_ZNK13sysStatusData13get_closeTimeEv>
   b593a:	4286      	cmp	r6, r0
   b593c:	a808      	add	r0, sp, #32
   b593e:	bfac      	ite	ge
   b5940:	2600      	movge	r6, #0
   b5942:	2601      	movlt	r6, #1
   b5944:	f002 feee 	bl	b8724 <_ZN12LocalTimeHMSD1Ev>
   b5948:	a805      	add	r0, sp, #20
   b594a:	f002 feeb 	bl	b8724 <_ZN12LocalTimeHMSD1Ev>
   b594e:	2e00      	cmp	r6, #0
   b5950:	d061      	beq.n	b5a16 <loop+0x36a>
   b5952:	f000 fa7d 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b5956:	2101      	movs	r1, #1
				else current.set_openHours(false);
   b5958:	f000 fd20 	bl	b639c <_ZN17currentStatusData13set_openHoursEb>
				Log.info("Gateway is listening for LoRA messages and the park is %s (%d / %d / %d)", (current.get_openHours()) ? "open":"closed", conv.getLocalTimeHMS().hour, sysStatus.get_openTime(), sysStatus.get_closeTime());
   b595c:	f000 fa78 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b5960:	f000 fcf9 	bl	b6356 <_ZNK17currentStatusData13get_openHoursEv>
   b5964:	4b89      	ldr	r3, [pc, #548]	; (b5b8c <loop+0x4e0>)
   b5966:	4a8a      	ldr	r2, [pc, #552]	; (b5b90 <loop+0x4e4>)
   b5968:	498a      	ldr	r1, [pc, #552]	; (b5b94 <loop+0x4e8>)
   b596a:	2800      	cmp	r0, #0
   b596c:	bf08      	it	eq
   b596e:	461a      	moveq	r2, r3
   b5970:	a808      	add	r0, sp, #32
   b5972:	9203      	str	r2, [sp, #12]
   b5974:	f003 f962 	bl	b8c3c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5978:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b597c:	9302      	str	r3, [sp, #8]
   b597e:	f000 fa17 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5982:	f000 fb42 	bl	b600a <_ZNK13sysStatusData12get_openTimeEv>
   b5986:	4604      	mov	r4, r0
   b5988:	f000 fa12 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b598c:	f000 fb42 	bl	b6014 <_ZNK13sysStatusData13get_closeTimeEv>
   b5990:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b5994:	e9cd 4000 	strd	r4, r0, [sp]
   b5998:	497f      	ldr	r1, [pc, #508]	; (b5b98 <loop+0x4ec>)
   b599a:	4880      	ldr	r0, [pc, #512]	; (b5b9c <loop+0x4f0>)
   b599c:	f7fe fbcf 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b59a0:	a808      	add	r0, sp, #32
   b59a2:	f002 febf 	bl	b8724 <_ZN12LocalTimeHMSD1Ev>
			if (LoRA_Functions::instance().listenForLoRAMessageGateway()) {
   b59a6:	f7fe fbe3 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b59aa:	f7ff fa07 	bl	b4dbc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>
   b59ae:	b180      	cbz	r0, b59d2 <loop+0x326>
				Log.info("Back in main app - alert code is %d", current.get_alertCodeNode());
   b59b0:	f000 fa4e 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b59b4:	f000 fb56 	bl	b6064 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b59b8:	4979      	ldr	r1, [pc, #484]	; (b5ba0 <loop+0x4f4>)
   b59ba:	4602      	mov	r2, r0
   b59bc:	4877      	ldr	r0, [pc, #476]	; (b5b9c <loop+0x4f0>)
   b59be:	f7fe fbbe 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				if (current.get_alertCodeNode() != 1) {
   b59c2:	f000 fa45 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b59c6:	f000 fb4d 	bl	b6064 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b59ca:	2801      	cmp	r0, #1
					state = REPORTING_STATE; 			// Received and acknowledged data from a node - report unless there is Alert Code 1 (Unconfigured Node)
   b59cc:	bf1c      	itt	ne
   b59ce:	2307      	movne	r3, #7
   b59d0:	702b      	strbne	r3, [r5, #0]
			if (!testModeFlag && ((millis() - startLoRAWindow) > 150000L)) { 								// Keeps us in listening mode for the specified windpw - then back to idle unless in test mode - keeps listening
   b59d2:	4b74      	ldr	r3, [pc, #464]	; (b5ba4 <loop+0x4f8>)
   b59d4:	781b      	ldrb	r3, [r3, #0]
   b59d6:	2b00      	cmp	r3, #0
   b59d8:	f47f ae88 	bne.w	b56ec <loop+0x40>
   b59dc:	f006 f97a 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
   b59e0:	4b68      	ldr	r3, [pc, #416]	; (b5b84 <loop+0x4d8>)
   b59e2:	681b      	ldr	r3, [r3, #0]
   b59e4:	1ac0      	subs	r0, r0, r3
   b59e6:	4b70      	ldr	r3, [pc, #448]	; (b5ba8 <loop+0x4fc>)
   b59e8:	4298      	cmp	r0, r3
   b59ea:	f67f ae7f 	bls.w	b56ec <loop+0x40>
				LoRA_Functions::instance().sleepLoRaRadio();												// Done with the LoRA phase - put the radio to sleep
   b59ee:	f7fe fbbf 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b59f2:	f7fe fbdf 	bl	b41b4 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection())) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over
   b59f6:	f009 fc39 	bl	bf26c <_ZN9TimeClass4hourEv>
   b59fa:	4604      	mov	r4, r0
   b59fc:	f000 f9d8 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5a00:	f000 fc34 	bl	b626c <_ZNK13sysStatusData18get_lastConnectionEv>
   b5a04:	f009 faf8 	bl	beff8 <_ZN9TimeClass4hourEx>
   b5a08:	4284      	cmp	r4, r0
   b5a0a:	f000 80b7 	beq.w	b5b7c <loop+0x4d0>
   b5a0e:	2305      	movs	r3, #5
   b5a10:	e66b      	b.n	b56ea <loop+0x3e>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour < sysStatus.get_closeTime()) current.set_openHours(true);
   b5a12:	2600      	movs	r6, #0
   b5a14:	e798      	b.n	b5948 <loop+0x29c>
				else current.set_openHours(false);
   b5a16:	f000 fa1b 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b5a1a:	4631      	mov	r1, r6
   b5a1c:	e79c      	b.n	b5958 <loop+0x2ac>
			if (state != oldState) publishStateTransition();
   b5a1e:	4b58      	ldr	r3, [pc, #352]	; (b5b80 <loop+0x4d4>)
   b5a20:	781b      	ldrb	r3, [r3, #0]
   b5a22:	2b07      	cmp	r3, #7
   b5a24:	d001      	beq.n	b5a2a <loop+0x37e>
   b5a26:	f7ff fb0f 	bl	b5048 <_Z22publishStateTransitionv>
			uint8_t nodeNumber = current.get_nodeNumber();						// Put this here to reduce line length
   b5a2a:	f000 fa11 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b5a2e:	f000 fafb 	bl	b6028 <_ZNK17currentStatusData14get_nodeNumberEv>
			publishWebhook(nodeNumber);
   b5a32:	f7ff fb51 	bl	b50d8 <_Z14publishWebhookh>
			current.set_alertCodeNode(0);										// Zero alert code after send
   b5a36:	f000 fa0b 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b5a3a:	2100      	movs	r1, #0
   b5a3c:	f000 fb70 	bl	b6120 <_ZN17currentStatusData17set_alertCodeNodeEh>
			sysStatus.set_messageCount(sysStatus.get_messageCount() + 1);		// Increment the message counter 
   b5a40:	f000 f9b6 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5a44:	4604      	mov	r4, r0
   b5a46:	f000 f9b3 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5a4a:	f000 fad9 	bl	b6000 <_ZNK13sysStatusData16get_messageCountEv>
   b5a4e:	3001      	adds	r0, #1
   b5a50:	b2c1      	uxtb	r1, r0
   b5a52:	4620      	mov	r0, r4
   b5a54:	f000 fb3a 	bl	b60cc <_ZN13sysStatusData16set_messageCountEh>
   b5a58:	e644      	b.n	b56e4 <loop+0x38>
			if (state != oldState) {
   b5a5a:	4b49      	ldr	r3, [pc, #292]	; (b5b80 <loop+0x4d4>)
   b5a5c:	4c53      	ldr	r4, [pc, #332]	; (b5bac <loop+0x500>)
   b5a5e:	781b      	ldrb	r3, [r3, #0]
   b5a60:	2b05      	cmp	r3, #5
   b5a62:	d025      	beq.n	b5ab0 <loop+0x404>
				publishStateTransition();  
   b5a64:	f7ff faf0 	bl	b5048 <_Z22publishStateTransitionv>
				if (Time.day(sysStatus.get_lastConnection()) != conv.getLocalTimeYMD().getDay()) {
   b5a68:	f000 f9a2 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5a6c:	f000 fbfe 	bl	b626c <_ZNK13sysStatusData18get_lastConnectionEv>
   b5a70:	f009 faca 	bl	bf008 <_ZN9TimeClass3dayEx>
        fromLocalTimeValue(value);
   b5a74:	4947      	ldr	r1, [pc, #284]	; (b5b94 <loop+0x4e8>)
   b5a76:	4606      	mov	r6, r0
   b5a78:	a808      	add	r0, sp, #32
   b5a7a:	f003 f8fc 	bl	b8c76 <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>
    /**
     * @brief Get the value of this object as a LocalTimeYMD (year month day0)
     * 
     * @return LocalTimeYMD 
     */
    LocalTimeYMD getLocalTimeYMD() const { return LocalTimeYMD(localTimeValue); };
   b5a7e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   b5a82:	ebb6 0fd3 	cmp.w	r6, r3, lsr #3
   b5a86:	d005      	beq.n	b5a94 <loop+0x3e8>
					resetEverything();
   b5a88:	f000 fc24 	bl	b62d4 <_Z15resetEverythingv>
					Log.info("New Day - Resetting everything");
   b5a8c:	4948      	ldr	r1, [pc, #288]	; (b5bb0 <loop+0x504>)
   b5a8e:	4843      	ldr	r0, [pc, #268]	; (b5b9c <loop+0x4f0>)
   b5a90:	f7fe fb55 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				publishWebhook(sysStatus.get_nodeNumber());								// Before we connect - let's send the gateway's webhook
   b5a94:	f000 f98c 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5a98:	f000 faa8 	bl	b5fec <_ZNK13sysStatusData14get_nodeNumberEv>
   b5a9c:	f7ff fb1c 	bl	b50d8 <_Z14publishWebhookh>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5aa0:	f006 fc0c 	bl	bc2bc <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();							// Time to connect to Particle
   b5aa4:	b908      	cbnz	r0, b5aaa <loop+0x3fe>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b5aa6:	f006 fc01 	bl	bc2ac <spark_cloud_flag_connect>
   b5aaa:	f006 f913 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b5aae:	6020      	str	r0, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5ab0:	f006 fc04 	bl	bc2bc <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b5ab4:	b338      	cbz	r0, b5b06 <loop+0x45a>
				sysStatus.set_lastConnection(Time.now());
   b5ab6:	f000 f97b 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5aba:	4606      	mov	r6, r0
   b5abc:	f009 fbc5 	bl	bf24a <_ZN9TimeClass3nowEv>
   b5ac0:	4602      	mov	r2, r0
   b5ac2:	17c3      	asrs	r3, r0, #31
   b5ac4:	4630      	mov	r0, r6
   b5ac6:	f000 fbfa 	bl	b62be <_ZN13sysStatusData18set_lastConnectionEx>
				sysStatus.set_lastConnectionDuration((millis() - connectingTimeout) / 1000);	// Record connection time in seconds
   b5aca:	f000 f971 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5ace:	4606      	mov	r6, r0
   b5ad0:	f006 f900 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
   b5ad4:	6821      	ldr	r1, [r4, #0]
   b5ad6:	1a41      	subs	r1, r0, r1
   b5ad8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5adc:	fbb1 f1f0 	udiv	r1, r1, r0
   b5ae0:	4630      	mov	r0, r6
   b5ae2:	b289      	uxth	r1, r1
   b5ae4:	f000 fb81 	bl	b61ea <_ZN13sysStatusData26set_lastConnectionDurationEt>
   b5ae8:	f006 fbe8 	bl	bc2bc <spark_cloud_flag_connected>
				if (Particle.connected()) {
   b5aec:	b338      	cbz	r0, b5b3e <loop+0x492>
   b5aee:	f006 fbe5 	bl	bc2bc <spark_cloud_flag_connected>
        if (!connected()) {
   b5af2:	b110      	cbz	r0, b5afa <loop+0x44e>
        return spark_sync_time(NULL);
   b5af4:	2000      	movs	r0, #0
   b5af6:	f006 fbf9 	bl	bc2ec <spark_sync_time>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b5afa:	f7ff fa53 	bl	b4fa4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        while (_while() && !_condition()) {
   b5afe:	b950      	cbnz	r0, b5b16 <loop+0x46a>
            spark_process();
   b5b00:	f006 fbcc 	bl	bc29c <spark_process>
        while (_while() && !_condition()) {
   b5b04:	e7f9      	b.n	b5afa <loop+0x44e>
   b5b06:	f006 f8e5 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b5b0a:	6823      	ldr	r3, [r4, #0]
   b5b0c:	1ac0      	subs	r0, r0, r3
   b5b0e:	4b29      	ldr	r3, [pc, #164]	; (b5bb4 <loop+0x508>)
   b5b10:	4298      	cmp	r0, r3
   b5b12:	d8d0      	bhi.n	b5ab6 <loop+0x40a>
   b5b14:	e5ea      	b.n	b56ec <loop+0x40>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b5b16:	f7ff fa45 	bl	b4fa4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
					CellularSignal sig = Cellular.RSSI();
   b5b1a:	4927      	ldr	r1, [pc, #156]	; (b5bb8 <loop+0x50c>)
   b5b1c:	a808      	add	r0, sp, #32
   b5b1e:	f006 fd67 	bl	bc5f0 <_ZN5spark13CellularClass4RSSIEv>
					sysStatus.set_RSSI(sig.getStrength());
   b5b22:	f000 f945 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5b26:	4604      	mov	r4, r0
   b5b28:	a808      	add	r0, sp, #32
   b5b2a:	f006 fddd 	bl	bc6e8 <_ZNK14CellularSignal11getStrengthEv>
   b5b2e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
   b5b32:	4620      	mov	r0, r4
   b5b34:	ee10 3a10 	vmov	r3, s0
   b5b38:	b299      	uxth	r1, r3
   b5b3a:	f000 fb68 	bl	b620e <_ZN13sysStatusData8set_RSSIEt>
				state = DISCONNECTING_STATE;											// Typically, we will disconnect and sleep to save power - publishes occur during the 90 seconds before disconnect
   b5b3e:	2306      	movs	r3, #6
   b5b40:	e5d3      	b.n	b56ea <loop+0x3e>
			if (state != oldState) {
   b5b42:	4b0f      	ldr	r3, [pc, #60]	; (b5b80 <loop+0x4d4>)
   b5b44:	4c1d      	ldr	r4, [pc, #116]	; (b5bbc <loop+0x510>)
   b5b46:	781b      	ldrb	r3, [r3, #0]
   b5b48:	2b06      	cmp	r3, #6
   b5b4a:	d004      	beq.n	b5b56 <loop+0x4aa>
				publishStateTransition(); 
   b5b4c:	f7ff fa7c 	bl	b5048 <_Z22publishStateTransitionv>
   b5b50:	f006 f8c0 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b5b54:	6020      	str	r0, [r4, #0]
   b5b56:	f006 f8bd 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - stayConnectedWindow > 90000) && PublishQueuePosix::instance().getCanSleep()) {	// Stay on-line for 90 seconds and until we are done clearing the queue
   b5b5a:	6823      	ldr	r3, [r4, #0]
   b5b5c:	1ac0      	subs	r0, r0, r3
   b5b5e:	4b18      	ldr	r3, [pc, #96]	; (b5bc0 <loop+0x514>)
   b5b60:	4298      	cmp	r0, r3
   b5b62:	f67f adc3 	bls.w	b56ec <loop+0x40>
   b5b66:	f003 fcc7 	bl	b94f8 <_ZN17PublishQueuePosix8instanceEv>
   b5b6a:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
   b5b6e:	2b00      	cmp	r3, #0
   b5b70:	f43f adbc 	beq.w	b56ec <loop+0x40>
				Particle_Functions::instance().disconnectFromParticle();
   b5b74:	f000 fce8 	bl	b6548 <_ZN18Particle_Functions8instanceEv>
   b5b78:	f000 fe1c 	bl	b67b4 <_ZN18Particle_Functions22disconnectFromParticleEv>
				state = IDLE_STATE;
   b5b7c:	2302      	movs	r3, #2
   b5b7e:	e5b4      	b.n	b56ea <loop+0x3e>
   b5b80:	2003e3d1 	.word	0x2003e3d1
   b5b84:	2003e29c 	.word	0x2003e29c
   b5b88:	2003e2e0 	.word	0x2003e2e0
   b5b8c:	000c1117 	.word	0x000c1117
   b5b90:	000c1112 	.word	0x000c1112
   b5b94:	2003e348 	.word	0x2003e348
   b5b98:	000c117f 	.word	0x000c117f
   b5b9c:	2003e654 	.word	0x2003e654
   b5ba0:	000c11c8 	.word	0x000c11c8
   b5ba4:	2003e3d3 	.word	0x2003e3d3
   b5ba8:	000249f0 	.word	0x000249f0
   b5bac:	2003e2a0 	.word	0x2003e2a0
   b5bb0:	000c11ec 	.word	0x000c11ec
   b5bb4:	000927c0 	.word	0x000927c0
   b5bb8:	2003e580 	.word	0x2003e580
   b5bbc:	2003e2a4 	.word	0x2003e2a4
   b5bc0:	00015f90 	.word	0x00015f90
			static system_tick_t resetTimeout = millis();
   b5bc4:	4c1b      	ldr	r4, [pc, #108]	; (b5c34 <loop+0x588>)
   b5bc6:	4e1c      	ldr	r6, [pc, #112]	; (b5c38 <loop+0x58c>)
   b5bc8:	7823      	ldrb	r3, [r4, #0]
   b5bca:	f3bf 8f5b 	dmb	ish
   b5bce:	f013 0f01 	tst.w	r3, #1
   b5bd2:	d109      	bne.n	b5be8 <loop+0x53c>
   b5bd4:	4620      	mov	r0, r4
   b5bd6:	f7fe fa71 	bl	b40bc <__cxa_guard_acquire>
   b5bda:	b128      	cbz	r0, b5be8 <loop+0x53c>
   b5bdc:	f006 f87a 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
   b5be0:	6030      	str	r0, [r6, #0]
   b5be2:	4620      	mov	r0, r4
   b5be4:	f7fe fa6f 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) publishStateTransition();
   b5be8:	4b14      	ldr	r3, [pc, #80]	; (b5c3c <loop+0x590>)
   b5bea:	782a      	ldrb	r2, [r5, #0]
   b5bec:	781b      	ldrb	r3, [r3, #0]
   b5bee:	429a      	cmp	r2, r3
   b5bf0:	d001      	beq.n	b5bf6 <loop+0x54a>
   b5bf2:	f7ff fa29 	bl	b5048 <_Z22publishStateTransitionv>
   b5bf6:	f006 f86d 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b5bfa:	6833      	ldr	r3, [r6, #0]
   b5bfc:	1ac0      	subs	r0, r0, r3
   b5bfe:	f247 5330 	movw	r3, #30000	; 0x7530
   b5c02:	4298      	cmp	r0, r3
   b5c04:	f67f ad72 	bls.w	b56ec <loop+0x40>
				Log.info("Deep power down device");
   b5c08:	490d      	ldr	r1, [pc, #52]	; (b5c40 <loop+0x594>)
   b5c0a:	480e      	ldr	r0, [pc, #56]	; (b5c44 <loop+0x598>)
   b5c0c:	f7fe fa97 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				delay(2000);
   b5c10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5c14:	f006 fc72 	bl	bc4fc <delay>
				ab1805.deepPowerDown(); 
   b5c18:	211e      	movs	r1, #30
   b5c1a:	480b      	ldr	r0, [pc, #44]	; (b5c48 <loop+0x59c>)
   b5c1c:	f001 fa82 	bl	b7124 <_ZN6AB180513deepPowerDownEi>
   b5c20:	e564      	b.n	b56ec <loop+0x40>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b5c22:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b5c26:	e5f9      	b.n	b581c <loop+0x170>
                valid_ = false;
   b5c28:	7526      	strb	r6, [r4, #20]
                return *this;
   b5c2a:	e5f7      	b.n	b581c <loop+0x170>
}
   b5c2c:	b010      	add	sp, #64	; 0x40
   b5c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5c32:	bf00      	nop
   b5c34:	2003e290 	.word	0x2003e290
   b5c38:	2003e298 	.word	0x2003e298
   b5c3c:	2003e3d1 	.word	0x2003e3d1
   b5c40:	000c120b 	.word	0x000c120b
   b5c44:	2003e654 	.word	0x2003e654
   b5c48:	2003e2a8 	.word	0x2003e2a8

000b5c4c <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b5c4c:	b510      	push	{r4, lr}
   b5c4e:	4b03      	ldr	r3, [pc, #12]	; (b5c5c <_ZN8MB85RC64D1Ev+0x10>)
   b5c50:	6003      	str	r3, [r0, #0]
   b5c52:	4604      	mov	r4, r0
   b5c54:	f003 fa0e 	bl	b9074 <_ZN6MB85RCD1Ev>
   b5c58:	4620      	mov	r0, r4
   b5c5a:	bd10      	pop	{r4, pc}
   b5c5c:	000c124c 	.word	0x000c124c

000b5c60 <_ZN8MB85RC64D0Ev>:
   b5c60:	b510      	push	{r4, lr}
   b5c62:	4604      	mov	r4, r0
   b5c64:	f7ff fff2 	bl	b5c4c <_ZN8MB85RC64D1Ev>
   b5c68:	4620      	mov	r0, r4
   b5c6a:	2110      	movs	r1, #16
   b5c6c:	f7fe fa17 	bl	b409e <_ZdlPvj>
   b5c70:	4620      	mov	r0, r4
   b5c72:	bd10      	pop	{r4, pc}

000b5c74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b5c74:	b510      	push	{r4, lr}
            if (!handle_) {
   b5c76:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b5c78:	4604      	mov	r4, r0
            if (!handle_) {
   b5c7a:	b90b      	cbnz	r3, b5c80 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b5c7c:	f005 ffda 	bl	bbc34 <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b5c80:	6820      	ldr	r0, [r4, #0]
        }
   b5c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b5c86:	f005 bfe5 	b.w	bbc54 <os_mutex_recursive_lock>

000b5c8a <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b5c8a:	b538      	push	{r3, r4, r5, lr}
   b5c8c:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b5c8e:	3004      	adds	r0, #4
   b5c90:	f7ff fff0 	bl	b5c74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5c94:	6a20      	ldr	r0, [r4, #32]
   b5c96:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5c98:	6803      	ldr	r3, [r0, #0]
   b5c9a:	68dd      	ldr	r5, [r3, #12]
   b5c9c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5ca0:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b5ca2:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b5ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b5ca8:	f005 bfdc 	b.w	bbc64 <os_mutex_recursive_unlock>

000b5cac <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5cac:	b538      	push	{r3, r4, r5, lr}
   b5cae:	4604      	mov	r4, r0
   b5cb0:	3004      	adds	r0, #4
   b5cb2:	f7ff ffdf 	bl	b5c74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b5cb6:	6a20      	ldr	r0, [r4, #32]
   b5cb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5cba:	6803      	ldr	r3, [r0, #0]
   b5cbc:	689d      	ldr	r5, [r3, #8]
   b5cbe:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5cc2:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5cc4:	68a2      	ldr	r2, [r4, #8]
   b5cc6:	6823      	ldr	r3, [r4, #0]
   b5cc8:	88d1      	ldrh	r1, [r2, #6]
   b5cca:	695b      	ldr	r3, [r3, #20]
   b5ccc:	4620      	mov	r0, r4
   b5cce:	4798      	blx	r3
   b5cd0:	b918      	cbnz	r0, b5cda <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b5cd2:	6823      	ldr	r3, [r4, #0]
   b5cd4:	4620      	mov	r0, r4
   b5cd6:	699b      	ldr	r3, [r3, #24]
   b5cd8:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5cda:	6860      	ldr	r0, [r4, #4]
   b5cdc:	f005 ffc2 	bl	bbc64 <os_mutex_recursive_unlock>
        }
   b5ce0:	2001      	movs	r0, #1
   b5ce2:	bd38      	pop	{r3, r4, r5, pc}

000b5ce4 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b5ce4:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b5ce6:	4b04      	ldr	r3, [pc, #16]	; (b5cf8 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b5ce8:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b5cea:	4604      	mov	r4, r0
            if (handle_) {
   b5cec:	6840      	ldr	r0, [r0, #4]
   b5cee:	b108      	cbz	r0, b5cf4 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5cf0:	f005 ffa8 	bl	bbc44 <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b5cf4:	4620      	mov	r0, r4
   b5cf6:	bd10      	pop	{r4, pc}
   b5cf8:	000c1f74 	.word	0x000c1f74

000b5cfc <_ZN13sysStatusDataD1Ev>:

sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {

};

sysStatusData::~sysStatusData() {
   b5cfc:	b510      	push	{r4, lr}
   b5cfe:	4b03      	ldr	r3, [pc, #12]	; (b5d0c <_ZN13sysStatusDataD1Ev+0x10>)
   b5d00:	6003      	str	r3, [r0, #0]
   b5d02:	4604      	mov	r4, r0
   b5d04:	f7ff ffee 	bl	b5ce4 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5d08:	4620      	mov	r0, r4
   b5d0a:	bd10      	pop	{r4, pc}
   b5d0c:	000c1294 	.word	0x000c1294

000b5d10 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b5d10:	b510      	push	{r4, lr}
   b5d12:	4604      	mov	r4, r0
}
   b5d14:	f7ff fff2 	bl	b5cfc <_ZN13sysStatusDataD1Ev>
   b5d18:	4620      	mov	r0, r4
   b5d1a:	2168      	movs	r1, #104	; 0x68
   b5d1c:	f7fe f9bf 	bl	b409e <_ZdlPvj>
   b5d20:	4620      	mov	r0, r4
   b5d22:	bd10      	pop	{r4, pc}

000b5d24 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b5d24:	b510      	push	{r4, lr}
   b5d26:	4b03      	ldr	r3, [pc, #12]	; (b5d34 <_ZN17currentStatusDataD1Ev+0x10>)
   b5d28:	6003      	str	r3, [r0, #0]
   b5d2a:	4604      	mov	r4, r0
   b5d2c:	f7ff ffda 	bl	b5ce4 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5d30:	4620      	mov	r0, r4
   b5d32:	bd10      	pop	{r4, pc}
   b5d34:	000c12c0 	.word	0x000c12c0

000b5d38 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b5d38:	b510      	push	{r4, lr}
   b5d3a:	4604      	mov	r4, r0
}
   b5d3c:	f7ff fff2 	bl	b5d24 <_ZN17currentStatusDataD1Ev>
   b5d40:	4620      	mov	r0, r4
   b5d42:	2170      	movs	r1, #112	; 0x70
   b5d44:	f7fe f9ab 	bl	b409e <_ZdlPvj>
   b5d48:	4620      	mov	r0, r4
   b5d4a:	bd10      	pop	{r4, pc}

000b5d4c <_ZN10nodeIDDataD1Ev>:

nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {

};

nodeIDData::~nodeIDData() {
   b5d4c:	b510      	push	{r4, lr}
   b5d4e:	4b03      	ldr	r3, [pc, #12]	; (b5d5c <_ZN10nodeIDDataD1Ev+0x10>)
   b5d50:	6003      	str	r3, [r0, #0]
   b5d52:	4604      	mov	r4, r0
   b5d54:	f7ff ffc6 	bl	b5ce4 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5d58:	4620      	mov	r0, r4
   b5d5a:	bd10      	pop	{r4, pc}
   b5d5c:	000c1268 	.word	0x000c1268

000b5d60 <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b5d60:	b510      	push	{r4, lr}
   b5d62:	4604      	mov	r4, r0
}
   b5d64:	f7ff fff2 	bl	b5d4c <_ZN10nodeIDDataD1Ev>
   b5d68:	4620      	mov	r0, r4
   b5d6a:	f44f 6187 	mov.w	r1, #1080	; 0x438
   b5d6e:	f7fe f996 	bl	b409e <_ZdlPvj>
   b5d72:	4620      	mov	r0, r4
   b5d74:	bd10      	pop	{r4, pc}
	...

000b5d78 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5d78:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5d7c:	6081      	str	r1, [r0, #8]
   b5d7e:	4909      	ldr	r1, [pc, #36]	; (b5da4 <_ZN13sysStatusDataC1Ev+0x2c>)
   b5d80:	f04f 0c40 	mov.w	ip, #64	; 0x40
   b5d84:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b5d88:	2101      	movs	r1, #1
   b5d8a:	8281      	strh	r1, [r0, #20]
   b5d8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5d90:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5d92:	4905      	ldr	r1, [pc, #20]	; (b5da8 <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5d94:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5d96:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b5d9a:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5d9c:	6182      	str	r2, [r0, #24]
   b5d9e:	4a03      	ldr	r2, [pc, #12]	; (b5dac <_ZN13sysStatusDataC1Ev+0x34>)
   b5da0:	6002      	str	r2, [r0, #0]
};
   b5da2:	4770      	bx	lr
   b5da4:	20a99e76 	.word	0x20a99e76
   b5da8:	2003e3e4 	.word	0x2003e3e4
   b5dac:	000c1294 	.word	0x000c1294

000b5db0 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b5db0:	b510      	push	{r4, lr}
    if (!_instance) {
   b5db2:	4c06      	ldr	r4, [pc, #24]	; (b5dcc <_ZN13sysStatusData8instanceEv+0x1c>)
   b5db4:	6823      	ldr	r3, [r4, #0]
   b5db6:	b93b      	cbnz	r3, b5dc8 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b5db8:	2068      	movs	r0, #104	; 0x68
   b5dba:	f7fe f96c 	bl	b4096 <_Znwj>
   b5dbe:	4603      	mov	r3, r0
   b5dc0:	b108      	cbz	r0, b5dc6 <_ZN13sysStatusData8instanceEv+0x16>
   b5dc2:	f7ff ffd9 	bl	b5d78 <_ZN13sysStatusDataC1Ev>
   b5dc6:	6023      	str	r3, [r4, #0]
}
   b5dc8:	6820      	ldr	r0, [r4, #0]
   b5dca:	bd10      	pop	{r4, pc}
   b5dcc:	2003e3dc 	.word	0x2003e3dc

000b5dd0 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b5dd0:	b508      	push	{r3, lr}
    fram.begin();
   b5dd2:	6a00      	ldr	r0, [r0, #32]
   b5dd4:	f003 f964 	bl	b90a0 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5dd8:	f7ff ffea 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5ddc:	6803      	ldr	r3, [r0, #0]
   b5dde:	685b      	ldr	r3, [r3, #4]
   b5de0:	4798      	blx	r3
}
   b5de2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setGatewayConfiguration();                             // Here we will fix the settings specific to the node
   b5de6:	f000 bde7 	b.w	b69b8 <_Z23setGatewayConfigurationv>

000b5dea <_ZN17currentStatusData5setupEv>:
void currentStatusData::setup() {
   b5dea:	b510      	push	{r4, lr}
    fram.begin();
   b5dec:	6a00      	ldr	r0, [r0, #32]
   b5dee:	f003 f957 	bl	b90a0 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5df2:	f7ff ffdd 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5df6:	6803      	ldr	r3, [r0, #0]
}
   b5df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.load();
   b5dfc:	685b      	ldr	r3, [r3, #4]
   b5dfe:	4718      	bx	r3

000b5e00 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b5e00:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5e02:	f7ff ffd5 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5e06:	6803      	ldr	r3, [r0, #0]
}
   b5e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5e0c:	68db      	ldr	r3, [r3, #12]
   b5e0e:	2100      	movs	r1, #0
   b5e10:	4718      	bx	r3
	...

000b5e14 <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b5e14:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b5e16:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5e1a:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5e1c:	6182      	str	r2, [r0, #24]
   b5e1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5e22:	6081      	str	r1, [r0, #8]
   b5e24:	61c2      	str	r2, [r0, #28]
   b5e26:	4907      	ldr	r1, [pc, #28]	; (b5e44 <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5e28:	4a07      	ldr	r2, [pc, #28]	; (b5e48 <_ZN17currentStatusDataC1Ev+0x34>)
   b5e2a:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5e2c:	f04f 0c48 	mov.w	ip, #72	; 0x48
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5e30:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5e32:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5e36:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5e38:	2101      	movs	r1, #1
   b5e3a:	4a04      	ldr	r2, [pc, #16]	; (b5e4c <_ZN17currentStatusDataC1Ev+0x38>)
   b5e3c:	8281      	strh	r1, [r0, #20]
   b5e3e:	6002      	str	r2, [r0, #0]
};
   b5e40:	4770      	bx	lr
   b5e42:	bf00      	nop
   b5e44:	20a99e74 	.word	0x20a99e74
   b5e48:	2003e3e4 	.word	0x2003e3e4
   b5e4c:	000c12c0 	.word	0x000c12c0

000b5e50 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b5e50:	b510      	push	{r4, lr}
    if (!_instance) {
   b5e52:	4c06      	ldr	r4, [pc, #24]	; (b5e6c <_ZN17currentStatusData8instanceEv+0x1c>)
   b5e54:	6823      	ldr	r3, [r4, #0]
   b5e56:	b93b      	cbnz	r3, b5e68 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5e58:	2070      	movs	r0, #112	; 0x70
   b5e5a:	f7fe f91c 	bl	b4096 <_Znwj>
   b5e5e:	4603      	mov	r3, r0
   b5e60:	b108      	cbz	r0, b5e66 <_ZN17currentStatusData8instanceEv+0x16>
   b5e62:	f7ff ffd7 	bl	b5e14 <_ZN17currentStatusDataC1Ev>
   b5e66:	6023      	str	r3, [r4, #0]
}
   b5e68:	6820      	ldr	r0, [r4, #0]
   b5e6a:	bd10      	pop	{r4, pc}
   b5e6c:	2003e3e0 	.word	0x2003e3e0

000b5e70 <_ZN17currentStatusData4loopEv>:
void currentStatusData::loop() {
   b5e70:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5e72:	f7ff ff9d 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b5e76:	6803      	ldr	r3, [r0, #0]
}
   b5e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5e7c:	68db      	ldr	r3, [r3, #12]
   b5e7e:	2100      	movs	r1, #0
   b5e80:	4718      	bx	r3
   b5e82:	0000      	movs	r0, r0
   b5e84:	0000      	movs	r0, r0
	...

000b5e88 <_ZNK17currentStatusData17get_stateOfChargeEv>:
double currentStatusData::get_stateOfCharge() const {
   b5e88:	b510      	push	{r4, lr}
   b5e8a:	4604      	mov	r4, r0
   b5e8c:	ed2d 8b02 	vpush	{d8}
   b5e90:	3004      	adds	r0, #4
   b5e92:	f7ff feef 	bl	b5c74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5e96:	68e3      	ldr	r3, [r4, #12]
   b5e98:	3b08      	subs	r3, #8
   b5e9a:	2b17      	cmp	r3, #23
   b5e9c:	d90c      	bls.n	b5eb8 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b5e9e:	68a3      	ldr	r3, [r4, #8]
   b5ea0:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b5ea4:	6860      	ldr	r0, [r4, #4]
   b5ea6:	f005 fedd 	bl	bbc64 <os_mutex_recursive_unlock>
}
   b5eaa:	eeb0 0a48 	vmov.f32	s0, s16
   b5eae:	eef0 0a68 	vmov.f32	s1, s17
   b5eb2:	ecbd 8b02 	vpop	{d8}
   b5eb6:	bd10      	pop	{r4, pc}
            T result = 0;
   b5eb8:	ed9f 8b01 	vldr	d8, [pc, #4]	; b5ec0 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b5ebc:	e7f2      	b.n	b5ea4 <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b5ebe:	bf00      	nop
	...

000b5ec8 <_ZN17currentStatusData17set_stateOfChargeEd>:
void currentStatusData::set_stateOfCharge(double value) {
   b5ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5eca:	4604      	mov	r4, r0
   b5ecc:	3004      	adds	r0, #4
   b5ece:	ec57 6b10 	vmov	r6, r7, d0
   b5ed2:	f7ff fecf 	bl	b5c74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5ed6:	68e3      	ldr	r3, [r4, #12]
   b5ed8:	3b08      	subs	r3, #8
   b5eda:	2b17      	cmp	r3, #23
   b5edc:	d912      	bls.n	b5f04 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5ede:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b5ee0:	4630      	mov	r0, r6
   b5ee2:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b5ee6:	4639      	mov	r1, r7
   b5ee8:	f00a f8f2 	bl	c00d0 <__aeabi_dcmpeq>
   b5eec:	b950      	cbnz	r0, b5f04 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b5eee:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b5ef2:	4620      	mov	r0, r4
   b5ef4:	68a5      	ldr	r5, [r4, #8]
   b5ef6:	f005 fdad 	bl	bba54 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5efa:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5efc:	6823      	ldr	r3, [r4, #0]
   b5efe:	4620      	mov	r0, r4
   b5f00:	691b      	ldr	r3, [r3, #16]
   b5f02:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5f04:	6860      	ldr	r0, [r4, #4]
}
   b5f06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5f0a:	f005 beab 	b.w	bbc64 <os_mutex_recursive_unlock>
	...

000b5f10 <_ZN10nodeIDDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b5f10:	2200      	movs	r2, #0
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b5f12:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5f16:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5f18:	6182      	str	r2, [r0, #24]
   b5f1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5f1e:	6081      	str	r1, [r0, #8]
   b5f20:	61c2      	str	r2, [r0, #28]
   b5f22:	4907      	ldr	r1, [pc, #28]	; (b5f40 <_ZN10nodeIDDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5f24:	4a07      	ldr	r2, [pc, #28]	; (b5f44 <_ZN10nodeIDDataC1Ev+0x34>)
   b5f26:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5f28:	f44f 6c82 	mov.w	ip, #1040	; 0x410
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5f2c:	2296      	movs	r2, #150	; 0x96
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5f2e:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5f32:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5f34:	2102      	movs	r1, #2
   b5f36:	4a04      	ldr	r2, [pc, #16]	; (b5f48 <_ZN10nodeIDDataC1Ev+0x38>)
   b5f38:	8281      	strh	r1, [r0, #20]
   b5f3a:	6002      	str	r2, [r0, #0]
};
   b5f3c:	4770      	bx	lr
   b5f3e:	bf00      	nop
   b5f40:	20a99e60 	.word	0x20a99e60
   b5f44:	2003e3e4 	.word	0x2003e3e4
   b5f48:	000c1268 	.word	0x000c1268

000b5f4c <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b5f4c:	b510      	push	{r4, lr}
    if (!_instance) {
   b5f4e:	4c07      	ldr	r4, [pc, #28]	; (b5f6c <_ZN10nodeIDData8instanceEv+0x20>)
   b5f50:	6823      	ldr	r3, [r4, #0]
   b5f52:	b943      	cbnz	r3, b5f66 <_ZN10nodeIDData8instanceEv+0x1a>
        _instance = new nodeIDData();
   b5f54:	f44f 6087 	mov.w	r0, #1080	; 0x438
   b5f58:	f7fe f89d 	bl	b4096 <_Znwj>
   b5f5c:	4603      	mov	r3, r0
   b5f5e:	b108      	cbz	r0, b5f64 <_ZN10nodeIDData8instanceEv+0x18>
   b5f60:	f7ff ffd6 	bl	b5f10 <_ZN10nodeIDDataC1Ev>
   b5f64:	6023      	str	r3, [r4, #0]
}
   b5f66:	6820      	ldr	r0, [r4, #0]
   b5f68:	bd10      	pop	{r4, pc}
   b5f6a:	bf00      	nop
   b5f6c:	2003e3d8 	.word	0x2003e3d8

000b5f70 <_ZN10nodeIDData5setupEv>:

void nodeIDData::setup() {
   b5f70:	b510      	push	{r4, lr}
    fram.begin();
   b5f72:	6a00      	ldr	r0, [r0, #32]
   b5f74:	f003 f894 	bl	b90a0 <_ZN6MB85RC5beginEv>
    nodeID.load();
   b5f78:	f7ff ffe8 	bl	b5f4c <_ZN10nodeIDData8instanceEv>
   b5f7c:	6803      	ldr	r3, [r0, #0]
}
   b5f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.load();
   b5f82:	685b      	ldr	r3, [r3, #4]
   b5f84:	4718      	bx	r3

000b5f86 <_ZN10nodeIDData4loopEv>:

void nodeIDData::loop() {
   b5f86:	b510      	push	{r4, lr}
    nodeID.flush(false);
   b5f88:	f7ff ffe0 	bl	b5f4c <_ZN10nodeIDData8instanceEv>
   b5f8c:	6803      	ldr	r3, [r0, #0]
}
   b5f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.flush(false);
   b5f92:	68db      	ldr	r3, [r3, #12]
   b5f94:	2100      	movs	r1, #0
   b5f96:	4718      	bx	r3

000b5f98 <_ZNK10nodeIDData14get_nodeIDJsonEv>:

String nodeIDData::get_nodeIDJson() const {
   b5f98:	b538      	push	{r3, r4, r5, lr}
   b5f9a:	4604      	mov	r4, r0
   b5f9c:	460d      	mov	r5, r1
	String result;
   b5f9e:	4906      	ldr	r1, [pc, #24]	; (b5fb8 <_ZNK10nodeIDData14get_nodeIDJsonEv+0x20>)
   b5fa0:	f008 fdeb 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), result);
   b5fa4:	4623      	mov	r3, r4
   b5fa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5faa:	2110      	movs	r1, #16
   b5fac:	4628      	mov	r0, r5
   b5fae:	f005 fcf8 	bl	bb9a2 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b5fb2:	4620      	mov	r0, r4
   b5fb4:	bd38      	pop	{r3, r4, r5, pc}
   b5fb6:	bf00      	nop
   b5fb8:	000c20fc 	.word	0x000c20fc

000b5fbc <_ZN10nodeIDData14set_nodeIDJsonEPKc>:

bool nodeIDData::set_nodeIDJson(const char *str) {
   b5fbc:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), str);
   b5fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5fc2:	2110      	movs	r1, #16
   b5fc4:	f005 bd5e 	b.w	bba84 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

000b5fc8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b5fc8:	b538      	push	{r3, r4, r5, lr}
   b5fca:	4604      	mov	r4, r0
   b5fcc:	3004      	adds	r0, #4
   b5fce:	460d      	mov	r5, r1
   b5fd0:	f7ff fe50 	bl	b5c74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5fd4:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5fd6:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5fd8:	3b01      	subs	r3, #1
   b5fda:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5fdc:	bf26      	itte	cs
   b5fde:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5fe0:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5fe2:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5fe4:	f005 fe3e 	bl	bbc64 <os_mutex_recursive_unlock>
        }
   b5fe8:	4628      	mov	r0, r5
   b5fea:	bd38      	pop	{r3, r4, r5, pc}

000b5fec <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b5fec:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b5fee:	2110      	movs	r1, #16
   b5ff0:	f7ff ffea 	bl	b5fc8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5ff4:	bd08      	pop	{r3, pc}

000b5ff6 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b5ff6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b5ff8:	2115      	movs	r1, #21
   b5ffa:	f7ff ffe5 	bl	b5fc8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5ffe:	bd08      	pop	{r3, pc}

000b6000 <_ZNK13sysStatusData16get_messageCountEv>:
uint8_t sysStatusData::get_messageCount() const {
   b6000:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, messageCount));
   b6002:	2116      	movs	r1, #22
   b6004:	f7ff ffe0 	bl	b5fc8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6008:	bd08      	pop	{r3, pc}

000b600a <_ZNK13sysStatusData12get_openTimeEv>:
uint8_t sysStatusData::get_openTime() const {
   b600a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, openTime));
   b600c:	2138      	movs	r1, #56	; 0x38
   b600e:	f7ff ffdb 	bl	b5fc8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6012:	bd08      	pop	{r3, pc}

000b6014 <_ZNK13sysStatusData13get_closeTimeEv>:
uint8_t sysStatusData::get_closeTime() const {
   b6014:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, closeTime));
   b6016:	2139      	movs	r1, #57	; 0x39
   b6018:	f7ff ffd6 	bl	b5fc8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b601c:	bd08      	pop	{r3, pc}

000b601e <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const {
   b601e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, sensorType));
   b6020:	213b      	movs	r1, #59	; 0x3b
   b6022:	f7ff ffd1 	bl	b5fc8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6026:	bd08      	pop	{r3, pc}

000b6028 <_ZNK17currentStatusData14get_nodeNumberEv>:
uint8_t currentStatusData::get_nodeNumber() const {
   b6028:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, nodeNumber));
   b602a:	2110      	movs	r1, #16
   b602c:	f7ff ffcc 	bl	b5fc8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6030:	bd08      	pop	{r3, pc}

000b6032 <_ZNK17currentStatusData18get_tempNodeNumberEv>:
uint8_t currentStatusData::get_tempNodeNumber() const {
   b6032:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, tempNodeNumber));
   b6034:	2111      	movs	r1, #17
   b6036:	f7ff ffc7 	bl	b5fc8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b603a:	bd08      	pop	{r3, pc}

000b603c <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b603c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b603e:	2112      	movs	r1, #18
   b6040:	f7ff ffc2 	bl	b5fc8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6044:	bd08      	pop	{r3, pc}

000b6046 <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b6046:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b6048:	2120      	movs	r1, #32
   b604a:	f7ff ffbd 	bl	b5fc8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b604e:	bd08      	pop	{r3, pc}

000b6050 <_ZNK17currentStatusData14get_resetCountEv>:
uint8_t currentStatusData::get_resetCount() const {
   b6050:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, resetCount));
   b6052:	2121      	movs	r1, #33	; 0x21
   b6054:	f7ff ffb8 	bl	b5fc8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6058:	bd08      	pop	{r3, pc}

000b605a <_ZNK17currentStatusData17get_messageNumberEv>:
uint8_t currentStatusData::get_messageNumber() const {
   b605a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageNumber));
   b605c:	2124      	movs	r1, #36	; 0x24
   b605e:	f7ff ffb3 	bl	b5fc8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6062:	bd08      	pop	{r3, pc}

000b6064 <_ZNK17currentStatusData17get_alertCodeNodeEv>:
uint8_t currentStatusData::get_alertCodeNode() const {
   b6064:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
   b6066:	2134      	movs	r1, #52	; 0x34
   b6068:	f7ff ffae 	bl	b5fc8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b606c:	bd08      	pop	{r3, pc}

000b606e <_ZNK17currentStatusData14get_sensorTypeEv>:
uint8_t currentStatusData::get_sensorType() const {
   b606e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, sensorType));
   b6070:	2141      	movs	r1, #65	; 0x41
   b6072:	f7ff ffa9 	bl	b5fc8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6076:	bd08      	pop	{r3, pc}

000b6078 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6078:	b570      	push	{r4, r5, r6, lr}
   b607a:	4604      	mov	r4, r0
   b607c:	3004      	adds	r0, #4
   b607e:	460d      	mov	r5, r1
   b6080:	4616      	mov	r6, r2
   b6082:	f7ff fdf7 	bl	b5c74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6086:	68e3      	ldr	r3, [r4, #12]
   b6088:	3b01      	subs	r3, #1
   b608a:	42ab      	cmp	r3, r5
   b608c:	d30d      	bcc.n	b60aa <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b608e:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6090:	5d5a      	ldrb	r2, [r3, r5]
   b6092:	42b2      	cmp	r2, r6
   b6094:	d009      	beq.n	b60aa <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b6096:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b6098:	4620      	mov	r0, r4
   b609a:	68a5      	ldr	r5, [r4, #8]
   b609c:	f005 fcda 	bl	bba54 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b60a0:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b60a2:	6823      	ldr	r3, [r4, #0]
   b60a4:	4620      	mov	r0, r4
   b60a6:	691b      	ldr	r3, [r3, #16]
   b60a8:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b60aa:	6860      	ldr	r0, [r4, #4]
        }
   b60ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b60b0:	f005 bdd8 	b.w	bbc64 <os_mutex_recursive_unlock>

000b60b4 <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b60b4:	b508      	push	{r3, lr}
   b60b6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b60b8:	2110      	movs	r1, #16
   b60ba:	f7ff ffdd 	bl	b6078 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b60be:	bd08      	pop	{r3, pc}

000b60c0 <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b60c0:	b508      	push	{r3, lr}
   b60c2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b60c4:	2115      	movs	r1, #21
   b60c6:	f7ff ffd7 	bl	b6078 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b60ca:	bd08      	pop	{r3, pc}

000b60cc <_ZN13sysStatusData16set_messageCountEh>:
void sysStatusData::set_messageCount(uint8_t value) {
   b60cc:	b508      	push	{r3, lr}
   b60ce:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, messageCount), value);
   b60d0:	2116      	movs	r1, #22
   b60d2:	f7ff ffd1 	bl	b6078 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b60d6:	bd08      	pop	{r3, pc}

000b60d8 <_ZN17currentStatusData14set_nodeNumberEh>:
void currentStatusData::set_nodeNumber(uint8_t value) {
   b60d8:	b508      	push	{r3, lr}
   b60da:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, nodeNumber), value);
   b60dc:	2110      	movs	r1, #16
   b60de:	f7ff ffcb 	bl	b6078 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b60e2:	bd08      	pop	{r3, pc}

000b60e4 <_ZN17currentStatusData18set_tempNodeNumberEh>:
void currentStatusData::set_tempNodeNumber(uint8_t value) {
   b60e4:	b508      	push	{r3, lr}
   b60e6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, tempNodeNumber), value);
   b60e8:	2111      	movs	r1, #17
   b60ea:	f7ff ffc5 	bl	b6078 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b60ee:	bd08      	pop	{r3, pc}

000b60f0 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b60f0:	b508      	push	{r3, lr}
   b60f2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b60f4:	2112      	movs	r1, #18
   b60f6:	f7ff ffbf 	bl	b6078 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b60fa:	bd08      	pop	{r3, pc}

000b60fc <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b60fc:	b508      	push	{r3, lr}
   b60fe:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b6100:	2120      	movs	r1, #32
   b6102:	f7ff ffb9 	bl	b6078 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6106:	bd08      	pop	{r3, pc}

000b6108 <_ZN17currentStatusData14set_resetCountEh>:
void currentStatusData::set_resetCount(uint8_t value) {
   b6108:	b508      	push	{r3, lr}
   b610a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, resetCount), value);
   b610c:	2121      	movs	r1, #33	; 0x21
   b610e:	f7ff ffb3 	bl	b6078 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6112:	bd08      	pop	{r3, pc}

000b6114 <_ZN17currentStatusData17set_messageNumberEh>:
void currentStatusData::set_messageNumber(uint8_t value) {
   b6114:	b508      	push	{r3, lr}
   b6116:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageNumber), value);
   b6118:	2124      	movs	r1, #36	; 0x24
   b611a:	f7ff ffad 	bl	b6078 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b611e:	bd08      	pop	{r3, pc}

000b6120 <_ZN17currentStatusData17set_alertCodeNodeEh>:
void currentStatusData::set_alertCodeNode(uint8_t value) {
   b6120:	b508      	push	{r3, lr}
   b6122:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b6124:	2134      	movs	r1, #52	; 0x34
   b6126:	f7ff ffa7 	bl	b6078 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b612a:	bd08      	pop	{r3, pc}

000b612c <_ZN17currentStatusData14set_sensorTypeEh>:
void currentStatusData::set_sensorType(uint8_t value) {
   b612c:	b508      	push	{r3, lr}
   b612e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, sensorType), value);
   b6130:	2141      	movs	r1, #65	; 0x41
   b6132:	f7ff ffa1 	bl	b6078 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6136:	bd08      	pop	{r3, pc}

000b6138 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b6138:	b538      	push	{r3, r4, r5, lr}
   b613a:	4604      	mov	r4, r0
   b613c:	3004      	adds	r0, #4
   b613e:	460d      	mov	r5, r1
   b6140:	f7ff fd98 	bl	b5c74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6144:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6146:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6148:	3b02      	subs	r3, #2
   b614a:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b614c:	bf26      	itte	cs
   b614e:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6150:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b6152:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6154:	f005 fd86 	bl	bbc64 <os_mutex_recursive_unlock>
        }
   b6158:	4628      	mov	r0, r5
   b615a:	bd38      	pop	{r3, r4, r5, pc}

000b615c <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b615c:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b615e:	2112      	movs	r1, #18
   b6160:	f7ff ffea 	bl	b6138 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6164:	bd08      	pop	{r3, pc}

000b6166 <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b6166:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b6168:	212a      	movs	r1, #42	; 0x2a
   b616a:	f7ff ffe5 	bl	b6138 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b616e:	bd08      	pop	{r3, pc}

000b6170 <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>:
uint16_t sysStatusData::get_updatedFrequencyMinutes() const {
   b6170:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,updatedFrequencyMinutes));
   b6172:	212c      	movs	r1, #44	; 0x2c
   b6174:	f7ff ffe0 	bl	b6138 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6178:	bd08      	pop	{r3, pc}

000b617a <_ZNK13sysStatusData8get_RSSIEv>:
uint16_t sysStatusData::get_RSSI() const {
   b617a:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,RSSI));
   b617c:	213c      	movs	r1, #60	; 0x3c
   b617e:	f7ff ffdb 	bl	b6138 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6182:	bd08      	pop	{r3, pc}

000b6184 <_ZNK17currentStatusData8get_RSSIEv>:
uint16_t currentStatusData::get_RSSI() const {
   b6184:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, RSSI));
   b6186:	2122      	movs	r1, #34	; 0x22
   b6188:	f7ff ffd6 	bl	b6138 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b618c:	bd08      	pop	{r3, pc}

000b618e <_ZNK17currentStatusData15get_hourlyCountEv>:
uint16_t currentStatusData::get_hourlyCount() const {
   b618e:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b6190:	2130      	movs	r1, #48	; 0x30
   b6192:	f7ff ffd1 	bl	b6138 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6196:	bd08      	pop	{r3, pc}

000b6198 <_ZNK17currentStatusData14get_dailyCountEv>:
uint16_t currentStatusData::get_dailyCount() const {
   b6198:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b619a:	2132      	movs	r1, #50	; 0x32
   b619c:	f7ff ffcc 	bl	b6138 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b61a0:	bd08      	pop	{r3, pc}

000b61a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b61a2:	b570      	push	{r4, r5, r6, lr}
   b61a4:	4604      	mov	r4, r0
   b61a6:	3004      	adds	r0, #4
   b61a8:	460d      	mov	r5, r1
   b61aa:	4616      	mov	r6, r2
   b61ac:	f7ff fd62 	bl	b5c74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b61b0:	68e3      	ldr	r3, [r4, #12]
   b61b2:	3b02      	subs	r3, #2
   b61b4:	42ab      	cmp	r3, r5
   b61b6:	d30d      	bcc.n	b61d4 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b61b8:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b61ba:	5b5a      	ldrh	r2, [r3, r5]
   b61bc:	42b2      	cmp	r2, r6
   b61be:	d009      	beq.n	b61d4 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b61c0:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b61c2:	4620      	mov	r0, r4
   b61c4:	68a5      	ldr	r5, [r4, #8]
   b61c6:	f005 fc45 	bl	bba54 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b61ca:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b61cc:	6823      	ldr	r3, [r4, #0]
   b61ce:	4620      	mov	r0, r4
   b61d0:	691b      	ldr	r3, [r3, #16]
   b61d2:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b61d4:	6860      	ldr	r0, [r4, #4]
        }
   b61d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b61da:	f005 bd43 	b.w	bbc64 <os_mutex_recursive_unlock>

000b61de <_ZN13sysStatusData15set_magicNumberEt>:
void sysStatusData::set_magicNumber(uint16_t value) {
   b61de:	b508      	push	{r3, lr}
   b61e0:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, magicNumber), value);
   b61e2:	2112      	movs	r1, #18
   b61e4:	f7ff ffdd 	bl	b61a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b61e8:	bd08      	pop	{r3, pc}

000b61ea <_ZN13sysStatusData26set_lastConnectionDurationEt>:
void sysStatusData::set_lastConnectionDuration(uint16_t value) {
   b61ea:	b508      	push	{r3, lr}
   b61ec:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData,lastConnectionDuration), value);
   b61ee:	2128      	movs	r1, #40	; 0x28
   b61f0:	f7ff ffd7 	bl	b61a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b61f4:	bd08      	pop	{r3, pc}

000b61f6 <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b61f6:	b508      	push	{r3, lr}
   b61f8:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b61fa:	212a      	movs	r1, #42	; 0x2a
   b61fc:	f7ff ffd1 	bl	b61a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6200:	bd08      	pop	{r3, pc}

000b6202 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>:
void sysStatusData::set_updatedFrequencyMinutes(uint16_t value) {
   b6202:	b508      	push	{r3, lr}
   b6204:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, updatedFrequencyMinutes), value);
   b6206:	212c      	movs	r1, #44	; 0x2c
   b6208:	f7ff ffcb 	bl	b61a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b620c:	bd08      	pop	{r3, pc}

000b620e <_ZN13sysStatusData8set_RSSIEt>:
void sysStatusData::set_RSSI(uint16_t value) {
   b620e:	b508      	push	{r3, lr}
   b6210:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, RSSI), value);
   b6212:	213c      	movs	r1, #60	; 0x3c
   b6214:	f7ff ffc5 	bl	b61a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6218:	bd08      	pop	{r3, pc}

000b621a <_ZN17currentStatusData8set_RSSIEt>:
void currentStatusData::set_RSSI(uint16_t value) {
   b621a:	b508      	push	{r3, lr}
   b621c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, RSSI), value);
   b621e:	2122      	movs	r1, #34	; 0x22
   b6220:	f7ff ffbf 	bl	b61a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6224:	bd08      	pop	{r3, pc}

000b6226 <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b6226:	b508      	push	{r3, lr}
   b6228:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b622a:	2130      	movs	r1, #48	; 0x30
   b622c:	f7ff ffb9 	bl	b61a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6230:	bd08      	pop	{r3, pc}

000b6232 <_ZN17currentStatusData14set_dailyCountEt>:
void currentStatusData::set_dailyCount(uint16_t value) {
   b6232:	b508      	push	{r3, lr}
   b6234:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b6236:	2132      	movs	r1, #50	; 0x32
   b6238:	f7ff ffb3 	bl	b61a2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b623c:	bd08      	pop	{r3, pc}

000b623e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b623e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6240:	4604      	mov	r4, r0
   b6242:	3004      	adds	r0, #4
   b6244:	460d      	mov	r5, r1
   b6246:	f7ff fd15 	bl	b5c74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b624a:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b624c:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b624e:	3b08      	subs	r3, #8
   b6250:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6252:	bf23      	ittte	cs
   b6254:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b6256:	1949      	addcs	r1, r1, r5
   b6258:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b625c:	2600      	movcc	r6, #0
   b625e:	bf38      	it	cc
   b6260:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b6262:	f005 fcff 	bl	bbc64 <os_mutex_recursive_unlock>
        }
   b6266:	4630      	mov	r0, r6
   b6268:	4639      	mov	r1, r7
   b626a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b626c <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b626c:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b626e:	2120      	movs	r1, #32
   b6270:	f7ff ffe5 	bl	b623e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b6274:	bd08      	pop	{r3, pc}

000b6276 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6278:	4604      	mov	r4, r0
   b627a:	3004      	adds	r0, #4
   b627c:	460d      	mov	r5, r1
   b627e:	461e      	mov	r6, r3
   b6280:	4617      	mov	r7, r2
   b6282:	f7ff fcf7 	bl	b5c74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6286:	68e3      	ldr	r3, [r4, #12]
   b6288:	3b08      	subs	r3, #8
   b628a:	42ab      	cmp	r3, r5
   b628c:	d312      	bcc.n	b62b4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b628e:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b6290:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b6292:	5958      	ldr	r0, [r3, r5]
   b6294:	6851      	ldr	r1, [r2, #4]
   b6296:	42b1      	cmp	r1, r6
   b6298:	bf08      	it	eq
   b629a:	42b8      	cmpeq	r0, r7
   b629c:	d00a      	beq.n	b62b4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b629e:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b62a0:	4620      	mov	r0, r4
                        *(T *)p = value;
   b62a2:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b62a4:	68a5      	ldr	r5, [r4, #8]
   b62a6:	f005 fbd5 	bl	bba54 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b62aa:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b62ac:	6823      	ldr	r3, [r4, #0]
   b62ae:	4620      	mov	r0, r4
   b62b0:	691b      	ldr	r3, [r3, #16]
   b62b2:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b62b4:	6860      	ldr	r0, [r4, #4]
        }
   b62b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b62ba:	f005 bcd3 	b.w	bbc64 <os_mutex_recursive_unlock>

000b62be <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b62be:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b62c0:	2120      	movs	r1, #32
   b62c2:	f7ff ffd8 	bl	b6276 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b62c6:	bd08      	pop	{r3, pc}

000b62c8 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b62c8:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b62ca:	2128      	movs	r1, #40	; 0x28
   b62cc:	f7ff ffd3 	bl	b6276 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b62d0:	bd08      	pop	{r3, pc}
	...

000b62d4 <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   b62d4:	b510      	push	{r4, lr}
  Log.info("A new day - resetting everything");
   b62d6:	4912      	ldr	r1, [pc, #72]	; (b6320 <_Z15resetEverythingv+0x4c>)
   b62d8:	4812      	ldr	r0, [pc, #72]	; (b6324 <_Z15resetEverythingv+0x50>)
   b62da:	f7fd ff30 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b62de:	f7ff fdb7 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b62e2:	2100      	movs	r1, #0
   b62e4:	f7ff ffa5 	bl	b6232 <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b62e8:	f7ff fdb2 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b62ec:	2100      	movs	r1, #0
   b62ee:	f7ff ff9a 	bl	b6226 <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b62f2:	f7ff fdad 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b62f6:	4604      	mov	r4, r0
   b62f8:	f008 ffa7 	bl	bf24a <_ZN9TimeClass3nowEv>
   b62fc:	4602      	mov	r2, r0
   b62fe:	17c3      	asrs	r3, r0, #31
   b6300:	4620      	mov	r0, r4
   b6302:	f7ff ffe1 	bl	b62c8 <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b6306:	f7ff fd53 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b630a:	2100      	movs	r1, #0
   b630c:	f7ff fed8 	bl	b60c0 <_ZN13sysStatusData14set_resetCountEh>
  sysStatus.set_messageCount(0);
   b6310:	f7ff fd4e 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
}
   b6314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_messageCount(0);
   b6318:	2100      	movs	r1, #0
   b631a:	f7ff bed7 	b.w	b60cc <_ZN13sysStatusData16set_messageCountEh>
   b631e:	bf00      	nop
   b6320:	000c1222 	.word	0x000c1222
   b6324:	2003e654 	.word	0x2003e654

000b6328 <_ZN17currentStatusData22set_alertTimestampNodeEx>:
void currentStatusData::set_alertTimestampNode(time_t value) {
   b6328:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b632a:	2138      	movs	r1, #56	; 0x38
   b632c:	f7ff ffa3 	bl	b6276 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6330:	bd08      	pop	{r3, pc}

000b6332 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b6332:	b538      	push	{r3, r4, r5, lr}
   b6334:	4604      	mov	r4, r0
   b6336:	3004      	adds	r0, #4
   b6338:	460d      	mov	r5, r1
   b633a:	f7ff fc9b 	bl	b5c74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b633e:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6340:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6342:	3b01      	subs	r3, #1
   b6344:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6346:	bf26      	itte	cs
   b6348:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b634a:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b634c:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b634e:	f005 fc89 	bl	bbc64 <os_mutex_recursive_unlock>
        }
   b6352:	4628      	mov	r0, r5
   b6354:	bd38      	pop	{r3, r4, r5, pc}

000b6356 <_ZNK17currentStatusData13get_openHoursEv>:
bool currentStatusData::get_openHours() const {
   b6356:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(CurrentData, openHours));
   b6358:	2140      	movs	r1, #64	; 0x40
   b635a:	f7ff ffea 	bl	b6332 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b635e:	bd08      	pop	{r3, pc}

000b6360 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6360:	b570      	push	{r4, r5, r6, lr}
   b6362:	4604      	mov	r4, r0
   b6364:	3004      	adds	r0, #4
   b6366:	460d      	mov	r5, r1
   b6368:	4616      	mov	r6, r2
   b636a:	f7ff fc83 	bl	b5c74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b636e:	68e3      	ldr	r3, [r4, #12]
   b6370:	3b01      	subs	r3, #1
   b6372:	42ab      	cmp	r3, r5
   b6374:	d30d      	bcc.n	b6392 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6376:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6378:	5d5a      	ldrb	r2, [r3, r5]
   b637a:	42b2      	cmp	r2, r6
   b637c:	d009      	beq.n	b6392 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                        *(T *)p = value;
   b637e:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b6380:	4620      	mov	r0, r4
   b6382:	68a5      	ldr	r5, [r4, #8]
   b6384:	f005 fb66 	bl	bba54 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6388:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b638a:	6823      	ldr	r3, [r4, #0]
   b638c:	4620      	mov	r0, r4
   b638e:	691b      	ldr	r3, [r3, #16]
   b6390:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b6392:	6860      	ldr	r0, [r4, #4]
        }
   b6394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6398:	f005 bc64 	b.w	bbc64 <os_mutex_recursive_unlock>

000b639c <_ZN17currentStatusData13set_openHoursEb>:
void currentStatusData::set_openHours(bool value) {
   b639c:	b508      	push	{r3, lr}
   b639e:	460a      	mov	r2, r1
    setValue<bool>(offsetof(CurrentData, openHours), value);
   b63a0:	2140      	movs	r1, #64	; 0x40
   b63a2:	f7ff ffdd 	bl	b6360 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b63a6:	bd08      	pop	{r3, pc}

000b63a8 <_GLOBAL__sub_I_fram>:
   b63a8:	4b08      	ldr	r3, [pc, #32]	; (b63cc <_GLOBAL__sub_I_fram+0x24>)
   b63aa:	2201      	movs	r2, #1
}
   b63ac:	b510      	push	{r4, lr}
   b63ae:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);   
   b63b0:	f009 f9d4 	bl	bf75c <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b63b4:	4c06      	ldr	r4, [pc, #24]	; (b63d0 <_GLOBAL__sub_I_fram+0x28>)
   b63b6:	4601      	mov	r1, r0
   b63b8:	2300      	movs	r3, #0
   b63ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b63be:	4620      	mov	r0, r4
   b63c0:	f002 fe64 	bl	b908c <_ZN6MB85RCC1ER7TwoWireji>
   b63c4:	4b03      	ldr	r3, [pc, #12]	; (b63d4 <_GLOBAL__sub_I_fram+0x2c>)
   b63c6:	6023      	str	r3, [r4, #0]
}
   b63c8:	bd10      	pop	{r4, pc}
   b63ca:	bf00      	nop
   b63cc:	2003e3d5 	.word	0x2003e3d5
   b63d0:	2003e3e4 	.word	0x2003e3e4
   b63d4:	000c124c 	.word	0x000c124c

000b63d8 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b63d8:	4770      	bx	lr

000b63da <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b63da:	6a00      	ldr	r0, [r0, #32]
   b63dc:	6803      	ldr	r3, [r0, #0]
   b63de:	68db      	ldr	r3, [r3, #12]
   b63e0:	4718      	bx	r3

000b63e2 <_ZN18Particle_FunctionsD1Ev>:

Particle_Functions::Particle_Functions() {
}

Particle_Functions::~Particle_Functions() {
}
   b63e2:	4770      	bx	lr

000b63e4 <_ZN18Particle_FunctionsD0Ev>:
Particle_Functions::~Particle_Functions() {
   b63e4:	b510      	push	{r4, lr}
}
   b63e6:	2104      	movs	r1, #4
Particle_Functions::~Particle_Functions() {
   b63e8:	4604      	mov	r4, r0
}
   b63ea:	f7fd fe58 	bl	b409e <_ZdlPvj>
   b63ee:	4620      	mov	r0, r4
   b63f0:	bd10      	pop	{r4, pc}

000b63f2 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b63f2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
   b63f4:	6802      	ldr	r2, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b63f6:	6853      	ldr	r3, [r2, #4]
   b63f8:	6890      	ldr	r0, [r2, #8]
   b63fa:	6814      	ldr	r4, [r2, #0]
   b63fc:	105e      	asrs	r6, r3, #1
   b63fe:	eb00 0563 	add.w	r5, r0, r3, asr #1
   b6402:	07db      	lsls	r3, r3, #31
   b6404:	bf48      	it	mi
   b6406:	5983      	ldrmi	r3, [r0, r6]
   b6408:	4668      	mov	r0, sp
   b640a:	bf48      	it	mi
   b640c:	591c      	ldrmi	r4, [r3, r4]
   b640e:	f008 fbe5 	bl	bebdc <_ZN6StringC1EOS_>
   b6412:	4669      	mov	r1, sp
   b6414:	4628      	mov	r0, r5
   b6416:	47a0      	blx	r4
   b6418:	4604      	mov	r4, r0
   b641a:	4668      	mov	r0, sp
   b641c:	f008 fb62 	bl	beae4 <_ZN6StringD1Ev>
      }
   b6420:	4620      	mov	r0, r4
   b6422:	b004      	add	sp, #16
   b6424:	bd70      	pop	{r4, r5, r6, pc}

000b6426 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6426:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6428:	b538      	push	{r3, r4, r5, lr}
   b642a:	4604      	mov	r4, r0
	switch (__op)
   b642c:	d102      	bne.n	b6434 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b642e:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6430:	6023      	str	r3, [r4, #0]
	}
   b6432:	e003      	b.n	b643c <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
	  switch (__op)
   b6434:	2a02      	cmp	r2, #2
   b6436:	d003      	beq.n	b6440 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
   b6438:	2a03      	cmp	r2, #3
   b643a:	d00d      	beq.n	b6458 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x32>
      }
   b643c:	2000      	movs	r0, #0
   b643e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6440:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b6442:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6444:	f7fd fe27 	bl	b4096 <_Znwj>
   b6448:	4603      	mov	r3, r0
   b644a:	2800      	cmp	r0, #0
   b644c:	d0f0      	beq.n	b6430 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
   b644e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6452:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b6456:	e7eb      	b.n	b6430 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6458:	6800      	ldr	r0, [r0, #0]
   b645a:	2800      	cmp	r0, #0
   b645c:	d0ee      	beq.n	b643c <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   b645e:	210c      	movs	r1, #12
   b6460:	f7fd fe1d 	bl	b409e <_ZdlPvj>
   b6464:	e7ea      	b.n	b643c <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
	...

000b6468 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b6468:	4b0a      	ldr	r3, [pc, #40]	; (b6494 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b646a:	b510      	push	{r4, lr}
   b646c:	4604      	mov	r4, r0
   b646e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b6470:	f007 f9ac 	bl	bd7cc <_ZN5spark10LogManager8instanceEv>
   b6474:	4621      	mov	r1, r4
   b6476:	f007 fbb0 	bl	bdbda <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b647a:	f008 ffcd 	bl	bf418 <_Z16_fetch_usbserialv>
   b647e:	f008 ffbd 	bl	bf3fc <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b6482:	4620      	mov	r0, r4
   b6484:	4b04      	ldr	r3, [pc, #16]	; (b6498 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b6486:	f840 3b04 	str.w	r3, [r0], #4
   b648a:	f007 fa41 	bl	bd910 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b648e:	4620      	mov	r0, r4
   b6490:	bd10      	pop	{r4, pc}
   b6492:	bf00      	nop
   b6494:	000c1460 	.word	0x000c1460
   b6498:	000c1448 	.word	0x000c1448

000b649c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b649c:	b510      	push	{r4, lr}
   b649e:	4604      	mov	r4, r0
    }
   b64a0:	f7ff ffe2 	bl	b6468 <_ZN5spark16SerialLogHandlerD1Ev>
   b64a4:	4620      	mov	r0, r4
   b64a6:	2124      	movs	r1, #36	; 0x24
   b64a8:	f7fd fdf9 	bl	b409e <_ZdlPvj>
   b64ac:	4620      	mov	r0, r4
   b64ae:	bd10      	pop	{r4, pc}

000b64b0 <_ZN18Particle_Functions12setFrequencyE6String>:
    // Put your code to run during the application thread loop here
}


int Particle_Functions::setFrequency(String command)
{
   b64b0:	b510      	push	{r4, lr}
   b64b2:	460b      	mov	r3, r1
   b64b4:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b64b6:	6818      	ldr	r0, [r3, #0]
   b64b8:	220a      	movs	r2, #10
   b64ba:	a903      	add	r1, sp, #12
   b64bc:	f00a f8be 	bl	c063c <strtol>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b64c0:	2878      	cmp	r0, #120	; 0x78
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b64c2:	4604      	mov	r4, r0
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b64c4:	d834      	bhi.n	b6530 <_ZN18Particle_Functions12setFrequencyE6String+0x80>
  sysStatus.set_updatedFrequencyMinutes(tempTime);
   b64c6:	f7ff fc73 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b64ca:	b2a1      	uxth	r1, r4
   b64cc:	f7ff fe99 	bl	b6202 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",sysStatus.get_updatedFrequencyMinutes());
   b64d0:	f7ff fc6e 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b64d4:	f7ff fe4c 	bl	b6170 <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b64d8:	4a17      	ldr	r2, [pc, #92]	; (b6538 <_ZN18Particle_Functions12setFrequencyE6String+0x88>)
   b64da:	4603      	mov	r3, r0
   b64dc:	f44f 7180 	mov.w	r1, #256	; 0x100
   b64e0:	a806      	add	r0, sp, #24
   b64e2:	f005 ffb3 	bl	bc44c <snprintf>
  Log.info(data);
   b64e6:	4815      	ldr	r0, [pc, #84]	; (b653c <_ZN18Particle_Functions12setFrequencyE6String+0x8c>)
   b64e8:	a906      	add	r1, sp, #24
   b64ea:	f7fd fe28 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b64ee:	f005 fee5 	bl	bc2bc <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   b64f2:	b1d8      	cbz	r0, b652c <_ZN18Particle_Functions12setFrequencyE6String+0x7c>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b64f4:	4b12      	ldr	r3, [pc, #72]	; (b6540 <_ZN18Particle_Functions12setFrequencyE6String+0x90>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b64f6:	4913      	ldr	r1, [pc, #76]	; (b6544 <_ZN18Particle_Functions12setFrequencyE6String+0x94>)
   b64f8:	781b      	ldrb	r3, [r3, #0]
   b64fa:	f88d 3000 	strb.w	r3, [sp]
   b64fe:	aa06      	add	r2, sp, #24
   b6500:	233c      	movs	r3, #60	; 0x3c
   b6502:	a804      	add	r0, sp, #16
   b6504:	f006 fac6 	bl	bca94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   b6508:	9c05      	ldr	r4, [sp, #20]
   b650a:	b17c      	cbz	r4, b652c <_ZN18Particle_Functions12setFrequencyE6String+0x7c>
      if (--_M_use_count == 0)
   b650c:	6863      	ldr	r3, [r4, #4]
   b650e:	3b01      	subs	r3, #1
   b6510:	6063      	str	r3, [r4, #4]
   b6512:	b95b      	cbnz	r3, b652c <_ZN18Particle_Functions12setFrequencyE6String+0x7c>
          _M_dispose();
   b6514:	6823      	ldr	r3, [r4, #0]
   b6516:	4620      	mov	r0, r4
   b6518:	689b      	ldr	r3, [r3, #8]
   b651a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b651c:	68a3      	ldr	r3, [r4, #8]
   b651e:	3b01      	subs	r3, #1
   b6520:	60a3      	str	r3, [r4, #8]
   b6522:	b91b      	cbnz	r3, b652c <_ZN18Particle_Functions12setFrequencyE6String+0x7c>
            _M_destroy();
   b6524:	6823      	ldr	r3, [r4, #0]
   b6526:	4620      	mov	r0, r4
   b6528:	68db      	ldr	r3, [r3, #12]
   b652a:	4798      	blx	r3
  return 1;
   b652c:	2001      	movs	r0, #1
   b652e:	e000      	b.n	b6532 <_ZN18Particle_Functions12setFrequencyE6String+0x82>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b6530:	2000      	movs	r0, #0
}
   b6532:	b046      	add	sp, #280	; 0x118
   b6534:	bd10      	pop	{r4, pc}
   b6536:	bf00      	nop
   b6538:	000c12e4 	.word	0x000c12e4
   b653c:	2003e654 	.word	0x2003e654
   b6540:	2003e400 	.word	0x2003e400
   b6544:	000c1324 	.word	0x000c1324

000b6548 <_ZN18Particle_Functions8instanceEv>:
Particle_Functions &Particle_Functions::instance() {
   b6548:	b510      	push	{r4, lr}
    if (!_instance) {
   b654a:	4c06      	ldr	r4, [pc, #24]	; (b6564 <_ZN18Particle_Functions8instanceEv+0x1c>)
   b654c:	6823      	ldr	r3, [r4, #0]
   b654e:	b933      	cbnz	r3, b655e <_ZN18Particle_Functions8instanceEv+0x16>
        _instance = new Particle_Functions();
   b6550:	2004      	movs	r0, #4
   b6552:	f7fd fda0 	bl	b4096 <_Znwj>
   b6556:	b108      	cbz	r0, b655c <_ZN18Particle_Functions8instanceEv+0x14>
Particle_Functions::Particle_Functions() {
   b6558:	4b03      	ldr	r3, [pc, #12]	; (b6568 <_ZN18Particle_Functions8instanceEv+0x20>)
   b655a:	6003      	str	r3, [r0, #0]
        _instance = new Particle_Functions();
   b655c:	6020      	str	r0, [r4, #0]
}
   b655e:	6820      	ldr	r0, [r4, #0]
   b6560:	bd10      	pop	{r4, pc}
   b6562:	bf00      	nop
   b6564:	2003e404 	.word	0x2003e404
   b6568:	000c1478 	.word	0x000c1478

000b656c <_ZN18Particle_Functions5setupEv>:
void Particle_Functions::setup() {
   b656c:	b530      	push	{r4, r5, lr}
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b656e:	4920      	ldr	r1, [pc, #128]	; (b65f0 <_ZN18Particle_Functions5setupEv+0x84>)
void Particle_Functions::setup() {
   b6570:	b085      	sub	sp, #20
   b6572:	4604      	mov	r4, r0
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6574:	481f      	ldr	r0, [pc, #124]	; (b65f4 <_ZN18Particle_Functions5setupEv+0x88>)
   b6576:	f7fd fde2 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    Particle.variable("Reporting Frequency", sysStatus.get_frequencyMinutes());
   b657a:	f7ff fc19 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b657e:	f7ff fdf2 	bl	b6166 <_ZNK13sysStatusData20get_frequencyMinutesEv>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b6582:	2300      	movs	r3, #0
        return _variable(name, std::forward<ArgsT>(args)...);
   b6584:	9000      	str	r0, [sp, #0]
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b6586:	2202      	movs	r2, #2
   b6588:	481b      	ldr	r0, [pc, #108]	; (b65f8 <_ZN18Particle_Functions5setupEv+0x8c>)
   b658a:	4669      	mov	r1, sp
   b658c:	f005 fe76 	bl	bc27c <spark_variable>
    _Function_base() : _M_manager(nullptr) { }
   b6590:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6592:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b6594:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6596:	f7fd fd7e 	bl	b4096 <_Znwj>
   b659a:	b118      	cbz	r0, b65a4 <_ZN18Particle_Functions5setupEv+0x38>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b659c:	4b17      	ldr	r3, [pc, #92]	; (b65fc <_ZN18Particle_Functions5setupEv+0x90>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b659e:	6084      	str	r4, [r0, #8]
   b65a0:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b65a4:	4b16      	ldr	r3, [pc, #88]	; (b6600 <_ZN18Particle_Functions5setupEv+0x94>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b65a6:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
   b65a8:	9303      	str	r3, [sp, #12]
            auto wrapper = new user_std_function_int_str_t(func);
   b65aa:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   b65ac:	4b15      	ldr	r3, [pc, #84]	; (b6604 <_ZN18Particle_Functions5setupEv+0x98>)
   b65ae:	9302      	str	r3, [sp, #8]
   b65b0:	f7fd fd71 	bl	b4096 <_Znwj>
   b65b4:	4604      	mov	r4, r0
   b65b6:	b178      	cbz	r0, b65d8 <_ZN18Particle_Functions5setupEv+0x6c>
    _Function_base() : _M_manager(nullptr) { }
   b65b8:	2300      	movs	r3, #0
   b65ba:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b65bc:	9b02      	ldr	r3, [sp, #8]
      if (static_cast<bool>(__x))
   b65be:	b133      	cbz	r3, b65ce <_ZN18Particle_Functions5setupEv+0x62>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b65c0:	2202      	movs	r2, #2
   b65c2:	4669      	mov	r1, sp
   b65c4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b65c6:	9b03      	ldr	r3, [sp, #12]
   b65c8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b65ca:	9b02      	ldr	r3, [sp, #8]
   b65cc:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
   b65ce:	4a0e      	ldr	r2, [pc, #56]	; (b6608 <_ZN18Particle_Functions5setupEv+0x9c>)
   b65d0:	480e      	ldr	r0, [pc, #56]	; (b660c <_ZN18Particle_Functions5setupEv+0xa0>)
   b65d2:	4621      	mov	r1, r4
   b65d4:	f006 f94d 	bl	bc872 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
   b65d8:	9b02      	ldr	r3, [sp, #8]
   b65da:	b11b      	cbz	r3, b65e4 <_ZN18Particle_Functions5setupEv+0x78>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b65dc:	4669      	mov	r1, sp
   b65de:	2203      	movs	r2, #3
   b65e0:	4608      	mov	r0, r1
   b65e2:	4798      	blx	r3
}
   b65e4:	b005      	add	sp, #20
   b65e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    takeMeasurements();                               // Initialize sensor values
   b65ea:	f000 badb 	b.w	b6ba4 <_Z16takeMeasurementsv>
   b65ee:	bf00      	nop
   b65f0:	000c1329 	.word	0x000c1329
   b65f4:	2003e654 	.word	0x2003e654
   b65f8:	000c1357 	.word	0x000c1357
   b65fc:	000b64b1 	.word	0x000b64b1
   b6600:	000b63f3 	.word	0x000b63f3
   b6604:	000b6427 	.word	0x000b6427
   b6608:	000c136b 	.word	0x000c136b
   b660c:	000bc84b 	.word	0x000bc84b

000b6610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6610:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6612:	e9d0 5300 	ldrd	r5, r3, [r0]
   b6616:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6618:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b661a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b661e:	42ae      	cmp	r6, r5
   b6620:	d004      	beq.n	b662c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b6622:	4628      	mov	r0, r5
   b6624:	f008 fa5e 	bl	beae4 <_ZN6StringD1Ev>
   b6628:	3514      	adds	r5, #20
   b662a:	e7f8      	b.n	b661e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b662c:	6820      	ldr	r0, [r4, #0]
   b662e:	f005 feed 	bl	bc40c <free>
    AllocatorT::free(data_);
}
   b6632:	4620      	mov	r0, r4
   b6634:	bd70      	pop	{r4, r5, r6, pc}

000b6636 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6636:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b663a:	4604      	mov	r4, r0
   b663c:	460d      	mov	r5, r1
   b663e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6640:	d916      	bls.n	b6670 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b6642:	4290      	cmp	r0, r2
   b6644:	d215      	bcs.n	b6672 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b6646:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b664a:	1a75      	subs	r5, r6, r1
   b664c:	f1a1 0714 	sub.w	r7, r1, #20
   b6650:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6652:	42b7      	cmp	r7, r6
   b6654:	d01c      	beq.n	b6690 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b6656:	b12c      	cbz	r4, b6664 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b6658:	4631      	mov	r1, r6
   b665a:	4620      	mov	r0, r4
   b665c:	f008 fabe 	bl	bebdc <_ZN6StringC1EOS_>
   b6660:	7c33      	ldrb	r3, [r6, #16]
   b6662:	7423      	strb	r3, [r4, #16]
   b6664:	4630      	mov	r0, r6
   b6666:	f008 fa3d 	bl	beae4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b666a:	3e14      	subs	r6, #20
   b666c:	3c14      	subs	r4, #20
   b666e:	e7f0      	b.n	b6652 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b6670:	d00e      	beq.n	b6690 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b6672:	42b5      	cmp	r5, r6
   b6674:	d00c      	beq.n	b6690 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b6676:	b12c      	cbz	r4, b6684 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b6678:	4629      	mov	r1, r5
   b667a:	4620      	mov	r0, r4
   b667c:	f008 faae 	bl	bebdc <_ZN6StringC1EOS_>
   b6680:	7c2b      	ldrb	r3, [r5, #16]
   b6682:	7423      	strb	r3, [r4, #16]
   b6684:	4628      	mov	r0, r5
   b6686:	f008 fa2d 	bl	beae4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b668a:	3514      	adds	r5, #20
   b668c:	3414      	adds	r4, #20
   b668e:	e7f0      	b.n	b6672 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b6690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b6696:	2300      	movs	r3, #0
   b6698:	e9c0 3300 	strd	r3, r3, [r0]
   b669c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b669e:	684f      	ldr	r7, [r1, #4]
   b66a0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b66a2:	4604      	mov	r4, r0
   b66a4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b66a6:	dd23      	ble.n	b66f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b66a8:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b66ac:	fb08 f007 	mul.w	r0, r8, r7
   b66b0:	f005 fea4 	bl	bc3fc <malloc>
            if (!d) {
   b66b4:	4605      	mov	r5, r0
   b66b6:	b1d8      	cbz	r0, b66f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b66b8:	e9d4 1200 	ldrd	r1, r2, [r4]
   b66bc:	fb08 1202 	mla	r2, r8, r2, r1
   b66c0:	f7ff ffb9 	bl	b6636 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b66c4:	6820      	ldr	r0, [r4, #0]
   b66c6:	f005 fea1 	bl	bc40c <free>
        data_ = d;
   b66ca:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b66cc:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b66ce:	e9d6 7300 	ldrd	r7, r3, [r6]
   b66d2:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b66d6:	45b8      	cmp	r8, r7
   b66d8:	d008      	beq.n	b66ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b66da:	4639      	mov	r1, r7
   b66dc:	4628      	mov	r0, r5
   b66de:	f008 fa97 	bl	bec10 <_ZN6StringC1ERKS_>
   b66e2:	7c3b      	ldrb	r3, [r7, #16]
   b66e4:	742b      	strb	r3, [r5, #16]
   b66e6:	3714      	adds	r7, #20
   b66e8:	3514      	adds	r5, #20
   b66ea:	e7f4      	b.n	b66d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b66ec:	6873      	ldr	r3, [r6, #4]
   b66ee:	6063      	str	r3, [r4, #4]
}
   b66f0:	4620      	mov	r0, r4
   b66f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b66f8 <_GLOBAL__sub_I_openTimeStr>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   b66f8:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b66fa:	4b27      	ldr	r3, [pc, #156]	; (b6798 <_GLOBAL__sub_I_openTimeStr+0xa0>)
    SleepResult() {}
   b66fc:	4a27      	ldr	r2, [pc, #156]	; (b679c <_GLOBAL__sub_I_openTimeStr+0xa4>)
   b66fe:	2501      	movs	r5, #1
   b6700:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b6702:	4b27      	ldr	r3, [pc, #156]	; (b67a0 <_GLOBAL__sub_I_openTimeStr+0xa8>)
   b6704:	2400      	movs	r4, #0
   b6706:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b6708:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b670a:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b670e:	2002      	movs	r0, #2
   b6710:	f005 fd42 	bl	bc198 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b6714:	4621      	mov	r1, r4
   b6716:	4628      	mov	r0, r5
   b6718:	f005 fd56 	bl	bc1c8 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b671c:	4629      	mov	r1, r5
   b671e:	2004      	movs	r0, #4
   b6720:	f005 fab8 	bl	bbc94 <HAL_Feature_Set>
        capacity_(0) {
   b6724:	e9cd 4400 	strd	r4, r4, [sp]
   b6728:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b672a:	f008 fe75 	bl	bf418 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b672e:	4c1d      	ldr	r4, [pc, #116]	; (b67a4 <_GLOBAL__sub_I_openTimeStr+0xac>)
   b6730:	4605      	mov	r5, r0
   b6732:	4669      	mov	r1, sp
   b6734:	a803      	add	r0, sp, #12
   b6736:	f7ff ffac 	bl	b6692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b673a:	4626      	mov	r6, r4
        stream_(&stream) {
   b673c:	a903      	add	r1, sp, #12
   b673e:	a806      	add	r0, sp, #24
   b6740:	f7ff ffa7 	bl	b6692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6744:	4b18      	ldr	r3, [pc, #96]	; (b67a8 <_GLOBAL__sub_I_openTimeStr+0xb0>)
   b6746:	f846 3b04 	str.w	r3, [r6], #4
   b674a:	a906      	add	r1, sp, #24
   b674c:	a809      	add	r0, sp, #36	; 0x24
   b674e:	f7ff ffa0 	bl	b6692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6752:	aa09      	add	r2, sp, #36	; 0x24
   b6754:	211e      	movs	r1, #30
   b6756:	4630      	mov	r0, r6
   b6758:	f007 fb22 	bl	bdda0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b675c:	a809      	add	r0, sp, #36	; 0x24
   b675e:	f7ff ff57 	bl	b6610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b6762:	a806      	add	r0, sp, #24
   b6764:	f7ff ff54 	bl	b6610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6768:	4b10      	ldr	r3, [pc, #64]	; (b67ac <_GLOBAL__sub_I_openTimeStr+0xb4>)
   b676a:	6023      	str	r3, [r4, #0]
   b676c:	6225      	str	r5, [r4, #32]
   b676e:	a803      	add	r0, sp, #12
   b6770:	f7ff ff4e 	bl	b6610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6774:	4b0e      	ldr	r3, [pc, #56]	; (b67b0 <_GLOBAL__sub_I_openTimeStr+0xb8>)
   b6776:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b6778:	f008 fe4e 	bl	bf418 <_Z16_fetch_usbserialv>
   b677c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6780:	f008 fe38 	bl	bf3f4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b6784:	f007 f822 	bl	bd7cc <_ZN5spark10LogManager8instanceEv>
   b6788:	4621      	mov	r1, r4
   b678a:	f007 f9df 	bl	bdb4c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b678e:	4668      	mov	r0, sp
   b6790:	f7ff ff3e 	bl	b6610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6794:	b00c      	add	sp, #48	; 0x30
   b6796:	bd70      	pop	{r4, r5, r6, pc}
   b6798:	2003e400 	.word	0x2003e400
   b679c:	ffff0000 	.word	0xffff0000
   b67a0:	2003e3f4 	.word	0x2003e3f4
   b67a4:	2003e408 	.word	0x2003e408
   b67a8:	000c1448 	.word	0x000c1448
   b67ac:	000c2130 	.word	0x000c2130
   b67b0:	000c1460 	.word	0x000c1460

000b67b4 <_ZN18Particle_Functions22disconnectFromParticleEv>:
{
   b67b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b67b8:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b67ba:	f008 fd46 	bl	bf24a <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b67be:	4943      	ldr	r1, [pc, #268]	; (b68cc <_ZN18Particle_Functions22disconnectFromParticleEv+0x118>)
  time_t startTime = Time.now();
   b67c0:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b67c2:	4843      	ldr	r0, [pc, #268]	; (b68d0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b67c4:	f7fd fcbb 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  detachInterrupt(BUTTON_PIN);                                         // Stop watching the userSwitch as we will no longer be connected
   b67c8:	4b42      	ldr	r3, [pc, #264]	; (b68d4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x120>)
   b67ca:	8818      	ldrh	r0, [r3, #0]
   b67cc:	f006 fc40 	bl	bd050 <_Z15detachInterruptt>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b67d0:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b67d2:	a801      	add	r0, sp, #4
   b67d4:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b67d8:	f8ad 400c 	strh.w	r4, [sp, #12]
   b67dc:	f006 f85a 	bl	bc894 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b67e0:	4620      	mov	r0, r4
   b67e2:	f005 fa87 	bl	bbcf4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b67e6:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b67ea:	4604      	mov	r4, r0
   b67ec:	2000      	movs	r0, #0
   b67ee:	f005 fa81 	bl	bbcf4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b67f2:	1b03      	subs	r3, r0, r4
   b67f4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b67f8:	42b3      	cmp	r3, r6
   b67fa:	f171 0300 	sbcs.w	r3, r1, #0
   b67fe:	d205      	bcs.n	b680c <_ZN18Particle_Functions22disconnectFromParticleEv+0x58>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6800:	f005 fd5c 	bl	bc2bc <spark_cloud_flag_connected>
   b6804:	b110      	cbz	r0, b680c <_ZN18Particle_Functions22disconnectFromParticleEv+0x58>
            spark_process();
   b6806:	f005 fd49 	bl	bc29c <spark_process>
        while (_while() && !_condition()) {
   b680a:	e7ef      	b.n	b67ec <_ZN18Particle_Functions22disconnectFromParticleEv+0x38>
   b680c:	f005 fd56 	bl	bc2bc <spark_cloud_flag_connected>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6810:	f005 fa60 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6814:	4f30      	ldr	r7, [pc, #192]	; (b68d8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b6816:	6038      	str	r0, [r7, #0]
    		spark_process();
   b6818:	f005 fd40 	bl	bc29c <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b681c:	f005 fd4e 	bl	bc2bc <spark_cloud_flag_connected>
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b6820:	4604      	mov	r4, r0
   b6822:	b140      	cbz	r0, b6836 <_ZN18Particle_Functions22disconnectFromParticleEv+0x82>
    Log.info("Failed to disconnect from Particle");
   b6824:	492d      	ldr	r1, [pc, #180]	; (b68dc <_ZN18Particle_Functions22disconnectFromParticleEv+0x128>)
   b6826:	482a      	ldr	r0, [pc, #168]	; (b68d0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b6828:	f7fd fc89 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b682c:	2400      	movs	r4, #0
   b682e:	4620      	mov	r0, r4
   b6830:	b005      	add	sp, #20
   b6832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b6836:	f008 fd08 	bl	bf24a <_ZN9TimeClass3nowEv>
   b683a:	4929      	ldr	r1, [pc, #164]	; (b68e0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x12c>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b683c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b68e4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x130>
   b6840:	1b42      	subs	r2, r0, r5
   b6842:	4823      	ldr	r0, [pc, #140]	; (b68d0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b6844:	f7fd fc7b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b6848:	f008 fcff 	bl	bf24a <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b684c:	4622      	mov	r2, r4
   b684e:	2102      	movs	r1, #2
   b6850:	4606      	mov	r6, r0
   b6852:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b6856:	f005 fd81 	bl	bc35c <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b685a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b685e:	4623      	mov	r3, r4
   b6860:	4622      	mov	r2, r4
   b6862:	4621      	mov	r1, r4
   b6864:	f005 fd92 	bl	bc38c <network_off>
        return hal_timer_millis(nullptr);
   b6868:	4620      	mov	r0, r4
   b686a:	f005 fa43 	bl	bbcf4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b686e:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b6872:	4605      	mov	r5, r0
   b6874:	2000      	movs	r0, #0
   b6876:	f005 fa3d 	bl	bbcf4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b687a:	1b43      	subs	r3, r0, r5
   b687c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b6880:	454b      	cmp	r3, r9
   b6882:	f171 0300 	sbcs.w	r3, r1, #0
   b6886:	d206      	bcs.n	b6896 <_ZN18Particle_Functions22disconnectFromParticleEv+0xe2>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b6888:	4640      	mov	r0, r8
   b688a:	f007 fda7 	bl	be3dc <_ZN5spark12NetworkClass5isOffEv>
   b688e:	b910      	cbnz	r0, b6896 <_ZN18Particle_Functions22disconnectFromParticleEv+0xe2>
            spark_process();
   b6890:	f005 fd04 	bl	bc29c <spark_process>
        while (_while() && !_condition()) {
   b6894:	e7ee      	b.n	b6874 <_ZN18Particle_Functions22disconnectFromParticleEv+0xc0>
   b6896:	4813      	ldr	r0, [pc, #76]	; (b68e4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x130>)
   b6898:	f007 fda0 	bl	be3dc <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b689c:	f005 fa1a 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b68a0:	6038      	str	r0, [r7, #0]
    		spark_process();
   b68a2:	f005 fcfb 	bl	bc29c <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b68a6:	480f      	ldr	r0, [pc, #60]	; (b68e4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x130>)
   b68a8:	f007 fd94 	bl	be3d4 <_ZN5spark12NetworkClass4isOnEv>
   b68ac:	b120      	cbz	r0, b68b8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x104>
    Log.info("Failed to turn off the Cellular modem");
   b68ae:	490e      	ldr	r1, [pc, #56]	; (b68e8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x134>)
   b68b0:	4807      	ldr	r0, [pc, #28]	; (b68d0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b68b2:	f7fd fc44 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b68b6:	e7ba      	b.n	b682e <_ZN18Particle_Functions22disconnectFromParticleEv+0x7a>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b68b8:	f008 fcc7 	bl	bf24a <_ZN9TimeClass3nowEv>
   b68bc:	490b      	ldr	r1, [pc, #44]	; (b68ec <_ZN18Particle_Functions22disconnectFromParticleEv+0x138>)
   b68be:	1b82      	subs	r2, r0, r6
   b68c0:	4803      	ldr	r0, [pc, #12]	; (b68d0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b68c2:	f7fd fc3c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b68c6:	2401      	movs	r4, #1
   b68c8:	e7b1      	b.n	b682e <_ZN18Particle_Functions22disconnectFromParticleEv+0x7a>
   b68ca:	bf00      	nop
   b68cc:	000c1379 	.word	0x000c1379
   b68d0:	2003e654 	.word	0x2003e654
   b68d4:	000c14b6 	.word	0x000c14b6
   b68d8:	2003e710 	.word	0x2003e710
   b68dc:	000c13a2 	.word	0x000c13a2
   b68e0:	000c13c5 	.word	0x000c13c5
   b68e4:	2003e580 	.word	0x2003e580
   b68e8:	000c13ee 	.word	0x000c13ee
   b68ec:	000c1414 	.word	0x000c1414

000b68f0 <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b68f0:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b68f2:	4913      	ldr	r1, [pc, #76]	; (b6940 <_Z18initializePinModesv+0x50>)
   b68f4:	4813      	ldr	r0, [pc, #76]	; (b6944 <_Z18initializePinModesv+0x54>)
   b68f6:	f7fd fc22 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b68fa:	2102      	movs	r1, #2
   b68fc:	2004      	movs	r0, #4
   b68fe:	f008 fea3 	bl	bf648 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b6902:	2100      	movs	r1, #0
   b6904:	2008      	movs	r0, #8
   b6906:	f008 fe9f 	bl	bf648 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b690a:	2101      	movs	r1, #1
   b690c:	2007      	movs	r0, #7
   b690e:	f008 fe9b 	bl	bf648 <pinMode>
    pinMode(INT_PIN, INPUT);
   b6912:	2100      	movs	r1, #0
   b6914:	2012      	movs	r0, #18
   b6916:	f008 fe97 	bl	bf648 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b691a:	2101      	movs	r1, #1
   b691c:	2011      	movs	r0, #17
   b691e:	f008 fe93 	bl	bf648 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b6922:	2101      	movs	r1, #1
   b6924:	2010      	movs	r0, #16
   b6926:	f008 fe8f 	bl	bf648 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b692a:	2100      	movs	r1, #0
   b692c:	2010      	movs	r0, #16
   b692e:	f008 fe9c 	bl	bf66a <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b6932:	2100      	movs	r1, #0
   b6934:	2011      	movs	r0, #17
   b6936:	f008 fe98 	bl	bf66a <digitalWrite>
    return true;
}
   b693a:	2001      	movs	r0, #1
   b693c:	bd08      	pop	{r3, pc}
   b693e:	bf00      	nop
   b6940:	000c1480 	.word	0x000c1480
   b6944:	2003e654 	.word	0x2003e654

000b6948 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b6948:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b694a:	4918      	ldr	r1, [pc, #96]	; (b69ac <_Z18initializePowerCfgv+0x64>)
   b694c:	4818      	ldr	r0, [pc, #96]	; (b69b0 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b694e:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b6950:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b6952:	f7fd fbf4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b6956:	4622      	mov	r2, r4
   b6958:	2100      	movs	r1, #0
   b695a:	4668      	mov	r0, sp
   b695c:	f009 fcc2 	bl	c02e4 <memset>
   b6960:	4622      	mov	r2, r4
   b6962:	2100      	movs	r1, #0
   b6964:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b6968:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b696c:	f009 fcba 	bl	c02e4 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b6970:	2100      	movs	r1, #0
   b6972:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b6976:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b697a:	f005 fc61 	bl	bc240 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b697e:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b6982:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b6986:	4b0b      	ldr	r3, [pc, #44]	; (b69b4 <_Z18initializePowerCfgv+0x6c>)
   b6988:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b698a:	f241 0370 	movw	r3, #4208	; 0x1070
   b698e:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b6992:	9b00      	ldr	r3, [sp, #0]
   b6994:	2100      	movs	r1, #0
   b6996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b699a:	4668      	mov	r0, sp
   b699c:	9300      	str	r3, [sp, #0]
   b699e:	f005 fc4f 	bl	bc240 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b69a2:	3800      	subs	r0, #0
   b69a4:	bf18      	it	ne
   b69a6:	2001      	movne	r0, #1
   b69a8:	b010      	add	sp, #64	; 0x40
   b69aa:	bd10      	pop	{r4, pc}
   b69ac:	000c1499 	.word	0x000c1499
   b69b0:	2003e654 	.word	0x2003e654
   b69b4:	03840384 	.word	0x03840384

000b69b8 <_Z23setGatewayConfigurationv>:
 */

#include "Particle.h"
#include "MyPersistentData.h"

void setGatewayConfiguration() {
   b69b8:	b508      	push	{r3, lr}
  Log.info("Setting values for the Gateway");
   b69ba:	4908      	ldr	r1, [pc, #32]	; (b69dc <_Z23setGatewayConfigurationv+0x24>)
   b69bc:	4808      	ldr	r0, [pc, #32]	; (b69e0 <_Z23setGatewayConfigurationv+0x28>)
   b69be:	f7fd fbbe 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_frequencyMinutes(10);
   b69c2:	f7ff f9f5 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b69c6:	210a      	movs	r1, #10
   b69c8:	f7ff fc15 	bl	b61f6 <_ZN13sysStatusData20set_frequencyMinutesEt>
  sysStatus.set_magicNumber(27617);
   b69cc:	f7ff f9f0 	bl	b5db0 <_ZN13sysStatusData8instanceEv>
   b69d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_magicNumber(27617);
   b69d4:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b69d8:	f7ff bc01 	b.w	b61de <_ZN13sysStatusData15set_magicNumberEt>
   b69dc:	000c14be 	.word	0x000c14be
   b69e0:	2003e654 	.word	0x2003e654

000b69e4 <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b69e4:	ee07 0a90 	vmov	s15, r0
   b69e8:	ed9f 7a09 	vldr	s14, [pc, #36]	; b6a10 <_Z17tmp36TemperatureCi+0x2c>
   b69ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b69f0:	ee67 7a87 	vmul.f32	s15, s15, s14
   b69f4:	ed9f 7a07 	vldr	s14, [pc, #28]	; b6a14 <_Z17tmp36TemperatureCi+0x30>
   b69f8:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b69fc:	eddf 7a06 	vldr	s15, [pc, #24]	; b6a18 <_Z17tmp36TemperatureCi+0x34>
   b6a00:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b6a04:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b6a08:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b6a0c:	4770      	bx	lr
   b6a0e:	bf00      	nop
   b6a10:	454e4000 	.word	0x454e4000
   b6a14:	457ff000 	.word	0x457ff000
   b6a18:	43fa0000 	.word	0x43fa0000

000b6a1c <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b6a1c:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b6a1e:	2101      	movs	r1, #1
   b6a20:	a801      	add	r0, sp, #4
   b6a22:	f007 fd70 	bl	be506 <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b6a26:	f7ff fa13 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b6a2a:	f7ff fb07 	bl	b603c <_ZNK17currentStatusData17get_internalTempCEv>
   b6a2e:	f7ff fa0f 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b6a32:	f7ff fb03 	bl	b603c <_ZNK17currentStatusData17get_internalTempCEv>
   b6a36:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6a38:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b6a3a:	d90d      	bls.n	b6a58 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6a3c:	f007 fdf6 	bl	be62c <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b6a40:	f7ff fa06 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b6a44:	2101      	movs	r1, #1
   b6a46:	f7ff fb59 	bl	b60fc <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b6a4a:	2400      	movs	r4, #0
  PMIC pmic(true);
   b6a4c:	a801      	add	r0, sp, #4
   b6a4e:	f007 fd69 	bl	be524 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b6a52:	4620      	mov	r0, r4
   b6a54:	b002      	add	sp, #8
   b6a56:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b6a58:	f007 fdcd 	bl	be5f6 <_ZN4PMIC14enableChargingEv>
    return true;
   b6a5c:	2401      	movs	r4, #1
   b6a5e:	e7f5      	b.n	b6a4c <_Z16isItSafeToChargev+0x30>

000b6a60 <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   b6a60:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6a62:	4d19      	ldr	r5, [pc, #100]	; (b6ac8 <_Z17getSignalStrengthv+0x68>)
   b6a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b6a66:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6a68:	ac0c      	add	r4, sp, #48	; 0x30
   b6a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6a70:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6a74:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b6a78:	4914      	ldr	r1, [pc, #80]	; (b6acc <_Z17getSignalStrengthv+0x6c>)
   b6a7a:	a804      	add	r0, sp, #16
   b6a7c:	f005 fdb8 	bl	bc5f0 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b6a80:	a804      	add	r0, sp, #16
   b6a82:	f005 fdf8 	bl	bc676 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b6a86:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b6a88:	a804      	add	r0, sp, #16
   b6a8a:	f005 fe2d 	bl	bc6e8 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b6a8e:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b6a90:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b6a94:	f005 fe58 	bl	bc748 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6a98:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b6a9a:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6a9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b6aa2:	f009 f855 	bl	bfb50 <__aeabi_f2d>
   b6aa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b6aaa:	4628      	mov	r0, r5
   b6aac:	f009 f850 	bl	bfb50 <__aeabi_f2d>
   b6ab0:	e9cd 0100 	strd	r0, r1, [sp]
   b6ab4:	4a06      	ldr	r2, [pc, #24]	; (b6ad0 <_Z17getSignalStrengthv+0x70>)
   b6ab6:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b6aba:	4806      	ldr	r0, [pc, #24]	; (b6ad4 <_Z17getSignalStrengthv+0x74>)
   b6abc:	2140      	movs	r1, #64	; 0x40
   b6abe:	f005 fcc5 	bl	bc44c <snprintf>
}
   b6ac2:	b017      	add	sp, #92	; 0x5c
   b6ac4:	bd30      	pop	{r4, r5, pc}
   b6ac6:	bf00      	nop
   b6ac8:	000c1560 	.word	0x000c1560
   b6acc:	2003e580 	.word	0x2003e580
   b6ad0:	000c151b 	.word	0x000c151b
   b6ad4:	2003d720 	.word	0x2003d720

000b6ad8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b6ad8:	b530      	push	{r4, r5, lr}
   b6ada:	b085      	sub	sp, #20
   b6adc:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b6ade:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b6ae0:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b6ae2:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b6ae4:	f005 fb46 	bl	bc174 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b6ae8:	b990      	cbnz	r0, b6b10 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b6aea:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b6aec:	b10c      	cbz	r4, b6af2 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b6aee:	6923      	ldr	r3, [r4, #16]
   b6af0:	b923      	cbnz	r3, b6afc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b6af2:	4a08      	ldr	r2, [pc, #32]	; (b6b14 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b6af4:	4908      	ldr	r1, [pc, #32]	; (b6b18 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b6af6:	200a      	movs	r0, #10
   b6af8:	f005 fb14 	bl	bc124 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b6afc:	230c      	movs	r3, #12
   b6afe:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b6b02:	2304      	movs	r3, #4
   b6b04:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b6b06:	aa01      	add	r2, sp, #4
   b6b08:	6923      	ldr	r3, [r4, #16]
   b6b0a:	2101      	movs	r1, #1
   b6b0c:	4620      	mov	r0, r4
   b6b0e:	4798      	blx	r3
}
   b6b10:	b005      	add	sp, #20
   b6b12:	bd30      	pop	{r4, r5, pc}
   b6b14:	000bbcc5 	.word	0x000bbcc5
   b6b18:	000c1534 	.word	0x000c1534

000b6b1c <_Z12batteryStatev>:
bool batteryState() {
   b6b1c:	b513      	push	{r0, r1, r4, lr}
  current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b6b1e:	f7ff f997 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b6b22:	a901      	add	r1, sp, #4
   b6b24:	4604      	mov	r4, r0
   b6b26:	2007      	movs	r0, #7
   b6b28:	f7ff ffd6 	bl	b6ad8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b6b2c:	1e01      	subs	r1, r0, #0
        return val;
   b6b2e:	bfa8      	it	ge
   b6b30:	9901      	ldrge	r1, [sp, #4]
   b6b32:	4620      	mov	r0, r4
   b6b34:	b2c9      	uxtb	r1, r1
   b6b36:	f7ff fae1 	bl	b60fc <_ZN17currentStatusData16set_batteryStateEh>
  fuelGauge.quickStart();                                               // May help us re-establish a baseline for SoC
   b6b3a:	4818      	ldr	r0, [pc, #96]	; (b6b9c <_Z12batteryStatev+0x80>)
   b6b3c:	f006 f9a4 	bl	bce88 <_ZN9FuelGauge10quickStartEv>
  delay(500);
   b6b40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6b44:	f005 fcda 	bl	bc4fc <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b6b48:	f7ff f982 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b6b4c:	a901      	add	r1, sp, #4
   b6b4e:	4604      	mov	r4, r0
   b6b50:	2003      	movs	r0, #3
   b6b52:	f7ff ffc1 	bl	b6ad8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b6b56:	b9e8      	cbnz	r0, b6b94 <_Z12batteryStatev+0x78>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b6b58:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b6b5c:	ee07 3a90 	vmov	s15, r3
   b6b60:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b6b64:	ee17 0a90 	vmov	r0, s15
   b6b68:	f008 fff2 	bl	bfb50 <__aeabi_f2d>
   b6b6c:	ec41 0b10 	vmov	d0, r0, r1
   b6b70:	4620      	mov	r0, r4
   b6b72:	f7ff f9a9 	bl	b5ec8 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b6b76:	f7ff f96b 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b6b7a:	f7ff f985 	bl	b5e88 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b6b7e:	4b08      	ldr	r3, [pc, #32]	; (b6ba0 <_Z12batteryStatev+0x84>)
   b6b80:	ec51 0b10 	vmov	r0, r1, d0
   b6b84:	2200      	movs	r2, #0
   b6b86:	f009 facb 	bl	c0120 <__aeabi_dcmpgt>
}
   b6b8a:	3800      	subs	r0, #0
   b6b8c:	bf18      	it	ne
   b6b8e:	2001      	movne	r0, #1
   b6b90:	b002      	add	sp, #8
   b6b92:	bd10      	pop	{r4, pc}
            return -1.0f;
   b6b94:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b6b98:	e7e4      	b.n	b6b64 <_Z12batteryStatev+0x48>
   b6b9a:	bf00      	nop
   b6b9c:	2003e42c 	.word	0x2003e42c
   b6ba0:	404e0000 	.word	0x404e0000

000b6ba4 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b6ba4:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b6ba6:	f7ff f953 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b6baa:	4b11      	ldr	r3, [pc, #68]	; (b6bf0 <_Z16takeMeasurementsv+0x4c>)
   b6bac:	4604      	mov	r4, r0
   b6bae:	8818      	ldrh	r0, [r3, #0]
   b6bb0:	f008 fd87 	bl	bf6c2 <analogRead>
   b6bb4:	f7ff ff16 	bl	b69e4 <_Z17tmp36TemperatureCi>
   b6bb8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b6bbc:	4620      	mov	r0, r4
   b6bbe:	edcd 7a01 	vstr	s15, [sp, #4]
   b6bc2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b6bc6:	f7ff fa93 	bl	b60f0 <_ZN17currentStatusData17set_internalTempCEh>
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b6bca:	f7ff f941 	bl	b5e50 <_ZN17currentStatusData8instanceEv>
   b6bce:	f7ff fa35 	bl	b603c <_ZNK17currentStatusData17get_internalTempCEv>
   b6bd2:	4a08      	ldr	r2, [pc, #32]	; (b6bf4 <_Z16takeMeasurementsv+0x50>)
   b6bd4:	4603      	mov	r3, r0
   b6bd6:	2110      	movs	r1, #16
   b6bd8:	4807      	ldr	r0, [pc, #28]	; (b6bf8 <_Z16takeMeasurementsv+0x54>)
   b6bda:	f005 fc37 	bl	bc44c <snprintf>
    batteryState();
   b6bde:	f7ff ff9d 	bl	b6b1c <_Z12batteryStatev>
    isItSafeToCharge();
   b6be2:	f7ff ff1b 	bl	b6a1c <_Z16isItSafeToChargev>
    getSignalStrength();
   b6be6:	f7ff ff3b 	bl	b6a60 <_Z17getSignalStrengthv>
}
   b6bea:	2001      	movs	r0, #1
   b6bec:	b002      	add	sp, #8
   b6bee:	bd10      	pop	{r4, pc}
   b6bf0:	000c14bc 	.word	0x000c14bc
   b6bf4:	000c155a 	.word	0x000c155a
   b6bf8:	2003d710 	.word	0x2003d710

000b6bfc <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b6bfc:	4801      	ldr	r0, [pc, #4]	; (b6c04 <_GLOBAL__sub_I_batteryContext+0x8>)
   b6bfe:	2100      	movs	r1, #0
   b6c00:	f006 b8fe 	b.w	bce00 <_ZN9FuelGaugeC1Eb>
   b6c04:	2003e42c 	.word	0x2003e42c

000b6c08 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b6c08:	4770      	bx	lr

000b6c0a <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b6c0a:	b510      	push	{r4, lr}
}
   b6c0c:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b6c0e:	4604      	mov	r4, r0
}
   b6c10:	f7fd fa45 	bl	b409e <_ZdlPvj>
   b6c14:	4620      	mov	r0, r4
   b6c16:	bd10      	pop	{r4, pc}

000b6c18 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b6c18:	b510      	push	{r4, lr}
   b6c1a:	4604      	mov	r4, r0
   b6c1c:	b08a      	sub	sp, #40	; 0x28
   b6c1e:	4608      	mov	r0, r1
    attr.flags = 0;
   b6c20:	f04f 0c20 	mov.w	ip, #32
   b6c24:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6c26:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b6c2a:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6c2e:	460b      	mov	r3, r1
   b6c30:	aa02      	add	r2, sp, #8
   b6c32:	6821      	ldr	r1, [r4, #0]
   b6c34:	f005 fa86 	bl	bc144 <log_message_v>
}
   b6c38:	b00a      	add	sp, #40	; 0x28
   b6c3a:	bd10      	pop	{r4, pc}

000b6c3c <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b6c3c:	b40e      	push	{r1, r2, r3}
   b6c3e:	b503      	push	{r0, r1, lr}
   b6c40:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b6c42:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b6c44:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6c48:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b6c4a:	f7ff ffe5 	bl	b6c18 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6c4e:	b002      	add	sp, #8
   b6c50:	f85d eb04 	ldr.w	lr, [sp], #4
   b6c54:	b003      	add	sp, #12
   b6c56:	4770      	bx	lr

000b6c58 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6c58:	b40e      	push	{r1, r2, r3}
   b6c5a:	b503      	push	{r0, r1, lr}
   b6c5c:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b6c5e:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6c60:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6c64:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b6c66:	f7ff ffd7 	bl	b6c18 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6c6a:	b002      	add	sp, #8
   b6c6c:	f85d eb04 	ldr.w	lr, [sp], #4
   b6c70:	b003      	add	sp, #12
   b6c72:	4770      	bx	lr

000b6c74 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6c74:	b510      	push	{r4, lr}
   b6c76:	7202      	strb	r2, [r0, #8]
   b6c78:	22ff      	movs	r2, #255	; 0xff
   b6c7a:	8142      	strh	r2, [r0, #10]
   b6c7c:	2200      	movs	r2, #0
   b6c7e:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b6c82:	6142      	str	r2, [r0, #20]
   b6c84:	7602      	strb	r2, [r0, #24]
   b6c86:	61c2      	str	r2, [r0, #28]
    instance = this;
   b6c88:	4a02      	ldr	r2, [pc, #8]	; (b6c94 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6c8a:	4c03      	ldr	r4, [pc, #12]	; (b6c98 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b6c8c:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6c8e:	e9c0 4100 	strd	r4, r1, [r0]
}
   b6c92:	bd10      	pop	{r4, pc}
   b6c94:	2003e438 	.word	0x2003e438
   b6c98:	000c17d8 	.word	0x000c17d8

000b6c9c <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b6c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6ca0:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b6ca4:	4604      	mov	r4, r0
   b6ca6:	4689      	mov	r9, r1
   b6ca8:	4616      	mov	r6, r2
   b6caa:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b6cac:	f1b8 0f00 	cmp.w	r8, #0
   b6cb0:	d002      	beq.n	b6cb8 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b6cb2:	6840      	ldr	r0, [r0, #4]
   b6cb4:	f006 f98e 	bl	bcfd4 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6cb8:	7a21      	ldrb	r1, [r4, #8]
   b6cba:	6860      	ldr	r0, [r4, #4]
   b6cbc:	f006 f967 	bl	bcf8e <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6cc0:	6860      	ldr	r0, [r4, #4]
   b6cc2:	6803      	ldr	r3, [r0, #0]
   b6cc4:	4649      	mov	r1, r9
   b6cc6:	689b      	ldr	r3, [r3, #8]
   b6cc8:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b6cca:	6860      	ldr	r0, [r4, #4]
   b6ccc:	2100      	movs	r1, #0
   b6cce:	f006 f97d 	bl	bcfcc <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6cd2:	4605      	mov	r5, r0
   b6cd4:	bb00      	cbnz	r0, b6d18 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6cd6:	2301      	movs	r3, #1
   b6cd8:	7a21      	ldrb	r1, [r4, #8]
   b6cda:	6860      	ldr	r0, [r4, #4]
   b6cdc:	463a      	mov	r2, r7
   b6cde:	f006 f944 	bl	bcf6a <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b6ce2:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6ce4:	4603      	mov	r3, r0
        if (count == num) {
   b6ce6:	d109      	bne.n	b6cfc <_ZN6AB180513readRegistersEhPhjb+0x60>
   b6ce8:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b6cea:	42be      	cmp	r6, r7
   b6cec:	d01c      	beq.n	b6d28 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b6cee:	6860      	ldr	r0, [r4, #4]
   b6cf0:	6803      	ldr	r3, [r0, #0]
   b6cf2:	695b      	ldr	r3, [r3, #20]
   b6cf4:	4798      	blx	r3
   b6cf6:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b6cfa:	e7f6      	b.n	b6cea <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b6cfc:	490b      	ldr	r1, [pc, #44]	; (b6d2c <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b6cfe:	480c      	ldr	r0, [pc, #48]	; (b6d30 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6d00:	464a      	mov	r2, r9
   b6d02:	f7ff ff9b 	bl	b6c3c <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b6d06:	f1b8 0f00 	cmp.w	r8, #0
   b6d0a:	d002      	beq.n	b6d12 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b6d0c:	6860      	ldr	r0, [r4, #4]
   b6d0e:	f006 f96a 	bl	bcfe6 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b6d12:	4628      	mov	r0, r5
   b6d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b6d18:	4603      	mov	r3, r0
   b6d1a:	4906      	ldr	r1, [pc, #24]	; (b6d34 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b6d1c:	4804      	ldr	r0, [pc, #16]	; (b6d30 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6d1e:	464a      	mov	r2, r9
   b6d20:	f7ff ff8c 	bl	b6c3c <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6d24:	2500      	movs	r5, #0
   b6d26:	e7ee      	b.n	b6d06 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b6d28:	2501      	movs	r5, #1
   b6d2a:	e7ec      	b.n	b6d06 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b6d2c:	000c1588 	.word	0x000c1588
   b6d30:	2003e434 	.word	0x2003e434
   b6d34:	000c15ad 	.word	0x000c15ad

000b6d38 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b6d38:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b6d3a:	9300      	str	r3, [sp, #0]
   b6d3c:	2301      	movs	r3, #1
   b6d3e:	f7ff ffad 	bl	b6c9c <_ZN6AB180513readRegistersEhPhjb>
}
   b6d42:	b003      	add	sp, #12
   b6d44:	f85d fb04 	ldr.w	pc, [sp], #4

000b6d48 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b6d48:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b6d4a:	8943      	ldrh	r3, [r0, #10]
   b6d4c:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b6d4e:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b6d50:	d010      	beq.n	b6d74 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6d52:	4e19      	ldr	r6, [pc, #100]	; (b6db8 <_ZN6AB180510detectChipEv+0x70>)
   b6d54:	4d19      	ldr	r5, [pc, #100]	; (b6dbc <_ZN6AB180510detectChipEv+0x74>)
   b6d56:	f004 ffbd 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b6d5a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b6d5e:	d209      	bcs.n	b6d74 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b6d60:	8960      	ldrh	r0, [r4, #10]
   b6d62:	f008 fc9b 	bl	bf69c <digitalRead>
   b6d66:	2801      	cmp	r0, #1
   b6d68:	d004      	beq.n	b6d74 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6d6a:	4631      	mov	r1, r6
   b6d6c:	4628      	mov	r0, r5
   b6d6e:	f7fd f9e6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b6d72:	e7f0      	b.n	b6d56 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b6d74:	2301      	movs	r3, #1
   b6d76:	f10d 0207 	add.w	r2, sp, #7
   b6d7a:	2128      	movs	r1, #40	; 0x28
   b6d7c:	4620      	mov	r0, r4
   b6d7e:	f7ff ffdb 	bl	b6d38 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b6d82:	b930      	cbnz	r0, b6d92 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b6d84:	480d      	ldr	r0, [pc, #52]	; (b6dbc <_ZN6AB180510detectChipEv+0x74>)
   b6d86:	490e      	ldr	r1, [pc, #56]	; (b6dc0 <_ZN6AB180510detectChipEv+0x78>)
   b6d88:	f7fd f9d9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b6d8c:	2000      	movs	r0, #0
}
   b6d8e:	b002      	add	sp, #8
   b6d90:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b6d92:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6d96:	2b18      	cmp	r3, #24
   b6d98:	d1f4      	bne.n	b6d84 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b6d9a:	2301      	movs	r3, #1
   b6d9c:	f10d 0207 	add.w	r2, sp, #7
   b6da0:	2129      	movs	r1, #41	; 0x29
   b6da2:	4620      	mov	r0, r4
   b6da4:	f7ff ffc8 	bl	b6d38 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b6da8:	2800      	cmp	r0, #0
   b6daa:	d0eb      	beq.n	b6d84 <_ZN6AB180510detectChipEv+0x3c>
   b6dac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6db0:	2b05      	cmp	r3, #5
   b6db2:	d1e7      	bne.n	b6d84 <_ZN6AB180510detectChipEv+0x3c>
   b6db4:	e7eb      	b.n	b6d8e <_ZN6AB180510detectChipEv+0x46>
   b6db6:	bf00      	nop
   b6db8:	000c15d1 	.word	0x000c15d1
   b6dbc:	2003e434 	.word	0x2003e434
   b6dc0:	000c15e6 	.word	0x000c15e6

000b6dc4 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b6dc4:	b507      	push	{r0, r1, r2, lr}
   b6dc6:	4613      	mov	r3, r2
    uint8_t value = 0;
   b6dc8:	2200      	movs	r2, #0
   b6dca:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b6dce:	f10d 0207 	add.w	r2, sp, #7
   b6dd2:	f7ff ffb1 	bl	b6d38 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b6dd6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b6dda:	b003      	add	sp, #12
   b6ddc:	f85d fb04 	ldr.w	pc, [sp], #4

000b6de0 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b6de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6de4:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b6de8:	4604      	mov	r4, r0
   b6dea:	460f      	mov	r7, r1
   b6dec:	4615      	mov	r5, r2
   b6dee:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b6df0:	f1b8 0f00 	cmp.w	r8, #0
   b6df4:	d002      	beq.n	b6dfc <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b6df6:	6840      	ldr	r0, [r0, #4]
   b6df8:	f006 f8ec 	bl	bcfd4 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6dfc:	7a21      	ldrb	r1, [r4, #8]
   b6dfe:	6860      	ldr	r0, [r4, #4]
   b6e00:	f006 f8c5 	bl	bcf8e <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6e04:	6860      	ldr	r0, [r4, #4]
   b6e06:	6803      	ldr	r3, [r0, #0]
   b6e08:	4639      	mov	r1, r7
   b6e0a:	689b      	ldr	r3, [r3, #8]
   b6e0c:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6e0e:	442e      	add	r6, r5
   b6e10:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b6e12:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b6e14:	d005      	beq.n	b6e22 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b6e16:	6803      	ldr	r3, [r0, #0]
   b6e18:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6e1c:	689b      	ldr	r3, [r3, #8]
   b6e1e:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6e20:	e7f6      	b.n	b6e10 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b6e22:	2101      	movs	r1, #1
   b6e24:	f006 f8d2 	bl	bcfcc <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6e28:	4603      	mov	r3, r0
   b6e2a:	b170      	cbz	r0, b6e4a <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b6e2c:	4908      	ldr	r1, [pc, #32]	; (b6e50 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b6e2e:	4809      	ldr	r0, [pc, #36]	; (b6e54 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b6e30:	463a      	mov	r2, r7
   b6e32:	f7ff ff03 	bl	b6c3c <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6e36:	2500      	movs	r5, #0
    }

    if (lock) {
   b6e38:	f1b8 0f00 	cmp.w	r8, #0
   b6e3c:	d002      	beq.n	b6e44 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b6e3e:	6860      	ldr	r0, [r4, #4]
   b6e40:	f006 f8d1 	bl	bcfe6 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b6e44:	4628      	mov	r0, r5
   b6e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b6e4a:	2501      	movs	r5, #1
   b6e4c:	e7f4      	b.n	b6e38 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b6e4e:	bf00      	nop
   b6e50:	000c15f3 	.word	0x000c15f3
   b6e54:	2003e434 	.word	0x2003e434

000b6e58 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b6e58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6e5a:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b6e5e:	9300      	str	r3, [sp, #0]
   b6e60:	f10d 020f 	add.w	r2, sp, #15
   b6e64:	2301      	movs	r3, #1
   b6e66:	f7ff ffbb 	bl	b6de0 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b6e6a:	b005      	add	sp, #20
   b6e6c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6e70 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b6e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b6e72:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b6e74:	460c      	mov	r4, r1
   b6e76:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b6e78:	491a      	ldr	r1, [pc, #104]	; (b6ee4 <_ZN6AB18056setWDTEi+0x74>)
   b6e7a:	481b      	ldr	r0, [pc, #108]	; (b6ee8 <_ZN6AB18056setWDTEi+0x78>)
   b6e7c:	f7fd f95f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b6e80:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b6e82:	bfb8      	it	lt
   b6e84:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b6e86:	b97c      	cbnz	r4, b6ea8 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b6e88:	2301      	movs	r3, #1
   b6e8a:	4622      	mov	r2, r4
   b6e8c:	211b      	movs	r1, #27
   b6e8e:	4628      	mov	r0, r5
   b6e90:	f7ff ffe2 	bl	b6e58 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6e94:	4915      	ldr	r1, [pc, #84]	; (b6eec <_ZN6AB18056setWDTEi+0x7c>)
   b6e96:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b6e98:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6e9a:	4813      	ldr	r0, [pc, #76]	; (b6ee8 <_ZN6AB18056setWDTEi+0x78>)
   b6e9c:	f7ff fedc 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b6ea0:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b6ea2:	616c      	str	r4, [r5, #20]
}
   b6ea4:	4630      	mov	r0, r6
   b6ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b6ea8:	2c03      	cmp	r4, #3
   b6eaa:	dd19      	ble.n	b6ee0 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b6eac:	10a7      	asrs	r7, r4, #2
   b6eae:	2f1f      	cmp	r7, #31
   b6eb0:	bfa8      	it	ge
   b6eb2:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6eb4:	00ba      	lsls	r2, r7, #2
   b6eb6:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b6eba:	2301      	movs	r3, #1
   b6ebc:	b2d2      	uxtb	r2, r2
   b6ebe:	211b      	movs	r1, #27
   b6ec0:	4628      	mov	r0, r5
   b6ec2:	f7ff ffc9 	bl	b6e58 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6ec6:	463a      	mov	r2, r7
   b6ec8:	4603      	mov	r3, r0
   b6eca:	4909      	ldr	r1, [pc, #36]	; (b6ef0 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6ecc:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6ece:	4806      	ldr	r0, [pc, #24]	; (b6ee8 <_ZN6AB18056setWDTEi+0x78>)
   b6ed0:	f7ff fec2 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6ed4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6ed8:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b6eda:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6edc:	616f      	str	r7, [r5, #20]
   b6ede:	e7e1      	b.n	b6ea4 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b6ee0:	2701      	movs	r7, #1
   b6ee2:	e7e7      	b.n	b6eb4 <_ZN6AB18056setWDTEi+0x44>
   b6ee4:	000c1618 	.word	0x000c1618
   b6ee8:	2003e434 	.word	0x2003e434
   b6eec:	000c1622 	.word	0x000c1622
   b6ef0:	000c163e 	.word	0x000c163e

000b6ef4 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b6ef4:	4b06      	ldr	r3, [pc, #24]	; (b6f10 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b6ef6:	681a      	ldr	r2, [r3, #0]
   b6ef8:	b14a      	cbz	r2, b6f0e <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b6efa:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b6efe:	430b      	orrs	r3, r1
   b6f00:	d105      	bne.n	b6f0e <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b6f02:	68d3      	ldr	r3, [r2, #12]
   b6f04:	b11b      	cbz	r3, b6f0e <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b6f06:	2100      	movs	r1, #0
   b6f08:	4610      	mov	r0, r2
   b6f0a:	f7ff bfb1 	b.w	b6e70 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b6f0e:	4770      	bx	lr
   b6f10:	2003e438 	.word	0x2003e438

000b6f14 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b6f14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6f18:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6f1c:	4605      	mov	r5, r0
   b6f1e:	4616      	mov	r6, r2
   b6f20:	461f      	mov	r7, r3
    if (lock) {
   b6f22:	f1b8 0f00 	cmp.w	r8, #0
   b6f26:	d004      	beq.n	b6f32 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b6f28:	6840      	ldr	r0, [r0, #4]
   b6f2a:	9101      	str	r1, [sp, #4]
   b6f2c:	f006 f852 	bl	bcfd4 <_ZN7TwoWire4lockEv>
   b6f30:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b6f32:	9101      	str	r1, [sp, #4]
   b6f34:	2300      	movs	r3, #0
   b6f36:	f10d 020f 	add.w	r2, sp, #15
   b6f3a:	4628      	mov	r0, r5
   b6f3c:	f7ff fefc 	bl	b6d38 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b6f40:	4604      	mov	r4, r0
   b6f42:	b160      	cbz	r0, b6f5e <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b6f44:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b6f48:	ea03 0206 	and.w	r2, r3, r6
   b6f4c:	433a      	orrs	r2, r7
        if (newValue != value) {
   b6f4e:	4293      	cmp	r3, r2
   b6f50:	d005      	beq.n	b6f5e <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b6f52:	9901      	ldr	r1, [sp, #4]
   b6f54:	2300      	movs	r3, #0
   b6f56:	4628      	mov	r0, r5
   b6f58:	f7ff ff7e 	bl	b6e58 <_ZN6AB180513writeRegisterEhhb>
   b6f5c:	4604      	mov	r4, r0
    if (lock) {
   b6f5e:	f1b8 0f00 	cmp.w	r8, #0
   b6f62:	d002      	beq.n	b6f6a <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b6f64:	6868      	ldr	r0, [r5, #4]
   b6f66:	f006 f83e 	bl	bcfe6 <_ZN7TwoWire6unlockEv>
}
   b6f6a:	4620      	mov	r0, r4
   b6f6c:	b004      	add	sp, #16
   b6f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6f72 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6f72:	b513      	push	{r0, r1, r4, lr}
   b6f74:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6f76:	f10d 0207 	add.w	r2, sp, #7
   b6f7a:	f7ff fedd 	bl	b6d38 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b6f7e:	b128      	cbz	r0, b6f8c <_ZN6AB180510isBitClearEhhb+0x1a>
   b6f80:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6f84:	421c      	tst	r4, r3
   b6f86:	bf0c      	ite	eq
   b6f88:	2001      	moveq	r0, #1
   b6f8a:	2000      	movne	r0, #0
}
   b6f8c:	b002      	add	sp, #8
   b6f8e:	bd10      	pop	{r4, pc}

000b6f90 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6f90:	b513      	push	{r0, r1, r4, lr}
   b6f92:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6f94:	f10d 0207 	add.w	r2, sp, #7
   b6f98:	f7ff fece 	bl	b6d38 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b6f9c:	b128      	cbz	r0, b6faa <_ZN6AB18058isBitSetEhhb+0x1a>
   b6f9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6fa2:	421c      	tst	r4, r3
   b6fa4:	bf14      	ite	ne
   b6fa6:	2001      	movne	r0, #1
   b6fa8:	2000      	moveq	r0, #0
}
   b6faa:	b002      	add	sp, #8
   b6fac:	bd10      	pop	{r4, pc}

000b6fae <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6fae:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b6fb0:	43d2      	mvns	r2, r2
   b6fb2:	9300      	str	r3, [sp, #0]
   b6fb4:	b2d2      	uxtb	r2, r2
   b6fb6:	2300      	movs	r3, #0
   b6fb8:	f7ff ffac 	bl	b6f14 <_ZN6AB180512maskRegisterEhhhb>
}
   b6fbc:	b003      	add	sp, #12
   b6fbe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6fc4 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b6fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b6fc6:	2301      	movs	r3, #1
   b6fc8:	f10d 0207 	add.w	r2, sp, #7
   b6fcc:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b6fce:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b6fd0:	f7ff feb2 	bl	b6d38 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b6fd4:	4605      	mov	r5, r0
   b6fd6:	b938      	cbnz	r0, b6fe8 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b6fd8:	491e      	ldr	r1, [pc, #120]	; (b7054 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b6fda:	481f      	ldr	r0, [pc, #124]	; (b7058 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6fdc:	22ad      	movs	r2, #173	; 0xad
   b6fde:	f7ff fe2d 	bl	b6c3c <_ZNK5spark6Logger5errorEPKcz>
}
   b6fe2:	4628      	mov	r0, r5
   b6fe4:	b003      	add	sp, #12
   b6fe6:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b6fe8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6fec:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b6ff0:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b6ff4:	d00b      	beq.n	b700e <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6ff6:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b6ff8:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6ffa:	210f      	movs	r1, #15
   b6ffc:	4620      	mov	r0, r4
   b6ffe:	f7ff ffd6 	bl	b6fae <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b7002:	4a16      	ldr	r2, [pc, #88]	; (b705c <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b7004:	4916      	ldr	r1, [pc, #88]	; (b7060 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b7006:	4814      	ldr	r0, [pc, #80]	; (b7058 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b7008:	f7fd f899 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b700c:	e7e9      	b.n	b6fe2 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b700e:	2208      	movs	r2, #8
   b7010:	2117      	movs	r1, #23
   b7012:	4620      	mov	r0, r4
   b7014:	f7ff ffbc 	bl	b6f90 <_ZN6AB18058isBitSetEhhb>
   b7018:	b118      	cbz	r0, b7022 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b701a:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b701c:	4a11      	ldr	r2, [pc, #68]	; (b7064 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b701e:	61e3      	str	r3, [r4, #28]
   b7020:	e7f0      	b.n	b7004 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b7022:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7026:	071a      	lsls	r2, r3, #28
   b7028:	d509      	bpl.n	b703e <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b702a:	2303      	movs	r3, #3
   b702c:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b702e:	2208      	movs	r2, #8
   b7030:	2301      	movs	r3, #1
   b7032:	210f      	movs	r1, #15
   b7034:	4620      	mov	r0, r4
   b7036:	f7ff ffba 	bl	b6fae <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b703a:	4a0b      	ldr	r2, [pc, #44]	; (b7068 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b703c:	e7e2      	b.n	b7004 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b703e:	075b      	lsls	r3, r3, #29
   b7040:	d5cf      	bpl.n	b6fe2 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b7042:	2204      	movs	r2, #4
   b7044:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b7046:	2301      	movs	r3, #1
   b7048:	210f      	movs	r1, #15
   b704a:	4620      	mov	r0, r4
   b704c:	f7ff ffaf 	bl	b6fae <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b7050:	4a06      	ldr	r2, [pc, #24]	; (b706c <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b7052:	e7d7      	b.n	b7004 <_ZN6AB180516updateWakeReasonEv+0x40>
   b7054:	000c1691 	.word	0x000c1691
   b7058:	2003e434 	.word	0x2003e434
   b705c:	000c1662 	.word	0x000c1662
   b7060:	000c16b0 	.word	0x000c16b0
   b7064:	000c166b 	.word	0x000c166b
   b7068:	000c167b 	.word	0x000c167b
   b706c:	000c168b 	.word	0x000c168b

000b7070 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7070:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b7072:	9300      	str	r3, [sp, #0]
   b7074:	4613      	mov	r3, r2
   b7076:	22ff      	movs	r2, #255	; 0xff
   b7078:	f7ff ff4c 	bl	b6f14 <_ZN6AB180512maskRegisterEhhhb>
}
   b707c:	b003      	add	sp, #12
   b707e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7084 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b7084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7086:	460f      	mov	r7, r1
   b7088:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b708a:	2301      	movs	r3, #1
   b708c:	2200      	movs	r2, #0
   b708e:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b7090:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b7092:	f7ff fee1 	bl	b6e58 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7096:	4604      	mov	r4, r0
   b7098:	b938      	cbnz	r0, b70aa <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b709a:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b709e:	491f      	ldr	r1, [pc, #124]	; (b711c <_ZN6AB180517setCountdownTimerEib+0x98>)
   b70a0:	481f      	ldr	r0, [pc, #124]	; (b7120 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b70a2:	f7ff fdcb 	bl	b6c3c <_ZNK5spark6Logger5errorEPKcz>
}
   b70a6:	4620      	mov	r0, r4
   b70a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b70aa:	2301      	movs	r3, #1
   b70ac:	2223      	movs	r2, #35	; 0x23
   b70ae:	2118      	movs	r1, #24
   b70b0:	4628      	mov	r0, r5
   b70b2:	f7ff fed1 	bl	b6e58 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b70b6:	4604      	mov	r4, r0
   b70b8:	b910      	cbnz	r0, b70c0 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b70ba:	f240 229b 	movw	r2, #667	; 0x29b
   b70be:	e7ee      	b.n	b709e <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b70c0:	2fff      	cmp	r7, #255	; 0xff
   b70c2:	bfa8      	it	ge
   b70c4:	27ff      	movge	r7, #255	; 0xff
   b70c6:	2f01      	cmp	r7, #1
   b70c8:	bfb8      	it	lt
   b70ca:	2701      	movlt	r7, #1
   b70cc:	2301      	movs	r3, #1
   b70ce:	b2fa      	uxtb	r2, r7
   b70d0:	2119      	movs	r1, #25
   b70d2:	4628      	mov	r0, r5
   b70d4:	f7ff fec0 	bl	b6e58 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b70d8:	4604      	mov	r4, r0
   b70da:	b910      	cbnz	r0, b70e2 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b70dc:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b70e0:	e7dd      	b.n	b709e <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b70e2:	2301      	movs	r3, #1
   b70e4:	2208      	movs	r2, #8
   b70e6:	2112      	movs	r1, #18
   b70e8:	4628      	mov	r0, r5
   b70ea:	f7ff ffc1 	bl	b7070 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b70ee:	4604      	mov	r4, r0
   b70f0:	b910      	cbnz	r0, b70f8 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b70f2:	f240 22af 	movw	r2, #687	; 0x2af
   b70f6:	e7d2      	b.n	b709e <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b70f8:	2e00      	cmp	r6, #0
   b70fa:	bf14      	ite	ne
   b70fc:	2203      	movne	r2, #3
   b70fe:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b7100:	2301      	movs	r3, #1
   b7102:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b7106:	2118      	movs	r1, #24
   b7108:	4628      	mov	r0, r5
   b710a:	f7ff fea5 	bl	b6e58 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b710e:	4604      	mov	r4, r0
   b7110:	2800      	cmp	r0, #0
   b7112:	d1c8      	bne.n	b70a6 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b7114:	f240 22b9 	movw	r2, #697	; 0x2b9
   b7118:	e7c1      	b.n	b709e <_ZN6AB180517setCountdownTimerEib+0x1a>
   b711a:	bf00      	nop
   b711c:	000c16c1 	.word	0x000c16c1
   b7120:	2003e434 	.word	0x2003e434

000b7124 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b7124:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b7128:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b712a:	4605      	mov	r5, r0
   b712c:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b712e:	484f      	ldr	r0, [pc, #316]	; (b726c <_ZN6AB180513deepPowerDownEi+0x148>)
   b7130:	494f      	ldr	r1, [pc, #316]	; (b7270 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b7132:	f7fd f804 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b7136:	2100      	movs	r1, #0
   b7138:	4628      	mov	r0, r5
   b713a:	f7ff fe99 	bl	b6e70 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b713e:	4604      	mov	r4, r0
   b7140:	b948      	cbnz	r0, b7156 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b7142:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b7146:	494b      	ldr	r1, [pc, #300]	; (b7274 <_ZN6AB180513deepPowerDownEi+0x150>)
   b7148:	4848      	ldr	r0, [pc, #288]	; (b726c <_ZN6AB180513deepPowerDownEi+0x148>)
   b714a:	f7ff fd77 	bl	b6c3c <_ZNK5spark6Logger5errorEPKcz>
}
   b714e:	4620      	mov	r0, r4
   b7150:	b003      	add	sp, #12
   b7152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b7156:	2301      	movs	r3, #1
   b7158:	461a      	mov	r2, r3
   b715a:	2130      	movs	r1, #48	; 0x30
   b715c:	4628      	mov	r0, r5
   b715e:	f7ff ff87 	bl	b7070 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7162:	4604      	mov	r4, r0
   b7164:	b910      	cbnz	r0, b716c <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b7166:	f240 2205 	movw	r2, #517	; 0x205
   b716a:	e7ec      	b.n	b7146 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b716c:	2210      	movs	r2, #16
   b716e:	2301      	movs	r3, #1
   b7170:	4611      	mov	r1, r2
   b7172:	4628      	mov	r0, r5
   b7174:	f7ff ff1b 	bl	b6fae <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b7178:	4604      	mov	r4, r0
   b717a:	b910      	cbnz	r0, b7182 <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b717c:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b7180:	e7e1      	b.n	b7146 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b7182:	2301      	movs	r3, #1
   b7184:	2226      	movs	r2, #38	; 0x26
   b7186:	2113      	movs	r1, #19
   b7188:	4628      	mov	r0, r5
   b718a:	f7ff fe65 	bl	b6e58 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b718e:	4604      	mov	r4, r0
   b7190:	b910      	cbnz	r0, b7198 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b7192:	f240 2213 	movw	r2, #531	; 0x213
   b7196:	e7d6      	b.n	b7146 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b7198:	2601      	movs	r6, #1
   b719a:	9600      	str	r6, [sp, #0]
   b719c:	4633      	mov	r3, r6
   b719e:	22fc      	movs	r2, #252	; 0xfc
   b71a0:	2111      	movs	r1, #17
   b71a2:	4628      	mov	r0, r5
   b71a4:	f7ff feb6 	bl	b6f14 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b71a8:	4604      	mov	r4, r0
   b71aa:	b910      	cbnz	r0, b71b2 <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b71ac:	f240 221b 	movw	r2, #539	; 0x21b
   b71b0:	e7c9      	b.n	b7146 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b71b2:	2200      	movs	r2, #0
   b71b4:	4639      	mov	r1, r7
   b71b6:	4628      	mov	r0, r5
   b71b8:	f7ff ff64 	bl	b7084 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b71bc:	4604      	mov	r4, r0
   b71be:	b910      	cbnz	r0, b71c6 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b71c0:	f240 2222 	movw	r2, #546	; 0x222
   b71c4:	e7bf      	b.n	b7146 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b71c6:	9600      	str	r6, [sp, #0]
   b71c8:	2302      	movs	r3, #2
   b71ca:	2277      	movs	r2, #119	; 0x77
   b71cc:	2110      	movs	r1, #16
   b71ce:	4628      	mov	r0, r5
   b71d0:	f7ff fea0 	bl	b6f14 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b71d4:	4604      	mov	r4, r0
   b71d6:	b910      	cbnz	r0, b71de <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b71d8:	f240 222b 	movw	r2, #555	; 0x22b
   b71dc:	e7b3      	b.n	b7146 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b71de:	4633      	mov	r3, r6
   b71e0:	2204      	movs	r2, #4
   b71e2:	211c      	movs	r1, #28
   b71e4:	4628      	mov	r0, r5
   b71e6:	f7ff ff43 	bl	b7070 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b71ea:	4604      	mov	r4, r0
   b71ec:	b910      	cbnz	r0, b71f4 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b71ee:	f240 2232 	movw	r2, #562	; 0x232
   b71f2:	e7a8      	b.n	b7146 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b71f4:	9600      	str	r6, [sp, #0]
   b71f6:	2318      	movs	r3, #24
   b71f8:	22e3      	movs	r2, #227	; 0xe3
   b71fa:	2111      	movs	r1, #17
   b71fc:	4628      	mov	r0, r5
   b71fe:	f7ff fe89 	bl	b6f14 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b7202:	4604      	mov	r4, r0
   b7204:	b910      	cbnz	r0, b720c <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b7206:	f240 2239 	movw	r2, #569	; 0x239
   b720a:	e79c      	b.n	b7146 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b720c:	4633      	mov	r3, r6
   b720e:	22c0      	movs	r2, #192	; 0xc0
   b7210:	2117      	movs	r1, #23
   b7212:	4628      	mov	r0, r5
   b7214:	f7ff fe20 	bl	b6e58 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7218:	4604      	mov	r4, r0
   b721a:	b910      	cbnz	r0, b7222 <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b721c:	f44f 7210 	mov.w	r2, #576	; 0x240
   b7220:	e791      	b.n	b7146 <_ZN6AB180513deepPowerDownEi+0x22>
   b7222:	f004 fd57 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b7226:	f8df 9054 	ldr.w	r9, [pc, #84]	; b727c <_ZN6AB180513deepPowerDownEi+0x158>
   b722a:	f8df 8040 	ldr.w	r8, [pc, #64]	; b726c <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b722e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b7232:	4606      	mov	r6, r0
   b7234:	434f      	muls	r7, r1
   b7236:	f004 fd4d 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
   b723a:	1b80      	subs	r0, r0, r6
   b723c:	42b8      	cmp	r0, r7
   b723e:	d20e      	bcs.n	b725e <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b7240:	2201      	movs	r2, #1
   b7242:	2117      	movs	r1, #23
   b7244:	4628      	mov	r0, r5
   b7246:	f7ff fdbd 	bl	b6dc4 <_ZN6AB180512readRegisterEhb>
   b724a:	4649      	mov	r1, r9
   b724c:	4602      	mov	r2, r0
   b724e:	4640      	mov	r0, r8
   b7250:	f7fc ff75 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b7254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b7258:	f005 f950 	bl	bc4fc <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b725c:	e7eb      	b.n	b7236 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b725e:	4906      	ldr	r1, [pc, #24]	; (b7278 <_ZN6AB180513deepPowerDownEi+0x154>)
   b7260:	4802      	ldr	r0, [pc, #8]	; (b726c <_ZN6AB180513deepPowerDownEi+0x148>)
   b7262:	f7ff fceb 	bl	b6c3c <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b7266:	f007 fdfc 	bl	bee62 <_ZN11SystemClass5resetEv>
    return true;
   b726a:	e770      	b.n	b714e <_ZN6AB180513deepPowerDownEi+0x2a>
   b726c:	2003e434 	.word	0x2003e434
   b7270:	000c16ec 	.word	0x000c16ec
   b7274:	000c16e1 	.word	0x000c16e1
   b7278:	000c1712 	.word	0x000c1712
   b727c:	000c16fd 	.word	0x000c16fd

000b7280 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b7280:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7284:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b7288:	4605      	mov	r5, r0
   b728a:	460c      	mov	r4, r1
   b728c:	4691      	mov	r9, r2
   b728e:	461f      	mov	r7, r3
    if (lock) {
   b7290:	f1ba 0f00 	cmp.w	sl, #0
   b7294:	d002      	beq.n	b729c <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b7296:	6840      	ldr	r0, [r0, #4]
   b7298:	f005 fe9c 	bl	bcfd4 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b729c:	b307      	cbz	r7, b72e0 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b729e:	2f20      	cmp	r7, #32
   b72a0:	463e      	mov	r6, r7
   b72a2:	bf28      	it	cs
   b72a4:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b72a6:	2c7f      	cmp	r4, #127	; 0x7f
   b72a8:	d826      	bhi.n	b72f8 <_ZN6AB18057readRamEjPhjb+0x78>
   b72aa:	1933      	adds	r3, r6, r4
   b72ac:	2b80      	cmp	r3, #128	; 0x80
   b72ae:	d901      	bls.n	b72b4 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b72b0:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b72b4:	2301      	movs	r3, #1
   b72b6:	2204      	movs	r2, #4
   b72b8:	213f      	movs	r1, #63	; 0x3f
   b72ba:	4628      	mov	r0, r5
   b72bc:	f7ff fe77 	bl	b6fae <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b72c0:	2300      	movs	r3, #0
   b72c2:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b72c6:	9300      	str	r3, [sp, #0]
   b72c8:	464a      	mov	r2, r9
   b72ca:	4633      	mov	r3, r6
   b72cc:	b2c9      	uxtb	r1, r1
   b72ce:	4628      	mov	r0, r5
   b72d0:	f7ff fce4 	bl	b6c9c <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b72d4:	4680      	mov	r8, r0
   b72d6:	b128      	cbz	r0, b72e4 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b72d8:	4434      	add	r4, r6
        dataLen -= count;
   b72da:	1bbf      	subs	r7, r7, r6
        data += count;
   b72dc:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b72de:	e7dd      	b.n	b729c <_ZN6AB18057readRamEjPhjb+0x1c>
   b72e0:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b72e4:	f1ba 0f00 	cmp.w	sl, #0
   b72e8:	d002      	beq.n	b72f0 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b72ea:	6868      	ldr	r0, [r5, #4]
   b72ec:	f005 fe7b 	bl	bcfe6 <_ZN7TwoWire6unlockEv>
}
   b72f0:	4640      	mov	r0, r8
   b72f2:	b002      	add	sp, #8
   b72f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b72f8:	2301      	movs	r3, #1
   b72fa:	2204      	movs	r2, #4
   b72fc:	213f      	movs	r1, #63	; 0x3f
   b72fe:	4628      	mov	r0, r5
   b7300:	f7ff feb6 	bl	b7070 <_ZN6AB180514setRegisterBitEhhb>
   b7304:	e7dc      	b.n	b72c0 <_ZN6AB18057readRamEjPhjb+0x40>

000b7306 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b7306:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b730a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b730e:	4605      	mov	r5, r0
   b7310:	460c      	mov	r4, r1
   b7312:	4691      	mov	r9, r2
   b7314:	461f      	mov	r7, r3
    if (lock) {
   b7316:	f1ba 0f00 	cmp.w	sl, #0
   b731a:	d002      	beq.n	b7322 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b731c:	6840      	ldr	r0, [r0, #4]
   b731e:	f005 fe59 	bl	bcfd4 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b7322:	b307      	cbz	r7, b7366 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b7324:	2f1f      	cmp	r7, #31
   b7326:	463e      	mov	r6, r7
   b7328:	bf28      	it	cs
   b732a:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b732c:	2c7f      	cmp	r4, #127	; 0x7f
   b732e:	d826      	bhi.n	b737e <_ZN6AB18058writeRamEjPKhjb+0x78>
   b7330:	1933      	adds	r3, r6, r4
   b7332:	2b80      	cmp	r3, #128	; 0x80
   b7334:	d901      	bls.n	b733a <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b7336:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b733a:	2301      	movs	r3, #1
   b733c:	2204      	movs	r2, #4
   b733e:	213f      	movs	r1, #63	; 0x3f
   b7340:	4628      	mov	r0, r5
   b7342:	f7ff fe34 	bl	b6fae <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b7346:	2300      	movs	r3, #0
   b7348:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b734c:	9300      	str	r3, [sp, #0]
   b734e:	464a      	mov	r2, r9
   b7350:	4633      	mov	r3, r6
   b7352:	b2c9      	uxtb	r1, r1
   b7354:	4628      	mov	r0, r5
   b7356:	f7ff fd43 	bl	b6de0 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b735a:	4680      	mov	r8, r0
   b735c:	b128      	cbz	r0, b736a <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b735e:	4434      	add	r4, r6
        dataLen -= count;
   b7360:	1bbf      	subs	r7, r7, r6
        data += count;
   b7362:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b7364:	e7dd      	b.n	b7322 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b7366:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b736a:	f1ba 0f00 	cmp.w	sl, #0
   b736e:	d002      	beq.n	b7376 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b7370:	6868      	ldr	r0, [r5, #4]
   b7372:	f005 fe38 	bl	bcfe6 <_ZN7TwoWire6unlockEv>
}
   b7376:	4640      	mov	r0, r8
   b7378:	b002      	add	sp, #8
   b737a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b737e:	2301      	movs	r3, #1
   b7380:	2204      	movs	r2, #4
   b7382:	213f      	movs	r1, #63	; 0x3f
   b7384:	4628      	mov	r0, r5
   b7386:	f7ff fe73 	bl	b7070 <_ZN6AB180514setRegisterBitEhhb>
   b738a:	e7dc      	b.n	b7346 <_ZN6AB18058writeRamEjPKhjb+0x40>

000b738c <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b738c:	b530      	push	{r4, r5, lr}
   b738e:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b7390:	680d      	ldr	r5, [r1, #0]
   b7392:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b7396:	9503      	str	r5, [sp, #12]
   b7398:	684d      	ldr	r5, [r1, #4]
   b739a:	9502      	str	r5, [sp, #8]
   b739c:	688d      	ldr	r5, [r1, #8]
   b739e:	9501      	str	r5, [sp, #4]
   b73a0:	68c9      	ldr	r1, [r1, #12]
   b73a2:	9100      	str	r1, [sp, #0]
   b73a4:	3301      	adds	r3, #1
   b73a6:	4904      	ldr	r1, [pc, #16]	; (b73b8 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b73a8:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b73ac:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b73ae:	f007 fcf1 	bl	bed94 <_ZN6String6formatEPKcz>
}
   b73b2:	4620      	mov	r0, r4
   b73b4:	b005      	add	sp, #20
   b73b6:	bd30      	pop	{r4, r5, pc}
   b73b8:	000c1724 	.word	0x000c1724

000b73bc <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b73bc:	0903      	lsrs	r3, r0, #4
}
   b73be:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b73c0:	f000 000f 	and.w	r0, r0, #15
}
   b73c4:	fb02 0003 	mla	r0, r2, r3, r0
   b73c8:	4770      	bx	lr

000b73ca <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b73ca:	b538      	push	{r3, r4, r5, lr}
   b73cc:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b73ce:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b73d0:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b73d2:	f7ff fff3 	bl	b73bc <_ZN6AB180510bcdToValueEh>
   b73d6:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b73d8:	7860      	ldrb	r0, [r4, #1]
   b73da:	f7ff ffef 	bl	b73bc <_ZN6AB180510bcdToValueEh>
   b73de:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b73e0:	78a0      	ldrb	r0, [r4, #2]
   b73e2:	f7ff ffeb 	bl	b73bc <_ZN6AB180510bcdToValueEh>
   b73e6:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b73e8:	78e0      	ldrb	r0, [r4, #3]
   b73ea:	f7ff ffe7 	bl	b73bc <_ZN6AB180510bcdToValueEh>
   b73ee:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b73f0:	7920      	ldrb	r0, [r4, #4]
   b73f2:	f7ff ffe3 	bl	b73bc <_ZN6AB180510bcdToValueEh>
   b73f6:	3801      	subs	r0, #1
   b73f8:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b73fa:	b92d      	cbnz	r5, b7408 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b73fc:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b73fe:	7828      	ldrb	r0, [r5, #0]
   b7400:	f7ff ffdc 	bl	b73bc <_ZN6AB180510bcdToValueEh>
   b7404:	6188      	str	r0, [r1, #24]
}
   b7406:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b7408:	7960      	ldrb	r0, [r4, #5]
   b740a:	f7ff ffd7 	bl	b73bc <_ZN6AB180510bcdToValueEh>
   b740e:	3064      	adds	r0, #100	; 0x64
   b7410:	1da5      	adds	r5, r4, #6
   b7412:	6148      	str	r0, [r1, #20]
   b7414:	e7f3      	b.n	b73fe <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b7418 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7418:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b741a:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b741c:	b088      	sub	sp, #32
   b741e:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7420:	461a      	mov	r2, r3
   b7422:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7424:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7426:	f7ff fda4 	bl	b6f72 <_ZN6AB180510isBitClearEhhb>
   b742a:	b1f0      	cbz	r0, b746a <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b742c:	2308      	movs	r3, #8
   b742e:	2601      	movs	r6, #1
   b7430:	4620      	mov	r0, r4
   b7432:	9600      	str	r6, [sp, #0]
   b7434:	eb0d 0203 	add.w	r2, sp, r3
   b7438:	2100      	movs	r1, #0
   b743a:	f7ff fc2f 	bl	b6c9c <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b743e:	4604      	mov	r4, r0
   b7440:	b198      	cbz	r0, b746a <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b7442:	4632      	mov	r2, r6
   b7444:	4629      	mov	r1, r5
   b7446:	f10d 0009 	add.w	r0, sp, #9
   b744a:	f7ff ffbe 	bl	b73ca <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b744e:	a804      	add	r0, sp, #16
   b7450:	f7ff ff9c 	bl	b738c <_ZN6AB180510tmToStringEPK2tm>
   b7454:	4808      	ldr	r0, [pc, #32]	; (b7478 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b7456:	9a04      	ldr	r2, [sp, #16]
   b7458:	4908      	ldr	r1, [pc, #32]	; (b747c <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b745a:	f7fc fe70 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b745e:	a804      	add	r0, sp, #16
   b7460:	f007 fb40 	bl	beae4 <_ZN6StringD1Ev>
}
   b7464:	4620      	mov	r0, r4
   b7466:	b008      	add	sp, #32
   b7468:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b746a:	2224      	movs	r2, #36	; 0x24
   b746c:	2100      	movs	r1, #0
   b746e:	4628      	mov	r0, r5
   b7470:	f008 ff38 	bl	c02e4 <memset>
   b7474:	2400      	movs	r4, #0
   b7476:	e7f5      	b.n	b7464 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b7478:	2003e434 	.word	0x2003e434
   b747c:	000c1742 	.word	0x000c1742

000b7480 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b7480:	b530      	push	{r4, r5, lr}
   b7482:	b08b      	sub	sp, #44	; 0x2c
   b7484:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b7486:	a901      	add	r1, sp, #4
   b7488:	f7ff ffc6 	bl	b7418 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b748c:	4604      	mov	r4, r0
   b748e:	b120      	cbz	r0, b749a <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b7490:	a801      	add	r0, sp, #4
   b7492:	f005 f82b 	bl	bc4ec <mktime>
   b7496:	e9c5 0100 	strd	r0, r1, [r5]
}
   b749a:	4620      	mov	r0, r4
   b749c:	b00b      	add	sp, #44	; 0x2c
   b749e:	bd30      	pop	{r4, r5, pc}

000b74a0 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b74a0:	230a      	movs	r3, #10
   b74a2:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b74a6:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b74aa:	fb91 f2f3 	sdiv	r2, r1, r3
   b74ae:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b74b2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b74b6:	b2c0      	uxtb	r0, r0
   b74b8:	4770      	bx	lr

000b74ba <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b74ba:	b570      	push	{r4, r5, r6, lr}
   b74bc:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b74be:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b74c0:	460c      	mov	r4, r1
   b74c2:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b74c4:	f7ff ffec 	bl	b74a0 <_ZN6AB180510valueToBcdEi>
   b74c8:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b74ca:	6868      	ldr	r0, [r5, #4]
   b74cc:	f7ff ffe8 	bl	b74a0 <_ZN6AB180510valueToBcdEi>
   b74d0:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b74d2:	68a8      	ldr	r0, [r5, #8]
   b74d4:	f7ff ffe4 	bl	b74a0 <_ZN6AB180510valueToBcdEi>
   b74d8:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b74da:	68e8      	ldr	r0, [r5, #12]
   b74dc:	f7ff ffe0 	bl	b74a0 <_ZN6AB180510valueToBcdEi>
   b74e0:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b74e2:	6928      	ldr	r0, [r5, #16]
   b74e4:	3001      	adds	r0, #1
   b74e6:	f7ff ffdb 	bl	b74a0 <_ZN6AB180510valueToBcdEi>
   b74ea:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b74ec:	b92e      	cbnz	r6, b74fa <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b74ee:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b74f0:	69a8      	ldr	r0, [r5, #24]
   b74f2:	f7ff ffd5 	bl	b74a0 <_ZN6AB180510valueToBcdEi>
   b74f6:	7030      	strb	r0, [r6, #0]
}
   b74f8:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b74fa:	696a      	ldr	r2, [r5, #20]
   b74fc:	2364      	movs	r3, #100	; 0x64
   b74fe:	fb92 f0f3 	sdiv	r0, r2, r3
   b7502:	fb03 2010 	mls	r0, r3, r0, r2
   b7506:	f7ff ffcb 	bl	b74a0 <_ZN6AB180510valueToBcdEi>
   b750a:	1da6      	adds	r6, r4, #6
   b750c:	7160      	strb	r0, [r4, #5]
   b750e:	e7ef      	b.n	b74f0 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b7510 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b7510:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7512:	b087      	sub	sp, #28
   b7514:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b7516:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b7518:	4616      	mov	r6, r2
   b751a:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b751c:	f7ff ff36 	bl	b738c <_ZN6AB180510tmToStringEPK2tm>
   b7520:	481e      	ldr	r0, [pc, #120]	; (b759c <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b7522:	9a02      	ldr	r2, [sp, #8]
   b7524:	491e      	ldr	r1, [pc, #120]	; (b75a0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b7526:	f7fc fe0a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b752a:	a802      	add	r0, sp, #8
   b752c:	f007 fada 	bl	beae4 <_ZN6StringD1Ev>
    if (lock) {
   b7530:	b116      	cbz	r6, b7538 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b7532:	6868      	ldr	r0, [r5, #4]
   b7534:	f005 fd4e 	bl	bcfd4 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b7538:	4620      	mov	r0, r4
   b753a:	2201      	movs	r2, #1
   b753c:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b7540:	2700      	movs	r7, #0
   b7542:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b7546:	f7ff ffb8 	bl	b74ba <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b754a:	2301      	movs	r3, #1
   b754c:	461a      	mov	r2, r3
   b754e:	2110      	movs	r1, #16
   b7550:	4628      	mov	r0, r5
   b7552:	f7ff fd8d 	bl	b7070 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b7556:	4604      	mov	r4, r0
   b7558:	b1e8      	cbz	r0, b7596 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b755a:	2308      	movs	r3, #8
   b755c:	9700      	str	r7, [sp, #0]
   b755e:	eb0d 0203 	add.w	r2, sp, r3
   b7562:	4639      	mov	r1, r7
   b7564:	4628      	mov	r0, r5
   b7566:	f7ff fc3b 	bl	b6de0 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b756a:	4604      	mov	r4, r0
   b756c:	b160      	cbz	r0, b7588 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b756e:	2301      	movs	r3, #1
   b7570:	461a      	mov	r2, r3
   b7572:	2110      	movs	r1, #16
   b7574:	4628      	mov	r0, r5
   b7576:	f7ff fd1a 	bl	b6fae <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b757a:	b116      	cbz	r6, b7582 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b757c:	6868      	ldr	r0, [r5, #4]
   b757e:	f005 fd32 	bl	bcfe6 <_ZN7TwoWire6unlockEv>
}
   b7582:	4620      	mov	r0, r4
   b7584:	b007      	add	sp, #28
   b7586:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b7588:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b758c:	4905      	ldr	r1, [pc, #20]	; (b75a4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b758e:	4803      	ldr	r0, [pc, #12]	; (b759c <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b7590:	f7ff fb54 	bl	b6c3c <_ZNK5spark6Logger5errorEPKcz>
   b7594:	e7f1      	b.n	b757a <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b7596:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b759a:	e7f7      	b.n	b758c <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b759c:	2003e434 	.word	0x2003e434
   b75a0:	000c1750 	.word	0x000c1750
   b75a4:	000c175e 	.word	0x000c175e

000b75a8 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b75a8:	b513      	push	{r0, r1, r4, lr}
   b75aa:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b75ac:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b75ae:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b75b2:	f008 fe49 	bl	c0248 <gmtime>
    return setRtcFromTm(tm, lock);
   b75b6:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b75ba:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b75bc:	4620      	mov	r0, r4
   b75be:	f7ff ffa7 	bl	b7510 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b75c2:	b002      	add	sp, #8
   b75c4:	bd10      	pop	{r4, pc}
	...

000b75c8 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b75c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b75ca:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b75cc:	b089      	sub	sp, #36	; 0x24
   b75ce:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b75d0:	bb75      	cbnz	r5, b7630 <_ZN6AB18054loopEv+0x68>
   b75d2:	f007 fe1d 	bl	bf210 <_ZN9TimeClass7isValidEv>
   b75d6:	b358      	cbz	r0, b7630 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b75d8:	2600      	movs	r6, #0
   b75da:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b75dc:	a904      	add	r1, sp, #16
   b75de:	4628      	mov	r0, r5
        tm = 0;
   b75e0:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b75e4:	f004 fe92 	bl	bc30c <spark_sync_time_last>
   b75e8:	b310      	cbz	r0, b7630 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b75ea:	2501      	movs	r5, #1
   b75ec:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b75ee:	f007 fe2c 	bl	bf24a <_ZN9TimeClass3nowEv>
   b75f2:	17c3      	asrs	r3, r0, #31
   b75f4:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b75f8:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b75fa:	9500      	str	r5, [sp, #0]
   b75fc:	4620      	mov	r0, r4
   b75fe:	f7ff ffd3 	bl	b75a8 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b7602:	a902      	add	r1, sp, #8
   b7604:	4620      	mov	r0, r4
        time = 0;
   b7606:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b760a:	f7ff ff39 	bl	b7480 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b760e:	4b13      	ldr	r3, [pc, #76]	; (b765c <_ZN6AB18054loopEv+0x94>)
   b7610:	4913      	ldr	r1, [pc, #76]	; (b7660 <_ZN6AB18054loopEv+0x98>)
   b7612:	681b      	ldr	r3, [r3, #0]
   b7614:	9300      	str	r3, [sp, #0]
   b7616:	a804      	add	r0, sp, #16
   b7618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b761c:	f007 fdb6 	bl	bf18c <_ZN9TimeClass6formatExPKc>
   b7620:	4810      	ldr	r0, [pc, #64]	; (b7664 <_ZN6AB18054loopEv+0x9c>)
   b7622:	9a04      	ldr	r2, [sp, #16]
   b7624:	4910      	ldr	r1, [pc, #64]	; (b7668 <_ZN6AB18054loopEv+0xa0>)
   b7626:	f7fc fd8a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b762a:	a804      	add	r0, sp, #16
   b762c:	f007 fa5a 	bl	beae4 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b7630:	6963      	ldr	r3, [r4, #20]
   b7632:	b18b      	cbz	r3, b7658 <_ZN6AB18054loopEv+0x90>
   b7634:	f004 fb4e 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b7638:	6923      	ldr	r3, [r4, #16]
   b763a:	1ac0      	subs	r0, r0, r3
   b763c:	6963      	ldr	r3, [r4, #20]
   b763e:	4298      	cmp	r0, r3
   b7640:	d30a      	bcc.n	b7658 <_ZN6AB18054loopEv+0x90>
   b7642:	f004 fb47 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b7646:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b764a:	6120      	str	r0, [r4, #16]
            setWDT();
   b764c:	4620      	mov	r0, r4
}
   b764e:	b009      	add	sp, #36	; 0x24
   b7650:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b7654:	f7ff bc0c 	b.w	b6e70 <_ZN6AB18056setWDTEi>
}
   b7658:	b009      	add	sp, #36	; 0x24
   b765a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b765c:	2003d768 	.word	0x2003d768
   b7660:	2003e6a8 	.word	0x2003e6a8
   b7664:	2003e434 	.word	0x2003e434
   b7668:	000c1779 	.word	0x000c1779

000b766c <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b766c:	b530      	push	{r4, r5, lr}
   b766e:	4604      	mov	r4, r0
   b7670:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b7672:	b111      	cbz	r1, b767a <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b7674:	6840      	ldr	r0, [r0, #4]
   b7676:	f005 fc5b 	bl	bcf30 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b767a:	4620      	mov	r0, r4
   b767c:	f7ff fb64 	bl	b6d48 <_ZN6AB180510detectChipEv>
   b7680:	ad06      	add	r5, sp, #24
   b7682:	2800      	cmp	r0, #0
   b7684:	d037      	beq.n	b76f6 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b7686:	4620      	mov	r0, r4
   b7688:	f7ff fc9c 	bl	b6fc4 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b768c:	2301      	movs	r3, #1
   b768e:	461a      	mov	r2, r3
   b7690:	2110      	movs	r1, #16
   b7692:	4620      	mov	r0, r4
   b7694:	f7ff fc6d 	bl	b6f72 <_ZN6AB180510isBitClearEhhb>
   b7698:	b1d8      	cbz	r0, b76d2 <_ZN6AB18055setupEb+0x66>
   b769a:	f007 fdb9 	bl	bf210 <_ZN9TimeClass7isValidEv>
   b769e:	b9c0      	cbnz	r0, b76d2 <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b76a0:	a902      	add	r1, sp, #8
   b76a2:	4620      	mov	r0, r4
   b76a4:	f7ff feec 	bl	b7480 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b76a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b76ac:	f007 fcb4 	bl	bf018 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b76b0:	4b13      	ldr	r3, [pc, #76]	; (b7700 <_ZN6AB18055setupEb+0x94>)
   b76b2:	4914      	ldr	r1, [pc, #80]	; (b7704 <_ZN6AB18055setupEb+0x98>)
   b76b4:	681b      	ldr	r3, [r3, #0]
   b76b6:	9300      	str	r3, [sp, #0]
   b76b8:	4628      	mov	r0, r5
   b76ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b76be:	f007 fd65 	bl	bf18c <_ZN9TimeClass6formatExPKc>
   b76c2:	4811      	ldr	r0, [pc, #68]	; (b7708 <_ZN6AB18055setupEb+0x9c>)
   b76c4:	9a06      	ldr	r2, [sp, #24]
   b76c6:	4911      	ldr	r1, [pc, #68]	; (b770c <_ZN6AB18055setupEb+0xa0>)
   b76c8:	f7fc fd39 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b76cc:	4628      	mov	r0, r5
   b76ce:	f007 fa09 	bl	beae4 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b76d2:	4b0f      	ldr	r3, [pc, #60]	; (b7710 <_ZN6AB18055setupEb+0xa4>)
   b76d4:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b76d6:	4b0f      	ldr	r3, [pc, #60]	; (b7714 <_ZN6AB18055setupEb+0xa8>)
   b76d8:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b76da:	4b0f      	ldr	r3, [pc, #60]	; (b7718 <_ZN6AB18055setupEb+0xac>)
   b76dc:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b76de:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b76e2:	2300      	movs	r3, #0
   b76e4:	a802      	add	r0, sp, #8
   b76e6:	9500      	str	r5, [sp, #0]
   b76e8:	f7fd fdfc 	bl	b52e4 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b76ec:	4628      	mov	r0, r5
   b76ee:	f7fd fc66 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
}
   b76f2:	b00b      	add	sp, #44	; 0x2c
   b76f4:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b76f6:	4909      	ldr	r1, [pc, #36]	; (b771c <_ZN6AB18055setupEb+0xb0>)
   b76f8:	4803      	ldr	r0, [pc, #12]	; (b7708 <_ZN6AB18055setupEb+0x9c>)
   b76fa:	f7ff fa9f 	bl	b6c3c <_ZNK5spark6Logger5errorEPKcz>
   b76fe:	e7e8      	b.n	b76d2 <_ZN6AB18055setupEb+0x66>
   b7700:	2003d768 	.word	0x2003d768
   b7704:	2003e6a8 	.word	0x2003e6a8
   b7708:	2003e434 	.word	0x2003e434
   b770c:	000c178f 	.word	0x000c178f
   b7710:	000b6ef5 	.word	0x000b6ef5
   b7714:	000b4f9b 	.word	0x000b4f9b
   b7718:	000b4f87 	.word	0x000b4f87
   b771c:	000c17ac 	.word	0x000c17ac

000b7720 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b7720:	4b01      	ldr	r3, [pc, #4]	; (b7728 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b7722:	4a02      	ldr	r2, [pc, #8]	; (b772c <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b7724:	601a      	str	r2, [r3, #0]
}
   b7726:	4770      	bx	lr
   b7728:	2003e434 	.word	0x2003e434
   b772c:	000c17c4 	.word	0x000c17c4

000b7730 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b7730:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b7732:	2301      	movs	r3, #1
   b7734:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b7736:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b7738:	4604      	mov	r4, r0
        if (th->func) {
   b773a:	b143      	cbz	r3, b774e <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b773c:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b773e:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b7740:	2301      	movs	r3, #1
   b7742:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b7744:	2000      	movs	r0, #0
    }
   b7746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b774a:	f004 ba93 	b.w	bbc74 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b774e:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b7750:	2800      	cmp	r0, #0
   b7752:	d0f5      	beq.n	b7740 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b7754:	6883      	ldr	r3, [r0, #8]
   b7756:	b90b      	cbnz	r3, b775c <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b7758:	f008 f892 	bl	bf880 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b775c:	68c3      	ldr	r3, [r0, #12]
   b775e:	e7ee      	b.n	b773e <_ZN6Thread3runEPv+0xe>

000b7760 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b7760:	2a01      	cmp	r2, #1
   b7762:	d102      	bne.n	b776a <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7764:	6001      	str	r1, [r0, #0]
      }
   b7766:	2000      	movs	r0, #0
   b7768:	4770      	bx	lr
	  switch (__op)
   b776a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b776c:	bf04      	itt	eq
   b776e:	680b      	ldreq	r3, [r1, #0]
   b7770:	6003      	streq	r3, [r0, #0]
	      break;
   b7772:	e7f8      	b.n	b7766 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b7774 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b7774:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b7776:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b7778:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b777a:	b135      	cbz	r5, b778a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b777c:	4628      	mov	r0, r5
   b777e:	f7fd fc1e 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b7782:	2110      	movs	r1, #16
   b7784:	4628      	mov	r0, r5
   b7786:	f7fc fc8a 	bl	b409e <_ZdlPvj>
   b778a:	4620      	mov	r0, r4
   b778c:	2114      	movs	r1, #20
      }
   b778e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b7792:	f7fc bc84 	b.w	b409e <_ZdlPvj>

000b7796 <_ZN6Thread7disposeEv>:
    void dispose()
   b7796:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7798:	6803      	ldr	r3, [r0, #0]
   b779a:	4604      	mov	r4, r0
        if (!isValid())
   b779c:	b1ab      	cbz	r3, b77ca <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b779e:	6858      	ldr	r0, [r3, #4]
   b77a0:	f004 fa18 	bl	bbbd4 <os_thread_is_current>
   b77a4:	b988      	cbnz	r0, b77ca <_ZN6Thread7disposeEv+0x34>
   b77a6:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b77a8:	7c5a      	ldrb	r2, [r3, #17]
   b77aa:	b912      	cbnz	r2, b77b2 <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b77ac:	6858      	ldr	r0, [r3, #4]
   b77ae:	f004 fa19 	bl	bbbe4 <os_thread_join>
        os_thread_cleanup(d_->handle);
   b77b2:	6823      	ldr	r3, [r4, #0]
   b77b4:	6858      	ldr	r0, [r3, #4]
   b77b6:	f004 fa1d 	bl	bbbf4 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b77ba:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b77bc:	2300      	movs	r3, #0
   b77be:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b77c0:	b118      	cbz	r0, b77ca <_ZN6Thread7disposeEv+0x34>
    }
   b77c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b77c6:	f7ff bfd5 	b.w	b7774 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b77ca:	bd10      	pop	{r4, pc}

000b77cc <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b77cc:	4a05      	ldr	r2, [pc, #20]	; (b77e4 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b77ce:	6002      	str	r2, [r0, #0]
   b77d0:	2200      	movs	r2, #0
   b77d2:	6042      	str	r2, [r0, #4]
   b77d4:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b77d6:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b77da:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b77de:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b77e2:	4770      	bx	lr
   b77e4:	000c1804 	.word	0x000c1804

000b77e8 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b77e8:	b510      	push	{r4, lr}
    if (!_instance) {
   b77ea:	4c07      	ldr	r4, [pc, #28]	; (b7808 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b77ec:	6823      	ldr	r3, [r4, #0]
   b77ee:	b943      	cbnz	r3, b7802 <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b77f0:	f240 4064 	movw	r0, #1124	; 0x464
   b77f4:	f7fc fc4f 	bl	b4096 <_Znwj>
   b77f8:	4603      	mov	r3, r0
   b77fa:	b108      	cbz	r0, b7800 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b77fc:	f7ff ffe6 	bl	b77cc <_ZN19BackgroundPublishRKC1Ev>
   b7800:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b7802:	6820      	ldr	r0, [r4, #0]
   b7804:	bd10      	pop	{r4, pc}
   b7806:	bf00      	nop
   b7808:	2003e43c 	.word	0x2003e43c

000b780c <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b780c:	b538      	push	{r3, r4, r5, lr}
   b780e:	4604      	mov	r4, r0
    if(thread)
   b7810:	6840      	ldr	r0, [r0, #4]
   b7812:	b190      	cbz	r0, b783a <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b7814:	2302      	movs	r3, #2
   b7816:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b7818:	f7ff ffbd 	bl	b7796 <_ZN6Thread7disposeEv>
        delete thread;
   b781c:	6865      	ldr	r5, [r4, #4]
   b781e:	b155      	cbz	r5, b7836 <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b7820:	4628      	mov	r0, r5
   b7822:	f7ff ffb8 	bl	b7796 <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b7826:	6828      	ldr	r0, [r5, #0]
   b7828:	b108      	cbz	r0, b782e <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b782a:	f7ff ffa3 	bl	b7774 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b782e:	2104      	movs	r1, #4
   b7830:	4628      	mov	r0, r5
   b7832:	f7fc fc34 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b7836:	2300      	movs	r3, #0
   b7838:	6063      	str	r3, [r4, #4]
    }
}
   b783a:	bd38      	pop	{r3, r4, r5, pc}

000b783c <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b783c:	b510      	push	{r4, lr}
   b783e:	4b05      	ldr	r3, [pc, #20]	; (b7854 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b7840:	6003      	str	r3, [r0, #0]
   b7842:	4604      	mov	r4, r0
    stop();
   b7844:	f7ff ffe2 	bl	b780c <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b7848:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b784c:	f7fd fbb7 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
}
   b7850:	4620      	mov	r0, r4
   b7852:	bd10      	pop	{r4, pc}
   b7854:	000c1804 	.word	0x000c1804

000b7858 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b7858:	b510      	push	{r4, lr}
   b785a:	4604      	mov	r4, r0
}
   b785c:	f7ff ffee 	bl	b783c <_ZN19BackgroundPublishRKD1Ev>
   b7860:	4620      	mov	r0, r4
   b7862:	f240 4164 	movw	r1, #1124	; 0x464
   b7866:	f7fc fc1a 	bl	b409e <_ZdlPvj>
   b786a:	4620      	mov	r0, r4
   b786c:	bd10      	pop	{r4, pc}

000b786e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b786e:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b7870:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b7872:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b7874:	b17c      	cbz	r4, b7896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b7876:	6863      	ldr	r3, [r4, #4]
   b7878:	3b01      	subs	r3, #1
   b787a:	6063      	str	r3, [r4, #4]
   b787c:	b95b      	cbnz	r3, b7896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b787e:	6823      	ldr	r3, [r4, #0]
   b7880:	4620      	mov	r0, r4
   b7882:	689b      	ldr	r3, [r3, #8]
   b7884:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7886:	68a3      	ldr	r3, [r4, #8]
   b7888:	3b01      	subs	r3, #1
   b788a:	60a3      	str	r3, [r4, #8]
   b788c:	b91b      	cbnz	r3, b7896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b788e:	6823      	ldr	r3, [r4, #0]
   b7890:	4620      	mov	r0, r4
   b7892:	68db      	ldr	r3, [r3, #12]
   b7894:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b7896:	4628      	mov	r0, r5
   b7898:	bd38      	pop	{r3, r4, r5, pc}

000b789a <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b789a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b789c:	4604      	mov	r4, r0
   b789e:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b78a0:	f100 060d 	add.w	r6, r0, #13
   b78a4:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b78a8:	7b23      	ldrb	r3, [r4, #12]
   b78aa:	b91b      	cbnz	r3, b78b4 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b78ac:	2001      	movs	r0, #1
   b78ae:	f004 fe25 	bl	bc4fc <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b78b2:	e7f9      	b.n	b78a8 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b78b4:	7b23      	ldrb	r3, [r4, #12]
   b78b6:	2b02      	cmp	r3, #2
   b78b8:	d064      	beq.n	b7984 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b78ba:	68a0      	ldr	r0, [r4, #8]
   b78bc:	f004 f9aa 	bl	bbc14 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b78c0:	68a0      	ldr	r0, [r4, #8]
   b78c2:	f004 f9af 	bl	bbc24 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b78c6:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b78ca:	f88d 3000 	strb.w	r3, [sp]
   b78ce:	463a      	mov	r2, r7
   b78d0:	233c      	movs	r3, #60	; 0x3c
   b78d2:	4631      	mov	r1, r6
   b78d4:	a806      	add	r0, sp, #24
   b78d6:	f005 f8dd 	bl	bca94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b78da:	9d06      	ldr	r5, [sp, #24]
   b78dc:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b78de:	b933      	cbnz	r3, b78ee <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b78e0:	7b23      	ldrb	r3, [r4, #12]
   b78e2:	2b02      	cmp	r3, #2
   b78e4:	d003      	beq.n	b78ee <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b78e6:	2001      	movs	r0, #1
   b78e8:	f004 fe08 	bl	bc4fc <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b78ec:	e7f5      	b.n	b78da <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b78ee:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b78f2:	b31b      	cbz	r3, b793c <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b78f4:	2000      	movs	r0, #0
   b78f6:	f004 fc6f 	bl	bc1d8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b78fa:	b120      	cbz	r0, b7906 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b78fc:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b78fe:	b913      	cbnz	r3, b7906 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b7900:	f004 fccc 	bl	bc29c <spark_process>
    }
   b7904:	e7fa      	b.n	b78fc <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b7906:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b7908:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b790c:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b790e:	1e59      	subs	r1, r3, #1
   b7910:	424b      	negs	r3, r1
   b7912:	414b      	adcs	r3, r1
   b7914:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b7918:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b791c:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b7920:	b90b      	cbnz	r3, b7926 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b7922:	f007 ffad 	bl	bf880 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7926:	ab05      	add	r3, sp, #20
   b7928:	9300      	str	r3, [sp, #0]
   b792a:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b792e:	ab04      	add	r3, sp, #16
   b7930:	aa03      	add	r2, sp, #12
   b7932:	f10d 010b 	add.w	r1, sp, #11
   b7936:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b793a:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b793c:	68a0      	ldr	r0, [r4, #8]
   b793e:	f004 f969 	bl	bbc14 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b7942:	7b23      	ldrb	r3, [r4, #12]
   b7944:	2b02      	cmp	r3, #2
   b7946:	d017      	beq.n	b7978 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b7948:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b794c:	2500      	movs	r5, #0
   b794e:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b7952:	b143      	cbz	r3, b7966 <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b7954:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7958:	2203      	movs	r2, #3
   b795a:	4608      	mov	r0, r1
   b795c:	4798      	blx	r3
	    _M_manager = nullptr;
   b795e:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b7962:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b7966:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b7968:	68a0      	ldr	r0, [r4, #8]
   b796a:	7323      	strb	r3, [r4, #12]
   b796c:	f004 f95a 	bl	bbc24 <os_mutex_unlock>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b7970:	a807      	add	r0, sp, #28
   b7972:	f7ff ff7c 	bl	b786e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7976:	e797      	b.n	b78a8 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b7978:	68a0      	ldr	r0, [r4, #8]
   b797a:	f004 f953 	bl	bbc24 <os_mutex_unlock>
   b797e:	a807      	add	r0, sp, #28
   b7980:	f7ff ff75 	bl	b786e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b7984:	b009      	add	sp, #36	; 0x24
   b7986:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7988 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b7988:	6800      	ldr	r0, [r0, #0]
   b798a:	f7ff bf86 	b.w	b789a <_ZN19BackgroundPublishRK8thread_fEv>

000b798e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b798e:	b513      	push	{r0, r1, r4, lr}
   b7990:	460b      	mov	r3, r1
   b7992:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7994:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7998:	466c      	mov	r4, sp
   b799a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b799e:	e893 0003 	ldmia.w	r3, {r0, r1}
   b79a2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b79a6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b79aa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b79ae:	b002      	add	sp, #8
   b79b0:	bd10      	pop	{r4, pc}
	...

000b79b4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b79b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b79b8:	4606      	mov	r6, r0
   b79ba:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b79bc:	2014      	movs	r0, #20
   b79be:	4926      	ldr	r1, [pc, #152]	; (b7a58 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b79c0:	4617      	mov	r7, r2
   b79c2:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b79c4:	f007 ff52 	bl	bf86c <_ZnwjRKSt9nothrow_t>
   b79c8:	4604      	mov	r4, r0
   b79ca:	b130      	cbz	r0, b79da <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>
      : _M_head_impl() { }
   b79cc:	2000      	movs	r0, #0
            exited(false) {
   b79ce:	e9c4 0000 	strd	r0, r0, [r4]
   b79d2:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b79d6:	7420      	strb	r0, [r4, #16]
   b79d8:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b79da:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b79dc:	2c00      	cmp	r4, #0
   b79de:	d031      	beq.n	b7a44 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b79e0:	491d      	ldr	r1, [pc, #116]	; (b7a58 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b79e2:	2010      	movs	r0, #16
   b79e4:	f007 ff42 	bl	bf86c <_ZnwjRKSt9nothrow_t>
   b79e8:	4605      	mov	r5, r0
   b79ea:	b168      	cbz	r0, b7a08 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b79ec:	2300      	movs	r3, #0
   b79ee:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b79f0:	4601      	mov	r1, r0
   b79f2:	4638      	mov	r0, r7
   b79f4:	f7ff ffcb 	bl	b798e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b79f8:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b79fa:	68aa      	ldr	r2, [r5, #8]
   b79fc:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b79fe:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7a00:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a02:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7a04:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7a06:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b7a08:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b7a0a:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b7a0c:	b137      	cbz	r7, b7a1c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b7a0e:	4638      	mov	r0, r7
   b7a10:	f7fd fad5 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b7a14:	2110      	movs	r1, #16
   b7a16:	4638      	mov	r0, r7
   b7a18:	f7fc fb41 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7a1c:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b7a1e:	6803      	ldr	r3, [r0, #0]
   b7a20:	b183      	cbz	r3, b7a44 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b7a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7a24:	464a      	mov	r2, r9
   b7a26:	e9cd 0300 	strd	r0, r3, [sp]
   b7a2a:	4641      	mov	r1, r8
   b7a2c:	4b0b      	ldr	r3, [pc, #44]	; (b7a5c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b7a2e:	3004      	adds	r0, #4
   b7a30:	f004 f8c8 	bl	bbbc4 <os_thread_create>
   b7a34:	b930      	cbnz	r0, b7a44 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b7a36:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b7a38:	7c1b      	ldrb	r3, [r3, #16]
   b7a3a:	b94b      	cbnz	r3, b7a50 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b7a3c:	2001      	movs	r0, #1
   b7a3e:	f004 f939 	bl	bbcb4 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b7a42:	e7f8      	b.n	b7a36 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b7a44:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b7a46:	2300      	movs	r3, #0
   b7a48:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b7a4a:	b108      	cbz	r0, b7a50 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b7a4c:	f7ff fe92 	bl	b7774 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b7a50:	4630      	mov	r0, r6
   b7a52:	b003      	add	sp, #12
   b7a54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7a58:	000c2284 	.word	0x000c2284
   b7a5c:	000b7731 	.word	0x000b7731

000b7a60 <_ZN19BackgroundPublishRK5startEv>:
{
   b7a60:	b530      	push	{r4, r5, lr}
    if(!thread)
   b7a62:	6843      	ldr	r3, [r0, #4]
{
   b7a64:	b087      	sub	sp, #28
   b7a66:	4604      	mov	r4, r0
    if(!thread)
   b7a68:	b9c3      	cbnz	r3, b7a9c <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b7a6a:	3008      	adds	r0, #8
   b7a6c:	f004 f8ca 	bl	bbc04 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b7a70:	4b0b      	ldr	r3, [pc, #44]	; (b7aa0 <_ZN19BackgroundPublishRK5startEv+0x40>)
   b7a72:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b7a74:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b7a76:	4b0b      	ldr	r3, [pc, #44]	; (b7aa4 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b7a78:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b7a7a:	9304      	str	r3, [sp, #16]
   b7a7c:	f7fc fb0b 	bl	b4096 <_Znwj>
   b7a80:	4605      	mov	r5, r0
   b7a82:	b138      	cbz	r0, b7a94 <_ZN19BackgroundPublishRK5startEv+0x34>
   b7a84:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b7a88:	9300      	str	r3, [sp, #0]
   b7a8a:	4907      	ldr	r1, [pc, #28]	; (b7aa8 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b7a8c:	2302      	movs	r3, #2
   b7a8e:	aa02      	add	r2, sp, #8
   b7a90:	f7ff ff90 	bl	b79b4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b7a94:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b7a96:	a802      	add	r0, sp, #8
   b7a98:	f7fd fa91 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
}
   b7a9c:	b007      	add	sp, #28
   b7a9e:	bd30      	pop	{r4, r5, pc}
   b7aa0:	000b7989 	.word	0x000b7989
   b7aa4:	000b7761 	.word	0x000b7761
   b7aa8:	000c17e8 	.word	0x000c17e8

000b7aac <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b7aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7ab0:	4604      	mov	r4, r0
   b7ab2:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b7ab4:	6880      	ldr	r0, [r0, #8]
   b7ab6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b7ab8:	4698      	mov	r8, r3
   b7aba:	460d      	mov	r5, r1
   b7abc:	4616      	mov	r6, r2
   b7abe:	f004 f8a9 	bl	bbc14 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b7ac2:	6863      	ldr	r3, [r4, #4]
   b7ac4:	b11b      	cbz	r3, b7ace <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b7ac6:	7b23      	ldrb	r3, [r4, #12]
   b7ac8:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b7acc:	b133      	cbz	r3, b7adc <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b7ace:	68a0      	ldr	r0, [r4, #8]
   b7ad0:	f004 f8a8 	bl	bbc24 <os_mutex_unlock>
    {
        return false;
   b7ad4:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b7ad6:	b005      	add	sp, #20
   b7ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7adc:	68a0      	ldr	r0, [r4, #8]
   b7ade:	f004 f8a1 	bl	bbc24 <os_mutex_unlock>
    if(!name)
   b7ae2:	2d00      	cmp	r5, #0
   b7ae4:	d03d      	beq.n	b7b62 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b7ae6:	2240      	movs	r2, #64	; 0x40
   b7ae8:	4629      	mov	r1, r5
   b7aea:	f104 000d 	add.w	r0, r4, #13
   b7aee:	f008 fcd0 	bl	c0492 <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b7af2:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b7af6:	b38e      	cbz	r6, b7b5c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b7af8:	f240 4201 	movw	r2, #1025	; 0x401
   b7afc:	4631      	mov	r1, r6
   b7afe:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b7b02:	f008 fcc6 	bl	c0492 <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b7b06:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b7b0a:	2300      	movs	r3, #0
   b7b0c:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b7b0e:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b7b10:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b7b14:	b13b      	cbz	r3, b7b26 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7b16:	2202      	movs	r2, #2
   b7b18:	4639      	mov	r1, r7
   b7b1a:	4668      	mov	r0, sp
   b7b1c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7b1e:	68fb      	ldr	r3, [r7, #12]
   b7b20:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b7b22:	68bb      	ldr	r3, [r7, #8]
   b7b24:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b7b26:	4629      	mov	r1, r5
   b7b28:	4668      	mov	r0, sp
   b7b2a:	f7ff ff30 	bl	b798e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7b2e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7b30:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b7b34:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7b38:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7b3a:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b7b3c:	4668      	mov	r0, sp
   b7b3e:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b7b42:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b7b46:	9203      	str	r2, [sp, #12]
   b7b48:	f7fd fa39 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b7b4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b7b4e:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b7b52:	2001      	movs	r0, #1
    event_flags = flags;
   b7b54:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b7b58:	7320      	strb	r0, [r4, #12]
    return true;
   b7b5a:	e7bc      	b.n	b7ad6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b7b5c:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b7b60:	e7d3      	b.n	b7b0a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b7b62:	4628      	mov	r0, r5
   b7b64:	e7b7      	b.n	b7ad6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
	...

000b7b68 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b7b68:	b510      	push	{r4, lr}
   b7b6a:	4b05      	ldr	r3, [pc, #20]	; (b7b80 <_ZN10JsonBufferD1Ev+0x18>)
   b7b6c:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b7b6e:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b7b70:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b7b72:	b91b      	cbnz	r3, b7b7c <_ZN10JsonBufferD1Ev+0x14>
   b7b74:	6840      	ldr	r0, [r0, #4]
   b7b76:	b108      	cbz	r0, b7b7c <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b7b78:	f004 fc48 	bl	bc40c <free>
	}
}
   b7b7c:	4620      	mov	r0, r4
   b7b7e:	bd10      	pop	{r4, pc}
   b7b80:	000c181c 	.word	0x000c181c

000b7b84 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b7b84:	b510      	push	{r4, lr}
   b7b86:	4604      	mov	r4, r0
}
   b7b88:	f7ff ffee 	bl	b7b68 <_ZN10JsonBufferD1Ev>
   b7b8c:	4620      	mov	r0, r4
   b7b8e:	2114      	movs	r1, #20
   b7b90:	f7fc fa85 	bl	b409e <_ZdlPvj>
   b7b94:	4620      	mov	r0, r4
   b7b96:	bd10      	pop	{r4, pc}

000b7b98 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b7b98:	b510      	push	{r4, lr}
   b7b9a:	4b03      	ldr	r3, [pc, #12]	; (b7ba8 <_ZN10JsonWriterD1Ev+0x10>)
   b7b9c:	6003      	str	r3, [r0, #0]
   b7b9e:	4604      	mov	r4, r0
   b7ba0:	f7ff ffe2 	bl	b7b68 <_ZN10JsonBufferD1Ev>

}
   b7ba4:	4620      	mov	r0, r4
   b7ba6:	bd10      	pop	{r4, pc}
   b7ba8:	000c183c 	.word	0x000c183c

000b7bac <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b7bac:	b510      	push	{r4, lr}
   b7bae:	4604      	mov	r4, r0
}
   b7bb0:	f7ff fff2 	bl	b7b98 <_ZN10JsonWriterD1Ev>
   b7bb4:	4620      	mov	r0, r4
   b7bb6:	2130      	movs	r1, #48	; 0x30
   b7bb8:	f7fc fa71 	bl	b409e <_ZdlPvj>
   b7bbc:	4620      	mov	r0, r4
   b7bbe:	bd10      	pop	{r4, pc}

000b7bc0 <_ZN12JsonModifierD1Ev>:

JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {

}

JsonModifier::~JsonModifier() {
   b7bc0:	b510      	push	{r4, lr}
   b7bc2:	4b03      	ldr	r3, [pc, #12]	; (b7bd0 <_ZN12JsonModifierD1Ev+0x10>)
   b7bc4:	6003      	str	r3, [r0, #0]
   b7bc6:	4604      	mov	r4, r0
   b7bc8:	f7ff ffe6 	bl	b7b98 <_ZN10JsonWriterD1Ev>

}
   b7bcc:	4620      	mov	r0, r4
   b7bce:	bd10      	pop	{r4, pc}
   b7bd0:	000c184c 	.word	0x000c184c

000b7bd4 <_ZN12JsonModifierD0Ev>:
JsonModifier::~JsonModifier() {
   b7bd4:	b510      	push	{r4, lr}
   b7bd6:	4604      	mov	r4, r0
}
   b7bd8:	f7ff fff2 	bl	b7bc0 <_ZN12JsonModifierD1Ev>
   b7bdc:	4620      	mov	r0, r4
   b7bde:	2140      	movs	r1, #64	; 0x40
   b7be0:	f7fc fa5d 	bl	b409e <_ZdlPvj>
   b7be4:	4620      	mov	r0, r4
   b7be6:	bd10      	pop	{r4, pc}

000b7be8 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b7be8:	b510      	push	{r4, lr}
   b7bea:	4b07      	ldr	r3, [pc, #28]	; (b7c08 <_ZN10JsonParserD1Ev+0x20>)
   b7bec:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b7bee:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b7bf0:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b7bf2:	b91b      	cbnz	r3, b7bfc <_ZN10JsonParserD1Ev+0x14>
   b7bf4:	6940      	ldr	r0, [r0, #20]
   b7bf6:	b108      	cbz	r0, b7bfc <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b7bf8:	f004 fc08 	bl	bc40c <free>
JsonParser::~JsonParser() {
   b7bfc:	4620      	mov	r0, r4
   b7bfe:	f7ff ffb3 	bl	b7b68 <_ZN10JsonBufferD1Ev>
}
   b7c02:	4620      	mov	r0, r4
   b7c04:	bd10      	pop	{r4, pc}
   b7c06:	bf00      	nop
   b7c08:	000c182c 	.word	0x000c182c

000b7c0c <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b7c0c:	b510      	push	{r4, lr}
   b7c0e:	4604      	mov	r4, r0
}
   b7c10:	f7ff ffea 	bl	b7be8 <_ZN10JsonParserD1Ev>
   b7c14:	4620      	mov	r0, r4
   b7c16:	212c      	movs	r1, #44	; 0x2c
   b7c18:	f7fc fa41 	bl	b409e <_ZdlPvj>
   b7c1c:	4620      	mov	r0, r4
   b7c1e:	bd10      	pop	{r4, pc}

000b7c20 <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
   b7c20:	4a03      	ldr	r2, [pc, #12]	; (b7c30 <_ZN10JsonBufferC1Ev+0x10>)
   b7c22:	6002      	str	r2, [r0, #0]
   b7c24:	2200      	movs	r2, #0
   b7c26:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b7c2a:	60c2      	str	r2, [r0, #12]
   b7c2c:	7402      	strb	r2, [r0, #16]
}
   b7c2e:	4770      	bx	lr
   b7c30:	000c181c 	.word	0x000c181c

000b7c34 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b7c34:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b7c36:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b7c38:	4604      	mov	r4, r0
   b7c3a:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b7c3c:	b10b      	cbz	r3, b7c42 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b7c3e:	2000      	movs	r0, #0
}
   b7c40:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b7c42:	6840      	ldr	r0, [r0, #4]
   b7c44:	b138      	cbz	r0, b7c56 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b7c46:	f004 fbe9 	bl	bc41c <realloc>
		if (newBuffer) {
   b7c4a:	2800      	cmp	r0, #0
   b7c4c:	d0f7      	beq.n	b7c3e <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b7c4e:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b7c52:	2001      	movs	r0, #1
   b7c54:	e7f4      	b.n	b7c40 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b7c56:	4608      	mov	r0, r1
   b7c58:	f004 fbd0 	bl	bc3fc <malloc>
   b7c5c:	e7f5      	b.n	b7c4a <_ZN10JsonBuffer8allocateEj+0x16>

000b7c5e <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7c5e:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7c60:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7c62:	460e      	mov	r6, r1
   b7c64:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7c66:	18d1      	adds	r1, r2, r3
   b7c68:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7c6a:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7c6c:	b172      	cbz	r2, b7c8c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b7c6e:	6882      	ldr	r2, [r0, #8]
   b7c70:	428a      	cmp	r2, r1
   b7c72:	d30b      	bcc.n	b7c8c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b7c74:	6860      	ldr	r0, [r4, #4]
   b7c76:	68e3      	ldr	r3, [r4, #12]
   b7c78:	462a      	mov	r2, r5
   b7c7a:	4631      	mov	r1, r6
   b7c7c:	4418      	add	r0, r3
   b7c7e:	f008 fb09 	bl	c0294 <memcpy>
	offset += dataLen;
   b7c82:	68e2      	ldr	r2, [r4, #12]
   b7c84:	442a      	add	r2, r5
   b7c86:	60e2      	str	r2, [r4, #12]
	return true;
   b7c88:	2001      	movs	r0, #1
}
   b7c8a:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b7c8c:	4620      	mov	r0, r4
   b7c8e:	f7ff ffd1 	bl	b7c34 <_ZN10JsonBuffer8allocateEj>
   b7c92:	2800      	cmp	r0, #0
   b7c94:	d1ee      	bne.n	b7c74 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b7c96:	e7f8      	b.n	b7c8a <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b7c98 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b7c98:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b7c9a:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b7c9e:	2200      	movs	r2, #0
   b7ca0:	60c2      	str	r2, [r0, #12]
   b7ca2:	2201      	movs	r2, #1
   b7ca4:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b7ca6:	6143      	str	r3, [r0, #20]
   b7ca8:	4a02      	ldr	r2, [pc, #8]	; (b7cb4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b7caa:	9b02      	ldr	r3, [sp, #8]
   b7cac:	6002      	str	r2, [r0, #0]
   b7cae:	61c3      	str	r3, [r0, #28]
}
   b7cb0:	bd10      	pop	{r4, pc}
   b7cb2:	bf00      	nop
   b7cb4:	000c182c 	.word	0x000c182c

000b7cb8 <_ZNK10JsonParser13getOuterArrayEv>:
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b7cb8:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b7cbc:	4283      	cmp	r3, r0
   b7cbe:	d904      	bls.n	b7cca <_ZNK10JsonParser13getOuterArrayEv+0x12>
		if (token->type == JsonParserGeneratorRK::JSMN_ARRAY) {
   b7cc0:	7802      	ldrb	r2, [r0, #0]
   b7cc2:	2a02      	cmp	r2, #2
   b7cc4:	d002      	beq.n	b7ccc <_ZNK10JsonParser13getOuterArrayEv+0x14>
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b7cc6:	3010      	adds	r0, #16
   b7cc8:	e7f8      	b.n	b7cbc <_ZNK10JsonParser13getOuterArrayEv+0x4>
	return 0;
   b7cca:	2000      	movs	r0, #0
}
   b7ccc:	4770      	bx	lr

000b7cce <_ZNK10JsonParser14getOuterObjectEv>:
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   b7cce:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b7cd2:	4298      	cmp	r0, r3
   b7cd4:	d204      	bcs.n	b7ce0 <_ZNK10JsonParser14getOuterObjectEv+0x12>
   b7cd6:	7803      	ldrb	r3, [r0, #0]
		return 0;
   b7cd8:	2b01      	cmp	r3, #1
   b7cda:	bf18      	it	ne
   b7cdc:	2000      	movne	r0, #0
   b7cde:	4770      	bx	lr
   b7ce0:	2000      	movs	r0, #0
}
   b7ce2:	4770      	bx	lr

000b7ce4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b7ce4:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b7ce6:	6813      	ldr	r3, [r2, #0]
   b7ce8:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b7cea:	6813      	ldr	r3, [r2, #0]
   b7cec:	f103 0410 	add.w	r4, r3, #16
   b7cf0:	6014      	str	r4, [r2, #0]
   b7cf2:	6986      	ldr	r6, [r0, #24]
   b7cf4:	42b4      	cmp	r4, r6
   b7cf6:	d20a      	bcs.n	b7d0e <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b7cf8:	699b      	ldr	r3, [r3, #24]
   b7cfa:	688c      	ldr	r4, [r1, #8]
   b7cfc:	42a3      	cmp	r3, r4
   b7cfe:	da01      	bge.n	b7d04 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b7d00:	42ab      	cmp	r3, r5
   b7d02:	ddf2      	ble.n	b7cea <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b7d04:	42a3      	cmp	r3, r4
   b7d06:	bfcc      	ite	gt
   b7d08:	2000      	movgt	r0, #0
   b7d0a:	2001      	movle	r0, #1
   b7d0c:	e000      	b.n	b7d10 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b7d0e:	2000      	movs	r0, #0
}
   b7d10:	bd70      	pop	{r4, r5, r6, pc}

000b7d12 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b7d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7d14:	f101 0310 	add.w	r3, r1, #16
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b7d18:	4604      	mov	r4, r0
   b7d1a:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7d1c:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7d1e:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b7d20:	9801      	ldr	r0, [sp, #4]
   b7d22:	69a3      	ldr	r3, [r4, #24]
   b7d24:	4283      	cmp	r3, r0
   b7d26:	d90b      	bls.n	b7d40 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
   b7d28:	6882      	ldr	r2, [r0, #8]
   b7d2a:	688b      	ldr	r3, [r1, #8]
   b7d2c:	429a      	cmp	r2, r3
   b7d2e:	da07      	bge.n	b7d40 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
		if (desiredIndex == index) {
   b7d30:	42b5      	cmp	r5, r6
   b7d32:	d006      	beq.n	b7d42 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x30>
		skipObject(container, token);
   b7d34:	aa01      	add	r2, sp, #4
   b7d36:	4620      	mov	r0, r4
		index++;
   b7d38:	3501      	adds	r5, #1
		skipObject(container, token);
   b7d3a:	f7ff ffd3 	bl	b7ce4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7d3e:	e7ef      	b.n	b7d20 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0xe>
	return 0;
   b7d40:	2000      	movs	r0, #0
}
   b7d42:	b002      	add	sp, #8
   b7d44:	bd70      	pop	{r4, r5, r6, pc}

000b7d46 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7d46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7d4a:	9d08      	ldr	r5, [sp, #32]
   b7d4c:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7d4e:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7d52:	4604      	mov	r4, r0
   b7d54:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7d56:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7d58:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b7d5a:	9801      	ldr	r0, [sp, #4]
   b7d5c:	69a3      	ldr	r3, [r4, #24]
   b7d5e:	4283      	cmp	r3, r0
   b7d60:	d91a      	bls.n	b7d98 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b7d62:	6882      	ldr	r2, [r0, #8]
   b7d64:	688b      	ldr	r3, [r1, #8]
   b7d66:	429a      	cmp	r2, r3
   b7d68:	da16      	bge.n	b7d98 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b7d6a:	42ae      	cmp	r6, r5
   b7d6c:	d10b      	bne.n	b7d86 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b7d6e:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b7d70:	aa01      	add	r2, sp, #4
   b7d72:	4620      	mov	r0, r4
   b7d74:	f7ff ffb6 	bl	b7ce4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b7d78:	b128      	cbz	r0, b7d86 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b7d7a:	9b01      	ldr	r3, [sp, #4]
   b7d7c:	f8c8 3000 	str.w	r3, [r8]
}
   b7d80:	b002      	add	sp, #8
   b7d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b7d86:	aa01      	add	r2, sp, #4
   b7d88:	4620      	mov	r0, r4
   b7d8a:	f7ff ffab 	bl	b7ce4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b7d8e:	4620      	mov	r0, r4
		index++;
   b7d90:	3601      	adds	r6, #1
		skipObject(container, token);
   b7d92:	f7ff ffa7 	bl	b7ce4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7d96:	e7e0      	b.n	b7d5a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b7d98:	2000      	movs	r0, #0
   b7d9a:	e7f1      	b.n	b7d80 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b7d9c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b7d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7d9e:	3b01      	subs	r3, #1
   b7da0:	2400      	movs	r4, #0
   b7da2:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b7da6:	1bf6      	subs	r6, r6, r7
   b7da8:	42a6      	cmp	r6, r4
   b7daa:	dd08      	ble.n	b7dbe <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b7dac:	42a3      	cmp	r3, r4
   b7dae:	dd06      	ble.n	b7dbe <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b7db0:	6845      	ldr	r5, [r0, #4]
   b7db2:	443d      	add	r5, r7
   b7db4:	5d2d      	ldrb	r5, [r5, r4]
   b7db6:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7dba:	3401      	adds	r4, #1
   b7dbc:	e7f1      	b.n	b7da2 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b7dbe:	2300      	movs	r3, #0
   b7dc0:	7013      	strb	r3, [r2, #0]
}
   b7dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7dc4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b7dc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7dc6:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b7dc8:	2310      	movs	r3, #16
   b7dca:	466a      	mov	r2, sp
   b7dcc:	f7ff ffe6 	bl	b7d9c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b7dd0:	4904      	ldr	r1, [pc, #16]	; (b7de4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b7dd2:	4622      	mov	r2, r4
   b7dd4:	4668      	mov	r0, sp
   b7dd6:	f004 fb31 	bl	bc43c <sscanf>
}
   b7dda:	1e43      	subs	r3, r0, #1
   b7ddc:	4258      	negs	r0, r3
   b7dde:	4158      	adcs	r0, r3
   b7de0:	b004      	add	sp, #16
   b7de2:	bd10      	pop	{r4, pc}
   b7de4:	000c0cb2 	.word	0x000c0cb2

000b7de8 <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
   b7de8:	b510      	push	{r4, lr}
   b7dea:	4604      	mov	r4, r0
	if (str) {
   b7dec:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b7dee:	460b      	mov	r3, r1
	if (str) {
   b7df0:	b128      	cbz	r0, b7dfe <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b7df2:	f006 ff5a 	bl	becaa <_ZN6String6concatEc>
		length++;
   b7df6:	68e3      	ldr	r3, [r4, #12]
   b7df8:	3301      	adds	r3, #1
   b7dfa:	60e3      	str	r3, [r4, #12]
}
   b7dfc:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b7dfe:	6860      	ldr	r0, [r4, #4]
   b7e00:	2800      	cmp	r0, #0
   b7e02:	d0f8      	beq.n	b7df6 <_ZN16JsonParserString6appendEc+0xe>
   b7e04:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b7e08:	3a01      	subs	r2, #1
   b7e0a:	428a      	cmp	r2, r1
			buf[length] = ch;
   b7e0c:	bf88      	it	hi
   b7e0e:	5443      	strbhi	r3, [r0, r1]
   b7e10:	e7f1      	b.n	b7df6 <_ZN16JsonParserString6appendEc+0xe>

000b7e12 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7e12:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b7e14:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7e16:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7e18:	4608      	mov	r0, r1
		str.append((char)unicode);
   b7e1a:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b7e1c:	d804      	bhi.n	b7e28 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b7e1e:	b003      	add	sp, #12
   b7e20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b7e24:	f7ff bfe0 	b.w	b7de8 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b7e28:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b7e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b7e30:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b7e34:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b7e38:	d207      	bcs.n	b7e4a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b7e3a:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b7e3e:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b7e40:	f7ff ffd2 	bl	b7de8 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b7e44:	9801      	ldr	r0, [sp, #4]
   b7e46:	4621      	mov	r1, r4
   b7e48:	e7e9      	b.n	b7e1e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b7e4a:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b7e4c:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b7e50:	9001      	str	r0, [sp, #4]
   b7e52:	f7ff ffc9 	bl	b7de8 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b7e56:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b7e5a:	9801      	ldr	r0, [sp, #4]
   b7e5c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b7e60:	e7ee      	b.n	b7e40 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b7e64 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b7e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b7e68:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b7e6a:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7e6c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b7f3c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b7e70:	4680      	mov	r8, r0
   b7e72:	460f      	mov	r7, r1
   b7e74:	4615      	mov	r5, r2
			escape = false;
   b7e76:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b7e78:	68b8      	ldr	r0, [r7, #8]
   b7e7a:	42b0      	cmp	r0, r6
   b7e7c:	dd5a      	ble.n	b7f34 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b7e7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7e82:	5d99      	ldrb	r1, [r3, r6]
   b7e84:	199a      	adds	r2, r3, r6
		if (escape) {
   b7e86:	2c00      	cmp	r4, #0
   b7e88:	d04b      	beq.n	b7f22 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b7e8a:	2975      	cmp	r1, #117	; 0x75
   b7e8c:	d805      	bhi.n	b7e9a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b7e8e:	296d      	cmp	r1, #109	; 0x6d
   b7e90:	d807      	bhi.n	b7ea2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b7e92:	2962      	cmp	r1, #98	; 0x62
   b7e94:	d01e      	beq.n	b7ed4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b7e96:	2966      	cmp	r1, #102	; 0x66
   b7e98:	d01e      	beq.n	b7ed8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b7e9a:	4628      	mov	r0, r5
   b7e9c:	f7ff ffa4 	bl	b7de8 <_ZN16JsonParserString6appendEc>
				break;
   b7ea0:	e03d      	b.n	b7f1e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b7ea2:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b7ea6:	2c07      	cmp	r4, #7
   b7ea8:	d8f7      	bhi.n	b7e9a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b7eaa:	f20f 0c08 	addw	ip, pc, #8
   b7eae:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b7eb2:	bf00      	nop
   b7eb4:	000b7edd 	.word	0x000b7edd
   b7eb8:	000b7e9b 	.word	0x000b7e9b
   b7ebc:	000b7e9b 	.word	0x000b7e9b
   b7ec0:	000b7e9b 	.word	0x000b7e9b
   b7ec4:	000b7ee1 	.word	0x000b7ee1
   b7ec8:	000b7e9b 	.word	0x000b7e9b
   b7ecc:	000b7ee5 	.word	0x000b7ee5
   b7ed0:	000b7ee9 	.word	0x000b7ee9
				str.append('\b');
   b7ed4:	2108      	movs	r1, #8
   b7ed6:	e7e0      	b.n	b7e9a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b7ed8:	210c      	movs	r1, #12
   b7eda:	e7de      	b.n	b7e9a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b7edc:	210a      	movs	r1, #10
   b7ede:	e7dc      	b.n	b7e9a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b7ee0:	210d      	movs	r1, #13
   b7ee2:	e7da      	b.n	b7e9a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b7ee4:	2109      	movs	r1, #9
   b7ee6:	e7d8      	b.n	b7e9a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b7ee8:	1d31      	adds	r1, r6, #4
   b7eea:	4288      	cmp	r0, r1
   b7eec:	dd17      	ble.n	b7f1e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b7eee:	a902      	add	r1, sp, #8
   b7ef0:	3304      	adds	r3, #4
   b7ef2:	4433      	add	r3, r6
   b7ef4:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b7ef6:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b7efa:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b7efe:	429a      	cmp	r2, r3
   b7f00:	d1f9      	bne.n	b7ef6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7f02:	aa01      	add	r2, sp, #4
   b7f04:	4651      	mov	r1, sl
					tmp[4] = 0;
   b7f06:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7f0a:	f004 fa97 	bl	bc43c <sscanf>
   b7f0e:	2801      	cmp	r0, #1
   b7f10:	d105      	bne.n	b7f1e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b7f12:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b7f16:	4629      	mov	r1, r5
   b7f18:	f7ff ff7b 	bl	b7e12 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b7f1c:	3605      	adds	r6, #5
			escape = false;
   b7f1e:	2400      	movs	r4, #0
   b7f20:	e004      	b.n	b7f2c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b7f22:	295c      	cmp	r1, #92	; 0x5c
   b7f24:	d004      	beq.n	b7f30 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b7f26:	4628      	mov	r0, r5
   b7f28:	f7ff ff5e 	bl	b7de8 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b7f2c:	3601      	adds	r6, #1
   b7f2e:	e7a3      	b.n	b7e78 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b7f30:	2401      	movs	r4, #1
   b7f32:	e7fb      	b.n	b7f2c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b7f34:	2001      	movs	r0, #1
   b7f36:	b004      	add	sp, #16
   b7f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7f3c:	000c209d 	.word	0x000c209d

000b7f40 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b7f40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7f42:	460c      	mov	r4, r1
   b7f44:	4606      	mov	r6, r0
	result = "";
   b7f46:	490c      	ldr	r1, [pc, #48]	; (b7f78 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b7f48:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b7f4a:	4615      	mov	r5, r2
	result = "";
   b7f4c:	f006 fe73 	bl	bec36 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b7f50:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b7f54:	1ac9      	subs	r1, r1, r3
   b7f56:	3101      	adds	r1, #1
   b7f58:	4628      	mov	r0, r5
   b7f5a:	f006 fde1 	bl	beb20 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b7f5e:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b7f60:	466a      	mov	r2, sp
   b7f62:	4621      	mov	r1, r4
   b7f64:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b7f66:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b7f6a:	9500      	str	r5, [sp, #0]
   b7f6c:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b7f6e:	f7ff ff79 	bl	b7e64 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b7f72:	b004      	add	sp, #16
   b7f74:	bd70      	pop	{r4, r5, r6, pc}
   b7f76:	bf00      	nop
   b7f78:	000c20fc 	.word	0x000c20fc

000b7f7c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7f80:	b089      	sub	sp, #36	; 0x24
   b7f82:	4605      	mov	r5, r0
   b7f84:	4688      	mov	r8, r1
	String keyName;
   b7f86:	a804      	add	r0, sp, #16
   b7f88:	4912      	ldr	r1, [pc, #72]	; (b7fd4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7f8a:	4616      	mov	r6, r2
   b7f8c:	4699      	mov	r9, r3
	String keyName;
   b7f8e:	f006 fdf4 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b7f92:	2700      	movs	r7, #0
   b7f94:	9700      	str	r7, [sp, #0]
   b7f96:	464b      	mov	r3, r9
   b7f98:	aa03      	add	r2, sp, #12
   b7f9a:	4641      	mov	r1, r8
   b7f9c:	4628      	mov	r0, r5
   b7f9e:	f7ff fed2 	bl	b7d46 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b7fa2:	4604      	mov	r4, r0
   b7fa4:	b170      	cbz	r0, b7fc4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b7fa6:	9903      	ldr	r1, [sp, #12]
   b7fa8:	aa04      	add	r2, sp, #16
   b7faa:	4628      	mov	r0, r5
   b7fac:	f7ff ffc8 	bl	b7f40 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b7fb0:	4604      	mov	r4, r0
   b7fb2:	b908      	cbnz	r0, b7fb8 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b7fb4:	3701      	adds	r7, #1
   b7fb6:	e7ed      	b.n	b7f94 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b7fb8:	4631      	mov	r1, r6
   b7fba:	a804      	add	r0, sp, #16
   b7fbc:	f006 fea3 	bl	bed06 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b7fc0:	2800      	cmp	r0, #0
   b7fc2:	d0f7      	beq.n	b7fb4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b7fc4:	a804      	add	r0, sp, #16
   b7fc6:	f006 fd8d 	bl	beae4 <_ZN6StringD1Ev>
}
   b7fca:	4620      	mov	r0, r4
   b7fcc:	b009      	add	sp, #36	; 0x24
   b7fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7fd2:	bf00      	nop
   b7fd4:	000c20fc 	.word	0x000c20fc

000b7fd8 <_ZN10JsonWriter4initEv>:
	offset = 0;
   b7fd8:	2300      	movs	r3, #0
	context[contextIndex].isFirst = true;
   b7fda:	2201      	movs	r2, #1
	offset = 0;
   b7fdc:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b7fde:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b7fe0:	8302      	strh	r2, [r0, #24]
	truncated = false;
   b7fe2:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
   b7fe6:	4770      	bx	lr

000b7fe8 <_ZN10JsonWriterC1Ev>:
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b7fe8:	b508      	push	{r3, lr}
   b7fea:	4603      	mov	r3, r0
   b7fec:	f7ff fe18 	bl	b7c20 <_ZN10JsonBufferC1Ev>
   b7ff0:	4a04      	ldr	r2, [pc, #16]	; (b8004 <_ZN10JsonWriterC1Ev+0x1c>)
   b7ff2:	601a      	str	r2, [r3, #0]
   b7ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	init();
   b7ff8:	4618      	mov	r0, r3
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b7ffa:	62da      	str	r2, [r3, #44]	; 0x2c
	init();
   b7ffc:	f7ff ffec 	bl	b7fd8 <_ZN10JsonWriter4initEv>
}
   b8000:	bd08      	pop	{r3, pc}
   b8002:	bf00      	nop
   b8004:	000c183c 	.word	0x000c183c

000b8008 <_ZN10JsonWriter10insertCharEc>:
	if (offset < bufferLen) {
   b8008:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b800c:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b800e:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b8010:	bf3f      	itttt	cc
   b8012:	6842      	ldrcc	r2, [r0, #4]
   b8014:	1c5c      	addcc	r4, r3, #1
   b8016:	60c4      	strcc	r4, [r0, #12]
   b8018:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
   b801a:	bf24      	itt	cs
   b801c:	2301      	movcs	r3, #1
   b801e:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
}
   b8022:	bd10      	pop	{r4, pc}

000b8024 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b8024:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b8026:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b8028:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b802a:	b143      	cbz	r3, b803e <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b802c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b8030:	7e59      	ldrb	r1, [r3, #25]
   b8032:	b109      	cbz	r1, b8038 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b8034:	f7ff ffe8 	bl	b8008 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b8038:	6963      	ldr	r3, [r4, #20]
   b803a:	3b01      	subs	r3, #1
   b803c:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b803e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b8042:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b8044:	4288      	cmp	r0, r1
   b8046:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b804a:	bf2a      	itet	cs
   b804c:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b804e:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b8050:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b8054:	bd10      	pop	{r4, pc}

000b8056 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b8056:	b570      	push	{r4, r5, r6, lr}
   b8058:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b805a:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b805e:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b8060:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b8062:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b8064:	4430      	add	r0, r6
   b8066:	460a      	mov	r2, r1
   b8068:	4629      	mov	r1, r5
   b806a:	f004 f9f7 	bl	bc45c <vsnprintf>
	if (count <= spaceAvailable) {
   b806e:	4285      	cmp	r5, r0
		offset += count;
   b8070:	bf2d      	iteet	cs
   b8072:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
   b8074:	68a3      	ldrcc	r3, [r4, #8]
   b8076:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b8078:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b807a:	bf36      	itet	cc
   b807c:	2301      	movcc	r3, #1
		offset += count;
   b807e:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b8080:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
}
   b8084:	bd70      	pop	{r4, r5, r6, pc}

000b8086 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b8086:	b40e      	push	{r1, r2, r3}
   b8088:	b503      	push	{r0, r1, lr}
   b808a:	aa03      	add	r2, sp, #12
   b808c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b8090:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b8092:	f7ff ffe0 	bl	b8056 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b8096:	b002      	add	sp, #8
   b8098:	f85d eb04 	ldr.w	lr, [sp], #4
   b809c:	b003      	add	sp, #12
   b809e:	4770      	bx	lr

000b80a0 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b80a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b80a4:	4604      	mov	r4, r0
   b80a6:	460e      	mov	r6, r1
	if (quoted) {
   b80a8:	4617      	mov	r7, r2
   b80aa:	b112      	cbz	r2, b80b2 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b80ac:	2122      	movs	r1, #34	; 0x22
   b80ae:	f7ff ffab 	bl	b8008 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b80b2:	f8df 810c 	ldr.w	r8, [pc, #268]	; b81c0 <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b80b6:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b80b8:	5d71      	ldrb	r1, [r6, r5]
   b80ba:	eb06 0905 	add.w	r9, r6, r5
   b80be:	2900      	cmp	r1, #0
   b80c0:	d074      	beq.n	b81ac <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b80c2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b80c6:	429a      	cmp	r2, r3
   b80c8:	d270      	bcs.n	b81ac <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b80ca:	060b      	lsls	r3, r1, #24
   b80cc:	d534      	bpl.n	b8138 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b80ce:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b80d2:	2be0      	cmp	r3, #224	; 0xe0
   b80d4:	f105 0901 	add.w	r9, r5, #1
   b80d8:	d11d      	bne.n	b8116 <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b80da:	f816 2009 	ldrb.w	r2, [r6, r9]
   b80de:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b80e2:	2b80      	cmp	r3, #128	; 0x80
   b80e4:	d139      	bne.n	b815a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b80e6:	f105 0902 	add.w	r9, r5, #2
   b80ea:	f816 3009 	ldrb.w	r3, [r6, r9]
   b80ee:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b80f2:	2880      	cmp	r0, #128	; 0x80
   b80f4:	d131      	bne.n	b815a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b80f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b80fa:	0192      	lsls	r2, r2, #6
   b80fc:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b8100:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b8104:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b8106:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b8108:	4641      	mov	r1, r8
   b810a:	4620      	mov	r0, r4
   b810c:	f7ff ffbb 	bl	b8086 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b8110:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b8112:	3501      	adds	r5, #1
   b8114:	e7d0      	b.n	b80b8 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b8116:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b811a:	2bc0      	cmp	r3, #192	; 0xc0
   b811c:	d11d      	bne.n	b815a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b811e:	f816 3009 	ldrb.w	r3, [r6, r9]
   b8122:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b8126:	2a80      	cmp	r2, #128	; 0x80
   b8128:	d117      	bne.n	b815a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b812a:	0189      	lsls	r1, r1, #6
   b812c:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b8130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b8134:	431a      	orrs	r2, r3
   b8136:	e7e7      	b.n	b8108 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b8138:	290d      	cmp	r1, #13
   b813a:	d80a      	bhi.n	b8152 <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b813c:	2907      	cmp	r1, #7
   b813e:	d90c      	bls.n	b815a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8140:	f1a1 0308 	sub.w	r3, r1, #8
   b8144:	2b05      	cmp	r3, #5
   b8146:	d808      	bhi.n	b815a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8148:	e8df f003 	tbb	[pc, r3]
   b814c:	07172309 	.word	0x07172309
   b8150:	1d11      	.short	0x1d11
   b8152:	2922      	cmp	r1, #34	; 0x22
   b8154:	d023      	beq.n	b819e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b8156:	295c      	cmp	r1, #92	; 0x5c
   b8158:	d021      	beq.n	b819e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b815a:	4620      	mov	r0, r4
   b815c:	e004      	b.n	b8168 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b815e:	215c      	movs	r1, #92	; 0x5c
   b8160:	4620      	mov	r0, r4
   b8162:	f7ff ff51 	bl	b8008 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b8166:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b8168:	f7ff ff4e 	bl	b8008 <_ZN10JsonWriter10insertCharEc>
				break;
   b816c:	e7d1      	b.n	b8112 <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b816e:	215c      	movs	r1, #92	; 0x5c
   b8170:	4620      	mov	r0, r4
   b8172:	f7ff ff49 	bl	b8008 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b8176:	2166      	movs	r1, #102	; 0x66
   b8178:	e7f6      	b.n	b8168 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b817a:	215c      	movs	r1, #92	; 0x5c
   b817c:	4620      	mov	r0, r4
   b817e:	f7ff ff43 	bl	b8008 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b8182:	216e      	movs	r1, #110	; 0x6e
   b8184:	e7f0      	b.n	b8168 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8186:	215c      	movs	r1, #92	; 0x5c
   b8188:	4620      	mov	r0, r4
   b818a:	f7ff ff3d 	bl	b8008 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b818e:	2172      	movs	r1, #114	; 0x72
   b8190:	e7ea      	b.n	b8168 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8192:	215c      	movs	r1, #92	; 0x5c
   b8194:	4620      	mov	r0, r4
   b8196:	f7ff ff37 	bl	b8008 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b819a:	2174      	movs	r1, #116	; 0x74
   b819c:	e7e4      	b.n	b8168 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b819e:	215c      	movs	r1, #92	; 0x5c
   b81a0:	4620      	mov	r0, r4
   b81a2:	f7ff ff31 	bl	b8008 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b81a6:	f899 1000 	ldrb.w	r1, [r9]
   b81aa:	e7dd      	b.n	b8168 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b81ac:	b12f      	cbz	r7, b81ba <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b81ae:	4620      	mov	r0, r4
   b81b0:	2122      	movs	r1, #34	; 0x22
}
   b81b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b81b6:	f7ff bf27 	b.w	b8008 <_ZN10JsonWriter10insertCharEc>
}
   b81ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b81be:	bf00      	nop
   b81c0:	000c180c 	.word	0x000c180c

000b81c4 <_ZN10JsonWriter20insertCheckSeparatorEv>:
	if (context[contextIndex].isFirst) {
   b81c4:	6942      	ldr	r2, [r0, #20]
   b81c6:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b81ca:	7e1a      	ldrb	r2, [r3, #24]
   b81cc:	b112      	cbz	r2, b81d4 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b81ce:	2200      	movs	r2, #0
   b81d0:	761a      	strb	r2, [r3, #24]
}
   b81d2:	4770      	bx	lr
		insertChar(',');
   b81d4:	212c      	movs	r1, #44	; 0x2c
   b81d6:	f7ff bf17 	b.w	b8008 <_ZN10JsonWriter10insertCharEc>

000b81da <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b81da:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b81dc:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b81de:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b81e0:	3301      	adds	r3, #1
   b81e2:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b81e4:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b81e6:	d80f      	bhi.n	b8208 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b81e8:	f7ff ffec 	bl	b81c4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b81ec:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b81ee:	9901      	ldr	r1, [sp, #4]
   b81f0:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b81f4:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b81f6:	2501      	movs	r5, #1
	contextIndex++;
   b81f8:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b81fa:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b81fc:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b81fe:	f7ff ff03 	bl	b8008 <_ZN10JsonWriter10insertCharEc>
   b8202:	4628      	mov	r0, r5
}
   b8204:	b002      	add	sp, #8
   b8206:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b8208:	2000      	movs	r0, #0
   b820a:	e7fb      	b.n	b8204 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b820c <_ZN12JsonModifierC1ER10JsonParser>:
JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {
   b820c:	b510      	push	{r4, lr}
   b820e:	4604      	mov	r4, r0
   b8210:	f7ff feea 	bl	b7fe8 <_ZN10JsonWriterC1Ev>
   b8214:	4b05      	ldr	r3, [pc, #20]	; (b822c <_ZN12JsonModifierC1ER10JsonParser+0x20>)
   b8216:	6023      	str	r3, [r4, #0]
   b8218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b821c:	2300      	movs	r3, #0
   b821e:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   b8222:	6321      	str	r1, [r4, #48]	; 0x30
   b8224:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   b8226:	4620      	mov	r0, r4
   b8228:	bd10      	pop	{r4, pc}
   b822a:	bf00      	nop
   b822c:	000c184c 	.word	0x000c184c

000b8230 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	init();

	return true;
}

bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b8230:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b8232:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b8234:	3301      	adds	r3, #1
bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b8236:	4604      	mov	r4, r0
   b8238:	460e      	mov	r6, r1
	if (start != -1) {
   b823a:	d129      	bne.n	b8290 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x60>
		// Modification or insertion already in progress
		return false;
	}

	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b823c:	688d      	ldr	r5, [r1, #8]
	origAfter = jp.getOffset() - start;
   b823e:	6b01      	ldr	r1, [r0, #48]	; 0x30
	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b8240:	3d01      	subs	r5, #1
   b8242:	6345      	str	r5, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b8244:	68cb      	ldr	r3, [r1, #12]
	origAfter = jp.getOffset() - start;
   b8246:	1b5a      	subs	r2, r3, r5
   b8248:	6382      	str	r2, [r0, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b824a:	6888      	ldr	r0, [r1, #8]
   b824c:	4428      	add	r0, r5
   b824e:	1ac3      	subs	r3, r0, r3

	if (origAfter > 0) {
   b8250:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b8252:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b8254:	dd04      	ble.n	b8260 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b8256:	6848      	ldr	r0, [r1, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + start, origAfter);
   b8258:	1941      	adds	r1, r0, r5
   b825a:	4418      	add	r0, r3
   b825c:	f008 f828 	bl	c02b0 <memmove>
   b8260:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b8262:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b8264:	6852      	ldr	r2, [r2, #4]
   b8266:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8268:	440a      	add	r2, r1
   b826a:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b826c:	2501      	movs	r5, #1
	this->bufferLen = bufferLen;
   b826e:	e9c4 2301 	strd	r2, r3, [r4, #4]
	init();
   b8272:	4620      	mov	r0, r4
	this->staticBuffers = true;
   b8274:	7425      	strb	r5, [r4, #16]
	init();
   b8276:	f7ff feaf 	bl	b7fd8 <_ZN10JsonWriter4initEv>
	context[contextIndex].isFirst = isFirst;
   b827a:	6963      	ldr	r3, [r4, #20]
   b827c:	f103 020c 	add.w	r2, r3, #12

	// If array is not empty, add a separator
	setIsFirst(arrayOrObjectToken->size == 0);
   b8280:	68f3      	ldr	r3, [r6, #12]
   b8282:	fab3 f383 	clz	r3, r3
   b8286:	095b      	lsrs	r3, r3, #5
   b8288:	f804 3012 	strb.w	r3, [r4, r2, lsl #1]
	context[contextIndex].isFirst = isFirst;
   b828c:	4628      	mov	r0, r5

	return true;
}
   b828e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b8290:	2000      	movs	r0, #0
   b8292:	e7fc      	b.n	b828e <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x5e>

000b8294 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b8294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b8298:	6844      	ldr	r4, [r0, #4]
   b829a:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b829e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b82a2:	f8d0 e000 	ldr.w	lr, [r0]
   b82a6:	4596      	cmp	lr, r2
   b82a8:	f080 81b9 	bcs.w	b861e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b82ac:	f811 800e 	ldrb.w	r8, [r1, lr]
   b82b0:	f1b8 0f00 	cmp.w	r8, #0
   b82b4:	f000 81b3 	beq.w	b861e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b82b8:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b82bc:	f000 8098 	beq.w	b83f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b82c0:	d833      	bhi.n	b832a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b82c2:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b82c6:	f000 80a6 	beq.w	b8416 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b82ca:	d810      	bhi.n	b82ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b82cc:	f1a8 0809 	sub.w	r8, r8, #9
   b82d0:	fa5f f888 	uxtb.w	r8, r8
   b82d4:	f1b8 0f17 	cmp.w	r8, #23
   b82d8:	d80d      	bhi.n	b82f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b82da:	4d9f      	ldr	r5, [pc, #636]	; (b8558 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b82dc:	fa0c f808 	lsl.w	r8, ip, r8
   b82e0:	ea18 0f05 	tst.w	r8, r5
   b82e4:	d007      	beq.n	b82f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b82e6:	6805      	ldr	r5, [r0, #0]
   b82e8:	3501      	adds	r5, #1
   b82ea:	6005      	str	r5, [r0, #0]
   b82ec:	e7d9      	b.n	b82a2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b82ee:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b82f2:	f000 8133 	beq.w	b855c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b82f6:	f8d0 8000 	ldr.w	r8, [r0]
   b82fa:	4542      	cmp	r2, r8
   b82fc:	d90e      	bls.n	b831c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b82fe:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8302:	b15d      	cbz	r5, b831c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b8304:	2d3a      	cmp	r5, #58	; 0x3a
   b8306:	f200 8169 	bhi.w	b85dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b830a:	2d1f      	cmp	r5, #31
   b830c:	f200 8151 	bhi.w	b85b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b8310:	2d0a      	cmp	r5, #10
   b8312:	f200 8160 	bhi.w	b85d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b8316:	2d08      	cmp	r5, #8
   b8318:	f240 8156 	bls.w	b85c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b831c:	2b00      	cmp	r3, #0
   b831e:	f040 8162 	bne.w	b85e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b8322:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b8326:	6005      	str	r5, [r0, #0]
   b8328:	e0a5      	b.n	b8476 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b832a:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b832e:	d037      	beq.n	b83a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b8330:	d82e      	bhi.n	b8390 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b8332:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b8336:	d033      	beq.n	b83a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b8338:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b833c:	d1db      	bne.n	b82f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b833e:	2b00      	cmp	r3, #0
   b8340:	d0d1      	beq.n	b82e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b8342:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b8346:	6845      	ldr	r5, [r0, #4]
   b8348:	3d01      	subs	r5, #1
   b834a:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b834e:	2d00      	cmp	r5, #0
   b8350:	db55      	blt.n	b83fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b8352:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b8356:	3701      	adds	r7, #1
   b8358:	d04d      	beq.n	b83f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b835a:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b835e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b8362:	d148      	bne.n	b83f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b8364:	f898 b000 	ldrb.w	fp, [r8]
   b8368:	45cb      	cmp	fp, r9
   b836a:	d14b      	bne.n	b8404 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b836c:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b8370:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b8374:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b8378:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b837c:	f8de 7004 	ldr.w	r7, [lr, #4]
   b8380:	3701      	adds	r7, #1
   b8382:	d042      	beq.n	b840a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b8384:	f8de 7008 	ldr.w	r7, [lr, #8]
   b8388:	3701      	adds	r7, #1
   b838a:	d13e      	bne.n	b840a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b838c:	6085      	str	r5, [r0, #8]
				break;
   b838e:	e7aa      	b.n	b82e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b8390:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b8394:	d1af      	bne.n	b82f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b8396:	2b00      	cmp	r3, #0
   b8398:	d0a5      	beq.n	b82e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b839a:	f04f 0901 	mov.w	r9, #1
   b839e:	e7d2      	b.n	b8346 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b83a0:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b83a2:	2b00      	cmp	r3, #0
   b83a4:	d09f      	beq.n	b82e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b83a6:	6845      	ldr	r5, [r0, #4]
   b83a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b83aa:	42af      	cmp	r7, r5
   b83ac:	d94a      	bls.n	b8444 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b83ae:	f105 0e01 	add.w	lr, r5, #1
   b83b2:	f8c0 e004 	str.w	lr, [r0, #4]
   b83b6:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b83ba:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b83be:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b83c2:	2500      	movs	r5, #0
   b83c4:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b83c8:	6885      	ldr	r5, [r0, #8]
   b83ca:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b83cc:	bf1f      	itttt	ne
   b83ce:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b83d2:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b83d6:	3501      	addne	r5, #1
   b83d8:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b83dc:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b83e0:	bf0c      	ite	eq
   b83e2:	2501      	moveq	r5, #1
   b83e4:	2502      	movne	r5, #2
   b83e6:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b83ea:	6805      	ldr	r5, [r0, #0]
   b83ec:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b83f0:	6845      	ldr	r5, [r0, #4]
   b83f2:	3d01      	subs	r5, #1
   b83f4:	e7ca      	b.n	b838c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b83f6:	3d01      	subs	r5, #1
   b83f8:	f1a8 0810 	sub.w	r8, r8, #16
   b83fc:	e7a7      	b.n	b834e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b83fe:	3501      	adds	r5, #1
   b8400:	f47f af71 	bne.w	b82e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b8404:	f06f 0401 	mvn.w	r4, #1
   b8408:	e01e      	b.n	b8448 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b840a:	3d01      	subs	r5, #1
   b840c:	1c6f      	adds	r7, r5, #1
   b840e:	f1ae 0e10 	sub.w	lr, lr, #16
   b8412:	d1b3      	bne.n	b837c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b8414:	e767      	b.n	b82e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b8416:	f10e 0901 	add.w	r9, lr, #1
   b841a:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b841e:	f8d0 8000 	ldr.w	r8, [r0]
   b8422:	4542      	cmp	r2, r8
   b8424:	f240 8093 	bls.w	b854e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b8428:	f811 5008 	ldrb.w	r5, [r1, r8]
   b842c:	2d00      	cmp	r5, #0
   b842e:	f000 808e 	beq.w	b854e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b8432:	2d22      	cmp	r5, #34	; 0x22
   b8434:	d130      	bne.n	b8498 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b8436:	b1f3      	cbz	r3, b8476 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b8438:	6845      	ldr	r5, [r0, #4]
   b843a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b843c:	42af      	cmp	r7, r5
   b843e:	d806      	bhi.n	b844e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b8440:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b8444:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b8448:	4620      	mov	r0, r4
   b844a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b844e:	f105 0e01 	add.w	lr, r5, #1
   b8452:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b8456:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b845a:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b845e:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b8462:	2700      	movs	r7, #0
   b8464:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b8466:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b846a:	f04f 0a03 	mov.w	sl, #3
   b846e:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b8472:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b8476:	6885      	ldr	r5, [r0, #8]
   b8478:	1c6f      	adds	r7, r5, #1
				count++;
   b847a:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b847e:	f43f af32 	beq.w	b82e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b8482:	2b00      	cmp	r3, #0
   b8484:	f43f af2f 	beq.w	b82e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b8488:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b848c:	f8de 500c 	ldr.w	r5, [lr, #12]
   b8490:	3501      	adds	r5, #1
   b8492:	f8ce 500c 	str.w	r5, [lr, #12]
   b8496:	e726      	b.n	b82e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b8498:	2d5c      	cmp	r5, #92	; 0x5c
   b849a:	d111      	bne.n	b84c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b849c:	f108 0501 	add.w	r5, r8, #1
   b84a0:	42aa      	cmp	r2, r5
   b84a2:	d90d      	bls.n	b84c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b84a4:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b84a6:	5d4d      	ldrb	r5, [r1, r5]
   b84a8:	2d75      	cmp	r5, #117	; 0x75
   b84aa:	d82b      	bhi.n	b8504 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b84ac:	2d6d      	cmp	r5, #109	; 0x6d
   b84ae:	d80b      	bhi.n	b84c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b84b0:	2d66      	cmp	r5, #102	; 0x66
   b84b2:	d827      	bhi.n	b8504 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b84b4:	2d5b      	cmp	r5, #91	; 0x5b
   b84b6:	d81d      	bhi.n	b84f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b84b8:	2d22      	cmp	r5, #34	; 0x22
   b84ba:	d001      	beq.n	b84c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b84bc:	2d2f      	cmp	r5, #47	; 0x2f
   b84be:	d121      	bne.n	b8504 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b84c0:	6805      	ldr	r5, [r0, #0]
   b84c2:	3501      	adds	r5, #1
   b84c4:	6005      	str	r5, [r0, #0]
   b84c6:	e7aa      	b.n	b841e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b84c8:	3d6e      	subs	r5, #110	; 0x6e
   b84ca:	2d07      	cmp	r5, #7
   b84cc:	d81a      	bhi.n	b8504 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b84ce:	a701      	add	r7, pc, #4	; (adr r7, b84d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b84d0:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b84d4:	000b84c1 	.word	0x000b84c1
   b84d8:	000b8505 	.word	0x000b8505
   b84dc:	000b8505 	.word	0x000b8505
   b84e0:	000b8505 	.word	0x000b8505
   b84e4:	000b84c1 	.word	0x000b84c1
   b84e8:	000b8505 	.word	0x000b8505
   b84ec:	000b84c1 	.word	0x000b84c1
   b84f0:	000b850b 	.word	0x000b850b
   b84f4:	3d5c      	subs	r5, #92	; 0x5c
   b84f6:	b2ed      	uxtb	r5, r5
   b84f8:	fa0c f505 	lsl.w	r5, ip, r5
   b84fc:	f240 4741 	movw	r7, #1089	; 0x441
   b8500:	423d      	tst	r5, r7
   b8502:	d1dd      	bne.n	b84c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b8504:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b8508:	e77c      	b.n	b8404 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b850a:	f108 0502 	add.w	r5, r8, #2
   b850e:	6005      	str	r5, [r0, #0]
   b8510:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8514:	f8d0 8000 	ldr.w	r8, [r0]
   b8518:	4542      	cmp	r2, r8
   b851a:	d803      	bhi.n	b8524 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b851c:	6805      	ldr	r5, [r0, #0]
   b851e:	3d01      	subs	r5, #1
   b8520:	6005      	str	r5, [r0, #0]
					break;
   b8522:	e7cd      	b.n	b84c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8524:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8528:	2d00      	cmp	r5, #0
   b852a:	d0f7      	beq.n	b851c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b852c:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b8530:	f1bb 0f09 	cmp.w	fp, #9
   b8534:	d904      	bls.n	b8540 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b8536:	f025 0520 	bic.w	r5, r5, #32
   b853a:	3d41      	subs	r5, #65	; 0x41
   b853c:	2d05      	cmp	r5, #5
   b853e:	d8e1      	bhi.n	b8504 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b8540:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8544:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b8548:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b854a:	d1e3      	bne.n	b8514 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b854c:	e7e6      	b.n	b851c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b854e:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b8552:	f06f 0402 	mvn.w	r4, #2
   b8556:	e777      	b.n	b8448 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b8558:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b855c:	2b00      	cmp	r3, #0
   b855e:	f43f aec2 	beq.w	b82e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b8562:	6885      	ldr	r5, [r0, #8]
   b8564:	1c6f      	adds	r7, r5, #1
   b8566:	f43f aebe 	beq.w	b82e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b856a:	012d      	lsls	r5, r5, #4
   b856c:	5d5d      	ldrb	r5, [r3, r5]
   b856e:	3d01      	subs	r5, #1
   b8570:	2d01      	cmp	r5, #1
   b8572:	f67f aeb8 	bls.w	b82e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b8576:	6845      	ldr	r5, [r0, #4]
   b8578:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b857c:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b8580:	f1b8 0f00 	cmp.w	r8, #0
   b8584:	f6ff aeaf 	blt.w	b82e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b8588:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b858c:	3d01      	subs	r5, #1
   b858e:	2d01      	cmp	r5, #1
   b8590:	d80a      	bhi.n	b85a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b8592:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b8596:	3501      	adds	r5, #1
   b8598:	d006      	beq.n	b85a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b859a:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b859e:	3501      	adds	r5, #1
   b85a0:	d102      	bne.n	b85a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b85a2:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b85a6:	e69e      	b.n	b82e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b85a8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b85ac:	f1ae 0e10 	sub.w	lr, lr, #16
   b85b0:	e7e6      	b.n	b8580 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b85b2:	f1a5 0920 	sub.w	r9, r5, #32
   b85b6:	4f24      	ldr	r7, [pc, #144]	; (b8648 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b85b8:	fa5f f989 	uxtb.w	r9, r9
   b85bc:	fa0c f909 	lsl.w	r9, ip, r9
   b85c0:	ea19 0f07 	tst.w	r9, r7
   b85c4:	f47f aeaa 	bne.w	b831c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b85c8:	3d20      	subs	r5, #32
   b85ca:	2d5e      	cmp	r5, #94	; 0x5e
   b85cc:	d89a      	bhi.n	b8504 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b85ce:	f108 0501 	add.w	r5, r8, #1
   b85d2:	6005      	str	r5, [r0, #0]
   b85d4:	e68f      	b.n	b82f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b85d6:	2d0d      	cmp	r5, #13
   b85d8:	d1f6      	bne.n	b85c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b85da:	e69f      	b.n	b831c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b85dc:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b85e0:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b85e4:	e7f8      	b.n	b85d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b85e6:	6845      	ldr	r5, [r0, #4]
   b85e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b85ea:	42af      	cmp	r7, r5
   b85ec:	f67f af28 	bls.w	b8440 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b85f0:	f105 0801 	add.w	r8, r5, #1
   b85f4:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b85f8:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b85fc:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b8600:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b8604:	2700      	movs	r7, #0
   b8606:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b8608:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b860c:	f04f 0a04 	mov.w	sl, #4
   b8610:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b8614:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b8618:	6805      	ldr	r5, [r0, #0]
   b861a:	3d01      	subs	r5, #1
   b861c:	e683      	b.n	b8326 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b861e:	2b00      	cmp	r3, #0
   b8620:	f43f af12 	beq.w	b8448 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b8624:	6842      	ldr	r2, [r0, #4]
   b8626:	1e51      	subs	r1, r2, #1
   b8628:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b862c:	2900      	cmp	r1, #0
   b862e:	f6ff af0b 	blt.w	b8448 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b8632:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b8636:	3201      	adds	r2, #1
   b8638:	d003      	beq.n	b8642 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b863a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b863e:	3201      	adds	r2, #1
   b8640:	d087      	beq.n	b8552 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b8642:	3901      	subs	r1, #1
   b8644:	3b10      	subs	r3, #16
   b8646:	e7f1      	b.n	b862c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b8648:	04001001 	.word	0x04001001

000b864c <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b864c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b864e:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b8650:	4604      	mov	r4, r0
	if (offset == 0) {
   b8652:	b912      	cbnz	r2, b865a <_ZN10JsonParser5parseEv+0xe>
		return false;
   b8654:	2000      	movs	r0, #0
}
   b8656:	b003      	add	sp, #12
   b8658:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b865a:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b865c:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b8660:	b1ab      	cbz	r3, b868e <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b8662:	2100      	movs	r1, #0
	parser->toknext = 0;
   b8664:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b8668:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b866c:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b866e:	69c1      	ldr	r1, [r0, #28]
   b8670:	9100      	str	r1, [sp, #0]
   b8672:	6841      	ldr	r1, [r0, #4]
   b8674:	4630      	mov	r0, r6
   b8676:	f7ff fe0d 	bl	b8294 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b867a:	1c43      	adds	r3, r0, #1
   b867c:	d128      	bne.n	b86d0 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b867e:	7c25      	ldrb	r5, [r4, #16]
   b8680:	2d00      	cmp	r5, #0
   b8682:	d1e7      	bne.n	b8654 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b8684:	6960      	ldr	r0, [r4, #20]
   b8686:	f003 fec1 	bl	bc40c <free>
			tokens = 0;
   b868a:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b868c:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b868e:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b8690:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b8694:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b8698:	68e2      	ldr	r2, [r4, #12]
   b869a:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b869c:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b869e:	9500      	str	r5, [sp, #0]
   b86a0:	462b      	mov	r3, r5
   b86a2:	4630      	mov	r0, r6
   b86a4:	f7ff fdf6 	bl	b8294 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b86a8:	2800      	cmp	r0, #0
   b86aa:	dbd3      	blt.n	b8654 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b86ac:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b86ae:	d017      	beq.n	b86e0 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b86b0:	0100      	lsls	r0, r0, #4
   b86b2:	f003 fea3 	bl	bc3fc <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b86b6:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b86b8:	6160      	str	r0, [r4, #20]
   b86ba:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b86bc:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b86be:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b86c2:	68e2      	ldr	r2, [r4, #12]
   b86c4:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b86c6:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b86c8:	4630      	mov	r0, r6
   b86ca:	f7ff fde3 	bl	b8294 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b86ce:	e001      	b.n	b86d4 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b86d0:	2800      	cmp	r0, #0
   b86d2:	dbbf      	blt.n	b8654 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b86d4:	6963      	ldr	r3, [r4, #20]
   b86d6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b86da:	61a0      	str	r0, [r4, #24]
	return true;
   b86dc:	2001      	movs	r0, #1
   b86de:	e7ba      	b.n	b8656 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b86e0:	6963      	ldr	r3, [r4, #20]
   b86e2:	61a3      	str	r3, [r4, #24]
   b86e4:	e7fa      	b.n	b86dc <_ZN10JsonParser5parseEv+0x90>

000b86e6 <_ZN12JsonModifier6finishEv>:
void JsonModifier::finish() {
   b86e6:	b538      	push	{r3, r4, r5, lr}
	if (start == -1) {
   b86e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b86ea:	1c5a      	adds	r2, r3, #1
void JsonModifier::finish() {
   b86ec:	4604      	mov	r4, r0
	if (start == -1) {
   b86ee:	d018      	beq.n	b8722 <_ZN12JsonModifier6finishEv+0x3c>
	if (origAfter > 0) {
   b86f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   b86f2:	2a00      	cmp	r2, #0
   b86f4:	dd08      	ble.n	b8708 <_ZN12JsonModifier6finishEv+0x22>
   b86f6:	6b01      	ldr	r1, [r0, #48]	; 0x30
		memmove(jp.getBuffer() + start + getOffset(), jp.getBuffer() + saveLoc, origAfter);
   b86f8:	68e5      	ldr	r5, [r4, #12]
   b86fa:	6848      	ldr	r0, [r1, #4]
   b86fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b86fe:	442b      	add	r3, r5
   b8700:	4401      	add	r1, r0
   b8702:	4418      	add	r0, r3
   b8704:	f007 fdd4 	bl	c02b0 <memmove>
	jp.setOffset(start + getOffset() + origAfter);
   b8708:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   b870c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b870e:	440b      	add	r3, r1
   b8710:	68e1      	ldr	r1, [r4, #12]
   b8712:	440b      	add	r3, r1
	void setOffset(size_t offset) { this->offset = offset; };
   b8714:	60d3      	str	r3, [r2, #12]
	jp.parse();
   b8716:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b8718:	f7ff ff98 	bl	b864c <_ZN10JsonParser5parseEv>
	start = -1;
   b871c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8720:	6363      	str	r3, [r4, #52]	; 0x34
}
   b8722:	bd38      	pop	{r3, r4, r5, pc}

000b8724 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b8724:	4770      	bx	lr

000b8726 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b8726:	4770      	bx	lr

000b8728 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b8728:	b510      	push	{r4, lr}
}
   b872a:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b872c:	4604      	mov	r4, r0
}
   b872e:	f7fb fcb6 	bl	b409e <_ZdlPvj>
   b8732:	4620      	mov	r0, r4
   b8734:	bd10      	pop	{r4, pc}

000b8736 <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b8736:	b510      	push	{r4, lr}
}
   b8738:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b873a:	4604      	mov	r4, r0
}
   b873c:	f7fb fcaf 	bl	b409e <_ZdlPvj>
   b8740:	4620      	mov	r0, r4
   b8742:	bd10      	pop	{r4, pc}

000b8744 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b8744:	b510      	push	{r4, lr}
   b8746:	4b05      	ldr	r3, [pc, #20]	; (b875c <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b8748:	4604      	mov	r4, r0
   b874a:	f840 3b1c 	str.w	r3, [r0], #28
   b874e:	f006 f9c9 	bl	beae4 <_ZN6StringD1Ev>
   b8752:	1d20      	adds	r0, r4, #4
   b8754:	f006 f9c6 	bl	beae4 <_ZN6StringD1Ev>
}
   b8758:	4620      	mov	r0, r4
   b875a:	bd10      	pop	{r4, pc}
   b875c:	000c18c0 	.word	0x000c18c0

000b8760 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b8760:	b510      	push	{r4, lr}
   b8762:	4604      	mov	r4, r0
}
   b8764:	f7ff ffee 	bl	b8744 <_ZN22LocalTimePosixTimezoneD1Ev>
   b8768:	4620      	mov	r0, r4
   b876a:	2158      	movs	r1, #88	; 0x58
   b876c:	f7fb fc97 	bl	b409e <_ZdlPvj>
   b8770:	4620      	mov	r0, r4
   b8772:	bd10      	pop	{r4, pc}

000b8774 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b8774:	b510      	push	{r4, lr}
   b8776:	4b04      	ldr	r3, [pc, #16]	; (b8788 <_ZN9LocalTimeD1Ev+0x14>)
   b8778:	4604      	mov	r4, r0
   b877a:	f840 3b04 	str.w	r3, [r0], #4
   b877e:	f7ff ffe1 	bl	b8744 <_ZN22LocalTimePosixTimezoneD1Ev>
   b8782:	4620      	mov	r0, r4
   b8784:	bd10      	pop	{r4, pc}
   b8786:	bf00      	nop
   b8788:	000c1890 	.word	0x000c1890

000b878c <_ZN9LocalTimeD0Ev>:
   b878c:	b510      	push	{r4, lr}
   b878e:	4604      	mov	r4, r0
   b8790:	f7ff fff0 	bl	b8774 <_ZN9LocalTimeD1Ev>
   b8794:	4620      	mov	r0, r4
   b8796:	2160      	movs	r1, #96	; 0x60
   b8798:	f7fb fc81 	bl	b409e <_ZdlPvj>
   b879c:	4620      	mov	r0, r4
   b879e:	bd10      	pop	{r4, pc}

000b87a0 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b87a0:	f020 0302 	bic.w	r3, r0, #2
   b87a4:	2b01      	cmp	r3, #1
   b87a6:	d003      	beq.n	b87b0 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b87a8:	1f43      	subs	r3, r0, #5
   b87aa:	4258      	negs	r0, r3
   b87ac:	4158      	adcs	r0, r3
   b87ae:	4770      	bx	lr
   b87b0:	4618      	mov	r0, r3
   b87b2:	4770      	bx	lr

000b87b4 <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b87b4:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b87b8:	7103      	strb	r3, [r0, #4]
   b87ba:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b87be:	7143      	strb	r3, [r0, #5]
   b87c0:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b87c4:	7183      	strb	r3, [r0, #6]
   b87c6:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b87ca:	71c3      	strb	r3, [r0, #7]
   b87cc:	4770      	bx	lr

000b87ce <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b87ce:	b538      	push	{r3, r4, r5, lr}
   b87d0:	4604      	mov	r4, r0
   b87d2:	460d      	mov	r5, r1
   b87d4:	3004      	adds	r0, #4
   b87d6:	3104      	adds	r1, #4
   b87d8:	f006 fa0b 	bl	bebf2 <_ZN6StringaSERKS_>
   b87dc:	f105 0114 	add.w	r1, r5, #20
   b87e0:	f104 0014 	add.w	r0, r4, #20
   b87e4:	f7ff ffe6 	bl	b87b4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b87e8:	f105 011c 	add.w	r1, r5, #28
   b87ec:	f104 001c 	add.w	r0, r4, #28
   b87f0:	f006 f9ff 	bl	bebf2 <_ZN6StringaSERKS_>
   b87f4:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b87f8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b87fc:	f7ff ffda 	bl	b87b4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b8800:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b8804:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b8808:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b880c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b8810:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b8814:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b8818:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b881c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b8820:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b8824:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8828:	f7ff ffc4 	bl	b87b4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b882c:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b8830:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b8834:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b8838:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b883c:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b8840:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b8844:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b8848:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b884c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b8850:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b8854:	f7ff ffae 	bl	b87b4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b8858:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b885c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b8860:	bd38      	pop	{r3, r4, r5, pc}

000b8862 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8862:	680b      	ldr	r3, [r1, #0]
   b8864:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b8866:	684b      	ldr	r3, [r1, #4]
   b8868:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b886a:	b113      	cbz	r3, b8872 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b886c:	685a      	ldr	r2, [r3, #4]
   b886e:	3201      	adds	r2, #1
   b8870:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8872:	4770      	bx	lr

000b8874 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b8874:	4a02      	ldr	r2, [pc, #8]	; (b8880 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b8876:	6002      	str	r2, [r0, #0]
   b8878:	684a      	ldr	r2, [r1, #4]
   b887a:	6042      	str	r2, [r0, #4]
   b887c:	4770      	bx	lr
   b887e:	bf00      	nop
   b8880:	000c18a0 	.word	0x000c18a0

000b8884 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   b8884:	694a      	ldr	r2, [r1, #20]
   b8886:	6803      	ldr	r3, [r0, #0]
   b8888:	f362 0316 	bfi	r3, r2, #0, #23
   b888c:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   b888e:	690b      	ldr	r3, [r1, #16]
   b8890:	1c5a      	adds	r2, r3, #1
   b8892:	8843      	ldrh	r3, [r0, #2]
   b8894:	f362 13ca 	bfi	r3, r2, #7, #4
   b8898:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   b889a:	68ca      	ldr	r2, [r1, #12]
   b889c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   b88a0:	f362 03c7 	bfi	r3, r2, #3, #5
   b88a4:	70c3      	strb	r3, [r0, #3]
}
   b88a6:	4770      	bx	lr

000b88a8 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b88a8:	4a02      	ldr	r2, [pc, #8]	; (b88b4 <_ZN12LocalTimeHMSC1Ev+0xc>)
   b88aa:	6002      	str	r2, [r0, #0]
   b88ac:	2200      	movs	r2, #0
   b88ae:	6042      	str	r2, [r0, #4]
}
   b88b0:	4770      	bx	lr
   b88b2:	bf00      	nop
   b88b4:	000c18a0 	.word	0x000c18a0

000b88b8 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b88b8:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b88ba:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b88bc:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b88be:	8083      	strh	r3, [r0, #4]
   b88c0:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b88c2:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b88c4:	ab05      	add	r3, sp, #20
   b88c6:	9300      	str	r3, [sp, #0]
   b88c8:	4913      	ldr	r1, [pc, #76]	; (b8918 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b88ca:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b88cc:	ab04      	add	r3, sp, #16
   b88ce:	aa03      	add	r2, sp, #12
   b88d0:	4628      	mov	r0, r5
   b88d2:	f003 fdb3 	bl	bc43c <sscanf>
   b88d6:	2803      	cmp	r0, #3
   b88d8:	d107      	bne.n	b88ea <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b88da:	9b03      	ldr	r3, [sp, #12]
   b88dc:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b88de:	9b04      	ldr	r3, [sp, #16]
   b88e0:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b88e2:	9b05      	ldr	r3, [sp, #20]
   b88e4:	71a3      	strb	r3, [r4, #6]
}
   b88e6:	b007      	add	sp, #28
   b88e8:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b88ea:	490c      	ldr	r1, [pc, #48]	; (b891c <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b88ec:	ab04      	add	r3, sp, #16
   b88ee:	aa03      	add	r2, sp, #12
   b88f0:	4628      	mov	r0, r5
   b88f2:	f003 fda3 	bl	bc43c <sscanf>
   b88f6:	2802      	cmp	r0, #2
   b88f8:	d104      	bne.n	b8904 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b88fa:	9b03      	ldr	r3, [sp, #12]
   b88fc:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b88fe:	9b04      	ldr	r3, [sp, #16]
   b8900:	7163      	strb	r3, [r4, #5]
   b8902:	e7f0      	b.n	b88e6 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b8904:	4906      	ldr	r1, [pc, #24]	; (b8920 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b8906:	aa03      	add	r2, sp, #12
   b8908:	4628      	mov	r0, r5
   b890a:	f003 fd97 	bl	bc43c <sscanf>
   b890e:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b8910:	bf04      	itt	eq
   b8912:	9b03      	ldreq	r3, [sp, #12]
   b8914:	7123      	strbeq	r3, [r4, #4]
}
   b8916:	e7e6      	b.n	b88e6 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b8918:	000c1854 	.word	0x000c1854
   b891c:	000c1857 	.word	0x000c1857
   b8920:	000c0cb2 	.word	0x000c0cb2

000b8924 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b8924:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b8928:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b892c:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b8930:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b8932:	bfb8      	it	lt
   b8934:	4808      	ldrlt	r0, [pc, #32]	; (b8958 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b8936:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b893a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b893e:	bfbd      	ittte	lt
   b8940:	fb00 3002 	mlalt	r0, r0, r2, r3
   b8944:	1840      	addlt	r0, r0, r1
   b8946:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b8948:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b894c:	bfa4      	itt	ge
   b894e:	fb00 3002 	mlage	r0, r0, r2, r3
   b8952:	1840      	addge	r0, r0, r1
}
   b8954:	4770      	bx	lr
   b8956:	bf00      	nop
   b8958:	fffff1f0 	.word	0xfffff1f0

000b895c <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   b895c:	b508      	push	{r3, lr}
   b895e:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   b8962:	b14b      	cbz	r3, b8978 <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   b8964:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   b8968:	b943      	cbnz	r3, b897c <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   b896a:	302c      	adds	r0, #44	; 0x2c
   b896c:	f7ff ffda 	bl	b8924 <_ZNK12LocalTimeHMS9toSecondsEv>
   b8970:	fab0 f080 	clz	r0, r0
   b8974:	0940      	lsrs	r0, r0, #5
   b8976:	bd08      	pop	{r3, pc}
   b8978:	2001      	movs	r0, #1
   b897a:	e7fc      	b.n	b8976 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   b897c:	2000      	movs	r0, #0
   b897e:	e7fa      	b.n	b8976 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000b8980 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b8980:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b8984:	b943      	cbnz	r3, b8998 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b8986:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b898a:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b898c:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b8990:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b8992:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b8996:	600b      	str	r3, [r1, #0]
}
   b8998:	4770      	bx	lr

000b899a <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b899a:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b899e:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b89a0:	b9b3      	cbnz	r3, b89d0 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b89a2:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b89a6:	688c      	ldr	r4, [r1, #8]
   b89a8:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b89aa:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b89ae:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b89b0:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b89b4:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b89b6:	bfb5      	itete	lt
   b89b8:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b89ba:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b89bc:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b89be:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b89c0:	bfb5      	itete	lt
   b89c2:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b89c6:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b89ca:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b89cc:	189b      	addge	r3, r3, r2
   b89ce:	600b      	str	r3, [r1, #0]
}
   b89d0:	bd30      	pop	{r4, r5, pc}
	...

000b89d4 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b89d4:	b508      	push	{r3, lr}
   b89d6:	4a05      	ldr	r2, [pc, #20]	; (b89ec <_ZN15LocalTimeChangeC1Ev+0x18>)
   b89d8:	6002      	str	r2, [r0, #0]
   b89da:	2200      	movs	r2, #0
   b89dc:	4603      	mov	r3, r0
   b89de:	6042      	str	r2, [r0, #4]
   b89e0:	3008      	adds	r0, #8
   b89e2:	f7ff ff61 	bl	b88a8 <_ZN12LocalTimeHMSC1Ev>
}
   b89e6:	4618      	mov	r0, r3
   b89e8:	bd08      	pop	{r3, pc}
   b89ea:	bf00      	nop
   b89ec:	000c18b0 	.word	0x000c18b0

000b89f0 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b89f0:	2300      	movs	r3, #0
   b89f2:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b89f4:	8183      	strh	r3, [r0, #12]
   b89f6:	7383      	strb	r3, [r0, #14]
}
   b89f8:	4770      	bx	lr
	...

000b89fc <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b89fc:	b530      	push	{r4, r5, lr}
   b89fe:	4604      	mov	r4, r0
   b8a00:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b8a02:	460d      	mov	r5, r1
   b8a04:	b111      	cbz	r1, b8a0c <_ZN15LocalTimeChange5parseEPKc+0x10>
   b8a06:	780b      	ldrb	r3, [r1, #0]
   b8a08:	2b4d      	cmp	r3, #77	; 0x4d
   b8a0a:	d005      	beq.n	b8a18 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b8a0c:	4620      	mov	r0, r4
}
   b8a0e:	b007      	add	sp, #28
   b8a10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b8a14:	f7ff bfec 	b.w	b89f0 <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b8a18:	ab05      	add	r3, sp, #20
   b8a1a:	9300      	str	r3, [sp, #0]
   b8a1c:	4911      	ldr	r1, [pc, #68]	; (b8a64 <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b8a1e:	ab04      	add	r3, sp, #16
   b8a20:	aa03      	add	r2, sp, #12
   b8a22:	4628      	mov	r0, r5
   b8a24:	f003 fd0a 	bl	bc43c <sscanf>
   b8a28:	2803      	cmp	r0, #3
   b8a2a:	d116      	bne.n	b8a5a <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b8a2c:	9b03      	ldr	r3, [sp, #12]
   b8a2e:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b8a30:	9b04      	ldr	r3, [sp, #16]
   b8a32:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b8a34:	9b05      	ldr	r3, [sp, #20]
   b8a36:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b8a38:	212f      	movs	r1, #47	; 0x2f
   b8a3a:	4628      	mov	r0, r5
   b8a3c:	f007 fcc6 	bl	c03cc <strchr>
        if (cp) {
   b8a40:	b140      	cbz	r0, b8a54 <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b8a42:	1c41      	adds	r1, r0, #1
   b8a44:	f104 0008 	add.w	r0, r4, #8
   b8a48:	f7ff ff36 	bl	b88b8 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b8a4c:	2301      	movs	r3, #1
   b8a4e:	71e3      	strb	r3, [r4, #7]
}
   b8a50:	b007      	add	sp, #28
   b8a52:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b8a54:	81a0      	strh	r0, [r4, #12]
   b8a56:	73a0      	strb	r0, [r4, #14]
}
   b8a58:	e7f8      	b.n	b8a4c <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b8a5a:	4620      	mov	r0, r4
   b8a5c:	f7ff ffc8 	bl	b89f0 <_ZN15LocalTimeChange5clearEv>
   b8a60:	e7f6      	b.n	b8a50 <_ZN15LocalTimeChange5parseEPKc+0x54>
   b8a62:	bf00      	nop
   b8a64:	000c186f 	.word	0x000c186f

000b8a68 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b8a68:	4b10      	ldr	r3, [pc, #64]	; (b8aac <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b8a6a:	4911      	ldr	r1, [pc, #68]	; (b8ab0 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b8a6c:	b510      	push	{r4, lr}
   b8a6e:	4604      	mov	r4, r0
   b8a70:	f840 3b04 	str.w	r3, [r0], #4
   b8a74:	f006 f881 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
   b8a78:	f104 0014 	add.w	r0, r4, #20
   b8a7c:	f7ff ff14 	bl	b88a8 <_ZN12LocalTimeHMSC1Ev>
   b8a80:	490b      	ldr	r1, [pc, #44]	; (b8ab0 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b8a82:	f104 001c 	add.w	r0, r4, #28
   b8a86:	f006 f878 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
   b8a8a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b8a8e:	f7ff ff0b 	bl	b88a8 <_ZN12LocalTimeHMSC1Ev>
   b8a92:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8a96:	f7ff ff9d 	bl	b89d4 <_ZN15LocalTimeChangeC1Ev>
   b8a9a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8a9e:	f7ff ff99 	bl	b89d4 <_ZN15LocalTimeChangeC1Ev>
   b8aa2:	2300      	movs	r3, #0
   b8aa4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b8aa8:	4620      	mov	r0, r4
   b8aaa:	bd10      	pop	{r4, pc}
   b8aac:	000c18c0 	.word	0x000c18c0
   b8ab0:	000c20fc 	.word	0x000c20fc

000b8ab4 <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b8ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8ab8:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b8aba:	4608      	mov	r0, r1
   b8abc:	f007 fcb0 	bl	c0420 <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b8ac0:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b8ac2:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b8ac4:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b8ac6:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b8aca:	493f      	ldr	r1, [pc, #252]	; (b8bc8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b8acc:	9801      	ldr	r0, [sp, #4]
   b8ace:	aa01      	add	r2, sp, #4
   b8ad0:	f007 fd2e 	bl	c0530 <strtok_r>
   b8ad4:	4601      	mov	r1, r0
   b8ad6:	2800      	cmp	r0, #0
   b8ad8:	d062      	beq.n	b8ba0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b8ada:	2d01      	cmp	r5, #1
   b8adc:	f105 0301 	add.w	r3, r5, #1
   b8ae0:	d053      	beq.n	b8b8a <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b8ae2:	2d02      	cmp	r5, #2
   b8ae4:	d056      	beq.n	b8b94 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b8ae6:	2d00      	cmp	r5, #0
   b8ae8:	d146      	bne.n	b8b78 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b8aea:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b8aec:	f892 9000 	ldrb.w	r9, [r2]
   b8af0:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b8af4:	4615      	mov	r5, r2
   b8af6:	4617      	mov	r7, r2
   b8af8:	f102 0201 	add.w	r2, r2, #1
   b8afc:	d8f6      	bhi.n	b8aec <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b8afe:	2200      	movs	r2, #0
   b8b00:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b8b02:	f104 001c 	add.w	r0, r4, #28
   b8b06:	f006 f896 	bl	bec36 <_ZN6StringaSEPKc>
                valid = true;
   b8b0a:	2201      	movs	r2, #1
                *cp = save2;
   b8b0c:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b8b10:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b8b14:	782a      	ldrb	r2, [r5, #0]
   b8b16:	b36a      	cbz	r2, b8b74 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b8b18:	f897 a000 	ldrb.w	sl, [r7]
   b8b1c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b8b20:	2a3f      	cmp	r2, #63	; 0x3f
   b8b22:	46b9      	mov	r9, r7
   b8b24:	46bb      	mov	fp, r7
   b8b26:	f107 0701 	add.w	r7, r7, #1
   b8b2a:	d9f5      	bls.n	b8b18 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b8b2c:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b8b2e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b8b32:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b8b36:	4629      	mov	r1, r5
   b8b38:	4638      	mov	r0, r7
   b8b3a:	f7ff febd 	bl	b88b8 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b8b3e:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b8b42:	f1ba 0f00 	cmp.w	sl, #0
   b8b46:	d015      	beq.n	b8b74 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b8b48:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b8b4a:	f81b ab01 	ldrb.w	sl, [fp], #1
   b8b4e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b8b52:	d8f9      	bhi.n	b8b48 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b8b54:	2200      	movs	r2, #0
   b8b56:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b8b58:	4649      	mov	r1, r9
   b8b5a:	1d20      	adds	r0, r4, #4
   b8b5c:	f006 f86b 	bl	bec36 <_ZN6StringaSEPKc>
                        *cp = save2;
   b8b60:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b8b64:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b8b68:	f1ba 0f00 	cmp.w	sl, #0
   b8b6c:	d006      	beq.n	b8b7c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b8b6e:	4629      	mov	r1, r5
   b8b70:	f7ff fea2 	bl	b88b8 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b8b74:	2501      	movs	r5, #1
   b8b76:	e7a8      	b.n	b8aca <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b8b78:	461d      	mov	r5, r3
   b8b7a:	e7a6      	b.n	b8aca <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b8b7c:	4639      	mov	r1, r7
   b8b7e:	f7ff fe19 	bl	b87b4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b8b82:	7e23      	ldrb	r3, [r4, #24]
   b8b84:	3b01      	subs	r3, #1
   b8b86:	7623      	strb	r3, [r4, #24]
   b8b88:	e7f4      	b.n	b8b74 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b8b8a:	4640      	mov	r0, r8
   b8b8c:	f7ff ff36 	bl	b89fc <_ZN15LocalTimeChange5parseEPKc>
                break;
   b8b90:	2502      	movs	r5, #2
   b8b92:	e79a      	b.n	b8aca <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b8b94:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8b98:	f7ff ff30 	bl	b89fc <_ZN15LocalTimeChange5parseEPKc>
                break;
   b8b9c:	2503      	movs	r5, #3
   b8b9e:	e794      	b.n	b8aca <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b8ba0:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b8ba4:	b143      	cbz	r3, b8bb8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b8ba6:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b8baa:	b92a      	cbnz	r2, b8bb8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b8bac:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8bb0:	f7ff ff1e 	bl	b89f0 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b8bb4:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b8bb8:	4630      	mov	r0, r6
   b8bba:	f003 fc27 	bl	bc40c <free>

    return valid;
}
   b8bbe:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b8bc2:	b003      	add	sp, #12
   b8bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8bc8:	000c1879 	.word	0x000c1879

000b8bcc <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b8bcc:	b538      	push	{r3, r4, r5, lr}
   b8bce:	4b13      	ldr	r3, [pc, #76]	; (b8c1c <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b8bd0:	4604      	mov	r4, r0
   b8bd2:	460d      	mov	r5, r1
   b8bd4:	f840 3b04 	str.w	r3, [r0], #4
   b8bd8:	4911      	ldr	r1, [pc, #68]	; (b8c20 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b8bda:	f005 ffce 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
   b8bde:	f104 0014 	add.w	r0, r4, #20
   b8be2:	f7ff fe61 	bl	b88a8 <_ZN12LocalTimeHMSC1Ev>
   b8be6:	490e      	ldr	r1, [pc, #56]	; (b8c20 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b8be8:	f104 001c 	add.w	r0, r4, #28
   b8bec:	f005 ffc5 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
   b8bf0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b8bf4:	f7ff fe58 	bl	b88a8 <_ZN12LocalTimeHMSC1Ev>
   b8bf8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8bfc:	f7ff feea 	bl	b89d4 <_ZN15LocalTimeChangeC1Ev>
   b8c00:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8c04:	f7ff fee6 	bl	b89d4 <_ZN15LocalTimeChangeC1Ev>
   b8c08:	2300      	movs	r3, #0
   b8c0a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b8c0e:	4629      	mov	r1, r5
   b8c10:	4620      	mov	r0, r4
   b8c12:	f7ff ff4f 	bl	b8ab4 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b8c16:	4620      	mov	r0, r4
   b8c18:	bd38      	pop	{r3, r4, r5, pc}
   b8c1a:	bf00      	nop
   b8c1c:	000c18c0 	.word	0x000c18c0
   b8c20:	000c20fc 	.word	0x000c20fc

000b8c24 <_ZNK14LocalTimeValue3hmsEv>:
    else {
        return tm_hour - 12;
    }
}

LocalTimeHMS LocalTimeValue::hms() const {
   b8c24:	b508      	push	{r3, lr}
   b8c26:	4603      	mov	r3, r0
    LocalTimeHMS result;
   b8c28:	f7ff fe3e 	bl	b88a8 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   b8c2c:	688a      	ldr	r2, [r1, #8]
   b8c2e:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   b8c30:	684a      	ldr	r2, [r1, #4]
   b8c32:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   b8c34:	680a      	ldr	r2, [r1, #0]
   b8c36:	719a      	strb	r2, [r3, #6]
    result.fromTimeInfo(this);
    return result;
}
   b8c38:	4618      	mov	r0, r3
   b8c3a:	bd08      	pop	{r3, pc}

000b8c3c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   b8c3c:	b513      	push	{r0, r1, r4, lr}
   b8c3e:	4b07      	ldr	r3, [pc, #28]	; (b8c5c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   b8c40:	6003      	str	r3, [r0, #0]
   b8c42:	2300      	movs	r3, #0
   b8c44:	6043      	str	r3, [r0, #4]
   b8c46:	4604      	mov	r4, r0
    *this = value.hms();
   b8c48:	4668      	mov	r0, sp
   b8c4a:	f7ff ffeb 	bl	b8c24 <_ZNK14LocalTimeValue3hmsEv>
   b8c4e:	4620      	mov	r0, r4
   b8c50:	4669      	mov	r1, sp
   b8c52:	f7ff fdaf 	bl	b87b4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
}
   b8c56:	b002      	add	sp, #8
   b8c58:	bd10      	pop	{r4, pc}
   b8c5a:	bf00      	nop
   b8c5c:	000c18a0 	.word	0x000c18a0

000b8c60 <_ZNK14LocalTimeValue3ymdEv>:
        tm_min = hms.minute;
        tm_sec = hms.second;
    }
}

LocalTimeYMD LocalTimeValue::ymd() const {
   b8c60:	b507      	push	{r0, r1, r2, lr}
    LocalTimeYMD() {
   b8c62:	2300      	movs	r3, #0
   b8c64:	4601      	mov	r1, r0
    LocalTimeYMD result;
    result.fromTimeInfo(this);
   b8c66:	a801      	add	r0, sp, #4
   b8c68:	9301      	str	r3, [sp, #4]
   b8c6a:	f7ff fe0b 	bl	b8884 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
    return result;
}
   b8c6e:	9801      	ldr	r0, [sp, #4]
   b8c70:	b003      	add	sp, #12
   b8c72:	f85d fb04 	ldr.w	pc, [sp], #4

000b8c76 <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>:
void LocalTimeYMD::fromLocalTimeValue(const LocalTimeValue &value) {
   b8c76:	b510      	push	{r4, lr}
   b8c78:	4604      	mov	r4, r0
    *this = value.ymd();
   b8c7a:	4608      	mov	r0, r1
   b8c7c:	f7ff fff0 	bl	b8c60 <_ZNK14LocalTimeValue3ymdEv>
   b8c80:	6020      	str	r0, [r4, #0]
}
   b8c82:	bd10      	pop	{r4, pc}

000b8c84 <_ZN16LocalTimeConvert7timeStrEv>:
        convert();
    }
}


String LocalTimeConvert::timeStr() {
   b8c84:	b510      	push	{r4, lr}
   b8c86:	4604      	mov	r4, r0
   b8c88:	b088      	sub	sp, #32
   b8c8a:	4608      	mov	r0, r1
    char ascstr[26];
    asctime_r(&localTimeValue, ascstr);
   b8c8c:	3068      	adds	r0, #104	; 0x68
   b8c8e:	a901      	add	r1, sp, #4
   b8c90:	f007 faae 	bl	c01f0 <asctime_r>
    int len = strlen(ascstr);
   b8c94:	a801      	add	r0, sp, #4
   b8c96:	f007 fbe0 	bl	c045a <strlen>
    ascstr[len-1] = 0; // remove final newline
   b8c9a:	ab08      	add	r3, sp, #32
   b8c9c:	4418      	add	r0, r3
   b8c9e:	2300      	movs	r3, #0
   b8ca0:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   b8ca4:	a901      	add	r1, sp, #4
   b8ca6:	4620      	mov	r0, r4
   b8ca8:	f005 ff67 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
}
   b8cac:	4620      	mov	r0, r4
   b8cae:	b008      	add	sp, #32
   b8cb0:	bd10      	pop	{r4, pc}
	...

000b8cb4 <_ZNK16LocalTimeConvert8zoneNameEv>:
    char buf[50] = {};
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
    return String(buf);    
}

String LocalTimeConvert::zoneName() const { 
   b8cb4:	b538      	push	{r3, r4, r5, lr}
   b8cb6:	4604      	mov	r4, r0
    if (config.isZ()) {
   b8cb8:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   b8cba:	460d      	mov	r5, r1
    if (config.isZ()) {
   b8cbc:	f7ff fe4e 	bl	b895c <_ZNK22LocalTimePosixTimezone3isZEv>
   b8cc0:	b128      	cbz	r0, b8cce <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   b8cc2:	4909      	ldr	r1, [pc, #36]	; (b8ce8 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   b8cc4:	4620      	mov	r0, r4
   b8cc6:	f005 ff58 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
        return config.dstName;
    }
    else {
        return config.standardName;
    }
};
   b8cca:	4620      	mov	r0, r4
   b8ccc:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   b8cce:	6828      	ldr	r0, [r5, #0]
   b8cd0:	f7ff fd66 	bl	b87a0 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b8cd4:	b128      	cbz	r0, b8ce2 <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   b8cd6:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   b8cda:	4620      	mov	r0, r4
   b8cdc:	f005 ff98 	bl	bec10 <_ZN6StringC1ERKS_>
   b8ce0:	e7f3      	b.n	b8cca <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   b8ce2:	f105 0120 	add.w	r1, r5, #32
   b8ce6:	e7f8      	b.n	b8cda <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   b8ce8:	000c187b 	.word	0x000c187b

000b8cec <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   b8cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8cf0:	4680      	mov	r8, r0
   b8cf2:	b0a8      	sub	sp, #160	; 0xa0
   b8cf4:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b8cf6:	4615      	mov	r5, r2
   b8cf8:	b12a      	cbz	r2, b8d06 <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   b8cfa:	4b47      	ldr	r3, [pc, #284]	; (b8e18 <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   b8cfc:	4610      	mov	r0, r2
   b8cfe:	6819      	ldr	r1, [r3, #0]
   b8d00:	f007 fb7b 	bl	c03fa <strcmp>
   b8d04:	b938      	cbnz	r0, b8d16 <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   b8d06:	4621      	mov	r1, r4
   b8d08:	4640      	mov	r0, r8
   b8d0a:	f7ff ffbb 	bl	b8c84 <_ZN16LocalTimeConvert7timeStrEv>
}
   b8d0e:	4640      	mov	r0, r8
   b8d10:	b028      	add	sp, #160	; 0xa0
   b8d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b8d16:	4629      	mov	r1, r5
   b8d18:	223f      	movs	r2, #63	; 0x3f
   b8d1a:	a818      	add	r0, sp, #96	; 0x60
   b8d1c:	f007 fbb9 	bl	c0492 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b8d20:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b8d22:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b8d24:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b8d28:	f007 fb97 	bl	c045a <strlen>
    String zoneNameStr = zoneName();
   b8d2c:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b8d2e:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   b8d30:	a803      	add	r0, sp, #12
   b8d32:	f7ff ffbf 	bl	b8cb4 <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   b8d36:	1d20      	adds	r0, r4, #4
   b8d38:	f7ff fe10 	bl	b895c <_ZNK22LocalTimePosixTimezone3isZEv>
   b8d3c:	b348      	cbz	r0, b8d92 <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   b8d3e:	4937      	ldr	r1, [pc, #220]	; (b8e1c <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   b8d40:	a807      	add	r0, sp, #28
   b8d42:	f007 fb64 	bl	c040e <strcpy>
   b8d46:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   b8d48:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   b8d4a:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   b8d4e:	45ba      	cmp	sl, r7
   b8d50:	d94c      	bls.n	b8dec <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b8d52:	7833      	ldrb	r3, [r6, #0]
   b8d54:	2b25      	cmp	r3, #37	; 0x25
   b8d56:	f107 0901 	add.w	r9, r7, #1
   b8d5a:	d117      	bne.n	b8d8c <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   b8d5c:	7873      	ldrb	r3, [r6, #1]
   b8d5e:	2b7a      	cmp	r3, #122	; 0x7a
   b8d60:	d136      	bne.n	b8dd0 <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   b8d62:	a807      	add	r0, sp, #28
   b8d64:	f007 fb79 	bl	c045a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b8d68:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   b8d6a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b8d6c:	1838      	adds	r0, r7, r0
   b8d6e:	ebaa 0207 	sub.w	r2, sl, r7
   b8d72:	1cb1      	adds	r1, r6, #2
   b8d74:	4418      	add	r0, r3
   b8d76:	f007 fa8d 	bl	c0294 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b8d7a:	462a      	mov	r2, r5
   b8d7c:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b8d7e:	4630      	mov	r0, r6
   b8d80:	f007 fa88 	bl	c0294 <memcpy>
            len = strlen(format_str);
   b8d84:	a818      	add	r0, sp, #96	; 0x60
   b8d86:	f007 fb68 	bl	c045a <strlen>
   b8d8a:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b8d8c:	3601      	adds	r6, #1
   b8d8e:	464f      	mov	r7, r9
   b8d90:	e7db      	b.n	b8d4a <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b8d92:	6820      	ldr	r0, [r4, #0]
   b8d94:	f7ff fd04 	bl	b87a0 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b8d98:	b1b8      	cbz	r0, b8dca <_ZN16LocalTimeConvert6formatEPKc+0xde>
   b8d9a:	f104 0018 	add.w	r0, r4, #24
   b8d9e:	f7ff fdc1 	bl	b8924 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   b8da2:	223c      	movs	r2, #60	; 0x3c
   b8da4:	fb90 f3f2 	sdiv	r3, r0, r2
   b8da8:	2b00      	cmp	r3, #0
   b8daa:	bfb8      	it	lt
   b8dac:	425b      	neglt	r3, r3
   b8dae:	fbb3 f1f2 	udiv	r1, r3, r2
   b8db2:	fb02 3311 	mls	r3, r2, r1, r3
   b8db6:	9300      	str	r3, [sp, #0]
   b8db8:	4a19      	ldr	r2, [pc, #100]	; (b8e20 <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   b8dba:	4b1a      	ldr	r3, [pc, #104]	; (b8e24 <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   b8dbc:	fb90 f3f3 	sdiv	r3, r0, r3
   b8dc0:	2110      	movs	r1, #16
   b8dc2:	a807      	add	r0, sp, #28
   b8dc4:	f003 fb42 	bl	bc44c <snprintf>
   b8dc8:	e7bd      	b.n	b8d46 <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b8dca:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b8dce:	e7e6      	b.n	b8d9e <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   b8dd0:	2b5a      	cmp	r3, #90	; 0x5a
   b8dd2:	d1db      	bne.n	b8d8c <_ZN16LocalTimeConvert6formatEPKc+0xa0>
	inline unsigned int length(void) const {return len;}
   b8dd4:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b8dd6:	ab18      	add	r3, sp, #96	; 0x60
   b8dd8:	1978      	adds	r0, r7, r5
   b8dda:	ebaa 0207 	sub.w	r2, sl, r7
   b8dde:	1cb1      	adds	r1, r6, #2
   b8de0:	4418      	add	r0, r3
   b8de2:	f007 fa57 	bl	c0294 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b8de6:	9903      	ldr	r1, [sp, #12]
   b8de8:	462a      	mov	r2, r5
   b8dea:	e7c8      	b.n	b8d7e <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   b8dec:	2100      	movs	r1, #0
   b8dee:	222e      	movs	r2, #46	; 0x2e
   b8df0:	a80c      	add	r0, sp, #48	; 0x30
   b8df2:	910b      	str	r1, [sp, #44]	; 0x2c
   b8df4:	f007 fa76 	bl	c02e4 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   b8df8:	f104 0368 	add.w	r3, r4, #104	; 0x68
   b8dfc:	aa18      	add	r2, sp, #96	; 0x60
   b8dfe:	2132      	movs	r1, #50	; 0x32
   b8e00:	a80b      	add	r0, sp, #44	; 0x2c
   b8e02:	f003 fb5b 	bl	bc4bc <strftime>
    return String(buf);    
   b8e06:	a90b      	add	r1, sp, #44	; 0x2c
   b8e08:	4640      	mov	r0, r8
   b8e0a:	f005 feb6 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   b8e0e:	a803      	add	r0, sp, #12
   b8e10:	f005 fe68 	bl	beae4 <_ZN6StringD1Ev>
   b8e14:	e77b      	b.n	b8d0e <_ZN16LocalTimeConvert6formatEPKc+0x22>
   b8e16:	bf00      	nop
   b8e18:	2003d768 	.word	0x2003d768
   b8e1c:	000c187b 	.word	0x000c187b
   b8e20:	000c187d 	.word	0x000c187d
   b8e24:	fffff1f0 	.word	0xfffff1f0

000b8e28 <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b8e28:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b8e2a:	4d09      	ldr	r5, [pc, #36]	; (b8e50 <_ZN9LocalTime8instanceEv+0x28>)
   b8e2c:	682b      	ldr	r3, [r5, #0]
   b8e2e:	b963      	cbnz	r3, b8e4a <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b8e30:	2060      	movs	r0, #96	; 0x60
   b8e32:	f7fb f930 	bl	b4096 <_Znwj>
   b8e36:	4604      	mov	r4, r0
   b8e38:	b130      	cbz	r0, b8e48 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b8e3a:	4b06      	ldr	r3, [pc, #24]	; (b8e54 <_ZN9LocalTime8instanceEv+0x2c>)
   b8e3c:	f840 3b04 	str.w	r3, [r0], #4
   b8e40:	f7ff fe12 	bl	b8a68 <_ZN22LocalTimePosixTimezoneC1Ev>
   b8e44:	2364      	movs	r3, #100	; 0x64
   b8e46:	65e3      	str	r3, [r4, #92]	; 0x5c
   b8e48:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b8e4a:	6828      	ldr	r0, [r5, #0]
   b8e4c:	bd38      	pop	{r3, r4, r5, pc}
   b8e4e:	bf00      	nop
   b8e50:	2003e440 	.word	0x2003e440
   b8e54:	000c1890 	.word	0x000c1890

000b8e58 <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b8e58:	f003 bb48 	b.w	bc4ec <mktime>

000b8e5c <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b8e5c:	3901      	subs	r1, #1
   b8e5e:	290b      	cmp	r1, #11
   b8e60:	d815      	bhi.n	b8e8e <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b8e62:	e8df f001 	tbb	[pc, r1]
   b8e66:	0816      	.short	0x0816
   b8e68:	06160616 	.word	0x06160616
   b8e6c:	16061616 	.word	0x16061616
   b8e70:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b8e72:	201e      	movs	r0, #30
   b8e74:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b8e76:	0783      	lsls	r3, r0, #30
   b8e78:	d10d      	bne.n	b8e96 <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b8e7a:	2364      	movs	r3, #100	; 0x64
   b8e7c:	fb90 f2f3 	sdiv	r2, r0, r3
   b8e80:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b8e84:	2800      	cmp	r0, #0
   b8e86:	bf0c      	ite	eq
   b8e88:	201c      	moveq	r0, #28
   b8e8a:	201d      	movne	r0, #29
   b8e8c:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b8e8e:	2000      	movs	r0, #0
   b8e90:	4770      	bx	lr
            return 31;
   b8e92:	201f      	movs	r0, #31
   b8e94:	4770      	bx	lr
                return 28;
   b8e96:	201c      	movs	r0, #28
}
   b8e98:	4770      	bx	lr

000b8e9a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b8e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b8e9c:	2301      	movs	r3, #1
   b8e9e:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b8ea0:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b8ea4:	3b01      	subs	r3, #1
   b8ea6:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b8ea8:	2300      	movs	r3, #0
   b8eaa:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b8eae:	4606      	mov	r6, r0
   b8eb0:	460c      	mov	r4, r1
   b8eb2:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b8eb4:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b8eb6:	4620      	mov	r0, r4
   b8eb8:	f7ff ffce 	bl	b8e58 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b8ebc:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b8ec0:	69a2      	ldr	r2, [r4, #24]
   b8ec2:	429a      	cmp	r2, r3
   b8ec4:	d003      	beq.n	b8ece <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b8ec6:	68e3      	ldr	r3, [r4, #12]
   b8ec8:	3301      	adds	r3, #1
   b8eca:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b8ecc:	e7f3      	b.n	b8eb6 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b8ece:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b8ed2:	2d01      	cmp	r5, #1
   b8ed4:	d013      	beq.n	b8efe <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b8ed6:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b8ed8:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b8eda:	3d01      	subs	r5, #1
   b8edc:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b8ee0:	441d      	add	r5, r3
   b8ee2:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b8ee4:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b8ee8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b8eec:	f7ff ffb6 	bl	b8e5c <_ZN9LocalTime14lastDayOfMonthEii>
   b8ef0:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b8ef2:	bfc4      	itt	gt
   b8ef4:	3d07      	subgt	r5, #7
   b8ef6:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b8ef8:	4620      	mov	r0, r4
   b8efa:	f7ff ffad 	bl	b8e58 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b8efe:	4621      	mov	r1, r4
   b8f00:	f106 0008 	add.w	r0, r6, #8
   b8f04:	f7ff fd3c 	bl	b8980 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b8f08:	4638      	mov	r0, r7
   b8f0a:	f7ff fd46 	bl	b899a <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b8f0e:	4620      	mov	r0, r4
}
   b8f10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b8f14:	f003 baea 	b.w	bc4ec <mktime>

000b8f18 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b8f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b8f1a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b8f1e:	b085      	sub	sp, #20
   b8f20:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b8f22:	b92b      	cbnz	r3, b8f30 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b8f24:	f7ff ff80 	bl	b8e28 <_ZN9LocalTime8instanceEv>
   b8f28:	1d01      	adds	r1, r0, #4
   b8f2a:	1d20      	adds	r0, r4, #4
   b8f2c:	f7ff fc4f 	bl	b87ce <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b8f30:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b8f34:	2b00      	cmp	r3, #0
   b8f36:	d065      	beq.n	b9004 <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b8f38:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b8f3c:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b8f40:	4639      	mov	r1, r7
   b8f42:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b8f44:	463e      	mov	r6, r7
   b8f46:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b8f4a:	f003 fabf 	bl	bc4cc <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b8f4e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b8f50:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b8f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8f56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b8f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8f5a:	6833      	ldr	r3, [r6, #0]
   b8f5c:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b8f5e:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b8f62:	a802      	add	r0, sp, #8
   b8f64:	f7ff fc86 	bl	b8874 <_ZN12LocalTimeHMSC1ERKS_>
   b8f68:	aa02      	add	r2, sp, #8
   b8f6a:	4639      	mov	r1, r7
   b8f6c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b8f70:	f7ff ff93 	bl	b8e9a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b8f74:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b8f78:	f104 0118 	add.w	r1, r4, #24
   b8f7c:	a802      	add	r0, sp, #8
   b8f7e:	f7ff fc79 	bl	b8874 <_ZN12LocalTimeHMSC1ERKS_>
   b8f82:	aa02      	add	r2, sp, #8
   b8f84:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b8f88:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b8f8c:	f7ff ff85 	bl	b8e9a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b8f90:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b8f94:	4286      	cmp	r6, r0
   b8f96:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b8f9a:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b8f9e:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b8fa2:	da23      	bge.n	b8fec <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b8fa4:	42b2      	cmp	r2, r6
   b8fa6:	eb73 0505 	sbcs.w	r5, r3, r5
   b8faa:	da19      	bge.n	b8fe0 <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b8fac:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b8fae:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b8fb0:	6820      	ldr	r0, [r4, #0]
   b8fb2:	f7ff fbf5 	bl	b87a0 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b8fb6:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b8fba:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b8fbe:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b8fc0:	bb10      	cbnz	r0, b9008 <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b8fc2:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b8fc6:	f7ff fcad 	bl	b8924 <_ZNK12LocalTimeHMS9toSecondsEv>
   b8fca:	1a2d      	subs	r5, r5, r0
   b8fcc:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b8fd0:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b8fd4:	9901      	ldr	r1, [sp, #4]
   b8fd6:	a802      	add	r0, sp, #8
   b8fd8:	f003 fa78 	bl	bc4cc <localtime_r>
}
   b8fdc:	b005      	add	sp, #20
   b8fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b8fe0:	4282      	cmp	r2, r0
   b8fe2:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b8fe4:	bfb4      	ite	lt
   b8fe6:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b8fe8:	2302      	movge	r3, #2
   b8fea:	e7e0      	b.n	b8fae <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b8fec:	4282      	cmp	r2, r0
   b8fee:	eb73 0101 	sbcs.w	r1, r3, r1
   b8ff2:	da01      	bge.n	b8ff8 <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b8ff4:	2303      	movs	r3, #3
   b8ff6:	e7da      	b.n	b8fae <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b8ff8:	42b2      	cmp	r2, r6
   b8ffa:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b8ffc:	bfb4      	ite	lt
   b8ffe:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b9000:	2305      	movge	r3, #5
   b9002:	e7d4      	b.n	b8fae <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b9004:	2306      	movs	r3, #6
   b9006:	e7d2      	b.n	b8fae <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b9008:	f104 0018 	add.w	r0, r4, #24
   b900c:	e7db      	b.n	b8fc6 <_ZN16LocalTimeConvert7convertEv+0xae>

000b900e <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b900e:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9010:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9012:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9014:	4668      	mov	r0, sp
   b9016:	f7ff fc24 	bl	b8862 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b901a:	466a      	mov	r2, sp
   b901c:	4629      	mov	r1, r5
   b901e:	4620      	mov	r0, r4
   b9020:	f004 f990 	bl	bd344 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9024:	a801      	add	r0, sp, #4
   b9026:	f7fe fc22 	bl	b786e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b902a:	4620      	mov	r0, r4
   b902c:	b003      	add	sp, #12
   b902e:	bd30      	pop	{r4, r5, pc}

000b9030 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9030:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9032:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9034:	4604      	mov	r4, r0
   b9036:	4668      	mov	r0, sp
   b9038:	f7ff fc13 	bl	b8862 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b903c:	466a      	mov	r2, sp
   b903e:	4629      	mov	r1, r5
   b9040:	4620      	mov	r0, r4
   b9042:	f004 f95b 	bl	bd2fc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9046:	a801      	add	r0, sp, #4
   b9048:	f7fe fc11 	bl	b786e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b904c:	4620      	mov	r0, r4
   b904e:	b003      	add	sp, #12
   b9050:	bd30      	pop	{r4, r5, pc}

000b9052 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9052:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9054:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9056:	4604      	mov	r4, r0
   b9058:	4668      	mov	r0, sp
   b905a:	f7ff fc02 	bl	b8862 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b905e:	466a      	mov	r2, sp
   b9060:	4629      	mov	r1, r5
   b9062:	4620      	mov	r0, r4
   b9064:	f004 f8f3 	bl	bd24e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9068:	a801      	add	r0, sp, #4
   b906a:	f7fe fc00 	bl	b786e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b906e:	4620      	mov	r0, r4
   b9070:	b003      	add	sp, #12
   b9072:	bd30      	pop	{r4, r5, pc}

000b9074 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b9074:	4770      	bx	lr

000b9076 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b9076:	b510      	push	{r4, lr}
}
   b9078:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b907a:	4604      	mov	r4, r0
}
   b907c:	f7fb f80f 	bl	b409e <_ZdlPvj>
   b9080:	4620      	mov	r0, r4
   b9082:	bd10      	pop	{r4, pc}

000b9084 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b9084:	6803      	ldr	r3, [r0, #0]
   b9086:	b2c9      	uxtb	r1, r1
   b9088:	689b      	ldr	r3, [r3, #8]
   b908a:	4718      	bx	r3

000b908c <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b908c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b908e:	4d03      	ldr	r5, [pc, #12]	; (b909c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b9090:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b9094:	e9c0 5100 	strd	r5, r1, [r0]
}
   b9098:	bd30      	pop	{r4, r5, pc}
   b909a:	bf00      	nop
   b909c:	000c18d0 	.word	0x000c18d0

000b90a0 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b90a0:	6840      	ldr	r0, [r0, #4]
   b90a2:	f003 bf45 	b.w	bcf30 <_ZN7TwoWire5beginEv>

000b90a6 <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b90a6:	b510      	push	{r4, lr}
   b90a8:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b90aa:	6800      	ldr	r0, [r0, #0]
   b90ac:	f003 ff9b 	bl	bcfe6 <_ZN7TwoWire6unlockEv>
   b90b0:	4620      	mov	r0, r4
   b90b2:	bd10      	pop	{r4, pc}

000b90b4 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b90b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b90b8:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b90ba:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b90bc:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b90be:	460d      	mov	r5, r1
   b90c0:	4616      	mov	r6, r2
   b90c2:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b90c4:	f003 ff86 	bl	bcfd4 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b90c8:	b1a7      	cbz	r7, b90f4 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b90ca:	68e1      	ldr	r1, [r4, #12]
   b90cc:	6860      	ldr	r0, [r4, #4]
   b90ce:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b90d2:	f003 ff60 	bl	bcf96 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b90d6:	0a29      	lsrs	r1, r5, #8
   b90d8:	6860      	ldr	r0, [r4, #4]
   b90da:	f7ff ffd3 	bl	b9084 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b90de:	4629      	mov	r1, r5
   b90e0:	6860      	ldr	r0, [r4, #4]
   b90e2:	f7ff ffcf 	bl	b9084 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b90e6:	6860      	ldr	r0, [r4, #4]
   b90e8:	2100      	movs	r1, #0
   b90ea:	f003 ff6f 	bl	bcfcc <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b90ee:	b148      	cbz	r0, b9104 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b90f0:	2400      	movs	r4, #0
   b90f2:	e000      	b.n	b90f6 <_ZN6MB85RC8readDataEjPhj+0x42>
   b90f4:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b90f6:	a801      	add	r0, sp, #4
   b90f8:	f7ff ffd5 	bl	b90a6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b90fc:	4620      	mov	r0, r4
   b90fe:	b003      	add	sp, #12
   b9100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b9104:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b9106:	7b21      	ldrb	r1, [r4, #12]
   b9108:	6860      	ldr	r0, [r4, #4]
   b910a:	46b8      	mov	r8, r7
   b910c:	bf28      	it	cs
   b910e:	f04f 0820 	movcs.w	r8, #32
   b9112:	2301      	movs	r3, #1
   b9114:	4642      	mov	r2, r8
   b9116:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b911a:	f003 ff26 	bl	bcf6a <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b911e:	f006 fb1d 	bl	bf75c <_Z19__fetch_global_Wirev>
   b9122:	6803      	ldr	r3, [r0, #0]
   b9124:	691b      	ldr	r3, [r3, #16]
   b9126:	4798      	blx	r3
   b9128:	4540      	cmp	r0, r8
   b912a:	dbe1      	blt.n	b90f0 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b912c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b9130:	f006 fb14 	bl	bf75c <_Z19__fetch_global_Wirev>
   b9134:	6803      	ldr	r3, [r0, #0]
   b9136:	695b      	ldr	r3, [r3, #20]
   b9138:	4798      	blx	r3
   b913a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b913e:	454e      	cmp	r6, r9
   b9140:	d1f6      	bne.n	b9130 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b9142:	4445      	add	r5, r8
				dataLen--;
   b9144:	eba7 0708 	sub.w	r7, r7, r8
   b9148:	e7be      	b.n	b90c8 <_ZN6MB85RC8readDataEjPhj+0x14>

000b914a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b914a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b914e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b9150:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9152:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b9154:	460e      	mov	r6, r1
   b9156:	4690      	mov	r8, r2
   b9158:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b915a:	f003 ff3b 	bl	bcfd4 <_ZN7TwoWire4lockEv>
   b915e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b9162:	f1b9 0f00 	cmp.w	r9, #0
   b9166:	d02a      	beq.n	b91be <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b9168:	b34d      	cbz	r5, b91be <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b916a:	68e1      	ldr	r1, [r4, #12]
   b916c:	6860      	ldr	r0, [r4, #4]
   b916e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b9172:	f003 ff10 	bl	bcf96 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b9176:	0a31      	lsrs	r1, r6, #8
   b9178:	6860      	ldr	r0, [r4, #4]
   b917a:	f7ff ff83 	bl	b9084 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b917e:	6860      	ldr	r0, [r4, #4]
   b9180:	4631      	mov	r1, r6
   b9182:	f7ff ff7f 	bl	b9084 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9186:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b918a:	4647      	mov	r7, r8
   b918c:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b9190:	6860      	ldr	r0, [r4, #4]
   b9192:	f817 1b01 	ldrb.w	r1, [r7], #1
   b9196:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b9198:	3d01      	subs	r5, #1
				wire.write(*data);
   b919a:	689b      	ldr	r3, [r3, #8]
   b919c:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b919e:	4555      	cmp	r5, sl
   b91a0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b91a4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b91a6:	d001      	beq.n	b91ac <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b91a8:	2d00      	cmp	r5, #0
   b91aa:	d1f1      	bne.n	b9190 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b91ac:	6860      	ldr	r0, [r4, #4]
   b91ae:	2101      	movs	r1, #1
   b91b0:	f003 ff0c 	bl	bcfcc <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b91b4:	2800      	cmp	r0, #0
   b91b6:	d0d7      	beq.n	b9168 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b91b8:	f04f 0900 	mov.w	r9, #0
   b91bc:	e7d1      	b.n	b9162 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b91be:	a801      	add	r0, sp, #4
   b91c0:	f7ff ff71 	bl	b90a6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b91c4:	4648      	mov	r0, r9
   b91c6:	b003      	add	sp, #12
   b91c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b91cc <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b91cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b91d0:	b08b      	sub	sp, #44	; 0x2c
   b91d2:	460e      	mov	r6, r1
   b91d4:	4615      	mov	r5, r2
   b91d6:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b91d8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b91da:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b91dc:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b91de:	f003 fef9 	bl	bcfd4 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b91e2:	42ae      	cmp	r6, r5
   b91e4:	d229      	bcs.n	b923a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b91e6:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b91e8:	4425      	add	r5, r4
			while(numBytes > 0) {
   b91ea:	b18c      	cbz	r4, b9210 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b91ec:	2c1e      	cmp	r4, #30
   b91ee:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b91f0:	f8d8 3000 	ldr.w	r3, [r8]
   b91f4:	bf28      	it	cs
   b91f6:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b91f8:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b91fa:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b91fe:	aa02      	add	r2, sp, #8
   b9200:	463b      	mov	r3, r7
   b9202:	4631      	mov	r1, r6
   b9204:	4640      	mov	r0, r8
				framAddrTo -= count;
   b9206:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b9208:	47c8      	blx	r9
				if (!result) {
   b920a:	b948      	cbnz	r0, b9220 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b920c:	2400      	movs	r4, #0
   b920e:	e000      	b.n	b9212 <_ZN6MB85RC8moveDataEjjj+0x46>
   b9210:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b9212:	a801      	add	r0, sp, #4
   b9214:	f7ff ff47 	bl	b90a6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b9218:	4620      	mov	r0, r4
   b921a:	b00b      	add	sp, #44	; 0x2c
   b921c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b9220:	f8d8 3000 	ldr.w	r3, [r8]
   b9224:	aa02      	add	r2, sp, #8
   b9226:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b922a:	4629      	mov	r1, r5
   b922c:	463b      	mov	r3, r7
   b922e:	4640      	mov	r0, r8
   b9230:	47c8      	blx	r9
				if (!result) {
   b9232:	2800      	cmp	r0, #0
   b9234:	d0ea      	beq.n	b920c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b9236:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b9238:	e7d7      	b.n	b91ea <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b923a:	d9e9      	bls.n	b9210 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b923c:	2c00      	cmp	r4, #0
   b923e:	d0e7      	beq.n	b9210 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b9240:	f8d8 3000 	ldr.w	r3, [r8]
   b9244:	2c1e      	cmp	r4, #30
   b9246:	4627      	mov	r7, r4
   b9248:	bf28      	it	cs
   b924a:	271e      	movcs	r7, #30
   b924c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b9250:	aa02      	add	r2, sp, #8
   b9252:	463b      	mov	r3, r7
   b9254:	4631      	mov	r1, r6
   b9256:	4640      	mov	r0, r8
   b9258:	47c8      	blx	r9
				if (!result) {
   b925a:	2800      	cmp	r0, #0
   b925c:	d0d6      	beq.n	b920c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b925e:	f8d8 3000 	ldr.w	r3, [r8]
   b9262:	aa02      	add	r2, sp, #8
   b9264:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b9268:	4629      	mov	r1, r5
   b926a:	463b      	mov	r3, r7
   b926c:	4640      	mov	r0, r8
   b926e:	47c8      	blx	r9
				if (!result) {
   b9270:	2800      	cmp	r0, #0
   b9272:	d0cb      	beq.n	b920c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b9274:	443e      	add	r6, r7
				framAddrTo += count;
   b9276:	443d      	add	r5, r7
				numBytes -= count;
   b9278:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b927a:	e7df      	b.n	b923c <_ZN6MB85RC8moveDataEjjj+0x70>

000b927c <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   b927c:	6803      	ldr	r3, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b927e:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   b9280:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   b9284:	2101      	movs	r1, #1
   b9286:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   b928a:	4770      	bx	lr

000b928c <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b928c:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b928e:	6842      	ldr	r2, [r0, #4]
   b9290:	4603      	mov	r3, r0
   b9292:	1054      	asrs	r4, r2, #1
   b9294:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b9298:	07d2      	lsls	r2, r2, #31
   b929a:	bf48      	it	mi
   b929c:	590a      	ldrmi	r2, [r1, r4]
   b929e:	681b      	ldr	r3, [r3, #0]
      }
   b92a0:	f85d 4b04 	ldr.w	r4, [sp], #4
   b92a4:	bf48      	it	mi
   b92a6:	58d3      	ldrmi	r3, [r2, r3]
   b92a8:	4718      	bx	r3

000b92aa <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b92aa:	2a01      	cmp	r2, #1
   b92ac:	d102      	bne.n	b92b4 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b92ae:	6001      	str	r1, [r0, #0]
      }
   b92b0:	2000      	movs	r0, #0
   b92b2:	4770      	bx	lr
	  switch (__op)
   b92b4:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b92b6:	bf04      	itt	eq
   b92b8:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b92bc:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b92c0:	e7f6      	b.n	b92b0 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b92c2 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b92c2:	2a01      	cmp	r2, #1
   b92c4:	d102      	bne.n	b92cc <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b92c6:	6001      	str	r1, [r0, #0]
      }
   b92c8:	2000      	movs	r0, #0
   b92ca:	4770      	bx	lr
	  switch (__op)
   b92cc:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b92ce:	bf04      	itt	eq
   b92d0:	680b      	ldreq	r3, [r1, #0]
   b92d2:	6003      	streq	r3, [r0, #0]
	      break;
   b92d4:	e7f8      	b.n	b92c8 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000b92d6 <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   b92d6:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b92d8:	f002 bcbc 	b.w	bbc54 <os_mutex_recursive_lock>

000b92dc <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   b92dc:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   b92e0:	4601      	mov	r1, r0
    if (stateHandler) {
   b92e2:	b11b      	cbz	r3, b92ec <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b92e4:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   b92e8:	30c0      	adds	r0, #192	; 0xc0
   b92ea:	4718      	bx	r3
}
   b92ec:	4770      	bx	lr
	...

000b92f0 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b92f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   b92f2:	4d12      	ldr	r5, [pc, #72]	; (b933c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b92f4:	4608      	mov	r0, r1
        eventData = "";
   b92f6:	2a00      	cmp	r2, #0
   b92f8:	bf18      	it	ne
   b92fa:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b92fc:	460e      	mov	r6, r1
   b92fe:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b9300:	f007 f8ab 	bl	c045a <strlen>
   b9304:	2840      	cmp	r0, #64	; 0x40
   b9306:	d816      	bhi.n	b9336 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   b9308:	4628      	mov	r0, r5
   b930a:	f007 f8a6 	bl	c045a <strlen>
   b930e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b9312:	d810      	bhi.n	b9336 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   b9314:	3043      	adds	r0, #67	; 0x43
   b9316:	f7fa fec0 	bl	b409a <_Znaj>
    if (event) {
   b931a:	4604      	mov	r4, r0
   b931c:	b148      	cbz	r0, b9332 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   b931e:	4631      	mov	r1, r6
        event->flags = flags;
   b9320:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   b9324:	f007 f873 	bl	c040e <strcpy>
        strcpy(event->eventData, eventData);
   b9328:	4629      	mov	r1, r5
   b932a:	f104 0042 	add.w	r0, r4, #66	; 0x42
   b932e:	f007 f86e 	bl	c040e <strcpy>
}
   b9332:	4620      	mov	r0, r4
   b9334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   b9336:	2400      	movs	r4, #0
   b9338:	e7fb      	b.n	b9332 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   b933a:	bf00      	nop
   b933c:	000c20fc 	.word	0x000c20fc

000b9340 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b9340:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9342:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b9344:	460a      	mov	r2, r1
   b9346:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b9348:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b934a:	1d01      	adds	r1, r0, #4
   b934c:	a808      	add	r0, sp, #32
   b934e:	f002 f881 	bl	bb454 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b9352:	9808      	ldr	r0, [sp, #32]
   b9354:	2100      	movs	r1, #0
   b9356:	f007 f995 	bl	c0684 <open>
   b935a:	4605      	mov	r5, r0
   b935c:	a808      	add	r0, sp, #32
   b935e:	f005 fbc1 	bl	beae4 <_ZN6StringD1Ev>
    if (fd) {
   b9362:	2d00      	cmp	r5, #0
   b9364:	d060      	beq.n	b9428 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   b9366:	a908      	add	r1, sp, #32
   b9368:	4628      	mov	r0, r5
   b936a:	f007 f979 	bl	c0660 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   b936e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9370:	492e      	ldr	r1, [pc, #184]	; (b942c <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   b9372:	482f      	ldr	r0, [pc, #188]	; (b9430 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b9374:	4632      	mov	r2, r6
   b9376:	f7fd fc6f 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   b937a:	2200      	movs	r2, #0
   b937c:	4611      	mov	r1, r2
   b937e:	4628      	mov	r0, r5
   b9380:	f007 f976 	bl	c0670 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   b9384:	2208      	movs	r2, #8
   b9386:	a906      	add	r1, sp, #24
   b9388:	4628      	mov	r0, r5
   b938a:	f007 f98f 	bl	c06ac <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   b938e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b9390:	2f4a      	cmp	r7, #74	; 0x4a
   b9392:	dd39      	ble.n	b9408 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   b9394:	4b27      	ldr	r3, [pc, #156]	; (b9434 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   b9396:	9a06      	ldr	r2, [sp, #24]
   b9398:	429a      	cmp	r2, r3
   b939a:	d135      	bne.n	b9408 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   b939c:	4b26      	ldr	r3, [pc, #152]	; (b9438 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   b939e:	9a07      	ldr	r2, [sp, #28]
   b93a0:	429a      	cmp	r2, r3
   b93a2:	d131      	bne.n	b9408 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   b93a4:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   b93a8:	4610      	mov	r0, r2
   b93aa:	9205      	str	r2, [sp, #20]
   b93ac:	f7fa fe75 	bl	b409a <_Znaj>
            if (result) {
   b93b0:	4604      	mov	r4, r0
   b93b2:	b1c0      	cbz	r0, b93e6 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b93b4:	4427      	add	r7, r4
                read(fd, result, eventSize);
   b93b6:	4601      	mov	r1, r0
   b93b8:	9a05      	ldr	r2, [sp, #20]
   b93ba:	4628      	mov	r0, r5
   b93bc:	f007 f976 	bl	c06ac <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b93c0:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   b93c4:	b9ab      	cbnz	r3, b93f2 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   b93c6:	1c63      	adds	r3, r4, #1
   b93c8:	4618      	mov	r0, r3
   b93ca:	9305      	str	r3, [sp, #20]
   b93cc:	f007 f845 	bl	c045a <strlen>
   b93d0:	283f      	cmp	r0, #63	; 0x3f
   b93d2:	9b05      	ldr	r3, [sp, #20]
   b93d4:	d80d      	bhi.n	b93f2 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   b93d6:	f104 0242 	add.w	r2, r4, #66	; 0x42
   b93da:	9200      	str	r2, [sp, #0]
   b93dc:	4917      	ldr	r1, [pc, #92]	; (b943c <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   b93de:	4814      	ldr	r0, [pc, #80]	; (b9430 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b93e0:	4632      	mov	r2, r6
   b93e2:	f7fd fc39 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   b93e6:	4628      	mov	r0, r5
   b93e8:	f007 f932 	bl	c0650 <close>
}
   b93ec:	4620      	mov	r0, r4
   b93ee:	b01f      	add	sp, #124	; 0x7c
   b93f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   b93f2:	4913      	ldr	r1, [pc, #76]	; (b9440 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   b93f4:	480e      	ldr	r0, [pc, #56]	; (b9430 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b93f6:	4632      	mov	r2, r6
   b93f8:	f7fd fc2e 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   b93fc:	2143      	movs	r1, #67	; 0x43
   b93fe:	4620      	mov	r0, r4
   b9400:	f7fa fe4d 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   b9404:	2400      	movs	r4, #0
   b9406:	e7ee      	b.n	b93e6 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   b9408:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   b940c:	9302      	str	r3, [sp, #8]
   b940e:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b9412:	9301      	str	r3, [sp, #4]
   b9414:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b9418:	9300      	str	r3, [sp, #0]
   b941a:	490a      	ldr	r1, [pc, #40]	; (b9444 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   b941c:	9b06      	ldr	r3, [sp, #24]
   b941e:	4804      	ldr	r0, [pc, #16]	; (b9430 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b9420:	4632      	mov	r2, r6
   b9422:	f7fd fc19 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
   b9426:	e7ed      	b.n	b9404 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   b9428:	462c      	mov	r4, r5
    return result;
   b942a:	e7df      	b.n	b93ec <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   b942c:	000c18e4 	.word	0x000c18e4
   b9430:	2003e444 	.word	0x2003e444
   b9434:	31b67663 	.word	0x31b67663
   b9438:	00410801 	.word	0x00410801
   b943c:	000c18f8 	.word	0x000c18f8
   b9440:	000c191a 	.word	0x000c191a
   b9444:	000c1948 	.word	0x000c1948

000b9448 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   b9448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b944c:	4680      	mov	r8, r0
   b944e:	4b28      	ldr	r3, [pc, #160]	; (b94f0 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   b9450:	f848 3b04 	str.w	r3, [r8], #4
   b9454:	4604      	mov	r4, r0
   b9456:	4640      	mov	r0, r8
   b9458:	f001 ff14 	bl	bb284 <_ZN14SequentialFileC1Ev>
   b945c:	2202      	movs	r2, #2
   b945e:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b9460:	2500      	movs	r5, #0
   b9462:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b9466:	2308      	movs	r3, #8
   b9468:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b946a:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   b946e:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   b9472:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   b9476:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b947a:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b947c:	2020      	movs	r0, #32
   b947e:	f7fa fe0a 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b9482:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b9484:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b9486:	3e01      	subs	r6, #1
   b9488:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b948a:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b948e:	4607      	mov	r7, r0
   b9490:	f44f 7000 	mov.w	r0, #512	; 0x200
   b9494:	f7fa fdff 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9498:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b949c:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   b94a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b94a4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b94a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b94ac:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   b94b0:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   b94b4:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   b94b8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b94bc:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b94c0:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   b94c4:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   b94c8:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   b94cc:	4909      	ldr	r1, [pc, #36]	; (b94f4 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   b94ce:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   b94d2:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   b94d6:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   b94da:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   b94de:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   b94e2:	4640      	mov	r0, r8
   b94e4:	f001 ff14 	bl	bb310 <_ZN14SequentialFile11withDirPathEPKc>
}
   b94e8:	4620      	mov	r0, r4
   b94ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b94ee:	bf00      	nop
   b94f0:	000c1b64 	.word	0x000c1b64
   b94f4:	000c198d 	.word	0x000c198d

000b94f8 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   b94f8:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b94fa:	4d06      	ldr	r5, [pc, #24]	; (b9514 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   b94fc:	682b      	ldr	r3, [r5, #0]
   b94fe:	b93b      	cbnz	r3, b9510 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   b9500:	20d0      	movs	r0, #208	; 0xd0
   b9502:	f7fa fdc8 	bl	b4096 <_Znwj>
   b9506:	4604      	mov	r4, r0
   b9508:	b108      	cbz	r0, b950e <_ZN17PublishQueuePosix8instanceEv+0x16>
   b950a:	f7ff ff9d 	bl	b9448 <_ZN17PublishQueuePosixC1Ev>
   b950e:	602c      	str	r4, [r5, #0]
}
   b9510:	6828      	ldr	r0, [r5, #0]
   b9512:	bd38      	pop	{r3, r4, r5, pc}
   b9514:	2003e448 	.word	0x2003e448

000b9518 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b9518:	6942      	ldr	r2, [r0, #20]
   b951a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b951c:	1a9b      	subs	r3, r3, r2
   b951e:	109b      	asrs	r3, r3, #2
   b9520:	1e5a      	subs	r2, r3, #1
   b9522:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   b9526:	1a5b      	subs	r3, r3, r1
   b9528:	109b      	asrs	r3, r3, #2
   b952a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b952e:	6902      	ldr	r2, [r0, #16]
   b9530:	6880      	ldr	r0, [r0, #8]
   b9532:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b9534:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b9538:	4770      	bx	lr

000b953a <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   b953a:	b538      	push	{r3, r4, r5, lr}
   b953c:	4605      	mov	r5, r0
   b953e:	f7ff feca 	bl	b92d6 <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   b9542:	f105 0078 	add.w	r0, r5, #120	; 0x78
   b9546:	f7ff ffe7 	bl	b9518 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   b954a:	4604      	mov	r4, r0
   b954c:	b950      	cbnz	r0, b9564 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   b954e:	1d28      	adds	r0, r5, #4
   b9550:	f002 f9d4 	bl	bb8fc <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   b9554:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   b9558:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   b955a:	b11b      	cbz	r3, b9564 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   b955c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   b9560:	b903      	cbnz	r3, b9564 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   b9562:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   b9564:	6f68      	ldr	r0, [r5, #116]	; 0x74
   b9566:	f002 fb7d 	bl	bbc64 <os_mutex_recursive_unlock>
}
   b956a:	4620      	mov	r0, r4
   b956c:	bd38      	pop	{r3, r4, r5, pc}

000b956e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   b956e:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   b9570:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   b9572:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   b9574:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b9576:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   b9578:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   b957a:	d002      	beq.n	b9582 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   b957c:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b957e:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   b9580:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b9582:	68c0      	ldr	r0, [r0, #12]
   b9584:	f44f 7100 	mov.w	r1, #512	; 0x200
   b9588:	f7fa fd89 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b958c:	6963      	ldr	r3, [r4, #20]
   b958e:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b9590:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   b9592:	685b      	ldr	r3, [r3, #4]
   b9594:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9596:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b959a:	6122      	str	r2, [r4, #16]
   b959c:	e7ef      	b.n	b957e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000b95a0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   b95a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b95a4:	b085      	sub	sp, #20
   b95a6:	4604      	mov	r4, r0
   b95a8:	f7ff fe95 	bl	b92d6 <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   b95ac:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b9654 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   b95b0:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b9658 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b95b4:	f8df b0a4 	ldr.w	fp, [pc, #164]	; b965c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   b95b8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   b95bc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b95c0:	4293      	cmp	r3, r2
   b95c2:	d105      	bne.n	b95d0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   b95c4:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b95c6:	b005      	add	sp, #20
   b95c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b95cc:	f002 bb4a 	b.w	bbc64 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   b95d0:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   b95d4:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   b95d8:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   b95da:	f7ff ffc8 	bl	b956e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   b95de:	4640      	mov	r0, r8
   b95e0:	f002 f930 	bl	bb844 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b95e4:	2300      	movs	r3, #0
   b95e6:	4602      	mov	r2, r0
   b95e8:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   b95ea:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b95ec:	4668      	mov	r0, sp
   b95ee:	f001 ff31 	bl	bb454 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b95f2:	9800      	ldr	r0, [sp, #0]
   b95f4:	f240 2102 	movw	r1, #514	; 0x202
   b95f8:	f007 f844 	bl	c0684 <open>
   b95fc:	4605      	mov	r5, r0
   b95fe:	4668      	mov	r0, sp
   b9600:	f005 fa70 	bl	beae4 <_ZN6StringD1Ev>
            if (fd) {
   b9604:	b1c5      	cbz	r5, b9638 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   b9606:	2208      	movs	r2, #8
   b9608:	4669      	mov	r1, sp
   b960a:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   b960c:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   b9610:	f007 f85e 	bl	c06d0 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   b9614:	f107 0042 	add.w	r0, r7, #66	; 0x42
   b9618:	f006 ff1f 	bl	c045a <strlen>
   b961c:	4639      	mov	r1, r7
   b961e:	f100 0243 	add.w	r2, r0, #67	; 0x43
   b9622:	4628      	mov	r0, r5
   b9624:	f007 f854 	bl	c06d0 <write>
                close(fd);
   b9628:	4628      	mov	r0, r5
   b962a:	f007 f811 	bl	c0650 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b962e:	4808      	ldr	r0, [pc, #32]	; (b9650 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   b9630:	4632      	mov	r2, r6
   b9632:	4659      	mov	r1, fp
   b9634:	f7fd fb10 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   b9638:	4631      	mov	r1, r6
   b963a:	4640      	mov	r0, r8
   b963c:	f002 f944 	bl	bb8c8 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   b9640:	2f00      	cmp	r7, #0
   b9642:	d0b9      	beq.n	b95b8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   b9644:	2143      	movs	r1, #67	; 0x43
   b9646:	4638      	mov	r0, r7
   b9648:	f7fa fd29 	bl	b409e <_ZdlPvj>
   b964c:	e7b2      	b.n	b95b4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   b964e:	bf00      	nop
   b9650:	2003e444 	.word	0x2003e444
   b9654:	31b67663 	.word	0x31b67663
   b9658:	00410801 	.word	0x00410801
   b965c:	000c199b 	.word	0x000c199b

000b9660 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   b9660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9664:	4604      	mov	r4, r0
   b9666:	f7ff fe36 	bl	b92d6 <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   b966a:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b966e:	f7ff ff53 	bl	b9518 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9672:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b9674:	4298      	cmp	r0, r3
   b9676:	d902      	bls.n	b967e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   b9678:	4620      	mov	r0, r4
   b967a:	f7ff ff91 	bl	b95a0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   b967e:	f8df 8044 	ldr.w	r8, [pc, #68]	; b96c4 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   b9682:	4f0f      	ldr	r7, [pc, #60]	; (b96c0 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   b9684:	1d26      	adds	r6, r4, #4
   b9686:	4630      	mov	r0, r6
   b9688:	f002 f938 	bl	bb8fc <_ZNK14SequentialFile11getQueueLenEv>
   b968c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   b968e:	4298      	cmp	r0, r3
   b9690:	dc04      	bgt.n	b969c <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   b9692:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b9694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9698:	f002 bae4 	b.w	bbc64 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   b969c:	2101      	movs	r1, #1
   b969e:	4630      	mov	r0, r6
   b96a0:	f002 f8dc 	bl	bb85c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   b96a4:	4605      	mov	r5, r0
   b96a6:	2800      	cmp	r0, #0
   b96a8:	d0ed      	beq.n	b9686 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   b96aa:	4601      	mov	r1, r0
   b96ac:	2200      	movs	r2, #0
   b96ae:	4630      	mov	r0, r6
   b96b0:	f001 ff0c 	bl	bb4cc <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   b96b4:	462a      	mov	r2, r5
   b96b6:	4641      	mov	r1, r8
   b96b8:	4638      	mov	r0, r7
   b96ba:	f7fa fd40 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b96be:	e7e2      	b.n	b9686 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   b96c0:	2003e444 	.word	0x2003e444
   b96c4:	000c19b8 	.word	0x000c19b8

000b96c8 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   b96c8:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   b96ca:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b96ce:	430b      	orrs	r3, r1
   b96d0:	d005      	beq.n	b96de <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   b96d2:	3840      	subs	r0, #64	; 0x40
   b96d4:	ea50 0301 	orrs.w	r3, r0, r1
   b96d8:	d10b      	bne.n	b96f2 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   b96da:	2a09      	cmp	r2, #9
   b96dc:	d109      	bne.n	b96f2 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   b96de:	4905      	ldr	r1, [pc, #20]	; (b96f4 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   b96e0:	4805      	ldr	r0, [pc, #20]	; (b96f8 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   b96e2:	f7fd fab9 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   b96e6:	f7ff ff07 	bl	b94f8 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   b96ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   b96ee:	f7ff bf57 	b.w	b95a0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   b96f2:	bd08      	pop	{r3, pc}
   b96f4:	000c19cb 	.word	0x000c19cb
   b96f8:	2003e444 	.word	0x2003e444

000b96fc <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b96fc:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b96fe:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b9700:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b9702:	b183      	cbz	r3, b9726 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b9704:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b9706:	6945      	ldr	r5, [r0, #20]
   b9708:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b970a:	42ae      	cmp	r6, r5
   b970c:	d906      	bls.n	b971c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   b970e:	f855 0b04 	ldr.w	r0, [r5], #4
   b9712:	f44f 7100 	mov.w	r1, #512	; 0x200
   b9716:	f7fa fcc2 	bl	b409e <_ZdlPvj>
   b971a:	e7f6      	b.n	b970a <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   b971c:	6861      	ldr	r1, [r4, #4]
   b971e:	6820      	ldr	r0, [r4, #0]
   b9720:	0089      	lsls	r1, r1, #2
   b9722:	f7fa fcbc 	bl	b409e <_ZdlPvj>
    }
   b9726:	4620      	mov	r0, r4
   b9728:	bd70      	pop	{r4, r5, r6, pc}
	...

000b972c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b972c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b972e:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   b9732:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   b9734:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b9736:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   b9738:	b90a      	cbnz	r2, b973e <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   b973a:	07d9      	lsls	r1, r3, #31
   b973c:	d505      	bpl.n	b974a <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b973e:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   b9742:	4b0a      	ldr	r3, [pc, #40]	; (b976c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   b9744:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b9746:	4b0a      	ldr	r3, [pc, #40]	; (b9770 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   b9748:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b974a:	4621      	mov	r1, r4
   b974c:	4668      	mov	r0, sp
   b974e:	f7fe f91e 	bl	b798e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9752:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9754:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9756:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9758:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b975a:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b975c:	4668      	mov	r0, sp
   b975e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9760:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9762:	9203      	str	r2, [sp, #12]
   b9764:	f7fb fc2b 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
	}
   b9768:	b004      	add	sp, #16
   b976a:	bd10      	pop	{r4, pc}
   b976c:	000b928d 	.word	0x000b928d
   b9770:	000b92ab 	.word	0x000b92ab

000b9774 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   b9774:	b570      	push	{r4, r5, r6, lr}
   b9776:	b086      	sub	sp, #24
   b9778:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b977a:	f002 fd9f 	bl	bc2bc <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   b977e:	b948      	cbnz	r0, b9794 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   b9780:	4b43      	ldr	r3, [pc, #268]	; (b9890 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   b9782:	a902      	add	r1, sp, #8
   b9784:	e9cd 3002 	strd	r3, r0, [sp, #8]
   b9788:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b978c:	f7ff ffce 	bl	b972c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b9790:	b006      	add	sp, #24
   b9792:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   b9794:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   b9798:	b11d      	cbz	r5, b97a2 <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   b979a:	2301      	movs	r3, #1
   b979c:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   b97a0:	e7f6      	b.n	b9790 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   b97a2:	f002 fa97 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   b97a6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b97aa:	1ac0      	subs	r0, r0, r3
   b97ac:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b97b0:	4298      	cmp	r0, r3
   b97b2:	d3ed      	bcc.n	b9790 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   b97b4:	1d26      	adds	r6, r4, #4
   b97b6:	4629      	mov	r1, r5
   b97b8:	4630      	mov	r0, r6
   b97ba:	f002 f84f 	bl	bb85c <_ZN14SequentialFile16getFileFromQueueEb>
   b97be:	4601      	mov	r1, r0
   b97c0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   b97c4:	2800      	cmp	r0, #0
   b97c6:	d052      	beq.n	b986e <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   b97c8:	4620      	mov	r0, r4
   b97ca:	f7ff fdb9 	bl	b9340 <_ZN17PublishQueuePosix13readQueueFileEi>
   b97ce:	4605      	mov	r5, r0
   b97d0:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   b97d4:	2800      	cmp	r0, #0
   b97d6:	d035      	beq.n	b9844 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   b97d8:	f002 fa7c 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   b97dc:	ae02      	add	r6, sp, #8
   b97de:	2500      	movs	r5, #0
   b97e0:	4b2c      	ldr	r3, [pc, #176]	; (b9894 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   b97e2:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   b97e6:	4631      	mov	r1, r6
   b97e8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b97ec:	9302      	str	r3, [sp, #8]
   b97ee:	9503      	str	r5, [sp, #12]
   b97f0:	f7ff ff9c 	bl	b972c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b97f4:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   b97f8:	f103 0242 	add.w	r2, r3, #66	; 0x42
   b97fc:	9200      	str	r2, [sp, #0]
   b97fe:	4926      	ldr	r1, [pc, #152]	; (b9898 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   b9800:	4a26      	ldr	r2, [pc, #152]	; (b989c <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   b9802:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b9806:	42a8      	cmp	r0, r5
   b9808:	bf08      	it	eq
   b980a:	460a      	moveq	r2, r1
   b980c:	3301      	adds	r3, #1
   b980e:	4924      	ldr	r1, [pc, #144]	; (b98a0 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   b9810:	4824      	ldr	r0, [pc, #144]	; (b98a4 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   b9812:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b9816:	f7fd fa1f 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   b981a:	f7fd ffe5 	bl	b77e8 <_ZN19BackgroundPublishRK8instanceEv>
   b981e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   b9822:	4b21      	ldr	r3, [pc, #132]	; (b98a8 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   b9824:	9305      	str	r3, [sp, #20]
   b9826:	e9cd 6500 	strd	r6, r5, [sp]
   b982a:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   b982c:	4b1f      	ldr	r3, [pc, #124]	; (b98ac <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b982e:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b9830:	9304      	str	r3, [sp, #16]
   b9832:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9836:	3242      	adds	r2, #66	; 0x42
   b9838:	f7fe f938 	bl	b7aac <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   b983c:	4630      	mov	r0, r6
   b983e:	f7fb fbbe 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
   b9842:	e7a5      	b.n	b9790 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   b9844:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   b9848:	4919      	ldr	r1, [pc, #100]	; (b98b0 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   b984a:	4816      	ldr	r0, [pc, #88]	; (b98a4 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   b984c:	f7fa fc77 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   b9850:	2101      	movs	r1, #1
   b9852:	4630      	mov	r0, r6
   b9854:	f002 f802 	bl	bb85c <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   b9858:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   b985c:	462a      	mov	r2, r5
   b985e:	4630      	mov	r0, r6
   b9860:	f001 fe34 	bl	bb4cc <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   b9864:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b9868:	2b00      	cmp	r3, #0
   b986a:	d1b5      	bne.n	b97d8 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   b986c:	e795      	b.n	b979a <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   b986e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   b9872:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b9876:	429a      	cmp	r2, r3
   b9878:	d007      	beq.n	b988a <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   b987a:	681b      	ldr	r3, [r3, #0]
   b987c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   b9880:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b9884:	f7ff fe73 	bl	b956e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   b9888:	e7ec      	b.n	b9864 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   b988a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   b988e:	e784      	b.n	b979a <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   b9890:	000b98b5 	.word	0x000b98b5
   b9894:	000b9c35 	.word	0x000b9c35
   b9898:	000c19fa 	.word	0x000c19fa
   b989c:	000c1eec 	.word	0x000c1eec
   b98a0:	000c1a1b 	.word	0x000c1a1b
   b98a4:	2003e444 	.word	0x2003e444
   b98a8:	000b927d 	.word	0x000b927d
   b98ac:	000b92c3 	.word	0x000b92c3
   b98b0:	000c19fe 	.word	0x000c19fe

000b98b4 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   b98b4:	b513      	push	{r0, r1, r4, lr}
   b98b6:	4604      	mov	r4, r0
   b98b8:	f002 fd00 	bl	bc2bc <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b98bc:	b190      	cbz	r0, b98e4 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   b98be:	f002 fa09 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   b98c2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b98c6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   b98ca:	4b0d      	ldr	r3, [pc, #52]	; (b9900 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   b98cc:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   b98d0:	9300      	str	r3, [sp, #0]
   b98d2:	4669      	mov	r1, sp
   b98d4:	2300      	movs	r3, #0
   b98d6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b98da:	9301      	str	r3, [sp, #4]
   b98dc:	f7ff ff26 	bl	b972c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b98e0:	b002      	add	sp, #8
   b98e2:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   b98e4:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   b98e8:	b11b      	cbz	r3, b98f2 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   b98ea:	2301      	movs	r3, #1
   b98ec:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   b98f0:	e7f6      	b.n	b98e0 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   b98f2:	4620      	mov	r0, r4
   b98f4:	f7ff fe21 	bl	b953a <_ZN17PublishQueuePosix12getNumEventsEv>
   b98f8:	2800      	cmp	r0, #0
   b98fa:	d0f6      	beq.n	b98ea <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   b98fc:	e7f0      	b.n	b98e0 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   b98fe:	bf00      	nop
   b9900:	000b9775 	.word	0x000b9775

000b9904 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   b9904:	b570      	push	{r4, r5, r6, lr}
   b9906:	4605      	mov	r5, r0
   b9908:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   b990a:	2000      	movs	r0, #0
   b990c:	f002 fc74 	bl	bc1f8 <system_thread_get_state>
   b9910:	2801      	cmp	r0, #1
   b9912:	d005      	beq.n	b9920 <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   b9914:	493e      	ldr	r1, [pc, #248]	; (b9a10 <_ZN17PublishQueuePosix5setupEv+0x10c>)
   b9916:	483f      	ldr	r0, [pc, #252]	; (b9a14 <_ZN17PublishQueuePosix5setupEv+0x110>)
   b9918:	f7fd f990 	bl	b6c3c <_ZNK5spark6Logger5errorEPKcz>
}
   b991c:	b018      	add	sp, #96	; 0x60
   b991e:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   b9920:	f105 0074 	add.w	r0, r5, #116	; 0x74
   b9924:	f002 f986 	bl	bbc34 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b9928:	4b3b      	ldr	r3, [pc, #236]	; (b9a18 <_ZN17PublishQueuePosix5setupEv+0x114>)
   b992a:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b992c:	4b3b      	ldr	r3, [pc, #236]	; (b9a1c <_ZN17PublishQueuePosix5setupEv+0x118>)
   b992e:	9307      	str	r3, [sp, #28]
        };
   b9930:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   b9932:	4b3b      	ldr	r3, [pc, #236]	; (b9a20 <_ZN17PublishQueuePosix5setupEv+0x11c>)
   b9934:	9306      	str	r3, [sp, #24]
   b9936:	a808      	add	r0, sp, #32
   b9938:	f7fb fcc4 	bl	b52c4 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b993c:	a908      	add	r1, sp, #32
   b993e:	a80c      	add	r0, sp, #48	; 0x30
   b9940:	f7fb fcc0 	bl	b52c4 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b9944:	a90c      	add	r1, sp, #48	; 0x30
   b9946:	a810      	add	r0, sp, #64	; 0x40
   b9948:	f7fb fcbc 	bl	b52c4 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b994c:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b994e:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b9950:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9952:	f7fa fba0 	bl	b4096 <_Znwj>
   b9956:	4604      	mov	r4, r0
   b9958:	b160      	cbz	r0, b9974 <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   b995a:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b995c:	4601      	mov	r1, r0
   b995e:	a810      	add	r0, sp, #64	; 0x40
   b9960:	f7fe f815 	bl	b798e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9964:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   b9966:	68a2      	ldr	r2, [r4, #8]
   b9968:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   b996a:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b996c:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b996e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   b9970:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9972:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   b9974:	4b2b      	ldr	r3, [pc, #172]	; (b9a24 <_ZN17PublishQueuePosix5setupEv+0x120>)
   b9976:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   b9978:	4b2b      	ldr	r3, [pc, #172]	; (b9a28 <_ZN17PublishQueuePosix5setupEv+0x124>)
   b997a:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   b997c:	4b2b      	ldr	r3, [pc, #172]	; (b9a2c <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b997e:	9414      	str	r4, [sp, #80]	; 0x50
   b9980:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b9982:	2010      	movs	r0, #16
        SystemEventContext context = {};
   b9984:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b9988:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b998a:	f7fa fb84 	bl	b4096 <_Znwj>
   b998e:	4604      	mov	r4, r0
   b9990:	b1d8      	cbz	r0, b99ca <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   b9992:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   b9994:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   b9996:	b133      	cbz	r3, b99a6 <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b9998:	2202      	movs	r2, #2
   b999a:	a914      	add	r1, sp, #80	; 0x50
   b999c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b999e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b99a0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b99a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b99a4:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b99a6:	4b22      	ldr	r3, [pc, #136]	; (b9a30 <_ZN17PublishQueuePosix5setupEv+0x12c>)
   b99a8:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b99aa:	4a22      	ldr	r2, [pc, #136]	; (b9a34 <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   b99ac:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b99ae:	ab01      	add	r3, sp, #4
   b99b0:	f44f 6004 	mov.w	r0, #2112	; 0x840
   b99b4:	2100      	movs	r1, #0
   b99b6:	f002 fbff 	bl	bc1b8 <system_subscribe_event>
        if (r) {
   b99ba:	b130      	cbz	r0, b99ca <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   b99bc:	4620      	mov	r0, r4
   b99be:	f7fb fafe 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b99c2:	2110      	movs	r1, #16
   b99c4:	4620      	mov	r0, r4
   b99c6:	f7fa fb6a 	bl	b409e <_ZdlPvj>
   b99ca:	a814      	add	r0, sp, #80	; 0x50
   b99cc:	f7fb faf7 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
   b99d0:	a810      	add	r0, sp, #64	; 0x40
   b99d2:	f7fb faf4 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
   b99d6:	a80c      	add	r0, sp, #48	; 0x30
   b99d8:	f7fb faf1 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
   b99dc:	a808      	add	r0, sp, #32
   b99de:	f7fb faee 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
   b99e2:	a804      	add	r0, sp, #16
   b99e4:	f7fb faeb 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   b99e8:	f7fd fefe 	bl	b77e8 <_ZN19BackgroundPublishRK8instanceEv>
   b99ec:	f7fe f838 	bl	b7a60 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   b99f0:	1d28      	adds	r0, r5, #4
   b99f2:	f001 feaf 	bl	bb754 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   b99f6:	4628      	mov	r0, r5
   b99f8:	f7ff fe32 	bl	b9660 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   b99fc:	4b0e      	ldr	r3, [pc, #56]	; (b9a38 <_ZN17PublishQueuePosix5setupEv+0x134>)
   b99fe:	9314      	str	r3, [sp, #80]	; 0x50
   b9a00:	a914      	add	r1, sp, #80	; 0x50
   b9a02:	2300      	movs	r3, #0
   b9a04:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   b9a08:	9315      	str	r3, [sp, #84]	; 0x54
   b9a0a:	f7ff fe8f 	bl	b972c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b9a0e:	e785      	b.n	b991c <_ZN17PublishQueuePosix5setupEv+0x18>
   b9a10:	000c1a3a 	.word	0x000c1a3a
   b9a14:	2003e444 	.word	0x2003e444
   b9a18:	000b96c9 	.word	0x000b96c9
   b9a1c:	000b4f9b 	.word	0x000b4f9b
   b9a20:	000b4f87 	.word	0x000b4f87
   b9a24:	000b4f61 	.word	0x000b4f61
   b9a28:	000b53ed 	.word	0x000b53ed
   b9a2c:	000c0002 	.word	0x000c0002
   b9a30:	000b4fd1 	.word	0x000b4fd1
   b9a34:	000b4f39 	.word	0x000b4f39
   b9a38:	000b98b5 	.word	0x000b98b5

000b9a3c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   b9a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9a40:	4606      	mov	r6, r0
   b9a42:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b9a44:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b9a46:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b9a48:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b9a4a:	1a47      	subs	r7, r0, r1
   b9a4c:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b9a50:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b9a52:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   b9a56:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b9a58:	d927      	bls.n	b9aaa <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   b9a5a:	1b5d      	subs	r5, r3, r5
   b9a5c:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b9a5e:	6832      	ldr	r2, [r6, #0]
   b9a60:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b9a62:	b10c      	cbz	r4, b9a68 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   b9a64:	ea4f 0489 	mov.w	r4, r9, lsl #2
   b9a68:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b9a6a:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   b9a6c:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b9a6e:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   b9a70:	eba3 0201 	sub.w	r2, r3, r1
   b9a74:	d913      	bls.n	b9a9e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   b9a76:	4299      	cmp	r1, r3
   b9a78:	d002      	beq.n	b9a80 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b9a7a:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b9a7c:	f006 fc18 	bl	c02b0 <memmove>
	_M_node = __new_node;
   b9a80:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   b9a82:	6823      	ldr	r3, [r4, #0]
   b9a84:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9a86:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b9a8a:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b9a8c:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   b9a8e:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   b9a90:	59e3      	ldr	r3, [r4, r7]
   b9a92:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9a94:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b9a98:	6233      	str	r3, [r6, #32]
    }
   b9a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   b9a9e:	4299      	cmp	r1, r3
   b9aa0:	d0ee      	beq.n	b9a80 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b9aa2:	1d38      	adds	r0, r7, #4
   b9aa4:	1a80      	subs	r0, r0, r2
   b9aa6:	4420      	add	r0, r4
   b9aa8:	e7e8      	b.n	b9a7c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b9aaa:	f103 0802 	add.w	r8, r3, #2
   b9aae:	454b      	cmp	r3, r9
   b9ab0:	bf2c      	ite	cs
   b9ab2:	4498      	addcs	r8, r3
   b9ab4:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   b9ab6:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   b9aba:	d301      	bcc.n	b9ac0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   b9abc:	f005 feda 	bl	bf874 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9ac0:	ea4f 0088 	mov.w	r0, r8, lsl #2
   b9ac4:	f7fa fae7 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b9ac8:	eba8 0505 	sub.w	r5, r8, r5
   b9acc:	086d      	lsrs	r5, r5, #1
   b9ace:	4682      	mov	sl, r0
   b9ad0:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b9ad2:	b10c      	cbz	r4, b9ad8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   b9ad4:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   b9ad8:	6a72      	ldr	r2, [r6, #36]	; 0x24
   b9ada:	6971      	ldr	r1, [r6, #20]
   b9adc:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   b9ade:	442c      	add	r4, r5
	  if (_Num)
   b9ae0:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b9ae2:	4454      	add	r4, sl
   b9ae4:	d003      	beq.n	b9aee <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b9ae6:	1a52      	subs	r2, r2, r1
   b9ae8:	4620      	mov	r0, r4
   b9aea:	f006 fbe1 	bl	c02b0 <memmove>
	::operator delete(__p
   b9aee:	6871      	ldr	r1, [r6, #4]
   b9af0:	6830      	ldr	r0, [r6, #0]
   b9af2:	0089      	lsls	r1, r1, #2
   b9af4:	f7fa fad3 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b9af8:	e9c6 a800 	strd	sl, r8, [r6]
   b9afc:	e7c0      	b.n	b9a80 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000b9b00 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b9b00:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9b02:	b085      	sub	sp, #20
   b9b04:	4604      	mov	r4, r0
   b9b06:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   b9b0a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b9b0e:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b9b10:	460f      	mov	r7, r1
   b9b12:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b9b14:	f7ff fbec 	bl	b92f0 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   b9b18:	4605      	mov	r5, r0
   b9b1a:	2800      	cmp	r0, #0
   b9b1c:	d03c      	beq.n	b9b98 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   b9b1e:	4b3f      	ldr	r3, [pc, #252]	; (b9c1c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   b9b20:	493f      	ldr	r1, [pc, #252]	; (b9c20 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   b9b22:	4840      	ldr	r0, [pc, #256]	; (b9c24 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b9b24:	2e00      	cmp	r6, #0
   b9b26:	bf18      	it	ne
   b9b28:	4633      	movne	r3, r6
   b9b2a:	463a      	mov	r2, r7
   b9b2c:	f7fd f894 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
   b9b30:	4620      	mov	r0, r4
   b9b32:	f7ff fbd0 	bl	b92d6 <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   b9b36:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   b9b3a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   b9b3e:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b9b40:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   b9b42:	f104 0678 	add.w	r6, r4, #120	; 0x78
   b9b46:	d029      	beq.n	b9b9c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9b48:	b103      	cbz	r3, b9b4c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   b9b4a:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b9b4c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b9b50:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   b9b52:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b9b54:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   b9b58:	4628      	mov	r0, r5
   b9b5a:	f001 fecf 	bl	bb8fc <_ZNK14SequentialFile11getQueueLenEv>
   b9b5e:	9003      	str	r0, [sp, #12]
   b9b60:	4630      	mov	r0, r6
   b9b62:	f7ff fcd9 	bl	b9518 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9b66:	9002      	str	r0, [sp, #8]
   b9b68:	f002 fba8 	bl	bc2bc <spark_cloud_flag_connected>
   b9b6c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b9b70:	9000      	str	r0, [sp, #0]
   b9b72:	492d      	ldr	r1, [pc, #180]	; (b9c28 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   b9b74:	482b      	ldr	r0, [pc, #172]	; (b9c24 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b9b76:	f7fd f86f 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b9b7a:	4628      	mov	r0, r5
   b9b7c:	f001 febe 	bl	bb8fc <_ZNK14SequentialFile11getQueueLenEv>
   b9b80:	2800      	cmp	r0, #0
   b9b82:	d03b      	beq.n	b9bfc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   b9b84:	4620      	mov	r0, r4
   b9b86:	f7ff fd0b 	bl	b95a0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   b9b8a:	4620      	mov	r0, r4
   b9b8c:	f7ff fd68 	bl	b9660 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   b9b90:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b9b92:	f002 f867 	bl	bbc64 <os_mutex_recursive_unlock>
    return true;
   b9b96:	2001      	movs	r0, #1
}
   b9b98:	b005      	add	sp, #20
   b9b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   b9b9c:	4630      	mov	r0, r6
   b9b9e:	f7ff fcbb 	bl	b9518 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9ba2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b9ba6:	4298      	cmp	r0, r3
   b9ba8:	d102      	bne.n	b9bb0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   b9baa:	4820      	ldr	r0, [pc, #128]	; (b9c2c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   b9bac:	f005 fe65 	bl	bf87a <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b9bb0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b9bb4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   b9bb6:	1a9a      	subs	r2, r3, r2
   b9bb8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9bba:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b9bbe:	2b01      	cmp	r3, #1
   b9bc0:	d804      	bhi.n	b9bcc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   b9bc2:	2200      	movs	r2, #0
   b9bc4:	2101      	movs	r1, #1
   b9bc6:	4630      	mov	r0, r6
   b9bc8:	f7ff ff38 	bl	b9a3c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9bcc:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b9bd0:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   b9bd4:	f7fa fa5f 	bl	b4096 <_Znwj>
   b9bd8:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b9bda:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9bde:	b103      	cbz	r3, b9be2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   b9be0:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b9be2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b9be6:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b9be8:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   b9bec:	685b      	ldr	r3, [r3, #4]
   b9bee:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9bf2:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b9bf6:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   b9bfa:	e7aa      	b.n	b9b52 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b9bfc:	4630      	mov	r0, r6
   b9bfe:	f7ff fc8b 	bl	b9518 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9c02:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b9c04:	4298      	cmp	r0, r3
   b9c06:	d8bd      	bhi.n	b9b84 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   b9c08:	f002 fb58 	bl	bc2bc <spark_cloud_flag_connected>
   b9c0c:	2800      	cmp	r0, #0
   b9c0e:	d0b9      	beq.n	b9b84 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   b9c10:	4907      	ldr	r1, [pc, #28]	; (b9c30 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   b9c12:	4804      	ldr	r0, [pc, #16]	; (b9c24 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b9c14:	f7fd f820 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
   b9c18:	e7b7      	b.n	b9b8a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   b9c1a:	bf00      	nop
   b9c1c:	000c20fc 	.word	0x000c20fc
   b9c20:	000c1a5d 	.word	0x000c1a5d
   b9c24:	2003e444 	.word	0x2003e444
   b9c28:	000c1ab5 	.word	0x000c1ab5
   b9c2c:	000c1a85 	.word	0x000c1a85
   b9c30:	000c1ae1 	.word	0x000c1ae1

000b9c34 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   b9c34:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   b9c36:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   b9c3a:	4604      	mov	r4, r0
    if (!publishComplete) {
   b9c3c:	2b00      	cmp	r3, #0
   b9c3e:	d041      	beq.n	b9cc4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   b9c40:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   b9c44:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   b9c48:	2b00      	cmp	r3, #0
   b9c4a:	d03d      	beq.n	b9cc8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   b9c4c:	4950      	ldr	r1, [pc, #320]	; (b9d90 <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   b9c4e:	4851      	ldr	r0, [pc, #324]	; (b9d94 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9c50:	f7fd f802 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   b9c54:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9c58:	b1d3      	cbz	r3, b9c90 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   b9c5a:	1d26      	adds	r6, r4, #4
   b9c5c:	2100      	movs	r1, #0
   b9c5e:	4630      	mov	r0, r6
   b9c60:	f001 fdfc 	bl	bb85c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   b9c64:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9c68:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   b9c6a:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   b9c6c:	d10d      	bne.n	b9c8a <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   b9c6e:	2101      	movs	r1, #1
   b9c70:	4630      	mov	r0, r6
   b9c72:	f001 fdf3 	bl	bb85c <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   b9c76:	2200      	movs	r2, #0
   b9c78:	4629      	mov	r1, r5
   b9c7a:	4630      	mov	r0, r6
   b9c7c:	f001 fc26 	bl	bb4cc <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   b9c80:	4945      	ldr	r1, [pc, #276]	; (b9d98 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   b9c82:	4844      	ldr	r0, [pc, #272]	; (b9d94 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9c84:	462a      	mov	r2, r5
   b9c86:	f7fc ffe7 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   b9c8a:	2300      	movs	r3, #0
   b9c8c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   b9c90:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b9c94:	b110      	cbz	r0, b9c9c <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   b9c96:	2143      	movs	r1, #67	; 0x43
   b9c98:	f7fa fa01 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   b9c9c:	2300      	movs	r3, #0
   b9c9e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   b9ca2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b9ca6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   b9caa:	4b3c      	ldr	r3, [pc, #240]	; (b9d9c <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   b9cac:	9300      	str	r3, [sp, #0]
   b9cae:	4669      	mov	r1, sp
   b9cb0:	2300      	movs	r3, #0
   b9cb2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b9cb6:	9301      	str	r3, [sp, #4]
   b9cb8:	f7ff fd38 	bl	b972c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b9cbc:	f002 f80a 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b9cc0:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   b9cc4:	b002      	add	sp, #8
   b9cc6:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   b9cc8:	4935      	ldr	r1, [pc, #212]	; (b9da0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   b9cca:	4832      	ldr	r0, [pc, #200]	; (b9d94 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9ccc:	f7fc ffc4 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   b9cd0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b9cd4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   b9cd8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9cdc:	b14b      	cbz	r3, b9cf2 <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   b9cde:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b9ce2:	b110      	cbz	r0, b9cea <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   b9ce4:	2143      	movs	r1, #67	; 0x43
   b9ce6:	f7fa f9da 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   b9cea:	2300      	movs	r3, #0
   b9cec:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   b9cf0:	e7db      	b.n	b9caa <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   b9cf2:	4620      	mov	r0, r4
   b9cf4:	f7ff faef 	bl	b92d6 <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   b9cf8:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   b9cfc:	4293      	cmp	r3, r2
   b9cfe:	d013      	beq.n	b9d28 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   b9d00:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b9d04:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   b9d08:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   b9d0c:	3b04      	subs	r3, #4
   b9d0e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   b9d12:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b9d14:	f001 ffa6 	bl	bbc64 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   b9d18:	4922      	ldr	r1, [pc, #136]	; (b9da4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   b9d1a:	481e      	ldr	r0, [pc, #120]	; (b9d94 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9d1c:	f7fc ff9c 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   b9d20:	4620      	mov	r0, r4
   b9d22:	f7ff fc3d 	bl	b95a0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   b9d26:	e7c0      	b.n	b9caa <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   b9d28:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   b9d2c:	4628      	mov	r0, r5
   b9d2e:	f7ff fbf3 	bl	b9518 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9d32:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b9d36:	4298      	cmp	r0, r3
   b9d38:	d102      	bne.n	b9d40 <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   b9d3a:	481b      	ldr	r0, [pc, #108]	; (b9da8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   b9d3c:	f005 fd9d 	bl	bf87a <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   b9d40:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   b9d44:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b9d46:	429a      	cmp	r2, r3
   b9d48:	d104      	bne.n	b9d54 <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   b9d4a:	2201      	movs	r2, #1
   b9d4c:	4611      	mov	r1, r2
   b9d4e:	4628      	mov	r0, r5
   b9d50:	f7ff fe74 	bl	b9a3c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9d54:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   b9d58:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   b9d5c:	f7fa f99b 	bl	b4096 <_Znwj>
   b9d60:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   b9d64:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b9d68:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   b9d6a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   b9d6e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   b9d72:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9d76:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b9d7a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   b9d7e:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   b9d82:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9d86:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b9d8a:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   b9d8e:	e7c0      	b.n	b9d12 <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   b9d90:	000c1af4 	.word	0x000c1af4
   b9d94:	2003e444 	.word	0x2003e444
   b9d98:	000c1b07 	.word	0x000c1b07
   b9d9c:	000b9775 	.word	0x000b9775
   b9da0:	000c1b17 	.word	0x000c1b17
   b9da4:	000c1b29 	.word	0x000c1b29
   b9da8:	000c1a85 	.word	0x000c1a85

000b9dac <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   b9dac:	4b01      	ldr	r3, [pc, #4]	; (b9db4 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   b9dae:	4a02      	ldr	r2, [pc, #8]	; (b9db8 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   b9db0:	601a      	str	r2, [r3, #0]
}
   b9db2:	4770      	bx	lr
   b9db4:	2003e444 	.word	0x2003e444
   b9db8:	000c1b50 	.word	0x000c1b50

000b9dbc <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b9dbc:	b510      	push	{r4, lr}
   b9dbe:	4b07      	ldr	r3, [pc, #28]	; (b9ddc <_ZN17PublishQueuePosixD1Ev+0x20>)
   b9dc0:	4604      	mov	r4, r0
   b9dc2:	f840 3bc0 	str.w	r3, [r0], #192
   b9dc6:	f7fb f8fa 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b9dca:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b9dce:	f7ff fc95 	bl	b96fc <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   b9dd2:	1d20      	adds	r0, r4, #4
   b9dd4:	f001 fbfe 	bl	bb5d4 <_ZN14SequentialFileD1Ev>
}
   b9dd8:	4620      	mov	r0, r4
   b9dda:	bd10      	pop	{r4, pc}
   b9ddc:	000c1b64 	.word	0x000c1b64

000b9de0 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b9de0:	b510      	push	{r4, lr}
   b9de2:	4604      	mov	r4, r0
}
   b9de4:	f7ff ffea 	bl	b9dbc <_ZN17PublishQueuePosixD1Ev>
   b9de8:	4620      	mov	r0, r4
   b9dea:	21d0      	movs	r1, #208	; 0xd0
   b9dec:	f7fa f957 	bl	b409e <_ZdlPvj>
   b9df0:	4620      	mov	r0, r4
   b9df2:	bd10      	pop	{r4, pc}

000b9df4 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b9df4:	6001      	str	r1, [r0, #0]
   b9df6:	7102      	strb	r2, [r0, #4]
{
}
   b9df8:	4770      	bx	lr

000b9dfa <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b9dfa:	6800      	ldr	r0, [r0, #0]
   b9dfc:	6803      	ldr	r3, [r0, #0]
   b9dfe:	68db      	ldr	r3, [r3, #12]
   b9e00:	4718      	bx	r3

000b9e02 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b9e02:	6800      	ldr	r0, [r0, #0]
   b9e04:	6803      	ldr	r3, [r0, #0]
   b9e06:	6a1b      	ldr	r3, [r3, #32]
   b9e08:	4718      	bx	r3

000b9e0a <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b9e0a:	6800      	ldr	r0, [r0, #0]
   b9e0c:	6803      	ldr	r3, [r0, #0]
   b9e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9e10:	4718      	bx	r3

000b9e12 <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b9e12:	7900      	ldrb	r0, [r0, #4]
   b9e14:	4770      	bx	lr

000b9e16 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b9e16:	6800      	ldr	r0, [r0, #0]
   b9e18:	6803      	ldr	r3, [r0, #0]
   b9e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b9e1c:	4718      	bx	r3

000b9e1e <_ZN10RHDatagram6sendtoEPhhh>:
{
   b9e1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9e20:	4605      	mov	r5, r0
   b9e22:	460c      	mov	r4, r1
    setHeaderTo(address);
   b9e24:	4619      	mov	r1, r3
{
   b9e26:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b9e28:	f7ff fff5 	bl	b9e16 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b9e2c:	6828      	ldr	r0, [r5, #0]
   b9e2e:	9a01      	ldr	r2, [sp, #4]
   b9e30:	6803      	ldr	r3, [r0, #0]
   b9e32:	695b      	ldr	r3, [r3, #20]
   b9e34:	4621      	mov	r1, r4
}
   b9e36:	b003      	add	sp, #12
   b9e38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b9e3c:	4718      	bx	r3

000b9e3e <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b9e3e:	6800      	ldr	r0, [r0, #0]
   b9e40:	6803      	ldr	r3, [r0, #0]
   b9e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9e44:	4718      	bx	r3

000b9e46 <_ZN10RHDatagram14setThisAddressEh>:
{
   b9e46:	b538      	push	{r3, r4, r5, lr}
   b9e48:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b9e4a:	6800      	ldr	r0, [r0, #0]
   b9e4c:	6803      	ldr	r3, [r0, #0]
{
   b9e4e:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b9e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9e52:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b9e54:	4629      	mov	r1, r5
   b9e56:	4620      	mov	r0, r4
   b9e58:	f7ff fff1 	bl	b9e3e <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b9e5c:	7125      	strb	r5, [r4, #4]
}
   b9e5e:	bd38      	pop	{r3, r4, r5, pc}

000b9e60 <_ZN10RHDatagram4initEv>:
{
   b9e60:	b538      	push	{r3, r4, r5, lr}
   b9e62:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b9e64:	6800      	ldr	r0, [r0, #0]
   b9e66:	6803      	ldr	r3, [r0, #0]
   b9e68:	689b      	ldr	r3, [r3, #8]
   b9e6a:	4798      	blx	r3
    if (ret)
   b9e6c:	4605      	mov	r5, r0
   b9e6e:	b118      	cbz	r0, b9e78 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b9e70:	7921      	ldrb	r1, [r4, #4]
   b9e72:	4620      	mov	r0, r4
   b9e74:	f7ff ffe7 	bl	b9e46 <_ZN10RHDatagram14setThisAddressEh>
}
   b9e78:	4628      	mov	r0, r5
   b9e7a:	bd38      	pop	{r3, r4, r5, pc}

000b9e7c <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b9e7c:	6800      	ldr	r0, [r0, #0]
   b9e7e:	6803      	ldr	r3, [r0, #0]
   b9e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9e82:	4718      	bx	r3

000b9e84 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b9e84:	6800      	ldr	r0, [r0, #0]
   b9e86:	6803      	ldr	r3, [r0, #0]
   b9e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9e8a:	4718      	bx	r3

000b9e8c <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b9e8c:	6800      	ldr	r0, [r0, #0]
   b9e8e:	6803      	ldr	r3, [r0, #0]
   b9e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9e92:	4718      	bx	r3

000b9e94 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b9e94:	6800      	ldr	r0, [r0, #0]
   b9e96:	6803      	ldr	r3, [r0, #0]
   b9e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b9e9a:	4718      	bx	r3

000b9e9c <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b9e9c:	6800      	ldr	r0, [r0, #0]
   b9e9e:	6803      	ldr	r3, [r0, #0]
   b9ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9ea2:	4718      	bx	r3

000b9ea4 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b9ea4:	6800      	ldr	r0, [r0, #0]
   b9ea6:	6803      	ldr	r3, [r0, #0]
   b9ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9eaa:	4718      	bx	r3

000b9eac <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b9eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9eb0:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b9eb2:	6800      	ldr	r0, [r0, #0]
{
   b9eb4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b9eb6:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b9eb8:	6803      	ldr	r3, [r0, #0]
   b9eba:	691b      	ldr	r3, [r3, #16]
{
   b9ebc:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b9ec0:	4798      	blx	r3
   b9ec2:	4605      	mov	r5, r0
   b9ec4:	b1c8      	cbz	r0, b9efa <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b9ec6:	b11e      	cbz	r6, b9ed0 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b9ec8:	4620      	mov	r0, r4
   b9eca:	f7ff ffe3 	bl	b9e94 <_ZN10RHDatagram10headerFromEv>
   b9ece:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b9ed0:	f1b9 0f00 	cmp.w	r9, #0
   b9ed4:	d004      	beq.n	b9ee0 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b9ed6:	4620      	mov	r0, r4
   b9ed8:	f7ff ffd8 	bl	b9e8c <_ZN10RHDatagram8headerToEv>
   b9edc:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b9ee0:	f1b8 0f00 	cmp.w	r8, #0
   b9ee4:	d004      	beq.n	b9ef0 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b9ee6:	4620      	mov	r0, r4
   b9ee8:	f7ff ffd8 	bl	b9e9c <_ZN10RHDatagram8headerIdEv>
   b9eec:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b9ef0:	b11f      	cbz	r7, b9efa <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b9ef2:	4620      	mov	r0, r4
   b9ef4:	f7ff ffd6 	bl	b9ea4 <_ZN10RHDatagram11headerFlagsEv>
   b9ef8:	7038      	strb	r0, [r7, #0]
}
   b9efa:	4628      	mov	r0, r5
   b9efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b9f00 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b9f00:	2001      	movs	r0, #1
   b9f02:	4770      	bx	lr

000b9f04 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b9f04:	7903      	ldrb	r3, [r0, #4]
   b9f06:	2b03      	cmp	r3, #3
   b9f08:	d0fc      	beq.n	b9f04 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b9f0a:	2001      	movs	r0, #1
   b9f0c:	4770      	bx	lr

000b9f0e <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b9f0e:	2000      	movs	r0, #0
   b9f10:	4770      	bx	lr

000b9f12 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b9f12:	7181      	strb	r1, [r0, #6]
}
   b9f14:	4770      	bx	lr

000b9f16 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b9f16:	7141      	strb	r1, [r0, #5]
}
   b9f18:	4770      	bx	lr

000b9f1a <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b9f1a:	72c1      	strb	r1, [r0, #11]
}
   b9f1c:	4770      	bx	lr

000b9f1e <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b9f1e:	7301      	strb	r1, [r0, #12]
}
   b9f20:	4770      	bx	lr

000b9f22 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b9f22:	7341      	strb	r1, [r0, #13]
}
   b9f24:	4770      	bx	lr

000b9f26 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b9f26:	7b83      	ldrb	r3, [r0, #14]
   b9f28:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b9f2c:	4311      	orrs	r1, r2
   b9f2e:	7381      	strb	r1, [r0, #14]
}
   b9f30:	4770      	bx	lr

000b9f32 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b9f32:	79c0      	ldrb	r0, [r0, #7]
}
   b9f34:	4770      	bx	lr

000b9f36 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b9f36:	7a00      	ldrb	r0, [r0, #8]
}
   b9f38:	4770      	bx	lr

000b9f3a <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b9f3a:	7a40      	ldrb	r0, [r0, #9]
}
   b9f3c:	4770      	bx	lr

000b9f3e <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b9f3e:	7a80      	ldrb	r0, [r0, #10]
}
   b9f40:	4770      	bx	lr

000b9f42 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b9f42:	8a00      	ldrh	r0, [r0, #16]
}
   b9f44:	b200      	sxth	r0, r0
   b9f46:	4770      	bx	lr

000b9f48 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b9f48:	7900      	ldrb	r0, [r0, #4]
}
   b9f4a:	4770      	bx	lr

000b9f4c <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b9f4c:	7101      	strb	r1, [r0, #4]
}
   b9f4e:	4770      	bx	lr

000b9f50 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b9f50:	8a40      	ldrh	r0, [r0, #18]
}
   b9f52:	b280      	uxth	r0, r0
   b9f54:	4770      	bx	lr

000b9f56 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b9f56:	8a80      	ldrh	r0, [r0, #20]
}
   b9f58:	b280      	uxth	r0, r0
   b9f5a:	4770      	bx	lr

000b9f5c <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b9f5c:	8ac0      	ldrh	r0, [r0, #22]
}
   b9f5e:	b280      	uxth	r0, r0
   b9f60:	4770      	bx	lr

000b9f62 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b9f62:	b538      	push	{r3, r4, r5, lr}
   b9f64:	4605      	mov	r5, r0
   b9f66:	460c      	mov	r4, r1
    while (!available())
   b9f68:	682b      	ldr	r3, [r5, #0]
   b9f6a:	4628      	mov	r0, r5
   b9f6c:	68db      	ldr	r3, [r3, #12]
   b9f6e:	4798      	blx	r3
   b9f70:	b928      	cbnz	r0, b9f7e <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b9f72:	2c00      	cmp	r4, #0
   b9f74:	d0f8      	beq.n	b9f68 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b9f76:	4620      	mov	r0, r4
   b9f78:	f002 fac0 	bl	bc4fc <delay>
   b9f7c:	e7f4      	b.n	b9f68 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b9f7e:	bd38      	pop	{r3, r4, r5, pc}

000b9f80 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b9f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9f82:	4605      	mov	r5, r0
   b9f84:	460f      	mov	r7, r1
   b9f86:	4614      	mov	r4, r2
   b9f88:	f001 fea4 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
   b9f8c:	4606      	mov	r6, r0
   b9f8e:	f001 fea1 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b9f92:	1b80      	subs	r0, r0, r6
   b9f94:	42b8      	cmp	r0, r7
   b9f96:	d20a      	bcs.n	b9fae <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b9f98:	682b      	ldr	r3, [r5, #0]
   b9f9a:	4628      	mov	r0, r5
   b9f9c:	68db      	ldr	r3, [r3, #12]
   b9f9e:	4798      	blx	r3
   b9fa0:	b930      	cbnz	r0, b9fb0 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b9fa2:	2c00      	cmp	r4, #0
   b9fa4:	d0f3      	beq.n	b9f8e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b9fa6:	4620      	mov	r0, r4
   b9fa8:	f002 faa8 	bl	bc4fc <delay>
   b9fac:	e7ef      	b.n	b9f8e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b9fae:	2000      	movs	r0, #0
}
   b9fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9fb2 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b9fb2:	b570      	push	{r4, r5, r6, lr}
   b9fb4:	4604      	mov	r4, r0
   b9fb6:	460e      	mov	r6, r1
   b9fb8:	f001 fe8c 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
   b9fbc:	4605      	mov	r5, r0
   b9fbe:	f001 fe89 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b9fc2:	1b40      	subs	r0, r0, r5
   b9fc4:	42b0      	cmp	r0, r6
   b9fc6:	d204      	bcs.n	b9fd2 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b9fc8:	7923      	ldrb	r3, [r4, #4]
   b9fca:	2b03      	cmp	r3, #3
   b9fcc:	d0f7      	beq.n	b9fbe <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b9fce:	2001      	movs	r0, #1
}
   b9fd0:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b9fd2:	2000      	movs	r0, #0
   b9fd4:	e7fc      	b.n	b9fd0 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b9fd6 <_ZN15RHGenericDriver7waitCADEv>:
{
   b9fd6:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b9fd8:	69c3      	ldr	r3, [r0, #28]
{
   b9fda:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b9fdc:	b1b3      	cbz	r3, ba00c <_ZN15RHGenericDriver7waitCADEv+0x36>
   b9fde:	f001 fe79 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b9fe2:	2664      	movs	r6, #100	; 0x64
   b9fe4:	4605      	mov	r5, r0
    while (isChannelActive())
   b9fe6:	6823      	ldr	r3, [r4, #0]
   b9fe8:	4620      	mov	r0, r4
   b9fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9fec:	4798      	blx	r3
   b9fee:	b168      	cbz	r0, ba00c <_ZN15RHGenericDriver7waitCADEv+0x36>
   b9ff0:	f001 fe70 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b9ff4:	69e3      	ldr	r3, [r4, #28]
   b9ff6:	1b40      	subs	r0, r0, r5
   b9ff8:	4298      	cmp	r0, r3
   b9ffa:	d809      	bhi.n	ba010 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b9ffc:	210a      	movs	r1, #10
   b9ffe:	2001      	movs	r0, #1
   ba000:	f004 fc99 	bl	be936 <_Z6randomii>
   ba004:	4370      	muls	r0, r6
   ba006:	f002 fa79 	bl	bc4fc <delay>
    while (isChannelActive())
   ba00a:	e7ec      	b.n	b9fe6 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   ba00c:	2001      	movs	r0, #1
}
   ba00e:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   ba010:	2000      	movs	r0, #0
   ba012:	e7fc      	b.n	ba00e <_ZN15RHGenericDriver7waitCADEv+0x38>

000ba014 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   ba014:	4a06      	ldr	r2, [pc, #24]	; (ba030 <_ZN15RHGenericDriverC1Ev+0x1c>)
   ba016:	6002      	str	r2, [r0, #0]
   ba018:	21ff      	movs	r1, #255	; 0xff
   ba01a:	2200      	movs	r2, #0
   ba01c:	7102      	strb	r2, [r0, #4]
   ba01e:	7141      	strb	r1, [r0, #5]
   ba020:	8242      	strh	r2, [r0, #18]
   ba022:	72c1      	strb	r1, [r0, #11]
   ba024:	8282      	strh	r2, [r0, #20]
   ba026:	8181      	strh	r1, [r0, #12]
   ba028:	7382      	strb	r2, [r0, #14]
   ba02a:	82c2      	strh	r2, [r0, #22]
   ba02c:	61c2      	str	r2, [r0, #28]
}
   ba02e:	4770      	bx	lr
   ba030:	000c1b78 	.word	0x000c1b78

000ba034 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   ba034:	4770      	bx	lr

000ba036 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   ba036:	4770      	bx	lr

000ba038 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   ba038:	4770      	bx	lr

000ba03a <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   ba03a:	4770      	bx	lr

000ba03c <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   ba03c:	4770      	bx	lr

000ba03e <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   ba03e:	7141      	strb	r1, [r0, #5]
}
   ba040:	4770      	bx	lr

000ba042 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   ba042:	7181      	strb	r1, [r0, #6]
}
   ba044:	4770      	bx	lr

000ba046 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   ba046:	7101      	strb	r1, [r0, #4]
}
   ba048:	4770      	bx	lr
	...

000ba04c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   ba04c:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   ba04e:	4d03      	ldr	r5, [pc, #12]	; (ba05c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   ba050:	6005      	str	r5, [r0, #0]
   ba052:	7101      	strb	r1, [r0, #4]
   ba054:	7142      	strb	r2, [r0, #5]
   ba056:	7183      	strb	r3, [r0, #6]
}
   ba058:	bd30      	pop	{r4, r5, pc}
   ba05a:	bf00      	nop
   ba05c:	000c1bf8 	.word	0x000c1bf8

000ba060 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   ba060:	4770      	bx	lr

000ba062 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   ba062:	b510      	push	{r4, lr}
  }
   ba064:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   ba066:	4604      	mov	r4, r0
  }
   ba068:	f7fa f819 	bl	b409e <_ZdlPvj>
   ba06c:	4620      	mov	r0, r4
   ba06e:	bd10      	pop	{r4, pc}

000ba070 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   ba070:	b40e      	push	{r1, r2, r3}
   ba072:	b503      	push	{r0, r1, lr}
   ba074:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   ba076:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   ba078:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   ba07c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   ba07e:	f004 fc1e 	bl	be8be <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   ba082:	b002      	add	sp, #8
   ba084:	f85d eb04 	ldr.w	lr, [sp], #4
   ba088:	b003      	add	sp, #12
   ba08a:	4770      	bx	lr

000ba08c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   ba08c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba08e:	4604      	mov	r4, r0
   ba090:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   ba092:	7922      	ldrb	r2, [r4, #4]
   ba094:	68a3      	ldr	r3, [r4, #8]
   ba096:	b132      	cbz	r2, ba0a6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   ba098:	b9a3      	cbnz	r3, ba0c4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   ba09a:	490b      	ldr	r1, [pc, #44]	; (ba0c8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   ba09c:	b002      	add	sp, #8
   ba09e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   ba0a2:	f004 bb03 	b.w	be6ac <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   ba0a6:	4a09      	ldr	r2, [pc, #36]	; (ba0cc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   ba0a8:	7b26      	ldrb	r6, [r4, #12]
   ba0aa:	4d09      	ldr	r5, [pc, #36]	; (ba0d0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   ba0ac:	4909      	ldr	r1, [pc, #36]	; (ba0d4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   ba0ae:	7b64      	ldrb	r4, [r4, #13]
   ba0b0:	2e01      	cmp	r6, #1
   ba0b2:	bf18      	it	ne
   ba0b4:	4629      	movne	r1, r5
   ba0b6:	e9cd 1400 	strd	r1, r4, [sp]
   ba0ba:	4907      	ldr	r1, [pc, #28]	; (ba0d8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   ba0bc:	f7ff ffd8 	bl	ba070 <_ZN5Print6printfEPKcz>
  }
   ba0c0:	b002      	add	sp, #8
   ba0c2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   ba0c4:	4a05      	ldr	r2, [pc, #20]	; (ba0dc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   ba0c6:	e7ef      	b.n	ba0a8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   ba0c8:	000c1c35 	.word	0x000c1c35
   ba0cc:	000c20fc 	.word	0x000c20fc
   ba0d0:	000c1c31 	.word	0x000c1c31
   ba0d4:	000c1c2d 	.word	0x000c1c2d
   ba0d8:	000c1c4b 	.word	0x000c1c4b
   ba0dc:	000c1c24 	.word	0x000c1c24

000ba0e0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   ba0e0:	b510      	push	{r4, lr}
   ba0e2:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   ba0e4:	f7ff ffb2 	bl	ba04c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   ba0e8:	4b05      	ldr	r3, [pc, #20]	; (ba100 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   ba0ea:	6023      	str	r3, [r4, #0]
  {
   ba0ec:	4b05      	ldr	r3, [pc, #20]	; (ba104 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   ba0ee:	60a3      	str	r3, [r4, #8]
   ba0f0:	2301      	movs	r3, #1
   ba0f2:	7323      	strb	r3, [r4, #12]
   ba0f4:	2300      	movs	r3, #0
   ba0f6:	6123      	str	r3, [r4, #16]
   ba0f8:	82a3      	strh	r3, [r4, #20]
{
}
   ba0fa:	4620      	mov	r0, r4
   ba0fc:	bd10      	pop	{r4, pc}
   ba0fe:	bf00      	nop
   ba100:	000c1c84 	.word	0x000c1c84
   ba104:	000c1c70 	.word	0x000c1c70

000ba108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   ba108:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   ba10a:	4c0b      	ldr	r4, [pc, #44]	; (ba138 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   ba10c:	7821      	ldrb	r1, [r4, #0]
   ba10e:	f3bf 8f5b 	dmb	ish
   ba112:	f011 0101 	ands.w	r1, r1, #1
   ba116:	d10b      	bne.n	ba130 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   ba118:	4620      	mov	r0, r4
   ba11a:	9101      	str	r1, [sp, #4]
   ba11c:	f7f9 ffce 	bl	b40bc <__cxa_guard_acquire>
   ba120:	9901      	ldr	r1, [sp, #4]
   ba122:	b128      	cbz	r0, ba130 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   ba124:	4805      	ldr	r0, [pc, #20]	; (ba13c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   ba126:	f004 fc1d 	bl	be964 <_ZN8SPIClassC1E19hal_spi_interface_t>
   ba12a:	4620      	mov	r0, r4
   ba12c:	f7f9 ffcb 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   ba130:	4802      	ldr	r0, [pc, #8]	; (ba13c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   ba132:	b002      	add	sp, #8
   ba134:	bd10      	pop	{r4, pc}
   ba136:	bf00      	nop
   ba138:	2003e44c 	.word	0x2003e44c
   ba13c:	2003e450 	.word	0x2003e450

000ba140 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   ba140:	b507      	push	{r0, r1, r2, lr}
   ba142:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   ba144:	f7ff ffe0 	bl	ba108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   ba148:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   ba14a:	b003      	add	sp, #12
   ba14c:	f85d eb04 	ldr.w	lr, [sp], #4
   ba150:	f004 bcc0 	b.w	bead4 <_ZN8SPIClass8transferEh>

000ba154 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   ba154:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   ba156:	f7ff ffd7 	bl	ba108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   ba15a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba15e:	f004 bcbf 	b.w	beae0 <_ZN8SPIClass15attachInterruptEv>

000ba162 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   ba162:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   ba164:	f7ff ffd0 	bl	ba108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   ba168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba16c:	f004 bcb9 	b.w	beae2 <_ZN8SPIClass15detachInterruptEv>

000ba170 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   ba170:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   ba172:	7903      	ldrb	r3, [r0, #4]
   ba174:	2b04      	cmp	r3, #4
   ba176:	d020      	beq.n	ba1ba <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   ba178:	2b03      	cmp	r3, #3
   ba17a:	d020      	beq.n	ba1be <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   ba17c:	2b02      	cmp	r3, #2
   ba17e:	d020      	beq.n	ba1c2 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   ba180:	4a11      	ldr	r2, [pc, #68]	; (ba1c8 <_ZN13RHHardwareSPI5beginEv+0x58>)
   ba182:	4912      	ldr	r1, [pc, #72]	; (ba1cc <_ZN13RHHardwareSPI5beginEv+0x5c>)
   ba184:	2b01      	cmp	r3, #1
   ba186:	bf18      	it	ne
   ba188:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   ba18a:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   ba18c:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   ba18e:	3901      	subs	r1, #1
   ba190:	bf18      	it	ne
   ba192:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   ba194:	b133      	cbz	r3, ba1a4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   ba196:	2b01      	cmp	r3, #1
   ba198:	d004      	beq.n	ba1a4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   ba19a:	2b02      	cmp	r3, #2
   ba19c:	d002      	beq.n	ba1a4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   ba19e:	2b03      	cmp	r3, #3
   ba1a0:	bf18      	it	ne
   ba1a2:	2300      	movne	r3, #0
class SPISettings : public Printable {
   ba1a4:	2400      	movs	r4, #0
   ba1a6:	7304      	strb	r4, [r0, #12]
   ba1a8:	6102      	str	r2, [r0, #16]
   ba1aa:	7501      	strb	r1, [r0, #20]
   ba1ac:	7543      	strb	r3, [r0, #21]
        instance().begin();
   ba1ae:	f7ff ffab 	bl	ba108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   ba1b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba1b6:	f004 bbdf 	b.w	be978 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   ba1ba:	4a05      	ldr	r2, [pc, #20]	; (ba1d0 <_ZN13RHHardwareSPI5beginEv+0x60>)
   ba1bc:	e7e5      	b.n	ba18a <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   ba1be:	4a05      	ldr	r2, [pc, #20]	; (ba1d4 <_ZN13RHHardwareSPI5beginEv+0x64>)
   ba1c0:	e7e3      	b.n	ba18a <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   ba1c2:	4a05      	ldr	r2, [pc, #20]	; (ba1d8 <_ZN13RHHardwareSPI5beginEv+0x68>)
   ba1c4:	e7e1      	b.n	ba18a <_ZN13RHHardwareSPI5beginEv+0x1a>
   ba1c6:	bf00      	nop
   ba1c8:	001e8480 	.word	0x001e8480
   ba1cc:	000f4240 	.word	0x000f4240
   ba1d0:	00f42400 	.word	0x00f42400
   ba1d4:	007a1200 	.word	0x007a1200
   ba1d8:	003d0900 	.word	0x003d0900

000ba1dc <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   ba1dc:	b508      	push	{r3, lr}
        instance().end();
   ba1de:	f7ff ff93 	bl	ba108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   ba1e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba1e6:	f004 bbdb 	b.w	be9a0 <_ZN8SPIClass3endEv>

000ba1ea <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   ba1ea:	b510      	push	{r4, lr}
   ba1ec:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   ba1ee:	f7ff ff8b 	bl	ba108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   ba1f2:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   ba1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba1fa:	f004 bbfd 	b.w	be9f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000ba1fe <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   ba1fe:	b508      	push	{r3, lr}
        instance().endTransaction();
   ba200:	f7ff ff82 	bl	ba108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   ba204:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba208:	f004 bbdc 	b.w	be9c4 <_ZN8SPIClass14endTransactionEv>

000ba20c <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   ba20c:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   ba20e:	f7ff ff7b 	bl	ba108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   ba212:	bd08      	pop	{r3, pc}

000ba214 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   ba214:	2300      	movs	r3, #0
   ba216:	4802      	ldr	r0, [pc, #8]	; (ba220 <_GLOBAL__sub_I_hardware_spi+0xc>)
   ba218:	461a      	mov	r2, r3
   ba21a:	4619      	mov	r1, r3
   ba21c:	f7ff bf60 	b.w	ba0e0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   ba220:	2003e458 	.word	0x2003e458

000ba224 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   ba224:	2a01      	cmp	r2, #1
   ba226:	d105      	bne.n	ba234 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   ba228:	7a00      	ldrb	r0, [r0, #8]
   ba22a:	780b      	ldrb	r3, [r1, #0]
   ba22c:	1a1b      	subs	r3, r3, r0
   ba22e:	4258      	negs	r0, r3
   ba230:	4158      	adcs	r0, r3
   ba232:	4770      	bx	lr
   ba234:	2000      	movs	r0, #0
}
   ba236:	4770      	bx	lr

000ba238 <_ZN6RHMesh5doArpEh>:
{
   ba238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   ba23c:	4c25      	ldr	r4, [pc, #148]	; (ba2d4 <_ZN6RHMesh5doArpEh+0x9c>)
   ba23e:	2301      	movs	r3, #1
{
   ba240:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   ba242:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   ba244:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   ba246:	2300      	movs	r3, #0
{
   ba248:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   ba24a:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   ba24c:	9300      	str	r3, [sp, #0]
   ba24e:	2203      	movs	r2, #3
   ba250:	23ff      	movs	r3, #255	; 0xff
   ba252:	4621      	mov	r1, r4
{
   ba254:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   ba256:	f000 fbb7 	bl	ba9c8 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   ba25a:	b120      	cbz	r0, ba266 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   ba25c:	2500      	movs	r5, #0
}
   ba25e:	4628      	mov	r0, r5
   ba260:	b006      	add	sp, #24
   ba262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   ba266:	237a      	movs	r3, #122	; 0x7a
   ba268:	f88d 3017 	strb.w	r3, [sp, #23]
   ba26c:	f001 fd32 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   ba270:	f106 0904 	add.w	r9, r6, #4
   ba274:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   ba276:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   ba27a:	f001 fd2b 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
   ba27e:	1a29      	subs	r1, r5, r0
   ba280:	2900      	cmp	r1, #0
   ba282:	ddeb      	ble.n	ba25c <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   ba284:	2200      	movs	r2, #0
   ba286:	b289      	uxth	r1, r1
   ba288:	4648      	mov	r0, r9
   ba28a:	f7ff fdbe 	bl	b9e0a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   ba28e:	2800      	cmp	r0, #0
   ba290:	d0f3      	beq.n	ba27a <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   ba292:	2300      	movs	r3, #0
   ba294:	e9cd 3302 	strd	r3, r3, [sp, #8]
   ba298:	e9cd 3300 	strd	r3, r3, [sp]
   ba29c:	f10d 0217 	add.w	r2, sp, #23
   ba2a0:	4621      	mov	r1, r4
   ba2a2:	4630      	mov	r0, r6
   ba2a4:	f000 fb9a 	bl	ba9dc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   ba2a8:	4605      	mov	r5, r0
   ba2aa:	2800      	cmp	r0, #0
   ba2ac:	d0e3      	beq.n	ba276 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   ba2ae:	f89d 3017 	ldrb.w	r3, [sp, #23]
   ba2b2:	2b01      	cmp	r3, #1
   ba2b4:	d9df      	bls.n	ba276 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   ba2b6:	f894 a000 	ldrb.w	sl, [r4]
   ba2ba:	f1ba 0f02 	cmp.w	sl, #2
   ba2be:	d1da      	bne.n	ba276 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   ba2c0:	4648      	mov	r0, r9
   ba2c2:	f7ff fde7 	bl	b9e94 <_ZN10RHDatagram10headerFromEv>
   ba2c6:	4653      	mov	r3, sl
   ba2c8:	4602      	mov	r2, r0
   ba2ca:	4639      	mov	r1, r7
   ba2cc:	4630      	mov	r0, r6
   ba2ce:	f000 faf3 	bl	ba8b8 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   ba2d2:	e7c4      	b.n	ba25e <_ZN6RHMesh5doArpEh+0x26>
   ba2d4:	2003e470 	.word	0x2003e470

000ba2d8 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   ba2d8:	2a01      	cmp	r2, #1
{
   ba2da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   ba2de:	4607      	mov	r7, r0
   ba2e0:	460e      	mov	r6, r1
   ba2e2:	4614      	mov	r4, r2
    if (   messageLen > 1 
   ba2e4:	d93b      	bls.n	ba35e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   ba2e6:	794d      	ldrb	r5, [r1, #5]
   ba2e8:	2d02      	cmp	r5, #2
   ba2ea:	d130      	bne.n	ba34e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   ba2ec:	f100 0804 	add.w	r8, r0, #4
   ba2f0:	79c9      	ldrb	r1, [r1, #7]
   ba2f2:	9101      	str	r1, [sp, #4]
   ba2f4:	4640      	mov	r0, r8
   ba2f6:	f7ff fdcd 	bl	b9e94 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   ba2fa:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   ba2fc:	462b      	mov	r3, r5
   ba2fe:	4602      	mov	r2, r0
   ba300:	9901      	ldr	r1, [sp, #4]
   ba302:	4638      	mov	r0, r7
   ba304:	f000 fad8 	bl	ba8b8 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   ba308:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   ba30a:	f106 0308 	add.w	r3, r6, #8
   ba30e:	2400      	movs	r4, #0
   ba310:	4622      	mov	r2, r4
   ba312:	4295      	cmp	r5, r2
   ba314:	f104 0401 	add.w	r4, r4, #1
   ba318:	b2e4      	uxtb	r4, r4
   ba31a:	d904      	bls.n	ba326 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   ba31c:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba320:	7a39      	ldrb	r1, [r7, #8]
   ba322:	4291      	cmp	r1, r2
   ba324:	d1f4      	bne.n	ba310 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   ba326:	f104 0108 	add.w	r1, r4, #8
   ba32a:	440e      	add	r6, r1
	while (i < numRoutes)
   ba32c:	42a5      	cmp	r5, r4
   ba32e:	d916      	bls.n	ba35e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   ba330:	f816 1b01 	ldrb.w	r1, [r6], #1
   ba334:	9101      	str	r1, [sp, #4]
   ba336:	4640      	mov	r0, r8
   ba338:	f7ff fdac 	bl	b9e94 <_ZN10RHDatagram10headerFromEv>
   ba33c:	3401      	adds	r4, #1
   ba33e:	4602      	mov	r2, r0
   ba340:	9901      	ldr	r1, [sp, #4]
   ba342:	2302      	movs	r3, #2
   ba344:	4638      	mov	r0, r7
   ba346:	b2e4      	uxtb	r4, r4
   ba348:	f000 fab6 	bl	ba8b8 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   ba34c:	e7ee      	b.n	ba32c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   ba34e:	2d03      	cmp	r5, #3
   ba350:	d105      	bne.n	ba35e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   ba352:	7989      	ldrb	r1, [r1, #6]
}
   ba354:	b002      	add	sp, #8
   ba356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   ba35a:	f000 ba96 	b.w	ba88a <_ZN8RHRouter13deleteRouteToEh>
}
   ba35e:	b002      	add	sp, #8
   ba360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba364 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   ba364:	b510      	push	{r4, lr}
   ba366:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   ba368:	f000 fae6 	bl	ba938 <_ZN8RHRouterC1ER15RHGenericDriverh>
   ba36c:	4b01      	ldr	r3, [pc, #4]	; (ba374 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   ba36e:	6023      	str	r3, [r4, #0]
}
   ba370:	4620      	mov	r0, r4
   ba372:	bd10      	pop	{r4, pc}
   ba374:	000c1cb8 	.word	0x000c1cb8

000ba378 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   ba378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   ba37c:	2a79      	cmp	r2, #121	; 0x79
{
   ba37e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   ba382:	4606      	mov	r6, r0
   ba384:	460f      	mov	r7, r1
   ba386:	4614      	mov	r4, r2
   ba388:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   ba38a:	d825      	bhi.n	ba3d8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   ba38c:	2bff      	cmp	r3, #255	; 0xff
   ba38e:	d114      	bne.n	ba3ba <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   ba390:	f8df 8048 	ldr.w	r8, [pc, #72]	; ba3dc <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   ba394:	4640      	mov	r0, r8
   ba396:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   ba398:	4622      	mov	r2, r4
   ba39a:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   ba39c:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   ba3a0:	f005 ff78 	bl	c0294 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   ba3a4:	1c62      	adds	r2, r4, #1
   ba3a6:	f8cd 9020 	str.w	r9, [sp, #32]
   ba3aa:	462b      	mov	r3, r5
   ba3ac:	4641      	mov	r1, r8
   ba3ae:	4630      	mov	r0, r6
   ba3b0:	b2d2      	uxtb	r2, r2
}
   ba3b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   ba3b6:	f000 bb07 	b.w	ba9c8 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   ba3ba:	4619      	mov	r1, r3
   ba3bc:	f000 fa21 	bl	ba802 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   ba3c0:	2800      	cmp	r0, #0
   ba3c2:	d1e5      	bne.n	ba390 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   ba3c4:	6833      	ldr	r3, [r6, #0]
   ba3c6:	4629      	mov	r1, r5
   ba3c8:	689b      	ldr	r3, [r3, #8]
   ba3ca:	4630      	mov	r0, r6
   ba3cc:	4798      	blx	r3
   ba3ce:	2800      	cmp	r0, #0
   ba3d0:	d1de      	bne.n	ba390 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   ba3d2:	2002      	movs	r0, #2
}
   ba3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   ba3d8:	2001      	movs	r0, #1
   ba3da:	e7fb      	b.n	ba3d4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   ba3dc:	2003e470 	.word	0x2003e470

000ba3e0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   ba3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba3e4:	b089      	sub	sp, #36	; 0x24
   ba3e6:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   ba3e8:	237a      	movs	r3, #122	; 0x7a
   ba3ea:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   ba3ee:	f10d 031f 	add.w	r3, sp, #31
   ba3f2:	9303      	str	r3, [sp, #12]
   ba3f4:	f10d 031e 	add.w	r3, sp, #30
   ba3f8:	9302      	str	r3, [sp, #8]
   ba3fa:	4e5d      	ldr	r6, [pc, #372]	; (ba570 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   ba3fc:	f10d 031d 	add.w	r3, sp, #29
   ba400:	9301      	str	r3, [sp, #4]
   ba402:	ab07      	add	r3, sp, #28
   ba404:	9300      	str	r3, [sp, #0]
{     
   ba406:	4689      	mov	r9, r1
   ba408:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   ba40a:	f10d 031b 	add.w	r3, sp, #27
   ba40e:	f10d 021a 	add.w	r2, sp, #26
   ba412:	4631      	mov	r1, r6
{     
   ba414:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   ba418:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   ba41a:	f000 fadf 	bl	ba9dc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   ba41e:	4604      	mov	r4, r0
   ba420:	b920      	cbnz	r0, ba42c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   ba422:	2400      	movs	r4, #0
}
   ba424:	4620      	mov	r0, r4
   ba426:	b009      	add	sp, #36	; 0x24
   ba428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   ba42c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   ba430:	b373      	cbz	r3, ba490 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   ba432:	7832      	ldrb	r2, [r6, #0]
   ba434:	bb62      	cbnz	r2, ba490 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   ba436:	f1b8 0f00 	cmp.w	r8, #0
   ba43a:	d003      	beq.n	ba444 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   ba43c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   ba440:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   ba444:	f1bb 0f00 	cmp.w	fp, #0
   ba448:	d003      	beq.n	ba452 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   ba44a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   ba44e:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   ba452:	f1ba 0f00 	cmp.w	sl, #0
   ba456:	d003      	beq.n	ba460 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   ba458:	f89d 201d 	ldrb.w	r2, [sp, #29]
   ba45c:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   ba460:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba462:	b11a      	cbz	r2, ba46c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   ba464:	9914      	ldr	r1, [sp, #80]	; 0x50
   ba466:	f89d 201e 	ldrb.w	r2, [sp, #30]
   ba46a:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   ba46c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   ba46e:	b11a      	cbz	r2, ba478 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   ba470:	9915      	ldr	r1, [sp, #84]	; 0x54
   ba472:	f89d 201f 	ldrb.w	r2, [sp, #31]
   ba476:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   ba478:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   ba47a:	493e      	ldr	r1, [pc, #248]	; (ba574 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   ba47c:	3b01      	subs	r3, #1
   ba47e:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   ba480:	429a      	cmp	r2, r3
		*len = msgLen;
   ba482:	bf88      	it	hi
   ba484:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   ba486:	783a      	ldrb	r2, [r7, #0]
   ba488:	4648      	mov	r0, r9
   ba48a:	f005 ff03 	bl	c0294 <memcpy>
	    return true;
   ba48e:	e7c9      	b.n	ba424 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   ba490:	f89d 201c 	ldrb.w	r2, [sp, #28]
   ba494:	2aff      	cmp	r2, #255	; 0xff
   ba496:	d1c4      	bne.n	ba422 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   ba498:	2b01      	cmp	r3, #1
   ba49a:	d9c2      	bls.n	ba422 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   ba49c:	7832      	ldrb	r2, [r6, #0]
   ba49e:	2a01      	cmp	r2, #1
   ba4a0:	d1bf      	bne.n	ba422 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   ba4a2:	7a2a      	ldrb	r2, [r5, #8]
   ba4a4:	f89d 401b 	ldrb.w	r4, [sp, #27]
   ba4a8:	42a2      	cmp	r2, r4
   ba4aa:	d0ba      	beq.n	ba422 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   ba4ac:	1edf      	subs	r7, r3, #3
   ba4ae:	4932      	ldr	r1, [pc, #200]	; (ba578 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   ba4b0:	b2ff      	uxtb	r7, r7
   ba4b2:	2300      	movs	r3, #0
   ba4b4:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   ba4b8:	4547      	cmp	r7, r8
   ba4ba:	d906      	bls.n	ba4ca <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   ba4bc:	f811 0b01 	ldrb.w	r0, [r1], #1
   ba4c0:	4282      	cmp	r2, r0
   ba4c2:	f103 0301 	add.w	r3, r3, #1
   ba4c6:	d1f5      	bne.n	ba4b4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   ba4c8:	e7ab      	b.n	ba422 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   ba4ca:	f105 0904 	add.w	r9, r5, #4
   ba4ce:	4648      	mov	r0, r9
   ba4d0:	f7ff fce0 	bl	b9e94 <_ZN10RHDatagram10headerFromEv>
   ba4d4:	2302      	movs	r3, #2
   ba4d6:	4602      	mov	r2, r0
   ba4d8:	4621      	mov	r1, r4
   ba4da:	4628      	mov	r0, r5
   ba4dc:	f000 f9ec 	bl	ba8b8 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   ba4e0:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   ba4e4:	b193      	cbz	r3, ba50c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   ba4e6:	4c22      	ldr	r4, [pc, #136]	; (ba570 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   ba4e8:	1ba3      	subs	r3, r4, r6
   ba4ea:	b2db      	uxtb	r3, r3
   ba4ec:	429f      	cmp	r7, r3
   ba4ee:	d90c      	bls.n	ba50a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   ba4f0:	78e1      	ldrb	r1, [r4, #3]
   ba4f2:	9105      	str	r1, [sp, #20]
   ba4f4:	4648      	mov	r0, r9
   ba4f6:	f7ff fccd 	bl	b9e94 <_ZN10RHDatagram10headerFromEv>
   ba4fa:	9905      	ldr	r1, [sp, #20]
   ba4fc:	4602      	mov	r2, r0
   ba4fe:	2302      	movs	r3, #2
   ba500:	4628      	mov	r0, r5
   ba502:	f000 f9d9 	bl	ba8b8 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   ba506:	3401      	adds	r4, #1
   ba508:	e7ee      	b.n	ba4e8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   ba50a:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   ba50c:	682b      	ldr	r3, [r5, #0]
   ba50e:	7872      	ldrb	r2, [r6, #1]
   ba510:	68db      	ldr	r3, [r3, #12]
   ba512:	491a      	ldr	r1, [pc, #104]	; (ba57c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   ba514:	4628      	mov	r0, r5
   ba516:	4798      	blx	r3
   ba518:	4604      	mov	r4, r0
   ba51a:	b160      	cbz	r0, ba536 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   ba51c:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   ba51e:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   ba520:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   ba522:	f89d 201a 	ldrb.w	r2, [sp, #26]
   ba526:	f89d 301b 	ldrb.w	r3, [sp, #27]
   ba52a:	4911      	ldr	r1, [pc, #68]	; (ba570 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   ba52c:	9400      	str	r4, [sp, #0]
   ba52e:	4628      	mov	r0, r5
   ba530:	f000 fa4a 	bl	ba9c8 <_ZN8RHRouter10sendtoWaitEPhhhh>
   ba534:	e776      	b.n	ba424 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   ba536:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   ba53a:	4543      	cmp	r3, r8
   ba53c:	f67f af71 	bls.w	ba422 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   ba540:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   ba544:	2b00      	cmp	r3, #0
   ba546:	f43f af6c 	beq.w	ba422 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   ba54a:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   ba54e:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   ba550:	4907      	ldr	r1, [pc, #28]	; (ba570 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   ba552:	443e      	add	r6, r7
		tmpMessageLen++;
   ba554:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   ba556:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   ba558:	f89d 301b 	ldrb.w	r3, [sp, #27]
   ba55c:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   ba55e:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   ba560:	9300      	str	r3, [sp, #0]
   ba562:	4628      	mov	r0, r5
   ba564:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   ba566:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   ba56a:	f000 f9f7 	bl	ba95c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   ba56e:	e759      	b.n	ba424 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   ba570:	2003e470 	.word	0x2003e470
   ba574:	2003e471 	.word	0x2003e471
   ba578:	2003e473 	.word	0x2003e473
   ba57c:	2003e472 	.word	0x2003e472

000ba580 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   ba580:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba582:	b085      	sub	sp, #20
   ba584:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   ba586:	3004      	adds	r0, #4
{
   ba588:	460e      	mov	r6, r1
   ba58a:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   ba58c:	f7ff fc82 	bl	b9e94 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   ba590:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   ba592:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   ba594:	4631      	mov	r1, r6
   ba596:	4628      	mov	r0, r5
   ba598:	f000 f94a 	bl	ba830 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   ba59c:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   ba59e:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   ba5a0:	d001      	beq.n	ba5a6 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   ba5a2:	2805      	cmp	r0, #5
   ba5a4:	d11b      	bne.n	ba5de <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   ba5a6:	7831      	ldrb	r1, [r6, #0]
   ba5a8:	4628      	mov	r0, r5
   ba5aa:	f000 f96e 	bl	ba88a <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   ba5ae:	7872      	ldrb	r2, [r6, #1]
   ba5b0:	7a2b      	ldrb	r3, [r5, #8]
   ba5b2:	429a      	cmp	r2, r3
   ba5b4:	d013      	beq.n	ba5de <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   ba5b6:	4c0b      	ldr	r4, [pc, #44]	; (ba5e4 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   ba5b8:	2303      	movs	r3, #3
   ba5ba:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   ba5bc:	7833      	ldrb	r3, [r6, #0]
   ba5be:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   ba5c0:	7871      	ldrb	r1, [r6, #1]
   ba5c2:	2302      	movs	r3, #2
   ba5c4:	463a      	mov	r2, r7
   ba5c6:	4628      	mov	r0, r5
   ba5c8:	f000 f976 	bl	ba8b8 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   ba5cc:	2300      	movs	r3, #0
   ba5ce:	9300      	str	r3, [sp, #0]
   ba5d0:	4621      	mov	r1, r4
   ba5d2:	7873      	ldrb	r3, [r6, #1]
   ba5d4:	2202      	movs	r2, #2
   ba5d6:	4628      	mov	r0, r5
   ba5d8:	f000 f9f6 	bl	ba9c8 <_ZN8RHRouter10sendtoWaitEPhhhh>
   ba5dc:	4604      	mov	r4, r0
}
   ba5de:	4620      	mov	r0, r4
   ba5e0:	b005      	add	sp, #20
   ba5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba5e4:	2003e470 	.word	0x2003e470

000ba5e8 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   ba5e8:	b510      	push	{r4, lr}
   ba5ea:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   ba5ec:	f7ff fc02 	bl	b9df4 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   ba5f0:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   ba5f2:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   ba5f4:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   ba5f6:	2303      	movs	r3, #3
    _retransmissions = 0;
   ba5f8:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   ba5fa:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   ba5fc:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   ba5fe:	f44f 7280 	mov.w	r2, #256	; 0x100
   ba602:	f104 0011 	add.w	r0, r4, #17
   ba606:	f005 fe6d 	bl	c02e4 <memset>
}
   ba60a:	4620      	mov	r0, r4
   ba60c:	bd10      	pop	{r4, pc}

000ba60e <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   ba60e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba610:	4604      	mov	r4, r0
   ba612:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   ba614:	f7ff fc32 	bl	b9e7c <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   ba618:	4620      	mov	r0, r4
   ba61a:	2200      	movs	r2, #0
   ba61c:	2180      	movs	r1, #128	; 0x80
   ba61e:	f7ff fc31 	bl	b9e84 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   ba622:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   ba624:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   ba626:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   ba62a:	f10d 010f 	add.w	r1, sp, #15
   ba62e:	2201      	movs	r2, #1
   ba630:	4620      	mov	r0, r4
   ba632:	f7ff fbf4 	bl	b9e1e <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   ba636:	4620      	mov	r0, r4
   ba638:	f7ff fbe3 	bl	b9e02 <_ZN10RHDatagram14waitPacketSentEv>
}
   ba63c:	b004      	add	sp, #16
   ba63e:	bd10      	pop	{r4, pc}

000ba640 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   ba640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   ba644:	7b05      	ldrb	r5, [r0, #12]
   ba646:	3501      	adds	r5, #1
   ba648:	b2ed      	uxtb	r5, r5
{
   ba64a:	b087      	sub	sp, #28
   ba64c:	4604      	mov	r4, r0
   ba64e:	4689      	mov	r9, r1
   ba650:	4692      	mov	sl, r2
   ba652:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   ba654:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   ba656:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   ba658:	7c22      	ldrb	r2, [r4, #16]
   ba65a:	463b      	mov	r3, r7
   ba65c:	429a      	cmp	r2, r3
   ba65e:	f107 0701 	add.w	r7, r7, #1
   ba662:	b2ff      	uxtb	r7, r7
   ba664:	d36b      	bcc.n	ba73e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   ba666:	4629      	mov	r1, r5
   ba668:	4620      	mov	r0, r4
   ba66a:	f7ff fc07 	bl	b9e7c <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   ba66e:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   ba670:	bf0d      	iteet	eq
   ba672:	22c0      	moveq	r2, #192	; 0xc0
   ba674:	2280      	movne	r2, #128	; 0x80
   ba676:	2140      	movne	r1, #64	; 0x40
   ba678:	2100      	moveq	r1, #0
   ba67a:	4620      	mov	r0, r4
   ba67c:	f7ff fc02 	bl	b9e84 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   ba680:	4643      	mov	r3, r8
   ba682:	4652      	mov	r2, sl
   ba684:	4649      	mov	r1, r9
   ba686:	4620      	mov	r0, r4
   ba688:	f7ff fbc9 	bl	b9e1e <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   ba68c:	4620      	mov	r0, r4
   ba68e:	f7ff fbb8 	bl	b9e02 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   ba692:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   ba696:	d054      	beq.n	ba742 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   ba698:	2f01      	cmp	r7, #1
	    _retransmissions++;
   ba69a:	bf82      	ittt	hi
   ba69c:	68a3      	ldrhi	r3, [r4, #8]
   ba69e:	3301      	addhi	r3, #1
   ba6a0:	60a3      	strhi	r3, [r4, #8]
   ba6a2:	f001 fb17 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   ba6a6:	f44f 7180 	mov.w	r1, #256	; 0x100
   ba6aa:	4683      	mov	fp, r0
   ba6ac:	2000      	movs	r0, #0
   ba6ae:	89e6      	ldrh	r6, [r4, #14]
   ba6b0:	f004 f941 	bl	be936 <_Z6randomii>
   ba6b4:	4370      	muls	r0, r6
   ba6b6:	bf48      	it	mi
   ba6b8:	30ff      	addmi	r0, #255	; 0xff
   ba6ba:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   ba6be:	fa1b f686 	uxtah	r6, fp, r6
   ba6c2:	f001 fb07 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
   ba6c6:	1a30      	subs	r0, r6, r0
   ba6c8:	2800      	cmp	r0, #0
   ba6ca:	ddc5      	ble.n	ba658 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   ba6cc:	b281      	uxth	r1, r0
   ba6ce:	2200      	movs	r2, #0
   ba6d0:	4620      	mov	r0, r4
   ba6d2:	f7ff fb9a 	bl	b9e0a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   ba6d6:	2800      	cmp	r0, #0
   ba6d8:	d0f3      	beq.n	ba6c2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   ba6da:	f10d 0317 	add.w	r3, sp, #23
   ba6de:	9302      	str	r3, [sp, #8]
   ba6e0:	f10d 0316 	add.w	r3, sp, #22
   ba6e4:	9301      	str	r3, [sp, #4]
   ba6e6:	2200      	movs	r2, #0
   ba6e8:	f10d 0315 	add.w	r3, sp, #21
   ba6ec:	9300      	str	r3, [sp, #0]
   ba6ee:	4611      	mov	r1, r2
   ba6f0:	ab05      	add	r3, sp, #20
   ba6f2:	4620      	mov	r0, r4
   ba6f4:	f7ff fbda 	bl	b9eac <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   ba6f8:	2800      	cmp	r0, #0
   ba6fa:	d0e2      	beq.n	ba6c2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   ba6fc:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   ba700:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   ba704:	4542      	cmp	r2, r8
   ba706:	d10e      	bne.n	ba726 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   ba708:	f894 c004 	ldrb.w	ip, [r4, #4]
   ba70c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   ba710:	458c      	cmp	ip, r1
   ba712:	d108      	bne.n	ba726 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   ba714:	2b00      	cmp	r3, #0
   ba716:	da08      	bge.n	ba72a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   ba718:	f89d 3016 	ldrb.w	r3, [sp, #22]
   ba71c:	42ab      	cmp	r3, r5
   ba71e:	d1d0      	bne.n	ba6c2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   ba720:	b007      	add	sp, #28
   ba722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   ba726:	2b00      	cmp	r3, #0
   ba728:	dbcb      	blt.n	ba6c2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   ba72a:	18a1      	adds	r1, r4, r2
   ba72c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   ba730:	7c49      	ldrb	r1, [r1, #17]
   ba732:	4299      	cmp	r1, r3
   ba734:	d1c5      	bne.n	ba6c2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   ba736:	4620      	mov	r0, r4
   ba738:	f7ff ff69 	bl	ba60e <_ZN18RHReliableDatagram11acknowledgeEhh>
   ba73c:	e7c1      	b.n	ba6c2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   ba73e:	2000      	movs	r0, #0
   ba740:	e7ee      	b.n	ba720 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   ba742:	2001      	movs	r0, #1
   ba744:	e7ec      	b.n	ba720 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000ba746 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   ba746:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba74a:	b089      	sub	sp, #36	; 0x24
   ba74c:	e9cd 2104 	strd	r2, r1, [sp, #16]
   ba750:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   ba754:	9f12      	ldr	r7, [sp, #72]	; 0x48
   ba756:	4604      	mov	r4, r0
   ba758:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   ba75a:	f7ff fb4e 	bl	b9dfa <_ZN10RHDatagram9availableEv>
   ba75e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   ba762:	b920      	cbnz	r0, ba76e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   ba764:	2500      	movs	r5, #0
}
   ba766:	4628      	mov	r0, r5
   ba768:	b009      	add	sp, #36	; 0x24
   ba76a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   ba76e:	f10d 031f 	add.w	r3, sp, #31
   ba772:	9302      	str	r3, [sp, #8]
   ba774:	f10d 031e 	add.w	r3, sp, #30
   ba778:	9301      	str	r3, [sp, #4]
   ba77a:	f10d 031d 	add.w	r3, sp, #29
   ba77e:	9300      	str	r3, [sp, #0]
   ba780:	4620      	mov	r0, r4
   ba782:	ab07      	add	r3, sp, #28
   ba784:	f7ff fb92 	bl	b9eac <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   ba788:	4605      	mov	r5, r0
   ba78a:	2800      	cmp	r0, #0
   ba78c:	d0ea      	beq.n	ba764 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   ba78e:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   ba792:	2b00      	cmp	r3, #0
   ba794:	dbe6      	blt.n	ba764 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   ba796:	7922      	ldrb	r2, [r4, #4]
   ba798:	f89d 301d 	ldrb.w	r3, [sp, #29]
   ba79c:	429a      	cmp	r2, r3
   ba79e:	d106      	bne.n	ba7ae <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   ba7a0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   ba7a4:	f89d 101e 	ldrb.w	r1, [sp, #30]
   ba7a8:	4620      	mov	r0, r4
   ba7aa:	f7ff ff30 	bl	ba60e <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   ba7ae:	f89d 201f 	ldrb.w	r2, [sp, #31]
   ba7b2:	f89d 101c 	ldrb.w	r1, [sp, #28]
   ba7b6:	f89d 301e 	ldrb.w	r3, [sp, #30]
   ba7ba:	f012 0f40 	tst.w	r2, #64	; 0x40
   ba7be:	440c      	add	r4, r1
   ba7c0:	d002      	beq.n	ba7c8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   ba7c2:	7c60      	ldrb	r0, [r4, #17]
   ba7c4:	4298      	cmp	r0, r3
   ba7c6:	d0cd      	beq.n	ba764 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   ba7c8:	b106      	cbz	r6, ba7cc <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   ba7ca:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   ba7cc:	f1b9 0f00 	cmp.w	r9, #0
   ba7d0:	d003      	beq.n	ba7da <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   ba7d2:	f89d 101d 	ldrb.w	r1, [sp, #29]
   ba7d6:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   ba7da:	f1b8 0f00 	cmp.w	r8, #0
   ba7de:	d001      	beq.n	ba7e4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   ba7e0:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   ba7e4:	b107      	cbz	r7, ba7e8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   ba7e6:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   ba7e8:	7463      	strb	r3, [r4, #17]
		return true;
   ba7ea:	e7bc      	b.n	ba766 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000ba7ec <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   ba7ec:	4770      	bx	lr

000ba7ee <_ZN8RHRouter4initEv>:
{
   ba7ee:	b510      	push	{r4, lr}
   ba7f0:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   ba7f2:	3004      	adds	r0, #4
   ba7f4:	f7ff fb34 	bl	b9e60 <_ZN10RHDatagram4initEv>
    if (ret)
   ba7f8:	b110      	cbz	r0, ba800 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   ba7fa:	231e      	movs	r3, #30
   ba7fc:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   ba800:	bd10      	pop	{r4, pc}

000ba802 <_ZN8RHRouter10getRouteToEh>:
{
   ba802:	b510      	push	{r4, lr}
   ba804:	4602      	mov	r2, r0
   ba806:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   ba808:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   ba80c:	428c      	cmp	r4, r1
   ba80e:	d108      	bne.n	ba822 <_ZN8RHRouter10getRouteToEh+0x20>
   ba810:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   ba814:	b12c      	cbz	r4, ba822 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   ba816:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   ba81a:	f503 738c 	add.w	r3, r3, #280	; 0x118
   ba81e:	4418      	add	r0, r3
}
   ba820:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   ba822:	3301      	adds	r3, #1
   ba824:	2b32      	cmp	r3, #50	; 0x32
   ba826:	f102 0203 	add.w	r2, r2, #3
   ba82a:	d1ed      	bne.n	ba808 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   ba82c:	2000      	movs	r0, #0
   ba82e:	e7f7      	b.n	ba820 <_ZN8RHRouter10getRouteToEh+0x1e>

000ba830 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   ba830:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   ba832:	780b      	ldrb	r3, [r1, #0]
   ba834:	2bff      	cmp	r3, #255	; 0xff
{
   ba836:	4605      	mov	r5, r0
   ba838:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   ba83a:	d006      	beq.n	ba84a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   ba83c:	4619      	mov	r1, r3
   ba83e:	9201      	str	r2, [sp, #4]
   ba840:	f7ff ffdf 	bl	ba802 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   ba844:	b158      	cbz	r0, ba85e <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   ba846:	7843      	ldrb	r3, [r0, #1]
   ba848:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   ba84a:	4621      	mov	r1, r4
   ba84c:	1d28      	adds	r0, r5, #4
   ba84e:	f7ff fef7 	bl	ba640 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   ba852:	2800      	cmp	r0, #0
   ba854:	bf14      	ite	ne
   ba856:	2000      	movne	r0, #0
   ba858:	2005      	moveq	r0, #5
}
   ba85a:	b003      	add	sp, #12
   ba85c:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   ba85e:	2002      	movs	r0, #2
   ba860:	e7fb      	b.n	ba85a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000ba862 <_ZN8RHRouter11deleteRouteEh>:
{
   ba862:	b510      	push	{r4, lr}
   ba864:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   ba868:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   ba86a:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   ba86e:	f503 708c 	add.w	r0, r3, #280	; 0x118
   ba872:	f203 111b 	addw	r1, r3, #283	; 0x11b
   ba876:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   ba87a:	4421      	add	r1, r4
   ba87c:	4420      	add	r0, r4
   ba87e:	f005 fd09 	bl	c0294 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   ba882:	2300      	movs	r3, #0
   ba884:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   ba888:	bd10      	pop	{r4, pc}

000ba88a <_ZN8RHRouter13deleteRouteToEh>:
{
   ba88a:	b538      	push	{r3, r4, r5, lr}
   ba88c:	460a      	mov	r2, r1
   ba88e:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   ba890:	f500 748c 	add.w	r4, r0, #280	; 0x118
   ba894:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   ba898:	b2d9      	uxtb	r1, r3
   ba89a:	5d65      	ldrb	r5, [r4, r5]
   ba89c:	4295      	cmp	r5, r2
   ba89e:	d103      	bne.n	ba8a8 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   ba8a0:	f7ff ffdf 	bl	ba862 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   ba8a4:	2001      	movs	r0, #1
}
   ba8a6:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   ba8a8:	3301      	adds	r3, #1
   ba8aa:	2b32      	cmp	r3, #50	; 0x32
   ba8ac:	d1f2      	bne.n	ba894 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   ba8ae:	2000      	movs	r0, #0
   ba8b0:	e7f9      	b.n	ba8a6 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000ba8b2 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   ba8b2:	2100      	movs	r1, #0
   ba8b4:	f7ff bfd5 	b.w	ba862 <_ZN8RHRouter11deleteRouteEh>

000ba8b8 <_ZN8RHRouter10addRouteToEhhh>:
{
   ba8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba8ba:	4616      	mov	r6, r2
   ba8bc:	461f      	mov	r7, r3
   ba8be:	4604      	mov	r4, r0
   ba8c0:	460d      	mov	r5, r1
   ba8c2:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   ba8c4:	f500 728c 	add.w	r2, r0, #280	; 0x118
   ba8c8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   ba8cc:	5c11      	ldrb	r1, [r2, r0]
   ba8ce:	42a9      	cmp	r1, r5
   ba8d0:	d105      	bne.n	ba8de <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   ba8d2:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   ba8d4:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   ba8d8:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   ba8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   ba8de:	3301      	adds	r3, #1
   ba8e0:	2b32      	cmp	r3, #50	; 0x32
   ba8e2:	d1f1      	bne.n	ba8c8 <_ZN8RHRouter10addRouteToEhhh+0x10>
   ba8e4:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   ba8e6:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   ba8ea:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   ba8ee:	5c11      	ldrb	r1, [r2, r0]
   ba8f0:	b919      	cbnz	r1, ba8fa <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   ba8f2:	4420      	add	r0, r4
   ba8f4:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   ba8f8:	e7ec      	b.n	ba8d4 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   ba8fa:	3301      	adds	r3, #1
   ba8fc:	2b32      	cmp	r3, #50	; 0x32
   ba8fe:	d1f4      	bne.n	ba8ea <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   ba900:	4620      	mov	r0, r4
   ba902:	f7ff ffd6 	bl	ba8b2 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   ba906:	4620      	mov	r0, r4
   ba908:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   ba90c:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   ba910:	b92a      	cbnz	r2, ba91e <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   ba912:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   ba916:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   ba91a:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   ba91e:	3003      	adds	r0, #3
   ba920:	4298      	cmp	r0, r3
   ba922:	d1f3      	bne.n	ba90c <_ZN8RHRouter10addRouteToEhhh+0x54>
   ba924:	e7da      	b.n	ba8dc <_ZN8RHRouter10addRouteToEhhh+0x24>

000ba926 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   ba926:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   ba92a:	2200      	movs	r2, #0
   ba92c:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   ba930:	3003      	adds	r0, #3
   ba932:	4298      	cmp	r0, r3
   ba934:	d1fa      	bne.n	ba92c <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   ba936:	4770      	bx	lr

000ba938 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   ba938:	b510      	push	{r4, lr}
   ba93a:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   ba93c:	3004      	adds	r0, #4
   ba93e:	f7ff fe53 	bl	ba5e8 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   ba942:	4b05      	ldr	r3, [pc, #20]	; (ba958 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   ba944:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   ba946:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   ba94a:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   ba94c:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   ba950:	f7ff ffe9 	bl	ba926 <_ZN8RHRouter17clearRoutingTableEv>
}
   ba954:	4620      	mov	r0, r4
   ba956:	bd10      	pop	{r4, pc}
   ba958:	000c1cd0 	.word	0x000c1cd0

000ba95c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   ba95c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   ba960:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   ba962:	6840      	ldr	r0, [r0, #4]
{
   ba964:	9101      	str	r1, [sp, #4]
   ba966:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   ba968:	6803      	ldr	r3, [r0, #0]
{
   ba96a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   ba96e:	699b      	ldr	r3, [r3, #24]
{
   ba970:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   ba974:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   ba976:	4798      	blx	r3
   ba978:	f106 0805 	add.w	r8, r6, #5
   ba97c:	4580      	cmp	r8, r0
   ba97e:	d81c      	bhi.n	ba9ba <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   ba980:	4d10      	ldr	r5, [pc, #64]	; (ba9c4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   ba982:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   ba984:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   ba988:	2300      	movs	r3, #0
   ba98a:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   ba98c:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   ba990:	70eb      	strb	r3, [r5, #3]
   ba992:	1c5a      	adds	r2, r3, #1
   ba994:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   ba998:	1d68      	adds	r0, r5, #5
   ba99a:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   ba99c:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   ba99e:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   ba9a2:	f005 fc77 	bl	c0294 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   ba9a6:	6823      	ldr	r3, [r4, #0]
   ba9a8:	685b      	ldr	r3, [r3, #4]
   ba9aa:	fa5f f288 	uxtb.w	r2, r8
   ba9ae:	4629      	mov	r1, r5
   ba9b0:	4620      	mov	r0, r4
}
   ba9b2:	b002      	add	sp, #8
   ba9b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   ba9b8:	4718      	bx	r3
}
   ba9ba:	2001      	movs	r0, #1
   ba9bc:	b002      	add	sp, #8
   ba9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba9c2:	bf00      	nop
   ba9c4:	2003e4ea 	.word	0x2003e4ea

000ba9c8 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   ba9c8:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   ba9ca:	f89d 4010 	ldrb.w	r4, [sp, #16]
   ba9ce:	9401      	str	r4, [sp, #4]
   ba9d0:	7a04      	ldrb	r4, [r0, #8]
   ba9d2:	9400      	str	r4, [sp, #0]
   ba9d4:	f7ff ffc2 	bl	ba95c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   ba9d8:	b002      	add	sp, #8
   ba9da:	bd10      	pop	{r4, pc}

000ba9dc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   ba9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba9e0:	b087      	sub	sp, #28
   ba9e2:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   ba9e4:	237f      	movs	r3, #127	; 0x7f
   ba9e6:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   ba9ea:	f10d 0317 	add.w	r3, sp, #23
   ba9ee:	9302      	str	r3, [sp, #8]
   ba9f0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; baac4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   ba9f4:	f10d 0316 	add.w	r3, sp, #22
   ba9f8:	9301      	str	r3, [sp, #4]
   ba9fa:	f10d 0315 	add.w	r3, sp, #21
   ba9fe:	9300      	str	r3, [sp, #0]
{  
   baa00:	4604      	mov	r4, r0
   baa02:	4688      	mov	r8, r1
   baa04:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   baa06:	ab05      	add	r3, sp, #20
   baa08:	f10d 0213 	add.w	r2, sp, #19
   baa0c:	4649      	mov	r1, r9
   baa0e:	3004      	adds	r0, #4
{  
   baa10:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   baa14:	f7ff fe97 	bl	ba746 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   baa18:	4605      	mov	r5, r0
   baa1a:	b908      	cbnz	r0, baa20 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   baa1c:	2500      	movs	r5, #0
   baa1e:	e038      	b.n	baa92 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   baa20:	6823      	ldr	r3, [r4, #0]
   baa22:	f89d 2013 	ldrb.w	r2, [sp, #19]
   baa26:	681b      	ldr	r3, [r3, #0]
   baa28:	4649      	mov	r1, r9
   baa2a:	4620      	mov	r0, r4
   baa2c:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   baa2e:	f899 3000 	ldrb.w	r3, [r9]
   baa32:	7a22      	ldrb	r2, [r4, #8]
   baa34:	429a      	cmp	r2, r3
   baa36:	d001      	beq.n	baa3c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   baa38:	2bff      	cmp	r3, #255	; 0xff
   baa3a:	d12e      	bne.n	baa9a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   baa3c:	b117      	cbz	r7, baa44 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   baa3e:	4b21      	ldr	r3, [pc, #132]	; (baac4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   baa40:	785b      	ldrb	r3, [r3, #1]
   baa42:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   baa44:	f1bb 0f00 	cmp.w	fp, #0
   baa48:	d003      	beq.n	baa52 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   baa4a:	4b1e      	ldr	r3, [pc, #120]	; (baac4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   baa4c:	781b      	ldrb	r3, [r3, #0]
   baa4e:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   baa52:	f1ba 0f00 	cmp.w	sl, #0
   baa56:	d003      	beq.n	baa60 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   baa58:	4b1a      	ldr	r3, [pc, #104]	; (baac4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   baa5a:	78db      	ldrb	r3, [r3, #3]
   baa5c:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   baa60:	9b12      	ldr	r3, [sp, #72]	; 0x48
   baa62:	b11b      	cbz	r3, baa6c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   baa64:	4b17      	ldr	r3, [pc, #92]	; (baac4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   baa66:	9a12      	ldr	r2, [sp, #72]	; 0x48
   baa68:	791b      	ldrb	r3, [r3, #4]
   baa6a:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   baa6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   baa6e:	b11b      	cbz	r3, baa78 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   baa70:	4b14      	ldr	r3, [pc, #80]	; (baac4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   baa72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   baa74:	789b      	ldrb	r3, [r3, #2]
   baa76:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   baa78:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   baa7c:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   baa7e:	4912      	ldr	r1, [pc, #72]	; (baac8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   baa80:	3b05      	subs	r3, #5
   baa82:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   baa84:	429a      	cmp	r2, r3
		*len = msgLen;
   baa86:	bf88      	it	hi
   baa88:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   baa8a:	7832      	ldrb	r2, [r6, #0]
   baa8c:	4640      	mov	r0, r8
   baa8e:	f005 fc01 	bl	c0294 <memcpy>
}
   baa92:	4628      	mov	r0, r5
   baa94:	b007      	add	sp, #28
   baa96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   baa9a:	f899 3002 	ldrb.w	r3, [r9, #2]
   baa9e:	1c5a      	adds	r2, r3, #1
   baaa0:	f889 2002 	strb.w	r2, [r9, #2]
   baaa4:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   baaa8:	429a      	cmp	r2, r3
   baaaa:	d9b7      	bls.n	baa1c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   baaac:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   baab0:	2b00      	cmp	r3, #0
   baab2:	d0b3      	beq.n	baa1c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   baab4:	6823      	ldr	r3, [r4, #0]
   baab6:	f89d 2013 	ldrb.w	r2, [sp, #19]
   baaba:	685b      	ldr	r3, [r3, #4]
   baabc:	4649      	mov	r1, r9
   baabe:	4620      	mov	r0, r4
   baac0:	4798      	blx	r3
   baac2:	e7ab      	b.n	baa1c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   baac4:	2003e4ea 	.word	0x2003e4ea
   baac8:	2003e4ef 	.word	0x2003e4ef

000baacc <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   baacc:	b510      	push	{r4, lr}
   baace:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   baad0:	6a00      	ldr	r0, [r0, #32]
   baad2:	6803      	ldr	r3, [r0, #0]
   baad4:	68db      	ldr	r3, [r3, #12]
   baad6:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   baad8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   baadc:	28ff      	cmp	r0, #255	; 0xff
   baade:	d002      	beq.n	baae6 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   baae0:	2101      	movs	r1, #1
   baae2:	f004 fdb1 	bl	bf648 <pinMode>

    deselectSlave();
   baae6:	6823      	ldr	r3, [r4, #0]
   baae8:	4620      	mov	r0, r4
   baaea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   baaec:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   baaee:	2064      	movs	r0, #100	; 0x64
   baaf0:	f001 fd04 	bl	bc4fc <delay>
#endif
    
    return true;
}
   baaf4:	2001      	movs	r0, #1
   baaf6:	bd10      	pop	{r4, pc}

000baaf8 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   baaf8:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   baafc:	2100      	movs	r1, #0
   baafe:	f004 bdb4 	b.w	bf66a <digitalWrite>

000bab02 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   bab02:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bab06:	2101      	movs	r1, #1
   bab08:	f004 bdaf 	b.w	bf66a <digitalWrite>

000bab0c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   bab0c:	b570      	push	{r4, r5, r6, lr}
   bab0e:	4604      	mov	r4, r0
   bab10:	460d      	mov	r5, r1
   bab12:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   bab14:	f7ff fa7e 	bl	ba014 <_ZN15RHGenericDriverC1Ev>
   bab18:	4b03      	ldr	r3, [pc, #12]	; (bab28 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   bab1a:	6023      	str	r3, [r4, #0]
   bab1c:	6226      	str	r6, [r4, #32]
   bab1e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   bab22:	4620      	mov	r0, r4
   bab24:	bd70      	pop	{r4, r5, r6, pc}
   bab26:	bf00      	nop
   bab28:	000c1ce0 	.word	0x000c1ce0

000bab2c <_ZN11RHSPIDriver7spiReadEh>:
{
   bab2c:	b538      	push	{r3, r4, r5, lr}
   bab2e:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bab30:	6a00      	ldr	r0, [r0, #32]
   bab32:	6803      	ldr	r3, [r0, #0]
   bab34:	6a1b      	ldr	r3, [r3, #32]
{
   bab36:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bab38:	4798      	blx	r3
    selectSlave();
   bab3a:	6823      	ldr	r3, [r4, #0]
   bab3c:	4620      	mov	r0, r4
   bab3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bab40:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   bab42:	6a20      	ldr	r0, [r4, #32]
   bab44:	6803      	ldr	r3, [r0, #0]
   bab46:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   bab4a:	681b      	ldr	r3, [r3, #0]
   bab4c:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bab4e:	6a20      	ldr	r0, [r4, #32]
   bab50:	6803      	ldr	r3, [r0, #0]
   bab52:	2100      	movs	r1, #0
   bab54:	681b      	ldr	r3, [r3, #0]
   bab56:	4798      	blx	r3
    deselectSlave();
   bab58:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bab5a:	4605      	mov	r5, r0
    deselectSlave();
   bab5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bab5e:	4620      	mov	r0, r4
   bab60:	4798      	blx	r3
    _spi.endTransaction();
   bab62:	6a20      	ldr	r0, [r4, #32]
   bab64:	6803      	ldr	r3, [r0, #0]
   bab66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bab68:	4798      	blx	r3
}
   bab6a:	4628      	mov	r0, r5
   bab6c:	bd38      	pop	{r3, r4, r5, pc}

000bab6e <_ZN11RHSPIDriver8spiWriteEhh>:
{
   bab6e:	b570      	push	{r4, r5, r6, lr}
   bab70:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bab72:	6a00      	ldr	r0, [r0, #32]
   bab74:	6803      	ldr	r3, [r0, #0]
   bab76:	6a1b      	ldr	r3, [r3, #32]
{
   bab78:	4616      	mov	r6, r2
   bab7a:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bab7c:	4798      	blx	r3
    selectSlave();
   bab7e:	6823      	ldr	r3, [r4, #0]
   bab80:	4620      	mov	r0, r4
   bab82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bab84:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   bab86:	6a20      	ldr	r0, [r4, #32]
   bab88:	6803      	ldr	r3, [r0, #0]
   bab8a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   bab8e:	681b      	ldr	r3, [r3, #0]
   bab90:	4798      	blx	r3
   bab92:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   bab94:	6a20      	ldr	r0, [r4, #32]
   bab96:	6803      	ldr	r3, [r0, #0]
   bab98:	4631      	mov	r1, r6
   bab9a:	681b      	ldr	r3, [r3, #0]
   bab9c:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bab9e:	2001      	movs	r0, #1
   baba0:	f001 f890 	bl	bbcc4 <HAL_Delay_Microseconds>
    deselectSlave();
   baba4:	6823      	ldr	r3, [r4, #0]
   baba6:	4620      	mov	r0, r4
   baba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   babaa:	4798      	blx	r3
    _spi.endTransaction();
   babac:	6a20      	ldr	r0, [r4, #32]
   babae:	6803      	ldr	r3, [r0, #0]
   babb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   babb2:	4798      	blx	r3
}
   babb4:	4628      	mov	r0, r5
   babb6:	bd70      	pop	{r4, r5, r6, pc}

000babb8 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   babb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   babba:	4604      	mov	r4, r0
    _spi.beginTransaction();
   babbc:	6a00      	ldr	r0, [r0, #32]
{
   babbe:	461e      	mov	r6, r3
    _spi.beginTransaction();
   babc0:	6803      	ldr	r3, [r0, #0]
   babc2:	6a1b      	ldr	r3, [r3, #32]
{
   babc4:	460f      	mov	r7, r1
   babc6:	4615      	mov	r5, r2
    _spi.beginTransaction();
   babc8:	4798      	blx	r3
    selectSlave();
   babca:	6823      	ldr	r3, [r4, #0]
   babcc:	4620      	mov	r0, r4
   babce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   babd0:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   babd2:	6a20      	ldr	r0, [r4, #32]
   babd4:	6803      	ldr	r3, [r0, #0]
   babd6:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   babda:	681b      	ldr	r3, [r3, #0]
   babdc:	4798      	blx	r3
   babde:	442e      	add	r6, r5
   babe0:	4607      	mov	r7, r0
    while (len--)
   babe2:	42b5      	cmp	r5, r6
   babe4:	d007      	beq.n	babf6 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   babe6:	6a20      	ldr	r0, [r4, #32]
   babe8:	6803      	ldr	r3, [r0, #0]
   babea:	2100      	movs	r1, #0
   babec:	681b      	ldr	r3, [r3, #0]
   babee:	4798      	blx	r3
   babf0:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   babf4:	e7f5      	b.n	babe2 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   babf6:	6823      	ldr	r3, [r4, #0]
   babf8:	4620      	mov	r0, r4
   babfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   babfc:	4798      	blx	r3
    _spi.endTransaction();
   babfe:	6a20      	ldr	r0, [r4, #32]
   bac00:	6803      	ldr	r3, [r0, #0]
   bac02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bac04:	4798      	blx	r3
}
   bac06:	4638      	mov	r0, r7
   bac08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bac0a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   bac0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bac0c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bac0e:	6a00      	ldr	r0, [r0, #32]
{
   bac10:	461e      	mov	r6, r3
    _spi.beginTransaction();
   bac12:	6803      	ldr	r3, [r0, #0]
   bac14:	6a1b      	ldr	r3, [r3, #32]
{
   bac16:	460f      	mov	r7, r1
   bac18:	4615      	mov	r5, r2
    _spi.beginTransaction();
   bac1a:	4798      	blx	r3
    selectSlave();
   bac1c:	6823      	ldr	r3, [r4, #0]
   bac1e:	4620      	mov	r0, r4
   bac20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bac22:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   bac24:	6a20      	ldr	r0, [r4, #32]
   bac26:	6803      	ldr	r3, [r0, #0]
   bac28:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   bac2c:	681b      	ldr	r3, [r3, #0]
   bac2e:	4798      	blx	r3
   bac30:	442e      	add	r6, r5
   bac32:	4607      	mov	r7, r0
    while (len--)
   bac34:	42b5      	cmp	r5, r6
   bac36:	d006      	beq.n	bac46 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   bac38:	6a20      	ldr	r0, [r4, #32]
   bac3a:	f815 1b01 	ldrb.w	r1, [r5], #1
   bac3e:	6803      	ldr	r3, [r0, #0]
   bac40:	681b      	ldr	r3, [r3, #0]
   bac42:	4798      	blx	r3
    while (len--)
   bac44:	e7f6      	b.n	bac34 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   bac46:	6823      	ldr	r3, [r4, #0]
   bac48:	4620      	mov	r0, r4
   bac4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bac4c:	4798      	blx	r3
    _spi.endTransaction();
   bac4e:	6a20      	ldr	r0, [r4, #32]
   bac50:	6803      	ldr	r3, [r0, #0]
   bac52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bac54:	4798      	blx	r3
}
   bac56:	4638      	mov	r0, r7
   bac58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bac5a <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   bac5a:	6a00      	ldr	r0, [r0, #32]
   bac5c:	6803      	ldr	r3, [r0, #0]
   bac5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bac60:	4718      	bx	r3

000bac62 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   bac62:	2001      	movs	r0, #1
   bac64:	4770      	bx	lr

000bac66 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   bac66:	20fb      	movs	r0, #251	; 0xfb
   bac68:	4770      	bx	lr

000bac6a <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   bac6a:	4770      	bx	lr

000bac6c <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   bac6c:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   bac6e:	7903      	ldrb	r3, [r0, #4]
   bac70:	2b05      	cmp	r3, #5
{
   bac72:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   bac74:	d010      	beq.n	bac98 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   bac76:	6803      	ldr	r3, [r0, #0]
   bac78:	2105      	movs	r1, #5
   bac7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bac7e:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   bac80:	2207      	movs	r2, #7
   bac82:	2101      	movs	r1, #1
   bac84:	4620      	mov	r0, r4
   bac86:	f7ff ff72 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   bac8a:	2280      	movs	r2, #128	; 0x80
   bac8c:	2140      	movs	r1, #64	; 0x40
   bac8e:	4620      	mov	r0, r4
   bac90:	f7ff ff6d 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   bac94:	2305      	movs	r3, #5
   bac96:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   bac98:	7923      	ldrb	r3, [r4, #4]
   bac9a:	2b05      	cmp	r3, #5
   bac9c:	d0fc      	beq.n	bac98 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   bac9e:	7e20      	ldrb	r0, [r4, #24]
}
   baca0:	bd10      	pop	{r4, pc}

000baca2 <_ZN7RH_RF95D0Ev>:
   baca2:	b510      	push	{r4, lr}
   baca4:	f44f 7198 	mov.w	r1, #304	; 0x130
   baca8:	4604      	mov	r4, r0
   bacaa:	f7f9 f9f8 	bl	b409e <_ZdlPvj>
   bacae:	4620      	mov	r0, r4
   bacb0:	bd10      	pop	{r4, pc}

000bacb2 <_ZN7RH_RF955sleepEv>:
{
   bacb2:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   bacb4:	7903      	ldrb	r3, [r0, #4]
   bacb6:	2b01      	cmp	r3, #1
{
   bacb8:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   bacba:	d00b      	beq.n	bacd4 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   bacbc:	6803      	ldr	r3, [r0, #0]
   bacbe:	2101      	movs	r1, #1
   bacc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bacc4:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   bacc6:	2200      	movs	r2, #0
   bacc8:	2101      	movs	r1, #1
   bacca:	4620      	mov	r0, r4
   baccc:	f7ff ff4f 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   bacd0:	2301      	movs	r3, #1
   bacd2:	7123      	strb	r3, [r4, #4]
}
   bacd4:	2001      	movs	r0, #1
   bacd6:	bd10      	pop	{r4, pc}

000bacd8 <_ZN7RH_RF954recvEPhS0_>:
{
   bacd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   bacda:	6803      	ldr	r3, [r0, #0]
   bacdc:	68db      	ldr	r3, [r3, #12]
{
   bacde:	4604      	mov	r4, r0
   bace0:	460f      	mov	r7, r1
   bace2:	4615      	mov	r5, r2
    if (!available())
   bace4:	4798      	blx	r3
   bace6:	4606      	mov	r6, r0
   bace8:	b1b0      	cbz	r0, bad18 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   bacea:	b187      	cbz	r7, bad0e <_ZN7RH_RF954recvEPhS0_+0x36>
   bacec:	b17d      	cbz	r5, bad0e <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   bacee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   bacf2:	782a      	ldrb	r2, [r5, #0]
   bacf4:	3b03      	subs	r3, #3
   bacf6:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   bacf8:	bfde      	ittt	le
   bacfa:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   bacfe:	3b04      	suble	r3, #4
   bad00:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   bad02:	782a      	ldrb	r2, [r5, #0]
   bad04:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   bad08:	4638      	mov	r0, r7
   bad0a:	f005 fac3 	bl	c0294 <memcpy>
    _rxBufValid = false;
   bad0e:	2300      	movs	r3, #0
   bad10:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bad14:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   bad18:	4630      	mov	r0, r6
   bad1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bad1c <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   bad1c:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   bad1e:	b538      	push	{r3, r4, r5, lr}
   bad20:	4605      	mov	r5, r0
   bad22:	460c      	mov	r4, r1
	if (power > 20)
   bad24:	dc14      	bgt.n	bad50 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   bad26:	2901      	cmp	r1, #1
   bad28:	dd14      	ble.n	bad54 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   bad2a:	2911      	cmp	r1, #17
   bad2c:	dd13      	ble.n	bad56 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   bad2e:	2207      	movs	r2, #7
   bad30:	214d      	movs	r1, #77	; 0x4d
   bad32:	4628      	mov	r0, r5
   bad34:	f7ff ff1b 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   bad38:	3c03      	subs	r4, #3
   bad3a:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bad3c:	1ea2      	subs	r2, r4, #2
   bad3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   bad42:	4628      	mov	r0, r5
   bad44:	b2d2      	uxtb	r2, r2
}
   bad46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bad4a:	2109      	movs	r1, #9
   bad4c:	f7ff bf0f 	b.w	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   bad50:	2414      	movs	r4, #20
   bad52:	e7ec      	b.n	bad2e <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   bad54:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bad56:	2204      	movs	r2, #4
   bad58:	214d      	movs	r1, #77	; 0x4d
   bad5a:	4628      	mov	r0, r5
   bad5c:	f7ff ff07 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
   bad60:	e7ec      	b.n	bad3c <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000bad64 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   bad64:	b538      	push	{r3, r4, r5, lr}
   bad66:	4604      	mov	r4, r0
   bad68:	4615      	mov	r5, r2
    _rxBufValid(0)
   bad6a:	461a      	mov	r2, r3
   bad6c:	f7ff fece 	bl	bab0c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   bad70:	4b09      	ldr	r3, [pc, #36]	; (bad98 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   bad72:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   bad74:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   bad76:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   bad78:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   bad7c:	2201      	movs	r2, #1
    _rxBufValid(0)
   bad7e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bad82:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   bad86:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   bad8a:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   bad8e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   bad92:	4620      	mov	r0, r4
   bad94:	bd38      	pop	{r3, r4, r5, pc}
   bad96:	bf00      	nop
   bad98:	000c1d78 	.word	0x000c1d78

000bad9c <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   bad9c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   bada0:	2b03      	cmp	r3, #3
   bada2:	d91b      	bls.n	baddc <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   bada4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   bada8:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   badaa:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   badae:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   badb0:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   badb4:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   badb6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   badba:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   badbc:	7983      	ldrb	r3, [r0, #6]
   badbe:	b933      	cbnz	r3, badce <_ZN7RH_RF9513validateRxBufEv+0x32>
   badc0:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   badc2:	7942      	ldrb	r2, [r0, #5]
   badc4:	429a      	cmp	r2, r3
   badc6:	d002      	beq.n	badce <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   badc8:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   badca:	2bff      	cmp	r3, #255	; 0xff
   badcc:	d106      	bne.n	baddc <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   badce:	8a83      	ldrh	r3, [r0, #20]
   badd0:	3301      	adds	r3, #1
   badd2:	b29b      	uxth	r3, r3
   badd4:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   badd6:	2301      	movs	r3, #1
   badd8:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   baddc:	4770      	bx	lr
	...

000bade0 <_ZN7RH_RF9512setFrequencyEf>:
{
   bade0:	b538      	push	{r3, r4, r5, lr}
   bade2:	4604      	mov	r4, r0
   bade4:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bade8:	ee10 0a10 	vmov	r0, s0
{
   badec:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   badf0:	f004 feae 	bl	bfb50 <__aeabi_f2d>
   badf4:	a317      	add	r3, pc, #92	; (adr r3, bae54 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   badf6:	e9d3 2300 	ldrd	r2, r3, [r3]
   badfa:	f004 ff01 	bl	bfc00 <__aeabi_dmul>
   badfe:	a317      	add	r3, pc, #92	; (adr r3, bae5c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   bae00:	e9d3 2300 	ldrd	r2, r3, [r3]
   bae04:	f005 f826 	bl	bfe54 <__aeabi_ddiv>
   bae08:	f005 f9d2 	bl	c01b0 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bae0c:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bae0e:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bae10:	f3c0 4207 	ubfx	r2, r0, #16, #8
   bae14:	4620      	mov	r0, r4
   bae16:	f7ff feaa 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   bae1a:	f3c5 2207 	ubfx	r2, r5, #8, #8
   bae1e:	2107      	movs	r1, #7
   bae20:	4620      	mov	r0, r4
   bae22:	f7ff fea4 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   bae26:	b2ea      	uxtb	r2, r5
   bae28:	2108      	movs	r1, #8
   bae2a:	4620      	mov	r0, r4
   bae2c:	f7ff fe9f 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   bae30:	eddf 7a07 	vldr	s15, [pc, #28]	; bae50 <_ZN7RH_RF9512setFrequencyEf+0x70>
   bae34:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   bae38:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   bae3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bae40:	bfac      	ite	ge
   bae42:	2301      	movge	r3, #1
   bae44:	2300      	movlt	r3, #0
}
   bae46:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   bae48:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   bae4c:	bd38      	pop	{r3, r4, r5, pc}
   bae4e:	bf00      	nop
   bae50:	4442c000 	.word	0x4442c000
   bae54:	00000000 	.word	0x00000000
   bae58:	412e8480 	.word	0x412e8480
   bae5c:	00000000 	.word	0x00000000
   bae60:	404e8480 	.word	0x404e8480

000bae64 <_ZN7RH_RF9511setModeIdleEv>:
{
   bae64:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   bae66:	7903      	ldrb	r3, [r0, #4]
   bae68:	2b02      	cmp	r3, #2
{
   bae6a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   bae6c:	d00b      	beq.n	bae86 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   bae6e:	6803      	ldr	r3, [r0, #0]
   bae70:	2102      	movs	r1, #2
   bae72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bae76:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   bae78:	2201      	movs	r2, #1
   bae7a:	4611      	mov	r1, r2
   bae7c:	4620      	mov	r0, r4
   bae7e:	f7ff fe76 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   bae82:	2302      	movs	r3, #2
   bae84:	7123      	strb	r3, [r4, #4]
}
   bae86:	bd10      	pop	{r4, pc}

000bae88 <_ZN7RH_RF9515handleInterruptEv>:
{
   bae88:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bae8a:	2112      	movs	r1, #18
{
   bae8c:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bae8e:	f7ff fe4d 	bl	bab2c <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bae92:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bae94:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bae96:	4620      	mov	r0, r4
   bae98:	f7ff fe48 	bl	bab2c <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bae9c:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bae9e:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   baea0:	2112      	movs	r1, #18
   baea2:	4620      	mov	r0, r4
   baea4:	f7ff fe63 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   baea8:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   baeaa:	2b04      	cmp	r3, #4
   baeac:	d107      	bne.n	baebe <_ZN7RH_RF9515handleInterruptEv+0x36>
   baeae:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   baeb2:	d117      	bne.n	baee4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   baeb4:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   baeb8:	b10b      	cbz	r3, baebe <_ZN7RH_RF9515handleInterruptEv+0x36>
   baeba:	0670      	lsls	r0, r6, #25
   baebc:	d512      	bpl.n	baee4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   baebe:	7923      	ldrb	r3, [r4, #4]
   baec0:	2b04      	cmp	r3, #4
   baec2:	d101      	bne.n	baec8 <_ZN7RH_RF9515handleInterruptEv+0x40>
   baec4:	0669      	lsls	r1, r5, #25
   baec6:	d422      	bmi.n	baf0e <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   baec8:	7923      	ldrb	r3, [r4, #4]
   baeca:	2b03      	cmp	r3, #3
   baecc:	d101      	bne.n	baed2 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   baece:	072a      	lsls	r2, r5, #28
   baed0:	d468      	bmi.n	bafa4 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   baed2:	7923      	ldrb	r3, [r4, #4]
   baed4:	2b05      	cmp	r3, #5
   baed6:	d10e      	bne.n	baef6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   baed8:	076b      	lsls	r3, r5, #29
   baeda:	d50c      	bpl.n	baef6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   baedc:	f005 0501 	and.w	r5, r5, #1
   baee0:	7625      	strb	r5, [r4, #24]
   baee2:	e063      	b.n	bafac <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   baee4:	8a63      	ldrh	r3, [r4, #18]
   baee6:	3301      	adds	r3, #1
   baee8:	b29b      	uxth	r3, r3
   baeea:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   baeec:	2300      	movs	r3, #0
   baeee:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   baef2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   baef6:	22ff      	movs	r2, #255	; 0xff
   baef8:	2112      	movs	r1, #18
   baefa:	4620      	mov	r0, r4
   baefc:	f7ff fe37 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   baf00:	4620      	mov	r0, r4
   baf02:	22ff      	movs	r2, #255	; 0xff
}
   baf04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   baf08:	2112      	movs	r1, #18
   baf0a:	f7ff be30 	b.w	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   baf0e:	2113      	movs	r1, #19
   baf10:	4620      	mov	r0, r4
   baf12:	f7ff fe0b 	bl	bab2c <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   baf16:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   baf18:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   baf1a:	4620      	mov	r0, r4
   baf1c:	f7ff fe06 	bl	bab2c <_ZN11RHSPIDriver7spiReadEh>
   baf20:	210d      	movs	r1, #13
   baf22:	4602      	mov	r2, r0
   baf24:	4620      	mov	r0, r4
   baf26:	f7ff fe22 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   baf2a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   baf2e:	462b      	mov	r3, r5
   baf30:	2100      	movs	r1, #0
   baf32:	4620      	mov	r0, r4
   baf34:	f7ff fe40 	bl	babb8 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   baf38:	2119      	movs	r1, #25
	_bufLen = len;
   baf3a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   baf3e:	4620      	mov	r0, r4
   baf40:	f7ff fdf4 	bl	bab2c <_ZN11RHSPIDriver7spiReadEh>
   baf44:	b240      	sxtb	r0, r0
   baf46:	2800      	cmp	r0, #0
   baf48:	bfb8      	it	lt
   baf4a:	3003      	addlt	r0, #3
   baf4c:	1080      	asrs	r0, r0, #2
   baf4e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   baf52:	211a      	movs	r1, #26
   baf54:	4620      	mov	r0, r4
   baf56:	f7ff fde9 	bl	bab2c <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   baf5a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   baf5e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   baf60:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   baf62:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   baf64:	bfa9      	itett	ge
   baf66:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   baf68:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   baf6a:	b21b      	sxthge	r3, r3
   baf6c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   baf6e:	bfb2      	itee	lt
   baf70:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   baf72:	220f      	movge	r2, #15
   baf74:	fb93 f3f2 	sdivge	r3, r3, r2
   baf78:	b21b      	sxth	r3, r3
   baf7a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   baf7c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   baf80:	b16b      	cbz	r3, baf9e <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   baf82:	8a23      	ldrh	r3, [r4, #16]
   baf84:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   baf86:	b21b      	sxth	r3, r3
   baf88:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   baf8a:	4620      	mov	r0, r4
   baf8c:	f7ff ff06 	bl	bad9c <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   baf90:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   baf94:	2b00      	cmp	r3, #0
   baf96:	d0ae      	beq.n	baef6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   baf98:	f7ff ff64 	bl	bae64 <_ZN7RH_RF9511setModeIdleEv>
   baf9c:	e7ab      	b.n	baef6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   baf9e:	8a23      	ldrh	r3, [r4, #16]
   bafa0:	3ba4      	subs	r3, #164	; 0xa4
   bafa2:	e7f0      	b.n	baf86 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   bafa4:	8ae3      	ldrh	r3, [r4, #22]
   bafa6:	3301      	adds	r3, #1
   bafa8:	b29b      	uxth	r3, r3
   bafaa:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   bafac:	4620      	mov	r0, r4
   bafae:	e7f3      	b.n	baf98 <_ZN7RH_RF9515handleInterruptEv+0x110>

000bafb0 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   bafb0:	4b02      	ldr	r3, [pc, #8]	; (bafbc <_ZN7RH_RF954isr0Ev+0xc>)
   bafb2:	6818      	ldr	r0, [r3, #0]
   bafb4:	b108      	cbz	r0, bafba <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   bafb6:	f7ff bf67 	b.w	bae88 <_ZN7RH_RF9515handleInterruptEv>
}
   bafba:	4770      	bx	lr
   bafbc:	2003e56c 	.word	0x2003e56c

000bafc0 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   bafc0:	4b02      	ldr	r3, [pc, #8]	; (bafcc <_ZN7RH_RF954isr1Ev+0xc>)
   bafc2:	6858      	ldr	r0, [r3, #4]
   bafc4:	b108      	cbz	r0, bafca <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   bafc6:	f7ff bf5f 	b.w	bae88 <_ZN7RH_RF9515handleInterruptEv>
}
   bafca:	4770      	bx	lr
   bafcc:	2003e56c 	.word	0x2003e56c

000bafd0 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   bafd0:	4b02      	ldr	r3, [pc, #8]	; (bafdc <_ZN7RH_RF954isr2Ev+0xc>)
   bafd2:	6898      	ldr	r0, [r3, #8]
   bafd4:	b108      	cbz	r0, bafda <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   bafd6:	f7ff bf57 	b.w	bae88 <_ZN7RH_RF9515handleInterruptEv>
}
   bafda:	4770      	bx	lr
   bafdc:	2003e56c 	.word	0x2003e56c

000bafe0 <_ZN7RH_RF959setModeRxEv>:
{
   bafe0:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   bafe2:	7903      	ldrb	r3, [r0, #4]
   bafe4:	2b04      	cmp	r3, #4
{
   bafe6:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   bafe8:	d010      	beq.n	bb00c <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   bafea:	6803      	ldr	r3, [r0, #0]
   bafec:	2104      	movs	r1, #4
   bafee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   baff2:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   baff4:	2205      	movs	r2, #5
   baff6:	2101      	movs	r1, #1
   baff8:	4620      	mov	r0, r4
   baffa:	f7ff fdb8 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   baffe:	2200      	movs	r2, #0
   bb000:	2140      	movs	r1, #64	; 0x40
   bb002:	4620      	mov	r0, r4
   bb004:	f7ff fdb3 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   bb008:	2304      	movs	r3, #4
   bb00a:	7123      	strb	r3, [r4, #4]
}
   bb00c:	bd10      	pop	{r4, pc}

000bb00e <_ZN7RH_RF959availableEv>:
{
   bb00e:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   bb010:	7903      	ldrb	r3, [r0, #4]
   bb012:	2b03      	cmp	r3, #3
{
   bb014:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   bb016:	d005      	beq.n	bb024 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   bb018:	f7ff ffe2 	bl	bafe0 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   bb01c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   bb020:	b2c0      	uxtb	r0, r0
}
   bb022:	bd10      	pop	{r4, pc}
	return false;
   bb024:	2000      	movs	r0, #0
   bb026:	e7fc      	b.n	bb022 <_ZN7RH_RF959availableEv+0x14>

000bb028 <_ZN7RH_RF959setModeTxEv>:
{
   bb028:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   bb02a:	7903      	ldrb	r3, [r0, #4]
   bb02c:	2b03      	cmp	r3, #3
{
   bb02e:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   bb030:	d010      	beq.n	bb054 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   bb032:	6803      	ldr	r3, [r0, #0]
   bb034:	2103      	movs	r1, #3
   bb036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bb03a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   bb03c:	2203      	movs	r2, #3
   bb03e:	2101      	movs	r1, #1
   bb040:	4620      	mov	r0, r4
   bb042:	f7ff fd94 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   bb046:	2240      	movs	r2, #64	; 0x40
   bb048:	4611      	mov	r1, r2
   bb04a:	4620      	mov	r0, r4
   bb04c:	f7ff fd8f 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   bb050:	2303      	movs	r3, #3
   bb052:	7123      	strb	r3, [r4, #4]
}
   bb054:	bd10      	pop	{r4, pc}

000bb056 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bb056:	2afb      	cmp	r2, #251	; 0xfb
{
   bb058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb05a:	4604      	mov	r4, r0
   bb05c:	460f      	mov	r7, r1
   bb05e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bb060:	d902      	bls.n	bb068 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   bb062:	2600      	movs	r6, #0
}
   bb064:	4630      	mov	r0, r6
   bb066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   bb068:	6803      	ldr	r3, [r0, #0]
   bb06a:	6a1b      	ldr	r3, [r3, #32]
   bb06c:	4798      	blx	r3
    setModeIdle();
   bb06e:	4620      	mov	r0, r4
   bb070:	f7ff fef8 	bl	bae64 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   bb074:	6823      	ldr	r3, [r4, #0]
   bb076:	4620      	mov	r0, r4
   bb078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb07a:	4798      	blx	r3
   bb07c:	4606      	mov	r6, r0
   bb07e:	2800      	cmp	r0, #0
   bb080:	d0ef      	beq.n	bb062 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   bb082:	2200      	movs	r2, #0
   bb084:	210d      	movs	r1, #13
   bb086:	4620      	mov	r0, r4
   bb088:	f7ff fd71 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   bb08c:	7ae2      	ldrb	r2, [r4, #11]
   bb08e:	2100      	movs	r1, #0
   bb090:	4620      	mov	r0, r4
   bb092:	f7ff fd6c 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   bb096:	7b22      	ldrb	r2, [r4, #12]
   bb098:	2100      	movs	r1, #0
   bb09a:	4620      	mov	r0, r4
   bb09c:	f7ff fd67 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   bb0a0:	7b62      	ldrb	r2, [r4, #13]
   bb0a2:	2100      	movs	r1, #0
   bb0a4:	4620      	mov	r0, r4
   bb0a6:	f7ff fd62 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   bb0aa:	7ba2      	ldrb	r2, [r4, #14]
   bb0ac:	2100      	movs	r1, #0
   bb0ae:	4620      	mov	r0, r4
   bb0b0:	f7ff fd5d 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   bb0b4:	462b      	mov	r3, r5
   bb0b6:	463a      	mov	r2, r7
   bb0b8:	2100      	movs	r1, #0
   bb0ba:	4620      	mov	r0, r4
   bb0bc:	f7ff fda5 	bl	bac0a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   bb0c0:	1d2a      	adds	r2, r5, #4
   bb0c2:	b2d2      	uxtb	r2, r2
   bb0c4:	2122      	movs	r1, #34	; 0x22
   bb0c6:	4620      	mov	r0, r4
   bb0c8:	f7ff fd51 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   bb0cc:	4620      	mov	r0, r4
   bb0ce:	f7ff ffab 	bl	bb028 <_ZN7RH_RF959setModeTxEv>
    return true;
   bb0d2:	e7c7      	b.n	bb064 <_ZN7RH_RF954sendEPKhh+0xe>

000bb0d4 <_ZN7RH_RF9510setTxPowerEab>:
{
   bb0d4:	b510      	push	{r4, lr}
   bb0d6:	4604      	mov	r4, r0
    _useRFO = useRFO;
   bb0d8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   bb0dc:	b172      	cbz	r2, bb0fc <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   bb0de:	f381 0204 	usat	r2, #4, r1
   bb0e2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   bb0e6:	b2d2      	uxtb	r2, r2
   bb0e8:	2109      	movs	r1, #9
   bb0ea:	f7ff fd40 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bb0ee:	4620      	mov	r0, r4
   bb0f0:	2204      	movs	r2, #4
}
   bb0f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bb0f6:	214d      	movs	r1, #77	; 0x4d
   bb0f8:	f7ff bd39 	b.w	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
}
   bb0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bb100:	f7ff be0c 	b.w	bad1c <_ZN7RH_RF9510setTxPowerEab.part.0>

000bb104 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   bb104:	b538      	push	{r3, r4, r5, lr}
   bb106:	460c      	mov	r4, r1
   bb108:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   bb10a:	780a      	ldrb	r2, [r1, #0]
   bb10c:	211d      	movs	r1, #29
   bb10e:	f7ff fd2e 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   bb112:	7862      	ldrb	r2, [r4, #1]
   bb114:	211e      	movs	r1, #30
   bb116:	4628      	mov	r0, r5
   bb118:	f7ff fd29 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bb11c:	78a2      	ldrb	r2, [r4, #2]
   bb11e:	4628      	mov	r0, r5
   bb120:	2126      	movs	r1, #38	; 0x26
}
   bb122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bb126:	f7ff bd22 	b.w	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
	...

000bb12c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bb12c:	2905      	cmp	r1, #5
{
   bb12e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bb130:	d80f      	bhi.n	bb152 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bb132:	4b09      	ldr	r3, [pc, #36]	; (bb158 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   bb134:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   bb138:	185c      	adds	r4, r3, r1
   bb13a:	5a5a      	ldrh	r2, [r3, r1]
   bb13c:	78a3      	ldrb	r3, [r4, #2]
   bb13e:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   bb142:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bb144:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   bb148:	f7ff ffdc 	bl	bb104 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   bb14c:	2001      	movs	r0, #1
}
   bb14e:	b002      	add	sp, #8
   bb150:	bd10      	pop	{r4, pc}
        return false;
   bb152:	2000      	movs	r0, #0
   bb154:	e7fb      	b.n	bb14e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   bb156:	bf00      	nop
   bb158:	000c1d60 	.word	0x000c1d60

000bb15c <_ZN7RH_RF9517setPreambleLengthEt>:
{
   bb15c:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bb15e:	0a0a      	lsrs	r2, r1, #8
{
   bb160:	4605      	mov	r5, r0
   bb162:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bb164:	2120      	movs	r1, #32
   bb166:	f7ff fd02 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bb16a:	b2e2      	uxtb	r2, r4
   bb16c:	4628      	mov	r0, r5
   bb16e:	2121      	movs	r1, #33	; 0x21
}
   bb170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bb174:	f7ff bcfb 	b.w	bab6e <_ZN11RHSPIDriver8spiWriteEhh>

000bb178 <_ZN7RH_RF954initEv>:
{
   bb178:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb17a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   bb17c:	f7ff fca6 	bl	baacc <_ZN11RHSPIDriver4initEv>
   bb180:	4606      	mov	r6, r0
   bb182:	b918      	cbnz	r0, bb18c <_ZN7RH_RF954initEv+0x14>
	return false;
   bb184:	2600      	movs	r6, #0
}
   bb186:	4630      	mov	r0, r6
   bb188:	b002      	add	sp, #8
   bb18a:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   bb18c:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   bb190:	2dff      	cmp	r5, #255	; 0xff
   bb192:	d054      	beq.n	bb23e <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   bb194:	4629      	mov	r1, r5
   bb196:	4620      	mov	r0, r4
   bb198:	f7ff fd5f 	bl	bac5a <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   bb19c:	2280      	movs	r2, #128	; 0x80
   bb19e:	2101      	movs	r1, #1
   bb1a0:	4620      	mov	r0, r4
   bb1a2:	f7ff fce4 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   bb1a6:	200a      	movs	r0, #10
   bb1a8:	f001 f9a8 	bl	bc4fc <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   bb1ac:	2101      	movs	r1, #1
   bb1ae:	4620      	mov	r0, r4
   bb1b0:	f7ff fcbc 	bl	bab2c <_ZN11RHSPIDriver7spiReadEh>
   bb1b4:	2880      	cmp	r0, #128	; 0x80
   bb1b6:	d1e5      	bne.n	bb184 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   bb1b8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   bb1bc:	28ff      	cmp	r0, #255	; 0xff
   bb1be:	d01c      	beq.n	bb1fa <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   bb1c0:	2100      	movs	r1, #0
   bb1c2:	f004 fa41 	bl	bf648 <pinMode>
	if (_myInterruptIndex == 0xff)
   bb1c6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   bb1ca:	2bff      	cmp	r3, #255	; 0xff
   bb1cc:	d107      	bne.n	bb1de <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   bb1ce:	4a26      	ldr	r2, [pc, #152]	; (bb268 <_ZN7RH_RF954initEv+0xf0>)
   bb1d0:	7813      	ldrb	r3, [r2, #0]
   bb1d2:	2b03      	cmp	r3, #3
   bb1d4:	d8d6      	bhi.n	bb184 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   bb1d6:	1c59      	adds	r1, r3, #1
   bb1d8:	7011      	strb	r1, [r2, #0]
   bb1da:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   bb1de:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   bb1e2:	4b22      	ldr	r3, [pc, #136]	; (bb26c <_ZN7RH_RF954initEv+0xf4>)
   bb1e4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   bb1e8:	bb62      	cbnz	r2, bb244 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   bb1ea:	4921      	ldr	r1, [pc, #132]	; (bb270 <_ZN7RH_RF954initEv+0xf8>)
   bb1ec:	9200      	str	r2, [sp, #0]
   bb1ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb1f2:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   bb1f4:	b2a8      	uxth	r0, r5
   bb1f6:	f001 ff01 	bl	bcffc <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   bb1fa:	2200      	movs	r2, #0
   bb1fc:	210e      	movs	r1, #14
   bb1fe:	4620      	mov	r0, r4
   bb200:	f7ff fcb5 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   bb204:	2200      	movs	r2, #0
   bb206:	210f      	movs	r1, #15
   bb208:	4620      	mov	r0, r4
   bb20a:	f7ff fcb0 	bl	bab6e <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   bb20e:	4620      	mov	r0, r4
   bb210:	f7ff fe28 	bl	bae64 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   bb214:	2100      	movs	r1, #0
   bb216:	4620      	mov	r0, r4
   bb218:	f7ff ff88 	bl	bb12c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   bb21c:	2108      	movs	r1, #8
   bb21e:	4620      	mov	r0, r4
   bb220:	f7ff ff9c 	bl	bb15c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   bb224:	ed9f 0a13 	vldr	s0, [pc, #76]	; bb274 <_ZN7RH_RF954initEv+0xfc>
   bb228:	4620      	mov	r0, r4
   bb22a:	f7ff fdd9 	bl	bade0 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   bb22e:	2300      	movs	r3, #0
   bb230:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   bb234:	210d      	movs	r1, #13
   bb236:	4620      	mov	r0, r4
   bb238:	f7ff fd70 	bl	bad1c <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   bb23c:	e7a3      	b.n	bb186 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   bb23e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   bb242:	e7ab      	b.n	bb19c <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   bb244:	2a01      	cmp	r2, #1
   bb246:	f04f 0300 	mov.w	r3, #0
   bb24a:	d104      	bne.n	bb256 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   bb24c:	9300      	str	r3, [sp, #0]
   bb24e:	490a      	ldr	r1, [pc, #40]	; (bb278 <_ZN7RH_RF954initEv+0x100>)
   bb250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb254:	e7ce      	b.n	bb1f4 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   bb256:	2a02      	cmp	r2, #2
   bb258:	d194      	bne.n	bb184 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   bb25a:	9300      	str	r3, [sp, #0]
   bb25c:	4907      	ldr	r1, [pc, #28]	; (bb27c <_ZN7RH_RF954initEv+0x104>)
   bb25e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb262:	2201      	movs	r2, #1
   bb264:	e7c6      	b.n	bb1f4 <_ZN7RH_RF954initEv+0x7c>
   bb266:	bf00      	nop
   bb268:	2003e569 	.word	0x2003e569
   bb26c:	2003e56c 	.word	0x2003e56c
   bb270:	000bafb1 	.word	0x000bafb1
   bb274:	43d90000 	.word	0x43d90000
   bb278:	000bafc1 	.word	0x000bafc1
   bb27c:	000bafd1 	.word	0x000bafd1

000bb280 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   bb280:	2001      	movs	r0, #1
   bb282:	4770      	bx	lr

000bb284 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   bb284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb286:	4d1f      	ldr	r5, [pc, #124]	; (bb304 <_ZN14SequentialFileC1Ev+0x80>)
   bb288:	4b1f      	ldr	r3, [pc, #124]	; (bb308 <_ZN14SequentialFileC1Ev+0x84>)
   bb28a:	4604      	mov	r4, r0
   bb28c:	4629      	mov	r1, r5
   bb28e:	f840 3b04 	str.w	r3, [r0], #4
   bb292:	f003 fc72 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
   bb296:	491d      	ldr	r1, [pc, #116]	; (bb30c <_ZN14SequentialFileC1Ev+0x88>)
   bb298:	f104 0014 	add.w	r0, r4, #20
   bb29c:	f003 fc6d 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
   bb2a0:	4629      	mov	r1, r5
   bb2a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bb2a6:	f003 fc68 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
   bb2aa:	2300      	movs	r3, #0
   bb2ac:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   bb2b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   bb2b4:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   bb2b8:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   bb2bc:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   bb2c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   bb2c4:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   bb2c6:	2308      	movs	r3, #8
   bb2c8:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb2ca:	2020      	movs	r0, #32
   bb2cc:	f7f8 fee3 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bb2d0:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   bb2d2:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bb2d4:	3d01      	subs	r5, #1
   bb2d6:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   bb2d8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   bb2dc:	4606      	mov	r6, r0
   bb2de:	f44f 7000 	mov.w	r0, #512	; 0x200
   bb2e2:	f7f8 fed8 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb2e6:	f500 7300 	add.w	r3, r0, #512	; 0x200
   bb2ea:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   bb2ee:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   bb2f2:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   bb2f4:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   bb2f6:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   bb2f8:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb2fa:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   bb2fc:	6667      	str	r7, [r4, #100]	; 0x64

}
   bb2fe:	4620      	mov	r0, r4
   bb300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb302:	bf00      	nop
   bb304:	000c20fc 	.word	0x000c20fc
   bb308:	000c1efc 	.word	0x000c1efc
   bb30c:	000c1dfc 	.word	0x000c1dfc

000bb310 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bb310:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   bb312:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bb314:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   bb316:	4628      	mov	r0, r5
   bb318:	f003 fc8d 	bl	bec36 <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   bb31c:	490e      	ldr	r1, [pc, #56]	; (bb358 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   bb31e:	4668      	mov	r0, sp
   bb320:	f003 fc2b 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
   bb324:	4669      	mov	r1, sp
   bb326:	4628      	mov	r0, r5
   bb328:	f003 fcff 	bl	bed2a <_ZNK6String8endsWithERKS_>
   bb32c:	4606      	mov	r6, r0
   bb32e:	4668      	mov	r0, sp
   bb330:	f003 fbd8 	bl	beae4 <_ZN6StringD1Ev>
   bb334:	b16e      	cbz	r6, bb352 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   bb336:	68e3      	ldr	r3, [r4, #12]
   bb338:	2200      	movs	r2, #0
   bb33a:	3b01      	subs	r3, #1
   bb33c:	4629      	mov	r1, r5
   bb33e:	4668      	mov	r0, sp
   bb340:	f003 fd08 	bl	bed54 <_ZNK6String9substringEjj>
   bb344:	4669      	mov	r1, sp
   bb346:	4628      	mov	r0, r5
   bb348:	f003 fc6d 	bl	bec26 <_ZN6StringaSEOS_>
   bb34c:	4668      	mov	r0, sp
   bb34e:	f003 fbc9 	bl	beae4 <_ZN6StringD1Ev>
    }
    return *this; 
};
   bb352:	4620      	mov	r0, r4
   bb354:	b004      	add	sp, #16
   bb356:	bd70      	pop	{r4, r5, r6, pc}
   bb358:	000c1e01 	.word	0x000c1e01

000bb35c <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   bb35c:	b510      	push	{r4, lr}
    if (!queueMutex) {
   bb35e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   bb360:	4604      	mov	r4, r0
    if (!queueMutex) {
   bb362:	b913      	cbnz	r3, bb36a <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   bb364:	303c      	adds	r0, #60	; 0x3c
   bb366:	f000 fc4d 	bl	bbc04 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   bb36a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   bb36c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   bb370:	f000 bc50 	b.w	bbc14 <os_mutex_lock>

000bb374 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   bb374:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   bb376:	f000 bc55 	b.w	bbc24 <os_mutex_unlock>
	...

000bb37c <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   bb37c:	b510      	push	{r4, lr}
   bb37e:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   bb380:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   bb382:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   bb384:	f000 fe06 	bl	bbf94 <stat>
    if (result == 0) {
   bb388:	b9d0      	cbnz	r0, bb3c0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bb38a:	9b01      	ldr	r3, [sp, #4]
   bb38c:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   bb38e:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bb390:	d506      	bpl.n	bb3a0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   bb392:	4915      	ldr	r1, [pc, #84]	; (bb3e8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   bb394:	4815      	ldr	r0, [pc, #84]	; (bb3ec <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bb396:	f7f8 fed2 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        return true;
   bb39a:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   bb39c:	b016      	add	sp, #88	; 0x58
   bb39e:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   bb3a0:	4812      	ldr	r0, [pc, #72]	; (bb3ec <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bb3a2:	4913      	ldr	r1, [pc, #76]	; (bb3f0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   bb3a4:	f7fb fc4a 	bl	b6c3c <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   bb3a8:	4620      	mov	r0, r4
   bb3aa:	f005 f989 	bl	c06c0 <unlink>
    result = mkdir(path, 0777);
   bb3ae:	f240 11ff 	movw	r1, #511	; 0x1ff
   bb3b2:	4620      	mov	r0, r4
   bb3b4:	f000 fdf6 	bl	bbfa4 <mkdir>
    if (result == 0) {
   bb3b8:	b980      	cbnz	r0, bb3dc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   bb3ba:	490e      	ldr	r1, [pc, #56]	; (bb3f4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   bb3bc:	4622      	mov	r2, r4
   bb3be:	e7e9      	b.n	bb394 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   bb3c0:	f001 f864 	bl	bc48c <__errno>
   bb3c4:	6803      	ldr	r3, [r0, #0]
   bb3c6:	2b02      	cmp	r3, #2
   bb3c8:	d0f1      	beq.n	bb3ae <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   bb3ca:	f001 f85f 	bl	bc48c <__errno>
   bb3ce:	490a      	ldr	r1, [pc, #40]	; (bb3f8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   bb3d0:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   bb3d2:	4806      	ldr	r0, [pc, #24]	; (bb3ec <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bb3d4:	f7fb fc32 	bl	b6c3c <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bb3d8:	2000      	movs	r0, #0
   bb3da:	e7df      	b.n	bb39c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   bb3dc:	f001 f856 	bl	bc48c <__errno>
   bb3e0:	4906      	ldr	r1, [pc, #24]	; (bb3fc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   bb3e2:	6802      	ldr	r2, [r0, #0]
   bb3e4:	e7f5      	b.n	bb3d2 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   bb3e6:	bf00      	nop
   bb3e8:	000c1e0e 	.word	0x000c1e0e
   bb3ec:	2003e578 	.word	0x2003e578
   bb3f0:	000c1e2b 	.word	0x000c1e2b
   bb3f4:	000c1e5c 	.word	0x000c1e5c
   bb3f8:	000c1e48 	.word	0x000c1e48
   bb3fc:	000c1e6b 	.word	0x000c1e6b

000bb400 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   bb400:	b538      	push	{r3, r4, r5, lr}
   bb402:	4615      	mov	r5, r2
   bb404:	4604      	mov	r4, r0
    String result = name;
   bb406:	f003 fbb8 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   bb40a:	b14d      	cbz	r5, bb420 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   bb40c:	782b      	ldrb	r3, [r5, #0]
   bb40e:	b13b      	cbz	r3, bb420 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   bb410:	4904      	ldr	r1, [pc, #16]	; (bb424 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   bb412:	4620      	mov	r0, r4
   bb414:	f003 fc38 	bl	bec88 <_ZN6String6concatEPKc>
   bb418:	4629      	mov	r1, r5
   bb41a:	4620      	mov	r0, r4
   bb41c:	f003 fc34 	bl	bec88 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   bb420:	4620      	mov	r0, r4
   bb422:	bd38      	pop	{r3, r4, r5, pc}
   bb424:	000c2204 	.word	0x000c2204

000bb428 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   bb428:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb42a:	4605      	mov	r5, r0
   bb42c:	460e      	mov	r6, r1
   bb42e:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   bb430:	6949      	ldr	r1, [r1, #20]
   bb432:	4668      	mov	r0, sp
   bb434:	f003 fcae 	bl	bed94 <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   bb438:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   bb43a:	b904      	cbnz	r4, bb43e <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   bb43c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bb43e:	4622      	mov	r2, r4
   bb440:	4628      	mov	r0, r5
   bb442:	f7ff ffdd 	bl	bb400 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   bb446:	4668      	mov	r0, sp
   bb448:	f003 fb4c 	bl	beae4 <_ZN6StringD1Ev>
}
   bb44c:	4628      	mov	r0, r5
   bb44e:	b004      	add	sp, #16
   bb450:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb454 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bb454:	b570      	push	{r4, r5, r6, lr}
   bb456:	460c      	mov	r4, r1
   bb458:	b08e      	sub	sp, #56	; 0x38
    String result;
   bb45a:	491a      	ldr	r1, [pc, #104]	; (bb4c4 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bb45c:	e9cd 3200 	strd	r3, r2, [sp]
   bb460:	4605      	mov	r5, r0
    String result;
   bb462:	f003 fb8a 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   bb466:	68e0      	ldr	r0, [r4, #12]
   bb468:	69e1      	ldr	r1, [r4, #28]
   bb46a:	4401      	add	r1, r0
   bb46c:	3104      	adds	r1, #4
   bb46e:	4628      	mov	r0, r5
   bb470:	f003 fb56 	bl	beb20 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   bb474:	1d21      	adds	r1, r4, #4
   bb476:	a806      	add	r0, sp, #24
   bb478:	f003 fbca 	bl	bec10 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   bb47c:	4912      	ldr	r1, [pc, #72]	; (bb4c8 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   bb47e:	a802      	add	r0, sp, #8
   bb480:	f003 fb7b 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
   bb484:	a902      	add	r1, sp, #8
   bb486:	a806      	add	r0, sp, #24
   bb488:	f003 fc1c 	bl	becc4 <_ZplRK15StringSumHelperRK6String>
   bb48c:	e9dd 3200 	ldrd	r3, r2, [sp]
   bb490:	4606      	mov	r6, r0
   bb492:	4621      	mov	r1, r4
   bb494:	a80a      	add	r0, sp, #40	; 0x28
   bb496:	f7ff ffc7 	bl	bb428 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   bb49a:	a90a      	add	r1, sp, #40	; 0x28
   bb49c:	4630      	mov	r0, r6
   bb49e:	f003 fc11 	bl	becc4 <_ZplRK15StringSumHelperRK6String>
   bb4a2:	4601      	mov	r1, r0
   bb4a4:	4628      	mov	r0, r5
   bb4a6:	f003 fba4 	bl	bebf2 <_ZN6StringaSERKS_>
   bb4aa:	a80a      	add	r0, sp, #40	; 0x28
   bb4ac:	f003 fb1a 	bl	beae4 <_ZN6StringD1Ev>
   bb4b0:	a802      	add	r0, sp, #8
   bb4b2:	f003 fb17 	bl	beae4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bb4b6:	a806      	add	r0, sp, #24
   bb4b8:	f003 fb14 	bl	beae4 <_ZN6StringD1Ev>
}
   bb4bc:	4628      	mov	r0, r5
   bb4be:	b00e      	add	sp, #56	; 0x38
   bb4c0:	bd70      	pop	{r4, r5, r6, pc}
   bb4c2:	bf00      	nop
   bb4c4:	000c20fc 	.word	0x000c20fc
   bb4c8:	000c1e01 	.word	0x000c1e01

000bb4cc <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bb4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   bb4d0:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bb4d2:	b08e      	sub	sp, #56	; 0x38
   bb4d4:	4605      	mov	r5, r0
   bb4d6:	460f      	mov	r7, r1
    if (allExtensions) {
   bb4d8:	2a00      	cmp	r2, #0
   bb4da:	d04a      	beq.n	bb572 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   bb4dc:	6840      	ldr	r0, [r0, #4]
   bb4de:	f000 fd71 	bl	bbfc4 <opendir>
        if (dir) {
   bb4e2:	4606      	mov	r6, r0
   bb4e4:	2800      	cmp	r0, #0
   bb4e6:	d054      	beq.n	bb592 <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   bb4e8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; bb5a0 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   bb4ec:	f8df 90ac 	ldr.w	r9, [pc, #172]	; bb59c <_ZN14SequentialFile13removeFileNumEib+0xd0>
   bb4f0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; bb598 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   bb4f4:	4630      	mov	r0, r6
   bb4f6:	f000 fd6d 	bl	bbfd4 <readdir>
                if (!ent) {
   bb4fa:	2800      	cmp	r0, #0
   bb4fc:	d033      	beq.n	bb566 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   bb4fe:	7a82      	ldrb	r2, [r0, #10]
   bb500:	2a08      	cmp	r2, #8
   bb502:	d1f7      	bne.n	bb4f4 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   bb504:	f100 040b 	add.w	r4, r0, #11
   bb508:	6969      	ldr	r1, [r5, #20]
   bb50a:	aa01      	add	r2, sp, #4
   bb50c:	4620      	mov	r0, r4
   bb50e:	f000 ff95 	bl	bc43c <sscanf>
   bb512:	2801      	cmp	r0, #1
   bb514:	d1ee      	bne.n	bb4f4 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   bb516:	9b01      	ldr	r3, [sp, #4]
   bb518:	42bb      	cmp	r3, r7
   bb51a:	d1eb      	bne.n	bb4f4 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   bb51c:	1d29      	adds	r1, r5, #4
   bb51e:	a80a      	add	r0, sp, #40	; 0x28
   bb520:	f003 fb76 	bl	bec10 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   bb524:	4651      	mov	r1, sl
   bb526:	a806      	add	r0, sp, #24
   bb528:	f003 fb27 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
   bb52c:	a906      	add	r1, sp, #24
   bb52e:	a80a      	add	r0, sp, #40	; 0x28
   bb530:	f003 fbc8 	bl	becc4 <_ZplRK15StringSumHelperRK6String>
   bb534:	4621      	mov	r1, r4
   bb536:	f003 fbd1 	bl	becdc <_ZplRK15StringSumHelperPKc>
   bb53a:	4601      	mov	r1, r0
   bb53c:	a802      	add	r0, sp, #8
   bb53e:	f003 fb67 	bl	bec10 <_ZN6StringC1ERKS_>
   bb542:	a806      	add	r0, sp, #24
   bb544:	f003 face 	bl	beae4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bb548:	a80a      	add	r0, sp, #40	; 0x28
   bb54a:	f003 facb 	bl	beae4 <_ZN6StringD1Ev>
                        unlink(path);
   bb54e:	9802      	ldr	r0, [sp, #8]
   bb550:	f005 f8b6 	bl	c06c0 <unlink>
                        _log.trace("removed %s", path.c_str());
   bb554:	4640      	mov	r0, r8
   bb556:	9a02      	ldr	r2, [sp, #8]
   bb558:	4649      	mov	r1, r9
   bb55a:	f7fb fb7d 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   bb55e:	a802      	add	r0, sp, #8
   bb560:	f003 fac0 	bl	beae4 <_ZN6StringD1Ev>
                    continue;
   bb564:	e7c6      	b.n	bb4f4 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   bb566:	4630      	mov	r0, r6
}
   bb568:	b00e      	add	sp, #56	; 0x38
   bb56a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   bb56e:	f000 bd39 	b.w	bbfe4 <closedir>
        String path = getPathForFileNum(fileNum); 
   bb572:	460a      	mov	r2, r1
   bb574:	4601      	mov	r1, r0
   bb576:	a80a      	add	r0, sp, #40	; 0x28
   bb578:	f7ff ff6c 	bl	bb454 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   bb57c:	980a      	ldr	r0, [sp, #40]	; 0x28
   bb57e:	f005 f89f 	bl	c06c0 <unlink>
        _log.trace("removed %s", path.c_str());
   bb582:	4805      	ldr	r0, [pc, #20]	; (bb598 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   bb584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bb586:	4905      	ldr	r1, [pc, #20]	; (bb59c <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   bb588:	f7fb fb66 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   bb58c:	a80a      	add	r0, sp, #40	; 0x28
   bb58e:	f003 faa9 	bl	beae4 <_ZN6StringD1Ev>
}
   bb592:	b00e      	add	sp, #56	; 0x38
   bb594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb598:	2003e578 	.word	0x2003e578
   bb59c:	000c1e03 	.word	0x000c1e03
   bb5a0:	000c1e01 	.word	0x000c1e01

000bb5a4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   bb5a4:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   bb5a6:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   bb5a8:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   bb5aa:	b183      	cbz	r3, bb5ce <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   bb5ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
   bb5ae:	6945      	ldr	r5, [r0, #20]
   bb5b0:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   bb5b2:	42ae      	cmp	r6, r5
   bb5b4:	d906      	bls.n	bb5c4 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   bb5b6:	f855 0b04 	ldr.w	r0, [r5], #4
   bb5ba:	f44f 7100 	mov.w	r1, #512	; 0x200
   bb5be:	f7f8 fd6e 	bl	b409e <_ZdlPvj>
   bb5c2:	e7f6      	b.n	bb5b2 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   bb5c4:	6861      	ldr	r1, [r4, #4]
   bb5c6:	6820      	ldr	r0, [r4, #0]
   bb5c8:	0089      	lsls	r1, r1, #2
   bb5ca:	f7f8 fd68 	bl	b409e <_ZdlPvj>
    }
   bb5ce:	4620      	mov	r0, r4
   bb5d0:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb5d4 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   bb5d4:	b510      	push	{r4, lr}
   bb5d6:	4b09      	ldr	r3, [pc, #36]	; (bb5fc <_ZN14SequentialFileD1Ev+0x28>)
   bb5d8:	4604      	mov	r4, r0
   bb5da:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   bb5de:	f7ff ffe1 	bl	bb5a4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   bb5e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bb5e6:	f003 fa7d 	bl	beae4 <_ZN6StringD1Ev>
   bb5ea:	f104 0014 	add.w	r0, r4, #20
   bb5ee:	f003 fa79 	bl	beae4 <_ZN6StringD1Ev>
   bb5f2:	1d20      	adds	r0, r4, #4
   bb5f4:	f003 fa76 	bl	beae4 <_ZN6StringD1Ev>
}
   bb5f8:	4620      	mov	r0, r4
   bb5fa:	bd10      	pop	{r4, pc}
   bb5fc:	000c1efc 	.word	0x000c1efc

000bb600 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   bb600:	b510      	push	{r4, lr}
   bb602:	4604      	mov	r4, r0
}
   bb604:	f7ff ffe6 	bl	bb5d4 <_ZN14SequentialFileD1Ev>
   bb608:	4620      	mov	r0, r4
   bb60a:	2168      	movs	r1, #104	; 0x68
   bb60c:	f7f8 fd47 	bl	b409e <_ZdlPvj>
   bb610:	4620      	mov	r0, r4
   bb612:	bd10      	pop	{r4, pc}

000bb614 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   bb614:	68c3      	ldr	r3, [r0, #12]
   bb616:	68ca      	ldr	r2, [r1, #12]
   bb618:	1a9b      	subs	r3, r3, r2
   bb61a:	109b      	asrs	r3, r3, #2
   bb61c:	1e5a      	subs	r2, r3, #1
   bb61e:	e9d0 3000 	ldrd	r3, r0, [r0]
   bb622:	1a1b      	subs	r3, r3, r0
   bb624:	109b      	asrs	r3, r3, #2
   bb626:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   bb62a:	6888      	ldr	r0, [r1, #8]
   bb62c:	680a      	ldr	r2, [r1, #0]
   bb62e:	1a80      	subs	r0, r0, r2
      }
   bb630:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   bb634:	4770      	bx	lr
	...

000bb638 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   bb638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   bb63c:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   bb63e:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   bb640:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   bb642:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   bb644:	4604      	mov	r4, r0
   bb646:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   bb648:	d007      	beq.n	bb65a <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bb64a:	b10b      	cbz	r3, bb650 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   bb64c:	680a      	ldr	r2, [r1, #0]
   bb64e:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   bb650:	69a3      	ldr	r3, [r4, #24]
   bb652:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   bb654:	61a3      	str	r3, [r4, #24]
      }
   bb656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bb65a:	f100 0108 	add.w	r1, r0, #8
   bb65e:	3018      	adds	r0, #24
   bb660:	f7ff ffd8 	bl	bb614 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   bb664:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   bb668:	4298      	cmp	r0, r3
   bb66a:	d102      	bne.n	bb672 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   bb66c:	4838      	ldr	r0, [pc, #224]	; (bb750 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   bb66e:	f004 f904 	bl	bf87a <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bb672:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bb674:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bb676:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bb678:	1a11      	subs	r1, r2, r0
   bb67a:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bb67e:	2901      	cmp	r1, #1
   bb680:	d825      	bhi.n	bb6ce <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   bb682:	6961      	ldr	r1, [r4, #20]
   bb684:	eba2 0801 	sub.w	r8, r2, r1
   bb688:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   bb68c:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   bb68e:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   bb692:	d936      	bls.n	bb702 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   bb694:	1b5d      	subs	r5, r3, r5
   bb696:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   bb698:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   bb69c:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   bb69e:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   bb6a0:	eba3 0201 	sub.w	r2, r3, r1
   bb6a4:	d926      	bls.n	bb6f4 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   bb6a6:	428b      	cmp	r3, r1
   bb6a8:	d002      	beq.n	bb6b0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bb6aa:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bb6ac:	f004 fe00 	bl	c02b0 <memmove>
	_M_node = __new_node;
   bb6b0:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   bb6b2:	682b      	ldr	r3, [r5, #0]
   bb6b4:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb6b6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bb6ba:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   bb6bc:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   bb6c0:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bb6c2:	f855 3008 	ldr.w	r3, [r5, r8]
   bb6c6:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb6c8:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bb6cc:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb6ce:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   bb6d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
   bb6d4:	f7f8 fcdf 	bl	b4096 <_Znwj>
   bb6d8:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   bb6da:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bb6dc:	b10b      	cbz	r3, bb6e2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   bb6de:	683a      	ldr	r2, [r7, #0]
   bb6e0:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   bb6e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb6e4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bb6e6:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bb6e8:	685b      	ldr	r3, [r3, #4]
   bb6ea:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb6ec:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bb6f0:	6222      	str	r2, [r4, #32]
   bb6f2:	e7af      	b.n	bb654 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   bb6f4:	428b      	cmp	r3, r1
   bb6f6:	d0db      	beq.n	bb6b0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bb6f8:	f108 0004 	add.w	r0, r8, #4
   bb6fc:	1a80      	subs	r0, r0, r2
   bb6fe:	4428      	add	r0, r5
   bb700:	e7d4      	b.n	bb6ac <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   bb702:	f103 0902 	add.w	r9, r3, #2
   bb706:	2b01      	cmp	r3, #1
   bb708:	bf2c      	ite	cs
   bb70a:	4499      	addcs	r9, r3
   bb70c:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   bb710:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   bb714:	d301      	bcc.n	bb71a <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   bb716:	f004 f8ad 	bl	bf874 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb71a:	ea4f 0089 	mov.w	r0, r9, lsl #2
   bb71e:	f7f8 fcba 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   bb722:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bb724:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bb726:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   bb72a:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bb72c:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   bb72e:	4291      	cmp	r1, r2
   bb730:	4682      	mov	sl, r0
   bb732:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   bb736:	d003      	beq.n	bb740 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bb738:	1a52      	subs	r2, r2, r1
   bb73a:	4628      	mov	r0, r5
   bb73c:	f004 fdb8 	bl	c02b0 <memmove>
	::operator delete(__p
   bb740:	6861      	ldr	r1, [r4, #4]
   bb742:	6820      	ldr	r0, [r4, #0]
   bb744:	0089      	lsls	r1, r1, #2
   bb746:	f7f8 fcaa 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   bb74a:	e9c4 a900 	strd	sl, r9, [r4]
   bb74e:	e7af      	b.n	bb6b0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   bb750:	000c1a85 	.word	0x000c1a85

000bb754 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   bb754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   bb758:	68c3      	ldr	r3, [r0, #12]
   bb75a:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   bb75c:	b086      	sub	sp, #24
   bb75e:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   bb760:	d808      	bhi.n	bb774 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   bb762:	4934      	ldr	r1, [pc, #208]	; (bb834 <_ZN14SequentialFile7scanDirEv+0xe0>)
   bb764:	4834      	ldr	r0, [pc, #208]	; (bb838 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bb766:	f7fb fa69 	bl	b6c3c <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bb76a:	2600      	movs	r6, #0
}
   bb76c:	4630      	mov	r0, r6
   bb76e:	b006      	add	sp, #24
   bb770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   bb774:	6840      	ldr	r0, [r0, #4]
   bb776:	f7ff fe01 	bl	bb37c <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   bb77a:	4606      	mov	r6, r0
   bb77c:	2800      	cmp	r0, #0
   bb77e:	d0f4      	beq.n	bb76a <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   bb780:	6963      	ldr	r3, [r4, #20]
   bb782:	6862      	ldr	r2, [r4, #4]
   bb784:	492d      	ldr	r1, [pc, #180]	; (bb83c <_ZN14SequentialFile7scanDirEv+0xe8>)
   bb786:	482c      	ldr	r0, [pc, #176]	; (bb838 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bb788:	f7fb fa66 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   bb78c:	6860      	ldr	r0, [r4, #4]
   bb78e:	f000 fc19 	bl	bbfc4 <opendir>
    if (!dir) {
   bb792:	4607      	mov	r7, r0
   bb794:	2800      	cmp	r0, #0
   bb796:	d0e8      	beq.n	bb76a <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   bb798:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bb79a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bb840 <_ZN14SequentialFile7scanDirEv+0xec>
   bb79e:	f8df 8098 	ldr.w	r8, [pc, #152]	; bb838 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   bb7a2:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   bb7a4:	4638      	mov	r0, r7
   bb7a6:	f000 fc15 	bl	bbfd4 <readdir>
        if (!ent) {
   bb7aa:	4605      	mov	r5, r0
   bb7ac:	2800      	cmp	r0, #0
   bb7ae:	d039      	beq.n	bb824 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   bb7b0:	7a83      	ldrb	r3, [r0, #10]
   bb7b2:	2b08      	cmp	r3, #8
   bb7b4:	d1f6      	bne.n	bb7a4 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   bb7b6:	350b      	adds	r5, #11
   bb7b8:	6961      	ldr	r1, [r4, #20]
   bb7ba:	aa01      	add	r2, sp, #4
   bb7bc:	4628      	mov	r0, r5
   bb7be:	f000 fe3d 	bl	bc43c <sscanf>
   bb7c2:	2801      	cmp	r0, #1
   bb7c4:	d1ee      	bne.n	bb7a4 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   bb7c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bb7c8:	b17b      	cbz	r3, bb7ea <_ZN14SequentialFile7scanDirEv+0x96>
   bb7ca:	4629      	mov	r1, r5
   bb7cc:	a802      	add	r0, sp, #8
   bb7ce:	f003 f9d4 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
   bb7d2:	f104 0124 	add.w	r1, r4, #36	; 0x24
   bb7d6:	a802      	add	r0, sp, #8
   bb7d8:	f003 faa7 	bl	bed2a <_ZNK6String8endsWithERKS_>
   bb7dc:	4682      	mov	sl, r0
   bb7de:	a802      	add	r0, sp, #8
   bb7e0:	f003 f980 	bl	beae4 <_ZN6StringD1Ev>
   bb7e4:	f1ba 0f00 	cmp.w	sl, #0
   bb7e8:	d0dc      	beq.n	bb7a4 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   bb7ea:	6823      	ldr	r3, [r4, #0]
   bb7ec:	4629      	mov	r1, r5
   bb7ee:	689b      	ldr	r3, [r3, #8]
   bb7f0:	4620      	mov	r0, r4
   bb7f2:	4798      	blx	r3
   bb7f4:	2800      	cmp	r0, #0
   bb7f6:	d0d5      	beq.n	bb7a4 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   bb7f8:	9a01      	ldr	r2, [sp, #4]
   bb7fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bb7fc:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   bb7fe:	bfb8      	it	lt
   bb800:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bb802:	462b      	mov	r3, r5
   bb804:	4649      	mov	r1, r9
   bb806:	4640      	mov	r0, r8
   bb808:	f7fb fa26 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   bb80c:	4620      	mov	r0, r4
   bb80e:	f7ff fda5 	bl	bb35c <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   bb812:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bb816:	a901      	add	r1, sp, #4
   bb818:	f7ff ff0e 	bl	bb638 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   bb81c:	4620      	mov	r0, r4
   bb81e:	f7ff fda9 	bl	bb374 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   bb822:	e7bf      	b.n	bb7a4 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   bb824:	4638      	mov	r0, r7
   bb826:	f000 fbdd 	bl	bbfe4 <closedir>
    scanDirCompleted = true;
   bb82a:	2301      	movs	r3, #1
   bb82c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   bb830:	e79c      	b.n	bb76c <_ZN14SequentialFile7scanDirEv+0x18>
   bb832:	bf00      	nop
   bb834:	000c1e81 	.word	0x000c1e81
   bb838:	2003e578 	.word	0x2003e578
   bb83c:	000c1e96 	.word	0x000c1e96
   bb840:	000c1eb2 	.word	0x000c1eb2

000bb844 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   bb844:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   bb846:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   bb84a:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bb84c:	b90b      	cbnz	r3, bb852 <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   bb84e:	f7ff ff81 	bl	bb754 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   bb852:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   bb854:	3001      	adds	r0, #1
   bb856:	63a0      	str	r0, [r4, #56]	; 0x38
}
   bb858:	bd10      	pop	{r4, pc}
	...

000bb85c <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   bb85c:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   bb85e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   bb862:	4604      	mov	r4, r0
   bb864:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   bb866:	b90b      	cbnz	r3, bb86c <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   bb868:	f7ff ff74 	bl	bb754 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   bb86c:	4620      	mov	r0, r4
   bb86e:	f7ff fd75 	bl	bb35c <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   bb872:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   bb874:	6da2      	ldr	r2, [r4, #88]	; 0x58
   bb876:	429a      	cmp	r2, r3
   bb878:	d020      	beq.n	bb8bc <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   bb87a:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   bb87e:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   bb880:	b126      	cbz	r6, bb88c <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   bb882:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   bb884:	4293      	cmp	r3, r2
   bb886:	d00c      	beq.n	bb8a2 <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   bb888:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   bb88a:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   bb88c:	4620      	mov	r0, r4
   bb88e:	f7ff fd71 	bl	bb374 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   bb892:	b125      	cbz	r5, bb89e <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   bb894:	490a      	ldr	r1, [pc, #40]	; (bb8c0 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   bb896:	480b      	ldr	r0, [pc, #44]	; (bb8c4 <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   bb898:	462a      	mov	r2, r5
   bb89a:	f7fb f9dd 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
}
   bb89e:	4628      	mov	r0, r5
   bb8a0:	bd70      	pop	{r4, r5, r6, pc}
   bb8a2:	f44f 7100 	mov.w	r1, #512	; 0x200
   bb8a6:	f7f8 fbfa 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   bb8aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bb8ac:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bb8ae:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   bb8b0:	685b      	ldr	r3, [r3, #4]
   bb8b2:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb8b4:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bb8b8:	6522      	str	r2, [r4, #80]	; 0x50
   bb8ba:	e7e6      	b.n	bb88a <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   bb8bc:	2500      	movs	r5, #0
   bb8be:	e7e5      	b.n	bb88c <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   bb8c0:	000c1ec8 	.word	0x000c1ec8
   bb8c4:	2003e578 	.word	0x2003e578

000bb8c8 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   bb8c8:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   bb8ca:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   bb8ce:	9101      	str	r1, [sp, #4]
   bb8d0:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bb8d2:	b90b      	cbnz	r3, bb8d8 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   bb8d4:	f7ff ff3e 	bl	bb754 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   bb8d8:	9b01      	ldr	r3, [sp, #4]
   bb8da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   bb8dc:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   bb8de:	bfb8      	it	lt
   bb8e0:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   bb8e2:	4620      	mov	r0, r4
   bb8e4:	f7ff fd3a 	bl	bb35c <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   bb8e8:	a901      	add	r1, sp, #4
   bb8ea:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bb8ee:	f7ff fea3 	bl	bb638 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   bb8f2:	4620      	mov	r0, r4
   bb8f4:	f7ff fd3e 	bl	bb374 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bb8f8:	b002      	add	sp, #8
   bb8fa:	bd10      	pop	{r4, pc}

000bb8fc <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   bb8fc:	b538      	push	{r3, r4, r5, lr}
   bb8fe:	4604      	mov	r4, r0
    queueMutexLock();
   bb900:	f7ff fd2c 	bl	bb35c <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bb904:	f104 0148 	add.w	r1, r4, #72	; 0x48
   bb908:	f104 0058 	add.w	r0, r4, #88	; 0x58
   bb90c:	f7ff fe82 	bl	bb614 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   bb910:	4605      	mov	r5, r0
    queueMutexUnlock();
   bb912:	4620      	mov	r0, r4
   bb914:	f7ff fd2e 	bl	bb374 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bb918:	4628      	mov	r0, r5
   bb91a:	bd38      	pop	{r3, r4, r5, pc}

000bb91c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   bb91c:	4b01      	ldr	r3, [pc, #4]	; (bb924 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   bb91e:	4a02      	ldr	r2, [pc, #8]	; (bb928 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   bb920:	601a      	str	r2, [r3, #0]
}
   bb922:	4770      	bx	lr
   bb924:	2003e578 	.word	0x2003e578
   bb928:	000c1ee5 	.word	0x000c1ee5

000bb92c <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   bb92c:	4770      	bx	lr

000bb92e <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   bb92e:	6803      	ldr	r3, [r0, #0]
   bb930:	685b      	ldr	r3, [r3, #4]
   bb932:	4718      	bx	r3

000bb934 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bb934:	b510      	push	{r4, lr}
    if (lastUpdate) {
   bb936:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bb938:	4604      	mov	r4, r0
    if (lastUpdate) {
   bb93a:	b133      	cbz	r3, bb94a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bb93c:	b131      	cbz	r1, bb94c <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   bb93e:	6823      	ldr	r3, [r4, #0]
   bb940:	4620      	mov	r0, r4
   bb942:	689b      	ldr	r3, [r3, #8]
   bb944:	4798      	blx	r3
            lastUpdate = 0;
   bb946:	2300      	movs	r3, #0
   bb948:	61a3      	str	r3, [r4, #24]
        }
    }
}
   bb94a:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bb94c:	f000 f9c2 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bb950:	69a3      	ldr	r3, [r4, #24]
   bb952:	1ac0      	subs	r0, r0, r3
   bb954:	69e3      	ldr	r3, [r4, #28]
   bb956:	4298      	cmp	r0, r3
   bb958:	d2f1      	bcs.n	bb93e <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   bb95a:	e7f6      	b.n	bb94a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000bb95c <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bb95c:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   bb95e:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bb960:	4604      	mov	r4, r0
    if (saveDelayMs) {
   bb962:	b11b      	cbz	r3, bb96c <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   bb964:	f000 f9b6 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   bb968:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   bb96a:	bd10      	pop	{r4, pc}
        save();
   bb96c:	6803      	ldr	r3, [r0, #0]
}
   bb96e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   bb972:	689b      	ldr	r3, [r3, #8]
   bb974:	4718      	bx	r3

000bb976 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   bb976:	f000 b975 	b.w	bbc64 <os_mutex_recursive_unlock>

000bb97a <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   bb97a:	b510      	push	{r4, lr}
   bb97c:	4604      	mov	r4, r0
   bb97e:	3004      	adds	r0, #4
   bb980:	f7fa f978 	bl	b5c74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   bb984:	6823      	ldr	r3, [r4, #0]
   bb986:	68e1      	ldr	r1, [r4, #12]
   bb988:	695b      	ldr	r3, [r3, #20]
   bb98a:	4620      	mov	r0, r4
   bb98c:	4798      	blx	r3
   bb98e:	b918      	cbnz	r0, bb998 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   bb990:	6823      	ldr	r3, [r4, #0]
   bb992:	4620      	mov	r0, r4
   bb994:	699b      	ldr	r3, [r3, #24]
   bb996:	4798      	blx	r3
      { _M_device.unlock(); }
   bb998:	6860      	ldr	r0, [r4, #4]
   bb99a:	f7ff ffec 	bl	bb976 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bb99e:	2001      	movs	r0, #1
   bb9a0:	bd10      	pop	{r4, pc}

000bb9a2 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>:



bool StorageHelperRK::PersistentDataBase::getValueString(size_t offset, size_t size, String &value) const {
   bb9a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb9a4:	4605      	mov	r5, r0
      { _M_device.lock(); }
   bb9a6:	3004      	adds	r0, #4
   bb9a8:	4614      	mov	r4, r2
   bb9aa:	460e      	mov	r6, r1
   bb9ac:	461f      	mov	r7, r3
   bb9ae:	f7fa f961 	bl	b5c74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
    bool result = false;

    WITH_LOCK(*this) {
        if (offset <= (savedDataSize - (size - 1))) {
   bb9b2:	68ea      	ldr	r2, [r5, #12]
   bb9b4:	f1c4 0401 	rsb	r4, r4, #1
   bb9b8:	4414      	add	r4, r2
   bb9ba:	42b4      	cmp	r4, r6
   bb9bc:	d30a      	bcc.n	bb9d4 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x32>
            const char *p = (const char *)savedDataHeader;
   bb9be:	68a9      	ldr	r1, [r5, #8]
            p += offset;
            value = p; // copies string
   bb9c0:	4638      	mov	r0, r7
   bb9c2:	4431      	add	r1, r6
   bb9c4:	f003 f937 	bl	bec36 <_ZN6StringaSEPKc>
            result = true;
   bb9c8:	2401      	movs	r4, #1
      { _M_device.unlock(); }
   bb9ca:	6868      	ldr	r0, [r5, #4]
   bb9cc:	f7ff ffd3 	bl	bb976 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
        }
    }
    return result;
}
   bb9d0:	4620      	mov	r0, r4
   bb9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool result = false;
   bb9d4:	2400      	movs	r4, #0
   bb9d6:	e7f8      	b.n	bb9ca <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x28>

000bb9d8 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   bb9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb9da:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   bb9de:	4f18      	ldr	r7, [pc, #96]	; (bba40 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   bb9e0:	4e18      	ldr	r6, [pc, #96]	; (bba44 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   bb9e2:	4d19      	ldr	r5, [pc, #100]	; (bba48 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   bb9e4:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   bb9e6:	42a0      	cmp	r0, r4
   bb9e8:	d00c      	beq.n	bba04 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   bb9ea:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   bb9ee:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   bb9f0:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   bb9f4:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   bb9f6:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   bb9f8:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   bb9fc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   bba00:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   bba02:	e7f0      	b.n	bb9e6 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   bba04:	f001 0403 	and.w	r4, r1, #3
   bba08:	4404      	add	r4, r0
    k = 0;
   bba0a:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   bba0c:	42a0      	cmp	r0, r4
   bba0e:	d004      	beq.n	bba1a <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   bba10:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   bba14:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   bba18:	e7f8      	b.n	bba0c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   bba1a:	4809      	ldr	r0, [pc, #36]	; (bba40 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   bba1c:	4343      	muls	r3, r0
        k *= 0x1b873593;
   bba1e:	4809      	ldr	r0, [pc, #36]	; (bba44 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   bba20:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   bba24:	404a      	eors	r2, r1
        k *= 0x1b873593;
   bba26:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   bba28:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   bba2a:	4b08      	ldr	r3, [pc, #32]	; (bba4c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   bba2c:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   bba30:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   bba32:	4b07      	ldr	r3, [pc, #28]	; (bba50 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   bba34:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   bba38:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   bba3a:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   bba3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bba40:	cc9e2d51 	.word	0xcc9e2d51
   bba44:	1b873593 	.word	0x1b873593
   bba48:	e6546b64 	.word	0xe6546b64
   bba4c:	85ebca6b 	.word	0x85ebca6b
   bba50:	c2b2ae35 	.word	0xc2b2ae35

000bba54 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   bba54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bba56:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bba58:	3004      	adds	r0, #4
   bba5a:	f7fa f90b 	bl	b5c74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   bba5e:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   bba60:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   bba62:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   bba64:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bba66:	68a6      	ldr	r6, [r4, #8]
   bba68:	4a05      	ldr	r2, [pc, #20]	; (bba80 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   bba6a:	88f1      	ldrh	r1, [r6, #6]
   bba6c:	4630      	mov	r0, r6
   bba6e:	f7ff ffb3 	bl	bb9d8 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   bba72:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bba74:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   bba76:	6860      	ldr	r0, [r4, #4]
   bba78:	f7ff ff7d 	bl	bb976 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bba7c:	4628      	mov	r0, r5
   bba7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bba80:	851c2a3f 	.word	0x851c2a3f

000bba84 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   bba84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bba88:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bba8a:	3004      	adds	r0, #4
   bba8c:	4690      	mov	r8, r2
   bba8e:	460d      	mov	r5, r1
   bba90:	461f      	mov	r7, r3
   bba92:	f7fa f8ef 	bl	b5c74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   bba96:	68e2      	ldr	r2, [r4, #12]
   bba98:	f1c8 0301 	rsb	r3, r8, #1
   bba9c:	4413      	add	r3, r2
   bba9e:	42ab      	cmp	r3, r5
   bbaa0:	d31f      	bcc.n	bbae2 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
   bbaa2:	4638      	mov	r0, r7
   bbaa4:	f004 fcd9 	bl	c045a <strlen>
   bbaa8:	4540      	cmp	r0, r8
   bbaaa:	d21a      	bcs.n	bbae2 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
            char *p = (char *)savedDataHeader;
   bbaac:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   bbaae:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   bbab0:	4629      	mov	r1, r5
   bbab2:	4638      	mov	r0, r7
   bbab4:	f004 fca1 	bl	c03fa <strcmp>
   bbab8:	b188      	cbz	r0, bbade <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5a>
                memset(p, 0, size);
   bbaba:	4642      	mov	r2, r8
   bbabc:	2100      	movs	r1, #0
   bbabe:	4628      	mov	r0, r5
   bbac0:	f004 fc10 	bl	c02e4 <memset>
                strcpy(p, value);
   bbac4:	4639      	mov	r1, r7
   bbac6:	4628      	mov	r0, r5
   bbac8:	f004 fca1 	bl	c040e <strcpy>
                savedDataHeader->hash = getHash();
   bbacc:	4620      	mov	r0, r4
   bbace:	68a5      	ldr	r5, [r4, #8]
   bbad0:	f7ff ffc0 	bl	bba54 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bbad4:	60a8      	str	r0, [r5, #8]
                saveOrDefer();
   bbad6:	6823      	ldr	r3, [r4, #0]
   bbad8:	4620      	mov	r0, r4
   bbada:	691b      	ldr	r3, [r3, #16]
   bbadc:	4798      	blx	r3
            result = true;
   bbade:	2501      	movs	r5, #1
   bbae0:	e000      	b.n	bbae4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x60>
    bool result = false;
   bbae2:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   bbae4:	6860      	ldr	r0, [r4, #4]
   bbae6:	f7ff ff46 	bl	bb976 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bbaea:	4628      	mov	r0, r5
   bbaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbaf0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   bbaf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbaf2:	460d      	mov	r5, r1
   bbaf4:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   bbaf6:	f7ff ffad 	bl	bba54 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   bbafa:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   bbafc:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   bbafe:	d923      	bls.n	bbb48 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   bbb00:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   bbb02:	6922      	ldr	r2, [r4, #16]
   bbb04:	6819      	ldr	r1, [r3, #0]
   bbb06:	4291      	cmp	r1, r2
   bbb08:	d11f      	bne.n	bbb4a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   bbb0a:	8899      	ldrh	r1, [r3, #4]
   bbb0c:	8aa2      	ldrh	r2, [r4, #20]
   bbb0e:	4291      	cmp	r1, r2
   bbb10:	d11b      	bne.n	bbb4a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   bbb12:	88d9      	ldrh	r1, [r3, #6]
   bbb14:	b2aa      	uxth	r2, r5
   bbb16:	4291      	cmp	r1, r2
   bbb18:	d817      	bhi.n	bbb4a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   bbb1a:	689a      	ldr	r2, [r3, #8]
   bbb1c:	4282      	cmp	r2, r0
   bbb1e:	d114      	bne.n	bbb4a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   bbb20:	68e2      	ldr	r2, [r4, #12]
   bbb22:	42aa      	cmp	r2, r5
   bbb24:	d905      	bls.n	bbb32 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   bbb26:	2100      	movs	r1, #0
   bbb28:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   bbb2a:	68e2      	ldr	r2, [r4, #12]
   bbb2c:	3501      	adds	r5, #1
   bbb2e:	42aa      	cmp	r2, r5
   bbb30:	d8fa      	bhi.n	bbb28 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   bbb32:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   bbb36:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   bbb38:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   bbb3a:	68a5      	ldr	r5, [r4, #8]
   bbb3c:	f7ff ff8a 	bl	bba54 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bbb40:	60a8      	str	r0, [r5, #8]
        isValid = true;
   bbb42:	2001      	movs	r0, #1
}
   bbb44:	b002      	add	sp, #8
   bbb46:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   bbb48:	b19d      	cbz	r5, bbb72 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   bbb4a:	68a1      	ldr	r1, [r4, #8]
   bbb4c:	680a      	ldr	r2, [r1, #0]
   bbb4e:	b192      	cbz	r2, bbb76 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   bbb50:	6888      	ldr	r0, [r1, #8]
   bbb52:	888b      	ldrh	r3, [r1, #4]
   bbb54:	9001      	str	r0, [sp, #4]
   bbb56:	88c9      	ldrh	r1, [r1, #6]
   bbb58:	4808      	ldr	r0, [pc, #32]	; (bbb7c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bbb5a:	9100      	str	r1, [sp, #0]
   bbb5c:	4908      	ldr	r1, [pc, #32]	; (bbb80 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   bbb5e:	f7fb f87b 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   bbb62:	e9cd 5600 	strd	r5, r6, [sp]
   bbb66:	8aa3      	ldrh	r3, [r4, #20]
   bbb68:	6922      	ldr	r2, [r4, #16]
   bbb6a:	4906      	ldr	r1, [pc, #24]	; (bbb84 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   bbb6c:	4803      	ldr	r0, [pc, #12]	; (bbb7c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bbb6e:	f7fb f873 	bl	b6c58 <_ZNK5spark6Logger5traceEPKcz>
   bbb72:	2000      	movs	r0, #0
   bbb74:	e7e6      	b.n	bbb44 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bbb76:	4610      	mov	r0, r2
   bbb78:	e7e4      	b.n	bbb44 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bbb7a:	bf00      	nop
   bbb7c:	2003e654 	.word	0x2003e654
   bbb80:	000c1f08 	.word	0x000c1f08
   bbb84:	000c1f39 	.word	0x000c1f39

000bbb88 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   bbb88:	b538      	push	{r3, r4, r5, lr}
   bbb8a:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   bbb8c:	68c2      	ldr	r2, [r0, #12]
   bbb8e:	6880      	ldr	r0, [r0, #8]
   bbb90:	2100      	movs	r1, #0
   bbb92:	f004 fba7 	bl	c02e4 <memset>
    savedDataHeader->magic = savedDataMagic;
   bbb96:	68a3      	ldr	r3, [r4, #8]
   bbb98:	6922      	ldr	r2, [r4, #16]
   bbb9a:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   bbb9c:	68a3      	ldr	r3, [r4, #8]
   bbb9e:	8aa2      	ldrh	r2, [r4, #20]
   bbba0:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   bbba2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   bbba6:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   bbba8:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   bbbaa:	68a5      	ldr	r5, [r4, #8]
   bbbac:	f7ff ff52 	bl	bba54 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bbbb0:	60a8      	str	r0, [r5, #8]
}
   bbbb2:	bd38      	pop	{r3, r4, r5, pc}

000bbbb4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   bbbb4:	b508      	push	{r3, lr}
   bbbb6:	4b02      	ldr	r3, [pc, #8]	; (bbbc0 <cellular_signal+0xc>)
   bbbb8:	681b      	ldr	r3, [r3, #0]
   bbbba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bbbbc:	9301      	str	r3, [sp, #4]
   bbbbe:	bd08      	pop	{r3, pc}
   bbbc0:	00030274 	.word	0x00030274

000bbbc4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   bbbc4:	b508      	push	{r3, lr}
   bbbc6:	4b02      	ldr	r3, [pc, #8]	; (bbbd0 <os_thread_create+0xc>)
   bbbc8:	681b      	ldr	r3, [r3, #0]
   bbbca:	685b      	ldr	r3, [r3, #4]
   bbbcc:	9301      	str	r3, [sp, #4]
   bbbce:	bd08      	pop	{r3, pc}
   bbbd0:	00030248 	.word	0x00030248

000bbbd4 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   bbbd4:	b508      	push	{r3, lr}
   bbbd6:	4b02      	ldr	r3, [pc, #8]	; (bbbe0 <os_thread_is_current+0xc>)
   bbbd8:	681b      	ldr	r3, [r3, #0]
   bbbda:	689b      	ldr	r3, [r3, #8]
   bbbdc:	9301      	str	r3, [sp, #4]
   bbbde:	bd08      	pop	{r3, pc}
   bbbe0:	00030248 	.word	0x00030248

000bbbe4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   bbbe4:	b508      	push	{r3, lr}
   bbbe6:	4b02      	ldr	r3, [pc, #8]	; (bbbf0 <os_thread_join+0xc>)
   bbbe8:	681b      	ldr	r3, [r3, #0]
   bbbea:	691b      	ldr	r3, [r3, #16]
   bbbec:	9301      	str	r3, [sp, #4]
   bbbee:	bd08      	pop	{r3, pc}
   bbbf0:	00030248 	.word	0x00030248

000bbbf4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   bbbf4:	b508      	push	{r3, lr}
   bbbf6:	4b02      	ldr	r3, [pc, #8]	; (bbc00 <os_thread_cleanup+0xc>)
   bbbf8:	681b      	ldr	r3, [r3, #0]
   bbbfa:	695b      	ldr	r3, [r3, #20]
   bbbfc:	9301      	str	r3, [sp, #4]
   bbbfe:	bd08      	pop	{r3, pc}
   bbc00:	00030248 	.word	0x00030248

000bbc04 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   bbc04:	b508      	push	{r3, lr}
   bbc06:	4b02      	ldr	r3, [pc, #8]	; (bbc10 <os_mutex_create+0xc>)
   bbc08:	681b      	ldr	r3, [r3, #0]
   bbc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bbc0c:	9301      	str	r3, [sp, #4]
   bbc0e:	bd08      	pop	{r3, pc}
   bbc10:	00030248 	.word	0x00030248

000bbc14 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   bbc14:	b508      	push	{r3, lr}
   bbc16:	4b02      	ldr	r3, [pc, #8]	; (bbc20 <os_mutex_lock+0xc>)
   bbc18:	681b      	ldr	r3, [r3, #0]
   bbc1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bbc1c:	9301      	str	r3, [sp, #4]
   bbc1e:	bd08      	pop	{r3, pc}
   bbc20:	00030248 	.word	0x00030248

000bbc24 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   bbc24:	b508      	push	{r3, lr}
   bbc26:	4b02      	ldr	r3, [pc, #8]	; (bbc30 <os_mutex_unlock+0xc>)
   bbc28:	681b      	ldr	r3, [r3, #0]
   bbc2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bbc2c:	9301      	str	r3, [sp, #4]
   bbc2e:	bd08      	pop	{r3, pc}
   bbc30:	00030248 	.word	0x00030248

000bbc34 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bbc34:	b508      	push	{r3, lr}
   bbc36:	4b02      	ldr	r3, [pc, #8]	; (bbc40 <os_mutex_recursive_create+0xc>)
   bbc38:	681b      	ldr	r3, [r3, #0]
   bbc3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bbc3c:	9301      	str	r3, [sp, #4]
   bbc3e:	bd08      	pop	{r3, pc}
   bbc40:	00030248 	.word	0x00030248

000bbc44 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bbc44:	b508      	push	{r3, lr}
   bbc46:	4b02      	ldr	r3, [pc, #8]	; (bbc50 <os_mutex_recursive_destroy+0xc>)
   bbc48:	681b      	ldr	r3, [r3, #0]
   bbc4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bbc4c:	9301      	str	r3, [sp, #4]
   bbc4e:	bd08      	pop	{r3, pc}
   bbc50:	00030248 	.word	0x00030248

000bbc54 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bbc54:	b508      	push	{r3, lr}
   bbc56:	4b02      	ldr	r3, [pc, #8]	; (bbc60 <os_mutex_recursive_lock+0xc>)
   bbc58:	681b      	ldr	r3, [r3, #0]
   bbc5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bbc5c:	9301      	str	r3, [sp, #4]
   bbc5e:	bd08      	pop	{r3, pc}
   bbc60:	00030248 	.word	0x00030248

000bbc64 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bbc64:	b508      	push	{r3, lr}
   bbc66:	4b02      	ldr	r3, [pc, #8]	; (bbc70 <os_mutex_recursive_unlock+0xc>)
   bbc68:	681b      	ldr	r3, [r3, #0]
   bbc6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bbc6c:	9301      	str	r3, [sp, #4]
   bbc6e:	bd08      	pop	{r3, pc}
   bbc70:	00030248 	.word	0x00030248

000bbc74 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   bbc74:	b508      	push	{r3, lr}
   bbc76:	4b02      	ldr	r3, [pc, #8]	; (bbc80 <os_thread_exit+0xc>)
   bbc78:	681b      	ldr	r3, [r3, #0]
   bbc7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bbc7c:	9301      	str	r3, [sp, #4]
   bbc7e:	bd08      	pop	{r3, pc}
   bbc80:	00030248 	.word	0x00030248

000bbc84 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   bbc84:	b508      	push	{r3, lr}
   bbc86:	4b02      	ldr	r3, [pc, #8]	; (bbc90 <HAL_Core_Runtime_Info+0xc>)
   bbc88:	681b      	ldr	r3, [r3, #0]
   bbc8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bbc8c:	9301      	str	r3, [sp, #4]
   bbc8e:	bd08      	pop	{r3, pc}
   bbc90:	00030234 	.word	0x00030234

000bbc94 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   bbc94:	b508      	push	{r3, lr}
   bbc96:	4b02      	ldr	r3, [pc, #8]	; (bbca0 <HAL_Feature_Set+0xc>)
   bbc98:	681b      	ldr	r3, [r3, #0]
   bbc9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bbc9c:	9301      	str	r3, [sp, #4]
   bbc9e:	bd08      	pop	{r3, pc}
   bbca0:	00030234 	.word	0x00030234

000bbca4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bbca4:	b508      	push	{r3, lr}
   bbca6:	4b02      	ldr	r3, [pc, #8]	; (bbcb0 <HAL_RNG_GetRandomNumber+0xc>)
   bbca8:	681b      	ldr	r3, [r3, #0]
   bbcaa:	685b      	ldr	r3, [r3, #4]
   bbcac:	9301      	str	r3, [sp, #4]
   bbcae:	bd08      	pop	{r3, pc}
   bbcb0:	00030218 	.word	0x00030218

000bbcb4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   bbcb4:	b508      	push	{r3, lr}
   bbcb6:	4b02      	ldr	r3, [pc, #8]	; (bbcc0 <HAL_Delay_Milliseconds+0xc>)
   bbcb8:	681b      	ldr	r3, [r3, #0]
   bbcba:	689b      	ldr	r3, [r3, #8]
   bbcbc:	9301      	str	r3, [sp, #4]
   bbcbe:	bd08      	pop	{r3, pc}
   bbcc0:	00030218 	.word	0x00030218

000bbcc4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bbcc4:	b508      	push	{r3, lr}
   bbcc6:	4b02      	ldr	r3, [pc, #8]	; (bbcd0 <HAL_Delay_Microseconds+0xc>)
   bbcc8:	681b      	ldr	r3, [r3, #0]
   bbcca:	68db      	ldr	r3, [r3, #12]
   bbccc:	9301      	str	r3, [sp, #4]
   bbcce:	bd08      	pop	{r3, pc}
   bbcd0:	00030218 	.word	0x00030218

000bbcd4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bbcd4:	b508      	push	{r3, lr}
   bbcd6:	4b02      	ldr	r3, [pc, #8]	; (bbce0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bbcd8:	681b      	ldr	r3, [r3, #0]
   bbcda:	695b      	ldr	r3, [r3, #20]
   bbcdc:	9301      	str	r3, [sp, #4]
   bbcde:	bd08      	pop	{r3, pc}
   bbce0:	00030218 	.word	0x00030218

000bbce4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bbce4:	b508      	push	{r3, lr}
   bbce6:	4b02      	ldr	r3, [pc, #8]	; (bbcf0 <hal_rtc_time_is_valid+0xc>)
   bbce8:	681b      	ldr	r3, [r3, #0]
   bbcea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bbcec:	9301      	str	r3, [sp, #4]
   bbcee:	bd08      	pop	{r3, pc}
   bbcf0:	00030218 	.word	0x00030218

000bbcf4 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   bbcf4:	b508      	push	{r3, lr}
   bbcf6:	4b02      	ldr	r3, [pc, #8]	; (bbd00 <hal_timer_millis+0xc>)
   bbcf8:	681b      	ldr	r3, [r3, #0]
   bbcfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bbcfc:	9301      	str	r3, [sp, #4]
   bbcfe:	bd08      	pop	{r3, pc}
   bbd00:	00030218 	.word	0x00030218

000bbd04 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bbd04:	b508      	push	{r3, lr}
   bbd06:	4b02      	ldr	r3, [pc, #8]	; (bbd10 <hal_rtc_get_time+0xc>)
   bbd08:	681b      	ldr	r3, [r3, #0]
   bbd0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bbd0c:	9301      	str	r3, [sp, #4]
   bbd0e:	bd08      	pop	{r3, pc}
   bbd10:	00030218 	.word	0x00030218

000bbd14 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   bbd14:	b508      	push	{r3, lr}
   bbd16:	4b02      	ldr	r3, [pc, #8]	; (bbd20 <hal_rtc_set_time+0xc>)
   bbd18:	681b      	ldr	r3, [r3, #0]
   bbd1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   bbd1c:	9301      	str	r3, [sp, #4]
   bbd1e:	bd08      	pop	{r3, pc}
   bbd20:	00030218 	.word	0x00030218

000bbd24 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bbd24:	b508      	push	{r3, lr}
   bbd26:	4b02      	ldr	r3, [pc, #8]	; (bbd30 <HAL_Validate_Pin_Function+0xc>)
   bbd28:	681b      	ldr	r3, [r3, #0]
   bbd2a:	685b      	ldr	r3, [r3, #4]
   bbd2c:	9301      	str	r3, [sp, #4]
   bbd2e:	bd08      	pop	{r3, pc}
   bbd30:	0003022c 	.word	0x0003022c

000bbd34 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bbd34:	b508      	push	{r3, lr}
   bbd36:	4b02      	ldr	r3, [pc, #8]	; (bbd40 <HAL_Pin_Mode+0xc>)
   bbd38:	681b      	ldr	r3, [r3, #0]
   bbd3a:	689b      	ldr	r3, [r3, #8]
   bbd3c:	9301      	str	r3, [sp, #4]
   bbd3e:	bd08      	pop	{r3, pc}
   bbd40:	0003022c 	.word	0x0003022c

000bbd44 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bbd44:	b508      	push	{r3, lr}
   bbd46:	4b02      	ldr	r3, [pc, #8]	; (bbd50 <HAL_Get_Pin_Mode+0xc>)
   bbd48:	681b      	ldr	r3, [r3, #0]
   bbd4a:	68db      	ldr	r3, [r3, #12]
   bbd4c:	9301      	str	r3, [sp, #4]
   bbd4e:	bd08      	pop	{r3, pc}
   bbd50:	0003022c 	.word	0x0003022c

000bbd54 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bbd54:	b508      	push	{r3, lr}
   bbd56:	4b02      	ldr	r3, [pc, #8]	; (bbd60 <HAL_GPIO_Write+0xc>)
   bbd58:	681b      	ldr	r3, [r3, #0]
   bbd5a:	691b      	ldr	r3, [r3, #16]
   bbd5c:	9301      	str	r3, [sp, #4]
   bbd5e:	bd08      	pop	{r3, pc}
   bbd60:	0003022c 	.word	0x0003022c

000bbd64 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bbd64:	b508      	push	{r3, lr}
   bbd66:	4b02      	ldr	r3, [pc, #8]	; (bbd70 <HAL_GPIO_Read+0xc>)
   bbd68:	681b      	ldr	r3, [r3, #0]
   bbd6a:	695b      	ldr	r3, [r3, #20]
   bbd6c:	9301      	str	r3, [sp, #4]
   bbd6e:	bd08      	pop	{r3, pc}
   bbd70:	0003022c 	.word	0x0003022c

000bbd74 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bbd74:	b508      	push	{r3, lr}
   bbd76:	4b02      	ldr	r3, [pc, #8]	; (bbd80 <HAL_Interrupts_Attach+0xc>)
   bbd78:	681b      	ldr	r3, [r3, #0]
   bbd7a:	699b      	ldr	r3, [r3, #24]
   bbd7c:	9301      	str	r3, [sp, #4]
   bbd7e:	bd08      	pop	{r3, pc}
   bbd80:	0003022c 	.word	0x0003022c

000bbd84 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bbd84:	b508      	push	{r3, lr}
   bbd86:	4b02      	ldr	r3, [pc, #8]	; (bbd90 <HAL_Interrupts_Detach+0xc>)
   bbd88:	681b      	ldr	r3, [r3, #0]
   bbd8a:	69db      	ldr	r3, [r3, #28]
   bbd8c:	9301      	str	r3, [sp, #4]
   bbd8e:	bd08      	pop	{r3, pc}
   bbd90:	0003022c 	.word	0x0003022c

000bbd94 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bbd94:	b508      	push	{r3, lr}
   bbd96:	4b02      	ldr	r3, [pc, #8]	; (bbda0 <hal_adc_read+0xc>)
   bbd98:	681b      	ldr	r3, [r3, #0]
   bbd9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bbd9c:	9301      	str	r3, [sp, #4]
   bbd9e:	bd08      	pop	{r3, pc}
   bbda0:	0003022c 	.word	0x0003022c

000bbda4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bbda4:	b508      	push	{r3, lr}
   bbda6:	4b02      	ldr	r3, [pc, #8]	; (bbdb0 <hal_i2c_begin+0xc>)
   bbda8:	681b      	ldr	r3, [r3, #0]
   bbdaa:	68db      	ldr	r3, [r3, #12]
   bbdac:	9301      	str	r3, [sp, #4]
   bbdae:	bd08      	pop	{r3, pc}
   bbdb0:	00030228 	.word	0x00030228

000bbdb4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bbdb4:	b508      	push	{r3, lr}
   bbdb6:	4b02      	ldr	r3, [pc, #8]	; (bbdc0 <hal_i2c_begin_transmission+0xc>)
   bbdb8:	681b      	ldr	r3, [r3, #0]
   bbdba:	699b      	ldr	r3, [r3, #24]
   bbdbc:	9301      	str	r3, [sp, #4]
   bbdbe:	bd08      	pop	{r3, pc}
   bbdc0:	00030228 	.word	0x00030228

000bbdc4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bbdc4:	b508      	push	{r3, lr}
   bbdc6:	4b02      	ldr	r3, [pc, #8]	; (bbdd0 <hal_i2c_end_transmission+0xc>)
   bbdc8:	681b      	ldr	r3, [r3, #0]
   bbdca:	69db      	ldr	r3, [r3, #28]
   bbdcc:	9301      	str	r3, [sp, #4]
   bbdce:	bd08      	pop	{r3, pc}
   bbdd0:	00030228 	.word	0x00030228

000bbdd4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bbdd4:	b508      	push	{r3, lr}
   bbdd6:	4b02      	ldr	r3, [pc, #8]	; (bbde0 <hal_i2c_write+0xc>)
   bbdd8:	681b      	ldr	r3, [r3, #0]
   bbdda:	6a1b      	ldr	r3, [r3, #32]
   bbddc:	9301      	str	r3, [sp, #4]
   bbdde:	bd08      	pop	{r3, pc}
   bbde0:	00030228 	.word	0x00030228

000bbde4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bbde4:	b508      	push	{r3, lr}
   bbde6:	4b02      	ldr	r3, [pc, #8]	; (bbdf0 <hal_i2c_available+0xc>)
   bbde8:	681b      	ldr	r3, [r3, #0]
   bbdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bbdec:	9301      	str	r3, [sp, #4]
   bbdee:	bd08      	pop	{r3, pc}
   bbdf0:	00030228 	.word	0x00030228

000bbdf4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bbdf4:	b508      	push	{r3, lr}
   bbdf6:	4b02      	ldr	r3, [pc, #8]	; (bbe00 <hal_i2c_read+0xc>)
   bbdf8:	681b      	ldr	r3, [r3, #0]
   bbdfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bbdfc:	9301      	str	r3, [sp, #4]
   bbdfe:	bd08      	pop	{r3, pc}
   bbe00:	00030228 	.word	0x00030228

000bbe04 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bbe04:	b508      	push	{r3, lr}
   bbe06:	4b02      	ldr	r3, [pc, #8]	; (bbe10 <hal_i2c_peek+0xc>)
   bbe08:	681b      	ldr	r3, [r3, #0]
   bbe0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bbe0c:	9301      	str	r3, [sp, #4]
   bbe0e:	bd08      	pop	{r3, pc}
   bbe10:	00030228 	.word	0x00030228

000bbe14 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bbe14:	b508      	push	{r3, lr}
   bbe16:	4b02      	ldr	r3, [pc, #8]	; (bbe20 <hal_i2c_flush+0xc>)
   bbe18:	681b      	ldr	r3, [r3, #0]
   bbe1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bbe1c:	9301      	str	r3, [sp, #4]
   bbe1e:	bd08      	pop	{r3, pc}
   bbe20:	00030228 	.word	0x00030228

000bbe24 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bbe24:	b508      	push	{r3, lr}
   bbe26:	4b02      	ldr	r3, [pc, #8]	; (bbe30 <hal_i2c_is_enabled+0xc>)
   bbe28:	681b      	ldr	r3, [r3, #0]
   bbe2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bbe2c:	9301      	str	r3, [sp, #4]
   bbe2e:	bd08      	pop	{r3, pc}
   bbe30:	00030228 	.word	0x00030228

000bbe34 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bbe34:	b508      	push	{r3, lr}
   bbe36:	4b02      	ldr	r3, [pc, #8]	; (bbe40 <hal_i2c_init+0xc>)
   bbe38:	681b      	ldr	r3, [r3, #0]
   bbe3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bbe3c:	9301      	str	r3, [sp, #4]
   bbe3e:	bd08      	pop	{r3, pc}
   bbe40:	00030228 	.word	0x00030228

000bbe44 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   bbe44:	b508      	push	{r3, lr}
   bbe46:	4b02      	ldr	r3, [pc, #8]	; (bbe50 <hal_i2c_lock+0xc>)
   bbe48:	681b      	ldr	r3, [r3, #0]
   bbe4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bbe4c:	9301      	str	r3, [sp, #4]
   bbe4e:	bd08      	pop	{r3, pc}
   bbe50:	00030228 	.word	0x00030228

000bbe54 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   bbe54:	b508      	push	{r3, lr}
   bbe56:	4b02      	ldr	r3, [pc, #8]	; (bbe60 <hal_i2c_unlock+0xc>)
   bbe58:	681b      	ldr	r3, [r3, #0]
   bbe5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bbe5c:	9301      	str	r3, [sp, #4]
   bbe5e:	bd08      	pop	{r3, pc}
   bbe60:	00030228 	.word	0x00030228

000bbe64 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bbe64:	b508      	push	{r3, lr}
   bbe66:	4b02      	ldr	r3, [pc, #8]	; (bbe70 <hal_i2c_request_ex+0xc>)
   bbe68:	681b      	ldr	r3, [r3, #0]
   bbe6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bbe6c:	9301      	str	r3, [sp, #4]
   bbe6e:	bd08      	pop	{r3, pc}
   bbe70:	00030228 	.word	0x00030228

000bbe74 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bbe74:	b508      	push	{r3, lr}
   bbe76:	4b02      	ldr	r3, [pc, #8]	; (bbe80 <inet_inet_ntop+0xc>)
   bbe78:	681b      	ldr	r3, [r3, #0]
   bbe7a:	695b      	ldr	r3, [r3, #20]
   bbe7c:	9301      	str	r3, [sp, #4]
   bbe7e:	bd08      	pop	{r3, pc}
   bbe80:	00030264 	.word	0x00030264

000bbe84 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bbe84:	b508      	push	{r3, lr}
   bbe86:	4b02      	ldr	r3, [pc, #8]	; (bbe90 <netdb_freeaddrinfo+0xc>)
   bbe88:	681b      	ldr	r3, [r3, #0]
   bbe8a:	689b      	ldr	r3, [r3, #8]
   bbe8c:	9301      	str	r3, [sp, #4]
   bbe8e:	bd08      	pop	{r3, pc}
   bbe90:	00030268 	.word	0x00030268

000bbe94 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bbe94:	b508      	push	{r3, lr}
   bbe96:	4b02      	ldr	r3, [pc, #8]	; (bbea0 <netdb_getaddrinfo+0xc>)
   bbe98:	681b      	ldr	r3, [r3, #0]
   bbe9a:	68db      	ldr	r3, [r3, #12]
   bbe9c:	9301      	str	r3, [sp, #4]
   bbe9e:	bd08      	pop	{r3, pc}
   bbea0:	00030268 	.word	0x00030268

000bbea4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bbea4:	b508      	push	{r3, lr}
   bbea6:	4b02      	ldr	r3, [pc, #8]	; (bbeb0 <hal_spi_begin+0xc>)
   bbea8:	681b      	ldr	r3, [r3, #0]
   bbeaa:	681b      	ldr	r3, [r3, #0]
   bbeac:	9301      	str	r3, [sp, #4]
   bbeae:	bd08      	pop	{r3, pc}
   bbeb0:	00030230 	.word	0x00030230

000bbeb4 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   bbeb4:	b508      	push	{r3, lr}
   bbeb6:	4b02      	ldr	r3, [pc, #8]	; (bbec0 <hal_spi_end+0xc>)
   bbeb8:	681b      	ldr	r3, [r3, #0]
   bbeba:	685b      	ldr	r3, [r3, #4]
   bbebc:	9301      	str	r3, [sp, #4]
   bbebe:	bd08      	pop	{r3, pc}
   bbec0:	00030230 	.word	0x00030230

000bbec4 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bbec4:	b508      	push	{r3, lr}
   bbec6:	4b02      	ldr	r3, [pc, #8]	; (bbed0 <hal_spi_transfer+0xc>)
   bbec8:	681b      	ldr	r3, [r3, #0]
   bbeca:	695b      	ldr	r3, [r3, #20]
   bbecc:	9301      	str	r3, [sp, #4]
   bbece:	bd08      	pop	{r3, pc}
   bbed0:	00030230 	.word	0x00030230

000bbed4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bbed4:	b508      	push	{r3, lr}
   bbed6:	4b02      	ldr	r3, [pc, #8]	; (bbee0 <hal_spi_init+0xc>)
   bbed8:	681b      	ldr	r3, [r3, #0]
   bbeda:	69db      	ldr	r3, [r3, #28]
   bbedc:	9301      	str	r3, [sp, #4]
   bbede:	bd08      	pop	{r3, pc}
   bbee0:	00030230 	.word	0x00030230

000bbee4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bbee4:	b508      	push	{r3, lr}
   bbee6:	4b02      	ldr	r3, [pc, #8]	; (bbef0 <hal_spi_is_enabled+0xc>)
   bbee8:	681b      	ldr	r3, [r3, #0]
   bbeea:	6a1b      	ldr	r3, [r3, #32]
   bbeec:	9301      	str	r3, [sp, #4]
   bbeee:	bd08      	pop	{r3, pc}
   bbef0:	00030230 	.word	0x00030230

000bbef4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bbef4:	b508      	push	{r3, lr}
   bbef6:	4b02      	ldr	r3, [pc, #8]	; (bbf00 <hal_spi_info+0xc>)
   bbef8:	681b      	ldr	r3, [r3, #0]
   bbefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bbefc:	9301      	str	r3, [sp, #4]
   bbefe:	bd08      	pop	{r3, pc}
   bbf00:	00030230 	.word	0x00030230

000bbf04 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bbf04:	b508      	push	{r3, lr}
   bbf06:	4b02      	ldr	r3, [pc, #8]	; (bbf10 <hal_spi_set_settings+0xc>)
   bbf08:	681b      	ldr	r3, [r3, #0]
   bbf0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bbf0c:	9301      	str	r3, [sp, #4]
   bbf0e:	bd08      	pop	{r3, pc}
   bbf10:	00030230 	.word	0x00030230

000bbf14 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bbf14:	b508      	push	{r3, lr}
   bbf16:	4b02      	ldr	r3, [pc, #8]	; (bbf20 <hal_spi_acquire+0xc>)
   bbf18:	681b      	ldr	r3, [r3, #0]
   bbf1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bbf1c:	9301      	str	r3, [sp, #4]
   bbf1e:	bd08      	pop	{r3, pc}
   bbf20:	00030230 	.word	0x00030230

000bbf24 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bbf24:	b508      	push	{r3, lr}
   bbf26:	4b02      	ldr	r3, [pc, #8]	; (bbf30 <hal_spi_release+0xc>)
   bbf28:	681b      	ldr	r3, [r3, #0]
   bbf2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bbf2c:	9301      	str	r3, [sp, #4]
   bbf2e:	bd08      	pop	{r3, pc}
   bbf30:	00030230 	.word	0x00030230

000bbf34 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   bbf34:	b508      	push	{r3, lr}
   bbf36:	4b02      	ldr	r3, [pc, #8]	; (bbf40 <_open+0xc>)
   bbf38:	681b      	ldr	r3, [r3, #0]
   bbf3a:	681b      	ldr	r3, [r3, #0]
   bbf3c:	9301      	str	r3, [sp, #4]
   bbf3e:	bd08      	pop	{r3, pc}
   bbf40:	00030284 	.word	0x00030284

000bbf44 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   bbf44:	b508      	push	{r3, lr}
   bbf46:	4b02      	ldr	r3, [pc, #8]	; (bbf50 <_write+0xc>)
   bbf48:	681b      	ldr	r3, [r3, #0]
   bbf4a:	685b      	ldr	r3, [r3, #4]
   bbf4c:	9301      	str	r3, [sp, #4]
   bbf4e:	bd08      	pop	{r3, pc}
   bbf50:	00030284 	.word	0x00030284

000bbf54 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   bbf54:	b508      	push	{r3, lr}
   bbf56:	4b02      	ldr	r3, [pc, #8]	; (bbf60 <_read+0xc>)
   bbf58:	681b      	ldr	r3, [r3, #0]
   bbf5a:	689b      	ldr	r3, [r3, #8]
   bbf5c:	9301      	str	r3, [sp, #4]
   bbf5e:	bd08      	pop	{r3, pc}
   bbf60:	00030284 	.word	0x00030284

000bbf64 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   bbf64:	b508      	push	{r3, lr}
   bbf66:	4b02      	ldr	r3, [pc, #8]	; (bbf70 <_close+0xc>)
   bbf68:	681b      	ldr	r3, [r3, #0]
   bbf6a:	68db      	ldr	r3, [r3, #12]
   bbf6c:	9301      	str	r3, [sp, #4]
   bbf6e:	bd08      	pop	{r3, pc}
   bbf70:	00030284 	.word	0x00030284

000bbf74 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   bbf74:	b508      	push	{r3, lr}
   bbf76:	4b02      	ldr	r3, [pc, #8]	; (bbf80 <_fstat+0xc>)
   bbf78:	681b      	ldr	r3, [r3, #0]
   bbf7a:	695b      	ldr	r3, [r3, #20]
   bbf7c:	9301      	str	r3, [sp, #4]
   bbf7e:	bd08      	pop	{r3, pc}
   bbf80:	00030284 	.word	0x00030284

000bbf84 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   bbf84:	b508      	push	{r3, lr}
   bbf86:	4b02      	ldr	r3, [pc, #8]	; (bbf90 <_lseek+0xc>)
   bbf88:	681b      	ldr	r3, [r3, #0]
   bbf8a:	6a1b      	ldr	r3, [r3, #32]
   bbf8c:	9301      	str	r3, [sp, #4]
   bbf8e:	bd08      	pop	{r3, pc}
   bbf90:	00030284 	.word	0x00030284

000bbf94 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   bbf94:	b508      	push	{r3, lr}
   bbf96:	4b02      	ldr	r3, [pc, #8]	; (bbfa0 <stat+0xc>)
   bbf98:	681b      	ldr	r3, [r3, #0]
   bbf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bbf9c:	9301      	str	r3, [sp, #4]
   bbf9e:	bd08      	pop	{r3, pc}
   bbfa0:	00030284 	.word	0x00030284

000bbfa4 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   bbfa4:	b508      	push	{r3, lr}
   bbfa6:	4b02      	ldr	r3, [pc, #8]	; (bbfb0 <mkdir+0xc>)
   bbfa8:	681b      	ldr	r3, [r3, #0]
   bbfaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bbfac:	9301      	str	r3, [sp, #4]
   bbfae:	bd08      	pop	{r3, pc}
   bbfb0:	00030284 	.word	0x00030284

000bbfb4 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   bbfb4:	b508      	push	{r3, lr}
   bbfb6:	4b02      	ldr	r3, [pc, #8]	; (bbfc0 <_unlink+0xc>)
   bbfb8:	681b      	ldr	r3, [r3, #0]
   bbfba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bbfbc:	9301      	str	r3, [sp, #4]
   bbfbe:	bd08      	pop	{r3, pc}
   bbfc0:	00030284 	.word	0x00030284

000bbfc4 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   bbfc4:	b508      	push	{r3, lr}
   bbfc6:	4b02      	ldr	r3, [pc, #8]	; (bbfd0 <opendir+0xc>)
   bbfc8:	681b      	ldr	r3, [r3, #0]
   bbfca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bbfcc:	9301      	str	r3, [sp, #4]
   bbfce:	bd08      	pop	{r3, pc}
   bbfd0:	00030284 	.word	0x00030284

000bbfd4 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   bbfd4:	b508      	push	{r3, lr}
   bbfd6:	4b02      	ldr	r3, [pc, #8]	; (bbfe0 <readdir+0xc>)
   bbfd8:	681b      	ldr	r3, [r3, #0]
   bbfda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bbfdc:	9301      	str	r3, [sp, #4]
   bbfde:	bd08      	pop	{r3, pc}
   bbfe0:	00030284 	.word	0x00030284

000bbfe4 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   bbfe4:	b508      	push	{r3, lr}
   bbfe6:	4b02      	ldr	r3, [pc, #8]	; (bbff0 <closedir+0xc>)
   bbfe8:	681b      	ldr	r3, [r3, #0]
   bbfea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bbfec:	9301      	str	r3, [sp, #4]
   bbfee:	bd08      	pop	{r3, pc}
   bbff0:	00030284 	.word	0x00030284

000bbff4 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bbff4:	b508      	push	{r3, lr}
   bbff6:	4b02      	ldr	r3, [pc, #8]	; (bc000 <hal_usart_end+0xc>)
   bbff8:	681b      	ldr	r3, [r3, #0]
   bbffa:	689b      	ldr	r3, [r3, #8]
   bbffc:	9301      	str	r3, [sp, #4]
   bbffe:	bd08      	pop	{r3, pc}
   bc000:	0003023c 	.word	0x0003023c

000bc004 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bc004:	b508      	push	{r3, lr}
   bc006:	4b02      	ldr	r3, [pc, #8]	; (bc010 <hal_usart_write+0xc>)
   bc008:	681b      	ldr	r3, [r3, #0]
   bc00a:	68db      	ldr	r3, [r3, #12]
   bc00c:	9301      	str	r3, [sp, #4]
   bc00e:	bd08      	pop	{r3, pc}
   bc010:	0003023c 	.word	0x0003023c

000bc014 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bc014:	b508      	push	{r3, lr}
   bc016:	4b02      	ldr	r3, [pc, #8]	; (bc020 <hal_usart_available+0xc>)
   bc018:	681b      	ldr	r3, [r3, #0]
   bc01a:	691b      	ldr	r3, [r3, #16]
   bc01c:	9301      	str	r3, [sp, #4]
   bc01e:	bd08      	pop	{r3, pc}
   bc020:	0003023c 	.word	0x0003023c

000bc024 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bc024:	b508      	push	{r3, lr}
   bc026:	4b02      	ldr	r3, [pc, #8]	; (bc030 <hal_usart_read+0xc>)
   bc028:	681b      	ldr	r3, [r3, #0]
   bc02a:	695b      	ldr	r3, [r3, #20]
   bc02c:	9301      	str	r3, [sp, #4]
   bc02e:	bd08      	pop	{r3, pc}
   bc030:	0003023c 	.word	0x0003023c

000bc034 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bc034:	b508      	push	{r3, lr}
   bc036:	4b02      	ldr	r3, [pc, #8]	; (bc040 <hal_usart_peek+0xc>)
   bc038:	681b      	ldr	r3, [r3, #0]
   bc03a:	699b      	ldr	r3, [r3, #24]
   bc03c:	9301      	str	r3, [sp, #4]
   bc03e:	bd08      	pop	{r3, pc}
   bc040:	0003023c 	.word	0x0003023c

000bc044 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bc044:	b508      	push	{r3, lr}
   bc046:	4b02      	ldr	r3, [pc, #8]	; (bc050 <hal_usart_flush+0xc>)
   bc048:	681b      	ldr	r3, [r3, #0]
   bc04a:	69db      	ldr	r3, [r3, #28]
   bc04c:	9301      	str	r3, [sp, #4]
   bc04e:	bd08      	pop	{r3, pc}
   bc050:	0003023c 	.word	0x0003023c

000bc054 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bc054:	b508      	push	{r3, lr}
   bc056:	4b02      	ldr	r3, [pc, #8]	; (bc060 <hal_usart_is_enabled+0xc>)
   bc058:	681b      	ldr	r3, [r3, #0]
   bc05a:	6a1b      	ldr	r3, [r3, #32]
   bc05c:	9301      	str	r3, [sp, #4]
   bc05e:	bd08      	pop	{r3, pc}
   bc060:	0003023c 	.word	0x0003023c

000bc064 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bc064:	b508      	push	{r3, lr}
   bc066:	4b02      	ldr	r3, [pc, #8]	; (bc070 <hal_usart_available_data_for_write+0xc>)
   bc068:	681b      	ldr	r3, [r3, #0]
   bc06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bc06c:	9301      	str	r3, [sp, #4]
   bc06e:	bd08      	pop	{r3, pc}
   bc070:	0003023c 	.word	0x0003023c

000bc074 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bc074:	b508      	push	{r3, lr}
   bc076:	4b02      	ldr	r3, [pc, #8]	; (bc080 <hal_usart_begin_config+0xc>)
   bc078:	681b      	ldr	r3, [r3, #0]
   bc07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc07c:	9301      	str	r3, [sp, #4]
   bc07e:	bd08      	pop	{r3, pc}
   bc080:	0003023c 	.word	0x0003023c

000bc084 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bc084:	b508      	push	{r3, lr}
   bc086:	4b02      	ldr	r3, [pc, #8]	; (bc090 <hal_usart_init_ex+0xc>)
   bc088:	681b      	ldr	r3, [r3, #0]
   bc08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc08c:	9301      	str	r3, [sp, #4]
   bc08e:	bd08      	pop	{r3, pc}
   bc090:	0003023c 	.word	0x0003023c

000bc094 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bc094:	b508      	push	{r3, lr}
   bc096:	4b02      	ldr	r3, [pc, #8]	; (bc0a0 <HAL_USB_USART_Init+0xc>)
   bc098:	681b      	ldr	r3, [r3, #0]
   bc09a:	681b      	ldr	r3, [r3, #0]
   bc09c:	9301      	str	r3, [sp, #4]
   bc09e:	bd08      	pop	{r3, pc}
   bc0a0:	0003024c 	.word	0x0003024c

000bc0a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bc0a4:	b508      	push	{r3, lr}
   bc0a6:	4b02      	ldr	r3, [pc, #8]	; (bc0b0 <HAL_USB_USART_Begin+0xc>)
   bc0a8:	681b      	ldr	r3, [r3, #0]
   bc0aa:	685b      	ldr	r3, [r3, #4]
   bc0ac:	9301      	str	r3, [sp, #4]
   bc0ae:	bd08      	pop	{r3, pc}
   bc0b0:	0003024c 	.word	0x0003024c

000bc0b4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bc0b4:	b508      	push	{r3, lr}
   bc0b6:	4b02      	ldr	r3, [pc, #8]	; (bc0c0 <HAL_USB_USART_End+0xc>)
   bc0b8:	681b      	ldr	r3, [r3, #0]
   bc0ba:	689b      	ldr	r3, [r3, #8]
   bc0bc:	9301      	str	r3, [sp, #4]
   bc0be:	bd08      	pop	{r3, pc}
   bc0c0:	0003024c 	.word	0x0003024c

000bc0c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bc0c4:	b508      	push	{r3, lr}
   bc0c6:	4b02      	ldr	r3, [pc, #8]	; (bc0d0 <HAL_USB_USART_Available_Data+0xc>)
   bc0c8:	681b      	ldr	r3, [r3, #0]
   bc0ca:	691b      	ldr	r3, [r3, #16]
   bc0cc:	9301      	str	r3, [sp, #4]
   bc0ce:	bd08      	pop	{r3, pc}
   bc0d0:	0003024c 	.word	0x0003024c

000bc0d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bc0d4:	b508      	push	{r3, lr}
   bc0d6:	4b02      	ldr	r3, [pc, #8]	; (bc0e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bc0d8:	681b      	ldr	r3, [r3, #0]
   bc0da:	695b      	ldr	r3, [r3, #20]
   bc0dc:	9301      	str	r3, [sp, #4]
   bc0de:	bd08      	pop	{r3, pc}
   bc0e0:	0003024c 	.word	0x0003024c

000bc0e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bc0e4:	b508      	push	{r3, lr}
   bc0e6:	4b02      	ldr	r3, [pc, #8]	; (bc0f0 <HAL_USB_USART_Receive_Data+0xc>)
   bc0e8:	681b      	ldr	r3, [r3, #0]
   bc0ea:	699b      	ldr	r3, [r3, #24]
   bc0ec:	9301      	str	r3, [sp, #4]
   bc0ee:	bd08      	pop	{r3, pc}
   bc0f0:	0003024c 	.word	0x0003024c

000bc0f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bc0f4:	b508      	push	{r3, lr}
   bc0f6:	4b02      	ldr	r3, [pc, #8]	; (bc100 <HAL_USB_USART_Send_Data+0xc>)
   bc0f8:	681b      	ldr	r3, [r3, #0]
   bc0fa:	69db      	ldr	r3, [r3, #28]
   bc0fc:	9301      	str	r3, [sp, #4]
   bc0fe:	bd08      	pop	{r3, pc}
   bc100:	0003024c 	.word	0x0003024c

000bc104 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bc104:	b508      	push	{r3, lr}
   bc106:	4b02      	ldr	r3, [pc, #8]	; (bc110 <HAL_USB_USART_Flush_Data+0xc>)
   bc108:	681b      	ldr	r3, [r3, #0]
   bc10a:	6a1b      	ldr	r3, [r3, #32]
   bc10c:	9301      	str	r3, [sp, #4]
   bc10e:	bd08      	pop	{r3, pc}
   bc110:	0003024c 	.word	0x0003024c

000bc114 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   bc114:	b508      	push	{r3, lr}
   bc116:	4b02      	ldr	r3, [pc, #8]	; (bc120 <HAL_USB_USART_Is_Connected+0xc>)
   bc118:	681b      	ldr	r3, [r3, #0]
   bc11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bc11c:	9301      	str	r3, [sp, #4]
   bc11e:	bd08      	pop	{r3, pc}
   bc120:	0003024c 	.word	0x0003024c

000bc124 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bc124:	b508      	push	{r3, lr}
   bc126:	4b02      	ldr	r3, [pc, #8]	; (bc130 <panic_+0xc>)
   bc128:	681b      	ldr	r3, [r3, #0]
   bc12a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc12c:	9301      	str	r3, [sp, #4]
   bc12e:	bd08      	pop	{r3, pc}
   bc130:	00030260 	.word	0x00030260

000bc134 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bc134:	b508      	push	{r3, lr}
   bc136:	4b02      	ldr	r3, [pc, #8]	; (bc140 <log_message+0xc>)
   bc138:	681b      	ldr	r3, [r3, #0]
   bc13a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bc13c:	9301      	str	r3, [sp, #4]
   bc13e:	bd08      	pop	{r3, pc}
   bc140:	00030260 	.word	0x00030260

000bc144 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   bc144:	b508      	push	{r3, lr}
   bc146:	4b02      	ldr	r3, [pc, #8]	; (bc150 <log_message_v+0xc>)
   bc148:	681b      	ldr	r3, [r3, #0]
   bc14a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc14c:	9301      	str	r3, [sp, #4]
   bc14e:	bd08      	pop	{r3, pc}
   bc150:	00030260 	.word	0x00030260

000bc154 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bc154:	b508      	push	{r3, lr}
   bc156:	4b02      	ldr	r3, [pc, #8]	; (bc160 <log_level_name+0xc>)
   bc158:	681b      	ldr	r3, [r3, #0]
   bc15a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bc15c:	9301      	str	r3, [sp, #4]
   bc15e:	bd08      	pop	{r3, pc}
   bc160:	00030260 	.word	0x00030260

000bc164 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bc164:	b508      	push	{r3, lr}
   bc166:	4b02      	ldr	r3, [pc, #8]	; (bc170 <log_set_callbacks+0xc>)
   bc168:	681b      	ldr	r3, [r3, #0]
   bc16a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bc16c:	9301      	str	r3, [sp, #4]
   bc16e:	bd08      	pop	{r3, pc}
   bc170:	00030260 	.word	0x00030260

000bc174 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   bc174:	b508      	push	{r3, lr}
   bc176:	4b03      	ldr	r3, [pc, #12]	; (bc184 <diag_get_source+0x10>)
   bc178:	681b      	ldr	r3, [r3, #0]
   bc17a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bc17e:	9301      	str	r3, [sp, #4]
   bc180:	bd08      	pop	{r3, pc}
   bc182:	0000      	.short	0x0000
   bc184:	00030260 	.word	0x00030260

000bc188 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bc188:	b508      	push	{r3, lr}
   bc18a:	4b02      	ldr	r3, [pc, #8]	; (bc194 <system_mode+0xc>)
   bc18c:	681b      	ldr	r3, [r3, #0]
   bc18e:	681b      	ldr	r3, [r3, #0]
   bc190:	9301      	str	r3, [sp, #4]
   bc192:	bd08      	pop	{r3, pc}
   bc194:	00030220 	.word	0x00030220

000bc198 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bc198:	b508      	push	{r3, lr}
   bc19a:	4b02      	ldr	r3, [pc, #8]	; (bc1a4 <set_system_mode+0xc>)
   bc19c:	681b      	ldr	r3, [r3, #0]
   bc19e:	685b      	ldr	r3, [r3, #4]
   bc1a0:	9301      	str	r3, [sp, #4]
   bc1a2:	bd08      	pop	{r3, pc}
   bc1a4:	00030220 	.word	0x00030220

000bc1a8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bc1a8:	b508      	push	{r3, lr}
   bc1aa:	4b02      	ldr	r3, [pc, #8]	; (bc1b4 <system_delay_ms+0xc>)
   bc1ac:	681b      	ldr	r3, [r3, #0]
   bc1ae:	695b      	ldr	r3, [r3, #20]
   bc1b0:	9301      	str	r3, [sp, #4]
   bc1b2:	bd08      	pop	{r3, pc}
   bc1b4:	00030220 	.word	0x00030220

000bc1b8 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   bc1b8:	b508      	push	{r3, lr}
   bc1ba:	4b02      	ldr	r3, [pc, #8]	; (bc1c4 <system_subscribe_event+0xc>)
   bc1bc:	681b      	ldr	r3, [r3, #0]
   bc1be:	6a1b      	ldr	r3, [r3, #32]
   bc1c0:	9301      	str	r3, [sp, #4]
   bc1c2:	bd08      	pop	{r3, pc}
   bc1c4:	00030220 	.word	0x00030220

000bc1c8 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   bc1c8:	b508      	push	{r3, lr}
   bc1ca:	4b02      	ldr	r3, [pc, #8]	; (bc1d4 <system_thread_set_state+0xc>)
   bc1cc:	681b      	ldr	r3, [r3, #0]
   bc1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc1d0:	9301      	str	r3, [sp, #4]
   bc1d2:	bd08      	pop	{r3, pc}
   bc1d4:	00030220 	.word	0x00030220

000bc1d8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bc1d8:	b508      	push	{r3, lr}
   bc1da:	4b02      	ldr	r3, [pc, #8]	; (bc1e4 <application_thread_current+0xc>)
   bc1dc:	681b      	ldr	r3, [r3, #0]
   bc1de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc1e0:	9301      	str	r3, [sp, #4]
   bc1e2:	bd08      	pop	{r3, pc}
   bc1e4:	00030220 	.word	0x00030220

000bc1e8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bc1e8:	b508      	push	{r3, lr}
   bc1ea:	4b02      	ldr	r3, [pc, #8]	; (bc1f4 <application_thread_invoke+0xc>)
   bc1ec:	681b      	ldr	r3, [r3, #0]
   bc1ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc1f0:	9301      	str	r3, [sp, #4]
   bc1f2:	bd08      	pop	{r3, pc}
   bc1f4:	00030220 	.word	0x00030220

000bc1f8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bc1f8:	b508      	push	{r3, lr}
   bc1fa:	4b02      	ldr	r3, [pc, #8]	; (bc204 <system_thread_get_state+0xc>)
   bc1fc:	681b      	ldr	r3, [r3, #0]
   bc1fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bc200:	9301      	str	r3, [sp, #4]
   bc202:	bd08      	pop	{r3, pc}
   bc204:	00030220 	.word	0x00030220

000bc208 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   bc208:	b508      	push	{r3, lr}
   bc20a:	4b02      	ldr	r3, [pc, #8]	; (bc214 <system_notify_time_changed+0xc>)
   bc20c:	681b      	ldr	r3, [r3, #0]
   bc20e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bc210:	9301      	str	r3, [sp, #4]
   bc212:	bd08      	pop	{r3, pc}
   bc214:	00030220 	.word	0x00030220

000bc218 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bc218:	b508      	push	{r3, lr}
   bc21a:	4b03      	ldr	r3, [pc, #12]	; (bc228 <system_ctrl_set_app_request_handler+0x10>)
   bc21c:	681b      	ldr	r3, [r3, #0]
   bc21e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bc222:	9301      	str	r3, [sp, #4]
   bc224:	bd08      	pop	{r3, pc}
   bc226:	0000      	.short	0x0000
   bc228:	00030220 	.word	0x00030220

000bc22c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bc22c:	b508      	push	{r3, lr}
   bc22e:	4b03      	ldr	r3, [pc, #12]	; (bc23c <system_ctrl_set_result+0x10>)
   bc230:	681b      	ldr	r3, [r3, #0]
   bc232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bc236:	9301      	str	r3, [sp, #4]
   bc238:	bd08      	pop	{r3, pc}
   bc23a:	0000      	.short	0x0000
   bc23c:	00030220 	.word	0x00030220

000bc240 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   bc240:	b508      	push	{r3, lr}
   bc242:	4b03      	ldr	r3, [pc, #12]	; (bc250 <system_power_management_set_config+0x10>)
   bc244:	681b      	ldr	r3, [r3, #0]
   bc246:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bc24a:	9301      	str	r3, [sp, #4]
   bc24c:	bd08      	pop	{r3, pc}
   bc24e:	0000      	.short	0x0000
   bc250:	00030220 	.word	0x00030220

000bc254 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   bc254:	b508      	push	{r3, lr}
   bc256:	4b03      	ldr	r3, [pc, #12]	; (bc264 <system_sleep_ext+0x10>)
   bc258:	681b      	ldr	r3, [r3, #0]
   bc25a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   bc25e:	9301      	str	r3, [sp, #4]
   bc260:	bd08      	pop	{r3, pc}
   bc262:	0000      	.short	0x0000
   bc264:	00030220 	.word	0x00030220

000bc268 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   bc268:	b508      	push	{r3, lr}
   bc26a:	4b03      	ldr	r3, [pc, #12]	; (bc278 <system_reset+0x10>)
   bc26c:	681b      	ldr	r3, [r3, #0]
   bc26e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   bc272:	9301      	str	r3, [sp, #4]
   bc274:	bd08      	pop	{r3, pc}
   bc276:	0000      	.short	0x0000
   bc278:	00030220 	.word	0x00030220

000bc27c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   bc27c:	b508      	push	{r3, lr}
   bc27e:	4b02      	ldr	r3, [pc, #8]	; (bc288 <spark_variable+0xc>)
   bc280:	681b      	ldr	r3, [r3, #0]
   bc282:	681b      	ldr	r3, [r3, #0]
   bc284:	9301      	str	r3, [sp, #4]
   bc286:	bd08      	pop	{r3, pc}
   bc288:	00030244 	.word	0x00030244

000bc28c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bc28c:	b508      	push	{r3, lr}
   bc28e:	4b02      	ldr	r3, [pc, #8]	; (bc298 <spark_function+0xc>)
   bc290:	681b      	ldr	r3, [r3, #0]
   bc292:	685b      	ldr	r3, [r3, #4]
   bc294:	9301      	str	r3, [sp, #4]
   bc296:	bd08      	pop	{r3, pc}
   bc298:	00030244 	.word	0x00030244

000bc29c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bc29c:	b508      	push	{r3, lr}
   bc29e:	4b02      	ldr	r3, [pc, #8]	; (bc2a8 <spark_process+0xc>)
   bc2a0:	681b      	ldr	r3, [r3, #0]
   bc2a2:	689b      	ldr	r3, [r3, #8]
   bc2a4:	9301      	str	r3, [sp, #4]
   bc2a6:	bd08      	pop	{r3, pc}
   bc2a8:	00030244 	.word	0x00030244

000bc2ac <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   bc2ac:	b508      	push	{r3, lr}
   bc2ae:	4b02      	ldr	r3, [pc, #8]	; (bc2b8 <spark_cloud_flag_connect+0xc>)
   bc2b0:	681b      	ldr	r3, [r3, #0]
   bc2b2:	68db      	ldr	r3, [r3, #12]
   bc2b4:	9301      	str	r3, [sp, #4]
   bc2b6:	bd08      	pop	{r3, pc}
   bc2b8:	00030244 	.word	0x00030244

000bc2bc <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bc2bc:	b508      	push	{r3, lr}
   bc2be:	4b02      	ldr	r3, [pc, #8]	; (bc2c8 <spark_cloud_flag_connected+0xc>)
   bc2c0:	681b      	ldr	r3, [r3, #0]
   bc2c2:	695b      	ldr	r3, [r3, #20]
   bc2c4:	9301      	str	r3, [sp, #4]
   bc2c6:	bd08      	pop	{r3, pc}
   bc2c8:	00030244 	.word	0x00030244

000bc2cc <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   bc2cc:	b508      	push	{r3, lr}
   bc2ce:	4b02      	ldr	r3, [pc, #8]	; (bc2d8 <spark_deviceID+0xc>)
   bc2d0:	681b      	ldr	r3, [r3, #0]
   bc2d2:	69db      	ldr	r3, [r3, #28]
   bc2d4:	9301      	str	r3, [sp, #4]
   bc2d6:	bd08      	pop	{r3, pc}
   bc2d8:	00030244 	.word	0x00030244

000bc2dc <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bc2dc:	b508      	push	{r3, lr}
   bc2de:	4b02      	ldr	r3, [pc, #8]	; (bc2e8 <spark_send_event+0xc>)
   bc2e0:	681b      	ldr	r3, [r3, #0]
   bc2e2:	6a1b      	ldr	r3, [r3, #32]
   bc2e4:	9301      	str	r3, [sp, #4]
   bc2e6:	bd08      	pop	{r3, pc}
   bc2e8:	00030244 	.word	0x00030244

000bc2ec <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   bc2ec:	b508      	push	{r3, lr}
   bc2ee:	4b02      	ldr	r3, [pc, #8]	; (bc2f8 <spark_sync_time+0xc>)
   bc2f0:	681b      	ldr	r3, [r3, #0]
   bc2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc2f4:	9301      	str	r3, [sp, #4]
   bc2f6:	bd08      	pop	{r3, pc}
   bc2f8:	00030244 	.word	0x00030244

000bc2fc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bc2fc:	b508      	push	{r3, lr}
   bc2fe:	4b02      	ldr	r3, [pc, #8]	; (bc308 <spark_sync_time_pending+0xc>)
   bc300:	681b      	ldr	r3, [r3, #0]
   bc302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc304:	9301      	str	r3, [sp, #4]
   bc306:	bd08      	pop	{r3, pc}
   bc308:	00030244 	.word	0x00030244

000bc30c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   bc30c:	b508      	push	{r3, lr}
   bc30e:	4b02      	ldr	r3, [pc, #8]	; (bc318 <spark_sync_time_last+0xc>)
   bc310:	681b      	ldr	r3, [r3, #0]
   bc312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc314:	9301      	str	r3, [sp, #4]
   bc316:	bd08      	pop	{r3, pc}
   bc318:	00030244 	.word	0x00030244

000bc31c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bc31c:	b508      	push	{r3, lr}
   bc31e:	4b02      	ldr	r3, [pc, #8]	; (bc328 <spark_set_random_seed_from_cloud_handler+0xc>)
   bc320:	681b      	ldr	r3, [r3, #0]
   bc322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bc324:	9301      	str	r3, [sp, #4]
   bc326:	bd08      	pop	{r3, pc}
   bc328:	00030244 	.word	0x00030244

000bc32c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   bc32c:	b508      	push	{r3, lr}
   bc32e:	4b02      	ldr	r3, [pc, #8]	; (bc338 <spark_cloud_disconnect+0xc>)
   bc330:	681b      	ldr	r3, [r3, #0]
   bc332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc334:	9301      	str	r3, [sp, #4]
   bc336:	bd08      	pop	{r3, pc}
   bc338:	00030244 	.word	0x00030244

000bc33c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bc33c:	b508      	push	{r3, lr}
   bc33e:	4b02      	ldr	r3, [pc, #8]	; (bc348 <network_connect+0xc>)
   bc340:	681b      	ldr	r3, [r3, #0]
   bc342:	685b      	ldr	r3, [r3, #4]
   bc344:	9301      	str	r3, [sp, #4]
   bc346:	bd08      	pop	{r3, pc}
   bc348:	00030240 	.word	0x00030240

000bc34c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bc34c:	b508      	push	{r3, lr}
   bc34e:	4b02      	ldr	r3, [pc, #8]	; (bc358 <network_connecting+0xc>)
   bc350:	681b      	ldr	r3, [r3, #0]
   bc352:	689b      	ldr	r3, [r3, #8]
   bc354:	9301      	str	r3, [sp, #4]
   bc356:	bd08      	pop	{r3, pc}
   bc358:	00030240 	.word	0x00030240

000bc35c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bc35c:	b508      	push	{r3, lr}
   bc35e:	4b02      	ldr	r3, [pc, #8]	; (bc368 <network_disconnect+0xc>)
   bc360:	681b      	ldr	r3, [r3, #0]
   bc362:	68db      	ldr	r3, [r3, #12]
   bc364:	9301      	str	r3, [sp, #4]
   bc366:	bd08      	pop	{r3, pc}
   bc368:	00030240 	.word	0x00030240

000bc36c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bc36c:	b508      	push	{r3, lr}
   bc36e:	4b02      	ldr	r3, [pc, #8]	; (bc378 <network_ready+0xc>)
   bc370:	681b      	ldr	r3, [r3, #0]
   bc372:	691b      	ldr	r3, [r3, #16]
   bc374:	9301      	str	r3, [sp, #4]
   bc376:	bd08      	pop	{r3, pc}
   bc378:	00030240 	.word	0x00030240

000bc37c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bc37c:	b508      	push	{r3, lr}
   bc37e:	4b02      	ldr	r3, [pc, #8]	; (bc388 <network_on+0xc>)
   bc380:	681b      	ldr	r3, [r3, #0]
   bc382:	695b      	ldr	r3, [r3, #20]
   bc384:	9301      	str	r3, [sp, #4]
   bc386:	bd08      	pop	{r3, pc}
   bc388:	00030240 	.word	0x00030240

000bc38c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bc38c:	b508      	push	{r3, lr}
   bc38e:	4b02      	ldr	r3, [pc, #8]	; (bc398 <network_off+0xc>)
   bc390:	681b      	ldr	r3, [r3, #0]
   bc392:	699b      	ldr	r3, [r3, #24]
   bc394:	9301      	str	r3, [sp, #4]
   bc396:	bd08      	pop	{r3, pc}
   bc398:	00030240 	.word	0x00030240

000bc39c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bc39c:	b508      	push	{r3, lr}
   bc39e:	4b02      	ldr	r3, [pc, #8]	; (bc3a8 <network_listen+0xc>)
   bc3a0:	681b      	ldr	r3, [r3, #0]
   bc3a2:	69db      	ldr	r3, [r3, #28]
   bc3a4:	9301      	str	r3, [sp, #4]
   bc3a6:	bd08      	pop	{r3, pc}
   bc3a8:	00030240 	.word	0x00030240

000bc3ac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bc3ac:	b508      	push	{r3, lr}
   bc3ae:	4b02      	ldr	r3, [pc, #8]	; (bc3b8 <network_listening+0xc>)
   bc3b0:	681b      	ldr	r3, [r3, #0]
   bc3b2:	6a1b      	ldr	r3, [r3, #32]
   bc3b4:	9301      	str	r3, [sp, #4]
   bc3b6:	bd08      	pop	{r3, pc}
   bc3b8:	00030240 	.word	0x00030240

000bc3bc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bc3bc:	b508      	push	{r3, lr}
   bc3be:	4b02      	ldr	r3, [pc, #8]	; (bc3c8 <network_set_listen_timeout+0xc>)
   bc3c0:	681b      	ldr	r3, [r3, #0]
   bc3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc3c4:	9301      	str	r3, [sp, #4]
   bc3c6:	bd08      	pop	{r3, pc}
   bc3c8:	00030240 	.word	0x00030240

000bc3cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bc3cc:	b508      	push	{r3, lr}
   bc3ce:	4b02      	ldr	r3, [pc, #8]	; (bc3d8 <network_get_listen_timeout+0xc>)
   bc3d0:	681b      	ldr	r3, [r3, #0]
   bc3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc3d4:	9301      	str	r3, [sp, #4]
   bc3d6:	bd08      	pop	{r3, pc}
   bc3d8:	00030240 	.word	0x00030240

000bc3dc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bc3dc:	b508      	push	{r3, lr}
   bc3de:	4b02      	ldr	r3, [pc, #8]	; (bc3e8 <network_is_on+0xc>)
   bc3e0:	681b      	ldr	r3, [r3, #0]
   bc3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc3e4:	9301      	str	r3, [sp, #4]
   bc3e6:	bd08      	pop	{r3, pc}
   bc3e8:	00030240 	.word	0x00030240

000bc3ec <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bc3ec:	b508      	push	{r3, lr}
   bc3ee:	4b02      	ldr	r3, [pc, #8]	; (bc3f8 <network_is_off+0xc>)
   bc3f0:	681b      	ldr	r3, [r3, #0]
   bc3f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc3f4:	9301      	str	r3, [sp, #4]
   bc3f6:	bd08      	pop	{r3, pc}
   bc3f8:	00030240 	.word	0x00030240

000bc3fc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bc3fc:	b508      	push	{r3, lr}
   bc3fe:	4b02      	ldr	r3, [pc, #8]	; (bc408 <malloc+0xc>)
   bc400:	681b      	ldr	r3, [r3, #0]
   bc402:	681b      	ldr	r3, [r3, #0]
   bc404:	9301      	str	r3, [sp, #4]
   bc406:	bd08      	pop	{r3, pc}
   bc408:	0003021c 	.word	0x0003021c

000bc40c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bc40c:	b508      	push	{r3, lr}
   bc40e:	4b02      	ldr	r3, [pc, #8]	; (bc418 <free+0xc>)
   bc410:	681b      	ldr	r3, [r3, #0]
   bc412:	685b      	ldr	r3, [r3, #4]
   bc414:	9301      	str	r3, [sp, #4]
   bc416:	bd08      	pop	{r3, pc}
   bc418:	0003021c 	.word	0x0003021c

000bc41c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bc41c:	b508      	push	{r3, lr}
   bc41e:	4b02      	ldr	r3, [pc, #8]	; (bc428 <realloc+0xc>)
   bc420:	681b      	ldr	r3, [r3, #0]
   bc422:	689b      	ldr	r3, [r3, #8]
   bc424:	9301      	str	r3, [sp, #4]
   bc426:	bd08      	pop	{r3, pc}
   bc428:	0003021c 	.word	0x0003021c

000bc42c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   bc42c:	b508      	push	{r3, lr}
   bc42e:	4b02      	ldr	r3, [pc, #8]	; (bc438 <siprintf+0xc>)
   bc430:	681b      	ldr	r3, [r3, #0]
   bc432:	691b      	ldr	r3, [r3, #16]
   bc434:	9301      	str	r3, [sp, #4]
   bc436:	bd08      	pop	{r3, pc}
   bc438:	0003021c 	.word	0x0003021c

000bc43c <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bc43c:	b508      	push	{r3, lr}
   bc43e:	4b02      	ldr	r3, [pc, #8]	; (bc448 <sscanf+0xc>)
   bc440:	681b      	ldr	r3, [r3, #0]
   bc442:	695b      	ldr	r3, [r3, #20]
   bc444:	9301      	str	r3, [sp, #4]
   bc446:	bd08      	pop	{r3, pc}
   bc448:	0003021c 	.word	0x0003021c

000bc44c <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bc44c:	b508      	push	{r3, lr}
   bc44e:	4b02      	ldr	r3, [pc, #8]	; (bc458 <snprintf+0xc>)
   bc450:	681b      	ldr	r3, [r3, #0]
   bc452:	69db      	ldr	r3, [r3, #28]
   bc454:	9301      	str	r3, [sp, #4]
   bc456:	bd08      	pop	{r3, pc}
   bc458:	0003021c 	.word	0x0003021c

000bc45c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bc45c:	b508      	push	{r3, lr}
   bc45e:	4b02      	ldr	r3, [pc, #8]	; (bc468 <vsnprintf+0xc>)
   bc460:	681b      	ldr	r3, [r3, #0]
   bc462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc464:	9301      	str	r3, [sp, #4]
   bc466:	bd08      	pop	{r3, pc}
   bc468:	0003021c 	.word	0x0003021c

000bc46c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bc46c:	b508      	push	{r3, lr}
   bc46e:	4b02      	ldr	r3, [pc, #8]	; (bc478 <abort+0xc>)
   bc470:	681b      	ldr	r3, [r3, #0]
   bc472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc474:	9301      	str	r3, [sp, #4]
   bc476:	bd08      	pop	{r3, pc}
   bc478:	0003021c 	.word	0x0003021c

000bc47c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bc47c:	b508      	push	{r3, lr}
   bc47e:	4b02      	ldr	r3, [pc, #8]	; (bc488 <_malloc_r+0xc>)
   bc480:	681b      	ldr	r3, [r3, #0]
   bc482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc484:	9301      	str	r3, [sp, #4]
   bc486:	bd08      	pop	{r3, pc}
   bc488:	0003021c 	.word	0x0003021c

000bc48c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bc48c:	b508      	push	{r3, lr}
   bc48e:	4b02      	ldr	r3, [pc, #8]	; (bc498 <__errno+0xc>)
   bc490:	681b      	ldr	r3, [r3, #0]
   bc492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bc494:	9301      	str	r3, [sp, #4]
   bc496:	bd08      	pop	{r3, pc}
   bc498:	0003021c 	.word	0x0003021c

000bc49c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bc49c:	b508      	push	{r3, lr}
   bc49e:	4b02      	ldr	r3, [pc, #8]	; (bc4a8 <__assert_func+0xc>)
   bc4a0:	681b      	ldr	r3, [r3, #0]
   bc4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc4a4:	9301      	str	r3, [sp, #4]
   bc4a6:	bd08      	pop	{r3, pc}
   bc4a8:	0003021c 	.word	0x0003021c

000bc4ac <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bc4ac:	b508      	push	{r3, lr}
   bc4ae:	4b02      	ldr	r3, [pc, #8]	; (bc4b8 <newlib_impure_ptr_callback+0xc>)
   bc4b0:	681b      	ldr	r3, [r3, #0]
   bc4b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc4b4:	9301      	str	r3, [sp, #4]
   bc4b6:	bd08      	pop	{r3, pc}
   bc4b8:	0003021c 	.word	0x0003021c

000bc4bc <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   bc4bc:	b508      	push	{r3, lr}
   bc4be:	4b02      	ldr	r3, [pc, #8]	; (bc4c8 <strftime+0xc>)
   bc4c0:	681b      	ldr	r3, [r3, #0]
   bc4c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bc4c4:	9301      	str	r3, [sp, #4]
   bc4c6:	bd08      	pop	{r3, pc}
   bc4c8:	0003021c 	.word	0x0003021c

000bc4cc <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bc4cc:	b508      	push	{r3, lr}
   bc4ce:	4b02      	ldr	r3, [pc, #8]	; (bc4d8 <localtime_r+0xc>)
   bc4d0:	681b      	ldr	r3, [r3, #0]
   bc4d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc4d4:	9301      	str	r3, [sp, #4]
   bc4d6:	bd08      	pop	{r3, pc}
   bc4d8:	0003021c 	.word	0x0003021c

000bc4dc <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bc4dc:	b508      	push	{r3, lr}
   bc4de:	4b02      	ldr	r3, [pc, #8]	; (bc4e8 <gmtime_r+0xc>)
   bc4e0:	681b      	ldr	r3, [r3, #0]
   bc4e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bc4e4:	9301      	str	r3, [sp, #4]
   bc4e6:	bd08      	pop	{r3, pc}
   bc4e8:	0003021c 	.word	0x0003021c

000bc4ec <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   bc4ec:	b508      	push	{r3, lr}
   bc4ee:	4b02      	ldr	r3, [pc, #8]	; (bc4f8 <mktime+0xc>)
   bc4f0:	681b      	ldr	r3, [r3, #0]
   bc4f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc4f4:	9301      	str	r3, [sp, #4]
   bc4f6:	bd08      	pop	{r3, pc}
   bc4f8:	0003021c 	.word	0x0003021c

000bc4fc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bc4fc:	2100      	movs	r1, #0
   bc4fe:	f7ff be53 	b.w	bc1a8 <system_delay_ms>

000bc502 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bc502:	b510      	push	{r4, lr}
      if (_M_empty())
   bc504:	6883      	ldr	r3, [r0, #8]
   bc506:	4604      	mov	r4, r0
   bc508:	b90b      	cbnz	r3, bc50e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bc50a:	f003 f9b9 	bl	bf880 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc50e:	68c3      	ldr	r3, [r0, #12]
   bc510:	4798      	blx	r3
      if (_M_manager)
   bc512:	68a3      	ldr	r3, [r4, #8]
   bc514:	b11b      	cbz	r3, bc51e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bc516:	2203      	movs	r2, #3
   bc518:	4621      	mov	r1, r4
   bc51a:	4620      	mov	r0, r4
   bc51c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bc51e:	4620      	mov	r0, r4
   bc520:	2110      	movs	r1, #16
}
   bc522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bc526:	f7f7 bdba 	b.w	b409e <_ZdlPvj>

000bc52a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bc52a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bc52c:	6843      	ldr	r3, [r0, #4]
   bc52e:	3b01      	subs	r3, #1
    {
   bc530:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bc532:	6043      	str	r3, [r0, #4]
   bc534:	b963      	cbnz	r3, bc550 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bc536:	6803      	ldr	r3, [r0, #0]
   bc538:	689b      	ldr	r3, [r3, #8]
   bc53a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bc53c:	68a3      	ldr	r3, [r4, #8]
   bc53e:	3b01      	subs	r3, #1
   bc540:	60a3      	str	r3, [r4, #8]
   bc542:	b92b      	cbnz	r3, bc550 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bc544:	6823      	ldr	r3, [r4, #0]
   bc546:	4620      	mov	r0, r4
   bc548:	68db      	ldr	r3, [r3, #12]
    }
   bc54a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bc54e:	4718      	bx	r3
    }
   bc550:	bd10      	pop	{r4, pc}

000bc552 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc552:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bc554:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc558:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bc55a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bc55e:	42ae      	cmp	r6, r5
   bc560:	d004      	beq.n	bc56c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bc562:	4628      	mov	r0, r5
   bc564:	f002 fabe 	bl	beae4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bc568:	3510      	adds	r5, #16
   bc56a:	e7f8      	b.n	bc55e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bc56c:	6820      	ldr	r0, [r4, #0]
   bc56e:	f7ff ff4d 	bl	bc40c <free>
    AllocatorT::free(data_);
}
   bc572:	4620      	mov	r0, r4
   bc574:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc578 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   bc578:	4802      	ldr	r0, [pc, #8]	; (bc584 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bc57a:	2300      	movs	r3, #0
   bc57c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   bc57e:	f7ff bb59 	b.w	bbc34 <os_mutex_recursive_create>
   bc582:	bf00      	nop
   bc584:	2003e57c 	.word	0x2003e57c

000bc588 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bc588:	2200      	movs	r2, #0
   bc58a:	6840      	ldr	r0, [r0, #4]
   bc58c:	4611      	mov	r1, r2
   bc58e:	f7ff beed 	b.w	bc36c <network_ready>

000bc592 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bc592:	2200      	movs	r2, #0
   bc594:	6840      	ldr	r0, [r0, #4]
   bc596:	4611      	mov	r1, r2
   bc598:	f7ff bf08 	b.w	bc3ac <network_listening>

000bc59c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bc59c:	2200      	movs	r2, #0
   bc59e:	6840      	ldr	r0, [r0, #4]
   bc5a0:	4611      	mov	r1, r2
   bc5a2:	f7ff bf13 	b.w	bc3cc <network_get_listen_timeout>

000bc5a6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bc5a6:	6840      	ldr	r0, [r0, #4]
   bc5a8:	2200      	movs	r2, #0
   bc5aa:	f7ff bf07 	b.w	bc3bc <network_set_listen_timeout>

000bc5ae <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bc5ae:	6840      	ldr	r0, [r0, #4]
   bc5b0:	2200      	movs	r2, #0
   bc5b2:	f081 0101 	eor.w	r1, r1, #1
   bc5b6:	f7ff bef1 	b.w	bc39c <network_listen>

000bc5ba <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bc5ba:	2300      	movs	r3, #0
   bc5bc:	6840      	ldr	r0, [r0, #4]
   bc5be:	461a      	mov	r2, r3
   bc5c0:	4619      	mov	r1, r3
   bc5c2:	f7ff bee3 	b.w	bc38c <network_off>

000bc5c6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bc5c6:	2300      	movs	r3, #0
   bc5c8:	6840      	ldr	r0, [r0, #4]
   bc5ca:	461a      	mov	r2, r3
   bc5cc:	4619      	mov	r1, r3
   bc5ce:	f7ff bed5 	b.w	bc37c <network_on>

000bc5d2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bc5d2:	2200      	movs	r2, #0
   bc5d4:	6840      	ldr	r0, [r0, #4]
   bc5d6:	4611      	mov	r1, r2
   bc5d8:	f7ff beb8 	b.w	bc34c <network_connecting>

000bc5dc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bc5dc:	6840      	ldr	r0, [r0, #4]
   bc5de:	2200      	movs	r2, #0
   bc5e0:	2102      	movs	r1, #2
   bc5e2:	f7ff bebb 	b.w	bc35c <network_disconnect>

000bc5e6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bc5e6:	2300      	movs	r3, #0
   bc5e8:	6840      	ldr	r0, [r0, #4]
   bc5ea:	461a      	mov	r2, r3
   bc5ec:	f7ff bea6 	b.w	bc33c <network_connect>

000bc5f0 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   bc5f0:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   bc5f2:	4b13      	ldr	r3, [pc, #76]	; (bc640 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   bc5f4:	6003      	str	r3, [r0, #0]
   bc5f6:	2518      	movs	r5, #24
   bc5f8:	3330      	adds	r3, #48	; 0x30
   bc5fa:	b086      	sub	sp, #24
   bc5fc:	460e      	mov	r6, r1
   bc5fe:	6043      	str	r3, [r0, #4]
   bc600:	462a      	mov	r2, r5
   bc602:	2100      	movs	r1, #0
   bc604:	4604      	mov	r4, r0
   bc606:	3008      	adds	r0, #8
   bc608:	f003 fe6c 	bl	c02e4 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bc60c:	2200      	movs	r2, #0
   bc60e:	6870      	ldr	r0, [r6, #4]
   bc610:	4611      	mov	r1, r2
   bc612:	f7ff feab 	bl	bc36c <network_ready>
   bc616:	b178      	cbz	r0, bc638 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   bc618:	2100      	movs	r1, #0
   bc61a:	462a      	mov	r2, r5
   bc61c:	4668      	mov	r0, sp
   bc61e:	f003 fe61 	bl	c02e4 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   bc622:	4669      	mov	r1, sp
   bc624:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   bc626:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   bc62a:	f7ff fac3 	bl	bbbb4 <cellular_signal>
   bc62e:	b918      	cbnz	r0, bc638 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   bc630:	4669      	mov	r1, sp
   bc632:	4620      	mov	r0, r4
   bc634:	f000 f8b8 	bl	bc7a8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   bc638:	4620      	mov	r0, r4
   bc63a:	b006      	add	sp, #24
   bc63c:	bd70      	pop	{r4, r5, r6, pc}
   bc63e:	bf00      	nop
   bc640:	000c1fd4 	.word	0x000c1fd4

000bc644 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bc644:	4b08      	ldr	r3, [pc, #32]	; (bc668 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bc646:	b510      	push	{r4, lr}
   bc648:	2428      	movs	r4, #40	; 0x28
   bc64a:	4622      	mov	r2, r4
   bc64c:	4618      	mov	r0, r3
   bc64e:	2100      	movs	r1, #0
   bc650:	f003 fe48 	bl	c02e4 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bc654:	4b05      	ldr	r3, [pc, #20]	; (bc66c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bc656:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bc658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc65c:	6042      	str	r2, [r0, #4]
   bc65e:	2204      	movs	r2, #4
   bc660:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bc662:	4a03      	ldr	r2, [pc, #12]	; (bc670 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bc664:	601a      	str	r2, [r3, #0]
   bc666:	bd10      	pop	{r4, pc}
   bc668:	2003e588 	.word	0x2003e588
   bc66c:	2003e580 	.word	0x2003e580
   bc670:	000c1f98 	.word	0x000c1f98

000bc674 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   bc674:	4770      	bx	lr

000bc676 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   bc676:	7b00      	ldrb	r0, [r0, #12]
   bc678:	4770      	bx	lr

000bc67a <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bc67a:	7b03      	ldrb	r3, [r0, #12]
   bc67c:	b14b      	cbz	r3, bc692 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   bc67e:	6903      	ldr	r3, [r0, #16]
   bc680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bc684:	d005      	beq.n	bc692 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bc686:	6980      	ldr	r0, [r0, #24]
   bc688:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   bc68c:	bf18      	it	ne
   bc68e:	2001      	movne	r0, #1
   bc690:	4770      	bx	lr
   bc692:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   bc694:	4770      	bx	lr

000bc696 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   bc696:	6803      	ldr	r3, [r0, #0]
   bc698:	6a1b      	ldr	r3, [r3, #32]
   bc69a:	4718      	bx	r3

000bc69c <_ZNK14CellularSignal7printToER5Print>:
{
   bc69c:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   bc69e:	6803      	ldr	r3, [r0, #0]
{
   bc6a0:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   bc6a2:	691b      	ldr	r3, [r3, #16]
{
   bc6a4:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   bc6a6:	4798      	blx	r3
   bc6a8:	2102      	movs	r1, #2
   bc6aa:	4628      	mov	r0, r5
   bc6ac:	f002 f8f8 	bl	be8a0 <_ZN5Print5printEfi>
    n += p.print(',');
   bc6b0:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   bc6b2:	4604      	mov	r4, r0
    n += p.print(',');
   bc6b4:	4628      	mov	r0, r5
   bc6b6:	f001 fffd 	bl	be6b4 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   bc6ba:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   bc6bc:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   bc6be:	699b      	ldr	r3, [r3, #24]
   bc6c0:	4630      	mov	r0, r6
   bc6c2:	4798      	blx	r3
   bc6c4:	2102      	movs	r1, #2
   bc6c6:	4628      	mov	r0, r5
   bc6c8:	f002 f8ea 	bl	be8a0 <_ZN5Print5printEfi>
}
   bc6cc:	4420      	add	r0, r4
   bc6ce:	bd70      	pop	{r4, r5, r6, pc}

000bc6d0 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   bc6d0:	f1a0 0004 	sub.w	r0, r0, #4
   bc6d4:	f7ff bfe2 	b.w	bc69c <_ZNK14CellularSignal7printToER5Print>

000bc6d8 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   bc6d8:	b510      	push	{r4, lr}
   bc6da:	2120      	movs	r1, #32
   bc6dc:	4604      	mov	r4, r0
   bc6de:	f7f7 fcde 	bl	b409e <_ZdlPvj>
   bc6e2:	4620      	mov	r0, r4
   bc6e4:	bd10      	pop	{r4, pc}
	...

000bc6e8 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bc6e8:	7b03      	ldrb	r3, [r0, #12]
   bc6ea:	b17b      	cbz	r3, bc70c <_ZNK14CellularSignal11getStrengthEv+0x24>
   bc6ec:	6943      	ldr	r3, [r0, #20]
   bc6ee:	2b00      	cmp	r3, #0
   bc6f0:	db0c      	blt.n	bc70c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   bc6f2:	ee07 3a90 	vmov	s15, r3
   bc6f6:	ed9f 7a07 	vldr	s14, [pc, #28]	; bc714 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   bc6fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bc6fe:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bc702:	eddf 7a05 	vldr	s15, [pc, #20]	; bc718 <_ZNK14CellularSignal11getStrengthEv+0x30>
   bc706:	ee20 0a27 	vmul.f32	s0, s0, s15
   bc70a:	4770      	bx	lr
    return -1.0f;
   bc70c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bc710:	4770      	bx	lr
   bc712:	bf00      	nop
   bc714:	477fff00 	.word	0x477fff00
   bc718:	42c80000 	.word	0x42c80000

000bc71c <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bc71c:	7b03      	ldrb	r3, [r0, #12]
   bc71e:	b163      	cbz	r3, bc73a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bc720:	6903      	ldr	r3, [r0, #16]
   bc722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bc726:	d008      	beq.n	bc73a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bc728:	ee07 3a90 	vmov	s15, r3
   bc72c:	ed9f 7a04 	vldr	s14, [pc, #16]	; bc740 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bc730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bc734:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bc738:	4770      	bx	lr
    return 0.0f;
   bc73a:	ed9f 0a02 	vldr	s0, [pc, #8]	; bc744 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bc73e:	4770      	bx	lr
   bc740:	42c80000 	.word	0x42c80000
   bc744:	00000000 	.word	0x00000000

000bc748 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bc748:	7b03      	ldrb	r3, [r0, #12]
   bc74a:	b17b      	cbz	r3, bc76c <_ZNK14CellularSignal10getQualityEv+0x24>
   bc74c:	69c3      	ldr	r3, [r0, #28]
   bc74e:	2b00      	cmp	r3, #0
   bc750:	db0c      	blt.n	bc76c <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bc752:	ee07 3a90 	vmov	s15, r3
   bc756:	ed9f 7a07 	vldr	s14, [pc, #28]	; bc774 <_ZNK14CellularSignal10getQualityEv+0x2c>
   bc75a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bc75e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bc762:	eddf 7a05 	vldr	s15, [pc, #20]	; bc778 <_ZNK14CellularSignal10getQualityEv+0x30>
   bc766:	ee20 0a27 	vmul.f32	s0, s0, s15
   bc76a:	4770      	bx	lr
    return -1.0f;
   bc76c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bc770:	4770      	bx	lr
   bc772:	bf00      	nop
   bc774:	477fff00 	.word	0x477fff00
   bc778:	42c80000 	.word	0x42c80000

000bc77c <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   bc77c:	7b03      	ldrb	r3, [r0, #12]
   bc77e:	b163      	cbz	r3, bc79a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   bc780:	6983      	ldr	r3, [r0, #24]
   bc782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bc786:	d008      	beq.n	bc79a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   bc788:	ee07 3a90 	vmov	s15, r3
   bc78c:	ed9f 7a04 	vldr	s14, [pc, #16]	; bc7a0 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   bc790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bc794:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bc798:	4770      	bx	lr
    return 0.0f;
   bc79a:	ed9f 0a02 	vldr	s0, [pc, #8]	; bc7a4 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   bc79e:	4770      	bx	lr
   bc7a0:	42c80000 	.word	0x42c80000
   bc7a4:	00000000 	.word	0x00000000

000bc7a8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   bc7a8:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   bc7aa:	460d      	mov	r5, r1
   bc7ac:	f100 0408 	add.w	r4, r0, #8
   bc7b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc7b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc7b4:	e895 0003 	ldmia.w	r5, {r0, r1}
   bc7b8:	e884 0003 	stmia.w	r4, {r0, r1}
}
   bc7bc:	2001      	movs	r0, #1
   bc7be:	bd30      	pop	{r4, r5, pc}

000bc7c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bc7c0:	4770      	bx	lr

000bc7c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bc7c2:	2000      	movs	r0, #0
   bc7c4:	4770      	bx	lr

000bc7c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bc7c6:	b510      	push	{r4, lr}
   bc7c8:	2110      	movs	r1, #16
   bc7ca:	4604      	mov	r4, r0
   bc7cc:	f7f7 fc67 	bl	b409e <_ZdlPvj>
   bc7d0:	4620      	mov	r0, r4
   bc7d2:	bd10      	pop	{r4, pc}

000bc7d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bc7d4:	b508      	push	{r3, lr}
      { delete this; }
   bc7d6:	f7ff fff6 	bl	bc7c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bc7da:	bd08      	pop	{r3, pc}

000bc7dc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bc7dc:	b530      	push	{r4, r5, lr}
        type_(type) {
   bc7de:	2200      	movs	r2, #0
   bc7e0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bc7e4:	6002      	str	r2, [r0, #0]
   bc7e6:	8084      	strh	r4, [r0, #4]
   bc7e8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bc7ea:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc7ec:	680c      	ldr	r4, [r1, #0]
   bc7ee:	8085      	strh	r5, [r0, #4]
   bc7f0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bc7f2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bc7f4:	bd30      	pop	{r4, r5, pc}

000bc7f6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bc7f6:	b510      	push	{r4, lr}
   bc7f8:	4604      	mov	r4, r0
    free((void*)msg_);
   bc7fa:	6800      	ldr	r0, [r0, #0]
   bc7fc:	f7ff fe06 	bl	bc40c <free>
}
   bc800:	4620      	mov	r0, r4
   bc802:	bd10      	pop	{r4, pc}

000bc804 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bc804:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bc806:	68c4      	ldr	r4, [r0, #12]
   bc808:	b1f4      	cbz	r4, bc848 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bc80a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bc80c:	2b02      	cmp	r3, #2
   bc80e:	d103      	bne.n	bc818 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bc810:	f104 000c 	add.w	r0, r4, #12
   bc814:	f7ff ffef 	bl	bc7f6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bc818:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bc81a:	b135      	cbz	r5, bc82a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bc81c:	4628      	mov	r0, r5
   bc81e:	f7f8 fbce 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
   bc822:	2110      	movs	r1, #16
   bc824:	4628      	mov	r0, r5
   bc826:	f7f7 fc3a 	bl	b409e <_ZdlPvj>
   bc82a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bc82c:	b135      	cbz	r5, bc83c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bc82e:	4628      	mov	r0, r5
   bc830:	f7f8 fbc5 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
   bc834:	2110      	movs	r1, #16
   bc836:	4628      	mov	r0, r5
   bc838:	f7f7 fc31 	bl	b409e <_ZdlPvj>
   bc83c:	4620      	mov	r0, r4
   bc83e:	2114      	movs	r1, #20
   bc840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc844:	f7f7 bc2b 	b.w	b409e <_ZdlPvj>
   bc848:	bd38      	pop	{r3, r4, r5, pc}

000bc84a <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   bc84a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bc84c:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   bc84e:	4668      	mov	r0, sp
   bc850:	f002 f993 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
      if (_M_empty())
   bc854:	68a3      	ldr	r3, [r4, #8]
   bc856:	b90b      	cbnz	r3, bc85c <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   bc858:	f003 f812 	bl	bf880 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc85c:	68e3      	ldr	r3, [r4, #12]
   bc85e:	4669      	mov	r1, sp
   bc860:	4620      	mov	r0, r4
   bc862:	4798      	blx	r3
   bc864:	4604      	mov	r4, r0
   bc866:	4668      	mov	r0, sp
   bc868:	f002 f93c 	bl	beae4 <_ZN6StringD1Ev>
}
   bc86c:	4620      	mov	r0, r4
   bc86e:	b004      	add	sp, #16
   bc870:	bd10      	pop	{r4, pc}

000bc872 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bc872:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bc874:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bc876:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bc87a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bc87c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bc87e:	461a      	mov	r2, r3
   bc880:	4669      	mov	r1, sp
   bc882:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bc884:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bc888:	f8ad 4000 	strh.w	r4, [sp]
   bc88c:	f7ff fcfe 	bl	bc28c <spark_function>
}
   bc890:	b004      	add	sp, #16
   bc892:	bd10      	pop	{r4, pc}

000bc894 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bc894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bc896:	230c      	movs	r3, #12
   bc898:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bc89c:	6803      	ldr	r3, [r0, #0]
   bc89e:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bc8a2:	7a03      	ldrb	r3, [r0, #8]
   bc8a4:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bc8a8:	6843      	ldr	r3, [r0, #4]
   bc8aa:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bc8ac:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bc8ae:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bc8b0:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bc8b4:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bc8b6:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bc8ba:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bc8be:	f7ff fd35 	bl	bc32c <spark_cloud_disconnect>
}
   bc8c2:	b005      	add	sp, #20
   bc8c4:	f85d fb04 	ldr.w	pc, [sp], #4

000bc8c8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bc8c8:	680b      	ldr	r3, [r1, #0]
   bc8ca:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bc8cc:	684b      	ldr	r3, [r1, #4]
   bc8ce:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bc8d0:	b113      	cbz	r3, bc8d8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bc8d2:	685a      	ldr	r2, [r3, #4]
   bc8d4:	3201      	adds	r2, #1
   bc8d6:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bc8d8:	4770      	bx	lr

000bc8da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bc8da:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc8dc:	4604      	mov	r4, r0
   bc8de:	4668      	mov	r0, sp
   bc8e0:	460d      	mov	r5, r1
   bc8e2:	f7ff fff1 	bl	bc8c8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc8e6:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bc8e8:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc8ea:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bc8ec:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bc8ee:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bc8f0:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bc8f2:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bc8f4:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bc8f6:	f7fa ffba 	bl	b786e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bc8fa:	b135      	cbz	r5, bc90a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bc8fc:	1d28      	adds	r0, r5, #4
   bc8fe:	f7fa ffb6 	bl	b786e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc902:	2108      	movs	r1, #8
   bc904:	4628      	mov	r0, r5
   bc906:	f7f7 fbca 	bl	b409e <_ZdlPvj>
        return p;
    }
   bc90a:	4620      	mov	r0, r4
   bc90c:	b003      	add	sp, #12
   bc90e:	bd30      	pop	{r4, r5, pc}

000bc910 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bc910:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bc912:	b510      	push	{r4, lr}
      if (_M_empty())
   bc914:	b90a      	cbnz	r2, bc91a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bc916:	f002 ffb3 	bl	bf880 <_ZSt25__throw_bad_function_callv>
    }
   bc91a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc91e:	68c3      	ldr	r3, [r0, #12]
   bc920:	4718      	bx	r3

000bc922 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bc922:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bc924:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bc926:	f100 0110 	add.w	r1, r0, #16
   bc92a:	f7ff fff1 	bl	bc910 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bc92e:	bd08      	pop	{r3, pc}

000bc930 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bc930:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bc932:	b510      	push	{r4, lr}
      if (_M_empty())
   bc934:	b90a      	cbnz	r2, bc93a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bc936:	f002 ffa3 	bl	bf880 <_ZSt25__throw_bad_function_callv>
    }
   bc93a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc93e:	68c3      	ldr	r3, [r0, #12]
   bc940:	4718      	bx	r3

000bc942 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bc942:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bc944:	6800      	ldr	r0, [r0, #0]
   bc946:	f100 0110 	add.w	r1, r0, #16
   bc94a:	f7ff fff1 	bl	bc930 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bc94e:	bd08      	pop	{r3, pc}

000bc950 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bc950:	b538      	push	{r3, r4, r5, lr}
   bc952:	2300      	movs	r3, #0
   bc954:	4604      	mov	r4, r0
   bc956:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc958:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bc95a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc95c:	f7f7 fb9b 	bl	b4096 <_Znwj>
   bc960:	b128      	cbz	r0, bc96e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bc962:	2301      	movs	r3, #1
   bc964:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bc968:	4b02      	ldr	r3, [pc, #8]	; (bc974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bc96a:	6003      	str	r3, [r0, #0]
   bc96c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc96e:	6020      	str	r0, [r4, #0]
	}
   bc970:	4620      	mov	r0, r4
   bc972:	bd38      	pop	{r3, r4, r5, pc}
   bc974:	000c2010 	.word	0x000c2010

000bc978 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bc978:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bc97a:	2300      	movs	r3, #0
   bc97c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bc97e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bc980:	4604      	mov	r4, r0
   bc982:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bc984:	b12b      	cbz	r3, bc992 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bc986:	2202      	movs	r2, #2
   bc988:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bc98a:	68eb      	ldr	r3, [r5, #12]
   bc98c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bc98e:	68ab      	ldr	r3, [r5, #8]
   bc990:	60a3      	str	r3, [r4, #8]
    }
   bc992:	4620      	mov	r0, r4
   bc994:	bd38      	pop	{r3, r4, r5, pc}
	...

000bc998 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bc998:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc99a:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bc99c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bc99e:	4668      	mov	r0, sp
   bc9a0:	f7ff ff1c 	bl	bc7dc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc9a4:	f04f 0302 	mov.w	r3, #2
   bc9a8:	e8d4 2f4f 	ldrexb	r2, [r4]
   bc9ac:	2a00      	cmp	r2, #0
   bc9ae:	d103      	bne.n	bc9b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bc9b0:	e8c4 3f41 	strexb	r1, r3, [r4]
   bc9b4:	2900      	cmp	r1, #0
   bc9b6:	d1f7      	bne.n	bc9a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bc9b8:	d125      	bne.n	bca06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bc9ba:	f104 050c 	add.w	r5, r4, #12
   bc9be:	4669      	mov	r1, sp
   bc9c0:	4628      	mov	r0, r5
   bc9c2:	f7ff ff0b 	bl	bc7dc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bc9c6:	f3bf 8f5b 	dmb	ish
   bc9ca:	2301      	movs	r3, #1
   bc9cc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc9ce:	2000      	movs	r0, #0
   bc9d0:	f104 0308 	add.w	r3, r4, #8
   bc9d4:	f3bf 8f5b 	dmb	ish
   bc9d8:	e853 6f00 	ldrex	r6, [r3]
   bc9dc:	e843 0200 	strex	r2, r0, [r3]
   bc9e0:	2a00      	cmp	r2, #0
   bc9e2:	d1f9      	bne.n	bc9d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bc9e4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc9e8:	b16e      	cbz	r6, bca06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bc9ea:	f7ff fbf5 	bl	bc1d8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc9ee:	b178      	cbz	r0, bca10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc9f0:	4629      	mov	r1, r5
   bc9f2:	4630      	mov	r0, r6
   bc9f4:	f7ff ff8c 	bl	bc910 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bc9f8:	4630      	mov	r0, r6
   bc9fa:	f7f8 fae0 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc9fe:	2110      	movs	r1, #16
   bca00:	4630      	mov	r0, r6
   bca02:	f7f7 fb4c 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bca06:	4668      	mov	r0, sp
   bca08:	f7ff fef5 	bl	bc7f6 <_ZN8particle5ErrorD1Ev>
    }
   bca0c:	b009      	add	sp, #36	; 0x24
   bca0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bca10:	4631      	mov	r1, r6
   bca12:	a802      	add	r0, sp, #8
   bca14:	f7ff ffb0 	bl	bc978 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bca18:	68e0      	ldr	r0, [r4, #12]
   bca1a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bca1e:	b108      	cbz	r0, bca24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bca20:	f003 fcfe 	bl	c0420 <strdup>
        type_(type) {
   bca24:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bca26:	2010      	movs	r0, #16
   bca28:	f8ad 501c 	strh.w	r5, [sp, #28]
   bca2c:	f7f7 fb33 	bl	b4096 <_Znwj>
   bca30:	4605      	mov	r5, r0
   bca32:	b1e8      	cbz	r0, bca70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bca34:	2700      	movs	r7, #0
   bca36:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bca38:	2018      	movs	r0, #24
   bca3a:	f7f7 fb2c 	bl	b4096 <_Znwj>
   bca3e:	4604      	mov	r4, r0
   bca40:	b188      	cbz	r0, bca66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bca42:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bca44:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bca46:	a802      	add	r0, sp, #8
   bca48:	f7fa ffa1 	bl	b798e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bca4c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bca4e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bca50:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bca52:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bca54:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bca56:	a906      	add	r1, sp, #24
   bca58:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bca5a:	60e3      	str	r3, [r4, #12]
   bca5c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bca60:	9205      	str	r2, [sp, #20]
   bca62:	f7ff febb 	bl	bc7dc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bca66:	4b08      	ldr	r3, [pc, #32]	; (bca88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bca68:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bca6a:	4b08      	ldr	r3, [pc, #32]	; (bca8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bca6c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bca6e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bca70:	a806      	add	r0, sp, #24
   bca72:	f7ff fec0 	bl	bc7f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bca76:	a802      	add	r0, sp, #8
   bca78:	f7f8 faa1 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bca7c:	2200      	movs	r2, #0
   bca7e:	4629      	mov	r1, r5
   bca80:	4803      	ldr	r0, [pc, #12]	; (bca90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bca82:	f7ff fbb1 	bl	bc1e8 <application_thread_invoke>
   bca86:	e7b7      	b.n	bc9f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bca88:	000bc923 	.word	0x000bc923
   bca8c:	000bcba5 	.word	0x000bcba5
   bca90:	000bc503 	.word	0x000bc503

000bca94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bca94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bca98:	b08b      	sub	sp, #44	; 0x2c
   bca9a:	4605      	mov	r5, r0
   bca9c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bcaa0:	460f      	mov	r7, r1
   bcaa2:	4690      	mov	r8, r2
   bcaa4:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bcaa6:	f7ff fc09 	bl	bc2bc <spark_cloud_flag_connected>
   bcaaa:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bcaac:	4683      	mov	fp, r0
   bcaae:	bb38      	cbnz	r0, bcb00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bcab0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bcab4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bcab6:	a905      	add	r1, sp, #20
   bcab8:	4630      	mov	r0, r6
   bcaba:	f8ad 3018 	strh.w	r3, [sp, #24]
   bcabe:	f7ff fe8d 	bl	bc7dc <_ZN8particle5ErrorC1EOS0_>
   bcac2:	2014      	movs	r0, #20
   bcac4:	f7f7 fae7 	bl	b4096 <_Znwj>
   bcac8:	4604      	mov	r4, r0
   bcaca:	b148      	cbz	r0, bcae0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bcacc:	2302      	movs	r3, #2
   bcace:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bcad0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bcad2:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bcad6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bcad8:	4631      	mov	r1, r6
   bcada:	300c      	adds	r0, #12
   bcadc:	f7ff fe7e 	bl	bc7dc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bcae0:	4628      	mov	r0, r5
	: __shared_count(__p)
   bcae2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bcae4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bcae8:	f7ff ff32 	bl	bc950 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bcaec:	4630      	mov	r0, r6
   bcaee:	f7ff fe82 	bl	bc7f6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bcaf2:	a805      	add	r0, sp, #20
   bcaf4:	f7ff fe7f 	bl	bc7f6 <_ZN8particle5ErrorD1Ev>
}
   bcaf8:	4628      	mov	r0, r5
   bcafa:	b00b      	add	sp, #44	; 0x2c
   bcafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bcb00:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bcb02:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bcb04:	2014      	movs	r0, #20
   bcb06:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bcb0a:	9307      	str	r3, [sp, #28]
   bcb0c:	f7f7 fac3 	bl	b4096 <_Znwj>
   bcb10:	4601      	mov	r1, r0
   bcb12:	b118      	cbz	r0, bcb1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bcb14:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bcb18:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bcb1a:	7044      	strb	r4, [r0, #1]
   bcb1c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bcb1e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bcb20:	f7ff ff16 	bl	bc950 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bcb24:	4b1e      	ldr	r3, [pc, #120]	; (bcba0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bcb26:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bcb28:	2008      	movs	r0, #8
   bcb2a:	f7f7 fab4 	bl	b4096 <_Znwj>
   bcb2e:	4604      	mov	r4, r0
   bcb30:	b110      	cbz	r0, bcb38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bcb32:	a903      	add	r1, sp, #12
   bcb34:	f7ff fec8 	bl	bc8c8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bcb38:	9600      	str	r6, [sp, #0]
   bcb3a:	fa5f f38a 	uxtb.w	r3, sl
   bcb3e:	464a      	mov	r2, r9
   bcb40:	4641      	mov	r1, r8
   bcb42:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bcb44:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bcb46:	f7ff fbc9 	bl	bc2dc <spark_send_event>
   bcb4a:	b9b8      	cbnz	r0, bcb7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bcb4c:	9b03      	ldr	r3, [sp, #12]
   bcb4e:	785b      	ldrb	r3, [r3, #1]
   bcb50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bcb54:	b993      	cbnz	r3, bcb7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bcb56:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bcb5a:	a905      	add	r1, sp, #20
   bcb5c:	a803      	add	r0, sp, #12
   bcb5e:	9205      	str	r2, [sp, #20]
   bcb60:	f8ad 3018 	strh.w	r3, [sp, #24]
   bcb64:	f7ff ff18 	bl	bc998 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bcb68:	a805      	add	r0, sp, #20
   bcb6a:	f7ff fe44 	bl	bc7f6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bcb6e:	a805      	add	r0, sp, #20
   bcb70:	9909      	ldr	r1, [sp, #36]	; 0x24
   bcb72:	f7ff feb2 	bl	bc8da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bcb76:	a806      	add	r0, sp, #24
   bcb78:	f7fa fe79 	bl	b786e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bcb7c:	a903      	add	r1, sp, #12
   bcb7e:	a805      	add	r0, sp, #20
   bcb80:	f7ff fea2 	bl	bc8c8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcb84:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bcb86:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcb88:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bcb8a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bcb8c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bcb8e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bcb90:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bcb92:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bcb94:	f7fa fe6b 	bl	b786e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bcb98:	a804      	add	r0, sp, #16
   bcb9a:	f7fa fe68 	bl	b786e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bcb9e:	e7ab      	b.n	bcaf8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bcba0:	000bcc21 	.word	0x000bcc21

000bcba4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bcba4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bcba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcba8:	4605      	mov	r5, r0
	switch (__op)
   bcbaa:	d103      	bne.n	bcbb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bcbac:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bcbae:	6003      	str	r3, [r0, #0]
      }
   bcbb0:	2000      	movs	r0, #0
   bcbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bcbb4:	2a02      	cmp	r2, #2
   bcbb6:	d010      	beq.n	bcbda <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bcbb8:	2a03      	cmp	r2, #3
   bcbba:	d1f9      	bne.n	bcbb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bcbbc:	6804      	ldr	r4, [r0, #0]
   bcbbe:	2c00      	cmp	r4, #0
   bcbc0:	d0f6      	beq.n	bcbb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bcbc2:	f104 0010 	add.w	r0, r4, #16
   bcbc6:	f7ff fe16 	bl	bc7f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bcbca:	4620      	mov	r0, r4
   bcbcc:	f7f8 f9f7 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bcbd0:	2118      	movs	r1, #24
   bcbd2:	4620      	mov	r0, r4
   bcbd4:	f7f7 fa63 	bl	b409e <_ZdlPvj>
   bcbd8:	e7ea      	b.n	bcbb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bcbda:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bcbdc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bcbde:	f7f7 fa5a 	bl	b4096 <_Znwj>
   bcbe2:	4604      	mov	r4, r0
   bcbe4:	b150      	cbz	r0, bcbfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bcbe6:	4631      	mov	r1, r6
   bcbe8:	f7ff fec6 	bl	bc978 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bcbec:	6930      	ldr	r0, [r6, #16]
   bcbee:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcbf2:	b108      	cbz	r0, bcbf8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bcbf4:	f003 fc14 	bl	c0420 <strdup>
        type_(type) {
   bcbf8:	6120      	str	r0, [r4, #16]
   bcbfa:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bcbfc:	602c      	str	r4, [r5, #0]
	}
   bcbfe:	e7d7      	b.n	bcbb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bcc00 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bcc00:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bcc02:	2300      	movs	r3, #0
   bcc04:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bcc06:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bcc08:	4604      	mov	r4, r0
   bcc0a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bcc0c:	b12b      	cbz	r3, bcc1a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bcc0e:	2202      	movs	r2, #2
   bcc10:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bcc12:	68eb      	ldr	r3, [r5, #12]
   bcc14:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bcc16:	68ab      	ldr	r3, [r5, #8]
   bcc18:	60a3      	str	r3, [r4, #8]
    }
   bcc1a:	4620      	mov	r0, r4
   bcc1c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bcc20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bcc20:	b5f0      	push	{r4, r5, r6, r7, lr}
   bcc22:	b089      	sub	sp, #36	; 0x24
   bcc24:	4604      	mov	r4, r0
   bcc26:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bcc28:	a801      	add	r0, sp, #4
   bcc2a:	4611      	mov	r1, r2
   bcc2c:	f7ff fe55 	bl	bc8da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bcc30:	b1a4      	cbz	r4, bcc5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bcc32:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcc34:	b11d      	cbz	r5, bcc3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bcc36:	4628      	mov	r0, r5
   bcc38:	f003 fbf2 	bl	c0420 <strdup>
   bcc3c:	4605      	mov	r5, r0
   bcc3e:	a801      	add	r0, sp, #4
   bcc40:	a903      	add	r1, sp, #12
        type_(type) {
   bcc42:	9503      	str	r5, [sp, #12]
   bcc44:	f8ad 4010 	strh.w	r4, [sp, #16]
   bcc48:	f7ff fea6 	bl	bc998 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bcc4c:	a803      	add	r0, sp, #12
   bcc4e:	f7ff fdd2 	bl	bc7f6 <_ZN8particle5ErrorD1Ev>
   bcc52:	a802      	add	r0, sp, #8
   bcc54:	f7fa fe0b 	bl	b786e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bcc58:	b009      	add	sp, #36	; 0x24
   bcc5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bcc5c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bcc5e:	2301      	movs	r3, #1
   bcc60:	e8d5 2f4f 	ldrexb	r2, [r5]
   bcc64:	2a00      	cmp	r2, #0
   bcc66:	d103      	bne.n	bcc70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bcc68:	e8c5 3f41 	strexb	r1, r3, [r5]
   bcc6c:	2900      	cmp	r1, #0
   bcc6e:	d1f7      	bne.n	bcc60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bcc70:	d1ef      	bne.n	bcc52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bcc72:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bcc74:	f3bf 8f5b 	dmb	ish
   bcc78:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bcc7a:	1d2b      	adds	r3, r5, #4
   bcc7c:	f3bf 8f5b 	dmb	ish
   bcc80:	e853 6f00 	ldrex	r6, [r3]
   bcc84:	e843 4200 	strex	r2, r4, [r3]
   bcc88:	2a00      	cmp	r2, #0
   bcc8a:	d1f9      	bne.n	bcc80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bcc8c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bcc90:	2e00      	cmp	r6, #0
   bcc92:	d0de      	beq.n	bcc52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bcc94:	4620      	mov	r0, r4
   bcc96:	f7ff fa9f 	bl	bc1d8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bcc9a:	4607      	mov	r7, r0
   bcc9c:	b160      	cbz	r0, bccb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bcc9e:	f105 010c 	add.w	r1, r5, #12
   bcca2:	4630      	mov	r0, r6
   bcca4:	f7ff fe44 	bl	bc930 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bcca8:	4630      	mov	r0, r6
   bccaa:	f7f8 f988 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bccae:	2110      	movs	r1, #16
   bccb0:	4630      	mov	r0, r6
   bccb2:	f7f7 f9f4 	bl	b409e <_ZdlPvj>
   bccb6:	e7cc      	b.n	bcc52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bccb8:	4631      	mov	r1, r6
   bccba:	a803      	add	r0, sp, #12
   bccbc:	f7ff ffa0 	bl	bcc00 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bccc0:	7b2b      	ldrb	r3, [r5, #12]
   bccc2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bccc6:	2010      	movs	r0, #16
   bccc8:	f7f7 f9e5 	bl	b4096 <_Znwj>
   bcccc:	4605      	mov	r5, r0
   bccce:	b1d0      	cbz	r0, bcd06 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bccd0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bccd2:	2014      	movs	r0, #20
   bccd4:	f7f7 f9df 	bl	b4096 <_Znwj>
   bccd8:	4604      	mov	r4, r0
   bccda:	b178      	cbz	r0, bccfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bccdc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bccde:	4601      	mov	r1, r0
   bcce0:	a803      	add	r0, sp, #12
   bcce2:	f7fa fe54 	bl	b798e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcce6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bcce8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bccea:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bccec:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bccee:	9205      	str	r2, [sp, #20]
   bccf0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bccf2:	60e3      	str	r3, [r4, #12]
   bccf4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bccf8:	9206      	str	r2, [sp, #24]
   bccfa:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bccfc:	4b06      	ldr	r3, [pc, #24]	; (bcd18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bccfe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bcd00:	4b06      	ldr	r3, [pc, #24]	; (bcd1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bcd02:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bcd04:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bcd06:	a803      	add	r0, sp, #12
   bcd08:	f7f8 f959 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bcd0c:	2200      	movs	r2, #0
   bcd0e:	4629      	mov	r1, r5
   bcd10:	4803      	ldr	r0, [pc, #12]	; (bcd20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bcd12:	f7ff fa69 	bl	bc1e8 <application_thread_invoke>
   bcd16:	e7c7      	b.n	bcca8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bcd18:	000bc943 	.word	0x000bc943
   bcd1c:	000bcd25 	.word	0x000bcd25
   bcd20:	000bc503 	.word	0x000bc503

000bcd24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bcd24:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bcd26:	b570      	push	{r4, r5, r6, lr}
   bcd28:	4604      	mov	r4, r0
	switch (__op)
   bcd2a:	d103      	bne.n	bcd34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bcd2c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bcd2e:	6003      	str	r3, [r0, #0]
      }
   bcd30:	2000      	movs	r0, #0
   bcd32:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bcd34:	2a02      	cmp	r2, #2
   bcd36:	d00c      	beq.n	bcd52 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bcd38:	2a03      	cmp	r2, #3
   bcd3a:	d1f9      	bne.n	bcd30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bcd3c:	6804      	ldr	r4, [r0, #0]
   bcd3e:	2c00      	cmp	r4, #0
   bcd40:	d0f6      	beq.n	bcd30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bcd42:	4620      	mov	r0, r4
   bcd44:	f7f8 f93b 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bcd48:	2114      	movs	r1, #20
   bcd4a:	4620      	mov	r0, r4
   bcd4c:	f7f7 f9a7 	bl	b409e <_ZdlPvj>
   bcd50:	e7ee      	b.n	bcd30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bcd52:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bcd54:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bcd56:	f7f7 f99e 	bl	b4096 <_Znwj>
   bcd5a:	4605      	mov	r5, r0
   bcd5c:	b120      	cbz	r0, bcd68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bcd5e:	4631      	mov	r1, r6
   bcd60:	f7ff ff4e 	bl	bcc00 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bcd64:	7c33      	ldrb	r3, [r6, #16]
   bcd66:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bcd68:	6025      	str	r5, [r4, #0]
	}
   bcd6a:	e7e1      	b.n	bcd30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bcd6c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bcd6c:	2200      	movs	r2, #0
   bcd6e:	6840      	ldr	r0, [r0, #4]
   bcd70:	4611      	mov	r1, r2
   bcd72:	f7ff bb1b 	b.w	bc3ac <network_listening>

000bcd76 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bcd76:	2200      	movs	r2, #0
   bcd78:	6840      	ldr	r0, [r0, #4]
   bcd7a:	4611      	mov	r1, r2
   bcd7c:	f7ff bb26 	b.w	bc3cc <network_get_listen_timeout>

000bcd80 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bcd80:	6840      	ldr	r0, [r0, #4]
   bcd82:	2200      	movs	r2, #0
   bcd84:	f7ff bb1a 	b.w	bc3bc <network_set_listen_timeout>

000bcd88 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bcd88:	6840      	ldr	r0, [r0, #4]
   bcd8a:	2200      	movs	r2, #0
   bcd8c:	f081 0101 	eor.w	r1, r1, #1
   bcd90:	f7ff bb04 	b.w	bc39c <network_listen>

000bcd94 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bcd94:	2300      	movs	r3, #0
   bcd96:	6840      	ldr	r0, [r0, #4]
   bcd98:	461a      	mov	r2, r3
   bcd9a:	4619      	mov	r1, r3
   bcd9c:	f7ff baf6 	b.w	bc38c <network_off>

000bcda0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bcda0:	2300      	movs	r3, #0
   bcda2:	6840      	ldr	r0, [r0, #4]
   bcda4:	461a      	mov	r2, r3
   bcda6:	4619      	mov	r1, r3
   bcda8:	f7ff bae8 	b.w	bc37c <network_on>

000bcdac <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bcdac:	2200      	movs	r2, #0
   bcdae:	6840      	ldr	r0, [r0, #4]
   bcdb0:	4611      	mov	r1, r2
   bcdb2:	f7ff badb 	b.w	bc36c <network_ready>

000bcdb6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bcdb6:	2200      	movs	r2, #0
   bcdb8:	6840      	ldr	r0, [r0, #4]
   bcdba:	4611      	mov	r1, r2
   bcdbc:	f7ff bac6 	b.w	bc34c <network_connecting>

000bcdc0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bcdc0:	6840      	ldr	r0, [r0, #4]
   bcdc2:	2200      	movs	r2, #0
   bcdc4:	2102      	movs	r1, #2
   bcdc6:	f7ff bac9 	b.w	bc35c <network_disconnect>

000bcdca <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bcdca:	2300      	movs	r3, #0
   bcdcc:	6840      	ldr	r0, [r0, #4]
   bcdce:	461a      	mov	r2, r3
   bcdd0:	f7ff bab4 	b.w	bc33c <network_connect>

000bcdd4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bcdd4:	4b02      	ldr	r3, [pc, #8]	; (bcde0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bcdd6:	2203      	movs	r2, #3
   bcdd8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bcdda:	4a02      	ldr	r2, [pc, #8]	; (bcde4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bcddc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bcdde:	4770      	bx	lr
   bcde0:	2003e5b0 	.word	0x2003e5b0
   bcde4:	000c202c 	.word	0x000c202c

000bcde8 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   bcde8:	6800      	ldr	r0, [r0, #0]
   bcdea:	f000 b8f3 	b.w	bcfd4 <_ZN7TwoWire4lockEv>

000bcdee <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   bcdee:	b510      	push	{r4, lr}
   bcdf0:	4604      	mov	r4, r0
      lock_(_lock) {
   bcdf2:	6001      	str	r1, [r0, #0]
   bcdf4:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   bcdf6:	b10a      	cbz	r2, bcdfc <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   bcdf8:	f7ff fff6 	bl	bcde8 <_ZN9FuelGauge4lockEv>
}
   bcdfc:	4620      	mov	r0, r4
   bcdfe:	bd10      	pop	{r4, pc}

000bce00 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   bce00:	b513      	push	{r0, r1, r4, lr}
   bce02:	4604      	mov	r4, r0
   bce04:	9101      	str	r1, [sp, #4]
            return &Wire1;
   bce06:	f002 fccd 	bl	bf7a4 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   bce0a:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   bce0c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   bce0e:	4620      	mov	r0, r4
   bce10:	f7ff ffed 	bl	bcdee <_ZN9FuelGaugeC1ER7TwoWireb>
}
   bce14:	4620      	mov	r0, r4
   bce16:	b002      	add	sp, #8
   bce18:	bd10      	pop	{r4, pc}

000bce1a <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   bce1a:	6800      	ldr	r0, [r0, #0]
   bce1c:	f000 b8e3 	b.w	bcfe6 <_ZN7TwoWire6unlockEv>

000bce20 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   bce20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bce24:	4604      	mov	r4, r0
   bce26:	461d      	mov	r5, r3
   bce28:	460f      	mov	r7, r1
   bce2a:	4616      	mov	r6, r2
      { _M_device.lock(); }
   bce2c:	f7ff ffdc 	bl	bcde8 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bce30:	2236      	movs	r2, #54	; 0x36
   bce32:	2300      	movs	r3, #0
   bce34:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bce38:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   bce3a:	f04f 0801 	mov.w	r8, #1
   bce3e:	230a      	movs	r3, #10
   bce40:	4669      	mov	r1, sp
   bce42:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bce46:	f000 f8a9 	bl	bcf9c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   bce4a:	6820      	ldr	r0, [r4, #0]
   bce4c:	6803      	ldr	r3, [r0, #0]
   bce4e:	4639      	mov	r1, r7
   bce50:	689b      	ldr	r3, [r3, #8]
   bce52:	4798      	blx	r3
    i2c_.write(MSB);
   bce54:	6820      	ldr	r0, [r4, #0]
   bce56:	6803      	ldr	r3, [r0, #0]
   bce58:	4631      	mov	r1, r6
   bce5a:	689b      	ldr	r3, [r3, #8]
   bce5c:	4798      	blx	r3
    i2c_.write(LSB);
   bce5e:	6820      	ldr	r0, [r4, #0]
   bce60:	6803      	ldr	r3, [r0, #0]
   bce62:	4629      	mov	r1, r5
   bce64:	689b      	ldr	r3, [r3, #8]
   bce66:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bce68:	4641      	mov	r1, r8
   bce6a:	6820      	ldr	r0, [r4, #0]
   bce6c:	f000 f8ae 	bl	bcfcc <_ZN7TwoWire15endTransmissionEh>
   bce70:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   bce72:	4620      	mov	r0, r4
   bce74:	bf0c      	ite	eq
   bce76:	2500      	moveq	r5, #0
   bce78:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   bce7c:	f7ff ffcd 	bl	bce1a <_ZN9FuelGauge6unlockEv>
}
   bce80:	4628      	mov	r0, r5
   bce82:	b004      	add	sp, #16
   bce84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bce88 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   bce88:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   bce8a:	2240      	movs	r2, #64	; 0x40
   bce8c:	2300      	movs	r3, #0
   bce8e:	2106      	movs	r1, #6
   bce90:	f7ff ffc6 	bl	bce20 <_ZN9FuelGauge13writeRegisterEhhh>
}
   bce94:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bce98:	bd08      	pop	{r3, pc}

000bce9a <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bce9a:	4770      	bx	lr

000bce9c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bce9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bce9e:	4606      	mov	r6, r0
   bcea0:	4615      	mov	r5, r2
   bcea2:	460c      	mov	r4, r1
   bcea4:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bcea6:	42bc      	cmp	r4, r7
   bcea8:	d006      	beq.n	bceb8 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bceaa:	6833      	ldr	r3, [r6, #0]
   bceac:	f814 1b01 	ldrb.w	r1, [r4], #1
   bceb0:	689b      	ldr	r3, [r3, #8]
   bceb2:	4630      	mov	r0, r6
   bceb4:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bceb6:	e7f6      	b.n	bcea6 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bceb8:	4628      	mov	r0, r5
   bceba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bcebc <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bcebc:	7c00      	ldrb	r0, [r0, #16]
   bcebe:	2200      	movs	r2, #0
   bcec0:	f7fe bf88 	b.w	bbdd4 <hal_i2c_write>

000bcec4 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bcec4:	7c00      	ldrb	r0, [r0, #16]
   bcec6:	2100      	movs	r1, #0
   bcec8:	f7fe bf8c 	b.w	bbde4 <hal_i2c_available>

000bcecc <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bcecc:	7c00      	ldrb	r0, [r0, #16]
   bcece:	2100      	movs	r1, #0
   bced0:	f7fe bf90 	b.w	bbdf4 <hal_i2c_read>

000bced4 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bced4:	7c00      	ldrb	r0, [r0, #16]
   bced6:	2100      	movs	r1, #0
   bced8:	f7fe bf94 	b.w	bbe04 <hal_i2c_peek>

000bcedc <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bcedc:	7c00      	ldrb	r0, [r0, #16]
   bcede:	2100      	movs	r1, #0
   bcee0:	f7fe bf98 	b.w	bbe14 <hal_i2c_flush>

000bcee4 <_ZN7TwoWireD0Ev>:
   bcee4:	b510      	push	{r4, lr}
   bcee6:	2114      	movs	r1, #20
   bcee8:	4604      	mov	r4, r0
   bceea:	f7f7 f8d8 	bl	b409e <_ZdlPvj>
   bceee:	4620      	mov	r0, r4
   bcef0:	bd10      	pop	{r4, pc}
	...

000bcef4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bcef4:	b538      	push	{r3, r4, r5, lr}
   bcef6:	4604      	mov	r4, r0
   bcef8:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bcefa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bcefe:	2200      	movs	r2, #0
   bcf00:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bcf04:	4b09      	ldr	r3, [pc, #36]	; (bcf2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   bcf06:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bcf08:	4608      	mov	r0, r1
   bcf0a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   bcf0c:	4629      	mov	r1, r5
   bcf0e:	f7fe ff91 	bl	bbe34 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bcf12:	30bf      	adds	r0, #191	; 0xbf
   bcf14:	d108      	bne.n	bcf28 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   bcf16:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bcf18:	07db      	lsls	r3, r3, #31
   bcf1a:	d505      	bpl.n	bcf28 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   bcf1c:	6868      	ldr	r0, [r5, #4]
   bcf1e:	f7ff fa75 	bl	bc40c <free>
    free(conf.tx_buffer);
   bcf22:	68e8      	ldr	r0, [r5, #12]
   bcf24:	f7ff fa72 	bl	bc40c <free>
}
   bcf28:	4620      	mov	r0, r4
   bcf2a:	bd38      	pop	{r3, r4, r5, pc}
   bcf2c:	000c2068 	.word	0x000c2068

000bcf30 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bcf30:	2300      	movs	r3, #0
   bcf32:	7c00      	ldrb	r0, [r0, #16]
   bcf34:	461a      	mov	r2, r3
   bcf36:	4619      	mov	r1, r3
   bcf38:	f7fe bf34 	b.w	bbda4 <hal_i2c_begin>

000bcf3c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bcf3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bcf3e:	2200      	movs	r2, #0
   bcf40:	2314      	movs	r3, #20
   bcf42:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bcf46:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bcf4a:	780b      	ldrb	r3, [r1, #0]
   bcf4c:	f88d 3008 	strb.w	r3, [sp, #8]
   bcf50:	684b      	ldr	r3, [r1, #4]
   bcf52:	9303      	str	r3, [sp, #12]
   bcf54:	68cb      	ldr	r3, [r1, #12]
   bcf56:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bcf58:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bcf5a:	7a0b      	ldrb	r3, [r1, #8]
   bcf5c:	9305      	str	r3, [sp, #20]
   bcf5e:	a901      	add	r1, sp, #4
   bcf60:	f7fe ff80 	bl	bbe64 <hal_i2c_request_ex>
}
   bcf64:	b007      	add	sp, #28
   bcf66:	f85d fb04 	ldr.w	pc, [sp], #4

000bcf6a <_ZN7TwoWire11requestFromEhjh>:
{
   bcf6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bcf6c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bcf6e:	f88d 1000 	strb.w	r1, [sp]
   bcf72:	f04f 0164 	mov.w	r1, #100	; 0x64
   bcf76:	9103      	str	r1, [sp, #12]
   bcf78:	bf18      	it	ne
   bcf7a:	2301      	movne	r3, #1
   bcf7c:	4669      	mov	r1, sp
    size_ = size;
   bcf7e:	9201      	str	r2, [sp, #4]
   bcf80:	f88d 3008 	strb.w	r3, [sp, #8]
   bcf84:	f7ff ffda 	bl	bcf3c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bcf88:	b005      	add	sp, #20
   bcf8a:	f85d fb04 	ldr.w	pc, [sp], #4

000bcf8e <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bcf8e:	7c00      	ldrb	r0, [r0, #16]
   bcf90:	2200      	movs	r2, #0
   bcf92:	f7fe bf0f 	b.w	bbdb4 <hal_i2c_begin_transmission>

000bcf96 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bcf96:	b2c9      	uxtb	r1, r1
   bcf98:	f7ff bff9 	b.w	bcf8e <_ZN7TwoWire17beginTransmissionEh>

000bcf9c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   bcf9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bcf9e:	2300      	movs	r3, #0
   bcfa0:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   bcfa4:	684a      	ldr	r2, [r1, #4]
   bcfa6:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   bcfa8:	2314      	movs	r3, #20
    };
   bcfaa:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   bcfac:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   bcfb0:	780b      	ldrb	r3, [r1, #0]
    };
   bcfb2:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bcfb4:	7a0a      	ldrb	r2, [r1, #8]
   bcfb6:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   bcfb8:	7c00      	ldrb	r0, [r0, #16]
    };
   bcfba:	f88d 3008 	strb.w	r3, [sp, #8]
   bcfbe:	aa01      	add	r2, sp, #4
   bcfc0:	4619      	mov	r1, r3
   bcfc2:	f7fe fef7 	bl	bbdb4 <hal_i2c_begin_transmission>
}
   bcfc6:	b007      	add	sp, #28
   bcfc8:	f85d fb04 	ldr.w	pc, [sp], #4

000bcfcc <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bcfcc:	7c00      	ldrb	r0, [r0, #16]
   bcfce:	2200      	movs	r2, #0
   bcfd0:	f7fe bef8 	b.w	bbdc4 <hal_i2c_end_transmission>

000bcfd4 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bcfd4:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bcfd6:	2100      	movs	r1, #0
   bcfd8:	7c00      	ldrb	r0, [r0, #16]
   bcfda:	f7fe ff33 	bl	bbe44 <hal_i2c_lock>
}
   bcfde:	fab0 f080 	clz	r0, r0
   bcfe2:	0940      	lsrs	r0, r0, #5
   bcfe4:	bd08      	pop	{r3, pc}

000bcfe6 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   bcfe6:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   bcfe8:	2100      	movs	r1, #0
   bcfea:	7c00      	ldrb	r0, [r0, #16]
   bcfec:	f7fe ff32 	bl	bbe54 <hal_i2c_unlock>
}
   bcff0:	fab0 f080 	clz	r0, r0
   bcff4:	0940      	lsrs	r0, r0, #5
   bcff6:	bd08      	pop	{r3, pc}

000bcff8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bcff8:	4700      	bx	r0
	...

000bcffc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bcffc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bd000:	2400      	movs	r4, #0
{
   bd002:	461d      	mov	r5, r3
   bd004:	460f      	mov	r7, r1
   bd006:	4690      	mov	r8, r2
   bd008:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bd00a:	f7fe febb 	bl	bbd84 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bd00e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bd010:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bd014:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bd018:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bd01c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bd020:	bfa2      	ittt	ge
   bd022:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bd026:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bd02a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bd02c:	4907      	ldr	r1, [pc, #28]	; (bd04c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bd02e:	9400      	str	r4, [sp, #0]
   bd030:	4643      	mov	r3, r8
   bd032:	463a      	mov	r2, r7
   bd034:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bd036:	bfa8      	it	ge
   bd038:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bd03c:	f7fe fe9a 	bl	bbd74 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bd040:	fab0 f080 	clz	r0, r0
   bd044:	0940      	lsrs	r0, r0, #5
   bd046:	b004      	add	sp, #16
   bd048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd04c:	000bcff9 	.word	0x000bcff9

000bd050 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   bd050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd052:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   bd054:	f7fe fe96 	bl	bbd84 <HAL_Interrupts_Detach>
   bd058:	4605      	mov	r5, r0
   bd05a:	b970      	cbnz	r0, bd07a <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   bd05c:	4f08      	ldr	r7, [pc, #32]	; (bd080 <_Z15detachInterruptt+0x30>)
   bd05e:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   bd062:	b146      	cbz	r6, bd076 <_Z15detachInterruptt+0x26>
    class function<_Res(_ArgTypes...)>
   bd064:	4630      	mov	r0, r6
   bd066:	f7f7 ffaa 	bl	b4fbe <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   bd06a:	2110      	movs	r1, #16
   bd06c:	4630      	mov	r0, r6
   bd06e:	f7f7 f816 	bl	b409e <_ZdlPvj>
        handlers[pin] = nullptr;
   bd072:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   bd076:	2001      	movs	r0, #1
   bd078:	e000      	b.n	bd07c <_Z15detachInterruptt+0x2c>
        return false;
   bd07a:	2000      	movs	r0, #0
    }
    return true;
}
   bd07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd07e:	bf00      	nop
   bd080:	2003e5b8 	.word	0x2003e5b8

000bd084 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bd084:	4770      	bx	lr

000bd086 <_ZN9IPAddressD0Ev>:
   bd086:	b510      	push	{r4, lr}
   bd088:	2118      	movs	r1, #24
   bd08a:	4604      	mov	r4, r0
   bd08c:	f7f7 f807 	bl	b409e <_ZdlPvj>
   bd090:	4620      	mov	r0, r4
   bd092:	bd10      	pop	{r4, pc}

000bd094 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bd094:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bd096:	7d03      	ldrb	r3, [r0, #20]
   bd098:	2b06      	cmp	r3, #6
{
   bd09a:	b08d      	sub	sp, #52	; 0x34
   bd09c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bd09e:	f100 0704 	add.w	r7, r0, #4
   bd0a2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bd0a6:	d012      	beq.n	bd0ce <_ZNK9IPAddress7printToER5Print+0x3a>
   bd0a8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bd0ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bd0b0:	220a      	movs	r2, #10
   bd0b2:	4630      	mov	r0, r6
   bd0b4:	f001 fb0d 	bl	be6d2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bd0b8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bd0ba:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bd0bc:	d019      	beq.n	bd0f2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bd0be:	2c00      	cmp	r4, #0
   bd0c0:	d0f4      	beq.n	bd0ac <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bd0c2:	212e      	movs	r1, #46	; 0x2e
   bd0c4:	4630      	mov	r0, r6
   bd0c6:	f001 faf5 	bl	be6b4 <_ZN5Print5printEc>
   bd0ca:	4404      	add	r4, r0
   bd0cc:	e7ee      	b.n	bd0ac <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bd0ce:	232f      	movs	r3, #47	; 0x2f
   bd0d0:	466a      	mov	r2, sp
   bd0d2:	4639      	mov	r1, r7
   bd0d4:	200a      	movs	r0, #10
		buf[0] = 0;
   bd0d6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bd0da:	f7fe fecb 	bl	bbe74 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bd0de:	4668      	mov	r0, sp
   bd0e0:	f003 f9bb 	bl	c045a <strlen>
   bd0e4:	6833      	ldr	r3, [r6, #0]
   bd0e6:	4602      	mov	r2, r0
   bd0e8:	68db      	ldr	r3, [r3, #12]
   bd0ea:	4669      	mov	r1, sp
   bd0ec:	4630      	mov	r0, r6
   bd0ee:	4798      	blx	r3
   bd0f0:	4604      	mov	r4, r0
    }
    return n;
}
   bd0f2:	4620      	mov	r0, r4
   bd0f4:	b00d      	add	sp, #52	; 0x34
   bd0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bd0f8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bd0f8:	b510      	push	{r4, lr}
   bd0fa:	4b05      	ldr	r3, [pc, #20]	; (bd110 <_ZN9IPAddressC1Ev+0x18>)
   bd0fc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bd0fe:	2211      	movs	r2, #17
   bd100:	f840 3b04 	str.w	r3, [r0], #4
   bd104:	2100      	movs	r1, #0
   bd106:	f003 f8ed 	bl	c02e4 <memset>
}
   bd10a:	4620      	mov	r0, r4
   bd10c:	bd10      	pop	{r4, pc}
   bd10e:	bf00      	nop
   bd110:	000c2090 	.word	0x000c2090

000bd114 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bd114:	4603      	mov	r3, r0
   bd116:	4a07      	ldr	r2, [pc, #28]	; (bd134 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bd118:	b510      	push	{r4, lr}
   bd11a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bd11e:	f101 0210 	add.w	r2, r1, #16
   bd122:	f851 4b04 	ldr.w	r4, [r1], #4
   bd126:	f843 4b04 	str.w	r4, [r3], #4
   bd12a:	4291      	cmp	r1, r2
   bd12c:	d1f9      	bne.n	bd122 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bd12e:	780a      	ldrb	r2, [r1, #0]
   bd130:	701a      	strb	r2, [r3, #0]
}
   bd132:	bd10      	pop	{r4, pc}
   bd134:	000c2090 	.word	0x000c2090

000bd138 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bd138:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bd13a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bd13e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bd142:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bd146:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bd14a:	2304      	movs	r3, #4
   bd14c:	6041      	str	r1, [r0, #4]
   bd14e:	7503      	strb	r3, [r0, #20]
}
   bd150:	bd10      	pop	{r4, pc}
	...

000bd154 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bd154:	b507      	push	{r0, r1, r2, lr}
   bd156:	4b06      	ldr	r3, [pc, #24]	; (bd170 <_ZN9IPAddressC1EPKh+0x1c>)
   bd158:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bd15a:	78cb      	ldrb	r3, [r1, #3]
   bd15c:	9300      	str	r3, [sp, #0]
   bd15e:	788b      	ldrb	r3, [r1, #2]
   bd160:	784a      	ldrb	r2, [r1, #1]
   bd162:	7809      	ldrb	r1, [r1, #0]
   bd164:	f7ff ffe8 	bl	bd138 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bd168:	b003      	add	sp, #12
   bd16a:	f85d fb04 	ldr.w	pc, [sp], #4
   bd16e:	bf00      	nop
   bd170:	000c2090 	.word	0x000c2090

000bd174 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bd174:	f100 0310 	add.w	r3, r0, #16
   bd178:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bd17a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bd17e:	2901      	cmp	r1, #1
   bd180:	4618      	mov	r0, r3
   bd182:	d108      	bne.n	bd196 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bd184:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bd188:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bd18c:	3a01      	subs	r2, #1
   bd18e:	f103 0310 	add.w	r3, r3, #16
   bd192:	d1f2      	bne.n	bd17a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bd194:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bd196:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bd198:	bf04      	itt	eq
   bd19a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bd19e:	1852      	addeq	r2, r2, r1
   bd1a0:	e7f4      	b.n	bd18c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bd1a2 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bd1a2:	b40e      	push	{r1, r2, r3}
   bd1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd1a6:	b088      	sub	sp, #32
   bd1a8:	af00      	add	r7, sp, #0
   bd1aa:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd1ae:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bd1b0:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd1b4:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bd1b6:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd1b8:	462b      	mov	r3, r5
   bd1ba:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bd1bc:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd1be:	f7ff f94d 	bl	bc45c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bd1c2:	280f      	cmp	r0, #15
   bd1c4:	687a      	ldr	r2, [r7, #4]
   bd1c6:	d91a      	bls.n	bd1fe <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bd1c8:	f100 0308 	add.w	r3, r0, #8
   bd1cc:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bd1d0:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bd1d2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd1d6:	1c41      	adds	r1, r0, #1
   bd1d8:	462b      	mov	r3, r5
   bd1da:	4668      	mov	r0, sp
        va_start(args, fmt);
   bd1dc:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd1de:	f7ff f93d 	bl	bc45c <vsnprintf>
        if (n > 0) {
   bd1e2:	1e02      	subs	r2, r0, #0
   bd1e4:	dd04      	ble.n	bd1f0 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bd1e6:	6823      	ldr	r3, [r4, #0]
   bd1e8:	4669      	mov	r1, sp
   bd1ea:	689b      	ldr	r3, [r3, #8]
   bd1ec:	4620      	mov	r0, r4
   bd1ee:	4798      	blx	r3
   bd1f0:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bd1f2:	3720      	adds	r7, #32
   bd1f4:	46bd      	mov	sp, r7
   bd1f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bd1fa:	b003      	add	sp, #12
   bd1fc:	4770      	bx	lr
    } else if (n > 0) {
   bd1fe:	2800      	cmp	r0, #0
   bd200:	d0f7      	beq.n	bd1f2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bd202:	6823      	ldr	r3, [r4, #0]
   bd204:	4602      	mov	r2, r0
   bd206:	689b      	ldr	r3, [r3, #8]
   bd208:	f107 0110 	add.w	r1, r7, #16
   bd20c:	4620      	mov	r0, r4
   bd20e:	4798      	blx	r3
}
   bd210:	e7ef      	b.n	bd1f2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bd212 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bd212:	b538      	push	{r3, r4, r5, lr}
   bd214:	680b      	ldr	r3, [r1, #0]
   bd216:	6003      	str	r3, [r0, #0]
   bd218:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bd21a:	6843      	ldr	r3, [r0, #4]
   bd21c:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bd21e:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bd220:	d008      	beq.n	bd234 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bd222:	b115      	cbz	r5, bd22a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bd224:	686b      	ldr	r3, [r5, #4]
   bd226:	3301      	adds	r3, #1
   bd228:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bd22a:	6860      	ldr	r0, [r4, #4]
   bd22c:	b108      	cbz	r0, bd232 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bd22e:	f7ff f97c 	bl	bc52a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bd232:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bd234:	bd38      	pop	{r3, r4, r5, pc}

000bd236 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bd236:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bd238:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bd23a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bd23e:	689b      	ldr	r3, [r3, #8]
   bd240:	2201      	movs	r2, #1
   bd242:	f10d 0107 	add.w	r1, sp, #7
   bd246:	4798      	blx	r3
}
   bd248:	b003      	add	sp, #12
   bd24a:	f85d fb04 	ldr.w	pc, [sp], #4

000bd24e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bd24e:	460b      	mov	r3, r1
   bd250:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bd252:	2200      	movs	r2, #0
   bd254:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bd256:	e9c0 2200 	strd	r2, r2, [r0]
   bd25a:	4604      	mov	r4, r0
        t_ = t;
   bd25c:	6083      	str	r3, [r0, #8]
    if (t) {
   bd25e:	b90b      	cbnz	r3, bd264 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bd260:	4620      	mov	r0, r4
   bd262:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bd264:	f7ff ffd5 	bl	bd212 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bd268:	e7fa      	b.n	bd260 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bd26a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bd26a:	6883      	ldr	r3, [r0, #8]
   bd26c:	b1eb      	cbz	r3, bd2aa <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bd26e:	781a      	ldrb	r2, [r3, #0]
   bd270:	2a03      	cmp	r2, #3
   bd272:	d81a      	bhi.n	bd2aa <_ZNK5spark9JSONValue4typeEv+0x40>
   bd274:	e8df f002 	tbb	[pc, r2]
   bd278:	1b021704 	.word	0x1b021704
   bd27c:	2005      	movs	r0, #5
   bd27e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bd280:	6802      	ldr	r2, [r0, #0]
   bd282:	685b      	ldr	r3, [r3, #4]
   bd284:	6852      	ldr	r2, [r2, #4]
   bd286:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bd288:	282d      	cmp	r0, #45	; 0x2d
   bd28a:	d012      	beq.n	bd2b2 <_ZNK5spark9JSONValue4typeEv+0x48>
   bd28c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bd290:	2b09      	cmp	r3, #9
   bd292:	d90e      	bls.n	bd2b2 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bd294:	2874      	cmp	r0, #116	; 0x74
   bd296:	d00e      	beq.n	bd2b6 <_ZNK5spark9JSONValue4typeEv+0x4c>
   bd298:	2866      	cmp	r0, #102	; 0x66
   bd29a:	d00c      	beq.n	bd2b6 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bd29c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bd2a0:	4258      	negs	r0, r3
   bd2a2:	4158      	adcs	r0, r3
   bd2a4:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bd2a6:	2006      	movs	r0, #6
   bd2a8:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bd2aa:	2000      	movs	r0, #0
   bd2ac:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bd2ae:	2004      	movs	r0, #4
   bd2b0:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bd2b2:	2003      	movs	r0, #3
   bd2b4:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bd2b6:	2002      	movs	r0, #2
}
   bd2b8:	4770      	bx	lr

000bd2ba <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bd2ba:	b510      	push	{r4, lr}
   bd2bc:	4604      	mov	r4, r0
    switch (type()) {
   bd2be:	f7ff ffd4 	bl	bd26a <_ZNK5spark9JSONValue4typeEv>
   bd2c2:	2802      	cmp	r0, #2
   bd2c4:	d00e      	beq.n	bd2e4 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bd2c6:	1ec3      	subs	r3, r0, #3
   bd2c8:	b2db      	uxtb	r3, r3
   bd2ca:	2b01      	cmp	r3, #1
   bd2cc:	d814      	bhi.n	bd2f8 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bd2ce:	6822      	ldr	r2, [r4, #0]
   bd2d0:	68a3      	ldr	r3, [r4, #8]
   bd2d2:	6850      	ldr	r0, [r2, #4]
   bd2d4:	685b      	ldr	r3, [r3, #4]
}
   bd2d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bd2da:	220a      	movs	r2, #10
   bd2dc:	2100      	movs	r1, #0
   bd2de:	4418      	add	r0, r3
   bd2e0:	f003 b9ac 	b.w	c063c <strtol>
        const char* const s = d_->json + t_->start;
   bd2e4:	6822      	ldr	r2, [r4, #0]
   bd2e6:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bd2e8:	6852      	ldr	r2, [r2, #4]
   bd2ea:	685b      	ldr	r3, [r3, #4]
   bd2ec:	5cd0      	ldrb	r0, [r2, r3]
   bd2ee:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bd2f2:	4258      	negs	r0, r3
   bd2f4:	4158      	adcs	r0, r3
}
   bd2f6:	bd10      	pop	{r4, pc}
    switch (type()) {
   bd2f8:	2000      	movs	r0, #0
   bd2fa:	e7fc      	b.n	bd2f6 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bd2fc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bd2fc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bd2fe:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bd300:	e9c0 3300 	strd	r3, r3, [r0]
   bd304:	4604      	mov	r4, r0
        n_(0) {
   bd306:	480e      	ldr	r0, [pc, #56]	; (bd340 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bd308:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bd30c:	b1a9      	cbz	r1, bd33a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bd30e:	780b      	ldrb	r3, [r1, #0]
   bd310:	2b03      	cmp	r3, #3
   bd312:	d006      	beq.n	bd322 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bd314:	b98b      	cbnz	r3, bd33a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bd316:	6813      	ldr	r3, [r2, #0]
   bd318:	6858      	ldr	r0, [r3, #4]
   bd31a:	684b      	ldr	r3, [r1, #4]
   bd31c:	5cc3      	ldrb	r3, [r0, r3]
   bd31e:	2b6e      	cmp	r3, #110	; 0x6e
   bd320:	d007      	beq.n	bd332 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bd322:	6813      	ldr	r3, [r2, #0]
   bd324:	684d      	ldr	r5, [r1, #4]
   bd326:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bd328:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bd32a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bd32c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bd32e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bd330:	60e3      	str	r3, [r4, #12]
   bd332:	4611      	mov	r1, r2
   bd334:	4620      	mov	r0, r4
   bd336:	f7ff ff6c 	bl	bd212 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bd33a:	4620      	mov	r0, r4
   bd33c:	bd38      	pop	{r3, r4, r5, pc}
   bd33e:	bf00      	nop
   bd340:	000c20fc 	.word	0x000c20fc

000bd344 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bd344:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bd346:	2500      	movs	r5, #0
   bd348:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bd34a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bd34e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bd352:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bd356:	4604      	mov	r4, r0
   bd358:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bd35a:	b14b      	cbz	r3, bd370 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bd35c:	781a      	ldrb	r2, [r3, #0]
   bd35e:	2a01      	cmp	r2, #1
   bd360:	d106      	bne.n	bd370 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bd362:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bd366:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bd368:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bd36a:	6143      	str	r3, [r0, #20]
   bd36c:	f7ff ff51 	bl	bd212 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bd370:	4620      	mov	r0, r4
   bd372:	bd38      	pop	{r3, r4, r5, pc}

000bd374 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bd374:	b510      	push	{r4, lr}
    if (!n_) {
   bd376:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bd378:	4604      	mov	r4, r0
    if (!n_) {
   bd37a:	b163      	cbz	r3, bd396 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bd37c:	6880      	ldr	r0, [r0, #8]
   bd37e:	60e0      	str	r0, [r4, #12]
    --n_;
   bd380:	3b01      	subs	r3, #1
    ++t_;
   bd382:	3010      	adds	r0, #16
   bd384:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bd386:	6120      	str	r0, [r4, #16]
    --n_;
   bd388:	6163      	str	r3, [r4, #20]
    if (n_) {
   bd38a:	b113      	cbz	r3, bd392 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bd38c:	f7ff fef2 	bl	bd174 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bd390:	60a0      	str	r0, [r4, #8]
    return true;
   bd392:	2001      	movs	r0, #1
   bd394:	e000      	b.n	bd398 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bd396:	4618      	mov	r0, r3
}
   bd398:	bd10      	pop	{r4, pc}

000bd39a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bd39a:	b510      	push	{r4, lr}
    write('}');
   bd39c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bd39e:	4604      	mov	r4, r0
    write('}');
   bd3a0:	f7ff ff49 	bl	bd236 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bd3a4:	2301      	movs	r3, #1
   bd3a6:	7123      	strb	r3, [r4, #4]
}
   bd3a8:	4620      	mov	r0, r4
   bd3aa:	bd10      	pop	{r4, pc}

000bd3ac <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bd3ac:	b508      	push	{r3, lr}
    switch (state_) {
   bd3ae:	7903      	ldrb	r3, [r0, #4]
   bd3b0:	2b01      	cmp	r3, #1
   bd3b2:	d002      	beq.n	bd3ba <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bd3b4:	2b02      	cmp	r3, #2
   bd3b6:	d004      	beq.n	bd3c2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bd3b8:	bd08      	pop	{r3, pc}
        write(',');
   bd3ba:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bd3bc:	f7ff ff3b 	bl	bd236 <_ZN5spark10JSONWriter5writeEc>
}
   bd3c0:	e7fa      	b.n	bd3b8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bd3c2:	213a      	movs	r1, #58	; 0x3a
   bd3c4:	e7fa      	b.n	bd3bc <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bd3c6 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bd3c6:	b510      	push	{r4, lr}
   bd3c8:	4604      	mov	r4, r0
    writeSeparator();
   bd3ca:	f7ff ffef 	bl	bd3ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bd3ce:	4620      	mov	r0, r4
   bd3d0:	217b      	movs	r1, #123	; 0x7b
   bd3d2:	f7ff ff30 	bl	bd236 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bd3d6:	2300      	movs	r3, #0
   bd3d8:	7123      	strb	r3, [r4, #4]
}
   bd3da:	4620      	mov	r0, r4
   bd3dc:	bd10      	pop	{r4, pc}
	...

000bd3e0 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bd3e0:	b513      	push	{r0, r1, r4, lr}
   bd3e2:	4604      	mov	r4, r0
   bd3e4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bd3e6:	f7ff ffe1 	bl	bd3ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bd3ea:	6823      	ldr	r3, [r4, #0]
   bd3ec:	9a01      	ldr	r2, [sp, #4]
   bd3ee:	68db      	ldr	r3, [r3, #12]
   bd3f0:	4903      	ldr	r1, [pc, #12]	; (bd400 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bd3f2:	4620      	mov	r0, r4
   bd3f4:	4798      	blx	r3
    state_ = NEXT;
   bd3f6:	2301      	movs	r3, #1
}
   bd3f8:	4620      	mov	r0, r4
    state_ = NEXT;
   bd3fa:	7123      	strb	r3, [r4, #4]
}
   bd3fc:	b002      	add	sp, #8
   bd3fe:	bd10      	pop	{r4, pc}
   bd400:	000c0cb2 	.word	0x000c0cb2

000bd404 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bd404:	b513      	push	{r0, r1, r4, lr}
   bd406:	4604      	mov	r4, r0
   bd408:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bd40a:	f7ff ffcf 	bl	bd3ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bd40e:	6823      	ldr	r3, [r4, #0]
   bd410:	9a01      	ldr	r2, [sp, #4]
   bd412:	68db      	ldr	r3, [r3, #12]
   bd414:	4903      	ldr	r1, [pc, #12]	; (bd424 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bd416:	4620      	mov	r0, r4
   bd418:	4798      	blx	r3
    state_ = NEXT;
   bd41a:	2301      	movs	r3, #1
}
   bd41c:	4620      	mov	r0, r4
    state_ = NEXT;
   bd41e:	7123      	strb	r3, [r4, #4]
}
   bd420:	b002      	add	sp, #8
   bd422:	bd10      	pop	{r4, pc}
   bd424:	000c198a 	.word	0x000c198a

000bd428 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bd428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd42c:	460d      	mov	r5, r1
    write('"');
   bd42e:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bd430:	4690      	mov	r8, r2
   bd432:	4604      	mov	r4, r0
    write('"');
   bd434:	f7ff feff 	bl	bd236 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bd438:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bd4e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bd43c:	44a8      	add	r8, r5
    const char *s = str;
   bd43e:	462f      	mov	r7, r5
    while (s != end) {
   bd440:	4547      	cmp	r7, r8
   bd442:	46ba      	mov	sl, r7
   bd444:	d03d      	beq.n	bd4c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bd446:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bd44a:	2e22      	cmp	r6, #34	; 0x22
   bd44c:	d006      	beq.n	bd45c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bd44e:	2e5c      	cmp	r6, #92	; 0x5c
   bd450:	d004      	beq.n	bd45c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bd452:	4630      	mov	r0, r6
   bd454:	f002 ff16 	bl	c0284 <isprint>
   bd458:	2800      	cmp	r0, #0
   bd45a:	d1f1      	bne.n	bd440 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bd45c:	6823      	ldr	r3, [r4, #0]
   bd45e:	ebaa 0205 	sub.w	r2, sl, r5
   bd462:	689b      	ldr	r3, [r3, #8]
   bd464:	4629      	mov	r1, r5
   bd466:	4620      	mov	r0, r4
   bd468:	4798      	blx	r3
            write('\\');
   bd46a:	215c      	movs	r1, #92	; 0x5c
   bd46c:	4620      	mov	r0, r4
   bd46e:	f7ff fee2 	bl	bd236 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bd472:	2e0d      	cmp	r6, #13
   bd474:	d80a      	bhi.n	bd48c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bd476:	2e07      	cmp	r6, #7
   bd478:	d91c      	bls.n	bd4b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bd47a:	f1a6 0308 	sub.w	r3, r6, #8
   bd47e:	2b05      	cmp	r3, #5
   bd480:	d818      	bhi.n	bd4b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bd482:	e8df f003 	tbb	[pc, r3]
   bd486:	0f0d      	.short	0x0f0d
   bd488:	15131711 	.word	0x15131711
   bd48c:	2e22      	cmp	r6, #34	; 0x22
   bd48e:	d001      	beq.n	bd494 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bd490:	2e5c      	cmp	r6, #92	; 0x5c
   bd492:	d10f      	bne.n	bd4b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bd494:	4631      	mov	r1, r6
                write('b');
   bd496:	4620      	mov	r0, r4
   bd498:	f7ff fecd 	bl	bd236 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bd49c:	463d      	mov	r5, r7
    while (s != end) {
   bd49e:	e7cf      	b.n	bd440 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bd4a0:	2162      	movs	r1, #98	; 0x62
   bd4a2:	e7f8      	b.n	bd496 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bd4a4:	2174      	movs	r1, #116	; 0x74
   bd4a6:	e7f6      	b.n	bd496 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bd4a8:	216e      	movs	r1, #110	; 0x6e
   bd4aa:	e7f4      	b.n	bd496 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bd4ac:	2166      	movs	r1, #102	; 0x66
   bd4ae:	e7f2      	b.n	bd496 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bd4b0:	2172      	movs	r1, #114	; 0x72
   bd4b2:	e7f0      	b.n	bd496 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bd4b4:	6823      	ldr	r3, [r4, #0]
   bd4b6:	4632      	mov	r2, r6
   bd4b8:	68db      	ldr	r3, [r3, #12]
   bd4ba:	4649      	mov	r1, r9
   bd4bc:	4620      	mov	r0, r4
   bd4be:	4798      	blx	r3
                break;
   bd4c0:	e7ec      	b.n	bd49c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bd4c2:	42bd      	cmp	r5, r7
   bd4c4:	d005      	beq.n	bd4d2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bd4c6:	6823      	ldr	r3, [r4, #0]
   bd4c8:	1b7a      	subs	r2, r7, r5
   bd4ca:	689b      	ldr	r3, [r3, #8]
   bd4cc:	4629      	mov	r1, r5
   bd4ce:	4620      	mov	r0, r4
   bd4d0:	4798      	blx	r3
    }
    write('"');
   bd4d2:	2122      	movs	r1, #34	; 0x22
   bd4d4:	4620      	mov	r0, r4
   bd4d6:	f7ff feae 	bl	bd236 <_ZN5spark10JSONWriter5writeEc>
}
   bd4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd4de:	bf00      	nop
   bd4e0:	000c209c 	.word	0x000c209c

000bd4e4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bd4e4:	b513      	push	{r0, r1, r4, lr}
   bd4e6:	4604      	mov	r4, r0
   bd4e8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bd4ec:	f7ff ff5e 	bl	bd3ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bd4f0:	4620      	mov	r0, r4
   bd4f2:	e9dd 2100 	ldrd	r2, r1, [sp]
   bd4f6:	f7ff ff97 	bl	bd428 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bd4fa:	2302      	movs	r3, #2
}
   bd4fc:	4620      	mov	r0, r4
    state_ = VALUE;
   bd4fe:	7123      	strb	r3, [r4, #4]
}
   bd500:	b002      	add	sp, #8
   bd502:	bd10      	pop	{r4, pc}

000bd504 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bd504:	b513      	push	{r0, r1, r4, lr}
   bd506:	4604      	mov	r4, r0
   bd508:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bd50c:	f7ff ff4e 	bl	bd3ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bd510:	4620      	mov	r0, r4
   bd512:	e9dd 2100 	ldrd	r2, r1, [sp]
   bd516:	f7ff ff87 	bl	bd428 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bd51a:	2301      	movs	r3, #1
}
   bd51c:	4620      	mov	r0, r4
    state_ = NEXT;
   bd51e:	7123      	strb	r3, [r4, #4]
}
   bd520:	b002      	add	sp, #8
   bd522:	bd10      	pop	{r4, pc}

000bd524 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bd524:	6880      	ldr	r0, [r0, #8]
   bd526:	6803      	ldr	r3, [r0, #0]
   bd528:	68db      	ldr	r3, [r3, #12]
   bd52a:	4718      	bx	r3

000bd52c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bd52c:	4770      	bx	lr

000bd52e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bd52e:	4608      	mov	r0, r1
   bd530:	b111      	cbz	r1, bd538 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bd532:	680b      	ldr	r3, [r1, #0]
   bd534:	685b      	ldr	r3, [r3, #4]
   bd536:	4718      	bx	r3
}
   bd538:	4770      	bx	lr

000bd53a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bd53a:	4770      	bx	lr

000bd53c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bd53c:	4770      	bx	lr

000bd53e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bd53e:	4770      	bx	lr

000bd540 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bd540:	4770      	bx	lr

000bd542 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bd542:	b538      	push	{r3, r4, r5, lr}
   bd544:	4604      	mov	r4, r0
   bd546:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bd548:	6800      	ldr	r0, [r0, #0]
   bd54a:	212e      	movs	r1, #46	; 0x2e
   bd54c:	f002 ff4b 	bl	c03e6 <strchrnul>
    size = s - category;
   bd550:	6823      	ldr	r3, [r4, #0]
   bd552:	1ac3      	subs	r3, r0, r3
   bd554:	602b      	str	r3, [r5, #0]
    if (size) {
   bd556:	b123      	cbz	r3, bd562 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bd558:	7803      	ldrb	r3, [r0, #0]
   bd55a:	b103      	cbz	r3, bd55e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bd55c:	3001      	adds	r0, #1
   bd55e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bd560:	6020      	str	r0, [r4, #0]
}
   bd562:	4618      	mov	r0, r3
   bd564:	bd38      	pop	{r3, r4, r5, pc}

000bd566 <_ZN5spark16JSONStreamWriterD0Ev>:
   bd566:	b510      	push	{r4, lr}
   bd568:	210c      	movs	r1, #12
   bd56a:	4604      	mov	r4, r0
   bd56c:	f7f6 fd97 	bl	b409e <_ZdlPvj>
   bd570:	4620      	mov	r0, r4
   bd572:	bd10      	pop	{r4, pc}

000bd574 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bd574:	b510      	push	{r4, lr}
   bd576:	2104      	movs	r1, #4
   bd578:	4604      	mov	r4, r0
   bd57a:	f7f6 fd90 	bl	b409e <_ZdlPvj>
   bd57e:	4620      	mov	r0, r4
   bd580:	bd10      	pop	{r4, pc}

000bd582 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bd582:	b510      	push	{r4, lr}
   bd584:	2104      	movs	r1, #4
   bd586:	4604      	mov	r4, r0
   bd588:	f7f6 fd89 	bl	b409e <_ZdlPvj>
   bd58c:	4620      	mov	r0, r4
   bd58e:	bd10      	pop	{r4, pc}

000bd590 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bd590:	f7fe bb60 	b.w	bbc54 <os_mutex_recursive_lock>

000bd594 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bd594:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bd596:	f002 ff30 	bl	c03fa <strcmp>
}
   bd59a:	fab0 f080 	clz	r0, r0
   bd59e:	0940      	lsrs	r0, r0, #5
   bd5a0:	bd08      	pop	{r3, pc}

000bd5a2 <__tcf_1>:
   bd5a2:	4770      	bx	lr

000bd5a4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bd5a4:	b510      	push	{r4, lr}
   bd5a6:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bd5a8:	f001 ff36 	bl	bf418 <_Z16_fetch_usbserialv>
   bd5ac:	4284      	cmp	r4, r0
   bd5ae:	d010      	beq.n	bd5d2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bd5b0:	f002 f938 	bl	bf824 <_Z22__fetch_global_Serial1v>
   bd5b4:	4284      	cmp	r4, r0
   bd5b6:	d105      	bne.n	bd5c4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bd5b8:	f002 f934 	bl	bf824 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bd5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bd5c0:	f001 bec3 	b.w	bf34a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bd5c4:	b12c      	cbz	r4, bd5d2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bd5c6:	6823      	ldr	r3, [r4, #0]
   bd5c8:	4620      	mov	r0, r4
   bd5ca:	685b      	ldr	r3, [r3, #4]
}
   bd5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd5d0:	4718      	bx	r3
   bd5d2:	bd10      	pop	{r4, pc}

000bd5d4 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bd5d4:	b513      	push	{r0, r1, r4, lr}
   bd5d6:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bd5d8:	4608      	mov	r0, r1
   bd5da:	9101      	str	r1, [sp, #4]
   bd5dc:	f002 ff3d 	bl	c045a <strlen>
   bd5e0:	9901      	ldr	r1, [sp, #4]
   bd5e2:	4602      	mov	r2, r0
   bd5e4:	4620      	mov	r0, r4
}
   bd5e6:	b002      	add	sp, #8
   bd5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bd5ec:	f7ff bf8a 	b.w	bd504 <_ZN5spark10JSONWriter5valueEPKcj>

000bd5f0 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bd5f0:	b513      	push	{r0, r1, r4, lr}
   bd5f2:	4604      	mov	r4, r0
    write(str, strlen(str));
   bd5f4:	4608      	mov	r0, r1
   bd5f6:	9101      	str	r1, [sp, #4]
   bd5f8:	f002 ff2f 	bl	c045a <strlen>
   bd5fc:	6823      	ldr	r3, [r4, #0]
   bd5fe:	9901      	ldr	r1, [sp, #4]
   bd600:	68db      	ldr	r3, [r3, #12]
   bd602:	4602      	mov	r2, r0
   bd604:	4620      	mov	r0, r4
}
   bd606:	b002      	add	sp, #8
   bd608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bd60c:	4718      	bx	r3

000bd60e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bd60e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bd610:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bd612:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bd616:	68db      	ldr	r3, [r3, #12]
   bd618:	2201      	movs	r2, #1
   bd61a:	f10d 0107 	add.w	r1, sp, #7
   bd61e:	4798      	blx	r3
}
   bd620:	b003      	add	sp, #12
   bd622:	f85d fb04 	ldr.w	pc, [sp], #4

000bd626 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bd626:	b40e      	push	{r1, r2, r3}
   bd628:	b503      	push	{r0, r1, lr}
   bd62a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bd62c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bd62e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bd632:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bd634:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bd636:	f001 f942 	bl	be8be <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bd63a:	b002      	add	sp, #8
   bd63c:	f85d eb04 	ldr.w	lr, [sp], #4
   bd640:	b003      	add	sp, #12
   bd642:	4770      	bx	lr

000bd644 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bd644:	680a      	ldr	r2, [r1, #0]
   bd646:	6002      	str	r2, [r0, #0]
   bd648:	684a      	ldr	r2, [r1, #4]
   bd64a:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bd64c:	2200      	movs	r2, #0
   bd64e:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bd652:	b510      	push	{r4, lr}
   bd654:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bd656:	688c      	ldr	r4, [r1, #8]
   bd658:	6084      	str	r4, [r0, #8]
   bd65a:	68cc      	ldr	r4, [r1, #12]
   bd65c:	60c4      	str	r4, [r0, #12]
   bd65e:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bd660:	608a      	str	r2, [r1, #8]
   bd662:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bd664:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bd666:	610a      	str	r2, [r1, #16]
   bd668:	bd10      	pop	{r4, pc}
	...

000bd66c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bd66c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bd670:	e9d0 8400 	ldrd	r8, r4, [r0]
   bd674:	f04f 0a14 	mov.w	sl, #20
   bd678:	9300      	str	r3, [sp, #0]
   bd67a:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bd67e:	4b18      	ldr	r3, [pc, #96]	; (bd6e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bd680:	10a4      	asrs	r4, r4, #2
   bd682:	4617      	mov	r7, r2
   bd684:	435c      	muls	r4, r3
   bd686:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bd688:	2c00      	cmp	r4, #0
   bd68a:	dd21      	ble.n	bd6d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bd68c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bd68e:	fb0a f006 	mul.w	r0, sl, r6
   bd692:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bd696:	463a      	mov	r2, r7
   bd698:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bd69c:	5828      	ldr	r0, [r5, r0]
   bd69e:	9101      	str	r1, [sp, #4]
   bd6a0:	455f      	cmp	r7, fp
   bd6a2:	bf28      	it	cs
   bd6a4:	465a      	movcs	r2, fp
   bd6a6:	f002 fee0 	bl	c046a <strncmp>
                if (cmp == 0) {
   bd6aa:	2800      	cmp	r0, #0
   bd6ac:	9901      	ldr	r1, [sp, #4]
   bd6ae:	f04f 0301 	mov.w	r3, #1
   bd6b2:	d10b      	bne.n	bd6cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bd6b4:	455f      	cmp	r7, fp
   bd6b6:	d103      	bne.n	bd6c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bd6b8:	9a00      	ldr	r2, [sp, #0]
   bd6ba:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bd6bc:	4634      	mov	r4, r6
   bd6be:	e7e3      	b.n	bd688 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bd6c0:	d9fc      	bls.n	bd6bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bd6c2:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bd6c4:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bd6c8:	3e01      	subs	r6, #1
   bd6ca:	e7f7      	b.n	bd6bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bd6cc:	dbf9      	blt.n	bd6c2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bd6ce:	e7f5      	b.n	bd6bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bd6d0:	eba5 0508 	sub.w	r5, r5, r8
}
   bd6d4:	4802      	ldr	r0, [pc, #8]	; (bd6e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bd6d6:	10ad      	asrs	r5, r5, #2
   bd6d8:	4368      	muls	r0, r5
   bd6da:	b003      	add	sp, #12
   bd6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd6e0:	cccccccd 	.word	0xcccccccd

000bd6e4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bd6e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bd6e6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bd6e8:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bd6ea:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bd6ec:	b303      	cbz	r3, bd730 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bd6ee:	b1f9      	cbz	r1, bd730 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bd6f0:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bd6f2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bd6f6:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bd6f8:	a903      	add	r1, sp, #12
   bd6fa:	a801      	add	r0, sp, #4
   bd6fc:	f7ff ff21 	bl	bd542 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bd700:	4601      	mov	r1, r0
   bd702:	b1a8      	cbz	r0, bd730 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bd704:	f10d 030b 	add.w	r3, sp, #11
   bd708:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bd70a:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bd70e:	4620      	mov	r0, r4
   bd710:	f7ff ffac 	bl	bd66c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bd714:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bd718:	b153      	cbz	r3, bd730 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bd71a:	6823      	ldr	r3, [r4, #0]
   bd71c:	2414      	movs	r4, #20
   bd71e:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bd722:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bd724:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bd728:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bd72a:	bfa8      	it	ge
   bd72c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bd72e:	e7e3      	b.n	bd6f8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bd730:	4628      	mov	r0, r5
   bd732:	b004      	add	sp, #16
   bd734:	bd70      	pop	{r4, r5, r6, pc}
	...

000bd738 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bd738:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bd73a:	4c09      	ldr	r4, [pc, #36]	; (bd760 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bd73c:	7823      	ldrb	r3, [r4, #0]
   bd73e:	f3bf 8f5b 	dmb	ish
   bd742:	07db      	lsls	r3, r3, #31
   bd744:	d409      	bmi.n	bd75a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bd746:	4620      	mov	r0, r4
   bd748:	f7f6 fcb8 	bl	b40bc <__cxa_guard_acquire>
   bd74c:	b128      	cbz	r0, bd75a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bd74e:	4620      	mov	r0, r4
   bd750:	f7f6 fcb9 	bl	b40c6 <__cxa_guard_release>
   bd754:	4803      	ldr	r0, [pc, #12]	; (bd764 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bd756:	f002 fd71 	bl	c023c <atexit>
}
   bd75a:	4803      	ldr	r0, [pc, #12]	; (bd768 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bd75c:	bd10      	pop	{r4, pc}
   bd75e:	bf00      	nop
   bd760:	2003e64c 	.word	0x2003e64c
   bd764:	000bd53b 	.word	0x000bd53b
   bd768:	2003d760 	.word	0x2003d760

000bd76c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bd76c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bd76e:	4c09      	ldr	r4, [pc, #36]	; (bd794 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bd770:	7823      	ldrb	r3, [r4, #0]
   bd772:	f3bf 8f5b 	dmb	ish
   bd776:	07db      	lsls	r3, r3, #31
   bd778:	d409      	bmi.n	bd78e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bd77a:	4620      	mov	r0, r4
   bd77c:	f7f6 fc9e 	bl	b40bc <__cxa_guard_acquire>
   bd780:	b128      	cbz	r0, bd78e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bd782:	4620      	mov	r0, r4
   bd784:	f7f6 fc9f 	bl	b40c6 <__cxa_guard_release>
   bd788:	4803      	ldr	r0, [pc, #12]	; (bd798 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bd78a:	f002 fd57 	bl	c023c <atexit>
    return &factory;
}
   bd78e:	4803      	ldr	r0, [pc, #12]	; (bd79c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bd790:	bd10      	pop	{r4, pc}
   bd792:	bf00      	nop
   bd794:	2003e650 	.word	0x2003e650
   bd798:	000bd5a3 	.word	0x000bd5a3
   bd79c:	2003d764 	.word	0x2003d764

000bd7a0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bd7a0:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bd7a2:	2500      	movs	r5, #0
   bd7a4:	4604      	mov	r4, r0
   bd7a6:	e9c0 5500 	strd	r5, r5, [r0]
   bd7aa:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bd7ae:	6085      	str	r5, [r0, #8]
   bd7b0:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bd7b2:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bd7b6:	f7fe fa3d 	bl	bbc34 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bd7ba:	f7ff ffbd 	bl	bd738 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bd7be:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bd7c0:	f7ff ffd4 	bl	bd76c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bd7c4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bd7c6:	6220      	str	r0, [r4, #32]
}
   bd7c8:	4620      	mov	r0, r4
   bd7ca:	bd38      	pop	{r3, r4, r5, pc}

000bd7cc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bd7cc:	b510      	push	{r4, lr}
    static LogManager mgr;
   bd7ce:	4c0a      	ldr	r4, [pc, #40]	; (bd7f8 <_ZN5spark10LogManager8instanceEv+0x2c>)
   bd7d0:	7823      	ldrb	r3, [r4, #0]
   bd7d2:	f3bf 8f5b 	dmb	ish
   bd7d6:	07db      	lsls	r3, r3, #31
   bd7d8:	d40c      	bmi.n	bd7f4 <_ZN5spark10LogManager8instanceEv+0x28>
   bd7da:	4620      	mov	r0, r4
   bd7dc:	f7f6 fc6e 	bl	b40bc <__cxa_guard_acquire>
   bd7e0:	b140      	cbz	r0, bd7f4 <_ZN5spark10LogManager8instanceEv+0x28>
   bd7e2:	4806      	ldr	r0, [pc, #24]	; (bd7fc <_ZN5spark10LogManager8instanceEv+0x30>)
   bd7e4:	f7ff ffdc 	bl	bd7a0 <_ZN5spark10LogManagerC1Ev>
   bd7e8:	4620      	mov	r0, r4
   bd7ea:	f7f6 fc6c 	bl	b40c6 <__cxa_guard_release>
   bd7ee:	4804      	ldr	r0, [pc, #16]	; (bd800 <_ZN5spark10LogManager8instanceEv+0x34>)
   bd7f0:	f002 fd24 	bl	c023c <atexit>
    return &mgr;
}
   bd7f4:	4801      	ldr	r0, [pc, #4]	; (bd7fc <_ZN5spark10LogManager8instanceEv+0x30>)
   bd7f6:	bd10      	pop	{r4, pc}
   bd7f8:	2003e648 	.word	0x2003e648
   bd7fc:	2003e658 	.word	0x2003e658
   bd800:	000bdcb9 	.word	0x000bdcb9

000bd804 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bd804:	4a02      	ldr	r2, [pc, #8]	; (bd810 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bd806:	4903      	ldr	r1, [pc, #12]	; (bd814 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bd808:	4803      	ldr	r0, [pc, #12]	; (bd818 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bd80a:	2300      	movs	r3, #0
   bd80c:	f7fe bcaa 	b.w	bc164 <log_set_callbacks>
   bd810:	000bda9d 	.word	0x000bda9d
   bd814:	000bda29 	.word	0x000bda29
   bd818:	000bd9a9 	.word	0x000bd9a9

000bd81c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bd81c:	2300      	movs	r3, #0
   bd81e:	461a      	mov	r2, r3
   bd820:	4619      	mov	r1, r3
   bd822:	4618      	mov	r0, r3
   bd824:	f7fe bc9e 	b.w	bc164 <log_set_callbacks>

000bd828 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bd828:	b570      	push	{r4, r5, r6, lr}
   bd82a:	b08a      	sub	sp, #40	; 0x28
   bd82c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bd82e:	4601      	mov	r1, r0
   bd830:	a804      	add	r0, sp, #16
   bd832:	f7fb fbec 	bl	b900e <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bd836:	4e14      	ldr	r6, [pc, #80]	; (bd888 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bd838:	a804      	add	r0, sp, #16
   bd83a:	f7ff fd9b 	bl	bd374 <_ZN5spark18JSONObjectIterator4nextEv>
   bd83e:	b1e8      	cbz	r0, bd87c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bd840:	a904      	add	r1, sp, #16
   bd842:	4668      	mov	r0, sp
   bd844:	f7fb fbf4 	bl	b9030 <_ZNK5spark18JSONObjectIterator4nameEv>
   bd848:	9802      	ldr	r0, [sp, #8]
   bd84a:	4631      	mov	r1, r6
   bd84c:	f7ff fea2 	bl	bd594 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bd850:	4604      	mov	r4, r0
   bd852:	b110      	cbz	r0, bd85a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bd854:	1e2c      	subs	r4, r5, #0
   bd856:	bf18      	it	ne
   bd858:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   bd85a:	a801      	add	r0, sp, #4
   bd85c:	f7fa f807 	bl	b786e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bd860:	2c00      	cmp	r4, #0
   bd862:	d0e9      	beq.n	bd838 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bd864:	a904      	add	r1, sp, #16
   bd866:	4668      	mov	r0, sp
   bd868:	f7fb fbf3 	bl	b9052 <_ZNK5spark18JSONObjectIterator5valueEv>
   bd86c:	4668      	mov	r0, sp
   bd86e:	f7ff fd24 	bl	bd2ba <_ZNK5spark9JSONValue5toIntEv>
   bd872:	6028      	str	r0, [r5, #0]
   bd874:	a801      	add	r0, sp, #4
   bd876:	f7f9 fffa 	bl	b786e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bd87a:	e7dd      	b.n	bd838 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bd87c:	a805      	add	r0, sp, #20
   bd87e:	f7f9 fff6 	bl	b786e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bd882:	b00a      	add	sp, #40	; 0x28
   bd884:	bd70      	pop	{r4, r5, r6, pc}
   bd886:	bf00      	nop
   bd888:	000c20a2 	.word	0x000c20a2

000bd88c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bd88c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd88e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bd890:	4620      	mov	r0, r4
   bd892:	4913      	ldr	r1, [pc, #76]	; (bd8e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bd894:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bd896:	f002 fdb0 	bl	c03fa <strcmp>
   bd89a:	b950      	cbnz	r0, bd8b2 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bd89c:	f001 fdbc 	bl	bf418 <_Z16_fetch_usbserialv>
   bd8a0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bd8a4:	f001 fda6 	bl	bf3f4 <_ZN9USBSerial5beginEl>
}
   bd8a8:	b003      	add	sp, #12
   bd8aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bd8ae:	f001 bdb3 	b.w	bf418 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bd8b2:	490c      	ldr	r1, [pc, #48]	; (bd8e4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bd8b4:	4620      	mov	r0, r4
   bd8b6:	f002 fda0 	bl	c03fa <strcmp>
   bd8ba:	b978      	cbnz	r0, bd8dc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bd8bc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bd8c0:	a901      	add	r1, sp, #4
   bd8c2:	4628      	mov	r0, r5
        int baud = 9600;
   bd8c4:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bd8c6:	f7ff ffaf 	bl	bd828 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bd8ca:	f001 ffab 	bl	bf824 <_Z22__fetch_global_Serial1v>
   bd8ce:	9901      	ldr	r1, [sp, #4]
   bd8d0:	f001 fd38 	bl	bf344 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bd8d4:	f001 ffa6 	bl	bf824 <_Z22__fetch_global_Serial1v>
}
   bd8d8:	b003      	add	sp, #12
   bd8da:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bd8dc:	2000      	movs	r0, #0
   bd8de:	e7fb      	b.n	bd8d8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bd8e0:	000c20a7 	.word	0x000c20a7
   bd8e4:	000c20ae 	.word	0x000c20ae

000bd8e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd8e8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bd8ea:	e9d0 5300 	ldrd	r5, r3, [r0]
   bd8ee:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd8f0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bd8f2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bd8f6:	42ae      	cmp	r6, r5
   bd8f8:	d005      	beq.n	bd906 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bd8fa:	f105 0008 	add.w	r0, r5, #8
   bd8fe:	f7ff fff3 	bl	bd8e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bd902:	3514      	adds	r5, #20
   bd904:	e7f7      	b.n	bd8f6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bd906:	6820      	ldr	r0, [r4, #0]
   bd908:	f7fe fd80 	bl	bc40c <free>
}
   bd90c:	4620      	mov	r0, r4
   bd90e:	bd70      	pop	{r4, r5, r6, pc}

000bd910 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bd910:	b510      	push	{r4, lr}
   bd912:	4604      	mov	r4, r0
   bd914:	300c      	adds	r0, #12
   bd916:	f7ff ffe7 	bl	bd8e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bd91a:	4620      	mov	r0, r4
   bd91c:	f7fe fe19 	bl	bc552 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bd920:	4620      	mov	r0, r4
   bd922:	bd10      	pop	{r4, pc}

000bd924 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bd924:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bd926:	4b04      	ldr	r3, [pc, #16]	; (bd938 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bd928:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bd92a:	f840 3b04 	str.w	r3, [r0], #4
   bd92e:	f7ff ffef 	bl	bd910 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bd932:	4620      	mov	r0, r4
   bd934:	bd10      	pop	{r4, pc}
   bd936:	bf00      	nop
   bd938:	000c1448 	.word	0x000c1448

000bd93c <_ZN5spark16StreamLogHandlerD0Ev>:
   bd93c:	b510      	push	{r4, lr}
   bd93e:	4604      	mov	r4, r0
   bd940:	f7ff fff0 	bl	bd924 <_ZN5spark16StreamLogHandlerD1Ev>
   bd944:	4620      	mov	r0, r4
   bd946:	2124      	movs	r1, #36	; 0x24
   bd948:	f7f6 fba9 	bl	b409e <_ZdlPvj>
   bd94c:	4620      	mov	r0, r4
   bd94e:	bd10      	pop	{r4, pc}

000bd950 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bd950:	b510      	push	{r4, lr}
   bd952:	4b03      	ldr	r3, [pc, #12]	; (bd960 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bd954:	6003      	str	r3, [r0, #0]
   bd956:	4604      	mov	r4, r0
   bd958:	f7ff ffe4 	bl	bd924 <_ZN5spark16StreamLogHandlerD1Ev>
   bd95c:	4620      	mov	r0, r4
   bd95e:	bd10      	pop	{r4, pc}
   bd960:	000c2148 	.word	0x000c2148

000bd964 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bd964:	b510      	push	{r4, lr}
   bd966:	4604      	mov	r4, r0
   bd968:	f7ff fff2 	bl	bd950 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bd96c:	4620      	mov	r0, r4
   bd96e:	2124      	movs	r1, #36	; 0x24
   bd970:	f7f6 fb95 	bl	b409e <_ZdlPvj>
   bd974:	4620      	mov	r0, r4
   bd976:	bd10      	pop	{r4, pc}

000bd978 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bd978:	2200      	movs	r2, #0
   bd97a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bd97e:	b510      	push	{r4, lr}
        capacity_(0) {
   bd980:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bd982:	680c      	ldr	r4, [r1, #0]
   bd984:	6004      	str	r4, [r0, #0]
   bd986:	684c      	ldr	r4, [r1, #4]
   bd988:	6044      	str	r4, [r0, #4]
   bd98a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bd98c:	600a      	str	r2, [r1, #0]
   bd98e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bd990:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bd992:	608a      	str	r2, [r1, #8]
}
   bd994:	bd10      	pop	{r4, pc}

000bd996 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   bd996:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bd998:	6803      	ldr	r3, [r0, #0]
   bd99a:	4604      	mov	r4, r0
   bd99c:	6818      	ldr	r0, [r3, #0]
   bd99e:	f7fe f961 	bl	bbc64 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bd9a2:	4620      	mov	r0, r4
   bd9a4:	bd10      	pop	{r4, pc}
	...

000bd9a8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bd9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd9ac:	b087      	sub	sp, #28
   bd9ae:	4680      	mov	r8, r0
   bd9b0:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bd9b2:	4b1c      	ldr	r3, [pc, #112]	; (bda24 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bd9b4:	685b      	ldr	r3, [r3, #4]
   bd9b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bd9ba:	4689      	mov	r9, r1
   bd9bc:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bd9be:	b96b      	cbnz	r3, bd9dc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bd9c0:	f7ff ff04 	bl	bd7cc <_ZN5spark10LogManager8instanceEv>
   bd9c4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bd9c6:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bd9ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd9cc:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bd9ce:	f7ff fddf 	bl	bd590 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bd9d2:	7b23      	ldrb	r3, [r4, #12]
   bd9d4:	b12b      	cbz	r3, bd9e2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bd9d6:	a805      	add	r0, sp, #20
   bd9d8:	f7ff ffdd 	bl	bd996 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bd9dc:	b007      	add	sp, #28
   bd9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bd9e2:	2301      	movs	r3, #1
   bd9e4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bd9e6:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bd9ea:	fa5f f989 	uxtb.w	r9, r9
   bd9ee:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bd9f2:	45aa      	cmp	sl, r5
   bd9f4:	d012      	beq.n	bda1c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bd9f6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bd9fa:	4631      	mov	r1, r6
   bd9fc:	1d38      	adds	r0, r7, #4
   bd9fe:	f7ff fe71 	bl	bd6e4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bda02:	4581      	cmp	r9, r0
   bda04:	d3f5      	bcc.n	bd9f2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bda06:	683b      	ldr	r3, [r7, #0]
   bda08:	9a03      	ldr	r2, [sp, #12]
   bda0a:	9200      	str	r2, [sp, #0]
   bda0c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bda10:	464a      	mov	r2, r9
   bda12:	4633      	mov	r3, r6
   bda14:	4641      	mov	r1, r8
   bda16:	4638      	mov	r0, r7
   bda18:	47d8      	blx	fp
   bda1a:	e7ea      	b.n	bd9f2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bda1c:	2300      	movs	r3, #0
   bda1e:	7323      	strb	r3, [r4, #12]
   bda20:	e7d9      	b.n	bd9d6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bda22:	bf00      	nop
   bda24:	e000ed00 	.word	0xe000ed00

000bda28 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bda28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bda2c:	469b      	mov	fp, r3
   bda2e:	4b1a      	ldr	r3, [pc, #104]	; (bda98 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bda30:	685b      	ldr	r3, [r3, #4]
   bda32:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bda36:	4680      	mov	r8, r0
   bda38:	4689      	mov	r9, r1
   bda3a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bda3c:	b96b      	cbnz	r3, bda5a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bda3e:	f7ff fec5 	bl	bd7cc <_ZN5spark10LogManager8instanceEv>
   bda42:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bda44:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bda48:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bda4a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bda4c:	f7ff fda0 	bl	bd590 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bda50:	7b23      	ldrb	r3, [r4, #12]
   bda52:	b12b      	cbz	r3, bda60 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bda54:	a801      	add	r0, sp, #4
   bda56:	f7ff ff9e 	bl	bd996 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bda5a:	b003      	add	sp, #12
   bda5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bda60:	2301      	movs	r3, #1
   bda62:	7323      	strb	r3, [r4, #12]
   bda64:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bda68:	b2f6      	uxtb	r6, r6
   bda6a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bda6e:	4555      	cmp	r5, sl
   bda70:	d00e      	beq.n	bda90 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bda72:	f855 7b04 	ldr.w	r7, [r5], #4
   bda76:	4659      	mov	r1, fp
   bda78:	1d38      	adds	r0, r7, #4
   bda7a:	f7ff fe33 	bl	bd6e4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bda7e:	4286      	cmp	r6, r0
   bda80:	d3f5      	bcc.n	bda6e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bda82:	683b      	ldr	r3, [r7, #0]
   bda84:	464a      	mov	r2, r9
   bda86:	68db      	ldr	r3, [r3, #12]
   bda88:	4641      	mov	r1, r8
   bda8a:	4638      	mov	r0, r7
   bda8c:	4798      	blx	r3
   bda8e:	e7ee      	b.n	bda6e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bda90:	2300      	movs	r3, #0
   bda92:	7323      	strb	r3, [r4, #12]
   bda94:	e7de      	b.n	bda54 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bda96:	bf00      	nop
   bda98:	e000ed00 	.word	0xe000ed00

000bda9c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bda9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bdaa0:	4b16      	ldr	r3, [pc, #88]	; (bdafc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bdaa2:	685b      	ldr	r3, [r3, #4]
   bdaa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bdaa8:	4605      	mov	r5, r0
   bdaaa:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bdaac:	bb1b      	cbnz	r3, bdaf6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bdaae:	f7ff fe8d 	bl	bd7cc <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bdab2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bdab6:	4604      	mov	r4, r0
   bdab8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bdaba:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bdabc:	f7ff fd68 	bl	bd590 <_ZN14RecursiveMutex4lockEv.isra.0>
   bdac0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bdac4:	2446      	movs	r4, #70	; 0x46
   bdac6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bdaca:	45b0      	cmp	r8, r6
   bdacc:	d109      	bne.n	bdae2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bdace:	a801      	add	r0, sp, #4
   bdad0:	f7ff ff61 	bl	bd996 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bdad4:	42a5      	cmp	r5, r4
   bdad6:	bfb4      	ite	lt
   bdad8:	2000      	movlt	r0, #0
   bdada:	2001      	movge	r0, #1
}
   bdadc:	b002      	add	sp, #8
   bdade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bdae2:	f856 0b04 	ldr.w	r0, [r6], #4
   bdae6:	4639      	mov	r1, r7
   bdae8:	3004      	adds	r0, #4
   bdaea:	f7ff fdfb 	bl	bd6e4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bdaee:	4284      	cmp	r4, r0
   bdaf0:	bfa8      	it	ge
   bdaf2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bdaf4:	e7e9      	b.n	bdaca <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bdaf6:	2000      	movs	r0, #0
   bdaf8:	e7f0      	b.n	bdadc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bdafa:	bf00      	nop
   bdafc:	e000ed00 	.word	0xe000ed00

000bdb00 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bdb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bdb02:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bdb06:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bdb08:	4604      	mov	r4, r0
   bdb0a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bdb0c:	db0d      	blt.n	bdb2a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bdb0e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bdb10:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bdb12:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bdb14:	dd04      	ble.n	bdb20 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bdb16:	00b9      	lsls	r1, r7, #2
   bdb18:	f7fe fc80 	bl	bc41c <realloc>
            if (!d) {
   bdb1c:	b918      	cbnz	r0, bdb26 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bdb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bdb20:	f7fe fc74 	bl	bc40c <free>
        T* d = nullptr;
   bdb24:	2000      	movs	r0, #0
        data_ = d;
   bdb26:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bdb28:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bdb2a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bdb2c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bdb2e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bdb32:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bdb34:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bdb38:	1d08      	adds	r0, r1, #4
   bdb3a:	f002 fbb9 	bl	c02b0 <memmove>
    new(p) T(std::move(value));
   bdb3e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bdb42:	6863      	ldr	r3, [r4, #4]
   bdb44:	3301      	adds	r3, #1
   bdb46:	6063      	str	r3, [r4, #4]
    return true;
   bdb48:	2001      	movs	r0, #1
   bdb4a:	e7e8      	b.n	bdb1e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bdb4c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bdb4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bdb4e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bdb52:	4604      	mov	r4, r0
   bdb54:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bdb56:	9301      	str	r3, [sp, #4]
   bdb58:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bdb5a:	f7ff fd19 	bl	bd590 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bdb5e:	e9d4 3200 	ldrd	r3, r2, [r4]
   bdb62:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bdb66:	4293      	cmp	r3, r2
   bdb68:	4619      	mov	r1, r3
   bdb6a:	d00b      	beq.n	bdb84 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bdb6c:	6809      	ldr	r1, [r1, #0]
   bdb6e:	42a9      	cmp	r1, r5
   bdb70:	f103 0304 	add.w	r3, r3, #4
   bdb74:	d1f7      	bne.n	bdb66 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bdb76:	a801      	add	r0, sp, #4
   bdb78:	f7ff ff0d 	bl	bd996 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bdb7c:	2500      	movs	r5, #0
}
   bdb7e:	4628      	mov	r0, r5
   bdb80:	b003      	add	sp, #12
   bdb82:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bdb84:	4629      	mov	r1, r5
   bdb86:	4620      	mov	r0, r4
   bdb88:	f7ff ffba 	bl	bdb00 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bdb8c:	4605      	mov	r5, r0
   bdb8e:	2800      	cmp	r0, #0
   bdb90:	d0f1      	beq.n	bdb76 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bdb92:	6863      	ldr	r3, [r4, #4]
   bdb94:	2b01      	cmp	r3, #1
   bdb96:	d101      	bne.n	bdb9c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bdb98:	f7ff fe34 	bl	bd804 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bdb9c:	a801      	add	r0, sp, #4
   bdb9e:	f7ff fefa 	bl	bd996 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bdba2:	e7ec      	b.n	bdb7e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bdba4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bdba4:	b570      	push	{r4, r5, r6, lr}
   bdba6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bdba8:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bdbac:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bdbae:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bdbb2:	4282      	cmp	r2, r0
   bdbb4:	d00f      	beq.n	bdbd6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bdbb6:	4601      	mov	r1, r0
            if (*p == value) {
   bdbb8:	681d      	ldr	r5, [r3, #0]
   bdbba:	f851 6b04 	ldr.w	r6, [r1], #4
   bdbbe:	42ae      	cmp	r6, r5
   bdbc0:	d107      	bne.n	bdbd2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bdbc2:	1a52      	subs	r2, r2, r1
   bdbc4:	f002 fb74 	bl	c02b0 <memmove>
    --size_;
   bdbc8:	6863      	ldr	r3, [r4, #4]
   bdbca:	3b01      	subs	r3, #1
   bdbcc:	6063      	str	r3, [r4, #4]
    return true;
   bdbce:	2001      	movs	r0, #1
}
   bdbd0:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bdbd2:	4608      	mov	r0, r1
   bdbd4:	e7ed      	b.n	bdbb2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bdbd6:	2000      	movs	r0, #0
   bdbd8:	e7fa      	b.n	bdbd0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bdbda <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bdbda:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bdbdc:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bdbe0:	4604      	mov	r4, r0
   bdbe2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bdbe4:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bdbe6:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bdbe8:	f7ff fcd2 	bl	bd590 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bdbec:	a901      	add	r1, sp, #4
   bdbee:	4620      	mov	r0, r4
   bdbf0:	f7ff ffd8 	bl	bdba4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bdbf4:	b118      	cbz	r0, bdbfe <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bdbf6:	6863      	ldr	r3, [r4, #4]
   bdbf8:	b90b      	cbnz	r3, bdbfe <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bdbfa:	f7ff fe0f 	bl	bd81c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bdbfe:	a803      	add	r0, sp, #12
   bdc00:	f7ff fec9 	bl	bd996 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bdc04:	b004      	add	sp, #16
   bdc06:	bd10      	pop	{r4, pc}

000bdc08 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bdc08:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bdc0a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bdc0e:	2318      	movs	r3, #24
   bdc10:	4604      	mov	r4, r0
   bdc12:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bdc16:	42ae      	cmp	r6, r5
   bdc18:	d015      	beq.n	bdc46 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bdc1a:	f105 0110 	add.w	r1, r5, #16
   bdc1e:	4620      	mov	r0, r4
   bdc20:	f7ff ffc0 	bl	bdba4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bdc24:	6863      	ldr	r3, [r4, #4]
   bdc26:	b90b      	cbnz	r3, bdc2c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bdc28:	f7ff fdf8 	bl	bd81c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bdc2c:	69e0      	ldr	r0, [r4, #28]
   bdc2e:	6929      	ldr	r1, [r5, #16]
   bdc30:	6803      	ldr	r3, [r0, #0]
   bdc32:	68db      	ldr	r3, [r3, #12]
   bdc34:	4798      	blx	r3
        if (h.stream) {
   bdc36:	6969      	ldr	r1, [r5, #20]
   bdc38:	b119      	cbz	r1, bdc42 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bdc3a:	6a20      	ldr	r0, [r4, #32]
   bdc3c:	6803      	ldr	r3, [r0, #0]
   bdc3e:	68db      	ldr	r3, [r3, #12]
   bdc40:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bdc42:	3518      	adds	r5, #24
   bdc44:	e7e7      	b.n	bdc16 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bdc46:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bdc4a:	2618      	movs	r6, #24
   bdc4c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bdc50:	42ae      	cmp	r6, r5
   bdc52:	d004      	beq.n	bdc5e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bdc54:	4628      	mov	r0, r5
   bdc56:	f000 ff45 	bl	beae4 <_ZN6StringD1Ev>
   bdc5a:	3518      	adds	r5, #24
   bdc5c:	e7f8      	b.n	bdc50 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bdc5e:	2300      	movs	r3, #0
   bdc60:	6163      	str	r3, [r4, #20]
}
   bdc62:	bd70      	pop	{r4, r5, r6, pc}

000bdc64 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bdc64:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bdc66:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bdc68:	f7ff fdd8 	bl	bd81c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bdc6c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bdc70:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bdc72:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bdc74:	f7ff fc8c 	bl	bd590 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bdc78:	4620      	mov	r0, r4
   bdc7a:	f7ff ffc5 	bl	bdc08 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bdc7e:	a801      	add	r0, sp, #4
   bdc80:	f7ff fe89 	bl	bd996 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bdc84:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bdc86:	b108      	cbz	r0, bdc8c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bdc88:	f7fd ffdc 	bl	bbc44 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bdc8c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bdc90:	2618      	movs	r6, #24
   bdc92:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bdc96:	42ae      	cmp	r6, r5
   bdc98:	d004      	beq.n	bdca4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bdc9a:	4628      	mov	r0, r5
   bdc9c:	f000 ff22 	bl	beae4 <_ZN6StringD1Ev>
   bdca0:	3518      	adds	r5, #24
   bdca2:	e7f8      	b.n	bdc96 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bdca4:	6920      	ldr	r0, [r4, #16]
   bdca6:	f7fe fbb1 	bl	bc40c <free>
   bdcaa:	6820      	ldr	r0, [r4, #0]
   bdcac:	f7fe fbae 	bl	bc40c <free>
}
   bdcb0:	4620      	mov	r0, r4
   bdcb2:	b002      	add	sp, #8
   bdcb4:	bd70      	pop	{r4, r5, r6, pc}
	...

000bdcb8 <__tcf_2>:
    static LogManager mgr;
   bdcb8:	4801      	ldr	r0, [pc, #4]	; (bdcc0 <__tcf_2+0x8>)
   bdcba:	f7ff bfd3 	b.w	bdc64 <_ZN5spark10LogManagerD1Ev>
   bdcbe:	bf00      	nop
   bdcc0:	2003e658 	.word	0x2003e658

000bdcc4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bdcc4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bdcc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdcc8:	4604      	mov	r4, r0
   bdcca:	460d      	mov	r5, r1
   bdccc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bdcce:	d915      	bls.n	bdcfc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bdcd0:	4290      	cmp	r0, r2
   bdcd2:	d214      	bcs.n	bdcfe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bdcd4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bdcd8:	1a75      	subs	r5, r6, r1
   bdcda:	f1a1 0714 	sub.w	r7, r1, #20
   bdcde:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bdce0:	42b7      	cmp	r7, r6
   bdce2:	d01a      	beq.n	bdd1a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bdce4:	b11c      	cbz	r4, bdcee <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bdce6:	4631      	mov	r1, r6
   bdce8:	4620      	mov	r0, r4
   bdcea:	f7ff fcab 	bl	bd644 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bdcee:	f106 0008 	add.w	r0, r6, #8
   bdcf2:	f7ff fdf9 	bl	bd8e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   bdcf6:	3e14      	subs	r6, #20
   bdcf8:	3c14      	subs	r4, #20
   bdcfa:	e7f1      	b.n	bdce0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   bdcfc:	d00d      	beq.n	bdd1a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   bdcfe:	42b5      	cmp	r5, r6
   bdd00:	d00b      	beq.n	bdd1a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   bdd02:	b11c      	cbz	r4, bdd0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   bdd04:	4629      	mov	r1, r5
   bdd06:	4620      	mov	r0, r4
   bdd08:	f7ff fc9c 	bl	bd644 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bdd0c:	f105 0008 	add.w	r0, r5, #8
   bdd10:	f7ff fdea 	bl	bd8e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bdd14:	3514      	adds	r5, #20
   bdd16:	3414      	adds	r4, #20
   bdd18:	e7f1      	b.n	bdcfe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bdd1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bdd1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bdd1c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bdd1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdd20:	4604      	mov	r4, r0
   bdd22:	460d      	mov	r5, r1
   bdd24:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bdd26:	d914      	bls.n	bdd52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bdd28:	4290      	cmp	r0, r2
   bdd2a:	d213      	bcs.n	bdd54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   bdd2c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   bdd30:	1a75      	subs	r5, r6, r1
   bdd32:	f1a1 0710 	sub.w	r7, r1, #16
   bdd36:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bdd38:	42b7      	cmp	r7, r6
   bdd3a:	d018      	beq.n	bdd6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bdd3c:	b11c      	cbz	r4, bdd46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bdd3e:	4631      	mov	r1, r6
   bdd40:	4620      	mov	r0, r4
   bdd42:	f000 ff4b 	bl	bebdc <_ZN6StringC1EOS_>
                end->~T();
   bdd46:	4630      	mov	r0, r6
   bdd48:	f000 fecc 	bl	beae4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bdd4c:	3e10      	subs	r6, #16
   bdd4e:	3c10      	subs	r4, #16
   bdd50:	e7f2      	b.n	bdd38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bdd52:	d00c      	beq.n	bdd6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bdd54:	42b5      	cmp	r5, r6
   bdd56:	d00a      	beq.n	bdd6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bdd58:	b11c      	cbz	r4, bdd62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bdd5a:	4629      	mov	r1, r5
   bdd5c:	4620      	mov	r0, r4
   bdd5e:	f000 ff3d 	bl	bebdc <_ZN6StringC1EOS_>
                p->~T();
   bdd62:	4628      	mov	r0, r5
   bdd64:	f000 febe 	bl	beae4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bdd68:	3510      	adds	r5, #16
   bdd6a:	3410      	adds	r4, #16
   bdd6c:	e7f2      	b.n	bdd54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bdd6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bdd70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bdd70:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bdd72:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bdd74:	4605      	mov	r5, r0
        if (n > 0) {
   bdd76:	dd11      	ble.n	bdd9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bdd78:	0130      	lsls	r0, r6, #4
   bdd7a:	f7fe fb3f 	bl	bc3fc <malloc>
            if (!d) {
   bdd7e:	4604      	mov	r4, r0
   bdd80:	b158      	cbz	r0, bdd9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bdd82:	e9d5 1200 	ldrd	r1, r2, [r5]
   bdd86:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bdd8a:	f7ff ffc7 	bl	bdd1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bdd8e:	6828      	ldr	r0, [r5, #0]
   bdd90:	f7fe fb3c 	bl	bc40c <free>
        data_ = d;
   bdd94:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bdd96:	60ae      	str	r6, [r5, #8]
        return true;
   bdd98:	2001      	movs	r0, #1
    }
   bdd9a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bdd9c:	2400      	movs	r4, #0
   bdd9e:	e7f6      	b.n	bdd8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bdda0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bdda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdda4:	4690      	mov	r8, r2
   bdda6:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bdda8:	2300      	movs	r3, #0
   bddaa:	9103      	str	r1, [sp, #12]
    return size_;
   bddac:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bddb0:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bddb2:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bddb4:	4299      	cmp	r1, r3
        capacity_(0) {
   bddb6:	e9c0 3300 	strd	r3, r3, [r0]
   bddba:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bddbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bddc2:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bddc6:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bddc8:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bddca:	dc23      	bgt.n	bde14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bddcc:	e9d8 5700 	ldrd	r5, r7, [r8]
   bddd0:	2314      	movs	r3, #20
   bddd2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bddd6:	42af      	cmp	r7, r5
   bddd8:	d03b      	beq.n	bde52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bddda:	4629      	mov	r1, r5
   bdddc:	a80b      	add	r0, sp, #44	; 0x2c
   bddde:	f000 fefd 	bl	bebdc <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bdde2:	a90b      	add	r1, sp, #44	; 0x2c
   bdde4:	a80f      	add	r0, sp, #60	; 0x3c
   bdde6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bdde8:	f000 fef8 	bl	bebdc <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bddec:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bddf0:	4299      	cmp	r1, r3
   bddf2:	da1b      	bge.n	bde2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bddf4:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bddf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bddf8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bddfc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bde00:	4631      	mov	r1, r6
   bde02:	f106 0010 	add.w	r0, r6, #16
   bde06:	f7ff ff89 	bl	bdd1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bde0a:	b9ee      	cbnz	r6, bde48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bde0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bde0e:	3301      	adds	r3, #1
   bde10:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bde12:	e011      	b.n	bde38 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bde14:	a808      	add	r0, sp, #32
   bde16:	f7ff ffab 	bl	bdd70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bde1a:	2800      	cmp	r0, #0
   bde1c:	d1d6      	bne.n	bddcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bde1e:	a808      	add	r0, sp, #32
   bde20:	f7fe fb97 	bl	bc552 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bde24:	4620      	mov	r0, r4
   bde26:	b015      	add	sp, #84	; 0x54
   bde28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bde2c:	3101      	adds	r1, #1
   bde2e:	a808      	add	r0, sp, #32
   bde30:	f7ff ff9e 	bl	bdd70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bde34:	2800      	cmp	r0, #0
   bde36:	d1dd      	bne.n	bddf4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   bde38:	a80f      	add	r0, sp, #60	; 0x3c
   bde3a:	f000 fe53 	bl	beae4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   bde3e:	a80b      	add	r0, sp, #44	; 0x2c
   bde40:	f000 fe50 	bl	beae4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   bde44:	3514      	adds	r5, #20
   bde46:	e7c6      	b.n	bddd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   bde48:	a90f      	add	r1, sp, #60	; 0x3c
   bde4a:	4630      	mov	r0, r6
   bde4c:	f000 fec6 	bl	bebdc <_ZN6StringC1EOS_>
   bde50:	e7dc      	b.n	bde0c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   bde52:	2600      	movs	r6, #0
   bde54:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   bde58:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   bde5a:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   bde5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   bde62:	429e      	cmp	r6, r3
   bde64:	da7c      	bge.n	bdf60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   bde66:	0133      	lsls	r3, r6, #4
   bde68:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   bde6a:	9306      	str	r3, [sp, #24]
        if (!category) {
   bde6c:	b90b      	cbnz	r3, bde72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   bde6e:	3601      	adds	r6, #1
   bde70:	e7f5      	b.n	bde5e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   bde72:	2300      	movs	r3, #0
   bde74:	9307      	str	r3, [sp, #28]
   bde76:	fb09 f306 	mul.w	r3, r9, r6
   bde7a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   bde7c:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   bde7e:	a907      	add	r1, sp, #28
   bde80:	a806      	add	r0, sp, #24
   bde82:	f7ff fb5e 	bl	bd542 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bde86:	4682      	mov	sl, r0
   bde88:	2800      	cmp	r0, #0
   bde8a:	d0f0      	beq.n	bde6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   bde8c:	f04f 0300 	mov.w	r3, #0
   bde90:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bde94:	4601      	mov	r1, r0
   bde96:	9a07      	ldr	r2, [sp, #28]
   bde98:	f10d 0317 	add.w	r3, sp, #23
   bde9c:	4628      	mov	r0, r5
   bde9e:	f7ff fbe5 	bl	bd66c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bdea2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bdea6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bdea8:	2f00      	cmp	r7, #0
   bdeaa:	d14a      	bne.n	bdf42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   bdeac:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   bdeb0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   bdeb4:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   bdeb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bdebc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   bdec0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   bdec4:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bdec6:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   bdeca:	4293      	cmp	r3, r2
   bdecc:	db17      	blt.n	bdefe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   bdece:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   bded2:	f1ba 0f00 	cmp.w	sl, #0
   bded6:	dd30      	ble.n	bdf3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   bded8:	fb09 f00a 	mul.w	r0, r9, sl
   bdedc:	f7fe fa8e 	bl	bc3fc <malloc>
            if (!d) {
   bdee0:	4683      	mov	fp, r0
   bdee2:	b360      	cbz	r0, bdf3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   bdee4:	e9d5 1200 	ldrd	r1, r2, [r5]
   bdee8:	fb09 1202 	mla	r2, r9, r2, r1
   bdeec:	f7ff feea 	bl	bdcc4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   bdef0:	6828      	ldr	r0, [r5, #0]
   bdef2:	f7fe fa8b 	bl	bc40c <free>
        data_ = d;
   bdef6:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   bdefa:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   bdefe:	682b      	ldr	r3, [r5, #0]
   bdf00:	9a01      	ldr	r2, [sp, #4]
   bdf02:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   bdf06:	686a      	ldr	r2, [r5, #4]
   bdf08:	4651      	mov	r1, sl
   bdf0a:	fb09 3202 	mla	r2, r9, r2, r3
   bdf0e:	f10a 0014 	add.w	r0, sl, #20
   bdf12:	f7ff fed7 	bl	bdcc4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   bdf16:	f1ba 0f00 	cmp.w	sl, #0
   bdf1a:	d003      	beq.n	bdf24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   bdf1c:	a90f      	add	r1, sp, #60	; 0x3c
   bdf1e:	4650      	mov	r0, sl
   bdf20:	f7ff fb90 	bl	bd644 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   bdf24:	686b      	ldr	r3, [r5, #4]
   bdf26:	3301      	adds	r3, #1
   bdf28:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   bdf2a:	a811      	add	r0, sp, #68	; 0x44
   bdf2c:	f7ff fcdc 	bl	bd8e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bdf30:	b13f      	cbz	r7, bdf42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   bdf32:	a80b      	add	r0, sp, #44	; 0x2c
   bdf34:	f7ff fcd8 	bl	bd8e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bdf38:	e771      	b.n	bde1e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   bdf3a:	46bb      	mov	fp, r7
   bdf3c:	e7d8      	b.n	bdef0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bdf3e:	2701      	movs	r7, #1
   bdf40:	e7f3      	b.n	bdf2a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   bdf42:	9b01      	ldr	r3, [sp, #4]
   bdf44:	682d      	ldr	r5, [r5, #0]
   bdf46:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   bdf4a:	9b06      	ldr	r3, [sp, #24]
   bdf4c:	781b      	ldrb	r3, [r3, #0]
   bdf4e:	b92b      	cbnz	r3, bdf5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   bdf50:	f8d8 3000 	ldr.w	r3, [r8]
   bdf54:	9a02      	ldr	r2, [sp, #8]
   bdf56:	4413      	add	r3, r2
   bdf58:	7c1b      	ldrb	r3, [r3, #16]
   bdf5a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bdf5c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bdf5e:	e78e      	b.n	bde7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdf60:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bdf62:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdf64:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bdf66:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdf68:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bdf6a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bdf6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bdf6e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdf70:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bdf72:	60a2      	str	r2, [r4, #8]
   bdf74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bdf76:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdf78:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bdf7a:	60e2      	str	r2, [r4, #12]
   bdf7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bdf7e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdf80:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bdf82:	6122      	str	r2, [r4, #16]
   bdf84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bdf86:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bdf88:	9b03      	ldr	r3, [sp, #12]
   bdf8a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bdf8c:	6162      	str	r2, [r4, #20]
   bdf8e:	7623      	strb	r3, [r4, #24]
   bdf90:	e7cf      	b.n	bdf32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bdf94 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bdf94:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdf96:	4604      	mov	r4, r0
   bdf98:	b087      	sub	sp, #28
   bdf9a:	460d      	mov	r5, r1
        filter_(level, filters) {
   bdf9c:	4626      	mov	r6, r4
        stream_(&stream) {
   bdf9e:	4619      	mov	r1, r3
   bdfa0:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bdfa2:	4617      	mov	r7, r2
        stream_(&stream) {
   bdfa4:	f7f8 fb75 	bl	b6692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bdfa8:	4b0b      	ldr	r3, [pc, #44]	; (bdfd8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bdfaa:	f846 3b04 	str.w	r3, [r6], #4
   bdfae:	4669      	mov	r1, sp
   bdfb0:	a803      	add	r0, sp, #12
   bdfb2:	f7f8 fb6e 	bl	b6692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bdfb6:	aa03      	add	r2, sp, #12
   bdfb8:	4639      	mov	r1, r7
   bdfba:	4630      	mov	r0, r6
   bdfbc:	f7ff fef0 	bl	bdda0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bdfc0:	a803      	add	r0, sp, #12
   bdfc2:	f7f8 fb25 	bl	b6610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bdfc6:	4668      	mov	r0, sp
   bdfc8:	f7f8 fb22 	bl	b6610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bdfcc:	4b03      	ldr	r3, [pc, #12]	; (bdfdc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   bdfce:	6023      	str	r3, [r4, #0]
}
   bdfd0:	4620      	mov	r0, r4
        stream_(&stream) {
   bdfd2:	6225      	str	r5, [r4, #32]
}
   bdfd4:	b007      	add	sp, #28
   bdfd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bdfd8:	000c1448 	.word	0x000c1448
   bdfdc:	000c2130 	.word	0x000c2130

000bdfe0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   bdfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdfe2:	460f      	mov	r7, r1
   bdfe4:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bdfe6:	491d      	ldr	r1, [pc, #116]	; (be05c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   bdfe8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bdfea:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   bdfec:	4616      	mov	r6, r2
   bdfee:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bdff0:	f002 fa03 	bl	c03fa <strcmp>
   bdff4:	b9c0      	cbnz	r0, be028 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   bdff6:	b1a4      	cbz	r4, be022 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   bdff8:	4629      	mov	r1, r5
   bdffa:	a801      	add	r0, sp, #4
   bdffc:	f7ff fcbc 	bl	bd978 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   be000:	4917      	ldr	r1, [pc, #92]	; (be060 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   be002:	2024      	movs	r0, #36	; 0x24
   be004:	f001 fc32 	bl	bf86c <_ZnwjRKSt9nothrow_t>
   be008:	4605      	mov	r5, r0
   be00a:	b130      	cbz	r0, be01a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   be00c:	ab01      	add	r3, sp, #4
   be00e:	4632      	mov	r2, r6
   be010:	4621      	mov	r1, r4
   be012:	f7ff ffbf 	bl	bdf94 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   be016:	4b13      	ldr	r3, [pc, #76]	; (be064 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   be018:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   be01a:	a801      	add	r0, sp, #4
   be01c:	f7f8 faf8 	bl	b6610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   be020:	462c      	mov	r4, r5
}
   be022:	4620      	mov	r0, r4
   be024:	b005      	add	sp, #20
   be026:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   be028:	490f      	ldr	r1, [pc, #60]	; (be068 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   be02a:	4638      	mov	r0, r7
   be02c:	f002 f9e5 	bl	c03fa <strcmp>
   be030:	b990      	cbnz	r0, be058 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   be032:	2c00      	cmp	r4, #0
   be034:	d0f5      	beq.n	be022 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   be036:	4629      	mov	r1, r5
   be038:	a801      	add	r0, sp, #4
   be03a:	f7ff fc9d 	bl	bd978 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   be03e:	4908      	ldr	r1, [pc, #32]	; (be060 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   be040:	2024      	movs	r0, #36	; 0x24
   be042:	f001 fc13 	bl	bf86c <_ZnwjRKSt9nothrow_t>
   be046:	4605      	mov	r5, r0
   be048:	2800      	cmp	r0, #0
   be04a:	d0e6      	beq.n	be01a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   be04c:	ab01      	add	r3, sp, #4
   be04e:	4632      	mov	r2, r6
   be050:	4621      	mov	r1, r4
   be052:	f7ff ff9f 	bl	bdf94 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   be056:	e7e0      	b.n	be01a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   be058:	2400      	movs	r4, #0
   be05a:	e7e2      	b.n	be022 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   be05c:	000c20b6 	.word	0x000c20b6
   be060:	000c2284 	.word	0x000c2284
   be064:	000c2148 	.word	0x000c2148
   be068:	000c20ba 	.word	0x000c20ba

000be06c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   be06c:	4b01      	ldr	r3, [pc, #4]	; (be074 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   be06e:	4a02      	ldr	r2, [pc, #8]	; (be078 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   be070:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   be072:	4770      	bx	lr
   be074:	2003e654 	.word	0x2003e654
   be078:	000c20cb 	.word	0x000c20cb

000be07c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   be07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be080:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   be082:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   be086:	4604      	mov	r4, r0
   be088:	460e      	mov	r6, r1
   be08a:	4617      	mov	r7, r2
   be08c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   be08e:	f001 f9c3 	bl	bf418 <_Z16_fetch_usbserialv>
   be092:	4581      	cmp	r9, r0
   be094:	d04c      	beq.n	be130 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   be096:	792b      	ldrb	r3, [r5, #4]
   be098:	0719      	lsls	r1, r3, #28
   be09a:	d504      	bpl.n	be0a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   be09c:	696a      	ldr	r2, [r5, #20]
   be09e:	4954      	ldr	r1, [pc, #336]	; (be1f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   be0a0:	4620      	mov	r0, r4
   be0a2:	f7ff fac0 	bl	bd626 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   be0a6:	f1b8 0f00 	cmp.w	r8, #0
   be0aa:	d00d      	beq.n	be0c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   be0ac:	215b      	movs	r1, #91	; 0x5b
   be0ae:	4620      	mov	r0, r4
   be0b0:	f7ff faad 	bl	bd60e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   be0b4:	4641      	mov	r1, r8
   be0b6:	4620      	mov	r0, r4
   be0b8:	f7ff fa9a 	bl	bd5f0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   be0bc:	6823      	ldr	r3, [r4, #0]
   be0be:	494d      	ldr	r1, [pc, #308]	; (be1f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   be0c0:	68db      	ldr	r3, [r3, #12]
   be0c2:	2202      	movs	r2, #2
   be0c4:	4620      	mov	r0, r4
   be0c6:	4798      	blx	r3
    if (attr.has_file) {
   be0c8:	792b      	ldrb	r3, [r5, #4]
   be0ca:	07da      	lsls	r2, r3, #31
   be0cc:	d523      	bpl.n	be116 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   be0ce:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   be0d2:	212f      	movs	r1, #47	; 0x2f
   be0d4:	4640      	mov	r0, r8
   be0d6:	f002 f9ef 	bl	c04b8 <strrchr>
    if (s1) {
   be0da:	b108      	cbz	r0, be0e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   be0dc:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   be0e0:	4641      	mov	r1, r8
   be0e2:	4620      	mov	r0, r4
   be0e4:	f7ff fa84 	bl	bd5f0 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   be0e8:	792b      	ldrb	r3, [r5, #4]
   be0ea:	079b      	lsls	r3, r3, #30
   be0ec:	d508      	bpl.n	be100 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   be0ee:	213a      	movs	r1, #58	; 0x3a
   be0f0:	4620      	mov	r0, r4
   be0f2:	f7ff fa8c 	bl	bd60e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   be0f6:	68ea      	ldr	r2, [r5, #12]
   be0f8:	493f      	ldr	r1, [pc, #252]	; (be1f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   be0fa:	4620      	mov	r0, r4
   be0fc:	f7ff fa93 	bl	bd626 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   be100:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   be102:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   be104:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   be108:	68db      	ldr	r3, [r3, #12]
   be10a:	bf14      	ite	ne
   be10c:	493b      	ldrne	r1, [pc, #236]	; (be1fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   be10e:	493c      	ldreq	r1, [pc, #240]	; (be200 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   be110:	2202      	movs	r2, #2
            write(": ", 2);
   be112:	4620      	mov	r0, r4
   be114:	4798      	blx	r3
    if (attr.has_function) {
   be116:	792b      	ldrb	r3, [r5, #4]
   be118:	0758      	lsls	r0, r3, #29
   be11a:	d51d      	bpl.n	be158 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   be11c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   be11e:	460b      	mov	r3, r1
   be120:	461a      	mov	r2, r3
    for (; *s; ++s) {
   be122:	f813 0b01 	ldrb.w	r0, [r3], #1
   be126:	b160      	cbz	r0, be142 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   be128:	2820      	cmp	r0, #32
   be12a:	d108      	bne.n	be13e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   be12c:	4619      	mov	r1, r3
   be12e:	e7f7      	b.n	be120 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   be130:	4834      	ldr	r0, [pc, #208]	; (be204 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   be132:	f000 f966 	bl	be402 <_ZN5spark12NetworkClass9listeningEv>
   be136:	2800      	cmp	r0, #0
   be138:	d0ad      	beq.n	be096 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   be13a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   be13e:	2828      	cmp	r0, #40	; 0x28
   be140:	d1ee      	bne.n	be120 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   be142:	6823      	ldr	r3, [r4, #0]
   be144:	1a52      	subs	r2, r2, r1
   be146:	68db      	ldr	r3, [r3, #12]
   be148:	4620      	mov	r0, r4
   be14a:	4798      	blx	r3
        write("(): ", 4);
   be14c:	6823      	ldr	r3, [r4, #0]
   be14e:	492e      	ldr	r1, [pc, #184]	; (be208 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   be150:	68db      	ldr	r3, [r3, #12]
   be152:	2204      	movs	r2, #4
   be154:	4620      	mov	r0, r4
   be156:	4798      	blx	r3
    return log_level_name(level, nullptr);
   be158:	2100      	movs	r1, #0
   be15a:	4638      	mov	r0, r7
   be15c:	f7fd fffa 	bl	bc154 <log_level_name>
   be160:	4601      	mov	r1, r0
    write(s);
   be162:	4620      	mov	r0, r4
   be164:	f7ff fa44 	bl	bd5f0 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   be168:	6823      	ldr	r3, [r4, #0]
   be16a:	4925      	ldr	r1, [pc, #148]	; (be200 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   be16c:	68db      	ldr	r3, [r3, #12]
   be16e:	2202      	movs	r2, #2
   be170:	4620      	mov	r0, r4
   be172:	4798      	blx	r3
    if (msg) {
   be174:	b11e      	cbz	r6, be17e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   be176:	4631      	mov	r1, r6
   be178:	4620      	mov	r0, r4
   be17a:	f7ff fa39 	bl	bd5f0 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   be17e:	792b      	ldrb	r3, [r5, #4]
   be180:	f013 0f30 	tst.w	r3, #48	; 0x30
   be184:	d02c      	beq.n	be1e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   be186:	6823      	ldr	r3, [r4, #0]
   be188:	4920      	ldr	r1, [pc, #128]	; (be20c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   be18a:	68db      	ldr	r3, [r3, #12]
   be18c:	2202      	movs	r2, #2
   be18e:	4620      	mov	r0, r4
   be190:	4798      	blx	r3
        if (attr.has_code) {
   be192:	792b      	ldrb	r3, [r5, #4]
   be194:	06d9      	lsls	r1, r3, #27
   be196:	d50a      	bpl.n	be1ae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   be198:	6823      	ldr	r3, [r4, #0]
   be19a:	491d      	ldr	r1, [pc, #116]	; (be210 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   be19c:	68db      	ldr	r3, [r3, #12]
   be19e:	2207      	movs	r2, #7
   be1a0:	4620      	mov	r0, r4
   be1a2:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   be1a4:	69aa      	ldr	r2, [r5, #24]
   be1a6:	491b      	ldr	r1, [pc, #108]	; (be214 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   be1a8:	4620      	mov	r0, r4
   be1aa:	f7ff fa3c 	bl	bd626 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   be1ae:	792b      	ldrb	r3, [r5, #4]
   be1b0:	069a      	lsls	r2, r3, #26
   be1b2:	d511      	bpl.n	be1d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   be1b4:	06db      	lsls	r3, r3, #27
   be1b6:	d505      	bpl.n	be1c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   be1b8:	6823      	ldr	r3, [r4, #0]
   be1ba:	4910      	ldr	r1, [pc, #64]	; (be1fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   be1bc:	68db      	ldr	r3, [r3, #12]
   be1be:	2202      	movs	r2, #2
   be1c0:	4620      	mov	r0, r4
   be1c2:	4798      	blx	r3
            write("details = ", 10);
   be1c4:	6823      	ldr	r3, [r4, #0]
   be1c6:	4914      	ldr	r1, [pc, #80]	; (be218 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   be1c8:	68db      	ldr	r3, [r3, #12]
   be1ca:	4620      	mov	r0, r4
   be1cc:	220a      	movs	r2, #10
   be1ce:	4798      	blx	r3
            write(attr.details);
   be1d0:	69e9      	ldr	r1, [r5, #28]
   be1d2:	4620      	mov	r0, r4
   be1d4:	f7ff fa0c 	bl	bd5f0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   be1d8:	215d      	movs	r1, #93	; 0x5d
   be1da:	4620      	mov	r0, r4
   be1dc:	f7ff fa17 	bl	bd60e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   be1e0:	6823      	ldr	r3, [r4, #0]
   be1e2:	490e      	ldr	r1, [pc, #56]	; (be21c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   be1e4:	68db      	ldr	r3, [r3, #12]
   be1e6:	4620      	mov	r0, r4
   be1e8:	2202      	movs	r2, #2
}
   be1ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   be1ee:	4718      	bx	r3
   be1f0:	000c20cf 	.word	0x000c20cf
   be1f4:	000c20d6 	.word	0x000c20d6
   be1f8:	000c0cb2 	.word	0x000c0cb2
   be1fc:	000c20d9 	.word	0x000c20d9
   be200:	000c20de 	.word	0x000c20de
   be204:	2003e680 	.word	0x2003e680
   be208:	000c20dc 	.word	0x000c20dc
   be20c:	000c20e1 	.word	0x000c20e1
   be210:	000c20e4 	.word	0x000c20e4
   be214:	000c20ec 	.word	0x000c20ec
   be218:	000c20ef 	.word	0x000c20ef
   be21c:	000c20fa 	.word	0x000c20fa

000be220 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   be220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   be224:	b085      	sub	sp, #20
    return stream_;
   be226:	f8d0 9020 	ldr.w	r9, [r0, #32]
   be22a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   be22c:	4605      	mov	r5, r0
   be22e:	460f      	mov	r7, r1
   be230:	4690      	mov	r8, r2
   be232:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   be234:	f001 f8f0 	bl	bf418 <_Z16_fetch_usbserialv>
   be238:	4581      	cmp	r9, r0
   be23a:	d105      	bne.n	be248 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   be23c:	4849      	ldr	r0, [pc, #292]	; (be364 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   be23e:	f000 f8e0 	bl	be402 <_ZN5spark12NetworkClass9listeningEv>
   be242:	2800      	cmp	r0, #0
   be244:	f040 808a 	bne.w	be35c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   be248:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   be24a:	4a47      	ldr	r2, [pc, #284]	; (be368 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   be24c:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   be24e:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   be252:	a801      	add	r0, sp, #4
        strm_(stream) {
   be254:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   be256:	f88d 9008 	strb.w	r9, [sp, #8]
   be25a:	f7ff f8b4 	bl	bd3c6 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   be25e:	4649      	mov	r1, r9
   be260:	4640      	mov	r0, r8
   be262:	f7fd ff77 	bl	bc154 <log_level_name>
    json.name("l", 1).value(s);
   be266:	4941      	ldr	r1, [pc, #260]	; (be36c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   be268:	4680      	mov	r8, r0
   be26a:	2201      	movs	r2, #1
   be26c:	a801      	add	r0, sp, #4
   be26e:	f7ff f939 	bl	bd4e4 <_ZN5spark10JSONWriter4nameEPKcj>
   be272:	4641      	mov	r1, r8
   be274:	f7ff f9ae 	bl	bd5d4 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   be278:	b13f      	cbz	r7, be28a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   be27a:	493d      	ldr	r1, [pc, #244]	; (be370 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   be27c:	2201      	movs	r2, #1
   be27e:	a801      	add	r0, sp, #4
   be280:	f7ff f930 	bl	bd4e4 <_ZN5spark10JSONWriter4nameEPKcj>
   be284:	4639      	mov	r1, r7
   be286:	f7ff f9a5 	bl	bd5d4 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   be28a:	b13e      	cbz	r6, be29c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   be28c:	4939      	ldr	r1, [pc, #228]	; (be374 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   be28e:	2201      	movs	r2, #1
   be290:	a801      	add	r0, sp, #4
   be292:	f7ff f927 	bl	bd4e4 <_ZN5spark10JSONWriter4nameEPKcj>
   be296:	4631      	mov	r1, r6
   be298:	f7ff f99c 	bl	bd5d4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   be29c:	7923      	ldrb	r3, [r4, #4]
   be29e:	07df      	lsls	r7, r3, #31
   be2a0:	d50e      	bpl.n	be2c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   be2a2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   be2a4:	212f      	movs	r1, #47	; 0x2f
   be2a6:	4630      	mov	r0, r6
   be2a8:	f002 f906 	bl	c04b8 <strrchr>
    if (s1) {
   be2ac:	b100      	cbz	r0, be2b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   be2ae:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   be2b0:	4931      	ldr	r1, [pc, #196]	; (be378 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   be2b2:	2201      	movs	r2, #1
   be2b4:	a801      	add	r0, sp, #4
   be2b6:	f7ff f915 	bl	bd4e4 <_ZN5spark10JSONWriter4nameEPKcj>
   be2ba:	4631      	mov	r1, r6
   be2bc:	f7ff f98a 	bl	bd5d4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   be2c0:	7923      	ldrb	r3, [r4, #4]
   be2c2:	079e      	lsls	r6, r3, #30
   be2c4:	d507      	bpl.n	be2d6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   be2c6:	492d      	ldr	r1, [pc, #180]	; (be37c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   be2c8:	2202      	movs	r2, #2
   be2ca:	a801      	add	r0, sp, #4
   be2cc:	f7ff f90a 	bl	bd4e4 <_ZN5spark10JSONWriter4nameEPKcj>
   be2d0:	68e1      	ldr	r1, [r4, #12]
   be2d2:	f7ff f885 	bl	bd3e0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   be2d6:	7923      	ldrb	r3, [r4, #4]
   be2d8:	0758      	lsls	r0, r3, #29
   be2da:	d514      	bpl.n	be306 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   be2dc:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   be2de:	4633      	mov	r3, r6
   be2e0:	461f      	mov	r7, r3
    for (; *s; ++s) {
   be2e2:	f813 2b01 	ldrb.w	r2, [r3], #1
   be2e6:	b12a      	cbz	r2, be2f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   be2e8:	2a20      	cmp	r2, #32
   be2ea:	d101      	bne.n	be2f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   be2ec:	461e      	mov	r6, r3
   be2ee:	e7f7      	b.n	be2e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   be2f0:	2a28      	cmp	r2, #40	; 0x28
   be2f2:	d1f5      	bne.n	be2e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   be2f4:	4922      	ldr	r1, [pc, #136]	; (be380 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   be2f6:	2202      	movs	r2, #2
   be2f8:	a801      	add	r0, sp, #4
   be2fa:	f7ff f8f3 	bl	bd4e4 <_ZN5spark10JSONWriter4nameEPKcj>
   be2fe:	1bba      	subs	r2, r7, r6
   be300:	4631      	mov	r1, r6
   be302:	f7ff f8ff 	bl	bd504 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   be306:	7923      	ldrb	r3, [r4, #4]
   be308:	0719      	lsls	r1, r3, #28
   be30a:	d507      	bpl.n	be31c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   be30c:	491d      	ldr	r1, [pc, #116]	; (be384 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   be30e:	2201      	movs	r2, #1
   be310:	a801      	add	r0, sp, #4
   be312:	f7ff f8e7 	bl	bd4e4 <_ZN5spark10JSONWriter4nameEPKcj>
   be316:	6961      	ldr	r1, [r4, #20]
   be318:	f7ff f874 	bl	bd404 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   be31c:	7923      	ldrb	r3, [r4, #4]
   be31e:	06da      	lsls	r2, r3, #27
   be320:	d508      	bpl.n	be334 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   be322:	2204      	movs	r2, #4
   be324:	4918      	ldr	r1, [pc, #96]	; (be388 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   be326:	eb0d 0002 	add.w	r0, sp, r2
   be32a:	f7ff f8db 	bl	bd4e4 <_ZN5spark10JSONWriter4nameEPKcj>
   be32e:	69a1      	ldr	r1, [r4, #24]
   be330:	f7ff f856 	bl	bd3e0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   be334:	7923      	ldrb	r3, [r4, #4]
   be336:	069b      	lsls	r3, r3, #26
   be338:	d507      	bpl.n	be34a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   be33a:	4914      	ldr	r1, [pc, #80]	; (be38c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   be33c:	2206      	movs	r2, #6
   be33e:	a801      	add	r0, sp, #4
   be340:	f7ff f8d0 	bl	bd4e4 <_ZN5spark10JSONWriter4nameEPKcj>
   be344:	69e1      	ldr	r1, [r4, #28]
   be346:	f7ff f945 	bl	bd5d4 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   be34a:	a801      	add	r0, sp, #4
   be34c:	f7ff f825 	bl	bd39a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   be350:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   be352:	490f      	ldr	r1, [pc, #60]	; (be390 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   be354:	6803      	ldr	r3, [r0, #0]
   be356:	2202      	movs	r2, #2
   be358:	68db      	ldr	r3, [r3, #12]
   be35a:	4798      	blx	r3
}
   be35c:	b005      	add	sp, #20
   be35e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   be362:	bf00      	nop
   be364:	2003e680 	.word	0x2003e680
   be368:	000c2118 	.word	0x000c2118
   be36c:	000c20ac 	.word	0x000c20ac
   be370:	000c19fc 	.word	0x000c19fc
   be374:	000c23a5 	.word	0x000c23a5
   be378:	000c0c62 	.word	0x000c0c62
   be37c:	000c20fd 	.word	0x000c20fd
   be380:	000c2100 	.word	0x000c2100
   be384:	000c1322 	.word	0x000c1322
   be388:	000c2103 	.word	0x000c2103
   be38c:	000c2108 	.word	0x000c2108
   be390:	000c20fa 	.word	0x000c20fa

000be394 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   be394:	2300      	movs	r3, #0
   be396:	6840      	ldr	r0, [r0, #4]
   be398:	461a      	mov	r2, r3
   be39a:	f7fd bfcf 	b.w	bc33c <network_connect>

000be39e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   be39e:	6840      	ldr	r0, [r0, #4]
   be3a0:	2200      	movs	r2, #0
   be3a2:	2102      	movs	r1, #2
   be3a4:	f7fd bfda 	b.w	bc35c <network_disconnect>

000be3a8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   be3a8:	2200      	movs	r2, #0
   be3aa:	6840      	ldr	r0, [r0, #4]
   be3ac:	4611      	mov	r1, r2
   be3ae:	f7fd bfcd 	b.w	bc34c <network_connecting>

000be3b2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   be3b2:	2200      	movs	r2, #0
   be3b4:	6840      	ldr	r0, [r0, #4]
   be3b6:	4611      	mov	r1, r2
   be3b8:	f7fd bfd8 	b.w	bc36c <network_ready>

000be3bc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   be3bc:	2300      	movs	r3, #0
   be3be:	6840      	ldr	r0, [r0, #4]
   be3c0:	461a      	mov	r2, r3
   be3c2:	4619      	mov	r1, r3
   be3c4:	f7fd bfda 	b.w	bc37c <network_on>

000be3c8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   be3c8:	2300      	movs	r3, #0
   be3ca:	6840      	ldr	r0, [r0, #4]
   be3cc:	461a      	mov	r2, r3
   be3ce:	4619      	mov	r1, r3
   be3d0:	f7fd bfdc 	b.w	bc38c <network_off>

000be3d4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   be3d4:	6840      	ldr	r0, [r0, #4]
   be3d6:	2100      	movs	r1, #0
   be3d8:	f7fe b800 	b.w	bc3dc <network_is_on>

000be3dc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   be3dc:	6840      	ldr	r0, [r0, #4]
   be3de:	2100      	movs	r1, #0
   be3e0:	f7fe b804 	b.w	bc3ec <network_is_off>

000be3e4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   be3e4:	6840      	ldr	r0, [r0, #4]
   be3e6:	2200      	movs	r2, #0
   be3e8:	f081 0101 	eor.w	r1, r1, #1
   be3ec:	f7fd bfd6 	b.w	bc39c <network_listen>

000be3f0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   be3f0:	6840      	ldr	r0, [r0, #4]
   be3f2:	2200      	movs	r2, #0
   be3f4:	f7fd bfe2 	b.w	bc3bc <network_set_listen_timeout>

000be3f8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   be3f8:	2200      	movs	r2, #0
   be3fa:	6840      	ldr	r0, [r0, #4]
   be3fc:	4611      	mov	r1, r2
   be3fe:	f7fd bfe5 	b.w	bc3cc <network_get_listen_timeout>

000be402 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   be402:	2200      	movs	r2, #0
   be404:	6840      	ldr	r0, [r0, #4]
   be406:	4611      	mov	r1, r2
   be408:	f7fd bfd0 	b.w	bc3ac <network_listening>

000be40c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   be40c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   be410:	b095      	sub	sp, #84	; 0x54
   be412:	4614      	mov	r4, r2
   be414:	460d      	mov	r5, r1
   be416:	4607      	mov	r7, r0
    IPAddress addr;
   be418:	f7fe fe6e 	bl	bd0f8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   be41c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   be41e:	221c      	movs	r2, #28
   be420:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   be422:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   be424:	f001 ff5e 	bl	c02e4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   be428:	2340      	movs	r3, #64	; 0x40
   be42a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   be42c:	4620      	mov	r0, r4
   be42e:	466b      	mov	r3, sp
   be430:	aa0c      	add	r2, sp, #48	; 0x30
   be432:	2100      	movs	r1, #0
   be434:	f7fd fd2e 	bl	bbe94 <netdb_getaddrinfo>
    if (!r) {
   be438:	4604      	mov	r4, r0
   be43a:	2800      	cmp	r0, #0
   be43c:	d14b      	bne.n	be4d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   be43e:	4602      	mov	r2, r0
   be440:	2101      	movs	r1, #1
   be442:	6868      	ldr	r0, [r5, #4]
   be444:	f7fd ff92 	bl	bc36c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   be448:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   be44a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   be44c:	4622      	mov	r2, r4
   be44e:	6868      	ldr	r0, [r5, #4]
   be450:	f7fd ff8c 	bl	bc36c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   be454:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   be456:	4681      	mov	r9, r0
        bool ok = false;
   be458:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   be45a:	2e00      	cmp	r6, #0
   be45c:	d03b      	beq.n	be4d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   be45e:	2900      	cmp	r1, #0
   be460:	d139      	bne.n	be4d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   be462:	6873      	ldr	r3, [r6, #4]
   be464:	2b02      	cmp	r3, #2
   be466:	d003      	beq.n	be470 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   be468:	2b0a      	cmp	r3, #10
   be46a:	d011      	beq.n	be490 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   be46c:	69f6      	ldr	r6, [r6, #28]
   be46e:	e7f4      	b.n	be45a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   be470:	f1b8 0f00 	cmp.w	r8, #0
   be474:	d0fa      	beq.n	be46c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   be476:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   be478:	a806      	add	r0, sp, #24
   be47a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   be47c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   be47e:	f7fe fe69 	bl	bd154 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   be482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be484:	1d3c      	adds	r4, r7, #4
   be486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   be488:	682b      	ldr	r3, [r5, #0]
   be48a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   be48c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   be48e:	e7ed      	b.n	be46c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   be490:	f1b9 0f00 	cmp.w	r9, #0
   be494:	d0ea      	beq.n	be46c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   be496:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   be498:	2210      	movs	r2, #16
   be49a:	a801      	add	r0, sp, #4
   be49c:	f001 ff22 	bl	c02e4 <memset>
                    a.v = 6;
   be4a0:	2306      	movs	r3, #6
   be4a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   be4a6:	ad01      	add	r5, sp, #4
   be4a8:	f104 0308 	add.w	r3, r4, #8
   be4ac:	3418      	adds	r4, #24
   be4ae:	6818      	ldr	r0, [r3, #0]
   be4b0:	6859      	ldr	r1, [r3, #4]
   be4b2:	462a      	mov	r2, r5
   be4b4:	c203      	stmia	r2!, {r0, r1}
   be4b6:	3308      	adds	r3, #8
   be4b8:	42a3      	cmp	r3, r4
   be4ba:	4615      	mov	r5, r2
   be4bc:	d1f7      	bne.n	be4ae <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   be4be:	a901      	add	r1, sp, #4
   be4c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   be4c2:	ad07      	add	r5, sp, #28
   be4c4:	f7fe fe26 	bl	bd114 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   be4c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be4ca:	1d3c      	adds	r4, r7, #4
   be4cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   be4ce:	682b      	ldr	r3, [r5, #0]
   be4d0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   be4d2:	4649      	mov	r1, r9
   be4d4:	e7ca      	b.n	be46c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   be4d6:	9800      	ldr	r0, [sp, #0]
   be4d8:	f7fd fcd4 	bl	bbe84 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   be4dc:	4638      	mov	r0, r7
   be4de:	b015      	add	sp, #84	; 0x54
   be4e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000be4e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   be4e4:	4b02      	ldr	r3, [pc, #8]	; (be4f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   be4e6:	4a03      	ldr	r2, [pc, #12]	; (be4f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   be4e8:	601a      	str	r2, [r3, #0]
   be4ea:	2200      	movs	r2, #0
   be4ec:	605a      	str	r2, [r3, #4]

} // spark
   be4ee:	4770      	bx	lr
   be4f0:	2003e680 	.word	0x2003e680
   be4f4:	000c2190 	.word	0x000c2190

000be4f8 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   be4f8:	b508      	push	{r3, lr}
            return &Wire1;
   be4fa:	f001 f953 	bl	bf7a4 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   be4fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   be502:	f7fe bd67 	b.w	bcfd4 <_ZN7TwoWire4lockEv>

000be506 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   be506:	b510      	push	{r4, lr}
   be508:	4604      	mov	r4, r0
    lock_(_lock)
   be50a:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   be50c:	b109      	cbz	r1, be512 <_ZN4PMICC1Eb+0xc>
        lock();
   be50e:	f7ff fff3 	bl	be4f8 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   be512:	4620      	mov	r0, r4
   be514:	bd10      	pop	{r4, pc}

000be516 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   be516:	b508      	push	{r3, lr}
            return &Wire1;
   be518:	f001 f944 	bl	bf7a4 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   be51c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   be520:	f7fe bd61 	b.w	bcfe6 <_ZN7TwoWire6unlockEv>

000be524 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   be524:	b510      	push	{r4, lr}
    if (lock_) {
   be526:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   be528:	4604      	mov	r4, r0
    if (lock_) {
   be52a:	b10b      	cbz	r3, be530 <_ZN4PMICD1Ev+0xc>
        unlock();
   be52c:	f7ff fff3 	bl	be516 <_ZN4PMIC6unlockEv>
}
   be530:	4620      	mov	r0, r4
   be532:	bd10      	pop	{r4, pc}

000be534 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   be534:	b510      	push	{r4, lr}
   be536:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   be538:	6800      	ldr	r0, [r0, #0]
   be53a:	f7ff ffec 	bl	be516 <_ZN4PMIC6unlockEv>
   be53e:	4620      	mov	r0, r4
   be540:	bd10      	pop	{r4, pc}

000be542 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   be542:	b530      	push	{r4, r5, lr}
   be544:	b087      	sub	sp, #28
   be546:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be548:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   be54a:	f7ff ffd5 	bl	be4f8 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   be54e:	226b      	movs	r2, #107	; 0x6b
   be550:	2300      	movs	r3, #0
   be552:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   be556:	2401      	movs	r4, #1
   be558:	230a      	movs	r3, #10
   be55a:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   be55e:	f001 f921 	bl	bf7a4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   be562:	a902      	add	r1, sp, #8
   be564:	f7fe fd1a 	bl	bcf9c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   be568:	f001 f91c 	bl	bf7a4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   be56c:	6803      	ldr	r3, [r0, #0]
   be56e:	4629      	mov	r1, r5
   be570:	689b      	ldr	r3, [r3, #8]
   be572:	4798      	blx	r3
            return &Wire1;
   be574:	f001 f916 	bl	bf7a4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   be578:	4621      	mov	r1, r4
   be57a:	f7fe fd27 	bl	bcfcc <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   be57e:	9403      	str	r4, [sp, #12]
            return &Wire1;
   be580:	f001 f910 	bl	bf7a4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   be584:	a902      	add	r1, sp, #8
   be586:	f7fe fcd9 	bl	bcf3c <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   be58a:	f001 f90b 	bl	bf7a4 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   be58e:	6803      	ldr	r3, [r0, #0]
   be590:	695b      	ldr	r3, [r3, #20]
   be592:	4798      	blx	r3
   be594:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   be596:	a801      	add	r0, sp, #4
   be598:	f7ff ffcc 	bl	be534 <_ZNSt10lock_guardI4PMICED1Ev>
}
   be59c:	b2e0      	uxtb	r0, r4
   be59e:	b007      	add	sp, #28
   be5a0:	bd30      	pop	{r4, r5, pc}

000be5a2 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   be5a2:	b570      	push	{r4, r5, r6, lr}
   be5a4:	b086      	sub	sp, #24
   be5a6:	460d      	mov	r5, r1
   be5a8:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be5aa:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   be5ac:	f7ff ffa4 	bl	be4f8 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   be5b0:	226b      	movs	r2, #107	; 0x6b
   be5b2:	2300      	movs	r3, #0
   be5b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   be5b8:	2601      	movs	r6, #1
   be5ba:	230a      	movs	r3, #10
   be5bc:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   be5c0:	f001 f8f0 	bl	bf7a4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   be5c4:	a902      	add	r1, sp, #8
   be5c6:	f7fe fce9 	bl	bcf9c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   be5ca:	f001 f8eb 	bl	bf7a4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   be5ce:	6803      	ldr	r3, [r0, #0]
   be5d0:	4629      	mov	r1, r5
   be5d2:	689b      	ldr	r3, [r3, #8]
   be5d4:	4798      	blx	r3
            return &Wire1;
   be5d6:	f001 f8e5 	bl	bf7a4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   be5da:	6803      	ldr	r3, [r0, #0]
   be5dc:	4621      	mov	r1, r4
   be5de:	689b      	ldr	r3, [r3, #8]
   be5e0:	4798      	blx	r3
            return &Wire1;
   be5e2:	f001 f8df 	bl	bf7a4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   be5e6:	4631      	mov	r1, r6
   be5e8:	f7fe fcf0 	bl	bcfcc <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   be5ec:	a801      	add	r0, sp, #4
   be5ee:	f7ff ffa1 	bl	be534 <_ZNSt10lock_guardI4PMICED1Ev>
}
   be5f2:	b006      	add	sp, #24
   be5f4:	bd70      	pop	{r4, r5, r6, pc}

000be5f6 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   be5f6:	b513      	push	{r0, r1, r4, lr}
   be5f8:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be5fa:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   be5fc:	f7ff ff7c 	bl	be4f8 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   be600:	2101      	movs	r1, #1
   be602:	4620      	mov	r0, r4
   be604:	f7ff ff9d 	bl	be542 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   be608:	f000 0330 	and.w	r3, r0, #48	; 0x30
   be60c:	2b10      	cmp	r3, #16
   be60e:	d007      	beq.n	be620 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   be610:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   be614:	f042 0210 	orr.w	r2, r2, #16
   be618:	2101      	movs	r1, #1
   be61a:	4620      	mov	r0, r4
   be61c:	f7ff ffc1 	bl	be5a2 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   be620:	a801      	add	r0, sp, #4
   be622:	f7ff ff87 	bl	be534 <_ZNSt10lock_guardI4PMICED1Ev>
}
   be626:	2001      	movs	r0, #1
   be628:	b002      	add	sp, #8
   be62a:	bd10      	pop	{r4, pc}

000be62c <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   be62c:	b513      	push	{r0, r1, r4, lr}
   be62e:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be630:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   be632:	f7ff ff61 	bl	be4f8 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   be636:	2101      	movs	r1, #1
   be638:	4620      	mov	r0, r4
   be63a:	f7ff ff82 	bl	be542 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   be63e:	f010 0f30 	tst.w	r0, #48	; 0x30
   be642:	d005      	beq.n	be650 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   be644:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   be648:	2101      	movs	r1, #1
   be64a:	4620      	mov	r0, r4
   be64c:	f7ff ffa9 	bl	be5a2 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   be650:	a801      	add	r0, sp, #4
   be652:	f7ff ff6f 	bl	be534 <_ZNSt10lock_guardI4PMICED1Ev>
}
   be656:	2001      	movs	r0, #1
   be658:	b002      	add	sp, #8
   be65a:	bd10      	pop	{r4, pc}

000be65c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   be65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be65e:	4606      	mov	r6, r0
   be660:	460d      	mov	r5, r1
  size_t n = 0;
   be662:	188f      	adds	r7, r1, r2
   be664:	2400      	movs	r4, #0
  while (size--) {
   be666:	42bd      	cmp	r5, r7
   be668:	d00c      	beq.n	be684 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   be66a:	6833      	ldr	r3, [r6, #0]
   be66c:	f815 1b01 	ldrb.w	r1, [r5], #1
   be670:	689b      	ldr	r3, [r3, #8]
   be672:	4630      	mov	r0, r6
   be674:	4798      	blx	r3
     if (chunk>=0)
   be676:	1e03      	subs	r3, r0, #0
   be678:	db01      	blt.n	be67e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   be67a:	441c      	add	r4, r3
  while (size--) {
   be67c:	e7f3      	b.n	be666 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   be67e:	2c00      	cmp	r4, #0
   be680:	bf08      	it	eq
   be682:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   be684:	4620      	mov	r0, r4
   be686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be688 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   be688:	b513      	push	{r0, r1, r4, lr}
   be68a:	4604      	mov	r4, r0
    }
   be68c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   be68e:	b159      	cbz	r1, be6a8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   be690:	9101      	str	r1, [sp, #4]
   be692:	f001 fee2 	bl	c045a <strlen>
   be696:	6823      	ldr	r3, [r4, #0]
   be698:	9901      	ldr	r1, [sp, #4]
   be69a:	68db      	ldr	r3, [r3, #12]
   be69c:	4602      	mov	r2, r0
   be69e:	4620      	mov	r0, r4
    }
   be6a0:	b002      	add	sp, #8
   be6a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   be6a6:	4718      	bx	r3
    }
   be6a8:	b002      	add	sp, #8
   be6aa:	bd10      	pop	{r4, pc}

000be6ac <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   be6ac:	b508      	push	{r3, lr}
  return write(str);
   be6ae:	f7ff ffeb 	bl	be688 <_ZN5Print5writeEPKc>
}
   be6b2:	bd08      	pop	{r3, pc}

000be6b4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   be6b4:	6803      	ldr	r3, [r0, #0]
   be6b6:	689b      	ldr	r3, [r3, #8]
   be6b8:	4718      	bx	r3

000be6ba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   be6ba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   be6bc:	210d      	movs	r1, #13
{
   be6be:	4605      	mov	r5, r0
  size_t n = print('\r');
   be6c0:	f7ff fff8 	bl	be6b4 <_ZN5Print5printEc>
  n += print('\n');
   be6c4:	210a      	movs	r1, #10
  size_t n = print('\r');
   be6c6:	4604      	mov	r4, r0
  n += print('\n');
   be6c8:	4628      	mov	r0, r5
   be6ca:	f7ff fff3 	bl	be6b4 <_ZN5Print5printEc>
  return n;
}
   be6ce:	4420      	add	r0, r4
   be6d0:	bd38      	pop	{r3, r4, r5, pc}

000be6d2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   be6d2:	b530      	push	{r4, r5, lr}
   be6d4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   be6d6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   be6d8:	2a01      	cmp	r2, #1
  *str = '\0';
   be6da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   be6de:	bf98      	it	ls
   be6e0:	220a      	movls	r2, #10
   be6e2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   be6e4:	460d      	mov	r5, r1
   be6e6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   be6ea:	fb01 5312 	mls	r3, r1, r2, r5
   be6ee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   be6f2:	2b09      	cmp	r3, #9
   be6f4:	bf94      	ite	ls
   be6f6:	3330      	addls	r3, #48	; 0x30
   be6f8:	3337      	addhi	r3, #55	; 0x37
   be6fa:	b2db      	uxtb	r3, r3
  } while(n);
   be6fc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   be6fe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   be702:	d9ef      	bls.n	be6e4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   be704:	4621      	mov	r1, r4
   be706:	f7ff ffbf 	bl	be688 <_ZN5Print5writeEPKc>
}
   be70a:	b00b      	add	sp, #44	; 0x2c
   be70c:	bd30      	pop	{r4, r5, pc}
	...

000be710 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   be710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be714:	ec55 4b10 	vmov	r4, r5, d0
   be718:	4606      	mov	r6, r0
   be71a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   be71c:	ee10 2a10 	vmov	r2, s0
   be720:	ee10 0a10 	vmov	r0, s0
   be724:	462b      	mov	r3, r5
   be726:	4629      	mov	r1, r5
   be728:	f001 fd04 	bl	c0134 <__aeabi_dcmpun>
   be72c:	b140      	cbz	r0, be740 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   be72e:	4953      	ldr	r1, [pc, #332]	; (be87c <_ZN5Print10printFloatEdh+0x16c>)
   be730:	4630      	mov	r0, r6
   be732:	f7ff ffa9 	bl	be688 <_ZN5Print5writeEPKc>
   be736:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   be738:	4650      	mov	r0, sl
   be73a:	b003      	add	sp, #12
   be73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   be740:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   be744:	4b4e      	ldr	r3, [pc, #312]	; (be880 <_ZN5Print10printFloatEdh+0x170>)
   be746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   be74a:	4620      	mov	r0, r4
   be74c:	4649      	mov	r1, r9
   be74e:	f001 fcf1 	bl	c0134 <__aeabi_dcmpun>
   be752:	b948      	cbnz	r0, be768 <_ZN5Print10printFloatEdh+0x58>
   be754:	4b4a      	ldr	r3, [pc, #296]	; (be880 <_ZN5Print10printFloatEdh+0x170>)
   be756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   be75a:	4620      	mov	r0, r4
   be75c:	4649      	mov	r1, r9
   be75e:	f001 fccb 	bl	c00f8 <__aeabi_dcmple>
   be762:	b908      	cbnz	r0, be768 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   be764:	4947      	ldr	r1, [pc, #284]	; (be884 <_ZN5Print10printFloatEdh+0x174>)
   be766:	e7e3      	b.n	be730 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   be768:	4b47      	ldr	r3, [pc, #284]	; (be888 <_ZN5Print10printFloatEdh+0x178>)
   be76a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   be76e:	4620      	mov	r0, r4
   be770:	4629      	mov	r1, r5
   be772:	f001 fcd5 	bl	c0120 <__aeabi_dcmpgt>
   be776:	b108      	cbz	r0, be77c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   be778:	4944      	ldr	r1, [pc, #272]	; (be88c <_ZN5Print10printFloatEdh+0x17c>)
   be77a:	e7d9      	b.n	be730 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   be77c:	4b44      	ldr	r3, [pc, #272]	; (be890 <_ZN5Print10printFloatEdh+0x180>)
   be77e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   be782:	4620      	mov	r0, r4
   be784:	4629      	mov	r1, r5
   be786:	f001 fcad 	bl	c00e4 <__aeabi_dcmplt>
   be78a:	2800      	cmp	r0, #0
   be78c:	d1f4      	bne.n	be778 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   be78e:	2200      	movs	r2, #0
   be790:	2300      	movs	r3, #0
   be792:	4620      	mov	r0, r4
   be794:	4629      	mov	r1, r5
   be796:	f001 fca5 	bl	c00e4 <__aeabi_dcmplt>
   be79a:	b1d0      	cbz	r0, be7d2 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   be79c:	212d      	movs	r1, #45	; 0x2d
   be79e:	4630      	mov	r0, r6
   be7a0:	f7ff ff88 	bl	be6b4 <_ZN5Print5printEc>
     number = -number;
   be7a4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   be7a8:	4682      	mov	sl, r0
     number = -number;
   be7aa:	461d      	mov	r5, r3
  double rounding = 0.5;
   be7ac:	4939      	ldr	r1, [pc, #228]	; (be894 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   be7ae:	f8df 90ec 	ldr.w	r9, [pc, #236]	; be89c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   be7b2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   be7b6:	2000      	movs	r0, #0
    rounding /= 10.0;
   be7b8:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   be7bc:	fa5f f38b 	uxtb.w	r3, fp
   be7c0:	429f      	cmp	r7, r3
   be7c2:	d908      	bls.n	be7d6 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   be7c4:	4642      	mov	r2, r8
   be7c6:	464b      	mov	r3, r9
   be7c8:	f001 fb44 	bl	bfe54 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   be7cc:	f10b 0b01 	add.w	fp, fp, #1
   be7d0:	e7f4      	b.n	be7bc <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   be7d2:	4682      	mov	sl, r0
   be7d4:	e7ea      	b.n	be7ac <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   be7d6:	4622      	mov	r2, r4
   be7d8:	462b      	mov	r3, r5
   be7da:	f001 f85b 	bl	bf894 <__adddf3>
   be7de:	460d      	mov	r5, r1
   be7e0:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   be7e2:	f001 fce5 	bl	c01b0 <__aeabi_d2uiz>
   be7e6:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   be7e8:	f001 f990 	bl	bfb0c <__aeabi_ui2d>
   be7ec:	4602      	mov	r2, r0
   be7ee:	460b      	mov	r3, r1
   be7f0:	4620      	mov	r0, r4
   be7f2:	4629      	mov	r1, r5
   be7f4:	f001 f84c 	bl	bf890 <__aeabi_dsub>
        return printNumber(val, base) + t;
   be7f8:	220a      	movs	r2, #10
   be7fa:	4604      	mov	r4, r0
   be7fc:	460d      	mov	r5, r1
   be7fe:	4630      	mov	r0, r6
   be800:	4641      	mov	r1, r8
   be802:	f7ff ff66 	bl	be6d2 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   be806:	4482      	add	sl, r0
  if (digits > 0) {
   be808:	2f00      	cmp	r7, #0
   be80a:	d095      	beq.n	be738 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   be80c:	4922      	ldr	r1, [pc, #136]	; (be898 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   be80e:	f8df 908c 	ldr.w	r9, [pc, #140]	; be89c <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   be812:	4630      	mov	r0, r6
   be814:	f7ff ff38 	bl	be688 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   be818:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   be81c:	4482      	add	sl, r0
  while (digits-- > 0)
   be81e:	2f00      	cmp	r7, #0
   be820:	d08a      	beq.n	be738 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   be822:	4642      	mov	r2, r8
   be824:	464b      	mov	r3, r9
   be826:	4620      	mov	r0, r4
   be828:	4629      	mov	r1, r5
   be82a:	f001 f9e9 	bl	bfc00 <__aeabi_dmul>
   be82e:	4604      	mov	r4, r0
   be830:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   be832:	f001 fc95 	bl	c0160 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   be836:	f1b0 0b00 	subs.w	fp, r0, #0
   be83a:	da1c      	bge.n	be876 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   be83c:	212d      	movs	r1, #45	; 0x2d
   be83e:	4630      	mov	r0, r6
   be840:	f7ff ff38 	bl	be6b4 <_ZN5Print5printEc>
            val = -n;
   be844:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   be848:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   be84a:	220a      	movs	r2, #10
   be84c:	4630      	mov	r0, r6
   be84e:	9301      	str	r3, [sp, #4]
   be850:	f7ff ff3f 	bl	be6d2 <_ZN5Print11printNumberEmh>
   be854:	9b01      	ldr	r3, [sp, #4]
   be856:	4418      	add	r0, r3
    n += print(toPrint);
   be858:	4482      	add	sl, r0
    remainder -= toPrint;
   be85a:	4658      	mov	r0, fp
   be85c:	f001 f966 	bl	bfb2c <__aeabi_i2d>
   be860:	4602      	mov	r2, r0
   be862:	460b      	mov	r3, r1
   be864:	4620      	mov	r0, r4
   be866:	4629      	mov	r1, r5
   be868:	f001 f812 	bl	bf890 <__aeabi_dsub>
   be86c:	3f01      	subs	r7, #1
   be86e:	4604      	mov	r4, r0
   be870:	460d      	mov	r5, r1
   be872:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   be874:	e7d3      	b.n	be81e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   be876:	4659      	mov	r1, fp
        size_t t = 0;
   be878:	2300      	movs	r3, #0
   be87a:	e7e6      	b.n	be84a <_ZN5Print10printFloatEdh+0x13a>
   be87c:	000c21c4 	.word	0x000c21c4
   be880:	7fefffff 	.word	0x7fefffff
   be884:	000c21c8 	.word	0x000c21c8
   be888:	41efffff 	.word	0x41efffff
   be88c:	000c21cc 	.word	0x000c21cc
   be890:	c1efffff 	.word	0xc1efffff
   be894:	3fe00000 	.word	0x3fe00000
   be898:	000c2204 	.word	0x000c2204
   be89c:	40240000 	.word	0x40240000

000be8a0 <_ZN5Print5printEfi>:
{
   be8a0:	b538      	push	{r3, r4, r5, lr}
   be8a2:	4604      	mov	r4, r0
   be8a4:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   be8a8:	b2cd      	uxtb	r5, r1
   be8aa:	f001 f951 	bl	bfb50 <__aeabi_f2d>
   be8ae:	ec41 0b10 	vmov	d0, r0, r1
   be8b2:	4629      	mov	r1, r5
   be8b4:	4620      	mov	r0, r4
}
   be8b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   be8ba:	f7ff bf29 	b.w	be710 <_ZN5Print10printFloatEdh>

000be8be <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   be8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be8c2:	b086      	sub	sp, #24
   be8c4:	af00      	add	r7, sp, #0
   be8c6:	4605      	mov	r5, r0
   be8c8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   be8ca:	1d38      	adds	r0, r7, #4
   be8cc:	2114      	movs	r1, #20
{
   be8ce:	4614      	mov	r4, r2
    va_copy(args2, args);
   be8d0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   be8d2:	f7fd fdc3 	bl	bc45c <vsnprintf>

    if (n<bufsize)
   be8d6:	2813      	cmp	r0, #19
   be8d8:	d80e      	bhi.n	be8f8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   be8da:	1d39      	adds	r1, r7, #4
   be8dc:	4628      	mov	r0, r5
   be8de:	f7ff fed3 	bl	be688 <_ZN5Print5writeEPKc>
   be8e2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   be8e4:	b11e      	cbz	r6, be8ee <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   be8e6:	4628      	mov	r0, r5
   be8e8:	f7ff fee7 	bl	be6ba <_ZN5Print7printlnEv>
   be8ec:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   be8ee:	4620      	mov	r0, r4
   be8f0:	3718      	adds	r7, #24
   be8f2:	46bd      	mov	sp, r7
   be8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   be8f8:	f100 0308 	add.w	r3, r0, #8
   be8fc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   be900:	46e8      	mov	r8, sp
        char bigger[n+1];
   be902:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   be906:	4622      	mov	r2, r4
   be908:	1c41      	adds	r1, r0, #1
   be90a:	683b      	ldr	r3, [r7, #0]
   be90c:	4668      	mov	r0, sp
   be90e:	f7fd fda5 	bl	bc45c <vsnprintf>
  return write(str);
   be912:	4669      	mov	r1, sp
   be914:	4628      	mov	r0, r5
   be916:	f7ff feb7 	bl	be688 <_ZN5Print5writeEPKc>
   be91a:	4604      	mov	r4, r0
   be91c:	46c5      	mov	sp, r8
   be91e:	e7e1      	b.n	be8e4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000be920 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   be920:	b510      	push	{r4, lr}
  if (0 == max) {
   be922:	4604      	mov	r4, r0
   be924:	b128      	cbz	r0, be932 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   be926:	f001 fd13 	bl	c0350 <rand>
   be92a:	fb90 f3f4 	sdiv	r3, r0, r4
   be92e:	fb03 0414 	mls	r4, r3, r4, r0
}
   be932:	4620      	mov	r0, r4
   be934:	bd10      	pop	{r4, pc}

000be936 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   be936:	4288      	cmp	r0, r1
{
   be938:	b510      	push	{r4, lr}
   be93a:	4604      	mov	r4, r0
  if (min >= max) {
   be93c:	da03      	bge.n	be946 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   be93e:	1a08      	subs	r0, r1, r0
   be940:	f7ff ffee 	bl	be920 <_Z6randomi>
   be944:	4404      	add	r4, r0
}
   be946:	4620      	mov	r0, r4
   be948:	bd10      	pop	{r4, pc}
	...

000be94c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   be94c:	4b01      	ldr	r3, [pc, #4]	; (be954 <_GLOBAL__sub_I_RGB+0x8>)
   be94e:	2200      	movs	r2, #0
   be950:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   be952:	4770      	bx	lr
   be954:	2003e688 	.word	0x2003e688

000be958 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   be958:	2100      	movs	r1, #0
   be95a:	f7fd bae3 	b.w	bbf24 <hal_spi_release>

000be95e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   be95e:	2100      	movs	r1, #0
   be960:	f7fd bad8 	b.w	bbf14 <hal_spi_acquire>

000be964 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   be964:	b510      	push	{r4, lr}
   be966:	4604      	mov	r4, r0
   be968:	4608      	mov	r0, r1
{
    _spi = spi;
   be96a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   be96c:	f7fd fab2 	bl	bbed4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   be970:	2300      	movs	r3, #0
   be972:	6063      	str	r3, [r4, #4]
}
   be974:	4620      	mov	r0, r4
   be976:	bd10      	pop	{r4, pc}

000be978 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   be978:	b513      	push	{r0, r1, r4, lr}
   be97a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   be97c:	7800      	ldrb	r0, [r0, #0]
   be97e:	f7ff ffee 	bl	be95e <_ZN8SPIClass4lockEv.isra.0>
   be982:	b958      	cbnz	r0, be99c <_ZN8SPIClass5beginEv+0x24>
   be984:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   be986:	9001      	str	r0, [sp, #4]
   be988:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be98c:	f7fd fa8a 	bl	bbea4 <hal_spi_begin>
        unlock();
   be990:	9801      	ldr	r0, [sp, #4]
    }
}
   be992:	b002      	add	sp, #8
   be994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be998:	f7ff bfde 	b.w	be958 <_ZN8SPIClass6unlockEv.isra.0>
   be99c:	b002      	add	sp, #8
   be99e:	bd10      	pop	{r4, pc}

000be9a0 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   be9a0:	b513      	push	{r0, r1, r4, lr}
   be9a2:	4604      	mov	r4, r0
    if (!lock())
   be9a4:	7800      	ldrb	r0, [r0, #0]
   be9a6:	f7ff ffda 	bl	be95e <_ZN8SPIClass4lockEv.isra.0>
   be9aa:	b948      	cbnz	r0, be9c0 <_ZN8SPIClass3endEv+0x20>
   be9ac:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   be9ae:	9001      	str	r0, [sp, #4]
   be9b0:	f7fd fa80 	bl	bbeb4 <hal_spi_end>
        unlock();
   be9b4:	9801      	ldr	r0, [sp, #4]
    }
}
   be9b6:	b002      	add	sp, #8
   be9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be9bc:	f7ff bfcc 	b.w	be958 <_ZN8SPIClass6unlockEv.isra.0>
   be9c0:	b002      	add	sp, #8
   be9c2:	bd10      	pop	{r4, pc}

000be9c4 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   be9c4:	7800      	ldrb	r0, [r0, #0]
   be9c6:	f7ff bfc7 	b.w	be958 <_ZN8SPIClass6unlockEv.isra.0>
	...

000be9cc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   be9cc:	0840      	lsrs	r0, r0, #1
{
   be9ce:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   be9d0:	6018      	str	r0, [r3, #0]
   be9d2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   be9d4:	6818      	ldr	r0, [r3, #0]
   be9d6:	4288      	cmp	r0, r1
   be9d8:	b2e5      	uxtb	r5, r4
   be9da:	d906      	bls.n	be9ea <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   be9dc:	3401      	adds	r4, #1
   be9de:	2c08      	cmp	r4, #8
   be9e0:	d002      	beq.n	be9e8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   be9e2:	0840      	lsrs	r0, r0, #1
   be9e4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   be9e6:	e7f5      	b.n	be9d4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   be9e8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   be9ea:	4b02      	ldr	r3, [pc, #8]	; (be9f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   be9ec:	5d5b      	ldrb	r3, [r3, r5]
   be9ee:	7013      	strb	r3, [r2, #0]
}
   be9f0:	bd30      	pop	{r4, r5, pc}
   be9f2:	bf00      	nop
   be9f4:	000c21d0 	.word	0x000c21d0

000be9f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   be9f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   be9fc:	4606      	mov	r6, r0
   be9fe:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bea00:	7800      	ldrb	r0, [r0, #0]
{
   bea02:	460c      	mov	r4, r1
    CHECK(lock());
   bea04:	f7ff ffab 	bl	be95e <_ZN8SPIClass4lockEv.isra.0>
   bea08:	2800      	cmp	r0, #0
   bea0a:	db1b      	blt.n	bea44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bea0c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bea0e:	2214      	movs	r2, #20
   bea10:	2100      	movs	r1, #0
   bea12:	a809      	add	r0, sp, #36	; 0x24
   bea14:	f001 fc66 	bl	c02e4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bea18:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bea1a:	2200      	movs	r2, #0
   bea1c:	a909      	add	r1, sp, #36	; 0x24
   bea1e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bea20:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bea24:	f7fd fa66 	bl	bbef4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bea28:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bea2c:	b113      	cbz	r3, bea34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bea2e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bea32:	b155      	cbz	r5, bea4a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bea34:	2700      	movs	r7, #0
   bea36:	46b9      	mov	r9, r7
   bea38:	46b8      	mov	r8, r7
   bea3a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bea3c:	7923      	ldrb	r3, [r4, #4]
   bea3e:	b15d      	cbz	r5, bea58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bea40:	b1c3      	cbz	r3, bea74 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bea42:	2000      	movs	r0, #0
}
   bea44:	b00f      	add	sp, #60	; 0x3c
   bea46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bea4a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bea4e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bea52:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bea56:	e7f1      	b.n	bea3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bea58:	2b00      	cmp	r3, #0
   bea5a:	d135      	bne.n	beac8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bea5c:	68a3      	ldr	r3, [r4, #8]
   bea5e:	4543      	cmp	r3, r8
   bea60:	d108      	bne.n	bea74 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bea62:	f88d 9020 	strb.w	r9, [sp, #32]
   bea66:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bea6a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bea6e:	89a3      	ldrh	r3, [r4, #12]
   bea70:	429a      	cmp	r2, r3
   bea72:	d0e6      	beq.n	bea42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bea74:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bea76:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bea78:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bea7c:	980a      	ldr	r0, [sp, #40]	; 0x28
   bea7e:	ab04      	add	r3, sp, #16
   bea80:	f10d 020f 	add.w	r2, sp, #15
   bea84:	f7ff ffa2 	bl	be9cc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bea88:	7921      	ldrb	r1, [r4, #4]
   bea8a:	b985      	cbnz	r5, beaae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bea8c:	b989      	cbnz	r1, beab2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bea8e:	68a3      	ldr	r3, [r4, #8]
   bea90:	4543      	cmp	r3, r8
   bea92:	d30e      	bcc.n	beab2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bea94:	f88d 9020 	strb.w	r9, [sp, #32]
   bea98:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bea9c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   beaa0:	89a3      	ldrh	r3, [r4, #12]
   beaa2:	429a      	cmp	r2, r3
   beaa4:	d105      	bne.n	beab2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   beaa6:	9b04      	ldr	r3, [sp, #16]
   beaa8:	4543      	cmp	r3, r8
   beaaa:	d102      	bne.n	beab2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   beaac:	e7c9      	b.n	bea42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   beaae:	2900      	cmp	r1, #0
   beab0:	d1f9      	bne.n	beaa6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   beab2:	2300      	movs	r3, #0
   beab4:	9301      	str	r3, [sp, #4]
   beab6:	7b63      	ldrb	r3, [r4, #13]
   beab8:	9300      	str	r3, [sp, #0]
   beaba:	f89d 200f 	ldrb.w	r2, [sp, #15]
   beabe:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   beac0:	7830      	ldrb	r0, [r6, #0]
   beac2:	f7fd fa1f 	bl	bbf04 <hal_spi_set_settings>
   beac6:	e7bc      	b.n	bea42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   beac8:	e9cd 5500 	strd	r5, r5, [sp]
   beacc:	462b      	mov	r3, r5
   beace:	462a      	mov	r2, r5
   bead0:	2101      	movs	r1, #1
   bead2:	e7f5      	b.n	beac0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bead4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bead4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bead6:	7800      	ldrb	r0, [r0, #0]
   bead8:	f7fd f9f4 	bl	bbec4 <hal_spi_transfer>
}
   beadc:	b2c0      	uxtb	r0, r0
   beade:	bd08      	pop	{r3, pc}

000beae0 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   beae0:	4770      	bx	lr

000beae2 <_ZN8SPIClass15detachInterruptEv>:
   beae2:	4770      	bx	lr

000beae4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   beae4:	b510      	push	{r4, lr}
   beae6:	4604      	mov	r4, r0
{
	free(buffer);
   beae8:	6800      	ldr	r0, [r0, #0]
   beaea:	f7fd fc8f 	bl	bc40c <free>
}
   beaee:	4620      	mov	r0, r4
   beaf0:	bd10      	pop	{r4, pc}

000beaf2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   beaf2:	b510      	push	{r4, lr}
   beaf4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   beaf6:	6800      	ldr	r0, [r0, #0]
   beaf8:	b108      	cbz	r0, beafe <_ZN6String10invalidateEv+0xc>
   beafa:	f7fd fc87 	bl	bc40c <free>
	buffer = NULL;
   beafe:	2300      	movs	r3, #0
	capacity = len = 0;
   beb00:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   beb04:	6023      	str	r3, [r4, #0]
}
   beb06:	bd10      	pop	{r4, pc}

000beb08 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   beb08:	b538      	push	{r3, r4, r5, lr}
   beb0a:	4604      	mov	r4, r0
   beb0c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   beb0e:	6800      	ldr	r0, [r0, #0]
   beb10:	3101      	adds	r1, #1
   beb12:	f7fd fc83 	bl	bc41c <realloc>
	if (newbuffer) {
   beb16:	b110      	cbz	r0, beb1e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   beb18:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   beb1c:	2001      	movs	r0, #1
	}
	return 0;
}
   beb1e:	bd38      	pop	{r3, r4, r5, pc}

000beb20 <_ZN6String7reserveEj>:
{
   beb20:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   beb22:	6803      	ldr	r3, [r0, #0]
{
   beb24:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   beb26:	b123      	cbz	r3, beb32 <_ZN6String7reserveEj+0x12>
   beb28:	6843      	ldr	r3, [r0, #4]
   beb2a:	428b      	cmp	r3, r1
   beb2c:	d301      	bcc.n	beb32 <_ZN6String7reserveEj+0x12>
   beb2e:	2001      	movs	r0, #1
}
   beb30:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   beb32:	4620      	mov	r0, r4
   beb34:	f7ff ffe8 	bl	beb08 <_ZN6String12changeBufferEj>
   beb38:	2800      	cmp	r0, #0
   beb3a:	d0f9      	beq.n	beb30 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   beb3c:	68a3      	ldr	r3, [r4, #8]
   beb3e:	2b00      	cmp	r3, #0
   beb40:	d1f5      	bne.n	beb2e <_ZN6String7reserveEj+0xe>
   beb42:	6822      	ldr	r2, [r4, #0]
   beb44:	7013      	strb	r3, [r2, #0]
   beb46:	e7f2      	b.n	beb2e <_ZN6String7reserveEj+0xe>

000beb48 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   beb48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   beb4a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   beb4c:	4611      	mov	r1, r2
   beb4e:	9201      	str	r2, [sp, #4]
{
   beb50:	4604      	mov	r4, r0
	if (!reserve(length)) {
   beb52:	f7ff ffe5 	bl	beb20 <_ZN6String7reserveEj>
   beb56:	9a01      	ldr	r2, [sp, #4]
   beb58:	b928      	cbnz	r0, beb66 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   beb5a:	4620      	mov	r0, r4
   beb5c:	f7ff ffc9 	bl	beaf2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   beb60:	4620      	mov	r0, r4
   beb62:	b003      	add	sp, #12
   beb64:	bd30      	pop	{r4, r5, pc}
	len = length;
   beb66:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   beb68:	4629      	mov	r1, r5
   beb6a:	6820      	ldr	r0, [r4, #0]
   beb6c:	f001 fb92 	bl	c0294 <memcpy>
	buffer[len] = 0;
   beb70:	6822      	ldr	r2, [r4, #0]
   beb72:	68a3      	ldr	r3, [r4, #8]
   beb74:	2100      	movs	r1, #0
   beb76:	54d1      	strb	r1, [r2, r3]
	return *this;
   beb78:	e7f2      	b.n	beb60 <_ZN6String4copyEPKcj+0x18>

000beb7a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   beb7a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   beb7c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   beb7e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   beb82:	4604      	mov	r4, r0
	len = 0;
   beb84:	6083      	str	r3, [r0, #8]
	flags = 0;
   beb86:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   beb88:	b141      	cbz	r1, beb9c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   beb8a:	4608      	mov	r0, r1
   beb8c:	9101      	str	r1, [sp, #4]
   beb8e:	f001 fc64 	bl	c045a <strlen>
   beb92:	9901      	ldr	r1, [sp, #4]
   beb94:	4602      	mov	r2, r0
   beb96:	4620      	mov	r0, r4
   beb98:	f7ff ffd6 	bl	beb48 <_ZN6String4copyEPKcj>
}
   beb9c:	4620      	mov	r0, r4
   beb9e:	b002      	add	sp, #8
   beba0:	bd10      	pop	{r4, pc}

000beba2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   beba2:	b538      	push	{r3, r4, r5, lr}
   beba4:	4605      	mov	r5, r0
	if (buffer) {
   beba6:	6800      	ldr	r0, [r0, #0]
{
   beba8:	460c      	mov	r4, r1
	if (buffer) {
   bebaa:	b168      	cbz	r0, bebc8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bebac:	686a      	ldr	r2, [r5, #4]
   bebae:	688b      	ldr	r3, [r1, #8]
   bebb0:	429a      	cmp	r2, r3
   bebb2:	d307      	bcc.n	bebc4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bebb4:	6809      	ldr	r1, [r1, #0]
   bebb6:	f001 fc2a 	bl	c040e <strcpy>
			len = rhs.len;
   bebba:	68a3      	ldr	r3, [r4, #8]
   bebbc:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bebbe:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bebc0:	60a3      	str	r3, [r4, #8]
}
   bebc2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bebc4:	f7fd fc22 	bl	bc40c <free>
	buffer = rhs.buffer;
   bebc8:	6823      	ldr	r3, [r4, #0]
   bebca:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bebcc:	6863      	ldr	r3, [r4, #4]
   bebce:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bebd0:	68a3      	ldr	r3, [r4, #8]
   bebd2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bebd4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bebd6:	e9c4 3300 	strd	r3, r3, [r4]
   bebda:	e7f1      	b.n	bebc0 <_ZN6String4moveERS_+0x1e>

000bebdc <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bebdc:	b510      	push	{r4, lr}
	buffer = NULL;
   bebde:	2300      	movs	r3, #0
	capacity = 0;
   bebe0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bebe4:	4604      	mov	r4, r0
	len = 0;
   bebe6:	6083      	str	r3, [r0, #8]
	flags = 0;
   bebe8:	7303      	strb	r3, [r0, #12]
	move(rval);
   bebea:	f7ff ffda 	bl	beba2 <_ZN6String4moveERS_>
}
   bebee:	4620      	mov	r0, r4
   bebf0:	bd10      	pop	{r4, pc}

000bebf2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bebf2:	4288      	cmp	r0, r1
{
   bebf4:	b510      	push	{r4, lr}
   bebf6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bebf8:	d005      	beq.n	bec06 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bebfa:	680b      	ldr	r3, [r1, #0]
   bebfc:	b12b      	cbz	r3, bec0a <_ZN6StringaSERKS_+0x18>
   bebfe:	688a      	ldr	r2, [r1, #8]
   bec00:	4619      	mov	r1, r3
   bec02:	f7ff ffa1 	bl	beb48 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bec06:	4620      	mov	r0, r4
   bec08:	bd10      	pop	{r4, pc}
	else invalidate();
   bec0a:	f7ff ff72 	bl	beaf2 <_ZN6String10invalidateEv>
   bec0e:	e7fa      	b.n	bec06 <_ZN6StringaSERKS_+0x14>

000bec10 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bec10:	b510      	push	{r4, lr}
	buffer = NULL;
   bec12:	2300      	movs	r3, #0
String::String(const String &value)
   bec14:	4604      	mov	r4, r0
	capacity = 0;
   bec16:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bec1a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bec1c:	7303      	strb	r3, [r0, #12]
	*this = value;
   bec1e:	f7ff ffe8 	bl	bebf2 <_ZN6StringaSERKS_>
}
   bec22:	4620      	mov	r0, r4
   bec24:	bd10      	pop	{r4, pc}

000bec26 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bec26:	4288      	cmp	r0, r1
{
   bec28:	b510      	push	{r4, lr}
   bec2a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bec2c:	d001      	beq.n	bec32 <_ZN6StringaSEOS_+0xc>
   bec2e:	f7ff ffb8 	bl	beba2 <_ZN6String4moveERS_>
	return *this;
}
   bec32:	4620      	mov	r0, r4
   bec34:	bd10      	pop	{r4, pc}

000bec36 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bec36:	b513      	push	{r0, r1, r4, lr}
   bec38:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bec3a:	b159      	cbz	r1, bec54 <_ZN6StringaSEPKc+0x1e>
   bec3c:	4608      	mov	r0, r1
   bec3e:	9101      	str	r1, [sp, #4]
   bec40:	f001 fc0b 	bl	c045a <strlen>
   bec44:	9901      	ldr	r1, [sp, #4]
   bec46:	4602      	mov	r2, r0
   bec48:	4620      	mov	r0, r4
   bec4a:	f7ff ff7d 	bl	beb48 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bec4e:	4620      	mov	r0, r4
   bec50:	b002      	add	sp, #8
   bec52:	bd10      	pop	{r4, pc}
	else invalidate();
   bec54:	f7ff ff4d 	bl	beaf2 <_ZN6String10invalidateEv>
   bec58:	e7f9      	b.n	bec4e <_ZN6StringaSEPKc+0x18>

000bec5a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bec5a:	b570      	push	{r4, r5, r6, lr}
   bec5c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bec5e:	460e      	mov	r6, r1
   bec60:	b909      	cbnz	r1, bec66 <_ZN6String6concatEPKcj+0xc>
   bec62:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bec64:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bec66:	b16a      	cbz	r2, bec84 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bec68:	6884      	ldr	r4, [r0, #8]
   bec6a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bec6c:	4621      	mov	r1, r4
   bec6e:	f7ff ff57 	bl	beb20 <_ZN6String7reserveEj>
   bec72:	2800      	cmp	r0, #0
   bec74:	d0f5      	beq.n	bec62 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bec76:	6828      	ldr	r0, [r5, #0]
   bec78:	68ab      	ldr	r3, [r5, #8]
   bec7a:	4631      	mov	r1, r6
   bec7c:	4418      	add	r0, r3
   bec7e:	f001 fbc6 	bl	c040e <strcpy>
	len = newlen;
   bec82:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bec84:	2001      	movs	r0, #1
   bec86:	e7ed      	b.n	bec64 <_ZN6String6concatEPKcj+0xa>

000bec88 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   bec88:	b513      	push	{r0, r1, r4, lr}
   bec8a:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   bec8c:	4608      	mov	r0, r1
	if (!cstr) return 0;
   bec8e:	b151      	cbz	r1, beca6 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   bec90:	9101      	str	r1, [sp, #4]
   bec92:	f001 fbe2 	bl	c045a <strlen>
   bec96:	9901      	ldr	r1, [sp, #4]
   bec98:	4602      	mov	r2, r0
   bec9a:	4620      	mov	r0, r4
}
   bec9c:	b002      	add	sp, #8
   bec9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   beca2:	f7ff bfda 	b.w	bec5a <_ZN6String6concatEPKcj>
}
   beca6:	b002      	add	sp, #8
   beca8:	bd10      	pop	{r4, pc}

000becaa <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   becaa:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   becac:	2300      	movs	r3, #0
	buf[0] = c;
   becae:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   becb2:	2201      	movs	r2, #1
   becb4:	a901      	add	r1, sp, #4
	buf[1] = 0;
   becb6:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   becba:	f7ff ffce 	bl	bec5a <_ZN6String6concatEPKcj>
}
   becbe:	b003      	add	sp, #12
   becc0:	f85d fb04 	ldr.w	pc, [sp], #4

000becc4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   becc4:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   becc6:	688a      	ldr	r2, [r1, #8]
   becc8:	6809      	ldr	r1, [r1, #0]
{
   becca:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   beccc:	f7ff ffc5 	bl	bec5a <_ZN6String6concatEPKcj>
   becd0:	b910      	cbnz	r0, becd8 <_ZplRK15StringSumHelperRK6String+0x14>
   becd2:	4620      	mov	r0, r4
   becd4:	f7ff ff0d 	bl	beaf2 <_ZN6String10invalidateEv>
	return a;
}
   becd8:	4620      	mov	r0, r4
   becda:	bd10      	pop	{r4, pc}

000becdc <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   becdc:	b513      	push	{r0, r1, r4, lr}
   becde:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bece0:	b929      	cbnz	r1, becee <_ZplRK15StringSumHelperPKc+0x12>
   bece2:	4620      	mov	r0, r4
   bece4:	f7ff ff05 	bl	beaf2 <_ZN6String10invalidateEv>
	return a;
}
   bece8:	4620      	mov	r0, r4
   becea:	b002      	add	sp, #8
   becec:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   becee:	4608      	mov	r0, r1
   becf0:	9101      	str	r1, [sp, #4]
   becf2:	f001 fbb2 	bl	c045a <strlen>
   becf6:	9901      	ldr	r1, [sp, #4]
   becf8:	4602      	mov	r2, r0
   becfa:	4620      	mov	r0, r4
   becfc:	f7ff ffad 	bl	bec5a <_ZN6String6concatEPKcj>
   bed00:	2800      	cmp	r0, #0
   bed02:	d0ee      	beq.n	bece2 <_ZplRK15StringSumHelperPKc+0x6>
   bed04:	e7f0      	b.n	bece8 <_ZplRK15StringSumHelperPKc+0xc>

000bed06 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bed06:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bed08:	6882      	ldr	r2, [r0, #8]
   bed0a:	b93a      	cbnz	r2, bed1c <_ZNK6String6equalsEPKc+0x16>
   bed0c:	b121      	cbz	r1, bed18 <_ZNK6String6equalsEPKc+0x12>
   bed0e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bed10:	fab0 f080 	clz	r0, r0
   bed14:	0940      	lsrs	r0, r0, #5
   bed16:	e000      	b.n	bed1a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bed18:	2001      	movs	r0, #1
}
   bed1a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bed1c:	6800      	ldr	r0, [r0, #0]
   bed1e:	b909      	cbnz	r1, bed24 <_ZNK6String6equalsEPKc+0x1e>
   bed20:	7800      	ldrb	r0, [r0, #0]
   bed22:	e7f5      	b.n	bed10 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bed24:	f001 fb69 	bl	c03fa <strcmp>
   bed28:	e7f2      	b.n	bed10 <_ZNK6String6equalsEPKc+0xa>

000bed2a <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   bed2a:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bed2c:	6883      	ldr	r3, [r0, #8]
   bed2e:	688a      	ldr	r2, [r1, #8]
   bed30:	4293      	cmp	r3, r2
   bed32:	d30b      	bcc.n	bed4c <_ZNK6String8endsWithERKS_+0x22>
   bed34:	6800      	ldr	r0, [r0, #0]
   bed36:	b140      	cbz	r0, bed4a <_ZNK6String8endsWithERKS_+0x20>
   bed38:	6809      	ldr	r1, [r1, #0]
   bed3a:	b149      	cbz	r1, bed50 <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bed3c:	1a9b      	subs	r3, r3, r2
   bed3e:	4418      	add	r0, r3
   bed40:	f001 fb5b 	bl	c03fa <strcmp>
   bed44:	fab0 f080 	clz	r0, r0
   bed48:	0940      	lsrs	r0, r0, #5
}
   bed4a:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bed4c:	2000      	movs	r0, #0
   bed4e:	e7fc      	b.n	bed4a <_ZNK6String8endsWithERKS_+0x20>
   bed50:	4608      	mov	r0, r1
   bed52:	e7fa      	b.n	bed4a <_ZNK6String8endsWithERKS_+0x20>

000bed54 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bed54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bed56:	429a      	cmp	r2, r3
{
   bed58:	460f      	mov	r7, r1
   bed5a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bed5c:	490c      	ldr	r1, [pc, #48]	; (bed90 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bed5e:	bf88      	it	hi
   bed60:	4613      	movhi	r3, r2
{
   bed62:	4614      	mov	r4, r2
   bed64:	4606      	mov	r6, r0
	if (left > right) {
   bed66:	bf84      	itt	hi
   bed68:	462c      	movhi	r4, r5
   bed6a:	461d      	movhi	r5, r3
	String out;
   bed6c:	f7ff ff05 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bed70:	68bb      	ldr	r3, [r7, #8]
   bed72:	42a3      	cmp	r3, r4
   bed74:	d30a      	bcc.n	bed8c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bed76:	6839      	ldr	r1, [r7, #0]
   bed78:	42ab      	cmp	r3, r5
   bed7a:	bf94      	ite	ls
   bed7c:	ebc4 0203 	rsbls	r2, r4, r3
   bed80:	ebc4 0205 	rsbhi	r2, r4, r5
   bed84:	4421      	add	r1, r4
   bed86:	4630      	mov	r0, r6
   bed88:	f7ff fede 	bl	beb48 <_ZN6String4copyEPKcj>
	return out;
}
   bed8c:	4630      	mov	r0, r6
   bed8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bed90:	000c20fc 	.word	0x000c20fc

000bed94 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bed94:	b40e      	push	{r1, r2, r3}
   bed96:	b570      	push	{r4, r5, r6, lr}
   bed98:	b087      	sub	sp, #28
   bed9a:	ad0b      	add	r5, sp, #44	; 0x2c
   bed9c:	4604      	mov	r4, r0
   bed9e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   beda2:	9201      	str	r2, [sp, #4]
   beda4:	462b      	mov	r3, r5
   beda6:	2105      	movs	r1, #5
   beda8:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bedaa:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bedac:	f7fd fb56 	bl	bc45c <vsnprintf>
    va_end(marker);

    String result;
   bedb0:	490b      	ldr	r1, [pc, #44]	; (bede0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bedb2:	4606      	mov	r6, r0
    String result;
   bedb4:	4620      	mov	r0, r4
   bedb6:	f7ff fee0 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bedba:	4631      	mov	r1, r6
   bedbc:	4620      	mov	r0, r4
   bedbe:	f7ff feaf 	bl	beb20 <_ZN6String7reserveEj>
    if (result.buffer) {
   bedc2:	6820      	ldr	r0, [r4, #0]
   bedc4:	b130      	cbz	r0, bedd4 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bedc6:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bedc8:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bedca:	462b      	mov	r3, r5
   bedcc:	1c71      	adds	r1, r6, #1
   bedce:	f7fd fb45 	bl	bc45c <vsnprintf>
        va_end(marker);
        result.len = n;
   bedd2:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bedd4:	4620      	mov	r0, r4
   bedd6:	b007      	add	sp, #28
   bedd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   beddc:	b003      	add	sp, #12
   bedde:	4770      	bx	lr
   bede0:	000c20fc 	.word	0x000c20fc

000bede4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bede4:	b510      	push	{r4, lr}
   bede6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bede8:	6800      	ldr	r0, [r0, #0]
   bedea:	b118      	cbz	r0, bedf4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bedec:	f7fd fb0e 	bl	bc40c <free>
            wakeupSource_ = nullptr;
   bedf0:	2300      	movs	r3, #0
   bedf2:	6023      	str	r3, [r4, #0]
        }
    }
   bedf4:	bd10      	pop	{r4, pc}

000bedf6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bedf6:	b538      	push	{r3, r4, r5, lr}
   bedf8:	460c      	mov	r4, r1
   bedfa:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bedfc:	f7ff fff2 	bl	bede4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bee00:	b154      	cbz	r4, bee18 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bee02:	8820      	ldrh	r0, [r4, #0]
   bee04:	f7fd fafa 	bl	bc3fc <malloc>
   bee08:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bee0a:	b128      	cbz	r0, bee18 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bee0c:	8822      	ldrh	r2, [r4, #0]
   bee0e:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bee10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bee14:	f001 ba3e 	b.w	c0294 <memcpy>
    }
   bee18:	bd38      	pop	{r3, r4, r5, pc}

000bee1a <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bee1a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bee1c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bee20:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bee22:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bee26:	f8c0 3006 	str.w	r3, [r0, #6]
   bee2a:	894b      	ldrh	r3, [r1, #10]
   bee2c:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bee2e:	460c      	mov	r4, r1
   bee30:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bee32:	f7ff ffd7 	bl	bede4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bee36:	6823      	ldr	r3, [r4, #0]
   bee38:	b113      	cbz	r3, bee40 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bee3a:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bee3c:	2300      	movs	r3, #0
   bee3e:	6023      	str	r3, [r4, #0]
    }
   bee40:	bd38      	pop	{r3, r4, r5, pc}

000bee42 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bee42:	b507      	push	{r0, r1, r2, lr}
   bee44:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bee46:	2100      	movs	r1, #0
{
   bee48:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bee4a:	9100      	str	r1, [sp, #0]
   bee4c:	2001      	movs	r0, #1
   bee4e:	218c      	movs	r1, #140	; 0x8c
   bee50:	f7fd fa0a 	bl	bc268 <system_reset>
}
   bee54:	b003      	add	sp, #12
   bee56:	f85d fb04 	ldr.w	pc, [sp], #4

000bee5a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bee5a:	4601      	mov	r1, r0
    reset(0, flags);
   bee5c:	2000      	movs	r0, #0
   bee5e:	f7ff bff0 	b.w	bee42 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bee62 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bee62:	2000      	movs	r0, #0
   bee64:	f7ff bff9 	b.w	bee5a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bee68 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bee68:	b5f0      	push	{r4, r5, r6, r7, lr}
   bee6a:	4d2b      	ldr	r5, [pc, #172]	; (bef18 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bee6c:	7d0b      	ldrb	r3, [r1, #20]
   bee6e:	4604      	mov	r4, r0
   bee70:	b08b      	sub	sp, #44	; 0x2c
   bee72:	4608      	mov	r0, r1
   bee74:	1daf      	adds	r7, r5, #6
   bee76:	2b00      	cmp	r3, #0
   bee78:	d036      	beq.n	beee8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bee7a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bee7c:	791b      	ldrb	r3, [r3, #4]
   bee7e:	2b00      	cmp	r3, #0
   bee80:	d032      	beq.n	beee8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bee82:	4b26      	ldr	r3, [pc, #152]	; (bef1c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bee84:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bee86:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bee88:	a902      	add	r1, sp, #8
   bee8a:	3004      	adds	r0, #4
   bee8c:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bee90:	f7fd f9e0 	bl	bc254 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bee94:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bee98:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bee9c:	b200      	sxth	r0, r0
   bee9e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   beea2:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   beea6:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   beea8:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   beeaa:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   beeac:	4628      	mov	r0, r5
   beeae:	f7ff ffa2 	bl	bedf6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   beeb2:	a802      	add	r0, sp, #8
   beeb4:	f7ff ff96 	bl	bede4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   beeb8:	2300      	movs	r3, #0
   beeba:	6023      	str	r3, [r4, #0]
   beebc:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   beebe:	71a3      	strb	r3, [r4, #6]
   beec0:	8123      	strh	r3, [r4, #8]
   beec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   beec6:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   beec8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   beecc:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   beece:	f8d5 3006 	ldr.w	r3, [r5, #6]
   beed2:	f8c4 3006 	str.w	r3, [r4, #6]
   beed6:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   beed8:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   beeda:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   beedc:	4620      	mov	r0, r4
   beede:	f7ff ff8a 	bl	bedf6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   beee2:	4620      	mov	r0, r4
   beee4:	b00b      	add	sp, #44	; 0x2c
   beee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   beee8:	2600      	movs	r6, #0
   beeea:	2320      	movs	r3, #32
   beeec:	e9cd 3602 	strd	r3, r6, [sp, #8]
   beef0:	4b0b      	ldr	r3, [pc, #44]	; (bef20 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   beef2:	9300      	str	r3, [sp, #0]
   beef4:	aa02      	add	r2, sp, #8
   beef6:	4633      	mov	r3, r6
   beef8:	490a      	ldr	r1, [pc, #40]	; (bef24 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   beefa:	2032      	movs	r0, #50	; 0x32
   beefc:	f7fd f91a 	bl	bc134 <log_message>
            : wakeupSource_(nullptr),
   bef00:	4b06      	ldr	r3, [pc, #24]	; (bef1c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bef02:	4805      	ldr	r0, [pc, #20]	; (bef18 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bef04:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bef06:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bef0a:	a902      	add	r1, sp, #8
   bef0c:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bef10:	f7ff ff83 	bl	bee1a <_ZN17SystemSleepResultaSEOS_.isra.0>
   bef14:	e7cd      	b.n	beeb2 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bef16:	bf00      	nop
   bef18:	2003e698 	.word	0x2003e698
   bef1c:	ffff0000 	.word	0xffff0000
   bef20:	000c21df 	.word	0x000c21df
   bef24:	000c21d8 	.word	0x000c21d8

000bef28 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bef28:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bef2a:	2420      	movs	r4, #32
{
   bef2c:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bef2e:	4622      	mov	r2, r4
   bef30:	2100      	movs	r1, #0
   bef32:	4668      	mov	r0, sp
   bef34:	f001 f9d6 	bl	c02e4 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bef38:	2100      	movs	r1, #0
   bef3a:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bef3c:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bef40:	f7fc fea0 	bl	bbc84 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bef44:	9801      	ldr	r0, [sp, #4]
   bef46:	b008      	add	sp, #32
   bef48:	bd10      	pop	{r4, pc}
	...

000bef4c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bef4c:	4b05      	ldr	r3, [pc, #20]	; (bef64 <_GLOBAL__sub_I_System+0x18>)
   bef4e:	2202      	movs	r2, #2
   bef50:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bef52:	4b05      	ldr	r3, [pc, #20]	; (bef68 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bef54:	4a05      	ldr	r2, [pc, #20]	; (bef6c <_GLOBAL__sub_I_System+0x20>)
   bef56:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bef58:	2000      	movs	r0, #0
   bef5a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bef5e:	f7fd b91b 	b.w	bc198 <set_system_mode>
   bef62:	bf00      	nop
   bef64:	2003e6a4 	.word	0x2003e6a4
   bef68:	2003e698 	.word	0x2003e698
   bef6c:	ffff0000 	.word	0xffff0000

000bef70 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bef70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bef74:	4a15      	ldr	r2, [pc, #84]	; (befcc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bef76:	f8df 8060 	ldr.w	r8, [pc, #96]	; befd8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bef7a:	e9d2 6300 	ldrd	r6, r3, [r2]
   bef7e:	1980      	adds	r0, r0, r6
   bef80:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bef84:	4b12      	ldr	r3, [pc, #72]	; (befd0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bef86:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bef8a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bef8e:	1986      	adds	r6, r0, r6
   bef90:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bef94:	42bb      	cmp	r3, r7
   bef96:	bf08      	it	eq
   bef98:	42b2      	cmpeq	r2, r6
{
   bef9a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bef9c:	d013      	beq.n	befc6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bef9e:	a903      	add	r1, sp, #12
   befa0:	4668      	mov	r0, sp
   befa2:	e9cd 6700 	strd	r6, r7, [sp]
   befa6:	f7fd fa91 	bl	bc4cc <localtime_r>
	calendar_time.tm_year += 1900;
   befaa:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   befac:	4d09      	ldr	r5, [pc, #36]	; (befd4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   befae:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   befb2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   befb4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   befb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   befb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   befba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   befbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   befbe:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   befc2:	6823      	ldr	r3, [r4, #0]
   befc4:	602b      	str	r3, [r5, #0]
    }
}
   befc6:	b00c      	add	sp, #48	; 0x30
   befc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   befcc:	2003e6e0 	.word	0x2003e6e0
   befd0:	2003e6d8 	.word	0x2003e6d8
   befd4:	2003e6b0 	.word	0x2003e6b0
   befd8:	2003e6e8 	.word	0x2003e6e8

000befdc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   befdc:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   befde:	2000      	movs	r0, #0
   befe0:	f7fd f98c 	bl	bc2fc <spark_sync_time_pending>
   befe4:	b128      	cbz	r0, beff2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   befe6:	f7fd f969 	bl	bc2bc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   befea:	f080 0001 	eor.w	r0, r0, #1
   befee:	b2c0      	uxtb	r0, r0
    }
   beff0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   beff2:	2001      	movs	r0, #1
   beff4:	e7fc      	b.n	beff0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000beff8 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   beff8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   beffa:	f7ff ffb9 	bl	bef70 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   beffe:	4b01      	ldr	r3, [pc, #4]	; (bf004 <_ZN9TimeClass4hourEx+0xc>)
   bf000:	6898      	ldr	r0, [r3, #8]
   bf002:	bd08      	pop	{r3, pc}
   bf004:	2003e6b0 	.word	0x2003e6b0

000bf008 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   bf008:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bf00a:	f7ff ffb1 	bl	bef70 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   bf00e:	4b01      	ldr	r3, [pc, #4]	; (bf014 <_ZN9TimeClass3dayEx+0xc>)
   bf010:	68d8      	ldr	r0, [r3, #12]
   bf012:	bd08      	pop	{r3, pc}
   bf014:	2003e6b0 	.word	0x2003e6b0

000bf018 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bf018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bf01a:	4602      	mov	r2, r0
   bf01c:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bf01e:	4668      	mov	r0, sp
    struct timeval tv = {
   bf020:	2100      	movs	r1, #0
    };
   bf022:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bf026:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bf02a:	f7fc fe73 	bl	bbd14 <hal_rtc_set_time>
   bf02e:	4602      	mov	r2, r0
   bf030:	b910      	cbnz	r0, bf038 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bf032:	4601      	mov	r1, r0
   bf034:	f7fd f8e8 	bl	bc208 <system_notify_time_changed>
    }
}
   bf038:	b005      	add	sp, #20
   bf03a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bf040 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bf040:	b530      	push	{r4, r5, lr}
   bf042:	b093      	sub	sp, #76	; 0x4c
   bf044:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bf048:	4b19      	ldr	r3, [pc, #100]	; (bf0b0 <_ZN9TimeClass7timeStrEx+0x70>)
{
   bf04a:	4604      	mov	r4, r0
    t += time_zone_cache;
   bf04c:	e9d3 1000 	ldrd	r1, r0, [r3]
   bf050:	9b01      	ldr	r3, [sp, #4]
   bf052:	1852      	adds	r2, r2, r1
   bf054:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bf058:	4816      	ldr	r0, [pc, #88]	; (bf0b4 <_ZN9TimeClass7timeStrEx+0x74>)
   bf05a:	e9d0 1000 	ldrd	r1, r0, [r0]
   bf05e:	1852      	adds	r2, r2, r1
   bf060:	eb43 0300 	adc.w	r3, r3, r0
   bf064:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bf068:	2224      	movs	r2, #36	; 0x24
   bf06a:	eb0d 0002 	add.w	r0, sp, r2
   bf06e:	2100      	movs	r1, #0
   bf070:	f001 f938 	bl	c02e4 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bf074:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bf076:	a909      	add	r1, sp, #36	; 0x24
   bf078:	4668      	mov	r0, sp
   bf07a:	f7fd fa27 	bl	bc4cc <localtime_r>
    char ascstr[26] = {};
   bf07e:	2216      	movs	r2, #22
   bf080:	4629      	mov	r1, r5
   bf082:	a803      	add	r0, sp, #12
   bf084:	9502      	str	r5, [sp, #8]
   bf086:	f001 f92d 	bl	c02e4 <memset>
    asctime_r(&calendar_time, ascstr);
   bf08a:	a902      	add	r1, sp, #8
   bf08c:	a809      	add	r0, sp, #36	; 0x24
   bf08e:	f001 f8af 	bl	c01f0 <asctime_r>
    int len = strlen(ascstr);
   bf092:	a802      	add	r0, sp, #8
   bf094:	f001 f9e1 	bl	c045a <strlen>
    ascstr[len-1] = 0; // remove final newline
   bf098:	ab12      	add	r3, sp, #72	; 0x48
   bf09a:	4418      	add	r0, r3
    return String(ascstr);
   bf09c:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bf09e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bf0a2:	4620      	mov	r0, r4
   bf0a4:	f7ff fd69 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
}
   bf0a8:	4620      	mov	r0, r4
   bf0aa:	b013      	add	sp, #76	; 0x4c
   bf0ac:	bd30      	pop	{r4, r5, pc}
   bf0ae:	bf00      	nop
   bf0b0:	2003e6e0 	.word	0x2003e6e0
   bf0b4:	2003e6d8 	.word	0x2003e6d8

000bf0b8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bf0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf0bc:	b0a4      	sub	sp, #144	; 0x90
   bf0be:	4607      	mov	r7, r0
   bf0c0:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bf0c2:	a814      	add	r0, sp, #80	; 0x50
{
   bf0c4:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bf0c6:	223f      	movs	r2, #63	; 0x3f
{
   bf0c8:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bf0ca:	f001 f9e2 	bl	c0492 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bf0ce:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bf0d0:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bf0d2:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bf0d6:	f001 f9c0 	bl	c045a <strlen>
   bf0da:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bf0dc:	bb4c      	cbnz	r4, bf132 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bf0de:	4929      	ldr	r1, [pc, #164]	; (bf184 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bf0e0:	a803      	add	r0, sp, #12
   bf0e2:	f001 f994 	bl	c040e <strcpy>
   bf0e6:	ac14      	add	r4, sp, #80	; 0x50
{
   bf0e8:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bf0ea:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bf0ee:	45b1      	cmp	r9, r6
   bf0f0:	d934      	bls.n	bf15c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bf0f2:	7823      	ldrb	r3, [r4, #0]
   bf0f4:	2b25      	cmp	r3, #37	; 0x25
   bf0f6:	f106 0a01 	add.w	sl, r6, #1
   bf0fa:	d117      	bne.n	bf12c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bf0fc:	7863      	ldrb	r3, [r4, #1]
   bf0fe:	2b7a      	cmp	r3, #122	; 0x7a
   bf100:	d114      	bne.n	bf12c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bf102:	a803      	add	r0, sp, #12
   bf104:	f001 f9a9 	bl	c045a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bf108:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bf10a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bf10c:	1830      	adds	r0, r6, r0
   bf10e:	4418      	add	r0, r3
   bf110:	eba9 0206 	sub.w	r2, r9, r6
   bf114:	1ca1      	adds	r1, r4, #2
   bf116:	f001 f8bd 	bl	c0294 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bf11a:	462a      	mov	r2, r5
   bf11c:	a903      	add	r1, sp, #12
   bf11e:	4620      	mov	r0, r4
   bf120:	f001 f8b8 	bl	c0294 <memcpy>
            len = strlen(format_str);
   bf124:	a814      	add	r0, sp, #80	; 0x50
   bf126:	f001 f998 	bl	c045a <strlen>
   bf12a:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bf12c:	3401      	adds	r4, #1
   bf12e:	4656      	mov	r6, sl
   bf130:	e7db      	b.n	bf0ea <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bf132:	233c      	movs	r3, #60	; 0x3c
   bf134:	fb94 f2f3 	sdiv	r2, r4, r3
   bf138:	2a00      	cmp	r2, #0
   bf13a:	bfb8      	it	lt
   bf13c:	4252      	neglt	r2, r2
   bf13e:	fbb2 f1f3 	udiv	r1, r2, r3
   bf142:	fb03 2211 	mls	r2, r3, r1, r2
   bf146:	9200      	str	r2, [sp, #0]
   bf148:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bf14c:	4a0e      	ldr	r2, [pc, #56]	; (bf188 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bf14e:	fb94 f3f3 	sdiv	r3, r4, r3
   bf152:	2110      	movs	r1, #16
   bf154:	a803      	add	r0, sp, #12
   bf156:	f7fd f979 	bl	bc44c <snprintf>
   bf15a:	e7c4      	b.n	bf0e6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bf15c:	2100      	movs	r1, #0
   bf15e:	222e      	movs	r2, #46	; 0x2e
   bf160:	a808      	add	r0, sp, #32
   bf162:	9107      	str	r1, [sp, #28]
   bf164:	f001 f8be 	bl	c02e4 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bf168:	4643      	mov	r3, r8
   bf16a:	aa14      	add	r2, sp, #80	; 0x50
   bf16c:	2132      	movs	r1, #50	; 0x32
   bf16e:	a807      	add	r0, sp, #28
   bf170:	f7fd f9a4 	bl	bc4bc <strftime>
    return String(buf);
   bf174:	a907      	add	r1, sp, #28
   bf176:	4638      	mov	r0, r7
   bf178:	f7ff fcff 	bl	beb7a <_ZN6StringC1EPK19__FlashStringHelper>
}
   bf17c:	4638      	mov	r0, r7
   bf17e:	b024      	add	sp, #144	; 0x90
   bf180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf184:	000c187b 	.word	0x000c187b
   bf188:	000c187d 	.word	0x000c187d

000bf18c <_ZN9TimeClass6formatExPKc>:
{
   bf18c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf18e:	b08d      	sub	sp, #52	; 0x34
   bf190:	e9cd 2300 	strd	r2, r3, [sp]
   bf194:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bf196:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bf198:	b915      	cbnz	r5, bf1a0 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bf19a:	4b19      	ldr	r3, [pc, #100]	; (bf200 <_ZN9TimeClass6formatExPKc+0x74>)
   bf19c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bf19e:	b12d      	cbz	r5, bf1ac <_ZN9TimeClass6formatExPKc+0x20>
   bf1a0:	4b18      	ldr	r3, [pc, #96]	; (bf204 <_ZN9TimeClass6formatExPKc+0x78>)
   bf1a2:	4628      	mov	r0, r5
   bf1a4:	6819      	ldr	r1, [r3, #0]
   bf1a6:	f001 f928 	bl	c03fa <strcmp>
   bf1aa:	b938      	cbnz	r0, bf1bc <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bf1ac:	e9dd 2300 	ldrd	r2, r3, [sp]
   bf1b0:	4620      	mov	r0, r4
   bf1b2:	f7ff ff45 	bl	bf040 <_ZN9TimeClass7timeStrEx>
}
   bf1b6:	4620      	mov	r0, r4
   bf1b8:	b00d      	add	sp, #52	; 0x34
   bf1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bf1bc:	4e12      	ldr	r6, [pc, #72]	; (bf208 <_ZN9TimeClass6formatExPKc+0x7c>)
   bf1be:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bf1c0:	4f12      	ldr	r7, [pc, #72]	; (bf20c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bf1c2:	e9d6 3200 	ldrd	r3, r2, [r6]
   bf1c6:	185b      	adds	r3, r3, r1
   bf1c8:	9901      	ldr	r1, [sp, #4]
   bf1ca:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bf1ce:	e9d7 0100 	ldrd	r0, r1, [r7]
   bf1d2:	181b      	adds	r3, r3, r0
   bf1d4:	eb42 0201 	adc.w	r2, r2, r1
   bf1d8:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bf1dc:	2100      	movs	r1, #0
   bf1de:	2224      	movs	r2, #36	; 0x24
   bf1e0:	a803      	add	r0, sp, #12
   bf1e2:	f001 f87f 	bl	c02e4 <memset>
    localtime_r(&t, &calendar_time);
   bf1e6:	a903      	add	r1, sp, #12
   bf1e8:	4668      	mov	r0, sp
   bf1ea:	f7fd f96f 	bl	bc4cc <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bf1ee:	6832      	ldr	r2, [r6, #0]
   bf1f0:	683b      	ldr	r3, [r7, #0]
   bf1f2:	a903      	add	r1, sp, #12
   bf1f4:	4413      	add	r3, r2
   bf1f6:	4620      	mov	r0, r4
   bf1f8:	462a      	mov	r2, r5
   bf1fa:	f7ff ff5d 	bl	bf0b8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bf1fe:	e7da      	b.n	bf1b6 <_ZN9TimeClass6formatExPKc+0x2a>
   bf200:	2003e6ac 	.word	0x2003e6ac
   bf204:	2003d768 	.word	0x2003d768
   bf208:	2003e6e0 	.word	0x2003e6e0
   bf20c:	2003e6d8 	.word	0x2003e6d8

000bf210 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bf210:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bf212:	2000      	movs	r0, #0
   bf214:	f7fc fd66 	bl	bbce4 <hal_rtc_time_is_valid>
    if (rtcstate)
   bf218:	4604      	mov	r4, r0
   bf21a:	b9a0      	cbnz	r0, bf246 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bf21c:	f7fc ffb4 	bl	bc188 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bf220:	2801      	cmp	r0, #1
   bf222:	d110      	bne.n	bf246 <_ZN9TimeClass7isValidEv+0x36>
   bf224:	4620      	mov	r0, r4
   bf226:	f7fc ffe7 	bl	bc1f8 <system_thread_get_state>
   bf22a:	b960      	cbnz	r0, bf246 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bf22c:	f7ff fed6 	bl	befdc <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bf230:	b910      	cbnz	r0, bf238 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bf232:	f7fd f833 	bl	bc29c <spark_process>
        while (_while() && !_condition()) {
   bf236:	e7f9      	b.n	bf22c <_ZN9TimeClass7isValidEv+0x1c>
   bf238:	f7ff fed0 	bl	befdc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bf23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bf240:	2000      	movs	r0, #0
   bf242:	f7fc bd4f 	b.w	bbce4 <hal_rtc_time_is_valid>
}
   bf246:	4620      	mov	r0, r4
   bf248:	bd10      	pop	{r4, pc}

000bf24a <_ZN9TimeClass3nowEv>:
{
   bf24a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bf24c:	f7ff ffe0 	bl	bf210 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bf250:	2210      	movs	r2, #16
   bf252:	2100      	movs	r1, #0
   bf254:	4668      	mov	r0, sp
   bf256:	f001 f845 	bl	c02e4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bf25a:	2100      	movs	r1, #0
   bf25c:	4668      	mov	r0, sp
   bf25e:	f7fc fd51 	bl	bbd04 <hal_rtc_get_time>
}
   bf262:	9800      	ldr	r0, [sp, #0]
   bf264:	b005      	add	sp, #20
   bf266:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bf26c <_ZN9TimeClass4hourEv>:
{
   bf26c:	b508      	push	{r3, lr}
	return hour(now());
   bf26e:	f7ff ffec 	bl	bf24a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bf272:	17c1      	asrs	r1, r0, #31
   bf274:	f7ff fe7c 	bl	bef70 <_ZL22Refresh_UnixTime_Cachex>
}
   bf278:	4b01      	ldr	r3, [pc, #4]	; (bf280 <_ZN9TimeClass4hourEv+0x14>)
   bf27a:	6898      	ldr	r0, [r3, #8]
   bf27c:	bd08      	pop	{r3, pc}
   bf27e:	bf00      	nop
   bf280:	2003e6b0 	.word	0x2003e6b0

000bf284 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bf284:	4b02      	ldr	r3, [pc, #8]	; (bf290 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bf286:	681a      	ldr	r2, [r3, #0]
   bf288:	4b02      	ldr	r3, [pc, #8]	; (bf294 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bf28a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bf28c:	4770      	bx	lr
   bf28e:	bf00      	nop
   bf290:	2003d768 	.word	0x2003d768
   bf294:	2003e6ac 	.word	0x2003e6ac

000bf298 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bf298:	4770      	bx	lr

000bf29a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bf29a:	7441      	strb	r1, [r0, #17]
}
   bf29c:	4770      	bx	lr

000bf29e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bf29e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bf2a0:	7c00      	ldrb	r0, [r0, #16]
   bf2a2:	f7fc fedf 	bl	bc064 <hal_usart_available_data_for_write>
}
   bf2a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bf2aa:	bd08      	pop	{r3, pc}

000bf2ac <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bf2ac:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bf2ae:	7c00      	ldrb	r0, [r0, #16]
   bf2b0:	f7fc feb0 	bl	bc014 <hal_usart_available>
}
   bf2b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bf2b8:	bd08      	pop	{r3, pc}

000bf2ba <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bf2ba:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bf2bc:	7c00      	ldrb	r0, [r0, #16]
   bf2be:	f7fc feb9 	bl	bc034 <hal_usart_peek>
}
   bf2c2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bf2c6:	bd08      	pop	{r3, pc}

000bf2c8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bf2c8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bf2ca:	7c00      	ldrb	r0, [r0, #16]
   bf2cc:	f7fc feaa 	bl	bc024 <hal_usart_read>
}
   bf2d0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bf2d4:	bd08      	pop	{r3, pc}

000bf2d6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bf2d6:	7c00      	ldrb	r0, [r0, #16]
   bf2d8:	f7fc beb4 	b.w	bc044 <hal_usart_flush>

000bf2dc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bf2dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bf2de:	7c45      	ldrb	r5, [r0, #17]
{
   bf2e0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bf2e2:	b12d      	cbz	r5, bf2f0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bf2e4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bf2e6:	b003      	add	sp, #12
   bf2e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bf2ec:	f7fc be8a 	b.w	bc004 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bf2f0:	7c00      	ldrb	r0, [r0, #16]
   bf2f2:	9101      	str	r1, [sp, #4]
   bf2f4:	f7fc feb6 	bl	bc064 <hal_usart_available_data_for_write>
   bf2f8:	2800      	cmp	r0, #0
   bf2fa:	9901      	ldr	r1, [sp, #4]
   bf2fc:	dcf2      	bgt.n	bf2e4 <_ZN11USARTSerial5writeEh+0x8>
}
   bf2fe:	4628      	mov	r0, r5
   bf300:	b003      	add	sp, #12
   bf302:	bd30      	pop	{r4, r5, pc}

000bf304 <_ZN11USARTSerialD0Ev>:
   bf304:	b510      	push	{r4, lr}
   bf306:	2114      	movs	r1, #20
   bf308:	4604      	mov	r4, r0
   bf30a:	f7f4 fec8 	bl	b409e <_ZdlPvj>
   bf30e:	4620      	mov	r0, r4
   bf310:	bd10      	pop	{r4, pc}
	...

000bf314 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bf314:	b510      	push	{r4, lr}
   bf316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bf31a:	4604      	mov	r4, r0
   bf31c:	4608      	mov	r0, r1
   bf31e:	4611      	mov	r1, r2
   bf320:	2200      	movs	r2, #0
   bf322:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bf326:	4b04      	ldr	r3, [pc, #16]	; (bf338 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bf328:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bf32a:	2301      	movs	r3, #1
  _serial = serial;
   bf32c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bf32e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bf330:	f7fc fea8 	bl	bc084 <hal_usart_init_ex>
}
   bf334:	4620      	mov	r0, r4
   bf336:	bd10      	pop	{r4, pc}
   bf338:	000c222c 	.word	0x000c222c

000bf33c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bf33c:	7c00      	ldrb	r0, [r0, #16]
   bf33e:	2300      	movs	r3, #0
   bf340:	f7fc be98 	b.w	bc074 <hal_usart_begin_config>

000bf344 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bf344:	2200      	movs	r2, #0
   bf346:	f7ff bff9 	b.w	bf33c <_ZN11USARTSerial5beginEmm>

000bf34a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bf34a:	7c00      	ldrb	r0, [r0, #16]
   bf34c:	f7fc be52 	b.w	bbff4 <hal_usart_end>

000bf350 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bf350:	7441      	strb	r1, [r0, #17]
}
   bf352:	4770      	bx	lr

000bf354 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bf354:	4770      	bx	lr

000bf356 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bf356:	4770      	bx	lr

000bf358 <_ZN9USBSerial4readEv>:
{
   bf358:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bf35a:	2100      	movs	r1, #0
   bf35c:	7c00      	ldrb	r0, [r0, #16]
   bf35e:	f7fc fec1 	bl	bc0e4 <HAL_USB_USART_Receive_Data>
}
   bf362:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bf366:	bd08      	pop	{r3, pc}

000bf368 <_ZN9USBSerial4peekEv>:
{
   bf368:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bf36a:	2101      	movs	r1, #1
   bf36c:	7c00      	ldrb	r0, [r0, #16]
   bf36e:	f7fc feb9 	bl	bc0e4 <HAL_USB_USART_Receive_Data>
}
   bf372:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bf376:	bd08      	pop	{r3, pc}

000bf378 <_ZN9USBSerial17availableForWriteEv>:
{
   bf378:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bf37a:	7c00      	ldrb	r0, [r0, #16]
   bf37c:	f7fc feaa 	bl	bc0d4 <HAL_USB_USART_Available_Data_For_Write>
}
   bf380:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bf384:	bd08      	pop	{r3, pc}

000bf386 <_ZN9USBSerial9availableEv>:
{
   bf386:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bf388:	7c00      	ldrb	r0, [r0, #16]
   bf38a:	f7fc fe9b 	bl	bc0c4 <HAL_USB_USART_Available_Data>
}
   bf38e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bf392:	bd08      	pop	{r3, pc}

000bf394 <_ZN9USBSerial5writeEh>:
{
   bf394:	b513      	push	{r0, r1, r4, lr}
   bf396:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bf398:	7c00      	ldrb	r0, [r0, #16]
{
   bf39a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bf39c:	f7fc fe9a 	bl	bc0d4 <HAL_USB_USART_Available_Data_For_Write>
   bf3a0:	2800      	cmp	r0, #0
   bf3a2:	9901      	ldr	r1, [sp, #4]
   bf3a4:	dc01      	bgt.n	bf3aa <_ZN9USBSerial5writeEh+0x16>
   bf3a6:	7c60      	ldrb	r0, [r4, #17]
   bf3a8:	b120      	cbz	r0, bf3b4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bf3aa:	7c20      	ldrb	r0, [r4, #16]
   bf3ac:	f7fc fea2 	bl	bc0f4 <HAL_USB_USART_Send_Data>
   bf3b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bf3b4:	b002      	add	sp, #8
   bf3b6:	bd10      	pop	{r4, pc}

000bf3b8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bf3b8:	7c00      	ldrb	r0, [r0, #16]
   bf3ba:	f7fc bea3 	b.w	bc104 <HAL_USB_USART_Flush_Data>

000bf3be <_ZN9USBSerialD0Ev>:
   bf3be:	b510      	push	{r4, lr}
   bf3c0:	2114      	movs	r1, #20
   bf3c2:	4604      	mov	r4, r0
   bf3c4:	f7f4 fe6b 	bl	b409e <_ZdlPvj>
   bf3c8:	4620      	mov	r0, r4
   bf3ca:	bd10      	pop	{r4, pc}

000bf3cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bf3cc:	b510      	push	{r4, lr}
   bf3ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bf3d2:	4604      	mov	r4, r0
   bf3d4:	4608      	mov	r0, r1
   bf3d6:	2100      	movs	r1, #0
   bf3d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bf3dc:	4b04      	ldr	r3, [pc, #16]	; (bf3f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bf3de:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bf3e0:	2301      	movs	r3, #1
  _serial = serial;
   bf3e2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bf3e4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bf3e6:	4611      	mov	r1, r2
   bf3e8:	f7fc fe54 	bl	bc094 <HAL_USB_USART_Init>
}
   bf3ec:	4620      	mov	r0, r4
   bf3ee:	bd10      	pop	{r4, pc}
   bf3f0:	000c225c 	.word	0x000c225c

000bf3f4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bf3f4:	7c00      	ldrb	r0, [r0, #16]
   bf3f6:	2200      	movs	r2, #0
   bf3f8:	f7fc be54 	b.w	bc0a4 <HAL_USB_USART_Begin>

000bf3fc <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bf3fc:	7c00      	ldrb	r0, [r0, #16]
   bf3fe:	f7fc be59 	b.w	bc0b4 <HAL_USB_USART_End>

000bf402 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bf402:	7c00      	ldrb	r0, [r0, #16]
   bf404:	f7fc be86 	b.w	bc114 <HAL_USB_USART_Is_Connected>

000bf408 <_Z19acquireSerialBufferv>:
{
   bf408:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bf40a:	2214      	movs	r2, #20
{
   bf40c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bf40e:	2100      	movs	r1, #0
   bf410:	f000 ff68 	bl	c02e4 <memset>
}
   bf414:	4620      	mov	r0, r4
   bf416:	bd10      	pop	{r4, pc}

000bf418 <_Z16_fetch_usbserialv>:
{
   bf418:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bf41a:	4c0f      	ldr	r4, [pc, #60]	; (bf458 <_Z16_fetch_usbserialv+0x40>)
{
   bf41c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bf41e:	a803      	add	r0, sp, #12
   bf420:	f7ff fff2 	bl	bf408 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bf424:	7821      	ldrb	r1, [r4, #0]
   bf426:	f3bf 8f5b 	dmb	ish
   bf42a:	f011 0101 	ands.w	r1, r1, #1
   bf42e:	d10f      	bne.n	bf450 <_Z16_fetch_usbserialv+0x38>
   bf430:	4620      	mov	r0, r4
   bf432:	9101      	str	r1, [sp, #4]
   bf434:	f7f4 fe42 	bl	b40bc <__cxa_guard_acquire>
   bf438:	9901      	ldr	r1, [sp, #4]
   bf43a:	b148      	cbz	r0, bf450 <_Z16_fetch_usbserialv+0x38>
   bf43c:	aa03      	add	r2, sp, #12
   bf43e:	4807      	ldr	r0, [pc, #28]	; (bf45c <_Z16_fetch_usbserialv+0x44>)
   bf440:	f7ff ffc4 	bl	bf3cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bf444:	4620      	mov	r0, r4
   bf446:	f7f4 fe3e 	bl	b40c6 <__cxa_guard_release>
   bf44a:	4805      	ldr	r0, [pc, #20]	; (bf460 <_Z16_fetch_usbserialv+0x48>)
   bf44c:	f000 fef6 	bl	c023c <atexit>
	return _usbserial;
}
   bf450:	4802      	ldr	r0, [pc, #8]	; (bf45c <_Z16_fetch_usbserialv+0x44>)
   bf452:	b008      	add	sp, #32
   bf454:	bd10      	pop	{r4, pc}
   bf456:	bf00      	nop
   bf458:	2003e6f0 	.word	0x2003e6f0
   bf45c:	2003e6f4 	.word	0x2003e6f4
   bf460:	000bf355 	.word	0x000bf355

000bf464 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bf464:	4b01      	ldr	r3, [pc, #4]	; (bf46c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bf466:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bf468:	4770      	bx	lr
   bf46a:	bf00      	nop
   bf46c:	2003d76c 	.word	0x2003d76c

000bf470 <serialEventRun>:
{
   bf470:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bf472:	4b0b      	ldr	r3, [pc, #44]	; (bf4a0 <serialEventRun+0x30>)
   bf474:	b143      	cbz	r3, bf488 <serialEventRun+0x18>
   bf476:	f7ff ffcf 	bl	bf418 <_Z16_fetch_usbserialv>
   bf47a:	6803      	ldr	r3, [r0, #0]
   bf47c:	691b      	ldr	r3, [r3, #16]
   bf47e:	4798      	blx	r3
   bf480:	2800      	cmp	r0, #0
   bf482:	dd01      	ble.n	bf488 <serialEventRun+0x18>
        serialEvent();
   bf484:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bf488:	4b06      	ldr	r3, [pc, #24]	; (bf4a4 <serialEventRun+0x34>)
   bf48a:	b143      	cbz	r3, bf49e <serialEventRun+0x2e>
   bf48c:	f000 f9ca 	bl	bf824 <_Z22__fetch_global_Serial1v>
   bf490:	6803      	ldr	r3, [r0, #0]
   bf492:	691b      	ldr	r3, [r3, #16]
   bf494:	4798      	blx	r3
   bf496:	2800      	cmp	r0, #0
   bf498:	dd01      	ble.n	bf49e <serialEventRun+0x2e>
        serialEvent1();
   bf49a:	f3af 8000 	nop.w
}
   bf49e:	bd08      	pop	{r3, pc}
	...

000bf4a8 <_post_loop>:
{
   bf4a8:	b508      	push	{r3, lr}
	serialEventRun();
   bf4aa:	f7ff ffe1 	bl	bf470 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bf4ae:	f7fc fc11 	bl	bbcd4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bf4b2:	4b01      	ldr	r3, [pc, #4]	; (bf4b8 <_post_loop+0x10>)
   bf4b4:	6018      	str	r0, [r3, #0]
}
   bf4b6:	bd08      	pop	{r3, pc}
   bf4b8:	2003e710 	.word	0x2003e710

000bf4bc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bf4bc:	4805      	ldr	r0, [pc, #20]	; (bf4d4 <_Z33system_initialize_user_backup_ramv+0x18>)
   bf4be:	4a06      	ldr	r2, [pc, #24]	; (bf4d8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bf4c0:	4906      	ldr	r1, [pc, #24]	; (bf4dc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bf4c2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bf4c4:	1a12      	subs	r2, r2, r0
   bf4c6:	f000 fee5 	bl	c0294 <memcpy>
    __backup_sram_signature = signature;
   bf4ca:	4b05      	ldr	r3, [pc, #20]	; (bf4e0 <_Z33system_initialize_user_backup_ramv+0x24>)
   bf4cc:	4a05      	ldr	r2, [pc, #20]	; (bf4e4 <_Z33system_initialize_user_backup_ramv+0x28>)
   bf4ce:	601a      	str	r2, [r3, #0]
}
   bf4d0:	bd08      	pop	{r3, pc}
   bf4d2:	bf00      	nop
   bf4d4:	2003f400 	.word	0x2003f400
   bf4d8:	2003f404 	.word	0x2003f404
   bf4dc:	000c2514 	.word	0x000c2514
   bf4e0:	2003f400 	.word	0x2003f400
   bf4e4:	9a271c1e 	.word	0x9a271c1e

000bf4e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bf4e8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bf4ea:	2300      	movs	r3, #0
   bf4ec:	9300      	str	r3, [sp, #0]
   bf4ee:	461a      	mov	r2, r3
   bf4f0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bf4f4:	f7fc fe9a 	bl	bc22c <system_ctrl_set_result>
}
   bf4f8:	b003      	add	sp, #12
   bf4fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bf500 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bf500:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bf502:	8843      	ldrh	r3, [r0, #2]
   bf504:	2b0a      	cmp	r3, #10
   bf506:	d008      	beq.n	bf51a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bf508:	2b50      	cmp	r3, #80	; 0x50
   bf50a:	d10b      	bne.n	bf524 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bf50c:	4b09      	ldr	r3, [pc, #36]	; (bf534 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bf50e:	681b      	ldr	r3, [r3, #0]
   bf510:	b14b      	cbz	r3, bf526 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bf512:	b003      	add	sp, #12
   bf514:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bf518:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bf51a:	f7ff ffe5 	bl	bf4e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bf51e:	b003      	add	sp, #12
   bf520:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bf524:	2300      	movs	r3, #0
   bf526:	9300      	str	r3, [sp, #0]
   bf528:	461a      	mov	r2, r3
   bf52a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bf52e:	f7fc fe7d 	bl	bc22c <system_ctrl_set_result>
}
   bf532:	e7f4      	b.n	bf51e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bf534:	2003e70c 	.word	0x2003e70c

000bf538 <module_user_init_hook>:
{
   bf538:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bf53a:	4812      	ldr	r0, [pc, #72]	; (bf584 <module_user_init_hook+0x4c>)
   bf53c:	2100      	movs	r1, #0
   bf53e:	f7fc ffb5 	bl	bc4ac <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bf542:	4b11      	ldr	r3, [pc, #68]	; (bf588 <module_user_init_hook+0x50>)
   bf544:	681a      	ldr	r2, [r3, #0]
   bf546:	4b11      	ldr	r3, [pc, #68]	; (bf58c <module_user_init_hook+0x54>)
   bf548:	429a      	cmp	r2, r3
   bf54a:	4b11      	ldr	r3, [pc, #68]	; (bf590 <module_user_init_hook+0x58>)
   bf54c:	bf0c      	ite	eq
   bf54e:	2201      	moveq	r2, #1
   bf550:	2200      	movne	r2, #0
   bf552:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bf554:	d001      	beq.n	bf55a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bf556:	f7ff ffb1 	bl	bf4bc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bf55a:	f7fc fba3 	bl	bbca4 <HAL_RNG_GetRandomNumber>
   bf55e:	4604      	mov	r4, r0
    srand(seed);
   bf560:	f000 fec8 	bl	c02f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bf564:	4b0b      	ldr	r3, [pc, #44]	; (bf594 <module_user_init_hook+0x5c>)
   bf566:	b113      	cbz	r3, bf56e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bf568:	4620      	mov	r0, r4
   bf56a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bf56e:	2100      	movs	r1, #0
   bf570:	4808      	ldr	r0, [pc, #32]	; (bf594 <module_user_init_hook+0x5c>)
   bf572:	f7fc fed3 	bl	bc31c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bf576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bf57a:	4807      	ldr	r0, [pc, #28]	; (bf598 <module_user_init_hook+0x60>)
   bf57c:	2100      	movs	r1, #0
   bf57e:	f7fc be4b 	b.w	bc218 <system_ctrl_set_app_request_handler>
   bf582:	bf00      	nop
   bf584:	000bf465 	.word	0x000bf465
   bf588:	2003f400 	.word	0x2003f400
   bf58c:	9a271c1e 	.word	0x9a271c1e
   bf590:	2003e708 	.word	0x2003e708
   bf594:	00000000 	.word	0x00000000
   bf598:	000bf501 	.word	0x000bf501

000bf59c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bf59c:	b508      	push	{r3, lr}
   bf59e:	4b02      	ldr	r3, [pc, #8]	; (bf5a8 <spark_protocol_instance+0xc>)
   bf5a0:	681b      	ldr	r3, [r3, #0]
   bf5a2:	681b      	ldr	r3, [r3, #0]
   bf5a4:	9301      	str	r3, [sp, #4]
   bf5a6:	bd08      	pop	{r3, pc}
   bf5a8:	0003025c 	.word	0x0003025c

000bf5ac <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bf5ac:	b508      	push	{r3, lr}
   bf5ae:	4b02      	ldr	r3, [pc, #8]	; (bf5b8 <spark_protocol_set_product_id+0xc>)
   bf5b0:	681b      	ldr	r3, [r3, #0]
   bf5b2:	685b      	ldr	r3, [r3, #4]
   bf5b4:	9301      	str	r3, [sp, #4]
   bf5b6:	bd08      	pop	{r3, pc}
   bf5b8:	0003025c 	.word	0x0003025c

000bf5bc <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bf5bc:	b508      	push	{r3, lr}
   bf5be:	4b02      	ldr	r3, [pc, #8]	; (bf5c8 <spark_protocol_set_product_firmware_version+0xc>)
   bf5c0:	681b      	ldr	r3, [r3, #0]
   bf5c2:	689b      	ldr	r3, [r3, #8]
   bf5c4:	9301      	str	r3, [sp, #4]
   bf5c6:	bd08      	pop	{r3, pc}
   bf5c8:	0003025c 	.word	0x0003025c

000bf5cc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bf5cc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bf5ce:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bf5d0:	d902      	bls.n	bf5d8 <pinAvailable+0xc>
    return false;
   bf5d2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bf5d4:	b002      	add	sp, #8
   bf5d6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bf5d8:	f1a0 030b 	sub.w	r3, r0, #11
   bf5dc:	2b02      	cmp	r3, #2
   bf5de:	d81a      	bhi.n	bf616 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bf5e0:	4c17      	ldr	r4, [pc, #92]	; (bf640 <pinAvailable+0x74>)
   bf5e2:	7821      	ldrb	r1, [r4, #0]
   bf5e4:	f3bf 8f5b 	dmb	ish
   bf5e8:	f011 0101 	ands.w	r1, r1, #1
   bf5ec:	d10b      	bne.n	bf606 <pinAvailable+0x3a>
   bf5ee:	4620      	mov	r0, r4
   bf5f0:	9101      	str	r1, [sp, #4]
   bf5f2:	f7f4 fd63 	bl	b40bc <__cxa_guard_acquire>
   bf5f6:	9901      	ldr	r1, [sp, #4]
   bf5f8:	b128      	cbz	r0, bf606 <pinAvailable+0x3a>
   bf5fa:	4812      	ldr	r0, [pc, #72]	; (bf644 <pinAvailable+0x78>)
   bf5fc:	f7ff f9b2 	bl	be964 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bf600:	4620      	mov	r0, r4
   bf602:	f7f4 fd60 	bl	b40c6 <__cxa_guard_release>
   bf606:	4b0f      	ldr	r3, [pc, #60]	; (bf644 <pinAvailable+0x78>)
   bf608:	7818      	ldrb	r0, [r3, #0]
   bf60a:	f7fc fc6b 	bl	bbee4 <hal_spi_is_enabled>
   bf60e:	2800      	cmp	r0, #0
   bf610:	d1df      	bne.n	bf5d2 <pinAvailable+0x6>
  return true; // 'pin' is available
   bf612:	2001      	movs	r0, #1
   bf614:	e7de      	b.n	bf5d4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bf616:	2801      	cmp	r0, #1
   bf618:	d809      	bhi.n	bf62e <pinAvailable+0x62>
   bf61a:	f000 f89f 	bl	bf75c <_Z19__fetch_global_Wirev>
   bf61e:	2100      	movs	r1, #0
   bf620:	7c00      	ldrb	r0, [r0, #16]
   bf622:	f7fc fbff 	bl	bbe24 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bf626:	f080 0001 	eor.w	r0, r0, #1
   bf62a:	b2c0      	uxtb	r0, r0
   bf62c:	e7d2      	b.n	bf5d4 <pinAvailable+0x8>
   bf62e:	3809      	subs	r0, #9
   bf630:	2801      	cmp	r0, #1
   bf632:	d8ee      	bhi.n	bf612 <pinAvailable+0x46>
   bf634:	f000 f8f6 	bl	bf824 <_Z22__fetch_global_Serial1v>
   bf638:	7c00      	ldrb	r0, [r0, #16]
   bf63a:	f7fc fd0b 	bl	bc054 <hal_usart_is_enabled>
   bf63e:	e7f2      	b.n	bf626 <pinAvailable+0x5a>
   bf640:	2003e44c 	.word	0x2003e44c
   bf644:	2003e450 	.word	0x2003e450

000bf648 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bf648:	2823      	cmp	r0, #35	; 0x23
{
   bf64a:	b538      	push	{r3, r4, r5, lr}
   bf64c:	4604      	mov	r4, r0
   bf64e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bf650:	d80a      	bhi.n	bf668 <pinMode+0x20>
   bf652:	29ff      	cmp	r1, #255	; 0xff
   bf654:	d008      	beq.n	bf668 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bf656:	f7ff ffb9 	bl	bf5cc <pinAvailable>
   bf65a:	b128      	cbz	r0, bf668 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bf65c:	4629      	mov	r1, r5
   bf65e:	4620      	mov	r0, r4
}
   bf660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bf664:	f7fc bb66 	b.w	bbd34 <HAL_Pin_Mode>
}
   bf668:	bd38      	pop	{r3, r4, r5, pc}

000bf66a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bf66a:	b538      	push	{r3, r4, r5, lr}
   bf66c:	4604      	mov	r4, r0
   bf66e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bf670:	f7fc fb68 	bl	bbd44 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bf674:	28ff      	cmp	r0, #255	; 0xff
   bf676:	d010      	beq.n	bf69a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bf678:	2806      	cmp	r0, #6
   bf67a:	d804      	bhi.n	bf686 <digitalWrite+0x1c>
   bf67c:	234d      	movs	r3, #77	; 0x4d
   bf67e:	fa23 f000 	lsr.w	r0, r3, r0
   bf682:	07c3      	lsls	r3, r0, #31
   bf684:	d409      	bmi.n	bf69a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bf686:	4620      	mov	r0, r4
   bf688:	f7ff ffa0 	bl	bf5cc <pinAvailable>
   bf68c:	b128      	cbz	r0, bf69a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bf68e:	4629      	mov	r1, r5
   bf690:	4620      	mov	r0, r4
}
   bf692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bf696:	f7fc bb5d 	b.w	bbd54 <HAL_GPIO_Write>
}
   bf69a:	bd38      	pop	{r3, r4, r5, pc}

000bf69c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bf69c:	b510      	push	{r4, lr}
   bf69e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bf6a0:	f7fc fb50 	bl	bbd44 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bf6a4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bf6a6:	b2db      	uxtb	r3, r3
   bf6a8:	2b01      	cmp	r3, #1
   bf6aa:	d908      	bls.n	bf6be <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bf6ac:	4620      	mov	r0, r4
   bf6ae:	f7ff ff8d 	bl	bf5cc <pinAvailable>
   bf6b2:	b120      	cbz	r0, bf6be <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bf6b4:	4620      	mov	r0, r4
}
   bf6b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bf6ba:	f7fc bb53 	b.w	bbd64 <HAL_GPIO_Read>
}
   bf6be:	2000      	movs	r0, #0
   bf6c0:	bd10      	pop	{r4, pc}

000bf6c2 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bf6c2:	280d      	cmp	r0, #13
{
   bf6c4:	b510      	push	{r4, lr}
   bf6c6:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bf6c8:	bf9c      	itt	ls
   bf6ca:	340e      	addls	r4, #14
   bf6cc:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bf6ce:	4620      	mov	r0, r4
   bf6d0:	f7ff ff7c 	bl	bf5cc <pinAvailable>
   bf6d4:	b150      	cbz	r0, bf6ec <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bf6d6:	2103      	movs	r1, #3
   bf6d8:	4620      	mov	r0, r4
   bf6da:	f7fc fb23 	bl	bbd24 <HAL_Validate_Pin_Function>
   bf6de:	2803      	cmp	r0, #3
   bf6e0:	d104      	bne.n	bf6ec <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bf6e2:	4620      	mov	r0, r4
}
   bf6e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bf6e8:	f7fc bb54 	b.w	bbd94 <hal_adc_read>
}
   bf6ec:	2000      	movs	r0, #0
   bf6ee:	bd10      	pop	{r4, pc}

000bf6f0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bf6f0:	4770      	bx	lr

000bf6f2 <__tcf_1>:
   bf6f2:	4770      	bx	lr

000bf6f4 <_Z17acquireWireBufferv>:
{
   bf6f4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bf6f6:	4b0a      	ldr	r3, [pc, #40]	; (bf720 <_Z17acquireWireBufferv+0x2c>)
   bf6f8:	6003      	str	r3, [r0, #0]
   bf6fa:	2301      	movs	r3, #1
{
   bf6fc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bf6fe:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bf700:	4908      	ldr	r1, [pc, #32]	; (bf724 <_Z17acquireWireBufferv+0x30>)
   bf702:	2020      	movs	r0, #32
   bf704:	f000 f8b4 	bl	bf870 <_ZnajRKSt9nothrow_t>
	};
   bf708:	2520      	movs	r5, #32
   bf70a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bf70c:	4905      	ldr	r1, [pc, #20]	; (bf724 <_Z17acquireWireBufferv+0x30>)
	};
   bf70e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bf710:	4628      	mov	r0, r5
   bf712:	f000 f8ad 	bl	bf870 <_ZnajRKSt9nothrow_t>
	};
   bf716:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bf71a:	4620      	mov	r0, r4
   bf71c:	bd38      	pop	{r3, r4, r5, pc}
   bf71e:	bf00      	nop
   bf720:	00010018 	.word	0x00010018
   bf724:	000c2284 	.word	0x000c2284

000bf728 <_Z18acquireWire1Bufferv>:
{
   bf728:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bf72a:	4b0a      	ldr	r3, [pc, #40]	; (bf754 <_Z18acquireWire1Bufferv+0x2c>)
   bf72c:	6003      	str	r3, [r0, #0]
   bf72e:	2301      	movs	r3, #1
{
   bf730:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bf732:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bf734:	4908      	ldr	r1, [pc, #32]	; (bf758 <_Z18acquireWire1Bufferv+0x30>)
   bf736:	2020      	movs	r0, #32
   bf738:	f000 f89a 	bl	bf870 <_ZnajRKSt9nothrow_t>
	};
   bf73c:	2520      	movs	r5, #32
   bf73e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bf740:	4905      	ldr	r1, [pc, #20]	; (bf758 <_Z18acquireWire1Bufferv+0x30>)
	};
   bf742:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bf744:	4628      	mov	r0, r5
   bf746:	f000 f893 	bl	bf870 <_ZnajRKSt9nothrow_t>
	};
   bf74a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bf74e:	4620      	mov	r0, r4
   bf750:	bd38      	pop	{r3, r4, r5, pc}
   bf752:	bf00      	nop
   bf754:	00010018 	.word	0x00010018
   bf758:	000c2284 	.word	0x000c2284

000bf75c <_Z19__fetch_global_Wirev>:
{
   bf75c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bf75e:	4d0e      	ldr	r5, [pc, #56]	; (bf798 <_Z19__fetch_global_Wirev+0x3c>)
   bf760:	7829      	ldrb	r1, [r5, #0]
   bf762:	f3bf 8f5b 	dmb	ish
   bf766:	f011 0401 	ands.w	r4, r1, #1
{
   bf76a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bf76c:	d111      	bne.n	bf792 <_Z19__fetch_global_Wirev+0x36>
   bf76e:	4628      	mov	r0, r5
   bf770:	f7f4 fca4 	bl	b40bc <__cxa_guard_acquire>
   bf774:	b168      	cbz	r0, bf792 <_Z19__fetch_global_Wirev+0x36>
   bf776:	4668      	mov	r0, sp
   bf778:	f7ff ffbc 	bl	bf6f4 <_Z17acquireWireBufferv>
   bf77c:	466a      	mov	r2, sp
   bf77e:	4621      	mov	r1, r4
   bf780:	4806      	ldr	r0, [pc, #24]	; (bf79c <_Z19__fetch_global_Wirev+0x40>)
   bf782:	f7fd fbb7 	bl	bcef4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bf786:	4628      	mov	r0, r5
   bf788:	f7f4 fc9d 	bl	b40c6 <__cxa_guard_release>
   bf78c:	4804      	ldr	r0, [pc, #16]	; (bf7a0 <_Z19__fetch_global_Wirev+0x44>)
   bf78e:	f000 fd55 	bl	c023c <atexit>
	return wire;
}
   bf792:	4802      	ldr	r0, [pc, #8]	; (bf79c <_Z19__fetch_global_Wirev+0x40>)
   bf794:	b007      	add	sp, #28
   bf796:	bd30      	pop	{r4, r5, pc}
   bf798:	2003e714 	.word	0x2003e714
   bf79c:	2003e71c 	.word	0x2003e71c
   bf7a0:	000bf6f1 	.word	0x000bf6f1

000bf7a4 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bf7a4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bf7a6:	4c0e      	ldr	r4, [pc, #56]	; (bf7e0 <_Z20__fetch_global_Wire1v+0x3c>)
   bf7a8:	7823      	ldrb	r3, [r4, #0]
   bf7aa:	f3bf 8f5b 	dmb	ish
   bf7ae:	07db      	lsls	r3, r3, #31
{
   bf7b0:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bf7b2:	d411      	bmi.n	bf7d8 <_Z20__fetch_global_Wire1v+0x34>
   bf7b4:	4620      	mov	r0, r4
   bf7b6:	f7f4 fc81 	bl	b40bc <__cxa_guard_acquire>
   bf7ba:	b168      	cbz	r0, bf7d8 <_Z20__fetch_global_Wire1v+0x34>
   bf7bc:	4668      	mov	r0, sp
   bf7be:	f7ff ffb3 	bl	bf728 <_Z18acquireWire1Bufferv>
   bf7c2:	466a      	mov	r2, sp
   bf7c4:	2101      	movs	r1, #1
   bf7c6:	4807      	ldr	r0, [pc, #28]	; (bf7e4 <_Z20__fetch_global_Wire1v+0x40>)
   bf7c8:	f7fd fb94 	bl	bcef4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bf7cc:	4620      	mov	r0, r4
   bf7ce:	f7f4 fc7a 	bl	b40c6 <__cxa_guard_release>
   bf7d2:	4805      	ldr	r0, [pc, #20]	; (bf7e8 <_Z20__fetch_global_Wire1v+0x44>)
   bf7d4:	f000 fd32 	bl	c023c <atexit>
	return wire;
}
   bf7d8:	4802      	ldr	r0, [pc, #8]	; (bf7e4 <_Z20__fetch_global_Wire1v+0x40>)
   bf7da:	b006      	add	sp, #24
   bf7dc:	bd10      	pop	{r4, pc}
   bf7de:	bf00      	nop
   bf7e0:	2003e718 	.word	0x2003e718
   bf7e4:	2003e730 	.word	0x2003e730
   bf7e8:	000bf6f3 	.word	0x000bf6f3

000bf7ec <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bf7ec:	4770      	bx	lr
	...

000bf7f0 <_Z20acquireSerial1Bufferv>:
{
   bf7f0:	b538      	push	{r3, r4, r5, lr}
   bf7f2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bf7f4:	2514      	movs	r5, #20
   bf7f6:	462a      	mov	r2, r5
   bf7f8:	2100      	movs	r1, #0
   bf7fa:	f000 fd73 	bl	c02e4 <memset>
   bf7fe:	8025      	strh	r5, [r4, #0]
   bf800:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bf802:	4907      	ldr	r1, [pc, #28]	; (bf820 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bf804:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bf806:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bf808:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bf80a:	f000 f831 	bl	bf870 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bf80e:	4904      	ldr	r1, [pc, #16]	; (bf820 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bf810:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bf812:	4628      	mov	r0, r5
   bf814:	f000 f82c 	bl	bf870 <_ZnajRKSt9nothrow_t>
    };
   bf818:	60e0      	str	r0, [r4, #12]
}
   bf81a:	4620      	mov	r0, r4
   bf81c:	bd38      	pop	{r3, r4, r5, pc}
   bf81e:	bf00      	nop
   bf820:	000c2284 	.word	0x000c2284

000bf824 <_Z22__fetch_global_Serial1v>:
{
   bf824:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bf826:	4d0e      	ldr	r5, [pc, #56]	; (bf860 <_Z22__fetch_global_Serial1v+0x3c>)
   bf828:	7829      	ldrb	r1, [r5, #0]
   bf82a:	f3bf 8f5b 	dmb	ish
   bf82e:	f011 0401 	ands.w	r4, r1, #1
{
   bf832:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bf834:	d111      	bne.n	bf85a <_Z22__fetch_global_Serial1v+0x36>
   bf836:	4628      	mov	r0, r5
   bf838:	f7f4 fc40 	bl	b40bc <__cxa_guard_acquire>
   bf83c:	b168      	cbz	r0, bf85a <_Z22__fetch_global_Serial1v+0x36>
   bf83e:	a801      	add	r0, sp, #4
   bf840:	f7ff ffd6 	bl	bf7f0 <_Z20acquireSerial1Bufferv>
   bf844:	aa01      	add	r2, sp, #4
   bf846:	4621      	mov	r1, r4
   bf848:	4806      	ldr	r0, [pc, #24]	; (bf864 <_Z22__fetch_global_Serial1v+0x40>)
   bf84a:	f7ff fd63 	bl	bf314 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bf84e:	4628      	mov	r0, r5
   bf850:	f7f4 fc39 	bl	b40c6 <__cxa_guard_release>
   bf854:	4804      	ldr	r0, [pc, #16]	; (bf868 <_Z22__fetch_global_Serial1v+0x44>)
   bf856:	f000 fcf1 	bl	c023c <atexit>
    return serial1;
}
   bf85a:	4802      	ldr	r0, [pc, #8]	; (bf864 <_Z22__fetch_global_Serial1v+0x40>)
   bf85c:	b007      	add	sp, #28
   bf85e:	bd30      	pop	{r4, r5, pc}
   bf860:	2003e744 	.word	0x2003e744
   bf864:	2003e748 	.word	0x2003e748
   bf868:	000bf7ed 	.word	0x000bf7ed

000bf86c <_ZnwjRKSt9nothrow_t>:
   bf86c:	f7f4 bc13 	b.w	b4096 <_Znwj>

000bf870 <_ZnajRKSt9nothrow_t>:
   bf870:	f7f4 bc13 	b.w	b409a <_Znaj>

000bf874 <_ZSt17__throw_bad_allocv>:
   bf874:	b508      	push	{r3, lr}
   bf876:	f7fc fdf9 	bl	bc46c <abort>

000bf87a <_ZSt20__throw_length_errorPKc>:
   bf87a:	b508      	push	{r3, lr}
   bf87c:	f7fc fdf6 	bl	bc46c <abort>

000bf880 <_ZSt25__throw_bad_function_callv>:
   bf880:	b508      	push	{r3, lr}
   bf882:	f7fc fdf3 	bl	bc46c <abort>
	...

000bf888 <__aeabi_drsub>:
   bf888:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bf88c:	e002      	b.n	bf894 <__adddf3>
   bf88e:	bf00      	nop

000bf890 <__aeabi_dsub>:
   bf890:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bf894 <__adddf3>:
   bf894:	b530      	push	{r4, r5, lr}
   bf896:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bf89a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bf89e:	ea94 0f05 	teq	r4, r5
   bf8a2:	bf08      	it	eq
   bf8a4:	ea90 0f02 	teqeq	r0, r2
   bf8a8:	bf1f      	itttt	ne
   bf8aa:	ea54 0c00 	orrsne.w	ip, r4, r0
   bf8ae:	ea55 0c02 	orrsne.w	ip, r5, r2
   bf8b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bf8b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bf8ba:	f000 80e2 	beq.w	bfa82 <__adddf3+0x1ee>
   bf8be:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bf8c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bf8c6:	bfb8      	it	lt
   bf8c8:	426d      	neglt	r5, r5
   bf8ca:	dd0c      	ble.n	bf8e6 <__adddf3+0x52>
   bf8cc:	442c      	add	r4, r5
   bf8ce:	ea80 0202 	eor.w	r2, r0, r2
   bf8d2:	ea81 0303 	eor.w	r3, r1, r3
   bf8d6:	ea82 0000 	eor.w	r0, r2, r0
   bf8da:	ea83 0101 	eor.w	r1, r3, r1
   bf8de:	ea80 0202 	eor.w	r2, r0, r2
   bf8e2:	ea81 0303 	eor.w	r3, r1, r3
   bf8e6:	2d36      	cmp	r5, #54	; 0x36
   bf8e8:	bf88      	it	hi
   bf8ea:	bd30      	pophi	{r4, r5, pc}
   bf8ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bf8f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bf8f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bf8f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bf8fc:	d002      	beq.n	bf904 <__adddf3+0x70>
   bf8fe:	4240      	negs	r0, r0
   bf900:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bf904:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bf908:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bf90c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bf910:	d002      	beq.n	bf918 <__adddf3+0x84>
   bf912:	4252      	negs	r2, r2
   bf914:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bf918:	ea94 0f05 	teq	r4, r5
   bf91c:	f000 80a7 	beq.w	bfa6e <__adddf3+0x1da>
   bf920:	f1a4 0401 	sub.w	r4, r4, #1
   bf924:	f1d5 0e20 	rsbs	lr, r5, #32
   bf928:	db0d      	blt.n	bf946 <__adddf3+0xb2>
   bf92a:	fa02 fc0e 	lsl.w	ip, r2, lr
   bf92e:	fa22 f205 	lsr.w	r2, r2, r5
   bf932:	1880      	adds	r0, r0, r2
   bf934:	f141 0100 	adc.w	r1, r1, #0
   bf938:	fa03 f20e 	lsl.w	r2, r3, lr
   bf93c:	1880      	adds	r0, r0, r2
   bf93e:	fa43 f305 	asr.w	r3, r3, r5
   bf942:	4159      	adcs	r1, r3
   bf944:	e00e      	b.n	bf964 <__adddf3+0xd0>
   bf946:	f1a5 0520 	sub.w	r5, r5, #32
   bf94a:	f10e 0e20 	add.w	lr, lr, #32
   bf94e:	2a01      	cmp	r2, #1
   bf950:	fa03 fc0e 	lsl.w	ip, r3, lr
   bf954:	bf28      	it	cs
   bf956:	f04c 0c02 	orrcs.w	ip, ip, #2
   bf95a:	fa43 f305 	asr.w	r3, r3, r5
   bf95e:	18c0      	adds	r0, r0, r3
   bf960:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bf964:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bf968:	d507      	bpl.n	bf97a <__adddf3+0xe6>
   bf96a:	f04f 0e00 	mov.w	lr, #0
   bf96e:	f1dc 0c00 	rsbs	ip, ip, #0
   bf972:	eb7e 0000 	sbcs.w	r0, lr, r0
   bf976:	eb6e 0101 	sbc.w	r1, lr, r1
   bf97a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bf97e:	d31b      	bcc.n	bf9b8 <__adddf3+0x124>
   bf980:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bf984:	d30c      	bcc.n	bf9a0 <__adddf3+0x10c>
   bf986:	0849      	lsrs	r1, r1, #1
   bf988:	ea5f 0030 	movs.w	r0, r0, rrx
   bf98c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bf990:	f104 0401 	add.w	r4, r4, #1
   bf994:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bf998:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bf99c:	f080 809a 	bcs.w	bfad4 <__adddf3+0x240>
   bf9a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bf9a4:	bf08      	it	eq
   bf9a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bf9aa:	f150 0000 	adcs.w	r0, r0, #0
   bf9ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bf9b2:	ea41 0105 	orr.w	r1, r1, r5
   bf9b6:	bd30      	pop	{r4, r5, pc}
   bf9b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bf9bc:	4140      	adcs	r0, r0
   bf9be:	eb41 0101 	adc.w	r1, r1, r1
   bf9c2:	3c01      	subs	r4, #1
   bf9c4:	bf28      	it	cs
   bf9c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bf9ca:	d2e9      	bcs.n	bf9a0 <__adddf3+0x10c>
   bf9cc:	f091 0f00 	teq	r1, #0
   bf9d0:	bf04      	itt	eq
   bf9d2:	4601      	moveq	r1, r0
   bf9d4:	2000      	moveq	r0, #0
   bf9d6:	fab1 f381 	clz	r3, r1
   bf9da:	bf08      	it	eq
   bf9dc:	3320      	addeq	r3, #32
   bf9de:	f1a3 030b 	sub.w	r3, r3, #11
   bf9e2:	f1b3 0220 	subs.w	r2, r3, #32
   bf9e6:	da0c      	bge.n	bfa02 <__adddf3+0x16e>
   bf9e8:	320c      	adds	r2, #12
   bf9ea:	dd08      	ble.n	bf9fe <__adddf3+0x16a>
   bf9ec:	f102 0c14 	add.w	ip, r2, #20
   bf9f0:	f1c2 020c 	rsb	r2, r2, #12
   bf9f4:	fa01 f00c 	lsl.w	r0, r1, ip
   bf9f8:	fa21 f102 	lsr.w	r1, r1, r2
   bf9fc:	e00c      	b.n	bfa18 <__adddf3+0x184>
   bf9fe:	f102 0214 	add.w	r2, r2, #20
   bfa02:	bfd8      	it	le
   bfa04:	f1c2 0c20 	rsble	ip, r2, #32
   bfa08:	fa01 f102 	lsl.w	r1, r1, r2
   bfa0c:	fa20 fc0c 	lsr.w	ip, r0, ip
   bfa10:	bfdc      	itt	le
   bfa12:	ea41 010c 	orrle.w	r1, r1, ip
   bfa16:	4090      	lslle	r0, r2
   bfa18:	1ae4      	subs	r4, r4, r3
   bfa1a:	bfa2      	ittt	ge
   bfa1c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bfa20:	4329      	orrge	r1, r5
   bfa22:	bd30      	popge	{r4, r5, pc}
   bfa24:	ea6f 0404 	mvn.w	r4, r4
   bfa28:	3c1f      	subs	r4, #31
   bfa2a:	da1c      	bge.n	bfa66 <__adddf3+0x1d2>
   bfa2c:	340c      	adds	r4, #12
   bfa2e:	dc0e      	bgt.n	bfa4e <__adddf3+0x1ba>
   bfa30:	f104 0414 	add.w	r4, r4, #20
   bfa34:	f1c4 0220 	rsb	r2, r4, #32
   bfa38:	fa20 f004 	lsr.w	r0, r0, r4
   bfa3c:	fa01 f302 	lsl.w	r3, r1, r2
   bfa40:	ea40 0003 	orr.w	r0, r0, r3
   bfa44:	fa21 f304 	lsr.w	r3, r1, r4
   bfa48:	ea45 0103 	orr.w	r1, r5, r3
   bfa4c:	bd30      	pop	{r4, r5, pc}
   bfa4e:	f1c4 040c 	rsb	r4, r4, #12
   bfa52:	f1c4 0220 	rsb	r2, r4, #32
   bfa56:	fa20 f002 	lsr.w	r0, r0, r2
   bfa5a:	fa01 f304 	lsl.w	r3, r1, r4
   bfa5e:	ea40 0003 	orr.w	r0, r0, r3
   bfa62:	4629      	mov	r1, r5
   bfa64:	bd30      	pop	{r4, r5, pc}
   bfa66:	fa21 f004 	lsr.w	r0, r1, r4
   bfa6a:	4629      	mov	r1, r5
   bfa6c:	bd30      	pop	{r4, r5, pc}
   bfa6e:	f094 0f00 	teq	r4, #0
   bfa72:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bfa76:	bf06      	itte	eq
   bfa78:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bfa7c:	3401      	addeq	r4, #1
   bfa7e:	3d01      	subne	r5, #1
   bfa80:	e74e      	b.n	bf920 <__adddf3+0x8c>
   bfa82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bfa86:	bf18      	it	ne
   bfa88:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bfa8c:	d029      	beq.n	bfae2 <__adddf3+0x24e>
   bfa8e:	ea94 0f05 	teq	r4, r5
   bfa92:	bf08      	it	eq
   bfa94:	ea90 0f02 	teqeq	r0, r2
   bfa98:	d005      	beq.n	bfaa6 <__adddf3+0x212>
   bfa9a:	ea54 0c00 	orrs.w	ip, r4, r0
   bfa9e:	bf04      	itt	eq
   bfaa0:	4619      	moveq	r1, r3
   bfaa2:	4610      	moveq	r0, r2
   bfaa4:	bd30      	pop	{r4, r5, pc}
   bfaa6:	ea91 0f03 	teq	r1, r3
   bfaaa:	bf1e      	ittt	ne
   bfaac:	2100      	movne	r1, #0
   bfaae:	2000      	movne	r0, #0
   bfab0:	bd30      	popne	{r4, r5, pc}
   bfab2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bfab6:	d105      	bne.n	bfac4 <__adddf3+0x230>
   bfab8:	0040      	lsls	r0, r0, #1
   bfaba:	4149      	adcs	r1, r1
   bfabc:	bf28      	it	cs
   bfabe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bfac2:	bd30      	pop	{r4, r5, pc}
   bfac4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bfac8:	bf3c      	itt	cc
   bfaca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bface:	bd30      	popcc	{r4, r5, pc}
   bfad0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bfad4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bfad8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bfadc:	f04f 0000 	mov.w	r0, #0
   bfae0:	bd30      	pop	{r4, r5, pc}
   bfae2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bfae6:	bf1a      	itte	ne
   bfae8:	4619      	movne	r1, r3
   bfaea:	4610      	movne	r0, r2
   bfaec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bfaf0:	bf1c      	itt	ne
   bfaf2:	460b      	movne	r3, r1
   bfaf4:	4602      	movne	r2, r0
   bfaf6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bfafa:	bf06      	itte	eq
   bfafc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bfb00:	ea91 0f03 	teqeq	r1, r3
   bfb04:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bfb08:	bd30      	pop	{r4, r5, pc}
   bfb0a:	bf00      	nop

000bfb0c <__aeabi_ui2d>:
   bfb0c:	f090 0f00 	teq	r0, #0
   bfb10:	bf04      	itt	eq
   bfb12:	2100      	moveq	r1, #0
   bfb14:	4770      	bxeq	lr
   bfb16:	b530      	push	{r4, r5, lr}
   bfb18:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bfb1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bfb20:	f04f 0500 	mov.w	r5, #0
   bfb24:	f04f 0100 	mov.w	r1, #0
   bfb28:	e750      	b.n	bf9cc <__adddf3+0x138>
   bfb2a:	bf00      	nop

000bfb2c <__aeabi_i2d>:
   bfb2c:	f090 0f00 	teq	r0, #0
   bfb30:	bf04      	itt	eq
   bfb32:	2100      	moveq	r1, #0
   bfb34:	4770      	bxeq	lr
   bfb36:	b530      	push	{r4, r5, lr}
   bfb38:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bfb3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bfb40:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bfb44:	bf48      	it	mi
   bfb46:	4240      	negmi	r0, r0
   bfb48:	f04f 0100 	mov.w	r1, #0
   bfb4c:	e73e      	b.n	bf9cc <__adddf3+0x138>
   bfb4e:	bf00      	nop

000bfb50 <__aeabi_f2d>:
   bfb50:	0042      	lsls	r2, r0, #1
   bfb52:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bfb56:	ea4f 0131 	mov.w	r1, r1, rrx
   bfb5a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bfb5e:	bf1f      	itttt	ne
   bfb60:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bfb64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bfb68:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bfb6c:	4770      	bxne	lr
   bfb6e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bfb72:	bf08      	it	eq
   bfb74:	4770      	bxeq	lr
   bfb76:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bfb7a:	bf04      	itt	eq
   bfb7c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bfb80:	4770      	bxeq	lr
   bfb82:	b530      	push	{r4, r5, lr}
   bfb84:	f44f 7460 	mov.w	r4, #896	; 0x380
   bfb88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bfb8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bfb90:	e71c      	b.n	bf9cc <__adddf3+0x138>
   bfb92:	bf00      	nop

000bfb94 <__aeabi_ul2d>:
   bfb94:	ea50 0201 	orrs.w	r2, r0, r1
   bfb98:	bf08      	it	eq
   bfb9a:	4770      	bxeq	lr
   bfb9c:	b530      	push	{r4, r5, lr}
   bfb9e:	f04f 0500 	mov.w	r5, #0
   bfba2:	e00a      	b.n	bfbba <__aeabi_l2d+0x16>

000bfba4 <__aeabi_l2d>:
   bfba4:	ea50 0201 	orrs.w	r2, r0, r1
   bfba8:	bf08      	it	eq
   bfbaa:	4770      	bxeq	lr
   bfbac:	b530      	push	{r4, r5, lr}
   bfbae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bfbb2:	d502      	bpl.n	bfbba <__aeabi_l2d+0x16>
   bfbb4:	4240      	negs	r0, r0
   bfbb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bfbba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bfbbe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bfbc2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bfbc6:	f43f aed8 	beq.w	bf97a <__adddf3+0xe6>
   bfbca:	f04f 0203 	mov.w	r2, #3
   bfbce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bfbd2:	bf18      	it	ne
   bfbd4:	3203      	addne	r2, #3
   bfbd6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bfbda:	bf18      	it	ne
   bfbdc:	3203      	addne	r2, #3
   bfbde:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bfbe2:	f1c2 0320 	rsb	r3, r2, #32
   bfbe6:	fa00 fc03 	lsl.w	ip, r0, r3
   bfbea:	fa20 f002 	lsr.w	r0, r0, r2
   bfbee:	fa01 fe03 	lsl.w	lr, r1, r3
   bfbf2:	ea40 000e 	orr.w	r0, r0, lr
   bfbf6:	fa21 f102 	lsr.w	r1, r1, r2
   bfbfa:	4414      	add	r4, r2
   bfbfc:	e6bd      	b.n	bf97a <__adddf3+0xe6>
   bfbfe:	bf00      	nop

000bfc00 <__aeabi_dmul>:
   bfc00:	b570      	push	{r4, r5, r6, lr}
   bfc02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bfc06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bfc0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bfc0e:	bf1d      	ittte	ne
   bfc10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bfc14:	ea94 0f0c 	teqne	r4, ip
   bfc18:	ea95 0f0c 	teqne	r5, ip
   bfc1c:	f000 f8de 	bleq	bfddc <__aeabi_dmul+0x1dc>
   bfc20:	442c      	add	r4, r5
   bfc22:	ea81 0603 	eor.w	r6, r1, r3
   bfc26:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bfc2a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bfc2e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bfc32:	bf18      	it	ne
   bfc34:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bfc38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bfc3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bfc40:	d038      	beq.n	bfcb4 <__aeabi_dmul+0xb4>
   bfc42:	fba0 ce02 	umull	ip, lr, r0, r2
   bfc46:	f04f 0500 	mov.w	r5, #0
   bfc4a:	fbe1 e502 	umlal	lr, r5, r1, r2
   bfc4e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bfc52:	fbe0 e503 	umlal	lr, r5, r0, r3
   bfc56:	f04f 0600 	mov.w	r6, #0
   bfc5a:	fbe1 5603 	umlal	r5, r6, r1, r3
   bfc5e:	f09c 0f00 	teq	ip, #0
   bfc62:	bf18      	it	ne
   bfc64:	f04e 0e01 	orrne.w	lr, lr, #1
   bfc68:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bfc6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bfc70:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bfc74:	d204      	bcs.n	bfc80 <__aeabi_dmul+0x80>
   bfc76:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bfc7a:	416d      	adcs	r5, r5
   bfc7c:	eb46 0606 	adc.w	r6, r6, r6
   bfc80:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bfc84:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bfc88:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bfc8c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bfc90:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bfc94:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bfc98:	bf88      	it	hi
   bfc9a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bfc9e:	d81e      	bhi.n	bfcde <__aeabi_dmul+0xde>
   bfca0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bfca4:	bf08      	it	eq
   bfca6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bfcaa:	f150 0000 	adcs.w	r0, r0, #0
   bfcae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bfcb2:	bd70      	pop	{r4, r5, r6, pc}
   bfcb4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bfcb8:	ea46 0101 	orr.w	r1, r6, r1
   bfcbc:	ea40 0002 	orr.w	r0, r0, r2
   bfcc0:	ea81 0103 	eor.w	r1, r1, r3
   bfcc4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bfcc8:	bfc2      	ittt	gt
   bfcca:	ebd4 050c 	rsbsgt	r5, r4, ip
   bfcce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bfcd2:	bd70      	popgt	{r4, r5, r6, pc}
   bfcd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bfcd8:	f04f 0e00 	mov.w	lr, #0
   bfcdc:	3c01      	subs	r4, #1
   bfcde:	f300 80ab 	bgt.w	bfe38 <__aeabi_dmul+0x238>
   bfce2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bfce6:	bfde      	ittt	le
   bfce8:	2000      	movle	r0, #0
   bfcea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bfcee:	bd70      	pople	{r4, r5, r6, pc}
   bfcf0:	f1c4 0400 	rsb	r4, r4, #0
   bfcf4:	3c20      	subs	r4, #32
   bfcf6:	da35      	bge.n	bfd64 <__aeabi_dmul+0x164>
   bfcf8:	340c      	adds	r4, #12
   bfcfa:	dc1b      	bgt.n	bfd34 <__aeabi_dmul+0x134>
   bfcfc:	f104 0414 	add.w	r4, r4, #20
   bfd00:	f1c4 0520 	rsb	r5, r4, #32
   bfd04:	fa00 f305 	lsl.w	r3, r0, r5
   bfd08:	fa20 f004 	lsr.w	r0, r0, r4
   bfd0c:	fa01 f205 	lsl.w	r2, r1, r5
   bfd10:	ea40 0002 	orr.w	r0, r0, r2
   bfd14:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bfd18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bfd1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bfd20:	fa21 f604 	lsr.w	r6, r1, r4
   bfd24:	eb42 0106 	adc.w	r1, r2, r6
   bfd28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bfd2c:	bf08      	it	eq
   bfd2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bfd32:	bd70      	pop	{r4, r5, r6, pc}
   bfd34:	f1c4 040c 	rsb	r4, r4, #12
   bfd38:	f1c4 0520 	rsb	r5, r4, #32
   bfd3c:	fa00 f304 	lsl.w	r3, r0, r4
   bfd40:	fa20 f005 	lsr.w	r0, r0, r5
   bfd44:	fa01 f204 	lsl.w	r2, r1, r4
   bfd48:	ea40 0002 	orr.w	r0, r0, r2
   bfd4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bfd50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bfd54:	f141 0100 	adc.w	r1, r1, #0
   bfd58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bfd5c:	bf08      	it	eq
   bfd5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bfd62:	bd70      	pop	{r4, r5, r6, pc}
   bfd64:	f1c4 0520 	rsb	r5, r4, #32
   bfd68:	fa00 f205 	lsl.w	r2, r0, r5
   bfd6c:	ea4e 0e02 	orr.w	lr, lr, r2
   bfd70:	fa20 f304 	lsr.w	r3, r0, r4
   bfd74:	fa01 f205 	lsl.w	r2, r1, r5
   bfd78:	ea43 0302 	orr.w	r3, r3, r2
   bfd7c:	fa21 f004 	lsr.w	r0, r1, r4
   bfd80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bfd84:	fa21 f204 	lsr.w	r2, r1, r4
   bfd88:	ea20 0002 	bic.w	r0, r0, r2
   bfd8c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bfd90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bfd94:	bf08      	it	eq
   bfd96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bfd9a:	bd70      	pop	{r4, r5, r6, pc}
   bfd9c:	f094 0f00 	teq	r4, #0
   bfda0:	d10f      	bne.n	bfdc2 <__aeabi_dmul+0x1c2>
   bfda2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bfda6:	0040      	lsls	r0, r0, #1
   bfda8:	eb41 0101 	adc.w	r1, r1, r1
   bfdac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bfdb0:	bf08      	it	eq
   bfdb2:	3c01      	subeq	r4, #1
   bfdb4:	d0f7      	beq.n	bfda6 <__aeabi_dmul+0x1a6>
   bfdb6:	ea41 0106 	orr.w	r1, r1, r6
   bfdba:	f095 0f00 	teq	r5, #0
   bfdbe:	bf18      	it	ne
   bfdc0:	4770      	bxne	lr
   bfdc2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bfdc6:	0052      	lsls	r2, r2, #1
   bfdc8:	eb43 0303 	adc.w	r3, r3, r3
   bfdcc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bfdd0:	bf08      	it	eq
   bfdd2:	3d01      	subeq	r5, #1
   bfdd4:	d0f7      	beq.n	bfdc6 <__aeabi_dmul+0x1c6>
   bfdd6:	ea43 0306 	orr.w	r3, r3, r6
   bfdda:	4770      	bx	lr
   bfddc:	ea94 0f0c 	teq	r4, ip
   bfde0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bfde4:	bf18      	it	ne
   bfde6:	ea95 0f0c 	teqne	r5, ip
   bfdea:	d00c      	beq.n	bfe06 <__aeabi_dmul+0x206>
   bfdec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bfdf0:	bf18      	it	ne
   bfdf2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bfdf6:	d1d1      	bne.n	bfd9c <__aeabi_dmul+0x19c>
   bfdf8:	ea81 0103 	eor.w	r1, r1, r3
   bfdfc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bfe00:	f04f 0000 	mov.w	r0, #0
   bfe04:	bd70      	pop	{r4, r5, r6, pc}
   bfe06:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bfe0a:	bf06      	itte	eq
   bfe0c:	4610      	moveq	r0, r2
   bfe0e:	4619      	moveq	r1, r3
   bfe10:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bfe14:	d019      	beq.n	bfe4a <__aeabi_dmul+0x24a>
   bfe16:	ea94 0f0c 	teq	r4, ip
   bfe1a:	d102      	bne.n	bfe22 <__aeabi_dmul+0x222>
   bfe1c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bfe20:	d113      	bne.n	bfe4a <__aeabi_dmul+0x24a>
   bfe22:	ea95 0f0c 	teq	r5, ip
   bfe26:	d105      	bne.n	bfe34 <__aeabi_dmul+0x234>
   bfe28:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bfe2c:	bf1c      	itt	ne
   bfe2e:	4610      	movne	r0, r2
   bfe30:	4619      	movne	r1, r3
   bfe32:	d10a      	bne.n	bfe4a <__aeabi_dmul+0x24a>
   bfe34:	ea81 0103 	eor.w	r1, r1, r3
   bfe38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bfe3c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bfe40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bfe44:	f04f 0000 	mov.w	r0, #0
   bfe48:	bd70      	pop	{r4, r5, r6, pc}
   bfe4a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bfe4e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bfe52:	bd70      	pop	{r4, r5, r6, pc}

000bfe54 <__aeabi_ddiv>:
   bfe54:	b570      	push	{r4, r5, r6, lr}
   bfe56:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bfe5a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bfe5e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bfe62:	bf1d      	ittte	ne
   bfe64:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bfe68:	ea94 0f0c 	teqne	r4, ip
   bfe6c:	ea95 0f0c 	teqne	r5, ip
   bfe70:	f000 f8a7 	bleq	bffc2 <__aeabi_ddiv+0x16e>
   bfe74:	eba4 0405 	sub.w	r4, r4, r5
   bfe78:	ea81 0e03 	eor.w	lr, r1, r3
   bfe7c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bfe80:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bfe84:	f000 8088 	beq.w	bff98 <__aeabi_ddiv+0x144>
   bfe88:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bfe8c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bfe90:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bfe94:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bfe98:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bfe9c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bfea0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bfea4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bfea8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bfeac:	429d      	cmp	r5, r3
   bfeae:	bf08      	it	eq
   bfeb0:	4296      	cmpeq	r6, r2
   bfeb2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bfeb6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bfeba:	d202      	bcs.n	bfec2 <__aeabi_ddiv+0x6e>
   bfebc:	085b      	lsrs	r3, r3, #1
   bfebe:	ea4f 0232 	mov.w	r2, r2, rrx
   bfec2:	1ab6      	subs	r6, r6, r2
   bfec4:	eb65 0503 	sbc.w	r5, r5, r3
   bfec8:	085b      	lsrs	r3, r3, #1
   bfeca:	ea4f 0232 	mov.w	r2, r2, rrx
   bfece:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bfed2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bfed6:	ebb6 0e02 	subs.w	lr, r6, r2
   bfeda:	eb75 0e03 	sbcs.w	lr, r5, r3
   bfede:	bf22      	ittt	cs
   bfee0:	1ab6      	subcs	r6, r6, r2
   bfee2:	4675      	movcs	r5, lr
   bfee4:	ea40 000c 	orrcs.w	r0, r0, ip
   bfee8:	085b      	lsrs	r3, r3, #1
   bfeea:	ea4f 0232 	mov.w	r2, r2, rrx
   bfeee:	ebb6 0e02 	subs.w	lr, r6, r2
   bfef2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bfef6:	bf22      	ittt	cs
   bfef8:	1ab6      	subcs	r6, r6, r2
   bfefa:	4675      	movcs	r5, lr
   bfefc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bff00:	085b      	lsrs	r3, r3, #1
   bff02:	ea4f 0232 	mov.w	r2, r2, rrx
   bff06:	ebb6 0e02 	subs.w	lr, r6, r2
   bff0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bff0e:	bf22      	ittt	cs
   bff10:	1ab6      	subcs	r6, r6, r2
   bff12:	4675      	movcs	r5, lr
   bff14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bff18:	085b      	lsrs	r3, r3, #1
   bff1a:	ea4f 0232 	mov.w	r2, r2, rrx
   bff1e:	ebb6 0e02 	subs.w	lr, r6, r2
   bff22:	eb75 0e03 	sbcs.w	lr, r5, r3
   bff26:	bf22      	ittt	cs
   bff28:	1ab6      	subcs	r6, r6, r2
   bff2a:	4675      	movcs	r5, lr
   bff2c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bff30:	ea55 0e06 	orrs.w	lr, r5, r6
   bff34:	d018      	beq.n	bff68 <__aeabi_ddiv+0x114>
   bff36:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bff3a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bff3e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bff42:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bff46:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bff4a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bff4e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bff52:	d1c0      	bne.n	bfed6 <__aeabi_ddiv+0x82>
   bff54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bff58:	d10b      	bne.n	bff72 <__aeabi_ddiv+0x11e>
   bff5a:	ea41 0100 	orr.w	r1, r1, r0
   bff5e:	f04f 0000 	mov.w	r0, #0
   bff62:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bff66:	e7b6      	b.n	bfed6 <__aeabi_ddiv+0x82>
   bff68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bff6c:	bf04      	itt	eq
   bff6e:	4301      	orreq	r1, r0
   bff70:	2000      	moveq	r0, #0
   bff72:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bff76:	bf88      	it	hi
   bff78:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bff7c:	f63f aeaf 	bhi.w	bfcde <__aeabi_dmul+0xde>
   bff80:	ebb5 0c03 	subs.w	ip, r5, r3
   bff84:	bf04      	itt	eq
   bff86:	ebb6 0c02 	subseq.w	ip, r6, r2
   bff8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bff8e:	f150 0000 	adcs.w	r0, r0, #0
   bff92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bff96:	bd70      	pop	{r4, r5, r6, pc}
   bff98:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bff9c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bffa0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bffa4:	bfc2      	ittt	gt
   bffa6:	ebd4 050c 	rsbsgt	r5, r4, ip
   bffaa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bffae:	bd70      	popgt	{r4, r5, r6, pc}
   bffb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bffb4:	f04f 0e00 	mov.w	lr, #0
   bffb8:	3c01      	subs	r4, #1
   bffba:	e690      	b.n	bfcde <__aeabi_dmul+0xde>
   bffbc:	ea45 0e06 	orr.w	lr, r5, r6
   bffc0:	e68d      	b.n	bfcde <__aeabi_dmul+0xde>
   bffc2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bffc6:	ea94 0f0c 	teq	r4, ip
   bffca:	bf08      	it	eq
   bffcc:	ea95 0f0c 	teqeq	r5, ip
   bffd0:	f43f af3b 	beq.w	bfe4a <__aeabi_dmul+0x24a>
   bffd4:	ea94 0f0c 	teq	r4, ip
   bffd8:	d10a      	bne.n	bfff0 <__aeabi_ddiv+0x19c>
   bffda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bffde:	f47f af34 	bne.w	bfe4a <__aeabi_dmul+0x24a>
   bffe2:	ea95 0f0c 	teq	r5, ip
   bffe6:	f47f af25 	bne.w	bfe34 <__aeabi_dmul+0x234>
   bffea:	4610      	mov	r0, r2
   bffec:	4619      	mov	r1, r3
   bffee:	e72c      	b.n	bfe4a <__aeabi_dmul+0x24a>
   bfff0:	ea95 0f0c 	teq	r5, ip
   bfff4:	d106      	bne.n	c0004 <__aeabi_ddiv+0x1b0>
   bfff6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bfffa:	f43f aefd 	beq.w	bfdf8 <__aeabi_dmul+0x1f8>
   bfffe:	4610      	mov	r0, r2
   c0000:	4619      	mov	r1, r3
   c0002:	e722      	b.n	bfe4a <__aeabi_dmul+0x24a>
   c0004:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c0008:	bf18      	it	ne
   c000a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c000e:	f47f aec5 	bne.w	bfd9c <__aeabi_dmul+0x19c>
   c0012:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c0016:	f47f af0d 	bne.w	bfe34 <__aeabi_dmul+0x234>
   c001a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c001e:	f47f aeeb 	bne.w	bfdf8 <__aeabi_dmul+0x1f8>
   c0022:	e712      	b.n	bfe4a <__aeabi_dmul+0x24a>

000c0024 <__gedf2>:
   c0024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c0028:	e006      	b.n	c0038 <__cmpdf2+0x4>
   c002a:	bf00      	nop

000c002c <__ledf2>:
   c002c:	f04f 0c01 	mov.w	ip, #1
   c0030:	e002      	b.n	c0038 <__cmpdf2+0x4>
   c0032:	bf00      	nop

000c0034 <__cmpdf2>:
   c0034:	f04f 0c01 	mov.w	ip, #1
   c0038:	f84d cd04 	str.w	ip, [sp, #-4]!
   c003c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c0040:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0044:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c0048:	bf18      	it	ne
   c004a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c004e:	d01b      	beq.n	c0088 <__cmpdf2+0x54>
   c0050:	b001      	add	sp, #4
   c0052:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c0056:	bf0c      	ite	eq
   c0058:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c005c:	ea91 0f03 	teqne	r1, r3
   c0060:	bf02      	ittt	eq
   c0062:	ea90 0f02 	teqeq	r0, r2
   c0066:	2000      	moveq	r0, #0
   c0068:	4770      	bxeq	lr
   c006a:	f110 0f00 	cmn.w	r0, #0
   c006e:	ea91 0f03 	teq	r1, r3
   c0072:	bf58      	it	pl
   c0074:	4299      	cmppl	r1, r3
   c0076:	bf08      	it	eq
   c0078:	4290      	cmpeq	r0, r2
   c007a:	bf2c      	ite	cs
   c007c:	17d8      	asrcs	r0, r3, #31
   c007e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c0082:	f040 0001 	orr.w	r0, r0, #1
   c0086:	4770      	bx	lr
   c0088:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c008c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0090:	d102      	bne.n	c0098 <__cmpdf2+0x64>
   c0092:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c0096:	d107      	bne.n	c00a8 <__cmpdf2+0x74>
   c0098:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c009c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c00a0:	d1d6      	bne.n	c0050 <__cmpdf2+0x1c>
   c00a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c00a6:	d0d3      	beq.n	c0050 <__cmpdf2+0x1c>
   c00a8:	f85d 0b04 	ldr.w	r0, [sp], #4
   c00ac:	4770      	bx	lr
   c00ae:	bf00      	nop

000c00b0 <__aeabi_cdrcmple>:
   c00b0:	4684      	mov	ip, r0
   c00b2:	4610      	mov	r0, r2
   c00b4:	4662      	mov	r2, ip
   c00b6:	468c      	mov	ip, r1
   c00b8:	4619      	mov	r1, r3
   c00ba:	4663      	mov	r3, ip
   c00bc:	e000      	b.n	c00c0 <__aeabi_cdcmpeq>
   c00be:	bf00      	nop

000c00c0 <__aeabi_cdcmpeq>:
   c00c0:	b501      	push	{r0, lr}
   c00c2:	f7ff ffb7 	bl	c0034 <__cmpdf2>
   c00c6:	2800      	cmp	r0, #0
   c00c8:	bf48      	it	mi
   c00ca:	f110 0f00 	cmnmi.w	r0, #0
   c00ce:	bd01      	pop	{r0, pc}

000c00d0 <__aeabi_dcmpeq>:
   c00d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   c00d4:	f7ff fff4 	bl	c00c0 <__aeabi_cdcmpeq>
   c00d8:	bf0c      	ite	eq
   c00da:	2001      	moveq	r0, #1
   c00dc:	2000      	movne	r0, #0
   c00de:	f85d fb08 	ldr.w	pc, [sp], #8
   c00e2:	bf00      	nop

000c00e4 <__aeabi_dcmplt>:
   c00e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   c00e8:	f7ff ffea 	bl	c00c0 <__aeabi_cdcmpeq>
   c00ec:	bf34      	ite	cc
   c00ee:	2001      	movcc	r0, #1
   c00f0:	2000      	movcs	r0, #0
   c00f2:	f85d fb08 	ldr.w	pc, [sp], #8
   c00f6:	bf00      	nop

000c00f8 <__aeabi_dcmple>:
   c00f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   c00fc:	f7ff ffe0 	bl	c00c0 <__aeabi_cdcmpeq>
   c0100:	bf94      	ite	ls
   c0102:	2001      	movls	r0, #1
   c0104:	2000      	movhi	r0, #0
   c0106:	f85d fb08 	ldr.w	pc, [sp], #8
   c010a:	bf00      	nop

000c010c <__aeabi_dcmpge>:
   c010c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0110:	f7ff ffce 	bl	c00b0 <__aeabi_cdrcmple>
   c0114:	bf94      	ite	ls
   c0116:	2001      	movls	r0, #1
   c0118:	2000      	movhi	r0, #0
   c011a:	f85d fb08 	ldr.w	pc, [sp], #8
   c011e:	bf00      	nop

000c0120 <__aeabi_dcmpgt>:
   c0120:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0124:	f7ff ffc4 	bl	c00b0 <__aeabi_cdrcmple>
   c0128:	bf34      	ite	cc
   c012a:	2001      	movcc	r0, #1
   c012c:	2000      	movcs	r0, #0
   c012e:	f85d fb08 	ldr.w	pc, [sp], #8
   c0132:	bf00      	nop

000c0134 <__aeabi_dcmpun>:
   c0134:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c0138:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c013c:	d102      	bne.n	c0144 <__aeabi_dcmpun+0x10>
   c013e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c0142:	d10a      	bne.n	c015a <__aeabi_dcmpun+0x26>
   c0144:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c0148:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c014c:	d102      	bne.n	c0154 <__aeabi_dcmpun+0x20>
   c014e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c0152:	d102      	bne.n	c015a <__aeabi_dcmpun+0x26>
   c0154:	f04f 0000 	mov.w	r0, #0
   c0158:	4770      	bx	lr
   c015a:	f04f 0001 	mov.w	r0, #1
   c015e:	4770      	bx	lr

000c0160 <__aeabi_d2iz>:
   c0160:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c0164:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c0168:	d215      	bcs.n	c0196 <__aeabi_d2iz+0x36>
   c016a:	d511      	bpl.n	c0190 <__aeabi_d2iz+0x30>
   c016c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c0170:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c0174:	d912      	bls.n	c019c <__aeabi_d2iz+0x3c>
   c0176:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c017a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c017e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c0182:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c0186:	fa23 f002 	lsr.w	r0, r3, r2
   c018a:	bf18      	it	ne
   c018c:	4240      	negne	r0, r0
   c018e:	4770      	bx	lr
   c0190:	f04f 0000 	mov.w	r0, #0
   c0194:	4770      	bx	lr
   c0196:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c019a:	d105      	bne.n	c01a8 <__aeabi_d2iz+0x48>
   c019c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c01a0:	bf08      	it	eq
   c01a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c01a6:	4770      	bx	lr
   c01a8:	f04f 0000 	mov.w	r0, #0
   c01ac:	4770      	bx	lr
   c01ae:	bf00      	nop

000c01b0 <__aeabi_d2uiz>:
   c01b0:	004a      	lsls	r2, r1, #1
   c01b2:	d211      	bcs.n	c01d8 <__aeabi_d2uiz+0x28>
   c01b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c01b8:	d211      	bcs.n	c01de <__aeabi_d2uiz+0x2e>
   c01ba:	d50d      	bpl.n	c01d8 <__aeabi_d2uiz+0x28>
   c01bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c01c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c01c4:	d40e      	bmi.n	c01e4 <__aeabi_d2uiz+0x34>
   c01c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c01ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c01ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c01d2:	fa23 f002 	lsr.w	r0, r3, r2
   c01d6:	4770      	bx	lr
   c01d8:	f04f 0000 	mov.w	r0, #0
   c01dc:	4770      	bx	lr
   c01de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c01e2:	d102      	bne.n	c01ea <__aeabi_d2uiz+0x3a>
   c01e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c01e8:	4770      	bx	lr
   c01ea:	f04f 0000 	mov.w	r0, #0
   c01ee:	4770      	bx	lr

000c01f0 <asctime_r>:
   c01f0:	b510      	push	{r4, lr}
   c01f2:	460c      	mov	r4, r1
   c01f4:	6941      	ldr	r1, [r0, #20]
   c01f6:	6903      	ldr	r3, [r0, #16]
   c01f8:	6982      	ldr	r2, [r0, #24]
   c01fa:	b086      	sub	sp, #24
   c01fc:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   c0200:	9104      	str	r1, [sp, #16]
   c0202:	6801      	ldr	r1, [r0, #0]
   c0204:	9103      	str	r1, [sp, #12]
   c0206:	6841      	ldr	r1, [r0, #4]
   c0208:	9102      	str	r1, [sp, #8]
   c020a:	6881      	ldr	r1, [r0, #8]
   c020c:	9101      	str	r1, [sp, #4]
   c020e:	68c1      	ldr	r1, [r0, #12]
   c0210:	9100      	str	r1, [sp, #0]
   c0212:	4907      	ldr	r1, [pc, #28]	; (c0230 <asctime_r+0x40>)
   c0214:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   c0218:	440b      	add	r3, r1
   c021a:	4906      	ldr	r1, [pc, #24]	; (c0234 <asctime_r+0x44>)
   c021c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   c0220:	440a      	add	r2, r1
   c0222:	4620      	mov	r0, r4
   c0224:	4904      	ldr	r1, [pc, #16]	; (c0238 <asctime_r+0x48>)
   c0226:	f7fc f901 	bl	bc42c <siprintf>
   c022a:	4620      	mov	r0, r4
   c022c:	b006      	add	sp, #24
   c022e:	bd10      	pop	{r4, pc}
   c0230:	000c22ba 	.word	0x000c22ba
   c0234:	000c22a5 	.word	0x000c22a5
   c0238:	000c2285 	.word	0x000c2285

000c023c <atexit>:
   c023c:	2300      	movs	r3, #0
   c023e:	4601      	mov	r1, r0
   c0240:	461a      	mov	r2, r3
   c0242:	4618      	mov	r0, r3
   c0244:	f000 ba70 	b.w	c0728 <__register_exitproc>

000c0248 <gmtime>:
   c0248:	b538      	push	{r3, r4, r5, lr}
   c024a:	4b0b      	ldr	r3, [pc, #44]	; (c0278 <gmtime+0x30>)
   c024c:	681d      	ldr	r5, [r3, #0]
   c024e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   c0250:	4604      	mov	r4, r0
   c0252:	b953      	cbnz	r3, c026a <gmtime+0x22>
   c0254:	2024      	movs	r0, #36	; 0x24
   c0256:	f7fc f8d1 	bl	bc3fc <malloc>
   c025a:	4602      	mov	r2, r0
   c025c:	63e8      	str	r0, [r5, #60]	; 0x3c
   c025e:	b920      	cbnz	r0, c026a <gmtime+0x22>
   c0260:	4b06      	ldr	r3, [pc, #24]	; (c027c <gmtime+0x34>)
   c0262:	4807      	ldr	r0, [pc, #28]	; (c0280 <gmtime+0x38>)
   c0264:	2139      	movs	r1, #57	; 0x39
   c0266:	f7fc f919 	bl	bc49c <__assert_func>
   c026a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   c026c:	4620      	mov	r0, r4
   c026e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c0272:	f7fc b933 	b.w	bc4dc <gmtime_r>
   c0276:	bf00      	nop
   c0278:	2003d76c 	.word	0x2003d76c
   c027c:	000c22de 	.word	0x000c22de
   c0280:	000c22f5 	.word	0x000c22f5

000c0284 <isprint>:
   c0284:	4b02      	ldr	r3, [pc, #8]	; (c0290 <isprint+0xc>)
   c0286:	4418      	add	r0, r3
   c0288:	7840      	ldrb	r0, [r0, #1]
   c028a:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c028e:	4770      	bx	lr
   c0290:	000c23a7 	.word	0x000c23a7

000c0294 <memcpy>:
   c0294:	440a      	add	r2, r1
   c0296:	4291      	cmp	r1, r2
   c0298:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c029c:	d100      	bne.n	c02a0 <memcpy+0xc>
   c029e:	4770      	bx	lr
   c02a0:	b510      	push	{r4, lr}
   c02a2:	f811 4b01 	ldrb.w	r4, [r1], #1
   c02a6:	f803 4f01 	strb.w	r4, [r3, #1]!
   c02aa:	4291      	cmp	r1, r2
   c02ac:	d1f9      	bne.n	c02a2 <memcpy+0xe>
   c02ae:	bd10      	pop	{r4, pc}

000c02b0 <memmove>:
   c02b0:	4288      	cmp	r0, r1
   c02b2:	b510      	push	{r4, lr}
   c02b4:	eb01 0402 	add.w	r4, r1, r2
   c02b8:	d902      	bls.n	c02c0 <memmove+0x10>
   c02ba:	4284      	cmp	r4, r0
   c02bc:	4623      	mov	r3, r4
   c02be:	d807      	bhi.n	c02d0 <memmove+0x20>
   c02c0:	1e43      	subs	r3, r0, #1
   c02c2:	42a1      	cmp	r1, r4
   c02c4:	d008      	beq.n	c02d8 <memmove+0x28>
   c02c6:	f811 2b01 	ldrb.w	r2, [r1], #1
   c02ca:	f803 2f01 	strb.w	r2, [r3, #1]!
   c02ce:	e7f8      	b.n	c02c2 <memmove+0x12>
   c02d0:	4402      	add	r2, r0
   c02d2:	4601      	mov	r1, r0
   c02d4:	428a      	cmp	r2, r1
   c02d6:	d100      	bne.n	c02da <memmove+0x2a>
   c02d8:	bd10      	pop	{r4, pc}
   c02da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c02de:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c02e2:	e7f7      	b.n	c02d4 <memmove+0x24>

000c02e4 <memset>:
   c02e4:	4402      	add	r2, r0
   c02e6:	4603      	mov	r3, r0
   c02e8:	4293      	cmp	r3, r2
   c02ea:	d100      	bne.n	c02ee <memset+0xa>
   c02ec:	4770      	bx	lr
   c02ee:	f803 1b01 	strb.w	r1, [r3], #1
   c02f2:	e7f9      	b.n	c02e8 <memset+0x4>

000c02f4 <srand>:
   c02f4:	b538      	push	{r3, r4, r5, lr}
   c02f6:	4b10      	ldr	r3, [pc, #64]	; (c0338 <srand+0x44>)
   c02f8:	681d      	ldr	r5, [r3, #0]
   c02fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c02fc:	4604      	mov	r4, r0
   c02fe:	b9b3      	cbnz	r3, c032e <srand+0x3a>
   c0300:	2018      	movs	r0, #24
   c0302:	f7fc f87b 	bl	bc3fc <malloc>
   c0306:	4602      	mov	r2, r0
   c0308:	63a8      	str	r0, [r5, #56]	; 0x38
   c030a:	b920      	cbnz	r0, c0316 <srand+0x22>
   c030c:	4b0b      	ldr	r3, [pc, #44]	; (c033c <srand+0x48>)
   c030e:	480c      	ldr	r0, [pc, #48]	; (c0340 <srand+0x4c>)
   c0310:	2142      	movs	r1, #66	; 0x42
   c0312:	f7fc f8c3 	bl	bc49c <__assert_func>
   c0316:	490b      	ldr	r1, [pc, #44]	; (c0344 <srand+0x50>)
   c0318:	4b0b      	ldr	r3, [pc, #44]	; (c0348 <srand+0x54>)
   c031a:	e9c0 1300 	strd	r1, r3, [r0]
   c031e:	4b0b      	ldr	r3, [pc, #44]	; (c034c <srand+0x58>)
   c0320:	6083      	str	r3, [r0, #8]
   c0322:	230b      	movs	r3, #11
   c0324:	8183      	strh	r3, [r0, #12]
   c0326:	2100      	movs	r1, #0
   c0328:	2001      	movs	r0, #1
   c032a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c032e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c0330:	2200      	movs	r2, #0
   c0332:	611c      	str	r4, [r3, #16]
   c0334:	615a      	str	r2, [r3, #20]
   c0336:	bd38      	pop	{r3, r4, r5, pc}
   c0338:	2003d76c 	.word	0x2003d76c
   c033c:	000c22de 	.word	0x000c22de
   c0340:	000c234e 	.word	0x000c234e
   c0344:	abcd330e 	.word	0xabcd330e
   c0348:	e66d1234 	.word	0xe66d1234
   c034c:	0005deec 	.word	0x0005deec

000c0350 <rand>:
   c0350:	4b16      	ldr	r3, [pc, #88]	; (c03ac <rand+0x5c>)
   c0352:	b510      	push	{r4, lr}
   c0354:	681c      	ldr	r4, [r3, #0]
   c0356:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   c0358:	b9b3      	cbnz	r3, c0388 <rand+0x38>
   c035a:	2018      	movs	r0, #24
   c035c:	f7fc f84e 	bl	bc3fc <malloc>
   c0360:	63a0      	str	r0, [r4, #56]	; 0x38
   c0362:	b928      	cbnz	r0, c0370 <rand+0x20>
   c0364:	4602      	mov	r2, r0
   c0366:	4b12      	ldr	r3, [pc, #72]	; (c03b0 <rand+0x60>)
   c0368:	4812      	ldr	r0, [pc, #72]	; (c03b4 <rand+0x64>)
   c036a:	214e      	movs	r1, #78	; 0x4e
   c036c:	f7fc f896 	bl	bc49c <__assert_func>
   c0370:	4a11      	ldr	r2, [pc, #68]	; (c03b8 <rand+0x68>)
   c0372:	4b12      	ldr	r3, [pc, #72]	; (c03bc <rand+0x6c>)
   c0374:	e9c0 2300 	strd	r2, r3, [r0]
   c0378:	4b11      	ldr	r3, [pc, #68]	; (c03c0 <rand+0x70>)
   c037a:	6083      	str	r3, [r0, #8]
   c037c:	230b      	movs	r3, #11
   c037e:	8183      	strh	r3, [r0, #12]
   c0380:	2201      	movs	r2, #1
   c0382:	2300      	movs	r3, #0
   c0384:	e9c0 2304 	strd	r2, r3, [r0, #16]
   c0388:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   c038a:	4a0e      	ldr	r2, [pc, #56]	; (c03c4 <rand+0x74>)
   c038c:	6920      	ldr	r0, [r4, #16]
   c038e:	6963      	ldr	r3, [r4, #20]
   c0390:	490d      	ldr	r1, [pc, #52]	; (c03c8 <rand+0x78>)
   c0392:	4342      	muls	r2, r0
   c0394:	fb01 2203 	mla	r2, r1, r3, r2
   c0398:	fba0 0101 	umull	r0, r1, r0, r1
   c039c:	1c43      	adds	r3, r0, #1
   c039e:	eb42 0001 	adc.w	r0, r2, r1
   c03a2:	e9c4 3004 	strd	r3, r0, [r4, #16]
   c03a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   c03aa:	bd10      	pop	{r4, pc}
   c03ac:	2003d76c 	.word	0x2003d76c
   c03b0:	000c22de 	.word	0x000c22de
   c03b4:	000c234e 	.word	0x000c234e
   c03b8:	abcd330e 	.word	0xabcd330e
   c03bc:	e66d1234 	.word	0xe66d1234
   c03c0:	0005deec 	.word	0x0005deec
   c03c4:	5851f42d 	.word	0x5851f42d
   c03c8:	4c957f2d 	.word	0x4c957f2d

000c03cc <strchr>:
   c03cc:	b2c9      	uxtb	r1, r1
   c03ce:	4603      	mov	r3, r0
   c03d0:	f810 2b01 	ldrb.w	r2, [r0], #1
   c03d4:	b11a      	cbz	r2, c03de <strchr+0x12>
   c03d6:	428a      	cmp	r2, r1
   c03d8:	d1f9      	bne.n	c03ce <strchr+0x2>
   c03da:	4618      	mov	r0, r3
   c03dc:	4770      	bx	lr
   c03de:	2900      	cmp	r1, #0
   c03e0:	bf18      	it	ne
   c03e2:	2300      	movne	r3, #0
   c03e4:	e7f9      	b.n	c03da <strchr+0xe>

000c03e6 <strchrnul>:
   c03e6:	b510      	push	{r4, lr}
   c03e8:	4604      	mov	r4, r0
   c03ea:	f7ff ffef 	bl	c03cc <strchr>
   c03ee:	b918      	cbnz	r0, c03f8 <strchrnul+0x12>
   c03f0:	4620      	mov	r0, r4
   c03f2:	f000 f832 	bl	c045a <strlen>
   c03f6:	4420      	add	r0, r4
   c03f8:	bd10      	pop	{r4, pc}

000c03fa <strcmp>:
   c03fa:	f810 2b01 	ldrb.w	r2, [r0], #1
   c03fe:	f811 3b01 	ldrb.w	r3, [r1], #1
   c0402:	2a01      	cmp	r2, #1
   c0404:	bf28      	it	cs
   c0406:	429a      	cmpcs	r2, r3
   c0408:	d0f7      	beq.n	c03fa <strcmp>
   c040a:	1ad0      	subs	r0, r2, r3
   c040c:	4770      	bx	lr

000c040e <strcpy>:
   c040e:	4603      	mov	r3, r0
   c0410:	f811 2b01 	ldrb.w	r2, [r1], #1
   c0414:	f803 2b01 	strb.w	r2, [r3], #1
   c0418:	2a00      	cmp	r2, #0
   c041a:	d1f9      	bne.n	c0410 <strcpy+0x2>
   c041c:	4770      	bx	lr
	...

000c0420 <strdup>:
   c0420:	4b02      	ldr	r3, [pc, #8]	; (c042c <strdup+0xc>)
   c0422:	4601      	mov	r1, r0
   c0424:	6818      	ldr	r0, [r3, #0]
   c0426:	f000 b803 	b.w	c0430 <_strdup_r>
   c042a:	bf00      	nop
   c042c:	2003d76c 	.word	0x2003d76c

000c0430 <_strdup_r>:
   c0430:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c0432:	4604      	mov	r4, r0
   c0434:	4608      	mov	r0, r1
   c0436:	460d      	mov	r5, r1
   c0438:	f000 f80f 	bl	c045a <strlen>
   c043c:	1c42      	adds	r2, r0, #1
   c043e:	4611      	mov	r1, r2
   c0440:	4620      	mov	r0, r4
   c0442:	9201      	str	r2, [sp, #4]
   c0444:	f7fc f81a 	bl	bc47c <_malloc_r>
   c0448:	4604      	mov	r4, r0
   c044a:	b118      	cbz	r0, c0454 <_strdup_r+0x24>
   c044c:	9a01      	ldr	r2, [sp, #4]
   c044e:	4629      	mov	r1, r5
   c0450:	f7ff ff20 	bl	c0294 <memcpy>
   c0454:	4620      	mov	r0, r4
   c0456:	b003      	add	sp, #12
   c0458:	bd30      	pop	{r4, r5, pc}

000c045a <strlen>:
   c045a:	4603      	mov	r3, r0
   c045c:	f813 2b01 	ldrb.w	r2, [r3], #1
   c0460:	2a00      	cmp	r2, #0
   c0462:	d1fb      	bne.n	c045c <strlen+0x2>
   c0464:	1a18      	subs	r0, r3, r0
   c0466:	3801      	subs	r0, #1
   c0468:	4770      	bx	lr

000c046a <strncmp>:
   c046a:	b510      	push	{r4, lr}
   c046c:	b17a      	cbz	r2, c048e <strncmp+0x24>
   c046e:	4603      	mov	r3, r0
   c0470:	3901      	subs	r1, #1
   c0472:	1884      	adds	r4, r0, r2
   c0474:	f813 0b01 	ldrb.w	r0, [r3], #1
   c0478:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c047c:	4290      	cmp	r0, r2
   c047e:	d101      	bne.n	c0484 <strncmp+0x1a>
   c0480:	42a3      	cmp	r3, r4
   c0482:	d101      	bne.n	c0488 <strncmp+0x1e>
   c0484:	1a80      	subs	r0, r0, r2
   c0486:	bd10      	pop	{r4, pc}
   c0488:	2800      	cmp	r0, #0
   c048a:	d1f3      	bne.n	c0474 <strncmp+0xa>
   c048c:	e7fa      	b.n	c0484 <strncmp+0x1a>
   c048e:	4610      	mov	r0, r2
   c0490:	e7f9      	b.n	c0486 <strncmp+0x1c>

000c0492 <strncpy>:
   c0492:	b510      	push	{r4, lr}
   c0494:	3901      	subs	r1, #1
   c0496:	4603      	mov	r3, r0
   c0498:	b132      	cbz	r2, c04a8 <strncpy+0x16>
   c049a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c049e:	f803 4b01 	strb.w	r4, [r3], #1
   c04a2:	3a01      	subs	r2, #1
   c04a4:	2c00      	cmp	r4, #0
   c04a6:	d1f7      	bne.n	c0498 <strncpy+0x6>
   c04a8:	441a      	add	r2, r3
   c04aa:	2100      	movs	r1, #0
   c04ac:	4293      	cmp	r3, r2
   c04ae:	d100      	bne.n	c04b2 <strncpy+0x20>
   c04b0:	bd10      	pop	{r4, pc}
   c04b2:	f803 1b01 	strb.w	r1, [r3], #1
   c04b6:	e7f9      	b.n	c04ac <strncpy+0x1a>

000c04b8 <strrchr>:
   c04b8:	b538      	push	{r3, r4, r5, lr}
   c04ba:	4603      	mov	r3, r0
   c04bc:	460c      	mov	r4, r1
   c04be:	b969      	cbnz	r1, c04dc <strrchr+0x24>
   c04c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c04c4:	f7ff bf82 	b.w	c03cc <strchr>
   c04c8:	1c43      	adds	r3, r0, #1
   c04ca:	4605      	mov	r5, r0
   c04cc:	4621      	mov	r1, r4
   c04ce:	4618      	mov	r0, r3
   c04d0:	f7ff ff7c 	bl	c03cc <strchr>
   c04d4:	2800      	cmp	r0, #0
   c04d6:	d1f7      	bne.n	c04c8 <strrchr+0x10>
   c04d8:	4628      	mov	r0, r5
   c04da:	bd38      	pop	{r3, r4, r5, pc}
   c04dc:	2500      	movs	r5, #0
   c04de:	e7f5      	b.n	c04cc <strrchr+0x14>

000c04e0 <__strtok_r>:
   c04e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   c04e2:	b908      	cbnz	r0, c04e8 <__strtok_r+0x8>
   c04e4:	6810      	ldr	r0, [r2, #0]
   c04e6:	b188      	cbz	r0, c050c <__strtok_r+0x2c>
   c04e8:	4604      	mov	r4, r0
   c04ea:	4620      	mov	r0, r4
   c04ec:	f814 5b01 	ldrb.w	r5, [r4], #1
   c04f0:	460f      	mov	r7, r1
   c04f2:	f817 6b01 	ldrb.w	r6, [r7], #1
   c04f6:	b91e      	cbnz	r6, c0500 <__strtok_r+0x20>
   c04f8:	b965      	cbnz	r5, c0514 <__strtok_r+0x34>
   c04fa:	6015      	str	r5, [r2, #0]
   c04fc:	4628      	mov	r0, r5
   c04fe:	e005      	b.n	c050c <__strtok_r+0x2c>
   c0500:	42b5      	cmp	r5, r6
   c0502:	d1f6      	bne.n	c04f2 <__strtok_r+0x12>
   c0504:	2b00      	cmp	r3, #0
   c0506:	d1f0      	bne.n	c04ea <__strtok_r+0xa>
   c0508:	6014      	str	r4, [r2, #0]
   c050a:	7003      	strb	r3, [r0, #0]
   c050c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c050e:	461c      	mov	r4, r3
   c0510:	e00c      	b.n	c052c <__strtok_r+0x4c>
   c0512:	b915      	cbnz	r5, c051a <__strtok_r+0x3a>
   c0514:	f814 3b01 	ldrb.w	r3, [r4], #1
   c0518:	460e      	mov	r6, r1
   c051a:	f816 5b01 	ldrb.w	r5, [r6], #1
   c051e:	42ab      	cmp	r3, r5
   c0520:	d1f7      	bne.n	c0512 <__strtok_r+0x32>
   c0522:	2b00      	cmp	r3, #0
   c0524:	d0f3      	beq.n	c050e <__strtok_r+0x2e>
   c0526:	2300      	movs	r3, #0
   c0528:	f804 3c01 	strb.w	r3, [r4, #-1]
   c052c:	6014      	str	r4, [r2, #0]
   c052e:	e7ed      	b.n	c050c <__strtok_r+0x2c>

000c0530 <strtok_r>:
   c0530:	2301      	movs	r3, #1
   c0532:	f7ff bfd5 	b.w	c04e0 <__strtok_r>
	...

000c0538 <_strtol_l.constprop.0>:
   c0538:	2b01      	cmp	r3, #1
   c053a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c053e:	d001      	beq.n	c0544 <_strtol_l.constprop.0+0xc>
   c0540:	2b24      	cmp	r3, #36	; 0x24
   c0542:	d906      	bls.n	c0552 <_strtol_l.constprop.0+0x1a>
   c0544:	f7fb ffa2 	bl	bc48c <__errno>
   c0548:	2316      	movs	r3, #22
   c054a:	6003      	str	r3, [r0, #0]
   c054c:	2000      	movs	r0, #0
   c054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c0552:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c0638 <_strtol_l.constprop.0+0x100>
   c0556:	460d      	mov	r5, r1
   c0558:	462e      	mov	r6, r5
   c055a:	f815 4b01 	ldrb.w	r4, [r5], #1
   c055e:	f814 700c 	ldrb.w	r7, [r4, ip]
   c0562:	f017 0708 	ands.w	r7, r7, #8
   c0566:	d1f7      	bne.n	c0558 <_strtol_l.constprop.0+0x20>
   c0568:	2c2d      	cmp	r4, #45	; 0x2d
   c056a:	d132      	bne.n	c05d2 <_strtol_l.constprop.0+0x9a>
   c056c:	782c      	ldrb	r4, [r5, #0]
   c056e:	2701      	movs	r7, #1
   c0570:	1cb5      	adds	r5, r6, #2
   c0572:	2b00      	cmp	r3, #0
   c0574:	d05b      	beq.n	c062e <_strtol_l.constprop.0+0xf6>
   c0576:	2b10      	cmp	r3, #16
   c0578:	d109      	bne.n	c058e <_strtol_l.constprop.0+0x56>
   c057a:	2c30      	cmp	r4, #48	; 0x30
   c057c:	d107      	bne.n	c058e <_strtol_l.constprop.0+0x56>
   c057e:	782c      	ldrb	r4, [r5, #0]
   c0580:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c0584:	2c58      	cmp	r4, #88	; 0x58
   c0586:	d14d      	bne.n	c0624 <_strtol_l.constprop.0+0xec>
   c0588:	786c      	ldrb	r4, [r5, #1]
   c058a:	2310      	movs	r3, #16
   c058c:	3502      	adds	r5, #2
   c058e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c0592:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c0596:	f04f 0c00 	mov.w	ip, #0
   c059a:	fbb8 f9f3 	udiv	r9, r8, r3
   c059e:	4666      	mov	r6, ip
   c05a0:	fb03 8a19 	mls	sl, r3, r9, r8
   c05a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c05a8:	f1be 0f09 	cmp.w	lr, #9
   c05ac:	d816      	bhi.n	c05dc <_strtol_l.constprop.0+0xa4>
   c05ae:	4674      	mov	r4, lr
   c05b0:	42a3      	cmp	r3, r4
   c05b2:	dd24      	ble.n	c05fe <_strtol_l.constprop.0+0xc6>
   c05b4:	f1bc 0f00 	cmp.w	ip, #0
   c05b8:	db1e      	blt.n	c05f8 <_strtol_l.constprop.0+0xc0>
   c05ba:	45b1      	cmp	r9, r6
   c05bc:	d31c      	bcc.n	c05f8 <_strtol_l.constprop.0+0xc0>
   c05be:	d101      	bne.n	c05c4 <_strtol_l.constprop.0+0x8c>
   c05c0:	45a2      	cmp	sl, r4
   c05c2:	db19      	blt.n	c05f8 <_strtol_l.constprop.0+0xc0>
   c05c4:	fb06 4603 	mla	r6, r6, r3, r4
   c05c8:	f04f 0c01 	mov.w	ip, #1
   c05cc:	f815 4b01 	ldrb.w	r4, [r5], #1
   c05d0:	e7e8      	b.n	c05a4 <_strtol_l.constprop.0+0x6c>
   c05d2:	2c2b      	cmp	r4, #43	; 0x2b
   c05d4:	bf04      	itt	eq
   c05d6:	782c      	ldrbeq	r4, [r5, #0]
   c05d8:	1cb5      	addeq	r5, r6, #2
   c05da:	e7ca      	b.n	c0572 <_strtol_l.constprop.0+0x3a>
   c05dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c05e0:	f1be 0f19 	cmp.w	lr, #25
   c05e4:	d801      	bhi.n	c05ea <_strtol_l.constprop.0+0xb2>
   c05e6:	3c37      	subs	r4, #55	; 0x37
   c05e8:	e7e2      	b.n	c05b0 <_strtol_l.constprop.0+0x78>
   c05ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c05ee:	f1be 0f19 	cmp.w	lr, #25
   c05f2:	d804      	bhi.n	c05fe <_strtol_l.constprop.0+0xc6>
   c05f4:	3c57      	subs	r4, #87	; 0x57
   c05f6:	e7db      	b.n	c05b0 <_strtol_l.constprop.0+0x78>
   c05f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c05fc:	e7e6      	b.n	c05cc <_strtol_l.constprop.0+0x94>
   c05fe:	f1bc 0f00 	cmp.w	ip, #0
   c0602:	da05      	bge.n	c0610 <_strtol_l.constprop.0+0xd8>
   c0604:	2322      	movs	r3, #34	; 0x22
   c0606:	6003      	str	r3, [r0, #0]
   c0608:	4646      	mov	r6, r8
   c060a:	b942      	cbnz	r2, c061e <_strtol_l.constprop.0+0xe6>
   c060c:	4630      	mov	r0, r6
   c060e:	e79e      	b.n	c054e <_strtol_l.constprop.0+0x16>
   c0610:	b107      	cbz	r7, c0614 <_strtol_l.constprop.0+0xdc>
   c0612:	4276      	negs	r6, r6
   c0614:	2a00      	cmp	r2, #0
   c0616:	d0f9      	beq.n	c060c <_strtol_l.constprop.0+0xd4>
   c0618:	f1bc 0f00 	cmp.w	ip, #0
   c061c:	d000      	beq.n	c0620 <_strtol_l.constprop.0+0xe8>
   c061e:	1e69      	subs	r1, r5, #1
   c0620:	6011      	str	r1, [r2, #0]
   c0622:	e7f3      	b.n	c060c <_strtol_l.constprop.0+0xd4>
   c0624:	2430      	movs	r4, #48	; 0x30
   c0626:	2b00      	cmp	r3, #0
   c0628:	d1b1      	bne.n	c058e <_strtol_l.constprop.0+0x56>
   c062a:	2308      	movs	r3, #8
   c062c:	e7af      	b.n	c058e <_strtol_l.constprop.0+0x56>
   c062e:	2c30      	cmp	r4, #48	; 0x30
   c0630:	d0a5      	beq.n	c057e <_strtol_l.constprop.0+0x46>
   c0632:	230a      	movs	r3, #10
   c0634:	e7ab      	b.n	c058e <_strtol_l.constprop.0+0x56>
   c0636:	bf00      	nop
   c0638:	000c23a8 	.word	0x000c23a8

000c063c <strtol>:
   c063c:	4613      	mov	r3, r2
   c063e:	460a      	mov	r2, r1
   c0640:	4601      	mov	r1, r0
   c0642:	4802      	ldr	r0, [pc, #8]	; (c064c <strtol+0x10>)
   c0644:	6800      	ldr	r0, [r0, #0]
   c0646:	f7ff bf77 	b.w	c0538 <_strtol_l.constprop.0>
   c064a:	bf00      	nop
   c064c:	2003d76c 	.word	0x2003d76c

000c0650 <close>:
   c0650:	4b02      	ldr	r3, [pc, #8]	; (c065c <close+0xc>)
   c0652:	4601      	mov	r1, r0
   c0654:	6818      	ldr	r0, [r3, #0]
   c0656:	f000 b8c9 	b.w	c07ec <_close_r>
   c065a:	bf00      	nop
   c065c:	2003d76c 	.word	0x2003d76c

000c0660 <fstat>:
   c0660:	4b02      	ldr	r3, [pc, #8]	; (c066c <fstat+0xc>)
   c0662:	460a      	mov	r2, r1
   c0664:	4601      	mov	r1, r0
   c0666:	6818      	ldr	r0, [r3, #0]
   c0668:	f000 b8d0 	b.w	c080c <_fstat_r>
   c066c:	2003d76c 	.word	0x2003d76c

000c0670 <lseek>:
   c0670:	4613      	mov	r3, r2
   c0672:	460a      	mov	r2, r1
   c0674:	4601      	mov	r1, r0
   c0676:	4802      	ldr	r0, [pc, #8]	; (c0680 <lseek+0x10>)
   c0678:	6800      	ldr	r0, [r0, #0]
   c067a:	f000 b8dd 	b.w	c0838 <_lseek_r>
   c067e:	bf00      	nop
   c0680:	2003d76c 	.word	0x2003d76c

000c0684 <open>:
   c0684:	b40e      	push	{r1, r2, r3}
   c0686:	b503      	push	{r0, r1, lr}
   c0688:	ab03      	add	r3, sp, #12
   c068a:	4601      	mov	r1, r0
   c068c:	4806      	ldr	r0, [pc, #24]	; (c06a8 <open+0x24>)
   c068e:	f853 2b04 	ldr.w	r2, [r3], #4
   c0692:	9301      	str	r3, [sp, #4]
   c0694:	6800      	ldr	r0, [r0, #0]
   c0696:	9b04      	ldr	r3, [sp, #16]
   c0698:	f000 f8e0 	bl	c085c <_open_r>
   c069c:	b002      	add	sp, #8
   c069e:	f85d eb04 	ldr.w	lr, [sp], #4
   c06a2:	b003      	add	sp, #12
   c06a4:	4770      	bx	lr
   c06a6:	bf00      	nop
   c06a8:	2003d76c 	.word	0x2003d76c

000c06ac <read>:
   c06ac:	4613      	mov	r3, r2
   c06ae:	460a      	mov	r2, r1
   c06b0:	4601      	mov	r1, r0
   c06b2:	4802      	ldr	r0, [pc, #8]	; (c06bc <read+0x10>)
   c06b4:	6800      	ldr	r0, [r0, #0]
   c06b6:	f000 b8e3 	b.w	c0880 <_read_r>
   c06ba:	bf00      	nop
   c06bc:	2003d76c 	.word	0x2003d76c

000c06c0 <unlink>:
   c06c0:	4b02      	ldr	r3, [pc, #8]	; (c06cc <unlink+0xc>)
   c06c2:	4601      	mov	r1, r0
   c06c4:	6818      	ldr	r0, [r3, #0]
   c06c6:	f000 b80d 	b.w	c06e4 <_unlink_r>
   c06ca:	bf00      	nop
   c06cc:	2003d76c 	.word	0x2003d76c

000c06d0 <write>:
   c06d0:	4613      	mov	r3, r2
   c06d2:	460a      	mov	r2, r1
   c06d4:	4601      	mov	r1, r0
   c06d6:	4802      	ldr	r0, [pc, #8]	; (c06e0 <write+0x10>)
   c06d8:	6800      	ldr	r0, [r0, #0]
   c06da:	f000 b813 	b.w	c0704 <_write_r>
   c06de:	bf00      	nop
   c06e0:	2003d76c 	.word	0x2003d76c

000c06e4 <_unlink_r>:
   c06e4:	b538      	push	{r3, r4, r5, lr}
   c06e6:	4d06      	ldr	r5, [pc, #24]	; (c0700 <_unlink_r+0x1c>)
   c06e8:	2300      	movs	r3, #0
   c06ea:	4604      	mov	r4, r0
   c06ec:	4608      	mov	r0, r1
   c06ee:	602b      	str	r3, [r5, #0]
   c06f0:	f7fb fc60 	bl	bbfb4 <_unlink>
   c06f4:	1c43      	adds	r3, r0, #1
   c06f6:	d102      	bne.n	c06fe <_unlink_r+0x1a>
   c06f8:	682b      	ldr	r3, [r5, #0]
   c06fa:	b103      	cbz	r3, c06fe <_unlink_r+0x1a>
   c06fc:	6023      	str	r3, [r4, #0]
   c06fe:	bd38      	pop	{r3, r4, r5, pc}
   c0700:	2003e7f0 	.word	0x2003e7f0

000c0704 <_write_r>:
   c0704:	b538      	push	{r3, r4, r5, lr}
   c0706:	4d07      	ldr	r5, [pc, #28]	; (c0724 <_write_r+0x20>)
   c0708:	4604      	mov	r4, r0
   c070a:	4608      	mov	r0, r1
   c070c:	4611      	mov	r1, r2
   c070e:	2200      	movs	r2, #0
   c0710:	602a      	str	r2, [r5, #0]
   c0712:	461a      	mov	r2, r3
   c0714:	f7fb fc16 	bl	bbf44 <_write>
   c0718:	1c43      	adds	r3, r0, #1
   c071a:	d102      	bne.n	c0722 <_write_r+0x1e>
   c071c:	682b      	ldr	r3, [r5, #0]
   c071e:	b103      	cbz	r3, c0722 <_write_r+0x1e>
   c0720:	6023      	str	r3, [r4, #0]
   c0722:	bd38      	pop	{r3, r4, r5, pc}
   c0724:	2003e7f0 	.word	0x2003e7f0

000c0728 <__register_exitproc>:
   c0728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c072c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c07e8 <__register_exitproc+0xc0>
   c0730:	4606      	mov	r6, r0
   c0732:	f8d8 0000 	ldr.w	r0, [r8]
   c0736:	461f      	mov	r7, r3
   c0738:	460d      	mov	r5, r1
   c073a:	4691      	mov	r9, r2
   c073c:	f000 f878 	bl	c0830 <__retarget_lock_acquire_recursive>
   c0740:	4b25      	ldr	r3, [pc, #148]	; (c07d8 <__register_exitproc+0xb0>)
   c0742:	681c      	ldr	r4, [r3, #0]
   c0744:	b934      	cbnz	r4, c0754 <__register_exitproc+0x2c>
   c0746:	4c25      	ldr	r4, [pc, #148]	; (c07dc <__register_exitproc+0xb4>)
   c0748:	601c      	str	r4, [r3, #0]
   c074a:	4b25      	ldr	r3, [pc, #148]	; (c07e0 <__register_exitproc+0xb8>)
   c074c:	b113      	cbz	r3, c0754 <__register_exitproc+0x2c>
   c074e:	681b      	ldr	r3, [r3, #0]
   c0750:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c0754:	6863      	ldr	r3, [r4, #4]
   c0756:	2b1f      	cmp	r3, #31
   c0758:	dd07      	ble.n	c076a <__register_exitproc+0x42>
   c075a:	f8d8 0000 	ldr.w	r0, [r8]
   c075e:	f000 f869 	bl	c0834 <__retarget_lock_release_recursive>
   c0762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c0766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c076a:	b34e      	cbz	r6, c07c0 <__register_exitproc+0x98>
   c076c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c0770:	b988      	cbnz	r0, c0796 <__register_exitproc+0x6e>
   c0772:	4b1c      	ldr	r3, [pc, #112]	; (c07e4 <__register_exitproc+0xbc>)
   c0774:	b923      	cbnz	r3, c0780 <__register_exitproc+0x58>
   c0776:	f8d8 0000 	ldr.w	r0, [r8]
   c077a:	f000 f85a 	bl	c0832 <__retarget_lock_release>
   c077e:	e7f0      	b.n	c0762 <__register_exitproc+0x3a>
   c0780:	f44f 7084 	mov.w	r0, #264	; 0x108
   c0784:	f7fb fe3a 	bl	bc3fc <malloc>
   c0788:	2800      	cmp	r0, #0
   c078a:	d0f4      	beq.n	c0776 <__register_exitproc+0x4e>
   c078c:	2300      	movs	r3, #0
   c078e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c0792:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c0796:	6863      	ldr	r3, [r4, #4]
   c0798:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c079c:	2201      	movs	r2, #1
   c079e:	409a      	lsls	r2, r3
   c07a0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c07a4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c07a8:	4313      	orrs	r3, r2
   c07aa:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c07ae:	2e02      	cmp	r6, #2
   c07b0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c07b4:	bf02      	ittt	eq
   c07b6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c07ba:	4313      	orreq	r3, r2
   c07bc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c07c0:	6863      	ldr	r3, [r4, #4]
   c07c2:	f8d8 0000 	ldr.w	r0, [r8]
   c07c6:	1c5a      	adds	r2, r3, #1
   c07c8:	3302      	adds	r3, #2
   c07ca:	6062      	str	r2, [r4, #4]
   c07cc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c07d0:	f000 f830 	bl	c0834 <__retarget_lock_release_recursive>
   c07d4:	2000      	movs	r0, #0
   c07d6:	e7c6      	b.n	c0766 <__register_exitproc+0x3e>
   c07d8:	2003e7e8 	.word	0x2003e7e8
   c07dc:	2003e75c 	.word	0x2003e75c
   c07e0:	00000000 	.word	0x00000000
   c07e4:	000bc3fd 	.word	0x000bc3fd
   c07e8:	2003d7d0 	.word	0x2003d7d0

000c07ec <_close_r>:
   c07ec:	b538      	push	{r3, r4, r5, lr}
   c07ee:	4d06      	ldr	r5, [pc, #24]	; (c0808 <_close_r+0x1c>)
   c07f0:	2300      	movs	r3, #0
   c07f2:	4604      	mov	r4, r0
   c07f4:	4608      	mov	r0, r1
   c07f6:	602b      	str	r3, [r5, #0]
   c07f8:	f7fb fbb4 	bl	bbf64 <_close>
   c07fc:	1c43      	adds	r3, r0, #1
   c07fe:	d102      	bne.n	c0806 <_close_r+0x1a>
   c0800:	682b      	ldr	r3, [r5, #0]
   c0802:	b103      	cbz	r3, c0806 <_close_r+0x1a>
   c0804:	6023      	str	r3, [r4, #0]
   c0806:	bd38      	pop	{r3, r4, r5, pc}
   c0808:	2003e7f0 	.word	0x2003e7f0

000c080c <_fstat_r>:
   c080c:	b538      	push	{r3, r4, r5, lr}
   c080e:	4d07      	ldr	r5, [pc, #28]	; (c082c <_fstat_r+0x20>)
   c0810:	2300      	movs	r3, #0
   c0812:	4604      	mov	r4, r0
   c0814:	4608      	mov	r0, r1
   c0816:	4611      	mov	r1, r2
   c0818:	602b      	str	r3, [r5, #0]
   c081a:	f7fb fbab 	bl	bbf74 <_fstat>
   c081e:	1c43      	adds	r3, r0, #1
   c0820:	d102      	bne.n	c0828 <_fstat_r+0x1c>
   c0822:	682b      	ldr	r3, [r5, #0]
   c0824:	b103      	cbz	r3, c0828 <_fstat_r+0x1c>
   c0826:	6023      	str	r3, [r4, #0]
   c0828:	bd38      	pop	{r3, r4, r5, pc}
   c082a:	bf00      	nop
   c082c:	2003e7f0 	.word	0x2003e7f0

000c0830 <__retarget_lock_acquire_recursive>:
   c0830:	4770      	bx	lr

000c0832 <__retarget_lock_release>:
   c0832:	4770      	bx	lr

000c0834 <__retarget_lock_release_recursive>:
   c0834:	4770      	bx	lr
	...

000c0838 <_lseek_r>:
   c0838:	b538      	push	{r3, r4, r5, lr}
   c083a:	4d07      	ldr	r5, [pc, #28]	; (c0858 <_lseek_r+0x20>)
   c083c:	4604      	mov	r4, r0
   c083e:	4608      	mov	r0, r1
   c0840:	4611      	mov	r1, r2
   c0842:	2200      	movs	r2, #0
   c0844:	602a      	str	r2, [r5, #0]
   c0846:	461a      	mov	r2, r3
   c0848:	f7fb fb9c 	bl	bbf84 <_lseek>
   c084c:	1c43      	adds	r3, r0, #1
   c084e:	d102      	bne.n	c0856 <_lseek_r+0x1e>
   c0850:	682b      	ldr	r3, [r5, #0]
   c0852:	b103      	cbz	r3, c0856 <_lseek_r+0x1e>
   c0854:	6023      	str	r3, [r4, #0]
   c0856:	bd38      	pop	{r3, r4, r5, pc}
   c0858:	2003e7f0 	.word	0x2003e7f0

000c085c <_open_r>:
   c085c:	b538      	push	{r3, r4, r5, lr}
   c085e:	4d07      	ldr	r5, [pc, #28]	; (c087c <_open_r+0x20>)
   c0860:	4604      	mov	r4, r0
   c0862:	4608      	mov	r0, r1
   c0864:	4611      	mov	r1, r2
   c0866:	2200      	movs	r2, #0
   c0868:	602a      	str	r2, [r5, #0]
   c086a:	461a      	mov	r2, r3
   c086c:	f7fb fb62 	bl	bbf34 <_open>
   c0870:	1c43      	adds	r3, r0, #1
   c0872:	d102      	bne.n	c087a <_open_r+0x1e>
   c0874:	682b      	ldr	r3, [r5, #0]
   c0876:	b103      	cbz	r3, c087a <_open_r+0x1e>
   c0878:	6023      	str	r3, [r4, #0]
   c087a:	bd38      	pop	{r3, r4, r5, pc}
   c087c:	2003e7f0 	.word	0x2003e7f0

000c0880 <_read_r>:
   c0880:	b538      	push	{r3, r4, r5, lr}
   c0882:	4d07      	ldr	r5, [pc, #28]	; (c08a0 <_read_r+0x20>)
   c0884:	4604      	mov	r4, r0
   c0886:	4608      	mov	r0, r1
   c0888:	4611      	mov	r1, r2
   c088a:	2200      	movs	r2, #0
   c088c:	602a      	str	r2, [r5, #0]
   c088e:	461a      	mov	r2, r3
   c0890:	f7fb fb60 	bl	bbf54 <_read>
   c0894:	1c43      	adds	r3, r0, #1
   c0896:	d102      	bne.n	c089e <_read_r+0x1e>
   c0898:	682b      	ldr	r3, [r5, #0]
   c089a:	b103      	cbz	r3, c089e <_read_r+0x1e>
   c089c:	6023      	str	r3, [r4, #0]
   c089e:	bd38      	pop	{r3, r4, r5, pc}
   c08a0:	2003e7f0 	.word	0x2003e7f0

000c08a4 <dynalib_user>:
   c08a4:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   c08b4:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   c08c4:	72697620 6c617574 63654400 65687069      virtual.Deciphe
   c08d4:	20646572 61746164 70657220 2074726f     red data report 
   c08e4:	66206425 206d6f72 65646f6e 00642520     %d from node %d.
   c08f4:	69636544 72656870 61206465 7472656c     Deciphered alert
   c0904:	70657220 2074726f 6d6f7266 646f6e20      report from nod
   c0914:	64252065 6e655300 63612074 776f6e6b     e %d.Sent acknow
   c0924:	6764656c 746e656d 206f7420 65646f4e     ledgment to Node
   c0934:	2c642520 6d697420 203d2065 61207325      %d, time = %s a
   c0944:	6620646e 75716572 79636e65 20642520     nd frequency %d 
   c0954:	756e696d 00736574 70736552 65736e6f     minutes.Response
   c0964:	746f6e20 6b636120 6c776f6e 65676465      not acknowledge
   c0974:	6f6e0064 00736564 6c6c756e 44496400     d.nodes.null.dID
   c0984:	646f6e00 6f4e0065 6e206564 65626d75     .node.Node numbe
   c0994:	6f6e2072 6f662074 00646e75 746e6553     r not found.Sent
   c09a4:	73657220 736e6f70 6f742065 6e657320      response to sen
   c09b4:	54726f73 20657079 6e206425 2065646f     sorType %d node 
   c09c4:	202c6425 656d6974 25203d20 6e612073     %d, time = %s an
   c09d4:	72662064 65757165 2079636e 6d206425     d frequency %d m
   c09e4:	74756e69 52007365 6f707365 2065736e     inutes.Response 
   c09f4:	65636572 64657669 63757320 73736563     received success
   c0a04:	6c6c7566 72500079 20746e69 65646f4e     fully.Print Node
   c0a14:	73657220 3a746c75 73614c00 6e652074      result:.Last en
   c0a24:	20797274 69207461 25203d20 616c0064     try at i = %d.la
   c0a34:	4e007473 2065646f 202c6425 69766564     st.Node %d, devi
   c0a44:	44496563 7325203a 616c202c 6f437473     ceID: %s, lastCo
   c0a54:	63656e6e 3a646574 2c732520 70797420     nnected: %s, typ
   c0a64:	64252065 646f6e00 74614465 6e690061     e %d.nodeData.in
   c0a74:	66207469 656c6961 6f4c0064 52204152     it failed.LoRA R
   c0a84:	6f696461 696e6920 6c616974 64657a69     adio initialized
   c0a94:	20736120 61672061 61776574 69772079      as a gateway wi
   c0aa4:	61206874 76656420 49656369 666f2044     th a deviceID of
   c0ab4:	00732520 41526f4c 64615220 69206f69      %s.LoRA Radio i
   c0ac4:	6974696e 7a696c61 61206465 6f6e2073     nitialized as no
   c0ad4:	25206564 6e612069 20612064 69766564     de %i and a devi
   c0ae4:	44496563 20666f20 4c007325 2041526f     ceID of %s.LoRA 
   c0af4:	69646152 6e69206f 61697469 657a696c     Radio initialize
   c0b04:	73612064 206e6120 6f636e75 6769666e     d as an unconfig
   c0b14:	64657275 646f6e20 69252065 646e6120     ured node %i and
   c0b24:	64206120 63697665 20444965 2520666f      a deviceID of %
   c0b34:	61500073 64657372 63755320 73736563     s.Parsed Success
   c0b44:	6c6c7566 61500079 6e697372 72652067     fully.Parsing er
   c0b54:	00726f72 6373696d 69666e6f 65727567     ror.misconfigure
   c0b64:	44002064 20617461 2d6b6341 646f4e20     d .Data Ack- Nod
   c0b74:	756e2065 7265626d 20642520 696c6176     e number %d vali
   c0b84:	61440064 41206174 2d206b63 646f4e20     d.Data Ack - Nod
   c0b94:	756e2065 7265626d 20642520 69207369     e number %d is i
   c0ba4:	6c61766e 2d206469 73657220 69747465     nvalid - resetti
   c0bb4:	4100676e 6f6e6b63 67656c77 746e656d     ng.Acknowlegment
   c0bc4:	206f7420 6f6e7325 25206564 656d2064      to %snode %d me
   c0bd4:	67617373 64252065 6974202c 3d20656d     ssage %d, time =
   c0be4:	20732520 20646e61 71657266 636e6575      %s and frequenc
   c0bf4:	64252079 6e696d20 73657475 73655200     y %d minutes.Res
   c0c04:	736e6f70 65722065 76696563 73206465     ponse received s
   c0c14:	65636375 75667373 20796c6c 7573202d     uccessfully - su
   c0c24:	73656363 61722073 25206574 66322e34     ccess rate %4.2f
   c0c34:	73655200 736e6f70 6f6e2065 63612074     .Response not ac
   c0c44:	776f6e6b 6764656c 2d206465 63757320     knowledged - suc
   c0c54:	73736563 74617220 34252065 0066322e     cess rate %4.2f.
   c0c64:	70736552 69646e6f 7520676e 676e6973     Responding using
   c0c74:	65687420 20732520 7373656d 20656761      the %s message 
   c0c84:	65707974 6e696600 646f4e64 6d754e65     type.findNodeNum
   c0c94:	20726562 206e6172 2074756f 6520666f     ber ran out of e
   c0ca4:	6972746e 61207365 20692074 6425203d     ntries at i = %d
   c0cb4:	77654e00 646f6e20 69772065 62206c6c     .New node will b
   c0cc4:	73612065 6e676973 6e206465 65626d75     e assigned numbe
   c0cd4:	64252072 6564202c 65636976 6f204449     r %d, deviceID o
   c0ce4:	73252066 646e6120 70797420 666f2065     f %s and type of
   c0cf4:	52003320 72757465 676e696e 646e6920      3.Returning ind
   c0d04:	25207865 6f4a0064 72206e69 65757165     ex %d.Join reque
   c0d14:	66207473 206d6f72 6f636e55 6769666e     st from Unconfig
   c0d24:	64657275 646f6e20 73252065 6c697720     ured node %s wil
   c0d34:	6863206c 65676e61 646f6e20 756e2065     l change node nu
   c0d44:	7265626d 6f726620 6425206d 206f7420     mber from %d to 
   c0d54:	4a006425 206e696f 75716572 20747365     %d.Join request 
   c0d64:	6d6f7266 20732520 68746977 646f6e20     from %s with nod
   c0d74:	64252065 73202d20 69747465 6320676e     e %d - setting c
   c0d84:	6b636f6c 646e6120 74657320 676e6974     lock and setting
   c0d94:	6e657320 54726f73 20657079 25206f74      sensorType to %
   c0da4:	654d0064 67617373 616d2065 20636967     d.Message magic 
   c0db4:	626d756e 6f207265 64252066 64696420     number of %d did
   c0dc4:	746f6e20 74616d20 74206863 4d206568      not match the M
   c0dd4:	63696761 6d754e20 20726562 6d206e69     agic Number in m
   c0de4:	726f6d65 64252079 49202d20 726f6e67     emory %d - Ignor
   c0df4:	00676e69 6d6f7246 646f6e20 64252065     ing.From node %d
   c0e04:	74697720 73722068 253d6973 202d2064      with rssi=%d - 
   c0e14:	73252061 73656d20 65676173 20666f20     a %s message of 
   c0e24:	676e656c 25206874 6e692064 20642520     length %d in %d 
   c0e34:	73706f68 20655700 20657261 61647075     hops.We are upda
   c0e44:	676e6974 65687420 62757020 6873696c     ting the publish
   c0e54:	65726620 6e657571 74207963 6925206f      frequency to %i
   c0e64:	6e696d20 73657475 70655200 6974726f      minutes.Reporti
   c0e74:	6620676e 75716572 79636e65 636e7520     ng frequency unc
   c0e84:	676e6168 00006465                       hanged..

000c0e8c <_ZTV16JsonParserStaticILj1024ELj50EE>:
	...
   c0e94:	000b40dd 000b40f1                       .@...@..

000c0e9c <_ZTV14LoRA_Functions>:
	...
   c0ea4:	000b40cd 000b40cf 6f706552 66207472     .@...@..Report f
   c0eb4:	75716572 79636e65 20642520 736e696d     requency %d mins
   c0ec4:	656e202c 65207478 746e6576 206e6920     , next event in 
   c0ed4:	20756c25 6f636573 0073646e 6d6f7246     %lu seconds.From
   c0ee4:	20732520 25206f74 69772073 69206874      %s to %s with i
   c0ef4:	6c61766e 74206469 00656d69 6d6f7246     nvalid time.From
   c0f04:	20732520 25206f74 6f662073 75252072      %s to %s for %u
   c0f14:	63657320 73646e6f 6f724600 7325206d      seconds.From %s
   c0f24:	206f7420 55007325 6f6e6b6e 4e006e77      to %s.Unknown.N
   c0f34:	4320746f 67726168 00676e69 72616843     ot Charging.Char
   c0f44:	00646567 63736944 67726168 00676e69     ged.Discharging.
   c0f54:	6c756146 69440074 6e6e6f63 65746365     Fault.Diconnecte
   c0f64:	227b0064 69766564 64696563 25223a22     d.{"deviceid":"%
   c0f74:	202c2273 756f6822 22796c72 2c75253a     s", "hourly":%u,
   c0f84:	61642220 22796c69 2c75253a 65732220      "daily":%u, "se
   c0f94:	726f736e 65707974 64253a22 6222202c     nsortype":%d, "b
   c0fa4:	65747461 3a227972 322e3425 6b222c66     attery":%4.2f,"k
   c0fb4:	22317965 7325223a 74222c22 22706d65     ey1":"%s","temp"
   c0fc4:	2c64253a 65722220 73746573 64253a22     :%d, "resets":%d
   c0fd4:	7372222c 3a226973 202c6425 67736d22     ,"rssi":%d, "msg
   c0fe4:	64253a22 6974222c 7473656d 22706d61     ":%d,"timestamp"
   c0ff4:	756c253a 7d303030 69625500 73746f64     :%lu000}.Ubidots
   c1004:	526f4c2d 6f4e2d41 762d6564 62550031     -LoRA-Node-v1.Ub
   c1014:	746f6469 6f4c2d73 472d4152 77657461     idots-LoRA-Gatew
   c1024:	762d7961 73690031 20736900 00746f6e     ay-v1.is.is not.
   c1034:	35545345 2c544445 322e334d 322f302e     EST5EDT,M3.2.0/2
   c1044:	3a30303a 4d2c3030 312e3131 322f302e     :00:00,M11.1.0/2
   c1054:	3a30303a 25003030 4d253a49 2553253a     :00:00.%I:%M:%S%
   c1064:	6f4c0070 546c6163 20656d69 74696e69     p.LocalTime init
   c1074:	696c6169 2c64657a 6d697420 73692065     ialized, time is
   c1084:	20732520 20646e61 20435452 73207325      %s and RTC %s s
   c1094:	4c007465 6c61636f 656d6954 746f6e20     et.LocalTime not
   c10a4:	696e6920 6c616974 64657a69 206f7320      initialized so 
   c10b4:	6c6c6977 65656e20 6f742064 6e6f4320     will need to Con
   c10c4:	7463656e 206f7420 74726150 656c6369     nect to Particle
   c10d4:	65735500 75622072 6e6f7474 65727020     .User button pre
   c10e4:	64657373 6574202c 6d207473 0065646f     ssed, test mode.
   c10f4:	75206f4e 20726573 74747562 70206e6f     No user button p
   c1104:	20687375 65746564 65746863 706f0064     ush detechted.op
   c1114:	63006e65 65736f6c 6c530064 20706565     en.closed.Sleep 
   c1124:	20726f66 73206925 6e6f6365 74207364     for %i seconds t
   c1134:	206c6c69 7478656e 65766520 6120746e     ill next event a
   c1144:	73252074 74697720 6c252068 72662069     t %s with %li fr
   c1154:	6d206565 726f6d65 77410079 20656b6f     ee memory.Awoke 
   c1164:	25207461 69772073 25206874 6620696c     at %s with %li f
   c1174:	20656572 6f6d656d 47007972 77657461     ree memory.Gatew
   c1184:	69207961 696c2073 6e657473 20676e69     ay is listening 
   c1194:	20726f66 41526f4c 73656d20 65676173     for LoRA message
   c11a4:	6e612073 68742064 61702065 69206b72     s and the park i
   c11b4:	73252073 64252820 25202f20 202f2064     s %s (%d / %d / 
   c11c4:	00296425 6b636142 206e6920 6e69616d     %d).Back in main
   c11d4:	70706120 61202d20 7472656c 646f6320      app - alert cod
   c11e4:	73692065 00642520 2077654e 20796144     e is %d.New Day 
   c11f4:	6552202d 74746573 20676e69 72657665     - Resetting ever
   c1204:	69687479 4400676e 20706565 65776f70     ything.Deep powe
   c1214:	6f642072 64206e77 63697665 20410065     r down device.A 
   c1224:	2077656e 20796164 6572202d 74746573     new day - resett
   c1234:	20676e69 72657665 69687479 0000676e     ing everything..

000c1244 <_ZTV8MB85RC64>:
	...
   c124c:	000b5c4d 000b5c61 000b90b5 000b914b     M\..a\......K...
   c125c:	000b91cd                                ....

000c1260 <_ZTV10nodeIDData>:
	...
   c1268:	000b5f71 000b5cad 000b5c8b 000bb935     q_...\...\..5...
   c1278:	000bb95d 000bbaf1 000bbb89 000b5d4d     ]...........M]..
   c1288:	000b5d61                                a]..

000c128c <_ZTV13sysStatusData>:
	...
   c1294:	000b5dd1 000b5cad 000b5c8b 000bb935     .]...\...\..5...
   c12a4:	000bb95d 000bbaf1 000bbb89 000b5cfd     ]............\..
   c12b4:	000b5d11                                .]..

000c12b8 <_ZTV17currentStatusData>:
	...
   c12c0:	000b5deb 000b5cad 000b5c8b 000bb935     .]...\...\..5...
   c12d0:	000bb95d 000bbaf1 000bbb89 000b5d25     ]...........%]..
   c12e0:	000b5d39 6f706552 66207472 75716572     9]..Report frequ
   c12f0:	79636e65 6c697720 6562206c 74657320     ency will be set
   c1300:	206f7420 6d206925 74756e69 61207365      to %i minutes a
   c1310:	656e2074 4c207478 2041526f 6e6e6f63     t next LoRA conn
   c1320:	00746365 656d6954 696e4900 6c616974     ect.Time.Initial
   c1330:	6e697a69 61502067 63697472 6620656c     izing Particle f
   c1340:	74636e75 736e6f69 646e6120 72617620     unctions and var
   c1350:	6c626169 52007365 726f7065 676e6974     iables.Reporting
   c1360:	65724620 6e657571 53007963 46207465      Frequency.Set F
   c1370:	75716572 79636e65 206e4900 20656874     requency.In the 
   c1380:	63736964 656e6e6f 66207463 206d6f72     disconnect from 
   c1390:	74726150 656c6369 6e756620 6f697463     Particle functio
   c13a0:	6146006e 64656c69 206f7420 63736964     n.Failed to disc
   c13b0:	656e6e6f 66207463 206d6f72 74726150     onnect from Part
   c13c0:	656c6369 73694400 6e6e6f63 65746365     icle.Disconnecte
   c13d0:	72662064 50206d6f 69747261 20656c63     d from Particle 
   c13e0:	25206e69 65732069 646e6f63 61460073     in %i seconds.Fa
   c13f0:	64656c69 206f7420 6e727574 66666f20     iled to turn off
   c1400:	65687420 6c654320 616c756c 6f6d2072      the Cellular mo
   c1410:	006d6564 6e727554 6f206465 74206666     dem.Turned off t
   c1420:	63206568 756c6c65 2072616c 65646f6d     he cellular mode
   c1430:	6e69206d 20692520 6f636573 0073646e     m in %i seconds.

000c1440 <_ZTVN5spark10LogHandlerE>:
	...
   c1450:	000b40a5 000b63d9                       .@...c..

000c1458 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c1460:	000b6469 000b649d 000be07d 000b63db     id...d..}....c..

000c1470 <_ZTV18Particle_Functions>:
	...
   c1478:	000b63e3 000b63e5 74696e49 7a696c61     .c...c..Initaliz
   c1488:	20676e69 20656874 4d6e6970 7365646f     ing the pinModes
   c1498:	696e4900 6c616974 6e697a69 6f502067     .Initializing Po
   c14a8:	20726577 666e6f43 00006769              wer Config..

000c14b4 <BLUE_LED>:
   c14b4:	                                         ..

000c14b6 <BUTTON_PIN>:
   c14b6:	                                         ..

000c14b8 <RFM95_CS>:
   c14b8:	                                         ..

000c14ba <RFM95_INT>:
   c14ba:	                                         ..

000c14bc <TMP36_SENSE_PIN>:
   c14bc:	6553000f 6e697474 61762067 7365756c     ..Setting values
   c14cc:	726f6620 65687420 74614720 79617765      for the Gateway
   c14dc:	6e6f4e00 69570065 47006946 55004d53     .None.WiFi.GSM.U
   c14ec:	0053544d 414d4443 45544c00 45454900     MTS.CDMA.LTE.IEE
   c14fc:	32303845 00343531 5f45544c 5f544143     E802154.LTE_CAT_
   c150c:	4c00314d 435f4554 4e5f5441 25003142     M1.LTE_CAT_NB1.%
   c151c:	3a532073 302e3225 2c252566 253a5120     s S:%2.0f%%, Q:%
   c152c:	66302e32 00202525 65737341 6f697472     2.0f%% .Assertio
   c153c:	6961466e 6572756c 63727320 20262620     nFailure src && 
   c154c:	2d637273 6c61633e 6361626c 6925006b     src->callback.%i
   c155c:	00004320 000c0f2b 000c14dd 000c14e2      C..+...........
   c156c:	000c14e7 000c14eb 000c14f0 000c14f5     ................
   c157c:	000c14f9 000c1504 000c150f 6c696166     ............fail
   c158c:	74206465 6572206f 72206461 64416765     ed to read regAd
   c159c:	253d7264 20783230 6e756f63 75253d74     dr=%02x count=%u
   c15ac:	69616600 2064656c 72206f74 20646165     .failed to read 
   c15bc:	41676572 3d726464 78323025 61747320     regAddr=%02x sta
   c15cc:	64253d74 554f4600 69642054 6f6e2064     t=%d.FOUT did no
   c15dc:	6f672074 47494820 6f6e0048 65642074     t go HIGH.not de
   c15ec:	74636574 66006465 656c6961 6f742064     tected.failed to
   c15fc:	69727720 72206574 64416765 253d7264      write regAddr=%
   c160c:	20783230 74617473 0064253d 57746573     02x stat=%d.setW
   c161c:	25205444 61770064 64686374 6320676f     DT %d.watchdog c
   c162c:	7261656c 62206465 75736552 253d746c     leared bResult=%
   c163c:	61770064 64686374 7320676f 66207465     d.watchdog set f
   c164c:	5372756f 3d736365 62206425 75736552     ourSecs=%d bResu
   c165c:	253d746c 41570064 44484354 4400474f     lt=%d.WATCHDOG.D
   c166c:	5f504545 45574f50 4f445f52 43004e57     EEP_POWER_DOWN.C
   c167c:	544e554f 4e574f44 4d49545f 41005245     OUNTDOWN_TIMER.A
   c168c:	4d52414c 69616600 6572756c 206e6920     LARM.failure in 
   c169c:	61647075 61576574 6552656b 6e6f7361     updateWakeReason
   c16ac:	00642520 656b6177 61657220 206e6f73      %d.wake reason 
   c16bc:	7325203d 69616600 6572756c 206e6920     = %s.failure in 
   c16cc:	43746573 746e756f 6e776f64 656d6954     setCountdownTime
   c16dc:	64252072 69616600 6572756c 206e6920     r %d.failure in 
   c16ec:	70656564 65776f50 776f4472 6425206e     deepPowerDown %d
   c16fc:	47455200 454c535f 435f5045 3d4c5254     .REG_SLEEP_CTRL=
   c170c:	32257830 69640078 74276e64 776f7020     0x%2x.didn't pow
   c171c:	64207265 006e776f 64343025 3230252d     er down.%04d-%02
   c172c:	30252d64 25206432 3a643230 64323025     d-%02d %02d:%02d
   c173c:	3230253a 65670064 63745274 6d547341     :%02d.getRtcAsTm
   c174c:	00732520 52746573 73416374 25206d54      %s.setRtcAsTm %
   c175c:	61660073 72756c69 6e692065 74657320     s.failure in set
   c176c:	46637452 546d6f72 6425206d 74657300     RtcFromTm %d.set
   c177c:	43545220 6f726620 6c63206d 2064756f      RTC from cloud 
   c178c:	73007325 73207465 65747379 6c63206d     %s.set system cl
   c179c:	206b636f 6d6f7266 43545220 00732520     ock from RTC %s.
   c17ac:	6c696166 74206465 6564206f 74636574     failed to detect
   c17bc:	31424120 00353038 2e707061 38316261      AB1805.app.ab18
   c17cc:	00003530                                05..

000c17d0 <_ZTV6AB1805>:
	...
   c17d8:	000b6c09 000b6c0b 000b7281 000b7307     .l...l...r...s..
   c17e8:	6b636142 756f7267 7550646e 73696c62     BackgroundPublis
   c17f8:	004b5268                                hRK.

000c17fc <_ZTV19BackgroundPublishRK>:
	...
   c1804:	000b783d 000b7859 3025755c 00005834     =x..Yx..\u%04X..

000c1814 <_ZTV10JsonBuffer>:
	...
   c181c:	000b7b69 000b7b85                       i{...{..

000c1824 <_ZTV10JsonParser>:
	...
   c182c:	000b7be9 000b7c0d                       .{...|..

000c1834 <_ZTV10JsonWriter>:
	...
   c183c:	000b7b99 000b7bad                       .{...{..

000c1844 <_ZTV12JsonModifier>:
	...
   c184c:	000b7bc1 000b7bd5 253a6425 64253a64     .{...{..%d:%d:%d
   c185c:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   c186c:	4d003935 252e6425 64252e64 5a002c00     59.M%d.%d.%d.,.Z
   c187c:	302b2500 253a6433 00753230              .%+03d:%02u.

000c1888 <_ZTV9LocalTime>:
	...
   c1890:	000b8775 000b878d                       u.......

000c1898 <_ZTV12LocalTimeHMS>:
	...
   c18a0:	000b8725 000b8729                       %...)...

000c18a8 <_ZTV15LocalTimeChange>:
	...
   c18b0:	000b8727 000b8737                       '...7...

000c18b8 <_ZTV22LocalTimePosixTimezone>:
	...
   c18c0:	000b8745 000b8761                       E...a...

000c18c8 <_ZTV6MB85RC>:
	...
   c18d0:	000b9075 000b9077 000b90b5 000b914b     u...w.......K...
   c18e0:	000b91cd 656c6966 3d6d754e 73206425     ....fileNum=%d s
   c18f0:	3d657a69 00646c25 64616572 75657551     ize=%ld.readQueu
   c1900:	6c694665 64252065 65766520 253d746e     eFile %d event=%
   c1910:	61642073 253d6174 65720073 75516461     s data=%s.readQu
   c1920:	46657565 20656c69 63206425 7572726f     eueFile %d corru
   c1930:	64657470 65766520 6e20746e 20656d61     pted event name 
   c1940:	6420726f 00617461 64616572 75657551     or data.readQueu
   c1950:	6c694665 64252065 64616220 67616d20     eFile %d bad mag
   c1960:	253d6369 786c3830 72657620 6e6f6973     ic=%08lx version
   c1970:	2075253d 64616568 69537265 253d657a     =%u headerSize=%
   c1980:	616e2075 654c656d 75253d6e 73752f00     u nameLen=%u./us
   c1990:	75702f72 65757162 77006575 65746972     r/pubqueue.write
   c19a0:	75657551 466f5465 73656c69 6c696620     QueueToFiles fil
   c19b0:	6d754e65 0064253d 63736964 65647261     eNum=%d.discarde
   c19c0:	76652064 20746e65 72006425 74657365     d event %d.reset
   c19d0:	20726f20 63736964 656e6e6f 65207463      or disconnect e
   c19e0:	746e6576 6173202c 66206576 73656c69     vent, save files
   c19f0:	206f7420 75657571 61720065 6964006d      to queue.ram.di
   c1a00:	72616373 676e6964 726f6320 74707572     scarding corrupt
   c1a10:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   c1a20:	6e696873 73252067 65766520 253d746e     shing %s event=%
   c1a30:	61642073 253d6174 59530073 4d455453     s data=%s.SYSTEM
   c1a40:	5248545f 28444145 42414e45 2944454c     _THREAD(ENABLED)
   c1a50:	20736920 75716572 64657269 62757000      is required.pub
   c1a60:	6873696c 6d6d6f43 65206e6f 746e6576     lishCommon event
   c1a70:	656d614e 2073253d 6e657665 74614474     Name=%s eventDat
   c1a80:	73253d61 6e616300 20746f6e 61657263     a=%s.cannot crea
   c1a90:	73206574 3a3a6474 75716564 616c2065     te std::deque la
   c1aa0:	72656772 61687420 616d206e 69735f78     rger than max_si
   c1ab0:	2928657a 6c696600 65755165 654c6575     ze().fileQueueLe
   c1ac0:	75253d6e 6d617220 75657551 6e654c65     n=%u ramQueueLen
   c1ad0:	2075253d 6e6e6f63 65746365 64253d64     =%u connected=%d
   c1ae0:	65757100 20646575 72206f74 75516d61     .queued to ramQu
   c1af0:	00657565 6c627570 20687369 63637573     eue.publish succ
   c1b00:	20737365 72006425 766f6d65 66206465     ess %d.removed f
   c1b10:	20656c69 70006425 696c6275 66206873     ile %d.publish f
   c1b20:	656c6961 64252064 69727700 676e6974     ailed %d.writing
   c1b30:	206f7420 656c6966 66612073 20726574      to files after 
   c1b40:	6c627570 20687369 6c696166 00657275     publish failure.
   c1b50:	2e707061 71627570 00000000              app.pubq....

000c1b5c <_ZTV17PublishQueuePosix>:
	...
   c1b64:	000b9b01 000b9dbd 000b9de1              ............

000c1b70 <_ZTV15RHGenericDriver>:
	...
   c1b80:	000b9f01 000b40a5 000b40a5 000b40a5     .....@...@...@..
   c1b90:	000b40a5 000b9f63 000b9f05 000b9fb3     .@..c...........
   c1ba0:	000b9f81 000b9fd7 000b9f0f 000b9f17     ................
   c1bb0:	000b9f1b 000b9f1f 000b9f23 000b9f27     ........#...'...
   c1bc0:	000b9f13 000b9f33 000b9f37 000b9f3b     ....3...7...;...
   c1bd0:	000b9f3f 000b9f43 000b9f49 000b9f4d     ?...C...I...M...
   c1be0:	000b9f0f 000b9f51 000b9f57 000b9f5d     ....Q...W...]...

000c1bf0 <_ZTV12RHGenericSPI>:
	...
   c1bf8:	000b40a5 000ba035 000ba037 000b40a5     .@..5...7....@..
   c1c08:	000b40a5 000ba03f 000ba043 000ba047     .@..?...C...G...
   c1c18:	000ba039 000ba03b 000ba03d 61666564     9...;...=...defa
   c1c28:	20746c75 42534d00 42534c00 50533c00     ult .MSB.LSB.<SP
   c1c38:	74655349 676e6974 65642073 6c756166     ISettings defaul
   c1c48:	3c003e74 53495053 69747465 2073676e     t>.<SPISettings 
   c1c58:	75257325 20732520 45444f4d 003e7525     %s%u %s MODE%u>.

000c1c68 <_ZTVN8particle11SPISettingsE>:
	...
   c1c70:	000ba08d 000ba061 000ba063              ....a...c...

000c1c7c <_ZTV13RHHardwareSPI>:
	...
   c1c84:	000ba141 000ba155 000ba163 000ba171     A...U...c...q...
   c1c94:	000ba1dd 000ba03f 000ba043 000ba047     ....?...C...G...
   c1ca4:	000ba1eb 000ba1ff 000ba20d              ............

000c1cb0 <_ZTV6RHMesh>:
	...
   c1cb8:	000ba2d9 000ba581 000ba239 000ba225     ........9...%...

000c1cc8 <_ZTV8RHRouter>:
	...
   c1cd0:	000ba7ed 000ba831                       ....1...

000c1cd8 <_ZTV11RHSPIDriver>:
	...
   c1ce8:	000baacd 000b40a5 000b40a5 000b40a5     .....@...@...@..
   c1cf8:	000b40a5 000b9f63 000b9f05 000b9fb3     .@..c...........
   c1d08:	000b9f81 000b9fd7 000b9f0f 000b9f17     ................
   c1d18:	000b9f1b 000b9f1f 000b9f23 000b9f27     ........#...'...
   c1d28:	000b9f13 000b9f33 000b9f37 000b9f3b     ....3...7...;...
   c1d38:	000b9f3f 000b9f43 000b9f49 000b9f4d     ?...C...I...M...
   c1d48:	000b9f0f 000b9f51 000b9f57 000b9f5d     ....Q...W...]...
   c1d58:	000baaf9 000bab03                       ........

000c1d60 <_ZL18MODEM_CONFIG_TABLE>:
   c1d60:	92047472 94480474 0cc47804 0004b472     rt..t.H..x..r...

000c1d70 <_ZTV7RH_RF95>:
	...
   c1d78:	000bac6b 000baca3 000bb179 000bb00f     k.......y.......
   c1d88:	000bacd9 000bb057 000bac67 000b9f63     ....W...g...c...
   c1d98:	000b9f05 000b9fb3 000b9f81 000b9fd7     ................
   c1da8:	000bac6d 000b9f17 000b9f1b 000b9f1f     m...............
   c1db8:	000b9f23 000b9f27 000b9f13 000b9f33     #...'.......3...
   c1dc8:	000b9f37 000b9f3b 000b9f3f 000b9f43     7...;...?...C...
   c1dd8:	000b9f49 000b9f4d 000bacb3 000b9f51     I...M.......Q...
   c1de8:	000b9f57 000b9f5d 000baaf9 000bab03     W...]...........
   c1df8:	000bac63 64383025 72002f00 766f6d65     c...%08d./.remov
   c1e08:	25206465 73250073 69786520 20737473     ed %s.%s exists 
   c1e18:	20646e61 61207369 72696420 6f746365     and is a directo
   c1e28:	66007972 20656c69 74206e69 77206568     ry.file in the w
   c1e38:	202c7961 656c6564 676e6974 00732520     ay, deleting %s.
   c1e48:	74617473 6c696620 65206465 6f6e7272     stat filed errno
   c1e58:	0064253d 61657263 20646574 20726964     =%d.created dir 
   c1e68:	6d007325 7269646b 69616620 2064656c     %s.mkdir failed 
   c1e78:	6e727265 64253d6f 636e7500 69666e6f     errno=%d.unconfi
   c1e88:	65727567 69642064 74615072 63730068     gured dirPath.sc
   c1e98:	696e6e61 2520676e 69772073 70206874     anning %s with p
   c1ea8:	65747461 25206e72 64610073 676e6964     attern %s.adding
   c1eb8:	206f7420 75657571 64252065 00732520      to queue %d %s.
   c1ec8:	46746567 46656c69 516d6f72 65756575     getFileFromQueue
   c1ed8:	74657220 656e7275 64252064 70706100      returned %d.app
   c1ee8:	7165732e 656c6966 00000000              .seqfile....

000c1ef4 <_ZTV14SequentialFile>:
	...
   c1efc:	000bb5d5 000bb601 000bb281 3a746f67     ............got:
   c1f0c:	67616d20 253d6369 20783830 73726576      magic=%08x vers
   c1f1c:	3d6e6f69 78343025 7a697320 30253d65     ion=%04x size=%0
   c1f2c:	68207834 3d687361 78383025 70786500     4x hash=%08x.exp
   c1f3c:	616d203a 3d636967 78383025 72657620     : magic=%08x ver
   c1f4c:	6e6f6973 3430253d 69732078 253d657a     sion=%04x size=%
   c1f5c:	20783430 68736168 3830253d 00000078     04x hash=%08x...

000c1f6c <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   c1f74:	000bb92f 000bb97b 000bb92d 000bb935     /...{...-...5...
   c1f84:	000bb95d 000bbaf1 000bbb89              ]...........

000c1f90 <_ZTVN5spark13CellularClassE>:
	...
   c1f98:	000bc5e7 000bc5dd 000bc5d3 000bc589     ................
   c1fa8:	000bc5c7 000bc5bb 000be3d5 000be3dd     ................
   c1fb8:	000bc5af 000bc5a7 000bc59d 000bc593     ................
   c1fc8:	000be40d                                ....

000c1fcc <_ZTV14CellularSignal>:
	...
   c1fd4:	000bc675 000bc6d9 000bc677 000bc6e9     u.......w.......
   c1fe4:	000bc71d 000bc749 000bc77d 000bc69d     ....I...}.......
   c1ff4:	000bc67b 000bc697 fffffffc 00000000     {...............
   c2004:	000bc6d1                                ....

000c2008 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c2010:	000bc7c1 000bc7c7 000bc805 000bc7d5     ................
   c2020:	000bc7c3                                ....

000c2024 <_ZTVN5spark13EthernetClassE>:
	...
   c202c:	000bcdcb 000bcdc1 000bcdb7 000bcdad     ................
   c203c:	000bcda1 000bcd95 000be3d5 000be3dd     ................
   c204c:	000bcd89 000bcd81 000bcd77 000bcd6d     ........w...m...
   c205c:	000be40d                                ....

000c2060 <_ZTV7TwoWire>:
	...
   c2068:	000bce9b 000bcee5 000bcebd 000bce9d     ................
   c2078:	000bcec5 000bcecd 000bced5 000bcedd     ................

000c2088 <_ZTV9IPAddress>:
	...
   c2090:	000bd095 000bd085 000bd087 34302575     ............u%04
   c20a0:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   c20b0:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   c20c0:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   c20d0:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   c20e0:	005b2000 65646f63 00203d20 64006925     . [.code = .%i.d
   c20f0:	69617465 3d20736c 0a0d0020 006e6c00     etails = ....ln.
   c2100:	63006e66 0065646f 61746564 00006c69     fn.code.detail..

000c2110 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c2118:	000bd541 000bd567 000bd525 000bd1a3     A...g...%.......

000c2128 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c2130:	000bd925 000bd93d 000be07d 000b63db     %...=...}....c..

000c2140 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c2148:	000bd951 000bd965 000be221 000bd52d     Q...e...!...-...

000c2158 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c2160:	000bd53f 000bd575 000bdfe1 000bd52f     ?...u......./...

000c2170 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c2178:	000bd53d 000bd583 000bd88d 000bd5a5     =...............

000c2188 <_ZTVN5spark12NetworkClassE>:
	...
   c2190:	000be395 000be39f 000be3a9 000be3b3     ................
   c21a0:	000be3bd 000be3c9 000be3d5 000be3dd     ................
   c21b0:	000be3e5 000be3f1 000be3f9 000be403     ................
   c21c0:	000be40d 006e616e 00666e69 0066766f     ....nan.inf.ovf.

000c21d0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c21d0:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   c21e0:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   c21f0:	72756769 6f697461 7369206e 766e6920     iguration is inv
   c2200:	64696c61 5925002e 2d6d252d 25546425     alid..%Y-%m-%dT%
   c2210:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   c2220:	00000065                                e...

000c2224 <_ZTV11USARTSerial>:
	...
   c222c:	000bf299 000bf305 000bf2dd 000be65d     ............]...
   c223c:	000bf2ad 000bf2c9 000bf2bb 000bf2d7     ................
   c224c:	000bf29b 000bf29f                       ........

000c2254 <_ZTV9USBSerial>:
	...
   c225c:	000bf357 000bf3bf 000bf395 000be65d     W...........]...
   c226c:	000bf387 000bf359 000bf369 000bf3b9     ....Y...i.......
   c227c:	000bf379 000bf351                       y...Q...

000c2284 <_ZSt7nothrow>:
   c2284:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   c2294:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000c22a5 <day_name.1>:
   c22a5:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   c22b5:	61536972                                 riSat

000c22ba <mon_name.0>:
   c22ba:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   c22ca:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   c22da:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   c22ea:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   c22fa:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   c230a:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   c231a:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   c232a:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   c233a:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
   c234a:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
   c235a:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   c236a:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   c237a:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   c238a:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   c239a:	696c6474 61722f62 632e646e               tdlib/rand.c.

000c23a7 <_ctype_>:
   c23a7:	20202000 20202020 28282020 20282828     .         ((((( 
   c23b7:	20202020 20202020 20202020 20202020                     
   c23c7:	10108820 10101010 10101010 10101010      ...............
   c23d7:	04040410 04040404 10040404 10101010     ................
   c23e7:	41411010 41414141 01010101 01010101     ..AAAAAA........
   c23f7:	01010101 01010101 01010101 10101010     ................
   c2407:	42421010 42424242 02020202 02020202     ..BBBBBB........
   c2417:	02020202 02020202 02020202 10101010     ................
   c2427:	00000020 00000000 00000000 00000000      ...............
	...

000c24a8 <link_const_variable_data_end>:
   c24a8:	000b4afd 	.word	0x000b4afd
   c24ac:	000b5435 	.word	0x000b5435
   c24b0:	000b63a9 	.word	0x000b63a9
   c24b4:	000b66f9 	.word	0x000b66f9
   c24b8:	000b6bfd 	.word	0x000b6bfd
   c24bc:	000b7721 	.word	0x000b7721
   c24c0:	000b9dad 	.word	0x000b9dad
   c24c4:	000ba215 	.word	0x000ba215
   c24c8:	000bb91d 	.word	0x000bb91d
   c24cc:	000bc579 	.word	0x000bc579
   c24d0:	000bc645 	.word	0x000bc645
   c24d4:	000bcdd5 	.word	0x000bcdd5
   c24d8:	000be06d 	.word	0x000be06d
   c24dc:	000be4e5 	.word	0x000be4e5
   c24e0:	000be94d 	.word	0x000be94d
   c24e4:	000bef4d 	.word	0x000bef4d
   c24e8:	000bf285 	.word	0x000bf285

000c24ec <link_constructors_end>:
   c24ec:	00000000 	.word	0x00000000
