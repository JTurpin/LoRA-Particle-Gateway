
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/4.0.1/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000e770  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c2790  000c2790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c27b4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000200  2003d5dc  000c27b8  0002d5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001014  2003d7e0  2003d7e0  0003d7e0  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c29b8  000c29b8  000329b8  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c29e4  000c29e4  000329e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   002a2bf2  00000000  00000000  000329e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002d26b  00000000  00000000  002d55da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0006d715  00000000  00000000  00302845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004ff0  00000000  00000000  0036ff5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00012318  00000000  00000000  00374f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0006046b  00000000  00000000  00387262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000979ae  00000000  00000000  003e76cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016fa4d  00000000  00000000  0047f07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000f014  00000000  00000000  005eeac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00c fa31 	bl	c0498 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00c fa53 	bl	c04e8 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d5dc 	.word	0x2003d5dc
   b404c:	000c27b8 	.word	0x000c27b8
   b4050:	2003d7dc 	.word	0x2003d7dc
   b4054:	2003d7e0 	.word	0x2003d7e0
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00b fb6b 	bl	bf73c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c2744 	.word	0x000c2744
   b4080:	000c2788 	.word	0x000c2788

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 b9ec 	b.w	b5460 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fae9 	bl	b5660 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00b bb0b 	b.w	bf6ac <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f008 bab1 	b.w	bc5fc <malloc>

000b409a <_Znaj>:
   b409a:	f008 baaf 	b.w	bc5fc <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f008 bab5 	b.w	bc60c <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f008 f932 	bl	bc314 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000bbeb5 	.word	0x000bbeb5
   b40b8:	000c0abc 	.word	0x000c0abc

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b40ce:	b510      	push	{r4, lr}
}
   b40d0:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b40d2:	4604      	mov	r4, r0
}
   b40d4:	f7ff ffe3 	bl	b409e <_ZdlPvj>
   b40d8:	4620      	mov	r0, r4
   b40da:	bd10      	pop	{r4, pc}

000b40dc <_ZN16JsonParserStaticILj1024ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40dc:	b510      	push	{r4, lr}
   b40de:	4b03      	ldr	r3, [pc, #12]	; (b40ec <_ZN16JsonParserStaticILj1024ELj50EED1Ev+0x10>)
   b40e0:	6003      	str	r3, [r0, #0]
   b40e2:	4604      	mov	r4, r0
   b40e4:	f003 fe78 	bl	b7dd8 <_ZN10JsonParserD1Ev>
   b40e8:	4620      	mov	r0, r4
   b40ea:	bd10      	pop	{r4, pc}
   b40ec:	000c1098 	.word	0x000c1098

000b40f0 <_ZN16JsonParserStaticILj1024ELj50EED0Ev>:
   b40f0:	b510      	push	{r4, lr}
   b40f2:	4604      	mov	r4, r0
   b40f4:	f7ff fff2 	bl	b40dc <_ZN16JsonParserStaticILj1024ELj50EED1Ev>
   b40f8:	4620      	mov	r0, r4
   b40fa:	f240 714c 	movw	r1, #1868	; 0x74c
   b40fe:	f7ff ffce 	bl	b409e <_ZdlPvj>
   b4102:	4620      	mov	r0, r4
   b4104:	bd10      	pop	{r4, pc}

000b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4106:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4108:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b410a:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b410c:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b410e:	f004 f82d 	bl	b816c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b4112:	b120      	cbz	r0, b411e <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4114:	9901      	ldr	r1, [sp, #4]
   b4116:	462a      	mov	r2, r5
   b4118:	4620      	mov	r0, r4
   b411a:	f003 ff4b 	bl	b7fb4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	}
   b411e:	b003      	add	sp, #12
   b4120:	bd30      	pop	{r4, r5, pc}

000b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4122:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4124:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b4126:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4128:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b412a:	f004 f81f 	bl	b816c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b412e:	b120      	cbz	r0, b413a <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4130:	9901      	ldr	r1, [sp, #4]
   b4132:	462a      	mov	r2, r5
   b4134:	4620      	mov	r0, r4
   b4136:	f003 fffb 	bl	b8130 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b413a:	b003      	add	sp, #12
   b413c:	bd30      	pop	{r4, r5, pc}

000b413e <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b413e:	b40e      	push	{r1, r2, r3}
   b4140:	b500      	push	{lr}
   b4142:	b08c      	sub	sp, #48	; 0x30
   b4144:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4146:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b414a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b414e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4150:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4154:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4156:	6801      	ldr	r1, [r0, #0]
   b4158:	aa04      	add	r2, sp, #16
   b415a:	201e      	movs	r0, #30
    attr.flags = 0;
   b415c:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4160:	f008 f8e8 	bl	bc334 <log_message_v>
}
   b4164:	b00c      	add	sp, #48	; 0x30
   b4166:	f85d eb04 	ldr.w	lr, [sp], #4
   b416a:	b003      	add	sp, #12
   b416c:	4770      	bx	lr
	...

000b4170 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4170:	b510      	push	{r4, lr}
    if (!_instance) {
   b4172:	4c06      	ldr	r4, [pc, #24]	; (b418c <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4174:	6823      	ldr	r3, [r4, #0]
   b4176:	b933      	cbnz	r3, b4186 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4178:	2004      	movs	r0, #4
   b417a:	f7ff ff8c 	bl	b4096 <_Znwj>
   b417e:	b108      	cbz	r0, b4184 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b4180:	4b03      	ldr	r3, [pc, #12]	; (b4190 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b4182:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4184:	6020      	str	r0, [r4, #0]
}
   b4186:	6820      	ldr	r0, [r4, #0]
   b4188:	bd10      	pop	{r4, pc}
   b418a:	bf00      	nop
   b418c:	2003d7e4 	.word	0x2003d7e4
   b4190:	000c10a8 	.word	0x000c10a8

000b4194 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b4194:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b4196:	4c06      	ldr	r4, [pc, #24]	; (b41b0 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b4198:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b419a:	f10d 0203 	add.w	r2, sp, #3
   b419e:	a901      	add	r1, sp, #4
   b41a0:	4620      	mov	r0, r4
   b41a2:	f006 fe91 	bl	baec8 <_ZN7RH_RF954recvEPhS0_>
   b41a6:	2800      	cmp	r0, #0
   b41a8:	d1f7      	bne.n	b419a <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b41aa:	b040      	add	sp, #256	; 0x100
   b41ac:	bd10      	pop	{r4, pc}
   b41ae:	bf00      	nop
   b41b0:	2003d86c 	.word	0x2003d86c

000b41b4 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             // Here is where we will power down the LoRA radio module
   b41b4:	4801      	ldr	r0, [pc, #4]	; (b41bc <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b41b6:	f006 be74 	b.w	baea2 <_ZN7RH_RF955sleepEv>
   b41ba:	bf00      	nop
   b41bc:	2003d86c 	.word	0x2003d86c

000b41c0 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>:
	return false; 
}

// These are the receive and respond messages for data reports

bool LoRA_Functions::decipherDataReportGateway() {			// Receives the data report and loads results into current object for reporting
   b41c0:	b537      	push	{r0, r1, r2, r4, r5, lr}

	current.set_hourlyCount(buf[3] << 8 | buf[4]);
   b41c2:	4c2a      	ldr	r4, [pc, #168]	; (b426c <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xac>)
   b41c4:	f001 fe08 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b41c8:	f8b4 1003 	ldrh.w	r1, [r4, #3]
   b41cc:	ba49      	rev16	r1, r1
   b41ce:	b289      	uxth	r1, r1
   b41d0:	f001 ffe8 	bl	b61a4 <_ZN17currentStatusData15set_hourlyCountEt>
	current.set_dailyCount(buf[5] << 8 | buf[6]);
   b41d4:	f001 fe00 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b41d8:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   b41dc:	ba49      	rev16	r1, r1
   b41de:	b289      	uxth	r1, r1
   b41e0:	f001 ffe6 	bl	b61b0 <_ZN17currentStatusData14set_dailyCountEt>
	current.set_sensorType(buf[7]);
   b41e4:	f001 fdf8 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b41e8:	79e1      	ldrb	r1, [r4, #7]
   b41ea:	f001 ff6f 	bl	b60cc <_ZN17currentStatusData14set_sensorTypeEh>
	current.set_internalTempC(buf[8]);
   b41ee:	f001 fdf3 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b41f2:	7a21      	ldrb	r1, [r4, #8]
   b41f4:	f001 ff4c 	bl	b6090 <_ZN17currentStatusData17set_internalTempCEh>
	current.set_stateOfCharge(buf[9]);
   b41f8:	f001 fdee 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b41fc:	4605      	mov	r5, r0
   b41fe:	7a60      	ldrb	r0, [r4, #9]
   b4200:	f00b fd86 	bl	bfd10 <__aeabi_ui2d>
   b4204:	ec41 0b10 	vmov	d0, r0, r1
   b4208:	4628      	mov	r0, r5
   b420a:	f001 fe21 	bl	b5e50 <_ZN17currentStatusData17set_stateOfChargeEd>
	current.set_batteryState(buf[10]);
   b420e:	f001 fde3 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4212:	7aa1      	ldrb	r1, [r4, #10]
   b4214:	f001 ff42 	bl	b609c <_ZN17currentStatusData16set_batteryStateEh>
	current.set_resetCount(buf[11]);
   b4218:	f001 fdde 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b421c:	7ae1      	ldrb	r1, [r4, #11]
   b421e:	f001 ff43 	bl	b60a8 <_ZN17currentStatusData14set_resetCountEh>
	current.set_messageNumber(buf[12]);
   b4222:	f001 fdd9 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4226:	7b21      	ldrb	r1, [r4, #12]
   b4228:	f001 ff44 	bl	b60b4 <_ZN17currentStatusData17set_messageNumberEh>
	current.set_RSSI(driver.lastRssi());
   b422c:	f001 fdd4 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4230:	4604      	mov	r4, r0
   b4232:	480f      	ldr	r0, [pc, #60]	; (b4270 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xb0>)
   b4234:	f005 ff7d 	bl	ba132 <_ZN15RHGenericDriver8lastRssiEv>
   b4238:	b281      	uxth	r1, r0
   b423a:	4620      	mov	r0, r4
   b423c:	f001 ffac 	bl	b6198 <_ZN17currentStatusData8set_RSSIEt>

	Log.info("Deciphered data report %d from node %d", current.get_messageNumber(), current.get_nodeNumber());
   b4240:	f001 fdca 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4244:	f001 fecd 	bl	b5fe2 <_ZNK17currentStatusData17get_messageNumberEv>
   b4248:	9001      	str	r0, [sp, #4]
   b424a:	f001 fdc5 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b424e:	f001 feaf 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4252:	9a01      	ldr	r2, [sp, #4]
   b4254:	4907      	ldr	r1, [pc, #28]	; (b4274 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xb4>)
   b4256:	4603      	mov	r3, r0
   b4258:	4807      	ldr	r0, [pc, #28]	; (b4278 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xb8>)
   b425a:	f7ff ff70 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>

	lora_state = DATA_ACK;		// Prepare to respond
   b425e:	4b07      	ldr	r3, [pc, #28]	; (b427c <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xbc>)
   b4260:	2204      	movs	r2, #4

	return true;
}
   b4262:	2001      	movs	r0, #1
	lora_state = DATA_ACK;		// Prepare to respond
   b4264:	701a      	strb	r2, [r3, #0]
}
   b4266:	b003      	add	sp, #12
   b4268:	bd30      	pop	{r4, r5, pc}
   b426a:	bf00      	nop
   b426c:	2003d7f0 	.word	0x2003d7f0
   b4270:	2003d86c 	.word	0x2003d86c
   b4274:	000c0ad1 	.word	0x000c0ad1
   b4278:	2003e658 	.word	0x2003e658
   b427c:	2003d7e0 	.word	0x2003d7e0

000b4280 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>:
		return false;
	}
}

// These are the receive and respond messages for Alert Reports
bool LoRA_Functions::decipherAlertReportGateway() {
   b4280:	b510      	push	{r4, lr}
	current.set_alertCodeNode(buf[2]);
   b4282:	f001 fda9 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4286:	4b13      	ldr	r3, [pc, #76]	; (b42d4 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x54>)
   b4288:	7899      	ldrb	r1, [r3, #2]
   b428a:	f001 ff19 	bl	b60c0 <_ZN17currentStatusData17set_alertCodeNodeEh>
	current.set_alertTimestampNode(Time.now());
   b428e:	f001 fda3 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4292:	4604      	mov	r4, r0
   b4294:	f00b f8db 	bl	bf44e <_ZN9TimeClass3nowEv>
   b4298:	17c3      	asrs	r3, r0, #31
   b429a:	4602      	mov	r2, r0
   b429c:	4620      	mov	r0, r4
   b429e:	f002 f801 	bl	b62a4 <_ZN17currentStatusData22set_alertTimestampNodeEx>
	current.set_RSSI(driver.lastRssi() );
   b42a2:	f001 fd99 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b42a6:	4604      	mov	r4, r0
   b42a8:	480b      	ldr	r0, [pc, #44]	; (b42d8 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x58>)
   b42aa:	f005 ff42 	bl	ba132 <_ZN15RHGenericDriver8lastRssiEv>
   b42ae:	b281      	uxth	r1, r0
   b42b0:	4620      	mov	r0, r4
   b42b2:	f001 ff71 	bl	b6198 <_ZN17currentStatusData8set_RSSIEt>
	Log.info("Deciphered alert report from node %d", current.get_nodeNumber());
   b42b6:	f001 fd8f 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b42ba:	f001 fe79 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b42be:	4907      	ldr	r1, [pc, #28]	; (b42dc <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x5c>)
   b42c0:	4602      	mov	r2, r0
   b42c2:	4807      	ldr	r0, [pc, #28]	; (b42e0 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x60>)
   b42c4:	f7ff ff3b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>

	lora_state = ALERT_ACK;		// Prepare to respond
   b42c8:	4b06      	ldr	r3, [pc, #24]	; (b42e4 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x64>)
   b42ca:	2206      	movs	r2, #6
   b42cc:	701a      	strb	r2, [r3, #0]

	return true;
}
   b42ce:	2001      	movs	r0, #1
   b42d0:	bd10      	pop	{r4, pc}
   b42d2:	bf00      	nop
   b42d4:	2003d7f0 	.word	0x2003d7f0
   b42d8:	2003d86c 	.word	0x2003d86c
   b42dc:	000c0af8 	.word	0x000c0af8
   b42e0:	2003e658 	.word	0x2003e658
   b42e4:	2003d7e0 	.word	0x2003d7e0

000b42e8 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>:

bool LoRA_Functions::acknowledgeAlertReportGateway() {
   b42e8:	b570      	push	{r4, r5, r6, lr}
   b42ea:	b088      	sub	sp, #32
	// uint16_t nextSecondsShort = (uint16_t)nextSeconds;

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client

	buf[0] = highByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b42ec:	f001 fd24 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b42f0:	f001 ff04 	bl	b60fc <_ZNK13sysStatusData15get_magicNumberEv>
   b42f4:	4c32      	ldr	r4, [pc, #200]	; (b43c0 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xd8>)
   b42f6:	0a00      	lsrs	r0, r0, #8
   b42f8:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b42fa:	f001 fd1d 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b42fe:	f001 fefd 	bl	b60fc <_ZNK13sysStatusData15get_magicNumberEv>
   b4302:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  				// Fourth byte - current time
   b4304:	f00b f8a3 	bl	bf44e <_ZN9TimeClass3nowEv>
   b4308:	1600      	asrs	r0, r0, #24
   b430a:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));					// Third byte
   b430c:	f00b f89f 	bl	bf44e <_ZN9TimeClass3nowEv>
   b4310:	1400      	asrs	r0, r0, #16
   b4312:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));					// Second byte
   b4314:	f00b f89b 	bl	bf44e <_ZN9TimeClass3nowEv>
   b4318:	1200      	asrs	r0, r0, #8
   b431a:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    				// First byte	
   b431c:	f00b f897 	bl	bf44e <_ZN9TimeClass3nowEv>
   b4320:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());		// Frequency of reports - for Gateways
   b4322:	f001 fd09 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b4326:	f001 feee 	bl	b6106 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b432a:	0a00      	lsrs	r0, r0, #8
   b432c:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());			
   b432e:	f001 fd03 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b4332:	f001 fee8 	bl	b6106 <_ZNK13sysStatusData20get_frequencyMinutesEv>
	buf[8] = 0;													// Send a zero for the alertcode to reset it
	
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4336:	4b23      	ldr	r3, [pc, #140]	; (b43c4 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xdc>)
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());			
   b4338:	71e0      	strb	r0, [r4, #7]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b433a:	881e      	ldrh	r6, [r3, #0]
	buf[8] = 0;													// Send a zero for the alertcode to reset it
   b433c:	2500      	movs	r5, #0
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b433e:	2101      	movs	r1, #1
	buf[8] = 0;													// Send a zero for the alertcode to reset it
   b4340:	7225      	strb	r5, [r4, #8]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4342:	4630      	mov	r0, r6
   b4344:	f00b fa93 	bl	bf86e <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), ALERT_ACK) == RH_ROUTER_ERROR_NONE) {
   b4348:	f001 fd46 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b434c:	f001 fe30 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4350:	2206      	movs	r2, #6
   b4352:	4603      	mov	r3, r0
   b4354:	9200      	str	r2, [sp, #0]
   b4356:	4621      	mov	r1, r4
   b4358:	481b      	ldr	r0, [pc, #108]	; (b43c8 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe0>)
   b435a:	2209      	movs	r2, #9
   b435c:	f006 f904 	bl	ba568 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4360:	4604      	mov	r4, r0
   b4362:	bb10      	cbnz	r0, b43aa <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xc2>
		Log.info("Sent acknowledgment to Node %d, time = %s and frequency %d minutes", current.get_nodeNumber(), Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b4364:	f001 fd38 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4368:	f001 fe22 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b436c:	4605      	mov	r5, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b436e:	f00b f86e 	bl	bf44e <_ZN9TimeClass3nowEv>
   b4372:	4602      	mov	r2, r0
   b4374:	17c3      	asrs	r3, r0, #31
   b4376:	a804      	add	r0, sp, #16
   b4378:	f00a ff64 	bl	bf244 <_ZN9TimeClass7timeStrEx>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b437c:	9b04      	ldr	r3, [sp, #16]
   b437e:	9303      	str	r3, [sp, #12]
   b4380:	f001 fcda 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b4384:	f001 febf 	bl	b6106 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4388:	9b03      	ldr	r3, [sp, #12]
   b438a:	4910      	ldr	r1, [pc, #64]	; (b43cc <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe4>)
   b438c:	9000      	str	r0, [sp, #0]
   b438e:	462a      	mov	r2, r5
   b4390:	480f      	ldr	r0, [pc, #60]	; (b43d0 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe8>)
   b4392:	f7ff fed4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4396:	a804      	add	r0, sp, #16
   b4398:	f00a fca6 	bl	bece8 <_ZN6StringD1Ev>
		digitalWrite(BLUE_LED,LOW);
   b439c:	4630      	mov	r0, r6
   b439e:	4621      	mov	r1, r4
   b43a0:	f00b fa65 	bl	bf86e <digitalWrite>
		return true;
   b43a4:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b43a6:	b008      	add	sp, #32
   b43a8:	bd70      	pop	{r4, r5, r6, pc}
	Log.info("Response not acknowledged");
   b43aa:	490a      	ldr	r1, [pc, #40]	; (b43d4 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xec>)
   b43ac:	4808      	ldr	r0, [pc, #32]	; (b43d0 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe8>)
   b43ae:	f7ff fec6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b43b2:	4630      	mov	r0, r6
   b43b4:	4629      	mov	r1, r5
   b43b6:	f00b fa5a 	bl	bf86e <digitalWrite>
	return false;
   b43ba:	4628      	mov	r0, r5
   b43bc:	e7f3      	b.n	b43a6 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xbe>
   b43be:	bf00      	nop
   b43c0:	2003d7f0 	.word	0x2003d7f0
   b43c4:	000c14bc 	.word	0x000c14bc
   b43c8:	2003e0e8 	.word	0x2003e0e8
   b43cc:	000c0b1d 	.word	0x000c0b1d
   b43d0:	2003e658 	.word	0x2003e658
   b43d4:	000c0b60 	.word	0x000c0b60

000b43d8 <_ZN14LoRA_Functions12findDeviceIDEh>:
	Log.info("Returning index %d",index);

	return index;
}

String LoRA_Functions::findDeviceID(uint8_t nodeNumber)  {
   b43d8:	b530      	push	{r4, r5, lr}
   b43da:	b087      	sub	sp, #28
	String nodeDeviceID;
   b43dc:	4917      	ldr	r1, [pc, #92]	; (b443c <_ZN14LoRA_Functions12findDeviceIDEh+0x64>)
String LoRA_Functions::findDeviceID(uint8_t nodeNumber)  {
   b43de:	4604      	mov	r4, r0
	String nodeDeviceID;
   b43e0:	a802      	add	r0, sp, #8
String LoRA_Functions::findDeviceID(uint8_t nodeNumber)  {
   b43e2:	4615      	mov	r5, r2
	String nodeDeviceID;
   b43e4:	f00a fccb 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b43e8:	4815      	ldr	r0, [pc, #84]	; (b4440 <_ZN14LoRA_Functions12findDeviceIDEh+0x68>)
   b43ea:	f003 fd68 	bl	b7ebe <_ZNK10JsonParser14getOuterObjectEv>
   b43ee:	4a15      	ldr	r2, [pc, #84]	; (b4444 <_ZN14LoRA_Functions12findDeviceIDEh+0x6c>)
   b43f0:	4601      	mov	r1, r0
   b43f2:	ab01      	add	r3, sp, #4
   b43f4:	4812      	ldr	r0, [pc, #72]	; (b4440 <_ZN14LoRA_Functions12findDeviceIDEh+0x68>)
   b43f6:	f003 feb9 	bl	b816c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b43fa:	9901      	ldr	r1, [sp, #4]
   b43fc:	4810      	ldr	r0, [pc, #64]	; (b4440 <_ZN14LoRA_Functions12findDeviceIDEh+0x68>)
   b43fe:	1e6a      	subs	r2, r5, #1
   b4400:	f003 fd7f 	bl	b7f02 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return "null";							// Ran out of entries - no match found
   b4404:	4601      	mov	r1, r0
   b4406:	b948      	cbnz	r0, b441c <_ZN14LoRA_Functions12findDeviceIDEh+0x44>
   b4408:	490f      	ldr	r1, [pc, #60]	; (b4448 <_ZN14LoRA_Functions12findDeviceIDEh+0x70>)
   b440a:	4620      	mov	r0, r4
   b440c:	f00a fcb7 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
	String nodeDeviceID;
   b4410:	a802      	add	r0, sp, #8
   b4412:	f00a fc69 	bl	bece8 <_ZN6StringD1Ev>
	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);	// Get the deviceID and compare
	if (nodeDeviceID == NULL) return "null";
		
	return nodeDeviceID;
}
   b4416:	4620      	mov	r0, r4
   b4418:	b007      	add	sp, #28
   b441a:	bd30      	pop	{r4, r5, pc}
	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);	// Get the deviceID and compare
   b441c:	4808      	ldr	r0, [pc, #32]	; (b4440 <_ZN14LoRA_Functions12findDeviceIDEh+0x68>)
   b441e:	4a0b      	ldr	r2, [pc, #44]	; (b444c <_ZN14LoRA_Functions12findDeviceIDEh+0x74>)
   b4420:	ab02      	add	r3, sp, #8
   b4422:	f7ff fe7e 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4426:	2100      	movs	r1, #0
   b4428:	a802      	add	r0, sp, #8
   b442a:	f00a fd6e 	bl	bef0a <_ZNK6String6equalsEPKc>
	if (nodeDeviceID == NULL) return "null";
   b442e:	2800      	cmp	r0, #0
   b4430:	d1ea      	bne.n	b4408 <_ZN14LoRA_Functions12findDeviceIDEh+0x30>
	return nodeDeviceID;
   b4432:	a902      	add	r1, sp, #8
   b4434:	4620      	mov	r0, r4
   b4436:	f00a fcd3 	bl	bede0 <_ZN6StringC1EOS_>
   b443a:	e7e9      	b.n	b4410 <_ZN14LoRA_Functions12findDeviceIDEh+0x38>
   b443c:	000c2399 	.word	0x000c2399
   b4440:	2003d99c 	.word	0x2003d99c
   b4444:	000c0b7a 	.word	0x000c0b7a
   b4448:	000c0b80 	.word	0x000c0b80
   b444c:	000c0b85 	.word	0x000c0b85

000b4450 <_ZN14LoRA_Functions14nodeConfiguredEi>:

bool LoRA_Functions::nodeConfigured(int nodeNumber)  {
   b4450:	b513      	push	{r0, r1, r4, lr}

	int nodeNumberConfigured;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4452:	480c      	ldr	r0, [pc, #48]	; (b4484 <_ZN14LoRA_Functions14nodeConfiguredEi+0x34>)
bool LoRA_Functions::nodeConfigured(int nodeNumber)  {
   b4454:	460c      	mov	r4, r1
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4456:	f003 fd32 	bl	b7ebe <_ZNK10JsonParser14getOuterObjectEv>
   b445a:	4a0b      	ldr	r2, [pc, #44]	; (b4488 <_ZN14LoRA_Functions14nodeConfiguredEi+0x38>)
   b445c:	4601      	mov	r1, r0
   b445e:	ab01      	add	r3, sp, #4
   b4460:	4808      	ldr	r0, [pc, #32]	; (b4484 <_ZN14LoRA_Functions14nodeConfiguredEi+0x34>)
   b4462:	f003 fe83 	bl	b816c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4466:	9901      	ldr	r1, [sp, #4]
   b4468:	4806      	ldr	r0, [pc, #24]	; (b4484 <_ZN14LoRA_Functions14nodeConfiguredEi+0x34>)
   b446a:	1e62      	subs	r2, r4, #1
   b446c:	f003 fd49 	bl	b7f02 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries - no match found
   b4470:	b130      	cbz	r0, b4480 <_ZN14LoRA_Functions14nodeConfiguredEi+0x30>
	jp.getValueByKey(nodeObjectContainer, "node", nodeNumberConfigured);	// Get the deviceID and compare
   b4472:	4601      	mov	r1, r0
   b4474:	4a05      	ldr	r2, [pc, #20]	; (b448c <_ZN14LoRA_Functions14nodeConfiguredEi+0x3c>)
   b4476:	4803      	ldr	r0, [pc, #12]	; (b4484 <_ZN14LoRA_Functions14nodeConfiguredEi+0x34>)
   b4478:	466b      	mov	r3, sp
   b447a:	f7ff fe44 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	if (nodeNumberConfigured == nodeNumber) return true;

	return true;
   b447e:	2001      	movs	r0, #1
}
   b4480:	b002      	add	sp, #8
   b4482:	bd10      	pop	{r4, pc}
   b4484:	2003d99c 	.word	0x2003d99c
   b4488:	000c0b7a 	.word	0x000c0b7a
   b448c:	000c0b89 	.word	0x000c0b89

000b4490 <_ZN14LoRA_Functions7getTypeEi>:

byte LoRA_Functions::getType(int nodeNumber) {
   b4490:	b513      	push	{r0, r1, r4, lr}

	int type;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4492:	4810      	ldr	r0, [pc, #64]	; (b44d4 <_ZN14LoRA_Functions7getTypeEi+0x44>)
byte LoRA_Functions::getType(int nodeNumber) {
   b4494:	460c      	mov	r4, r1
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4496:	f003 fd12 	bl	b7ebe <_ZNK10JsonParser14getOuterObjectEv>
   b449a:	4a0f      	ldr	r2, [pc, #60]	; (b44d8 <_ZN14LoRA_Functions7getTypeEi+0x48>)
   b449c:	4601      	mov	r1, r0
   b449e:	ab01      	add	r3, sp, #4
   b44a0:	480c      	ldr	r0, [pc, #48]	; (b44d4 <_ZN14LoRA_Functions7getTypeEi+0x44>)
   b44a2:	f003 fe63 	bl	b816c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b44a6:	9901      	ldr	r1, [sp, #4]
   b44a8:	480a      	ldr	r0, [pc, #40]	; (b44d4 <_ZN14LoRA_Functions7getTypeEi+0x44>)
   b44aa:	1e62      	subs	r2, r4, #1
   b44ac:	f003 fd29 	bl	b7f02 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   b44b0:	4601      	mov	r1, r0
   b44b2:	b930      	cbnz	r0, b44c2 <_ZN14LoRA_Functions7getTypeEi+0x32>
		Log.info("Node number not found");
   b44b4:	4809      	ldr	r0, [pc, #36]	; (b44dc <_ZN14LoRA_Functions7getTypeEi+0x4c>)
   b44b6:	490a      	ldr	r1, [pc, #40]	; (b44e0 <_ZN14LoRA_Functions7getTypeEi+0x50>)
   b44b8:	f7ff fe41 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		return 255;								// Ran out of entries 
   b44bc:	20ff      	movs	r0, #255	; 0xff

	jp.getValueByKey(nodeObjectContainer, "type", type);

	return type;

}
   b44be:	b002      	add	sp, #8
   b44c0:	bd10      	pop	{r4, pc}
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b44c2:	4804      	ldr	r0, [pc, #16]	; (b44d4 <_ZN14LoRA_Functions7getTypeEi+0x44>)
   b44c4:	4a07      	ldr	r2, [pc, #28]	; (b44e4 <_ZN14LoRA_Functions7getTypeEi+0x54>)
   b44c6:	466b      	mov	r3, sp
   b44c8:	f7ff fe1d 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	return type;
   b44cc:	f89d 0000 	ldrb.w	r0, [sp]
   b44d0:	e7f5      	b.n	b44be <_ZN14LoRA_Functions7getTypeEi+0x2e>
   b44d2:	bf00      	nop
   b44d4:	2003d99c 	.word	0x2003d99c
   b44d8:	000c0b7a 	.word	0x000c0b7a
   b44dc:	2003e658 	.word	0x2003e658
   b44e0:	000c0b8e 	.word	0x000c0b8e
   b44e4:	000c0e88 	.word	0x000c0e88

000b44e8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>:
bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b44e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b44ea:	b087      	sub	sp, #28
   b44ec:	4605      	mov	r5, r0
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b44ee:	f001 fc23 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b44f2:	f001 fe03 	bl	b60fc <_ZNK13sysStatusData15get_magicNumberEv>
   b44f6:	4c40      	ldr	r4, [pc, #256]	; (b45f8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x110>)
   b44f8:	0a00      	lsrs	r0, r0, #8
   b44fa:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b44fc:	f001 fc1c 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b4500:	f001 fdfc 	bl	b60fc <_ZNK13sysStatusData15get_magicNumberEv>
   b4504:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  					// Fourth byte - current time
   b4506:	f00a ffa2 	bl	bf44e <_ZN9TimeClass3nowEv>
   b450a:	1600      	asrs	r0, r0, #24
   b450c:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));						// Third byte
   b450e:	f00a ff9e 	bl	bf44e <_ZN9TimeClass3nowEv>
   b4512:	1400      	asrs	r0, r0, #16
   b4514:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));						// Second byte
   b4516:	f00a ff9a 	bl	bf44e <_ZN9TimeClass3nowEv>
   b451a:	1200      	asrs	r0, r0, #8
   b451c:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    					// First byte		
   b451e:	f00a ff96 	bl	bf44e <_ZN9TimeClass3nowEv>
   b4522:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());			// Frequency of reports - for Gateways
   b4524:	f001 fc08 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b4528:	f001 fded 	bl	b6106 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b452c:	0a00      	lsrs	r0, r0, #8
   b452e:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b4530:	f001 fc02 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b4534:	f001 fde7 	bl	b6106 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4538:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_nodeNumber();
   b453a:	f001 fc4d 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b453e:	f001 fd37 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4542:	7220      	strb	r0, [r4, #8]
	buf[9] = getType(current.get_nodeNumber());
   b4544:	f001 fc48 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4548:	f001 fd32 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b454c:	4601      	mov	r1, r0
   b454e:	4628      	mov	r0, r5
   b4550:	f7ff ff9e 	bl	b4490 <_ZN14LoRA_Functions7getTypeEi>
   b4554:	7260      	strb	r0, [r4, #9]
   b4556:	4605      	mov	r5, r0
	Log.info("Sent response to sensorType %d node %d, time = %s and frequency %d minutes",  buf[9], current.get_tempNodeNumber(), Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b4558:	f001 fc3e 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b455c:	f001 fd2d 	bl	b5fba <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4560:	4606      	mov	r6, r0
   b4562:	f00a ff74 	bl	bf44e <_ZN9TimeClass3nowEv>
   b4566:	4602      	mov	r2, r0
   b4568:	17c3      	asrs	r3, r0, #31
   b456a:	a802      	add	r0, sp, #8
   b456c:	f00a fe6a 	bl	bf244 <_ZN9TimeClass7timeStrEx>
	const char * c_str() const { return buffer; }
   b4570:	9f02      	ldr	r7, [sp, #8]
   b4572:	f001 fbe1 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b4576:	f001 fdc6 	bl	b6106 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b457a:	462a      	mov	r2, r5
   b457c:	491f      	ldr	r1, [pc, #124]	; (b45fc <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x114>)
   b457e:	4633      	mov	r3, r6
   b4580:	e9cd 7000 	strd	r7, r0, [sp]
   b4584:	481e      	ldr	r0, [pc, #120]	; (b4600 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x118>)
   b4586:	f7ff fdda 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b458a:	a802      	add	r0, sp, #8
   b458c:	f00a fbac 	bl	bece8 <_ZN6StringD1Ev>
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4590:	4b1c      	ldr	r3, [pc, #112]	; (b4604 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x11c>)
   b4592:	881d      	ldrh	r5, [r3, #0]
   b4594:	2101      	movs	r1, #1
   b4596:	4628      	mov	r0, r5
   b4598:	f00b f969 	bl	bf86e <digitalWrite>
	if (manager.sendtoWait(buf, 10, current.get_tempNodeNumber(), JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b459c:	f001 fc1c 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b45a0:	f001 fd0b 	bl	b5fba <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b45a4:	2202      	movs	r2, #2
   b45a6:	4603      	mov	r3, r0
   b45a8:	9200      	str	r2, [sp, #0]
   b45aa:	4621      	mov	r1, r4
   b45ac:	4816      	ldr	r0, [pc, #88]	; (b4608 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x120>)
   b45ae:	220a      	movs	r2, #10
   b45b0:	f005 ffda 	bl	ba568 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b45b4:	4604      	mov	r4, r0
   b45b6:	b9a8      	cbnz	r0, b45e4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xfc>
		Log.info("Response received successfully");
   b45b8:	4914      	ldr	r1, [pc, #80]	; (b460c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x124>)
   b45ba:	4811      	ldr	r0, [pc, #68]	; (b4600 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x118>)
   b45bc:	f7ff fdbf 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		current.set_tempNodeNumber(current.get_nodeNumber());		// Temp no longer needed
   b45c0:	f001 fc0a 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b45c4:	4606      	mov	r6, r0
   b45c6:	f001 fc07 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b45ca:	f001 fcf1 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b45ce:	4601      	mov	r1, r0
   b45d0:	4630      	mov	r0, r6
   b45d2:	f001 fd57 	bl	b6084 <_ZN17currentStatusData18set_tempNodeNumberEh>
		digitalWrite(BLUE_LED,LOW);
   b45d6:	4628      	mov	r0, r5
   b45d8:	4621      	mov	r1, r4
   b45da:	f00b f948 	bl	bf86e <digitalWrite>
		return true;
   b45de:	2001      	movs	r0, #1
}
   b45e0:	b007      	add	sp, #28
   b45e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("Response not acknowledged");							// Acknowledgement not received - this needs more attention as node is in undefined state
   b45e4:	490a      	ldr	r1, [pc, #40]	; (b4610 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x128>)
   b45e6:	4806      	ldr	r0, [pc, #24]	; (b4600 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x118>)
   b45e8:	f7ff fda9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b45ec:	4628      	mov	r0, r5
   b45ee:	2100      	movs	r1, #0
   b45f0:	f00b f93d 	bl	bf86e <digitalWrite>
		return false;
   b45f4:	2000      	movs	r0, #0
   b45f6:	e7f3      	b.n	b45e0 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf8>
   b45f8:	2003d7f0 	.word	0x2003d7f0
   b45fc:	000c0ba4 	.word	0x000c0ba4
   b4600:	2003e658 	.word	0x2003e658
   b4604:	000c14bc 	.word	0x000c14bc
   b4608:	2003e0e8 	.word	0x2003e0e8
   b460c:	000c0bef 	.word	0x000c0bef
   b4610:	000c0b60 	.word	0x000c0b60

000b4614 <_ZN14LoRA_Functions13printNodeDataEv>:

	return true;

}

void LoRA_Functions::printNodeData() {
   b4614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4618:	b0b3      	sub	sp, #204	; 0xcc

	int nodeNumber;
	String nodeDeviceID;
   b461a:	493e      	ldr	r1, [pc, #248]	; (b4714 <_ZN14LoRA_Functions13printNodeDataEv+0x100>)
	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b461c:	4e3e      	ldr	r6, [pc, #248]	; (b4718 <_ZN14LoRA_Functions13printNodeDataEv+0x104>)
		if(nodeObjectContainer == NULL) {
			Log.info("Last entry at i = %d", i);
			break;								// Ran out of entries 
		} 
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b461e:	4f3f      	ldr	r7, [pc, #252]	; (b471c <_ZN14LoRA_Functions13printNodeDataEv+0x108>)
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b4620:	f8df 8120 	ldr.w	r8, [pc, #288]	; b4744 <_ZN14LoRA_Functions13printNodeDataEv+0x130>
	String nodeDeviceID;
   b4624:	a80a      	add	r0, sp, #40	; 0x28
   b4626:	f00a fbaa 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
	Log.info("Print Node result:");
   b462a:	493d      	ldr	r1, [pc, #244]	; (b4720 <_ZN14LoRA_Functions13printNodeDataEv+0x10c>)
   b462c:	483d      	ldr	r0, [pc, #244]	; (b4724 <_ZN14LoRA_Functions13printNodeDataEv+0x110>)
   b462e:	f7ff fd86 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4632:	4839      	ldr	r0, [pc, #228]	; (b4718 <_ZN14LoRA_Functions13printNodeDataEv+0x104>)
   b4634:	f003 fc43 	bl	b7ebe <_ZNK10JsonParser14getOuterObjectEv>
   b4638:	4a3b      	ldr	r2, [pc, #236]	; (b4728 <_ZN14LoRA_Functions13printNodeDataEv+0x114>)
   b463a:	4601      	mov	r1, r0
   b463c:	ab09      	add	r3, sp, #36	; 0x24
   b463e:	4836      	ldr	r0, [pc, #216]	; (b4718 <_ZN14LoRA_Functions13printNodeDataEv+0x104>)
   b4640:	f003 fd94 	bl	b816c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4644:	2500      	movs	r5, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4646:	9909      	ldr	r1, [sp, #36]	; 0x24
   b4648:	462a      	mov	r2, r5
   b464a:	4630      	mov	r0, r6
   b464c:	f003 fc59 	bl	b7f02 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   b4650:	4601      	mov	r1, r0
   b4652:	b950      	cbnz	r0, b466a <_ZN14LoRA_Functions13printNodeDataEv+0x56>
			Log.info("Last entry at i = %d", i);
   b4654:	4935      	ldr	r1, [pc, #212]	; (b472c <_ZN14LoRA_Functions13printNodeDataEv+0x118>)
   b4656:	4833      	ldr	r0, [pc, #204]	; (b4724 <_ZN14LoRA_Functions13printNodeDataEv+0x110>)
   b4658:	462a      	mov	r2, r5
   b465a:	f7ff fd70 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	String nodeDeviceID;
   b465e:	a80a      	add	r0, sp, #40	; 0x28
   b4660:	f00a fb42 	bl	bece8 <_ZN6StringD1Ev>
		if (Particle.connected()) Particle.publish("nodeData", data, PRIVATE);
	}

	//#endif

}
   b4664:	b033      	add	sp, #204	; 0xcc
   b4666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b466a:	ab0a      	add	r3, sp, #40	; 0x28
   b466c:	463a      	mov	r2, r7
   b466e:	9005      	str	r0, [sp, #20]
   b4670:	4630      	mov	r0, r6
   b4672:	f7ff fd56 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b4676:	9905      	ldr	r1, [sp, #20]
   b4678:	ab06      	add	r3, sp, #24
   b467a:	4642      	mov	r2, r8
   b467c:	4630      	mov	r0, r6
   b467e:	f7ff fd42 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b4682:	4a2b      	ldr	r2, [pc, #172]	; (b4730 <_ZN14LoRA_Functions13printNodeDataEv+0x11c>)
   b4684:	9905      	ldr	r1, [sp, #20]
   b4686:	ab07      	add	r3, sp, #28
   b4688:	4630      	mov	r0, r6
   b468a:	f7ff fd3c 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);
   b468e:	9905      	ldr	r1, [sp, #20]
   b4690:	4a28      	ldr	r2, [pc, #160]	; (b4734 <_ZN14LoRA_Functions13printNodeDataEv+0x120>)
   b4692:	ab08      	add	r3, sp, #32
   b4694:	4630      	mov	r0, r6
   b4696:	f7ff fd36 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		snprintf(data, sizeof(data), "Node %d, deviceID: %s, lastConnected: %s, type %d", nodeNumber, nodeDeviceID.c_str(),Time.timeStr(lastConnect).c_str(), sensorType);
   b469a:	9a07      	ldr	r2, [sp, #28]
   b469c:	9c06      	ldr	r4, [sp, #24]
   b469e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   b46a2:	17d3      	asrs	r3, r2, #31
   b46a4:	a80e      	add	r0, sp, #56	; 0x38
   b46a6:	f00a fdcd 	bl	bf244 <_ZN9TimeClass7timeStrEx>
   b46aa:	9b08      	ldr	r3, [sp, #32]
   b46ac:	9302      	str	r3, [sp, #8]
   b46ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b46b0:	4a21      	ldr	r2, [pc, #132]	; (b4738 <_ZN14LoRA_Functions13printNodeDataEv+0x124>)
   b46b2:	2180      	movs	r1, #128	; 0x80
   b46b4:	e9cd 9300 	strd	r9, r3, [sp]
   b46b8:	a812      	add	r0, sp, #72	; 0x48
   b46ba:	4623      	mov	r3, r4
   b46bc:	f007 ffc6 	bl	bc64c <snprintf>
   b46c0:	a80e      	add	r0, sp, #56	; 0x38
   b46c2:	f00a fb11 	bl	bece8 <_ZN6StringD1Ev>
		Log.info(data);
   b46c6:	4817      	ldr	r0, [pc, #92]	; (b4724 <_ZN14LoRA_Functions13printNodeDataEv+0x110>)
   b46c8:	a912      	add	r1, sp, #72	; 0x48
   b46ca:	f7ff fd38 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b46ce:	f007 feed 	bl	bc4ac <spark_cloud_flag_connected>
		if (Particle.connected()) Particle.publish("nodeData", data, PRIVATE);
   b46d2:	b1d8      	cbz	r0, b470c <_ZN14LoRA_Functions13printNodeDataEv+0xf8>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b46d4:	4b19      	ldr	r3, [pc, #100]	; (b473c <_ZN14LoRA_Functions13printNodeDataEv+0x128>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b46d6:	491a      	ldr	r1, [pc, #104]	; (b4740 <_ZN14LoRA_Functions13printNodeDataEv+0x12c>)
   b46d8:	781b      	ldrb	r3, [r3, #0]
   b46da:	f88d 3000 	strb.w	r3, [sp]
   b46de:	aa12      	add	r2, sp, #72	; 0x48
   b46e0:	233c      	movs	r3, #60	; 0x3c
   b46e2:	a80e      	add	r0, sp, #56	; 0x38
   b46e4:	f008 fad8 	bl	bcc98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b46e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   b46ea:	b17c      	cbz	r4, b470c <_ZN14LoRA_Functions13printNodeDataEv+0xf8>
      if (--_M_use_count == 0)
   b46ec:	6863      	ldr	r3, [r4, #4]
   b46ee:	3b01      	subs	r3, #1
   b46f0:	6063      	str	r3, [r4, #4]
   b46f2:	b95b      	cbnz	r3, b470c <_ZN14LoRA_Functions13printNodeDataEv+0xf8>
          _M_dispose();
   b46f4:	6823      	ldr	r3, [r4, #0]
   b46f6:	4620      	mov	r0, r4
   b46f8:	689b      	ldr	r3, [r3, #8]
   b46fa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b46fc:	68a3      	ldr	r3, [r4, #8]
   b46fe:	3b01      	subs	r3, #1
   b4700:	60a3      	str	r3, [r4, #8]
   b4702:	b91b      	cbnz	r3, b470c <_ZN14LoRA_Functions13printNodeDataEv+0xf8>
            _M_destroy();
   b4704:	6823      	ldr	r3, [r4, #0]
   b4706:	4620      	mov	r0, r4
   b4708:	68db      	ldr	r3, [r3, #12]
   b470a:	4798      	blx	r3
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b470c:	3501      	adds	r5, #1
   b470e:	2d0a      	cmp	r5, #10
   b4710:	d199      	bne.n	b4646 <_ZN14LoRA_Functions13printNodeDataEv+0x32>
   b4712:	e7a4      	b.n	b465e <_ZN14LoRA_Functions13printNodeDataEv+0x4a>
   b4714:	000c2399 	.word	0x000c2399
   b4718:	2003d99c 	.word	0x2003d99c
   b471c:	000c0b85 	.word	0x000c0b85
   b4720:	000c0c0e 	.word	0x000c0c0e
   b4724:	2003e658 	.word	0x2003e658
   b4728:	000c0b7a 	.word	0x000c0b7a
   b472c:	000c0c21 	.word	0x000c0c21
   b4730:	000c0c36 	.word	0x000c0c36
   b4734:	000c0e88 	.word	0x000c0e88
   b4738:	000c0c3b 	.word	0x000c0c3b
   b473c:	2003d7e1 	.word	0x2003d7e1
   b4740:	000c0c6d 	.word	0x000c0c6d
   b4744:	000c0b89 	.word	0x000c0b89

000b4748 <_ZN14LoRA_Functions5setupEb>:
bool LoRA_Functions::setup(bool gatewayID) {
   b4748:	b570      	push	{r4, r5, r6, lr}
   b474a:	4605      	mov	r5, r0
   b474c:	b086      	sub	sp, #24
	if (!manager.init()) {
   b474e:	483f      	ldr	r0, [pc, #252]	; (b484c <_ZN14LoRA_Functions5setupEb+0x104>)
bool LoRA_Functions::setup(bool gatewayID) {
   b4750:	460e      	mov	r6, r1
	if (!manager.init()) {
   b4752:	f006 f944 	bl	ba9de <_ZN8RHRouter4initEv>
   b4756:	4604      	mov	r4, r0
   b4758:	b930      	cbnz	r0, b4768 <_ZN14LoRA_Functions5setupEb+0x20>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b475a:	493d      	ldr	r1, [pc, #244]	; (b4850 <_ZN14LoRA_Functions5setupEb+0x108>)
   b475c:	483d      	ldr	r0, [pc, #244]	; (b4854 <_ZN14LoRA_Functions5setupEb+0x10c>)
   b475e:	f7ff fcee 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b4762:	4620      	mov	r0, r4
   b4764:	b006      	add	sp, #24
   b4766:	bd70      	pop	{r4, r5, r6, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b4768:	ed9f 0a3b 	vldr	s0, [pc, #236]	; b4858 <_ZN14LoRA_Functions5setupEb+0x110>
   b476c:	483b      	ldr	r0, [pc, #236]	; (b485c <_ZN14LoRA_Functions5setupEb+0x114>)
   b476e:	f006 fc2f 	bl	bafd0 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4772:	483a      	ldr	r0, [pc, #232]	; (b485c <_ZN14LoRA_Functions5setupEb+0x114>)
   b4774:	2200      	movs	r2, #0
   b4776:	2117      	movs	r1, #23
   b4778:	f006 fda4 	bl	bb2c4 <_ZN7RH_RF9510setTxPowerEab>
	if (gatewayID == true) {
   b477c:	b37e      	cbz	r6, b47de <_ZN14LoRA_Functions5setupEb+0x96>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b477e:	f001 fadb 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b4782:	2100      	movs	r1, #0
   b4784:	f001 fc5a 	bl	b603c <_ZN13sysStatusData14set_nodeNumberEh>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4788:	a802      	add	r0, sp, #8
   b478a:	f007 fe97 	bl	bc4bc <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b478e:	9a02      	ldr	r2, [sp, #8]
   b4790:	4933      	ldr	r1, [pc, #204]	; (b4860 <_ZN14LoRA_Functions5setupEb+0x118>)
   b4792:	4830      	ldr	r0, [pc, #192]	; (b4854 <_ZN14LoRA_Functions5setupEb+0x10c>)
   b4794:	f7ff fcd3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4798:	a802      	add	r0, sp, #8
   b479a:	f00a faa5 	bl	bece8 <_ZN6StringD1Ev>
	jp.addString(nodeID.get_nodeIDJson());				// Read in the JSON string from memory
   b479e:	f001 fb99 	bl	b5ed4 <_ZN10nodeIDData8instanceEv>
   b47a2:	4601      	mov	r1, r0
   b47a4:	a802      	add	r0, sp, #8
   b47a6:	f001 fbbb 	bl	b5f20 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b47aa:	9902      	ldr	r1, [sp, #8]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b47ac:	9101      	str	r1, [sp, #4]
   b47ae:	4608      	mov	r0, r1
   b47b0:	f00b ff55 	bl	c065e <strlen>
   b47b4:	9901      	ldr	r1, [sp, #4]
   b47b6:	4602      	mov	r2, r0
   b47b8:	482a      	ldr	r0, [pc, #168]	; (b4864 <_ZN14LoRA_Functions5setupEb+0x11c>)
   b47ba:	f003 fb48 	bl	b7e4e <_ZN10JsonBuffer7addDataEPKcj>
   b47be:	a802      	add	r0, sp, #8
   b47c0:	f00a fa92 	bl	bece8 <_ZN6StringD1Ev>
	if (jp.parse()) Log.info("Parsed Successfully");
   b47c4:	4827      	ldr	r0, [pc, #156]	; (b4864 <_ZN14LoRA_Functions5setupEb+0x11c>)
   b47c6:	f004 f839 	bl	b883c <_ZN10JsonParser5parseEv>
   b47ca:	2800      	cmp	r0, #0
   b47cc:	d03c      	beq.n	b4848 <_ZN14LoRA_Functions5setupEb+0x100>
   b47ce:	4926      	ldr	r1, [pc, #152]	; (b4868 <_ZN14LoRA_Functions5setupEb+0x120>)
	else Log.info("Parsing error");
   b47d0:	4820      	ldr	r0, [pc, #128]	; (b4854 <_ZN14LoRA_Functions5setupEb+0x10c>)
   b47d2:	f7ff fcb4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	printNodeData();
   b47d6:	4628      	mov	r0, r5
   b47d8:	f7ff ff1c 	bl	b4614 <_ZN14LoRA_Functions13printNodeDataEv>
	return true;
   b47dc:	e7c1      	b.n	b4762 <_ZN14LoRA_Functions5setupEb+0x1a>
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b47de:	f001 faab 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b47e2:	f001 fbc7 	bl	b5f74 <_ZNK13sysStatusData14get_nodeNumberEv>
   b47e6:	b1d8      	cbz	r0, b4820 <_ZN14LoRA_Functions5setupEb+0xd8>
   b47e8:	f001 faa6 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b47ec:	f001 fbc2 	bl	b5f74 <_ZNK13sysStatusData14get_nodeNumberEv>
   b47f0:	280a      	cmp	r0, #10
   b47f2:	d815      	bhi.n	b4820 <_ZN14LoRA_Functions5setupEb+0xd8>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b47f4:	f001 faa0 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b47f8:	f001 fbbc 	bl	b5f74 <_ZNK13sysStatusData14get_nodeNumberEv>
   b47fc:	4601      	mov	r1, r0
   b47fe:	481b      	ldr	r0, [pc, #108]	; (b486c <_ZN14LoRA_Functions5setupEb+0x124>)
   b4800:	f005 fc19 	bl	ba036 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4804:	4819      	ldr	r0, [pc, #100]	; (b486c <_ZN14LoRA_Functions5setupEb+0x124>)
   b4806:	f005 fbfc 	bl	ba002 <_ZN10RHDatagram11thisAddressEv>
   b480a:	9001      	str	r0, [sp, #4]
   b480c:	a802      	add	r0, sp, #8
   b480e:	f007 fe55 	bl	bc4bc <spark_deviceID>
   b4812:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b4816:	4916      	ldr	r1, [pc, #88]	; (b4870 <_ZN14LoRA_Functions5setupEb+0x128>)
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4818:	480e      	ldr	r0, [pc, #56]	; (b4854 <_ZN14LoRA_Functions5setupEb+0x10c>)
   b481a:	f7ff fc90 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b481e:	e7bb      	b.n	b4798 <_ZN14LoRA_Functions5setupEb+0x50>
		sysStatus.set_nodeNumber(11);
   b4820:	f001 fa8a 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b4824:	210b      	movs	r1, #11
   b4826:	f001 fc09 	bl	b603c <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b482a:	210b      	movs	r1, #11
   b482c:	480f      	ldr	r0, [pc, #60]	; (b486c <_ZN14LoRA_Functions5setupEb+0x124>)
   b482e:	f005 fc02 	bl	ba036 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4832:	480e      	ldr	r0, [pc, #56]	; (b486c <_ZN14LoRA_Functions5setupEb+0x124>)
   b4834:	f005 fbe5 	bl	ba002 <_ZN10RHDatagram11thisAddressEv>
   b4838:	9001      	str	r0, [sp, #4]
   b483a:	a802      	add	r0, sp, #8
   b483c:	f007 fe3e 	bl	bc4bc <spark_deviceID>
   b4840:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b4844:	490b      	ldr	r1, [pc, #44]	; (b4874 <_ZN14LoRA_Functions5setupEb+0x12c>)
   b4846:	e7e7      	b.n	b4818 <_ZN14LoRA_Functions5setupEb+0xd0>
	else Log.info("Parsing error");
   b4848:	490b      	ldr	r1, [pc, #44]	; (b4878 <_ZN14LoRA_Functions5setupEb+0x130>)
   b484a:	e7c1      	b.n	b47d0 <_ZN14LoRA_Functions5setupEb+0x88>
   b484c:	2003e0e8 	.word	0x2003e0e8
   b4850:	000c0c76 	.word	0x000c0c76
   b4854:	2003e658 	.word	0x2003e658
   b4858:	4464c000 	.word	0x4464c000
   b485c:	2003d86c 	.word	0x2003d86c
   b4860:	000c0c82 	.word	0x000c0c82
   b4864:	2003d99c 	.word	0x2003d99c
   b4868:	000c0d3a 	.word	0x000c0d3a
   b486c:	2003e0ec 	.word	0x2003e0ec
   b4870:	000c0cbc 	.word	0x000c0cbc
   b4874:	000c0cf3 	.word	0x000c0cf3
   b4878:	000c0d4e 	.word	0x000c0d4e

000b487c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>:
bool LoRA_Functions::acknowledgeDataReportGateway() { 		// This is a response to a data message it has a length of 11 and a specific payload and message flag
   b487c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	attempts++;
   b4880:	4d6b      	ldr	r5, [pc, #428]	; (b4a30 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1b4>)
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b4882:	4c6c      	ldr	r4, [pc, #432]	; (b4a34 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1b8>)
	attempts++;
   b4884:	682b      	ldr	r3, [r5, #0]
bool LoRA_Functions::acknowledgeDataReportGateway() { 		// This is a response to a data message it has a length of 11 and a specific payload and message flag
   b4886:	b089      	sub	sp, #36	; 0x24
	attempts++;
   b4888:	3301      	adds	r3, #1
   b488a:	602b      	str	r3, [r5, #0]
bool LoRA_Functions::acknowledgeDataReportGateway() { 		// This is a response to a data message it has a length of 11 and a specific payload and message flag
   b488c:	4606      	mov	r6, r0
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b488e:	f00a fdde 	bl	bf44e <_ZN9TimeClass3nowEv>
   b4892:	1600      	asrs	r0, r0, #24
   b4894:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));		// Third byte
   b4896:	f00a fdda 	bl	bf44e <_ZN9TimeClass3nowEv>
   b489a:	1400      	asrs	r0, r0, #16
   b489c:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));		// Second byte
   b489e:	f00a fdd6 	bl	bf44e <_ZN9TimeClass3nowEv>
   b48a2:	1200      	asrs	r0, r0, #8
   b48a4:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    	// First byte			
   b48a6:	f00a fdd2 	bl	bf44e <_ZN9TimeClass3nowEv>
   b48aa:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports - for Gateways
   b48ac:	f001 fa44 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b48b0:	f001 fc29 	bl	b6106 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b48b4:	0a00      	lsrs	r0, r0, #8
   b48b6:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b48b8:	f001 fa3e 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b48bc:	f001 fc23 	bl	b6106 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b48c0:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_openHours();
   b48c2:	f001 fa89 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b48c6:	f001 fd09 	bl	b62dc <_ZNK17currentStatusData13get_openHoursEv>
   b48ca:	7220      	strb	r0, [r4, #8]
	if (nodeConfigured(current.get_nodeNumber())) {			// Check to see if we need to set an alert code
   b48cc:	f001 fa84 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b48d0:	f001 fb6e 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b48d4:	4601      	mov	r1, r0
   b48d6:	4630      	mov	r0, r6
   b48d8:	f7ff fdba 	bl	b4450 <_ZN14LoRA_Functions14nodeConfiguredEi>
   b48dc:	2800      	cmp	r0, #0
   b48de:	d06f      	beq.n	b49c0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x144>
		Log.info("Data Ack- Node number %d valid", current.get_nodeNumber());
   b48e0:	f001 fa7a 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b48e4:	f001 fb64 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b48e8:	4953      	ldr	r1, [pc, #332]	; (b4a38 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1bc>)
   b48ea:	4602      	mov	r2, r0
   b48ec:	4853      	ldr	r0, [pc, #332]	; (b4a3c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c0>)
   b48ee:	f7ff fc26 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		buf[9] = 0;											// Default is that there is no alert code
   b48f2:	2300      	movs	r3, #0
   b48f4:	7263      	strb	r3, [r4, #9]
	buf[10] = current.get_messageNumber();			 // Message number
   b48f6:	f001 fa6f 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b48fa:	f001 fb72 	bl	b5fe2 <_ZNK17currentStatusData17get_messageNumberEv>
	Log.info("Acknowlegment to %snode %d message %d, time = %s and frequency %d minutes", (buf[9] > 0) ? "misconfigured ":"", current.get_nodeNumber(), buf[10], Time.timeStr(Time.now()).c_str(), sysStatus.get_frequencyMinutes());
   b48fe:	4f50      	ldr	r7, [pc, #320]	; (b4a40 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c4>)
   b4900:	7a62      	ldrb	r2, [r4, #9]
   b4902:	4b50      	ldr	r3, [pc, #320]	; (b4a44 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c8>)
	buf[10] = current.get_messageNumber();			 // Message number
   b4904:	72a0      	strb	r0, [r4, #10]
	Log.info("Acknowlegment to %snode %d message %d, time = %s and frequency %d minutes", (buf[9] > 0) ? "misconfigured ":"", current.get_nodeNumber(), buf[10], Time.timeStr(Time.now()).c_str(), sysStatus.get_frequencyMinutes());
   b4906:	2a00      	cmp	r2, #0
   b4908:	bf08      	it	eq
   b490a:	461f      	moveq	r7, r3
   b490c:	f001 fa64 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4910:	f001 fb4e 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4914:	7aa4      	ldrb	r4, [r4, #10]
   b4916:	4680      	mov	r8, r0
   b4918:	f00a fd99 	bl	bf44e <_ZN9TimeClass3nowEv>
   b491c:	4602      	mov	r2, r0
   b491e:	17c3      	asrs	r3, r0, #31
   b4920:	a804      	add	r0, sp, #16
   b4922:	f00a fc8f 	bl	bf244 <_ZN9TimeClass7timeStrEx>
   b4926:	f8dd 9010 	ldr.w	r9, [sp, #16]
   b492a:	f001 fa05 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b492e:	f001 fbea 	bl	b6106 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4932:	463a      	mov	r2, r7
   b4934:	4944      	ldr	r1, [pc, #272]	; (b4a48 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1cc>)
   b4936:	9400      	str	r4, [sp, #0]
   b4938:	4643      	mov	r3, r8
   b493a:	e9cd 9001 	strd	r9, r0, [sp, #4]
   b493e:	483f      	ldr	r0, [pc, #252]	; (b4a3c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c0>)
   b4940:	f7ff fbfd 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4944:	a804      	add	r0, sp, #16
   b4946:	f00a f9cf 	bl	bece8 <_ZN6StringD1Ev>
	printNodeData();
   b494a:	4630      	mov	r0, r6
   b494c:	f7ff fe62 	bl	b4614 <_ZN14LoRA_Functions13printNodeDataEv>
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4950:	4b3e      	ldr	r3, [pc, #248]	; (b4a4c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1d0>)
   b4952:	881e      	ldrh	r6, [r3, #0]
   b4954:	2101      	movs	r1, #1
   b4956:	4630      	mov	r0, r6
   b4958:	f00a ff89 	bl	bf86e <digitalWrite>
	if (manager.sendtoWait(buf, 11, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b495c:	f001 fa3c 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4960:	f001 fb26 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4964:	2204      	movs	r2, #4
   b4966:	4603      	mov	r3, r0
   b4968:	9200      	str	r2, [sp, #0]
   b496a:	4932      	ldr	r1, [pc, #200]	; (b4a34 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1b8>)
   b496c:	4838      	ldr	r0, [pc, #224]	; (b4a50 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1d4>)
   b496e:	220b      	movs	r2, #11
   b4970:	f005 fdfa 	bl	ba568 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4974:	4b37      	ldr	r3, [pc, #220]	; (b4a54 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1d8>)
   b4976:	4604      	mov	r4, r0
		success++;
   b4978:	6818      	ldr	r0, [r3, #0]
	if (manager.sendtoWait(buf, 11, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b497a:	2c00      	cmp	r4, #0
   b497c:	d13b      	bne.n	b49f6 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x17a>
		success++;
   b497e:	3001      	adds	r0, #1
   b4980:	6018      	str	r0, [r3, #0]
		Log.info("Response received successfully - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b4982:	f00b f9d5 	bl	bfd30 <__aeabi_i2d>
   b4986:	4680      	mov	r8, r0
   b4988:	6828      	ldr	r0, [r5, #0]
   b498a:	4689      	mov	r9, r1
   b498c:	f00b f9d0 	bl	bfd30 <__aeabi_i2d>
   b4990:	4602      	mov	r2, r0
   b4992:	460b      	mov	r3, r1
   b4994:	4640      	mov	r0, r8
   b4996:	4649      	mov	r1, r9
   b4998:	f00b fb5e 	bl	c0058 <__aeabi_ddiv>
   b499c:	4b2e      	ldr	r3, [pc, #184]	; (b4a58 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1dc>)
   b499e:	2200      	movs	r2, #0
   b49a0:	f00b fa30 	bl	bfe04 <__aeabi_dmul>
   b49a4:	4602      	mov	r2, r0
   b49a6:	460b      	mov	r3, r1
   b49a8:	4824      	ldr	r0, [pc, #144]	; (b4a3c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c0>)
   b49aa:	492c      	ldr	r1, [pc, #176]	; (b4a5c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1e0>)
   b49ac:	f7ff fbc7 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b49b0:	4630      	mov	r0, r6
   b49b2:	4621      	mov	r1, r4
   b49b4:	f00a ff5b 	bl	bf86e <digitalWrite>
		return true;
   b49b8:	2001      	movs	r0, #1
}
   b49ba:	b009      	add	sp, #36	; 0x24
   b49bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		Log.info("Data Ack - Node number %d is invalid - resetting", current.get_nodeNumber());
   b49c0:	f001 fa0a 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b49c4:	f001 faf4 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b49c8:	4925      	ldr	r1, [pc, #148]	; (b4a60 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1e4>)
   b49ca:	4602      	mov	r2, r0
   b49cc:	481b      	ldr	r0, [pc, #108]	; (b4a3c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c0>)
   b49ce:	f7ff fbb6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		current.set_alertCodeNode(true);						// Store as this will impact reporting
   b49d2:	f001 fa01 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b49d6:	2101      	movs	r1, #1
   b49d8:	f001 fb72 	bl	b60c0 <_ZN17currentStatusData17set_alertCodeNodeEh>
		buf[9] = 1;												// Set the alert code
   b49dc:	2301      	movs	r3, #1
   b49de:	7263      	strb	r3, [r4, #9]
		current.set_alertTimestampNode(Time.now());
   b49e0:	f001 f9fa 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b49e4:	4607      	mov	r7, r0
   b49e6:	f00a fd32 	bl	bf44e <_ZN9TimeClass3nowEv>
   b49ea:	4602      	mov	r2, r0
   b49ec:	17c3      	asrs	r3, r0, #31
   b49ee:	4638      	mov	r0, r7
   b49f0:	f001 fc58 	bl	b62a4 <_ZN17currentStatusData22set_alertTimestampNodeEx>
   b49f4:	e77f      	b.n	b48f6 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x7a>
		Log.info("Response not acknowledged - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b49f6:	f00b f99b 	bl	bfd30 <__aeabi_i2d>
   b49fa:	4680      	mov	r8, r0
   b49fc:	6828      	ldr	r0, [r5, #0]
   b49fe:	4689      	mov	r9, r1
   b4a00:	f00b f996 	bl	bfd30 <__aeabi_i2d>
   b4a04:	4602      	mov	r2, r0
   b4a06:	460b      	mov	r3, r1
   b4a08:	4640      	mov	r0, r8
   b4a0a:	4649      	mov	r1, r9
   b4a0c:	f00b fb24 	bl	c0058 <__aeabi_ddiv>
   b4a10:	4b11      	ldr	r3, [pc, #68]	; (b4a58 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1dc>)
   b4a12:	2200      	movs	r2, #0
   b4a14:	f00b f9f6 	bl	bfe04 <__aeabi_dmul>
   b4a18:	4602      	mov	r2, r0
   b4a1a:	460b      	mov	r3, r1
   b4a1c:	4807      	ldr	r0, [pc, #28]	; (b4a3c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c0>)
   b4a1e:	4911      	ldr	r1, [pc, #68]	; (b4a64 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1e8>)
   b4a20:	f7ff fb8d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b4a24:	4630      	mov	r0, r6
   b4a26:	2100      	movs	r1, #0
   b4a28:	f00a ff21 	bl	bf86e <digitalWrite>
		return false;
   b4a2c:	2000      	movs	r0, #0
   b4a2e:	e7c4      	b.n	b49ba <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x13e>
   b4a30:	2003d7ec 	.word	0x2003d7ec
   b4a34:	2003d7f0 	.word	0x2003d7f0
   b4a38:	000c0d6b 	.word	0x000c0d6b
   b4a3c:	2003e658 	.word	0x2003e658
   b4a40:	000c0d5c 	.word	0x000c0d5c
   b4a44:	000c2399 	.word	0x000c2399
   b4a48:	000c0dbb 	.word	0x000c0dbb
   b4a4c:	000c14bc 	.word	0x000c14bc
   b4a50:	2003e0e8 	.word	0x2003e0e8
   b4a54:	2003d7e8 	.word	0x2003d7e8
   b4a58:	40590000 	.word	0x40590000
   b4a5c:	000c0e05 	.word	0x000c0e05
   b4a60:	000c0d8a 	.word	0x000c0d8a
   b4a64:	000c0e39 	.word	0x000c0e39

000b4a68 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>:
bool LoRA_Functions::respondToLoRAMessageGateway() {
   b4a68:	b510      	push	{r4, lr}
	Log.info("Responding using the %s message type", loraStateNames[lora_state]);
   b4a6a:	4c13      	ldr	r4, [pc, #76]	; (b4ab8 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x50>)
   b4a6c:	4b13      	ldr	r3, [pc, #76]	; (b4abc <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x54>)
   b4a6e:	7822      	ldrb	r2, [r4, #0]
   b4a70:	4913      	ldr	r1, [pc, #76]	; (b4ac0 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x58>)
   b4a72:	4814      	ldr	r0, [pc, #80]	; (b4ac4 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x5c>)
   b4a74:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b4a78:	f7ff fb61 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b4a7c:	7823      	ldrb	r3, [r4, #0]
   b4a7e:	2b04      	cmp	r3, #4
   b4a80:	d00c      	beq.n	b4a9c <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x34>
	if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().acknowledgeJoinRequestGateway()) return true;}
   b4a82:	7823      	ldrb	r3, [r4, #0]
   b4a84:	2b02      	cmp	r3, #2
   b4a86:	d104      	bne.n	b4a92 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x2a>
   b4a88:	f7ff fb72 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4a8c:	f7ff fd2c 	bl	b44e8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>
   b4a90:	b950      	cbnz	r0, b4aa8 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x40>
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b4a92:	7823      	ldrb	r3, [r4, #0]
   b4a94:	2b06      	cmp	r3, #6
   b4a96:	d009      	beq.n	b4aac <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x44>
	return false; 
   b4a98:	2000      	movs	r0, #0
   b4a9a:	e006      	b.n	b4aaa <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x42>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b4a9c:	f7ff fb68 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4aa0:	f7ff feec 	bl	b487c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>
   b4aa4:	2800      	cmp	r0, #0
   b4aa6:	d0ec      	beq.n	b4a82 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x1a>
   b4aa8:	2001      	movs	r0, #1
}
   b4aaa:	bd10      	pop	{r4, pc}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b4aac:	f7ff fb60 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
}
   b4ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b4ab4:	f7ff bc18 	b.w	b42e8 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>
   b4ab8:	2003d7e0 	.word	0x2003d7e0
   b4abc:	2003d5dc 	.word	0x2003d5dc
   b4ac0:	000c0e68 	.word	0x000c0e68
   b4ac4:	2003e658 	.word	0x2003e658

000b4ac8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   b4ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4aca:	4604      	mov	r4, r0
   b4acc:	4615      	mov	r5, r2
   b4ace:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b4ad0:	f003 fc70 	bl	b83b4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4ad4:	9901      	ldr	r1, [sp, #4]
   b4ad6:	2201      	movs	r2, #1
   b4ad8:	4620      	mov	r0, r4
   b4ada:	f003 fbd9 	bl	b8290 <_ZN10JsonWriter12insertStringEPKcb>
		insertValue(key);
		insertChar(':');
   b4ade:	4620      	mov	r0, r4
   b4ae0:	213a      	movs	r1, #58	; 0x3a
   b4ae2:	f003 fb89 	bl	b81f8 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   b4ae6:	4904      	ldr	r1, [pc, #16]	; (b4af8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   b4ae8:	462a      	mov	r2, r5
   b4aea:	4620      	mov	r0, r4
		insertValue(value);
	}
   b4aec:	b003      	add	sp, #12
   b4aee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   b4af2:	f003 bbc0 	b.w	b8276 <_ZN10JsonWriter13insertsprintfEPKcz>
   b4af6:	bf00      	nop
   b4af8:	000c0eb6 	.word	0x000c0eb6

000b4afc <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b4afc:	b513      	push	{r0, r1, r4, lr}
        val_(val) {
   b4afe:	4b11      	ldr	r3, [pc, #68]	; (b4b44 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x48>)
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b4b00:	4c11      	ldr	r4, [pc, #68]	; (b4b48 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x4c>)
   b4b02:	2201      	movs	r2, #1
   b4b04:	701a      	strb	r2, [r3, #0]
   b4b06:	2332      	movs	r3, #50	; 0x32
   b4b08:	9300      	str	r3, [sp, #0]
   b4b0a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b4b0e:	f204 432c 	addw	r3, r4, #1068	; 0x42c
   b4b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4b16:	4620      	mov	r0, r4
   b4b18:	f003 f9b6 	bl	b7e88 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b4b1c:	4b0b      	ldr	r3, [pc, #44]	; (b4b4c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x50>)
   b4b1e:	6023      	str	r3, [r4, #0]
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b4b20:	4a0b      	ldr	r2, [pc, #44]	; (b4b50 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x54>)
   b4b22:	4c0c      	ldr	r4, [pc, #48]	; (b4b54 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x58>)
   b4b24:	490c      	ldr	r1, [pc, #48]	; (b4b58 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x5c>)
   b4b26:	4b0d      	ldr	r3, [pc, #52]	; (b4b5c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x60>)
   b4b28:	7812      	ldrb	r2, [r2, #0]
   b4b2a:	7809      	ldrb	r1, [r1, #0]
   b4b2c:	4620      	mov	r0, r4
   b4b2e:	f006 fa11 	bl	baf54 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4b32:	480b      	ldr	r0, [pc, #44]	; (b4b60 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x64>)
   b4b34:	2200      	movs	r2, #0
   b4b36:	4621      	mov	r1, r4
}
   b4b38:	b002      	add	sp, #8
   b4b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4b3e:	f005 bd09 	b.w	ba554 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b4b42:	bf00      	nop
   b4b44:	2003d7e1 	.word	0x2003d7e1
   b4b48:	2003d99c 	.word	0x2003d99c
   b4b4c:	000c1098 	.word	0x000c1098
   b4b50:	000c14c2 	.word	0x000c14c2
   b4b54:	2003d86c 	.word	0x2003d86c
   b4b58:	000c14c0 	.word	0x000c14c0
   b4b5c:	2003e45c 	.word	0x2003e45c
   b4b60:	2003e0e8 	.word	0x2003e0e8

000b4b64 <_ZN14LoRA_Functions14findNodeNumberEPKc>:
uint8_t LoRA_Functions::findNodeNumber(const char* deviceID) {
   b4b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4b68:	b096      	sub	sp, #88	; 0x58
   b4b6a:	460e      	mov	r6, r1
	String nodeDeviceID;
   b4b6c:	a802      	add	r0, sp, #8
   b4b6e:	494d      	ldr	r1, [pc, #308]	; (b4ca4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x140>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4b70:	f8df 8134 	ldr.w	r8, [pc, #308]	; b4ca8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b4b74:	f8df a148 	ldr.w	sl, [pc, #328]	; b4cc0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x15c>
	String nodeDeviceID;
   b4b78:	f00a f901 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4b7c:	484a      	ldr	r0, [pc, #296]	; (b4ca8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>)
   b4b7e:	f003 f99e 	bl	b7ebe <_ZNK10JsonParser14getOuterObjectEv>
   b4b82:	4a4a      	ldr	r2, [pc, #296]	; (b4cac <_ZN14LoRA_Functions14findNodeNumberEPKc+0x148>)
   b4b84:	4601      	mov	r1, r0
   b4b86:	ab01      	add	r3, sp, #4
   b4b88:	4847      	ldr	r0, [pc, #284]	; (b4ca8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>)
   b4b8a:	f003 faef 	bl	b816c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4b8e:	2500      	movs	r5, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4b90:	9901      	ldr	r1, [sp, #4]
   b4b92:	462a      	mov	r2, r5
   b4b94:	4640      	mov	r0, r8
   b4b96:	f003 f9b4 	bl	b7f02 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
   b4b9a:	1c6c      	adds	r4, r5, #1
		if(nodeObjectContainer == NULL) {
   b4b9c:	4607      	mov	r7, r0
   b4b9e:	46a1      	mov	r9, r4
   b4ba0:	2800      	cmp	r0, #0
   b4ba2:	d15f      	bne.n	b4c64 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x100>
			Log.info("findNodeNumber ran out of entries at i = %d",i);
   b4ba4:	4942      	ldr	r1, [pc, #264]	; (b4cb0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x14c>)
   b4ba6:	4843      	ldr	r0, [pc, #268]	; (b4cb4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x150>)
   b4ba8:	462a      	mov	r2, r5
   b4baa:	f7ff fac8 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   b4bae:	493e      	ldr	r1, [pc, #248]	; (b4ca8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>)
   b4bb0:	a806      	add	r0, sp, #24
   b4bb2:	f003 fc23 	bl	b83fc <_ZN12JsonModifierC1ER10JsonParser>
	Log.info("New node will be assigned number %d, deviceID of %s and type of 3",index, deviceID);
   b4bb6:	4633      	mov	r3, r6
   b4bb8:	4622      	mov	r2, r4
   b4bba:	493f      	ldr	r1, [pc, #252]	; (b4cb8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x154>)
   b4bbc:	483d      	ldr	r0, [pc, #244]	; (b4cb4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x150>)
   b4bbe:	f7ff fabe 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	mod.startAppend(jp.getOuterArray());
   b4bc2:	4839      	ldr	r0, [pc, #228]	; (b4ca8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>)
   b4bc4:	f003 f970 	bl	b7ea8 <_ZNK10JsonParser13getOuterArrayEv>
   b4bc8:	4601      	mov	r1, r0
   b4bca:	a806      	add	r0, sp, #24
   b4bcc:	f003 fc28 	bl	b8420 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
	bool startObject() { return startObjectOrArray('{', '}'); };
   b4bd0:	227d      	movs	r2, #125	; 0x7d
   b4bd2:	217b      	movs	r1, #123	; 0x7b
   b4bd4:	a806      	add	r0, sp, #24
   b4bd6:	f003 fbf8 	bl	b83ca <_ZN10JsonWriter18startObjectOrArrayEcc>
		mod.insertKeyValue("node", (int)index);
   b4bda:	4622      	mov	r2, r4
   b4bdc:	4937      	ldr	r1, [pc, #220]	; (b4cbc <_ZN14LoRA_Functions14findNodeNumberEPKc+0x158>)
   b4bde:	a806      	add	r0, sp, #24
   b4be0:	f7ff ff72 	bl	b4ac8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   b4be4:	a806      	add	r0, sp, #24
   b4be6:	f003 fbe5 	bl	b83b4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4bea:	2201      	movs	r2, #1
   b4bec:	a806      	add	r0, sp, #24
   b4bee:	4934      	ldr	r1, [pc, #208]	; (b4cc0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x15c>)
   b4bf0:	f003 fb4e 	bl	b8290 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4bf4:	a806      	add	r0, sp, #24
   b4bf6:	213a      	movs	r1, #58	; 0x3a
   b4bf8:	f003 fafe 	bl	b81f8 <_ZN10JsonWriter10insertCharEc>
	void insertValue(const char *value) { insertString(value, true); }
   b4bfc:	4631      	mov	r1, r6
   b4bfe:	2201      	movs	r2, #1
   b4c00:	a806      	add	r0, sp, #24
   b4c02:	f003 fb45 	bl	b8290 <_ZN10JsonWriter12insertStringEPKcb>
		mod.insertKeyValue("last", Time.now());
   b4c06:	f00a fc22 	bl	bf44e <_ZN9TimeClass3nowEv>
   b4c0a:	4605      	mov	r5, r0
		insertCheckSeparator();
   b4c0c:	a806      	add	r0, sp, #24
   b4c0e:	f003 fbd1 	bl	b83b4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4c12:	2201      	movs	r2, #1
   b4c14:	a806      	add	r0, sp, #24
   b4c16:	492b      	ldr	r1, [pc, #172]	; (b4cc4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x160>)
   b4c18:	f003 fb3a 	bl	b8290 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4c1c:	a806      	add	r0, sp, #24
   b4c1e:	213a      	movs	r1, #58	; 0x3a
   b4c20:	f003 faea 	bl	b81f8 <_ZN10JsonWriter10insertCharEc>
	void insertValue(long value) { insertsprintf("%ld", value); }
   b4c24:	462a      	mov	r2, r5
   b4c26:	a806      	add	r0, sp, #24
   b4c28:	4927      	ldr	r1, [pc, #156]	; (b4cc8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x164>)
   b4c2a:	f003 fb24 	bl	b8276 <_ZN10JsonWriter13insertsprintfEPKcz>
		mod.insertKeyValue("type", (int)3);
   b4c2e:	2203      	movs	r2, #3
   b4c30:	4926      	ldr	r1, [pc, #152]	; (b4ccc <_ZN14LoRA_Functions14findNodeNumberEPKc+0x168>)
   b4c32:	a806      	add	r0, sp, #24
   b4c34:	f7ff ff48 	bl	b4ac8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.finishObjectOrArray();
   b4c38:	a806      	add	r0, sp, #24
   b4c3a:	f003 faeb 	bl	b8214 <_ZN10JsonWriter19finishObjectOrArrayEv>
	mod.finish();
   b4c3e:	a806      	add	r0, sp, #24
   b4c40:	f003 fe49 	bl	b88d6 <_ZN12JsonModifier6finishEv>
	nodeID.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4c44:	f001 f946 	bl	b5ed4 <_ZN10nodeIDData8instanceEv>
   b4c48:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b4c4c:	f001 f97a 	bl	b5f44 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	Log.info("Returning index %d",index);
   b4c50:	4622      	mov	r2, r4
   b4c52:	491f      	ldr	r1, [pc, #124]	; (b4cd0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x16c>)
   b4c54:	4817      	ldr	r0, [pc, #92]	; (b4cb4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x150>)
   b4c56:	f7ff fa72 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   b4c5a:	a806      	add	r0, sp, #24
	return index;
   b4c5c:	b2e4      	uxtb	r4, r4
	JsonModifier mod(jp);
   b4c5e:	f003 f8a7 	bl	b7db0 <_ZN12JsonModifierD1Ev>
   b4c62:	e012      	b.n	b4c8a <_ZN14LoRA_Functions14findNodeNumberEPKc+0x126>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b4c64:	4601      	mov	r1, r0
   b4c66:	ab02      	add	r3, sp, #8
   b4c68:	4640      	mov	r0, r8
   b4c6a:	4652      	mov	r2, sl
   b4c6c:	f7ff fa59 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4c70:	4631      	mov	r1, r6
   b4c72:	a802      	add	r0, sp, #8
   b4c74:	f00a f949 	bl	bef0a <_ZNK6String6equalsEPKc>
		if (nodeDeviceID == deviceID) {
   b4c78:	b170      	cbz	r0, b4c98 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x134>
			jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);		// A match!
   b4c7a:	4a10      	ldr	r2, [pc, #64]	; (b4cbc <_ZN14LoRA_Functions14findNodeNumberEPKc+0x158>)
   b4c7c:	480a      	ldr	r0, [pc, #40]	; (b4ca8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>)
   b4c7e:	466b      	mov	r3, sp
   b4c80:	4639      	mov	r1, r7
   b4c82:	f7ff fa40 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
			return nodeNumber;												// All is good - return node number for the deviceID passed to the function
   b4c86:	f89d 4000 	ldrb.w	r4, [sp]
	String nodeDeviceID;
   b4c8a:	a802      	add	r0, sp, #8
   b4c8c:	f00a f82c 	bl	bece8 <_ZN6StringD1Ev>
}
   b4c90:	4620      	mov	r0, r4
   b4c92:	b016      	add	sp, #88	; 0x58
   b4c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;															// This will be the node number for the next node if no match is found
   b4c98:	1cac      	adds	r4, r5, #2
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4c9a:	464d      	mov	r5, r9
   b4c9c:	2d0a      	cmp	r5, #10
   b4c9e:	f47f af77 	bne.w	b4b90 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x2c>
   b4ca2:	e784      	b.n	b4bae <_ZN14LoRA_Functions14findNodeNumberEPKc+0x4a>
   b4ca4:	000c2399 	.word	0x000c2399
   b4ca8:	2003d99c 	.word	0x2003d99c
   b4cac:	000c0b7a 	.word	0x000c0b7a
   b4cb0:	000c0e8d 	.word	0x000c0e8d
   b4cb4:	2003e658 	.word	0x2003e658
   b4cb8:	000c0eb9 	.word	0x000c0eb9
   b4cbc:	000c0b89 	.word	0x000c0b89
   b4cc0:	000c0b85 	.word	0x000c0b85
   b4cc4:	000c0c36 	.word	0x000c0c36
   b4cc8:	000c1b94 	.word	0x000c1b94
   b4ccc:	000c0e88 	.word	0x000c0e88
   b4cd0:	000c0efb 	.word	0x000c0efb

000b4cd4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>:
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	lora_state = JOIN_ACK;			// Prepare to respond
   b4cd6:	4b33      	ldr	r3, [pc, #204]	; (b4da4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xd0>)
   b4cd8:	2202      	movs	r2, #2
   b4cda:	701a      	strb	r2, [r3, #0]
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4cdc:	b091      	sub	sp, #68	; 0x44
		nodeDeviceID[i] = buf[i+2];
   b4cde:	4b32      	ldr	r3, [pc, #200]	; (b4da8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xd4>)
   b4ce0:	ac09      	add	r4, sp, #36	; 0x24
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4ce2:	4605      	mov	r5, r0
		nodeDeviceID[i] = buf[i+2];
   b4ce4:	f103 0218 	add.w	r2, r3, #24
   b4ce8:	4627      	mov	r7, r4
   b4cea:	6818      	ldr	r0, [r3, #0]
   b4cec:	6859      	ldr	r1, [r3, #4]
   b4cee:	4626      	mov	r6, r4
   b4cf0:	c603      	stmia	r6!, {r0, r1}
   b4cf2:	3308      	adds	r3, #8
   b4cf4:	4293      	cmp	r3, r2
   b4cf6:	4634      	mov	r4, r6
   b4cf8:	d1f7      	bne.n	b4cea <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x16>
   b4cfa:	781b      	ldrb	r3, [r3, #0]
   b4cfc:	7033      	strb	r3, [r6, #0]
	current.set_tempNodeNumber(current.get_nodeNumber());			// Store the old node number for the ack - also differentiates between unconfigured node and time set
   b4cfe:	f001 f86b 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4d02:	4604      	mov	r4, r0
   b4d04:	f001 f868 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4d08:	f001 f952 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d0c:	4601      	mov	r1, r0
   b4d0e:	4620      	mov	r0, r4
   b4d10:	f001 f9b8 	bl	b6084 <_ZN17currentStatusData18set_tempNodeNumberEh>
	if (current.get_nodeNumber() > 10) {							// An unconfigured node
   b4d14:	f001 f860 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4d18:	f001 f94a 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d1c:	280a      	cmp	r0, #10
   b4d1e:	d91d      	bls.n	b4d5c <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x88>
		current.set_nodeNumber(findNodeNumber(nodeDeviceID));		// Look up the new node number
   b4d20:	f001 f85a 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4d24:	4639      	mov	r1, r7
   b4d26:	4604      	mov	r4, r0
   b4d28:	4628      	mov	r0, r5
   b4d2a:	f7ff ff1b 	bl	b4b64 <_ZN14LoRA_Functions14findNodeNumberEPKc>
   b4d2e:	4601      	mov	r1, r0
   b4d30:	4620      	mov	r0, r4
   b4d32:	f001 f9a1 	bl	b6078 <_ZN17currentStatusData14set_nodeNumberEh>
		Log.info("Join request from Unconfigured node %s will change node number from %d to %d",  nodeDeviceID, current.get_tempNodeNumber(), current.get_nodeNumber());
   b4d36:	f001 f84f 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4d3a:	f001 f93e 	bl	b5fba <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4d3e:	9003      	str	r0, [sp, #12]
   b4d40:	f001 f84a 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4d44:	f001 f934 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d48:	9b03      	ldr	r3, [sp, #12]
   b4d4a:	9000      	str	r0, [sp, #0]
   b4d4c:	4917      	ldr	r1, [pc, #92]	; (b4dac <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xd8>)
   b4d4e:	4818      	ldr	r0, [pc, #96]	; (b4db0 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xdc>)
   b4d50:	463a      	mov	r2, r7
   b4d52:	f7ff f9f4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b4d56:	2001      	movs	r0, #1
   b4d58:	b011      	add	sp, #68	; 0x44
   b4d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf[27] = getType(current.get_nodeNumber());
   b4d5c:	f001 f83c 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4d60:	f001 f926 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d64:	4601      	mov	r1, r0
   b4d66:	4628      	mov	r0, r5
   b4d68:	f7ff fb92 	bl	b4490 <_ZN14LoRA_Functions7getTypeEi>
   b4d6c:	4c11      	ldr	r4, [pc, #68]	; (b4db4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xe0>)
   b4d6e:	76e0      	strb	r0, [r4, #27]
		Log.info("Join request from %s with node %d - setting clock and setting sensorType to %d", LoRA_Functions::instance().findDeviceID(1).c_str(), current.get_nodeNumber(), buf[27]);
   b4d70:	f7ff f9fe 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4d74:	2201      	movs	r2, #1
   b4d76:	4601      	mov	r1, r0
   b4d78:	a805      	add	r0, sp, #20
   b4d7a:	f7ff fb2d 	bl	b43d8 <_ZN14LoRA_Functions12findDeviceIDEh>
	const char * c_str() const { return buffer; }
   b4d7e:	9a05      	ldr	r2, [sp, #20]
   b4d80:	9203      	str	r2, [sp, #12]
   b4d82:	f001 f829 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4d86:	f001 f913 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d8a:	7ee1      	ldrb	r1, [r4, #27]
   b4d8c:	9100      	str	r1, [sp, #0]
   b4d8e:	4603      	mov	r3, r0
   b4d90:	9a03      	ldr	r2, [sp, #12]
   b4d92:	4909      	ldr	r1, [pc, #36]	; (b4db8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xe4>)
   b4d94:	4806      	ldr	r0, [pc, #24]	; (b4db0 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xdc>)
   b4d96:	f7ff f9d2 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4d9a:	a805      	add	r0, sp, #20
   b4d9c:	f009 ffa4 	bl	bece8 <_ZN6StringD1Ev>
   b4da0:	e7d9      	b.n	b4d56 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x82>
   b4da2:	bf00      	nop
   b4da4:	2003d7e0 	.word	0x2003d7e0
   b4da8:	2003d7f2 	.word	0x2003d7f2
   b4dac:	000c0f0e 	.word	0x000c0f0e
   b4db0:	2003e658 	.word	0x2003e658
   b4db4:	2003d7f0 	.word	0x2003d7f0
   b4db8:	000c0f5b 	.word	0x000c0f5b

000b4dbc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>:
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b4dbc:	b570      	push	{r4, r5, r6, lr}
   b4dbe:	b088      	sub	sp, #32
	uint8_t len = sizeof(buf);
   b4dc0:	2379      	movs	r3, #121	; 0x79
   b4dc2:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b4dc6:	f10d 031f 	add.w	r3, sp, #31
   b4dca:	9303      	str	r3, [sp, #12]
   b4dcc:	f10d 031e 	add.w	r3, sp, #30
   b4dd0:	4e44      	ldr	r6, [pc, #272]	; (b4ee4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x128>)
   b4dd2:	9302      	str	r3, [sp, #8]
   b4dd4:	f10d 031d 	add.w	r3, sp, #29
   b4dd8:	9301      	str	r3, [sp, #4]
   b4dda:	ab07      	add	r3, sp, #28
   b4ddc:	9300      	str	r3, [sp, #0]
   b4dde:	4842      	ldr	r0, [pc, #264]	; (b4ee8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x12c>)
   b4de0:	f10d 031b 	add.w	r3, sp, #27
   b4de4:	f10d 021a 	add.w	r2, sp, #26
   b4de8:	4631      	mov	r1, r6
   b4dea:	f005 fbf1 	bl	ba5d0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b4dee:	b910      	cbnz	r0, b4df6 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x3a>
	return false;
   b4df0:	2000      	movs	r0, #0
}
   b4df2:	b008      	add	sp, #32
   b4df4:	bd70      	pop	{r4, r5, r6, pc}
		buf[len] = 0;
   b4df6:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b4dfa:	2400      	movs	r4, #0
   b4dfc:	54f4      	strb	r4, [r6, r3]
		if (!((buf[0] << 8 | buf[1]) == sysStatus.get_magicNumber())) {
   b4dfe:	8835      	ldrh	r5, [r6, #0]
   b4e00:	f000 ff9a 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b4e04:	f001 f97a 	bl	b60fc <_ZNK13sysStatusData15get_magicNumberEv>
   b4e08:	ba6d      	rev16	r5, r5
   b4e0a:	b2ad      	uxth	r5, r5
   b4e0c:	42a8      	cmp	r0, r5
   b4e0e:	d00e      	beq.n	b4e2e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x72>
			Log.info("Message magic number of %d did not match the Magic Number in memory %d - Ignoring", (buf[0] << 8 | buf[1]), sysStatus.get_magicNumber());
   b4e10:	8832      	ldrh	r2, [r6, #0]
   b4e12:	ba52      	rev16	r2, r2
   b4e14:	b292      	uxth	r2, r2
   b4e16:	9205      	str	r2, [sp, #20]
   b4e18:	f000 ff8e 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b4e1c:	f001 f96e 	bl	b60fc <_ZNK13sysStatusData15get_magicNumberEv>
   b4e20:	9a05      	ldr	r2, [sp, #20]
   b4e22:	4932      	ldr	r1, [pc, #200]	; (b4eec <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x130>)
   b4e24:	4603      	mov	r3, r0
   b4e26:	4832      	ldr	r0, [pc, #200]	; (b4ef0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x134>)
   b4e28:	f7ff f989 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
			return false;
   b4e2c:	e7e0      	b.n	b4df0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
			current.set_nodeNumber(from);
   b4e2e:	f000 ffd3 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4e32:	f89d 101b 	ldrb.w	r1, [sp, #27]
			lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b4e36:	4c2f      	ldr	r4, [pc, #188]	; (b4ef4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x138>)
			current.set_nodeNumber(from);
   b4e38:	f001 f91e 	bl	b6078 <_ZN17currentStatusData14set_nodeNumberEh>
			lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b4e3c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b4e40:	f003 030f 	and.w	r3, r3, #15
   b4e44:	7023      	strb	r3, [r4, #0]
			Log.info("From node %d with rssi=%d - a %s message of length %d in %d hops", current.get_nodeNumber(), driver.lastRssi(), loraStateNames[lora_state], len, hops);
   b4e46:	f000 ffc7 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b4e4a:	f001 f8b1 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e4e:	9005      	str	r0, [sp, #20]
   b4e50:	4829      	ldr	r0, [pc, #164]	; (b4ef8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x13c>)
   b4e52:	f005 f96e 	bl	ba132 <_ZN15RHGenericDriver8lastRssiEv>
   b4e56:	f89d 101f 	ldrb.w	r1, [sp, #31]
   b4e5a:	9102      	str	r1, [sp, #8]
   b4e5c:	f89d 101a 	ldrb.w	r1, [sp, #26]
   b4e60:	9101      	str	r1, [sp, #4]
   b4e62:	4603      	mov	r3, r0
   b4e64:	4925      	ldr	r1, [pc, #148]	; (b4efc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x140>)
   b4e66:	7820      	ldrb	r0, [r4, #0]
   b4e68:	9a05      	ldr	r2, [sp, #20]
   b4e6a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b4e6e:	9100      	str	r1, [sp, #0]
   b4e70:	481f      	ldr	r0, [pc, #124]	; (b4ef0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x134>)
   b4e72:	4923      	ldr	r1, [pc, #140]	; (b4f00 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x144>)
   b4e74:	f7ff f963 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_RPT) { if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b4e78:	7823      	ldrb	r3, [r4, #0]
   b4e7a:	2b03      	cmp	r3, #3
   b4e7c:	d10d      	bne.n	b4e9a <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xde>
   b4e7e:	f7ff f977 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4e82:	f7ff f99d 	bl	b41c0 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>
		else if (lora_state == ALERT_RPT) { if(!LoRA_Functions::instance().decipherAlertReportGateway()) return false;}
   b4e86:	2800      	cmp	r0, #0
   b4e88:	d0b2      	beq.n	b4df0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (frequencyUpdated) {              							// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b4e8a:	4b1e      	ldr	r3, [pc, #120]	; (b4f04 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x148>)
   b4e8c:	781a      	ldrb	r2, [r3, #0]
   b4e8e:	b992      	cbnz	r2, b4eb6 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xfa>
		else Log.info("Reporting frequency unchanged");
   b4e90:	491d      	ldr	r1, [pc, #116]	; (b4f08 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x14c>)
   b4e92:	4817      	ldr	r0, [pc, #92]	; (b4ef0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x134>)
   b4e94:	f7ff f953 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4e98:	e01e      	b.n	b4ed8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x11c>
		else if (lora_state == JOIN_REQ) { if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b4e9a:	2b01      	cmp	r3, #1
   b4e9c:	d104      	bne.n	b4ea8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xec>
   b4e9e:	f7ff f967 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4ea2:	f7ff ff17 	bl	b4cd4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>
   b4ea6:	e7ee      	b.n	b4e86 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xca>
		else if (lora_state == ALERT_RPT) { if(!LoRA_Functions::instance().decipherAlertReportGateway()) return false;}
   b4ea8:	2b05      	cmp	r3, #5
   b4eaa:	d1ee      	bne.n	b4e8a <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xce>
   b4eac:	f7ff f960 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4eb0:	f7ff f9e6 	bl	b4280 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>
   b4eb4:	e7e7      	b.n	b4e86 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xca>
			frequencyUpdated = false;
   b4eb6:	2200      	movs	r2, #0
   b4eb8:	701a      	strb	r2, [r3, #0]
			sysStatus.set_frequencyMinutes(updatedFrequencyMins);		// This was the temporary value from the particle function
   b4eba:	f000 ff3d 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b4ebe:	4b13      	ldr	r3, [pc, #76]	; (b4f0c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x150>)
   b4ec0:	8819      	ldrh	r1, [r3, #0]
   b4ec2:	f001 f95d 	bl	b6180 <_ZN13sysStatusData20set_frequencyMinutesEt>
			Log.info("We are updating the publish frequency to %i minutes", sysStatus.get_frequencyMinutes());
   b4ec6:	f000 ff37 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b4eca:	f001 f91c 	bl	b6106 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4ece:	4910      	ldr	r1, [pc, #64]	; (b4f10 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x154>)
   b4ed0:	4602      	mov	r2, r0
   b4ed2:	4807      	ldr	r0, [pc, #28]	; (b4ef0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x134>)
   b4ed4:	f7ff f933 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (LoRA_Functions::instance().respondToLoRAMessageGateway()) return true;
   b4ed8:	f7ff f94a 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4edc:	f7ff fdc4 	bl	b4a68 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>
   b4ee0:	e787      	b.n	b4df2 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x36>
   b4ee2:	bf00      	nop
   b4ee4:	2003d7f0 	.word	0x2003d7f0
   b4ee8:	2003e0e8 	.word	0x2003e0e8
   b4eec:	000c0faa 	.word	0x000c0faa
   b4ef0:	2003e658 	.word	0x2003e658
   b4ef4:	2003d7e0 	.word	0x2003d7e0
   b4ef8:	2003d86c 	.word	0x2003d86c
   b4efc:	2003d5dc 	.word	0x2003d5dc
   b4f00:	000c0ffc 	.word	0x000c0ffc
   b4f04:	2003e409 	.word	0x2003e409
   b4f08:	000c1071 	.word	0x000c1071
   b4f0c:	2003d6f8 	.word	0x2003d6f8
   b4f10:	000c103d 	.word	0x000c103d

000b4f14 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b4f14:	4b01      	ldr	r3, [pc, #4]	; (b4f1c <_Z18outOfMemoryHandleryi+0x8>)
   b4f16:	601a      	str	r2, [r3, #0]
}
   b4f18:	4770      	bx	lr
   b4f1a:	bf00      	nop
   b4f1c:	2003d654 	.word	0x2003d654

000b4f20 <_Z13userSwitchISRv>:

void userSwitchISR() {
	userSwitchDectected = true;
   b4f20:	4b01      	ldr	r3, [pc, #4]	; (b4f28 <_Z13userSwitchISRv+0x8>)
   b4f22:	2201      	movs	r2, #1
   b4f24:	701a      	strb	r2, [r3, #0]
}
   b4f26:	4770      	bx	lr
   b4f28:	2003e3dc 	.word	0x2003e3dc

000b4f2c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b4f2c:	b530      	push	{r4, r5, lr}
   b4f2e:	b085      	sub	sp, #20
   b4f30:	4604      	mov	r4, r0
   b4f32:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b4f34:	b160      	cbz	r0, b4f50 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b4f36:	6840      	ldr	r0, [r0, #4]
   b4f38:	b150      	cbz	r0, b4f50 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b4f3a:	6885      	ldr	r5, [r0, #8]
   b4f3c:	b145      	cbz	r5, b4f50 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b4f3e:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b4f42:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4f46:	68c4      	ldr	r4, [r0, #12]
   b4f48:	ab01      	add	r3, sp, #4
   b4f4a:	466a      	mov	r2, sp
   b4f4c:	a902      	add	r1, sp, #8
   b4f4e:	47a0      	blx	r4
    }
   b4f50:	b005      	add	sp, #20
   b4f52:	bd30      	pop	{r4, r5, pc}

000b4f54 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4f54:	b530      	push	{r4, r5, lr}
   b4f56:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b4f58:	6800      	ldr	r0, [r0, #0]
   b4f5a:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b4f5c:	9301      	str	r3, [sp, #4]
   b4f5e:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b4f62:	6883      	ldr	r3, [r0, #8]
   b4f64:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b4f68:	b90b      	cbnz	r3, b4f6e <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b4f6a:	f00a fd8b 	bl	bfa84 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4f6e:	68c3      	ldr	r3, [r0, #12]
   b4f70:	aa01      	add	r2, sp, #4
   b4f72:	a902      	add	r1, sp, #8
   b4f74:	4798      	blx	r3
      }
   b4f76:	b005      	add	sp, #20
   b4f78:	bd30      	pop	{r4, r5, pc}

000b4f7a <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4f7a:	2a01      	cmp	r2, #1
   b4f7c:	d102      	bne.n	b4f84 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4f7e:	6001      	str	r1, [r0, #0]
      }
   b4f80:	2000      	movs	r0, #0
   b4f82:	4770      	bx	lr
	  switch (__op)
   b4f84:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4f86:	bf04      	itt	eq
   b4f88:	680b      	ldreq	r3, [r1, #0]
   b4f8a:	6003      	streq	r3, [r0, #0]
	      break;
   b4f8c:	e7f8      	b.n	b4f80 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4f8e <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4f8e:	6803      	ldr	r3, [r0, #0]
   b4f90:	6812      	ldr	r2, [r2, #0]
   b4f92:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4f96:	4718      	bx	r3

000b4f98 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b4f98:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4f9a:	2000      	movs	r0, #0
   b4f9c:	f007 faa6 	bl	bc4ec <spark_sync_time_pending>
   b4fa0:	b128      	cbz	r0, b4fae <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4fa2:	f007 fa83 	bl	bc4ac <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4fa6:	f080 0001 	eor.w	r0, r0, #1
   b4faa:	b2c0      	uxtb	r0, r0
    }
   b4fac:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4fae:	2001      	movs	r0, #1
   b4fb0:	e7fc      	b.n	b4fac <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b4fb2 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4fb2:	b510      	push	{r4, lr}
      if (_M_manager)
   b4fb4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4fb6:	4604      	mov	r4, r0
      if (_M_manager)
   b4fb8:	b113      	cbz	r3, b4fc0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4fba:	2203      	movs	r2, #3
   b4fbc:	4601      	mov	r1, r0
   b4fbe:	4798      	blx	r3
    }
   b4fc0:	4620      	mov	r0, r4
   b4fc2:	bd10      	pop	{r4, pc}

000b4fc4 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b4fc4:	b510      	push	{r4, lr}
            delete callableWrapper;
   b4fc6:	4604      	mov	r4, r0
   b4fc8:	b138      	cbz	r0, b4fda <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b4fca:	f7ff fff2 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
   b4fce:	4620      	mov	r0, r4
   b4fd0:	2110      	movs	r1, #16
        };
   b4fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b4fd6:	f7ff b862 	b.w	b409e <_ZdlPvj>
        };
   b4fda:	bd10      	pop	{r4, pc}

000b4fdc <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 10 if the device is in test mode or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {											// Time till next scheduled event
   b4fdc:	b538      	push	{r3, r4, r5, lr}
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop

	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b4fde:	f000 feab 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b4fe2:	f001 f890 	bl	b6106 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4fe6:	4604      	mov	r4, r0
   	if (Time.isValid() && !testModeFlag) {
   b4fe8:	f00a fa14 	bl	bf414 <_ZN9TimeClass7isValidEv>
   b4fec:	b1f0      	cbz	r0, b502c <_Z21secondsUntilNextEventv+0x50>
   b4fee:	4b10      	ldr	r3, [pc, #64]	; (b5030 <_Z21secondsUntilNextEventv+0x54>)
   b4ff0:	781b      	ldrb	r3, [r3, #0]
   b4ff2:	b9db      	cbnz	r3, b502c <_Z21secondsUntilNextEventv+0x50>
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b4ff4:	f00a fa2b 	bl	bf44e <_ZN9TimeClass3nowEv>
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b4ff8:	253c      	movs	r5, #60	; 0x3c
   b4ffa:	4365      	muls	r5, r4
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b4ffc:	fbb0 f4f5 	udiv	r4, r0, r5
   b5000:	fb04 0015 	mls	r0, r4, r5, r0
   b5004:	1a2c      	subs	r4, r5, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b5006:	2c09      	cmp	r4, #9
   b5008:	d90e      	bls.n	b5028 <_Z21secondsUntilNextEventv+0x4c>
   b500a:	42ac      	cmp	r4, r5
   b500c:	bf28      	it	cs
   b500e:	462c      	movcs	r4, r5
        Log.info("Report frequency %d mins, next event in %lu seconds", sysStatus.get_frequencyMinutes(), secondsToReturn);
   b5010:	f000 fe92 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b5014:	f001 f877 	bl	b6106 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5018:	4906      	ldr	r1, [pc, #24]	; (b5034 <_Z21secondsUntilNextEventv+0x58>)
   b501a:	4602      	mov	r2, r0
   b501c:	4623      	mov	r3, r4
   b501e:	4806      	ldr	r0, [pc, #24]	; (b5038 <_Z21secondsUntilNextEventv+0x5c>)
   b5020:	f7ff f88d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    }
	return secondsToReturn;
}
   b5024:	4620      	mov	r0, r4
   b5026:	bd38      	pop	{r3, r4, r5, pc}
   b5028:	240a      	movs	r4, #10
   b502a:	e7f1      	b.n	b5010 <_Z21secondsUntilNextEventv+0x34>
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop
   b502c:	240a      	movs	r4, #10
   b502e:	e7f9      	b.n	b5024 <_Z21secondsUntilNextEventv+0x48>
   b5030:	2003e3db 	.word	0x2003e3db
   b5034:	000c10b0 	.word	0x000c10b0
   b5038:	2003e658 	.word	0x2003e658

000b503c <_Z22publishStateTransitionv>:
{
   b503c:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b503e:	4e1c      	ldr	r6, [pc, #112]	; (b50b0 <_Z22publishStateTransitionv+0x74>)
   b5040:	4c1c      	ldr	r4, [pc, #112]	; (b50b4 <_Z22publishStateTransitionv+0x78>)
   b5042:	7832      	ldrb	r2, [r6, #0]
   b5044:	4d1c      	ldr	r5, [pc, #112]	; (b50b8 <_Z22publishStateTransitionv+0x7c>)
   b5046:	2a02      	cmp	r2, #2
{
   b5048:	b0c4      	sub	sp, #272	; 0x110
	if (state == IDLE_STATE) {
   b504a:	d128      	bne.n	b509e <_Z22publishStateTransitionv+0x62>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b504c:	f00a f9e2 	bl	bf414 <_ZN9TimeClass7isValidEv>
   b5050:	7832      	ldrb	r2, [r6, #0]
   b5052:	782b      	ldrb	r3, [r5, #0]
   b5054:	b958      	cbnz	r0, b506e <_Z22publishStateTransitionv+0x32>
   b5056:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b505a:	9200      	str	r2, [sp, #0]
   b505c:	4a17      	ldr	r2, [pc, #92]	; (b50bc <_Z22publishStateTransitionv+0x80>)
   b505e:	eb04 1303 	add.w	r3, r4, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b5062:	f44f 7180 	mov.w	r1, #256	; 0x100
   b5066:	a804      	add	r0, sp, #16
   b5068:	f007 faf0 	bl	bc64c <snprintf>
   b506c:	e00f      	b.n	b508e <_Z22publishStateTransitionv+0x52>
		else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s for %u seconds", stateNames[oldState],stateNames[state],(secondsUntilNextEvent()));	
   b506e:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b5072:	9303      	str	r3, [sp, #12]
   b5074:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   b5078:	f7ff ffb0 	bl	b4fdc <_Z21secondsUntilNextEventv>
   b507c:	9b03      	ldr	r3, [sp, #12]
   b507e:	4a10      	ldr	r2, [pc, #64]	; (b50c0 <_Z22publishStateTransitionv+0x84>)
   b5080:	e9cd 4000 	strd	r4, r0, [sp]
   b5084:	f44f 7180 	mov.w	r1, #256	; 0x100
   b5088:	a804      	add	r0, sp, #16
   b508a:	f007 fadf 	bl	bc64c <snprintf>
	oldState = state;
   b508e:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b5090:	480c      	ldr	r0, [pc, #48]	; (b50c4 <_Z22publishStateTransitionv+0x88>)
	oldState = state;
   b5092:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b5094:	a904      	add	r1, sp, #16
   b5096:	f7ff f852 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b509a:	b044      	add	sp, #272	; 0x110
   b509c:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b509e:	782b      	ldrb	r3, [r5, #0]
   b50a0:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b50a4:	9200      	str	r2, [sp, #0]
   b50a6:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b50aa:	4a07      	ldr	r2, [pc, #28]	; (b50c8 <_Z22publishStateTransitionv+0x8c>)
   b50ac:	e7d9      	b.n	b5062 <_Z22publishStateTransitionv+0x26>
   b50ae:	bf00      	nop
   b50b0:	2003e3da 	.word	0x2003e3da
   b50b4:	2003d658 	.word	0x2003d658
   b50b8:	2003e3d9 	.word	0x2003e3d9
   b50bc:	000c10e4 	.word	0x000c10e4
   b50c0:	000c1104 	.word	0x000c1104
   b50c4:	2003e658 	.word	0x2003e658
   b50c8:	000c1121 	.word	0x000c1121

000b50cc <_Z14publishWebhookh>:
 * @details Nodes and Gateways will use the same format for this webook - data sources will change
 * 
 * 
 */

void publishWebhook(uint8_t nodeNumber) {
   b50cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b50d0:	ed2d 8b02 	vpush	{d8}
	char data[256];                             						// Store the date in this character array - not global

	if (nodeNumber > 0) {												// Webhook for a node
   b50d4:	4604      	mov	r4, r0
void publishWebhook(uint8_t nodeNumber) {
   b50d6:	b0d3      	sub	sp, #332	; 0x14c
	if (nodeNumber > 0) {												// Webhook for a node
   b50d8:	2800      	cmp	r0, #0
   b50da:	d06c      	beq.n	b51b6 <_Z14publishWebhookh+0xea>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b50dc:	f7ff f848 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b50e0:	4622      	mov	r2, r4
   b50e2:	4601      	mov	r1, r0
   b50e4:	a80e      	add	r0, sp, #56	; 0x38
   b50e6:	f7ff f977 	bl	b43d8 <_ZN14LoRA_Functions12findDeviceIDEh>
   b50ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b50ec:	930d      	str	r3, [sp, #52]	; 0x34
   b50ee:	f000 fe73 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b50f2:	f001 f817 	bl	b6124 <_ZNK17currentStatusData15get_hourlyCountEv>
   b50f6:	4604      	mov	r4, r0
   b50f8:	f000 fe6e 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b50fc:	f001 f817 	bl	b612e <_ZNK17currentStatusData14get_dailyCountEv>
   b5100:	4605      	mov	r5, r0
   b5102:	f000 fe69 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b5106:	f000 ff76 	bl	b5ff6 <_ZNK17currentStatusData14get_sensorTypeEv>
   b510a:	4606      	mov	r6, r0
   b510c:	f000 fe64 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b5110:	f000 fe7e 	bl	b5e10 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5114:	eeb0 8a40 	vmov.f32	s16, s0
   b5118:	eef0 8a60 	vmov.f32	s17, s1
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b511c:	f000 fe5c 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b5120:	f000 ff55 	bl	b5fce <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b5124:	4a4e      	ldr	r2, [pc, #312]	; (b5260 <_Z14publishWebhookh+0x194>)
   b5126:	f852 b020 	ldr.w	fp, [r2, r0, lsl #2]
		current.get_internalTempC(), current.get_resetCount(), current.get_RSSI(), current.get_messageNumber(), Time.now());
   b512a:	f000 fe55 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b512e:	f000 ff49 	bl	b5fc4 <_ZNK17currentStatusData17get_internalTempCEv>
   b5132:	4607      	mov	r7, r0
   b5134:	f000 fe50 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b5138:	f000 ff4e 	bl	b5fd8 <_ZNK17currentStatusData14get_resetCountEv>
   b513c:	4680      	mov	r8, r0
   b513e:	f000 fe4b 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b5142:	f000 ffea 	bl	b611a <_ZNK17currentStatusData8get_RSSIEv>
   b5146:	4681      	mov	r9, r0
   b5148:	f000 fe46 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b514c:	f000 ff49 	bl	b5fe2 <_ZNK17currentStatusData17get_messageNumberEv>
   b5150:	4682      	mov	sl, r0
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b5152:	f00a f97c 	bl	bf44e <_ZN9TimeClass3nowEv>
   b5156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b5158:	4a42      	ldr	r2, [pc, #264]	; (b5264 <_Z14publishWebhookh+0x198>)
   b515a:	9400      	str	r4, [sp, #0]
   b515c:	f44f 7180 	mov.w	r1, #256	; 0x100
   b5160:	e9cd a00a 	strd	sl, r0, [sp, #40]	; 0x28
   b5164:	e9cd 8908 	strd	r8, r9, [sp, #32]
   b5168:	e9cd b706 	strd	fp, r7, [sp, #24]
   b516c:	ed8d 8b04 	vstr	d8, [sp, #16]
   b5170:	e9cd 5601 	strd	r5, r6, [sp, #4]
   b5174:	a812      	add	r0, sp, #72	; 0x48
   b5176:	f007 fa69 	bl	bc64c <snprintf>
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b517a:	a80e      	add	r0, sp, #56	; 0x38
   b517c:	f009 fdb4 	bl	bece8 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Node-v1", data, PRIVATE | WITH_ACK);
   b5180:	f004 fab2 	bl	b96e8 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b5184:	4b38      	ldr	r3, [pc, #224]	; (b5268 <_Z14publishWebhookh+0x19c>)
   b5186:	4a39      	ldr	r2, [pc, #228]	; (b526c <_Z14publishWebhookh+0x1a0>)
   b5188:	781b      	ldrb	r3, [r3, #0]
   b518a:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b518c:	2100      	movs	r1, #0
   b518e:	4313      	orrs	r3, r2
   b5190:	6802      	ldr	r2, [r0, #0]
   b5192:	f88d 1004 	strb.w	r1, [sp, #4]
   b5196:	f88d 3000 	strb.w	r3, [sp]
   b519a:	4935      	ldr	r1, [pc, #212]	; (b5270 <_Z14publishWebhookh+0x1a4>)
   b519c:	6814      	ldr	r4, [r2, #0]
   b519e:	233c      	movs	r3, #60	; 0x3c
   b51a0:	aa12      	add	r2, sp, #72	; 0x48
   b51a2:	47a0      	blx	r4
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_RSSI(), sysStatus.get_messageCount(), Time.now());
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
	}

	Log.info(data);
   b51a4:	4833      	ldr	r0, [pc, #204]	; (b5274 <_Z14publishWebhookh+0x1a8>)
   b51a6:	a912      	add	r1, sp, #72	; 0x48
   b51a8:	f7fe ffc9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>



	return;
}
   b51ac:	b053      	add	sp, #332	; 0x14c
   b51ae:	ecbd 8b02 	vpop	{d8}
   b51b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return spark_deviceID();
   b51b6:	a80e      	add	r0, sp, #56	; 0x38
   b51b8:	f007 f980 	bl	bc4bc <spark_deviceID>
   b51bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b51be:	930d      	str	r3, [sp, #52]	; 0x34
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b51c0:	f000 fdba 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b51c4:	f000 feef 	bl	b5fa6 <_ZNK13sysStatusData14get_sensorTypeEv>
   b51c8:	4605      	mov	r5, r0
   b51ca:	f000 fe05 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b51ce:	f000 fe1f 	bl	b5e10 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b51d2:	eeb0 8a40 	vmov.f32	s16, s0
   b51d6:	eef0 8a60 	vmov.f32	s17, s1
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b51da:	f000 fdfd 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b51de:	f000 fef6 	bl	b5fce <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b51e2:	4a1f      	ldr	r2, [pc, #124]	; (b5260 <_Z14publishWebhookh+0x194>)
   b51e4:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_RSSI(), sysStatus.get_messageCount(), Time.now());
   b51e8:	f000 fdf6 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b51ec:	f000 feea 	bl	b5fc4 <_ZNK17currentStatusData17get_internalTempCEv>
   b51f0:	4606      	mov	r6, r0
   b51f2:	f000 fda1 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b51f6:	f000 fec2 	bl	b5f7e <_ZNK13sysStatusData14get_resetCountEv>
   b51fa:	4607      	mov	r7, r0
   b51fc:	f000 fd9c 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b5200:	f000 ff86 	bl	b6110 <_ZNK13sysStatusData8get_RSSIEv>
   b5204:	4680      	mov	r8, r0
   b5206:	f000 fd97 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b520a:	f000 febd 	bl	b5f88 <_ZNK13sysStatusData16get_messageCountEv>
   b520e:	4681      	mov	r9, r0
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b5210:	f00a f91d 	bl	bf44e <_ZN9TimeClass3nowEv>
   b5214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b5216:	4a13      	ldr	r2, [pc, #76]	; (b5264 <_Z14publishWebhookh+0x198>)
   b5218:	9400      	str	r4, [sp, #0]
   b521a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b521e:	e9cd 900a 	strd	r9, r0, [sp, #40]	; 0x28
   b5222:	e9cd 4501 	strd	r4, r5, [sp, #4]
   b5226:	e9cd 7808 	strd	r7, r8, [sp, #32]
   b522a:	e9cd a606 	strd	sl, r6, [sp, #24]
   b522e:	ed8d 8b04 	vstr	d8, [sp, #16]
   b5232:	a812      	add	r0, sp, #72	; 0x48
   b5234:	f007 fa0a 	bl	bc64c <snprintf>
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5238:	a80e      	add	r0, sp, #56	; 0x38
   b523a:	f009 fd55 	bl	bece8 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
   b523e:	f004 fa53 	bl	b96e8 <_ZN17PublishQueuePosix8instanceEv>
   b5242:	4b09      	ldr	r3, [pc, #36]	; (b5268 <_Z14publishWebhookh+0x19c>)
   b5244:	4a09      	ldr	r2, [pc, #36]	; (b526c <_Z14publishWebhookh+0x1a0>)
   b5246:	781b      	ldrb	r3, [r3, #0]
   b5248:	7812      	ldrb	r2, [r2, #0]
   b524a:	490b      	ldr	r1, [pc, #44]	; (b5278 <_Z14publishWebhookh+0x1ac>)
   b524c:	4313      	orrs	r3, r2
   b524e:	6802      	ldr	r2, [r0, #0]
   b5250:	f88d 3000 	strb.w	r3, [sp]
   b5254:	f88d 4004 	strb.w	r4, [sp, #4]
   b5258:	6814      	ldr	r4, [r2, #0]
   b525a:	233c      	movs	r3, #60	; 0x3c
   b525c:	aa12      	add	r2, sp, #72	; 0x48
   b525e:	e7a0      	b.n	b51a2 <_Z14publishWebhookh+0xd6>
   b5260:	2003d6fc 	.word	0x2003d6fc
   b5264:	000c112f 	.word	0x000c112f
   b5268:	2003e29c 	.word	0x2003e29c
   b526c:	2003e29d 	.word	0x2003e29d
   b5270:	000c11c6 	.word	0x000c11c6
   b5274:	2003e658 	.word	0x2003e658
   b5278:	000c11db 	.word	0x000c11db

000b527c <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b527c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b527e:	2300      	movs	r3, #0
   b5280:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5282:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5284:	4604      	mov	r4, r0
   b5286:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5288:	b12b      	cbz	r3, b5296 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b528a:	2202      	movs	r2, #2
   b528c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b528e:	68eb      	ldr	r3, [r5, #12]
   b5290:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5292:	68ab      	ldr	r3, [r5, #8]
   b5294:	60a3      	str	r3, [r4, #8]
    }
   b5296:	4620      	mov	r0, r4
   b5298:	bd38      	pop	{r3, r4, r5, pc}
	...

000b529c <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b529c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b52a0:	b095      	sub	sp, #84	; 0x54
   b52a2:	4605      	mov	r5, r0
        };
   b52a4:	991c      	ldr	r1, [sp, #112]	; 0x70
   b52a6:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b52a8:	4690      	mov	r8, r2
   b52aa:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b52ac:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b52ae:	f7ff ffe5 	bl	b527c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b52b2:	a904      	add	r1, sp, #16
   b52b4:	a808      	add	r0, sp, #32
   b52b6:	f7ff ffe1 	bl	b527c <_ZNSt8functionIFvyiEEC1ERKS1_>
   b52ba:	a908      	add	r1, sp, #32
   b52bc:	4630      	mov	r0, r6
   b52be:	f7ff ffdd 	bl	b527c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b52c2:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b52c6:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b52c8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b52cc:	f7fe fee3 	bl	b4096 <_Znwj>
   b52d0:	4604      	mov	r4, r0
   b52d2:	b1a0      	cbz	r0, b52fe <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b52d4:	e896 0003 	ldmia.w	r6, {r0, r1}
   b52d8:	ab01      	add	r3, sp, #4
   b52da:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b52de:	e894 0003 	ldmia.w	r4, {r0, r1}
   b52e2:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b52e6:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b52ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b52ec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b52ee:	60a3      	str	r3, [r4, #8]
   b52f0:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b52f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b52f6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b52fa:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b52fc:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b52fe:	4b24      	ldr	r3, [pc, #144]	; (b5390 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b5300:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b5302:	4b24      	ldr	r3, [pc, #144]	; (b5394 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b5304:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b5306:	2200      	movs	r2, #0
   b5308:	2300      	movs	r3, #0
   b530a:	f04f 0900 	mov.w	r9, #0
   b530e:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b5312:	4b21      	ldr	r3, [pc, #132]	; (b5398 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b5314:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b5318:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b531a:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b531c:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b5320:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b5324:	f7fe feb7 	bl	b4096 <_Znwj>
   b5328:	4604      	mov	r4, r0
   b532a:	b1d8      	cbz	r0, b5364 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b532c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b532e:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b5332:	b133      	cbz	r3, b5342 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5334:	2202      	movs	r2, #2
   b5336:	a910      	add	r1, sp, #64	; 0x40
   b5338:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b533a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b533c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b533e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5340:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b5342:	4b16      	ldr	r3, [pc, #88]	; (b539c <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b5344:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b5346:	4a16      	ldr	r2, [pc, #88]	; (b53a0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b5348:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b534a:	ab01      	add	r3, sp, #4
   b534c:	4640      	mov	r0, r8
   b534e:	4639      	mov	r1, r7
   b5350:	f007 f82a 	bl	bc3a8 <system_subscribe_event>
        if (r) {
   b5354:	b1b0      	cbz	r0, b5384 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b5356:	4620      	mov	r0, r4
   b5358:	f7ff fe2b 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b535c:	2110      	movs	r1, #16
   b535e:	4620      	mov	r0, r4
   b5360:	f7fe fe9d 	bl	b409e <_ZdlPvj>
   b5364:	a810      	add	r0, sp, #64	; 0x40
   b5366:	f7ff fe24 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
   b536a:	4630      	mov	r0, r6
   b536c:	f7ff fe21 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
   b5370:	a808      	add	r0, sp, #32
   b5372:	f7ff fe1e 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
   b5376:	a804      	add	r0, sp, #16
   b5378:	f7ff fe1b 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
    }
   b537c:	4628      	mov	r0, r5
   b537e:	b015      	add	sp, #84	; 0x54
   b5380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b5384:	9b02      	ldr	r3, [sp, #8]
   b5386:	60ab      	str	r3, [r5, #8]
   b5388:	e9c5 8700 	strd	r8, r7, [r5]
   b538c:	e7ea      	b.n	b5364 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b538e:	bf00      	nop
   b5390:	000b4f55 	.word	0x000b4f55
   b5394:	000b53a5 	.word	0x000b53a5
   b5398:	000c0002 	.word	0x000c0002
   b539c:	000b4fc5 	.word	0x000b4fc5
   b53a0:	000b4f2d 	.word	0x000b4f2d

000b53a4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b53a4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b53a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b53a8:	4604      	mov	r4, r0
	switch (__op)
   b53aa:	d104      	bne.n	b53b6 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b53ac:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b53ae:	6003      	str	r3, [r0, #0]
      }
   b53b0:	2000      	movs	r0, #0
   b53b2:	b003      	add	sp, #12
   b53b4:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b53b6:	2a02      	cmp	r2, #2
   b53b8:	d00c      	beq.n	b53d4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b53ba:	2a03      	cmp	r2, #3
   b53bc:	d1f8      	bne.n	b53b0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b53be:	6804      	ldr	r4, [r0, #0]
   b53c0:	2c00      	cmp	r4, #0
   b53c2:	d0f5      	beq.n	b53b0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b53c4:	4620      	mov	r0, r4
   b53c6:	f7ff fdf4 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b53ca:	2110      	movs	r1, #16
   b53cc:	4620      	mov	r0, r4
   b53ce:	f7fe fe66 	bl	b409e <_ZdlPvj>
   b53d2:	e7ed      	b.n	b53b0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b53d4:	6809      	ldr	r1, [r1, #0]
   b53d6:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b53d8:	2010      	movs	r0, #16
   b53da:	f7fe fe5c 	bl	b4096 <_Znwj>
   b53de:	4605      	mov	r5, r0
   b53e0:	b110      	cbz	r0, b53e8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b53e2:	9901      	ldr	r1, [sp, #4]
   b53e4:	f7ff ff4a 	bl	b527c <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b53e8:	6025      	str	r5, [r4, #0]
	}
   b53ea:	e7e1      	b.n	b53b0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b53ec <_GLOBAL__sub_I___appProductVersion>:
        val_(val) {
   b53ec:	4b16      	ldr	r3, [pc, #88]	; (b5448 <_GLOBAL__sub_I___appProductVersion+0x5c>)
}
   b53ee:	b510      	push	{r4, lr}
   b53f0:	2401      	movs	r4, #1
   b53f2:	701c      	strb	r4, [r3, #0]
   b53f4:	4b15      	ldr	r3, [pc, #84]	; (b544c <_GLOBAL__sub_I___appProductVersion+0x60>)
   b53f6:	2208      	movs	r2, #8
   b53f8:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b53fa:	f00a f9d1 	bl	bf7a0 <spark_protocol_instance>
   b53fe:	2300      	movs	r3, #0
   b5400:	461a      	mov	r2, r3
   b5402:	4619      	mov	r1, r3
   b5404:	f00a f9dc 	bl	bf7c0 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b5408:	f00a f9ca 	bl	bf7a0 <spark_protocol_instance>
   b540c:	2300      	movs	r3, #0
   b540e:	461a      	mov	r2, r3
   b5410:	210d      	movs	r1, #13
   b5412:	f00a f9cd 	bl	bf7b0 <spark_protocol_set_product_id>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b5416:	4b0e      	ldr	r3, [pc, #56]	; (b5450 <_GLOBAL__sub_I___appProductVersion+0x64>)
   b5418:	1d1a      	adds	r2, r3, #4
   b541a:	601a      	str	r2, [r3, #0]
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   b541c:	4a0d      	ldr	r2, [pc, #52]	; (b5454 <_GLOBAL__sub_I___appProductVersion+0x68>)
   b541e:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b5420:	2200      	movs	r2, #0
   b5422:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b5426:	611a      	str	r2, [r3, #16]
   b5428:	751c      	strb	r4, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b542a:	f00a fa99 	bl	bf960 <_Z19__fetch_global_Wirev>
   b542e:	2269      	movs	r2, #105	; 0x69
   b5430:	4601      	mov	r1, r0
   b5432:	4809      	ldr	r0, [pc, #36]	; (b5458 <_GLOBAL__sub_I___appProductVersion+0x6c>)
   b5434:	f001 fd2c 	bl	b6e90 <_ZN6AB1805C1ER7TwoWireh>
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b5438:	4808      	ldr	r0, [pc, #32]	; (b545c <_GLOBAL__sub_I___appProductVersion+0x70>)
   b543a:	2306      	movs	r3, #6
   b543c:	f840 3b04 	str.w	r3, [r0], #4
}
   b5440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5444:	f003 bc08 	b.w	b8c58 <_ZN22LocalTimePosixTimezoneC1Ev>
   b5448:	2003e29c 	.word	0x2003e29c
   b544c:	2003e29d 	.word	0x2003e29d
   b5450:	2003e2d0 	.word	0x2003e2d0
   b5454:	00030010 	.word	0x00030010
   b5458:	2003e2b0 	.word	0x2003e2b0
   b545c:	2003e2e8 	.word	0x2003e2e8

000b5460 <setup>:
{
   b5460:	b5f0      	push	{r4, r5, r6, r7, lr}
        return hal_timer_millis(nullptr);
   b5462:	2000      	movs	r0, #0
   b5464:	b09d      	sub	sp, #116	; 0x74
   b5466:	f006 fd3d 	bl	bbee4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b546a:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b546e:	4604      	mov	r4, r0
   b5470:	2000      	movs	r0, #0
   b5472:	f006 fd37 	bl	bbee4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5476:	1b00      	subs	r0, r0, r4
   b5478:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b547c:	42a8      	cmp	r0, r5
   b547e:	f171 0300 	sbcs.w	r3, r1, #0
   b5482:	d207      	bcs.n	b5494 <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b5484:	f00a f8ca 	bl	bf61c <_Z16_fetch_usbserialv>
   b5488:	f00a f8bd 	bl	bf606 <_ZN9USBSerial11isConnectedEv>
   b548c:	b910      	cbnz	r0, b5494 <setup+0x34>
            spark_process();
   b548e:	f006 fffd 	bl	bc48c <spark_process>
        while (_while() && !_condition()) {
   b5492:	e7ed      	b.n	b5470 <setup+0x10>
   b5494:	f00a f8c2 	bl	bf61c <_Z16_fetch_usbserialv>
   b5498:	f00a f8b5 	bl	bf606 <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b549c:	f000 ff66 	bl	b636c <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b54a0:	f000 ff90 	bl	b63c4 <_Z18initializePowerCfgv>
		current.setup();
   b54a4:	f000 fc98 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b54a8:	6803      	ldr	r3, [r0, #0]
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b54aa:	4e5a      	ldr	r6, [pc, #360]	; (b5614 <setup+0x1b4>)
   b54ac:	681b      	ldr	r3, [r3, #0]
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b54ae:	4f5a      	ldr	r7, [pc, #360]	; (b5618 <setup+0x1b8>)
   b54b0:	4798      	blx	r3
  		sysStatus.setup();
   b54b2:	f000 fc41 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b54b6:	6803      	ldr	r3, [r0, #0]
   b54b8:	681b      	ldr	r3, [r3, #0]
   b54ba:	4798      	blx	r3
		nodeID.setup();
   b54bc:	f000 fd0a 	bl	b5ed4 <_ZN10nodeIDData8instanceEv>
   b54c0:	6803      	ldr	r3, [r0, #0]
   b54c2:	681b      	ldr	r3, [r3, #0]
   b54c4:	4798      	blx	r3
    particleInitialize();                           // Sets up all the Particle functions and variables defined in particle_fn.h
   b54c6:	f001 f869 	bl	b659c <_Z18particleInitializev>
   b54ca:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b54cc:	2101      	movs	r1, #1
   b54ce:	4630      	mov	r0, r6
   b54d0:	8173      	strh	r3, [r6, #10]
   b54d2:	f002 f9d9 	bl	b7888 <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b54d6:	217c      	movs	r1, #124	; 0x7c
   b54d8:	4630      	mov	r0, r6
   b54da:	f001 fdd7 	bl	b708c <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b54de:	4b4f      	ldr	r3, [pc, #316]	; (b561c <setup+0x1bc>)
   b54e0:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b54e2:	4b4f      	ldr	r3, [pc, #316]	; (b5620 <setup+0x1c0>)
   b54e4:	9309      	str	r3, [sp, #36]	; 0x24
	System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b54e6:	ad06      	add	r5, sp, #24
	    _M_manager = &_My_handler::_M_manager;
   b54e8:	4b4e      	ldr	r3, [pc, #312]	; (b5624 <setup+0x1c4>)
   b54ea:	9308      	str	r3, [sp, #32]
   b54ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b54f0:	2300      	movs	r3, #0
   b54f2:	a802      	add	r0, sp, #8
   b54f4:	9500      	str	r5, [sp, #0]
   b54f6:	f7ff fed1 	bl	b529c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b54fa:	4628      	mov	r0, r5
   b54fc:	f7ff fd59 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b5500:	f004 f8f2 	bl	b96e8 <_ZN17PublishQueuePosix8instanceEv>
   b5504:	f004 faf6 	bl	b9af4 <_ZN17PublishQueuePosix5setupEv>
	LoRA_Functions::instance().setup(true);			// Start the LoRA radio (true for Gateway and false for Node)
   b5508:	f7fe fe32 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b550c:	2101      	movs	r1, #1
   b550e:	f7ff f91b 	bl	b4748 <_ZN14LoRA_Functions5setupEb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b5512:	f003 fd81 	bl	b9018 <_ZN9LocalTime8instanceEv>
   b5516:	4944      	ldr	r1, [pc, #272]	; (b5628 <setup+0x1c8>)
   b5518:	4604      	mov	r4, r0
   b551a:	4628      	mov	r0, r5
   b551c:	f003 fc4e 	bl	b8dbc <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b5520:	a907      	add	r1, sp, #28
   b5522:	f104 0008 	add.w	r0, r4, #8
   b5526:	f009 fc66 	bl	bedf6 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b552a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b552c:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b552e:	a90d      	add	r1, sp, #52	; 0x34
   b5530:	f104 0020 	add.w	r0, r4, #32
   b5534:	f009 fc5f 	bl	bedf6 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5538:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b553a:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b553c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b553e:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b5540:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5542:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b5544:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5546:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b5548:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b554a:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b554c:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   b5550:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b5554:	4628      	mov	r0, r5
   b5556:	f003 f9ed 	bl	b8934 <_ZN22LocalTimePosixTimezoneD1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b555a:	f009 ff78 	bl	bf44e <_ZN9TimeClass3nowEv>
   b555e:	17c3      	asrs	r3, r0, #31
   b5560:	e9c7 0318 	strd	r0, r3, [r7, #96]	; 0x60
	conv.withCurrentTime().convert();  				        // Convert to local time for use later
   b5564:	4638      	mov	r0, r7
   b5566:	f003 fdcf 	bl	b9108 <_ZN16LocalTimeConvert7convertEv>
	if (Time.isValid()) {
   b556a:	f009 ff53 	bl	bf414 <_ZN9TimeClass7isValidEv>
   b556e:	4c2f      	ldr	r4, [pc, #188]	; (b562c <setup+0x1cc>)
   b5570:	2800      	cmp	r0, #0
   b5572:	d043      	beq.n	b55fc <setup+0x19c>
		Log.info("LocalTime initialized, time is %s and RTC %s set", conv.format("%I:%M:%S%p").c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b5574:	4639      	mov	r1, r7
   b5576:	4a2e      	ldr	r2, [pc, #184]	; (b5630 <setup+0x1d0>)
   b5578:	4628      	mov	r0, r5
   b557a:	f003 fcaf 	bl	b8edc <_ZN16LocalTimeConvert6formatEPKc>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   b557e:	2301      	movs	r3, #1
   b5580:	461a      	mov	r2, r3
   b5582:	2110      	movs	r1, #16
   b5584:	4630      	mov	r0, r6
   b5586:	9f06      	ldr	r7, [sp, #24]
   b5588:	f001 fe01 	bl	b718e <_ZN6AB180510isBitClearEhhb>
   b558c:	4929      	ldr	r1, [pc, #164]	; (b5634 <setup+0x1d4>)
   b558e:	4b2a      	ldr	r3, [pc, #168]	; (b5638 <setup+0x1d8>)
   b5590:	463a      	mov	r2, r7
   b5592:	2800      	cmp	r0, #0
   b5594:	bf18      	it	ne
   b5596:	460b      	movne	r3, r1
   b5598:	4828      	ldr	r0, [pc, #160]	; (b563c <setup+0x1dc>)
   b559a:	4929      	ldr	r1, [pc, #164]	; (b5640 <setup+0x1e0>)
   b559c:	f7fe fdcf 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b55a0:	4628      	mov	r0, r5
   b55a2:	f009 fba1 	bl	bece8 <_ZN6StringD1Ev>
	if (!digitalRead(BUTTON_PIN)) {
   b55a6:	4b27      	ldr	r3, [pc, #156]	; (b5644 <setup+0x1e4>)
   b55a8:	881e      	ldrh	r6, [r3, #0]
   b55aa:	4630      	mov	r0, r6
   b55ac:	f00a f978 	bl	bf8a0 <digitalRead>
   b55b0:	4605      	mov	r5, r0
   b55b2:	bb50      	cbnz	r0, b560a <setup+0x1aa>
		Log.info("User button pressed, test mode");
   b55b4:	4924      	ldr	r1, [pc, #144]	; (b5648 <setup+0x1e8>)
   b55b6:	4821      	ldr	r0, [pc, #132]	; (b563c <setup+0x1dc>)
   b55b8:	f7fe fdc1 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		testModeFlag = true;
   b55bc:	4b23      	ldr	r3, [pc, #140]	; (b564c <setup+0x1ec>)
   b55be:	2101      	movs	r1, #1
   b55c0:	7019      	strb	r1, [r3, #0]
		digitalWrite(BLUE_LED,HIGH);
   b55c2:	4b23      	ldr	r3, [pc, #140]	; (b5650 <setup+0x1f0>)
   b55c4:	881f      	ldrh	r7, [r3, #0]
   b55c6:	4638      	mov	r0, r7
   b55c8:	f00a f951 	bl	bf86e <digitalWrite>
		delay(2000);
   b55cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b55d0:	f007 f894 	bl	bc6fc <delay>
		digitalWrite(BLUE_LED,LOW);
   b55d4:	4629      	mov	r1, r5
   b55d6:	4638      	mov	r0, r7
   b55d8:	f00a f949 	bl	bf86e <digitalWrite>
		state = LoRA_STATE;
   b55dc:	2304      	movs	r3, #4
   b55de:	7023      	strb	r3, [r4, #0]
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b55e0:	2200      	movs	r2, #0
   b55e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b55e6:	491b      	ldr	r1, [pc, #108]	; (b5654 <setup+0x1f4>)
   b55e8:	9200      	str	r2, [sp, #0]
   b55ea:	4630      	mov	r0, r6
   b55ec:	f007 fe08 	bl	bd200 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b55f0:	7823      	ldrb	r3, [r4, #0]
   b55f2:	b90b      	cbnz	r3, b55f8 <setup+0x198>
   b55f4:	2302      	movs	r3, #2
   b55f6:	7023      	strb	r3, [r4, #0]
}
   b55f8:	b01d      	add	sp, #116	; 0x74
   b55fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("LocalTime not initialized so will need to Connect to Particle");
   b55fc:	4916      	ldr	r1, [pc, #88]	; (b5658 <setup+0x1f8>)
   b55fe:	480f      	ldr	r0, [pc, #60]	; (b563c <setup+0x1dc>)
   b5600:	f7fe fd9d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		state = CONNECTING_STATE;
   b5604:	2305      	movs	r3, #5
   b5606:	7023      	strb	r3, [r4, #0]
   b5608:	e7cd      	b.n	b55a6 <setup+0x146>
	else Log.info("No user button push detechted");
   b560a:	4914      	ldr	r1, [pc, #80]	; (b565c <setup+0x1fc>)
   b560c:	480b      	ldr	r0, [pc, #44]	; (b563c <setup+0x1dc>)
   b560e:	f7fe fd96 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5612:	e7e5      	b.n	b55e0 <setup+0x180>
   b5614:	2003e2b0 	.word	0x2003e2b0
   b5618:	2003e2e8 	.word	0x2003e2e8
   b561c:	000b4f15 	.word	0x000b4f15
   b5620:	000b4f8f 	.word	0x000b4f8f
   b5624:	000b4f7b 	.word	0x000b4f7b
   b5628:	000c11fd 	.word	0x000c11fd
   b562c:	2003e3da 	.word	0x2003e3da
   b5630:	000c1224 	.word	0x000c1224
   b5634:	000c11f3 	.word	0x000c11f3
   b5638:	000c11f6 	.word	0x000c11f6
   b563c:	2003e658 	.word	0x2003e658
   b5640:	000c122f 	.word	0x000c122f
   b5644:	000c14be 	.word	0x000c14be
   b5648:	000c129e 	.word	0x000c129e
   b564c:	2003e3db 	.word	0x2003e3db
   b5650:	000c14bc 	.word	0x000c14bc
   b5654:	000b4f21 	.word	0x000b4f21
   b5658:	000c1260 	.word	0x000c1260
   b565c:	000c12bd 	.word	0x000c12bd

000b5660 <loop>:
void loop() {
   b5660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (state) {
   b5664:	4d7d      	ldr	r5, [pc, #500]	; (b585c <loop+0x1fc>)
   b5666:	782b      	ldrb	r3, [r5, #0]
   b5668:	3b01      	subs	r3, #1
void loop() {
   b566a:	b090      	sub	sp, #64	; 0x40
   b566c:	2b06      	cmp	r3, #6
   b566e:	d817      	bhi.n	b56a0 <loop+0x40>
   b5670:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5674:	00070250 	.word	0x00070250
   b5678:	010c0033 	.word	0x010c0033
   b567c:	023301bf 	.word	0x023301bf
   b5680:	01a6      	.short	0x01a6
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5682:	4b77      	ldr	r3, [pc, #476]	; (b5860 <loop+0x200>)
   b5684:	781b      	ldrb	r3, [r3, #0]
   b5686:	2b02      	cmp	r3, #2
   b5688:	d001      	beq.n	b568e <loop+0x2e>
   b568a:	f7ff fcd7 	bl	b503c <_Z22publishStateTransitionv>
			if (nextEventTime) {
   b568e:	4b75      	ldr	r3, [pc, #468]	; (b5864 <loop+0x204>)
   b5690:	781a      	ldrb	r2, [r3, #0]
   b5692:	b11a      	cbz	r2, b569c <loop+0x3c>
				nextEventTime = false;
   b5694:	2200      	movs	r2, #0
   b5696:	701a      	strb	r2, [r3, #0]
			state = LoRA_STATE;
   b5698:	2304      	movs	r3, #4
   b569a:	e000      	b.n	b569e <loop+0x3e>
			else state = SLEEPING_STATE;
   b569c:	2303      	movs	r3, #3
   b569e:	702b      	strb	r3, [r5, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b56a0:	4871      	ldr	r0, [pc, #452]	; (b5868 <loop+0x208>)
   b56a2:	f002 f89f 	bl	b77e4 <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   b56a6:	f004 f81f 	bl	b96e8 <_ZN17PublishQueuePosix8instanceEv>
   b56aa:	f003 ff0f 	bl	b94cc <_ZN17PublishQueuePosix4loopEv>
	current.loop();
   b56ae:	f000 fb93 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b56b2:	f000 fba1 	bl	b5df8 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b56b6:	f000 fb3f 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b56ba:	f000 fb65 	bl	b5d88 <_ZN13sysStatusData4loopEv>
	nodeID.loop();
   b56be:	f000 fc09 	bl	b5ed4 <_ZN10nodeIDData8instanceEv>
   b56c2:	f000 fc24 	bl	b5f0e <_ZN10nodeIDData4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b56c6:	4b69      	ldr	r3, [pc, #420]	; (b586c <loop+0x20c>)
   b56c8:	681b      	ldr	r3, [r3, #0]
   b56ca:	2b00      	cmp	r3, #0
   b56cc:	f2c0 8256 	blt.w	b5b7c <loop+0x51c>
}
   b56d0:	b010      	add	sp, #64	; 0x40
   b56d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		System.reset();
   b56d6:	f009 bcc6 	b.w	bf066 <_ZN11SystemClass5resetEv>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b56da:	4b61      	ldr	r3, [pc, #388]	; (b5860 <loop+0x200>)
   b56dc:	781b      	ldrb	r3, [r3, #0]
   b56de:	2b03      	cmp	r3, #3
   b56e0:	d001      	beq.n	b56e6 <loop+0x86>
   b56e2:	f7ff fcab 	bl	b503c <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b56e6:	2100      	movs	r1, #0
   b56e8:	485f      	ldr	r0, [pc, #380]	; (b5868 <loop+0x208>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b56ea:	4c61      	ldr	r4, [pc, #388]	; (b5870 <loop+0x210>)
   b56ec:	f001 fcce 	bl	b708c <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent();  		   		   	   // Time till next event
   b56f0:	f7ff fc74 	bl	b4fdc <_Z21secondsUntilNextEventv>
   b56f4:	4607      	mov	r7, r0
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.timeStr(Time.now()+wakeInSeconds).c_str(),System.freeMemory());
   b56f6:	f009 feaa 	bl	bf44e <_ZN9TimeClass3nowEv>
   b56fa:	19c2      	adds	r2, r0, r7
   b56fc:	17d3      	asrs	r3, r2, #31
   b56fe:	a808      	add	r0, sp, #32
   b5700:	f009 fda0 	bl	bf244 <_ZN9TimeClass7timeStrEx>
   b5704:	9b08      	ldr	r3, [sp, #32]
   b5706:	9302      	str	r3, [sp, #8]
   b5708:	f009 fd10 	bl	bf12c <_ZN11SystemClass10freeMemoryEv>
   b570c:	9b02      	ldr	r3, [sp, #8]
   b570e:	4959      	ldr	r1, [pc, #356]	; (b5874 <loop+0x214>)
   b5710:	9000      	str	r0, [sp, #0]
   b5712:	463a      	mov	r2, r7
   b5714:	4858      	ldr	r0, [pc, #352]	; (b5878 <loop+0x218>)
   b5716:	f7fe fd12 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b571a:	a808      	add	r0, sp, #32
   b571c:	f009 fae4 	bl	bece8 <_ZN6StringD1Ev>
			delay(2000);									// Make sure message gets out
   b5720:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5724:	f006 ffea 	bl	bc6fc <delay>
   b5728:	7d23      	ldrb	r3, [r4, #20]
   b572a:	2b00      	cmp	r3, #0
   b572c:	d050      	beq.n	b57d0 <loop+0x170>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b572e:	2302      	movs	r3, #2
   b5730:	7223      	strb	r3, [r4, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b5732:	4b52      	ldr	r3, [pc, #328]	; (b587c <loop+0x21c>)
   b5734:	f8b3 8000 	ldrh.w	r8, [r3]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5738:	6823      	ldr	r3, [r4, #0]
   b573a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b573c:	b1f3      	cbz	r3, b577c <loop+0x11c>
            if (start->type == type) {
   b573e:	889a      	ldrh	r2, [r3, #4]
   b5740:	2a01      	cmp	r2, #1
   b5742:	d006      	beq.n	b5752 <loop+0xf2>
            start = start->next;
   b5744:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5746:	e7f9      	b.n	b573c <loop+0xdc>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b5748:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b574a:	b1bb      	cbz	r3, b577c <loop+0x11c>
            if (start->type == type) {
   b574c:	889a      	ldrh	r2, [r3, #4]
   b574e:	2a01      	cmp	r2, #1
   b5750:	d1fa      	bne.n	b5748 <loop+0xe8>
                if (gpioWakeup->pin == pin) {
   b5752:	899a      	ldrh	r2, [r3, #12]
   b5754:	4542      	cmp	r2, r8
   b5756:	d1f7      	bne.n	b5748 <loop+0xe8>
                    gpioWakeup->mode = mode;
   b5758:	2200      	movs	r2, #0
   b575a:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b575c:	7d23      	ldrb	r3, [r4, #20]
   b575e:	2b00      	cmp	r3, #0
   b5760:	d036      	beq.n	b57d0 <loop+0x170>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5762:	6823      	ldr	r3, [r4, #0]
				.duration(wakeInSeconds * 1000L);
   b5764:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b5768:	68db      	ldr	r3, [r3, #12]
   b576a:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b576e:	b1db      	cbz	r3, b57a8 <loop+0x148>
            if (start->type == type) {
   b5770:	889a      	ldrh	r2, [r3, #4]
   b5772:	2a04      	cmp	r2, #4
   b5774:	f000 81fd 	beq.w	b5b72 <loop+0x512>
            start = start->next;
   b5778:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b577a:	e7f8      	b.n	b576e <loop+0x10e>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b577c:	4940      	ldr	r1, [pc, #256]	; (b5880 <loop+0x220>)
   b577e:	2010      	movs	r0, #16
   b5780:	f00a f976 	bl	bfa70 <_ZnwjRKSt9nothrow_t>
   b5784:	4606      	mov	r6, r0
   b5786:	2800      	cmp	r0, #0
   b5788:	f000 81f6 	beq.w	b5b78 <loop+0x518>
   b578c:	2210      	movs	r2, #16
   b578e:	2100      	movs	r1, #0
   b5790:	f00a feaa 	bl	c04e8 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b5794:	4b3b      	ldr	r3, [pc, #236]	; (b5884 <loop+0x224>)
   b5796:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b5798:	2301      	movs	r3, #1
   b579a:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b579c:	6923      	ldr	r3, [r4, #16]
   b579e:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b57a0:	f8a6 800c 	strh.w	r8, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b57a4:	6126      	str	r6, [r4, #16]
   b57a6:	e7d9      	b.n	b575c <loop+0xfc>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b57a8:	4935      	ldr	r1, [pc, #212]	; (b5880 <loop+0x220>)
   b57aa:	2010      	movs	r0, #16
   b57ac:	f00a f960 	bl	bfa70 <_ZnwjRKSt9nothrow_t>
   b57b0:	4606      	mov	r6, r0
   b57b2:	2800      	cmp	r0, #0
   b57b4:	f000 81e0 	beq.w	b5b78 <loop+0x518>
   b57b8:	2210      	movs	r2, #16
   b57ba:	2100      	movs	r1, #0
   b57bc:	f00a fe94 	bl	c04e8 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b57c0:	4b30      	ldr	r3, [pc, #192]	; (b5884 <loop+0x224>)
   b57c2:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b57c4:	2304      	movs	r3, #4
   b57c6:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b57c8:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b57ca:	6126      	str	r6, [r4, #16]
            wakeupSource->ms = ms;
   b57cc:	e9c6 3802 	strd	r3, r8, [r6, #8]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b57d0:	4927      	ldr	r1, [pc, #156]	; (b5870 <loop+0x210>)
   b57d2:	a805      	add	r0, sp, #20
   b57d4:	f009 fc4a 	bl	bf06c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b57d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b57dc:	4822      	ldr	r0, [pc, #136]	; (b5868 <loop+0x208>)
   b57de:	f001 fc55 	bl	b708c <_ZN6AB18056setWDTEi>
        return hal_timer_millis(nullptr);
   b57e2:	2000      	movs	r0, #0
   b57e4:	f006 fb7e 	bl	bbee4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b57e8:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b57ec:	4604      	mov	r4, r0
   b57ee:	2000      	movs	r0, #0
   b57f0:	f006 fb78 	bl	bbee4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b57f4:	1b00      	subs	r0, r0, r4
   b57f6:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b57fa:	42b0      	cmp	r0, r6
   b57fc:	f171 0300 	sbcs.w	r3, r1, #0
   b5800:	d207      	bcs.n	b5812 <loop+0x1b2>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b5802:	f009 ff0b 	bl	bf61c <_Z16_fetch_usbserialv>
   b5806:	f009 fefe 	bl	bf606 <_ZN9USBSerial11isConnectedEv>
   b580a:	b910      	cbnz	r0, b5812 <loop+0x1b2>
            spark_process();
   b580c:	f006 fe3e 	bl	bc48c <spark_process>
        while (_while() && !_condition()) {
   b5810:	e7ed      	b.n	b57ee <loop+0x18e>
   b5812:	f009 ff03 	bl	bf61c <_Z16_fetch_usbserialv>
   b5816:	f009 fef6 	bl	bf606 <_ZN9USBSerial11isConnectedEv>
			state = IDLE_STATE;
   b581a:	2302      	movs	r3, #2
   b581c:	702b      	strb	r3, [r5, #0]
			nextEventTime = true;
   b581e:	4b11      	ldr	r3, [pc, #68]	; (b5864 <loop+0x204>)
   b5820:	2201      	movs	r2, #1
   b5822:	701a      	strb	r2, [r3, #0]
			Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b5824:	f009 fe13 	bl	bf44e <_ZN9TimeClass3nowEv>
   b5828:	19c2      	adds	r2, r0, r7
   b582a:	17d3      	asrs	r3, r2, #31
   b582c:	a808      	add	r0, sp, #32
   b582e:	f009 fd09 	bl	bf244 <_ZN9TimeClass7timeStrEx>
   b5832:	9a08      	ldr	r2, [sp, #32]
   b5834:	9202      	str	r2, [sp, #8]
   b5836:	f009 fc79 	bl	bf12c <_ZN11SystemClass10freeMemoryEv>
   b583a:	9a02      	ldr	r2, [sp, #8]
   b583c:	4912      	ldr	r1, [pc, #72]	; (b5888 <loop+0x228>)
   b583e:	4603      	mov	r3, r0
   b5840:	480d      	ldr	r0, [pc, #52]	; (b5878 <loop+0x218>)
   b5842:	f7fe fc7c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5846:	a808      	add	r0, sp, #32
   b5848:	f009 fa4e 	bl	bece8 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b584c:	9805      	ldr	r0, [sp, #20]
   b584e:	2800      	cmp	r0, #0
   b5850:	f43f af26 	beq.w	b56a0 <loop+0x40>
            free(wakeupSource_);
   b5854:	f006 feda 	bl	bc60c <free>
		} break;
   b5858:	e722      	b.n	b56a0 <loop+0x40>
   b585a:	bf00      	nop
   b585c:	2003e3da 	.word	0x2003e3da
   b5860:	2003e3d9 	.word	0x2003e3d9
   b5864:	2003e3d8 	.word	0x2003e3d8
   b5868:	2003e2b0 	.word	0x2003e2b0
   b586c:	2003d654 	.word	0x2003d654
   b5870:	2003e2d0 	.word	0x2003e2d0
   b5874:	000c12e7 	.word	0x000c12e7
   b5878:	2003e658 	.word	0x2003e658
   b587c:	000c14be 	.word	0x000c14be
   b5880:	000c2520 	.word	0x000c2520
   b5884:	00030010 	.word	0x00030010
   b5888:	000c1327 	.word	0x000c1327
			if (state != oldState) {
   b588c:	4bbd      	ldr	r3, [pc, #756]	; (b5b84 <loop+0x524>)
   b588e:	781b      	ldrb	r3, [r3, #0]
   b5890:	2b04      	cmp	r3, #4
   b5892:	d062      	beq.n	b595a <loop+0x2fa>
				if (oldState != REPORTING_STATE) startLoRAWindow = millis();    // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b5894:	2b07      	cmp	r3, #7
   b5896:	d003      	beq.n	b58a0 <loop+0x240>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5898:	f006 fb14 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
   b589c:	4bba      	ldr	r3, [pc, #744]	; (b5b88 <loop+0x528>)
   b589e:	6018      	str	r0, [r3, #0]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b58a0:	f7ff fbcc 	bl	b503c <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();						// Clear the buffer before we start the LoRA state
   b58a4:	f7fe fc64 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b58a8:	f7fe fc74 	bl	b4194 <_ZN14LoRA_Functions11clearBufferEv>
   b58ac:	f009 fdcf 	bl	bf44e <_ZN9TimeClass3nowEv>
   b58b0:	4cb6      	ldr	r4, [pc, #728]	; (b5b8c <loop+0x52c>)
   b58b2:	17c3      	asrs	r3, r0, #31
   b58b4:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
				conv.withCurrentTime().convert();								// Get the time and convert to Local
   b58b8:	4620      	mov	r0, r4
   b58ba:	f003 fc25 	bl	b9108 <_ZN16LocalTimeConvert7convertEv>
    /**
     * @brief Get the value of this object as a LocalTimeHMS (hour minute second)
     * 
     * @return LocalTimeHMS 
     */
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   b58be:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b58c2:	a805      	add	r0, sp, #20
   b58c4:	f003 fab2 	bl	b8e2c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour < sysStatus.get_closeTime()) current.set_openHours(true);
   b58c8:	f99d 6018 	ldrsb.w	r6, [sp, #24]
   b58cc:	f000 fa34 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b58d0:	f000 fb5f 	bl	b5f92 <_ZNK13sysStatusData12get_openTimeEv>
   b58d4:	4286      	cmp	r6, r0
   b58d6:	db6d      	blt.n	b59b4 <loop+0x354>
   b58d8:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b58dc:	a808      	add	r0, sp, #32
   b58de:	f003 faa5 	bl	b8e2c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b58e2:	f99d 6024 	ldrsb.w	r6, [sp, #36]	; 0x24
   b58e6:	f000 fa27 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b58ea:	f000 fb57 	bl	b5f9c <_ZNK13sysStatusData13get_closeTimeEv>
   b58ee:	4286      	cmp	r6, r0
   b58f0:	a808      	add	r0, sp, #32
   b58f2:	bfac      	ite	ge
   b58f4:	2600      	movge	r6, #0
   b58f6:	2601      	movlt	r6, #1
   b58f8:	f003 f80c 	bl	b8914 <_ZN12LocalTimeHMSD1Ev>
   b58fc:	a805      	add	r0, sp, #20
   b58fe:	f003 f809 	bl	b8914 <_ZN12LocalTimeHMSD1Ev>
   b5902:	2e00      	cmp	r6, #0
   b5904:	d058      	beq.n	b59b8 <loop+0x358>
   b5906:	f000 fa67 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b590a:	2101      	movs	r1, #1
				else current.set_openHours(false);
   b590c:	f000 fd0f 	bl	b632e <_ZN17currentStatusData13set_openHoursEb>
				Log.info("Gateway is listening for LoRA messages and the park is %s (%d / %d / %d)", (current.get_openHours()) ? "open":"closed", conv.getLocalTimeHMS().hour, sysStatus.get_openTime(), sysStatus.get_closeTime());
   b5910:	f000 fa62 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b5914:	f000 fce2 	bl	b62dc <_ZNK17currentStatusData13get_openHoursEv>
   b5918:	4b9d      	ldr	r3, [pc, #628]	; (b5b90 <loop+0x530>)
   b591a:	4a9e      	ldr	r2, [pc, #632]	; (b5b94 <loop+0x534>)
   b591c:	499e      	ldr	r1, [pc, #632]	; (b5b98 <loop+0x538>)
   b591e:	2800      	cmp	r0, #0
   b5920:	bf08      	it	eq
   b5922:	461a      	moveq	r2, r3
   b5924:	a808      	add	r0, sp, #32
   b5926:	9203      	str	r2, [sp, #12]
   b5928:	f003 fa80 	bl	b8e2c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b592c:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b5930:	9302      	str	r3, [sp, #8]
   b5932:	f000 fa01 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b5936:	f000 fb2c 	bl	b5f92 <_ZNK13sysStatusData12get_openTimeEv>
   b593a:	4604      	mov	r4, r0
   b593c:	f000 f9fc 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b5940:	f000 fb2c 	bl	b5f9c <_ZNK13sysStatusData13get_closeTimeEv>
   b5944:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b5948:	e9cd 4000 	strd	r4, r0, [sp]
   b594c:	4993      	ldr	r1, [pc, #588]	; (b5b9c <loop+0x53c>)
   b594e:	4894      	ldr	r0, [pc, #592]	; (b5ba0 <loop+0x540>)
   b5950:	f7fe fbf5 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5954:	a808      	add	r0, sp, #32
   b5956:	f002 ffdd 	bl	b8914 <_ZN12LocalTimeHMSD1Ev>
			if (LoRA_Functions::instance().listenForLoRAMessageGateway() && current.get_alertCodeNode() != 1) state = REPORTING_STATE; 			// Received and acknowledged data from a node - report unless there is Alert Code 1 (Unconfigured Node)
   b595a:	f7fe fc09 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b595e:	f7ff fa2d 	bl	b4dbc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>
   b5962:	b138      	cbz	r0, b5974 <loop+0x314>
   b5964:	f000 fa38 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b5968:	f000 fb40 	bl	b5fec <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b596c:	2801      	cmp	r0, #1
   b596e:	bf1c      	itt	ne
   b5970:	2307      	movne	r3, #7
   b5972:	702b      	strbne	r3, [r5, #0]
			if (!testModeFlag && ((millis() - startLoRAWindow) > 150000L)) { 								// Keeps us in listening mode for the specified windpw - then back to idle unless in test mode - keeps listening
   b5974:	4b8b      	ldr	r3, [pc, #556]	; (b5ba4 <loop+0x544>)
   b5976:	781b      	ldrb	r3, [r3, #0]
   b5978:	2b00      	cmp	r3, #0
   b597a:	f47f ae91 	bne.w	b56a0 <loop+0x40>
   b597e:	f006 faa1 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
   b5982:	4b81      	ldr	r3, [pc, #516]	; (b5b88 <loop+0x528>)
   b5984:	681b      	ldr	r3, [r3, #0]
   b5986:	1ac0      	subs	r0, r0, r3
   b5988:	4b87      	ldr	r3, [pc, #540]	; (b5ba8 <loop+0x548>)
   b598a:	4298      	cmp	r0, r3
   b598c:	f67f ae88 	bls.w	b56a0 <loop+0x40>
				LoRA_Functions::instance().sleepLoRaRadio();												// Done with the LoRA phase - put the radio to sleep
   b5990:	f7fe fbee 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5994:	f7fe fc0e 	bl	b41b4 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection())) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over
   b5998:	f009 fd6a 	bl	bf470 <_ZN9TimeClass4hourEv>
   b599c:	4604      	mov	r4, r0
   b599e:	f000 f9cb 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b59a2:	f000 fc22 	bl	b61ea <_ZNK13sysStatusData18get_lastConnectionEv>
   b59a6:	f009 fc29 	bl	bf1fc <_ZN9TimeClass4hourEx>
   b59aa:	4284      	cmp	r4, r0
   b59ac:	f000 80b0 	beq.w	b5b10 <loop+0x4b0>
   b59b0:	2305      	movs	r3, #5
   b59b2:	e674      	b.n	b569e <loop+0x3e>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour < sysStatus.get_closeTime()) current.set_openHours(true);
   b59b4:	2600      	movs	r6, #0
   b59b6:	e7a1      	b.n	b58fc <loop+0x29c>
				else current.set_openHours(false);
   b59b8:	f000 fa0e 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b59bc:	4631      	mov	r1, r6
   b59be:	e7a5      	b.n	b590c <loop+0x2ac>
			if (state != oldState) publishStateTransition();
   b59c0:	4b70      	ldr	r3, [pc, #448]	; (b5b84 <loop+0x524>)
   b59c2:	781b      	ldrb	r3, [r3, #0]
   b59c4:	2b07      	cmp	r3, #7
   b59c6:	d001      	beq.n	b59cc <loop+0x36c>
   b59c8:	f7ff fb38 	bl	b503c <_Z22publishStateTransitionv>
			uint8_t nodeNumber = current.get_nodeNumber();						// Put this here to reduce line length
   b59cc:	f000 fa04 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b59d0:	f000 faee 	bl	b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>
			publishWebhook(nodeNumber);
   b59d4:	f7ff fb7a 	bl	b50cc <_Z14publishWebhookh>
			sysStatus.set_messageCount(sysStatus.get_messageCount() + 1);		// Increment the message counter 
   b59d8:	f000 f9ae 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b59dc:	4604      	mov	r4, r0
   b59de:	f000 f9ab 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b59e2:	f000 fad1 	bl	b5f88 <_ZNK13sysStatusData16get_messageCountEv>
   b59e6:	3001      	adds	r0, #1
   b59e8:	b2c1      	uxtb	r1, r0
   b59ea:	4620      	mov	r0, r4
   b59ec:	f000 fb32 	bl	b6054 <_ZN13sysStatusData16set_messageCountEh>
   b59f0:	e652      	b.n	b5698 <loop+0x38>
			if (state != oldState) {
   b59f2:	4b64      	ldr	r3, [pc, #400]	; (b5b84 <loop+0x524>)
   b59f4:	4c6d      	ldr	r4, [pc, #436]	; (b5bac <loop+0x54c>)
   b59f6:	781b      	ldrb	r3, [r3, #0]
   b59f8:	2b05      	cmp	r3, #5
   b59fa:	d025      	beq.n	b5a48 <loop+0x3e8>
				publishStateTransition();  
   b59fc:	f7ff fb1e 	bl	b503c <_Z22publishStateTransitionv>
				if (Time.day(sysStatus.get_lastConnection()) != conv.getLocalTimeYMD().getDay()) {
   b5a00:	f000 f99a 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b5a04:	f000 fbf1 	bl	b61ea <_ZNK13sysStatusData18get_lastConnectionEv>
   b5a08:	f009 fc00 	bl	bf20c <_ZN9TimeClass3dayEx>
        fromLocalTimeValue(value);
   b5a0c:	4962      	ldr	r1, [pc, #392]	; (b5b98 <loop+0x538>)
   b5a0e:	4606      	mov	r6, r0
   b5a10:	a808      	add	r0, sp, #32
   b5a12:	f003 fa28 	bl	b8e66 <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>
    /**
     * @brief Get the value of this object as a LocalTimeYMD (year month day0)
     * 
     * @return LocalTimeYMD 
     */
    LocalTimeYMD getLocalTimeYMD() const { return LocalTimeYMD(localTimeValue); };
   b5a16:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   b5a1a:	ebb6 0fd3 	cmp.w	r6, r3, lsr #3
   b5a1e:	d005      	beq.n	b5a2c <loop+0x3cc>
					resetEverything();
   b5a20:	f000 fc16 	bl	b6250 <_Z15resetEverythingv>
					Log.info("New Day - Resetting everything");
   b5a24:	4962      	ldr	r1, [pc, #392]	; (b5bb0 <loop+0x550>)
   b5a26:	485e      	ldr	r0, [pc, #376]	; (b5ba0 <loop+0x540>)
   b5a28:	f7fe fb89 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				publishWebhook(sysStatus.get_nodeNumber());								// Before we connect - let's send the gateway's webhook
   b5a2c:	f000 f984 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b5a30:	f000 faa0 	bl	b5f74 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5a34:	f7ff fb4a 	bl	b50cc <_Z14publishWebhookh>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5a38:	f006 fd38 	bl	bc4ac <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();							// Time to connect to Particle
   b5a3c:	b908      	cbnz	r0, b5a42 <loop+0x3e2>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b5a3e:	f006 fd2d 	bl	bc49c <spark_cloud_flag_connect>
   b5a42:	f006 fa3f 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b5a46:	6020      	str	r0, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5a48:	f006 fd30 	bl	bc4ac <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b5a4c:	b338      	cbz	r0, b5a9e <loop+0x43e>
				sysStatus.set_lastConnection(Time.now());
   b5a4e:	f000 f973 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b5a52:	4606      	mov	r6, r0
   b5a54:	f009 fcfb 	bl	bf44e <_ZN9TimeClass3nowEv>
   b5a58:	4602      	mov	r2, r0
   b5a5a:	17c3      	asrs	r3, r0, #31
   b5a5c:	4630      	mov	r0, r6
   b5a5e:	f000 fbed 	bl	b623c <_ZN13sysStatusData18set_lastConnectionEx>
				sysStatus.set_lastConnectionDuration((millis() - connectingTimeout) / 1000);	// Record connection time in seconds
   b5a62:	f000 f969 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b5a66:	4606      	mov	r6, r0
   b5a68:	f006 fa2c 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
   b5a6c:	6821      	ldr	r1, [r4, #0]
   b5a6e:	1a41      	subs	r1, r0, r1
   b5a70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5a74:	fbb1 f1f0 	udiv	r1, r1, r0
   b5a78:	4630      	mov	r0, r6
   b5a7a:	b289      	uxth	r1, r1
   b5a7c:	f000 fb7a 	bl	b6174 <_ZN13sysStatusData26set_lastConnectionDurationEt>
   b5a80:	f006 fd14 	bl	bc4ac <spark_cloud_flag_connected>
				if (Particle.connected()) {
   b5a84:	b338      	cbz	r0, b5ad6 <loop+0x476>
   b5a86:	f006 fd11 	bl	bc4ac <spark_cloud_flag_connected>
        if (!connected()) {
   b5a8a:	b110      	cbz	r0, b5a92 <loop+0x432>
        return spark_sync_time(NULL);
   b5a8c:	2000      	movs	r0, #0
   b5a8e:	f006 fd25 	bl	bc4dc <spark_sync_time>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b5a92:	f7ff fa81 	bl	b4f98 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        while (_while() && !_condition()) {
   b5a96:	b950      	cbnz	r0, b5aae <loop+0x44e>
            spark_process();
   b5a98:	f006 fcf8 	bl	bc48c <spark_process>
        while (_while() && !_condition()) {
   b5a9c:	e7f9      	b.n	b5a92 <loop+0x432>
   b5a9e:	f006 fa11 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b5aa2:	6823      	ldr	r3, [r4, #0]
   b5aa4:	1ac0      	subs	r0, r0, r3
   b5aa6:	4b43      	ldr	r3, [pc, #268]	; (b5bb4 <loop+0x554>)
   b5aa8:	4298      	cmp	r0, r3
   b5aaa:	d8d0      	bhi.n	b5a4e <loop+0x3ee>
   b5aac:	e5f8      	b.n	b56a0 <loop+0x40>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b5aae:	f7ff fa73 	bl	b4f98 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
					CellularSignal sig = Cellular.RSSI();
   b5ab2:	4941      	ldr	r1, [pc, #260]	; (b5bb8 <loop+0x558>)
   b5ab4:	a808      	add	r0, sp, #32
   b5ab6:	f006 fe9b 	bl	bc7f0 <_ZN5spark13CellularClass4RSSIEv>
					sysStatus.set_RSSI(sig.getStrength());
   b5aba:	f000 f93d 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b5abe:	4604      	mov	r4, r0
   b5ac0:	a808      	add	r0, sp, #32
   b5ac2:	f006 ff11 	bl	bc8e8 <_ZNK14CellularSignal11getStrengthEv>
   b5ac6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
   b5aca:	4620      	mov	r0, r4
   b5acc:	ee10 3a10 	vmov	r3, s0
   b5ad0:	b299      	uxth	r1, r3
   b5ad2:	f000 fb5b 	bl	b618c <_ZN13sysStatusData8set_RSSIEt>
				state = DISCONNECTING_STATE;											// Typically, we will disconnect and sleep to save power - publishes occur during the 90 seconds before disconnect
   b5ad6:	2306      	movs	r3, #6
   b5ad8:	e5e1      	b.n	b569e <loop+0x3e>
			if (state != oldState) {
   b5ada:	4b2a      	ldr	r3, [pc, #168]	; (b5b84 <loop+0x524>)
   b5adc:	4c37      	ldr	r4, [pc, #220]	; (b5bbc <loop+0x55c>)
   b5ade:	781b      	ldrb	r3, [r3, #0]
   b5ae0:	2b06      	cmp	r3, #6
   b5ae2:	d004      	beq.n	b5aee <loop+0x48e>
				publishStateTransition(); 
   b5ae4:	f7ff faaa 	bl	b503c <_Z22publishStateTransitionv>
   b5ae8:	f006 f9ec 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b5aec:	6020      	str	r0, [r4, #0]
   b5aee:	f006 f9e9 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - stayConnectedWindow > 90000) && PublishQueuePosix::instance().getCanSleep()) {	// Stay on-line for 90 seconds and until we are done clearing the queue
   b5af2:	6823      	ldr	r3, [r4, #0]
   b5af4:	1ac0      	subs	r0, r0, r3
   b5af6:	4b32      	ldr	r3, [pc, #200]	; (b5bc0 <loop+0x560>)
   b5af8:	4298      	cmp	r0, r3
   b5afa:	f67f add1 	bls.w	b56a0 <loop+0x40>
   b5afe:	f003 fdf3 	bl	b96e8 <_ZN17PublishQueuePosix8instanceEv>
   b5b02:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
   b5b06:	2b00      	cmp	r3, #0
   b5b08:	f43f adca 	beq.w	b56a0 <loop+0x40>
				disconnectFromParticle();
   b5b0c:	f000 ffda 	bl	b6ac4 <_Z22disconnectFromParticlev>
				state = IDLE_STATE;
   b5b10:	2302      	movs	r3, #2
   b5b12:	e5c4      	b.n	b569e <loop+0x3e>
			static system_tick_t resetTimeout = millis();
   b5b14:	4c2b      	ldr	r4, [pc, #172]	; (b5bc4 <loop+0x564>)
   b5b16:	4e2c      	ldr	r6, [pc, #176]	; (b5bc8 <loop+0x568>)
   b5b18:	7823      	ldrb	r3, [r4, #0]
   b5b1a:	f3bf 8f5b 	dmb	ish
   b5b1e:	f013 0f01 	tst.w	r3, #1
   b5b22:	d109      	bne.n	b5b38 <loop+0x4d8>
   b5b24:	4620      	mov	r0, r4
   b5b26:	f7fe fac9 	bl	b40bc <__cxa_guard_acquire>
   b5b2a:	b128      	cbz	r0, b5b38 <loop+0x4d8>
   b5b2c:	f006 f9ca 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
   b5b30:	6030      	str	r0, [r6, #0]
   b5b32:	4620      	mov	r0, r4
   b5b34:	f7fe fac7 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) publishStateTransition();
   b5b38:	4b12      	ldr	r3, [pc, #72]	; (b5b84 <loop+0x524>)
   b5b3a:	782a      	ldrb	r2, [r5, #0]
   b5b3c:	781b      	ldrb	r3, [r3, #0]
   b5b3e:	429a      	cmp	r2, r3
   b5b40:	d001      	beq.n	b5b46 <loop+0x4e6>
   b5b42:	f7ff fa7b 	bl	b503c <_Z22publishStateTransitionv>
   b5b46:	f006 f9bd 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b5b4a:	6833      	ldr	r3, [r6, #0]
   b5b4c:	1ac0      	subs	r0, r0, r3
   b5b4e:	f247 5330 	movw	r3, #30000	; 0x7530
   b5b52:	4298      	cmp	r0, r3
   b5b54:	f67f ada4 	bls.w	b56a0 <loop+0x40>
				Log.info("Deep power down device");
   b5b58:	491c      	ldr	r1, [pc, #112]	; (b5bcc <loop+0x56c>)
   b5b5a:	4811      	ldr	r0, [pc, #68]	; (b5ba0 <loop+0x540>)
   b5b5c:	f7fe faef 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				delay(2000);
   b5b60:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5b64:	f006 fdca 	bl	bc6fc <delay>
				ab1805.deepPowerDown(); 
   b5b68:	211e      	movs	r1, #30
   b5b6a:	4819      	ldr	r0, [pc, #100]	; (b5bd0 <loop+0x570>)
   b5b6c:	f001 fbe8 	bl	b7340 <_ZN6AB180513deepPowerDownEi>
   b5b70:	e596      	b.n	b56a0 <loop+0x40>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b5b72:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b5b76:	e62b      	b.n	b57d0 <loop+0x170>
                valid_ = false;
   b5b78:	7526      	strb	r6, [r4, #20]
                return *this;
   b5b7a:	e629      	b.n	b57d0 <loop+0x170>
}
   b5b7c:	b010      	add	sp, #64	; 0x40
   b5b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5b82:	bf00      	nop
   b5b84:	2003e3d9 	.word	0x2003e3d9
   b5b88:	2003e2a4 	.word	0x2003e2a4
   b5b8c:	2003e2e8 	.word	0x2003e2e8
   b5b90:	000c12e0 	.word	0x000c12e0
   b5b94:	000c12db 	.word	0x000c12db
   b5b98:	2003e350 	.word	0x2003e350
   b5b9c:	000c1348 	.word	0x000c1348
   b5ba0:	2003e658 	.word	0x2003e658
   b5ba4:	2003e3db 	.word	0x2003e3db
   b5ba8:	000249f0 	.word	0x000249f0
   b5bac:	2003e2a8 	.word	0x2003e2a8
   b5bb0:	000c1391 	.word	0x000c1391
   b5bb4:	000927c0 	.word	0x000927c0
   b5bb8:	2003e584 	.word	0x2003e584
   b5bbc:	2003e2ac 	.word	0x2003e2ac
   b5bc0:	00015f90 	.word	0x00015f90
   b5bc4:	2003e298 	.word	0x2003e298
   b5bc8:	2003e2a0 	.word	0x2003e2a0
   b5bcc:	000c13b0 	.word	0x000c13b0
   b5bd0:	2003e2b0 	.word	0x2003e2b0

000b5bd4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b5bd4:	b510      	push	{r4, lr}
   b5bd6:	4b03      	ldr	r3, [pc, #12]	; (b5be4 <_ZN8MB85RC64D1Ev+0x10>)
   b5bd8:	6003      	str	r3, [r0, #0]
   b5bda:	4604      	mov	r4, r0
   b5bdc:	f003 fb42 	bl	b9264 <_ZN6MB85RCD1Ev>
   b5be0:	4620      	mov	r0, r4
   b5be2:	bd10      	pop	{r4, pc}
   b5be4:	000c13f0 	.word	0x000c13f0

000b5be8 <_ZN8MB85RC64D0Ev>:
   b5be8:	b510      	push	{r4, lr}
   b5bea:	4604      	mov	r4, r0
   b5bec:	f7ff fff2 	bl	b5bd4 <_ZN8MB85RC64D1Ev>
   b5bf0:	4620      	mov	r0, r4
   b5bf2:	2110      	movs	r1, #16
   b5bf4:	f7fe fa53 	bl	b409e <_ZdlPvj>
   b5bf8:	4620      	mov	r0, r4
   b5bfa:	bd10      	pop	{r4, pc}

000b5bfc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b5bfc:	b510      	push	{r4, lr}
            if (!handle_) {
   b5bfe:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b5c00:	4604      	mov	r4, r0
            if (!handle_) {
   b5c02:	b90b      	cbnz	r3, b5c08 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b5c04:	f006 f90e 	bl	bbe24 <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b5c08:	6820      	ldr	r0, [r4, #0]
        }
   b5c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b5c0e:	f006 b919 	b.w	bbe44 <os_mutex_recursive_lock>

000b5c12 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b5c12:	b538      	push	{r3, r4, r5, lr}
   b5c14:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b5c16:	3004      	adds	r0, #4
   b5c18:	f7ff fff0 	bl	b5bfc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5c1c:	6a20      	ldr	r0, [r4, #32]
   b5c1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5c20:	6803      	ldr	r3, [r0, #0]
   b5c22:	68dd      	ldr	r5, [r3, #12]
   b5c24:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5c28:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b5c2a:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b5c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b5c30:	f006 b910 	b.w	bbe54 <os_mutex_recursive_unlock>

000b5c34 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5c34:	b538      	push	{r3, r4, r5, lr}
   b5c36:	4604      	mov	r4, r0
   b5c38:	3004      	adds	r0, #4
   b5c3a:	f7ff ffdf 	bl	b5bfc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b5c3e:	6a20      	ldr	r0, [r4, #32]
   b5c40:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5c42:	6803      	ldr	r3, [r0, #0]
   b5c44:	689d      	ldr	r5, [r3, #8]
   b5c46:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5c4a:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5c4c:	68a2      	ldr	r2, [r4, #8]
   b5c4e:	6823      	ldr	r3, [r4, #0]
   b5c50:	88d1      	ldrh	r1, [r2, #6]
   b5c52:	695b      	ldr	r3, [r3, #20]
   b5c54:	4620      	mov	r0, r4
   b5c56:	4798      	blx	r3
   b5c58:	b918      	cbnz	r0, b5c62 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b5c5a:	6823      	ldr	r3, [r4, #0]
   b5c5c:	4620      	mov	r0, r4
   b5c5e:	699b      	ldr	r3, [r3, #24]
   b5c60:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5c62:	6860      	ldr	r0, [r4, #4]
   b5c64:	f006 f8f6 	bl	bbe54 <os_mutex_recursive_unlock>
        }
   b5c68:	2001      	movs	r0, #1
   b5c6a:	bd38      	pop	{r3, r4, r5, pc}

000b5c6c <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b5c6c:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b5c6e:	4b04      	ldr	r3, [pc, #16]	; (b5c80 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b5c70:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b5c72:	4604      	mov	r4, r0
            if (handle_) {
   b5c74:	6840      	ldr	r0, [r0, #4]
   b5c76:	b108      	cbz	r0, b5c7c <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5c78:	f006 f8dc 	bl	bbe34 <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b5c7c:	4620      	mov	r0, r4
   b5c7e:	bd10      	pop	{r4, pc}
   b5c80:	000c2214 	.word	0x000c2214

000b5c84 <_ZN13sysStatusDataD1Ev>:

sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {

};

sysStatusData::~sysStatusData() {
   b5c84:	b510      	push	{r4, lr}
   b5c86:	4b03      	ldr	r3, [pc, #12]	; (b5c94 <_ZN13sysStatusDataD1Ev+0x10>)
   b5c88:	6003      	str	r3, [r0, #0]
   b5c8a:	4604      	mov	r4, r0
   b5c8c:	f7ff ffee 	bl	b5c6c <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5c90:	4620      	mov	r0, r4
   b5c92:	bd10      	pop	{r4, pc}
   b5c94:	000c1438 	.word	0x000c1438

000b5c98 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b5c98:	b510      	push	{r4, lr}
   b5c9a:	4604      	mov	r4, r0
}
   b5c9c:	f7ff fff2 	bl	b5c84 <_ZN13sysStatusDataD1Ev>
   b5ca0:	4620      	mov	r0, r4
   b5ca2:	2168      	movs	r1, #104	; 0x68
   b5ca4:	f7fe f9fb 	bl	b409e <_ZdlPvj>
   b5ca8:	4620      	mov	r0, r4
   b5caa:	bd10      	pop	{r4, pc}

000b5cac <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b5cac:	b510      	push	{r4, lr}
   b5cae:	4b03      	ldr	r3, [pc, #12]	; (b5cbc <_ZN17currentStatusDataD1Ev+0x10>)
   b5cb0:	6003      	str	r3, [r0, #0]
   b5cb2:	4604      	mov	r4, r0
   b5cb4:	f7ff ffda 	bl	b5c6c <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5cb8:	4620      	mov	r0, r4
   b5cba:	bd10      	pop	{r4, pc}
   b5cbc:	000c1464 	.word	0x000c1464

000b5cc0 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b5cc0:	b510      	push	{r4, lr}
   b5cc2:	4604      	mov	r4, r0
}
   b5cc4:	f7ff fff2 	bl	b5cac <_ZN17currentStatusDataD1Ev>
   b5cc8:	4620      	mov	r0, r4
   b5cca:	2170      	movs	r1, #112	; 0x70
   b5ccc:	f7fe f9e7 	bl	b409e <_ZdlPvj>
   b5cd0:	4620      	mov	r0, r4
   b5cd2:	bd10      	pop	{r4, pc}

000b5cd4 <_ZN10nodeIDDataD1Ev>:

nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {

};

nodeIDData::~nodeIDData() {
   b5cd4:	b510      	push	{r4, lr}
   b5cd6:	4b03      	ldr	r3, [pc, #12]	; (b5ce4 <_ZN10nodeIDDataD1Ev+0x10>)
   b5cd8:	6003      	str	r3, [r0, #0]
   b5cda:	4604      	mov	r4, r0
   b5cdc:	f7ff ffc6 	bl	b5c6c <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5ce0:	4620      	mov	r0, r4
   b5ce2:	bd10      	pop	{r4, pc}
   b5ce4:	000c140c 	.word	0x000c140c

000b5ce8 <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b5ce8:	b510      	push	{r4, lr}
   b5cea:	4604      	mov	r4, r0
}
   b5cec:	f7ff fff2 	bl	b5cd4 <_ZN10nodeIDDataD1Ev>
   b5cf0:	4620      	mov	r0, r4
   b5cf2:	f44f 6187 	mov.w	r1, #1080	; 0x438
   b5cf6:	f7fe f9d2 	bl	b409e <_ZdlPvj>
   b5cfa:	4620      	mov	r0, r4
   b5cfc:	bd10      	pop	{r4, pc}
	...

000b5d00 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5d00:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5d04:	6081      	str	r1, [r0, #8]
   b5d06:	4909      	ldr	r1, [pc, #36]	; (b5d2c <_ZN13sysStatusDataC1Ev+0x2c>)
   b5d08:	f04f 0c40 	mov.w	ip, #64	; 0x40
   b5d0c:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b5d10:	2101      	movs	r1, #1
   b5d12:	8281      	strh	r1, [r0, #20]
   b5d14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5d18:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5d1a:	4905      	ldr	r1, [pc, #20]	; (b5d30 <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5d1c:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5d1e:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b5d22:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5d24:	6182      	str	r2, [r0, #24]
   b5d26:	4a03      	ldr	r2, [pc, #12]	; (b5d34 <_ZN13sysStatusDataC1Ev+0x34>)
   b5d28:	6002      	str	r2, [r0, #0]
};
   b5d2a:	4770      	bx	lr
   b5d2c:	20a99e75 	.word	0x20a99e75
   b5d30:	2003e3ec 	.word	0x2003e3ec
   b5d34:	000c1438 	.word	0x000c1438

000b5d38 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b5d38:	b510      	push	{r4, lr}
    if (!_instance) {
   b5d3a:	4c06      	ldr	r4, [pc, #24]	; (b5d54 <_ZN13sysStatusData8instanceEv+0x1c>)
   b5d3c:	6823      	ldr	r3, [r4, #0]
   b5d3e:	b93b      	cbnz	r3, b5d50 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b5d40:	2068      	movs	r0, #104	; 0x68
   b5d42:	f7fe f9a8 	bl	b4096 <_Znwj>
   b5d46:	4603      	mov	r3, r0
   b5d48:	b108      	cbz	r0, b5d4e <_ZN13sysStatusData8instanceEv+0x16>
   b5d4a:	f7ff ffd9 	bl	b5d00 <_ZN13sysStatusDataC1Ev>
   b5d4e:	6023      	str	r3, [r4, #0]
}
   b5d50:	6820      	ldr	r0, [r4, #0]
   b5d52:	bd10      	pop	{r4, pc}
   b5d54:	2003e3e4 	.word	0x2003e3e4

000b5d58 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b5d58:	b508      	push	{r3, lr}
    fram.begin();
   b5d5a:	6a00      	ldr	r0, [r0, #32]
   b5d5c:	f003 fa98 	bl	b9290 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5d60:	f7ff ffea 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b5d64:	6803      	ldr	r3, [r0, #0]
   b5d66:	685b      	ldr	r3, [r3, #4]
   b5d68:	4798      	blx	r3
}
   b5d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setGatewayConfiguration();                             // Here we will fix the settings specific to the node
   b5d6e:	f000 bb61 	b.w	b6434 <_Z23setGatewayConfigurationv>

000b5d72 <_ZN17currentStatusData5setupEv>:
void currentStatusData::setup() {
   b5d72:	b510      	push	{r4, lr}
    fram.begin();
   b5d74:	6a00      	ldr	r0, [r0, #32]
   b5d76:	f003 fa8b 	bl	b9290 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5d7a:	f7ff ffdd 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b5d7e:	6803      	ldr	r3, [r0, #0]
}
   b5d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.load();
   b5d84:	685b      	ldr	r3, [r3, #4]
   b5d86:	4718      	bx	r3

000b5d88 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b5d88:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5d8a:	f7ff ffd5 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b5d8e:	6803      	ldr	r3, [r0, #0]
}
   b5d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5d94:	68db      	ldr	r3, [r3, #12]
   b5d96:	2100      	movs	r1, #0
   b5d98:	4718      	bx	r3
	...

000b5d9c <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b5d9c:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b5d9e:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5da2:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5da4:	6182      	str	r2, [r0, #24]
   b5da6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5daa:	6081      	str	r1, [r0, #8]
   b5dac:	61c2      	str	r2, [r0, #28]
   b5dae:	4907      	ldr	r1, [pc, #28]	; (b5dcc <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5db0:	4a07      	ldr	r2, [pc, #28]	; (b5dd0 <_ZN17currentStatusDataC1Ev+0x34>)
   b5db2:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5db4:	f04f 0c48 	mov.w	ip, #72	; 0x48
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5db8:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5dba:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5dbe:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5dc0:	2101      	movs	r1, #1
   b5dc2:	4a04      	ldr	r2, [pc, #16]	; (b5dd4 <_ZN17currentStatusDataC1Ev+0x38>)
   b5dc4:	8281      	strh	r1, [r0, #20]
   b5dc6:	6002      	str	r2, [r0, #0]
};
   b5dc8:	4770      	bx	lr
   b5dca:	bf00      	nop
   b5dcc:	20a99e74 	.word	0x20a99e74
   b5dd0:	2003e3ec 	.word	0x2003e3ec
   b5dd4:	000c1464 	.word	0x000c1464

000b5dd8 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b5dd8:	b510      	push	{r4, lr}
    if (!_instance) {
   b5dda:	4c06      	ldr	r4, [pc, #24]	; (b5df4 <_ZN17currentStatusData8instanceEv+0x1c>)
   b5ddc:	6823      	ldr	r3, [r4, #0]
   b5dde:	b93b      	cbnz	r3, b5df0 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5de0:	2070      	movs	r0, #112	; 0x70
   b5de2:	f7fe f958 	bl	b4096 <_Znwj>
   b5de6:	4603      	mov	r3, r0
   b5de8:	b108      	cbz	r0, b5dee <_ZN17currentStatusData8instanceEv+0x16>
   b5dea:	f7ff ffd7 	bl	b5d9c <_ZN17currentStatusDataC1Ev>
   b5dee:	6023      	str	r3, [r4, #0]
}
   b5df0:	6820      	ldr	r0, [r4, #0]
   b5df2:	bd10      	pop	{r4, pc}
   b5df4:	2003e3e8 	.word	0x2003e3e8

000b5df8 <_ZN17currentStatusData4loopEv>:
void currentStatusData::loop() {
   b5df8:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5dfa:	f7ff ff9d 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b5dfe:	6803      	ldr	r3, [r0, #0]
}
   b5e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5e04:	68db      	ldr	r3, [r3, #12]
   b5e06:	2100      	movs	r1, #0
   b5e08:	4718      	bx	r3
   b5e0a:	0000      	movs	r0, r0
   b5e0c:	0000      	movs	r0, r0
	...

000b5e10 <_ZNK17currentStatusData17get_stateOfChargeEv>:
double currentStatusData::get_stateOfCharge() const {
   b5e10:	b510      	push	{r4, lr}
   b5e12:	4604      	mov	r4, r0
   b5e14:	ed2d 8b02 	vpush	{d8}
   b5e18:	3004      	adds	r0, #4
   b5e1a:	f7ff feef 	bl	b5bfc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5e1e:	68e3      	ldr	r3, [r4, #12]
   b5e20:	3b08      	subs	r3, #8
   b5e22:	2b17      	cmp	r3, #23
   b5e24:	d90c      	bls.n	b5e40 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b5e26:	68a3      	ldr	r3, [r4, #8]
   b5e28:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b5e2c:	6860      	ldr	r0, [r4, #4]
   b5e2e:	f006 f811 	bl	bbe54 <os_mutex_recursive_unlock>
}
   b5e32:	eeb0 0a48 	vmov.f32	s0, s16
   b5e36:	eef0 0a68 	vmov.f32	s1, s17
   b5e3a:	ecbd 8b02 	vpop	{d8}
   b5e3e:	bd10      	pop	{r4, pc}
            T result = 0;
   b5e40:	ed9f 8b01 	vldr	d8, [pc, #4]	; b5e48 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b5e44:	e7f2      	b.n	b5e2c <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b5e46:	bf00      	nop
	...

000b5e50 <_ZN17currentStatusData17set_stateOfChargeEd>:
void currentStatusData::set_stateOfCharge(double value) {
   b5e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e52:	4604      	mov	r4, r0
   b5e54:	3004      	adds	r0, #4
   b5e56:	ec57 6b10 	vmov	r6, r7, d0
   b5e5a:	f7ff fecf 	bl	b5bfc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5e5e:	68e3      	ldr	r3, [r4, #12]
   b5e60:	3b08      	subs	r3, #8
   b5e62:	2b17      	cmp	r3, #23
   b5e64:	d912      	bls.n	b5e8c <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5e66:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b5e68:	4630      	mov	r0, r6
   b5e6a:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b5e6e:	4639      	mov	r1, r7
   b5e70:	f00a fa30 	bl	c02d4 <__aeabi_dcmpeq>
   b5e74:	b950      	cbnz	r0, b5e8c <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b5e76:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b5e7a:	4620      	mov	r0, r4
   b5e7c:	68a5      	ldr	r5, [r4, #8]
   b5e7e:	f005 fee1 	bl	bbc44 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5e82:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5e84:	6823      	ldr	r3, [r4, #0]
   b5e86:	4620      	mov	r0, r4
   b5e88:	691b      	ldr	r3, [r3, #16]
   b5e8a:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5e8c:	6860      	ldr	r0, [r4, #4]
}
   b5e8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5e92:	f005 bfdf 	b.w	bbe54 <os_mutex_recursive_unlock>
	...

000b5e98 <_ZN10nodeIDDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b5e98:	2200      	movs	r2, #0
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b5e9a:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5e9e:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ea0:	6182      	str	r2, [r0, #24]
   b5ea2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5ea6:	6081      	str	r1, [r0, #8]
   b5ea8:	61c2      	str	r2, [r0, #28]
   b5eaa:	4907      	ldr	r1, [pc, #28]	; (b5ec8 <_ZN10nodeIDDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5eac:	4a07      	ldr	r2, [pc, #28]	; (b5ecc <_ZN10nodeIDDataC1Ev+0x34>)
   b5eae:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5eb0:	f44f 6c82 	mov.w	ip, #1040	; 0x410
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5eb4:	2296      	movs	r2, #150	; 0x96
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5eb6:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5eba:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ebc:	2102      	movs	r1, #2
   b5ebe:	4a04      	ldr	r2, [pc, #16]	; (b5ed0 <_ZN10nodeIDDataC1Ev+0x38>)
   b5ec0:	8281      	strh	r1, [r0, #20]
   b5ec2:	6002      	str	r2, [r0, #0]
};
   b5ec4:	4770      	bx	lr
   b5ec6:	bf00      	nop
   b5ec8:	20a99e60 	.word	0x20a99e60
   b5ecc:	2003e3ec 	.word	0x2003e3ec
   b5ed0:	000c140c 	.word	0x000c140c

000b5ed4 <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b5ed4:	b510      	push	{r4, lr}
    if (!_instance) {
   b5ed6:	4c07      	ldr	r4, [pc, #28]	; (b5ef4 <_ZN10nodeIDData8instanceEv+0x20>)
   b5ed8:	6823      	ldr	r3, [r4, #0]
   b5eda:	b943      	cbnz	r3, b5eee <_ZN10nodeIDData8instanceEv+0x1a>
        _instance = new nodeIDData();
   b5edc:	f44f 6087 	mov.w	r0, #1080	; 0x438
   b5ee0:	f7fe f8d9 	bl	b4096 <_Znwj>
   b5ee4:	4603      	mov	r3, r0
   b5ee6:	b108      	cbz	r0, b5eec <_ZN10nodeIDData8instanceEv+0x18>
   b5ee8:	f7ff ffd6 	bl	b5e98 <_ZN10nodeIDDataC1Ev>
   b5eec:	6023      	str	r3, [r4, #0]
}
   b5eee:	6820      	ldr	r0, [r4, #0]
   b5ef0:	bd10      	pop	{r4, pc}
   b5ef2:	bf00      	nop
   b5ef4:	2003e3e0 	.word	0x2003e3e0

000b5ef8 <_ZN10nodeIDData5setupEv>:

void nodeIDData::setup() {
   b5ef8:	b510      	push	{r4, lr}
    fram.begin();
   b5efa:	6a00      	ldr	r0, [r0, #32]
   b5efc:	f003 f9c8 	bl	b9290 <_ZN6MB85RC5beginEv>
    nodeID.load();
   b5f00:	f7ff ffe8 	bl	b5ed4 <_ZN10nodeIDData8instanceEv>
   b5f04:	6803      	ldr	r3, [r0, #0]
}
   b5f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.load();
   b5f0a:	685b      	ldr	r3, [r3, #4]
   b5f0c:	4718      	bx	r3

000b5f0e <_ZN10nodeIDData4loopEv>:

void nodeIDData::loop() {
   b5f0e:	b510      	push	{r4, lr}
    nodeID.flush(false);
   b5f10:	f7ff ffe0 	bl	b5ed4 <_ZN10nodeIDData8instanceEv>
   b5f14:	6803      	ldr	r3, [r0, #0]
}
   b5f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.flush(false);
   b5f1a:	68db      	ldr	r3, [r3, #12]
   b5f1c:	2100      	movs	r1, #0
   b5f1e:	4718      	bx	r3

000b5f20 <_ZNK10nodeIDData14get_nodeIDJsonEv>:

String nodeIDData::get_nodeIDJson() const {
   b5f20:	b538      	push	{r3, r4, r5, lr}
   b5f22:	4604      	mov	r4, r0
   b5f24:	460d      	mov	r5, r1
	String result;
   b5f26:	4906      	ldr	r1, [pc, #24]	; (b5f40 <_ZNK10nodeIDData14get_nodeIDJsonEv+0x20>)
   b5f28:	f008 ff29 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), result);
   b5f2c:	4623      	mov	r3, r4
   b5f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5f32:	2110      	movs	r1, #16
   b5f34:	4628      	mov	r0, r5
   b5f36:	f005 fe2c 	bl	bbb92 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b5f3a:	4620      	mov	r0, r4
   b5f3c:	bd38      	pop	{r3, r4, r5, pc}
   b5f3e:	bf00      	nop
   b5f40:	000c2399 	.word	0x000c2399

000b5f44 <_ZN10nodeIDData14set_nodeIDJsonEPKc>:

bool nodeIDData::set_nodeIDJson(const char *str) {
   b5f44:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), str);
   b5f46:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5f4a:	2110      	movs	r1, #16
   b5f4c:	f005 be92 	b.w	bbc74 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

000b5f50 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b5f50:	b538      	push	{r3, r4, r5, lr}
   b5f52:	4604      	mov	r4, r0
   b5f54:	3004      	adds	r0, #4
   b5f56:	460d      	mov	r5, r1
   b5f58:	f7ff fe50 	bl	b5bfc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f5c:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5f5e:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f60:	3b01      	subs	r3, #1
   b5f62:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5f64:	bf26      	itte	cs
   b5f66:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5f68:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5f6a:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5f6c:	f005 ff72 	bl	bbe54 <os_mutex_recursive_unlock>
        }
   b5f70:	4628      	mov	r0, r5
   b5f72:	bd38      	pop	{r3, r4, r5, pc}

000b5f74 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b5f74:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b5f76:	2110      	movs	r1, #16
   b5f78:	f7ff ffea 	bl	b5f50 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5f7c:	bd08      	pop	{r3, pc}

000b5f7e <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b5f7e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b5f80:	2115      	movs	r1, #21
   b5f82:	f7ff ffe5 	bl	b5f50 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5f86:	bd08      	pop	{r3, pc}

000b5f88 <_ZNK13sysStatusData16get_messageCountEv>:
uint8_t sysStatusData::get_messageCount() const {
   b5f88:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, messageCount));
   b5f8a:	2116      	movs	r1, #22
   b5f8c:	f7ff ffe0 	bl	b5f50 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5f90:	bd08      	pop	{r3, pc}

000b5f92 <_ZNK13sysStatusData12get_openTimeEv>:
uint8_t sysStatusData::get_openTime() const {
   b5f92:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, openTime));
   b5f94:	2138      	movs	r1, #56	; 0x38
   b5f96:	f7ff ffdb 	bl	b5f50 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5f9a:	bd08      	pop	{r3, pc}

000b5f9c <_ZNK13sysStatusData13get_closeTimeEv>:
uint8_t sysStatusData::get_closeTime() const {
   b5f9c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, closeTime));
   b5f9e:	2139      	movs	r1, #57	; 0x39
   b5fa0:	f7ff ffd6 	bl	b5f50 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5fa4:	bd08      	pop	{r3, pc}

000b5fa6 <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const {
   b5fa6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, sensorType));
   b5fa8:	213b      	movs	r1, #59	; 0x3b
   b5faa:	f7ff ffd1 	bl	b5f50 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5fae:	bd08      	pop	{r3, pc}

000b5fb0 <_ZNK17currentStatusData14get_nodeNumberEv>:
uint8_t currentStatusData::get_nodeNumber() const {
   b5fb0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, nodeNumber));
   b5fb2:	2110      	movs	r1, #16
   b5fb4:	f7ff ffcc 	bl	b5f50 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5fb8:	bd08      	pop	{r3, pc}

000b5fba <_ZNK17currentStatusData18get_tempNodeNumberEv>:
uint8_t currentStatusData::get_tempNodeNumber() const {
   b5fba:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, tempNodeNumber));
   b5fbc:	2111      	movs	r1, #17
   b5fbe:	f7ff ffc7 	bl	b5f50 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5fc2:	bd08      	pop	{r3, pc}

000b5fc4 <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b5fc4:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b5fc6:	2112      	movs	r1, #18
   b5fc8:	f7ff ffc2 	bl	b5f50 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5fcc:	bd08      	pop	{r3, pc}

000b5fce <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b5fce:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b5fd0:	2120      	movs	r1, #32
   b5fd2:	f7ff ffbd 	bl	b5f50 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5fd6:	bd08      	pop	{r3, pc}

000b5fd8 <_ZNK17currentStatusData14get_resetCountEv>:
uint8_t currentStatusData::get_resetCount() const {
   b5fd8:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, resetCount));
   b5fda:	2121      	movs	r1, #33	; 0x21
   b5fdc:	f7ff ffb8 	bl	b5f50 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5fe0:	bd08      	pop	{r3, pc}

000b5fe2 <_ZNK17currentStatusData17get_messageNumberEv>:
uint8_t currentStatusData::get_messageNumber() const {
   b5fe2:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageNumber));
   b5fe4:	2124      	movs	r1, #36	; 0x24
   b5fe6:	f7ff ffb3 	bl	b5f50 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5fea:	bd08      	pop	{r3, pc}

000b5fec <_ZNK17currentStatusData17get_alertCodeNodeEv>:
uint8_t currentStatusData::get_alertCodeNode() const {
   b5fec:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
   b5fee:	2134      	movs	r1, #52	; 0x34
   b5ff0:	f7ff ffae 	bl	b5f50 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5ff4:	bd08      	pop	{r3, pc}

000b5ff6 <_ZNK17currentStatusData14get_sensorTypeEv>:
uint8_t currentStatusData::get_sensorType() const {
   b5ff6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, sensorType));
   b5ff8:	2141      	movs	r1, #65	; 0x41
   b5ffa:	f7ff ffa9 	bl	b5f50 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5ffe:	bd08      	pop	{r3, pc}

000b6000 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6000:	b570      	push	{r4, r5, r6, lr}
   b6002:	4604      	mov	r4, r0
   b6004:	3004      	adds	r0, #4
   b6006:	460d      	mov	r5, r1
   b6008:	4616      	mov	r6, r2
   b600a:	f7ff fdf7 	bl	b5bfc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b600e:	68e3      	ldr	r3, [r4, #12]
   b6010:	3b01      	subs	r3, #1
   b6012:	42ab      	cmp	r3, r5
   b6014:	d30d      	bcc.n	b6032 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6016:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6018:	5d5a      	ldrb	r2, [r3, r5]
   b601a:	42b2      	cmp	r2, r6
   b601c:	d009      	beq.n	b6032 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b601e:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b6020:	4620      	mov	r0, r4
   b6022:	68a5      	ldr	r5, [r4, #8]
   b6024:	f005 fe0e 	bl	bbc44 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6028:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b602a:	6823      	ldr	r3, [r4, #0]
   b602c:	4620      	mov	r0, r4
   b602e:	691b      	ldr	r3, [r3, #16]
   b6030:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b6032:	6860      	ldr	r0, [r4, #4]
        }
   b6034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6038:	f005 bf0c 	b.w	bbe54 <os_mutex_recursive_unlock>

000b603c <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b603c:	b508      	push	{r3, lr}
   b603e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b6040:	2110      	movs	r1, #16
   b6042:	f7ff ffdd 	bl	b6000 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6046:	bd08      	pop	{r3, pc}

000b6048 <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b6048:	b508      	push	{r3, lr}
   b604a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b604c:	2115      	movs	r1, #21
   b604e:	f7ff ffd7 	bl	b6000 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6052:	bd08      	pop	{r3, pc}

000b6054 <_ZN13sysStatusData16set_messageCountEh>:
void sysStatusData::set_messageCount(uint8_t value) {
   b6054:	b508      	push	{r3, lr}
   b6056:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, messageCount), value);
   b6058:	2116      	movs	r1, #22
   b605a:	f7ff ffd1 	bl	b6000 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b605e:	bd08      	pop	{r3, pc}

000b6060 <_ZN13sysStatusData12set_openTimeEh>:
void sysStatusData::set_openTime(uint8_t value) {
   b6060:	b508      	push	{r3, lr}
   b6062:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, openTime), value);
   b6064:	2138      	movs	r1, #56	; 0x38
   b6066:	f7ff ffcb 	bl	b6000 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b606a:	bd08      	pop	{r3, pc}

000b606c <_ZN13sysStatusData13set_closeTimeEh>:
void sysStatusData::set_closeTime(uint8_t value) {
   b606c:	b508      	push	{r3, lr}
   b606e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, closeTime), value);
   b6070:	2139      	movs	r1, #57	; 0x39
   b6072:	f7ff ffc5 	bl	b6000 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6076:	bd08      	pop	{r3, pc}

000b6078 <_ZN17currentStatusData14set_nodeNumberEh>:
void currentStatusData::set_nodeNumber(uint8_t value) {
   b6078:	b508      	push	{r3, lr}
   b607a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, nodeNumber), value);
   b607c:	2110      	movs	r1, #16
   b607e:	f7ff ffbf 	bl	b6000 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6082:	bd08      	pop	{r3, pc}

000b6084 <_ZN17currentStatusData18set_tempNodeNumberEh>:
void currentStatusData::set_tempNodeNumber(uint8_t value) {
   b6084:	b508      	push	{r3, lr}
   b6086:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, tempNodeNumber), value);
   b6088:	2111      	movs	r1, #17
   b608a:	f7ff ffb9 	bl	b6000 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b608e:	bd08      	pop	{r3, pc}

000b6090 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b6090:	b508      	push	{r3, lr}
   b6092:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b6094:	2112      	movs	r1, #18
   b6096:	f7ff ffb3 	bl	b6000 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b609a:	bd08      	pop	{r3, pc}

000b609c <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b609c:	b508      	push	{r3, lr}
   b609e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b60a0:	2120      	movs	r1, #32
   b60a2:	f7ff ffad 	bl	b6000 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b60a6:	bd08      	pop	{r3, pc}

000b60a8 <_ZN17currentStatusData14set_resetCountEh>:
void currentStatusData::set_resetCount(uint8_t value) {
   b60a8:	b508      	push	{r3, lr}
   b60aa:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, resetCount), value);
   b60ac:	2121      	movs	r1, #33	; 0x21
   b60ae:	f7ff ffa7 	bl	b6000 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b60b2:	bd08      	pop	{r3, pc}

000b60b4 <_ZN17currentStatusData17set_messageNumberEh>:
void currentStatusData::set_messageNumber(uint8_t value) {
   b60b4:	b508      	push	{r3, lr}
   b60b6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageNumber), value);
   b60b8:	2124      	movs	r1, #36	; 0x24
   b60ba:	f7ff ffa1 	bl	b6000 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b60be:	bd08      	pop	{r3, pc}

000b60c0 <_ZN17currentStatusData17set_alertCodeNodeEh>:
void currentStatusData::set_alertCodeNode(uint8_t value) {
   b60c0:	b508      	push	{r3, lr}
   b60c2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b60c4:	2134      	movs	r1, #52	; 0x34
   b60c6:	f7ff ff9b 	bl	b6000 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b60ca:	bd08      	pop	{r3, pc}

000b60cc <_ZN17currentStatusData14set_sensorTypeEh>:
void currentStatusData::set_sensorType(uint8_t value) {
   b60cc:	b508      	push	{r3, lr}
   b60ce:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, sensorType), value);
   b60d0:	2141      	movs	r1, #65	; 0x41
   b60d2:	f7ff ff95 	bl	b6000 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b60d6:	bd08      	pop	{r3, pc}

000b60d8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b60d8:	b538      	push	{r3, r4, r5, lr}
   b60da:	4604      	mov	r4, r0
   b60dc:	3004      	adds	r0, #4
   b60de:	460d      	mov	r5, r1
   b60e0:	f7ff fd8c 	bl	b5bfc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b60e4:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b60e6:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b60e8:	3b02      	subs	r3, #2
   b60ea:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b60ec:	bf26      	itte	cs
   b60ee:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b60f0:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b60f2:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b60f4:	f005 feae 	bl	bbe54 <os_mutex_recursive_unlock>
        }
   b60f8:	4628      	mov	r0, r5
   b60fa:	bd38      	pop	{r3, r4, r5, pc}

000b60fc <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b60fc:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b60fe:	2112      	movs	r1, #18
   b6100:	f7ff ffea 	bl	b60d8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6104:	bd08      	pop	{r3, pc}

000b6106 <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b6106:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b6108:	212a      	movs	r1, #42	; 0x2a
   b610a:	f7ff ffe5 	bl	b60d8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b610e:	bd08      	pop	{r3, pc}

000b6110 <_ZNK13sysStatusData8get_RSSIEv>:
uint16_t sysStatusData::get_RSSI() const {
   b6110:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,RSSI));
   b6112:	213c      	movs	r1, #60	; 0x3c
   b6114:	f7ff ffe0 	bl	b60d8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6118:	bd08      	pop	{r3, pc}

000b611a <_ZNK17currentStatusData8get_RSSIEv>:
uint16_t currentStatusData::get_RSSI() const {
   b611a:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, RSSI));
   b611c:	2122      	movs	r1, #34	; 0x22
   b611e:	f7ff ffdb 	bl	b60d8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6122:	bd08      	pop	{r3, pc}

000b6124 <_ZNK17currentStatusData15get_hourlyCountEv>:
uint16_t currentStatusData::get_hourlyCount() const {
   b6124:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b6126:	2130      	movs	r1, #48	; 0x30
   b6128:	f7ff ffd6 	bl	b60d8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b612c:	bd08      	pop	{r3, pc}

000b612e <_ZNK17currentStatusData14get_dailyCountEv>:
uint16_t currentStatusData::get_dailyCount() const {
   b612e:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b6130:	2132      	movs	r1, #50	; 0x32
   b6132:	f7ff ffd1 	bl	b60d8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6136:	bd08      	pop	{r3, pc}

000b6138 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6138:	b570      	push	{r4, r5, r6, lr}
   b613a:	4604      	mov	r4, r0
   b613c:	3004      	adds	r0, #4
   b613e:	460d      	mov	r5, r1
   b6140:	4616      	mov	r6, r2
   b6142:	f7ff fd5b 	bl	b5bfc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6146:	68e3      	ldr	r3, [r4, #12]
   b6148:	3b02      	subs	r3, #2
   b614a:	42ab      	cmp	r3, r5
   b614c:	d30d      	bcc.n	b616a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b614e:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6150:	5b5a      	ldrh	r2, [r3, r5]
   b6152:	42b2      	cmp	r2, r6
   b6154:	d009      	beq.n	b616a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b6156:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b6158:	4620      	mov	r0, r4
   b615a:	68a5      	ldr	r5, [r4, #8]
   b615c:	f005 fd72 	bl	bbc44 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6160:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b6162:	6823      	ldr	r3, [r4, #0]
   b6164:	4620      	mov	r0, r4
   b6166:	691b      	ldr	r3, [r3, #16]
   b6168:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b616a:	6860      	ldr	r0, [r4, #4]
        }
   b616c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6170:	f005 be70 	b.w	bbe54 <os_mutex_recursive_unlock>

000b6174 <_ZN13sysStatusData26set_lastConnectionDurationEt>:
void sysStatusData::set_lastConnectionDuration(uint16_t value) {
   b6174:	b508      	push	{r3, lr}
   b6176:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData,lastConnectionDuration), value);
   b6178:	2128      	movs	r1, #40	; 0x28
   b617a:	f7ff ffdd 	bl	b6138 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b617e:	bd08      	pop	{r3, pc}

000b6180 <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b6180:	b508      	push	{r3, lr}
   b6182:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b6184:	212a      	movs	r1, #42	; 0x2a
   b6186:	f7ff ffd7 	bl	b6138 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b618a:	bd08      	pop	{r3, pc}

000b618c <_ZN13sysStatusData8set_RSSIEt>:
void sysStatusData::set_RSSI(uint16_t value) {
   b618c:	b508      	push	{r3, lr}
   b618e:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, RSSI), value);
   b6190:	213c      	movs	r1, #60	; 0x3c
   b6192:	f7ff ffd1 	bl	b6138 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6196:	bd08      	pop	{r3, pc}

000b6198 <_ZN17currentStatusData8set_RSSIEt>:
void currentStatusData::set_RSSI(uint16_t value) {
   b6198:	b508      	push	{r3, lr}
   b619a:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, RSSI), value);
   b619c:	2122      	movs	r1, #34	; 0x22
   b619e:	f7ff ffcb 	bl	b6138 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b61a2:	bd08      	pop	{r3, pc}

000b61a4 <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b61a4:	b508      	push	{r3, lr}
   b61a6:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b61a8:	2130      	movs	r1, #48	; 0x30
   b61aa:	f7ff ffc5 	bl	b6138 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b61ae:	bd08      	pop	{r3, pc}

000b61b0 <_ZN17currentStatusData14set_dailyCountEt>:
void currentStatusData::set_dailyCount(uint16_t value) {
   b61b0:	b508      	push	{r3, lr}
   b61b2:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b61b4:	2132      	movs	r1, #50	; 0x32
   b61b6:	f7ff ffbf 	bl	b6138 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b61ba:	bd08      	pop	{r3, pc}

000b61bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b61bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b61be:	4604      	mov	r4, r0
   b61c0:	3004      	adds	r0, #4
   b61c2:	460d      	mov	r5, r1
   b61c4:	f7ff fd1a 	bl	b5bfc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b61c8:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b61ca:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b61cc:	3b08      	subs	r3, #8
   b61ce:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b61d0:	bf23      	ittte	cs
   b61d2:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b61d4:	1949      	addcs	r1, r1, r5
   b61d6:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b61da:	2600      	movcc	r6, #0
   b61dc:	bf38      	it	cc
   b61de:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b61e0:	f005 fe38 	bl	bbe54 <os_mutex_recursive_unlock>
        }
   b61e4:	4630      	mov	r0, r6
   b61e6:	4639      	mov	r1, r7
   b61e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b61ea <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b61ea:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b61ec:	2120      	movs	r1, #32
   b61ee:	f7ff ffe5 	bl	b61bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b61f2:	bd08      	pop	{r3, pc}

000b61f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b61f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b61f6:	4604      	mov	r4, r0
   b61f8:	3004      	adds	r0, #4
   b61fa:	460d      	mov	r5, r1
   b61fc:	461e      	mov	r6, r3
   b61fe:	4617      	mov	r7, r2
   b6200:	f7ff fcfc 	bl	b5bfc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6204:	68e3      	ldr	r3, [r4, #12]
   b6206:	3b08      	subs	r3, #8
   b6208:	42ab      	cmp	r3, r5
   b620a:	d312      	bcc.n	b6232 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b620c:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b620e:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b6210:	5958      	ldr	r0, [r3, r5]
   b6212:	6851      	ldr	r1, [r2, #4]
   b6214:	42b1      	cmp	r1, r6
   b6216:	bf08      	it	eq
   b6218:	42b8      	cmpeq	r0, r7
   b621a:	d00a      	beq.n	b6232 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b621c:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b621e:	4620      	mov	r0, r4
                        *(T *)p = value;
   b6220:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b6222:	68a5      	ldr	r5, [r4, #8]
   b6224:	f005 fd0e 	bl	bbc44 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6228:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b622a:	6823      	ldr	r3, [r4, #0]
   b622c:	4620      	mov	r0, r4
   b622e:	691b      	ldr	r3, [r3, #16]
   b6230:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b6232:	6860      	ldr	r0, [r4, #4]
        }
   b6234:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b6238:	f005 be0c 	b.w	bbe54 <os_mutex_recursive_unlock>

000b623c <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b623c:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b623e:	2120      	movs	r1, #32
   b6240:	f7ff ffd8 	bl	b61f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6244:	bd08      	pop	{r3, pc}

000b6246 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b6246:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b6248:	2128      	movs	r1, #40	; 0x28
   b624a:	f7ff ffd3 	bl	b61f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b624e:	bd08      	pop	{r3, pc}

000b6250 <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   b6250:	b510      	push	{r4, lr}
  Log.info("A new day - resetting everything");
   b6252:	4912      	ldr	r1, [pc, #72]	; (b629c <_Z15resetEverythingv+0x4c>)
   b6254:	4812      	ldr	r0, [pc, #72]	; (b62a0 <_Z15resetEverythingv+0x50>)
   b6256:	f7fd ff72 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b625a:	f7ff fdbd 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b625e:	2100      	movs	r1, #0
   b6260:	f7ff ffa6 	bl	b61b0 <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b6264:	f7ff fdb8 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b6268:	2100      	movs	r1, #0
   b626a:	f7ff ff9b 	bl	b61a4 <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b626e:	f7ff fdb3 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b6272:	4604      	mov	r4, r0
   b6274:	f009 f8eb 	bl	bf44e <_ZN9TimeClass3nowEv>
   b6278:	4602      	mov	r2, r0
   b627a:	17c3      	asrs	r3, r0, #31
   b627c:	4620      	mov	r0, r4
   b627e:	f7ff ffe2 	bl	b6246 <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b6282:	f7ff fd59 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b6286:	2100      	movs	r1, #0
   b6288:	f7ff fede 	bl	b6048 <_ZN13sysStatusData14set_resetCountEh>
  sysStatus.set_messageCount(0);
   b628c:	f7ff fd54 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
}
   b6290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_messageCount(0);
   b6294:	2100      	movs	r1, #0
   b6296:	f7ff bedd 	b.w	b6054 <_ZN13sysStatusData16set_messageCountEh>
   b629a:	bf00      	nop
   b629c:	000c13c7 	.word	0x000c13c7
   b62a0:	2003e658 	.word	0x2003e658

000b62a4 <_ZN17currentStatusData22set_alertTimestampNodeEx>:
void currentStatusData::set_alertTimestampNode(time_t value) {
   b62a4:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b62a6:	2138      	movs	r1, #56	; 0x38
   b62a8:	f7ff ffa4 	bl	b61f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b62ac:	bd08      	pop	{r3, pc}

000b62ae <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b62ae:	b538      	push	{r3, r4, r5, lr}
   b62b0:	4604      	mov	r4, r0
   b62b2:	3004      	adds	r0, #4
   b62b4:	460d      	mov	r5, r1
   b62b6:	f7ff fca1 	bl	b5bfc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b62ba:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b62bc:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b62be:	3b01      	subs	r3, #1
   b62c0:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b62c2:	bf26      	itte	cs
   b62c4:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b62c6:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b62c8:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b62ca:	f005 fdc3 	bl	bbe54 <os_mutex_recursive_unlock>
        }
   b62ce:	4628      	mov	r0, r5
   b62d0:	bd38      	pop	{r3, r4, r5, pc}

000b62d2 <_ZNK13sysStatusData14get_verizonSIMEv>:
bool sysStatusData::get_verizonSIM() const {
   b62d2:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, verizonSIM));
   b62d4:	213a      	movs	r1, #58	; 0x3a
   b62d6:	f7ff ffea 	bl	b62ae <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b62da:	bd08      	pop	{r3, pc}

000b62dc <_ZNK17currentStatusData13get_openHoursEv>:
bool currentStatusData::get_openHours() const {
   b62dc:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(CurrentData, openHours));
   b62de:	2140      	movs	r1, #64	; 0x40
   b62e0:	f7ff ffe5 	bl	b62ae <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b62e4:	bd08      	pop	{r3, pc}

000b62e6 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b62e6:	b570      	push	{r4, r5, r6, lr}
   b62e8:	4604      	mov	r4, r0
   b62ea:	3004      	adds	r0, #4
   b62ec:	460d      	mov	r5, r1
   b62ee:	4616      	mov	r6, r2
   b62f0:	f7ff fc84 	bl	b5bfc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b62f4:	68e3      	ldr	r3, [r4, #12]
   b62f6:	3b01      	subs	r3, #1
   b62f8:	42ab      	cmp	r3, r5
   b62fa:	d30d      	bcc.n	b6318 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b62fc:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b62fe:	5d5a      	ldrb	r2, [r3, r5]
   b6300:	42b2      	cmp	r2, r6
   b6302:	d009      	beq.n	b6318 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                        *(T *)p = value;
   b6304:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b6306:	4620      	mov	r0, r4
   b6308:	68a5      	ldr	r5, [r4, #8]
   b630a:	f005 fc9b 	bl	bbc44 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b630e:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b6310:	6823      	ldr	r3, [r4, #0]
   b6312:	4620      	mov	r0, r4
   b6314:	691b      	ldr	r3, [r3, #16]
   b6316:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b6318:	6860      	ldr	r0, [r4, #4]
        }
   b631a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b631e:	f005 bd99 	b.w	bbe54 <os_mutex_recursive_unlock>

000b6322 <_ZN13sysStatusData14set_verizonSIMEb>:
void sysStatusData::set_verizonSIM(bool value) {
   b6322:	b508      	push	{r3, lr}
   b6324:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, verizonSIM), value);
   b6326:	213a      	movs	r1, #58	; 0x3a
   b6328:	f7ff ffdd 	bl	b62e6 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b632c:	bd08      	pop	{r3, pc}

000b632e <_ZN17currentStatusData13set_openHoursEb>:
void currentStatusData::set_openHours(bool value) {
   b632e:	b508      	push	{r3, lr}
   b6330:	460a      	mov	r2, r1
    setValue<bool>(offsetof(CurrentData, openHours), value);
   b6332:	2140      	movs	r1, #64	; 0x40
   b6334:	f7ff ffd7 	bl	b62e6 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b6338:	bd08      	pop	{r3, pc}
	...

000b633c <_GLOBAL__sub_I_fram>:
   b633c:	4b08      	ldr	r3, [pc, #32]	; (b6360 <_GLOBAL__sub_I_fram+0x24>)
   b633e:	2201      	movs	r2, #1
}
   b6340:	b510      	push	{r4, lr}
   b6342:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);   
   b6344:	f009 fb0c 	bl	bf960 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b6348:	4c06      	ldr	r4, [pc, #24]	; (b6364 <_GLOBAL__sub_I_fram+0x28>)
   b634a:	4601      	mov	r1, r0
   b634c:	2300      	movs	r3, #0
   b634e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b6352:	4620      	mov	r0, r4
   b6354:	f002 ff92 	bl	b927c <_ZN6MB85RCC1ER7TwoWireji>
   b6358:	4b03      	ldr	r3, [pc, #12]	; (b6368 <_GLOBAL__sub_I_fram+0x2c>)
   b635a:	6023      	str	r3, [r4, #0]
}
   b635c:	bd10      	pop	{r4, pc}
   b635e:	bf00      	nop
   b6360:	2003e3dd 	.word	0x2003e3dd
   b6364:	2003e3ec 	.word	0x2003e3ec
   b6368:	000c13f0 	.word	0x000c13f0

000b636c <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b636c:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b636e:	4913      	ldr	r1, [pc, #76]	; (b63bc <_Z18initializePinModesv+0x50>)
   b6370:	4813      	ldr	r0, [pc, #76]	; (b63c0 <_Z18initializePinModesv+0x54>)
   b6372:	f7fd fee4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b6376:	2102      	movs	r1, #2
   b6378:	2004      	movs	r0, #4
   b637a:	f009 fa67 	bl	bf84c <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b637e:	2100      	movs	r1, #0
   b6380:	2008      	movs	r0, #8
   b6382:	f009 fa63 	bl	bf84c <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b6386:	2101      	movs	r1, #1
   b6388:	2007      	movs	r0, #7
   b638a:	f009 fa5f 	bl	bf84c <pinMode>
    pinMode(INT_PIN, INPUT);
   b638e:	2100      	movs	r1, #0
   b6390:	2012      	movs	r0, #18
   b6392:	f009 fa5b 	bl	bf84c <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b6396:	2101      	movs	r1, #1
   b6398:	2011      	movs	r0, #17
   b639a:	f009 fa57 	bl	bf84c <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b639e:	2101      	movs	r1, #1
   b63a0:	2010      	movs	r0, #16
   b63a2:	f009 fa53 	bl	bf84c <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b63a6:	2100      	movs	r1, #0
   b63a8:	2010      	movs	r0, #16
   b63aa:	f009 fa60 	bl	bf86e <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b63ae:	2100      	movs	r1, #0
   b63b0:	2011      	movs	r0, #17
   b63b2:	f009 fa5c 	bl	bf86e <digitalWrite>
    return true;
}
   b63b6:	2001      	movs	r0, #1
   b63b8:	bd08      	pop	{r3, pc}
   b63ba:	bf00      	nop
   b63bc:	000c1488 	.word	0x000c1488
   b63c0:	2003e658 	.word	0x2003e658

000b63c4 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b63c4:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b63c6:	4918      	ldr	r1, [pc, #96]	; (b6428 <_Z18initializePowerCfgv+0x64>)
   b63c8:	4818      	ldr	r0, [pc, #96]	; (b642c <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b63ca:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b63cc:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b63ce:	f7fd feb6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b63d2:	4622      	mov	r2, r4
   b63d4:	2100      	movs	r1, #0
   b63d6:	4668      	mov	r0, sp
   b63d8:	f00a f886 	bl	c04e8 <memset>
   b63dc:	4622      	mov	r2, r4
   b63de:	2100      	movs	r1, #0
   b63e0:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b63e4:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b63e8:	f00a f87e 	bl	c04e8 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b63ec:	2100      	movs	r1, #0
   b63ee:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b63f2:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b63f6:	f006 f81b 	bl	bc430 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b63fa:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b63fe:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b6402:	4b0b      	ldr	r3, [pc, #44]	; (b6430 <_Z18initializePowerCfgv+0x6c>)
   b6404:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b6406:	f241 0370 	movw	r3, #4208	; 0x1070
   b640a:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b640e:	9b00      	ldr	r3, [sp, #0]
   b6410:	2100      	movs	r1, #0
   b6412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b6416:	4668      	mov	r0, sp
   b6418:	9300      	str	r3, [sp, #0]
   b641a:	f006 f809 	bl	bc430 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b641e:	3800      	subs	r0, #0
   b6420:	bf18      	it	ne
   b6422:	2001      	movne	r0, #1
   b6424:	b010      	add	sp, #64	; 0x40
   b6426:	bd10      	pop	{r4, pc}
   b6428:	000c14a1 	.word	0x000c14a1
   b642c:	2003e658 	.word	0x2003e658
   b6430:	03840384 	.word	0x03840384

000b6434 <_Z23setGatewayConfigurationv>:
 */

#include "Particle.h"
#include "MyPersistentData.h"

void setGatewayConfiguration() {
   b6434:	b508      	push	{r3, lr}
  Log.info("Setting values for the Gateway");
   b6436:	4905      	ldr	r1, [pc, #20]	; (b644c <_Z23setGatewayConfigurationv+0x18>)
   b6438:	4805      	ldr	r0, [pc, #20]	; (b6450 <_Z23setGatewayConfigurationv+0x1c>)
   b643a:	f7fd fe80 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_frequencyMinutes(10);
   b643e:	f7ff fc7b 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b6442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_frequencyMinutes(10);
   b6446:	210a      	movs	r1, #10
   b6448:	f7ff be9a 	b.w	b6180 <_ZN13sysStatusData20set_frequencyMinutesEt>
   b644c:	000c14c6 	.word	0x000c14c6
   b6450:	2003e658 	.word	0x2003e658

000b6454 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b6454:	4770      	bx	lr

000b6456 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b6456:	6a00      	ldr	r0, [r0, #32]
   b6458:	6803      	ldr	r3, [r0, #0]
   b645a:	68db      	ldr	r3, [r3, #12]
   b645c:	4718      	bx	r3
	...

000b6460 <_Z15reportFrequencyv>:
/**
 * @brief Particle cacluated variable
 * 
 * @return String with the number of minutes for reporting frequency
 */
String reportFrequency() {							// Calculated variavble for the report frequency which is an unint16_t and does nto display properly.
   b6460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6462:	4604      	mov	r4, r0
    char reportStr[16];
    snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.get_frequencyMinutes());
   b6464:	f7ff fc68 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b6468:	f7ff fe4d 	bl	b6106 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b646c:	4a06      	ldr	r2, [pc, #24]	; (b6488 <_Z15reportFrequencyv+0x28>)
   b646e:	4603      	mov	r3, r0
   b6470:	2110      	movs	r1, #16
   b6472:	4668      	mov	r0, sp
   b6474:	f006 f8ea 	bl	bc64c <snprintf>
    return reportStr;
   b6478:	4669      	mov	r1, sp
   b647a:	4620      	mov	r0, r4
   b647c:	f008 fc7f 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
}
   b6480:	4620      	mov	r0, r4
   b6482:	b004      	add	sp, #16
   b6484:	bd10      	pop	{r4, pc}
   b6486:	bf00      	nop
   b6488:	000c14e5 	.word	0x000c14e5

000b648c <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   b648c:	b530      	push	{r4, r5, lr}
   b648e:	b085      	sub	sp, #20
   b6490:	4603      	mov	r3, r0
   b6492:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   b6494:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   b6496:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   b6498:	4798      	blx	r3
	inline unsigned int length(void) const {return len;}
   b649a:	9802      	ldr	r0, [sp, #8]
        size = str.length();
   b649c:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   b649e:	f006 f8ad 	bl	bc5fc <malloc>
   b64a2:	6028      	str	r0, [r5, #0]
        if (!data) {
   b64a4:	b150      	cbz	r0, b64bc <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   b64a6:	6822      	ldr	r2, [r4, #0]
   b64a8:	9900      	ldr	r1, [sp, #0]
   b64aa:	f009 fff5 	bl	c0498 <memcpy>
        return 0;
   b64ae:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   b64b0:	4668      	mov	r0, sp
   b64b2:	f008 fc19 	bl	bece8 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   b64b6:	4620      	mov	r0, r4
   b64b8:	b005      	add	sp, #20
   b64ba:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   b64bc:	4c00      	ldr	r4, [pc, #0]	; (b64c0 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   b64be:	e7f7      	b.n	b64b0 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   b64c0:	fffffefc 	.word	0xfffffefc

000b64c4 <_ZN10CloudClass9_variableEPKcS1_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b64c4:	2300      	movs	r3, #0
   b64c6:	2204      	movs	r2, #4
   b64c8:	f005 bfd0 	b.w	bc46c <spark_variable>

000b64cc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b64cc:	4b0a      	ldr	r3, [pc, #40]	; (b64f8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b64ce:	b510      	push	{r4, lr}
   b64d0:	4604      	mov	r4, r0
   b64d2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b64d4:	f007 fa7c 	bl	bd9d0 <_ZN5spark10LogManager8instanceEv>
   b64d8:	4621      	mov	r1, r4
   b64da:	f007 fc80 	bl	bddde <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b64de:	f009 f89d 	bl	bf61c <_Z16_fetch_usbserialv>
   b64e2:	f009 f88d 	bl	bf600 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b64e6:	4620      	mov	r0, r4
   b64e8:	4b04      	ldr	r3, [pc, #16]	; (b64fc <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b64ea:	f840 3b04 	str.w	r3, [r0], #4
   b64ee:	f007 fb11 	bl	bdb14 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b64f2:	4620      	mov	r0, r4
   b64f4:	bd10      	pop	{r4, pc}
   b64f6:	bf00      	nop
   b64f8:	000c176c 	.word	0x000c176c
   b64fc:	000c1754 	.word	0x000c1754

000b6500 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b6500:	b510      	push	{r4, lr}
   b6502:	4604      	mov	r4, r0
    }
   b6504:	f7ff ffe2 	bl	b64cc <_ZN5spark16SerialLogHandlerD1Ev>
   b6508:	4620      	mov	r0, r4
   b650a:	2124      	movs	r1, #36	; 0x24
   b650c:	f7fd fdc7 	bl	b409e <_ZdlPvj>
   b6510:	4620      	mov	r0, r4
   b6512:	bd10      	pop	{r4, pc}

000b6514 <_ZN10CloudClass9keepAliveEj>:
    inline static void keepAlive(unsigned sec)
   b6514:	b507      	push	{r0, r1, r2, lr}
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   b6516:	2301      	movs	r3, #1
   b6518:	2208      	movs	r2, #8
   b651a:	e9cd 2300 	strd	r2, r3, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   b651e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6522:	2300      	movs	r3, #0
   b6524:	4341      	muls	r1, r0
   b6526:	466a      	mov	r2, sp
   b6528:	4618      	mov	r0, r3
   b652a:	f005 ffef 	bl	bc50c <spark_set_connection_property>
    }
   b652e:	b003      	add	sp, #12
   b6530:	f85d fb04 	ldr.w	pc, [sp], #4

000b6534 <_Z20makeUpStringMessagesv>:
  * @details Looks at all the system setting values and creates the appropriate strings.  Note that this 
  * is a little inefficient but it cleans up a fair bit of code.
  * 
  */

void makeUpStringMessages() {
   b6534:	b510      	push	{r4, lr}

  if (sysStatus.get_openTime() == 0 && sysStatus.get_closeTime() == 24) {                         // Special case for 24 hour operations
   b6536:	f7ff fbff 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b653a:	f7ff fd2a 	bl	b5f92 <_ZNK13sysStatusData12get_openTimeEv>
   b653e:	b978      	cbnz	r0, b6560 <_Z20makeUpStringMessagesv+0x2c>
   b6540:	f7ff fbfa 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b6544:	f7ff fd2a 	bl	b5f9c <_ZNK13sysStatusData13get_closeTimeEv>
   b6548:	2818      	cmp	r0, #24
   b654a:	d109      	bne.n	b6560 <_Z20makeUpStringMessagesv+0x2c>
    snprintf(openTimeStr, sizeof(openTimeStr), "NA");
   b654c:	490f      	ldr	r1, [pc, #60]	; (b658c <_Z20makeUpStringMessagesv+0x58>)
   b654e:	4810      	ldr	r0, [pc, #64]	; (b6590 <_Z20makeUpStringMessagesv+0x5c>)
   b6550:	f00a f85f 	bl	c0612 <strcpy>
    snprintf(openTimeStr, sizeof(openTimeStr), "%i:00", sysStatus.get_openTime());           // Open and Close Times
    snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.get_closeTime());
  }

  return;
}
   b6554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    snprintf(closeTimeStr, sizeof(closeTimeStr), "NA");
   b6558:	490c      	ldr	r1, [pc, #48]	; (b658c <_Z20makeUpStringMessagesv+0x58>)
   b655a:	480e      	ldr	r0, [pc, #56]	; (b6594 <_Z20makeUpStringMessagesv+0x60>)
   b655c:	f00a b859 	b.w	c0612 <strcpy>
    snprintf(openTimeStr, sizeof(openTimeStr), "%i:00", sysStatus.get_openTime());           // Open and Close Times
   b6560:	f7ff fbea 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b6564:	f7ff fd15 	bl	b5f92 <_ZNK13sysStatusData12get_openTimeEv>
   b6568:	4a0b      	ldr	r2, [pc, #44]	; (b6598 <_Z20makeUpStringMessagesv+0x64>)
   b656a:	4603      	mov	r3, r0
   b656c:	2108      	movs	r1, #8
   b656e:	4808      	ldr	r0, [pc, #32]	; (b6590 <_Z20makeUpStringMessagesv+0x5c>)
   b6570:	f006 f86c 	bl	bc64c <snprintf>
    snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.get_closeTime());
   b6574:	f7ff fbe0 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b6578:	f7ff fd10 	bl	b5f9c <_ZNK13sysStatusData13get_closeTimeEv>
}
   b657c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.get_closeTime());
   b6580:	4603      	mov	r3, r0
   b6582:	4a05      	ldr	r2, [pc, #20]	; (b6598 <_Z20makeUpStringMessagesv+0x64>)
   b6584:	4803      	ldr	r0, [pc, #12]	; (b6594 <_Z20makeUpStringMessagesv+0x60>)
   b6586:	2108      	movs	r1, #8
   b6588:	f006 b860 	b.w	bc64c <snprintf>
   b658c:	000c14f0 	.word	0x000c14f0
   b6590:	2003d6f0 	.word	0x2003d6f0
   b6594:	2003d6e8 	.word	0x2003d6e8
   b6598:	000c14f3 	.word	0x000c14f3

000b659c <_Z18particleInitializev>:
void particleInitialize() {
   b659c:	b510      	push	{r4, lr}
   b659e:	b08c      	sub	sp, #48	; 0x30
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b65a0:	4b37      	ldr	r3, [pc, #220]	; (b6680 <_Z18particleInitializev+0xe4>)
   b65a2:	9304      	str	r3, [sp, #16]
   b65a4:	4b37      	ldr	r3, [pc, #220]	; (b6684 <_Z18particleInitializev+0xe8>)
   b65a6:	9305      	str	r3, [sp, #20]
   b65a8:	4b37      	ldr	r3, [pc, #220]	; (b6688 <_Z18particleInitializev+0xec>)
   b65aa:	9306      	str	r3, [sp, #24]
   b65ac:	4b37      	ldr	r3, [pc, #220]	; (b668c <_Z18particleInitializev+0xf0>)
   b65ae:	9307      	str	r3, [sp, #28]
   b65b0:	4b37      	ldr	r3, [pc, #220]	; (b6690 <_Z18particleInitializev+0xf4>)
   b65b2:	9308      	str	r3, [sp, #32]
   b65b4:	4b37      	ldr	r3, [pc, #220]	; (b6694 <_Z18particleInitializev+0xf8>)
   b65b6:	9309      	str	r3, [sp, #36]	; 0x24
   b65b8:	2400      	movs	r4, #0
   b65ba:	4b37      	ldr	r3, [pc, #220]	; (b6698 <_Z18particleInitializev+0xfc>)
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b65bc:	4937      	ldr	r1, [pc, #220]	; (b669c <_Z18particleInitializev+0x100>)
   b65be:	4838      	ldr	r0, [pc, #224]	; (b66a0 <_Z18particleInitializev+0x104>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b65c0:	930a      	str	r3, [sp, #40]	; 0x28
   b65c2:	940b      	str	r4, [sp, #44]	; 0x2c
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b65c4:	f7fd fdbb 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        return _variable(name, std::forward<ArgsT>(args)...);
   b65c8:	4936      	ldr	r1, [pc, #216]	; (b66a4 <_Z18particleInitializev+0x108>)
   b65ca:	4837      	ldr	r0, [pc, #220]	; (b66a8 <_Z18particleInitializev+0x10c>)
   b65cc:	f7ff ff7a 	bl	b64c4 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b65d0:	4936      	ldr	r1, [pc, #216]	; (b66ac <_Z18particleInitializev+0x110>)
   b65d2:	4837      	ldr	r0, [pc, #220]	; (b66b0 <_Z18particleInitializev+0x114>)
   b65d4:	f7ff ff76 	bl	b64c4 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
  Particle.variable("stateOfChg", current.get_stateOfCharge());
   b65d8:	f7ff fbfe 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b65dc:	f7ff fc18 	bl	b5e10 <_ZNK17currentStatusData17get_stateOfChargeEv>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b65e0:	4623      	mov	r3, r4
   b65e2:	2209      	movs	r2, #9
   b65e4:	4669      	mov	r1, sp
   b65e6:	4833      	ldr	r0, [pc, #204]	; (b66b4 <_Z18particleInitializev+0x118>)
   b65e8:	ed8d 0b00 	vstr	d0, [sp]
   b65ec:	f005 ff3e 	bl	bc46c <spark_variable>
  Particle.variable("BatteryContext",batteryContext[current.get_batteryState()]);
   b65f0:	f7ff fbf2 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b65f4:	f7ff fceb 	bl	b5fce <_ZNK17currentStatusData16get_batteryStateEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b65f8:	ab0c      	add	r3, sp, #48	; 0x30
   b65fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b65fe:	f850 1c20 	ldr.w	r1, [r0, #-32]
   b6602:	482d      	ldr	r0, [pc, #180]	; (b66b8 <_Z18particleInitializev+0x11c>)
   b6604:	f7ff ff5e 	bl	b64c4 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        extra.size = sizeof(extra);
   b6608:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   b660a:	e9cd 4400 	strd	r4, r4, [sp]
        extra.size = sizeof(extra);
   b660e:	f8ad 3000 	strh.w	r3, [sp]
        extra.copy = [](const void* var, void** data, size_t* size) {
   b6612:	4b2a      	ldr	r3, [pc, #168]	; (b66bc <_Z18particleInitializev+0x120>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b6614:	492a      	ldr	r1, [pc, #168]	; (b66c0 <_Z18particleInitializev+0x124>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   b6616:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b6618:	2204      	movs	r2, #4
   b661a:	466b      	mov	r3, sp
   b661c:	4829      	ldr	r0, [pc, #164]	; (b66c4 <_Z18particleInitializev+0x128>)
   b661e:	f005 ff25 	bl	bc46c <spark_variable>
  Particle.variable("SIM Card", (sysStatus.get_verizonSIM()) ? "Verizon" : "Particle");
   b6622:	f7ff fb89 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b6626:	f7ff fe54 	bl	b62d2 <_ZNK13sysStatusData14get_verizonSIMEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b662a:	4a27      	ldr	r2, [pc, #156]	; (b66c8 <_Z18particleInitializev+0x12c>)
   b662c:	4927      	ldr	r1, [pc, #156]	; (b66cc <_Z18particleInitializev+0x130>)
   b662e:	42a0      	cmp	r0, r4
   b6630:	bf18      	it	ne
   b6632:	4611      	movne	r1, r2
   b6634:	4826      	ldr	r0, [pc, #152]	; (b66d0 <_Z18particleInitializev+0x134>)
   b6636:	f7ff ff45 	bl	b64c4 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b663a:	4926      	ldr	r1, [pc, #152]	; (b66d4 <_Z18particleInitializev+0x138>)
   b663c:	4826      	ldr	r0, [pc, #152]	; (b66d8 <_Z18particleInitializev+0x13c>)
   b663e:	f7ff ff41 	bl	b64c4 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b6642:	4926      	ldr	r1, [pc, #152]	; (b66dc <_Z18particleInitializev+0x140>)
   b6644:	4826      	ldr	r0, [pc, #152]	; (b66e0 <_Z18particleInitializev+0x144>)
   b6646:	f7ff ff3d 	bl	b64c4 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b664a:	4a26      	ldr	r2, [pc, #152]	; (b66e4 <_Z18particleInitializev+0x148>)
   b664c:	4926      	ldr	r1, [pc, #152]	; (b66e8 <_Z18particleInitializev+0x14c>)
   b664e:	4827      	ldr	r0, [pc, #156]	; (b66ec <_Z18particleInitializev+0x150>)
   b6650:	f006 fa11 	bl	bca76 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b6654:	4a26      	ldr	r2, [pc, #152]	; (b66f0 <_Z18particleInitializev+0x154>)
   b6656:	4927      	ldr	r1, [pc, #156]	; (b66f4 <_Z18particleInitializev+0x158>)
   b6658:	4824      	ldr	r0, [pc, #144]	; (b66ec <_Z18particleInitializev+0x150>)
   b665a:	f006 fa0c 	bl	bca76 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b665e:	4a26      	ldr	r2, [pc, #152]	; (b66f8 <_Z18particleInitializev+0x15c>)
   b6660:	4926      	ldr	r1, [pc, #152]	; (b66fc <_Z18particleInitializev+0x160>)
   b6662:	4822      	ldr	r0, [pc, #136]	; (b66ec <_Z18particleInitializev+0x150>)
   b6664:	f006 fa07 	bl	bca76 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b6668:	4a19      	ldr	r2, [pc, #100]	; (b66d0 <_Z18particleInitializev+0x134>)
   b666a:	4925      	ldr	r1, [pc, #148]	; (b6700 <_Z18particleInitializev+0x164>)
   b666c:	481f      	ldr	r0, [pc, #124]	; (b66ec <_Z18particleInitializev+0x150>)
   b666e:	f006 fa02 	bl	bca76 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  takeMeasurements();                               // Initialize sensor values
   b6672:	f000 fba5 	bl	b6dc0 <_Z16takeMeasurementsv>
}
   b6676:	b00c      	add	sp, #48	; 0x30
   b6678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  makeUpStringMessages();                           // Initialize the string messages needed for the Particle Variables
   b667c:	f7ff bf5a 	b.w	b6534 <_Z20makeUpStringMessagesv>
   b6680:	000c1501 	.word	0x000c1501
   b6684:	000c1509 	.word	0x000c1509
   b6688:	000c150d 	.word	0x000c150d
   b668c:	000c1516 	.word	0x000c1516
   b6690:	000c151e 	.word	0x000c151e
   b6694:	000c152a 	.word	0x000c152a
   b6698:	000c1530 	.word	0x000c1530
   b669c:	000c153c 	.word	0x000c153c
   b66a0:	2003e658 	.word	0x2003e658
   b66a4:	2003d64c 	.word	0x2003d64c
   b66a8:	000c156a 	.word	0x000c156a
   b66ac:	2003d728 	.word	0x2003d728
   b66b0:	000c1572 	.word	0x000c1572
   b66b4:	000c1579 	.word	0x000c1579
   b66b8:	000c1584 	.word	0x000c1584
   b66bc:	000b648d 	.word	0x000b648d
   b66c0:	000b6461 	.word	0x000b6461
   b66c4:	000c1593 	.word	0x000c1593
   b66c8:	000c14f9 	.word	0x000c14f9
   b66cc:	000c16c8 	.word	0x000c16c8
   b66d0:	000c15a7 	.word	0x000c15a7
   b66d4:	2003d6f0 	.word	0x2003d6f0
   b66d8:	000c15b0 	.word	0x000c15b0
   b66dc:	2003d6e8 	.word	0x2003d6e8
   b66e0:	000c15ba 	.word	0x000c15ba
   b66e4:	000c15c5 	.word	0x000c15c5
   b66e8:	000b6731 	.word	0x000b6731
   b66ec:	000bca4b 	.word	0x000bca4b
   b66f0:	000c15d3 	.word	0x000c15d3
   b66f4:	000b67a5 	.word	0x000b67a5
   b66f8:	000c15e1 	.word	0x000c15e1
   b66fc:	000b6819 	.word	0x000b6819
   b6700:	000b688d 	.word	0x000b688d

000b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b6704:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b6706:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b6708:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b670a:	b17c      	cbz	r4, b672c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b670c:	6863      	ldr	r3, [r4, #4]
   b670e:	3b01      	subs	r3, #1
   b6710:	6063      	str	r3, [r4, #4]
   b6712:	b95b      	cbnz	r3, b672c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b6714:	6823      	ldr	r3, [r4, #0]
   b6716:	4620      	mov	r0, r4
   b6718:	689b      	ldr	r3, [r3, #8]
   b671a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b671c:	68a3      	ldr	r3, [r4, #8]
   b671e:	3b01      	subs	r3, #1
   b6720:	60a3      	str	r3, [r4, #8]
   b6722:	b91b      	cbnz	r3, b672c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b6724:	6823      	ldr	r3, [r4, #0]
   b6726:	4620      	mov	r0, r4
   b6728:	68db      	ldr	r3, [r3, #12]
   b672a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b672c:	4628      	mov	r0, r5
   b672e:	bd38      	pop	{r3, r4, r5, pc}

000b6730 <_Z12setFrequency6String>:
{
   b6730:	b510      	push	{r4, lr}
   b6732:	b0c6      	sub	sp, #280	; 0x118
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b6734:	6800      	ldr	r0, [r0, #0]
   b6736:	220a      	movs	r2, #10
   b6738:	a903      	add	r1, sp, #12
   b673a:	f00a f881 	bl	c0840 <strtol>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b673e:	2878      	cmp	r0, #120	; 0x78
   b6740:	d821      	bhi.n	b6786 <_Z12setFrequency6String+0x56>
  updatedFrequencyMins = tempTime;
   b6742:	4b12      	ldr	r3, [pc, #72]	; (b678c <_Z12setFrequency6String+0x5c>)
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMins);
   b6744:	4a12      	ldr	r2, [pc, #72]	; (b6790 <_Z12setFrequency6String+0x60>)
  updatedFrequencyMins = tempTime;
   b6746:	8018      	strh	r0, [r3, #0]
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
   b6748:	4b12      	ldr	r3, [pc, #72]	; (b6794 <_Z12setFrequency6String+0x64>)
   b674a:	2401      	movs	r4, #1
   b674c:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMins);
   b674e:	f44f 7180 	mov.w	r1, #256	; 0x100
   b6752:	4603      	mov	r3, r0
   b6754:	a806      	add	r0, sp, #24
   b6756:	f005 ff79 	bl	bc64c <snprintf>
  Log.info(data);
   b675a:	480f      	ldr	r0, [pc, #60]	; (b6798 <_Z12setFrequency6String+0x68>)
   b675c:	a906      	add	r1, sp, #24
   b675e:	f7fd fcee 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6762:	f005 fea3 	bl	bc4ac <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   b6766:	b160      	cbz	r0, b6782 <_Z12setFrequency6String+0x52>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b6768:	4b0c      	ldr	r3, [pc, #48]	; (b679c <_Z12setFrequency6String+0x6c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b676a:	490d      	ldr	r1, [pc, #52]	; (b67a0 <_Z12setFrequency6String+0x70>)
   b676c:	781b      	ldrb	r3, [r3, #0]
   b676e:	f88d 3000 	strb.w	r3, [sp]
   b6772:	a804      	add	r0, sp, #16
   b6774:	233c      	movs	r3, #60	; 0x3c
   b6776:	aa06      	add	r2, sp, #24
   b6778:	f006 fa8e 	bl	bcc98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b677c:	a805      	add	r0, sp, #20
   b677e:	f7ff ffc1 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b6782:	4620      	mov	r0, r4
   b6784:	e000      	b.n	b6788 <_Z12setFrequency6String+0x58>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b6786:	2000      	movs	r0, #0
}
   b6788:	b046      	add	sp, #280	; 0x118
   b678a:	bd10      	pop	{r4, pc}
   b678c:	2003d6f8 	.word	0x2003d6f8
   b6790:	000c15f0 	.word	0x000c15f0
   b6794:	2003e409 	.word	0x2003e409
   b6798:	2003e658 	.word	0x2003e658
   b679c:	2003e408 	.word	0x2003e408
   b67a0:	000c15dc 	.word	0x000c15dc

000b67a4 <_Z11setOpenTime6String>:
{
   b67a4:	b510      	push	{r4, lr}
   b67a6:	b096      	sub	sp, #88	; 0x58
  int tempTime = strtol(command,&pEND,10);                             // Looks for the first integer and interprets it
   b67a8:	6800      	ldr	r0, [r0, #0]
   b67aa:	220a      	movs	r2, #10
   b67ac:	a903      	add	r1, sp, #12
   b67ae:	f00a f847 	bl	c0840 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                     // Make sure it falls in a valid range or send a "fail" result
   b67b2:	2817      	cmp	r0, #23
  int tempTime = strtol(command,&pEND,10);                             // Looks for the first integer and interprets it
   b67b4:	4604      	mov	r4, r0
  if ((tempTime < 0) || (tempTime > 23)) return 0;                     // Make sure it falls in a valid range or send a "fail" result
   b67b6:	d824      	bhi.n	b6802 <_Z11setOpenTime6String+0x5e>
  sysStatus.set_openTime(tempTime);
   b67b8:	f7ff fabe 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b67bc:	b2e1      	uxtb	r1, r4
   b67be:	f7ff fc4f 	bl	b6060 <_ZN13sysStatusData12set_openTimeEh>
  snprintf(data, sizeof(data), "Wake time set to %i",sysStatus.get_openTime());
   b67c2:	f7ff fab9 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b67c6:	f7ff fbe4 	bl	b5f92 <_ZNK13sysStatusData12get_openTimeEv>
   b67ca:	4a0f      	ldr	r2, [pc, #60]	; (b6808 <_Z11setOpenTime6String+0x64>)
   b67cc:	4603      	mov	r3, r0
   b67ce:	2140      	movs	r1, #64	; 0x40
   b67d0:	a806      	add	r0, sp, #24
   b67d2:	f005 ff3b 	bl	bc64c <snprintf>
  Log.info(data);
   b67d6:	480d      	ldr	r0, [pc, #52]	; (b680c <_Z11setOpenTime6String+0x68>)
   b67d8:	a906      	add	r1, sp, #24
   b67da:	f7fd fcb0 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b67de:	f005 fe65 	bl	bc4ac <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b67e2:	b160      	cbz	r0, b67fe <_Z11setOpenTime6String+0x5a>
   b67e4:	4b0a      	ldr	r3, [pc, #40]	; (b6810 <_Z11setOpenTime6String+0x6c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b67e6:	490b      	ldr	r1, [pc, #44]	; (b6814 <_Z11setOpenTime6String+0x70>)
   b67e8:	781b      	ldrb	r3, [r3, #0]
   b67ea:	f88d 3000 	strb.w	r3, [sp]
   b67ee:	a804      	add	r0, sp, #16
   b67f0:	233c      	movs	r3, #60	; 0x3c
   b67f2:	aa06      	add	r2, sp, #24
   b67f4:	f006 fa50 	bl	bcc98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b67f8:	a805      	add	r0, sp, #20
   b67fa:	f7ff ff83 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b67fe:	2001      	movs	r0, #1
   b6800:	e000      	b.n	b6804 <_Z11setOpenTime6String+0x60>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                     // Make sure it falls in a valid range or send a "fail" result
   b6802:	2000      	movs	r0, #0
}
   b6804:	b016      	add	sp, #88	; 0x58
   b6806:	bd10      	pop	{r4, pc}
   b6808:	000c1630 	.word	0x000c1630
   b680c:	2003e658 	.word	0x2003e658
   b6810:	2003e408 	.word	0x2003e408
   b6814:	000c15dc 	.word	0x000c15dc

000b6818 <_Z12setCloseTime6String>:
{
   b6818:	b510      	push	{r4, lr}
   b681a:	b096      	sub	sp, #88	; 0x58
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b681c:	6800      	ldr	r0, [r0, #0]
   b681e:	220a      	movs	r2, #10
   b6820:	a903      	add	r1, sp, #12
   b6822:	f00a f80d 	bl	c0840 <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b6826:	2818      	cmp	r0, #24
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b6828:	4604      	mov	r4, r0
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b682a:	d824      	bhi.n	b6876 <_Z12setCloseTime6String+0x5e>
  sysStatus.set_closeTime(tempTime);
   b682c:	f7ff fa84 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b6830:	b2e1      	uxtb	r1, r4
   b6832:	f7ff fc1b 	bl	b606c <_ZN13sysStatusData13set_closeTimeEh>
  snprintf(data, sizeof(data), "Sleep time set to %i",sysStatus.get_closeTime());
   b6836:	f7ff fa7f 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b683a:	f7ff fbaf 	bl	b5f9c <_ZNK13sysStatusData13get_closeTimeEv>
   b683e:	4a0f      	ldr	r2, [pc, #60]	; (b687c <_Z12setCloseTime6String+0x64>)
   b6840:	4603      	mov	r3, r0
   b6842:	2140      	movs	r1, #64	; 0x40
   b6844:	a806      	add	r0, sp, #24
   b6846:	f005 ff01 	bl	bc64c <snprintf>
  Log.info(data);
   b684a:	480d      	ldr	r0, [pc, #52]	; (b6880 <_Z12setCloseTime6String+0x68>)
   b684c:	a906      	add	r1, sp, #24
   b684e:	f7fd fc76 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6852:	f005 fe2b 	bl	bc4ac <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b6856:	b160      	cbz	r0, b6872 <_Z12setCloseTime6String+0x5a>
   b6858:	4b0a      	ldr	r3, [pc, #40]	; (b6884 <_Z12setCloseTime6String+0x6c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b685a:	490b      	ldr	r1, [pc, #44]	; (b6888 <_Z12setCloseTime6String+0x70>)
   b685c:	781b      	ldrb	r3, [r3, #0]
   b685e:	f88d 3000 	strb.w	r3, [sp]
   b6862:	a804      	add	r0, sp, #16
   b6864:	233c      	movs	r3, #60	; 0x3c
   b6866:	aa06      	add	r2, sp, #24
   b6868:	f006 fa16 	bl	bcc98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b686c:	a805      	add	r0, sp, #20
   b686e:	f7ff ff49 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b6872:	2001      	movs	r0, #1
   b6874:	e000      	b.n	b6878 <_Z12setCloseTime6String+0x60>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b6876:	2000      	movs	r0, #0
}
   b6878:	b016      	add	sp, #88	; 0x58
   b687a:	bd10      	pop	{r4, pc}
   b687c:	000c1644 	.word	0x000c1644
   b6880:	2003e658 	.word	0x2003e658
   b6884:	2003e408 	.word	0x2003e408
   b6888:	000c15dc 	.word	0x000c15dc

000b688c <_Z13setVerizonSIM6String>:
{
   b688c:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b688e:	491e      	ldr	r1, [pc, #120]	; (b6908 <_Z13setVerizonSIM6String+0x7c>)
   b6890:	b085      	sub	sp, #20
   b6892:	4605      	mov	r5, r0
   b6894:	f008 fb39 	bl	bef0a <_ZNK6String6equalsEPKc>
  if (command == "1")
   b6898:	4604      	mov	r4, r0
   b689a:	b1d8      	cbz	r0, b68d4 <_Z13setVerizonSIM6String+0x48>
    sysStatus.set_verizonSIM(true);
   b689c:	f7ff fa4c 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b68a0:	2101      	movs	r1, #1
   b68a2:	f7ff fd3e 	bl	b6322 <_ZN13sysStatusData14set_verizonSIMEb>
    Particle.keepAlive(60);                                         // send a ping every minute
   b68a6:	203c      	movs	r0, #60	; 0x3c
   b68a8:	f7ff fe34 	bl	b6514 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b68ac:	f005 fdfe 	bl	bc4ac <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Verizon SIM", PRIVATE);
   b68b0:	b910      	cbnz	r0, b68b8 <_Z13setVerizonSIM6String+0x2c>
    return 1;
   b68b2:	2001      	movs	r0, #1
}
   b68b4:	b005      	add	sp, #20
   b68b6:	bd30      	pop	{r4, r5, pc}
   b68b8:	4b14      	ldr	r3, [pc, #80]	; (b690c <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b68ba:	4a15      	ldr	r2, [pc, #84]	; (b6910 <_Z13setVerizonSIM6String+0x84>)
   b68bc:	781b      	ldrb	r3, [r3, #0]
   b68be:	f88d 3000 	strb.w	r3, [sp]
   b68c2:	233c      	movs	r3, #60	; 0x3c
   b68c4:	a802      	add	r0, sp, #8
   b68c6:	4913      	ldr	r1, [pc, #76]	; (b6914 <_Z13setVerizonSIM6String+0x88>)
   b68c8:	f006 f9e6 	bl	bcc98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b68cc:	a803      	add	r0, sp, #12
   b68ce:	f7ff ff19 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b68d2:	e7ee      	b.n	b68b2 <_Z13setVerizonSIM6String+0x26>
   b68d4:	4910      	ldr	r1, [pc, #64]	; (b6918 <_Z13setVerizonSIM6String+0x8c>)
   b68d6:	4628      	mov	r0, r5
   b68d8:	f008 fb17 	bl	bef0a <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b68dc:	2800      	cmp	r0, #0
   b68de:	d0e9      	beq.n	b68b4 <_Z13setVerizonSIM6String+0x28>
    sysStatus.set_verizonSIM(false);
   b68e0:	f7ff fa2a 	bl	b5d38 <_ZN13sysStatusData8instanceEv>
   b68e4:	4621      	mov	r1, r4
   b68e6:	f7ff fd1c 	bl	b6322 <_ZN13sysStatusData14set_verizonSIMEb>
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
   b68ea:	f240 5064 	movw	r0, #1380	; 0x564
   b68ee:	f7ff fe11 	bl	b6514 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b68f2:	f005 fddb 	bl	bc4ac <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
   b68f6:	2800      	cmp	r0, #0
   b68f8:	d0db      	beq.n	b68b2 <_Z13setVerizonSIM6String+0x26>
   b68fa:	4b04      	ldr	r3, [pc, #16]	; (b690c <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b68fc:	4a07      	ldr	r2, [pc, #28]	; (b691c <_Z13setVerizonSIM6String+0x90>)
   b68fe:	781b      	ldrb	r3, [r3, #0]
   b6900:	f88d 3000 	strb.w	r3, [sp]
   b6904:	233c      	movs	r3, #60	; 0x3c
   b6906:	e7dd      	b.n	b68c4 <_Z13setVerizonSIM6String+0x38>
   b6908:	000c17b8 	.word	0x000c17b8
   b690c:	2003e408 	.word	0x2003e408
   b6910:	000c1659 	.word	0x000c1659
   b6914:	000c166c 	.word	0x000c166c
   b6918:	000c1b04 	.word	0x000c1b04
   b691c:	000c1671 	.word	0x000c1671

000b6920 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6920:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6922:	e9d0 5300 	ldrd	r5, r3, [r0]
   b6926:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6928:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b692a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b692e:	42ae      	cmp	r6, r5
   b6930:	d004      	beq.n	b693c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b6932:	4628      	mov	r0, r5
   b6934:	f008 f9d8 	bl	bece8 <_ZN6StringD1Ev>
   b6938:	3514      	adds	r5, #20
   b693a:	e7f8      	b.n	b692e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b693c:	6820      	ldr	r0, [r4, #0]
   b693e:	f005 fe65 	bl	bc60c <free>
    AllocatorT::free(data_);
}
   b6942:	4620      	mov	r0, r4
   b6944:	bd70      	pop	{r4, r5, r6, pc}

000b6946 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6946:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b694a:	4604      	mov	r4, r0
   b694c:	460d      	mov	r5, r1
   b694e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6950:	d916      	bls.n	b6980 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b6952:	4290      	cmp	r0, r2
   b6954:	d215      	bcs.n	b6982 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b6956:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b695a:	1a75      	subs	r5, r6, r1
   b695c:	f1a1 0714 	sub.w	r7, r1, #20
   b6960:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6962:	42b7      	cmp	r7, r6
   b6964:	d01c      	beq.n	b69a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b6966:	b12c      	cbz	r4, b6974 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b6968:	4631      	mov	r1, r6
   b696a:	4620      	mov	r0, r4
   b696c:	f008 fa38 	bl	bede0 <_ZN6StringC1EOS_>
   b6970:	7c33      	ldrb	r3, [r6, #16]
   b6972:	7423      	strb	r3, [r4, #16]
   b6974:	4630      	mov	r0, r6
   b6976:	f008 f9b7 	bl	bece8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b697a:	3e14      	subs	r6, #20
   b697c:	3c14      	subs	r4, #20
   b697e:	e7f0      	b.n	b6962 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b6980:	d00e      	beq.n	b69a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b6982:	42b5      	cmp	r5, r6
   b6984:	d00c      	beq.n	b69a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b6986:	b12c      	cbz	r4, b6994 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b6988:	4629      	mov	r1, r5
   b698a:	4620      	mov	r0, r4
   b698c:	f008 fa28 	bl	bede0 <_ZN6StringC1EOS_>
   b6990:	7c2b      	ldrb	r3, [r5, #16]
   b6992:	7423      	strb	r3, [r4, #16]
   b6994:	4628      	mov	r0, r5
   b6996:	f008 f9a7 	bl	bece8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b699a:	3514      	adds	r5, #20
   b699c:	3414      	adds	r4, #20
   b699e:	e7f0      	b.n	b6982 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b69a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b69a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b69a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b69a6:	2300      	movs	r3, #0
   b69a8:	e9c0 3300 	strd	r3, r3, [r0]
   b69ac:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b69ae:	684f      	ldr	r7, [r1, #4]
   b69b0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b69b2:	4604      	mov	r4, r0
   b69b4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b69b6:	dd23      	ble.n	b6a00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b69b8:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b69bc:	fb08 f007 	mul.w	r0, r8, r7
   b69c0:	f005 fe1c 	bl	bc5fc <malloc>
            if (!d) {
   b69c4:	4605      	mov	r5, r0
   b69c6:	b1d8      	cbz	r0, b6a00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b69c8:	e9d4 1200 	ldrd	r1, r2, [r4]
   b69cc:	fb08 1202 	mla	r2, r8, r2, r1
   b69d0:	f7ff ffb9 	bl	b6946 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b69d4:	6820      	ldr	r0, [r4, #0]
   b69d6:	f005 fe19 	bl	bc60c <free>
        data_ = d;
   b69da:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b69dc:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b69de:	e9d6 7300 	ldrd	r7, r3, [r6]
   b69e2:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b69e6:	45b8      	cmp	r8, r7
   b69e8:	d008      	beq.n	b69fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b69ea:	4639      	mov	r1, r7
   b69ec:	4628      	mov	r0, r5
   b69ee:	f008 fa11 	bl	bee14 <_ZN6StringC1ERKS_>
   b69f2:	7c3b      	ldrb	r3, [r7, #16]
   b69f4:	742b      	strb	r3, [r5, #16]
   b69f6:	3714      	adds	r7, #20
   b69f8:	3514      	adds	r5, #20
   b69fa:	e7f4      	b.n	b69e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b69fc:	6873      	ldr	r3, [r6, #4]
   b69fe:	6063      	str	r3, [r4, #4]
}
   b6a00:	4620      	mov	r0, r4
   b6a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b6a08 <_GLOBAL__sub_I_openTimeStr>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   b6a08:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b6a0a:	4b27      	ldr	r3, [pc, #156]	; (b6aa8 <_GLOBAL__sub_I_openTimeStr+0xa0>)
    SleepResult() {}
   b6a0c:	4a27      	ldr	r2, [pc, #156]	; (b6aac <_GLOBAL__sub_I_openTimeStr+0xa4>)
   b6a0e:	2501      	movs	r5, #1
   b6a10:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b6a12:	4b27      	ldr	r3, [pc, #156]	; (b6ab0 <_GLOBAL__sub_I_openTimeStr+0xa8>)
   b6a14:	2400      	movs	r4, #0
   b6a16:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b6a18:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6a1a:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b6a1e:	2002      	movs	r0, #2
   b6a20:	f005 fcb2 	bl	bc388 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b6a24:	4621      	mov	r1, r4
   b6a26:	4628      	mov	r0, r5
   b6a28:	f005 fcc6 	bl	bc3b8 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b6a2c:	4629      	mov	r1, r5
   b6a2e:	2004      	movs	r0, #4
   b6a30:	f005 fa28 	bl	bbe84 <HAL_Feature_Set>
        capacity_(0) {
   b6a34:	e9cd 4400 	strd	r4, r4, [sp]
   b6a38:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b6a3a:	f008 fdef 	bl	bf61c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b6a3e:	4c1d      	ldr	r4, [pc, #116]	; (b6ab4 <_GLOBAL__sub_I_openTimeStr+0xac>)
   b6a40:	4605      	mov	r5, r0
   b6a42:	4669      	mov	r1, sp
   b6a44:	a803      	add	r0, sp, #12
   b6a46:	f7ff ffac 	bl	b69a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6a4a:	4626      	mov	r6, r4
        stream_(&stream) {
   b6a4c:	a903      	add	r1, sp, #12
   b6a4e:	a806      	add	r0, sp, #24
   b6a50:	f7ff ffa7 	bl	b69a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6a54:	4b18      	ldr	r3, [pc, #96]	; (b6ab8 <_GLOBAL__sub_I_openTimeStr+0xb0>)
   b6a56:	f846 3b04 	str.w	r3, [r6], #4
   b6a5a:	a906      	add	r1, sp, #24
   b6a5c:	a809      	add	r0, sp, #36	; 0x24
   b6a5e:	f7ff ffa0 	bl	b69a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6a62:	aa09      	add	r2, sp, #36	; 0x24
   b6a64:	211e      	movs	r1, #30
   b6a66:	4630      	mov	r0, r6
   b6a68:	f007 fa9c 	bl	bdfa4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6a6c:	a809      	add	r0, sp, #36	; 0x24
   b6a6e:	f7ff ff57 	bl	b6920 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b6a72:	a806      	add	r0, sp, #24
   b6a74:	f7ff ff54 	bl	b6920 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6a78:	4b10      	ldr	r3, [pc, #64]	; (b6abc <_GLOBAL__sub_I_openTimeStr+0xb4>)
   b6a7a:	6023      	str	r3, [r4, #0]
   b6a7c:	6225      	str	r5, [r4, #32]
   b6a7e:	a803      	add	r0, sp, #12
   b6a80:	f7ff ff4e 	bl	b6920 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6a84:	4b0e      	ldr	r3, [pc, #56]	; (b6ac0 <_GLOBAL__sub_I_openTimeStr+0xb8>)
   b6a86:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b6a88:	f008 fdc8 	bl	bf61c <_Z16_fetch_usbserialv>
   b6a8c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6a90:	f008 fdb2 	bl	bf5f8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b6a94:	f006 ff9c 	bl	bd9d0 <_ZN5spark10LogManager8instanceEv>
   b6a98:	4621      	mov	r1, r4
   b6a9a:	f007 f959 	bl	bdd50 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b6a9e:	4668      	mov	r0, sp
   b6aa0:	f7ff ff3e 	bl	b6920 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6aa4:	b00c      	add	sp, #48	; 0x30
   b6aa6:	bd70      	pop	{r4, r5, r6, pc}
   b6aa8:	2003e408 	.word	0x2003e408
   b6aac:	ffff0000 	.word	0xffff0000
   b6ab0:	2003e3fc 	.word	0x2003e3fc
   b6ab4:	2003e40c 	.word	0x2003e40c
   b6ab8:	000c1754 	.word	0x000c1754
   b6abc:	000c23cc 	.word	0x000c23cc
   b6ac0:	000c176c 	.word	0x000c176c

000b6ac4 <_Z22disconnectFromParticlev>:
{
   b6ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6ac8:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b6aca:	f008 fcc0 	bl	bf44e <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b6ace:	4943      	ldr	r1, [pc, #268]	; (b6bdc <_Z22disconnectFromParticlev+0x118>)
  time_t startTime = Time.now();
   b6ad0:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b6ad2:	4843      	ldr	r0, [pc, #268]	; (b6be0 <_Z22disconnectFromParticlev+0x11c>)
   b6ad4:	f7fd fb33 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  detachInterrupt(BUTTON_PIN);                                         // Stop watching the userSwitch as we will no longer be connected
   b6ad8:	4b42      	ldr	r3, [pc, #264]	; (b6be4 <_Z22disconnectFromParticlev+0x120>)
   b6ada:	8818      	ldrh	r0, [r3, #0]
   b6adc:	f006 fbba 	bl	bd254 <_Z15detachInterruptt>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b6ae0:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b6ae2:	a801      	add	r0, sp, #4
   b6ae4:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b6ae8:	f8ad 400c 	strh.w	r4, [sp, #12]
   b6aec:	f005 ffd4 	bl	bca98 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b6af0:	4620      	mov	r0, r4
   b6af2:	f005 f9f7 	bl	bbee4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b6af6:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b6afa:	4604      	mov	r4, r0
   b6afc:	2000      	movs	r0, #0
   b6afe:	f005 f9f1 	bl	bbee4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b6b02:	1b03      	subs	r3, r0, r4
   b6b04:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b6b08:	42b3      	cmp	r3, r6
   b6b0a:	f171 0300 	sbcs.w	r3, r1, #0
   b6b0e:	d205      	bcs.n	b6b1c <_Z22disconnectFromParticlev+0x58>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6b10:	f005 fccc 	bl	bc4ac <spark_cloud_flag_connected>
   b6b14:	b110      	cbz	r0, b6b1c <_Z22disconnectFromParticlev+0x58>
            spark_process();
   b6b16:	f005 fcb9 	bl	bc48c <spark_process>
        while (_while() && !_condition()) {
   b6b1a:	e7ef      	b.n	b6afc <_Z22disconnectFromParticlev+0x38>
   b6b1c:	f005 fcc6 	bl	bc4ac <spark_cloud_flag_connected>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6b20:	f005 f9d0 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6b24:	4f30      	ldr	r7, [pc, #192]	; (b6be8 <_Z22disconnectFromParticlev+0x124>)
   b6b26:	6038      	str	r0, [r7, #0]
    		spark_process();
   b6b28:	f005 fcb0 	bl	bc48c <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6b2c:	f005 fcbe 	bl	bc4ac <spark_cloud_flag_connected>
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b6b30:	4604      	mov	r4, r0
   b6b32:	b140      	cbz	r0, b6b46 <_Z22disconnectFromParticlev+0x82>
    Log.info("Failed to disconnect from Particle");
   b6b34:	492d      	ldr	r1, [pc, #180]	; (b6bec <_Z22disconnectFromParticlev+0x128>)
   b6b36:	482a      	ldr	r0, [pc, #168]	; (b6be0 <_Z22disconnectFromParticlev+0x11c>)
   b6b38:	f7fd fb01 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b6b3c:	2400      	movs	r4, #0
   b6b3e:	4620      	mov	r0, r4
   b6b40:	b005      	add	sp, #20
   b6b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b6b46:	f008 fc82 	bl	bf44e <_ZN9TimeClass3nowEv>
   b6b4a:	4929      	ldr	r1, [pc, #164]	; (b6bf0 <_Z22disconnectFromParticlev+0x12c>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b6b4c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b6bf4 <_Z22disconnectFromParticlev+0x130>
   b6b50:	1b42      	subs	r2, r0, r5
   b6b52:	4823      	ldr	r0, [pc, #140]	; (b6be0 <_Z22disconnectFromParticlev+0x11c>)
   b6b54:	f7fd faf3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b6b58:	f008 fc79 	bl	bf44e <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6b5c:	4622      	mov	r2, r4
   b6b5e:	2102      	movs	r1, #2
   b6b60:	4606      	mov	r6, r0
   b6b62:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b6b66:	f005 fcf9 	bl	bc55c <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b6b6a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b6b6e:	4623      	mov	r3, r4
   b6b70:	4622      	mov	r2, r4
   b6b72:	4621      	mov	r1, r4
   b6b74:	f005 fd0a 	bl	bc58c <network_off>
        return hal_timer_millis(nullptr);
   b6b78:	4620      	mov	r0, r4
   b6b7a:	f005 f9b3 	bl	bbee4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b6b7e:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b6b82:	4605      	mov	r5, r0
   b6b84:	2000      	movs	r0, #0
   b6b86:	f005 f9ad 	bl	bbee4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b6b8a:	1b43      	subs	r3, r0, r5
   b6b8c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b6b90:	454b      	cmp	r3, r9
   b6b92:	f171 0300 	sbcs.w	r3, r1, #0
   b6b96:	d206      	bcs.n	b6ba6 <_Z22disconnectFromParticlev+0xe2>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b6b98:	4640      	mov	r0, r8
   b6b9a:	f007 fd21 	bl	be5e0 <_ZN5spark12NetworkClass5isOffEv>
   b6b9e:	b910      	cbnz	r0, b6ba6 <_Z22disconnectFromParticlev+0xe2>
            spark_process();
   b6ba0:	f005 fc74 	bl	bc48c <spark_process>
        while (_while() && !_condition()) {
   b6ba4:	e7ee      	b.n	b6b84 <_Z22disconnectFromParticlev+0xc0>
   b6ba6:	4813      	ldr	r0, [pc, #76]	; (b6bf4 <_Z22disconnectFromParticlev+0x130>)
   b6ba8:	f007 fd1a 	bl	be5e0 <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b6bac:	f005 f98a 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b6bb0:	6038      	str	r0, [r7, #0]
    		spark_process();
   b6bb2:	f005 fc6b 	bl	bc48c <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b6bb6:	480f      	ldr	r0, [pc, #60]	; (b6bf4 <_Z22disconnectFromParticlev+0x130>)
   b6bb8:	f007 fd0e 	bl	be5d8 <_ZN5spark12NetworkClass4isOnEv>
   b6bbc:	b120      	cbz	r0, b6bc8 <_Z22disconnectFromParticlev+0x104>
    Log.info("Failed to turn off the Cellular modem");
   b6bbe:	490e      	ldr	r1, [pc, #56]	; (b6bf8 <_Z22disconnectFromParticlev+0x134>)
   b6bc0:	4807      	ldr	r0, [pc, #28]	; (b6be0 <_Z22disconnectFromParticlev+0x11c>)
   b6bc2:	f7fd fabc 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b6bc6:	e7ba      	b.n	b6b3e <_Z22disconnectFromParticlev+0x7a>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b6bc8:	f008 fc41 	bl	bf44e <_ZN9TimeClass3nowEv>
   b6bcc:	490b      	ldr	r1, [pc, #44]	; (b6bfc <_Z22disconnectFromParticlev+0x138>)
   b6bce:	1b82      	subs	r2, r0, r6
   b6bd0:	4803      	ldr	r0, [pc, #12]	; (b6be0 <_Z22disconnectFromParticlev+0x11c>)
   b6bd2:	f7fd fab4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b6bd6:	2401      	movs	r4, #1
   b6bd8:	e7b1      	b.n	b6b3e <_Z22disconnectFromParticlev+0x7a>
   b6bda:	bf00      	nop
   b6bdc:	000c1685 	.word	0x000c1685
   b6be0:	2003e658 	.word	0x2003e658
   b6be4:	000c14be 	.word	0x000c14be
   b6be8:	2003e710 	.word	0x2003e710
   b6bec:	000c16ae 	.word	0x000c16ae
   b6bf0:	000c16d1 	.word	0x000c16d1
   b6bf4:	2003e584 	.word	0x2003e584
   b6bf8:	000c16fa 	.word	0x000c16fa
   b6bfc:	000c1720 	.word	0x000c1720

000b6c00 <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b6c00:	ee07 0a90 	vmov	s15, r0
   b6c04:	ed9f 7a09 	vldr	s14, [pc, #36]	; b6c2c <_Z17tmp36TemperatureCi+0x2c>
   b6c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
   b6c10:	ed9f 7a07 	vldr	s14, [pc, #28]	; b6c30 <_Z17tmp36TemperatureCi+0x30>
   b6c14:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b6c18:	eddf 7a06 	vldr	s15, [pc, #24]	; b6c34 <_Z17tmp36TemperatureCi+0x34>
   b6c1c:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b6c20:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b6c24:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b6c28:	4770      	bx	lr
   b6c2a:	bf00      	nop
   b6c2c:	454e4000 	.word	0x454e4000
   b6c30:	457ff000 	.word	0x457ff000
   b6c34:	43fa0000 	.word	0x43fa0000

000b6c38 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b6c38:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b6c3a:	2101      	movs	r1, #1
   b6c3c:	a801      	add	r0, sp, #4
   b6c3e:	f007 fd64 	bl	be70a <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b6c42:	f7ff f8c9 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b6c46:	f7ff f9bd 	bl	b5fc4 <_ZNK17currentStatusData17get_internalTempCEv>
   b6c4a:	f7ff f8c5 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b6c4e:	f7ff f9b9 	bl	b5fc4 <_ZNK17currentStatusData17get_internalTempCEv>
   b6c52:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6c54:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b6c56:	d90d      	bls.n	b6c74 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6c58:	f007 fdea 	bl	be830 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b6c5c:	f7ff f8bc 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b6c60:	2101      	movs	r1, #1
   b6c62:	f7ff fa1b 	bl	b609c <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b6c66:	2400      	movs	r4, #0
  PMIC pmic(true);
   b6c68:	a801      	add	r0, sp, #4
   b6c6a:	f007 fd5d 	bl	be728 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b6c6e:	4620      	mov	r0, r4
   b6c70:	b002      	add	sp, #8
   b6c72:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b6c74:	f007 fdc1 	bl	be7fa <_ZN4PMIC14enableChargingEv>
    return true;
   b6c78:	2401      	movs	r4, #1
   b6c7a:	e7f5      	b.n	b6c68 <_Z16isItSafeToChargev+0x30>

000b6c7c <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   b6c7c:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6c7e:	4d19      	ldr	r5, [pc, #100]	; (b6ce4 <_Z17getSignalStrengthv+0x68>)
   b6c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b6c82:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6c84:	ac0c      	add	r4, sp, #48	; 0x30
   b6c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c8c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6c90:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b6c94:	4914      	ldr	r1, [pc, #80]	; (b6ce8 <_Z17getSignalStrengthv+0x6c>)
   b6c96:	a804      	add	r0, sp, #16
   b6c98:	f005 fdaa 	bl	bc7f0 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b6c9c:	a804      	add	r0, sp, #16
   b6c9e:	f005 fdea 	bl	bc876 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b6ca2:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b6ca4:	a804      	add	r0, sp, #16
   b6ca6:	f005 fe1f 	bl	bc8e8 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b6caa:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b6cac:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b6cb0:	f005 fe4a 	bl	bc948 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6cb4:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b6cb6:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6cba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b6cbe:	f009 f849 	bl	bfd54 <__aeabi_f2d>
   b6cc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b6cc6:	4628      	mov	r0, r5
   b6cc8:	f009 f844 	bl	bfd54 <__aeabi_f2d>
   b6ccc:	e9cd 0100 	strd	r0, r1, [sp]
   b6cd0:	4a06      	ldr	r2, [pc, #24]	; (b6cec <_Z17getSignalStrengthv+0x70>)
   b6cd2:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b6cd6:	4806      	ldr	r0, [pc, #24]	; (b6cf0 <_Z17getSignalStrengthv+0x74>)
   b6cd8:	2140      	movs	r1, #64	; 0x40
   b6cda:	f005 fcb7 	bl	bc64c <snprintf>
}
   b6cde:	b017      	add	sp, #92	; 0x5c
   b6ce0:	bd30      	pop	{r4, r5, pc}
   b6ce2:	bf00      	nop
   b6ce4:	000c1800 	.word	0x000c1800
   b6ce8:	2003e584 	.word	0x2003e584
   b6cec:	000c17ba 	.word	0x000c17ba
   b6cf0:	2003d728 	.word	0x2003d728

000b6cf4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b6cf4:	b530      	push	{r4, r5, lr}
   b6cf6:	b085      	sub	sp, #20
   b6cf8:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b6cfa:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b6cfc:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b6cfe:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b6d00:	f005 fb30 	bl	bc364 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b6d04:	b990      	cbnz	r0, b6d2c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b6d06:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b6d08:	b10c      	cbz	r4, b6d0e <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b6d0a:	6923      	ldr	r3, [r4, #16]
   b6d0c:	b923      	cbnz	r3, b6d18 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b6d0e:	4a08      	ldr	r2, [pc, #32]	; (b6d30 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b6d10:	4908      	ldr	r1, [pc, #32]	; (b6d34 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b6d12:	200a      	movs	r0, #10
   b6d14:	f005 fafe 	bl	bc314 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b6d18:	230c      	movs	r3, #12
   b6d1a:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b6d1e:	2304      	movs	r3, #4
   b6d20:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b6d22:	aa01      	add	r2, sp, #4
   b6d24:	6923      	ldr	r3, [r4, #16]
   b6d26:	2101      	movs	r1, #1
   b6d28:	4620      	mov	r0, r4
   b6d2a:	4798      	blx	r3
}
   b6d2c:	b005      	add	sp, #20
   b6d2e:	bd30      	pop	{r4, r5, pc}
   b6d30:	000bbeb5 	.word	0x000bbeb5
   b6d34:	000c17d3 	.word	0x000c17d3

000b6d38 <_Z12batteryStatev>:
bool batteryState() {
   b6d38:	b513      	push	{r0, r1, r4, lr}
  current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b6d3a:	f7ff f84d 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b6d3e:	a901      	add	r1, sp, #4
   b6d40:	4604      	mov	r4, r0
   b6d42:	2007      	movs	r0, #7
   b6d44:	f7ff ffd6 	bl	b6cf4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b6d48:	1e01      	subs	r1, r0, #0
        return val;
   b6d4a:	bfa8      	it	ge
   b6d4c:	9901      	ldrge	r1, [sp, #4]
   b6d4e:	4620      	mov	r0, r4
   b6d50:	b2c9      	uxtb	r1, r1
   b6d52:	f7ff f9a3 	bl	b609c <_ZN17currentStatusData16set_batteryStateEh>
  fuelGauge.quickStart();                                               // May help us re-establish a baseline for SoC
   b6d56:	4818      	ldr	r0, [pc, #96]	; (b6db8 <_Z12batteryStatev+0x80>)
   b6d58:	f006 f998 	bl	bd08c <_ZN9FuelGauge10quickStartEv>
  delay(500);
   b6d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6d60:	f005 fccc 	bl	bc6fc <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b6d64:	f7ff f838 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b6d68:	a901      	add	r1, sp, #4
   b6d6a:	4604      	mov	r4, r0
   b6d6c:	2003      	movs	r0, #3
   b6d6e:	f7ff ffc1 	bl	b6cf4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b6d72:	b9e8      	cbnz	r0, b6db0 <_Z12batteryStatev+0x78>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b6d74:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b6d78:	ee07 3a90 	vmov	s15, r3
   b6d7c:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b6d80:	ee17 0a90 	vmov	r0, s15
   b6d84:	f008 ffe6 	bl	bfd54 <__aeabi_f2d>
   b6d88:	ec41 0b10 	vmov	d0, r0, r1
   b6d8c:	4620      	mov	r0, r4
   b6d8e:	f7ff f85f 	bl	b5e50 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b6d92:	f7ff f821 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b6d96:	f7ff f83b 	bl	b5e10 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b6d9a:	4b08      	ldr	r3, [pc, #32]	; (b6dbc <_Z12batteryStatev+0x84>)
   b6d9c:	ec51 0b10 	vmov	r0, r1, d0
   b6da0:	2200      	movs	r2, #0
   b6da2:	f009 fabf 	bl	c0324 <__aeabi_dcmpgt>
}
   b6da6:	3800      	subs	r0, #0
   b6da8:	bf18      	it	ne
   b6daa:	2001      	movne	r0, #1
   b6dac:	b002      	add	sp, #8
   b6dae:	bd10      	pop	{r4, pc}
            return -1.0f;
   b6db0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b6db4:	e7e4      	b.n	b6d80 <_Z12batteryStatev+0x48>
   b6db6:	bf00      	nop
   b6db8:	2003e430 	.word	0x2003e430
   b6dbc:	404e0000 	.word	0x404e0000

000b6dc0 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b6dc0:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b6dc2:	f7ff f809 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b6dc6:	4b11      	ldr	r3, [pc, #68]	; (b6e0c <_Z16takeMeasurementsv+0x4c>)
   b6dc8:	4604      	mov	r4, r0
   b6dca:	8818      	ldrh	r0, [r3, #0]
   b6dcc:	f008 fd7b 	bl	bf8c6 <analogRead>
   b6dd0:	f7ff ff16 	bl	b6c00 <_Z17tmp36TemperatureCi>
   b6dd4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b6dd8:	4620      	mov	r0, r4
   b6dda:	edcd 7a01 	vstr	s15, [sp, #4]
   b6dde:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b6de2:	f7ff f955 	bl	b6090 <_ZN17currentStatusData17set_internalTempCEh>
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b6de6:	f7fe fff7 	bl	b5dd8 <_ZN17currentStatusData8instanceEv>
   b6dea:	f7ff f8eb 	bl	b5fc4 <_ZNK17currentStatusData17get_internalTempCEv>
   b6dee:	4a08      	ldr	r2, [pc, #32]	; (b6e10 <_Z16takeMeasurementsv+0x50>)
   b6df0:	4603      	mov	r3, r0
   b6df2:	2110      	movs	r1, #16
   b6df4:	4807      	ldr	r0, [pc, #28]	; (b6e14 <_Z16takeMeasurementsv+0x54>)
   b6df6:	f005 fc29 	bl	bc64c <snprintf>
    batteryState();
   b6dfa:	f7ff ff9d 	bl	b6d38 <_Z12batteryStatev>
    isItSafeToCharge();
   b6dfe:	f7ff ff1b 	bl	b6c38 <_Z16isItSafeToChargev>
    getSignalStrength();
   b6e02:	f7ff ff3b 	bl	b6c7c <_Z17getSignalStrengthv>
}
   b6e06:	2001      	movs	r0, #1
   b6e08:	b002      	add	sp, #8
   b6e0a:	bd10      	pop	{r4, pc}
   b6e0c:	000c14c4 	.word	0x000c14c4
   b6e10:	000c17f9 	.word	0x000c17f9
   b6e14:	2003d718 	.word	0x2003d718

000b6e18 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b6e18:	4801      	ldr	r0, [pc, #4]	; (b6e20 <_GLOBAL__sub_I_batteryContext+0x8>)
   b6e1a:	2100      	movs	r1, #0
   b6e1c:	f006 b8f2 	b.w	bd004 <_ZN9FuelGaugeC1Eb>
   b6e20:	2003e430 	.word	0x2003e430

000b6e24 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b6e24:	4770      	bx	lr

000b6e26 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b6e26:	b510      	push	{r4, lr}
}
   b6e28:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b6e2a:	4604      	mov	r4, r0
}
   b6e2c:	f7fd f937 	bl	b409e <_ZdlPvj>
   b6e30:	4620      	mov	r0, r4
   b6e32:	bd10      	pop	{r4, pc}

000b6e34 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b6e34:	b510      	push	{r4, lr}
   b6e36:	4604      	mov	r4, r0
   b6e38:	b08a      	sub	sp, #40	; 0x28
   b6e3a:	4608      	mov	r0, r1
    attr.flags = 0;
   b6e3c:	f04f 0c20 	mov.w	ip, #32
   b6e40:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6e42:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b6e46:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6e4a:	460b      	mov	r3, r1
   b6e4c:	aa02      	add	r2, sp, #8
   b6e4e:	6821      	ldr	r1, [r4, #0]
   b6e50:	f005 fa70 	bl	bc334 <log_message_v>
}
   b6e54:	b00a      	add	sp, #40	; 0x28
   b6e56:	bd10      	pop	{r4, pc}

000b6e58 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b6e58:	b40e      	push	{r1, r2, r3}
   b6e5a:	b503      	push	{r0, r1, lr}
   b6e5c:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b6e5e:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b6e60:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6e64:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b6e66:	f7ff ffe5 	bl	b6e34 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6e6a:	b002      	add	sp, #8
   b6e6c:	f85d eb04 	ldr.w	lr, [sp], #4
   b6e70:	b003      	add	sp, #12
   b6e72:	4770      	bx	lr

000b6e74 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6e74:	b40e      	push	{r1, r2, r3}
   b6e76:	b503      	push	{r0, r1, lr}
   b6e78:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b6e7a:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6e7c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6e80:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b6e82:	f7ff ffd7 	bl	b6e34 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6e86:	b002      	add	sp, #8
   b6e88:	f85d eb04 	ldr.w	lr, [sp], #4
   b6e8c:	b003      	add	sp, #12
   b6e8e:	4770      	bx	lr

000b6e90 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6e90:	b510      	push	{r4, lr}
   b6e92:	7202      	strb	r2, [r0, #8]
   b6e94:	22ff      	movs	r2, #255	; 0xff
   b6e96:	8142      	strh	r2, [r0, #10]
   b6e98:	2200      	movs	r2, #0
   b6e9a:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b6e9e:	6142      	str	r2, [r0, #20]
   b6ea0:	7602      	strb	r2, [r0, #24]
   b6ea2:	61c2      	str	r2, [r0, #28]
    instance = this;
   b6ea4:	4a02      	ldr	r2, [pc, #8]	; (b6eb0 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6ea6:	4c03      	ldr	r4, [pc, #12]	; (b6eb4 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b6ea8:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6eaa:	e9c0 4100 	strd	r4, r1, [r0]
}
   b6eae:	bd10      	pop	{r4, pc}
   b6eb0:	2003e43c 	.word	0x2003e43c
   b6eb4:	000c1a78 	.word	0x000c1a78

000b6eb8 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b6eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6ebc:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b6ec0:	4604      	mov	r4, r0
   b6ec2:	4689      	mov	r9, r1
   b6ec4:	4616      	mov	r6, r2
   b6ec6:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b6ec8:	f1b8 0f00 	cmp.w	r8, #0
   b6ecc:	d002      	beq.n	b6ed4 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b6ece:	6840      	ldr	r0, [r0, #4]
   b6ed0:	f006 f982 	bl	bd1d8 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6ed4:	7a21      	ldrb	r1, [r4, #8]
   b6ed6:	6860      	ldr	r0, [r4, #4]
   b6ed8:	f006 f95b 	bl	bd192 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6edc:	6860      	ldr	r0, [r4, #4]
   b6ede:	6803      	ldr	r3, [r0, #0]
   b6ee0:	4649      	mov	r1, r9
   b6ee2:	689b      	ldr	r3, [r3, #8]
   b6ee4:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b6ee6:	6860      	ldr	r0, [r4, #4]
   b6ee8:	2100      	movs	r1, #0
   b6eea:	f006 f971 	bl	bd1d0 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6eee:	4605      	mov	r5, r0
   b6ef0:	bb00      	cbnz	r0, b6f34 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6ef2:	2301      	movs	r3, #1
   b6ef4:	7a21      	ldrb	r1, [r4, #8]
   b6ef6:	6860      	ldr	r0, [r4, #4]
   b6ef8:	463a      	mov	r2, r7
   b6efa:	f006 f938 	bl	bd16e <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b6efe:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6f00:	4603      	mov	r3, r0
        if (count == num) {
   b6f02:	d109      	bne.n	b6f18 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b6f04:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b6f06:	42be      	cmp	r6, r7
   b6f08:	d01c      	beq.n	b6f44 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b6f0a:	6860      	ldr	r0, [r4, #4]
   b6f0c:	6803      	ldr	r3, [r0, #0]
   b6f0e:	695b      	ldr	r3, [r3, #20]
   b6f10:	4798      	blx	r3
   b6f12:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b6f16:	e7f6      	b.n	b6f06 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b6f18:	490b      	ldr	r1, [pc, #44]	; (b6f48 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b6f1a:	480c      	ldr	r0, [pc, #48]	; (b6f4c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6f1c:	464a      	mov	r2, r9
   b6f1e:	f7ff ff9b 	bl	b6e58 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b6f22:	f1b8 0f00 	cmp.w	r8, #0
   b6f26:	d002      	beq.n	b6f2e <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b6f28:	6860      	ldr	r0, [r4, #4]
   b6f2a:	f006 f95e 	bl	bd1ea <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b6f2e:	4628      	mov	r0, r5
   b6f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b6f34:	4603      	mov	r3, r0
   b6f36:	4906      	ldr	r1, [pc, #24]	; (b6f50 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b6f38:	4804      	ldr	r0, [pc, #16]	; (b6f4c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6f3a:	464a      	mov	r2, r9
   b6f3c:	f7ff ff8c 	bl	b6e58 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6f40:	2500      	movs	r5, #0
   b6f42:	e7ee      	b.n	b6f22 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b6f44:	2501      	movs	r5, #1
   b6f46:	e7ec      	b.n	b6f22 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b6f48:	000c1828 	.word	0x000c1828
   b6f4c:	2003e438 	.word	0x2003e438
   b6f50:	000c184d 	.word	0x000c184d

000b6f54 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b6f54:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b6f56:	9300      	str	r3, [sp, #0]
   b6f58:	2301      	movs	r3, #1
   b6f5a:	f7ff ffad 	bl	b6eb8 <_ZN6AB180513readRegistersEhPhjb>
}
   b6f5e:	b003      	add	sp, #12
   b6f60:	f85d fb04 	ldr.w	pc, [sp], #4

000b6f64 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b6f64:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b6f66:	8943      	ldrh	r3, [r0, #10]
   b6f68:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b6f6a:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b6f6c:	d010      	beq.n	b6f90 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6f6e:	4e19      	ldr	r6, [pc, #100]	; (b6fd4 <_ZN6AB180510detectChipEv+0x70>)
   b6f70:	4d19      	ldr	r5, [pc, #100]	; (b6fd8 <_ZN6AB180510detectChipEv+0x74>)
   b6f72:	f004 ffa7 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b6f76:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b6f7a:	d209      	bcs.n	b6f90 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b6f7c:	8960      	ldrh	r0, [r4, #10]
   b6f7e:	f008 fc8f 	bl	bf8a0 <digitalRead>
   b6f82:	2801      	cmp	r0, #1
   b6f84:	d004      	beq.n	b6f90 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6f86:	4631      	mov	r1, r6
   b6f88:	4628      	mov	r0, r5
   b6f8a:	f7fd f8d8 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b6f8e:	e7f0      	b.n	b6f72 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b6f90:	2301      	movs	r3, #1
   b6f92:	f10d 0207 	add.w	r2, sp, #7
   b6f96:	2128      	movs	r1, #40	; 0x28
   b6f98:	4620      	mov	r0, r4
   b6f9a:	f7ff ffdb 	bl	b6f54 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b6f9e:	b930      	cbnz	r0, b6fae <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b6fa0:	480d      	ldr	r0, [pc, #52]	; (b6fd8 <_ZN6AB180510detectChipEv+0x74>)
   b6fa2:	490e      	ldr	r1, [pc, #56]	; (b6fdc <_ZN6AB180510detectChipEv+0x78>)
   b6fa4:	f7fd f8cb 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b6fa8:	2000      	movs	r0, #0
}
   b6faa:	b002      	add	sp, #8
   b6fac:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b6fae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6fb2:	2b18      	cmp	r3, #24
   b6fb4:	d1f4      	bne.n	b6fa0 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b6fb6:	2301      	movs	r3, #1
   b6fb8:	f10d 0207 	add.w	r2, sp, #7
   b6fbc:	2129      	movs	r1, #41	; 0x29
   b6fbe:	4620      	mov	r0, r4
   b6fc0:	f7ff ffc8 	bl	b6f54 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b6fc4:	2800      	cmp	r0, #0
   b6fc6:	d0eb      	beq.n	b6fa0 <_ZN6AB180510detectChipEv+0x3c>
   b6fc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6fcc:	2b05      	cmp	r3, #5
   b6fce:	d1e7      	bne.n	b6fa0 <_ZN6AB180510detectChipEv+0x3c>
   b6fd0:	e7eb      	b.n	b6faa <_ZN6AB180510detectChipEv+0x46>
   b6fd2:	bf00      	nop
   b6fd4:	000c1871 	.word	0x000c1871
   b6fd8:	2003e438 	.word	0x2003e438
   b6fdc:	000c1886 	.word	0x000c1886

000b6fe0 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b6fe0:	b507      	push	{r0, r1, r2, lr}
   b6fe2:	4613      	mov	r3, r2
    uint8_t value = 0;
   b6fe4:	2200      	movs	r2, #0
   b6fe6:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b6fea:	f10d 0207 	add.w	r2, sp, #7
   b6fee:	f7ff ffb1 	bl	b6f54 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b6ff2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b6ff6:	b003      	add	sp, #12
   b6ff8:	f85d fb04 	ldr.w	pc, [sp], #4

000b6ffc <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b6ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7000:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b7004:	4604      	mov	r4, r0
   b7006:	460f      	mov	r7, r1
   b7008:	4615      	mov	r5, r2
   b700a:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b700c:	f1b8 0f00 	cmp.w	r8, #0
   b7010:	d002      	beq.n	b7018 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b7012:	6840      	ldr	r0, [r0, #4]
   b7014:	f006 f8e0 	bl	bd1d8 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b7018:	7a21      	ldrb	r1, [r4, #8]
   b701a:	6860      	ldr	r0, [r4, #4]
   b701c:	f006 f8b9 	bl	bd192 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b7020:	6860      	ldr	r0, [r4, #4]
   b7022:	6803      	ldr	r3, [r0, #0]
   b7024:	4639      	mov	r1, r7
   b7026:	689b      	ldr	r3, [r3, #8]
   b7028:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b702a:	442e      	add	r6, r5
   b702c:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b702e:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b7030:	d005      	beq.n	b703e <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b7032:	6803      	ldr	r3, [r0, #0]
   b7034:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7038:	689b      	ldr	r3, [r3, #8]
   b703a:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b703c:	e7f6      	b.n	b702c <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b703e:	2101      	movs	r1, #1
   b7040:	f006 f8c6 	bl	bd1d0 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b7044:	4603      	mov	r3, r0
   b7046:	b170      	cbz	r0, b7066 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b7048:	4908      	ldr	r1, [pc, #32]	; (b706c <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b704a:	4809      	ldr	r0, [pc, #36]	; (b7070 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b704c:	463a      	mov	r2, r7
   b704e:	f7ff ff03 	bl	b6e58 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b7052:	2500      	movs	r5, #0
    }

    if (lock) {
   b7054:	f1b8 0f00 	cmp.w	r8, #0
   b7058:	d002      	beq.n	b7060 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b705a:	6860      	ldr	r0, [r4, #4]
   b705c:	f006 f8c5 	bl	bd1ea <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b7060:	4628      	mov	r0, r5
   b7062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b7066:	2501      	movs	r5, #1
   b7068:	e7f4      	b.n	b7054 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b706a:	bf00      	nop
   b706c:	000c1893 	.word	0x000c1893
   b7070:	2003e438 	.word	0x2003e438

000b7074 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b7074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7076:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b707a:	9300      	str	r3, [sp, #0]
   b707c:	f10d 020f 	add.w	r2, sp, #15
   b7080:	2301      	movs	r3, #1
   b7082:	f7ff ffbb 	bl	b6ffc <_ZN6AB180514writeRegistersEhPKhjb>
}
   b7086:	b005      	add	sp, #20
   b7088:	f85d fb04 	ldr.w	pc, [sp], #4

000b708c <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b708e:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b7090:	460c      	mov	r4, r1
   b7092:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b7094:	491a      	ldr	r1, [pc, #104]	; (b7100 <_ZN6AB18056setWDTEi+0x74>)
   b7096:	481b      	ldr	r0, [pc, #108]	; (b7104 <_ZN6AB18056setWDTEi+0x78>)
   b7098:	f7fd f851 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b709c:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b709e:	bfb8      	it	lt
   b70a0:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b70a2:	b97c      	cbnz	r4, b70c4 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b70a4:	2301      	movs	r3, #1
   b70a6:	4622      	mov	r2, r4
   b70a8:	211b      	movs	r1, #27
   b70aa:	4628      	mov	r0, r5
   b70ac:	f7ff ffe2 	bl	b7074 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b70b0:	4915      	ldr	r1, [pc, #84]	; (b7108 <_ZN6AB18056setWDTEi+0x7c>)
   b70b2:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b70b4:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b70b6:	4813      	ldr	r0, [pc, #76]	; (b7104 <_ZN6AB18056setWDTEi+0x78>)
   b70b8:	f7ff fedc 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b70bc:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b70be:	616c      	str	r4, [r5, #20]
}
   b70c0:	4630      	mov	r0, r6
   b70c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b70c4:	2c03      	cmp	r4, #3
   b70c6:	dd19      	ble.n	b70fc <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b70c8:	10a7      	asrs	r7, r4, #2
   b70ca:	2f1f      	cmp	r7, #31
   b70cc:	bfa8      	it	ge
   b70ce:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b70d0:	00ba      	lsls	r2, r7, #2
   b70d2:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b70d6:	2301      	movs	r3, #1
   b70d8:	b2d2      	uxtb	r2, r2
   b70da:	211b      	movs	r1, #27
   b70dc:	4628      	mov	r0, r5
   b70de:	f7ff ffc9 	bl	b7074 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b70e2:	463a      	mov	r2, r7
   b70e4:	4603      	mov	r3, r0
   b70e6:	4909      	ldr	r1, [pc, #36]	; (b710c <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b70e8:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b70ea:	4806      	ldr	r0, [pc, #24]	; (b7104 <_ZN6AB18056setWDTEi+0x78>)
   b70ec:	f7ff fec2 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b70f0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b70f4:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b70f6:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b70f8:	616f      	str	r7, [r5, #20]
   b70fa:	e7e1      	b.n	b70c0 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b70fc:	2701      	movs	r7, #1
   b70fe:	e7e7      	b.n	b70d0 <_ZN6AB18056setWDTEi+0x44>
   b7100:	000c18b8 	.word	0x000c18b8
   b7104:	2003e438 	.word	0x2003e438
   b7108:	000c18c2 	.word	0x000c18c2
   b710c:	000c18de 	.word	0x000c18de

000b7110 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b7110:	4b06      	ldr	r3, [pc, #24]	; (b712c <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b7112:	681a      	ldr	r2, [r3, #0]
   b7114:	b14a      	cbz	r2, b712a <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b7116:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b711a:	430b      	orrs	r3, r1
   b711c:	d105      	bne.n	b712a <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b711e:	68d3      	ldr	r3, [r2, #12]
   b7120:	b11b      	cbz	r3, b712a <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b7122:	2100      	movs	r1, #0
   b7124:	4610      	mov	r0, r2
   b7126:	f7ff bfb1 	b.w	b708c <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b712a:	4770      	bx	lr
   b712c:	2003e43c 	.word	0x2003e43c

000b7130 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b7130:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b7134:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b7138:	4605      	mov	r5, r0
   b713a:	4616      	mov	r6, r2
   b713c:	461f      	mov	r7, r3
    if (lock) {
   b713e:	f1b8 0f00 	cmp.w	r8, #0
   b7142:	d004      	beq.n	b714e <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b7144:	6840      	ldr	r0, [r0, #4]
   b7146:	9101      	str	r1, [sp, #4]
   b7148:	f006 f846 	bl	bd1d8 <_ZN7TwoWire4lockEv>
   b714c:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b714e:	9101      	str	r1, [sp, #4]
   b7150:	2300      	movs	r3, #0
   b7152:	f10d 020f 	add.w	r2, sp, #15
   b7156:	4628      	mov	r0, r5
   b7158:	f7ff fefc 	bl	b6f54 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b715c:	4604      	mov	r4, r0
   b715e:	b160      	cbz	r0, b717a <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b7160:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b7164:	ea03 0206 	and.w	r2, r3, r6
   b7168:	433a      	orrs	r2, r7
        if (newValue != value) {
   b716a:	4293      	cmp	r3, r2
   b716c:	d005      	beq.n	b717a <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b716e:	9901      	ldr	r1, [sp, #4]
   b7170:	2300      	movs	r3, #0
   b7172:	4628      	mov	r0, r5
   b7174:	f7ff ff7e 	bl	b7074 <_ZN6AB180513writeRegisterEhhb>
   b7178:	4604      	mov	r4, r0
    if (lock) {
   b717a:	f1b8 0f00 	cmp.w	r8, #0
   b717e:	d002      	beq.n	b7186 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b7180:	6868      	ldr	r0, [r5, #4]
   b7182:	f006 f832 	bl	bd1ea <_ZN7TwoWire6unlockEv>
}
   b7186:	4620      	mov	r0, r4
   b7188:	b004      	add	sp, #16
   b718a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b718e <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b718e:	b513      	push	{r0, r1, r4, lr}
   b7190:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b7192:	f10d 0207 	add.w	r2, sp, #7
   b7196:	f7ff fedd 	bl	b6f54 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b719a:	b128      	cbz	r0, b71a8 <_ZN6AB180510isBitClearEhhb+0x1a>
   b719c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b71a0:	421c      	tst	r4, r3
   b71a2:	bf0c      	ite	eq
   b71a4:	2001      	moveq	r0, #1
   b71a6:	2000      	movne	r0, #0
}
   b71a8:	b002      	add	sp, #8
   b71aa:	bd10      	pop	{r4, pc}

000b71ac <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b71ac:	b513      	push	{r0, r1, r4, lr}
   b71ae:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b71b0:	f10d 0207 	add.w	r2, sp, #7
   b71b4:	f7ff fece 	bl	b6f54 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b71b8:	b128      	cbz	r0, b71c6 <_ZN6AB18058isBitSetEhhb+0x1a>
   b71ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b71be:	421c      	tst	r4, r3
   b71c0:	bf14      	ite	ne
   b71c2:	2001      	movne	r0, #1
   b71c4:	2000      	moveq	r0, #0
}
   b71c6:	b002      	add	sp, #8
   b71c8:	bd10      	pop	{r4, pc}

000b71ca <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b71ca:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b71cc:	43d2      	mvns	r2, r2
   b71ce:	9300      	str	r3, [sp, #0]
   b71d0:	b2d2      	uxtb	r2, r2
   b71d2:	2300      	movs	r3, #0
   b71d4:	f7ff ffac 	bl	b7130 <_ZN6AB180512maskRegisterEhhhb>
}
   b71d8:	b003      	add	sp, #12
   b71da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b71e0 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b71e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b71e2:	2301      	movs	r3, #1
   b71e4:	f10d 0207 	add.w	r2, sp, #7
   b71e8:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b71ea:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b71ec:	f7ff feb2 	bl	b6f54 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b71f0:	4605      	mov	r5, r0
   b71f2:	b938      	cbnz	r0, b7204 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b71f4:	491e      	ldr	r1, [pc, #120]	; (b7270 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b71f6:	481f      	ldr	r0, [pc, #124]	; (b7274 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b71f8:	22ad      	movs	r2, #173	; 0xad
   b71fa:	f7ff fe2d 	bl	b6e58 <_ZNK5spark6Logger5errorEPKcz>
}
   b71fe:	4628      	mov	r0, r5
   b7200:	b003      	add	sp, #12
   b7202:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b7204:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7208:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b720c:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b7210:	d00b      	beq.n	b722a <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b7212:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b7214:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b7216:	210f      	movs	r1, #15
   b7218:	4620      	mov	r0, r4
   b721a:	f7ff ffd6 	bl	b71ca <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b721e:	4a16      	ldr	r2, [pc, #88]	; (b7278 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b7220:	4916      	ldr	r1, [pc, #88]	; (b727c <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b7222:	4814      	ldr	r0, [pc, #80]	; (b7274 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b7224:	f7fc ff8b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7228:	e7e9      	b.n	b71fe <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b722a:	2208      	movs	r2, #8
   b722c:	2117      	movs	r1, #23
   b722e:	4620      	mov	r0, r4
   b7230:	f7ff ffbc 	bl	b71ac <_ZN6AB18058isBitSetEhhb>
   b7234:	b118      	cbz	r0, b723e <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b7236:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b7238:	4a11      	ldr	r2, [pc, #68]	; (b7280 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b723a:	61e3      	str	r3, [r4, #28]
   b723c:	e7f0      	b.n	b7220 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b723e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7242:	071a      	lsls	r2, r3, #28
   b7244:	d509      	bpl.n	b725a <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b7246:	2303      	movs	r3, #3
   b7248:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b724a:	2208      	movs	r2, #8
   b724c:	2301      	movs	r3, #1
   b724e:	210f      	movs	r1, #15
   b7250:	4620      	mov	r0, r4
   b7252:	f7ff ffba 	bl	b71ca <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b7256:	4a0b      	ldr	r2, [pc, #44]	; (b7284 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b7258:	e7e2      	b.n	b7220 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b725a:	075b      	lsls	r3, r3, #29
   b725c:	d5cf      	bpl.n	b71fe <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b725e:	2204      	movs	r2, #4
   b7260:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b7262:	2301      	movs	r3, #1
   b7264:	210f      	movs	r1, #15
   b7266:	4620      	mov	r0, r4
   b7268:	f7ff ffaf 	bl	b71ca <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b726c:	4a06      	ldr	r2, [pc, #24]	; (b7288 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b726e:	e7d7      	b.n	b7220 <_ZN6AB180516updateWakeReasonEv+0x40>
   b7270:	000c1931 	.word	0x000c1931
   b7274:	2003e438 	.word	0x2003e438
   b7278:	000c1902 	.word	0x000c1902
   b727c:	000c1950 	.word	0x000c1950
   b7280:	000c190b 	.word	0x000c190b
   b7284:	000c191b 	.word	0x000c191b
   b7288:	000c192b 	.word	0x000c192b

000b728c <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b728c:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b728e:	9300      	str	r3, [sp, #0]
   b7290:	4613      	mov	r3, r2
   b7292:	22ff      	movs	r2, #255	; 0xff
   b7294:	f7ff ff4c 	bl	b7130 <_ZN6AB180512maskRegisterEhhhb>
}
   b7298:	b003      	add	sp, #12
   b729a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b72a0 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b72a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b72a2:	460f      	mov	r7, r1
   b72a4:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b72a6:	2301      	movs	r3, #1
   b72a8:	2200      	movs	r2, #0
   b72aa:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b72ac:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b72ae:	f7ff fee1 	bl	b7074 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b72b2:	4604      	mov	r4, r0
   b72b4:	b938      	cbnz	r0, b72c6 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b72b6:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b72ba:	491f      	ldr	r1, [pc, #124]	; (b7338 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b72bc:	481f      	ldr	r0, [pc, #124]	; (b733c <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b72be:	f7ff fdcb 	bl	b6e58 <_ZNK5spark6Logger5errorEPKcz>
}
   b72c2:	4620      	mov	r0, r4
   b72c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b72c6:	2301      	movs	r3, #1
   b72c8:	2223      	movs	r2, #35	; 0x23
   b72ca:	2118      	movs	r1, #24
   b72cc:	4628      	mov	r0, r5
   b72ce:	f7ff fed1 	bl	b7074 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b72d2:	4604      	mov	r4, r0
   b72d4:	b910      	cbnz	r0, b72dc <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b72d6:	f240 229b 	movw	r2, #667	; 0x29b
   b72da:	e7ee      	b.n	b72ba <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b72dc:	2fff      	cmp	r7, #255	; 0xff
   b72de:	bfa8      	it	ge
   b72e0:	27ff      	movge	r7, #255	; 0xff
   b72e2:	2f01      	cmp	r7, #1
   b72e4:	bfb8      	it	lt
   b72e6:	2701      	movlt	r7, #1
   b72e8:	2301      	movs	r3, #1
   b72ea:	b2fa      	uxtb	r2, r7
   b72ec:	2119      	movs	r1, #25
   b72ee:	4628      	mov	r0, r5
   b72f0:	f7ff fec0 	bl	b7074 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b72f4:	4604      	mov	r4, r0
   b72f6:	b910      	cbnz	r0, b72fe <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b72f8:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b72fc:	e7dd      	b.n	b72ba <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b72fe:	2301      	movs	r3, #1
   b7300:	2208      	movs	r2, #8
   b7302:	2112      	movs	r1, #18
   b7304:	4628      	mov	r0, r5
   b7306:	f7ff ffc1 	bl	b728c <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b730a:	4604      	mov	r4, r0
   b730c:	b910      	cbnz	r0, b7314 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b730e:	f240 22af 	movw	r2, #687	; 0x2af
   b7312:	e7d2      	b.n	b72ba <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b7314:	2e00      	cmp	r6, #0
   b7316:	bf14      	ite	ne
   b7318:	2203      	movne	r2, #3
   b731a:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b731c:	2301      	movs	r3, #1
   b731e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b7322:	2118      	movs	r1, #24
   b7324:	4628      	mov	r0, r5
   b7326:	f7ff fea5 	bl	b7074 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b732a:	4604      	mov	r4, r0
   b732c:	2800      	cmp	r0, #0
   b732e:	d1c8      	bne.n	b72c2 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b7330:	f240 22b9 	movw	r2, #697	; 0x2b9
   b7334:	e7c1      	b.n	b72ba <_ZN6AB180517setCountdownTimerEib+0x1a>
   b7336:	bf00      	nop
   b7338:	000c1961 	.word	0x000c1961
   b733c:	2003e438 	.word	0x2003e438

000b7340 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b7340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b7344:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b7346:	4605      	mov	r5, r0
   b7348:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b734a:	484f      	ldr	r0, [pc, #316]	; (b7488 <_ZN6AB180513deepPowerDownEi+0x148>)
   b734c:	494f      	ldr	r1, [pc, #316]	; (b748c <_ZN6AB180513deepPowerDownEi+0x14c>)
   b734e:	f7fc fef6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b7352:	2100      	movs	r1, #0
   b7354:	4628      	mov	r0, r5
   b7356:	f7ff fe99 	bl	b708c <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b735a:	4604      	mov	r4, r0
   b735c:	b948      	cbnz	r0, b7372 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b735e:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b7362:	494b      	ldr	r1, [pc, #300]	; (b7490 <_ZN6AB180513deepPowerDownEi+0x150>)
   b7364:	4848      	ldr	r0, [pc, #288]	; (b7488 <_ZN6AB180513deepPowerDownEi+0x148>)
   b7366:	f7ff fd77 	bl	b6e58 <_ZNK5spark6Logger5errorEPKcz>
}
   b736a:	4620      	mov	r0, r4
   b736c:	b003      	add	sp, #12
   b736e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b7372:	2301      	movs	r3, #1
   b7374:	461a      	mov	r2, r3
   b7376:	2130      	movs	r1, #48	; 0x30
   b7378:	4628      	mov	r0, r5
   b737a:	f7ff ff87 	bl	b728c <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b737e:	4604      	mov	r4, r0
   b7380:	b910      	cbnz	r0, b7388 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b7382:	f240 2205 	movw	r2, #517	; 0x205
   b7386:	e7ec      	b.n	b7362 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b7388:	2210      	movs	r2, #16
   b738a:	2301      	movs	r3, #1
   b738c:	4611      	mov	r1, r2
   b738e:	4628      	mov	r0, r5
   b7390:	f7ff ff1b 	bl	b71ca <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b7394:	4604      	mov	r4, r0
   b7396:	b910      	cbnz	r0, b739e <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b7398:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b739c:	e7e1      	b.n	b7362 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b739e:	2301      	movs	r3, #1
   b73a0:	2226      	movs	r2, #38	; 0x26
   b73a2:	2113      	movs	r1, #19
   b73a4:	4628      	mov	r0, r5
   b73a6:	f7ff fe65 	bl	b7074 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b73aa:	4604      	mov	r4, r0
   b73ac:	b910      	cbnz	r0, b73b4 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b73ae:	f240 2213 	movw	r2, #531	; 0x213
   b73b2:	e7d6      	b.n	b7362 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b73b4:	2601      	movs	r6, #1
   b73b6:	9600      	str	r6, [sp, #0]
   b73b8:	4633      	mov	r3, r6
   b73ba:	22fc      	movs	r2, #252	; 0xfc
   b73bc:	2111      	movs	r1, #17
   b73be:	4628      	mov	r0, r5
   b73c0:	f7ff feb6 	bl	b7130 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b73c4:	4604      	mov	r4, r0
   b73c6:	b910      	cbnz	r0, b73ce <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b73c8:	f240 221b 	movw	r2, #539	; 0x21b
   b73cc:	e7c9      	b.n	b7362 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b73ce:	2200      	movs	r2, #0
   b73d0:	4639      	mov	r1, r7
   b73d2:	4628      	mov	r0, r5
   b73d4:	f7ff ff64 	bl	b72a0 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b73d8:	4604      	mov	r4, r0
   b73da:	b910      	cbnz	r0, b73e2 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b73dc:	f240 2222 	movw	r2, #546	; 0x222
   b73e0:	e7bf      	b.n	b7362 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b73e2:	9600      	str	r6, [sp, #0]
   b73e4:	2302      	movs	r3, #2
   b73e6:	2277      	movs	r2, #119	; 0x77
   b73e8:	2110      	movs	r1, #16
   b73ea:	4628      	mov	r0, r5
   b73ec:	f7ff fea0 	bl	b7130 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b73f0:	4604      	mov	r4, r0
   b73f2:	b910      	cbnz	r0, b73fa <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b73f4:	f240 222b 	movw	r2, #555	; 0x22b
   b73f8:	e7b3      	b.n	b7362 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b73fa:	4633      	mov	r3, r6
   b73fc:	2204      	movs	r2, #4
   b73fe:	211c      	movs	r1, #28
   b7400:	4628      	mov	r0, r5
   b7402:	f7ff ff43 	bl	b728c <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7406:	4604      	mov	r4, r0
   b7408:	b910      	cbnz	r0, b7410 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b740a:	f240 2232 	movw	r2, #562	; 0x232
   b740e:	e7a8      	b.n	b7362 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b7410:	9600      	str	r6, [sp, #0]
   b7412:	2318      	movs	r3, #24
   b7414:	22e3      	movs	r2, #227	; 0xe3
   b7416:	2111      	movs	r1, #17
   b7418:	4628      	mov	r0, r5
   b741a:	f7ff fe89 	bl	b7130 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b741e:	4604      	mov	r4, r0
   b7420:	b910      	cbnz	r0, b7428 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b7422:	f240 2239 	movw	r2, #569	; 0x239
   b7426:	e79c      	b.n	b7362 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b7428:	4633      	mov	r3, r6
   b742a:	22c0      	movs	r2, #192	; 0xc0
   b742c:	2117      	movs	r1, #23
   b742e:	4628      	mov	r0, r5
   b7430:	f7ff fe20 	bl	b7074 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7434:	4604      	mov	r4, r0
   b7436:	b910      	cbnz	r0, b743e <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b7438:	f44f 7210 	mov.w	r2, #576	; 0x240
   b743c:	e791      	b.n	b7362 <_ZN6AB180513deepPowerDownEi+0x22>
   b743e:	f004 fd41 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b7442:	f8df 9054 	ldr.w	r9, [pc, #84]	; b7498 <_ZN6AB180513deepPowerDownEi+0x158>
   b7446:	f8df 8040 	ldr.w	r8, [pc, #64]	; b7488 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b744a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b744e:	4606      	mov	r6, r0
   b7450:	434f      	muls	r7, r1
   b7452:	f004 fd37 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
   b7456:	1b80      	subs	r0, r0, r6
   b7458:	42b8      	cmp	r0, r7
   b745a:	d20e      	bcs.n	b747a <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b745c:	2201      	movs	r2, #1
   b745e:	2117      	movs	r1, #23
   b7460:	4628      	mov	r0, r5
   b7462:	f7ff fdbd 	bl	b6fe0 <_ZN6AB180512readRegisterEhb>
   b7466:	4649      	mov	r1, r9
   b7468:	4602      	mov	r2, r0
   b746a:	4640      	mov	r0, r8
   b746c:	f7fc fe67 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b7470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b7474:	f005 f942 	bl	bc6fc <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b7478:	e7eb      	b.n	b7452 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b747a:	4906      	ldr	r1, [pc, #24]	; (b7494 <_ZN6AB180513deepPowerDownEi+0x154>)
   b747c:	4802      	ldr	r0, [pc, #8]	; (b7488 <_ZN6AB180513deepPowerDownEi+0x148>)
   b747e:	f7ff fceb 	bl	b6e58 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b7482:	f007 fdf0 	bl	bf066 <_ZN11SystemClass5resetEv>
    return true;
   b7486:	e770      	b.n	b736a <_ZN6AB180513deepPowerDownEi+0x2a>
   b7488:	2003e438 	.word	0x2003e438
   b748c:	000c198c 	.word	0x000c198c
   b7490:	000c1981 	.word	0x000c1981
   b7494:	000c19b2 	.word	0x000c19b2
   b7498:	000c199d 	.word	0x000c199d

000b749c <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b749c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b74a0:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b74a4:	4605      	mov	r5, r0
   b74a6:	460c      	mov	r4, r1
   b74a8:	4691      	mov	r9, r2
   b74aa:	461f      	mov	r7, r3
    if (lock) {
   b74ac:	f1ba 0f00 	cmp.w	sl, #0
   b74b0:	d002      	beq.n	b74b8 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b74b2:	6840      	ldr	r0, [r0, #4]
   b74b4:	f005 fe90 	bl	bd1d8 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b74b8:	b307      	cbz	r7, b74fc <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b74ba:	2f20      	cmp	r7, #32
   b74bc:	463e      	mov	r6, r7
   b74be:	bf28      	it	cs
   b74c0:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b74c2:	2c7f      	cmp	r4, #127	; 0x7f
   b74c4:	d826      	bhi.n	b7514 <_ZN6AB18057readRamEjPhjb+0x78>
   b74c6:	1933      	adds	r3, r6, r4
   b74c8:	2b80      	cmp	r3, #128	; 0x80
   b74ca:	d901      	bls.n	b74d0 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b74cc:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b74d0:	2301      	movs	r3, #1
   b74d2:	2204      	movs	r2, #4
   b74d4:	213f      	movs	r1, #63	; 0x3f
   b74d6:	4628      	mov	r0, r5
   b74d8:	f7ff fe77 	bl	b71ca <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b74dc:	2300      	movs	r3, #0
   b74de:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b74e2:	9300      	str	r3, [sp, #0]
   b74e4:	464a      	mov	r2, r9
   b74e6:	4633      	mov	r3, r6
   b74e8:	b2c9      	uxtb	r1, r1
   b74ea:	4628      	mov	r0, r5
   b74ec:	f7ff fce4 	bl	b6eb8 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b74f0:	4680      	mov	r8, r0
   b74f2:	b128      	cbz	r0, b7500 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b74f4:	4434      	add	r4, r6
        dataLen -= count;
   b74f6:	1bbf      	subs	r7, r7, r6
        data += count;
   b74f8:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b74fa:	e7dd      	b.n	b74b8 <_ZN6AB18057readRamEjPhjb+0x1c>
   b74fc:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b7500:	f1ba 0f00 	cmp.w	sl, #0
   b7504:	d002      	beq.n	b750c <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b7506:	6868      	ldr	r0, [r5, #4]
   b7508:	f005 fe6f 	bl	bd1ea <_ZN7TwoWire6unlockEv>
}
   b750c:	4640      	mov	r0, r8
   b750e:	b002      	add	sp, #8
   b7510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7514:	2301      	movs	r3, #1
   b7516:	2204      	movs	r2, #4
   b7518:	213f      	movs	r1, #63	; 0x3f
   b751a:	4628      	mov	r0, r5
   b751c:	f7ff feb6 	bl	b728c <_ZN6AB180514setRegisterBitEhhb>
   b7520:	e7dc      	b.n	b74dc <_ZN6AB18057readRamEjPhjb+0x40>

000b7522 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b7522:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7526:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b752a:	4605      	mov	r5, r0
   b752c:	460c      	mov	r4, r1
   b752e:	4691      	mov	r9, r2
   b7530:	461f      	mov	r7, r3
    if (lock) {
   b7532:	f1ba 0f00 	cmp.w	sl, #0
   b7536:	d002      	beq.n	b753e <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b7538:	6840      	ldr	r0, [r0, #4]
   b753a:	f005 fe4d 	bl	bd1d8 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b753e:	b307      	cbz	r7, b7582 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b7540:	2f1f      	cmp	r7, #31
   b7542:	463e      	mov	r6, r7
   b7544:	bf28      	it	cs
   b7546:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b7548:	2c7f      	cmp	r4, #127	; 0x7f
   b754a:	d826      	bhi.n	b759a <_ZN6AB18058writeRamEjPKhjb+0x78>
   b754c:	1933      	adds	r3, r6, r4
   b754e:	2b80      	cmp	r3, #128	; 0x80
   b7550:	d901      	bls.n	b7556 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b7552:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7556:	2301      	movs	r3, #1
   b7558:	2204      	movs	r2, #4
   b755a:	213f      	movs	r1, #63	; 0x3f
   b755c:	4628      	mov	r0, r5
   b755e:	f7ff fe34 	bl	b71ca <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b7562:	2300      	movs	r3, #0
   b7564:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b7568:	9300      	str	r3, [sp, #0]
   b756a:	464a      	mov	r2, r9
   b756c:	4633      	mov	r3, r6
   b756e:	b2c9      	uxtb	r1, r1
   b7570:	4628      	mov	r0, r5
   b7572:	f7ff fd43 	bl	b6ffc <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b7576:	4680      	mov	r8, r0
   b7578:	b128      	cbz	r0, b7586 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b757a:	4434      	add	r4, r6
        dataLen -= count;
   b757c:	1bbf      	subs	r7, r7, r6
        data += count;
   b757e:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b7580:	e7dd      	b.n	b753e <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b7582:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b7586:	f1ba 0f00 	cmp.w	sl, #0
   b758a:	d002      	beq.n	b7592 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b758c:	6868      	ldr	r0, [r5, #4]
   b758e:	f005 fe2c 	bl	bd1ea <_ZN7TwoWire6unlockEv>
}
   b7592:	4640      	mov	r0, r8
   b7594:	b002      	add	sp, #8
   b7596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b759a:	2301      	movs	r3, #1
   b759c:	2204      	movs	r2, #4
   b759e:	213f      	movs	r1, #63	; 0x3f
   b75a0:	4628      	mov	r0, r5
   b75a2:	f7ff fe73 	bl	b728c <_ZN6AB180514setRegisterBitEhhb>
   b75a6:	e7dc      	b.n	b7562 <_ZN6AB18058writeRamEjPKhjb+0x40>

000b75a8 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b75a8:	b530      	push	{r4, r5, lr}
   b75aa:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b75ac:	680d      	ldr	r5, [r1, #0]
   b75ae:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b75b2:	9503      	str	r5, [sp, #12]
   b75b4:	684d      	ldr	r5, [r1, #4]
   b75b6:	9502      	str	r5, [sp, #8]
   b75b8:	688d      	ldr	r5, [r1, #8]
   b75ba:	9501      	str	r5, [sp, #4]
   b75bc:	68c9      	ldr	r1, [r1, #12]
   b75be:	9100      	str	r1, [sp, #0]
   b75c0:	3301      	adds	r3, #1
   b75c2:	4904      	ldr	r1, [pc, #16]	; (b75d4 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b75c4:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b75c8:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b75ca:	f007 fce5 	bl	bef98 <_ZN6String6formatEPKcz>
}
   b75ce:	4620      	mov	r0, r4
   b75d0:	b005      	add	sp, #20
   b75d2:	bd30      	pop	{r4, r5, pc}
   b75d4:	000c19c4 	.word	0x000c19c4

000b75d8 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b75d8:	0903      	lsrs	r3, r0, #4
}
   b75da:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b75dc:	f000 000f 	and.w	r0, r0, #15
}
   b75e0:	fb02 0003 	mla	r0, r2, r3, r0
   b75e4:	4770      	bx	lr

000b75e6 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b75e6:	b538      	push	{r3, r4, r5, lr}
   b75e8:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b75ea:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b75ec:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b75ee:	f7ff fff3 	bl	b75d8 <_ZN6AB180510bcdToValueEh>
   b75f2:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b75f4:	7860      	ldrb	r0, [r4, #1]
   b75f6:	f7ff ffef 	bl	b75d8 <_ZN6AB180510bcdToValueEh>
   b75fa:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b75fc:	78a0      	ldrb	r0, [r4, #2]
   b75fe:	f7ff ffeb 	bl	b75d8 <_ZN6AB180510bcdToValueEh>
   b7602:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b7604:	78e0      	ldrb	r0, [r4, #3]
   b7606:	f7ff ffe7 	bl	b75d8 <_ZN6AB180510bcdToValueEh>
   b760a:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b760c:	7920      	ldrb	r0, [r4, #4]
   b760e:	f7ff ffe3 	bl	b75d8 <_ZN6AB180510bcdToValueEh>
   b7612:	3801      	subs	r0, #1
   b7614:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b7616:	b92d      	cbnz	r5, b7624 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b7618:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b761a:	7828      	ldrb	r0, [r5, #0]
   b761c:	f7ff ffdc 	bl	b75d8 <_ZN6AB180510bcdToValueEh>
   b7620:	6188      	str	r0, [r1, #24]
}
   b7622:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b7624:	7960      	ldrb	r0, [r4, #5]
   b7626:	f7ff ffd7 	bl	b75d8 <_ZN6AB180510bcdToValueEh>
   b762a:	3064      	adds	r0, #100	; 0x64
   b762c:	1da5      	adds	r5, r4, #6
   b762e:	6148      	str	r0, [r1, #20]
   b7630:	e7f3      	b.n	b761a <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b7634 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7634:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7636:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7638:	b088      	sub	sp, #32
   b763a:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b763c:	461a      	mov	r2, r3
   b763e:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7640:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7642:	f7ff fda4 	bl	b718e <_ZN6AB180510isBitClearEhhb>
   b7646:	b1f0      	cbz	r0, b7686 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b7648:	2308      	movs	r3, #8
   b764a:	2601      	movs	r6, #1
   b764c:	4620      	mov	r0, r4
   b764e:	9600      	str	r6, [sp, #0]
   b7650:	eb0d 0203 	add.w	r2, sp, r3
   b7654:	2100      	movs	r1, #0
   b7656:	f7ff fc2f 	bl	b6eb8 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b765a:	4604      	mov	r4, r0
   b765c:	b198      	cbz	r0, b7686 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b765e:	4632      	mov	r2, r6
   b7660:	4629      	mov	r1, r5
   b7662:	f10d 0009 	add.w	r0, sp, #9
   b7666:	f7ff ffbe 	bl	b75e6 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b766a:	a804      	add	r0, sp, #16
   b766c:	f7ff ff9c 	bl	b75a8 <_ZN6AB180510tmToStringEPK2tm>
   b7670:	4808      	ldr	r0, [pc, #32]	; (b7694 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b7672:	9a04      	ldr	r2, [sp, #16]
   b7674:	4908      	ldr	r1, [pc, #32]	; (b7698 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b7676:	f7fc fd62 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b767a:	a804      	add	r0, sp, #16
   b767c:	f007 fb34 	bl	bece8 <_ZN6StringD1Ev>
}
   b7680:	4620      	mov	r0, r4
   b7682:	b008      	add	sp, #32
   b7684:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b7686:	2224      	movs	r2, #36	; 0x24
   b7688:	2100      	movs	r1, #0
   b768a:	4628      	mov	r0, r5
   b768c:	f008 ff2c 	bl	c04e8 <memset>
   b7690:	2400      	movs	r4, #0
   b7692:	e7f5      	b.n	b7680 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b7694:	2003e438 	.word	0x2003e438
   b7698:	000c19e2 	.word	0x000c19e2

000b769c <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b769c:	b530      	push	{r4, r5, lr}
   b769e:	b08b      	sub	sp, #44	; 0x2c
   b76a0:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b76a2:	a901      	add	r1, sp, #4
   b76a4:	f7ff ffc6 	bl	b7634 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b76a8:	4604      	mov	r4, r0
   b76aa:	b120      	cbz	r0, b76b6 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b76ac:	a801      	add	r0, sp, #4
   b76ae:	f005 f81d 	bl	bc6ec <mktime>
   b76b2:	e9c5 0100 	strd	r0, r1, [r5]
}
   b76b6:	4620      	mov	r0, r4
   b76b8:	b00b      	add	sp, #44	; 0x2c
   b76ba:	bd30      	pop	{r4, r5, pc}

000b76bc <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b76bc:	230a      	movs	r3, #10
   b76be:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b76c2:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b76c6:	fb91 f2f3 	sdiv	r2, r1, r3
   b76ca:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b76ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b76d2:	b2c0      	uxtb	r0, r0
   b76d4:	4770      	bx	lr

000b76d6 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b76d6:	b570      	push	{r4, r5, r6, lr}
   b76d8:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b76da:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b76dc:	460c      	mov	r4, r1
   b76de:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b76e0:	f7ff ffec 	bl	b76bc <_ZN6AB180510valueToBcdEi>
   b76e4:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b76e6:	6868      	ldr	r0, [r5, #4]
   b76e8:	f7ff ffe8 	bl	b76bc <_ZN6AB180510valueToBcdEi>
   b76ec:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b76ee:	68a8      	ldr	r0, [r5, #8]
   b76f0:	f7ff ffe4 	bl	b76bc <_ZN6AB180510valueToBcdEi>
   b76f4:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b76f6:	68e8      	ldr	r0, [r5, #12]
   b76f8:	f7ff ffe0 	bl	b76bc <_ZN6AB180510valueToBcdEi>
   b76fc:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b76fe:	6928      	ldr	r0, [r5, #16]
   b7700:	3001      	adds	r0, #1
   b7702:	f7ff ffdb 	bl	b76bc <_ZN6AB180510valueToBcdEi>
   b7706:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b7708:	b92e      	cbnz	r6, b7716 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b770a:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b770c:	69a8      	ldr	r0, [r5, #24]
   b770e:	f7ff ffd5 	bl	b76bc <_ZN6AB180510valueToBcdEi>
   b7712:	7030      	strb	r0, [r6, #0]
}
   b7714:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b7716:	696a      	ldr	r2, [r5, #20]
   b7718:	2364      	movs	r3, #100	; 0x64
   b771a:	fb92 f0f3 	sdiv	r0, r2, r3
   b771e:	fb03 2010 	mls	r0, r3, r0, r2
   b7722:	f7ff ffcb 	bl	b76bc <_ZN6AB180510valueToBcdEi>
   b7726:	1da6      	adds	r6, r4, #6
   b7728:	7160      	strb	r0, [r4, #5]
   b772a:	e7ef      	b.n	b770c <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b772c <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b772c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b772e:	b087      	sub	sp, #28
   b7730:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b7732:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b7734:	4616      	mov	r6, r2
   b7736:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b7738:	f7ff ff36 	bl	b75a8 <_ZN6AB180510tmToStringEPK2tm>
   b773c:	481e      	ldr	r0, [pc, #120]	; (b77b8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b773e:	9a02      	ldr	r2, [sp, #8]
   b7740:	491e      	ldr	r1, [pc, #120]	; (b77bc <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b7742:	f7fc fcfc 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7746:	a802      	add	r0, sp, #8
   b7748:	f007 face 	bl	bece8 <_ZN6StringD1Ev>
    if (lock) {
   b774c:	b116      	cbz	r6, b7754 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b774e:	6868      	ldr	r0, [r5, #4]
   b7750:	f005 fd42 	bl	bd1d8 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b7754:	4620      	mov	r0, r4
   b7756:	2201      	movs	r2, #1
   b7758:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b775c:	2700      	movs	r7, #0
   b775e:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b7762:	f7ff ffb8 	bl	b76d6 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b7766:	2301      	movs	r3, #1
   b7768:	461a      	mov	r2, r3
   b776a:	2110      	movs	r1, #16
   b776c:	4628      	mov	r0, r5
   b776e:	f7ff fd8d 	bl	b728c <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b7772:	4604      	mov	r4, r0
   b7774:	b1e8      	cbz	r0, b77b2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b7776:	2308      	movs	r3, #8
   b7778:	9700      	str	r7, [sp, #0]
   b777a:	eb0d 0203 	add.w	r2, sp, r3
   b777e:	4639      	mov	r1, r7
   b7780:	4628      	mov	r0, r5
   b7782:	f7ff fc3b 	bl	b6ffc <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b7786:	4604      	mov	r4, r0
   b7788:	b160      	cbz	r0, b77a4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b778a:	2301      	movs	r3, #1
   b778c:	461a      	mov	r2, r3
   b778e:	2110      	movs	r1, #16
   b7790:	4628      	mov	r0, r5
   b7792:	f7ff fd1a 	bl	b71ca <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b7796:	b116      	cbz	r6, b779e <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b7798:	6868      	ldr	r0, [r5, #4]
   b779a:	f005 fd26 	bl	bd1ea <_ZN7TwoWire6unlockEv>
}
   b779e:	4620      	mov	r0, r4
   b77a0:	b007      	add	sp, #28
   b77a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b77a4:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b77a8:	4905      	ldr	r1, [pc, #20]	; (b77c0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b77aa:	4803      	ldr	r0, [pc, #12]	; (b77b8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b77ac:	f7ff fb54 	bl	b6e58 <_ZNK5spark6Logger5errorEPKcz>
   b77b0:	e7f1      	b.n	b7796 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b77b2:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b77b6:	e7f7      	b.n	b77a8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b77b8:	2003e438 	.word	0x2003e438
   b77bc:	000c19f0 	.word	0x000c19f0
   b77c0:	000c19fe 	.word	0x000c19fe

000b77c4 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b77c4:	b513      	push	{r0, r1, r4, lr}
   b77c6:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b77c8:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b77ca:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b77ce:	f008 fe3d 	bl	c044c <gmtime>
    return setRtcFromTm(tm, lock);
   b77d2:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b77d6:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b77d8:	4620      	mov	r0, r4
   b77da:	f7ff ffa7 	bl	b772c <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b77de:	b002      	add	sp, #8
   b77e0:	bd10      	pop	{r4, pc}
	...

000b77e4 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b77e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b77e6:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b77e8:	b089      	sub	sp, #36	; 0x24
   b77ea:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b77ec:	bb75      	cbnz	r5, b784c <_ZN6AB18054loopEv+0x68>
   b77ee:	f007 fe11 	bl	bf414 <_ZN9TimeClass7isValidEv>
   b77f2:	b358      	cbz	r0, b784c <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b77f4:	2600      	movs	r6, #0
   b77f6:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b77f8:	a904      	add	r1, sp, #16
   b77fa:	4628      	mov	r0, r5
        tm = 0;
   b77fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b7800:	f004 fe7c 	bl	bc4fc <spark_sync_time_last>
   b7804:	b310      	cbz	r0, b784c <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b7806:	2501      	movs	r5, #1
   b7808:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b780a:	f007 fe20 	bl	bf44e <_ZN9TimeClass3nowEv>
   b780e:	17c3      	asrs	r3, r0, #31
   b7810:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b7814:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b7816:	9500      	str	r5, [sp, #0]
   b7818:	4620      	mov	r0, r4
   b781a:	f7ff ffd3 	bl	b77c4 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b781e:	a902      	add	r1, sp, #8
   b7820:	4620      	mov	r0, r4
        time = 0;
   b7822:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b7826:	f7ff ff39 	bl	b769c <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b782a:	4b13      	ldr	r3, [pc, #76]	; (b7878 <_ZN6AB18054loopEv+0x94>)
   b782c:	4913      	ldr	r1, [pc, #76]	; (b787c <_ZN6AB18054loopEv+0x98>)
   b782e:	681b      	ldr	r3, [r3, #0]
   b7830:	9300      	str	r3, [sp, #0]
   b7832:	a804      	add	r0, sp, #16
   b7834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7838:	f007 fdaa 	bl	bf390 <_ZN9TimeClass6formatExPKc>
   b783c:	4810      	ldr	r0, [pc, #64]	; (b7880 <_ZN6AB18054loopEv+0x9c>)
   b783e:	9a04      	ldr	r2, [sp, #16]
   b7840:	4910      	ldr	r1, [pc, #64]	; (b7884 <_ZN6AB18054loopEv+0xa0>)
   b7842:	f7fc fc7c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7846:	a804      	add	r0, sp, #16
   b7848:	f007 fa4e 	bl	bece8 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b784c:	6963      	ldr	r3, [r4, #20]
   b784e:	b18b      	cbz	r3, b7874 <_ZN6AB18054loopEv+0x90>
   b7850:	f004 fb38 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b7854:	6923      	ldr	r3, [r4, #16]
   b7856:	1ac0      	subs	r0, r0, r3
   b7858:	6963      	ldr	r3, [r4, #20]
   b785a:	4298      	cmp	r0, r3
   b785c:	d30a      	bcc.n	b7874 <_ZN6AB18054loopEv+0x90>
   b785e:	f004 fb31 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b7862:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b7866:	6120      	str	r0, [r4, #16]
            setWDT();
   b7868:	4620      	mov	r0, r4
}
   b786a:	b009      	add	sp, #36	; 0x24
   b786c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b7870:	f7ff bc0c 	b.w	b708c <_ZN6AB18056setWDTEi>
}
   b7874:	b009      	add	sp, #36	; 0x24
   b7876:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7878:	2003d770 	.word	0x2003d770
   b787c:	2003e6ac 	.word	0x2003e6ac
   b7880:	2003e438 	.word	0x2003e438
   b7884:	000c1a19 	.word	0x000c1a19

000b7888 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b7888:	b530      	push	{r4, r5, lr}
   b788a:	4604      	mov	r4, r0
   b788c:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b788e:	b111      	cbz	r1, b7896 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b7890:	6840      	ldr	r0, [r0, #4]
   b7892:	f005 fc4f 	bl	bd134 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b7896:	4620      	mov	r0, r4
   b7898:	f7ff fb64 	bl	b6f64 <_ZN6AB180510detectChipEv>
   b789c:	ad06      	add	r5, sp, #24
   b789e:	2800      	cmp	r0, #0
   b78a0:	d037      	beq.n	b7912 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b78a2:	4620      	mov	r0, r4
   b78a4:	f7ff fc9c 	bl	b71e0 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b78a8:	2301      	movs	r3, #1
   b78aa:	461a      	mov	r2, r3
   b78ac:	2110      	movs	r1, #16
   b78ae:	4620      	mov	r0, r4
   b78b0:	f7ff fc6d 	bl	b718e <_ZN6AB180510isBitClearEhhb>
   b78b4:	b1d8      	cbz	r0, b78ee <_ZN6AB18055setupEb+0x66>
   b78b6:	f007 fdad 	bl	bf414 <_ZN9TimeClass7isValidEv>
   b78ba:	b9c0      	cbnz	r0, b78ee <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b78bc:	a902      	add	r1, sp, #8
   b78be:	4620      	mov	r0, r4
   b78c0:	f7ff feec 	bl	b769c <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b78c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b78c8:	f007 fca8 	bl	bf21c <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b78cc:	4b13      	ldr	r3, [pc, #76]	; (b791c <_ZN6AB18055setupEb+0x94>)
   b78ce:	4914      	ldr	r1, [pc, #80]	; (b7920 <_ZN6AB18055setupEb+0x98>)
   b78d0:	681b      	ldr	r3, [r3, #0]
   b78d2:	9300      	str	r3, [sp, #0]
   b78d4:	4628      	mov	r0, r5
   b78d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b78da:	f007 fd59 	bl	bf390 <_ZN9TimeClass6formatExPKc>
   b78de:	4811      	ldr	r0, [pc, #68]	; (b7924 <_ZN6AB18055setupEb+0x9c>)
   b78e0:	9a06      	ldr	r2, [sp, #24]
   b78e2:	4911      	ldr	r1, [pc, #68]	; (b7928 <_ZN6AB18055setupEb+0xa0>)
   b78e4:	f7fc fc2b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b78e8:	4628      	mov	r0, r5
   b78ea:	f007 f9fd 	bl	bece8 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b78ee:	4b0f      	ldr	r3, [pc, #60]	; (b792c <_ZN6AB18055setupEb+0xa4>)
   b78f0:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b78f2:	4b0f      	ldr	r3, [pc, #60]	; (b7930 <_ZN6AB18055setupEb+0xa8>)
   b78f4:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b78f6:	4b0f      	ldr	r3, [pc, #60]	; (b7934 <_ZN6AB18055setupEb+0xac>)
   b78f8:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b78fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b78fe:	2300      	movs	r3, #0
   b7900:	a802      	add	r0, sp, #8
   b7902:	9500      	str	r5, [sp, #0]
   b7904:	f7fd fcca 	bl	b529c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b7908:	4628      	mov	r0, r5
   b790a:	f7fd fb52 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
}
   b790e:	b00b      	add	sp, #44	; 0x2c
   b7910:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b7912:	4909      	ldr	r1, [pc, #36]	; (b7938 <_ZN6AB18055setupEb+0xb0>)
   b7914:	4803      	ldr	r0, [pc, #12]	; (b7924 <_ZN6AB18055setupEb+0x9c>)
   b7916:	f7ff fa9f 	bl	b6e58 <_ZNK5spark6Logger5errorEPKcz>
   b791a:	e7e8      	b.n	b78ee <_ZN6AB18055setupEb+0x66>
   b791c:	2003d770 	.word	0x2003d770
   b7920:	2003e6ac 	.word	0x2003e6ac
   b7924:	2003e438 	.word	0x2003e438
   b7928:	000c1a2f 	.word	0x000c1a2f
   b792c:	000b7111 	.word	0x000b7111
   b7930:	000b4f8f 	.word	0x000b4f8f
   b7934:	000b4f7b 	.word	0x000b4f7b
   b7938:	000c1a4c 	.word	0x000c1a4c

000b793c <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b793c:	4b01      	ldr	r3, [pc, #4]	; (b7944 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b793e:	4a02      	ldr	r2, [pc, #8]	; (b7948 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b7940:	601a      	str	r2, [r3, #0]
}
   b7942:	4770      	bx	lr
   b7944:	2003e438 	.word	0x2003e438
   b7948:	000c1a64 	.word	0x000c1a64

000b794c <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b794c:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b794e:	2301      	movs	r3, #1
   b7950:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b7952:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b7954:	4604      	mov	r4, r0
        if (th->func) {
   b7956:	b143      	cbz	r3, b796a <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b7958:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b795a:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b795c:	2301      	movs	r3, #1
   b795e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b7960:	2000      	movs	r0, #0
    }
   b7962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b7966:	f004 ba7d 	b.w	bbe64 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b796a:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b796c:	2800      	cmp	r0, #0
   b796e:	d0f5      	beq.n	b795c <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b7970:	6883      	ldr	r3, [r0, #8]
   b7972:	b90b      	cbnz	r3, b7978 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b7974:	f008 f886 	bl	bfa84 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7978:	68c3      	ldr	r3, [r0, #12]
   b797a:	e7ee      	b.n	b795a <_ZN6Thread3runEPv+0xe>

000b797c <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b797c:	2a01      	cmp	r2, #1
   b797e:	d102      	bne.n	b7986 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7980:	6001      	str	r1, [r0, #0]
      }
   b7982:	2000      	movs	r0, #0
   b7984:	4770      	bx	lr
	  switch (__op)
   b7986:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b7988:	bf04      	itt	eq
   b798a:	680b      	ldreq	r3, [r1, #0]
   b798c:	6003      	streq	r3, [r0, #0]
	      break;
   b798e:	e7f8      	b.n	b7982 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b7990 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b7990:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b7992:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b7994:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b7996:	b135      	cbz	r5, b79a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b7998:	4628      	mov	r0, r5
   b799a:	f7fd fb0a 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b799e:	2110      	movs	r1, #16
   b79a0:	4628      	mov	r0, r5
   b79a2:	f7fc fb7c 	bl	b409e <_ZdlPvj>
   b79a6:	4620      	mov	r0, r4
   b79a8:	2114      	movs	r1, #20
      }
   b79aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b79ae:	f7fc bb76 	b.w	b409e <_ZdlPvj>

000b79b2 <_ZN6Thread7disposeEv>:
    void dispose()
   b79b2:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b79b4:	6803      	ldr	r3, [r0, #0]
   b79b6:	4604      	mov	r4, r0
        if (!isValid())
   b79b8:	b1ab      	cbz	r3, b79e6 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b79ba:	6858      	ldr	r0, [r3, #4]
   b79bc:	f004 fa02 	bl	bbdc4 <os_thread_is_current>
   b79c0:	b988      	cbnz	r0, b79e6 <_ZN6Thread7disposeEv+0x34>
   b79c2:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b79c4:	7c5a      	ldrb	r2, [r3, #17]
   b79c6:	b912      	cbnz	r2, b79ce <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b79c8:	6858      	ldr	r0, [r3, #4]
   b79ca:	f004 fa03 	bl	bbdd4 <os_thread_join>
        os_thread_cleanup(d_->handle);
   b79ce:	6823      	ldr	r3, [r4, #0]
   b79d0:	6858      	ldr	r0, [r3, #4]
   b79d2:	f004 fa07 	bl	bbde4 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b79d6:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b79d8:	2300      	movs	r3, #0
   b79da:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b79dc:	b118      	cbz	r0, b79e6 <_ZN6Thread7disposeEv+0x34>
    }
   b79de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b79e2:	f7ff bfd5 	b.w	b7990 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b79e6:	bd10      	pop	{r4, pc}

000b79e8 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b79e8:	4a05      	ldr	r2, [pc, #20]	; (b7a00 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b79ea:	6002      	str	r2, [r0, #0]
   b79ec:	2200      	movs	r2, #0
   b79ee:	6042      	str	r2, [r0, #4]
   b79f0:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b79f2:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b79f6:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b79fa:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b79fe:	4770      	bx	lr
   b7a00:	000c1aa4 	.word	0x000c1aa4

000b7a04 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b7a04:	b510      	push	{r4, lr}
    if (!_instance) {
   b7a06:	4c07      	ldr	r4, [pc, #28]	; (b7a24 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b7a08:	6823      	ldr	r3, [r4, #0]
   b7a0a:	b943      	cbnz	r3, b7a1e <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b7a0c:	f240 4064 	movw	r0, #1124	; 0x464
   b7a10:	f7fc fb41 	bl	b4096 <_Znwj>
   b7a14:	4603      	mov	r3, r0
   b7a16:	b108      	cbz	r0, b7a1c <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b7a18:	f7ff ffe6 	bl	b79e8 <_ZN19BackgroundPublishRKC1Ev>
   b7a1c:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b7a1e:	6820      	ldr	r0, [r4, #0]
   b7a20:	bd10      	pop	{r4, pc}
   b7a22:	bf00      	nop
   b7a24:	2003e440 	.word	0x2003e440

000b7a28 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b7a28:	b538      	push	{r3, r4, r5, lr}
   b7a2a:	4604      	mov	r4, r0
    if(thread)
   b7a2c:	6840      	ldr	r0, [r0, #4]
   b7a2e:	b190      	cbz	r0, b7a56 <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b7a30:	2302      	movs	r3, #2
   b7a32:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b7a34:	f7ff ffbd 	bl	b79b2 <_ZN6Thread7disposeEv>
        delete thread;
   b7a38:	6865      	ldr	r5, [r4, #4]
   b7a3a:	b155      	cbz	r5, b7a52 <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b7a3c:	4628      	mov	r0, r5
   b7a3e:	f7ff ffb8 	bl	b79b2 <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b7a42:	6828      	ldr	r0, [r5, #0]
   b7a44:	b108      	cbz	r0, b7a4a <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b7a46:	f7ff ffa3 	bl	b7990 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b7a4a:	2104      	movs	r1, #4
   b7a4c:	4628      	mov	r0, r5
   b7a4e:	f7fc fb26 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b7a52:	2300      	movs	r3, #0
   b7a54:	6063      	str	r3, [r4, #4]
    }
}
   b7a56:	bd38      	pop	{r3, r4, r5, pc}

000b7a58 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b7a58:	b510      	push	{r4, lr}
   b7a5a:	4b05      	ldr	r3, [pc, #20]	; (b7a70 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b7a5c:	6003      	str	r3, [r0, #0]
   b7a5e:	4604      	mov	r4, r0
    stop();
   b7a60:	f7ff ffe2 	bl	b7a28 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b7a64:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b7a68:	f7fd faa3 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
}
   b7a6c:	4620      	mov	r0, r4
   b7a6e:	bd10      	pop	{r4, pc}
   b7a70:	000c1aa4 	.word	0x000c1aa4

000b7a74 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b7a74:	b510      	push	{r4, lr}
   b7a76:	4604      	mov	r4, r0
}
   b7a78:	f7ff ffee 	bl	b7a58 <_ZN19BackgroundPublishRKD1Ev>
   b7a7c:	4620      	mov	r0, r4
   b7a7e:	f240 4164 	movw	r1, #1124	; 0x464
   b7a82:	f7fc fb0c 	bl	b409e <_ZdlPvj>
   b7a86:	4620      	mov	r0, r4
   b7a88:	bd10      	pop	{r4, pc}

000b7a8a <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b7a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7a8c:	4604      	mov	r4, r0
   b7a8e:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b7a90:	f100 060d 	add.w	r6, r0, #13
   b7a94:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b7a98:	7b23      	ldrb	r3, [r4, #12]
   b7a9a:	b91b      	cbnz	r3, b7aa4 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b7a9c:	2001      	movs	r0, #1
   b7a9e:	f004 fe2d 	bl	bc6fc <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b7aa2:	e7f9      	b.n	b7a98 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b7aa4:	7b23      	ldrb	r3, [r4, #12]
   b7aa6:	2b02      	cmp	r3, #2
   b7aa8:	d064      	beq.n	b7b74 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b7aaa:	68a0      	ldr	r0, [r4, #8]
   b7aac:	f004 f9aa 	bl	bbe04 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b7ab0:	68a0      	ldr	r0, [r4, #8]
   b7ab2:	f004 f9af 	bl	bbe14 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b7ab6:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b7aba:	f88d 3000 	strb.w	r3, [sp]
   b7abe:	463a      	mov	r2, r7
   b7ac0:	233c      	movs	r3, #60	; 0x3c
   b7ac2:	4631      	mov	r1, r6
   b7ac4:	a806      	add	r0, sp, #24
   b7ac6:	f005 f8e7 	bl	bcc98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b7aca:	9d06      	ldr	r5, [sp, #24]
   b7acc:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b7ace:	b933      	cbnz	r3, b7ade <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b7ad0:	7b23      	ldrb	r3, [r4, #12]
   b7ad2:	2b02      	cmp	r3, #2
   b7ad4:	d003      	beq.n	b7ade <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b7ad6:	2001      	movs	r0, #1
   b7ad8:	f004 fe10 	bl	bc6fc <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b7adc:	e7f5      	b.n	b7aca <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b7ade:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b7ae2:	b31b      	cbz	r3, b7b2c <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b7ae4:	2000      	movs	r0, #0
   b7ae6:	f004 fc6f 	bl	bc3c8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7aea:	b120      	cbz	r0, b7af6 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b7aec:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b7aee:	b913      	cbnz	r3, b7af6 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b7af0:	f004 fccc 	bl	bc48c <spark_process>
    }
   b7af4:	e7fa      	b.n	b7aec <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b7af6:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b7af8:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b7afc:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b7afe:	1e59      	subs	r1, r3, #1
   b7b00:	424b      	negs	r3, r1
   b7b02:	414b      	adcs	r3, r1
   b7b04:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b7b08:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b7b0c:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b7b10:	b90b      	cbnz	r3, b7b16 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b7b12:	f007 ffb7 	bl	bfa84 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7b16:	ab05      	add	r3, sp, #20
   b7b18:	9300      	str	r3, [sp, #0]
   b7b1a:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b7b1e:	ab04      	add	r3, sp, #16
   b7b20:	aa03      	add	r2, sp, #12
   b7b22:	f10d 010b 	add.w	r1, sp, #11
   b7b26:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b7b2a:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b7b2c:	68a0      	ldr	r0, [r4, #8]
   b7b2e:	f004 f969 	bl	bbe04 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b7b32:	7b23      	ldrb	r3, [r4, #12]
   b7b34:	2b02      	cmp	r3, #2
   b7b36:	d017      	beq.n	b7b68 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b7b38:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b7b3c:	2500      	movs	r5, #0
   b7b3e:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b7b42:	b143      	cbz	r3, b7b56 <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b7b44:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7b48:	2203      	movs	r2, #3
   b7b4a:	4608      	mov	r0, r1
   b7b4c:	4798      	blx	r3
	    _M_manager = nullptr;
   b7b4e:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b7b52:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b7b56:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b7b58:	68a0      	ldr	r0, [r4, #8]
   b7b5a:	7323      	strb	r3, [r4, #12]
   b7b5c:	f004 f95a 	bl	bbe14 <os_mutex_unlock>
   b7b60:	a807      	add	r0, sp, #28
   b7b62:	f7fe fdcf 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7b66:	e797      	b.n	b7a98 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b7b68:	68a0      	ldr	r0, [r4, #8]
   b7b6a:	f004 f953 	bl	bbe14 <os_mutex_unlock>
   b7b6e:	a807      	add	r0, sp, #28
   b7b70:	f7fe fdc8 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b7b74:	b009      	add	sp, #36	; 0x24
   b7b76:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7b78 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b7b78:	6800      	ldr	r0, [r0, #0]
   b7b7a:	f7ff bf86 	b.w	b7a8a <_ZN19BackgroundPublishRK8thread_fEv>

000b7b7e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7b7e:	b513      	push	{r0, r1, r4, lr}
   b7b80:	460b      	mov	r3, r1
   b7b82:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7b84:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7b88:	466c      	mov	r4, sp
   b7b8a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7b8e:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7b92:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7b96:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7b9a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7b9e:	b002      	add	sp, #8
   b7ba0:	bd10      	pop	{r4, pc}
	...

000b7ba4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b7ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7ba8:	4606      	mov	r6, r0
   b7baa:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b7bac:	2014      	movs	r0, #20
   b7bae:	4926      	ldr	r1, [pc, #152]	; (b7c48 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b7bb0:	4617      	mov	r7, r2
   b7bb2:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b7bb4:	f007 ff5c 	bl	bfa70 <_ZnwjRKSt9nothrow_t>
   b7bb8:	4604      	mov	r4, r0
   b7bba:	b130      	cbz	r0, b7bca <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b7bbc:	2000      	movs	r0, #0
            exited(false) {
   b7bbe:	e9c4 0000 	strd	r0, r0, [r4]
   b7bc2:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b7bc6:	7420      	strb	r0, [r4, #16]
   b7bc8:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b7bca:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b7bcc:	2c00      	cmp	r4, #0
   b7bce:	d031      	beq.n	b7c34 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b7bd0:	491d      	ldr	r1, [pc, #116]	; (b7c48 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b7bd2:	2010      	movs	r0, #16
   b7bd4:	f007 ff4c 	bl	bfa70 <_ZnwjRKSt9nothrow_t>
   b7bd8:	4605      	mov	r5, r0
   b7bda:	b168      	cbz	r0, b7bf8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b7bdc:	2300      	movs	r3, #0
   b7bde:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7be0:	4601      	mov	r1, r0
   b7be2:	4638      	mov	r0, r7
   b7be4:	f7ff ffcb 	bl	b7b7e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7be8:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7bea:	68aa      	ldr	r2, [r5, #8]
   b7bec:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7bee:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7bf0:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7bf2:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7bf4:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7bf6:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b7bf8:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b7bfa:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b7bfc:	b137      	cbz	r7, b7c0c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b7bfe:	4638      	mov	r0, r7
   b7c00:	f7fd f9d7 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b7c04:	2110      	movs	r1, #16
   b7c06:	4638      	mov	r0, r7
   b7c08:	f7fc fa49 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7c0c:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b7c0e:	6803      	ldr	r3, [r0, #0]
   b7c10:	b183      	cbz	r3, b7c34 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b7c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7c14:	464a      	mov	r2, r9
   b7c16:	e9cd 0300 	strd	r0, r3, [sp]
   b7c1a:	4641      	mov	r1, r8
   b7c1c:	4b0b      	ldr	r3, [pc, #44]	; (b7c4c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b7c1e:	3004      	adds	r0, #4
   b7c20:	f004 f8c8 	bl	bbdb4 <os_thread_create>
   b7c24:	b930      	cbnz	r0, b7c34 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b7c26:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b7c28:	7c1b      	ldrb	r3, [r3, #16]
   b7c2a:	b94b      	cbnz	r3, b7c40 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b7c2c:	2001      	movs	r0, #1
   b7c2e:	f004 f939 	bl	bbea4 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b7c32:	e7f8      	b.n	b7c26 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b7c34:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b7c36:	2300      	movs	r3, #0
   b7c38:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b7c3a:	b108      	cbz	r0, b7c40 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b7c3c:	f7ff fea8 	bl	b7990 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b7c40:	4630      	mov	r0, r6
   b7c42:	b003      	add	sp, #12
   b7c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7c48:	000c2520 	.word	0x000c2520
   b7c4c:	000b794d 	.word	0x000b794d

000b7c50 <_ZN19BackgroundPublishRK5startEv>:
{
   b7c50:	b530      	push	{r4, r5, lr}
    if(!thread)
   b7c52:	6843      	ldr	r3, [r0, #4]
{
   b7c54:	b087      	sub	sp, #28
   b7c56:	4604      	mov	r4, r0
    if(!thread)
   b7c58:	b9c3      	cbnz	r3, b7c8c <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b7c5a:	3008      	adds	r0, #8
   b7c5c:	f004 f8ca 	bl	bbdf4 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b7c60:	4b0b      	ldr	r3, [pc, #44]	; (b7c90 <_ZN19BackgroundPublishRK5startEv+0x40>)
   b7c62:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b7c64:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b7c66:	4b0b      	ldr	r3, [pc, #44]	; (b7c94 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b7c68:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b7c6a:	9304      	str	r3, [sp, #16]
   b7c6c:	f7fc fa13 	bl	b4096 <_Znwj>
   b7c70:	4605      	mov	r5, r0
   b7c72:	b138      	cbz	r0, b7c84 <_ZN19BackgroundPublishRK5startEv+0x34>
   b7c74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b7c78:	9300      	str	r3, [sp, #0]
   b7c7a:	4907      	ldr	r1, [pc, #28]	; (b7c98 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b7c7c:	2302      	movs	r3, #2
   b7c7e:	aa02      	add	r2, sp, #8
   b7c80:	f7ff ff90 	bl	b7ba4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b7c84:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b7c86:	a802      	add	r0, sp, #8
   b7c88:	f7fd f993 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
}
   b7c8c:	b007      	add	sp, #28
   b7c8e:	bd30      	pop	{r4, r5, pc}
   b7c90:	000b7b79 	.word	0x000b7b79
   b7c94:	000b797d 	.word	0x000b797d
   b7c98:	000c1a88 	.word	0x000c1a88

000b7c9c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b7c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7ca0:	4604      	mov	r4, r0
   b7ca2:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b7ca4:	6880      	ldr	r0, [r0, #8]
   b7ca6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b7ca8:	4698      	mov	r8, r3
   b7caa:	460d      	mov	r5, r1
   b7cac:	4616      	mov	r6, r2
   b7cae:	f004 f8a9 	bl	bbe04 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b7cb2:	6863      	ldr	r3, [r4, #4]
   b7cb4:	b11b      	cbz	r3, b7cbe <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b7cb6:	7b23      	ldrb	r3, [r4, #12]
   b7cb8:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b7cbc:	b133      	cbz	r3, b7ccc <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b7cbe:	68a0      	ldr	r0, [r4, #8]
   b7cc0:	f004 f8a8 	bl	bbe14 <os_mutex_unlock>
    {
        return false;
   b7cc4:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b7cc6:	b005      	add	sp, #20
   b7cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7ccc:	68a0      	ldr	r0, [r4, #8]
   b7cce:	f004 f8a1 	bl	bbe14 <os_mutex_unlock>
    if(!name)
   b7cd2:	2d00      	cmp	r5, #0
   b7cd4:	d03d      	beq.n	b7d52 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b7cd6:	2240      	movs	r2, #64	; 0x40
   b7cd8:	4629      	mov	r1, r5
   b7cda:	f104 000d 	add.w	r0, r4, #13
   b7cde:	f008 fcda 	bl	c0696 <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b7ce2:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b7ce6:	b38e      	cbz	r6, b7d4c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b7ce8:	f240 4201 	movw	r2, #1025	; 0x401
   b7cec:	4631      	mov	r1, r6
   b7cee:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b7cf2:	f008 fcd0 	bl	c0696 <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b7cf6:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b7cfa:	2300      	movs	r3, #0
   b7cfc:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b7cfe:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b7d00:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b7d04:	b13b      	cbz	r3, b7d16 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7d06:	2202      	movs	r2, #2
   b7d08:	4639      	mov	r1, r7
   b7d0a:	4668      	mov	r0, sp
   b7d0c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7d0e:	68fb      	ldr	r3, [r7, #12]
   b7d10:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b7d12:	68bb      	ldr	r3, [r7, #8]
   b7d14:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b7d16:	4629      	mov	r1, r5
   b7d18:	4668      	mov	r0, sp
   b7d1a:	f7ff ff30 	bl	b7b7e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7d1e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7d20:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b7d24:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7d28:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7d2a:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b7d2c:	4668      	mov	r0, sp
   b7d2e:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b7d32:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b7d36:	9203      	str	r2, [sp, #12]
   b7d38:	f7fd f93b 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b7d3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b7d3e:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b7d42:	2001      	movs	r0, #1
    event_flags = flags;
   b7d44:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b7d48:	7320      	strb	r0, [r4, #12]
    return true;
   b7d4a:	e7bc      	b.n	b7cc6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b7d4c:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b7d50:	e7d3      	b.n	b7cfa <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b7d52:	4628      	mov	r0, r5
   b7d54:	e7b7      	b.n	b7cc6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
	...

000b7d58 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b7d58:	b510      	push	{r4, lr}
   b7d5a:	4b05      	ldr	r3, [pc, #20]	; (b7d70 <_ZN10JsonBufferD1Ev+0x18>)
   b7d5c:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b7d5e:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b7d60:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b7d62:	b91b      	cbnz	r3, b7d6c <_ZN10JsonBufferD1Ev+0x14>
   b7d64:	6840      	ldr	r0, [r0, #4]
   b7d66:	b108      	cbz	r0, b7d6c <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b7d68:	f004 fc50 	bl	bc60c <free>
	}
}
   b7d6c:	4620      	mov	r0, r4
   b7d6e:	bd10      	pop	{r4, pc}
   b7d70:	000c1abc 	.word	0x000c1abc

000b7d74 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b7d74:	b510      	push	{r4, lr}
   b7d76:	4604      	mov	r4, r0
}
   b7d78:	f7ff ffee 	bl	b7d58 <_ZN10JsonBufferD1Ev>
   b7d7c:	4620      	mov	r0, r4
   b7d7e:	2114      	movs	r1, #20
   b7d80:	f7fc f98d 	bl	b409e <_ZdlPvj>
   b7d84:	4620      	mov	r0, r4
   b7d86:	bd10      	pop	{r4, pc}

000b7d88 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b7d88:	b510      	push	{r4, lr}
   b7d8a:	4b03      	ldr	r3, [pc, #12]	; (b7d98 <_ZN10JsonWriterD1Ev+0x10>)
   b7d8c:	6003      	str	r3, [r0, #0]
   b7d8e:	4604      	mov	r4, r0
   b7d90:	f7ff ffe2 	bl	b7d58 <_ZN10JsonBufferD1Ev>

}
   b7d94:	4620      	mov	r0, r4
   b7d96:	bd10      	pop	{r4, pc}
   b7d98:	000c1adc 	.word	0x000c1adc

000b7d9c <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b7d9c:	b510      	push	{r4, lr}
   b7d9e:	4604      	mov	r4, r0
}
   b7da0:	f7ff fff2 	bl	b7d88 <_ZN10JsonWriterD1Ev>
   b7da4:	4620      	mov	r0, r4
   b7da6:	2130      	movs	r1, #48	; 0x30
   b7da8:	f7fc f979 	bl	b409e <_ZdlPvj>
   b7dac:	4620      	mov	r0, r4
   b7dae:	bd10      	pop	{r4, pc}

000b7db0 <_ZN12JsonModifierD1Ev>:

JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {

}

JsonModifier::~JsonModifier() {
   b7db0:	b510      	push	{r4, lr}
   b7db2:	4b03      	ldr	r3, [pc, #12]	; (b7dc0 <_ZN12JsonModifierD1Ev+0x10>)
   b7db4:	6003      	str	r3, [r0, #0]
   b7db6:	4604      	mov	r4, r0
   b7db8:	f7ff ffe6 	bl	b7d88 <_ZN10JsonWriterD1Ev>

}
   b7dbc:	4620      	mov	r0, r4
   b7dbe:	bd10      	pop	{r4, pc}
   b7dc0:	000c1aec 	.word	0x000c1aec

000b7dc4 <_ZN12JsonModifierD0Ev>:
JsonModifier::~JsonModifier() {
   b7dc4:	b510      	push	{r4, lr}
   b7dc6:	4604      	mov	r4, r0
}
   b7dc8:	f7ff fff2 	bl	b7db0 <_ZN12JsonModifierD1Ev>
   b7dcc:	4620      	mov	r0, r4
   b7dce:	2140      	movs	r1, #64	; 0x40
   b7dd0:	f7fc f965 	bl	b409e <_ZdlPvj>
   b7dd4:	4620      	mov	r0, r4
   b7dd6:	bd10      	pop	{r4, pc}

000b7dd8 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b7dd8:	b510      	push	{r4, lr}
   b7dda:	4b07      	ldr	r3, [pc, #28]	; (b7df8 <_ZN10JsonParserD1Ev+0x20>)
   b7ddc:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b7dde:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b7de0:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b7de2:	b91b      	cbnz	r3, b7dec <_ZN10JsonParserD1Ev+0x14>
   b7de4:	6940      	ldr	r0, [r0, #20]
   b7de6:	b108      	cbz	r0, b7dec <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b7de8:	f004 fc10 	bl	bc60c <free>
JsonParser::~JsonParser() {
   b7dec:	4620      	mov	r0, r4
   b7dee:	f7ff ffb3 	bl	b7d58 <_ZN10JsonBufferD1Ev>
}
   b7df2:	4620      	mov	r0, r4
   b7df4:	bd10      	pop	{r4, pc}
   b7df6:	bf00      	nop
   b7df8:	000c1acc 	.word	0x000c1acc

000b7dfc <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b7dfc:	b510      	push	{r4, lr}
   b7dfe:	4604      	mov	r4, r0
}
   b7e00:	f7ff ffea 	bl	b7dd8 <_ZN10JsonParserD1Ev>
   b7e04:	4620      	mov	r0, r4
   b7e06:	212c      	movs	r1, #44	; 0x2c
   b7e08:	f7fc f949 	bl	b409e <_ZdlPvj>
   b7e0c:	4620      	mov	r0, r4
   b7e0e:	bd10      	pop	{r4, pc}

000b7e10 <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
   b7e10:	4a03      	ldr	r2, [pc, #12]	; (b7e20 <_ZN10JsonBufferC1Ev+0x10>)
   b7e12:	6002      	str	r2, [r0, #0]
   b7e14:	2200      	movs	r2, #0
   b7e16:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b7e1a:	60c2      	str	r2, [r0, #12]
   b7e1c:	7402      	strb	r2, [r0, #16]
}
   b7e1e:	4770      	bx	lr
   b7e20:	000c1abc 	.word	0x000c1abc

000b7e24 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b7e24:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b7e26:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b7e28:	4604      	mov	r4, r0
   b7e2a:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b7e2c:	b10b      	cbz	r3, b7e32 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b7e2e:	2000      	movs	r0, #0
}
   b7e30:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b7e32:	6840      	ldr	r0, [r0, #4]
   b7e34:	b138      	cbz	r0, b7e46 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b7e36:	f004 fbf1 	bl	bc61c <realloc>
		if (newBuffer) {
   b7e3a:	2800      	cmp	r0, #0
   b7e3c:	d0f7      	beq.n	b7e2e <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b7e3e:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b7e42:	2001      	movs	r0, #1
   b7e44:	e7f4      	b.n	b7e30 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b7e46:	4608      	mov	r0, r1
   b7e48:	f004 fbd8 	bl	bc5fc <malloc>
   b7e4c:	e7f5      	b.n	b7e3a <_ZN10JsonBuffer8allocateEj+0x16>

000b7e4e <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7e4e:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7e50:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7e52:	460e      	mov	r6, r1
   b7e54:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7e56:	18d1      	adds	r1, r2, r3
   b7e58:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7e5a:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7e5c:	b172      	cbz	r2, b7e7c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b7e5e:	6882      	ldr	r2, [r0, #8]
   b7e60:	428a      	cmp	r2, r1
   b7e62:	d30b      	bcc.n	b7e7c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b7e64:	6860      	ldr	r0, [r4, #4]
   b7e66:	68e3      	ldr	r3, [r4, #12]
   b7e68:	462a      	mov	r2, r5
   b7e6a:	4631      	mov	r1, r6
   b7e6c:	4418      	add	r0, r3
   b7e6e:	f008 fb13 	bl	c0498 <memcpy>
	offset += dataLen;
   b7e72:	68e2      	ldr	r2, [r4, #12]
   b7e74:	442a      	add	r2, r5
   b7e76:	60e2      	str	r2, [r4, #12]
	return true;
   b7e78:	2001      	movs	r0, #1
}
   b7e7a:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b7e7c:	4620      	mov	r0, r4
   b7e7e:	f7ff ffd1 	bl	b7e24 <_ZN10JsonBuffer8allocateEj>
   b7e82:	2800      	cmp	r0, #0
   b7e84:	d1ee      	bne.n	b7e64 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b7e86:	e7f8      	b.n	b7e7a <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b7e88 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b7e88:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b7e8a:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b7e8e:	2200      	movs	r2, #0
   b7e90:	60c2      	str	r2, [r0, #12]
   b7e92:	2201      	movs	r2, #1
   b7e94:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b7e96:	6143      	str	r3, [r0, #20]
   b7e98:	4a02      	ldr	r2, [pc, #8]	; (b7ea4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b7e9a:	9b02      	ldr	r3, [sp, #8]
   b7e9c:	6002      	str	r2, [r0, #0]
   b7e9e:	61c3      	str	r3, [r0, #28]
}
   b7ea0:	bd10      	pop	{r4, pc}
   b7ea2:	bf00      	nop
   b7ea4:	000c1acc 	.word	0x000c1acc

000b7ea8 <_ZNK10JsonParser13getOuterArrayEv>:
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b7ea8:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b7eac:	4283      	cmp	r3, r0
   b7eae:	d904      	bls.n	b7eba <_ZNK10JsonParser13getOuterArrayEv+0x12>
		if (token->type == JsonParserGeneratorRK::JSMN_ARRAY) {
   b7eb0:	7802      	ldrb	r2, [r0, #0]
   b7eb2:	2a02      	cmp	r2, #2
   b7eb4:	d002      	beq.n	b7ebc <_ZNK10JsonParser13getOuterArrayEv+0x14>
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b7eb6:	3010      	adds	r0, #16
   b7eb8:	e7f8      	b.n	b7eac <_ZNK10JsonParser13getOuterArrayEv+0x4>
	return 0;
   b7eba:	2000      	movs	r0, #0
}
   b7ebc:	4770      	bx	lr

000b7ebe <_ZNK10JsonParser14getOuterObjectEv>:
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   b7ebe:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b7ec2:	4298      	cmp	r0, r3
   b7ec4:	d204      	bcs.n	b7ed0 <_ZNK10JsonParser14getOuterObjectEv+0x12>
   b7ec6:	7803      	ldrb	r3, [r0, #0]
		return 0;
   b7ec8:	2b01      	cmp	r3, #1
   b7eca:	bf18      	it	ne
   b7ecc:	2000      	movne	r0, #0
   b7ece:	4770      	bx	lr
   b7ed0:	2000      	movs	r0, #0
}
   b7ed2:	4770      	bx	lr

000b7ed4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b7ed4:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b7ed6:	6813      	ldr	r3, [r2, #0]
   b7ed8:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b7eda:	6813      	ldr	r3, [r2, #0]
   b7edc:	f103 0410 	add.w	r4, r3, #16
   b7ee0:	6014      	str	r4, [r2, #0]
   b7ee2:	6986      	ldr	r6, [r0, #24]
   b7ee4:	42b4      	cmp	r4, r6
   b7ee6:	d20a      	bcs.n	b7efe <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b7ee8:	699b      	ldr	r3, [r3, #24]
   b7eea:	688c      	ldr	r4, [r1, #8]
   b7eec:	42a3      	cmp	r3, r4
   b7eee:	da01      	bge.n	b7ef4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b7ef0:	42ab      	cmp	r3, r5
   b7ef2:	ddf2      	ble.n	b7eda <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b7ef4:	42a3      	cmp	r3, r4
   b7ef6:	bfcc      	ite	gt
   b7ef8:	2000      	movgt	r0, #0
   b7efa:	2001      	movle	r0, #1
   b7efc:	e000      	b.n	b7f00 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b7efe:	2000      	movs	r0, #0
}
   b7f00:	bd70      	pop	{r4, r5, r6, pc}

000b7f02 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b7f02:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7f04:	f101 0310 	add.w	r3, r1, #16
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b7f08:	4604      	mov	r4, r0
   b7f0a:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7f0c:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7f0e:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b7f10:	9801      	ldr	r0, [sp, #4]
   b7f12:	69a3      	ldr	r3, [r4, #24]
   b7f14:	4283      	cmp	r3, r0
   b7f16:	d90b      	bls.n	b7f30 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
   b7f18:	6882      	ldr	r2, [r0, #8]
   b7f1a:	688b      	ldr	r3, [r1, #8]
   b7f1c:	429a      	cmp	r2, r3
   b7f1e:	da07      	bge.n	b7f30 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
		if (desiredIndex == index) {
   b7f20:	42b5      	cmp	r5, r6
   b7f22:	d006      	beq.n	b7f32 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x30>
		skipObject(container, token);
   b7f24:	aa01      	add	r2, sp, #4
   b7f26:	4620      	mov	r0, r4
		index++;
   b7f28:	3501      	adds	r5, #1
		skipObject(container, token);
   b7f2a:	f7ff ffd3 	bl	b7ed4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7f2e:	e7ef      	b.n	b7f10 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0xe>
	return 0;
   b7f30:	2000      	movs	r0, #0
}
   b7f32:	b002      	add	sp, #8
   b7f34:	bd70      	pop	{r4, r5, r6, pc}

000b7f36 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7f36:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7f3a:	9d08      	ldr	r5, [sp, #32]
   b7f3c:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7f3e:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7f42:	4604      	mov	r4, r0
   b7f44:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7f46:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7f48:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b7f4a:	9801      	ldr	r0, [sp, #4]
   b7f4c:	69a3      	ldr	r3, [r4, #24]
   b7f4e:	4283      	cmp	r3, r0
   b7f50:	d91a      	bls.n	b7f88 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b7f52:	6882      	ldr	r2, [r0, #8]
   b7f54:	688b      	ldr	r3, [r1, #8]
   b7f56:	429a      	cmp	r2, r3
   b7f58:	da16      	bge.n	b7f88 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b7f5a:	42ae      	cmp	r6, r5
   b7f5c:	d10b      	bne.n	b7f76 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b7f5e:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b7f60:	aa01      	add	r2, sp, #4
   b7f62:	4620      	mov	r0, r4
   b7f64:	f7ff ffb6 	bl	b7ed4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b7f68:	b128      	cbz	r0, b7f76 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b7f6a:	9b01      	ldr	r3, [sp, #4]
   b7f6c:	f8c8 3000 	str.w	r3, [r8]
}
   b7f70:	b002      	add	sp, #8
   b7f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b7f76:	aa01      	add	r2, sp, #4
   b7f78:	4620      	mov	r0, r4
   b7f7a:	f7ff ffab 	bl	b7ed4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b7f7e:	4620      	mov	r0, r4
		index++;
   b7f80:	3601      	adds	r6, #1
		skipObject(container, token);
   b7f82:	f7ff ffa7 	bl	b7ed4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7f86:	e7e0      	b.n	b7f4a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b7f88:	2000      	movs	r0, #0
   b7f8a:	e7f1      	b.n	b7f70 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b7f8c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b7f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7f8e:	3b01      	subs	r3, #1
   b7f90:	2400      	movs	r4, #0
   b7f92:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b7f96:	1bf6      	subs	r6, r6, r7
   b7f98:	42a6      	cmp	r6, r4
   b7f9a:	dd08      	ble.n	b7fae <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b7f9c:	42a3      	cmp	r3, r4
   b7f9e:	dd06      	ble.n	b7fae <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b7fa0:	6845      	ldr	r5, [r0, #4]
   b7fa2:	443d      	add	r5, r7
   b7fa4:	5d2d      	ldrb	r5, [r5, r4]
   b7fa6:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7faa:	3401      	adds	r4, #1
   b7fac:	e7f1      	b.n	b7f92 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b7fae:	2300      	movs	r3, #0
   b7fb0:	7013      	strb	r3, [r2, #0]
}
   b7fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7fb4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b7fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7fb6:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b7fb8:	2310      	movs	r3, #16
   b7fba:	466a      	mov	r2, sp
   b7fbc:	f7ff ffe6 	bl	b7f8c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b7fc0:	4904      	ldr	r1, [pc, #16]	; (b7fd4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b7fc2:	4622      	mov	r2, r4
   b7fc4:	4668      	mov	r0, sp
   b7fc6:	f004 fb39 	bl	bc63c <sscanf>
}
   b7fca:	1e43      	subs	r3, r0, #1
   b7fcc:	4258      	negs	r0, r3
   b7fce:	4158      	adcs	r0, r3
   b7fd0:	b004      	add	sp, #16
   b7fd2:	bd10      	pop	{r4, pc}
   b7fd4:	000c0eb6 	.word	0x000c0eb6

000b7fd8 <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
   b7fd8:	b510      	push	{r4, lr}
   b7fda:	4604      	mov	r4, r0
	if (str) {
   b7fdc:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b7fde:	460b      	mov	r3, r1
	if (str) {
   b7fe0:	b128      	cbz	r0, b7fee <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b7fe2:	f006 ff64 	bl	beeae <_ZN6String6concatEc>
		length++;
   b7fe6:	68e3      	ldr	r3, [r4, #12]
   b7fe8:	3301      	adds	r3, #1
   b7fea:	60e3      	str	r3, [r4, #12]
}
   b7fec:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b7fee:	6860      	ldr	r0, [r4, #4]
   b7ff0:	2800      	cmp	r0, #0
   b7ff2:	d0f8      	beq.n	b7fe6 <_ZN16JsonParserString6appendEc+0xe>
   b7ff4:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b7ff8:	3a01      	subs	r2, #1
   b7ffa:	428a      	cmp	r2, r1
			buf[length] = ch;
   b7ffc:	bf88      	it	hi
   b7ffe:	5443      	strbhi	r3, [r0, r1]
   b8000:	e7f1      	b.n	b7fe6 <_ZN16JsonParserString6appendEc+0xe>

000b8002 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b8002:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b8004:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b8006:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8008:	4608      	mov	r0, r1
		str.append((char)unicode);
   b800a:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b800c:	d804      	bhi.n	b8018 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b800e:	b003      	add	sp, #12
   b8010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b8014:	f7ff bfe0 	b.w	b7fd8 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b8018:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b801c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b8020:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b8024:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b8028:	d207      	bcs.n	b803a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b802a:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b802e:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b8030:	f7ff ffd2 	bl	b7fd8 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b8034:	9801      	ldr	r0, [sp, #4]
   b8036:	4621      	mov	r1, r4
   b8038:	e7e9      	b.n	b800e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b803a:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b803c:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b8040:	9001      	str	r0, [sp, #4]
   b8042:	f7ff ffc9 	bl	b7fd8 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b8046:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b804a:	9801      	ldr	r0, [sp, #4]
   b804c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b8050:	e7ee      	b.n	b8030 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b8054 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b8054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b8058:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b805a:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b805c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b812c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b8060:	4680      	mov	r8, r0
   b8062:	460f      	mov	r7, r1
   b8064:	4615      	mov	r5, r2
			escape = false;
   b8066:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b8068:	68b8      	ldr	r0, [r7, #8]
   b806a:	42b0      	cmp	r0, r6
   b806c:	dd5a      	ble.n	b8124 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b806e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8072:	5d99      	ldrb	r1, [r3, r6]
   b8074:	199a      	adds	r2, r3, r6
		if (escape) {
   b8076:	2c00      	cmp	r4, #0
   b8078:	d04b      	beq.n	b8112 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b807a:	2975      	cmp	r1, #117	; 0x75
   b807c:	d805      	bhi.n	b808a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b807e:	296d      	cmp	r1, #109	; 0x6d
   b8080:	d807      	bhi.n	b8092 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b8082:	2962      	cmp	r1, #98	; 0x62
   b8084:	d01e      	beq.n	b80c4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b8086:	2966      	cmp	r1, #102	; 0x66
   b8088:	d01e      	beq.n	b80c8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b808a:	4628      	mov	r0, r5
   b808c:	f7ff ffa4 	bl	b7fd8 <_ZN16JsonParserString6appendEc>
				break;
   b8090:	e03d      	b.n	b810e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b8092:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b8096:	2c07      	cmp	r4, #7
   b8098:	d8f7      	bhi.n	b808a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b809a:	f20f 0c08 	addw	ip, pc, #8
   b809e:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b80a2:	bf00      	nop
   b80a4:	000b80cd 	.word	0x000b80cd
   b80a8:	000b808b 	.word	0x000b808b
   b80ac:	000b808b 	.word	0x000b808b
   b80b0:	000b808b 	.word	0x000b808b
   b80b4:	000b80d1 	.word	0x000b80d1
   b80b8:	000b808b 	.word	0x000b808b
   b80bc:	000b80d5 	.word	0x000b80d5
   b80c0:	000b80d9 	.word	0x000b80d9
				str.append('\b');
   b80c4:	2108      	movs	r1, #8
   b80c6:	e7e0      	b.n	b808a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b80c8:	210c      	movs	r1, #12
   b80ca:	e7de      	b.n	b808a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b80cc:	210a      	movs	r1, #10
   b80ce:	e7dc      	b.n	b808a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b80d0:	210d      	movs	r1, #13
   b80d2:	e7da      	b.n	b808a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b80d4:	2109      	movs	r1, #9
   b80d6:	e7d8      	b.n	b808a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b80d8:	1d31      	adds	r1, r6, #4
   b80da:	4288      	cmp	r0, r1
   b80dc:	dd17      	ble.n	b810e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b80de:	a902      	add	r1, sp, #8
   b80e0:	3304      	adds	r3, #4
   b80e2:	4433      	add	r3, r6
   b80e4:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b80e6:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b80ea:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b80ee:	429a      	cmp	r2, r3
   b80f0:	d1f9      	bne.n	b80e6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b80f2:	aa01      	add	r2, sp, #4
   b80f4:	4651      	mov	r1, sl
					tmp[4] = 0;
   b80f6:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b80fa:	f004 fa9f 	bl	bc63c <sscanf>
   b80fe:	2801      	cmp	r0, #1
   b8100:	d105      	bne.n	b810e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b8102:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b8106:	4629      	mov	r1, r5
   b8108:	f7ff ff7b 	bl	b8002 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b810c:	3605      	adds	r6, #5
			escape = false;
   b810e:	2400      	movs	r4, #0
   b8110:	e004      	b.n	b811c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b8112:	295c      	cmp	r1, #92	; 0x5c
   b8114:	d004      	beq.n	b8120 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b8116:	4628      	mov	r0, r5
   b8118:	f7ff ff5e 	bl	b7fd8 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b811c:	3601      	adds	r6, #1
   b811e:	e7a3      	b.n	b8068 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b8120:	2401      	movs	r4, #1
   b8122:	e7fb      	b.n	b811c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b8124:	2001      	movs	r0, #1
   b8126:	b004      	add	sp, #16
   b8128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b812c:	000c233d 	.word	0x000c233d

000b8130 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b8130:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8132:	460c      	mov	r4, r1
   b8134:	4606      	mov	r6, r0
	result = "";
   b8136:	490c      	ldr	r1, [pc, #48]	; (b8168 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b8138:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b813a:	4615      	mov	r5, r2
	result = "";
   b813c:	f006 fe7d 	bl	bee3a <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b8140:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b8144:	1ac9      	subs	r1, r1, r3
   b8146:	3101      	adds	r1, #1
   b8148:	4628      	mov	r0, r5
   b814a:	f006 fdeb 	bl	bed24 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b814e:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b8150:	466a      	mov	r2, sp
   b8152:	4621      	mov	r1, r4
   b8154:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b8156:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b815a:	9500      	str	r5, [sp, #0]
   b815c:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b815e:	f7ff ff79 	bl	b8054 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b8162:	b004      	add	sp, #16
   b8164:	bd70      	pop	{r4, r5, r6, pc}
   b8166:	bf00      	nop
   b8168:	000c2399 	.word	0x000c2399

000b816c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b816c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8170:	b089      	sub	sp, #36	; 0x24
   b8172:	4605      	mov	r5, r0
   b8174:	4688      	mov	r8, r1
	String keyName;
   b8176:	a804      	add	r0, sp, #16
   b8178:	4912      	ldr	r1, [pc, #72]	; (b81c4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b817a:	4616      	mov	r6, r2
   b817c:	4699      	mov	r9, r3
	String keyName;
   b817e:	f006 fdfe 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8182:	2700      	movs	r7, #0
   b8184:	9700      	str	r7, [sp, #0]
   b8186:	464b      	mov	r3, r9
   b8188:	aa03      	add	r2, sp, #12
   b818a:	4641      	mov	r1, r8
   b818c:	4628      	mov	r0, r5
   b818e:	f7ff fed2 	bl	b7f36 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b8192:	4604      	mov	r4, r0
   b8194:	b170      	cbz	r0, b81b4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8196:	9903      	ldr	r1, [sp, #12]
   b8198:	aa04      	add	r2, sp, #16
   b819a:	4628      	mov	r0, r5
   b819c:	f7ff ffc8 	bl	b8130 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b81a0:	4604      	mov	r4, r0
   b81a2:	b908      	cbnz	r0, b81a8 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b81a4:	3701      	adds	r7, #1
   b81a6:	e7ed      	b.n	b8184 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
   b81a8:	4631      	mov	r1, r6
   b81aa:	a804      	add	r0, sp, #16
   b81ac:	f006 fead 	bl	bef0a <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b81b0:	2800      	cmp	r0, #0
   b81b2:	d0f7      	beq.n	b81a4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b81b4:	a804      	add	r0, sp, #16
   b81b6:	f006 fd97 	bl	bece8 <_ZN6StringD1Ev>
}
   b81ba:	4620      	mov	r0, r4
   b81bc:	b009      	add	sp, #36	; 0x24
   b81be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b81c2:	bf00      	nop
   b81c4:	000c2399 	.word	0x000c2399

000b81c8 <_ZN10JsonWriter4initEv>:
	offset = 0;
   b81c8:	2300      	movs	r3, #0
	context[contextIndex].isFirst = true;
   b81ca:	2201      	movs	r2, #1
	offset = 0;
   b81cc:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b81ce:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b81d0:	8302      	strh	r2, [r0, #24]
	truncated = false;
   b81d2:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
   b81d6:	4770      	bx	lr

000b81d8 <_ZN10JsonWriterC1Ev>:
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b81d8:	b508      	push	{r3, lr}
   b81da:	4603      	mov	r3, r0
   b81dc:	f7ff fe18 	bl	b7e10 <_ZN10JsonBufferC1Ev>
   b81e0:	4a04      	ldr	r2, [pc, #16]	; (b81f4 <_ZN10JsonWriterC1Ev+0x1c>)
   b81e2:	601a      	str	r2, [r3, #0]
   b81e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	init();
   b81e8:	4618      	mov	r0, r3
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b81ea:	62da      	str	r2, [r3, #44]	; 0x2c
	init();
   b81ec:	f7ff ffec 	bl	b81c8 <_ZN10JsonWriter4initEv>
}
   b81f0:	bd08      	pop	{r3, pc}
   b81f2:	bf00      	nop
   b81f4:	000c1adc 	.word	0x000c1adc

000b81f8 <_ZN10JsonWriter10insertCharEc>:
	if (offset < bufferLen) {
   b81f8:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b81fc:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b81fe:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b8200:	bf3f      	itttt	cc
   b8202:	6842      	ldrcc	r2, [r0, #4]
   b8204:	1c5c      	addcc	r4, r3, #1
   b8206:	60c4      	strcc	r4, [r0, #12]
   b8208:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
   b820a:	bf24      	itt	cs
   b820c:	2301      	movcs	r3, #1
   b820e:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
}
   b8212:	bd10      	pop	{r4, pc}

000b8214 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b8214:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b8216:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b8218:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b821a:	b143      	cbz	r3, b822e <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b821c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b8220:	7e59      	ldrb	r1, [r3, #25]
   b8222:	b109      	cbz	r1, b8228 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b8224:	f7ff ffe8 	bl	b81f8 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b8228:	6963      	ldr	r3, [r4, #20]
   b822a:	3b01      	subs	r3, #1
   b822c:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b822e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b8232:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b8234:	4288      	cmp	r0, r1
   b8236:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b823a:	bf2a      	itet	cs
   b823c:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b823e:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b8240:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b8244:	bd10      	pop	{r4, pc}

000b8246 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b8246:	b570      	push	{r4, r5, r6, lr}
   b8248:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b824a:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b824e:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b8250:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b8252:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b8254:	4430      	add	r0, r6
   b8256:	460a      	mov	r2, r1
   b8258:	4629      	mov	r1, r5
   b825a:	f004 f9ff 	bl	bc65c <vsnprintf>
	if (count <= spaceAvailable) {
   b825e:	4285      	cmp	r5, r0
		offset += count;
   b8260:	bf2d      	iteet	cs
   b8262:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
   b8264:	68a3      	ldrcc	r3, [r4, #8]
   b8266:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b8268:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b826a:	bf36      	itet	cc
   b826c:	2301      	movcc	r3, #1
		offset += count;
   b826e:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b8270:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
}
   b8274:	bd70      	pop	{r4, r5, r6, pc}

000b8276 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b8276:	b40e      	push	{r1, r2, r3}
   b8278:	b503      	push	{r0, r1, lr}
   b827a:	aa03      	add	r2, sp, #12
   b827c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b8280:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b8282:	f7ff ffe0 	bl	b8246 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b8286:	b002      	add	sp, #8
   b8288:	f85d eb04 	ldr.w	lr, [sp], #4
   b828c:	b003      	add	sp, #12
   b828e:	4770      	bx	lr

000b8290 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b8290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8294:	4604      	mov	r4, r0
   b8296:	460e      	mov	r6, r1
	if (quoted) {
   b8298:	4617      	mov	r7, r2
   b829a:	b112      	cbz	r2, b82a2 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b829c:	2122      	movs	r1, #34	; 0x22
   b829e:	f7ff ffab 	bl	b81f8 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b82a2:	f8df 810c 	ldr.w	r8, [pc, #268]	; b83b0 <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b82a6:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b82a8:	5d71      	ldrb	r1, [r6, r5]
   b82aa:	eb06 0905 	add.w	r9, r6, r5
   b82ae:	2900      	cmp	r1, #0
   b82b0:	d074      	beq.n	b839c <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b82b2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b82b6:	429a      	cmp	r2, r3
   b82b8:	d270      	bcs.n	b839c <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b82ba:	060b      	lsls	r3, r1, #24
   b82bc:	d534      	bpl.n	b8328 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b82be:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b82c2:	2be0      	cmp	r3, #224	; 0xe0
   b82c4:	f105 0901 	add.w	r9, r5, #1
   b82c8:	d11d      	bne.n	b8306 <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b82ca:	f816 2009 	ldrb.w	r2, [r6, r9]
   b82ce:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b82d2:	2b80      	cmp	r3, #128	; 0x80
   b82d4:	d139      	bne.n	b834a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b82d6:	f105 0902 	add.w	r9, r5, #2
   b82da:	f816 3009 	ldrb.w	r3, [r6, r9]
   b82de:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b82e2:	2880      	cmp	r0, #128	; 0x80
   b82e4:	d131      	bne.n	b834a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b82e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b82ea:	0192      	lsls	r2, r2, #6
   b82ec:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b82f0:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b82f4:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b82f6:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b82f8:	4641      	mov	r1, r8
   b82fa:	4620      	mov	r0, r4
   b82fc:	f7ff ffbb 	bl	b8276 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b8300:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b8302:	3501      	adds	r5, #1
   b8304:	e7d0      	b.n	b82a8 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b8306:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b830a:	2bc0      	cmp	r3, #192	; 0xc0
   b830c:	d11d      	bne.n	b834a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b830e:	f816 3009 	ldrb.w	r3, [r6, r9]
   b8312:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b8316:	2a80      	cmp	r2, #128	; 0x80
   b8318:	d117      	bne.n	b834a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b831a:	0189      	lsls	r1, r1, #6
   b831c:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b8320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b8324:	431a      	orrs	r2, r3
   b8326:	e7e7      	b.n	b82f8 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b8328:	290d      	cmp	r1, #13
   b832a:	d80a      	bhi.n	b8342 <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b832c:	2907      	cmp	r1, #7
   b832e:	d90c      	bls.n	b834a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8330:	f1a1 0308 	sub.w	r3, r1, #8
   b8334:	2b05      	cmp	r3, #5
   b8336:	d808      	bhi.n	b834a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8338:	e8df f003 	tbb	[pc, r3]
   b833c:	07172309 	.word	0x07172309
   b8340:	1d11      	.short	0x1d11
   b8342:	2922      	cmp	r1, #34	; 0x22
   b8344:	d023      	beq.n	b838e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b8346:	295c      	cmp	r1, #92	; 0x5c
   b8348:	d021      	beq.n	b838e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b834a:	4620      	mov	r0, r4
   b834c:	e004      	b.n	b8358 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b834e:	215c      	movs	r1, #92	; 0x5c
   b8350:	4620      	mov	r0, r4
   b8352:	f7ff ff51 	bl	b81f8 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b8356:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b8358:	f7ff ff4e 	bl	b81f8 <_ZN10JsonWriter10insertCharEc>
				break;
   b835c:	e7d1      	b.n	b8302 <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b835e:	215c      	movs	r1, #92	; 0x5c
   b8360:	4620      	mov	r0, r4
   b8362:	f7ff ff49 	bl	b81f8 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b8366:	2166      	movs	r1, #102	; 0x66
   b8368:	e7f6      	b.n	b8358 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b836a:	215c      	movs	r1, #92	; 0x5c
   b836c:	4620      	mov	r0, r4
   b836e:	f7ff ff43 	bl	b81f8 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b8372:	216e      	movs	r1, #110	; 0x6e
   b8374:	e7f0      	b.n	b8358 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8376:	215c      	movs	r1, #92	; 0x5c
   b8378:	4620      	mov	r0, r4
   b837a:	f7ff ff3d 	bl	b81f8 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b837e:	2172      	movs	r1, #114	; 0x72
   b8380:	e7ea      	b.n	b8358 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8382:	215c      	movs	r1, #92	; 0x5c
   b8384:	4620      	mov	r0, r4
   b8386:	f7ff ff37 	bl	b81f8 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b838a:	2174      	movs	r1, #116	; 0x74
   b838c:	e7e4      	b.n	b8358 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b838e:	215c      	movs	r1, #92	; 0x5c
   b8390:	4620      	mov	r0, r4
   b8392:	f7ff ff31 	bl	b81f8 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b8396:	f899 1000 	ldrb.w	r1, [r9]
   b839a:	e7dd      	b.n	b8358 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b839c:	b12f      	cbz	r7, b83aa <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b839e:	4620      	mov	r0, r4
   b83a0:	2122      	movs	r1, #34	; 0x22
}
   b83a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b83a6:	f7ff bf27 	b.w	b81f8 <_ZN10JsonWriter10insertCharEc>
}
   b83aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b83ae:	bf00      	nop
   b83b0:	000c1aac 	.word	0x000c1aac

000b83b4 <_ZN10JsonWriter20insertCheckSeparatorEv>:
	if (context[contextIndex].isFirst) {
   b83b4:	6942      	ldr	r2, [r0, #20]
   b83b6:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b83ba:	7e1a      	ldrb	r2, [r3, #24]
   b83bc:	b112      	cbz	r2, b83c4 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b83be:	2200      	movs	r2, #0
   b83c0:	761a      	strb	r2, [r3, #24]
}
   b83c2:	4770      	bx	lr
		insertChar(',');
   b83c4:	212c      	movs	r1, #44	; 0x2c
   b83c6:	f7ff bf17 	b.w	b81f8 <_ZN10JsonWriter10insertCharEc>

000b83ca <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b83ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b83cc:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b83ce:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b83d0:	3301      	adds	r3, #1
   b83d2:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b83d4:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b83d6:	d80f      	bhi.n	b83f8 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b83d8:	f7ff ffec 	bl	b83b4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b83dc:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b83de:	9901      	ldr	r1, [sp, #4]
   b83e0:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b83e4:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b83e6:	2501      	movs	r5, #1
	contextIndex++;
   b83e8:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b83ea:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b83ec:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b83ee:	f7ff ff03 	bl	b81f8 <_ZN10JsonWriter10insertCharEc>
   b83f2:	4628      	mov	r0, r5
}
   b83f4:	b002      	add	sp, #8
   b83f6:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b83f8:	2000      	movs	r0, #0
   b83fa:	e7fb      	b.n	b83f4 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b83fc <_ZN12JsonModifierC1ER10JsonParser>:
JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {
   b83fc:	b510      	push	{r4, lr}
   b83fe:	4604      	mov	r4, r0
   b8400:	f7ff feea 	bl	b81d8 <_ZN10JsonWriterC1Ev>
   b8404:	4b05      	ldr	r3, [pc, #20]	; (b841c <_ZN12JsonModifierC1ER10JsonParser+0x20>)
   b8406:	6023      	str	r3, [r4, #0]
   b8408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b840c:	2300      	movs	r3, #0
   b840e:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   b8412:	6321      	str	r1, [r4, #48]	; 0x30
   b8414:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   b8416:	4620      	mov	r0, r4
   b8418:	bd10      	pop	{r4, pc}
   b841a:	bf00      	nop
   b841c:	000c1aec 	.word	0x000c1aec

000b8420 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	init();

	return true;
}

bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b8420:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b8422:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b8424:	3301      	adds	r3, #1
bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b8426:	4604      	mov	r4, r0
   b8428:	460e      	mov	r6, r1
	if (start != -1) {
   b842a:	d129      	bne.n	b8480 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x60>
		// Modification or insertion already in progress
		return false;
	}

	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b842c:	688d      	ldr	r5, [r1, #8]
	origAfter = jp.getOffset() - start;
   b842e:	6b01      	ldr	r1, [r0, #48]	; 0x30
	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b8430:	3d01      	subs	r5, #1
   b8432:	6345      	str	r5, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b8434:	68cb      	ldr	r3, [r1, #12]
	origAfter = jp.getOffset() - start;
   b8436:	1b5a      	subs	r2, r3, r5
   b8438:	6382      	str	r2, [r0, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b843a:	6888      	ldr	r0, [r1, #8]
   b843c:	4428      	add	r0, r5
   b843e:	1ac3      	subs	r3, r0, r3

	if (origAfter > 0) {
   b8440:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b8442:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b8444:	dd04      	ble.n	b8450 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b8446:	6848      	ldr	r0, [r1, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + start, origAfter);
   b8448:	1941      	adds	r1, r0, r5
   b844a:	4418      	add	r0, r3
   b844c:	f008 f832 	bl	c04b4 <memmove>
   b8450:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b8452:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b8454:	6852      	ldr	r2, [r2, #4]
   b8456:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8458:	440a      	add	r2, r1
   b845a:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b845c:	2501      	movs	r5, #1
	this->bufferLen = bufferLen;
   b845e:	e9c4 2301 	strd	r2, r3, [r4, #4]
	init();
   b8462:	4620      	mov	r0, r4
	this->staticBuffers = true;
   b8464:	7425      	strb	r5, [r4, #16]
	init();
   b8466:	f7ff feaf 	bl	b81c8 <_ZN10JsonWriter4initEv>
	context[contextIndex].isFirst = isFirst;
   b846a:	6963      	ldr	r3, [r4, #20]
   b846c:	f103 020c 	add.w	r2, r3, #12

	// If array is not empty, add a separator
	setIsFirst(arrayOrObjectToken->size == 0);
   b8470:	68f3      	ldr	r3, [r6, #12]
   b8472:	fab3 f383 	clz	r3, r3
   b8476:	095b      	lsrs	r3, r3, #5
   b8478:	f804 3012 	strb.w	r3, [r4, r2, lsl #1]
	context[contextIndex].isFirst = isFirst;
   b847c:	4628      	mov	r0, r5

	return true;
}
   b847e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b8480:	2000      	movs	r0, #0
   b8482:	e7fc      	b.n	b847e <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x5e>

000b8484 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b8484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b8488:	6844      	ldr	r4, [r0, #4]
   b848a:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b848e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8492:	f8d0 e000 	ldr.w	lr, [r0]
   b8496:	4596      	cmp	lr, r2
   b8498:	f080 81b9 	bcs.w	b880e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b849c:	f811 800e 	ldrb.w	r8, [r1, lr]
   b84a0:	f1b8 0f00 	cmp.w	r8, #0
   b84a4:	f000 81b3 	beq.w	b880e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b84a8:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b84ac:	f000 8098 	beq.w	b85e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b84b0:	d833      	bhi.n	b851a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b84b2:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b84b6:	f000 80a6 	beq.w	b8606 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b84ba:	d810      	bhi.n	b84de <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b84bc:	f1a8 0809 	sub.w	r8, r8, #9
   b84c0:	fa5f f888 	uxtb.w	r8, r8
   b84c4:	f1b8 0f17 	cmp.w	r8, #23
   b84c8:	d80d      	bhi.n	b84e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b84ca:	4d9f      	ldr	r5, [pc, #636]	; (b8748 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b84cc:	fa0c f808 	lsl.w	r8, ip, r8
   b84d0:	ea18 0f05 	tst.w	r8, r5
   b84d4:	d007      	beq.n	b84e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b84d6:	6805      	ldr	r5, [r0, #0]
   b84d8:	3501      	adds	r5, #1
   b84da:	6005      	str	r5, [r0, #0]
   b84dc:	e7d9      	b.n	b8492 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b84de:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b84e2:	f000 8133 	beq.w	b874c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b84e6:	f8d0 8000 	ldr.w	r8, [r0]
   b84ea:	4542      	cmp	r2, r8
   b84ec:	d90e      	bls.n	b850c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b84ee:	f811 5008 	ldrb.w	r5, [r1, r8]
   b84f2:	b15d      	cbz	r5, b850c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b84f4:	2d3a      	cmp	r5, #58	; 0x3a
   b84f6:	f200 8169 	bhi.w	b87cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b84fa:	2d1f      	cmp	r5, #31
   b84fc:	f200 8151 	bhi.w	b87a2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b8500:	2d0a      	cmp	r5, #10
   b8502:	f200 8160 	bhi.w	b87c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b8506:	2d08      	cmp	r5, #8
   b8508:	f240 8156 	bls.w	b87b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b850c:	2b00      	cmp	r3, #0
   b850e:	f040 8162 	bne.w	b87d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b8512:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b8516:	6005      	str	r5, [r0, #0]
   b8518:	e0a5      	b.n	b8666 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b851a:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b851e:	d037      	beq.n	b8590 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b8520:	d82e      	bhi.n	b8580 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b8522:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b8526:	d033      	beq.n	b8590 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b8528:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b852c:	d1db      	bne.n	b84e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b852e:	2b00      	cmp	r3, #0
   b8530:	d0d1      	beq.n	b84d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b8532:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b8536:	6845      	ldr	r5, [r0, #4]
   b8538:	3d01      	subs	r5, #1
   b853a:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b853e:	2d00      	cmp	r5, #0
   b8540:	db55      	blt.n	b85ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b8542:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b8546:	3701      	adds	r7, #1
   b8548:	d04d      	beq.n	b85e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b854a:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b854e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b8552:	d148      	bne.n	b85e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b8554:	f898 b000 	ldrb.w	fp, [r8]
   b8558:	45cb      	cmp	fp, r9
   b855a:	d14b      	bne.n	b85f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b855c:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b8560:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b8564:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b8568:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b856c:	f8de 7004 	ldr.w	r7, [lr, #4]
   b8570:	3701      	adds	r7, #1
   b8572:	d042      	beq.n	b85fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b8574:	f8de 7008 	ldr.w	r7, [lr, #8]
   b8578:	3701      	adds	r7, #1
   b857a:	d13e      	bne.n	b85fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b857c:	6085      	str	r5, [r0, #8]
				break;
   b857e:	e7aa      	b.n	b84d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b8580:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b8584:	d1af      	bne.n	b84e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b8586:	2b00      	cmp	r3, #0
   b8588:	d0a5      	beq.n	b84d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b858a:	f04f 0901 	mov.w	r9, #1
   b858e:	e7d2      	b.n	b8536 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b8590:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b8592:	2b00      	cmp	r3, #0
   b8594:	d09f      	beq.n	b84d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b8596:	6845      	ldr	r5, [r0, #4]
   b8598:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b859a:	42af      	cmp	r7, r5
   b859c:	d94a      	bls.n	b8634 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b859e:	f105 0e01 	add.w	lr, r5, #1
   b85a2:	f8c0 e004 	str.w	lr, [r0, #4]
   b85a6:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b85aa:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b85ae:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b85b2:	2500      	movs	r5, #0
   b85b4:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b85b8:	6885      	ldr	r5, [r0, #8]
   b85ba:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b85bc:	bf1f      	itttt	ne
   b85be:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b85c2:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b85c6:	3501      	addne	r5, #1
   b85c8:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b85cc:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b85d0:	bf0c      	ite	eq
   b85d2:	2501      	moveq	r5, #1
   b85d4:	2502      	movne	r5, #2
   b85d6:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b85da:	6805      	ldr	r5, [r0, #0]
   b85dc:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b85e0:	6845      	ldr	r5, [r0, #4]
   b85e2:	3d01      	subs	r5, #1
   b85e4:	e7ca      	b.n	b857c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b85e6:	3d01      	subs	r5, #1
   b85e8:	f1a8 0810 	sub.w	r8, r8, #16
   b85ec:	e7a7      	b.n	b853e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b85ee:	3501      	adds	r5, #1
   b85f0:	f47f af71 	bne.w	b84d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b85f4:	f06f 0401 	mvn.w	r4, #1
   b85f8:	e01e      	b.n	b8638 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b85fa:	3d01      	subs	r5, #1
   b85fc:	1c6f      	adds	r7, r5, #1
   b85fe:	f1ae 0e10 	sub.w	lr, lr, #16
   b8602:	d1b3      	bne.n	b856c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b8604:	e767      	b.n	b84d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b8606:	f10e 0901 	add.w	r9, lr, #1
   b860a:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b860e:	f8d0 8000 	ldr.w	r8, [r0]
   b8612:	4542      	cmp	r2, r8
   b8614:	f240 8093 	bls.w	b873e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b8618:	f811 5008 	ldrb.w	r5, [r1, r8]
   b861c:	2d00      	cmp	r5, #0
   b861e:	f000 808e 	beq.w	b873e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b8622:	2d22      	cmp	r5, #34	; 0x22
   b8624:	d130      	bne.n	b8688 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b8626:	b1f3      	cbz	r3, b8666 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b8628:	6845      	ldr	r5, [r0, #4]
   b862a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b862c:	42af      	cmp	r7, r5
   b862e:	d806      	bhi.n	b863e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b8630:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b8634:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b8638:	4620      	mov	r0, r4
   b863a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b863e:	f105 0e01 	add.w	lr, r5, #1
   b8642:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b8646:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b864a:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b864e:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b8652:	2700      	movs	r7, #0
   b8654:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b8656:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b865a:	f04f 0a03 	mov.w	sl, #3
   b865e:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b8662:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b8666:	6885      	ldr	r5, [r0, #8]
   b8668:	1c6f      	adds	r7, r5, #1
				count++;
   b866a:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b866e:	f43f af32 	beq.w	b84d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b8672:	2b00      	cmp	r3, #0
   b8674:	f43f af2f 	beq.w	b84d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b8678:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b867c:	f8de 500c 	ldr.w	r5, [lr, #12]
   b8680:	3501      	adds	r5, #1
   b8682:	f8ce 500c 	str.w	r5, [lr, #12]
   b8686:	e726      	b.n	b84d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b8688:	2d5c      	cmp	r5, #92	; 0x5c
   b868a:	d111      	bne.n	b86b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b868c:	f108 0501 	add.w	r5, r8, #1
   b8690:	42aa      	cmp	r2, r5
   b8692:	d90d      	bls.n	b86b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b8694:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b8696:	5d4d      	ldrb	r5, [r1, r5]
   b8698:	2d75      	cmp	r5, #117	; 0x75
   b869a:	d82b      	bhi.n	b86f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b869c:	2d6d      	cmp	r5, #109	; 0x6d
   b869e:	d80b      	bhi.n	b86b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b86a0:	2d66      	cmp	r5, #102	; 0x66
   b86a2:	d827      	bhi.n	b86f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b86a4:	2d5b      	cmp	r5, #91	; 0x5b
   b86a6:	d81d      	bhi.n	b86e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b86a8:	2d22      	cmp	r5, #34	; 0x22
   b86aa:	d001      	beq.n	b86b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b86ac:	2d2f      	cmp	r5, #47	; 0x2f
   b86ae:	d121      	bne.n	b86f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b86b0:	6805      	ldr	r5, [r0, #0]
   b86b2:	3501      	adds	r5, #1
   b86b4:	6005      	str	r5, [r0, #0]
   b86b6:	e7aa      	b.n	b860e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b86b8:	3d6e      	subs	r5, #110	; 0x6e
   b86ba:	2d07      	cmp	r5, #7
   b86bc:	d81a      	bhi.n	b86f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b86be:	a701      	add	r7, pc, #4	; (adr r7, b86c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b86c0:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b86c4:	000b86b1 	.word	0x000b86b1
   b86c8:	000b86f5 	.word	0x000b86f5
   b86cc:	000b86f5 	.word	0x000b86f5
   b86d0:	000b86f5 	.word	0x000b86f5
   b86d4:	000b86b1 	.word	0x000b86b1
   b86d8:	000b86f5 	.word	0x000b86f5
   b86dc:	000b86b1 	.word	0x000b86b1
   b86e0:	000b86fb 	.word	0x000b86fb
   b86e4:	3d5c      	subs	r5, #92	; 0x5c
   b86e6:	b2ed      	uxtb	r5, r5
   b86e8:	fa0c f505 	lsl.w	r5, ip, r5
   b86ec:	f240 4741 	movw	r7, #1089	; 0x441
   b86f0:	423d      	tst	r5, r7
   b86f2:	d1dd      	bne.n	b86b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b86f4:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b86f8:	e77c      	b.n	b85f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b86fa:	f108 0502 	add.w	r5, r8, #2
   b86fe:	6005      	str	r5, [r0, #0]
   b8700:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8704:	f8d0 8000 	ldr.w	r8, [r0]
   b8708:	4542      	cmp	r2, r8
   b870a:	d803      	bhi.n	b8714 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b870c:	6805      	ldr	r5, [r0, #0]
   b870e:	3d01      	subs	r5, #1
   b8710:	6005      	str	r5, [r0, #0]
					break;
   b8712:	e7cd      	b.n	b86b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8714:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8718:	2d00      	cmp	r5, #0
   b871a:	d0f7      	beq.n	b870c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b871c:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b8720:	f1bb 0f09 	cmp.w	fp, #9
   b8724:	d904      	bls.n	b8730 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b8726:	f025 0520 	bic.w	r5, r5, #32
   b872a:	3d41      	subs	r5, #65	; 0x41
   b872c:	2d05      	cmp	r5, #5
   b872e:	d8e1      	bhi.n	b86f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b8730:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8734:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b8738:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b873a:	d1e3      	bne.n	b8704 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b873c:	e7e6      	b.n	b870c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b873e:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b8742:	f06f 0402 	mvn.w	r4, #2
   b8746:	e777      	b.n	b8638 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b8748:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b874c:	2b00      	cmp	r3, #0
   b874e:	f43f aec2 	beq.w	b84d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b8752:	6885      	ldr	r5, [r0, #8]
   b8754:	1c6f      	adds	r7, r5, #1
   b8756:	f43f aebe 	beq.w	b84d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b875a:	012d      	lsls	r5, r5, #4
   b875c:	5d5d      	ldrb	r5, [r3, r5]
   b875e:	3d01      	subs	r5, #1
   b8760:	2d01      	cmp	r5, #1
   b8762:	f67f aeb8 	bls.w	b84d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b8766:	6845      	ldr	r5, [r0, #4]
   b8768:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b876c:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b8770:	f1b8 0f00 	cmp.w	r8, #0
   b8774:	f6ff aeaf 	blt.w	b84d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b8778:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b877c:	3d01      	subs	r5, #1
   b877e:	2d01      	cmp	r5, #1
   b8780:	d80a      	bhi.n	b8798 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b8782:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b8786:	3501      	adds	r5, #1
   b8788:	d006      	beq.n	b8798 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b878a:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b878e:	3501      	adds	r5, #1
   b8790:	d102      	bne.n	b8798 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b8792:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b8796:	e69e      	b.n	b84d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b8798:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b879c:	f1ae 0e10 	sub.w	lr, lr, #16
   b87a0:	e7e6      	b.n	b8770 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b87a2:	f1a5 0920 	sub.w	r9, r5, #32
   b87a6:	4f24      	ldr	r7, [pc, #144]	; (b8838 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b87a8:	fa5f f989 	uxtb.w	r9, r9
   b87ac:	fa0c f909 	lsl.w	r9, ip, r9
   b87b0:	ea19 0f07 	tst.w	r9, r7
   b87b4:	f47f aeaa 	bne.w	b850c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b87b8:	3d20      	subs	r5, #32
   b87ba:	2d5e      	cmp	r5, #94	; 0x5e
   b87bc:	d89a      	bhi.n	b86f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b87be:	f108 0501 	add.w	r5, r8, #1
   b87c2:	6005      	str	r5, [r0, #0]
   b87c4:	e68f      	b.n	b84e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b87c6:	2d0d      	cmp	r5, #13
   b87c8:	d1f6      	bne.n	b87b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b87ca:	e69f      	b.n	b850c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b87cc:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b87d0:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b87d4:	e7f8      	b.n	b87c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b87d6:	6845      	ldr	r5, [r0, #4]
   b87d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b87da:	42af      	cmp	r7, r5
   b87dc:	f67f af28 	bls.w	b8630 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b87e0:	f105 0801 	add.w	r8, r5, #1
   b87e4:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b87e8:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b87ec:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b87f0:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b87f4:	2700      	movs	r7, #0
   b87f6:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b87f8:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b87fc:	f04f 0a04 	mov.w	sl, #4
   b8800:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b8804:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b8808:	6805      	ldr	r5, [r0, #0]
   b880a:	3d01      	subs	r5, #1
   b880c:	e683      	b.n	b8516 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b880e:	2b00      	cmp	r3, #0
   b8810:	f43f af12 	beq.w	b8638 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b8814:	6842      	ldr	r2, [r0, #4]
   b8816:	1e51      	subs	r1, r2, #1
   b8818:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b881c:	2900      	cmp	r1, #0
   b881e:	f6ff af0b 	blt.w	b8638 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b8822:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b8826:	3201      	adds	r2, #1
   b8828:	d003      	beq.n	b8832 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b882a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b882e:	3201      	adds	r2, #1
   b8830:	d087      	beq.n	b8742 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b8832:	3901      	subs	r1, #1
   b8834:	3b10      	subs	r3, #16
   b8836:	e7f1      	b.n	b881c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b8838:	04001001 	.word	0x04001001

000b883c <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b883c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b883e:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b8840:	4604      	mov	r4, r0
	if (offset == 0) {
   b8842:	b912      	cbnz	r2, b884a <_ZN10JsonParser5parseEv+0xe>
		return false;
   b8844:	2000      	movs	r0, #0
}
   b8846:	b003      	add	sp, #12
   b8848:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b884a:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b884c:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b8850:	b1ab      	cbz	r3, b887e <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b8852:	2100      	movs	r1, #0
	parser->toknext = 0;
   b8854:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b8858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b885c:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b885e:	69c1      	ldr	r1, [r0, #28]
   b8860:	9100      	str	r1, [sp, #0]
   b8862:	6841      	ldr	r1, [r0, #4]
   b8864:	4630      	mov	r0, r6
   b8866:	f7ff fe0d 	bl	b8484 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b886a:	1c43      	adds	r3, r0, #1
   b886c:	d128      	bne.n	b88c0 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b886e:	7c25      	ldrb	r5, [r4, #16]
   b8870:	2d00      	cmp	r5, #0
   b8872:	d1e7      	bne.n	b8844 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b8874:	6960      	ldr	r0, [r4, #20]
   b8876:	f003 fec9 	bl	bc60c <free>
			tokens = 0;
   b887a:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b887c:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b887e:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b8880:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b8884:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b8888:	68e2      	ldr	r2, [r4, #12]
   b888a:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b888c:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b888e:	9500      	str	r5, [sp, #0]
   b8890:	462b      	mov	r3, r5
   b8892:	4630      	mov	r0, r6
   b8894:	f7ff fdf6 	bl	b8484 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b8898:	2800      	cmp	r0, #0
   b889a:	dbd3      	blt.n	b8844 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b889c:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b889e:	d017      	beq.n	b88d0 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b88a0:	0100      	lsls	r0, r0, #4
   b88a2:	f003 feab 	bl	bc5fc <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b88a6:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b88a8:	6160      	str	r0, [r4, #20]
   b88aa:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b88ac:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b88ae:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b88b2:	68e2      	ldr	r2, [r4, #12]
   b88b4:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b88b6:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b88b8:	4630      	mov	r0, r6
   b88ba:	f7ff fde3 	bl	b8484 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b88be:	e001      	b.n	b88c4 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b88c0:	2800      	cmp	r0, #0
   b88c2:	dbbf      	blt.n	b8844 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b88c4:	6963      	ldr	r3, [r4, #20]
   b88c6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b88ca:	61a0      	str	r0, [r4, #24]
	return true;
   b88cc:	2001      	movs	r0, #1
   b88ce:	e7ba      	b.n	b8846 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b88d0:	6963      	ldr	r3, [r4, #20]
   b88d2:	61a3      	str	r3, [r4, #24]
   b88d4:	e7fa      	b.n	b88cc <_ZN10JsonParser5parseEv+0x90>

000b88d6 <_ZN12JsonModifier6finishEv>:
void JsonModifier::finish() {
   b88d6:	b538      	push	{r3, r4, r5, lr}
	if (start == -1) {
   b88d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b88da:	1c5a      	adds	r2, r3, #1
void JsonModifier::finish() {
   b88dc:	4604      	mov	r4, r0
	if (start == -1) {
   b88de:	d018      	beq.n	b8912 <_ZN12JsonModifier6finishEv+0x3c>
	if (origAfter > 0) {
   b88e0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   b88e2:	2a00      	cmp	r2, #0
   b88e4:	dd08      	ble.n	b88f8 <_ZN12JsonModifier6finishEv+0x22>
   b88e6:	6b01      	ldr	r1, [r0, #48]	; 0x30
		memmove(jp.getBuffer() + start + getOffset(), jp.getBuffer() + saveLoc, origAfter);
   b88e8:	68e5      	ldr	r5, [r4, #12]
   b88ea:	6848      	ldr	r0, [r1, #4]
   b88ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b88ee:	442b      	add	r3, r5
   b88f0:	4401      	add	r1, r0
   b88f2:	4418      	add	r0, r3
   b88f4:	f007 fdde 	bl	c04b4 <memmove>
	jp.setOffset(start + getOffset() + origAfter);
   b88f8:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   b88fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b88fe:	440b      	add	r3, r1
   b8900:	68e1      	ldr	r1, [r4, #12]
   b8902:	440b      	add	r3, r1
	void setOffset(size_t offset) { this->offset = offset; };
   b8904:	60d3      	str	r3, [r2, #12]
	jp.parse();
   b8906:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b8908:	f7ff ff98 	bl	b883c <_ZN10JsonParser5parseEv>
	start = -1;
   b890c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8910:	6363      	str	r3, [r4, #52]	; 0x34
}
   b8912:	bd38      	pop	{r3, r4, r5, pc}

000b8914 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b8914:	4770      	bx	lr

000b8916 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b8916:	4770      	bx	lr

000b8918 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b8918:	b510      	push	{r4, lr}
}
   b891a:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b891c:	4604      	mov	r4, r0
}
   b891e:	f7fb fbbe 	bl	b409e <_ZdlPvj>
   b8922:	4620      	mov	r0, r4
   b8924:	bd10      	pop	{r4, pc}

000b8926 <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b8926:	b510      	push	{r4, lr}
}
   b8928:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b892a:	4604      	mov	r4, r0
}
   b892c:	f7fb fbb7 	bl	b409e <_ZdlPvj>
   b8930:	4620      	mov	r0, r4
   b8932:	bd10      	pop	{r4, pc}

000b8934 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b8934:	b510      	push	{r4, lr}
   b8936:	4b05      	ldr	r3, [pc, #20]	; (b894c <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b8938:	4604      	mov	r4, r0
   b893a:	f840 3b1c 	str.w	r3, [r0], #28
   b893e:	f006 f9d3 	bl	bece8 <_ZN6StringD1Ev>
   b8942:	1d20      	adds	r0, r4, #4
   b8944:	f006 f9d0 	bl	bece8 <_ZN6StringD1Ev>
}
   b8948:	4620      	mov	r0, r4
   b894a:	bd10      	pop	{r4, pc}
   b894c:	000c1b60 	.word	0x000c1b60

000b8950 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b8950:	b510      	push	{r4, lr}
   b8952:	4604      	mov	r4, r0
}
   b8954:	f7ff ffee 	bl	b8934 <_ZN22LocalTimePosixTimezoneD1Ev>
   b8958:	4620      	mov	r0, r4
   b895a:	2158      	movs	r1, #88	; 0x58
   b895c:	f7fb fb9f 	bl	b409e <_ZdlPvj>
   b8960:	4620      	mov	r0, r4
   b8962:	bd10      	pop	{r4, pc}

000b8964 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b8964:	b510      	push	{r4, lr}
   b8966:	4b04      	ldr	r3, [pc, #16]	; (b8978 <_ZN9LocalTimeD1Ev+0x14>)
   b8968:	4604      	mov	r4, r0
   b896a:	f840 3b04 	str.w	r3, [r0], #4
   b896e:	f7ff ffe1 	bl	b8934 <_ZN22LocalTimePosixTimezoneD1Ev>
   b8972:	4620      	mov	r0, r4
   b8974:	bd10      	pop	{r4, pc}
   b8976:	bf00      	nop
   b8978:	000c1b30 	.word	0x000c1b30

000b897c <_ZN9LocalTimeD0Ev>:
   b897c:	b510      	push	{r4, lr}
   b897e:	4604      	mov	r4, r0
   b8980:	f7ff fff0 	bl	b8964 <_ZN9LocalTimeD1Ev>
   b8984:	4620      	mov	r0, r4
   b8986:	2160      	movs	r1, #96	; 0x60
   b8988:	f7fb fb89 	bl	b409e <_ZdlPvj>
   b898c:	4620      	mov	r0, r4
   b898e:	bd10      	pop	{r4, pc}

000b8990 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b8990:	f020 0302 	bic.w	r3, r0, #2
   b8994:	2b01      	cmp	r3, #1
   b8996:	d003      	beq.n	b89a0 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b8998:	1f43      	subs	r3, r0, #5
   b899a:	4258      	negs	r0, r3
   b899c:	4158      	adcs	r0, r3
   b899e:	4770      	bx	lr
   b89a0:	4618      	mov	r0, r3
   b89a2:	4770      	bx	lr

000b89a4 <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b89a4:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b89a8:	7103      	strb	r3, [r0, #4]
   b89aa:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b89ae:	7143      	strb	r3, [r0, #5]
   b89b0:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b89b4:	7183      	strb	r3, [r0, #6]
   b89b6:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b89ba:	71c3      	strb	r3, [r0, #7]
   b89bc:	4770      	bx	lr

000b89be <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b89be:	b538      	push	{r3, r4, r5, lr}
   b89c0:	4604      	mov	r4, r0
   b89c2:	460d      	mov	r5, r1
   b89c4:	3004      	adds	r0, #4
   b89c6:	3104      	adds	r1, #4
   b89c8:	f006 fa15 	bl	bedf6 <_ZN6StringaSERKS_>
   b89cc:	f105 0114 	add.w	r1, r5, #20
   b89d0:	f104 0014 	add.w	r0, r4, #20
   b89d4:	f7ff ffe6 	bl	b89a4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b89d8:	f105 011c 	add.w	r1, r5, #28
   b89dc:	f104 001c 	add.w	r0, r4, #28
   b89e0:	f006 fa09 	bl	bedf6 <_ZN6StringaSERKS_>
   b89e4:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b89e8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b89ec:	f7ff ffda 	bl	b89a4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b89f0:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b89f4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b89f8:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b89fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b8a00:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b8a04:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b8a08:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b8a0c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b8a10:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b8a14:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8a18:	f7ff ffc4 	bl	b89a4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b8a1c:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b8a20:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b8a24:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b8a28:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b8a2c:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b8a30:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b8a34:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b8a38:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b8a3c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b8a40:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b8a44:	f7ff ffae 	bl	b89a4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b8a48:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b8a4c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b8a50:	bd38      	pop	{r3, r4, r5, pc}

000b8a52 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8a52:	680b      	ldr	r3, [r1, #0]
   b8a54:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b8a56:	684b      	ldr	r3, [r1, #4]
   b8a58:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b8a5a:	b113      	cbz	r3, b8a62 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b8a5c:	685a      	ldr	r2, [r3, #4]
   b8a5e:	3201      	adds	r2, #1
   b8a60:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8a62:	4770      	bx	lr

000b8a64 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b8a64:	4a02      	ldr	r2, [pc, #8]	; (b8a70 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b8a66:	6002      	str	r2, [r0, #0]
   b8a68:	684a      	ldr	r2, [r1, #4]
   b8a6a:	6042      	str	r2, [r0, #4]
   b8a6c:	4770      	bx	lr
   b8a6e:	bf00      	nop
   b8a70:	000c1b40 	.word	0x000c1b40

000b8a74 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   b8a74:	694a      	ldr	r2, [r1, #20]
   b8a76:	6803      	ldr	r3, [r0, #0]
   b8a78:	f362 0316 	bfi	r3, r2, #0, #23
   b8a7c:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   b8a7e:	690b      	ldr	r3, [r1, #16]
   b8a80:	1c5a      	adds	r2, r3, #1
   b8a82:	8843      	ldrh	r3, [r0, #2]
   b8a84:	f362 13ca 	bfi	r3, r2, #7, #4
   b8a88:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   b8a8a:	68ca      	ldr	r2, [r1, #12]
   b8a8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   b8a90:	f362 03c7 	bfi	r3, r2, #3, #5
   b8a94:	70c3      	strb	r3, [r0, #3]
}
   b8a96:	4770      	bx	lr

000b8a98 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b8a98:	4a02      	ldr	r2, [pc, #8]	; (b8aa4 <_ZN12LocalTimeHMSC1Ev+0xc>)
   b8a9a:	6002      	str	r2, [r0, #0]
   b8a9c:	2200      	movs	r2, #0
   b8a9e:	6042      	str	r2, [r0, #4]
}
   b8aa0:	4770      	bx	lr
   b8aa2:	bf00      	nop
   b8aa4:	000c1b40 	.word	0x000c1b40

000b8aa8 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b8aa8:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b8aaa:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b8aac:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b8aae:	8083      	strh	r3, [r0, #4]
   b8ab0:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b8ab2:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b8ab4:	ab05      	add	r3, sp, #20
   b8ab6:	9300      	str	r3, [sp, #0]
   b8ab8:	4913      	ldr	r1, [pc, #76]	; (b8b08 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b8aba:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b8abc:	ab04      	add	r3, sp, #16
   b8abe:	aa03      	add	r2, sp, #12
   b8ac0:	4628      	mov	r0, r5
   b8ac2:	f003 fdbb 	bl	bc63c <sscanf>
   b8ac6:	2803      	cmp	r0, #3
   b8ac8:	d107      	bne.n	b8ada <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b8aca:	9b03      	ldr	r3, [sp, #12]
   b8acc:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b8ace:	9b04      	ldr	r3, [sp, #16]
   b8ad0:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b8ad2:	9b05      	ldr	r3, [sp, #20]
   b8ad4:	71a3      	strb	r3, [r4, #6]
}
   b8ad6:	b007      	add	sp, #28
   b8ad8:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b8ada:	490c      	ldr	r1, [pc, #48]	; (b8b0c <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b8adc:	ab04      	add	r3, sp, #16
   b8ade:	aa03      	add	r2, sp, #12
   b8ae0:	4628      	mov	r0, r5
   b8ae2:	f003 fdab 	bl	bc63c <sscanf>
   b8ae6:	2802      	cmp	r0, #2
   b8ae8:	d104      	bne.n	b8af4 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b8aea:	9b03      	ldr	r3, [sp, #12]
   b8aec:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b8aee:	9b04      	ldr	r3, [sp, #16]
   b8af0:	7163      	strb	r3, [r4, #5]
   b8af2:	e7f0      	b.n	b8ad6 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b8af4:	4906      	ldr	r1, [pc, #24]	; (b8b10 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b8af6:	aa03      	add	r2, sp, #12
   b8af8:	4628      	mov	r0, r5
   b8afa:	f003 fd9f 	bl	bc63c <sscanf>
   b8afe:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b8b00:	bf04      	itt	eq
   b8b02:	9b03      	ldreq	r3, [sp, #12]
   b8b04:	7123      	strbeq	r3, [r4, #4]
}
   b8b06:	e7e6      	b.n	b8ad6 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b8b08:	000c1af4 	.word	0x000c1af4
   b8b0c:	000c1af7 	.word	0x000c1af7
   b8b10:	000c0eb6 	.word	0x000c0eb6

000b8b14 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b8b14:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b8b18:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b8b1c:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b8b20:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b8b22:	bfb8      	it	lt
   b8b24:	4808      	ldrlt	r0, [pc, #32]	; (b8b48 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b8b26:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b8b2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b8b2e:	bfbd      	ittte	lt
   b8b30:	fb00 3002 	mlalt	r0, r0, r2, r3
   b8b34:	1840      	addlt	r0, r0, r1
   b8b36:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b8b38:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b8b3c:	bfa4      	itt	ge
   b8b3e:	fb00 3002 	mlage	r0, r0, r2, r3
   b8b42:	1840      	addge	r0, r0, r1
}
   b8b44:	4770      	bx	lr
   b8b46:	bf00      	nop
   b8b48:	fffff1f0 	.word	0xfffff1f0

000b8b4c <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   b8b4c:	b508      	push	{r3, lr}
   b8b4e:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   b8b52:	b14b      	cbz	r3, b8b68 <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   b8b54:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   b8b58:	b943      	cbnz	r3, b8b6c <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   b8b5a:	302c      	adds	r0, #44	; 0x2c
   b8b5c:	f7ff ffda 	bl	b8b14 <_ZNK12LocalTimeHMS9toSecondsEv>
   b8b60:	fab0 f080 	clz	r0, r0
   b8b64:	0940      	lsrs	r0, r0, #5
   b8b66:	bd08      	pop	{r3, pc}
   b8b68:	2001      	movs	r0, #1
   b8b6a:	e7fc      	b.n	b8b66 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   b8b6c:	2000      	movs	r0, #0
   b8b6e:	e7fa      	b.n	b8b66 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000b8b70 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b8b70:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b8b74:	b943      	cbnz	r3, b8b88 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b8b76:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b8b7a:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b8b7c:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b8b80:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b8b82:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b8b86:	600b      	str	r3, [r1, #0]
}
   b8b88:	4770      	bx	lr

000b8b8a <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b8b8a:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b8b8e:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b8b90:	b9b3      	cbnz	r3, b8bc0 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b8b92:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b8b96:	688c      	ldr	r4, [r1, #8]
   b8b98:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b8b9a:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b8b9e:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b8ba0:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b8ba4:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b8ba6:	bfb5      	itete	lt
   b8ba8:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b8baa:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b8bac:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b8bae:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b8bb0:	bfb5      	itete	lt
   b8bb2:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b8bb6:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b8bba:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b8bbc:	189b      	addge	r3, r3, r2
   b8bbe:	600b      	str	r3, [r1, #0]
}
   b8bc0:	bd30      	pop	{r4, r5, pc}
	...

000b8bc4 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b8bc4:	b508      	push	{r3, lr}
   b8bc6:	4a05      	ldr	r2, [pc, #20]	; (b8bdc <_ZN15LocalTimeChangeC1Ev+0x18>)
   b8bc8:	6002      	str	r2, [r0, #0]
   b8bca:	2200      	movs	r2, #0
   b8bcc:	4603      	mov	r3, r0
   b8bce:	6042      	str	r2, [r0, #4]
   b8bd0:	3008      	adds	r0, #8
   b8bd2:	f7ff ff61 	bl	b8a98 <_ZN12LocalTimeHMSC1Ev>
}
   b8bd6:	4618      	mov	r0, r3
   b8bd8:	bd08      	pop	{r3, pc}
   b8bda:	bf00      	nop
   b8bdc:	000c1b50 	.word	0x000c1b50

000b8be0 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b8be0:	2300      	movs	r3, #0
   b8be2:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b8be4:	8183      	strh	r3, [r0, #12]
   b8be6:	7383      	strb	r3, [r0, #14]
}
   b8be8:	4770      	bx	lr
	...

000b8bec <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b8bec:	b530      	push	{r4, r5, lr}
   b8bee:	4604      	mov	r4, r0
   b8bf0:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b8bf2:	460d      	mov	r5, r1
   b8bf4:	b111      	cbz	r1, b8bfc <_ZN15LocalTimeChange5parseEPKc+0x10>
   b8bf6:	780b      	ldrb	r3, [r1, #0]
   b8bf8:	2b4d      	cmp	r3, #77	; 0x4d
   b8bfa:	d005      	beq.n	b8c08 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b8bfc:	4620      	mov	r0, r4
}
   b8bfe:	b007      	add	sp, #28
   b8c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b8c04:	f7ff bfec 	b.w	b8be0 <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b8c08:	ab05      	add	r3, sp, #20
   b8c0a:	9300      	str	r3, [sp, #0]
   b8c0c:	4911      	ldr	r1, [pc, #68]	; (b8c54 <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b8c0e:	ab04      	add	r3, sp, #16
   b8c10:	aa03      	add	r2, sp, #12
   b8c12:	4628      	mov	r0, r5
   b8c14:	f003 fd12 	bl	bc63c <sscanf>
   b8c18:	2803      	cmp	r0, #3
   b8c1a:	d116      	bne.n	b8c4a <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b8c1c:	9b03      	ldr	r3, [sp, #12]
   b8c1e:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b8c20:	9b04      	ldr	r3, [sp, #16]
   b8c22:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b8c24:	9b05      	ldr	r3, [sp, #20]
   b8c26:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b8c28:	212f      	movs	r1, #47	; 0x2f
   b8c2a:	4628      	mov	r0, r5
   b8c2c:	f007 fcd0 	bl	c05d0 <strchr>
        if (cp) {
   b8c30:	b140      	cbz	r0, b8c44 <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b8c32:	1c41      	adds	r1, r0, #1
   b8c34:	f104 0008 	add.w	r0, r4, #8
   b8c38:	f7ff ff36 	bl	b8aa8 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b8c3c:	2301      	movs	r3, #1
   b8c3e:	71e3      	strb	r3, [r4, #7]
}
   b8c40:	b007      	add	sp, #28
   b8c42:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b8c44:	81a0      	strh	r0, [r4, #12]
   b8c46:	73a0      	strb	r0, [r4, #14]
}
   b8c48:	e7f8      	b.n	b8c3c <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b8c4a:	4620      	mov	r0, r4
   b8c4c:	f7ff ffc8 	bl	b8be0 <_ZN15LocalTimeChange5clearEv>
   b8c50:	e7f6      	b.n	b8c40 <_ZN15LocalTimeChange5parseEPKc+0x54>
   b8c52:	bf00      	nop
   b8c54:	000c1b0f 	.word	0x000c1b0f

000b8c58 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b8c58:	4b10      	ldr	r3, [pc, #64]	; (b8c9c <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b8c5a:	4911      	ldr	r1, [pc, #68]	; (b8ca0 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b8c5c:	b510      	push	{r4, lr}
   b8c5e:	4604      	mov	r4, r0
   b8c60:	f840 3b04 	str.w	r3, [r0], #4
   b8c64:	f006 f88b 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
   b8c68:	f104 0014 	add.w	r0, r4, #20
   b8c6c:	f7ff ff14 	bl	b8a98 <_ZN12LocalTimeHMSC1Ev>
   b8c70:	490b      	ldr	r1, [pc, #44]	; (b8ca0 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b8c72:	f104 001c 	add.w	r0, r4, #28
   b8c76:	f006 f882 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
   b8c7a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b8c7e:	f7ff ff0b 	bl	b8a98 <_ZN12LocalTimeHMSC1Ev>
   b8c82:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8c86:	f7ff ff9d 	bl	b8bc4 <_ZN15LocalTimeChangeC1Ev>
   b8c8a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8c8e:	f7ff ff99 	bl	b8bc4 <_ZN15LocalTimeChangeC1Ev>
   b8c92:	2300      	movs	r3, #0
   b8c94:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b8c98:	4620      	mov	r0, r4
   b8c9a:	bd10      	pop	{r4, pc}
   b8c9c:	000c1b60 	.word	0x000c1b60
   b8ca0:	000c2399 	.word	0x000c2399

000b8ca4 <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b8ca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8ca8:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b8caa:	4608      	mov	r0, r1
   b8cac:	f007 fcba 	bl	c0624 <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b8cb0:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b8cb2:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b8cb4:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b8cb6:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b8cba:	493f      	ldr	r1, [pc, #252]	; (b8db8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b8cbc:	9801      	ldr	r0, [sp, #4]
   b8cbe:	aa01      	add	r2, sp, #4
   b8cc0:	f007 fd38 	bl	c0734 <strtok_r>
   b8cc4:	4601      	mov	r1, r0
   b8cc6:	2800      	cmp	r0, #0
   b8cc8:	d062      	beq.n	b8d90 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b8cca:	2d01      	cmp	r5, #1
   b8ccc:	f105 0301 	add.w	r3, r5, #1
   b8cd0:	d053      	beq.n	b8d7a <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b8cd2:	2d02      	cmp	r5, #2
   b8cd4:	d056      	beq.n	b8d84 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b8cd6:	2d00      	cmp	r5, #0
   b8cd8:	d146      	bne.n	b8d68 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b8cda:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b8cdc:	f892 9000 	ldrb.w	r9, [r2]
   b8ce0:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b8ce4:	4615      	mov	r5, r2
   b8ce6:	4617      	mov	r7, r2
   b8ce8:	f102 0201 	add.w	r2, r2, #1
   b8cec:	d8f6      	bhi.n	b8cdc <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b8cee:	2200      	movs	r2, #0
   b8cf0:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b8cf2:	f104 001c 	add.w	r0, r4, #28
   b8cf6:	f006 f8a0 	bl	bee3a <_ZN6StringaSEPKc>
                valid = true;
   b8cfa:	2201      	movs	r2, #1
                *cp = save2;
   b8cfc:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b8d00:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b8d04:	782a      	ldrb	r2, [r5, #0]
   b8d06:	b36a      	cbz	r2, b8d64 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b8d08:	f897 a000 	ldrb.w	sl, [r7]
   b8d0c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b8d10:	2a3f      	cmp	r2, #63	; 0x3f
   b8d12:	46b9      	mov	r9, r7
   b8d14:	46bb      	mov	fp, r7
   b8d16:	f107 0701 	add.w	r7, r7, #1
   b8d1a:	d9f5      	bls.n	b8d08 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b8d1c:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b8d1e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b8d22:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b8d26:	4629      	mov	r1, r5
   b8d28:	4638      	mov	r0, r7
   b8d2a:	f7ff febd 	bl	b8aa8 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b8d2e:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b8d32:	f1ba 0f00 	cmp.w	sl, #0
   b8d36:	d015      	beq.n	b8d64 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b8d38:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b8d3a:	f81b ab01 	ldrb.w	sl, [fp], #1
   b8d3e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b8d42:	d8f9      	bhi.n	b8d38 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b8d44:	2200      	movs	r2, #0
   b8d46:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b8d48:	4649      	mov	r1, r9
   b8d4a:	1d20      	adds	r0, r4, #4
   b8d4c:	f006 f875 	bl	bee3a <_ZN6StringaSEPKc>
                        *cp = save2;
   b8d50:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b8d54:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b8d58:	f1ba 0f00 	cmp.w	sl, #0
   b8d5c:	d006      	beq.n	b8d6c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b8d5e:	4629      	mov	r1, r5
   b8d60:	f7ff fea2 	bl	b8aa8 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b8d64:	2501      	movs	r5, #1
   b8d66:	e7a8      	b.n	b8cba <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b8d68:	461d      	mov	r5, r3
   b8d6a:	e7a6      	b.n	b8cba <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b8d6c:	4639      	mov	r1, r7
   b8d6e:	f7ff fe19 	bl	b89a4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b8d72:	7e23      	ldrb	r3, [r4, #24]
   b8d74:	3b01      	subs	r3, #1
   b8d76:	7623      	strb	r3, [r4, #24]
   b8d78:	e7f4      	b.n	b8d64 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b8d7a:	4640      	mov	r0, r8
   b8d7c:	f7ff ff36 	bl	b8bec <_ZN15LocalTimeChange5parseEPKc>
                break;
   b8d80:	2502      	movs	r5, #2
   b8d82:	e79a      	b.n	b8cba <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b8d84:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8d88:	f7ff ff30 	bl	b8bec <_ZN15LocalTimeChange5parseEPKc>
                break;
   b8d8c:	2503      	movs	r5, #3
   b8d8e:	e794      	b.n	b8cba <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b8d90:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b8d94:	b143      	cbz	r3, b8da8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b8d96:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b8d9a:	b92a      	cbnz	r2, b8da8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b8d9c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8da0:	f7ff ff1e 	bl	b8be0 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b8da4:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b8da8:	4630      	mov	r0, r6
   b8daa:	f003 fc2f 	bl	bc60c <free>

    return valid;
}
   b8dae:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b8db2:	b003      	add	sp, #12
   b8db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8db8:	000c1b19 	.word	0x000c1b19

000b8dbc <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b8dbc:	b538      	push	{r3, r4, r5, lr}
   b8dbe:	4b13      	ldr	r3, [pc, #76]	; (b8e0c <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b8dc0:	4604      	mov	r4, r0
   b8dc2:	460d      	mov	r5, r1
   b8dc4:	f840 3b04 	str.w	r3, [r0], #4
   b8dc8:	4911      	ldr	r1, [pc, #68]	; (b8e10 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b8dca:	f005 ffd8 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
   b8dce:	f104 0014 	add.w	r0, r4, #20
   b8dd2:	f7ff fe61 	bl	b8a98 <_ZN12LocalTimeHMSC1Ev>
   b8dd6:	490e      	ldr	r1, [pc, #56]	; (b8e10 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b8dd8:	f104 001c 	add.w	r0, r4, #28
   b8ddc:	f005 ffcf 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
   b8de0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b8de4:	f7ff fe58 	bl	b8a98 <_ZN12LocalTimeHMSC1Ev>
   b8de8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8dec:	f7ff feea 	bl	b8bc4 <_ZN15LocalTimeChangeC1Ev>
   b8df0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8df4:	f7ff fee6 	bl	b8bc4 <_ZN15LocalTimeChangeC1Ev>
   b8df8:	2300      	movs	r3, #0
   b8dfa:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b8dfe:	4629      	mov	r1, r5
   b8e00:	4620      	mov	r0, r4
   b8e02:	f7ff ff4f 	bl	b8ca4 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b8e06:	4620      	mov	r0, r4
   b8e08:	bd38      	pop	{r3, r4, r5, pc}
   b8e0a:	bf00      	nop
   b8e0c:	000c1b60 	.word	0x000c1b60
   b8e10:	000c2399 	.word	0x000c2399

000b8e14 <_ZNK14LocalTimeValue3hmsEv>:
    else {
        return tm_hour - 12;
    }
}

LocalTimeHMS LocalTimeValue::hms() const {
   b8e14:	b508      	push	{r3, lr}
   b8e16:	4603      	mov	r3, r0
    LocalTimeHMS result;
   b8e18:	f7ff fe3e 	bl	b8a98 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   b8e1c:	688a      	ldr	r2, [r1, #8]
   b8e1e:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   b8e20:	684a      	ldr	r2, [r1, #4]
   b8e22:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   b8e24:	680a      	ldr	r2, [r1, #0]
   b8e26:	719a      	strb	r2, [r3, #6]
    result.fromTimeInfo(this);
    return result;
}
   b8e28:	4618      	mov	r0, r3
   b8e2a:	bd08      	pop	{r3, pc}

000b8e2c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   b8e2c:	b513      	push	{r0, r1, r4, lr}
   b8e2e:	4b07      	ldr	r3, [pc, #28]	; (b8e4c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   b8e30:	6003      	str	r3, [r0, #0]
   b8e32:	2300      	movs	r3, #0
   b8e34:	6043      	str	r3, [r0, #4]
   b8e36:	4604      	mov	r4, r0
    *this = value.hms();
   b8e38:	4668      	mov	r0, sp
   b8e3a:	f7ff ffeb 	bl	b8e14 <_ZNK14LocalTimeValue3hmsEv>
   b8e3e:	4620      	mov	r0, r4
   b8e40:	4669      	mov	r1, sp
   b8e42:	f7ff fdaf 	bl	b89a4 <_ZN12LocalTimeHMSaSERKS_.isra.0>
}
   b8e46:	b002      	add	sp, #8
   b8e48:	bd10      	pop	{r4, pc}
   b8e4a:	bf00      	nop
   b8e4c:	000c1b40 	.word	0x000c1b40

000b8e50 <_ZNK14LocalTimeValue3ymdEv>:
        tm_min = hms.minute;
        tm_sec = hms.second;
    }
}

LocalTimeYMD LocalTimeValue::ymd() const {
   b8e50:	b507      	push	{r0, r1, r2, lr}
    LocalTimeYMD() {
   b8e52:	2300      	movs	r3, #0
   b8e54:	4601      	mov	r1, r0
    LocalTimeYMD result;
    result.fromTimeInfo(this);
   b8e56:	a801      	add	r0, sp, #4
   b8e58:	9301      	str	r3, [sp, #4]
   b8e5a:	f7ff fe0b 	bl	b8a74 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
    return result;
}
   b8e5e:	9801      	ldr	r0, [sp, #4]
   b8e60:	b003      	add	sp, #12
   b8e62:	f85d fb04 	ldr.w	pc, [sp], #4

000b8e66 <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>:
void LocalTimeYMD::fromLocalTimeValue(const LocalTimeValue &value) {
   b8e66:	b510      	push	{r4, lr}
   b8e68:	4604      	mov	r4, r0
    *this = value.ymd();
   b8e6a:	4608      	mov	r0, r1
   b8e6c:	f7ff fff0 	bl	b8e50 <_ZNK14LocalTimeValue3ymdEv>
   b8e70:	6020      	str	r0, [r4, #0]
}
   b8e72:	bd10      	pop	{r4, pc}

000b8e74 <_ZN16LocalTimeConvert7timeStrEv>:
        convert();
    }
}


String LocalTimeConvert::timeStr() {
   b8e74:	b510      	push	{r4, lr}
   b8e76:	4604      	mov	r4, r0
   b8e78:	b088      	sub	sp, #32
   b8e7a:	4608      	mov	r0, r1
    char ascstr[26];
    asctime_r(&localTimeValue, ascstr);
   b8e7c:	3068      	adds	r0, #104	; 0x68
   b8e7e:	a901      	add	r1, sp, #4
   b8e80:	f007 fab8 	bl	c03f4 <asctime_r>
    int len = strlen(ascstr);
   b8e84:	a801      	add	r0, sp, #4
   b8e86:	f007 fbea 	bl	c065e <strlen>
    ascstr[len-1] = 0; // remove final newline
   b8e8a:	ab08      	add	r3, sp, #32
   b8e8c:	4418      	add	r0, r3
   b8e8e:	2300      	movs	r3, #0
   b8e90:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   b8e94:	a901      	add	r1, sp, #4
   b8e96:	4620      	mov	r0, r4
   b8e98:	f005 ff71 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
}
   b8e9c:	4620      	mov	r0, r4
   b8e9e:	b008      	add	sp, #32
   b8ea0:	bd10      	pop	{r4, pc}
	...

000b8ea4 <_ZNK16LocalTimeConvert8zoneNameEv>:
    char buf[50] = {};
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
    return String(buf);    
}

String LocalTimeConvert::zoneName() const { 
   b8ea4:	b538      	push	{r3, r4, r5, lr}
   b8ea6:	4604      	mov	r4, r0
    if (config.isZ()) {
   b8ea8:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   b8eaa:	460d      	mov	r5, r1
    if (config.isZ()) {
   b8eac:	f7ff fe4e 	bl	b8b4c <_ZNK22LocalTimePosixTimezone3isZEv>
   b8eb0:	b128      	cbz	r0, b8ebe <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   b8eb2:	4909      	ldr	r1, [pc, #36]	; (b8ed8 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   b8eb4:	4620      	mov	r0, r4
   b8eb6:	f005 ff62 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
        return config.dstName;
    }
    else {
        return config.standardName;
    }
};
   b8eba:	4620      	mov	r0, r4
   b8ebc:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   b8ebe:	6828      	ldr	r0, [r5, #0]
   b8ec0:	f7ff fd66 	bl	b8990 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b8ec4:	b128      	cbz	r0, b8ed2 <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   b8ec6:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   b8eca:	4620      	mov	r0, r4
   b8ecc:	f005 ffa2 	bl	bee14 <_ZN6StringC1ERKS_>
   b8ed0:	e7f3      	b.n	b8eba <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   b8ed2:	f105 0120 	add.w	r1, r5, #32
   b8ed6:	e7f8      	b.n	b8eca <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   b8ed8:	000c1b1b 	.word	0x000c1b1b

000b8edc <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   b8edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8ee0:	4680      	mov	r8, r0
   b8ee2:	b0a8      	sub	sp, #160	; 0xa0
   b8ee4:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b8ee6:	4615      	mov	r5, r2
   b8ee8:	b12a      	cbz	r2, b8ef6 <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   b8eea:	4b47      	ldr	r3, [pc, #284]	; (b9008 <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   b8eec:	4610      	mov	r0, r2
   b8eee:	6819      	ldr	r1, [r3, #0]
   b8ef0:	f007 fb85 	bl	c05fe <strcmp>
   b8ef4:	b938      	cbnz	r0, b8f06 <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   b8ef6:	4621      	mov	r1, r4
   b8ef8:	4640      	mov	r0, r8
   b8efa:	f7ff ffbb 	bl	b8e74 <_ZN16LocalTimeConvert7timeStrEv>
}
   b8efe:	4640      	mov	r0, r8
   b8f00:	b028      	add	sp, #160	; 0xa0
   b8f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b8f06:	4629      	mov	r1, r5
   b8f08:	223f      	movs	r2, #63	; 0x3f
   b8f0a:	a818      	add	r0, sp, #96	; 0x60
   b8f0c:	f007 fbc3 	bl	c0696 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b8f10:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b8f12:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b8f14:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b8f18:	f007 fba1 	bl	c065e <strlen>
    String zoneNameStr = zoneName();
   b8f1c:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b8f1e:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   b8f20:	a803      	add	r0, sp, #12
   b8f22:	f7ff ffbf 	bl	b8ea4 <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   b8f26:	1d20      	adds	r0, r4, #4
   b8f28:	f7ff fe10 	bl	b8b4c <_ZNK22LocalTimePosixTimezone3isZEv>
   b8f2c:	b348      	cbz	r0, b8f82 <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   b8f2e:	4937      	ldr	r1, [pc, #220]	; (b900c <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   b8f30:	a807      	add	r0, sp, #28
   b8f32:	f007 fb6e 	bl	c0612 <strcpy>
   b8f36:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   b8f38:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   b8f3a:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   b8f3e:	45ba      	cmp	sl, r7
   b8f40:	d94c      	bls.n	b8fdc <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b8f42:	7833      	ldrb	r3, [r6, #0]
   b8f44:	2b25      	cmp	r3, #37	; 0x25
   b8f46:	f107 0901 	add.w	r9, r7, #1
   b8f4a:	d117      	bne.n	b8f7c <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   b8f4c:	7873      	ldrb	r3, [r6, #1]
   b8f4e:	2b7a      	cmp	r3, #122	; 0x7a
   b8f50:	d136      	bne.n	b8fc0 <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   b8f52:	a807      	add	r0, sp, #28
   b8f54:	f007 fb83 	bl	c065e <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b8f58:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   b8f5a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b8f5c:	1838      	adds	r0, r7, r0
   b8f5e:	ebaa 0207 	sub.w	r2, sl, r7
   b8f62:	1cb1      	adds	r1, r6, #2
   b8f64:	4418      	add	r0, r3
   b8f66:	f007 fa97 	bl	c0498 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b8f6a:	462a      	mov	r2, r5
   b8f6c:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b8f6e:	4630      	mov	r0, r6
   b8f70:	f007 fa92 	bl	c0498 <memcpy>
            len = strlen(format_str);
   b8f74:	a818      	add	r0, sp, #96	; 0x60
   b8f76:	f007 fb72 	bl	c065e <strlen>
   b8f7a:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b8f7c:	3601      	adds	r6, #1
   b8f7e:	464f      	mov	r7, r9
   b8f80:	e7db      	b.n	b8f3a <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b8f82:	6820      	ldr	r0, [r4, #0]
   b8f84:	f7ff fd04 	bl	b8990 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b8f88:	b1b8      	cbz	r0, b8fba <_ZN16LocalTimeConvert6formatEPKc+0xde>
   b8f8a:	f104 0018 	add.w	r0, r4, #24
   b8f8e:	f7ff fdc1 	bl	b8b14 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   b8f92:	223c      	movs	r2, #60	; 0x3c
   b8f94:	fb90 f3f2 	sdiv	r3, r0, r2
   b8f98:	2b00      	cmp	r3, #0
   b8f9a:	bfb8      	it	lt
   b8f9c:	425b      	neglt	r3, r3
   b8f9e:	fbb3 f1f2 	udiv	r1, r3, r2
   b8fa2:	fb02 3311 	mls	r3, r2, r1, r3
   b8fa6:	9300      	str	r3, [sp, #0]
   b8fa8:	4a19      	ldr	r2, [pc, #100]	; (b9010 <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   b8faa:	4b1a      	ldr	r3, [pc, #104]	; (b9014 <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   b8fac:	fb90 f3f3 	sdiv	r3, r0, r3
   b8fb0:	2110      	movs	r1, #16
   b8fb2:	a807      	add	r0, sp, #28
   b8fb4:	f003 fb4a 	bl	bc64c <snprintf>
   b8fb8:	e7bd      	b.n	b8f36 <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b8fba:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b8fbe:	e7e6      	b.n	b8f8e <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   b8fc0:	2b5a      	cmp	r3, #90	; 0x5a
   b8fc2:	d1db      	bne.n	b8f7c <_ZN16LocalTimeConvert6formatEPKc+0xa0>
	inline unsigned int length(void) const {return len;}
   b8fc4:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b8fc6:	ab18      	add	r3, sp, #96	; 0x60
   b8fc8:	1978      	adds	r0, r7, r5
   b8fca:	ebaa 0207 	sub.w	r2, sl, r7
   b8fce:	1cb1      	adds	r1, r6, #2
   b8fd0:	4418      	add	r0, r3
   b8fd2:	f007 fa61 	bl	c0498 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b8fd6:	9903      	ldr	r1, [sp, #12]
   b8fd8:	462a      	mov	r2, r5
   b8fda:	e7c8      	b.n	b8f6e <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   b8fdc:	2100      	movs	r1, #0
   b8fde:	222e      	movs	r2, #46	; 0x2e
   b8fe0:	a80c      	add	r0, sp, #48	; 0x30
   b8fe2:	910b      	str	r1, [sp, #44]	; 0x2c
   b8fe4:	f007 fa80 	bl	c04e8 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   b8fe8:	f104 0368 	add.w	r3, r4, #104	; 0x68
   b8fec:	aa18      	add	r2, sp, #96	; 0x60
   b8fee:	2132      	movs	r1, #50	; 0x32
   b8ff0:	a80b      	add	r0, sp, #44	; 0x2c
   b8ff2:	f003 fb63 	bl	bc6bc <strftime>
    return String(buf);    
   b8ff6:	a90b      	add	r1, sp, #44	; 0x2c
   b8ff8:	4640      	mov	r0, r8
   b8ffa:	f005 fec0 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   b8ffe:	a803      	add	r0, sp, #12
   b9000:	f005 fe72 	bl	bece8 <_ZN6StringD1Ev>
   b9004:	e77b      	b.n	b8efe <_ZN16LocalTimeConvert6formatEPKc+0x22>
   b9006:	bf00      	nop
   b9008:	2003d770 	.word	0x2003d770
   b900c:	000c1b1b 	.word	0x000c1b1b
   b9010:	000c1b1d 	.word	0x000c1b1d
   b9014:	fffff1f0 	.word	0xfffff1f0

000b9018 <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b9018:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b901a:	4d09      	ldr	r5, [pc, #36]	; (b9040 <_ZN9LocalTime8instanceEv+0x28>)
   b901c:	682b      	ldr	r3, [r5, #0]
   b901e:	b963      	cbnz	r3, b903a <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b9020:	2060      	movs	r0, #96	; 0x60
   b9022:	f7fb f838 	bl	b4096 <_Znwj>
   b9026:	4604      	mov	r4, r0
   b9028:	b130      	cbz	r0, b9038 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b902a:	4b06      	ldr	r3, [pc, #24]	; (b9044 <_ZN9LocalTime8instanceEv+0x2c>)
   b902c:	f840 3b04 	str.w	r3, [r0], #4
   b9030:	f7ff fe12 	bl	b8c58 <_ZN22LocalTimePosixTimezoneC1Ev>
   b9034:	2364      	movs	r3, #100	; 0x64
   b9036:	65e3      	str	r3, [r4, #92]	; 0x5c
   b9038:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b903a:	6828      	ldr	r0, [r5, #0]
   b903c:	bd38      	pop	{r3, r4, r5, pc}
   b903e:	bf00      	nop
   b9040:	2003e444 	.word	0x2003e444
   b9044:	000c1b30 	.word	0x000c1b30

000b9048 <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b9048:	f003 bb50 	b.w	bc6ec <mktime>

000b904c <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b904c:	3901      	subs	r1, #1
   b904e:	290b      	cmp	r1, #11
   b9050:	d815      	bhi.n	b907e <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b9052:	e8df f001 	tbb	[pc, r1]
   b9056:	0816      	.short	0x0816
   b9058:	06160616 	.word	0x06160616
   b905c:	16061616 	.word	0x16061616
   b9060:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b9062:	201e      	movs	r0, #30
   b9064:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b9066:	0783      	lsls	r3, r0, #30
   b9068:	d10d      	bne.n	b9086 <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b906a:	2364      	movs	r3, #100	; 0x64
   b906c:	fb90 f2f3 	sdiv	r2, r0, r3
   b9070:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b9074:	2800      	cmp	r0, #0
   b9076:	bf0c      	ite	eq
   b9078:	201c      	moveq	r0, #28
   b907a:	201d      	movne	r0, #29
   b907c:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b907e:	2000      	movs	r0, #0
   b9080:	4770      	bx	lr
            return 31;
   b9082:	201f      	movs	r0, #31
   b9084:	4770      	bx	lr
                return 28;
   b9086:	201c      	movs	r0, #28
}
   b9088:	4770      	bx	lr

000b908a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b908a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b908c:	2301      	movs	r3, #1
   b908e:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b9090:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b9094:	3b01      	subs	r3, #1
   b9096:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b9098:	2300      	movs	r3, #0
   b909a:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b909e:	4606      	mov	r6, r0
   b90a0:	460c      	mov	r4, r1
   b90a2:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b90a4:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b90a6:	4620      	mov	r0, r4
   b90a8:	f7ff ffce 	bl	b9048 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b90ac:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b90b0:	69a2      	ldr	r2, [r4, #24]
   b90b2:	429a      	cmp	r2, r3
   b90b4:	d003      	beq.n	b90be <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b90b6:	68e3      	ldr	r3, [r4, #12]
   b90b8:	3301      	adds	r3, #1
   b90ba:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b90bc:	e7f3      	b.n	b90a6 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b90be:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b90c2:	2d01      	cmp	r5, #1
   b90c4:	d013      	beq.n	b90ee <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b90c6:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b90c8:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b90ca:	3d01      	subs	r5, #1
   b90cc:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b90d0:	441d      	add	r5, r3
   b90d2:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b90d4:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b90d8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b90dc:	f7ff ffb6 	bl	b904c <_ZN9LocalTime14lastDayOfMonthEii>
   b90e0:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b90e2:	bfc4      	itt	gt
   b90e4:	3d07      	subgt	r5, #7
   b90e6:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b90e8:	4620      	mov	r0, r4
   b90ea:	f7ff ffad 	bl	b9048 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b90ee:	4621      	mov	r1, r4
   b90f0:	f106 0008 	add.w	r0, r6, #8
   b90f4:	f7ff fd3c 	bl	b8b70 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b90f8:	4638      	mov	r0, r7
   b90fa:	f7ff fd46 	bl	b8b8a <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b90fe:	4620      	mov	r0, r4
}
   b9100:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b9104:	f003 baf2 	b.w	bc6ec <mktime>

000b9108 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b9108:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b910a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b910e:	b085      	sub	sp, #20
   b9110:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b9112:	b92b      	cbnz	r3, b9120 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b9114:	f7ff ff80 	bl	b9018 <_ZN9LocalTime8instanceEv>
   b9118:	1d01      	adds	r1, r0, #4
   b911a:	1d20      	adds	r0, r4, #4
   b911c:	f7ff fc4f 	bl	b89be <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b9120:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b9124:	2b00      	cmp	r3, #0
   b9126:	d065      	beq.n	b91f4 <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b9128:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b912c:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b9130:	4639      	mov	r1, r7
   b9132:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b9134:	463e      	mov	r6, r7
   b9136:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b913a:	f003 fac7 	bl	bc6cc <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b913e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9140:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b9144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9146:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b914a:	6833      	ldr	r3, [r6, #0]
   b914c:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b914e:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b9152:	a802      	add	r0, sp, #8
   b9154:	f7ff fc86 	bl	b8a64 <_ZN12LocalTimeHMSC1ERKS_>
   b9158:	aa02      	add	r2, sp, #8
   b915a:	4639      	mov	r1, r7
   b915c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b9160:	f7ff ff93 	bl	b908a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b9164:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b9168:	f104 0118 	add.w	r1, r4, #24
   b916c:	a802      	add	r0, sp, #8
   b916e:	f7ff fc79 	bl	b8a64 <_ZN12LocalTimeHMSC1ERKS_>
   b9172:	aa02      	add	r2, sp, #8
   b9174:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b9178:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b917c:	f7ff ff85 	bl	b908a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b9180:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b9184:	4286      	cmp	r6, r0
   b9186:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b918a:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b918e:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b9192:	da23      	bge.n	b91dc <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b9194:	42b2      	cmp	r2, r6
   b9196:	eb73 0505 	sbcs.w	r5, r3, r5
   b919a:	da19      	bge.n	b91d0 <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b919c:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b919e:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b91a0:	6820      	ldr	r0, [r4, #0]
   b91a2:	f7ff fbf5 	bl	b8990 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b91a6:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b91aa:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b91ae:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b91b0:	bb10      	cbnz	r0, b91f8 <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b91b2:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b91b6:	f7ff fcad 	bl	b8b14 <_ZNK12LocalTimeHMS9toSecondsEv>
   b91ba:	1a2d      	subs	r5, r5, r0
   b91bc:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b91c0:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b91c4:	9901      	ldr	r1, [sp, #4]
   b91c6:	a802      	add	r0, sp, #8
   b91c8:	f003 fa80 	bl	bc6cc <localtime_r>
}
   b91cc:	b005      	add	sp, #20
   b91ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b91d0:	4282      	cmp	r2, r0
   b91d2:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b91d4:	bfb4      	ite	lt
   b91d6:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b91d8:	2302      	movge	r3, #2
   b91da:	e7e0      	b.n	b919e <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b91dc:	4282      	cmp	r2, r0
   b91de:	eb73 0101 	sbcs.w	r1, r3, r1
   b91e2:	da01      	bge.n	b91e8 <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b91e4:	2303      	movs	r3, #3
   b91e6:	e7da      	b.n	b919e <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b91e8:	42b2      	cmp	r2, r6
   b91ea:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b91ec:	bfb4      	ite	lt
   b91ee:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b91f0:	2305      	movge	r3, #5
   b91f2:	e7d4      	b.n	b919e <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b91f4:	2306      	movs	r3, #6
   b91f6:	e7d2      	b.n	b919e <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b91f8:	f104 0018 	add.w	r0, r4, #24
   b91fc:	e7db      	b.n	b91b6 <_ZN16LocalTimeConvert7convertEv+0xae>

000b91fe <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b91fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9200:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9202:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9204:	4668      	mov	r0, sp
   b9206:	f7ff fc24 	bl	b8a52 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b920a:	466a      	mov	r2, sp
   b920c:	4629      	mov	r1, r5
   b920e:	4620      	mov	r0, r4
   b9210:	f004 f99a 	bl	bd548 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9214:	a801      	add	r0, sp, #4
   b9216:	f7fd fa75 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b921a:	4620      	mov	r0, r4
   b921c:	b003      	add	sp, #12
   b921e:	bd30      	pop	{r4, r5, pc}

000b9220 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9220:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9222:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9224:	4604      	mov	r4, r0
   b9226:	4668      	mov	r0, sp
   b9228:	f7ff fc13 	bl	b8a52 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b922c:	466a      	mov	r2, sp
   b922e:	4629      	mov	r1, r5
   b9230:	4620      	mov	r0, r4
   b9232:	f004 f965 	bl	bd500 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9236:	a801      	add	r0, sp, #4
   b9238:	f7fd fa64 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b923c:	4620      	mov	r0, r4
   b923e:	b003      	add	sp, #12
   b9240:	bd30      	pop	{r4, r5, pc}

000b9242 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9242:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9244:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9246:	4604      	mov	r4, r0
   b9248:	4668      	mov	r0, sp
   b924a:	f7ff fc02 	bl	b8a52 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b924e:	466a      	mov	r2, sp
   b9250:	4629      	mov	r1, r5
   b9252:	4620      	mov	r0, r4
   b9254:	f004 f8fd 	bl	bd452 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9258:	a801      	add	r0, sp, #4
   b925a:	f7fd fa53 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b925e:	4620      	mov	r0, r4
   b9260:	b003      	add	sp, #12
   b9262:	bd30      	pop	{r4, r5, pc}

000b9264 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b9264:	4770      	bx	lr

000b9266 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b9266:	b510      	push	{r4, lr}
}
   b9268:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b926a:	4604      	mov	r4, r0
}
   b926c:	f7fa ff17 	bl	b409e <_ZdlPvj>
   b9270:	4620      	mov	r0, r4
   b9272:	bd10      	pop	{r4, pc}

000b9274 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b9274:	6803      	ldr	r3, [r0, #0]
   b9276:	b2c9      	uxtb	r1, r1
   b9278:	689b      	ldr	r3, [r3, #8]
   b927a:	4718      	bx	r3

000b927c <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b927c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b927e:	4d03      	ldr	r5, [pc, #12]	; (b928c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b9280:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b9284:	e9c0 5100 	strd	r5, r1, [r0]
}
   b9288:	bd30      	pop	{r4, r5, pc}
   b928a:	bf00      	nop
   b928c:	000c1b70 	.word	0x000c1b70

000b9290 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b9290:	6840      	ldr	r0, [r0, #4]
   b9292:	f003 bf4f 	b.w	bd134 <_ZN7TwoWire5beginEv>

000b9296 <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b9296:	b510      	push	{r4, lr}
   b9298:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b929a:	6800      	ldr	r0, [r0, #0]
   b929c:	f003 ffa5 	bl	bd1ea <_ZN7TwoWire6unlockEv>
   b92a0:	4620      	mov	r0, r4
   b92a2:	bd10      	pop	{r4, pc}

000b92a4 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b92a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b92a8:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b92aa:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b92ac:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b92ae:	460d      	mov	r5, r1
   b92b0:	4616      	mov	r6, r2
   b92b2:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b92b4:	f003 ff90 	bl	bd1d8 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b92b8:	b1a7      	cbz	r7, b92e4 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b92ba:	68e1      	ldr	r1, [r4, #12]
   b92bc:	6860      	ldr	r0, [r4, #4]
   b92be:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b92c2:	f003 ff6a 	bl	bd19a <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b92c6:	0a29      	lsrs	r1, r5, #8
   b92c8:	6860      	ldr	r0, [r4, #4]
   b92ca:	f7ff ffd3 	bl	b9274 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b92ce:	4629      	mov	r1, r5
   b92d0:	6860      	ldr	r0, [r4, #4]
   b92d2:	f7ff ffcf 	bl	b9274 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b92d6:	6860      	ldr	r0, [r4, #4]
   b92d8:	2100      	movs	r1, #0
   b92da:	f003 ff79 	bl	bd1d0 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b92de:	b148      	cbz	r0, b92f4 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b92e0:	2400      	movs	r4, #0
   b92e2:	e000      	b.n	b92e6 <_ZN6MB85RC8readDataEjPhj+0x42>
   b92e4:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b92e6:	a801      	add	r0, sp, #4
   b92e8:	f7ff ffd5 	bl	b9296 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b92ec:	4620      	mov	r0, r4
   b92ee:	b003      	add	sp, #12
   b92f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b92f4:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b92f6:	7b21      	ldrb	r1, [r4, #12]
   b92f8:	6860      	ldr	r0, [r4, #4]
   b92fa:	46b8      	mov	r8, r7
   b92fc:	bf28      	it	cs
   b92fe:	f04f 0820 	movcs.w	r8, #32
   b9302:	2301      	movs	r3, #1
   b9304:	4642      	mov	r2, r8
   b9306:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b930a:	f003 ff30 	bl	bd16e <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b930e:	f006 fb27 	bl	bf960 <_Z19__fetch_global_Wirev>
   b9312:	6803      	ldr	r3, [r0, #0]
   b9314:	691b      	ldr	r3, [r3, #16]
   b9316:	4798      	blx	r3
   b9318:	4540      	cmp	r0, r8
   b931a:	dbe1      	blt.n	b92e0 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b931c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b9320:	f006 fb1e 	bl	bf960 <_Z19__fetch_global_Wirev>
   b9324:	6803      	ldr	r3, [r0, #0]
   b9326:	695b      	ldr	r3, [r3, #20]
   b9328:	4798      	blx	r3
   b932a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b932e:	454e      	cmp	r6, r9
   b9330:	d1f6      	bne.n	b9320 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b9332:	4445      	add	r5, r8
				dataLen--;
   b9334:	eba7 0708 	sub.w	r7, r7, r8
   b9338:	e7be      	b.n	b92b8 <_ZN6MB85RC8readDataEjPhj+0x14>

000b933a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b933a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b933e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b9340:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9342:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b9344:	460e      	mov	r6, r1
   b9346:	4690      	mov	r8, r2
   b9348:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b934a:	f003 ff45 	bl	bd1d8 <_ZN7TwoWire4lockEv>
   b934e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b9352:	f1b9 0f00 	cmp.w	r9, #0
   b9356:	d02a      	beq.n	b93ae <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b9358:	b34d      	cbz	r5, b93ae <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b935a:	68e1      	ldr	r1, [r4, #12]
   b935c:	6860      	ldr	r0, [r4, #4]
   b935e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b9362:	f003 ff1a 	bl	bd19a <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b9366:	0a31      	lsrs	r1, r6, #8
   b9368:	6860      	ldr	r0, [r4, #4]
   b936a:	f7ff ff83 	bl	b9274 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b936e:	6860      	ldr	r0, [r4, #4]
   b9370:	4631      	mov	r1, r6
   b9372:	f7ff ff7f 	bl	b9274 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9376:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b937a:	4647      	mov	r7, r8
   b937c:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b9380:	6860      	ldr	r0, [r4, #4]
   b9382:	f817 1b01 	ldrb.w	r1, [r7], #1
   b9386:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b9388:	3d01      	subs	r5, #1
				wire.write(*data);
   b938a:	689b      	ldr	r3, [r3, #8]
   b938c:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b938e:	4555      	cmp	r5, sl
   b9390:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b9394:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9396:	d001      	beq.n	b939c <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b9398:	2d00      	cmp	r5, #0
   b939a:	d1f1      	bne.n	b9380 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b939c:	6860      	ldr	r0, [r4, #4]
   b939e:	2101      	movs	r1, #1
   b93a0:	f003 ff16 	bl	bd1d0 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b93a4:	2800      	cmp	r0, #0
   b93a6:	d0d7      	beq.n	b9358 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b93a8:	f04f 0900 	mov.w	r9, #0
   b93ac:	e7d1      	b.n	b9352 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b93ae:	a801      	add	r0, sp, #4
   b93b0:	f7ff ff71 	bl	b9296 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b93b4:	4648      	mov	r0, r9
   b93b6:	b003      	add	sp, #12
   b93b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b93bc <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b93bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b93c0:	b08b      	sub	sp, #44	; 0x2c
   b93c2:	460e      	mov	r6, r1
   b93c4:	4615      	mov	r5, r2
   b93c6:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b93c8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b93ca:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b93cc:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b93ce:	f003 ff03 	bl	bd1d8 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b93d2:	42ae      	cmp	r6, r5
   b93d4:	d229      	bcs.n	b942a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b93d6:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b93d8:	4425      	add	r5, r4
			while(numBytes > 0) {
   b93da:	b18c      	cbz	r4, b9400 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b93dc:	2c1e      	cmp	r4, #30
   b93de:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b93e0:	f8d8 3000 	ldr.w	r3, [r8]
   b93e4:	bf28      	it	cs
   b93e6:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b93e8:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b93ea:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b93ee:	aa02      	add	r2, sp, #8
   b93f0:	463b      	mov	r3, r7
   b93f2:	4631      	mov	r1, r6
   b93f4:	4640      	mov	r0, r8
				framAddrTo -= count;
   b93f6:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b93f8:	47c8      	blx	r9
				if (!result) {
   b93fa:	b948      	cbnz	r0, b9410 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b93fc:	2400      	movs	r4, #0
   b93fe:	e000      	b.n	b9402 <_ZN6MB85RC8moveDataEjjj+0x46>
   b9400:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b9402:	a801      	add	r0, sp, #4
   b9404:	f7ff ff47 	bl	b9296 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b9408:	4620      	mov	r0, r4
   b940a:	b00b      	add	sp, #44	; 0x2c
   b940c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b9410:	f8d8 3000 	ldr.w	r3, [r8]
   b9414:	aa02      	add	r2, sp, #8
   b9416:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b941a:	4629      	mov	r1, r5
   b941c:	463b      	mov	r3, r7
   b941e:	4640      	mov	r0, r8
   b9420:	47c8      	blx	r9
				if (!result) {
   b9422:	2800      	cmp	r0, #0
   b9424:	d0ea      	beq.n	b93fc <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b9426:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b9428:	e7d7      	b.n	b93da <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b942a:	d9e9      	bls.n	b9400 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b942c:	2c00      	cmp	r4, #0
   b942e:	d0e7      	beq.n	b9400 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b9430:	f8d8 3000 	ldr.w	r3, [r8]
   b9434:	2c1e      	cmp	r4, #30
   b9436:	4627      	mov	r7, r4
   b9438:	bf28      	it	cs
   b943a:	271e      	movcs	r7, #30
   b943c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b9440:	aa02      	add	r2, sp, #8
   b9442:	463b      	mov	r3, r7
   b9444:	4631      	mov	r1, r6
   b9446:	4640      	mov	r0, r8
   b9448:	47c8      	blx	r9
				if (!result) {
   b944a:	2800      	cmp	r0, #0
   b944c:	d0d6      	beq.n	b93fc <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b944e:	f8d8 3000 	ldr.w	r3, [r8]
   b9452:	aa02      	add	r2, sp, #8
   b9454:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b9458:	4629      	mov	r1, r5
   b945a:	463b      	mov	r3, r7
   b945c:	4640      	mov	r0, r8
   b945e:	47c8      	blx	r9
				if (!result) {
   b9460:	2800      	cmp	r0, #0
   b9462:	d0cb      	beq.n	b93fc <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b9464:	443e      	add	r6, r7
				framAddrTo += count;
   b9466:	443d      	add	r5, r7
				numBytes -= count;
   b9468:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b946a:	e7df      	b.n	b942c <_ZN6MB85RC8moveDataEjjj+0x70>

000b946c <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   b946c:	6803      	ldr	r3, [r0, #0]
   b946e:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   b9470:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   b9474:	2101      	movs	r1, #1
   b9476:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   b947a:	4770      	bx	lr

000b947c <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b947c:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b947e:	6842      	ldr	r2, [r0, #4]
   b9480:	4603      	mov	r3, r0
   b9482:	1054      	asrs	r4, r2, #1
   b9484:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b9488:	07d2      	lsls	r2, r2, #31
   b948a:	bf48      	it	mi
   b948c:	590a      	ldrmi	r2, [r1, r4]
   b948e:	681b      	ldr	r3, [r3, #0]
      }
   b9490:	f85d 4b04 	ldr.w	r4, [sp], #4
   b9494:	bf48      	it	mi
   b9496:	58d3      	ldrmi	r3, [r2, r3]
   b9498:	4718      	bx	r3

000b949a <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b949a:	2a01      	cmp	r2, #1
   b949c:	d102      	bne.n	b94a4 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b949e:	6001      	str	r1, [r0, #0]
      }
   b94a0:	2000      	movs	r0, #0
   b94a2:	4770      	bx	lr
	  switch (__op)
   b94a4:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b94a6:	bf04      	itt	eq
   b94a8:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b94ac:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b94b0:	e7f6      	b.n	b94a0 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b94b2 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b94b2:	2a01      	cmp	r2, #1
   b94b4:	d102      	bne.n	b94bc <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b94b6:	6001      	str	r1, [r0, #0]
      }
   b94b8:	2000      	movs	r0, #0
   b94ba:	4770      	bx	lr
	  switch (__op)
   b94bc:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b94be:	bf04      	itt	eq
   b94c0:	680b      	ldreq	r3, [r1, #0]
   b94c2:	6003      	streq	r3, [r0, #0]
	      break;
   b94c4:	e7f8      	b.n	b94b8 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000b94c6 <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   b94c6:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b94c8:	f002 bcbc 	b.w	bbe44 <os_mutex_recursive_lock>

000b94cc <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   b94cc:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   b94d0:	4601      	mov	r1, r0
    if (stateHandler) {
   b94d2:	b11b      	cbz	r3, b94dc <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b94d4:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   b94d8:	30c0      	adds	r0, #192	; 0xc0
   b94da:	4718      	bx	r3
}
   b94dc:	4770      	bx	lr
	...

000b94e0 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b94e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   b94e2:	4d12      	ldr	r5, [pc, #72]	; (b952c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b94e4:	4608      	mov	r0, r1
        eventData = "";
   b94e6:	2a00      	cmp	r2, #0
   b94e8:	bf18      	it	ne
   b94ea:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b94ec:	460e      	mov	r6, r1
   b94ee:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b94f0:	f007 f8b5 	bl	c065e <strlen>
   b94f4:	2840      	cmp	r0, #64	; 0x40
   b94f6:	d816      	bhi.n	b9526 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   b94f8:	4628      	mov	r0, r5
   b94fa:	f007 f8b0 	bl	c065e <strlen>
   b94fe:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b9502:	d810      	bhi.n	b9526 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   b9504:	3043      	adds	r0, #67	; 0x43
   b9506:	f7fa fdc8 	bl	b409a <_Znaj>
    if (event) {
   b950a:	4604      	mov	r4, r0
   b950c:	b148      	cbz	r0, b9522 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   b950e:	4631      	mov	r1, r6
        event->flags = flags;
   b9510:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   b9514:	f007 f87d 	bl	c0612 <strcpy>
        strcpy(event->eventData, eventData);
   b9518:	4629      	mov	r1, r5
   b951a:	f104 0042 	add.w	r0, r4, #66	; 0x42
   b951e:	f007 f878 	bl	c0612 <strcpy>
}
   b9522:	4620      	mov	r0, r4
   b9524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   b9526:	2400      	movs	r4, #0
   b9528:	e7fb      	b.n	b9522 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   b952a:	bf00      	nop
   b952c:	000c2399 	.word	0x000c2399

000b9530 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b9530:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9532:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b9534:	460a      	mov	r2, r1
   b9536:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b9538:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b953a:	1d01      	adds	r1, r0, #4
   b953c:	a808      	add	r0, sp, #32
   b953e:	f002 f881 	bl	bb644 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b9542:	9808      	ldr	r0, [sp, #32]
   b9544:	2100      	movs	r1, #0
   b9546:	f007 f99f 	bl	c0888 <open>
   b954a:	4605      	mov	r5, r0
   b954c:	a808      	add	r0, sp, #32
   b954e:	f005 fbcb 	bl	bece8 <_ZN6StringD1Ev>
    if (fd) {
   b9552:	2d00      	cmp	r5, #0
   b9554:	d060      	beq.n	b9618 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   b9556:	a908      	add	r1, sp, #32
   b9558:	4628      	mov	r0, r5
   b955a:	f007 f983 	bl	c0864 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   b955e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9560:	492e      	ldr	r1, [pc, #184]	; (b961c <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   b9562:	482f      	ldr	r0, [pc, #188]	; (b9620 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b9564:	4632      	mov	r2, r6
   b9566:	f7fd fc85 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   b956a:	2200      	movs	r2, #0
   b956c:	4611      	mov	r1, r2
   b956e:	4628      	mov	r0, r5
   b9570:	f007 f980 	bl	c0874 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   b9574:	2208      	movs	r2, #8
   b9576:	a906      	add	r1, sp, #24
   b9578:	4628      	mov	r0, r5
   b957a:	f007 f999 	bl	c08b0 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   b957e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b9580:	2f4a      	cmp	r7, #74	; 0x4a
   b9582:	dd39      	ble.n	b95f8 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   b9584:	4b27      	ldr	r3, [pc, #156]	; (b9624 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   b9586:	9a06      	ldr	r2, [sp, #24]
   b9588:	429a      	cmp	r2, r3
   b958a:	d135      	bne.n	b95f8 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   b958c:	4b26      	ldr	r3, [pc, #152]	; (b9628 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   b958e:	9a07      	ldr	r2, [sp, #28]
   b9590:	429a      	cmp	r2, r3
   b9592:	d131      	bne.n	b95f8 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   b9594:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   b9598:	4610      	mov	r0, r2
   b959a:	9205      	str	r2, [sp, #20]
   b959c:	f7fa fd7d 	bl	b409a <_Znaj>
            if (result) {
   b95a0:	4604      	mov	r4, r0
   b95a2:	b1c0      	cbz	r0, b95d6 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b95a4:	4427      	add	r7, r4
                read(fd, result, eventSize);
   b95a6:	4601      	mov	r1, r0
   b95a8:	9a05      	ldr	r2, [sp, #20]
   b95aa:	4628      	mov	r0, r5
   b95ac:	f007 f980 	bl	c08b0 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b95b0:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   b95b4:	b9ab      	cbnz	r3, b95e2 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   b95b6:	1c63      	adds	r3, r4, #1
   b95b8:	4618      	mov	r0, r3
   b95ba:	9305      	str	r3, [sp, #20]
   b95bc:	f007 f84f 	bl	c065e <strlen>
   b95c0:	283f      	cmp	r0, #63	; 0x3f
   b95c2:	9b05      	ldr	r3, [sp, #20]
   b95c4:	d80d      	bhi.n	b95e2 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   b95c6:	f104 0242 	add.w	r2, r4, #66	; 0x42
   b95ca:	9200      	str	r2, [sp, #0]
   b95cc:	4917      	ldr	r1, [pc, #92]	; (b962c <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   b95ce:	4814      	ldr	r0, [pc, #80]	; (b9620 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b95d0:	4632      	mov	r2, r6
   b95d2:	f7fd fc4f 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   b95d6:	4628      	mov	r0, r5
   b95d8:	f007 f93c 	bl	c0854 <close>
}
   b95dc:	4620      	mov	r0, r4
   b95de:	b01f      	add	sp, #124	; 0x7c
   b95e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   b95e2:	4913      	ldr	r1, [pc, #76]	; (b9630 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   b95e4:	480e      	ldr	r0, [pc, #56]	; (b9620 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b95e6:	4632      	mov	r2, r6
   b95e8:	f7fd fc44 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   b95ec:	2143      	movs	r1, #67	; 0x43
   b95ee:	4620      	mov	r0, r4
   b95f0:	f7fa fd55 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   b95f4:	2400      	movs	r4, #0
   b95f6:	e7ee      	b.n	b95d6 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   b95f8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   b95fc:	9302      	str	r3, [sp, #8]
   b95fe:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b9602:	9301      	str	r3, [sp, #4]
   b9604:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b9608:	9300      	str	r3, [sp, #0]
   b960a:	490a      	ldr	r1, [pc, #40]	; (b9634 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   b960c:	9b06      	ldr	r3, [sp, #24]
   b960e:	4804      	ldr	r0, [pc, #16]	; (b9620 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b9610:	4632      	mov	r2, r6
   b9612:	f7fd fc2f 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
   b9616:	e7ed      	b.n	b95f4 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   b9618:	462c      	mov	r4, r5
    return result;
   b961a:	e7df      	b.n	b95dc <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   b961c:	000c1b84 	.word	0x000c1b84
   b9620:	2003e448 	.word	0x2003e448
   b9624:	31b67663 	.word	0x31b67663
   b9628:	00410801 	.word	0x00410801
   b962c:	000c1b98 	.word	0x000c1b98
   b9630:	000c1bba 	.word	0x000c1bba
   b9634:	000c1be8 	.word	0x000c1be8

000b9638 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   b9638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b963c:	4680      	mov	r8, r0
   b963e:	4b28      	ldr	r3, [pc, #160]	; (b96e0 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   b9640:	f848 3b04 	str.w	r3, [r8], #4
   b9644:	4604      	mov	r4, r0
   b9646:	4640      	mov	r0, r8
   b9648:	f001 ff14 	bl	bb474 <_ZN14SequentialFileC1Ev>
   b964c:	2202      	movs	r2, #2
   b964e:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b9650:	2500      	movs	r5, #0
   b9652:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b9656:	2308      	movs	r3, #8
   b9658:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b965a:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   b965e:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   b9662:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   b9666:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b966a:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b966c:	2020      	movs	r0, #32
   b966e:	f7fa fd12 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b9672:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b9674:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b9676:	3e01      	subs	r6, #1
   b9678:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b967a:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b967e:	4607      	mov	r7, r0
   b9680:	f44f 7000 	mov.w	r0, #512	; 0x200
   b9684:	f7fa fd07 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9688:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b968c:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   b9690:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9694:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b9698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b969c:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   b96a0:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   b96a4:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   b96a8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b96ac:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b96b0:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   b96b4:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   b96b8:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   b96bc:	4909      	ldr	r1, [pc, #36]	; (b96e4 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   b96be:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   b96c2:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   b96c6:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   b96ca:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   b96ce:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   b96d2:	4640      	mov	r0, r8
   b96d4:	f001 ff14 	bl	bb500 <_ZN14SequentialFile11withDirPathEPKc>
}
   b96d8:	4620      	mov	r0, r4
   b96da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b96de:	bf00      	nop
   b96e0:	000c1e04 	.word	0x000c1e04
   b96e4:	000c1c2d 	.word	0x000c1c2d

000b96e8 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   b96e8:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b96ea:	4d06      	ldr	r5, [pc, #24]	; (b9704 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   b96ec:	682b      	ldr	r3, [r5, #0]
   b96ee:	b93b      	cbnz	r3, b9700 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   b96f0:	20d0      	movs	r0, #208	; 0xd0
   b96f2:	f7fa fcd0 	bl	b4096 <_Znwj>
   b96f6:	4604      	mov	r4, r0
   b96f8:	b108      	cbz	r0, b96fe <_ZN17PublishQueuePosix8instanceEv+0x16>
   b96fa:	f7ff ff9d 	bl	b9638 <_ZN17PublishQueuePosixC1Ev>
   b96fe:	602c      	str	r4, [r5, #0]
}
   b9700:	6828      	ldr	r0, [r5, #0]
   b9702:	bd38      	pop	{r3, r4, r5, pc}
   b9704:	2003e44c 	.word	0x2003e44c

000b9708 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b9708:	6942      	ldr	r2, [r0, #20]
   b970a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b970c:	1a9b      	subs	r3, r3, r2
   b970e:	109b      	asrs	r3, r3, #2
   b9710:	1e5a      	subs	r2, r3, #1
   b9712:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   b9716:	1a5b      	subs	r3, r3, r1
   b9718:	109b      	asrs	r3, r3, #2
   b971a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b971e:	6902      	ldr	r2, [r0, #16]
   b9720:	6880      	ldr	r0, [r0, #8]
   b9722:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b9724:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b9728:	4770      	bx	lr

000b972a <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   b972a:	b538      	push	{r3, r4, r5, lr}
   b972c:	4605      	mov	r5, r0
   b972e:	f7ff feca 	bl	b94c6 <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   b9732:	f105 0078 	add.w	r0, r5, #120	; 0x78
   b9736:	f7ff ffe7 	bl	b9708 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   b973a:	4604      	mov	r4, r0
   b973c:	b950      	cbnz	r0, b9754 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   b973e:	1d28      	adds	r0, r5, #4
   b9740:	f002 f9d4 	bl	bbaec <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   b9744:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   b9748:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   b974a:	b11b      	cbz	r3, b9754 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   b974c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   b9750:	b903      	cbnz	r3, b9754 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   b9752:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   b9754:	6f68      	ldr	r0, [r5, #116]	; 0x74
   b9756:	f002 fb7d 	bl	bbe54 <os_mutex_recursive_unlock>
}
   b975a:	4620      	mov	r0, r4
   b975c:	bd38      	pop	{r3, r4, r5, pc}

000b975e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   b975e:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   b9760:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   b9762:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   b9764:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b9766:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   b9768:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   b976a:	d002      	beq.n	b9772 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   b976c:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b976e:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   b9770:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b9772:	68c0      	ldr	r0, [r0, #12]
   b9774:	f44f 7100 	mov.w	r1, #512	; 0x200
   b9778:	f7fa fc91 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b977c:	6963      	ldr	r3, [r4, #20]
   b977e:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b9780:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   b9782:	685b      	ldr	r3, [r3, #4]
   b9784:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9786:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b978a:	6122      	str	r2, [r4, #16]
   b978c:	e7ef      	b.n	b976e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000b9790 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   b9790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9794:	b085      	sub	sp, #20
   b9796:	4604      	mov	r4, r0
   b9798:	f7ff fe95 	bl	b94c6 <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   b979c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b9844 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   b97a0:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b9848 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b97a4:	f8df b0a4 	ldr.w	fp, [pc, #164]	; b984c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   b97a8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   b97ac:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b97b0:	4293      	cmp	r3, r2
   b97b2:	d105      	bne.n	b97c0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   b97b4:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b97b6:	b005      	add	sp, #20
   b97b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b97bc:	f002 bb4a 	b.w	bbe54 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   b97c0:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   b97c4:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   b97c8:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   b97ca:	f7ff ffc8 	bl	b975e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   b97ce:	4640      	mov	r0, r8
   b97d0:	f002 f930 	bl	bba34 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b97d4:	2300      	movs	r3, #0
   b97d6:	4602      	mov	r2, r0
   b97d8:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   b97da:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b97dc:	4668      	mov	r0, sp
   b97de:	f001 ff31 	bl	bb644 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b97e2:	9800      	ldr	r0, [sp, #0]
   b97e4:	f240 2102 	movw	r1, #514	; 0x202
   b97e8:	f007 f84e 	bl	c0888 <open>
   b97ec:	4605      	mov	r5, r0
   b97ee:	4668      	mov	r0, sp
   b97f0:	f005 fa7a 	bl	bece8 <_ZN6StringD1Ev>
            if (fd) {
   b97f4:	b1c5      	cbz	r5, b9828 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   b97f6:	2208      	movs	r2, #8
   b97f8:	4669      	mov	r1, sp
   b97fa:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   b97fc:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   b9800:	f007 f868 	bl	c08d4 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   b9804:	f107 0042 	add.w	r0, r7, #66	; 0x42
   b9808:	f006 ff29 	bl	c065e <strlen>
   b980c:	4639      	mov	r1, r7
   b980e:	f100 0243 	add.w	r2, r0, #67	; 0x43
   b9812:	4628      	mov	r0, r5
   b9814:	f007 f85e 	bl	c08d4 <write>
                close(fd);
   b9818:	4628      	mov	r0, r5
   b981a:	f007 f81b 	bl	c0854 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b981e:	4808      	ldr	r0, [pc, #32]	; (b9840 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   b9820:	4632      	mov	r2, r6
   b9822:	4659      	mov	r1, fp
   b9824:	f7fd fb26 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   b9828:	4631      	mov	r1, r6
   b982a:	4640      	mov	r0, r8
   b982c:	f002 f944 	bl	bbab8 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   b9830:	2f00      	cmp	r7, #0
   b9832:	d0b9      	beq.n	b97a8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   b9834:	2143      	movs	r1, #67	; 0x43
   b9836:	4638      	mov	r0, r7
   b9838:	f7fa fc31 	bl	b409e <_ZdlPvj>
   b983c:	e7b2      	b.n	b97a4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   b983e:	bf00      	nop
   b9840:	2003e448 	.word	0x2003e448
   b9844:	31b67663 	.word	0x31b67663
   b9848:	00410801 	.word	0x00410801
   b984c:	000c1c3b 	.word	0x000c1c3b

000b9850 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   b9850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9854:	4604      	mov	r4, r0
   b9856:	f7ff fe36 	bl	b94c6 <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   b985a:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b985e:	f7ff ff53 	bl	b9708 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9862:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b9864:	4298      	cmp	r0, r3
   b9866:	d902      	bls.n	b986e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   b9868:	4620      	mov	r0, r4
   b986a:	f7ff ff91 	bl	b9790 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   b986e:	f8df 8044 	ldr.w	r8, [pc, #68]	; b98b4 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   b9872:	4f0f      	ldr	r7, [pc, #60]	; (b98b0 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   b9874:	1d26      	adds	r6, r4, #4
   b9876:	4630      	mov	r0, r6
   b9878:	f002 f938 	bl	bbaec <_ZNK14SequentialFile11getQueueLenEv>
   b987c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   b987e:	4298      	cmp	r0, r3
   b9880:	dc04      	bgt.n	b988c <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   b9882:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b9884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9888:	f002 bae4 	b.w	bbe54 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   b988c:	2101      	movs	r1, #1
   b988e:	4630      	mov	r0, r6
   b9890:	f002 f8dc 	bl	bba4c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   b9894:	4605      	mov	r5, r0
   b9896:	2800      	cmp	r0, #0
   b9898:	d0ed      	beq.n	b9876 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   b989a:	4601      	mov	r1, r0
   b989c:	2200      	movs	r2, #0
   b989e:	4630      	mov	r0, r6
   b98a0:	f001 ff0c 	bl	bb6bc <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   b98a4:	462a      	mov	r2, r5
   b98a6:	4641      	mov	r1, r8
   b98a8:	4638      	mov	r0, r7
   b98aa:	f7fa fc48 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b98ae:	e7e2      	b.n	b9876 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   b98b0:	2003e448 	.word	0x2003e448
   b98b4:	000c1c58 	.word	0x000c1c58

000b98b8 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   b98b8:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   b98ba:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b98be:	430b      	orrs	r3, r1
   b98c0:	d005      	beq.n	b98ce <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   b98c2:	3840      	subs	r0, #64	; 0x40
   b98c4:	ea50 0301 	orrs.w	r3, r0, r1
   b98c8:	d10b      	bne.n	b98e2 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   b98ca:	2a09      	cmp	r2, #9
   b98cc:	d109      	bne.n	b98e2 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   b98ce:	4905      	ldr	r1, [pc, #20]	; (b98e4 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   b98d0:	4805      	ldr	r0, [pc, #20]	; (b98e8 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   b98d2:	f7fd facf 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   b98d6:	f7ff ff07 	bl	b96e8 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   b98da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   b98de:	f7ff bf57 	b.w	b9790 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   b98e2:	bd08      	pop	{r3, pc}
   b98e4:	000c1c6b 	.word	0x000c1c6b
   b98e8:	2003e448 	.word	0x2003e448

000b98ec <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b98ec:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b98ee:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b98f0:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b98f2:	b183      	cbz	r3, b9916 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b98f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b98f6:	6945      	ldr	r5, [r0, #20]
   b98f8:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b98fa:	42ae      	cmp	r6, r5
   b98fc:	d906      	bls.n	b990c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   b98fe:	f855 0b04 	ldr.w	r0, [r5], #4
   b9902:	f44f 7100 	mov.w	r1, #512	; 0x200
   b9906:	f7fa fbca 	bl	b409e <_ZdlPvj>
   b990a:	e7f6      	b.n	b98fa <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   b990c:	6861      	ldr	r1, [r4, #4]
   b990e:	6820      	ldr	r0, [r4, #0]
   b9910:	0089      	lsls	r1, r1, #2
   b9912:	f7fa fbc4 	bl	b409e <_ZdlPvj>
    }
   b9916:	4620      	mov	r0, r4
   b9918:	bd70      	pop	{r4, r5, r6, pc}
	...

000b991c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b991c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b991e:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   b9922:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   b9924:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b9926:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   b9928:	b90a      	cbnz	r2, b992e <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   b992a:	07d9      	lsls	r1, r3, #31
   b992c:	d505      	bpl.n	b993a <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b992e:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   b9932:	4b0a      	ldr	r3, [pc, #40]	; (b995c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   b9934:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b9936:	4b0a      	ldr	r3, [pc, #40]	; (b9960 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   b9938:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b993a:	4621      	mov	r1, r4
   b993c:	4668      	mov	r0, sp
   b993e:	f7fe f91e 	bl	b7b7e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9942:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9944:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9946:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9948:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b994a:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b994c:	4668      	mov	r0, sp
   b994e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9950:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9952:	9203      	str	r2, [sp, #12]
   b9954:	f7fb fb2d 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
	}
   b9958:	b004      	add	sp, #16
   b995a:	bd10      	pop	{r4, pc}
   b995c:	000b947d 	.word	0x000b947d
   b9960:	000b949b 	.word	0x000b949b

000b9964 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   b9964:	b570      	push	{r4, r5, r6, lr}
   b9966:	b086      	sub	sp, #24
   b9968:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b996a:	f002 fd9f 	bl	bc4ac <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   b996e:	b948      	cbnz	r0, b9984 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   b9970:	4b43      	ldr	r3, [pc, #268]	; (b9a80 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   b9972:	a902      	add	r1, sp, #8
   b9974:	e9cd 3002 	strd	r3, r0, [sp, #8]
   b9978:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b997c:	f7ff ffce 	bl	b991c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b9980:	b006      	add	sp, #24
   b9982:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   b9984:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   b9988:	b11d      	cbz	r5, b9992 <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   b998a:	2301      	movs	r3, #1
   b998c:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   b9990:	e7f6      	b.n	b9980 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   b9992:	f002 fa97 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   b9996:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b999a:	1ac0      	subs	r0, r0, r3
   b999c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b99a0:	4298      	cmp	r0, r3
   b99a2:	d3ed      	bcc.n	b9980 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   b99a4:	1d26      	adds	r6, r4, #4
   b99a6:	4629      	mov	r1, r5
   b99a8:	4630      	mov	r0, r6
   b99aa:	f002 f84f 	bl	bba4c <_ZN14SequentialFile16getFileFromQueueEb>
   b99ae:	4601      	mov	r1, r0
   b99b0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   b99b4:	2800      	cmp	r0, #0
   b99b6:	d052      	beq.n	b9a5e <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   b99b8:	4620      	mov	r0, r4
   b99ba:	f7ff fdb9 	bl	b9530 <_ZN17PublishQueuePosix13readQueueFileEi>
   b99be:	4605      	mov	r5, r0
   b99c0:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   b99c4:	2800      	cmp	r0, #0
   b99c6:	d035      	beq.n	b9a34 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   b99c8:	f002 fa7c 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   b99cc:	ae02      	add	r6, sp, #8
   b99ce:	2500      	movs	r5, #0
   b99d0:	4b2c      	ldr	r3, [pc, #176]	; (b9a84 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   b99d2:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   b99d6:	4631      	mov	r1, r6
   b99d8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b99dc:	9302      	str	r3, [sp, #8]
   b99de:	9503      	str	r5, [sp, #12]
   b99e0:	f7ff ff9c 	bl	b991c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b99e4:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   b99e8:	f103 0242 	add.w	r2, r3, #66	; 0x42
   b99ec:	9200      	str	r2, [sp, #0]
   b99ee:	4926      	ldr	r1, [pc, #152]	; (b9a88 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   b99f0:	4a26      	ldr	r2, [pc, #152]	; (b9a8c <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   b99f2:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b99f6:	42a8      	cmp	r0, r5
   b99f8:	bf08      	it	eq
   b99fa:	460a      	moveq	r2, r1
   b99fc:	3301      	adds	r3, #1
   b99fe:	4924      	ldr	r1, [pc, #144]	; (b9a90 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   b9a00:	4824      	ldr	r0, [pc, #144]	; (b9a94 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   b9a02:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b9a06:	f7fd fa35 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   b9a0a:	f7fd fffb 	bl	b7a04 <_ZN19BackgroundPublishRK8instanceEv>
   b9a0e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   b9a12:	4b21      	ldr	r3, [pc, #132]	; (b9a98 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   b9a14:	9305      	str	r3, [sp, #20]
   b9a16:	e9cd 6500 	strd	r6, r5, [sp]
   b9a1a:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   b9a1c:	4b1f      	ldr	r3, [pc, #124]	; (b9a9c <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b9a1e:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b9a20:	9304      	str	r3, [sp, #16]
   b9a22:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9a26:	3242      	adds	r2, #66	; 0x42
   b9a28:	f7fe f938 	bl	b7c9c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   b9a2c:	4630      	mov	r0, r6
   b9a2e:	f7fb fac0 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
   b9a32:	e7a5      	b.n	b9980 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   b9a34:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   b9a38:	4919      	ldr	r1, [pc, #100]	; (b9aa0 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   b9a3a:	4816      	ldr	r0, [pc, #88]	; (b9a94 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   b9a3c:	f7fa fb7f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   b9a40:	2101      	movs	r1, #1
   b9a42:	4630      	mov	r0, r6
   b9a44:	f002 f802 	bl	bba4c <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   b9a48:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   b9a4c:	462a      	mov	r2, r5
   b9a4e:	4630      	mov	r0, r6
   b9a50:	f001 fe34 	bl	bb6bc <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   b9a54:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b9a58:	2b00      	cmp	r3, #0
   b9a5a:	d1b5      	bne.n	b99c8 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   b9a5c:	e795      	b.n	b998a <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   b9a5e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   b9a62:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b9a66:	429a      	cmp	r2, r3
   b9a68:	d007      	beq.n	b9a7a <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   b9a6a:	681b      	ldr	r3, [r3, #0]
   b9a6c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   b9a70:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b9a74:	f7ff fe73 	bl	b975e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   b9a78:	e7ec      	b.n	b9a54 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   b9a7a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   b9a7e:	e784      	b.n	b998a <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   b9a80:	000b9aa5 	.word	0x000b9aa5
   b9a84:	000b9e25 	.word	0x000b9e25
   b9a88:	000c1c9a 	.word	0x000c1c9a
   b9a8c:	000c218c 	.word	0x000c218c
   b9a90:	000c1cbb 	.word	0x000c1cbb
   b9a94:	2003e448 	.word	0x2003e448
   b9a98:	000b946d 	.word	0x000b946d
   b9a9c:	000b94b3 	.word	0x000b94b3
   b9aa0:	000c1c9e 	.word	0x000c1c9e

000b9aa4 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   b9aa4:	b513      	push	{r0, r1, r4, lr}
   b9aa6:	4604      	mov	r4, r0
   b9aa8:	f002 fd00 	bl	bc4ac <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b9aac:	b190      	cbz	r0, b9ad4 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   b9aae:	f002 fa09 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   b9ab2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b9ab6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   b9aba:	4b0d      	ldr	r3, [pc, #52]	; (b9af0 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   b9abc:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   b9ac0:	9300      	str	r3, [sp, #0]
   b9ac2:	4669      	mov	r1, sp
   b9ac4:	2300      	movs	r3, #0
   b9ac6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b9aca:	9301      	str	r3, [sp, #4]
   b9acc:	f7ff ff26 	bl	b991c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b9ad0:	b002      	add	sp, #8
   b9ad2:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   b9ad4:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   b9ad8:	b11b      	cbz	r3, b9ae2 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   b9ada:	2301      	movs	r3, #1
   b9adc:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   b9ae0:	e7f6      	b.n	b9ad0 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   b9ae2:	4620      	mov	r0, r4
   b9ae4:	f7ff fe21 	bl	b972a <_ZN17PublishQueuePosix12getNumEventsEv>
   b9ae8:	2800      	cmp	r0, #0
   b9aea:	d0f6      	beq.n	b9ada <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   b9aec:	e7f0      	b.n	b9ad0 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   b9aee:	bf00      	nop
   b9af0:	000b9965 	.word	0x000b9965

000b9af4 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   b9af4:	b570      	push	{r4, r5, r6, lr}
   b9af6:	4605      	mov	r5, r0
   b9af8:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   b9afa:	2000      	movs	r0, #0
   b9afc:	f002 fc74 	bl	bc3e8 <system_thread_get_state>
   b9b00:	2801      	cmp	r0, #1
   b9b02:	d005      	beq.n	b9b10 <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   b9b04:	493e      	ldr	r1, [pc, #248]	; (b9c00 <_ZN17PublishQueuePosix5setupEv+0x10c>)
   b9b06:	483f      	ldr	r0, [pc, #252]	; (b9c04 <_ZN17PublishQueuePosix5setupEv+0x110>)
   b9b08:	f7fd f9a6 	bl	b6e58 <_ZNK5spark6Logger5errorEPKcz>
}
   b9b0c:	b018      	add	sp, #96	; 0x60
   b9b0e:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   b9b10:	f105 0074 	add.w	r0, r5, #116	; 0x74
   b9b14:	f002 f986 	bl	bbe24 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b9b18:	4b3b      	ldr	r3, [pc, #236]	; (b9c08 <_ZN17PublishQueuePosix5setupEv+0x114>)
   b9b1a:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b9b1c:	4b3b      	ldr	r3, [pc, #236]	; (b9c0c <_ZN17PublishQueuePosix5setupEv+0x118>)
   b9b1e:	9307      	str	r3, [sp, #28]
        };
   b9b20:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   b9b22:	4b3b      	ldr	r3, [pc, #236]	; (b9c10 <_ZN17PublishQueuePosix5setupEv+0x11c>)
   b9b24:	9306      	str	r3, [sp, #24]
   b9b26:	a808      	add	r0, sp, #32
   b9b28:	f7fb fba8 	bl	b527c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b9b2c:	a908      	add	r1, sp, #32
   b9b2e:	a80c      	add	r0, sp, #48	; 0x30
   b9b30:	f7fb fba4 	bl	b527c <_ZNSt8functionIFvyiEEC1ERKS1_>
   b9b34:	a90c      	add	r1, sp, #48	; 0x30
   b9b36:	a810      	add	r0, sp, #64	; 0x40
   b9b38:	f7fb fba0 	bl	b527c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b9b3c:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9b3e:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b9b40:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9b42:	f7fa faa8 	bl	b4096 <_Znwj>
   b9b46:	4604      	mov	r4, r0
   b9b48:	b160      	cbz	r0, b9b64 <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   b9b4a:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b9b4c:	4601      	mov	r1, r0
   b9b4e:	a810      	add	r0, sp, #64	; 0x40
   b9b50:	f7fe f815 	bl	b7b7e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9b54:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   b9b56:	68a2      	ldr	r2, [r4, #8]
   b9b58:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   b9b5a:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9b5c:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9b5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   b9b60:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9b62:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   b9b64:	4b2b      	ldr	r3, [pc, #172]	; (b9c14 <_ZN17PublishQueuePosix5setupEv+0x120>)
   b9b66:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   b9b68:	4b2b      	ldr	r3, [pc, #172]	; (b9c18 <_ZN17PublishQueuePosix5setupEv+0x124>)
   b9b6a:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   b9b6c:	4b2b      	ldr	r3, [pc, #172]	; (b9c1c <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9b6e:	9414      	str	r4, [sp, #80]	; 0x50
   b9b70:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b9b72:	2010      	movs	r0, #16
        SystemEventContext context = {};
   b9b74:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b9b78:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b9b7a:	f7fa fa8c 	bl	b4096 <_Znwj>
   b9b7e:	4604      	mov	r4, r0
   b9b80:	b1d8      	cbz	r0, b9bba <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   b9b82:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   b9b84:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   b9b86:	b133      	cbz	r3, b9b96 <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b9b88:	2202      	movs	r2, #2
   b9b8a:	a914      	add	r1, sp, #80	; 0x50
   b9b8c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b9b8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9b90:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b9b92:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b9b94:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b9b96:	4b22      	ldr	r3, [pc, #136]	; (b9c20 <_ZN17PublishQueuePosix5setupEv+0x12c>)
   b9b98:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b9b9a:	4a22      	ldr	r2, [pc, #136]	; (b9c24 <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   b9b9c:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b9b9e:	ab01      	add	r3, sp, #4
   b9ba0:	f44f 6004 	mov.w	r0, #2112	; 0x840
   b9ba4:	2100      	movs	r1, #0
   b9ba6:	f002 fbff 	bl	bc3a8 <system_subscribe_event>
        if (r) {
   b9baa:	b130      	cbz	r0, b9bba <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   b9bac:	4620      	mov	r0, r4
   b9bae:	f7fb fa00 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b9bb2:	2110      	movs	r1, #16
   b9bb4:	4620      	mov	r0, r4
   b9bb6:	f7fa fa72 	bl	b409e <_ZdlPvj>
   b9bba:	a814      	add	r0, sp, #80	; 0x50
   b9bbc:	f7fb f9f9 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
   b9bc0:	a810      	add	r0, sp, #64	; 0x40
   b9bc2:	f7fb f9f6 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
   b9bc6:	a80c      	add	r0, sp, #48	; 0x30
   b9bc8:	f7fb f9f3 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
   b9bcc:	a808      	add	r0, sp, #32
   b9bce:	f7fb f9f0 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
   b9bd2:	a804      	add	r0, sp, #16
   b9bd4:	f7fb f9ed 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   b9bd8:	f7fd ff14 	bl	b7a04 <_ZN19BackgroundPublishRK8instanceEv>
   b9bdc:	f7fe f838 	bl	b7c50 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   b9be0:	1d28      	adds	r0, r5, #4
   b9be2:	f001 feaf 	bl	bb944 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   b9be6:	4628      	mov	r0, r5
   b9be8:	f7ff fe32 	bl	b9850 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   b9bec:	4b0e      	ldr	r3, [pc, #56]	; (b9c28 <_ZN17PublishQueuePosix5setupEv+0x134>)
   b9bee:	9314      	str	r3, [sp, #80]	; 0x50
   b9bf0:	a914      	add	r1, sp, #80	; 0x50
   b9bf2:	2300      	movs	r3, #0
   b9bf4:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   b9bf8:	9315      	str	r3, [sp, #84]	; 0x54
   b9bfa:	f7ff fe8f 	bl	b991c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b9bfe:	e785      	b.n	b9b0c <_ZN17PublishQueuePosix5setupEv+0x18>
   b9c00:	000c1cda 	.word	0x000c1cda
   b9c04:	2003e448 	.word	0x2003e448
   b9c08:	000b98b9 	.word	0x000b98b9
   b9c0c:	000b4f8f 	.word	0x000b4f8f
   b9c10:	000b4f7b 	.word	0x000b4f7b
   b9c14:	000b4f55 	.word	0x000b4f55
   b9c18:	000b53a5 	.word	0x000b53a5
   b9c1c:	000c0002 	.word	0x000c0002
   b9c20:	000b4fc5 	.word	0x000b4fc5
   b9c24:	000b4f2d 	.word	0x000b4f2d
   b9c28:	000b9aa5 	.word	0x000b9aa5

000b9c2c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   b9c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9c30:	4606      	mov	r6, r0
   b9c32:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b9c34:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b9c36:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b9c38:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b9c3a:	1a47      	subs	r7, r0, r1
   b9c3c:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b9c40:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b9c42:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   b9c46:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b9c48:	d927      	bls.n	b9c9a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   b9c4a:	1b5d      	subs	r5, r3, r5
   b9c4c:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b9c4e:	6832      	ldr	r2, [r6, #0]
   b9c50:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b9c52:	b10c      	cbz	r4, b9c58 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   b9c54:	ea4f 0489 	mov.w	r4, r9, lsl #2
   b9c58:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b9c5a:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   b9c5c:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b9c5e:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   b9c60:	eba3 0201 	sub.w	r2, r3, r1
   b9c64:	d913      	bls.n	b9c8e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   b9c66:	4299      	cmp	r1, r3
   b9c68:	d002      	beq.n	b9c70 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b9c6a:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b9c6c:	f006 fc22 	bl	c04b4 <memmove>
	_M_node = __new_node;
   b9c70:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   b9c72:	6823      	ldr	r3, [r4, #0]
   b9c74:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9c76:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b9c7a:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b9c7c:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   b9c7e:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   b9c80:	59e3      	ldr	r3, [r4, r7]
   b9c82:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9c84:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b9c88:	6233      	str	r3, [r6, #32]
    }
   b9c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   b9c8e:	4299      	cmp	r1, r3
   b9c90:	d0ee      	beq.n	b9c70 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b9c92:	1d38      	adds	r0, r7, #4
   b9c94:	1a80      	subs	r0, r0, r2
   b9c96:	4420      	add	r0, r4
   b9c98:	e7e8      	b.n	b9c6c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b9c9a:	f103 0802 	add.w	r8, r3, #2
   b9c9e:	454b      	cmp	r3, r9
   b9ca0:	bf2c      	ite	cs
   b9ca2:	4498      	addcs	r8, r3
   b9ca4:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   b9ca6:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   b9caa:	d301      	bcc.n	b9cb0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   b9cac:	f005 fee4 	bl	bfa78 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9cb0:	ea4f 0088 	mov.w	r0, r8, lsl #2
   b9cb4:	f7fa f9ef 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b9cb8:	eba8 0505 	sub.w	r5, r8, r5
   b9cbc:	086d      	lsrs	r5, r5, #1
   b9cbe:	4682      	mov	sl, r0
   b9cc0:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b9cc2:	b10c      	cbz	r4, b9cc8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   b9cc4:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   b9cc8:	6a72      	ldr	r2, [r6, #36]	; 0x24
   b9cca:	6971      	ldr	r1, [r6, #20]
   b9ccc:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   b9cce:	442c      	add	r4, r5
	  if (_Num)
   b9cd0:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b9cd2:	4454      	add	r4, sl
   b9cd4:	d003      	beq.n	b9cde <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b9cd6:	1a52      	subs	r2, r2, r1
   b9cd8:	4620      	mov	r0, r4
   b9cda:	f006 fbeb 	bl	c04b4 <memmove>
	::operator delete(__p
   b9cde:	6871      	ldr	r1, [r6, #4]
   b9ce0:	6830      	ldr	r0, [r6, #0]
   b9ce2:	0089      	lsls	r1, r1, #2
   b9ce4:	f7fa f9db 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b9ce8:	e9c6 a800 	strd	sl, r8, [r6]
   b9cec:	e7c0      	b.n	b9c70 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000b9cf0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b9cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9cf2:	b085      	sub	sp, #20
   b9cf4:	4604      	mov	r4, r0
   b9cf6:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   b9cfa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b9cfe:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b9d00:	460f      	mov	r7, r1
   b9d02:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b9d04:	f7ff fbec 	bl	b94e0 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   b9d08:	4605      	mov	r5, r0
   b9d0a:	2800      	cmp	r0, #0
   b9d0c:	d03c      	beq.n	b9d88 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   b9d0e:	4b3f      	ldr	r3, [pc, #252]	; (b9e0c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   b9d10:	493f      	ldr	r1, [pc, #252]	; (b9e10 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   b9d12:	4840      	ldr	r0, [pc, #256]	; (b9e14 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b9d14:	2e00      	cmp	r6, #0
   b9d16:	bf18      	it	ne
   b9d18:	4633      	movne	r3, r6
   b9d1a:	463a      	mov	r2, r7
   b9d1c:	f7fd f8aa 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
   b9d20:	4620      	mov	r0, r4
   b9d22:	f7ff fbd0 	bl	b94c6 <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   b9d26:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   b9d2a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   b9d2e:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b9d30:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   b9d32:	f104 0678 	add.w	r6, r4, #120	; 0x78
   b9d36:	d029      	beq.n	b9d8c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9d38:	b103      	cbz	r3, b9d3c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   b9d3a:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b9d3c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b9d40:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   b9d42:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b9d44:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   b9d48:	4628      	mov	r0, r5
   b9d4a:	f001 fecf 	bl	bbaec <_ZNK14SequentialFile11getQueueLenEv>
   b9d4e:	9003      	str	r0, [sp, #12]
   b9d50:	4630      	mov	r0, r6
   b9d52:	f7ff fcd9 	bl	b9708 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9d56:	9002      	str	r0, [sp, #8]
   b9d58:	f002 fba8 	bl	bc4ac <spark_cloud_flag_connected>
   b9d5c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b9d60:	9000      	str	r0, [sp, #0]
   b9d62:	492d      	ldr	r1, [pc, #180]	; (b9e18 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   b9d64:	482b      	ldr	r0, [pc, #172]	; (b9e14 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b9d66:	f7fd f885 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b9d6a:	4628      	mov	r0, r5
   b9d6c:	f001 febe 	bl	bbaec <_ZNK14SequentialFile11getQueueLenEv>
   b9d70:	2800      	cmp	r0, #0
   b9d72:	d03b      	beq.n	b9dec <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   b9d74:	4620      	mov	r0, r4
   b9d76:	f7ff fd0b 	bl	b9790 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   b9d7a:	4620      	mov	r0, r4
   b9d7c:	f7ff fd68 	bl	b9850 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   b9d80:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b9d82:	f002 f867 	bl	bbe54 <os_mutex_recursive_unlock>
    return true;
   b9d86:	2001      	movs	r0, #1
}
   b9d88:	b005      	add	sp, #20
   b9d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   b9d8c:	4630      	mov	r0, r6
   b9d8e:	f7ff fcbb 	bl	b9708 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9d92:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b9d96:	4298      	cmp	r0, r3
   b9d98:	d102      	bne.n	b9da0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   b9d9a:	4820      	ldr	r0, [pc, #128]	; (b9e1c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   b9d9c:	f005 fe6f 	bl	bfa7e <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b9da0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b9da4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   b9da6:	1a9a      	subs	r2, r3, r2
   b9da8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9daa:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b9dae:	2b01      	cmp	r3, #1
   b9db0:	d804      	bhi.n	b9dbc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   b9db2:	2200      	movs	r2, #0
   b9db4:	2101      	movs	r1, #1
   b9db6:	4630      	mov	r0, r6
   b9db8:	f7ff ff38 	bl	b9c2c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9dbc:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b9dc0:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   b9dc4:	f7fa f967 	bl	b4096 <_Znwj>
   b9dc8:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b9dca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9dce:	b103      	cbz	r3, b9dd2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   b9dd0:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b9dd2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b9dd6:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b9dd8:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   b9ddc:	685b      	ldr	r3, [r3, #4]
   b9dde:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9de2:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b9de6:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   b9dea:	e7aa      	b.n	b9d42 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b9dec:	4630      	mov	r0, r6
   b9dee:	f7ff fc8b 	bl	b9708 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9df2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b9df4:	4298      	cmp	r0, r3
   b9df6:	d8bd      	bhi.n	b9d74 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   b9df8:	f002 fb58 	bl	bc4ac <spark_cloud_flag_connected>
   b9dfc:	2800      	cmp	r0, #0
   b9dfe:	d0b9      	beq.n	b9d74 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   b9e00:	4907      	ldr	r1, [pc, #28]	; (b9e20 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   b9e02:	4804      	ldr	r0, [pc, #16]	; (b9e14 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b9e04:	f7fd f836 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
   b9e08:	e7b7      	b.n	b9d7a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   b9e0a:	bf00      	nop
   b9e0c:	000c2399 	.word	0x000c2399
   b9e10:	000c1cfd 	.word	0x000c1cfd
   b9e14:	2003e448 	.word	0x2003e448
   b9e18:	000c1d55 	.word	0x000c1d55
   b9e1c:	000c1d25 	.word	0x000c1d25
   b9e20:	000c1d81 	.word	0x000c1d81

000b9e24 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   b9e24:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   b9e26:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   b9e2a:	4604      	mov	r4, r0
    if (!publishComplete) {
   b9e2c:	2b00      	cmp	r3, #0
   b9e2e:	d041      	beq.n	b9eb4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   b9e30:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   b9e34:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   b9e38:	2b00      	cmp	r3, #0
   b9e3a:	d03d      	beq.n	b9eb8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   b9e3c:	4950      	ldr	r1, [pc, #320]	; (b9f80 <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   b9e3e:	4851      	ldr	r0, [pc, #324]	; (b9f84 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9e40:	f7fd f818 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   b9e44:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9e48:	b1d3      	cbz	r3, b9e80 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   b9e4a:	1d26      	adds	r6, r4, #4
   b9e4c:	2100      	movs	r1, #0
   b9e4e:	4630      	mov	r0, r6
   b9e50:	f001 fdfc 	bl	bba4c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   b9e54:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9e58:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   b9e5a:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   b9e5c:	d10d      	bne.n	b9e7a <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   b9e5e:	2101      	movs	r1, #1
   b9e60:	4630      	mov	r0, r6
   b9e62:	f001 fdf3 	bl	bba4c <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   b9e66:	2200      	movs	r2, #0
   b9e68:	4629      	mov	r1, r5
   b9e6a:	4630      	mov	r0, r6
   b9e6c:	f001 fc26 	bl	bb6bc <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   b9e70:	4945      	ldr	r1, [pc, #276]	; (b9f88 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   b9e72:	4844      	ldr	r0, [pc, #272]	; (b9f84 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9e74:	462a      	mov	r2, r5
   b9e76:	f7fc fffd 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   b9e7a:	2300      	movs	r3, #0
   b9e7c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   b9e80:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b9e84:	b110      	cbz	r0, b9e8c <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   b9e86:	2143      	movs	r1, #67	; 0x43
   b9e88:	f7fa f909 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   b9e8c:	2300      	movs	r3, #0
   b9e8e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   b9e92:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b9e96:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   b9e9a:	4b3c      	ldr	r3, [pc, #240]	; (b9f8c <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   b9e9c:	9300      	str	r3, [sp, #0]
   b9e9e:	4669      	mov	r1, sp
   b9ea0:	2300      	movs	r3, #0
   b9ea2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b9ea6:	9301      	str	r3, [sp, #4]
   b9ea8:	f7ff fd38 	bl	b991c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b9eac:	f002 f80a 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b9eb0:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   b9eb4:	b002      	add	sp, #8
   b9eb6:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   b9eb8:	4935      	ldr	r1, [pc, #212]	; (b9f90 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   b9eba:	4832      	ldr	r0, [pc, #200]	; (b9f84 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9ebc:	f7fc ffda 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   b9ec0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b9ec4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   b9ec8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9ecc:	b14b      	cbz	r3, b9ee2 <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   b9ece:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b9ed2:	b110      	cbz	r0, b9eda <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   b9ed4:	2143      	movs	r1, #67	; 0x43
   b9ed6:	f7fa f8e2 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   b9eda:	2300      	movs	r3, #0
   b9edc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   b9ee0:	e7db      	b.n	b9e9a <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   b9ee2:	4620      	mov	r0, r4
   b9ee4:	f7ff faef 	bl	b94c6 <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   b9ee8:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   b9eec:	4293      	cmp	r3, r2
   b9eee:	d013      	beq.n	b9f18 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   b9ef0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b9ef4:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   b9ef8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   b9efc:	3b04      	subs	r3, #4
   b9efe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   b9f02:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b9f04:	f001 ffa6 	bl	bbe54 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   b9f08:	4922      	ldr	r1, [pc, #136]	; (b9f94 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   b9f0a:	481e      	ldr	r0, [pc, #120]	; (b9f84 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9f0c:	f7fc ffb2 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   b9f10:	4620      	mov	r0, r4
   b9f12:	f7ff fc3d 	bl	b9790 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   b9f16:	e7c0      	b.n	b9e9a <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   b9f18:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   b9f1c:	4628      	mov	r0, r5
   b9f1e:	f7ff fbf3 	bl	b9708 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9f22:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b9f26:	4298      	cmp	r0, r3
   b9f28:	d102      	bne.n	b9f30 <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   b9f2a:	481b      	ldr	r0, [pc, #108]	; (b9f98 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   b9f2c:	f005 fda7 	bl	bfa7e <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   b9f30:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   b9f34:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b9f36:	429a      	cmp	r2, r3
   b9f38:	d104      	bne.n	b9f44 <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   b9f3a:	2201      	movs	r2, #1
   b9f3c:	4611      	mov	r1, r2
   b9f3e:	4628      	mov	r0, r5
   b9f40:	f7ff fe74 	bl	b9c2c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9f44:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   b9f48:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   b9f4c:	f7fa f8a3 	bl	b4096 <_Znwj>
   b9f50:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   b9f54:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b9f58:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   b9f5a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   b9f5e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   b9f62:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9f66:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b9f6a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   b9f6e:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   b9f72:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9f76:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b9f7a:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   b9f7e:	e7c0      	b.n	b9f02 <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   b9f80:	000c1d94 	.word	0x000c1d94
   b9f84:	2003e448 	.word	0x2003e448
   b9f88:	000c1da7 	.word	0x000c1da7
   b9f8c:	000b9965 	.word	0x000b9965
   b9f90:	000c1db7 	.word	0x000c1db7
   b9f94:	000c1dc9 	.word	0x000c1dc9
   b9f98:	000c1d25 	.word	0x000c1d25

000b9f9c <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   b9f9c:	4b01      	ldr	r3, [pc, #4]	; (b9fa4 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   b9f9e:	4a02      	ldr	r2, [pc, #8]	; (b9fa8 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   b9fa0:	601a      	str	r2, [r3, #0]
}
   b9fa2:	4770      	bx	lr
   b9fa4:	2003e448 	.word	0x2003e448
   b9fa8:	000c1df0 	.word	0x000c1df0

000b9fac <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b9fac:	b510      	push	{r4, lr}
   b9fae:	4b07      	ldr	r3, [pc, #28]	; (b9fcc <_ZN17PublishQueuePosixD1Ev+0x20>)
   b9fb0:	4604      	mov	r4, r0
   b9fb2:	f840 3bc0 	str.w	r3, [r0], #192
   b9fb6:	f7fa fffc 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b9fba:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b9fbe:	f7ff fc95 	bl	b98ec <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   b9fc2:	1d20      	adds	r0, r4, #4
   b9fc4:	f001 fbfe 	bl	bb7c4 <_ZN14SequentialFileD1Ev>
}
   b9fc8:	4620      	mov	r0, r4
   b9fca:	bd10      	pop	{r4, pc}
   b9fcc:	000c1e04 	.word	0x000c1e04

000b9fd0 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b9fd0:	b510      	push	{r4, lr}
   b9fd2:	4604      	mov	r4, r0
}
   b9fd4:	f7ff ffea 	bl	b9fac <_ZN17PublishQueuePosixD1Ev>
   b9fd8:	4620      	mov	r0, r4
   b9fda:	21d0      	movs	r1, #208	; 0xd0
   b9fdc:	f7fa f85f 	bl	b409e <_ZdlPvj>
   b9fe0:	4620      	mov	r0, r4
   b9fe2:	bd10      	pop	{r4, pc}

000b9fe4 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b9fe4:	6001      	str	r1, [r0, #0]
   b9fe6:	7102      	strb	r2, [r0, #4]
{
}
   b9fe8:	4770      	bx	lr

000b9fea <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b9fea:	6800      	ldr	r0, [r0, #0]
   b9fec:	6803      	ldr	r3, [r0, #0]
   b9fee:	68db      	ldr	r3, [r3, #12]
   b9ff0:	4718      	bx	r3

000b9ff2 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b9ff2:	6800      	ldr	r0, [r0, #0]
   b9ff4:	6803      	ldr	r3, [r0, #0]
   b9ff6:	6a1b      	ldr	r3, [r3, #32]
   b9ff8:	4718      	bx	r3

000b9ffa <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b9ffa:	6800      	ldr	r0, [r0, #0]
   b9ffc:	6803      	ldr	r3, [r0, #0]
   b9ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba000:	4718      	bx	r3

000ba002 <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   ba002:	7900      	ldrb	r0, [r0, #4]
   ba004:	4770      	bx	lr

000ba006 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   ba006:	6800      	ldr	r0, [r0, #0]
   ba008:	6803      	ldr	r3, [r0, #0]
   ba00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   ba00c:	4718      	bx	r3

000ba00e <_ZN10RHDatagram6sendtoEPhhh>:
{
   ba00e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba010:	4605      	mov	r5, r0
   ba012:	460c      	mov	r4, r1
    setHeaderTo(address);
   ba014:	4619      	mov	r1, r3
{
   ba016:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   ba018:	f7ff fff5 	bl	ba006 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   ba01c:	6828      	ldr	r0, [r5, #0]
   ba01e:	9a01      	ldr	r2, [sp, #4]
   ba020:	6803      	ldr	r3, [r0, #0]
   ba022:	695b      	ldr	r3, [r3, #20]
   ba024:	4621      	mov	r1, r4
}
   ba026:	b003      	add	sp, #12
   ba028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   ba02c:	4718      	bx	r3

000ba02e <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   ba02e:	6800      	ldr	r0, [r0, #0]
   ba030:	6803      	ldr	r3, [r0, #0]
   ba032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba034:	4718      	bx	r3

000ba036 <_ZN10RHDatagram14setThisAddressEh>:
{
   ba036:	b538      	push	{r3, r4, r5, lr}
   ba038:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   ba03a:	6800      	ldr	r0, [r0, #0]
   ba03c:	6803      	ldr	r3, [r0, #0]
{
   ba03e:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   ba040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba042:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   ba044:	4629      	mov	r1, r5
   ba046:	4620      	mov	r0, r4
   ba048:	f7ff fff1 	bl	ba02e <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   ba04c:	7125      	strb	r5, [r4, #4]
}
   ba04e:	bd38      	pop	{r3, r4, r5, pc}

000ba050 <_ZN10RHDatagram4initEv>:
{
   ba050:	b538      	push	{r3, r4, r5, lr}
   ba052:	4604      	mov	r4, r0
    bool ret = _driver.init();
   ba054:	6800      	ldr	r0, [r0, #0]
   ba056:	6803      	ldr	r3, [r0, #0]
   ba058:	689b      	ldr	r3, [r3, #8]
   ba05a:	4798      	blx	r3
    if (ret)
   ba05c:	4605      	mov	r5, r0
   ba05e:	b118      	cbz	r0, ba068 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   ba060:	7921      	ldrb	r1, [r4, #4]
   ba062:	4620      	mov	r0, r4
   ba064:	f7ff ffe7 	bl	ba036 <_ZN10RHDatagram14setThisAddressEh>
}
   ba068:	4628      	mov	r0, r5
   ba06a:	bd38      	pop	{r3, r4, r5, pc}

000ba06c <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   ba06c:	6800      	ldr	r0, [r0, #0]
   ba06e:	6803      	ldr	r3, [r0, #0]
   ba070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba072:	4718      	bx	r3

000ba074 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   ba074:	6800      	ldr	r0, [r0, #0]
   ba076:	6803      	ldr	r3, [r0, #0]
   ba078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba07a:	4718      	bx	r3

000ba07c <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   ba07c:	6800      	ldr	r0, [r0, #0]
   ba07e:	6803      	ldr	r3, [r0, #0]
   ba080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba082:	4718      	bx	r3

000ba084 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   ba084:	6800      	ldr	r0, [r0, #0]
   ba086:	6803      	ldr	r3, [r0, #0]
   ba088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   ba08a:	4718      	bx	r3

000ba08c <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   ba08c:	6800      	ldr	r0, [r0, #0]
   ba08e:	6803      	ldr	r3, [r0, #0]
   ba090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba092:	4718      	bx	r3

000ba094 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   ba094:	6800      	ldr	r0, [r0, #0]
   ba096:	6803      	ldr	r3, [r0, #0]
   ba098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   ba09a:	4718      	bx	r3

000ba09c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   ba09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba0a0:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   ba0a2:	6800      	ldr	r0, [r0, #0]
{
   ba0a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   ba0a6:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   ba0a8:	6803      	ldr	r3, [r0, #0]
   ba0aa:	691b      	ldr	r3, [r3, #16]
{
   ba0ac:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   ba0b0:	4798      	blx	r3
   ba0b2:	4605      	mov	r5, r0
   ba0b4:	b1c8      	cbz	r0, ba0ea <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   ba0b6:	b11e      	cbz	r6, ba0c0 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   ba0b8:	4620      	mov	r0, r4
   ba0ba:	f7ff ffe3 	bl	ba084 <_ZN10RHDatagram10headerFromEv>
   ba0be:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   ba0c0:	f1b9 0f00 	cmp.w	r9, #0
   ba0c4:	d004      	beq.n	ba0d0 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   ba0c6:	4620      	mov	r0, r4
   ba0c8:	f7ff ffd8 	bl	ba07c <_ZN10RHDatagram8headerToEv>
   ba0cc:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   ba0d0:	f1b8 0f00 	cmp.w	r8, #0
   ba0d4:	d004      	beq.n	ba0e0 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   ba0d6:	4620      	mov	r0, r4
   ba0d8:	f7ff ffd8 	bl	ba08c <_ZN10RHDatagram8headerIdEv>
   ba0dc:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   ba0e0:	b11f      	cbz	r7, ba0ea <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   ba0e2:	4620      	mov	r0, r4
   ba0e4:	f7ff ffd6 	bl	ba094 <_ZN10RHDatagram11headerFlagsEv>
   ba0e8:	7038      	strb	r0, [r7, #0]
}
   ba0ea:	4628      	mov	r0, r5
   ba0ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000ba0f0 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   ba0f0:	2001      	movs	r0, #1
   ba0f2:	4770      	bx	lr

000ba0f4 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   ba0f4:	7903      	ldrb	r3, [r0, #4]
   ba0f6:	2b03      	cmp	r3, #3
   ba0f8:	d0fc      	beq.n	ba0f4 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   ba0fa:	2001      	movs	r0, #1
   ba0fc:	4770      	bx	lr

000ba0fe <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   ba0fe:	2000      	movs	r0, #0
   ba100:	4770      	bx	lr

000ba102 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   ba102:	7181      	strb	r1, [r0, #6]
}
   ba104:	4770      	bx	lr

000ba106 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   ba106:	7141      	strb	r1, [r0, #5]
}
   ba108:	4770      	bx	lr

000ba10a <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   ba10a:	72c1      	strb	r1, [r0, #11]
}
   ba10c:	4770      	bx	lr

000ba10e <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   ba10e:	7301      	strb	r1, [r0, #12]
}
   ba110:	4770      	bx	lr

000ba112 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   ba112:	7341      	strb	r1, [r0, #13]
}
   ba114:	4770      	bx	lr

000ba116 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   ba116:	7b83      	ldrb	r3, [r0, #14]
   ba118:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   ba11c:	4311      	orrs	r1, r2
   ba11e:	7381      	strb	r1, [r0, #14]
}
   ba120:	4770      	bx	lr

000ba122 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   ba122:	79c0      	ldrb	r0, [r0, #7]
}
   ba124:	4770      	bx	lr

000ba126 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   ba126:	7a00      	ldrb	r0, [r0, #8]
}
   ba128:	4770      	bx	lr

000ba12a <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   ba12a:	7a40      	ldrb	r0, [r0, #9]
}
   ba12c:	4770      	bx	lr

000ba12e <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   ba12e:	7a80      	ldrb	r0, [r0, #10]
}
   ba130:	4770      	bx	lr

000ba132 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   ba132:	8a00      	ldrh	r0, [r0, #16]
}
   ba134:	b200      	sxth	r0, r0
   ba136:	4770      	bx	lr

000ba138 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   ba138:	7900      	ldrb	r0, [r0, #4]
}
   ba13a:	4770      	bx	lr

000ba13c <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   ba13c:	7101      	strb	r1, [r0, #4]
}
   ba13e:	4770      	bx	lr

000ba140 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   ba140:	8a40      	ldrh	r0, [r0, #18]
}
   ba142:	b280      	uxth	r0, r0
   ba144:	4770      	bx	lr

000ba146 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   ba146:	8a80      	ldrh	r0, [r0, #20]
}
   ba148:	b280      	uxth	r0, r0
   ba14a:	4770      	bx	lr

000ba14c <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   ba14c:	8ac0      	ldrh	r0, [r0, #22]
}
   ba14e:	b280      	uxth	r0, r0
   ba150:	4770      	bx	lr

000ba152 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   ba152:	b538      	push	{r3, r4, r5, lr}
   ba154:	4605      	mov	r5, r0
   ba156:	460c      	mov	r4, r1
    while (!available())
   ba158:	682b      	ldr	r3, [r5, #0]
   ba15a:	4628      	mov	r0, r5
   ba15c:	68db      	ldr	r3, [r3, #12]
   ba15e:	4798      	blx	r3
   ba160:	b928      	cbnz	r0, ba16e <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   ba162:	2c00      	cmp	r4, #0
   ba164:	d0f8      	beq.n	ba158 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   ba166:	4620      	mov	r0, r4
   ba168:	f002 fac8 	bl	bc6fc <delay>
   ba16c:	e7f4      	b.n	ba158 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   ba16e:	bd38      	pop	{r3, r4, r5, pc}

000ba170 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   ba170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba172:	4605      	mov	r5, r0
   ba174:	460f      	mov	r7, r1
   ba176:	4614      	mov	r4, r2
   ba178:	f001 fea4 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
   ba17c:	4606      	mov	r6, r0
   ba17e:	f001 fea1 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   ba182:	1b80      	subs	r0, r0, r6
   ba184:	42b8      	cmp	r0, r7
   ba186:	d20a      	bcs.n	ba19e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   ba188:	682b      	ldr	r3, [r5, #0]
   ba18a:	4628      	mov	r0, r5
   ba18c:	68db      	ldr	r3, [r3, #12]
   ba18e:	4798      	blx	r3
   ba190:	b930      	cbnz	r0, ba1a0 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   ba192:	2c00      	cmp	r4, #0
   ba194:	d0f3      	beq.n	ba17e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   ba196:	4620      	mov	r0, r4
   ba198:	f002 fab0 	bl	bc6fc <delay>
   ba19c:	e7ef      	b.n	ba17e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   ba19e:	2000      	movs	r0, #0
}
   ba1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba1a2 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   ba1a2:	b570      	push	{r4, r5, r6, lr}
   ba1a4:	4604      	mov	r4, r0
   ba1a6:	460e      	mov	r6, r1
   ba1a8:	f001 fe8c 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
   ba1ac:	4605      	mov	r5, r0
   ba1ae:	f001 fe89 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   ba1b2:	1b40      	subs	r0, r0, r5
   ba1b4:	42b0      	cmp	r0, r6
   ba1b6:	d204      	bcs.n	ba1c2 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   ba1b8:	7923      	ldrb	r3, [r4, #4]
   ba1ba:	2b03      	cmp	r3, #3
   ba1bc:	d0f7      	beq.n	ba1ae <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   ba1be:	2001      	movs	r0, #1
}
   ba1c0:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   ba1c2:	2000      	movs	r0, #0
   ba1c4:	e7fc      	b.n	ba1c0 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000ba1c6 <_ZN15RHGenericDriver7waitCADEv>:
{
   ba1c6:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   ba1c8:	69c3      	ldr	r3, [r0, #28]
{
   ba1ca:	4604      	mov	r4, r0
    if (!_cad_timeout)
   ba1cc:	b1b3      	cbz	r3, ba1fc <_ZN15RHGenericDriver7waitCADEv+0x36>
   ba1ce:	f001 fe79 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   ba1d2:	2664      	movs	r6, #100	; 0x64
   ba1d4:	4605      	mov	r5, r0
    while (isChannelActive())
   ba1d6:	6823      	ldr	r3, [r4, #0]
   ba1d8:	4620      	mov	r0, r4
   ba1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba1dc:	4798      	blx	r3
   ba1de:	b168      	cbz	r0, ba1fc <_ZN15RHGenericDriver7waitCADEv+0x36>
   ba1e0:	f001 fe70 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   ba1e4:	69e3      	ldr	r3, [r4, #28]
   ba1e6:	1b40      	subs	r0, r0, r5
   ba1e8:	4298      	cmp	r0, r3
   ba1ea:	d809      	bhi.n	ba200 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   ba1ec:	210a      	movs	r1, #10
   ba1ee:	2001      	movs	r0, #1
   ba1f0:	f004 fca3 	bl	beb3a <_Z6randomii>
   ba1f4:	4370      	muls	r0, r6
   ba1f6:	f002 fa81 	bl	bc6fc <delay>
    while (isChannelActive())
   ba1fa:	e7ec      	b.n	ba1d6 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   ba1fc:	2001      	movs	r0, #1
}
   ba1fe:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   ba200:	2000      	movs	r0, #0
   ba202:	e7fc      	b.n	ba1fe <_ZN15RHGenericDriver7waitCADEv+0x38>

000ba204 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   ba204:	4a06      	ldr	r2, [pc, #24]	; (ba220 <_ZN15RHGenericDriverC1Ev+0x1c>)
   ba206:	6002      	str	r2, [r0, #0]
   ba208:	21ff      	movs	r1, #255	; 0xff
   ba20a:	2200      	movs	r2, #0
   ba20c:	7102      	strb	r2, [r0, #4]
   ba20e:	7141      	strb	r1, [r0, #5]
   ba210:	8242      	strh	r2, [r0, #18]
   ba212:	72c1      	strb	r1, [r0, #11]
   ba214:	8282      	strh	r2, [r0, #20]
   ba216:	8181      	strh	r1, [r0, #12]
   ba218:	7382      	strb	r2, [r0, #14]
   ba21a:	82c2      	strh	r2, [r0, #22]
   ba21c:	61c2      	str	r2, [r0, #28]
}
   ba21e:	4770      	bx	lr
   ba220:	000c1e18 	.word	0x000c1e18

000ba224 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   ba224:	4770      	bx	lr

000ba226 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   ba226:	4770      	bx	lr

000ba228 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   ba228:	4770      	bx	lr

000ba22a <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   ba22a:	4770      	bx	lr

000ba22c <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   ba22c:	4770      	bx	lr

000ba22e <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   ba22e:	7141      	strb	r1, [r0, #5]
}
   ba230:	4770      	bx	lr

000ba232 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   ba232:	7181      	strb	r1, [r0, #6]
}
   ba234:	4770      	bx	lr

000ba236 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   ba236:	7101      	strb	r1, [r0, #4]
}
   ba238:	4770      	bx	lr
	...

000ba23c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   ba23c:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   ba23e:	4d03      	ldr	r5, [pc, #12]	; (ba24c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   ba240:	6005      	str	r5, [r0, #0]
   ba242:	7101      	strb	r1, [r0, #4]
   ba244:	7142      	strb	r2, [r0, #5]
   ba246:	7183      	strb	r3, [r0, #6]
}
   ba248:	bd30      	pop	{r4, r5, pc}
   ba24a:	bf00      	nop
   ba24c:	000c1e98 	.word	0x000c1e98

000ba250 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   ba250:	4770      	bx	lr

000ba252 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   ba252:	b510      	push	{r4, lr}
  }
   ba254:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   ba256:	4604      	mov	r4, r0
  }
   ba258:	f7f9 ff21 	bl	b409e <_ZdlPvj>
   ba25c:	4620      	mov	r0, r4
   ba25e:	bd10      	pop	{r4, pc}

000ba260 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   ba260:	b40e      	push	{r1, r2, r3}
   ba262:	b503      	push	{r0, r1, lr}
   ba264:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   ba266:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   ba268:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   ba26c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   ba26e:	f004 fc28 	bl	beac2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   ba272:	b002      	add	sp, #8
   ba274:	f85d eb04 	ldr.w	lr, [sp], #4
   ba278:	b003      	add	sp, #12
   ba27a:	4770      	bx	lr

000ba27c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   ba27c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba27e:	4604      	mov	r4, r0
   ba280:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   ba282:	7922      	ldrb	r2, [r4, #4]
   ba284:	68a3      	ldr	r3, [r4, #8]
   ba286:	b132      	cbz	r2, ba296 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   ba288:	b9a3      	cbnz	r3, ba2b4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   ba28a:	490b      	ldr	r1, [pc, #44]	; (ba2b8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   ba28c:	b002      	add	sp, #8
   ba28e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   ba292:	f004 bb0d 	b.w	be8b0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   ba296:	4a09      	ldr	r2, [pc, #36]	; (ba2bc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   ba298:	7b26      	ldrb	r6, [r4, #12]
   ba29a:	4d09      	ldr	r5, [pc, #36]	; (ba2c0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   ba29c:	4909      	ldr	r1, [pc, #36]	; (ba2c4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   ba29e:	7b64      	ldrb	r4, [r4, #13]
   ba2a0:	2e01      	cmp	r6, #1
   ba2a2:	bf18      	it	ne
   ba2a4:	4629      	movne	r1, r5
   ba2a6:	e9cd 1400 	strd	r1, r4, [sp]
   ba2aa:	4907      	ldr	r1, [pc, #28]	; (ba2c8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   ba2ac:	f7ff ffd8 	bl	ba260 <_ZN5Print6printfEPKcz>
  }
   ba2b0:	b002      	add	sp, #8
   ba2b2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   ba2b4:	4a05      	ldr	r2, [pc, #20]	; (ba2cc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   ba2b6:	e7ef      	b.n	ba298 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   ba2b8:	000c1ed5 	.word	0x000c1ed5
   ba2bc:	000c2399 	.word	0x000c2399
   ba2c0:	000c1ed1 	.word	0x000c1ed1
   ba2c4:	000c1ecd 	.word	0x000c1ecd
   ba2c8:	000c1eeb 	.word	0x000c1eeb
   ba2cc:	000c1ec4 	.word	0x000c1ec4

000ba2d0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   ba2d0:	b510      	push	{r4, lr}
   ba2d2:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   ba2d4:	f7ff ffb2 	bl	ba23c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   ba2d8:	4b05      	ldr	r3, [pc, #20]	; (ba2f0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   ba2da:	6023      	str	r3, [r4, #0]
  {
   ba2dc:	4b05      	ldr	r3, [pc, #20]	; (ba2f4 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   ba2de:	60a3      	str	r3, [r4, #8]
   ba2e0:	2301      	movs	r3, #1
   ba2e2:	7323      	strb	r3, [r4, #12]
   ba2e4:	2300      	movs	r3, #0
   ba2e6:	6123      	str	r3, [r4, #16]
   ba2e8:	82a3      	strh	r3, [r4, #20]
{
}
   ba2ea:	4620      	mov	r0, r4
   ba2ec:	bd10      	pop	{r4, pc}
   ba2ee:	bf00      	nop
   ba2f0:	000c1f24 	.word	0x000c1f24
   ba2f4:	000c1f10 	.word	0x000c1f10

000ba2f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   ba2f8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   ba2fa:	4c0b      	ldr	r4, [pc, #44]	; (ba328 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   ba2fc:	7821      	ldrb	r1, [r4, #0]
   ba2fe:	f3bf 8f5b 	dmb	ish
   ba302:	f011 0101 	ands.w	r1, r1, #1
   ba306:	d10b      	bne.n	ba320 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   ba308:	4620      	mov	r0, r4
   ba30a:	9101      	str	r1, [sp, #4]
   ba30c:	f7f9 fed6 	bl	b40bc <__cxa_guard_acquire>
   ba310:	9901      	ldr	r1, [sp, #4]
   ba312:	b128      	cbz	r0, ba320 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   ba314:	4805      	ldr	r0, [pc, #20]	; (ba32c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   ba316:	f004 fc27 	bl	beb68 <_ZN8SPIClassC1E19hal_spi_interface_t>
   ba31a:	4620      	mov	r0, r4
   ba31c:	f7f9 fed3 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   ba320:	4802      	ldr	r0, [pc, #8]	; (ba32c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   ba322:	b002      	add	sp, #8
   ba324:	bd10      	pop	{r4, pc}
   ba326:	bf00      	nop
   ba328:	2003e450 	.word	0x2003e450
   ba32c:	2003e454 	.word	0x2003e454

000ba330 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   ba330:	b507      	push	{r0, r1, r2, lr}
   ba332:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   ba334:	f7ff ffe0 	bl	ba2f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   ba338:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   ba33a:	b003      	add	sp, #12
   ba33c:	f85d eb04 	ldr.w	lr, [sp], #4
   ba340:	f004 bcca 	b.w	becd8 <_ZN8SPIClass8transferEh>

000ba344 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   ba344:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   ba346:	f7ff ffd7 	bl	ba2f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   ba34a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba34e:	f004 bcc9 	b.w	bece4 <_ZN8SPIClass15attachInterruptEv>

000ba352 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   ba352:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   ba354:	f7ff ffd0 	bl	ba2f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   ba358:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba35c:	f004 bcc3 	b.w	bece6 <_ZN8SPIClass15detachInterruptEv>

000ba360 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   ba360:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   ba362:	7903      	ldrb	r3, [r0, #4]
   ba364:	2b04      	cmp	r3, #4
   ba366:	d020      	beq.n	ba3aa <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   ba368:	2b03      	cmp	r3, #3
   ba36a:	d020      	beq.n	ba3ae <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   ba36c:	2b02      	cmp	r3, #2
   ba36e:	d020      	beq.n	ba3b2 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   ba370:	4a11      	ldr	r2, [pc, #68]	; (ba3b8 <_ZN13RHHardwareSPI5beginEv+0x58>)
   ba372:	4912      	ldr	r1, [pc, #72]	; (ba3bc <_ZN13RHHardwareSPI5beginEv+0x5c>)
   ba374:	2b01      	cmp	r3, #1
   ba376:	bf18      	it	ne
   ba378:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   ba37a:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   ba37c:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   ba37e:	3901      	subs	r1, #1
   ba380:	bf18      	it	ne
   ba382:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   ba384:	b133      	cbz	r3, ba394 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   ba386:	2b01      	cmp	r3, #1
   ba388:	d004      	beq.n	ba394 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   ba38a:	2b02      	cmp	r3, #2
   ba38c:	d002      	beq.n	ba394 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   ba38e:	2b03      	cmp	r3, #3
   ba390:	bf18      	it	ne
   ba392:	2300      	movne	r3, #0
class SPISettings : public Printable {
   ba394:	2400      	movs	r4, #0
   ba396:	7304      	strb	r4, [r0, #12]
   ba398:	6102      	str	r2, [r0, #16]
   ba39a:	7501      	strb	r1, [r0, #20]
   ba39c:	7543      	strb	r3, [r0, #21]
        instance().begin();
   ba39e:	f7ff ffab 	bl	ba2f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   ba3a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba3a6:	f004 bbe9 	b.w	beb7c <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   ba3aa:	4a05      	ldr	r2, [pc, #20]	; (ba3c0 <_ZN13RHHardwareSPI5beginEv+0x60>)
   ba3ac:	e7e5      	b.n	ba37a <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   ba3ae:	4a05      	ldr	r2, [pc, #20]	; (ba3c4 <_ZN13RHHardwareSPI5beginEv+0x64>)
   ba3b0:	e7e3      	b.n	ba37a <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   ba3b2:	4a05      	ldr	r2, [pc, #20]	; (ba3c8 <_ZN13RHHardwareSPI5beginEv+0x68>)
   ba3b4:	e7e1      	b.n	ba37a <_ZN13RHHardwareSPI5beginEv+0x1a>
   ba3b6:	bf00      	nop
   ba3b8:	001e8480 	.word	0x001e8480
   ba3bc:	000f4240 	.word	0x000f4240
   ba3c0:	00f42400 	.word	0x00f42400
   ba3c4:	007a1200 	.word	0x007a1200
   ba3c8:	003d0900 	.word	0x003d0900

000ba3cc <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   ba3cc:	b508      	push	{r3, lr}
        instance().end();
   ba3ce:	f7ff ff93 	bl	ba2f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   ba3d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba3d6:	f004 bbe5 	b.w	beba4 <_ZN8SPIClass3endEv>

000ba3da <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   ba3da:	b510      	push	{r4, lr}
   ba3dc:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   ba3de:	f7ff ff8b 	bl	ba2f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   ba3e2:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   ba3e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba3ea:	f004 bc07 	b.w	bebfc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000ba3ee <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   ba3ee:	b508      	push	{r3, lr}
        instance().endTransaction();
   ba3f0:	f7ff ff82 	bl	ba2f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   ba3f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba3f8:	f004 bbe6 	b.w	bebc8 <_ZN8SPIClass14endTransactionEv>

000ba3fc <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   ba3fc:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   ba3fe:	f7ff ff7b 	bl	ba2f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   ba402:	bd08      	pop	{r3, pc}

000ba404 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   ba404:	2300      	movs	r3, #0
   ba406:	4802      	ldr	r0, [pc, #8]	; (ba410 <_GLOBAL__sub_I_hardware_spi+0xc>)
   ba408:	461a      	mov	r2, r3
   ba40a:	4619      	mov	r1, r3
   ba40c:	f7ff bf60 	b.w	ba2d0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   ba410:	2003e45c 	.word	0x2003e45c

000ba414 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   ba414:	2a01      	cmp	r2, #1
   ba416:	d105      	bne.n	ba424 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   ba418:	7a00      	ldrb	r0, [r0, #8]
   ba41a:	780b      	ldrb	r3, [r1, #0]
   ba41c:	1a1b      	subs	r3, r3, r0
   ba41e:	4258      	negs	r0, r3
   ba420:	4158      	adcs	r0, r3
   ba422:	4770      	bx	lr
   ba424:	2000      	movs	r0, #0
}
   ba426:	4770      	bx	lr

000ba428 <_ZN6RHMesh5doArpEh>:
{
   ba428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   ba42c:	4c25      	ldr	r4, [pc, #148]	; (ba4c4 <_ZN6RHMesh5doArpEh+0x9c>)
   ba42e:	2301      	movs	r3, #1
{
   ba430:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   ba432:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   ba434:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   ba436:	2300      	movs	r3, #0
{
   ba438:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   ba43a:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   ba43c:	9300      	str	r3, [sp, #0]
   ba43e:	2203      	movs	r2, #3
   ba440:	23ff      	movs	r3, #255	; 0xff
   ba442:	4621      	mov	r1, r4
{
   ba444:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   ba446:	f000 fbb7 	bl	babb8 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   ba44a:	b120      	cbz	r0, ba456 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   ba44c:	2500      	movs	r5, #0
}
   ba44e:	4628      	mov	r0, r5
   ba450:	b006      	add	sp, #24
   ba452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   ba456:	237a      	movs	r3, #122	; 0x7a
   ba458:	f88d 3017 	strb.w	r3, [sp, #23]
   ba45c:	f001 fd32 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   ba460:	f106 0904 	add.w	r9, r6, #4
   ba464:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   ba466:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   ba46a:	f001 fd2b 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
   ba46e:	1a29      	subs	r1, r5, r0
   ba470:	2900      	cmp	r1, #0
   ba472:	ddeb      	ble.n	ba44c <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   ba474:	2200      	movs	r2, #0
   ba476:	b289      	uxth	r1, r1
   ba478:	4648      	mov	r0, r9
   ba47a:	f7ff fdbe 	bl	b9ffa <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   ba47e:	2800      	cmp	r0, #0
   ba480:	d0f3      	beq.n	ba46a <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   ba482:	2300      	movs	r3, #0
   ba484:	e9cd 3302 	strd	r3, r3, [sp, #8]
   ba488:	e9cd 3300 	strd	r3, r3, [sp]
   ba48c:	f10d 0217 	add.w	r2, sp, #23
   ba490:	4621      	mov	r1, r4
   ba492:	4630      	mov	r0, r6
   ba494:	f000 fb9a 	bl	babcc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   ba498:	4605      	mov	r5, r0
   ba49a:	2800      	cmp	r0, #0
   ba49c:	d0e3      	beq.n	ba466 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   ba49e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   ba4a2:	2b01      	cmp	r3, #1
   ba4a4:	d9df      	bls.n	ba466 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   ba4a6:	f894 a000 	ldrb.w	sl, [r4]
   ba4aa:	f1ba 0f02 	cmp.w	sl, #2
   ba4ae:	d1da      	bne.n	ba466 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   ba4b0:	4648      	mov	r0, r9
   ba4b2:	f7ff fde7 	bl	ba084 <_ZN10RHDatagram10headerFromEv>
   ba4b6:	4653      	mov	r3, sl
   ba4b8:	4602      	mov	r2, r0
   ba4ba:	4639      	mov	r1, r7
   ba4bc:	4630      	mov	r0, r6
   ba4be:	f000 faf3 	bl	baaa8 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   ba4c2:	e7c4      	b.n	ba44e <_ZN6RHMesh5doArpEh+0x26>
   ba4c4:	2003e474 	.word	0x2003e474

000ba4c8 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   ba4c8:	2a01      	cmp	r2, #1
{
   ba4ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   ba4ce:	4607      	mov	r7, r0
   ba4d0:	460e      	mov	r6, r1
   ba4d2:	4614      	mov	r4, r2
    if (   messageLen > 1 
   ba4d4:	d93b      	bls.n	ba54e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   ba4d6:	794d      	ldrb	r5, [r1, #5]
   ba4d8:	2d02      	cmp	r5, #2
   ba4da:	d130      	bne.n	ba53e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   ba4dc:	f100 0804 	add.w	r8, r0, #4
   ba4e0:	79c9      	ldrb	r1, [r1, #7]
   ba4e2:	9101      	str	r1, [sp, #4]
   ba4e4:	4640      	mov	r0, r8
   ba4e6:	f7ff fdcd 	bl	ba084 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   ba4ea:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   ba4ec:	462b      	mov	r3, r5
   ba4ee:	4602      	mov	r2, r0
   ba4f0:	9901      	ldr	r1, [sp, #4]
   ba4f2:	4638      	mov	r0, r7
   ba4f4:	f000 fad8 	bl	baaa8 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   ba4f8:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   ba4fa:	f106 0308 	add.w	r3, r6, #8
   ba4fe:	2400      	movs	r4, #0
   ba500:	4622      	mov	r2, r4
   ba502:	4295      	cmp	r5, r2
   ba504:	f104 0401 	add.w	r4, r4, #1
   ba508:	b2e4      	uxtb	r4, r4
   ba50a:	d904      	bls.n	ba516 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   ba50c:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba510:	7a39      	ldrb	r1, [r7, #8]
   ba512:	4291      	cmp	r1, r2
   ba514:	d1f4      	bne.n	ba500 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   ba516:	f104 0108 	add.w	r1, r4, #8
   ba51a:	440e      	add	r6, r1
	while (i < numRoutes)
   ba51c:	42a5      	cmp	r5, r4
   ba51e:	d916      	bls.n	ba54e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   ba520:	f816 1b01 	ldrb.w	r1, [r6], #1
   ba524:	9101      	str	r1, [sp, #4]
   ba526:	4640      	mov	r0, r8
   ba528:	f7ff fdac 	bl	ba084 <_ZN10RHDatagram10headerFromEv>
   ba52c:	3401      	adds	r4, #1
   ba52e:	4602      	mov	r2, r0
   ba530:	9901      	ldr	r1, [sp, #4]
   ba532:	2302      	movs	r3, #2
   ba534:	4638      	mov	r0, r7
   ba536:	b2e4      	uxtb	r4, r4
   ba538:	f000 fab6 	bl	baaa8 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   ba53c:	e7ee      	b.n	ba51c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   ba53e:	2d03      	cmp	r5, #3
   ba540:	d105      	bne.n	ba54e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   ba542:	7989      	ldrb	r1, [r1, #6]
}
   ba544:	b002      	add	sp, #8
   ba546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   ba54a:	f000 ba96 	b.w	baa7a <_ZN8RHRouter13deleteRouteToEh>
}
   ba54e:	b002      	add	sp, #8
   ba550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba554 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   ba554:	b510      	push	{r4, lr}
   ba556:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   ba558:	f000 fae6 	bl	bab28 <_ZN8RHRouterC1ER15RHGenericDriverh>
   ba55c:	4b01      	ldr	r3, [pc, #4]	; (ba564 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   ba55e:	6023      	str	r3, [r4, #0]
}
   ba560:	4620      	mov	r0, r4
   ba562:	bd10      	pop	{r4, pc}
   ba564:	000c1f58 	.word	0x000c1f58

000ba568 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   ba568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   ba56c:	2a79      	cmp	r2, #121	; 0x79
{
   ba56e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   ba572:	4606      	mov	r6, r0
   ba574:	460f      	mov	r7, r1
   ba576:	4614      	mov	r4, r2
   ba578:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   ba57a:	d825      	bhi.n	ba5c8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   ba57c:	2bff      	cmp	r3, #255	; 0xff
   ba57e:	d114      	bne.n	ba5aa <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   ba580:	f8df 8048 	ldr.w	r8, [pc, #72]	; ba5cc <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   ba584:	4640      	mov	r0, r8
   ba586:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   ba588:	4622      	mov	r2, r4
   ba58a:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   ba58c:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   ba590:	f005 ff82 	bl	c0498 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   ba594:	1c62      	adds	r2, r4, #1
   ba596:	f8cd 9020 	str.w	r9, [sp, #32]
   ba59a:	462b      	mov	r3, r5
   ba59c:	4641      	mov	r1, r8
   ba59e:	4630      	mov	r0, r6
   ba5a0:	b2d2      	uxtb	r2, r2
}
   ba5a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   ba5a6:	f000 bb07 	b.w	babb8 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   ba5aa:	4619      	mov	r1, r3
   ba5ac:	f000 fa21 	bl	ba9f2 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   ba5b0:	2800      	cmp	r0, #0
   ba5b2:	d1e5      	bne.n	ba580 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   ba5b4:	6833      	ldr	r3, [r6, #0]
   ba5b6:	4629      	mov	r1, r5
   ba5b8:	689b      	ldr	r3, [r3, #8]
   ba5ba:	4630      	mov	r0, r6
   ba5bc:	4798      	blx	r3
   ba5be:	2800      	cmp	r0, #0
   ba5c0:	d1de      	bne.n	ba580 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   ba5c2:	2002      	movs	r0, #2
}
   ba5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   ba5c8:	2001      	movs	r0, #1
   ba5ca:	e7fb      	b.n	ba5c4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   ba5cc:	2003e474 	.word	0x2003e474

000ba5d0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   ba5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba5d4:	b089      	sub	sp, #36	; 0x24
   ba5d6:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   ba5d8:	237a      	movs	r3, #122	; 0x7a
   ba5da:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   ba5de:	f10d 031f 	add.w	r3, sp, #31
   ba5e2:	9303      	str	r3, [sp, #12]
   ba5e4:	f10d 031e 	add.w	r3, sp, #30
   ba5e8:	9302      	str	r3, [sp, #8]
   ba5ea:	4e5d      	ldr	r6, [pc, #372]	; (ba760 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   ba5ec:	f10d 031d 	add.w	r3, sp, #29
   ba5f0:	9301      	str	r3, [sp, #4]
   ba5f2:	ab07      	add	r3, sp, #28
   ba5f4:	9300      	str	r3, [sp, #0]
{     
   ba5f6:	4689      	mov	r9, r1
   ba5f8:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   ba5fa:	f10d 031b 	add.w	r3, sp, #27
   ba5fe:	f10d 021a 	add.w	r2, sp, #26
   ba602:	4631      	mov	r1, r6
{     
   ba604:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   ba608:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   ba60a:	f000 fadf 	bl	babcc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   ba60e:	4604      	mov	r4, r0
   ba610:	b920      	cbnz	r0, ba61c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   ba612:	2400      	movs	r4, #0
}
   ba614:	4620      	mov	r0, r4
   ba616:	b009      	add	sp, #36	; 0x24
   ba618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   ba61c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   ba620:	b373      	cbz	r3, ba680 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   ba622:	7832      	ldrb	r2, [r6, #0]
   ba624:	bb62      	cbnz	r2, ba680 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   ba626:	f1b8 0f00 	cmp.w	r8, #0
   ba62a:	d003      	beq.n	ba634 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   ba62c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   ba630:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   ba634:	f1bb 0f00 	cmp.w	fp, #0
   ba638:	d003      	beq.n	ba642 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   ba63a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   ba63e:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   ba642:	f1ba 0f00 	cmp.w	sl, #0
   ba646:	d003      	beq.n	ba650 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   ba648:	f89d 201d 	ldrb.w	r2, [sp, #29]
   ba64c:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   ba650:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba652:	b11a      	cbz	r2, ba65c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   ba654:	9914      	ldr	r1, [sp, #80]	; 0x50
   ba656:	f89d 201e 	ldrb.w	r2, [sp, #30]
   ba65a:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   ba65c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   ba65e:	b11a      	cbz	r2, ba668 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   ba660:	9915      	ldr	r1, [sp, #84]	; 0x54
   ba662:	f89d 201f 	ldrb.w	r2, [sp, #31]
   ba666:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   ba668:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   ba66a:	493e      	ldr	r1, [pc, #248]	; (ba764 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   ba66c:	3b01      	subs	r3, #1
   ba66e:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   ba670:	429a      	cmp	r2, r3
		*len = msgLen;
   ba672:	bf88      	it	hi
   ba674:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   ba676:	783a      	ldrb	r2, [r7, #0]
   ba678:	4648      	mov	r0, r9
   ba67a:	f005 ff0d 	bl	c0498 <memcpy>
	    return true;
   ba67e:	e7c9      	b.n	ba614 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   ba680:	f89d 201c 	ldrb.w	r2, [sp, #28]
   ba684:	2aff      	cmp	r2, #255	; 0xff
   ba686:	d1c4      	bne.n	ba612 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   ba688:	2b01      	cmp	r3, #1
   ba68a:	d9c2      	bls.n	ba612 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   ba68c:	7832      	ldrb	r2, [r6, #0]
   ba68e:	2a01      	cmp	r2, #1
   ba690:	d1bf      	bne.n	ba612 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   ba692:	7a2a      	ldrb	r2, [r5, #8]
   ba694:	f89d 401b 	ldrb.w	r4, [sp, #27]
   ba698:	42a2      	cmp	r2, r4
   ba69a:	d0ba      	beq.n	ba612 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   ba69c:	1edf      	subs	r7, r3, #3
   ba69e:	4932      	ldr	r1, [pc, #200]	; (ba768 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   ba6a0:	b2ff      	uxtb	r7, r7
   ba6a2:	2300      	movs	r3, #0
   ba6a4:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   ba6a8:	4547      	cmp	r7, r8
   ba6aa:	d906      	bls.n	ba6ba <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   ba6ac:	f811 0b01 	ldrb.w	r0, [r1], #1
   ba6b0:	4282      	cmp	r2, r0
   ba6b2:	f103 0301 	add.w	r3, r3, #1
   ba6b6:	d1f5      	bne.n	ba6a4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   ba6b8:	e7ab      	b.n	ba612 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   ba6ba:	f105 0904 	add.w	r9, r5, #4
   ba6be:	4648      	mov	r0, r9
   ba6c0:	f7ff fce0 	bl	ba084 <_ZN10RHDatagram10headerFromEv>
   ba6c4:	2302      	movs	r3, #2
   ba6c6:	4602      	mov	r2, r0
   ba6c8:	4621      	mov	r1, r4
   ba6ca:	4628      	mov	r0, r5
   ba6cc:	f000 f9ec 	bl	baaa8 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   ba6d0:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   ba6d4:	b193      	cbz	r3, ba6fc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   ba6d6:	4c22      	ldr	r4, [pc, #136]	; (ba760 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   ba6d8:	1ba3      	subs	r3, r4, r6
   ba6da:	b2db      	uxtb	r3, r3
   ba6dc:	429f      	cmp	r7, r3
   ba6de:	d90c      	bls.n	ba6fa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   ba6e0:	78e1      	ldrb	r1, [r4, #3]
   ba6e2:	9105      	str	r1, [sp, #20]
   ba6e4:	4648      	mov	r0, r9
   ba6e6:	f7ff fccd 	bl	ba084 <_ZN10RHDatagram10headerFromEv>
   ba6ea:	9905      	ldr	r1, [sp, #20]
   ba6ec:	4602      	mov	r2, r0
   ba6ee:	2302      	movs	r3, #2
   ba6f0:	4628      	mov	r0, r5
   ba6f2:	f000 f9d9 	bl	baaa8 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   ba6f6:	3401      	adds	r4, #1
   ba6f8:	e7ee      	b.n	ba6d8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   ba6fa:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   ba6fc:	682b      	ldr	r3, [r5, #0]
   ba6fe:	7872      	ldrb	r2, [r6, #1]
   ba700:	68db      	ldr	r3, [r3, #12]
   ba702:	491a      	ldr	r1, [pc, #104]	; (ba76c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   ba704:	4628      	mov	r0, r5
   ba706:	4798      	blx	r3
   ba708:	4604      	mov	r4, r0
   ba70a:	b160      	cbz	r0, ba726 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   ba70c:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   ba70e:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   ba710:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   ba712:	f89d 201a 	ldrb.w	r2, [sp, #26]
   ba716:	f89d 301b 	ldrb.w	r3, [sp, #27]
   ba71a:	4911      	ldr	r1, [pc, #68]	; (ba760 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   ba71c:	9400      	str	r4, [sp, #0]
   ba71e:	4628      	mov	r0, r5
   ba720:	f000 fa4a 	bl	babb8 <_ZN8RHRouter10sendtoWaitEPhhhh>
   ba724:	e776      	b.n	ba614 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   ba726:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   ba72a:	4543      	cmp	r3, r8
   ba72c:	f67f af71 	bls.w	ba612 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   ba730:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   ba734:	2b00      	cmp	r3, #0
   ba736:	f43f af6c 	beq.w	ba612 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   ba73a:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   ba73e:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   ba740:	4907      	ldr	r1, [pc, #28]	; (ba760 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   ba742:	443e      	add	r6, r7
		tmpMessageLen++;
   ba744:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   ba746:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   ba748:	f89d 301b 	ldrb.w	r3, [sp, #27]
   ba74c:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   ba74e:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   ba750:	9300      	str	r3, [sp, #0]
   ba752:	4628      	mov	r0, r5
   ba754:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   ba756:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   ba75a:	f000 f9f7 	bl	bab4c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   ba75e:	e759      	b.n	ba614 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   ba760:	2003e474 	.word	0x2003e474
   ba764:	2003e475 	.word	0x2003e475
   ba768:	2003e477 	.word	0x2003e477
   ba76c:	2003e476 	.word	0x2003e476

000ba770 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   ba770:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba772:	b085      	sub	sp, #20
   ba774:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   ba776:	3004      	adds	r0, #4
{
   ba778:	460e      	mov	r6, r1
   ba77a:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   ba77c:	f7ff fc82 	bl	ba084 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   ba780:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   ba782:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   ba784:	4631      	mov	r1, r6
   ba786:	4628      	mov	r0, r5
   ba788:	f000 f94a 	bl	baa20 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   ba78c:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   ba78e:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   ba790:	d001      	beq.n	ba796 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   ba792:	2805      	cmp	r0, #5
   ba794:	d11b      	bne.n	ba7ce <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   ba796:	7831      	ldrb	r1, [r6, #0]
   ba798:	4628      	mov	r0, r5
   ba79a:	f000 f96e 	bl	baa7a <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   ba79e:	7872      	ldrb	r2, [r6, #1]
   ba7a0:	7a2b      	ldrb	r3, [r5, #8]
   ba7a2:	429a      	cmp	r2, r3
   ba7a4:	d013      	beq.n	ba7ce <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   ba7a6:	4c0b      	ldr	r4, [pc, #44]	; (ba7d4 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   ba7a8:	2303      	movs	r3, #3
   ba7aa:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   ba7ac:	7833      	ldrb	r3, [r6, #0]
   ba7ae:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   ba7b0:	7871      	ldrb	r1, [r6, #1]
   ba7b2:	2302      	movs	r3, #2
   ba7b4:	463a      	mov	r2, r7
   ba7b6:	4628      	mov	r0, r5
   ba7b8:	f000 f976 	bl	baaa8 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   ba7bc:	2300      	movs	r3, #0
   ba7be:	9300      	str	r3, [sp, #0]
   ba7c0:	4621      	mov	r1, r4
   ba7c2:	7873      	ldrb	r3, [r6, #1]
   ba7c4:	2202      	movs	r2, #2
   ba7c6:	4628      	mov	r0, r5
   ba7c8:	f000 f9f6 	bl	babb8 <_ZN8RHRouter10sendtoWaitEPhhhh>
   ba7cc:	4604      	mov	r4, r0
}
   ba7ce:	4620      	mov	r0, r4
   ba7d0:	b005      	add	sp, #20
   ba7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba7d4:	2003e474 	.word	0x2003e474

000ba7d8 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   ba7d8:	b510      	push	{r4, lr}
   ba7da:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   ba7dc:	f7ff fc02 	bl	b9fe4 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   ba7e0:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   ba7e2:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   ba7e4:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   ba7e6:	2303      	movs	r3, #3
    _retransmissions = 0;
   ba7e8:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   ba7ea:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   ba7ec:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   ba7ee:	f44f 7280 	mov.w	r2, #256	; 0x100
   ba7f2:	f104 0011 	add.w	r0, r4, #17
   ba7f6:	f005 fe77 	bl	c04e8 <memset>
}
   ba7fa:	4620      	mov	r0, r4
   ba7fc:	bd10      	pop	{r4, pc}

000ba7fe <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   ba7fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba800:	4604      	mov	r4, r0
   ba802:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   ba804:	f7ff fc32 	bl	ba06c <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   ba808:	4620      	mov	r0, r4
   ba80a:	2200      	movs	r2, #0
   ba80c:	2180      	movs	r1, #128	; 0x80
   ba80e:	f7ff fc31 	bl	ba074 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   ba812:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   ba814:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   ba816:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   ba81a:	f10d 010f 	add.w	r1, sp, #15
   ba81e:	2201      	movs	r2, #1
   ba820:	4620      	mov	r0, r4
   ba822:	f7ff fbf4 	bl	ba00e <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   ba826:	4620      	mov	r0, r4
   ba828:	f7ff fbe3 	bl	b9ff2 <_ZN10RHDatagram14waitPacketSentEv>
}
   ba82c:	b004      	add	sp, #16
   ba82e:	bd10      	pop	{r4, pc}

000ba830 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   ba830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   ba834:	7b05      	ldrb	r5, [r0, #12]
   ba836:	3501      	adds	r5, #1
   ba838:	b2ed      	uxtb	r5, r5
{
   ba83a:	b087      	sub	sp, #28
   ba83c:	4604      	mov	r4, r0
   ba83e:	4689      	mov	r9, r1
   ba840:	4692      	mov	sl, r2
   ba842:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   ba844:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   ba846:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   ba848:	7c22      	ldrb	r2, [r4, #16]
   ba84a:	463b      	mov	r3, r7
   ba84c:	429a      	cmp	r2, r3
   ba84e:	f107 0701 	add.w	r7, r7, #1
   ba852:	b2ff      	uxtb	r7, r7
   ba854:	d36b      	bcc.n	ba92e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   ba856:	4629      	mov	r1, r5
   ba858:	4620      	mov	r0, r4
   ba85a:	f7ff fc07 	bl	ba06c <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   ba85e:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   ba860:	bf0d      	iteet	eq
   ba862:	22c0      	moveq	r2, #192	; 0xc0
   ba864:	2280      	movne	r2, #128	; 0x80
   ba866:	2140      	movne	r1, #64	; 0x40
   ba868:	2100      	moveq	r1, #0
   ba86a:	4620      	mov	r0, r4
   ba86c:	f7ff fc02 	bl	ba074 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   ba870:	4643      	mov	r3, r8
   ba872:	4652      	mov	r2, sl
   ba874:	4649      	mov	r1, r9
   ba876:	4620      	mov	r0, r4
   ba878:	f7ff fbc9 	bl	ba00e <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   ba87c:	4620      	mov	r0, r4
   ba87e:	f7ff fbb8 	bl	b9ff2 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   ba882:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   ba886:	d054      	beq.n	ba932 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   ba888:	2f01      	cmp	r7, #1
	    _retransmissions++;
   ba88a:	bf82      	ittt	hi
   ba88c:	68a3      	ldrhi	r3, [r4, #8]
   ba88e:	3301      	addhi	r3, #1
   ba890:	60a3      	strhi	r3, [r4, #8]
   ba892:	f001 fb17 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   ba896:	f44f 7180 	mov.w	r1, #256	; 0x100
   ba89a:	4683      	mov	fp, r0
   ba89c:	2000      	movs	r0, #0
   ba89e:	89e6      	ldrh	r6, [r4, #14]
   ba8a0:	f004 f94b 	bl	beb3a <_Z6randomii>
   ba8a4:	4370      	muls	r0, r6
   ba8a6:	bf48      	it	mi
   ba8a8:	30ff      	addmi	r0, #255	; 0xff
   ba8aa:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   ba8ae:	fa1b f686 	uxtah	r6, fp, r6
   ba8b2:	f001 fb07 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
   ba8b6:	1a30      	subs	r0, r6, r0
   ba8b8:	2800      	cmp	r0, #0
   ba8ba:	ddc5      	ble.n	ba848 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   ba8bc:	b281      	uxth	r1, r0
   ba8be:	2200      	movs	r2, #0
   ba8c0:	4620      	mov	r0, r4
   ba8c2:	f7ff fb9a 	bl	b9ffa <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   ba8c6:	2800      	cmp	r0, #0
   ba8c8:	d0f3      	beq.n	ba8b2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   ba8ca:	f10d 0317 	add.w	r3, sp, #23
   ba8ce:	9302      	str	r3, [sp, #8]
   ba8d0:	f10d 0316 	add.w	r3, sp, #22
   ba8d4:	9301      	str	r3, [sp, #4]
   ba8d6:	2200      	movs	r2, #0
   ba8d8:	f10d 0315 	add.w	r3, sp, #21
   ba8dc:	9300      	str	r3, [sp, #0]
   ba8de:	4611      	mov	r1, r2
   ba8e0:	ab05      	add	r3, sp, #20
   ba8e2:	4620      	mov	r0, r4
   ba8e4:	f7ff fbda 	bl	ba09c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   ba8e8:	2800      	cmp	r0, #0
   ba8ea:	d0e2      	beq.n	ba8b2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   ba8ec:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   ba8f0:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   ba8f4:	4542      	cmp	r2, r8
   ba8f6:	d10e      	bne.n	ba916 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   ba8f8:	f894 c004 	ldrb.w	ip, [r4, #4]
   ba8fc:	f89d 1015 	ldrb.w	r1, [sp, #21]
   ba900:	458c      	cmp	ip, r1
   ba902:	d108      	bne.n	ba916 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   ba904:	2b00      	cmp	r3, #0
   ba906:	da08      	bge.n	ba91a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   ba908:	f89d 3016 	ldrb.w	r3, [sp, #22]
   ba90c:	42ab      	cmp	r3, r5
   ba90e:	d1d0      	bne.n	ba8b2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   ba910:	b007      	add	sp, #28
   ba912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   ba916:	2b00      	cmp	r3, #0
   ba918:	dbcb      	blt.n	ba8b2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   ba91a:	18a1      	adds	r1, r4, r2
   ba91c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   ba920:	7c49      	ldrb	r1, [r1, #17]
   ba922:	4299      	cmp	r1, r3
   ba924:	d1c5      	bne.n	ba8b2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   ba926:	4620      	mov	r0, r4
   ba928:	f7ff ff69 	bl	ba7fe <_ZN18RHReliableDatagram11acknowledgeEhh>
   ba92c:	e7c1      	b.n	ba8b2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   ba92e:	2000      	movs	r0, #0
   ba930:	e7ee      	b.n	ba910 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   ba932:	2001      	movs	r0, #1
   ba934:	e7ec      	b.n	ba910 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000ba936 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   ba936:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba93a:	b089      	sub	sp, #36	; 0x24
   ba93c:	e9cd 2104 	strd	r2, r1, [sp, #16]
   ba940:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   ba944:	9f12      	ldr	r7, [sp, #72]	; 0x48
   ba946:	4604      	mov	r4, r0
   ba948:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   ba94a:	f7ff fb4e 	bl	b9fea <_ZN10RHDatagram9availableEv>
   ba94e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   ba952:	b920      	cbnz	r0, ba95e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   ba954:	2500      	movs	r5, #0
}
   ba956:	4628      	mov	r0, r5
   ba958:	b009      	add	sp, #36	; 0x24
   ba95a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   ba95e:	f10d 031f 	add.w	r3, sp, #31
   ba962:	9302      	str	r3, [sp, #8]
   ba964:	f10d 031e 	add.w	r3, sp, #30
   ba968:	9301      	str	r3, [sp, #4]
   ba96a:	f10d 031d 	add.w	r3, sp, #29
   ba96e:	9300      	str	r3, [sp, #0]
   ba970:	4620      	mov	r0, r4
   ba972:	ab07      	add	r3, sp, #28
   ba974:	f7ff fb92 	bl	ba09c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   ba978:	4605      	mov	r5, r0
   ba97a:	2800      	cmp	r0, #0
   ba97c:	d0ea      	beq.n	ba954 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   ba97e:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   ba982:	2b00      	cmp	r3, #0
   ba984:	dbe6      	blt.n	ba954 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   ba986:	7922      	ldrb	r2, [r4, #4]
   ba988:	f89d 301d 	ldrb.w	r3, [sp, #29]
   ba98c:	429a      	cmp	r2, r3
   ba98e:	d106      	bne.n	ba99e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   ba990:	f89d 201c 	ldrb.w	r2, [sp, #28]
   ba994:	f89d 101e 	ldrb.w	r1, [sp, #30]
   ba998:	4620      	mov	r0, r4
   ba99a:	f7ff ff30 	bl	ba7fe <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   ba99e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   ba9a2:	f89d 101c 	ldrb.w	r1, [sp, #28]
   ba9a6:	f89d 301e 	ldrb.w	r3, [sp, #30]
   ba9aa:	f012 0f40 	tst.w	r2, #64	; 0x40
   ba9ae:	440c      	add	r4, r1
   ba9b0:	d002      	beq.n	ba9b8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   ba9b2:	7c60      	ldrb	r0, [r4, #17]
   ba9b4:	4298      	cmp	r0, r3
   ba9b6:	d0cd      	beq.n	ba954 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   ba9b8:	b106      	cbz	r6, ba9bc <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   ba9ba:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   ba9bc:	f1b9 0f00 	cmp.w	r9, #0
   ba9c0:	d003      	beq.n	ba9ca <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   ba9c2:	f89d 101d 	ldrb.w	r1, [sp, #29]
   ba9c6:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   ba9ca:	f1b8 0f00 	cmp.w	r8, #0
   ba9ce:	d001      	beq.n	ba9d4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   ba9d0:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   ba9d4:	b107      	cbz	r7, ba9d8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   ba9d6:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   ba9d8:	7463      	strb	r3, [r4, #17]
		return true;
   ba9da:	e7bc      	b.n	ba956 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000ba9dc <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   ba9dc:	4770      	bx	lr

000ba9de <_ZN8RHRouter4initEv>:
{
   ba9de:	b510      	push	{r4, lr}
   ba9e0:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   ba9e2:	3004      	adds	r0, #4
   ba9e4:	f7ff fb34 	bl	ba050 <_ZN10RHDatagram4initEv>
    if (ret)
   ba9e8:	b110      	cbz	r0, ba9f0 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   ba9ea:	231e      	movs	r3, #30
   ba9ec:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   ba9f0:	bd10      	pop	{r4, pc}

000ba9f2 <_ZN8RHRouter10getRouteToEh>:
{
   ba9f2:	b510      	push	{r4, lr}
   ba9f4:	4602      	mov	r2, r0
   ba9f6:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   ba9f8:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   ba9fc:	428c      	cmp	r4, r1
   ba9fe:	d108      	bne.n	baa12 <_ZN8RHRouter10getRouteToEh+0x20>
   baa00:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   baa04:	b12c      	cbz	r4, baa12 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   baa06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   baa0a:	f503 738c 	add.w	r3, r3, #280	; 0x118
   baa0e:	4418      	add	r0, r3
}
   baa10:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   baa12:	3301      	adds	r3, #1
   baa14:	2b32      	cmp	r3, #50	; 0x32
   baa16:	f102 0203 	add.w	r2, r2, #3
   baa1a:	d1ed      	bne.n	ba9f8 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   baa1c:	2000      	movs	r0, #0
   baa1e:	e7f7      	b.n	baa10 <_ZN8RHRouter10getRouteToEh+0x1e>

000baa20 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   baa20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   baa22:	780b      	ldrb	r3, [r1, #0]
   baa24:	2bff      	cmp	r3, #255	; 0xff
{
   baa26:	4605      	mov	r5, r0
   baa28:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   baa2a:	d006      	beq.n	baa3a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   baa2c:	4619      	mov	r1, r3
   baa2e:	9201      	str	r2, [sp, #4]
   baa30:	f7ff ffdf 	bl	ba9f2 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   baa34:	b158      	cbz	r0, baa4e <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   baa36:	7843      	ldrb	r3, [r0, #1]
   baa38:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   baa3a:	4621      	mov	r1, r4
   baa3c:	1d28      	adds	r0, r5, #4
   baa3e:	f7ff fef7 	bl	ba830 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   baa42:	2800      	cmp	r0, #0
   baa44:	bf14      	ite	ne
   baa46:	2000      	movne	r0, #0
   baa48:	2005      	moveq	r0, #5
}
   baa4a:	b003      	add	sp, #12
   baa4c:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   baa4e:	2002      	movs	r0, #2
   baa50:	e7fb      	b.n	baa4a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000baa52 <_ZN8RHRouter11deleteRouteEh>:
{
   baa52:	b510      	push	{r4, lr}
   baa54:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   baa58:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   baa5a:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   baa5e:	f503 708c 	add.w	r0, r3, #280	; 0x118
   baa62:	f203 111b 	addw	r1, r3, #283	; 0x11b
   baa66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   baa6a:	4421      	add	r1, r4
   baa6c:	4420      	add	r0, r4
   baa6e:	f005 fd13 	bl	c0498 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   baa72:	2300      	movs	r3, #0
   baa74:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   baa78:	bd10      	pop	{r4, pc}

000baa7a <_ZN8RHRouter13deleteRouteToEh>:
{
   baa7a:	b538      	push	{r3, r4, r5, lr}
   baa7c:	460a      	mov	r2, r1
   baa7e:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   baa80:	f500 748c 	add.w	r4, r0, #280	; 0x118
   baa84:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   baa88:	b2d9      	uxtb	r1, r3
   baa8a:	5d65      	ldrb	r5, [r4, r5]
   baa8c:	4295      	cmp	r5, r2
   baa8e:	d103      	bne.n	baa98 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   baa90:	f7ff ffdf 	bl	baa52 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   baa94:	2001      	movs	r0, #1
}
   baa96:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   baa98:	3301      	adds	r3, #1
   baa9a:	2b32      	cmp	r3, #50	; 0x32
   baa9c:	d1f2      	bne.n	baa84 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   baa9e:	2000      	movs	r0, #0
   baaa0:	e7f9      	b.n	baa96 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000baaa2 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   baaa2:	2100      	movs	r1, #0
   baaa4:	f7ff bfd5 	b.w	baa52 <_ZN8RHRouter11deleteRouteEh>

000baaa8 <_ZN8RHRouter10addRouteToEhhh>:
{
   baaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baaaa:	4616      	mov	r6, r2
   baaac:	461f      	mov	r7, r3
   baaae:	4604      	mov	r4, r0
   baab0:	460d      	mov	r5, r1
   baab2:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   baab4:	f500 728c 	add.w	r2, r0, #280	; 0x118
   baab8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   baabc:	5c11      	ldrb	r1, [r2, r0]
   baabe:	42a9      	cmp	r1, r5
   baac0:	d105      	bne.n	baace <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   baac2:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   baac4:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   baac8:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   baacc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   baace:	3301      	adds	r3, #1
   baad0:	2b32      	cmp	r3, #50	; 0x32
   baad2:	d1f1      	bne.n	baab8 <_ZN8RHRouter10addRouteToEhhh+0x10>
   baad4:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   baad6:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   baada:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   baade:	5c11      	ldrb	r1, [r2, r0]
   baae0:	b919      	cbnz	r1, baaea <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   baae2:	4420      	add	r0, r4
   baae4:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   baae8:	e7ec      	b.n	baac4 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   baaea:	3301      	adds	r3, #1
   baaec:	2b32      	cmp	r3, #50	; 0x32
   baaee:	d1f4      	bne.n	baada <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   baaf0:	4620      	mov	r0, r4
   baaf2:	f7ff ffd6 	bl	baaa2 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   baaf6:	4620      	mov	r0, r4
   baaf8:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   baafc:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   bab00:	b92a      	cbnz	r2, bab0e <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   bab02:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   bab06:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   bab0a:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bab0e:	3003      	adds	r0, #3
   bab10:	4298      	cmp	r0, r3
   bab12:	d1f3      	bne.n	baafc <_ZN8RHRouter10addRouteToEhhh+0x54>
   bab14:	e7da      	b.n	baacc <_ZN8RHRouter10addRouteToEhhh+0x24>

000bab16 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bab16:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   bab1a:	2200      	movs	r2, #0
   bab1c:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bab20:	3003      	adds	r0, #3
   bab22:	4298      	cmp	r0, r3
   bab24:	d1fa      	bne.n	bab1c <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   bab26:	4770      	bx	lr

000bab28 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   bab28:	b510      	push	{r4, lr}
   bab2a:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   bab2c:	3004      	adds	r0, #4
   bab2e:	f7ff fe53 	bl	ba7d8 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   bab32:	4b05      	ldr	r3, [pc, #20]	; (bab48 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   bab34:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   bab36:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   bab3a:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   bab3c:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   bab40:	f7ff ffe9 	bl	bab16 <_ZN8RHRouter17clearRoutingTableEv>
}
   bab44:	4620      	mov	r0, r4
   bab46:	bd10      	pop	{r4, pc}
   bab48:	000c1f70 	.word	0x000c1f70

000bab4c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   bab4c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bab50:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bab52:	6840      	ldr	r0, [r0, #4]
{
   bab54:	9101      	str	r1, [sp, #4]
   bab56:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bab58:	6803      	ldr	r3, [r0, #0]
{
   bab5a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bab5e:	699b      	ldr	r3, [r3, #24]
{
   bab60:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   bab64:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bab66:	4798      	blx	r3
   bab68:	f106 0805 	add.w	r8, r6, #5
   bab6c:	4580      	cmp	r8, r0
   bab6e:	d81c      	bhi.n	babaa <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   bab70:	4d10      	ldr	r5, [pc, #64]	; (babb4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   bab72:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   bab74:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   bab78:	2300      	movs	r3, #0
   bab7a:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   bab7c:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   bab80:	70eb      	strb	r3, [r5, #3]
   bab82:	1c5a      	adds	r2, r3, #1
   bab84:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   bab88:	1d68      	adds	r0, r5, #5
   bab8a:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   bab8c:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   bab8e:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   bab92:	f005 fc81 	bl	c0498 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   bab96:	6823      	ldr	r3, [r4, #0]
   bab98:	685b      	ldr	r3, [r3, #4]
   bab9a:	fa5f f288 	uxtb.w	r2, r8
   bab9e:	4629      	mov	r1, r5
   baba0:	4620      	mov	r0, r4
}
   baba2:	b002      	add	sp, #8
   baba4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   baba8:	4718      	bx	r3
}
   babaa:	2001      	movs	r0, #1
   babac:	b002      	add	sp, #8
   babae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   babb2:	bf00      	nop
   babb4:	2003e4ee 	.word	0x2003e4ee

000babb8 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   babb8:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   babba:	f89d 4010 	ldrb.w	r4, [sp, #16]
   babbe:	9401      	str	r4, [sp, #4]
   babc0:	7a04      	ldrb	r4, [r0, #8]
   babc2:	9400      	str	r4, [sp, #0]
   babc4:	f7ff ffc2 	bl	bab4c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   babc8:	b002      	add	sp, #8
   babca:	bd10      	pop	{r4, pc}

000babcc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   babcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   babd0:	b087      	sub	sp, #28
   babd2:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   babd4:	237f      	movs	r3, #127	; 0x7f
   babd6:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   babda:	f10d 0317 	add.w	r3, sp, #23
   babde:	9302      	str	r3, [sp, #8]
   babe0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; bacb4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   babe4:	f10d 0316 	add.w	r3, sp, #22
   babe8:	9301      	str	r3, [sp, #4]
   babea:	f10d 0315 	add.w	r3, sp, #21
   babee:	9300      	str	r3, [sp, #0]
{  
   babf0:	4604      	mov	r4, r0
   babf2:	4688      	mov	r8, r1
   babf4:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   babf6:	ab05      	add	r3, sp, #20
   babf8:	f10d 0213 	add.w	r2, sp, #19
   babfc:	4649      	mov	r1, r9
   babfe:	3004      	adds	r0, #4
{  
   bac00:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bac04:	f7ff fe97 	bl	ba936 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   bac08:	4605      	mov	r5, r0
   bac0a:	b908      	cbnz	r0, bac10 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   bac0c:	2500      	movs	r5, #0
   bac0e:	e038      	b.n	bac82 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   bac10:	6823      	ldr	r3, [r4, #0]
   bac12:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bac16:	681b      	ldr	r3, [r3, #0]
   bac18:	4649      	mov	r1, r9
   bac1a:	4620      	mov	r0, r4
   bac1c:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   bac1e:	f899 3000 	ldrb.w	r3, [r9]
   bac22:	7a22      	ldrb	r2, [r4, #8]
   bac24:	429a      	cmp	r2, r3
   bac26:	d001      	beq.n	bac2c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   bac28:	2bff      	cmp	r3, #255	; 0xff
   bac2a:	d12e      	bne.n	bac8a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   bac2c:	b117      	cbz	r7, bac34 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   bac2e:	4b21      	ldr	r3, [pc, #132]	; (bacb4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bac30:	785b      	ldrb	r3, [r3, #1]
   bac32:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   bac34:	f1bb 0f00 	cmp.w	fp, #0
   bac38:	d003      	beq.n	bac42 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   bac3a:	4b1e      	ldr	r3, [pc, #120]	; (bacb4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bac3c:	781b      	ldrb	r3, [r3, #0]
   bac3e:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   bac42:	f1ba 0f00 	cmp.w	sl, #0
   bac46:	d003      	beq.n	bac50 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   bac48:	4b1a      	ldr	r3, [pc, #104]	; (bacb4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bac4a:	78db      	ldrb	r3, [r3, #3]
   bac4c:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   bac50:	9b12      	ldr	r3, [sp, #72]	; 0x48
   bac52:	b11b      	cbz	r3, bac5c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   bac54:	4b17      	ldr	r3, [pc, #92]	; (bacb4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bac56:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bac58:	791b      	ldrb	r3, [r3, #4]
   bac5a:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   bac5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bac5e:	b11b      	cbz	r3, bac68 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   bac60:	4b14      	ldr	r3, [pc, #80]	; (bacb4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bac62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bac64:	789b      	ldrb	r3, [r3, #2]
   bac66:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   bac68:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   bac6c:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   bac6e:	4912      	ldr	r1, [pc, #72]	; (bacb8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   bac70:	3b05      	subs	r3, #5
   bac72:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   bac74:	429a      	cmp	r2, r3
		*len = msgLen;
   bac76:	bf88      	it	hi
   bac78:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   bac7a:	7832      	ldrb	r2, [r6, #0]
   bac7c:	4640      	mov	r0, r8
   bac7e:	f005 fc0b 	bl	c0498 <memcpy>
}
   bac82:	4628      	mov	r0, r5
   bac84:	b007      	add	sp, #28
   bac86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   bac8a:	f899 3002 	ldrb.w	r3, [r9, #2]
   bac8e:	1c5a      	adds	r2, r3, #1
   bac90:	f889 2002 	strb.w	r2, [r9, #2]
   bac94:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   bac98:	429a      	cmp	r2, r3
   bac9a:	d9b7      	bls.n	bac0c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   bac9c:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   baca0:	2b00      	cmp	r3, #0
   baca2:	d0b3      	beq.n	bac0c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   baca4:	6823      	ldr	r3, [r4, #0]
   baca6:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bacaa:	685b      	ldr	r3, [r3, #4]
   bacac:	4649      	mov	r1, r9
   bacae:	4620      	mov	r0, r4
   bacb0:	4798      	blx	r3
   bacb2:	e7ab      	b.n	bac0c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   bacb4:	2003e4ee 	.word	0x2003e4ee
   bacb8:	2003e4f3 	.word	0x2003e4f3

000bacbc <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   bacbc:	b510      	push	{r4, lr}
   bacbe:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   bacc0:	6a00      	ldr	r0, [r0, #32]
   bacc2:	6803      	ldr	r3, [r0, #0]
   bacc4:	68db      	ldr	r3, [r3, #12]
   bacc6:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   bacc8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   baccc:	28ff      	cmp	r0, #255	; 0xff
   bacce:	d002      	beq.n	bacd6 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   bacd0:	2101      	movs	r1, #1
   bacd2:	f004 fdbb 	bl	bf84c <pinMode>

    deselectSlave();
   bacd6:	6823      	ldr	r3, [r4, #0]
   bacd8:	4620      	mov	r0, r4
   bacda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bacdc:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   bacde:	2064      	movs	r0, #100	; 0x64
   bace0:	f001 fd0c 	bl	bc6fc <delay>
#endif
    
    return true;
}
   bace4:	2001      	movs	r0, #1
   bace6:	bd10      	pop	{r4, pc}

000bace8 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   bace8:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bacec:	2100      	movs	r1, #0
   bacee:	f004 bdbe 	b.w	bf86e <digitalWrite>

000bacf2 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   bacf2:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bacf6:	2101      	movs	r1, #1
   bacf8:	f004 bdb9 	b.w	bf86e <digitalWrite>

000bacfc <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   bacfc:	b570      	push	{r4, r5, r6, lr}
   bacfe:	4604      	mov	r4, r0
   bad00:	460d      	mov	r5, r1
   bad02:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   bad04:	f7ff fa7e 	bl	ba204 <_ZN15RHGenericDriverC1Ev>
   bad08:	4b03      	ldr	r3, [pc, #12]	; (bad18 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   bad0a:	6023      	str	r3, [r4, #0]
   bad0c:	6226      	str	r6, [r4, #32]
   bad0e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   bad12:	4620      	mov	r0, r4
   bad14:	bd70      	pop	{r4, r5, r6, pc}
   bad16:	bf00      	nop
   bad18:	000c1f80 	.word	0x000c1f80

000bad1c <_ZN11RHSPIDriver7spiReadEh>:
{
   bad1c:	b538      	push	{r3, r4, r5, lr}
   bad1e:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bad20:	6a00      	ldr	r0, [r0, #32]
   bad22:	6803      	ldr	r3, [r0, #0]
   bad24:	6a1b      	ldr	r3, [r3, #32]
{
   bad26:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bad28:	4798      	blx	r3
    selectSlave();
   bad2a:	6823      	ldr	r3, [r4, #0]
   bad2c:	4620      	mov	r0, r4
   bad2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bad30:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   bad32:	6a20      	ldr	r0, [r4, #32]
   bad34:	6803      	ldr	r3, [r0, #0]
   bad36:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   bad3a:	681b      	ldr	r3, [r3, #0]
   bad3c:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bad3e:	6a20      	ldr	r0, [r4, #32]
   bad40:	6803      	ldr	r3, [r0, #0]
   bad42:	2100      	movs	r1, #0
   bad44:	681b      	ldr	r3, [r3, #0]
   bad46:	4798      	blx	r3
    deselectSlave();
   bad48:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bad4a:	4605      	mov	r5, r0
    deselectSlave();
   bad4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bad4e:	4620      	mov	r0, r4
   bad50:	4798      	blx	r3
    _spi.endTransaction();
   bad52:	6a20      	ldr	r0, [r4, #32]
   bad54:	6803      	ldr	r3, [r0, #0]
   bad56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bad58:	4798      	blx	r3
}
   bad5a:	4628      	mov	r0, r5
   bad5c:	bd38      	pop	{r3, r4, r5, pc}

000bad5e <_ZN11RHSPIDriver8spiWriteEhh>:
{
   bad5e:	b570      	push	{r4, r5, r6, lr}
   bad60:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bad62:	6a00      	ldr	r0, [r0, #32]
   bad64:	6803      	ldr	r3, [r0, #0]
   bad66:	6a1b      	ldr	r3, [r3, #32]
{
   bad68:	4616      	mov	r6, r2
   bad6a:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bad6c:	4798      	blx	r3
    selectSlave();
   bad6e:	6823      	ldr	r3, [r4, #0]
   bad70:	4620      	mov	r0, r4
   bad72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bad74:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   bad76:	6a20      	ldr	r0, [r4, #32]
   bad78:	6803      	ldr	r3, [r0, #0]
   bad7a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   bad7e:	681b      	ldr	r3, [r3, #0]
   bad80:	4798      	blx	r3
   bad82:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   bad84:	6a20      	ldr	r0, [r4, #32]
   bad86:	6803      	ldr	r3, [r0, #0]
   bad88:	4631      	mov	r1, r6
   bad8a:	681b      	ldr	r3, [r3, #0]
   bad8c:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bad8e:	2001      	movs	r0, #1
   bad90:	f001 f890 	bl	bbeb4 <HAL_Delay_Microseconds>
    deselectSlave();
   bad94:	6823      	ldr	r3, [r4, #0]
   bad96:	4620      	mov	r0, r4
   bad98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bad9a:	4798      	blx	r3
    _spi.endTransaction();
   bad9c:	6a20      	ldr	r0, [r4, #32]
   bad9e:	6803      	ldr	r3, [r0, #0]
   bada0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bada2:	4798      	blx	r3
}
   bada4:	4628      	mov	r0, r5
   bada6:	bd70      	pop	{r4, r5, r6, pc}

000bada8 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   bada8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   badaa:	4604      	mov	r4, r0
    _spi.beginTransaction();
   badac:	6a00      	ldr	r0, [r0, #32]
{
   badae:	461e      	mov	r6, r3
    _spi.beginTransaction();
   badb0:	6803      	ldr	r3, [r0, #0]
   badb2:	6a1b      	ldr	r3, [r3, #32]
{
   badb4:	460f      	mov	r7, r1
   badb6:	4615      	mov	r5, r2
    _spi.beginTransaction();
   badb8:	4798      	blx	r3
    selectSlave();
   badba:	6823      	ldr	r3, [r4, #0]
   badbc:	4620      	mov	r0, r4
   badbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   badc0:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   badc2:	6a20      	ldr	r0, [r4, #32]
   badc4:	6803      	ldr	r3, [r0, #0]
   badc6:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   badca:	681b      	ldr	r3, [r3, #0]
   badcc:	4798      	blx	r3
   badce:	442e      	add	r6, r5
   badd0:	4607      	mov	r7, r0
    while (len--)
   badd2:	42b5      	cmp	r5, r6
   badd4:	d007      	beq.n	bade6 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   badd6:	6a20      	ldr	r0, [r4, #32]
   badd8:	6803      	ldr	r3, [r0, #0]
   badda:	2100      	movs	r1, #0
   baddc:	681b      	ldr	r3, [r3, #0]
   badde:	4798      	blx	r3
   bade0:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   bade4:	e7f5      	b.n	badd2 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   bade6:	6823      	ldr	r3, [r4, #0]
   bade8:	4620      	mov	r0, r4
   badea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   badec:	4798      	blx	r3
    _spi.endTransaction();
   badee:	6a20      	ldr	r0, [r4, #32]
   badf0:	6803      	ldr	r3, [r0, #0]
   badf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   badf4:	4798      	blx	r3
}
   badf6:	4638      	mov	r0, r7
   badf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000badfa <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   badfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   badfc:	4604      	mov	r4, r0
    _spi.beginTransaction();
   badfe:	6a00      	ldr	r0, [r0, #32]
{
   bae00:	461e      	mov	r6, r3
    _spi.beginTransaction();
   bae02:	6803      	ldr	r3, [r0, #0]
   bae04:	6a1b      	ldr	r3, [r3, #32]
{
   bae06:	460f      	mov	r7, r1
   bae08:	4615      	mov	r5, r2
    _spi.beginTransaction();
   bae0a:	4798      	blx	r3
    selectSlave();
   bae0c:	6823      	ldr	r3, [r4, #0]
   bae0e:	4620      	mov	r0, r4
   bae10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bae12:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   bae14:	6a20      	ldr	r0, [r4, #32]
   bae16:	6803      	ldr	r3, [r0, #0]
   bae18:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   bae1c:	681b      	ldr	r3, [r3, #0]
   bae1e:	4798      	blx	r3
   bae20:	442e      	add	r6, r5
   bae22:	4607      	mov	r7, r0
    while (len--)
   bae24:	42b5      	cmp	r5, r6
   bae26:	d006      	beq.n	bae36 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   bae28:	6a20      	ldr	r0, [r4, #32]
   bae2a:	f815 1b01 	ldrb.w	r1, [r5], #1
   bae2e:	6803      	ldr	r3, [r0, #0]
   bae30:	681b      	ldr	r3, [r3, #0]
   bae32:	4798      	blx	r3
    while (len--)
   bae34:	e7f6      	b.n	bae24 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   bae36:	6823      	ldr	r3, [r4, #0]
   bae38:	4620      	mov	r0, r4
   bae3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bae3c:	4798      	blx	r3
    _spi.endTransaction();
   bae3e:	6a20      	ldr	r0, [r4, #32]
   bae40:	6803      	ldr	r3, [r0, #0]
   bae42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bae44:	4798      	blx	r3
}
   bae46:	4638      	mov	r0, r7
   bae48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bae4a <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   bae4a:	6a00      	ldr	r0, [r0, #32]
   bae4c:	6803      	ldr	r3, [r0, #0]
   bae4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bae50:	4718      	bx	r3

000bae52 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   bae52:	2001      	movs	r0, #1
   bae54:	4770      	bx	lr

000bae56 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   bae56:	20fb      	movs	r0, #251	; 0xfb
   bae58:	4770      	bx	lr

000bae5a <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   bae5a:	4770      	bx	lr

000bae5c <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   bae5c:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   bae5e:	7903      	ldrb	r3, [r0, #4]
   bae60:	2b05      	cmp	r3, #5
{
   bae62:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   bae64:	d010      	beq.n	bae88 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   bae66:	6803      	ldr	r3, [r0, #0]
   bae68:	2105      	movs	r1, #5
   bae6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bae6e:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   bae70:	2207      	movs	r2, #7
   bae72:	2101      	movs	r1, #1
   bae74:	4620      	mov	r0, r4
   bae76:	f7ff ff72 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   bae7a:	2280      	movs	r2, #128	; 0x80
   bae7c:	2140      	movs	r1, #64	; 0x40
   bae7e:	4620      	mov	r0, r4
   bae80:	f7ff ff6d 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   bae84:	2305      	movs	r3, #5
   bae86:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   bae88:	7923      	ldrb	r3, [r4, #4]
   bae8a:	2b05      	cmp	r3, #5
   bae8c:	d0fc      	beq.n	bae88 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   bae8e:	7e20      	ldrb	r0, [r4, #24]
}
   bae90:	bd10      	pop	{r4, pc}

000bae92 <_ZN7RH_RF95D0Ev>:
   bae92:	b510      	push	{r4, lr}
   bae94:	f44f 7198 	mov.w	r1, #304	; 0x130
   bae98:	4604      	mov	r4, r0
   bae9a:	f7f9 f900 	bl	b409e <_ZdlPvj>
   bae9e:	4620      	mov	r0, r4
   baea0:	bd10      	pop	{r4, pc}

000baea2 <_ZN7RH_RF955sleepEv>:
{
   baea2:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   baea4:	7903      	ldrb	r3, [r0, #4]
   baea6:	2b01      	cmp	r3, #1
{
   baea8:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   baeaa:	d00b      	beq.n	baec4 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   baeac:	6803      	ldr	r3, [r0, #0]
   baeae:	2101      	movs	r1, #1
   baeb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   baeb4:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   baeb6:	2200      	movs	r2, #0
   baeb8:	2101      	movs	r1, #1
   baeba:	4620      	mov	r0, r4
   baebc:	f7ff ff4f 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   baec0:	2301      	movs	r3, #1
   baec2:	7123      	strb	r3, [r4, #4]
}
   baec4:	2001      	movs	r0, #1
   baec6:	bd10      	pop	{r4, pc}

000baec8 <_ZN7RH_RF954recvEPhS0_>:
{
   baec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   baeca:	6803      	ldr	r3, [r0, #0]
   baecc:	68db      	ldr	r3, [r3, #12]
{
   baece:	4604      	mov	r4, r0
   baed0:	460f      	mov	r7, r1
   baed2:	4615      	mov	r5, r2
    if (!available())
   baed4:	4798      	blx	r3
   baed6:	4606      	mov	r6, r0
   baed8:	b1b0      	cbz	r0, baf08 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   baeda:	b187      	cbz	r7, baefe <_ZN7RH_RF954recvEPhS0_+0x36>
   baedc:	b17d      	cbz	r5, baefe <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   baede:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   baee2:	782a      	ldrb	r2, [r5, #0]
   baee4:	3b03      	subs	r3, #3
   baee6:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   baee8:	bfde      	ittt	le
   baeea:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   baeee:	3b04      	suble	r3, #4
   baef0:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   baef2:	782a      	ldrb	r2, [r5, #0]
   baef4:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   baef8:	4638      	mov	r0, r7
   baefa:	f005 facd 	bl	c0498 <memcpy>
    _rxBufValid = false;
   baefe:	2300      	movs	r3, #0
   baf00:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   baf04:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   baf08:	4630      	mov	r0, r6
   baf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baf0c <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   baf0c:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   baf0e:	b538      	push	{r3, r4, r5, lr}
   baf10:	4605      	mov	r5, r0
   baf12:	460c      	mov	r4, r1
	if (power > 20)
   baf14:	dc14      	bgt.n	baf40 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   baf16:	2901      	cmp	r1, #1
   baf18:	dd14      	ble.n	baf44 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   baf1a:	2911      	cmp	r1, #17
   baf1c:	dd13      	ble.n	baf46 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   baf1e:	2207      	movs	r2, #7
   baf20:	214d      	movs	r1, #77	; 0x4d
   baf22:	4628      	mov	r0, r5
   baf24:	f7ff ff1b 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   baf28:	3c03      	subs	r4, #3
   baf2a:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   baf2c:	1ea2      	subs	r2, r4, #2
   baf2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   baf32:	4628      	mov	r0, r5
   baf34:	b2d2      	uxtb	r2, r2
}
   baf36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   baf3a:	2109      	movs	r1, #9
   baf3c:	f7ff bf0f 	b.w	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   baf40:	2414      	movs	r4, #20
   baf42:	e7ec      	b.n	baf1e <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   baf44:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   baf46:	2204      	movs	r2, #4
   baf48:	214d      	movs	r1, #77	; 0x4d
   baf4a:	4628      	mov	r0, r5
   baf4c:	f7ff ff07 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
   baf50:	e7ec      	b.n	baf2c <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000baf54 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   baf54:	b538      	push	{r3, r4, r5, lr}
   baf56:	4604      	mov	r4, r0
   baf58:	4615      	mov	r5, r2
    _rxBufValid(0)
   baf5a:	461a      	mov	r2, r3
   baf5c:	f7ff fece 	bl	bacfc <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   baf60:	4b09      	ldr	r3, [pc, #36]	; (baf88 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   baf62:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   baf64:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   baf66:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   baf68:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   baf6c:	2201      	movs	r2, #1
    _rxBufValid(0)
   baf6e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   baf72:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   baf76:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   baf7a:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   baf7e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   baf82:	4620      	mov	r0, r4
   baf84:	bd38      	pop	{r3, r4, r5, pc}
   baf86:	bf00      	nop
   baf88:	000c2018 	.word	0x000c2018

000baf8c <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   baf8c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   baf90:	2b03      	cmp	r3, #3
   baf92:	d91b      	bls.n	bafcc <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   baf94:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   baf98:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   baf9a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   baf9e:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   bafa0:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   bafa4:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   bafa6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   bafaa:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   bafac:	7983      	ldrb	r3, [r0, #6]
   bafae:	b933      	cbnz	r3, bafbe <_ZN7RH_RF9513validateRxBufEv+0x32>
   bafb0:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   bafb2:	7942      	ldrb	r2, [r0, #5]
   bafb4:	429a      	cmp	r2, r3
   bafb6:	d002      	beq.n	bafbe <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   bafb8:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   bafba:	2bff      	cmp	r3, #255	; 0xff
   bafbc:	d106      	bne.n	bafcc <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   bafbe:	8a83      	ldrh	r3, [r0, #20]
   bafc0:	3301      	adds	r3, #1
   bafc2:	b29b      	uxth	r3, r3
   bafc4:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   bafc6:	2301      	movs	r3, #1
   bafc8:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   bafcc:	4770      	bx	lr
	...

000bafd0 <_ZN7RH_RF9512setFrequencyEf>:
{
   bafd0:	b538      	push	{r3, r4, r5, lr}
   bafd2:	4604      	mov	r4, r0
   bafd4:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bafd8:	ee10 0a10 	vmov	r0, s0
{
   bafdc:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bafe0:	f004 feb8 	bl	bfd54 <__aeabi_f2d>
   bafe4:	a317      	add	r3, pc, #92	; (adr r3, bb044 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   bafe6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bafea:	f004 ff0b 	bl	bfe04 <__aeabi_dmul>
   bafee:	a317      	add	r3, pc, #92	; (adr r3, bb04c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   baff0:	e9d3 2300 	ldrd	r2, r3, [r3]
   baff4:	f005 f830 	bl	c0058 <__aeabi_ddiv>
   baff8:	f005 f9dc 	bl	c03b4 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   baffc:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   baffe:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bb000:	f3c0 4207 	ubfx	r2, r0, #16, #8
   bb004:	4620      	mov	r0, r4
   bb006:	f7ff feaa 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   bb00a:	f3c5 2207 	ubfx	r2, r5, #8, #8
   bb00e:	2107      	movs	r1, #7
   bb010:	4620      	mov	r0, r4
   bb012:	f7ff fea4 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   bb016:	b2ea      	uxtb	r2, r5
   bb018:	2108      	movs	r1, #8
   bb01a:	4620      	mov	r0, r4
   bb01c:	f7ff fe9f 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   bb020:	eddf 7a07 	vldr	s15, [pc, #28]	; bb040 <_ZN7RH_RF9512setFrequencyEf+0x70>
   bb024:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   bb028:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   bb02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb030:	bfac      	ite	ge
   bb032:	2301      	movge	r3, #1
   bb034:	2300      	movlt	r3, #0
}
   bb036:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   bb038:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   bb03c:	bd38      	pop	{r3, r4, r5, pc}
   bb03e:	bf00      	nop
   bb040:	4442c000 	.word	0x4442c000
   bb044:	00000000 	.word	0x00000000
   bb048:	412e8480 	.word	0x412e8480
   bb04c:	00000000 	.word	0x00000000
   bb050:	404e8480 	.word	0x404e8480

000bb054 <_ZN7RH_RF9511setModeIdleEv>:
{
   bb054:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   bb056:	7903      	ldrb	r3, [r0, #4]
   bb058:	2b02      	cmp	r3, #2
{
   bb05a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   bb05c:	d00b      	beq.n	bb076 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   bb05e:	6803      	ldr	r3, [r0, #0]
   bb060:	2102      	movs	r1, #2
   bb062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bb066:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   bb068:	2201      	movs	r2, #1
   bb06a:	4611      	mov	r1, r2
   bb06c:	4620      	mov	r0, r4
   bb06e:	f7ff fe76 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   bb072:	2302      	movs	r3, #2
   bb074:	7123      	strb	r3, [r4, #4]
}
   bb076:	bd10      	pop	{r4, pc}

000bb078 <_ZN7RH_RF9515handleInterruptEv>:
{
   bb078:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bb07a:	2112      	movs	r1, #18
{
   bb07c:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bb07e:	f7ff fe4d 	bl	bad1c <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bb082:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bb084:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bb086:	4620      	mov	r0, r4
   bb088:	f7ff fe48 	bl	bad1c <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bb08c:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bb08e:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bb090:	2112      	movs	r1, #18
   bb092:	4620      	mov	r0, r4
   bb094:	f7ff fe63 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   bb098:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   bb09a:	2b04      	cmp	r3, #4
   bb09c:	d107      	bne.n	bb0ae <_ZN7RH_RF9515handleInterruptEv+0x36>
   bb09e:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   bb0a2:	d117      	bne.n	bb0d4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   bb0a4:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   bb0a8:	b10b      	cbz	r3, bb0ae <_ZN7RH_RF9515handleInterruptEv+0x36>
   bb0aa:	0670      	lsls	r0, r6, #25
   bb0ac:	d512      	bpl.n	bb0d4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   bb0ae:	7923      	ldrb	r3, [r4, #4]
   bb0b0:	2b04      	cmp	r3, #4
   bb0b2:	d101      	bne.n	bb0b8 <_ZN7RH_RF9515handleInterruptEv+0x40>
   bb0b4:	0669      	lsls	r1, r5, #25
   bb0b6:	d422      	bmi.n	bb0fe <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   bb0b8:	7923      	ldrb	r3, [r4, #4]
   bb0ba:	2b03      	cmp	r3, #3
   bb0bc:	d101      	bne.n	bb0c2 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   bb0be:	072a      	lsls	r2, r5, #28
   bb0c0:	d468      	bmi.n	bb194 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   bb0c2:	7923      	ldrb	r3, [r4, #4]
   bb0c4:	2b05      	cmp	r3, #5
   bb0c6:	d10e      	bne.n	bb0e6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   bb0c8:	076b      	lsls	r3, r5, #29
   bb0ca:	d50c      	bpl.n	bb0e6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   bb0cc:	f005 0501 	and.w	r5, r5, #1
   bb0d0:	7625      	strb	r5, [r4, #24]
   bb0d2:	e063      	b.n	bb19c <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   bb0d4:	8a63      	ldrh	r3, [r4, #18]
   bb0d6:	3301      	adds	r3, #1
   bb0d8:	b29b      	uxth	r3, r3
   bb0da:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   bb0dc:	2300      	movs	r3, #0
   bb0de:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bb0e2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bb0e6:	22ff      	movs	r2, #255	; 0xff
   bb0e8:	2112      	movs	r1, #18
   bb0ea:	4620      	mov	r0, r4
   bb0ec:	f7ff fe37 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bb0f0:	4620      	mov	r0, r4
   bb0f2:	22ff      	movs	r2, #255	; 0xff
}
   bb0f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bb0f8:	2112      	movs	r1, #18
   bb0fa:	f7ff be30 	b.w	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bb0fe:	2113      	movs	r1, #19
   bb100:	4620      	mov	r0, r4
   bb102:	f7ff fe0b 	bl	bad1c <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bb106:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bb108:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bb10a:	4620      	mov	r0, r4
   bb10c:	f7ff fe06 	bl	bad1c <_ZN11RHSPIDriver7spiReadEh>
   bb110:	210d      	movs	r1, #13
   bb112:	4602      	mov	r2, r0
   bb114:	4620      	mov	r0, r4
   bb116:	f7ff fe22 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   bb11a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   bb11e:	462b      	mov	r3, r5
   bb120:	2100      	movs	r1, #0
   bb122:	4620      	mov	r0, r4
   bb124:	f7ff fe40 	bl	bada8 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bb128:	2119      	movs	r1, #25
	_bufLen = len;
   bb12a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bb12e:	4620      	mov	r0, r4
   bb130:	f7ff fdf4 	bl	bad1c <_ZN11RHSPIDriver7spiReadEh>
   bb134:	b240      	sxtb	r0, r0
   bb136:	2800      	cmp	r0, #0
   bb138:	bfb8      	it	lt
   bb13a:	3003      	addlt	r0, #3
   bb13c:	1080      	asrs	r0, r0, #2
   bb13e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bb142:	211a      	movs	r1, #26
   bb144:	4620      	mov	r0, r4
   bb146:	f7ff fde9 	bl	bad1c <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   bb14a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bb14e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   bb150:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bb152:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bb154:	bfa9      	itett	ge
   bb156:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   bb158:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bb15a:	b21b      	sxthge	r3, r3
   bb15c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   bb15e:	bfb2      	itee	lt
   bb160:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bb162:	220f      	movge	r2, #15
   bb164:	fb93 f3f2 	sdivge	r3, r3, r2
   bb168:	b21b      	sxth	r3, r3
   bb16a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   bb16c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   bb170:	b16b      	cbz	r3, bb18e <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   bb172:	8a23      	ldrh	r3, [r4, #16]
   bb174:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   bb176:	b21b      	sxth	r3, r3
   bb178:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   bb17a:	4620      	mov	r0, r4
   bb17c:	f7ff ff06 	bl	baf8c <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   bb180:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   bb184:	2b00      	cmp	r3, #0
   bb186:	d0ae      	beq.n	bb0e6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   bb188:	f7ff ff64 	bl	bb054 <_ZN7RH_RF9511setModeIdleEv>
   bb18c:	e7ab      	b.n	bb0e6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   bb18e:	8a23      	ldrh	r3, [r4, #16]
   bb190:	3ba4      	subs	r3, #164	; 0xa4
   bb192:	e7f0      	b.n	bb176 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   bb194:	8ae3      	ldrh	r3, [r4, #22]
   bb196:	3301      	adds	r3, #1
   bb198:	b29b      	uxth	r3, r3
   bb19a:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   bb19c:	4620      	mov	r0, r4
   bb19e:	e7f3      	b.n	bb188 <_ZN7RH_RF9515handleInterruptEv+0x110>

000bb1a0 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   bb1a0:	4b02      	ldr	r3, [pc, #8]	; (bb1ac <_ZN7RH_RF954isr0Ev+0xc>)
   bb1a2:	6818      	ldr	r0, [r3, #0]
   bb1a4:	b108      	cbz	r0, bb1aa <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   bb1a6:	f7ff bf67 	b.w	bb078 <_ZN7RH_RF9515handleInterruptEv>
}
   bb1aa:	4770      	bx	lr
   bb1ac:	2003e570 	.word	0x2003e570

000bb1b0 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   bb1b0:	4b02      	ldr	r3, [pc, #8]	; (bb1bc <_ZN7RH_RF954isr1Ev+0xc>)
   bb1b2:	6858      	ldr	r0, [r3, #4]
   bb1b4:	b108      	cbz	r0, bb1ba <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   bb1b6:	f7ff bf5f 	b.w	bb078 <_ZN7RH_RF9515handleInterruptEv>
}
   bb1ba:	4770      	bx	lr
   bb1bc:	2003e570 	.word	0x2003e570

000bb1c0 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   bb1c0:	4b02      	ldr	r3, [pc, #8]	; (bb1cc <_ZN7RH_RF954isr2Ev+0xc>)
   bb1c2:	6898      	ldr	r0, [r3, #8]
   bb1c4:	b108      	cbz	r0, bb1ca <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   bb1c6:	f7ff bf57 	b.w	bb078 <_ZN7RH_RF9515handleInterruptEv>
}
   bb1ca:	4770      	bx	lr
   bb1cc:	2003e570 	.word	0x2003e570

000bb1d0 <_ZN7RH_RF959setModeRxEv>:
{
   bb1d0:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   bb1d2:	7903      	ldrb	r3, [r0, #4]
   bb1d4:	2b04      	cmp	r3, #4
{
   bb1d6:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   bb1d8:	d010      	beq.n	bb1fc <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   bb1da:	6803      	ldr	r3, [r0, #0]
   bb1dc:	2104      	movs	r1, #4
   bb1de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bb1e2:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   bb1e4:	2205      	movs	r2, #5
   bb1e6:	2101      	movs	r1, #1
   bb1e8:	4620      	mov	r0, r4
   bb1ea:	f7ff fdb8 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   bb1ee:	2200      	movs	r2, #0
   bb1f0:	2140      	movs	r1, #64	; 0x40
   bb1f2:	4620      	mov	r0, r4
   bb1f4:	f7ff fdb3 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   bb1f8:	2304      	movs	r3, #4
   bb1fa:	7123      	strb	r3, [r4, #4]
}
   bb1fc:	bd10      	pop	{r4, pc}

000bb1fe <_ZN7RH_RF959availableEv>:
{
   bb1fe:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   bb200:	7903      	ldrb	r3, [r0, #4]
   bb202:	2b03      	cmp	r3, #3
{
   bb204:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   bb206:	d005      	beq.n	bb214 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   bb208:	f7ff ffe2 	bl	bb1d0 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   bb20c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   bb210:	b2c0      	uxtb	r0, r0
}
   bb212:	bd10      	pop	{r4, pc}
	return false;
   bb214:	2000      	movs	r0, #0
   bb216:	e7fc      	b.n	bb212 <_ZN7RH_RF959availableEv+0x14>

000bb218 <_ZN7RH_RF959setModeTxEv>:
{
   bb218:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   bb21a:	7903      	ldrb	r3, [r0, #4]
   bb21c:	2b03      	cmp	r3, #3
{
   bb21e:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   bb220:	d010      	beq.n	bb244 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   bb222:	6803      	ldr	r3, [r0, #0]
   bb224:	2103      	movs	r1, #3
   bb226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bb22a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   bb22c:	2203      	movs	r2, #3
   bb22e:	2101      	movs	r1, #1
   bb230:	4620      	mov	r0, r4
   bb232:	f7ff fd94 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   bb236:	2240      	movs	r2, #64	; 0x40
   bb238:	4611      	mov	r1, r2
   bb23a:	4620      	mov	r0, r4
   bb23c:	f7ff fd8f 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   bb240:	2303      	movs	r3, #3
   bb242:	7123      	strb	r3, [r4, #4]
}
   bb244:	bd10      	pop	{r4, pc}

000bb246 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bb246:	2afb      	cmp	r2, #251	; 0xfb
{
   bb248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb24a:	4604      	mov	r4, r0
   bb24c:	460f      	mov	r7, r1
   bb24e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bb250:	d902      	bls.n	bb258 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   bb252:	2600      	movs	r6, #0
}
   bb254:	4630      	mov	r0, r6
   bb256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   bb258:	6803      	ldr	r3, [r0, #0]
   bb25a:	6a1b      	ldr	r3, [r3, #32]
   bb25c:	4798      	blx	r3
    setModeIdle();
   bb25e:	4620      	mov	r0, r4
   bb260:	f7ff fef8 	bl	bb054 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   bb264:	6823      	ldr	r3, [r4, #0]
   bb266:	4620      	mov	r0, r4
   bb268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb26a:	4798      	blx	r3
   bb26c:	4606      	mov	r6, r0
   bb26e:	2800      	cmp	r0, #0
   bb270:	d0ef      	beq.n	bb252 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   bb272:	2200      	movs	r2, #0
   bb274:	210d      	movs	r1, #13
   bb276:	4620      	mov	r0, r4
   bb278:	f7ff fd71 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   bb27c:	7ae2      	ldrb	r2, [r4, #11]
   bb27e:	2100      	movs	r1, #0
   bb280:	4620      	mov	r0, r4
   bb282:	f7ff fd6c 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   bb286:	7b22      	ldrb	r2, [r4, #12]
   bb288:	2100      	movs	r1, #0
   bb28a:	4620      	mov	r0, r4
   bb28c:	f7ff fd67 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   bb290:	7b62      	ldrb	r2, [r4, #13]
   bb292:	2100      	movs	r1, #0
   bb294:	4620      	mov	r0, r4
   bb296:	f7ff fd62 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   bb29a:	7ba2      	ldrb	r2, [r4, #14]
   bb29c:	2100      	movs	r1, #0
   bb29e:	4620      	mov	r0, r4
   bb2a0:	f7ff fd5d 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   bb2a4:	462b      	mov	r3, r5
   bb2a6:	463a      	mov	r2, r7
   bb2a8:	2100      	movs	r1, #0
   bb2aa:	4620      	mov	r0, r4
   bb2ac:	f7ff fda5 	bl	badfa <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   bb2b0:	1d2a      	adds	r2, r5, #4
   bb2b2:	b2d2      	uxtb	r2, r2
   bb2b4:	2122      	movs	r1, #34	; 0x22
   bb2b6:	4620      	mov	r0, r4
   bb2b8:	f7ff fd51 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   bb2bc:	4620      	mov	r0, r4
   bb2be:	f7ff ffab 	bl	bb218 <_ZN7RH_RF959setModeTxEv>
    return true;
   bb2c2:	e7c7      	b.n	bb254 <_ZN7RH_RF954sendEPKhh+0xe>

000bb2c4 <_ZN7RH_RF9510setTxPowerEab>:
{
   bb2c4:	b510      	push	{r4, lr}
   bb2c6:	4604      	mov	r4, r0
    _useRFO = useRFO;
   bb2c8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   bb2cc:	b172      	cbz	r2, bb2ec <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   bb2ce:	f381 0204 	usat	r2, #4, r1
   bb2d2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   bb2d6:	b2d2      	uxtb	r2, r2
   bb2d8:	2109      	movs	r1, #9
   bb2da:	f7ff fd40 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bb2de:	4620      	mov	r0, r4
   bb2e0:	2204      	movs	r2, #4
}
   bb2e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bb2e6:	214d      	movs	r1, #77	; 0x4d
   bb2e8:	f7ff bd39 	b.w	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
}
   bb2ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bb2f0:	f7ff be0c 	b.w	baf0c <_ZN7RH_RF9510setTxPowerEab.part.0>

000bb2f4 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   bb2f4:	b538      	push	{r3, r4, r5, lr}
   bb2f6:	460c      	mov	r4, r1
   bb2f8:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   bb2fa:	780a      	ldrb	r2, [r1, #0]
   bb2fc:	211d      	movs	r1, #29
   bb2fe:	f7ff fd2e 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   bb302:	7862      	ldrb	r2, [r4, #1]
   bb304:	211e      	movs	r1, #30
   bb306:	4628      	mov	r0, r5
   bb308:	f7ff fd29 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bb30c:	78a2      	ldrb	r2, [r4, #2]
   bb30e:	4628      	mov	r0, r5
   bb310:	2126      	movs	r1, #38	; 0x26
}
   bb312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bb316:	f7ff bd22 	b.w	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
	...

000bb31c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bb31c:	2905      	cmp	r1, #5
{
   bb31e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bb320:	d80f      	bhi.n	bb342 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bb322:	4b09      	ldr	r3, [pc, #36]	; (bb348 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   bb324:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   bb328:	185c      	adds	r4, r3, r1
   bb32a:	5a5a      	ldrh	r2, [r3, r1]
   bb32c:	78a3      	ldrb	r3, [r4, #2]
   bb32e:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   bb332:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bb334:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   bb338:	f7ff ffdc 	bl	bb2f4 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   bb33c:	2001      	movs	r0, #1
}
   bb33e:	b002      	add	sp, #8
   bb340:	bd10      	pop	{r4, pc}
        return false;
   bb342:	2000      	movs	r0, #0
   bb344:	e7fb      	b.n	bb33e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   bb346:	bf00      	nop
   bb348:	000c2000 	.word	0x000c2000

000bb34c <_ZN7RH_RF9517setPreambleLengthEt>:
{
   bb34c:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bb34e:	0a0a      	lsrs	r2, r1, #8
{
   bb350:	4605      	mov	r5, r0
   bb352:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bb354:	2120      	movs	r1, #32
   bb356:	f7ff fd02 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bb35a:	b2e2      	uxtb	r2, r4
   bb35c:	4628      	mov	r0, r5
   bb35e:	2121      	movs	r1, #33	; 0x21
}
   bb360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bb364:	f7ff bcfb 	b.w	bad5e <_ZN11RHSPIDriver8spiWriteEhh>

000bb368 <_ZN7RH_RF954initEv>:
{
   bb368:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb36a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   bb36c:	f7ff fca6 	bl	bacbc <_ZN11RHSPIDriver4initEv>
   bb370:	4606      	mov	r6, r0
   bb372:	b918      	cbnz	r0, bb37c <_ZN7RH_RF954initEv+0x14>
	return false;
   bb374:	2600      	movs	r6, #0
}
   bb376:	4630      	mov	r0, r6
   bb378:	b002      	add	sp, #8
   bb37a:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   bb37c:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   bb380:	2dff      	cmp	r5, #255	; 0xff
   bb382:	d054      	beq.n	bb42e <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   bb384:	4629      	mov	r1, r5
   bb386:	4620      	mov	r0, r4
   bb388:	f7ff fd5f 	bl	bae4a <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   bb38c:	2280      	movs	r2, #128	; 0x80
   bb38e:	2101      	movs	r1, #1
   bb390:	4620      	mov	r0, r4
   bb392:	f7ff fce4 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   bb396:	200a      	movs	r0, #10
   bb398:	f001 f9b0 	bl	bc6fc <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   bb39c:	2101      	movs	r1, #1
   bb39e:	4620      	mov	r0, r4
   bb3a0:	f7ff fcbc 	bl	bad1c <_ZN11RHSPIDriver7spiReadEh>
   bb3a4:	2880      	cmp	r0, #128	; 0x80
   bb3a6:	d1e5      	bne.n	bb374 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   bb3a8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   bb3ac:	28ff      	cmp	r0, #255	; 0xff
   bb3ae:	d01c      	beq.n	bb3ea <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   bb3b0:	2100      	movs	r1, #0
   bb3b2:	f004 fa4b 	bl	bf84c <pinMode>
	if (_myInterruptIndex == 0xff)
   bb3b6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   bb3ba:	2bff      	cmp	r3, #255	; 0xff
   bb3bc:	d107      	bne.n	bb3ce <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   bb3be:	4a26      	ldr	r2, [pc, #152]	; (bb458 <_ZN7RH_RF954initEv+0xf0>)
   bb3c0:	7813      	ldrb	r3, [r2, #0]
   bb3c2:	2b03      	cmp	r3, #3
   bb3c4:	d8d6      	bhi.n	bb374 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   bb3c6:	1c59      	adds	r1, r3, #1
   bb3c8:	7011      	strb	r1, [r2, #0]
   bb3ca:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   bb3ce:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   bb3d2:	4b22      	ldr	r3, [pc, #136]	; (bb45c <_ZN7RH_RF954initEv+0xf4>)
   bb3d4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   bb3d8:	bb62      	cbnz	r2, bb434 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   bb3da:	4921      	ldr	r1, [pc, #132]	; (bb460 <_ZN7RH_RF954initEv+0xf8>)
   bb3dc:	9200      	str	r2, [sp, #0]
   bb3de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb3e2:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   bb3e4:	b2a8      	uxth	r0, r5
   bb3e6:	f001 ff0b 	bl	bd200 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   bb3ea:	2200      	movs	r2, #0
   bb3ec:	210e      	movs	r1, #14
   bb3ee:	4620      	mov	r0, r4
   bb3f0:	f7ff fcb5 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   bb3f4:	2200      	movs	r2, #0
   bb3f6:	210f      	movs	r1, #15
   bb3f8:	4620      	mov	r0, r4
   bb3fa:	f7ff fcb0 	bl	bad5e <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   bb3fe:	4620      	mov	r0, r4
   bb400:	f7ff fe28 	bl	bb054 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   bb404:	2100      	movs	r1, #0
   bb406:	4620      	mov	r0, r4
   bb408:	f7ff ff88 	bl	bb31c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   bb40c:	2108      	movs	r1, #8
   bb40e:	4620      	mov	r0, r4
   bb410:	f7ff ff9c 	bl	bb34c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   bb414:	ed9f 0a13 	vldr	s0, [pc, #76]	; bb464 <_ZN7RH_RF954initEv+0xfc>
   bb418:	4620      	mov	r0, r4
   bb41a:	f7ff fdd9 	bl	bafd0 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   bb41e:	2300      	movs	r3, #0
   bb420:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   bb424:	210d      	movs	r1, #13
   bb426:	4620      	mov	r0, r4
   bb428:	f7ff fd70 	bl	baf0c <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   bb42c:	e7a3      	b.n	bb376 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   bb42e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   bb432:	e7ab      	b.n	bb38c <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   bb434:	2a01      	cmp	r2, #1
   bb436:	f04f 0300 	mov.w	r3, #0
   bb43a:	d104      	bne.n	bb446 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   bb43c:	9300      	str	r3, [sp, #0]
   bb43e:	490a      	ldr	r1, [pc, #40]	; (bb468 <_ZN7RH_RF954initEv+0x100>)
   bb440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb444:	e7ce      	b.n	bb3e4 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   bb446:	2a02      	cmp	r2, #2
   bb448:	d194      	bne.n	bb374 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   bb44a:	9300      	str	r3, [sp, #0]
   bb44c:	4907      	ldr	r1, [pc, #28]	; (bb46c <_ZN7RH_RF954initEv+0x104>)
   bb44e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb452:	2201      	movs	r2, #1
   bb454:	e7c6      	b.n	bb3e4 <_ZN7RH_RF954initEv+0x7c>
   bb456:	bf00      	nop
   bb458:	2003e56d 	.word	0x2003e56d
   bb45c:	2003e570 	.word	0x2003e570
   bb460:	000bb1a1 	.word	0x000bb1a1
   bb464:	43d90000 	.word	0x43d90000
   bb468:	000bb1b1 	.word	0x000bb1b1
   bb46c:	000bb1c1 	.word	0x000bb1c1

000bb470 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   bb470:	2001      	movs	r0, #1
   bb472:	4770      	bx	lr

000bb474 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   bb474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb476:	4d1f      	ldr	r5, [pc, #124]	; (bb4f4 <_ZN14SequentialFileC1Ev+0x80>)
   bb478:	4b1f      	ldr	r3, [pc, #124]	; (bb4f8 <_ZN14SequentialFileC1Ev+0x84>)
   bb47a:	4604      	mov	r4, r0
   bb47c:	4629      	mov	r1, r5
   bb47e:	f840 3b04 	str.w	r3, [r0], #4
   bb482:	f003 fc7c 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
   bb486:	491d      	ldr	r1, [pc, #116]	; (bb4fc <_ZN14SequentialFileC1Ev+0x88>)
   bb488:	f104 0014 	add.w	r0, r4, #20
   bb48c:	f003 fc77 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
   bb490:	4629      	mov	r1, r5
   bb492:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bb496:	f003 fc72 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
   bb49a:	2300      	movs	r3, #0
   bb49c:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   bb4a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   bb4a4:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   bb4a8:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   bb4ac:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   bb4b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   bb4b4:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   bb4b6:	2308      	movs	r3, #8
   bb4b8:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb4ba:	2020      	movs	r0, #32
   bb4bc:	f7f8 fdeb 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bb4c0:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   bb4c2:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bb4c4:	3d01      	subs	r5, #1
   bb4c6:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   bb4c8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   bb4cc:	4606      	mov	r6, r0
   bb4ce:	f44f 7000 	mov.w	r0, #512	; 0x200
   bb4d2:	f7f8 fde0 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb4d6:	f500 7300 	add.w	r3, r0, #512	; 0x200
   bb4da:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   bb4de:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   bb4e2:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   bb4e4:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   bb4e6:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   bb4e8:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb4ea:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   bb4ec:	6667      	str	r7, [r4, #100]	; 0x64

}
   bb4ee:	4620      	mov	r0, r4
   bb4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb4f2:	bf00      	nop
   bb4f4:	000c2399 	.word	0x000c2399
   bb4f8:	000c219c 	.word	0x000c219c
   bb4fc:	000c209c 	.word	0x000c209c

000bb500 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bb500:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   bb502:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bb504:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   bb506:	4628      	mov	r0, r5
   bb508:	f003 fc97 	bl	bee3a <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   bb50c:	490e      	ldr	r1, [pc, #56]	; (bb548 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   bb50e:	4668      	mov	r0, sp
   bb510:	f003 fc35 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
   bb514:	4669      	mov	r1, sp
   bb516:	4628      	mov	r0, r5
   bb518:	f003 fd09 	bl	bef2e <_ZNK6String8endsWithERKS_>
   bb51c:	4606      	mov	r6, r0
   bb51e:	4668      	mov	r0, sp
   bb520:	f003 fbe2 	bl	bece8 <_ZN6StringD1Ev>
   bb524:	b16e      	cbz	r6, bb542 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   bb526:	68e3      	ldr	r3, [r4, #12]
   bb528:	2200      	movs	r2, #0
   bb52a:	3b01      	subs	r3, #1
   bb52c:	4629      	mov	r1, r5
   bb52e:	4668      	mov	r0, sp
   bb530:	f003 fd12 	bl	bef58 <_ZNK6String9substringEjj>
   bb534:	4669      	mov	r1, sp
   bb536:	4628      	mov	r0, r5
   bb538:	f003 fc77 	bl	bee2a <_ZN6StringaSEOS_>
   bb53c:	4668      	mov	r0, sp
   bb53e:	f003 fbd3 	bl	bece8 <_ZN6StringD1Ev>
    }
    return *this; 
};
   bb542:	4620      	mov	r0, r4
   bb544:	b004      	add	sp, #16
   bb546:	bd70      	pop	{r4, r5, r6, pc}
   bb548:	000c20a1 	.word	0x000c20a1

000bb54c <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   bb54c:	b510      	push	{r4, lr}
    if (!queueMutex) {
   bb54e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   bb550:	4604      	mov	r4, r0
    if (!queueMutex) {
   bb552:	b913      	cbnz	r3, bb55a <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   bb554:	303c      	adds	r0, #60	; 0x3c
   bb556:	f000 fc4d 	bl	bbdf4 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   bb55a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   bb55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   bb560:	f000 bc50 	b.w	bbe04 <os_mutex_lock>

000bb564 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   bb564:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   bb566:	f000 bc55 	b.w	bbe14 <os_mutex_unlock>
	...

000bb56c <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   bb56c:	b510      	push	{r4, lr}
   bb56e:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   bb570:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   bb572:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   bb574:	f000 fe06 	bl	bc184 <stat>
    if (result == 0) {
   bb578:	b9d0      	cbnz	r0, bb5b0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bb57a:	9b01      	ldr	r3, [sp, #4]
   bb57c:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   bb57e:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bb580:	d506      	bpl.n	bb590 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   bb582:	4915      	ldr	r1, [pc, #84]	; (bb5d8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   bb584:	4815      	ldr	r0, [pc, #84]	; (bb5dc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bb586:	f7f8 fdda 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        return true;
   bb58a:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   bb58c:	b016      	add	sp, #88	; 0x58
   bb58e:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   bb590:	4812      	ldr	r0, [pc, #72]	; (bb5dc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bb592:	4913      	ldr	r1, [pc, #76]	; (bb5e0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   bb594:	f7fb fc60 	bl	b6e58 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   bb598:	4620      	mov	r0, r4
   bb59a:	f005 f993 	bl	c08c4 <unlink>
    result = mkdir(path, 0777);
   bb59e:	f240 11ff 	movw	r1, #511	; 0x1ff
   bb5a2:	4620      	mov	r0, r4
   bb5a4:	f000 fdf6 	bl	bc194 <mkdir>
    if (result == 0) {
   bb5a8:	b980      	cbnz	r0, bb5cc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   bb5aa:	490e      	ldr	r1, [pc, #56]	; (bb5e4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   bb5ac:	4622      	mov	r2, r4
   bb5ae:	e7e9      	b.n	bb584 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   bb5b0:	f001 f86c 	bl	bc68c <__errno>
   bb5b4:	6803      	ldr	r3, [r0, #0]
   bb5b6:	2b02      	cmp	r3, #2
   bb5b8:	d0f1      	beq.n	bb59e <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   bb5ba:	f001 f867 	bl	bc68c <__errno>
   bb5be:	490a      	ldr	r1, [pc, #40]	; (bb5e8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   bb5c0:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   bb5c2:	4806      	ldr	r0, [pc, #24]	; (bb5dc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bb5c4:	f7fb fc48 	bl	b6e58 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bb5c8:	2000      	movs	r0, #0
   bb5ca:	e7df      	b.n	bb58c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   bb5cc:	f001 f85e 	bl	bc68c <__errno>
   bb5d0:	4906      	ldr	r1, [pc, #24]	; (bb5ec <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   bb5d2:	6802      	ldr	r2, [r0, #0]
   bb5d4:	e7f5      	b.n	bb5c2 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   bb5d6:	bf00      	nop
   bb5d8:	000c20ae 	.word	0x000c20ae
   bb5dc:	2003e57c 	.word	0x2003e57c
   bb5e0:	000c20cb 	.word	0x000c20cb
   bb5e4:	000c20fc 	.word	0x000c20fc
   bb5e8:	000c20e8 	.word	0x000c20e8
   bb5ec:	000c210b 	.word	0x000c210b

000bb5f0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   bb5f0:	b538      	push	{r3, r4, r5, lr}
   bb5f2:	4615      	mov	r5, r2
   bb5f4:	4604      	mov	r4, r0
    String result = name;
   bb5f6:	f003 fbc2 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   bb5fa:	b14d      	cbz	r5, bb610 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   bb5fc:	782b      	ldrb	r3, [r5, #0]
   bb5fe:	b13b      	cbz	r3, bb610 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   bb600:	4904      	ldr	r1, [pc, #16]	; (bb614 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   bb602:	4620      	mov	r0, r4
   bb604:	f003 fc42 	bl	bee8c <_ZN6String6concatEPKc>
   bb608:	4629      	mov	r1, r5
   bb60a:	4620      	mov	r0, r4
   bb60c:	f003 fc3e 	bl	bee8c <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   bb610:	4620      	mov	r0, r4
   bb612:	bd38      	pop	{r3, r4, r5, pc}
   bb614:	000c24a0 	.word	0x000c24a0

000bb618 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   bb618:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb61a:	4605      	mov	r5, r0
   bb61c:	460e      	mov	r6, r1
   bb61e:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   bb620:	6949      	ldr	r1, [r1, #20]
   bb622:	4668      	mov	r0, sp
   bb624:	f003 fcb8 	bl	bef98 <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   bb628:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   bb62a:	b904      	cbnz	r4, bb62e <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   bb62c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bb62e:	4622      	mov	r2, r4
   bb630:	4628      	mov	r0, r5
   bb632:	f7ff ffdd 	bl	bb5f0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   bb636:	4668      	mov	r0, sp
   bb638:	f003 fb56 	bl	bece8 <_ZN6StringD1Ev>
}
   bb63c:	4628      	mov	r0, r5
   bb63e:	b004      	add	sp, #16
   bb640:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb644 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bb644:	b570      	push	{r4, r5, r6, lr}
   bb646:	460c      	mov	r4, r1
   bb648:	b08e      	sub	sp, #56	; 0x38
    String result;
   bb64a:	491a      	ldr	r1, [pc, #104]	; (bb6b4 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bb64c:	e9cd 3200 	strd	r3, r2, [sp]
   bb650:	4605      	mov	r5, r0
    String result;
   bb652:	f003 fb94 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   bb656:	68e0      	ldr	r0, [r4, #12]
   bb658:	69e1      	ldr	r1, [r4, #28]
   bb65a:	4401      	add	r1, r0
   bb65c:	3104      	adds	r1, #4
   bb65e:	4628      	mov	r0, r5
   bb660:	f003 fb60 	bl	bed24 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   bb664:	1d21      	adds	r1, r4, #4
   bb666:	a806      	add	r0, sp, #24
   bb668:	f003 fbd4 	bl	bee14 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   bb66c:	4912      	ldr	r1, [pc, #72]	; (bb6b8 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   bb66e:	a802      	add	r0, sp, #8
   bb670:	f003 fb85 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
   bb674:	a902      	add	r1, sp, #8
   bb676:	a806      	add	r0, sp, #24
   bb678:	f003 fc26 	bl	beec8 <_ZplRK15StringSumHelperRK6String>
   bb67c:	e9dd 3200 	ldrd	r3, r2, [sp]
   bb680:	4606      	mov	r6, r0
   bb682:	4621      	mov	r1, r4
   bb684:	a80a      	add	r0, sp, #40	; 0x28
   bb686:	f7ff ffc7 	bl	bb618 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   bb68a:	a90a      	add	r1, sp, #40	; 0x28
   bb68c:	4630      	mov	r0, r6
   bb68e:	f003 fc1b 	bl	beec8 <_ZplRK15StringSumHelperRK6String>
   bb692:	4601      	mov	r1, r0
   bb694:	4628      	mov	r0, r5
   bb696:	f003 fbae 	bl	bedf6 <_ZN6StringaSERKS_>
   bb69a:	a80a      	add	r0, sp, #40	; 0x28
   bb69c:	f003 fb24 	bl	bece8 <_ZN6StringD1Ev>
   bb6a0:	a802      	add	r0, sp, #8
   bb6a2:	f003 fb21 	bl	bece8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bb6a6:	a806      	add	r0, sp, #24
   bb6a8:	f003 fb1e 	bl	bece8 <_ZN6StringD1Ev>
}
   bb6ac:	4628      	mov	r0, r5
   bb6ae:	b00e      	add	sp, #56	; 0x38
   bb6b0:	bd70      	pop	{r4, r5, r6, pc}
   bb6b2:	bf00      	nop
   bb6b4:	000c2399 	.word	0x000c2399
   bb6b8:	000c20a1 	.word	0x000c20a1

000bb6bc <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bb6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   bb6c0:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bb6c2:	b08e      	sub	sp, #56	; 0x38
   bb6c4:	4605      	mov	r5, r0
   bb6c6:	460f      	mov	r7, r1
    if (allExtensions) {
   bb6c8:	2a00      	cmp	r2, #0
   bb6ca:	d04a      	beq.n	bb762 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   bb6cc:	6840      	ldr	r0, [r0, #4]
   bb6ce:	f000 fd71 	bl	bc1b4 <opendir>
        if (dir) {
   bb6d2:	4606      	mov	r6, r0
   bb6d4:	2800      	cmp	r0, #0
   bb6d6:	d054      	beq.n	bb782 <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   bb6d8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; bb790 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   bb6dc:	f8df 90ac 	ldr.w	r9, [pc, #172]	; bb78c <_ZN14SequentialFile13removeFileNumEib+0xd0>
   bb6e0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; bb788 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   bb6e4:	4630      	mov	r0, r6
   bb6e6:	f000 fd6d 	bl	bc1c4 <readdir>
                if (!ent) {
   bb6ea:	2800      	cmp	r0, #0
   bb6ec:	d033      	beq.n	bb756 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   bb6ee:	7a82      	ldrb	r2, [r0, #10]
   bb6f0:	2a08      	cmp	r2, #8
   bb6f2:	d1f7      	bne.n	bb6e4 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   bb6f4:	f100 040b 	add.w	r4, r0, #11
   bb6f8:	6969      	ldr	r1, [r5, #20]
   bb6fa:	aa01      	add	r2, sp, #4
   bb6fc:	4620      	mov	r0, r4
   bb6fe:	f000 ff9d 	bl	bc63c <sscanf>
   bb702:	2801      	cmp	r0, #1
   bb704:	d1ee      	bne.n	bb6e4 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   bb706:	9b01      	ldr	r3, [sp, #4]
   bb708:	42bb      	cmp	r3, r7
   bb70a:	d1eb      	bne.n	bb6e4 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   bb70c:	1d29      	adds	r1, r5, #4
   bb70e:	a80a      	add	r0, sp, #40	; 0x28
   bb710:	f003 fb80 	bl	bee14 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   bb714:	4651      	mov	r1, sl
   bb716:	a806      	add	r0, sp, #24
   bb718:	f003 fb31 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
   bb71c:	a906      	add	r1, sp, #24
   bb71e:	a80a      	add	r0, sp, #40	; 0x28
   bb720:	f003 fbd2 	bl	beec8 <_ZplRK15StringSumHelperRK6String>
   bb724:	4621      	mov	r1, r4
   bb726:	f003 fbdb 	bl	beee0 <_ZplRK15StringSumHelperPKc>
   bb72a:	4601      	mov	r1, r0
   bb72c:	a802      	add	r0, sp, #8
   bb72e:	f003 fb71 	bl	bee14 <_ZN6StringC1ERKS_>
   bb732:	a806      	add	r0, sp, #24
   bb734:	f003 fad8 	bl	bece8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bb738:	a80a      	add	r0, sp, #40	; 0x28
   bb73a:	f003 fad5 	bl	bece8 <_ZN6StringD1Ev>
                        unlink(path);
   bb73e:	9802      	ldr	r0, [sp, #8]
   bb740:	f005 f8c0 	bl	c08c4 <unlink>
                        _log.trace("removed %s", path.c_str());
   bb744:	4640      	mov	r0, r8
   bb746:	9a02      	ldr	r2, [sp, #8]
   bb748:	4649      	mov	r1, r9
   bb74a:	f7fb fb93 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   bb74e:	a802      	add	r0, sp, #8
   bb750:	f003 faca 	bl	bece8 <_ZN6StringD1Ev>
                    continue;
   bb754:	e7c6      	b.n	bb6e4 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   bb756:	4630      	mov	r0, r6
}
   bb758:	b00e      	add	sp, #56	; 0x38
   bb75a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   bb75e:	f000 bd39 	b.w	bc1d4 <closedir>
        String path = getPathForFileNum(fileNum); 
   bb762:	460a      	mov	r2, r1
   bb764:	4601      	mov	r1, r0
   bb766:	a80a      	add	r0, sp, #40	; 0x28
   bb768:	f7ff ff6c 	bl	bb644 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   bb76c:	980a      	ldr	r0, [sp, #40]	; 0x28
   bb76e:	f005 f8a9 	bl	c08c4 <unlink>
        _log.trace("removed %s", path.c_str());
   bb772:	4805      	ldr	r0, [pc, #20]	; (bb788 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   bb774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bb776:	4905      	ldr	r1, [pc, #20]	; (bb78c <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   bb778:	f7fb fb7c 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   bb77c:	a80a      	add	r0, sp, #40	; 0x28
   bb77e:	f003 fab3 	bl	bece8 <_ZN6StringD1Ev>
}
   bb782:	b00e      	add	sp, #56	; 0x38
   bb784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb788:	2003e57c 	.word	0x2003e57c
   bb78c:	000c20a3 	.word	0x000c20a3
   bb790:	000c20a1 	.word	0x000c20a1

000bb794 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   bb794:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   bb796:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   bb798:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   bb79a:	b183      	cbz	r3, bb7be <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   bb79c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   bb79e:	6945      	ldr	r5, [r0, #20]
   bb7a0:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   bb7a2:	42ae      	cmp	r6, r5
   bb7a4:	d906      	bls.n	bb7b4 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   bb7a6:	f855 0b04 	ldr.w	r0, [r5], #4
   bb7aa:	f44f 7100 	mov.w	r1, #512	; 0x200
   bb7ae:	f7f8 fc76 	bl	b409e <_ZdlPvj>
   bb7b2:	e7f6      	b.n	bb7a2 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   bb7b4:	6861      	ldr	r1, [r4, #4]
   bb7b6:	6820      	ldr	r0, [r4, #0]
   bb7b8:	0089      	lsls	r1, r1, #2
   bb7ba:	f7f8 fc70 	bl	b409e <_ZdlPvj>
    }
   bb7be:	4620      	mov	r0, r4
   bb7c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb7c4 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   bb7c4:	b510      	push	{r4, lr}
   bb7c6:	4b09      	ldr	r3, [pc, #36]	; (bb7ec <_ZN14SequentialFileD1Ev+0x28>)
   bb7c8:	4604      	mov	r4, r0
   bb7ca:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   bb7ce:	f7ff ffe1 	bl	bb794 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   bb7d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bb7d6:	f003 fa87 	bl	bece8 <_ZN6StringD1Ev>
   bb7da:	f104 0014 	add.w	r0, r4, #20
   bb7de:	f003 fa83 	bl	bece8 <_ZN6StringD1Ev>
   bb7e2:	1d20      	adds	r0, r4, #4
   bb7e4:	f003 fa80 	bl	bece8 <_ZN6StringD1Ev>
}
   bb7e8:	4620      	mov	r0, r4
   bb7ea:	bd10      	pop	{r4, pc}
   bb7ec:	000c219c 	.word	0x000c219c

000bb7f0 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   bb7f0:	b510      	push	{r4, lr}
   bb7f2:	4604      	mov	r4, r0
}
   bb7f4:	f7ff ffe6 	bl	bb7c4 <_ZN14SequentialFileD1Ev>
   bb7f8:	4620      	mov	r0, r4
   bb7fa:	2168      	movs	r1, #104	; 0x68
   bb7fc:	f7f8 fc4f 	bl	b409e <_ZdlPvj>
   bb800:	4620      	mov	r0, r4
   bb802:	bd10      	pop	{r4, pc}

000bb804 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   bb804:	68c3      	ldr	r3, [r0, #12]
   bb806:	68ca      	ldr	r2, [r1, #12]
   bb808:	1a9b      	subs	r3, r3, r2
   bb80a:	109b      	asrs	r3, r3, #2
   bb80c:	1e5a      	subs	r2, r3, #1
   bb80e:	e9d0 3000 	ldrd	r3, r0, [r0]
   bb812:	1a1b      	subs	r3, r3, r0
   bb814:	109b      	asrs	r3, r3, #2
   bb816:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   bb81a:	6888      	ldr	r0, [r1, #8]
   bb81c:	680a      	ldr	r2, [r1, #0]
   bb81e:	1a80      	subs	r0, r0, r2
      }
   bb820:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   bb824:	4770      	bx	lr
	...

000bb828 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   bb828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   bb82c:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   bb82e:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   bb830:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   bb832:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   bb834:	4604      	mov	r4, r0
   bb836:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   bb838:	d007      	beq.n	bb84a <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bb83a:	b10b      	cbz	r3, bb840 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   bb83c:	680a      	ldr	r2, [r1, #0]
   bb83e:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   bb840:	69a3      	ldr	r3, [r4, #24]
   bb842:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   bb844:	61a3      	str	r3, [r4, #24]
      }
   bb846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bb84a:	f100 0108 	add.w	r1, r0, #8
   bb84e:	3018      	adds	r0, #24
   bb850:	f7ff ffd8 	bl	bb804 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   bb854:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   bb858:	4298      	cmp	r0, r3
   bb85a:	d102      	bne.n	bb862 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   bb85c:	4838      	ldr	r0, [pc, #224]	; (bb940 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   bb85e:	f004 f90e 	bl	bfa7e <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bb862:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bb864:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bb866:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bb868:	1a11      	subs	r1, r2, r0
   bb86a:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bb86e:	2901      	cmp	r1, #1
   bb870:	d825      	bhi.n	bb8be <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   bb872:	6961      	ldr	r1, [r4, #20]
   bb874:	eba2 0801 	sub.w	r8, r2, r1
   bb878:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   bb87c:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   bb87e:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   bb882:	d936      	bls.n	bb8f2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   bb884:	1b5d      	subs	r5, r3, r5
   bb886:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   bb888:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   bb88c:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   bb88e:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   bb890:	eba3 0201 	sub.w	r2, r3, r1
   bb894:	d926      	bls.n	bb8e4 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   bb896:	428b      	cmp	r3, r1
   bb898:	d002      	beq.n	bb8a0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bb89a:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bb89c:	f004 fe0a 	bl	c04b4 <memmove>
	_M_node = __new_node;
   bb8a0:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   bb8a2:	682b      	ldr	r3, [r5, #0]
   bb8a4:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb8a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bb8aa:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   bb8ac:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   bb8b0:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bb8b2:	f855 3008 	ldr.w	r3, [r5, r8]
   bb8b6:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb8b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bb8bc:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb8be:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   bb8c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
   bb8c4:	f7f8 fbe7 	bl	b4096 <_Znwj>
   bb8c8:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   bb8ca:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bb8cc:	b10b      	cbz	r3, bb8d2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   bb8ce:	683a      	ldr	r2, [r7, #0]
   bb8d0:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   bb8d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb8d4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bb8d6:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bb8d8:	685b      	ldr	r3, [r3, #4]
   bb8da:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb8dc:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bb8e0:	6222      	str	r2, [r4, #32]
   bb8e2:	e7af      	b.n	bb844 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   bb8e4:	428b      	cmp	r3, r1
   bb8e6:	d0db      	beq.n	bb8a0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bb8e8:	f108 0004 	add.w	r0, r8, #4
   bb8ec:	1a80      	subs	r0, r0, r2
   bb8ee:	4428      	add	r0, r5
   bb8f0:	e7d4      	b.n	bb89c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   bb8f2:	f103 0902 	add.w	r9, r3, #2
   bb8f6:	2b01      	cmp	r3, #1
   bb8f8:	bf2c      	ite	cs
   bb8fa:	4499      	addcs	r9, r3
   bb8fc:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   bb900:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   bb904:	d301      	bcc.n	bb90a <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   bb906:	f004 f8b7 	bl	bfa78 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb90a:	ea4f 0089 	mov.w	r0, r9, lsl #2
   bb90e:	f7f8 fbc2 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   bb912:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bb914:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bb916:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   bb91a:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bb91c:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   bb91e:	4291      	cmp	r1, r2
   bb920:	4682      	mov	sl, r0
   bb922:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   bb926:	d003      	beq.n	bb930 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bb928:	1a52      	subs	r2, r2, r1
   bb92a:	4628      	mov	r0, r5
   bb92c:	f004 fdc2 	bl	c04b4 <memmove>
	::operator delete(__p
   bb930:	6861      	ldr	r1, [r4, #4]
   bb932:	6820      	ldr	r0, [r4, #0]
   bb934:	0089      	lsls	r1, r1, #2
   bb936:	f7f8 fbb2 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   bb93a:	e9c4 a900 	strd	sl, r9, [r4]
   bb93e:	e7af      	b.n	bb8a0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   bb940:	000c1d25 	.word	0x000c1d25

000bb944 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   bb944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   bb948:	68c3      	ldr	r3, [r0, #12]
   bb94a:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   bb94c:	b086      	sub	sp, #24
   bb94e:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   bb950:	d808      	bhi.n	bb964 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   bb952:	4934      	ldr	r1, [pc, #208]	; (bba24 <_ZN14SequentialFile7scanDirEv+0xe0>)
   bb954:	4834      	ldr	r0, [pc, #208]	; (bba28 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bb956:	f7fb fa7f 	bl	b6e58 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bb95a:	2600      	movs	r6, #0
}
   bb95c:	4630      	mov	r0, r6
   bb95e:	b006      	add	sp, #24
   bb960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   bb964:	6840      	ldr	r0, [r0, #4]
   bb966:	f7ff fe01 	bl	bb56c <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   bb96a:	4606      	mov	r6, r0
   bb96c:	2800      	cmp	r0, #0
   bb96e:	d0f4      	beq.n	bb95a <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   bb970:	6963      	ldr	r3, [r4, #20]
   bb972:	6862      	ldr	r2, [r4, #4]
   bb974:	492d      	ldr	r1, [pc, #180]	; (bba2c <_ZN14SequentialFile7scanDirEv+0xe8>)
   bb976:	482c      	ldr	r0, [pc, #176]	; (bba28 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bb978:	f7fb fa7c 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   bb97c:	6860      	ldr	r0, [r4, #4]
   bb97e:	f000 fc19 	bl	bc1b4 <opendir>
    if (!dir) {
   bb982:	4607      	mov	r7, r0
   bb984:	2800      	cmp	r0, #0
   bb986:	d0e8      	beq.n	bb95a <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   bb988:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bb98a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bba30 <_ZN14SequentialFile7scanDirEv+0xec>
   bb98e:	f8df 8098 	ldr.w	r8, [pc, #152]	; bba28 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   bb992:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   bb994:	4638      	mov	r0, r7
   bb996:	f000 fc15 	bl	bc1c4 <readdir>
        if (!ent) {
   bb99a:	4605      	mov	r5, r0
   bb99c:	2800      	cmp	r0, #0
   bb99e:	d039      	beq.n	bba14 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   bb9a0:	7a83      	ldrb	r3, [r0, #10]
   bb9a2:	2b08      	cmp	r3, #8
   bb9a4:	d1f6      	bne.n	bb994 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   bb9a6:	350b      	adds	r5, #11
   bb9a8:	6961      	ldr	r1, [r4, #20]
   bb9aa:	aa01      	add	r2, sp, #4
   bb9ac:	4628      	mov	r0, r5
   bb9ae:	f000 fe45 	bl	bc63c <sscanf>
   bb9b2:	2801      	cmp	r0, #1
   bb9b4:	d1ee      	bne.n	bb994 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   bb9b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bb9b8:	b17b      	cbz	r3, bb9da <_ZN14SequentialFile7scanDirEv+0x96>
   bb9ba:	4629      	mov	r1, r5
   bb9bc:	a802      	add	r0, sp, #8
   bb9be:	f003 f9de 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
   bb9c2:	f104 0124 	add.w	r1, r4, #36	; 0x24
   bb9c6:	a802      	add	r0, sp, #8
   bb9c8:	f003 fab1 	bl	bef2e <_ZNK6String8endsWithERKS_>
   bb9cc:	4682      	mov	sl, r0
   bb9ce:	a802      	add	r0, sp, #8
   bb9d0:	f003 f98a 	bl	bece8 <_ZN6StringD1Ev>
   bb9d4:	f1ba 0f00 	cmp.w	sl, #0
   bb9d8:	d0dc      	beq.n	bb994 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   bb9da:	6823      	ldr	r3, [r4, #0]
   bb9dc:	4629      	mov	r1, r5
   bb9de:	689b      	ldr	r3, [r3, #8]
   bb9e0:	4620      	mov	r0, r4
   bb9e2:	4798      	blx	r3
   bb9e4:	2800      	cmp	r0, #0
   bb9e6:	d0d5      	beq.n	bb994 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   bb9e8:	9a01      	ldr	r2, [sp, #4]
   bb9ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bb9ec:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   bb9ee:	bfb8      	it	lt
   bb9f0:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bb9f2:	462b      	mov	r3, r5
   bb9f4:	4649      	mov	r1, r9
   bb9f6:	4640      	mov	r0, r8
   bb9f8:	f7fb fa3c 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   bb9fc:	4620      	mov	r0, r4
   bb9fe:	f7ff fda5 	bl	bb54c <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   bba02:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bba06:	a901      	add	r1, sp, #4
   bba08:	f7ff ff0e 	bl	bb828 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   bba0c:	4620      	mov	r0, r4
   bba0e:	f7ff fda9 	bl	bb564 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   bba12:	e7bf      	b.n	bb994 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   bba14:	4638      	mov	r0, r7
   bba16:	f000 fbdd 	bl	bc1d4 <closedir>
    scanDirCompleted = true;
   bba1a:	2301      	movs	r3, #1
   bba1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   bba20:	e79c      	b.n	bb95c <_ZN14SequentialFile7scanDirEv+0x18>
   bba22:	bf00      	nop
   bba24:	000c2121 	.word	0x000c2121
   bba28:	2003e57c 	.word	0x2003e57c
   bba2c:	000c2136 	.word	0x000c2136
   bba30:	000c2152 	.word	0x000c2152

000bba34 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   bba34:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   bba36:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   bba3a:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bba3c:	b90b      	cbnz	r3, bba42 <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   bba3e:	f7ff ff81 	bl	bb944 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   bba42:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   bba44:	3001      	adds	r0, #1
   bba46:	63a0      	str	r0, [r4, #56]	; 0x38
}
   bba48:	bd10      	pop	{r4, pc}
	...

000bba4c <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   bba4c:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   bba4e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   bba52:	4604      	mov	r4, r0
   bba54:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   bba56:	b90b      	cbnz	r3, bba5c <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   bba58:	f7ff ff74 	bl	bb944 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   bba5c:	4620      	mov	r0, r4
   bba5e:	f7ff fd75 	bl	bb54c <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   bba62:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   bba64:	6da2      	ldr	r2, [r4, #88]	; 0x58
   bba66:	429a      	cmp	r2, r3
   bba68:	d020      	beq.n	bbaac <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   bba6a:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   bba6e:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   bba70:	b126      	cbz	r6, bba7c <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   bba72:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   bba74:	4293      	cmp	r3, r2
   bba76:	d00c      	beq.n	bba92 <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   bba78:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   bba7a:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   bba7c:	4620      	mov	r0, r4
   bba7e:	f7ff fd71 	bl	bb564 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   bba82:	b125      	cbz	r5, bba8e <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   bba84:	490a      	ldr	r1, [pc, #40]	; (bbab0 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   bba86:	480b      	ldr	r0, [pc, #44]	; (bbab4 <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   bba88:	462a      	mov	r2, r5
   bba8a:	f7fb f9f3 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
}
   bba8e:	4628      	mov	r0, r5
   bba90:	bd70      	pop	{r4, r5, r6, pc}
   bba92:	f44f 7100 	mov.w	r1, #512	; 0x200
   bba96:	f7f8 fb02 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   bba9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bba9c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bba9e:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   bbaa0:	685b      	ldr	r3, [r3, #4]
   bbaa2:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   bbaa4:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bbaa8:	6522      	str	r2, [r4, #80]	; 0x50
   bbaaa:	e7e6      	b.n	bba7a <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   bbaac:	2500      	movs	r5, #0
   bbaae:	e7e5      	b.n	bba7c <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   bbab0:	000c2168 	.word	0x000c2168
   bbab4:	2003e57c 	.word	0x2003e57c

000bbab8 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   bbab8:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   bbaba:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   bbabe:	9101      	str	r1, [sp, #4]
   bbac0:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bbac2:	b90b      	cbnz	r3, bbac8 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   bbac4:	f7ff ff3e 	bl	bb944 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   bbac8:	9b01      	ldr	r3, [sp, #4]
   bbaca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   bbacc:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   bbace:	bfb8      	it	lt
   bbad0:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   bbad2:	4620      	mov	r0, r4
   bbad4:	f7ff fd3a 	bl	bb54c <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   bbad8:	a901      	add	r1, sp, #4
   bbada:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bbade:	f7ff fea3 	bl	bb828 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   bbae2:	4620      	mov	r0, r4
   bbae4:	f7ff fd3e 	bl	bb564 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bbae8:	b002      	add	sp, #8
   bbaea:	bd10      	pop	{r4, pc}

000bbaec <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   bbaec:	b538      	push	{r3, r4, r5, lr}
   bbaee:	4604      	mov	r4, r0
    queueMutexLock();
   bbaf0:	f7ff fd2c 	bl	bb54c <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bbaf4:	f104 0148 	add.w	r1, r4, #72	; 0x48
   bbaf8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   bbafc:	f7ff fe82 	bl	bb804 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   bbb00:	4605      	mov	r5, r0
    queueMutexUnlock();
   bbb02:	4620      	mov	r0, r4
   bbb04:	f7ff fd2e 	bl	bb564 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bbb08:	4628      	mov	r0, r5
   bbb0a:	bd38      	pop	{r3, r4, r5, pc}

000bbb0c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   bbb0c:	4b01      	ldr	r3, [pc, #4]	; (bbb14 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   bbb0e:	4a02      	ldr	r2, [pc, #8]	; (bbb18 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   bbb10:	601a      	str	r2, [r3, #0]
}
   bbb12:	4770      	bx	lr
   bbb14:	2003e57c 	.word	0x2003e57c
   bbb18:	000c2185 	.word	0x000c2185

000bbb1c <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   bbb1c:	4770      	bx	lr

000bbb1e <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   bbb1e:	6803      	ldr	r3, [r0, #0]
   bbb20:	685b      	ldr	r3, [r3, #4]
   bbb22:	4718      	bx	r3

000bbb24 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bbb24:	b510      	push	{r4, lr}
    if (lastUpdate) {
   bbb26:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bbb28:	4604      	mov	r4, r0
    if (lastUpdate) {
   bbb2a:	b133      	cbz	r3, bbb3a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bbb2c:	b131      	cbz	r1, bbb3c <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   bbb2e:	6823      	ldr	r3, [r4, #0]
   bbb30:	4620      	mov	r0, r4
   bbb32:	689b      	ldr	r3, [r3, #8]
   bbb34:	4798      	blx	r3
            lastUpdate = 0;
   bbb36:	2300      	movs	r3, #0
   bbb38:	61a3      	str	r3, [r4, #24]
        }
    }
}
   bbb3a:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bbb3c:	f000 f9c2 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bbb40:	69a3      	ldr	r3, [r4, #24]
   bbb42:	1ac0      	subs	r0, r0, r3
   bbb44:	69e3      	ldr	r3, [r4, #28]
   bbb46:	4298      	cmp	r0, r3
   bbb48:	d2f1      	bcs.n	bbb2e <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   bbb4a:	e7f6      	b.n	bbb3a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000bbb4c <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bbb4c:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   bbb4e:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bbb50:	4604      	mov	r4, r0
    if (saveDelayMs) {
   bbb52:	b11b      	cbz	r3, bbb5c <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   bbb54:	f000 f9b6 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   bbb58:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   bbb5a:	bd10      	pop	{r4, pc}
        save();
   bbb5c:	6803      	ldr	r3, [r0, #0]
}
   bbb5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   bbb62:	689b      	ldr	r3, [r3, #8]
   bbb64:	4718      	bx	r3

000bbb66 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   bbb66:	f000 b975 	b.w	bbe54 <os_mutex_recursive_unlock>

000bbb6a <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   bbb6a:	b510      	push	{r4, lr}
   bbb6c:	4604      	mov	r4, r0
   bbb6e:	3004      	adds	r0, #4
   bbb70:	f7fa f844 	bl	b5bfc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   bbb74:	6823      	ldr	r3, [r4, #0]
   bbb76:	68e1      	ldr	r1, [r4, #12]
   bbb78:	695b      	ldr	r3, [r3, #20]
   bbb7a:	4620      	mov	r0, r4
   bbb7c:	4798      	blx	r3
   bbb7e:	b918      	cbnz	r0, bbb88 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   bbb80:	6823      	ldr	r3, [r4, #0]
   bbb82:	4620      	mov	r0, r4
   bbb84:	699b      	ldr	r3, [r3, #24]
   bbb86:	4798      	blx	r3
      { _M_device.unlock(); }
   bbb88:	6860      	ldr	r0, [r4, #4]
   bbb8a:	f7ff ffec 	bl	bbb66 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bbb8e:	2001      	movs	r0, #1
   bbb90:	bd10      	pop	{r4, pc}

000bbb92 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>:



bool StorageHelperRK::PersistentDataBase::getValueString(size_t offset, size_t size, String &value) const {
   bbb92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbb94:	4605      	mov	r5, r0
      { _M_device.lock(); }
   bbb96:	3004      	adds	r0, #4
   bbb98:	4614      	mov	r4, r2
   bbb9a:	460e      	mov	r6, r1
   bbb9c:	461f      	mov	r7, r3
   bbb9e:	f7fa f82d 	bl	b5bfc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
    bool result = false;

    WITH_LOCK(*this) {
        if (offset <= (savedDataSize - (size - 1))) {
   bbba2:	68ea      	ldr	r2, [r5, #12]
   bbba4:	f1c4 0401 	rsb	r4, r4, #1
   bbba8:	4414      	add	r4, r2
   bbbaa:	42b4      	cmp	r4, r6
   bbbac:	d30a      	bcc.n	bbbc4 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x32>
            const char *p = (const char *)savedDataHeader;
   bbbae:	68a9      	ldr	r1, [r5, #8]
            p += offset;
            value = p; // copies string
   bbbb0:	4638      	mov	r0, r7
   bbbb2:	4431      	add	r1, r6
   bbbb4:	f003 f941 	bl	bee3a <_ZN6StringaSEPKc>
            result = true;
   bbbb8:	2401      	movs	r4, #1
      { _M_device.unlock(); }
   bbbba:	6868      	ldr	r0, [r5, #4]
   bbbbc:	f7ff ffd3 	bl	bbb66 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
        }
    }
    return result;
}
   bbbc0:	4620      	mov	r0, r4
   bbbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool result = false;
   bbbc4:	2400      	movs	r4, #0
   bbbc6:	e7f8      	b.n	bbbba <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x28>

000bbbc8 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   bbbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbbca:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   bbbce:	4f18      	ldr	r7, [pc, #96]	; (bbc30 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   bbbd0:	4e18      	ldr	r6, [pc, #96]	; (bbc34 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   bbbd2:	4d19      	ldr	r5, [pc, #100]	; (bbc38 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   bbbd4:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   bbbd6:	42a0      	cmp	r0, r4
   bbbd8:	d00c      	beq.n	bbbf4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   bbbda:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   bbbde:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   bbbe0:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   bbbe4:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   bbbe6:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   bbbe8:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   bbbec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   bbbf0:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   bbbf2:	e7f0      	b.n	bbbd6 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   bbbf4:	f001 0403 	and.w	r4, r1, #3
   bbbf8:	4404      	add	r4, r0
    k = 0;
   bbbfa:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   bbbfc:	42a0      	cmp	r0, r4
   bbbfe:	d004      	beq.n	bbc0a <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   bbc00:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   bbc04:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   bbc08:	e7f8      	b.n	bbbfc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   bbc0a:	4809      	ldr	r0, [pc, #36]	; (bbc30 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   bbc0c:	4343      	muls	r3, r0
        k *= 0x1b873593;
   bbc0e:	4809      	ldr	r0, [pc, #36]	; (bbc34 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   bbc10:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   bbc14:	404a      	eors	r2, r1
        k *= 0x1b873593;
   bbc16:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   bbc18:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   bbc1a:	4b08      	ldr	r3, [pc, #32]	; (bbc3c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   bbc1c:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   bbc20:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   bbc22:	4b07      	ldr	r3, [pc, #28]	; (bbc40 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   bbc24:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   bbc28:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   bbc2a:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   bbc2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bbc30:	cc9e2d51 	.word	0xcc9e2d51
   bbc34:	1b873593 	.word	0x1b873593
   bbc38:	e6546b64 	.word	0xe6546b64
   bbc3c:	85ebca6b 	.word	0x85ebca6b
   bbc40:	c2b2ae35 	.word	0xc2b2ae35

000bbc44 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   bbc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbc46:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bbc48:	3004      	adds	r0, #4
   bbc4a:	f7f9 ffd7 	bl	b5bfc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   bbc4e:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   bbc50:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   bbc52:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   bbc54:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bbc56:	68a6      	ldr	r6, [r4, #8]
   bbc58:	4a05      	ldr	r2, [pc, #20]	; (bbc70 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   bbc5a:	88f1      	ldrh	r1, [r6, #6]
   bbc5c:	4630      	mov	r0, r6
   bbc5e:	f7ff ffb3 	bl	bbbc8 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   bbc62:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bbc64:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   bbc66:	6860      	ldr	r0, [r4, #4]
   bbc68:	f7ff ff7d 	bl	bbb66 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bbc6c:	4628      	mov	r0, r5
   bbc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bbc70:	851c2a3f 	.word	0x851c2a3f

000bbc74 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   bbc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbc78:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bbc7a:	3004      	adds	r0, #4
   bbc7c:	4690      	mov	r8, r2
   bbc7e:	460d      	mov	r5, r1
   bbc80:	461f      	mov	r7, r3
   bbc82:	f7f9 ffbb 	bl	b5bfc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   bbc86:	68e2      	ldr	r2, [r4, #12]
   bbc88:	f1c8 0301 	rsb	r3, r8, #1
   bbc8c:	4413      	add	r3, r2
   bbc8e:	42ab      	cmp	r3, r5
   bbc90:	d31f      	bcc.n	bbcd2 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
   bbc92:	4638      	mov	r0, r7
   bbc94:	f004 fce3 	bl	c065e <strlen>
   bbc98:	4540      	cmp	r0, r8
   bbc9a:	d21a      	bcs.n	bbcd2 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
            char *p = (char *)savedDataHeader;
   bbc9c:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   bbc9e:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   bbca0:	4629      	mov	r1, r5
   bbca2:	4638      	mov	r0, r7
   bbca4:	f004 fcab 	bl	c05fe <strcmp>
   bbca8:	b188      	cbz	r0, bbcce <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5a>
                memset(p, 0, size);
   bbcaa:	4642      	mov	r2, r8
   bbcac:	2100      	movs	r1, #0
   bbcae:	4628      	mov	r0, r5
   bbcb0:	f004 fc1a 	bl	c04e8 <memset>
                strcpy(p, value);
   bbcb4:	4639      	mov	r1, r7
   bbcb6:	4628      	mov	r0, r5
   bbcb8:	f004 fcab 	bl	c0612 <strcpy>
                savedDataHeader->hash = getHash();
   bbcbc:	4620      	mov	r0, r4
   bbcbe:	68a5      	ldr	r5, [r4, #8]
   bbcc0:	f7ff ffc0 	bl	bbc44 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bbcc4:	60a8      	str	r0, [r5, #8]
                saveOrDefer();
   bbcc6:	6823      	ldr	r3, [r4, #0]
   bbcc8:	4620      	mov	r0, r4
   bbcca:	691b      	ldr	r3, [r3, #16]
   bbccc:	4798      	blx	r3
            result = true;
   bbcce:	2501      	movs	r5, #1
   bbcd0:	e000      	b.n	bbcd4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x60>
    bool result = false;
   bbcd2:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   bbcd4:	6860      	ldr	r0, [r4, #4]
   bbcd6:	f7ff ff46 	bl	bbb66 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bbcda:	4628      	mov	r0, r5
   bbcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbce0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   bbce0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbce2:	460d      	mov	r5, r1
   bbce4:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   bbce6:	f7ff ffad 	bl	bbc44 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   bbcea:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   bbcec:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   bbcee:	d923      	bls.n	bbd38 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   bbcf0:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   bbcf2:	6922      	ldr	r2, [r4, #16]
   bbcf4:	6819      	ldr	r1, [r3, #0]
   bbcf6:	4291      	cmp	r1, r2
   bbcf8:	d11f      	bne.n	bbd3a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   bbcfa:	8899      	ldrh	r1, [r3, #4]
   bbcfc:	8aa2      	ldrh	r2, [r4, #20]
   bbcfe:	4291      	cmp	r1, r2
   bbd00:	d11b      	bne.n	bbd3a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   bbd02:	88d9      	ldrh	r1, [r3, #6]
   bbd04:	b2aa      	uxth	r2, r5
   bbd06:	4291      	cmp	r1, r2
   bbd08:	d817      	bhi.n	bbd3a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   bbd0a:	689a      	ldr	r2, [r3, #8]
   bbd0c:	4282      	cmp	r2, r0
   bbd0e:	d114      	bne.n	bbd3a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   bbd10:	68e2      	ldr	r2, [r4, #12]
   bbd12:	42aa      	cmp	r2, r5
   bbd14:	d905      	bls.n	bbd22 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   bbd16:	2100      	movs	r1, #0
   bbd18:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   bbd1a:	68e2      	ldr	r2, [r4, #12]
   bbd1c:	3501      	adds	r5, #1
   bbd1e:	42aa      	cmp	r2, r5
   bbd20:	d8fa      	bhi.n	bbd18 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   bbd22:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   bbd26:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   bbd28:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   bbd2a:	68a5      	ldr	r5, [r4, #8]
   bbd2c:	f7ff ff8a 	bl	bbc44 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bbd30:	60a8      	str	r0, [r5, #8]
        isValid = true;
   bbd32:	2001      	movs	r0, #1
}
   bbd34:	b002      	add	sp, #8
   bbd36:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   bbd38:	b19d      	cbz	r5, bbd62 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   bbd3a:	68a1      	ldr	r1, [r4, #8]
   bbd3c:	680a      	ldr	r2, [r1, #0]
   bbd3e:	b192      	cbz	r2, bbd66 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   bbd40:	6888      	ldr	r0, [r1, #8]
   bbd42:	888b      	ldrh	r3, [r1, #4]
   bbd44:	9001      	str	r0, [sp, #4]
   bbd46:	88c9      	ldrh	r1, [r1, #6]
   bbd48:	4808      	ldr	r0, [pc, #32]	; (bbd6c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bbd4a:	9100      	str	r1, [sp, #0]
   bbd4c:	4908      	ldr	r1, [pc, #32]	; (bbd70 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   bbd4e:	f7fb f891 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   bbd52:	e9cd 5600 	strd	r5, r6, [sp]
   bbd56:	8aa3      	ldrh	r3, [r4, #20]
   bbd58:	6922      	ldr	r2, [r4, #16]
   bbd5a:	4906      	ldr	r1, [pc, #24]	; (bbd74 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   bbd5c:	4803      	ldr	r0, [pc, #12]	; (bbd6c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bbd5e:	f7fb f889 	bl	b6e74 <_ZNK5spark6Logger5traceEPKcz>
   bbd62:	2000      	movs	r0, #0
   bbd64:	e7e6      	b.n	bbd34 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bbd66:	4610      	mov	r0, r2
   bbd68:	e7e4      	b.n	bbd34 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bbd6a:	bf00      	nop
   bbd6c:	2003e658 	.word	0x2003e658
   bbd70:	000c21a8 	.word	0x000c21a8
   bbd74:	000c21d9 	.word	0x000c21d9

000bbd78 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   bbd78:	b538      	push	{r3, r4, r5, lr}
   bbd7a:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   bbd7c:	68c2      	ldr	r2, [r0, #12]
   bbd7e:	6880      	ldr	r0, [r0, #8]
   bbd80:	2100      	movs	r1, #0
   bbd82:	f004 fbb1 	bl	c04e8 <memset>
    savedDataHeader->magic = savedDataMagic;
   bbd86:	68a3      	ldr	r3, [r4, #8]
   bbd88:	6922      	ldr	r2, [r4, #16]
   bbd8a:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   bbd8c:	68a3      	ldr	r3, [r4, #8]
   bbd8e:	8aa2      	ldrh	r2, [r4, #20]
   bbd90:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   bbd92:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   bbd96:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   bbd98:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   bbd9a:	68a5      	ldr	r5, [r4, #8]
   bbd9c:	f7ff ff52 	bl	bbc44 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bbda0:	60a8      	str	r0, [r5, #8]
}
   bbda2:	bd38      	pop	{r3, r4, r5, pc}

000bbda4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   bbda4:	b508      	push	{r3, lr}
   bbda6:	4b02      	ldr	r3, [pc, #8]	; (bbdb0 <cellular_signal+0xc>)
   bbda8:	681b      	ldr	r3, [r3, #0]
   bbdaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bbdac:	9301      	str	r3, [sp, #4]
   bbdae:	bd08      	pop	{r3, pc}
   bbdb0:	00030274 	.word	0x00030274

000bbdb4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   bbdb4:	b508      	push	{r3, lr}
   bbdb6:	4b02      	ldr	r3, [pc, #8]	; (bbdc0 <os_thread_create+0xc>)
   bbdb8:	681b      	ldr	r3, [r3, #0]
   bbdba:	685b      	ldr	r3, [r3, #4]
   bbdbc:	9301      	str	r3, [sp, #4]
   bbdbe:	bd08      	pop	{r3, pc}
   bbdc0:	00030248 	.word	0x00030248

000bbdc4 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   bbdc4:	b508      	push	{r3, lr}
   bbdc6:	4b02      	ldr	r3, [pc, #8]	; (bbdd0 <os_thread_is_current+0xc>)
   bbdc8:	681b      	ldr	r3, [r3, #0]
   bbdca:	689b      	ldr	r3, [r3, #8]
   bbdcc:	9301      	str	r3, [sp, #4]
   bbdce:	bd08      	pop	{r3, pc}
   bbdd0:	00030248 	.word	0x00030248

000bbdd4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   bbdd4:	b508      	push	{r3, lr}
   bbdd6:	4b02      	ldr	r3, [pc, #8]	; (bbde0 <os_thread_join+0xc>)
   bbdd8:	681b      	ldr	r3, [r3, #0]
   bbdda:	691b      	ldr	r3, [r3, #16]
   bbddc:	9301      	str	r3, [sp, #4]
   bbdde:	bd08      	pop	{r3, pc}
   bbde0:	00030248 	.word	0x00030248

000bbde4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   bbde4:	b508      	push	{r3, lr}
   bbde6:	4b02      	ldr	r3, [pc, #8]	; (bbdf0 <os_thread_cleanup+0xc>)
   bbde8:	681b      	ldr	r3, [r3, #0]
   bbdea:	695b      	ldr	r3, [r3, #20]
   bbdec:	9301      	str	r3, [sp, #4]
   bbdee:	bd08      	pop	{r3, pc}
   bbdf0:	00030248 	.word	0x00030248

000bbdf4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   bbdf4:	b508      	push	{r3, lr}
   bbdf6:	4b02      	ldr	r3, [pc, #8]	; (bbe00 <os_mutex_create+0xc>)
   bbdf8:	681b      	ldr	r3, [r3, #0]
   bbdfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bbdfc:	9301      	str	r3, [sp, #4]
   bbdfe:	bd08      	pop	{r3, pc}
   bbe00:	00030248 	.word	0x00030248

000bbe04 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   bbe04:	b508      	push	{r3, lr}
   bbe06:	4b02      	ldr	r3, [pc, #8]	; (bbe10 <os_mutex_lock+0xc>)
   bbe08:	681b      	ldr	r3, [r3, #0]
   bbe0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bbe0c:	9301      	str	r3, [sp, #4]
   bbe0e:	bd08      	pop	{r3, pc}
   bbe10:	00030248 	.word	0x00030248

000bbe14 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   bbe14:	b508      	push	{r3, lr}
   bbe16:	4b02      	ldr	r3, [pc, #8]	; (bbe20 <os_mutex_unlock+0xc>)
   bbe18:	681b      	ldr	r3, [r3, #0]
   bbe1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bbe1c:	9301      	str	r3, [sp, #4]
   bbe1e:	bd08      	pop	{r3, pc}
   bbe20:	00030248 	.word	0x00030248

000bbe24 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bbe24:	b508      	push	{r3, lr}
   bbe26:	4b02      	ldr	r3, [pc, #8]	; (bbe30 <os_mutex_recursive_create+0xc>)
   bbe28:	681b      	ldr	r3, [r3, #0]
   bbe2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bbe2c:	9301      	str	r3, [sp, #4]
   bbe2e:	bd08      	pop	{r3, pc}
   bbe30:	00030248 	.word	0x00030248

000bbe34 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bbe34:	b508      	push	{r3, lr}
   bbe36:	4b02      	ldr	r3, [pc, #8]	; (bbe40 <os_mutex_recursive_destroy+0xc>)
   bbe38:	681b      	ldr	r3, [r3, #0]
   bbe3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bbe3c:	9301      	str	r3, [sp, #4]
   bbe3e:	bd08      	pop	{r3, pc}
   bbe40:	00030248 	.word	0x00030248

000bbe44 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bbe44:	b508      	push	{r3, lr}
   bbe46:	4b02      	ldr	r3, [pc, #8]	; (bbe50 <os_mutex_recursive_lock+0xc>)
   bbe48:	681b      	ldr	r3, [r3, #0]
   bbe4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bbe4c:	9301      	str	r3, [sp, #4]
   bbe4e:	bd08      	pop	{r3, pc}
   bbe50:	00030248 	.word	0x00030248

000bbe54 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bbe54:	b508      	push	{r3, lr}
   bbe56:	4b02      	ldr	r3, [pc, #8]	; (bbe60 <os_mutex_recursive_unlock+0xc>)
   bbe58:	681b      	ldr	r3, [r3, #0]
   bbe5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bbe5c:	9301      	str	r3, [sp, #4]
   bbe5e:	bd08      	pop	{r3, pc}
   bbe60:	00030248 	.word	0x00030248

000bbe64 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   bbe64:	b508      	push	{r3, lr}
   bbe66:	4b02      	ldr	r3, [pc, #8]	; (bbe70 <os_thread_exit+0xc>)
   bbe68:	681b      	ldr	r3, [r3, #0]
   bbe6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bbe6c:	9301      	str	r3, [sp, #4]
   bbe6e:	bd08      	pop	{r3, pc}
   bbe70:	00030248 	.word	0x00030248

000bbe74 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   bbe74:	b508      	push	{r3, lr}
   bbe76:	4b02      	ldr	r3, [pc, #8]	; (bbe80 <HAL_Core_Runtime_Info+0xc>)
   bbe78:	681b      	ldr	r3, [r3, #0]
   bbe7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bbe7c:	9301      	str	r3, [sp, #4]
   bbe7e:	bd08      	pop	{r3, pc}
   bbe80:	00030234 	.word	0x00030234

000bbe84 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   bbe84:	b508      	push	{r3, lr}
   bbe86:	4b02      	ldr	r3, [pc, #8]	; (bbe90 <HAL_Feature_Set+0xc>)
   bbe88:	681b      	ldr	r3, [r3, #0]
   bbe8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bbe8c:	9301      	str	r3, [sp, #4]
   bbe8e:	bd08      	pop	{r3, pc}
   bbe90:	00030234 	.word	0x00030234

000bbe94 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bbe94:	b508      	push	{r3, lr}
   bbe96:	4b02      	ldr	r3, [pc, #8]	; (bbea0 <HAL_RNG_GetRandomNumber+0xc>)
   bbe98:	681b      	ldr	r3, [r3, #0]
   bbe9a:	685b      	ldr	r3, [r3, #4]
   bbe9c:	9301      	str	r3, [sp, #4]
   bbe9e:	bd08      	pop	{r3, pc}
   bbea0:	00030218 	.word	0x00030218

000bbea4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   bbea4:	b508      	push	{r3, lr}
   bbea6:	4b02      	ldr	r3, [pc, #8]	; (bbeb0 <HAL_Delay_Milliseconds+0xc>)
   bbea8:	681b      	ldr	r3, [r3, #0]
   bbeaa:	689b      	ldr	r3, [r3, #8]
   bbeac:	9301      	str	r3, [sp, #4]
   bbeae:	bd08      	pop	{r3, pc}
   bbeb0:	00030218 	.word	0x00030218

000bbeb4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bbeb4:	b508      	push	{r3, lr}
   bbeb6:	4b02      	ldr	r3, [pc, #8]	; (bbec0 <HAL_Delay_Microseconds+0xc>)
   bbeb8:	681b      	ldr	r3, [r3, #0]
   bbeba:	68db      	ldr	r3, [r3, #12]
   bbebc:	9301      	str	r3, [sp, #4]
   bbebe:	bd08      	pop	{r3, pc}
   bbec0:	00030218 	.word	0x00030218

000bbec4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bbec4:	b508      	push	{r3, lr}
   bbec6:	4b02      	ldr	r3, [pc, #8]	; (bbed0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bbec8:	681b      	ldr	r3, [r3, #0]
   bbeca:	695b      	ldr	r3, [r3, #20]
   bbecc:	9301      	str	r3, [sp, #4]
   bbece:	bd08      	pop	{r3, pc}
   bbed0:	00030218 	.word	0x00030218

000bbed4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bbed4:	b508      	push	{r3, lr}
   bbed6:	4b02      	ldr	r3, [pc, #8]	; (bbee0 <hal_rtc_time_is_valid+0xc>)
   bbed8:	681b      	ldr	r3, [r3, #0]
   bbeda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bbedc:	9301      	str	r3, [sp, #4]
   bbede:	bd08      	pop	{r3, pc}
   bbee0:	00030218 	.word	0x00030218

000bbee4 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   bbee4:	b508      	push	{r3, lr}
   bbee6:	4b02      	ldr	r3, [pc, #8]	; (bbef0 <hal_timer_millis+0xc>)
   bbee8:	681b      	ldr	r3, [r3, #0]
   bbeea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bbeec:	9301      	str	r3, [sp, #4]
   bbeee:	bd08      	pop	{r3, pc}
   bbef0:	00030218 	.word	0x00030218

000bbef4 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bbef4:	b508      	push	{r3, lr}
   bbef6:	4b02      	ldr	r3, [pc, #8]	; (bbf00 <hal_rtc_get_time+0xc>)
   bbef8:	681b      	ldr	r3, [r3, #0]
   bbefa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bbefc:	9301      	str	r3, [sp, #4]
   bbefe:	bd08      	pop	{r3, pc}
   bbf00:	00030218 	.word	0x00030218

000bbf04 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   bbf04:	b508      	push	{r3, lr}
   bbf06:	4b02      	ldr	r3, [pc, #8]	; (bbf10 <hal_rtc_set_time+0xc>)
   bbf08:	681b      	ldr	r3, [r3, #0]
   bbf0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   bbf0c:	9301      	str	r3, [sp, #4]
   bbf0e:	bd08      	pop	{r3, pc}
   bbf10:	00030218 	.word	0x00030218

000bbf14 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bbf14:	b508      	push	{r3, lr}
   bbf16:	4b02      	ldr	r3, [pc, #8]	; (bbf20 <HAL_Validate_Pin_Function+0xc>)
   bbf18:	681b      	ldr	r3, [r3, #0]
   bbf1a:	685b      	ldr	r3, [r3, #4]
   bbf1c:	9301      	str	r3, [sp, #4]
   bbf1e:	bd08      	pop	{r3, pc}
   bbf20:	0003022c 	.word	0x0003022c

000bbf24 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bbf24:	b508      	push	{r3, lr}
   bbf26:	4b02      	ldr	r3, [pc, #8]	; (bbf30 <HAL_Pin_Mode+0xc>)
   bbf28:	681b      	ldr	r3, [r3, #0]
   bbf2a:	689b      	ldr	r3, [r3, #8]
   bbf2c:	9301      	str	r3, [sp, #4]
   bbf2e:	bd08      	pop	{r3, pc}
   bbf30:	0003022c 	.word	0x0003022c

000bbf34 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bbf34:	b508      	push	{r3, lr}
   bbf36:	4b02      	ldr	r3, [pc, #8]	; (bbf40 <HAL_Get_Pin_Mode+0xc>)
   bbf38:	681b      	ldr	r3, [r3, #0]
   bbf3a:	68db      	ldr	r3, [r3, #12]
   bbf3c:	9301      	str	r3, [sp, #4]
   bbf3e:	bd08      	pop	{r3, pc}
   bbf40:	0003022c 	.word	0x0003022c

000bbf44 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bbf44:	b508      	push	{r3, lr}
   bbf46:	4b02      	ldr	r3, [pc, #8]	; (bbf50 <HAL_GPIO_Write+0xc>)
   bbf48:	681b      	ldr	r3, [r3, #0]
   bbf4a:	691b      	ldr	r3, [r3, #16]
   bbf4c:	9301      	str	r3, [sp, #4]
   bbf4e:	bd08      	pop	{r3, pc}
   bbf50:	0003022c 	.word	0x0003022c

000bbf54 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bbf54:	b508      	push	{r3, lr}
   bbf56:	4b02      	ldr	r3, [pc, #8]	; (bbf60 <HAL_GPIO_Read+0xc>)
   bbf58:	681b      	ldr	r3, [r3, #0]
   bbf5a:	695b      	ldr	r3, [r3, #20]
   bbf5c:	9301      	str	r3, [sp, #4]
   bbf5e:	bd08      	pop	{r3, pc}
   bbf60:	0003022c 	.word	0x0003022c

000bbf64 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bbf64:	b508      	push	{r3, lr}
   bbf66:	4b02      	ldr	r3, [pc, #8]	; (bbf70 <HAL_Interrupts_Attach+0xc>)
   bbf68:	681b      	ldr	r3, [r3, #0]
   bbf6a:	699b      	ldr	r3, [r3, #24]
   bbf6c:	9301      	str	r3, [sp, #4]
   bbf6e:	bd08      	pop	{r3, pc}
   bbf70:	0003022c 	.word	0x0003022c

000bbf74 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bbf74:	b508      	push	{r3, lr}
   bbf76:	4b02      	ldr	r3, [pc, #8]	; (bbf80 <HAL_Interrupts_Detach+0xc>)
   bbf78:	681b      	ldr	r3, [r3, #0]
   bbf7a:	69db      	ldr	r3, [r3, #28]
   bbf7c:	9301      	str	r3, [sp, #4]
   bbf7e:	bd08      	pop	{r3, pc}
   bbf80:	0003022c 	.word	0x0003022c

000bbf84 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bbf84:	b508      	push	{r3, lr}
   bbf86:	4b02      	ldr	r3, [pc, #8]	; (bbf90 <hal_adc_read+0xc>)
   bbf88:	681b      	ldr	r3, [r3, #0]
   bbf8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bbf8c:	9301      	str	r3, [sp, #4]
   bbf8e:	bd08      	pop	{r3, pc}
   bbf90:	0003022c 	.word	0x0003022c

000bbf94 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bbf94:	b508      	push	{r3, lr}
   bbf96:	4b02      	ldr	r3, [pc, #8]	; (bbfa0 <hal_i2c_begin+0xc>)
   bbf98:	681b      	ldr	r3, [r3, #0]
   bbf9a:	68db      	ldr	r3, [r3, #12]
   bbf9c:	9301      	str	r3, [sp, #4]
   bbf9e:	bd08      	pop	{r3, pc}
   bbfa0:	00030228 	.word	0x00030228

000bbfa4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bbfa4:	b508      	push	{r3, lr}
   bbfa6:	4b02      	ldr	r3, [pc, #8]	; (bbfb0 <hal_i2c_begin_transmission+0xc>)
   bbfa8:	681b      	ldr	r3, [r3, #0]
   bbfaa:	699b      	ldr	r3, [r3, #24]
   bbfac:	9301      	str	r3, [sp, #4]
   bbfae:	bd08      	pop	{r3, pc}
   bbfb0:	00030228 	.word	0x00030228

000bbfb4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bbfb4:	b508      	push	{r3, lr}
   bbfb6:	4b02      	ldr	r3, [pc, #8]	; (bbfc0 <hal_i2c_end_transmission+0xc>)
   bbfb8:	681b      	ldr	r3, [r3, #0]
   bbfba:	69db      	ldr	r3, [r3, #28]
   bbfbc:	9301      	str	r3, [sp, #4]
   bbfbe:	bd08      	pop	{r3, pc}
   bbfc0:	00030228 	.word	0x00030228

000bbfc4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bbfc4:	b508      	push	{r3, lr}
   bbfc6:	4b02      	ldr	r3, [pc, #8]	; (bbfd0 <hal_i2c_write+0xc>)
   bbfc8:	681b      	ldr	r3, [r3, #0]
   bbfca:	6a1b      	ldr	r3, [r3, #32]
   bbfcc:	9301      	str	r3, [sp, #4]
   bbfce:	bd08      	pop	{r3, pc}
   bbfd0:	00030228 	.word	0x00030228

000bbfd4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bbfd4:	b508      	push	{r3, lr}
   bbfd6:	4b02      	ldr	r3, [pc, #8]	; (bbfe0 <hal_i2c_available+0xc>)
   bbfd8:	681b      	ldr	r3, [r3, #0]
   bbfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bbfdc:	9301      	str	r3, [sp, #4]
   bbfde:	bd08      	pop	{r3, pc}
   bbfe0:	00030228 	.word	0x00030228

000bbfe4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bbfe4:	b508      	push	{r3, lr}
   bbfe6:	4b02      	ldr	r3, [pc, #8]	; (bbff0 <hal_i2c_read+0xc>)
   bbfe8:	681b      	ldr	r3, [r3, #0]
   bbfea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bbfec:	9301      	str	r3, [sp, #4]
   bbfee:	bd08      	pop	{r3, pc}
   bbff0:	00030228 	.word	0x00030228

000bbff4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bbff4:	b508      	push	{r3, lr}
   bbff6:	4b02      	ldr	r3, [pc, #8]	; (bc000 <hal_i2c_peek+0xc>)
   bbff8:	681b      	ldr	r3, [r3, #0]
   bbffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bbffc:	9301      	str	r3, [sp, #4]
   bbffe:	bd08      	pop	{r3, pc}
   bc000:	00030228 	.word	0x00030228

000bc004 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bc004:	b508      	push	{r3, lr}
   bc006:	4b02      	ldr	r3, [pc, #8]	; (bc010 <hal_i2c_flush+0xc>)
   bc008:	681b      	ldr	r3, [r3, #0]
   bc00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc00c:	9301      	str	r3, [sp, #4]
   bc00e:	bd08      	pop	{r3, pc}
   bc010:	00030228 	.word	0x00030228

000bc014 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bc014:	b508      	push	{r3, lr}
   bc016:	4b02      	ldr	r3, [pc, #8]	; (bc020 <hal_i2c_is_enabled+0xc>)
   bc018:	681b      	ldr	r3, [r3, #0]
   bc01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc01c:	9301      	str	r3, [sp, #4]
   bc01e:	bd08      	pop	{r3, pc}
   bc020:	00030228 	.word	0x00030228

000bc024 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bc024:	b508      	push	{r3, lr}
   bc026:	4b02      	ldr	r3, [pc, #8]	; (bc030 <hal_i2c_init+0xc>)
   bc028:	681b      	ldr	r3, [r3, #0]
   bc02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc02c:	9301      	str	r3, [sp, #4]
   bc02e:	bd08      	pop	{r3, pc}
   bc030:	00030228 	.word	0x00030228

000bc034 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   bc034:	b508      	push	{r3, lr}
   bc036:	4b02      	ldr	r3, [pc, #8]	; (bc040 <hal_i2c_lock+0xc>)
   bc038:	681b      	ldr	r3, [r3, #0]
   bc03a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bc03c:	9301      	str	r3, [sp, #4]
   bc03e:	bd08      	pop	{r3, pc}
   bc040:	00030228 	.word	0x00030228

000bc044 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   bc044:	b508      	push	{r3, lr}
   bc046:	4b02      	ldr	r3, [pc, #8]	; (bc050 <hal_i2c_unlock+0xc>)
   bc048:	681b      	ldr	r3, [r3, #0]
   bc04a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc04c:	9301      	str	r3, [sp, #4]
   bc04e:	bd08      	pop	{r3, pc}
   bc050:	00030228 	.word	0x00030228

000bc054 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bc054:	b508      	push	{r3, lr}
   bc056:	4b02      	ldr	r3, [pc, #8]	; (bc060 <hal_i2c_request_ex+0xc>)
   bc058:	681b      	ldr	r3, [r3, #0]
   bc05a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bc05c:	9301      	str	r3, [sp, #4]
   bc05e:	bd08      	pop	{r3, pc}
   bc060:	00030228 	.word	0x00030228

000bc064 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bc064:	b508      	push	{r3, lr}
   bc066:	4b02      	ldr	r3, [pc, #8]	; (bc070 <inet_inet_ntop+0xc>)
   bc068:	681b      	ldr	r3, [r3, #0]
   bc06a:	695b      	ldr	r3, [r3, #20]
   bc06c:	9301      	str	r3, [sp, #4]
   bc06e:	bd08      	pop	{r3, pc}
   bc070:	00030264 	.word	0x00030264

000bc074 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bc074:	b508      	push	{r3, lr}
   bc076:	4b02      	ldr	r3, [pc, #8]	; (bc080 <netdb_freeaddrinfo+0xc>)
   bc078:	681b      	ldr	r3, [r3, #0]
   bc07a:	689b      	ldr	r3, [r3, #8]
   bc07c:	9301      	str	r3, [sp, #4]
   bc07e:	bd08      	pop	{r3, pc}
   bc080:	00030268 	.word	0x00030268

000bc084 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bc084:	b508      	push	{r3, lr}
   bc086:	4b02      	ldr	r3, [pc, #8]	; (bc090 <netdb_getaddrinfo+0xc>)
   bc088:	681b      	ldr	r3, [r3, #0]
   bc08a:	68db      	ldr	r3, [r3, #12]
   bc08c:	9301      	str	r3, [sp, #4]
   bc08e:	bd08      	pop	{r3, pc}
   bc090:	00030268 	.word	0x00030268

000bc094 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bc094:	b508      	push	{r3, lr}
   bc096:	4b02      	ldr	r3, [pc, #8]	; (bc0a0 <hal_spi_begin+0xc>)
   bc098:	681b      	ldr	r3, [r3, #0]
   bc09a:	681b      	ldr	r3, [r3, #0]
   bc09c:	9301      	str	r3, [sp, #4]
   bc09e:	bd08      	pop	{r3, pc}
   bc0a0:	00030230 	.word	0x00030230

000bc0a4 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   bc0a4:	b508      	push	{r3, lr}
   bc0a6:	4b02      	ldr	r3, [pc, #8]	; (bc0b0 <hal_spi_end+0xc>)
   bc0a8:	681b      	ldr	r3, [r3, #0]
   bc0aa:	685b      	ldr	r3, [r3, #4]
   bc0ac:	9301      	str	r3, [sp, #4]
   bc0ae:	bd08      	pop	{r3, pc}
   bc0b0:	00030230 	.word	0x00030230

000bc0b4 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bc0b4:	b508      	push	{r3, lr}
   bc0b6:	4b02      	ldr	r3, [pc, #8]	; (bc0c0 <hal_spi_transfer+0xc>)
   bc0b8:	681b      	ldr	r3, [r3, #0]
   bc0ba:	695b      	ldr	r3, [r3, #20]
   bc0bc:	9301      	str	r3, [sp, #4]
   bc0be:	bd08      	pop	{r3, pc}
   bc0c0:	00030230 	.word	0x00030230

000bc0c4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bc0c4:	b508      	push	{r3, lr}
   bc0c6:	4b02      	ldr	r3, [pc, #8]	; (bc0d0 <hal_spi_init+0xc>)
   bc0c8:	681b      	ldr	r3, [r3, #0]
   bc0ca:	69db      	ldr	r3, [r3, #28]
   bc0cc:	9301      	str	r3, [sp, #4]
   bc0ce:	bd08      	pop	{r3, pc}
   bc0d0:	00030230 	.word	0x00030230

000bc0d4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bc0d4:	b508      	push	{r3, lr}
   bc0d6:	4b02      	ldr	r3, [pc, #8]	; (bc0e0 <hal_spi_is_enabled+0xc>)
   bc0d8:	681b      	ldr	r3, [r3, #0]
   bc0da:	6a1b      	ldr	r3, [r3, #32]
   bc0dc:	9301      	str	r3, [sp, #4]
   bc0de:	bd08      	pop	{r3, pc}
   bc0e0:	00030230 	.word	0x00030230

000bc0e4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bc0e4:	b508      	push	{r3, lr}
   bc0e6:	4b02      	ldr	r3, [pc, #8]	; (bc0f0 <hal_spi_info+0xc>)
   bc0e8:	681b      	ldr	r3, [r3, #0]
   bc0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc0ec:	9301      	str	r3, [sp, #4]
   bc0ee:	bd08      	pop	{r3, pc}
   bc0f0:	00030230 	.word	0x00030230

000bc0f4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bc0f4:	b508      	push	{r3, lr}
   bc0f6:	4b02      	ldr	r3, [pc, #8]	; (bc100 <hal_spi_set_settings+0xc>)
   bc0f8:	681b      	ldr	r3, [r3, #0]
   bc0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bc0fc:	9301      	str	r3, [sp, #4]
   bc0fe:	bd08      	pop	{r3, pc}
   bc100:	00030230 	.word	0x00030230

000bc104 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bc104:	b508      	push	{r3, lr}
   bc106:	4b02      	ldr	r3, [pc, #8]	; (bc110 <hal_spi_acquire+0xc>)
   bc108:	681b      	ldr	r3, [r3, #0]
   bc10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc10c:	9301      	str	r3, [sp, #4]
   bc10e:	bd08      	pop	{r3, pc}
   bc110:	00030230 	.word	0x00030230

000bc114 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bc114:	b508      	push	{r3, lr}
   bc116:	4b02      	ldr	r3, [pc, #8]	; (bc120 <hal_spi_release+0xc>)
   bc118:	681b      	ldr	r3, [r3, #0]
   bc11a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc11c:	9301      	str	r3, [sp, #4]
   bc11e:	bd08      	pop	{r3, pc}
   bc120:	00030230 	.word	0x00030230

000bc124 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   bc124:	b508      	push	{r3, lr}
   bc126:	4b02      	ldr	r3, [pc, #8]	; (bc130 <_open+0xc>)
   bc128:	681b      	ldr	r3, [r3, #0]
   bc12a:	681b      	ldr	r3, [r3, #0]
   bc12c:	9301      	str	r3, [sp, #4]
   bc12e:	bd08      	pop	{r3, pc}
   bc130:	00030284 	.word	0x00030284

000bc134 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   bc134:	b508      	push	{r3, lr}
   bc136:	4b02      	ldr	r3, [pc, #8]	; (bc140 <_write+0xc>)
   bc138:	681b      	ldr	r3, [r3, #0]
   bc13a:	685b      	ldr	r3, [r3, #4]
   bc13c:	9301      	str	r3, [sp, #4]
   bc13e:	bd08      	pop	{r3, pc}
   bc140:	00030284 	.word	0x00030284

000bc144 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   bc144:	b508      	push	{r3, lr}
   bc146:	4b02      	ldr	r3, [pc, #8]	; (bc150 <_read+0xc>)
   bc148:	681b      	ldr	r3, [r3, #0]
   bc14a:	689b      	ldr	r3, [r3, #8]
   bc14c:	9301      	str	r3, [sp, #4]
   bc14e:	bd08      	pop	{r3, pc}
   bc150:	00030284 	.word	0x00030284

000bc154 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   bc154:	b508      	push	{r3, lr}
   bc156:	4b02      	ldr	r3, [pc, #8]	; (bc160 <_close+0xc>)
   bc158:	681b      	ldr	r3, [r3, #0]
   bc15a:	68db      	ldr	r3, [r3, #12]
   bc15c:	9301      	str	r3, [sp, #4]
   bc15e:	bd08      	pop	{r3, pc}
   bc160:	00030284 	.word	0x00030284

000bc164 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   bc164:	b508      	push	{r3, lr}
   bc166:	4b02      	ldr	r3, [pc, #8]	; (bc170 <_fstat+0xc>)
   bc168:	681b      	ldr	r3, [r3, #0]
   bc16a:	695b      	ldr	r3, [r3, #20]
   bc16c:	9301      	str	r3, [sp, #4]
   bc16e:	bd08      	pop	{r3, pc}
   bc170:	00030284 	.word	0x00030284

000bc174 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   bc174:	b508      	push	{r3, lr}
   bc176:	4b02      	ldr	r3, [pc, #8]	; (bc180 <_lseek+0xc>)
   bc178:	681b      	ldr	r3, [r3, #0]
   bc17a:	6a1b      	ldr	r3, [r3, #32]
   bc17c:	9301      	str	r3, [sp, #4]
   bc17e:	bd08      	pop	{r3, pc}
   bc180:	00030284 	.word	0x00030284

000bc184 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   bc184:	b508      	push	{r3, lr}
   bc186:	4b02      	ldr	r3, [pc, #8]	; (bc190 <stat+0xc>)
   bc188:	681b      	ldr	r3, [r3, #0]
   bc18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc18c:	9301      	str	r3, [sp, #4]
   bc18e:	bd08      	pop	{r3, pc}
   bc190:	00030284 	.word	0x00030284

000bc194 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   bc194:	b508      	push	{r3, lr}
   bc196:	4b02      	ldr	r3, [pc, #8]	; (bc1a0 <mkdir+0xc>)
   bc198:	681b      	ldr	r3, [r3, #0]
   bc19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bc19c:	9301      	str	r3, [sp, #4]
   bc19e:	bd08      	pop	{r3, pc}
   bc1a0:	00030284 	.word	0x00030284

000bc1a4 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   bc1a4:	b508      	push	{r3, lr}
   bc1a6:	4b02      	ldr	r3, [pc, #8]	; (bc1b0 <_unlink+0xc>)
   bc1a8:	681b      	ldr	r3, [r3, #0]
   bc1aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc1ac:	9301      	str	r3, [sp, #4]
   bc1ae:	bd08      	pop	{r3, pc}
   bc1b0:	00030284 	.word	0x00030284

000bc1b4 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   bc1b4:	b508      	push	{r3, lr}
   bc1b6:	4b02      	ldr	r3, [pc, #8]	; (bc1c0 <opendir+0xc>)
   bc1b8:	681b      	ldr	r3, [r3, #0]
   bc1ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bc1bc:	9301      	str	r3, [sp, #4]
   bc1be:	bd08      	pop	{r3, pc}
   bc1c0:	00030284 	.word	0x00030284

000bc1c4 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   bc1c4:	b508      	push	{r3, lr}
   bc1c6:	4b02      	ldr	r3, [pc, #8]	; (bc1d0 <readdir+0xc>)
   bc1c8:	681b      	ldr	r3, [r3, #0]
   bc1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc1cc:	9301      	str	r3, [sp, #4]
   bc1ce:	bd08      	pop	{r3, pc}
   bc1d0:	00030284 	.word	0x00030284

000bc1d4 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   bc1d4:	b508      	push	{r3, lr}
   bc1d6:	4b02      	ldr	r3, [pc, #8]	; (bc1e0 <closedir+0xc>)
   bc1d8:	681b      	ldr	r3, [r3, #0]
   bc1da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc1dc:	9301      	str	r3, [sp, #4]
   bc1de:	bd08      	pop	{r3, pc}
   bc1e0:	00030284 	.word	0x00030284

000bc1e4 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bc1e4:	b508      	push	{r3, lr}
   bc1e6:	4b02      	ldr	r3, [pc, #8]	; (bc1f0 <hal_usart_end+0xc>)
   bc1e8:	681b      	ldr	r3, [r3, #0]
   bc1ea:	689b      	ldr	r3, [r3, #8]
   bc1ec:	9301      	str	r3, [sp, #4]
   bc1ee:	bd08      	pop	{r3, pc}
   bc1f0:	0003023c 	.word	0x0003023c

000bc1f4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bc1f4:	b508      	push	{r3, lr}
   bc1f6:	4b02      	ldr	r3, [pc, #8]	; (bc200 <hal_usart_write+0xc>)
   bc1f8:	681b      	ldr	r3, [r3, #0]
   bc1fa:	68db      	ldr	r3, [r3, #12]
   bc1fc:	9301      	str	r3, [sp, #4]
   bc1fe:	bd08      	pop	{r3, pc}
   bc200:	0003023c 	.word	0x0003023c

000bc204 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bc204:	b508      	push	{r3, lr}
   bc206:	4b02      	ldr	r3, [pc, #8]	; (bc210 <hal_usart_available+0xc>)
   bc208:	681b      	ldr	r3, [r3, #0]
   bc20a:	691b      	ldr	r3, [r3, #16]
   bc20c:	9301      	str	r3, [sp, #4]
   bc20e:	bd08      	pop	{r3, pc}
   bc210:	0003023c 	.word	0x0003023c

000bc214 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bc214:	b508      	push	{r3, lr}
   bc216:	4b02      	ldr	r3, [pc, #8]	; (bc220 <hal_usart_read+0xc>)
   bc218:	681b      	ldr	r3, [r3, #0]
   bc21a:	695b      	ldr	r3, [r3, #20]
   bc21c:	9301      	str	r3, [sp, #4]
   bc21e:	bd08      	pop	{r3, pc}
   bc220:	0003023c 	.word	0x0003023c

000bc224 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bc224:	b508      	push	{r3, lr}
   bc226:	4b02      	ldr	r3, [pc, #8]	; (bc230 <hal_usart_peek+0xc>)
   bc228:	681b      	ldr	r3, [r3, #0]
   bc22a:	699b      	ldr	r3, [r3, #24]
   bc22c:	9301      	str	r3, [sp, #4]
   bc22e:	bd08      	pop	{r3, pc}
   bc230:	0003023c 	.word	0x0003023c

000bc234 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bc234:	b508      	push	{r3, lr}
   bc236:	4b02      	ldr	r3, [pc, #8]	; (bc240 <hal_usart_flush+0xc>)
   bc238:	681b      	ldr	r3, [r3, #0]
   bc23a:	69db      	ldr	r3, [r3, #28]
   bc23c:	9301      	str	r3, [sp, #4]
   bc23e:	bd08      	pop	{r3, pc}
   bc240:	0003023c 	.word	0x0003023c

000bc244 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bc244:	b508      	push	{r3, lr}
   bc246:	4b02      	ldr	r3, [pc, #8]	; (bc250 <hal_usart_is_enabled+0xc>)
   bc248:	681b      	ldr	r3, [r3, #0]
   bc24a:	6a1b      	ldr	r3, [r3, #32]
   bc24c:	9301      	str	r3, [sp, #4]
   bc24e:	bd08      	pop	{r3, pc}
   bc250:	0003023c 	.word	0x0003023c

000bc254 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bc254:	b508      	push	{r3, lr}
   bc256:	4b02      	ldr	r3, [pc, #8]	; (bc260 <hal_usart_available_data_for_write+0xc>)
   bc258:	681b      	ldr	r3, [r3, #0]
   bc25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bc25c:	9301      	str	r3, [sp, #4]
   bc25e:	bd08      	pop	{r3, pc}
   bc260:	0003023c 	.word	0x0003023c

000bc264 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bc264:	b508      	push	{r3, lr}
   bc266:	4b02      	ldr	r3, [pc, #8]	; (bc270 <hal_usart_begin_config+0xc>)
   bc268:	681b      	ldr	r3, [r3, #0]
   bc26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc26c:	9301      	str	r3, [sp, #4]
   bc26e:	bd08      	pop	{r3, pc}
   bc270:	0003023c 	.word	0x0003023c

000bc274 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bc274:	b508      	push	{r3, lr}
   bc276:	4b02      	ldr	r3, [pc, #8]	; (bc280 <hal_usart_init_ex+0xc>)
   bc278:	681b      	ldr	r3, [r3, #0]
   bc27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc27c:	9301      	str	r3, [sp, #4]
   bc27e:	bd08      	pop	{r3, pc}
   bc280:	0003023c 	.word	0x0003023c

000bc284 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bc284:	b508      	push	{r3, lr}
   bc286:	4b02      	ldr	r3, [pc, #8]	; (bc290 <HAL_USB_USART_Init+0xc>)
   bc288:	681b      	ldr	r3, [r3, #0]
   bc28a:	681b      	ldr	r3, [r3, #0]
   bc28c:	9301      	str	r3, [sp, #4]
   bc28e:	bd08      	pop	{r3, pc}
   bc290:	0003024c 	.word	0x0003024c

000bc294 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bc294:	b508      	push	{r3, lr}
   bc296:	4b02      	ldr	r3, [pc, #8]	; (bc2a0 <HAL_USB_USART_Begin+0xc>)
   bc298:	681b      	ldr	r3, [r3, #0]
   bc29a:	685b      	ldr	r3, [r3, #4]
   bc29c:	9301      	str	r3, [sp, #4]
   bc29e:	bd08      	pop	{r3, pc}
   bc2a0:	0003024c 	.word	0x0003024c

000bc2a4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bc2a4:	b508      	push	{r3, lr}
   bc2a6:	4b02      	ldr	r3, [pc, #8]	; (bc2b0 <HAL_USB_USART_End+0xc>)
   bc2a8:	681b      	ldr	r3, [r3, #0]
   bc2aa:	689b      	ldr	r3, [r3, #8]
   bc2ac:	9301      	str	r3, [sp, #4]
   bc2ae:	bd08      	pop	{r3, pc}
   bc2b0:	0003024c 	.word	0x0003024c

000bc2b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bc2b4:	b508      	push	{r3, lr}
   bc2b6:	4b02      	ldr	r3, [pc, #8]	; (bc2c0 <HAL_USB_USART_Available_Data+0xc>)
   bc2b8:	681b      	ldr	r3, [r3, #0]
   bc2ba:	691b      	ldr	r3, [r3, #16]
   bc2bc:	9301      	str	r3, [sp, #4]
   bc2be:	bd08      	pop	{r3, pc}
   bc2c0:	0003024c 	.word	0x0003024c

000bc2c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bc2c4:	b508      	push	{r3, lr}
   bc2c6:	4b02      	ldr	r3, [pc, #8]	; (bc2d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bc2c8:	681b      	ldr	r3, [r3, #0]
   bc2ca:	695b      	ldr	r3, [r3, #20]
   bc2cc:	9301      	str	r3, [sp, #4]
   bc2ce:	bd08      	pop	{r3, pc}
   bc2d0:	0003024c 	.word	0x0003024c

000bc2d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bc2d4:	b508      	push	{r3, lr}
   bc2d6:	4b02      	ldr	r3, [pc, #8]	; (bc2e0 <HAL_USB_USART_Receive_Data+0xc>)
   bc2d8:	681b      	ldr	r3, [r3, #0]
   bc2da:	699b      	ldr	r3, [r3, #24]
   bc2dc:	9301      	str	r3, [sp, #4]
   bc2de:	bd08      	pop	{r3, pc}
   bc2e0:	0003024c 	.word	0x0003024c

000bc2e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bc2e4:	b508      	push	{r3, lr}
   bc2e6:	4b02      	ldr	r3, [pc, #8]	; (bc2f0 <HAL_USB_USART_Send_Data+0xc>)
   bc2e8:	681b      	ldr	r3, [r3, #0]
   bc2ea:	69db      	ldr	r3, [r3, #28]
   bc2ec:	9301      	str	r3, [sp, #4]
   bc2ee:	bd08      	pop	{r3, pc}
   bc2f0:	0003024c 	.word	0x0003024c

000bc2f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bc2f4:	b508      	push	{r3, lr}
   bc2f6:	4b02      	ldr	r3, [pc, #8]	; (bc300 <HAL_USB_USART_Flush_Data+0xc>)
   bc2f8:	681b      	ldr	r3, [r3, #0]
   bc2fa:	6a1b      	ldr	r3, [r3, #32]
   bc2fc:	9301      	str	r3, [sp, #4]
   bc2fe:	bd08      	pop	{r3, pc}
   bc300:	0003024c 	.word	0x0003024c

000bc304 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   bc304:	b508      	push	{r3, lr}
   bc306:	4b02      	ldr	r3, [pc, #8]	; (bc310 <HAL_USB_USART_Is_Connected+0xc>)
   bc308:	681b      	ldr	r3, [r3, #0]
   bc30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bc30c:	9301      	str	r3, [sp, #4]
   bc30e:	bd08      	pop	{r3, pc}
   bc310:	0003024c 	.word	0x0003024c

000bc314 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bc314:	b508      	push	{r3, lr}
   bc316:	4b02      	ldr	r3, [pc, #8]	; (bc320 <panic_+0xc>)
   bc318:	681b      	ldr	r3, [r3, #0]
   bc31a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc31c:	9301      	str	r3, [sp, #4]
   bc31e:	bd08      	pop	{r3, pc}
   bc320:	00030260 	.word	0x00030260

000bc324 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bc324:	b508      	push	{r3, lr}
   bc326:	4b02      	ldr	r3, [pc, #8]	; (bc330 <log_message+0xc>)
   bc328:	681b      	ldr	r3, [r3, #0]
   bc32a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bc32c:	9301      	str	r3, [sp, #4]
   bc32e:	bd08      	pop	{r3, pc}
   bc330:	00030260 	.word	0x00030260

000bc334 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   bc334:	b508      	push	{r3, lr}
   bc336:	4b02      	ldr	r3, [pc, #8]	; (bc340 <log_message_v+0xc>)
   bc338:	681b      	ldr	r3, [r3, #0]
   bc33a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc33c:	9301      	str	r3, [sp, #4]
   bc33e:	bd08      	pop	{r3, pc}
   bc340:	00030260 	.word	0x00030260

000bc344 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bc344:	b508      	push	{r3, lr}
   bc346:	4b02      	ldr	r3, [pc, #8]	; (bc350 <log_level_name+0xc>)
   bc348:	681b      	ldr	r3, [r3, #0]
   bc34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bc34c:	9301      	str	r3, [sp, #4]
   bc34e:	bd08      	pop	{r3, pc}
   bc350:	00030260 	.word	0x00030260

000bc354 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bc354:	b508      	push	{r3, lr}
   bc356:	4b02      	ldr	r3, [pc, #8]	; (bc360 <log_set_callbacks+0xc>)
   bc358:	681b      	ldr	r3, [r3, #0]
   bc35a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bc35c:	9301      	str	r3, [sp, #4]
   bc35e:	bd08      	pop	{r3, pc}
   bc360:	00030260 	.word	0x00030260

000bc364 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   bc364:	b508      	push	{r3, lr}
   bc366:	4b03      	ldr	r3, [pc, #12]	; (bc374 <diag_get_source+0x10>)
   bc368:	681b      	ldr	r3, [r3, #0]
   bc36a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bc36e:	9301      	str	r3, [sp, #4]
   bc370:	bd08      	pop	{r3, pc}
   bc372:	0000      	.short	0x0000
   bc374:	00030260 	.word	0x00030260

000bc378 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bc378:	b508      	push	{r3, lr}
   bc37a:	4b02      	ldr	r3, [pc, #8]	; (bc384 <system_mode+0xc>)
   bc37c:	681b      	ldr	r3, [r3, #0]
   bc37e:	681b      	ldr	r3, [r3, #0]
   bc380:	9301      	str	r3, [sp, #4]
   bc382:	bd08      	pop	{r3, pc}
   bc384:	00030220 	.word	0x00030220

000bc388 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bc388:	b508      	push	{r3, lr}
   bc38a:	4b02      	ldr	r3, [pc, #8]	; (bc394 <set_system_mode+0xc>)
   bc38c:	681b      	ldr	r3, [r3, #0]
   bc38e:	685b      	ldr	r3, [r3, #4]
   bc390:	9301      	str	r3, [sp, #4]
   bc392:	bd08      	pop	{r3, pc}
   bc394:	00030220 	.word	0x00030220

000bc398 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bc398:	b508      	push	{r3, lr}
   bc39a:	4b02      	ldr	r3, [pc, #8]	; (bc3a4 <system_delay_ms+0xc>)
   bc39c:	681b      	ldr	r3, [r3, #0]
   bc39e:	695b      	ldr	r3, [r3, #20]
   bc3a0:	9301      	str	r3, [sp, #4]
   bc3a2:	bd08      	pop	{r3, pc}
   bc3a4:	00030220 	.word	0x00030220

000bc3a8 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   bc3a8:	b508      	push	{r3, lr}
   bc3aa:	4b02      	ldr	r3, [pc, #8]	; (bc3b4 <system_subscribe_event+0xc>)
   bc3ac:	681b      	ldr	r3, [r3, #0]
   bc3ae:	6a1b      	ldr	r3, [r3, #32]
   bc3b0:	9301      	str	r3, [sp, #4]
   bc3b2:	bd08      	pop	{r3, pc}
   bc3b4:	00030220 	.word	0x00030220

000bc3b8 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   bc3b8:	b508      	push	{r3, lr}
   bc3ba:	4b02      	ldr	r3, [pc, #8]	; (bc3c4 <system_thread_set_state+0xc>)
   bc3bc:	681b      	ldr	r3, [r3, #0]
   bc3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc3c0:	9301      	str	r3, [sp, #4]
   bc3c2:	bd08      	pop	{r3, pc}
   bc3c4:	00030220 	.word	0x00030220

000bc3c8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bc3c8:	b508      	push	{r3, lr}
   bc3ca:	4b02      	ldr	r3, [pc, #8]	; (bc3d4 <application_thread_current+0xc>)
   bc3cc:	681b      	ldr	r3, [r3, #0]
   bc3ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc3d0:	9301      	str	r3, [sp, #4]
   bc3d2:	bd08      	pop	{r3, pc}
   bc3d4:	00030220 	.word	0x00030220

000bc3d8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bc3d8:	b508      	push	{r3, lr}
   bc3da:	4b02      	ldr	r3, [pc, #8]	; (bc3e4 <application_thread_invoke+0xc>)
   bc3dc:	681b      	ldr	r3, [r3, #0]
   bc3de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc3e0:	9301      	str	r3, [sp, #4]
   bc3e2:	bd08      	pop	{r3, pc}
   bc3e4:	00030220 	.word	0x00030220

000bc3e8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bc3e8:	b508      	push	{r3, lr}
   bc3ea:	4b02      	ldr	r3, [pc, #8]	; (bc3f4 <system_thread_get_state+0xc>)
   bc3ec:	681b      	ldr	r3, [r3, #0]
   bc3ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bc3f0:	9301      	str	r3, [sp, #4]
   bc3f2:	bd08      	pop	{r3, pc}
   bc3f4:	00030220 	.word	0x00030220

000bc3f8 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   bc3f8:	b508      	push	{r3, lr}
   bc3fa:	4b02      	ldr	r3, [pc, #8]	; (bc404 <system_notify_time_changed+0xc>)
   bc3fc:	681b      	ldr	r3, [r3, #0]
   bc3fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bc400:	9301      	str	r3, [sp, #4]
   bc402:	bd08      	pop	{r3, pc}
   bc404:	00030220 	.word	0x00030220

000bc408 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bc408:	b508      	push	{r3, lr}
   bc40a:	4b03      	ldr	r3, [pc, #12]	; (bc418 <system_ctrl_set_app_request_handler+0x10>)
   bc40c:	681b      	ldr	r3, [r3, #0]
   bc40e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bc412:	9301      	str	r3, [sp, #4]
   bc414:	bd08      	pop	{r3, pc}
   bc416:	0000      	.short	0x0000
   bc418:	00030220 	.word	0x00030220

000bc41c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bc41c:	b508      	push	{r3, lr}
   bc41e:	4b03      	ldr	r3, [pc, #12]	; (bc42c <system_ctrl_set_result+0x10>)
   bc420:	681b      	ldr	r3, [r3, #0]
   bc422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bc426:	9301      	str	r3, [sp, #4]
   bc428:	bd08      	pop	{r3, pc}
   bc42a:	0000      	.short	0x0000
   bc42c:	00030220 	.word	0x00030220

000bc430 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   bc430:	b508      	push	{r3, lr}
   bc432:	4b03      	ldr	r3, [pc, #12]	; (bc440 <system_power_management_set_config+0x10>)
   bc434:	681b      	ldr	r3, [r3, #0]
   bc436:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bc43a:	9301      	str	r3, [sp, #4]
   bc43c:	bd08      	pop	{r3, pc}
   bc43e:	0000      	.short	0x0000
   bc440:	00030220 	.word	0x00030220

000bc444 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   bc444:	b508      	push	{r3, lr}
   bc446:	4b03      	ldr	r3, [pc, #12]	; (bc454 <system_sleep_ext+0x10>)
   bc448:	681b      	ldr	r3, [r3, #0]
   bc44a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   bc44e:	9301      	str	r3, [sp, #4]
   bc450:	bd08      	pop	{r3, pc}
   bc452:	0000      	.short	0x0000
   bc454:	00030220 	.word	0x00030220

000bc458 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   bc458:	b508      	push	{r3, lr}
   bc45a:	4b03      	ldr	r3, [pc, #12]	; (bc468 <system_reset+0x10>)
   bc45c:	681b      	ldr	r3, [r3, #0]
   bc45e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   bc462:	9301      	str	r3, [sp, #4]
   bc464:	bd08      	pop	{r3, pc}
   bc466:	0000      	.short	0x0000
   bc468:	00030220 	.word	0x00030220

000bc46c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   bc46c:	b508      	push	{r3, lr}
   bc46e:	4b02      	ldr	r3, [pc, #8]	; (bc478 <spark_variable+0xc>)
   bc470:	681b      	ldr	r3, [r3, #0]
   bc472:	681b      	ldr	r3, [r3, #0]
   bc474:	9301      	str	r3, [sp, #4]
   bc476:	bd08      	pop	{r3, pc}
   bc478:	00030244 	.word	0x00030244

000bc47c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bc47c:	b508      	push	{r3, lr}
   bc47e:	4b02      	ldr	r3, [pc, #8]	; (bc488 <spark_function+0xc>)
   bc480:	681b      	ldr	r3, [r3, #0]
   bc482:	685b      	ldr	r3, [r3, #4]
   bc484:	9301      	str	r3, [sp, #4]
   bc486:	bd08      	pop	{r3, pc}
   bc488:	00030244 	.word	0x00030244

000bc48c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bc48c:	b508      	push	{r3, lr}
   bc48e:	4b02      	ldr	r3, [pc, #8]	; (bc498 <spark_process+0xc>)
   bc490:	681b      	ldr	r3, [r3, #0]
   bc492:	689b      	ldr	r3, [r3, #8]
   bc494:	9301      	str	r3, [sp, #4]
   bc496:	bd08      	pop	{r3, pc}
   bc498:	00030244 	.word	0x00030244

000bc49c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   bc49c:	b508      	push	{r3, lr}
   bc49e:	4b02      	ldr	r3, [pc, #8]	; (bc4a8 <spark_cloud_flag_connect+0xc>)
   bc4a0:	681b      	ldr	r3, [r3, #0]
   bc4a2:	68db      	ldr	r3, [r3, #12]
   bc4a4:	9301      	str	r3, [sp, #4]
   bc4a6:	bd08      	pop	{r3, pc}
   bc4a8:	00030244 	.word	0x00030244

000bc4ac <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bc4ac:	b508      	push	{r3, lr}
   bc4ae:	4b02      	ldr	r3, [pc, #8]	; (bc4b8 <spark_cloud_flag_connected+0xc>)
   bc4b0:	681b      	ldr	r3, [r3, #0]
   bc4b2:	695b      	ldr	r3, [r3, #20]
   bc4b4:	9301      	str	r3, [sp, #4]
   bc4b6:	bd08      	pop	{r3, pc}
   bc4b8:	00030244 	.word	0x00030244

000bc4bc <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   bc4bc:	b508      	push	{r3, lr}
   bc4be:	4b02      	ldr	r3, [pc, #8]	; (bc4c8 <spark_deviceID+0xc>)
   bc4c0:	681b      	ldr	r3, [r3, #0]
   bc4c2:	69db      	ldr	r3, [r3, #28]
   bc4c4:	9301      	str	r3, [sp, #4]
   bc4c6:	bd08      	pop	{r3, pc}
   bc4c8:	00030244 	.word	0x00030244

000bc4cc <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bc4cc:	b508      	push	{r3, lr}
   bc4ce:	4b02      	ldr	r3, [pc, #8]	; (bc4d8 <spark_send_event+0xc>)
   bc4d0:	681b      	ldr	r3, [r3, #0]
   bc4d2:	6a1b      	ldr	r3, [r3, #32]
   bc4d4:	9301      	str	r3, [sp, #4]
   bc4d6:	bd08      	pop	{r3, pc}
   bc4d8:	00030244 	.word	0x00030244

000bc4dc <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   bc4dc:	b508      	push	{r3, lr}
   bc4de:	4b02      	ldr	r3, [pc, #8]	; (bc4e8 <spark_sync_time+0xc>)
   bc4e0:	681b      	ldr	r3, [r3, #0]
   bc4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc4e4:	9301      	str	r3, [sp, #4]
   bc4e6:	bd08      	pop	{r3, pc}
   bc4e8:	00030244 	.word	0x00030244

000bc4ec <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bc4ec:	b508      	push	{r3, lr}
   bc4ee:	4b02      	ldr	r3, [pc, #8]	; (bc4f8 <spark_sync_time_pending+0xc>)
   bc4f0:	681b      	ldr	r3, [r3, #0]
   bc4f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc4f4:	9301      	str	r3, [sp, #4]
   bc4f6:	bd08      	pop	{r3, pc}
   bc4f8:	00030244 	.word	0x00030244

000bc4fc <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   bc4fc:	b508      	push	{r3, lr}
   bc4fe:	4b02      	ldr	r3, [pc, #8]	; (bc508 <spark_sync_time_last+0xc>)
   bc500:	681b      	ldr	r3, [r3, #0]
   bc502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc504:	9301      	str	r3, [sp, #4]
   bc506:	bd08      	pop	{r3, pc}
   bc508:	00030244 	.word	0x00030244

000bc50c <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   bc50c:	b508      	push	{r3, lr}
   bc50e:	4b02      	ldr	r3, [pc, #8]	; (bc518 <spark_set_connection_property+0xc>)
   bc510:	681b      	ldr	r3, [r3, #0]
   bc512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bc514:	9301      	str	r3, [sp, #4]
   bc516:	bd08      	pop	{r3, pc}
   bc518:	00030244 	.word	0x00030244

000bc51c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bc51c:	b508      	push	{r3, lr}
   bc51e:	4b02      	ldr	r3, [pc, #8]	; (bc528 <spark_set_random_seed_from_cloud_handler+0xc>)
   bc520:	681b      	ldr	r3, [r3, #0]
   bc522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bc524:	9301      	str	r3, [sp, #4]
   bc526:	bd08      	pop	{r3, pc}
   bc528:	00030244 	.word	0x00030244

000bc52c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   bc52c:	b508      	push	{r3, lr}
   bc52e:	4b02      	ldr	r3, [pc, #8]	; (bc538 <spark_cloud_disconnect+0xc>)
   bc530:	681b      	ldr	r3, [r3, #0]
   bc532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc534:	9301      	str	r3, [sp, #4]
   bc536:	bd08      	pop	{r3, pc}
   bc538:	00030244 	.word	0x00030244

000bc53c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bc53c:	b508      	push	{r3, lr}
   bc53e:	4b02      	ldr	r3, [pc, #8]	; (bc548 <network_connect+0xc>)
   bc540:	681b      	ldr	r3, [r3, #0]
   bc542:	685b      	ldr	r3, [r3, #4]
   bc544:	9301      	str	r3, [sp, #4]
   bc546:	bd08      	pop	{r3, pc}
   bc548:	00030240 	.word	0x00030240

000bc54c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bc54c:	b508      	push	{r3, lr}
   bc54e:	4b02      	ldr	r3, [pc, #8]	; (bc558 <network_connecting+0xc>)
   bc550:	681b      	ldr	r3, [r3, #0]
   bc552:	689b      	ldr	r3, [r3, #8]
   bc554:	9301      	str	r3, [sp, #4]
   bc556:	bd08      	pop	{r3, pc}
   bc558:	00030240 	.word	0x00030240

000bc55c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bc55c:	b508      	push	{r3, lr}
   bc55e:	4b02      	ldr	r3, [pc, #8]	; (bc568 <network_disconnect+0xc>)
   bc560:	681b      	ldr	r3, [r3, #0]
   bc562:	68db      	ldr	r3, [r3, #12]
   bc564:	9301      	str	r3, [sp, #4]
   bc566:	bd08      	pop	{r3, pc}
   bc568:	00030240 	.word	0x00030240

000bc56c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bc56c:	b508      	push	{r3, lr}
   bc56e:	4b02      	ldr	r3, [pc, #8]	; (bc578 <network_ready+0xc>)
   bc570:	681b      	ldr	r3, [r3, #0]
   bc572:	691b      	ldr	r3, [r3, #16]
   bc574:	9301      	str	r3, [sp, #4]
   bc576:	bd08      	pop	{r3, pc}
   bc578:	00030240 	.word	0x00030240

000bc57c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bc57c:	b508      	push	{r3, lr}
   bc57e:	4b02      	ldr	r3, [pc, #8]	; (bc588 <network_on+0xc>)
   bc580:	681b      	ldr	r3, [r3, #0]
   bc582:	695b      	ldr	r3, [r3, #20]
   bc584:	9301      	str	r3, [sp, #4]
   bc586:	bd08      	pop	{r3, pc}
   bc588:	00030240 	.word	0x00030240

000bc58c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bc58c:	b508      	push	{r3, lr}
   bc58e:	4b02      	ldr	r3, [pc, #8]	; (bc598 <network_off+0xc>)
   bc590:	681b      	ldr	r3, [r3, #0]
   bc592:	699b      	ldr	r3, [r3, #24]
   bc594:	9301      	str	r3, [sp, #4]
   bc596:	bd08      	pop	{r3, pc}
   bc598:	00030240 	.word	0x00030240

000bc59c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bc59c:	b508      	push	{r3, lr}
   bc59e:	4b02      	ldr	r3, [pc, #8]	; (bc5a8 <network_listen+0xc>)
   bc5a0:	681b      	ldr	r3, [r3, #0]
   bc5a2:	69db      	ldr	r3, [r3, #28]
   bc5a4:	9301      	str	r3, [sp, #4]
   bc5a6:	bd08      	pop	{r3, pc}
   bc5a8:	00030240 	.word	0x00030240

000bc5ac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bc5ac:	b508      	push	{r3, lr}
   bc5ae:	4b02      	ldr	r3, [pc, #8]	; (bc5b8 <network_listening+0xc>)
   bc5b0:	681b      	ldr	r3, [r3, #0]
   bc5b2:	6a1b      	ldr	r3, [r3, #32]
   bc5b4:	9301      	str	r3, [sp, #4]
   bc5b6:	bd08      	pop	{r3, pc}
   bc5b8:	00030240 	.word	0x00030240

000bc5bc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bc5bc:	b508      	push	{r3, lr}
   bc5be:	4b02      	ldr	r3, [pc, #8]	; (bc5c8 <network_set_listen_timeout+0xc>)
   bc5c0:	681b      	ldr	r3, [r3, #0]
   bc5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc5c4:	9301      	str	r3, [sp, #4]
   bc5c6:	bd08      	pop	{r3, pc}
   bc5c8:	00030240 	.word	0x00030240

000bc5cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bc5cc:	b508      	push	{r3, lr}
   bc5ce:	4b02      	ldr	r3, [pc, #8]	; (bc5d8 <network_get_listen_timeout+0xc>)
   bc5d0:	681b      	ldr	r3, [r3, #0]
   bc5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc5d4:	9301      	str	r3, [sp, #4]
   bc5d6:	bd08      	pop	{r3, pc}
   bc5d8:	00030240 	.word	0x00030240

000bc5dc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bc5dc:	b508      	push	{r3, lr}
   bc5de:	4b02      	ldr	r3, [pc, #8]	; (bc5e8 <network_is_on+0xc>)
   bc5e0:	681b      	ldr	r3, [r3, #0]
   bc5e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc5e4:	9301      	str	r3, [sp, #4]
   bc5e6:	bd08      	pop	{r3, pc}
   bc5e8:	00030240 	.word	0x00030240

000bc5ec <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bc5ec:	b508      	push	{r3, lr}
   bc5ee:	4b02      	ldr	r3, [pc, #8]	; (bc5f8 <network_is_off+0xc>)
   bc5f0:	681b      	ldr	r3, [r3, #0]
   bc5f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc5f4:	9301      	str	r3, [sp, #4]
   bc5f6:	bd08      	pop	{r3, pc}
   bc5f8:	00030240 	.word	0x00030240

000bc5fc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bc5fc:	b508      	push	{r3, lr}
   bc5fe:	4b02      	ldr	r3, [pc, #8]	; (bc608 <malloc+0xc>)
   bc600:	681b      	ldr	r3, [r3, #0]
   bc602:	681b      	ldr	r3, [r3, #0]
   bc604:	9301      	str	r3, [sp, #4]
   bc606:	bd08      	pop	{r3, pc}
   bc608:	0003021c 	.word	0x0003021c

000bc60c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bc60c:	b508      	push	{r3, lr}
   bc60e:	4b02      	ldr	r3, [pc, #8]	; (bc618 <free+0xc>)
   bc610:	681b      	ldr	r3, [r3, #0]
   bc612:	685b      	ldr	r3, [r3, #4]
   bc614:	9301      	str	r3, [sp, #4]
   bc616:	bd08      	pop	{r3, pc}
   bc618:	0003021c 	.word	0x0003021c

000bc61c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bc61c:	b508      	push	{r3, lr}
   bc61e:	4b02      	ldr	r3, [pc, #8]	; (bc628 <realloc+0xc>)
   bc620:	681b      	ldr	r3, [r3, #0]
   bc622:	689b      	ldr	r3, [r3, #8]
   bc624:	9301      	str	r3, [sp, #4]
   bc626:	bd08      	pop	{r3, pc}
   bc628:	0003021c 	.word	0x0003021c

000bc62c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   bc62c:	b508      	push	{r3, lr}
   bc62e:	4b02      	ldr	r3, [pc, #8]	; (bc638 <siprintf+0xc>)
   bc630:	681b      	ldr	r3, [r3, #0]
   bc632:	691b      	ldr	r3, [r3, #16]
   bc634:	9301      	str	r3, [sp, #4]
   bc636:	bd08      	pop	{r3, pc}
   bc638:	0003021c 	.word	0x0003021c

000bc63c <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bc63c:	b508      	push	{r3, lr}
   bc63e:	4b02      	ldr	r3, [pc, #8]	; (bc648 <sscanf+0xc>)
   bc640:	681b      	ldr	r3, [r3, #0]
   bc642:	695b      	ldr	r3, [r3, #20]
   bc644:	9301      	str	r3, [sp, #4]
   bc646:	bd08      	pop	{r3, pc}
   bc648:	0003021c 	.word	0x0003021c

000bc64c <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bc64c:	b508      	push	{r3, lr}
   bc64e:	4b02      	ldr	r3, [pc, #8]	; (bc658 <snprintf+0xc>)
   bc650:	681b      	ldr	r3, [r3, #0]
   bc652:	69db      	ldr	r3, [r3, #28]
   bc654:	9301      	str	r3, [sp, #4]
   bc656:	bd08      	pop	{r3, pc}
   bc658:	0003021c 	.word	0x0003021c

000bc65c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bc65c:	b508      	push	{r3, lr}
   bc65e:	4b02      	ldr	r3, [pc, #8]	; (bc668 <vsnprintf+0xc>)
   bc660:	681b      	ldr	r3, [r3, #0]
   bc662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc664:	9301      	str	r3, [sp, #4]
   bc666:	bd08      	pop	{r3, pc}
   bc668:	0003021c 	.word	0x0003021c

000bc66c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bc66c:	b508      	push	{r3, lr}
   bc66e:	4b02      	ldr	r3, [pc, #8]	; (bc678 <abort+0xc>)
   bc670:	681b      	ldr	r3, [r3, #0]
   bc672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc674:	9301      	str	r3, [sp, #4]
   bc676:	bd08      	pop	{r3, pc}
   bc678:	0003021c 	.word	0x0003021c

000bc67c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bc67c:	b508      	push	{r3, lr}
   bc67e:	4b02      	ldr	r3, [pc, #8]	; (bc688 <_malloc_r+0xc>)
   bc680:	681b      	ldr	r3, [r3, #0]
   bc682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc684:	9301      	str	r3, [sp, #4]
   bc686:	bd08      	pop	{r3, pc}
   bc688:	0003021c 	.word	0x0003021c

000bc68c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bc68c:	b508      	push	{r3, lr}
   bc68e:	4b02      	ldr	r3, [pc, #8]	; (bc698 <__errno+0xc>)
   bc690:	681b      	ldr	r3, [r3, #0]
   bc692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bc694:	9301      	str	r3, [sp, #4]
   bc696:	bd08      	pop	{r3, pc}
   bc698:	0003021c 	.word	0x0003021c

000bc69c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bc69c:	b508      	push	{r3, lr}
   bc69e:	4b02      	ldr	r3, [pc, #8]	; (bc6a8 <__assert_func+0xc>)
   bc6a0:	681b      	ldr	r3, [r3, #0]
   bc6a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc6a4:	9301      	str	r3, [sp, #4]
   bc6a6:	bd08      	pop	{r3, pc}
   bc6a8:	0003021c 	.word	0x0003021c

000bc6ac <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bc6ac:	b508      	push	{r3, lr}
   bc6ae:	4b02      	ldr	r3, [pc, #8]	; (bc6b8 <newlib_impure_ptr_callback+0xc>)
   bc6b0:	681b      	ldr	r3, [r3, #0]
   bc6b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc6b4:	9301      	str	r3, [sp, #4]
   bc6b6:	bd08      	pop	{r3, pc}
   bc6b8:	0003021c 	.word	0x0003021c

000bc6bc <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   bc6bc:	b508      	push	{r3, lr}
   bc6be:	4b02      	ldr	r3, [pc, #8]	; (bc6c8 <strftime+0xc>)
   bc6c0:	681b      	ldr	r3, [r3, #0]
   bc6c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bc6c4:	9301      	str	r3, [sp, #4]
   bc6c6:	bd08      	pop	{r3, pc}
   bc6c8:	0003021c 	.word	0x0003021c

000bc6cc <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bc6cc:	b508      	push	{r3, lr}
   bc6ce:	4b02      	ldr	r3, [pc, #8]	; (bc6d8 <localtime_r+0xc>)
   bc6d0:	681b      	ldr	r3, [r3, #0]
   bc6d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc6d4:	9301      	str	r3, [sp, #4]
   bc6d6:	bd08      	pop	{r3, pc}
   bc6d8:	0003021c 	.word	0x0003021c

000bc6dc <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bc6dc:	b508      	push	{r3, lr}
   bc6de:	4b02      	ldr	r3, [pc, #8]	; (bc6e8 <gmtime_r+0xc>)
   bc6e0:	681b      	ldr	r3, [r3, #0]
   bc6e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bc6e4:	9301      	str	r3, [sp, #4]
   bc6e6:	bd08      	pop	{r3, pc}
   bc6e8:	0003021c 	.word	0x0003021c

000bc6ec <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   bc6ec:	b508      	push	{r3, lr}
   bc6ee:	4b02      	ldr	r3, [pc, #8]	; (bc6f8 <mktime+0xc>)
   bc6f0:	681b      	ldr	r3, [r3, #0]
   bc6f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc6f4:	9301      	str	r3, [sp, #4]
   bc6f6:	bd08      	pop	{r3, pc}
   bc6f8:	0003021c 	.word	0x0003021c

000bc6fc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bc6fc:	2100      	movs	r1, #0
   bc6fe:	f7ff be4b 	b.w	bc398 <system_delay_ms>

000bc702 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bc702:	b510      	push	{r4, lr}
      if (_M_empty())
   bc704:	6883      	ldr	r3, [r0, #8]
   bc706:	4604      	mov	r4, r0
   bc708:	b90b      	cbnz	r3, bc70e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bc70a:	f003 f9bb 	bl	bfa84 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc70e:	68c3      	ldr	r3, [r0, #12]
   bc710:	4798      	blx	r3
      if (_M_manager)
   bc712:	68a3      	ldr	r3, [r4, #8]
   bc714:	b11b      	cbz	r3, bc71e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bc716:	2203      	movs	r2, #3
   bc718:	4621      	mov	r1, r4
   bc71a:	4620      	mov	r0, r4
   bc71c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bc71e:	4620      	mov	r0, r4
   bc720:	2110      	movs	r1, #16
}
   bc722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bc726:	f7f7 bcba 	b.w	b409e <_ZdlPvj>

000bc72a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bc72a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bc72c:	6843      	ldr	r3, [r0, #4]
   bc72e:	3b01      	subs	r3, #1
    {
   bc730:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bc732:	6043      	str	r3, [r0, #4]
   bc734:	b963      	cbnz	r3, bc750 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bc736:	6803      	ldr	r3, [r0, #0]
   bc738:	689b      	ldr	r3, [r3, #8]
   bc73a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bc73c:	68a3      	ldr	r3, [r4, #8]
   bc73e:	3b01      	subs	r3, #1
   bc740:	60a3      	str	r3, [r4, #8]
   bc742:	b92b      	cbnz	r3, bc750 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bc744:	6823      	ldr	r3, [r4, #0]
   bc746:	4620      	mov	r0, r4
   bc748:	68db      	ldr	r3, [r3, #12]
    }
   bc74a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bc74e:	4718      	bx	r3
    }
   bc750:	bd10      	pop	{r4, pc}

000bc752 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc752:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bc754:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc758:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bc75a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bc75e:	42ae      	cmp	r6, r5
   bc760:	d004      	beq.n	bc76c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bc762:	4628      	mov	r0, r5
   bc764:	f002 fac0 	bl	bece8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bc768:	3510      	adds	r5, #16
   bc76a:	e7f8      	b.n	bc75e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bc76c:	6820      	ldr	r0, [r4, #0]
   bc76e:	f7ff ff4d 	bl	bc60c <free>
    AllocatorT::free(data_);
}
   bc772:	4620      	mov	r0, r4
   bc774:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc778 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   bc778:	4802      	ldr	r0, [pc, #8]	; (bc784 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bc77a:	2300      	movs	r3, #0
   bc77c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   bc77e:	f7ff bb51 	b.w	bbe24 <os_mutex_recursive_create>
   bc782:	bf00      	nop
   bc784:	2003e580 	.word	0x2003e580

000bc788 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bc788:	2200      	movs	r2, #0
   bc78a:	6840      	ldr	r0, [r0, #4]
   bc78c:	4611      	mov	r1, r2
   bc78e:	f7ff beed 	b.w	bc56c <network_ready>

000bc792 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bc792:	2200      	movs	r2, #0
   bc794:	6840      	ldr	r0, [r0, #4]
   bc796:	4611      	mov	r1, r2
   bc798:	f7ff bf08 	b.w	bc5ac <network_listening>

000bc79c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bc79c:	2200      	movs	r2, #0
   bc79e:	6840      	ldr	r0, [r0, #4]
   bc7a0:	4611      	mov	r1, r2
   bc7a2:	f7ff bf13 	b.w	bc5cc <network_get_listen_timeout>

000bc7a6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bc7a6:	6840      	ldr	r0, [r0, #4]
   bc7a8:	2200      	movs	r2, #0
   bc7aa:	f7ff bf07 	b.w	bc5bc <network_set_listen_timeout>

000bc7ae <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bc7ae:	6840      	ldr	r0, [r0, #4]
   bc7b0:	2200      	movs	r2, #0
   bc7b2:	f081 0101 	eor.w	r1, r1, #1
   bc7b6:	f7ff bef1 	b.w	bc59c <network_listen>

000bc7ba <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bc7ba:	2300      	movs	r3, #0
   bc7bc:	6840      	ldr	r0, [r0, #4]
   bc7be:	461a      	mov	r2, r3
   bc7c0:	4619      	mov	r1, r3
   bc7c2:	f7ff bee3 	b.w	bc58c <network_off>

000bc7c6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bc7c6:	2300      	movs	r3, #0
   bc7c8:	6840      	ldr	r0, [r0, #4]
   bc7ca:	461a      	mov	r2, r3
   bc7cc:	4619      	mov	r1, r3
   bc7ce:	f7ff bed5 	b.w	bc57c <network_on>

000bc7d2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bc7d2:	2200      	movs	r2, #0
   bc7d4:	6840      	ldr	r0, [r0, #4]
   bc7d6:	4611      	mov	r1, r2
   bc7d8:	f7ff beb8 	b.w	bc54c <network_connecting>

000bc7dc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bc7dc:	6840      	ldr	r0, [r0, #4]
   bc7de:	2200      	movs	r2, #0
   bc7e0:	2102      	movs	r1, #2
   bc7e2:	f7ff bebb 	b.w	bc55c <network_disconnect>

000bc7e6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bc7e6:	2300      	movs	r3, #0
   bc7e8:	6840      	ldr	r0, [r0, #4]
   bc7ea:	461a      	mov	r2, r3
   bc7ec:	f7ff bea6 	b.w	bc53c <network_connect>

000bc7f0 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   bc7f0:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   bc7f2:	4b13      	ldr	r3, [pc, #76]	; (bc840 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   bc7f4:	6003      	str	r3, [r0, #0]
   bc7f6:	2518      	movs	r5, #24
   bc7f8:	3330      	adds	r3, #48	; 0x30
   bc7fa:	b086      	sub	sp, #24
   bc7fc:	460e      	mov	r6, r1
   bc7fe:	6043      	str	r3, [r0, #4]
   bc800:	462a      	mov	r2, r5
   bc802:	2100      	movs	r1, #0
   bc804:	4604      	mov	r4, r0
   bc806:	3008      	adds	r0, #8
   bc808:	f003 fe6e 	bl	c04e8 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bc80c:	2200      	movs	r2, #0
   bc80e:	6870      	ldr	r0, [r6, #4]
   bc810:	4611      	mov	r1, r2
   bc812:	f7ff feab 	bl	bc56c <network_ready>
   bc816:	b178      	cbz	r0, bc838 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   bc818:	2100      	movs	r1, #0
   bc81a:	462a      	mov	r2, r5
   bc81c:	4668      	mov	r0, sp
   bc81e:	f003 fe63 	bl	c04e8 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   bc822:	4669      	mov	r1, sp
   bc824:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   bc826:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   bc82a:	f7ff fabb 	bl	bbda4 <cellular_signal>
   bc82e:	b918      	cbnz	r0, bc838 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   bc830:	4669      	mov	r1, sp
   bc832:	4620      	mov	r0, r4
   bc834:	f000 f8b8 	bl	bc9a8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   bc838:	4620      	mov	r0, r4
   bc83a:	b006      	add	sp, #24
   bc83c:	bd70      	pop	{r4, r5, r6, pc}
   bc83e:	bf00      	nop
   bc840:	000c2274 	.word	0x000c2274

000bc844 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bc844:	4b08      	ldr	r3, [pc, #32]	; (bc868 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bc846:	b510      	push	{r4, lr}
   bc848:	2428      	movs	r4, #40	; 0x28
   bc84a:	4622      	mov	r2, r4
   bc84c:	4618      	mov	r0, r3
   bc84e:	2100      	movs	r1, #0
   bc850:	f003 fe4a 	bl	c04e8 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bc854:	4b05      	ldr	r3, [pc, #20]	; (bc86c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bc856:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bc858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc85c:	6042      	str	r2, [r0, #4]
   bc85e:	2204      	movs	r2, #4
   bc860:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bc862:	4a03      	ldr	r2, [pc, #12]	; (bc870 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bc864:	601a      	str	r2, [r3, #0]
   bc866:	bd10      	pop	{r4, pc}
   bc868:	2003e58c 	.word	0x2003e58c
   bc86c:	2003e584 	.word	0x2003e584
   bc870:	000c2238 	.word	0x000c2238

000bc874 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   bc874:	4770      	bx	lr

000bc876 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   bc876:	7b00      	ldrb	r0, [r0, #12]
   bc878:	4770      	bx	lr

000bc87a <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bc87a:	7b03      	ldrb	r3, [r0, #12]
   bc87c:	b14b      	cbz	r3, bc892 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   bc87e:	6903      	ldr	r3, [r0, #16]
   bc880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bc884:	d005      	beq.n	bc892 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bc886:	6980      	ldr	r0, [r0, #24]
   bc888:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   bc88c:	bf18      	it	ne
   bc88e:	2001      	movne	r0, #1
   bc890:	4770      	bx	lr
   bc892:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   bc894:	4770      	bx	lr

000bc896 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   bc896:	6803      	ldr	r3, [r0, #0]
   bc898:	6a1b      	ldr	r3, [r3, #32]
   bc89a:	4718      	bx	r3

000bc89c <_ZNK14CellularSignal7printToER5Print>:
{
   bc89c:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   bc89e:	6803      	ldr	r3, [r0, #0]
{
   bc8a0:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   bc8a2:	691b      	ldr	r3, [r3, #16]
{
   bc8a4:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   bc8a6:	4798      	blx	r3
   bc8a8:	2102      	movs	r1, #2
   bc8aa:	4628      	mov	r0, r5
   bc8ac:	f002 f8fa 	bl	beaa4 <_ZN5Print5printEfi>
    n += p.print(',');
   bc8b0:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   bc8b2:	4604      	mov	r4, r0
    n += p.print(',');
   bc8b4:	4628      	mov	r0, r5
   bc8b6:	f001 ffff 	bl	be8b8 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   bc8ba:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   bc8bc:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   bc8be:	699b      	ldr	r3, [r3, #24]
   bc8c0:	4630      	mov	r0, r6
   bc8c2:	4798      	blx	r3
   bc8c4:	2102      	movs	r1, #2
   bc8c6:	4628      	mov	r0, r5
   bc8c8:	f002 f8ec 	bl	beaa4 <_ZN5Print5printEfi>
}
   bc8cc:	4420      	add	r0, r4
   bc8ce:	bd70      	pop	{r4, r5, r6, pc}

000bc8d0 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   bc8d0:	f1a0 0004 	sub.w	r0, r0, #4
   bc8d4:	f7ff bfe2 	b.w	bc89c <_ZNK14CellularSignal7printToER5Print>

000bc8d8 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   bc8d8:	b510      	push	{r4, lr}
   bc8da:	2120      	movs	r1, #32
   bc8dc:	4604      	mov	r4, r0
   bc8de:	f7f7 fbde 	bl	b409e <_ZdlPvj>
   bc8e2:	4620      	mov	r0, r4
   bc8e4:	bd10      	pop	{r4, pc}
	...

000bc8e8 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bc8e8:	7b03      	ldrb	r3, [r0, #12]
   bc8ea:	b17b      	cbz	r3, bc90c <_ZNK14CellularSignal11getStrengthEv+0x24>
   bc8ec:	6943      	ldr	r3, [r0, #20]
   bc8ee:	2b00      	cmp	r3, #0
   bc8f0:	db0c      	blt.n	bc90c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   bc8f2:	ee07 3a90 	vmov	s15, r3
   bc8f6:	ed9f 7a07 	vldr	s14, [pc, #28]	; bc914 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   bc8fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bc8fe:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bc902:	eddf 7a05 	vldr	s15, [pc, #20]	; bc918 <_ZNK14CellularSignal11getStrengthEv+0x30>
   bc906:	ee20 0a27 	vmul.f32	s0, s0, s15
   bc90a:	4770      	bx	lr
    return -1.0f;
   bc90c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bc910:	4770      	bx	lr
   bc912:	bf00      	nop
   bc914:	477fff00 	.word	0x477fff00
   bc918:	42c80000 	.word	0x42c80000

000bc91c <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bc91c:	7b03      	ldrb	r3, [r0, #12]
   bc91e:	b163      	cbz	r3, bc93a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bc920:	6903      	ldr	r3, [r0, #16]
   bc922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bc926:	d008      	beq.n	bc93a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bc928:	ee07 3a90 	vmov	s15, r3
   bc92c:	ed9f 7a04 	vldr	s14, [pc, #16]	; bc940 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bc930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bc934:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bc938:	4770      	bx	lr
    return 0.0f;
   bc93a:	ed9f 0a02 	vldr	s0, [pc, #8]	; bc944 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bc93e:	4770      	bx	lr
   bc940:	42c80000 	.word	0x42c80000
   bc944:	00000000 	.word	0x00000000

000bc948 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bc948:	7b03      	ldrb	r3, [r0, #12]
   bc94a:	b17b      	cbz	r3, bc96c <_ZNK14CellularSignal10getQualityEv+0x24>
   bc94c:	69c3      	ldr	r3, [r0, #28]
   bc94e:	2b00      	cmp	r3, #0
   bc950:	db0c      	blt.n	bc96c <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bc952:	ee07 3a90 	vmov	s15, r3
   bc956:	ed9f 7a07 	vldr	s14, [pc, #28]	; bc974 <_ZNK14CellularSignal10getQualityEv+0x2c>
   bc95a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bc95e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bc962:	eddf 7a05 	vldr	s15, [pc, #20]	; bc978 <_ZNK14CellularSignal10getQualityEv+0x30>
   bc966:	ee20 0a27 	vmul.f32	s0, s0, s15
   bc96a:	4770      	bx	lr
    return -1.0f;
   bc96c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bc970:	4770      	bx	lr
   bc972:	bf00      	nop
   bc974:	477fff00 	.word	0x477fff00
   bc978:	42c80000 	.word	0x42c80000

000bc97c <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   bc97c:	7b03      	ldrb	r3, [r0, #12]
   bc97e:	b163      	cbz	r3, bc99a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   bc980:	6983      	ldr	r3, [r0, #24]
   bc982:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bc986:	d008      	beq.n	bc99a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   bc988:	ee07 3a90 	vmov	s15, r3
   bc98c:	ed9f 7a04 	vldr	s14, [pc, #16]	; bc9a0 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   bc990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bc994:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bc998:	4770      	bx	lr
    return 0.0f;
   bc99a:	ed9f 0a02 	vldr	s0, [pc, #8]	; bc9a4 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   bc99e:	4770      	bx	lr
   bc9a0:	42c80000 	.word	0x42c80000
   bc9a4:	00000000 	.word	0x00000000

000bc9a8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   bc9a8:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   bc9aa:	460d      	mov	r5, r1
   bc9ac:	f100 0408 	add.w	r4, r0, #8
   bc9b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc9b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc9b4:	e895 0003 	ldmia.w	r5, {r0, r1}
   bc9b8:	e884 0003 	stmia.w	r4, {r0, r1}
}
   bc9bc:	2001      	movs	r0, #1
   bc9be:	bd30      	pop	{r4, r5, pc}

000bc9c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bc9c0:	4770      	bx	lr

000bc9c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bc9c2:	2000      	movs	r0, #0
   bc9c4:	4770      	bx	lr

000bc9c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bc9c6:	b510      	push	{r4, lr}
   bc9c8:	2110      	movs	r1, #16
   bc9ca:	4604      	mov	r4, r0
   bc9cc:	f7f7 fb67 	bl	b409e <_ZdlPvj>
   bc9d0:	4620      	mov	r0, r4
   bc9d2:	bd10      	pop	{r4, pc}

000bc9d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bc9d4:	b508      	push	{r3, lr}
      { delete this; }
   bc9d6:	f7ff fff6 	bl	bc9c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bc9da:	bd08      	pop	{r3, pc}

000bc9dc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bc9dc:	b530      	push	{r4, r5, lr}
        type_(type) {
   bc9de:	2200      	movs	r2, #0
   bc9e0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bc9e4:	6002      	str	r2, [r0, #0]
   bc9e6:	8084      	strh	r4, [r0, #4]
   bc9e8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bc9ea:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc9ec:	680c      	ldr	r4, [r1, #0]
   bc9ee:	8085      	strh	r5, [r0, #4]
   bc9f0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bc9f2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bc9f4:	bd30      	pop	{r4, r5, pc}

000bc9f6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bc9f6:	b510      	push	{r4, lr}
   bc9f8:	4604      	mov	r4, r0
    free((void*)msg_);
   bc9fa:	6800      	ldr	r0, [r0, #0]
   bc9fc:	f7ff fe06 	bl	bc60c <free>
}
   bca00:	4620      	mov	r0, r4
   bca02:	bd10      	pop	{r4, pc}

000bca04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bca04:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bca06:	68c4      	ldr	r4, [r0, #12]
   bca08:	b1f4      	cbz	r4, bca48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bca0a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bca0c:	2b02      	cmp	r3, #2
   bca0e:	d103      	bne.n	bca18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bca10:	f104 000c 	add.w	r0, r4, #12
   bca14:	f7ff ffef 	bl	bc9f6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bca18:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bca1a:	b135      	cbz	r5, bca2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bca1c:	4628      	mov	r0, r5
   bca1e:	f7f8 fac8 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
   bca22:	2110      	movs	r1, #16
   bca24:	4628      	mov	r0, r5
   bca26:	f7f7 fb3a 	bl	b409e <_ZdlPvj>
   bca2a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bca2c:	b135      	cbz	r5, bca3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bca2e:	4628      	mov	r0, r5
   bca30:	f7f8 fabf 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
   bca34:	2110      	movs	r1, #16
   bca36:	4628      	mov	r0, r5
   bca38:	f7f7 fb31 	bl	b409e <_ZdlPvj>
   bca3c:	4620      	mov	r0, r4
   bca3e:	2114      	movs	r1, #20
   bca40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bca44:	f7f7 bb2b 	b.w	b409e <_ZdlPvj>
   bca48:	bd38      	pop	{r3, r4, r5, pc}

000bca4a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   bca4a:	b510      	push	{r4, lr}
   bca4c:	b088      	sub	sp, #32
   bca4e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   bca50:	4668      	mov	r0, sp
   bca52:	f002 f994 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   bca56:	4669      	mov	r1, sp
   bca58:	a804      	add	r0, sp, #16
   bca5a:	f002 f9db 	bl	bee14 <_ZN6StringC1ERKS_>
   bca5e:	a804      	add	r0, sp, #16
   bca60:	47a0      	blx	r4
   bca62:	4604      	mov	r4, r0
   bca64:	a804      	add	r0, sp, #16
   bca66:	f002 f93f 	bl	bece8 <_ZN6StringD1Ev>
    String p(param);
   bca6a:	4668      	mov	r0, sp
   bca6c:	f002 f93c 	bl	bece8 <_ZN6StringD1Ev>
}
   bca70:	4620      	mov	r0, r4
   bca72:	b008      	add	sp, #32
   bca74:	bd10      	pop	{r4, pc}

000bca76 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bca76:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bca78:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bca7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bca7e:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bca80:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bca82:	461a      	mov	r2, r3
   bca84:	4669      	mov	r1, sp
   bca86:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bca88:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bca8c:	f8ad 4000 	strh.w	r4, [sp]
   bca90:	f7ff fcf4 	bl	bc47c <spark_function>
}
   bca94:	b004      	add	sp, #16
   bca96:	bd10      	pop	{r4, pc}

000bca98 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bca98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bca9a:	230c      	movs	r3, #12
   bca9c:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bcaa0:	6803      	ldr	r3, [r0, #0]
   bcaa2:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bcaa6:	7a03      	ldrb	r3, [r0, #8]
   bcaa8:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bcaac:	6843      	ldr	r3, [r0, #4]
   bcaae:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bcab0:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bcab2:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bcab4:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bcab8:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bcaba:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bcabe:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bcac2:	f7ff fd33 	bl	bc52c <spark_cloud_disconnect>
}
   bcac6:	b005      	add	sp, #20
   bcac8:	f85d fb04 	ldr.w	pc, [sp], #4

000bcacc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bcacc:	680b      	ldr	r3, [r1, #0]
   bcace:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bcad0:	684b      	ldr	r3, [r1, #4]
   bcad2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bcad4:	b113      	cbz	r3, bcadc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bcad6:	685a      	ldr	r2, [r3, #4]
   bcad8:	3201      	adds	r2, #1
   bcada:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bcadc:	4770      	bx	lr

000bcade <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bcade:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bcae0:	4604      	mov	r4, r0
   bcae2:	4668      	mov	r0, sp
   bcae4:	460d      	mov	r5, r1
   bcae6:	f7ff fff1 	bl	bcacc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcaea:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bcaec:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcaee:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bcaf0:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bcaf2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bcaf4:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bcaf6:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bcaf8:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bcafa:	f7f9 fe03 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bcafe:	b135      	cbz	r5, bcb0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bcb00:	1d28      	adds	r0, r5, #4
   bcb02:	f7f9 fdff 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bcb06:	2108      	movs	r1, #8
   bcb08:	4628      	mov	r0, r5
   bcb0a:	f7f7 fac8 	bl	b409e <_ZdlPvj>
        return p;
    }
   bcb0e:	4620      	mov	r0, r4
   bcb10:	b003      	add	sp, #12
   bcb12:	bd30      	pop	{r4, r5, pc}

000bcb14 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bcb14:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bcb16:	b510      	push	{r4, lr}
      if (_M_empty())
   bcb18:	b90a      	cbnz	r2, bcb1e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bcb1a:	f002 ffb3 	bl	bfa84 <_ZSt25__throw_bad_function_callv>
    }
   bcb1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bcb22:	68c3      	ldr	r3, [r0, #12]
   bcb24:	4718      	bx	r3

000bcb26 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bcb26:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bcb28:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bcb2a:	f100 0110 	add.w	r1, r0, #16
   bcb2e:	f7ff fff1 	bl	bcb14 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bcb32:	bd08      	pop	{r3, pc}

000bcb34 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bcb34:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bcb36:	b510      	push	{r4, lr}
      if (_M_empty())
   bcb38:	b90a      	cbnz	r2, bcb3e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bcb3a:	f002 ffa3 	bl	bfa84 <_ZSt25__throw_bad_function_callv>
    }
   bcb3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bcb42:	68c3      	ldr	r3, [r0, #12]
   bcb44:	4718      	bx	r3

000bcb46 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bcb46:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bcb48:	6800      	ldr	r0, [r0, #0]
   bcb4a:	f100 0110 	add.w	r1, r0, #16
   bcb4e:	f7ff fff1 	bl	bcb34 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bcb52:	bd08      	pop	{r3, pc}

000bcb54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bcb54:	b538      	push	{r3, r4, r5, lr}
   bcb56:	2300      	movs	r3, #0
   bcb58:	4604      	mov	r4, r0
   bcb5a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bcb5c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bcb5e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bcb60:	f7f7 fa99 	bl	b4096 <_Znwj>
   bcb64:	b128      	cbz	r0, bcb72 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bcb66:	2301      	movs	r3, #1
   bcb68:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bcb6c:	4b02      	ldr	r3, [pc, #8]	; (bcb78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bcb6e:	6003      	str	r3, [r0, #0]
   bcb70:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bcb72:	6020      	str	r0, [r4, #0]
	}
   bcb74:	4620      	mov	r0, r4
   bcb76:	bd38      	pop	{r3, r4, r5, pc}
   bcb78:	000c22b0 	.word	0x000c22b0

000bcb7c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bcb7c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bcb7e:	2300      	movs	r3, #0
   bcb80:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bcb82:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bcb84:	4604      	mov	r4, r0
   bcb86:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bcb88:	b12b      	cbz	r3, bcb96 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bcb8a:	2202      	movs	r2, #2
   bcb8c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bcb8e:	68eb      	ldr	r3, [r5, #12]
   bcb90:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bcb92:	68ab      	ldr	r3, [r5, #8]
   bcb94:	60a3      	str	r3, [r4, #8]
    }
   bcb96:	4620      	mov	r0, r4
   bcb98:	bd38      	pop	{r3, r4, r5, pc}
	...

000bcb9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bcb9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bcb9e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bcba0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bcba2:	4668      	mov	r0, sp
   bcba4:	f7ff ff1a 	bl	bc9dc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bcba8:	f04f 0302 	mov.w	r3, #2
   bcbac:	e8d4 2f4f 	ldrexb	r2, [r4]
   bcbb0:	2a00      	cmp	r2, #0
   bcbb2:	d103      	bne.n	bcbbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bcbb4:	e8c4 3f41 	strexb	r1, r3, [r4]
   bcbb8:	2900      	cmp	r1, #0
   bcbba:	d1f7      	bne.n	bcbac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bcbbc:	d125      	bne.n	bcc0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bcbbe:	f104 050c 	add.w	r5, r4, #12
   bcbc2:	4669      	mov	r1, sp
   bcbc4:	4628      	mov	r0, r5
   bcbc6:	f7ff ff09 	bl	bc9dc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bcbca:	f3bf 8f5b 	dmb	ish
   bcbce:	2301      	movs	r3, #1
   bcbd0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bcbd2:	2000      	movs	r0, #0
   bcbd4:	f104 0308 	add.w	r3, r4, #8
   bcbd8:	f3bf 8f5b 	dmb	ish
   bcbdc:	e853 6f00 	ldrex	r6, [r3]
   bcbe0:	e843 0200 	strex	r2, r0, [r3]
   bcbe4:	2a00      	cmp	r2, #0
   bcbe6:	d1f9      	bne.n	bcbdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bcbe8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bcbec:	b16e      	cbz	r6, bcc0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bcbee:	f7ff fbeb 	bl	bc3c8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bcbf2:	b178      	cbz	r0, bcc14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bcbf4:	4629      	mov	r1, r5
   bcbf6:	4630      	mov	r0, r6
   bcbf8:	f7ff ff8c 	bl	bcb14 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bcbfc:	4630      	mov	r0, r6
   bcbfe:	f7f8 f9d8 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bcc02:	2110      	movs	r1, #16
   bcc04:	4630      	mov	r0, r6
   bcc06:	f7f7 fa4a 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bcc0a:	4668      	mov	r0, sp
   bcc0c:	f7ff fef3 	bl	bc9f6 <_ZN8particle5ErrorD1Ev>
    }
   bcc10:	b009      	add	sp, #36	; 0x24
   bcc12:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bcc14:	4631      	mov	r1, r6
   bcc16:	a802      	add	r0, sp, #8
   bcc18:	f7ff ffb0 	bl	bcb7c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bcc1c:	68e0      	ldr	r0, [r4, #12]
   bcc1e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcc22:	b108      	cbz	r0, bcc28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bcc24:	f003 fcfe 	bl	c0624 <strdup>
        type_(type) {
   bcc28:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bcc2a:	2010      	movs	r0, #16
   bcc2c:	f8ad 501c 	strh.w	r5, [sp, #28]
   bcc30:	f7f7 fa31 	bl	b4096 <_Znwj>
   bcc34:	4605      	mov	r5, r0
   bcc36:	b1e8      	cbz	r0, bcc74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bcc38:	2700      	movs	r7, #0
   bcc3a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bcc3c:	2018      	movs	r0, #24
   bcc3e:	f7f7 fa2a 	bl	b4096 <_Znwj>
   bcc42:	4604      	mov	r4, r0
   bcc44:	b188      	cbz	r0, bcc6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bcc46:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bcc48:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bcc4a:	a802      	add	r0, sp, #8
   bcc4c:	f7fa ff97 	bl	b7b7e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcc50:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bcc52:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bcc54:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcc56:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bcc58:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bcc5a:	a906      	add	r1, sp, #24
   bcc5c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bcc5e:	60e3      	str	r3, [r4, #12]
   bcc60:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bcc64:	9205      	str	r2, [sp, #20]
   bcc66:	f7ff feb9 	bl	bc9dc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bcc6a:	4b08      	ldr	r3, [pc, #32]	; (bcc8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bcc6c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bcc6e:	4b08      	ldr	r3, [pc, #32]	; (bcc90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bcc70:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bcc72:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bcc74:	a806      	add	r0, sp, #24
   bcc76:	f7ff febe 	bl	bc9f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bcc7a:	a802      	add	r0, sp, #8
   bcc7c:	f7f8 f999 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bcc80:	2200      	movs	r2, #0
   bcc82:	4629      	mov	r1, r5
   bcc84:	4803      	ldr	r0, [pc, #12]	; (bcc94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bcc86:	f7ff fba7 	bl	bc3d8 <application_thread_invoke>
   bcc8a:	e7b7      	b.n	bcbfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bcc8c:	000bcb27 	.word	0x000bcb27
   bcc90:	000bcda9 	.word	0x000bcda9
   bcc94:	000bc703 	.word	0x000bc703

000bcc98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bcc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcc9c:	b08b      	sub	sp, #44	; 0x2c
   bcc9e:	4605      	mov	r5, r0
   bcca0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bcca4:	460f      	mov	r7, r1
   bcca6:	4690      	mov	r8, r2
   bcca8:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bccaa:	f7ff fbff 	bl	bc4ac <spark_cloud_flag_connected>
   bccae:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bccb0:	4683      	mov	fp, r0
   bccb2:	bb38      	cbnz	r0, bcd04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bccb4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bccb8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bccba:	a905      	add	r1, sp, #20
   bccbc:	4630      	mov	r0, r6
   bccbe:	f8ad 3018 	strh.w	r3, [sp, #24]
   bccc2:	f7ff fe8b 	bl	bc9dc <_ZN8particle5ErrorC1EOS0_>
   bccc6:	2014      	movs	r0, #20
   bccc8:	f7f7 f9e5 	bl	b4096 <_Znwj>
   bcccc:	4604      	mov	r4, r0
   bccce:	b148      	cbz	r0, bcce4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bccd0:	2302      	movs	r3, #2
   bccd2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bccd4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bccd6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bccda:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bccdc:	4631      	mov	r1, r6
   bccde:	300c      	adds	r0, #12
   bcce0:	f7ff fe7c 	bl	bc9dc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bcce4:	4628      	mov	r0, r5
	: __shared_count(__p)
   bcce6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bcce8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bccec:	f7ff ff32 	bl	bcb54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bccf0:	4630      	mov	r0, r6
   bccf2:	f7ff fe80 	bl	bc9f6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bccf6:	a805      	add	r0, sp, #20
   bccf8:	f7ff fe7d 	bl	bc9f6 <_ZN8particle5ErrorD1Ev>
}
   bccfc:	4628      	mov	r0, r5
   bccfe:	b00b      	add	sp, #44	; 0x2c
   bcd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bcd04:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bcd06:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bcd08:	2014      	movs	r0, #20
   bcd0a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bcd0e:	9307      	str	r3, [sp, #28]
   bcd10:	f7f7 f9c1 	bl	b4096 <_Znwj>
   bcd14:	4601      	mov	r1, r0
   bcd16:	b118      	cbz	r0, bcd20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bcd18:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bcd1c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bcd1e:	7044      	strb	r4, [r0, #1]
   bcd20:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bcd22:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bcd24:	f7ff ff16 	bl	bcb54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bcd28:	4b1e      	ldr	r3, [pc, #120]	; (bcda4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bcd2a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bcd2c:	2008      	movs	r0, #8
   bcd2e:	f7f7 f9b2 	bl	b4096 <_Znwj>
   bcd32:	4604      	mov	r4, r0
   bcd34:	b110      	cbz	r0, bcd3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bcd36:	a903      	add	r1, sp, #12
   bcd38:	f7ff fec8 	bl	bcacc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bcd3c:	9600      	str	r6, [sp, #0]
   bcd3e:	fa5f f38a 	uxtb.w	r3, sl
   bcd42:	464a      	mov	r2, r9
   bcd44:	4641      	mov	r1, r8
   bcd46:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bcd48:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bcd4a:	f7ff fbbf 	bl	bc4cc <spark_send_event>
   bcd4e:	b9b8      	cbnz	r0, bcd80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bcd50:	9b03      	ldr	r3, [sp, #12]
   bcd52:	785b      	ldrb	r3, [r3, #1]
   bcd54:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bcd58:	b993      	cbnz	r3, bcd80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bcd5a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bcd5e:	a905      	add	r1, sp, #20
   bcd60:	a803      	add	r0, sp, #12
   bcd62:	9205      	str	r2, [sp, #20]
   bcd64:	f8ad 3018 	strh.w	r3, [sp, #24]
   bcd68:	f7ff ff18 	bl	bcb9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bcd6c:	a805      	add	r0, sp, #20
   bcd6e:	f7ff fe42 	bl	bc9f6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bcd72:	a805      	add	r0, sp, #20
   bcd74:	9909      	ldr	r1, [sp, #36]	; 0x24
   bcd76:	f7ff feb2 	bl	bcade <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bcd7a:	a806      	add	r0, sp, #24
   bcd7c:	f7f9 fcc2 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bcd80:	a903      	add	r1, sp, #12
   bcd82:	a805      	add	r0, sp, #20
   bcd84:	f7ff fea2 	bl	bcacc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcd88:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bcd8a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcd8c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bcd8e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bcd90:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bcd92:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bcd94:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bcd96:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bcd98:	f7f9 fcb4 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bcd9c:	a804      	add	r0, sp, #16
   bcd9e:	f7f9 fcb1 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bcda2:	e7ab      	b.n	bccfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bcda4:	000bce25 	.word	0x000bce25

000bcda8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bcda8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bcdaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcdac:	4605      	mov	r5, r0
	switch (__op)
   bcdae:	d103      	bne.n	bcdb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bcdb0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bcdb2:	6003      	str	r3, [r0, #0]
      }
   bcdb4:	2000      	movs	r0, #0
   bcdb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bcdb8:	2a02      	cmp	r2, #2
   bcdba:	d010      	beq.n	bcdde <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bcdbc:	2a03      	cmp	r2, #3
   bcdbe:	d1f9      	bne.n	bcdb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bcdc0:	6804      	ldr	r4, [r0, #0]
   bcdc2:	2c00      	cmp	r4, #0
   bcdc4:	d0f6      	beq.n	bcdb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bcdc6:	f104 0010 	add.w	r0, r4, #16
   bcdca:	f7ff fe14 	bl	bc9f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bcdce:	4620      	mov	r0, r4
   bcdd0:	f7f8 f8ef 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bcdd4:	2118      	movs	r1, #24
   bcdd6:	4620      	mov	r0, r4
   bcdd8:	f7f7 f961 	bl	b409e <_ZdlPvj>
   bcddc:	e7ea      	b.n	bcdb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bcdde:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bcde0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bcde2:	f7f7 f958 	bl	b4096 <_Znwj>
   bcde6:	4604      	mov	r4, r0
   bcde8:	b150      	cbz	r0, bce00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   bcdea:	4631      	mov	r1, r6
   bcdec:	f7ff fec6 	bl	bcb7c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bcdf0:	6930      	ldr	r0, [r6, #16]
   bcdf2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcdf6:	b108      	cbz	r0, bcdfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bcdf8:	f003 fc14 	bl	c0624 <strdup>
        type_(type) {
   bcdfc:	6120      	str	r0, [r4, #16]
   bcdfe:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bce00:	602c      	str	r4, [r5, #0]
	}
   bce02:	e7d7      	b.n	bcdb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bce04 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bce04:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bce06:	2300      	movs	r3, #0
   bce08:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bce0a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bce0c:	4604      	mov	r4, r0
   bce0e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bce10:	b12b      	cbz	r3, bce1e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bce12:	2202      	movs	r2, #2
   bce14:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bce16:	68eb      	ldr	r3, [r5, #12]
   bce18:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bce1a:	68ab      	ldr	r3, [r5, #8]
   bce1c:	60a3      	str	r3, [r4, #8]
    }
   bce1e:	4620      	mov	r0, r4
   bce20:	bd38      	pop	{r3, r4, r5, pc}
	...

000bce24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bce24:	b5f0      	push	{r4, r5, r6, r7, lr}
   bce26:	b089      	sub	sp, #36	; 0x24
   bce28:	4604      	mov	r4, r0
   bce2a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bce2c:	a801      	add	r0, sp, #4
   bce2e:	4611      	mov	r1, r2
   bce30:	f7ff fe55 	bl	bcade <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bce34:	b1a4      	cbz	r4, bce60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bce36:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bce38:	b11d      	cbz	r5, bce42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bce3a:	4628      	mov	r0, r5
   bce3c:	f003 fbf2 	bl	c0624 <strdup>
   bce40:	4605      	mov	r5, r0
   bce42:	a801      	add	r0, sp, #4
   bce44:	a903      	add	r1, sp, #12
        type_(type) {
   bce46:	9503      	str	r5, [sp, #12]
   bce48:	f8ad 4010 	strh.w	r4, [sp, #16]
   bce4c:	f7ff fea6 	bl	bcb9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bce50:	a803      	add	r0, sp, #12
   bce52:	f7ff fdd0 	bl	bc9f6 <_ZN8particle5ErrorD1Ev>
   bce56:	a802      	add	r0, sp, #8
   bce58:	f7f9 fc54 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bce5c:	b009      	add	sp, #36	; 0x24
   bce5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bce60:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bce62:	2301      	movs	r3, #1
   bce64:	e8d5 2f4f 	ldrexb	r2, [r5]
   bce68:	2a00      	cmp	r2, #0
   bce6a:	d103      	bne.n	bce74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bce6c:	e8c5 3f41 	strexb	r1, r3, [r5]
   bce70:	2900      	cmp	r1, #0
   bce72:	d1f7      	bne.n	bce64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bce74:	d1ef      	bne.n	bce56 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bce76:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bce78:	f3bf 8f5b 	dmb	ish
   bce7c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bce7e:	1d2b      	adds	r3, r5, #4
   bce80:	f3bf 8f5b 	dmb	ish
   bce84:	e853 6f00 	ldrex	r6, [r3]
   bce88:	e843 4200 	strex	r2, r4, [r3]
   bce8c:	2a00      	cmp	r2, #0
   bce8e:	d1f9      	bne.n	bce84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bce90:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bce94:	2e00      	cmp	r6, #0
   bce96:	d0de      	beq.n	bce56 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bce98:	4620      	mov	r0, r4
   bce9a:	f7ff fa95 	bl	bc3c8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bce9e:	4607      	mov	r7, r0
   bcea0:	b160      	cbz	r0, bcebc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bcea2:	f105 010c 	add.w	r1, r5, #12
   bcea6:	4630      	mov	r0, r6
   bcea8:	f7ff fe44 	bl	bcb34 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bceac:	4630      	mov	r0, r6
   bceae:	f7f8 f880 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bceb2:	2110      	movs	r1, #16
   bceb4:	4630      	mov	r0, r6
   bceb6:	f7f7 f8f2 	bl	b409e <_ZdlPvj>
   bceba:	e7cc      	b.n	bce56 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bcebc:	4631      	mov	r1, r6
   bcebe:	a803      	add	r0, sp, #12
   bcec0:	f7ff ffa0 	bl	bce04 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bcec4:	7b2b      	ldrb	r3, [r5, #12]
   bcec6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bceca:	2010      	movs	r0, #16
   bcecc:	f7f7 f8e3 	bl	b4096 <_Znwj>
   bced0:	4605      	mov	r5, r0
   bced2:	b1d0      	cbz	r0, bcf0a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bced4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bced6:	2014      	movs	r0, #20
   bced8:	f7f7 f8dd 	bl	b4096 <_Znwj>
   bcedc:	4604      	mov	r4, r0
   bcede:	b178      	cbz	r0, bcf00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bcee0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bcee2:	4601      	mov	r1, r0
   bcee4:	a803      	add	r0, sp, #12
   bcee6:	f7fa fe4a 	bl	b7b7e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bceea:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bceec:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bceee:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcef0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bcef2:	9205      	str	r2, [sp, #20]
   bcef4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bcef6:	60e3      	str	r3, [r4, #12]
   bcef8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bcefc:	9206      	str	r2, [sp, #24]
   bcefe:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bcf00:	4b06      	ldr	r3, [pc, #24]	; (bcf1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bcf02:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bcf04:	4b06      	ldr	r3, [pc, #24]	; (bcf20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bcf06:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bcf08:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bcf0a:	a803      	add	r0, sp, #12
   bcf0c:	f7f8 f851 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bcf10:	2200      	movs	r2, #0
   bcf12:	4629      	mov	r1, r5
   bcf14:	4803      	ldr	r0, [pc, #12]	; (bcf24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bcf16:	f7ff fa5f 	bl	bc3d8 <application_thread_invoke>
   bcf1a:	e7c7      	b.n	bceac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bcf1c:	000bcb47 	.word	0x000bcb47
   bcf20:	000bcf29 	.word	0x000bcf29
   bcf24:	000bc703 	.word	0x000bc703

000bcf28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bcf28:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bcf2a:	b570      	push	{r4, r5, r6, lr}
   bcf2c:	4604      	mov	r4, r0
	switch (__op)
   bcf2e:	d103      	bne.n	bcf38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bcf30:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bcf32:	6003      	str	r3, [r0, #0]
      }
   bcf34:	2000      	movs	r0, #0
   bcf36:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bcf38:	2a02      	cmp	r2, #2
   bcf3a:	d00c      	beq.n	bcf56 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bcf3c:	2a03      	cmp	r2, #3
   bcf3e:	d1f9      	bne.n	bcf34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bcf40:	6804      	ldr	r4, [r0, #0]
   bcf42:	2c00      	cmp	r4, #0
   bcf44:	d0f6      	beq.n	bcf34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bcf46:	4620      	mov	r0, r4
   bcf48:	f7f8 f833 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bcf4c:	2114      	movs	r1, #20
   bcf4e:	4620      	mov	r0, r4
   bcf50:	f7f7 f8a5 	bl	b409e <_ZdlPvj>
   bcf54:	e7ee      	b.n	bcf34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bcf56:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bcf58:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bcf5a:	f7f7 f89c 	bl	b4096 <_Znwj>
   bcf5e:	4605      	mov	r5, r0
   bcf60:	b120      	cbz	r0, bcf6c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bcf62:	4631      	mov	r1, r6
   bcf64:	f7ff ff4e 	bl	bce04 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bcf68:	7c33      	ldrb	r3, [r6, #16]
   bcf6a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bcf6c:	6025      	str	r5, [r4, #0]
	}
   bcf6e:	e7e1      	b.n	bcf34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bcf70 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bcf70:	2200      	movs	r2, #0
   bcf72:	6840      	ldr	r0, [r0, #4]
   bcf74:	4611      	mov	r1, r2
   bcf76:	f7ff bb19 	b.w	bc5ac <network_listening>

000bcf7a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bcf7a:	2200      	movs	r2, #0
   bcf7c:	6840      	ldr	r0, [r0, #4]
   bcf7e:	4611      	mov	r1, r2
   bcf80:	f7ff bb24 	b.w	bc5cc <network_get_listen_timeout>

000bcf84 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bcf84:	6840      	ldr	r0, [r0, #4]
   bcf86:	2200      	movs	r2, #0
   bcf88:	f7ff bb18 	b.w	bc5bc <network_set_listen_timeout>

000bcf8c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bcf8c:	6840      	ldr	r0, [r0, #4]
   bcf8e:	2200      	movs	r2, #0
   bcf90:	f081 0101 	eor.w	r1, r1, #1
   bcf94:	f7ff bb02 	b.w	bc59c <network_listen>

000bcf98 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bcf98:	2300      	movs	r3, #0
   bcf9a:	6840      	ldr	r0, [r0, #4]
   bcf9c:	461a      	mov	r2, r3
   bcf9e:	4619      	mov	r1, r3
   bcfa0:	f7ff baf4 	b.w	bc58c <network_off>

000bcfa4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bcfa4:	2300      	movs	r3, #0
   bcfa6:	6840      	ldr	r0, [r0, #4]
   bcfa8:	461a      	mov	r2, r3
   bcfaa:	4619      	mov	r1, r3
   bcfac:	f7ff bae6 	b.w	bc57c <network_on>

000bcfb0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bcfb0:	2200      	movs	r2, #0
   bcfb2:	6840      	ldr	r0, [r0, #4]
   bcfb4:	4611      	mov	r1, r2
   bcfb6:	f7ff bad9 	b.w	bc56c <network_ready>

000bcfba <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bcfba:	2200      	movs	r2, #0
   bcfbc:	6840      	ldr	r0, [r0, #4]
   bcfbe:	4611      	mov	r1, r2
   bcfc0:	f7ff bac4 	b.w	bc54c <network_connecting>

000bcfc4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bcfc4:	6840      	ldr	r0, [r0, #4]
   bcfc6:	2200      	movs	r2, #0
   bcfc8:	2102      	movs	r1, #2
   bcfca:	f7ff bac7 	b.w	bc55c <network_disconnect>

000bcfce <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bcfce:	2300      	movs	r3, #0
   bcfd0:	6840      	ldr	r0, [r0, #4]
   bcfd2:	461a      	mov	r2, r3
   bcfd4:	f7ff bab2 	b.w	bc53c <network_connect>

000bcfd8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bcfd8:	4b02      	ldr	r3, [pc, #8]	; (bcfe4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bcfda:	2203      	movs	r2, #3
   bcfdc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bcfde:	4a02      	ldr	r2, [pc, #8]	; (bcfe8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bcfe0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bcfe2:	4770      	bx	lr
   bcfe4:	2003e5b4 	.word	0x2003e5b4
   bcfe8:	000c22cc 	.word	0x000c22cc

000bcfec <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   bcfec:	6800      	ldr	r0, [r0, #0]
   bcfee:	f000 b8f3 	b.w	bd1d8 <_ZN7TwoWire4lockEv>

000bcff2 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   bcff2:	b510      	push	{r4, lr}
   bcff4:	4604      	mov	r4, r0
      lock_(_lock) {
   bcff6:	6001      	str	r1, [r0, #0]
   bcff8:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   bcffa:	b10a      	cbz	r2, bd000 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   bcffc:	f7ff fff6 	bl	bcfec <_ZN9FuelGauge4lockEv>
}
   bd000:	4620      	mov	r0, r4
   bd002:	bd10      	pop	{r4, pc}

000bd004 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   bd004:	b513      	push	{r0, r1, r4, lr}
   bd006:	4604      	mov	r4, r0
   bd008:	9101      	str	r1, [sp, #4]
            return &Wire1;
   bd00a:	f002 fccd 	bl	bf9a8 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   bd00e:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   bd010:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   bd012:	4620      	mov	r0, r4
   bd014:	f7ff ffed 	bl	bcff2 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   bd018:	4620      	mov	r0, r4
   bd01a:	b002      	add	sp, #8
   bd01c:	bd10      	pop	{r4, pc}

000bd01e <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   bd01e:	6800      	ldr	r0, [r0, #0]
   bd020:	f000 b8e3 	b.w	bd1ea <_ZN7TwoWire6unlockEv>

000bd024 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   bd024:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bd028:	4604      	mov	r4, r0
   bd02a:	461d      	mov	r5, r3
   bd02c:	460f      	mov	r7, r1
   bd02e:	4616      	mov	r6, r2
      { _M_device.lock(); }
   bd030:	f7ff ffdc 	bl	bcfec <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bd034:	2236      	movs	r2, #54	; 0x36
   bd036:	2300      	movs	r3, #0
   bd038:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bd03c:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   bd03e:	f04f 0801 	mov.w	r8, #1
   bd042:	230a      	movs	r3, #10
   bd044:	4669      	mov	r1, sp
   bd046:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bd04a:	f000 f8a9 	bl	bd1a0 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   bd04e:	6820      	ldr	r0, [r4, #0]
   bd050:	6803      	ldr	r3, [r0, #0]
   bd052:	4639      	mov	r1, r7
   bd054:	689b      	ldr	r3, [r3, #8]
   bd056:	4798      	blx	r3
    i2c_.write(MSB);
   bd058:	6820      	ldr	r0, [r4, #0]
   bd05a:	6803      	ldr	r3, [r0, #0]
   bd05c:	4631      	mov	r1, r6
   bd05e:	689b      	ldr	r3, [r3, #8]
   bd060:	4798      	blx	r3
    i2c_.write(LSB);
   bd062:	6820      	ldr	r0, [r4, #0]
   bd064:	6803      	ldr	r3, [r0, #0]
   bd066:	4629      	mov	r1, r5
   bd068:	689b      	ldr	r3, [r3, #8]
   bd06a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bd06c:	4641      	mov	r1, r8
   bd06e:	6820      	ldr	r0, [r4, #0]
   bd070:	f000 f8ae 	bl	bd1d0 <_ZN7TwoWire15endTransmissionEh>
   bd074:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   bd076:	4620      	mov	r0, r4
   bd078:	bf0c      	ite	eq
   bd07a:	2500      	moveq	r5, #0
   bd07c:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   bd080:	f7ff ffcd 	bl	bd01e <_ZN9FuelGauge6unlockEv>
}
   bd084:	4628      	mov	r0, r5
   bd086:	b004      	add	sp, #16
   bd088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd08c <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   bd08c:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   bd08e:	2240      	movs	r2, #64	; 0x40
   bd090:	2300      	movs	r3, #0
   bd092:	2106      	movs	r1, #6
   bd094:	f7ff ffc6 	bl	bd024 <_ZN9FuelGauge13writeRegisterEhhh>
}
   bd098:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bd09c:	bd08      	pop	{r3, pc}

000bd09e <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bd09e:	4770      	bx	lr

000bd0a0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bd0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd0a2:	4606      	mov	r6, r0
   bd0a4:	4615      	mov	r5, r2
   bd0a6:	460c      	mov	r4, r1
   bd0a8:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bd0aa:	42bc      	cmp	r4, r7
   bd0ac:	d006      	beq.n	bd0bc <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bd0ae:	6833      	ldr	r3, [r6, #0]
   bd0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
   bd0b4:	689b      	ldr	r3, [r3, #8]
   bd0b6:	4630      	mov	r0, r6
   bd0b8:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bd0ba:	e7f6      	b.n	bd0aa <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bd0bc:	4628      	mov	r0, r5
   bd0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd0c0 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bd0c0:	7c00      	ldrb	r0, [r0, #16]
   bd0c2:	2200      	movs	r2, #0
   bd0c4:	f7fe bf7e 	b.w	bbfc4 <hal_i2c_write>

000bd0c8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bd0c8:	7c00      	ldrb	r0, [r0, #16]
   bd0ca:	2100      	movs	r1, #0
   bd0cc:	f7fe bf82 	b.w	bbfd4 <hal_i2c_available>

000bd0d0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bd0d0:	7c00      	ldrb	r0, [r0, #16]
   bd0d2:	2100      	movs	r1, #0
   bd0d4:	f7fe bf86 	b.w	bbfe4 <hal_i2c_read>

000bd0d8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bd0d8:	7c00      	ldrb	r0, [r0, #16]
   bd0da:	2100      	movs	r1, #0
   bd0dc:	f7fe bf8a 	b.w	bbff4 <hal_i2c_peek>

000bd0e0 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bd0e0:	7c00      	ldrb	r0, [r0, #16]
   bd0e2:	2100      	movs	r1, #0
   bd0e4:	f7fe bf8e 	b.w	bc004 <hal_i2c_flush>

000bd0e8 <_ZN7TwoWireD0Ev>:
   bd0e8:	b510      	push	{r4, lr}
   bd0ea:	2114      	movs	r1, #20
   bd0ec:	4604      	mov	r4, r0
   bd0ee:	f7f6 ffd6 	bl	b409e <_ZdlPvj>
   bd0f2:	4620      	mov	r0, r4
   bd0f4:	bd10      	pop	{r4, pc}
	...

000bd0f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bd0f8:	b538      	push	{r3, r4, r5, lr}
   bd0fa:	4604      	mov	r4, r0
   bd0fc:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bd0fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bd102:	2200      	movs	r2, #0
   bd104:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bd108:	4b09      	ldr	r3, [pc, #36]	; (bd130 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   bd10a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bd10c:	4608      	mov	r0, r1
   bd10e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   bd110:	4629      	mov	r1, r5
   bd112:	f7fe ff87 	bl	bc024 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bd116:	30bf      	adds	r0, #191	; 0xbf
   bd118:	d108      	bne.n	bd12c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   bd11a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bd11c:	07db      	lsls	r3, r3, #31
   bd11e:	d505      	bpl.n	bd12c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   bd120:	6868      	ldr	r0, [r5, #4]
   bd122:	f7ff fa73 	bl	bc60c <free>
    free(conf.tx_buffer);
   bd126:	68e8      	ldr	r0, [r5, #12]
   bd128:	f7ff fa70 	bl	bc60c <free>
}
   bd12c:	4620      	mov	r0, r4
   bd12e:	bd38      	pop	{r3, r4, r5, pc}
   bd130:	000c2308 	.word	0x000c2308

000bd134 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bd134:	2300      	movs	r3, #0
   bd136:	7c00      	ldrb	r0, [r0, #16]
   bd138:	461a      	mov	r2, r3
   bd13a:	4619      	mov	r1, r3
   bd13c:	f7fe bf2a 	b.w	bbf94 <hal_i2c_begin>

000bd140 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bd140:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bd142:	2200      	movs	r2, #0
   bd144:	2314      	movs	r3, #20
   bd146:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bd14a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bd14e:	780b      	ldrb	r3, [r1, #0]
   bd150:	f88d 3008 	strb.w	r3, [sp, #8]
   bd154:	684b      	ldr	r3, [r1, #4]
   bd156:	9303      	str	r3, [sp, #12]
   bd158:	68cb      	ldr	r3, [r1, #12]
   bd15a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bd15c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bd15e:	7a0b      	ldrb	r3, [r1, #8]
   bd160:	9305      	str	r3, [sp, #20]
   bd162:	a901      	add	r1, sp, #4
   bd164:	f7fe ff76 	bl	bc054 <hal_i2c_request_ex>
}
   bd168:	b007      	add	sp, #28
   bd16a:	f85d fb04 	ldr.w	pc, [sp], #4

000bd16e <_ZN7TwoWire11requestFromEhjh>:
{
   bd16e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bd170:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bd172:	f88d 1000 	strb.w	r1, [sp]
   bd176:	f04f 0164 	mov.w	r1, #100	; 0x64
   bd17a:	9103      	str	r1, [sp, #12]
   bd17c:	bf18      	it	ne
   bd17e:	2301      	movne	r3, #1
   bd180:	4669      	mov	r1, sp
    size_ = size;
   bd182:	9201      	str	r2, [sp, #4]
   bd184:	f88d 3008 	strb.w	r3, [sp, #8]
   bd188:	f7ff ffda 	bl	bd140 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bd18c:	b005      	add	sp, #20
   bd18e:	f85d fb04 	ldr.w	pc, [sp], #4

000bd192 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bd192:	7c00      	ldrb	r0, [r0, #16]
   bd194:	2200      	movs	r2, #0
   bd196:	f7fe bf05 	b.w	bbfa4 <hal_i2c_begin_transmission>

000bd19a <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bd19a:	b2c9      	uxtb	r1, r1
   bd19c:	f7ff bff9 	b.w	bd192 <_ZN7TwoWire17beginTransmissionEh>

000bd1a0 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   bd1a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bd1a2:	2300      	movs	r3, #0
   bd1a4:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   bd1a8:	684a      	ldr	r2, [r1, #4]
   bd1aa:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   bd1ac:	2314      	movs	r3, #20
    };
   bd1ae:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   bd1b0:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   bd1b4:	780b      	ldrb	r3, [r1, #0]
    };
   bd1b6:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bd1b8:	7a0a      	ldrb	r2, [r1, #8]
   bd1ba:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   bd1bc:	7c00      	ldrb	r0, [r0, #16]
    };
   bd1be:	f88d 3008 	strb.w	r3, [sp, #8]
   bd1c2:	aa01      	add	r2, sp, #4
   bd1c4:	4619      	mov	r1, r3
   bd1c6:	f7fe feed 	bl	bbfa4 <hal_i2c_begin_transmission>
}
   bd1ca:	b007      	add	sp, #28
   bd1cc:	f85d fb04 	ldr.w	pc, [sp], #4

000bd1d0 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bd1d0:	7c00      	ldrb	r0, [r0, #16]
   bd1d2:	2200      	movs	r2, #0
   bd1d4:	f7fe beee 	b.w	bbfb4 <hal_i2c_end_transmission>

000bd1d8 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bd1d8:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bd1da:	2100      	movs	r1, #0
   bd1dc:	7c00      	ldrb	r0, [r0, #16]
   bd1de:	f7fe ff29 	bl	bc034 <hal_i2c_lock>
}
   bd1e2:	fab0 f080 	clz	r0, r0
   bd1e6:	0940      	lsrs	r0, r0, #5
   bd1e8:	bd08      	pop	{r3, pc}

000bd1ea <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   bd1ea:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   bd1ec:	2100      	movs	r1, #0
   bd1ee:	7c00      	ldrb	r0, [r0, #16]
   bd1f0:	f7fe ff28 	bl	bc044 <hal_i2c_unlock>
}
   bd1f4:	fab0 f080 	clz	r0, r0
   bd1f8:	0940      	lsrs	r0, r0, #5
   bd1fa:	bd08      	pop	{r3, pc}

000bd1fc <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bd1fc:	4700      	bx	r0
	...

000bd200 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bd200:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bd204:	2400      	movs	r4, #0
{
   bd206:	461d      	mov	r5, r3
   bd208:	460f      	mov	r7, r1
   bd20a:	4690      	mov	r8, r2
   bd20c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bd20e:	f7fe feb1 	bl	bbf74 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bd212:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bd214:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bd218:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bd21c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bd220:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bd224:	bfa2      	ittt	ge
   bd226:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bd22a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bd22e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bd230:	4907      	ldr	r1, [pc, #28]	; (bd250 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bd232:	9400      	str	r4, [sp, #0]
   bd234:	4643      	mov	r3, r8
   bd236:	463a      	mov	r2, r7
   bd238:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bd23a:	bfa8      	it	ge
   bd23c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bd240:	f7fe fe90 	bl	bbf64 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bd244:	fab0 f080 	clz	r0, r0
   bd248:	0940      	lsrs	r0, r0, #5
   bd24a:	b004      	add	sp, #16
   bd24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd250:	000bd1fd 	.word	0x000bd1fd

000bd254 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   bd254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd256:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   bd258:	f7fe fe8c 	bl	bbf74 <HAL_Interrupts_Detach>
   bd25c:	4605      	mov	r5, r0
   bd25e:	b970      	cbnz	r0, bd27e <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   bd260:	4f08      	ldr	r7, [pc, #32]	; (bd284 <_Z15detachInterruptt+0x30>)
   bd262:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   bd266:	b146      	cbz	r6, bd27a <_Z15detachInterruptt+0x26>
    class function<_Res(_ArgTypes...)>
   bd268:	4630      	mov	r0, r6
   bd26a:	f7f7 fea2 	bl	b4fb2 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   bd26e:	2110      	movs	r1, #16
   bd270:	4630      	mov	r0, r6
   bd272:	f7f6 ff14 	bl	b409e <_ZdlPvj>
        handlers[pin] = nullptr;
   bd276:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   bd27a:	2001      	movs	r0, #1
   bd27c:	e000      	b.n	bd280 <_Z15detachInterruptt+0x2c>
        return false;
   bd27e:	2000      	movs	r0, #0
    }
    return true;
}
   bd280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd282:	bf00      	nop
   bd284:	2003e5bc 	.word	0x2003e5bc

000bd288 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bd288:	4770      	bx	lr

000bd28a <_ZN9IPAddressD0Ev>:
   bd28a:	b510      	push	{r4, lr}
   bd28c:	2118      	movs	r1, #24
   bd28e:	4604      	mov	r4, r0
   bd290:	f7f6 ff05 	bl	b409e <_ZdlPvj>
   bd294:	4620      	mov	r0, r4
   bd296:	bd10      	pop	{r4, pc}

000bd298 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bd298:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bd29a:	7d03      	ldrb	r3, [r0, #20]
   bd29c:	2b06      	cmp	r3, #6
{
   bd29e:	b08d      	sub	sp, #52	; 0x34
   bd2a0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bd2a2:	f100 0704 	add.w	r7, r0, #4
   bd2a6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bd2aa:	d012      	beq.n	bd2d2 <_ZNK9IPAddress7printToER5Print+0x3a>
   bd2ac:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bd2b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bd2b4:	220a      	movs	r2, #10
   bd2b6:	4630      	mov	r0, r6
   bd2b8:	f001 fb0d 	bl	be8d6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bd2bc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bd2be:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bd2c0:	d019      	beq.n	bd2f6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bd2c2:	2c00      	cmp	r4, #0
   bd2c4:	d0f4      	beq.n	bd2b0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bd2c6:	212e      	movs	r1, #46	; 0x2e
   bd2c8:	4630      	mov	r0, r6
   bd2ca:	f001 faf5 	bl	be8b8 <_ZN5Print5printEc>
   bd2ce:	4404      	add	r4, r0
   bd2d0:	e7ee      	b.n	bd2b0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bd2d2:	232f      	movs	r3, #47	; 0x2f
   bd2d4:	466a      	mov	r2, sp
   bd2d6:	4639      	mov	r1, r7
   bd2d8:	200a      	movs	r0, #10
		buf[0] = 0;
   bd2da:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bd2de:	f7fe fec1 	bl	bc064 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bd2e2:	4668      	mov	r0, sp
   bd2e4:	f003 f9bb 	bl	c065e <strlen>
   bd2e8:	6833      	ldr	r3, [r6, #0]
   bd2ea:	4602      	mov	r2, r0
   bd2ec:	68db      	ldr	r3, [r3, #12]
   bd2ee:	4669      	mov	r1, sp
   bd2f0:	4630      	mov	r0, r6
   bd2f2:	4798      	blx	r3
   bd2f4:	4604      	mov	r4, r0
    }
    return n;
}
   bd2f6:	4620      	mov	r0, r4
   bd2f8:	b00d      	add	sp, #52	; 0x34
   bd2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bd2fc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bd2fc:	b510      	push	{r4, lr}
   bd2fe:	4b05      	ldr	r3, [pc, #20]	; (bd314 <_ZN9IPAddressC1Ev+0x18>)
   bd300:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bd302:	2211      	movs	r2, #17
   bd304:	f840 3b04 	str.w	r3, [r0], #4
   bd308:	2100      	movs	r1, #0
   bd30a:	f003 f8ed 	bl	c04e8 <memset>
}
   bd30e:	4620      	mov	r0, r4
   bd310:	bd10      	pop	{r4, pc}
   bd312:	bf00      	nop
   bd314:	000c2330 	.word	0x000c2330

000bd318 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bd318:	4603      	mov	r3, r0
   bd31a:	4a07      	ldr	r2, [pc, #28]	; (bd338 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bd31c:	b510      	push	{r4, lr}
   bd31e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bd322:	f101 0210 	add.w	r2, r1, #16
   bd326:	f851 4b04 	ldr.w	r4, [r1], #4
   bd32a:	f843 4b04 	str.w	r4, [r3], #4
   bd32e:	4291      	cmp	r1, r2
   bd330:	d1f9      	bne.n	bd326 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bd332:	780a      	ldrb	r2, [r1, #0]
   bd334:	701a      	strb	r2, [r3, #0]
}
   bd336:	bd10      	pop	{r4, pc}
   bd338:	000c2330 	.word	0x000c2330

000bd33c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bd33c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bd33e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bd342:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bd346:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bd34a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bd34e:	2304      	movs	r3, #4
   bd350:	6041      	str	r1, [r0, #4]
   bd352:	7503      	strb	r3, [r0, #20]
}
   bd354:	bd10      	pop	{r4, pc}
	...

000bd358 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bd358:	b507      	push	{r0, r1, r2, lr}
   bd35a:	4b06      	ldr	r3, [pc, #24]	; (bd374 <_ZN9IPAddressC1EPKh+0x1c>)
   bd35c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bd35e:	78cb      	ldrb	r3, [r1, #3]
   bd360:	9300      	str	r3, [sp, #0]
   bd362:	788b      	ldrb	r3, [r1, #2]
   bd364:	784a      	ldrb	r2, [r1, #1]
   bd366:	7809      	ldrb	r1, [r1, #0]
   bd368:	f7ff ffe8 	bl	bd33c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bd36c:	b003      	add	sp, #12
   bd36e:	f85d fb04 	ldr.w	pc, [sp], #4
   bd372:	bf00      	nop
   bd374:	000c2330 	.word	0x000c2330

000bd378 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bd378:	f100 0310 	add.w	r3, r0, #16
   bd37c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bd37e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bd382:	2901      	cmp	r1, #1
   bd384:	4618      	mov	r0, r3
   bd386:	d108      	bne.n	bd39a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bd388:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bd38c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bd390:	3a01      	subs	r2, #1
   bd392:	f103 0310 	add.w	r3, r3, #16
   bd396:	d1f2      	bne.n	bd37e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bd398:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bd39a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bd39c:	bf04      	itt	eq
   bd39e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bd3a2:	1852      	addeq	r2, r2, r1
   bd3a4:	e7f4      	b.n	bd390 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bd3a6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bd3a6:	b40e      	push	{r1, r2, r3}
   bd3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd3aa:	b088      	sub	sp, #32
   bd3ac:	af00      	add	r7, sp, #0
   bd3ae:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd3b2:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bd3b4:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd3b8:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bd3ba:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd3bc:	462b      	mov	r3, r5
   bd3be:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bd3c0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd3c2:	f7ff f94b 	bl	bc65c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bd3c6:	280f      	cmp	r0, #15
   bd3c8:	687a      	ldr	r2, [r7, #4]
   bd3ca:	d91a      	bls.n	bd402 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bd3cc:	f100 0308 	add.w	r3, r0, #8
   bd3d0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bd3d4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bd3d6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd3da:	1c41      	adds	r1, r0, #1
   bd3dc:	462b      	mov	r3, r5
   bd3de:	4668      	mov	r0, sp
        va_start(args, fmt);
   bd3e0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd3e2:	f7ff f93b 	bl	bc65c <vsnprintf>
        if (n > 0) {
   bd3e6:	1e02      	subs	r2, r0, #0
   bd3e8:	dd04      	ble.n	bd3f4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bd3ea:	6823      	ldr	r3, [r4, #0]
   bd3ec:	4669      	mov	r1, sp
   bd3ee:	689b      	ldr	r3, [r3, #8]
   bd3f0:	4620      	mov	r0, r4
   bd3f2:	4798      	blx	r3
   bd3f4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bd3f6:	3720      	adds	r7, #32
   bd3f8:	46bd      	mov	sp, r7
   bd3fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bd3fe:	b003      	add	sp, #12
   bd400:	4770      	bx	lr
    } else if (n > 0) {
   bd402:	2800      	cmp	r0, #0
   bd404:	d0f7      	beq.n	bd3f6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bd406:	6823      	ldr	r3, [r4, #0]
   bd408:	4602      	mov	r2, r0
   bd40a:	689b      	ldr	r3, [r3, #8]
   bd40c:	f107 0110 	add.w	r1, r7, #16
   bd410:	4620      	mov	r0, r4
   bd412:	4798      	blx	r3
}
   bd414:	e7ef      	b.n	bd3f6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bd416 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bd416:	b538      	push	{r3, r4, r5, lr}
   bd418:	680b      	ldr	r3, [r1, #0]
   bd41a:	6003      	str	r3, [r0, #0]
   bd41c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bd41e:	6843      	ldr	r3, [r0, #4]
   bd420:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bd422:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bd424:	d008      	beq.n	bd438 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bd426:	b115      	cbz	r5, bd42e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bd428:	686b      	ldr	r3, [r5, #4]
   bd42a:	3301      	adds	r3, #1
   bd42c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bd42e:	6860      	ldr	r0, [r4, #4]
   bd430:	b108      	cbz	r0, bd436 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bd432:	f7ff f97a 	bl	bc72a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bd436:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bd438:	bd38      	pop	{r3, r4, r5, pc}

000bd43a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bd43a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bd43c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bd43e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bd442:	689b      	ldr	r3, [r3, #8]
   bd444:	2201      	movs	r2, #1
   bd446:	f10d 0107 	add.w	r1, sp, #7
   bd44a:	4798      	blx	r3
}
   bd44c:	b003      	add	sp, #12
   bd44e:	f85d fb04 	ldr.w	pc, [sp], #4

000bd452 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bd452:	460b      	mov	r3, r1
   bd454:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bd456:	2200      	movs	r2, #0
   bd458:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bd45a:	e9c0 2200 	strd	r2, r2, [r0]
   bd45e:	4604      	mov	r4, r0
        t_ = t;
   bd460:	6083      	str	r3, [r0, #8]
    if (t) {
   bd462:	b90b      	cbnz	r3, bd468 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bd464:	4620      	mov	r0, r4
   bd466:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bd468:	f7ff ffd5 	bl	bd416 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bd46c:	e7fa      	b.n	bd464 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bd46e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bd46e:	6883      	ldr	r3, [r0, #8]
   bd470:	b1eb      	cbz	r3, bd4ae <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bd472:	781a      	ldrb	r2, [r3, #0]
   bd474:	2a03      	cmp	r2, #3
   bd476:	d81a      	bhi.n	bd4ae <_ZNK5spark9JSONValue4typeEv+0x40>
   bd478:	e8df f002 	tbb	[pc, r2]
   bd47c:	1b021704 	.word	0x1b021704
   bd480:	2005      	movs	r0, #5
   bd482:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bd484:	6802      	ldr	r2, [r0, #0]
   bd486:	685b      	ldr	r3, [r3, #4]
   bd488:	6852      	ldr	r2, [r2, #4]
   bd48a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bd48c:	282d      	cmp	r0, #45	; 0x2d
   bd48e:	d012      	beq.n	bd4b6 <_ZNK5spark9JSONValue4typeEv+0x48>
   bd490:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bd494:	2b09      	cmp	r3, #9
   bd496:	d90e      	bls.n	bd4b6 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bd498:	2874      	cmp	r0, #116	; 0x74
   bd49a:	d00e      	beq.n	bd4ba <_ZNK5spark9JSONValue4typeEv+0x4c>
   bd49c:	2866      	cmp	r0, #102	; 0x66
   bd49e:	d00c      	beq.n	bd4ba <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bd4a0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bd4a4:	4258      	negs	r0, r3
   bd4a6:	4158      	adcs	r0, r3
   bd4a8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bd4aa:	2006      	movs	r0, #6
   bd4ac:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bd4ae:	2000      	movs	r0, #0
   bd4b0:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bd4b2:	2004      	movs	r0, #4
   bd4b4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bd4b6:	2003      	movs	r0, #3
   bd4b8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bd4ba:	2002      	movs	r0, #2
}
   bd4bc:	4770      	bx	lr

000bd4be <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bd4be:	b510      	push	{r4, lr}
   bd4c0:	4604      	mov	r4, r0
    switch (type()) {
   bd4c2:	f7ff ffd4 	bl	bd46e <_ZNK5spark9JSONValue4typeEv>
   bd4c6:	2802      	cmp	r0, #2
   bd4c8:	d00e      	beq.n	bd4e8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bd4ca:	1ec3      	subs	r3, r0, #3
   bd4cc:	b2db      	uxtb	r3, r3
   bd4ce:	2b01      	cmp	r3, #1
   bd4d0:	d814      	bhi.n	bd4fc <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bd4d2:	6822      	ldr	r2, [r4, #0]
   bd4d4:	68a3      	ldr	r3, [r4, #8]
   bd4d6:	6850      	ldr	r0, [r2, #4]
   bd4d8:	685b      	ldr	r3, [r3, #4]
}
   bd4da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bd4de:	220a      	movs	r2, #10
   bd4e0:	2100      	movs	r1, #0
   bd4e2:	4418      	add	r0, r3
   bd4e4:	f003 b9ac 	b.w	c0840 <strtol>
        const char* const s = d_->json + t_->start;
   bd4e8:	6822      	ldr	r2, [r4, #0]
   bd4ea:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bd4ec:	6852      	ldr	r2, [r2, #4]
   bd4ee:	685b      	ldr	r3, [r3, #4]
   bd4f0:	5cd0      	ldrb	r0, [r2, r3]
   bd4f2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bd4f6:	4258      	negs	r0, r3
   bd4f8:	4158      	adcs	r0, r3
}
   bd4fa:	bd10      	pop	{r4, pc}
    switch (type()) {
   bd4fc:	2000      	movs	r0, #0
   bd4fe:	e7fc      	b.n	bd4fa <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bd500 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bd500:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bd502:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bd504:	e9c0 3300 	strd	r3, r3, [r0]
   bd508:	4604      	mov	r4, r0
        n_(0) {
   bd50a:	480e      	ldr	r0, [pc, #56]	; (bd544 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bd50c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bd510:	b1a9      	cbz	r1, bd53e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bd512:	780b      	ldrb	r3, [r1, #0]
   bd514:	2b03      	cmp	r3, #3
   bd516:	d006      	beq.n	bd526 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bd518:	b98b      	cbnz	r3, bd53e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bd51a:	6813      	ldr	r3, [r2, #0]
   bd51c:	6858      	ldr	r0, [r3, #4]
   bd51e:	684b      	ldr	r3, [r1, #4]
   bd520:	5cc3      	ldrb	r3, [r0, r3]
   bd522:	2b6e      	cmp	r3, #110	; 0x6e
   bd524:	d007      	beq.n	bd536 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bd526:	6813      	ldr	r3, [r2, #0]
   bd528:	684d      	ldr	r5, [r1, #4]
   bd52a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bd52c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bd52e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bd530:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bd532:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bd534:	60e3      	str	r3, [r4, #12]
   bd536:	4611      	mov	r1, r2
   bd538:	4620      	mov	r0, r4
   bd53a:	f7ff ff6c 	bl	bd416 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bd53e:	4620      	mov	r0, r4
   bd540:	bd38      	pop	{r3, r4, r5, pc}
   bd542:	bf00      	nop
   bd544:	000c2399 	.word	0x000c2399

000bd548 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bd548:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bd54a:	2500      	movs	r5, #0
   bd54c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bd54e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bd552:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bd556:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bd55a:	4604      	mov	r4, r0
   bd55c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bd55e:	b14b      	cbz	r3, bd574 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bd560:	781a      	ldrb	r2, [r3, #0]
   bd562:	2a01      	cmp	r2, #1
   bd564:	d106      	bne.n	bd574 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bd566:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bd56a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bd56c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bd56e:	6143      	str	r3, [r0, #20]
   bd570:	f7ff ff51 	bl	bd416 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bd574:	4620      	mov	r0, r4
   bd576:	bd38      	pop	{r3, r4, r5, pc}

000bd578 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bd578:	b510      	push	{r4, lr}
    if (!n_) {
   bd57a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bd57c:	4604      	mov	r4, r0
    if (!n_) {
   bd57e:	b163      	cbz	r3, bd59a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bd580:	6880      	ldr	r0, [r0, #8]
   bd582:	60e0      	str	r0, [r4, #12]
    --n_;
   bd584:	3b01      	subs	r3, #1
    ++t_;
   bd586:	3010      	adds	r0, #16
   bd588:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bd58a:	6120      	str	r0, [r4, #16]
    --n_;
   bd58c:	6163      	str	r3, [r4, #20]
    if (n_) {
   bd58e:	b113      	cbz	r3, bd596 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bd590:	f7ff fef2 	bl	bd378 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bd594:	60a0      	str	r0, [r4, #8]
    return true;
   bd596:	2001      	movs	r0, #1
   bd598:	e000      	b.n	bd59c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bd59a:	4618      	mov	r0, r3
}
   bd59c:	bd10      	pop	{r4, pc}

000bd59e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bd59e:	b510      	push	{r4, lr}
    write('}');
   bd5a0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bd5a2:	4604      	mov	r4, r0
    write('}');
   bd5a4:	f7ff ff49 	bl	bd43a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bd5a8:	2301      	movs	r3, #1
   bd5aa:	7123      	strb	r3, [r4, #4]
}
   bd5ac:	4620      	mov	r0, r4
   bd5ae:	bd10      	pop	{r4, pc}

000bd5b0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bd5b0:	b508      	push	{r3, lr}
    switch (state_) {
   bd5b2:	7903      	ldrb	r3, [r0, #4]
   bd5b4:	2b01      	cmp	r3, #1
   bd5b6:	d002      	beq.n	bd5be <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bd5b8:	2b02      	cmp	r3, #2
   bd5ba:	d004      	beq.n	bd5c6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bd5bc:	bd08      	pop	{r3, pc}
        write(',');
   bd5be:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bd5c0:	f7ff ff3b 	bl	bd43a <_ZN5spark10JSONWriter5writeEc>
}
   bd5c4:	e7fa      	b.n	bd5bc <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bd5c6:	213a      	movs	r1, #58	; 0x3a
   bd5c8:	e7fa      	b.n	bd5c0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bd5ca <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bd5ca:	b510      	push	{r4, lr}
   bd5cc:	4604      	mov	r4, r0
    writeSeparator();
   bd5ce:	f7ff ffef 	bl	bd5b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bd5d2:	4620      	mov	r0, r4
   bd5d4:	217b      	movs	r1, #123	; 0x7b
   bd5d6:	f7ff ff30 	bl	bd43a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bd5da:	2300      	movs	r3, #0
   bd5dc:	7123      	strb	r3, [r4, #4]
}
   bd5de:	4620      	mov	r0, r4
   bd5e0:	bd10      	pop	{r4, pc}
	...

000bd5e4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bd5e4:	b513      	push	{r0, r1, r4, lr}
   bd5e6:	4604      	mov	r4, r0
   bd5e8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bd5ea:	f7ff ffe1 	bl	bd5b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bd5ee:	6823      	ldr	r3, [r4, #0]
   bd5f0:	9a01      	ldr	r2, [sp, #4]
   bd5f2:	68db      	ldr	r3, [r3, #12]
   bd5f4:	4903      	ldr	r1, [pc, #12]	; (bd604 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bd5f6:	4620      	mov	r0, r4
   bd5f8:	4798      	blx	r3
    state_ = NEXT;
   bd5fa:	2301      	movs	r3, #1
}
   bd5fc:	4620      	mov	r0, r4
    state_ = NEXT;
   bd5fe:	7123      	strb	r3, [r4, #4]
}
   bd600:	b002      	add	sp, #8
   bd602:	bd10      	pop	{r4, pc}
   bd604:	000c0eb6 	.word	0x000c0eb6

000bd608 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bd608:	b513      	push	{r0, r1, r4, lr}
   bd60a:	4604      	mov	r4, r0
   bd60c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bd60e:	f7ff ffcf 	bl	bd5b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bd612:	6823      	ldr	r3, [r4, #0]
   bd614:	9a01      	ldr	r2, [sp, #4]
   bd616:	68db      	ldr	r3, [r3, #12]
   bd618:	4903      	ldr	r1, [pc, #12]	; (bd628 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bd61a:	4620      	mov	r0, r4
   bd61c:	4798      	blx	r3
    state_ = NEXT;
   bd61e:	2301      	movs	r3, #1
}
   bd620:	4620      	mov	r0, r4
    state_ = NEXT;
   bd622:	7123      	strb	r3, [r4, #4]
}
   bd624:	b002      	add	sp, #8
   bd626:	bd10      	pop	{r4, pc}
   bd628:	000c1c2a 	.word	0x000c1c2a

000bd62c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bd62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd630:	460d      	mov	r5, r1
    write('"');
   bd632:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bd634:	4690      	mov	r8, r2
   bd636:	4604      	mov	r4, r0
    write('"');
   bd638:	f7ff feff 	bl	bd43a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bd63c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bd6e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bd640:	44a8      	add	r8, r5
    const char *s = str;
   bd642:	462f      	mov	r7, r5
    while (s != end) {
   bd644:	4547      	cmp	r7, r8
   bd646:	46ba      	mov	sl, r7
   bd648:	d03d      	beq.n	bd6c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bd64a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bd64e:	2e22      	cmp	r6, #34	; 0x22
   bd650:	d006      	beq.n	bd660 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bd652:	2e5c      	cmp	r6, #92	; 0x5c
   bd654:	d004      	beq.n	bd660 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bd656:	4630      	mov	r0, r6
   bd658:	f002 ff16 	bl	c0488 <isprint>
   bd65c:	2800      	cmp	r0, #0
   bd65e:	d1f1      	bne.n	bd644 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bd660:	6823      	ldr	r3, [r4, #0]
   bd662:	ebaa 0205 	sub.w	r2, sl, r5
   bd666:	689b      	ldr	r3, [r3, #8]
   bd668:	4629      	mov	r1, r5
   bd66a:	4620      	mov	r0, r4
   bd66c:	4798      	blx	r3
            write('\\');
   bd66e:	215c      	movs	r1, #92	; 0x5c
   bd670:	4620      	mov	r0, r4
   bd672:	f7ff fee2 	bl	bd43a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bd676:	2e0d      	cmp	r6, #13
   bd678:	d80a      	bhi.n	bd690 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bd67a:	2e07      	cmp	r6, #7
   bd67c:	d91c      	bls.n	bd6b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bd67e:	f1a6 0308 	sub.w	r3, r6, #8
   bd682:	2b05      	cmp	r3, #5
   bd684:	d818      	bhi.n	bd6b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bd686:	e8df f003 	tbb	[pc, r3]
   bd68a:	0f0d      	.short	0x0f0d
   bd68c:	15131711 	.word	0x15131711
   bd690:	2e22      	cmp	r6, #34	; 0x22
   bd692:	d001      	beq.n	bd698 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bd694:	2e5c      	cmp	r6, #92	; 0x5c
   bd696:	d10f      	bne.n	bd6b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bd698:	4631      	mov	r1, r6
                write('b');
   bd69a:	4620      	mov	r0, r4
   bd69c:	f7ff fecd 	bl	bd43a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bd6a0:	463d      	mov	r5, r7
    while (s != end) {
   bd6a2:	e7cf      	b.n	bd644 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bd6a4:	2162      	movs	r1, #98	; 0x62
   bd6a6:	e7f8      	b.n	bd69a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bd6a8:	2174      	movs	r1, #116	; 0x74
   bd6aa:	e7f6      	b.n	bd69a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bd6ac:	216e      	movs	r1, #110	; 0x6e
   bd6ae:	e7f4      	b.n	bd69a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bd6b0:	2166      	movs	r1, #102	; 0x66
   bd6b2:	e7f2      	b.n	bd69a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bd6b4:	2172      	movs	r1, #114	; 0x72
   bd6b6:	e7f0      	b.n	bd69a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bd6b8:	6823      	ldr	r3, [r4, #0]
   bd6ba:	4632      	mov	r2, r6
   bd6bc:	68db      	ldr	r3, [r3, #12]
   bd6be:	4649      	mov	r1, r9
   bd6c0:	4620      	mov	r0, r4
   bd6c2:	4798      	blx	r3
                break;
   bd6c4:	e7ec      	b.n	bd6a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bd6c6:	42bd      	cmp	r5, r7
   bd6c8:	d005      	beq.n	bd6d6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bd6ca:	6823      	ldr	r3, [r4, #0]
   bd6cc:	1b7a      	subs	r2, r7, r5
   bd6ce:	689b      	ldr	r3, [r3, #8]
   bd6d0:	4629      	mov	r1, r5
   bd6d2:	4620      	mov	r0, r4
   bd6d4:	4798      	blx	r3
    }
    write('"');
   bd6d6:	2122      	movs	r1, #34	; 0x22
   bd6d8:	4620      	mov	r0, r4
   bd6da:	f7ff feae 	bl	bd43a <_ZN5spark10JSONWriter5writeEc>
}
   bd6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd6e2:	bf00      	nop
   bd6e4:	000c233c 	.word	0x000c233c

000bd6e8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bd6e8:	b513      	push	{r0, r1, r4, lr}
   bd6ea:	4604      	mov	r4, r0
   bd6ec:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bd6f0:	f7ff ff5e 	bl	bd5b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bd6f4:	4620      	mov	r0, r4
   bd6f6:	e9dd 2100 	ldrd	r2, r1, [sp]
   bd6fa:	f7ff ff97 	bl	bd62c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bd6fe:	2302      	movs	r3, #2
}
   bd700:	4620      	mov	r0, r4
    state_ = VALUE;
   bd702:	7123      	strb	r3, [r4, #4]
}
   bd704:	b002      	add	sp, #8
   bd706:	bd10      	pop	{r4, pc}

000bd708 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bd708:	b513      	push	{r0, r1, r4, lr}
   bd70a:	4604      	mov	r4, r0
   bd70c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bd710:	f7ff ff4e 	bl	bd5b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bd714:	4620      	mov	r0, r4
   bd716:	e9dd 2100 	ldrd	r2, r1, [sp]
   bd71a:	f7ff ff87 	bl	bd62c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bd71e:	2301      	movs	r3, #1
}
   bd720:	4620      	mov	r0, r4
    state_ = NEXT;
   bd722:	7123      	strb	r3, [r4, #4]
}
   bd724:	b002      	add	sp, #8
   bd726:	bd10      	pop	{r4, pc}

000bd728 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bd728:	6880      	ldr	r0, [r0, #8]
   bd72a:	6803      	ldr	r3, [r0, #0]
   bd72c:	68db      	ldr	r3, [r3, #12]
   bd72e:	4718      	bx	r3

000bd730 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bd730:	4770      	bx	lr

000bd732 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bd732:	4608      	mov	r0, r1
   bd734:	b111      	cbz	r1, bd73c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bd736:	680b      	ldr	r3, [r1, #0]
   bd738:	685b      	ldr	r3, [r3, #4]
   bd73a:	4718      	bx	r3
}
   bd73c:	4770      	bx	lr

000bd73e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bd73e:	4770      	bx	lr

000bd740 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bd740:	4770      	bx	lr

000bd742 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bd742:	4770      	bx	lr

000bd744 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bd744:	4770      	bx	lr

000bd746 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bd746:	b538      	push	{r3, r4, r5, lr}
   bd748:	4604      	mov	r4, r0
   bd74a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bd74c:	6800      	ldr	r0, [r0, #0]
   bd74e:	212e      	movs	r1, #46	; 0x2e
   bd750:	f002 ff4b 	bl	c05ea <strchrnul>
    size = s - category;
   bd754:	6823      	ldr	r3, [r4, #0]
   bd756:	1ac3      	subs	r3, r0, r3
   bd758:	602b      	str	r3, [r5, #0]
    if (size) {
   bd75a:	b123      	cbz	r3, bd766 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bd75c:	7803      	ldrb	r3, [r0, #0]
   bd75e:	b103      	cbz	r3, bd762 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bd760:	3001      	adds	r0, #1
   bd762:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bd764:	6020      	str	r0, [r4, #0]
}
   bd766:	4618      	mov	r0, r3
   bd768:	bd38      	pop	{r3, r4, r5, pc}

000bd76a <_ZN5spark16JSONStreamWriterD0Ev>:
   bd76a:	b510      	push	{r4, lr}
   bd76c:	210c      	movs	r1, #12
   bd76e:	4604      	mov	r4, r0
   bd770:	f7f6 fc95 	bl	b409e <_ZdlPvj>
   bd774:	4620      	mov	r0, r4
   bd776:	bd10      	pop	{r4, pc}

000bd778 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bd778:	b510      	push	{r4, lr}
   bd77a:	2104      	movs	r1, #4
   bd77c:	4604      	mov	r4, r0
   bd77e:	f7f6 fc8e 	bl	b409e <_ZdlPvj>
   bd782:	4620      	mov	r0, r4
   bd784:	bd10      	pop	{r4, pc}

000bd786 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bd786:	b510      	push	{r4, lr}
   bd788:	2104      	movs	r1, #4
   bd78a:	4604      	mov	r4, r0
   bd78c:	f7f6 fc87 	bl	b409e <_ZdlPvj>
   bd790:	4620      	mov	r0, r4
   bd792:	bd10      	pop	{r4, pc}

000bd794 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bd794:	f7fe bb56 	b.w	bbe44 <os_mutex_recursive_lock>

000bd798 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bd798:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bd79a:	f002 ff30 	bl	c05fe <strcmp>
}
   bd79e:	fab0 f080 	clz	r0, r0
   bd7a2:	0940      	lsrs	r0, r0, #5
   bd7a4:	bd08      	pop	{r3, pc}

000bd7a6 <__tcf_1>:
   bd7a6:	4770      	bx	lr

000bd7a8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bd7a8:	b510      	push	{r4, lr}
   bd7aa:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bd7ac:	f001 ff36 	bl	bf61c <_Z16_fetch_usbserialv>
   bd7b0:	4284      	cmp	r4, r0
   bd7b2:	d010      	beq.n	bd7d6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bd7b4:	f002 f938 	bl	bfa28 <_Z22__fetch_global_Serial1v>
   bd7b8:	4284      	cmp	r4, r0
   bd7ba:	d105      	bne.n	bd7c8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bd7bc:	f002 f934 	bl	bfa28 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bd7c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bd7c4:	f001 bec3 	b.w	bf54e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bd7c8:	b12c      	cbz	r4, bd7d6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bd7ca:	6823      	ldr	r3, [r4, #0]
   bd7cc:	4620      	mov	r0, r4
   bd7ce:	685b      	ldr	r3, [r3, #4]
}
   bd7d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd7d4:	4718      	bx	r3
   bd7d6:	bd10      	pop	{r4, pc}

000bd7d8 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bd7d8:	b513      	push	{r0, r1, r4, lr}
   bd7da:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bd7dc:	4608      	mov	r0, r1
   bd7de:	9101      	str	r1, [sp, #4]
   bd7e0:	f002 ff3d 	bl	c065e <strlen>
   bd7e4:	9901      	ldr	r1, [sp, #4]
   bd7e6:	4602      	mov	r2, r0
   bd7e8:	4620      	mov	r0, r4
}
   bd7ea:	b002      	add	sp, #8
   bd7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bd7f0:	f7ff bf8a 	b.w	bd708 <_ZN5spark10JSONWriter5valueEPKcj>

000bd7f4 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bd7f4:	b513      	push	{r0, r1, r4, lr}
   bd7f6:	4604      	mov	r4, r0
    write(str, strlen(str));
   bd7f8:	4608      	mov	r0, r1
   bd7fa:	9101      	str	r1, [sp, #4]
   bd7fc:	f002 ff2f 	bl	c065e <strlen>
   bd800:	6823      	ldr	r3, [r4, #0]
   bd802:	9901      	ldr	r1, [sp, #4]
   bd804:	68db      	ldr	r3, [r3, #12]
   bd806:	4602      	mov	r2, r0
   bd808:	4620      	mov	r0, r4
}
   bd80a:	b002      	add	sp, #8
   bd80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bd810:	4718      	bx	r3

000bd812 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bd812:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bd814:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bd816:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bd81a:	68db      	ldr	r3, [r3, #12]
   bd81c:	2201      	movs	r2, #1
   bd81e:	f10d 0107 	add.w	r1, sp, #7
   bd822:	4798      	blx	r3
}
   bd824:	b003      	add	sp, #12
   bd826:	f85d fb04 	ldr.w	pc, [sp], #4

000bd82a <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bd82a:	b40e      	push	{r1, r2, r3}
   bd82c:	b503      	push	{r0, r1, lr}
   bd82e:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bd830:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bd832:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bd836:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bd838:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bd83a:	f001 f942 	bl	beac2 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bd83e:	b002      	add	sp, #8
   bd840:	f85d eb04 	ldr.w	lr, [sp], #4
   bd844:	b003      	add	sp, #12
   bd846:	4770      	bx	lr

000bd848 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bd848:	680a      	ldr	r2, [r1, #0]
   bd84a:	6002      	str	r2, [r0, #0]
   bd84c:	684a      	ldr	r2, [r1, #4]
   bd84e:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bd850:	2200      	movs	r2, #0
   bd852:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bd856:	b510      	push	{r4, lr}
   bd858:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bd85a:	688c      	ldr	r4, [r1, #8]
   bd85c:	6084      	str	r4, [r0, #8]
   bd85e:	68cc      	ldr	r4, [r1, #12]
   bd860:	60c4      	str	r4, [r0, #12]
   bd862:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bd864:	608a      	str	r2, [r1, #8]
   bd866:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bd868:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bd86a:	610a      	str	r2, [r1, #16]
   bd86c:	bd10      	pop	{r4, pc}
	...

000bd870 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bd870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bd874:	e9d0 8400 	ldrd	r8, r4, [r0]
   bd878:	f04f 0a14 	mov.w	sl, #20
   bd87c:	9300      	str	r3, [sp, #0]
   bd87e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bd882:	4b18      	ldr	r3, [pc, #96]	; (bd8e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bd884:	10a4      	asrs	r4, r4, #2
   bd886:	4617      	mov	r7, r2
   bd888:	435c      	muls	r4, r3
   bd88a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bd88c:	2c00      	cmp	r4, #0
   bd88e:	dd21      	ble.n	bd8d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bd890:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bd892:	fb0a f006 	mul.w	r0, sl, r6
   bd896:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bd89a:	463a      	mov	r2, r7
   bd89c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bd8a0:	5828      	ldr	r0, [r5, r0]
   bd8a2:	9101      	str	r1, [sp, #4]
   bd8a4:	455f      	cmp	r7, fp
   bd8a6:	bf28      	it	cs
   bd8a8:	465a      	movcs	r2, fp
   bd8aa:	f002 fee0 	bl	c066e <strncmp>
                if (cmp == 0) {
   bd8ae:	2800      	cmp	r0, #0
   bd8b0:	9901      	ldr	r1, [sp, #4]
   bd8b2:	f04f 0301 	mov.w	r3, #1
   bd8b6:	d10b      	bne.n	bd8d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bd8b8:	455f      	cmp	r7, fp
   bd8ba:	d103      	bne.n	bd8c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bd8bc:	9a00      	ldr	r2, [sp, #0]
   bd8be:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bd8c0:	4634      	mov	r4, r6
   bd8c2:	e7e3      	b.n	bd88c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bd8c4:	d9fc      	bls.n	bd8c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bd8c6:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bd8c8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bd8cc:	3e01      	subs	r6, #1
   bd8ce:	e7f7      	b.n	bd8c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bd8d0:	dbf9      	blt.n	bd8c6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bd8d2:	e7f5      	b.n	bd8c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bd8d4:	eba5 0508 	sub.w	r5, r5, r8
}
   bd8d8:	4802      	ldr	r0, [pc, #8]	; (bd8e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bd8da:	10ad      	asrs	r5, r5, #2
   bd8dc:	4368      	muls	r0, r5
   bd8de:	b003      	add	sp, #12
   bd8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd8e4:	cccccccd 	.word	0xcccccccd

000bd8e8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bd8e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bd8ea:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bd8ec:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bd8ee:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bd8f0:	b303      	cbz	r3, bd934 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bd8f2:	b1f9      	cbz	r1, bd934 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bd8f4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bd8f6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bd8fa:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bd8fc:	a903      	add	r1, sp, #12
   bd8fe:	a801      	add	r0, sp, #4
   bd900:	f7ff ff21 	bl	bd746 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bd904:	4601      	mov	r1, r0
   bd906:	b1a8      	cbz	r0, bd934 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bd908:	f10d 030b 	add.w	r3, sp, #11
   bd90c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bd90e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bd912:	4620      	mov	r0, r4
   bd914:	f7ff ffac 	bl	bd870 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bd918:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bd91c:	b153      	cbz	r3, bd934 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bd91e:	6823      	ldr	r3, [r4, #0]
   bd920:	2414      	movs	r4, #20
   bd922:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bd926:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bd928:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bd92c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bd92e:	bfa8      	it	ge
   bd930:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bd932:	e7e3      	b.n	bd8fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bd934:	4628      	mov	r0, r5
   bd936:	b004      	add	sp, #16
   bd938:	bd70      	pop	{r4, r5, r6, pc}
	...

000bd93c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bd93c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bd93e:	4c09      	ldr	r4, [pc, #36]	; (bd964 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bd940:	7823      	ldrb	r3, [r4, #0]
   bd942:	f3bf 8f5b 	dmb	ish
   bd946:	07db      	lsls	r3, r3, #31
   bd948:	d409      	bmi.n	bd95e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bd94a:	4620      	mov	r0, r4
   bd94c:	f7f6 fbb6 	bl	b40bc <__cxa_guard_acquire>
   bd950:	b128      	cbz	r0, bd95e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bd952:	4620      	mov	r0, r4
   bd954:	f7f6 fbb7 	bl	b40c6 <__cxa_guard_release>
   bd958:	4803      	ldr	r0, [pc, #12]	; (bd968 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bd95a:	f002 fd71 	bl	c0440 <atexit>
}
   bd95e:	4803      	ldr	r0, [pc, #12]	; (bd96c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bd960:	bd10      	pop	{r4, pc}
   bd962:	bf00      	nop
   bd964:	2003e650 	.word	0x2003e650
   bd968:	000bd73f 	.word	0x000bd73f
   bd96c:	2003d768 	.word	0x2003d768

000bd970 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bd970:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bd972:	4c09      	ldr	r4, [pc, #36]	; (bd998 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bd974:	7823      	ldrb	r3, [r4, #0]
   bd976:	f3bf 8f5b 	dmb	ish
   bd97a:	07db      	lsls	r3, r3, #31
   bd97c:	d409      	bmi.n	bd992 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bd97e:	4620      	mov	r0, r4
   bd980:	f7f6 fb9c 	bl	b40bc <__cxa_guard_acquire>
   bd984:	b128      	cbz	r0, bd992 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bd986:	4620      	mov	r0, r4
   bd988:	f7f6 fb9d 	bl	b40c6 <__cxa_guard_release>
   bd98c:	4803      	ldr	r0, [pc, #12]	; (bd99c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bd98e:	f002 fd57 	bl	c0440 <atexit>
    return &factory;
}
   bd992:	4803      	ldr	r0, [pc, #12]	; (bd9a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bd994:	bd10      	pop	{r4, pc}
   bd996:	bf00      	nop
   bd998:	2003e654 	.word	0x2003e654
   bd99c:	000bd7a7 	.word	0x000bd7a7
   bd9a0:	2003d76c 	.word	0x2003d76c

000bd9a4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bd9a4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bd9a6:	2500      	movs	r5, #0
   bd9a8:	4604      	mov	r4, r0
   bd9aa:	e9c0 5500 	strd	r5, r5, [r0]
   bd9ae:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bd9b2:	6085      	str	r5, [r0, #8]
   bd9b4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bd9b6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bd9ba:	f7fe fa33 	bl	bbe24 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bd9be:	f7ff ffbd 	bl	bd93c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bd9c2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bd9c4:	f7ff ffd4 	bl	bd970 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bd9c8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bd9ca:	6220      	str	r0, [r4, #32]
}
   bd9cc:	4620      	mov	r0, r4
   bd9ce:	bd38      	pop	{r3, r4, r5, pc}

000bd9d0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bd9d0:	b510      	push	{r4, lr}
    static LogManager mgr;
   bd9d2:	4c0a      	ldr	r4, [pc, #40]	; (bd9fc <_ZN5spark10LogManager8instanceEv+0x2c>)
   bd9d4:	7823      	ldrb	r3, [r4, #0]
   bd9d6:	f3bf 8f5b 	dmb	ish
   bd9da:	07db      	lsls	r3, r3, #31
   bd9dc:	d40c      	bmi.n	bd9f8 <_ZN5spark10LogManager8instanceEv+0x28>
   bd9de:	4620      	mov	r0, r4
   bd9e0:	f7f6 fb6c 	bl	b40bc <__cxa_guard_acquire>
   bd9e4:	b140      	cbz	r0, bd9f8 <_ZN5spark10LogManager8instanceEv+0x28>
   bd9e6:	4806      	ldr	r0, [pc, #24]	; (bda00 <_ZN5spark10LogManager8instanceEv+0x30>)
   bd9e8:	f7ff ffdc 	bl	bd9a4 <_ZN5spark10LogManagerC1Ev>
   bd9ec:	4620      	mov	r0, r4
   bd9ee:	f7f6 fb6a 	bl	b40c6 <__cxa_guard_release>
   bd9f2:	4804      	ldr	r0, [pc, #16]	; (bda04 <_ZN5spark10LogManager8instanceEv+0x34>)
   bd9f4:	f002 fd24 	bl	c0440 <atexit>
    return &mgr;
}
   bd9f8:	4801      	ldr	r0, [pc, #4]	; (bda00 <_ZN5spark10LogManager8instanceEv+0x30>)
   bd9fa:	bd10      	pop	{r4, pc}
   bd9fc:	2003e64c 	.word	0x2003e64c
   bda00:	2003e65c 	.word	0x2003e65c
   bda04:	000bdebd 	.word	0x000bdebd

000bda08 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bda08:	4a02      	ldr	r2, [pc, #8]	; (bda14 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bda0a:	4903      	ldr	r1, [pc, #12]	; (bda18 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bda0c:	4803      	ldr	r0, [pc, #12]	; (bda1c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bda0e:	2300      	movs	r3, #0
   bda10:	f7fe bca0 	b.w	bc354 <log_set_callbacks>
   bda14:	000bdca1 	.word	0x000bdca1
   bda18:	000bdc2d 	.word	0x000bdc2d
   bda1c:	000bdbad 	.word	0x000bdbad

000bda20 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bda20:	2300      	movs	r3, #0
   bda22:	461a      	mov	r2, r3
   bda24:	4619      	mov	r1, r3
   bda26:	4618      	mov	r0, r3
   bda28:	f7fe bc94 	b.w	bc354 <log_set_callbacks>

000bda2c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bda2c:	b570      	push	{r4, r5, r6, lr}
   bda2e:	b08a      	sub	sp, #40	; 0x28
   bda30:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bda32:	4601      	mov	r1, r0
   bda34:	a804      	add	r0, sp, #16
   bda36:	f7fb fbe2 	bl	b91fe <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bda3a:	4e14      	ldr	r6, [pc, #80]	; (bda8c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bda3c:	a804      	add	r0, sp, #16
   bda3e:	f7ff fd9b 	bl	bd578 <_ZN5spark18JSONObjectIterator4nextEv>
   bda42:	b1e8      	cbz	r0, bda80 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bda44:	a904      	add	r1, sp, #16
   bda46:	4668      	mov	r0, sp
   bda48:	f7fb fbea 	bl	b9220 <_ZNK5spark18JSONObjectIterator4nameEv>
   bda4c:	9802      	ldr	r0, [sp, #8]
   bda4e:	4631      	mov	r1, r6
   bda50:	f7ff fea2 	bl	bd798 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bda54:	4604      	mov	r4, r0
   bda56:	b110      	cbz	r0, bda5e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bda58:	1e2c      	subs	r4, r5, #0
   bda5a:	bf18      	it	ne
   bda5c:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   bda5e:	a801      	add	r0, sp, #4
   bda60:	f7f8 fe50 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bda64:	2c00      	cmp	r4, #0
   bda66:	d0e9      	beq.n	bda3c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bda68:	a904      	add	r1, sp, #16
   bda6a:	4668      	mov	r0, sp
   bda6c:	f7fb fbe9 	bl	b9242 <_ZNK5spark18JSONObjectIterator5valueEv>
   bda70:	4668      	mov	r0, sp
   bda72:	f7ff fd24 	bl	bd4be <_ZNK5spark9JSONValue5toIntEv>
   bda76:	6028      	str	r0, [r5, #0]
   bda78:	a801      	add	r0, sp, #4
   bda7a:	f7f8 fe43 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bda7e:	e7dd      	b.n	bda3c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bda80:	a805      	add	r0, sp, #20
   bda82:	f7f8 fe3f 	bl	b6704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bda86:	b00a      	add	sp, #40	; 0x28
   bda88:	bd70      	pop	{r4, r5, r6, pc}
   bda8a:	bf00      	nop
   bda8c:	000c2342 	.word	0x000c2342

000bda90 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bda90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bda92:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bda94:	4620      	mov	r0, r4
   bda96:	4913      	ldr	r1, [pc, #76]	; (bdae4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bda98:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bda9a:	f002 fdb0 	bl	c05fe <strcmp>
   bda9e:	b950      	cbnz	r0, bdab6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bdaa0:	f001 fdbc 	bl	bf61c <_Z16_fetch_usbserialv>
   bdaa4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bdaa8:	f001 fda6 	bl	bf5f8 <_ZN9USBSerial5beginEl>
}
   bdaac:	b003      	add	sp, #12
   bdaae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bdab2:	f001 bdb3 	b.w	bf61c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bdab6:	490c      	ldr	r1, [pc, #48]	; (bdae8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bdab8:	4620      	mov	r0, r4
   bdaba:	f002 fda0 	bl	c05fe <strcmp>
   bdabe:	b978      	cbnz	r0, bdae0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bdac0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bdac4:	a901      	add	r1, sp, #4
   bdac6:	4628      	mov	r0, r5
        int baud = 9600;
   bdac8:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bdaca:	f7ff ffaf 	bl	bda2c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bdace:	f001 ffab 	bl	bfa28 <_Z22__fetch_global_Serial1v>
   bdad2:	9901      	ldr	r1, [sp, #4]
   bdad4:	f001 fd38 	bl	bf548 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bdad8:	f001 ffa6 	bl	bfa28 <_Z22__fetch_global_Serial1v>
}
   bdadc:	b003      	add	sp, #12
   bdade:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bdae0:	2000      	movs	r0, #0
   bdae2:	e7fb      	b.n	bdadc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bdae4:	000c2347 	.word	0x000c2347
   bdae8:	000c234e 	.word	0x000c234e

000bdaec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bdaec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bdaee:	e9d0 5300 	ldrd	r5, r3, [r0]
   bdaf2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bdaf4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bdaf6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bdafa:	42ae      	cmp	r6, r5
   bdafc:	d005      	beq.n	bdb0a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bdafe:	f105 0008 	add.w	r0, r5, #8
   bdb02:	f7ff fff3 	bl	bdaec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bdb06:	3514      	adds	r5, #20
   bdb08:	e7f7      	b.n	bdafa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bdb0a:	6820      	ldr	r0, [r4, #0]
   bdb0c:	f7fe fd7e 	bl	bc60c <free>
}
   bdb10:	4620      	mov	r0, r4
   bdb12:	bd70      	pop	{r4, r5, r6, pc}

000bdb14 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bdb14:	b510      	push	{r4, lr}
   bdb16:	4604      	mov	r4, r0
   bdb18:	300c      	adds	r0, #12
   bdb1a:	f7ff ffe7 	bl	bdaec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bdb1e:	4620      	mov	r0, r4
   bdb20:	f7fe fe17 	bl	bc752 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bdb24:	4620      	mov	r0, r4
   bdb26:	bd10      	pop	{r4, pc}

000bdb28 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bdb28:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bdb2a:	4b04      	ldr	r3, [pc, #16]	; (bdb3c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bdb2c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bdb2e:	f840 3b04 	str.w	r3, [r0], #4
   bdb32:	f7ff ffef 	bl	bdb14 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bdb36:	4620      	mov	r0, r4
   bdb38:	bd10      	pop	{r4, pc}
   bdb3a:	bf00      	nop
   bdb3c:	000c1754 	.word	0x000c1754

000bdb40 <_ZN5spark16StreamLogHandlerD0Ev>:
   bdb40:	b510      	push	{r4, lr}
   bdb42:	4604      	mov	r4, r0
   bdb44:	f7ff fff0 	bl	bdb28 <_ZN5spark16StreamLogHandlerD1Ev>
   bdb48:	4620      	mov	r0, r4
   bdb4a:	2124      	movs	r1, #36	; 0x24
   bdb4c:	f7f6 faa7 	bl	b409e <_ZdlPvj>
   bdb50:	4620      	mov	r0, r4
   bdb52:	bd10      	pop	{r4, pc}

000bdb54 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bdb54:	b510      	push	{r4, lr}
   bdb56:	4b03      	ldr	r3, [pc, #12]	; (bdb64 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bdb58:	6003      	str	r3, [r0, #0]
   bdb5a:	4604      	mov	r4, r0
   bdb5c:	f7ff ffe4 	bl	bdb28 <_ZN5spark16StreamLogHandlerD1Ev>
   bdb60:	4620      	mov	r0, r4
   bdb62:	bd10      	pop	{r4, pc}
   bdb64:	000c23e4 	.word	0x000c23e4

000bdb68 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bdb68:	b510      	push	{r4, lr}
   bdb6a:	4604      	mov	r4, r0
   bdb6c:	f7ff fff2 	bl	bdb54 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bdb70:	4620      	mov	r0, r4
   bdb72:	2124      	movs	r1, #36	; 0x24
   bdb74:	f7f6 fa93 	bl	b409e <_ZdlPvj>
   bdb78:	4620      	mov	r0, r4
   bdb7a:	bd10      	pop	{r4, pc}

000bdb7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bdb7c:	2200      	movs	r2, #0
   bdb7e:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bdb82:	b510      	push	{r4, lr}
        capacity_(0) {
   bdb84:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bdb86:	680c      	ldr	r4, [r1, #0]
   bdb88:	6004      	str	r4, [r0, #0]
   bdb8a:	684c      	ldr	r4, [r1, #4]
   bdb8c:	6044      	str	r4, [r0, #4]
   bdb8e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bdb90:	600a      	str	r2, [r1, #0]
   bdb92:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bdb94:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bdb96:	608a      	str	r2, [r1, #8]
}
   bdb98:	bd10      	pop	{r4, pc}

000bdb9a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   bdb9a:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bdb9c:	6803      	ldr	r3, [r0, #0]
   bdb9e:	4604      	mov	r4, r0
   bdba0:	6818      	ldr	r0, [r3, #0]
   bdba2:	f7fe f957 	bl	bbe54 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bdba6:	4620      	mov	r0, r4
   bdba8:	bd10      	pop	{r4, pc}
	...

000bdbac <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bdbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdbb0:	b087      	sub	sp, #28
   bdbb2:	4680      	mov	r8, r0
   bdbb4:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bdbb6:	4b1c      	ldr	r3, [pc, #112]	; (bdc28 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bdbb8:	685b      	ldr	r3, [r3, #4]
   bdbba:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bdbbe:	4689      	mov	r9, r1
   bdbc0:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bdbc2:	b96b      	cbnz	r3, bdbe0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bdbc4:	f7ff ff04 	bl	bd9d0 <_ZN5spark10LogManager8instanceEv>
   bdbc8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bdbca:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bdbce:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bdbd0:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bdbd2:	f7ff fddf 	bl	bd794 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bdbd6:	7b23      	ldrb	r3, [r4, #12]
   bdbd8:	b12b      	cbz	r3, bdbe6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bdbda:	a805      	add	r0, sp, #20
   bdbdc:	f7ff ffdd 	bl	bdb9a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bdbe0:	b007      	add	sp, #28
   bdbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bdbe6:	2301      	movs	r3, #1
   bdbe8:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bdbea:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bdbee:	fa5f f989 	uxtb.w	r9, r9
   bdbf2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bdbf6:	45aa      	cmp	sl, r5
   bdbf8:	d012      	beq.n	bdc20 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bdbfa:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bdbfe:	4631      	mov	r1, r6
   bdc00:	1d38      	adds	r0, r7, #4
   bdc02:	f7ff fe71 	bl	bd8e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bdc06:	4581      	cmp	r9, r0
   bdc08:	d3f5      	bcc.n	bdbf6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bdc0a:	683b      	ldr	r3, [r7, #0]
   bdc0c:	9a03      	ldr	r2, [sp, #12]
   bdc0e:	9200      	str	r2, [sp, #0]
   bdc10:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bdc14:	464a      	mov	r2, r9
   bdc16:	4633      	mov	r3, r6
   bdc18:	4641      	mov	r1, r8
   bdc1a:	4638      	mov	r0, r7
   bdc1c:	47d8      	blx	fp
   bdc1e:	e7ea      	b.n	bdbf6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bdc20:	2300      	movs	r3, #0
   bdc22:	7323      	strb	r3, [r4, #12]
   bdc24:	e7d9      	b.n	bdbda <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bdc26:	bf00      	nop
   bdc28:	e000ed00 	.word	0xe000ed00

000bdc2c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bdc2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdc30:	469b      	mov	fp, r3
   bdc32:	4b1a      	ldr	r3, [pc, #104]	; (bdc9c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bdc34:	685b      	ldr	r3, [r3, #4]
   bdc36:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bdc3a:	4680      	mov	r8, r0
   bdc3c:	4689      	mov	r9, r1
   bdc3e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bdc40:	b96b      	cbnz	r3, bdc5e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bdc42:	f7ff fec5 	bl	bd9d0 <_ZN5spark10LogManager8instanceEv>
   bdc46:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bdc48:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bdc4c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bdc4e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bdc50:	f7ff fda0 	bl	bd794 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bdc54:	7b23      	ldrb	r3, [r4, #12]
   bdc56:	b12b      	cbz	r3, bdc64 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bdc58:	a801      	add	r0, sp, #4
   bdc5a:	f7ff ff9e 	bl	bdb9a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bdc5e:	b003      	add	sp, #12
   bdc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bdc64:	2301      	movs	r3, #1
   bdc66:	7323      	strb	r3, [r4, #12]
   bdc68:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bdc6c:	b2f6      	uxtb	r6, r6
   bdc6e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bdc72:	4555      	cmp	r5, sl
   bdc74:	d00e      	beq.n	bdc94 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bdc76:	f855 7b04 	ldr.w	r7, [r5], #4
   bdc7a:	4659      	mov	r1, fp
   bdc7c:	1d38      	adds	r0, r7, #4
   bdc7e:	f7ff fe33 	bl	bd8e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bdc82:	4286      	cmp	r6, r0
   bdc84:	d3f5      	bcc.n	bdc72 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bdc86:	683b      	ldr	r3, [r7, #0]
   bdc88:	464a      	mov	r2, r9
   bdc8a:	68db      	ldr	r3, [r3, #12]
   bdc8c:	4641      	mov	r1, r8
   bdc8e:	4638      	mov	r0, r7
   bdc90:	4798      	blx	r3
   bdc92:	e7ee      	b.n	bdc72 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bdc94:	2300      	movs	r3, #0
   bdc96:	7323      	strb	r3, [r4, #12]
   bdc98:	e7de      	b.n	bdc58 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bdc9a:	bf00      	nop
   bdc9c:	e000ed00 	.word	0xe000ed00

000bdca0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bdca0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bdca4:	4b16      	ldr	r3, [pc, #88]	; (bdd00 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bdca6:	685b      	ldr	r3, [r3, #4]
   bdca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bdcac:	4605      	mov	r5, r0
   bdcae:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bdcb0:	bb1b      	cbnz	r3, bdcfa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bdcb2:	f7ff fe8d 	bl	bd9d0 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bdcb6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bdcba:	4604      	mov	r4, r0
   bdcbc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bdcbe:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bdcc0:	f7ff fd68 	bl	bd794 <_ZN14RecursiveMutex4lockEv.isra.0>
   bdcc4:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bdcc8:	2446      	movs	r4, #70	; 0x46
   bdcca:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bdcce:	45b0      	cmp	r8, r6
   bdcd0:	d109      	bne.n	bdce6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bdcd2:	a801      	add	r0, sp, #4
   bdcd4:	f7ff ff61 	bl	bdb9a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bdcd8:	42a5      	cmp	r5, r4
   bdcda:	bfb4      	ite	lt
   bdcdc:	2000      	movlt	r0, #0
   bdcde:	2001      	movge	r0, #1
}
   bdce0:	b002      	add	sp, #8
   bdce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bdce6:	f856 0b04 	ldr.w	r0, [r6], #4
   bdcea:	4639      	mov	r1, r7
   bdcec:	3004      	adds	r0, #4
   bdcee:	f7ff fdfb 	bl	bd8e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bdcf2:	4284      	cmp	r4, r0
   bdcf4:	bfa8      	it	ge
   bdcf6:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bdcf8:	e7e9      	b.n	bdcce <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bdcfa:	2000      	movs	r0, #0
   bdcfc:	e7f0      	b.n	bdce0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bdcfe:	bf00      	nop
   bdd00:	e000ed00 	.word	0xe000ed00

000bdd04 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bdd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bdd06:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bdd0a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bdd0c:	4604      	mov	r4, r0
   bdd0e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bdd10:	db0d      	blt.n	bdd2e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bdd12:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bdd14:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bdd16:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bdd18:	dd04      	ble.n	bdd24 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bdd1a:	00b9      	lsls	r1, r7, #2
   bdd1c:	f7fe fc7e 	bl	bc61c <realloc>
            if (!d) {
   bdd20:	b918      	cbnz	r0, bdd2a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bdd22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bdd24:	f7fe fc72 	bl	bc60c <free>
        T* d = nullptr;
   bdd28:	2000      	movs	r0, #0
        data_ = d;
   bdd2a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bdd2c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bdd2e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bdd30:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bdd32:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bdd36:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bdd38:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bdd3c:	1d08      	adds	r0, r1, #4
   bdd3e:	f002 fbb9 	bl	c04b4 <memmove>
    new(p) T(std::move(value));
   bdd42:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bdd46:	6863      	ldr	r3, [r4, #4]
   bdd48:	3301      	adds	r3, #1
   bdd4a:	6063      	str	r3, [r4, #4]
    return true;
   bdd4c:	2001      	movs	r0, #1
   bdd4e:	e7e8      	b.n	bdd22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bdd50 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bdd50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bdd52:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bdd56:	4604      	mov	r4, r0
   bdd58:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bdd5a:	9301      	str	r3, [sp, #4]
   bdd5c:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bdd5e:	f7ff fd19 	bl	bd794 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bdd62:	e9d4 3200 	ldrd	r3, r2, [r4]
   bdd66:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bdd6a:	4293      	cmp	r3, r2
   bdd6c:	4619      	mov	r1, r3
   bdd6e:	d00b      	beq.n	bdd88 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bdd70:	6809      	ldr	r1, [r1, #0]
   bdd72:	42a9      	cmp	r1, r5
   bdd74:	f103 0304 	add.w	r3, r3, #4
   bdd78:	d1f7      	bne.n	bdd6a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bdd7a:	a801      	add	r0, sp, #4
   bdd7c:	f7ff ff0d 	bl	bdb9a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bdd80:	2500      	movs	r5, #0
}
   bdd82:	4628      	mov	r0, r5
   bdd84:	b003      	add	sp, #12
   bdd86:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bdd88:	4629      	mov	r1, r5
   bdd8a:	4620      	mov	r0, r4
   bdd8c:	f7ff ffba 	bl	bdd04 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bdd90:	4605      	mov	r5, r0
   bdd92:	2800      	cmp	r0, #0
   bdd94:	d0f1      	beq.n	bdd7a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bdd96:	6863      	ldr	r3, [r4, #4]
   bdd98:	2b01      	cmp	r3, #1
   bdd9a:	d101      	bne.n	bdda0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bdd9c:	f7ff fe34 	bl	bda08 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bdda0:	a801      	add	r0, sp, #4
   bdda2:	f7ff fefa 	bl	bdb9a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bdda6:	e7ec      	b.n	bdd82 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bdda8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bdda8:	b570      	push	{r4, r5, r6, lr}
   bddaa:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bddac:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bddb0:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bddb2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bddb6:	4282      	cmp	r2, r0
   bddb8:	d00f      	beq.n	bddda <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bddba:	4601      	mov	r1, r0
            if (*p == value) {
   bddbc:	681d      	ldr	r5, [r3, #0]
   bddbe:	f851 6b04 	ldr.w	r6, [r1], #4
   bddc2:	42ae      	cmp	r6, r5
   bddc4:	d107      	bne.n	bddd6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bddc6:	1a52      	subs	r2, r2, r1
   bddc8:	f002 fb74 	bl	c04b4 <memmove>
    --size_;
   bddcc:	6863      	ldr	r3, [r4, #4]
   bddce:	3b01      	subs	r3, #1
   bddd0:	6063      	str	r3, [r4, #4]
    return true;
   bddd2:	2001      	movs	r0, #1
}
   bddd4:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bddd6:	4608      	mov	r0, r1
   bddd8:	e7ed      	b.n	bddb6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bddda:	2000      	movs	r0, #0
   bdddc:	e7fa      	b.n	bddd4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bddde <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bddde:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bdde0:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bdde4:	4604      	mov	r4, r0
   bdde6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bdde8:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bddea:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bddec:	f7ff fcd2 	bl	bd794 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bddf0:	a901      	add	r1, sp, #4
   bddf2:	4620      	mov	r0, r4
   bddf4:	f7ff ffd8 	bl	bdda8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bddf8:	b118      	cbz	r0, bde02 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bddfa:	6863      	ldr	r3, [r4, #4]
   bddfc:	b90b      	cbnz	r3, bde02 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bddfe:	f7ff fe0f 	bl	bda20 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bde02:	a803      	add	r0, sp, #12
   bde04:	f7ff fec9 	bl	bdb9a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bde08:	b004      	add	sp, #16
   bde0a:	bd10      	pop	{r4, pc}

000bde0c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bde0c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bde0e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bde12:	2318      	movs	r3, #24
   bde14:	4604      	mov	r4, r0
   bde16:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bde1a:	42ae      	cmp	r6, r5
   bde1c:	d015      	beq.n	bde4a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bde1e:	f105 0110 	add.w	r1, r5, #16
   bde22:	4620      	mov	r0, r4
   bde24:	f7ff ffc0 	bl	bdda8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bde28:	6863      	ldr	r3, [r4, #4]
   bde2a:	b90b      	cbnz	r3, bde30 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bde2c:	f7ff fdf8 	bl	bda20 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bde30:	69e0      	ldr	r0, [r4, #28]
   bde32:	6929      	ldr	r1, [r5, #16]
   bde34:	6803      	ldr	r3, [r0, #0]
   bde36:	68db      	ldr	r3, [r3, #12]
   bde38:	4798      	blx	r3
        if (h.stream) {
   bde3a:	6969      	ldr	r1, [r5, #20]
   bde3c:	b119      	cbz	r1, bde46 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bde3e:	6a20      	ldr	r0, [r4, #32]
   bde40:	6803      	ldr	r3, [r0, #0]
   bde42:	68db      	ldr	r3, [r3, #12]
   bde44:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bde46:	3518      	adds	r5, #24
   bde48:	e7e7      	b.n	bde1a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bde4a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bde4e:	2618      	movs	r6, #24
   bde50:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bde54:	42ae      	cmp	r6, r5
   bde56:	d004      	beq.n	bde62 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bde58:	4628      	mov	r0, r5
   bde5a:	f000 ff45 	bl	bece8 <_ZN6StringD1Ev>
   bde5e:	3518      	adds	r5, #24
   bde60:	e7f8      	b.n	bde54 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bde62:	2300      	movs	r3, #0
   bde64:	6163      	str	r3, [r4, #20]
}
   bde66:	bd70      	pop	{r4, r5, r6, pc}

000bde68 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bde68:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bde6a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bde6c:	f7ff fdd8 	bl	bda20 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bde70:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bde74:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bde76:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bde78:	f7ff fc8c 	bl	bd794 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bde7c:	4620      	mov	r0, r4
   bde7e:	f7ff ffc5 	bl	bde0c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bde82:	a801      	add	r0, sp, #4
   bde84:	f7ff fe89 	bl	bdb9a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bde88:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bde8a:	b108      	cbz	r0, bde90 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bde8c:	f7fd ffd2 	bl	bbe34 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bde90:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bde94:	2618      	movs	r6, #24
   bde96:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bde9a:	42ae      	cmp	r6, r5
   bde9c:	d004      	beq.n	bdea8 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bde9e:	4628      	mov	r0, r5
   bdea0:	f000 ff22 	bl	bece8 <_ZN6StringD1Ev>
   bdea4:	3518      	adds	r5, #24
   bdea6:	e7f8      	b.n	bde9a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bdea8:	6920      	ldr	r0, [r4, #16]
   bdeaa:	f7fe fbaf 	bl	bc60c <free>
   bdeae:	6820      	ldr	r0, [r4, #0]
   bdeb0:	f7fe fbac 	bl	bc60c <free>
}
   bdeb4:	4620      	mov	r0, r4
   bdeb6:	b002      	add	sp, #8
   bdeb8:	bd70      	pop	{r4, r5, r6, pc}
	...

000bdebc <__tcf_2>:
    static LogManager mgr;
   bdebc:	4801      	ldr	r0, [pc, #4]	; (bdec4 <__tcf_2+0x8>)
   bdebe:	f7ff bfd3 	b.w	bde68 <_ZN5spark10LogManagerD1Ev>
   bdec2:	bf00      	nop
   bdec4:	2003e65c 	.word	0x2003e65c

000bdec8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bdec8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bdeca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdecc:	4604      	mov	r4, r0
   bdece:	460d      	mov	r5, r1
   bded0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bded2:	d915      	bls.n	bdf00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bded4:	4290      	cmp	r0, r2
   bded6:	d214      	bcs.n	bdf02 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bded8:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bdedc:	1a75      	subs	r5, r6, r1
   bdede:	f1a1 0714 	sub.w	r7, r1, #20
   bdee2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bdee4:	42b7      	cmp	r7, r6
   bdee6:	d01a      	beq.n	bdf1e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bdee8:	b11c      	cbz	r4, bdef2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bdeea:	4631      	mov	r1, r6
   bdeec:	4620      	mov	r0, r4
   bdeee:	f7ff fcab 	bl	bd848 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bdef2:	f106 0008 	add.w	r0, r6, #8
   bdef6:	f7ff fdf9 	bl	bdaec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   bdefa:	3e14      	subs	r6, #20
   bdefc:	3c14      	subs	r4, #20
   bdefe:	e7f1      	b.n	bdee4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   bdf00:	d00d      	beq.n	bdf1e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   bdf02:	42b5      	cmp	r5, r6
   bdf04:	d00b      	beq.n	bdf1e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   bdf06:	b11c      	cbz	r4, bdf10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   bdf08:	4629      	mov	r1, r5
   bdf0a:	4620      	mov	r0, r4
   bdf0c:	f7ff fc9c 	bl	bd848 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bdf10:	f105 0008 	add.w	r0, r5, #8
   bdf14:	f7ff fdea 	bl	bdaec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bdf18:	3514      	adds	r5, #20
   bdf1a:	3414      	adds	r4, #20
   bdf1c:	e7f1      	b.n	bdf02 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bdf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bdf20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bdf20:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bdf22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdf24:	4604      	mov	r4, r0
   bdf26:	460d      	mov	r5, r1
   bdf28:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bdf2a:	d914      	bls.n	bdf56 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bdf2c:	4290      	cmp	r0, r2
   bdf2e:	d213      	bcs.n	bdf58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   bdf30:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   bdf34:	1a75      	subs	r5, r6, r1
   bdf36:	f1a1 0710 	sub.w	r7, r1, #16
   bdf3a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bdf3c:	42b7      	cmp	r7, r6
   bdf3e:	d018      	beq.n	bdf72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bdf40:	b11c      	cbz	r4, bdf4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bdf42:	4631      	mov	r1, r6
   bdf44:	4620      	mov	r0, r4
   bdf46:	f000 ff4b 	bl	bede0 <_ZN6StringC1EOS_>
                end->~T();
   bdf4a:	4630      	mov	r0, r6
   bdf4c:	f000 fecc 	bl	bece8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bdf50:	3e10      	subs	r6, #16
   bdf52:	3c10      	subs	r4, #16
   bdf54:	e7f2      	b.n	bdf3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bdf56:	d00c      	beq.n	bdf72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bdf58:	42b5      	cmp	r5, r6
   bdf5a:	d00a      	beq.n	bdf72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bdf5c:	b11c      	cbz	r4, bdf66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bdf5e:	4629      	mov	r1, r5
   bdf60:	4620      	mov	r0, r4
   bdf62:	f000 ff3d 	bl	bede0 <_ZN6StringC1EOS_>
                p->~T();
   bdf66:	4628      	mov	r0, r5
   bdf68:	f000 febe 	bl	bece8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bdf6c:	3510      	adds	r5, #16
   bdf6e:	3410      	adds	r4, #16
   bdf70:	e7f2      	b.n	bdf58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bdf72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bdf74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bdf74:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bdf76:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bdf78:	4605      	mov	r5, r0
        if (n > 0) {
   bdf7a:	dd11      	ble.n	bdfa0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bdf7c:	0130      	lsls	r0, r6, #4
   bdf7e:	f7fe fb3d 	bl	bc5fc <malloc>
            if (!d) {
   bdf82:	4604      	mov	r4, r0
   bdf84:	b158      	cbz	r0, bdf9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bdf86:	e9d5 1200 	ldrd	r1, r2, [r5]
   bdf8a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bdf8e:	f7ff ffc7 	bl	bdf20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bdf92:	6828      	ldr	r0, [r5, #0]
   bdf94:	f7fe fb3a 	bl	bc60c <free>
        data_ = d;
   bdf98:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bdf9a:	60ae      	str	r6, [r5, #8]
        return true;
   bdf9c:	2001      	movs	r0, #1
    }
   bdf9e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bdfa0:	2400      	movs	r4, #0
   bdfa2:	e7f6      	b.n	bdf92 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bdfa4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bdfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdfa8:	4690      	mov	r8, r2
   bdfaa:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bdfac:	2300      	movs	r3, #0
   bdfae:	9103      	str	r1, [sp, #12]
    return size_;
   bdfb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bdfb4:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bdfb6:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bdfb8:	4299      	cmp	r1, r3
        capacity_(0) {
   bdfba:	e9c0 3300 	strd	r3, r3, [r0]
   bdfbe:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bdfc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bdfc6:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bdfca:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bdfcc:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bdfce:	dc23      	bgt.n	be018 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bdfd0:	e9d8 5700 	ldrd	r5, r7, [r8]
   bdfd4:	2314      	movs	r3, #20
   bdfd6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bdfda:	42af      	cmp	r7, r5
   bdfdc:	d03b      	beq.n	be056 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bdfde:	4629      	mov	r1, r5
   bdfe0:	a80b      	add	r0, sp, #44	; 0x2c
   bdfe2:	f000 fefd 	bl	bede0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bdfe6:	a90b      	add	r1, sp, #44	; 0x2c
   bdfe8:	a80f      	add	r0, sp, #60	; 0x3c
   bdfea:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bdfec:	f000 fef8 	bl	bede0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bdff0:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bdff4:	4299      	cmp	r1, r3
   bdff6:	da1b      	bge.n	be030 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bdff8:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bdffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bdffc:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   be000:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   be004:	4631      	mov	r1, r6
   be006:	f106 0010 	add.w	r0, r6, #16
   be00a:	f7ff ff89 	bl	bdf20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   be00e:	b9ee      	cbnz	r6, be04c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   be010:	9b09      	ldr	r3, [sp, #36]	; 0x24
   be012:	3301      	adds	r3, #1
   be014:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   be016:	e011      	b.n	be03c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   be018:	a808      	add	r0, sp, #32
   be01a:	f7ff ffab 	bl	bdf74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   be01e:	2800      	cmp	r0, #0
   be020:	d1d6      	bne.n	bdfd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   be022:	a808      	add	r0, sp, #32
   be024:	f7fe fb95 	bl	bc752 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   be028:	4620      	mov	r0, r4
   be02a:	b015      	add	sp, #84	; 0x54
   be02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be030:	3101      	adds	r1, #1
   be032:	a808      	add	r0, sp, #32
   be034:	f7ff ff9e 	bl	bdf74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   be038:	2800      	cmp	r0, #0
   be03a:	d1dd      	bne.n	bdff8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   be03c:	a80f      	add	r0, sp, #60	; 0x3c
   be03e:	f000 fe53 	bl	bece8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   be042:	a80b      	add	r0, sp, #44	; 0x2c
   be044:	f000 fe50 	bl	bece8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   be048:	3514      	adds	r5, #20
   be04a:	e7c6      	b.n	bdfda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   be04c:	a90f      	add	r1, sp, #60	; 0x3c
   be04e:	4630      	mov	r0, r6
   be050:	f000 fec6 	bl	bede0 <_ZN6StringC1EOS_>
   be054:	e7dc      	b.n	be010 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   be056:	2600      	movs	r6, #0
   be058:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   be05c:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   be05e:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   be062:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   be066:	429e      	cmp	r6, r3
   be068:	da7c      	bge.n	be164 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   be06a:	0133      	lsls	r3, r6, #4
   be06c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   be06e:	9306      	str	r3, [sp, #24]
        if (!category) {
   be070:	b90b      	cbnz	r3, be076 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   be072:	3601      	adds	r6, #1
   be074:	e7f5      	b.n	be062 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   be076:	2300      	movs	r3, #0
   be078:	9307      	str	r3, [sp, #28]
   be07a:	fb09 f306 	mul.w	r3, r9, r6
   be07e:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   be080:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   be082:	a907      	add	r1, sp, #28
   be084:	a806      	add	r0, sp, #24
   be086:	f7ff fb5e 	bl	bd746 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   be08a:	4682      	mov	sl, r0
   be08c:	2800      	cmp	r0, #0
   be08e:	d0f0      	beq.n	be072 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   be090:	f04f 0300 	mov.w	r3, #0
   be094:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   be098:	4601      	mov	r1, r0
   be09a:	9a07      	ldr	r2, [sp, #28]
   be09c:	f10d 0317 	add.w	r3, sp, #23
   be0a0:	4628      	mov	r0, r5
   be0a2:	f7ff fbe5 	bl	bd870 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   be0a6:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   be0aa:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   be0ac:	2f00      	cmp	r7, #0
   be0ae:	d14a      	bne.n	be146 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   be0b0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   be0b4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   be0b8:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   be0bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   be0c0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   be0c4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   be0c8:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be0ca:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   be0ce:	4293      	cmp	r3, r2
   be0d0:	db17      	blt.n	be102 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   be0d2:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   be0d6:	f1ba 0f00 	cmp.w	sl, #0
   be0da:	dd30      	ble.n	be13e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   be0dc:	fb09 f00a 	mul.w	r0, r9, sl
   be0e0:	f7fe fa8c 	bl	bc5fc <malloc>
            if (!d) {
   be0e4:	4683      	mov	fp, r0
   be0e6:	b360      	cbz	r0, be142 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   be0e8:	e9d5 1200 	ldrd	r1, r2, [r5]
   be0ec:	fb09 1202 	mla	r2, r9, r2, r1
   be0f0:	f7ff feea 	bl	bdec8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   be0f4:	6828      	ldr	r0, [r5, #0]
   be0f6:	f7fe fa89 	bl	bc60c <free>
        data_ = d;
   be0fa:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   be0fe:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   be102:	682b      	ldr	r3, [r5, #0]
   be104:	9a01      	ldr	r2, [sp, #4]
   be106:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   be10a:	686a      	ldr	r2, [r5, #4]
   be10c:	4651      	mov	r1, sl
   be10e:	fb09 3202 	mla	r2, r9, r2, r3
   be112:	f10a 0014 	add.w	r0, sl, #20
   be116:	f7ff fed7 	bl	bdec8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   be11a:	f1ba 0f00 	cmp.w	sl, #0
   be11e:	d003      	beq.n	be128 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   be120:	a90f      	add	r1, sp, #60	; 0x3c
   be122:	4650      	mov	r0, sl
   be124:	f7ff fb90 	bl	bd848 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   be128:	686b      	ldr	r3, [r5, #4]
   be12a:	3301      	adds	r3, #1
   be12c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   be12e:	a811      	add	r0, sp, #68	; 0x44
   be130:	f7ff fcdc 	bl	bdaec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   be134:	b13f      	cbz	r7, be146 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   be136:	a80b      	add	r0, sp, #44	; 0x2c
   be138:	f7ff fcd8 	bl	bdaec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   be13c:	e771      	b.n	be022 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   be13e:	46bb      	mov	fp, r7
   be140:	e7d8      	b.n	be0f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   be142:	2701      	movs	r7, #1
   be144:	e7f3      	b.n	be12e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   be146:	9b01      	ldr	r3, [sp, #4]
   be148:	682d      	ldr	r5, [r5, #0]
   be14a:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   be14e:	9b06      	ldr	r3, [sp, #24]
   be150:	781b      	ldrb	r3, [r3, #0]
   be152:	b92b      	cbnz	r3, be160 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   be154:	f8d8 3000 	ldr.w	r3, [r8]
   be158:	9a02      	ldr	r2, [sp, #8]
   be15a:	4413      	add	r3, r2
   be15c:	7c1b      	ldrb	r3, [r3, #16]
   be15e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   be160:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   be162:	e78e      	b.n	be082 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be164:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   be166:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be168:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   be16a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be16c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   be16e:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   be170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   be172:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be174:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   be176:	60a2      	str	r2, [r4, #8]
   be178:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   be17a:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be17c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   be17e:	60e2      	str	r2, [r4, #12]
   be180:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   be182:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be184:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   be186:	6122      	str	r2, [r4, #16]
   be188:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   be18a:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   be18c:	9b03      	ldr	r3, [sp, #12]
   be18e:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   be190:	6162      	str	r2, [r4, #20]
   be192:	7623      	strb	r3, [r4, #24]
   be194:	e7cf      	b.n	be136 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000be198 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   be198:	b5f0      	push	{r4, r5, r6, r7, lr}
   be19a:	4604      	mov	r4, r0
   be19c:	b087      	sub	sp, #28
   be19e:	460d      	mov	r5, r1
        filter_(level, filters) {
   be1a0:	4626      	mov	r6, r4
        stream_(&stream) {
   be1a2:	4619      	mov	r1, r3
   be1a4:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   be1a6:	4617      	mov	r7, r2
        stream_(&stream) {
   be1a8:	f7f8 fbfb 	bl	b69a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   be1ac:	4b0b      	ldr	r3, [pc, #44]	; (be1dc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   be1ae:	f846 3b04 	str.w	r3, [r6], #4
   be1b2:	4669      	mov	r1, sp
   be1b4:	a803      	add	r0, sp, #12
   be1b6:	f7f8 fbf4 	bl	b69a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   be1ba:	aa03      	add	r2, sp, #12
   be1bc:	4639      	mov	r1, r7
   be1be:	4630      	mov	r0, r6
   be1c0:	f7ff fef0 	bl	bdfa4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   be1c4:	a803      	add	r0, sp, #12
   be1c6:	f7f8 fbab 	bl	b6920 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   be1ca:	4668      	mov	r0, sp
   be1cc:	f7f8 fba8 	bl	b6920 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   be1d0:	4b03      	ldr	r3, [pc, #12]	; (be1e0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   be1d2:	6023      	str	r3, [r4, #0]
}
   be1d4:	4620      	mov	r0, r4
        stream_(&stream) {
   be1d6:	6225      	str	r5, [r4, #32]
}
   be1d8:	b007      	add	sp, #28
   be1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   be1dc:	000c1754 	.word	0x000c1754
   be1e0:	000c23cc 	.word	0x000c23cc

000be1e4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   be1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   be1e6:	460f      	mov	r7, r1
   be1e8:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   be1ea:	491d      	ldr	r1, [pc, #116]	; (be260 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   be1ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   be1ee:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   be1f0:	4616      	mov	r6, r2
   be1f2:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   be1f4:	f002 fa03 	bl	c05fe <strcmp>
   be1f8:	b9c0      	cbnz	r0, be22c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   be1fa:	b1a4      	cbz	r4, be226 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   be1fc:	4629      	mov	r1, r5
   be1fe:	a801      	add	r0, sp, #4
   be200:	f7ff fcbc 	bl	bdb7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   be204:	4917      	ldr	r1, [pc, #92]	; (be264 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   be206:	2024      	movs	r0, #36	; 0x24
   be208:	f001 fc32 	bl	bfa70 <_ZnwjRKSt9nothrow_t>
   be20c:	4605      	mov	r5, r0
   be20e:	b130      	cbz	r0, be21e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   be210:	ab01      	add	r3, sp, #4
   be212:	4632      	mov	r2, r6
   be214:	4621      	mov	r1, r4
   be216:	f7ff ffbf 	bl	be198 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   be21a:	4b13      	ldr	r3, [pc, #76]	; (be268 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   be21c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   be21e:	a801      	add	r0, sp, #4
   be220:	f7f8 fb7e 	bl	b6920 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   be224:	462c      	mov	r4, r5
}
   be226:	4620      	mov	r0, r4
   be228:	b005      	add	sp, #20
   be22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   be22c:	490f      	ldr	r1, [pc, #60]	; (be26c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   be22e:	4638      	mov	r0, r7
   be230:	f002 f9e5 	bl	c05fe <strcmp>
   be234:	b990      	cbnz	r0, be25c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   be236:	2c00      	cmp	r4, #0
   be238:	d0f5      	beq.n	be226 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   be23a:	4629      	mov	r1, r5
   be23c:	a801      	add	r0, sp, #4
   be23e:	f7ff fc9d 	bl	bdb7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   be242:	4908      	ldr	r1, [pc, #32]	; (be264 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   be244:	2024      	movs	r0, #36	; 0x24
   be246:	f001 fc13 	bl	bfa70 <_ZnwjRKSt9nothrow_t>
   be24a:	4605      	mov	r5, r0
   be24c:	2800      	cmp	r0, #0
   be24e:	d0e6      	beq.n	be21e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   be250:	ab01      	add	r3, sp, #4
   be252:	4632      	mov	r2, r6
   be254:	4621      	mov	r1, r4
   be256:	f7ff ff9f 	bl	be198 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   be25a:	e7e0      	b.n	be21e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   be25c:	2400      	movs	r4, #0
   be25e:	e7e2      	b.n	be226 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   be260:	000c2356 	.word	0x000c2356
   be264:	000c2520 	.word	0x000c2520
   be268:	000c23e4 	.word	0x000c23e4
   be26c:	000c235a 	.word	0x000c235a

000be270 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   be270:	4b01      	ldr	r3, [pc, #4]	; (be278 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   be272:	4a02      	ldr	r2, [pc, #8]	; (be27c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   be274:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   be276:	4770      	bx	lr
   be278:	2003e658 	.word	0x2003e658
   be27c:	000c236b 	.word	0x000c236b

000be280 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   be280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be284:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   be286:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   be28a:	4604      	mov	r4, r0
   be28c:	460e      	mov	r6, r1
   be28e:	4617      	mov	r7, r2
   be290:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   be292:	f001 f9c3 	bl	bf61c <_Z16_fetch_usbserialv>
   be296:	4581      	cmp	r9, r0
   be298:	d04c      	beq.n	be334 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   be29a:	792b      	ldrb	r3, [r5, #4]
   be29c:	0719      	lsls	r1, r3, #28
   be29e:	d504      	bpl.n	be2aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   be2a0:	696a      	ldr	r2, [r5, #20]
   be2a2:	4954      	ldr	r1, [pc, #336]	; (be3f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   be2a4:	4620      	mov	r0, r4
   be2a6:	f7ff fac0 	bl	bd82a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   be2aa:	f1b8 0f00 	cmp.w	r8, #0
   be2ae:	d00d      	beq.n	be2cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   be2b0:	215b      	movs	r1, #91	; 0x5b
   be2b2:	4620      	mov	r0, r4
   be2b4:	f7ff faad 	bl	bd812 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   be2b8:	4641      	mov	r1, r8
   be2ba:	4620      	mov	r0, r4
   be2bc:	f7ff fa9a 	bl	bd7f4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   be2c0:	6823      	ldr	r3, [r4, #0]
   be2c2:	494d      	ldr	r1, [pc, #308]	; (be3f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   be2c4:	68db      	ldr	r3, [r3, #12]
   be2c6:	2202      	movs	r2, #2
   be2c8:	4620      	mov	r0, r4
   be2ca:	4798      	blx	r3
    if (attr.has_file) {
   be2cc:	792b      	ldrb	r3, [r5, #4]
   be2ce:	07da      	lsls	r2, r3, #31
   be2d0:	d523      	bpl.n	be31a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   be2d2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   be2d6:	212f      	movs	r1, #47	; 0x2f
   be2d8:	4640      	mov	r0, r8
   be2da:	f002 f9ef 	bl	c06bc <strrchr>
    if (s1) {
   be2de:	b108      	cbz	r0, be2e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   be2e0:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   be2e4:	4641      	mov	r1, r8
   be2e6:	4620      	mov	r0, r4
   be2e8:	f7ff fa84 	bl	bd7f4 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   be2ec:	792b      	ldrb	r3, [r5, #4]
   be2ee:	079b      	lsls	r3, r3, #30
   be2f0:	d508      	bpl.n	be304 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   be2f2:	213a      	movs	r1, #58	; 0x3a
   be2f4:	4620      	mov	r0, r4
   be2f6:	f7ff fa8c 	bl	bd812 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   be2fa:	68ea      	ldr	r2, [r5, #12]
   be2fc:	493f      	ldr	r1, [pc, #252]	; (be3fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   be2fe:	4620      	mov	r0, r4
   be300:	f7ff fa93 	bl	bd82a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   be304:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   be306:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   be308:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   be30c:	68db      	ldr	r3, [r3, #12]
   be30e:	bf14      	ite	ne
   be310:	493b      	ldrne	r1, [pc, #236]	; (be400 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   be312:	493c      	ldreq	r1, [pc, #240]	; (be404 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   be314:	2202      	movs	r2, #2
            write(": ", 2);
   be316:	4620      	mov	r0, r4
   be318:	4798      	blx	r3
    if (attr.has_function) {
   be31a:	792b      	ldrb	r3, [r5, #4]
   be31c:	0758      	lsls	r0, r3, #29
   be31e:	d51d      	bpl.n	be35c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   be320:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   be322:	460b      	mov	r3, r1
   be324:	461a      	mov	r2, r3
    for (; *s; ++s) {
   be326:	f813 0b01 	ldrb.w	r0, [r3], #1
   be32a:	b160      	cbz	r0, be346 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   be32c:	2820      	cmp	r0, #32
   be32e:	d108      	bne.n	be342 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   be330:	4619      	mov	r1, r3
   be332:	e7f7      	b.n	be324 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   be334:	4834      	ldr	r0, [pc, #208]	; (be408 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   be336:	f000 f966 	bl	be606 <_ZN5spark12NetworkClass9listeningEv>
   be33a:	2800      	cmp	r0, #0
   be33c:	d0ad      	beq.n	be29a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   be33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   be342:	2828      	cmp	r0, #40	; 0x28
   be344:	d1ee      	bne.n	be324 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   be346:	6823      	ldr	r3, [r4, #0]
   be348:	1a52      	subs	r2, r2, r1
   be34a:	68db      	ldr	r3, [r3, #12]
   be34c:	4620      	mov	r0, r4
   be34e:	4798      	blx	r3
        write("(): ", 4);
   be350:	6823      	ldr	r3, [r4, #0]
   be352:	492e      	ldr	r1, [pc, #184]	; (be40c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   be354:	68db      	ldr	r3, [r3, #12]
   be356:	2204      	movs	r2, #4
   be358:	4620      	mov	r0, r4
   be35a:	4798      	blx	r3
    return log_level_name(level, nullptr);
   be35c:	2100      	movs	r1, #0
   be35e:	4638      	mov	r0, r7
   be360:	f7fd fff0 	bl	bc344 <log_level_name>
   be364:	4601      	mov	r1, r0
    write(s);
   be366:	4620      	mov	r0, r4
   be368:	f7ff fa44 	bl	bd7f4 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   be36c:	6823      	ldr	r3, [r4, #0]
   be36e:	4925      	ldr	r1, [pc, #148]	; (be404 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   be370:	68db      	ldr	r3, [r3, #12]
   be372:	2202      	movs	r2, #2
   be374:	4620      	mov	r0, r4
   be376:	4798      	blx	r3
    if (msg) {
   be378:	b11e      	cbz	r6, be382 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   be37a:	4631      	mov	r1, r6
   be37c:	4620      	mov	r0, r4
   be37e:	f7ff fa39 	bl	bd7f4 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   be382:	792b      	ldrb	r3, [r5, #4]
   be384:	f013 0f30 	tst.w	r3, #48	; 0x30
   be388:	d02c      	beq.n	be3e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   be38a:	6823      	ldr	r3, [r4, #0]
   be38c:	4920      	ldr	r1, [pc, #128]	; (be410 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   be38e:	68db      	ldr	r3, [r3, #12]
   be390:	2202      	movs	r2, #2
   be392:	4620      	mov	r0, r4
   be394:	4798      	blx	r3
        if (attr.has_code) {
   be396:	792b      	ldrb	r3, [r5, #4]
   be398:	06d9      	lsls	r1, r3, #27
   be39a:	d50a      	bpl.n	be3b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   be39c:	6823      	ldr	r3, [r4, #0]
   be39e:	491d      	ldr	r1, [pc, #116]	; (be414 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   be3a0:	68db      	ldr	r3, [r3, #12]
   be3a2:	2207      	movs	r2, #7
   be3a4:	4620      	mov	r0, r4
   be3a6:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   be3a8:	69aa      	ldr	r2, [r5, #24]
   be3aa:	491b      	ldr	r1, [pc, #108]	; (be418 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   be3ac:	4620      	mov	r0, r4
   be3ae:	f7ff fa3c 	bl	bd82a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   be3b2:	792b      	ldrb	r3, [r5, #4]
   be3b4:	069a      	lsls	r2, r3, #26
   be3b6:	d511      	bpl.n	be3dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   be3b8:	06db      	lsls	r3, r3, #27
   be3ba:	d505      	bpl.n	be3c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   be3bc:	6823      	ldr	r3, [r4, #0]
   be3be:	4910      	ldr	r1, [pc, #64]	; (be400 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   be3c0:	68db      	ldr	r3, [r3, #12]
   be3c2:	2202      	movs	r2, #2
   be3c4:	4620      	mov	r0, r4
   be3c6:	4798      	blx	r3
            write("details = ", 10);
   be3c8:	6823      	ldr	r3, [r4, #0]
   be3ca:	4914      	ldr	r1, [pc, #80]	; (be41c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   be3cc:	68db      	ldr	r3, [r3, #12]
   be3ce:	4620      	mov	r0, r4
   be3d0:	220a      	movs	r2, #10
   be3d2:	4798      	blx	r3
            write(attr.details);
   be3d4:	69e9      	ldr	r1, [r5, #28]
   be3d6:	4620      	mov	r0, r4
   be3d8:	f7ff fa0c 	bl	bd7f4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   be3dc:	215d      	movs	r1, #93	; 0x5d
   be3de:	4620      	mov	r0, r4
   be3e0:	f7ff fa17 	bl	bd812 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   be3e4:	6823      	ldr	r3, [r4, #0]
   be3e6:	490e      	ldr	r1, [pc, #56]	; (be420 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   be3e8:	68db      	ldr	r3, [r3, #12]
   be3ea:	4620      	mov	r0, r4
   be3ec:	2202      	movs	r2, #2
}
   be3ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   be3f2:	4718      	bx	r3
   be3f4:	000c236f 	.word	0x000c236f
   be3f8:	000c2376 	.word	0x000c2376
   be3fc:	000c0eb6 	.word	0x000c0eb6
   be400:	000c2379 	.word	0x000c2379
   be404:	000c237e 	.word	0x000c237e
   be408:	2003e684 	.word	0x2003e684
   be40c:	000c237c 	.word	0x000c237c
   be410:	000c2381 	.word	0x000c2381
   be414:	000c2384 	.word	0x000c2384
   be418:	000c1641 	.word	0x000c1641
   be41c:	000c238c 	.word	0x000c238c
   be420:	000c2397 	.word	0x000c2397

000be424 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   be424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   be428:	b085      	sub	sp, #20
    return stream_;
   be42a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   be42e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   be430:	4605      	mov	r5, r0
   be432:	460f      	mov	r7, r1
   be434:	4690      	mov	r8, r2
   be436:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   be438:	f001 f8f0 	bl	bf61c <_Z16_fetch_usbserialv>
   be43c:	4581      	cmp	r9, r0
   be43e:	d105      	bne.n	be44c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   be440:	4849      	ldr	r0, [pc, #292]	; (be568 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   be442:	f000 f8e0 	bl	be606 <_ZN5spark12NetworkClass9listeningEv>
   be446:	2800      	cmp	r0, #0
   be448:	f040 808a 	bne.w	be560 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   be44c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   be44e:	4a47      	ldr	r2, [pc, #284]	; (be56c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   be450:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   be452:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   be456:	a801      	add	r0, sp, #4
        strm_(stream) {
   be458:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   be45a:	f88d 9008 	strb.w	r9, [sp, #8]
   be45e:	f7ff f8b4 	bl	bd5ca <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   be462:	4649      	mov	r1, r9
   be464:	4640      	mov	r0, r8
   be466:	f7fd ff6d 	bl	bc344 <log_level_name>
    json.name("l", 1).value(s);
   be46a:	4941      	ldr	r1, [pc, #260]	; (be570 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   be46c:	4680      	mov	r8, r0
   be46e:	2201      	movs	r2, #1
   be470:	a801      	add	r0, sp, #4
   be472:	f7ff f939 	bl	bd6e8 <_ZN5spark10JSONWriter4nameEPKcj>
   be476:	4641      	mov	r1, r8
   be478:	f7ff f9ae 	bl	bd7d8 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   be47c:	b13f      	cbz	r7, be48e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   be47e:	493d      	ldr	r1, [pc, #244]	; (be574 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   be480:	2201      	movs	r2, #1
   be482:	a801      	add	r0, sp, #4
   be484:	f7ff f930 	bl	bd6e8 <_ZN5spark10JSONWriter4nameEPKcj>
   be488:	4639      	mov	r1, r7
   be48a:	f7ff f9a5 	bl	bd7d8 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   be48e:	b13e      	cbz	r6, be4a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   be490:	4939      	ldr	r1, [pc, #228]	; (be578 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   be492:	2201      	movs	r2, #1
   be494:	a801      	add	r0, sp, #4
   be496:	f7ff f927 	bl	bd6e8 <_ZN5spark10JSONWriter4nameEPKcj>
   be49a:	4631      	mov	r1, r6
   be49c:	f7ff f99c 	bl	bd7d8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   be4a0:	7923      	ldrb	r3, [r4, #4]
   be4a2:	07df      	lsls	r7, r3, #31
   be4a4:	d50e      	bpl.n	be4c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   be4a6:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   be4a8:	212f      	movs	r1, #47	; 0x2f
   be4aa:	4630      	mov	r0, r6
   be4ac:	f002 f906 	bl	c06bc <strrchr>
    if (s1) {
   be4b0:	b100      	cbz	r0, be4b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   be4b2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   be4b4:	4931      	ldr	r1, [pc, #196]	; (be57c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   be4b6:	2201      	movs	r2, #1
   be4b8:	a801      	add	r0, sp, #4
   be4ba:	f7ff f915 	bl	bd6e8 <_ZN5spark10JSONWriter4nameEPKcj>
   be4be:	4631      	mov	r1, r6
   be4c0:	f7ff f98a 	bl	bd7d8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   be4c4:	7923      	ldrb	r3, [r4, #4]
   be4c6:	079e      	lsls	r6, r3, #30
   be4c8:	d507      	bpl.n	be4da <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   be4ca:	492d      	ldr	r1, [pc, #180]	; (be580 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   be4cc:	2202      	movs	r2, #2
   be4ce:	a801      	add	r0, sp, #4
   be4d0:	f7ff f90a 	bl	bd6e8 <_ZN5spark10JSONWriter4nameEPKcj>
   be4d4:	68e1      	ldr	r1, [r4, #12]
   be4d6:	f7ff f885 	bl	bd5e4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   be4da:	7923      	ldrb	r3, [r4, #4]
   be4dc:	0758      	lsls	r0, r3, #29
   be4de:	d514      	bpl.n	be50a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   be4e0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   be4e2:	4633      	mov	r3, r6
   be4e4:	461f      	mov	r7, r3
    for (; *s; ++s) {
   be4e6:	f813 2b01 	ldrb.w	r2, [r3], #1
   be4ea:	b12a      	cbz	r2, be4f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   be4ec:	2a20      	cmp	r2, #32
   be4ee:	d101      	bne.n	be4f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   be4f0:	461e      	mov	r6, r3
   be4f2:	e7f7      	b.n	be4e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   be4f4:	2a28      	cmp	r2, #40	; 0x28
   be4f6:	d1f5      	bne.n	be4e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   be4f8:	4922      	ldr	r1, [pc, #136]	; (be584 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   be4fa:	2202      	movs	r2, #2
   be4fc:	a801      	add	r0, sp, #4
   be4fe:	f7ff f8f3 	bl	bd6e8 <_ZN5spark10JSONWriter4nameEPKcj>
   be502:	1bba      	subs	r2, r7, r6
   be504:	4631      	mov	r1, r6
   be506:	f7ff f8ff 	bl	bd708 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   be50a:	7923      	ldrb	r3, [r4, #4]
   be50c:	0719      	lsls	r1, r3, #28
   be50e:	d507      	bpl.n	be520 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   be510:	491d      	ldr	r1, [pc, #116]	; (be588 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   be512:	2201      	movs	r2, #1
   be514:	a801      	add	r0, sp, #4
   be516:	f7ff f8e7 	bl	bd6e8 <_ZN5spark10JSONWriter4nameEPKcj>
   be51a:	6961      	ldr	r1, [r4, #20]
   be51c:	f7ff f874 	bl	bd608 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   be520:	7923      	ldrb	r3, [r4, #4]
   be522:	06da      	lsls	r2, r3, #27
   be524:	d508      	bpl.n	be538 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   be526:	2204      	movs	r2, #4
   be528:	4918      	ldr	r1, [pc, #96]	; (be58c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   be52a:	eb0d 0002 	add.w	r0, sp, r2
   be52e:	f7ff f8db 	bl	bd6e8 <_ZN5spark10JSONWriter4nameEPKcj>
   be532:	69a1      	ldr	r1, [r4, #24]
   be534:	f7ff f856 	bl	bd5e4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   be538:	7923      	ldrb	r3, [r4, #4]
   be53a:	069b      	lsls	r3, r3, #26
   be53c:	d507      	bpl.n	be54e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   be53e:	4914      	ldr	r1, [pc, #80]	; (be590 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   be540:	2206      	movs	r2, #6
   be542:	a801      	add	r0, sp, #4
   be544:	f7ff f8d0 	bl	bd6e8 <_ZN5spark10JSONWriter4nameEPKcj>
   be548:	69e1      	ldr	r1, [r4, #28]
   be54a:	f7ff f945 	bl	bd7d8 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   be54e:	a801      	add	r0, sp, #4
   be550:	f7ff f825 	bl	bd59e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   be554:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   be556:	490f      	ldr	r1, [pc, #60]	; (be594 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   be558:	6803      	ldr	r3, [r0, #0]
   be55a:	2202      	movs	r2, #2
   be55c:	68db      	ldr	r3, [r3, #12]
   be55e:	4798      	blx	r3
}
   be560:	b005      	add	sp, #20
   be562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   be566:	bf00      	nop
   be568:	2003e684 	.word	0x2003e684
   be56c:	000c23b4 	.word	0x000c23b4
   be570:	000c234c 	.word	0x000c234c
   be574:	000c1c9c 	.word	0x000c1c9c
   be578:	000c2641 	.word	0x000c2641
   be57c:	000c0e66 	.word	0x000c0e66
   be580:	000c239a 	.word	0x000c239a
   be584:	000c239d 	.word	0x000c239d
   be588:	000c162e 	.word	0x000c162e
   be58c:	000c23a0 	.word	0x000c23a0
   be590:	000c23a5 	.word	0x000c23a5
   be594:	000c2397 	.word	0x000c2397

000be598 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   be598:	2300      	movs	r3, #0
   be59a:	6840      	ldr	r0, [r0, #4]
   be59c:	461a      	mov	r2, r3
   be59e:	f7fd bfcd 	b.w	bc53c <network_connect>

000be5a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   be5a2:	6840      	ldr	r0, [r0, #4]
   be5a4:	2200      	movs	r2, #0
   be5a6:	2102      	movs	r1, #2
   be5a8:	f7fd bfd8 	b.w	bc55c <network_disconnect>

000be5ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   be5ac:	2200      	movs	r2, #0
   be5ae:	6840      	ldr	r0, [r0, #4]
   be5b0:	4611      	mov	r1, r2
   be5b2:	f7fd bfcb 	b.w	bc54c <network_connecting>

000be5b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   be5b6:	2200      	movs	r2, #0
   be5b8:	6840      	ldr	r0, [r0, #4]
   be5ba:	4611      	mov	r1, r2
   be5bc:	f7fd bfd6 	b.w	bc56c <network_ready>

000be5c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   be5c0:	2300      	movs	r3, #0
   be5c2:	6840      	ldr	r0, [r0, #4]
   be5c4:	461a      	mov	r2, r3
   be5c6:	4619      	mov	r1, r3
   be5c8:	f7fd bfd8 	b.w	bc57c <network_on>

000be5cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   be5cc:	2300      	movs	r3, #0
   be5ce:	6840      	ldr	r0, [r0, #4]
   be5d0:	461a      	mov	r2, r3
   be5d2:	4619      	mov	r1, r3
   be5d4:	f7fd bfda 	b.w	bc58c <network_off>

000be5d8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   be5d8:	6840      	ldr	r0, [r0, #4]
   be5da:	2100      	movs	r1, #0
   be5dc:	f7fd bffe 	b.w	bc5dc <network_is_on>

000be5e0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   be5e0:	6840      	ldr	r0, [r0, #4]
   be5e2:	2100      	movs	r1, #0
   be5e4:	f7fe b802 	b.w	bc5ec <network_is_off>

000be5e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   be5e8:	6840      	ldr	r0, [r0, #4]
   be5ea:	2200      	movs	r2, #0
   be5ec:	f081 0101 	eor.w	r1, r1, #1
   be5f0:	f7fd bfd4 	b.w	bc59c <network_listen>

000be5f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   be5f4:	6840      	ldr	r0, [r0, #4]
   be5f6:	2200      	movs	r2, #0
   be5f8:	f7fd bfe0 	b.w	bc5bc <network_set_listen_timeout>

000be5fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   be5fc:	2200      	movs	r2, #0
   be5fe:	6840      	ldr	r0, [r0, #4]
   be600:	4611      	mov	r1, r2
   be602:	f7fd bfe3 	b.w	bc5cc <network_get_listen_timeout>

000be606 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   be606:	2200      	movs	r2, #0
   be608:	6840      	ldr	r0, [r0, #4]
   be60a:	4611      	mov	r1, r2
   be60c:	f7fd bfce 	b.w	bc5ac <network_listening>

000be610 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   be610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   be614:	b095      	sub	sp, #84	; 0x54
   be616:	4614      	mov	r4, r2
   be618:	460d      	mov	r5, r1
   be61a:	4607      	mov	r7, r0
    IPAddress addr;
   be61c:	f7fe fe6e 	bl	bd2fc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   be620:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   be622:	221c      	movs	r2, #28
   be624:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   be626:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   be628:	f001 ff5e 	bl	c04e8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   be62c:	2340      	movs	r3, #64	; 0x40
   be62e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   be630:	4620      	mov	r0, r4
   be632:	466b      	mov	r3, sp
   be634:	aa0c      	add	r2, sp, #48	; 0x30
   be636:	2100      	movs	r1, #0
   be638:	f7fd fd24 	bl	bc084 <netdb_getaddrinfo>
    if (!r) {
   be63c:	4604      	mov	r4, r0
   be63e:	2800      	cmp	r0, #0
   be640:	d14b      	bne.n	be6da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   be642:	4602      	mov	r2, r0
   be644:	2101      	movs	r1, #1
   be646:	6868      	ldr	r0, [r5, #4]
   be648:	f7fd ff90 	bl	bc56c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   be64c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   be64e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   be650:	4622      	mov	r2, r4
   be652:	6868      	ldr	r0, [r5, #4]
   be654:	f7fd ff8a 	bl	bc56c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   be658:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   be65a:	4681      	mov	r9, r0
        bool ok = false;
   be65c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   be65e:	2e00      	cmp	r6, #0
   be660:	d03b      	beq.n	be6da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   be662:	2900      	cmp	r1, #0
   be664:	d139      	bne.n	be6da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   be666:	6873      	ldr	r3, [r6, #4]
   be668:	2b02      	cmp	r3, #2
   be66a:	d003      	beq.n	be674 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   be66c:	2b0a      	cmp	r3, #10
   be66e:	d011      	beq.n	be694 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   be670:	69f6      	ldr	r6, [r6, #28]
   be672:	e7f4      	b.n	be65e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   be674:	f1b8 0f00 	cmp.w	r8, #0
   be678:	d0fa      	beq.n	be670 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   be67a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   be67c:	a806      	add	r0, sp, #24
   be67e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   be680:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   be682:	f7fe fe69 	bl	bd358 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   be686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be688:	1d3c      	adds	r4, r7, #4
   be68a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   be68c:	682b      	ldr	r3, [r5, #0]
   be68e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   be690:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   be692:	e7ed      	b.n	be670 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   be694:	f1b9 0f00 	cmp.w	r9, #0
   be698:	d0ea      	beq.n	be670 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   be69a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   be69c:	2210      	movs	r2, #16
   be69e:	a801      	add	r0, sp, #4
   be6a0:	f001 ff22 	bl	c04e8 <memset>
                    a.v = 6;
   be6a4:	2306      	movs	r3, #6
   be6a6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   be6aa:	ad01      	add	r5, sp, #4
   be6ac:	f104 0308 	add.w	r3, r4, #8
   be6b0:	3418      	adds	r4, #24
   be6b2:	6818      	ldr	r0, [r3, #0]
   be6b4:	6859      	ldr	r1, [r3, #4]
   be6b6:	462a      	mov	r2, r5
   be6b8:	c203      	stmia	r2!, {r0, r1}
   be6ba:	3308      	adds	r3, #8
   be6bc:	42a3      	cmp	r3, r4
   be6be:	4615      	mov	r5, r2
   be6c0:	d1f7      	bne.n	be6b2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   be6c2:	a901      	add	r1, sp, #4
   be6c4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   be6c6:	ad07      	add	r5, sp, #28
   be6c8:	f7fe fe26 	bl	bd318 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   be6cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be6ce:	1d3c      	adds	r4, r7, #4
   be6d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   be6d2:	682b      	ldr	r3, [r5, #0]
   be6d4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   be6d6:	4649      	mov	r1, r9
   be6d8:	e7ca      	b.n	be670 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   be6da:	9800      	ldr	r0, [sp, #0]
   be6dc:	f7fd fcca 	bl	bc074 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   be6e0:	4638      	mov	r0, r7
   be6e2:	b015      	add	sp, #84	; 0x54
   be6e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000be6e8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   be6e8:	4b02      	ldr	r3, [pc, #8]	; (be6f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   be6ea:	4a03      	ldr	r2, [pc, #12]	; (be6f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   be6ec:	601a      	str	r2, [r3, #0]
   be6ee:	2200      	movs	r2, #0
   be6f0:	605a      	str	r2, [r3, #4]

} // spark
   be6f2:	4770      	bx	lr
   be6f4:	2003e684 	.word	0x2003e684
   be6f8:	000c242c 	.word	0x000c242c

000be6fc <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   be6fc:	b508      	push	{r3, lr}
            return &Wire1;
   be6fe:	f001 f953 	bl	bf9a8 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   be702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   be706:	f7fe bd67 	b.w	bd1d8 <_ZN7TwoWire4lockEv>

000be70a <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   be70a:	b510      	push	{r4, lr}
   be70c:	4604      	mov	r4, r0
    lock_(_lock)
   be70e:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   be710:	b109      	cbz	r1, be716 <_ZN4PMICC1Eb+0xc>
        lock();
   be712:	f7ff fff3 	bl	be6fc <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   be716:	4620      	mov	r0, r4
   be718:	bd10      	pop	{r4, pc}

000be71a <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   be71a:	b508      	push	{r3, lr}
            return &Wire1;
   be71c:	f001 f944 	bl	bf9a8 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   be720:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   be724:	f7fe bd61 	b.w	bd1ea <_ZN7TwoWire6unlockEv>

000be728 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   be728:	b510      	push	{r4, lr}
    if (lock_) {
   be72a:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   be72c:	4604      	mov	r4, r0
    if (lock_) {
   be72e:	b10b      	cbz	r3, be734 <_ZN4PMICD1Ev+0xc>
        unlock();
   be730:	f7ff fff3 	bl	be71a <_ZN4PMIC6unlockEv>
}
   be734:	4620      	mov	r0, r4
   be736:	bd10      	pop	{r4, pc}

000be738 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   be738:	b510      	push	{r4, lr}
   be73a:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   be73c:	6800      	ldr	r0, [r0, #0]
   be73e:	f7ff ffec 	bl	be71a <_ZN4PMIC6unlockEv>
   be742:	4620      	mov	r0, r4
   be744:	bd10      	pop	{r4, pc}

000be746 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   be746:	b530      	push	{r4, r5, lr}
   be748:	b087      	sub	sp, #28
   be74a:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be74c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   be74e:	f7ff ffd5 	bl	be6fc <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   be752:	226b      	movs	r2, #107	; 0x6b
   be754:	2300      	movs	r3, #0
   be756:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   be75a:	2401      	movs	r4, #1
   be75c:	230a      	movs	r3, #10
   be75e:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   be762:	f001 f921 	bl	bf9a8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   be766:	a902      	add	r1, sp, #8
   be768:	f7fe fd1a 	bl	bd1a0 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   be76c:	f001 f91c 	bl	bf9a8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   be770:	6803      	ldr	r3, [r0, #0]
   be772:	4629      	mov	r1, r5
   be774:	689b      	ldr	r3, [r3, #8]
   be776:	4798      	blx	r3
            return &Wire1;
   be778:	f001 f916 	bl	bf9a8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   be77c:	4621      	mov	r1, r4
   be77e:	f7fe fd27 	bl	bd1d0 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   be782:	9403      	str	r4, [sp, #12]
            return &Wire1;
   be784:	f001 f910 	bl	bf9a8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   be788:	a902      	add	r1, sp, #8
   be78a:	f7fe fcd9 	bl	bd140 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   be78e:	f001 f90b 	bl	bf9a8 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   be792:	6803      	ldr	r3, [r0, #0]
   be794:	695b      	ldr	r3, [r3, #20]
   be796:	4798      	blx	r3
   be798:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   be79a:	a801      	add	r0, sp, #4
   be79c:	f7ff ffcc 	bl	be738 <_ZNSt10lock_guardI4PMICED1Ev>
}
   be7a0:	b2e0      	uxtb	r0, r4
   be7a2:	b007      	add	sp, #28
   be7a4:	bd30      	pop	{r4, r5, pc}

000be7a6 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   be7a6:	b570      	push	{r4, r5, r6, lr}
   be7a8:	b086      	sub	sp, #24
   be7aa:	460d      	mov	r5, r1
   be7ac:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be7ae:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   be7b0:	f7ff ffa4 	bl	be6fc <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   be7b4:	226b      	movs	r2, #107	; 0x6b
   be7b6:	2300      	movs	r3, #0
   be7b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   be7bc:	2601      	movs	r6, #1
   be7be:	230a      	movs	r3, #10
   be7c0:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   be7c4:	f001 f8f0 	bl	bf9a8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   be7c8:	a902      	add	r1, sp, #8
   be7ca:	f7fe fce9 	bl	bd1a0 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   be7ce:	f001 f8eb 	bl	bf9a8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   be7d2:	6803      	ldr	r3, [r0, #0]
   be7d4:	4629      	mov	r1, r5
   be7d6:	689b      	ldr	r3, [r3, #8]
   be7d8:	4798      	blx	r3
            return &Wire1;
   be7da:	f001 f8e5 	bl	bf9a8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   be7de:	6803      	ldr	r3, [r0, #0]
   be7e0:	4621      	mov	r1, r4
   be7e2:	689b      	ldr	r3, [r3, #8]
   be7e4:	4798      	blx	r3
            return &Wire1;
   be7e6:	f001 f8df 	bl	bf9a8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   be7ea:	4631      	mov	r1, r6
   be7ec:	f7fe fcf0 	bl	bd1d0 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   be7f0:	a801      	add	r0, sp, #4
   be7f2:	f7ff ffa1 	bl	be738 <_ZNSt10lock_guardI4PMICED1Ev>
}
   be7f6:	b006      	add	sp, #24
   be7f8:	bd70      	pop	{r4, r5, r6, pc}

000be7fa <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   be7fa:	b513      	push	{r0, r1, r4, lr}
   be7fc:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be7fe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   be800:	f7ff ff7c 	bl	be6fc <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   be804:	2101      	movs	r1, #1
   be806:	4620      	mov	r0, r4
   be808:	f7ff ff9d 	bl	be746 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   be80c:	f000 0330 	and.w	r3, r0, #48	; 0x30
   be810:	2b10      	cmp	r3, #16
   be812:	d007      	beq.n	be824 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   be814:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   be818:	f042 0210 	orr.w	r2, r2, #16
   be81c:	2101      	movs	r1, #1
   be81e:	4620      	mov	r0, r4
   be820:	f7ff ffc1 	bl	be7a6 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   be824:	a801      	add	r0, sp, #4
   be826:	f7ff ff87 	bl	be738 <_ZNSt10lock_guardI4PMICED1Ev>
}
   be82a:	2001      	movs	r0, #1
   be82c:	b002      	add	sp, #8
   be82e:	bd10      	pop	{r4, pc}

000be830 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   be830:	b513      	push	{r0, r1, r4, lr}
   be832:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be834:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   be836:	f7ff ff61 	bl	be6fc <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   be83a:	2101      	movs	r1, #1
   be83c:	4620      	mov	r0, r4
   be83e:	f7ff ff82 	bl	be746 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   be842:	f010 0f30 	tst.w	r0, #48	; 0x30
   be846:	d005      	beq.n	be854 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   be848:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   be84c:	2101      	movs	r1, #1
   be84e:	4620      	mov	r0, r4
   be850:	f7ff ffa9 	bl	be7a6 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   be854:	a801      	add	r0, sp, #4
   be856:	f7ff ff6f 	bl	be738 <_ZNSt10lock_guardI4PMICED1Ev>
}
   be85a:	2001      	movs	r0, #1
   be85c:	b002      	add	sp, #8
   be85e:	bd10      	pop	{r4, pc}

000be860 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   be860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be862:	4606      	mov	r6, r0
   be864:	460d      	mov	r5, r1
  size_t n = 0;
   be866:	188f      	adds	r7, r1, r2
   be868:	2400      	movs	r4, #0
  while (size--) {
   be86a:	42bd      	cmp	r5, r7
   be86c:	d00c      	beq.n	be888 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   be86e:	6833      	ldr	r3, [r6, #0]
   be870:	f815 1b01 	ldrb.w	r1, [r5], #1
   be874:	689b      	ldr	r3, [r3, #8]
   be876:	4630      	mov	r0, r6
   be878:	4798      	blx	r3
     if (chunk>=0)
   be87a:	1e03      	subs	r3, r0, #0
   be87c:	db01      	blt.n	be882 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   be87e:	441c      	add	r4, r3
  while (size--) {
   be880:	e7f3      	b.n	be86a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   be882:	2c00      	cmp	r4, #0
   be884:	bf08      	it	eq
   be886:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   be888:	4620      	mov	r0, r4
   be88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be88c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   be88c:	b513      	push	{r0, r1, r4, lr}
   be88e:	4604      	mov	r4, r0
    }
   be890:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   be892:	b159      	cbz	r1, be8ac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   be894:	9101      	str	r1, [sp, #4]
   be896:	f001 fee2 	bl	c065e <strlen>
   be89a:	6823      	ldr	r3, [r4, #0]
   be89c:	9901      	ldr	r1, [sp, #4]
   be89e:	68db      	ldr	r3, [r3, #12]
   be8a0:	4602      	mov	r2, r0
   be8a2:	4620      	mov	r0, r4
    }
   be8a4:	b002      	add	sp, #8
   be8a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   be8aa:	4718      	bx	r3
    }
   be8ac:	b002      	add	sp, #8
   be8ae:	bd10      	pop	{r4, pc}

000be8b0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   be8b0:	b508      	push	{r3, lr}
  return write(str);
   be8b2:	f7ff ffeb 	bl	be88c <_ZN5Print5writeEPKc>
}
   be8b6:	bd08      	pop	{r3, pc}

000be8b8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   be8b8:	6803      	ldr	r3, [r0, #0]
   be8ba:	689b      	ldr	r3, [r3, #8]
   be8bc:	4718      	bx	r3

000be8be <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   be8be:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   be8c0:	210d      	movs	r1, #13
{
   be8c2:	4605      	mov	r5, r0
  size_t n = print('\r');
   be8c4:	f7ff fff8 	bl	be8b8 <_ZN5Print5printEc>
  n += print('\n');
   be8c8:	210a      	movs	r1, #10
  size_t n = print('\r');
   be8ca:	4604      	mov	r4, r0
  n += print('\n');
   be8cc:	4628      	mov	r0, r5
   be8ce:	f7ff fff3 	bl	be8b8 <_ZN5Print5printEc>
  return n;
}
   be8d2:	4420      	add	r0, r4
   be8d4:	bd38      	pop	{r3, r4, r5, pc}

000be8d6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   be8d6:	b530      	push	{r4, r5, lr}
   be8d8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   be8da:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   be8dc:	2a01      	cmp	r2, #1
  *str = '\0';
   be8de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   be8e2:	bf98      	it	ls
   be8e4:	220a      	movls	r2, #10
   be8e6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   be8e8:	460d      	mov	r5, r1
   be8ea:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   be8ee:	fb01 5312 	mls	r3, r1, r2, r5
   be8f2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   be8f6:	2b09      	cmp	r3, #9
   be8f8:	bf94      	ite	ls
   be8fa:	3330      	addls	r3, #48	; 0x30
   be8fc:	3337      	addhi	r3, #55	; 0x37
   be8fe:	b2db      	uxtb	r3, r3
  } while(n);
   be900:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   be902:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   be906:	d9ef      	bls.n	be8e8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   be908:	4621      	mov	r1, r4
   be90a:	f7ff ffbf 	bl	be88c <_ZN5Print5writeEPKc>
}
   be90e:	b00b      	add	sp, #44	; 0x2c
   be910:	bd30      	pop	{r4, r5, pc}
	...

000be914 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   be914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be918:	ec55 4b10 	vmov	r4, r5, d0
   be91c:	4606      	mov	r6, r0
   be91e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   be920:	ee10 2a10 	vmov	r2, s0
   be924:	ee10 0a10 	vmov	r0, s0
   be928:	462b      	mov	r3, r5
   be92a:	4629      	mov	r1, r5
   be92c:	f001 fd04 	bl	c0338 <__aeabi_dcmpun>
   be930:	b140      	cbz	r0, be944 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   be932:	4953      	ldr	r1, [pc, #332]	; (bea80 <_ZN5Print10printFloatEdh+0x16c>)
   be934:	4630      	mov	r0, r6
   be936:	f7ff ffa9 	bl	be88c <_ZN5Print5writeEPKc>
   be93a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   be93c:	4650      	mov	r0, sl
   be93e:	b003      	add	sp, #12
   be940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   be944:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   be948:	4b4e      	ldr	r3, [pc, #312]	; (bea84 <_ZN5Print10printFloatEdh+0x170>)
   be94a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   be94e:	4620      	mov	r0, r4
   be950:	4649      	mov	r1, r9
   be952:	f001 fcf1 	bl	c0338 <__aeabi_dcmpun>
   be956:	b948      	cbnz	r0, be96c <_ZN5Print10printFloatEdh+0x58>
   be958:	4b4a      	ldr	r3, [pc, #296]	; (bea84 <_ZN5Print10printFloatEdh+0x170>)
   be95a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   be95e:	4620      	mov	r0, r4
   be960:	4649      	mov	r1, r9
   be962:	f001 fccb 	bl	c02fc <__aeabi_dcmple>
   be966:	b908      	cbnz	r0, be96c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   be968:	4947      	ldr	r1, [pc, #284]	; (bea88 <_ZN5Print10printFloatEdh+0x174>)
   be96a:	e7e3      	b.n	be934 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   be96c:	4b47      	ldr	r3, [pc, #284]	; (bea8c <_ZN5Print10printFloatEdh+0x178>)
   be96e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   be972:	4620      	mov	r0, r4
   be974:	4629      	mov	r1, r5
   be976:	f001 fcd5 	bl	c0324 <__aeabi_dcmpgt>
   be97a:	b108      	cbz	r0, be980 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   be97c:	4944      	ldr	r1, [pc, #272]	; (bea90 <_ZN5Print10printFloatEdh+0x17c>)
   be97e:	e7d9      	b.n	be934 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   be980:	4b44      	ldr	r3, [pc, #272]	; (bea94 <_ZN5Print10printFloatEdh+0x180>)
   be982:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   be986:	4620      	mov	r0, r4
   be988:	4629      	mov	r1, r5
   be98a:	f001 fcad 	bl	c02e8 <__aeabi_dcmplt>
   be98e:	2800      	cmp	r0, #0
   be990:	d1f4      	bne.n	be97c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   be992:	2200      	movs	r2, #0
   be994:	2300      	movs	r3, #0
   be996:	4620      	mov	r0, r4
   be998:	4629      	mov	r1, r5
   be99a:	f001 fca5 	bl	c02e8 <__aeabi_dcmplt>
   be99e:	b1d0      	cbz	r0, be9d6 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   be9a0:	212d      	movs	r1, #45	; 0x2d
   be9a2:	4630      	mov	r0, r6
   be9a4:	f7ff ff88 	bl	be8b8 <_ZN5Print5printEc>
     number = -number;
   be9a8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   be9ac:	4682      	mov	sl, r0
     number = -number;
   be9ae:	461d      	mov	r5, r3
  double rounding = 0.5;
   be9b0:	4939      	ldr	r1, [pc, #228]	; (bea98 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   be9b2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; beaa0 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   be9b6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   be9ba:	2000      	movs	r0, #0
    rounding /= 10.0;
   be9bc:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   be9c0:	fa5f f38b 	uxtb.w	r3, fp
   be9c4:	429f      	cmp	r7, r3
   be9c6:	d908      	bls.n	be9da <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   be9c8:	4642      	mov	r2, r8
   be9ca:	464b      	mov	r3, r9
   be9cc:	f001 fb44 	bl	c0058 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   be9d0:	f10b 0b01 	add.w	fp, fp, #1
   be9d4:	e7f4      	b.n	be9c0 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   be9d6:	4682      	mov	sl, r0
   be9d8:	e7ea      	b.n	be9b0 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   be9da:	4622      	mov	r2, r4
   be9dc:	462b      	mov	r3, r5
   be9de:	f001 f85b 	bl	bfa98 <__adddf3>
   be9e2:	460d      	mov	r5, r1
   be9e4:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   be9e6:	f001 fce5 	bl	c03b4 <__aeabi_d2uiz>
   be9ea:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   be9ec:	f001 f990 	bl	bfd10 <__aeabi_ui2d>
   be9f0:	4602      	mov	r2, r0
   be9f2:	460b      	mov	r3, r1
   be9f4:	4620      	mov	r0, r4
   be9f6:	4629      	mov	r1, r5
   be9f8:	f001 f84c 	bl	bfa94 <__aeabi_dsub>
        return printNumber(val, base) + t;
   be9fc:	220a      	movs	r2, #10
   be9fe:	4604      	mov	r4, r0
   bea00:	460d      	mov	r5, r1
   bea02:	4630      	mov	r0, r6
   bea04:	4641      	mov	r1, r8
   bea06:	f7ff ff66 	bl	be8d6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bea0a:	4482      	add	sl, r0
  if (digits > 0) {
   bea0c:	2f00      	cmp	r7, #0
   bea0e:	d095      	beq.n	be93c <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bea10:	4922      	ldr	r1, [pc, #136]	; (bea9c <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bea12:	f8df 908c 	ldr.w	r9, [pc, #140]	; beaa0 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bea16:	4630      	mov	r0, r6
   bea18:	f7ff ff38 	bl	be88c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bea1c:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bea20:	4482      	add	sl, r0
  while (digits-- > 0)
   bea22:	2f00      	cmp	r7, #0
   bea24:	d08a      	beq.n	be93c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bea26:	4642      	mov	r2, r8
   bea28:	464b      	mov	r3, r9
   bea2a:	4620      	mov	r0, r4
   bea2c:	4629      	mov	r1, r5
   bea2e:	f001 f9e9 	bl	bfe04 <__aeabi_dmul>
   bea32:	4604      	mov	r4, r0
   bea34:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bea36:	f001 fc95 	bl	c0364 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bea3a:	f1b0 0b00 	subs.w	fp, r0, #0
   bea3e:	da1c      	bge.n	bea7a <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bea40:	212d      	movs	r1, #45	; 0x2d
   bea42:	4630      	mov	r0, r6
   bea44:	f7ff ff38 	bl	be8b8 <_ZN5Print5printEc>
            val = -n;
   bea48:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bea4c:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bea4e:	220a      	movs	r2, #10
   bea50:	4630      	mov	r0, r6
   bea52:	9301      	str	r3, [sp, #4]
   bea54:	f7ff ff3f 	bl	be8d6 <_ZN5Print11printNumberEmh>
   bea58:	9b01      	ldr	r3, [sp, #4]
   bea5a:	4418      	add	r0, r3
    n += print(toPrint);
   bea5c:	4482      	add	sl, r0
    remainder -= toPrint;
   bea5e:	4658      	mov	r0, fp
   bea60:	f001 f966 	bl	bfd30 <__aeabi_i2d>
   bea64:	4602      	mov	r2, r0
   bea66:	460b      	mov	r3, r1
   bea68:	4620      	mov	r0, r4
   bea6a:	4629      	mov	r1, r5
   bea6c:	f001 f812 	bl	bfa94 <__aeabi_dsub>
   bea70:	3f01      	subs	r7, #1
   bea72:	4604      	mov	r4, r0
   bea74:	460d      	mov	r5, r1
   bea76:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bea78:	e7d3      	b.n	bea22 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bea7a:	4659      	mov	r1, fp
        size_t t = 0;
   bea7c:	2300      	movs	r3, #0
   bea7e:	e7e6      	b.n	bea4e <_ZN5Print10printFloatEdh+0x13a>
   bea80:	000c2460 	.word	0x000c2460
   bea84:	7fefffff 	.word	0x7fefffff
   bea88:	000c2464 	.word	0x000c2464
   bea8c:	41efffff 	.word	0x41efffff
   bea90:	000c2468 	.word	0x000c2468
   bea94:	c1efffff 	.word	0xc1efffff
   bea98:	3fe00000 	.word	0x3fe00000
   bea9c:	000c24a0 	.word	0x000c24a0
   beaa0:	40240000 	.word	0x40240000

000beaa4 <_ZN5Print5printEfi>:
{
   beaa4:	b538      	push	{r3, r4, r5, lr}
   beaa6:	4604      	mov	r4, r0
   beaa8:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   beaac:	b2cd      	uxtb	r5, r1
   beaae:	f001 f951 	bl	bfd54 <__aeabi_f2d>
   beab2:	ec41 0b10 	vmov	d0, r0, r1
   beab6:	4629      	mov	r1, r5
   beab8:	4620      	mov	r0, r4
}
   beaba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   beabe:	f7ff bf29 	b.w	be914 <_ZN5Print10printFloatEdh>

000beac2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   beac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   beac6:	b086      	sub	sp, #24
   beac8:	af00      	add	r7, sp, #0
   beaca:	4605      	mov	r5, r0
   beacc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   beace:	1d38      	adds	r0, r7, #4
   bead0:	2114      	movs	r1, #20
{
   bead2:	4614      	mov	r4, r2
    va_copy(args2, args);
   bead4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bead6:	f7fd fdc1 	bl	bc65c <vsnprintf>

    if (n<bufsize)
   beada:	2813      	cmp	r0, #19
   beadc:	d80e      	bhi.n	beafc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   beade:	1d39      	adds	r1, r7, #4
   beae0:	4628      	mov	r0, r5
   beae2:	f7ff fed3 	bl	be88c <_ZN5Print5writeEPKc>
   beae6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   beae8:	b11e      	cbz	r6, beaf2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   beaea:	4628      	mov	r0, r5
   beaec:	f7ff fee7 	bl	be8be <_ZN5Print7printlnEv>
   beaf0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   beaf2:	4620      	mov	r0, r4
   beaf4:	3718      	adds	r7, #24
   beaf6:	46bd      	mov	sp, r7
   beaf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   beafc:	f100 0308 	add.w	r3, r0, #8
   beb00:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   beb04:	46e8      	mov	r8, sp
        char bigger[n+1];
   beb06:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   beb0a:	4622      	mov	r2, r4
   beb0c:	1c41      	adds	r1, r0, #1
   beb0e:	683b      	ldr	r3, [r7, #0]
   beb10:	4668      	mov	r0, sp
   beb12:	f7fd fda3 	bl	bc65c <vsnprintf>
  return write(str);
   beb16:	4669      	mov	r1, sp
   beb18:	4628      	mov	r0, r5
   beb1a:	f7ff feb7 	bl	be88c <_ZN5Print5writeEPKc>
   beb1e:	4604      	mov	r4, r0
   beb20:	46c5      	mov	sp, r8
   beb22:	e7e1      	b.n	beae8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000beb24 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   beb24:	b510      	push	{r4, lr}
  if (0 == max) {
   beb26:	4604      	mov	r4, r0
   beb28:	b128      	cbz	r0, beb36 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   beb2a:	f001 fd13 	bl	c0554 <rand>
   beb2e:	fb90 f3f4 	sdiv	r3, r0, r4
   beb32:	fb03 0414 	mls	r4, r3, r4, r0
}
   beb36:	4620      	mov	r0, r4
   beb38:	bd10      	pop	{r4, pc}

000beb3a <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   beb3a:	4288      	cmp	r0, r1
{
   beb3c:	b510      	push	{r4, lr}
   beb3e:	4604      	mov	r4, r0
  if (min >= max) {
   beb40:	da03      	bge.n	beb4a <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   beb42:	1a08      	subs	r0, r1, r0
   beb44:	f7ff ffee 	bl	beb24 <_Z6randomi>
   beb48:	4404      	add	r4, r0
}
   beb4a:	4620      	mov	r0, r4
   beb4c:	bd10      	pop	{r4, pc}
	...

000beb50 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   beb50:	4b01      	ldr	r3, [pc, #4]	; (beb58 <_GLOBAL__sub_I_RGB+0x8>)
   beb52:	2200      	movs	r2, #0
   beb54:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   beb56:	4770      	bx	lr
   beb58:	2003e68c 	.word	0x2003e68c

000beb5c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   beb5c:	2100      	movs	r1, #0
   beb5e:	f7fd bad9 	b.w	bc114 <hal_spi_release>

000beb62 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   beb62:	2100      	movs	r1, #0
   beb64:	f7fd bace 	b.w	bc104 <hal_spi_acquire>

000beb68 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   beb68:	b510      	push	{r4, lr}
   beb6a:	4604      	mov	r4, r0
   beb6c:	4608      	mov	r0, r1
{
    _spi = spi;
   beb6e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   beb70:	f7fd faa8 	bl	bc0c4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   beb74:	2300      	movs	r3, #0
   beb76:	6063      	str	r3, [r4, #4]
}
   beb78:	4620      	mov	r0, r4
   beb7a:	bd10      	pop	{r4, pc}

000beb7c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   beb7c:	b513      	push	{r0, r1, r4, lr}
   beb7e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   beb80:	7800      	ldrb	r0, [r0, #0]
   beb82:	f7ff ffee 	bl	beb62 <_ZN8SPIClass4lockEv.isra.0>
   beb86:	b958      	cbnz	r0, beba0 <_ZN8SPIClass5beginEv+0x24>
   beb88:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   beb8a:	9001      	str	r0, [sp, #4]
   beb8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   beb90:	f7fd fa80 	bl	bc094 <hal_spi_begin>
        unlock();
   beb94:	9801      	ldr	r0, [sp, #4]
    }
}
   beb96:	b002      	add	sp, #8
   beb98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   beb9c:	f7ff bfde 	b.w	beb5c <_ZN8SPIClass6unlockEv.isra.0>
   beba0:	b002      	add	sp, #8
   beba2:	bd10      	pop	{r4, pc}

000beba4 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   beba4:	b513      	push	{r0, r1, r4, lr}
   beba6:	4604      	mov	r4, r0
    if (!lock())
   beba8:	7800      	ldrb	r0, [r0, #0]
   bebaa:	f7ff ffda 	bl	beb62 <_ZN8SPIClass4lockEv.isra.0>
   bebae:	b948      	cbnz	r0, bebc4 <_ZN8SPIClass3endEv+0x20>
   bebb0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bebb2:	9001      	str	r0, [sp, #4]
   bebb4:	f7fd fa76 	bl	bc0a4 <hal_spi_end>
        unlock();
   bebb8:	9801      	ldr	r0, [sp, #4]
    }
}
   bebba:	b002      	add	sp, #8
   bebbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bebc0:	f7ff bfcc 	b.w	beb5c <_ZN8SPIClass6unlockEv.isra.0>
   bebc4:	b002      	add	sp, #8
   bebc6:	bd10      	pop	{r4, pc}

000bebc8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bebc8:	7800      	ldrb	r0, [r0, #0]
   bebca:	f7ff bfc7 	b.w	beb5c <_ZN8SPIClass6unlockEv.isra.0>
	...

000bebd0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bebd0:	0840      	lsrs	r0, r0, #1
{
   bebd2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bebd4:	6018      	str	r0, [r3, #0]
   bebd6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bebd8:	6818      	ldr	r0, [r3, #0]
   bebda:	4288      	cmp	r0, r1
   bebdc:	b2e5      	uxtb	r5, r4
   bebde:	d906      	bls.n	bebee <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bebe0:	3401      	adds	r4, #1
   bebe2:	2c08      	cmp	r4, #8
   bebe4:	d002      	beq.n	bebec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bebe6:	0840      	lsrs	r0, r0, #1
   bebe8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bebea:	e7f5      	b.n	bebd8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bebec:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bebee:	4b02      	ldr	r3, [pc, #8]	; (bebf8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bebf0:	5d5b      	ldrb	r3, [r3, r5]
   bebf2:	7013      	strb	r3, [r2, #0]
}
   bebf4:	bd30      	pop	{r4, r5, pc}
   bebf6:	bf00      	nop
   bebf8:	000c246c 	.word	0x000c246c

000bebfc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bebfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bec00:	4606      	mov	r6, r0
   bec02:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bec04:	7800      	ldrb	r0, [r0, #0]
{
   bec06:	460c      	mov	r4, r1
    CHECK(lock());
   bec08:	f7ff ffab 	bl	beb62 <_ZN8SPIClass4lockEv.isra.0>
   bec0c:	2800      	cmp	r0, #0
   bec0e:	db1b      	blt.n	bec48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bec10:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bec12:	2214      	movs	r2, #20
   bec14:	2100      	movs	r1, #0
   bec16:	a809      	add	r0, sp, #36	; 0x24
   bec18:	f001 fc66 	bl	c04e8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bec1c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bec1e:	2200      	movs	r2, #0
   bec20:	a909      	add	r1, sp, #36	; 0x24
   bec22:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bec24:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bec28:	f7fd fa5c 	bl	bc0e4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bec2c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bec30:	b113      	cbz	r3, bec38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bec32:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bec36:	b155      	cbz	r5, bec4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bec38:	2700      	movs	r7, #0
   bec3a:	46b9      	mov	r9, r7
   bec3c:	46b8      	mov	r8, r7
   bec3e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bec40:	7923      	ldrb	r3, [r4, #4]
   bec42:	b15d      	cbz	r5, bec5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bec44:	b1c3      	cbz	r3, bec78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bec46:	2000      	movs	r0, #0
}
   bec48:	b00f      	add	sp, #60	; 0x3c
   bec4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bec4e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bec52:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bec56:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bec5a:	e7f1      	b.n	bec40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bec5c:	2b00      	cmp	r3, #0
   bec5e:	d135      	bne.n	beccc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bec60:	68a3      	ldr	r3, [r4, #8]
   bec62:	4543      	cmp	r3, r8
   bec64:	d108      	bne.n	bec78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bec66:	f88d 9020 	strb.w	r9, [sp, #32]
   bec6a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bec6e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bec72:	89a3      	ldrh	r3, [r4, #12]
   bec74:	429a      	cmp	r2, r3
   bec76:	d0e6      	beq.n	bec46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bec78:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bec7a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bec7c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bec80:	980a      	ldr	r0, [sp, #40]	; 0x28
   bec82:	ab04      	add	r3, sp, #16
   bec84:	f10d 020f 	add.w	r2, sp, #15
   bec88:	f7ff ffa2 	bl	bebd0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bec8c:	7921      	ldrb	r1, [r4, #4]
   bec8e:	b985      	cbnz	r5, becb2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bec90:	b989      	cbnz	r1, becb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bec92:	68a3      	ldr	r3, [r4, #8]
   bec94:	4543      	cmp	r3, r8
   bec96:	d30e      	bcc.n	becb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bec98:	f88d 9020 	strb.w	r9, [sp, #32]
   bec9c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   beca0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   beca4:	89a3      	ldrh	r3, [r4, #12]
   beca6:	429a      	cmp	r2, r3
   beca8:	d105      	bne.n	becb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   becaa:	9b04      	ldr	r3, [sp, #16]
   becac:	4543      	cmp	r3, r8
   becae:	d102      	bne.n	becb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   becb0:	e7c9      	b.n	bec46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   becb2:	2900      	cmp	r1, #0
   becb4:	d1f9      	bne.n	becaa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   becb6:	2300      	movs	r3, #0
   becb8:	9301      	str	r3, [sp, #4]
   becba:	7b63      	ldrb	r3, [r4, #13]
   becbc:	9300      	str	r3, [sp, #0]
   becbe:	f89d 200f 	ldrb.w	r2, [sp, #15]
   becc2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   becc4:	7830      	ldrb	r0, [r6, #0]
   becc6:	f7fd fa15 	bl	bc0f4 <hal_spi_set_settings>
   becca:	e7bc      	b.n	bec46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   beccc:	e9cd 5500 	strd	r5, r5, [sp]
   becd0:	462b      	mov	r3, r5
   becd2:	462a      	mov	r2, r5
   becd4:	2101      	movs	r1, #1
   becd6:	e7f5      	b.n	becc4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000becd8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   becd8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   becda:	7800      	ldrb	r0, [r0, #0]
   becdc:	f7fd f9ea 	bl	bc0b4 <hal_spi_transfer>
}
   bece0:	b2c0      	uxtb	r0, r0
   bece2:	bd08      	pop	{r3, pc}

000bece4 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bece4:	4770      	bx	lr

000bece6 <_ZN8SPIClass15detachInterruptEv>:
   bece6:	4770      	bx	lr

000bece8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bece8:	b510      	push	{r4, lr}
   becea:	4604      	mov	r4, r0
{
	free(buffer);
   becec:	6800      	ldr	r0, [r0, #0]
   becee:	f7fd fc8d 	bl	bc60c <free>
}
   becf2:	4620      	mov	r0, r4
   becf4:	bd10      	pop	{r4, pc}

000becf6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   becf6:	b510      	push	{r4, lr}
   becf8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   becfa:	6800      	ldr	r0, [r0, #0]
   becfc:	b108      	cbz	r0, bed02 <_ZN6String10invalidateEv+0xc>
   becfe:	f7fd fc85 	bl	bc60c <free>
	buffer = NULL;
   bed02:	2300      	movs	r3, #0
	capacity = len = 0;
   bed04:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bed08:	6023      	str	r3, [r4, #0]
}
   bed0a:	bd10      	pop	{r4, pc}

000bed0c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bed0c:	b538      	push	{r3, r4, r5, lr}
   bed0e:	4604      	mov	r4, r0
   bed10:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bed12:	6800      	ldr	r0, [r0, #0]
   bed14:	3101      	adds	r1, #1
   bed16:	f7fd fc81 	bl	bc61c <realloc>
	if (newbuffer) {
   bed1a:	b110      	cbz	r0, bed22 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bed1c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bed20:	2001      	movs	r0, #1
	}
	return 0;
}
   bed22:	bd38      	pop	{r3, r4, r5, pc}

000bed24 <_ZN6String7reserveEj>:
{
   bed24:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bed26:	6803      	ldr	r3, [r0, #0]
{
   bed28:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bed2a:	b123      	cbz	r3, bed36 <_ZN6String7reserveEj+0x12>
   bed2c:	6843      	ldr	r3, [r0, #4]
   bed2e:	428b      	cmp	r3, r1
   bed30:	d301      	bcc.n	bed36 <_ZN6String7reserveEj+0x12>
   bed32:	2001      	movs	r0, #1
}
   bed34:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bed36:	4620      	mov	r0, r4
   bed38:	f7ff ffe8 	bl	bed0c <_ZN6String12changeBufferEj>
   bed3c:	2800      	cmp	r0, #0
   bed3e:	d0f9      	beq.n	bed34 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bed40:	68a3      	ldr	r3, [r4, #8]
   bed42:	2b00      	cmp	r3, #0
   bed44:	d1f5      	bne.n	bed32 <_ZN6String7reserveEj+0xe>
   bed46:	6822      	ldr	r2, [r4, #0]
   bed48:	7013      	strb	r3, [r2, #0]
   bed4a:	e7f2      	b.n	bed32 <_ZN6String7reserveEj+0xe>

000bed4c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bed4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bed4e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bed50:	4611      	mov	r1, r2
   bed52:	9201      	str	r2, [sp, #4]
{
   bed54:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bed56:	f7ff ffe5 	bl	bed24 <_ZN6String7reserveEj>
   bed5a:	9a01      	ldr	r2, [sp, #4]
   bed5c:	b928      	cbnz	r0, bed6a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bed5e:	4620      	mov	r0, r4
   bed60:	f7ff ffc9 	bl	becf6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bed64:	4620      	mov	r0, r4
   bed66:	b003      	add	sp, #12
   bed68:	bd30      	pop	{r4, r5, pc}
	len = length;
   bed6a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bed6c:	4629      	mov	r1, r5
   bed6e:	6820      	ldr	r0, [r4, #0]
   bed70:	f001 fb92 	bl	c0498 <memcpy>
	buffer[len] = 0;
   bed74:	6822      	ldr	r2, [r4, #0]
   bed76:	68a3      	ldr	r3, [r4, #8]
   bed78:	2100      	movs	r1, #0
   bed7a:	54d1      	strb	r1, [r2, r3]
	return *this;
   bed7c:	e7f2      	b.n	bed64 <_ZN6String4copyEPKcj+0x18>

000bed7e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bed7e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bed80:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bed82:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bed86:	4604      	mov	r4, r0
	len = 0;
   bed88:	6083      	str	r3, [r0, #8]
	flags = 0;
   bed8a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bed8c:	b141      	cbz	r1, beda0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bed8e:	4608      	mov	r0, r1
   bed90:	9101      	str	r1, [sp, #4]
   bed92:	f001 fc64 	bl	c065e <strlen>
   bed96:	9901      	ldr	r1, [sp, #4]
   bed98:	4602      	mov	r2, r0
   bed9a:	4620      	mov	r0, r4
   bed9c:	f7ff ffd6 	bl	bed4c <_ZN6String4copyEPKcj>
}
   beda0:	4620      	mov	r0, r4
   beda2:	b002      	add	sp, #8
   beda4:	bd10      	pop	{r4, pc}

000beda6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   beda6:	b538      	push	{r3, r4, r5, lr}
   beda8:	4605      	mov	r5, r0
	if (buffer) {
   bedaa:	6800      	ldr	r0, [r0, #0]
{
   bedac:	460c      	mov	r4, r1
	if (buffer) {
   bedae:	b168      	cbz	r0, bedcc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bedb0:	686a      	ldr	r2, [r5, #4]
   bedb2:	688b      	ldr	r3, [r1, #8]
   bedb4:	429a      	cmp	r2, r3
   bedb6:	d307      	bcc.n	bedc8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bedb8:	6809      	ldr	r1, [r1, #0]
   bedba:	f001 fc2a 	bl	c0612 <strcpy>
			len = rhs.len;
   bedbe:	68a3      	ldr	r3, [r4, #8]
   bedc0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bedc2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bedc4:	60a3      	str	r3, [r4, #8]
}
   bedc6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bedc8:	f7fd fc20 	bl	bc60c <free>
	buffer = rhs.buffer;
   bedcc:	6823      	ldr	r3, [r4, #0]
   bedce:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bedd0:	6863      	ldr	r3, [r4, #4]
   bedd2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bedd4:	68a3      	ldr	r3, [r4, #8]
   bedd6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bedd8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bedda:	e9c4 3300 	strd	r3, r3, [r4]
   bedde:	e7f1      	b.n	bedc4 <_ZN6String4moveERS_+0x1e>

000bede0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bede0:	b510      	push	{r4, lr}
	buffer = NULL;
   bede2:	2300      	movs	r3, #0
	capacity = 0;
   bede4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bede8:	4604      	mov	r4, r0
	len = 0;
   bedea:	6083      	str	r3, [r0, #8]
	flags = 0;
   bedec:	7303      	strb	r3, [r0, #12]
	move(rval);
   bedee:	f7ff ffda 	bl	beda6 <_ZN6String4moveERS_>
}
   bedf2:	4620      	mov	r0, r4
   bedf4:	bd10      	pop	{r4, pc}

000bedf6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bedf6:	4288      	cmp	r0, r1
{
   bedf8:	b510      	push	{r4, lr}
   bedfa:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bedfc:	d005      	beq.n	bee0a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bedfe:	680b      	ldr	r3, [r1, #0]
   bee00:	b12b      	cbz	r3, bee0e <_ZN6StringaSERKS_+0x18>
   bee02:	688a      	ldr	r2, [r1, #8]
   bee04:	4619      	mov	r1, r3
   bee06:	f7ff ffa1 	bl	bed4c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bee0a:	4620      	mov	r0, r4
   bee0c:	bd10      	pop	{r4, pc}
	else invalidate();
   bee0e:	f7ff ff72 	bl	becf6 <_ZN6String10invalidateEv>
   bee12:	e7fa      	b.n	bee0a <_ZN6StringaSERKS_+0x14>

000bee14 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bee14:	b510      	push	{r4, lr}
	buffer = NULL;
   bee16:	2300      	movs	r3, #0
String::String(const String &value)
   bee18:	4604      	mov	r4, r0
	capacity = 0;
   bee1a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bee1e:	6083      	str	r3, [r0, #8]
	flags = 0;
   bee20:	7303      	strb	r3, [r0, #12]
	*this = value;
   bee22:	f7ff ffe8 	bl	bedf6 <_ZN6StringaSERKS_>
}
   bee26:	4620      	mov	r0, r4
   bee28:	bd10      	pop	{r4, pc}

000bee2a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bee2a:	4288      	cmp	r0, r1
{
   bee2c:	b510      	push	{r4, lr}
   bee2e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bee30:	d001      	beq.n	bee36 <_ZN6StringaSEOS_+0xc>
   bee32:	f7ff ffb8 	bl	beda6 <_ZN6String4moveERS_>
	return *this;
}
   bee36:	4620      	mov	r0, r4
   bee38:	bd10      	pop	{r4, pc}

000bee3a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bee3a:	b513      	push	{r0, r1, r4, lr}
   bee3c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bee3e:	b159      	cbz	r1, bee58 <_ZN6StringaSEPKc+0x1e>
   bee40:	4608      	mov	r0, r1
   bee42:	9101      	str	r1, [sp, #4]
   bee44:	f001 fc0b 	bl	c065e <strlen>
   bee48:	9901      	ldr	r1, [sp, #4]
   bee4a:	4602      	mov	r2, r0
   bee4c:	4620      	mov	r0, r4
   bee4e:	f7ff ff7d 	bl	bed4c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bee52:	4620      	mov	r0, r4
   bee54:	b002      	add	sp, #8
   bee56:	bd10      	pop	{r4, pc}
	else invalidate();
   bee58:	f7ff ff4d 	bl	becf6 <_ZN6String10invalidateEv>
   bee5c:	e7f9      	b.n	bee52 <_ZN6StringaSEPKc+0x18>

000bee5e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bee5e:	b570      	push	{r4, r5, r6, lr}
   bee60:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bee62:	460e      	mov	r6, r1
   bee64:	b909      	cbnz	r1, bee6a <_ZN6String6concatEPKcj+0xc>
   bee66:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bee68:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bee6a:	b16a      	cbz	r2, bee88 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bee6c:	6884      	ldr	r4, [r0, #8]
   bee6e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bee70:	4621      	mov	r1, r4
   bee72:	f7ff ff57 	bl	bed24 <_ZN6String7reserveEj>
   bee76:	2800      	cmp	r0, #0
   bee78:	d0f5      	beq.n	bee66 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bee7a:	6828      	ldr	r0, [r5, #0]
   bee7c:	68ab      	ldr	r3, [r5, #8]
   bee7e:	4631      	mov	r1, r6
   bee80:	4418      	add	r0, r3
   bee82:	f001 fbc6 	bl	c0612 <strcpy>
	len = newlen;
   bee86:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bee88:	2001      	movs	r0, #1
   bee8a:	e7ed      	b.n	bee68 <_ZN6String6concatEPKcj+0xa>

000bee8c <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   bee8c:	b513      	push	{r0, r1, r4, lr}
   bee8e:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   bee90:	4608      	mov	r0, r1
	if (!cstr) return 0;
   bee92:	b151      	cbz	r1, beeaa <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   bee94:	9101      	str	r1, [sp, #4]
   bee96:	f001 fbe2 	bl	c065e <strlen>
   bee9a:	9901      	ldr	r1, [sp, #4]
   bee9c:	4602      	mov	r2, r0
   bee9e:	4620      	mov	r0, r4
}
   beea0:	b002      	add	sp, #8
   beea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   beea6:	f7ff bfda 	b.w	bee5e <_ZN6String6concatEPKcj>
}
   beeaa:	b002      	add	sp, #8
   beeac:	bd10      	pop	{r4, pc}

000beeae <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   beeae:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   beeb0:	2300      	movs	r3, #0
	buf[0] = c;
   beeb2:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   beeb6:	2201      	movs	r2, #1
   beeb8:	a901      	add	r1, sp, #4
	buf[1] = 0;
   beeba:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   beebe:	f7ff ffce 	bl	bee5e <_ZN6String6concatEPKcj>
}
   beec2:	b003      	add	sp, #12
   beec4:	f85d fb04 	ldr.w	pc, [sp], #4

000beec8 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   beec8:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   beeca:	688a      	ldr	r2, [r1, #8]
   beecc:	6809      	ldr	r1, [r1, #0]
{
   beece:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   beed0:	f7ff ffc5 	bl	bee5e <_ZN6String6concatEPKcj>
   beed4:	b910      	cbnz	r0, beedc <_ZplRK15StringSumHelperRK6String+0x14>
   beed6:	4620      	mov	r0, r4
   beed8:	f7ff ff0d 	bl	becf6 <_ZN6String10invalidateEv>
	return a;
}
   beedc:	4620      	mov	r0, r4
   beede:	bd10      	pop	{r4, pc}

000beee0 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   beee0:	b513      	push	{r0, r1, r4, lr}
   beee2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   beee4:	b929      	cbnz	r1, beef2 <_ZplRK15StringSumHelperPKc+0x12>
   beee6:	4620      	mov	r0, r4
   beee8:	f7ff ff05 	bl	becf6 <_ZN6String10invalidateEv>
	return a;
}
   beeec:	4620      	mov	r0, r4
   beeee:	b002      	add	sp, #8
   beef0:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   beef2:	4608      	mov	r0, r1
   beef4:	9101      	str	r1, [sp, #4]
   beef6:	f001 fbb2 	bl	c065e <strlen>
   beefa:	9901      	ldr	r1, [sp, #4]
   beefc:	4602      	mov	r2, r0
   beefe:	4620      	mov	r0, r4
   bef00:	f7ff ffad 	bl	bee5e <_ZN6String6concatEPKcj>
   bef04:	2800      	cmp	r0, #0
   bef06:	d0ee      	beq.n	beee6 <_ZplRK15StringSumHelperPKc+0x6>
   bef08:	e7f0      	b.n	beeec <_ZplRK15StringSumHelperPKc+0xc>

000bef0a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bef0a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bef0c:	6882      	ldr	r2, [r0, #8]
   bef0e:	b93a      	cbnz	r2, bef20 <_ZNK6String6equalsEPKc+0x16>
   bef10:	b121      	cbz	r1, bef1c <_ZNK6String6equalsEPKc+0x12>
   bef12:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bef14:	fab0 f080 	clz	r0, r0
   bef18:	0940      	lsrs	r0, r0, #5
   bef1a:	e000      	b.n	bef1e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bef1c:	2001      	movs	r0, #1
}
   bef1e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bef20:	6800      	ldr	r0, [r0, #0]
   bef22:	b909      	cbnz	r1, bef28 <_ZNK6String6equalsEPKc+0x1e>
   bef24:	7800      	ldrb	r0, [r0, #0]
   bef26:	e7f5      	b.n	bef14 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bef28:	f001 fb69 	bl	c05fe <strcmp>
   bef2c:	e7f2      	b.n	bef14 <_ZNK6String6equalsEPKc+0xa>

000bef2e <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   bef2e:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bef30:	6883      	ldr	r3, [r0, #8]
   bef32:	688a      	ldr	r2, [r1, #8]
   bef34:	4293      	cmp	r3, r2
   bef36:	d30b      	bcc.n	bef50 <_ZNK6String8endsWithERKS_+0x22>
   bef38:	6800      	ldr	r0, [r0, #0]
   bef3a:	b140      	cbz	r0, bef4e <_ZNK6String8endsWithERKS_+0x20>
   bef3c:	6809      	ldr	r1, [r1, #0]
   bef3e:	b149      	cbz	r1, bef54 <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bef40:	1a9b      	subs	r3, r3, r2
   bef42:	4418      	add	r0, r3
   bef44:	f001 fb5b 	bl	c05fe <strcmp>
   bef48:	fab0 f080 	clz	r0, r0
   bef4c:	0940      	lsrs	r0, r0, #5
}
   bef4e:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bef50:	2000      	movs	r0, #0
   bef52:	e7fc      	b.n	bef4e <_ZNK6String8endsWithERKS_+0x20>
   bef54:	4608      	mov	r0, r1
   bef56:	e7fa      	b.n	bef4e <_ZNK6String8endsWithERKS_+0x20>

000bef58 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bef58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bef5a:	429a      	cmp	r2, r3
{
   bef5c:	460f      	mov	r7, r1
   bef5e:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bef60:	490c      	ldr	r1, [pc, #48]	; (bef94 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bef62:	bf88      	it	hi
   bef64:	4613      	movhi	r3, r2
{
   bef66:	4614      	mov	r4, r2
   bef68:	4606      	mov	r6, r0
	if (left > right) {
   bef6a:	bf84      	itt	hi
   bef6c:	462c      	movhi	r4, r5
   bef6e:	461d      	movhi	r5, r3
	String out;
   bef70:	f7ff ff05 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bef74:	68bb      	ldr	r3, [r7, #8]
   bef76:	42a3      	cmp	r3, r4
   bef78:	d30a      	bcc.n	bef90 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bef7a:	6839      	ldr	r1, [r7, #0]
   bef7c:	42ab      	cmp	r3, r5
   bef7e:	bf94      	ite	ls
   bef80:	ebc4 0203 	rsbls	r2, r4, r3
   bef84:	ebc4 0205 	rsbhi	r2, r4, r5
   bef88:	4421      	add	r1, r4
   bef8a:	4630      	mov	r0, r6
   bef8c:	f7ff fede 	bl	bed4c <_ZN6String4copyEPKcj>
	return out;
}
   bef90:	4630      	mov	r0, r6
   bef92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bef94:	000c2399 	.word	0x000c2399

000bef98 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bef98:	b40e      	push	{r1, r2, r3}
   bef9a:	b570      	push	{r4, r5, r6, lr}
   bef9c:	b087      	sub	sp, #28
   bef9e:	ad0b      	add	r5, sp, #44	; 0x2c
   befa0:	4604      	mov	r4, r0
   befa2:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   befa6:	9201      	str	r2, [sp, #4]
   befa8:	462b      	mov	r3, r5
   befaa:	2105      	movs	r1, #5
   befac:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   befae:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   befb0:	f7fd fb54 	bl	bc65c <vsnprintf>
    va_end(marker);

    String result;
   befb4:	490b      	ldr	r1, [pc, #44]	; (befe4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   befb6:	4606      	mov	r6, r0
    String result;
   befb8:	4620      	mov	r0, r4
   befba:	f7ff fee0 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   befbe:	4631      	mov	r1, r6
   befc0:	4620      	mov	r0, r4
   befc2:	f7ff feaf 	bl	bed24 <_ZN6String7reserveEj>
    if (result.buffer) {
   befc6:	6820      	ldr	r0, [r4, #0]
   befc8:	b130      	cbz	r0, befd8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   befca:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   befcc:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   befce:	462b      	mov	r3, r5
   befd0:	1c71      	adds	r1, r6, #1
   befd2:	f7fd fb43 	bl	bc65c <vsnprintf>
        va_end(marker);
        result.len = n;
   befd6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   befd8:	4620      	mov	r0, r4
   befda:	b007      	add	sp, #28
   befdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   befe0:	b003      	add	sp, #12
   befe2:	4770      	bx	lr
   befe4:	000c2399 	.word	0x000c2399

000befe8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   befe8:	b510      	push	{r4, lr}
   befea:	4604      	mov	r4, r0
        if (wakeupSource_) {
   befec:	6800      	ldr	r0, [r0, #0]
   befee:	b118      	cbz	r0, beff8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   beff0:	f7fd fb0c 	bl	bc60c <free>
            wakeupSource_ = nullptr;
   beff4:	2300      	movs	r3, #0
   beff6:	6023      	str	r3, [r4, #0]
        }
    }
   beff8:	bd10      	pop	{r4, pc}

000beffa <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   beffa:	b538      	push	{r3, r4, r5, lr}
   beffc:	460c      	mov	r4, r1
   beffe:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bf000:	f7ff fff2 	bl	befe8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bf004:	b154      	cbz	r4, bf01c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bf006:	8820      	ldrh	r0, [r4, #0]
   bf008:	f7fd faf8 	bl	bc5fc <malloc>
   bf00c:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bf00e:	b128      	cbz	r0, bf01c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bf010:	8822      	ldrh	r2, [r4, #0]
   bf012:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bf014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bf018:	f001 ba3e 	b.w	c0498 <memcpy>
    }
   bf01c:	bd38      	pop	{r3, r4, r5, pc}

000bf01e <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bf01e:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bf020:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bf024:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bf026:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bf02a:	f8c0 3006 	str.w	r3, [r0, #6]
   bf02e:	894b      	ldrh	r3, [r1, #10]
   bf030:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bf032:	460c      	mov	r4, r1
   bf034:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bf036:	f7ff ffd7 	bl	befe8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bf03a:	6823      	ldr	r3, [r4, #0]
   bf03c:	b113      	cbz	r3, bf044 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bf03e:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bf040:	2300      	movs	r3, #0
   bf042:	6023      	str	r3, [r4, #0]
    }
   bf044:	bd38      	pop	{r3, r4, r5, pc}

000bf046 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bf046:	b507      	push	{r0, r1, r2, lr}
   bf048:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bf04a:	2100      	movs	r1, #0
{
   bf04c:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bf04e:	9100      	str	r1, [sp, #0]
   bf050:	2001      	movs	r0, #1
   bf052:	218c      	movs	r1, #140	; 0x8c
   bf054:	f7fd fa00 	bl	bc458 <system_reset>
}
   bf058:	b003      	add	sp, #12
   bf05a:	f85d fb04 	ldr.w	pc, [sp], #4

000bf05e <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bf05e:	4601      	mov	r1, r0
    reset(0, flags);
   bf060:	2000      	movs	r0, #0
   bf062:	f7ff bff0 	b.w	bf046 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bf066 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bf066:	2000      	movs	r0, #0
   bf068:	f7ff bff9 	b.w	bf05e <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bf06c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bf06c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf06e:	4d2b      	ldr	r5, [pc, #172]	; (bf11c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bf070:	7d0b      	ldrb	r3, [r1, #20]
   bf072:	4604      	mov	r4, r0
   bf074:	b08b      	sub	sp, #44	; 0x2c
   bf076:	4608      	mov	r0, r1
   bf078:	1daf      	adds	r7, r5, #6
   bf07a:	2b00      	cmp	r3, #0
   bf07c:	d036      	beq.n	bf0ec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bf07e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bf080:	791b      	ldrb	r3, [r3, #4]
   bf082:	2b00      	cmp	r3, #0
   bf084:	d032      	beq.n	bf0ec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bf086:	4b26      	ldr	r3, [pc, #152]	; (bf120 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bf088:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bf08a:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bf08c:	a902      	add	r1, sp, #8
   bf08e:	3004      	adds	r0, #4
   bf090:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bf094:	f7fd f9d6 	bl	bc444 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bf098:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bf09c:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bf0a0:	b200      	sxth	r0, r0
   bf0a2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bf0a6:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bf0aa:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bf0ac:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bf0ae:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bf0b0:	4628      	mov	r0, r5
   bf0b2:	f7ff ffa2 	bl	beffa <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bf0b6:	a802      	add	r0, sp, #8
   bf0b8:	f7ff ff96 	bl	befe8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bf0bc:	2300      	movs	r3, #0
   bf0be:	6023      	str	r3, [r4, #0]
   bf0c0:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bf0c2:	71a3      	strb	r3, [r4, #6]
   bf0c4:	8123      	strh	r3, [r4, #8]
   bf0c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bf0ca:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bf0cc:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bf0d0:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bf0d2:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bf0d6:	f8c4 3006 	str.w	r3, [r4, #6]
   bf0da:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bf0dc:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bf0de:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bf0e0:	4620      	mov	r0, r4
   bf0e2:	f7ff ff8a 	bl	beffa <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bf0e6:	4620      	mov	r0, r4
   bf0e8:	b00b      	add	sp, #44	; 0x2c
   bf0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bf0ec:	2600      	movs	r6, #0
   bf0ee:	2320      	movs	r3, #32
   bf0f0:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bf0f4:	4b0b      	ldr	r3, [pc, #44]	; (bf124 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bf0f6:	9300      	str	r3, [sp, #0]
   bf0f8:	aa02      	add	r2, sp, #8
   bf0fa:	4633      	mov	r3, r6
   bf0fc:	490a      	ldr	r1, [pc, #40]	; (bf128 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bf0fe:	2032      	movs	r0, #50	; 0x32
   bf100:	f7fd f910 	bl	bc324 <log_message>
            : wakeupSource_(nullptr),
   bf104:	4b06      	ldr	r3, [pc, #24]	; (bf120 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bf106:	4805      	ldr	r0, [pc, #20]	; (bf11c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bf108:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bf10a:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bf10e:	a902      	add	r1, sp, #8
   bf110:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bf114:	f7ff ff83 	bl	bf01e <_ZN17SystemSleepResultaSEOS_.isra.0>
   bf118:	e7cd      	b.n	bf0b6 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bf11a:	bf00      	nop
   bf11c:	2003e69c 	.word	0x2003e69c
   bf120:	ffff0000 	.word	0xffff0000
   bf124:	000c247b 	.word	0x000c247b
   bf128:	000c2474 	.word	0x000c2474

000bf12c <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bf12c:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bf12e:	2420      	movs	r4, #32
{
   bf130:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bf132:	4622      	mov	r2, r4
   bf134:	2100      	movs	r1, #0
   bf136:	4668      	mov	r0, sp
   bf138:	f001 f9d6 	bl	c04e8 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bf13c:	2100      	movs	r1, #0
   bf13e:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bf140:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bf144:	f7fc fe96 	bl	bbe74 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bf148:	9801      	ldr	r0, [sp, #4]
   bf14a:	b008      	add	sp, #32
   bf14c:	bd10      	pop	{r4, pc}
	...

000bf150 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bf150:	4b05      	ldr	r3, [pc, #20]	; (bf168 <_GLOBAL__sub_I_System+0x18>)
   bf152:	2202      	movs	r2, #2
   bf154:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bf156:	4b05      	ldr	r3, [pc, #20]	; (bf16c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bf158:	4a05      	ldr	r2, [pc, #20]	; (bf170 <_GLOBAL__sub_I_System+0x20>)
   bf15a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bf15c:	2000      	movs	r0, #0
   bf15e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bf162:	f7fd b911 	b.w	bc388 <set_system_mode>
   bf166:	bf00      	nop
   bf168:	2003e6a8 	.word	0x2003e6a8
   bf16c:	2003e69c 	.word	0x2003e69c
   bf170:	ffff0000 	.word	0xffff0000

000bf174 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bf174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bf178:	4a15      	ldr	r2, [pc, #84]	; (bf1d0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bf17a:	f8df 8060 	ldr.w	r8, [pc, #96]	; bf1dc <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bf17e:	e9d2 6300 	ldrd	r6, r3, [r2]
   bf182:	1980      	adds	r0, r0, r6
   bf184:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bf188:	4b12      	ldr	r3, [pc, #72]	; (bf1d4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bf18a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bf18e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bf192:	1986      	adds	r6, r0, r6
   bf194:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bf198:	42bb      	cmp	r3, r7
   bf19a:	bf08      	it	eq
   bf19c:	42b2      	cmpeq	r2, r6
{
   bf19e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bf1a0:	d013      	beq.n	bf1ca <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bf1a2:	a903      	add	r1, sp, #12
   bf1a4:	4668      	mov	r0, sp
   bf1a6:	e9cd 6700 	strd	r6, r7, [sp]
   bf1aa:	f7fd fa8f 	bl	bc6cc <localtime_r>
	calendar_time.tm_year += 1900;
   bf1ae:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bf1b0:	4d09      	ldr	r5, [pc, #36]	; (bf1d8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bf1b2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bf1b6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bf1b8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bf1ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bf1bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bf1be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bf1c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bf1c2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bf1c6:	6823      	ldr	r3, [r4, #0]
   bf1c8:	602b      	str	r3, [r5, #0]
    }
}
   bf1ca:	b00c      	add	sp, #48	; 0x30
   bf1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bf1d0:	2003e6e0 	.word	0x2003e6e0
   bf1d4:	2003e6d8 	.word	0x2003e6d8
   bf1d8:	2003e6b4 	.word	0x2003e6b4
   bf1dc:	2003e6e8 	.word	0x2003e6e8

000bf1e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bf1e0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bf1e2:	2000      	movs	r0, #0
   bf1e4:	f7fd f982 	bl	bc4ec <spark_sync_time_pending>
   bf1e8:	b128      	cbz	r0, bf1f6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bf1ea:	f7fd f95f 	bl	bc4ac <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bf1ee:	f080 0001 	eor.w	r0, r0, #1
   bf1f2:	b2c0      	uxtb	r0, r0
    }
   bf1f4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bf1f6:	2001      	movs	r0, #1
   bf1f8:	e7fc      	b.n	bf1f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bf1fc <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   bf1fc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bf1fe:	f7ff ffb9 	bl	bf174 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   bf202:	4b01      	ldr	r3, [pc, #4]	; (bf208 <_ZN9TimeClass4hourEx+0xc>)
   bf204:	6898      	ldr	r0, [r3, #8]
   bf206:	bd08      	pop	{r3, pc}
   bf208:	2003e6b4 	.word	0x2003e6b4

000bf20c <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   bf20c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bf20e:	f7ff ffb1 	bl	bf174 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   bf212:	4b01      	ldr	r3, [pc, #4]	; (bf218 <_ZN9TimeClass3dayEx+0xc>)
   bf214:	68d8      	ldr	r0, [r3, #12]
   bf216:	bd08      	pop	{r3, pc}
   bf218:	2003e6b4 	.word	0x2003e6b4

000bf21c <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bf21c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bf21e:	4602      	mov	r2, r0
   bf220:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bf222:	4668      	mov	r0, sp
    struct timeval tv = {
   bf224:	2100      	movs	r1, #0
    };
   bf226:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bf22a:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bf22e:	f7fc fe69 	bl	bbf04 <hal_rtc_set_time>
   bf232:	4602      	mov	r2, r0
   bf234:	b910      	cbnz	r0, bf23c <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bf236:	4601      	mov	r1, r0
   bf238:	f7fd f8de 	bl	bc3f8 <system_notify_time_changed>
    }
}
   bf23c:	b005      	add	sp, #20
   bf23e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bf244 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bf244:	b530      	push	{r4, r5, lr}
   bf246:	b093      	sub	sp, #76	; 0x4c
   bf248:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bf24c:	4b19      	ldr	r3, [pc, #100]	; (bf2b4 <_ZN9TimeClass7timeStrEx+0x70>)
{
   bf24e:	4604      	mov	r4, r0
    t += time_zone_cache;
   bf250:	e9d3 1000 	ldrd	r1, r0, [r3]
   bf254:	9b01      	ldr	r3, [sp, #4]
   bf256:	1852      	adds	r2, r2, r1
   bf258:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bf25c:	4816      	ldr	r0, [pc, #88]	; (bf2b8 <_ZN9TimeClass7timeStrEx+0x74>)
   bf25e:	e9d0 1000 	ldrd	r1, r0, [r0]
   bf262:	1852      	adds	r2, r2, r1
   bf264:	eb43 0300 	adc.w	r3, r3, r0
   bf268:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bf26c:	2224      	movs	r2, #36	; 0x24
   bf26e:	eb0d 0002 	add.w	r0, sp, r2
   bf272:	2100      	movs	r1, #0
   bf274:	f001 f938 	bl	c04e8 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bf278:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bf27a:	a909      	add	r1, sp, #36	; 0x24
   bf27c:	4668      	mov	r0, sp
   bf27e:	f7fd fa25 	bl	bc6cc <localtime_r>
    char ascstr[26] = {};
   bf282:	2216      	movs	r2, #22
   bf284:	4629      	mov	r1, r5
   bf286:	a803      	add	r0, sp, #12
   bf288:	9502      	str	r5, [sp, #8]
   bf28a:	f001 f92d 	bl	c04e8 <memset>
    asctime_r(&calendar_time, ascstr);
   bf28e:	a902      	add	r1, sp, #8
   bf290:	a809      	add	r0, sp, #36	; 0x24
   bf292:	f001 f8af 	bl	c03f4 <asctime_r>
    int len = strlen(ascstr);
   bf296:	a802      	add	r0, sp, #8
   bf298:	f001 f9e1 	bl	c065e <strlen>
    ascstr[len-1] = 0; // remove final newline
   bf29c:	ab12      	add	r3, sp, #72	; 0x48
   bf29e:	4418      	add	r0, r3
    return String(ascstr);
   bf2a0:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bf2a2:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bf2a6:	4620      	mov	r0, r4
   bf2a8:	f7ff fd69 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
}
   bf2ac:	4620      	mov	r0, r4
   bf2ae:	b013      	add	sp, #76	; 0x4c
   bf2b0:	bd30      	pop	{r4, r5, pc}
   bf2b2:	bf00      	nop
   bf2b4:	2003e6e0 	.word	0x2003e6e0
   bf2b8:	2003e6d8 	.word	0x2003e6d8

000bf2bc <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bf2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf2c0:	b0a4      	sub	sp, #144	; 0x90
   bf2c2:	4607      	mov	r7, r0
   bf2c4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bf2c6:	a814      	add	r0, sp, #80	; 0x50
{
   bf2c8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bf2ca:	223f      	movs	r2, #63	; 0x3f
{
   bf2cc:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bf2ce:	f001 f9e2 	bl	c0696 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bf2d2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bf2d4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bf2d6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bf2da:	f001 f9c0 	bl	c065e <strlen>
   bf2de:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bf2e0:	bb4c      	cbnz	r4, bf336 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bf2e2:	4929      	ldr	r1, [pc, #164]	; (bf388 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bf2e4:	a803      	add	r0, sp, #12
   bf2e6:	f001 f994 	bl	c0612 <strcpy>
   bf2ea:	ac14      	add	r4, sp, #80	; 0x50
{
   bf2ec:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bf2ee:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bf2f2:	45b1      	cmp	r9, r6
   bf2f4:	d934      	bls.n	bf360 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bf2f6:	7823      	ldrb	r3, [r4, #0]
   bf2f8:	2b25      	cmp	r3, #37	; 0x25
   bf2fa:	f106 0a01 	add.w	sl, r6, #1
   bf2fe:	d117      	bne.n	bf330 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bf300:	7863      	ldrb	r3, [r4, #1]
   bf302:	2b7a      	cmp	r3, #122	; 0x7a
   bf304:	d114      	bne.n	bf330 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bf306:	a803      	add	r0, sp, #12
   bf308:	f001 f9a9 	bl	c065e <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bf30c:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bf30e:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bf310:	1830      	adds	r0, r6, r0
   bf312:	4418      	add	r0, r3
   bf314:	eba9 0206 	sub.w	r2, r9, r6
   bf318:	1ca1      	adds	r1, r4, #2
   bf31a:	f001 f8bd 	bl	c0498 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bf31e:	462a      	mov	r2, r5
   bf320:	a903      	add	r1, sp, #12
   bf322:	4620      	mov	r0, r4
   bf324:	f001 f8b8 	bl	c0498 <memcpy>
            len = strlen(format_str);
   bf328:	a814      	add	r0, sp, #80	; 0x50
   bf32a:	f001 f998 	bl	c065e <strlen>
   bf32e:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bf330:	3401      	adds	r4, #1
   bf332:	4656      	mov	r6, sl
   bf334:	e7db      	b.n	bf2ee <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bf336:	233c      	movs	r3, #60	; 0x3c
   bf338:	fb94 f2f3 	sdiv	r2, r4, r3
   bf33c:	2a00      	cmp	r2, #0
   bf33e:	bfb8      	it	lt
   bf340:	4252      	neglt	r2, r2
   bf342:	fbb2 f1f3 	udiv	r1, r2, r3
   bf346:	fb03 2211 	mls	r2, r3, r1, r2
   bf34a:	9200      	str	r2, [sp, #0]
   bf34c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bf350:	4a0e      	ldr	r2, [pc, #56]	; (bf38c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bf352:	fb94 f3f3 	sdiv	r3, r4, r3
   bf356:	2110      	movs	r1, #16
   bf358:	a803      	add	r0, sp, #12
   bf35a:	f7fd f977 	bl	bc64c <snprintf>
   bf35e:	e7c4      	b.n	bf2ea <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bf360:	2100      	movs	r1, #0
   bf362:	222e      	movs	r2, #46	; 0x2e
   bf364:	a808      	add	r0, sp, #32
   bf366:	9107      	str	r1, [sp, #28]
   bf368:	f001 f8be 	bl	c04e8 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bf36c:	4643      	mov	r3, r8
   bf36e:	aa14      	add	r2, sp, #80	; 0x50
   bf370:	2132      	movs	r1, #50	; 0x32
   bf372:	a807      	add	r0, sp, #28
   bf374:	f7fd f9a2 	bl	bc6bc <strftime>
    return String(buf);
   bf378:	a907      	add	r1, sp, #28
   bf37a:	4638      	mov	r0, r7
   bf37c:	f7ff fcff 	bl	bed7e <_ZN6StringC1EPK19__FlashStringHelper>
}
   bf380:	4638      	mov	r0, r7
   bf382:	b024      	add	sp, #144	; 0x90
   bf384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf388:	000c1b1b 	.word	0x000c1b1b
   bf38c:	000c1b1d 	.word	0x000c1b1d

000bf390 <_ZN9TimeClass6formatExPKc>:
{
   bf390:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf392:	b08d      	sub	sp, #52	; 0x34
   bf394:	e9cd 2300 	strd	r2, r3, [sp]
   bf398:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bf39a:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bf39c:	b915      	cbnz	r5, bf3a4 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bf39e:	4b19      	ldr	r3, [pc, #100]	; (bf404 <_ZN9TimeClass6formatExPKc+0x74>)
   bf3a0:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bf3a2:	b12d      	cbz	r5, bf3b0 <_ZN9TimeClass6formatExPKc+0x20>
   bf3a4:	4b18      	ldr	r3, [pc, #96]	; (bf408 <_ZN9TimeClass6formatExPKc+0x78>)
   bf3a6:	4628      	mov	r0, r5
   bf3a8:	6819      	ldr	r1, [r3, #0]
   bf3aa:	f001 f928 	bl	c05fe <strcmp>
   bf3ae:	b938      	cbnz	r0, bf3c0 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bf3b0:	e9dd 2300 	ldrd	r2, r3, [sp]
   bf3b4:	4620      	mov	r0, r4
   bf3b6:	f7ff ff45 	bl	bf244 <_ZN9TimeClass7timeStrEx>
}
   bf3ba:	4620      	mov	r0, r4
   bf3bc:	b00d      	add	sp, #52	; 0x34
   bf3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bf3c0:	4e12      	ldr	r6, [pc, #72]	; (bf40c <_ZN9TimeClass6formatExPKc+0x7c>)
   bf3c2:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bf3c4:	4f12      	ldr	r7, [pc, #72]	; (bf410 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bf3c6:	e9d6 3200 	ldrd	r3, r2, [r6]
   bf3ca:	185b      	adds	r3, r3, r1
   bf3cc:	9901      	ldr	r1, [sp, #4]
   bf3ce:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bf3d2:	e9d7 0100 	ldrd	r0, r1, [r7]
   bf3d6:	181b      	adds	r3, r3, r0
   bf3d8:	eb42 0201 	adc.w	r2, r2, r1
   bf3dc:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bf3e0:	2100      	movs	r1, #0
   bf3e2:	2224      	movs	r2, #36	; 0x24
   bf3e4:	a803      	add	r0, sp, #12
   bf3e6:	f001 f87f 	bl	c04e8 <memset>
    localtime_r(&t, &calendar_time);
   bf3ea:	a903      	add	r1, sp, #12
   bf3ec:	4668      	mov	r0, sp
   bf3ee:	f7fd f96d 	bl	bc6cc <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bf3f2:	6832      	ldr	r2, [r6, #0]
   bf3f4:	683b      	ldr	r3, [r7, #0]
   bf3f6:	a903      	add	r1, sp, #12
   bf3f8:	4413      	add	r3, r2
   bf3fa:	4620      	mov	r0, r4
   bf3fc:	462a      	mov	r2, r5
   bf3fe:	f7ff ff5d 	bl	bf2bc <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bf402:	e7da      	b.n	bf3ba <_ZN9TimeClass6formatExPKc+0x2a>
   bf404:	2003e6b0 	.word	0x2003e6b0
   bf408:	2003d770 	.word	0x2003d770
   bf40c:	2003e6e0 	.word	0x2003e6e0
   bf410:	2003e6d8 	.word	0x2003e6d8

000bf414 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bf414:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bf416:	2000      	movs	r0, #0
   bf418:	f7fc fd5c 	bl	bbed4 <hal_rtc_time_is_valid>
    if (rtcstate)
   bf41c:	4604      	mov	r4, r0
   bf41e:	b9a0      	cbnz	r0, bf44a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bf420:	f7fc ffaa 	bl	bc378 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bf424:	2801      	cmp	r0, #1
   bf426:	d110      	bne.n	bf44a <_ZN9TimeClass7isValidEv+0x36>
   bf428:	4620      	mov	r0, r4
   bf42a:	f7fc ffdd 	bl	bc3e8 <system_thread_get_state>
   bf42e:	b960      	cbnz	r0, bf44a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bf430:	f7ff fed6 	bl	bf1e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bf434:	b910      	cbnz	r0, bf43c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bf436:	f7fd f829 	bl	bc48c <spark_process>
        while (_while() && !_condition()) {
   bf43a:	e7f9      	b.n	bf430 <_ZN9TimeClass7isValidEv+0x1c>
   bf43c:	f7ff fed0 	bl	bf1e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bf440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bf444:	2000      	movs	r0, #0
   bf446:	f7fc bd45 	b.w	bbed4 <hal_rtc_time_is_valid>
}
   bf44a:	4620      	mov	r0, r4
   bf44c:	bd10      	pop	{r4, pc}

000bf44e <_ZN9TimeClass3nowEv>:
{
   bf44e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bf450:	f7ff ffe0 	bl	bf414 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bf454:	2210      	movs	r2, #16
   bf456:	2100      	movs	r1, #0
   bf458:	4668      	mov	r0, sp
   bf45a:	f001 f845 	bl	c04e8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bf45e:	2100      	movs	r1, #0
   bf460:	4668      	mov	r0, sp
   bf462:	f7fc fd47 	bl	bbef4 <hal_rtc_get_time>
}
   bf466:	9800      	ldr	r0, [sp, #0]
   bf468:	b005      	add	sp, #20
   bf46a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bf470 <_ZN9TimeClass4hourEv>:
{
   bf470:	b508      	push	{r3, lr}
	return hour(now());
   bf472:	f7ff ffec 	bl	bf44e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bf476:	17c1      	asrs	r1, r0, #31
   bf478:	f7ff fe7c 	bl	bf174 <_ZL22Refresh_UnixTime_Cachex>
}
   bf47c:	4b01      	ldr	r3, [pc, #4]	; (bf484 <_ZN9TimeClass4hourEv+0x14>)
   bf47e:	6898      	ldr	r0, [r3, #8]
   bf480:	bd08      	pop	{r3, pc}
   bf482:	bf00      	nop
   bf484:	2003e6b4 	.word	0x2003e6b4

000bf488 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bf488:	4b02      	ldr	r3, [pc, #8]	; (bf494 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bf48a:	681a      	ldr	r2, [r3, #0]
   bf48c:	4b02      	ldr	r3, [pc, #8]	; (bf498 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bf48e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bf490:	4770      	bx	lr
   bf492:	bf00      	nop
   bf494:	2003d770 	.word	0x2003d770
   bf498:	2003e6b0 	.word	0x2003e6b0

000bf49c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bf49c:	4770      	bx	lr

000bf49e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bf49e:	7441      	strb	r1, [r0, #17]
}
   bf4a0:	4770      	bx	lr

000bf4a2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bf4a2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bf4a4:	7c00      	ldrb	r0, [r0, #16]
   bf4a6:	f7fc fed5 	bl	bc254 <hal_usart_available_data_for_write>
}
   bf4aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bf4ae:	bd08      	pop	{r3, pc}

000bf4b0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bf4b0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bf4b2:	7c00      	ldrb	r0, [r0, #16]
   bf4b4:	f7fc fea6 	bl	bc204 <hal_usart_available>
}
   bf4b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bf4bc:	bd08      	pop	{r3, pc}

000bf4be <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bf4be:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bf4c0:	7c00      	ldrb	r0, [r0, #16]
   bf4c2:	f7fc feaf 	bl	bc224 <hal_usart_peek>
}
   bf4c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bf4ca:	bd08      	pop	{r3, pc}

000bf4cc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bf4cc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bf4ce:	7c00      	ldrb	r0, [r0, #16]
   bf4d0:	f7fc fea0 	bl	bc214 <hal_usart_read>
}
   bf4d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bf4d8:	bd08      	pop	{r3, pc}

000bf4da <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bf4da:	7c00      	ldrb	r0, [r0, #16]
   bf4dc:	f7fc beaa 	b.w	bc234 <hal_usart_flush>

000bf4e0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bf4e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bf4e2:	7c45      	ldrb	r5, [r0, #17]
{
   bf4e4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bf4e6:	b12d      	cbz	r5, bf4f4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bf4e8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bf4ea:	b003      	add	sp, #12
   bf4ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bf4f0:	f7fc be80 	b.w	bc1f4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bf4f4:	7c00      	ldrb	r0, [r0, #16]
   bf4f6:	9101      	str	r1, [sp, #4]
   bf4f8:	f7fc feac 	bl	bc254 <hal_usart_available_data_for_write>
   bf4fc:	2800      	cmp	r0, #0
   bf4fe:	9901      	ldr	r1, [sp, #4]
   bf500:	dcf2      	bgt.n	bf4e8 <_ZN11USARTSerial5writeEh+0x8>
}
   bf502:	4628      	mov	r0, r5
   bf504:	b003      	add	sp, #12
   bf506:	bd30      	pop	{r4, r5, pc}

000bf508 <_ZN11USARTSerialD0Ev>:
   bf508:	b510      	push	{r4, lr}
   bf50a:	2114      	movs	r1, #20
   bf50c:	4604      	mov	r4, r0
   bf50e:	f7f4 fdc6 	bl	b409e <_ZdlPvj>
   bf512:	4620      	mov	r0, r4
   bf514:	bd10      	pop	{r4, pc}
	...

000bf518 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bf518:	b510      	push	{r4, lr}
   bf51a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bf51e:	4604      	mov	r4, r0
   bf520:	4608      	mov	r0, r1
   bf522:	4611      	mov	r1, r2
   bf524:	2200      	movs	r2, #0
   bf526:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bf52a:	4b04      	ldr	r3, [pc, #16]	; (bf53c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bf52c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bf52e:	2301      	movs	r3, #1
  _serial = serial;
   bf530:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bf532:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bf534:	f7fc fe9e 	bl	bc274 <hal_usart_init_ex>
}
   bf538:	4620      	mov	r0, r4
   bf53a:	bd10      	pop	{r4, pc}
   bf53c:	000c24c8 	.word	0x000c24c8

000bf540 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bf540:	7c00      	ldrb	r0, [r0, #16]
   bf542:	2300      	movs	r3, #0
   bf544:	f7fc be8e 	b.w	bc264 <hal_usart_begin_config>

000bf548 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bf548:	2200      	movs	r2, #0
   bf54a:	f7ff bff9 	b.w	bf540 <_ZN11USARTSerial5beginEmm>

000bf54e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bf54e:	7c00      	ldrb	r0, [r0, #16]
   bf550:	f7fc be48 	b.w	bc1e4 <hal_usart_end>

000bf554 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bf554:	7441      	strb	r1, [r0, #17]
}
   bf556:	4770      	bx	lr

000bf558 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bf558:	4770      	bx	lr

000bf55a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bf55a:	4770      	bx	lr

000bf55c <_ZN9USBSerial4readEv>:
{
   bf55c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bf55e:	2100      	movs	r1, #0
   bf560:	7c00      	ldrb	r0, [r0, #16]
   bf562:	f7fc feb7 	bl	bc2d4 <HAL_USB_USART_Receive_Data>
}
   bf566:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bf56a:	bd08      	pop	{r3, pc}

000bf56c <_ZN9USBSerial4peekEv>:
{
   bf56c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bf56e:	2101      	movs	r1, #1
   bf570:	7c00      	ldrb	r0, [r0, #16]
   bf572:	f7fc feaf 	bl	bc2d4 <HAL_USB_USART_Receive_Data>
}
   bf576:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bf57a:	bd08      	pop	{r3, pc}

000bf57c <_ZN9USBSerial17availableForWriteEv>:
{
   bf57c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bf57e:	7c00      	ldrb	r0, [r0, #16]
   bf580:	f7fc fea0 	bl	bc2c4 <HAL_USB_USART_Available_Data_For_Write>
}
   bf584:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bf588:	bd08      	pop	{r3, pc}

000bf58a <_ZN9USBSerial9availableEv>:
{
   bf58a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bf58c:	7c00      	ldrb	r0, [r0, #16]
   bf58e:	f7fc fe91 	bl	bc2b4 <HAL_USB_USART_Available_Data>
}
   bf592:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bf596:	bd08      	pop	{r3, pc}

000bf598 <_ZN9USBSerial5writeEh>:
{
   bf598:	b513      	push	{r0, r1, r4, lr}
   bf59a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bf59c:	7c00      	ldrb	r0, [r0, #16]
{
   bf59e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bf5a0:	f7fc fe90 	bl	bc2c4 <HAL_USB_USART_Available_Data_For_Write>
   bf5a4:	2800      	cmp	r0, #0
   bf5a6:	9901      	ldr	r1, [sp, #4]
   bf5a8:	dc01      	bgt.n	bf5ae <_ZN9USBSerial5writeEh+0x16>
   bf5aa:	7c60      	ldrb	r0, [r4, #17]
   bf5ac:	b120      	cbz	r0, bf5b8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bf5ae:	7c20      	ldrb	r0, [r4, #16]
   bf5b0:	f7fc fe98 	bl	bc2e4 <HAL_USB_USART_Send_Data>
   bf5b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bf5b8:	b002      	add	sp, #8
   bf5ba:	bd10      	pop	{r4, pc}

000bf5bc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bf5bc:	7c00      	ldrb	r0, [r0, #16]
   bf5be:	f7fc be99 	b.w	bc2f4 <HAL_USB_USART_Flush_Data>

000bf5c2 <_ZN9USBSerialD0Ev>:
   bf5c2:	b510      	push	{r4, lr}
   bf5c4:	2114      	movs	r1, #20
   bf5c6:	4604      	mov	r4, r0
   bf5c8:	f7f4 fd69 	bl	b409e <_ZdlPvj>
   bf5cc:	4620      	mov	r0, r4
   bf5ce:	bd10      	pop	{r4, pc}

000bf5d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bf5d0:	b510      	push	{r4, lr}
   bf5d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bf5d6:	4604      	mov	r4, r0
   bf5d8:	4608      	mov	r0, r1
   bf5da:	2100      	movs	r1, #0
   bf5dc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bf5e0:	4b04      	ldr	r3, [pc, #16]	; (bf5f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bf5e2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bf5e4:	2301      	movs	r3, #1
  _serial = serial;
   bf5e6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bf5e8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bf5ea:	4611      	mov	r1, r2
   bf5ec:	f7fc fe4a 	bl	bc284 <HAL_USB_USART_Init>
}
   bf5f0:	4620      	mov	r0, r4
   bf5f2:	bd10      	pop	{r4, pc}
   bf5f4:	000c24f8 	.word	0x000c24f8

000bf5f8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bf5f8:	7c00      	ldrb	r0, [r0, #16]
   bf5fa:	2200      	movs	r2, #0
   bf5fc:	f7fc be4a 	b.w	bc294 <HAL_USB_USART_Begin>

000bf600 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bf600:	7c00      	ldrb	r0, [r0, #16]
   bf602:	f7fc be4f 	b.w	bc2a4 <HAL_USB_USART_End>

000bf606 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bf606:	7c00      	ldrb	r0, [r0, #16]
   bf608:	f7fc be7c 	b.w	bc304 <HAL_USB_USART_Is_Connected>

000bf60c <_Z19acquireSerialBufferv>:
{
   bf60c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bf60e:	2214      	movs	r2, #20
{
   bf610:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bf612:	2100      	movs	r1, #0
   bf614:	f000 ff68 	bl	c04e8 <memset>
}
   bf618:	4620      	mov	r0, r4
   bf61a:	bd10      	pop	{r4, pc}

000bf61c <_Z16_fetch_usbserialv>:
{
   bf61c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bf61e:	4c0f      	ldr	r4, [pc, #60]	; (bf65c <_Z16_fetch_usbserialv+0x40>)
{
   bf620:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bf622:	a803      	add	r0, sp, #12
   bf624:	f7ff fff2 	bl	bf60c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bf628:	7821      	ldrb	r1, [r4, #0]
   bf62a:	f3bf 8f5b 	dmb	ish
   bf62e:	f011 0101 	ands.w	r1, r1, #1
   bf632:	d10f      	bne.n	bf654 <_Z16_fetch_usbserialv+0x38>
   bf634:	4620      	mov	r0, r4
   bf636:	9101      	str	r1, [sp, #4]
   bf638:	f7f4 fd40 	bl	b40bc <__cxa_guard_acquire>
   bf63c:	9901      	ldr	r1, [sp, #4]
   bf63e:	b148      	cbz	r0, bf654 <_Z16_fetch_usbserialv+0x38>
   bf640:	aa03      	add	r2, sp, #12
   bf642:	4807      	ldr	r0, [pc, #28]	; (bf660 <_Z16_fetch_usbserialv+0x44>)
   bf644:	f7ff ffc4 	bl	bf5d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bf648:	4620      	mov	r0, r4
   bf64a:	f7f4 fd3c 	bl	b40c6 <__cxa_guard_release>
   bf64e:	4805      	ldr	r0, [pc, #20]	; (bf664 <_Z16_fetch_usbserialv+0x48>)
   bf650:	f000 fef6 	bl	c0440 <atexit>
	return _usbserial;
}
   bf654:	4802      	ldr	r0, [pc, #8]	; (bf660 <_Z16_fetch_usbserialv+0x44>)
   bf656:	b008      	add	sp, #32
   bf658:	bd10      	pop	{r4, pc}
   bf65a:	bf00      	nop
   bf65c:	2003e6f0 	.word	0x2003e6f0
   bf660:	2003e6f4 	.word	0x2003e6f4
   bf664:	000bf559 	.word	0x000bf559

000bf668 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bf668:	4b01      	ldr	r3, [pc, #4]	; (bf670 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bf66a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bf66c:	4770      	bx	lr
   bf66e:	bf00      	nop
   bf670:	2003d774 	.word	0x2003d774

000bf674 <serialEventRun>:
{
   bf674:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bf676:	4b0b      	ldr	r3, [pc, #44]	; (bf6a4 <serialEventRun+0x30>)
   bf678:	b143      	cbz	r3, bf68c <serialEventRun+0x18>
   bf67a:	f7ff ffcf 	bl	bf61c <_Z16_fetch_usbserialv>
   bf67e:	6803      	ldr	r3, [r0, #0]
   bf680:	691b      	ldr	r3, [r3, #16]
   bf682:	4798      	blx	r3
   bf684:	2800      	cmp	r0, #0
   bf686:	dd01      	ble.n	bf68c <serialEventRun+0x18>
        serialEvent();
   bf688:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bf68c:	4b06      	ldr	r3, [pc, #24]	; (bf6a8 <serialEventRun+0x34>)
   bf68e:	b143      	cbz	r3, bf6a2 <serialEventRun+0x2e>
   bf690:	f000 f9ca 	bl	bfa28 <_Z22__fetch_global_Serial1v>
   bf694:	6803      	ldr	r3, [r0, #0]
   bf696:	691b      	ldr	r3, [r3, #16]
   bf698:	4798      	blx	r3
   bf69a:	2800      	cmp	r0, #0
   bf69c:	dd01      	ble.n	bf6a2 <serialEventRun+0x2e>
        serialEvent1();
   bf69e:	f3af 8000 	nop.w
}
   bf6a2:	bd08      	pop	{r3, pc}
	...

000bf6ac <_post_loop>:
{
   bf6ac:	b508      	push	{r3, lr}
	serialEventRun();
   bf6ae:	f7ff ffe1 	bl	bf674 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bf6b2:	f7fc fc07 	bl	bbec4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bf6b6:	4b01      	ldr	r3, [pc, #4]	; (bf6bc <_post_loop+0x10>)
   bf6b8:	6018      	str	r0, [r3, #0]
}
   bf6ba:	bd08      	pop	{r3, pc}
   bf6bc:	2003e710 	.word	0x2003e710

000bf6c0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bf6c0:	4805      	ldr	r0, [pc, #20]	; (bf6d8 <_Z33system_initialize_user_backup_ramv+0x18>)
   bf6c2:	4a06      	ldr	r2, [pc, #24]	; (bf6dc <_Z33system_initialize_user_backup_ramv+0x1c>)
   bf6c4:	4906      	ldr	r1, [pc, #24]	; (bf6e0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bf6c6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bf6c8:	1a12      	subs	r2, r2, r0
   bf6ca:	f000 fee5 	bl	c0498 <memcpy>
    __backup_sram_signature = signature;
   bf6ce:	4b05      	ldr	r3, [pc, #20]	; (bf6e4 <_Z33system_initialize_user_backup_ramv+0x24>)
   bf6d0:	4a05      	ldr	r2, [pc, #20]	; (bf6e8 <_Z33system_initialize_user_backup_ramv+0x28>)
   bf6d2:	601a      	str	r2, [r3, #0]
}
   bf6d4:	bd08      	pop	{r3, pc}
   bf6d6:	bf00      	nop
   bf6d8:	2003f400 	.word	0x2003f400
   bf6dc:	2003f404 	.word	0x2003f404
   bf6e0:	000c27b4 	.word	0x000c27b4
   bf6e4:	2003f400 	.word	0x2003f400
   bf6e8:	9a271c1e 	.word	0x9a271c1e

000bf6ec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bf6ec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bf6ee:	2300      	movs	r3, #0
   bf6f0:	9300      	str	r3, [sp, #0]
   bf6f2:	461a      	mov	r2, r3
   bf6f4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bf6f8:	f7fc fe90 	bl	bc41c <system_ctrl_set_result>
}
   bf6fc:	b003      	add	sp, #12
   bf6fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bf704 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bf704:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bf706:	8843      	ldrh	r3, [r0, #2]
   bf708:	2b0a      	cmp	r3, #10
   bf70a:	d008      	beq.n	bf71e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bf70c:	2b50      	cmp	r3, #80	; 0x50
   bf70e:	d10b      	bne.n	bf728 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bf710:	4b09      	ldr	r3, [pc, #36]	; (bf738 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bf712:	681b      	ldr	r3, [r3, #0]
   bf714:	b14b      	cbz	r3, bf72a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bf716:	b003      	add	sp, #12
   bf718:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bf71c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bf71e:	f7ff ffe5 	bl	bf6ec <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bf722:	b003      	add	sp, #12
   bf724:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bf728:	2300      	movs	r3, #0
   bf72a:	9300      	str	r3, [sp, #0]
   bf72c:	461a      	mov	r2, r3
   bf72e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bf732:	f7fc fe73 	bl	bc41c <system_ctrl_set_result>
}
   bf736:	e7f4      	b.n	bf722 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bf738:	2003e70c 	.word	0x2003e70c

000bf73c <module_user_init_hook>:
{
   bf73c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bf73e:	4812      	ldr	r0, [pc, #72]	; (bf788 <module_user_init_hook+0x4c>)
   bf740:	2100      	movs	r1, #0
   bf742:	f7fc ffb3 	bl	bc6ac <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bf746:	4b11      	ldr	r3, [pc, #68]	; (bf78c <module_user_init_hook+0x50>)
   bf748:	681a      	ldr	r2, [r3, #0]
   bf74a:	4b11      	ldr	r3, [pc, #68]	; (bf790 <module_user_init_hook+0x54>)
   bf74c:	429a      	cmp	r2, r3
   bf74e:	4b11      	ldr	r3, [pc, #68]	; (bf794 <module_user_init_hook+0x58>)
   bf750:	bf0c      	ite	eq
   bf752:	2201      	moveq	r2, #1
   bf754:	2200      	movne	r2, #0
   bf756:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bf758:	d001      	beq.n	bf75e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bf75a:	f7ff ffb1 	bl	bf6c0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bf75e:	f7fc fb99 	bl	bbe94 <HAL_RNG_GetRandomNumber>
   bf762:	4604      	mov	r4, r0
    srand(seed);
   bf764:	f000 fec8 	bl	c04f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bf768:	4b0b      	ldr	r3, [pc, #44]	; (bf798 <module_user_init_hook+0x5c>)
   bf76a:	b113      	cbz	r3, bf772 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bf76c:	4620      	mov	r0, r4
   bf76e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bf772:	2100      	movs	r1, #0
   bf774:	4808      	ldr	r0, [pc, #32]	; (bf798 <module_user_init_hook+0x5c>)
   bf776:	f7fc fed1 	bl	bc51c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bf77a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bf77e:	4807      	ldr	r0, [pc, #28]	; (bf79c <module_user_init_hook+0x60>)
   bf780:	2100      	movs	r1, #0
   bf782:	f7fc be41 	b.w	bc408 <system_ctrl_set_app_request_handler>
   bf786:	bf00      	nop
   bf788:	000bf669 	.word	0x000bf669
   bf78c:	2003f400 	.word	0x2003f400
   bf790:	9a271c1e 	.word	0x9a271c1e
   bf794:	2003e708 	.word	0x2003e708
   bf798:	00000000 	.word	0x00000000
   bf79c:	000bf705 	.word	0x000bf705

000bf7a0 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bf7a0:	b508      	push	{r3, lr}
   bf7a2:	4b02      	ldr	r3, [pc, #8]	; (bf7ac <spark_protocol_instance+0xc>)
   bf7a4:	681b      	ldr	r3, [r3, #0]
   bf7a6:	681b      	ldr	r3, [r3, #0]
   bf7a8:	9301      	str	r3, [sp, #4]
   bf7aa:	bd08      	pop	{r3, pc}
   bf7ac:	0003025c 	.word	0x0003025c

000bf7b0 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bf7b0:	b508      	push	{r3, lr}
   bf7b2:	4b02      	ldr	r3, [pc, #8]	; (bf7bc <spark_protocol_set_product_id+0xc>)
   bf7b4:	681b      	ldr	r3, [r3, #0]
   bf7b6:	685b      	ldr	r3, [r3, #4]
   bf7b8:	9301      	str	r3, [sp, #4]
   bf7ba:	bd08      	pop	{r3, pc}
   bf7bc:	0003025c 	.word	0x0003025c

000bf7c0 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bf7c0:	b508      	push	{r3, lr}
   bf7c2:	4b02      	ldr	r3, [pc, #8]	; (bf7cc <spark_protocol_set_product_firmware_version+0xc>)
   bf7c4:	681b      	ldr	r3, [r3, #0]
   bf7c6:	689b      	ldr	r3, [r3, #8]
   bf7c8:	9301      	str	r3, [sp, #4]
   bf7ca:	bd08      	pop	{r3, pc}
   bf7cc:	0003025c 	.word	0x0003025c

000bf7d0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bf7d0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bf7d2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bf7d4:	d902      	bls.n	bf7dc <pinAvailable+0xc>
    return false;
   bf7d6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bf7d8:	b002      	add	sp, #8
   bf7da:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bf7dc:	f1a0 030b 	sub.w	r3, r0, #11
   bf7e0:	2b02      	cmp	r3, #2
   bf7e2:	d81a      	bhi.n	bf81a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bf7e4:	4c17      	ldr	r4, [pc, #92]	; (bf844 <pinAvailable+0x74>)
   bf7e6:	7821      	ldrb	r1, [r4, #0]
   bf7e8:	f3bf 8f5b 	dmb	ish
   bf7ec:	f011 0101 	ands.w	r1, r1, #1
   bf7f0:	d10b      	bne.n	bf80a <pinAvailable+0x3a>
   bf7f2:	4620      	mov	r0, r4
   bf7f4:	9101      	str	r1, [sp, #4]
   bf7f6:	f7f4 fc61 	bl	b40bc <__cxa_guard_acquire>
   bf7fa:	9901      	ldr	r1, [sp, #4]
   bf7fc:	b128      	cbz	r0, bf80a <pinAvailable+0x3a>
   bf7fe:	4812      	ldr	r0, [pc, #72]	; (bf848 <pinAvailable+0x78>)
   bf800:	f7ff f9b2 	bl	beb68 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bf804:	4620      	mov	r0, r4
   bf806:	f7f4 fc5e 	bl	b40c6 <__cxa_guard_release>
   bf80a:	4b0f      	ldr	r3, [pc, #60]	; (bf848 <pinAvailable+0x78>)
   bf80c:	7818      	ldrb	r0, [r3, #0]
   bf80e:	f7fc fc61 	bl	bc0d4 <hal_spi_is_enabled>
   bf812:	2800      	cmp	r0, #0
   bf814:	d1df      	bne.n	bf7d6 <pinAvailable+0x6>
  return true; // 'pin' is available
   bf816:	2001      	movs	r0, #1
   bf818:	e7de      	b.n	bf7d8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bf81a:	2801      	cmp	r0, #1
   bf81c:	d809      	bhi.n	bf832 <pinAvailable+0x62>
   bf81e:	f000 f89f 	bl	bf960 <_Z19__fetch_global_Wirev>
   bf822:	2100      	movs	r1, #0
   bf824:	7c00      	ldrb	r0, [r0, #16]
   bf826:	f7fc fbf5 	bl	bc014 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bf82a:	f080 0001 	eor.w	r0, r0, #1
   bf82e:	b2c0      	uxtb	r0, r0
   bf830:	e7d2      	b.n	bf7d8 <pinAvailable+0x8>
   bf832:	3809      	subs	r0, #9
   bf834:	2801      	cmp	r0, #1
   bf836:	d8ee      	bhi.n	bf816 <pinAvailable+0x46>
   bf838:	f000 f8f6 	bl	bfa28 <_Z22__fetch_global_Serial1v>
   bf83c:	7c00      	ldrb	r0, [r0, #16]
   bf83e:	f7fc fd01 	bl	bc244 <hal_usart_is_enabled>
   bf842:	e7f2      	b.n	bf82a <pinAvailable+0x5a>
   bf844:	2003e450 	.word	0x2003e450
   bf848:	2003e454 	.word	0x2003e454

000bf84c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bf84c:	2823      	cmp	r0, #35	; 0x23
{
   bf84e:	b538      	push	{r3, r4, r5, lr}
   bf850:	4604      	mov	r4, r0
   bf852:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bf854:	d80a      	bhi.n	bf86c <pinMode+0x20>
   bf856:	29ff      	cmp	r1, #255	; 0xff
   bf858:	d008      	beq.n	bf86c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bf85a:	f7ff ffb9 	bl	bf7d0 <pinAvailable>
   bf85e:	b128      	cbz	r0, bf86c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bf860:	4629      	mov	r1, r5
   bf862:	4620      	mov	r0, r4
}
   bf864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bf868:	f7fc bb5c 	b.w	bbf24 <HAL_Pin_Mode>
}
   bf86c:	bd38      	pop	{r3, r4, r5, pc}

000bf86e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bf86e:	b538      	push	{r3, r4, r5, lr}
   bf870:	4604      	mov	r4, r0
   bf872:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bf874:	f7fc fb5e 	bl	bbf34 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bf878:	28ff      	cmp	r0, #255	; 0xff
   bf87a:	d010      	beq.n	bf89e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bf87c:	2806      	cmp	r0, #6
   bf87e:	d804      	bhi.n	bf88a <digitalWrite+0x1c>
   bf880:	234d      	movs	r3, #77	; 0x4d
   bf882:	fa23 f000 	lsr.w	r0, r3, r0
   bf886:	07c3      	lsls	r3, r0, #31
   bf888:	d409      	bmi.n	bf89e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bf88a:	4620      	mov	r0, r4
   bf88c:	f7ff ffa0 	bl	bf7d0 <pinAvailable>
   bf890:	b128      	cbz	r0, bf89e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bf892:	4629      	mov	r1, r5
   bf894:	4620      	mov	r0, r4
}
   bf896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bf89a:	f7fc bb53 	b.w	bbf44 <HAL_GPIO_Write>
}
   bf89e:	bd38      	pop	{r3, r4, r5, pc}

000bf8a0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bf8a0:	b510      	push	{r4, lr}
   bf8a2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bf8a4:	f7fc fb46 	bl	bbf34 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bf8a8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bf8aa:	b2db      	uxtb	r3, r3
   bf8ac:	2b01      	cmp	r3, #1
   bf8ae:	d908      	bls.n	bf8c2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bf8b0:	4620      	mov	r0, r4
   bf8b2:	f7ff ff8d 	bl	bf7d0 <pinAvailable>
   bf8b6:	b120      	cbz	r0, bf8c2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bf8b8:	4620      	mov	r0, r4
}
   bf8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bf8be:	f7fc bb49 	b.w	bbf54 <HAL_GPIO_Read>
}
   bf8c2:	2000      	movs	r0, #0
   bf8c4:	bd10      	pop	{r4, pc}

000bf8c6 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bf8c6:	280d      	cmp	r0, #13
{
   bf8c8:	b510      	push	{r4, lr}
   bf8ca:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bf8cc:	bf9c      	itt	ls
   bf8ce:	340e      	addls	r4, #14
   bf8d0:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bf8d2:	4620      	mov	r0, r4
   bf8d4:	f7ff ff7c 	bl	bf7d0 <pinAvailable>
   bf8d8:	b150      	cbz	r0, bf8f0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bf8da:	2103      	movs	r1, #3
   bf8dc:	4620      	mov	r0, r4
   bf8de:	f7fc fb19 	bl	bbf14 <HAL_Validate_Pin_Function>
   bf8e2:	2803      	cmp	r0, #3
   bf8e4:	d104      	bne.n	bf8f0 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bf8e6:	4620      	mov	r0, r4
}
   bf8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bf8ec:	f7fc bb4a 	b.w	bbf84 <hal_adc_read>
}
   bf8f0:	2000      	movs	r0, #0
   bf8f2:	bd10      	pop	{r4, pc}

000bf8f4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bf8f4:	4770      	bx	lr

000bf8f6 <__tcf_1>:
   bf8f6:	4770      	bx	lr

000bf8f8 <_Z17acquireWireBufferv>:
{
   bf8f8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bf8fa:	4b0a      	ldr	r3, [pc, #40]	; (bf924 <_Z17acquireWireBufferv+0x2c>)
   bf8fc:	6003      	str	r3, [r0, #0]
   bf8fe:	2301      	movs	r3, #1
{
   bf900:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bf902:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bf904:	4908      	ldr	r1, [pc, #32]	; (bf928 <_Z17acquireWireBufferv+0x30>)
   bf906:	2020      	movs	r0, #32
   bf908:	f000 f8b4 	bl	bfa74 <_ZnajRKSt9nothrow_t>
	};
   bf90c:	2520      	movs	r5, #32
   bf90e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bf910:	4905      	ldr	r1, [pc, #20]	; (bf928 <_Z17acquireWireBufferv+0x30>)
	};
   bf912:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bf914:	4628      	mov	r0, r5
   bf916:	f000 f8ad 	bl	bfa74 <_ZnajRKSt9nothrow_t>
	};
   bf91a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bf91e:	4620      	mov	r0, r4
   bf920:	bd38      	pop	{r3, r4, r5, pc}
   bf922:	bf00      	nop
   bf924:	00010018 	.word	0x00010018
   bf928:	000c2520 	.word	0x000c2520

000bf92c <_Z18acquireWire1Bufferv>:
{
   bf92c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bf92e:	4b0a      	ldr	r3, [pc, #40]	; (bf958 <_Z18acquireWire1Bufferv+0x2c>)
   bf930:	6003      	str	r3, [r0, #0]
   bf932:	2301      	movs	r3, #1
{
   bf934:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bf936:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bf938:	4908      	ldr	r1, [pc, #32]	; (bf95c <_Z18acquireWire1Bufferv+0x30>)
   bf93a:	2020      	movs	r0, #32
   bf93c:	f000 f89a 	bl	bfa74 <_ZnajRKSt9nothrow_t>
	};
   bf940:	2520      	movs	r5, #32
   bf942:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bf944:	4905      	ldr	r1, [pc, #20]	; (bf95c <_Z18acquireWire1Bufferv+0x30>)
	};
   bf946:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bf948:	4628      	mov	r0, r5
   bf94a:	f000 f893 	bl	bfa74 <_ZnajRKSt9nothrow_t>
	};
   bf94e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bf952:	4620      	mov	r0, r4
   bf954:	bd38      	pop	{r3, r4, r5, pc}
   bf956:	bf00      	nop
   bf958:	00010018 	.word	0x00010018
   bf95c:	000c2520 	.word	0x000c2520

000bf960 <_Z19__fetch_global_Wirev>:
{
   bf960:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bf962:	4d0e      	ldr	r5, [pc, #56]	; (bf99c <_Z19__fetch_global_Wirev+0x3c>)
   bf964:	7829      	ldrb	r1, [r5, #0]
   bf966:	f3bf 8f5b 	dmb	ish
   bf96a:	f011 0401 	ands.w	r4, r1, #1
{
   bf96e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bf970:	d111      	bne.n	bf996 <_Z19__fetch_global_Wirev+0x36>
   bf972:	4628      	mov	r0, r5
   bf974:	f7f4 fba2 	bl	b40bc <__cxa_guard_acquire>
   bf978:	b168      	cbz	r0, bf996 <_Z19__fetch_global_Wirev+0x36>
   bf97a:	4668      	mov	r0, sp
   bf97c:	f7ff ffbc 	bl	bf8f8 <_Z17acquireWireBufferv>
   bf980:	466a      	mov	r2, sp
   bf982:	4621      	mov	r1, r4
   bf984:	4806      	ldr	r0, [pc, #24]	; (bf9a0 <_Z19__fetch_global_Wirev+0x40>)
   bf986:	f7fd fbb7 	bl	bd0f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bf98a:	4628      	mov	r0, r5
   bf98c:	f7f4 fb9b 	bl	b40c6 <__cxa_guard_release>
   bf990:	4804      	ldr	r0, [pc, #16]	; (bf9a4 <_Z19__fetch_global_Wirev+0x44>)
   bf992:	f000 fd55 	bl	c0440 <atexit>
	return wire;
}
   bf996:	4802      	ldr	r0, [pc, #8]	; (bf9a0 <_Z19__fetch_global_Wirev+0x40>)
   bf998:	b007      	add	sp, #28
   bf99a:	bd30      	pop	{r4, r5, pc}
   bf99c:	2003e714 	.word	0x2003e714
   bf9a0:	2003e71c 	.word	0x2003e71c
   bf9a4:	000bf8f5 	.word	0x000bf8f5

000bf9a8 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bf9a8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bf9aa:	4c0e      	ldr	r4, [pc, #56]	; (bf9e4 <_Z20__fetch_global_Wire1v+0x3c>)
   bf9ac:	7823      	ldrb	r3, [r4, #0]
   bf9ae:	f3bf 8f5b 	dmb	ish
   bf9b2:	07db      	lsls	r3, r3, #31
{
   bf9b4:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bf9b6:	d411      	bmi.n	bf9dc <_Z20__fetch_global_Wire1v+0x34>
   bf9b8:	4620      	mov	r0, r4
   bf9ba:	f7f4 fb7f 	bl	b40bc <__cxa_guard_acquire>
   bf9be:	b168      	cbz	r0, bf9dc <_Z20__fetch_global_Wire1v+0x34>
   bf9c0:	4668      	mov	r0, sp
   bf9c2:	f7ff ffb3 	bl	bf92c <_Z18acquireWire1Bufferv>
   bf9c6:	466a      	mov	r2, sp
   bf9c8:	2101      	movs	r1, #1
   bf9ca:	4807      	ldr	r0, [pc, #28]	; (bf9e8 <_Z20__fetch_global_Wire1v+0x40>)
   bf9cc:	f7fd fb94 	bl	bd0f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bf9d0:	4620      	mov	r0, r4
   bf9d2:	f7f4 fb78 	bl	b40c6 <__cxa_guard_release>
   bf9d6:	4805      	ldr	r0, [pc, #20]	; (bf9ec <_Z20__fetch_global_Wire1v+0x44>)
   bf9d8:	f000 fd32 	bl	c0440 <atexit>
	return wire;
}
   bf9dc:	4802      	ldr	r0, [pc, #8]	; (bf9e8 <_Z20__fetch_global_Wire1v+0x40>)
   bf9de:	b006      	add	sp, #24
   bf9e0:	bd10      	pop	{r4, pc}
   bf9e2:	bf00      	nop
   bf9e4:	2003e718 	.word	0x2003e718
   bf9e8:	2003e730 	.word	0x2003e730
   bf9ec:	000bf8f7 	.word	0x000bf8f7

000bf9f0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bf9f0:	4770      	bx	lr
	...

000bf9f4 <_Z20acquireSerial1Bufferv>:
{
   bf9f4:	b538      	push	{r3, r4, r5, lr}
   bf9f6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bf9f8:	2514      	movs	r5, #20
   bf9fa:	462a      	mov	r2, r5
   bf9fc:	2100      	movs	r1, #0
   bf9fe:	f000 fd73 	bl	c04e8 <memset>
   bfa02:	8025      	strh	r5, [r4, #0]
   bfa04:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bfa06:	4907      	ldr	r1, [pc, #28]	; (bfa24 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bfa08:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bfa0a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bfa0c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bfa0e:	f000 f831 	bl	bfa74 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bfa12:	4904      	ldr	r1, [pc, #16]	; (bfa24 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bfa14:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bfa16:	4628      	mov	r0, r5
   bfa18:	f000 f82c 	bl	bfa74 <_ZnajRKSt9nothrow_t>
    };
   bfa1c:	60e0      	str	r0, [r4, #12]
}
   bfa1e:	4620      	mov	r0, r4
   bfa20:	bd38      	pop	{r3, r4, r5, pc}
   bfa22:	bf00      	nop
   bfa24:	000c2520 	.word	0x000c2520

000bfa28 <_Z22__fetch_global_Serial1v>:
{
   bfa28:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bfa2a:	4d0e      	ldr	r5, [pc, #56]	; (bfa64 <_Z22__fetch_global_Serial1v+0x3c>)
   bfa2c:	7829      	ldrb	r1, [r5, #0]
   bfa2e:	f3bf 8f5b 	dmb	ish
   bfa32:	f011 0401 	ands.w	r4, r1, #1
{
   bfa36:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bfa38:	d111      	bne.n	bfa5e <_Z22__fetch_global_Serial1v+0x36>
   bfa3a:	4628      	mov	r0, r5
   bfa3c:	f7f4 fb3e 	bl	b40bc <__cxa_guard_acquire>
   bfa40:	b168      	cbz	r0, bfa5e <_Z22__fetch_global_Serial1v+0x36>
   bfa42:	a801      	add	r0, sp, #4
   bfa44:	f7ff ffd6 	bl	bf9f4 <_Z20acquireSerial1Bufferv>
   bfa48:	aa01      	add	r2, sp, #4
   bfa4a:	4621      	mov	r1, r4
   bfa4c:	4806      	ldr	r0, [pc, #24]	; (bfa68 <_Z22__fetch_global_Serial1v+0x40>)
   bfa4e:	f7ff fd63 	bl	bf518 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bfa52:	4628      	mov	r0, r5
   bfa54:	f7f4 fb37 	bl	b40c6 <__cxa_guard_release>
   bfa58:	4804      	ldr	r0, [pc, #16]	; (bfa6c <_Z22__fetch_global_Serial1v+0x44>)
   bfa5a:	f000 fcf1 	bl	c0440 <atexit>
    return serial1;
}
   bfa5e:	4802      	ldr	r0, [pc, #8]	; (bfa68 <_Z22__fetch_global_Serial1v+0x40>)
   bfa60:	b007      	add	sp, #28
   bfa62:	bd30      	pop	{r4, r5, pc}
   bfa64:	2003e744 	.word	0x2003e744
   bfa68:	2003e748 	.word	0x2003e748
   bfa6c:	000bf9f1 	.word	0x000bf9f1

000bfa70 <_ZnwjRKSt9nothrow_t>:
   bfa70:	f7f4 bb11 	b.w	b4096 <_Znwj>

000bfa74 <_ZnajRKSt9nothrow_t>:
   bfa74:	f7f4 bb11 	b.w	b409a <_Znaj>

000bfa78 <_ZSt17__throw_bad_allocv>:
   bfa78:	b508      	push	{r3, lr}
   bfa7a:	f7fc fdf7 	bl	bc66c <abort>

000bfa7e <_ZSt20__throw_length_errorPKc>:
   bfa7e:	b508      	push	{r3, lr}
   bfa80:	f7fc fdf4 	bl	bc66c <abort>

000bfa84 <_ZSt25__throw_bad_function_callv>:
   bfa84:	b508      	push	{r3, lr}
   bfa86:	f7fc fdf1 	bl	bc66c <abort>
	...

000bfa8c <__aeabi_drsub>:
   bfa8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bfa90:	e002      	b.n	bfa98 <__adddf3>
   bfa92:	bf00      	nop

000bfa94 <__aeabi_dsub>:
   bfa94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bfa98 <__adddf3>:
   bfa98:	b530      	push	{r4, r5, lr}
   bfa9a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bfa9e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bfaa2:	ea94 0f05 	teq	r4, r5
   bfaa6:	bf08      	it	eq
   bfaa8:	ea90 0f02 	teqeq	r0, r2
   bfaac:	bf1f      	itttt	ne
   bfaae:	ea54 0c00 	orrsne.w	ip, r4, r0
   bfab2:	ea55 0c02 	orrsne.w	ip, r5, r2
   bfab6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bfaba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bfabe:	f000 80e2 	beq.w	bfc86 <__adddf3+0x1ee>
   bfac2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bfac6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bfaca:	bfb8      	it	lt
   bfacc:	426d      	neglt	r5, r5
   bface:	dd0c      	ble.n	bfaea <__adddf3+0x52>
   bfad0:	442c      	add	r4, r5
   bfad2:	ea80 0202 	eor.w	r2, r0, r2
   bfad6:	ea81 0303 	eor.w	r3, r1, r3
   bfada:	ea82 0000 	eor.w	r0, r2, r0
   bfade:	ea83 0101 	eor.w	r1, r3, r1
   bfae2:	ea80 0202 	eor.w	r2, r0, r2
   bfae6:	ea81 0303 	eor.w	r3, r1, r3
   bfaea:	2d36      	cmp	r5, #54	; 0x36
   bfaec:	bf88      	it	hi
   bfaee:	bd30      	pophi	{r4, r5, pc}
   bfaf0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bfaf4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bfaf8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bfafc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bfb00:	d002      	beq.n	bfb08 <__adddf3+0x70>
   bfb02:	4240      	negs	r0, r0
   bfb04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bfb08:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bfb0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bfb10:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bfb14:	d002      	beq.n	bfb1c <__adddf3+0x84>
   bfb16:	4252      	negs	r2, r2
   bfb18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bfb1c:	ea94 0f05 	teq	r4, r5
   bfb20:	f000 80a7 	beq.w	bfc72 <__adddf3+0x1da>
   bfb24:	f1a4 0401 	sub.w	r4, r4, #1
   bfb28:	f1d5 0e20 	rsbs	lr, r5, #32
   bfb2c:	db0d      	blt.n	bfb4a <__adddf3+0xb2>
   bfb2e:	fa02 fc0e 	lsl.w	ip, r2, lr
   bfb32:	fa22 f205 	lsr.w	r2, r2, r5
   bfb36:	1880      	adds	r0, r0, r2
   bfb38:	f141 0100 	adc.w	r1, r1, #0
   bfb3c:	fa03 f20e 	lsl.w	r2, r3, lr
   bfb40:	1880      	adds	r0, r0, r2
   bfb42:	fa43 f305 	asr.w	r3, r3, r5
   bfb46:	4159      	adcs	r1, r3
   bfb48:	e00e      	b.n	bfb68 <__adddf3+0xd0>
   bfb4a:	f1a5 0520 	sub.w	r5, r5, #32
   bfb4e:	f10e 0e20 	add.w	lr, lr, #32
   bfb52:	2a01      	cmp	r2, #1
   bfb54:	fa03 fc0e 	lsl.w	ip, r3, lr
   bfb58:	bf28      	it	cs
   bfb5a:	f04c 0c02 	orrcs.w	ip, ip, #2
   bfb5e:	fa43 f305 	asr.w	r3, r3, r5
   bfb62:	18c0      	adds	r0, r0, r3
   bfb64:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bfb68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bfb6c:	d507      	bpl.n	bfb7e <__adddf3+0xe6>
   bfb6e:	f04f 0e00 	mov.w	lr, #0
   bfb72:	f1dc 0c00 	rsbs	ip, ip, #0
   bfb76:	eb7e 0000 	sbcs.w	r0, lr, r0
   bfb7a:	eb6e 0101 	sbc.w	r1, lr, r1
   bfb7e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bfb82:	d31b      	bcc.n	bfbbc <__adddf3+0x124>
   bfb84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bfb88:	d30c      	bcc.n	bfba4 <__adddf3+0x10c>
   bfb8a:	0849      	lsrs	r1, r1, #1
   bfb8c:	ea5f 0030 	movs.w	r0, r0, rrx
   bfb90:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bfb94:	f104 0401 	add.w	r4, r4, #1
   bfb98:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bfb9c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bfba0:	f080 809a 	bcs.w	bfcd8 <__adddf3+0x240>
   bfba4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bfba8:	bf08      	it	eq
   bfbaa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bfbae:	f150 0000 	adcs.w	r0, r0, #0
   bfbb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bfbb6:	ea41 0105 	orr.w	r1, r1, r5
   bfbba:	bd30      	pop	{r4, r5, pc}
   bfbbc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bfbc0:	4140      	adcs	r0, r0
   bfbc2:	eb41 0101 	adc.w	r1, r1, r1
   bfbc6:	3c01      	subs	r4, #1
   bfbc8:	bf28      	it	cs
   bfbca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bfbce:	d2e9      	bcs.n	bfba4 <__adddf3+0x10c>
   bfbd0:	f091 0f00 	teq	r1, #0
   bfbd4:	bf04      	itt	eq
   bfbd6:	4601      	moveq	r1, r0
   bfbd8:	2000      	moveq	r0, #0
   bfbda:	fab1 f381 	clz	r3, r1
   bfbde:	bf08      	it	eq
   bfbe0:	3320      	addeq	r3, #32
   bfbe2:	f1a3 030b 	sub.w	r3, r3, #11
   bfbe6:	f1b3 0220 	subs.w	r2, r3, #32
   bfbea:	da0c      	bge.n	bfc06 <__adddf3+0x16e>
   bfbec:	320c      	adds	r2, #12
   bfbee:	dd08      	ble.n	bfc02 <__adddf3+0x16a>
   bfbf0:	f102 0c14 	add.w	ip, r2, #20
   bfbf4:	f1c2 020c 	rsb	r2, r2, #12
   bfbf8:	fa01 f00c 	lsl.w	r0, r1, ip
   bfbfc:	fa21 f102 	lsr.w	r1, r1, r2
   bfc00:	e00c      	b.n	bfc1c <__adddf3+0x184>
   bfc02:	f102 0214 	add.w	r2, r2, #20
   bfc06:	bfd8      	it	le
   bfc08:	f1c2 0c20 	rsble	ip, r2, #32
   bfc0c:	fa01 f102 	lsl.w	r1, r1, r2
   bfc10:	fa20 fc0c 	lsr.w	ip, r0, ip
   bfc14:	bfdc      	itt	le
   bfc16:	ea41 010c 	orrle.w	r1, r1, ip
   bfc1a:	4090      	lslle	r0, r2
   bfc1c:	1ae4      	subs	r4, r4, r3
   bfc1e:	bfa2      	ittt	ge
   bfc20:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bfc24:	4329      	orrge	r1, r5
   bfc26:	bd30      	popge	{r4, r5, pc}
   bfc28:	ea6f 0404 	mvn.w	r4, r4
   bfc2c:	3c1f      	subs	r4, #31
   bfc2e:	da1c      	bge.n	bfc6a <__adddf3+0x1d2>
   bfc30:	340c      	adds	r4, #12
   bfc32:	dc0e      	bgt.n	bfc52 <__adddf3+0x1ba>
   bfc34:	f104 0414 	add.w	r4, r4, #20
   bfc38:	f1c4 0220 	rsb	r2, r4, #32
   bfc3c:	fa20 f004 	lsr.w	r0, r0, r4
   bfc40:	fa01 f302 	lsl.w	r3, r1, r2
   bfc44:	ea40 0003 	orr.w	r0, r0, r3
   bfc48:	fa21 f304 	lsr.w	r3, r1, r4
   bfc4c:	ea45 0103 	orr.w	r1, r5, r3
   bfc50:	bd30      	pop	{r4, r5, pc}
   bfc52:	f1c4 040c 	rsb	r4, r4, #12
   bfc56:	f1c4 0220 	rsb	r2, r4, #32
   bfc5a:	fa20 f002 	lsr.w	r0, r0, r2
   bfc5e:	fa01 f304 	lsl.w	r3, r1, r4
   bfc62:	ea40 0003 	orr.w	r0, r0, r3
   bfc66:	4629      	mov	r1, r5
   bfc68:	bd30      	pop	{r4, r5, pc}
   bfc6a:	fa21 f004 	lsr.w	r0, r1, r4
   bfc6e:	4629      	mov	r1, r5
   bfc70:	bd30      	pop	{r4, r5, pc}
   bfc72:	f094 0f00 	teq	r4, #0
   bfc76:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bfc7a:	bf06      	itte	eq
   bfc7c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bfc80:	3401      	addeq	r4, #1
   bfc82:	3d01      	subne	r5, #1
   bfc84:	e74e      	b.n	bfb24 <__adddf3+0x8c>
   bfc86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bfc8a:	bf18      	it	ne
   bfc8c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bfc90:	d029      	beq.n	bfce6 <__adddf3+0x24e>
   bfc92:	ea94 0f05 	teq	r4, r5
   bfc96:	bf08      	it	eq
   bfc98:	ea90 0f02 	teqeq	r0, r2
   bfc9c:	d005      	beq.n	bfcaa <__adddf3+0x212>
   bfc9e:	ea54 0c00 	orrs.w	ip, r4, r0
   bfca2:	bf04      	itt	eq
   bfca4:	4619      	moveq	r1, r3
   bfca6:	4610      	moveq	r0, r2
   bfca8:	bd30      	pop	{r4, r5, pc}
   bfcaa:	ea91 0f03 	teq	r1, r3
   bfcae:	bf1e      	ittt	ne
   bfcb0:	2100      	movne	r1, #0
   bfcb2:	2000      	movne	r0, #0
   bfcb4:	bd30      	popne	{r4, r5, pc}
   bfcb6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bfcba:	d105      	bne.n	bfcc8 <__adddf3+0x230>
   bfcbc:	0040      	lsls	r0, r0, #1
   bfcbe:	4149      	adcs	r1, r1
   bfcc0:	bf28      	it	cs
   bfcc2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bfcc6:	bd30      	pop	{r4, r5, pc}
   bfcc8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bfccc:	bf3c      	itt	cc
   bfcce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bfcd2:	bd30      	popcc	{r4, r5, pc}
   bfcd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bfcd8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bfcdc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bfce0:	f04f 0000 	mov.w	r0, #0
   bfce4:	bd30      	pop	{r4, r5, pc}
   bfce6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bfcea:	bf1a      	itte	ne
   bfcec:	4619      	movne	r1, r3
   bfcee:	4610      	movne	r0, r2
   bfcf0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bfcf4:	bf1c      	itt	ne
   bfcf6:	460b      	movne	r3, r1
   bfcf8:	4602      	movne	r2, r0
   bfcfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bfcfe:	bf06      	itte	eq
   bfd00:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bfd04:	ea91 0f03 	teqeq	r1, r3
   bfd08:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bfd0c:	bd30      	pop	{r4, r5, pc}
   bfd0e:	bf00      	nop

000bfd10 <__aeabi_ui2d>:
   bfd10:	f090 0f00 	teq	r0, #0
   bfd14:	bf04      	itt	eq
   bfd16:	2100      	moveq	r1, #0
   bfd18:	4770      	bxeq	lr
   bfd1a:	b530      	push	{r4, r5, lr}
   bfd1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bfd20:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bfd24:	f04f 0500 	mov.w	r5, #0
   bfd28:	f04f 0100 	mov.w	r1, #0
   bfd2c:	e750      	b.n	bfbd0 <__adddf3+0x138>
   bfd2e:	bf00      	nop

000bfd30 <__aeabi_i2d>:
   bfd30:	f090 0f00 	teq	r0, #0
   bfd34:	bf04      	itt	eq
   bfd36:	2100      	moveq	r1, #0
   bfd38:	4770      	bxeq	lr
   bfd3a:	b530      	push	{r4, r5, lr}
   bfd3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bfd40:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bfd44:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bfd48:	bf48      	it	mi
   bfd4a:	4240      	negmi	r0, r0
   bfd4c:	f04f 0100 	mov.w	r1, #0
   bfd50:	e73e      	b.n	bfbd0 <__adddf3+0x138>
   bfd52:	bf00      	nop

000bfd54 <__aeabi_f2d>:
   bfd54:	0042      	lsls	r2, r0, #1
   bfd56:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bfd5a:	ea4f 0131 	mov.w	r1, r1, rrx
   bfd5e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bfd62:	bf1f      	itttt	ne
   bfd64:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bfd68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bfd6c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bfd70:	4770      	bxne	lr
   bfd72:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bfd76:	bf08      	it	eq
   bfd78:	4770      	bxeq	lr
   bfd7a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bfd7e:	bf04      	itt	eq
   bfd80:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bfd84:	4770      	bxeq	lr
   bfd86:	b530      	push	{r4, r5, lr}
   bfd88:	f44f 7460 	mov.w	r4, #896	; 0x380
   bfd8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bfd90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bfd94:	e71c      	b.n	bfbd0 <__adddf3+0x138>
   bfd96:	bf00      	nop

000bfd98 <__aeabi_ul2d>:
   bfd98:	ea50 0201 	orrs.w	r2, r0, r1
   bfd9c:	bf08      	it	eq
   bfd9e:	4770      	bxeq	lr
   bfda0:	b530      	push	{r4, r5, lr}
   bfda2:	f04f 0500 	mov.w	r5, #0
   bfda6:	e00a      	b.n	bfdbe <__aeabi_l2d+0x16>

000bfda8 <__aeabi_l2d>:
   bfda8:	ea50 0201 	orrs.w	r2, r0, r1
   bfdac:	bf08      	it	eq
   bfdae:	4770      	bxeq	lr
   bfdb0:	b530      	push	{r4, r5, lr}
   bfdb2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bfdb6:	d502      	bpl.n	bfdbe <__aeabi_l2d+0x16>
   bfdb8:	4240      	negs	r0, r0
   bfdba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bfdbe:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bfdc2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bfdc6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bfdca:	f43f aed8 	beq.w	bfb7e <__adddf3+0xe6>
   bfdce:	f04f 0203 	mov.w	r2, #3
   bfdd2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bfdd6:	bf18      	it	ne
   bfdd8:	3203      	addne	r2, #3
   bfdda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bfdde:	bf18      	it	ne
   bfde0:	3203      	addne	r2, #3
   bfde2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bfde6:	f1c2 0320 	rsb	r3, r2, #32
   bfdea:	fa00 fc03 	lsl.w	ip, r0, r3
   bfdee:	fa20 f002 	lsr.w	r0, r0, r2
   bfdf2:	fa01 fe03 	lsl.w	lr, r1, r3
   bfdf6:	ea40 000e 	orr.w	r0, r0, lr
   bfdfa:	fa21 f102 	lsr.w	r1, r1, r2
   bfdfe:	4414      	add	r4, r2
   bfe00:	e6bd      	b.n	bfb7e <__adddf3+0xe6>
   bfe02:	bf00      	nop

000bfe04 <__aeabi_dmul>:
   bfe04:	b570      	push	{r4, r5, r6, lr}
   bfe06:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bfe0a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bfe0e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bfe12:	bf1d      	ittte	ne
   bfe14:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bfe18:	ea94 0f0c 	teqne	r4, ip
   bfe1c:	ea95 0f0c 	teqne	r5, ip
   bfe20:	f000 f8de 	bleq	bffe0 <__aeabi_dmul+0x1dc>
   bfe24:	442c      	add	r4, r5
   bfe26:	ea81 0603 	eor.w	r6, r1, r3
   bfe2a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bfe2e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bfe32:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bfe36:	bf18      	it	ne
   bfe38:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bfe3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bfe40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bfe44:	d038      	beq.n	bfeb8 <__aeabi_dmul+0xb4>
   bfe46:	fba0 ce02 	umull	ip, lr, r0, r2
   bfe4a:	f04f 0500 	mov.w	r5, #0
   bfe4e:	fbe1 e502 	umlal	lr, r5, r1, r2
   bfe52:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bfe56:	fbe0 e503 	umlal	lr, r5, r0, r3
   bfe5a:	f04f 0600 	mov.w	r6, #0
   bfe5e:	fbe1 5603 	umlal	r5, r6, r1, r3
   bfe62:	f09c 0f00 	teq	ip, #0
   bfe66:	bf18      	it	ne
   bfe68:	f04e 0e01 	orrne.w	lr, lr, #1
   bfe6c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bfe70:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bfe74:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bfe78:	d204      	bcs.n	bfe84 <__aeabi_dmul+0x80>
   bfe7a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bfe7e:	416d      	adcs	r5, r5
   bfe80:	eb46 0606 	adc.w	r6, r6, r6
   bfe84:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bfe88:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bfe8c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bfe90:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bfe94:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bfe98:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bfe9c:	bf88      	it	hi
   bfe9e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bfea2:	d81e      	bhi.n	bfee2 <__aeabi_dmul+0xde>
   bfea4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bfea8:	bf08      	it	eq
   bfeaa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bfeae:	f150 0000 	adcs.w	r0, r0, #0
   bfeb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bfeb6:	bd70      	pop	{r4, r5, r6, pc}
   bfeb8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bfebc:	ea46 0101 	orr.w	r1, r6, r1
   bfec0:	ea40 0002 	orr.w	r0, r0, r2
   bfec4:	ea81 0103 	eor.w	r1, r1, r3
   bfec8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bfecc:	bfc2      	ittt	gt
   bfece:	ebd4 050c 	rsbsgt	r5, r4, ip
   bfed2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bfed6:	bd70      	popgt	{r4, r5, r6, pc}
   bfed8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bfedc:	f04f 0e00 	mov.w	lr, #0
   bfee0:	3c01      	subs	r4, #1
   bfee2:	f300 80ab 	bgt.w	c003c <__aeabi_dmul+0x238>
   bfee6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bfeea:	bfde      	ittt	le
   bfeec:	2000      	movle	r0, #0
   bfeee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bfef2:	bd70      	pople	{r4, r5, r6, pc}
   bfef4:	f1c4 0400 	rsb	r4, r4, #0
   bfef8:	3c20      	subs	r4, #32
   bfefa:	da35      	bge.n	bff68 <__aeabi_dmul+0x164>
   bfefc:	340c      	adds	r4, #12
   bfefe:	dc1b      	bgt.n	bff38 <__aeabi_dmul+0x134>
   bff00:	f104 0414 	add.w	r4, r4, #20
   bff04:	f1c4 0520 	rsb	r5, r4, #32
   bff08:	fa00 f305 	lsl.w	r3, r0, r5
   bff0c:	fa20 f004 	lsr.w	r0, r0, r4
   bff10:	fa01 f205 	lsl.w	r2, r1, r5
   bff14:	ea40 0002 	orr.w	r0, r0, r2
   bff18:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bff1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bff20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bff24:	fa21 f604 	lsr.w	r6, r1, r4
   bff28:	eb42 0106 	adc.w	r1, r2, r6
   bff2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bff30:	bf08      	it	eq
   bff32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bff36:	bd70      	pop	{r4, r5, r6, pc}
   bff38:	f1c4 040c 	rsb	r4, r4, #12
   bff3c:	f1c4 0520 	rsb	r5, r4, #32
   bff40:	fa00 f304 	lsl.w	r3, r0, r4
   bff44:	fa20 f005 	lsr.w	r0, r0, r5
   bff48:	fa01 f204 	lsl.w	r2, r1, r4
   bff4c:	ea40 0002 	orr.w	r0, r0, r2
   bff50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bff54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bff58:	f141 0100 	adc.w	r1, r1, #0
   bff5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bff60:	bf08      	it	eq
   bff62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bff66:	bd70      	pop	{r4, r5, r6, pc}
   bff68:	f1c4 0520 	rsb	r5, r4, #32
   bff6c:	fa00 f205 	lsl.w	r2, r0, r5
   bff70:	ea4e 0e02 	orr.w	lr, lr, r2
   bff74:	fa20 f304 	lsr.w	r3, r0, r4
   bff78:	fa01 f205 	lsl.w	r2, r1, r5
   bff7c:	ea43 0302 	orr.w	r3, r3, r2
   bff80:	fa21 f004 	lsr.w	r0, r1, r4
   bff84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bff88:	fa21 f204 	lsr.w	r2, r1, r4
   bff8c:	ea20 0002 	bic.w	r0, r0, r2
   bff90:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bff94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bff98:	bf08      	it	eq
   bff9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bff9e:	bd70      	pop	{r4, r5, r6, pc}
   bffa0:	f094 0f00 	teq	r4, #0
   bffa4:	d10f      	bne.n	bffc6 <__aeabi_dmul+0x1c2>
   bffa6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bffaa:	0040      	lsls	r0, r0, #1
   bffac:	eb41 0101 	adc.w	r1, r1, r1
   bffb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bffb4:	bf08      	it	eq
   bffb6:	3c01      	subeq	r4, #1
   bffb8:	d0f7      	beq.n	bffaa <__aeabi_dmul+0x1a6>
   bffba:	ea41 0106 	orr.w	r1, r1, r6
   bffbe:	f095 0f00 	teq	r5, #0
   bffc2:	bf18      	it	ne
   bffc4:	4770      	bxne	lr
   bffc6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bffca:	0052      	lsls	r2, r2, #1
   bffcc:	eb43 0303 	adc.w	r3, r3, r3
   bffd0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bffd4:	bf08      	it	eq
   bffd6:	3d01      	subeq	r5, #1
   bffd8:	d0f7      	beq.n	bffca <__aeabi_dmul+0x1c6>
   bffda:	ea43 0306 	orr.w	r3, r3, r6
   bffde:	4770      	bx	lr
   bffe0:	ea94 0f0c 	teq	r4, ip
   bffe4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bffe8:	bf18      	it	ne
   bffea:	ea95 0f0c 	teqne	r5, ip
   bffee:	d00c      	beq.n	c000a <__aeabi_dmul+0x206>
   bfff0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bfff4:	bf18      	it	ne
   bfff6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bfffa:	d1d1      	bne.n	bffa0 <__aeabi_dmul+0x19c>
   bfffc:	ea81 0103 	eor.w	r1, r1, r3
   c0000:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0004:	f04f 0000 	mov.w	r0, #0
   c0008:	bd70      	pop	{r4, r5, r6, pc}
   c000a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c000e:	bf06      	itte	eq
   c0010:	4610      	moveq	r0, r2
   c0012:	4619      	moveq	r1, r3
   c0014:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0018:	d019      	beq.n	c004e <__aeabi_dmul+0x24a>
   c001a:	ea94 0f0c 	teq	r4, ip
   c001e:	d102      	bne.n	c0026 <__aeabi_dmul+0x222>
   c0020:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c0024:	d113      	bne.n	c004e <__aeabi_dmul+0x24a>
   c0026:	ea95 0f0c 	teq	r5, ip
   c002a:	d105      	bne.n	c0038 <__aeabi_dmul+0x234>
   c002c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c0030:	bf1c      	itt	ne
   c0032:	4610      	movne	r0, r2
   c0034:	4619      	movne	r1, r3
   c0036:	d10a      	bne.n	c004e <__aeabi_dmul+0x24a>
   c0038:	ea81 0103 	eor.w	r1, r1, r3
   c003c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0040:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c0044:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c0048:	f04f 0000 	mov.w	r0, #0
   c004c:	bd70      	pop	{r4, r5, r6, pc}
   c004e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c0052:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c0056:	bd70      	pop	{r4, r5, r6, pc}

000c0058 <__aeabi_ddiv>:
   c0058:	b570      	push	{r4, r5, r6, lr}
   c005a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c005e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c0062:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c0066:	bf1d      	ittte	ne
   c0068:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c006c:	ea94 0f0c 	teqne	r4, ip
   c0070:	ea95 0f0c 	teqne	r5, ip
   c0074:	f000 f8a7 	bleq	c01c6 <__aeabi_ddiv+0x16e>
   c0078:	eba4 0405 	sub.w	r4, r4, r5
   c007c:	ea81 0e03 	eor.w	lr, r1, r3
   c0080:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c0084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c0088:	f000 8088 	beq.w	c019c <__aeabi_ddiv+0x144>
   c008c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c0090:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c0094:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c0098:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c009c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c00a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c00a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c00a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c00ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c00b0:	429d      	cmp	r5, r3
   c00b2:	bf08      	it	eq
   c00b4:	4296      	cmpeq	r6, r2
   c00b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c00ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c00be:	d202      	bcs.n	c00c6 <__aeabi_ddiv+0x6e>
   c00c0:	085b      	lsrs	r3, r3, #1
   c00c2:	ea4f 0232 	mov.w	r2, r2, rrx
   c00c6:	1ab6      	subs	r6, r6, r2
   c00c8:	eb65 0503 	sbc.w	r5, r5, r3
   c00cc:	085b      	lsrs	r3, r3, #1
   c00ce:	ea4f 0232 	mov.w	r2, r2, rrx
   c00d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c00d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c00da:	ebb6 0e02 	subs.w	lr, r6, r2
   c00de:	eb75 0e03 	sbcs.w	lr, r5, r3
   c00e2:	bf22      	ittt	cs
   c00e4:	1ab6      	subcs	r6, r6, r2
   c00e6:	4675      	movcs	r5, lr
   c00e8:	ea40 000c 	orrcs.w	r0, r0, ip
   c00ec:	085b      	lsrs	r3, r3, #1
   c00ee:	ea4f 0232 	mov.w	r2, r2, rrx
   c00f2:	ebb6 0e02 	subs.w	lr, r6, r2
   c00f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   c00fa:	bf22      	ittt	cs
   c00fc:	1ab6      	subcs	r6, r6, r2
   c00fe:	4675      	movcs	r5, lr
   c0100:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c0104:	085b      	lsrs	r3, r3, #1
   c0106:	ea4f 0232 	mov.w	r2, r2, rrx
   c010a:	ebb6 0e02 	subs.w	lr, r6, r2
   c010e:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0112:	bf22      	ittt	cs
   c0114:	1ab6      	subcs	r6, r6, r2
   c0116:	4675      	movcs	r5, lr
   c0118:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c011c:	085b      	lsrs	r3, r3, #1
   c011e:	ea4f 0232 	mov.w	r2, r2, rrx
   c0122:	ebb6 0e02 	subs.w	lr, r6, r2
   c0126:	eb75 0e03 	sbcs.w	lr, r5, r3
   c012a:	bf22      	ittt	cs
   c012c:	1ab6      	subcs	r6, r6, r2
   c012e:	4675      	movcs	r5, lr
   c0130:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c0134:	ea55 0e06 	orrs.w	lr, r5, r6
   c0138:	d018      	beq.n	c016c <__aeabi_ddiv+0x114>
   c013a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c013e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c0142:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c0146:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c014a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c014e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c0152:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c0156:	d1c0      	bne.n	c00da <__aeabi_ddiv+0x82>
   c0158:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c015c:	d10b      	bne.n	c0176 <__aeabi_ddiv+0x11e>
   c015e:	ea41 0100 	orr.w	r1, r1, r0
   c0162:	f04f 0000 	mov.w	r0, #0
   c0166:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c016a:	e7b6      	b.n	c00da <__aeabi_ddiv+0x82>
   c016c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c0170:	bf04      	itt	eq
   c0172:	4301      	orreq	r1, r0
   c0174:	2000      	moveq	r0, #0
   c0176:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c017a:	bf88      	it	hi
   c017c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c0180:	f63f aeaf 	bhi.w	bfee2 <__aeabi_dmul+0xde>
   c0184:	ebb5 0c03 	subs.w	ip, r5, r3
   c0188:	bf04      	itt	eq
   c018a:	ebb6 0c02 	subseq.w	ip, r6, r2
   c018e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c0192:	f150 0000 	adcs.w	r0, r0, #0
   c0196:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c019a:	bd70      	pop	{r4, r5, r6, pc}
   c019c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c01a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c01a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c01a8:	bfc2      	ittt	gt
   c01aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   c01ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c01b2:	bd70      	popgt	{r4, r5, r6, pc}
   c01b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c01b8:	f04f 0e00 	mov.w	lr, #0
   c01bc:	3c01      	subs	r4, #1
   c01be:	e690      	b.n	bfee2 <__aeabi_dmul+0xde>
   c01c0:	ea45 0e06 	orr.w	lr, r5, r6
   c01c4:	e68d      	b.n	bfee2 <__aeabi_dmul+0xde>
   c01c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c01ca:	ea94 0f0c 	teq	r4, ip
   c01ce:	bf08      	it	eq
   c01d0:	ea95 0f0c 	teqeq	r5, ip
   c01d4:	f43f af3b 	beq.w	c004e <__aeabi_dmul+0x24a>
   c01d8:	ea94 0f0c 	teq	r4, ip
   c01dc:	d10a      	bne.n	c01f4 <__aeabi_ddiv+0x19c>
   c01de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c01e2:	f47f af34 	bne.w	c004e <__aeabi_dmul+0x24a>
   c01e6:	ea95 0f0c 	teq	r5, ip
   c01ea:	f47f af25 	bne.w	c0038 <__aeabi_dmul+0x234>
   c01ee:	4610      	mov	r0, r2
   c01f0:	4619      	mov	r1, r3
   c01f2:	e72c      	b.n	c004e <__aeabi_dmul+0x24a>
   c01f4:	ea95 0f0c 	teq	r5, ip
   c01f8:	d106      	bne.n	c0208 <__aeabi_ddiv+0x1b0>
   c01fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c01fe:	f43f aefd 	beq.w	bfffc <__aeabi_dmul+0x1f8>
   c0202:	4610      	mov	r0, r2
   c0204:	4619      	mov	r1, r3
   c0206:	e722      	b.n	c004e <__aeabi_dmul+0x24a>
   c0208:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c020c:	bf18      	it	ne
   c020e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0212:	f47f aec5 	bne.w	bffa0 <__aeabi_dmul+0x19c>
   c0216:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c021a:	f47f af0d 	bne.w	c0038 <__aeabi_dmul+0x234>
   c021e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c0222:	f47f aeeb 	bne.w	bfffc <__aeabi_dmul+0x1f8>
   c0226:	e712      	b.n	c004e <__aeabi_dmul+0x24a>

000c0228 <__gedf2>:
   c0228:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c022c:	e006      	b.n	c023c <__cmpdf2+0x4>
   c022e:	bf00      	nop

000c0230 <__ledf2>:
   c0230:	f04f 0c01 	mov.w	ip, #1
   c0234:	e002      	b.n	c023c <__cmpdf2+0x4>
   c0236:	bf00      	nop

000c0238 <__cmpdf2>:
   c0238:	f04f 0c01 	mov.w	ip, #1
   c023c:	f84d cd04 	str.w	ip, [sp, #-4]!
   c0240:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c0244:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0248:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c024c:	bf18      	it	ne
   c024e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c0252:	d01b      	beq.n	c028c <__cmpdf2+0x54>
   c0254:	b001      	add	sp, #4
   c0256:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c025a:	bf0c      	ite	eq
   c025c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c0260:	ea91 0f03 	teqne	r1, r3
   c0264:	bf02      	ittt	eq
   c0266:	ea90 0f02 	teqeq	r0, r2
   c026a:	2000      	moveq	r0, #0
   c026c:	4770      	bxeq	lr
   c026e:	f110 0f00 	cmn.w	r0, #0
   c0272:	ea91 0f03 	teq	r1, r3
   c0276:	bf58      	it	pl
   c0278:	4299      	cmppl	r1, r3
   c027a:	bf08      	it	eq
   c027c:	4290      	cmpeq	r0, r2
   c027e:	bf2c      	ite	cs
   c0280:	17d8      	asrcs	r0, r3, #31
   c0282:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c0286:	f040 0001 	orr.w	r0, r0, #1
   c028a:	4770      	bx	lr
   c028c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c0290:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0294:	d102      	bne.n	c029c <__cmpdf2+0x64>
   c0296:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c029a:	d107      	bne.n	c02ac <__cmpdf2+0x74>
   c029c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c02a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c02a4:	d1d6      	bne.n	c0254 <__cmpdf2+0x1c>
   c02a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c02aa:	d0d3      	beq.n	c0254 <__cmpdf2+0x1c>
   c02ac:	f85d 0b04 	ldr.w	r0, [sp], #4
   c02b0:	4770      	bx	lr
   c02b2:	bf00      	nop

000c02b4 <__aeabi_cdrcmple>:
   c02b4:	4684      	mov	ip, r0
   c02b6:	4610      	mov	r0, r2
   c02b8:	4662      	mov	r2, ip
   c02ba:	468c      	mov	ip, r1
   c02bc:	4619      	mov	r1, r3
   c02be:	4663      	mov	r3, ip
   c02c0:	e000      	b.n	c02c4 <__aeabi_cdcmpeq>
   c02c2:	bf00      	nop

000c02c4 <__aeabi_cdcmpeq>:
   c02c4:	b501      	push	{r0, lr}
   c02c6:	f7ff ffb7 	bl	c0238 <__cmpdf2>
   c02ca:	2800      	cmp	r0, #0
   c02cc:	bf48      	it	mi
   c02ce:	f110 0f00 	cmnmi.w	r0, #0
   c02d2:	bd01      	pop	{r0, pc}

000c02d4 <__aeabi_dcmpeq>:
   c02d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   c02d8:	f7ff fff4 	bl	c02c4 <__aeabi_cdcmpeq>
   c02dc:	bf0c      	ite	eq
   c02de:	2001      	moveq	r0, #1
   c02e0:	2000      	movne	r0, #0
   c02e2:	f85d fb08 	ldr.w	pc, [sp], #8
   c02e6:	bf00      	nop

000c02e8 <__aeabi_dcmplt>:
   c02e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   c02ec:	f7ff ffea 	bl	c02c4 <__aeabi_cdcmpeq>
   c02f0:	bf34      	ite	cc
   c02f2:	2001      	movcc	r0, #1
   c02f4:	2000      	movcs	r0, #0
   c02f6:	f85d fb08 	ldr.w	pc, [sp], #8
   c02fa:	bf00      	nop

000c02fc <__aeabi_dcmple>:
   c02fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0300:	f7ff ffe0 	bl	c02c4 <__aeabi_cdcmpeq>
   c0304:	bf94      	ite	ls
   c0306:	2001      	movls	r0, #1
   c0308:	2000      	movhi	r0, #0
   c030a:	f85d fb08 	ldr.w	pc, [sp], #8
   c030e:	bf00      	nop

000c0310 <__aeabi_dcmpge>:
   c0310:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0314:	f7ff ffce 	bl	c02b4 <__aeabi_cdrcmple>
   c0318:	bf94      	ite	ls
   c031a:	2001      	movls	r0, #1
   c031c:	2000      	movhi	r0, #0
   c031e:	f85d fb08 	ldr.w	pc, [sp], #8
   c0322:	bf00      	nop

000c0324 <__aeabi_dcmpgt>:
   c0324:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0328:	f7ff ffc4 	bl	c02b4 <__aeabi_cdrcmple>
   c032c:	bf34      	ite	cc
   c032e:	2001      	movcc	r0, #1
   c0330:	2000      	movcs	r0, #0
   c0332:	f85d fb08 	ldr.w	pc, [sp], #8
   c0336:	bf00      	nop

000c0338 <__aeabi_dcmpun>:
   c0338:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c033c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0340:	d102      	bne.n	c0348 <__aeabi_dcmpun+0x10>
   c0342:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c0346:	d10a      	bne.n	c035e <__aeabi_dcmpun+0x26>
   c0348:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c034c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0350:	d102      	bne.n	c0358 <__aeabi_dcmpun+0x20>
   c0352:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c0356:	d102      	bne.n	c035e <__aeabi_dcmpun+0x26>
   c0358:	f04f 0000 	mov.w	r0, #0
   c035c:	4770      	bx	lr
   c035e:	f04f 0001 	mov.w	r0, #1
   c0362:	4770      	bx	lr

000c0364 <__aeabi_d2iz>:
   c0364:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c0368:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c036c:	d215      	bcs.n	c039a <__aeabi_d2iz+0x36>
   c036e:	d511      	bpl.n	c0394 <__aeabi_d2iz+0x30>
   c0370:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c0374:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c0378:	d912      	bls.n	c03a0 <__aeabi_d2iz+0x3c>
   c037a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c037e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c0382:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c0386:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c038a:	fa23 f002 	lsr.w	r0, r3, r2
   c038e:	bf18      	it	ne
   c0390:	4240      	negne	r0, r0
   c0392:	4770      	bx	lr
   c0394:	f04f 0000 	mov.w	r0, #0
   c0398:	4770      	bx	lr
   c039a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c039e:	d105      	bne.n	c03ac <__aeabi_d2iz+0x48>
   c03a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c03a4:	bf08      	it	eq
   c03a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c03aa:	4770      	bx	lr
   c03ac:	f04f 0000 	mov.w	r0, #0
   c03b0:	4770      	bx	lr
   c03b2:	bf00      	nop

000c03b4 <__aeabi_d2uiz>:
   c03b4:	004a      	lsls	r2, r1, #1
   c03b6:	d211      	bcs.n	c03dc <__aeabi_d2uiz+0x28>
   c03b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c03bc:	d211      	bcs.n	c03e2 <__aeabi_d2uiz+0x2e>
   c03be:	d50d      	bpl.n	c03dc <__aeabi_d2uiz+0x28>
   c03c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c03c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c03c8:	d40e      	bmi.n	c03e8 <__aeabi_d2uiz+0x34>
   c03ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c03ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c03d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c03d6:	fa23 f002 	lsr.w	r0, r3, r2
   c03da:	4770      	bx	lr
   c03dc:	f04f 0000 	mov.w	r0, #0
   c03e0:	4770      	bx	lr
   c03e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c03e6:	d102      	bne.n	c03ee <__aeabi_d2uiz+0x3a>
   c03e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c03ec:	4770      	bx	lr
   c03ee:	f04f 0000 	mov.w	r0, #0
   c03f2:	4770      	bx	lr

000c03f4 <asctime_r>:
   c03f4:	b510      	push	{r4, lr}
   c03f6:	460c      	mov	r4, r1
   c03f8:	6941      	ldr	r1, [r0, #20]
   c03fa:	6903      	ldr	r3, [r0, #16]
   c03fc:	6982      	ldr	r2, [r0, #24]
   c03fe:	b086      	sub	sp, #24
   c0400:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   c0404:	9104      	str	r1, [sp, #16]
   c0406:	6801      	ldr	r1, [r0, #0]
   c0408:	9103      	str	r1, [sp, #12]
   c040a:	6841      	ldr	r1, [r0, #4]
   c040c:	9102      	str	r1, [sp, #8]
   c040e:	6881      	ldr	r1, [r0, #8]
   c0410:	9101      	str	r1, [sp, #4]
   c0412:	68c1      	ldr	r1, [r0, #12]
   c0414:	9100      	str	r1, [sp, #0]
   c0416:	4907      	ldr	r1, [pc, #28]	; (c0434 <asctime_r+0x40>)
   c0418:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   c041c:	440b      	add	r3, r1
   c041e:	4906      	ldr	r1, [pc, #24]	; (c0438 <asctime_r+0x44>)
   c0420:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   c0424:	440a      	add	r2, r1
   c0426:	4620      	mov	r0, r4
   c0428:	4904      	ldr	r1, [pc, #16]	; (c043c <asctime_r+0x48>)
   c042a:	f7fc f8ff 	bl	bc62c <siprintf>
   c042e:	4620      	mov	r0, r4
   c0430:	b006      	add	sp, #24
   c0432:	bd10      	pop	{r4, pc}
   c0434:	000c2556 	.word	0x000c2556
   c0438:	000c2541 	.word	0x000c2541
   c043c:	000c2521 	.word	0x000c2521

000c0440 <atexit>:
   c0440:	2300      	movs	r3, #0
   c0442:	4601      	mov	r1, r0
   c0444:	461a      	mov	r2, r3
   c0446:	4618      	mov	r0, r3
   c0448:	f000 ba70 	b.w	c092c <__register_exitproc>

000c044c <gmtime>:
   c044c:	b538      	push	{r3, r4, r5, lr}
   c044e:	4b0b      	ldr	r3, [pc, #44]	; (c047c <gmtime+0x30>)
   c0450:	681d      	ldr	r5, [r3, #0]
   c0452:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   c0454:	4604      	mov	r4, r0
   c0456:	b953      	cbnz	r3, c046e <gmtime+0x22>
   c0458:	2024      	movs	r0, #36	; 0x24
   c045a:	f7fc f8cf 	bl	bc5fc <malloc>
   c045e:	4602      	mov	r2, r0
   c0460:	63e8      	str	r0, [r5, #60]	; 0x3c
   c0462:	b920      	cbnz	r0, c046e <gmtime+0x22>
   c0464:	4b06      	ldr	r3, [pc, #24]	; (c0480 <gmtime+0x34>)
   c0466:	4807      	ldr	r0, [pc, #28]	; (c0484 <gmtime+0x38>)
   c0468:	2139      	movs	r1, #57	; 0x39
   c046a:	f7fc f917 	bl	bc69c <__assert_func>
   c046e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   c0470:	4620      	mov	r0, r4
   c0472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c0476:	f7fc b931 	b.w	bc6dc <gmtime_r>
   c047a:	bf00      	nop
   c047c:	2003d774 	.word	0x2003d774
   c0480:	000c257a 	.word	0x000c257a
   c0484:	000c2591 	.word	0x000c2591

000c0488 <isprint>:
   c0488:	4b02      	ldr	r3, [pc, #8]	; (c0494 <isprint+0xc>)
   c048a:	4418      	add	r0, r3
   c048c:	7840      	ldrb	r0, [r0, #1]
   c048e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c0492:	4770      	bx	lr
   c0494:	000c2643 	.word	0x000c2643

000c0498 <memcpy>:
   c0498:	440a      	add	r2, r1
   c049a:	4291      	cmp	r1, r2
   c049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c04a0:	d100      	bne.n	c04a4 <memcpy+0xc>
   c04a2:	4770      	bx	lr
   c04a4:	b510      	push	{r4, lr}
   c04a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   c04aa:	f803 4f01 	strb.w	r4, [r3, #1]!
   c04ae:	4291      	cmp	r1, r2
   c04b0:	d1f9      	bne.n	c04a6 <memcpy+0xe>
   c04b2:	bd10      	pop	{r4, pc}

000c04b4 <memmove>:
   c04b4:	4288      	cmp	r0, r1
   c04b6:	b510      	push	{r4, lr}
   c04b8:	eb01 0402 	add.w	r4, r1, r2
   c04bc:	d902      	bls.n	c04c4 <memmove+0x10>
   c04be:	4284      	cmp	r4, r0
   c04c0:	4623      	mov	r3, r4
   c04c2:	d807      	bhi.n	c04d4 <memmove+0x20>
   c04c4:	1e43      	subs	r3, r0, #1
   c04c6:	42a1      	cmp	r1, r4
   c04c8:	d008      	beq.n	c04dc <memmove+0x28>
   c04ca:	f811 2b01 	ldrb.w	r2, [r1], #1
   c04ce:	f803 2f01 	strb.w	r2, [r3, #1]!
   c04d2:	e7f8      	b.n	c04c6 <memmove+0x12>
   c04d4:	4402      	add	r2, r0
   c04d6:	4601      	mov	r1, r0
   c04d8:	428a      	cmp	r2, r1
   c04da:	d100      	bne.n	c04de <memmove+0x2a>
   c04dc:	bd10      	pop	{r4, pc}
   c04de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c04e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c04e6:	e7f7      	b.n	c04d8 <memmove+0x24>

000c04e8 <memset>:
   c04e8:	4402      	add	r2, r0
   c04ea:	4603      	mov	r3, r0
   c04ec:	4293      	cmp	r3, r2
   c04ee:	d100      	bne.n	c04f2 <memset+0xa>
   c04f0:	4770      	bx	lr
   c04f2:	f803 1b01 	strb.w	r1, [r3], #1
   c04f6:	e7f9      	b.n	c04ec <memset+0x4>

000c04f8 <srand>:
   c04f8:	b538      	push	{r3, r4, r5, lr}
   c04fa:	4b10      	ldr	r3, [pc, #64]	; (c053c <srand+0x44>)
   c04fc:	681d      	ldr	r5, [r3, #0]
   c04fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c0500:	4604      	mov	r4, r0
   c0502:	b9b3      	cbnz	r3, c0532 <srand+0x3a>
   c0504:	2018      	movs	r0, #24
   c0506:	f7fc f879 	bl	bc5fc <malloc>
   c050a:	4602      	mov	r2, r0
   c050c:	63a8      	str	r0, [r5, #56]	; 0x38
   c050e:	b920      	cbnz	r0, c051a <srand+0x22>
   c0510:	4b0b      	ldr	r3, [pc, #44]	; (c0540 <srand+0x48>)
   c0512:	480c      	ldr	r0, [pc, #48]	; (c0544 <srand+0x4c>)
   c0514:	2142      	movs	r1, #66	; 0x42
   c0516:	f7fc f8c1 	bl	bc69c <__assert_func>
   c051a:	490b      	ldr	r1, [pc, #44]	; (c0548 <srand+0x50>)
   c051c:	4b0b      	ldr	r3, [pc, #44]	; (c054c <srand+0x54>)
   c051e:	e9c0 1300 	strd	r1, r3, [r0]
   c0522:	4b0b      	ldr	r3, [pc, #44]	; (c0550 <srand+0x58>)
   c0524:	6083      	str	r3, [r0, #8]
   c0526:	230b      	movs	r3, #11
   c0528:	8183      	strh	r3, [r0, #12]
   c052a:	2100      	movs	r1, #0
   c052c:	2001      	movs	r0, #1
   c052e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c0532:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c0534:	2200      	movs	r2, #0
   c0536:	611c      	str	r4, [r3, #16]
   c0538:	615a      	str	r2, [r3, #20]
   c053a:	bd38      	pop	{r3, r4, r5, pc}
   c053c:	2003d774 	.word	0x2003d774
   c0540:	000c257a 	.word	0x000c257a
   c0544:	000c25ea 	.word	0x000c25ea
   c0548:	abcd330e 	.word	0xabcd330e
   c054c:	e66d1234 	.word	0xe66d1234
   c0550:	0005deec 	.word	0x0005deec

000c0554 <rand>:
   c0554:	4b16      	ldr	r3, [pc, #88]	; (c05b0 <rand+0x5c>)
   c0556:	b510      	push	{r4, lr}
   c0558:	681c      	ldr	r4, [r3, #0]
   c055a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   c055c:	b9b3      	cbnz	r3, c058c <rand+0x38>
   c055e:	2018      	movs	r0, #24
   c0560:	f7fc f84c 	bl	bc5fc <malloc>
   c0564:	63a0      	str	r0, [r4, #56]	; 0x38
   c0566:	b928      	cbnz	r0, c0574 <rand+0x20>
   c0568:	4602      	mov	r2, r0
   c056a:	4b12      	ldr	r3, [pc, #72]	; (c05b4 <rand+0x60>)
   c056c:	4812      	ldr	r0, [pc, #72]	; (c05b8 <rand+0x64>)
   c056e:	214e      	movs	r1, #78	; 0x4e
   c0570:	f7fc f894 	bl	bc69c <__assert_func>
   c0574:	4a11      	ldr	r2, [pc, #68]	; (c05bc <rand+0x68>)
   c0576:	4b12      	ldr	r3, [pc, #72]	; (c05c0 <rand+0x6c>)
   c0578:	e9c0 2300 	strd	r2, r3, [r0]
   c057c:	4b11      	ldr	r3, [pc, #68]	; (c05c4 <rand+0x70>)
   c057e:	6083      	str	r3, [r0, #8]
   c0580:	230b      	movs	r3, #11
   c0582:	8183      	strh	r3, [r0, #12]
   c0584:	2201      	movs	r2, #1
   c0586:	2300      	movs	r3, #0
   c0588:	e9c0 2304 	strd	r2, r3, [r0, #16]
   c058c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   c058e:	4a0e      	ldr	r2, [pc, #56]	; (c05c8 <rand+0x74>)
   c0590:	6920      	ldr	r0, [r4, #16]
   c0592:	6963      	ldr	r3, [r4, #20]
   c0594:	490d      	ldr	r1, [pc, #52]	; (c05cc <rand+0x78>)
   c0596:	4342      	muls	r2, r0
   c0598:	fb01 2203 	mla	r2, r1, r3, r2
   c059c:	fba0 0101 	umull	r0, r1, r0, r1
   c05a0:	1c43      	adds	r3, r0, #1
   c05a2:	eb42 0001 	adc.w	r0, r2, r1
   c05a6:	e9c4 3004 	strd	r3, r0, [r4, #16]
   c05aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   c05ae:	bd10      	pop	{r4, pc}
   c05b0:	2003d774 	.word	0x2003d774
   c05b4:	000c257a 	.word	0x000c257a
   c05b8:	000c25ea 	.word	0x000c25ea
   c05bc:	abcd330e 	.word	0xabcd330e
   c05c0:	e66d1234 	.word	0xe66d1234
   c05c4:	0005deec 	.word	0x0005deec
   c05c8:	5851f42d 	.word	0x5851f42d
   c05cc:	4c957f2d 	.word	0x4c957f2d

000c05d0 <strchr>:
   c05d0:	b2c9      	uxtb	r1, r1
   c05d2:	4603      	mov	r3, r0
   c05d4:	f810 2b01 	ldrb.w	r2, [r0], #1
   c05d8:	b11a      	cbz	r2, c05e2 <strchr+0x12>
   c05da:	428a      	cmp	r2, r1
   c05dc:	d1f9      	bne.n	c05d2 <strchr+0x2>
   c05de:	4618      	mov	r0, r3
   c05e0:	4770      	bx	lr
   c05e2:	2900      	cmp	r1, #0
   c05e4:	bf18      	it	ne
   c05e6:	2300      	movne	r3, #0
   c05e8:	e7f9      	b.n	c05de <strchr+0xe>

000c05ea <strchrnul>:
   c05ea:	b510      	push	{r4, lr}
   c05ec:	4604      	mov	r4, r0
   c05ee:	f7ff ffef 	bl	c05d0 <strchr>
   c05f2:	b918      	cbnz	r0, c05fc <strchrnul+0x12>
   c05f4:	4620      	mov	r0, r4
   c05f6:	f000 f832 	bl	c065e <strlen>
   c05fa:	4420      	add	r0, r4
   c05fc:	bd10      	pop	{r4, pc}

000c05fe <strcmp>:
   c05fe:	f810 2b01 	ldrb.w	r2, [r0], #1
   c0602:	f811 3b01 	ldrb.w	r3, [r1], #1
   c0606:	2a01      	cmp	r2, #1
   c0608:	bf28      	it	cs
   c060a:	429a      	cmpcs	r2, r3
   c060c:	d0f7      	beq.n	c05fe <strcmp>
   c060e:	1ad0      	subs	r0, r2, r3
   c0610:	4770      	bx	lr

000c0612 <strcpy>:
   c0612:	4603      	mov	r3, r0
   c0614:	f811 2b01 	ldrb.w	r2, [r1], #1
   c0618:	f803 2b01 	strb.w	r2, [r3], #1
   c061c:	2a00      	cmp	r2, #0
   c061e:	d1f9      	bne.n	c0614 <strcpy+0x2>
   c0620:	4770      	bx	lr
	...

000c0624 <strdup>:
   c0624:	4b02      	ldr	r3, [pc, #8]	; (c0630 <strdup+0xc>)
   c0626:	4601      	mov	r1, r0
   c0628:	6818      	ldr	r0, [r3, #0]
   c062a:	f000 b803 	b.w	c0634 <_strdup_r>
   c062e:	bf00      	nop
   c0630:	2003d774 	.word	0x2003d774

000c0634 <_strdup_r>:
   c0634:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c0636:	4604      	mov	r4, r0
   c0638:	4608      	mov	r0, r1
   c063a:	460d      	mov	r5, r1
   c063c:	f000 f80f 	bl	c065e <strlen>
   c0640:	1c42      	adds	r2, r0, #1
   c0642:	4611      	mov	r1, r2
   c0644:	4620      	mov	r0, r4
   c0646:	9201      	str	r2, [sp, #4]
   c0648:	f7fc f818 	bl	bc67c <_malloc_r>
   c064c:	4604      	mov	r4, r0
   c064e:	b118      	cbz	r0, c0658 <_strdup_r+0x24>
   c0650:	9a01      	ldr	r2, [sp, #4]
   c0652:	4629      	mov	r1, r5
   c0654:	f7ff ff20 	bl	c0498 <memcpy>
   c0658:	4620      	mov	r0, r4
   c065a:	b003      	add	sp, #12
   c065c:	bd30      	pop	{r4, r5, pc}

000c065e <strlen>:
   c065e:	4603      	mov	r3, r0
   c0660:	f813 2b01 	ldrb.w	r2, [r3], #1
   c0664:	2a00      	cmp	r2, #0
   c0666:	d1fb      	bne.n	c0660 <strlen+0x2>
   c0668:	1a18      	subs	r0, r3, r0
   c066a:	3801      	subs	r0, #1
   c066c:	4770      	bx	lr

000c066e <strncmp>:
   c066e:	b510      	push	{r4, lr}
   c0670:	b17a      	cbz	r2, c0692 <strncmp+0x24>
   c0672:	4603      	mov	r3, r0
   c0674:	3901      	subs	r1, #1
   c0676:	1884      	adds	r4, r0, r2
   c0678:	f813 0b01 	ldrb.w	r0, [r3], #1
   c067c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c0680:	4290      	cmp	r0, r2
   c0682:	d101      	bne.n	c0688 <strncmp+0x1a>
   c0684:	42a3      	cmp	r3, r4
   c0686:	d101      	bne.n	c068c <strncmp+0x1e>
   c0688:	1a80      	subs	r0, r0, r2
   c068a:	bd10      	pop	{r4, pc}
   c068c:	2800      	cmp	r0, #0
   c068e:	d1f3      	bne.n	c0678 <strncmp+0xa>
   c0690:	e7fa      	b.n	c0688 <strncmp+0x1a>
   c0692:	4610      	mov	r0, r2
   c0694:	e7f9      	b.n	c068a <strncmp+0x1c>

000c0696 <strncpy>:
   c0696:	b510      	push	{r4, lr}
   c0698:	3901      	subs	r1, #1
   c069a:	4603      	mov	r3, r0
   c069c:	b132      	cbz	r2, c06ac <strncpy+0x16>
   c069e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c06a2:	f803 4b01 	strb.w	r4, [r3], #1
   c06a6:	3a01      	subs	r2, #1
   c06a8:	2c00      	cmp	r4, #0
   c06aa:	d1f7      	bne.n	c069c <strncpy+0x6>
   c06ac:	441a      	add	r2, r3
   c06ae:	2100      	movs	r1, #0
   c06b0:	4293      	cmp	r3, r2
   c06b2:	d100      	bne.n	c06b6 <strncpy+0x20>
   c06b4:	bd10      	pop	{r4, pc}
   c06b6:	f803 1b01 	strb.w	r1, [r3], #1
   c06ba:	e7f9      	b.n	c06b0 <strncpy+0x1a>

000c06bc <strrchr>:
   c06bc:	b538      	push	{r3, r4, r5, lr}
   c06be:	4603      	mov	r3, r0
   c06c0:	460c      	mov	r4, r1
   c06c2:	b969      	cbnz	r1, c06e0 <strrchr+0x24>
   c06c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c06c8:	f7ff bf82 	b.w	c05d0 <strchr>
   c06cc:	1c43      	adds	r3, r0, #1
   c06ce:	4605      	mov	r5, r0
   c06d0:	4621      	mov	r1, r4
   c06d2:	4618      	mov	r0, r3
   c06d4:	f7ff ff7c 	bl	c05d0 <strchr>
   c06d8:	2800      	cmp	r0, #0
   c06da:	d1f7      	bne.n	c06cc <strrchr+0x10>
   c06dc:	4628      	mov	r0, r5
   c06de:	bd38      	pop	{r3, r4, r5, pc}
   c06e0:	2500      	movs	r5, #0
   c06e2:	e7f5      	b.n	c06d0 <strrchr+0x14>

000c06e4 <__strtok_r>:
   c06e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   c06e6:	b908      	cbnz	r0, c06ec <__strtok_r+0x8>
   c06e8:	6810      	ldr	r0, [r2, #0]
   c06ea:	b188      	cbz	r0, c0710 <__strtok_r+0x2c>
   c06ec:	4604      	mov	r4, r0
   c06ee:	4620      	mov	r0, r4
   c06f0:	f814 5b01 	ldrb.w	r5, [r4], #1
   c06f4:	460f      	mov	r7, r1
   c06f6:	f817 6b01 	ldrb.w	r6, [r7], #1
   c06fa:	b91e      	cbnz	r6, c0704 <__strtok_r+0x20>
   c06fc:	b965      	cbnz	r5, c0718 <__strtok_r+0x34>
   c06fe:	6015      	str	r5, [r2, #0]
   c0700:	4628      	mov	r0, r5
   c0702:	e005      	b.n	c0710 <__strtok_r+0x2c>
   c0704:	42b5      	cmp	r5, r6
   c0706:	d1f6      	bne.n	c06f6 <__strtok_r+0x12>
   c0708:	2b00      	cmp	r3, #0
   c070a:	d1f0      	bne.n	c06ee <__strtok_r+0xa>
   c070c:	6014      	str	r4, [r2, #0]
   c070e:	7003      	strb	r3, [r0, #0]
   c0710:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c0712:	461c      	mov	r4, r3
   c0714:	e00c      	b.n	c0730 <__strtok_r+0x4c>
   c0716:	b915      	cbnz	r5, c071e <__strtok_r+0x3a>
   c0718:	f814 3b01 	ldrb.w	r3, [r4], #1
   c071c:	460e      	mov	r6, r1
   c071e:	f816 5b01 	ldrb.w	r5, [r6], #1
   c0722:	42ab      	cmp	r3, r5
   c0724:	d1f7      	bne.n	c0716 <__strtok_r+0x32>
   c0726:	2b00      	cmp	r3, #0
   c0728:	d0f3      	beq.n	c0712 <__strtok_r+0x2e>
   c072a:	2300      	movs	r3, #0
   c072c:	f804 3c01 	strb.w	r3, [r4, #-1]
   c0730:	6014      	str	r4, [r2, #0]
   c0732:	e7ed      	b.n	c0710 <__strtok_r+0x2c>

000c0734 <strtok_r>:
   c0734:	2301      	movs	r3, #1
   c0736:	f7ff bfd5 	b.w	c06e4 <__strtok_r>
	...

000c073c <_strtol_l.constprop.0>:
   c073c:	2b01      	cmp	r3, #1
   c073e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c0742:	d001      	beq.n	c0748 <_strtol_l.constprop.0+0xc>
   c0744:	2b24      	cmp	r3, #36	; 0x24
   c0746:	d906      	bls.n	c0756 <_strtol_l.constprop.0+0x1a>
   c0748:	f7fb ffa0 	bl	bc68c <__errno>
   c074c:	2316      	movs	r3, #22
   c074e:	6003      	str	r3, [r0, #0]
   c0750:	2000      	movs	r0, #0
   c0752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c0756:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c083c <_strtol_l.constprop.0+0x100>
   c075a:	460d      	mov	r5, r1
   c075c:	462e      	mov	r6, r5
   c075e:	f815 4b01 	ldrb.w	r4, [r5], #1
   c0762:	f814 700c 	ldrb.w	r7, [r4, ip]
   c0766:	f017 0708 	ands.w	r7, r7, #8
   c076a:	d1f7      	bne.n	c075c <_strtol_l.constprop.0+0x20>
   c076c:	2c2d      	cmp	r4, #45	; 0x2d
   c076e:	d132      	bne.n	c07d6 <_strtol_l.constprop.0+0x9a>
   c0770:	782c      	ldrb	r4, [r5, #0]
   c0772:	2701      	movs	r7, #1
   c0774:	1cb5      	adds	r5, r6, #2
   c0776:	2b00      	cmp	r3, #0
   c0778:	d05b      	beq.n	c0832 <_strtol_l.constprop.0+0xf6>
   c077a:	2b10      	cmp	r3, #16
   c077c:	d109      	bne.n	c0792 <_strtol_l.constprop.0+0x56>
   c077e:	2c30      	cmp	r4, #48	; 0x30
   c0780:	d107      	bne.n	c0792 <_strtol_l.constprop.0+0x56>
   c0782:	782c      	ldrb	r4, [r5, #0]
   c0784:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c0788:	2c58      	cmp	r4, #88	; 0x58
   c078a:	d14d      	bne.n	c0828 <_strtol_l.constprop.0+0xec>
   c078c:	786c      	ldrb	r4, [r5, #1]
   c078e:	2310      	movs	r3, #16
   c0790:	3502      	adds	r5, #2
   c0792:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c0796:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c079a:	f04f 0c00 	mov.w	ip, #0
   c079e:	fbb8 f9f3 	udiv	r9, r8, r3
   c07a2:	4666      	mov	r6, ip
   c07a4:	fb03 8a19 	mls	sl, r3, r9, r8
   c07a8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c07ac:	f1be 0f09 	cmp.w	lr, #9
   c07b0:	d816      	bhi.n	c07e0 <_strtol_l.constprop.0+0xa4>
   c07b2:	4674      	mov	r4, lr
   c07b4:	42a3      	cmp	r3, r4
   c07b6:	dd24      	ble.n	c0802 <_strtol_l.constprop.0+0xc6>
   c07b8:	f1bc 0f00 	cmp.w	ip, #0
   c07bc:	db1e      	blt.n	c07fc <_strtol_l.constprop.0+0xc0>
   c07be:	45b1      	cmp	r9, r6
   c07c0:	d31c      	bcc.n	c07fc <_strtol_l.constprop.0+0xc0>
   c07c2:	d101      	bne.n	c07c8 <_strtol_l.constprop.0+0x8c>
   c07c4:	45a2      	cmp	sl, r4
   c07c6:	db19      	blt.n	c07fc <_strtol_l.constprop.0+0xc0>
   c07c8:	fb06 4603 	mla	r6, r6, r3, r4
   c07cc:	f04f 0c01 	mov.w	ip, #1
   c07d0:	f815 4b01 	ldrb.w	r4, [r5], #1
   c07d4:	e7e8      	b.n	c07a8 <_strtol_l.constprop.0+0x6c>
   c07d6:	2c2b      	cmp	r4, #43	; 0x2b
   c07d8:	bf04      	itt	eq
   c07da:	782c      	ldrbeq	r4, [r5, #0]
   c07dc:	1cb5      	addeq	r5, r6, #2
   c07de:	e7ca      	b.n	c0776 <_strtol_l.constprop.0+0x3a>
   c07e0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c07e4:	f1be 0f19 	cmp.w	lr, #25
   c07e8:	d801      	bhi.n	c07ee <_strtol_l.constprop.0+0xb2>
   c07ea:	3c37      	subs	r4, #55	; 0x37
   c07ec:	e7e2      	b.n	c07b4 <_strtol_l.constprop.0+0x78>
   c07ee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c07f2:	f1be 0f19 	cmp.w	lr, #25
   c07f6:	d804      	bhi.n	c0802 <_strtol_l.constprop.0+0xc6>
   c07f8:	3c57      	subs	r4, #87	; 0x57
   c07fa:	e7db      	b.n	c07b4 <_strtol_l.constprop.0+0x78>
   c07fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c0800:	e7e6      	b.n	c07d0 <_strtol_l.constprop.0+0x94>
   c0802:	f1bc 0f00 	cmp.w	ip, #0
   c0806:	da05      	bge.n	c0814 <_strtol_l.constprop.0+0xd8>
   c0808:	2322      	movs	r3, #34	; 0x22
   c080a:	6003      	str	r3, [r0, #0]
   c080c:	4646      	mov	r6, r8
   c080e:	b942      	cbnz	r2, c0822 <_strtol_l.constprop.0+0xe6>
   c0810:	4630      	mov	r0, r6
   c0812:	e79e      	b.n	c0752 <_strtol_l.constprop.0+0x16>
   c0814:	b107      	cbz	r7, c0818 <_strtol_l.constprop.0+0xdc>
   c0816:	4276      	negs	r6, r6
   c0818:	2a00      	cmp	r2, #0
   c081a:	d0f9      	beq.n	c0810 <_strtol_l.constprop.0+0xd4>
   c081c:	f1bc 0f00 	cmp.w	ip, #0
   c0820:	d000      	beq.n	c0824 <_strtol_l.constprop.0+0xe8>
   c0822:	1e69      	subs	r1, r5, #1
   c0824:	6011      	str	r1, [r2, #0]
   c0826:	e7f3      	b.n	c0810 <_strtol_l.constprop.0+0xd4>
   c0828:	2430      	movs	r4, #48	; 0x30
   c082a:	2b00      	cmp	r3, #0
   c082c:	d1b1      	bne.n	c0792 <_strtol_l.constprop.0+0x56>
   c082e:	2308      	movs	r3, #8
   c0830:	e7af      	b.n	c0792 <_strtol_l.constprop.0+0x56>
   c0832:	2c30      	cmp	r4, #48	; 0x30
   c0834:	d0a5      	beq.n	c0782 <_strtol_l.constprop.0+0x46>
   c0836:	230a      	movs	r3, #10
   c0838:	e7ab      	b.n	c0792 <_strtol_l.constprop.0+0x56>
   c083a:	bf00      	nop
   c083c:	000c2644 	.word	0x000c2644

000c0840 <strtol>:
   c0840:	4613      	mov	r3, r2
   c0842:	460a      	mov	r2, r1
   c0844:	4601      	mov	r1, r0
   c0846:	4802      	ldr	r0, [pc, #8]	; (c0850 <strtol+0x10>)
   c0848:	6800      	ldr	r0, [r0, #0]
   c084a:	f7ff bf77 	b.w	c073c <_strtol_l.constprop.0>
   c084e:	bf00      	nop
   c0850:	2003d774 	.word	0x2003d774

000c0854 <close>:
   c0854:	4b02      	ldr	r3, [pc, #8]	; (c0860 <close+0xc>)
   c0856:	4601      	mov	r1, r0
   c0858:	6818      	ldr	r0, [r3, #0]
   c085a:	f000 b8c9 	b.w	c09f0 <_close_r>
   c085e:	bf00      	nop
   c0860:	2003d774 	.word	0x2003d774

000c0864 <fstat>:
   c0864:	4b02      	ldr	r3, [pc, #8]	; (c0870 <fstat+0xc>)
   c0866:	460a      	mov	r2, r1
   c0868:	4601      	mov	r1, r0
   c086a:	6818      	ldr	r0, [r3, #0]
   c086c:	f000 b8d0 	b.w	c0a10 <_fstat_r>
   c0870:	2003d774 	.word	0x2003d774

000c0874 <lseek>:
   c0874:	4613      	mov	r3, r2
   c0876:	460a      	mov	r2, r1
   c0878:	4601      	mov	r1, r0
   c087a:	4802      	ldr	r0, [pc, #8]	; (c0884 <lseek+0x10>)
   c087c:	6800      	ldr	r0, [r0, #0]
   c087e:	f000 b8dd 	b.w	c0a3c <_lseek_r>
   c0882:	bf00      	nop
   c0884:	2003d774 	.word	0x2003d774

000c0888 <open>:
   c0888:	b40e      	push	{r1, r2, r3}
   c088a:	b503      	push	{r0, r1, lr}
   c088c:	ab03      	add	r3, sp, #12
   c088e:	4601      	mov	r1, r0
   c0890:	4806      	ldr	r0, [pc, #24]	; (c08ac <open+0x24>)
   c0892:	f853 2b04 	ldr.w	r2, [r3], #4
   c0896:	9301      	str	r3, [sp, #4]
   c0898:	6800      	ldr	r0, [r0, #0]
   c089a:	9b04      	ldr	r3, [sp, #16]
   c089c:	f000 f8e0 	bl	c0a60 <_open_r>
   c08a0:	b002      	add	sp, #8
   c08a2:	f85d eb04 	ldr.w	lr, [sp], #4
   c08a6:	b003      	add	sp, #12
   c08a8:	4770      	bx	lr
   c08aa:	bf00      	nop
   c08ac:	2003d774 	.word	0x2003d774

000c08b0 <read>:
   c08b0:	4613      	mov	r3, r2
   c08b2:	460a      	mov	r2, r1
   c08b4:	4601      	mov	r1, r0
   c08b6:	4802      	ldr	r0, [pc, #8]	; (c08c0 <read+0x10>)
   c08b8:	6800      	ldr	r0, [r0, #0]
   c08ba:	f000 b8e3 	b.w	c0a84 <_read_r>
   c08be:	bf00      	nop
   c08c0:	2003d774 	.word	0x2003d774

000c08c4 <unlink>:
   c08c4:	4b02      	ldr	r3, [pc, #8]	; (c08d0 <unlink+0xc>)
   c08c6:	4601      	mov	r1, r0
   c08c8:	6818      	ldr	r0, [r3, #0]
   c08ca:	f000 b80d 	b.w	c08e8 <_unlink_r>
   c08ce:	bf00      	nop
   c08d0:	2003d774 	.word	0x2003d774

000c08d4 <write>:
   c08d4:	4613      	mov	r3, r2
   c08d6:	460a      	mov	r2, r1
   c08d8:	4601      	mov	r1, r0
   c08da:	4802      	ldr	r0, [pc, #8]	; (c08e4 <write+0x10>)
   c08dc:	6800      	ldr	r0, [r0, #0]
   c08de:	f000 b813 	b.w	c0908 <_write_r>
   c08e2:	bf00      	nop
   c08e4:	2003d774 	.word	0x2003d774

000c08e8 <_unlink_r>:
   c08e8:	b538      	push	{r3, r4, r5, lr}
   c08ea:	4d06      	ldr	r5, [pc, #24]	; (c0904 <_unlink_r+0x1c>)
   c08ec:	2300      	movs	r3, #0
   c08ee:	4604      	mov	r4, r0
   c08f0:	4608      	mov	r0, r1
   c08f2:	602b      	str	r3, [r5, #0]
   c08f4:	f7fb fc56 	bl	bc1a4 <_unlink>
   c08f8:	1c43      	adds	r3, r0, #1
   c08fa:	d102      	bne.n	c0902 <_unlink_r+0x1a>
   c08fc:	682b      	ldr	r3, [r5, #0]
   c08fe:	b103      	cbz	r3, c0902 <_unlink_r+0x1a>
   c0900:	6023      	str	r3, [r4, #0]
   c0902:	bd38      	pop	{r3, r4, r5, pc}
   c0904:	2003e7f0 	.word	0x2003e7f0

000c0908 <_write_r>:
   c0908:	b538      	push	{r3, r4, r5, lr}
   c090a:	4d07      	ldr	r5, [pc, #28]	; (c0928 <_write_r+0x20>)
   c090c:	4604      	mov	r4, r0
   c090e:	4608      	mov	r0, r1
   c0910:	4611      	mov	r1, r2
   c0912:	2200      	movs	r2, #0
   c0914:	602a      	str	r2, [r5, #0]
   c0916:	461a      	mov	r2, r3
   c0918:	f7fb fc0c 	bl	bc134 <_write>
   c091c:	1c43      	adds	r3, r0, #1
   c091e:	d102      	bne.n	c0926 <_write_r+0x1e>
   c0920:	682b      	ldr	r3, [r5, #0]
   c0922:	b103      	cbz	r3, c0926 <_write_r+0x1e>
   c0924:	6023      	str	r3, [r4, #0]
   c0926:	bd38      	pop	{r3, r4, r5, pc}
   c0928:	2003e7f0 	.word	0x2003e7f0

000c092c <__register_exitproc>:
   c092c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c0930:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c09ec <__register_exitproc+0xc0>
   c0934:	4606      	mov	r6, r0
   c0936:	f8d8 0000 	ldr.w	r0, [r8]
   c093a:	461f      	mov	r7, r3
   c093c:	460d      	mov	r5, r1
   c093e:	4691      	mov	r9, r2
   c0940:	f000 f878 	bl	c0a34 <__retarget_lock_acquire_recursive>
   c0944:	4b25      	ldr	r3, [pc, #148]	; (c09dc <__register_exitproc+0xb0>)
   c0946:	681c      	ldr	r4, [r3, #0]
   c0948:	b934      	cbnz	r4, c0958 <__register_exitproc+0x2c>
   c094a:	4c25      	ldr	r4, [pc, #148]	; (c09e0 <__register_exitproc+0xb4>)
   c094c:	601c      	str	r4, [r3, #0]
   c094e:	4b25      	ldr	r3, [pc, #148]	; (c09e4 <__register_exitproc+0xb8>)
   c0950:	b113      	cbz	r3, c0958 <__register_exitproc+0x2c>
   c0952:	681b      	ldr	r3, [r3, #0]
   c0954:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c0958:	6863      	ldr	r3, [r4, #4]
   c095a:	2b1f      	cmp	r3, #31
   c095c:	dd07      	ble.n	c096e <__register_exitproc+0x42>
   c095e:	f8d8 0000 	ldr.w	r0, [r8]
   c0962:	f000 f869 	bl	c0a38 <__retarget_lock_release_recursive>
   c0966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c096a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c096e:	b34e      	cbz	r6, c09c4 <__register_exitproc+0x98>
   c0970:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c0974:	b988      	cbnz	r0, c099a <__register_exitproc+0x6e>
   c0976:	4b1c      	ldr	r3, [pc, #112]	; (c09e8 <__register_exitproc+0xbc>)
   c0978:	b923      	cbnz	r3, c0984 <__register_exitproc+0x58>
   c097a:	f8d8 0000 	ldr.w	r0, [r8]
   c097e:	f000 f85a 	bl	c0a36 <__retarget_lock_release>
   c0982:	e7f0      	b.n	c0966 <__register_exitproc+0x3a>
   c0984:	f44f 7084 	mov.w	r0, #264	; 0x108
   c0988:	f7fb fe38 	bl	bc5fc <malloc>
   c098c:	2800      	cmp	r0, #0
   c098e:	d0f4      	beq.n	c097a <__register_exitproc+0x4e>
   c0990:	2300      	movs	r3, #0
   c0992:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c0996:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c099a:	6863      	ldr	r3, [r4, #4]
   c099c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c09a0:	2201      	movs	r2, #1
   c09a2:	409a      	lsls	r2, r3
   c09a4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c09a8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c09ac:	4313      	orrs	r3, r2
   c09ae:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c09b2:	2e02      	cmp	r6, #2
   c09b4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c09b8:	bf02      	ittt	eq
   c09ba:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c09be:	4313      	orreq	r3, r2
   c09c0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c09c4:	6863      	ldr	r3, [r4, #4]
   c09c6:	f8d8 0000 	ldr.w	r0, [r8]
   c09ca:	1c5a      	adds	r2, r3, #1
   c09cc:	3302      	adds	r3, #2
   c09ce:	6062      	str	r2, [r4, #4]
   c09d0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c09d4:	f000 f830 	bl	c0a38 <__retarget_lock_release_recursive>
   c09d8:	2000      	movs	r0, #0
   c09da:	e7c6      	b.n	c096a <__register_exitproc+0x3e>
   c09dc:	2003e7e8 	.word	0x2003e7e8
   c09e0:	2003e75c 	.word	0x2003e75c
   c09e4:	00000000 	.word	0x00000000
   c09e8:	000bc5fd 	.word	0x000bc5fd
   c09ec:	2003d7d8 	.word	0x2003d7d8

000c09f0 <_close_r>:
   c09f0:	b538      	push	{r3, r4, r5, lr}
   c09f2:	4d06      	ldr	r5, [pc, #24]	; (c0a0c <_close_r+0x1c>)
   c09f4:	2300      	movs	r3, #0
   c09f6:	4604      	mov	r4, r0
   c09f8:	4608      	mov	r0, r1
   c09fa:	602b      	str	r3, [r5, #0]
   c09fc:	f7fb fbaa 	bl	bc154 <_close>
   c0a00:	1c43      	adds	r3, r0, #1
   c0a02:	d102      	bne.n	c0a0a <_close_r+0x1a>
   c0a04:	682b      	ldr	r3, [r5, #0]
   c0a06:	b103      	cbz	r3, c0a0a <_close_r+0x1a>
   c0a08:	6023      	str	r3, [r4, #0]
   c0a0a:	bd38      	pop	{r3, r4, r5, pc}
   c0a0c:	2003e7f0 	.word	0x2003e7f0

000c0a10 <_fstat_r>:
   c0a10:	b538      	push	{r3, r4, r5, lr}
   c0a12:	4d07      	ldr	r5, [pc, #28]	; (c0a30 <_fstat_r+0x20>)
   c0a14:	2300      	movs	r3, #0
   c0a16:	4604      	mov	r4, r0
   c0a18:	4608      	mov	r0, r1
   c0a1a:	4611      	mov	r1, r2
   c0a1c:	602b      	str	r3, [r5, #0]
   c0a1e:	f7fb fba1 	bl	bc164 <_fstat>
   c0a22:	1c43      	adds	r3, r0, #1
   c0a24:	d102      	bne.n	c0a2c <_fstat_r+0x1c>
   c0a26:	682b      	ldr	r3, [r5, #0]
   c0a28:	b103      	cbz	r3, c0a2c <_fstat_r+0x1c>
   c0a2a:	6023      	str	r3, [r4, #0]
   c0a2c:	bd38      	pop	{r3, r4, r5, pc}
   c0a2e:	bf00      	nop
   c0a30:	2003e7f0 	.word	0x2003e7f0

000c0a34 <__retarget_lock_acquire_recursive>:
   c0a34:	4770      	bx	lr

000c0a36 <__retarget_lock_release>:
   c0a36:	4770      	bx	lr

000c0a38 <__retarget_lock_release_recursive>:
   c0a38:	4770      	bx	lr
	...

000c0a3c <_lseek_r>:
   c0a3c:	b538      	push	{r3, r4, r5, lr}
   c0a3e:	4d07      	ldr	r5, [pc, #28]	; (c0a5c <_lseek_r+0x20>)
   c0a40:	4604      	mov	r4, r0
   c0a42:	4608      	mov	r0, r1
   c0a44:	4611      	mov	r1, r2
   c0a46:	2200      	movs	r2, #0
   c0a48:	602a      	str	r2, [r5, #0]
   c0a4a:	461a      	mov	r2, r3
   c0a4c:	f7fb fb92 	bl	bc174 <_lseek>
   c0a50:	1c43      	adds	r3, r0, #1
   c0a52:	d102      	bne.n	c0a5a <_lseek_r+0x1e>
   c0a54:	682b      	ldr	r3, [r5, #0]
   c0a56:	b103      	cbz	r3, c0a5a <_lseek_r+0x1e>
   c0a58:	6023      	str	r3, [r4, #0]
   c0a5a:	bd38      	pop	{r3, r4, r5, pc}
   c0a5c:	2003e7f0 	.word	0x2003e7f0

000c0a60 <_open_r>:
   c0a60:	b538      	push	{r3, r4, r5, lr}
   c0a62:	4d07      	ldr	r5, [pc, #28]	; (c0a80 <_open_r+0x20>)
   c0a64:	4604      	mov	r4, r0
   c0a66:	4608      	mov	r0, r1
   c0a68:	4611      	mov	r1, r2
   c0a6a:	2200      	movs	r2, #0
   c0a6c:	602a      	str	r2, [r5, #0]
   c0a6e:	461a      	mov	r2, r3
   c0a70:	f7fb fb58 	bl	bc124 <_open>
   c0a74:	1c43      	adds	r3, r0, #1
   c0a76:	d102      	bne.n	c0a7e <_open_r+0x1e>
   c0a78:	682b      	ldr	r3, [r5, #0]
   c0a7a:	b103      	cbz	r3, c0a7e <_open_r+0x1e>
   c0a7c:	6023      	str	r3, [r4, #0]
   c0a7e:	bd38      	pop	{r3, r4, r5, pc}
   c0a80:	2003e7f0 	.word	0x2003e7f0

000c0a84 <_read_r>:
   c0a84:	b538      	push	{r3, r4, r5, lr}
   c0a86:	4d07      	ldr	r5, [pc, #28]	; (c0aa4 <_read_r+0x20>)
   c0a88:	4604      	mov	r4, r0
   c0a8a:	4608      	mov	r0, r1
   c0a8c:	4611      	mov	r1, r2
   c0a8e:	2200      	movs	r2, #0
   c0a90:	602a      	str	r2, [r5, #0]
   c0a92:	461a      	mov	r2, r3
   c0a94:	f7fb fb56 	bl	bc144 <_read>
   c0a98:	1c43      	adds	r3, r0, #1
   c0a9a:	d102      	bne.n	c0aa2 <_read_r+0x1e>
   c0a9c:	682b      	ldr	r3, [r5, #0]
   c0a9e:	b103      	cbz	r3, c0aa2 <_read_r+0x1e>
   c0aa0:	6023      	str	r3, [r4, #0]
   c0aa2:	bd38      	pop	{r3, r4, r5, pc}
   c0aa4:	2003e7f0 	.word	0x2003e7f0

000c0aa8 <dynalib_user>:
   c0aa8:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   c0ab8:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   c0ac8:	72697620 6c617574 63654400 65687069      virtual.Deciphe
   c0ad8:	20646572 61746164 70657220 2074726f     red data report 
   c0ae8:	66206425 206d6f72 65646f6e 00642520     %d from node %d.
   c0af8:	69636544 72656870 61206465 7472656c     Deciphered alert
   c0b08:	70657220 2074726f 6d6f7266 646f6e20      report from nod
   c0b18:	64252065 6e655300 63612074 776f6e6b     e %d.Sent acknow
   c0b28:	6764656c 746e656d 206f7420 65646f4e     ledgment to Node
   c0b38:	2c642520 6d697420 203d2065 61207325      %d, time = %s a
   c0b48:	6620646e 75716572 79636e65 20642520     nd frequency %d 
   c0b58:	756e696d 00736574 70736552 65736e6f     minutes.Response
   c0b68:	746f6e20 6b636120 6c776f6e 65676465      not acknowledge
   c0b78:	6f6e0064 00736564 6c6c756e 44496400     d.nodes.null.dID
   c0b88:	646f6e00 6f4e0065 6e206564 65626d75     .node.Node numbe
   c0b98:	6f6e2072 6f662074 00646e75 746e6553     r not found.Sent
   c0ba8:	73657220 736e6f70 6f742065 6e657320      response to sen
   c0bb8:	54726f73 20657079 6e206425 2065646f     sorType %d node 
   c0bc8:	202c6425 656d6974 25203d20 6e612073     %d, time = %s an
   c0bd8:	72662064 65757165 2079636e 6d206425     d frequency %d m
   c0be8:	74756e69 52007365 6f707365 2065736e     inutes.Response 
   c0bf8:	65636572 64657669 63757320 73736563     received success
   c0c08:	6c6c7566 72500079 20746e69 65646f4e     fully.Print Node
   c0c18:	73657220 3a746c75 73614c00 6e652074      result:.Last en
   c0c28:	20797274 69207461 25203d20 616c0064     try at i = %d.la
   c0c38:	4e007473 2065646f 202c6425 69766564     st.Node %d, devi
   c0c48:	44496563 7325203a 616c202c 6f437473     ceID: %s, lastCo
   c0c58:	63656e6e 3a646574 2c732520 70797420     nnected: %s, typ
   c0c68:	64252065 646f6e00 74614465 6e690061     e %d.nodeData.in
   c0c78:	66207469 656c6961 6f4c0064 52204152     it failed.LoRA R
   c0c88:	6f696461 696e6920 6c616974 64657a69     adio initialized
   c0c98:	20736120 61672061 61776574 69772079      as a gateway wi
   c0ca8:	61206874 76656420 49656369 666f2044     th a deviceID of
   c0cb8:	00732520 41526f4c 64615220 69206f69      %s.LoRA Radio i
   c0cc8:	6974696e 7a696c61 61206465 6f6e2073     nitialized as no
   c0cd8:	25206564 6e612069 20612064 69766564     de %i and a devi
   c0ce8:	44496563 20666f20 4c007325 2041526f     ceID of %s.LoRA 
   c0cf8:	69646152 6e69206f 61697469 657a696c     Radio initialize
   c0d08:	73612064 206e6120 6f636e75 6769666e     d as an unconfig
   c0d18:	64657275 646f6e20 69252065 646e6120     ured node %i and
   c0d28:	64206120 63697665 20444965 2520666f      a deviceID of %
   c0d38:	61500073 64657372 63755320 73736563     s.Parsed Success
   c0d48:	6c6c7566 61500079 6e697372 72652067     fully.Parsing er
   c0d58:	00726f72 6373696d 69666e6f 65727567     ror.misconfigure
   c0d68:	44002064 20617461 2d6b6341 646f4e20     d .Data Ack- Nod
   c0d78:	756e2065 7265626d 20642520 696c6176     e number %d vali
   c0d88:	61440064 41206174 2d206b63 646f4e20     d.Data Ack - Nod
   c0d98:	756e2065 7265626d 20642520 69207369     e number %d is i
   c0da8:	6c61766e 2d206469 73657220 69747465     nvalid - resetti
   c0db8:	4100676e 6f6e6b63 67656c77 746e656d     ng.Acknowlegment
   c0dc8:	206f7420 6f6e7325 25206564 656d2064      to %snode %d me
   c0dd8:	67617373 64252065 6974202c 3d20656d     ssage %d, time =
   c0de8:	20732520 20646e61 71657266 636e6575      %s and frequenc
   c0df8:	64252079 6e696d20 73657475 73655200     y %d minutes.Res
   c0e08:	736e6f70 65722065 76696563 73206465     ponse received s
   c0e18:	65636375 75667373 20796c6c 7573202d     uccessfully - su
   c0e28:	73656363 61722073 25206574 66322e34     ccess rate %4.2f
   c0e38:	73655200 736e6f70 6f6e2065 63612074     .Response not ac
   c0e48:	776f6e6b 6764656c 2d206465 63757320     knowledged - suc
   c0e58:	73736563 74617220 34252065 0066322e     cess rate %4.2f.
   c0e68:	70736552 69646e6f 7520676e 676e6973     Responding using
   c0e78:	65687420 20732520 7373656d 20656761      the %s message 
   c0e88:	65707974 6e696600 646f4e64 6d754e65     type.findNodeNum
   c0e98:	20726562 206e6172 2074756f 6520666f     ber ran out of e
   c0ea8:	6972746e 61207365 20692074 6425203d     ntries at i = %d
   c0eb8:	77654e00 646f6e20 69772065 62206c6c     .New node will b
   c0ec8:	73612065 6e676973 6e206465 65626d75     e assigned numbe
   c0ed8:	64252072 6564202c 65636976 6f204449     r %d, deviceID o
   c0ee8:	73252066 646e6120 70797420 666f2065     f %s and type of
   c0ef8:	52003320 72757465 676e696e 646e6920      3.Returning ind
   c0f08:	25207865 6f4a0064 72206e69 65757165     ex %d.Join reque
   c0f18:	66207473 206d6f72 6f636e55 6769666e     st from Unconfig
   c0f28:	64657275 646f6e20 73252065 6c697720     ured node %s wil
   c0f38:	6863206c 65676e61 646f6e20 756e2065     l change node nu
   c0f48:	7265626d 6f726620 6425206d 206f7420     mber from %d to 
   c0f58:	4a006425 206e696f 75716572 20747365     %d.Join request 
   c0f68:	6d6f7266 20732520 68746977 646f6e20     from %s with nod
   c0f78:	64252065 73202d20 69747465 6320676e     e %d - setting c
   c0f88:	6b636f6c 646e6120 74657320 676e6974     lock and setting
   c0f98:	6e657320 54726f73 20657079 25206f74      sensorType to %
   c0fa8:	654d0064 67617373 616d2065 20636967     d.Message magic 
   c0fb8:	626d756e 6f207265 64252066 64696420     number of %d did
   c0fc8:	746f6e20 74616d20 74206863 4d206568      not match the M
   c0fd8:	63696761 6d754e20 20726562 6d206e69     agic Number in m
   c0fe8:	726f6d65 64252079 49202d20 726f6e67     emory %d - Ignor
   c0ff8:	00676e69 6d6f7246 646f6e20 64252065     ing.From node %d
   c1008:	74697720 73722068 253d6973 202d2064      with rssi=%d - 
   c1018:	73252061 73656d20 65676173 20666f20     a %s message of 
   c1028:	676e656c 25206874 6e692064 20642520     length %d in %d 
   c1038:	73706f68 20655700 20657261 61647075     hops.We are upda
   c1048:	676e6974 65687420 62757020 6873696c     ting the publish
   c1058:	65726620 6e657571 74207963 6925206f      frequency to %i
   c1068:	6e696d20 73657475 70655200 6974726f      minutes.Reporti
   c1078:	6620676e 75716572 79636e65 636e7520     ng frequency unc
   c1088:	676e6168 00006465                       hanged..

000c1090 <_ZTV16JsonParserStaticILj1024ELj50EE>:
	...
   c1098:	000b40dd 000b40f1                       .@...@..

000c10a0 <_ZTV14LoRA_Functions>:
	...
   c10a8:	000b40cd 000b40cf 6f706552 66207472     .@...@..Report f
   c10b8:	75716572 79636e65 20642520 736e696d     requency %d mins
   c10c8:	656e202c 65207478 746e6576 206e6920     , next event in 
   c10d8:	20756c25 6f636573 0073646e 6d6f7246     %lu seconds.From
   c10e8:	20732520 25206f74 69772073 69206874      %s to %s with i
   c10f8:	6c61766e 74206469 00656d69 6d6f7246     nvalid time.From
   c1108:	20732520 25206f74 6f662073 75252072      %s to %s for %u
   c1118:	63657320 73646e6f 6f724600 7325206d      seconds.From %s
   c1128:	206f7420 7b007325 76656422 69656369      to %s.{"devicei
   c1138:	223a2264 2c227325 6f682220 796c7275     d":"%s", "hourly
   c1148:	75253a22 6422202c 796c6961 75253a22     ":%u, "daily":%u
   c1158:	7322202c 6f736e65 70797472 253a2265     , "sensortype":%
   c1168:	22202c64 74746162 22797265 2e34253a     d, "battery":%4.
   c1178:	222c6632 3179656b 25223a22 222c2273     2f,"key1":"%s","
   c1188:	706d6574 64253a22 7222202c 74657365     temp":%d, "reset
   c1198:	253a2273 72222c64 22697373 2c64253a     s":%d,"rssi":%d,
   c11a8:	736d2220 253a2267 74222c64 73656d69      "msg":%d,"times
   c11b8:	706d6174 6c253a22 30303075 6255007d     tamp":%lu000}.Ub
   c11c8:	746f6469 6f4c2d73 4e2d4152 2d65646f     idots-LoRA-Node-
   c11d8:	55003176 6f646962 4c2d7374 2d41526f     v1.Ubidots-LoRA-
   c11e8:	65746147 2d796177 69003176 73690073     Gateway-v1.is.is
   c11f8:	746f6e20 54534500 54444535 2e334d2c      not.EST5EDT,M3.
   c1208:	2f302e32 30303a32 2c30303a 2e31314d     2.0/2:00:00,M11.
   c1218:	2f302e31 30303a32 0030303a 253a4925     1.0/2:00:00.%I:%
   c1228:	53253a4d 4c007025 6c61636f 656d6954     M:%S%p.LocalTime
   c1238:	696e6920 6c616974 64657a69 6974202c      initialized, ti
   c1248:	6920656d 73252073 646e6120 43545220     me is %s and RTC
   c1258:	20732520 00746573 61636f4c 6d69546c      %s set.LocalTim
   c1268:	6f6e2065 6e692074 61697469 657a696c     e not initialize
   c1278:	6f732064 6c697720 656e206c 74206465     d so will need t
   c1288:	6f43206f 63656e6e 6f742074 72615020     o Connect to Par
   c1298:	6c636974 73550065 62207265 6f747475     ticle.User butto
   c12a8:	7270206e 65737365 74202c64 20747365     n pressed, test 
   c12b8:	65646f6d 206f4e00 72657375 74756220     mode.No user but
   c12c8:	206e6f74 68737570 74656420 74686365     ton push detecht
   c12d8:	6f006465 006e6570 736f6c63 53006465     ed.open.closed.S
   c12e8:	7065656c 726f6620 20692520 6f636573     leep for %i seco
   c12f8:	2073646e 6c6c6974 78656e20 76652074     nds till next ev
   c1308:	20746e65 25207461 69772073 25206874     ent at %s with %
   c1318:	6620696c 20656572 6f6d656d 41007972     li free memory.A
   c1328:	656b6f77 20746120 77207325 20687469     woke at %s with 
   c1338:	20696c25 65657266 6d656d20 0079726f     %li free memory.
   c1348:	65746147 20796177 6c207369 65747369     Gateway is liste
   c1358:	676e696e 726f6620 526f4c20 656d2041     ning for LoRA me
   c1368:	67617373 61207365 7420646e 70206568     ssages and the p
   c1378:	206b7261 25207369 25282073 202f2064     ark is %s (%d / 
   c1388:	2f206425 29642520 77654e00 79614420     %d / %d).New Day
   c1398:	52202d20 74657365 676e6974 65766520      - Resetting eve
   c13a8:	68747972 00676e69 70656544 776f7020     rything.Deep pow
   c13b8:	64207265 206e776f 69766564 41006563     er down device.A
   c13c8:	77656e20 79616420 72202d20 74657365      new day - reset
   c13d8:	676e6974 65766520 68747972 00676e69     ting everything.

000c13e8 <_ZTV8MB85RC64>:
	...
   c13f0:	000b5bd5 000b5be9 000b92a5 000b933b     .[...[......;...
   c1400:	000b93bd                                ....

000c1404 <_ZTV10nodeIDData>:
	...
   c140c:	000b5ef9 000b5c35 000b5c13 000bbb25     .^..5\...\..%...
   c141c:	000bbb4d 000bbce1 000bbd79 000b5cd5     M.......y....\..
   c142c:	000b5ce9                                .\..

000c1430 <_ZTV13sysStatusData>:
	...
   c1438:	000b5d59 000b5c35 000b5c13 000bbb25     Y]..5\...\..%...
   c1448:	000bbb4d 000bbce1 000bbd79 000b5c85     M.......y....\..
   c1458:	000b5c99                                .\..

000c145c <_ZTV17currentStatusData>:
	...
   c1464:	000b5d73 000b5c35 000b5c13 000bbb25     s]..5\...\..%...
   c1474:	000bbb4d 000bbce1 000bbd79 000b5cad     M.......y....\..
   c1484:	000b5cc1 74696e49 7a696c61 20676e69     .\..Initalizing 
   c1494:	20656874 4d6e6970 7365646f 696e4900     the pinModes.Ini
   c14a4:	6c616974 6e697a69 6f502067 20726577     tializing Power 
   c14b4:	666e6f43 00006769                       Config..

000c14bc <BLUE_LED>:
   c14bc:	                                         ..

000c14be <BUTTON_PIN>:
   c14be:	                                         ..

000c14c0 <RFM95_CS>:
   c14c0:	                                         ..

000c14c2 <RFM95_INT>:
   c14c2:	                                         ..

000c14c4 <TMP36_SENSE_PIN>:
   c14c4:	6553000f 6e697474 61762067 7365756c     ..Setting values
   c14d4:	726f6620 65687420 74614720 79617765      for the Gateway
   c14e4:	20752500 756e696d 00736572 2500414e     .%u minures.NA.%
   c14f4:	30303a69 72655600 6e6f7a69 6b6e5500     i:00.Verizon.Unk
   c1504:	6e776f6e 746f4e00 61684320 6e696772     nown.Not Chargin
   c1514:	68430067 65677261 69440064 61686373     g.Charged.Discha
   c1524:	6e696772 61460067 00746c75 6f636944     rging.Fault.Dico
   c1534:	63656e6e 00646574 74696e49 696c6169     nnected.Initiali
   c1544:	676e697a 72615020 6c636974 75662065     zing Particle fu
   c1554:	6974636e 20736e6f 20646e61 69726176     nctions and vari
   c1564:	656c6261 65520073 7361656c 69530065     ables.Release.Si
   c1574:	6c616e67 61747300 664f6574 00676843     gnal.stateOfChg.
   c1584:	74746142 43797265 65746e6f 52007478     BatteryContext.R
   c1594:	726f7065 676e6974 65724620 6e657571     eporting Frequen
   c15a4:	53007963 43204d49 00647261 6e65704f     cy.SIM Card.Open
   c15b4:	6d695420 6c430065 2065736f 656d6954      Time.Close Time
   c15c4:	74655300 65724620 6e657571 53007963     .Set Frequency.S
   c15d4:	57207465 20656b61 656d6954 74655300     et Wake Time.Set
   c15e4:	656c5320 54207065 00656d69 6f706552      Sleep Time.Repo
   c15f4:	66207472 75716572 79636e65 6c697720     rt frequency wil
   c1604:	6562206c 74657320 206f7420 6d206925     l be set to %i m
   c1614:	74756e69 61207365 656e2074 4c207478     inutes at next L
   c1624:	2041526f 6e6e6f63 00746365 656b6157     oRA connect.Wake
   c1634:	6d697420 65732065 6f742074 00692520      time set to %i.
   c1644:	65656c53 69742070 7320656d 74207465     Sleep time set t
   c1654:	6925206f 74655300 206f7420 69726556     o %i.Set to Veri
   c1664:	206e6f7a 004d4953 65646f4d 74655300     zon SIM.Mode.Set
   c1674:	206f7420 74726150 656c6369 4d495320      to Particle SIM
   c1684:	206e4900 20656874 63736964 656e6e6f     .In the disconne
   c1694:	66207463 206d6f72 74726150 656c6369     ct from Particle
   c16a4:	6e756620 6f697463 6146006e 64656c69      function.Failed
   c16b4:	206f7420 63736964 656e6e6f 66207463      to disconnect f
   c16c4:	206d6f72 74726150 656c6369 73694400     rom Particle.Dis
   c16d4:	6e6e6f63 65746365 72662064 50206d6f     connected from P
   c16e4:	69747261 20656c63 25206e69 65732069     article in %i se
   c16f4:	646e6f63 61460073 64656c69 206f7420     conds.Failed to 
   c1704:	6e727574 66666f20 65687420 6c654320     turn off the Cel
   c1714:	616c756c 6f6d2072 006d6564 6e727554     lular modem.Turn
   c1724:	6f206465 74206666 63206568 756c6c65     ed off the cellu
   c1734:	2072616c 65646f6d 6e69206d 20692520     lar modem in %i 
   c1744:	6f636573 0073646e                       seconds.

000c174c <_ZTVN5spark10LogHandlerE>:
	...
   c175c:	000b40a5 000b6455                       .@..Ud..

000c1764 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c176c:	000b64cd 000b6501 000be281 000b6457     .d...e......Wd..
   c177c:	656e6f4e 46695700 53470069 4d55004d     None.WiFi.GSM.UM
   c178c:	43005354 00414d44 0045544c 45454549     TS.CDMA.LTE.IEEE
   c179c:	31323038 4c003435 435f4554 4d5f5441     802154.LTE_CAT_M
   c17ac:	544c0031 41435f45 424e5f54 73250031     1.LTE_CAT_NB1.%s
   c17bc:	253a5320 66302e32 202c2525 32253a51      S:%2.0f%%, Q:%2
   c17cc:	2566302e 41002025 72657373 6e6f6974     .0f%% .Assertion
   c17dc:	6c696146 20657275 20637273 73202626     Failure src && s
   c17ec:	3e2d6372 6c6c6163 6b636162 20692500     rc->callback.%i 
   c17fc:	00000043 000c1501 000c177c 000c1781     C.......|.......
   c180c:	000c1786 000c178a 000c178f 000c1794     ................
   c181c:	000c1798 000c17a3 000c17ae 6c696166     ............fail
   c182c:	74206465 6572206f 72206461 64416765     ed to read regAd
   c183c:	253d7264 20783230 6e756f63 75253d74     dr=%02x count=%u
   c184c:	69616600 2064656c 72206f74 20646165     .failed to read 
   c185c:	41676572 3d726464 78323025 61747320     regAddr=%02x sta
   c186c:	64253d74 554f4600 69642054 6f6e2064     t=%d.FOUT did no
   c187c:	6f672074 47494820 6f6e0048 65642074     t go HIGH.not de
   c188c:	74636574 66006465 656c6961 6f742064     tected.failed to
   c189c:	69727720 72206574 64416765 253d7264      write regAddr=%
   c18ac:	20783230 74617473 0064253d 57746573     02x stat=%d.setW
   c18bc:	25205444 61770064 64686374 6320676f     DT %d.watchdog c
   c18cc:	7261656c 62206465 75736552 253d746c     leared bResult=%
   c18dc:	61770064 64686374 7320676f 66207465     d.watchdog set f
   c18ec:	5372756f 3d736365 62206425 75736552     ourSecs=%d bResu
   c18fc:	253d746c 41570064 44484354 4400474f     lt=%d.WATCHDOG.D
   c190c:	5f504545 45574f50 4f445f52 43004e57     EEP_POWER_DOWN.C
   c191c:	544e554f 4e574f44 4d49545f 41005245     OUNTDOWN_TIMER.A
   c192c:	4d52414c 69616600 6572756c 206e6920     LARM.failure in 
   c193c:	61647075 61576574 6552656b 6e6f7361     updateWakeReason
   c194c:	00642520 656b6177 61657220 206e6f73      %d.wake reason 
   c195c:	7325203d 69616600 6572756c 206e6920     = %s.failure in 
   c196c:	43746573 746e756f 6e776f64 656d6954     setCountdownTime
   c197c:	64252072 69616600 6572756c 206e6920     r %d.failure in 
   c198c:	70656564 65776f50 776f4472 6425206e     deepPowerDown %d
   c199c:	47455200 454c535f 435f5045 3d4c5254     .REG_SLEEP_CTRL=
   c19ac:	32257830 69640078 74276e64 776f7020     0x%2x.didn't pow
   c19bc:	64207265 006e776f 64343025 3230252d     er down.%04d-%02
   c19cc:	30252d64 25206432 3a643230 64323025     d-%02d %02d:%02d
   c19dc:	3230253a 65670064 63745274 6d547341     :%02d.getRtcAsTm
   c19ec:	00732520 52746573 73416374 25206d54      %s.setRtcAsTm %
   c19fc:	61660073 72756c69 6e692065 74657320     s.failure in set
   c1a0c:	46637452 546d6f72 6425206d 74657300     RtcFromTm %d.set
   c1a1c:	43545220 6f726620 6c63206d 2064756f      RTC from cloud 
   c1a2c:	73007325 73207465 65747379 6c63206d     %s.set system cl
   c1a3c:	206b636f 6d6f7266 43545220 00732520     ock from RTC %s.
   c1a4c:	6c696166 74206465 6564206f 74636574     failed to detect
   c1a5c:	31424120 00353038 2e707061 38316261      AB1805.app.ab18
   c1a6c:	00003530                                05..

000c1a70 <_ZTV6AB1805>:
	...
   c1a78:	000b6e25 000b6e27 000b749d 000b7523     %n..'n...t..#u..
   c1a88:	6b636142 756f7267 7550646e 73696c62     BackgroundPublis
   c1a98:	004b5268                                hRK.

000c1a9c <_ZTV19BackgroundPublishRK>:
	...
   c1aa4:	000b7a59 000b7a75 3025755c 00005834     Yz..uz..\u%04X..

000c1ab4 <_ZTV10JsonBuffer>:
	...
   c1abc:	000b7d59 000b7d75                       Y}..u}..

000c1ac4 <_ZTV10JsonParser>:
	...
   c1acc:	000b7dd9 000b7dfd                       .}...}..

000c1ad4 <_ZTV10JsonWriter>:
	...
   c1adc:	000b7d89 000b7d9d                       .}...}..

000c1ae4 <_ZTV12JsonModifier>:
	...
   c1aec:	000b7db1 000b7dc5 253a6425 64253a64     .}...}..%d:%d:%d
   c1afc:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   c1b0c:	4d003935 252e6425 64252e64 5a002c00     59.M%d.%d.%d.,.Z
   c1b1c:	302b2500 253a6433 00753230              .%+03d:%02u.

000c1b28 <_ZTV9LocalTime>:
	...
   c1b30:	000b8965 000b897d                       e...}...

000c1b38 <_ZTV12LocalTimeHMS>:
	...
   c1b40:	000b8915 000b8919                       ........

000c1b48 <_ZTV15LocalTimeChange>:
	...
   c1b50:	000b8917 000b8927                       ....'...

000c1b58 <_ZTV22LocalTimePosixTimezone>:
	...
   c1b60:	000b8935 000b8951                       5...Q...

000c1b68 <_ZTV6MB85RC>:
	...
   c1b70:	000b9265 000b9267 000b92a5 000b933b     e...g.......;...
   c1b80:	000b93bd 656c6966 3d6d754e 73206425     ....fileNum=%d s
   c1b90:	3d657a69 00646c25 64616572 75657551     ize=%ld.readQueu
   c1ba0:	6c694665 64252065 65766520 253d746e     eFile %d event=%
   c1bb0:	61642073 253d6174 65720073 75516461     s data=%s.readQu
   c1bc0:	46657565 20656c69 63206425 7572726f     eueFile %d corru
   c1bd0:	64657470 65766520 6e20746e 20656d61     pted event name 
   c1be0:	6420726f 00617461 64616572 75657551     or data.readQueu
   c1bf0:	6c694665 64252065 64616220 67616d20     eFile %d bad mag
   c1c00:	253d6369 786c3830 72657620 6e6f6973     ic=%08lx version
   c1c10:	2075253d 64616568 69537265 253d657a     =%u headerSize=%
   c1c20:	616e2075 654c656d 75253d6e 73752f00     u nameLen=%u./us
   c1c30:	75702f72 65757162 77006575 65746972     r/pubqueue.write
   c1c40:	75657551 466f5465 73656c69 6c696620     QueueToFiles fil
   c1c50:	6d754e65 0064253d 63736964 65647261     eNum=%d.discarde
   c1c60:	76652064 20746e65 72006425 74657365     d event %d.reset
   c1c70:	20726f20 63736964 656e6e6f 65207463      or disconnect e
   c1c80:	746e6576 6173202c 66206576 73656c69     vent, save files
   c1c90:	206f7420 75657571 61720065 6964006d      to queue.ram.di
   c1ca0:	72616373 676e6964 726f6320 74707572     scarding corrupt
   c1cb0:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   c1cc0:	6e696873 73252067 65766520 253d746e     shing %s event=%
   c1cd0:	61642073 253d6174 59530073 4d455453     s data=%s.SYSTEM
   c1ce0:	5248545f 28444145 42414e45 2944454c     _THREAD(ENABLED)
   c1cf0:	20736920 75716572 64657269 62757000      is required.pub
   c1d00:	6873696c 6d6d6f43 65206e6f 746e6576     lishCommon event
   c1d10:	656d614e 2073253d 6e657665 74614474     Name=%s eventDat
   c1d20:	73253d61 6e616300 20746f6e 61657263     a=%s.cannot crea
   c1d30:	73206574 3a3a6474 75716564 616c2065     te std::deque la
   c1d40:	72656772 61687420 616d206e 69735f78     rger than max_si
   c1d50:	2928657a 6c696600 65755165 654c6575     ze().fileQueueLe
   c1d60:	75253d6e 6d617220 75657551 6e654c65     n=%u ramQueueLen
   c1d70:	2075253d 6e6e6f63 65746365 64253d64     =%u connected=%d
   c1d80:	65757100 20646575 72206f74 75516d61     .queued to ramQu
   c1d90:	00657565 6c627570 20687369 63637573     eue.publish succ
   c1da0:	20737365 72006425 766f6d65 66206465     ess %d.removed f
   c1db0:	20656c69 70006425 696c6275 66206873     ile %d.publish f
   c1dc0:	656c6961 64252064 69727700 676e6974     ailed %d.writing
   c1dd0:	206f7420 656c6966 66612073 20726574      to files after 
   c1de0:	6c627570 20687369 6c696166 00657275     publish failure.
   c1df0:	2e707061 71627570 00000000              app.pubq....

000c1dfc <_ZTV17PublishQueuePosix>:
	...
   c1e04:	000b9cf1 000b9fad 000b9fd1              ............

000c1e10 <_ZTV15RHGenericDriver>:
	...
   c1e20:	000ba0f1 000b40a5 000b40a5 000b40a5     .....@...@...@..
   c1e30:	000b40a5 000ba153 000ba0f5 000ba1a3     .@..S...........
   c1e40:	000ba171 000ba1c7 000ba0ff 000ba107     q...............
   c1e50:	000ba10b 000ba10f 000ba113 000ba117     ................
   c1e60:	000ba103 000ba123 000ba127 000ba12b     ....#...'...+...
   c1e70:	000ba12f 000ba133 000ba139 000ba13d     /...3...9...=...
   c1e80:	000ba0ff 000ba141 000ba147 000ba14d     ....A...G...M...

000c1e90 <_ZTV12RHGenericSPI>:
	...
   c1e98:	000b40a5 000ba225 000ba227 000b40a5     .@..%...'....@..
   c1ea8:	000b40a5 000ba22f 000ba233 000ba237     .@../...3...7...
   c1eb8:	000ba229 000ba22b 000ba22d 61666564     )...+...-...defa
   c1ec8:	20746c75 42534d00 42534c00 50533c00     ult .MSB.LSB.<SP
   c1ed8:	74655349 676e6974 65642073 6c756166     ISettings defaul
   c1ee8:	3c003e74 53495053 69747465 2073676e     t>.<SPISettings 
   c1ef8:	75257325 20732520 45444f4d 003e7525     %s%u %s MODE%u>.

000c1f08 <_ZTVN8particle11SPISettingsE>:
	...
   c1f10:	000ba27d 000ba251 000ba253              }...Q...S...

000c1f1c <_ZTV13RHHardwareSPI>:
	...
   c1f24:	000ba331 000ba345 000ba353 000ba361     1...E...S...a...
   c1f34:	000ba3cd 000ba22f 000ba233 000ba237     ..../...3...7...
   c1f44:	000ba3db 000ba3ef 000ba3fd              ............

000c1f50 <_ZTV6RHMesh>:
	...
   c1f58:	000ba4c9 000ba771 000ba429 000ba415     ....q...).......

000c1f68 <_ZTV8RHRouter>:
	...
   c1f70:	000ba9dd 000baa21                       ....!...

000c1f78 <_ZTV11RHSPIDriver>:
	...
   c1f88:	000bacbd 000b40a5 000b40a5 000b40a5     .....@...@...@..
   c1f98:	000b40a5 000ba153 000ba0f5 000ba1a3     .@..S...........
   c1fa8:	000ba171 000ba1c7 000ba0ff 000ba107     q...............
   c1fb8:	000ba10b 000ba10f 000ba113 000ba117     ................
   c1fc8:	000ba103 000ba123 000ba127 000ba12b     ....#...'...+...
   c1fd8:	000ba12f 000ba133 000ba139 000ba13d     /...3...9...=...
   c1fe8:	000ba0ff 000ba141 000ba147 000ba14d     ....A...G...M...
   c1ff8:	000bace9 000bacf3                       ........

000c2000 <_ZL18MODEM_CONFIG_TABLE>:
   c2000:	92047472 94480474 0cc47804 0004b472     rt..t.H..x..r...

000c2010 <_ZTV7RH_RF95>:
	...
   c2018:	000bae5b 000bae93 000bb369 000bb1ff     [.......i.......
   c2028:	000baec9 000bb247 000bae57 000ba153     ....G...W...S...
   c2038:	000ba0f5 000ba1a3 000ba171 000ba1c7     ........q.......
   c2048:	000bae5d 000ba107 000ba10b 000ba10f     ]...............
   c2058:	000ba113 000ba117 000ba103 000ba123     ............#...
   c2068:	000ba127 000ba12b 000ba12f 000ba133     '...+.../...3...
   c2078:	000ba139 000ba13d 000baea3 000ba141     9...=.......A...
   c2088:	000ba147 000ba14d 000bace9 000bacf3     G...M...........
   c2098:	000bae53 64383025 72002f00 766f6d65     S...%08d./.remov
   c20a8:	25206465 73250073 69786520 20737473     ed %s.%s exists 
   c20b8:	20646e61 61207369 72696420 6f746365     and is a directo
   c20c8:	66007972 20656c69 74206e69 77206568     ry.file in the w
   c20d8:	202c7961 656c6564 676e6974 00732520     ay, deleting %s.
   c20e8:	74617473 6c696620 65206465 6f6e7272     stat filed errno
   c20f8:	0064253d 61657263 20646574 20726964     =%d.created dir 
   c2108:	6d007325 7269646b 69616620 2064656c     %s.mkdir failed 
   c2118:	6e727265 64253d6f 636e7500 69666e6f     errno=%d.unconfi
   c2128:	65727567 69642064 74615072 63730068     gured dirPath.sc
   c2138:	696e6e61 2520676e 69772073 70206874     anning %s with p
   c2148:	65747461 25206e72 64610073 676e6964     attern %s.adding
   c2158:	206f7420 75657571 64252065 00732520      to queue %d %s.
   c2168:	46746567 46656c69 516d6f72 65756575     getFileFromQueue
   c2178:	74657220 656e7275 64252064 70706100      returned %d.app
   c2188:	7165732e 656c6966 00000000              .seqfile....

000c2194 <_ZTV14SequentialFile>:
	...
   c219c:	000bb7c5 000bb7f1 000bb471 3a746f67     ........q...got:
   c21ac:	67616d20 253d6369 20783830 73726576      magic=%08x vers
   c21bc:	3d6e6f69 78343025 7a697320 30253d65     ion=%04x size=%0
   c21cc:	68207834 3d687361 78383025 70786500     4x hash=%08x.exp
   c21dc:	616d203a 3d636967 78383025 72657620     : magic=%08x ver
   c21ec:	6e6f6973 3430253d 69732078 253d657a     sion=%04x size=%
   c21fc:	20783430 68736168 3830253d 00000078     04x hash=%08x...

000c220c <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   c2214:	000bbb1f 000bbb6b 000bbb1d 000bbb25     ....k.......%...
   c2224:	000bbb4d 000bbce1 000bbd79              M.......y...

000c2230 <_ZTVN5spark13CellularClassE>:
	...
   c2238:	000bc7e7 000bc7dd 000bc7d3 000bc789     ................
   c2248:	000bc7c7 000bc7bb 000be5d9 000be5e1     ................
   c2258:	000bc7af 000bc7a7 000bc79d 000bc793     ................
   c2268:	000be611                                ....

000c226c <_ZTV14CellularSignal>:
	...
   c2274:	000bc875 000bc8d9 000bc877 000bc8e9     u.......w.......
   c2284:	000bc91d 000bc949 000bc97d 000bc89d     ....I...}.......
   c2294:	000bc87b 000bc897 fffffffc 00000000     {...............
   c22a4:	000bc8d1                                ....

000c22a8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c22b0:	000bc9c1 000bc9c7 000bca05 000bc9d5     ................
   c22c0:	000bc9c3                                ....

000c22c4 <_ZTVN5spark13EthernetClassE>:
	...
   c22cc:	000bcfcf 000bcfc5 000bcfbb 000bcfb1     ................
   c22dc:	000bcfa5 000bcf99 000be5d9 000be5e1     ................
   c22ec:	000bcf8d 000bcf85 000bcf7b 000bcf71     ........{...q...
   c22fc:	000be611                                ....

000c2300 <_ZTV7TwoWire>:
	...
   c2308:	000bd09f 000bd0e9 000bd0c1 000bd0a1     ................
   c2318:	000bd0c9 000bd0d1 000bd0d9 000bd0e1     ................

000c2328 <_ZTV9IPAddress>:
	...
   c2330:	000bd299 000bd289 000bd28b 34302575     ............u%04
   c2340:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   c2350:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   c2360:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   c2370:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   c2380:	005b2000 65646f63 00203d20 61746564     . [.code = .deta
   c2390:	20736c69 0d00203d 6e6c000a 006e6600     ils = ....ln.fn.
   c23a0:	65646f63 74656400 006c6961              code.detail.

000c23ac <_ZTVN5spark16JSONStreamWriterE>:
	...
   c23b4:	000bd745 000bd76b 000bd729 000bd3a7     E...k...).......

000c23c4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c23cc:	000bdb29 000bdb41 000be281 000b6457     )...A.......Wd..

000c23dc <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c23e4:	000bdb55 000bdb69 000be425 000bd731     U...i...%...1...

000c23f4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c23fc:	000bd743 000bd779 000be1e5 000bd733     C...y.......3...

000c240c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c2414:	000bd741 000bd787 000bda91 000bd7a9     A...............

000c2424 <_ZTVN5spark12NetworkClassE>:
	...
   c242c:	000be599 000be5a3 000be5ad 000be5b7     ................
   c243c:	000be5c1 000be5cd 000be5d9 000be5e1     ................
   c244c:	000be5e9 000be5f5 000be5fd 000be607     ................
   c245c:	000be611 006e616e 00666e69 0066766f     ....nan.inf.ovf.

000c246c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c246c:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   c247c:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   c248c:	72756769 6f697461 7369206e 766e6920     iguration is inv
   c249c:	64696c61 5925002e 2d6d252d 25546425     alid..%Y-%m-%dT%
   c24ac:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   c24bc:	00000065                                e...

000c24c0 <_ZTV11USARTSerial>:
	...
   c24c8:	000bf49d 000bf509 000bf4e1 000be861     ............a...
   c24d8:	000bf4b1 000bf4cd 000bf4bf 000bf4db     ................
   c24e8:	000bf49f 000bf4a3                       ........

000c24f0 <_ZTV9USBSerial>:
	...
   c24f8:	000bf55b 000bf5c3 000bf599 000be861     [...........a...
   c2508:	000bf58b 000bf55d 000bf56d 000bf5bd     ....]...m.......
   c2518:	000bf57d 000bf555                       }...U...

000c2520 <_ZSt7nothrow>:
   c2520:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   c2530:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000c2541 <day_name.1>:
   c2541:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   c2551:	61536972                                 riSat

000c2556 <mon_name.0>:
   c2556:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   c2566:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   c2576:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   c2586:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   c2596:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   c25a6:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   c25b6:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   c25c6:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   c25d6:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
   c25e6:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
   c25f6:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   c2606:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   c2616:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   c2626:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   c2636:	696c6474 61722f62 632e646e               tdlib/rand.c.

000c2643 <_ctype_>:
   c2643:	20202000 20202020 28282020 20282828     .         ((((( 
   c2653:	20202020 20202020 20202020 20202020                     
   c2663:	10108820 10101010 10101010 10101010      ...............
   c2673:	04040410 04040404 10040404 10101010     ................
   c2683:	41411010 41414141 01010101 01010101     ..AAAAAA........
   c2693:	01010101 01010101 01010101 10101010     ................
   c26a3:	42421010 42424242 02020202 02020202     ..BBBBBB........
   c26b3:	02020202 02020202 02020202 10101010     ................
   c26c3:	00000020 00000000 00000000 00000000      ...............
	...

000c2744 <link_const_variable_data_end>:
   c2744:	000b4afd 	.word	0x000b4afd
   c2748:	000b53ed 	.word	0x000b53ed
   c274c:	000b633d 	.word	0x000b633d
   c2750:	000b6a09 	.word	0x000b6a09
   c2754:	000b6e19 	.word	0x000b6e19
   c2758:	000b793d 	.word	0x000b793d
   c275c:	000b9f9d 	.word	0x000b9f9d
   c2760:	000ba405 	.word	0x000ba405
   c2764:	000bbb0d 	.word	0x000bbb0d
   c2768:	000bc779 	.word	0x000bc779
   c276c:	000bc845 	.word	0x000bc845
   c2770:	000bcfd9 	.word	0x000bcfd9
   c2774:	000be271 	.word	0x000be271
   c2778:	000be6e9 	.word	0x000be6e9
   c277c:	000beb51 	.word	0x000beb51
   c2780:	000bf151 	.word	0x000bf151
   c2784:	000bf489 	.word	0x000bf489

000c2788 <link_constructors_end>:
	...
