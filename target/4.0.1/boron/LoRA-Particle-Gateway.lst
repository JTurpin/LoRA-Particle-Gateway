
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/4.0.1/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000115f0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c5610  000c5610  00015610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c5634  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002e8  2003d58c  000c5638  0002d58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000f7c  2003d878  2003d878  0003d878  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c5920  000c5920  00035920  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c594c  000c594c  0003594c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0029cb26  00000000  00000000  00035950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002c986  00000000  00000000  002d2476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0006ed5e  00000000  00000000  002fedfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00005070  00000000  00000000  0036db5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000126d0  00000000  00000000  00372bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0005eeae  00000000  00000000  0038529a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0009600b  00000000  00000000  003e4148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001739ee  00000000  00000000  0047a153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000f7fc  00000000  00000000  005edb44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00c ffcd 	bl	c0fd0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00c ffef 	bl	c1020 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d58c 	.word	0x2003d58c
   b404c:	000c5638 	.word	0x000c5638
   b4050:	2003d874 	.word	0x2003d874
   b4054:	2003d878 	.word	0x2003d878
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00c f891 	bl	c0188 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c55c4 	.word	0x000c55c4
   b4080:	000c5608 	.word	0x000c5608

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bcec 	b.w	b5a60 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fdf1 	bl	b5c70 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00c b831 	b.w	c00f8 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f008 bfcb 	b.w	bd030 <malloc>

000b409a <_Znaj>:
   b409a:	f008 bfc9 	b.w	bd030 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f008 bfcf 	b.w	bd040 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f008 fe4a 	bl	bcd44 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000bc8e5 	.word	0x000bc8e5
   b40b8:	000c33f4 	.word	0x000c33f4

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b40ce:	4770      	bx	lr

000b40d0 <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b40d0:	b510      	push	{r4, lr}
}
   b40d2:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b40d4:	4604      	mov	r4, r0
}
   b40d6:	f7ff ffe2 	bl	b409e <_ZdlPvj>
   b40da:	4620      	mov	r0, r4
   b40dc:	bd10      	pop	{r4, pc}
	...

000b40e0 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b40e0:	b510      	push	{r4, lr}
   b40e2:	4b05      	ldr	r3, [pc, #20]	; (b40f8 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b40e4:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b40e6:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b40e8:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b40ea:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b40ee:	f008 fe51 	bl	bcd94 <led_set_status_active>
}
   b40f2:	4620      	mov	r0, r4
   b40f4:	bd10      	pop	{r4, pc}
   b40f6:	bf00      	nop
   b40f8:	000c39e8 	.word	0x000c39e8

000b40fc <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b40fc:	b510      	push	{r4, lr}
   b40fe:	4604      	mov	r4, r0
}
   b4100:	f7ff ffee 	bl	b40e0 <_ZN8particle9LEDStatusD1Ev>
   b4104:	4620      	mov	r0, r4
   b4106:	2120      	movs	r1, #32
   b4108:	f7ff ffc9 	bl	b409e <_ZdlPvj>
   b410c:	4620      	mov	r0, r4
   b410e:	bd10      	pop	{r4, pc}

000b4110 <_ZN16JsonParserStaticILj1024ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b4110:	b510      	push	{r4, lr}
   b4112:	4b03      	ldr	r3, [pc, #12]	; (b4120 <_ZN16JsonParserStaticILj1024ELj50EED1Ev+0x10>)
   b4114:	6003      	str	r3, [r0, #0]
   b4116:	4604      	mov	r4, r0
   b4118:	f004 fb12 	bl	b8740 <_ZN10JsonParserD1Ev>
   b411c:	4620      	mov	r0, r4
   b411e:	bd10      	pop	{r4, pc}
   b4120:	000c39fc 	.word	0x000c39fc

000b4124 <_ZN16JsonParserStaticILj1024ELj50EED0Ev>:
   b4124:	b510      	push	{r4, lr}
   b4126:	4604      	mov	r4, r0
   b4128:	f7ff fff2 	bl	b4110 <_ZN16JsonParserStaticILj1024ELj50EED1Ev>
   b412c:	4620      	mov	r0, r4
   b412e:	f240 714c 	movw	r1, #1868	; 0x74c
   b4132:	f7ff ffb4 	bl	b409e <_ZdlPvj>
   b4136:	4620      	mov	r0, r4
   b4138:	bd10      	pop	{r4, pc}

000b413a <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b413a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b413c:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b413e:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4140:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b4142:	f004 fcdf 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b4146:	b120      	cbz	r0, b4152 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4148:	9901      	ldr	r1, [sp, #4]
   b414a:	462a      	mov	r2, r5
   b414c:	4620      	mov	r0, r4
   b414e:	f004 fbef 	bl	b8930 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	}
   b4152:	b003      	add	sp, #12
   b4154:	bd30      	pop	{r4, r5, pc}

000b4156 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4156:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4158:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b415a:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b415c:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b415e:	f004 fcd1 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b4162:	b120      	cbz	r0, b416e <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4164:	9901      	ldr	r1, [sp, #4]
   b4166:	462a      	mov	r2, r5
   b4168:	4620      	mov	r0, r4
   b416a:	f004 fcad 	bl	b8ac8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b416e:	b003      	add	sp, #12
   b4170:	bd30      	pop	{r4, r5, pc}

000b4172 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4172:	b40e      	push	{r1, r2, r3}
   b4174:	b500      	push	{lr}
   b4176:	b08c      	sub	sp, #48	; 0x30
   b4178:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b417a:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b417e:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4182:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4184:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4188:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b418a:	6801      	ldr	r1, [r0, #0]
   b418c:	aa04      	add	r2, sp, #16
   b418e:	201e      	movs	r0, #30
    attr.flags = 0;
   b4190:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4194:	f008 fde6 	bl	bcd64 <log_message_v>
}
   b4198:	b00c      	add	sp, #48	; 0x30
   b419a:	f85d eb04 	ldr.w	lr, [sp], #4
   b419e:	b003      	add	sp, #12
   b41a0:	4770      	bx	lr
	...

000b41a4 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b41a4:	b510      	push	{r4, lr}
    if (!_instance) {
   b41a6:	4c06      	ldr	r4, [pc, #24]	; (b41c0 <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b41a8:	6823      	ldr	r3, [r4, #0]
   b41aa:	b933      	cbnz	r3, b41ba <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b41ac:	2004      	movs	r0, #4
   b41ae:	f7ff ff72 	bl	b4096 <_Znwj>
   b41b2:	b108      	cbz	r0, b41b8 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b41b4:	4b03      	ldr	r3, [pc, #12]	; (b41c4 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b41b6:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b41b8:	6020      	str	r0, [r4, #0]
}
   b41ba:	6820      	ldr	r0, [r4, #0]
   b41bc:	bd10      	pop	{r4, pc}
   b41be:	bf00      	nop
   b41c0:	2003d87c 	.word	0x2003d87c
   b41c4:	000c3a0c 	.word	0x000c3a0c

000b41c8 <_ZN14LoRA_Functions4loopEv>:
	return true;
}

void LoRA_Functions::loop() {
												
}
   b41c8:	4770      	bx	lr
	...

000b41cc <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b41cc:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b41ce:	4c06      	ldr	r4, [pc, #24]	; (b41e8 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b41d0:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b41d2:	f10d 0203 	add.w	r2, sp, #3
   b41d6:	a901      	add	r1, sp, #4
   b41d8:	4620      	mov	r0, r4
   b41da:	f007 fb8b 	bl	bb8f4 <_ZN7RH_RF954recvEPhS0_>
   b41de:	2800      	cmp	r0, #0
   b41e0:	d1f7      	bne.n	b41d2 <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b41e2:	b040      	add	sp, #256	; 0x100
   b41e4:	bd10      	pop	{r4, pc}
   b41e6:	bf00      	nop
   b41e8:	2003d8fc 	.word	0x2003d8fc

000b41ec <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             	// Here is where we will power down the LoRA radio module
   b41ec:	4801      	ldr	r0, [pc, #4]	; (b41f4 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b41ee:	f007 bb6e 	b.w	bb8ce <_ZN7RH_RF955sleepEv>
   b41f2:	bf00      	nop
   b41f4:	2003d8fc 	.word	0x2003d8fc

000b41f8 <_ZN14LoRA_Functions15initializeRadioEv>:
}

bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b41f8:	4b13      	ldr	r3, [pc, #76]	; (b4248 <_ZN14LoRA_Functions15initializeRadioEv+0x50>)
bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
   b41fa:	b510      	push	{r4, lr}
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b41fc:	881c      	ldrh	r4, [r3, #0]
   b41fe:	2100      	movs	r1, #0
   b4200:	4620      	mov	r0, r4
   b4202:	f00c f85a 	bl	c02ba <digitalWrite>
	delay(10);
   b4206:	200a      	movs	r0, #10
   b4208:	f008 ff92 	bl	bd130 <delay>
	digitalWrite(RFM95_RST,HIGH);
   b420c:	2101      	movs	r1, #1
   b420e:	4620      	mov	r0, r4
   b4210:	f00c f853 	bl	c02ba <digitalWrite>
	delay(10);
   b4214:	200a      	movs	r0, #10
   b4216:	f008 ff8b 	bl	bd130 <delay>

	if (!manager.init()) {
   b421a:	480c      	ldr	r0, [pc, #48]	; (b424c <_ZN14LoRA_Functions15initializeRadioEv+0x54>)
   b421c:	f007 f8f5 	bl	bb40a <_ZN8RHRouter4initEv>
   b4220:	4604      	mov	r4, r0
   b4222:	b928      	cbnz	r0, b4230 <_ZN14LoRA_Functions15initializeRadioEv+0x38>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b4224:	490a      	ldr	r1, [pc, #40]	; (b4250 <_ZN14LoRA_Functions15initializeRadioEv+0x58>)
   b4226:	480b      	ldr	r0, [pc, #44]	; (b4254 <_ZN14LoRA_Functions15initializeRadioEv+0x5c>)
   b4228:	f7ff ffa3 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
	}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?

return true;
}
   b422c:	4620      	mov	r0, r4
   b422e:	bd10      	pop	{r4, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b4230:	ed9f 0a09 	vldr	s0, [pc, #36]	; b4258 <_ZN14LoRA_Functions15initializeRadioEv+0x60>
   b4234:	4809      	ldr	r0, [pc, #36]	; (b425c <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
   b4236:	f007 fbe3 	bl	bba00 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b423a:	4808      	ldr	r0, [pc, #32]	; (b425c <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
   b423c:	2200      	movs	r2, #0
   b423e:	2117      	movs	r1, #23
   b4240:	f007 fd58 	bl	bbcf4 <_ZN7RH_RF9510setTxPowerEab>
return true;
   b4244:	e7f2      	b.n	b422c <_ZN14LoRA_Functions15initializeRadioEv+0x34>
   b4246:	bf00      	nop
   b4248:	000c43b8 	.word	0x000c43b8
   b424c:	2003e178 	.word	0x2003e178
   b4250:	000c3409 	.word	0x000c3409
   b4254:	2003e658 	.word	0x2003e658
   b4258:	4464c000 	.word	0x4464c000
   b425c:	2003d8fc 	.word	0x2003d8fc

000b4260 <_ZN14LoRA_Functions5setupEb>:
bool LoRA_Functions::setup(bool gatewayID) {
   b4260:	b510      	push	{r4, lr}
   b4262:	460c      	mov	r4, r1
   b4264:	b086      	sub	sp, #24
	LoRA_Functions::initializeRadio();
   b4266:	f7ff ffc7 	bl	b41f8 <_ZN14LoRA_Functions15initializeRadioEv>
	if (gatewayID == true) {
   b426a:	b374      	cbz	r4, b42ca <_ZN14LoRA_Functions5setupEb+0x6a>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b426c:	f002 f8be 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b4270:	2100      	movs	r1, #0
   b4272:	f002 fa55 	bl	b6720 <_ZN13sysStatusData14set_nodeNumberEh>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4276:	a802      	add	r0, sp, #8
   b4278:	f008 fe42 	bl	bcf00 <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b427c:	9a02      	ldr	r2, [sp, #8]
   b427e:	4930      	ldr	r1, [pc, #192]	; (b4340 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b4280:	4830      	ldr	r0, [pc, #192]	; (b4344 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b4282:	f7ff ff76 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4286:	a802      	add	r0, sp, #8
   b4288:	f00b fa54 	bl	bf734 <_ZN6StringD1Ev>
	jp.addString(nodeID.get_nodeIDJson());				// Read in the JSON string from memory
   b428c:	f002 f96e 	bl	b656c <_ZN10nodeIDData8instanceEv>
   b4290:	4601      	mov	r1, r0
   b4292:	a802      	add	r0, sp, #8
   b4294:	f002 f990 	bl	b65b8 <_ZNK10nodeIDData14get_nodeIDJsonEv>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4298:	9902      	ldr	r1, [sp, #8]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b429a:	9101      	str	r1, [sp, #4]
   b429c:	4608      	mov	r0, r1
   b429e:	f00c ff8a 	bl	c11b6 <strlen>
   b42a2:	9901      	ldr	r1, [sp, #4]
   b42a4:	4602      	mov	r2, r0
   b42a6:	4828      	ldr	r0, [pc, #160]	; (b4348 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b42a8:	f004 fa85 	bl	b87b6 <_ZN10JsonBuffer7addDataEPKcj>
   b42ac:	a802      	add	r0, sp, #8
   b42ae:	f00b fa41 	bl	bf734 <_ZN6StringD1Ev>
	if (jp.parse()) Log.info("Parsed Successfully");
   b42b2:	4825      	ldr	r0, [pc, #148]	; (b4348 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b42b4:	f004 ffd8 	bl	b9268 <_ZN10JsonParser5parseEv>
   b42b8:	2800      	cmp	r0, #0
   b42ba:	d03b      	beq.n	b4334 <_ZN14LoRA_Functions5setupEb+0xd4>
   b42bc:	4923      	ldr	r1, [pc, #140]	; (b434c <_ZN14LoRA_Functions5setupEb+0xec>)
		Log.info("Parsing error resetting nodeID database");
   b42be:	4821      	ldr	r0, [pc, #132]	; (b4344 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b42c0:	f7ff ff57 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
}
   b42c4:	2001      	movs	r0, #1
   b42c6:	b006      	add	sp, #24
   b42c8:	bd10      	pop	{r4, pc}
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b42ca:	f002 f88f 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b42ce:	f002 f9b9 	bl	b6644 <_ZNK13sysStatusData14get_nodeNumberEv>
   b42d2:	b1d8      	cbz	r0, b430c <_ZN14LoRA_Functions5setupEb+0xac>
   b42d4:	f002 f88a 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b42d8:	f002 f9b4 	bl	b6644 <_ZNK13sysStatusData14get_nodeNumberEv>
   b42dc:	280a      	cmp	r0, #10
   b42de:	d815      	bhi.n	b430c <_ZN14LoRA_Functions5setupEb+0xac>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b42e0:	f002 f884 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b42e4:	f002 f9ae 	bl	b6644 <_ZNK13sysStatusData14get_nodeNumberEv>
   b42e8:	4601      	mov	r1, r0
   b42ea:	4819      	ldr	r0, [pc, #100]	; (b4350 <_ZN14LoRA_Functions5setupEb+0xf0>)
   b42ec:	f006 fbb9 	bl	baa62 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b42f0:	4817      	ldr	r0, [pc, #92]	; (b4350 <_ZN14LoRA_Functions5setupEb+0xf0>)
   b42f2:	f006 fb9c 	bl	baa2e <_ZN10RHDatagram11thisAddressEv>
   b42f6:	9001      	str	r0, [sp, #4]
   b42f8:	a802      	add	r0, sp, #8
   b42fa:	f008 fe01 	bl	bcf00 <spark_deviceID>
   b42fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b4302:	4914      	ldr	r1, [pc, #80]	; (b4354 <_ZN14LoRA_Functions5setupEb+0xf4>)
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4304:	480f      	ldr	r0, [pc, #60]	; (b4344 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b4306:	f7ff ff34 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
   b430a:	e7bc      	b.n	b4286 <_ZN14LoRA_Functions5setupEb+0x26>
		sysStatus.set_nodeNumber(11);
   b430c:	f002 f86e 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b4310:	210b      	movs	r1, #11
   b4312:	f002 fa05 	bl	b6720 <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b4316:	210b      	movs	r1, #11
   b4318:	480d      	ldr	r0, [pc, #52]	; (b4350 <_ZN14LoRA_Functions5setupEb+0xf0>)
   b431a:	f006 fba2 	bl	baa62 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b431e:	480c      	ldr	r0, [pc, #48]	; (b4350 <_ZN14LoRA_Functions5setupEb+0xf0>)
   b4320:	f006 fb85 	bl	baa2e <_ZN10RHDatagram11thisAddressEv>
   b4324:	9001      	str	r0, [sp, #4]
   b4326:	a802      	add	r0, sp, #8
   b4328:	f008 fdea 	bl	bcf00 <spark_deviceID>
   b432c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b4330:	4909      	ldr	r1, [pc, #36]	; (b4358 <_ZN14LoRA_Functions5setupEb+0xf8>)
   b4332:	e7e7      	b.n	b4304 <_ZN14LoRA_Functions5setupEb+0xa4>
		nodeID.resetNodeIDs();
   b4334:	f002 f91a 	bl	b656c <_ZN10nodeIDData8instanceEv>
   b4338:	f002 f956 	bl	b65e8 <_ZN10nodeIDData12resetNodeIDsEv>
		Log.info("Parsing error resetting nodeID database");
   b433c:	4907      	ldr	r1, [pc, #28]	; (b435c <_ZN14LoRA_Functions5setupEb+0xfc>)
   b433e:	e7be      	b.n	b42be <_ZN14LoRA_Functions5setupEb+0x5e>
   b4340:	000c3415 	.word	0x000c3415
   b4344:	2003e658 	.word	0x2003e658
   b4348:	2003da2c 	.word	0x2003da2c
   b434c:	000c34cd 	.word	0x000c34cd
   b4350:	2003e17c 	.word	0x2003e17c
   b4354:	000c344f 	.word	0x000c344f
   b4358:	000c3486 	.word	0x000c3486
   b435c:	000c34e1 	.word	0x000c34e1

000b4360 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>:
	return false; 
}

// These are the receive and respond messages for data reports

bool LoRA_Functions::decipherDataReportGateway() {			// Receives the data report and loads results into current object for reporting
   b4360:	b538      	push	{r3, r4, r5, lr}

	current.set_hourlyCount(buf[3] << 8 | buf[4]);
   b4362:	4c24      	ldr	r4, [pc, #144]	; (b43f4 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x94>)
   b4364:	f002 f87a 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4368:	f8b4 1003 	ldrh.w	r1, [r4, #3]
   b436c:	ba49      	rev16	r1, r1
   b436e:	b289      	uxth	r1, r1
   b4370:	f002 faa8 	bl	b68c4 <_ZN17currentStatusData15set_hourlyCountEt>
	current.set_dailyCount(buf[5] << 8 | buf[6]);
   b4374:	f002 f872 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4378:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   b437c:	ba49      	rev16	r1, r1
   b437e:	b289      	uxth	r1, r1
   b4380:	f002 faa6 	bl	b68d0 <_ZN17currentStatusData14set_dailyCountEt>
	current.set_sensorType(buf[7]);
   b4384:	f002 f86a 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4388:	79e1      	ldrb	r1, [r4, #7]
   b438a:	f002 fa29 	bl	b67e0 <_ZN17currentStatusData14set_sensorTypeEh>
	current.set_internalTempC(buf[8]);
   b438e:	f002 f865 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4392:	7a21      	ldrb	r1, [r4, #8]
   b4394:	f002 fa00 	bl	b6798 <_ZN17currentStatusData17set_internalTempCEh>
	current.set_stateOfCharge(buf[9]);
   b4398:	f002 f860 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b439c:	4605      	mov	r5, r0
   b439e:	7a60      	ldrb	r0, [r4, #9]
   b43a0:	f00c f9e4 	bl	c076c <__aeabi_ui2d>
   b43a4:	ec41 0b10 	vmov	d0, r0, r1
   b43a8:	4628      	mov	r0, r5
   b43aa:	f002 f89d 	bl	b64e8 <_ZN17currentStatusData17set_stateOfChargeEd>
	current.set_batteryState(buf[10]);
   b43ae:	f002 f855 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b43b2:	7aa1      	ldrb	r1, [r4, #10]
   b43b4:	f002 f9f6 	bl	b67a4 <_ZN17currentStatusData16set_batteryStateEh>
	current.set_resetCount(buf[11]);
   b43b8:	f002 f850 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b43bc:	7ae1      	ldrb	r1, [r4, #11]
   b43be:	f002 f9f7 	bl	b67b0 <_ZN17currentStatusData14set_resetCountEh>
	current.set_messageCount(buf[12]);
   b43c2:	f002 f84b 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b43c6:	7b21      	ldrb	r1, [r4, #12]
   b43c8:	f002 f9f8 	bl	b67bc <_ZN17currentStatusData16set_messageCountEh>
	current.set_successCount(buf[13]);
   b43cc:	f002 f846 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b43d0:	7b61      	ldrb	r1, [r4, #13]
   b43d2:	f002 f9f9 	bl	b67c8 <_ZN17currentStatusData16set_successCountEh>
	current.set_RSSI(driver.lastRssi());
   b43d6:	f002 f841 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b43da:	4604      	mov	r4, r0
   b43dc:	4806      	ldr	r0, [pc, #24]	; (b43f8 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x98>)
   b43de:	f006 fbbe 	bl	bab5e <_ZN15RHGenericDriver8lastRssiEv>
   b43e2:	b281      	uxth	r1, r0
   b43e4:	4620      	mov	r0, r4
   b43e6:	f002 fa67 	bl	b68b8 <_ZN17currentStatusData8set_RSSIEt>

	lora_state = DATA_ACK;		// Prepare to respond
   b43ea:	4b04      	ldr	r3, [pc, #16]	; (b43fc <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x9c>)
   b43ec:	2204      	movs	r2, #4
   b43ee:	701a      	strb	r2, [r3, #0]

	return true;
}
   b43f0:	2001      	movs	r0, #1
   b43f2:	bd38      	pop	{r3, r4, r5, pc}
   b43f4:	2003d880 	.word	0x2003d880
   b43f8:	2003d8fc 	.word	0x2003d8fc
   b43fc:	2003d878 	.word	0x2003d878

000b4400 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>:
		return false;
	}
}

// These are the receive and respond messages for Alert Reports
bool LoRA_Functions::decipherAlertReportGateway() {
   b4400:	b510      	push	{r4, lr}
	current.set_alertCodeNode(buf[2]);
   b4402:	f002 f82b 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4406:	4b0e      	ldr	r3, [pc, #56]	; (b4440 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x40>)
   b4408:	7899      	ldrb	r1, [r3, #2]
   b440a:	f002 f9e3 	bl	b67d4 <_ZN17currentStatusData17set_alertCodeNodeEh>
	current.set_alertTimestampNode(Time.now());
   b440e:	f002 f825 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4412:	4604      	mov	r4, r0
   b4414:	f00b fd41 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b4418:	4602      	mov	r2, r0
   b441a:	17c3      	asrs	r3, r0, #31
   b441c:	4620      	mov	r0, r4
   b441e:	f002 fab1 	bl	b6984 <_ZN17currentStatusData22set_alertTimestampNodeEx>
	current.set_RSSI(driver.lastRssi() );
   b4422:	f002 f81b 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4426:	4604      	mov	r4, r0
   b4428:	4806      	ldr	r0, [pc, #24]	; (b4444 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x44>)
   b442a:	f006 fb98 	bl	bab5e <_ZN15RHGenericDriver8lastRssiEv>
   b442e:	b281      	uxth	r1, r0
   b4430:	4620      	mov	r0, r4
   b4432:	f002 fa41 	bl	b68b8 <_ZN17currentStatusData8set_RSSIEt>

	lora_state = ALERT_ACK;		// Prepare to respond
   b4436:	4b04      	ldr	r3, [pc, #16]	; (b4448 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x48>)
   b4438:	2206      	movs	r2, #6
   b443a:	701a      	strb	r2, [r3, #0]

	return true;
}
   b443c:	2001      	movs	r0, #1
   b443e:	bd10      	pop	{r4, pc}
   b4440:	2003d880 	.word	0x2003d880
   b4444:	2003d8fc 	.word	0x2003d8fc
   b4448:	2003d878 	.word	0x2003d878

000b444c <_ZN14LoRA_Functions12findDeviceIDEh>:
	nodeID.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage

	return index;
}

String LoRA_Functions::findDeviceID(uint8_t nodeNumber)  {
   b444c:	b530      	push	{r4, r5, lr}
	if (nodeNumber > 10) return "null";
   b444e:	2a0a      	cmp	r2, #10
String LoRA_Functions::findDeviceID(uint8_t nodeNumber)  {
   b4450:	b087      	sub	sp, #28
   b4452:	4604      	mov	r4, r0
   b4454:	4615      	mov	r5, r2
	if (nodeNumber > 10) return "null";
   b4456:	d905      	bls.n	b4464 <_ZN14LoRA_Functions12findDeviceIDEh+0x18>
   b4458:	4918      	ldr	r1, [pc, #96]	; (b44bc <_ZN14LoRA_Functions12findDeviceIDEh+0x70>)
   b445a:	f00b f9b6 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
	if(nodeObjectContainer == NULL) return "null";							// Ran out of entries - no match found
	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);	// Get the deviceID and compare
	if (nodeDeviceID == NULL) return "null";
		
	return nodeDeviceID;
}
   b445e:	4620      	mov	r0, r4
   b4460:	b007      	add	sp, #28
   b4462:	bd30      	pop	{r4, r5, pc}
	String nodeDeviceID;
   b4464:	4916      	ldr	r1, [pc, #88]	; (b44c0 <_ZN14LoRA_Functions12findDeviceIDEh+0x74>)
   b4466:	a802      	add	r0, sp, #8
   b4468:	f00b f9af 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b446c:	4815      	ldr	r0, [pc, #84]	; (b44c4 <_ZN14LoRA_Functions12findDeviceIDEh+0x78>)
   b446e:	f004 f9e4 	bl	b883a <_ZNK10JsonParser14getOuterObjectEv>
   b4472:	4a15      	ldr	r2, [pc, #84]	; (b44c8 <_ZN14LoRA_Functions12findDeviceIDEh+0x7c>)
   b4474:	4601      	mov	r1, r0
   b4476:	ab01      	add	r3, sp, #4
   b4478:	4812      	ldr	r0, [pc, #72]	; (b44c4 <_ZN14LoRA_Functions12findDeviceIDEh+0x78>)
   b447a:	f004 fb43 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b447e:	9901      	ldr	r1, [sp, #4]
   b4480:	4810      	ldr	r0, [pc, #64]	; (b44c4 <_ZN14LoRA_Functions12findDeviceIDEh+0x78>)
   b4482:	1e6a      	subs	r2, r5, #1
   b4484:	f004 f9fb 	bl	b887e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return "null";							// Ran out of entries - no match found
   b4488:	4601      	mov	r1, r0
   b448a:	b938      	cbnz	r0, b449c <_ZN14LoRA_Functions12findDeviceIDEh+0x50>
   b448c:	490b      	ldr	r1, [pc, #44]	; (b44bc <_ZN14LoRA_Functions12findDeviceIDEh+0x70>)
   b448e:	4620      	mov	r0, r4
   b4490:	f00b f99b 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
	String nodeDeviceID;
   b4494:	a802      	add	r0, sp, #8
   b4496:	f00b f94d 	bl	bf734 <_ZN6StringD1Ev>
   b449a:	e7e0      	b.n	b445e <_ZN14LoRA_Functions12findDeviceIDEh+0x12>
	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);	// Get the deviceID and compare
   b449c:	4809      	ldr	r0, [pc, #36]	; (b44c4 <_ZN14LoRA_Functions12findDeviceIDEh+0x78>)
   b449e:	4a0b      	ldr	r2, [pc, #44]	; (b44cc <_ZN14LoRA_Functions12findDeviceIDEh+0x80>)
   b44a0:	ab02      	add	r3, sp, #8
   b44a2:	f7ff fe58 	bl	b4156 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b44a6:	2100      	movs	r1, #0
   b44a8:	a802      	add	r0, sp, #8
   b44aa:	f00b fa54 	bl	bf956 <_ZNK6String6equalsEPKc>
	if (nodeDeviceID == NULL) return "null";
   b44ae:	2800      	cmp	r0, #0
   b44b0:	d1ec      	bne.n	b448c <_ZN14LoRA_Functions12findDeviceIDEh+0x40>
	return nodeDeviceID;
   b44b2:	a902      	add	r1, sp, #8
   b44b4:	4620      	mov	r0, r4
   b44b6:	f00b f9b9 	bl	bf82c <_ZN6StringC1EOS_>
   b44ba:	e7eb      	b.n	b4494 <_ZN14LoRA_Functions12findDeviceIDEh+0x48>
   b44bc:	000c3509 	.word	0x000c3509
   b44c0:	000c4fe0 	.word	0x000c4fe0
   b44c4:	2003da2c 	.word	0x2003da2c
   b44c8:	000c350e 	.word	0x000c350e
   b44cc:	000c3514 	.word	0x000c3514

000b44d0 <_ZN14LoRA_Functions7getTypeEi>:
		return false;
	}
}

byte LoRA_Functions::getType(int nodeNumber) {
	if (nodeNumber > 10) return 255;
   b44d0:	290a      	cmp	r1, #10
byte LoRA_Functions::getType(int nodeNumber) {
   b44d2:	b513      	push	{r0, r1, r4, lr}
   b44d4:	460c      	mov	r4, r1
	if (nodeNumber > 10) return 255;
   b44d6:	dc13      	bgt.n	b4500 <_ZN14LoRA_Functions7getTypeEi+0x30>

	int type;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b44d8:	480f      	ldr	r0, [pc, #60]	; (b4518 <_ZN14LoRA_Functions7getTypeEi+0x48>)
   b44da:	f004 f9ae 	bl	b883a <_ZNK10JsonParser14getOuterObjectEv>
   b44de:	4a0f      	ldr	r2, [pc, #60]	; (b451c <_ZN14LoRA_Functions7getTypeEi+0x4c>)
   b44e0:	4601      	mov	r1, r0
   b44e2:	ab01      	add	r3, sp, #4
   b44e4:	480c      	ldr	r0, [pc, #48]	; (b4518 <_ZN14LoRA_Functions7getTypeEi+0x48>)
   b44e6:	f004 fb0d 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b44ea:	9901      	ldr	r1, [sp, #4]
   b44ec:	480a      	ldr	r0, [pc, #40]	; (b4518 <_ZN14LoRA_Functions7getTypeEi+0x48>)
   b44ee:	1e62      	subs	r2, r4, #1
   b44f0:	f004 f9c5 	bl	b887e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   b44f4:	4601      	mov	r1, r0
   b44f6:	b928      	cbnz	r0, b4504 <_ZN14LoRA_Functions7getTypeEi+0x34>
		Log.info("From getType function Node number not found");
   b44f8:	4909      	ldr	r1, [pc, #36]	; (b4520 <_ZN14LoRA_Functions7getTypeEi+0x50>)
   b44fa:	480a      	ldr	r0, [pc, #40]	; (b4524 <_ZN14LoRA_Functions7getTypeEi+0x54>)
   b44fc:	f7ff fe39 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber > 10) return 255;
   b4500:	20ff      	movs	r0, #255	; 0xff
   b4502:	e006      	b.n	b4512 <_ZN14LoRA_Functions7getTypeEi+0x42>
		return 255;															// Ran out of entries 
	} 

	jp.getValueByKey(nodeObjectContainer, "type", type);
   b4504:	4804      	ldr	r0, [pc, #16]	; (b4518 <_ZN14LoRA_Functions7getTypeEi+0x48>)
   b4506:	4a08      	ldr	r2, [pc, #32]	; (b4528 <_ZN14LoRA_Functions7getTypeEi+0x58>)
   b4508:	466b      	mov	r3, sp
   b450a:	f7ff fe16 	bl	b413a <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>

	return type;
   b450e:	f89d 0000 	ldrb.w	r0, [sp]

}
   b4512:	b002      	add	sp, #8
   b4514:	bd10      	pop	{r4, pc}
   b4516:	bf00      	nop
   b4518:	2003da2c 	.word	0x2003da2c
   b451c:	000c350e 	.word	0x000c350e
   b4520:	000c3518 	.word	0x000c3518
   b4524:	2003e658 	.word	0x2003e658
   b4528:	000c3544 	.word	0x000c3544

000b452c <_ZN14LoRA_Functions8getAlertEi>:
	return true;

}

byte LoRA_Functions::getAlert(int nodeNumber) {
	if (nodeNumber > 10) return 255;										// Not a configured node
   b452c:	290a      	cmp	r1, #10
byte LoRA_Functions::getAlert(int nodeNumber) {
   b452e:	b513      	push	{r0, r1, r4, lr}
   b4530:	460c      	mov	r4, r1
	if (nodeNumber > 10) return 255;										// Not a configured node
   b4532:	dc13      	bgt.n	b455c <_ZN14LoRA_Functions8getAlertEi+0x30>

	int pendingAlert;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4534:	480f      	ldr	r0, [pc, #60]	; (b4574 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b4536:	f004 f980 	bl	b883a <_ZNK10JsonParser14getOuterObjectEv>
   b453a:	4a0f      	ldr	r2, [pc, #60]	; (b4578 <_ZN14LoRA_Functions8getAlertEi+0x4c>)
   b453c:	4601      	mov	r1, r0
   b453e:	ab01      	add	r3, sp, #4
   b4540:	480c      	ldr	r0, [pc, #48]	; (b4574 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b4542:	f004 fadf 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4546:	9901      	ldr	r1, [sp, #4]
   b4548:	480a      	ldr	r0, [pc, #40]	; (b4574 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b454a:	1e62      	subs	r2, r4, #1
   b454c:	f004 f997 	bl	b887e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   b4550:	4601      	mov	r1, r0
   b4552:	b928      	cbnz	r0, b4560 <_ZN14LoRA_Functions8getAlertEi+0x34>
		Log.info("From getAlert function, Node number not found");
   b4554:	4909      	ldr	r1, [pc, #36]	; (b457c <_ZN14LoRA_Functions8getAlertEi+0x50>)
   b4556:	480a      	ldr	r0, [pc, #40]	; (b4580 <_ZN14LoRA_Functions8getAlertEi+0x54>)
   b4558:	f7ff fe0b 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber > 10) return 255;										// Not a configured node
   b455c:	20ff      	movs	r0, #255	; 0xff
   b455e:	e006      	b.n	b456e <_ZN14LoRA_Functions8getAlertEi+0x42>
		return 255;															// Ran out of entries 
	} 

	jp.getValueByKey(nodeObjectContainer, "pend", pendingAlert);
   b4560:	4804      	ldr	r0, [pc, #16]	; (b4574 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b4562:	4a08      	ldr	r2, [pc, #32]	; (b4584 <_ZN14LoRA_Functions8getAlertEi+0x58>)
   b4564:	466b      	mov	r3, sp
   b4566:	f7ff fde8 	bl	b413a <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>

	return pendingAlert;
   b456a:	f89d 0000 	ldrb.w	r0, [sp]

}
   b456e:	b002      	add	sp, #8
   b4570:	bd10      	pop	{r4, pc}
   b4572:	bf00      	nop
   b4574:	2003da2c 	.word	0x2003da2c
   b4578:	000c350e 	.word	0x000c350e
   b457c:	000c3549 	.word	0x000c3549
   b4580:	2003e658 	.word	0x2003e658
   b4584:	000c3577 	.word	0x000c3577

000b4588 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv>:

	// Log.info(nodeID.get_nodeIDJson());  // See the raw JSON string

}

bool LoRA_Functions::nodeConnectionsHealthy() {								// Connections are healthy if at least one node connected in last two periods
   b4588:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b458c:	4607      	mov	r7, r0
// Resets the LoRA Radio if not healthy
	
	int lastConnect;
	time_t secondsPerPeriod = sysStatus.get_frequencyMinutes() * 60;
   b458e:	f001 ff2d 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b4592:	f002 f942 	bl	b681a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4596:	4604      	mov	r4, r0
	bool health = false;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4598:	481f      	ldr	r0, [pc, #124]	; (b4618 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x90>)
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b459a:	f8df 807c 	ldr.w	r8, [pc, #124]	; b4618 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x90>
		if(nodeObjectContainer == NULL) break;								// Ran out of entries 

		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b459e:	f8df 9094 	ldr.w	r9, [pc, #148]	; b4634 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xac>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b45a2:	f004 f94a 	bl	b883a <_ZNK10JsonParser14getOuterObjectEv>
   b45a6:	ab01      	add	r3, sp, #4
   b45a8:	4601      	mov	r1, r0
   b45aa:	4a1c      	ldr	r2, [pc, #112]	; (b461c <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x94>)
   b45ac:	481a      	ldr	r0, [pc, #104]	; (b4618 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x90>)
   b45ae:	f004 faa9 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	time_t secondsPerPeriod = sysStatus.get_frequencyMinutes() * 60;
   b45b2:	233c      	movs	r3, #60	; 0x3c
   b45b4:	4363      	muls	r3, r4

		if ((Time.now() - lastConnect) < 2 * secondsPerPeriod) {			// If at least one node connects, the gateway is good.
   b45b6:	17de      	asrs	r6, r3, #31
   b45b8:	18dc      	adds	r4, r3, r3
   b45ba:	4176      	adcs	r6, r6
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b45bc:	2500      	movs	r5, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b45be:	9901      	ldr	r1, [sp, #4]
   b45c0:	462a      	mov	r2, r5
   b45c2:	4640      	mov	r0, r8
   b45c4:	f004 f95b 	bl	b887e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) break;								// Ran out of entries 
   b45c8:	4601      	mov	r1, r0
   b45ca:	b180      	cbz	r0, b45ee <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x66>
		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b45cc:	466b      	mov	r3, sp
   b45ce:	464a      	mov	r2, r9
   b45d0:	4640      	mov	r0, r8
   b45d2:	f7ff fdb2 	bl	b413a <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		if ((Time.now() - lastConnect) < 2 * secondsPerPeriod) {			// If at least one node connects, the gateway is good.
   b45d6:	f00b fc60 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b45da:	9b00      	ldr	r3, [sp, #0]
   b45dc:	1ac3      	subs	r3, r0, r3
   b45de:	17da      	asrs	r2, r3, #31
   b45e0:	42a3      	cmp	r3, r4
   b45e2:	eb72 0306 	sbcs.w	r3, r2, r6
   b45e6:	db14      	blt.n	b4612 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x8a>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b45e8:	3501      	adds	r5, #1
   b45ea:	2d0a      	cmp	r5, #10
   b45ec:	d1e7      	bne.n	b45be <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x36>
			health = true;
			break;															// Don't need to keep checking
		}
	}

	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b45ee:	4a0c      	ldr	r2, [pc, #48]	; (b4620 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x98>)
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b45f0:	2400      	movs	r4, #0
	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b45f2:	490c      	ldr	r1, [pc, #48]	; (b4624 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x9c>)
   b45f4:	480c      	ldr	r0, [pc, #48]	; (b4628 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa0>)
   b45f6:	f7ff fdbc 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>

	if(!health) {
   b45fa:	b934      	cbnz	r4, b460a <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x82>
		Log.info("Node connections unhealthy, reseting LoRA radio");
   b45fc:	480a      	ldr	r0, [pc, #40]	; (b4628 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa0>)
   b45fe:	490b      	ldr	r1, [pc, #44]	; (b462c <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa4>)
   b4600:	f7ff fdb7 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
		LoRA_Functions::initializeRadio();
   b4604:	4638      	mov	r0, r7
   b4606:	f7ff fdf7 	bl	b41f8 <_ZN14LoRA_Functions15initializeRadioEv>
	}

	return health;
}
   b460a:	4620      	mov	r0, r4
   b460c:	b003      	add	sp, #12
   b460e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b4612:	4a07      	ldr	r2, [pc, #28]	; (b4630 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa8>)
			health = true;
   b4614:	2401      	movs	r4, #1
   b4616:	e7ec      	b.n	b45f2 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x6a>
   b4618:	2003da2c 	.word	0x2003da2c
   b461c:	000c350e 	.word	0x000c350e
   b4620:	000c357c 	.word	0x000c357c
   b4624:	000c358b 	.word	0x000c358b
   b4628:	2003e658 	.word	0x2003e658
   b462c:	000c35a4 	.word	0x000c35a4
   b4630:	000c357e 	.word	0x000c357e
   b4634:	000c3586 	.word	0x000c3586

000b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4638:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b463a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b463c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b463e:	b17c      	cbz	r4, b4660 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4640:	6863      	ldr	r3, [r4, #4]
   b4642:	3b01      	subs	r3, #1
   b4644:	6063      	str	r3, [r4, #4]
   b4646:	b95b      	cbnz	r3, b4660 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4648:	6823      	ldr	r3, [r4, #0]
   b464a:	4620      	mov	r0, r4
   b464c:	689b      	ldr	r3, [r3, #8]
   b464e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4650:	68a3      	ldr	r3, [r4, #8]
   b4652:	3b01      	subs	r3, #1
   b4654:	60a3      	str	r3, [r4, #8]
   b4656:	b91b      	cbnz	r3, b4660 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4658:	6823      	ldr	r3, [r4, #0]
   b465a:	4620      	mov	r0, r4
   b465c:	68db      	ldr	r3, [r3, #12]
   b465e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4660:	4628      	mov	r0, r5
   b4662:	bd38      	pop	{r3, r4, r5, pc}

000b4664 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>:
bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b4664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b4668:	2200      	movs	r2, #0
   b466a:	b0b0      	sub	sp, #192	; 0xc0
   b466c:	4606      	mov	r6, r0
   b466e:	2114      	movs	r1, #20
   b4670:	2002      	movs	r0, #2
   b4672:	f008 fbeb 	bl	bce4c <led_pattern_period>
   b4676:	f04f 0801 	mov.w	r8, #1
   b467a:	221e      	movs	r2, #30
   b467c:	4603      	mov	r3, r0
   b467e:	495a      	ldr	r1, [pc, #360]	; (b47e8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x184>)
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b4680:	4c5a      	ldr	r4, [pc, #360]	; (b47ec <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x188>)
   b4682:	e9cd 2800 	strd	r2, r8, [sp]
   b4686:	a808      	add	r0, sp, #32
   b4688:	2202      	movs	r2, #2
   b468a:	f009 fd51 	bl	be130 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   b468e:	f001 fead 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b4692:	f002 f8bd 	bl	b6810 <_ZNK13sysStatusData15get_magicNumberEv>
   b4696:	0a00      	lsrs	r0, r0, #8
   b4698:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b469a:	f001 fea7 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b469e:	f002 f8b7 	bl	b6810 <_ZNK13sysStatusData15get_magicNumberEv>
   b46a2:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  					// Fourth byte - current time
   b46a4:	f00b fbf9 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b46a8:	1600      	asrs	r0, r0, #24
   b46aa:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));						// Third byte
   b46ac:	f00b fbf5 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b46b0:	1400      	asrs	r0, r0, #16
   b46b2:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));						// Second byte
   b46b4:	f00b fbf1 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b46b8:	1200      	asrs	r0, r0, #8
   b46ba:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    					// First byte		
   b46bc:	f00b fbed 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b46c0:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());			// Frequency of reports - for Gateways
   b46c2:	f001 fe93 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b46c6:	f002 f8a8 	bl	b681a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b46ca:	0a00      	lsrs	r0, r0, #8
   b46cc:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b46ce:	f001 fe8d 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b46d2:	f002 f8a2 	bl	b681a <_ZNK13sysStatusData20get_frequencyMinutesEv>
	buf[8] = 0;														// Clear the alert code for the node
   b46d6:	2500      	movs	r5, #0
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b46d8:	71e0      	strb	r0, [r4, #7]
	buf[8] = 0;														// Clear the alert code for the node
   b46da:	7225      	strb	r5, [r4, #8]
	buf[9] = current.get_nodeNumber();
   b46dc:	f001 febe 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b46e0:	f001 ffd3 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b46e4:	7260      	strb	r0, [r4, #9]
	buf[10] = getType(current.get_nodeNumber());
   b46e6:	f001 feb9 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b46ea:	f001 ffce 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b46ee:	4601      	mov	r1, r0
   b46f0:	4630      	mov	r0, r6
   b46f2:	f7ff feed 	bl	b44d0 <_ZN14LoRA_Functions7getTypeEi>
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b46f6:	4b3e      	ldr	r3, [pc, #248]	; (b47f0 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x18c>)
	buf[10] = getType(current.get_nodeNumber());
   b46f8:	72a0      	strb	r0, [r4, #10]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b46fa:	881f      	ldrh	r7, [r3, #0]
   b46fc:	4641      	mov	r1, r8
   b46fe:	4638      	mov	r0, r7
   b4700:	f00b fddb 	bl	c02ba <digitalWrite>
	if (manager.sendtoWait(buf, 11, current.get_tempNodeNumber(), JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b4704:	f001 feaa 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4708:	f001 ffc4 	bl	b6694 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b470c:	2202      	movs	r2, #2
   b470e:	4603      	mov	r3, r0
   b4710:	9200      	str	r2, [sp, #0]
   b4712:	4838      	ldr	r0, [pc, #224]	; (b47f4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x190>)
   b4714:	220b      	movs	r2, #11
   b4716:	4621      	mov	r1, r4
   b4718:	f006 fc3c 	bl	baf94 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b471c:	4606      	mov	r6, r0
   b471e:	2800      	cmp	r0, #0
   b4720:	d153      	bne.n	b47ca <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x166>
		current.set_tempNodeNumber(current.get_nodeNumber());		// Temp no longer needed
   b4722:	f001 fe9b 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4726:	4605      	mov	r5, r0
   b4728:	f001 fe98 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b472c:	f001 ffad 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b4730:	4601      	mov	r1, r0
   b4732:	4628      	mov	r0, r5
   b4734:	f002 f82a 	bl	b678c <_ZN17currentStatusData18set_tempNodeNumberEh>
		digitalWrite(BLUE_LED,LOW);
   b4738:	4631      	mov	r1, r6
   b473a:	4638      	mov	r0, r7
   b473c:	f00b fdbd 	bl	c02ba <digitalWrite>
		snprintf(messageString,sizeof(messageString),"Node %d joined with sensorType %s counter with alert %d and signal strength %d", current.get_tempNodeNumber(), (buf[10] ==0)? "car":"person",current.get_alertCodeNode(), driver.lastRssi());
   b4740:	f001 fe8c 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4744:	f001 ffa6 	bl	b6694 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4748:	7aa1      	ldrb	r1, [r4, #10]
   b474a:	4a2b      	ldr	r2, [pc, #172]	; (b47f8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x194>)
   b474c:	4c2b      	ldr	r4, [pc, #172]	; (b47fc <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x198>)
   b474e:	9005      	str	r0, [sp, #20]
   b4750:	2900      	cmp	r1, #0
   b4752:	bf18      	it	ne
   b4754:	4614      	movne	r4, r2
   b4756:	f001 fe81 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b475a:	f001 ffb9 	bl	b66d0 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b475e:	4605      	mov	r5, r0
   b4760:	4827      	ldr	r0, [pc, #156]	; (b4800 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x19c>)
   b4762:	f006 f9fc 	bl	bab5e <_ZN15RHGenericDriver8lastRssiEv>
   b4766:	9b05      	ldr	r3, [sp, #20]
   b4768:	4a26      	ldr	r2, [pc, #152]	; (b4804 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x1a0>)
   b476a:	9400      	str	r4, [sp, #0]
   b476c:	e9cd 5001 	strd	r5, r0, [sp, #4]
   b4770:	2180      	movs	r1, #128	; 0x80
   b4772:	a810      	add	r0, sp, #64	; 0x40
   b4774:	f008 fc84 	bl	bd080 <snprintf>
		Log.info(messageString);
   b4778:	4823      	ldr	r0, [pc, #140]	; (b4808 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x1a4>)
   b477a:	a910      	add	r1, sp, #64	; 0x40
   b477c:	f7ff fcf9 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4780:	f008 fbb6 	bl	bcef0 <spark_cloud_flag_connected>
		if (Particle.connected()) Particle.publish("status", messageString,PRIVATE);
   b4784:	b160      	cbz	r0, b47a0 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x13c>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4786:	4b21      	ldr	r3, [pc, #132]	; (b480c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x1a8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4788:	4921      	ldr	r1, [pc, #132]	; (b4810 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x1ac>)
   b478a:	781b      	ldrb	r3, [r3, #0]
   b478c:	f88d 3000 	strb.w	r3, [sp]
   b4790:	a806      	add	r0, sp, #24
   b4792:	233c      	movs	r3, #60	; 0x3c
   b4794:	aa10      	add	r2, sp, #64	; 0x40
   b4796:	f008 ff97 	bl	bd6c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b479a:	a807      	add	r0, sp, #28
   b479c:	f7ff ff4c 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    led_set_status_active(&d_, active, nullptr);
   b47a0:	2200      	movs	r2, #0
   b47a2:	2101      	movs	r1, #1
   b47a4:	a809      	add	r0, sp, #36	; 0x24
   b47a6:	f008 faf5 	bl	bcd94 <led_set_status_active>
    	delay(100);
   b47aa:	2064      	movs	r0, #100	; 0x64
   b47ac:	f008 fcc0 	bl	bd130 <delay>
   b47b0:	2200      	movs	r2, #0
   b47b2:	4611      	mov	r1, r2
   b47b4:	a809      	add	r0, sp, #36	; 0x24
   b47b6:	f008 faed 	bl	bcd94 <led_set_status_active>
		return true;
   b47ba:	2501      	movs	r5, #1
	LEDStatus blinkOrange(RGB_COLOR_ORANGE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   b47bc:	a808      	add	r0, sp, #32
   b47be:	f7ff fc8f 	bl	b40e0 <_ZN8particle9LEDStatusD1Ev>
}
   b47c2:	4628      	mov	r0, r5
   b47c4:	b030      	add	sp, #192	; 0xc0
   b47c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Log.info("Node %d join response not acknowledged", current.get_tempNodeNumber()); // Acknowledgement not received - this needs more attention as node is in undefined state
   b47ca:	f001 fe47 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b47ce:	f001 ff61 	bl	b6694 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b47d2:	4910      	ldr	r1, [pc, #64]	; (b4814 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x1b0>)
   b47d4:	4602      	mov	r2, r0
   b47d6:	480c      	ldr	r0, [pc, #48]	; (b4808 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x1a4>)
   b47d8:	f7ff fccb 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b47dc:	4629      	mov	r1, r5
   b47de:	4638      	mov	r0, r7
   b47e0:	f00b fd6b 	bl	c02ba <digitalWrite>
		return false;
   b47e4:	e7ea      	b.n	b47bc <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x158>
   b47e6:	bf00      	nop
   b47e8:	00ff6000 	.word	0x00ff6000
   b47ec:	2003d880 	.word	0x2003d880
   b47f0:	000c43b0 	.word	0x000c43b0
   b47f4:	2003e178 	.word	0x2003e178
   b47f8:	000c35d8 	.word	0x000c35d8
   b47fc:	000c35d4 	.word	0x000c35d4
   b4800:	2003d8fc 	.word	0x2003d8fc
   b4804:	000c35df 	.word	0x000c35df
   b4808:	2003e658 	.word	0x2003e658
   b480c:	2003d879 	.word	0x2003d879
   b4810:	000c362e 	.word	0x000c362e
   b4814:	000c3635 	.word	0x000c3635

000b4818 <_ZN14LoRA_Functions13printNodeDataEb>:
void LoRA_Functions::printNodeData(bool publish) {
   b4818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b481c:	b0b8      	sub	sp, #224	; 0xe0
   b481e:	460f      	mov	r7, r1
	String nodeDeviceID;
   b4820:	a80e      	add	r0, sp, #56	; 0x38
   b4822:	4941      	ldr	r1, [pc, #260]	; (b4928 <_ZN14LoRA_Functions13printNodeDataEb+0x110>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4824:	4d41      	ldr	r5, [pc, #260]	; (b492c <_ZN14LoRA_Functions13printNodeDataEb+0x114>)
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b4826:	f8df 812c 	ldr.w	r8, [pc, #300]	; b4954 <_ZN14LoRA_Functions13printNodeDataEb+0x13c>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b482a:	f8df 912c 	ldr.w	r9, [pc, #300]	; b4958 <_ZN14LoRA_Functions13printNodeDataEb+0x140>
	String nodeDeviceID;
   b482e:	f00a ffcc 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4832:	483e      	ldr	r0, [pc, #248]	; (b492c <_ZN14LoRA_Functions13printNodeDataEb+0x114>)
   b4834:	f004 f801 	bl	b883a <_ZNK10JsonParser14getOuterObjectEv>
   b4838:	4a3d      	ldr	r2, [pc, #244]	; (b4930 <_ZN14LoRA_Functions13printNodeDataEb+0x118>)
   b483a:	4601      	mov	r1, r0
   b483c:	ab0d      	add	r3, sp, #52	; 0x34
   b483e:	483b      	ldr	r0, [pc, #236]	; (b492c <_ZN14LoRA_Functions13printNodeDataEb+0x114>)
   b4840:	f004 f960 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4844:	2600      	movs	r6, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4846:	990d      	ldr	r1, [sp, #52]	; 0x34
   b4848:	4632      	mov	r2, r6
   b484a:	4628      	mov	r0, r5
   b484c:	f004 f817 	bl	b887e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   b4850:	4604      	mov	r4, r0
   b4852:	2800      	cmp	r0, #0
   b4854:	d062      	beq.n	b491c <_ZN14LoRA_Functions13printNodeDataEb+0x104>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b4856:	4601      	mov	r1, r0
   b4858:	ab0e      	add	r3, sp, #56	; 0x38
   b485a:	4642      	mov	r2, r8
   b485c:	4628      	mov	r0, r5
   b485e:	f7ff fc7a 	bl	b4156 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b4862:	ab08      	add	r3, sp, #32
   b4864:	464a      	mov	r2, r9
   b4866:	4621      	mov	r1, r4
   b4868:	4628      	mov	r0, r5
   b486a:	f7ff fc66 	bl	b413a <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b486e:	4a31      	ldr	r2, [pc, #196]	; (b4934 <_ZN14LoRA_Functions13printNodeDataEb+0x11c>)
   b4870:	ab09      	add	r3, sp, #36	; 0x24
   b4872:	4621      	mov	r1, r4
   b4874:	4628      	mov	r0, r5
   b4876:	f7ff fc60 	bl	b413a <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);
   b487a:	4a2f      	ldr	r2, [pc, #188]	; (b4938 <_ZN14LoRA_Functions13printNodeDataEb+0x120>)
   b487c:	ab0a      	add	r3, sp, #40	; 0x28
   b487e:	4621      	mov	r1, r4
   b4880:	4628      	mov	r0, r5
   b4882:	f7ff fc5a 	bl	b413a <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		if (getValueTokenByKey(container, name, value)) {
   b4886:	4a2d      	ldr	r2, [pc, #180]	; (b493c <_ZN14LoRA_Functions13printNodeDataEb+0x124>)
   b4888:	ab12      	add	r3, sp, #72	; 0x48
   b488a:	4621      	mov	r1, r4
   b488c:	4628      	mov	r0, r5
   b488e:	f004 f939 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b4892:	b120      	cbz	r0, b489e <_ZN14LoRA_Functions13printNodeDataEb+0x86>
			return getTokenValue(value, result);
   b4894:	9912      	ldr	r1, [sp, #72]	; 0x48
   b4896:	aa0b      	add	r2, sp, #44	; 0x2c
   b4898:	4628      	mov	r0, r5
   b489a:	f004 f85b 	bl	b8954 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
		jp.getValueByKey(nodeObjectContainer, "pend", pendingAlert);
   b489e:	4621      	mov	r1, r4
   b48a0:	4a27      	ldr	r2, [pc, #156]	; (b4940 <_ZN14LoRA_Functions13printNodeDataEb+0x128>)
   b48a2:	ab0c      	add	r3, sp, #48	; 0x30
   b48a4:	4628      	mov	r0, r5
   b48a6:	f7ff fc48 	bl	b413a <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		snprintf(data, sizeof(data), "Node %d, deviceID: %s, lastConnected: %s, type %d, success %4.2f with pending alert %d", nodeNumber, nodeDeviceID.c_str(),Time.timeStr(lastConnect).c_str(), sensorType, successPercent, pendingAlert);
   b48aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b48ac:	9c08      	ldr	r4, [sp, #32]
	const char * c_str() const { return buffer; }
   b48ae:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   b48b2:	17d3      	asrs	r3, r2, #31
   b48b4:	a812      	add	r0, sp, #72	; 0x48
   b48b6:	f00b f9eb 	bl	bfc90 <_ZN9TimeClass7timeStrEx>
   b48ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b48bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   b48be:	9306      	str	r3, [sp, #24]
   b48c0:	f00b ff76 	bl	c07b0 <__aeabi_f2d>
   b48c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b48c6:	9302      	str	r3, [sp, #8]
   b48c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b48ca:	4a1e      	ldr	r2, [pc, #120]	; (b4944 <_ZN14LoRA_Functions13printNodeDataEb+0x12c>)
   b48cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b48d0:	e9cd a300 	strd	sl, r3, [sp]
   b48d4:	2188      	movs	r1, #136	; 0x88
   b48d6:	4623      	mov	r3, r4
   b48d8:	a816      	add	r0, sp, #88	; 0x58
   b48da:	f008 fbd1 	bl	bd080 <snprintf>
   b48de:	a812      	add	r0, sp, #72	; 0x48
   b48e0:	f00a ff28 	bl	bf734 <_ZN6StringD1Ev>
		Log.info(data);
   b48e4:	4818      	ldr	r0, [pc, #96]	; (b4948 <_ZN14LoRA_Functions13printNodeDataEb+0x130>)
   b48e6:	a916      	add	r1, sp, #88	; 0x58
   b48e8:	f7ff fc43 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b48ec:	f008 fb00 	bl	bcef0 <spark_cloud_flag_connected>
		if (Particle.connected() && publish) {
   b48f0:	b188      	cbz	r0, b4916 <_ZN14LoRA_Functions13printNodeDataEb+0xfe>
   b48f2:	b187      	cbz	r7, b4916 <_ZN14LoRA_Functions13printNodeDataEb+0xfe>
   b48f4:	4b15      	ldr	r3, [pc, #84]	; (b494c <_ZN14LoRA_Functions13printNodeDataEb+0x134>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b48f6:	4916      	ldr	r1, [pc, #88]	; (b4950 <_ZN14LoRA_Functions13printNodeDataEb+0x138>)
   b48f8:	781b      	ldrb	r3, [r3, #0]
   b48fa:	f88d 3000 	strb.w	r3, [sp]
   b48fe:	aa16      	add	r2, sp, #88	; 0x58
   b4900:	233c      	movs	r3, #60	; 0x3c
   b4902:	a812      	add	r0, sp, #72	; 0x48
   b4904:	f008 fee0 	bl	bd6c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4908:	a813      	add	r0, sp, #76	; 0x4c
   b490a:	f7ff fe95 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
			delay(1000);
   b490e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4912:	f008 fc0d 	bl	bd130 <delay>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4916:	3601      	adds	r6, #1
   b4918:	2e0a      	cmp	r6, #10
   b491a:	d194      	bne.n	b4846 <_ZN14LoRA_Functions13printNodeDataEb+0x2e>
	String nodeDeviceID;
   b491c:	a80e      	add	r0, sp, #56	; 0x38
   b491e:	f00a ff09 	bl	bf734 <_ZN6StringD1Ev>
}
   b4922:	b038      	add	sp, #224	; 0xe0
   b4924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4928:	000c4fe0 	.word	0x000c4fe0
   b492c:	2003da2c 	.word	0x2003da2c
   b4930:	000c350e 	.word	0x000c350e
   b4934:	000c3586 	.word	0x000c3586
   b4938:	000c3544 	.word	0x000c3544
   b493c:	000c3661 	.word	0x000c3661
   b4940:	000c3577 	.word	0x000c3577
   b4944:	000c3666 	.word	0x000c3666
   b4948:	2003e658 	.word	0x2003e658
   b494c:	2003d879 	.word	0x2003d879
   b4950:	000c36bd 	.word	0x000c36bd
   b4954:	000c3514 	.word	0x000c3514
   b4958:	000c365c 	.word	0x000c365c

000b495c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   b495c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b495e:	4604      	mov	r4, r0
   b4960:	4615      	mov	r5, r2
   b4962:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b4964:	f004 f9f2 	bl	b8d4c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4968:	9901      	ldr	r1, [sp, #4]
   b496a:	2201      	movs	r2, #1
   b496c:	4620      	mov	r0, r4
   b496e:	f004 f95b 	bl	b8c28 <_ZN10JsonWriter12insertStringEPKcb>
		insertValue(key);
		insertChar(':');
   b4972:	4620      	mov	r0, r4
   b4974:	213a      	movs	r1, #58	; 0x3a
   b4976:	f004 f90b 	bl	b8b90 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   b497a:	4904      	ldr	r1, [pc, #16]	; (b498c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   b497c:	462a      	mov	r2, r5
   b497e:	4620      	mov	r0, r4
		insertValue(value);
	}
   b4980:	b003      	add	sp, #12
   b4982:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   b4986:	f004 b942 	b.w	b8c0e <_ZN10JsonWriter13insertsprintfEPKcz>
   b498a:	bf00      	nop
   b498c:	000c36ef 	.word	0x000c36ef

000b4990 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b4990:	b513      	push	{r0, r1, r4, lr}
        val_(val) {
   b4992:	4b11      	ldr	r3, [pc, #68]	; (b49d8 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x48>)
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b4994:	4c11      	ldr	r4, [pc, #68]	; (b49dc <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x4c>)
   b4996:	2201      	movs	r2, #1
   b4998:	701a      	strb	r2, [r3, #0]
   b499a:	2332      	movs	r3, #50	; 0x32
   b499c:	9300      	str	r3, [sp, #0]
   b499e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b49a2:	f204 432c 	addw	r3, r4, #1068	; 0x42c
   b49a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b49aa:	4620      	mov	r0, r4
   b49ac:	f003 ff2a 	bl	b8804 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b49b0:	4b0b      	ldr	r3, [pc, #44]	; (b49e0 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x50>)
   b49b2:	6023      	str	r3, [r4, #0]
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b49b4:	4a0b      	ldr	r2, [pc, #44]	; (b49e4 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x54>)
   b49b6:	4c0c      	ldr	r4, [pc, #48]	; (b49e8 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x58>)
   b49b8:	490c      	ldr	r1, [pc, #48]	; (b49ec <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x5c>)
   b49ba:	4b0d      	ldr	r3, [pc, #52]	; (b49f0 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x60>)
   b49bc:	7812      	ldrb	r2, [r2, #0]
   b49be:	7809      	ldrb	r1, [r1, #0]
   b49c0:	4620      	mov	r0, r4
   b49c2:	f006 ffdd 	bl	bb980 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b49c6:	480b      	ldr	r0, [pc, #44]	; (b49f4 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x64>)
   b49c8:	2200      	movs	r2, #0
   b49ca:	4621      	mov	r1, r4
}
   b49cc:	b002      	add	sp, #8
   b49ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b49d2:	f006 bad5 	b.w	baf80 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b49d6:	bf00      	nop
   b49d8:	2003d879 	.word	0x2003d879
   b49dc:	2003da2c 	.word	0x2003da2c
   b49e0:	000c39fc 	.word	0x000c39fc
   b49e4:	000c43b6 	.word	0x000c43b6
   b49e8:	2003d8fc 	.word	0x2003d8fc
   b49ec:	000c43b4 	.word	0x000c43b4
   b49f0:	2003e4ec 	.word	0x2003e4ec
   b49f4:	2003e178 	.word	0x2003e178

000b49f8 <_ZN14LoRA_Functions14findNodeNumberEPKc>:
uint8_t LoRA_Functions::findNodeNumber(const char* deviceID) {
   b49f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b49fc:	b096      	sub	sp, #88	; 0x58
   b49fe:	460e      	mov	r6, r1
	String nodeDeviceID;
   b4a00:	a802      	add	r0, sp, #8
   b4a02:	4956      	ldr	r1, [pc, #344]	; (b4b5c <_ZN14LoRA_Functions14findNodeNumberEPKc+0x164>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4a04:	f8df 8158 	ldr.w	r8, [pc, #344]	; b4b60 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x168>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b4a08:	f8df a16c 	ldr.w	sl, [pc, #364]	; b4b78 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x180>
	String nodeDeviceID;
   b4a0c:	f00a fedd 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4a10:	4853      	ldr	r0, [pc, #332]	; (b4b60 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x168>)
   b4a12:	f003 ff12 	bl	b883a <_ZNK10JsonParser14getOuterObjectEv>
   b4a16:	4a53      	ldr	r2, [pc, #332]	; (b4b64 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x16c>)
   b4a18:	4601      	mov	r1, r0
   b4a1a:	ab01      	add	r3, sp, #4
   b4a1c:	4850      	ldr	r0, [pc, #320]	; (b4b60 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x168>)
   b4a1e:	f004 f871 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4a22:	2500      	movs	r5, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4a24:	9901      	ldr	r1, [sp, #4]
   b4a26:	462a      	mov	r2, r5
   b4a28:	4640      	mov	r0, r8
   b4a2a:	f003 ff28 	bl	b887e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
   b4a2e:	1c6c      	adds	r4, r5, #1
		if(nodeObjectContainer == NULL) {
   b4a30:	4607      	mov	r7, r0
   b4a32:	46a1      	mov	r9, r4
   b4a34:	2800      	cmp	r0, #0
   b4a36:	d170      	bne.n	b4b1a <_ZN14LoRA_Functions14findNodeNumberEPKc+0x122>
			Log.info("findNodeNumber ran out of entries at i = %d",i);
   b4a38:	494b      	ldr	r1, [pc, #300]	; (b4b68 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x170>)
   b4a3a:	484c      	ldr	r0, [pc, #304]	; (b4b6c <_ZN14LoRA_Functions14findNodeNumberEPKc+0x174>)
   b4a3c:	462a      	mov	r2, r5
   b4a3e:	f7ff fb98 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   b4a42:	4947      	ldr	r1, [pc, #284]	; (b4b60 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x168>)
   b4a44:	a806      	add	r0, sp, #24
   b4a46:	f004 f9c5 	bl	b8dd4 <_ZN12JsonModifierC1ER10JsonParser>
	Log.info("New node will be assigned number %d, deviceID of %s",index, deviceID);
   b4a4a:	4633      	mov	r3, r6
   b4a4c:	4622      	mov	r2, r4
   b4a4e:	4948      	ldr	r1, [pc, #288]	; (b4b70 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x178>)
   b4a50:	4846      	ldr	r0, [pc, #280]	; (b4b6c <_ZN14LoRA_Functions14findNodeNumberEPKc+0x174>)
   b4a52:	f7ff fb8e 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
	mod.startAppend(jp.getOuterArray());
   b4a56:	4842      	ldr	r0, [pc, #264]	; (b4b60 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x168>)
   b4a58:	f003 fee4 	bl	b8824 <_ZNK10JsonParser13getOuterArrayEv>
   b4a5c:	4601      	mov	r1, r0
   b4a5e:	a806      	add	r0, sp, #24
   b4a60:	f004 f9f3 	bl	b8e4a <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
	bool startObject() { return startObjectOrArray('{', '}'); };
   b4a64:	227d      	movs	r2, #125	; 0x7d
   b4a66:	217b      	movs	r1, #123	; 0x7b
   b4a68:	a806      	add	r0, sp, #24
   b4a6a:	f004 f97a 	bl	b8d62 <_ZN10JsonWriter18startObjectOrArrayEcc>
		mod.insertKeyValue("node", (int)index);
   b4a6e:	4622      	mov	r2, r4
   b4a70:	4940      	ldr	r1, [pc, #256]	; (b4b74 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x17c>)
   b4a72:	a806      	add	r0, sp, #24
   b4a74:	f7ff ff72 	bl	b495c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   b4a78:	a806      	add	r0, sp, #24
   b4a7a:	f004 f967 	bl	b8d4c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4a7e:	2201      	movs	r2, #1
   b4a80:	a806      	add	r0, sp, #24
   b4a82:	493d      	ldr	r1, [pc, #244]	; (b4b78 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x180>)
   b4a84:	f004 f8d0 	bl	b8c28 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4a88:	a806      	add	r0, sp, #24
   b4a8a:	213a      	movs	r1, #58	; 0x3a
   b4a8c:	f004 f880 	bl	b8b90 <_ZN10JsonWriter10insertCharEc>
	void insertValue(const char *value) { insertString(value, true); }
   b4a90:	4631      	mov	r1, r6
   b4a92:	2201      	movs	r2, #1
   b4a94:	a806      	add	r0, sp, #24
   b4a96:	f004 f8c7 	bl	b8c28 <_ZN10JsonWriter12insertStringEPKcb>
		mod.insertKeyValue("last", Time.now());
   b4a9a:	f00b f9fe 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b4a9e:	4605      	mov	r5, r0
		insertCheckSeparator();
   b4aa0:	a806      	add	r0, sp, #24
   b4aa2:	f004 f953 	bl	b8d4c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4aa6:	2201      	movs	r2, #1
   b4aa8:	a806      	add	r0, sp, #24
   b4aaa:	4934      	ldr	r1, [pc, #208]	; (b4b7c <_ZN14LoRA_Functions14findNodeNumberEPKc+0x184>)
   b4aac:	f004 f8bc 	bl	b8c28 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4ab0:	a806      	add	r0, sp, #24
   b4ab2:	213a      	movs	r1, #58	; 0x3a
   b4ab4:	f004 f86c 	bl	b8b90 <_ZN10JsonWriter10insertCharEc>
	void insertValue(long value) { insertsprintf("%ld", value); }
   b4ab8:	462a      	mov	r2, r5
   b4aba:	a806      	add	r0, sp, #24
   b4abc:	4930      	ldr	r1, [pc, #192]	; (b4b80 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x188>)
   b4abe:	f004 f8a6 	bl	b8c0e <_ZN10JsonWriter13insertsprintfEPKcz>
		mod.insertKeyValue("type", (int)3);
   b4ac2:	4930      	ldr	r1, [pc, #192]	; (b4b84 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x18c>)
   b4ac4:	2203      	movs	r2, #3
   b4ac6:	a806      	add	r0, sp, #24
   b4ac8:	f7ff ff48 	bl	b495c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   b4acc:	a806      	add	r0, sp, #24
   b4ace:	f004 f93d 	bl	b8d4c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4ad2:	2201      	movs	r2, #1
   b4ad4:	a806      	add	r0, sp, #24
   b4ad6:	492c      	ldr	r1, [pc, #176]	; (b4b88 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x190>)
   b4ad8:	f004 f8a6 	bl	b8c28 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4adc:	213a      	movs	r1, #58	; 0x3a
   b4ade:	a806      	add	r0, sp, #24
   b4ae0:	f004 f856 	bl	b8b90 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   b4ae4:	ed9f 0a29 	vldr	s0, [pc, #164]	; b4b8c <_ZN14LoRA_Functions14findNodeNumberEPKc+0x194>
   b4ae8:	a806      	add	r0, sp, #24
   b4aea:	f004 f953 	bl	b8d94 <_ZN10JsonWriter11insertValueEf>
		mod.insertKeyValue("pend",(int)0);
   b4aee:	2200      	movs	r2, #0
   b4af0:	4927      	ldr	r1, [pc, #156]	; (b4b90 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x198>)
   b4af2:	a806      	add	r0, sp, #24
   b4af4:	f7ff ff32 	bl	b495c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.finishObjectOrArray();
   b4af8:	a806      	add	r0, sp, #24
   b4afa:	f004 f857 	bl	b8bac <_ZN10JsonWriter19finishObjectOrArrayEv>
	mod.finish();
   b4afe:	a806      	add	r0, sp, #24
   b4b00:	f004 fbff 	bl	b9302 <_ZN12JsonModifier6finishEv>
	nodeID.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4b04:	f001 fd32 	bl	b656c <_ZN10nodeIDData8instanceEv>
   b4b08:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b4b0c:	f001 fd66 	bl	b65dc <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4b10:	a806      	add	r0, sp, #24
	return index;
   b4b12:	b2e4      	uxtb	r4, r4
	JsonModifier mod(jp);
   b4b14:	f003 fe00 	bl	b8718 <_ZN12JsonModifierD1Ev>
   b4b18:	e012      	b.n	b4b40 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x148>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b4b1a:	4601      	mov	r1, r0
   b4b1c:	ab02      	add	r3, sp, #8
   b4b1e:	4640      	mov	r0, r8
   b4b20:	4652      	mov	r2, sl
   b4b22:	f7ff fb18 	bl	b4156 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4b26:	4631      	mov	r1, r6
   b4b28:	a802      	add	r0, sp, #8
   b4b2a:	f00a ff14 	bl	bf956 <_ZNK6String6equalsEPKc>
		if (nodeDeviceID == deviceID) {
   b4b2e:	b170      	cbz	r0, b4b4e <_ZN14LoRA_Functions14findNodeNumberEPKc+0x156>
			jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);		// A match!
   b4b30:	4a10      	ldr	r2, [pc, #64]	; (b4b74 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x17c>)
   b4b32:	480b      	ldr	r0, [pc, #44]	; (b4b60 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x168>)
   b4b34:	466b      	mov	r3, sp
   b4b36:	4639      	mov	r1, r7
   b4b38:	f7ff faff 	bl	b413a <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
			return nodeNumber;												// All is good - return node number for the deviceID passed to the function
   b4b3c:	f89d 4000 	ldrb.w	r4, [sp]
	String nodeDeviceID;
   b4b40:	a802      	add	r0, sp, #8
   b4b42:	f00a fdf7 	bl	bf734 <_ZN6StringD1Ev>
}
   b4b46:	4620      	mov	r0, r4
   b4b48:	b016      	add	sp, #88	; 0x58
   b4b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;															// This will be the node number for the next node if no match is found
   b4b4e:	1cac      	adds	r4, r5, #2
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4b50:	464d      	mov	r5, r9
   b4b52:	2d0a      	cmp	r5, #10
   b4b54:	f47f af66 	bne.w	b4a24 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x2c>
   b4b58:	e773      	b.n	b4a42 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x4a>
   b4b5a:	bf00      	nop
   b4b5c:	000c4fe0 	.word	0x000c4fe0
   b4b60:	2003da2c 	.word	0x2003da2c
   b4b64:	000c350e 	.word	0x000c350e
   b4b68:	000c36c6 	.word	0x000c36c6
   b4b6c:	2003e658 	.word	0x2003e658
   b4b70:	000c36f2 	.word	0x000c36f2
   b4b74:	000c365c 	.word	0x000c365c
   b4b78:	000c3514 	.word	0x000c3514
   b4b7c:	000c3586 	.word	0x000c3586
   b4b80:	000c47d8 	.word	0x000c47d8
   b4b84:	000c3544 	.word	0x000c3544
   b4b88:	000c3661 	.word	0x000c3661
   b4b8c:	00000000 	.word	0x00000000
   b4b90:	000c3577 	.word	0x000c3577

000b4b94 <_ZN14LoRA_Functions14nodeConfiguredEif>:
bool LoRA_Functions::nodeConfigured(int nodeNumber, float successPercent)  {
   b4b94:	b570      	push	{r4, r5, r6, lr}
   b4b96:	ed2d 8b02 	vpush	{d8}
	if (nodeNumber > 10) return false;
   b4b9a:	290a      	cmp	r1, #10
bool LoRA_Functions::nodeConfigured(int nodeNumber, float successPercent)  {
   b4b9c:	b098      	sub	sp, #96	; 0x60
   b4b9e:	460e      	mov	r6, r1
   b4ba0:	eeb0 8a40 	vmov.f32	s16, s0
	if (nodeNumber > 10) return false;
   b4ba4:	dc62      	bgt.n	b4c6c <_ZN14LoRA_Functions14nodeConfiguredEif+0xd8>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4ba6:	4d32      	ldr	r5, [pc, #200]	; (b4c70 <_ZN14LoRA_Functions14nodeConfiguredEif+0xdc>)
   b4ba8:	4628      	mov	r0, r5
   b4baa:	f003 fe46 	bl	b883a <_ZNK10JsonParser14getOuterObjectEv>
   b4bae:	4a31      	ldr	r2, [pc, #196]	; (b4c74 <_ZN14LoRA_Functions14nodeConfiguredEif+0xe0>)
   b4bb0:	4601      	mov	r1, r0
   b4bb2:	ab02      	add	r3, sp, #8
   b4bb4:	4628      	mov	r0, r5
   b4bb6:	f003 ffa5 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4bba:	9902      	ldr	r1, [sp, #8]
   b4bbc:	1e72      	subs	r2, r6, #1
   b4bbe:	4628      	mov	r0, r5
   b4bc0:	f003 fe5d 	bl	b887e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries - no match found
   b4bc4:	4604      	mov	r4, r0
   b4bc6:	2800      	cmp	r0, #0
   b4bc8:	d050      	beq.n	b4c6c <_ZN14LoRA_Functions14nodeConfiguredEif+0xd8>
	jp.getValueByKey(nodeObjectContainer, "node", nodeNumberConfigured);	// Get the deviceID and compare
   b4bca:	ab01      	add	r3, sp, #4
   b4bcc:	4601      	mov	r1, r0
   b4bce:	4a2a      	ldr	r2, [pc, #168]	; (b4c78 <_ZN14LoRA_Functions14nodeConfiguredEif+0xe4>)
   b4bd0:	4628      	mov	r0, r5
   b4bd2:	f7ff fab2 	bl	b413a <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	if (nodeNumberConfigured == nodeNumber) {
   b4bd6:	9b01      	ldr	r3, [sp, #4]
   b4bd8:	429e      	cmp	r6, r3
   b4bda:	d143      	bne.n	b4c64 <_ZN14LoRA_Functions14nodeConfiguredEif+0xd0>
		jp.getValueTokenByKey(nodeObjectContainer, "last", value);
   b4bdc:	ab03      	add	r3, sp, #12
   b4bde:	4a27      	ldr	r2, [pc, #156]	; (b4c7c <_ZN14LoRA_Functions14nodeConfiguredEif+0xe8>)
   b4be0:	4621      	mov	r1, r4
   b4be2:	4628      	mov	r0, r5
   b4be4:	f003 ff8e 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
		JsonModifier mod(jp);
   b4be8:	4629      	mov	r1, r5
   b4bea:	a808      	add	r0, sp, #32
   b4bec:	f004 f8f2 	bl	b8dd4 <_ZN12JsonModifierC1ER10JsonParser>
		mod.startModify(value);
   b4bf0:	9903      	ldr	r1, [sp, #12]
   b4bf2:	a808      	add	r0, sp, #32
   b4bf4:	f004 f900 	bl	b8df8 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
		mod.insertValue((int)Time.now());
   b4bf8:	f00b f94f 	bl	bfe9a <_ZN9TimeClass3nowEv>
	void insertValue(int value) { insertsprintf("%d", value); }
   b4bfc:	4920      	ldr	r1, [pc, #128]	; (b4c80 <_ZN14LoRA_Functions14nodeConfiguredEif+0xec>)
   b4bfe:	4602      	mov	r2, r0
   b4c00:	a808      	add	r0, sp, #32
   b4c02:	f004 f804 	bl	b8c0e <_ZN10JsonWriter13insertsprintfEPKcz>
		mod.finish();
   b4c06:	a808      	add	r0, sp, #32
   b4c08:	f004 fb7b 	bl	b9302 <_ZN12JsonModifier6finishEv>
		jp.getValueTokenByKey(nodeObjectContainer, "succ", value);
   b4c0c:	4a1d      	ldr	r2, [pc, #116]	; (b4c84 <_ZN14LoRA_Functions14nodeConfiguredEif+0xf0>)
   b4c0e:	ab03      	add	r3, sp, #12
   b4c10:	4621      	mov	r1, r4
   b4c12:	4628      	mov	r0, r5
   b4c14:	f003 ff76 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
		mod.startModify(value);
   b4c18:	9903      	ldr	r1, [sp, #12]
   b4c1a:	a808      	add	r0, sp, #32
   b4c1c:	f004 f8ec 	bl	b8df8 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
		mod.insertValue((float)successPercent);
   b4c20:	eeb0 0a48 	vmov.f32	s0, s16
   b4c24:	a808      	add	r0, sp, #32
   b4c26:	f004 f8b5 	bl	b8d94 <_ZN10JsonWriter11insertValueEf>
		mod.finish();
   b4c2a:	a808      	add	r0, sp, #32
   b4c2c:	f004 fb69 	bl	b9302 <_ZN12JsonModifier6finishEv>
		Log.info(nodeID.get_nodeIDJson());  // See the raw JSON string
   b4c30:	f001 fc9c 	bl	b656c <_ZN10nodeIDData8instanceEv>
   b4c34:	4601      	mov	r1, r0
   b4c36:	a804      	add	r0, sp, #16
   b4c38:	f001 fcbe 	bl	b65b8 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b4c3c:	9904      	ldr	r1, [sp, #16]
   b4c3e:	4812      	ldr	r0, [pc, #72]	; (b4c88 <_ZN14LoRA_Functions14nodeConfiguredEif+0xf4>)
   b4c40:	f7ff fa97 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
   b4c44:	a804      	add	r0, sp, #16
   b4c46:	f00a fd75 	bl	bf734 <_ZN6StringD1Ev>
		nodeID.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4c4a:	f001 fc8f 	bl	b656c <_ZN10nodeIDData8instanceEv>
   b4c4e:	6869      	ldr	r1, [r5, #4]
   b4c50:	f001 fcc4 	bl	b65dc <_ZN10nodeIDData14set_nodeIDJsonEPKc>
		JsonModifier mod(jp);
   b4c54:	a808      	add	r0, sp, #32
   b4c56:	f003 fd5f 	bl	b8718 <_ZN12JsonModifierD1Ev>
		return true;
   b4c5a:	2001      	movs	r0, #1
}
   b4c5c:	b018      	add	sp, #96	; 0x60
   b4c5e:	ecbd 8b02 	vpop	{d8}
   b4c62:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Node not configured");  // See the raw JSON string
   b4c64:	4909      	ldr	r1, [pc, #36]	; (b4c8c <_ZN14LoRA_Functions14nodeConfiguredEif+0xf8>)
   b4c66:	4808      	ldr	r0, [pc, #32]	; (b4c88 <_ZN14LoRA_Functions14nodeConfiguredEif+0xf4>)
   b4c68:	f7ff fa83 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber > 10) return false;
   b4c6c:	2000      	movs	r0, #0
   b4c6e:	e7f5      	b.n	b4c5c <_ZN14LoRA_Functions14nodeConfiguredEif+0xc8>
   b4c70:	2003da2c 	.word	0x2003da2c
   b4c74:	000c350e 	.word	0x000c350e
   b4c78:	000c365c 	.word	0x000c365c
   b4c7c:	000c3586 	.word	0x000c3586
   b4c80:	000c36ef 	.word	0x000c36ef
   b4c84:	000c3661 	.word	0x000c3661
   b4c88:	2003e658 	.word	0x2003e658
   b4c8c:	000c3726 	.word	0x000c3726

000b4c90 <_ZN14LoRA_Functions10changeTypeEii>:
bool LoRA_Functions::changeType(int nodeNumber, int newType) {
   b4c90:	b570      	push	{r4, r5, r6, lr}
	if (nodeNumber > 10) return false;
   b4c92:	290a      	cmp	r1, #10
bool LoRA_Functions::changeType(int nodeNumber, int newType) {
   b4c94:	b094      	sub	sp, #80	; 0x50
   b4c96:	460c      	mov	r4, r1
   b4c98:	4616      	mov	r6, r2
	if (nodeNumber > 10) return false;
   b4c9a:	dc3d      	bgt.n	b4d18 <_ZN14LoRA_Functions10changeTypeEii+0x88>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4c9c:	4d1f      	ldr	r5, [pc, #124]	; (b4d1c <_ZN14LoRA_Functions10changeTypeEii+0x8c>)
   b4c9e:	4628      	mov	r0, r5
   b4ca0:	f003 fdcb 	bl	b883a <_ZNK10JsonParser14getOuterObjectEv>
   b4ca4:	4a1e      	ldr	r2, [pc, #120]	; (b4d20 <_ZN14LoRA_Functions10changeTypeEii+0x90>)
   b4ca6:	4601      	mov	r1, r0
   b4ca8:	ab02      	add	r3, sp, #8
   b4caa:	4628      	mov	r0, r5
   b4cac:	f003 ff2a 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4cb0:	1e62      	subs	r2, r4, #1
   b4cb2:	9902      	ldr	r1, [sp, #8]
   b4cb4:	4628      	mov	r0, r5
   b4cb6:	f003 fde2 	bl	b887e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;								// Ran out of entries 
   b4cba:	4604      	mov	r4, r0
   b4cbc:	b360      	cbz	r0, b4d18 <_ZN14LoRA_Functions10changeTypeEii+0x88>
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b4cbe:	4601      	mov	r1, r0
   b4cc0:	4a18      	ldr	r2, [pc, #96]	; (b4d24 <_ZN14LoRA_Functions10changeTypeEii+0x94>)
   b4cc2:	ab01      	add	r3, sp, #4
   b4cc4:	4628      	mov	r0, r5
   b4cc6:	f7ff fa38 	bl	b413a <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing sensor type from %d to %d", type, newType);
   b4cca:	9a01      	ldr	r2, [sp, #4]
   b4ccc:	4916      	ldr	r1, [pc, #88]	; (b4d28 <_ZN14LoRA_Functions10changeTypeEii+0x98>)
   b4cce:	4817      	ldr	r0, [pc, #92]	; (b4d2c <_ZN14LoRA_Functions10changeTypeEii+0x9c>)
   b4cd0:	4633      	mov	r3, r6
   b4cd2:	f7ff fa4e 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(nodeObjectContainer, "type", value);
   b4cd6:	ab03      	add	r3, sp, #12
   b4cd8:	4a12      	ldr	r2, [pc, #72]	; (b4d24 <_ZN14LoRA_Functions10changeTypeEii+0x94>)
   b4cda:	4621      	mov	r1, r4
   b4cdc:	4628      	mov	r0, r5
   b4cde:	f003 ff11 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);
   b4ce2:	4629      	mov	r1, r5
   b4ce4:	a804      	add	r0, sp, #16
   b4ce6:	f004 f875 	bl	b8dd4 <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);
   b4cea:	9903      	ldr	r1, [sp, #12]
   b4cec:	a804      	add	r0, sp, #16
   b4cee:	f004 f883 	bl	b8df8 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
   b4cf2:	4632      	mov	r2, r6
   b4cf4:	490e      	ldr	r1, [pc, #56]	; (b4d30 <_ZN14LoRA_Functions10changeTypeEii+0xa0>)
   b4cf6:	a804      	add	r0, sp, #16
   b4cf8:	f003 ff89 	bl	b8c0e <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b4cfc:	a804      	add	r0, sp, #16
   b4cfe:	f004 fb00 	bl	b9302 <_ZN12JsonModifier6finishEv>
	nodeID.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4d02:	f001 fc33 	bl	b656c <_ZN10nodeIDData8instanceEv>
   b4d06:	6869      	ldr	r1, [r5, #4]
   b4d08:	f001 fc68 	bl	b65dc <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4d0c:	a804      	add	r0, sp, #16
   b4d0e:	f003 fd03 	bl	b8718 <_ZN12JsonModifierD1Ev>
	return true;
   b4d12:	2001      	movs	r0, #1
}
   b4d14:	b014      	add	sp, #80	; 0x50
   b4d16:	bd70      	pop	{r4, r5, r6, pc}
	if (nodeNumber > 10) return false;
   b4d18:	2000      	movs	r0, #0
   b4d1a:	e7fb      	b.n	b4d14 <_ZN14LoRA_Functions10changeTypeEii+0x84>
   b4d1c:	2003da2c 	.word	0x2003da2c
   b4d20:	000c350e 	.word	0x000c350e
   b4d24:	000c3544 	.word	0x000c3544
   b4d28:	000c373a 	.word	0x000c373a
   b4d2c:	2003e658 	.word	0x2003e658
   b4d30:	000c36ef 	.word	0x000c36ef

000b4d34 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>:
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4d34:	b5f0      	push	{r4, r5, r6, r7, lr}
	lora_state = JOIN_ACK;			// Prepare to respond
   b4d36:	4b3c      	ldr	r3, [pc, #240]	; (b4e28 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xf4>)
   b4d38:	2202      	movs	r2, #2
   b4d3a:	701a      	strb	r2, [r3, #0]
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4d3c:	b091      	sub	sp, #68	; 0x44
		nodeDeviceID[i] = buf[i+2];
   b4d3e:	4a3b      	ldr	r2, [pc, #236]	; (b4e2c <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xf8>)
   b4d40:	ac09      	add	r4, sp, #36	; 0x24
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4d42:	4605      	mov	r5, r0
		nodeDeviceID[i] = buf[i+2];
   b4d44:	f102 0318 	add.w	r3, r2, #24
   b4d48:	4627      	mov	r7, r4
   b4d4a:	6810      	ldr	r0, [r2, #0]
   b4d4c:	6851      	ldr	r1, [r2, #4]
   b4d4e:	4626      	mov	r6, r4
   b4d50:	c603      	stmia	r6!, {r0, r1}
   b4d52:	3208      	adds	r2, #8
   b4d54:	429a      	cmp	r2, r3
   b4d56:	4634      	mov	r4, r6
   b4d58:	d1f7      	bne.n	b4d4a <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x16>
   b4d5a:	7813      	ldrb	r3, [r2, #0]
   b4d5c:	7033      	strb	r3, [r6, #0]
	current.set_tempNodeNumber(current.get_nodeNumber());			// Store the old node number for the ack - also differentiates between unconfigured node and time set
   b4d5e:	f001 fb7d 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4d62:	4604      	mov	r4, r0
   b4d64:	f001 fb7a 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4d68:	f001 fc8f 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
	current.set_sensorType(buf[27]);								// Store device type in the current data buffer 
   b4d6c:	4e30      	ldr	r6, [pc, #192]	; (b4e30 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xfc>)
	current.set_tempNodeNumber(current.get_nodeNumber());			// Store the old node number for the ack - also differentiates between unconfigured node and time set
   b4d6e:	4601      	mov	r1, r0
   b4d70:	4620      	mov	r0, r4
   b4d72:	f001 fd0b 	bl	b678c <_ZN17currentStatusData18set_tempNodeNumberEh>
	current.set_sensorType(buf[27]);								// Store device type in the current data buffer 
   b4d76:	f001 fb71 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4d7a:	7ef1      	ldrb	r1, [r6, #27]
   b4d7c:	f001 fd30 	bl	b67e0 <_ZN17currentStatusData14set_sensorTypeEh>
	if (current.get_nodeNumber() > 10) {							// An unconfigured node
   b4d80:	f001 fb6c 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4d84:	f001 fc81 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d88:	280a      	cmp	r0, #10
   b4d8a:	d930      	bls.n	b4dee <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xba>
		current.set_nodeNumber(findNodeNumber(nodeDeviceID));		// Look up the new node number
   b4d8c:	f001 fb66 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4d90:	4639      	mov	r1, r7
   b4d92:	4604      	mov	r4, r0
   b4d94:	4628      	mov	r0, r5
   b4d96:	f7ff fe2f 	bl	b49f8 <_ZN14LoRA_Functions14findNodeNumberEPKc>
   b4d9a:	4601      	mov	r1, r0
   b4d9c:	4620      	mov	r0, r4
   b4d9e:	f001 fcef 	bl	b6780 <_ZN17currentStatusData14set_nodeNumberEh>
		Log.info("Node %d join request from %s will change node number to %d", current.get_tempNodeNumber(), nodeDeviceID ,current.get_nodeNumber());
   b4da2:	f001 fb5b 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4da6:	f001 fc75 	bl	b6694 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4daa:	9003      	str	r0, [sp, #12]
   b4dac:	f001 fb56 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4db0:	f001 fc6b 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b4db4:	9a03      	ldr	r2, [sp, #12]
   b4db6:	9000      	str	r0, [sp, #0]
   b4db8:	491e      	ldr	r1, [pc, #120]	; (b4e34 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x100>)
   b4dba:	481f      	ldr	r0, [pc, #124]	; (b4e38 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x104>)
   b4dbc:	463b      	mov	r3, r7
   b4dbe:	f7ff f9d8 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
	current.set_alertCodeNode(1);									// This is a join request so alert code is 1
   b4dc2:	f001 fb4b 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4dc6:	2101      	movs	r1, #1
   b4dc8:	f001 fd04 	bl	b67d4 <_ZN17currentStatusData17set_alertCodeNodeEh>
	LoRA_Functions::changeType(current.get_nodeNumber(),current.get_sensorType());  // Record the sensor type in the nodeID structure
   b4dcc:	f001 fb46 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4dd0:	f001 fc5b 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b4dd4:	9003      	str	r0, [sp, #12]
   b4dd6:	f001 fb41 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4dda:	f001 fc7e 	bl	b66da <_ZNK17currentStatusData14get_sensorTypeEv>
   b4dde:	9903      	ldr	r1, [sp, #12]
   b4de0:	4602      	mov	r2, r0
   b4de2:	4628      	mov	r0, r5
   b4de4:	f7ff ff54 	bl	b4c90 <_ZN14LoRA_Functions10changeTypeEii>
}
   b4de8:	2001      	movs	r0, #1
   b4dea:	b011      	add	sp, #68	; 0x44
   b4dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("Node %d join request from %s setting clock and sensorType to %d",current.get_nodeNumber(), LoRA_Functions::instance().findDeviceID(current.get_nodeNumber()).c_str(), buf[27]);
   b4dee:	f001 fb35 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4df2:	f001 fc4a 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b4df6:	4604      	mov	r4, r0
   b4df8:	f7ff f9d4 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b4dfc:	9003      	str	r0, [sp, #12]
   b4dfe:	f001 fb2d 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4e02:	f001 fc42 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e06:	9903      	ldr	r1, [sp, #12]
   b4e08:	4602      	mov	r2, r0
   b4e0a:	a805      	add	r0, sp, #20
   b4e0c:	f7ff fb1e 	bl	b444c <_ZN14LoRA_Functions12findDeviceIDEh>
   b4e10:	7ef3      	ldrb	r3, [r6, #27]
   b4e12:	9300      	str	r3, [sp, #0]
   b4e14:	4909      	ldr	r1, [pc, #36]	; (b4e3c <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x108>)
   b4e16:	9b05      	ldr	r3, [sp, #20]
   b4e18:	4807      	ldr	r0, [pc, #28]	; (b4e38 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x104>)
   b4e1a:	4622      	mov	r2, r4
   b4e1c:	f7ff f9a9 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
   b4e20:	a805      	add	r0, sp, #20
   b4e22:	f00a fc87 	bl	bf734 <_ZN6StringD1Ev>
   b4e26:	e7cc      	b.n	b4dc2 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x8e>
   b4e28:	2003d878 	.word	0x2003d878
   b4e2c:	2003d882 	.word	0x2003d882
   b4e30:	2003d880 	.word	0x2003d880
   b4e34:	000c375d 	.word	0x000c375d
   b4e38:	2003e658 	.word	0x2003e658
   b4e3c:	000c3798 	.word	0x000c3798

000b4e40 <_ZN14LoRA_Functions11changeAlertEii>:
bool LoRA_Functions::changeAlert(int nodeNumber, int newAlert) {
   b4e40:	b570      	push	{r4, r5, r6, lr}
	if (nodeNumber > 10) return false;
   b4e42:	290a      	cmp	r1, #10
bool LoRA_Functions::changeAlert(int nodeNumber, int newAlert) {
   b4e44:	b094      	sub	sp, #80	; 0x50
   b4e46:	460c      	mov	r4, r1
   b4e48:	4616      	mov	r6, r2
	if (nodeNumber > 10) return false;
   b4e4a:	dc3d      	bgt.n	b4ec8 <_ZN14LoRA_Functions11changeAlertEii+0x88>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4e4c:	4d1f      	ldr	r5, [pc, #124]	; (b4ecc <_ZN14LoRA_Functions11changeAlertEii+0x8c>)
   b4e4e:	4628      	mov	r0, r5
   b4e50:	f003 fcf3 	bl	b883a <_ZNK10JsonParser14getOuterObjectEv>
   b4e54:	4a1e      	ldr	r2, [pc, #120]	; (b4ed0 <_ZN14LoRA_Functions11changeAlertEii+0x90>)
   b4e56:	4601      	mov	r1, r0
   b4e58:	ab02      	add	r3, sp, #8
   b4e5a:	4628      	mov	r0, r5
   b4e5c:	f003 fe52 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4e60:	1e62      	subs	r2, r4, #1
   b4e62:	9902      	ldr	r1, [sp, #8]
   b4e64:	4628      	mov	r0, r5
   b4e66:	f003 fd0a 	bl	b887e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries 
   b4e6a:	4604      	mov	r4, r0
   b4e6c:	b360      	cbz	r0, b4ec8 <_ZN14LoRA_Functions11changeAlertEii+0x88>
	jp.getValueByKey(nodeObjectContainer, "pend", currentAlert);
   b4e6e:	4601      	mov	r1, r0
   b4e70:	4a18      	ldr	r2, [pc, #96]	; (b4ed4 <_ZN14LoRA_Functions11changeAlertEii+0x94>)
   b4e72:	ab01      	add	r3, sp, #4
   b4e74:	4628      	mov	r0, r5
   b4e76:	f7ff f960 	bl	b413a <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing pending alert from %d to %d", currentAlert, newAlert);
   b4e7a:	9a01      	ldr	r2, [sp, #4]
   b4e7c:	4916      	ldr	r1, [pc, #88]	; (b4ed8 <_ZN14LoRA_Functions11changeAlertEii+0x98>)
   b4e7e:	4817      	ldr	r0, [pc, #92]	; (b4edc <_ZN14LoRA_Functions11changeAlertEii+0x9c>)
   b4e80:	4633      	mov	r3, r6
   b4e82:	f7ff f976 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(nodeObjectContainer, "pend", value);
   b4e86:	ab03      	add	r3, sp, #12
   b4e88:	4a12      	ldr	r2, [pc, #72]	; (b4ed4 <_ZN14LoRA_Functions11changeAlertEii+0x94>)
   b4e8a:	4621      	mov	r1, r4
   b4e8c:	4628      	mov	r0, r5
   b4e8e:	f003 fe39 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);
   b4e92:	4629      	mov	r1, r5
   b4e94:	a804      	add	r0, sp, #16
   b4e96:	f003 ff9d 	bl	b8dd4 <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);
   b4e9a:	9903      	ldr	r1, [sp, #12]
   b4e9c:	a804      	add	r0, sp, #16
   b4e9e:	f003 ffab 	bl	b8df8 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
   b4ea2:	4632      	mov	r2, r6
   b4ea4:	490e      	ldr	r1, [pc, #56]	; (b4ee0 <_ZN14LoRA_Functions11changeAlertEii+0xa0>)
   b4ea6:	a804      	add	r0, sp, #16
   b4ea8:	f003 feb1 	bl	b8c0e <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b4eac:	a804      	add	r0, sp, #16
   b4eae:	f004 fa28 	bl	b9302 <_ZN12JsonModifier6finishEv>
	nodeID.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4eb2:	f001 fb5b 	bl	b656c <_ZN10nodeIDData8instanceEv>
   b4eb6:	6869      	ldr	r1, [r5, #4]
   b4eb8:	f001 fb90 	bl	b65dc <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4ebc:	a804      	add	r0, sp, #16
   b4ebe:	f003 fc2b 	bl	b8718 <_ZN12JsonModifierD1Ev>
	return true;
   b4ec2:	2001      	movs	r0, #1
}
   b4ec4:	b014      	add	sp, #80	; 0x50
   b4ec6:	bd70      	pop	{r4, r5, r6, pc}
	if (nodeNumber > 10) return false;
   b4ec8:	2000      	movs	r0, #0
   b4eca:	e7fb      	b.n	b4ec4 <_ZN14LoRA_Functions11changeAlertEii+0x84>
   b4ecc:	2003da2c 	.word	0x2003da2c
   b4ed0:	000c350e 	.word	0x000c350e
   b4ed4:	000c3577 	.word	0x000c3577
   b4ed8:	000c37d8 	.word	0x000c37d8
   b4edc:	2003e658 	.word	0x2003e658
   b4ee0:	000c36ef 	.word	0x000c36ef

000b4ee4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>:
bool LoRA_Functions::acknowledgeDataReportGateway() { 		// This is a response to a data message it has a length of 11 and a specific payload and message flag
   b4ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4ee6:	ed2d 8b02 	vpush	{d8}
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b4eea:	2200      	movs	r2, #0
   b4eec:	b0b1      	sub	sp, #196	; 0xc4
   b4eee:	2114      	movs	r1, #20
   b4ef0:	4605      	mov	r5, r0
   b4ef2:	2002      	movs	r0, #2
   b4ef4:	f007 ffaa 	bl	bce4c <led_pattern_period>
   b4ef8:	221e      	movs	r2, #30
   b4efa:	2101      	movs	r1, #1
   b4efc:	4603      	mov	r3, r0
   b4efe:	e9cd 2100 	strd	r2, r1, [sp]
   b4f02:	a808      	add	r0, sp, #32
   b4f04:	2202      	movs	r2, #2
   b4f06:	21ff      	movs	r1, #255	; 0xff
   b4f08:	f009 f912 	bl	be130 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
	if (current.get_messageCount()==0) successPercent = 0.0;
   b4f0c:	f001 faa6 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4f10:	f001 fbd4 	bl	b66bc <_ZNK17currentStatusData16get_messageCountEv>
   b4f14:	2800      	cmp	r0, #0
   b4f16:	f000 80f7 	beq.w	b5108 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x224>
	else successPercent = ((current.get_successCount()+1.0)/(float)current.get_messageCount()) * 100.0;  // Add one to success because we are receving the message
   b4f1a:	f001 fa9f 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4f1e:	f001 fbd2 	bl	b66c6 <_ZNK17currentStatusData16get_successCountEv>
   b4f22:	4604      	mov	r4, r0
   b4f24:	f001 fa9a 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4f28:	f001 fbc8 	bl	b66bc <_ZNK17currentStatusData16get_messageCountEv>
   b4f2c:	ee08 0a10 	vmov	s16, r0
   b4f30:	4620      	mov	r0, r4
   b4f32:	f00b fc2b 	bl	c078c <__aeabi_i2d>
   b4f36:	4ba4      	ldr	r3, [pc, #656]	; (b51c8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2e4>)
   b4f38:	2200      	movs	r2, #0
   b4f3a:	f00b fadb 	bl	c04f4 <__adddf3>
   b4f3e:	eef8 7a48 	vcvt.f32.u32	s15, s16
   b4f42:	4606      	mov	r6, r0
   b4f44:	ee17 0a90 	vmov	r0, s15
   b4f48:	460f      	mov	r7, r1
   b4f4a:	f00b fc31 	bl	c07b0 <__aeabi_f2d>
   b4f4e:	4602      	mov	r2, r0
   b4f50:	460b      	mov	r3, r1
   b4f52:	4630      	mov	r0, r6
   b4f54:	4639      	mov	r1, r7
   b4f56:	f00b fdad 	bl	c0ab4 <__aeabi_ddiv>
   b4f5a:	4b9c      	ldr	r3, [pc, #624]	; (b51cc <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2e8>)
   b4f5c:	2200      	movs	r2, #0
   b4f5e:	f00b fc7f 	bl	c0860 <__aeabi_dmul>
   b4f62:	f00b ff75 	bl	c0e50 <__aeabi_d2f>
   b4f66:	ee08 0a10 	vmov	s16, r0
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b4f6a:	f00a ff96 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b4f6e:	4c98      	ldr	r4, [pc, #608]	; (b51d0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2ec>)
   b4f70:	1600      	asrs	r0, r0, #24
   b4f72:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));		// Third byte
   b4f74:	f00a ff91 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b4f78:	1400      	asrs	r0, r0, #16
   b4f7a:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));		// Second byte
   b4f7c:	f00a ff8d 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b4f80:	1200      	asrs	r0, r0, #8
   b4f82:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    	// First byte			
   b4f84:	f00a ff89 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b4f88:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports - for Gateways
   b4f8a:	f001 fa2f 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b4f8e:	f001 fc44 	bl	b681a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4f92:	0a00      	lsrs	r0, r0, #8
   b4f94:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b4f96:	f001 fa29 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b4f9a:	f001 fc3e 	bl	b681a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4f9e:	71e0      	strb	r0, [r4, #7]
	if (LoRA_Functions::getAlert(current.get_nodeNumber()) == 7) {
   b4fa0:	f001 fa5c 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4fa4:	f001 fb71 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b4fa8:	4601      	mov	r1, r0
   b4faa:	4628      	mov	r0, r5
   b4fac:	f7ff fabe 	bl	b452c <_ZN14LoRA_Functions8getAlertEi>
   b4fb0:	2807      	cmp	r0, #7
   b4fb2:	f040 80ac 	bne.w	b510e <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x22a>
		int newSensorType = LoRA_Functions::getType(current.get_nodeNumber());
   b4fb6:	f001 fa51 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4fba:	f001 fb66 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b4fbe:	4601      	mov	r1, r0
   b4fc0:	4628      	mov	r0, r5
   b4fc2:	f7ff fa85 	bl	b44d0 <_ZN14LoRA_Functions7getTypeEi>
   b4fc6:	4606      	mov	r6, r0
		Log.info("In data acknowledge, changing type to from %d to %d", current.get_sensorType(), newSensorType );
   b4fc8:	f001 fa48 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4fcc:	f001 fb85 	bl	b66da <_ZNK17currentStatusData14get_sensorTypeEv>
   b4fd0:	4633      	mov	r3, r6
   b4fd2:	4602      	mov	r2, r0
   b4fd4:	497f      	ldr	r1, [pc, #508]	; (b51d4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2f0>)
   b4fd6:	4880      	ldr	r0, [pc, #512]	; (b51d8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2f4>)
   b4fd8:	f7ff f8cb 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
		current.set_sensorType(newSensorType);						// Update current value for data report
   b4fdc:	f001 fa3e 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4fe0:	4631      	mov	r1, r6
   b4fe2:	f001 fbfd 	bl	b67e0 <_ZN17currentStatusData14set_sensorTypeEh>
		LoRA_Functions::changeAlert(current.get_nodeNumber(),0); 	// The alert was serviced - no longer pending
   b4fe6:	f001 fa39 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4fea:	f001 fb4e 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b4fee:	2200      	movs	r2, #0
   b4ff0:	4601      	mov	r1, r0
   b4ff2:	4628      	mov	r0, r5
   b4ff4:	f7ff ff24 	bl	b4e40 <_ZN14LoRA_Functions11changeAlertEii>
		buf[9] = newSensorType;
   b4ff8:	7266      	strb	r6, [r4, #9]
	if (!LoRA_Functions::nodeConfigured(current.get_nodeNumber(), successPercent)) {			// Check to see if we need to set an alert code
   b4ffa:	f001 fa2f 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b4ffe:	f001 fb44 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b5002:	eeb0 0a48 	vmov.f32	s0, s16
   b5006:	4601      	mov	r1, r0
   b5008:	4628      	mov	r0, r5
   b500a:	f7ff fdc3 	bl	b4b94 <_ZN14LoRA_Functions14nodeConfiguredEif>
   b500e:	2800      	cmp	r0, #0
   b5010:	f040 8083 	bne.w	b511a <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x236>
		Log.info("Node %d is invalid, setting alert code to 1", current.get_nodeNumber());
   b5014:	f001 fa22 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5018:	f001 fb37 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b501c:	496f      	ldr	r1, [pc, #444]	; (b51dc <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2f8>)
   b501e:	4602      	mov	r2, r0
   b5020:	486d      	ldr	r0, [pc, #436]	; (b51d8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2f4>)
   b5022:	f7ff f8a6 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
		current.set_alertCodeNode(1);								// Store as this will impact reporting
   b5026:	f001 fa19 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b502a:	2101      	movs	r1, #1
   b502c:	f001 fbd2 	bl	b67d4 <_ZN17currentStatusData17set_alertCodeNodeEh>
		current.set_alertTimestampNode(Time.now());
   b5030:	f001 fa14 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5034:	4605      	mov	r5, r0
   b5036:	f00a ff30 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b503a:	17c3      	asrs	r3, r0, #31
   b503c:	4602      	mov	r2, r0
   b503e:	4628      	mov	r0, r5
   b5040:	f001 fca0 	bl	b6984 <_ZN17currentStatusData22set_alertTimestampNodeEx>
		buf[8] = 1;													// Set the alert code 1 - misconfigured node will force a join request
   b5044:	2301      	movs	r3, #1
   b5046:	7223      	strb	r3, [r4, #8]
	buf[10] = current.get_openHours();
   b5048:	f001 fa08 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b504c:	f001 fcfa 	bl	b6a44 <_ZNK17currentStatusData13get_openHoursEv>
   b5050:	72a0      	strb	r0, [r4, #10]
	buf[11] = current.get_messageCount();							// Repeat back message number
   b5052:	f001 fa03 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5056:	f001 fb31 	bl	b66bc <_ZNK17currentStatusData16get_messageCountEv>
	digitalWrite(BLUE_LED,HIGH);			        				// Sending data
   b505a:	4b61      	ldr	r3, [pc, #388]	; (b51e0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2fc>)
	buf[11] = current.get_messageCount();							// Repeat back message number
   b505c:	72e0      	strb	r0, [r4, #11]
	digitalWrite(BLUE_LED,HIGH);			        				// Sending data
   b505e:	881d      	ldrh	r5, [r3, #0]
   b5060:	2101      	movs	r1, #1
   b5062:	4628      	mov	r0, r5
   b5064:	f00b f929 	bl	c02ba <digitalWrite>
	if (manager.sendtoWait(buf, 12, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b5068:	f001 f9f8 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b506c:	f001 fb0d 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b5070:	2204      	movs	r2, #4
   b5072:	4957      	ldr	r1, [pc, #348]	; (b51d0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2ec>)
   b5074:	9200      	str	r2, [sp, #0]
   b5076:	4603      	mov	r3, r0
   b5078:	220c      	movs	r2, #12
   b507a:	485a      	ldr	r0, [pc, #360]	; (b51e4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x300>)
   b507c:	f005 ff8a 	bl	baf94 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b5080:	4601      	mov	r1, r0
   b5082:	2800      	cmp	r0, #0
   b5084:	f040 8091 	bne.w	b51aa <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c6>
		digitalWrite(BLUE_LED,LOW);
   b5088:	4628      	mov	r0, r5
   b508a:	f00b f916 	bl	c02ba <digitalWrite>
		snprintf(messageString,sizeof(messageString),"Node %d data report %d acknowledged with alert %d, and signal strength %d", current.get_nodeNumber(), buf[10], buf[8], driver.lastRssi());
   b508e:	f001 f9e5 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5092:	f001 fafa 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b5096:	9005      	str	r0, [sp, #20]
   b5098:	4853      	ldr	r0, [pc, #332]	; (b51e8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x304>)
   b509a:	7aa5      	ldrb	r5, [r4, #10]
   b509c:	7a24      	ldrb	r4, [r4, #8]
   b509e:	f005 fd5e 	bl	bab5e <_ZN15RHGenericDriver8lastRssiEv>
   b50a2:	9b05      	ldr	r3, [sp, #20]
   b50a4:	4a51      	ldr	r2, [pc, #324]	; (b51ec <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x308>)
   b50a6:	9500      	str	r5, [sp, #0]
   b50a8:	e9cd 4001 	strd	r4, r0, [sp, #4]
   b50ac:	2180      	movs	r1, #128	; 0x80
   b50ae:	a810      	add	r0, sp, #64	; 0x40
   b50b0:	f007 ffe6 	bl	bd080 <snprintf>
		Log.info(messageString);
   b50b4:	4848      	ldr	r0, [pc, #288]	; (b51d8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2f4>)
   b50b6:	a910      	add	r1, sp, #64	; 0x40
   b50b8:	f7ff f85b 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b50bc:	f007 ff18 	bl	bcef0 <spark_cloud_flag_connected>
		if (Particle.connected()) Particle.publish("status", messageString,PRIVATE);
   b50c0:	b160      	cbz	r0, b50dc <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1f8>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b50c2:	4b4b      	ldr	r3, [pc, #300]	; (b51f0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x30c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b50c4:	494b      	ldr	r1, [pc, #300]	; (b51f4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x310>)
   b50c6:	781b      	ldrb	r3, [r3, #0]
   b50c8:	f88d 3000 	strb.w	r3, [sp]
   b50cc:	a806      	add	r0, sp, #24
   b50ce:	233c      	movs	r3, #60	; 0x3c
   b50d0:	aa10      	add	r2, sp, #64	; 0x40
   b50d2:	f008 faf9 	bl	bd6c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b50d6:	a807      	add	r0, sp, #28
   b50d8:	f7ff faae 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    led_set_status_active(&d_, active, nullptr);
   b50dc:	2200      	movs	r2, #0
   b50de:	2101      	movs	r1, #1
   b50e0:	a809      	add	r0, sp, #36	; 0x24
   b50e2:	f007 fe57 	bl	bcd94 <led_set_status_active>
    	delay(100);
   b50e6:	2064      	movs	r0, #100	; 0x64
   b50e8:	f008 f822 	bl	bd130 <delay>
   b50ec:	2200      	movs	r2, #0
   b50ee:	4611      	mov	r1, r2
   b50f0:	a809      	add	r0, sp, #36	; 0x24
   b50f2:	f007 fe4f 	bl	bcd94 <led_set_status_active>
		return true;
   b50f6:	2401      	movs	r4, #1
    LEDStatus blinkBlue(RGB_COLOR_BLUE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   b50f8:	a808      	add	r0, sp, #32
   b50fa:	f7fe fff1 	bl	b40e0 <_ZN8particle9LEDStatusD1Ev>
}
   b50fe:	4620      	mov	r0, r4
   b5100:	b031      	add	sp, #196	; 0xc4
   b5102:	ecbd 8b02 	vpop	{d8}
   b5106:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (current.get_messageCount()==0) successPercent = 0.0;
   b5108:	ed9f 8a3b 	vldr	s16, [pc, #236]	; b51f8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x314>
   b510c:	e72d      	b.n	b4f6a <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x86>
	else buf[9] = current.get_sensorType();
   b510e:	f001 f9a5 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5112:	f001 fae2 	bl	b66da <_ZNK17currentStatusData14get_sensorTypeEv>
   b5116:	7260      	strb	r0, [r4, #9]
   b5118:	e76f      	b.n	b4ffa <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x116>
	else if (LoRA_Functions::getAlert(current.get_nodeNumber()) > 0) {
   b511a:	f001 f99f 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b511e:	f001 fab4 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b5122:	4601      	mov	r1, r0
   b5124:	4628      	mov	r0, r5
   b5126:	f7ff fa01 	bl	b452c <_ZN14LoRA_Functions8getAlertEi>
   b512a:	4606      	mov	r6, r0
   b512c:	b3b0      	cbz	r0, b519c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b8>
		current.set_alertCodeNode(LoRA_Functions::getAlert(current.get_nodeNumber()));
   b512e:	f001 f995 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5132:	4606      	mov	r6, r0
   b5134:	f001 f992 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5138:	f001 faa7 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b513c:	4601      	mov	r1, r0
   b513e:	4628      	mov	r0, r5
   b5140:	f7ff f9f4 	bl	b452c <_ZN14LoRA_Functions8getAlertEi>
   b5144:	4601      	mov	r1, r0
   b5146:	4630      	mov	r0, r6
   b5148:	f001 fb44 	bl	b67d4 <_ZN17currentStatusData17set_alertCodeNodeEh>
		Log.info("Node %d has a pending alert %d", current.get_nodeNumber(), current.get_alertCodeNode());
   b514c:	f001 f986 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5150:	f001 fa9b 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b5154:	9005      	str	r0, [sp, #20]
   b5156:	f001 f981 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b515a:	f001 fab9 	bl	b66d0 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b515e:	4927      	ldr	r1, [pc, #156]	; (b51fc <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x318>)
   b5160:	9a05      	ldr	r2, [sp, #20]
   b5162:	4603      	mov	r3, r0
   b5164:	481c      	ldr	r0, [pc, #112]	; (b51d8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2f4>)
   b5166:	f7ff f804 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
		current.set_alertTimestampNode(Time.now());
   b516a:	f001 f977 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b516e:	4606      	mov	r6, r0
   b5170:	f00a fe93 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b5174:	4602      	mov	r2, r0
   b5176:	17c3      	asrs	r3, r0, #31
   b5178:	4630      	mov	r0, r6
   b517a:	f001 fc03 	bl	b6984 <_ZN17currentStatusData22set_alertTimestampNodeEx>
		buf[8] = current.get_alertCodeNode();						// Set the alert code based on pending alerts
   b517e:	f001 f96d 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5182:	f001 faa5 	bl	b66d0 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5186:	7220      	strb	r0, [r4, #8]
		LoRA_Functions::changeAlert(current.get_nodeNumber(),0); 	// The alert is sent - no longer pending
   b5188:	f001 f968 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b518c:	f001 fa7d 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b5190:	2200      	movs	r2, #0
   b5192:	4601      	mov	r1, r0
   b5194:	4628      	mov	r0, r5
   b5196:	f7ff fe53 	bl	b4e40 <_ZN14LoRA_Functions11changeAlertEii>
   b519a:	e755      	b.n	b5048 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x164>
		buf[8] = 0;													// No pending alert
   b519c:	7220      	strb	r0, [r4, #8]
		current.set_alertCodeNode(0);
   b519e:	f001 f95d 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b51a2:	4631      	mov	r1, r6
   b51a4:	f001 fb16 	bl	b67d4 <_ZN17currentStatusData17set_alertCodeNodeEh>
   b51a8:	e74e      	b.n	b5048 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x164>
		Log.info("Node %d data report response not acknowledged", current.get_nodeNumber());
   b51aa:	f001 f957 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b51ae:	f001 fa6c 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b51b2:	4913      	ldr	r1, [pc, #76]	; (b5200 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x31c>)
   b51b4:	4602      	mov	r2, r0
   b51b6:	4808      	ldr	r0, [pc, #32]	; (b51d8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2f4>)
   b51b8:	f7fe ffdb 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b51bc:	2100      	movs	r1, #0
   b51be:	4628      	mov	r0, r5
   b51c0:	f00b f87b 	bl	c02ba <digitalWrite>
		return false;
   b51c4:	2400      	movs	r4, #0
   b51c6:	e797      	b.n	b50f8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x214>
   b51c8:	3ff00000 	.word	0x3ff00000
   b51cc:	40590000 	.word	0x40590000
   b51d0:	2003d880 	.word	0x2003d880
   b51d4:	000c37fd 	.word	0x000c37fd
   b51d8:	2003e658 	.word	0x2003e658
   b51dc:	000c3831 	.word	0x000c3831
   b51e0:	000c43b0 	.word	0x000c43b0
   b51e4:	2003e178 	.word	0x2003e178
   b51e8:	2003d8fc 	.word	0x2003d8fc
   b51ec:	000c387c 	.word	0x000c387c
   b51f0:	2003d879 	.word	0x2003d879
   b51f4:	000c362e 	.word	0x000c362e
   b51f8:	00000000 	.word	0x00000000
   b51fc:	000c385d 	.word	0x000c385d
   b5200:	000c38c6 	.word	0x000c38c6

000b5204 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>:
bool LoRA_Functions::acknowledgeAlertReportGateway() {
   b5204:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5206:	4605      	mov	r5, r0
	buf[0] = highByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b5208:	f001 f8f0 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b520c:	f001 fb00 	bl	b6810 <_ZNK13sysStatusData15get_magicNumberEv>
   b5210:	4c3d      	ldr	r4, [pc, #244]	; (b5308 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0x104>)
   b5212:	0a00      	lsrs	r0, r0, #8
   b5214:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b5216:	f001 f8e9 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b521a:	f001 faf9 	bl	b6810 <_ZNK13sysStatusData15get_magicNumberEv>
   b521e:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  				// Fourth byte - current time
   b5220:	f00a fe3b 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b5224:	1600      	asrs	r0, r0, #24
   b5226:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));					// Third byte
   b5228:	f00a fe37 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b522c:	1400      	asrs	r0, r0, #16
   b522e:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));					// Second byte
   b5230:	f00a fe33 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b5234:	1200      	asrs	r0, r0, #8
   b5236:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    				// First byte	
   b5238:	f00a fe2f 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b523c:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());			// Frequency of reports - for Gateways
   b523e:	f001 f8d5 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b5242:	f001 faea 	bl	b681a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5246:	0a00      	lsrs	r0, r0, #8
   b5248:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b524a:	f001 f8cf 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b524e:	f001 fae4 	bl	b681a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5252:	71e0      	strb	r0, [r4, #7]
		current.set_alertCodeNode(LoRA_Functions::getAlert(current.get_nodeNumber()));		// Puts alert value into current object
   b5254:	f001 f902 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5258:	4606      	mov	r6, r0
   b525a:	f001 f8ff 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b525e:	f001 fa14 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b5262:	4601      	mov	r1, r0
   b5264:	4628      	mov	r0, r5
   b5266:	f7ff f961 	bl	b452c <_ZN14LoRA_Functions8getAlertEi>
   b526a:	4601      	mov	r1, r0
   b526c:	4630      	mov	r0, r6
   b526e:	f001 fab1 	bl	b67d4 <_ZN17currentStatusData17set_alertCodeNodeEh>
		current.set_alertTimestampNode(Time.now());
   b5272:	f001 f8f3 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5276:	4606      	mov	r6, r0
   b5278:	f00a fe0f 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b527c:	17c3      	asrs	r3, r0, #31
   b527e:	4602      	mov	r2, r0
   b5280:	4630      	mov	r0, r6
   b5282:	f001 fb7f 	bl	b6984 <_ZN17currentStatusData22set_alertTimestampNodeEx>
		buf[8] = current.get_alertCodeNode();						// sends the pending alert to the node
   b5286:	f001 f8e9 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b528a:	f001 fa21 	bl	b66d0 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b528e:	7220      	strb	r0, [r4, #8]
		LoRA_Functions::changeAlert(current.get_nodeNumber(),0);	// Resets as alert is no longer pending
   b5290:	f001 f8e4 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5294:	f001 f9f9 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b5298:	2200      	movs	r2, #0
   b529a:	4601      	mov	r1, r0
   b529c:	4628      	mov	r0, r5
   b529e:	f7ff fdcf 	bl	b4e40 <_ZN14LoRA_Functions11changeAlertEii>
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b52a2:	4b1a      	ldr	r3, [pc, #104]	; (b530c <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0x108>)
   b52a4:	881d      	ldrh	r5, [r3, #0]
   b52a6:	2101      	movs	r1, #1
   b52a8:	4628      	mov	r0, r5
   b52aa:	f00b f806 	bl	c02ba <digitalWrite>
	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), ALERT_ACK) == RH_ROUTER_ERROR_NONE) {
   b52ae:	f001 f8d5 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b52b2:	f001 f9ea 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b52b6:	2206      	movs	r2, #6
   b52b8:	4603      	mov	r3, r0
   b52ba:	9200      	str	r2, [sp, #0]
   b52bc:	4621      	mov	r1, r4
   b52be:	4814      	ldr	r0, [pc, #80]	; (b5310 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0x10c>)
   b52c0:	2209      	movs	r2, #9
   b52c2:	f005 fe67 	bl	baf94 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b52c6:	4604      	mov	r4, r0
   b52c8:	b978      	cbnz	r0, b52ea <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe6>
		Log.info("Node %d alert acknowledged", current.get_nodeNumber());
   b52ca:	f001 f8c7 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b52ce:	f001 f9dc 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b52d2:	4910      	ldr	r1, [pc, #64]	; (b5314 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0x110>)
   b52d4:	4602      	mov	r2, r0
   b52d6:	4810      	ldr	r0, [pc, #64]	; (b5318 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0x114>)
   b52d8:	f7fe ff4b 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b52dc:	4628      	mov	r0, r5
   b52de:	4621      	mov	r1, r4
   b52e0:	f00a ffeb 	bl	c02ba <digitalWrite>
		return true;
   b52e4:	2001      	movs	r0, #1
}
   b52e6:	b002      	add	sp, #8
   b52e8:	bd70      	pop	{r4, r5, r6, pc}
	Log.info("Node %d Response not acknowledged", current.get_nodeNumber());
   b52ea:	f001 f8b7 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b52ee:	f001 f9cc 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b52f2:	490a      	ldr	r1, [pc, #40]	; (b531c <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0x118>)
   b52f4:	4602      	mov	r2, r0
   b52f6:	4808      	ldr	r0, [pc, #32]	; (b5318 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0x114>)
   b52f8:	f7fe ff3b 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b52fc:	4628      	mov	r0, r5
   b52fe:	2100      	movs	r1, #0
   b5300:	f00a ffdb 	bl	c02ba <digitalWrite>
	return false;
   b5304:	2000      	movs	r0, #0
   b5306:	e7ee      	b.n	b52e6 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe2>
   b5308:	2003d880 	.word	0x2003d880
   b530c:	000c43b0 	.word	0x000c43b0
   b5310:	2003e178 	.word	0x2003e178
   b5314:	000c38f4 	.word	0x000c38f4
   b5318:	2003e658 	.word	0x2003e658
   b531c:	000c390f 	.word	0x000c390f

000b5320 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>:
bool LoRA_Functions::respondToLoRAMessageGateway() {
   b5320:	b510      	push	{r4, lr}
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b5322:	4c0f      	ldr	r4, [pc, #60]	; (b5360 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x40>)
   b5324:	7823      	ldrb	r3, [r4, #0]
   b5326:	2b04      	cmp	r3, #4
   b5328:	d00c      	beq.n	b5344 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x24>
	if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().acknowledgeJoinRequestGateway()) return true;}
   b532a:	7823      	ldrb	r3, [r4, #0]
   b532c:	2b02      	cmp	r3, #2
   b532e:	d104      	bne.n	b533a <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x1a>
   b5330:	f7fe ff38 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b5334:	f7ff f996 	bl	b4664 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>
   b5338:	b950      	cbnz	r0, b5350 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x30>
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b533a:	7823      	ldrb	r3, [r4, #0]
   b533c:	2b06      	cmp	r3, #6
   b533e:	d009      	beq.n	b5354 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x34>
	return false; 
   b5340:	2000      	movs	r0, #0
   b5342:	e006      	b.n	b5352 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x32>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b5344:	f7fe ff2e 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b5348:	f7ff fdcc 	bl	b4ee4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>
   b534c:	2800      	cmp	r0, #0
   b534e:	d0ec      	beq.n	b532a <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0xa>
   b5350:	2001      	movs	r0, #1
}
   b5352:	bd10      	pop	{r4, pc}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b5354:	f7fe ff26 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
}
   b5358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b535c:	f7ff bf52 	b.w	b5204 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>
   b5360:	2003d878 	.word	0x2003d878

000b5364 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>:
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b5364:	b570      	push	{r4, r5, r6, lr}
   b5366:	b088      	sub	sp, #32
	uint8_t len = sizeof(buf);
   b5368:	2379      	movs	r3, #121	; 0x79
   b536a:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b536e:	f10d 031f 	add.w	r3, sp, #31
   b5372:	9303      	str	r3, [sp, #12]
   b5374:	f10d 031e 	add.w	r3, sp, #30
   b5378:	4e47      	ldr	r6, [pc, #284]	; (b5498 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x134>)
   b537a:	9302      	str	r3, [sp, #8]
   b537c:	f10d 031d 	add.w	r3, sp, #29
   b5380:	9301      	str	r3, [sp, #4]
   b5382:	ab07      	add	r3, sp, #28
   b5384:	9300      	str	r3, [sp, #0]
   b5386:	4845      	ldr	r0, [pc, #276]	; (b549c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x138>)
   b5388:	f10d 031b 	add.w	r3, sp, #27
   b538c:	f10d 021a 	add.w	r2, sp, #26
   b5390:	4631      	mov	r1, r6
   b5392:	f005 fe33 	bl	baffc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b5396:	b910      	cbnz	r0, b539e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x3a>
	return false;
   b5398:	2000      	movs	r0, #0
}
   b539a:	b008      	add	sp, #32
   b539c:	bd70      	pop	{r4, r5, r6, pc}
		buf[len] = 0;
   b539e:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b53a2:	2400      	movs	r4, #0
   b53a4:	54f4      	strb	r4, [r6, r3]
		if (!((buf[0] << 8 | buf[1]) == sysStatus.get_magicNumber())) {
   b53a6:	8835      	ldrh	r5, [r6, #0]
   b53a8:	f001 f820 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b53ac:	f001 fa30 	bl	b6810 <_ZNK13sysStatusData15get_magicNumberEv>
   b53b0:	ba6d      	rev16	r5, r5
   b53b2:	b2ad      	uxth	r5, r5
   b53b4:	42a8      	cmp	r0, r5
   b53b6:	d014      	beq.n	b53e2 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x7e>
			Log.info("Node %d message magic number of %d did not match the Magic Number in memory %d - Ignoring", current.get_nodeNumber(),(buf[0] << 8 | buf[1]), sysStatus.get_magicNumber());
   b53b8:	f001 f850 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b53bc:	f001 f965 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b53c0:	8833      	ldrh	r3, [r6, #0]
   b53c2:	9005      	str	r0, [sp, #20]
   b53c4:	ba5b      	rev16	r3, r3
   b53c6:	b29b      	uxth	r3, r3
   b53c8:	9304      	str	r3, [sp, #16]
   b53ca:	f001 f80f 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b53ce:	f001 fa1f 	bl	b6810 <_ZNK13sysStatusData15get_magicNumberEv>
   b53d2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b53d6:	9000      	str	r0, [sp, #0]
   b53d8:	4931      	ldr	r1, [pc, #196]	; (b54a0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x13c>)
   b53da:	4832      	ldr	r0, [pc, #200]	; (b54a4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x140>)
   b53dc:	f7fe fec9 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
			return false;
   b53e0:	e7da      	b.n	b5398 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
			current.set_nodeNumber(from);
   b53e2:	f001 f83b 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b53e6:	f89d 101b 	ldrb.w	r1, [sp, #27]
			lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b53ea:	4c2f      	ldr	r4, [pc, #188]	; (b54a8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x144>)
			current.set_nodeNumber(from);
   b53ec:	f001 f9c8 	bl	b6780 <_ZN17currentStatusData14set_nodeNumberEh>
			lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b53f0:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b53f4:	f003 030f 	and.w	r3, r3, #15
   b53f8:	7023      	strb	r3, [r4, #0]
			Log.info("Node %d %s message with rssi=%d", current.get_nodeNumber(), loraStateNames[lora_state], driver.lastRssi());
   b53fa:	f001 f82f 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b53fe:	f001 f944 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b5402:	7821      	ldrb	r1, [r4, #0]
   b5404:	4b29      	ldr	r3, [pc, #164]	; (b54ac <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x148>)
   b5406:	9005      	str	r0, [sp, #20]
   b5408:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   b540c:	4828      	ldr	r0, [pc, #160]	; (b54b0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x14c>)
   b540e:	9304      	str	r3, [sp, #16]
   b5410:	f005 fba5 	bl	bab5e <_ZN15RHGenericDriver8lastRssiEv>
   b5414:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b5418:	9000      	str	r0, [sp, #0]
   b541a:	4926      	ldr	r1, [pc, #152]	; (b54b4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x150>)
   b541c:	4821      	ldr	r0, [pc, #132]	; (b54a4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x140>)
   b541e:	f7fe fea8 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_RPT) { if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b5422:	7823      	ldrb	r3, [r4, #0]
   b5424:	2b03      	cmp	r3, #3
   b5426:	d128      	bne.n	b547a <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x116>
   b5428:	f7fe febc 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b542c:	f7fe ff98 	bl	b4360 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>
		else if (lora_state == ALERT_RPT) { if(!LoRA_Functions::instance().decipherAlertReportGateway()) return false;}
   b5430:	2800      	cmp	r0, #0
   b5432:	d0b1      	beq.n	b5398 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (sysStatus.get_updatedFrequencyMinutes() > 0) {              							// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b5434:	f000 ffda 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b5438:	f001 f9f4 	bl	b6824 <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b543c:	b1c0      	cbz	r0, b5470 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x10c>
			sysStatus.set_frequencyMinutes(sysStatus.get_updatedFrequencyMinutes());		// This was the temporary value from the particle function
   b543e:	f000 ffd5 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b5442:	4604      	mov	r4, r0
   b5444:	f000 ffd2 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b5448:	f001 f9ec 	bl	b6824 <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b544c:	4601      	mov	r1, r0
   b544e:	4620      	mov	r0, r4
   b5450:	f001 fa26 	bl	b68a0 <_ZN13sysStatusData20set_frequencyMinutesEt>
			sysStatus.set_updatedFrequencyMinutes(0);
   b5454:	f000 ffca 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b5458:	2100      	movs	r1, #0
   b545a:	f001 fa27 	bl	b68ac <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
			Log.info("We are updating the publish frequency to %i minutes", sysStatus.get_frequencyMinutes());
   b545e:	f000 ffc5 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b5462:	f001 f9da 	bl	b681a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5466:	4914      	ldr	r1, [pc, #80]	; (b54b8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x154>)
   b5468:	4602      	mov	r2, r0
   b546a:	480e      	ldr	r0, [pc, #56]	; (b54a4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x140>)
   b546c:	f7fe fe81 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
		if (LoRA_Functions::instance().respondToLoRAMessageGateway()) return true;
   b5470:	f7fe fe98 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b5474:	f7ff ff54 	bl	b5320 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>
   b5478:	e78f      	b.n	b539a <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x36>
		else if (lora_state == JOIN_REQ) { if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b547a:	2b01      	cmp	r3, #1
   b547c:	d104      	bne.n	b5488 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x124>
   b547e:	f7fe fe91 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b5482:	f7ff fc57 	bl	b4d34 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>
   b5486:	e7d3      	b.n	b5430 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xcc>
		else if (lora_state == ALERT_RPT) { if(!LoRA_Functions::instance().decipherAlertReportGateway()) return false;}
   b5488:	2b05      	cmp	r3, #5
   b548a:	d1d3      	bne.n	b5434 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xd0>
   b548c:	f7fe fe8a 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b5490:	f7fe ffb6 	bl	b4400 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>
   b5494:	e7cc      	b.n	b5430 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xcc>
   b5496:	bf00      	nop
   b5498:	2003d880 	.word	0x2003d880
   b549c:	2003e178 	.word	0x2003e178
   b54a0:	000c3931 	.word	0x000c3931
   b54a4:	2003e658 	.word	0x2003e658
   b54a8:	2003d878 	.word	0x2003d878
   b54ac:	2003d58c 	.word	0x2003d58c
   b54b0:	2003d8fc 	.word	0x2003d8fc
   b54b4:	000c398b 	.word	0x000c398b
   b54b8:	000c39ab 	.word	0x000c39ab

000b54bc <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b54bc:	4b01      	ldr	r3, [pc, #4]	; (b54c4 <_Z18outOfMemoryHandleryi+0x8>)
   b54be:	601a      	str	r2, [r3, #0]
}
   b54c0:	4770      	bx	lr
   b54c2:	bf00      	nop
   b54c4:	2003d5fc 	.word	0x2003d5fc

000b54c8 <_Z13userSwitchISRv>:

void userSwitchISR() {
	userSwitchDectected = true;
   b54c8:	4b01      	ldr	r3, [pc, #4]	; (b54d0 <_Z13userSwitchISRv+0x8>)
   b54ca:	2201      	movs	r2, #1
   b54cc:	701a      	strb	r2, [r3, #0]
}
   b54ce:	4770      	bx	lr
   b54d0:	2003e46b 	.word	0x2003e46b

000b54d4 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b54d4:	b530      	push	{r4, r5, lr}
   b54d6:	b085      	sub	sp, #20
   b54d8:	4604      	mov	r4, r0
   b54da:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b54dc:	b160      	cbz	r0, b54f8 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b54de:	6840      	ldr	r0, [r0, #4]
   b54e0:	b150      	cbz	r0, b54f8 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b54e2:	6885      	ldr	r5, [r0, #8]
   b54e4:	b145      	cbz	r5, b54f8 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b54e6:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b54ea:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b54ee:	68c4      	ldr	r4, [r0, #12]
   b54f0:	ab01      	add	r3, sp, #4
   b54f2:	466a      	mov	r2, sp
   b54f4:	a902      	add	r1, sp, #8
   b54f6:	47a0      	blx	r4
    }
   b54f8:	b005      	add	sp, #20
   b54fa:	bd30      	pop	{r4, r5, pc}

000b54fc <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b54fc:	b530      	push	{r4, r5, lr}
   b54fe:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b5500:	6800      	ldr	r0, [r0, #0]
   b5502:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b5504:	9301      	str	r3, [sp, #4]
   b5506:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b550a:	6883      	ldr	r3, [r0, #8]
   b550c:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b5510:	b90b      	cbnz	r3, b5516 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b5512:	f00a ffdd 	bl	c04d0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5516:	68c3      	ldr	r3, [r0, #12]
   b5518:	aa01      	add	r2, sp, #4
   b551a:	a902      	add	r1, sp, #8
   b551c:	4798      	blx	r3
      }
   b551e:	b005      	add	sp, #20
   b5520:	bd30      	pop	{r4, r5, pc}

000b5522 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b5522:	2a01      	cmp	r2, #1
   b5524:	d102      	bne.n	b552c <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5526:	6001      	str	r1, [r0, #0]
      }
   b5528:	2000      	movs	r0, #0
   b552a:	4770      	bx	lr
	  switch (__op)
   b552c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b552e:	bf04      	itt	eq
   b5530:	680b      	ldreq	r3, [r1, #0]
   b5532:	6003      	streq	r3, [r0, #0]
	      break;
   b5534:	e7f8      	b.n	b5528 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b5536 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5536:	6803      	ldr	r3, [r0, #0]
   b5538:	6812      	ldr	r2, [r2, #0]
   b553a:	e9d1 0100 	ldrd	r0, r1, [r1]
   b553e:	4718      	bx	r3

000b5540 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b5540:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5542:	2000      	movs	r0, #0
   b5544:	f007 fcf4 	bl	bcf30 <spark_sync_time_pending>
   b5548:	b128      	cbz	r0, b5556 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b554a:	f007 fcd1 	bl	bcef0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b554e:	f080 0001 	eor.w	r0, r0, #1
   b5552:	b2c0      	uxtb	r0, r0
    }
   b5554:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5556:	2001      	movs	r0, #1
   b5558:	e7fc      	b.n	b5554 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b555a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b555a:	b510      	push	{r4, lr}
      if (_M_manager)
   b555c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b555e:	4604      	mov	r4, r0
      if (_M_manager)
   b5560:	b113      	cbz	r3, b5568 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5562:	2203      	movs	r2, #3
   b5564:	4601      	mov	r1, r0
   b5566:	4798      	blx	r3
    }
   b5568:	4620      	mov	r0, r4
   b556a:	bd10      	pop	{r4, pc}

000b556c <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b556c:	b510      	push	{r4, lr}
            delete callableWrapper;
   b556e:	4604      	mov	r4, r0
   b5570:	b138      	cbz	r0, b5582 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b5572:	f7ff fff2 	bl	b555a <_ZNSt14_Function_baseD1Ev>
   b5576:	4620      	mov	r0, r4
   b5578:	2110      	movs	r1, #16
        };
   b557a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b557e:	f7fe bd8e 	b.w	b409e <_ZdlPvj>
        };
   b5582:	bd10      	pop	{r4, pc}

000b5584 <_Z22publishStateTransitionv>:
{
   b5584:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE && !Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b5586:	4c14      	ldr	r4, [pc, #80]	; (b55d8 <_Z22publishStateTransitionv+0x54>)
   b5588:	4d14      	ldr	r5, [pc, #80]	; (b55dc <_Z22publishStateTransitionv+0x58>)
   b558a:	7823      	ldrb	r3, [r4, #0]
   b558c:	4e14      	ldr	r6, [pc, #80]	; (b55e0 <_Z22publishStateTransitionv+0x5c>)
   b558e:	2b02      	cmp	r3, #2
{
   b5590:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE && !Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b5592:	d117      	bne.n	b55c4 <_Z22publishStateTransitionv+0x40>
   b5594:	f00a fc64 	bl	bfe60 <_ZN9TimeClass7isValidEv>
   b5598:	b9a0      	cbnz	r0, b55c4 <_Z22publishStateTransitionv+0x40>
   b559a:	7822      	ldrb	r2, [r4, #0]
   b559c:	7833      	ldrb	r3, [r6, #0]
   b559e:	eb05 1202 	add.w	r2, r5, r2, lsl #4
   b55a2:	9200      	str	r2, [sp, #0]
   b55a4:	4a0f      	ldr	r2, [pc, #60]	; (b55e4 <_Z22publishStateTransitionv+0x60>)
   b55a6:	eb05 1303 	add.w	r3, r5, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b55aa:	f44f 7180 	mov.w	r1, #256	; 0x100
   b55ae:	a802      	add	r0, sp, #8
   b55b0:	f007 fd66 	bl	bd080 <snprintf>
	oldState = state;
   b55b4:	7823      	ldrb	r3, [r4, #0]
	Log.info(stateTransitionString);
   b55b6:	480c      	ldr	r0, [pc, #48]	; (b55e8 <_Z22publishStateTransitionv+0x64>)
	oldState = state;
   b55b8:	7033      	strb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b55ba:	a902      	add	r1, sp, #8
   b55bc:	f7fe fdd9 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
}
   b55c0:	b042      	add	sp, #264	; 0x108
   b55c2:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b55c4:	7822      	ldrb	r2, [r4, #0]
   b55c6:	7833      	ldrb	r3, [r6, #0]
   b55c8:	eb05 1202 	add.w	r2, r5, r2, lsl #4
   b55cc:	9200      	str	r2, [sp, #0]
   b55ce:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   b55d2:	4a06      	ldr	r2, [pc, #24]	; (b55ec <_Z22publishStateTransitionv+0x68>)
   b55d4:	e7e9      	b.n	b55aa <_Z22publishStateTransitionv+0x26>
   b55d6:	bf00      	nop
   b55d8:	2003e46a 	.word	0x2003e46a
   b55dc:	2003d600 	.word	0x2003d600
   b55e0:	2003e469 	.word	0x2003e469
   b55e4:	000c3a14 	.word	0x000c3a14
   b55e8:	2003e658 	.word	0x2003e658
   b55ec:	000c3a34 	.word	0x000c3a34

000b55f0 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 10 if the device is in test mode or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {											// Time till next scheduled event
   b55f0:	b510      	push	{r4, lr}
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop

	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b55f2:	f000 fefb 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b55f6:	f001 f910 	bl	b681a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b55fa:	4604      	mov	r4, r0
   	if (Time.isValid()) {
   b55fc:	f00a fc30 	bl	bfe60 <_ZN9TimeClass7isValidEv>
   b5600:	b908      	cbnz	r0, b5606 <_Z21secondsUntilNextEventv+0x16>
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop
   b5602:	200a      	movs	r0, #10
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
        // Log.info("Report frequency %d mins, next event in %lu seconds", sysStatus.get_frequencyMinutes(), secondsToReturn);
    }
	return secondsToReturn;
}
   b5604:	bd10      	pop	{r4, pc}
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b5606:	203c      	movs	r0, #60	; 0x3c
   b5608:	4344      	muls	r4, r0
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b560a:	f00a fc46 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b560e:	fbb0 f3f4 	udiv	r3, r0, r4
   b5612:	fb03 0014 	mls	r0, r3, r4, r0
   b5616:	1a20      	subs	r0, r4, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b5618:	2809      	cmp	r0, #9
   b561a:	d9f2      	bls.n	b5602 <_Z21secondsUntilNextEventv+0x12>
   b561c:	42a0      	cmp	r0, r4
   b561e:	bf28      	it	cs
   b5620:	4620      	movcs	r0, r4
   b5622:	e7ef      	b.n	b5604 <_Z21secondsUntilNextEventv+0x14>

000b5624 <_Z14publishWebhookh>:
 * @details Nodes and Gateways will use the same format for this webook - data sources will change
 * 
 * 
 */

void publishWebhook(uint8_t nodeNumber) {
   b5624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5628:	ed2d 8b02 	vpush	{d8}
   b562c:	b0e7      	sub	sp, #412	; 0x19c
	char data[256];                             						// Store the date in this character array - not global
	// Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
    const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b562e:	ac1e      	add	r4, sp, #120	; 0x78
   b5630:	4b83      	ldr	r3, [pc, #524]	; (b5840 <_Z14publishWebhookh+0x21c>)
   b5632:	6023      	str	r3, [r4, #0]
   b5634:	4b83      	ldr	r3, [pc, #524]	; (b5844 <_Z14publishWebhookh+0x220>)
   b5636:	6063      	str	r3, [r4, #4]
   b5638:	4b83      	ldr	r3, [pc, #524]	; (b5848 <_Z14publishWebhookh+0x224>)
   b563a:	60a3      	str	r3, [r4, #8]
   b563c:	4b83      	ldr	r3, [pc, #524]	; (b584c <_Z14publishWebhookh+0x228>)
   b563e:	60e3      	str	r3, [r4, #12]
   b5640:	4b83      	ldr	r3, [pc, #524]	; (b5850 <_Z14publishWebhookh+0x22c>)
   b5642:	6123      	str	r3, [r4, #16]
   b5644:	4b83      	ldr	r3, [pc, #524]	; (b5854 <_Z14publishWebhookh+0x230>)
   b5646:	6163      	str	r3, [r4, #20]
   b5648:	f04f 0a00 	mov.w	sl, #0
   b564c:	4b82      	ldr	r3, [pc, #520]	; (b5858 <_Z14publishWebhookh+0x234>)
   b564e:	f8c4 a01c 	str.w	sl, [r4, #28]
   b5652:	61a3      	str	r3, [r4, #24]

	if (nodeNumber > 0) {												// Webhook for a node
   b5654:	4605      	mov	r5, r0
   b5656:	2800      	cmp	r0, #0
   b5658:	f000 80a1 	beq.w	b579e <_Z14publishWebhookh+0x17a>
		float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b565c:	f000 fefe 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5660:	f001 f831 	bl	b66c6 <_ZNK17currentStatusData16get_successCountEv>
   b5664:	4680      	mov	r8, r0
   b5666:	f000 fef9 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b566a:	f001 f827 	bl	b66bc <_ZNK17currentStatusData16get_messageCountEv>
   b566e:	9019      	str	r0, [sp, #100]	; 0x64

		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5670:	f7fe fd98 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b5674:	462a      	mov	r2, r5
   b5676:	4601      	mov	r1, r0
   b5678:	a81a      	add	r0, sp, #104	; 0x68
   b567a:	f7fe fee7 	bl	b444c <_ZN14LoRA_Functions12findDeviceIDEh>
	const char * c_str() const { return buffer; }
   b567e:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
   b5682:	f000 feeb 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5686:	f001 f8d7 	bl	b6838 <_ZNK17currentStatusData15get_hourlyCountEv>
   b568a:	9014      	str	r0, [sp, #80]	; 0x50
   b568c:	f000 fee6 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5690:	f001 f8d7 	bl	b6842 <_ZNK17currentStatusData14get_dailyCountEv>
   b5694:	9015      	str	r0, [sp, #84]	; 0x54
   b5696:	f000 fee1 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b569a:	f001 f81e 	bl	b66da <_ZNK17currentStatusData14get_sensorTypeEv>
   b569e:	9016      	str	r0, [sp, #88]	; 0x58
   b56a0:	f000 fedc 	bl	b645c <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b56a4:	f000 ff00 	bl	b64a8 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b56a8:	eeb0 8a40 	vmov.f32	s16, s0
   b56ac:	eef0 8a60 	vmov.f32	s17, s1
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b56b0:	f000 fed4 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b56b4:	f000 fff8 	bl	b66a8 <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b56b8:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   b56bc:	9313      	str	r3, [sp, #76]	; 0x4c
		current.get_internalTempC(), current.get_resetCount(), current.get_alertCodeNode(), current.get_nodeNumber(), current.get_RSSI(), current.get_messageCount(), percentSuccess, Time.now());
   b56be:	f000 fecd 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b56c2:	f000 ffec 	bl	b669e <_ZNK17currentStatusData17get_internalTempCEv>
   b56c6:	9017      	str	r0, [sp, #92]	; 0x5c
   b56c8:	f000 fec8 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b56cc:	f000 fff1 	bl	b66b2 <_ZNK17currentStatusData14get_resetCountEv>
   b56d0:	9018      	str	r0, [sp, #96]	; 0x60
   b56d2:	f000 fec3 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b56d6:	f000 fffb 	bl	b66d0 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b56da:	4604      	mov	r4, r0
   b56dc:	f000 febe 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b56e0:	f000 ffd3 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
   b56e4:	4605      	mov	r5, r0
   b56e6:	f000 feb9 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b56ea:	f001 f8a0 	bl	b682e <_ZNK17currentStatusData8get_RSSIEv>
   b56ee:	4606      	mov	r6, r0
   b56f0:	f000 feb4 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b56f4:	f000 ffe2 	bl	b66bc <_ZNK17currentStatusData16get_messageCountEv>
   b56f8:	4607      	mov	r7, r0
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b56fa:	f00a fbce 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b56fe:	9010      	str	r0, [sp, #64]	; 0x40
		float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b5700:	4640      	mov	r0, r8
   b5702:	f00b f843 	bl	c078c <__aeabi_i2d>
   b5706:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b5708:	4680      	mov	r8, r0
   b570a:	4618      	mov	r0, r3
   b570c:	4689      	mov	r9, r1
   b570e:	f00b f83d 	bl	c078c <__aeabi_i2d>
   b5712:	4602      	mov	r2, r0
   b5714:	460b      	mov	r3, r1
   b5716:	4640      	mov	r0, r8
   b5718:	4649      	mov	r1, r9
   b571a:	f00b f9cb 	bl	c0ab4 <__aeabi_ddiv>
   b571e:	4b4f      	ldr	r3, [pc, #316]	; (b585c <_Z14publishWebhookh+0x238>)
   b5720:	2200      	movs	r2, #0
   b5722:	f00b f89d 	bl	c0860 <__aeabi_dmul>
   b5726:	f00b fb93 	bl	c0e50 <__aeabi_d2f>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b572a:	f00b f841 	bl	c07b0 <__aeabi_f2d>
   b572e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5730:	9308      	str	r3, [sp, #32]
   b5732:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b5734:	9307      	str	r3, [sp, #28]
   b5736:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b5738:	9306      	str	r3, [sp, #24]
   b573a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b573c:	9302      	str	r3, [sp, #8]
   b573e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b5740:	9301      	str	r3, [sp, #4]
   b5742:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b5744:	4a46      	ldr	r2, [pc, #280]	; (b5860 <_Z14publishWebhookh+0x23c>)
   b5746:	9300      	str	r3, [sp, #0]
   b5748:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   b574c:	465b      	mov	r3, fp
   b574e:	f44f 7180 	mov.w	r1, #256	; 0x100
   b5752:	ed8d 8b04 	vstr	d8, [sp, #16]
   b5756:	a826      	add	r0, sp, #152	; 0x98
   b5758:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
   b575c:	e9cd 670b 	strd	r6, r7, [sp, #44]	; 0x2c
   b5760:	f007 fc8e 	bl	bd080 <snprintf>
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5764:	a81a      	add	r0, sp, #104	; 0x68
   b5766:	f009 ffe5 	bl	bf734 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Node-v1", data, PRIVATE | WITH_ACK);
   b576a:	f004 fcd3 	bl	ba114 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b576e:	4b3d      	ldr	r3, [pc, #244]	; (b5864 <_Z14publishWebhookh+0x240>)
   b5770:	4a3d      	ldr	r2, [pc, #244]	; (b5868 <_Z14publishWebhookh+0x244>)
   b5772:	781b      	ldrb	r3, [r3, #0]
   b5774:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b5776:	493d      	ldr	r1, [pc, #244]	; (b586c <_Z14publishWebhookh+0x248>)
   b5778:	4313      	orrs	r3, r2
   b577a:	6802      	ldr	r2, [r0, #0]
   b577c:	f88d 3000 	strb.w	r3, [sp]
   b5780:	f88d a004 	strb.w	sl, [sp, #4]
   b5784:	6814      	ldr	r4, [r2, #0]
   b5786:	233c      	movs	r3, #60	; 0x3c
   b5788:	aa26      	add	r2, sp, #152	; 0x98
   b578a:	47a0      	blx	r4
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_messageCount(), Time.now());
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
	}

	Log.info(data);
   b578c:	4838      	ldr	r0, [pc, #224]	; (b5870 <_Z14publishWebhookh+0x24c>)
   b578e:	a926      	add	r1, sp, #152	; 0x98
   b5790:	f7fe fcef 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>



	return;
}
   b5794:	b067      	add	sp, #412	; 0x19c
   b5796:	ecbd 8b02 	vpop	{d8}
   b579a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		takeMeasurements();												// Loads the current values for the Gateway
   b579e:	f001 ffcb 	bl	b7738 <_Z16takeMeasurementsv>
        return spark_deviceID();
   b57a2:	a81a      	add	r0, sp, #104	; 0x68
   b57a4:	f007 fbac 	bl	bcf00 <spark_deviceID>
   b57a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b57aa:	9313      	str	r3, [sp, #76]	; 0x4c
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b57ac:	f000 fe1e 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b57b0:	f000 ff66 	bl	b6680 <_ZNK13sysStatusData14get_sensorTypeEv>
   b57b4:	4606      	mov	r6, r0
   b57b6:	f000 fe51 	bl	b645c <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b57ba:	f000 fe75 	bl	b64a8 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b57be:	eeb0 8a40 	vmov.f32	s16, s0
   b57c2:	eef0 8a60 	vmov.f32	s17, s1
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b57c6:	f000 fe49 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b57ca:	f000 ff6d 	bl	b66a8 <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b57ce:	f854 9020 	ldr.w	r9, [r4, r0, lsl #2]
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_messageCount(), Time.now());
   b57d2:	f000 fe43 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b57d6:	f000 ff62 	bl	b669e <_ZNK17currentStatusData17get_internalTempCEv>
   b57da:	4604      	mov	r4, r0
   b57dc:	f000 fe06 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b57e0:	f000 ff3a 	bl	b6658 <_ZNK13sysStatusData14get_resetCountEv>
   b57e4:	4607      	mov	r7, r0
   b57e6:	f000 fe01 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b57ea:	f000 ff3a 	bl	b6662 <_ZNK13sysStatusData16get_messageCountEv>
   b57ee:	4680      	mov	r8, r0
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b57f0:	f00a fb53 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b57f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b57f6:	4a1f      	ldr	r2, [pc, #124]	; (b5874 <_Z14publishWebhookh+0x250>)
   b57f8:	f8cd 9018 	str.w	r9, [sp, #24]
   b57fc:	f44f 7180 	mov.w	r1, #256	; 0x100
   b5800:	e9cd 8009 	strd	r8, r0, [sp, #36]	; 0x24
   b5804:	e9cd 4707 	strd	r4, r7, [sp, #28]
   b5808:	ed8d 8b04 	vstr	d8, [sp, #16]
   b580c:	e9cd 5601 	strd	r5, r6, [sp, #4]
   b5810:	9500      	str	r5, [sp, #0]
   b5812:	a826      	add	r0, sp, #152	; 0x98
   b5814:	f007 fc34 	bl	bd080 <snprintf>
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5818:	a81a      	add	r0, sp, #104	; 0x68
   b581a:	f009 ff8b 	bl	bf734 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
   b581e:	f004 fc79 	bl	ba114 <_ZN17PublishQueuePosix8instanceEv>
   b5822:	4b10      	ldr	r3, [pc, #64]	; (b5864 <_Z14publishWebhookh+0x240>)
   b5824:	4a10      	ldr	r2, [pc, #64]	; (b5868 <_Z14publishWebhookh+0x244>)
   b5826:	781b      	ldrb	r3, [r3, #0]
   b5828:	7812      	ldrb	r2, [r2, #0]
   b582a:	4913      	ldr	r1, [pc, #76]	; (b5878 <_Z14publishWebhookh+0x254>)
   b582c:	4313      	orrs	r3, r2
   b582e:	6802      	ldr	r2, [r0, #0]
   b5830:	f88d 3000 	strb.w	r3, [sp]
   b5834:	f88d 5004 	strb.w	r5, [sp, #4]
   b5838:	6814      	ldr	r4, [r2, #0]
   b583a:	233c      	movs	r3, #60	; 0x3c
   b583c:	aa26      	add	r2, sp, #152	; 0x98
   b583e:	e7a4      	b.n	b578a <_Z14publishWebhookh+0x166>
   b5840:	000c3a42 	.word	0x000c3a42
   b5844:	000c3a4a 	.word	0x000c3a4a
   b5848:	000c3a4e 	.word	0x000c3a4e
   b584c:	000c3a57 	.word	0x000c3a57
   b5850:	000c3a5f 	.word	0x000c3a5f
   b5854:	000c3a6b 	.word	0x000c3a6b
   b5858:	000c3a71 	.word	0x000c3a71
   b585c:	40590000 	.word	0x40590000
   b5860:	000c3a7d 	.word	0x000c3a7d
   b5864:	2003e32c 	.word	0x2003e32c
   b5868:	2003e32d 	.word	0x2003e32d
   b586c:	000c3b40 	.word	0x000c3b40
   b5870:	2003e658 	.word	0x2003e658
   b5874:	000c3b55 	.word	0x000c3b55
   b5878:	000c3be3 	.word	0x000c3be3

000b587c <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b587c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b587e:	2300      	movs	r3, #0
   b5880:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5882:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5884:	4604      	mov	r4, r0
   b5886:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5888:	b12b      	cbz	r3, b5896 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b588a:	2202      	movs	r2, #2
   b588c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b588e:	68eb      	ldr	r3, [r5, #12]
   b5890:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5892:	68ab      	ldr	r3, [r5, #8]
   b5894:	60a3      	str	r3, [r4, #8]
    }
   b5896:	4620      	mov	r0, r4
   b5898:	bd38      	pop	{r3, r4, r5, pc}
	...

000b589c <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b589c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b58a0:	b095      	sub	sp, #84	; 0x54
   b58a2:	4605      	mov	r5, r0
        };
   b58a4:	991c      	ldr	r1, [sp, #112]	; 0x70
   b58a6:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b58a8:	4690      	mov	r8, r2
   b58aa:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b58ac:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b58ae:	f7ff ffe5 	bl	b587c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b58b2:	a904      	add	r1, sp, #16
   b58b4:	a808      	add	r0, sp, #32
   b58b6:	f7ff ffe1 	bl	b587c <_ZNSt8functionIFvyiEEC1ERKS1_>
   b58ba:	a908      	add	r1, sp, #32
   b58bc:	4630      	mov	r0, r6
   b58be:	f7ff ffdd 	bl	b587c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b58c2:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b58c6:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b58c8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b58cc:	f7fe fbe3 	bl	b4096 <_Znwj>
   b58d0:	4604      	mov	r4, r0
   b58d2:	b1a0      	cbz	r0, b58fe <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b58d4:	e896 0003 	ldmia.w	r6, {r0, r1}
   b58d8:	ab01      	add	r3, sp, #4
   b58da:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b58de:	e894 0003 	ldmia.w	r4, {r0, r1}
   b58e2:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b58e6:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b58ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b58ec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b58ee:	60a3      	str	r3, [r4, #8]
   b58f0:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b58f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b58f6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b58fa:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b58fc:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b58fe:	4b24      	ldr	r3, [pc, #144]	; (b5990 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b5900:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b5902:	4b24      	ldr	r3, [pc, #144]	; (b5994 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b5904:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b5906:	2200      	movs	r2, #0
   b5908:	2300      	movs	r3, #0
   b590a:	f04f 0900 	mov.w	r9, #0
   b590e:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b5912:	4b21      	ldr	r3, [pc, #132]	; (b5998 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b5914:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b5918:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b591a:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b591c:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b5920:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b5924:	f7fe fbb7 	bl	b4096 <_Znwj>
   b5928:	4604      	mov	r4, r0
   b592a:	b1d8      	cbz	r0, b5964 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b592c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b592e:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b5932:	b133      	cbz	r3, b5942 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5934:	2202      	movs	r2, #2
   b5936:	a910      	add	r1, sp, #64	; 0x40
   b5938:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b593a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b593c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b593e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5940:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b5942:	4b16      	ldr	r3, [pc, #88]	; (b599c <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b5944:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b5946:	4a16      	ldr	r2, [pc, #88]	; (b59a0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b5948:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b594a:	ab01      	add	r3, sp, #4
   b594c:	4640      	mov	r0, r8
   b594e:	4639      	mov	r1, r7
   b5950:	f007 fa4c 	bl	bcdec <system_subscribe_event>
        if (r) {
   b5954:	b1b0      	cbz	r0, b5984 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b5956:	4620      	mov	r0, r4
   b5958:	f7ff fdff 	bl	b555a <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b595c:	2110      	movs	r1, #16
   b595e:	4620      	mov	r0, r4
   b5960:	f7fe fb9d 	bl	b409e <_ZdlPvj>
   b5964:	a810      	add	r0, sp, #64	; 0x40
   b5966:	f7ff fdf8 	bl	b555a <_ZNSt14_Function_baseD1Ev>
   b596a:	4630      	mov	r0, r6
   b596c:	f7ff fdf5 	bl	b555a <_ZNSt14_Function_baseD1Ev>
   b5970:	a808      	add	r0, sp, #32
   b5972:	f7ff fdf2 	bl	b555a <_ZNSt14_Function_baseD1Ev>
   b5976:	a804      	add	r0, sp, #16
   b5978:	f7ff fdef 	bl	b555a <_ZNSt14_Function_baseD1Ev>
    }
   b597c:	4628      	mov	r0, r5
   b597e:	b015      	add	sp, #84	; 0x54
   b5980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b5984:	9b02      	ldr	r3, [sp, #8]
   b5986:	60ab      	str	r3, [r5, #8]
   b5988:	e9c5 8700 	strd	r8, r7, [r5]
   b598c:	e7ea      	b.n	b5964 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b598e:	bf00      	nop
   b5990:	000b54fd 	.word	0x000b54fd
   b5994:	000b59a5 	.word	0x000b59a5
   b5998:	000c0002 	.word	0x000c0002
   b599c:	000b556d 	.word	0x000b556d
   b59a0:	000b54d5 	.word	0x000b54d5

000b59a4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b59a4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b59a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b59a8:	4604      	mov	r4, r0
	switch (__op)
   b59aa:	d104      	bne.n	b59b6 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b59ac:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b59ae:	6003      	str	r3, [r0, #0]
      }
   b59b0:	2000      	movs	r0, #0
   b59b2:	b003      	add	sp, #12
   b59b4:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b59b6:	2a02      	cmp	r2, #2
   b59b8:	d00c      	beq.n	b59d4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b59ba:	2a03      	cmp	r2, #3
   b59bc:	d1f8      	bne.n	b59b0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b59be:	6804      	ldr	r4, [r0, #0]
   b59c0:	2c00      	cmp	r4, #0
   b59c2:	d0f5      	beq.n	b59b0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b59c4:	4620      	mov	r0, r4
   b59c6:	f7ff fdc8 	bl	b555a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b59ca:	2110      	movs	r1, #16
   b59cc:	4620      	mov	r0, r4
   b59ce:	f7fe fb66 	bl	b409e <_ZdlPvj>
   b59d2:	e7ed      	b.n	b59b0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b59d4:	6809      	ldr	r1, [r1, #0]
   b59d6:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b59d8:	2010      	movs	r0, #16
   b59da:	f7fe fb5c 	bl	b4096 <_Znwj>
   b59de:	4605      	mov	r5, r0
   b59e0:	b110      	cbz	r0, b59e8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b59e2:	9901      	ldr	r1, [sp, #4]
   b59e4:	f7ff ff4a 	bl	b587c <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b59e8:	6025      	str	r5, [r4, #0]
	}
   b59ea:	e7e1      	b.n	b59b0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b59ec <_GLOBAL__sub_I___appProductVersion>:
        val_(val) {
   b59ec:	4b16      	ldr	r3, [pc, #88]	; (b5a48 <_GLOBAL__sub_I___appProductVersion+0x5c>)
}
   b59ee:	b510      	push	{r4, lr}
   b59f0:	2401      	movs	r4, #1
   b59f2:	701c      	strb	r4, [r3, #0]
   b59f4:	4b15      	ldr	r3, [pc, #84]	; (b5a4c <_GLOBAL__sub_I___appProductVersion+0x60>)
   b59f6:	2208      	movs	r2, #8
   b59f8:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b59fa:	f00a fbf7 	bl	c01ec <spark_protocol_instance>
   b59fe:	2300      	movs	r3, #0
   b5a00:	461a      	mov	r2, r3
   b5a02:	4619      	mov	r1, r3
   b5a04:	f00a fc02 	bl	c020c <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b5a08:	f00a fbf0 	bl	c01ec <spark_protocol_instance>
   b5a0c:	2300      	movs	r3, #0
   b5a0e:	461a      	mov	r2, r3
   b5a10:	210d      	movs	r1, #13
   b5a12:	f00a fbf3 	bl	c01fc <spark_protocol_set_product_id>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b5a16:	4b0e      	ldr	r3, [pc, #56]	; (b5a50 <_GLOBAL__sub_I___appProductVersion+0x64>)
   b5a18:	1d1a      	adds	r2, r3, #4
   b5a1a:	601a      	str	r2, [r3, #0]
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   b5a1c:	4a0d      	ldr	r2, [pc, #52]	; (b5a54 <_GLOBAL__sub_I___appProductVersion+0x68>)
   b5a1e:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b5a20:	2200      	movs	r2, #0
   b5a22:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b5a26:	611a      	str	r2, [r3, #16]
   b5a28:	751c      	strb	r4, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b5a2a:	f00a fcbf 	bl	c03ac <_Z19__fetch_global_Wirev>
   b5a2e:	2269      	movs	r2, #105	; 0x69
   b5a30:	4601      	mov	r1, r0
   b5a32:	4809      	ldr	r0, [pc, #36]	; (b5a58 <_GLOBAL__sub_I___appProductVersion+0x6c>)
   b5a34:	f001 fee0 	bl	b77f8 <_ZN6AB1805C1ER7TwoWireh>
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b5a38:	4808      	ldr	r0, [pc, #32]	; (b5a5c <_GLOBAL__sub_I___appProductVersion+0x70>)
   b5a3a:	2306      	movs	r3, #6
   b5a3c:	f840 3b04 	str.w	r3, [r0], #4
}
   b5a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5a44:	f003 be1e 	b.w	b9684 <_ZN22LocalTimePosixTimezoneC1Ev>
   b5a48:	2003e32c 	.word	0x2003e32c
   b5a4c:	2003e32d 	.word	0x2003e32d
   b5a50:	2003e360 	.word	0x2003e360
   b5a54:	00030010 	.word	0x00030010
   b5a58:	2003e340 	.word	0x2003e340
   b5a5c:	2003e378 	.word	0x2003e378

000b5a60 <setup>:
{
   b5a60:	b5f0      	push	{r4, r5, r6, r7, lr}
        return hal_timer_millis(nullptr);
   b5a62:	2000      	movs	r0, #0
   b5a64:	b09d      	sub	sp, #116	; 0x74
   b5a66:	f006 ff55 	bl	bc914 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5a6a:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b5a6e:	4604      	mov	r4, r0
   b5a70:	2000      	movs	r0, #0
   b5a72:	f006 ff4f 	bl	bc914 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5a76:	1b00      	subs	r0, r0, r4
   b5a78:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5a7c:	42a8      	cmp	r0, r5
   b5a7e:	f171 0300 	sbcs.w	r3, r1, #0
   b5a82:	d207      	bcs.n	b5a94 <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b5a84:	f00a faf0 	bl	c0068 <_Z16_fetch_usbserialv>
   b5a88:	f00a fae3 	bl	c0052 <_ZN9USBSerial11isConnectedEv>
   b5a8c:	b910      	cbnz	r0, b5a94 <setup+0x34>
            spark_process();
   b5a8e:	f007 fa1f 	bl	bced0 <spark_process>
        while (_while() && !_condition()) {
   b5a92:	e7ed      	b.n	b5a70 <setup+0x10>
   b5a94:	f00a fae8 	bl	c0068 <_Z16_fetch_usbserialv>
   b5a98:	f00a fadb 	bl	c0052 <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b5a9c:	f001 fcfc 	bl	b7498 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b5aa0:	f001 fd2e 	bl	b7500 <_Z18initializePowerCfgv>
	current.setup();
   b5aa4:	f000 fcda 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5aa8:	6803      	ldr	r3, [r0, #0]
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b5aaa:	4e5f      	ldr	r6, [pc, #380]	; (b5c28 <setup+0x1c8>)
   b5aac:	681b      	ldr	r3, [r3, #0]
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b5aae:	4f5f      	ldr	r7, [pc, #380]	; (b5c2c <setup+0x1cc>)
   b5ab0:	4798      	blx	r3
  	sysStatus.setup();
   b5ab2:	f000 fc9b 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b5ab6:	6803      	ldr	r3, [r0, #0]
   b5ab8:	681b      	ldr	r3, [r3, #0]
   b5aba:	4798      	blx	r3
	nodeID.setup();
   b5abc:	f000 fd56 	bl	b656c <_ZN10nodeIDData8instanceEv>
   b5ac0:	6803      	ldr	r3, [r0, #0]
   b5ac2:	681b      	ldr	r3, [r3, #0]
   b5ac4:	4798      	blx	r3
    Particle_Functions::instance().setup();         // Sets up all the Particle functions and variables defined in particle_fn.h
   b5ac6:	f001 f925 	bl	b6d14 <_ZN18Particle_Functions8instanceEv>
   b5aca:	f001 f935 	bl	b6d38 <_ZN18Particle_Functions5setupEv>
   b5ace:	2308      	movs	r3, #8
    ab1805.withFOUT(D8).setup();                	// Initialize AB1805 RTC   
   b5ad0:	2101      	movs	r1, #1
   b5ad2:	4630      	mov	r0, r6
   b5ad4:	8173      	strh	r3, [r6, #10]
   b5ad6:	f002 fb8b 	bl	b81f0 <_ZN6AB18055setupEb>
    ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);	// Enable watchdog
   b5ada:	217c      	movs	r1, #124	; 0x7c
   b5adc:	4630      	mov	r0, r6
   b5ade:	f001 ff89 	bl	b79f4 <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5ae2:	4b53      	ldr	r3, [pc, #332]	; (b5c30 <setup+0x1d0>)
   b5ae4:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b5ae6:	4b53      	ldr	r3, [pc, #332]	; (b5c34 <setup+0x1d4>)
   b5ae8:	9309      	str	r3, [sp, #36]	; 0x24
	System.on(out_of_memory, outOfMemoryHandler);   // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b5aea:	ad06      	add	r5, sp, #24
	    _M_manager = &_My_handler::_M_manager;
   b5aec:	4b52      	ldr	r3, [pc, #328]	; (b5c38 <setup+0x1d8>)
   b5aee:	9308      	str	r3, [sp, #32]
   b5af0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b5af4:	2300      	movs	r3, #0
   b5af6:	a802      	add	r0, sp, #8
   b5af8:	9500      	str	r5, [sp, #0]
   b5afa:	f7ff fecf 	bl	b589c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b5afe:	4628      	mov	r0, r5
   b5b00:	f7ff fd2b 	bl	b555a <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b5b04:	f004 fb06 	bl	ba114 <_ZN17PublishQueuePosix8instanceEv>
   b5b08:	f004 fd0a 	bl	ba520 <_ZN17PublishQueuePosix5setupEv>
	LoRA_Functions::instance().setup(true);			// Start the LoRA radio (true for Gateway and false for Node)
   b5b0c:	f7fe fb4a 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b5b10:	2101      	movs	r1, #1
   b5b12:	f7fe fba5 	bl	b4260 <_ZN14LoRA_Functions5setupEb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b5b16:	f003 ff95 	bl	b9a44 <_ZN9LocalTime8instanceEv>
   b5b1a:	4948      	ldr	r1, [pc, #288]	; (b5c3c <setup+0x1dc>)
   b5b1c:	4604      	mov	r4, r0
   b5b1e:	4628      	mov	r0, r5
   b5b20:	f003 fe62 	bl	b97e8 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b5b24:	a907      	add	r1, sp, #28
   b5b26:	f104 0008 	add.w	r0, r4, #8
   b5b2a:	f009 fe8a 	bl	bf842 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5b2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5b30:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b5b32:	a90d      	add	r1, sp, #52	; 0x34
   b5b34:	f104 0020 	add.w	r0, r4, #32
   b5b38:	f009 fe83 	bl	bf842 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5b3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5b3e:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b5b40:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b5b42:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b5b44:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5b46:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b5b48:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5b4a:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b5b4c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b5b4e:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b5b50:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   b5b54:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b5b58:	4628      	mov	r0, r5
   b5b5a:	f003 fc01 	bl	b9360 <_ZN22LocalTimePosixTimezoneD1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b5b5e:	f00a f99c 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b5b62:	17c3      	asrs	r3, r0, #31
   b5b64:	e9c7 0318 	strd	r0, r3, [r7, #96]	; 0x60
	conv.withCurrentTime().convert();  				        // Convert to local time for use later
   b5b68:	4638      	mov	r0, r7
   b5b6a:	f003 ffe3 	bl	b9b34 <_ZN16LocalTimeConvert7convertEv>
	if (Time.isValid()) {
   b5b6e:	f00a f977 	bl	bfe60 <_ZN9TimeClass7isValidEv>
   b5b72:	4c33      	ldr	r4, [pc, #204]	; (b5c40 <setup+0x1e0>)
   b5b74:	2800      	cmp	r0, #0
   b5b76:	d046      	beq.n	b5c06 <setup+0x1a6>
		Log.info("LocalTime initialized, time is %s and RTC %s set", conv.format("%I:%M:%S%p").c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b5b78:	4639      	mov	r1, r7
   b5b7a:	4a32      	ldr	r2, [pc, #200]	; (b5c44 <setup+0x1e4>)
   b5b7c:	4628      	mov	r0, r5
   b5b7e:	f003 fec3 	bl	b9908 <_ZN16LocalTimeConvert6formatEPKc>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   b5b82:	2301      	movs	r3, #1
   b5b84:	461a      	mov	r2, r3
   b5b86:	2110      	movs	r1, #16
   b5b88:	4630      	mov	r0, r6
   b5b8a:	9f06      	ldr	r7, [sp, #24]
   b5b8c:	f001 ffb3 	bl	b7af6 <_ZN6AB180510isBitClearEhhb>
   b5b90:	492d      	ldr	r1, [pc, #180]	; (b5c48 <setup+0x1e8>)
   b5b92:	4b2e      	ldr	r3, [pc, #184]	; (b5c4c <setup+0x1ec>)
   b5b94:	463a      	mov	r2, r7
   b5b96:	2800      	cmp	r0, #0
   b5b98:	bf18      	it	ne
   b5b9a:	460b      	movne	r3, r1
   b5b9c:	482c      	ldr	r0, [pc, #176]	; (b5c50 <setup+0x1f0>)
   b5b9e:	492d      	ldr	r1, [pc, #180]	; (b5c54 <setup+0x1f4>)
   b5ba0:	f7fe fae7 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
   b5ba4:	4628      	mov	r0, r5
   b5ba6:	f009 fdc5 	bl	bf734 <_ZN6StringD1Ev>
	if (!digitalRead(BUTTON_PIN)) {
   b5baa:	4b2b      	ldr	r3, [pc, #172]	; (b5c58 <setup+0x1f8>)
   b5bac:	881e      	ldrh	r6, [r3, #0]
   b5bae:	4630      	mov	r0, r6
   b5bb0:	f00a fb9c 	bl	c02ec <digitalRead>
   b5bb4:	4605      	mov	r5, r0
   b5bb6:	bb68      	cbnz	r0, b5c14 <setup+0x1b4>
		Log.info("User button pressed, connected mode");
   b5bb8:	4928      	ldr	r1, [pc, #160]	; (b5c5c <setup+0x1fc>)
   b5bba:	4825      	ldr	r0, [pc, #148]	; (b5c50 <setup+0x1f0>)
   b5bbc:	f7fe fad9 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_stayConnected(1);
   b5bc0:	f000 fc14 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b5bc4:	2101      	movs	r1, #1
   b5bc6:	f000 fdb7 	bl	b6738 <_ZN13sysStatusData17set_stayConnectedEh>
		digitalWrite(BLUE_LED,HIGH);
   b5bca:	4b25      	ldr	r3, [pc, #148]	; (b5c60 <setup+0x200>)
   b5bcc:	881f      	ldrh	r7, [r3, #0]
   b5bce:	2101      	movs	r1, #1
   b5bd0:	4638      	mov	r0, r7
   b5bd2:	f00a fb72 	bl	c02ba <digitalWrite>
		delay(2000);
   b5bd6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5bda:	f007 faa9 	bl	bd130 <delay>
		digitalWrite(BLUE_LED,LOW);
   b5bde:	4629      	mov	r1, r5
   b5be0:	4638      	mov	r0, r7
   b5be2:	f00a fb6a 	bl	c02ba <digitalWrite>
		state = CONNECTING_STATE;
   b5be6:	2305      	movs	r3, #5
   b5be8:	7023      	strb	r3, [r4, #0]
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b5bea:	2200      	movs	r2, #0
   b5bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5bf0:	491c      	ldr	r1, [pc, #112]	; (b5c64 <setup+0x204>)
   b5bf2:	9200      	str	r2, [sp, #0]
   b5bf4:	4630      	mov	r0, r6
   b5bf6:	f008 f81b 	bl	bdc30 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b5bfa:	7823      	ldrb	r3, [r4, #0]
   b5bfc:	b90b      	cbnz	r3, b5c02 <setup+0x1a2>
   b5bfe:	2302      	movs	r3, #2
   b5c00:	7023      	strb	r3, [r4, #0]
}
   b5c02:	b01d      	add	sp, #116	; 0x74
   b5c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("LocalTime not initialized so will need to Connect to Particle");
   b5c06:	4918      	ldr	r1, [pc, #96]	; (b5c68 <setup+0x208>)
   b5c08:	4811      	ldr	r0, [pc, #68]	; (b5c50 <setup+0x1f0>)
   b5c0a:	f7fe fab2 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
		state = CONNECTING_STATE;
   b5c0e:	2305      	movs	r3, #5
   b5c10:	7023      	strb	r3, [r4, #0]
   b5c12:	e7ca      	b.n	b5baa <setup+0x14a>
		Log.info("No user button push detechted");
   b5c14:	4915      	ldr	r1, [pc, #84]	; (b5c6c <setup+0x20c>)
   b5c16:	480e      	ldr	r0, [pc, #56]	; (b5c50 <setup+0x1f0>)
   b5c18:	f7fe faab 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_stayConnected(0);
   b5c1c:	f000 fbe6 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b5c20:	2100      	movs	r1, #0
   b5c22:	f000 fd89 	bl	b6738 <_ZN13sysStatusData17set_stayConnectedEh>
   b5c26:	e7e0      	b.n	b5bea <setup+0x18a>
   b5c28:	2003e340 	.word	0x2003e340
   b5c2c:	2003e378 	.word	0x2003e378
   b5c30:	000b54bd 	.word	0x000b54bd
   b5c34:	000b5537 	.word	0x000b5537
   b5c38:	000b5523 	.word	0x000b5523
   b5c3c:	000c3c05 	.word	0x000c3c05
   b5c40:	2003e46a 	.word	0x2003e46a
   b5c44:	000c3c2c 	.word	0x000c3c2c
   b5c48:	000c3bfb 	.word	0x000c3bfb
   b5c4c:	000c3bfe 	.word	0x000c3bfe
   b5c50:	2003e658 	.word	0x2003e658
   b5c54:	000c3c37 	.word	0x000c3c37
   b5c58:	000c43b2 	.word	0x000c43b2
   b5c5c:	000c3ca6 	.word	0x000c3ca6
   b5c60:	000c43b0 	.word	0x000c43b0
   b5c64:	000b54c9 	.word	0x000b54c9
   b5c68:	000c3c68 	.word	0x000c3c68
   b5c6c:	000c3cca 	.word	0x000c3cca

000b5c70 <loop>:
void loop() {
   b5c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	switch (state) {
   b5c74:	4d89      	ldr	r5, [pc, #548]	; (b5e9c <loop+0x22c>)
   b5c76:	782b      	ldrb	r3, [r5, #0]
   b5c78:	3b01      	subs	r3, #1
void loop() {
   b5c7a:	b091      	sub	sp, #68	; 0x44
   b5c7c:	2b06      	cmp	r3, #6
   b5c7e:	d81d      	bhi.n	b5cbc <loop+0x4c>
   b5c80:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5c84:	000702be 	.word	0x000702be
   b5c88:	012a0045 	.word	0x012a0045
   b5c8c:	02760207 	.word	0x02760207
   b5c90:	01e2      	.short	0x01e2
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5c92:	4b83      	ldr	r3, [pc, #524]	; (b5ea0 <loop+0x230>)
   b5c94:	781b      	ldrb	r3, [r3, #0]
   b5c96:	2b02      	cmp	r3, #2
   b5c98:	d001      	beq.n	b5c9e <loop+0x2e>
   b5c9a:	f7ff fc73 	bl	b5584 <_Z22publishStateTransitionv>
			if (nextEventTime || sysStatus.get_stayConnected() == 1) {
   b5c9e:	4c81      	ldr	r4, [pc, #516]	; (b5ea4 <loop+0x234>)
   b5ca0:	7823      	ldrb	r3, [r4, #0]
   b5ca2:	b11b      	cbz	r3, b5cac <loop+0x3c>
				nextEventTime = false;
   b5ca4:	2300      	movs	r3, #0
   b5ca6:	7023      	strb	r3, [r4, #0]
				if (sysStatus.get_stayConnected() == 1) state = LoRA_STATE;				// Go to the LoRA State
   b5ca8:	2304      	movs	r3, #4
   b5caa:	e006      	b.n	b5cba <loop+0x4a>
			if (nextEventTime || sysStatus.get_stayConnected() == 1) {
   b5cac:	f000 fb9e 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b5cb0:	f000 fccd 	bl	b664e <_ZNK13sysStatusData17get_stayConnectedEv>
   b5cb4:	2801      	cmp	r0, #1
   b5cb6:	d0f5      	beq.n	b5ca4 <loop+0x34>
			else state = SLEEPING_STATE;	// Go to sleep unless we are in the connected state										
   b5cb8:	2303      	movs	r3, #3
   b5cba:	702b      	strb	r3, [r5, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b5cbc:	487a      	ldr	r0, [pc, #488]	; (b5ea8 <loop+0x238>)
   b5cbe:	f002 fa45 	bl	b814c <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   b5cc2:	f004 fa27 	bl	ba114 <_ZN17PublishQueuePosix8instanceEv>
   b5cc6:	f004 f917 	bl	b9ef8 <_ZN17PublishQueuePosix4loopEv>
	current.loop();
   b5cca:	f000 fbc7 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5cce:	f000 fbe0 	bl	b6492 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b5cd2:	f000 fb8b 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b5cd6:	f000 fb99 	bl	b640c <_ZN13sysStatusData4loopEv>
	nodeID.loop();
   b5cda:	f000 fc47 	bl	b656c <_ZN10nodeIDData8instanceEv>
   b5cde:	f000 fc62 	bl	b65a6 <_ZN10nodeIDData4loopEv>
	LoRA_Functions::instance().loop();				// Check to see if Node connections are healthy
   b5ce2:	f7fe fa5f 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b5ce6:	f7fe fa6f 	bl	b41c8 <_ZN14LoRA_Functions4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b5cea:	4b70      	ldr	r3, [pc, #448]	; (b5eac <loop+0x23c>)
   b5cec:	681b      	ldr	r3, [r3, #0]
   b5cee:	2b00      	cmp	r3, #0
   b5cf0:	f2c0 82ba 	blt.w	b6268 <loop+0x5f8>
		Log.info("Resetting due to low memory");
   b5cf4:	496e      	ldr	r1, [pc, #440]	; (b5eb0 <loop+0x240>)
   b5cf6:	486f      	ldr	r0, [pc, #444]	; (b5eb4 <loop+0x244>)
   b5cf8:	f7fe fa3b 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
		delay(2000);
   b5cfc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5d00:	f007 fa16 	bl	bd130 <delay>
}
   b5d04:	b011      	add	sp, #68	; 0x44
   b5d06:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		System.reset();
   b5d0a:	f009 bed2 	b.w	bfab2 <_ZN11SystemClass5resetEv>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5d0e:	4b64      	ldr	r3, [pc, #400]	; (b5ea0 <loop+0x230>)
   b5d10:	781b      	ldrb	r3, [r3, #0]
   b5d12:	2b03      	cmp	r3, #3
   b5d14:	d001      	beq.n	b5d1a <loop+0xaa>
   b5d16:	f7ff fc35 	bl	b5584 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b5d1a:	2100      	movs	r1, #0
   b5d1c:	4862      	ldr	r0, [pc, #392]	; (b5ea8 <loop+0x238>)
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.format(time, "%T").c_str(),System.freeMemory());
   b5d1e:	4f66      	ldr	r7, [pc, #408]	; (b5eb8 <loop+0x248>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b5d20:	4c66      	ldr	r4, [pc, #408]	; (b5ebc <loop+0x24c>)
   b5d22:	f001 fe67 	bl	b79f4 <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent();  		   		   	   // Time till next event
   b5d26:	f7ff fc63 	bl	b55f0 <_Z21secondsUntilNextEventv>
   b5d2a:	4680      	mov	r8, r0
			time_t time = Time.now() + wakeInSeconds;
   b5d2c:	f00a f8b5 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b5d30:	eb00 0208 	add.w	r2, r0, r8
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.format(time, "%T").c_str(),System.freeMemory());
   b5d34:	17d3      	asrs	r3, r2, #31
   b5d36:	4962      	ldr	r1, [pc, #392]	; (b5ec0 <loop+0x250>)
   b5d38:	9700      	str	r7, [sp, #0]
   b5d3a:	a808      	add	r0, sp, #32
   b5d3c:	f00a f84e 	bl	bfddc <_ZN9TimeClass6formatExPKc>
   b5d40:	9b08      	ldr	r3, [sp, #32]
   b5d42:	9302      	str	r3, [sp, #8]
   b5d44:	f009 ff18 	bl	bfb78 <_ZN11SystemClass10freeMemoryEv>
   b5d48:	9b02      	ldr	r3, [sp, #8]
   b5d4a:	495e      	ldr	r1, [pc, #376]	; (b5ec4 <loop+0x254>)
   b5d4c:	9000      	str	r0, [sp, #0]
   b5d4e:	4642      	mov	r2, r8
   b5d50:	4858      	ldr	r0, [pc, #352]	; (b5eb4 <loop+0x244>)
   b5d52:	f7fe fa0e 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
   b5d56:	a808      	add	r0, sp, #32
   b5d58:	f009 fcec 	bl	bf734 <_ZN6StringD1Ev>
			delay(2000);									// Make sure message gets out
   b5d5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5d60:	f007 f9e6 	bl	bd130 <delay>
   b5d64:	7d23      	ldrb	r3, [r4, #20]
   b5d66:	2b00      	cmp	r3, #0
   b5d68:	d050      	beq.n	b5e0c <loop+0x19c>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b5d6a:	2302      	movs	r3, #2
   b5d6c:	7223      	strb	r3, [r4, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b5d6e:	4b56      	ldr	r3, [pc, #344]	; (b5ec8 <loop+0x258>)
   b5d70:	f8b3 9000 	ldrh.w	r9, [r3]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5d74:	6823      	ldr	r3, [r4, #0]
   b5d76:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b5d78:	b1f3      	cbz	r3, b5db8 <loop+0x148>
            if (start->type == type) {
   b5d7a:	889a      	ldrh	r2, [r3, #4]
   b5d7c:	2a01      	cmp	r2, #1
   b5d7e:	d006      	beq.n	b5d8e <loop+0x11e>
            start = start->next;
   b5d80:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5d82:	e7f9      	b.n	b5d78 <loop+0x108>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b5d84:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b5d86:	b1bb      	cbz	r3, b5db8 <loop+0x148>
            if (start->type == type) {
   b5d88:	889a      	ldrh	r2, [r3, #4]
   b5d8a:	2a01      	cmp	r2, #1
   b5d8c:	d1fa      	bne.n	b5d84 <loop+0x114>
                if (gpioWakeup->pin == pin) {
   b5d8e:	899a      	ldrh	r2, [r3, #12]
   b5d90:	454a      	cmp	r2, r9
   b5d92:	d1f7      	bne.n	b5d84 <loop+0x114>
                    gpioWakeup->mode = mode;
   b5d94:	2200      	movs	r2, #0
   b5d96:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b5d98:	7d23      	ldrb	r3, [r4, #20]
   b5d9a:	2b00      	cmp	r3, #0
   b5d9c:	d036      	beq.n	b5e0c <loop+0x19c>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5d9e:	6823      	ldr	r3, [r4, #0]
				.duration(wakeInSeconds * 1000L);
   b5da0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5da4:	68db      	ldr	r3, [r3, #12]
   b5da6:	fb00 f808 	mul.w	r8, r0, r8
        if (!start) {
   b5daa:	b1db      	cbz	r3, b5de4 <loop+0x174>
            if (start->type == type) {
   b5dac:	889a      	ldrh	r2, [r3, #4]
   b5dae:	2a04      	cmp	r2, #4
   b5db0:	f000 8255 	beq.w	b625e <loop+0x5ee>
            start = start->next;
   b5db4:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5db6:	e7f8      	b.n	b5daa <loop+0x13a>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b5db8:	4944      	ldr	r1, [pc, #272]	; (b5ecc <loop+0x25c>)
   b5dba:	2010      	movs	r0, #16
   b5dbc:	f00a fb7e 	bl	c04bc <_ZnwjRKSt9nothrow_t>
   b5dc0:	4606      	mov	r6, r0
   b5dc2:	2800      	cmp	r0, #0
   b5dc4:	f000 824e 	beq.w	b6264 <loop+0x5f4>
   b5dc8:	2210      	movs	r2, #16
   b5dca:	2100      	movs	r1, #0
   b5dcc:	f00b f928 	bl	c1020 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b5dd0:	4b3f      	ldr	r3, [pc, #252]	; (b5ed0 <loop+0x260>)
   b5dd2:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b5dd4:	2301      	movs	r3, #1
   b5dd6:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5dd8:	6923      	ldr	r3, [r4, #16]
   b5dda:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b5ddc:	f8a6 900c 	strh.w	r9, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5de0:	6126      	str	r6, [r4, #16]
   b5de2:	e7d9      	b.n	b5d98 <loop+0x128>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b5de4:	4939      	ldr	r1, [pc, #228]	; (b5ecc <loop+0x25c>)
   b5de6:	2010      	movs	r0, #16
   b5de8:	f00a fb68 	bl	c04bc <_ZnwjRKSt9nothrow_t>
   b5dec:	4606      	mov	r6, r0
   b5dee:	2800      	cmp	r0, #0
   b5df0:	f000 8238 	beq.w	b6264 <loop+0x5f4>
   b5df4:	2210      	movs	r2, #16
   b5df6:	2100      	movs	r1, #0
   b5df8:	f00b f912 	bl	c1020 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b5dfc:	4b34      	ldr	r3, [pc, #208]	; (b5ed0 <loop+0x260>)
   b5dfe:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b5e00:	2304      	movs	r3, #4
   b5e02:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5e04:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5e06:	6126      	str	r6, [r4, #16]
            wakeupSource->ms = ms;
   b5e08:	e9c6 3802 	strd	r3, r8, [r6, #8]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b5e0c:	492b      	ldr	r1, [pc, #172]	; (b5ebc <loop+0x24c>)
   b5e0e:	a805      	add	r0, sp, #20
   b5e10:	f009 fe52 	bl	bfab8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b5e14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5e18:	4823      	ldr	r0, [pc, #140]	; (b5ea8 <loop+0x238>)
   b5e1a:	f001 fdeb 	bl	b79f4 <_ZN6AB18056setWDTEi>
        return hal_timer_millis(nullptr);
   b5e1e:	2000      	movs	r0, #0
   b5e20:	f006 fd78 	bl	bc914 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5e24:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b5e28:	4604      	mov	r4, r0
   b5e2a:	2000      	movs	r0, #0
   b5e2c:	f006 fd72 	bl	bc914 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5e30:	1b00      	subs	r0, r0, r4
   b5e32:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5e36:	42b0      	cmp	r0, r6
   b5e38:	f171 0300 	sbcs.w	r3, r1, #0
   b5e3c:	d207      	bcs.n	b5e4e <loop+0x1de>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b5e3e:	f00a f913 	bl	c0068 <_Z16_fetch_usbserialv>
   b5e42:	f00a f906 	bl	c0052 <_ZN9USBSerial11isConnectedEv>
   b5e46:	b910      	cbnz	r0, b5e4e <loop+0x1de>
            spark_process();
   b5e48:	f007 f842 	bl	bced0 <spark_process>
        while (_while() && !_condition()) {
   b5e4c:	e7ed      	b.n	b5e2a <loop+0x1ba>
   b5e4e:	f00a f90b 	bl	c0068 <_Z16_fetch_usbserialv>
   b5e52:	f00a f8fe 	bl	c0052 <_ZN9USBSerial11isConnectedEv>
			state = IDLE_STATE;
   b5e56:	2302      	movs	r3, #2
   b5e58:	702b      	strb	r3, [r5, #0]
			nextEventTime = true;
   b5e5a:	4b12      	ldr	r3, [pc, #72]	; (b5ea4 <loop+0x234>)
   b5e5c:	2201      	movs	r2, #1
   b5e5e:	701a      	strb	r2, [r3, #0]
			Log.info("Awoke at %s with %li free memory", Time.format(Time.now(), "%T").c_str(), System.freeMemory());
   b5e60:	f00a f81b 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b5e64:	4916      	ldr	r1, [pc, #88]	; (b5ec0 <loop+0x250>)
   b5e66:	9700      	str	r7, [sp, #0]
   b5e68:	17c3      	asrs	r3, r0, #31
   b5e6a:	4602      	mov	r2, r0
   b5e6c:	a808      	add	r0, sp, #32
   b5e6e:	f009 ffb5 	bl	bfddc <_ZN9TimeClass6formatExPKc>
   b5e72:	9a08      	ldr	r2, [sp, #32]
   b5e74:	9202      	str	r2, [sp, #8]
   b5e76:	f009 fe7f 	bl	bfb78 <_ZN11SystemClass10freeMemoryEv>
   b5e7a:	9a02      	ldr	r2, [sp, #8]
   b5e7c:	4915      	ldr	r1, [pc, #84]	; (b5ed4 <loop+0x264>)
   b5e7e:	4603      	mov	r3, r0
   b5e80:	480c      	ldr	r0, [pc, #48]	; (b5eb4 <loop+0x244>)
   b5e82:	f7fe f976 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
   b5e86:	a808      	add	r0, sp, #32
   b5e88:	f009 fc54 	bl	bf734 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b5e8c:	9805      	ldr	r0, [sp, #20]
   b5e8e:	2800      	cmp	r0, #0
   b5e90:	f43f af14 	beq.w	b5cbc <loop+0x4c>
            free(wakeupSource_);
   b5e94:	f007 f8d4 	bl	bd040 <free>
		} break;
   b5e98:	e710      	b.n	b5cbc <loop+0x4c>
   b5e9a:	bf00      	nop
   b5e9c:	2003e46a 	.word	0x2003e46a
   b5ea0:	2003e469 	.word	0x2003e469
   b5ea4:	2003e468 	.word	0x2003e468
   b5ea8:	2003e340 	.word	0x2003e340
   b5eac:	2003d5fc 	.word	0x2003d5fc
   b5eb0:	000c3e15 	.word	0x000c3e15
   b5eb4:	2003e658 	.word	0x2003e658
   b5eb8:	000c3cf4 	.word	0x000c3cf4
   b5ebc:	2003e360 	.word	0x2003e360
   b5ec0:	2003e6ac 	.word	0x2003e6ac
   b5ec4:	000c3cf7 	.word	0x000c3cf7
   b5ec8:	000c43b2 	.word	0x000c43b2
   b5ecc:	000c5164 	.word	0x000c5164
   b5ed0:	00030010 	.word	0x00030010
   b5ed4:	000c3d37 	.word	0x000c3d37
			if (state != oldState) {
   b5ed8:	4bb8      	ldr	r3, [pc, #736]	; (b61bc <loop+0x54c>)
   b5eda:	4fb9      	ldr	r7, [pc, #740]	; (b61c0 <loop+0x550>)
   b5edc:	781b      	ldrb	r3, [r3, #0]
   b5ede:	2b04      	cmp	r3, #4
   b5ee0:	d062      	beq.n	b5fa8 <loop+0x338>
				if (oldState != REPORTING_STATE) startLoRAWindow = millis();    // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b5ee2:	2b07      	cmp	r3, #7
   b5ee4:	d002      	beq.n	b5eec <loop+0x27c>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5ee6:	f006 fd05 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
   b5eea:	6038      	str	r0, [r7, #0]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5eec:	f7ff fb4a 	bl	b5584 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();						// Clear the buffer before we start the LoRA state
   b5ef0:	f7fe f958 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b5ef4:	f7fe f96a 	bl	b41cc <_ZN14LoRA_Functions11clearBufferEv>
   b5ef8:	f009 ffcf 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b5efc:	4cb1      	ldr	r4, [pc, #708]	; (b61c4 <loop+0x554>)
   b5efe:	17c3      	asrs	r3, r0, #31
   b5f00:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
				conv.withCurrentTime().convert();								// Get the time and convert to Local
   b5f04:	4620      	mov	r0, r4
   b5f06:	f003 fe15 	bl	b9b34 <_ZN16LocalTimeConvert7convertEv>
    /**
     * @brief Get the value of this object as a LocalTimeHMS (hour minute second)
     * 
     * @return LocalTimeHMS 
     */
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   b5f0a:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b5f0e:	a805      	add	r0, sp, #20
   b5f10:	f003 fca2 	bl	b9858 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour <= sysStatus.get_closeTime()) current.set_openHours(true);
   b5f14:	f99d 6018 	ldrsb.w	r6, [sp, #24]
   b5f18:	f000 fa68 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b5f1c:	f000 fba6 	bl	b666c <_ZNK13sysStatusData12get_openTimeEv>
   b5f20:	4286      	cmp	r6, r0
   b5f22:	f2c0 8089 	blt.w	b6038 <loop+0x3c8>
   b5f26:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b5f2a:	a808      	add	r0, sp, #32
   b5f2c:	f003 fc94 	bl	b9858 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5f30:	f99d 6024 	ldrsb.w	r6, [sp, #36]	; 0x24
   b5f34:	f000 fa5a 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b5f38:	f000 fb9d 	bl	b6676 <_ZNK13sysStatusData13get_closeTimeEv>
   b5f3c:	4286      	cmp	r6, r0
   b5f3e:	a808      	add	r0, sp, #32
   b5f40:	bfcc      	ite	gt
   b5f42:	2600      	movgt	r6, #0
   b5f44:	2601      	movle	r6, #1
   b5f46:	f003 f9fb 	bl	b9340 <_ZN12LocalTimeHMSD1Ev>
   b5f4a:	a805      	add	r0, sp, #20
   b5f4c:	f003 f9f8 	bl	b9340 <_ZN12LocalTimeHMSD1Ev>
   b5f50:	2e00      	cmp	r6, #0
   b5f52:	d073      	beq.n	b603c <loop+0x3cc>
   b5f54:	f000 fa82 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5f58:	2101      	movs	r1, #1
				else current.set_openHours(false);
   b5f5a:	f000 fe32 	bl	b6bc2 <_ZN17currentStatusData13set_openHoursEb>
				Log.info("Gateway is listening for LoRA messages and the park is %s (%d / %d / %d)", (current.get_openHours()) ? "open":"closed", conv.getLocalTimeHMS().hour, sysStatus.get_openTime(), sysStatus.get_closeTime());
   b5f5e:	f000 fa7d 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5f62:	f000 fd6f 	bl	b6a44 <_ZNK17currentStatusData13get_openHoursEv>
   b5f66:	4b98      	ldr	r3, [pc, #608]	; (b61c8 <loop+0x558>)
   b5f68:	4a98      	ldr	r2, [pc, #608]	; (b61cc <loop+0x55c>)
   b5f6a:	4999      	ldr	r1, [pc, #612]	; (b61d0 <loop+0x560>)
   b5f6c:	2800      	cmp	r0, #0
   b5f6e:	bf08      	it	eq
   b5f70:	461a      	moveq	r2, r3
   b5f72:	a808      	add	r0, sp, #32
   b5f74:	9203      	str	r2, [sp, #12]
   b5f76:	f003 fc6f 	bl	b9858 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5f7a:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b5f7e:	9302      	str	r3, [sp, #8]
   b5f80:	f000 fa34 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b5f84:	f000 fb72 	bl	b666c <_ZNK13sysStatusData12get_openTimeEv>
   b5f88:	4604      	mov	r4, r0
   b5f8a:	f000 fa2f 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b5f8e:	f000 fb72 	bl	b6676 <_ZNK13sysStatusData13get_closeTimeEv>
   b5f92:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b5f96:	e9cd 4000 	strd	r4, r0, [sp]
   b5f9a:	498e      	ldr	r1, [pc, #568]	; (b61d4 <loop+0x564>)
   b5f9c:	488e      	ldr	r0, [pc, #568]	; (b61d8 <loop+0x568>)
   b5f9e:	f7fe f8e8 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
   b5fa2:	a808      	add	r0, sp, #32
   b5fa4:	f003 f9cc 	bl	b9340 <_ZN12LocalTimeHMSD1Ev>
			if (LoRA_Functions::instance().listenForLoRAMessageGateway()) {
   b5fa8:	f7fe f8fc 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b5fac:	f7ff f9da 	bl	b5364 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>
   b5fb0:	b1d8      	cbz	r0, b5fea <loop+0x37a>
				Log.info("In main loop - alert %d and open hours %d",current.get_alertCodeNode(), current.get_openHours());
   b5fb2:	f000 fa53 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5fb6:	f000 fb8b 	bl	b66d0 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5fba:	9002      	str	r0, [sp, #8]
   b5fbc:	f000 fa4e 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5fc0:	f000 fd40 	bl	b6a44 <_ZNK17currentStatusData13get_openHoursEv>
   b5fc4:	9a02      	ldr	r2, [sp, #8]
   b5fc6:	4985      	ldr	r1, [pc, #532]	; (b61dc <loop+0x56c>)
   b5fc8:	4603      	mov	r3, r0
   b5fca:	4883      	ldr	r0, [pc, #524]	; (b61d8 <loop+0x568>)
   b5fcc:	f7fe f8d1 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
				if (current.get_alertCodeNode() != 1 && current.get_openHours()) {	// We don't report Join alerts or after hours
   b5fd0:	f000 fa44 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5fd4:	f000 fb7c 	bl	b66d0 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5fd8:	2801      	cmp	r0, #1
   b5fda:	d006      	beq.n	b5fea <loop+0x37a>
   b5fdc:	f000 fa3e 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b5fe0:	f000 fd30 	bl	b6a44 <_ZNK17currentStatusData13get_openHoursEv>
   b5fe4:	b108      	cbz	r0, b5fea <loop+0x37a>
					state = REPORTING_STATE; 									// Received and acknowledged data from a node - need to report the alert
   b5fe6:	2307      	movs	r3, #7
   b5fe8:	702b      	strb	r3, [r5, #0]
   b5fea:	f006 fc83 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - startLoRAWindow) > 150000L) { 													// Keeps us in listening mode for the specified windpw - then back to idle unless in test mode - keeps listening
   b5fee:	683b      	ldr	r3, [r7, #0]
   b5ff0:	1ac0      	subs	r0, r0, r3
   b5ff2:	4b7b      	ldr	r3, [pc, #492]	; (b61e0 <loop+0x570>)
   b5ff4:	4298      	cmp	r0, r3
   b5ff6:	f67f ae61 	bls.w	b5cbc <loop+0x4c>
				LoRA_Functions::instance().nodeConnectionsHealthy();										// Will see if any nodes checked in - if not - will reset
   b5ffa:	f7fe f8d3 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b5ffe:	f7fe fac3 	bl	b4588 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv>
				LoRA_Functions::instance().sleepLoRaRadio();												// Done with the LoRA phase - put the radio to sleep
   b6002:	f7fe f8cf 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b6006:	f7fe f8f1 	bl	b41ec <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				LoRA_Functions::instance().printNodeData(false);
   b600a:	f7fe f8cb 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b600e:	2100      	movs	r1, #0
   b6010:	f7fe fc02 	bl	b4818 <_ZN14LoRA_Functions13printNodeDataEb>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection()) && current.get_openHours()) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over and if the park is open
   b6014:	f009 ff52 	bl	bfebc <_ZN9TimeClass4hourEv>
   b6018:	4604      	mov	r4, r0
   b601a:	f000 f9e7 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b601e:	f000 fc74 	bl	b690a <_ZNK13sysStatusData18get_lastConnectionEv>
   b6022:	f009 fe11 	bl	bfc48 <_ZN9TimeClass4hourEx>
   b6026:	4284      	cmp	r4, r0
   b6028:	d004      	beq.n	b6034 <loop+0x3c4>
   b602a:	f000 fa17 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b602e:	f000 fd09 	bl	b6a44 <_ZNK17currentStatusData13get_openHoursEv>
   b6032:	b938      	cbnz	r0, b6044 <loop+0x3d4>
				else state = IDLE_STATE;
   b6034:	2302      	movs	r3, #2
   b6036:	e640      	b.n	b5cba <loop+0x4a>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour <= sysStatus.get_closeTime()) current.set_openHours(true);
   b6038:	2600      	movs	r6, #0
   b603a:	e786      	b.n	b5f4a <loop+0x2da>
				else current.set_openHours(false);
   b603c:	f000 fa0e 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b6040:	4631      	mov	r1, r6
   b6042:	e78a      	b.n	b5f5a <loop+0x2ea>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection()) && current.get_openHours()) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over and if the park is open
   b6044:	2305      	movs	r3, #5
   b6046:	e638      	b.n	b5cba <loop+0x4a>
			if (state != oldState) publishStateTransition();
   b6048:	4b5c      	ldr	r3, [pc, #368]	; (b61bc <loop+0x54c>)
   b604a:	781b      	ldrb	r3, [r3, #0]
   b604c:	2b07      	cmp	r3, #7
   b604e:	d001      	beq.n	b6054 <loop+0x3e4>
   b6050:	f7ff fa98 	bl	b5584 <_Z22publishStateTransitionv>
			uint8_t nodeNumber = current.get_nodeNumber();						// Put this here to reduce line length
   b6054:	f000 fa02 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b6058:	f000 fb17 	bl	b668a <_ZNK17currentStatusData14get_nodeNumberEv>
			Log.info("Publish for node %d", nodeNumber);
   b605c:	4961      	ldr	r1, [pc, #388]	; (b61e4 <loop+0x574>)
   b605e:	4602      	mov	r2, r0
			uint8_t nodeNumber = current.get_nodeNumber();						// Put this here to reduce line length
   b6060:	4604      	mov	r4, r0
			Log.info("Publish for node %d", nodeNumber);
   b6062:	485d      	ldr	r0, [pc, #372]	; (b61d8 <loop+0x568>)
   b6064:	f7fe f885 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
			publishWebhook(nodeNumber);
   b6068:	4620      	mov	r0, r4
   b606a:	f7ff fadb 	bl	b5624 <_Z14publishWebhookh>
			current.set_alertCodeNode(0);										// Zero alert code after send
   b606e:	f000 f9f5 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b6072:	2100      	movs	r1, #0
   b6074:	f000 fbae 	bl	b67d4 <_ZN17currentStatusData17set_alertCodeNodeEh>
			sysStatus.set_messageCount(sysStatus.get_messageCount() + 1);		// Increment the message counter 
   b6078:	f000 f9b8 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b607c:	4604      	mov	r4, r0
   b607e:	f000 f9b5 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6082:	f000 faee 	bl	b6662 <_ZNK13sysStatusData16get_messageCountEv>
   b6086:	3001      	adds	r0, #1
   b6088:	b2c1      	uxtb	r1, r0
   b608a:	4620      	mov	r0, r4
   b608c:	f000 fb60 	bl	b6750 <_ZN13sysStatusData16set_messageCountEh>
			state = LoRA_STATE;
   b6090:	e60a      	b.n	b5ca8 <loop+0x38>
			if (state != oldState) {
   b6092:	4b4a      	ldr	r3, [pc, #296]	; (b61bc <loop+0x54c>)
   b6094:	4c54      	ldr	r4, [pc, #336]	; (b61e8 <loop+0x578>)
   b6096:	781b      	ldrb	r3, [r3, #0]
   b6098:	2b05      	cmp	r3, #5
   b609a:	d027      	beq.n	b60ec <loop+0x47c>
				publishStateTransition();  
   b609c:	f7ff fa72 	bl	b5584 <_Z22publishStateTransitionv>
				if (Time.day(sysStatus.get_lastConnection()) != conv.getLocalTimeYMD().getDay()) {
   b60a0:	f000 f9a4 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b60a4:	f000 fc31 	bl	b690a <_ZNK13sysStatusData18get_lastConnectionEv>
   b60a8:	f009 fdd6 	bl	bfc58 <_ZN9TimeClass3dayEx>
        fromLocalTimeValue(value);
   b60ac:	4948      	ldr	r1, [pc, #288]	; (b61d0 <loop+0x560>)
   b60ae:	4606      	mov	r6, r0
   b60b0:	a808      	add	r0, sp, #32
   b60b2:	f003 fbee 	bl	b9892 <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>
    /**
     * @brief Get the value of this object as a LocalTimeYMD (year month day0)
     * 
     * @return LocalTimeYMD 
     */
    LocalTimeYMD getLocalTimeYMD() const { return LocalTimeYMD(localTimeValue); };
   b60b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   b60ba:	ebb6 0fd3 	cmp.w	r6, r3, lsr #3
   b60be:	d007      	beq.n	b60d0 <loop+0x460>
					current.resetEverything();
   b60c0:	f000 f9cc 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b60c4:	f000 fc64 	bl	b6990 <_ZN17currentStatusData15resetEverythingEv>
					Log.info("New Day - Resetting everything");
   b60c8:	4948      	ldr	r1, [pc, #288]	; (b61ec <loop+0x57c>)
   b60ca:	4843      	ldr	r0, [pc, #268]	; (b61d8 <loop+0x568>)
   b60cc:	f7fe f851 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
				publishWebhook(sysStatus.get_nodeNumber());								// Before we connect - let's send the gateway's webhook
   b60d0:	f000 f98c 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b60d4:	f000 fab6 	bl	b6644 <_ZNK13sysStatusData14get_nodeNumberEv>
   b60d8:	f7ff faa4 	bl	b5624 <_Z14publishWebhookh>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b60dc:	f006 ff08 	bl	bcef0 <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();							// Time to connect to Particle
   b60e0:	b908      	cbnz	r0, b60e6 <loop+0x476>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b60e2:	f006 fefd 	bl	bcee0 <spark_cloud_flag_connect>
   b60e6:	f006 fc05 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b60ea:	6020      	str	r0, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b60ec:	f006 ff00 	bl	bcef0 <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b60f0:	b338      	cbz	r0, b6142 <loop+0x4d2>
				sysStatus.set_lastConnection(Time.now());
   b60f2:	f000 f97b 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b60f6:	4606      	mov	r6, r0
   b60f8:	f009 fecf 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b60fc:	4602      	mov	r2, r0
   b60fe:	17c3      	asrs	r3, r0, #31
   b6100:	4630      	mov	r0, r6
   b6102:	f000 fc30 	bl	b6966 <_ZN13sysStatusData18set_lastConnectionEx>
				sysStatus.set_lastConnectionDuration((millis() - connectingTimeout) / 1000);	// Record connection time in seconds
   b6106:	f000 f971 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b610a:	4606      	mov	r6, r0
   b610c:	f006 fbf2 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
   b6110:	6821      	ldr	r1, [r4, #0]
   b6112:	1a41      	subs	r1, r0, r1
   b6114:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6118:	fbb1 f1f0 	udiv	r1, r1, r0
   b611c:	4630      	mov	r0, r6
   b611e:	b289      	uxth	r1, r1
   b6120:	f000 fbb8 	bl	b6894 <_ZN13sysStatusData26set_lastConnectionDurationEt>
   b6124:	f006 fee4 	bl	bcef0 <spark_cloud_flag_connected>
				if (Particle.connected()) {
   b6128:	b1c8      	cbz	r0, b615e <loop+0x4ee>
   b612a:	f006 fee1 	bl	bcef0 <spark_cloud_flag_connected>
        if (!connected()) {
   b612e:	b110      	cbz	r0, b6136 <loop+0x4c6>
        return spark_sync_time(NULL);
   b6130:	2000      	movs	r0, #0
   b6132:	f006 fef5 	bl	bcf20 <spark_sync_time>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b6136:	f7ff fa03 	bl	b5540 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        while (_while() && !_condition()) {
   b613a:	b950      	cbnz	r0, b6152 <loop+0x4e2>
            spark_process();
   b613c:	f006 fec8 	bl	bced0 <spark_process>
        while (_while() && !_condition()) {
   b6140:	e7f9      	b.n	b6136 <loop+0x4c6>
   b6142:	f006 fbd7 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b6146:	6823      	ldr	r3, [r4, #0]
   b6148:	1ac0      	subs	r0, r0, r3
   b614a:	4b29      	ldr	r3, [pc, #164]	; (b61f0 <loop+0x580>)
   b614c:	4298      	cmp	r0, r3
   b614e:	d8d0      	bhi.n	b60f2 <loop+0x482>
   b6150:	e5b4      	b.n	b5cbc <loop+0x4c>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b6152:	f7ff f9f5 	bl	b5540 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
					CellularSignal sig = Cellular.RSSI();
   b6156:	4927      	ldr	r1, [pc, #156]	; (b61f4 <loop+0x584>)
   b6158:	a808      	add	r0, sp, #32
   b615a:	f007 f863 	bl	bd224 <_ZN5spark13CellularClass4RSSIEv>
				if (sysStatus.get_stayConnected() == 1) state = LoRA_STATE;				// Go to the LoRA State
   b615e:	f000 f945 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6162:	f000 fa74 	bl	b664e <_ZNK13sysStatusData17get_stayConnectedEv>
   b6166:	2801      	cmp	r0, #1
   b6168:	f43f ad9e 	beq.w	b5ca8 <loop+0x38>
				else state = DISCONNECTING_STATE;	 									// Typically, we will disconnect and sleep to save power - publishes occur during the 90 seconds before disconnect
   b616c:	2306      	movs	r3, #6
   b616e:	e5a4      	b.n	b5cba <loop+0x4a>
			if (state != oldState) {
   b6170:	4b12      	ldr	r3, [pc, #72]	; (b61bc <loop+0x54c>)
   b6172:	4c21      	ldr	r4, [pc, #132]	; (b61f8 <loop+0x588>)
   b6174:	781b      	ldrb	r3, [r3, #0]
   b6176:	2b06      	cmp	r3, #6
   b6178:	d004      	beq.n	b6184 <loop+0x514>
				publishStateTransition(); 
   b617a:	f7ff fa03 	bl	b5584 <_Z22publishStateTransitionv>
   b617e:	f006 fbb9 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b6182:	6020      	str	r0, [r4, #0]
   b6184:	f006 fbb6 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - stayConnectedWindow > 90000UL) && PublishQueuePosix::instance().getCanSleep()) {	// Stay on-line for 90 seconds and until we are done clearing the queue
   b6188:	6823      	ldr	r3, [r4, #0]
   b618a:	1ac0      	subs	r0, r0, r3
   b618c:	4b1b      	ldr	r3, [pc, #108]	; (b61fc <loop+0x58c>)
   b618e:	4298      	cmp	r0, r3
   b6190:	f67f ad94 	bls.w	b5cbc <loop+0x4c>
   b6194:	f003 ffbe 	bl	ba114 <_ZN17PublishQueuePosix8instanceEv>
   b6198:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
   b619c:	2b00      	cmp	r3, #0
   b619e:	f43f ad8d 	beq.w	b5cbc <loop+0x4c>
				if (sysStatus.get_stayConnected() == 0) Particle_Functions::instance().disconnectFromParticle();
   b61a2:	f000 f923 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b61a6:	f000 fa52 	bl	b664e <_ZNK13sysStatusData17get_stayConnectedEv>
   b61aa:	2800      	cmp	r0, #0
   b61ac:	f47f af42 	bne.w	b6034 <loop+0x3c4>
   b61b0:	f000 fdb0 	bl	b6d14 <_ZN18Particle_Functions8instanceEv>
   b61b4:	f001 f8d8 	bl	b7368 <_ZN18Particle_Functions22disconnectFromParticleEv>
   b61b8:	e73c      	b.n	b6034 <loop+0x3c4>
   b61ba:	bf00      	nop
   b61bc:	2003e469 	.word	0x2003e469
   b61c0:	2003e334 	.word	0x2003e334
   b61c4:	2003e378 	.word	0x2003e378
   b61c8:	000c3ced 	.word	0x000c3ced
   b61cc:	000c3ce8 	.word	0x000c3ce8
   b61d0:	2003e3e0 	.word	0x2003e3e0
   b61d4:	000c3d58 	.word	0x000c3d58
   b61d8:	2003e658 	.word	0x2003e658
   b61dc:	000c3da1 	.word	0x000c3da1
   b61e0:	000249f0 	.word	0x000249f0
   b61e4:	000c3dcb 	.word	0x000c3dcb
   b61e8:	2003e338 	.word	0x2003e338
   b61ec:	000c3ddf 	.word	0x000c3ddf
   b61f0:	000927c0 	.word	0x000927c0
   b61f4:	2003e614 	.word	0x2003e614
   b61f8:	2003e33c 	.word	0x2003e33c
   b61fc:	00015f90 	.word	0x00015f90
			static system_tick_t resetTimeout = millis();
   b6200:	4c1b      	ldr	r4, [pc, #108]	; (b6270 <loop+0x600>)
   b6202:	4e1c      	ldr	r6, [pc, #112]	; (b6274 <loop+0x604>)
   b6204:	7823      	ldrb	r3, [r4, #0]
   b6206:	f3bf 8f5b 	dmb	ish
   b620a:	f013 0f01 	tst.w	r3, #1
   b620e:	d109      	bne.n	b6224 <loop+0x5b4>
   b6210:	4620      	mov	r0, r4
   b6212:	f7fd ff53 	bl	b40bc <__cxa_guard_acquire>
   b6216:	b128      	cbz	r0, b6224 <loop+0x5b4>
   b6218:	f006 fb6c 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
   b621c:	6030      	str	r0, [r6, #0]
   b621e:	4620      	mov	r0, r4
   b6220:	f7fd ff51 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) publishStateTransition();
   b6224:	4b14      	ldr	r3, [pc, #80]	; (b6278 <loop+0x608>)
   b6226:	782a      	ldrb	r2, [r5, #0]
   b6228:	781b      	ldrb	r3, [r3, #0]
   b622a:	429a      	cmp	r2, r3
   b622c:	d001      	beq.n	b6232 <loop+0x5c2>
   b622e:	f7ff f9a9 	bl	b5584 <_Z22publishStateTransitionv>
   b6232:	f006 fb5f 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b6236:	6833      	ldr	r3, [r6, #0]
   b6238:	1ac0      	subs	r0, r0, r3
   b623a:	f247 5330 	movw	r3, #30000	; 0x7530
   b623e:	4298      	cmp	r0, r3
   b6240:	f67f ad3c 	bls.w	b5cbc <loop+0x4c>
				Log.info("Deep power down device");
   b6244:	490d      	ldr	r1, [pc, #52]	; (b627c <loop+0x60c>)
   b6246:	480e      	ldr	r0, [pc, #56]	; (b6280 <loop+0x610>)
   b6248:	f7fd ff93 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
				delay(2000);
   b624c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b6250:	f006 ff6e 	bl	bd130 <delay>
				ab1805.deepPowerDown(); 
   b6254:	211e      	movs	r1, #30
   b6256:	480b      	ldr	r0, [pc, #44]	; (b6284 <loop+0x614>)
   b6258:	f001 fd26 	bl	b7ca8 <_ZN6AB180513deepPowerDownEi>
   b625c:	e52e      	b.n	b5cbc <loop+0x4c>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b625e:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b6262:	e5d3      	b.n	b5e0c <loop+0x19c>
                valid_ = false;
   b6264:	7526      	strb	r6, [r4, #20]
                return *this;
   b6266:	e5d1      	b.n	b5e0c <loop+0x19c>
}
   b6268:	b011      	add	sp, #68	; 0x44
   b626a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b626e:	bf00      	nop
   b6270:	2003e328 	.word	0x2003e328
   b6274:	2003e330 	.word	0x2003e330
   b6278:	2003e469 	.word	0x2003e469
   b627c:	000c3dfe 	.word	0x000c3dfe
   b6280:	2003e658 	.word	0x2003e658
   b6284:	2003e340 	.word	0x2003e340

000b6288 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b6288:	b510      	push	{r4, lr}
   b628a:	4b03      	ldr	r3, [pc, #12]	; (b6298 <_ZN8MB85RC64D1Ev+0x10>)
   b628c:	6003      	str	r3, [r0, #0]
   b628e:	4604      	mov	r4, r0
   b6290:	f003 fcfe 	bl	b9c90 <_ZN6MB85RCD1Ev>
   b6294:	4620      	mov	r0, r4
   b6296:	bd10      	pop	{r4, pc}
   b6298:	000c3ebc 	.word	0x000c3ebc

000b629c <_ZN8MB85RC64D0Ev>:
   b629c:	b510      	push	{r4, lr}
   b629e:	4604      	mov	r4, r0
   b62a0:	f7ff fff2 	bl	b6288 <_ZN8MB85RC64D1Ev>
   b62a4:	4620      	mov	r0, r4
   b62a6:	2110      	movs	r1, #16
   b62a8:	f7fd fef9 	bl	b409e <_ZdlPvj>
   b62ac:	4620      	mov	r0, r4
   b62ae:	bd10      	pop	{r4, pc}

000b62b0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b62b0:	b510      	push	{r4, lr}
            if (!handle_) {
   b62b2:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b62b4:	4604      	mov	r4, r0
            if (!handle_) {
   b62b6:	b90b      	cbnz	r3, b62bc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b62b8:	f006 facc 	bl	bc854 <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b62bc:	6820      	ldr	r0, [r4, #0]
        }
   b62be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b62c2:	f006 bad7 	b.w	bc874 <os_mutex_recursive_lock>

000b62c6 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b62c6:	b538      	push	{r3, r4, r5, lr}
   b62c8:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b62ca:	3004      	adds	r0, #4
   b62cc:	f7ff fff0 	bl	b62b0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b62d0:	6a20      	ldr	r0, [r4, #32]
   b62d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b62d4:	6803      	ldr	r3, [r0, #0]
   b62d6:	68dd      	ldr	r5, [r3, #12]
   b62d8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b62dc:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b62de:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b62e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b62e4:	f006 bace 	b.w	bc884 <os_mutex_recursive_unlock>

000b62e8 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b62e8:	b538      	push	{r3, r4, r5, lr}
   b62ea:	4604      	mov	r4, r0
   b62ec:	3004      	adds	r0, #4
   b62ee:	f7ff ffdf 	bl	b62b0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b62f2:	6a20      	ldr	r0, [r4, #32]
   b62f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b62f6:	6803      	ldr	r3, [r0, #0]
   b62f8:	689d      	ldr	r5, [r3, #8]
   b62fa:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b62fe:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b6300:	68a2      	ldr	r2, [r4, #8]
   b6302:	6823      	ldr	r3, [r4, #0]
   b6304:	88d1      	ldrh	r1, [r2, #6]
   b6306:	695b      	ldr	r3, [r3, #20]
   b6308:	4620      	mov	r0, r4
   b630a:	4798      	blx	r3
   b630c:	b918      	cbnz	r0, b6316 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b630e:	6823      	ldr	r3, [r4, #0]
   b6310:	4620      	mov	r0, r4
   b6312:	699b      	ldr	r3, [r3, #24]
   b6314:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b6316:	6860      	ldr	r0, [r4, #4]
   b6318:	f006 fab4 	bl	bc884 <os_mutex_recursive_unlock>
        }
   b631c:	2001      	movs	r0, #1
   b631e:	bd38      	pop	{r3, r4, r5, pc}

000b6320 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b6320:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b6322:	4b04      	ldr	r3, [pc, #16]	; (b6334 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b6324:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b6326:	4604      	mov	r4, r0
            if (handle_) {
   b6328:	6840      	ldr	r0, [r0, #4]
   b632a:	b108      	cbz	r0, b6330 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b632c:	f006 fa9a 	bl	bc864 <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b6330:	4620      	mov	r0, r4
   b6332:	bd10      	pop	{r4, pc}
   b6334:	000c4e58 	.word	0x000c4e58

000b6338 <_ZN13sysStatusDataD1Ev>:

sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {

};

sysStatusData::~sysStatusData() {
   b6338:	b510      	push	{r4, lr}
   b633a:	4b03      	ldr	r3, [pc, #12]	; (b6348 <_ZN13sysStatusDataD1Ev+0x10>)
   b633c:	6003      	str	r3, [r0, #0]
   b633e:	4604      	mov	r4, r0
   b6340:	f7ff ffee 	bl	b6320 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b6344:	4620      	mov	r0, r4
   b6346:	bd10      	pop	{r4, pc}
   b6348:	000c3f04 	.word	0x000c3f04

000b634c <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b634c:	b510      	push	{r4, lr}
   b634e:	4604      	mov	r4, r0
}
   b6350:	f7ff fff2 	bl	b6338 <_ZN13sysStatusDataD1Ev>
   b6354:	4620      	mov	r0, r4
   b6356:	2168      	movs	r1, #104	; 0x68
   b6358:	f7fd fea1 	bl	b409e <_ZdlPvj>
   b635c:	4620      	mov	r0, r4
   b635e:	bd10      	pop	{r4, pc}

000b6360 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b6360:	b510      	push	{r4, lr}
   b6362:	4b03      	ldr	r3, [pc, #12]	; (b6370 <_ZN17currentStatusDataD1Ev+0x10>)
   b6364:	6003      	str	r3, [r0, #0]
   b6366:	4604      	mov	r4, r0
   b6368:	f7ff ffda 	bl	b6320 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b636c:	4620      	mov	r0, r4
   b636e:	bd10      	pop	{r4, pc}
   b6370:	000c3f30 	.word	0x000c3f30

000b6374 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b6374:	b510      	push	{r4, lr}
   b6376:	4604      	mov	r4, r0
}
   b6378:	f7ff fff2 	bl	b6360 <_ZN17currentStatusDataD1Ev>
   b637c:	4620      	mov	r0, r4
   b637e:	2170      	movs	r1, #112	; 0x70
   b6380:	f7fd fe8d 	bl	b409e <_ZdlPvj>
   b6384:	4620      	mov	r0, r4
   b6386:	bd10      	pop	{r4, pc}

000b6388 <_ZN10nodeIDDataD1Ev>:

nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {

};

nodeIDData::~nodeIDData() {
   b6388:	b510      	push	{r4, lr}
   b638a:	4b03      	ldr	r3, [pc, #12]	; (b6398 <_ZN10nodeIDDataD1Ev+0x10>)
   b638c:	6003      	str	r3, [r0, #0]
   b638e:	4604      	mov	r4, r0
   b6390:	f7ff ffc6 	bl	b6320 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b6394:	4620      	mov	r0, r4
   b6396:	bd10      	pop	{r4, pc}
   b6398:	000c3ed8 	.word	0x000c3ed8

000b639c <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b639c:	b510      	push	{r4, lr}
   b639e:	4604      	mov	r4, r0
}
   b63a0:	f7ff fff2 	bl	b6388 <_ZN10nodeIDDataD1Ev>
   b63a4:	4620      	mov	r0, r4
   b63a6:	f44f 6187 	mov.w	r1, #1080	; 0x438
   b63aa:	f7fd fe78 	bl	b409e <_ZdlPvj>
   b63ae:	4620      	mov	r0, r4
   b63b0:	bd10      	pop	{r4, pc}
	...

000b63b4 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b63b4:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b63b8:	6081      	str	r1, [r0, #8]
   b63ba:	4909      	ldr	r1, [pc, #36]	; (b63e0 <_ZN13sysStatusDataC1Ev+0x2c>)
   b63bc:	f04f 0c40 	mov.w	ip, #64	; 0x40
   b63c0:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b63c4:	2101      	movs	r1, #1
   b63c6:	8281      	strh	r1, [r0, #20]
   b63c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b63cc:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b63ce:	4905      	ldr	r1, [pc, #20]	; (b63e4 <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b63d0:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b63d2:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b63d6:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b63d8:	6182      	str	r2, [r0, #24]
   b63da:	4a03      	ldr	r2, [pc, #12]	; (b63e8 <_ZN13sysStatusDataC1Ev+0x34>)
   b63dc:	6002      	str	r2, [r0, #0]
};
   b63de:	4770      	bx	lr
   b63e0:	20a99e76 	.word	0x20a99e76
   b63e4:	2003e478 	.word	0x2003e478
   b63e8:	000c3f04 	.word	0x000c3f04

000b63ec <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b63ec:	b510      	push	{r4, lr}
    if (!_instance) {
   b63ee:	4c06      	ldr	r4, [pc, #24]	; (b6408 <_ZN13sysStatusData8instanceEv+0x1c>)
   b63f0:	6823      	ldr	r3, [r4, #0]
   b63f2:	b93b      	cbnz	r3, b6404 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b63f4:	2068      	movs	r0, #104	; 0x68
   b63f6:	f7fd fe4e 	bl	b4096 <_Znwj>
   b63fa:	4603      	mov	r3, r0
   b63fc:	b108      	cbz	r0, b6402 <_ZN13sysStatusData8instanceEv+0x16>
   b63fe:	f7ff ffd9 	bl	b63b4 <_ZN13sysStatusDataC1Ev>
   b6402:	6023      	str	r3, [r4, #0]
}
   b6404:	6820      	ldr	r0, [r4, #0]
   b6406:	bd10      	pop	{r4, pc}
   b6408:	2003e470 	.word	0x2003e470

000b640c <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b640c:	b510      	push	{r4, lr}
    sysStatus.flush(true);
   b640e:	f7ff ffed 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6412:	6803      	ldr	r3, [r0, #0]
}
   b6414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(true);
   b6418:	68db      	ldr	r3, [r3, #12]
   b641a:	2101      	movs	r1, #1
   b641c:	4718      	bx	r3
	...

000b6420 <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b6420:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b6422:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b6426:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6428:	6182      	str	r2, [r0, #24]
   b642a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b642e:	6081      	str	r1, [r0, #8]
   b6430:	61c2      	str	r2, [r0, #28]
   b6432:	4907      	ldr	r1, [pc, #28]	; (b6450 <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6434:	4a07      	ldr	r2, [pc, #28]	; (b6454 <_ZN17currentStatusDataC1Ev+0x34>)
   b6436:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6438:	f04f 0c48 	mov.w	ip, #72	; 0x48
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b643c:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b643e:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6442:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6444:	2101      	movs	r1, #1
   b6446:	4a04      	ldr	r2, [pc, #16]	; (b6458 <_ZN17currentStatusDataC1Ev+0x38>)
   b6448:	8281      	strh	r1, [r0, #20]
   b644a:	6002      	str	r2, [r0, #0]
};
   b644c:	4770      	bx	lr
   b644e:	bf00      	nop
   b6450:	20a99e74 	.word	0x20a99e74
   b6454:	2003e478 	.word	0x2003e478
   b6458:	000c3f30 	.word	0x000c3f30

000b645c <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b645c:	b510      	push	{r4, lr}
    if (!_instance) {
   b645e:	4c06      	ldr	r4, [pc, #24]	; (b6478 <_ZN17currentStatusData8instanceEv+0x1c>)
   b6460:	6823      	ldr	r3, [r4, #0]
   b6462:	b93b      	cbnz	r3, b6474 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b6464:	2070      	movs	r0, #112	; 0x70
   b6466:	f7fd fe16 	bl	b4096 <_Znwj>
   b646a:	4603      	mov	r3, r0
   b646c:	b108      	cbz	r0, b6472 <_ZN17currentStatusData8instanceEv+0x16>
   b646e:	f7ff ffd7 	bl	b6420 <_ZN17currentStatusDataC1Ev>
   b6472:	6023      	str	r3, [r4, #0]
}
   b6474:	6820      	ldr	r0, [r4, #0]
   b6476:	bd10      	pop	{r4, pc}
   b6478:	2003e474 	.word	0x2003e474

000b647c <_ZN17currentStatusData5setupEv>:
void currentStatusData::setup() {
   b647c:	b510      	push	{r4, lr}
    fram.begin();
   b647e:	6a00      	ldr	r0, [r0, #32]
   b6480:	f003 fc1c 	bl	b9cbc <_ZN6MB85RC5beginEv>
    current.load();
   b6484:	f7ff ffea 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b6488:	6803      	ldr	r3, [r0, #0]
}
   b648a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.load();
   b648e:	685b      	ldr	r3, [r3, #4]
   b6490:	4718      	bx	r3

000b6492 <_ZN17currentStatusData4loopEv>:
void currentStatusData::loop() {
   b6492:	b510      	push	{r4, lr}
    current.flush(false);
   b6494:	f7ff ffe2 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b6498:	6803      	ldr	r3, [r0, #0]
}
   b649a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.flush(false);
   b649e:	68db      	ldr	r3, [r3, #12]
   b64a0:	2100      	movs	r1, #0
   b64a2:	4718      	bx	r3
   b64a4:	0000      	movs	r0, r0
	...

000b64a8 <_ZNK17currentStatusData17get_stateOfChargeEv>:
double currentStatusData::get_stateOfCharge() const {
   b64a8:	b510      	push	{r4, lr}
   b64aa:	4604      	mov	r4, r0
   b64ac:	ed2d 8b02 	vpush	{d8}
   b64b0:	3004      	adds	r0, #4
   b64b2:	f7ff fefd 	bl	b62b0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b64b6:	68e3      	ldr	r3, [r4, #12]
   b64b8:	3b08      	subs	r3, #8
   b64ba:	2b17      	cmp	r3, #23
   b64bc:	d90c      	bls.n	b64d8 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b64be:	68a3      	ldr	r3, [r4, #8]
   b64c0:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b64c4:	6860      	ldr	r0, [r4, #4]
   b64c6:	f006 f9dd 	bl	bc884 <os_mutex_recursive_unlock>
}
   b64ca:	eeb0 0a48 	vmov.f32	s0, s16
   b64ce:	eef0 0a68 	vmov.f32	s1, s17
   b64d2:	ecbd 8b02 	vpop	{d8}
   b64d6:	bd10      	pop	{r4, pc}
            T result = 0;
   b64d8:	ed9f 8b01 	vldr	d8, [pc, #4]	; b64e0 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b64dc:	e7f2      	b.n	b64c4 <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b64de:	bf00      	nop
	...

000b64e8 <_ZN17currentStatusData17set_stateOfChargeEd>:
void currentStatusData::set_stateOfCharge(double value) {
   b64e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b64ea:	4604      	mov	r4, r0
   b64ec:	3004      	adds	r0, #4
   b64ee:	ec57 6b10 	vmov	r6, r7, d0
   b64f2:	f7ff fedd 	bl	b62b0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b64f6:	68e3      	ldr	r3, [r4, #12]
   b64f8:	3b08      	subs	r3, #8
   b64fa:	2b17      	cmp	r3, #23
   b64fc:	d912      	bls.n	b6524 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b64fe:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b6500:	4630      	mov	r0, r6
   b6502:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b6506:	4639      	mov	r1, r7
   b6508:	f00a fc12 	bl	c0d30 <__aeabi_dcmpeq>
   b650c:	b950      	cbnz	r0, b6524 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b650e:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b6512:	4620      	mov	r0, r4
   b6514:	68a5      	ldr	r5, [r4, #8]
   b6516:	f006 f8ad 	bl	bc674 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b651a:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b651c:	6823      	ldr	r3, [r4, #0]
   b651e:	4620      	mov	r0, r4
   b6520:	691b      	ldr	r3, [r3, #16]
   b6522:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b6524:	6860      	ldr	r0, [r4, #4]
}
   b6526:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b652a:	f006 b9ab 	b.w	bc884 <os_mutex_recursive_unlock>
	...

000b6530 <_ZN10nodeIDDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b6530:	2200      	movs	r2, #0
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b6532:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b6536:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6538:	6182      	str	r2, [r0, #24]
   b653a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b653e:	6081      	str	r1, [r0, #8]
   b6540:	61c2      	str	r2, [r0, #28]
   b6542:	4907      	ldr	r1, [pc, #28]	; (b6560 <_ZN10nodeIDDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6544:	4a07      	ldr	r2, [pc, #28]	; (b6564 <_ZN10nodeIDDataC1Ev+0x34>)
   b6546:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6548:	f44f 6c82 	mov.w	ip, #1040	; 0x410
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b654c:	2296      	movs	r2, #150	; 0x96
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b654e:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6552:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6554:	2102      	movs	r1, #2
   b6556:	4a04      	ldr	r2, [pc, #16]	; (b6568 <_ZN10nodeIDDataC1Ev+0x38>)
   b6558:	8281      	strh	r1, [r0, #20]
   b655a:	6002      	str	r2, [r0, #0]
};
   b655c:	4770      	bx	lr
   b655e:	bf00      	nop
   b6560:	20a99e60 	.word	0x20a99e60
   b6564:	2003e478 	.word	0x2003e478
   b6568:	000c3ed8 	.word	0x000c3ed8

000b656c <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b656c:	b510      	push	{r4, lr}
    if (!_instance) {
   b656e:	4c07      	ldr	r4, [pc, #28]	; (b658c <_ZN10nodeIDData8instanceEv+0x20>)
   b6570:	6823      	ldr	r3, [r4, #0]
   b6572:	b943      	cbnz	r3, b6586 <_ZN10nodeIDData8instanceEv+0x1a>
        _instance = new nodeIDData();
   b6574:	f44f 6087 	mov.w	r0, #1080	; 0x438
   b6578:	f7fd fd8d 	bl	b4096 <_Znwj>
   b657c:	4603      	mov	r3, r0
   b657e:	b108      	cbz	r0, b6584 <_ZN10nodeIDData8instanceEv+0x18>
   b6580:	f7ff ffd6 	bl	b6530 <_ZN10nodeIDDataC1Ev>
   b6584:	6023      	str	r3, [r4, #0]
}
   b6586:	6820      	ldr	r0, [r4, #0]
   b6588:	bd10      	pop	{r4, pc}
   b658a:	bf00      	nop
   b658c:	2003e46c 	.word	0x2003e46c

000b6590 <_ZN10nodeIDData5setupEv>:

void nodeIDData::setup() {
   b6590:	b510      	push	{r4, lr}
    fram.begin();
   b6592:	6a00      	ldr	r0, [r0, #32]
   b6594:	f003 fb92 	bl	b9cbc <_ZN6MB85RC5beginEv>
    nodeID.load();
   b6598:	f7ff ffe8 	bl	b656c <_ZN10nodeIDData8instanceEv>
   b659c:	6803      	ldr	r3, [r0, #0]
}
   b659e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.load();
   b65a2:	685b      	ldr	r3, [r3, #4]
   b65a4:	4718      	bx	r3

000b65a6 <_ZN10nodeIDData4loopEv>:

void nodeIDData::loop() {
   b65a6:	b510      	push	{r4, lr}
    nodeID.flush(false);
   b65a8:	f7ff ffe0 	bl	b656c <_ZN10nodeIDData8instanceEv>
   b65ac:	6803      	ldr	r3, [r0, #0]
}
   b65ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.flush(false);
   b65b2:	68db      	ldr	r3, [r3, #12]
   b65b4:	2100      	movs	r1, #0
   b65b6:	4718      	bx	r3

000b65b8 <_ZNK10nodeIDData14get_nodeIDJsonEv>:
    nodeID.set_nodeIDJson(blank);

    Log.info("Resettig NodeID config to: %s", blank.c_str());
}

String nodeIDData::get_nodeIDJson() const {
   b65b8:	b538      	push	{r3, r4, r5, lr}
   b65ba:	4604      	mov	r4, r0
   b65bc:	460d      	mov	r5, r1
	String result;
   b65be:	4906      	ldr	r1, [pc, #24]	; (b65d8 <_ZNK10nodeIDData14get_nodeIDJsonEv+0x20>)
   b65c0:	f009 f903 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), result);
   b65c4:	4623      	mov	r3, r4
   b65c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b65ca:	2110      	movs	r1, #16
   b65cc:	4628      	mov	r0, r5
   b65ce:	f005 fff8 	bl	bc5c2 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b65d2:	4620      	mov	r0, r4
   b65d4:	bd38      	pop	{r3, r4, r5, pc}
   b65d6:	bf00      	nop
   b65d8:	000c4fe0 	.word	0x000c4fe0

000b65dc <_ZN10nodeIDData14set_nodeIDJsonEPKc>:

bool nodeIDData::set_nodeIDJson(const char *str) {
   b65dc:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), str);
   b65de:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b65e2:	2110      	movs	r1, #16
   b65e4:	f006 b85e 	b.w	bc6a4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

000b65e8 <_ZN10nodeIDData12resetNodeIDsEv>:
void nodeIDData::resetNodeIDs() {
   b65e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    String blank = "{\"nodes\":[]}";
   b65ea:	490a      	ldr	r1, [pc, #40]	; (b6614 <_ZN10nodeIDData12resetNodeIDsEv+0x2c>)
   b65ec:	4668      	mov	r0, sp
   b65ee:	f009 f8ec 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
    nodeID.set_nodeIDJson(blank);
   b65f2:	f7ff ffbb 	bl	b656c <_ZN10nodeIDData8instanceEv>
   b65f6:	9900      	ldr	r1, [sp, #0]
   b65f8:	f7ff fff0 	bl	b65dc <_ZN10nodeIDData14set_nodeIDJsonEPKc>
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b65fc:	9a00      	ldr	r2, [sp, #0]
   b65fe:	4906      	ldr	r1, [pc, #24]	; (b6618 <_ZN10nodeIDData12resetNodeIDsEv+0x30>)
   b6600:	4806      	ldr	r0, [pc, #24]	; (b661c <_ZN10nodeIDData12resetNodeIDsEv+0x34>)
   b6602:	f7fd fdb6 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
    String blank = "{\"nodes\":[]}";
   b6606:	4668      	mov	r0, sp
   b6608:	f009 f894 	bl	bf734 <_ZN6StringD1Ev>
}
   b660c:	b005      	add	sp, #20
   b660e:	f85d fb04 	ldr.w	pc, [sp], #4
   b6612:	bf00      	nop
   b6614:	000c3e31 	.word	0x000c3e31
   b6618:	000c3e3e 	.word	0x000c3e3e
   b661c:	2003e658 	.word	0x2003e658

000b6620 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b6620:	b538      	push	{r3, r4, r5, lr}
   b6622:	4604      	mov	r4, r0
   b6624:	3004      	adds	r0, #4
   b6626:	460d      	mov	r5, r1
   b6628:	f7ff fe42 	bl	b62b0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b662c:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b662e:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6630:	3b01      	subs	r3, #1
   b6632:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6634:	bf26      	itte	cs
   b6636:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6638:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b663a:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b663c:	f006 f922 	bl	bc884 <os_mutex_recursive_unlock>
        }
   b6640:	4628      	mov	r0, r5
   b6642:	bd38      	pop	{r3, r4, r5, pc}

000b6644 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b6644:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b6646:	2110      	movs	r1, #16
   b6648:	f7ff ffea 	bl	b6620 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b664c:	bd08      	pop	{r3, pc}

000b664e <_ZNK13sysStatusData17get_stayConnectedEv>:
uint8_t sysStatusData::get_stayConnected() const {
   b664e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, stayConnected));
   b6650:	2114      	movs	r1, #20
   b6652:	f7ff ffe5 	bl	b6620 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6656:	bd08      	pop	{r3, pc}

000b6658 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b6658:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b665a:	2115      	movs	r1, #21
   b665c:	f7ff ffe0 	bl	b6620 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6660:	bd08      	pop	{r3, pc}

000b6662 <_ZNK13sysStatusData16get_messageCountEv>:
uint8_t sysStatusData::get_messageCount() const {
   b6662:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, messageCount));
   b6664:	2116      	movs	r1, #22
   b6666:	f7ff ffdb 	bl	b6620 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b666a:	bd08      	pop	{r3, pc}

000b666c <_ZNK13sysStatusData12get_openTimeEv>:
uint8_t sysStatusData::get_openTime() const {
   b666c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, openTime));
   b666e:	2138      	movs	r1, #56	; 0x38
   b6670:	f7ff ffd6 	bl	b6620 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6674:	bd08      	pop	{r3, pc}

000b6676 <_ZNK13sysStatusData13get_closeTimeEv>:
uint8_t sysStatusData::get_closeTime() const {
   b6676:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, closeTime));
   b6678:	2139      	movs	r1, #57	; 0x39
   b667a:	f7ff ffd1 	bl	b6620 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b667e:	bd08      	pop	{r3, pc}

000b6680 <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const {
   b6680:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, sensorType));
   b6682:	213b      	movs	r1, #59	; 0x3b
   b6684:	f7ff ffcc 	bl	b6620 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6688:	bd08      	pop	{r3, pc}

000b668a <_ZNK17currentStatusData14get_nodeNumberEv>:
uint8_t currentStatusData::get_nodeNumber() const {
   b668a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, nodeNumber));
   b668c:	2110      	movs	r1, #16
   b668e:	f7ff ffc7 	bl	b6620 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6692:	bd08      	pop	{r3, pc}

000b6694 <_ZNK17currentStatusData18get_tempNodeNumberEv>:
uint8_t currentStatusData::get_tempNodeNumber() const {
   b6694:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, tempNodeNumber));
   b6696:	2111      	movs	r1, #17
   b6698:	f7ff ffc2 	bl	b6620 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b669c:	bd08      	pop	{r3, pc}

000b669e <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b669e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b66a0:	2112      	movs	r1, #18
   b66a2:	f7ff ffbd 	bl	b6620 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b66a6:	bd08      	pop	{r3, pc}

000b66a8 <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b66a8:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b66aa:	2120      	movs	r1, #32
   b66ac:	f7ff ffb8 	bl	b6620 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b66b0:	bd08      	pop	{r3, pc}

000b66b2 <_ZNK17currentStatusData14get_resetCountEv>:
uint8_t currentStatusData::get_resetCount() const {
   b66b2:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, resetCount));
   b66b4:	2121      	movs	r1, #33	; 0x21
   b66b6:	f7ff ffb3 	bl	b6620 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b66ba:	bd08      	pop	{r3, pc}

000b66bc <_ZNK17currentStatusData16get_messageCountEv>:
uint8_t currentStatusData::get_messageCount() const {
   b66bc:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageCount));
   b66be:	2124      	movs	r1, #36	; 0x24
   b66c0:	f7ff ffae 	bl	b6620 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b66c4:	bd08      	pop	{r3, pc}

000b66c6 <_ZNK17currentStatusData16get_successCountEv>:
uint8_t currentStatusData::get_successCount() const {
   b66c6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, successCount));
   b66c8:	2125      	movs	r1, #37	; 0x25
   b66ca:	f7ff ffa9 	bl	b6620 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b66ce:	bd08      	pop	{r3, pc}

000b66d0 <_ZNK17currentStatusData17get_alertCodeNodeEv>:
uint8_t currentStatusData::get_alertCodeNode() const {
   b66d0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
   b66d2:	2134      	movs	r1, #52	; 0x34
   b66d4:	f7ff ffa4 	bl	b6620 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b66d8:	bd08      	pop	{r3, pc}

000b66da <_ZNK17currentStatusData14get_sensorTypeEv>:
uint8_t currentStatusData::get_sensorType() const {
   b66da:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, sensorType));
   b66dc:	2141      	movs	r1, #65	; 0x41
   b66de:	f7ff ff9f 	bl	b6620 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b66e2:	bd08      	pop	{r3, pc}

000b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b66e4:	b570      	push	{r4, r5, r6, lr}
   b66e6:	4604      	mov	r4, r0
   b66e8:	3004      	adds	r0, #4
   b66ea:	460d      	mov	r5, r1
   b66ec:	4616      	mov	r6, r2
   b66ee:	f7ff fddf 	bl	b62b0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b66f2:	68e3      	ldr	r3, [r4, #12]
   b66f4:	3b01      	subs	r3, #1
   b66f6:	42ab      	cmp	r3, r5
   b66f8:	d30d      	bcc.n	b6716 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b66fa:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b66fc:	5d5a      	ldrb	r2, [r3, r5]
   b66fe:	42b2      	cmp	r2, r6
   b6700:	d009      	beq.n	b6716 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b6702:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b6704:	4620      	mov	r0, r4
   b6706:	68a5      	ldr	r5, [r4, #8]
   b6708:	f005 ffb4 	bl	bc674 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b670c:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b670e:	6823      	ldr	r3, [r4, #0]
   b6710:	4620      	mov	r0, r4
   b6712:	691b      	ldr	r3, [r3, #16]
   b6714:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b6716:	6860      	ldr	r0, [r4, #4]
        }
   b6718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b671c:	f006 b8b2 	b.w	bc884 <os_mutex_recursive_unlock>

000b6720 <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b6720:	b508      	push	{r3, lr}
   b6722:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b6724:	2110      	movs	r1, #16
   b6726:	f7ff ffdd 	bl	b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b672a:	bd08      	pop	{r3, pc}

000b672c <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b672c:	b508      	push	{r3, lr}
   b672e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b6730:	2111      	movs	r1, #17
   b6732:	f7ff ffd7 	bl	b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6736:	bd08      	pop	{r3, pc}

000b6738 <_ZN13sysStatusData17set_stayConnectedEh>:
void sysStatusData::set_stayConnected(uint8_t value) {
   b6738:	b508      	push	{r3, lr}
   b673a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, stayConnected), value);
   b673c:	2114      	movs	r1, #20
   b673e:	f7ff ffd1 	bl	b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6742:	bd08      	pop	{r3, pc}

000b6744 <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b6744:	b508      	push	{r3, lr}
   b6746:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b6748:	2115      	movs	r1, #21
   b674a:	f7ff ffcb 	bl	b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b674e:	bd08      	pop	{r3, pc}

000b6750 <_ZN13sysStatusData16set_messageCountEh>:
void sysStatusData::set_messageCount(uint8_t value) {
   b6750:	b508      	push	{r3, lr}
   b6752:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, messageCount), value);
   b6754:	2116      	movs	r1, #22
   b6756:	f7ff ffc5 	bl	b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b675a:	bd08      	pop	{r3, pc}

000b675c <_ZN13sysStatusData20set_alertCodeGatewayEh>:
void sysStatusData::set_alertCodeGateway(uint8_t value) {
   b675c:	b508      	push	{r3, lr}
   b675e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, alertCodeGateway), value);
   b6760:	212e      	movs	r1, #46	; 0x2e
   b6762:	f7ff ffbf 	bl	b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6766:	bd08      	pop	{r3, pc}

000b6768 <_ZN13sysStatusData12set_openTimeEh>:
void sysStatusData::set_openTime(uint8_t value) {
   b6768:	b508      	push	{r3, lr}
   b676a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, openTime), value);
   b676c:	2138      	movs	r1, #56	; 0x38
   b676e:	f7ff ffb9 	bl	b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6772:	bd08      	pop	{r3, pc}

000b6774 <_ZN13sysStatusData13set_closeTimeEh>:
void sysStatusData::set_closeTime(uint8_t value) {
   b6774:	b508      	push	{r3, lr}
   b6776:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, closeTime), value);
   b6778:	2139      	movs	r1, #57	; 0x39
   b677a:	f7ff ffb3 	bl	b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b677e:	bd08      	pop	{r3, pc}

000b6780 <_ZN17currentStatusData14set_nodeNumberEh>:
void currentStatusData::set_nodeNumber(uint8_t value) {
   b6780:	b508      	push	{r3, lr}
   b6782:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, nodeNumber), value);
   b6784:	2110      	movs	r1, #16
   b6786:	f7ff ffad 	bl	b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b678a:	bd08      	pop	{r3, pc}

000b678c <_ZN17currentStatusData18set_tempNodeNumberEh>:
void currentStatusData::set_tempNodeNumber(uint8_t value) {
   b678c:	b508      	push	{r3, lr}
   b678e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, tempNodeNumber), value);
   b6790:	2111      	movs	r1, #17
   b6792:	f7ff ffa7 	bl	b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6796:	bd08      	pop	{r3, pc}

000b6798 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b6798:	b508      	push	{r3, lr}
   b679a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b679c:	2112      	movs	r1, #18
   b679e:	f7ff ffa1 	bl	b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b67a2:	bd08      	pop	{r3, pc}

000b67a4 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b67a4:	b508      	push	{r3, lr}
   b67a6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b67a8:	2120      	movs	r1, #32
   b67aa:	f7ff ff9b 	bl	b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b67ae:	bd08      	pop	{r3, pc}

000b67b0 <_ZN17currentStatusData14set_resetCountEh>:
void currentStatusData::set_resetCount(uint8_t value) {
   b67b0:	b508      	push	{r3, lr}
   b67b2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, resetCount), value);
   b67b4:	2121      	movs	r1, #33	; 0x21
   b67b6:	f7ff ff95 	bl	b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b67ba:	bd08      	pop	{r3, pc}

000b67bc <_ZN17currentStatusData16set_messageCountEh>:
void currentStatusData::set_messageCount(uint8_t value) {
   b67bc:	b508      	push	{r3, lr}
   b67be:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
   b67c0:	2124      	movs	r1, #36	; 0x24
   b67c2:	f7ff ff8f 	bl	b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b67c6:	bd08      	pop	{r3, pc}

000b67c8 <_ZN17currentStatusData16set_successCountEh>:
void currentStatusData::set_successCount(uint8_t value) {
   b67c8:	b508      	push	{r3, lr}
   b67ca:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, successCount), value);
   b67cc:	2125      	movs	r1, #37	; 0x25
   b67ce:	f7ff ff89 	bl	b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b67d2:	bd08      	pop	{r3, pc}

000b67d4 <_ZN17currentStatusData17set_alertCodeNodeEh>:
void currentStatusData::set_alertCodeNode(uint8_t value) {
   b67d4:	b508      	push	{r3, lr}
   b67d6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b67d8:	2134      	movs	r1, #52	; 0x34
   b67da:	f7ff ff83 	bl	b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b67de:	bd08      	pop	{r3, pc}

000b67e0 <_ZN17currentStatusData14set_sensorTypeEh>:
void currentStatusData::set_sensorType(uint8_t value) {
   b67e0:	b508      	push	{r3, lr}
   b67e2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, sensorType), value);
   b67e4:	2141      	movs	r1, #65	; 0x41
   b67e6:	f7ff ff7d 	bl	b66e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b67ea:	bd08      	pop	{r3, pc}

000b67ec <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b67ec:	b538      	push	{r3, r4, r5, lr}
   b67ee:	4604      	mov	r4, r0
   b67f0:	3004      	adds	r0, #4
   b67f2:	460d      	mov	r5, r1
   b67f4:	f7ff fd5c 	bl	b62b0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b67f8:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b67fa:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b67fc:	3b02      	subs	r3, #2
   b67fe:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6800:	bf26      	itte	cs
   b6802:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6804:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b6806:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6808:	f006 f83c 	bl	bc884 <os_mutex_recursive_unlock>
        }
   b680c:	4628      	mov	r0, r5
   b680e:	bd38      	pop	{r3, r4, r5, pc}

000b6810 <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b6810:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b6812:	2112      	movs	r1, #18
   b6814:	f7ff ffea 	bl	b67ec <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6818:	bd08      	pop	{r3, pc}

000b681a <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b681a:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b681c:	212a      	movs	r1, #42	; 0x2a
   b681e:	f7ff ffe5 	bl	b67ec <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6822:	bd08      	pop	{r3, pc}

000b6824 <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>:
uint16_t sysStatusData::get_updatedFrequencyMinutes() const {
   b6824:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,updatedFrequencyMinutes));
   b6826:	212c      	movs	r1, #44	; 0x2c
   b6828:	f7ff ffe0 	bl	b67ec <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b682c:	bd08      	pop	{r3, pc}

000b682e <_ZNK17currentStatusData8get_RSSIEv>:
uint16_t currentStatusData::get_RSSI() const {
   b682e:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, RSSI));
   b6830:	2122      	movs	r1, #34	; 0x22
   b6832:	f7ff ffdb 	bl	b67ec <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6836:	bd08      	pop	{r3, pc}

000b6838 <_ZNK17currentStatusData15get_hourlyCountEv>:
uint16_t currentStatusData::get_hourlyCount() const {
   b6838:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b683a:	2130      	movs	r1, #48	; 0x30
   b683c:	f7ff ffd6 	bl	b67ec <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6840:	bd08      	pop	{r3, pc}

000b6842 <_ZNK17currentStatusData14get_dailyCountEv>:
uint16_t currentStatusData::get_dailyCount() const {
   b6842:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b6844:	2132      	movs	r1, #50	; 0x32
   b6846:	f7ff ffd1 	bl	b67ec <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b684a:	bd08      	pop	{r3, pc}

000b684c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b684c:	b570      	push	{r4, r5, r6, lr}
   b684e:	4604      	mov	r4, r0
   b6850:	3004      	adds	r0, #4
   b6852:	460d      	mov	r5, r1
   b6854:	4616      	mov	r6, r2
   b6856:	f7ff fd2b 	bl	b62b0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b685a:	68e3      	ldr	r3, [r4, #12]
   b685c:	3b02      	subs	r3, #2
   b685e:	42ab      	cmp	r3, r5
   b6860:	d30d      	bcc.n	b687e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6862:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6864:	5b5a      	ldrh	r2, [r3, r5]
   b6866:	42b2      	cmp	r2, r6
   b6868:	d009      	beq.n	b687e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b686a:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b686c:	4620      	mov	r0, r4
   b686e:	68a5      	ldr	r5, [r4, #8]
   b6870:	f005 ff00 	bl	bc674 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6874:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b6876:	6823      	ldr	r3, [r4, #0]
   b6878:	4620      	mov	r0, r4
   b687a:	691b      	ldr	r3, [r3, #16]
   b687c:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b687e:	6860      	ldr	r0, [r4, #4]
        }
   b6880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6884:	f005 bffe 	b.w	bc884 <os_mutex_recursive_unlock>

000b6888 <_ZN13sysStatusData15set_magicNumberEt>:
void sysStatusData::set_magicNumber(uint16_t value) {
   b6888:	b508      	push	{r3, lr}
   b688a:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, magicNumber), value);
   b688c:	2112      	movs	r1, #18
   b688e:	f7ff ffdd 	bl	b684c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6892:	bd08      	pop	{r3, pc}

000b6894 <_ZN13sysStatusData26set_lastConnectionDurationEt>:
void sysStatusData::set_lastConnectionDuration(uint16_t value) {
   b6894:	b508      	push	{r3, lr}
   b6896:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData,lastConnectionDuration), value);
   b6898:	2128      	movs	r1, #40	; 0x28
   b689a:	f7ff ffd7 	bl	b684c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b689e:	bd08      	pop	{r3, pc}

000b68a0 <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b68a0:	b508      	push	{r3, lr}
   b68a2:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b68a4:	212a      	movs	r1, #42	; 0x2a
   b68a6:	f7ff ffd1 	bl	b684c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b68aa:	bd08      	pop	{r3, pc}

000b68ac <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>:
void sysStatusData::set_updatedFrequencyMinutes(uint16_t value) {
   b68ac:	b508      	push	{r3, lr}
   b68ae:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, updatedFrequencyMinutes), value);
   b68b0:	212c      	movs	r1, #44	; 0x2c
   b68b2:	f7ff ffcb 	bl	b684c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b68b6:	bd08      	pop	{r3, pc}

000b68b8 <_ZN17currentStatusData8set_RSSIEt>:
void currentStatusData::set_RSSI(uint16_t value) {
   b68b8:	b508      	push	{r3, lr}
   b68ba:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, RSSI), value);
   b68bc:	2122      	movs	r1, #34	; 0x22
   b68be:	f7ff ffc5 	bl	b684c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b68c2:	bd08      	pop	{r3, pc}

000b68c4 <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b68c4:	b508      	push	{r3, lr}
   b68c6:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b68c8:	2130      	movs	r1, #48	; 0x30
   b68ca:	f7ff ffbf 	bl	b684c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b68ce:	bd08      	pop	{r3, pc}

000b68d0 <_ZN17currentStatusData14set_dailyCountEt>:
void currentStatusData::set_dailyCount(uint16_t value) {
   b68d0:	b508      	push	{r3, lr}
   b68d2:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b68d4:	2132      	movs	r1, #50	; 0x32
   b68d6:	f7ff ffb9 	bl	b684c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b68da:	bd08      	pop	{r3, pc}

000b68dc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b68dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b68de:	4604      	mov	r4, r0
   b68e0:	3004      	adds	r0, #4
   b68e2:	460d      	mov	r5, r1
   b68e4:	f7ff fce4 	bl	b62b0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b68e8:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b68ea:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b68ec:	3b08      	subs	r3, #8
   b68ee:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b68f0:	bf23      	ittte	cs
   b68f2:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b68f4:	1949      	addcs	r1, r1, r5
   b68f6:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b68fa:	2600      	movcc	r6, #0
   b68fc:	bf38      	it	cc
   b68fe:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b6900:	f005 ffc0 	bl	bc884 <os_mutex_recursive_unlock>
        }
   b6904:	4630      	mov	r0, r6
   b6906:	4639      	mov	r1, r7
   b6908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b690a <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b690a:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b690c:	2120      	movs	r1, #32
   b690e:	f7ff ffe5 	bl	b68dc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b6912:	bd08      	pop	{r3, pc}

000b6914 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6916:	4604      	mov	r4, r0
   b6918:	3004      	adds	r0, #4
   b691a:	460d      	mov	r5, r1
   b691c:	461e      	mov	r6, r3
   b691e:	4617      	mov	r7, r2
   b6920:	f7ff fcc6 	bl	b62b0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6924:	68e3      	ldr	r3, [r4, #12]
   b6926:	3b08      	subs	r3, #8
   b6928:	42ab      	cmp	r3, r5
   b692a:	d312      	bcc.n	b6952 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b692c:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b692e:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b6930:	5958      	ldr	r0, [r3, r5]
   b6932:	6851      	ldr	r1, [r2, #4]
   b6934:	42b1      	cmp	r1, r6
   b6936:	bf08      	it	eq
   b6938:	42b8      	cmpeq	r0, r7
   b693a:	d00a      	beq.n	b6952 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b693c:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b693e:	4620      	mov	r0, r4
                        *(T *)p = value;
   b6940:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b6942:	68a5      	ldr	r5, [r4, #8]
   b6944:	f005 fe96 	bl	bc674 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6948:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b694a:	6823      	ldr	r3, [r4, #0]
   b694c:	4620      	mov	r0, r4
   b694e:	691b      	ldr	r3, [r3, #16]
   b6950:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b6952:	6860      	ldr	r0, [r4, #4]
        }
   b6954:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b6958:	f005 bf94 	b.w	bc884 <os_mutex_recursive_unlock>

000b695c <_ZN13sysStatusData20set_lastHookResponseEx>:
void sysStatusData::set_lastHookResponse(time_t value) {
   b695c:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastHookResponse), value);
   b695e:	2118      	movs	r1, #24
   b6960:	f7ff ffd8 	bl	b6914 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6964:	bd08      	pop	{r3, pc}

000b6966 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b6966:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b6968:	2120      	movs	r1, #32
   b696a:	f7ff ffd3 	bl	b6914 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b696e:	bd08      	pop	{r3, pc}

000b6970 <_ZN13sysStatusData25set_alertTimestampGatewayEx>:
void sysStatusData::set_alertTimestampGateway(time_t value) {
   b6970:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, alertTimestampGateway), value);
   b6972:	2130      	movs	r1, #48	; 0x30
   b6974:	f7ff ffce 	bl	b6914 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6978:	bd08      	pop	{r3, pc}

000b697a <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b697a:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b697c:	2128      	movs	r1, #40	; 0x28
   b697e:	f7ff ffc9 	bl	b6914 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6982:	bd08      	pop	{r3, pc}

000b6984 <_ZN17currentStatusData22set_alertTimestampNodeEx>:
void currentStatusData::set_alertTimestampNode(time_t value) {
   b6984:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b6986:	2138      	movs	r1, #56	; 0x38
   b6988:	f7ff ffc4 	bl	b6914 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b698c:	bd08      	pop	{r3, pc}
	...

000b6990 <_ZN17currentStatusData15resetEverythingEv>:
void currentStatusData::resetEverything() {                             // The device is waking up in a new day or is a new install
   b6990:	b510      	push	{r4, lr}
  Log.info("A new day - resetting everything");
   b6992:	4921      	ldr	r1, [pc, #132]	; (b6a18 <_ZN17currentStatusData15resetEverythingEv+0x88>)
   b6994:	4821      	ldr	r0, [pc, #132]	; (b6a1c <_ZN17currentStatusData15resetEverythingEv+0x8c>)
   b6996:	f7fd fbec 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
  current.set_nodeNumber(11);
   b699a:	f7ff fd5f 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b699e:	210b      	movs	r1, #11
   b69a0:	f7ff feee 	bl	b6780 <_ZN17currentStatusData14set_nodeNumberEh>
  current.set_tempNodeNumber(0);
   b69a4:	f7ff fd5a 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b69a8:	2100      	movs	r1, #0
   b69aa:	f7ff feef 	bl	b678c <_ZN17currentStatusData18set_tempNodeNumberEh>
  current.set_alertCodeNode(0);
   b69ae:	f7ff fd55 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b69b2:	2100      	movs	r1, #0
   b69b4:	f7ff ff0e 	bl	b67d4 <_ZN17currentStatusData17set_alertCodeNodeEh>
  current.set_alertTimestampNode(0);
   b69b8:	f7ff fd50 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b69bc:	2200      	movs	r2, #0
   b69be:	2300      	movs	r3, #0
   b69c0:	f7ff ffe0 	bl	b6984 <_ZN17currentStatusData22set_alertTimestampNodeEx>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b69c4:	f7ff fd4a 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b69c8:	2100      	movs	r1, #0
   b69ca:	f7ff ff81 	bl	b68d0 <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b69ce:	f7ff fd45 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b69d2:	2100      	movs	r1, #0
   b69d4:	f7ff ff76 	bl	b68c4 <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_messageCount(0);
   b69d8:	f7ff fd40 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b69dc:	2100      	movs	r1, #0
   b69de:	f7ff feed 	bl	b67bc <_ZN17currentStatusData16set_messageCountEh>
  current.set_successCount(0);
   b69e2:	f7ff fd3b 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b69e6:	2100      	movs	r1, #0
   b69e8:	f7ff feee 	bl	b67c8 <_ZN17currentStatusData16set_successCountEh>
  current.set_lastCountTime(Time.now());
   b69ec:	f7ff fd36 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b69f0:	4604      	mov	r4, r0
   b69f2:	f009 fa52 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b69f6:	4602      	mov	r2, r0
   b69f8:	17c3      	asrs	r3, r0, #31
   b69fa:	4620      	mov	r0, r4
   b69fc:	f7ff ffbd 	bl	b697a <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b6a00:	f7ff fcf4 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6a04:	2100      	movs	r1, #0
   b6a06:	f7ff fe9d 	bl	b6744 <_ZN13sysStatusData14set_resetCountEh>
  sysStatus.set_messageCount(0);
   b6a0a:	f7ff fcef 	bl	b63ec <_ZN13sysStatusData8instanceEv>
}
   b6a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_messageCount(0);
   b6a12:	2100      	movs	r1, #0
   b6a14:	f7ff be9c 	b.w	b6750 <_ZN13sysStatusData16set_messageCountEh>
   b6a18:	000c3e5c 	.word	0x000c3e5c
   b6a1c:	2003e658 	.word	0x2003e658

000b6a20 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b6a20:	b538      	push	{r3, r4, r5, lr}
   b6a22:	4604      	mov	r4, r0
   b6a24:	3004      	adds	r0, #4
   b6a26:	460d      	mov	r5, r1
   b6a28:	f7ff fc42 	bl	b62b0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6a2c:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6a2e:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6a30:	3b01      	subs	r3, #1
   b6a32:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6a34:	bf26      	itte	cs
   b6a36:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6a38:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b6a3a:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6a3c:	f005 ff22 	bl	bc884 <os_mutex_recursive_unlock>
        }
   b6a40:	4628      	mov	r0, r5
   b6a42:	bd38      	pop	{r3, r4, r5, pc}

000b6a44 <_ZNK17currentStatusData13get_openHoursEv>:
bool currentStatusData::get_openHours() const {
   b6a44:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(CurrentData, openHours));
   b6a46:	2140      	movs	r1, #64	; 0x40
   b6a48:	f7ff ffea 	bl	b6a20 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b6a4c:	bd08      	pop	{r3, pc}

000b6a4e <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6a4e:	b570      	push	{r4, r5, r6, lr}
   b6a50:	4604      	mov	r4, r0
   b6a52:	3004      	adds	r0, #4
   b6a54:	460d      	mov	r5, r1
   b6a56:	4616      	mov	r6, r2
   b6a58:	f7ff fc2a 	bl	b62b0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6a5c:	68e3      	ldr	r3, [r4, #12]
   b6a5e:	3b01      	subs	r3, #1
   b6a60:	42ab      	cmp	r3, r5
   b6a62:	d30d      	bcc.n	b6a80 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6a64:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6a66:	5d5a      	ldrb	r2, [r3, r5]
   b6a68:	42b2      	cmp	r2, r6
   b6a6a:	d009      	beq.n	b6a80 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                        *(T *)p = value;
   b6a6c:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b6a6e:	4620      	mov	r0, r4
   b6a70:	68a5      	ldr	r5, [r4, #8]
   b6a72:	f005 fdff 	bl	bc674 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6a76:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b6a78:	6823      	ldr	r3, [r4, #0]
   b6a7a:	4620      	mov	r0, r4
   b6a7c:	691b      	ldr	r3, [r3, #16]
   b6a7e:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b6a80:	6860      	ldr	r0, [r4, #4]
        }
   b6a82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6a86:	f005 befd 	b.w	bc884 <os_mutex_recursive_unlock>

000b6a8a <_ZN13sysStatusData14set_verizonSIMEb>:
void sysStatusData::set_verizonSIM(bool value) {
   b6a8a:	b508      	push	{r3, lr}
   b6a8c:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, verizonSIM), value);
   b6a8e:	213a      	movs	r1, #58	; 0x3a
   b6a90:	f7ff ffdd 	bl	b6a4e <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b6a94:	bd08      	pop	{r3, pc}
	...

000b6a98 <_ZN13sysStatusData18loadSystemDefaultsEv>:
void sysStatusData::loadSystemDefaults() {                         // This code is only executed with a new device or a new storage object structure
   b6a98:	b508      	push	{r3, lr}
  Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   b6a9a:	4927      	ldr	r1, [pc, #156]	; (b6b38 <_ZN13sysStatusData18loadSystemDefaultsEv+0xa0>)
   b6a9c:	4827      	ldr	r0, [pc, #156]	; (b6b3c <_ZN13sysStatusData18loadSystemDefaultsEv+0xa4>)
   b6a9e:	f7fd fb68 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_nodeNumber(0);                     // Default for a Gateway
   b6aa2:	f7ff fca3 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6aa6:	2100      	movs	r1, #0
   b6aa8:	f7ff fe3a 	bl	b6720 <_ZN13sysStatusData14set_nodeNumberEh>
  sysStatus.set_structuresVersion(1);
   b6aac:	f7ff fc9e 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6ab0:	2101      	movs	r1, #1
   b6ab2:	f7ff fe3b 	bl	b672c <_ZN13sysStatusData21set_structuresVersionEh>
  sysStatus.set_magicNumber(27617);
   b6ab6:	f7ff fc99 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6aba:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b6abe:	f7ff fee3 	bl	b6888 <_ZN13sysStatusData15set_magicNumberEt>
  sysStatus.set_stayConnected(0);
   b6ac2:	f7ff fc93 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6ac6:	2100      	movs	r1, #0
   b6ac8:	f7ff fe36 	bl	b6738 <_ZN13sysStatusData17set_stayConnectedEh>
  sysStatus.set_resetCount(0);
   b6acc:	f7ff fc8e 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6ad0:	2100      	movs	r1, #0
   b6ad2:	f7ff fe37 	bl	b6744 <_ZN13sysStatusData14set_resetCountEh>
  sysStatus.set_messageCount(0);
   b6ad6:	f7ff fc89 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6ada:	2100      	movs	r1, #0
   b6adc:	f7ff fe38 	bl	b6750 <_ZN13sysStatusData16set_messageCountEh>
  sysStatus.set_lastHookResponse(0);
   b6ae0:	f7ff fc84 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6ae4:	2200      	movs	r2, #0
   b6ae6:	2300      	movs	r3, #0
   b6ae8:	f7ff ff38 	bl	b695c <_ZN13sysStatusData20set_lastHookResponseEx>
  sysStatus.set_frequencyMinutes(10);
   b6aec:	f7ff fc7e 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6af0:	210a      	movs	r1, #10
   b6af2:	f7ff fed5 	bl	b68a0 <_ZN13sysStatusData20set_frequencyMinutesEt>
  sysStatus.set_updatedFrequencyMinutes(0);
   b6af6:	f7ff fc79 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6afa:	2100      	movs	r1, #0
   b6afc:	f7ff fed6 	bl	b68ac <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
  sysStatus.set_alertCodeGateway(0);
   b6b00:	f7ff fc74 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6b04:	2100      	movs	r1, #0
   b6b06:	f7ff fe29 	bl	b675c <_ZN13sysStatusData20set_alertCodeGatewayEh>
  sysStatus.set_alertTimestampGateway(0);
   b6b0a:	f7ff fc6f 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6b0e:	2300      	movs	r3, #0
   b6b10:	2200      	movs	r2, #0
   b6b12:	f7ff ff2d 	bl	b6970 <_ZN13sysStatusData25set_alertTimestampGatewayEx>
  sysStatus.set_openTime(6);
   b6b16:	f7ff fc69 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6b1a:	2106      	movs	r1, #6
   b6b1c:	f7ff fe24 	bl	b6768 <_ZN13sysStatusData12set_openTimeEh>
  sysStatus.set_closeTime(22);
   b6b20:	f7ff fc64 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6b24:	2116      	movs	r1, #22
   b6b26:	f7ff fe25 	bl	b6774 <_ZN13sysStatusData13set_closeTimeEh>
  sysStatus.set_verizonSIM(false);
   b6b2a:	f7ff fc5f 	bl	b63ec <_ZN13sysStatusData8instanceEv>
}
   b6b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_verizonSIM(false);
   b6b32:	2100      	movs	r1, #0
   b6b34:	f7ff bfa9 	b.w	b6a8a <_ZN13sysStatusData14set_verizonSIMEb>
   b6b38:	000c3e7d 	.word	0x000c3e7d
   b6b3c:	2003e658 	.word	0x2003e658

000b6b40 <_ZN13sysStatusData17checkSystemValuesEv>:
void sysStatusData::checkSystemValues() {               // Values out of bounds indicates an initialization error - will reload defaults
   b6b40:	b538      	push	{r3, r4, r5, lr}
   b6b42:	4604      	mov	r4, r0
    if (sysStatus.get_openTime() > 12 || sysStatus.get_closeTime() <12) {
   b6b44:	f7ff fc52 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6b48:	f7ff fd90 	bl	b666c <_ZNK13sysStatusData12get_openTimeEv>
   b6b4c:	280c      	cmp	r0, #12
   b6b4e:	d915      	bls.n	b6b7c <_ZN13sysStatusData17checkSystemValuesEv+0x3c>
        Log.info("Open / Close issue - resetting");
   b6b50:	4912      	ldr	r1, [pc, #72]	; (b6b9c <_ZN13sysStatusData17checkSystemValuesEv+0x5c>)
   b6b52:	4813      	ldr	r0, [pc, #76]	; (b6ba0 <_ZN13sysStatusData17checkSystemValuesEv+0x60>)
   b6b54:	f7fd fb0d 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
        reset = true;
   b6b58:	2501      	movs	r5, #1
    if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) reset = true;
   b6b5a:	f7ff fc47 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6b5e:	f7ff fe5c 	bl	b681a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b6b62:	b998      	cbnz	r0, b6b8c <_ZN13sysStatusData17checkSystemValuesEv+0x4c>
   b6b64:	2501      	movs	r5, #1
    if (sysStatus.get_nodeNumber() != 0) reset = true;
   b6b66:	f7ff fc41 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6b6a:	f7ff fd6b 	bl	b6644 <_ZNK13sysStatusData14get_nodeNumberEv>
   b6b6e:	b900      	cbnz	r0, b6b72 <_ZN13sysStatusData17checkSystemValuesEv+0x32>
    if (reset) sysStatusData::loadSystemDefaults();
   b6b70:	b19d      	cbz	r5, b6b9a <_ZN13sysStatusData17checkSystemValuesEv+0x5a>
   b6b72:	4620      	mov	r0, r4
}
   b6b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (reset) sysStatusData::loadSystemDefaults();
   b6b78:	f7ff bf8e 	b.w	b6a98 <_ZN13sysStatusData18loadSystemDefaultsEv>
    if (sysStatus.get_openTime() > 12 || sysStatus.get_closeTime() <12) {
   b6b7c:	f7ff fc36 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6b80:	f7ff fd79 	bl	b6676 <_ZNK13sysStatusData13get_closeTimeEv>
   b6b84:	280b      	cmp	r0, #11
   b6b86:	d9e3      	bls.n	b6b50 <_ZN13sysStatusData17checkSystemValuesEv+0x10>
    bool reset = false;
   b6b88:	2500      	movs	r5, #0
   b6b8a:	e7e6      	b.n	b6b5a <_ZN13sysStatusData17checkSystemValuesEv+0x1a>
    if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) reset = true;
   b6b8c:	f7ff fc2e 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6b90:	f7ff fe43 	bl	b681a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b6b94:	283c      	cmp	r0, #60	; 0x3c
   b6b96:	d8e5      	bhi.n	b6b64 <_ZN13sysStatusData17checkSystemValuesEv+0x24>
   b6b98:	e7e5      	b.n	b6b66 <_ZN13sysStatusData17checkSystemValuesEv+0x26>
}
   b6b9a:	bd38      	pop	{r3, r4, r5, pc}
   b6b9c:	000c3e95 	.word	0x000c3e95
   b6ba0:	2003e658 	.word	0x2003e658

000b6ba4 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b6ba4:	b508      	push	{r3, lr}
    fram.begin();
   b6ba6:	6a00      	ldr	r0, [r0, #32]
   b6ba8:	f003 f888 	bl	b9cbc <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b6bac:	f7ff fc1e 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6bb0:	6803      	ldr	r3, [r0, #0]
   b6bb2:	685b      	ldr	r3, [r3, #4]
   b6bb4:	4798      	blx	r3
    sysStatus.checkSystemValues();					// Make sure system values are in bounds for normal operation
   b6bb6:	f7ff fc19 	bl	b63ec <_ZN13sysStatusData8instanceEv>
}
   b6bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sysStatus.checkSystemValues();					// Make sure system values are in bounds for normal operation
   b6bbe:	f7ff bfbf 	b.w	b6b40 <_ZN13sysStatusData17checkSystemValuesEv>

000b6bc2 <_ZN17currentStatusData13set_openHoursEb>:
void currentStatusData::set_openHours(bool value) {
   b6bc2:	b508      	push	{r3, lr}
   b6bc4:	460a      	mov	r2, r1
    setValue<bool>(offsetof(CurrentData, openHours), value);
   b6bc6:	2140      	movs	r1, #64	; 0x40
   b6bc8:	f7ff ff41 	bl	b6a4e <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b6bcc:	bd08      	pop	{r3, pc}
	...

000b6bd0 <_GLOBAL__sub_I_fram>:
}
   b6bd0:	b510      	push	{r4, lr}
MB85RC64 fram(Wire, 0);
   b6bd2:	f009 fbeb 	bl	c03ac <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b6bd6:	4c05      	ldr	r4, [pc, #20]	; (b6bec <_GLOBAL__sub_I_fram+0x1c>)
   b6bd8:	4601      	mov	r1, r0
   b6bda:	2300      	movs	r3, #0
   b6bdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b6be0:	4620      	mov	r0, r4
   b6be2:	f003 f861 	bl	b9ca8 <_ZN6MB85RCC1ER7TwoWireji>
   b6be6:	4b02      	ldr	r3, [pc, #8]	; (b6bf0 <_GLOBAL__sub_I_fram+0x20>)
   b6be8:	6023      	str	r3, [r4, #0]
}
   b6bea:	bd10      	pop	{r4, pc}
   b6bec:	2003e478 	.word	0x2003e478
   b6bf0:	000c3ebc 	.word	0x000c3ebc

000b6bf4 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b6bf4:	4770      	bx	lr

000b6bf6 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b6bf6:	6a00      	ldr	r0, [r0, #32]
   b6bf8:	6803      	ldr	r3, [r0, #0]
   b6bfa:	68db      	ldr	r3, [r3, #12]
   b6bfc:	4718      	bx	r3

000b6bfe <_ZN18Particle_FunctionsD1Ev>:

Particle_Functions::Particle_Functions() {
}

Particle_Functions::~Particle_Functions() {
}
   b6bfe:	4770      	bx	lr

000b6c00 <_ZN18Particle_FunctionsD0Ev>:
Particle_Functions::~Particle_Functions() {
   b6c00:	b510      	push	{r4, lr}
}
   b6c02:	2104      	movs	r1, #4
Particle_Functions::~Particle_Functions() {
   b6c04:	4604      	mov	r4, r0
}
   b6c06:	f7fd fa4a 	bl	b409e <_ZdlPvj>
   b6c0a:	4620      	mov	r0, r4
   b6c0c:	bd10      	pop	{r4, pc}
	...

000b6c10 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>:
class JsonParserStatic : public JsonParser {
   b6c10:	b510      	push	{r4, lr}
   b6c12:	4b03      	ldr	r3, [pc, #12]	; (b6c20 <_ZN16JsonParserStaticILj1024ELj80EED1Ev+0x10>)
   b6c14:	6003      	str	r3, [r0, #0]
   b6c16:	4604      	mov	r4, r0
   b6c18:	f001 fd92 	bl	b8740 <_ZN10JsonParserD1Ev>
   b6c1c:	4620      	mov	r0, r4
   b6c1e:	bd10      	pop	{r4, pc}
   b6c20:	000c4364 	.word	0x000c4364

000b6c24 <_ZN16JsonParserStaticILj1024ELj80EED0Ev>:
   b6c24:	b510      	push	{r4, lr}
   b6c26:	4604      	mov	r4, r0
   b6c28:	f7ff fff2 	bl	b6c10 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
   b6c2c:	4620      	mov	r0, r4
   b6c2e:	f640 112c 	movw	r1, #2348	; 0x92c
   b6c32:	f7fd fa34 	bl	b409e <_ZdlPvj>
   b6c36:	4620      	mov	r0, r4
   b6c38:	bd10      	pop	{r4, pc}

000b6c3a <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6c3a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
   b6c3c:	6802      	ldr	r2, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b6c3e:	6853      	ldr	r3, [r2, #4]
   b6c40:	6890      	ldr	r0, [r2, #8]
   b6c42:	6814      	ldr	r4, [r2, #0]
   b6c44:	105e      	asrs	r6, r3, #1
   b6c46:	eb00 0563 	add.w	r5, r0, r3, asr #1
   b6c4a:	07db      	lsls	r3, r3, #31
   b6c4c:	bf48      	it	mi
   b6c4e:	5983      	ldrmi	r3, [r0, r6]
   b6c50:	4668      	mov	r0, sp
   b6c52:	bf48      	it	mi
   b6c54:	591c      	ldrmi	r4, [r3, r4]
   b6c56:	f008 fde9 	bl	bf82c <_ZN6StringC1EOS_>
   b6c5a:	4669      	mov	r1, sp
   b6c5c:	4628      	mov	r0, r5
   b6c5e:	47a0      	blx	r4
   b6c60:	4604      	mov	r4, r0
   b6c62:	4668      	mov	r0, sp
   b6c64:	f008 fd66 	bl	bf734 <_ZN6StringD1Ev>
      }
   b6c68:	4620      	mov	r0, r4
   b6c6a:	b004      	add	sp, #16
   b6c6c:	bd70      	pop	{r4, r5, r6, pc}

000b6c6e <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6c6e:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6c70:	b538      	push	{r3, r4, r5, lr}
   b6c72:	4604      	mov	r4, r0
	switch (__op)
   b6c74:	d102      	bne.n	b6c7c <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6c76:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6c78:	6023      	str	r3, [r4, #0]
	}
   b6c7a:	e003      	b.n	b6c84 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
	  switch (__op)
   b6c7c:	2a02      	cmp	r2, #2
   b6c7e:	d003      	beq.n	b6c88 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
   b6c80:	2a03      	cmp	r2, #3
   b6c82:	d00d      	beq.n	b6ca0 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x32>
      }
   b6c84:	2000      	movs	r0, #0
   b6c86:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6c88:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b6c8a:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6c8c:	f7fd fa03 	bl	b4096 <_Znwj>
   b6c90:	4603      	mov	r3, r0
   b6c92:	2800      	cmp	r0, #0
   b6c94:	d0f0      	beq.n	b6c78 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
   b6c96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6c9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b6c9e:	e7eb      	b.n	b6c78 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6ca0:	6800      	ldr	r0, [r0, #0]
   b6ca2:	2800      	cmp	r0, #0
   b6ca4:	d0ee      	beq.n	b6c84 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   b6ca6:	210c      	movs	r1, #12
   b6ca8:	f7fd f9f9 	bl	b409e <_ZdlPvj>
   b6cac:	e7ea      	b.n	b6c84 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>

000b6cae <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b6cae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6cb0:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b6cb2:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b6cb4:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b6cb6:	f001 ff25 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b6cba:	b120      	cbz	r0, b6cc6 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b6cbc:	9901      	ldr	r1, [sp, #4]
   b6cbe:	462a      	mov	r2, r5
   b6cc0:	4620      	mov	r0, r4
   b6cc2:	f001 ff01 	bl	b8ac8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b6cc6:	b003      	add	sp, #12
   b6cc8:	bd30      	pop	{r4, r5, pc}
	...

000b6ccc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b6ccc:	4b0a      	ldr	r3, [pc, #40]	; (b6cf8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b6cce:	b510      	push	{r4, lr}
   b6cd0:	4604      	mov	r4, r0
   b6cd2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b6cd4:	f007 fba2 	bl	be41c <_ZN5spark10LogManager8instanceEv>
   b6cd8:	4621      	mov	r1, r4
   b6cda:	f007 fda6 	bl	be82a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b6cde:	f009 f9c3 	bl	c0068 <_Z16_fetch_usbserialv>
   b6ce2:	f009 f9b3 	bl	c004c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b6ce6:	4620      	mov	r0, r4
   b6ce8:	4b04      	ldr	r3, [pc, #16]	; (b6cfc <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b6cea:	f840 3b04 	str.w	r3, [r0], #4
   b6cee:	f007 fc37 	bl	be560 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b6cf2:	4620      	mov	r0, r4
   b6cf4:	bd10      	pop	{r4, pc}
   b6cf6:	bf00      	nop
   b6cf8:	000c434c 	.word	0x000c434c
   b6cfc:	000c4334 	.word	0x000c4334

000b6d00 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b6d00:	b510      	push	{r4, lr}
   b6d02:	4604      	mov	r4, r0
    }
   b6d04:	f7ff ffe2 	bl	b6ccc <_ZN5spark16SerialLogHandlerD1Ev>
   b6d08:	4620      	mov	r0, r4
   b6d0a:	2124      	movs	r1, #36	; 0x24
   b6d0c:	f7fd f9c7 	bl	b409e <_ZdlPvj>
   b6d10:	4620      	mov	r0, r4
   b6d12:	bd10      	pop	{r4, pc}

000b6d14 <_ZN18Particle_Functions8instanceEv>:
Particle_Functions &Particle_Functions::instance() {
   b6d14:	b510      	push	{r4, lr}
    if (!_instance) {
   b6d16:	4c06      	ldr	r4, [pc, #24]	; (b6d30 <_ZN18Particle_Functions8instanceEv+0x1c>)
   b6d18:	6823      	ldr	r3, [r4, #0]
   b6d1a:	b933      	cbnz	r3, b6d2a <_ZN18Particle_Functions8instanceEv+0x16>
        _instance = new Particle_Functions();
   b6d1c:	2004      	movs	r0, #4
   b6d1e:	f7fd f9ba 	bl	b4096 <_Znwj>
   b6d22:	b108      	cbz	r0, b6d28 <_ZN18Particle_Functions8instanceEv+0x14>
Particle_Functions::Particle_Functions() {
   b6d24:	4b03      	ldr	r3, [pc, #12]	; (b6d34 <_ZN18Particle_Functions8instanceEv+0x20>)
   b6d26:	6003      	str	r3, [r0, #0]
        _instance = new Particle_Functions();
   b6d28:	6020      	str	r0, [r4, #0]
}
   b6d2a:	6820      	ldr	r0, [r4, #0]
   b6d2c:	bd10      	pop	{r4, pc}
   b6d2e:	bf00      	nop
   b6d30:	2003e498 	.word	0x2003e498
   b6d34:	000c4374 	.word	0x000c4374

000b6d38 <_ZN18Particle_Functions5setupEv>:

void Particle_Functions::setup() {
   b6d38:	b530      	push	{r4, r5, lr}
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6d3a:	4919      	ldr	r1, [pc, #100]	; (b6da0 <_ZN18Particle_Functions5setupEv+0x68>)
void Particle_Functions::setup() {
   b6d3c:	b085      	sub	sp, #20
   b6d3e:	4604      	mov	r4, r0
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6d40:	4818      	ldr	r0, [pc, #96]	; (b6da4 <_ZN18Particle_Functions5setupEv+0x6c>)
   b6d42:	f7fd fa16 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
    _Function_base() : _M_manager(nullptr) { }
   b6d46:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6d48:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b6d4a:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6d4c:	f7fd f9a3 	bl	b4096 <_Znwj>
   b6d50:	b118      	cbz	r0, b6d5a <_ZN18Particle_Functions5setupEv+0x22>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6d52:	4b15      	ldr	r3, [pc, #84]	; (b6da8 <_ZN18Particle_Functions5setupEv+0x70>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6d54:	6084      	str	r4, [r0, #8]
   b6d56:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b6d5a:	4b14      	ldr	r3, [pc, #80]	; (b6dac <_ZN18Particle_Functions5setupEv+0x74>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6d5c:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
   b6d5e:	9303      	str	r3, [sp, #12]
            auto wrapper = new user_std_function_int_str_t(func);
   b6d60:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   b6d62:	4b13      	ldr	r3, [pc, #76]	; (b6db0 <_ZN18Particle_Functions5setupEv+0x78>)
   b6d64:	9302      	str	r3, [sp, #8]
   b6d66:	f7fd f996 	bl	b4096 <_Znwj>
   b6d6a:	4604      	mov	r4, r0
   b6d6c:	b178      	cbz	r0, b6d8e <_ZN18Particle_Functions5setupEv+0x56>
    _Function_base() : _M_manager(nullptr) { }
   b6d6e:	2300      	movs	r3, #0
   b6d70:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6d72:	9b02      	ldr	r3, [sp, #8]
      if (static_cast<bool>(__x))
   b6d74:	b133      	cbz	r3, b6d84 <_ZN18Particle_Functions5setupEv+0x4c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6d76:	2202      	movs	r2, #2
   b6d78:	4669      	mov	r1, sp
   b6d7a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6d7c:	9b03      	ldr	r3, [sp, #12]
   b6d7e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6d80:	9b02      	ldr	r3, [sp, #8]
   b6d82:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
   b6d84:	4a0b      	ldr	r2, [pc, #44]	; (b6db4 <_ZN18Particle_Functions5setupEv+0x7c>)
   b6d86:	480c      	ldr	r0, [pc, #48]	; (b6db8 <_ZN18Particle_Functions5setupEv+0x80>)
   b6d88:	4621      	mov	r1, r4
   b6d8a:	f006 fb8c 	bl	bd4a6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
   b6d8e:	9b02      	ldr	r3, [sp, #8]
   b6d90:	b11b      	cbz	r3, b6d9a <_ZN18Particle_Functions5setupEv+0x62>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6d92:	4669      	mov	r1, sp
   b6d94:	2203      	movs	r2, #3
   b6d96:	4608      	mov	r0, r1
   b6d98:	4798      	blx	r3
    Particle.function("Commands", &Particle_Functions::jsonFunctionParser, this);
}
   b6d9a:	b005      	add	sp, #20
   b6d9c:	bd30      	pop	{r4, r5, pc}
   b6d9e:	bf00      	nop
   b6da0:	000c3f54 	.word	0x000c3f54
   b6da4:	2003e658 	.word	0x2003e658
   b6da8:	000b6dbd 	.word	0x000b6dbd
   b6dac:	000b6c3b 	.word	0x000b6c3b
   b6db0:	000b6c6f 	.word	0x000b6c6f
   b6db4:	000c3f82 	.word	0x000c3f82
   b6db8:	000bd47f 	.word	0x000bd47f

000b6dbc <_ZN18Particle_Functions18jsonFunctionParserE6String>:

void Particle_Functions::loop() {
    // Put your code to run during the application thread loop here
}

int Particle_Functions::jsonFunctionParser(String command) {
   b6dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6dc0:	f6ad 1db4 	subw	sp, sp, #2484	; 0x9b4
   b6dc4:	460c      	mov	r4, r1
    // const char * const commandString = "{\"cmd\":[{\"node\":1,\"var\":\"hourly\",\"fn\":\"reset\"},{\"node\":0,\"var\":1,\"fn\":\"lowpowermode\"},{\"node\":2,\"var\":\"daily\",\"fn\":\"report\"}]}";
    // String to put into Uber command window {"cmd":[{"node":1,"var":"hourly","fn":"reset"},{"node":0,"var":1,"fn":"lowpowermode"},{"node":2,"var":"daily","fn":"report"}]}

	int nodeNumber;
	String variable;
   b6dc6:	a809      	add	r0, sp, #36	; 0x24
   b6dc8:	49a3      	ldr	r1, [pc, #652]	; (b7058 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x29c>)
   b6dca:	f008 fcfe 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
	String function;
   b6dce:	49a2      	ldr	r1, [pc, #648]	; (b7058 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x29c>)
   b6dd0:	a80d      	add	r0, sp, #52	; 0x34
   b6dd2:	f008 fcfa 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b6dd6:	2350      	movs	r3, #80	; 0x50
   b6dd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b6ddc:	9300      	str	r3, [sp, #0]
   b6dde:	a92c      	add	r1, sp, #176	; 0xb0
   b6de0:	f50d 6396 	add.w	r3, sp, #1200	; 0x4b0
   b6de4:	a821      	add	r0, sp, #132	; 0x84
   b6de6:	f001 fd0d 	bl	b8804 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b6dea:	4b9c      	ldr	r3, [pc, #624]	; (b705c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2a0>)
  char messaging[64];
  bool success = true;

	JsonParserStatic<1024, 80> jp;	// Global parser that supports up to 256 bytes of data and 20 tokens

  Log.info(command.c_str());
   b6dec:	6821      	ldr	r1, [r4, #0]
   b6dee:	489c      	ldr	r0, [pc, #624]	; (b7060 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2a4>)
   b6df0:	9321      	str	r3, [sp, #132]	; 0x84
   b6df2:	f7fd f9be 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>

	jp.clear();
   b6df6:	a821      	add	r0, sp, #132	; 0x84
   b6df8:	f001 fcfa 	bl	b87f0 <_ZN10JsonBuffer5clearEv>
   b6dfc:	6821      	ldr	r1, [r4, #0]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b6dfe:	9103      	str	r1, [sp, #12]
   b6e00:	4608      	mov	r0, r1
   b6e02:	f00a f9d8 	bl	c11b6 <strlen>
   b6e06:	9903      	ldr	r1, [sp, #12]
   b6e08:	4602      	mov	r2, r0
   b6e0a:	a821      	add	r0, sp, #132	; 0x84
   b6e0c:	f001 fcd3 	bl	b87b6 <_ZN10JsonBuffer7addDataEPKcj>
	jp.addString(command);
	if (!jp.parse()) {
   b6e10:	a821      	add	r0, sp, #132	; 0x84
   b6e12:	f002 fa29 	bl	b9268 <_ZN10JsonParser5parseEv>
   b6e16:	4604      	mov	r4, r0
   b6e18:	b990      	cbnz	r0, b6e40 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x84>
		Log.info("Parsing failed - check syntax");
   b6e1a:	4992      	ldr	r1, [pc, #584]	; (b7064 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2a8>)
   b6e1c:	4890      	ldr	r0, [pc, #576]	; (b7060 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2a4>)
   b6e1e:	f7fd f9a8 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b6e22:	4b91      	ldr	r3, [pc, #580]	; (b7068 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ac>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6e24:	4a8f      	ldr	r2, [pc, #572]	; (b7064 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2a8>)
   b6e26:	781b      	ldrb	r3, [r3, #0]
   b6e28:	f88d 3000 	strb.w	r3, [sp]
   b6e2c:	a811      	add	r0, sp, #68	; 0x44
   b6e2e:	498f      	ldr	r1, [pc, #572]	; (b706c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b0>)
   b6e30:	233c      	movs	r3, #60	; 0x3c
   b6e32:	f006 fc49 	bl	bd6c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b6e36:	a812      	add	r0, sp, #72	; 0x48
   b6e38:	f7fd fbfe 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }

    Log.info(messaging);
    if (Particle.connected()) Particle.publish("cmd",messaging,PRIVATE);
	}
	return success;
   b6e3c:	4625      	mov	r5, r4
   b6e3e:	e017      	b.n	b6e70 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb4>
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b6e40:	a821      	add	r0, sp, #132	; 0x84
   b6e42:	f001 fcfa 	bl	b883a <_ZNK10JsonParser14getOuterObjectEv>
   b6e46:	4a89      	ldr	r2, [pc, #548]	; (b706c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b0>)
		if (getValueTokenByKey(container, name, value)) {
   b6e48:	4f89      	ldr	r7, [pc, #548]	; (b7070 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b4>)
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b6e4a:	f8df 8278 	ldr.w	r8, [pc, #632]	; b70c4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x308>
		jp.getValueByKey(cmdObjectContainer, "fn", function);
   b6e4e:	f8df 9278 	ldr.w	r9, [pc, #632]	; b70c8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x30c>
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b6e52:	4601      	mov	r1, r0
   b6e54:	ab06      	add	r3, sp, #24
   b6e56:	a821      	add	r0, sp, #132	; 0x84
   b6e58:	f001 fe54 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b6e5c:	2500      	movs	r5, #0
		cmdObjectContainer = jp.getTokenByIndex(cmdArrayContainer, i);
   b6e5e:	9906      	ldr	r1, [sp, #24]
   b6e60:	462a      	mov	r2, r5
   b6e62:	a821      	add	r0, sp, #132	; 0x84
   b6e64:	f001 fd0b 	bl	b887e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(cmdObjectContainer == NULL) {
   b6e68:	4606      	mov	r6, r0
   b6e6a:	b978      	cbnz	r0, b6e8c <_ZN18Particle_Functions18jsonFunctionParserE6String+0xd0>
      if (i == 0) return 0;                                       // No valid entries
   b6e6c:	2d00      	cmp	r5, #0
   b6e6e:	d1e5      	bne.n	b6e3c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x80>
	JsonParserStatic<1024, 80> jp;	// Global parser that supports up to 256 bytes of data and 20 tokens
   b6e70:	a821      	add	r0, sp, #132	; 0x84
   b6e72:	f7ff fecd 	bl	b6c10 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
	String function;
   b6e76:	a80d      	add	r0, sp, #52	; 0x34
   b6e78:	f008 fc5c 	bl	bf734 <_ZN6StringD1Ev>
	String variable;
   b6e7c:	a809      	add	r0, sp, #36	; 0x24
   b6e7e:	f008 fc59 	bl	bf734 <_ZN6StringD1Ev>
}
   b6e82:	4628      	mov	r0, r5
   b6e84:	f60d 1db4 	addw	sp, sp, #2484	; 0x9b4
   b6e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6e8c:	4601      	mov	r1, r0
   b6e8e:	ab07      	add	r3, sp, #28
   b6e90:	463a      	mov	r2, r7
   b6e92:	a821      	add	r0, sp, #132	; 0x84
   b6e94:	f001 fe36 	bl	b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b6e98:	b120      	cbz	r0, b6ea4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xe8>
			return getTokenValue(value, result);
   b6e9a:	9907      	ldr	r1, [sp, #28]
   b6e9c:	aa04      	add	r2, sp, #16
   b6e9e:	a821      	add	r0, sp, #132	; 0x84
   b6ea0:	f001 fd46 	bl	b8930 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b6ea4:	ab09      	add	r3, sp, #36	; 0x24
   b6ea6:	4642      	mov	r2, r8
   b6ea8:	4631      	mov	r1, r6
   b6eaa:	a821      	add	r0, sp, #132	; 0x84
   b6eac:	f7ff feff 	bl	b6cae <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(cmdObjectContainer, "fn", function);
   b6eb0:	4631      	mov	r1, r6
   b6eb2:	a821      	add	r0, sp, #132	; 0x84
   b6eb4:	ab0d      	add	r3, sp, #52	; 0x34
   b6eb6:	464a      	mov	r2, r9
   b6eb8:	f7ff fef9 	bl	b6cae <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b6ebc:	496d      	ldr	r1, [pc, #436]	; (b7074 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b8>)
   b6ebe:	a80d      	add	r0, sp, #52	; 0x34
   b6ec0:	f008 fd49 	bl	bf956 <_ZNK6String6equalsEPKc>
		if (function == "reset") {
   b6ec4:	2800      	cmp	r0, #0
   b6ec6:	d059      	beq.n	b6f7c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1c0>
      if (nodeNumber == 0) {
   b6ec8:	9b04      	ldr	r3, [sp, #16]
   b6eca:	2b00      	cmp	r3, #0
   b6ecc:	d13b      	bne.n	b6f46 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x18a>
   b6ece:	496a      	ldr	r1, [pc, #424]	; (b7078 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2bc>)
   b6ed0:	a809      	add	r0, sp, #36	; 0x24
   b6ed2:	f008 fd40 	bl	bf956 <_ZNK6String6equalsEPKc>
        if (variable == "nodeData") {
   b6ed6:	b318      	cbz	r0, b6f20 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
          snprintf(messaging,sizeof(messaging),"Resetting the gateway's node Data");
   b6ed8:	4968      	ldr	r1, [pc, #416]	; (b707c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c0>)
   b6eda:	a811      	add	r0, sp, #68	; 0x44
   b6edc:	f00a f945 	bl	c116a <strcpy>
          nodeID.resetNodeIDs();
   b6ee0:	f7ff fb44 	bl	b656c <_ZN10nodeIDData8instanceEv>
   b6ee4:	f7ff fb80 	bl	b65e8 <_ZN10nodeIDData12resetNodeIDsEv>
        current.resetEverything();
   b6ee8:	f7ff fab8 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b6eec:	f7ff fd50 	bl	b6990 <_ZN17currentStatusData15resetEverythingEv>
    Log.info(messaging);
   b6ef0:	485b      	ldr	r0, [pc, #364]	; (b7060 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2a4>)
   b6ef2:	a911      	add	r1, sp, #68	; 0x44
   b6ef4:	f7fd f93d 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6ef8:	f005 fffa 	bl	bcef0 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("cmd",messaging,PRIVATE);
   b6efc:	b160      	cbz	r0, b6f18 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x15c>
   b6efe:	4b5a      	ldr	r3, [pc, #360]	; (b7068 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ac>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6f00:	495a      	ldr	r1, [pc, #360]	; (b706c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b0>)
   b6f02:	781b      	ldrb	r3, [r3, #0]
   b6f04:	f88d 3000 	strb.w	r3, [sp]
   b6f08:	a807      	add	r0, sp, #28
   b6f0a:	233c      	movs	r3, #60	; 0x3c
   b6f0c:	aa11      	add	r2, sp, #68	; 0x44
   b6f0e:	f006 fbdb 	bl	bd6c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b6f12:	a808      	add	r0, sp, #32
   b6f14:	f7fd fb90 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b6f18:	3501      	adds	r5, #1
   b6f1a:	2d0a      	cmp	r5, #10
   b6f1c:	d19f      	bne.n	b6e5e <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa2>
   b6f1e:	e78d      	b.n	b6e3c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x80>
   b6f20:	4957      	ldr	r1, [pc, #348]	; (b7080 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c4>)
   b6f22:	a809      	add	r0, sp, #36	; 0x24
   b6f24:	f008 fd17 	bl	bf956 <_ZNK6String6equalsEPKc>
        else if (variable == "all") {
   b6f28:	b140      	cbz	r0, b6f3c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x180>
            snprintf(messaging,sizeof(messaging),"Resetting the gateway's system and current data");
   b6f2a:	4956      	ldr	r1, [pc, #344]	; (b7084 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c8>)
   b6f2c:	a811      	add	r0, sp, #68	; 0x44
   b6f2e:	f00a f91c 	bl	c116a <strcpy>
            sysStatus.loadSystemDefaults();                     // All will reset system values as well
   b6f32:	f7ff fa5b 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6f36:	f7ff fdaf 	bl	b6a98 <_ZN13sysStatusData18loadSystemDefaultsEv>
   b6f3a:	e7d5      	b.n	b6ee8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12c>
        else snprintf(messaging,sizeof(messaging),"Resetting the gateway's current data");
   b6f3c:	4952      	ldr	r1, [pc, #328]	; (b7088 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2cc>)
   b6f3e:	a811      	add	r0, sp, #68	; 0x44
   b6f40:	f00a f913 	bl	c116a <strcpy>
   b6f44:	e7d0      	b.n	b6ee8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12c>
   b6f46:	494e      	ldr	r1, [pc, #312]	; (b7080 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c4>)
   b6f48:	a809      	add	r0, sp, #36	; 0x24
   b6f4a:	f008 fd04 	bl	bf956 <_ZNK6String6equalsEPKc>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's system and current data", nodeNumber);
   b6f4e:	9b04      	ldr	r3, [sp, #16]
        if (variable == "all") {
   b6f50:	b158      	cbz	r0, b6f6a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1ae>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's system and current data", nodeNumber);
   b6f52:	4a4e      	ldr	r2, [pc, #312]	; (b708c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d0>)
   b6f54:	2140      	movs	r1, #64	; 0x40
   b6f56:	a811      	add	r0, sp, #68	; 0x44
   b6f58:	f006 f892 	bl	bd080 <snprintf>
          LoRA_Functions::instance().changeAlert(nodeNumber,5);    // Alertcode 5 will reset all data on the node
   b6f5c:	f7fd f922 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b6f60:	2205      	movs	r2, #5
        else LoRA_Functions::instance().changeAlert(nodeNumber,7);         // Forces the node to update its sensor Type (on Join, node sets the Gateway)
   b6f62:	9904      	ldr	r1, [sp, #16]
   b6f64:	f7fd ff6c 	bl	b4e40 <_ZN14LoRA_Functions11changeAlertEii>
   b6f68:	e7c2      	b.n	b6ef0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's current data", nodeNumber);
   b6f6a:	4a49      	ldr	r2, [pc, #292]	; (b7090 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d4>)
   b6f6c:	2140      	movs	r1, #64	; 0x40
   b6f6e:	a811      	add	r0, sp, #68	; 0x44
   b6f70:	f006 f886 	bl	bd080 <snprintf>
          LoRA_Functions::instance().changeAlert(nodeNumber,6);                    // Alertcode 6 will only reset all the current data on the node
   b6f74:	f7fd f916 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b6f78:	2206      	movs	r2, #6
   b6f7a:	e7f2      	b.n	b6f62 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1a6>
   b6f7c:	4945      	ldr	r1, [pc, #276]	; (b7094 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d8>)
   b6f7e:	a80d      	add	r0, sp, #52	; 0x34
   b6f80:	f008 fce9 	bl	bf956 <_ZNK6String6equalsEPKc>
    else if (function == "freq") {   
   b6f84:	b300      	cbz	r0, b6fc8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x20c>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6f86:	9809      	ldr	r0, [sp, #36]	; 0x24
   b6f88:	220a      	movs	r2, #10
   b6f8a:	a905      	add	r1, sp, #20
   b6f8c:	f00b f884 	bl	c2098 <strtol>
      if ((tempValue > 0) && (tempValue <= 60) && 60 % tempValue == 0) {
   b6f90:	1e43      	subs	r3, r0, #1
   b6f92:	2b3b      	cmp	r3, #59	; 0x3b
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6f94:	4606      	mov	r6, r0
      if ((tempValue > 0) && (tempValue <= 60) && 60 % tempValue == 0) {
   b6f96:	d811      	bhi.n	b6fbc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x200>
   b6f98:	233c      	movs	r3, #60	; 0x3c
   b6f9a:	fb93 f3f0 	sdiv	r3, r3, r0
   b6f9e:	4343      	muls	r3, r0
   b6fa0:	2b3c      	cmp	r3, #60	; 0x3c
   b6fa2:	d10b      	bne.n	b6fbc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x200>
        snprintf(messaging,sizeof(messaging),"Setting reporting frequency to %d minutes", tempValue);
   b6fa4:	4603      	mov	r3, r0
   b6fa6:	4a3c      	ldr	r2, [pc, #240]	; (b7098 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2dc>)
   b6fa8:	2140      	movs	r1, #64	; 0x40
   b6faa:	a811      	add	r0, sp, #68	; 0x44
   b6fac:	f006 f868 	bl	bd080 <snprintf>
        sysStatus.set_updatedFrequencyMinutes(tempValue);
   b6fb0:	f7ff fa1c 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6fb4:	b2b1      	uxth	r1, r6
   b6fb6:	f7ff fc79 	bl	b68ac <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
   b6fba:	e799      	b.n	b6ef0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
        snprintf(messaging,sizeof(messaging),"Not a valid reporting frequency");
   b6fbc:	4937      	ldr	r1, [pc, #220]	; (b709c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e0>)
   b6fbe:	a811      	add	r0, sp, #68	; 0x44
   b6fc0:	f00a f8d3 	bl	c116a <strcpy>
        success = false;                                                       // Make sure it falls in a valid range or send a "fail" result
   b6fc4:	2400      	movs	r4, #0
   b6fc6:	e793      	b.n	b6ef0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
   b6fc8:	4935      	ldr	r1, [pc, #212]	; (b70a0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e4>)
   b6fca:	a80d      	add	r0, sp, #52	; 0x34
   b6fcc:	f008 fcc3 	bl	bf956 <_ZNK6String6equalsEPKc>
    else if (function == "stay") {
   b6fd0:	b1b8      	cbz	r0, b7002 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x246>
   b6fd2:	4934      	ldr	r1, [pc, #208]	; (b70a4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e8>)
   b6fd4:	a809      	add	r0, sp, #36	; 0x24
   b6fd6:	f008 fcbe 	bl	bf956 <_ZNK6String6equalsEPKc>
      if (variable == "true") {
   b6fda:	4606      	mov	r6, r0
   b6fdc:	b148      	cbz	r0, b6ff2 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x236>
        snprintf(messaging,sizeof(messaging),"Going to keep Gateway on Particle and LoRA networks");
   b6fde:	4932      	ldr	r1, [pc, #200]	; (b70a8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ec>)
   b6fe0:	a811      	add	r0, sp, #68	; 0x44
   b6fe2:	f00a f8c2 	bl	c116a <strcpy>
        sysStatus.set_stayConnected(1);
   b6fe6:	f7ff fa01 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6fea:	2101      	movs	r1, #1
        sysStatus.set_stayConnected(0);
   b6fec:	f7ff fba4 	bl	b6738 <_ZN13sysStatusData17set_stayConnectedEh>
   b6ff0:	e77e      	b.n	b6ef0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
        snprintf(messaging,sizeof(messaging),"Going back to normal connectivity");
   b6ff2:	492e      	ldr	r1, [pc, #184]	; (b70ac <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f0>)
   b6ff4:	a811      	add	r0, sp, #68	; 0x44
   b6ff6:	f00a f8b8 	bl	c116a <strcpy>
        sysStatus.set_stayConnected(0);
   b6ffa:	f7ff f9f7 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b6ffe:	4631      	mov	r1, r6
   b7000:	e7f4      	b.n	b6fec <_ZN18Particle_Functions18jsonFunctionParserE6String+0x230>
   b7002:	492b      	ldr	r1, [pc, #172]	; (b70b0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f4>)
   b7004:	a80d      	add	r0, sp, #52	; 0x34
   b7006:	f008 fca6 	bl	bf956 <_ZNK6String6equalsEPKc>
    else if (function == "rpt") {
   b700a:	b148      	cbz	r0, b7020 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x264>
      snprintf(messaging,sizeof(messaging),"Printing nodeID Data");
   b700c:	4929      	ldr	r1, [pc, #164]	; (b70b4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f8>)
   b700e:	a811      	add	r0, sp, #68	; 0x44
   b7010:	f00a f8ab 	bl	c116a <strcpy>
      LoRA_Functions::instance().printNodeData(true);
   b7014:	f7fd f8c6 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b7018:	2101      	movs	r1, #1
   b701a:	f7fd fbfd 	bl	b4818 <_ZN14LoRA_Functions13printNodeDataEb>
   b701e:	e767      	b.n	b6ef0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
   b7020:	4925      	ldr	r1, [pc, #148]	; (b70b8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2fc>)
   b7022:	a80d      	add	r0, sp, #52	; 0x34
   b7024:	f008 fc97 	bl	bf956 <_ZNK6String6equalsEPKc>
    else if (function == "open") {
   b7028:	2800      	cmp	r0, #0
   b702a:	d04f      	beq.n	b70cc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x310>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b702c:	9809      	ldr	r0, [sp, #36]	; 0x24
   b702e:	220a      	movs	r2, #10
   b7030:	a905      	add	r1, sp, #20
   b7032:	f00b f831 	bl	c2098 <strtol>
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b7036:	280c      	cmp	r0, #12
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7038:	4606      	mov	r6, r0
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b703a:	d80b      	bhi.n	b7054 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x298>
        snprintf(messaging,sizeof(messaging),"Setting opening hour to %d:00", tempValue);
   b703c:	4603      	mov	r3, r0
   b703e:	4a1f      	ldr	r2, [pc, #124]	; (b70bc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x300>)
   b7040:	2140      	movs	r1, #64	; 0x40
   b7042:	a811      	add	r0, sp, #68	; 0x44
   b7044:	f006 f81c 	bl	bd080 <snprintf>
        sysStatus.set_openTime(tempValue);
   b7048:	f7ff f9d0 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b704c:	b2f1      	uxtb	r1, r6
   b704e:	f7ff fb8b 	bl	b6768 <_ZN13sysStatusData12set_openTimeEh>
   b7052:	e74d      	b.n	b6ef0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
        snprintf(messaging,sizeof(messaging),"Open hour - must be 0-12");
   b7054:	491a      	ldr	r1, [pc, #104]	; (b70c0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x304>)
   b7056:	e7b2      	b.n	b6fbe <_ZN18Particle_Functions18jsonFunctionParserE6String+0x202>
   b7058:	000c4fe0 	.word	0x000c4fe0
   b705c:	000c4364 	.word	0x000c4364
   b7060:	2003e658 	.word	0x2003e658
   b7064:	000c3f93 	.word	0x000c3f93
   b7068:	2003e494 	.word	0x2003e494
   b706c:	000c3fb1 	.word	0x000c3fb1
   b7070:	000c365c 	.word	0x000c365c
   b7074:	000c3fbc 	.word	0x000c3fbc
   b7078:	000c36bd 	.word	0x000c36bd
   b707c:	000c3fc2 	.word	0x000c3fc2
   b7080:	000c3fe4 	.word	0x000c3fe4
   b7084:	000c3fe8 	.word	0x000c3fe8
   b7088:	000c4018 	.word	0x000c4018
   b708c:	000c403d 	.word	0x000c403d
   b7090:	000c4069 	.word	0x000c4069
   b7094:	000c408a 	.word	0x000c408a
   b7098:	000c408f 	.word	0x000c408f
   b709c:	000c40b9 	.word	0x000c40b9
   b70a0:	000c40d9 	.word	0x000c40d9
   b70a4:	000c40de 	.word	0x000c40de
   b70a8:	000c40e3 	.word	0x000c40e3
   b70ac:	000c4117 	.word	0x000c4117
   b70b0:	000c4139 	.word	0x000c4139
   b70b4:	000c413d 	.word	0x000c413d
   b70b8:	000c3ce8 	.word	0x000c3ce8
   b70bc:	000c4152 	.word	0x000c4152
   b70c0:	000c4170 	.word	0x000c4170
   b70c4:	000c3fb5 	.word	0x000c3fb5
   b70c8:	000c3fb9 	.word	0x000c3fb9
   b70cc:	4931      	ldr	r1, [pc, #196]	; (b7194 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3d8>)
   b70ce:	a80d      	add	r0, sp, #52	; 0x34
   b70d0:	f008 fc41 	bl	bf956 <_ZNK6String6equalsEPKc>
    else if (function == "close") {
   b70d4:	b1b8      	cbz	r0, b7106 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x34a>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b70d6:	9809      	ldr	r0, [sp, #36]	; 0x24
   b70d8:	220a      	movs	r2, #10
   b70da:	a905      	add	r1, sp, #20
   b70dc:	f00a ffdc 	bl	c2098 <strtol>
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b70e0:	f1a0 030d 	sub.w	r3, r0, #13
   b70e4:	2b0b      	cmp	r3, #11
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b70e6:	4606      	mov	r6, r0
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b70e8:	d80b      	bhi.n	b7102 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x346>
        snprintf(messaging,sizeof(messaging),"Setting closing hour to %d:00", tempValue);
   b70ea:	4603      	mov	r3, r0
   b70ec:	4a2a      	ldr	r2, [pc, #168]	; (b7198 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3dc>)
   b70ee:	2140      	movs	r1, #64	; 0x40
   b70f0:	a811      	add	r0, sp, #68	; 0x44
   b70f2:	f005 ffc5 	bl	bd080 <snprintf>
        sysStatus.set_closeTime(tempValue);
   b70f6:	f7ff f979 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b70fa:	b2f1      	uxtb	r1, r6
   b70fc:	f7ff fb3a 	bl	b6774 <_ZN13sysStatusData13set_closeTimeEh>
   b7100:	e6f6      	b.n	b6ef0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
        snprintf(messaging,sizeof(messaging),"Close hour - must be 13-24");
   b7102:	4926      	ldr	r1, [pc, #152]	; (b719c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3e0>)
   b7104:	e75b      	b.n	b6fbe <_ZN18Particle_Functions18jsonFunctionParserE6String+0x202>
   b7106:	4926      	ldr	r1, [pc, #152]	; (b71a0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3e4>)
   b7108:	a80d      	add	r0, sp, #52	; 0x34
   b710a:	f008 fc24 	bl	bf956 <_ZNK6String6equalsEPKc>
    else if (function == "type") {
   b710e:	b1e0      	cbz	r0, b714a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x38e>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7110:	9809      	ldr	r0, [sp, #36]	; 0x24
   b7112:	220a      	movs	r2, #10
   b7114:	a905      	add	r1, sp, #20
   b7116:	f00a ffbf 	bl	c2098 <strtol>
      if ((tempValue >= 0 ) && (tempValue <= 2)) {
   b711a:	2802      	cmp	r0, #2
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b711c:	4606      	mov	r6, r0
      if ((tempValue >= 0 ) && (tempValue <= 2)) {
   b711e:	d812      	bhi.n	b7146 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x38a>
        snprintf(messaging,sizeof(messaging),"Setting sensor type to %d for node %d", tempValue, nodeNumber);
   b7120:	9b04      	ldr	r3, [sp, #16]
   b7122:	4a20      	ldr	r2, [pc, #128]	; (b71a4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3e8>)
   b7124:	9300      	str	r3, [sp, #0]
   b7126:	2140      	movs	r1, #64	; 0x40
   b7128:	4603      	mov	r3, r0
   b712a:	a811      	add	r0, sp, #68	; 0x44
   b712c:	f005 ffa8 	bl	bd080 <snprintf>
        if (!LoRA_Functions::instance().changeType(nodeNumber,tempValue)) success = false;  // Make a new entry in the nodeID database
   b7130:	f7fd f838 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b7134:	9904      	ldr	r1, [sp, #16]
   b7136:	4632      	mov	r2, r6
   b7138:	f7fd fdaa 	bl	b4c90 <_ZN14LoRA_Functions10changeTypeEii>
   b713c:	b338      	cbz	r0, b718e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3d2>
        else LoRA_Functions::instance().changeAlert(nodeNumber,7);         // Forces the node to update its sensor Type (on Join, node sets the Gateway)
   b713e:	f7fd f831 	bl	b41a4 <_ZN14LoRA_Functions8instanceEv>
   b7142:	2207      	movs	r2, #7
   b7144:	e70d      	b.n	b6f62 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1a6>
        snprintf(messaging,sizeof(messaging),"Sensor Type  - must be 0-2");
   b7146:	4918      	ldr	r1, [pc, #96]	; (b71a8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3ec>)
   b7148:	e739      	b.n	b6fbe <_ZN18Particle_Functions18jsonFunctionParserE6String+0x202>
   b714a:	4918      	ldr	r1, [pc, #96]	; (b71ac <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3f0>)
   b714c:	a80d      	add	r0, sp, #52	; 0x34
   b714e:	f008 fc02 	bl	bf956 <_ZNK6String6equalsEPKc>
    else if (function == "sim") {
   b7152:	b1d0      	cbz	r0, b718a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3ce>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7154:	9809      	ldr	r0, [sp, #36]	; 0x24
   b7156:	220a      	movs	r2, #10
   b7158:	a905      	add	r1, sp, #20
   b715a:	f00a ff9d 	bl	c2098 <strtol>
      if ((tempValue >= 0 ) && (tempValue <= 1)) {
   b715e:	2801      	cmp	r0, #1
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7160:	4606      	mov	r6, r0
      if ((tempValue >= 0 ) && (tempValue <= 1)) {
   b7162:	d810      	bhi.n	b7186 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3ca>
        snprintf(messaging,sizeof(messaging),"Setting SIM to %s", (tempValue == 0)? "Particle":"Verizon");
   b7164:	4a12      	ldr	r2, [pc, #72]	; (b71b0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3f4>)
   b7166:	4b13      	ldr	r3, [pc, #76]	; (b71b4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3f8>)
   b7168:	2140      	movs	r1, #64	; 0x40
   b716a:	2800      	cmp	r0, #0
   b716c:	bf08      	it	eq
   b716e:	4613      	moveq	r3, r2
   b7170:	4a11      	ldr	r2, [pc, #68]	; (b71b8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3fc>)
   b7172:	a811      	add	r0, sp, #68	; 0x44
   b7174:	f005 ff84 	bl	bd080 <snprintf>
        sysStatus.set_verizonSIM(tempValue);
   b7178:	f7ff f938 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b717c:	f006 0101 	and.w	r1, r6, #1
   b7180:	f7ff fc83 	bl	b6a8a <_ZN13sysStatusData14set_verizonSIMEb>
   b7184:	e6b4      	b.n	b6ef0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
        snprintf(messaging,sizeof(messaging),"SIM Type  - must be 0 (Particle) or 1 (Verizon)");
   b7186:	490d      	ldr	r1, [pc, #52]	; (b71bc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x400>)
   b7188:	e719      	b.n	b6fbe <_ZN18Particle_Functions18jsonFunctionParserE6String+0x202>
      snprintf(messaging,sizeof(messaging),"Not a valid command");
   b718a:	490d      	ldr	r1, [pc, #52]	; (b71c0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x404>)
   b718c:	e717      	b.n	b6fbe <_ZN18Particle_Functions18jsonFunctionParserE6String+0x202>
        if (!LoRA_Functions::instance().changeType(nodeNumber,tempValue)) success = false;  // Make a new entry in the nodeID database
   b718e:	4604      	mov	r4, r0
   b7190:	e6ae      	b.n	b6ef0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
   b7192:	bf00      	nop
   b7194:	000c4189 	.word	0x000c4189
   b7198:	000c418f 	.word	0x000c418f
   b719c:	000c41ad 	.word	0x000c41ad
   b71a0:	000c3544 	.word	0x000c3544
   b71a4:	000c41c8 	.word	0x000c41c8
   b71a8:	000c41ee 	.word	0x000c41ee
   b71ac:	000c4209 	.word	0x000c4209
   b71b0:	000c42a6 	.word	0x000c42a6
   b71b4:	000c3f8b 	.word	0x000c3f8b
   b71b8:	000c420d 	.word	0x000c420d
   b71bc:	000c421f 	.word	0x000c421f
   b71c0:	000c424f 	.word	0x000c424f

000b71c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b71c4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b71c6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b71ca:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b71cc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b71ce:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b71d2:	42ae      	cmp	r6, r5
   b71d4:	d004      	beq.n	b71e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b71d6:	4628      	mov	r0, r5
   b71d8:	f008 faac 	bl	bf734 <_ZN6StringD1Ev>
   b71dc:	3514      	adds	r5, #20
   b71de:	e7f8      	b.n	b71d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b71e0:	6820      	ldr	r0, [r4, #0]
   b71e2:	f005 ff2d 	bl	bd040 <free>
    AllocatorT::free(data_);
}
   b71e6:	4620      	mov	r0, r4
   b71e8:	bd70      	pop	{r4, r5, r6, pc}

000b71ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b71ea:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b71ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b71ee:	4604      	mov	r4, r0
   b71f0:	460d      	mov	r5, r1
   b71f2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b71f4:	d916      	bls.n	b7224 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b71f6:	4290      	cmp	r0, r2
   b71f8:	d215      	bcs.n	b7226 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b71fa:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b71fe:	1a75      	subs	r5, r6, r1
   b7200:	f1a1 0714 	sub.w	r7, r1, #20
   b7204:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7206:	42b7      	cmp	r7, r6
   b7208:	d01c      	beq.n	b7244 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b720a:	b12c      	cbz	r4, b7218 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b720c:	4631      	mov	r1, r6
   b720e:	4620      	mov	r0, r4
   b7210:	f008 fb0c 	bl	bf82c <_ZN6StringC1EOS_>
   b7214:	7c33      	ldrb	r3, [r6, #16]
   b7216:	7423      	strb	r3, [r4, #16]
   b7218:	4630      	mov	r0, r6
   b721a:	f008 fa8b 	bl	bf734 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b721e:	3e14      	subs	r6, #20
   b7220:	3c14      	subs	r4, #20
   b7222:	e7f0      	b.n	b7206 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b7224:	d00e      	beq.n	b7244 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b7226:	42b5      	cmp	r5, r6
   b7228:	d00c      	beq.n	b7244 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b722a:	b12c      	cbz	r4, b7238 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b722c:	4629      	mov	r1, r5
   b722e:	4620      	mov	r0, r4
   b7230:	f008 fafc 	bl	bf82c <_ZN6StringC1EOS_>
   b7234:	7c2b      	ldrb	r3, [r5, #16]
   b7236:	7423      	strb	r3, [r4, #16]
   b7238:	4628      	mov	r0, r5
   b723a:	f008 fa7b 	bl	bf734 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b723e:	3514      	adds	r5, #20
   b7240:	3414      	adds	r4, #20
   b7242:	e7f0      	b.n	b7226 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b7244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7246 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b724a:	2300      	movs	r3, #0
   b724c:	e9c0 3300 	strd	r3, r3, [r0]
   b7250:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7252:	684f      	ldr	r7, [r1, #4]
   b7254:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7256:	4604      	mov	r4, r0
   b7258:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b725a:	dd23      	ble.n	b72a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b725c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b7260:	fb08 f007 	mul.w	r0, r8, r7
   b7264:	f005 fee4 	bl	bd030 <malloc>
            if (!d) {
   b7268:	4605      	mov	r5, r0
   b726a:	b1d8      	cbz	r0, b72a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b726c:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7270:	fb08 1202 	mla	r2, r8, r2, r1
   b7274:	f7ff ffb9 	bl	b71ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b7278:	6820      	ldr	r0, [r4, #0]
   b727a:	f005 fee1 	bl	bd040 <free>
        data_ = d;
   b727e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7280:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7282:	e9d6 7300 	ldrd	r7, r3, [r6]
   b7286:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b728a:	45b8      	cmp	r8, r7
   b728c:	d008      	beq.n	b72a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b728e:	4639      	mov	r1, r7
   b7290:	4628      	mov	r0, r5
   b7292:	f008 fae5 	bl	bf860 <_ZN6StringC1ERKS_>
   b7296:	7c3b      	ldrb	r3, [r7, #16]
   b7298:	742b      	strb	r3, [r5, #16]
   b729a:	3714      	adds	r7, #20
   b729c:	3514      	adds	r5, #20
   b729e:	e7f4      	b.n	b728a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b72a0:	6873      	ldr	r3, [r6, #4]
   b72a2:	6063      	str	r3, [r4, #4]
}
   b72a4:	4620      	mov	r0, r4
   b72a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b72ac <_GLOBAL__sub_I_openTimeStr>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   b72ac:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b72ae:	4b27      	ldr	r3, [pc, #156]	; (b734c <_GLOBAL__sub_I_openTimeStr+0xa0>)
    SleepResult() {}
   b72b0:	4a27      	ldr	r2, [pc, #156]	; (b7350 <_GLOBAL__sub_I_openTimeStr+0xa4>)
   b72b2:	2501      	movs	r5, #1
   b72b4:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b72b6:	4b27      	ldr	r3, [pc, #156]	; (b7354 <_GLOBAL__sub_I_openTimeStr+0xa8>)
   b72b8:	2400      	movs	r4, #0
   b72ba:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b72bc:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b72be:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b72c2:	2002      	movs	r0, #2
   b72c4:	f005 fd82 	bl	bcdcc <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b72c8:	4621      	mov	r1, r4
   b72ca:	4628      	mov	r0, r5
   b72cc:	f005 fd96 	bl	bcdfc <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b72d0:	4629      	mov	r1, r5
   b72d2:	2004      	movs	r0, #4
   b72d4:	f005 faee 	bl	bc8b4 <HAL_Feature_Set>
        capacity_(0) {
   b72d8:	e9cd 4400 	strd	r4, r4, [sp]
   b72dc:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b72de:	f008 fec3 	bl	c0068 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b72e2:	4c1d      	ldr	r4, [pc, #116]	; (b7358 <_GLOBAL__sub_I_openTimeStr+0xac>)
   b72e4:	4605      	mov	r5, r0
   b72e6:	4669      	mov	r1, sp
   b72e8:	a803      	add	r0, sp, #12
   b72ea:	f7ff ffac 	bl	b7246 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b72ee:	4626      	mov	r6, r4
        stream_(&stream) {
   b72f0:	a903      	add	r1, sp, #12
   b72f2:	a806      	add	r0, sp, #24
   b72f4:	f7ff ffa7 	bl	b7246 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b72f8:	4b18      	ldr	r3, [pc, #96]	; (b735c <_GLOBAL__sub_I_openTimeStr+0xb0>)
   b72fa:	f846 3b04 	str.w	r3, [r6], #4
   b72fe:	a906      	add	r1, sp, #24
   b7300:	a809      	add	r0, sp, #36	; 0x24
   b7302:	f7ff ffa0 	bl	b7246 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b7306:	aa09      	add	r2, sp, #36	; 0x24
   b7308:	211e      	movs	r1, #30
   b730a:	4630      	mov	r0, r6
   b730c:	f007 fb70 	bl	be9f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7310:	a809      	add	r0, sp, #36	; 0x24
   b7312:	f7ff ff57 	bl	b71c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b7316:	a806      	add	r0, sp, #24
   b7318:	f7ff ff54 	bl	b71c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b731c:	4b10      	ldr	r3, [pc, #64]	; (b7360 <_GLOBAL__sub_I_openTimeStr+0xb4>)
   b731e:	6023      	str	r3, [r4, #0]
   b7320:	6225      	str	r5, [r4, #32]
   b7322:	a803      	add	r0, sp, #12
   b7324:	f7ff ff4e 	bl	b71c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b7328:	4b0e      	ldr	r3, [pc, #56]	; (b7364 <_GLOBAL__sub_I_openTimeStr+0xb8>)
   b732a:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b732c:	f008 fe9c 	bl	c0068 <_Z16_fetch_usbserialv>
   b7330:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b7334:	f008 fe86 	bl	c0044 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b7338:	f007 f870 	bl	be41c <_ZN5spark10LogManager8instanceEv>
   b733c:	4621      	mov	r1, r4
   b733e:	f007 fa2d 	bl	be79c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b7342:	4668      	mov	r0, sp
   b7344:	f7ff ff3e 	bl	b71c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b7348:	b00c      	add	sp, #48	; 0x30
   b734a:	bd70      	pop	{r4, r5, r6, pc}
   b734c:	2003e494 	.word	0x2003e494
   b7350:	ffff0000 	.word	0xffff0000
   b7354:	2003e488 	.word	0x2003e488
   b7358:	2003e49c 	.word	0x2003e49c
   b735c:	000c4334 	.word	0x000c4334
   b7360:	000c5010 	.word	0x000c5010
   b7364:	000c434c 	.word	0x000c434c

000b7368 <_ZN18Particle_Functions22disconnectFromParticleEv>:
{
   b7368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b736c:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b736e:	f008 fd94 	bl	bfe9a <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b7372:	4941      	ldr	r1, [pc, #260]	; (b7478 <_ZN18Particle_Functions22disconnectFromParticleEv+0x110>)
  time_t startTime = Time.now();
   b7374:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b7376:	4841      	ldr	r0, [pc, #260]	; (b747c <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b7378:	f7fc fefb 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b737c:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b737e:	a801      	add	r0, sp, #4
   b7380:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b7384:	f8ad 400c 	strh.w	r4, [sp, #12]
   b7388:	f006 f89e 	bl	bd4c8 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b738c:	4620      	mov	r0, r4
   b738e:	f005 fac1 	bl	bc914 <hal_timer_millis>
        while (_while() && !_condition()) {
   b7392:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b7396:	4604      	mov	r4, r0
   b7398:	2000      	movs	r0, #0
   b739a:	f005 fabb 	bl	bc914 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b739e:	1b03      	subs	r3, r0, r4
   b73a0:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b73a4:	42b3      	cmp	r3, r6
   b73a6:	f171 0300 	sbcs.w	r3, r1, #0
   b73aa:	d205      	bcs.n	b73b8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x50>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b73ac:	f005 fda0 	bl	bcef0 <spark_cloud_flag_connected>
   b73b0:	b110      	cbz	r0, b73b8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x50>
            spark_process();
   b73b2:	f005 fd8d 	bl	bced0 <spark_process>
        while (_while() && !_condition()) {
   b73b6:	e7ef      	b.n	b7398 <_ZN18Particle_Functions22disconnectFromParticleEv+0x30>
   b73b8:	f005 fd9a 	bl	bcef0 <spark_cloud_flag_connected>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b73bc:	f005 fa9a 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b73c0:	4f2f      	ldr	r7, [pc, #188]	; (b7480 <_ZN18Particle_Functions22disconnectFromParticleEv+0x118>)
   b73c2:	6038      	str	r0, [r7, #0]
    		spark_process();
   b73c4:	f005 fd84 	bl	bced0 <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b73c8:	f005 fd92 	bl	bcef0 <spark_cloud_flag_connected>
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b73cc:	4604      	mov	r4, r0
   b73ce:	b140      	cbz	r0, b73e2 <_ZN18Particle_Functions22disconnectFromParticleEv+0x7a>
    Log.info("Failed to disconnect from Particle");
   b73d0:	492c      	ldr	r1, [pc, #176]	; (b7484 <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b73d2:	482a      	ldr	r0, [pc, #168]	; (b747c <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b73d4:	f7fc fecd 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b73d8:	2400      	movs	r4, #0
   b73da:	4620      	mov	r0, r4
   b73dc:	b005      	add	sp, #20
   b73de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b73e2:	f008 fd5a 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b73e6:	4928      	ldr	r1, [pc, #160]	; (b7488 <_ZN18Particle_Functions22disconnectFromParticleEv+0x120>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b73e8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; b748c <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>
   b73ec:	1b42      	subs	r2, r0, r5
   b73ee:	4823      	ldr	r0, [pc, #140]	; (b747c <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b73f0:	f7fc febf 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b73f4:	f008 fd51 	bl	bfe9a <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b73f8:	4622      	mov	r2, r4
   b73fa:	2102      	movs	r1, #2
   b73fc:	4606      	mov	r6, r0
   b73fe:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b7402:	f005 fdc5 	bl	bcf90 <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b7406:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b740a:	4623      	mov	r3, r4
   b740c:	4622      	mov	r2, r4
   b740e:	4621      	mov	r1, r4
   b7410:	f005 fdd6 	bl	bcfc0 <network_off>
        return hal_timer_millis(nullptr);
   b7414:	4620      	mov	r0, r4
   b7416:	f005 fa7d 	bl	bc914 <hal_timer_millis>
        while (_while() && !_condition()) {
   b741a:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b741e:	4605      	mov	r5, r0
   b7420:	2000      	movs	r0, #0
   b7422:	f005 fa77 	bl	bc914 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b7426:	1b43      	subs	r3, r0, r5
   b7428:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b742c:	454b      	cmp	r3, r9
   b742e:	f171 0300 	sbcs.w	r3, r1, #0
   b7432:	d206      	bcs.n	b7442 <_ZN18Particle_Functions22disconnectFromParticleEv+0xda>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b7434:	4640      	mov	r0, r8
   b7436:	f007 fdf9 	bl	bf02c <_ZN5spark12NetworkClass5isOffEv>
   b743a:	b910      	cbnz	r0, b7442 <_ZN18Particle_Functions22disconnectFromParticleEv+0xda>
            spark_process();
   b743c:	f005 fd48 	bl	bced0 <spark_process>
        while (_while() && !_condition()) {
   b7440:	e7ee      	b.n	b7420 <_ZN18Particle_Functions22disconnectFromParticleEv+0xb8>
   b7442:	4812      	ldr	r0, [pc, #72]	; (b748c <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b7444:	f007 fdf2 	bl	bf02c <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b7448:	f005 fa54 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b744c:	6038      	str	r0, [r7, #0]
    		spark_process();
   b744e:	f005 fd3f 	bl	bced0 <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b7452:	480e      	ldr	r0, [pc, #56]	; (b748c <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b7454:	f007 fde6 	bl	bf024 <_ZN5spark12NetworkClass4isOnEv>
   b7458:	b120      	cbz	r0, b7464 <_ZN18Particle_Functions22disconnectFromParticleEv+0xfc>
    Log.info("Failed to turn off the Cellular modem");
   b745a:	490d      	ldr	r1, [pc, #52]	; (b7490 <_ZN18Particle_Functions22disconnectFromParticleEv+0x128>)
   b745c:	4807      	ldr	r0, [pc, #28]	; (b747c <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b745e:	f7fc fe88 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b7462:	e7ba      	b.n	b73da <_ZN18Particle_Functions22disconnectFromParticleEv+0x72>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b7464:	f008 fd19 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b7468:	490a      	ldr	r1, [pc, #40]	; (b7494 <_ZN18Particle_Functions22disconnectFromParticleEv+0x12c>)
   b746a:	1b82      	subs	r2, r0, r6
   b746c:	4803      	ldr	r0, [pc, #12]	; (b747c <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b746e:	f7fc fe80 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b7472:	2401      	movs	r4, #1
   b7474:	e7b1      	b.n	b73da <_ZN18Particle_Functions22disconnectFromParticleEv+0x72>
   b7476:	bf00      	nop
   b7478:	000c4263 	.word	0x000c4263
   b747c:	2003e658 	.word	0x2003e658
   b7480:	2003e710 	.word	0x2003e710
   b7484:	000c428c 	.word	0x000c428c
   b7488:	000c42af 	.word	0x000c42af
   b748c:	2003e614 	.word	0x2003e614
   b7490:	000c42d8 	.word	0x000c42d8
   b7494:	000c42fe 	.word	0x000c42fe

000b7498 <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b7498:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b749a:	4917      	ldr	r1, [pc, #92]	; (b74f8 <_Z18initializePinModesv+0x60>)
   b749c:	4817      	ldr	r0, [pc, #92]	; (b74fc <_Z18initializePinModesv+0x64>)
   b749e:	f7fc fe68 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b74a2:	2102      	movs	r1, #2
   b74a4:	2004      	movs	r0, #4
   b74a6:	f008 fef7 	bl	c0298 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b74aa:	2100      	movs	r1, #0
   b74ac:	2008      	movs	r0, #8
   b74ae:	f008 fef3 	bl	c0298 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b74b2:	2101      	movs	r1, #1
   b74b4:	2007      	movs	r0, #7
   b74b6:	f008 feef 	bl	c0298 <pinMode>
    pinMode(INT_PIN, INPUT);
   b74ba:	2100      	movs	r1, #0
   b74bc:	2012      	movs	r0, #18
   b74be:	f008 feeb 	bl	c0298 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b74c2:	2101      	movs	r1, #1
   b74c4:	2011      	movs	r0, #17
   b74c6:	f008 fee7 	bl	c0298 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b74ca:	2101      	movs	r1, #1
   b74cc:	2010      	movs	r0, #16
   b74ce:	f008 fee3 	bl	c0298 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b74d2:	2100      	movs	r1, #0
   b74d4:	2010      	movs	r0, #16
   b74d6:	f008 fef0 	bl	c02ba <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b74da:	2100      	movs	r1, #0
   b74dc:	2011      	movs	r0, #17
   b74de:	f008 feec 	bl	c02ba <digitalWrite>
    pinMode(RFM95_RST,OUTPUT);
   b74e2:	2101      	movs	r1, #1
   b74e4:	2006      	movs	r0, #6
   b74e6:	f008 fed7 	bl	c0298 <pinMode>
    digitalWrite(RFM95_RST,HIGH);
   b74ea:	2101      	movs	r1, #1
   b74ec:	2006      	movs	r0, #6
   b74ee:	f008 fee4 	bl	c02ba <digitalWrite>
    return true;
}
   b74f2:	2001      	movs	r0, #1
   b74f4:	bd08      	pop	{r3, pc}
   b74f6:	bf00      	nop
   b74f8:	000c437c 	.word	0x000c437c
   b74fc:	2003e658 	.word	0x2003e658

000b7500 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b7500:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b7502:	4918      	ldr	r1, [pc, #96]	; (b7564 <_Z18initializePowerCfgv+0x64>)
   b7504:	4818      	ldr	r0, [pc, #96]	; (b7568 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b7506:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b7508:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b750a:	f7fc fe32 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
   b750e:	4622      	mov	r2, r4
   b7510:	2100      	movs	r1, #0
   b7512:	4668      	mov	r0, sp
   b7514:	f009 fd84 	bl	c1020 <memset>
   b7518:	4622      	mov	r2, r4
   b751a:	2100      	movs	r1, #0
   b751c:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b7520:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b7524:	f009 fd7c 	bl	c1020 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b7528:	2100      	movs	r1, #0
   b752a:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b752e:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b7532:	f005 fca7 	bl	bce84 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b7536:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b753a:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b753e:	4b0b      	ldr	r3, [pc, #44]	; (b756c <_Z18initializePowerCfgv+0x6c>)
   b7540:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b7542:	f241 0370 	movw	r3, #4208	; 0x1070
   b7546:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b754a:	9b00      	ldr	r3, [sp, #0]
   b754c:	2100      	movs	r1, #0
   b754e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b7552:	4668      	mov	r0, sp
   b7554:	9300      	str	r3, [sp, #0]
   b7556:	f005 fc95 	bl	bce84 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b755a:	3800      	subs	r0, #0
   b755c:	bf18      	it	ne
   b755e:	2001      	movne	r0, #1
   b7560:	b010      	add	sp, #64	; 0x40
   b7562:	bd10      	pop	{r4, pc}
   b7564:	000c4395 	.word	0x000c4395
   b7568:	2003e658 	.word	0x2003e658
   b756c:	03840384 	.word	0x03840384

000b7570 <_Z17tmp36TemperatureCi>:

float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b7570:	ee07 0a90 	vmov	s15, r0
   b7574:	ed9f 7a09 	vldr	s14, [pc, #36]	; b759c <_Z17tmp36TemperatureCi+0x2c>
   b7578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b757c:	ee67 7a87 	vmul.f32	s15, s15, s14
   b7580:	ed9f 7a07 	vldr	s14, [pc, #28]	; b75a0 <_Z17tmp36TemperatureCi+0x30>
   b7584:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b7588:	eddf 7a06 	vldr	s15, [pc, #24]	; b75a4 <_Z17tmp36TemperatureCi+0x34>
   b758c:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b7590:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b7594:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b7598:	4770      	bx	lr
   b759a:	bf00      	nop
   b759c:	454e4000 	.word	0x454e4000
   b75a0:	457ff000 	.word	0x457ff000
   b75a4:	43fa0000 	.word	0x43fa0000

000b75a8 <_Z16isItSafeToChargev>:
  else return false;
}


bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b75a8:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b75aa:	2101      	movs	r1, #1
   b75ac:	a801      	add	r0, sp, #4
   b75ae:	f007 fdd2 	bl	bf156 <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b75b2:	f7fe ff53 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b75b6:	f7ff f872 	bl	b669e <_ZNK17currentStatusData17get_internalTempCEv>
   b75ba:	f7fe ff4f 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b75be:	f7ff f86e 	bl	b669e <_ZNK17currentStatusData17get_internalTempCEv>
   b75c2:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b75c4:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b75c6:	d90d      	bls.n	b75e4 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b75c8:	f007 fe58 	bl	bf27c <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b75cc:	f7fe ff46 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b75d0:	2101      	movs	r1, #1
   b75d2:	f7ff f8e7 	bl	b67a4 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b75d6:	2400      	movs	r4, #0
  PMIC pmic(true);
   b75d8:	a801      	add	r0, sp, #4
   b75da:	f007 fdcb 	bl	bf174 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b75de:	4620      	mov	r0, r4
   b75e0:	b002      	add	sp, #8
   b75e2:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b75e4:	f007 fe2f 	bl	bf246 <_ZN4PMIC14enableChargingEv>
    return true;
   b75e8:	2401      	movs	r4, #1
   b75ea:	e7f5      	b.n	b75d8 <_Z16isItSafeToChargev+0x30>

000b75ec <_Z17getSignalStrengthv>:


void getSignalStrength() {
   b75ec:	b530      	push	{r4, r5, lr}
  char signalStr[16];
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b75ee:	4d1b      	ldr	r5, [pc, #108]	; (b765c <_Z17getSignalStrengthv+0x70>)
   b75f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b75f2:	b09b      	sub	sp, #108	; 0x6c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b75f4:	ac10      	add	r4, sp, #64	; 0x40
   b75f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b75f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b75fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b75fc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7600:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b7604:	4916      	ldr	r1, [pc, #88]	; (b7660 <_Z17getSignalStrengthv+0x74>)
   b7606:	a808      	add	r0, sp, #32
   b7608:	f005 fe0c 	bl	bd224 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b760c:	a808      	add	r0, sp, #32
   b760e:	f005 fe4c 	bl	bd2aa <_ZNK14CellularSignal19getAccessTechnologyEv>
   b7612:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b7614:	a808      	add	r0, sp, #32
   b7616:	f005 fe81 	bl	bd31c <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b761a:	a808      	add	r0, sp, #32
  float strengthPercentage = sig.getStrength();
   b761c:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b7620:	f005 feac 	bl	bd37c <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b7624:	ab1a      	add	r3, sp, #104	; 0x68
  float qualityPercentage = sig.getQuality();
   b7626:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b762a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b762e:	f009 f8bf 	bl	c07b0 <__aeabi_f2d>
   b7632:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b7636:	4628      	mov	r0, r5
   b7638:	f009 f8ba 	bl	c07b0 <__aeabi_f2d>
   b763c:	e9cd 0100 	strd	r0, r1, [sp]
   b7640:	2110      	movs	r1, #16
   b7642:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b7646:	4a07      	ldr	r2, [pc, #28]	; (b7664 <_Z17getSignalStrengthv+0x78>)
   b7648:	eb0d 0001 	add.w	r0, sp, r1
   b764c:	f005 fd18 	bl	bd080 <snprintf>
  Log.info(signalStr);
   b7650:	4805      	ldr	r0, [pc, #20]	; (b7668 <_Z17getSignalStrengthv+0x7c>)
   b7652:	a904      	add	r1, sp, #16
   b7654:	f7fc fd8d 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
}
   b7658:	b01b      	add	sp, #108	; 0x6c
   b765a:	bd30      	pop	{r4, r5, pc}
   b765c:	000c443c 	.word	0x000c443c
   b7660:	2003e614 	.word	0x2003e614
   b7664:	000c43fa 	.word	0x000c43fa
   b7668:	2003e658 	.word	0x2003e658

000b766c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b766c:	b530      	push	{r4, r5, lr}
   b766e:	b085      	sub	sp, #20
   b7670:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b7672:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b7674:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b7676:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b7678:	f005 fb96 	bl	bcda8 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b767c:	b990      	cbnz	r0, b76a4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b767e:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b7680:	b10c      	cbz	r4, b7686 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b7682:	6923      	ldr	r3, [r4, #16]
   b7684:	b923      	cbnz	r3, b7690 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b7686:	4a08      	ldr	r2, [pc, #32]	; (b76a8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b7688:	4908      	ldr	r1, [pc, #32]	; (b76ac <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b768a:	200a      	movs	r0, #10
   b768c:	f005 fb5a 	bl	bcd44 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b7690:	230c      	movs	r3, #12
   b7692:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b7696:	2304      	movs	r3, #4
   b7698:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b769a:	aa01      	add	r2, sp, #4
   b769c:	6923      	ldr	r3, [r4, #16]
   b769e:	2101      	movs	r1, #1
   b76a0:	4620      	mov	r0, r4
   b76a2:	4798      	blx	r3
}
   b76a4:	b005      	add	sp, #20
   b76a6:	bd30      	pop	{r4, r5, pc}
   b76a8:	000bc8e5 	.word	0x000bc8e5
   b76ac:	000c4413 	.word	0x000c4413

000b76b0 <_Z12batteryStatev>:
bool batteryState() {
   b76b0:	b513      	push	{r0, r1, r4, lr}
    current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b76b2:	f7fe fed3 	bl	b645c <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b76b6:	a901      	add	r1, sp, #4
   b76b8:	4604      	mov	r4, r0
   b76ba:	2007      	movs	r0, #7
   b76bc:	f7ff ffd6 	bl	b766c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b76c0:	1e01      	subs	r1, r0, #0
        return val;
   b76c2:	bfa8      	it	ge
   b76c4:	9901      	ldrge	r1, [sp, #4]
   b76c6:	4620      	mov	r0, r4
   b76c8:	b2c9      	uxtb	r1, r1
   b76ca:	f7ff f86b 	bl	b67a4 <_ZN17currentStatusData16set_batteryStateEh>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b76ce:	4818      	ldr	r0, [pc, #96]	; (b7730 <_Z12batteryStatev+0x80>)
   b76d0:	f006 f9f4 	bl	bdabc <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b76d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b76d8:	f005 fd2a 	bl	bd130 <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b76dc:	f7fe febe 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b76e0:	a901      	add	r1, sp, #4
   b76e2:	4604      	mov	r4, r0
   b76e4:	2003      	movs	r0, #3
   b76e6:	f7ff ffc1 	bl	b766c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b76ea:	b9e8      	cbnz	r0, b7728 <_Z12batteryStatev+0x78>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b76ec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b76f0:	ee07 3a90 	vmov	s15, r3
   b76f4:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b76f8:	ee17 0a90 	vmov	r0, s15
   b76fc:	f009 f858 	bl	c07b0 <__aeabi_f2d>
   b7700:	ec41 0b10 	vmov	d0, r0, r1
   b7704:	4620      	mov	r0, r4
   b7706:	f7fe feef 	bl	b64e8 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b770a:	f7fe fea7 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b770e:	f7fe fecb 	bl	b64a8 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b7712:	4b08      	ldr	r3, [pc, #32]	; (b7734 <_Z12batteryStatev+0x84>)
   b7714:	ec51 0b10 	vmov	r0, r1, d0
   b7718:	2200      	movs	r2, #0
   b771a:	f009 fb31 	bl	c0d80 <__aeabi_dcmpgt>
}
   b771e:	3800      	subs	r0, #0
   b7720:	bf18      	it	ne
   b7722:	2001      	movne	r0, #1
   b7724:	b002      	add	sp, #8
   b7726:	bd10      	pop	{r4, pc}
            return -1.0f;
   b7728:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b772c:	e7e4      	b.n	b76f8 <_Z12batteryStatev+0x48>
   b772e:	bf00      	nop
   b7730:	2003e4c0 	.word	0x2003e4c0
   b7734:	404e0000 	.word	0x404e0000

000b7738 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b7738:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b773a:	f7fe fe8f 	bl	b645c <_ZN17currentStatusData8instanceEv>
   b773e:	4b0f      	ldr	r3, [pc, #60]	; (b777c <_Z16takeMeasurementsv+0x44>)
   b7740:	4604      	mov	r4, r0
   b7742:	8818      	ldrh	r0, [r3, #0]
   b7744:	f008 fde5 	bl	c0312 <analogRead>
   b7748:	f7ff ff12 	bl	b7570 <_Z17tmp36TemperatureCi>
   b774c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b7750:	4620      	mov	r0, r4
   b7752:	edcd 7a01 	vstr	s15, [sp, #4]
   b7756:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b775a:	f7ff f81d 	bl	b6798 <_ZN17currentStatusData17set_internalTempCEh>
    batteryState();
   b775e:	f7ff ffa7 	bl	b76b0 <_Z12batteryStatev>
    isItSafeToCharge();
   b7762:	f7ff ff21 	bl	b75a8 <_Z16isItSafeToChargev>
    if (sysStatus.get_nodeNumber() == 0 ) getSignalStrength();
   b7766:	f7fe fe41 	bl	b63ec <_ZN13sysStatusData8instanceEv>
   b776a:	f7fe ff6b 	bl	b6644 <_ZNK13sysStatusData14get_nodeNumberEv>
   b776e:	b908      	cbnz	r0, b7774 <_Z16takeMeasurementsv+0x3c>
   b7770:	f7ff ff3c 	bl	b75ec <_Z17getSignalStrengthv>
}
   b7774:	2001      	movs	r0, #1
   b7776:	b002      	add	sp, #8
   b7778:	bd10      	pop	{r4, pc}
   b777a:	bf00      	nop
   b777c:	000c43ba 	.word	0x000c43ba

000b7780 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b7780:	4801      	ldr	r0, [pc, #4]	; (b7788 <_GLOBAL__sub_I_batteryContext+0x8>)
   b7782:	2100      	movs	r1, #0
   b7784:	f006 b956 	b.w	bda34 <_ZN9FuelGaugeC1Eb>
   b7788:	2003e4c0 	.word	0x2003e4c0

000b778c <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b778c:	4770      	bx	lr

000b778e <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b778e:	b510      	push	{r4, lr}
}
   b7790:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b7792:	4604      	mov	r4, r0
}
   b7794:	f7fc fc83 	bl	b409e <_ZdlPvj>
   b7798:	4620      	mov	r0, r4
   b779a:	bd10      	pop	{r4, pc}

000b779c <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b779c:	b510      	push	{r4, lr}
   b779e:	4604      	mov	r4, r0
   b77a0:	b08a      	sub	sp, #40	; 0x28
   b77a2:	4608      	mov	r0, r1
    attr.flags = 0;
   b77a4:	f04f 0c20 	mov.w	ip, #32
   b77a8:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b77aa:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b77ae:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b77b2:	460b      	mov	r3, r1
   b77b4:	aa02      	add	r2, sp, #8
   b77b6:	6821      	ldr	r1, [r4, #0]
   b77b8:	f005 fad4 	bl	bcd64 <log_message_v>
}
   b77bc:	b00a      	add	sp, #40	; 0x28
   b77be:	bd10      	pop	{r4, pc}

000b77c0 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b77c0:	b40e      	push	{r1, r2, r3}
   b77c2:	b503      	push	{r0, r1, lr}
   b77c4:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b77c6:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b77c8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b77cc:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b77ce:	f7ff ffe5 	bl	b779c <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b77d2:	b002      	add	sp, #8
   b77d4:	f85d eb04 	ldr.w	lr, [sp], #4
   b77d8:	b003      	add	sp, #12
   b77da:	4770      	bx	lr

000b77dc <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b77dc:	b40e      	push	{r1, r2, r3}
   b77de:	b503      	push	{r0, r1, lr}
   b77e0:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b77e2:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b77e4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b77e8:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b77ea:	f7ff ffd7 	bl	b779c <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b77ee:	b002      	add	sp, #8
   b77f0:	f85d eb04 	ldr.w	lr, [sp], #4
   b77f4:	b003      	add	sp, #12
   b77f6:	4770      	bx	lr

000b77f8 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b77f8:	b510      	push	{r4, lr}
   b77fa:	7202      	strb	r2, [r0, #8]
   b77fc:	22ff      	movs	r2, #255	; 0xff
   b77fe:	8142      	strh	r2, [r0, #10]
   b7800:	2200      	movs	r2, #0
   b7802:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b7806:	6142      	str	r2, [r0, #20]
   b7808:	7602      	strb	r2, [r0, #24]
   b780a:	61c2      	str	r2, [r0, #28]
    instance = this;
   b780c:	4a02      	ldr	r2, [pc, #8]	; (b7818 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b780e:	4c03      	ldr	r4, [pc, #12]	; (b781c <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b7810:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b7812:	e9c0 4100 	strd	r4, r1, [r0]
}
   b7816:	bd10      	pop	{r4, pc}
   b7818:	2003e4cc 	.word	0x2003e4cc
   b781c:	000c46b4 	.word	0x000c46b4

000b7820 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b7820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7824:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b7828:	4604      	mov	r4, r0
   b782a:	4689      	mov	r9, r1
   b782c:	4616      	mov	r6, r2
   b782e:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b7830:	f1b8 0f00 	cmp.w	r8, #0
   b7834:	d002      	beq.n	b783c <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b7836:	6840      	ldr	r0, [r0, #4]
   b7838:	f006 f9e6 	bl	bdc08 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b783c:	7a21      	ldrb	r1, [r4, #8]
   b783e:	6860      	ldr	r0, [r4, #4]
   b7840:	f006 f9bf 	bl	bdbc2 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b7844:	6860      	ldr	r0, [r4, #4]
   b7846:	6803      	ldr	r3, [r0, #0]
   b7848:	4649      	mov	r1, r9
   b784a:	689b      	ldr	r3, [r3, #8]
   b784c:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b784e:	6860      	ldr	r0, [r4, #4]
   b7850:	2100      	movs	r1, #0
   b7852:	f006 f9d5 	bl	bdc00 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b7856:	4605      	mov	r5, r0
   b7858:	bb00      	cbnz	r0, b789c <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b785a:	2301      	movs	r3, #1
   b785c:	7a21      	ldrb	r1, [r4, #8]
   b785e:	6860      	ldr	r0, [r4, #4]
   b7860:	463a      	mov	r2, r7
   b7862:	f006 f99c 	bl	bdb9e <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b7866:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b7868:	4603      	mov	r3, r0
        if (count == num) {
   b786a:	d109      	bne.n	b7880 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b786c:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b786e:	42be      	cmp	r6, r7
   b7870:	d01c      	beq.n	b78ac <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b7872:	6860      	ldr	r0, [r4, #4]
   b7874:	6803      	ldr	r3, [r0, #0]
   b7876:	695b      	ldr	r3, [r3, #20]
   b7878:	4798      	blx	r3
   b787a:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b787e:	e7f6      	b.n	b786e <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b7880:	490b      	ldr	r1, [pc, #44]	; (b78b0 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b7882:	480c      	ldr	r0, [pc, #48]	; (b78b4 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b7884:	464a      	mov	r2, r9
   b7886:	f7ff ff9b 	bl	b77c0 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b788a:	f1b8 0f00 	cmp.w	r8, #0
   b788e:	d002      	beq.n	b7896 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b7890:	6860      	ldr	r0, [r4, #4]
   b7892:	f006 f9c2 	bl	bdc1a <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b7896:	4628      	mov	r0, r5
   b7898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b789c:	4603      	mov	r3, r0
   b789e:	4906      	ldr	r1, [pc, #24]	; (b78b8 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b78a0:	4804      	ldr	r0, [pc, #16]	; (b78b4 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b78a2:	464a      	mov	r2, r9
   b78a4:	f7ff ff8c 	bl	b77c0 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b78a8:	2500      	movs	r5, #0
   b78aa:	e7ee      	b.n	b788a <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b78ac:	2501      	movs	r5, #1
   b78ae:	e7ec      	b.n	b788a <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b78b0:	000c4464 	.word	0x000c4464
   b78b4:	2003e4c8 	.word	0x2003e4c8
   b78b8:	000c4489 	.word	0x000c4489

000b78bc <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b78bc:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b78be:	9300      	str	r3, [sp, #0]
   b78c0:	2301      	movs	r3, #1
   b78c2:	f7ff ffad 	bl	b7820 <_ZN6AB180513readRegistersEhPhjb>
}
   b78c6:	b003      	add	sp, #12
   b78c8:	f85d fb04 	ldr.w	pc, [sp], #4

000b78cc <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b78cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b78ce:	8943      	ldrh	r3, [r0, #10]
   b78d0:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b78d2:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b78d4:	d010      	beq.n	b78f8 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b78d6:	4e19      	ldr	r6, [pc, #100]	; (b793c <_ZN6AB180510detectChipEv+0x70>)
   b78d8:	4d19      	ldr	r5, [pc, #100]	; (b7940 <_ZN6AB180510detectChipEv+0x74>)
   b78da:	f005 f80b 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b78de:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b78e2:	d209      	bcs.n	b78f8 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b78e4:	8960      	ldrh	r0, [r4, #10]
   b78e6:	f008 fd01 	bl	c02ec <digitalRead>
   b78ea:	2801      	cmp	r0, #1
   b78ec:	d004      	beq.n	b78f8 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b78ee:	4631      	mov	r1, r6
   b78f0:	4628      	mov	r0, r5
   b78f2:	f7fc fc3e 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
   b78f6:	e7f0      	b.n	b78da <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b78f8:	2301      	movs	r3, #1
   b78fa:	f10d 0207 	add.w	r2, sp, #7
   b78fe:	2128      	movs	r1, #40	; 0x28
   b7900:	4620      	mov	r0, r4
   b7902:	f7ff ffdb 	bl	b78bc <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b7906:	b930      	cbnz	r0, b7916 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b7908:	480d      	ldr	r0, [pc, #52]	; (b7940 <_ZN6AB180510detectChipEv+0x74>)
   b790a:	490e      	ldr	r1, [pc, #56]	; (b7944 <_ZN6AB180510detectChipEv+0x78>)
   b790c:	f7fc fc31 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
   b7910:	2000      	movs	r0, #0
}
   b7912:	b002      	add	sp, #8
   b7914:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b7916:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b791a:	2b18      	cmp	r3, #24
   b791c:	d1f4      	bne.n	b7908 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b791e:	2301      	movs	r3, #1
   b7920:	f10d 0207 	add.w	r2, sp, #7
   b7924:	2129      	movs	r1, #41	; 0x29
   b7926:	4620      	mov	r0, r4
   b7928:	f7ff ffc8 	bl	b78bc <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b792c:	2800      	cmp	r0, #0
   b792e:	d0eb      	beq.n	b7908 <_ZN6AB180510detectChipEv+0x3c>
   b7930:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7934:	2b05      	cmp	r3, #5
   b7936:	d1e7      	bne.n	b7908 <_ZN6AB180510detectChipEv+0x3c>
   b7938:	e7eb      	b.n	b7912 <_ZN6AB180510detectChipEv+0x46>
   b793a:	bf00      	nop
   b793c:	000c44ad 	.word	0x000c44ad
   b7940:	2003e4c8 	.word	0x2003e4c8
   b7944:	000c44c2 	.word	0x000c44c2

000b7948 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b7948:	b507      	push	{r0, r1, r2, lr}
   b794a:	4613      	mov	r3, r2
    uint8_t value = 0;
   b794c:	2200      	movs	r2, #0
   b794e:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b7952:	f10d 0207 	add.w	r2, sp, #7
   b7956:	f7ff ffb1 	bl	b78bc <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b795a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b795e:	b003      	add	sp, #12
   b7960:	f85d fb04 	ldr.w	pc, [sp], #4

000b7964 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b7964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7968:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b796c:	4604      	mov	r4, r0
   b796e:	460f      	mov	r7, r1
   b7970:	4615      	mov	r5, r2
   b7972:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b7974:	f1b8 0f00 	cmp.w	r8, #0
   b7978:	d002      	beq.n	b7980 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b797a:	6840      	ldr	r0, [r0, #4]
   b797c:	f006 f944 	bl	bdc08 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b7980:	7a21      	ldrb	r1, [r4, #8]
   b7982:	6860      	ldr	r0, [r4, #4]
   b7984:	f006 f91d 	bl	bdbc2 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b7988:	6860      	ldr	r0, [r4, #4]
   b798a:	6803      	ldr	r3, [r0, #0]
   b798c:	4639      	mov	r1, r7
   b798e:	689b      	ldr	r3, [r3, #8]
   b7990:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b7992:	442e      	add	r6, r5
   b7994:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b7996:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b7998:	d005      	beq.n	b79a6 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b799a:	6803      	ldr	r3, [r0, #0]
   b799c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b79a0:	689b      	ldr	r3, [r3, #8]
   b79a2:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b79a4:	e7f6      	b.n	b7994 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b79a6:	2101      	movs	r1, #1
   b79a8:	f006 f92a 	bl	bdc00 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b79ac:	4603      	mov	r3, r0
   b79ae:	b170      	cbz	r0, b79ce <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b79b0:	4908      	ldr	r1, [pc, #32]	; (b79d4 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b79b2:	4809      	ldr	r0, [pc, #36]	; (b79d8 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b79b4:	463a      	mov	r2, r7
   b79b6:	f7ff ff03 	bl	b77c0 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b79ba:	2500      	movs	r5, #0
    }

    if (lock) {
   b79bc:	f1b8 0f00 	cmp.w	r8, #0
   b79c0:	d002      	beq.n	b79c8 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b79c2:	6860      	ldr	r0, [r4, #4]
   b79c4:	f006 f929 	bl	bdc1a <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b79c8:	4628      	mov	r0, r5
   b79ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b79ce:	2501      	movs	r5, #1
   b79d0:	e7f4      	b.n	b79bc <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b79d2:	bf00      	nop
   b79d4:	000c44cf 	.word	0x000c44cf
   b79d8:	2003e4c8 	.word	0x2003e4c8

000b79dc <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b79dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b79de:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b79e2:	9300      	str	r3, [sp, #0]
   b79e4:	f10d 020f 	add.w	r2, sp, #15
   b79e8:	2301      	movs	r3, #1
   b79ea:	f7ff ffbb 	bl	b7964 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b79ee:	b005      	add	sp, #20
   b79f0:	f85d fb04 	ldr.w	pc, [sp], #4

000b79f4 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b79f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b79f6:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b79f8:	460c      	mov	r4, r1
   b79fa:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b79fc:	491a      	ldr	r1, [pc, #104]	; (b7a68 <_ZN6AB18056setWDTEi+0x74>)
   b79fe:	481b      	ldr	r0, [pc, #108]	; (b7a6c <_ZN6AB18056setWDTEi+0x78>)
   b7a00:	f7fc fbb7 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b7a04:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b7a06:	bfb8      	it	lt
   b7a08:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b7a0a:	b97c      	cbnz	r4, b7a2c <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b7a0c:	2301      	movs	r3, #1
   b7a0e:	4622      	mov	r2, r4
   b7a10:	211b      	movs	r1, #27
   b7a12:	4628      	mov	r0, r5
   b7a14:	f7ff ffe2 	bl	b79dc <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b7a18:	4915      	ldr	r1, [pc, #84]	; (b7a70 <_ZN6AB18056setWDTEi+0x7c>)
   b7a1a:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b7a1c:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b7a1e:	4813      	ldr	r0, [pc, #76]	; (b7a6c <_ZN6AB18056setWDTEi+0x78>)
   b7a20:	f7ff fedc 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b7a24:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b7a26:	616c      	str	r4, [r5, #20]
}
   b7a28:	4630      	mov	r0, r6
   b7a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b7a2c:	2c03      	cmp	r4, #3
   b7a2e:	dd19      	ble.n	b7a64 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b7a30:	10a7      	asrs	r7, r4, #2
   b7a32:	2f1f      	cmp	r7, #31
   b7a34:	bfa8      	it	ge
   b7a36:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b7a38:	00ba      	lsls	r2, r7, #2
   b7a3a:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b7a3e:	2301      	movs	r3, #1
   b7a40:	b2d2      	uxtb	r2, r2
   b7a42:	211b      	movs	r1, #27
   b7a44:	4628      	mov	r0, r5
   b7a46:	f7ff ffc9 	bl	b79dc <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b7a4a:	463a      	mov	r2, r7
   b7a4c:	4603      	mov	r3, r0
   b7a4e:	4909      	ldr	r1, [pc, #36]	; (b7a74 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b7a50:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b7a52:	4806      	ldr	r0, [pc, #24]	; (b7a6c <_ZN6AB18056setWDTEi+0x78>)
   b7a54:	f7ff fec2 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b7a58:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b7a5c:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b7a5e:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b7a60:	616f      	str	r7, [r5, #20]
   b7a62:	e7e1      	b.n	b7a28 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b7a64:	2701      	movs	r7, #1
   b7a66:	e7e7      	b.n	b7a38 <_ZN6AB18056setWDTEi+0x44>
   b7a68:	000c44f4 	.word	0x000c44f4
   b7a6c:	2003e4c8 	.word	0x2003e4c8
   b7a70:	000c44fe 	.word	0x000c44fe
   b7a74:	000c451a 	.word	0x000c451a

000b7a78 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b7a78:	4b06      	ldr	r3, [pc, #24]	; (b7a94 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b7a7a:	681a      	ldr	r2, [r3, #0]
   b7a7c:	b14a      	cbz	r2, b7a92 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b7a7e:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b7a82:	430b      	orrs	r3, r1
   b7a84:	d105      	bne.n	b7a92 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b7a86:	68d3      	ldr	r3, [r2, #12]
   b7a88:	b11b      	cbz	r3, b7a92 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b7a8a:	2100      	movs	r1, #0
   b7a8c:	4610      	mov	r0, r2
   b7a8e:	f7ff bfb1 	b.w	b79f4 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b7a92:	4770      	bx	lr
   b7a94:	2003e4cc 	.word	0x2003e4cc

000b7a98 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b7a98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b7a9c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b7aa0:	4605      	mov	r5, r0
   b7aa2:	4616      	mov	r6, r2
   b7aa4:	461f      	mov	r7, r3
    if (lock) {
   b7aa6:	f1b8 0f00 	cmp.w	r8, #0
   b7aaa:	d004      	beq.n	b7ab6 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b7aac:	6840      	ldr	r0, [r0, #4]
   b7aae:	9101      	str	r1, [sp, #4]
   b7ab0:	f006 f8aa 	bl	bdc08 <_ZN7TwoWire4lockEv>
   b7ab4:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b7ab6:	9101      	str	r1, [sp, #4]
   b7ab8:	2300      	movs	r3, #0
   b7aba:	f10d 020f 	add.w	r2, sp, #15
   b7abe:	4628      	mov	r0, r5
   b7ac0:	f7ff fefc 	bl	b78bc <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b7ac4:	4604      	mov	r4, r0
   b7ac6:	b160      	cbz	r0, b7ae2 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b7ac8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b7acc:	ea03 0206 	and.w	r2, r3, r6
   b7ad0:	433a      	orrs	r2, r7
        if (newValue != value) {
   b7ad2:	4293      	cmp	r3, r2
   b7ad4:	d005      	beq.n	b7ae2 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b7ad6:	9901      	ldr	r1, [sp, #4]
   b7ad8:	2300      	movs	r3, #0
   b7ada:	4628      	mov	r0, r5
   b7adc:	f7ff ff7e 	bl	b79dc <_ZN6AB180513writeRegisterEhhb>
   b7ae0:	4604      	mov	r4, r0
    if (lock) {
   b7ae2:	f1b8 0f00 	cmp.w	r8, #0
   b7ae6:	d002      	beq.n	b7aee <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b7ae8:	6868      	ldr	r0, [r5, #4]
   b7aea:	f006 f896 	bl	bdc1a <_ZN7TwoWire6unlockEv>
}
   b7aee:	4620      	mov	r0, r4
   b7af0:	b004      	add	sp, #16
   b7af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7af6 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7af6:	b513      	push	{r0, r1, r4, lr}
   b7af8:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b7afa:	f10d 0207 	add.w	r2, sp, #7
   b7afe:	f7ff fedd 	bl	b78bc <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b7b02:	b128      	cbz	r0, b7b10 <_ZN6AB180510isBitClearEhhb+0x1a>
   b7b04:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7b08:	421c      	tst	r4, r3
   b7b0a:	bf0c      	ite	eq
   b7b0c:	2001      	moveq	r0, #1
   b7b0e:	2000      	movne	r0, #0
}
   b7b10:	b002      	add	sp, #8
   b7b12:	bd10      	pop	{r4, pc}

000b7b14 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7b14:	b513      	push	{r0, r1, r4, lr}
   b7b16:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b7b18:	f10d 0207 	add.w	r2, sp, #7
   b7b1c:	f7ff fece 	bl	b78bc <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b7b20:	b128      	cbz	r0, b7b2e <_ZN6AB18058isBitSetEhhb+0x1a>
   b7b22:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7b26:	421c      	tst	r4, r3
   b7b28:	bf14      	ite	ne
   b7b2a:	2001      	movne	r0, #1
   b7b2c:	2000      	moveq	r0, #0
}
   b7b2e:	b002      	add	sp, #8
   b7b30:	bd10      	pop	{r4, pc}

000b7b32 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7b32:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b7b34:	43d2      	mvns	r2, r2
   b7b36:	9300      	str	r3, [sp, #0]
   b7b38:	b2d2      	uxtb	r2, r2
   b7b3a:	2300      	movs	r3, #0
   b7b3c:	f7ff ffac 	bl	b7a98 <_ZN6AB180512maskRegisterEhhhb>
}
   b7b40:	b003      	add	sp, #12
   b7b42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7b48 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b7b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b7b4a:	2301      	movs	r3, #1
   b7b4c:	f10d 0207 	add.w	r2, sp, #7
   b7b50:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b7b52:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b7b54:	f7ff feb2 	bl	b78bc <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b7b58:	4605      	mov	r5, r0
   b7b5a:	b938      	cbnz	r0, b7b6c <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b7b5c:	491e      	ldr	r1, [pc, #120]	; (b7bd8 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b7b5e:	481f      	ldr	r0, [pc, #124]	; (b7bdc <_ZN6AB180516updateWakeReasonEv+0x94>)
   b7b60:	22ad      	movs	r2, #173	; 0xad
   b7b62:	f7ff fe2d 	bl	b77c0 <_ZNK5spark6Logger5errorEPKcz>
}
   b7b66:	4628      	mov	r0, r5
   b7b68:	b003      	add	sp, #12
   b7b6a:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b7b6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7b70:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b7b74:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b7b78:	d00b      	beq.n	b7b92 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b7b7a:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b7b7c:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b7b7e:	210f      	movs	r1, #15
   b7b80:	4620      	mov	r0, r4
   b7b82:	f7ff ffd6 	bl	b7b32 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b7b86:	4a16      	ldr	r2, [pc, #88]	; (b7be0 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b7b88:	4916      	ldr	r1, [pc, #88]	; (b7be4 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b7b8a:	4814      	ldr	r0, [pc, #80]	; (b7bdc <_ZN6AB180516updateWakeReasonEv+0x94>)
   b7b8c:	f7fc faf1 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
   b7b90:	e7e9      	b.n	b7b66 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b7b92:	2208      	movs	r2, #8
   b7b94:	2117      	movs	r1, #23
   b7b96:	4620      	mov	r0, r4
   b7b98:	f7ff ffbc 	bl	b7b14 <_ZN6AB18058isBitSetEhhb>
   b7b9c:	b118      	cbz	r0, b7ba6 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b7b9e:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b7ba0:	4a11      	ldr	r2, [pc, #68]	; (b7be8 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b7ba2:	61e3      	str	r3, [r4, #28]
   b7ba4:	e7f0      	b.n	b7b88 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b7ba6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7baa:	071a      	lsls	r2, r3, #28
   b7bac:	d509      	bpl.n	b7bc2 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b7bae:	2303      	movs	r3, #3
   b7bb0:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b7bb2:	2208      	movs	r2, #8
   b7bb4:	2301      	movs	r3, #1
   b7bb6:	210f      	movs	r1, #15
   b7bb8:	4620      	mov	r0, r4
   b7bba:	f7ff ffba 	bl	b7b32 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b7bbe:	4a0b      	ldr	r2, [pc, #44]	; (b7bec <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b7bc0:	e7e2      	b.n	b7b88 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b7bc2:	075b      	lsls	r3, r3, #29
   b7bc4:	d5cf      	bpl.n	b7b66 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b7bc6:	2204      	movs	r2, #4
   b7bc8:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b7bca:	2301      	movs	r3, #1
   b7bcc:	210f      	movs	r1, #15
   b7bce:	4620      	mov	r0, r4
   b7bd0:	f7ff ffaf 	bl	b7b32 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b7bd4:	4a06      	ldr	r2, [pc, #24]	; (b7bf0 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b7bd6:	e7d7      	b.n	b7b88 <_ZN6AB180516updateWakeReasonEv+0x40>
   b7bd8:	000c456d 	.word	0x000c456d
   b7bdc:	2003e4c8 	.word	0x2003e4c8
   b7be0:	000c453e 	.word	0x000c453e
   b7be4:	000c458c 	.word	0x000c458c
   b7be8:	000c4547 	.word	0x000c4547
   b7bec:	000c4557 	.word	0x000c4557
   b7bf0:	000c4567 	.word	0x000c4567

000b7bf4 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7bf4:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b7bf6:	9300      	str	r3, [sp, #0]
   b7bf8:	4613      	mov	r3, r2
   b7bfa:	22ff      	movs	r2, #255	; 0xff
   b7bfc:	f7ff ff4c 	bl	b7a98 <_ZN6AB180512maskRegisterEhhhb>
}
   b7c00:	b003      	add	sp, #12
   b7c02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7c08 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b7c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7c0a:	460f      	mov	r7, r1
   b7c0c:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b7c0e:	2301      	movs	r3, #1
   b7c10:	2200      	movs	r2, #0
   b7c12:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b7c14:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b7c16:	f7ff fee1 	bl	b79dc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7c1a:	4604      	mov	r4, r0
   b7c1c:	b938      	cbnz	r0, b7c2e <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b7c1e:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b7c22:	491f      	ldr	r1, [pc, #124]	; (b7ca0 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b7c24:	481f      	ldr	r0, [pc, #124]	; (b7ca4 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b7c26:	f7ff fdcb 	bl	b77c0 <_ZNK5spark6Logger5errorEPKcz>
}
   b7c2a:	4620      	mov	r0, r4
   b7c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b7c2e:	2301      	movs	r3, #1
   b7c30:	2223      	movs	r2, #35	; 0x23
   b7c32:	2118      	movs	r1, #24
   b7c34:	4628      	mov	r0, r5
   b7c36:	f7ff fed1 	bl	b79dc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7c3a:	4604      	mov	r4, r0
   b7c3c:	b910      	cbnz	r0, b7c44 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b7c3e:	f240 229b 	movw	r2, #667	; 0x29b
   b7c42:	e7ee      	b.n	b7c22 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b7c44:	2fff      	cmp	r7, #255	; 0xff
   b7c46:	bfa8      	it	ge
   b7c48:	27ff      	movge	r7, #255	; 0xff
   b7c4a:	2f01      	cmp	r7, #1
   b7c4c:	bfb8      	it	lt
   b7c4e:	2701      	movlt	r7, #1
   b7c50:	2301      	movs	r3, #1
   b7c52:	b2fa      	uxtb	r2, r7
   b7c54:	2119      	movs	r1, #25
   b7c56:	4628      	mov	r0, r5
   b7c58:	f7ff fec0 	bl	b79dc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7c5c:	4604      	mov	r4, r0
   b7c5e:	b910      	cbnz	r0, b7c66 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b7c60:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b7c64:	e7dd      	b.n	b7c22 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b7c66:	2301      	movs	r3, #1
   b7c68:	2208      	movs	r2, #8
   b7c6a:	2112      	movs	r1, #18
   b7c6c:	4628      	mov	r0, r5
   b7c6e:	f7ff ffc1 	bl	b7bf4 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7c72:	4604      	mov	r4, r0
   b7c74:	b910      	cbnz	r0, b7c7c <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b7c76:	f240 22af 	movw	r2, #687	; 0x2af
   b7c7a:	e7d2      	b.n	b7c22 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b7c7c:	2e00      	cmp	r6, #0
   b7c7e:	bf14      	ite	ne
   b7c80:	2203      	movne	r2, #3
   b7c82:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b7c84:	2301      	movs	r3, #1
   b7c86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b7c8a:	2118      	movs	r1, #24
   b7c8c:	4628      	mov	r0, r5
   b7c8e:	f7ff fea5 	bl	b79dc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7c92:	4604      	mov	r4, r0
   b7c94:	2800      	cmp	r0, #0
   b7c96:	d1c8      	bne.n	b7c2a <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b7c98:	f240 22b9 	movw	r2, #697	; 0x2b9
   b7c9c:	e7c1      	b.n	b7c22 <_ZN6AB180517setCountdownTimerEib+0x1a>
   b7c9e:	bf00      	nop
   b7ca0:	000c459d 	.word	0x000c459d
   b7ca4:	2003e4c8 	.word	0x2003e4c8

000b7ca8 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b7ca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b7cac:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b7cae:	4605      	mov	r5, r0
   b7cb0:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b7cb2:	484f      	ldr	r0, [pc, #316]	; (b7df0 <_ZN6AB180513deepPowerDownEi+0x148>)
   b7cb4:	494f      	ldr	r1, [pc, #316]	; (b7df4 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b7cb6:	f7fc fa5c 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b7cba:	2100      	movs	r1, #0
   b7cbc:	4628      	mov	r0, r5
   b7cbe:	f7ff fe99 	bl	b79f4 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b7cc2:	4604      	mov	r4, r0
   b7cc4:	b948      	cbnz	r0, b7cda <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b7cc6:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b7cca:	494b      	ldr	r1, [pc, #300]	; (b7df8 <_ZN6AB180513deepPowerDownEi+0x150>)
   b7ccc:	4848      	ldr	r0, [pc, #288]	; (b7df0 <_ZN6AB180513deepPowerDownEi+0x148>)
   b7cce:	f7ff fd77 	bl	b77c0 <_ZNK5spark6Logger5errorEPKcz>
}
   b7cd2:	4620      	mov	r0, r4
   b7cd4:	b003      	add	sp, #12
   b7cd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b7cda:	2301      	movs	r3, #1
   b7cdc:	461a      	mov	r2, r3
   b7cde:	2130      	movs	r1, #48	; 0x30
   b7ce0:	4628      	mov	r0, r5
   b7ce2:	f7ff ff87 	bl	b7bf4 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7ce6:	4604      	mov	r4, r0
   b7ce8:	b910      	cbnz	r0, b7cf0 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b7cea:	f240 2205 	movw	r2, #517	; 0x205
   b7cee:	e7ec      	b.n	b7cca <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b7cf0:	2210      	movs	r2, #16
   b7cf2:	2301      	movs	r3, #1
   b7cf4:	4611      	mov	r1, r2
   b7cf6:	4628      	mov	r0, r5
   b7cf8:	f7ff ff1b 	bl	b7b32 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b7cfc:	4604      	mov	r4, r0
   b7cfe:	b910      	cbnz	r0, b7d06 <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b7d00:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b7d04:	e7e1      	b.n	b7cca <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b7d06:	2301      	movs	r3, #1
   b7d08:	2226      	movs	r2, #38	; 0x26
   b7d0a:	2113      	movs	r1, #19
   b7d0c:	4628      	mov	r0, r5
   b7d0e:	f7ff fe65 	bl	b79dc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7d12:	4604      	mov	r4, r0
   b7d14:	b910      	cbnz	r0, b7d1c <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b7d16:	f240 2213 	movw	r2, #531	; 0x213
   b7d1a:	e7d6      	b.n	b7cca <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b7d1c:	2601      	movs	r6, #1
   b7d1e:	9600      	str	r6, [sp, #0]
   b7d20:	4633      	mov	r3, r6
   b7d22:	22fc      	movs	r2, #252	; 0xfc
   b7d24:	2111      	movs	r1, #17
   b7d26:	4628      	mov	r0, r5
   b7d28:	f7ff feb6 	bl	b7a98 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b7d2c:	4604      	mov	r4, r0
   b7d2e:	b910      	cbnz	r0, b7d36 <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b7d30:	f240 221b 	movw	r2, #539	; 0x21b
   b7d34:	e7c9      	b.n	b7cca <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b7d36:	2200      	movs	r2, #0
   b7d38:	4639      	mov	r1, r7
   b7d3a:	4628      	mov	r0, r5
   b7d3c:	f7ff ff64 	bl	b7c08 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b7d40:	4604      	mov	r4, r0
   b7d42:	b910      	cbnz	r0, b7d4a <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b7d44:	f240 2222 	movw	r2, #546	; 0x222
   b7d48:	e7bf      	b.n	b7cca <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b7d4a:	9600      	str	r6, [sp, #0]
   b7d4c:	2302      	movs	r3, #2
   b7d4e:	2277      	movs	r2, #119	; 0x77
   b7d50:	2110      	movs	r1, #16
   b7d52:	4628      	mov	r0, r5
   b7d54:	f7ff fea0 	bl	b7a98 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b7d58:	4604      	mov	r4, r0
   b7d5a:	b910      	cbnz	r0, b7d62 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b7d5c:	f240 222b 	movw	r2, #555	; 0x22b
   b7d60:	e7b3      	b.n	b7cca <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b7d62:	4633      	mov	r3, r6
   b7d64:	2204      	movs	r2, #4
   b7d66:	211c      	movs	r1, #28
   b7d68:	4628      	mov	r0, r5
   b7d6a:	f7ff ff43 	bl	b7bf4 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7d6e:	4604      	mov	r4, r0
   b7d70:	b910      	cbnz	r0, b7d78 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b7d72:	f240 2232 	movw	r2, #562	; 0x232
   b7d76:	e7a8      	b.n	b7cca <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b7d78:	9600      	str	r6, [sp, #0]
   b7d7a:	2318      	movs	r3, #24
   b7d7c:	22e3      	movs	r2, #227	; 0xe3
   b7d7e:	2111      	movs	r1, #17
   b7d80:	4628      	mov	r0, r5
   b7d82:	f7ff fe89 	bl	b7a98 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b7d86:	4604      	mov	r4, r0
   b7d88:	b910      	cbnz	r0, b7d90 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b7d8a:	f240 2239 	movw	r2, #569	; 0x239
   b7d8e:	e79c      	b.n	b7cca <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b7d90:	4633      	mov	r3, r6
   b7d92:	22c0      	movs	r2, #192	; 0xc0
   b7d94:	2117      	movs	r1, #23
   b7d96:	4628      	mov	r0, r5
   b7d98:	f7ff fe20 	bl	b79dc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7d9c:	4604      	mov	r4, r0
   b7d9e:	b910      	cbnz	r0, b7da6 <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b7da0:	f44f 7210 	mov.w	r2, #576	; 0x240
   b7da4:	e791      	b.n	b7cca <_ZN6AB180513deepPowerDownEi+0x22>
   b7da6:	f004 fda5 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b7daa:	f8df 9054 	ldr.w	r9, [pc, #84]	; b7e00 <_ZN6AB180513deepPowerDownEi+0x158>
   b7dae:	f8df 8040 	ldr.w	r8, [pc, #64]	; b7df0 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b7db2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b7db6:	4606      	mov	r6, r0
   b7db8:	434f      	muls	r7, r1
   b7dba:	f004 fd9b 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
   b7dbe:	1b80      	subs	r0, r0, r6
   b7dc0:	42b8      	cmp	r0, r7
   b7dc2:	d20e      	bcs.n	b7de2 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b7dc4:	2201      	movs	r2, #1
   b7dc6:	2117      	movs	r1, #23
   b7dc8:	4628      	mov	r0, r5
   b7dca:	f7ff fdbd 	bl	b7948 <_ZN6AB180512readRegisterEhb>
   b7dce:	4649      	mov	r1, r9
   b7dd0:	4602      	mov	r2, r0
   b7dd2:	4640      	mov	r0, r8
   b7dd4:	f7fc f9cd 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b7dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b7ddc:	f005 f9a8 	bl	bd130 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b7de0:	e7eb      	b.n	b7dba <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b7de2:	4906      	ldr	r1, [pc, #24]	; (b7dfc <_ZN6AB180513deepPowerDownEi+0x154>)
   b7de4:	4802      	ldr	r0, [pc, #8]	; (b7df0 <_ZN6AB180513deepPowerDownEi+0x148>)
   b7de6:	f7ff fceb 	bl	b77c0 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b7dea:	f007 fe62 	bl	bfab2 <_ZN11SystemClass5resetEv>
    return true;
   b7dee:	e770      	b.n	b7cd2 <_ZN6AB180513deepPowerDownEi+0x2a>
   b7df0:	2003e4c8 	.word	0x2003e4c8
   b7df4:	000c45c8 	.word	0x000c45c8
   b7df8:	000c45bd 	.word	0x000c45bd
   b7dfc:	000c45ee 	.word	0x000c45ee
   b7e00:	000c45d9 	.word	0x000c45d9

000b7e04 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b7e04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7e08:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b7e0c:	4605      	mov	r5, r0
   b7e0e:	460c      	mov	r4, r1
   b7e10:	4691      	mov	r9, r2
   b7e12:	461f      	mov	r7, r3
    if (lock) {
   b7e14:	f1ba 0f00 	cmp.w	sl, #0
   b7e18:	d002      	beq.n	b7e20 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b7e1a:	6840      	ldr	r0, [r0, #4]
   b7e1c:	f005 fef4 	bl	bdc08 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b7e20:	b307      	cbz	r7, b7e64 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b7e22:	2f20      	cmp	r7, #32
   b7e24:	463e      	mov	r6, r7
   b7e26:	bf28      	it	cs
   b7e28:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b7e2a:	2c7f      	cmp	r4, #127	; 0x7f
   b7e2c:	d826      	bhi.n	b7e7c <_ZN6AB18057readRamEjPhjb+0x78>
   b7e2e:	1933      	adds	r3, r6, r4
   b7e30:	2b80      	cmp	r3, #128	; 0x80
   b7e32:	d901      	bls.n	b7e38 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b7e34:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7e38:	2301      	movs	r3, #1
   b7e3a:	2204      	movs	r2, #4
   b7e3c:	213f      	movs	r1, #63	; 0x3f
   b7e3e:	4628      	mov	r0, r5
   b7e40:	f7ff fe77 	bl	b7b32 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b7e44:	2300      	movs	r3, #0
   b7e46:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b7e4a:	9300      	str	r3, [sp, #0]
   b7e4c:	464a      	mov	r2, r9
   b7e4e:	4633      	mov	r3, r6
   b7e50:	b2c9      	uxtb	r1, r1
   b7e52:	4628      	mov	r0, r5
   b7e54:	f7ff fce4 	bl	b7820 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b7e58:	4680      	mov	r8, r0
   b7e5a:	b128      	cbz	r0, b7e68 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b7e5c:	4434      	add	r4, r6
        dataLen -= count;
   b7e5e:	1bbf      	subs	r7, r7, r6
        data += count;
   b7e60:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b7e62:	e7dd      	b.n	b7e20 <_ZN6AB18057readRamEjPhjb+0x1c>
   b7e64:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b7e68:	f1ba 0f00 	cmp.w	sl, #0
   b7e6c:	d002      	beq.n	b7e74 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b7e6e:	6868      	ldr	r0, [r5, #4]
   b7e70:	f005 fed3 	bl	bdc1a <_ZN7TwoWire6unlockEv>
}
   b7e74:	4640      	mov	r0, r8
   b7e76:	b002      	add	sp, #8
   b7e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7e7c:	2301      	movs	r3, #1
   b7e7e:	2204      	movs	r2, #4
   b7e80:	213f      	movs	r1, #63	; 0x3f
   b7e82:	4628      	mov	r0, r5
   b7e84:	f7ff feb6 	bl	b7bf4 <_ZN6AB180514setRegisterBitEhhb>
   b7e88:	e7dc      	b.n	b7e44 <_ZN6AB18057readRamEjPhjb+0x40>

000b7e8a <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b7e8a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7e8e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b7e92:	4605      	mov	r5, r0
   b7e94:	460c      	mov	r4, r1
   b7e96:	4691      	mov	r9, r2
   b7e98:	461f      	mov	r7, r3
    if (lock) {
   b7e9a:	f1ba 0f00 	cmp.w	sl, #0
   b7e9e:	d002      	beq.n	b7ea6 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b7ea0:	6840      	ldr	r0, [r0, #4]
   b7ea2:	f005 feb1 	bl	bdc08 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b7ea6:	b307      	cbz	r7, b7eea <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b7ea8:	2f1f      	cmp	r7, #31
   b7eaa:	463e      	mov	r6, r7
   b7eac:	bf28      	it	cs
   b7eae:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b7eb0:	2c7f      	cmp	r4, #127	; 0x7f
   b7eb2:	d826      	bhi.n	b7f02 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b7eb4:	1933      	adds	r3, r6, r4
   b7eb6:	2b80      	cmp	r3, #128	; 0x80
   b7eb8:	d901      	bls.n	b7ebe <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b7eba:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7ebe:	2301      	movs	r3, #1
   b7ec0:	2204      	movs	r2, #4
   b7ec2:	213f      	movs	r1, #63	; 0x3f
   b7ec4:	4628      	mov	r0, r5
   b7ec6:	f7ff fe34 	bl	b7b32 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b7eca:	2300      	movs	r3, #0
   b7ecc:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b7ed0:	9300      	str	r3, [sp, #0]
   b7ed2:	464a      	mov	r2, r9
   b7ed4:	4633      	mov	r3, r6
   b7ed6:	b2c9      	uxtb	r1, r1
   b7ed8:	4628      	mov	r0, r5
   b7eda:	f7ff fd43 	bl	b7964 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b7ede:	4680      	mov	r8, r0
   b7ee0:	b128      	cbz	r0, b7eee <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b7ee2:	4434      	add	r4, r6
        dataLen -= count;
   b7ee4:	1bbf      	subs	r7, r7, r6
        data += count;
   b7ee6:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b7ee8:	e7dd      	b.n	b7ea6 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b7eea:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b7eee:	f1ba 0f00 	cmp.w	sl, #0
   b7ef2:	d002      	beq.n	b7efa <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b7ef4:	6868      	ldr	r0, [r5, #4]
   b7ef6:	f005 fe90 	bl	bdc1a <_ZN7TwoWire6unlockEv>
}
   b7efa:	4640      	mov	r0, r8
   b7efc:	b002      	add	sp, #8
   b7efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7f02:	2301      	movs	r3, #1
   b7f04:	2204      	movs	r2, #4
   b7f06:	213f      	movs	r1, #63	; 0x3f
   b7f08:	4628      	mov	r0, r5
   b7f0a:	f7ff fe73 	bl	b7bf4 <_ZN6AB180514setRegisterBitEhhb>
   b7f0e:	e7dc      	b.n	b7eca <_ZN6AB18058writeRamEjPKhjb+0x40>

000b7f10 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b7f10:	b530      	push	{r4, r5, lr}
   b7f12:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b7f14:	680d      	ldr	r5, [r1, #0]
   b7f16:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b7f1a:	9503      	str	r5, [sp, #12]
   b7f1c:	684d      	ldr	r5, [r1, #4]
   b7f1e:	9502      	str	r5, [sp, #8]
   b7f20:	688d      	ldr	r5, [r1, #8]
   b7f22:	9501      	str	r5, [sp, #4]
   b7f24:	68c9      	ldr	r1, [r1, #12]
   b7f26:	9100      	str	r1, [sp, #0]
   b7f28:	3301      	adds	r3, #1
   b7f2a:	4904      	ldr	r1, [pc, #16]	; (b7f3c <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b7f2c:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b7f30:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b7f32:	f007 fd57 	bl	bf9e4 <_ZN6String6formatEPKcz>
}
   b7f36:	4620      	mov	r0, r4
   b7f38:	b005      	add	sp, #20
   b7f3a:	bd30      	pop	{r4, r5, pc}
   b7f3c:	000c4600 	.word	0x000c4600

000b7f40 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b7f40:	0903      	lsrs	r3, r0, #4
}
   b7f42:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b7f44:	f000 000f 	and.w	r0, r0, #15
}
   b7f48:	fb02 0003 	mla	r0, r2, r3, r0
   b7f4c:	4770      	bx	lr

000b7f4e <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b7f4e:	b538      	push	{r3, r4, r5, lr}
   b7f50:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b7f52:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b7f54:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b7f56:	f7ff fff3 	bl	b7f40 <_ZN6AB180510bcdToValueEh>
   b7f5a:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b7f5c:	7860      	ldrb	r0, [r4, #1]
   b7f5e:	f7ff ffef 	bl	b7f40 <_ZN6AB180510bcdToValueEh>
   b7f62:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b7f64:	78a0      	ldrb	r0, [r4, #2]
   b7f66:	f7ff ffeb 	bl	b7f40 <_ZN6AB180510bcdToValueEh>
   b7f6a:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b7f6c:	78e0      	ldrb	r0, [r4, #3]
   b7f6e:	f7ff ffe7 	bl	b7f40 <_ZN6AB180510bcdToValueEh>
   b7f72:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b7f74:	7920      	ldrb	r0, [r4, #4]
   b7f76:	f7ff ffe3 	bl	b7f40 <_ZN6AB180510bcdToValueEh>
   b7f7a:	3801      	subs	r0, #1
   b7f7c:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b7f7e:	b92d      	cbnz	r5, b7f8c <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b7f80:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b7f82:	7828      	ldrb	r0, [r5, #0]
   b7f84:	f7ff ffdc 	bl	b7f40 <_ZN6AB180510bcdToValueEh>
   b7f88:	6188      	str	r0, [r1, #24]
}
   b7f8a:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b7f8c:	7960      	ldrb	r0, [r4, #5]
   b7f8e:	f7ff ffd7 	bl	b7f40 <_ZN6AB180510bcdToValueEh>
   b7f92:	3064      	adds	r0, #100	; 0x64
   b7f94:	1da5      	adds	r5, r4, #6
   b7f96:	6148      	str	r0, [r1, #20]
   b7f98:	e7f3      	b.n	b7f82 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b7f9c <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7f9c:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7f9e:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7fa0:	b088      	sub	sp, #32
   b7fa2:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7fa4:	461a      	mov	r2, r3
   b7fa6:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7fa8:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7faa:	f7ff fda4 	bl	b7af6 <_ZN6AB180510isBitClearEhhb>
   b7fae:	b1f0      	cbz	r0, b7fee <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b7fb0:	2308      	movs	r3, #8
   b7fb2:	2601      	movs	r6, #1
   b7fb4:	4620      	mov	r0, r4
   b7fb6:	9600      	str	r6, [sp, #0]
   b7fb8:	eb0d 0203 	add.w	r2, sp, r3
   b7fbc:	2100      	movs	r1, #0
   b7fbe:	f7ff fc2f 	bl	b7820 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b7fc2:	4604      	mov	r4, r0
   b7fc4:	b198      	cbz	r0, b7fee <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b7fc6:	4632      	mov	r2, r6
   b7fc8:	4629      	mov	r1, r5
   b7fca:	f10d 0009 	add.w	r0, sp, #9
   b7fce:	f7ff ffbe 	bl	b7f4e <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b7fd2:	a804      	add	r0, sp, #16
   b7fd4:	f7ff ff9c 	bl	b7f10 <_ZN6AB180510tmToStringEPK2tm>
   b7fd8:	4808      	ldr	r0, [pc, #32]	; (b7ffc <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b7fda:	9a04      	ldr	r2, [sp, #16]
   b7fdc:	4908      	ldr	r1, [pc, #32]	; (b8000 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b7fde:	f7fc f8c8 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
   b7fe2:	a804      	add	r0, sp, #16
   b7fe4:	f007 fba6 	bl	bf734 <_ZN6StringD1Ev>
}
   b7fe8:	4620      	mov	r0, r4
   b7fea:	b008      	add	sp, #32
   b7fec:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b7fee:	2224      	movs	r2, #36	; 0x24
   b7ff0:	2100      	movs	r1, #0
   b7ff2:	4628      	mov	r0, r5
   b7ff4:	f009 f814 	bl	c1020 <memset>
   b7ff8:	2400      	movs	r4, #0
   b7ffa:	e7f5      	b.n	b7fe8 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b7ffc:	2003e4c8 	.word	0x2003e4c8
   b8000:	000c461e 	.word	0x000c461e

000b8004 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b8004:	b530      	push	{r4, r5, lr}
   b8006:	b08b      	sub	sp, #44	; 0x2c
   b8008:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b800a:	a901      	add	r1, sp, #4
   b800c:	f7ff ffc6 	bl	b7f9c <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b8010:	4604      	mov	r4, r0
   b8012:	b120      	cbz	r0, b801e <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b8014:	a801      	add	r0, sp, #4
   b8016:	f005 f883 	bl	bd120 <mktime>
   b801a:	e9c5 0100 	strd	r0, r1, [r5]
}
   b801e:	4620      	mov	r0, r4
   b8020:	b00b      	add	sp, #44	; 0x2c
   b8022:	bd30      	pop	{r4, r5, pc}

000b8024 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b8024:	230a      	movs	r3, #10
   b8026:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b802a:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b802e:	fb91 f2f3 	sdiv	r2, r1, r3
   b8032:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b8036:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b803a:	b2c0      	uxtb	r0, r0
   b803c:	4770      	bx	lr

000b803e <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b803e:	b570      	push	{r4, r5, r6, lr}
   b8040:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b8042:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b8044:	460c      	mov	r4, r1
   b8046:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b8048:	f7ff ffec 	bl	b8024 <_ZN6AB180510valueToBcdEi>
   b804c:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b804e:	6868      	ldr	r0, [r5, #4]
   b8050:	f7ff ffe8 	bl	b8024 <_ZN6AB180510valueToBcdEi>
   b8054:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b8056:	68a8      	ldr	r0, [r5, #8]
   b8058:	f7ff ffe4 	bl	b8024 <_ZN6AB180510valueToBcdEi>
   b805c:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b805e:	68e8      	ldr	r0, [r5, #12]
   b8060:	f7ff ffe0 	bl	b8024 <_ZN6AB180510valueToBcdEi>
   b8064:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b8066:	6928      	ldr	r0, [r5, #16]
   b8068:	3001      	adds	r0, #1
   b806a:	f7ff ffdb 	bl	b8024 <_ZN6AB180510valueToBcdEi>
   b806e:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b8070:	b92e      	cbnz	r6, b807e <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b8072:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b8074:	69a8      	ldr	r0, [r5, #24]
   b8076:	f7ff ffd5 	bl	b8024 <_ZN6AB180510valueToBcdEi>
   b807a:	7030      	strb	r0, [r6, #0]
}
   b807c:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b807e:	696a      	ldr	r2, [r5, #20]
   b8080:	2364      	movs	r3, #100	; 0x64
   b8082:	fb92 f0f3 	sdiv	r0, r2, r3
   b8086:	fb03 2010 	mls	r0, r3, r0, r2
   b808a:	f7ff ffcb 	bl	b8024 <_ZN6AB180510valueToBcdEi>
   b808e:	1da6      	adds	r6, r4, #6
   b8090:	7160      	strb	r0, [r4, #5]
   b8092:	e7ef      	b.n	b8074 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b8094 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b8094:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8096:	b087      	sub	sp, #28
   b8098:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b809a:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b809c:	4616      	mov	r6, r2
   b809e:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b80a0:	f7ff ff36 	bl	b7f10 <_ZN6AB180510tmToStringEPK2tm>
   b80a4:	481e      	ldr	r0, [pc, #120]	; (b8120 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b80a6:	9a02      	ldr	r2, [sp, #8]
   b80a8:	491e      	ldr	r1, [pc, #120]	; (b8124 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b80aa:	f7fc f862 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
   b80ae:	a802      	add	r0, sp, #8
   b80b0:	f007 fb40 	bl	bf734 <_ZN6StringD1Ev>
    if (lock) {
   b80b4:	b116      	cbz	r6, b80bc <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b80b6:	6868      	ldr	r0, [r5, #4]
   b80b8:	f005 fda6 	bl	bdc08 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b80bc:	4620      	mov	r0, r4
   b80be:	2201      	movs	r2, #1
   b80c0:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b80c4:	2700      	movs	r7, #0
   b80c6:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b80ca:	f7ff ffb8 	bl	b803e <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b80ce:	2301      	movs	r3, #1
   b80d0:	461a      	mov	r2, r3
   b80d2:	2110      	movs	r1, #16
   b80d4:	4628      	mov	r0, r5
   b80d6:	f7ff fd8d 	bl	b7bf4 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b80da:	4604      	mov	r4, r0
   b80dc:	b1e8      	cbz	r0, b811a <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b80de:	2308      	movs	r3, #8
   b80e0:	9700      	str	r7, [sp, #0]
   b80e2:	eb0d 0203 	add.w	r2, sp, r3
   b80e6:	4639      	mov	r1, r7
   b80e8:	4628      	mov	r0, r5
   b80ea:	f7ff fc3b 	bl	b7964 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b80ee:	4604      	mov	r4, r0
   b80f0:	b160      	cbz	r0, b810c <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b80f2:	2301      	movs	r3, #1
   b80f4:	461a      	mov	r2, r3
   b80f6:	2110      	movs	r1, #16
   b80f8:	4628      	mov	r0, r5
   b80fa:	f7ff fd1a 	bl	b7b32 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b80fe:	b116      	cbz	r6, b8106 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b8100:	6868      	ldr	r0, [r5, #4]
   b8102:	f005 fd8a 	bl	bdc1a <_ZN7TwoWire6unlockEv>
}
   b8106:	4620      	mov	r0, r4
   b8108:	b007      	add	sp, #28
   b810a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b810c:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b8110:	4905      	ldr	r1, [pc, #20]	; (b8128 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b8112:	4803      	ldr	r0, [pc, #12]	; (b8120 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b8114:	f7ff fb54 	bl	b77c0 <_ZNK5spark6Logger5errorEPKcz>
   b8118:	e7f1      	b.n	b80fe <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b811a:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b811e:	e7f7      	b.n	b8110 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b8120:	2003e4c8 	.word	0x2003e4c8
   b8124:	000c462c 	.word	0x000c462c
   b8128:	000c463a 	.word	0x000c463a

000b812c <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b812c:	b513      	push	{r0, r1, r4, lr}
   b812e:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b8130:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b8132:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b8136:	f008 ff25 	bl	c0f84 <gmtime>
    return setRtcFromTm(tm, lock);
   b813a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b813e:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b8140:	4620      	mov	r0, r4
   b8142:	f7ff ffa7 	bl	b8094 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b8146:	b002      	add	sp, #8
   b8148:	bd10      	pop	{r4, pc}
	...

000b814c <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b814c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b814e:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b8150:	b089      	sub	sp, #36	; 0x24
   b8152:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b8154:	bb75      	cbnz	r5, b81b4 <_ZN6AB18054loopEv+0x68>
   b8156:	f007 fe83 	bl	bfe60 <_ZN9TimeClass7isValidEv>
   b815a:	b358      	cbz	r0, b81b4 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b815c:	2600      	movs	r6, #0
   b815e:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b8160:	a904      	add	r1, sp, #16
   b8162:	4628      	mov	r0, r5
        tm = 0;
   b8164:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b8168:	f004 feea 	bl	bcf40 <spark_sync_time_last>
   b816c:	b310      	cbz	r0, b81b4 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b816e:	2501      	movs	r5, #1
   b8170:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b8172:	f007 fe92 	bl	bfe9a <_ZN9TimeClass3nowEv>
   b8176:	17c3      	asrs	r3, r0, #31
   b8178:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b817c:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b817e:	9500      	str	r5, [sp, #0]
   b8180:	4620      	mov	r0, r4
   b8182:	f7ff ffd3 	bl	b812c <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b8186:	a902      	add	r1, sp, #8
   b8188:	4620      	mov	r0, r4
        time = 0;
   b818a:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b818e:	f7ff ff39 	bl	b8004 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b8192:	4b13      	ldr	r3, [pc, #76]	; (b81e0 <_ZN6AB18054loopEv+0x94>)
   b8194:	4913      	ldr	r1, [pc, #76]	; (b81e4 <_ZN6AB18054loopEv+0x98>)
   b8196:	681b      	ldr	r3, [r3, #0]
   b8198:	9300      	str	r3, [sp, #0]
   b819a:	a804      	add	r0, sp, #16
   b819c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b81a0:	f007 fe1c 	bl	bfddc <_ZN9TimeClass6formatExPKc>
   b81a4:	4810      	ldr	r0, [pc, #64]	; (b81e8 <_ZN6AB18054loopEv+0x9c>)
   b81a6:	9a04      	ldr	r2, [sp, #16]
   b81a8:	4910      	ldr	r1, [pc, #64]	; (b81ec <_ZN6AB18054loopEv+0xa0>)
   b81aa:	f7fb ffe2 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
   b81ae:	a804      	add	r0, sp, #16
   b81b0:	f007 fac0 	bl	bf734 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b81b4:	6963      	ldr	r3, [r4, #20]
   b81b6:	b18b      	cbz	r3, b81dc <_ZN6AB18054loopEv+0x90>
   b81b8:	f004 fb9c 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b81bc:	6923      	ldr	r3, [r4, #16]
   b81be:	1ac0      	subs	r0, r0, r3
   b81c0:	6963      	ldr	r3, [r4, #20]
   b81c2:	4298      	cmp	r0, r3
   b81c4:	d30a      	bcc.n	b81dc <_ZN6AB18054loopEv+0x90>
   b81c6:	f004 fb95 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b81ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b81ce:	6120      	str	r0, [r4, #16]
            setWDT();
   b81d0:	4620      	mov	r0, r4
}
   b81d2:	b009      	add	sp, #36	; 0x24
   b81d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b81d8:	f7ff bc0c 	b.w	b79f4 <_ZN6AB18056setWDTEi>
}
   b81dc:	b009      	add	sp, #36	; 0x24
   b81de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b81e0:	2003d698 	.word	0x2003d698
   b81e4:	2003e6ac 	.word	0x2003e6ac
   b81e8:	2003e4c8 	.word	0x2003e4c8
   b81ec:	000c4655 	.word	0x000c4655

000b81f0 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b81f0:	b530      	push	{r4, r5, lr}
   b81f2:	4604      	mov	r4, r0
   b81f4:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b81f6:	b111      	cbz	r1, b81fe <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b81f8:	6840      	ldr	r0, [r0, #4]
   b81fa:	f005 fcb3 	bl	bdb64 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b81fe:	4620      	mov	r0, r4
   b8200:	f7ff fb64 	bl	b78cc <_ZN6AB180510detectChipEv>
   b8204:	ad06      	add	r5, sp, #24
   b8206:	2800      	cmp	r0, #0
   b8208:	d037      	beq.n	b827a <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b820a:	4620      	mov	r0, r4
   b820c:	f7ff fc9c 	bl	b7b48 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b8210:	2301      	movs	r3, #1
   b8212:	461a      	mov	r2, r3
   b8214:	2110      	movs	r1, #16
   b8216:	4620      	mov	r0, r4
   b8218:	f7ff fc6d 	bl	b7af6 <_ZN6AB180510isBitClearEhhb>
   b821c:	b1d8      	cbz	r0, b8256 <_ZN6AB18055setupEb+0x66>
   b821e:	f007 fe1f 	bl	bfe60 <_ZN9TimeClass7isValidEv>
   b8222:	b9c0      	cbnz	r0, b8256 <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b8224:	a902      	add	r1, sp, #8
   b8226:	4620      	mov	r0, r4
   b8228:	f7ff feec 	bl	b8004 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b822c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b8230:	f007 fd1a 	bl	bfc68 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b8234:	4b13      	ldr	r3, [pc, #76]	; (b8284 <_ZN6AB18055setupEb+0x94>)
   b8236:	4914      	ldr	r1, [pc, #80]	; (b8288 <_ZN6AB18055setupEb+0x98>)
   b8238:	681b      	ldr	r3, [r3, #0]
   b823a:	9300      	str	r3, [sp, #0]
   b823c:	4628      	mov	r0, r5
   b823e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b8242:	f007 fdcb 	bl	bfddc <_ZN9TimeClass6formatExPKc>
   b8246:	4811      	ldr	r0, [pc, #68]	; (b828c <_ZN6AB18055setupEb+0x9c>)
   b8248:	9a06      	ldr	r2, [sp, #24]
   b824a:	4911      	ldr	r1, [pc, #68]	; (b8290 <_ZN6AB18055setupEb+0xa0>)
   b824c:	f7fb ff91 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
   b8250:	4628      	mov	r0, r5
   b8252:	f007 fa6f 	bl	bf734 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8256:	4b0f      	ldr	r3, [pc, #60]	; (b8294 <_ZN6AB18055setupEb+0xa4>)
   b8258:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b825a:	4b0f      	ldr	r3, [pc, #60]	; (b8298 <_ZN6AB18055setupEb+0xa8>)
   b825c:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b825e:	4b0f      	ldr	r3, [pc, #60]	; (b829c <_ZN6AB18055setupEb+0xac>)
   b8260:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b8262:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b8266:	2300      	movs	r3, #0
   b8268:	a802      	add	r0, sp, #8
   b826a:	9500      	str	r5, [sp, #0]
   b826c:	f7fd fb16 	bl	b589c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b8270:	4628      	mov	r0, r5
   b8272:	f7fd f972 	bl	b555a <_ZNSt14_Function_baseD1Ev>
}
   b8276:	b00b      	add	sp, #44	; 0x2c
   b8278:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b827a:	4909      	ldr	r1, [pc, #36]	; (b82a0 <_ZN6AB18055setupEb+0xb0>)
   b827c:	4803      	ldr	r0, [pc, #12]	; (b828c <_ZN6AB18055setupEb+0x9c>)
   b827e:	f7ff fa9f 	bl	b77c0 <_ZNK5spark6Logger5errorEPKcz>
   b8282:	e7e8      	b.n	b8256 <_ZN6AB18055setupEb+0x66>
   b8284:	2003d698 	.word	0x2003d698
   b8288:	2003e6ac 	.word	0x2003e6ac
   b828c:	2003e4c8 	.word	0x2003e4c8
   b8290:	000c466b 	.word	0x000c466b
   b8294:	000b7a79 	.word	0x000b7a79
   b8298:	000b5537 	.word	0x000b5537
   b829c:	000b5523 	.word	0x000b5523
   b82a0:	000c4688 	.word	0x000c4688

000b82a4 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b82a4:	4b01      	ldr	r3, [pc, #4]	; (b82ac <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b82a6:	4a02      	ldr	r2, [pc, #8]	; (b82b0 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b82a8:	601a      	str	r2, [r3, #0]
}
   b82aa:	4770      	bx	lr
   b82ac:	2003e4c8 	.word	0x2003e4c8
   b82b0:	000c46a0 	.word	0x000c46a0

000b82b4 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b82b4:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b82b6:	2301      	movs	r3, #1
   b82b8:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b82ba:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b82bc:	4604      	mov	r4, r0
        if (th->func) {
   b82be:	b143      	cbz	r3, b82d2 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b82c0:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b82c2:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b82c4:	2301      	movs	r3, #1
   b82c6:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b82c8:	2000      	movs	r0, #0
    }
   b82ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b82ce:	f004 bae1 	b.w	bc894 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b82d2:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b82d4:	2800      	cmp	r0, #0
   b82d6:	d0f5      	beq.n	b82c4 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b82d8:	6883      	ldr	r3, [r0, #8]
   b82da:	b90b      	cbnz	r3, b82e0 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b82dc:	f008 f8f8 	bl	c04d0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b82e0:	68c3      	ldr	r3, [r0, #12]
   b82e2:	e7ee      	b.n	b82c2 <_ZN6Thread3runEPv+0xe>

000b82e4 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b82e4:	2a01      	cmp	r2, #1
   b82e6:	d102      	bne.n	b82ee <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b82e8:	6001      	str	r1, [r0, #0]
      }
   b82ea:	2000      	movs	r0, #0
   b82ec:	4770      	bx	lr
	  switch (__op)
   b82ee:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b82f0:	bf04      	itt	eq
   b82f2:	680b      	ldreq	r3, [r1, #0]
   b82f4:	6003      	streq	r3, [r0, #0]
	      break;
   b82f6:	e7f8      	b.n	b82ea <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b82f8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b82f8:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b82fa:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b82fc:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b82fe:	b135      	cbz	r5, b830e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b8300:	4628      	mov	r0, r5
   b8302:	f7fd f92a 	bl	b555a <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b8306:	2110      	movs	r1, #16
   b8308:	4628      	mov	r0, r5
   b830a:	f7fb fec8 	bl	b409e <_ZdlPvj>
   b830e:	4620      	mov	r0, r4
   b8310:	2114      	movs	r1, #20
      }
   b8312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b8316:	f7fb bec2 	b.w	b409e <_ZdlPvj>

000b831a <_ZN6Thread7disposeEv>:
    void dispose()
   b831a:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b831c:	6803      	ldr	r3, [r0, #0]
   b831e:	4604      	mov	r4, r0
        if (!isValid())
   b8320:	b1ab      	cbz	r3, b834e <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b8322:	6858      	ldr	r0, [r3, #4]
   b8324:	f004 fa66 	bl	bc7f4 <os_thread_is_current>
   b8328:	b988      	cbnz	r0, b834e <_ZN6Thread7disposeEv+0x34>
   b832a:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b832c:	7c5a      	ldrb	r2, [r3, #17]
   b832e:	b912      	cbnz	r2, b8336 <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b8330:	6858      	ldr	r0, [r3, #4]
   b8332:	f004 fa67 	bl	bc804 <os_thread_join>
        os_thread_cleanup(d_->handle);
   b8336:	6823      	ldr	r3, [r4, #0]
   b8338:	6858      	ldr	r0, [r3, #4]
   b833a:	f004 fa6b 	bl	bc814 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b833e:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b8340:	2300      	movs	r3, #0
   b8342:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b8344:	b118      	cbz	r0, b834e <_ZN6Thread7disposeEv+0x34>
    }
   b8346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b834a:	f7ff bfd5 	b.w	b82f8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b834e:	bd10      	pop	{r4, pc}

000b8350 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b8350:	4a05      	ldr	r2, [pc, #20]	; (b8368 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b8352:	6002      	str	r2, [r0, #0]
   b8354:	2200      	movs	r2, #0
   b8356:	6042      	str	r2, [r0, #4]
   b8358:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b835a:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b835e:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b8362:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b8366:	4770      	bx	lr
   b8368:	000c46e0 	.word	0x000c46e0

000b836c <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b836c:	b510      	push	{r4, lr}
    if (!_instance) {
   b836e:	4c07      	ldr	r4, [pc, #28]	; (b838c <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b8370:	6823      	ldr	r3, [r4, #0]
   b8372:	b943      	cbnz	r3, b8386 <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b8374:	f240 4064 	movw	r0, #1124	; 0x464
   b8378:	f7fb fe8d 	bl	b4096 <_Znwj>
   b837c:	4603      	mov	r3, r0
   b837e:	b108      	cbz	r0, b8384 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b8380:	f7ff ffe6 	bl	b8350 <_ZN19BackgroundPublishRKC1Ev>
   b8384:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b8386:	6820      	ldr	r0, [r4, #0]
   b8388:	bd10      	pop	{r4, pc}
   b838a:	bf00      	nop
   b838c:	2003e4d0 	.word	0x2003e4d0

000b8390 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b8390:	b538      	push	{r3, r4, r5, lr}
   b8392:	4604      	mov	r4, r0
    if(thread)
   b8394:	6840      	ldr	r0, [r0, #4]
   b8396:	b190      	cbz	r0, b83be <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b8398:	2302      	movs	r3, #2
   b839a:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b839c:	f7ff ffbd 	bl	b831a <_ZN6Thread7disposeEv>
        delete thread;
   b83a0:	6865      	ldr	r5, [r4, #4]
   b83a2:	b155      	cbz	r5, b83ba <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b83a4:	4628      	mov	r0, r5
   b83a6:	f7ff ffb8 	bl	b831a <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b83aa:	6828      	ldr	r0, [r5, #0]
   b83ac:	b108      	cbz	r0, b83b2 <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b83ae:	f7ff ffa3 	bl	b82f8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b83b2:	2104      	movs	r1, #4
   b83b4:	4628      	mov	r0, r5
   b83b6:	f7fb fe72 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b83ba:	2300      	movs	r3, #0
   b83bc:	6063      	str	r3, [r4, #4]
    }
}
   b83be:	bd38      	pop	{r3, r4, r5, pc}

000b83c0 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b83c0:	b510      	push	{r4, lr}
   b83c2:	4b05      	ldr	r3, [pc, #20]	; (b83d8 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b83c4:	6003      	str	r3, [r0, #0]
   b83c6:	4604      	mov	r4, r0
    stop();
   b83c8:	f7ff ffe2 	bl	b8390 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b83cc:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b83d0:	f7fd f8c3 	bl	b555a <_ZNSt14_Function_baseD1Ev>
}
   b83d4:	4620      	mov	r0, r4
   b83d6:	bd10      	pop	{r4, pc}
   b83d8:	000c46e0 	.word	0x000c46e0

000b83dc <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b83dc:	b510      	push	{r4, lr}
   b83de:	4604      	mov	r4, r0
}
   b83e0:	f7ff ffee 	bl	b83c0 <_ZN19BackgroundPublishRKD1Ev>
   b83e4:	4620      	mov	r0, r4
   b83e6:	f240 4164 	movw	r1, #1124	; 0x464
   b83ea:	f7fb fe58 	bl	b409e <_ZdlPvj>
   b83ee:	4620      	mov	r0, r4
   b83f0:	bd10      	pop	{r4, pc}

000b83f2 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b83f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   b83f4:	4604      	mov	r4, r0
   b83f6:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b83f8:	f100 060d 	add.w	r6, r0, #13
   b83fc:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b8400:	7b23      	ldrb	r3, [r4, #12]
   b8402:	b91b      	cbnz	r3, b840c <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b8404:	2001      	movs	r0, #1
   b8406:	f004 fe93 	bl	bd130 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b840a:	e7f9      	b.n	b8400 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b840c:	7b23      	ldrb	r3, [r4, #12]
   b840e:	2b02      	cmp	r3, #2
   b8410:	d064      	beq.n	b84dc <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b8412:	68a0      	ldr	r0, [r4, #8]
   b8414:	f004 fa0e 	bl	bc834 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b8418:	68a0      	ldr	r0, [r4, #8]
   b841a:	f004 fa13 	bl	bc844 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b841e:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b8422:	f88d 3000 	strb.w	r3, [sp]
   b8426:	463a      	mov	r2, r7
   b8428:	233c      	movs	r3, #60	; 0x3c
   b842a:	4631      	mov	r1, r6
   b842c:	a806      	add	r0, sp, #24
   b842e:	f005 f94b 	bl	bd6c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b8432:	9d06      	ldr	r5, [sp, #24]
   b8434:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b8436:	b933      	cbnz	r3, b8446 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b8438:	7b23      	ldrb	r3, [r4, #12]
   b843a:	2b02      	cmp	r3, #2
   b843c:	d003      	beq.n	b8446 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b843e:	2001      	movs	r0, #1
   b8440:	f004 fe76 	bl	bd130 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b8444:	e7f5      	b.n	b8432 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b8446:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b844a:	b31b      	cbz	r3, b8494 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b844c:	2000      	movs	r0, #0
   b844e:	f004 fcdd 	bl	bce0c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b8452:	b120      	cbz	r0, b845e <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b8454:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b8456:	b913      	cbnz	r3, b845e <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b8458:	f004 fd3a 	bl	bced0 <spark_process>
    }
   b845c:	e7fa      	b.n	b8454 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b845e:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b8460:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b8464:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b8466:	1e59      	subs	r1, r3, #1
   b8468:	424b      	negs	r3, r1
   b846a:	414b      	adcs	r3, r1
   b846c:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b8470:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b8474:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b8478:	b90b      	cbnz	r3, b847e <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b847a:	f008 f829 	bl	c04d0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b847e:	ab05      	add	r3, sp, #20
   b8480:	9300      	str	r3, [sp, #0]
   b8482:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b8486:	ab04      	add	r3, sp, #16
   b8488:	aa03      	add	r2, sp, #12
   b848a:	f10d 010b 	add.w	r1, sp, #11
   b848e:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b8492:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b8494:	68a0      	ldr	r0, [r4, #8]
   b8496:	f004 f9cd 	bl	bc834 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b849a:	7b23      	ldrb	r3, [r4, #12]
   b849c:	2b02      	cmp	r3, #2
   b849e:	d017      	beq.n	b84d0 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b84a0:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b84a4:	2500      	movs	r5, #0
   b84a6:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b84aa:	b143      	cbz	r3, b84be <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b84ac:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b84b0:	2203      	movs	r2, #3
   b84b2:	4608      	mov	r0, r1
   b84b4:	4798      	blx	r3
	    _M_manager = nullptr;
   b84b6:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b84ba:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b84be:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b84c0:	68a0      	ldr	r0, [r4, #8]
   b84c2:	7323      	strb	r3, [r4, #12]
   b84c4:	f004 f9be 	bl	bc844 <os_mutex_unlock>
   b84c8:	a807      	add	r0, sp, #28
   b84ca:	f7fc f8b5 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b84ce:	e797      	b.n	b8400 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b84d0:	68a0      	ldr	r0, [r4, #8]
   b84d2:	f004 f9b7 	bl	bc844 <os_mutex_unlock>
   b84d6:	a807      	add	r0, sp, #28
   b84d8:	f7fc f8ae 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b84dc:	b009      	add	sp, #36	; 0x24
   b84de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b84e0 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b84e0:	6800      	ldr	r0, [r0, #0]
   b84e2:	f7ff bf86 	b.w	b83f2 <_ZN19BackgroundPublishRK8thread_fEv>

000b84e6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b84e6:	b513      	push	{r0, r1, r4, lr}
   b84e8:	460b      	mov	r3, r1
   b84ea:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b84ec:	e9d0 0100 	ldrd	r0, r1, [r0]
   b84f0:	466c      	mov	r4, sp
   b84f2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b84f6:	e893 0003 	ldmia.w	r3, {r0, r1}
   b84fa:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b84fe:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8502:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8506:	b002      	add	sp, #8
   b8508:	bd10      	pop	{r4, pc}
	...

000b850c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b850c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8510:	4606      	mov	r6, r0
   b8512:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b8514:	2014      	movs	r0, #20
   b8516:	4926      	ldr	r1, [pc, #152]	; (b85b0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b8518:	4617      	mov	r7, r2
   b851a:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b851c:	f007 ffce 	bl	c04bc <_ZnwjRKSt9nothrow_t>
   b8520:	4604      	mov	r4, r0
   b8522:	b130      	cbz	r0, b8532 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>
      : _M_head_impl() { }
   b8524:	2000      	movs	r0, #0
            exited(false) {
   b8526:	e9c4 0000 	strd	r0, r0, [r4]
   b852a:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b852e:	7420      	strb	r0, [r4, #16]
   b8530:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b8532:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b8534:	2c00      	cmp	r4, #0
   b8536:	d031      	beq.n	b859c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b8538:	491d      	ldr	r1, [pc, #116]	; (b85b0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b853a:	2010      	movs	r0, #16
   b853c:	f007 ffbe 	bl	c04bc <_ZnwjRKSt9nothrow_t>
   b8540:	4605      	mov	r5, r0
   b8542:	b168      	cbz	r0, b8560 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b8544:	2300      	movs	r3, #0
   b8546:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8548:	4601      	mov	r1, r0
   b854a:	4638      	mov	r0, r7
   b854c:	f7ff ffcb 	bl	b84e6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8550:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8552:	68aa      	ldr	r2, [r5, #8]
   b8554:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8556:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8558:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b855a:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b855c:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b855e:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b8560:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b8562:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b8564:	b137      	cbz	r7, b8574 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b8566:	4638      	mov	r0, r7
   b8568:	f7fc fff7 	bl	b555a <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b856c:	2110      	movs	r1, #16
   b856e:	4638      	mov	r0, r7
   b8570:	f7fb fd95 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8574:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b8576:	6803      	ldr	r3, [r0, #0]
   b8578:	b183      	cbz	r3, b859c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b857a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b857c:	464a      	mov	r2, r9
   b857e:	e9cd 0300 	strd	r0, r3, [sp]
   b8582:	4641      	mov	r1, r8
   b8584:	4b0b      	ldr	r3, [pc, #44]	; (b85b4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b8586:	3004      	adds	r0, #4
   b8588:	f004 f92c 	bl	bc7e4 <os_thread_create>
   b858c:	b930      	cbnz	r0, b859c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b858e:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b8590:	7c1b      	ldrb	r3, [r3, #16]
   b8592:	b94b      	cbnz	r3, b85a8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b8594:	2001      	movs	r0, #1
   b8596:	f004 f99d 	bl	bc8d4 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b859a:	e7f8      	b.n	b858e <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b859c:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b859e:	2300      	movs	r3, #0
   b85a0:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b85a2:	b108      	cbz	r0, b85a8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b85a4:	f7ff fea8 	bl	b82f8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b85a8:	4630      	mov	r0, r6
   b85aa:	b003      	add	sp, #12
   b85ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b85b0:	000c5164 	.word	0x000c5164
   b85b4:	000b82b5 	.word	0x000b82b5

000b85b8 <_ZN19BackgroundPublishRK5startEv>:
{
   b85b8:	b530      	push	{r4, r5, lr}
    if(!thread)
   b85ba:	6843      	ldr	r3, [r0, #4]
{
   b85bc:	b087      	sub	sp, #28
   b85be:	4604      	mov	r4, r0
    if(!thread)
   b85c0:	b9c3      	cbnz	r3, b85f4 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b85c2:	3008      	adds	r0, #8
   b85c4:	f004 f92e 	bl	bc824 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b85c8:	4b0b      	ldr	r3, [pc, #44]	; (b85f8 <_ZN19BackgroundPublishRK5startEv+0x40>)
   b85ca:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b85cc:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b85ce:	4b0b      	ldr	r3, [pc, #44]	; (b85fc <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b85d0:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b85d2:	9304      	str	r3, [sp, #16]
   b85d4:	f7fb fd5f 	bl	b4096 <_Znwj>
   b85d8:	4605      	mov	r5, r0
   b85da:	b138      	cbz	r0, b85ec <_ZN19BackgroundPublishRK5startEv+0x34>
   b85dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b85e0:	9300      	str	r3, [sp, #0]
   b85e2:	4907      	ldr	r1, [pc, #28]	; (b8600 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b85e4:	2302      	movs	r3, #2
   b85e6:	aa02      	add	r2, sp, #8
   b85e8:	f7ff ff90 	bl	b850c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b85ec:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b85ee:	a802      	add	r0, sp, #8
   b85f0:	f7fc ffb3 	bl	b555a <_ZNSt14_Function_baseD1Ev>
}
   b85f4:	b007      	add	sp, #28
   b85f6:	bd30      	pop	{r4, r5, pc}
   b85f8:	000b84e1 	.word	0x000b84e1
   b85fc:	000b82e5 	.word	0x000b82e5
   b8600:	000c46c4 	.word	0x000c46c4

000b8604 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b8604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8608:	4604      	mov	r4, r0
   b860a:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b860c:	6880      	ldr	r0, [r0, #8]
   b860e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b8610:	4698      	mov	r8, r3
   b8612:	460d      	mov	r5, r1
   b8614:	4616      	mov	r6, r2
   b8616:	f004 f90d 	bl	bc834 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b861a:	6863      	ldr	r3, [r4, #4]
   b861c:	b11b      	cbz	r3, b8626 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b861e:	7b23      	ldrb	r3, [r4, #12]
   b8620:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b8624:	b133      	cbz	r3, b8634 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b8626:	68a0      	ldr	r0, [r4, #8]
   b8628:	f004 f90c 	bl	bc844 <os_mutex_unlock>
    {
        return false;
   b862c:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b862e:	b005      	add	sp, #20
   b8630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8634:	68a0      	ldr	r0, [r4, #8]
   b8636:	f004 f905 	bl	bc844 <os_mutex_unlock>
    if(!name)
   b863a:	2d00      	cmp	r5, #0
   b863c:	d03d      	beq.n	b86ba <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b863e:	2240      	movs	r2, #64	; 0x40
   b8640:	4629      	mov	r1, r5
   b8642:	f104 000d 	add.w	r0, r4, #13
   b8646:	f008 fdd2 	bl	c11ee <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b864a:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b864e:	b38e      	cbz	r6, b86b4 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b8650:	f240 4201 	movw	r2, #1025	; 0x401
   b8654:	4631      	mov	r1, r6
   b8656:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b865a:	f008 fdc8 	bl	c11ee <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b865e:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b8662:	2300      	movs	r3, #0
   b8664:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b8666:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b8668:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b866c:	b13b      	cbz	r3, b867e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b866e:	2202      	movs	r2, #2
   b8670:	4639      	mov	r1, r7
   b8672:	4668      	mov	r0, sp
   b8674:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8676:	68fb      	ldr	r3, [r7, #12]
   b8678:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b867a:	68bb      	ldr	r3, [r7, #8]
   b867c:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b867e:	4629      	mov	r1, r5
   b8680:	4668      	mov	r0, sp
   b8682:	f7ff ff30 	bl	b84e6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8686:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8688:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b868c:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8690:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8692:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b8694:	4668      	mov	r0, sp
   b8696:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b869a:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b869e:	9203      	str	r2, [sp, #12]
   b86a0:	f7fc ff5b 	bl	b555a <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b86a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b86a6:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b86aa:	2001      	movs	r0, #1
    event_flags = flags;
   b86ac:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b86b0:	7320      	strb	r0, [r4, #12]
    return true;
   b86b2:	e7bc      	b.n	b862e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b86b4:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b86b8:	e7d3      	b.n	b8662 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b86ba:	4628      	mov	r0, r5
   b86bc:	e7b7      	b.n	b862e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
	...

000b86c0 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b86c0:	b510      	push	{r4, lr}
   b86c2:	4b05      	ldr	r3, [pc, #20]	; (b86d8 <_ZN10JsonBufferD1Ev+0x18>)
   b86c4:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b86c6:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b86c8:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b86ca:	b91b      	cbnz	r3, b86d4 <_ZN10JsonBufferD1Ev+0x14>
   b86cc:	6840      	ldr	r0, [r0, #4]
   b86ce:	b108      	cbz	r0, b86d4 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b86d0:	f004 fcb6 	bl	bd040 <free>
	}
}
   b86d4:	4620      	mov	r0, r4
   b86d6:	bd10      	pop	{r4, pc}
   b86d8:	000c4700 	.word	0x000c4700

000b86dc <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b86dc:	b510      	push	{r4, lr}
   b86de:	4604      	mov	r4, r0
}
   b86e0:	f7ff ffee 	bl	b86c0 <_ZN10JsonBufferD1Ev>
   b86e4:	4620      	mov	r0, r4
   b86e6:	2114      	movs	r1, #20
   b86e8:	f7fb fcd9 	bl	b409e <_ZdlPvj>
   b86ec:	4620      	mov	r0, r4
   b86ee:	bd10      	pop	{r4, pc}

000b86f0 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b86f0:	b510      	push	{r4, lr}
   b86f2:	4b03      	ldr	r3, [pc, #12]	; (b8700 <_ZN10JsonWriterD1Ev+0x10>)
   b86f4:	6003      	str	r3, [r0, #0]
   b86f6:	4604      	mov	r4, r0
   b86f8:	f7ff ffe2 	bl	b86c0 <_ZN10JsonBufferD1Ev>

}
   b86fc:	4620      	mov	r0, r4
   b86fe:	bd10      	pop	{r4, pc}
   b8700:	000c4720 	.word	0x000c4720

000b8704 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b8704:	b510      	push	{r4, lr}
   b8706:	4604      	mov	r4, r0
}
   b8708:	f7ff fff2 	bl	b86f0 <_ZN10JsonWriterD1Ev>
   b870c:	4620      	mov	r0, r4
   b870e:	2130      	movs	r1, #48	; 0x30
   b8710:	f7fb fcc5 	bl	b409e <_ZdlPvj>
   b8714:	4620      	mov	r0, r4
   b8716:	bd10      	pop	{r4, pc}

000b8718 <_ZN12JsonModifierD1Ev>:

JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {

}

JsonModifier::~JsonModifier() {
   b8718:	b510      	push	{r4, lr}
   b871a:	4b03      	ldr	r3, [pc, #12]	; (b8728 <_ZN12JsonModifierD1Ev+0x10>)
   b871c:	6003      	str	r3, [r0, #0]
   b871e:	4604      	mov	r4, r0
   b8720:	f7ff ffe6 	bl	b86f0 <_ZN10JsonWriterD1Ev>

}
   b8724:	4620      	mov	r0, r4
   b8726:	bd10      	pop	{r4, pc}
   b8728:	000c4730 	.word	0x000c4730

000b872c <_ZN12JsonModifierD0Ev>:
JsonModifier::~JsonModifier() {
   b872c:	b510      	push	{r4, lr}
   b872e:	4604      	mov	r4, r0
}
   b8730:	f7ff fff2 	bl	b8718 <_ZN12JsonModifierD1Ev>
   b8734:	4620      	mov	r0, r4
   b8736:	2140      	movs	r1, #64	; 0x40
   b8738:	f7fb fcb1 	bl	b409e <_ZdlPvj>
   b873c:	4620      	mov	r0, r4
   b873e:	bd10      	pop	{r4, pc}

000b8740 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b8740:	b510      	push	{r4, lr}
   b8742:	4b07      	ldr	r3, [pc, #28]	; (b8760 <_ZN10JsonParserD1Ev+0x20>)
   b8744:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b8746:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b8748:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b874a:	b91b      	cbnz	r3, b8754 <_ZN10JsonParserD1Ev+0x14>
   b874c:	6940      	ldr	r0, [r0, #20]
   b874e:	b108      	cbz	r0, b8754 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b8750:	f004 fc76 	bl	bd040 <free>
JsonParser::~JsonParser() {
   b8754:	4620      	mov	r0, r4
   b8756:	f7ff ffb3 	bl	b86c0 <_ZN10JsonBufferD1Ev>
}
   b875a:	4620      	mov	r0, r4
   b875c:	bd10      	pop	{r4, pc}
   b875e:	bf00      	nop
   b8760:	000c4710 	.word	0x000c4710

000b8764 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b8764:	b510      	push	{r4, lr}
   b8766:	4604      	mov	r4, r0
}
   b8768:	f7ff ffea 	bl	b8740 <_ZN10JsonParserD1Ev>
   b876c:	4620      	mov	r0, r4
   b876e:	212c      	movs	r1, #44	; 0x2c
   b8770:	f7fb fc95 	bl	b409e <_ZdlPvj>
   b8774:	4620      	mov	r0, r4
   b8776:	bd10      	pop	{r4, pc}

000b8778 <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
   b8778:	4a03      	ldr	r2, [pc, #12]	; (b8788 <_ZN10JsonBufferC1Ev+0x10>)
   b877a:	6002      	str	r2, [r0, #0]
   b877c:	2200      	movs	r2, #0
   b877e:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b8782:	60c2      	str	r2, [r0, #12]
   b8784:	7402      	strb	r2, [r0, #16]
}
   b8786:	4770      	bx	lr
   b8788:	000c4700 	.word	0x000c4700

000b878c <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b878c:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b878e:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b8790:	4604      	mov	r4, r0
   b8792:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b8794:	b10b      	cbz	r3, b879a <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b8796:	2000      	movs	r0, #0
}
   b8798:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b879a:	6840      	ldr	r0, [r0, #4]
   b879c:	b138      	cbz	r0, b87ae <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b879e:	f004 fc57 	bl	bd050 <realloc>
		if (newBuffer) {
   b87a2:	2800      	cmp	r0, #0
   b87a4:	d0f7      	beq.n	b8796 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b87a6:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b87aa:	2001      	movs	r0, #1
   b87ac:	e7f4      	b.n	b8798 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b87ae:	4608      	mov	r0, r1
   b87b0:	f004 fc3e 	bl	bd030 <malloc>
   b87b4:	e7f5      	b.n	b87a2 <_ZN10JsonBuffer8allocateEj+0x16>

000b87b6 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b87b6:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b87b8:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b87ba:	460e      	mov	r6, r1
   b87bc:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b87be:	18d1      	adds	r1, r2, r3
   b87c0:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b87c2:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b87c4:	b172      	cbz	r2, b87e4 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b87c6:	6882      	ldr	r2, [r0, #8]
   b87c8:	428a      	cmp	r2, r1
   b87ca:	d30b      	bcc.n	b87e4 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b87cc:	6860      	ldr	r0, [r4, #4]
   b87ce:	68e3      	ldr	r3, [r4, #12]
   b87d0:	462a      	mov	r2, r5
   b87d2:	4631      	mov	r1, r6
   b87d4:	4418      	add	r0, r3
   b87d6:	f008 fbfb 	bl	c0fd0 <memcpy>
	offset += dataLen;
   b87da:	68e2      	ldr	r2, [r4, #12]
   b87dc:	442a      	add	r2, r5
   b87de:	60e2      	str	r2, [r4, #12]
	return true;
   b87e0:	2001      	movs	r0, #1
}
   b87e2:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b87e4:	4620      	mov	r0, r4
   b87e6:	f7ff ffd1 	bl	b878c <_ZN10JsonBuffer8allocateEj>
   b87ea:	2800      	cmp	r0, #0
   b87ec:	d1ee      	bne.n	b87cc <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b87ee:	e7f8      	b.n	b87e2 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b87f0 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b87f0:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b87f2:	2100      	movs	r1, #0
   b87f4:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b87f6:	b123      	cbz	r3, b8802 <_ZN10JsonBuffer5clearEv+0x12>
   b87f8:	6882      	ldr	r2, [r0, #8]
   b87fa:	b112      	cbz	r2, b8802 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b87fc:	4618      	mov	r0, r3
   b87fe:	f008 bc0f 	b.w	c1020 <memset>
}
   b8802:	4770      	bx	lr

000b8804 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b8804:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b8806:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b880a:	2200      	movs	r2, #0
   b880c:	60c2      	str	r2, [r0, #12]
   b880e:	2201      	movs	r2, #1
   b8810:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b8812:	6143      	str	r3, [r0, #20]
   b8814:	4a02      	ldr	r2, [pc, #8]	; (b8820 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b8816:	9b02      	ldr	r3, [sp, #8]
   b8818:	6002      	str	r2, [r0, #0]
   b881a:	61c3      	str	r3, [r0, #28]
}
   b881c:	bd10      	pop	{r4, pc}
   b881e:	bf00      	nop
   b8820:	000c4710 	.word	0x000c4710

000b8824 <_ZNK10JsonParser13getOuterArrayEv>:
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b8824:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b8828:	4283      	cmp	r3, r0
   b882a:	d904      	bls.n	b8836 <_ZNK10JsonParser13getOuterArrayEv+0x12>
		if (token->type == JsonParserGeneratorRK::JSMN_ARRAY) {
   b882c:	7802      	ldrb	r2, [r0, #0]
   b882e:	2a02      	cmp	r2, #2
   b8830:	d002      	beq.n	b8838 <_ZNK10JsonParser13getOuterArrayEv+0x14>
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b8832:	3010      	adds	r0, #16
   b8834:	e7f8      	b.n	b8828 <_ZNK10JsonParser13getOuterArrayEv+0x4>
	return 0;
   b8836:	2000      	movs	r0, #0
}
   b8838:	4770      	bx	lr

000b883a <_ZNK10JsonParser14getOuterObjectEv>:
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   b883a:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b883e:	4298      	cmp	r0, r3
   b8840:	d204      	bcs.n	b884c <_ZNK10JsonParser14getOuterObjectEv+0x12>
   b8842:	7803      	ldrb	r3, [r0, #0]
		return 0;
   b8844:	2b01      	cmp	r3, #1
   b8846:	bf18      	it	ne
   b8848:	2000      	movne	r0, #0
   b884a:	4770      	bx	lr
   b884c:	2000      	movs	r0, #0
}
   b884e:	4770      	bx	lr

000b8850 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b8850:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b8852:	6813      	ldr	r3, [r2, #0]
   b8854:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b8856:	6813      	ldr	r3, [r2, #0]
   b8858:	f103 0410 	add.w	r4, r3, #16
   b885c:	6014      	str	r4, [r2, #0]
   b885e:	6986      	ldr	r6, [r0, #24]
   b8860:	42b4      	cmp	r4, r6
   b8862:	d20a      	bcs.n	b887a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b8864:	699b      	ldr	r3, [r3, #24]
   b8866:	688c      	ldr	r4, [r1, #8]
   b8868:	42a3      	cmp	r3, r4
   b886a:	da01      	bge.n	b8870 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b886c:	42ab      	cmp	r3, r5
   b886e:	ddf2      	ble.n	b8856 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b8870:	42a3      	cmp	r3, r4
   b8872:	bfcc      	ite	gt
   b8874:	2000      	movgt	r0, #0
   b8876:	2001      	movle	r0, #1
   b8878:	e000      	b.n	b887c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b887a:	2000      	movs	r0, #0
}
   b887c:	bd70      	pop	{r4, r5, r6, pc}

000b887e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b887e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8880:	f101 0310 	add.w	r3, r1, #16
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b8884:	4604      	mov	r4, r0
   b8886:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8888:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b888a:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b888c:	9801      	ldr	r0, [sp, #4]
   b888e:	69a3      	ldr	r3, [r4, #24]
   b8890:	4283      	cmp	r3, r0
   b8892:	d90b      	bls.n	b88ac <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
   b8894:	6882      	ldr	r2, [r0, #8]
   b8896:	688b      	ldr	r3, [r1, #8]
   b8898:	429a      	cmp	r2, r3
   b889a:	da07      	bge.n	b88ac <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
		if (desiredIndex == index) {
   b889c:	42b5      	cmp	r5, r6
   b889e:	d006      	beq.n	b88ae <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x30>
		skipObject(container, token);
   b88a0:	aa01      	add	r2, sp, #4
   b88a2:	4620      	mov	r0, r4
		index++;
   b88a4:	3501      	adds	r5, #1
		skipObject(container, token);
   b88a6:	f7ff ffd3 	bl	b8850 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b88aa:	e7ef      	b.n	b888c <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0xe>
	return 0;
   b88ac:	2000      	movs	r0, #0
}
   b88ae:	b002      	add	sp, #8
   b88b0:	bd70      	pop	{r4, r5, r6, pc}

000b88b2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b88b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b88b6:	9d08      	ldr	r5, [sp, #32]
   b88b8:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b88ba:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b88be:	4604      	mov	r4, r0
   b88c0:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b88c2:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b88c4:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b88c6:	9801      	ldr	r0, [sp, #4]
   b88c8:	69a3      	ldr	r3, [r4, #24]
   b88ca:	4283      	cmp	r3, r0
   b88cc:	d91a      	bls.n	b8904 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b88ce:	6882      	ldr	r2, [r0, #8]
   b88d0:	688b      	ldr	r3, [r1, #8]
   b88d2:	429a      	cmp	r2, r3
   b88d4:	da16      	bge.n	b8904 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b88d6:	42ae      	cmp	r6, r5
   b88d8:	d10b      	bne.n	b88f2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b88da:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b88dc:	aa01      	add	r2, sp, #4
   b88de:	4620      	mov	r0, r4
   b88e0:	f7ff ffb6 	bl	b8850 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b88e4:	b128      	cbz	r0, b88f2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b88e6:	9b01      	ldr	r3, [sp, #4]
   b88e8:	f8c8 3000 	str.w	r3, [r8]
}
   b88ec:	b002      	add	sp, #8
   b88ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b88f2:	aa01      	add	r2, sp, #4
   b88f4:	4620      	mov	r0, r4
   b88f6:	f7ff ffab 	bl	b8850 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b88fa:	4620      	mov	r0, r4
		index++;
   b88fc:	3601      	adds	r6, #1
		skipObject(container, token);
   b88fe:	f7ff ffa7 	bl	b8850 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b8902:	e7e0      	b.n	b88c6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b8904:	2000      	movs	r0, #0
   b8906:	e7f1      	b.n	b88ec <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b8908 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b8908:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b890a:	3b01      	subs	r3, #1
   b890c:	2400      	movs	r4, #0
   b890e:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b8912:	1bf6      	subs	r6, r6, r7
   b8914:	42a6      	cmp	r6, r4
   b8916:	dd08      	ble.n	b892a <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b8918:	42a3      	cmp	r3, r4
   b891a:	dd06      	ble.n	b892a <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b891c:	6845      	ldr	r5, [r0, #4]
   b891e:	443d      	add	r5, r7
   b8920:	5d2d      	ldrb	r5, [r5, r4]
   b8922:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b8926:	3401      	adds	r4, #1
   b8928:	e7f1      	b.n	b890e <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b892a:	2300      	movs	r3, #0
   b892c:	7013      	strb	r3, [r2, #0]
}
   b892e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8930 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b8930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8932:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b8934:	2310      	movs	r3, #16
   b8936:	466a      	mov	r2, sp
   b8938:	f7ff ffe6 	bl	b8908 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b893c:	4904      	ldr	r1, [pc, #16]	; (b8950 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b893e:	4622      	mov	r2, r4
   b8940:	4668      	mov	r0, sp
   b8942:	f004 fb95 	bl	bd070 <sscanf>
}
   b8946:	1e43      	subs	r3, r0, #1
   b8948:	4258      	negs	r0, r3
   b894a:	4158      	adcs	r0, r3
   b894c:	b004      	add	sp, #16
   b894e:	bd10      	pop	{r4, pc}
   b8950:	000c36ef 	.word	0x000c36ef

000b8954 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b8954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8956:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b8958:	2310      	movs	r3, #16
   b895a:	466a      	mov	r2, sp
   b895c:	f7ff ffd4 	bl	b8908 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b8960:	4668      	mov	r0, sp
   b8962:	2100      	movs	r1, #0
   b8964:	f009 fa8e 	bl	c1e84 <strtof>
}
   b8968:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b896a:	ed84 0a00 	vstr	s0, [r4]
}
   b896e:	b004      	add	sp, #16
   b8970:	bd10      	pop	{r4, pc}

000b8972 <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
   b8972:	b510      	push	{r4, lr}
   b8974:	4604      	mov	r4, r0
	if (str) {
   b8976:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b8978:	460b      	mov	r3, r1
	if (str) {
   b897a:	b128      	cbz	r0, b8988 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b897c:	f006 ffbd 	bl	bf8fa <_ZN6String6concatEc>
		length++;
   b8980:	68e3      	ldr	r3, [r4, #12]
   b8982:	3301      	adds	r3, #1
   b8984:	60e3      	str	r3, [r4, #12]
}
   b8986:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b8988:	6860      	ldr	r0, [r4, #4]
   b898a:	2800      	cmp	r0, #0
   b898c:	d0f8      	beq.n	b8980 <_ZN16JsonParserString6appendEc+0xe>
   b898e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b8992:	3a01      	subs	r2, #1
   b8994:	428a      	cmp	r2, r1
			buf[length] = ch;
   b8996:	bf88      	it	hi
   b8998:	5443      	strbhi	r3, [r0, r1]
   b899a:	e7f1      	b.n	b8980 <_ZN16JsonParserString6appendEc+0xe>

000b899c <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b899c:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b899e:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b89a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b89a2:	4608      	mov	r0, r1
		str.append((char)unicode);
   b89a4:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b89a6:	d804      	bhi.n	b89b2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b89a8:	b003      	add	sp, #12
   b89aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b89ae:	f7ff bfe0 	b.w	b8972 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b89b2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b89b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b89ba:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b89be:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b89c2:	d207      	bcs.n	b89d4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b89c4:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b89c8:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b89ca:	f7ff ffd2 	bl	b8972 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b89ce:	9801      	ldr	r0, [sp, #4]
   b89d0:	4621      	mov	r1, r4
   b89d2:	e7e9      	b.n	b89a8 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b89d4:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b89d6:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b89da:	9001      	str	r0, [sp, #4]
   b89dc:	f7ff ffc9 	bl	b8972 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b89e0:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b89e4:	9801      	ldr	r0, [sp, #4]
   b89e6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b89ea:	e7ee      	b.n	b89ca <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>

000b89ec <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b89ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b89f0:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b89f2:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b89f4:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b8ac4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b89f8:	4680      	mov	r8, r0
   b89fa:	460f      	mov	r7, r1
   b89fc:	4615      	mov	r5, r2
			escape = false;
   b89fe:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b8a00:	68b8      	ldr	r0, [r7, #8]
   b8a02:	42b0      	cmp	r0, r6
   b8a04:	dd5a      	ble.n	b8abc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b8a06:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8a0a:	5d99      	ldrb	r1, [r3, r6]
   b8a0c:	199a      	adds	r2, r3, r6
		if (escape) {
   b8a0e:	2c00      	cmp	r4, #0
   b8a10:	d04b      	beq.n	b8aaa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b8a12:	2975      	cmp	r1, #117	; 0x75
   b8a14:	d805      	bhi.n	b8a22 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b8a16:	296d      	cmp	r1, #109	; 0x6d
   b8a18:	d807      	bhi.n	b8a2a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b8a1a:	2962      	cmp	r1, #98	; 0x62
   b8a1c:	d01e      	beq.n	b8a5c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b8a1e:	2966      	cmp	r1, #102	; 0x66
   b8a20:	d01e      	beq.n	b8a60 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b8a22:	4628      	mov	r0, r5
   b8a24:	f7ff ffa5 	bl	b8972 <_ZN16JsonParserString6appendEc>
				break;
   b8a28:	e03d      	b.n	b8aa6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b8a2a:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b8a2e:	2c07      	cmp	r4, #7
   b8a30:	d8f7      	bhi.n	b8a22 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b8a32:	f20f 0c08 	addw	ip, pc, #8
   b8a36:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b8a3a:	bf00      	nop
   b8a3c:	000b8a65 	.word	0x000b8a65
   b8a40:	000b8a23 	.word	0x000b8a23
   b8a44:	000b8a23 	.word	0x000b8a23
   b8a48:	000b8a23 	.word	0x000b8a23
   b8a4c:	000b8a69 	.word	0x000b8a69
   b8a50:	000b8a23 	.word	0x000b8a23
   b8a54:	000b8a6d 	.word	0x000b8a6d
   b8a58:	000b8a71 	.word	0x000b8a71
				str.append('\b');
   b8a5c:	2108      	movs	r1, #8
   b8a5e:	e7e0      	b.n	b8a22 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b8a60:	210c      	movs	r1, #12
   b8a62:	e7de      	b.n	b8a22 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b8a64:	210a      	movs	r1, #10
   b8a66:	e7dc      	b.n	b8a22 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b8a68:	210d      	movs	r1, #13
   b8a6a:	e7da      	b.n	b8a22 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b8a6c:	2109      	movs	r1, #9
   b8a6e:	e7d8      	b.n	b8a22 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b8a70:	1d31      	adds	r1, r6, #4
   b8a72:	4288      	cmp	r0, r1
   b8a74:	dd17      	ble.n	b8aa6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b8a76:	a902      	add	r1, sp, #8
   b8a78:	3304      	adds	r3, #4
   b8a7a:	4433      	add	r3, r6
   b8a7c:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b8a7e:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b8a82:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b8a86:	429a      	cmp	r2, r3
   b8a88:	d1f9      	bne.n	b8a7e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8a8a:	aa01      	add	r2, sp, #4
   b8a8c:	4651      	mov	r1, sl
					tmp[4] = 0;
   b8a8e:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8a92:	f004 faed 	bl	bd070 <sscanf>
   b8a96:	2801      	cmp	r0, #1
   b8a98:	d105      	bne.n	b8aa6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b8a9a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b8a9e:	4629      	mov	r1, r5
   b8aa0:	f7ff ff7c 	bl	b899c <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b8aa4:	3605      	adds	r6, #5
			escape = false;
   b8aa6:	2400      	movs	r4, #0
   b8aa8:	e004      	b.n	b8ab4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b8aaa:	295c      	cmp	r1, #92	; 0x5c
   b8aac:	d004      	beq.n	b8ab8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b8aae:	4628      	mov	r0, r5
   b8ab0:	f7ff ff5f 	bl	b8972 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b8ab4:	3601      	adds	r6, #1
   b8ab6:	e7a3      	b.n	b8a00 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b8ab8:	2401      	movs	r4, #1
   b8aba:	e7fb      	b.n	b8ab4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b8abc:	2001      	movs	r0, #1
   b8abe:	b004      	add	sp, #16
   b8ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8ac4:	000c4f81 	.word	0x000c4f81

000b8ac8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b8ac8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8aca:	460c      	mov	r4, r1
   b8acc:	4606      	mov	r6, r0
	result = "";
   b8ace:	490c      	ldr	r1, [pc, #48]	; (b8b00 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b8ad0:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b8ad2:	4615      	mov	r5, r2
	result = "";
   b8ad4:	f006 fed7 	bl	bf886 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b8ad8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b8adc:	1ac9      	subs	r1, r1, r3
   b8ade:	3101      	adds	r1, #1
   b8ae0:	4628      	mov	r0, r5
   b8ae2:	f006 fe45 	bl	bf770 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b8ae6:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b8ae8:	466a      	mov	r2, sp
   b8aea:	4621      	mov	r1, r4
   b8aec:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b8aee:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b8af2:	9500      	str	r5, [sp, #0]
   b8af4:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b8af6:	f7ff ff79 	bl	b89ec <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b8afa:	b004      	add	sp, #16
   b8afc:	bd70      	pop	{r4, r5, r6, pc}
   b8afe:	bf00      	nop
   b8b00:	000c4fe0 	.word	0x000c4fe0

000b8b04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8b08:	b089      	sub	sp, #36	; 0x24
   b8b0a:	4605      	mov	r5, r0
   b8b0c:	4688      	mov	r8, r1
	String keyName;
   b8b0e:	a804      	add	r0, sp, #16
   b8b10:	4912      	ldr	r1, [pc, #72]	; (b8b5c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8b12:	4616      	mov	r6, r2
   b8b14:	4699      	mov	r9, r3
	String keyName;
   b8b16:	f006 fe58 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8b1a:	2700      	movs	r7, #0
   b8b1c:	9700      	str	r7, [sp, #0]
   b8b1e:	464b      	mov	r3, r9
   b8b20:	aa03      	add	r2, sp, #12
   b8b22:	4641      	mov	r1, r8
   b8b24:	4628      	mov	r0, r5
   b8b26:	f7ff fec4 	bl	b88b2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b8b2a:	4604      	mov	r4, r0
   b8b2c:	b170      	cbz	r0, b8b4c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8b2e:	9903      	ldr	r1, [sp, #12]
   b8b30:	aa04      	add	r2, sp, #16
   b8b32:	4628      	mov	r0, r5
   b8b34:	f7ff ffc8 	bl	b8ac8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b8b38:	4604      	mov	r4, r0
   b8b3a:	b908      	cbnz	r0, b8b40 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8b3c:	3701      	adds	r7, #1
   b8b3e:	e7ed      	b.n	b8b1c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
   b8b40:	4631      	mov	r1, r6
   b8b42:	a804      	add	r0, sp, #16
   b8b44:	f006 ff07 	bl	bf956 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8b48:	2800      	cmp	r0, #0
   b8b4a:	d0f7      	beq.n	b8b3c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b8b4c:	a804      	add	r0, sp, #16
   b8b4e:	f006 fdf1 	bl	bf734 <_ZN6StringD1Ev>
}
   b8b52:	4620      	mov	r0, r4
   b8b54:	b009      	add	sp, #36	; 0x24
   b8b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8b5a:	bf00      	nop
   b8b5c:	000c4fe0 	.word	0x000c4fe0

000b8b60 <_ZN10JsonWriter4initEv>:
	offset = 0;
   b8b60:	2300      	movs	r3, #0
	context[contextIndex].isFirst = true;
   b8b62:	2201      	movs	r2, #1
	offset = 0;
   b8b64:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b8b66:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b8b68:	8302      	strh	r2, [r0, #24]
	truncated = false;
   b8b6a:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
   b8b6e:	4770      	bx	lr

000b8b70 <_ZN10JsonWriterC1Ev>:
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b8b70:	b508      	push	{r3, lr}
   b8b72:	4603      	mov	r3, r0
   b8b74:	f7ff fe00 	bl	b8778 <_ZN10JsonBufferC1Ev>
   b8b78:	4a04      	ldr	r2, [pc, #16]	; (b8b8c <_ZN10JsonWriterC1Ev+0x1c>)
   b8b7a:	601a      	str	r2, [r3, #0]
   b8b7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	init();
   b8b80:	4618      	mov	r0, r3
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b8b82:	62da      	str	r2, [r3, #44]	; 0x2c
	init();
   b8b84:	f7ff ffec 	bl	b8b60 <_ZN10JsonWriter4initEv>
}
   b8b88:	bd08      	pop	{r3, pc}
   b8b8a:	bf00      	nop
   b8b8c:	000c4720 	.word	0x000c4720

000b8b90 <_ZN10JsonWriter10insertCharEc>:
	if (offset < bufferLen) {
   b8b90:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b8b94:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b8b96:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b8b98:	bf3f      	itttt	cc
   b8b9a:	6842      	ldrcc	r2, [r0, #4]
   b8b9c:	1c5c      	addcc	r4, r3, #1
   b8b9e:	60c4      	strcc	r4, [r0, #12]
   b8ba0:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
   b8ba2:	bf24      	itt	cs
   b8ba4:	2301      	movcs	r3, #1
   b8ba6:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
}
   b8baa:	bd10      	pop	{r4, pc}

000b8bac <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b8bac:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b8bae:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b8bb0:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b8bb2:	b143      	cbz	r3, b8bc6 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b8bb4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b8bb8:	7e59      	ldrb	r1, [r3, #25]
   b8bba:	b109      	cbz	r1, b8bc0 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b8bbc:	f7ff ffe8 	bl	b8b90 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b8bc0:	6963      	ldr	r3, [r4, #20]
   b8bc2:	3b01      	subs	r3, #1
   b8bc4:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b8bc6:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b8bca:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b8bcc:	4288      	cmp	r0, r1
   b8bce:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b8bd2:	bf2a      	itet	cs
   b8bd4:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b8bd6:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b8bd8:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b8bdc:	bd10      	pop	{r4, pc}

000b8bde <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b8bde:	b570      	push	{r4, r5, r6, lr}
   b8be0:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b8be2:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b8be6:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b8be8:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b8bea:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b8bec:	4430      	add	r0, r6
   b8bee:	460a      	mov	r2, r1
   b8bf0:	4629      	mov	r1, r5
   b8bf2:	f004 fa4d 	bl	bd090 <vsnprintf>
	if (count <= spaceAvailable) {
   b8bf6:	4285      	cmp	r5, r0
		offset += count;
   b8bf8:	bf2d      	iteet	cs
   b8bfa:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
   b8bfc:	68a3      	ldrcc	r3, [r4, #8]
   b8bfe:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b8c00:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b8c02:	bf36      	itet	cc
   b8c04:	2301      	movcc	r3, #1
		offset += count;
   b8c06:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b8c08:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
}
   b8c0c:	bd70      	pop	{r4, r5, r6, pc}

000b8c0e <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b8c0e:	b40e      	push	{r1, r2, r3}
   b8c10:	b503      	push	{r0, r1, lr}
   b8c12:	aa03      	add	r2, sp, #12
   b8c14:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b8c18:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b8c1a:	f7ff ffe0 	bl	b8bde <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b8c1e:	b002      	add	sp, #8
   b8c20:	f85d eb04 	ldr.w	lr, [sp], #4
   b8c24:	b003      	add	sp, #12
   b8c26:	4770      	bx	lr

000b8c28 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b8c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8c2c:	4604      	mov	r4, r0
   b8c2e:	460e      	mov	r6, r1
	if (quoted) {
   b8c30:	4617      	mov	r7, r2
   b8c32:	b112      	cbz	r2, b8c3a <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b8c34:	2122      	movs	r1, #34	; 0x22
   b8c36:	f7ff ffab 	bl	b8b90 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b8c3a:	f8df 810c 	ldr.w	r8, [pc, #268]	; b8d48 <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b8c3e:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b8c40:	5d71      	ldrb	r1, [r6, r5]
   b8c42:	eb06 0905 	add.w	r9, r6, r5
   b8c46:	2900      	cmp	r1, #0
   b8c48:	d074      	beq.n	b8d34 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b8c4a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b8c4e:	429a      	cmp	r2, r3
   b8c50:	d270      	bcs.n	b8d34 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b8c52:	060b      	lsls	r3, r1, #24
   b8c54:	d534      	bpl.n	b8cc0 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b8c56:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b8c5a:	2be0      	cmp	r3, #224	; 0xe0
   b8c5c:	f105 0901 	add.w	r9, r5, #1
   b8c60:	d11d      	bne.n	b8c9e <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b8c62:	f816 2009 	ldrb.w	r2, [r6, r9]
   b8c66:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b8c6a:	2b80      	cmp	r3, #128	; 0x80
   b8c6c:	d139      	bne.n	b8ce2 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8c6e:	f105 0902 	add.w	r9, r5, #2
   b8c72:	f816 3009 	ldrb.w	r3, [r6, r9]
   b8c76:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b8c7a:	2880      	cmp	r0, #128	; 0x80
   b8c7c:	d131      	bne.n	b8ce2 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b8c7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b8c82:	0192      	lsls	r2, r2, #6
   b8c84:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b8c88:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b8c8c:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b8c8e:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b8c90:	4641      	mov	r1, r8
   b8c92:	4620      	mov	r0, r4
   b8c94:	f7ff ffbb 	bl	b8c0e <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b8c98:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b8c9a:	3501      	adds	r5, #1
   b8c9c:	e7d0      	b.n	b8c40 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b8c9e:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b8ca2:	2bc0      	cmp	r3, #192	; 0xc0
   b8ca4:	d11d      	bne.n	b8ce2 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8ca6:	f816 3009 	ldrb.w	r3, [r6, r9]
   b8caa:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b8cae:	2a80      	cmp	r2, #128	; 0x80
   b8cb0:	d117      	bne.n	b8ce2 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b8cb2:	0189      	lsls	r1, r1, #6
   b8cb4:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b8cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b8cbc:	431a      	orrs	r2, r3
   b8cbe:	e7e7      	b.n	b8c90 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b8cc0:	290d      	cmp	r1, #13
   b8cc2:	d80a      	bhi.n	b8cda <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b8cc4:	2907      	cmp	r1, #7
   b8cc6:	d90c      	bls.n	b8ce2 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8cc8:	f1a1 0308 	sub.w	r3, r1, #8
   b8ccc:	2b05      	cmp	r3, #5
   b8cce:	d808      	bhi.n	b8ce2 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8cd0:	e8df f003 	tbb	[pc, r3]
   b8cd4:	07172309 	.word	0x07172309
   b8cd8:	1d11      	.short	0x1d11
   b8cda:	2922      	cmp	r1, #34	; 0x22
   b8cdc:	d023      	beq.n	b8d26 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b8cde:	295c      	cmp	r1, #92	; 0x5c
   b8ce0:	d021      	beq.n	b8d26 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b8ce2:	4620      	mov	r0, r4
   b8ce4:	e004      	b.n	b8cf0 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8ce6:	215c      	movs	r1, #92	; 0x5c
   b8ce8:	4620      	mov	r0, r4
   b8cea:	f7ff ff51 	bl	b8b90 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b8cee:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b8cf0:	f7ff ff4e 	bl	b8b90 <_ZN10JsonWriter10insertCharEc>
				break;
   b8cf4:	e7d1      	b.n	b8c9a <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b8cf6:	215c      	movs	r1, #92	; 0x5c
   b8cf8:	4620      	mov	r0, r4
   b8cfa:	f7ff ff49 	bl	b8b90 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b8cfe:	2166      	movs	r1, #102	; 0x66
   b8d00:	e7f6      	b.n	b8cf0 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8d02:	215c      	movs	r1, #92	; 0x5c
   b8d04:	4620      	mov	r0, r4
   b8d06:	f7ff ff43 	bl	b8b90 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b8d0a:	216e      	movs	r1, #110	; 0x6e
   b8d0c:	e7f0      	b.n	b8cf0 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8d0e:	215c      	movs	r1, #92	; 0x5c
   b8d10:	4620      	mov	r0, r4
   b8d12:	f7ff ff3d 	bl	b8b90 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b8d16:	2172      	movs	r1, #114	; 0x72
   b8d18:	e7ea      	b.n	b8cf0 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8d1a:	215c      	movs	r1, #92	; 0x5c
   b8d1c:	4620      	mov	r0, r4
   b8d1e:	f7ff ff37 	bl	b8b90 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b8d22:	2174      	movs	r1, #116	; 0x74
   b8d24:	e7e4      	b.n	b8cf0 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8d26:	215c      	movs	r1, #92	; 0x5c
   b8d28:	4620      	mov	r0, r4
   b8d2a:	f7ff ff31 	bl	b8b90 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b8d2e:	f899 1000 	ldrb.w	r1, [r9]
   b8d32:	e7dd      	b.n	b8cf0 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b8d34:	b12f      	cbz	r7, b8d42 <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b8d36:	4620      	mov	r0, r4
   b8d38:	2122      	movs	r1, #34	; 0x22
}
   b8d3a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b8d3e:	f7ff bf27 	b.w	b8b90 <_ZN10JsonWriter10insertCharEc>
}
   b8d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8d46:	bf00      	nop
   b8d48:	000c46e8 	.word	0x000c46e8

000b8d4c <_ZN10JsonWriter20insertCheckSeparatorEv>:
	if (context[contextIndex].isFirst) {
   b8d4c:	6942      	ldr	r2, [r0, #20]
   b8d4e:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b8d52:	7e1a      	ldrb	r2, [r3, #24]
   b8d54:	b112      	cbz	r2, b8d5c <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b8d56:	2200      	movs	r2, #0
   b8d58:	761a      	strb	r2, [r3, #24]
}
   b8d5a:	4770      	bx	lr
		insertChar(',');
   b8d5c:	212c      	movs	r1, #44	; 0x2c
   b8d5e:	f7ff bf17 	b.w	b8b90 <_ZN10JsonWriter10insertCharEc>

000b8d62 <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b8d62:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b8d64:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b8d66:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b8d68:	3301      	adds	r3, #1
   b8d6a:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b8d6c:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b8d6e:	d80f      	bhi.n	b8d90 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b8d70:	f7ff ffec 	bl	b8d4c <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b8d74:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b8d76:	9901      	ldr	r1, [sp, #4]
   b8d78:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b8d7c:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b8d7e:	2501      	movs	r5, #1
	contextIndex++;
   b8d80:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b8d82:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b8d84:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b8d86:	f7ff ff03 	bl	b8b90 <_ZN10JsonWriter10insertCharEc>
   b8d8a:	4628      	mov	r0, r5
}
   b8d8c:	b002      	add	sp, #8
   b8d8e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b8d90:	2000      	movs	r0, #0
   b8d92:	e7fb      	b.n	b8d8c <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b8d94 <_ZN10JsonWriter11insertValueEf>:
void JsonWriter::insertValue(float value) {
   b8d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8d96:	4604      	mov	r4, r0
   b8d98:	ee10 0a10 	vmov	r0, s0
		insertsprintf("%.*f", floatPlaces, value);
   b8d9c:	f007 fd08 	bl	c07b0 <__aeabi_f2d>
	if (floatPlaces >= 0) {
   b8da0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   b8da2:	2d00      	cmp	r5, #0
		insertsprintf("%.*f", floatPlaces, value);
   b8da4:	4602      	mov	r2, r0
   b8da6:	460b      	mov	r3, r1
	if (floatPlaces >= 0) {
   b8da8:	db08      	blt.n	b8dbc <_ZN10JsonWriter11insertValueEf+0x28>
		insertsprintf("%.*f", floatPlaces, value);
   b8daa:	e9cd 2300 	strd	r2, r3, [sp]
   b8dae:	4907      	ldr	r1, [pc, #28]	; (b8dcc <_ZN10JsonWriter11insertValueEf+0x38>)
   b8db0:	462a      	mov	r2, r5
   b8db2:	4620      	mov	r0, r4
   b8db4:	f7ff ff2b 	bl	b8c0e <_ZN10JsonWriter13insertsprintfEPKcz>
}
   b8db8:	b003      	add	sp, #12
   b8dba:	bd30      	pop	{r4, r5, pc}
		insertsprintf("%f", value);
   b8dbc:	4904      	ldr	r1, [pc, #16]	; (b8dd0 <_ZN10JsonWriter11insertValueEf+0x3c>)
   b8dbe:	4620      	mov	r0, r4
}
   b8dc0:	b003      	add	sp, #12
   b8dc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		insertsprintf("%f", value);
   b8dc6:	f7ff bf22 	b.w	b8c0e <_ZN10JsonWriter13insertsprintfEPKcz>
   b8dca:	bf00      	nop
   b8dcc:	000c46ef 	.word	0x000c46ef
   b8dd0:	000c46f4 	.word	0x000c46f4

000b8dd4 <_ZN12JsonModifierC1ER10JsonParser>:
JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {
   b8dd4:	b510      	push	{r4, lr}
   b8dd6:	4604      	mov	r4, r0
   b8dd8:	f7ff feca 	bl	b8b70 <_ZN10JsonWriterC1Ev>
   b8ddc:	4b05      	ldr	r3, [pc, #20]	; (b8df4 <_ZN12JsonModifierC1ER10JsonParser+0x20>)
   b8dde:	6023      	str	r3, [r4, #0]
   b8de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8de4:	2300      	movs	r3, #0
   b8de6:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   b8dea:	6321      	str	r1, [r4, #48]	; 0x30
   b8dec:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   b8dee:	4620      	mov	r0, r4
   b8df0:	bd10      	pop	{r4, pc}
   b8df2:	bf00      	nop
   b8df4:	000c4730 	.word	0x000c4730

000b8df8 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	jp.setOffset(left + origAfter);
	jp.parse();

	return true;
}
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b8df8:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b8dfa:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b8dfc:	3301      	adds	r3, #1
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b8dfe:	4604      	mov	r4, r0
	if (start != -1) {
   b8e00:	d121      	bne.n	b8e46 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4e>
		// Modification or insertion already in progress
		return false;
	}
	start = token->start;
	origAfter = jp.getOffset() - token->end;
   b8e02:	6b05      	ldr	r5, [r0, #48]	; 0x30
	start = token->start;
   b8e04:	684b      	ldr	r3, [r1, #4]
   b8e06:	6343      	str	r3, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b8e08:	68eb      	ldr	r3, [r5, #12]
	origAfter = jp.getOffset() - token->end;
   b8e0a:	6888      	ldr	r0, [r1, #8]
   b8e0c:	1a1a      	subs	r2, r3, r0
   b8e0e:	63a2      	str	r2, [r4, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b8e10:	68ae      	ldr	r6, [r5, #8]
   b8e12:	4430      	add	r0, r6
   b8e14:	1ac3      	subs	r3, r0, r3

	//printf("start=%d origAfter=%d saveLoc=%d bufferSize=%d\n", start, origAfter, saveLoc, saveLoc - start);

	if (origAfter > 0) {
   b8e16:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b8e18:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b8e1a:	dd05      	ble.n	b8e28 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b8e1c:	6868      	ldr	r0, [r5, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + token->end, origAfter);
   b8e1e:	6889      	ldr	r1, [r1, #8]
   b8e20:	4401      	add	r1, r0
   b8e22:	4418      	add	r0, r3
   b8e24:	f008 f8e2 	bl	c0fec <memmove>
   b8e28:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b8e2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b8e2c:	6852      	ldr	r2, [r2, #4]
   b8e2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8e30:	440a      	add	r2, r1
   b8e32:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b8e34:	2101      	movs	r1, #1
	init();
   b8e36:	4620      	mov	r0, r4
	this->bufferLen = bufferLen;
   b8e38:	e9c4 2301 	strd	r2, r3, [r4, #4]
	this->staticBuffers = true;
   b8e3c:	7421      	strb	r1, [r4, #16]
	init();
   b8e3e:	f7ff fe8f 	bl	b8b60 <_ZN10JsonWriter4initEv>
   b8e42:	4608      	mov	r0, r1

	return true;
}
   b8e44:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b8e46:	2000      	movs	r0, #0
   b8e48:	e7fc      	b.n	b8e44 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4c>

000b8e4a <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>:

bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b8e4a:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b8e4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b8e4e:	3301      	adds	r3, #1
bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b8e50:	4604      	mov	r4, r0
   b8e52:	460e      	mov	r6, r1
	if (start != -1) {
   b8e54:	d129      	bne.n	b8eaa <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x60>
		// Modification or insertion already in progress
		return false;
	}

	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b8e56:	688d      	ldr	r5, [r1, #8]
	origAfter = jp.getOffset() - start;
   b8e58:	6b01      	ldr	r1, [r0, #48]	; 0x30
	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b8e5a:	3d01      	subs	r5, #1
   b8e5c:	6345      	str	r5, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b8e5e:	68cb      	ldr	r3, [r1, #12]
	origAfter = jp.getOffset() - start;
   b8e60:	1b5a      	subs	r2, r3, r5
   b8e62:	6382      	str	r2, [r0, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b8e64:	6888      	ldr	r0, [r1, #8]
   b8e66:	4428      	add	r0, r5
   b8e68:	1ac3      	subs	r3, r0, r3

	if (origAfter > 0) {
   b8e6a:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b8e6c:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b8e6e:	dd04      	ble.n	b8e7a <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b8e70:	6848      	ldr	r0, [r1, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + start, origAfter);
   b8e72:	1941      	adds	r1, r0, r5
   b8e74:	4418      	add	r0, r3
   b8e76:	f008 f8b9 	bl	c0fec <memmove>
   b8e7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b8e7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b8e7e:	6852      	ldr	r2, [r2, #4]
   b8e80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8e82:	440a      	add	r2, r1
   b8e84:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b8e86:	2501      	movs	r5, #1
	this->bufferLen = bufferLen;
   b8e88:	e9c4 2301 	strd	r2, r3, [r4, #4]
	init();
   b8e8c:	4620      	mov	r0, r4
	this->staticBuffers = true;
   b8e8e:	7425      	strb	r5, [r4, #16]
	init();
   b8e90:	f7ff fe66 	bl	b8b60 <_ZN10JsonWriter4initEv>
	context[contextIndex].isFirst = isFirst;
   b8e94:	6963      	ldr	r3, [r4, #20]
   b8e96:	f103 020c 	add.w	r2, r3, #12

	// If array is not empty, add a separator
	setIsFirst(arrayOrObjectToken->size == 0);
   b8e9a:	68f3      	ldr	r3, [r6, #12]
   b8e9c:	fab3 f383 	clz	r3, r3
   b8ea0:	095b      	lsrs	r3, r3, #5
   b8ea2:	f804 3012 	strb.w	r3, [r4, r2, lsl #1]
	context[contextIndex].isFirst = isFirst;
   b8ea6:	4628      	mov	r0, r5

	return true;
}
   b8ea8:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b8eaa:	2000      	movs	r0, #0
   b8eac:	e7fc      	b.n	b8ea8 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x5e>
	...

000b8eb0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b8eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b8eb4:	6844      	ldr	r4, [r0, #4]
   b8eb6:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b8eba:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8ebe:	f8d0 e000 	ldr.w	lr, [r0]
   b8ec2:	4596      	cmp	lr, r2
   b8ec4:	f080 81b9 	bcs.w	b923a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b8ec8:	f811 800e 	ldrb.w	r8, [r1, lr]
   b8ecc:	f1b8 0f00 	cmp.w	r8, #0
   b8ed0:	f000 81b3 	beq.w	b923a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b8ed4:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b8ed8:	f000 8098 	beq.w	b900c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b8edc:	d833      	bhi.n	b8f46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b8ede:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b8ee2:	f000 80a6 	beq.w	b9032 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b8ee6:	d810      	bhi.n	b8f0a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b8ee8:	f1a8 0809 	sub.w	r8, r8, #9
   b8eec:	fa5f f888 	uxtb.w	r8, r8
   b8ef0:	f1b8 0f17 	cmp.w	r8, #23
   b8ef4:	d80d      	bhi.n	b8f12 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b8ef6:	4d9f      	ldr	r5, [pc, #636]	; (b9174 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b8ef8:	fa0c f808 	lsl.w	r8, ip, r8
   b8efc:	ea18 0f05 	tst.w	r8, r5
   b8f00:	d007      	beq.n	b8f12 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8f02:	6805      	ldr	r5, [r0, #0]
   b8f04:	3501      	adds	r5, #1
   b8f06:	6005      	str	r5, [r0, #0]
   b8f08:	e7d9      	b.n	b8ebe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b8f0a:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b8f0e:	f000 8133 	beq.w	b9178 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8f12:	f8d0 8000 	ldr.w	r8, [r0]
   b8f16:	4542      	cmp	r2, r8
   b8f18:	d90e      	bls.n	b8f38 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b8f1a:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8f1e:	b15d      	cbz	r5, b8f38 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b8f20:	2d3a      	cmp	r5, #58	; 0x3a
   b8f22:	f200 8169 	bhi.w	b91f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b8f26:	2d1f      	cmp	r5, #31
   b8f28:	f200 8151 	bhi.w	b91ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b8f2c:	2d0a      	cmp	r5, #10
   b8f2e:	f200 8160 	bhi.w	b91f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b8f32:	2d08      	cmp	r5, #8
   b8f34:	f240 8156 	bls.w	b91e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b8f38:	2b00      	cmp	r3, #0
   b8f3a:	f040 8162 	bne.w	b9202 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b8f3e:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b8f42:	6005      	str	r5, [r0, #0]
   b8f44:	e0a5      	b.n	b9092 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b8f46:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b8f4a:	d037      	beq.n	b8fbc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b8f4c:	d82e      	bhi.n	b8fac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b8f4e:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b8f52:	d033      	beq.n	b8fbc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b8f54:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b8f58:	d1db      	bne.n	b8f12 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b8f5a:	2b00      	cmp	r3, #0
   b8f5c:	d0d1      	beq.n	b8f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b8f5e:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b8f62:	6845      	ldr	r5, [r0, #4]
   b8f64:	3d01      	subs	r5, #1
   b8f66:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b8f6a:	2d00      	cmp	r5, #0
   b8f6c:	db55      	blt.n	b901a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b8f6e:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b8f72:	3701      	adds	r7, #1
   b8f74:	d04d      	beq.n	b9012 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b8f76:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b8f7a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b8f7e:	d148      	bne.n	b9012 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b8f80:	f898 b000 	ldrb.w	fp, [r8]
   b8f84:	45cb      	cmp	fp, r9
   b8f86:	d14b      	bne.n	b9020 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b8f88:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b8f8c:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b8f90:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b8f94:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b8f98:	f8de 7004 	ldr.w	r7, [lr, #4]
   b8f9c:	3701      	adds	r7, #1
   b8f9e:	d042      	beq.n	b9026 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b8fa0:	f8de 7008 	ldr.w	r7, [lr, #8]
   b8fa4:	3701      	adds	r7, #1
   b8fa6:	d13e      	bne.n	b9026 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b8fa8:	6085      	str	r5, [r0, #8]
				break;
   b8faa:	e7aa      	b.n	b8f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b8fac:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b8fb0:	d1af      	bne.n	b8f12 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b8fb2:	2b00      	cmp	r3, #0
   b8fb4:	d0a5      	beq.n	b8f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b8fb6:	f04f 0901 	mov.w	r9, #1
   b8fba:	e7d2      	b.n	b8f62 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b8fbc:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b8fbe:	2b00      	cmp	r3, #0
   b8fc0:	d09f      	beq.n	b8f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b8fc2:	6845      	ldr	r5, [r0, #4]
   b8fc4:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b8fc6:	42af      	cmp	r7, r5
   b8fc8:	d94a      	bls.n	b9060 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b8fca:	f105 0e01 	add.w	lr, r5, #1
   b8fce:	f8c0 e004 	str.w	lr, [r0, #4]
   b8fd2:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b8fd6:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b8fda:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b8fde:	2500      	movs	r5, #0
   b8fe0:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b8fe4:	6885      	ldr	r5, [r0, #8]
   b8fe6:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b8fe8:	bf1f      	itttt	ne
   b8fea:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b8fee:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b8ff2:	3501      	addne	r5, #1
   b8ff4:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b8ff8:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b8ffc:	bf0c      	ite	eq
   b8ffe:	2501      	moveq	r5, #1
   b9000:	2502      	movne	r5, #2
   b9002:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b9006:	6805      	ldr	r5, [r0, #0]
   b9008:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b900c:	6845      	ldr	r5, [r0, #4]
   b900e:	3d01      	subs	r5, #1
   b9010:	e7ca      	b.n	b8fa8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b9012:	3d01      	subs	r5, #1
   b9014:	f1a8 0810 	sub.w	r8, r8, #16
   b9018:	e7a7      	b.n	b8f6a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b901a:	3501      	adds	r5, #1
   b901c:	f47f af71 	bne.w	b8f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b9020:	f06f 0401 	mvn.w	r4, #1
   b9024:	e01e      	b.n	b9064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b9026:	3d01      	subs	r5, #1
   b9028:	1c6f      	adds	r7, r5, #1
   b902a:	f1ae 0e10 	sub.w	lr, lr, #16
   b902e:	d1b3      	bne.n	b8f98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b9030:	e767      	b.n	b8f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b9032:	f10e 0901 	add.w	r9, lr, #1
   b9036:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b903a:	f8d0 8000 	ldr.w	r8, [r0]
   b903e:	4542      	cmp	r2, r8
   b9040:	f240 8093 	bls.w	b916a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b9044:	f811 5008 	ldrb.w	r5, [r1, r8]
   b9048:	2d00      	cmp	r5, #0
   b904a:	f000 808e 	beq.w	b916a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b904e:	2d22      	cmp	r5, #34	; 0x22
   b9050:	d130      	bne.n	b90b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b9052:	b1f3      	cbz	r3, b9092 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b9054:	6845      	ldr	r5, [r0, #4]
   b9056:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b9058:	42af      	cmp	r7, r5
   b905a:	d806      	bhi.n	b906a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b905c:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b9060:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b9064:	4620      	mov	r0, r4
   b9066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b906a:	f105 0e01 	add.w	lr, r5, #1
   b906e:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b9072:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b9076:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b907a:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b907e:	2700      	movs	r7, #0
   b9080:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b9082:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b9086:	f04f 0a03 	mov.w	sl, #3
   b908a:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b908e:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b9092:	6885      	ldr	r5, [r0, #8]
   b9094:	1c6f      	adds	r7, r5, #1
				count++;
   b9096:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b909a:	f43f af32 	beq.w	b8f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b909e:	2b00      	cmp	r3, #0
   b90a0:	f43f af2f 	beq.w	b8f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b90a4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b90a8:	f8de 500c 	ldr.w	r5, [lr, #12]
   b90ac:	3501      	adds	r5, #1
   b90ae:	f8ce 500c 	str.w	r5, [lr, #12]
   b90b2:	e726      	b.n	b8f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b90b4:	2d5c      	cmp	r5, #92	; 0x5c
   b90b6:	d111      	bne.n	b90dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b90b8:	f108 0501 	add.w	r5, r8, #1
   b90bc:	42aa      	cmp	r2, r5
   b90be:	d90d      	bls.n	b90dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b90c0:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b90c2:	5d4d      	ldrb	r5, [r1, r5]
   b90c4:	2d75      	cmp	r5, #117	; 0x75
   b90c6:	d82b      	bhi.n	b9120 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b90c8:	2d6d      	cmp	r5, #109	; 0x6d
   b90ca:	d80b      	bhi.n	b90e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b90cc:	2d66      	cmp	r5, #102	; 0x66
   b90ce:	d827      	bhi.n	b9120 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b90d0:	2d5b      	cmp	r5, #91	; 0x5b
   b90d2:	d81d      	bhi.n	b9110 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b90d4:	2d22      	cmp	r5, #34	; 0x22
   b90d6:	d001      	beq.n	b90dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b90d8:	2d2f      	cmp	r5, #47	; 0x2f
   b90da:	d121      	bne.n	b9120 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b90dc:	6805      	ldr	r5, [r0, #0]
   b90de:	3501      	adds	r5, #1
   b90e0:	6005      	str	r5, [r0, #0]
   b90e2:	e7aa      	b.n	b903a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b90e4:	3d6e      	subs	r5, #110	; 0x6e
   b90e6:	2d07      	cmp	r5, #7
   b90e8:	d81a      	bhi.n	b9120 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b90ea:	a701      	add	r7, pc, #4	; (adr r7, b90f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b90ec:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b90f0:	000b90dd 	.word	0x000b90dd
   b90f4:	000b9121 	.word	0x000b9121
   b90f8:	000b9121 	.word	0x000b9121
   b90fc:	000b9121 	.word	0x000b9121
   b9100:	000b90dd 	.word	0x000b90dd
   b9104:	000b9121 	.word	0x000b9121
   b9108:	000b90dd 	.word	0x000b90dd
   b910c:	000b9127 	.word	0x000b9127
   b9110:	3d5c      	subs	r5, #92	; 0x5c
   b9112:	b2ed      	uxtb	r5, r5
   b9114:	fa0c f505 	lsl.w	r5, ip, r5
   b9118:	f240 4741 	movw	r7, #1089	; 0x441
   b911c:	423d      	tst	r5, r7
   b911e:	d1dd      	bne.n	b90dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b9120:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b9124:	e77c      	b.n	b9020 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b9126:	f108 0502 	add.w	r5, r8, #2
   b912a:	6005      	str	r5, [r0, #0]
   b912c:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b9130:	f8d0 8000 	ldr.w	r8, [r0]
   b9134:	4542      	cmp	r2, r8
   b9136:	d803      	bhi.n	b9140 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b9138:	6805      	ldr	r5, [r0, #0]
   b913a:	3d01      	subs	r5, #1
   b913c:	6005      	str	r5, [r0, #0]
					break;
   b913e:	e7cd      	b.n	b90dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b9140:	f811 5008 	ldrb.w	r5, [r1, r8]
   b9144:	2d00      	cmp	r5, #0
   b9146:	d0f7      	beq.n	b9138 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b9148:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b914c:	f1bb 0f09 	cmp.w	fp, #9
   b9150:	d904      	bls.n	b915c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b9152:	f025 0520 	bic.w	r5, r5, #32
   b9156:	3d41      	subs	r5, #65	; 0x41
   b9158:	2d05      	cmp	r5, #5
   b915a:	d8e1      	bhi.n	b9120 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b915c:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b9160:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b9164:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b9166:	d1e3      	bne.n	b9130 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b9168:	e7e6      	b.n	b9138 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b916a:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b916e:	f06f 0402 	mvn.w	r4, #2
   b9172:	e777      	b.n	b9064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b9174:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b9178:	2b00      	cmp	r3, #0
   b917a:	f43f aec2 	beq.w	b8f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b917e:	6885      	ldr	r5, [r0, #8]
   b9180:	1c6f      	adds	r7, r5, #1
   b9182:	f43f aebe 	beq.w	b8f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b9186:	012d      	lsls	r5, r5, #4
   b9188:	5d5d      	ldrb	r5, [r3, r5]
   b918a:	3d01      	subs	r5, #1
   b918c:	2d01      	cmp	r5, #1
   b918e:	f67f aeb8 	bls.w	b8f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b9192:	6845      	ldr	r5, [r0, #4]
   b9194:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b9198:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b919c:	f1b8 0f00 	cmp.w	r8, #0
   b91a0:	f6ff aeaf 	blt.w	b8f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b91a4:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b91a8:	3d01      	subs	r5, #1
   b91aa:	2d01      	cmp	r5, #1
   b91ac:	d80a      	bhi.n	b91c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b91ae:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b91b2:	3501      	adds	r5, #1
   b91b4:	d006      	beq.n	b91c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b91b6:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b91ba:	3501      	adds	r5, #1
   b91bc:	d102      	bne.n	b91c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b91be:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b91c2:	e69e      	b.n	b8f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b91c4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b91c8:	f1ae 0e10 	sub.w	lr, lr, #16
   b91cc:	e7e6      	b.n	b919c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b91ce:	f1a5 0920 	sub.w	r9, r5, #32
   b91d2:	4f24      	ldr	r7, [pc, #144]	; (b9264 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b91d4:	fa5f f989 	uxtb.w	r9, r9
   b91d8:	fa0c f909 	lsl.w	r9, ip, r9
   b91dc:	ea19 0f07 	tst.w	r9, r7
   b91e0:	f47f aeaa 	bne.w	b8f38 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b91e4:	3d20      	subs	r5, #32
   b91e6:	2d5e      	cmp	r5, #94	; 0x5e
   b91e8:	d89a      	bhi.n	b9120 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b91ea:	f108 0501 	add.w	r5, r8, #1
   b91ee:	6005      	str	r5, [r0, #0]
   b91f0:	e68f      	b.n	b8f12 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b91f2:	2d0d      	cmp	r5, #13
   b91f4:	d1f6      	bne.n	b91e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b91f6:	e69f      	b.n	b8f38 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b91f8:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b91fc:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b9200:	e7f8      	b.n	b91f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b9202:	6845      	ldr	r5, [r0, #4]
   b9204:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b9206:	42af      	cmp	r7, r5
   b9208:	f67f af28 	bls.w	b905c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b920c:	f105 0801 	add.w	r8, r5, #1
   b9210:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b9214:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b9218:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b921c:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b9220:	2700      	movs	r7, #0
   b9222:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b9224:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b9228:	f04f 0a04 	mov.w	sl, #4
   b922c:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b9230:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b9234:	6805      	ldr	r5, [r0, #0]
   b9236:	3d01      	subs	r5, #1
   b9238:	e683      	b.n	b8f42 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b923a:	2b00      	cmp	r3, #0
   b923c:	f43f af12 	beq.w	b9064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b9240:	6842      	ldr	r2, [r0, #4]
   b9242:	1e51      	subs	r1, r2, #1
   b9244:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b9248:	2900      	cmp	r1, #0
   b924a:	f6ff af0b 	blt.w	b9064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b924e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b9252:	3201      	adds	r2, #1
   b9254:	d003      	beq.n	b925e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b9256:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b925a:	3201      	adds	r2, #1
   b925c:	d087      	beq.n	b916e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b925e:	3901      	subs	r1, #1
   b9260:	3b10      	subs	r3, #16
   b9262:	e7f1      	b.n	b9248 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b9264:	04001001 	.word	0x04001001

000b9268 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b9268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b926a:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b926c:	4604      	mov	r4, r0
	if (offset == 0) {
   b926e:	b912      	cbnz	r2, b9276 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b9270:	2000      	movs	r0, #0
}
   b9272:	b003      	add	sp, #12
   b9274:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b9276:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b9278:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b927c:	b1ab      	cbz	r3, b92aa <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b927e:	2100      	movs	r1, #0
	parser->toknext = 0;
   b9280:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b9284:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b9288:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b928a:	69c1      	ldr	r1, [r0, #28]
   b928c:	9100      	str	r1, [sp, #0]
   b928e:	6841      	ldr	r1, [r0, #4]
   b9290:	4630      	mov	r0, r6
   b9292:	f7ff fe0d 	bl	b8eb0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b9296:	1c43      	adds	r3, r0, #1
   b9298:	d128      	bne.n	b92ec <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b929a:	7c25      	ldrb	r5, [r4, #16]
   b929c:	2d00      	cmp	r5, #0
   b929e:	d1e7      	bne.n	b9270 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b92a0:	6960      	ldr	r0, [r4, #20]
   b92a2:	f003 fecd 	bl	bd040 <free>
			tokens = 0;
   b92a6:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b92a8:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b92aa:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b92ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b92b0:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b92b4:	68e2      	ldr	r2, [r4, #12]
   b92b6:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b92b8:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b92ba:	9500      	str	r5, [sp, #0]
   b92bc:	462b      	mov	r3, r5
   b92be:	4630      	mov	r0, r6
   b92c0:	f7ff fdf6 	bl	b8eb0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b92c4:	2800      	cmp	r0, #0
   b92c6:	dbd3      	blt.n	b9270 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b92c8:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b92ca:	d017      	beq.n	b92fc <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b92cc:	0100      	lsls	r0, r0, #4
   b92ce:	f003 feaf 	bl	bd030 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b92d2:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b92d4:	6160      	str	r0, [r4, #20]
   b92d6:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b92d8:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b92da:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b92de:	68e2      	ldr	r2, [r4, #12]
   b92e0:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b92e2:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b92e4:	4630      	mov	r0, r6
   b92e6:	f7ff fde3 	bl	b8eb0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b92ea:	e001      	b.n	b92f0 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b92ec:	2800      	cmp	r0, #0
   b92ee:	dbbf      	blt.n	b9270 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b92f0:	6963      	ldr	r3, [r4, #20]
   b92f2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b92f6:	61a0      	str	r0, [r4, #24]
	return true;
   b92f8:	2001      	movs	r0, #1
   b92fa:	e7ba      	b.n	b9272 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b92fc:	6963      	ldr	r3, [r4, #20]
   b92fe:	61a3      	str	r3, [r4, #24]
   b9300:	e7fa      	b.n	b92f8 <_ZN10JsonParser5parseEv+0x90>

000b9302 <_ZN12JsonModifier6finishEv>:
void JsonModifier::finish() {
   b9302:	b538      	push	{r3, r4, r5, lr}
	if (start == -1) {
   b9304:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b9306:	1c5a      	adds	r2, r3, #1
void JsonModifier::finish() {
   b9308:	4604      	mov	r4, r0
	if (start == -1) {
   b930a:	d018      	beq.n	b933e <_ZN12JsonModifier6finishEv+0x3c>
	if (origAfter > 0) {
   b930c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   b930e:	2a00      	cmp	r2, #0
   b9310:	dd08      	ble.n	b9324 <_ZN12JsonModifier6finishEv+0x22>
   b9312:	6b01      	ldr	r1, [r0, #48]	; 0x30
		memmove(jp.getBuffer() + start + getOffset(), jp.getBuffer() + saveLoc, origAfter);
   b9314:	68e5      	ldr	r5, [r4, #12]
   b9316:	6848      	ldr	r0, [r1, #4]
   b9318:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b931a:	442b      	add	r3, r5
   b931c:	4401      	add	r1, r0
   b931e:	4418      	add	r0, r3
   b9320:	f007 fe64 	bl	c0fec <memmove>
	jp.setOffset(start + getOffset() + origAfter);
   b9324:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   b9328:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b932a:	440b      	add	r3, r1
   b932c:	68e1      	ldr	r1, [r4, #12]
   b932e:	440b      	add	r3, r1
	void setOffset(size_t offset) { this->offset = offset; };
   b9330:	60d3      	str	r3, [r2, #12]
	jp.parse();
   b9332:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b9334:	f7ff ff98 	bl	b9268 <_ZN10JsonParser5parseEv>
	start = -1;
   b9338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b933c:	6363      	str	r3, [r4, #52]	; 0x34
}
   b933e:	bd38      	pop	{r3, r4, r5, pc}

000b9340 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b9340:	4770      	bx	lr

000b9342 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b9342:	4770      	bx	lr

000b9344 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b9344:	b510      	push	{r4, lr}
}
   b9346:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b9348:	4604      	mov	r4, r0
}
   b934a:	f7fa fea8 	bl	b409e <_ZdlPvj>
   b934e:	4620      	mov	r0, r4
   b9350:	bd10      	pop	{r4, pc}

000b9352 <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b9352:	b510      	push	{r4, lr}
}
   b9354:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b9356:	4604      	mov	r4, r0
}
   b9358:	f7fa fea1 	bl	b409e <_ZdlPvj>
   b935c:	4620      	mov	r0, r4
   b935e:	bd10      	pop	{r4, pc}

000b9360 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b9360:	b510      	push	{r4, lr}
   b9362:	4b05      	ldr	r3, [pc, #20]	; (b9378 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b9364:	4604      	mov	r4, r0
   b9366:	f840 3b1c 	str.w	r3, [r0], #28
   b936a:	f006 f9e3 	bl	bf734 <_ZN6StringD1Ev>
   b936e:	1d20      	adds	r0, r4, #4
   b9370:	f006 f9e0 	bl	bf734 <_ZN6StringD1Ev>
}
   b9374:	4620      	mov	r0, r4
   b9376:	bd10      	pop	{r4, pc}
   b9378:	000c47a4 	.word	0x000c47a4

000b937c <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b937c:	b510      	push	{r4, lr}
   b937e:	4604      	mov	r4, r0
}
   b9380:	f7ff ffee 	bl	b9360 <_ZN22LocalTimePosixTimezoneD1Ev>
   b9384:	4620      	mov	r0, r4
   b9386:	2158      	movs	r1, #88	; 0x58
   b9388:	f7fa fe89 	bl	b409e <_ZdlPvj>
   b938c:	4620      	mov	r0, r4
   b938e:	bd10      	pop	{r4, pc}

000b9390 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b9390:	b510      	push	{r4, lr}
   b9392:	4b04      	ldr	r3, [pc, #16]	; (b93a4 <_ZN9LocalTimeD1Ev+0x14>)
   b9394:	4604      	mov	r4, r0
   b9396:	f840 3b04 	str.w	r3, [r0], #4
   b939a:	f7ff ffe1 	bl	b9360 <_ZN22LocalTimePosixTimezoneD1Ev>
   b939e:	4620      	mov	r0, r4
   b93a0:	bd10      	pop	{r4, pc}
   b93a2:	bf00      	nop
   b93a4:	000c4774 	.word	0x000c4774

000b93a8 <_ZN9LocalTimeD0Ev>:
   b93a8:	b510      	push	{r4, lr}
   b93aa:	4604      	mov	r4, r0
   b93ac:	f7ff fff0 	bl	b9390 <_ZN9LocalTimeD1Ev>
   b93b0:	4620      	mov	r0, r4
   b93b2:	2160      	movs	r1, #96	; 0x60
   b93b4:	f7fa fe73 	bl	b409e <_ZdlPvj>
   b93b8:	4620      	mov	r0, r4
   b93ba:	bd10      	pop	{r4, pc}

000b93bc <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b93bc:	f020 0302 	bic.w	r3, r0, #2
   b93c0:	2b01      	cmp	r3, #1
   b93c2:	d003      	beq.n	b93cc <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b93c4:	1f43      	subs	r3, r0, #5
   b93c6:	4258      	negs	r0, r3
   b93c8:	4158      	adcs	r0, r3
   b93ca:	4770      	bx	lr
   b93cc:	4618      	mov	r0, r3
   b93ce:	4770      	bx	lr

000b93d0 <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b93d0:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b93d4:	7103      	strb	r3, [r0, #4]
   b93d6:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b93da:	7143      	strb	r3, [r0, #5]
   b93dc:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b93e0:	7183      	strb	r3, [r0, #6]
   b93e2:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b93e6:	71c3      	strb	r3, [r0, #7]
   b93e8:	4770      	bx	lr

000b93ea <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b93ea:	b538      	push	{r3, r4, r5, lr}
   b93ec:	4604      	mov	r4, r0
   b93ee:	460d      	mov	r5, r1
   b93f0:	3004      	adds	r0, #4
   b93f2:	3104      	adds	r1, #4
   b93f4:	f006 fa25 	bl	bf842 <_ZN6StringaSERKS_>
   b93f8:	f105 0114 	add.w	r1, r5, #20
   b93fc:	f104 0014 	add.w	r0, r4, #20
   b9400:	f7ff ffe6 	bl	b93d0 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b9404:	f105 011c 	add.w	r1, r5, #28
   b9408:	f104 001c 	add.w	r0, r4, #28
   b940c:	f006 fa19 	bl	bf842 <_ZN6StringaSERKS_>
   b9410:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b9414:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b9418:	f7ff ffda 	bl	b93d0 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b941c:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b9420:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b9424:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b9428:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b942c:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b9430:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b9434:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b9438:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b943c:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b9440:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9444:	f7ff ffc4 	bl	b93d0 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b9448:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b944c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b9450:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b9454:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b9458:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b945c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b9460:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b9464:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b9468:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b946c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b9470:	f7ff ffae 	bl	b93d0 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b9474:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b9478:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b947c:	bd38      	pop	{r3, r4, r5, pc}

000b947e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b947e:	680b      	ldr	r3, [r1, #0]
   b9480:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b9482:	684b      	ldr	r3, [r1, #4]
   b9484:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9486:	b113      	cbz	r3, b948e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b9488:	685a      	ldr	r2, [r3, #4]
   b948a:	3201      	adds	r2, #1
   b948c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b948e:	4770      	bx	lr

000b9490 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b9490:	4a02      	ldr	r2, [pc, #8]	; (b949c <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b9492:	6002      	str	r2, [r0, #0]
   b9494:	684a      	ldr	r2, [r1, #4]
   b9496:	6042      	str	r2, [r0, #4]
   b9498:	4770      	bx	lr
   b949a:	bf00      	nop
   b949c:	000c4784 	.word	0x000c4784

000b94a0 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   b94a0:	694a      	ldr	r2, [r1, #20]
   b94a2:	6803      	ldr	r3, [r0, #0]
   b94a4:	f362 0316 	bfi	r3, r2, #0, #23
   b94a8:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   b94aa:	690b      	ldr	r3, [r1, #16]
   b94ac:	1c5a      	adds	r2, r3, #1
   b94ae:	8843      	ldrh	r3, [r0, #2]
   b94b0:	f362 13ca 	bfi	r3, r2, #7, #4
   b94b4:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   b94b6:	68ca      	ldr	r2, [r1, #12]
   b94b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
   b94bc:	f362 03c7 	bfi	r3, r2, #3, #5
   b94c0:	70c3      	strb	r3, [r0, #3]
}
   b94c2:	4770      	bx	lr

000b94c4 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b94c4:	4a02      	ldr	r2, [pc, #8]	; (b94d0 <_ZN12LocalTimeHMSC1Ev+0xc>)
   b94c6:	6002      	str	r2, [r0, #0]
   b94c8:	2200      	movs	r2, #0
   b94ca:	6042      	str	r2, [r0, #4]
}
   b94cc:	4770      	bx	lr
   b94ce:	bf00      	nop
   b94d0:	000c4784 	.word	0x000c4784

000b94d4 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b94d4:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b94d6:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b94d8:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b94da:	8083      	strh	r3, [r0, #4]
   b94dc:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b94de:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b94e0:	ab05      	add	r3, sp, #20
   b94e2:	9300      	str	r3, [sp, #0]
   b94e4:	4913      	ldr	r1, [pc, #76]	; (b9534 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b94e6:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b94e8:	ab04      	add	r3, sp, #16
   b94ea:	aa03      	add	r2, sp, #12
   b94ec:	4628      	mov	r0, r5
   b94ee:	f003 fdbf 	bl	bd070 <sscanf>
   b94f2:	2803      	cmp	r0, #3
   b94f4:	d107      	bne.n	b9506 <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b94f6:	9b03      	ldr	r3, [sp, #12]
   b94f8:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b94fa:	9b04      	ldr	r3, [sp, #16]
   b94fc:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b94fe:	9b05      	ldr	r3, [sp, #20]
   b9500:	71a3      	strb	r3, [r4, #6]
}
   b9502:	b007      	add	sp, #28
   b9504:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b9506:	490c      	ldr	r1, [pc, #48]	; (b9538 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b9508:	ab04      	add	r3, sp, #16
   b950a:	aa03      	add	r2, sp, #12
   b950c:	4628      	mov	r0, r5
   b950e:	f003 fdaf 	bl	bd070 <sscanf>
   b9512:	2802      	cmp	r0, #2
   b9514:	d104      	bne.n	b9520 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b9516:	9b03      	ldr	r3, [sp, #12]
   b9518:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b951a:	9b04      	ldr	r3, [sp, #16]
   b951c:	7163      	strb	r3, [r4, #5]
   b951e:	e7f0      	b.n	b9502 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b9520:	4906      	ldr	r1, [pc, #24]	; (b953c <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b9522:	aa03      	add	r2, sp, #12
   b9524:	4628      	mov	r0, r5
   b9526:	f003 fda3 	bl	bd070 <sscanf>
   b952a:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b952c:	bf04      	itt	eq
   b952e:	9b03      	ldreq	r3, [sp, #12]
   b9530:	7123      	strbeq	r3, [r4, #4]
}
   b9532:	e7e6      	b.n	b9502 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b9534:	000c4738 	.word	0x000c4738
   b9538:	000c473b 	.word	0x000c473b
   b953c:	000c36ef 	.word	0x000c36ef

000b9540 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b9540:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b9544:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b9548:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b954c:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b954e:	bfb8      	it	lt
   b9550:	4808      	ldrlt	r0, [pc, #32]	; (b9574 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b9552:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b9556:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b955a:	bfbd      	ittte	lt
   b955c:	fb00 3002 	mlalt	r0, r0, r2, r3
   b9560:	1840      	addlt	r0, r0, r1
   b9562:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b9564:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b9568:	bfa4      	itt	ge
   b956a:	fb00 3002 	mlage	r0, r0, r2, r3
   b956e:	1840      	addge	r0, r0, r1
}
   b9570:	4770      	bx	lr
   b9572:	bf00      	nop
   b9574:	fffff1f0 	.word	0xfffff1f0

000b9578 <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   b9578:	b508      	push	{r3, lr}
   b957a:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   b957e:	b14b      	cbz	r3, b9594 <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   b9580:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   b9584:	b943      	cbnz	r3, b9598 <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   b9586:	302c      	adds	r0, #44	; 0x2c
   b9588:	f7ff ffda 	bl	b9540 <_ZNK12LocalTimeHMS9toSecondsEv>
   b958c:	fab0 f080 	clz	r0, r0
   b9590:	0940      	lsrs	r0, r0, #5
   b9592:	bd08      	pop	{r3, pc}
   b9594:	2001      	movs	r0, #1
   b9596:	e7fc      	b.n	b9592 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   b9598:	2000      	movs	r0, #0
   b959a:	e7fa      	b.n	b9592 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000b959c <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b959c:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b95a0:	b943      	cbnz	r3, b95b4 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b95a2:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b95a6:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b95a8:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b95ac:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b95ae:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b95b2:	600b      	str	r3, [r1, #0]
}
   b95b4:	4770      	bx	lr

000b95b6 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b95b6:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b95ba:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b95bc:	b9b3      	cbnz	r3, b95ec <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b95be:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b95c2:	688c      	ldr	r4, [r1, #8]
   b95c4:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b95c6:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b95ca:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b95cc:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b95d0:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b95d2:	bfb5      	itete	lt
   b95d4:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b95d6:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b95d8:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b95da:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b95dc:	bfb5      	itete	lt
   b95de:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b95e2:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b95e6:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b95e8:	189b      	addge	r3, r3, r2
   b95ea:	600b      	str	r3, [r1, #0]
}
   b95ec:	bd30      	pop	{r4, r5, pc}
	...

000b95f0 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b95f0:	b508      	push	{r3, lr}
   b95f2:	4a05      	ldr	r2, [pc, #20]	; (b9608 <_ZN15LocalTimeChangeC1Ev+0x18>)
   b95f4:	6002      	str	r2, [r0, #0]
   b95f6:	2200      	movs	r2, #0
   b95f8:	4603      	mov	r3, r0
   b95fa:	6042      	str	r2, [r0, #4]
   b95fc:	3008      	adds	r0, #8
   b95fe:	f7ff ff61 	bl	b94c4 <_ZN12LocalTimeHMSC1Ev>
}
   b9602:	4618      	mov	r0, r3
   b9604:	bd08      	pop	{r3, pc}
   b9606:	bf00      	nop
   b9608:	000c4794 	.word	0x000c4794

000b960c <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b960c:	2300      	movs	r3, #0
   b960e:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b9610:	8183      	strh	r3, [r0, #12]
   b9612:	7383      	strb	r3, [r0, #14]
}
   b9614:	4770      	bx	lr
	...

000b9618 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b9618:	b530      	push	{r4, r5, lr}
   b961a:	4604      	mov	r4, r0
   b961c:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b961e:	460d      	mov	r5, r1
   b9620:	b111      	cbz	r1, b9628 <_ZN15LocalTimeChange5parseEPKc+0x10>
   b9622:	780b      	ldrb	r3, [r1, #0]
   b9624:	2b4d      	cmp	r3, #77	; 0x4d
   b9626:	d005      	beq.n	b9634 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b9628:	4620      	mov	r0, r4
}
   b962a:	b007      	add	sp, #28
   b962c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b9630:	f7ff bfec 	b.w	b960c <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b9634:	ab05      	add	r3, sp, #20
   b9636:	9300      	str	r3, [sp, #0]
   b9638:	4911      	ldr	r1, [pc, #68]	; (b9680 <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b963a:	ab04      	add	r3, sp, #16
   b963c:	aa03      	add	r2, sp, #12
   b963e:	4628      	mov	r0, r5
   b9640:	f003 fd16 	bl	bd070 <sscanf>
   b9644:	2803      	cmp	r0, #3
   b9646:	d116      	bne.n	b9676 <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b9648:	9b03      	ldr	r3, [sp, #12]
   b964a:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b964c:	9b04      	ldr	r3, [sp, #16]
   b964e:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b9650:	9b05      	ldr	r3, [sp, #20]
   b9652:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b9654:	212f      	movs	r1, #47	; 0x2f
   b9656:	4628      	mov	r0, r5
   b9658:	f007 fd66 	bl	c1128 <strchr>
        if (cp) {
   b965c:	b140      	cbz	r0, b9670 <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b965e:	1c41      	adds	r1, r0, #1
   b9660:	f104 0008 	add.w	r0, r4, #8
   b9664:	f7ff ff36 	bl	b94d4 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b9668:	2301      	movs	r3, #1
   b966a:	71e3      	strb	r3, [r4, #7]
}
   b966c:	b007      	add	sp, #28
   b966e:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b9670:	81a0      	strh	r0, [r4, #12]
   b9672:	73a0      	strb	r0, [r4, #14]
}
   b9674:	e7f8      	b.n	b9668 <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b9676:	4620      	mov	r0, r4
   b9678:	f7ff ffc8 	bl	b960c <_ZN15LocalTimeChange5clearEv>
   b967c:	e7f6      	b.n	b966c <_ZN15LocalTimeChange5parseEPKc+0x54>
   b967e:	bf00      	nop
   b9680:	000c4753 	.word	0x000c4753

000b9684 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b9684:	4b10      	ldr	r3, [pc, #64]	; (b96c8 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b9686:	4911      	ldr	r1, [pc, #68]	; (b96cc <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b9688:	b510      	push	{r4, lr}
   b968a:	4604      	mov	r4, r0
   b968c:	f840 3b04 	str.w	r3, [r0], #4
   b9690:	f006 f89b 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
   b9694:	f104 0014 	add.w	r0, r4, #20
   b9698:	f7ff ff14 	bl	b94c4 <_ZN12LocalTimeHMSC1Ev>
   b969c:	490b      	ldr	r1, [pc, #44]	; (b96cc <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b969e:	f104 001c 	add.w	r0, r4, #28
   b96a2:	f006 f892 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
   b96a6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b96aa:	f7ff ff0b 	bl	b94c4 <_ZN12LocalTimeHMSC1Ev>
   b96ae:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b96b2:	f7ff ff9d 	bl	b95f0 <_ZN15LocalTimeChangeC1Ev>
   b96b6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b96ba:	f7ff ff99 	bl	b95f0 <_ZN15LocalTimeChangeC1Ev>
   b96be:	2300      	movs	r3, #0
   b96c0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b96c4:	4620      	mov	r0, r4
   b96c6:	bd10      	pop	{r4, pc}
   b96c8:	000c47a4 	.word	0x000c47a4
   b96cc:	000c4fe0 	.word	0x000c4fe0

000b96d0 <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b96d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b96d4:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b96d6:	4608      	mov	r0, r1
   b96d8:	f007 fd50 	bl	c117c <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b96dc:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b96de:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b96e0:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b96e2:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b96e6:	493f      	ldr	r1, [pc, #252]	; (b97e4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b96e8:	9801      	ldr	r0, [sp, #4]
   b96ea:	aa01      	add	r2, sp, #4
   b96ec:	f008 fc4e 	bl	c1f8c <strtok_r>
   b96f0:	4601      	mov	r1, r0
   b96f2:	2800      	cmp	r0, #0
   b96f4:	d062      	beq.n	b97bc <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b96f6:	2d01      	cmp	r5, #1
   b96f8:	f105 0301 	add.w	r3, r5, #1
   b96fc:	d053      	beq.n	b97a6 <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b96fe:	2d02      	cmp	r5, #2
   b9700:	d056      	beq.n	b97b0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b9702:	2d00      	cmp	r5, #0
   b9704:	d146      	bne.n	b9794 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b9706:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b9708:	f892 9000 	ldrb.w	r9, [r2]
   b970c:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b9710:	4615      	mov	r5, r2
   b9712:	4617      	mov	r7, r2
   b9714:	f102 0201 	add.w	r2, r2, #1
   b9718:	d8f6      	bhi.n	b9708 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b971a:	2200      	movs	r2, #0
   b971c:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b971e:	f104 001c 	add.w	r0, r4, #28
   b9722:	f006 f8b0 	bl	bf886 <_ZN6StringaSEPKc>
                valid = true;
   b9726:	2201      	movs	r2, #1
                *cp = save2;
   b9728:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b972c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b9730:	782a      	ldrb	r2, [r5, #0]
   b9732:	b36a      	cbz	r2, b9790 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b9734:	f897 a000 	ldrb.w	sl, [r7]
   b9738:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b973c:	2a3f      	cmp	r2, #63	; 0x3f
   b973e:	46b9      	mov	r9, r7
   b9740:	46bb      	mov	fp, r7
   b9742:	f107 0701 	add.w	r7, r7, #1
   b9746:	d9f5      	bls.n	b9734 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b9748:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b974a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b974e:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b9752:	4629      	mov	r1, r5
   b9754:	4638      	mov	r0, r7
   b9756:	f7ff febd 	bl	b94d4 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b975a:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b975e:	f1ba 0f00 	cmp.w	sl, #0
   b9762:	d015      	beq.n	b9790 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b9764:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b9766:	f81b ab01 	ldrb.w	sl, [fp], #1
   b976a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b976e:	d8f9      	bhi.n	b9764 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b9770:	2200      	movs	r2, #0
   b9772:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b9774:	4649      	mov	r1, r9
   b9776:	1d20      	adds	r0, r4, #4
   b9778:	f006 f885 	bl	bf886 <_ZN6StringaSEPKc>
                        *cp = save2;
   b977c:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b9780:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b9784:	f1ba 0f00 	cmp.w	sl, #0
   b9788:	d006      	beq.n	b9798 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b978a:	4629      	mov	r1, r5
   b978c:	f7ff fea2 	bl	b94d4 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b9790:	2501      	movs	r5, #1
   b9792:	e7a8      	b.n	b96e6 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b9794:	461d      	mov	r5, r3
   b9796:	e7a6      	b.n	b96e6 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b9798:	4639      	mov	r1, r7
   b979a:	f7ff fe19 	bl	b93d0 <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b979e:	7e23      	ldrb	r3, [r4, #24]
   b97a0:	3b01      	subs	r3, #1
   b97a2:	7623      	strb	r3, [r4, #24]
   b97a4:	e7f4      	b.n	b9790 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b97a6:	4640      	mov	r0, r8
   b97a8:	f7ff ff36 	bl	b9618 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b97ac:	2502      	movs	r5, #2
   b97ae:	e79a      	b.n	b96e6 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b97b0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b97b4:	f7ff ff30 	bl	b9618 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b97b8:	2503      	movs	r5, #3
   b97ba:	e794      	b.n	b96e6 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b97bc:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b97c0:	b143      	cbz	r3, b97d4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b97c2:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b97c6:	b92a      	cbnz	r2, b97d4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b97c8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b97cc:	f7ff ff1e 	bl	b960c <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b97d0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b97d4:	4630      	mov	r0, r6
   b97d6:	f003 fc33 	bl	bd040 <free>

    return valid;
}
   b97da:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b97de:	b003      	add	sp, #12
   b97e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b97e4:	000c475d 	.word	0x000c475d

000b97e8 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b97e8:	b538      	push	{r3, r4, r5, lr}
   b97ea:	4b13      	ldr	r3, [pc, #76]	; (b9838 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b97ec:	4604      	mov	r4, r0
   b97ee:	460d      	mov	r5, r1
   b97f0:	f840 3b04 	str.w	r3, [r0], #4
   b97f4:	4911      	ldr	r1, [pc, #68]	; (b983c <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b97f6:	f005 ffe8 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
   b97fa:	f104 0014 	add.w	r0, r4, #20
   b97fe:	f7ff fe61 	bl	b94c4 <_ZN12LocalTimeHMSC1Ev>
   b9802:	490e      	ldr	r1, [pc, #56]	; (b983c <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b9804:	f104 001c 	add.w	r0, r4, #28
   b9808:	f005 ffdf 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
   b980c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b9810:	f7ff fe58 	bl	b94c4 <_ZN12LocalTimeHMSC1Ev>
   b9814:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9818:	f7ff feea 	bl	b95f0 <_ZN15LocalTimeChangeC1Ev>
   b981c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9820:	f7ff fee6 	bl	b95f0 <_ZN15LocalTimeChangeC1Ev>
   b9824:	2300      	movs	r3, #0
   b9826:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b982a:	4629      	mov	r1, r5
   b982c:	4620      	mov	r0, r4
   b982e:	f7ff ff4f 	bl	b96d0 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b9832:	4620      	mov	r0, r4
   b9834:	bd38      	pop	{r3, r4, r5, pc}
   b9836:	bf00      	nop
   b9838:	000c47a4 	.word	0x000c47a4
   b983c:	000c4fe0 	.word	0x000c4fe0

000b9840 <_ZNK14LocalTimeValue3hmsEv>:
    else {
        return tm_hour - 12;
    }
}

LocalTimeHMS LocalTimeValue::hms() const {
   b9840:	b508      	push	{r3, lr}
   b9842:	4603      	mov	r3, r0
    LocalTimeHMS result;
   b9844:	f7ff fe3e 	bl	b94c4 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   b9848:	688a      	ldr	r2, [r1, #8]
   b984a:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   b984c:	684a      	ldr	r2, [r1, #4]
   b984e:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   b9850:	680a      	ldr	r2, [r1, #0]
   b9852:	719a      	strb	r2, [r3, #6]
    result.fromTimeInfo(this);
    return result;
}
   b9854:	4618      	mov	r0, r3
   b9856:	bd08      	pop	{r3, pc}

000b9858 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   b9858:	b513      	push	{r0, r1, r4, lr}
   b985a:	4b07      	ldr	r3, [pc, #28]	; (b9878 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   b985c:	6003      	str	r3, [r0, #0]
   b985e:	2300      	movs	r3, #0
   b9860:	6043      	str	r3, [r0, #4]
   b9862:	4604      	mov	r4, r0
    *this = value.hms();
   b9864:	4668      	mov	r0, sp
   b9866:	f7ff ffeb 	bl	b9840 <_ZNK14LocalTimeValue3hmsEv>
   b986a:	4620      	mov	r0, r4
   b986c:	4669      	mov	r1, sp
   b986e:	f7ff fdaf 	bl	b93d0 <_ZN12LocalTimeHMSaSERKS_.isra.0>
}
   b9872:	b002      	add	sp, #8
   b9874:	bd10      	pop	{r4, pc}
   b9876:	bf00      	nop
   b9878:	000c4784 	.word	0x000c4784

000b987c <_ZNK14LocalTimeValue3ymdEv>:
        tm_min = hms.minute;
        tm_sec = hms.second;
    }
}

LocalTimeYMD LocalTimeValue::ymd() const {
   b987c:	b507      	push	{r0, r1, r2, lr}
    LocalTimeYMD() {
   b987e:	2300      	movs	r3, #0
   b9880:	4601      	mov	r1, r0
    LocalTimeYMD result;
    result.fromTimeInfo(this);
   b9882:	a801      	add	r0, sp, #4
   b9884:	9301      	str	r3, [sp, #4]
   b9886:	f7ff fe0b 	bl	b94a0 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
    return result;
}
   b988a:	9801      	ldr	r0, [sp, #4]
   b988c:	b003      	add	sp, #12
   b988e:	f85d fb04 	ldr.w	pc, [sp], #4

000b9892 <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>:
void LocalTimeYMD::fromLocalTimeValue(const LocalTimeValue &value) {
   b9892:	b510      	push	{r4, lr}
   b9894:	4604      	mov	r4, r0
    *this = value.ymd();
   b9896:	4608      	mov	r0, r1
   b9898:	f7ff fff0 	bl	b987c <_ZNK14LocalTimeValue3ymdEv>
   b989c:	6020      	str	r0, [r4, #0]
}
   b989e:	bd10      	pop	{r4, pc}

000b98a0 <_ZN16LocalTimeConvert7timeStrEv>:
        convert();
    }
}


String LocalTimeConvert::timeStr() {
   b98a0:	b510      	push	{r4, lr}
   b98a2:	4604      	mov	r4, r0
   b98a4:	b088      	sub	sp, #32
   b98a6:	4608      	mov	r0, r1
    char ascstr[26];
    asctime_r(&localTimeValue, ascstr);
   b98a8:	3068      	adds	r0, #104	; 0x68
   b98aa:	a901      	add	r1, sp, #4
   b98ac:	f007 fb3e 	bl	c0f2c <asctime_r>
    int len = strlen(ascstr);
   b98b0:	a801      	add	r0, sp, #4
   b98b2:	f007 fc80 	bl	c11b6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b98b6:	ab08      	add	r3, sp, #32
   b98b8:	4418      	add	r0, r3
   b98ba:	2300      	movs	r3, #0
   b98bc:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   b98c0:	a901      	add	r1, sp, #4
   b98c2:	4620      	mov	r0, r4
   b98c4:	f005 ff81 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
}
   b98c8:	4620      	mov	r0, r4
   b98ca:	b008      	add	sp, #32
   b98cc:	bd10      	pop	{r4, pc}
	...

000b98d0 <_ZNK16LocalTimeConvert8zoneNameEv>:
    char buf[50] = {};
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
    return String(buf);    
}

String LocalTimeConvert::zoneName() const { 
   b98d0:	b538      	push	{r3, r4, r5, lr}
   b98d2:	4604      	mov	r4, r0
    if (config.isZ()) {
   b98d4:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   b98d6:	460d      	mov	r5, r1
    if (config.isZ()) {
   b98d8:	f7ff fe4e 	bl	b9578 <_ZNK22LocalTimePosixTimezone3isZEv>
   b98dc:	b128      	cbz	r0, b98ea <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   b98de:	4909      	ldr	r1, [pc, #36]	; (b9904 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   b98e0:	4620      	mov	r0, r4
   b98e2:	f005 ff72 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
        return config.dstName;
    }
    else {
        return config.standardName;
    }
};
   b98e6:	4620      	mov	r0, r4
   b98e8:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   b98ea:	6828      	ldr	r0, [r5, #0]
   b98ec:	f7ff fd66 	bl	b93bc <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b98f0:	b128      	cbz	r0, b98fe <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   b98f2:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   b98f6:	4620      	mov	r0, r4
   b98f8:	f005 ffb2 	bl	bf860 <_ZN6StringC1ERKS_>
   b98fc:	e7f3      	b.n	b98e6 <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   b98fe:	f105 0120 	add.w	r1, r5, #32
   b9902:	e7f8      	b.n	b98f6 <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   b9904:	000c475f 	.word	0x000c475f

000b9908 <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   b9908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b990c:	4680      	mov	r8, r0
   b990e:	b0a8      	sub	sp, #160	; 0xa0
   b9910:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b9912:	4615      	mov	r5, r2
   b9914:	b12a      	cbz	r2, b9922 <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   b9916:	4b47      	ldr	r3, [pc, #284]	; (b9a34 <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   b9918:	4610      	mov	r0, r2
   b991a:	6819      	ldr	r1, [r3, #0]
   b991c:	f007 fc1b 	bl	c1156 <strcmp>
   b9920:	b938      	cbnz	r0, b9932 <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   b9922:	4621      	mov	r1, r4
   b9924:	4640      	mov	r0, r8
   b9926:	f7ff ffbb 	bl	b98a0 <_ZN16LocalTimeConvert7timeStrEv>
}
   b992a:	4640      	mov	r0, r8
   b992c:	b028      	add	sp, #160	; 0xa0
   b992e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b9932:	4629      	mov	r1, r5
   b9934:	223f      	movs	r2, #63	; 0x3f
   b9936:	a818      	add	r0, sp, #96	; 0x60
   b9938:	f007 fc59 	bl	c11ee <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b993c:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b993e:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b9940:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9944:	f007 fc37 	bl	c11b6 <strlen>
    String zoneNameStr = zoneName();
   b9948:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b994a:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   b994c:	a803      	add	r0, sp, #12
   b994e:	f7ff ffbf 	bl	b98d0 <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   b9952:	1d20      	adds	r0, r4, #4
   b9954:	f7ff fe10 	bl	b9578 <_ZNK22LocalTimePosixTimezone3isZEv>
   b9958:	b348      	cbz	r0, b99ae <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   b995a:	4937      	ldr	r1, [pc, #220]	; (b9a38 <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   b995c:	a807      	add	r0, sp, #28
   b995e:	f007 fc04 	bl	c116a <strcpy>
   b9962:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   b9964:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   b9966:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   b996a:	45ba      	cmp	sl, r7
   b996c:	d94c      	bls.n	b9a08 <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b996e:	7833      	ldrb	r3, [r6, #0]
   b9970:	2b25      	cmp	r3, #37	; 0x25
   b9972:	f107 0901 	add.w	r9, r7, #1
   b9976:	d117      	bne.n	b99a8 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   b9978:	7873      	ldrb	r3, [r6, #1]
   b997a:	2b7a      	cmp	r3, #122	; 0x7a
   b997c:	d136      	bne.n	b99ec <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   b997e:	a807      	add	r0, sp, #28
   b9980:	f007 fc19 	bl	c11b6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9984:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   b9986:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9988:	1838      	adds	r0, r7, r0
   b998a:	ebaa 0207 	sub.w	r2, sl, r7
   b998e:	1cb1      	adds	r1, r6, #2
   b9990:	4418      	add	r0, r3
   b9992:	f007 fb1d 	bl	c0fd0 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b9996:	462a      	mov	r2, r5
   b9998:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b999a:	4630      	mov	r0, r6
   b999c:	f007 fb18 	bl	c0fd0 <memcpy>
            len = strlen(format_str);
   b99a0:	a818      	add	r0, sp, #96	; 0x60
   b99a2:	f007 fc08 	bl	c11b6 <strlen>
   b99a6:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b99a8:	3601      	adds	r6, #1
   b99aa:	464f      	mov	r7, r9
   b99ac:	e7db      	b.n	b9966 <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b99ae:	6820      	ldr	r0, [r4, #0]
   b99b0:	f7ff fd04 	bl	b93bc <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b99b4:	b1b8      	cbz	r0, b99e6 <_ZN16LocalTimeConvert6formatEPKc+0xde>
   b99b6:	f104 0018 	add.w	r0, r4, #24
   b99ba:	f7ff fdc1 	bl	b9540 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   b99be:	223c      	movs	r2, #60	; 0x3c
   b99c0:	fb90 f3f2 	sdiv	r3, r0, r2
   b99c4:	2b00      	cmp	r3, #0
   b99c6:	bfb8      	it	lt
   b99c8:	425b      	neglt	r3, r3
   b99ca:	fbb3 f1f2 	udiv	r1, r3, r2
   b99ce:	fb02 3311 	mls	r3, r2, r1, r3
   b99d2:	9300      	str	r3, [sp, #0]
   b99d4:	4a19      	ldr	r2, [pc, #100]	; (b9a3c <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   b99d6:	4b1a      	ldr	r3, [pc, #104]	; (b9a40 <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   b99d8:	fb90 f3f3 	sdiv	r3, r0, r3
   b99dc:	2110      	movs	r1, #16
   b99de:	a807      	add	r0, sp, #28
   b99e0:	f003 fb4e 	bl	bd080 <snprintf>
   b99e4:	e7bd      	b.n	b9962 <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b99e6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b99ea:	e7e6      	b.n	b99ba <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   b99ec:	2b5a      	cmp	r3, #90	; 0x5a
   b99ee:	d1db      	bne.n	b99a8 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
	inline unsigned int length(void) const {return len;}
   b99f0:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b99f2:	ab18      	add	r3, sp, #96	; 0x60
   b99f4:	1978      	adds	r0, r7, r5
   b99f6:	ebaa 0207 	sub.w	r2, sl, r7
   b99fa:	1cb1      	adds	r1, r6, #2
   b99fc:	4418      	add	r0, r3
   b99fe:	f007 fae7 	bl	c0fd0 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b9a02:	9903      	ldr	r1, [sp, #12]
   b9a04:	462a      	mov	r2, r5
   b9a06:	e7c8      	b.n	b999a <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   b9a08:	2100      	movs	r1, #0
   b9a0a:	222e      	movs	r2, #46	; 0x2e
   b9a0c:	a80c      	add	r0, sp, #48	; 0x30
   b9a0e:	910b      	str	r1, [sp, #44]	; 0x2c
   b9a10:	f007 fb06 	bl	c1020 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   b9a14:	f104 0368 	add.w	r3, r4, #104	; 0x68
   b9a18:	aa18      	add	r2, sp, #96	; 0x60
   b9a1a:	2132      	movs	r1, #50	; 0x32
   b9a1c:	a80b      	add	r0, sp, #44	; 0x2c
   b9a1e:	f003 fb67 	bl	bd0f0 <strftime>
    return String(buf);    
   b9a22:	a90b      	add	r1, sp, #44	; 0x2c
   b9a24:	4640      	mov	r0, r8
   b9a26:	f005 fed0 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   b9a2a:	a803      	add	r0, sp, #12
   b9a2c:	f005 fe82 	bl	bf734 <_ZN6StringD1Ev>
   b9a30:	e77b      	b.n	b992a <_ZN16LocalTimeConvert6formatEPKc+0x22>
   b9a32:	bf00      	nop
   b9a34:	2003d698 	.word	0x2003d698
   b9a38:	000c475f 	.word	0x000c475f
   b9a3c:	000c4761 	.word	0x000c4761
   b9a40:	fffff1f0 	.word	0xfffff1f0

000b9a44 <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b9a44:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b9a46:	4d09      	ldr	r5, [pc, #36]	; (b9a6c <_ZN9LocalTime8instanceEv+0x28>)
   b9a48:	682b      	ldr	r3, [r5, #0]
   b9a4a:	b963      	cbnz	r3, b9a66 <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b9a4c:	2060      	movs	r0, #96	; 0x60
   b9a4e:	f7fa fb22 	bl	b4096 <_Znwj>
   b9a52:	4604      	mov	r4, r0
   b9a54:	b130      	cbz	r0, b9a64 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b9a56:	4b06      	ldr	r3, [pc, #24]	; (b9a70 <_ZN9LocalTime8instanceEv+0x2c>)
   b9a58:	f840 3b04 	str.w	r3, [r0], #4
   b9a5c:	f7ff fe12 	bl	b9684 <_ZN22LocalTimePosixTimezoneC1Ev>
   b9a60:	2364      	movs	r3, #100	; 0x64
   b9a62:	65e3      	str	r3, [r4, #92]	; 0x5c
   b9a64:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b9a66:	6828      	ldr	r0, [r5, #0]
   b9a68:	bd38      	pop	{r3, r4, r5, pc}
   b9a6a:	bf00      	nop
   b9a6c:	2003e4d4 	.word	0x2003e4d4
   b9a70:	000c4774 	.word	0x000c4774

000b9a74 <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b9a74:	f003 bb54 	b.w	bd120 <mktime>

000b9a78 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b9a78:	3901      	subs	r1, #1
   b9a7a:	290b      	cmp	r1, #11
   b9a7c:	d815      	bhi.n	b9aaa <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b9a7e:	e8df f001 	tbb	[pc, r1]
   b9a82:	0816      	.short	0x0816
   b9a84:	06160616 	.word	0x06160616
   b9a88:	16061616 	.word	0x16061616
   b9a8c:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b9a8e:	201e      	movs	r0, #30
   b9a90:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b9a92:	0783      	lsls	r3, r0, #30
   b9a94:	d10d      	bne.n	b9ab2 <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b9a96:	2364      	movs	r3, #100	; 0x64
   b9a98:	fb90 f2f3 	sdiv	r2, r0, r3
   b9a9c:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b9aa0:	2800      	cmp	r0, #0
   b9aa2:	bf0c      	ite	eq
   b9aa4:	201c      	moveq	r0, #28
   b9aa6:	201d      	movne	r0, #29
   b9aa8:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b9aaa:	2000      	movs	r0, #0
   b9aac:	4770      	bx	lr
            return 31;
   b9aae:	201f      	movs	r0, #31
   b9ab0:	4770      	bx	lr
                return 28;
   b9ab2:	201c      	movs	r0, #28
}
   b9ab4:	4770      	bx	lr

000b9ab6 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b9ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b9ab8:	2301      	movs	r3, #1
   b9aba:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b9abc:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b9ac0:	3b01      	subs	r3, #1
   b9ac2:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b9ac4:	2300      	movs	r3, #0
   b9ac6:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b9aca:	4606      	mov	r6, r0
   b9acc:	460c      	mov	r4, r1
   b9ace:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b9ad0:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b9ad2:	4620      	mov	r0, r4
   b9ad4:	f7ff ffce 	bl	b9a74 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b9ad8:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b9adc:	69a2      	ldr	r2, [r4, #24]
   b9ade:	429a      	cmp	r2, r3
   b9ae0:	d003      	beq.n	b9aea <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b9ae2:	68e3      	ldr	r3, [r4, #12]
   b9ae4:	3301      	adds	r3, #1
   b9ae6:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b9ae8:	e7f3      	b.n	b9ad2 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b9aea:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b9aee:	2d01      	cmp	r5, #1
   b9af0:	d013      	beq.n	b9b1a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b9af2:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b9af4:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b9af6:	3d01      	subs	r5, #1
   b9af8:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b9afc:	441d      	add	r5, r3
   b9afe:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b9b00:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b9b04:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b9b08:	f7ff ffb6 	bl	b9a78 <_ZN9LocalTime14lastDayOfMonthEii>
   b9b0c:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b9b0e:	bfc4      	itt	gt
   b9b10:	3d07      	subgt	r5, #7
   b9b12:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b9b14:	4620      	mov	r0, r4
   b9b16:	f7ff ffad 	bl	b9a74 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b9b1a:	4621      	mov	r1, r4
   b9b1c:	f106 0008 	add.w	r0, r6, #8
   b9b20:	f7ff fd3c 	bl	b959c <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b9b24:	4638      	mov	r0, r7
   b9b26:	f7ff fd46 	bl	b95b6 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b9b2a:	4620      	mov	r0, r4
}
   b9b2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b9b30:	f003 baf6 	b.w	bd120 <mktime>

000b9b34 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b9b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b9b36:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b9b3a:	b085      	sub	sp, #20
   b9b3c:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b9b3e:	b92b      	cbnz	r3, b9b4c <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b9b40:	f7ff ff80 	bl	b9a44 <_ZN9LocalTime8instanceEv>
   b9b44:	1d01      	adds	r1, r0, #4
   b9b46:	1d20      	adds	r0, r4, #4
   b9b48:	f7ff fc4f 	bl	b93ea <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b9b4c:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b9b50:	2b00      	cmp	r3, #0
   b9b52:	d065      	beq.n	b9c20 <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b9b54:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b9b58:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b9b5c:	4639      	mov	r1, r7
   b9b5e:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b9b60:	463e      	mov	r6, r7
   b9b62:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b9b66:	f003 facb 	bl	bd100 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b9b6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9b6c:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b9b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9b72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9b76:	6833      	ldr	r3, [r6, #0]
   b9b78:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b9b7a:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b9b7e:	a802      	add	r0, sp, #8
   b9b80:	f7ff fc86 	bl	b9490 <_ZN12LocalTimeHMSC1ERKS_>
   b9b84:	aa02      	add	r2, sp, #8
   b9b86:	4639      	mov	r1, r7
   b9b88:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b9b8c:	f7ff ff93 	bl	b9ab6 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b9b90:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b9b94:	f104 0118 	add.w	r1, r4, #24
   b9b98:	a802      	add	r0, sp, #8
   b9b9a:	f7ff fc79 	bl	b9490 <_ZN12LocalTimeHMSC1ERKS_>
   b9b9e:	aa02      	add	r2, sp, #8
   b9ba0:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b9ba4:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b9ba8:	f7ff ff85 	bl	b9ab6 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b9bac:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b9bb0:	4286      	cmp	r6, r0
   b9bb2:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b9bb6:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b9bba:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b9bbe:	da23      	bge.n	b9c08 <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b9bc0:	42b2      	cmp	r2, r6
   b9bc2:	eb73 0505 	sbcs.w	r5, r3, r5
   b9bc6:	da19      	bge.n	b9bfc <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b9bc8:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b9bca:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b9bcc:	6820      	ldr	r0, [r4, #0]
   b9bce:	f7ff fbf5 	bl	b93bc <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b9bd2:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b9bd6:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b9bda:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b9bdc:	bb10      	cbnz	r0, b9c24 <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b9bde:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b9be2:	f7ff fcad 	bl	b9540 <_ZNK12LocalTimeHMS9toSecondsEv>
   b9be6:	1a2d      	subs	r5, r5, r0
   b9be8:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b9bec:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b9bf0:	9901      	ldr	r1, [sp, #4]
   b9bf2:	a802      	add	r0, sp, #8
   b9bf4:	f003 fa84 	bl	bd100 <localtime_r>
}
   b9bf8:	b005      	add	sp, #20
   b9bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b9bfc:	4282      	cmp	r2, r0
   b9bfe:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b9c00:	bfb4      	ite	lt
   b9c02:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b9c04:	2302      	movge	r3, #2
   b9c06:	e7e0      	b.n	b9bca <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b9c08:	4282      	cmp	r2, r0
   b9c0a:	eb73 0101 	sbcs.w	r1, r3, r1
   b9c0e:	da01      	bge.n	b9c14 <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b9c10:	2303      	movs	r3, #3
   b9c12:	e7da      	b.n	b9bca <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b9c14:	42b2      	cmp	r2, r6
   b9c16:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b9c18:	bfb4      	ite	lt
   b9c1a:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b9c1c:	2305      	movge	r3, #5
   b9c1e:	e7d4      	b.n	b9bca <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b9c20:	2306      	movs	r3, #6
   b9c22:	e7d2      	b.n	b9bca <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b9c24:	f104 0018 	add.w	r0, r4, #24
   b9c28:	e7db      	b.n	b9be2 <_ZN16LocalTimeConvert7convertEv+0xae>

000b9c2a <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9c2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9c2c:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9c2e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9c30:	4668      	mov	r0, sp
   b9c32:	f7ff fc24 	bl	b947e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b9c36:	466a      	mov	r2, sp
   b9c38:	4629      	mov	r1, r5
   b9c3a:	4620      	mov	r0, r4
   b9c3c:	f004 f982 	bl	bdf44 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9c40:	a801      	add	r0, sp, #4
   b9c42:	f7fa fcf9 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9c46:	4620      	mov	r0, r4
   b9c48:	b003      	add	sp, #12
   b9c4a:	bd30      	pop	{r4, r5, pc}

000b9c4c <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9c4e:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9c50:	4604      	mov	r4, r0
   b9c52:	4668      	mov	r0, sp
   b9c54:	f7ff fc13 	bl	b947e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b9c58:	466a      	mov	r2, sp
   b9c5a:	4629      	mov	r1, r5
   b9c5c:	4620      	mov	r0, r4
   b9c5e:	f004 f94d 	bl	bdefc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9c62:	a801      	add	r0, sp, #4
   b9c64:	f7fa fce8 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9c68:	4620      	mov	r0, r4
   b9c6a:	b003      	add	sp, #12
   b9c6c:	bd30      	pop	{r4, r5, pc}

000b9c6e <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9c6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9c70:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9c72:	4604      	mov	r4, r0
   b9c74:	4668      	mov	r0, sp
   b9c76:	f7ff fc02 	bl	b947e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b9c7a:	466a      	mov	r2, sp
   b9c7c:	4629      	mov	r1, r5
   b9c7e:	4620      	mov	r0, r4
   b9c80:	f004 f8e5 	bl	bde4e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9c84:	a801      	add	r0, sp, #4
   b9c86:	f7fa fcd7 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9c8a:	4620      	mov	r0, r4
   b9c8c:	b003      	add	sp, #12
   b9c8e:	bd30      	pop	{r4, r5, pc}

000b9c90 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b9c90:	4770      	bx	lr

000b9c92 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b9c92:	b510      	push	{r4, lr}
}
   b9c94:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b9c96:	4604      	mov	r4, r0
}
   b9c98:	f7fa fa01 	bl	b409e <_ZdlPvj>
   b9c9c:	4620      	mov	r0, r4
   b9c9e:	bd10      	pop	{r4, pc}

000b9ca0 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b9ca0:	6803      	ldr	r3, [r0, #0]
   b9ca2:	b2c9      	uxtb	r1, r1
   b9ca4:	689b      	ldr	r3, [r3, #8]
   b9ca6:	4718      	bx	r3

000b9ca8 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b9ca8:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b9caa:	4d03      	ldr	r5, [pc, #12]	; (b9cb8 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b9cac:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b9cb0:	e9c0 5100 	strd	r5, r1, [r0]
}
   b9cb4:	bd30      	pop	{r4, r5, pc}
   b9cb6:	bf00      	nop
   b9cb8:	000c47b4 	.word	0x000c47b4

000b9cbc <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b9cbc:	6840      	ldr	r0, [r0, #4]
   b9cbe:	f003 bf51 	b.w	bdb64 <_ZN7TwoWire5beginEv>

000b9cc2 <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b9cc2:	b510      	push	{r4, lr}
   b9cc4:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b9cc6:	6800      	ldr	r0, [r0, #0]
   b9cc8:	f003 ffa7 	bl	bdc1a <_ZN7TwoWire6unlockEv>
   b9ccc:	4620      	mov	r0, r4
   b9cce:	bd10      	pop	{r4, pc}

000b9cd0 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b9cd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b9cd4:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b9cd6:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9cd8:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b9cda:	460d      	mov	r5, r1
   b9cdc:	4616      	mov	r6, r2
   b9cde:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b9ce0:	f003 ff92 	bl	bdc08 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b9ce4:	b1a7      	cbz	r7, b9d10 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b9ce6:	68e1      	ldr	r1, [r4, #12]
   b9ce8:	6860      	ldr	r0, [r4, #4]
   b9cea:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b9cee:	f003 ff6c 	bl	bdbca <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b9cf2:	0a29      	lsrs	r1, r5, #8
   b9cf4:	6860      	ldr	r0, [r4, #4]
   b9cf6:	f7ff ffd3 	bl	b9ca0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b9cfa:	4629      	mov	r1, r5
   b9cfc:	6860      	ldr	r0, [r4, #4]
   b9cfe:	f7ff ffcf 	bl	b9ca0 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b9d02:	6860      	ldr	r0, [r4, #4]
   b9d04:	2100      	movs	r1, #0
   b9d06:	f003 ff7b 	bl	bdc00 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b9d0a:	b148      	cbz	r0, b9d20 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b9d0c:	2400      	movs	r4, #0
   b9d0e:	e000      	b.n	b9d12 <_ZN6MB85RC8readDataEjPhj+0x42>
   b9d10:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b9d12:	a801      	add	r0, sp, #4
   b9d14:	f7ff ffd5 	bl	b9cc2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b9d18:	4620      	mov	r0, r4
   b9d1a:	b003      	add	sp, #12
   b9d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b9d20:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b9d22:	7b21      	ldrb	r1, [r4, #12]
   b9d24:	6860      	ldr	r0, [r4, #4]
   b9d26:	46b8      	mov	r8, r7
   b9d28:	bf28      	it	cs
   b9d2a:	f04f 0820 	movcs.w	r8, #32
   b9d2e:	2301      	movs	r3, #1
   b9d30:	4642      	mov	r2, r8
   b9d32:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b9d36:	f003 ff32 	bl	bdb9e <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b9d3a:	f006 fb37 	bl	c03ac <_Z19__fetch_global_Wirev>
   b9d3e:	6803      	ldr	r3, [r0, #0]
   b9d40:	691b      	ldr	r3, [r3, #16]
   b9d42:	4798      	blx	r3
   b9d44:	4540      	cmp	r0, r8
   b9d46:	dbe1      	blt.n	b9d0c <_ZN6MB85RC8readDataEjPhj+0x3c>
   b9d48:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b9d4c:	f006 fb2e 	bl	c03ac <_Z19__fetch_global_Wirev>
   b9d50:	6803      	ldr	r3, [r0, #0]
   b9d52:	695b      	ldr	r3, [r3, #20]
   b9d54:	4798      	blx	r3
   b9d56:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b9d5a:	454e      	cmp	r6, r9
   b9d5c:	d1f6      	bne.n	b9d4c <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b9d5e:	4445      	add	r5, r8
				dataLen--;
   b9d60:	eba7 0708 	sub.w	r7, r7, r8
   b9d64:	e7be      	b.n	b9ce4 <_ZN6MB85RC8readDataEjPhj+0x14>

000b9d66 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b9d66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9d6a:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b9d6c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9d6e:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b9d70:	460e      	mov	r6, r1
   b9d72:	4690      	mov	r8, r2
   b9d74:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b9d76:	f003 ff47 	bl	bdc08 <_ZN7TwoWire4lockEv>
   b9d7a:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b9d7e:	f1b9 0f00 	cmp.w	r9, #0
   b9d82:	d02a      	beq.n	b9dda <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b9d84:	b34d      	cbz	r5, b9dda <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b9d86:	68e1      	ldr	r1, [r4, #12]
   b9d88:	6860      	ldr	r0, [r4, #4]
   b9d8a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b9d8e:	f003 ff1c 	bl	bdbca <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b9d92:	0a31      	lsrs	r1, r6, #8
   b9d94:	6860      	ldr	r0, [r4, #4]
   b9d96:	f7ff ff83 	bl	b9ca0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b9d9a:	6860      	ldr	r0, [r4, #4]
   b9d9c:	4631      	mov	r1, r6
   b9d9e:	f7ff ff7f 	bl	b9ca0 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9da2:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b9da6:	4647      	mov	r7, r8
   b9da8:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b9dac:	6860      	ldr	r0, [r4, #4]
   b9dae:	f817 1b01 	ldrb.w	r1, [r7], #1
   b9db2:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b9db4:	3d01      	subs	r5, #1
				wire.write(*data);
   b9db6:	689b      	ldr	r3, [r3, #8]
   b9db8:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9dba:	4555      	cmp	r5, sl
   b9dbc:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b9dc0:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9dc2:	d001      	beq.n	b9dc8 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b9dc4:	2d00      	cmp	r5, #0
   b9dc6:	d1f1      	bne.n	b9dac <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b9dc8:	6860      	ldr	r0, [r4, #4]
   b9dca:	2101      	movs	r1, #1
   b9dcc:	f003 ff18 	bl	bdc00 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b9dd0:	2800      	cmp	r0, #0
   b9dd2:	d0d7      	beq.n	b9d84 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b9dd4:	f04f 0900 	mov.w	r9, #0
   b9dd8:	e7d1      	b.n	b9d7e <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b9dda:	a801      	add	r0, sp, #4
   b9ddc:	f7ff ff71 	bl	b9cc2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b9de0:	4648      	mov	r0, r9
   b9de2:	b003      	add	sp, #12
   b9de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9de8 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b9de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9dec:	b08b      	sub	sp, #44	; 0x2c
   b9dee:	460e      	mov	r6, r1
   b9df0:	4615      	mov	r5, r2
   b9df2:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b9df4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9df6:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b9df8:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b9dfa:	f003 ff05 	bl	bdc08 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b9dfe:	42ae      	cmp	r6, r5
   b9e00:	d229      	bcs.n	b9e56 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b9e02:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b9e04:	4425      	add	r5, r4
			while(numBytes > 0) {
   b9e06:	b18c      	cbz	r4, b9e2c <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b9e08:	2c1e      	cmp	r4, #30
   b9e0a:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b9e0c:	f8d8 3000 	ldr.w	r3, [r8]
   b9e10:	bf28      	it	cs
   b9e12:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b9e14:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b9e16:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b9e1a:	aa02      	add	r2, sp, #8
   b9e1c:	463b      	mov	r3, r7
   b9e1e:	4631      	mov	r1, r6
   b9e20:	4640      	mov	r0, r8
				framAddrTo -= count;
   b9e22:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b9e24:	47c8      	blx	r9
				if (!result) {
   b9e26:	b948      	cbnz	r0, b9e3c <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b9e28:	2400      	movs	r4, #0
   b9e2a:	e000      	b.n	b9e2e <_ZN6MB85RC8moveDataEjjj+0x46>
   b9e2c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b9e2e:	a801      	add	r0, sp, #4
   b9e30:	f7ff ff47 	bl	b9cc2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b9e34:	4620      	mov	r0, r4
   b9e36:	b00b      	add	sp, #44	; 0x2c
   b9e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b9e3c:	f8d8 3000 	ldr.w	r3, [r8]
   b9e40:	aa02      	add	r2, sp, #8
   b9e42:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b9e46:	4629      	mov	r1, r5
   b9e48:	463b      	mov	r3, r7
   b9e4a:	4640      	mov	r0, r8
   b9e4c:	47c8      	blx	r9
				if (!result) {
   b9e4e:	2800      	cmp	r0, #0
   b9e50:	d0ea      	beq.n	b9e28 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b9e52:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b9e54:	e7d7      	b.n	b9e06 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b9e56:	d9e9      	bls.n	b9e2c <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b9e58:	2c00      	cmp	r4, #0
   b9e5a:	d0e7      	beq.n	b9e2c <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b9e5c:	f8d8 3000 	ldr.w	r3, [r8]
   b9e60:	2c1e      	cmp	r4, #30
   b9e62:	4627      	mov	r7, r4
   b9e64:	bf28      	it	cs
   b9e66:	271e      	movcs	r7, #30
   b9e68:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b9e6c:	aa02      	add	r2, sp, #8
   b9e6e:	463b      	mov	r3, r7
   b9e70:	4631      	mov	r1, r6
   b9e72:	4640      	mov	r0, r8
   b9e74:	47c8      	blx	r9
				if (!result) {
   b9e76:	2800      	cmp	r0, #0
   b9e78:	d0d6      	beq.n	b9e28 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b9e7a:	f8d8 3000 	ldr.w	r3, [r8]
   b9e7e:	aa02      	add	r2, sp, #8
   b9e80:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b9e84:	4629      	mov	r1, r5
   b9e86:	463b      	mov	r3, r7
   b9e88:	4640      	mov	r0, r8
   b9e8a:	47c8      	blx	r9
				if (!result) {
   b9e8c:	2800      	cmp	r0, #0
   b9e8e:	d0cb      	beq.n	b9e28 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b9e90:	443e      	add	r6, r7
				framAddrTo += count;
   b9e92:	443d      	add	r5, r7
				numBytes -= count;
   b9e94:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b9e96:	e7df      	b.n	b9e58 <_ZN6MB85RC8moveDataEjjj+0x70>

000b9e98 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   b9e98:	6803      	ldr	r3, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b9e9a:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   b9e9c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   b9ea0:	2101      	movs	r1, #1
   b9ea2:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   b9ea6:	4770      	bx	lr

000b9ea8 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b9ea8:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b9eaa:	6842      	ldr	r2, [r0, #4]
   b9eac:	4603      	mov	r3, r0
   b9eae:	1054      	asrs	r4, r2, #1
   b9eb0:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b9eb4:	07d2      	lsls	r2, r2, #31
   b9eb6:	bf48      	it	mi
   b9eb8:	590a      	ldrmi	r2, [r1, r4]
   b9eba:	681b      	ldr	r3, [r3, #0]
      }
   b9ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
   b9ec0:	bf48      	it	mi
   b9ec2:	58d3      	ldrmi	r3, [r2, r3]
   b9ec4:	4718      	bx	r3

000b9ec6 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b9ec6:	2a01      	cmp	r2, #1
   b9ec8:	d102      	bne.n	b9ed0 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b9eca:	6001      	str	r1, [r0, #0]
      }
   b9ecc:	2000      	movs	r0, #0
   b9ece:	4770      	bx	lr
	  switch (__op)
   b9ed0:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b9ed2:	bf04      	itt	eq
   b9ed4:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b9ed8:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b9edc:	e7f6      	b.n	b9ecc <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b9ede <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b9ede:	2a01      	cmp	r2, #1
   b9ee0:	d102      	bne.n	b9ee8 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b9ee2:	6001      	str	r1, [r0, #0]
      }
   b9ee4:	2000      	movs	r0, #0
   b9ee6:	4770      	bx	lr
	  switch (__op)
   b9ee8:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b9eea:	bf04      	itt	eq
   b9eec:	680b      	ldreq	r3, [r1, #0]
   b9eee:	6003      	streq	r3, [r0, #0]
	      break;
   b9ef0:	e7f8      	b.n	b9ee4 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000b9ef2 <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   b9ef2:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b9ef4:	f002 bcbe 	b.w	bc874 <os_mutex_recursive_lock>

000b9ef8 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   b9ef8:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   b9efc:	4601      	mov	r1, r0
    if (stateHandler) {
   b9efe:	b11b      	cbz	r3, b9f08 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9f00:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   b9f04:	30c0      	adds	r0, #192	; 0xc0
   b9f06:	4718      	bx	r3
}
   b9f08:	4770      	bx	lr
	...

000b9f0c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b9f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   b9f0e:	4d12      	ldr	r5, [pc, #72]	; (b9f58 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b9f10:	4608      	mov	r0, r1
        eventData = "";
   b9f12:	2a00      	cmp	r2, #0
   b9f14:	bf18      	it	ne
   b9f16:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b9f18:	460e      	mov	r6, r1
   b9f1a:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b9f1c:	f007 f94b 	bl	c11b6 <strlen>
   b9f20:	2840      	cmp	r0, #64	; 0x40
   b9f22:	d816      	bhi.n	b9f52 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   b9f24:	4628      	mov	r0, r5
   b9f26:	f007 f946 	bl	c11b6 <strlen>
   b9f2a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b9f2e:	d810      	bhi.n	b9f52 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   b9f30:	3043      	adds	r0, #67	; 0x43
   b9f32:	f7fa f8b2 	bl	b409a <_Znaj>
    if (event) {
   b9f36:	4604      	mov	r4, r0
   b9f38:	b148      	cbz	r0, b9f4e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   b9f3a:	4631      	mov	r1, r6
        event->flags = flags;
   b9f3c:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   b9f40:	f007 f913 	bl	c116a <strcpy>
        strcpy(event->eventData, eventData);
   b9f44:	4629      	mov	r1, r5
   b9f46:	f104 0042 	add.w	r0, r4, #66	; 0x42
   b9f4a:	f007 f90e 	bl	c116a <strcpy>
}
   b9f4e:	4620      	mov	r0, r4
   b9f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   b9f52:	2400      	movs	r4, #0
   b9f54:	e7fb      	b.n	b9f4e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   b9f56:	bf00      	nop
   b9f58:	000c4fe0 	.word	0x000c4fe0

000b9f5c <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b9f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9f5e:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b9f60:	460a      	mov	r2, r1
   b9f62:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b9f64:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b9f66:	1d01      	adds	r1, r0, #4
   b9f68:	a808      	add	r0, sp, #32
   b9f6a:	f002 f883 	bl	bc074 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b9f6e:	9808      	ldr	r0, [sp, #32]
   b9f70:	2100      	movs	r1, #0
   b9f72:	f008 f8b5 	bl	c20e0 <open>
   b9f76:	4605      	mov	r5, r0
   b9f78:	a808      	add	r0, sp, #32
   b9f7a:	f005 fbdb 	bl	bf734 <_ZN6StringD1Ev>
    if (fd) {
   b9f7e:	2d00      	cmp	r5, #0
   b9f80:	d060      	beq.n	ba044 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   b9f82:	a908      	add	r1, sp, #32
   b9f84:	4628      	mov	r0, r5
   b9f86:	f008 f899 	bl	c20bc <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   b9f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9f8c:	492e      	ldr	r1, [pc, #184]	; (ba048 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   b9f8e:	482f      	ldr	r0, [pc, #188]	; (ba04c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b9f90:	4632      	mov	r2, r6
   b9f92:	f7fd fc23 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   b9f96:	2200      	movs	r2, #0
   b9f98:	4611      	mov	r1, r2
   b9f9a:	4628      	mov	r0, r5
   b9f9c:	f008 f896 	bl	c20cc <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   b9fa0:	2208      	movs	r2, #8
   b9fa2:	a906      	add	r1, sp, #24
   b9fa4:	4628      	mov	r0, r5
   b9fa6:	f008 f8af 	bl	c2108 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   b9faa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b9fac:	2f4a      	cmp	r7, #74	; 0x4a
   b9fae:	dd39      	ble.n	ba024 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   b9fb0:	4b27      	ldr	r3, [pc, #156]	; (ba050 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   b9fb2:	9a06      	ldr	r2, [sp, #24]
   b9fb4:	429a      	cmp	r2, r3
   b9fb6:	d135      	bne.n	ba024 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   b9fb8:	4b26      	ldr	r3, [pc, #152]	; (ba054 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   b9fba:	9a07      	ldr	r2, [sp, #28]
   b9fbc:	429a      	cmp	r2, r3
   b9fbe:	d131      	bne.n	ba024 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   b9fc0:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   b9fc4:	4610      	mov	r0, r2
   b9fc6:	9205      	str	r2, [sp, #20]
   b9fc8:	f7fa f867 	bl	b409a <_Znaj>
            if (result) {
   b9fcc:	4604      	mov	r4, r0
   b9fce:	b1c0      	cbz	r0, ba002 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b9fd0:	4427      	add	r7, r4
                read(fd, result, eventSize);
   b9fd2:	4601      	mov	r1, r0
   b9fd4:	9a05      	ldr	r2, [sp, #20]
   b9fd6:	4628      	mov	r0, r5
   b9fd8:	f008 f896 	bl	c2108 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b9fdc:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   b9fe0:	b9ab      	cbnz	r3, ba00e <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   b9fe2:	1c63      	adds	r3, r4, #1
   b9fe4:	4618      	mov	r0, r3
   b9fe6:	9305      	str	r3, [sp, #20]
   b9fe8:	f007 f8e5 	bl	c11b6 <strlen>
   b9fec:	283f      	cmp	r0, #63	; 0x3f
   b9fee:	9b05      	ldr	r3, [sp, #20]
   b9ff0:	d80d      	bhi.n	ba00e <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   b9ff2:	f104 0242 	add.w	r2, r4, #66	; 0x42
   b9ff6:	9200      	str	r2, [sp, #0]
   b9ff8:	4917      	ldr	r1, [pc, #92]	; (ba058 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   b9ffa:	4814      	ldr	r0, [pc, #80]	; (ba04c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b9ffc:	4632      	mov	r2, r6
   b9ffe:	f7fd fbed 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   ba002:	4628      	mov	r0, r5
   ba004:	f008 f852 	bl	c20ac <close>
}
   ba008:	4620      	mov	r0, r4
   ba00a:	b01f      	add	sp, #124	; 0x7c
   ba00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   ba00e:	4913      	ldr	r1, [pc, #76]	; (ba05c <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   ba010:	480e      	ldr	r0, [pc, #56]	; (ba04c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba012:	4632      	mov	r2, r6
   ba014:	f7fd fbe2 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   ba018:	2143      	movs	r1, #67	; 0x43
   ba01a:	4620      	mov	r0, r4
   ba01c:	f7fa f83f 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   ba020:	2400      	movs	r4, #0
   ba022:	e7ee      	b.n	ba002 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   ba024:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   ba028:	9302      	str	r3, [sp, #8]
   ba02a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   ba02e:	9301      	str	r3, [sp, #4]
   ba030:	f89d 301c 	ldrb.w	r3, [sp, #28]
   ba034:	9300      	str	r3, [sp, #0]
   ba036:	490a      	ldr	r1, [pc, #40]	; (ba060 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   ba038:	9b06      	ldr	r3, [sp, #24]
   ba03a:	4804      	ldr	r0, [pc, #16]	; (ba04c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba03c:	4632      	mov	r2, r6
   ba03e:	f7fd fbcd 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
   ba042:	e7ed      	b.n	ba020 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   ba044:	462c      	mov	r4, r5
    return result;
   ba046:	e7df      	b.n	ba008 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   ba048:	000c47c8 	.word	0x000c47c8
   ba04c:	2003e4d8 	.word	0x2003e4d8
   ba050:	31b67663 	.word	0x31b67663
   ba054:	00410801 	.word	0x00410801
   ba058:	000c47dc 	.word	0x000c47dc
   ba05c:	000c47fe 	.word	0x000c47fe
   ba060:	000c482c 	.word	0x000c482c

000ba064 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   ba064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba068:	4680      	mov	r8, r0
   ba06a:	4b28      	ldr	r3, [pc, #160]	; (ba10c <_ZN17PublishQueuePosixC1Ev+0xa8>)
   ba06c:	f848 3b04 	str.w	r3, [r8], #4
   ba070:	4604      	mov	r4, r0
   ba072:	4640      	mov	r0, r8
   ba074:	f001 ff16 	bl	bbea4 <_ZN14SequentialFileC1Ev>
   ba078:	2202      	movs	r2, #2
   ba07a:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   ba07c:	2500      	movs	r5, #0
   ba07e:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   ba082:	2308      	movs	r3, #8
   ba084:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   ba086:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   ba08a:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   ba08e:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   ba092:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   ba096:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba098:	2020      	movs	r0, #32
   ba09a:	f7f9 fffc 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba09e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   ba0a0:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba0a2:	3e01      	subs	r6, #1
   ba0a4:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   ba0a6:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   ba0aa:	4607      	mov	r7, r0
   ba0ac:	f44f 7000 	mov.w	r0, #512	; 0x200
   ba0b0:	f7f9 fff1 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba0b4:	f500 7300 	add.w	r3, r0, #512	; 0x200
   ba0b8:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   ba0bc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba0c0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   ba0c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba0c8:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   ba0cc:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   ba0d0:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   ba0d4:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   ba0d8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   ba0dc:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   ba0e0:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   ba0e4:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   ba0e8:	4909      	ldr	r1, [pc, #36]	; (ba110 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   ba0ea:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   ba0ee:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   ba0f2:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   ba0f6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   ba0fa:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   ba0fe:	4640      	mov	r0, r8
   ba100:	f001 ff16 	bl	bbf30 <_ZN14SequentialFile11withDirPathEPKc>
}
   ba104:	4620      	mov	r0, r4
   ba106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba10a:	bf00      	nop
   ba10c:	000c4a48 	.word	0x000c4a48
   ba110:	000c4871 	.word	0x000c4871

000ba114 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   ba114:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   ba116:	4d06      	ldr	r5, [pc, #24]	; (ba130 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   ba118:	682b      	ldr	r3, [r5, #0]
   ba11a:	b93b      	cbnz	r3, ba12c <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   ba11c:	20d0      	movs	r0, #208	; 0xd0
   ba11e:	f7f9 ffba 	bl	b4096 <_Znwj>
   ba122:	4604      	mov	r4, r0
   ba124:	b108      	cbz	r0, ba12a <_ZN17PublishQueuePosix8instanceEv+0x16>
   ba126:	f7ff ff9d 	bl	ba064 <_ZN17PublishQueuePosixC1Ev>
   ba12a:	602c      	str	r4, [r5, #0]
}
   ba12c:	6828      	ldr	r0, [r5, #0]
   ba12e:	bd38      	pop	{r3, r4, r5, pc}
   ba130:	2003e4dc 	.word	0x2003e4dc

000ba134 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   ba134:	6942      	ldr	r2, [r0, #20]
   ba136:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba138:	1a9b      	subs	r3, r3, r2
   ba13a:	109b      	asrs	r3, r3, #2
   ba13c:	1e5a      	subs	r2, r3, #1
   ba13e:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   ba142:	1a5b      	subs	r3, r3, r1
   ba144:	109b      	asrs	r3, r3, #2
   ba146:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   ba14a:	6902      	ldr	r2, [r0, #16]
   ba14c:	6880      	ldr	r0, [r0, #8]
   ba14e:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba150:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   ba154:	4770      	bx	lr

000ba156 <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   ba156:	b538      	push	{r3, r4, r5, lr}
   ba158:	4605      	mov	r5, r0
   ba15a:	f7ff feca 	bl	b9ef2 <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   ba15e:	f105 0078 	add.w	r0, r5, #120	; 0x78
   ba162:	f7ff ffe7 	bl	ba134 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   ba166:	4604      	mov	r4, r0
   ba168:	b950      	cbnz	r0, ba180 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   ba16a:	1d28      	adds	r0, r5, #4
   ba16c:	f002 f9d6 	bl	bc51c <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   ba170:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   ba174:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   ba176:	b11b      	cbz	r3, ba180 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   ba178:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   ba17c:	b903      	cbnz	r3, ba180 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   ba17e:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   ba180:	6f68      	ldr	r0, [r5, #116]	; 0x74
   ba182:	f002 fb7f 	bl	bc884 <os_mutex_recursive_unlock>
}
   ba186:	4620      	mov	r0, r4
   ba188:	bd38      	pop	{r3, r4, r5, pc}

000ba18a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   ba18a:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   ba18c:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   ba18e:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   ba190:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   ba192:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   ba194:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   ba196:	d002      	beq.n	ba19e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   ba198:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   ba19a:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   ba19c:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   ba19e:	68c0      	ldr	r0, [r0, #12]
   ba1a0:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba1a4:	f7f9 ff7b 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   ba1a8:	6963      	ldr	r3, [r4, #20]
   ba1aa:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba1ac:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   ba1ae:	685b      	ldr	r3, [r3, #4]
   ba1b0:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba1b2:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba1b6:	6122      	str	r2, [r4, #16]
   ba1b8:	e7ef      	b.n	ba19a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000ba1bc <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   ba1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba1c0:	b085      	sub	sp, #20
   ba1c2:	4604      	mov	r4, r0
   ba1c4:	f7ff fe95 	bl	b9ef2 <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   ba1c8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba270 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   ba1cc:	f8df a0a4 	ldr.w	sl, [pc, #164]	; ba274 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   ba1d0:	f8df b0a4 	ldr.w	fp, [pc, #164]	; ba278 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   ba1d4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   ba1d8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   ba1dc:	4293      	cmp	r3, r2
   ba1de:	d105      	bne.n	ba1ec <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   ba1e0:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   ba1e2:	b005      	add	sp, #20
   ba1e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba1e8:	f002 bb4c 	b.w	bc884 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   ba1ec:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   ba1f0:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   ba1f4:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   ba1f6:	f7ff ffc8 	bl	ba18a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   ba1fa:	4640      	mov	r0, r8
   ba1fc:	f002 f932 	bl	bc464 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   ba200:	2300      	movs	r3, #0
   ba202:	4602      	mov	r2, r0
   ba204:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   ba206:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   ba208:	4668      	mov	r0, sp
   ba20a:	f001 ff33 	bl	bc074 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   ba20e:	9800      	ldr	r0, [sp, #0]
   ba210:	f240 2102 	movw	r1, #514	; 0x202
   ba214:	f007 ff64 	bl	c20e0 <open>
   ba218:	4605      	mov	r5, r0
   ba21a:	4668      	mov	r0, sp
   ba21c:	f005 fa8a 	bl	bf734 <_ZN6StringD1Ev>
            if (fd) {
   ba220:	b1c5      	cbz	r5, ba254 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   ba222:	2208      	movs	r2, #8
   ba224:	4669      	mov	r1, sp
   ba226:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   ba228:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   ba22c:	f007 ff7e 	bl	c212c <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   ba230:	f107 0042 	add.w	r0, r7, #66	; 0x42
   ba234:	f006 ffbf 	bl	c11b6 <strlen>
   ba238:	4639      	mov	r1, r7
   ba23a:	f100 0243 	add.w	r2, r0, #67	; 0x43
   ba23e:	4628      	mov	r0, r5
   ba240:	f007 ff74 	bl	c212c <write>
                close(fd);
   ba244:	4628      	mov	r0, r5
   ba246:	f007 ff31 	bl	c20ac <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   ba24a:	4808      	ldr	r0, [pc, #32]	; (ba26c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   ba24c:	4632      	mov	r2, r6
   ba24e:	4659      	mov	r1, fp
   ba250:	f7fd fac4 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   ba254:	4631      	mov	r1, r6
   ba256:	4640      	mov	r0, r8
   ba258:	f002 f946 	bl	bc4e8 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   ba25c:	2f00      	cmp	r7, #0
   ba25e:	d0b9      	beq.n	ba1d4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   ba260:	2143      	movs	r1, #67	; 0x43
   ba262:	4638      	mov	r0, r7
   ba264:	f7f9 ff1b 	bl	b409e <_ZdlPvj>
   ba268:	e7b2      	b.n	ba1d0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   ba26a:	bf00      	nop
   ba26c:	2003e4d8 	.word	0x2003e4d8
   ba270:	31b67663 	.word	0x31b67663
   ba274:	00410801 	.word	0x00410801
   ba278:	000c487f 	.word	0x000c487f

000ba27c <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   ba27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba280:	4604      	mov	r4, r0
   ba282:	f7ff fe36 	bl	b9ef2 <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   ba286:	f104 0078 	add.w	r0, r4, #120	; 0x78
   ba28a:	f7ff ff53 	bl	ba134 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba28e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba290:	4298      	cmp	r0, r3
   ba292:	d902      	bls.n	ba29a <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   ba294:	4620      	mov	r0, r4
   ba296:	f7ff ff91 	bl	ba1bc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   ba29a:	f8df 8044 	ldr.w	r8, [pc, #68]	; ba2e0 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   ba29e:	4f0f      	ldr	r7, [pc, #60]	; (ba2dc <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   ba2a0:	1d26      	adds	r6, r4, #4
   ba2a2:	4630      	mov	r0, r6
   ba2a4:	f002 f93a 	bl	bc51c <_ZNK14SequentialFile11getQueueLenEv>
   ba2a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
   ba2aa:	4298      	cmp	r0, r3
   ba2ac:	dc04      	bgt.n	ba2b8 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   ba2ae:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   ba2b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba2b4:	f002 bae6 	b.w	bc884 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   ba2b8:	2101      	movs	r1, #1
   ba2ba:	4630      	mov	r0, r6
   ba2bc:	f002 f8de 	bl	bc47c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   ba2c0:	4605      	mov	r5, r0
   ba2c2:	2800      	cmp	r0, #0
   ba2c4:	d0ed      	beq.n	ba2a2 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   ba2c6:	4601      	mov	r1, r0
   ba2c8:	2200      	movs	r2, #0
   ba2ca:	4630      	mov	r0, r6
   ba2cc:	f001 ff0e 	bl	bc0ec <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   ba2d0:	462a      	mov	r2, r5
   ba2d2:	4641      	mov	r1, r8
   ba2d4:	4638      	mov	r0, r7
   ba2d6:	f7f9 ff4c 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
   ba2da:	e7e2      	b.n	ba2a2 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   ba2dc:	2003e4d8 	.word	0x2003e4d8
   ba2e0:	000c489c 	.word	0x000c489c

000ba2e4 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   ba2e4:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   ba2e6:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   ba2ea:	430b      	orrs	r3, r1
   ba2ec:	d005      	beq.n	ba2fa <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   ba2ee:	3840      	subs	r0, #64	; 0x40
   ba2f0:	ea50 0301 	orrs.w	r3, r0, r1
   ba2f4:	d10b      	bne.n	ba30e <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   ba2f6:	2a09      	cmp	r2, #9
   ba2f8:	d109      	bne.n	ba30e <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   ba2fa:	4905      	ldr	r1, [pc, #20]	; (ba310 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   ba2fc:	4805      	ldr	r0, [pc, #20]	; (ba314 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   ba2fe:	f7fd fa6d 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   ba302:	f7ff ff07 	bl	ba114 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   ba306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   ba30a:	f7ff bf57 	b.w	ba1bc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   ba30e:	bd08      	pop	{r3, pc}
   ba310:	000c48af 	.word	0x000c48af
   ba314:	2003e4d8 	.word	0x2003e4d8

000ba318 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   ba318:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   ba31a:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   ba31c:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   ba31e:	b183      	cbz	r3, ba342 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   ba320:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba322:	6945      	ldr	r5, [r0, #20]
   ba324:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   ba326:	42ae      	cmp	r6, r5
   ba328:	d906      	bls.n	ba338 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   ba32a:	f855 0b04 	ldr.w	r0, [r5], #4
   ba32e:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba332:	f7f9 feb4 	bl	b409e <_ZdlPvj>
   ba336:	e7f6      	b.n	ba326 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   ba338:	6861      	ldr	r1, [r4, #4]
   ba33a:	6820      	ldr	r0, [r4, #0]
   ba33c:	0089      	lsls	r1, r1, #2
   ba33e:	f7f9 feae 	bl	b409e <_ZdlPvj>
    }
   ba342:	4620      	mov	r0, r4
   ba344:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba348 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   ba348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba34a:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   ba34e:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   ba350:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   ba352:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   ba354:	b90a      	cbnz	r2, ba35a <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   ba356:	07d9      	lsls	r1, r3, #31
   ba358:	d505      	bpl.n	ba366 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba35a:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   ba35e:	4b0a      	ldr	r3, [pc, #40]	; (ba388 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   ba360:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba362:	4b0a      	ldr	r3, [pc, #40]	; (ba38c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   ba364:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   ba366:	4621      	mov	r1, r4
   ba368:	4668      	mov	r0, sp
   ba36a:	f7fe f8bc 	bl	b84e6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba36e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba370:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba372:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba374:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba376:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   ba378:	4668      	mov	r0, sp
   ba37a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba37c:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba37e:	9203      	str	r2, [sp, #12]
   ba380:	f7fb f8eb 	bl	b555a <_ZNSt14_Function_baseD1Ev>
	}
   ba384:	b004      	add	sp, #16
   ba386:	bd10      	pop	{r4, pc}
   ba388:	000b9ea9 	.word	0x000b9ea9
   ba38c:	000b9ec7 	.word	0x000b9ec7

000ba390 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   ba390:	b570      	push	{r4, r5, r6, lr}
   ba392:	b086      	sub	sp, #24
   ba394:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba396:	f002 fdab 	bl	bcef0 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   ba39a:	b948      	cbnz	r0, ba3b0 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   ba39c:	4b43      	ldr	r3, [pc, #268]	; (ba4ac <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   ba39e:	a902      	add	r1, sp, #8
   ba3a0:	e9cd 3002 	strd	r3, r0, [sp, #8]
   ba3a4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba3a8:	f7ff ffce 	bl	ba348 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   ba3ac:	b006      	add	sp, #24
   ba3ae:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   ba3b0:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   ba3b4:	b11d      	cbz	r5, ba3be <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   ba3b6:	2301      	movs	r3, #1
   ba3b8:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   ba3bc:	e7f6      	b.n	ba3ac <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   ba3be:	f002 fa99 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   ba3c2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   ba3c6:	1ac0      	subs	r0, r0, r3
   ba3c8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   ba3cc:	4298      	cmp	r0, r3
   ba3ce:	d3ed      	bcc.n	ba3ac <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   ba3d0:	1d26      	adds	r6, r4, #4
   ba3d2:	4629      	mov	r1, r5
   ba3d4:	4630      	mov	r0, r6
   ba3d6:	f002 f851 	bl	bc47c <_ZN14SequentialFile16getFileFromQueueEb>
   ba3da:	4601      	mov	r1, r0
   ba3dc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   ba3e0:	2800      	cmp	r0, #0
   ba3e2:	d052      	beq.n	ba48a <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   ba3e4:	4620      	mov	r0, r4
   ba3e6:	f7ff fdb9 	bl	b9f5c <_ZN17PublishQueuePosix13readQueueFileEi>
   ba3ea:	4605      	mov	r5, r0
   ba3ec:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   ba3f0:	2800      	cmp	r0, #0
   ba3f2:	d035      	beq.n	ba460 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   ba3f4:	f002 fa7e 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   ba3f8:	ae02      	add	r6, sp, #8
   ba3fa:	2500      	movs	r5, #0
   ba3fc:	4b2c      	ldr	r3, [pc, #176]	; (ba4b0 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   ba3fe:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   ba402:	4631      	mov	r1, r6
   ba404:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba408:	9302      	str	r3, [sp, #8]
   ba40a:	9503      	str	r5, [sp, #12]
   ba40c:	f7ff ff9c 	bl	ba348 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba410:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   ba414:	f103 0242 	add.w	r2, r3, #66	; 0x42
   ba418:	9200      	str	r2, [sp, #0]
   ba41a:	4926      	ldr	r1, [pc, #152]	; (ba4b4 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   ba41c:	4a26      	ldr	r2, [pc, #152]	; (ba4b8 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   ba41e:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba422:	42a8      	cmp	r0, r5
   ba424:	bf08      	it	eq
   ba426:	460a      	moveq	r2, r1
   ba428:	3301      	adds	r3, #1
   ba42a:	4924      	ldr	r1, [pc, #144]	; (ba4bc <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   ba42c:	4824      	ldr	r0, [pc, #144]	; (ba4c0 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   ba42e:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba432:	f7fd f9d3 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   ba436:	f7fd ff99 	bl	b836c <_ZN19BackgroundPublishRK8instanceEv>
   ba43a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   ba43e:	4b21      	ldr	r3, [pc, #132]	; (ba4c4 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   ba440:	9305      	str	r3, [sp, #20]
   ba442:	e9cd 6500 	strd	r6, r5, [sp]
   ba446:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   ba448:	4b1f      	ldr	r3, [pc, #124]	; (ba4c8 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba44a:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   ba44c:	9304      	str	r3, [sp, #16]
   ba44e:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba452:	3242      	adds	r2, #66	; 0x42
   ba454:	f7fe f8d6 	bl	b8604 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   ba458:	4630      	mov	r0, r6
   ba45a:	f7fb f87e 	bl	b555a <_ZNSt14_Function_baseD1Ev>
   ba45e:	e7a5      	b.n	ba3ac <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   ba460:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   ba464:	4919      	ldr	r1, [pc, #100]	; (ba4cc <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   ba466:	4816      	ldr	r0, [pc, #88]	; (ba4c0 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   ba468:	f7f9 fe83 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   ba46c:	2101      	movs	r1, #1
   ba46e:	4630      	mov	r0, r6
   ba470:	f002 f804 	bl	bc47c <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   ba474:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   ba478:	462a      	mov	r2, r5
   ba47a:	4630      	mov	r0, r6
   ba47c:	f001 fe36 	bl	bc0ec <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   ba480:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   ba484:	2b00      	cmp	r3, #0
   ba486:	d1b5      	bne.n	ba3f4 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   ba488:	e795      	b.n	ba3b6 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   ba48a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   ba48e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   ba492:	429a      	cmp	r2, r3
   ba494:	d007      	beq.n	ba4a6 <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   ba496:	681b      	ldr	r3, [r3, #0]
   ba498:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   ba49c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   ba4a0:	f7ff fe73 	bl	ba18a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   ba4a4:	e7ec      	b.n	ba480 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   ba4a6:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   ba4aa:	e784      	b.n	ba3b6 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   ba4ac:	000ba4d1 	.word	0x000ba4d1
   ba4b0:	000ba851 	.word	0x000ba851
   ba4b4:	000c48de 	.word	0x000c48de
   ba4b8:	000c4dd0 	.word	0x000c4dd0
   ba4bc:	000c48ff 	.word	0x000c48ff
   ba4c0:	2003e4d8 	.word	0x2003e4d8
   ba4c4:	000b9e99 	.word	0x000b9e99
   ba4c8:	000b9edf 	.word	0x000b9edf
   ba4cc:	000c48e2 	.word	0x000c48e2

000ba4d0 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   ba4d0:	b513      	push	{r0, r1, r4, lr}
   ba4d2:	4604      	mov	r4, r0
   ba4d4:	f002 fd0c 	bl	bcef0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   ba4d8:	b190      	cbz	r0, ba500 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   ba4da:	f002 fa0b 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   ba4de:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   ba4e2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   ba4e6:	4b0d      	ldr	r3, [pc, #52]	; (ba51c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   ba4e8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   ba4ec:	9300      	str	r3, [sp, #0]
   ba4ee:	4669      	mov	r1, sp
   ba4f0:	2300      	movs	r3, #0
   ba4f2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba4f6:	9301      	str	r3, [sp, #4]
   ba4f8:	f7ff ff26 	bl	ba348 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   ba4fc:	b002      	add	sp, #8
   ba4fe:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   ba500:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   ba504:	b11b      	cbz	r3, ba50e <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   ba506:	2301      	movs	r3, #1
   ba508:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   ba50c:	e7f6      	b.n	ba4fc <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   ba50e:	4620      	mov	r0, r4
   ba510:	f7ff fe21 	bl	ba156 <_ZN17PublishQueuePosix12getNumEventsEv>
   ba514:	2800      	cmp	r0, #0
   ba516:	d0f6      	beq.n	ba506 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   ba518:	e7f0      	b.n	ba4fc <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   ba51a:	bf00      	nop
   ba51c:	000ba391 	.word	0x000ba391

000ba520 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   ba520:	b570      	push	{r4, r5, r6, lr}
   ba522:	4605      	mov	r5, r0
   ba524:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   ba526:	2000      	movs	r0, #0
   ba528:	f002 fc80 	bl	bce2c <system_thread_get_state>
   ba52c:	2801      	cmp	r0, #1
   ba52e:	d005      	beq.n	ba53c <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   ba530:	493e      	ldr	r1, [pc, #248]	; (ba62c <_ZN17PublishQueuePosix5setupEv+0x10c>)
   ba532:	483f      	ldr	r0, [pc, #252]	; (ba630 <_ZN17PublishQueuePosix5setupEv+0x110>)
   ba534:	f7fd f944 	bl	b77c0 <_ZNK5spark6Logger5errorEPKcz>
}
   ba538:	b018      	add	sp, #96	; 0x60
   ba53a:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   ba53c:	f105 0074 	add.w	r0, r5, #116	; 0x74
   ba540:	f002 f988 	bl	bc854 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba544:	4b3b      	ldr	r3, [pc, #236]	; (ba634 <_ZN17PublishQueuePosix5setupEv+0x114>)
   ba546:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   ba548:	4b3b      	ldr	r3, [pc, #236]	; (ba638 <_ZN17PublishQueuePosix5setupEv+0x118>)
   ba54a:	9307      	str	r3, [sp, #28]
        };
   ba54c:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   ba54e:	4b3b      	ldr	r3, [pc, #236]	; (ba63c <_ZN17PublishQueuePosix5setupEv+0x11c>)
   ba550:	9306      	str	r3, [sp, #24]
   ba552:	a808      	add	r0, sp, #32
   ba554:	f7fb f992 	bl	b587c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   ba558:	a908      	add	r1, sp, #32
   ba55a:	a80c      	add	r0, sp, #48	; 0x30
   ba55c:	f7fb f98e 	bl	b587c <_ZNSt8functionIFvyiEEC1ERKS1_>
   ba560:	a90c      	add	r1, sp, #48	; 0x30
   ba562:	a810      	add	r0, sp, #64	; 0x40
   ba564:	f7fb f98a 	bl	b587c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   ba568:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba56a:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   ba56c:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba56e:	f7f9 fd92 	bl	b4096 <_Znwj>
   ba572:	4604      	mov	r4, r0
   ba574:	b160      	cbz	r0, ba590 <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   ba576:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba578:	4601      	mov	r1, r0
   ba57a:	a810      	add	r0, sp, #64	; 0x40
   ba57c:	f7fd ffb3 	bl	b84e6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba580:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   ba582:	68a2      	ldr	r2, [r4, #8]
   ba584:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   ba586:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba588:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba58a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   ba58c:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba58e:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   ba590:	4b2b      	ldr	r3, [pc, #172]	; (ba640 <_ZN17PublishQueuePosix5setupEv+0x120>)
   ba592:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   ba594:	4b2b      	ldr	r3, [pc, #172]	; (ba644 <_ZN17PublishQueuePosix5setupEv+0x124>)
   ba596:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   ba598:	4b2b      	ldr	r3, [pc, #172]	; (ba648 <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba59a:	9414      	str	r4, [sp, #80]	; 0x50
   ba59c:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   ba59e:	2010      	movs	r0, #16
        SystemEventContext context = {};
   ba5a0:	e9cd 3601 	strd	r3, r6, [sp, #4]
   ba5a4:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   ba5a6:	f7f9 fd76 	bl	b4096 <_Znwj>
   ba5aa:	4604      	mov	r4, r0
   ba5ac:	b1d8      	cbz	r0, ba5e6 <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   ba5ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   ba5b0:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   ba5b2:	b133      	cbz	r3, ba5c2 <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   ba5b4:	2202      	movs	r2, #2
   ba5b6:	a914      	add	r1, sp, #80	; 0x50
   ba5b8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   ba5ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba5bc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   ba5be:	9b16      	ldr	r3, [sp, #88]	; 0x58
   ba5c0:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   ba5c2:	4b22      	ldr	r3, [pc, #136]	; (ba64c <_ZN17PublishQueuePosix5setupEv+0x12c>)
   ba5c4:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   ba5c6:	4a22      	ldr	r2, [pc, #136]	; (ba650 <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   ba5c8:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   ba5ca:	ab01      	add	r3, sp, #4
   ba5cc:	f44f 6004 	mov.w	r0, #2112	; 0x840
   ba5d0:	2100      	movs	r1, #0
   ba5d2:	f002 fc0b 	bl	bcdec <system_subscribe_event>
        if (r) {
   ba5d6:	b130      	cbz	r0, ba5e6 <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   ba5d8:	4620      	mov	r0, r4
   ba5da:	f7fa ffbe 	bl	b555a <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   ba5de:	2110      	movs	r1, #16
   ba5e0:	4620      	mov	r0, r4
   ba5e2:	f7f9 fd5c 	bl	b409e <_ZdlPvj>
   ba5e6:	a814      	add	r0, sp, #80	; 0x50
   ba5e8:	f7fa ffb7 	bl	b555a <_ZNSt14_Function_baseD1Ev>
   ba5ec:	a810      	add	r0, sp, #64	; 0x40
   ba5ee:	f7fa ffb4 	bl	b555a <_ZNSt14_Function_baseD1Ev>
   ba5f2:	a80c      	add	r0, sp, #48	; 0x30
   ba5f4:	f7fa ffb1 	bl	b555a <_ZNSt14_Function_baseD1Ev>
   ba5f8:	a808      	add	r0, sp, #32
   ba5fa:	f7fa ffae 	bl	b555a <_ZNSt14_Function_baseD1Ev>
   ba5fe:	a804      	add	r0, sp, #16
   ba600:	f7fa ffab 	bl	b555a <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   ba604:	f7fd feb2 	bl	b836c <_ZN19BackgroundPublishRK8instanceEv>
   ba608:	f7fd ffd6 	bl	b85b8 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   ba60c:	1d28      	adds	r0, r5, #4
   ba60e:	f001 feb1 	bl	bc374 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   ba612:	4628      	mov	r0, r5
   ba614:	f7ff fe32 	bl	ba27c <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   ba618:	4b0e      	ldr	r3, [pc, #56]	; (ba654 <_ZN17PublishQueuePosix5setupEv+0x134>)
   ba61a:	9314      	str	r3, [sp, #80]	; 0x50
   ba61c:	a914      	add	r1, sp, #80	; 0x50
   ba61e:	2300      	movs	r3, #0
   ba620:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   ba624:	9315      	str	r3, [sp, #84]	; 0x54
   ba626:	f7ff fe8f 	bl	ba348 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   ba62a:	e785      	b.n	ba538 <_ZN17PublishQueuePosix5setupEv+0x18>
   ba62c:	000c491e 	.word	0x000c491e
   ba630:	2003e4d8 	.word	0x2003e4d8
   ba634:	000ba2e5 	.word	0x000ba2e5
   ba638:	000b5537 	.word	0x000b5537
   ba63c:	000b5523 	.word	0x000b5523
   ba640:	000b54fd 	.word	0x000b54fd
   ba644:	000b59a5 	.word	0x000b59a5
   ba648:	000c0002 	.word	0x000c0002
   ba64c:	000b556d 	.word	0x000b556d
   ba650:	000b54d5 	.word	0x000b54d5
   ba654:	000ba4d1 	.word	0x000ba4d1

000ba658 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   ba658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba65c:	4606      	mov	r6, r0
   ba65e:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba660:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ba662:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba664:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba666:	1a47      	subs	r7, r0, r1
   ba668:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   ba66c:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba66e:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   ba672:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba674:	d927      	bls.n	ba6c6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   ba676:	1b5d      	subs	r5, r3, r5
   ba678:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba67a:	6832      	ldr	r2, [r6, #0]
   ba67c:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   ba67e:	b10c      	cbz	r4, ba684 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   ba680:	ea4f 0489 	mov.w	r4, r9, lsl #2
   ba684:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba686:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   ba688:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   ba68a:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   ba68c:	eba3 0201 	sub.w	r2, r3, r1
   ba690:	d913      	bls.n	ba6ba <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   ba692:	4299      	cmp	r1, r3
   ba694:	d002      	beq.n	ba69c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba696:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba698:	f006 fca8 	bl	c0fec <memmove>
	_M_node = __new_node;
   ba69c:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   ba69e:	6823      	ldr	r3, [r4, #0]
   ba6a0:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba6a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba6a6:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   ba6a8:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   ba6aa:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   ba6ac:	59e3      	ldr	r3, [r4, r7]
   ba6ae:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba6b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba6b4:	6233      	str	r3, [r6, #32]
    }
   ba6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   ba6ba:	4299      	cmp	r1, r3
   ba6bc:	d0ee      	beq.n	ba69c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba6be:	1d38      	adds	r0, r7, #4
   ba6c0:	1a80      	subs	r0, r0, r2
   ba6c2:	4420      	add	r0, r4
   ba6c4:	e7e8      	b.n	ba698 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   ba6c6:	f103 0802 	add.w	r8, r3, #2
   ba6ca:	454b      	cmp	r3, r9
   ba6cc:	bf2c      	ite	cs
   ba6ce:	4498      	addcs	r8, r3
   ba6d0:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   ba6d2:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   ba6d6:	d301      	bcc.n	ba6dc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   ba6d8:	f005 fef4 	bl	c04c4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba6dc:	ea4f 0088 	mov.w	r0, r8, lsl #2
   ba6e0:	f7f9 fcd9 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba6e4:	eba8 0505 	sub.w	r5, r8, r5
   ba6e8:	086d      	lsrs	r5, r5, #1
   ba6ea:	4682      	mov	sl, r0
   ba6ec:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   ba6ee:	b10c      	cbz	r4, ba6f4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   ba6f0:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   ba6f4:	6a72      	ldr	r2, [r6, #36]	; 0x24
   ba6f6:	6971      	ldr	r1, [r6, #20]
   ba6f8:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   ba6fa:	442c      	add	r4, r5
	  if (_Num)
   ba6fc:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba6fe:	4454      	add	r4, sl
   ba700:	d003      	beq.n	ba70a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba702:	1a52      	subs	r2, r2, r1
   ba704:	4620      	mov	r0, r4
   ba706:	f006 fc71 	bl	c0fec <memmove>
	::operator delete(__p
   ba70a:	6871      	ldr	r1, [r6, #4]
   ba70c:	6830      	ldr	r0, [r6, #0]
   ba70e:	0089      	lsls	r1, r1, #2
   ba710:	f7f9 fcc5 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   ba714:	e9c6 a800 	strd	sl, r8, [r6]
   ba718:	e7c0      	b.n	ba69c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000ba71c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   ba71c:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba71e:	b085      	sub	sp, #20
   ba720:	4604      	mov	r4, r0
   ba722:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   ba726:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   ba72a:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   ba72c:	460f      	mov	r7, r1
   ba72e:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   ba730:	f7ff fbec 	bl	b9f0c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   ba734:	4605      	mov	r5, r0
   ba736:	2800      	cmp	r0, #0
   ba738:	d03c      	beq.n	ba7b4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   ba73a:	4b3f      	ldr	r3, [pc, #252]	; (ba838 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   ba73c:	493f      	ldr	r1, [pc, #252]	; (ba83c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   ba73e:	4840      	ldr	r0, [pc, #256]	; (ba840 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   ba740:	2e00      	cmp	r6, #0
   ba742:	bf18      	it	ne
   ba744:	4633      	movne	r3, r6
   ba746:	463a      	mov	r2, r7
   ba748:	f7fd f848 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
   ba74c:	4620      	mov	r0, r4
   ba74e:	f7ff fbd0 	bl	b9ef2 <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   ba752:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   ba756:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   ba75a:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   ba75c:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   ba75e:	f104 0678 	add.w	r6, r4, #120	; 0x78
   ba762:	d029      	beq.n	ba7b8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba764:	b103      	cbz	r3, ba768 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   ba766:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   ba768:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   ba76c:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   ba76e:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   ba770:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   ba774:	4628      	mov	r0, r5
   ba776:	f001 fed1 	bl	bc51c <_ZNK14SequentialFile11getQueueLenEv>
   ba77a:	9003      	str	r0, [sp, #12]
   ba77c:	4630      	mov	r0, r6
   ba77e:	f7ff fcd9 	bl	ba134 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba782:	9002      	str	r0, [sp, #8]
   ba784:	f002 fbb4 	bl	bcef0 <spark_cloud_flag_connected>
   ba788:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   ba78c:	9000      	str	r0, [sp, #0]
   ba78e:	492d      	ldr	r1, [pc, #180]	; (ba844 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   ba790:	482b      	ldr	r0, [pc, #172]	; (ba840 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   ba792:	f7fd f823 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   ba796:	4628      	mov	r0, r5
   ba798:	f001 fec0 	bl	bc51c <_ZNK14SequentialFile11getQueueLenEv>
   ba79c:	2800      	cmp	r0, #0
   ba79e:	d03b      	beq.n	ba818 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   ba7a0:	4620      	mov	r0, r4
   ba7a2:	f7ff fd0b 	bl	ba1bc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   ba7a6:	4620      	mov	r0, r4
   ba7a8:	f7ff fd68 	bl	ba27c <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   ba7ac:	6f60      	ldr	r0, [r4, #116]	; 0x74
   ba7ae:	f002 f869 	bl	bc884 <os_mutex_recursive_unlock>
    return true;
   ba7b2:	2001      	movs	r0, #1
}
   ba7b4:	b005      	add	sp, #20
   ba7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   ba7b8:	4630      	mov	r0, r6
   ba7ba:	f7ff fcbb 	bl	ba134 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba7be:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   ba7c2:	4298      	cmp	r0, r3
   ba7c4:	d102      	bne.n	ba7cc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   ba7c6:	4820      	ldr	r0, [pc, #128]	; (ba848 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   ba7c8:	f005 fe7f 	bl	c04ca <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   ba7cc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   ba7d0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   ba7d2:	1a9a      	subs	r2, r3, r2
   ba7d4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   ba7d6:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   ba7da:	2b01      	cmp	r3, #1
   ba7dc:	d804      	bhi.n	ba7e8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   ba7de:	2200      	movs	r2, #0
   ba7e0:	2101      	movs	r1, #1
   ba7e2:	4630      	mov	r0, r6
   ba7e4:	f7ff ff38 	bl	ba658 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba7e8:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   ba7ec:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   ba7f0:	f7f9 fc51 	bl	b4096 <_Znwj>
   ba7f4:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   ba7f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba7fa:	b103      	cbz	r3, ba7fe <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   ba7fc:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   ba7fe:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   ba802:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba804:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   ba808:	685b      	ldr	r3, [r3, #4]
   ba80a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba80e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba812:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   ba816:	e7aa      	b.n	ba76e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   ba818:	4630      	mov	r0, r6
   ba81a:	f7ff fc8b 	bl	ba134 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba81e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba820:	4298      	cmp	r0, r3
   ba822:	d8bd      	bhi.n	ba7a0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   ba824:	f002 fb64 	bl	bcef0 <spark_cloud_flag_connected>
   ba828:	2800      	cmp	r0, #0
   ba82a:	d0b9      	beq.n	ba7a0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   ba82c:	4907      	ldr	r1, [pc, #28]	; (ba84c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   ba82e:	4804      	ldr	r0, [pc, #16]	; (ba840 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   ba830:	f7fc ffd4 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
   ba834:	e7b7      	b.n	ba7a6 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   ba836:	bf00      	nop
   ba838:	000c4fe0 	.word	0x000c4fe0
   ba83c:	000c4941 	.word	0x000c4941
   ba840:	2003e4d8 	.word	0x2003e4d8
   ba844:	000c4999 	.word	0x000c4999
   ba848:	000c4969 	.word	0x000c4969
   ba84c:	000c49c5 	.word	0x000c49c5

000ba850 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   ba850:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   ba852:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   ba856:	4604      	mov	r4, r0
    if (!publishComplete) {
   ba858:	2b00      	cmp	r3, #0
   ba85a:	d041      	beq.n	ba8e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   ba85c:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   ba860:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   ba864:	2b00      	cmp	r3, #0
   ba866:	d03d      	beq.n	ba8e4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   ba868:	4950      	ldr	r1, [pc, #320]	; (ba9ac <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   ba86a:	4851      	ldr	r0, [pc, #324]	; (ba9b0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   ba86c:	f7fc ffb6 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   ba870:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   ba874:	b1d3      	cbz	r3, ba8ac <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   ba876:	1d26      	adds	r6, r4, #4
   ba878:	2100      	movs	r1, #0
   ba87a:	4630      	mov	r0, r6
   ba87c:	f001 fdfe 	bl	bc47c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   ba880:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   ba884:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   ba886:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   ba888:	d10d      	bne.n	ba8a6 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   ba88a:	2101      	movs	r1, #1
   ba88c:	4630      	mov	r0, r6
   ba88e:	f001 fdf5 	bl	bc47c <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   ba892:	2200      	movs	r2, #0
   ba894:	4629      	mov	r1, r5
   ba896:	4630      	mov	r0, r6
   ba898:	f001 fc28 	bl	bc0ec <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   ba89c:	4945      	ldr	r1, [pc, #276]	; (ba9b4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   ba89e:	4844      	ldr	r0, [pc, #272]	; (ba9b0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   ba8a0:	462a      	mov	r2, r5
   ba8a2:	f7fc ff9b 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   ba8a6:	2300      	movs	r3, #0
   ba8a8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   ba8ac:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   ba8b0:	b110      	cbz	r0, ba8b8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   ba8b2:	2143      	movs	r1, #67	; 0x43
   ba8b4:	f7f9 fbf3 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   ba8b8:	2300      	movs	r3, #0
   ba8ba:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   ba8be:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   ba8c2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   ba8c6:	4b3c      	ldr	r3, [pc, #240]	; (ba9b8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   ba8c8:	9300      	str	r3, [sp, #0]
   ba8ca:	4669      	mov	r1, sp
   ba8cc:	2300      	movs	r3, #0
   ba8ce:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba8d2:	9301      	str	r3, [sp, #4]
   ba8d4:	f7ff fd38 	bl	ba348 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   ba8d8:	f002 f80c 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   ba8dc:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   ba8e0:	b002      	add	sp, #8
   ba8e2:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   ba8e4:	4935      	ldr	r1, [pc, #212]	; (ba9bc <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   ba8e6:	4832      	ldr	r0, [pc, #200]	; (ba9b0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   ba8e8:	f7fc ff78 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   ba8ec:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   ba8f0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   ba8f4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   ba8f8:	b14b      	cbz	r3, ba90e <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   ba8fa:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   ba8fe:	b110      	cbz	r0, ba906 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   ba900:	2143      	movs	r1, #67	; 0x43
   ba902:	f7f9 fbcc 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   ba906:	2300      	movs	r3, #0
   ba908:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   ba90c:	e7db      	b.n	ba8c6 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   ba90e:	4620      	mov	r0, r4
   ba910:	f7ff faef 	bl	b9ef2 <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   ba914:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   ba918:	4293      	cmp	r3, r2
   ba91a:	d013      	beq.n	ba944 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   ba91c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   ba920:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   ba924:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   ba928:	3b04      	subs	r3, #4
   ba92a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   ba92e:	6f60      	ldr	r0, [r4, #116]	; 0x74
   ba930:	f001 ffa8 	bl	bc884 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   ba934:	4922      	ldr	r1, [pc, #136]	; (ba9c0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   ba936:	481e      	ldr	r0, [pc, #120]	; (ba9b0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   ba938:	f7fc ff50 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   ba93c:	4620      	mov	r0, r4
   ba93e:	f7ff fc3d 	bl	ba1bc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   ba942:	e7c0      	b.n	ba8c6 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   ba944:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   ba948:	4628      	mov	r0, r5
   ba94a:	f7ff fbf3 	bl	ba134 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba94e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   ba952:	4298      	cmp	r0, r3
   ba954:	d102      	bne.n	ba95c <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   ba956:	481b      	ldr	r0, [pc, #108]	; (ba9c4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   ba958:	f005 fdb7 	bl	c04ca <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   ba95c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   ba960:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   ba962:	429a      	cmp	r2, r3
   ba964:	d104      	bne.n	ba970 <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   ba966:	2201      	movs	r2, #1
   ba968:	4611      	mov	r1, r2
   ba96a:	4628      	mov	r0, r5
   ba96c:	f7ff fe74 	bl	ba658 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba970:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   ba974:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   ba978:	f7f9 fb8d 	bl	b4096 <_Znwj>
   ba97c:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   ba980:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   ba984:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   ba986:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   ba98a:	f853 3c04 	ldr.w	r3, [r3, #-4]
   ba98e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba992:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba996:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   ba99a:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   ba99e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba9a2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   ba9a6:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   ba9aa:	e7c0      	b.n	ba92e <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   ba9ac:	000c49d8 	.word	0x000c49d8
   ba9b0:	2003e4d8 	.word	0x2003e4d8
   ba9b4:	000c49eb 	.word	0x000c49eb
   ba9b8:	000ba391 	.word	0x000ba391
   ba9bc:	000c49fb 	.word	0x000c49fb
   ba9c0:	000c4a0d 	.word	0x000c4a0d
   ba9c4:	000c4969 	.word	0x000c4969

000ba9c8 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   ba9c8:	4b01      	ldr	r3, [pc, #4]	; (ba9d0 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   ba9ca:	4a02      	ldr	r2, [pc, #8]	; (ba9d4 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   ba9cc:	601a      	str	r2, [r3, #0]
}
   ba9ce:	4770      	bx	lr
   ba9d0:	2003e4d8 	.word	0x2003e4d8
   ba9d4:	000c4a34 	.word	0x000c4a34

000ba9d8 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   ba9d8:	b510      	push	{r4, lr}
   ba9da:	4b07      	ldr	r3, [pc, #28]	; (ba9f8 <_ZN17PublishQueuePosixD1Ev+0x20>)
   ba9dc:	4604      	mov	r4, r0
   ba9de:	f840 3bc0 	str.w	r3, [r0], #192
   ba9e2:	f7fa fdba 	bl	b555a <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   ba9e6:	f104 0078 	add.w	r0, r4, #120	; 0x78
   ba9ea:	f7ff fc95 	bl	ba318 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   ba9ee:	1d20      	adds	r0, r4, #4
   ba9f0:	f001 fc00 	bl	bc1f4 <_ZN14SequentialFileD1Ev>
}
   ba9f4:	4620      	mov	r0, r4
   ba9f6:	bd10      	pop	{r4, pc}
   ba9f8:	000c4a48 	.word	0x000c4a48

000ba9fc <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   ba9fc:	b510      	push	{r4, lr}
   ba9fe:	4604      	mov	r4, r0
}
   baa00:	f7ff ffea 	bl	ba9d8 <_ZN17PublishQueuePosixD1Ev>
   baa04:	4620      	mov	r0, r4
   baa06:	21d0      	movs	r1, #208	; 0xd0
   baa08:	f7f9 fb49 	bl	b409e <_ZdlPvj>
   baa0c:	4620      	mov	r0, r4
   baa0e:	bd10      	pop	{r4, pc}

000baa10 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   baa10:	6001      	str	r1, [r0, #0]
   baa12:	7102      	strb	r2, [r0, #4]
{
}
   baa14:	4770      	bx	lr

000baa16 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   baa16:	6800      	ldr	r0, [r0, #0]
   baa18:	6803      	ldr	r3, [r0, #0]
   baa1a:	68db      	ldr	r3, [r3, #12]
   baa1c:	4718      	bx	r3

000baa1e <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   baa1e:	6800      	ldr	r0, [r0, #0]
   baa20:	6803      	ldr	r3, [r0, #0]
   baa22:	6a1b      	ldr	r3, [r3, #32]
   baa24:	4718      	bx	r3

000baa26 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   baa26:	6800      	ldr	r0, [r0, #0]
   baa28:	6803      	ldr	r3, [r0, #0]
   baa2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   baa2c:	4718      	bx	r3

000baa2e <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   baa2e:	7900      	ldrb	r0, [r0, #4]
   baa30:	4770      	bx	lr

000baa32 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   baa32:	6800      	ldr	r0, [r0, #0]
   baa34:	6803      	ldr	r3, [r0, #0]
   baa36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   baa38:	4718      	bx	r3

000baa3a <_ZN10RHDatagram6sendtoEPhhh>:
{
   baa3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   baa3c:	4605      	mov	r5, r0
   baa3e:	460c      	mov	r4, r1
    setHeaderTo(address);
   baa40:	4619      	mov	r1, r3
{
   baa42:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   baa44:	f7ff fff5 	bl	baa32 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   baa48:	6828      	ldr	r0, [r5, #0]
   baa4a:	9a01      	ldr	r2, [sp, #4]
   baa4c:	6803      	ldr	r3, [r0, #0]
   baa4e:	695b      	ldr	r3, [r3, #20]
   baa50:	4621      	mov	r1, r4
}
   baa52:	b003      	add	sp, #12
   baa54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   baa58:	4718      	bx	r3

000baa5a <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   baa5a:	6800      	ldr	r0, [r0, #0]
   baa5c:	6803      	ldr	r3, [r0, #0]
   baa5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   baa60:	4718      	bx	r3

000baa62 <_ZN10RHDatagram14setThisAddressEh>:
{
   baa62:	b538      	push	{r3, r4, r5, lr}
   baa64:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   baa66:	6800      	ldr	r0, [r0, #0]
   baa68:	6803      	ldr	r3, [r0, #0]
{
   baa6a:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   baa6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   baa6e:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   baa70:	4629      	mov	r1, r5
   baa72:	4620      	mov	r0, r4
   baa74:	f7ff fff1 	bl	baa5a <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   baa78:	7125      	strb	r5, [r4, #4]
}
   baa7a:	bd38      	pop	{r3, r4, r5, pc}

000baa7c <_ZN10RHDatagram4initEv>:
{
   baa7c:	b538      	push	{r3, r4, r5, lr}
   baa7e:	4604      	mov	r4, r0
    bool ret = _driver.init();
   baa80:	6800      	ldr	r0, [r0, #0]
   baa82:	6803      	ldr	r3, [r0, #0]
   baa84:	689b      	ldr	r3, [r3, #8]
   baa86:	4798      	blx	r3
    if (ret)
   baa88:	4605      	mov	r5, r0
   baa8a:	b118      	cbz	r0, baa94 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   baa8c:	7921      	ldrb	r1, [r4, #4]
   baa8e:	4620      	mov	r0, r4
   baa90:	f7ff ffe7 	bl	baa62 <_ZN10RHDatagram14setThisAddressEh>
}
   baa94:	4628      	mov	r0, r5
   baa96:	bd38      	pop	{r3, r4, r5, pc}

000baa98 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   baa98:	6800      	ldr	r0, [r0, #0]
   baa9a:	6803      	ldr	r3, [r0, #0]
   baa9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   baa9e:	4718      	bx	r3

000baaa0 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   baaa0:	6800      	ldr	r0, [r0, #0]
   baaa2:	6803      	ldr	r3, [r0, #0]
   baaa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   baaa6:	4718      	bx	r3

000baaa8 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   baaa8:	6800      	ldr	r0, [r0, #0]
   baaaa:	6803      	ldr	r3, [r0, #0]
   baaac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   baaae:	4718      	bx	r3

000baab0 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   baab0:	6800      	ldr	r0, [r0, #0]
   baab2:	6803      	ldr	r3, [r0, #0]
   baab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   baab6:	4718      	bx	r3

000baab8 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   baab8:	6800      	ldr	r0, [r0, #0]
   baaba:	6803      	ldr	r3, [r0, #0]
   baabc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   baabe:	4718      	bx	r3

000baac0 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   baac0:	6800      	ldr	r0, [r0, #0]
   baac2:	6803      	ldr	r3, [r0, #0]
   baac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   baac6:	4718      	bx	r3

000baac8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   baac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   baacc:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   baace:	6800      	ldr	r0, [r0, #0]
{
   baad0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   baad2:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   baad4:	6803      	ldr	r3, [r0, #0]
   baad6:	691b      	ldr	r3, [r3, #16]
{
   baad8:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   baadc:	4798      	blx	r3
   baade:	4605      	mov	r5, r0
   baae0:	b1c8      	cbz	r0, bab16 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   baae2:	b11e      	cbz	r6, baaec <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   baae4:	4620      	mov	r0, r4
   baae6:	f7ff ffe3 	bl	baab0 <_ZN10RHDatagram10headerFromEv>
   baaea:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   baaec:	f1b9 0f00 	cmp.w	r9, #0
   baaf0:	d004      	beq.n	baafc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   baaf2:	4620      	mov	r0, r4
   baaf4:	f7ff ffd8 	bl	baaa8 <_ZN10RHDatagram8headerToEv>
   baaf8:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   baafc:	f1b8 0f00 	cmp.w	r8, #0
   bab00:	d004      	beq.n	bab0c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   bab02:	4620      	mov	r0, r4
   bab04:	f7ff ffd8 	bl	baab8 <_ZN10RHDatagram8headerIdEv>
   bab08:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   bab0c:	b11f      	cbz	r7, bab16 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   bab0e:	4620      	mov	r0, r4
   bab10:	f7ff ffd6 	bl	baac0 <_ZN10RHDatagram11headerFlagsEv>
   bab14:	7038      	strb	r0, [r7, #0]
}
   bab16:	4628      	mov	r0, r5
   bab18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bab1c <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   bab1c:	2001      	movs	r0, #1
   bab1e:	4770      	bx	lr

000bab20 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   bab20:	7903      	ldrb	r3, [r0, #4]
   bab22:	2b03      	cmp	r3, #3
   bab24:	d0fc      	beq.n	bab20 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   bab26:	2001      	movs	r0, #1
   bab28:	4770      	bx	lr

000bab2a <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   bab2a:	2000      	movs	r0, #0
   bab2c:	4770      	bx	lr

000bab2e <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   bab2e:	7181      	strb	r1, [r0, #6]
}
   bab30:	4770      	bx	lr

000bab32 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   bab32:	7141      	strb	r1, [r0, #5]
}
   bab34:	4770      	bx	lr

000bab36 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   bab36:	72c1      	strb	r1, [r0, #11]
}
   bab38:	4770      	bx	lr

000bab3a <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   bab3a:	7301      	strb	r1, [r0, #12]
}
   bab3c:	4770      	bx	lr

000bab3e <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   bab3e:	7341      	strb	r1, [r0, #13]
}
   bab40:	4770      	bx	lr

000bab42 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   bab42:	7b83      	ldrb	r3, [r0, #14]
   bab44:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   bab48:	4311      	orrs	r1, r2
   bab4a:	7381      	strb	r1, [r0, #14]
}
   bab4c:	4770      	bx	lr

000bab4e <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   bab4e:	79c0      	ldrb	r0, [r0, #7]
}
   bab50:	4770      	bx	lr

000bab52 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   bab52:	7a00      	ldrb	r0, [r0, #8]
}
   bab54:	4770      	bx	lr

000bab56 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   bab56:	7a40      	ldrb	r0, [r0, #9]
}
   bab58:	4770      	bx	lr

000bab5a <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   bab5a:	7a80      	ldrb	r0, [r0, #10]
}
   bab5c:	4770      	bx	lr

000bab5e <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   bab5e:	8a00      	ldrh	r0, [r0, #16]
}
   bab60:	b200      	sxth	r0, r0
   bab62:	4770      	bx	lr

000bab64 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   bab64:	7900      	ldrb	r0, [r0, #4]
}
   bab66:	4770      	bx	lr

000bab68 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   bab68:	7101      	strb	r1, [r0, #4]
}
   bab6a:	4770      	bx	lr

000bab6c <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   bab6c:	8a40      	ldrh	r0, [r0, #18]
}
   bab6e:	b280      	uxth	r0, r0
   bab70:	4770      	bx	lr

000bab72 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   bab72:	8a80      	ldrh	r0, [r0, #20]
}
   bab74:	b280      	uxth	r0, r0
   bab76:	4770      	bx	lr

000bab78 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   bab78:	8ac0      	ldrh	r0, [r0, #22]
}
   bab7a:	b280      	uxth	r0, r0
   bab7c:	4770      	bx	lr

000bab7e <_ZN15RHGenericDriver13waitAvailableEt>:
{
   bab7e:	b538      	push	{r3, r4, r5, lr}
   bab80:	4605      	mov	r5, r0
   bab82:	460c      	mov	r4, r1
    while (!available())
   bab84:	682b      	ldr	r3, [r5, #0]
   bab86:	4628      	mov	r0, r5
   bab88:	68db      	ldr	r3, [r3, #12]
   bab8a:	4798      	blx	r3
   bab8c:	b928      	cbnz	r0, bab9a <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   bab8e:	2c00      	cmp	r4, #0
   bab90:	d0f8      	beq.n	bab84 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   bab92:	4620      	mov	r0, r4
   bab94:	f002 facc 	bl	bd130 <delay>
   bab98:	e7f4      	b.n	bab84 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   bab9a:	bd38      	pop	{r3, r4, r5, pc}

000bab9c <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   bab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bab9e:	4605      	mov	r5, r0
   baba0:	460f      	mov	r7, r1
   baba2:	4614      	mov	r4, r2
   baba4:	f001 fea6 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
   baba8:	4606      	mov	r6, r0
   babaa:	f001 fea3 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   babae:	1b80      	subs	r0, r0, r6
   babb0:	42b8      	cmp	r0, r7
   babb2:	d20a      	bcs.n	babca <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   babb4:	682b      	ldr	r3, [r5, #0]
   babb6:	4628      	mov	r0, r5
   babb8:	68db      	ldr	r3, [r3, #12]
   babba:	4798      	blx	r3
   babbc:	b930      	cbnz	r0, babcc <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   babbe:	2c00      	cmp	r4, #0
   babc0:	d0f3      	beq.n	babaa <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   babc2:	4620      	mov	r0, r4
   babc4:	f002 fab4 	bl	bd130 <delay>
   babc8:	e7ef      	b.n	babaa <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   babca:	2000      	movs	r0, #0
}
   babcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000babce <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   babce:	b570      	push	{r4, r5, r6, lr}
   babd0:	4604      	mov	r4, r0
   babd2:	460e      	mov	r6, r1
   babd4:	f001 fe8e 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
   babd8:	4605      	mov	r5, r0
   babda:	f001 fe8b 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   babde:	1b40      	subs	r0, r0, r5
   babe0:	42b0      	cmp	r0, r6
   babe2:	d204      	bcs.n	babee <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   babe4:	7923      	ldrb	r3, [r4, #4]
   babe6:	2b03      	cmp	r3, #3
   babe8:	d0f7      	beq.n	babda <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   babea:	2001      	movs	r0, #1
}
   babec:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   babee:	2000      	movs	r0, #0
   babf0:	e7fc      	b.n	babec <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000babf2 <_ZN15RHGenericDriver7waitCADEv>:
{
   babf2:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   babf4:	69c3      	ldr	r3, [r0, #28]
{
   babf6:	4604      	mov	r4, r0
    if (!_cad_timeout)
   babf8:	b1b3      	cbz	r3, bac28 <_ZN15RHGenericDriver7waitCADEv+0x36>
   babfa:	f001 fe7b 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   babfe:	2664      	movs	r6, #100	; 0x64
   bac00:	4605      	mov	r5, r0
    while (isChannelActive())
   bac02:	6823      	ldr	r3, [r4, #0]
   bac04:	4620      	mov	r0, r4
   bac06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bac08:	4798      	blx	r3
   bac0a:	b168      	cbz	r0, bac28 <_ZN15RHGenericDriver7waitCADEv+0x36>
   bac0c:	f001 fe72 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   bac10:	69e3      	ldr	r3, [r4, #28]
   bac12:	1b40      	subs	r0, r0, r5
   bac14:	4298      	cmp	r0, r3
   bac16:	d809      	bhi.n	bac2c <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   bac18:	210a      	movs	r1, #10
   bac1a:	2001      	movs	r0, #1
   bac1c:	f004 fcb3 	bl	bf586 <_Z6randomii>
   bac20:	4370      	muls	r0, r6
   bac22:	f002 fa85 	bl	bd130 <delay>
    while (isChannelActive())
   bac26:	e7ec      	b.n	bac02 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   bac28:	2001      	movs	r0, #1
}
   bac2a:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   bac2c:	2000      	movs	r0, #0
   bac2e:	e7fc      	b.n	bac2a <_ZN15RHGenericDriver7waitCADEv+0x38>

000bac30 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   bac30:	4a06      	ldr	r2, [pc, #24]	; (bac4c <_ZN15RHGenericDriverC1Ev+0x1c>)
   bac32:	6002      	str	r2, [r0, #0]
   bac34:	21ff      	movs	r1, #255	; 0xff
   bac36:	2200      	movs	r2, #0
   bac38:	7102      	strb	r2, [r0, #4]
   bac3a:	7141      	strb	r1, [r0, #5]
   bac3c:	8242      	strh	r2, [r0, #18]
   bac3e:	72c1      	strb	r1, [r0, #11]
   bac40:	8282      	strh	r2, [r0, #20]
   bac42:	8181      	strh	r1, [r0, #12]
   bac44:	7382      	strb	r2, [r0, #14]
   bac46:	82c2      	strh	r2, [r0, #22]
   bac48:	61c2      	str	r2, [r0, #28]
}
   bac4a:	4770      	bx	lr
   bac4c:	000c4a5c 	.word	0x000c4a5c

000bac50 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   bac50:	4770      	bx	lr

000bac52 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   bac52:	4770      	bx	lr

000bac54 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   bac54:	4770      	bx	lr

000bac56 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   bac56:	4770      	bx	lr

000bac58 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   bac58:	4770      	bx	lr

000bac5a <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   bac5a:	7141      	strb	r1, [r0, #5]
}
   bac5c:	4770      	bx	lr

000bac5e <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   bac5e:	7181      	strb	r1, [r0, #6]
}
   bac60:	4770      	bx	lr

000bac62 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   bac62:	7101      	strb	r1, [r0, #4]
}
   bac64:	4770      	bx	lr
	...

000bac68 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   bac68:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   bac6a:	4d03      	ldr	r5, [pc, #12]	; (bac78 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   bac6c:	6005      	str	r5, [r0, #0]
   bac6e:	7101      	strb	r1, [r0, #4]
   bac70:	7142      	strb	r2, [r0, #5]
   bac72:	7183      	strb	r3, [r0, #6]
}
   bac74:	bd30      	pop	{r4, r5, pc}
   bac76:	bf00      	nop
   bac78:	000c4adc 	.word	0x000c4adc

000bac7c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   bac7c:	4770      	bx	lr

000bac7e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   bac7e:	b510      	push	{r4, lr}
  }
   bac80:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   bac82:	4604      	mov	r4, r0
  }
   bac84:	f7f9 fa0b 	bl	b409e <_ZdlPvj>
   bac88:	4620      	mov	r0, r4
   bac8a:	bd10      	pop	{r4, pc}

000bac8c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   bac8c:	b40e      	push	{r1, r2, r3}
   bac8e:	b503      	push	{r0, r1, lr}
   bac90:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   bac92:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   bac94:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   bac98:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   bac9a:	f004 fc38 	bl	bf50e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   bac9e:	b002      	add	sp, #8
   baca0:	f85d eb04 	ldr.w	lr, [sp], #4
   baca4:	b003      	add	sp, #12
   baca6:	4770      	bx	lr

000baca8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   baca8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bacaa:	4604      	mov	r4, r0
   bacac:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   bacae:	7922      	ldrb	r2, [r4, #4]
   bacb0:	68a3      	ldr	r3, [r4, #8]
   bacb2:	b132      	cbz	r2, bacc2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   bacb4:	b9a3      	cbnz	r3, bace0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   bacb6:	490b      	ldr	r1, [pc, #44]	; (bace4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   bacb8:	b002      	add	sp, #8
   bacba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   bacbe:	f004 bb1d 	b.w	bf2fc <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   bacc2:	4a09      	ldr	r2, [pc, #36]	; (bace8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   bacc4:	7b26      	ldrb	r6, [r4, #12]
   bacc6:	4d09      	ldr	r5, [pc, #36]	; (bacec <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   bacc8:	4909      	ldr	r1, [pc, #36]	; (bacf0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   bacca:	7b64      	ldrb	r4, [r4, #13]
   baccc:	2e01      	cmp	r6, #1
   bacce:	bf18      	it	ne
   bacd0:	4629      	movne	r1, r5
   bacd2:	e9cd 1400 	strd	r1, r4, [sp]
   bacd6:	4907      	ldr	r1, [pc, #28]	; (bacf4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   bacd8:	f7ff ffd8 	bl	bac8c <_ZN5Print6printfEPKcz>
  }
   bacdc:	b002      	add	sp, #8
   bacde:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   bace0:	4a05      	ldr	r2, [pc, #20]	; (bacf8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   bace2:	e7ef      	b.n	bacc4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   bace4:	000c4b19 	.word	0x000c4b19
   bace8:	000c4fe0 	.word	0x000c4fe0
   bacec:	000c4b15 	.word	0x000c4b15
   bacf0:	000c4b11 	.word	0x000c4b11
   bacf4:	000c4b2f 	.word	0x000c4b2f
   bacf8:	000c4b08 	.word	0x000c4b08

000bacfc <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   bacfc:	b510      	push	{r4, lr}
   bacfe:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   bad00:	f7ff ffb2 	bl	bac68 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   bad04:	4b05      	ldr	r3, [pc, #20]	; (bad1c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   bad06:	6023      	str	r3, [r4, #0]
  {
   bad08:	4b05      	ldr	r3, [pc, #20]	; (bad20 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   bad0a:	60a3      	str	r3, [r4, #8]
   bad0c:	2301      	movs	r3, #1
   bad0e:	7323      	strb	r3, [r4, #12]
   bad10:	2300      	movs	r3, #0
   bad12:	6123      	str	r3, [r4, #16]
   bad14:	82a3      	strh	r3, [r4, #20]
{
}
   bad16:	4620      	mov	r0, r4
   bad18:	bd10      	pop	{r4, pc}
   bad1a:	bf00      	nop
   bad1c:	000c4b68 	.word	0x000c4b68
   bad20:	000c4b54 	.word	0x000c4b54

000bad24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   bad24:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   bad26:	4c0b      	ldr	r4, [pc, #44]	; (bad54 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   bad28:	7821      	ldrb	r1, [r4, #0]
   bad2a:	f3bf 8f5b 	dmb	ish
   bad2e:	f011 0101 	ands.w	r1, r1, #1
   bad32:	d10b      	bne.n	bad4c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   bad34:	4620      	mov	r0, r4
   bad36:	9101      	str	r1, [sp, #4]
   bad38:	f7f9 f9c0 	bl	b40bc <__cxa_guard_acquire>
   bad3c:	9901      	ldr	r1, [sp, #4]
   bad3e:	b128      	cbz	r0, bad4c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   bad40:	4805      	ldr	r0, [pc, #20]	; (bad58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   bad42:	f004 fc37 	bl	bf5b4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bad46:	4620      	mov	r0, r4
   bad48:	f7f9 f9bd 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   bad4c:	4802      	ldr	r0, [pc, #8]	; (bad58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   bad4e:	b002      	add	sp, #8
   bad50:	bd10      	pop	{r4, pc}
   bad52:	bf00      	nop
   bad54:	2003e4e0 	.word	0x2003e4e0
   bad58:	2003e4e4 	.word	0x2003e4e4

000bad5c <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   bad5c:	b507      	push	{r0, r1, r2, lr}
   bad5e:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   bad60:	f7ff ffe0 	bl	bad24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   bad64:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   bad66:	b003      	add	sp, #12
   bad68:	f85d eb04 	ldr.w	lr, [sp], #4
   bad6c:	f004 bcda 	b.w	bf724 <_ZN8SPIClass8transferEh>

000bad70 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   bad70:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   bad72:	f7ff ffd7 	bl	bad24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   bad76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bad7a:	f004 bcd9 	b.w	bf730 <_ZN8SPIClass15attachInterruptEv>

000bad7e <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   bad7e:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   bad80:	f7ff ffd0 	bl	bad24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   bad84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bad88:	f004 bcd3 	b.w	bf732 <_ZN8SPIClass15detachInterruptEv>

000bad8c <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   bad8c:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   bad8e:	7903      	ldrb	r3, [r0, #4]
   bad90:	2b04      	cmp	r3, #4
   bad92:	d020      	beq.n	badd6 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   bad94:	2b03      	cmp	r3, #3
   bad96:	d020      	beq.n	badda <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   bad98:	2b02      	cmp	r3, #2
   bad9a:	d020      	beq.n	badde <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   bad9c:	4a11      	ldr	r2, [pc, #68]	; (bade4 <_ZN13RHHardwareSPI5beginEv+0x58>)
   bad9e:	4912      	ldr	r1, [pc, #72]	; (bade8 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   bada0:	2b01      	cmp	r3, #1
   bada2:	bf18      	it	ne
   bada4:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   bada6:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   bada8:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   badaa:	3901      	subs	r1, #1
   badac:	bf18      	it	ne
   badae:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   badb0:	b133      	cbz	r3, badc0 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   badb2:	2b01      	cmp	r3, #1
   badb4:	d004      	beq.n	badc0 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   badb6:	2b02      	cmp	r3, #2
   badb8:	d002      	beq.n	badc0 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   badba:	2b03      	cmp	r3, #3
   badbc:	bf18      	it	ne
   badbe:	2300      	movne	r3, #0
class SPISettings : public Printable {
   badc0:	2400      	movs	r4, #0
   badc2:	7304      	strb	r4, [r0, #12]
   badc4:	6102      	str	r2, [r0, #16]
   badc6:	7501      	strb	r1, [r0, #20]
   badc8:	7543      	strb	r3, [r0, #21]
        instance().begin();
   badca:	f7ff ffab 	bl	bad24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   badce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   badd2:	f004 bbf9 	b.w	bf5c8 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   badd6:	4a05      	ldr	r2, [pc, #20]	; (badec <_ZN13RHHardwareSPI5beginEv+0x60>)
   badd8:	e7e5      	b.n	bada6 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   badda:	4a05      	ldr	r2, [pc, #20]	; (badf0 <_ZN13RHHardwareSPI5beginEv+0x64>)
   baddc:	e7e3      	b.n	bada6 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   badde:	4a05      	ldr	r2, [pc, #20]	; (badf4 <_ZN13RHHardwareSPI5beginEv+0x68>)
   bade0:	e7e1      	b.n	bada6 <_ZN13RHHardwareSPI5beginEv+0x1a>
   bade2:	bf00      	nop
   bade4:	001e8480 	.word	0x001e8480
   bade8:	000f4240 	.word	0x000f4240
   badec:	00f42400 	.word	0x00f42400
   badf0:	007a1200 	.word	0x007a1200
   badf4:	003d0900 	.word	0x003d0900

000badf8 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   badf8:	b508      	push	{r3, lr}
        instance().end();
   badfa:	f7ff ff93 	bl	bad24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   badfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bae02:	f004 bbf5 	b.w	bf5f0 <_ZN8SPIClass3endEv>

000bae06 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   bae06:	b510      	push	{r4, lr}
   bae08:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   bae0a:	f7ff ff8b 	bl	bad24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   bae0e:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   bae12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bae16:	f004 bc17 	b.w	bf648 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000bae1a <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   bae1a:	b508      	push	{r3, lr}
        instance().endTransaction();
   bae1c:	f7ff ff82 	bl	bad24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   bae20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bae24:	f004 bbf6 	b.w	bf614 <_ZN8SPIClass14endTransactionEv>

000bae28 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   bae28:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   bae2a:	f7ff ff7b 	bl	bad24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   bae2e:	bd08      	pop	{r3, pc}

000bae30 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   bae30:	2300      	movs	r3, #0
   bae32:	4802      	ldr	r0, [pc, #8]	; (bae3c <_GLOBAL__sub_I_hardware_spi+0xc>)
   bae34:	461a      	mov	r2, r3
   bae36:	4619      	mov	r1, r3
   bae38:	f7ff bf60 	b.w	bacfc <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   bae3c:	2003e4ec 	.word	0x2003e4ec

000bae40 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   bae40:	2a01      	cmp	r2, #1
   bae42:	d105      	bne.n	bae50 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   bae44:	7a00      	ldrb	r0, [r0, #8]
   bae46:	780b      	ldrb	r3, [r1, #0]
   bae48:	1a1b      	subs	r3, r3, r0
   bae4a:	4258      	negs	r0, r3
   bae4c:	4158      	adcs	r0, r3
   bae4e:	4770      	bx	lr
   bae50:	2000      	movs	r0, #0
}
   bae52:	4770      	bx	lr

000bae54 <_ZN6RHMesh5doArpEh>:
{
   bae54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   bae58:	4c25      	ldr	r4, [pc, #148]	; (baef0 <_ZN6RHMesh5doArpEh+0x9c>)
   bae5a:	2301      	movs	r3, #1
{
   bae5c:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   bae5e:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   bae60:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bae62:	2300      	movs	r3, #0
{
   bae64:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   bae66:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bae68:	9300      	str	r3, [sp, #0]
   bae6a:	2203      	movs	r2, #3
   bae6c:	23ff      	movs	r3, #255	; 0xff
   bae6e:	4621      	mov	r1, r4
{
   bae70:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bae72:	f000 fbb7 	bl	bb5e4 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   bae76:	b120      	cbz	r0, bae82 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   bae78:	2500      	movs	r5, #0
}
   bae7a:	4628      	mov	r0, r5
   bae7c:	b006      	add	sp, #24
   bae7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   bae82:	237a      	movs	r3, #122	; 0x7a
   bae84:	f88d 3017 	strb.w	r3, [sp, #23]
   bae88:	f001 fd34 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   bae8c:	f106 0904 	add.w	r9, r6, #4
   bae90:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   bae92:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   bae96:	f001 fd2d 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
   bae9a:	1a29      	subs	r1, r5, r0
   bae9c:	2900      	cmp	r1, #0
   bae9e:	ddeb      	ble.n	bae78 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   baea0:	2200      	movs	r2, #0
   baea2:	b289      	uxth	r1, r1
   baea4:	4648      	mov	r0, r9
   baea6:	f7ff fdbe 	bl	baa26 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   baeaa:	2800      	cmp	r0, #0
   baeac:	d0f3      	beq.n	bae96 <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   baeae:	2300      	movs	r3, #0
   baeb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   baeb4:	e9cd 3300 	strd	r3, r3, [sp]
   baeb8:	f10d 0217 	add.w	r2, sp, #23
   baebc:	4621      	mov	r1, r4
   baebe:	4630      	mov	r0, r6
   baec0:	f000 fb9a 	bl	bb5f8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   baec4:	4605      	mov	r5, r0
   baec6:	2800      	cmp	r0, #0
   baec8:	d0e3      	beq.n	bae92 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   baeca:	f89d 3017 	ldrb.w	r3, [sp, #23]
   baece:	2b01      	cmp	r3, #1
   baed0:	d9df      	bls.n	bae92 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   baed2:	f894 a000 	ldrb.w	sl, [r4]
   baed6:	f1ba 0f02 	cmp.w	sl, #2
   baeda:	d1da      	bne.n	bae92 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   baedc:	4648      	mov	r0, r9
   baede:	f7ff fde7 	bl	baab0 <_ZN10RHDatagram10headerFromEv>
   baee2:	4653      	mov	r3, sl
   baee4:	4602      	mov	r2, r0
   baee6:	4639      	mov	r1, r7
   baee8:	4630      	mov	r0, r6
   baeea:	f000 faf3 	bl	bb4d4 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   baeee:	e7c4      	b.n	bae7a <_ZN6RHMesh5doArpEh+0x26>
   baef0:	2003e504 	.word	0x2003e504

000baef4 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   baef4:	2a01      	cmp	r2, #1
{
   baef6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   baefa:	4607      	mov	r7, r0
   baefc:	460e      	mov	r6, r1
   baefe:	4614      	mov	r4, r2
    if (   messageLen > 1 
   baf00:	d93b      	bls.n	baf7a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   baf02:	794d      	ldrb	r5, [r1, #5]
   baf04:	2d02      	cmp	r5, #2
   baf06:	d130      	bne.n	baf6a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   baf08:	f100 0804 	add.w	r8, r0, #4
   baf0c:	79c9      	ldrb	r1, [r1, #7]
   baf0e:	9101      	str	r1, [sp, #4]
   baf10:	4640      	mov	r0, r8
   baf12:	f7ff fdcd 	bl	baab0 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   baf16:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   baf18:	462b      	mov	r3, r5
   baf1a:	4602      	mov	r2, r0
   baf1c:	9901      	ldr	r1, [sp, #4]
   baf1e:	4638      	mov	r0, r7
   baf20:	f000 fad8 	bl	bb4d4 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   baf24:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   baf26:	f106 0308 	add.w	r3, r6, #8
   baf2a:	2400      	movs	r4, #0
   baf2c:	4622      	mov	r2, r4
   baf2e:	4295      	cmp	r5, r2
   baf30:	f104 0401 	add.w	r4, r4, #1
   baf34:	b2e4      	uxtb	r4, r4
   baf36:	d904      	bls.n	baf42 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   baf38:	f813 2b01 	ldrb.w	r2, [r3], #1
   baf3c:	7a39      	ldrb	r1, [r7, #8]
   baf3e:	4291      	cmp	r1, r2
   baf40:	d1f4      	bne.n	baf2c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   baf42:	f104 0108 	add.w	r1, r4, #8
   baf46:	440e      	add	r6, r1
	while (i < numRoutes)
   baf48:	42a5      	cmp	r5, r4
   baf4a:	d916      	bls.n	baf7a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   baf4c:	f816 1b01 	ldrb.w	r1, [r6], #1
   baf50:	9101      	str	r1, [sp, #4]
   baf52:	4640      	mov	r0, r8
   baf54:	f7ff fdac 	bl	baab0 <_ZN10RHDatagram10headerFromEv>
   baf58:	3401      	adds	r4, #1
   baf5a:	4602      	mov	r2, r0
   baf5c:	9901      	ldr	r1, [sp, #4]
   baf5e:	2302      	movs	r3, #2
   baf60:	4638      	mov	r0, r7
   baf62:	b2e4      	uxtb	r4, r4
   baf64:	f000 fab6 	bl	bb4d4 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   baf68:	e7ee      	b.n	baf48 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   baf6a:	2d03      	cmp	r5, #3
   baf6c:	d105      	bne.n	baf7a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   baf6e:	7989      	ldrb	r1, [r1, #6]
}
   baf70:	b002      	add	sp, #8
   baf72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   baf76:	f000 ba96 	b.w	bb4a6 <_ZN8RHRouter13deleteRouteToEh>
}
   baf7a:	b002      	add	sp, #8
   baf7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000baf80 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   baf80:	b510      	push	{r4, lr}
   baf82:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   baf84:	f000 fae6 	bl	bb554 <_ZN8RHRouterC1ER15RHGenericDriverh>
   baf88:	4b01      	ldr	r3, [pc, #4]	; (baf90 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   baf8a:	6023      	str	r3, [r4, #0]
}
   baf8c:	4620      	mov	r0, r4
   baf8e:	bd10      	pop	{r4, pc}
   baf90:	000c4b9c 	.word	0x000c4b9c

000baf94 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   baf94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   baf98:	2a79      	cmp	r2, #121	; 0x79
{
   baf9a:	f89d 9020 	ldrb.w	r9, [sp, #32]
   baf9e:	4606      	mov	r6, r0
   bafa0:	460f      	mov	r7, r1
   bafa2:	4614      	mov	r4, r2
   bafa4:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   bafa6:	d825      	bhi.n	baff4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   bafa8:	2bff      	cmp	r3, #255	; 0xff
   bafaa:	d114      	bne.n	bafd6 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   bafac:	f8df 8048 	ldr.w	r8, [pc, #72]	; baff8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   bafb0:	4640      	mov	r0, r8
   bafb2:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   bafb4:	4622      	mov	r2, r4
   bafb6:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   bafb8:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   bafbc:	f006 f808 	bl	c0fd0 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   bafc0:	1c62      	adds	r2, r4, #1
   bafc2:	f8cd 9020 	str.w	r9, [sp, #32]
   bafc6:	462b      	mov	r3, r5
   bafc8:	4641      	mov	r1, r8
   bafca:	4630      	mov	r0, r6
   bafcc:	b2d2      	uxtb	r2, r2
}
   bafce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   bafd2:	f000 bb07 	b.w	bb5e4 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   bafd6:	4619      	mov	r1, r3
   bafd8:	f000 fa21 	bl	bb41e <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   bafdc:	2800      	cmp	r0, #0
   bafde:	d1e5      	bne.n	bafac <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   bafe0:	6833      	ldr	r3, [r6, #0]
   bafe2:	4629      	mov	r1, r5
   bafe4:	689b      	ldr	r3, [r3, #8]
   bafe6:	4630      	mov	r0, r6
   bafe8:	4798      	blx	r3
   bafea:	2800      	cmp	r0, #0
   bafec:	d1de      	bne.n	bafac <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   bafee:	2002      	movs	r0, #2
}
   baff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   baff4:	2001      	movs	r0, #1
   baff6:	e7fb      	b.n	baff0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   baff8:	2003e504 	.word	0x2003e504

000baffc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   baffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb000:	b089      	sub	sp, #36	; 0x24
   bb002:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   bb004:	237a      	movs	r3, #122	; 0x7a
   bb006:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bb00a:	f10d 031f 	add.w	r3, sp, #31
   bb00e:	9303      	str	r3, [sp, #12]
   bb010:	f10d 031e 	add.w	r3, sp, #30
   bb014:	9302      	str	r3, [sp, #8]
   bb016:	4e5d      	ldr	r6, [pc, #372]	; (bb18c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   bb018:	f10d 031d 	add.w	r3, sp, #29
   bb01c:	9301      	str	r3, [sp, #4]
   bb01e:	ab07      	add	r3, sp, #28
   bb020:	9300      	str	r3, [sp, #0]
{     
   bb022:	4689      	mov	r9, r1
   bb024:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bb026:	f10d 031b 	add.w	r3, sp, #27
   bb02a:	f10d 021a 	add.w	r2, sp, #26
   bb02e:	4631      	mov	r1, r6
{     
   bb030:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   bb034:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bb036:	f000 fadf 	bl	bb5f8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   bb03a:	4604      	mov	r4, r0
   bb03c:	b920      	cbnz	r0, bb048 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   bb03e:	2400      	movs	r4, #0
}
   bb040:	4620      	mov	r0, r4
   bb042:	b009      	add	sp, #36	; 0x24
   bb044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   bb048:	f89d 301a 	ldrb.w	r3, [sp, #26]
   bb04c:	b373      	cbz	r3, bb0ac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   bb04e:	7832      	ldrb	r2, [r6, #0]
   bb050:	bb62      	cbnz	r2, bb0ac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   bb052:	f1b8 0f00 	cmp.w	r8, #0
   bb056:	d003      	beq.n	bb060 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   bb058:	f89d 201b 	ldrb.w	r2, [sp, #27]
   bb05c:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   bb060:	f1bb 0f00 	cmp.w	fp, #0
   bb064:	d003      	beq.n	bb06e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   bb066:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bb06a:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   bb06e:	f1ba 0f00 	cmp.w	sl, #0
   bb072:	d003      	beq.n	bb07c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   bb074:	f89d 201d 	ldrb.w	r2, [sp, #29]
   bb078:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   bb07c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb07e:	b11a      	cbz	r2, bb088 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   bb080:	9914      	ldr	r1, [sp, #80]	; 0x50
   bb082:	f89d 201e 	ldrb.w	r2, [sp, #30]
   bb086:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   bb088:	9a15      	ldr	r2, [sp, #84]	; 0x54
   bb08a:	b11a      	cbz	r2, bb094 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   bb08c:	9915      	ldr	r1, [sp, #84]	; 0x54
   bb08e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   bb092:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   bb094:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   bb096:	493e      	ldr	r1, [pc, #248]	; (bb190 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   bb098:	3b01      	subs	r3, #1
   bb09a:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   bb09c:	429a      	cmp	r2, r3
		*len = msgLen;
   bb09e:	bf88      	it	hi
   bb0a0:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   bb0a2:	783a      	ldrb	r2, [r7, #0]
   bb0a4:	4648      	mov	r0, r9
   bb0a6:	f005 ff93 	bl	c0fd0 <memcpy>
	    return true;
   bb0aa:	e7c9      	b.n	bb040 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   bb0ac:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bb0b0:	2aff      	cmp	r2, #255	; 0xff
   bb0b2:	d1c4      	bne.n	bb03e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   bb0b4:	2b01      	cmp	r3, #1
   bb0b6:	d9c2      	bls.n	bb03e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   bb0b8:	7832      	ldrb	r2, [r6, #0]
   bb0ba:	2a01      	cmp	r2, #1
   bb0bc:	d1bf      	bne.n	bb03e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   bb0be:	7a2a      	ldrb	r2, [r5, #8]
   bb0c0:	f89d 401b 	ldrb.w	r4, [sp, #27]
   bb0c4:	42a2      	cmp	r2, r4
   bb0c6:	d0ba      	beq.n	bb03e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   bb0c8:	1edf      	subs	r7, r3, #3
   bb0ca:	4932      	ldr	r1, [pc, #200]	; (bb194 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   bb0cc:	b2ff      	uxtb	r7, r7
   bb0ce:	2300      	movs	r3, #0
   bb0d0:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   bb0d4:	4547      	cmp	r7, r8
   bb0d6:	d906      	bls.n	bb0e6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   bb0d8:	f811 0b01 	ldrb.w	r0, [r1], #1
   bb0dc:	4282      	cmp	r2, r0
   bb0de:	f103 0301 	add.w	r3, r3, #1
   bb0e2:	d1f5      	bne.n	bb0d0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   bb0e4:	e7ab      	b.n	bb03e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   bb0e6:	f105 0904 	add.w	r9, r5, #4
   bb0ea:	4648      	mov	r0, r9
   bb0ec:	f7ff fce0 	bl	baab0 <_ZN10RHDatagram10headerFromEv>
   bb0f0:	2302      	movs	r3, #2
   bb0f2:	4602      	mov	r2, r0
   bb0f4:	4621      	mov	r1, r4
   bb0f6:	4628      	mov	r0, r5
   bb0f8:	f000 f9ec 	bl	bb4d4 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   bb0fc:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   bb100:	b193      	cbz	r3, bb128 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   bb102:	4c22      	ldr	r4, [pc, #136]	; (bb18c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   bb104:	1ba3      	subs	r3, r4, r6
   bb106:	b2db      	uxtb	r3, r3
   bb108:	429f      	cmp	r7, r3
   bb10a:	d90c      	bls.n	bb126 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   bb10c:	78e1      	ldrb	r1, [r4, #3]
   bb10e:	9105      	str	r1, [sp, #20]
   bb110:	4648      	mov	r0, r9
   bb112:	f7ff fccd 	bl	baab0 <_ZN10RHDatagram10headerFromEv>
   bb116:	9905      	ldr	r1, [sp, #20]
   bb118:	4602      	mov	r2, r0
   bb11a:	2302      	movs	r3, #2
   bb11c:	4628      	mov	r0, r5
   bb11e:	f000 f9d9 	bl	bb4d4 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   bb122:	3401      	adds	r4, #1
   bb124:	e7ee      	b.n	bb104 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   bb126:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   bb128:	682b      	ldr	r3, [r5, #0]
   bb12a:	7872      	ldrb	r2, [r6, #1]
   bb12c:	68db      	ldr	r3, [r3, #12]
   bb12e:	491a      	ldr	r1, [pc, #104]	; (bb198 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   bb130:	4628      	mov	r0, r5
   bb132:	4798      	blx	r3
   bb134:	4604      	mov	r4, r0
   bb136:	b160      	cbz	r0, bb152 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   bb138:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   bb13a:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   bb13c:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   bb13e:	f89d 201a 	ldrb.w	r2, [sp, #26]
   bb142:	f89d 301b 	ldrb.w	r3, [sp, #27]
   bb146:	4911      	ldr	r1, [pc, #68]	; (bb18c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   bb148:	9400      	str	r4, [sp, #0]
   bb14a:	4628      	mov	r0, r5
   bb14c:	f000 fa4a 	bl	bb5e4 <_ZN8RHRouter10sendtoWaitEPhhhh>
   bb150:	e776      	b.n	bb040 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   bb152:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   bb156:	4543      	cmp	r3, r8
   bb158:	f67f af71 	bls.w	bb03e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   bb15c:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   bb160:	2b00      	cmp	r3, #0
   bb162:	f43f af6c 	beq.w	bb03e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   bb166:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   bb16a:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb16c:	4907      	ldr	r1, [pc, #28]	; (bb18c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   bb16e:	443e      	add	r6, r7
		tmpMessageLen++;
   bb170:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   bb172:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb174:	f89d 301b 	ldrb.w	r3, [sp, #27]
   bb178:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   bb17a:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb17c:	9300      	str	r3, [sp, #0]
   bb17e:	4628      	mov	r0, r5
   bb180:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   bb182:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb186:	f000 f9f7 	bl	bb578 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   bb18a:	e759      	b.n	bb040 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   bb18c:	2003e504 	.word	0x2003e504
   bb190:	2003e505 	.word	0x2003e505
   bb194:	2003e507 	.word	0x2003e507
   bb198:	2003e506 	.word	0x2003e506

000bb19c <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   bb19c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb19e:	b085      	sub	sp, #20
   bb1a0:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb1a2:	3004      	adds	r0, #4
{
   bb1a4:	460e      	mov	r6, r1
   bb1a6:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb1a8:	f7ff fc82 	bl	baab0 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   bb1ac:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb1ae:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   bb1b0:	4631      	mov	r1, r6
   bb1b2:	4628      	mov	r0, r5
   bb1b4:	f000 f94a 	bl	bb44c <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   bb1b8:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   bb1ba:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   bb1bc:	d001      	beq.n	bb1c2 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   bb1be:	2805      	cmp	r0, #5
   bb1c0:	d11b      	bne.n	bb1fa <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   bb1c2:	7831      	ldrb	r1, [r6, #0]
   bb1c4:	4628      	mov	r0, r5
   bb1c6:	f000 f96e 	bl	bb4a6 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   bb1ca:	7872      	ldrb	r2, [r6, #1]
   bb1cc:	7a2b      	ldrb	r3, [r5, #8]
   bb1ce:	429a      	cmp	r2, r3
   bb1d0:	d013      	beq.n	bb1fa <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   bb1d2:	4c0b      	ldr	r4, [pc, #44]	; (bb200 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   bb1d4:	2303      	movs	r3, #3
   bb1d6:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   bb1d8:	7833      	ldrb	r3, [r6, #0]
   bb1da:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   bb1dc:	7871      	ldrb	r1, [r6, #1]
   bb1de:	2302      	movs	r3, #2
   bb1e0:	463a      	mov	r2, r7
   bb1e2:	4628      	mov	r0, r5
   bb1e4:	f000 f976 	bl	bb4d4 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   bb1e8:	2300      	movs	r3, #0
   bb1ea:	9300      	str	r3, [sp, #0]
   bb1ec:	4621      	mov	r1, r4
   bb1ee:	7873      	ldrb	r3, [r6, #1]
   bb1f0:	2202      	movs	r2, #2
   bb1f2:	4628      	mov	r0, r5
   bb1f4:	f000 f9f6 	bl	bb5e4 <_ZN8RHRouter10sendtoWaitEPhhhh>
   bb1f8:	4604      	mov	r4, r0
}
   bb1fa:	4620      	mov	r0, r4
   bb1fc:	b005      	add	sp, #20
   bb1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bb200:	2003e504 	.word	0x2003e504

000bb204 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   bb204:	b510      	push	{r4, lr}
   bb206:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   bb208:	f7ff fc02 	bl	baa10 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   bb20c:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   bb20e:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   bb210:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   bb212:	2303      	movs	r3, #3
    _retransmissions = 0;
   bb214:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   bb216:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   bb218:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   bb21a:	f44f 7280 	mov.w	r2, #256	; 0x100
   bb21e:	f104 0011 	add.w	r0, r4, #17
   bb222:	f005 fefd 	bl	c1020 <memset>
}
   bb226:	4620      	mov	r0, r4
   bb228:	bd10      	pop	{r4, pc}

000bb22a <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   bb22a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bb22c:	4604      	mov	r4, r0
   bb22e:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   bb230:	f7ff fc32 	bl	baa98 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   bb234:	4620      	mov	r0, r4
   bb236:	2200      	movs	r2, #0
   bb238:	2180      	movs	r1, #128	; 0x80
   bb23a:	f7ff fc31 	bl	baaa0 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   bb23e:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   bb240:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   bb242:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   bb246:	f10d 010f 	add.w	r1, sp, #15
   bb24a:	2201      	movs	r2, #1
   bb24c:	4620      	mov	r0, r4
   bb24e:	f7ff fbf4 	bl	baa3a <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   bb252:	4620      	mov	r0, r4
   bb254:	f7ff fbe3 	bl	baa1e <_ZN10RHDatagram14waitPacketSentEv>
}
   bb258:	b004      	add	sp, #16
   bb25a:	bd10      	pop	{r4, pc}

000bb25c <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   bb25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   bb260:	7b05      	ldrb	r5, [r0, #12]
   bb262:	3501      	adds	r5, #1
   bb264:	b2ed      	uxtb	r5, r5
{
   bb266:	b087      	sub	sp, #28
   bb268:	4604      	mov	r4, r0
   bb26a:	4689      	mov	r9, r1
   bb26c:	4692      	mov	sl, r2
   bb26e:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   bb270:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   bb272:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   bb274:	7c22      	ldrb	r2, [r4, #16]
   bb276:	463b      	mov	r3, r7
   bb278:	429a      	cmp	r2, r3
   bb27a:	f107 0701 	add.w	r7, r7, #1
   bb27e:	b2ff      	uxtb	r7, r7
   bb280:	d36b      	bcc.n	bb35a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   bb282:	4629      	mov	r1, r5
   bb284:	4620      	mov	r0, r4
   bb286:	f7ff fc07 	bl	baa98 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   bb28a:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   bb28c:	bf0d      	iteet	eq
   bb28e:	22c0      	moveq	r2, #192	; 0xc0
   bb290:	2280      	movne	r2, #128	; 0x80
   bb292:	2140      	movne	r1, #64	; 0x40
   bb294:	2100      	moveq	r1, #0
   bb296:	4620      	mov	r0, r4
   bb298:	f7ff fc02 	bl	baaa0 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   bb29c:	4643      	mov	r3, r8
   bb29e:	4652      	mov	r2, sl
   bb2a0:	4649      	mov	r1, r9
   bb2a2:	4620      	mov	r0, r4
   bb2a4:	f7ff fbc9 	bl	baa3a <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   bb2a8:	4620      	mov	r0, r4
   bb2aa:	f7ff fbb8 	bl	baa1e <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   bb2ae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   bb2b2:	d054      	beq.n	bb35e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   bb2b4:	2f01      	cmp	r7, #1
	    _retransmissions++;
   bb2b6:	bf82      	ittt	hi
   bb2b8:	68a3      	ldrhi	r3, [r4, #8]
   bb2ba:	3301      	addhi	r3, #1
   bb2bc:	60a3      	strhi	r3, [r4, #8]
   bb2be:	f001 fb19 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   bb2c2:	f44f 7180 	mov.w	r1, #256	; 0x100
   bb2c6:	4683      	mov	fp, r0
   bb2c8:	2000      	movs	r0, #0
   bb2ca:	89e6      	ldrh	r6, [r4, #14]
   bb2cc:	f004 f95b 	bl	bf586 <_Z6randomii>
   bb2d0:	4370      	muls	r0, r6
   bb2d2:	bf48      	it	mi
   bb2d4:	30ff      	addmi	r0, #255	; 0xff
   bb2d6:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   bb2da:	fa1b f686 	uxtah	r6, fp, r6
   bb2de:	f001 fb09 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
   bb2e2:	1a30      	subs	r0, r6, r0
   bb2e4:	2800      	cmp	r0, #0
   bb2e6:	ddc5      	ble.n	bb274 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   bb2e8:	b281      	uxth	r1, r0
   bb2ea:	2200      	movs	r2, #0
   bb2ec:	4620      	mov	r0, r4
   bb2ee:	f7ff fb9a 	bl	baa26 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   bb2f2:	2800      	cmp	r0, #0
   bb2f4:	d0f3      	beq.n	bb2de <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   bb2f6:	f10d 0317 	add.w	r3, sp, #23
   bb2fa:	9302      	str	r3, [sp, #8]
   bb2fc:	f10d 0316 	add.w	r3, sp, #22
   bb300:	9301      	str	r3, [sp, #4]
   bb302:	2200      	movs	r2, #0
   bb304:	f10d 0315 	add.w	r3, sp, #21
   bb308:	9300      	str	r3, [sp, #0]
   bb30a:	4611      	mov	r1, r2
   bb30c:	ab05      	add	r3, sp, #20
   bb30e:	4620      	mov	r0, r4
   bb310:	f7ff fbda 	bl	baac8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   bb314:	2800      	cmp	r0, #0
   bb316:	d0e2      	beq.n	bb2de <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   bb318:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   bb31c:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   bb320:	4542      	cmp	r2, r8
   bb322:	d10e      	bne.n	bb342 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   bb324:	f894 c004 	ldrb.w	ip, [r4, #4]
   bb328:	f89d 1015 	ldrb.w	r1, [sp, #21]
   bb32c:	458c      	cmp	ip, r1
   bb32e:	d108      	bne.n	bb342 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   bb330:	2b00      	cmp	r3, #0
   bb332:	da08      	bge.n	bb346 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   bb334:	f89d 3016 	ldrb.w	r3, [sp, #22]
   bb338:	42ab      	cmp	r3, r5
   bb33a:	d1d0      	bne.n	bb2de <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   bb33c:	b007      	add	sp, #28
   bb33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   bb342:	2b00      	cmp	r3, #0
   bb344:	dbcb      	blt.n	bb2de <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   bb346:	18a1      	adds	r1, r4, r2
   bb348:	f89d 3016 	ldrb.w	r3, [sp, #22]
   bb34c:	7c49      	ldrb	r1, [r1, #17]
   bb34e:	4299      	cmp	r1, r3
   bb350:	d1c5      	bne.n	bb2de <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   bb352:	4620      	mov	r0, r4
   bb354:	f7ff ff69 	bl	bb22a <_ZN18RHReliableDatagram11acknowledgeEhh>
   bb358:	e7c1      	b.n	bb2de <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   bb35a:	2000      	movs	r0, #0
   bb35c:	e7ee      	b.n	bb33c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   bb35e:	2001      	movs	r0, #1
   bb360:	e7ec      	b.n	bb33c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000bb362 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   bb362:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb366:	b089      	sub	sp, #36	; 0x24
   bb368:	e9cd 2104 	strd	r2, r1, [sp, #16]
   bb36c:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   bb370:	9f12      	ldr	r7, [sp, #72]	; 0x48
   bb372:	4604      	mov	r4, r0
   bb374:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   bb376:	f7ff fb4e 	bl	baa16 <_ZN10RHDatagram9availableEv>
   bb37a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   bb37e:	b920      	cbnz	r0, bb38a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   bb380:	2500      	movs	r5, #0
}
   bb382:	4628      	mov	r0, r5
   bb384:	b009      	add	sp, #36	; 0x24
   bb386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   bb38a:	f10d 031f 	add.w	r3, sp, #31
   bb38e:	9302      	str	r3, [sp, #8]
   bb390:	f10d 031e 	add.w	r3, sp, #30
   bb394:	9301      	str	r3, [sp, #4]
   bb396:	f10d 031d 	add.w	r3, sp, #29
   bb39a:	9300      	str	r3, [sp, #0]
   bb39c:	4620      	mov	r0, r4
   bb39e:	ab07      	add	r3, sp, #28
   bb3a0:	f7ff fb92 	bl	baac8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   bb3a4:	4605      	mov	r5, r0
   bb3a6:	2800      	cmp	r0, #0
   bb3a8:	d0ea      	beq.n	bb380 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   bb3aa:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   bb3ae:	2b00      	cmp	r3, #0
   bb3b0:	dbe6      	blt.n	bb380 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   bb3b2:	7922      	ldrb	r2, [r4, #4]
   bb3b4:	f89d 301d 	ldrb.w	r3, [sp, #29]
   bb3b8:	429a      	cmp	r2, r3
   bb3ba:	d106      	bne.n	bb3ca <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   bb3bc:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bb3c0:	f89d 101e 	ldrb.w	r1, [sp, #30]
   bb3c4:	4620      	mov	r0, r4
   bb3c6:	f7ff ff30 	bl	bb22a <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   bb3ca:	f89d 201f 	ldrb.w	r2, [sp, #31]
   bb3ce:	f89d 101c 	ldrb.w	r1, [sp, #28]
   bb3d2:	f89d 301e 	ldrb.w	r3, [sp, #30]
   bb3d6:	f012 0f40 	tst.w	r2, #64	; 0x40
   bb3da:	440c      	add	r4, r1
   bb3dc:	d002      	beq.n	bb3e4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   bb3de:	7c60      	ldrb	r0, [r4, #17]
   bb3e0:	4298      	cmp	r0, r3
   bb3e2:	d0cd      	beq.n	bb380 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   bb3e4:	b106      	cbz	r6, bb3e8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   bb3e6:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   bb3e8:	f1b9 0f00 	cmp.w	r9, #0
   bb3ec:	d003      	beq.n	bb3f6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   bb3ee:	f89d 101d 	ldrb.w	r1, [sp, #29]
   bb3f2:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   bb3f6:	f1b8 0f00 	cmp.w	r8, #0
   bb3fa:	d001      	beq.n	bb400 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   bb3fc:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   bb400:	b107      	cbz	r7, bb404 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   bb402:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   bb404:	7463      	strb	r3, [r4, #17]
		return true;
   bb406:	e7bc      	b.n	bb382 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000bb408 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   bb408:	4770      	bx	lr

000bb40a <_ZN8RHRouter4initEv>:
{
   bb40a:	b510      	push	{r4, lr}
   bb40c:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   bb40e:	3004      	adds	r0, #4
   bb410:	f7ff fb34 	bl	baa7c <_ZN10RHDatagram4initEv>
    if (ret)
   bb414:	b110      	cbz	r0, bb41c <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   bb416:	231e      	movs	r3, #30
   bb418:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   bb41c:	bd10      	pop	{r4, pc}

000bb41e <_ZN8RHRouter10getRouteToEh>:
{
   bb41e:	b510      	push	{r4, lr}
   bb420:	4602      	mov	r2, r0
   bb422:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   bb424:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   bb428:	428c      	cmp	r4, r1
   bb42a:	d108      	bne.n	bb43e <_ZN8RHRouter10getRouteToEh+0x20>
   bb42c:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   bb430:	b12c      	cbz	r4, bb43e <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   bb432:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bb436:	f503 738c 	add.w	r3, r3, #280	; 0x118
   bb43a:	4418      	add	r0, r3
}
   bb43c:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb43e:	3301      	adds	r3, #1
   bb440:	2b32      	cmp	r3, #50	; 0x32
   bb442:	f102 0203 	add.w	r2, r2, #3
   bb446:	d1ed      	bne.n	bb424 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   bb448:	2000      	movs	r0, #0
   bb44a:	e7f7      	b.n	bb43c <_ZN8RHRouter10getRouteToEh+0x1e>

000bb44c <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   bb44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   bb44e:	780b      	ldrb	r3, [r1, #0]
   bb450:	2bff      	cmp	r3, #255	; 0xff
{
   bb452:	4605      	mov	r5, r0
   bb454:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   bb456:	d006      	beq.n	bb466 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   bb458:	4619      	mov	r1, r3
   bb45a:	9201      	str	r2, [sp, #4]
   bb45c:	f7ff ffdf 	bl	bb41e <_ZN8RHRouter10getRouteToEh>
	if (!route)
   bb460:	b158      	cbz	r0, bb47a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   bb462:	7843      	ldrb	r3, [r0, #1]
   bb464:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   bb466:	4621      	mov	r1, r4
   bb468:	1d28      	adds	r0, r5, #4
   bb46a:	f7ff fef7 	bl	bb25c <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   bb46e:	2800      	cmp	r0, #0
   bb470:	bf14      	ite	ne
   bb472:	2000      	movne	r0, #0
   bb474:	2005      	moveq	r0, #5
}
   bb476:	b003      	add	sp, #12
   bb478:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   bb47a:	2002      	movs	r0, #2
   bb47c:	e7fb      	b.n	bb476 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000bb47e <_ZN8RHRouter11deleteRouteEh>:
{
   bb47e:	b510      	push	{r4, lr}
   bb480:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   bb484:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   bb486:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   bb48a:	f503 708c 	add.w	r0, r3, #280	; 0x118
   bb48e:	f203 111b 	addw	r1, r3, #283	; 0x11b
   bb492:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bb496:	4421      	add	r1, r4
   bb498:	4420      	add	r0, r4
   bb49a:	f005 fd99 	bl	c0fd0 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   bb49e:	2300      	movs	r3, #0
   bb4a0:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   bb4a4:	bd10      	pop	{r4, pc}

000bb4a6 <_ZN8RHRouter13deleteRouteToEh>:
{
   bb4a6:	b538      	push	{r3, r4, r5, lr}
   bb4a8:	460a      	mov	r2, r1
   bb4aa:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   bb4ac:	f500 748c 	add.w	r4, r0, #280	; 0x118
   bb4b0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   bb4b4:	b2d9      	uxtb	r1, r3
   bb4b6:	5d65      	ldrb	r5, [r4, r5]
   bb4b8:	4295      	cmp	r5, r2
   bb4ba:	d103      	bne.n	bb4c4 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   bb4bc:	f7ff ffdf 	bl	bb47e <_ZN8RHRouter11deleteRouteEh>
	    return true;
   bb4c0:	2001      	movs	r0, #1
}
   bb4c2:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb4c4:	3301      	adds	r3, #1
   bb4c6:	2b32      	cmp	r3, #50	; 0x32
   bb4c8:	d1f2      	bne.n	bb4b0 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   bb4ca:	2000      	movs	r0, #0
   bb4cc:	e7f9      	b.n	bb4c2 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000bb4ce <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   bb4ce:	2100      	movs	r1, #0
   bb4d0:	f7ff bfd5 	b.w	bb47e <_ZN8RHRouter11deleteRouteEh>

000bb4d4 <_ZN8RHRouter10addRouteToEhhh>:
{
   bb4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb4d6:	4616      	mov	r6, r2
   bb4d8:	461f      	mov	r7, r3
   bb4da:	4604      	mov	r4, r0
   bb4dc:	460d      	mov	r5, r1
   bb4de:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   bb4e0:	f500 728c 	add.w	r2, r0, #280	; 0x118
   bb4e4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   bb4e8:	5c11      	ldrb	r1, [r2, r0]
   bb4ea:	42a9      	cmp	r1, r5
   bb4ec:	d105      	bne.n	bb4fa <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   bb4ee:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   bb4f0:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   bb4f4:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   bb4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb4fa:	3301      	adds	r3, #1
   bb4fc:	2b32      	cmp	r3, #50	; 0x32
   bb4fe:	d1f1      	bne.n	bb4e4 <_ZN8RHRouter10addRouteToEhhh+0x10>
   bb500:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   bb502:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   bb506:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   bb50a:	5c11      	ldrb	r1, [r2, r0]
   bb50c:	b919      	cbnz	r1, bb516 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   bb50e:	4420      	add	r0, r4
   bb510:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   bb514:	e7ec      	b.n	bb4f0 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb516:	3301      	adds	r3, #1
   bb518:	2b32      	cmp	r3, #50	; 0x32
   bb51a:	d1f4      	bne.n	bb506 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   bb51c:	4620      	mov	r0, r4
   bb51e:	f7ff ffd6 	bl	bb4ce <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb522:	4620      	mov	r0, r4
   bb524:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   bb528:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   bb52c:	b92a      	cbnz	r2, bb53a <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   bb52e:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   bb532:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   bb536:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb53a:	3003      	adds	r0, #3
   bb53c:	4298      	cmp	r0, r3
   bb53e:	d1f3      	bne.n	bb528 <_ZN8RHRouter10addRouteToEhhh+0x54>
   bb540:	e7da      	b.n	bb4f8 <_ZN8RHRouter10addRouteToEhhh+0x24>

000bb542 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb542:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   bb546:	2200      	movs	r2, #0
   bb548:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb54c:	3003      	adds	r0, #3
   bb54e:	4298      	cmp	r0, r3
   bb550:	d1fa      	bne.n	bb548 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   bb552:	4770      	bx	lr

000bb554 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   bb554:	b510      	push	{r4, lr}
   bb556:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   bb558:	3004      	adds	r0, #4
   bb55a:	f7ff fe53 	bl	bb204 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   bb55e:	4b05      	ldr	r3, [pc, #20]	; (bb574 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   bb560:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   bb562:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   bb566:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   bb568:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   bb56c:	f7ff ffe9 	bl	bb542 <_ZN8RHRouter17clearRoutingTableEv>
}
   bb570:	4620      	mov	r0, r4
   bb572:	bd10      	pop	{r4, pc}
   bb574:	000c4bb4 	.word	0x000c4bb4

000bb578 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   bb578:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bb57c:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb57e:	6840      	ldr	r0, [r0, #4]
{
   bb580:	9101      	str	r1, [sp, #4]
   bb582:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb584:	6803      	ldr	r3, [r0, #0]
{
   bb586:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb58a:	699b      	ldr	r3, [r3, #24]
{
   bb58c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   bb590:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb592:	4798      	blx	r3
   bb594:	f106 0805 	add.w	r8, r6, #5
   bb598:	4580      	cmp	r8, r0
   bb59a:	d81c      	bhi.n	bb5d6 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   bb59c:	4d10      	ldr	r5, [pc, #64]	; (bb5e0 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   bb59e:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   bb5a0:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   bb5a4:	2300      	movs	r3, #0
   bb5a6:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   bb5a8:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   bb5ac:	70eb      	strb	r3, [r5, #3]
   bb5ae:	1c5a      	adds	r2, r3, #1
   bb5b0:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   bb5b4:	1d68      	adds	r0, r5, #5
   bb5b6:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   bb5b8:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   bb5ba:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   bb5be:	f005 fd07 	bl	c0fd0 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   bb5c2:	6823      	ldr	r3, [r4, #0]
   bb5c4:	685b      	ldr	r3, [r3, #4]
   bb5c6:	fa5f f288 	uxtb.w	r2, r8
   bb5ca:	4629      	mov	r1, r5
   bb5cc:	4620      	mov	r0, r4
}
   bb5ce:	b002      	add	sp, #8
   bb5d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   bb5d4:	4718      	bx	r3
}
   bb5d6:	2001      	movs	r0, #1
   bb5d8:	b002      	add	sp, #8
   bb5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb5de:	bf00      	nop
   bb5e0:	2003e57e 	.word	0x2003e57e

000bb5e4 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   bb5e4:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   bb5e6:	f89d 4010 	ldrb.w	r4, [sp, #16]
   bb5ea:	9401      	str	r4, [sp, #4]
   bb5ec:	7a04      	ldrb	r4, [r0, #8]
   bb5ee:	9400      	str	r4, [sp, #0]
   bb5f0:	f7ff ffc2 	bl	bb578 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   bb5f4:	b002      	add	sp, #8
   bb5f6:	bd10      	pop	{r4, pc}

000bb5f8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   bb5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb5fc:	b087      	sub	sp, #28
   bb5fe:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   bb600:	237f      	movs	r3, #127	; 0x7f
   bb602:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb606:	f10d 0317 	add.w	r3, sp, #23
   bb60a:	9302      	str	r3, [sp, #8]
   bb60c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; bb6e0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   bb610:	f10d 0316 	add.w	r3, sp, #22
   bb614:	9301      	str	r3, [sp, #4]
   bb616:	f10d 0315 	add.w	r3, sp, #21
   bb61a:	9300      	str	r3, [sp, #0]
{  
   bb61c:	4604      	mov	r4, r0
   bb61e:	4688      	mov	r8, r1
   bb620:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb622:	ab05      	add	r3, sp, #20
   bb624:	f10d 0213 	add.w	r2, sp, #19
   bb628:	4649      	mov	r1, r9
   bb62a:	3004      	adds	r0, #4
{  
   bb62c:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb630:	f7ff fe97 	bl	bb362 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   bb634:	4605      	mov	r5, r0
   bb636:	b908      	cbnz	r0, bb63c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   bb638:	2500      	movs	r5, #0
   bb63a:	e038      	b.n	bb6ae <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   bb63c:	6823      	ldr	r3, [r4, #0]
   bb63e:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bb642:	681b      	ldr	r3, [r3, #0]
   bb644:	4649      	mov	r1, r9
   bb646:	4620      	mov	r0, r4
   bb648:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   bb64a:	f899 3000 	ldrb.w	r3, [r9]
   bb64e:	7a22      	ldrb	r2, [r4, #8]
   bb650:	429a      	cmp	r2, r3
   bb652:	d001      	beq.n	bb658 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   bb654:	2bff      	cmp	r3, #255	; 0xff
   bb656:	d12e      	bne.n	bb6b6 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   bb658:	b117      	cbz	r7, bb660 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   bb65a:	4b21      	ldr	r3, [pc, #132]	; (bb6e0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb65c:	785b      	ldrb	r3, [r3, #1]
   bb65e:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   bb660:	f1bb 0f00 	cmp.w	fp, #0
   bb664:	d003      	beq.n	bb66e <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   bb666:	4b1e      	ldr	r3, [pc, #120]	; (bb6e0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb668:	781b      	ldrb	r3, [r3, #0]
   bb66a:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   bb66e:	f1ba 0f00 	cmp.w	sl, #0
   bb672:	d003      	beq.n	bb67c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   bb674:	4b1a      	ldr	r3, [pc, #104]	; (bb6e0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb676:	78db      	ldrb	r3, [r3, #3]
   bb678:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   bb67c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   bb67e:	b11b      	cbz	r3, bb688 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   bb680:	4b17      	ldr	r3, [pc, #92]	; (bb6e0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb682:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bb684:	791b      	ldrb	r3, [r3, #4]
   bb686:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   bb688:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb68a:	b11b      	cbz	r3, bb694 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   bb68c:	4b14      	ldr	r3, [pc, #80]	; (bb6e0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb68e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bb690:	789b      	ldrb	r3, [r3, #2]
   bb692:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   bb694:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   bb698:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   bb69a:	4912      	ldr	r1, [pc, #72]	; (bb6e4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   bb69c:	3b05      	subs	r3, #5
   bb69e:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   bb6a0:	429a      	cmp	r2, r3
		*len = msgLen;
   bb6a2:	bf88      	it	hi
   bb6a4:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   bb6a6:	7832      	ldrb	r2, [r6, #0]
   bb6a8:	4640      	mov	r0, r8
   bb6aa:	f005 fc91 	bl	c0fd0 <memcpy>
}
   bb6ae:	4628      	mov	r0, r5
   bb6b0:	b007      	add	sp, #28
   bb6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   bb6b6:	f899 3002 	ldrb.w	r3, [r9, #2]
   bb6ba:	1c5a      	adds	r2, r3, #1
   bb6bc:	f889 2002 	strb.w	r2, [r9, #2]
   bb6c0:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   bb6c4:	429a      	cmp	r2, r3
   bb6c6:	d9b7      	bls.n	bb638 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   bb6c8:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   bb6cc:	2b00      	cmp	r3, #0
   bb6ce:	d0b3      	beq.n	bb638 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   bb6d0:	6823      	ldr	r3, [r4, #0]
   bb6d2:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bb6d6:	685b      	ldr	r3, [r3, #4]
   bb6d8:	4649      	mov	r1, r9
   bb6da:	4620      	mov	r0, r4
   bb6dc:	4798      	blx	r3
   bb6de:	e7ab      	b.n	bb638 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   bb6e0:	2003e57e 	.word	0x2003e57e
   bb6e4:	2003e583 	.word	0x2003e583

000bb6e8 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   bb6e8:	b510      	push	{r4, lr}
   bb6ea:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   bb6ec:	6a00      	ldr	r0, [r0, #32]
   bb6ee:	6803      	ldr	r3, [r0, #0]
   bb6f0:	68db      	ldr	r3, [r3, #12]
   bb6f2:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   bb6f4:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   bb6f8:	28ff      	cmp	r0, #255	; 0xff
   bb6fa:	d002      	beq.n	bb702 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   bb6fc:	2101      	movs	r1, #1
   bb6fe:	f004 fdcb 	bl	c0298 <pinMode>

    deselectSlave();
   bb702:	6823      	ldr	r3, [r4, #0]
   bb704:	4620      	mov	r0, r4
   bb706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb708:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   bb70a:	2064      	movs	r0, #100	; 0x64
   bb70c:	f001 fd10 	bl	bd130 <delay>
#endif
    
    return true;
}
   bb710:	2001      	movs	r0, #1
   bb712:	bd10      	pop	{r4, pc}

000bb714 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   bb714:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bb718:	2100      	movs	r1, #0
   bb71a:	f004 bdce 	b.w	c02ba <digitalWrite>

000bb71e <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   bb71e:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bb722:	2101      	movs	r1, #1
   bb724:	f004 bdc9 	b.w	c02ba <digitalWrite>

000bb728 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   bb728:	b570      	push	{r4, r5, r6, lr}
   bb72a:	4604      	mov	r4, r0
   bb72c:	460d      	mov	r5, r1
   bb72e:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   bb730:	f7ff fa7e 	bl	bac30 <_ZN15RHGenericDriverC1Ev>
   bb734:	4b03      	ldr	r3, [pc, #12]	; (bb744 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   bb736:	6023      	str	r3, [r4, #0]
   bb738:	6226      	str	r6, [r4, #32]
   bb73a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   bb73e:	4620      	mov	r0, r4
   bb740:	bd70      	pop	{r4, r5, r6, pc}
   bb742:	bf00      	nop
   bb744:	000c4bc4 	.word	0x000c4bc4

000bb748 <_ZN11RHSPIDriver7spiReadEh>:
{
   bb748:	b538      	push	{r3, r4, r5, lr}
   bb74a:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bb74c:	6a00      	ldr	r0, [r0, #32]
   bb74e:	6803      	ldr	r3, [r0, #0]
   bb750:	6a1b      	ldr	r3, [r3, #32]
{
   bb752:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bb754:	4798      	blx	r3
    selectSlave();
   bb756:	6823      	ldr	r3, [r4, #0]
   bb758:	4620      	mov	r0, r4
   bb75a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bb75c:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   bb75e:	6a20      	ldr	r0, [r4, #32]
   bb760:	6803      	ldr	r3, [r0, #0]
   bb762:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   bb766:	681b      	ldr	r3, [r3, #0]
   bb768:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bb76a:	6a20      	ldr	r0, [r4, #32]
   bb76c:	6803      	ldr	r3, [r0, #0]
   bb76e:	2100      	movs	r1, #0
   bb770:	681b      	ldr	r3, [r3, #0]
   bb772:	4798      	blx	r3
    deselectSlave();
   bb774:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bb776:	4605      	mov	r5, r0
    deselectSlave();
   bb778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb77a:	4620      	mov	r0, r4
   bb77c:	4798      	blx	r3
    _spi.endTransaction();
   bb77e:	6a20      	ldr	r0, [r4, #32]
   bb780:	6803      	ldr	r3, [r0, #0]
   bb782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb784:	4798      	blx	r3
}
   bb786:	4628      	mov	r0, r5
   bb788:	bd38      	pop	{r3, r4, r5, pc}

000bb78a <_ZN11RHSPIDriver8spiWriteEhh>:
{
   bb78a:	b570      	push	{r4, r5, r6, lr}
   bb78c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bb78e:	6a00      	ldr	r0, [r0, #32]
   bb790:	6803      	ldr	r3, [r0, #0]
   bb792:	6a1b      	ldr	r3, [r3, #32]
{
   bb794:	4616      	mov	r6, r2
   bb796:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bb798:	4798      	blx	r3
    selectSlave();
   bb79a:	6823      	ldr	r3, [r4, #0]
   bb79c:	4620      	mov	r0, r4
   bb79e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bb7a0:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   bb7a2:	6a20      	ldr	r0, [r4, #32]
   bb7a4:	6803      	ldr	r3, [r0, #0]
   bb7a6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   bb7aa:	681b      	ldr	r3, [r3, #0]
   bb7ac:	4798      	blx	r3
   bb7ae:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   bb7b0:	6a20      	ldr	r0, [r4, #32]
   bb7b2:	6803      	ldr	r3, [r0, #0]
   bb7b4:	4631      	mov	r1, r6
   bb7b6:	681b      	ldr	r3, [r3, #0]
   bb7b8:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bb7ba:	2001      	movs	r0, #1
   bb7bc:	f001 f892 	bl	bc8e4 <HAL_Delay_Microseconds>
    deselectSlave();
   bb7c0:	6823      	ldr	r3, [r4, #0]
   bb7c2:	4620      	mov	r0, r4
   bb7c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb7c6:	4798      	blx	r3
    _spi.endTransaction();
   bb7c8:	6a20      	ldr	r0, [r4, #32]
   bb7ca:	6803      	ldr	r3, [r0, #0]
   bb7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb7ce:	4798      	blx	r3
}
   bb7d0:	4628      	mov	r0, r5
   bb7d2:	bd70      	pop	{r4, r5, r6, pc}

000bb7d4 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   bb7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb7d6:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bb7d8:	6a00      	ldr	r0, [r0, #32]
{
   bb7da:	461e      	mov	r6, r3
    _spi.beginTransaction();
   bb7dc:	6803      	ldr	r3, [r0, #0]
   bb7de:	6a1b      	ldr	r3, [r3, #32]
{
   bb7e0:	460f      	mov	r7, r1
   bb7e2:	4615      	mov	r5, r2
    _spi.beginTransaction();
   bb7e4:	4798      	blx	r3
    selectSlave();
   bb7e6:	6823      	ldr	r3, [r4, #0]
   bb7e8:	4620      	mov	r0, r4
   bb7ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bb7ec:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   bb7ee:	6a20      	ldr	r0, [r4, #32]
   bb7f0:	6803      	ldr	r3, [r0, #0]
   bb7f2:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   bb7f6:	681b      	ldr	r3, [r3, #0]
   bb7f8:	4798      	blx	r3
   bb7fa:	442e      	add	r6, r5
   bb7fc:	4607      	mov	r7, r0
    while (len--)
   bb7fe:	42b5      	cmp	r5, r6
   bb800:	d007      	beq.n	bb812 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   bb802:	6a20      	ldr	r0, [r4, #32]
   bb804:	6803      	ldr	r3, [r0, #0]
   bb806:	2100      	movs	r1, #0
   bb808:	681b      	ldr	r3, [r3, #0]
   bb80a:	4798      	blx	r3
   bb80c:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   bb810:	e7f5      	b.n	bb7fe <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   bb812:	6823      	ldr	r3, [r4, #0]
   bb814:	4620      	mov	r0, r4
   bb816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb818:	4798      	blx	r3
    _spi.endTransaction();
   bb81a:	6a20      	ldr	r0, [r4, #32]
   bb81c:	6803      	ldr	r3, [r0, #0]
   bb81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb820:	4798      	blx	r3
}
   bb822:	4638      	mov	r0, r7
   bb824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb826 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   bb826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb828:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bb82a:	6a00      	ldr	r0, [r0, #32]
{
   bb82c:	461e      	mov	r6, r3
    _spi.beginTransaction();
   bb82e:	6803      	ldr	r3, [r0, #0]
   bb830:	6a1b      	ldr	r3, [r3, #32]
{
   bb832:	460f      	mov	r7, r1
   bb834:	4615      	mov	r5, r2
    _spi.beginTransaction();
   bb836:	4798      	blx	r3
    selectSlave();
   bb838:	6823      	ldr	r3, [r4, #0]
   bb83a:	4620      	mov	r0, r4
   bb83c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bb83e:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   bb840:	6a20      	ldr	r0, [r4, #32]
   bb842:	6803      	ldr	r3, [r0, #0]
   bb844:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   bb848:	681b      	ldr	r3, [r3, #0]
   bb84a:	4798      	blx	r3
   bb84c:	442e      	add	r6, r5
   bb84e:	4607      	mov	r7, r0
    while (len--)
   bb850:	42b5      	cmp	r5, r6
   bb852:	d006      	beq.n	bb862 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   bb854:	6a20      	ldr	r0, [r4, #32]
   bb856:	f815 1b01 	ldrb.w	r1, [r5], #1
   bb85a:	6803      	ldr	r3, [r0, #0]
   bb85c:	681b      	ldr	r3, [r3, #0]
   bb85e:	4798      	blx	r3
    while (len--)
   bb860:	e7f6      	b.n	bb850 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   bb862:	6823      	ldr	r3, [r4, #0]
   bb864:	4620      	mov	r0, r4
   bb866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb868:	4798      	blx	r3
    _spi.endTransaction();
   bb86a:	6a20      	ldr	r0, [r4, #32]
   bb86c:	6803      	ldr	r3, [r0, #0]
   bb86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb870:	4798      	blx	r3
}
   bb872:	4638      	mov	r0, r7
   bb874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb876 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   bb876:	6a00      	ldr	r0, [r0, #32]
   bb878:	6803      	ldr	r3, [r0, #0]
   bb87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bb87c:	4718      	bx	r3

000bb87e <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   bb87e:	2001      	movs	r0, #1
   bb880:	4770      	bx	lr

000bb882 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   bb882:	20fb      	movs	r0, #251	; 0xfb
   bb884:	4770      	bx	lr

000bb886 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   bb886:	4770      	bx	lr

000bb888 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   bb888:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   bb88a:	7903      	ldrb	r3, [r0, #4]
   bb88c:	2b05      	cmp	r3, #5
{
   bb88e:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   bb890:	d010      	beq.n	bb8b4 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   bb892:	6803      	ldr	r3, [r0, #0]
   bb894:	2105      	movs	r1, #5
   bb896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bb89a:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   bb89c:	2207      	movs	r2, #7
   bb89e:	2101      	movs	r1, #1
   bb8a0:	4620      	mov	r0, r4
   bb8a2:	f7ff ff72 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   bb8a6:	2280      	movs	r2, #128	; 0x80
   bb8a8:	2140      	movs	r1, #64	; 0x40
   bb8aa:	4620      	mov	r0, r4
   bb8ac:	f7ff ff6d 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   bb8b0:	2305      	movs	r3, #5
   bb8b2:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   bb8b4:	7923      	ldrb	r3, [r4, #4]
   bb8b6:	2b05      	cmp	r3, #5
   bb8b8:	d0fc      	beq.n	bb8b4 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   bb8ba:	7e20      	ldrb	r0, [r4, #24]
}
   bb8bc:	bd10      	pop	{r4, pc}

000bb8be <_ZN7RH_RF95D0Ev>:
   bb8be:	b510      	push	{r4, lr}
   bb8c0:	f44f 7198 	mov.w	r1, #304	; 0x130
   bb8c4:	4604      	mov	r4, r0
   bb8c6:	f7f8 fbea 	bl	b409e <_ZdlPvj>
   bb8ca:	4620      	mov	r0, r4
   bb8cc:	bd10      	pop	{r4, pc}

000bb8ce <_ZN7RH_RF955sleepEv>:
{
   bb8ce:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   bb8d0:	7903      	ldrb	r3, [r0, #4]
   bb8d2:	2b01      	cmp	r3, #1
{
   bb8d4:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   bb8d6:	d00b      	beq.n	bb8f0 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   bb8d8:	6803      	ldr	r3, [r0, #0]
   bb8da:	2101      	movs	r1, #1
   bb8dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bb8e0:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   bb8e2:	2200      	movs	r2, #0
   bb8e4:	2101      	movs	r1, #1
   bb8e6:	4620      	mov	r0, r4
   bb8e8:	f7ff ff4f 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   bb8ec:	2301      	movs	r3, #1
   bb8ee:	7123      	strb	r3, [r4, #4]
}
   bb8f0:	2001      	movs	r0, #1
   bb8f2:	bd10      	pop	{r4, pc}

000bb8f4 <_ZN7RH_RF954recvEPhS0_>:
{
   bb8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   bb8f6:	6803      	ldr	r3, [r0, #0]
   bb8f8:	68db      	ldr	r3, [r3, #12]
{
   bb8fa:	4604      	mov	r4, r0
   bb8fc:	460f      	mov	r7, r1
   bb8fe:	4615      	mov	r5, r2
    if (!available())
   bb900:	4798      	blx	r3
   bb902:	4606      	mov	r6, r0
   bb904:	b1b0      	cbz	r0, bb934 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   bb906:	b187      	cbz	r7, bb92a <_ZN7RH_RF954recvEPhS0_+0x36>
   bb908:	b17d      	cbz	r5, bb92a <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   bb90a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   bb90e:	782a      	ldrb	r2, [r5, #0]
   bb910:	3b03      	subs	r3, #3
   bb912:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   bb914:	bfde      	ittt	le
   bb916:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   bb91a:	3b04      	suble	r3, #4
   bb91c:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   bb91e:	782a      	ldrb	r2, [r5, #0]
   bb920:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   bb924:	4638      	mov	r0, r7
   bb926:	f005 fb53 	bl	c0fd0 <memcpy>
    _rxBufValid = false;
   bb92a:	2300      	movs	r3, #0
   bb92c:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bb930:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   bb934:	4630      	mov	r0, r6
   bb936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb938 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   bb938:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   bb93a:	b538      	push	{r3, r4, r5, lr}
   bb93c:	4605      	mov	r5, r0
   bb93e:	460c      	mov	r4, r1
	if (power > 20)
   bb940:	dc14      	bgt.n	bb96c <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   bb942:	2901      	cmp	r1, #1
   bb944:	dd14      	ble.n	bb970 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   bb946:	2911      	cmp	r1, #17
   bb948:	dd13      	ble.n	bb972 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   bb94a:	2207      	movs	r2, #7
   bb94c:	214d      	movs	r1, #77	; 0x4d
   bb94e:	4628      	mov	r0, r5
   bb950:	f7ff ff1b 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   bb954:	3c03      	subs	r4, #3
   bb956:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bb958:	1ea2      	subs	r2, r4, #2
   bb95a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   bb95e:	4628      	mov	r0, r5
   bb960:	b2d2      	uxtb	r2, r2
}
   bb962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bb966:	2109      	movs	r1, #9
   bb968:	f7ff bf0f 	b.w	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   bb96c:	2414      	movs	r4, #20
   bb96e:	e7ec      	b.n	bb94a <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   bb970:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bb972:	2204      	movs	r2, #4
   bb974:	214d      	movs	r1, #77	; 0x4d
   bb976:	4628      	mov	r0, r5
   bb978:	f7ff ff07 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
   bb97c:	e7ec      	b.n	bb958 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000bb980 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   bb980:	b538      	push	{r3, r4, r5, lr}
   bb982:	4604      	mov	r4, r0
   bb984:	4615      	mov	r5, r2
    _rxBufValid(0)
   bb986:	461a      	mov	r2, r3
   bb988:	f7ff fece 	bl	bb728 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   bb98c:	4b09      	ldr	r3, [pc, #36]	; (bb9b4 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   bb98e:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   bb990:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   bb992:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   bb994:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   bb998:	2201      	movs	r2, #1
    _rxBufValid(0)
   bb99a:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bb99e:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   bb9a2:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   bb9a6:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   bb9aa:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   bb9ae:	4620      	mov	r0, r4
   bb9b0:	bd38      	pop	{r3, r4, r5, pc}
   bb9b2:	bf00      	nop
   bb9b4:	000c4c5c 	.word	0x000c4c5c

000bb9b8 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   bb9b8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   bb9bc:	2b03      	cmp	r3, #3
   bb9be:	d91b      	bls.n	bb9f8 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   bb9c0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   bb9c4:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   bb9c6:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   bb9ca:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   bb9cc:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   bb9d0:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   bb9d2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   bb9d6:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   bb9d8:	7983      	ldrb	r3, [r0, #6]
   bb9da:	b933      	cbnz	r3, bb9ea <_ZN7RH_RF9513validateRxBufEv+0x32>
   bb9dc:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   bb9de:	7942      	ldrb	r2, [r0, #5]
   bb9e0:	429a      	cmp	r2, r3
   bb9e2:	d002      	beq.n	bb9ea <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   bb9e4:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   bb9e6:	2bff      	cmp	r3, #255	; 0xff
   bb9e8:	d106      	bne.n	bb9f8 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   bb9ea:	8a83      	ldrh	r3, [r0, #20]
   bb9ec:	3301      	adds	r3, #1
   bb9ee:	b29b      	uxth	r3, r3
   bb9f0:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   bb9f2:	2301      	movs	r3, #1
   bb9f4:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   bb9f8:	4770      	bx	lr
   bb9fa:	0000      	movs	r0, r0
   bb9fc:	0000      	movs	r0, r0
	...

000bba00 <_ZN7RH_RF9512setFrequencyEf>:
{
   bba00:	b538      	push	{r3, r4, r5, lr}
   bba02:	4604      	mov	r4, r0
   bba04:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bba08:	ee10 0a10 	vmov	r0, s0
{
   bba0c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bba10:	f004 fece 	bl	c07b0 <__aeabi_f2d>
   bba14:	a317      	add	r3, pc, #92	; (adr r3, bba74 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   bba16:	e9d3 2300 	ldrd	r2, r3, [r3]
   bba1a:	f004 ff21 	bl	c0860 <__aeabi_dmul>
   bba1e:	a317      	add	r3, pc, #92	; (adr r3, bba7c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   bba20:	e9d3 2300 	ldrd	r2, r3, [r3]
   bba24:	f005 f846 	bl	c0ab4 <__aeabi_ddiv>
   bba28:	f005 f9f2 	bl	c0e10 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bba2c:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bba2e:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bba30:	f3c0 4207 	ubfx	r2, r0, #16, #8
   bba34:	4620      	mov	r0, r4
   bba36:	f7ff fea8 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   bba3a:	f3c5 2207 	ubfx	r2, r5, #8, #8
   bba3e:	2107      	movs	r1, #7
   bba40:	4620      	mov	r0, r4
   bba42:	f7ff fea2 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   bba46:	b2ea      	uxtb	r2, r5
   bba48:	2108      	movs	r1, #8
   bba4a:	4620      	mov	r0, r4
   bba4c:	f7ff fe9d 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   bba50:	eddf 7a07 	vldr	s15, [pc, #28]	; bba70 <_ZN7RH_RF9512setFrequencyEf+0x70>
   bba54:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   bba58:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   bba5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bba60:	bfac      	ite	ge
   bba62:	2301      	movge	r3, #1
   bba64:	2300      	movlt	r3, #0
}
   bba66:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   bba68:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   bba6c:	bd38      	pop	{r3, r4, r5, pc}
   bba6e:	bf00      	nop
   bba70:	4442c000 	.word	0x4442c000
   bba74:	00000000 	.word	0x00000000
   bba78:	412e8480 	.word	0x412e8480
   bba7c:	00000000 	.word	0x00000000
   bba80:	404e8480 	.word	0x404e8480

000bba84 <_ZN7RH_RF9511setModeIdleEv>:
{
   bba84:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   bba86:	7903      	ldrb	r3, [r0, #4]
   bba88:	2b02      	cmp	r3, #2
{
   bba8a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   bba8c:	d00b      	beq.n	bbaa6 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   bba8e:	6803      	ldr	r3, [r0, #0]
   bba90:	2102      	movs	r1, #2
   bba92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bba96:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   bba98:	2201      	movs	r2, #1
   bba9a:	4611      	mov	r1, r2
   bba9c:	4620      	mov	r0, r4
   bba9e:	f7ff fe74 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   bbaa2:	2302      	movs	r3, #2
   bbaa4:	7123      	strb	r3, [r4, #4]
}
   bbaa6:	bd10      	pop	{r4, pc}

000bbaa8 <_ZN7RH_RF9515handleInterruptEv>:
{
   bbaa8:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bbaaa:	2112      	movs	r1, #18
{
   bbaac:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bbaae:	f7ff fe4b 	bl	bb748 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bbab2:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bbab4:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bbab6:	4620      	mov	r0, r4
   bbab8:	f7ff fe46 	bl	bb748 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbabc:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bbabe:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbac0:	2112      	movs	r1, #18
   bbac2:	4620      	mov	r0, r4
   bbac4:	f7ff fe61 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   bbac8:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   bbaca:	2b04      	cmp	r3, #4
   bbacc:	d107      	bne.n	bbade <_ZN7RH_RF9515handleInterruptEv+0x36>
   bbace:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   bbad2:	d117      	bne.n	bbb04 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   bbad4:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   bbad8:	b10b      	cbz	r3, bbade <_ZN7RH_RF9515handleInterruptEv+0x36>
   bbada:	0670      	lsls	r0, r6, #25
   bbadc:	d512      	bpl.n	bbb04 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   bbade:	7923      	ldrb	r3, [r4, #4]
   bbae0:	2b04      	cmp	r3, #4
   bbae2:	d101      	bne.n	bbae8 <_ZN7RH_RF9515handleInterruptEv+0x40>
   bbae4:	0669      	lsls	r1, r5, #25
   bbae6:	d422      	bmi.n	bbb2e <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   bbae8:	7923      	ldrb	r3, [r4, #4]
   bbaea:	2b03      	cmp	r3, #3
   bbaec:	d101      	bne.n	bbaf2 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   bbaee:	072a      	lsls	r2, r5, #28
   bbaf0:	d468      	bmi.n	bbbc4 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   bbaf2:	7923      	ldrb	r3, [r4, #4]
   bbaf4:	2b05      	cmp	r3, #5
   bbaf6:	d10e      	bne.n	bbb16 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   bbaf8:	076b      	lsls	r3, r5, #29
   bbafa:	d50c      	bpl.n	bbb16 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   bbafc:	f005 0501 	and.w	r5, r5, #1
   bbb00:	7625      	strb	r5, [r4, #24]
   bbb02:	e063      	b.n	bbbcc <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   bbb04:	8a63      	ldrh	r3, [r4, #18]
   bbb06:	3301      	adds	r3, #1
   bbb08:	b29b      	uxth	r3, r3
   bbb0a:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   bbb0c:	2300      	movs	r3, #0
   bbb0e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bbb12:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbb16:	22ff      	movs	r2, #255	; 0xff
   bbb18:	2112      	movs	r1, #18
   bbb1a:	4620      	mov	r0, r4
   bbb1c:	f7ff fe35 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbb20:	4620      	mov	r0, r4
   bbb22:	22ff      	movs	r2, #255	; 0xff
}
   bbb24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbb28:	2112      	movs	r1, #18
   bbb2a:	f7ff be2e 	b.w	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bbb2e:	2113      	movs	r1, #19
   bbb30:	4620      	mov	r0, r4
   bbb32:	f7ff fe09 	bl	bb748 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bbb36:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bbb38:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bbb3a:	4620      	mov	r0, r4
   bbb3c:	f7ff fe04 	bl	bb748 <_ZN11RHSPIDriver7spiReadEh>
   bbb40:	210d      	movs	r1, #13
   bbb42:	4602      	mov	r2, r0
   bbb44:	4620      	mov	r0, r4
   bbb46:	f7ff fe20 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   bbb4a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   bbb4e:	462b      	mov	r3, r5
   bbb50:	2100      	movs	r1, #0
   bbb52:	4620      	mov	r0, r4
   bbb54:	f7ff fe3e 	bl	bb7d4 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bbb58:	2119      	movs	r1, #25
	_bufLen = len;
   bbb5a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bbb5e:	4620      	mov	r0, r4
   bbb60:	f7ff fdf2 	bl	bb748 <_ZN11RHSPIDriver7spiReadEh>
   bbb64:	b240      	sxtb	r0, r0
   bbb66:	2800      	cmp	r0, #0
   bbb68:	bfb8      	it	lt
   bbb6a:	3003      	addlt	r0, #3
   bbb6c:	1080      	asrs	r0, r0, #2
   bbb6e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbb72:	211a      	movs	r1, #26
   bbb74:	4620      	mov	r0, r4
   bbb76:	f7ff fde7 	bl	bb748 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   bbb7a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbb7e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   bbb80:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbb82:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbb84:	bfa9      	itett	ge
   bbb86:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   bbb88:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbb8a:	b21b      	sxthge	r3, r3
   bbb8c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   bbb8e:	bfb2      	itee	lt
   bbb90:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbb92:	220f      	movge	r2, #15
   bbb94:	fb93 f3f2 	sdivge	r3, r3, r2
   bbb98:	b21b      	sxth	r3, r3
   bbb9a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   bbb9c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   bbba0:	b16b      	cbz	r3, bbbbe <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   bbba2:	8a23      	ldrh	r3, [r4, #16]
   bbba4:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   bbba6:	b21b      	sxth	r3, r3
   bbba8:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   bbbaa:	4620      	mov	r0, r4
   bbbac:	f7ff ff04 	bl	bb9b8 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   bbbb0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   bbbb4:	2b00      	cmp	r3, #0
   bbbb6:	d0ae      	beq.n	bbb16 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   bbbb8:	f7ff ff64 	bl	bba84 <_ZN7RH_RF9511setModeIdleEv>
   bbbbc:	e7ab      	b.n	bbb16 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   bbbbe:	8a23      	ldrh	r3, [r4, #16]
   bbbc0:	3ba4      	subs	r3, #164	; 0xa4
   bbbc2:	e7f0      	b.n	bbba6 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   bbbc4:	8ae3      	ldrh	r3, [r4, #22]
   bbbc6:	3301      	adds	r3, #1
   bbbc8:	b29b      	uxth	r3, r3
   bbbca:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   bbbcc:	4620      	mov	r0, r4
   bbbce:	e7f3      	b.n	bbbb8 <_ZN7RH_RF9515handleInterruptEv+0x110>

000bbbd0 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   bbbd0:	4b02      	ldr	r3, [pc, #8]	; (bbbdc <_ZN7RH_RF954isr0Ev+0xc>)
   bbbd2:	6818      	ldr	r0, [r3, #0]
   bbbd4:	b108      	cbz	r0, bbbda <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   bbbd6:	f7ff bf67 	b.w	bbaa8 <_ZN7RH_RF9515handleInterruptEv>
}
   bbbda:	4770      	bx	lr
   bbbdc:	2003e600 	.word	0x2003e600

000bbbe0 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   bbbe0:	4b02      	ldr	r3, [pc, #8]	; (bbbec <_ZN7RH_RF954isr1Ev+0xc>)
   bbbe2:	6858      	ldr	r0, [r3, #4]
   bbbe4:	b108      	cbz	r0, bbbea <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   bbbe6:	f7ff bf5f 	b.w	bbaa8 <_ZN7RH_RF9515handleInterruptEv>
}
   bbbea:	4770      	bx	lr
   bbbec:	2003e600 	.word	0x2003e600

000bbbf0 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   bbbf0:	4b02      	ldr	r3, [pc, #8]	; (bbbfc <_ZN7RH_RF954isr2Ev+0xc>)
   bbbf2:	6898      	ldr	r0, [r3, #8]
   bbbf4:	b108      	cbz	r0, bbbfa <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   bbbf6:	f7ff bf57 	b.w	bbaa8 <_ZN7RH_RF9515handleInterruptEv>
}
   bbbfa:	4770      	bx	lr
   bbbfc:	2003e600 	.word	0x2003e600

000bbc00 <_ZN7RH_RF959setModeRxEv>:
{
   bbc00:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   bbc02:	7903      	ldrb	r3, [r0, #4]
   bbc04:	2b04      	cmp	r3, #4
{
   bbc06:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   bbc08:	d010      	beq.n	bbc2c <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   bbc0a:	6803      	ldr	r3, [r0, #0]
   bbc0c:	2104      	movs	r1, #4
   bbc0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbc12:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   bbc14:	2205      	movs	r2, #5
   bbc16:	2101      	movs	r1, #1
   bbc18:	4620      	mov	r0, r4
   bbc1a:	f7ff fdb6 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   bbc1e:	2200      	movs	r2, #0
   bbc20:	2140      	movs	r1, #64	; 0x40
   bbc22:	4620      	mov	r0, r4
   bbc24:	f7ff fdb1 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   bbc28:	2304      	movs	r3, #4
   bbc2a:	7123      	strb	r3, [r4, #4]
}
   bbc2c:	bd10      	pop	{r4, pc}

000bbc2e <_ZN7RH_RF959availableEv>:
{
   bbc2e:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   bbc30:	7903      	ldrb	r3, [r0, #4]
   bbc32:	2b03      	cmp	r3, #3
{
   bbc34:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   bbc36:	d005      	beq.n	bbc44 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   bbc38:	f7ff ffe2 	bl	bbc00 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   bbc3c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   bbc40:	b2c0      	uxtb	r0, r0
}
   bbc42:	bd10      	pop	{r4, pc}
	return false;
   bbc44:	2000      	movs	r0, #0
   bbc46:	e7fc      	b.n	bbc42 <_ZN7RH_RF959availableEv+0x14>

000bbc48 <_ZN7RH_RF959setModeTxEv>:
{
   bbc48:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   bbc4a:	7903      	ldrb	r3, [r0, #4]
   bbc4c:	2b03      	cmp	r3, #3
{
   bbc4e:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   bbc50:	d010      	beq.n	bbc74 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   bbc52:	6803      	ldr	r3, [r0, #0]
   bbc54:	2103      	movs	r1, #3
   bbc56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbc5a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   bbc5c:	2203      	movs	r2, #3
   bbc5e:	2101      	movs	r1, #1
   bbc60:	4620      	mov	r0, r4
   bbc62:	f7ff fd92 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   bbc66:	2240      	movs	r2, #64	; 0x40
   bbc68:	4611      	mov	r1, r2
   bbc6a:	4620      	mov	r0, r4
   bbc6c:	f7ff fd8d 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   bbc70:	2303      	movs	r3, #3
   bbc72:	7123      	strb	r3, [r4, #4]
}
   bbc74:	bd10      	pop	{r4, pc}

000bbc76 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bbc76:	2afb      	cmp	r2, #251	; 0xfb
{
   bbc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbc7a:	4604      	mov	r4, r0
   bbc7c:	460f      	mov	r7, r1
   bbc7e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bbc80:	d902      	bls.n	bbc88 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   bbc82:	2600      	movs	r6, #0
}
   bbc84:	4630      	mov	r0, r6
   bbc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   bbc88:	6803      	ldr	r3, [r0, #0]
   bbc8a:	6a1b      	ldr	r3, [r3, #32]
   bbc8c:	4798      	blx	r3
    setModeIdle();
   bbc8e:	4620      	mov	r0, r4
   bbc90:	f7ff fef8 	bl	bba84 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   bbc94:	6823      	ldr	r3, [r4, #0]
   bbc96:	4620      	mov	r0, r4
   bbc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bbc9a:	4798      	blx	r3
   bbc9c:	4606      	mov	r6, r0
   bbc9e:	2800      	cmp	r0, #0
   bbca0:	d0ef      	beq.n	bbc82 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   bbca2:	2200      	movs	r2, #0
   bbca4:	210d      	movs	r1, #13
   bbca6:	4620      	mov	r0, r4
   bbca8:	f7ff fd6f 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   bbcac:	7ae2      	ldrb	r2, [r4, #11]
   bbcae:	2100      	movs	r1, #0
   bbcb0:	4620      	mov	r0, r4
   bbcb2:	f7ff fd6a 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   bbcb6:	7b22      	ldrb	r2, [r4, #12]
   bbcb8:	2100      	movs	r1, #0
   bbcba:	4620      	mov	r0, r4
   bbcbc:	f7ff fd65 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   bbcc0:	7b62      	ldrb	r2, [r4, #13]
   bbcc2:	2100      	movs	r1, #0
   bbcc4:	4620      	mov	r0, r4
   bbcc6:	f7ff fd60 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   bbcca:	7ba2      	ldrb	r2, [r4, #14]
   bbccc:	2100      	movs	r1, #0
   bbcce:	4620      	mov	r0, r4
   bbcd0:	f7ff fd5b 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   bbcd4:	462b      	mov	r3, r5
   bbcd6:	463a      	mov	r2, r7
   bbcd8:	2100      	movs	r1, #0
   bbcda:	4620      	mov	r0, r4
   bbcdc:	f7ff fda3 	bl	bb826 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   bbce0:	1d2a      	adds	r2, r5, #4
   bbce2:	b2d2      	uxtb	r2, r2
   bbce4:	2122      	movs	r1, #34	; 0x22
   bbce6:	4620      	mov	r0, r4
   bbce8:	f7ff fd4f 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   bbcec:	4620      	mov	r0, r4
   bbcee:	f7ff ffab 	bl	bbc48 <_ZN7RH_RF959setModeTxEv>
    return true;
   bbcf2:	e7c7      	b.n	bbc84 <_ZN7RH_RF954sendEPKhh+0xe>

000bbcf4 <_ZN7RH_RF9510setTxPowerEab>:
{
   bbcf4:	b510      	push	{r4, lr}
   bbcf6:	4604      	mov	r4, r0
    _useRFO = useRFO;
   bbcf8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   bbcfc:	b172      	cbz	r2, bbd1c <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   bbcfe:	f381 0204 	usat	r2, #4, r1
   bbd02:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   bbd06:	b2d2      	uxtb	r2, r2
   bbd08:	2109      	movs	r1, #9
   bbd0a:	f7ff fd3e 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bbd0e:	4620      	mov	r0, r4
   bbd10:	2204      	movs	r2, #4
}
   bbd12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bbd16:	214d      	movs	r1, #77	; 0x4d
   bbd18:	f7ff bd37 	b.w	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
}
   bbd1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bbd20:	f7ff be0a 	b.w	bb938 <_ZN7RH_RF9510setTxPowerEab.part.0>

000bbd24 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   bbd24:	b538      	push	{r3, r4, r5, lr}
   bbd26:	460c      	mov	r4, r1
   bbd28:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   bbd2a:	780a      	ldrb	r2, [r1, #0]
   bbd2c:	211d      	movs	r1, #29
   bbd2e:	f7ff fd2c 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   bbd32:	7862      	ldrb	r2, [r4, #1]
   bbd34:	211e      	movs	r1, #30
   bbd36:	4628      	mov	r0, r5
   bbd38:	f7ff fd27 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bbd3c:	78a2      	ldrb	r2, [r4, #2]
   bbd3e:	4628      	mov	r0, r5
   bbd40:	2126      	movs	r1, #38	; 0x26
}
   bbd42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bbd46:	f7ff bd20 	b.w	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
	...

000bbd4c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bbd4c:	2905      	cmp	r1, #5
{
   bbd4e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bbd50:	d80f      	bhi.n	bbd72 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bbd52:	4b09      	ldr	r3, [pc, #36]	; (bbd78 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   bbd54:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   bbd58:	185c      	adds	r4, r3, r1
   bbd5a:	5a5a      	ldrh	r2, [r3, r1]
   bbd5c:	78a3      	ldrb	r3, [r4, #2]
   bbd5e:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   bbd62:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bbd64:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   bbd68:	f7ff ffdc 	bl	bbd24 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   bbd6c:	2001      	movs	r0, #1
}
   bbd6e:	b002      	add	sp, #8
   bbd70:	bd10      	pop	{r4, pc}
        return false;
   bbd72:	2000      	movs	r0, #0
   bbd74:	e7fb      	b.n	bbd6e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   bbd76:	bf00      	nop
   bbd78:	000c4c44 	.word	0x000c4c44

000bbd7c <_ZN7RH_RF9517setPreambleLengthEt>:
{
   bbd7c:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bbd7e:	0a0a      	lsrs	r2, r1, #8
{
   bbd80:	4605      	mov	r5, r0
   bbd82:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bbd84:	2120      	movs	r1, #32
   bbd86:	f7ff fd00 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bbd8a:	b2e2      	uxtb	r2, r4
   bbd8c:	4628      	mov	r0, r5
   bbd8e:	2121      	movs	r1, #33	; 0x21
}
   bbd90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bbd94:	f7ff bcf9 	b.w	bb78a <_ZN11RHSPIDriver8spiWriteEhh>

000bbd98 <_ZN7RH_RF954initEv>:
{
   bbd98:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbd9a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   bbd9c:	f7ff fca4 	bl	bb6e8 <_ZN11RHSPIDriver4initEv>
   bbda0:	4606      	mov	r6, r0
   bbda2:	b918      	cbnz	r0, bbdac <_ZN7RH_RF954initEv+0x14>
	return false;
   bbda4:	2600      	movs	r6, #0
}
   bbda6:	4630      	mov	r0, r6
   bbda8:	b002      	add	sp, #8
   bbdaa:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   bbdac:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   bbdb0:	2dff      	cmp	r5, #255	; 0xff
   bbdb2:	d054      	beq.n	bbe5e <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   bbdb4:	4629      	mov	r1, r5
   bbdb6:	4620      	mov	r0, r4
   bbdb8:	f7ff fd5d 	bl	bb876 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   bbdbc:	2280      	movs	r2, #128	; 0x80
   bbdbe:	2101      	movs	r1, #1
   bbdc0:	4620      	mov	r0, r4
   bbdc2:	f7ff fce2 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   bbdc6:	200a      	movs	r0, #10
   bbdc8:	f001 f9b2 	bl	bd130 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   bbdcc:	2101      	movs	r1, #1
   bbdce:	4620      	mov	r0, r4
   bbdd0:	f7ff fcba 	bl	bb748 <_ZN11RHSPIDriver7spiReadEh>
   bbdd4:	2880      	cmp	r0, #128	; 0x80
   bbdd6:	d1e5      	bne.n	bbda4 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   bbdd8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   bbddc:	28ff      	cmp	r0, #255	; 0xff
   bbdde:	d01c      	beq.n	bbe1a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   bbde0:	2100      	movs	r1, #0
   bbde2:	f004 fa59 	bl	c0298 <pinMode>
	if (_myInterruptIndex == 0xff)
   bbde6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   bbdea:	2bff      	cmp	r3, #255	; 0xff
   bbdec:	d107      	bne.n	bbdfe <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   bbdee:	4a26      	ldr	r2, [pc, #152]	; (bbe88 <_ZN7RH_RF954initEv+0xf0>)
   bbdf0:	7813      	ldrb	r3, [r2, #0]
   bbdf2:	2b03      	cmp	r3, #3
   bbdf4:	d8d6      	bhi.n	bbda4 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   bbdf6:	1c59      	adds	r1, r3, #1
   bbdf8:	7011      	strb	r1, [r2, #0]
   bbdfa:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   bbdfe:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   bbe02:	4b22      	ldr	r3, [pc, #136]	; (bbe8c <_ZN7RH_RF954initEv+0xf4>)
   bbe04:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   bbe08:	bb62      	cbnz	r2, bbe64 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   bbe0a:	4921      	ldr	r1, [pc, #132]	; (bbe90 <_ZN7RH_RF954initEv+0xf8>)
   bbe0c:	9200      	str	r2, [sp, #0]
   bbe0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bbe12:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   bbe14:	b2a8      	uxth	r0, r5
   bbe16:	f001 ff0b 	bl	bdc30 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   bbe1a:	2200      	movs	r2, #0
   bbe1c:	210e      	movs	r1, #14
   bbe1e:	4620      	mov	r0, r4
   bbe20:	f7ff fcb3 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   bbe24:	2200      	movs	r2, #0
   bbe26:	210f      	movs	r1, #15
   bbe28:	4620      	mov	r0, r4
   bbe2a:	f7ff fcae 	bl	bb78a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   bbe2e:	4620      	mov	r0, r4
   bbe30:	f7ff fe28 	bl	bba84 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   bbe34:	2100      	movs	r1, #0
   bbe36:	4620      	mov	r0, r4
   bbe38:	f7ff ff88 	bl	bbd4c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   bbe3c:	2108      	movs	r1, #8
   bbe3e:	4620      	mov	r0, r4
   bbe40:	f7ff ff9c 	bl	bbd7c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   bbe44:	ed9f 0a13 	vldr	s0, [pc, #76]	; bbe94 <_ZN7RH_RF954initEv+0xfc>
   bbe48:	4620      	mov	r0, r4
   bbe4a:	f7ff fdd9 	bl	bba00 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   bbe4e:	2300      	movs	r3, #0
   bbe50:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   bbe54:	210d      	movs	r1, #13
   bbe56:	4620      	mov	r0, r4
   bbe58:	f7ff fd6e 	bl	bb938 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   bbe5c:	e7a3      	b.n	bbda6 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   bbe5e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   bbe62:	e7ab      	b.n	bbdbc <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   bbe64:	2a01      	cmp	r2, #1
   bbe66:	f04f 0300 	mov.w	r3, #0
   bbe6a:	d104      	bne.n	bbe76 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   bbe6c:	9300      	str	r3, [sp, #0]
   bbe6e:	490a      	ldr	r1, [pc, #40]	; (bbe98 <_ZN7RH_RF954initEv+0x100>)
   bbe70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bbe74:	e7ce      	b.n	bbe14 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   bbe76:	2a02      	cmp	r2, #2
   bbe78:	d194      	bne.n	bbda4 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   bbe7a:	9300      	str	r3, [sp, #0]
   bbe7c:	4907      	ldr	r1, [pc, #28]	; (bbe9c <_ZN7RH_RF954initEv+0x104>)
   bbe7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bbe82:	2201      	movs	r2, #1
   bbe84:	e7c6      	b.n	bbe14 <_ZN7RH_RF954initEv+0x7c>
   bbe86:	bf00      	nop
   bbe88:	2003e5fd 	.word	0x2003e5fd
   bbe8c:	2003e600 	.word	0x2003e600
   bbe90:	000bbbd1 	.word	0x000bbbd1
   bbe94:	43d90000 	.word	0x43d90000
   bbe98:	000bbbe1 	.word	0x000bbbe1
   bbe9c:	000bbbf1 	.word	0x000bbbf1

000bbea0 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   bbea0:	2001      	movs	r0, #1
   bbea2:	4770      	bx	lr

000bbea4 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   bbea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbea6:	4d1f      	ldr	r5, [pc, #124]	; (bbf24 <_ZN14SequentialFileC1Ev+0x80>)
   bbea8:	4b1f      	ldr	r3, [pc, #124]	; (bbf28 <_ZN14SequentialFileC1Ev+0x84>)
   bbeaa:	4604      	mov	r4, r0
   bbeac:	4629      	mov	r1, r5
   bbeae:	f840 3b04 	str.w	r3, [r0], #4
   bbeb2:	f003 fc8a 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
   bbeb6:	491d      	ldr	r1, [pc, #116]	; (bbf2c <_ZN14SequentialFileC1Ev+0x88>)
   bbeb8:	f104 0014 	add.w	r0, r4, #20
   bbebc:	f003 fc85 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
   bbec0:	4629      	mov	r1, r5
   bbec2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bbec6:	f003 fc80 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
   bbeca:	2300      	movs	r3, #0
   bbecc:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   bbed0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   bbed4:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   bbed8:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   bbedc:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   bbee0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   bbee4:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   bbee6:	2308      	movs	r3, #8
   bbee8:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bbeea:	2020      	movs	r0, #32
   bbeec:	f7f8 f8d3 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bbef0:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   bbef2:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bbef4:	3d01      	subs	r5, #1
   bbef6:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   bbef8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   bbefc:	4606      	mov	r6, r0
   bbefe:	f44f 7000 	mov.w	r0, #512	; 0x200
   bbf02:	f7f8 f8c8 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   bbf06:	f500 7300 	add.w	r3, r0, #512	; 0x200
   bbf0a:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   bbf0e:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   bbf12:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   bbf14:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   bbf16:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   bbf18:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   bbf1a:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   bbf1c:	6667      	str	r7, [r4, #100]	; 0x64

}
   bbf1e:	4620      	mov	r0, r4
   bbf20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bbf22:	bf00      	nop
   bbf24:	000c4fe0 	.word	0x000c4fe0
   bbf28:	000c4de0 	.word	0x000c4de0
   bbf2c:	000c4ce0 	.word	0x000c4ce0

000bbf30 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bbf30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   bbf32:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bbf34:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   bbf36:	4628      	mov	r0, r5
   bbf38:	f003 fca5 	bl	bf886 <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   bbf3c:	490e      	ldr	r1, [pc, #56]	; (bbf78 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   bbf3e:	4668      	mov	r0, sp
   bbf40:	f003 fc43 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
   bbf44:	4669      	mov	r1, sp
   bbf46:	4628      	mov	r0, r5
   bbf48:	f003 fd17 	bl	bf97a <_ZNK6String8endsWithERKS_>
   bbf4c:	4606      	mov	r6, r0
   bbf4e:	4668      	mov	r0, sp
   bbf50:	f003 fbf0 	bl	bf734 <_ZN6StringD1Ev>
   bbf54:	b16e      	cbz	r6, bbf72 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   bbf56:	68e3      	ldr	r3, [r4, #12]
   bbf58:	2200      	movs	r2, #0
   bbf5a:	3b01      	subs	r3, #1
   bbf5c:	4629      	mov	r1, r5
   bbf5e:	4668      	mov	r0, sp
   bbf60:	f003 fd20 	bl	bf9a4 <_ZNK6String9substringEjj>
   bbf64:	4669      	mov	r1, sp
   bbf66:	4628      	mov	r0, r5
   bbf68:	f003 fc85 	bl	bf876 <_ZN6StringaSEOS_>
   bbf6c:	4668      	mov	r0, sp
   bbf6e:	f003 fbe1 	bl	bf734 <_ZN6StringD1Ev>
    }
    return *this; 
};
   bbf72:	4620      	mov	r0, r4
   bbf74:	b004      	add	sp, #16
   bbf76:	bd70      	pop	{r4, r5, r6, pc}
   bbf78:	000c4ce5 	.word	0x000c4ce5

000bbf7c <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   bbf7c:	b510      	push	{r4, lr}
    if (!queueMutex) {
   bbf7e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   bbf80:	4604      	mov	r4, r0
    if (!queueMutex) {
   bbf82:	b913      	cbnz	r3, bbf8a <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   bbf84:	303c      	adds	r0, #60	; 0x3c
   bbf86:	f000 fc4d 	bl	bc824 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   bbf8a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   bbf8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   bbf90:	f000 bc50 	b.w	bc834 <os_mutex_lock>

000bbf94 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   bbf94:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   bbf96:	f000 bc55 	b.w	bc844 <os_mutex_unlock>
	...

000bbf9c <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   bbf9c:	b510      	push	{r4, lr}
   bbf9e:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   bbfa0:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   bbfa2:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   bbfa4:	f000 fe06 	bl	bcbb4 <stat>
    if (result == 0) {
   bbfa8:	b9d0      	cbnz	r0, bbfe0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bbfaa:	9b01      	ldr	r3, [sp, #4]
   bbfac:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   bbfae:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bbfb0:	d506      	bpl.n	bbfc0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   bbfb2:	4915      	ldr	r1, [pc, #84]	; (bc008 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   bbfb4:	4815      	ldr	r0, [pc, #84]	; (bc00c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bbfb6:	f7f8 f8dc 	bl	b4172 <_ZNK5spark6Logger4infoEPKcz>
        return true;
   bbfba:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   bbfbc:	b016      	add	sp, #88	; 0x58
   bbfbe:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   bbfc0:	4812      	ldr	r0, [pc, #72]	; (bc00c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bbfc2:	4913      	ldr	r1, [pc, #76]	; (bc010 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   bbfc4:	f7fb fbfc 	bl	b77c0 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   bbfc8:	4620      	mov	r0, r4
   bbfca:	f006 f8a7 	bl	c211c <unlink>
    result = mkdir(path, 0777);
   bbfce:	f240 11ff 	movw	r1, #511	; 0x1ff
   bbfd2:	4620      	mov	r0, r4
   bbfd4:	f000 fdf6 	bl	bcbc4 <mkdir>
    if (result == 0) {
   bbfd8:	b980      	cbnz	r0, bbffc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   bbfda:	490e      	ldr	r1, [pc, #56]	; (bc014 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   bbfdc:	4622      	mov	r2, r4
   bbfde:	e7e9      	b.n	bbfb4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   bbfe0:	f001 f86e 	bl	bd0c0 <__errno>
   bbfe4:	6803      	ldr	r3, [r0, #0]
   bbfe6:	2b02      	cmp	r3, #2
   bbfe8:	d0f1      	beq.n	bbfce <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   bbfea:	f001 f869 	bl	bd0c0 <__errno>
   bbfee:	490a      	ldr	r1, [pc, #40]	; (bc018 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   bbff0:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   bbff2:	4806      	ldr	r0, [pc, #24]	; (bc00c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bbff4:	f7fb fbe4 	bl	b77c0 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bbff8:	2000      	movs	r0, #0
   bbffa:	e7df      	b.n	bbfbc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   bbffc:	f001 f860 	bl	bd0c0 <__errno>
   bc000:	4906      	ldr	r1, [pc, #24]	; (bc01c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   bc002:	6802      	ldr	r2, [r0, #0]
   bc004:	e7f5      	b.n	bbff2 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   bc006:	bf00      	nop
   bc008:	000c4cf2 	.word	0x000c4cf2
   bc00c:	2003e60c 	.word	0x2003e60c
   bc010:	000c4d0f 	.word	0x000c4d0f
   bc014:	000c4d40 	.word	0x000c4d40
   bc018:	000c4d2c 	.word	0x000c4d2c
   bc01c:	000c4d4f 	.word	0x000c4d4f

000bc020 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   bc020:	b538      	push	{r3, r4, r5, lr}
   bc022:	4615      	mov	r5, r2
   bc024:	4604      	mov	r4, r0
    String result = name;
   bc026:	f003 fbd0 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   bc02a:	b14d      	cbz	r5, bc040 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   bc02c:	782b      	ldrb	r3, [r5, #0]
   bc02e:	b13b      	cbz	r3, bc040 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   bc030:	4904      	ldr	r1, [pc, #16]	; (bc044 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   bc032:	4620      	mov	r0, r4
   bc034:	f003 fc50 	bl	bf8d8 <_ZN6String6concatEPKc>
   bc038:	4629      	mov	r1, r5
   bc03a:	4620      	mov	r0, r4
   bc03c:	f003 fc4c 	bl	bf8d8 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   bc040:	4620      	mov	r0, r4
   bc042:	bd38      	pop	{r3, r4, r5, pc}
   bc044:	000c50e4 	.word	0x000c50e4

000bc048 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   bc048:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bc04a:	4605      	mov	r5, r0
   bc04c:	460e      	mov	r6, r1
   bc04e:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   bc050:	6949      	ldr	r1, [r1, #20]
   bc052:	4668      	mov	r0, sp
   bc054:	f003 fcc6 	bl	bf9e4 <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   bc058:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   bc05a:	b904      	cbnz	r4, bc05e <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   bc05c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bc05e:	4622      	mov	r2, r4
   bc060:	4628      	mov	r0, r5
   bc062:	f7ff ffdd 	bl	bc020 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   bc066:	4668      	mov	r0, sp
   bc068:	f003 fb64 	bl	bf734 <_ZN6StringD1Ev>
}
   bc06c:	4628      	mov	r0, r5
   bc06e:	b004      	add	sp, #16
   bc070:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc074 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bc074:	b570      	push	{r4, r5, r6, lr}
   bc076:	460c      	mov	r4, r1
   bc078:	b08e      	sub	sp, #56	; 0x38
    String result;
   bc07a:	491a      	ldr	r1, [pc, #104]	; (bc0e4 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bc07c:	e9cd 3200 	strd	r3, r2, [sp]
   bc080:	4605      	mov	r5, r0
    String result;
   bc082:	f003 fba2 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   bc086:	68e0      	ldr	r0, [r4, #12]
   bc088:	69e1      	ldr	r1, [r4, #28]
   bc08a:	4401      	add	r1, r0
   bc08c:	3104      	adds	r1, #4
   bc08e:	4628      	mov	r0, r5
   bc090:	f003 fb6e 	bl	bf770 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   bc094:	1d21      	adds	r1, r4, #4
   bc096:	a806      	add	r0, sp, #24
   bc098:	f003 fbe2 	bl	bf860 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   bc09c:	4912      	ldr	r1, [pc, #72]	; (bc0e8 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   bc09e:	a802      	add	r0, sp, #8
   bc0a0:	f003 fb93 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
   bc0a4:	a902      	add	r1, sp, #8
   bc0a6:	a806      	add	r0, sp, #24
   bc0a8:	f003 fc34 	bl	bf914 <_ZplRK15StringSumHelperRK6String>
   bc0ac:	e9dd 3200 	ldrd	r3, r2, [sp]
   bc0b0:	4606      	mov	r6, r0
   bc0b2:	4621      	mov	r1, r4
   bc0b4:	a80a      	add	r0, sp, #40	; 0x28
   bc0b6:	f7ff ffc7 	bl	bc048 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   bc0ba:	a90a      	add	r1, sp, #40	; 0x28
   bc0bc:	4630      	mov	r0, r6
   bc0be:	f003 fc29 	bl	bf914 <_ZplRK15StringSumHelperRK6String>
   bc0c2:	4601      	mov	r1, r0
   bc0c4:	4628      	mov	r0, r5
   bc0c6:	f003 fbbc 	bl	bf842 <_ZN6StringaSERKS_>
   bc0ca:	a80a      	add	r0, sp, #40	; 0x28
   bc0cc:	f003 fb32 	bl	bf734 <_ZN6StringD1Ev>
   bc0d0:	a802      	add	r0, sp, #8
   bc0d2:	f003 fb2f 	bl	bf734 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bc0d6:	a806      	add	r0, sp, #24
   bc0d8:	f003 fb2c 	bl	bf734 <_ZN6StringD1Ev>
}
   bc0dc:	4628      	mov	r0, r5
   bc0de:	b00e      	add	sp, #56	; 0x38
   bc0e0:	bd70      	pop	{r4, r5, r6, pc}
   bc0e2:	bf00      	nop
   bc0e4:	000c4fe0 	.word	0x000c4fe0
   bc0e8:	000c4ce5 	.word	0x000c4ce5

000bc0ec <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bc0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   bc0f0:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bc0f2:	b08e      	sub	sp, #56	; 0x38
   bc0f4:	4605      	mov	r5, r0
   bc0f6:	460f      	mov	r7, r1
    if (allExtensions) {
   bc0f8:	2a00      	cmp	r2, #0
   bc0fa:	d04a      	beq.n	bc192 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   bc0fc:	6840      	ldr	r0, [r0, #4]
   bc0fe:	f000 fd71 	bl	bcbe4 <opendir>
        if (dir) {
   bc102:	4606      	mov	r6, r0
   bc104:	2800      	cmp	r0, #0
   bc106:	d054      	beq.n	bc1b2 <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   bc108:	f8df a0b4 	ldr.w	sl, [pc, #180]	; bc1c0 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   bc10c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; bc1bc <_ZN14SequentialFile13removeFileNumEib+0xd0>
   bc110:	f8df 80a4 	ldr.w	r8, [pc, #164]	; bc1b8 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   bc114:	4630      	mov	r0, r6
   bc116:	f000 fd6d 	bl	bcbf4 <readdir>
                if (!ent) {
   bc11a:	2800      	cmp	r0, #0
   bc11c:	d033      	beq.n	bc186 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   bc11e:	7a82      	ldrb	r2, [r0, #10]
   bc120:	2a08      	cmp	r2, #8
   bc122:	d1f7      	bne.n	bc114 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   bc124:	f100 040b 	add.w	r4, r0, #11
   bc128:	6969      	ldr	r1, [r5, #20]
   bc12a:	aa01      	add	r2, sp, #4
   bc12c:	4620      	mov	r0, r4
   bc12e:	f000 ff9f 	bl	bd070 <sscanf>
   bc132:	2801      	cmp	r0, #1
   bc134:	d1ee      	bne.n	bc114 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   bc136:	9b01      	ldr	r3, [sp, #4]
   bc138:	42bb      	cmp	r3, r7
   bc13a:	d1eb      	bne.n	bc114 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   bc13c:	1d29      	adds	r1, r5, #4
   bc13e:	a80a      	add	r0, sp, #40	; 0x28
   bc140:	f003 fb8e 	bl	bf860 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   bc144:	4651      	mov	r1, sl
   bc146:	a806      	add	r0, sp, #24
   bc148:	f003 fb3f 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
   bc14c:	a906      	add	r1, sp, #24
   bc14e:	a80a      	add	r0, sp, #40	; 0x28
   bc150:	f003 fbe0 	bl	bf914 <_ZplRK15StringSumHelperRK6String>
   bc154:	4621      	mov	r1, r4
   bc156:	f003 fbe9 	bl	bf92c <_ZplRK15StringSumHelperPKc>
   bc15a:	4601      	mov	r1, r0
   bc15c:	a802      	add	r0, sp, #8
   bc15e:	f003 fb7f 	bl	bf860 <_ZN6StringC1ERKS_>
   bc162:	a806      	add	r0, sp, #24
   bc164:	f003 fae6 	bl	bf734 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bc168:	a80a      	add	r0, sp, #40	; 0x28
   bc16a:	f003 fae3 	bl	bf734 <_ZN6StringD1Ev>
                        unlink(path);
   bc16e:	9802      	ldr	r0, [sp, #8]
   bc170:	f005 ffd4 	bl	c211c <unlink>
                        _log.trace("removed %s", path.c_str());
   bc174:	4640      	mov	r0, r8
   bc176:	9a02      	ldr	r2, [sp, #8]
   bc178:	4649      	mov	r1, r9
   bc17a:	f7fb fb2f 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   bc17e:	a802      	add	r0, sp, #8
   bc180:	f003 fad8 	bl	bf734 <_ZN6StringD1Ev>
                    continue;
   bc184:	e7c6      	b.n	bc114 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   bc186:	4630      	mov	r0, r6
}
   bc188:	b00e      	add	sp, #56	; 0x38
   bc18a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   bc18e:	f000 bd39 	b.w	bcc04 <closedir>
        String path = getPathForFileNum(fileNum); 
   bc192:	460a      	mov	r2, r1
   bc194:	4601      	mov	r1, r0
   bc196:	a80a      	add	r0, sp, #40	; 0x28
   bc198:	f7ff ff6c 	bl	bc074 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   bc19c:	980a      	ldr	r0, [sp, #40]	; 0x28
   bc19e:	f005 ffbd 	bl	c211c <unlink>
        _log.trace("removed %s", path.c_str());
   bc1a2:	4805      	ldr	r0, [pc, #20]	; (bc1b8 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   bc1a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bc1a6:	4905      	ldr	r1, [pc, #20]	; (bc1bc <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   bc1a8:	f7fb fb18 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   bc1ac:	a80a      	add	r0, sp, #40	; 0x28
   bc1ae:	f003 fac1 	bl	bf734 <_ZN6StringD1Ev>
}
   bc1b2:	b00e      	add	sp, #56	; 0x38
   bc1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc1b8:	2003e60c 	.word	0x2003e60c
   bc1bc:	000c4ce7 	.word	0x000c4ce7
   bc1c0:	000c4ce5 	.word	0x000c4ce5

000bc1c4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   bc1c4:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   bc1c6:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   bc1c8:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   bc1ca:	b183      	cbz	r3, bc1ee <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   bc1cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   bc1ce:	6945      	ldr	r5, [r0, #20]
   bc1d0:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   bc1d2:	42ae      	cmp	r6, r5
   bc1d4:	d906      	bls.n	bc1e4 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   bc1d6:	f855 0b04 	ldr.w	r0, [r5], #4
   bc1da:	f44f 7100 	mov.w	r1, #512	; 0x200
   bc1de:	f7f7 ff5e 	bl	b409e <_ZdlPvj>
   bc1e2:	e7f6      	b.n	bc1d2 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   bc1e4:	6861      	ldr	r1, [r4, #4]
   bc1e6:	6820      	ldr	r0, [r4, #0]
   bc1e8:	0089      	lsls	r1, r1, #2
   bc1ea:	f7f7 ff58 	bl	b409e <_ZdlPvj>
    }
   bc1ee:	4620      	mov	r0, r4
   bc1f0:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc1f4 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   bc1f4:	b510      	push	{r4, lr}
   bc1f6:	4b09      	ldr	r3, [pc, #36]	; (bc21c <_ZN14SequentialFileD1Ev+0x28>)
   bc1f8:	4604      	mov	r4, r0
   bc1fa:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   bc1fe:	f7ff ffe1 	bl	bc1c4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   bc202:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bc206:	f003 fa95 	bl	bf734 <_ZN6StringD1Ev>
   bc20a:	f104 0014 	add.w	r0, r4, #20
   bc20e:	f003 fa91 	bl	bf734 <_ZN6StringD1Ev>
   bc212:	1d20      	adds	r0, r4, #4
   bc214:	f003 fa8e 	bl	bf734 <_ZN6StringD1Ev>
}
   bc218:	4620      	mov	r0, r4
   bc21a:	bd10      	pop	{r4, pc}
   bc21c:	000c4de0 	.word	0x000c4de0

000bc220 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   bc220:	b510      	push	{r4, lr}
   bc222:	4604      	mov	r4, r0
}
   bc224:	f7ff ffe6 	bl	bc1f4 <_ZN14SequentialFileD1Ev>
   bc228:	4620      	mov	r0, r4
   bc22a:	2168      	movs	r1, #104	; 0x68
   bc22c:	f7f7 ff37 	bl	b409e <_ZdlPvj>
   bc230:	4620      	mov	r0, r4
   bc232:	bd10      	pop	{r4, pc}

000bc234 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   bc234:	68c3      	ldr	r3, [r0, #12]
   bc236:	68ca      	ldr	r2, [r1, #12]
   bc238:	1a9b      	subs	r3, r3, r2
   bc23a:	109b      	asrs	r3, r3, #2
   bc23c:	1e5a      	subs	r2, r3, #1
   bc23e:	e9d0 3000 	ldrd	r3, r0, [r0]
   bc242:	1a1b      	subs	r3, r3, r0
   bc244:	109b      	asrs	r3, r3, #2
   bc246:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   bc24a:	6888      	ldr	r0, [r1, #8]
   bc24c:	680a      	ldr	r2, [r1, #0]
   bc24e:	1a80      	subs	r0, r0, r2
      }
   bc250:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   bc254:	4770      	bx	lr
	...

000bc258 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   bc258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   bc25c:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   bc25e:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   bc260:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   bc262:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   bc264:	4604      	mov	r4, r0
   bc266:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   bc268:	d007      	beq.n	bc27a <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bc26a:	b10b      	cbz	r3, bc270 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   bc26c:	680a      	ldr	r2, [r1, #0]
   bc26e:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   bc270:	69a3      	ldr	r3, [r4, #24]
   bc272:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   bc274:	61a3      	str	r3, [r4, #24]
      }
   bc276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bc27a:	f100 0108 	add.w	r1, r0, #8
   bc27e:	3018      	adds	r0, #24
   bc280:	f7ff ffd8 	bl	bc234 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   bc284:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   bc288:	4298      	cmp	r0, r3
   bc28a:	d102      	bne.n	bc292 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   bc28c:	4838      	ldr	r0, [pc, #224]	; (bc370 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   bc28e:	f004 f91c 	bl	c04ca <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bc292:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bc294:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bc296:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bc298:	1a11      	subs	r1, r2, r0
   bc29a:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bc29e:	2901      	cmp	r1, #1
   bc2a0:	d825      	bhi.n	bc2ee <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   bc2a2:	6961      	ldr	r1, [r4, #20]
   bc2a4:	eba2 0801 	sub.w	r8, r2, r1
   bc2a8:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   bc2ac:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   bc2ae:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   bc2b2:	d936      	bls.n	bc322 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   bc2b4:	1b5d      	subs	r5, r3, r5
   bc2b6:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   bc2b8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   bc2bc:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   bc2be:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   bc2c0:	eba3 0201 	sub.w	r2, r3, r1
   bc2c4:	d926      	bls.n	bc314 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   bc2c6:	428b      	cmp	r3, r1
   bc2c8:	d002      	beq.n	bc2d0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bc2ca:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bc2cc:	f004 fe8e 	bl	c0fec <memmove>
	_M_node = __new_node;
   bc2d0:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   bc2d2:	682b      	ldr	r3, [r5, #0]
   bc2d4:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc2d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bc2da:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   bc2dc:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   bc2e0:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bc2e2:	f855 3008 	ldr.w	r3, [r5, r8]
   bc2e6:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc2e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bc2ec:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bc2ee:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   bc2f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
   bc2f4:	f7f7 fecf 	bl	b4096 <_Znwj>
   bc2f8:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   bc2fa:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bc2fc:	b10b      	cbz	r3, bc302 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   bc2fe:	683a      	ldr	r2, [r7, #0]
   bc300:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   bc302:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc304:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bc306:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bc308:	685b      	ldr	r3, [r3, #4]
   bc30a:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc30c:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bc310:	6222      	str	r2, [r4, #32]
   bc312:	e7af      	b.n	bc274 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   bc314:	428b      	cmp	r3, r1
   bc316:	d0db      	beq.n	bc2d0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bc318:	f108 0004 	add.w	r0, r8, #4
   bc31c:	1a80      	subs	r0, r0, r2
   bc31e:	4428      	add	r0, r5
   bc320:	e7d4      	b.n	bc2cc <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   bc322:	f103 0902 	add.w	r9, r3, #2
   bc326:	2b01      	cmp	r3, #1
   bc328:	bf2c      	ite	cs
   bc32a:	4499      	addcs	r9, r3
   bc32c:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   bc330:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   bc334:	d301      	bcc.n	bc33a <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   bc336:	f004 f8c5 	bl	c04c4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bc33a:	ea4f 0089 	mov.w	r0, r9, lsl #2
   bc33e:	f7f7 feaa 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   bc342:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bc344:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bc346:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   bc34a:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bc34c:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   bc34e:	4291      	cmp	r1, r2
   bc350:	4682      	mov	sl, r0
   bc352:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   bc356:	d003      	beq.n	bc360 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bc358:	1a52      	subs	r2, r2, r1
   bc35a:	4628      	mov	r0, r5
   bc35c:	f004 fe46 	bl	c0fec <memmove>
	::operator delete(__p
   bc360:	6861      	ldr	r1, [r4, #4]
   bc362:	6820      	ldr	r0, [r4, #0]
   bc364:	0089      	lsls	r1, r1, #2
   bc366:	f7f7 fe9a 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   bc36a:	e9c4 a900 	strd	sl, r9, [r4]
   bc36e:	e7af      	b.n	bc2d0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   bc370:	000c4969 	.word	0x000c4969

000bc374 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   bc374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   bc378:	68c3      	ldr	r3, [r0, #12]
   bc37a:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   bc37c:	b086      	sub	sp, #24
   bc37e:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   bc380:	d808      	bhi.n	bc394 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   bc382:	4934      	ldr	r1, [pc, #208]	; (bc454 <_ZN14SequentialFile7scanDirEv+0xe0>)
   bc384:	4834      	ldr	r0, [pc, #208]	; (bc458 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bc386:	f7fb fa1b 	bl	b77c0 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bc38a:	2600      	movs	r6, #0
}
   bc38c:	4630      	mov	r0, r6
   bc38e:	b006      	add	sp, #24
   bc390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   bc394:	6840      	ldr	r0, [r0, #4]
   bc396:	f7ff fe01 	bl	bbf9c <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   bc39a:	4606      	mov	r6, r0
   bc39c:	2800      	cmp	r0, #0
   bc39e:	d0f4      	beq.n	bc38a <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   bc3a0:	6963      	ldr	r3, [r4, #20]
   bc3a2:	6862      	ldr	r2, [r4, #4]
   bc3a4:	492d      	ldr	r1, [pc, #180]	; (bc45c <_ZN14SequentialFile7scanDirEv+0xe8>)
   bc3a6:	482c      	ldr	r0, [pc, #176]	; (bc458 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bc3a8:	f7fb fa18 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   bc3ac:	6860      	ldr	r0, [r4, #4]
   bc3ae:	f000 fc19 	bl	bcbe4 <opendir>
    if (!dir) {
   bc3b2:	4607      	mov	r7, r0
   bc3b4:	2800      	cmp	r0, #0
   bc3b6:	d0e8      	beq.n	bc38a <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   bc3b8:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bc3ba:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bc460 <_ZN14SequentialFile7scanDirEv+0xec>
   bc3be:	f8df 8098 	ldr.w	r8, [pc, #152]	; bc458 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   bc3c2:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   bc3c4:	4638      	mov	r0, r7
   bc3c6:	f000 fc15 	bl	bcbf4 <readdir>
        if (!ent) {
   bc3ca:	4605      	mov	r5, r0
   bc3cc:	2800      	cmp	r0, #0
   bc3ce:	d039      	beq.n	bc444 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   bc3d0:	7a83      	ldrb	r3, [r0, #10]
   bc3d2:	2b08      	cmp	r3, #8
   bc3d4:	d1f6      	bne.n	bc3c4 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   bc3d6:	350b      	adds	r5, #11
   bc3d8:	6961      	ldr	r1, [r4, #20]
   bc3da:	aa01      	add	r2, sp, #4
   bc3dc:	4628      	mov	r0, r5
   bc3de:	f000 fe47 	bl	bd070 <sscanf>
   bc3e2:	2801      	cmp	r0, #1
   bc3e4:	d1ee      	bne.n	bc3c4 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   bc3e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bc3e8:	b17b      	cbz	r3, bc40a <_ZN14SequentialFile7scanDirEv+0x96>
   bc3ea:	4629      	mov	r1, r5
   bc3ec:	a802      	add	r0, sp, #8
   bc3ee:	f003 f9ec 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
   bc3f2:	f104 0124 	add.w	r1, r4, #36	; 0x24
   bc3f6:	a802      	add	r0, sp, #8
   bc3f8:	f003 fabf 	bl	bf97a <_ZNK6String8endsWithERKS_>
   bc3fc:	4682      	mov	sl, r0
   bc3fe:	a802      	add	r0, sp, #8
   bc400:	f003 f998 	bl	bf734 <_ZN6StringD1Ev>
   bc404:	f1ba 0f00 	cmp.w	sl, #0
   bc408:	d0dc      	beq.n	bc3c4 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   bc40a:	6823      	ldr	r3, [r4, #0]
   bc40c:	4629      	mov	r1, r5
   bc40e:	689b      	ldr	r3, [r3, #8]
   bc410:	4620      	mov	r0, r4
   bc412:	4798      	blx	r3
   bc414:	2800      	cmp	r0, #0
   bc416:	d0d5      	beq.n	bc3c4 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   bc418:	9a01      	ldr	r2, [sp, #4]
   bc41a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bc41c:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   bc41e:	bfb8      	it	lt
   bc420:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bc422:	462b      	mov	r3, r5
   bc424:	4649      	mov	r1, r9
   bc426:	4640      	mov	r0, r8
   bc428:	f7fb f9d8 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   bc42c:	4620      	mov	r0, r4
   bc42e:	f7ff fda5 	bl	bbf7c <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   bc432:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bc436:	a901      	add	r1, sp, #4
   bc438:	f7ff ff0e 	bl	bc258 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   bc43c:	4620      	mov	r0, r4
   bc43e:	f7ff fda9 	bl	bbf94 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   bc442:	e7bf      	b.n	bc3c4 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   bc444:	4638      	mov	r0, r7
   bc446:	f000 fbdd 	bl	bcc04 <closedir>
    scanDirCompleted = true;
   bc44a:	2301      	movs	r3, #1
   bc44c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   bc450:	e79c      	b.n	bc38c <_ZN14SequentialFile7scanDirEv+0x18>
   bc452:	bf00      	nop
   bc454:	000c4d65 	.word	0x000c4d65
   bc458:	2003e60c 	.word	0x2003e60c
   bc45c:	000c4d7a 	.word	0x000c4d7a
   bc460:	000c4d96 	.word	0x000c4d96

000bc464 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   bc464:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   bc466:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   bc46a:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bc46c:	b90b      	cbnz	r3, bc472 <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   bc46e:	f7ff ff81 	bl	bc374 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   bc472:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   bc474:	3001      	adds	r0, #1
   bc476:	63a0      	str	r0, [r4, #56]	; 0x38
}
   bc478:	bd10      	pop	{r4, pc}
	...

000bc47c <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   bc47c:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   bc47e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   bc482:	4604      	mov	r4, r0
   bc484:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   bc486:	b90b      	cbnz	r3, bc48c <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   bc488:	f7ff ff74 	bl	bc374 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   bc48c:	4620      	mov	r0, r4
   bc48e:	f7ff fd75 	bl	bbf7c <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   bc492:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   bc494:	6da2      	ldr	r2, [r4, #88]	; 0x58
   bc496:	429a      	cmp	r2, r3
   bc498:	d020      	beq.n	bc4dc <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   bc49a:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   bc49e:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   bc4a0:	b126      	cbz	r6, bc4ac <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   bc4a2:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   bc4a4:	4293      	cmp	r3, r2
   bc4a6:	d00c      	beq.n	bc4c2 <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   bc4a8:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   bc4aa:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   bc4ac:	4620      	mov	r0, r4
   bc4ae:	f7ff fd71 	bl	bbf94 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   bc4b2:	b125      	cbz	r5, bc4be <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   bc4b4:	490a      	ldr	r1, [pc, #40]	; (bc4e0 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   bc4b6:	480b      	ldr	r0, [pc, #44]	; (bc4e4 <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   bc4b8:	462a      	mov	r2, r5
   bc4ba:	f7fb f98f 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
}
   bc4be:	4628      	mov	r0, r5
   bc4c0:	bd70      	pop	{r4, r5, r6, pc}
   bc4c2:	f44f 7100 	mov.w	r1, #512	; 0x200
   bc4c6:	f7f7 fdea 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   bc4ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bc4cc:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bc4ce:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   bc4d0:	685b      	ldr	r3, [r3, #4]
   bc4d2:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc4d4:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bc4d8:	6522      	str	r2, [r4, #80]	; 0x50
   bc4da:	e7e6      	b.n	bc4aa <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   bc4dc:	2500      	movs	r5, #0
   bc4de:	e7e5      	b.n	bc4ac <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   bc4e0:	000c4dac 	.word	0x000c4dac
   bc4e4:	2003e60c 	.word	0x2003e60c

000bc4e8 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   bc4e8:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   bc4ea:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   bc4ee:	9101      	str	r1, [sp, #4]
   bc4f0:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bc4f2:	b90b      	cbnz	r3, bc4f8 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   bc4f4:	f7ff ff3e 	bl	bc374 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   bc4f8:	9b01      	ldr	r3, [sp, #4]
   bc4fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   bc4fc:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   bc4fe:	bfb8      	it	lt
   bc500:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   bc502:	4620      	mov	r0, r4
   bc504:	f7ff fd3a 	bl	bbf7c <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   bc508:	a901      	add	r1, sp, #4
   bc50a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bc50e:	f7ff fea3 	bl	bc258 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   bc512:	4620      	mov	r0, r4
   bc514:	f7ff fd3e 	bl	bbf94 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bc518:	b002      	add	sp, #8
   bc51a:	bd10      	pop	{r4, pc}

000bc51c <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   bc51c:	b538      	push	{r3, r4, r5, lr}
   bc51e:	4604      	mov	r4, r0
    queueMutexLock();
   bc520:	f7ff fd2c 	bl	bbf7c <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bc524:	f104 0148 	add.w	r1, r4, #72	; 0x48
   bc528:	f104 0058 	add.w	r0, r4, #88	; 0x58
   bc52c:	f7ff fe82 	bl	bc234 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   bc530:	4605      	mov	r5, r0
    queueMutexUnlock();
   bc532:	4620      	mov	r0, r4
   bc534:	f7ff fd2e 	bl	bbf94 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bc538:	4628      	mov	r0, r5
   bc53a:	bd38      	pop	{r3, r4, r5, pc}

000bc53c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   bc53c:	4b01      	ldr	r3, [pc, #4]	; (bc544 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   bc53e:	4a02      	ldr	r2, [pc, #8]	; (bc548 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   bc540:	601a      	str	r2, [r3, #0]
}
   bc542:	4770      	bx	lr
   bc544:	2003e60c 	.word	0x2003e60c
   bc548:	000c4dc9 	.word	0x000c4dc9

000bc54c <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   bc54c:	4770      	bx	lr

000bc54e <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   bc54e:	6803      	ldr	r3, [r0, #0]
   bc550:	685b      	ldr	r3, [r3, #4]
   bc552:	4718      	bx	r3

000bc554 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bc554:	b510      	push	{r4, lr}
    if (lastUpdate) {
   bc556:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bc558:	4604      	mov	r4, r0
    if (lastUpdate) {
   bc55a:	b133      	cbz	r3, bc56a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bc55c:	b131      	cbz	r1, bc56c <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   bc55e:	6823      	ldr	r3, [r4, #0]
   bc560:	4620      	mov	r0, r4
   bc562:	689b      	ldr	r3, [r3, #8]
   bc564:	4798      	blx	r3
            lastUpdate = 0;
   bc566:	2300      	movs	r3, #0
   bc568:	61a3      	str	r3, [r4, #24]
        }
    }
}
   bc56a:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bc56c:	f000 f9c2 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bc570:	69a3      	ldr	r3, [r4, #24]
   bc572:	1ac0      	subs	r0, r0, r3
   bc574:	69e3      	ldr	r3, [r4, #28]
   bc576:	4298      	cmp	r0, r3
   bc578:	d2f1      	bcs.n	bc55e <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   bc57a:	e7f6      	b.n	bc56a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000bc57c <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bc57c:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   bc57e:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bc580:	4604      	mov	r4, r0
    if (saveDelayMs) {
   bc582:	b11b      	cbz	r3, bc58c <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   bc584:	f000 f9b6 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   bc588:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   bc58a:	bd10      	pop	{r4, pc}
        save();
   bc58c:	6803      	ldr	r3, [r0, #0]
}
   bc58e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   bc592:	689b      	ldr	r3, [r3, #8]
   bc594:	4718      	bx	r3

000bc596 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   bc596:	f000 b975 	b.w	bc884 <os_mutex_recursive_unlock>

000bc59a <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   bc59a:	b510      	push	{r4, lr}
   bc59c:	4604      	mov	r4, r0
   bc59e:	3004      	adds	r0, #4
   bc5a0:	f7f9 fe86 	bl	b62b0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   bc5a4:	6823      	ldr	r3, [r4, #0]
   bc5a6:	68e1      	ldr	r1, [r4, #12]
   bc5a8:	695b      	ldr	r3, [r3, #20]
   bc5aa:	4620      	mov	r0, r4
   bc5ac:	4798      	blx	r3
   bc5ae:	b918      	cbnz	r0, bc5b8 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   bc5b0:	6823      	ldr	r3, [r4, #0]
   bc5b2:	4620      	mov	r0, r4
   bc5b4:	699b      	ldr	r3, [r3, #24]
   bc5b6:	4798      	blx	r3
      { _M_device.unlock(); }
   bc5b8:	6860      	ldr	r0, [r4, #4]
   bc5ba:	f7ff ffec 	bl	bc596 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bc5be:	2001      	movs	r0, #1
   bc5c0:	bd10      	pop	{r4, pc}

000bc5c2 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>:



bool StorageHelperRK::PersistentDataBase::getValueString(size_t offset, size_t size, String &value) const {
   bc5c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc5c4:	4605      	mov	r5, r0
      { _M_device.lock(); }
   bc5c6:	3004      	adds	r0, #4
   bc5c8:	4614      	mov	r4, r2
   bc5ca:	460e      	mov	r6, r1
   bc5cc:	461f      	mov	r7, r3
   bc5ce:	f7f9 fe6f 	bl	b62b0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
    bool result = false;

    WITH_LOCK(*this) {
        if (offset <= (savedDataSize - (size - 1))) {
   bc5d2:	68ea      	ldr	r2, [r5, #12]
   bc5d4:	f1c4 0401 	rsb	r4, r4, #1
   bc5d8:	4414      	add	r4, r2
   bc5da:	42b4      	cmp	r4, r6
   bc5dc:	d30a      	bcc.n	bc5f4 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x32>
            const char *p = (const char *)savedDataHeader;
   bc5de:	68a9      	ldr	r1, [r5, #8]
            p += offset;
            value = p; // copies string
   bc5e0:	4638      	mov	r0, r7
   bc5e2:	4431      	add	r1, r6
   bc5e4:	f003 f94f 	bl	bf886 <_ZN6StringaSEPKc>
            result = true;
   bc5e8:	2401      	movs	r4, #1
      { _M_device.unlock(); }
   bc5ea:	6868      	ldr	r0, [r5, #4]
   bc5ec:	f7ff ffd3 	bl	bc596 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
        }
    }
    return result;
}
   bc5f0:	4620      	mov	r0, r4
   bc5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool result = false;
   bc5f4:	2400      	movs	r4, #0
   bc5f6:	e7f8      	b.n	bc5ea <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x28>

000bc5f8 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   bc5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc5fa:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   bc5fe:	4f18      	ldr	r7, [pc, #96]	; (bc660 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   bc600:	4e18      	ldr	r6, [pc, #96]	; (bc664 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   bc602:	4d19      	ldr	r5, [pc, #100]	; (bc668 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   bc604:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   bc606:	42a0      	cmp	r0, r4
   bc608:	d00c      	beq.n	bc624 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   bc60a:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   bc60e:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   bc610:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   bc614:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   bc616:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   bc618:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   bc61c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   bc620:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   bc622:	e7f0      	b.n	bc606 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   bc624:	f001 0403 	and.w	r4, r1, #3
   bc628:	4404      	add	r4, r0
    k = 0;
   bc62a:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   bc62c:	42a0      	cmp	r0, r4
   bc62e:	d004      	beq.n	bc63a <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   bc630:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   bc634:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   bc638:	e7f8      	b.n	bc62c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   bc63a:	4809      	ldr	r0, [pc, #36]	; (bc660 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   bc63c:	4343      	muls	r3, r0
        k *= 0x1b873593;
   bc63e:	4809      	ldr	r0, [pc, #36]	; (bc664 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   bc640:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   bc644:	404a      	eors	r2, r1
        k *= 0x1b873593;
   bc646:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   bc648:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   bc64a:	4b08      	ldr	r3, [pc, #32]	; (bc66c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   bc64c:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   bc650:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   bc652:	4b07      	ldr	r3, [pc, #28]	; (bc670 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   bc654:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   bc658:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   bc65a:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   bc65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bc660:	cc9e2d51 	.word	0xcc9e2d51
   bc664:	1b873593 	.word	0x1b873593
   bc668:	e6546b64 	.word	0xe6546b64
   bc66c:	85ebca6b 	.word	0x85ebca6b
   bc670:	c2b2ae35 	.word	0xc2b2ae35

000bc674 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   bc674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc676:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bc678:	3004      	adds	r0, #4
   bc67a:	f7f9 fe19 	bl	b62b0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   bc67e:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   bc680:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   bc682:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   bc684:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bc686:	68a6      	ldr	r6, [r4, #8]
   bc688:	4a05      	ldr	r2, [pc, #20]	; (bc6a0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   bc68a:	88f1      	ldrh	r1, [r6, #6]
   bc68c:	4630      	mov	r0, r6
   bc68e:	f7ff ffb3 	bl	bc5f8 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   bc692:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bc694:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   bc696:	6860      	ldr	r0, [r4, #4]
   bc698:	f7ff ff7d 	bl	bc596 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bc69c:	4628      	mov	r0, r5
   bc69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc6a0:	851c2a3f 	.word	0x851c2a3f

000bc6a4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   bc6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc6a8:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bc6aa:	3004      	adds	r0, #4
   bc6ac:	4690      	mov	r8, r2
   bc6ae:	460d      	mov	r5, r1
   bc6b0:	461f      	mov	r7, r3
   bc6b2:	f7f9 fdfd 	bl	b62b0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   bc6b6:	68e2      	ldr	r2, [r4, #12]
   bc6b8:	f1c8 0301 	rsb	r3, r8, #1
   bc6bc:	4413      	add	r3, r2
   bc6be:	42ab      	cmp	r3, r5
   bc6c0:	d31f      	bcc.n	bc702 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
   bc6c2:	4638      	mov	r0, r7
   bc6c4:	f004 fd77 	bl	c11b6 <strlen>
   bc6c8:	4540      	cmp	r0, r8
   bc6ca:	d21a      	bcs.n	bc702 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
            char *p = (char *)savedDataHeader;
   bc6cc:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   bc6ce:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   bc6d0:	4629      	mov	r1, r5
   bc6d2:	4638      	mov	r0, r7
   bc6d4:	f004 fd3f 	bl	c1156 <strcmp>
   bc6d8:	b188      	cbz	r0, bc6fe <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5a>
                memset(p, 0, size);
   bc6da:	4642      	mov	r2, r8
   bc6dc:	2100      	movs	r1, #0
   bc6de:	4628      	mov	r0, r5
   bc6e0:	f004 fc9e 	bl	c1020 <memset>
                strcpy(p, value);
   bc6e4:	4639      	mov	r1, r7
   bc6e6:	4628      	mov	r0, r5
   bc6e8:	f004 fd3f 	bl	c116a <strcpy>
                savedDataHeader->hash = getHash();
   bc6ec:	4620      	mov	r0, r4
   bc6ee:	68a5      	ldr	r5, [r4, #8]
   bc6f0:	f7ff ffc0 	bl	bc674 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bc6f4:	60a8      	str	r0, [r5, #8]
                saveOrDefer();
   bc6f6:	6823      	ldr	r3, [r4, #0]
   bc6f8:	4620      	mov	r0, r4
   bc6fa:	691b      	ldr	r3, [r3, #16]
   bc6fc:	4798      	blx	r3
            result = true;
   bc6fe:	2501      	movs	r5, #1
   bc700:	e000      	b.n	bc704 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x60>
    bool result = false;
   bc702:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   bc704:	6860      	ldr	r0, [r4, #4]
   bc706:	f7ff ff46 	bl	bc596 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bc70a:	4628      	mov	r0, r5
   bc70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bc710 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   bc710:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc712:	460d      	mov	r5, r1
   bc714:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   bc716:	f7ff ffad 	bl	bc674 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   bc71a:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   bc71c:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   bc71e:	d923      	bls.n	bc768 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   bc720:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   bc722:	6922      	ldr	r2, [r4, #16]
   bc724:	6819      	ldr	r1, [r3, #0]
   bc726:	4291      	cmp	r1, r2
   bc728:	d11f      	bne.n	bc76a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   bc72a:	8899      	ldrh	r1, [r3, #4]
   bc72c:	8aa2      	ldrh	r2, [r4, #20]
   bc72e:	4291      	cmp	r1, r2
   bc730:	d11b      	bne.n	bc76a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   bc732:	88d9      	ldrh	r1, [r3, #6]
   bc734:	b2aa      	uxth	r2, r5
   bc736:	4291      	cmp	r1, r2
   bc738:	d817      	bhi.n	bc76a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   bc73a:	689a      	ldr	r2, [r3, #8]
   bc73c:	4282      	cmp	r2, r0
   bc73e:	d114      	bne.n	bc76a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   bc740:	68e2      	ldr	r2, [r4, #12]
   bc742:	42aa      	cmp	r2, r5
   bc744:	d905      	bls.n	bc752 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   bc746:	2100      	movs	r1, #0
   bc748:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   bc74a:	68e2      	ldr	r2, [r4, #12]
   bc74c:	3501      	adds	r5, #1
   bc74e:	42aa      	cmp	r2, r5
   bc750:	d8fa      	bhi.n	bc748 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   bc752:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   bc756:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   bc758:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   bc75a:	68a5      	ldr	r5, [r4, #8]
   bc75c:	f7ff ff8a 	bl	bc674 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bc760:	60a8      	str	r0, [r5, #8]
        isValid = true;
   bc762:	2001      	movs	r0, #1
}
   bc764:	b002      	add	sp, #8
   bc766:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   bc768:	b19d      	cbz	r5, bc792 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   bc76a:	68a1      	ldr	r1, [r4, #8]
   bc76c:	680a      	ldr	r2, [r1, #0]
   bc76e:	b192      	cbz	r2, bc796 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   bc770:	6888      	ldr	r0, [r1, #8]
   bc772:	888b      	ldrh	r3, [r1, #4]
   bc774:	9001      	str	r0, [sp, #4]
   bc776:	88c9      	ldrh	r1, [r1, #6]
   bc778:	4808      	ldr	r0, [pc, #32]	; (bc79c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bc77a:	9100      	str	r1, [sp, #0]
   bc77c:	4908      	ldr	r1, [pc, #32]	; (bc7a0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   bc77e:	f7fb f82d 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   bc782:	e9cd 5600 	strd	r5, r6, [sp]
   bc786:	8aa3      	ldrh	r3, [r4, #20]
   bc788:	6922      	ldr	r2, [r4, #16]
   bc78a:	4906      	ldr	r1, [pc, #24]	; (bc7a4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   bc78c:	4803      	ldr	r0, [pc, #12]	; (bc79c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bc78e:	f7fb f825 	bl	b77dc <_ZNK5spark6Logger5traceEPKcz>
   bc792:	2000      	movs	r0, #0
   bc794:	e7e6      	b.n	bc764 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bc796:	4610      	mov	r0, r2
   bc798:	e7e4      	b.n	bc764 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bc79a:	bf00      	nop
   bc79c:	2003e658 	.word	0x2003e658
   bc7a0:	000c4dec 	.word	0x000c4dec
   bc7a4:	000c4e1d 	.word	0x000c4e1d

000bc7a8 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   bc7a8:	b538      	push	{r3, r4, r5, lr}
   bc7aa:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   bc7ac:	68c2      	ldr	r2, [r0, #12]
   bc7ae:	6880      	ldr	r0, [r0, #8]
   bc7b0:	2100      	movs	r1, #0
   bc7b2:	f004 fc35 	bl	c1020 <memset>
    savedDataHeader->magic = savedDataMagic;
   bc7b6:	68a3      	ldr	r3, [r4, #8]
   bc7b8:	6922      	ldr	r2, [r4, #16]
   bc7ba:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   bc7bc:	68a3      	ldr	r3, [r4, #8]
   bc7be:	8aa2      	ldrh	r2, [r4, #20]
   bc7c0:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   bc7c2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   bc7c6:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   bc7c8:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   bc7ca:	68a5      	ldr	r5, [r4, #8]
   bc7cc:	f7ff ff52 	bl	bc674 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bc7d0:	60a8      	str	r0, [r5, #8]
}
   bc7d2:	bd38      	pop	{r3, r4, r5, pc}

000bc7d4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   bc7d4:	b508      	push	{r3, lr}
   bc7d6:	4b02      	ldr	r3, [pc, #8]	; (bc7e0 <cellular_signal+0xc>)
   bc7d8:	681b      	ldr	r3, [r3, #0]
   bc7da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc7dc:	9301      	str	r3, [sp, #4]
   bc7de:	bd08      	pop	{r3, pc}
   bc7e0:	00030274 	.word	0x00030274

000bc7e4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   bc7e4:	b508      	push	{r3, lr}
   bc7e6:	4b02      	ldr	r3, [pc, #8]	; (bc7f0 <os_thread_create+0xc>)
   bc7e8:	681b      	ldr	r3, [r3, #0]
   bc7ea:	685b      	ldr	r3, [r3, #4]
   bc7ec:	9301      	str	r3, [sp, #4]
   bc7ee:	bd08      	pop	{r3, pc}
   bc7f0:	00030248 	.word	0x00030248

000bc7f4 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   bc7f4:	b508      	push	{r3, lr}
   bc7f6:	4b02      	ldr	r3, [pc, #8]	; (bc800 <os_thread_is_current+0xc>)
   bc7f8:	681b      	ldr	r3, [r3, #0]
   bc7fa:	689b      	ldr	r3, [r3, #8]
   bc7fc:	9301      	str	r3, [sp, #4]
   bc7fe:	bd08      	pop	{r3, pc}
   bc800:	00030248 	.word	0x00030248

000bc804 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   bc804:	b508      	push	{r3, lr}
   bc806:	4b02      	ldr	r3, [pc, #8]	; (bc810 <os_thread_join+0xc>)
   bc808:	681b      	ldr	r3, [r3, #0]
   bc80a:	691b      	ldr	r3, [r3, #16]
   bc80c:	9301      	str	r3, [sp, #4]
   bc80e:	bd08      	pop	{r3, pc}
   bc810:	00030248 	.word	0x00030248

000bc814 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   bc814:	b508      	push	{r3, lr}
   bc816:	4b02      	ldr	r3, [pc, #8]	; (bc820 <os_thread_cleanup+0xc>)
   bc818:	681b      	ldr	r3, [r3, #0]
   bc81a:	695b      	ldr	r3, [r3, #20]
   bc81c:	9301      	str	r3, [sp, #4]
   bc81e:	bd08      	pop	{r3, pc}
   bc820:	00030248 	.word	0x00030248

000bc824 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   bc824:	b508      	push	{r3, lr}
   bc826:	4b02      	ldr	r3, [pc, #8]	; (bc830 <os_mutex_create+0xc>)
   bc828:	681b      	ldr	r3, [r3, #0]
   bc82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc82c:	9301      	str	r3, [sp, #4]
   bc82e:	bd08      	pop	{r3, pc}
   bc830:	00030248 	.word	0x00030248

000bc834 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   bc834:	b508      	push	{r3, lr}
   bc836:	4b02      	ldr	r3, [pc, #8]	; (bc840 <os_mutex_lock+0xc>)
   bc838:	681b      	ldr	r3, [r3, #0]
   bc83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bc83c:	9301      	str	r3, [sp, #4]
   bc83e:	bd08      	pop	{r3, pc}
   bc840:	00030248 	.word	0x00030248

000bc844 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   bc844:	b508      	push	{r3, lr}
   bc846:	4b02      	ldr	r3, [pc, #8]	; (bc850 <os_mutex_unlock+0xc>)
   bc848:	681b      	ldr	r3, [r3, #0]
   bc84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc84c:	9301      	str	r3, [sp, #4]
   bc84e:	bd08      	pop	{r3, pc}
   bc850:	00030248 	.word	0x00030248

000bc854 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bc854:	b508      	push	{r3, lr}
   bc856:	4b02      	ldr	r3, [pc, #8]	; (bc860 <os_mutex_recursive_create+0xc>)
   bc858:	681b      	ldr	r3, [r3, #0]
   bc85a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc85c:	9301      	str	r3, [sp, #4]
   bc85e:	bd08      	pop	{r3, pc}
   bc860:	00030248 	.word	0x00030248

000bc864 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bc864:	b508      	push	{r3, lr}
   bc866:	4b02      	ldr	r3, [pc, #8]	; (bc870 <os_mutex_recursive_destroy+0xc>)
   bc868:	681b      	ldr	r3, [r3, #0]
   bc86a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bc86c:	9301      	str	r3, [sp, #4]
   bc86e:	bd08      	pop	{r3, pc}
   bc870:	00030248 	.word	0x00030248

000bc874 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bc874:	b508      	push	{r3, lr}
   bc876:	4b02      	ldr	r3, [pc, #8]	; (bc880 <os_mutex_recursive_lock+0xc>)
   bc878:	681b      	ldr	r3, [r3, #0]
   bc87a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc87c:	9301      	str	r3, [sp, #4]
   bc87e:	bd08      	pop	{r3, pc}
   bc880:	00030248 	.word	0x00030248

000bc884 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bc884:	b508      	push	{r3, lr}
   bc886:	4b02      	ldr	r3, [pc, #8]	; (bc890 <os_mutex_recursive_unlock+0xc>)
   bc888:	681b      	ldr	r3, [r3, #0]
   bc88a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc88c:	9301      	str	r3, [sp, #4]
   bc88e:	bd08      	pop	{r3, pc}
   bc890:	00030248 	.word	0x00030248

000bc894 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   bc894:	b508      	push	{r3, lr}
   bc896:	4b02      	ldr	r3, [pc, #8]	; (bc8a0 <os_thread_exit+0xc>)
   bc898:	681b      	ldr	r3, [r3, #0]
   bc89a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bc89c:	9301      	str	r3, [sp, #4]
   bc89e:	bd08      	pop	{r3, pc}
   bc8a0:	00030248 	.word	0x00030248

000bc8a4 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   bc8a4:	b508      	push	{r3, lr}
   bc8a6:	4b02      	ldr	r3, [pc, #8]	; (bc8b0 <HAL_Core_Runtime_Info+0xc>)
   bc8a8:	681b      	ldr	r3, [r3, #0]
   bc8aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc8ac:	9301      	str	r3, [sp, #4]
   bc8ae:	bd08      	pop	{r3, pc}
   bc8b0:	00030234 	.word	0x00030234

000bc8b4 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   bc8b4:	b508      	push	{r3, lr}
   bc8b6:	4b02      	ldr	r3, [pc, #8]	; (bc8c0 <HAL_Feature_Set+0xc>)
   bc8b8:	681b      	ldr	r3, [r3, #0]
   bc8ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bc8bc:	9301      	str	r3, [sp, #4]
   bc8be:	bd08      	pop	{r3, pc}
   bc8c0:	00030234 	.word	0x00030234

000bc8c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bc8c4:	b508      	push	{r3, lr}
   bc8c6:	4b02      	ldr	r3, [pc, #8]	; (bc8d0 <HAL_RNG_GetRandomNumber+0xc>)
   bc8c8:	681b      	ldr	r3, [r3, #0]
   bc8ca:	685b      	ldr	r3, [r3, #4]
   bc8cc:	9301      	str	r3, [sp, #4]
   bc8ce:	bd08      	pop	{r3, pc}
   bc8d0:	00030218 	.word	0x00030218

000bc8d4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   bc8d4:	b508      	push	{r3, lr}
   bc8d6:	4b02      	ldr	r3, [pc, #8]	; (bc8e0 <HAL_Delay_Milliseconds+0xc>)
   bc8d8:	681b      	ldr	r3, [r3, #0]
   bc8da:	689b      	ldr	r3, [r3, #8]
   bc8dc:	9301      	str	r3, [sp, #4]
   bc8de:	bd08      	pop	{r3, pc}
   bc8e0:	00030218 	.word	0x00030218

000bc8e4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bc8e4:	b508      	push	{r3, lr}
   bc8e6:	4b02      	ldr	r3, [pc, #8]	; (bc8f0 <HAL_Delay_Microseconds+0xc>)
   bc8e8:	681b      	ldr	r3, [r3, #0]
   bc8ea:	68db      	ldr	r3, [r3, #12]
   bc8ec:	9301      	str	r3, [sp, #4]
   bc8ee:	bd08      	pop	{r3, pc}
   bc8f0:	00030218 	.word	0x00030218

000bc8f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bc8f4:	b508      	push	{r3, lr}
   bc8f6:	4b02      	ldr	r3, [pc, #8]	; (bc900 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bc8f8:	681b      	ldr	r3, [r3, #0]
   bc8fa:	695b      	ldr	r3, [r3, #20]
   bc8fc:	9301      	str	r3, [sp, #4]
   bc8fe:	bd08      	pop	{r3, pc}
   bc900:	00030218 	.word	0x00030218

000bc904 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bc904:	b508      	push	{r3, lr}
   bc906:	4b02      	ldr	r3, [pc, #8]	; (bc910 <hal_rtc_time_is_valid+0xc>)
   bc908:	681b      	ldr	r3, [r3, #0]
   bc90a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bc90c:	9301      	str	r3, [sp, #4]
   bc90e:	bd08      	pop	{r3, pc}
   bc910:	00030218 	.word	0x00030218

000bc914 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   bc914:	b508      	push	{r3, lr}
   bc916:	4b02      	ldr	r3, [pc, #8]	; (bc920 <hal_timer_millis+0xc>)
   bc918:	681b      	ldr	r3, [r3, #0]
   bc91a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bc91c:	9301      	str	r3, [sp, #4]
   bc91e:	bd08      	pop	{r3, pc}
   bc920:	00030218 	.word	0x00030218

000bc924 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bc924:	b508      	push	{r3, lr}
   bc926:	4b02      	ldr	r3, [pc, #8]	; (bc930 <hal_rtc_get_time+0xc>)
   bc928:	681b      	ldr	r3, [r3, #0]
   bc92a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bc92c:	9301      	str	r3, [sp, #4]
   bc92e:	bd08      	pop	{r3, pc}
   bc930:	00030218 	.word	0x00030218

000bc934 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   bc934:	b508      	push	{r3, lr}
   bc936:	4b02      	ldr	r3, [pc, #8]	; (bc940 <hal_rtc_set_time+0xc>)
   bc938:	681b      	ldr	r3, [r3, #0]
   bc93a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   bc93c:	9301      	str	r3, [sp, #4]
   bc93e:	bd08      	pop	{r3, pc}
   bc940:	00030218 	.word	0x00030218

000bc944 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bc944:	b508      	push	{r3, lr}
   bc946:	4b02      	ldr	r3, [pc, #8]	; (bc950 <HAL_Validate_Pin_Function+0xc>)
   bc948:	681b      	ldr	r3, [r3, #0]
   bc94a:	685b      	ldr	r3, [r3, #4]
   bc94c:	9301      	str	r3, [sp, #4]
   bc94e:	bd08      	pop	{r3, pc}
   bc950:	0003022c 	.word	0x0003022c

000bc954 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bc954:	b508      	push	{r3, lr}
   bc956:	4b02      	ldr	r3, [pc, #8]	; (bc960 <HAL_Pin_Mode+0xc>)
   bc958:	681b      	ldr	r3, [r3, #0]
   bc95a:	689b      	ldr	r3, [r3, #8]
   bc95c:	9301      	str	r3, [sp, #4]
   bc95e:	bd08      	pop	{r3, pc}
   bc960:	0003022c 	.word	0x0003022c

000bc964 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bc964:	b508      	push	{r3, lr}
   bc966:	4b02      	ldr	r3, [pc, #8]	; (bc970 <HAL_Get_Pin_Mode+0xc>)
   bc968:	681b      	ldr	r3, [r3, #0]
   bc96a:	68db      	ldr	r3, [r3, #12]
   bc96c:	9301      	str	r3, [sp, #4]
   bc96e:	bd08      	pop	{r3, pc}
   bc970:	0003022c 	.word	0x0003022c

000bc974 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bc974:	b508      	push	{r3, lr}
   bc976:	4b02      	ldr	r3, [pc, #8]	; (bc980 <HAL_GPIO_Write+0xc>)
   bc978:	681b      	ldr	r3, [r3, #0]
   bc97a:	691b      	ldr	r3, [r3, #16]
   bc97c:	9301      	str	r3, [sp, #4]
   bc97e:	bd08      	pop	{r3, pc}
   bc980:	0003022c 	.word	0x0003022c

000bc984 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bc984:	b508      	push	{r3, lr}
   bc986:	4b02      	ldr	r3, [pc, #8]	; (bc990 <HAL_GPIO_Read+0xc>)
   bc988:	681b      	ldr	r3, [r3, #0]
   bc98a:	695b      	ldr	r3, [r3, #20]
   bc98c:	9301      	str	r3, [sp, #4]
   bc98e:	bd08      	pop	{r3, pc}
   bc990:	0003022c 	.word	0x0003022c

000bc994 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bc994:	b508      	push	{r3, lr}
   bc996:	4b02      	ldr	r3, [pc, #8]	; (bc9a0 <HAL_Interrupts_Attach+0xc>)
   bc998:	681b      	ldr	r3, [r3, #0]
   bc99a:	699b      	ldr	r3, [r3, #24]
   bc99c:	9301      	str	r3, [sp, #4]
   bc99e:	bd08      	pop	{r3, pc}
   bc9a0:	0003022c 	.word	0x0003022c

000bc9a4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bc9a4:	b508      	push	{r3, lr}
   bc9a6:	4b02      	ldr	r3, [pc, #8]	; (bc9b0 <HAL_Interrupts_Detach+0xc>)
   bc9a8:	681b      	ldr	r3, [r3, #0]
   bc9aa:	69db      	ldr	r3, [r3, #28]
   bc9ac:	9301      	str	r3, [sp, #4]
   bc9ae:	bd08      	pop	{r3, pc}
   bc9b0:	0003022c 	.word	0x0003022c

000bc9b4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bc9b4:	b508      	push	{r3, lr}
   bc9b6:	4b02      	ldr	r3, [pc, #8]	; (bc9c0 <hal_adc_read+0xc>)
   bc9b8:	681b      	ldr	r3, [r3, #0]
   bc9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc9bc:	9301      	str	r3, [sp, #4]
   bc9be:	bd08      	pop	{r3, pc}
   bc9c0:	0003022c 	.word	0x0003022c

000bc9c4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bc9c4:	b508      	push	{r3, lr}
   bc9c6:	4b02      	ldr	r3, [pc, #8]	; (bc9d0 <hal_i2c_begin+0xc>)
   bc9c8:	681b      	ldr	r3, [r3, #0]
   bc9ca:	68db      	ldr	r3, [r3, #12]
   bc9cc:	9301      	str	r3, [sp, #4]
   bc9ce:	bd08      	pop	{r3, pc}
   bc9d0:	00030228 	.word	0x00030228

000bc9d4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bc9d4:	b508      	push	{r3, lr}
   bc9d6:	4b02      	ldr	r3, [pc, #8]	; (bc9e0 <hal_i2c_begin_transmission+0xc>)
   bc9d8:	681b      	ldr	r3, [r3, #0]
   bc9da:	699b      	ldr	r3, [r3, #24]
   bc9dc:	9301      	str	r3, [sp, #4]
   bc9de:	bd08      	pop	{r3, pc}
   bc9e0:	00030228 	.word	0x00030228

000bc9e4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bc9e4:	b508      	push	{r3, lr}
   bc9e6:	4b02      	ldr	r3, [pc, #8]	; (bc9f0 <hal_i2c_end_transmission+0xc>)
   bc9e8:	681b      	ldr	r3, [r3, #0]
   bc9ea:	69db      	ldr	r3, [r3, #28]
   bc9ec:	9301      	str	r3, [sp, #4]
   bc9ee:	bd08      	pop	{r3, pc}
   bc9f0:	00030228 	.word	0x00030228

000bc9f4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bc9f4:	b508      	push	{r3, lr}
   bc9f6:	4b02      	ldr	r3, [pc, #8]	; (bca00 <hal_i2c_write+0xc>)
   bc9f8:	681b      	ldr	r3, [r3, #0]
   bc9fa:	6a1b      	ldr	r3, [r3, #32]
   bc9fc:	9301      	str	r3, [sp, #4]
   bc9fe:	bd08      	pop	{r3, pc}
   bca00:	00030228 	.word	0x00030228

000bca04 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bca04:	b508      	push	{r3, lr}
   bca06:	4b02      	ldr	r3, [pc, #8]	; (bca10 <hal_i2c_available+0xc>)
   bca08:	681b      	ldr	r3, [r3, #0]
   bca0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bca0c:	9301      	str	r3, [sp, #4]
   bca0e:	bd08      	pop	{r3, pc}
   bca10:	00030228 	.word	0x00030228

000bca14 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bca14:	b508      	push	{r3, lr}
   bca16:	4b02      	ldr	r3, [pc, #8]	; (bca20 <hal_i2c_read+0xc>)
   bca18:	681b      	ldr	r3, [r3, #0]
   bca1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bca1c:	9301      	str	r3, [sp, #4]
   bca1e:	bd08      	pop	{r3, pc}
   bca20:	00030228 	.word	0x00030228

000bca24 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bca24:	b508      	push	{r3, lr}
   bca26:	4b02      	ldr	r3, [pc, #8]	; (bca30 <hal_i2c_peek+0xc>)
   bca28:	681b      	ldr	r3, [r3, #0]
   bca2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bca2c:	9301      	str	r3, [sp, #4]
   bca2e:	bd08      	pop	{r3, pc}
   bca30:	00030228 	.word	0x00030228

000bca34 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bca34:	b508      	push	{r3, lr}
   bca36:	4b02      	ldr	r3, [pc, #8]	; (bca40 <hal_i2c_flush+0xc>)
   bca38:	681b      	ldr	r3, [r3, #0]
   bca3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bca3c:	9301      	str	r3, [sp, #4]
   bca3e:	bd08      	pop	{r3, pc}
   bca40:	00030228 	.word	0x00030228

000bca44 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bca44:	b508      	push	{r3, lr}
   bca46:	4b02      	ldr	r3, [pc, #8]	; (bca50 <hal_i2c_is_enabled+0xc>)
   bca48:	681b      	ldr	r3, [r3, #0]
   bca4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bca4c:	9301      	str	r3, [sp, #4]
   bca4e:	bd08      	pop	{r3, pc}
   bca50:	00030228 	.word	0x00030228

000bca54 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bca54:	b508      	push	{r3, lr}
   bca56:	4b02      	ldr	r3, [pc, #8]	; (bca60 <hal_i2c_init+0xc>)
   bca58:	681b      	ldr	r3, [r3, #0]
   bca5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bca5c:	9301      	str	r3, [sp, #4]
   bca5e:	bd08      	pop	{r3, pc}
   bca60:	00030228 	.word	0x00030228

000bca64 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   bca64:	b508      	push	{r3, lr}
   bca66:	4b02      	ldr	r3, [pc, #8]	; (bca70 <hal_i2c_lock+0xc>)
   bca68:	681b      	ldr	r3, [r3, #0]
   bca6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bca6c:	9301      	str	r3, [sp, #4]
   bca6e:	bd08      	pop	{r3, pc}
   bca70:	00030228 	.word	0x00030228

000bca74 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   bca74:	b508      	push	{r3, lr}
   bca76:	4b02      	ldr	r3, [pc, #8]	; (bca80 <hal_i2c_unlock+0xc>)
   bca78:	681b      	ldr	r3, [r3, #0]
   bca7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bca7c:	9301      	str	r3, [sp, #4]
   bca7e:	bd08      	pop	{r3, pc}
   bca80:	00030228 	.word	0x00030228

000bca84 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bca84:	b508      	push	{r3, lr}
   bca86:	4b02      	ldr	r3, [pc, #8]	; (bca90 <hal_i2c_request_ex+0xc>)
   bca88:	681b      	ldr	r3, [r3, #0]
   bca8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bca8c:	9301      	str	r3, [sp, #4]
   bca8e:	bd08      	pop	{r3, pc}
   bca90:	00030228 	.word	0x00030228

000bca94 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bca94:	b508      	push	{r3, lr}
   bca96:	4b02      	ldr	r3, [pc, #8]	; (bcaa0 <inet_inet_ntop+0xc>)
   bca98:	681b      	ldr	r3, [r3, #0]
   bca9a:	695b      	ldr	r3, [r3, #20]
   bca9c:	9301      	str	r3, [sp, #4]
   bca9e:	bd08      	pop	{r3, pc}
   bcaa0:	00030264 	.word	0x00030264

000bcaa4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bcaa4:	b508      	push	{r3, lr}
   bcaa6:	4b02      	ldr	r3, [pc, #8]	; (bcab0 <netdb_freeaddrinfo+0xc>)
   bcaa8:	681b      	ldr	r3, [r3, #0]
   bcaaa:	689b      	ldr	r3, [r3, #8]
   bcaac:	9301      	str	r3, [sp, #4]
   bcaae:	bd08      	pop	{r3, pc}
   bcab0:	00030268 	.word	0x00030268

000bcab4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bcab4:	b508      	push	{r3, lr}
   bcab6:	4b02      	ldr	r3, [pc, #8]	; (bcac0 <netdb_getaddrinfo+0xc>)
   bcab8:	681b      	ldr	r3, [r3, #0]
   bcaba:	68db      	ldr	r3, [r3, #12]
   bcabc:	9301      	str	r3, [sp, #4]
   bcabe:	bd08      	pop	{r3, pc}
   bcac0:	00030268 	.word	0x00030268

000bcac4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bcac4:	b508      	push	{r3, lr}
   bcac6:	4b02      	ldr	r3, [pc, #8]	; (bcad0 <hal_spi_begin+0xc>)
   bcac8:	681b      	ldr	r3, [r3, #0]
   bcaca:	681b      	ldr	r3, [r3, #0]
   bcacc:	9301      	str	r3, [sp, #4]
   bcace:	bd08      	pop	{r3, pc}
   bcad0:	00030230 	.word	0x00030230

000bcad4 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   bcad4:	b508      	push	{r3, lr}
   bcad6:	4b02      	ldr	r3, [pc, #8]	; (bcae0 <hal_spi_end+0xc>)
   bcad8:	681b      	ldr	r3, [r3, #0]
   bcada:	685b      	ldr	r3, [r3, #4]
   bcadc:	9301      	str	r3, [sp, #4]
   bcade:	bd08      	pop	{r3, pc}
   bcae0:	00030230 	.word	0x00030230

000bcae4 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bcae4:	b508      	push	{r3, lr}
   bcae6:	4b02      	ldr	r3, [pc, #8]	; (bcaf0 <hal_spi_transfer+0xc>)
   bcae8:	681b      	ldr	r3, [r3, #0]
   bcaea:	695b      	ldr	r3, [r3, #20]
   bcaec:	9301      	str	r3, [sp, #4]
   bcaee:	bd08      	pop	{r3, pc}
   bcaf0:	00030230 	.word	0x00030230

000bcaf4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bcaf4:	b508      	push	{r3, lr}
   bcaf6:	4b02      	ldr	r3, [pc, #8]	; (bcb00 <hal_spi_init+0xc>)
   bcaf8:	681b      	ldr	r3, [r3, #0]
   bcafa:	69db      	ldr	r3, [r3, #28]
   bcafc:	9301      	str	r3, [sp, #4]
   bcafe:	bd08      	pop	{r3, pc}
   bcb00:	00030230 	.word	0x00030230

000bcb04 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bcb04:	b508      	push	{r3, lr}
   bcb06:	4b02      	ldr	r3, [pc, #8]	; (bcb10 <hal_spi_is_enabled+0xc>)
   bcb08:	681b      	ldr	r3, [r3, #0]
   bcb0a:	6a1b      	ldr	r3, [r3, #32]
   bcb0c:	9301      	str	r3, [sp, #4]
   bcb0e:	bd08      	pop	{r3, pc}
   bcb10:	00030230 	.word	0x00030230

000bcb14 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bcb14:	b508      	push	{r3, lr}
   bcb16:	4b02      	ldr	r3, [pc, #8]	; (bcb20 <hal_spi_info+0xc>)
   bcb18:	681b      	ldr	r3, [r3, #0]
   bcb1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bcb1c:	9301      	str	r3, [sp, #4]
   bcb1e:	bd08      	pop	{r3, pc}
   bcb20:	00030230 	.word	0x00030230

000bcb24 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bcb24:	b508      	push	{r3, lr}
   bcb26:	4b02      	ldr	r3, [pc, #8]	; (bcb30 <hal_spi_set_settings+0xc>)
   bcb28:	681b      	ldr	r3, [r3, #0]
   bcb2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bcb2c:	9301      	str	r3, [sp, #4]
   bcb2e:	bd08      	pop	{r3, pc}
   bcb30:	00030230 	.word	0x00030230

000bcb34 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bcb34:	b508      	push	{r3, lr}
   bcb36:	4b02      	ldr	r3, [pc, #8]	; (bcb40 <hal_spi_acquire+0xc>)
   bcb38:	681b      	ldr	r3, [r3, #0]
   bcb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcb3c:	9301      	str	r3, [sp, #4]
   bcb3e:	bd08      	pop	{r3, pc}
   bcb40:	00030230 	.word	0x00030230

000bcb44 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bcb44:	b508      	push	{r3, lr}
   bcb46:	4b02      	ldr	r3, [pc, #8]	; (bcb50 <hal_spi_release+0xc>)
   bcb48:	681b      	ldr	r3, [r3, #0]
   bcb4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bcb4c:	9301      	str	r3, [sp, #4]
   bcb4e:	bd08      	pop	{r3, pc}
   bcb50:	00030230 	.word	0x00030230

000bcb54 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   bcb54:	b508      	push	{r3, lr}
   bcb56:	4b02      	ldr	r3, [pc, #8]	; (bcb60 <_open+0xc>)
   bcb58:	681b      	ldr	r3, [r3, #0]
   bcb5a:	681b      	ldr	r3, [r3, #0]
   bcb5c:	9301      	str	r3, [sp, #4]
   bcb5e:	bd08      	pop	{r3, pc}
   bcb60:	00030284 	.word	0x00030284

000bcb64 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   bcb64:	b508      	push	{r3, lr}
   bcb66:	4b02      	ldr	r3, [pc, #8]	; (bcb70 <_write+0xc>)
   bcb68:	681b      	ldr	r3, [r3, #0]
   bcb6a:	685b      	ldr	r3, [r3, #4]
   bcb6c:	9301      	str	r3, [sp, #4]
   bcb6e:	bd08      	pop	{r3, pc}
   bcb70:	00030284 	.word	0x00030284

000bcb74 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   bcb74:	b508      	push	{r3, lr}
   bcb76:	4b02      	ldr	r3, [pc, #8]	; (bcb80 <_read+0xc>)
   bcb78:	681b      	ldr	r3, [r3, #0]
   bcb7a:	689b      	ldr	r3, [r3, #8]
   bcb7c:	9301      	str	r3, [sp, #4]
   bcb7e:	bd08      	pop	{r3, pc}
   bcb80:	00030284 	.word	0x00030284

000bcb84 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   bcb84:	b508      	push	{r3, lr}
   bcb86:	4b02      	ldr	r3, [pc, #8]	; (bcb90 <_close+0xc>)
   bcb88:	681b      	ldr	r3, [r3, #0]
   bcb8a:	68db      	ldr	r3, [r3, #12]
   bcb8c:	9301      	str	r3, [sp, #4]
   bcb8e:	bd08      	pop	{r3, pc}
   bcb90:	00030284 	.word	0x00030284

000bcb94 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   bcb94:	b508      	push	{r3, lr}
   bcb96:	4b02      	ldr	r3, [pc, #8]	; (bcba0 <_fstat+0xc>)
   bcb98:	681b      	ldr	r3, [r3, #0]
   bcb9a:	695b      	ldr	r3, [r3, #20]
   bcb9c:	9301      	str	r3, [sp, #4]
   bcb9e:	bd08      	pop	{r3, pc}
   bcba0:	00030284 	.word	0x00030284

000bcba4 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   bcba4:	b508      	push	{r3, lr}
   bcba6:	4b02      	ldr	r3, [pc, #8]	; (bcbb0 <_lseek+0xc>)
   bcba8:	681b      	ldr	r3, [r3, #0]
   bcbaa:	6a1b      	ldr	r3, [r3, #32]
   bcbac:	9301      	str	r3, [sp, #4]
   bcbae:	bd08      	pop	{r3, pc}
   bcbb0:	00030284 	.word	0x00030284

000bcbb4 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   bcbb4:	b508      	push	{r3, lr}
   bcbb6:	4b02      	ldr	r3, [pc, #8]	; (bcbc0 <stat+0xc>)
   bcbb8:	681b      	ldr	r3, [r3, #0]
   bcbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bcbbc:	9301      	str	r3, [sp, #4]
   bcbbe:	bd08      	pop	{r3, pc}
   bcbc0:	00030284 	.word	0x00030284

000bcbc4 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   bcbc4:	b508      	push	{r3, lr}
   bcbc6:	4b02      	ldr	r3, [pc, #8]	; (bcbd0 <mkdir+0xc>)
   bcbc8:	681b      	ldr	r3, [r3, #0]
   bcbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bcbcc:	9301      	str	r3, [sp, #4]
   bcbce:	bd08      	pop	{r3, pc}
   bcbd0:	00030284 	.word	0x00030284

000bcbd4 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   bcbd4:	b508      	push	{r3, lr}
   bcbd6:	4b02      	ldr	r3, [pc, #8]	; (bcbe0 <_unlink+0xc>)
   bcbd8:	681b      	ldr	r3, [r3, #0]
   bcbda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bcbdc:	9301      	str	r3, [sp, #4]
   bcbde:	bd08      	pop	{r3, pc}
   bcbe0:	00030284 	.word	0x00030284

000bcbe4 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   bcbe4:	b508      	push	{r3, lr}
   bcbe6:	4b02      	ldr	r3, [pc, #8]	; (bcbf0 <opendir+0xc>)
   bcbe8:	681b      	ldr	r3, [r3, #0]
   bcbea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bcbec:	9301      	str	r3, [sp, #4]
   bcbee:	bd08      	pop	{r3, pc}
   bcbf0:	00030284 	.word	0x00030284

000bcbf4 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   bcbf4:	b508      	push	{r3, lr}
   bcbf6:	4b02      	ldr	r3, [pc, #8]	; (bcc00 <readdir+0xc>)
   bcbf8:	681b      	ldr	r3, [r3, #0]
   bcbfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcbfc:	9301      	str	r3, [sp, #4]
   bcbfe:	bd08      	pop	{r3, pc}
   bcc00:	00030284 	.word	0x00030284

000bcc04 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   bcc04:	b508      	push	{r3, lr}
   bcc06:	4b02      	ldr	r3, [pc, #8]	; (bcc10 <closedir+0xc>)
   bcc08:	681b      	ldr	r3, [r3, #0]
   bcc0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bcc0c:	9301      	str	r3, [sp, #4]
   bcc0e:	bd08      	pop	{r3, pc}
   bcc10:	00030284 	.word	0x00030284

000bcc14 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bcc14:	b508      	push	{r3, lr}
   bcc16:	4b02      	ldr	r3, [pc, #8]	; (bcc20 <hal_usart_end+0xc>)
   bcc18:	681b      	ldr	r3, [r3, #0]
   bcc1a:	689b      	ldr	r3, [r3, #8]
   bcc1c:	9301      	str	r3, [sp, #4]
   bcc1e:	bd08      	pop	{r3, pc}
   bcc20:	0003023c 	.word	0x0003023c

000bcc24 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bcc24:	b508      	push	{r3, lr}
   bcc26:	4b02      	ldr	r3, [pc, #8]	; (bcc30 <hal_usart_write+0xc>)
   bcc28:	681b      	ldr	r3, [r3, #0]
   bcc2a:	68db      	ldr	r3, [r3, #12]
   bcc2c:	9301      	str	r3, [sp, #4]
   bcc2e:	bd08      	pop	{r3, pc}
   bcc30:	0003023c 	.word	0x0003023c

000bcc34 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bcc34:	b508      	push	{r3, lr}
   bcc36:	4b02      	ldr	r3, [pc, #8]	; (bcc40 <hal_usart_available+0xc>)
   bcc38:	681b      	ldr	r3, [r3, #0]
   bcc3a:	691b      	ldr	r3, [r3, #16]
   bcc3c:	9301      	str	r3, [sp, #4]
   bcc3e:	bd08      	pop	{r3, pc}
   bcc40:	0003023c 	.word	0x0003023c

000bcc44 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bcc44:	b508      	push	{r3, lr}
   bcc46:	4b02      	ldr	r3, [pc, #8]	; (bcc50 <hal_usart_read+0xc>)
   bcc48:	681b      	ldr	r3, [r3, #0]
   bcc4a:	695b      	ldr	r3, [r3, #20]
   bcc4c:	9301      	str	r3, [sp, #4]
   bcc4e:	bd08      	pop	{r3, pc}
   bcc50:	0003023c 	.word	0x0003023c

000bcc54 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bcc54:	b508      	push	{r3, lr}
   bcc56:	4b02      	ldr	r3, [pc, #8]	; (bcc60 <hal_usart_peek+0xc>)
   bcc58:	681b      	ldr	r3, [r3, #0]
   bcc5a:	699b      	ldr	r3, [r3, #24]
   bcc5c:	9301      	str	r3, [sp, #4]
   bcc5e:	bd08      	pop	{r3, pc}
   bcc60:	0003023c 	.word	0x0003023c

000bcc64 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bcc64:	b508      	push	{r3, lr}
   bcc66:	4b02      	ldr	r3, [pc, #8]	; (bcc70 <hal_usart_flush+0xc>)
   bcc68:	681b      	ldr	r3, [r3, #0]
   bcc6a:	69db      	ldr	r3, [r3, #28]
   bcc6c:	9301      	str	r3, [sp, #4]
   bcc6e:	bd08      	pop	{r3, pc}
   bcc70:	0003023c 	.word	0x0003023c

000bcc74 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bcc74:	b508      	push	{r3, lr}
   bcc76:	4b02      	ldr	r3, [pc, #8]	; (bcc80 <hal_usart_is_enabled+0xc>)
   bcc78:	681b      	ldr	r3, [r3, #0]
   bcc7a:	6a1b      	ldr	r3, [r3, #32]
   bcc7c:	9301      	str	r3, [sp, #4]
   bcc7e:	bd08      	pop	{r3, pc}
   bcc80:	0003023c 	.word	0x0003023c

000bcc84 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bcc84:	b508      	push	{r3, lr}
   bcc86:	4b02      	ldr	r3, [pc, #8]	; (bcc90 <hal_usart_available_data_for_write+0xc>)
   bcc88:	681b      	ldr	r3, [r3, #0]
   bcc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bcc8c:	9301      	str	r3, [sp, #4]
   bcc8e:	bd08      	pop	{r3, pc}
   bcc90:	0003023c 	.word	0x0003023c

000bcc94 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bcc94:	b508      	push	{r3, lr}
   bcc96:	4b02      	ldr	r3, [pc, #8]	; (bcca0 <hal_usart_begin_config+0xc>)
   bcc98:	681b      	ldr	r3, [r3, #0]
   bcc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bcc9c:	9301      	str	r3, [sp, #4]
   bcc9e:	bd08      	pop	{r3, pc}
   bcca0:	0003023c 	.word	0x0003023c

000bcca4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bcca4:	b508      	push	{r3, lr}
   bcca6:	4b02      	ldr	r3, [pc, #8]	; (bccb0 <hal_usart_init_ex+0xc>)
   bcca8:	681b      	ldr	r3, [r3, #0]
   bccaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bccac:	9301      	str	r3, [sp, #4]
   bccae:	bd08      	pop	{r3, pc}
   bccb0:	0003023c 	.word	0x0003023c

000bccb4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bccb4:	b508      	push	{r3, lr}
   bccb6:	4b02      	ldr	r3, [pc, #8]	; (bccc0 <HAL_USB_USART_Init+0xc>)
   bccb8:	681b      	ldr	r3, [r3, #0]
   bccba:	681b      	ldr	r3, [r3, #0]
   bccbc:	9301      	str	r3, [sp, #4]
   bccbe:	bd08      	pop	{r3, pc}
   bccc0:	0003024c 	.word	0x0003024c

000bccc4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bccc4:	b508      	push	{r3, lr}
   bccc6:	4b02      	ldr	r3, [pc, #8]	; (bccd0 <HAL_USB_USART_Begin+0xc>)
   bccc8:	681b      	ldr	r3, [r3, #0]
   bccca:	685b      	ldr	r3, [r3, #4]
   bcccc:	9301      	str	r3, [sp, #4]
   bccce:	bd08      	pop	{r3, pc}
   bccd0:	0003024c 	.word	0x0003024c

000bccd4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bccd4:	b508      	push	{r3, lr}
   bccd6:	4b02      	ldr	r3, [pc, #8]	; (bcce0 <HAL_USB_USART_End+0xc>)
   bccd8:	681b      	ldr	r3, [r3, #0]
   bccda:	689b      	ldr	r3, [r3, #8]
   bccdc:	9301      	str	r3, [sp, #4]
   bccde:	bd08      	pop	{r3, pc}
   bcce0:	0003024c 	.word	0x0003024c

000bcce4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bcce4:	b508      	push	{r3, lr}
   bcce6:	4b02      	ldr	r3, [pc, #8]	; (bccf0 <HAL_USB_USART_Available_Data+0xc>)
   bcce8:	681b      	ldr	r3, [r3, #0]
   bccea:	691b      	ldr	r3, [r3, #16]
   bccec:	9301      	str	r3, [sp, #4]
   bccee:	bd08      	pop	{r3, pc}
   bccf0:	0003024c 	.word	0x0003024c

000bccf4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bccf4:	b508      	push	{r3, lr}
   bccf6:	4b02      	ldr	r3, [pc, #8]	; (bcd00 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bccf8:	681b      	ldr	r3, [r3, #0]
   bccfa:	695b      	ldr	r3, [r3, #20]
   bccfc:	9301      	str	r3, [sp, #4]
   bccfe:	bd08      	pop	{r3, pc}
   bcd00:	0003024c 	.word	0x0003024c

000bcd04 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bcd04:	b508      	push	{r3, lr}
   bcd06:	4b02      	ldr	r3, [pc, #8]	; (bcd10 <HAL_USB_USART_Receive_Data+0xc>)
   bcd08:	681b      	ldr	r3, [r3, #0]
   bcd0a:	699b      	ldr	r3, [r3, #24]
   bcd0c:	9301      	str	r3, [sp, #4]
   bcd0e:	bd08      	pop	{r3, pc}
   bcd10:	0003024c 	.word	0x0003024c

000bcd14 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bcd14:	b508      	push	{r3, lr}
   bcd16:	4b02      	ldr	r3, [pc, #8]	; (bcd20 <HAL_USB_USART_Send_Data+0xc>)
   bcd18:	681b      	ldr	r3, [r3, #0]
   bcd1a:	69db      	ldr	r3, [r3, #28]
   bcd1c:	9301      	str	r3, [sp, #4]
   bcd1e:	bd08      	pop	{r3, pc}
   bcd20:	0003024c 	.word	0x0003024c

000bcd24 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bcd24:	b508      	push	{r3, lr}
   bcd26:	4b02      	ldr	r3, [pc, #8]	; (bcd30 <HAL_USB_USART_Flush_Data+0xc>)
   bcd28:	681b      	ldr	r3, [r3, #0]
   bcd2a:	6a1b      	ldr	r3, [r3, #32]
   bcd2c:	9301      	str	r3, [sp, #4]
   bcd2e:	bd08      	pop	{r3, pc}
   bcd30:	0003024c 	.word	0x0003024c

000bcd34 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   bcd34:	b508      	push	{r3, lr}
   bcd36:	4b02      	ldr	r3, [pc, #8]	; (bcd40 <HAL_USB_USART_Is_Connected+0xc>)
   bcd38:	681b      	ldr	r3, [r3, #0]
   bcd3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bcd3c:	9301      	str	r3, [sp, #4]
   bcd3e:	bd08      	pop	{r3, pc}
   bcd40:	0003024c 	.word	0x0003024c

000bcd44 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bcd44:	b508      	push	{r3, lr}
   bcd46:	4b02      	ldr	r3, [pc, #8]	; (bcd50 <panic_+0xc>)
   bcd48:	681b      	ldr	r3, [r3, #0]
   bcd4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bcd4c:	9301      	str	r3, [sp, #4]
   bcd4e:	bd08      	pop	{r3, pc}
   bcd50:	00030260 	.word	0x00030260

000bcd54 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bcd54:	b508      	push	{r3, lr}
   bcd56:	4b02      	ldr	r3, [pc, #8]	; (bcd60 <log_message+0xc>)
   bcd58:	681b      	ldr	r3, [r3, #0]
   bcd5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bcd5c:	9301      	str	r3, [sp, #4]
   bcd5e:	bd08      	pop	{r3, pc}
   bcd60:	00030260 	.word	0x00030260

000bcd64 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   bcd64:	b508      	push	{r3, lr}
   bcd66:	4b02      	ldr	r3, [pc, #8]	; (bcd70 <log_message_v+0xc>)
   bcd68:	681b      	ldr	r3, [r3, #0]
   bcd6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bcd6c:	9301      	str	r3, [sp, #4]
   bcd6e:	bd08      	pop	{r3, pc}
   bcd70:	00030260 	.word	0x00030260

000bcd74 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bcd74:	b508      	push	{r3, lr}
   bcd76:	4b02      	ldr	r3, [pc, #8]	; (bcd80 <log_level_name+0xc>)
   bcd78:	681b      	ldr	r3, [r3, #0]
   bcd7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bcd7c:	9301      	str	r3, [sp, #4]
   bcd7e:	bd08      	pop	{r3, pc}
   bcd80:	00030260 	.word	0x00030260

000bcd84 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bcd84:	b508      	push	{r3, lr}
   bcd86:	4b02      	ldr	r3, [pc, #8]	; (bcd90 <log_set_callbacks+0xc>)
   bcd88:	681b      	ldr	r3, [r3, #0]
   bcd8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bcd8c:	9301      	str	r3, [sp, #4]
   bcd8e:	bd08      	pop	{r3, pc}
   bcd90:	00030260 	.word	0x00030260

000bcd94 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   bcd94:	b508      	push	{r3, lr}
   bcd96:	4b03      	ldr	r3, [pc, #12]	; (bcda4 <led_set_status_active+0x10>)
   bcd98:	681b      	ldr	r3, [r3, #0]
   bcd9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bcd9e:	9301      	str	r3, [sp, #4]
   bcda0:	bd08      	pop	{r3, pc}
   bcda2:	0000      	.short	0x0000
   bcda4:	00030260 	.word	0x00030260

000bcda8 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   bcda8:	b508      	push	{r3, lr}
   bcdaa:	4b03      	ldr	r3, [pc, #12]	; (bcdb8 <diag_get_source+0x10>)
   bcdac:	681b      	ldr	r3, [r3, #0]
   bcdae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bcdb2:	9301      	str	r3, [sp, #4]
   bcdb4:	bd08      	pop	{r3, pc}
   bcdb6:	0000      	.short	0x0000
   bcdb8:	00030260 	.word	0x00030260

000bcdbc <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bcdbc:	b508      	push	{r3, lr}
   bcdbe:	4b02      	ldr	r3, [pc, #8]	; (bcdc8 <system_mode+0xc>)
   bcdc0:	681b      	ldr	r3, [r3, #0]
   bcdc2:	681b      	ldr	r3, [r3, #0]
   bcdc4:	9301      	str	r3, [sp, #4]
   bcdc6:	bd08      	pop	{r3, pc}
   bcdc8:	00030220 	.word	0x00030220

000bcdcc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bcdcc:	b508      	push	{r3, lr}
   bcdce:	4b02      	ldr	r3, [pc, #8]	; (bcdd8 <set_system_mode+0xc>)
   bcdd0:	681b      	ldr	r3, [r3, #0]
   bcdd2:	685b      	ldr	r3, [r3, #4]
   bcdd4:	9301      	str	r3, [sp, #4]
   bcdd6:	bd08      	pop	{r3, pc}
   bcdd8:	00030220 	.word	0x00030220

000bcddc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bcddc:	b508      	push	{r3, lr}
   bcdde:	4b02      	ldr	r3, [pc, #8]	; (bcde8 <system_delay_ms+0xc>)
   bcde0:	681b      	ldr	r3, [r3, #0]
   bcde2:	695b      	ldr	r3, [r3, #20]
   bcde4:	9301      	str	r3, [sp, #4]
   bcde6:	bd08      	pop	{r3, pc}
   bcde8:	00030220 	.word	0x00030220

000bcdec <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   bcdec:	b508      	push	{r3, lr}
   bcdee:	4b02      	ldr	r3, [pc, #8]	; (bcdf8 <system_subscribe_event+0xc>)
   bcdf0:	681b      	ldr	r3, [r3, #0]
   bcdf2:	6a1b      	ldr	r3, [r3, #32]
   bcdf4:	9301      	str	r3, [sp, #4]
   bcdf6:	bd08      	pop	{r3, pc}
   bcdf8:	00030220 	.word	0x00030220

000bcdfc <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   bcdfc:	b508      	push	{r3, lr}
   bcdfe:	4b02      	ldr	r3, [pc, #8]	; (bce08 <system_thread_set_state+0xc>)
   bce00:	681b      	ldr	r3, [r3, #0]
   bce02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bce04:	9301      	str	r3, [sp, #4]
   bce06:	bd08      	pop	{r3, pc}
   bce08:	00030220 	.word	0x00030220

000bce0c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bce0c:	b508      	push	{r3, lr}
   bce0e:	4b02      	ldr	r3, [pc, #8]	; (bce18 <application_thread_current+0xc>)
   bce10:	681b      	ldr	r3, [r3, #0]
   bce12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bce14:	9301      	str	r3, [sp, #4]
   bce16:	bd08      	pop	{r3, pc}
   bce18:	00030220 	.word	0x00030220

000bce1c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bce1c:	b508      	push	{r3, lr}
   bce1e:	4b02      	ldr	r3, [pc, #8]	; (bce28 <application_thread_invoke+0xc>)
   bce20:	681b      	ldr	r3, [r3, #0]
   bce22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bce24:	9301      	str	r3, [sp, #4]
   bce26:	bd08      	pop	{r3, pc}
   bce28:	00030220 	.word	0x00030220

000bce2c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bce2c:	b508      	push	{r3, lr}
   bce2e:	4b02      	ldr	r3, [pc, #8]	; (bce38 <system_thread_get_state+0xc>)
   bce30:	681b      	ldr	r3, [r3, #0]
   bce32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bce34:	9301      	str	r3, [sp, #4]
   bce36:	bd08      	pop	{r3, pc}
   bce38:	00030220 	.word	0x00030220

000bce3c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   bce3c:	b508      	push	{r3, lr}
   bce3e:	4b02      	ldr	r3, [pc, #8]	; (bce48 <system_notify_time_changed+0xc>)
   bce40:	681b      	ldr	r3, [r3, #0]
   bce42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bce44:	9301      	str	r3, [sp, #4]
   bce46:	bd08      	pop	{r3, pc}
   bce48:	00030220 	.word	0x00030220

000bce4c <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   bce4c:	b508      	push	{r3, lr}
   bce4e:	4b02      	ldr	r3, [pc, #8]	; (bce58 <led_pattern_period+0xc>)
   bce50:	681b      	ldr	r3, [r3, #0]
   bce52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bce54:	9301      	str	r3, [sp, #4]
   bce56:	bd08      	pop	{r3, pc}
   bce58:	00030220 	.word	0x00030220

000bce5c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bce5c:	b508      	push	{r3, lr}
   bce5e:	4b03      	ldr	r3, [pc, #12]	; (bce6c <system_ctrl_set_app_request_handler+0x10>)
   bce60:	681b      	ldr	r3, [r3, #0]
   bce62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bce66:	9301      	str	r3, [sp, #4]
   bce68:	bd08      	pop	{r3, pc}
   bce6a:	0000      	.short	0x0000
   bce6c:	00030220 	.word	0x00030220

000bce70 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bce70:	b508      	push	{r3, lr}
   bce72:	4b03      	ldr	r3, [pc, #12]	; (bce80 <system_ctrl_set_result+0x10>)
   bce74:	681b      	ldr	r3, [r3, #0]
   bce76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bce7a:	9301      	str	r3, [sp, #4]
   bce7c:	bd08      	pop	{r3, pc}
   bce7e:	0000      	.short	0x0000
   bce80:	00030220 	.word	0x00030220

000bce84 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   bce84:	b508      	push	{r3, lr}
   bce86:	4b03      	ldr	r3, [pc, #12]	; (bce94 <system_power_management_set_config+0x10>)
   bce88:	681b      	ldr	r3, [r3, #0]
   bce8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bce8e:	9301      	str	r3, [sp, #4]
   bce90:	bd08      	pop	{r3, pc}
   bce92:	0000      	.short	0x0000
   bce94:	00030220 	.word	0x00030220

000bce98 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   bce98:	b508      	push	{r3, lr}
   bce9a:	4b03      	ldr	r3, [pc, #12]	; (bcea8 <system_sleep_ext+0x10>)
   bce9c:	681b      	ldr	r3, [r3, #0]
   bce9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   bcea2:	9301      	str	r3, [sp, #4]
   bcea4:	bd08      	pop	{r3, pc}
   bcea6:	0000      	.short	0x0000
   bcea8:	00030220 	.word	0x00030220

000bceac <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   bceac:	b508      	push	{r3, lr}
   bceae:	4b03      	ldr	r3, [pc, #12]	; (bcebc <system_reset+0x10>)
   bceb0:	681b      	ldr	r3, [r3, #0]
   bceb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   bceb6:	9301      	str	r3, [sp, #4]
   bceb8:	bd08      	pop	{r3, pc}
   bceba:	0000      	.short	0x0000
   bcebc:	00030220 	.word	0x00030220

000bcec0 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bcec0:	b508      	push	{r3, lr}
   bcec2:	4b02      	ldr	r3, [pc, #8]	; (bcecc <spark_function+0xc>)
   bcec4:	681b      	ldr	r3, [r3, #0]
   bcec6:	685b      	ldr	r3, [r3, #4]
   bcec8:	9301      	str	r3, [sp, #4]
   bceca:	bd08      	pop	{r3, pc}
   bcecc:	00030244 	.word	0x00030244

000bced0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bced0:	b508      	push	{r3, lr}
   bced2:	4b02      	ldr	r3, [pc, #8]	; (bcedc <spark_process+0xc>)
   bced4:	681b      	ldr	r3, [r3, #0]
   bced6:	689b      	ldr	r3, [r3, #8]
   bced8:	9301      	str	r3, [sp, #4]
   bceda:	bd08      	pop	{r3, pc}
   bcedc:	00030244 	.word	0x00030244

000bcee0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   bcee0:	b508      	push	{r3, lr}
   bcee2:	4b02      	ldr	r3, [pc, #8]	; (bceec <spark_cloud_flag_connect+0xc>)
   bcee4:	681b      	ldr	r3, [r3, #0]
   bcee6:	68db      	ldr	r3, [r3, #12]
   bcee8:	9301      	str	r3, [sp, #4]
   bceea:	bd08      	pop	{r3, pc}
   bceec:	00030244 	.word	0x00030244

000bcef0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bcef0:	b508      	push	{r3, lr}
   bcef2:	4b02      	ldr	r3, [pc, #8]	; (bcefc <spark_cloud_flag_connected+0xc>)
   bcef4:	681b      	ldr	r3, [r3, #0]
   bcef6:	695b      	ldr	r3, [r3, #20]
   bcef8:	9301      	str	r3, [sp, #4]
   bcefa:	bd08      	pop	{r3, pc}
   bcefc:	00030244 	.word	0x00030244

000bcf00 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   bcf00:	b508      	push	{r3, lr}
   bcf02:	4b02      	ldr	r3, [pc, #8]	; (bcf0c <spark_deviceID+0xc>)
   bcf04:	681b      	ldr	r3, [r3, #0]
   bcf06:	69db      	ldr	r3, [r3, #28]
   bcf08:	9301      	str	r3, [sp, #4]
   bcf0a:	bd08      	pop	{r3, pc}
   bcf0c:	00030244 	.word	0x00030244

000bcf10 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bcf10:	b508      	push	{r3, lr}
   bcf12:	4b02      	ldr	r3, [pc, #8]	; (bcf1c <spark_send_event+0xc>)
   bcf14:	681b      	ldr	r3, [r3, #0]
   bcf16:	6a1b      	ldr	r3, [r3, #32]
   bcf18:	9301      	str	r3, [sp, #4]
   bcf1a:	bd08      	pop	{r3, pc}
   bcf1c:	00030244 	.word	0x00030244

000bcf20 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   bcf20:	b508      	push	{r3, lr}
   bcf22:	4b02      	ldr	r3, [pc, #8]	; (bcf2c <spark_sync_time+0xc>)
   bcf24:	681b      	ldr	r3, [r3, #0]
   bcf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bcf28:	9301      	str	r3, [sp, #4]
   bcf2a:	bd08      	pop	{r3, pc}
   bcf2c:	00030244 	.word	0x00030244

000bcf30 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bcf30:	b508      	push	{r3, lr}
   bcf32:	4b02      	ldr	r3, [pc, #8]	; (bcf3c <spark_sync_time_pending+0xc>)
   bcf34:	681b      	ldr	r3, [r3, #0]
   bcf36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bcf38:	9301      	str	r3, [sp, #4]
   bcf3a:	bd08      	pop	{r3, pc}
   bcf3c:	00030244 	.word	0x00030244

000bcf40 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   bcf40:	b508      	push	{r3, lr}
   bcf42:	4b02      	ldr	r3, [pc, #8]	; (bcf4c <spark_sync_time_last+0xc>)
   bcf44:	681b      	ldr	r3, [r3, #0]
   bcf46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bcf48:	9301      	str	r3, [sp, #4]
   bcf4a:	bd08      	pop	{r3, pc}
   bcf4c:	00030244 	.word	0x00030244

000bcf50 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bcf50:	b508      	push	{r3, lr}
   bcf52:	4b02      	ldr	r3, [pc, #8]	; (bcf5c <spark_set_random_seed_from_cloud_handler+0xc>)
   bcf54:	681b      	ldr	r3, [r3, #0]
   bcf56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bcf58:	9301      	str	r3, [sp, #4]
   bcf5a:	bd08      	pop	{r3, pc}
   bcf5c:	00030244 	.word	0x00030244

000bcf60 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   bcf60:	b508      	push	{r3, lr}
   bcf62:	4b02      	ldr	r3, [pc, #8]	; (bcf6c <spark_cloud_disconnect+0xc>)
   bcf64:	681b      	ldr	r3, [r3, #0]
   bcf66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bcf68:	9301      	str	r3, [sp, #4]
   bcf6a:	bd08      	pop	{r3, pc}
   bcf6c:	00030244 	.word	0x00030244

000bcf70 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bcf70:	b508      	push	{r3, lr}
   bcf72:	4b02      	ldr	r3, [pc, #8]	; (bcf7c <network_connect+0xc>)
   bcf74:	681b      	ldr	r3, [r3, #0]
   bcf76:	685b      	ldr	r3, [r3, #4]
   bcf78:	9301      	str	r3, [sp, #4]
   bcf7a:	bd08      	pop	{r3, pc}
   bcf7c:	00030240 	.word	0x00030240

000bcf80 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bcf80:	b508      	push	{r3, lr}
   bcf82:	4b02      	ldr	r3, [pc, #8]	; (bcf8c <network_connecting+0xc>)
   bcf84:	681b      	ldr	r3, [r3, #0]
   bcf86:	689b      	ldr	r3, [r3, #8]
   bcf88:	9301      	str	r3, [sp, #4]
   bcf8a:	bd08      	pop	{r3, pc}
   bcf8c:	00030240 	.word	0x00030240

000bcf90 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bcf90:	b508      	push	{r3, lr}
   bcf92:	4b02      	ldr	r3, [pc, #8]	; (bcf9c <network_disconnect+0xc>)
   bcf94:	681b      	ldr	r3, [r3, #0]
   bcf96:	68db      	ldr	r3, [r3, #12]
   bcf98:	9301      	str	r3, [sp, #4]
   bcf9a:	bd08      	pop	{r3, pc}
   bcf9c:	00030240 	.word	0x00030240

000bcfa0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bcfa0:	b508      	push	{r3, lr}
   bcfa2:	4b02      	ldr	r3, [pc, #8]	; (bcfac <network_ready+0xc>)
   bcfa4:	681b      	ldr	r3, [r3, #0]
   bcfa6:	691b      	ldr	r3, [r3, #16]
   bcfa8:	9301      	str	r3, [sp, #4]
   bcfaa:	bd08      	pop	{r3, pc}
   bcfac:	00030240 	.word	0x00030240

000bcfb0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bcfb0:	b508      	push	{r3, lr}
   bcfb2:	4b02      	ldr	r3, [pc, #8]	; (bcfbc <network_on+0xc>)
   bcfb4:	681b      	ldr	r3, [r3, #0]
   bcfb6:	695b      	ldr	r3, [r3, #20]
   bcfb8:	9301      	str	r3, [sp, #4]
   bcfba:	bd08      	pop	{r3, pc}
   bcfbc:	00030240 	.word	0x00030240

000bcfc0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bcfc0:	b508      	push	{r3, lr}
   bcfc2:	4b02      	ldr	r3, [pc, #8]	; (bcfcc <network_off+0xc>)
   bcfc4:	681b      	ldr	r3, [r3, #0]
   bcfc6:	699b      	ldr	r3, [r3, #24]
   bcfc8:	9301      	str	r3, [sp, #4]
   bcfca:	bd08      	pop	{r3, pc}
   bcfcc:	00030240 	.word	0x00030240

000bcfd0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bcfd0:	b508      	push	{r3, lr}
   bcfd2:	4b02      	ldr	r3, [pc, #8]	; (bcfdc <network_listen+0xc>)
   bcfd4:	681b      	ldr	r3, [r3, #0]
   bcfd6:	69db      	ldr	r3, [r3, #28]
   bcfd8:	9301      	str	r3, [sp, #4]
   bcfda:	bd08      	pop	{r3, pc}
   bcfdc:	00030240 	.word	0x00030240

000bcfe0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bcfe0:	b508      	push	{r3, lr}
   bcfe2:	4b02      	ldr	r3, [pc, #8]	; (bcfec <network_listening+0xc>)
   bcfe4:	681b      	ldr	r3, [r3, #0]
   bcfe6:	6a1b      	ldr	r3, [r3, #32]
   bcfe8:	9301      	str	r3, [sp, #4]
   bcfea:	bd08      	pop	{r3, pc}
   bcfec:	00030240 	.word	0x00030240

000bcff0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bcff0:	b508      	push	{r3, lr}
   bcff2:	4b02      	ldr	r3, [pc, #8]	; (bcffc <network_set_listen_timeout+0xc>)
   bcff4:	681b      	ldr	r3, [r3, #0]
   bcff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bcff8:	9301      	str	r3, [sp, #4]
   bcffa:	bd08      	pop	{r3, pc}
   bcffc:	00030240 	.word	0x00030240

000bd000 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bd000:	b508      	push	{r3, lr}
   bd002:	4b02      	ldr	r3, [pc, #8]	; (bd00c <network_get_listen_timeout+0xc>)
   bd004:	681b      	ldr	r3, [r3, #0]
   bd006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd008:	9301      	str	r3, [sp, #4]
   bd00a:	bd08      	pop	{r3, pc}
   bd00c:	00030240 	.word	0x00030240

000bd010 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bd010:	b508      	push	{r3, lr}
   bd012:	4b02      	ldr	r3, [pc, #8]	; (bd01c <network_is_on+0xc>)
   bd014:	681b      	ldr	r3, [r3, #0]
   bd016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd018:	9301      	str	r3, [sp, #4]
   bd01a:	bd08      	pop	{r3, pc}
   bd01c:	00030240 	.word	0x00030240

000bd020 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bd020:	b508      	push	{r3, lr}
   bd022:	4b02      	ldr	r3, [pc, #8]	; (bd02c <network_is_off+0xc>)
   bd024:	681b      	ldr	r3, [r3, #0]
   bd026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd028:	9301      	str	r3, [sp, #4]
   bd02a:	bd08      	pop	{r3, pc}
   bd02c:	00030240 	.word	0x00030240

000bd030 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bd030:	b508      	push	{r3, lr}
   bd032:	4b02      	ldr	r3, [pc, #8]	; (bd03c <malloc+0xc>)
   bd034:	681b      	ldr	r3, [r3, #0]
   bd036:	681b      	ldr	r3, [r3, #0]
   bd038:	9301      	str	r3, [sp, #4]
   bd03a:	bd08      	pop	{r3, pc}
   bd03c:	0003021c 	.word	0x0003021c

000bd040 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bd040:	b508      	push	{r3, lr}
   bd042:	4b02      	ldr	r3, [pc, #8]	; (bd04c <free+0xc>)
   bd044:	681b      	ldr	r3, [r3, #0]
   bd046:	685b      	ldr	r3, [r3, #4]
   bd048:	9301      	str	r3, [sp, #4]
   bd04a:	bd08      	pop	{r3, pc}
   bd04c:	0003021c 	.word	0x0003021c

000bd050 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bd050:	b508      	push	{r3, lr}
   bd052:	4b02      	ldr	r3, [pc, #8]	; (bd05c <realloc+0xc>)
   bd054:	681b      	ldr	r3, [r3, #0]
   bd056:	689b      	ldr	r3, [r3, #8]
   bd058:	9301      	str	r3, [sp, #4]
   bd05a:	bd08      	pop	{r3, pc}
   bd05c:	0003021c 	.word	0x0003021c

000bd060 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   bd060:	b508      	push	{r3, lr}
   bd062:	4b02      	ldr	r3, [pc, #8]	; (bd06c <siprintf+0xc>)
   bd064:	681b      	ldr	r3, [r3, #0]
   bd066:	691b      	ldr	r3, [r3, #16]
   bd068:	9301      	str	r3, [sp, #4]
   bd06a:	bd08      	pop	{r3, pc}
   bd06c:	0003021c 	.word	0x0003021c

000bd070 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bd070:	b508      	push	{r3, lr}
   bd072:	4b02      	ldr	r3, [pc, #8]	; (bd07c <sscanf+0xc>)
   bd074:	681b      	ldr	r3, [r3, #0]
   bd076:	695b      	ldr	r3, [r3, #20]
   bd078:	9301      	str	r3, [sp, #4]
   bd07a:	bd08      	pop	{r3, pc}
   bd07c:	0003021c 	.word	0x0003021c

000bd080 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bd080:	b508      	push	{r3, lr}
   bd082:	4b02      	ldr	r3, [pc, #8]	; (bd08c <snprintf+0xc>)
   bd084:	681b      	ldr	r3, [r3, #0]
   bd086:	69db      	ldr	r3, [r3, #28]
   bd088:	9301      	str	r3, [sp, #4]
   bd08a:	bd08      	pop	{r3, pc}
   bd08c:	0003021c 	.word	0x0003021c

000bd090 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bd090:	b508      	push	{r3, lr}
   bd092:	4b02      	ldr	r3, [pc, #8]	; (bd09c <vsnprintf+0xc>)
   bd094:	681b      	ldr	r3, [r3, #0]
   bd096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd098:	9301      	str	r3, [sp, #4]
   bd09a:	bd08      	pop	{r3, pc}
   bd09c:	0003021c 	.word	0x0003021c

000bd0a0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bd0a0:	b508      	push	{r3, lr}
   bd0a2:	4b02      	ldr	r3, [pc, #8]	; (bd0ac <abort+0xc>)
   bd0a4:	681b      	ldr	r3, [r3, #0]
   bd0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd0a8:	9301      	str	r3, [sp, #4]
   bd0aa:	bd08      	pop	{r3, pc}
   bd0ac:	0003021c 	.word	0x0003021c

000bd0b0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bd0b0:	b508      	push	{r3, lr}
   bd0b2:	4b02      	ldr	r3, [pc, #8]	; (bd0bc <_malloc_r+0xc>)
   bd0b4:	681b      	ldr	r3, [r3, #0]
   bd0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd0b8:	9301      	str	r3, [sp, #4]
   bd0ba:	bd08      	pop	{r3, pc}
   bd0bc:	0003021c 	.word	0x0003021c

000bd0c0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bd0c0:	b508      	push	{r3, lr}
   bd0c2:	4b02      	ldr	r3, [pc, #8]	; (bd0cc <__errno+0xc>)
   bd0c4:	681b      	ldr	r3, [r3, #0]
   bd0c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd0c8:	9301      	str	r3, [sp, #4]
   bd0ca:	bd08      	pop	{r3, pc}
   bd0cc:	0003021c 	.word	0x0003021c

000bd0d0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bd0d0:	b508      	push	{r3, lr}
   bd0d2:	4b02      	ldr	r3, [pc, #8]	; (bd0dc <__assert_func+0xc>)
   bd0d4:	681b      	ldr	r3, [r3, #0]
   bd0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd0d8:	9301      	str	r3, [sp, #4]
   bd0da:	bd08      	pop	{r3, pc}
   bd0dc:	0003021c 	.word	0x0003021c

000bd0e0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bd0e0:	b508      	push	{r3, lr}
   bd0e2:	4b02      	ldr	r3, [pc, #8]	; (bd0ec <newlib_impure_ptr_callback+0xc>)
   bd0e4:	681b      	ldr	r3, [r3, #0]
   bd0e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd0e8:	9301      	str	r3, [sp, #4]
   bd0ea:	bd08      	pop	{r3, pc}
   bd0ec:	0003021c 	.word	0x0003021c

000bd0f0 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   bd0f0:	b508      	push	{r3, lr}
   bd0f2:	4b02      	ldr	r3, [pc, #8]	; (bd0fc <strftime+0xc>)
   bd0f4:	681b      	ldr	r3, [r3, #0]
   bd0f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bd0f8:	9301      	str	r3, [sp, #4]
   bd0fa:	bd08      	pop	{r3, pc}
   bd0fc:	0003021c 	.word	0x0003021c

000bd100 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bd100:	b508      	push	{r3, lr}
   bd102:	4b02      	ldr	r3, [pc, #8]	; (bd10c <localtime_r+0xc>)
   bd104:	681b      	ldr	r3, [r3, #0]
   bd106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd108:	9301      	str	r3, [sp, #4]
   bd10a:	bd08      	pop	{r3, pc}
   bd10c:	0003021c 	.word	0x0003021c

000bd110 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bd110:	b508      	push	{r3, lr}
   bd112:	4b02      	ldr	r3, [pc, #8]	; (bd11c <gmtime_r+0xc>)
   bd114:	681b      	ldr	r3, [r3, #0]
   bd116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd118:	9301      	str	r3, [sp, #4]
   bd11a:	bd08      	pop	{r3, pc}
   bd11c:	0003021c 	.word	0x0003021c

000bd120 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   bd120:	b508      	push	{r3, lr}
   bd122:	4b02      	ldr	r3, [pc, #8]	; (bd12c <mktime+0xc>)
   bd124:	681b      	ldr	r3, [r3, #0]
   bd126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd128:	9301      	str	r3, [sp, #4]
   bd12a:	bd08      	pop	{r3, pc}
   bd12c:	0003021c 	.word	0x0003021c

000bd130 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bd130:	2100      	movs	r1, #0
   bd132:	f7ff be53 	b.w	bcddc <system_delay_ms>

000bd136 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bd136:	b510      	push	{r4, lr}
      if (_M_empty())
   bd138:	6883      	ldr	r3, [r0, #8]
   bd13a:	4604      	mov	r4, r0
   bd13c:	b90b      	cbnz	r3, bd142 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bd13e:	f003 f9c7 	bl	c04d0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd142:	68c3      	ldr	r3, [r0, #12]
   bd144:	4798      	blx	r3
      if (_M_manager)
   bd146:	68a3      	ldr	r3, [r4, #8]
   bd148:	b11b      	cbz	r3, bd152 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bd14a:	2203      	movs	r2, #3
   bd14c:	4621      	mov	r1, r4
   bd14e:	4620      	mov	r0, r4
   bd150:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bd152:	4620      	mov	r0, r4
   bd154:	2110      	movs	r1, #16
}
   bd156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bd15a:	f7f6 bfa0 	b.w	b409e <_ZdlPvj>

000bd15e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bd15e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bd160:	6843      	ldr	r3, [r0, #4]
   bd162:	3b01      	subs	r3, #1
    {
   bd164:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bd166:	6043      	str	r3, [r0, #4]
   bd168:	b963      	cbnz	r3, bd184 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bd16a:	6803      	ldr	r3, [r0, #0]
   bd16c:	689b      	ldr	r3, [r3, #8]
   bd16e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bd170:	68a3      	ldr	r3, [r4, #8]
   bd172:	3b01      	subs	r3, #1
   bd174:	60a3      	str	r3, [r4, #8]
   bd176:	b92b      	cbnz	r3, bd184 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bd178:	6823      	ldr	r3, [r4, #0]
   bd17a:	4620      	mov	r0, r4
   bd17c:	68db      	ldr	r3, [r3, #12]
    }
   bd17e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bd182:	4718      	bx	r3
    }
   bd184:	bd10      	pop	{r4, pc}

000bd186 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd186:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bd188:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd18c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bd18e:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bd192:	42ae      	cmp	r6, r5
   bd194:	d004      	beq.n	bd1a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bd196:	4628      	mov	r0, r5
   bd198:	f002 facc 	bl	bf734 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bd19c:	3510      	adds	r5, #16
   bd19e:	e7f8      	b.n	bd192 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bd1a0:	6820      	ldr	r0, [r4, #0]
   bd1a2:	f7ff ff4d 	bl	bd040 <free>
    AllocatorT::free(data_);
}
   bd1a6:	4620      	mov	r0, r4
   bd1a8:	bd70      	pop	{r4, r5, r6, pc}
	...

000bd1ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   bd1ac:	4802      	ldr	r0, [pc, #8]	; (bd1b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bd1ae:	2300      	movs	r3, #0
   bd1b0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   bd1b2:	f7ff bb4f 	b.w	bc854 <os_mutex_recursive_create>
   bd1b6:	bf00      	nop
   bd1b8:	2003e610 	.word	0x2003e610

000bd1bc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bd1bc:	2200      	movs	r2, #0
   bd1be:	6840      	ldr	r0, [r0, #4]
   bd1c0:	4611      	mov	r1, r2
   bd1c2:	f7ff beed 	b.w	bcfa0 <network_ready>

000bd1c6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bd1c6:	2200      	movs	r2, #0
   bd1c8:	6840      	ldr	r0, [r0, #4]
   bd1ca:	4611      	mov	r1, r2
   bd1cc:	f7ff bf08 	b.w	bcfe0 <network_listening>

000bd1d0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bd1d0:	2200      	movs	r2, #0
   bd1d2:	6840      	ldr	r0, [r0, #4]
   bd1d4:	4611      	mov	r1, r2
   bd1d6:	f7ff bf13 	b.w	bd000 <network_get_listen_timeout>

000bd1da <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bd1da:	6840      	ldr	r0, [r0, #4]
   bd1dc:	2200      	movs	r2, #0
   bd1de:	f7ff bf07 	b.w	bcff0 <network_set_listen_timeout>

000bd1e2 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bd1e2:	6840      	ldr	r0, [r0, #4]
   bd1e4:	2200      	movs	r2, #0
   bd1e6:	f081 0101 	eor.w	r1, r1, #1
   bd1ea:	f7ff bef1 	b.w	bcfd0 <network_listen>

000bd1ee <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bd1ee:	2300      	movs	r3, #0
   bd1f0:	6840      	ldr	r0, [r0, #4]
   bd1f2:	461a      	mov	r2, r3
   bd1f4:	4619      	mov	r1, r3
   bd1f6:	f7ff bee3 	b.w	bcfc0 <network_off>

000bd1fa <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bd1fa:	2300      	movs	r3, #0
   bd1fc:	6840      	ldr	r0, [r0, #4]
   bd1fe:	461a      	mov	r2, r3
   bd200:	4619      	mov	r1, r3
   bd202:	f7ff bed5 	b.w	bcfb0 <network_on>

000bd206 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bd206:	2200      	movs	r2, #0
   bd208:	6840      	ldr	r0, [r0, #4]
   bd20a:	4611      	mov	r1, r2
   bd20c:	f7ff beb8 	b.w	bcf80 <network_connecting>

000bd210 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bd210:	6840      	ldr	r0, [r0, #4]
   bd212:	2200      	movs	r2, #0
   bd214:	2102      	movs	r1, #2
   bd216:	f7ff bebb 	b.w	bcf90 <network_disconnect>

000bd21a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bd21a:	2300      	movs	r3, #0
   bd21c:	6840      	ldr	r0, [r0, #4]
   bd21e:	461a      	mov	r2, r3
   bd220:	f7ff bea6 	b.w	bcf70 <network_connect>

000bd224 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   bd224:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   bd226:	4b13      	ldr	r3, [pc, #76]	; (bd274 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   bd228:	6003      	str	r3, [r0, #0]
   bd22a:	2518      	movs	r5, #24
   bd22c:	3330      	adds	r3, #48	; 0x30
   bd22e:	b086      	sub	sp, #24
   bd230:	460e      	mov	r6, r1
   bd232:	6043      	str	r3, [r0, #4]
   bd234:	462a      	mov	r2, r5
   bd236:	2100      	movs	r1, #0
   bd238:	4604      	mov	r4, r0
   bd23a:	3008      	adds	r0, #8
   bd23c:	f003 fef0 	bl	c1020 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bd240:	2200      	movs	r2, #0
   bd242:	6870      	ldr	r0, [r6, #4]
   bd244:	4611      	mov	r1, r2
   bd246:	f7ff feab 	bl	bcfa0 <network_ready>
   bd24a:	b178      	cbz	r0, bd26c <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   bd24c:	2100      	movs	r1, #0
   bd24e:	462a      	mov	r2, r5
   bd250:	4668      	mov	r0, sp
   bd252:	f003 fee5 	bl	c1020 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   bd256:	4669      	mov	r1, sp
   bd258:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   bd25a:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   bd25e:	f7ff fab9 	bl	bc7d4 <cellular_signal>
   bd262:	b918      	cbnz	r0, bd26c <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   bd264:	4669      	mov	r1, sp
   bd266:	4620      	mov	r0, r4
   bd268:	f000 f8b8 	bl	bd3dc <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   bd26c:	4620      	mov	r0, r4
   bd26e:	b006      	add	sp, #24
   bd270:	bd70      	pop	{r4, r5, r6, pc}
   bd272:	bf00      	nop
   bd274:	000c4eb8 	.word	0x000c4eb8

000bd278 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bd278:	4b08      	ldr	r3, [pc, #32]	; (bd29c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bd27a:	b510      	push	{r4, lr}
   bd27c:	2428      	movs	r4, #40	; 0x28
   bd27e:	4622      	mov	r2, r4
   bd280:	4618      	mov	r0, r3
   bd282:	2100      	movs	r1, #0
   bd284:	f003 fecc 	bl	c1020 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bd288:	4b05      	ldr	r3, [pc, #20]	; (bd2a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bd28a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bd28c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd290:	6042      	str	r2, [r0, #4]
   bd292:	2204      	movs	r2, #4
   bd294:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bd296:	4a03      	ldr	r2, [pc, #12]	; (bd2a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bd298:	601a      	str	r2, [r3, #0]
   bd29a:	bd10      	pop	{r4, pc}
   bd29c:	2003e61c 	.word	0x2003e61c
   bd2a0:	2003e614 	.word	0x2003e614
   bd2a4:	000c4e7c 	.word	0x000c4e7c

000bd2a8 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   bd2a8:	4770      	bx	lr

000bd2aa <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   bd2aa:	7b00      	ldrb	r0, [r0, #12]
   bd2ac:	4770      	bx	lr

000bd2ae <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bd2ae:	7b03      	ldrb	r3, [r0, #12]
   bd2b0:	b14b      	cbz	r3, bd2c6 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   bd2b2:	6903      	ldr	r3, [r0, #16]
   bd2b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd2b8:	d005      	beq.n	bd2c6 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bd2ba:	6980      	ldr	r0, [r0, #24]
   bd2bc:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   bd2c0:	bf18      	it	ne
   bd2c2:	2001      	movne	r0, #1
   bd2c4:	4770      	bx	lr
   bd2c6:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   bd2c8:	4770      	bx	lr

000bd2ca <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   bd2ca:	6803      	ldr	r3, [r0, #0]
   bd2cc:	6a1b      	ldr	r3, [r3, #32]
   bd2ce:	4718      	bx	r3

000bd2d0 <_ZNK14CellularSignal7printToER5Print>:
{
   bd2d0:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   bd2d2:	6803      	ldr	r3, [r0, #0]
{
   bd2d4:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   bd2d6:	691b      	ldr	r3, [r3, #16]
{
   bd2d8:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   bd2da:	4798      	blx	r3
   bd2dc:	2102      	movs	r1, #2
   bd2de:	4628      	mov	r0, r5
   bd2e0:	f002 f906 	bl	bf4f0 <_ZN5Print5printEfi>
    n += p.print(',');
   bd2e4:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   bd2e6:	4604      	mov	r4, r0
    n += p.print(',');
   bd2e8:	4628      	mov	r0, r5
   bd2ea:	f002 f80b 	bl	bf304 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   bd2ee:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   bd2f0:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   bd2f2:	699b      	ldr	r3, [r3, #24]
   bd2f4:	4630      	mov	r0, r6
   bd2f6:	4798      	blx	r3
   bd2f8:	2102      	movs	r1, #2
   bd2fa:	4628      	mov	r0, r5
   bd2fc:	f002 f8f8 	bl	bf4f0 <_ZN5Print5printEfi>
}
   bd300:	4420      	add	r0, r4
   bd302:	bd70      	pop	{r4, r5, r6, pc}

000bd304 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   bd304:	f1a0 0004 	sub.w	r0, r0, #4
   bd308:	f7ff bfe2 	b.w	bd2d0 <_ZNK14CellularSignal7printToER5Print>

000bd30c <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   bd30c:	b510      	push	{r4, lr}
   bd30e:	2120      	movs	r1, #32
   bd310:	4604      	mov	r4, r0
   bd312:	f7f6 fec4 	bl	b409e <_ZdlPvj>
   bd316:	4620      	mov	r0, r4
   bd318:	bd10      	pop	{r4, pc}
	...

000bd31c <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bd31c:	7b03      	ldrb	r3, [r0, #12]
   bd31e:	b17b      	cbz	r3, bd340 <_ZNK14CellularSignal11getStrengthEv+0x24>
   bd320:	6943      	ldr	r3, [r0, #20]
   bd322:	2b00      	cmp	r3, #0
   bd324:	db0c      	blt.n	bd340 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   bd326:	ee07 3a90 	vmov	s15, r3
   bd32a:	ed9f 7a07 	vldr	s14, [pc, #28]	; bd348 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   bd32e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd332:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd336:	eddf 7a05 	vldr	s15, [pc, #20]	; bd34c <_ZNK14CellularSignal11getStrengthEv+0x30>
   bd33a:	ee20 0a27 	vmul.f32	s0, s0, s15
   bd33e:	4770      	bx	lr
    return -1.0f;
   bd340:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bd344:	4770      	bx	lr
   bd346:	bf00      	nop
   bd348:	477fff00 	.word	0x477fff00
   bd34c:	42c80000 	.word	0x42c80000

000bd350 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bd350:	7b03      	ldrb	r3, [r0, #12]
   bd352:	b163      	cbz	r3, bd36e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bd354:	6903      	ldr	r3, [r0, #16]
   bd356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd35a:	d008      	beq.n	bd36e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bd35c:	ee07 3a90 	vmov	s15, r3
   bd360:	ed9f 7a04 	vldr	s14, [pc, #16]	; bd374 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bd364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd368:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd36c:	4770      	bx	lr
    return 0.0f;
   bd36e:	ed9f 0a02 	vldr	s0, [pc, #8]	; bd378 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bd372:	4770      	bx	lr
   bd374:	42c80000 	.word	0x42c80000
   bd378:	00000000 	.word	0x00000000

000bd37c <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bd37c:	7b03      	ldrb	r3, [r0, #12]
   bd37e:	b17b      	cbz	r3, bd3a0 <_ZNK14CellularSignal10getQualityEv+0x24>
   bd380:	69c3      	ldr	r3, [r0, #28]
   bd382:	2b00      	cmp	r3, #0
   bd384:	db0c      	blt.n	bd3a0 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bd386:	ee07 3a90 	vmov	s15, r3
   bd38a:	ed9f 7a07 	vldr	s14, [pc, #28]	; bd3a8 <_ZNK14CellularSignal10getQualityEv+0x2c>
   bd38e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd392:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd396:	eddf 7a05 	vldr	s15, [pc, #20]	; bd3ac <_ZNK14CellularSignal10getQualityEv+0x30>
   bd39a:	ee20 0a27 	vmul.f32	s0, s0, s15
   bd39e:	4770      	bx	lr
    return -1.0f;
   bd3a0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bd3a4:	4770      	bx	lr
   bd3a6:	bf00      	nop
   bd3a8:	477fff00 	.word	0x477fff00
   bd3ac:	42c80000 	.word	0x42c80000

000bd3b0 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   bd3b0:	7b03      	ldrb	r3, [r0, #12]
   bd3b2:	b163      	cbz	r3, bd3ce <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   bd3b4:	6983      	ldr	r3, [r0, #24]
   bd3b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd3ba:	d008      	beq.n	bd3ce <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   bd3bc:	ee07 3a90 	vmov	s15, r3
   bd3c0:	ed9f 7a04 	vldr	s14, [pc, #16]	; bd3d4 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   bd3c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd3c8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd3cc:	4770      	bx	lr
    return 0.0f;
   bd3ce:	ed9f 0a02 	vldr	s0, [pc, #8]	; bd3d8 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   bd3d2:	4770      	bx	lr
   bd3d4:	42c80000 	.word	0x42c80000
   bd3d8:	00000000 	.word	0x00000000

000bd3dc <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   bd3dc:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   bd3de:	460d      	mov	r5, r1
   bd3e0:	f100 0408 	add.w	r4, r0, #8
   bd3e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd3e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd3e8:	e895 0003 	ldmia.w	r5, {r0, r1}
   bd3ec:	e884 0003 	stmia.w	r4, {r0, r1}
}
   bd3f0:	2001      	movs	r0, #1
   bd3f2:	bd30      	pop	{r4, r5, pc}

000bd3f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bd3f4:	4770      	bx	lr

000bd3f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bd3f6:	2000      	movs	r0, #0
   bd3f8:	4770      	bx	lr

000bd3fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bd3fa:	b510      	push	{r4, lr}
   bd3fc:	2110      	movs	r1, #16
   bd3fe:	4604      	mov	r4, r0
   bd400:	f7f6 fe4d 	bl	b409e <_ZdlPvj>
   bd404:	4620      	mov	r0, r4
   bd406:	bd10      	pop	{r4, pc}

000bd408 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bd408:	b508      	push	{r3, lr}
      { delete this; }
   bd40a:	f7ff fff6 	bl	bd3fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bd40e:	bd08      	pop	{r3, pc}

000bd410 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bd410:	b530      	push	{r4, r5, lr}
        type_(type) {
   bd412:	2200      	movs	r2, #0
   bd414:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bd418:	6002      	str	r2, [r0, #0]
   bd41a:	8084      	strh	r4, [r0, #4]
   bd41c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bd41e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bd420:	680c      	ldr	r4, [r1, #0]
   bd422:	8085      	strh	r5, [r0, #4]
   bd424:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bd426:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bd428:	bd30      	pop	{r4, r5, pc}

000bd42a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bd42a:	b510      	push	{r4, lr}
   bd42c:	4604      	mov	r4, r0
    free((void*)msg_);
   bd42e:	6800      	ldr	r0, [r0, #0]
   bd430:	f7ff fe06 	bl	bd040 <free>
}
   bd434:	4620      	mov	r0, r4
   bd436:	bd10      	pop	{r4, pc}

000bd438 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bd438:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bd43a:	68c4      	ldr	r4, [r0, #12]
   bd43c:	b1f4      	cbz	r4, bd47c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bd43e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bd440:	2b02      	cmp	r3, #2
   bd442:	d103      	bne.n	bd44c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bd444:	f104 000c 	add.w	r0, r4, #12
   bd448:	f7ff ffef 	bl	bd42a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bd44c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bd44e:	b135      	cbz	r5, bd45e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bd450:	4628      	mov	r0, r5
   bd452:	f7f8 f882 	bl	b555a <_ZNSt14_Function_baseD1Ev>
   bd456:	2110      	movs	r1, #16
   bd458:	4628      	mov	r0, r5
   bd45a:	f7f6 fe20 	bl	b409e <_ZdlPvj>
   bd45e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bd460:	b135      	cbz	r5, bd470 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bd462:	4628      	mov	r0, r5
   bd464:	f7f8 f879 	bl	b555a <_ZNSt14_Function_baseD1Ev>
   bd468:	2110      	movs	r1, #16
   bd46a:	4628      	mov	r0, r5
   bd46c:	f7f6 fe17 	bl	b409e <_ZdlPvj>
   bd470:	4620      	mov	r0, r4
   bd472:	2114      	movs	r1, #20
   bd474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd478:	f7f6 be11 	b.w	b409e <_ZdlPvj>
   bd47c:	bd38      	pop	{r3, r4, r5, pc}

000bd47e <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   bd47e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bd480:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   bd482:	4668      	mov	r0, sp
   bd484:	f002 f9a1 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
      if (_M_empty())
   bd488:	68a3      	ldr	r3, [r4, #8]
   bd48a:	b90b      	cbnz	r3, bd490 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   bd48c:	f003 f820 	bl	c04d0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd490:	68e3      	ldr	r3, [r4, #12]
   bd492:	4669      	mov	r1, sp
   bd494:	4620      	mov	r0, r4
   bd496:	4798      	blx	r3
   bd498:	4604      	mov	r4, r0
   bd49a:	4668      	mov	r0, sp
   bd49c:	f002 f94a 	bl	bf734 <_ZN6StringD1Ev>
}
   bd4a0:	4620      	mov	r0, r4
   bd4a2:	b004      	add	sp, #16
   bd4a4:	bd10      	pop	{r4, pc}

000bd4a6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bd4a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bd4a8:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bd4aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bd4ae:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bd4b0:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bd4b2:	461a      	mov	r2, r3
   bd4b4:	4669      	mov	r1, sp
   bd4b6:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bd4b8:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bd4bc:	f8ad 4000 	strh.w	r4, [sp]
   bd4c0:	f7ff fcfe 	bl	bcec0 <spark_function>
}
   bd4c4:	b004      	add	sp, #16
   bd4c6:	bd10      	pop	{r4, pc}

000bd4c8 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bd4c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bd4ca:	230c      	movs	r3, #12
   bd4cc:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bd4d0:	6803      	ldr	r3, [r0, #0]
   bd4d2:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bd4d6:	7a03      	ldrb	r3, [r0, #8]
   bd4d8:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bd4dc:	6843      	ldr	r3, [r0, #4]
   bd4de:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bd4e0:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bd4e2:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bd4e4:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bd4e8:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bd4ea:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bd4ee:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bd4f2:	f7ff fd35 	bl	bcf60 <spark_cloud_disconnect>
}
   bd4f6:	b005      	add	sp, #20
   bd4f8:	f85d fb04 	ldr.w	pc, [sp], #4

000bd4fc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bd4fc:	680b      	ldr	r3, [r1, #0]
   bd4fe:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bd500:	684b      	ldr	r3, [r1, #4]
   bd502:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bd504:	b113      	cbz	r3, bd50c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bd506:	685a      	ldr	r2, [r3, #4]
   bd508:	3201      	adds	r2, #1
   bd50a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bd50c:	4770      	bx	lr

000bd50e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bd50e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd510:	4604      	mov	r4, r0
   bd512:	4668      	mov	r0, sp
   bd514:	460d      	mov	r5, r1
   bd516:	f7ff fff1 	bl	bd4fc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd51a:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bd51c:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd51e:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bd520:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bd522:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bd524:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bd526:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bd528:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bd52a:	f7f7 f885 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bd52e:	b135      	cbz	r5, bd53e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bd530:	1d28      	adds	r0, r5, #4
   bd532:	f7f7 f881 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bd536:	2108      	movs	r1, #8
   bd538:	4628      	mov	r0, r5
   bd53a:	f7f6 fdb0 	bl	b409e <_ZdlPvj>
        return p;
    }
   bd53e:	4620      	mov	r0, r4
   bd540:	b003      	add	sp, #12
   bd542:	bd30      	pop	{r4, r5, pc}

000bd544 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bd544:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bd546:	b510      	push	{r4, lr}
      if (_M_empty())
   bd548:	b90a      	cbnz	r2, bd54e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bd54a:	f002 ffc1 	bl	c04d0 <_ZSt25__throw_bad_function_callv>
    }
   bd54e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd552:	68c3      	ldr	r3, [r0, #12]
   bd554:	4718      	bx	r3

000bd556 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bd556:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bd558:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bd55a:	f100 0110 	add.w	r1, r0, #16
   bd55e:	f7ff fff1 	bl	bd544 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bd562:	bd08      	pop	{r3, pc}

000bd564 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bd564:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bd566:	b510      	push	{r4, lr}
      if (_M_empty())
   bd568:	b90a      	cbnz	r2, bd56e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bd56a:	f002 ffb1 	bl	c04d0 <_ZSt25__throw_bad_function_callv>
    }
   bd56e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd572:	68c3      	ldr	r3, [r0, #12]
   bd574:	4718      	bx	r3

000bd576 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bd576:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bd578:	6800      	ldr	r0, [r0, #0]
   bd57a:	f100 0110 	add.w	r1, r0, #16
   bd57e:	f7ff fff1 	bl	bd564 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bd582:	bd08      	pop	{r3, pc}

000bd584 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bd584:	b538      	push	{r3, r4, r5, lr}
   bd586:	2300      	movs	r3, #0
   bd588:	4604      	mov	r4, r0
   bd58a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd58c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bd58e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd590:	f7f6 fd81 	bl	b4096 <_Znwj>
   bd594:	b128      	cbz	r0, bd5a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bd596:	2301      	movs	r3, #1
   bd598:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bd59c:	4b02      	ldr	r3, [pc, #8]	; (bd5a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bd59e:	6003      	str	r3, [r0, #0]
   bd5a0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd5a2:	6020      	str	r0, [r4, #0]
	}
   bd5a4:	4620      	mov	r0, r4
   bd5a6:	bd38      	pop	{r3, r4, r5, pc}
   bd5a8:	000c4ef4 	.word	0x000c4ef4

000bd5ac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bd5ac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bd5ae:	2300      	movs	r3, #0
   bd5b0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bd5b2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bd5b4:	4604      	mov	r4, r0
   bd5b6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bd5b8:	b12b      	cbz	r3, bd5c6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bd5ba:	2202      	movs	r2, #2
   bd5bc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bd5be:	68eb      	ldr	r3, [r5, #12]
   bd5c0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bd5c2:	68ab      	ldr	r3, [r5, #8]
   bd5c4:	60a3      	str	r3, [r4, #8]
    }
   bd5c6:	4620      	mov	r0, r4
   bd5c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000bd5cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bd5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd5ce:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bd5d0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bd5d2:	4668      	mov	r0, sp
   bd5d4:	f7ff ff1c 	bl	bd410 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bd5d8:	f04f 0302 	mov.w	r3, #2
   bd5dc:	e8d4 2f4f 	ldrexb	r2, [r4]
   bd5e0:	2a00      	cmp	r2, #0
   bd5e2:	d103      	bne.n	bd5ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bd5e4:	e8c4 3f41 	strexb	r1, r3, [r4]
   bd5e8:	2900      	cmp	r1, #0
   bd5ea:	d1f7      	bne.n	bd5dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bd5ec:	d125      	bne.n	bd63a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bd5ee:	f104 050c 	add.w	r5, r4, #12
   bd5f2:	4669      	mov	r1, sp
   bd5f4:	4628      	mov	r0, r5
   bd5f6:	f7ff ff0b 	bl	bd410 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bd5fa:	f3bf 8f5b 	dmb	ish
   bd5fe:	2301      	movs	r3, #1
   bd600:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bd602:	2000      	movs	r0, #0
   bd604:	f104 0308 	add.w	r3, r4, #8
   bd608:	f3bf 8f5b 	dmb	ish
   bd60c:	e853 6f00 	ldrex	r6, [r3]
   bd610:	e843 0200 	strex	r2, r0, [r3]
   bd614:	2a00      	cmp	r2, #0
   bd616:	d1f9      	bne.n	bd60c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bd618:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bd61c:	b16e      	cbz	r6, bd63a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bd61e:	f7ff fbf5 	bl	bce0c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bd622:	b178      	cbz	r0, bd644 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bd624:	4629      	mov	r1, r5
   bd626:	4630      	mov	r0, r6
   bd628:	f7ff ff8c 	bl	bd544 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bd62c:	4630      	mov	r0, r6
   bd62e:	f7f7 ff94 	bl	b555a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bd632:	2110      	movs	r1, #16
   bd634:	4630      	mov	r0, r6
   bd636:	f7f6 fd32 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bd63a:	4668      	mov	r0, sp
   bd63c:	f7ff fef5 	bl	bd42a <_ZN8particle5ErrorD1Ev>
    }
   bd640:	b009      	add	sp, #36	; 0x24
   bd642:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bd644:	4631      	mov	r1, r6
   bd646:	a802      	add	r0, sp, #8
   bd648:	f7ff ffb0 	bl	bd5ac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bd64c:	68e0      	ldr	r0, [r4, #12]
   bd64e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bd652:	b108      	cbz	r0, bd658 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bd654:	f003 fd92 	bl	c117c <strdup>
        type_(type) {
   bd658:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bd65a:	2010      	movs	r0, #16
   bd65c:	f8ad 501c 	strh.w	r5, [sp, #28]
   bd660:	f7f6 fd19 	bl	b4096 <_Znwj>
   bd664:	4605      	mov	r5, r0
   bd666:	b1e8      	cbz	r0, bd6a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bd668:	2700      	movs	r7, #0
   bd66a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd66c:	2018      	movs	r0, #24
   bd66e:	f7f6 fd12 	bl	b4096 <_Znwj>
   bd672:	4604      	mov	r4, r0
   bd674:	b188      	cbz	r0, bd69a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bd676:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bd678:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bd67a:	a802      	add	r0, sp, #8
   bd67c:	f7fa ff33 	bl	b84e6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd680:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bd682:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bd684:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd686:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bd688:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bd68a:	a906      	add	r1, sp, #24
   bd68c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bd68e:	60e3      	str	r3, [r4, #12]
   bd690:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bd694:	9205      	str	r2, [sp, #20]
   bd696:	f7ff febb 	bl	bd410 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bd69a:	4b08      	ldr	r3, [pc, #32]	; (bd6bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bd69c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bd69e:	4b08      	ldr	r3, [pc, #32]	; (bd6c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd6a0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bd6a2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bd6a4:	a806      	add	r0, sp, #24
   bd6a6:	f7ff fec0 	bl	bd42a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bd6aa:	a802      	add	r0, sp, #8
   bd6ac:	f7f7 ff55 	bl	b555a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bd6b0:	2200      	movs	r2, #0
   bd6b2:	4629      	mov	r1, r5
   bd6b4:	4803      	ldr	r0, [pc, #12]	; (bd6c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bd6b6:	f7ff fbb1 	bl	bce1c <application_thread_invoke>
   bd6ba:	e7b7      	b.n	bd62c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bd6bc:	000bd557 	.word	0x000bd557
   bd6c0:	000bd7d9 	.word	0x000bd7d9
   bd6c4:	000bd137 	.word	0x000bd137

000bd6c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bd6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd6cc:	b08b      	sub	sp, #44	; 0x2c
   bd6ce:	4605      	mov	r5, r0
   bd6d0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bd6d4:	460f      	mov	r7, r1
   bd6d6:	4690      	mov	r8, r2
   bd6d8:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bd6da:	f7ff fc09 	bl	bcef0 <spark_cloud_flag_connected>
   bd6de:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bd6e0:	4683      	mov	fp, r0
   bd6e2:	bb38      	cbnz	r0, bd734 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bd6e4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bd6e8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bd6ea:	a905      	add	r1, sp, #20
   bd6ec:	4630      	mov	r0, r6
   bd6ee:	f8ad 3018 	strh.w	r3, [sp, #24]
   bd6f2:	f7ff fe8d 	bl	bd410 <_ZN8particle5ErrorC1EOS0_>
   bd6f6:	2014      	movs	r0, #20
   bd6f8:	f7f6 fccd 	bl	b4096 <_Znwj>
   bd6fc:	4604      	mov	r4, r0
   bd6fe:	b148      	cbz	r0, bd714 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bd700:	2302      	movs	r3, #2
   bd702:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bd704:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bd706:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bd70a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bd70c:	4631      	mov	r1, r6
   bd70e:	300c      	adds	r0, #12
   bd710:	f7ff fe7e 	bl	bd410 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bd714:	4628      	mov	r0, r5
	: __shared_count(__p)
   bd716:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bd718:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bd71c:	f7ff ff32 	bl	bd584 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bd720:	4630      	mov	r0, r6
   bd722:	f7ff fe82 	bl	bd42a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bd726:	a805      	add	r0, sp, #20
   bd728:	f7ff fe7f 	bl	bd42a <_ZN8particle5ErrorD1Ev>
}
   bd72c:	4628      	mov	r0, r5
   bd72e:	b00b      	add	sp, #44	; 0x2c
   bd730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bd734:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bd736:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bd738:	2014      	movs	r0, #20
   bd73a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bd73e:	9307      	str	r3, [sp, #28]
   bd740:	f7f6 fca9 	bl	b4096 <_Znwj>
   bd744:	4601      	mov	r1, r0
   bd746:	b118      	cbz	r0, bd750 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bd748:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bd74c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bd74e:	7044      	strb	r4, [r0, #1]
   bd750:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bd752:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bd754:	f7ff ff16 	bl	bd584 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bd758:	4b1e      	ldr	r3, [pc, #120]	; (bd7d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bd75a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bd75c:	2008      	movs	r0, #8
   bd75e:	f7f6 fc9a 	bl	b4096 <_Znwj>
   bd762:	4604      	mov	r4, r0
   bd764:	b110      	cbz	r0, bd76c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bd766:	a903      	add	r1, sp, #12
   bd768:	f7ff fec8 	bl	bd4fc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bd76c:	9600      	str	r6, [sp, #0]
   bd76e:	fa5f f38a 	uxtb.w	r3, sl
   bd772:	464a      	mov	r2, r9
   bd774:	4641      	mov	r1, r8
   bd776:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bd778:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bd77a:	f7ff fbc9 	bl	bcf10 <spark_send_event>
   bd77e:	b9b8      	cbnz	r0, bd7b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bd780:	9b03      	ldr	r3, [sp, #12]
   bd782:	785b      	ldrb	r3, [r3, #1]
   bd784:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bd788:	b993      	cbnz	r3, bd7b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bd78a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bd78e:	a905      	add	r1, sp, #20
   bd790:	a803      	add	r0, sp, #12
   bd792:	9205      	str	r2, [sp, #20]
   bd794:	f8ad 3018 	strh.w	r3, [sp, #24]
   bd798:	f7ff ff18 	bl	bd5cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bd79c:	a805      	add	r0, sp, #20
   bd79e:	f7ff fe44 	bl	bd42a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bd7a2:	a805      	add	r0, sp, #20
   bd7a4:	9909      	ldr	r1, [sp, #36]	; 0x24
   bd7a6:	f7ff feb2 	bl	bd50e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bd7aa:	a806      	add	r0, sp, #24
   bd7ac:	f7f6 ff44 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bd7b0:	a903      	add	r1, sp, #12
   bd7b2:	a805      	add	r0, sp, #20
   bd7b4:	f7ff fea2 	bl	bd4fc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd7b8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bd7ba:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd7bc:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bd7be:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bd7c0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bd7c2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bd7c4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bd7c6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bd7c8:	f7f6 ff36 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bd7cc:	a804      	add	r0, sp, #16
   bd7ce:	f7f6 ff33 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bd7d2:	e7ab      	b.n	bd72c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bd7d4:	000bd855 	.word	0x000bd855

000bd7d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bd7d8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bd7da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd7dc:	4605      	mov	r5, r0
	switch (__op)
   bd7de:	d103      	bne.n	bd7e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bd7e0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bd7e2:	6003      	str	r3, [r0, #0]
      }
   bd7e4:	2000      	movs	r0, #0
   bd7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bd7e8:	2a02      	cmp	r2, #2
   bd7ea:	d010      	beq.n	bd80e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bd7ec:	2a03      	cmp	r2, #3
   bd7ee:	d1f9      	bne.n	bd7e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bd7f0:	6804      	ldr	r4, [r0, #0]
   bd7f2:	2c00      	cmp	r4, #0
   bd7f4:	d0f6      	beq.n	bd7e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bd7f6:	f104 0010 	add.w	r0, r4, #16
   bd7fa:	f7ff fe16 	bl	bd42a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bd7fe:	4620      	mov	r0, r4
   bd800:	f7f7 feab 	bl	b555a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bd804:	2118      	movs	r1, #24
   bd806:	4620      	mov	r0, r4
   bd808:	f7f6 fc49 	bl	b409e <_ZdlPvj>
   bd80c:	e7ea      	b.n	bd7e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bd80e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bd810:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bd812:	f7f6 fc40 	bl	b4096 <_Znwj>
   bd816:	4604      	mov	r4, r0
   bd818:	b150      	cbz	r0, bd830 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bd81a:	4631      	mov	r1, r6
   bd81c:	f7ff fec6 	bl	bd5ac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bd820:	6930      	ldr	r0, [r6, #16]
   bd822:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bd826:	b108      	cbz	r0, bd82c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bd828:	f003 fca8 	bl	c117c <strdup>
        type_(type) {
   bd82c:	6120      	str	r0, [r4, #16]
   bd82e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bd830:	602c      	str	r4, [r5, #0]
	}
   bd832:	e7d7      	b.n	bd7e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bd834 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bd834:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bd836:	2300      	movs	r3, #0
   bd838:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bd83a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bd83c:	4604      	mov	r4, r0
   bd83e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bd840:	b12b      	cbz	r3, bd84e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bd842:	2202      	movs	r2, #2
   bd844:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bd846:	68eb      	ldr	r3, [r5, #12]
   bd848:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bd84a:	68ab      	ldr	r3, [r5, #8]
   bd84c:	60a3      	str	r3, [r4, #8]
    }
   bd84e:	4620      	mov	r0, r4
   bd850:	bd38      	pop	{r3, r4, r5, pc}
	...

000bd854 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bd854:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd856:	b089      	sub	sp, #36	; 0x24
   bd858:	4604      	mov	r4, r0
   bd85a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bd85c:	a801      	add	r0, sp, #4
   bd85e:	4611      	mov	r1, r2
   bd860:	f7ff fe55 	bl	bd50e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bd864:	b1a4      	cbz	r4, bd890 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bd866:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bd868:	b11d      	cbz	r5, bd872 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bd86a:	4628      	mov	r0, r5
   bd86c:	f003 fc86 	bl	c117c <strdup>
   bd870:	4605      	mov	r5, r0
   bd872:	a801      	add	r0, sp, #4
   bd874:	a903      	add	r1, sp, #12
        type_(type) {
   bd876:	9503      	str	r5, [sp, #12]
   bd878:	f8ad 4010 	strh.w	r4, [sp, #16]
   bd87c:	f7ff fea6 	bl	bd5cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bd880:	a803      	add	r0, sp, #12
   bd882:	f7ff fdd2 	bl	bd42a <_ZN8particle5ErrorD1Ev>
   bd886:	a802      	add	r0, sp, #8
   bd888:	f7f6 fed6 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bd88c:	b009      	add	sp, #36	; 0x24
   bd88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bd890:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bd892:	2301      	movs	r3, #1
   bd894:	e8d5 2f4f 	ldrexb	r2, [r5]
   bd898:	2a00      	cmp	r2, #0
   bd89a:	d103      	bne.n	bd8a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bd89c:	e8c5 3f41 	strexb	r1, r3, [r5]
   bd8a0:	2900      	cmp	r1, #0
   bd8a2:	d1f7      	bne.n	bd894 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bd8a4:	d1ef      	bne.n	bd886 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bd8a6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bd8a8:	f3bf 8f5b 	dmb	ish
   bd8ac:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bd8ae:	1d2b      	adds	r3, r5, #4
   bd8b0:	f3bf 8f5b 	dmb	ish
   bd8b4:	e853 6f00 	ldrex	r6, [r3]
   bd8b8:	e843 4200 	strex	r2, r4, [r3]
   bd8bc:	2a00      	cmp	r2, #0
   bd8be:	d1f9      	bne.n	bd8b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bd8c0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bd8c4:	2e00      	cmp	r6, #0
   bd8c6:	d0de      	beq.n	bd886 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bd8c8:	4620      	mov	r0, r4
   bd8ca:	f7ff fa9f 	bl	bce0c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bd8ce:	4607      	mov	r7, r0
   bd8d0:	b160      	cbz	r0, bd8ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bd8d2:	f105 010c 	add.w	r1, r5, #12
   bd8d6:	4630      	mov	r0, r6
   bd8d8:	f7ff fe44 	bl	bd564 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bd8dc:	4630      	mov	r0, r6
   bd8de:	f7f7 fe3c 	bl	b555a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bd8e2:	2110      	movs	r1, #16
   bd8e4:	4630      	mov	r0, r6
   bd8e6:	f7f6 fbda 	bl	b409e <_ZdlPvj>
   bd8ea:	e7cc      	b.n	bd886 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bd8ec:	4631      	mov	r1, r6
   bd8ee:	a803      	add	r0, sp, #12
   bd8f0:	f7ff ffa0 	bl	bd834 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bd8f4:	7b2b      	ldrb	r3, [r5, #12]
   bd8f6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bd8fa:	2010      	movs	r0, #16
   bd8fc:	f7f6 fbcb 	bl	b4096 <_Znwj>
   bd900:	4605      	mov	r5, r0
   bd902:	b1d0      	cbz	r0, bd93a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bd904:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd906:	2014      	movs	r0, #20
   bd908:	f7f6 fbc5 	bl	b4096 <_Znwj>
   bd90c:	4604      	mov	r4, r0
   bd90e:	b178      	cbz	r0, bd930 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bd910:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bd912:	4601      	mov	r1, r0
   bd914:	a803      	add	r0, sp, #12
   bd916:	f7fa fde6 	bl	b84e6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd91a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bd91c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bd91e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd920:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bd922:	9205      	str	r2, [sp, #20]
   bd924:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bd926:	60e3      	str	r3, [r4, #12]
   bd928:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bd92c:	9206      	str	r2, [sp, #24]
   bd92e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bd930:	4b06      	ldr	r3, [pc, #24]	; (bd94c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bd932:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bd934:	4b06      	ldr	r3, [pc, #24]	; (bd950 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd936:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bd938:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bd93a:	a803      	add	r0, sp, #12
   bd93c:	f7f7 fe0d 	bl	b555a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bd940:	2200      	movs	r2, #0
   bd942:	4629      	mov	r1, r5
   bd944:	4803      	ldr	r0, [pc, #12]	; (bd954 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bd946:	f7ff fa69 	bl	bce1c <application_thread_invoke>
   bd94a:	e7c7      	b.n	bd8dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bd94c:	000bd577 	.word	0x000bd577
   bd950:	000bd959 	.word	0x000bd959
   bd954:	000bd137 	.word	0x000bd137

000bd958 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bd958:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bd95a:	b570      	push	{r4, r5, r6, lr}
   bd95c:	4604      	mov	r4, r0
	switch (__op)
   bd95e:	d103      	bne.n	bd968 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bd960:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bd962:	6003      	str	r3, [r0, #0]
      }
   bd964:	2000      	movs	r0, #0
   bd966:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bd968:	2a02      	cmp	r2, #2
   bd96a:	d00c      	beq.n	bd986 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bd96c:	2a03      	cmp	r2, #3
   bd96e:	d1f9      	bne.n	bd964 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bd970:	6804      	ldr	r4, [r0, #0]
   bd972:	2c00      	cmp	r4, #0
   bd974:	d0f6      	beq.n	bd964 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bd976:	4620      	mov	r0, r4
   bd978:	f7f7 fdef 	bl	b555a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bd97c:	2114      	movs	r1, #20
   bd97e:	4620      	mov	r0, r4
   bd980:	f7f6 fb8d 	bl	b409e <_ZdlPvj>
   bd984:	e7ee      	b.n	bd964 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bd986:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bd988:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bd98a:	f7f6 fb84 	bl	b4096 <_Znwj>
   bd98e:	4605      	mov	r5, r0
   bd990:	b120      	cbz	r0, bd99c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bd992:	4631      	mov	r1, r6
   bd994:	f7ff ff4e 	bl	bd834 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bd998:	7c33      	ldrb	r3, [r6, #16]
   bd99a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bd99c:	6025      	str	r5, [r4, #0]
	}
   bd99e:	e7e1      	b.n	bd964 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bd9a0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bd9a0:	2200      	movs	r2, #0
   bd9a2:	6840      	ldr	r0, [r0, #4]
   bd9a4:	4611      	mov	r1, r2
   bd9a6:	f7ff bb1b 	b.w	bcfe0 <network_listening>

000bd9aa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bd9aa:	2200      	movs	r2, #0
   bd9ac:	6840      	ldr	r0, [r0, #4]
   bd9ae:	4611      	mov	r1, r2
   bd9b0:	f7ff bb26 	b.w	bd000 <network_get_listen_timeout>

000bd9b4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bd9b4:	6840      	ldr	r0, [r0, #4]
   bd9b6:	2200      	movs	r2, #0
   bd9b8:	f7ff bb1a 	b.w	bcff0 <network_set_listen_timeout>

000bd9bc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bd9bc:	6840      	ldr	r0, [r0, #4]
   bd9be:	2200      	movs	r2, #0
   bd9c0:	f081 0101 	eor.w	r1, r1, #1
   bd9c4:	f7ff bb04 	b.w	bcfd0 <network_listen>

000bd9c8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bd9c8:	2300      	movs	r3, #0
   bd9ca:	6840      	ldr	r0, [r0, #4]
   bd9cc:	461a      	mov	r2, r3
   bd9ce:	4619      	mov	r1, r3
   bd9d0:	f7ff baf6 	b.w	bcfc0 <network_off>

000bd9d4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bd9d4:	2300      	movs	r3, #0
   bd9d6:	6840      	ldr	r0, [r0, #4]
   bd9d8:	461a      	mov	r2, r3
   bd9da:	4619      	mov	r1, r3
   bd9dc:	f7ff bae8 	b.w	bcfb0 <network_on>

000bd9e0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bd9e0:	2200      	movs	r2, #0
   bd9e2:	6840      	ldr	r0, [r0, #4]
   bd9e4:	4611      	mov	r1, r2
   bd9e6:	f7ff badb 	b.w	bcfa0 <network_ready>

000bd9ea <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bd9ea:	2200      	movs	r2, #0
   bd9ec:	6840      	ldr	r0, [r0, #4]
   bd9ee:	4611      	mov	r1, r2
   bd9f0:	f7ff bac6 	b.w	bcf80 <network_connecting>

000bd9f4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bd9f4:	6840      	ldr	r0, [r0, #4]
   bd9f6:	2200      	movs	r2, #0
   bd9f8:	2102      	movs	r1, #2
   bd9fa:	f7ff bac9 	b.w	bcf90 <network_disconnect>

000bd9fe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bd9fe:	2300      	movs	r3, #0
   bda00:	6840      	ldr	r0, [r0, #4]
   bda02:	461a      	mov	r2, r3
   bda04:	f7ff bab4 	b.w	bcf70 <network_connect>

000bda08 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bda08:	4b02      	ldr	r3, [pc, #8]	; (bda14 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bda0a:	2203      	movs	r2, #3
   bda0c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bda0e:	4a02      	ldr	r2, [pc, #8]	; (bda18 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bda10:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bda12:	4770      	bx	lr
   bda14:	2003e644 	.word	0x2003e644
   bda18:	000c4f10 	.word	0x000c4f10

000bda1c <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   bda1c:	6800      	ldr	r0, [r0, #0]
   bda1e:	f000 b8f3 	b.w	bdc08 <_ZN7TwoWire4lockEv>

000bda22 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   bda22:	b510      	push	{r4, lr}
   bda24:	4604      	mov	r4, r0
      lock_(_lock) {
   bda26:	6001      	str	r1, [r0, #0]
   bda28:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   bda2a:	b10a      	cbz	r2, bda30 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   bda2c:	f7ff fff6 	bl	bda1c <_ZN9FuelGauge4lockEv>
}
   bda30:	4620      	mov	r0, r4
   bda32:	bd10      	pop	{r4, pc}

000bda34 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   bda34:	b513      	push	{r0, r1, r4, lr}
   bda36:	4604      	mov	r4, r0
   bda38:	9101      	str	r1, [sp, #4]
            return &Wire1;
   bda3a:	f002 fcdb 	bl	c03f4 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   bda3e:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   bda40:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   bda42:	4620      	mov	r0, r4
   bda44:	f7ff ffed 	bl	bda22 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   bda48:	4620      	mov	r0, r4
   bda4a:	b002      	add	sp, #8
   bda4c:	bd10      	pop	{r4, pc}

000bda4e <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   bda4e:	6800      	ldr	r0, [r0, #0]
   bda50:	f000 b8e3 	b.w	bdc1a <_ZN7TwoWire6unlockEv>

000bda54 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   bda54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bda58:	4604      	mov	r4, r0
   bda5a:	461d      	mov	r5, r3
   bda5c:	460f      	mov	r7, r1
   bda5e:	4616      	mov	r6, r2
      { _M_device.lock(); }
   bda60:	f7ff ffdc 	bl	bda1c <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bda64:	2236      	movs	r2, #54	; 0x36
   bda66:	2300      	movs	r3, #0
   bda68:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bda6c:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   bda6e:	f04f 0801 	mov.w	r8, #1
   bda72:	230a      	movs	r3, #10
   bda74:	4669      	mov	r1, sp
   bda76:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bda7a:	f000 f8a9 	bl	bdbd0 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   bda7e:	6820      	ldr	r0, [r4, #0]
   bda80:	6803      	ldr	r3, [r0, #0]
   bda82:	4639      	mov	r1, r7
   bda84:	689b      	ldr	r3, [r3, #8]
   bda86:	4798      	blx	r3
    i2c_.write(MSB);
   bda88:	6820      	ldr	r0, [r4, #0]
   bda8a:	6803      	ldr	r3, [r0, #0]
   bda8c:	4631      	mov	r1, r6
   bda8e:	689b      	ldr	r3, [r3, #8]
   bda90:	4798      	blx	r3
    i2c_.write(LSB);
   bda92:	6820      	ldr	r0, [r4, #0]
   bda94:	6803      	ldr	r3, [r0, #0]
   bda96:	4629      	mov	r1, r5
   bda98:	689b      	ldr	r3, [r3, #8]
   bda9a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bda9c:	4641      	mov	r1, r8
   bda9e:	6820      	ldr	r0, [r4, #0]
   bdaa0:	f000 f8ae 	bl	bdc00 <_ZN7TwoWire15endTransmissionEh>
   bdaa4:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   bdaa6:	4620      	mov	r0, r4
   bdaa8:	bf0c      	ite	eq
   bdaaa:	2500      	moveq	r5, #0
   bdaac:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   bdab0:	f7ff ffcd 	bl	bda4e <_ZN9FuelGauge6unlockEv>
}
   bdab4:	4628      	mov	r0, r5
   bdab6:	b004      	add	sp, #16
   bdab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bdabc <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   bdabc:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   bdabe:	2240      	movs	r2, #64	; 0x40
   bdac0:	2300      	movs	r3, #0
   bdac2:	2106      	movs	r1, #6
   bdac4:	f7ff ffc6 	bl	bda54 <_ZN9FuelGauge13writeRegisterEhhh>
}
   bdac8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bdacc:	bd08      	pop	{r3, pc}

000bdace <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bdace:	4770      	bx	lr

000bdad0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bdad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdad2:	4606      	mov	r6, r0
   bdad4:	4615      	mov	r5, r2
   bdad6:	460c      	mov	r4, r1
   bdad8:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bdada:	42bc      	cmp	r4, r7
   bdadc:	d006      	beq.n	bdaec <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bdade:	6833      	ldr	r3, [r6, #0]
   bdae0:	f814 1b01 	ldrb.w	r1, [r4], #1
   bdae4:	689b      	ldr	r3, [r3, #8]
   bdae6:	4630      	mov	r0, r6
   bdae8:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bdaea:	e7f6      	b.n	bdada <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bdaec:	4628      	mov	r0, r5
   bdaee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bdaf0 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bdaf0:	7c00      	ldrb	r0, [r0, #16]
   bdaf2:	2200      	movs	r2, #0
   bdaf4:	f7fe bf7e 	b.w	bc9f4 <hal_i2c_write>

000bdaf8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bdaf8:	7c00      	ldrb	r0, [r0, #16]
   bdafa:	2100      	movs	r1, #0
   bdafc:	f7fe bf82 	b.w	bca04 <hal_i2c_available>

000bdb00 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bdb00:	7c00      	ldrb	r0, [r0, #16]
   bdb02:	2100      	movs	r1, #0
   bdb04:	f7fe bf86 	b.w	bca14 <hal_i2c_read>

000bdb08 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bdb08:	7c00      	ldrb	r0, [r0, #16]
   bdb0a:	2100      	movs	r1, #0
   bdb0c:	f7fe bf8a 	b.w	bca24 <hal_i2c_peek>

000bdb10 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bdb10:	7c00      	ldrb	r0, [r0, #16]
   bdb12:	2100      	movs	r1, #0
   bdb14:	f7fe bf8e 	b.w	bca34 <hal_i2c_flush>

000bdb18 <_ZN7TwoWireD0Ev>:
   bdb18:	b510      	push	{r4, lr}
   bdb1a:	2114      	movs	r1, #20
   bdb1c:	4604      	mov	r4, r0
   bdb1e:	f7f6 fabe 	bl	b409e <_ZdlPvj>
   bdb22:	4620      	mov	r0, r4
   bdb24:	bd10      	pop	{r4, pc}
	...

000bdb28 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bdb28:	b538      	push	{r3, r4, r5, lr}
   bdb2a:	4604      	mov	r4, r0
   bdb2c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bdb2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bdb32:	2200      	movs	r2, #0
   bdb34:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bdb38:	4b09      	ldr	r3, [pc, #36]	; (bdb60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   bdb3a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bdb3c:	4608      	mov	r0, r1
   bdb3e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   bdb40:	4629      	mov	r1, r5
   bdb42:	f7fe ff87 	bl	bca54 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bdb46:	30bf      	adds	r0, #191	; 0xbf
   bdb48:	d108      	bne.n	bdb5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   bdb4a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bdb4c:	07db      	lsls	r3, r3, #31
   bdb4e:	d505      	bpl.n	bdb5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   bdb50:	6868      	ldr	r0, [r5, #4]
   bdb52:	f7ff fa75 	bl	bd040 <free>
    free(conf.tx_buffer);
   bdb56:	68e8      	ldr	r0, [r5, #12]
   bdb58:	f7ff fa72 	bl	bd040 <free>
}
   bdb5c:	4620      	mov	r0, r4
   bdb5e:	bd38      	pop	{r3, r4, r5, pc}
   bdb60:	000c4f4c 	.word	0x000c4f4c

000bdb64 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bdb64:	2300      	movs	r3, #0
   bdb66:	7c00      	ldrb	r0, [r0, #16]
   bdb68:	461a      	mov	r2, r3
   bdb6a:	4619      	mov	r1, r3
   bdb6c:	f7fe bf2a 	b.w	bc9c4 <hal_i2c_begin>

000bdb70 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bdb70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bdb72:	2200      	movs	r2, #0
   bdb74:	2314      	movs	r3, #20
   bdb76:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bdb7a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bdb7e:	780b      	ldrb	r3, [r1, #0]
   bdb80:	f88d 3008 	strb.w	r3, [sp, #8]
   bdb84:	684b      	ldr	r3, [r1, #4]
   bdb86:	9303      	str	r3, [sp, #12]
   bdb88:	68cb      	ldr	r3, [r1, #12]
   bdb8a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bdb8c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bdb8e:	7a0b      	ldrb	r3, [r1, #8]
   bdb90:	9305      	str	r3, [sp, #20]
   bdb92:	a901      	add	r1, sp, #4
   bdb94:	f7fe ff76 	bl	bca84 <hal_i2c_request_ex>
}
   bdb98:	b007      	add	sp, #28
   bdb9a:	f85d fb04 	ldr.w	pc, [sp], #4

000bdb9e <_ZN7TwoWire11requestFromEhjh>:
{
   bdb9e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bdba0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bdba2:	f88d 1000 	strb.w	r1, [sp]
   bdba6:	f04f 0164 	mov.w	r1, #100	; 0x64
   bdbaa:	9103      	str	r1, [sp, #12]
   bdbac:	bf18      	it	ne
   bdbae:	2301      	movne	r3, #1
   bdbb0:	4669      	mov	r1, sp
    size_ = size;
   bdbb2:	9201      	str	r2, [sp, #4]
   bdbb4:	f88d 3008 	strb.w	r3, [sp, #8]
   bdbb8:	f7ff ffda 	bl	bdb70 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bdbbc:	b005      	add	sp, #20
   bdbbe:	f85d fb04 	ldr.w	pc, [sp], #4

000bdbc2 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bdbc2:	7c00      	ldrb	r0, [r0, #16]
   bdbc4:	2200      	movs	r2, #0
   bdbc6:	f7fe bf05 	b.w	bc9d4 <hal_i2c_begin_transmission>

000bdbca <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bdbca:	b2c9      	uxtb	r1, r1
   bdbcc:	f7ff bff9 	b.w	bdbc2 <_ZN7TwoWire17beginTransmissionEh>

000bdbd0 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   bdbd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bdbd2:	2300      	movs	r3, #0
   bdbd4:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   bdbd8:	684a      	ldr	r2, [r1, #4]
   bdbda:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   bdbdc:	2314      	movs	r3, #20
    };
   bdbde:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   bdbe0:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   bdbe4:	780b      	ldrb	r3, [r1, #0]
    };
   bdbe6:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bdbe8:	7a0a      	ldrb	r2, [r1, #8]
   bdbea:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   bdbec:	7c00      	ldrb	r0, [r0, #16]
    };
   bdbee:	f88d 3008 	strb.w	r3, [sp, #8]
   bdbf2:	aa01      	add	r2, sp, #4
   bdbf4:	4619      	mov	r1, r3
   bdbf6:	f7fe feed 	bl	bc9d4 <hal_i2c_begin_transmission>
}
   bdbfa:	b007      	add	sp, #28
   bdbfc:	f85d fb04 	ldr.w	pc, [sp], #4

000bdc00 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bdc00:	7c00      	ldrb	r0, [r0, #16]
   bdc02:	2200      	movs	r2, #0
   bdc04:	f7fe beee 	b.w	bc9e4 <hal_i2c_end_transmission>

000bdc08 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bdc08:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bdc0a:	2100      	movs	r1, #0
   bdc0c:	7c00      	ldrb	r0, [r0, #16]
   bdc0e:	f7fe ff29 	bl	bca64 <hal_i2c_lock>
}
   bdc12:	fab0 f080 	clz	r0, r0
   bdc16:	0940      	lsrs	r0, r0, #5
   bdc18:	bd08      	pop	{r3, pc}

000bdc1a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   bdc1a:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   bdc1c:	2100      	movs	r1, #0
   bdc1e:	7c00      	ldrb	r0, [r0, #16]
   bdc20:	f7fe ff28 	bl	bca74 <hal_i2c_unlock>
}
   bdc24:	fab0 f080 	clz	r0, r0
   bdc28:	0940      	lsrs	r0, r0, #5
   bdc2a:	bd08      	pop	{r3, pc}

000bdc2c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bdc2c:	4700      	bx	r0
	...

000bdc30 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bdc30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bdc34:	2400      	movs	r4, #0
{
   bdc36:	461d      	mov	r5, r3
   bdc38:	460f      	mov	r7, r1
   bdc3a:	4690      	mov	r8, r2
   bdc3c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bdc3e:	f7fe feb1 	bl	bc9a4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bdc42:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bdc44:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bdc48:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bdc4c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bdc50:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bdc54:	bfa2      	ittt	ge
   bdc56:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bdc5a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bdc5e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bdc60:	4907      	ldr	r1, [pc, #28]	; (bdc80 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bdc62:	9400      	str	r4, [sp, #0]
   bdc64:	4643      	mov	r3, r8
   bdc66:	463a      	mov	r2, r7
   bdc68:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bdc6a:	bfa8      	it	ge
   bdc6c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bdc70:	f7fe fe90 	bl	bc994 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bdc74:	fab0 f080 	clz	r0, r0
   bdc78:	0940      	lsrs	r0, r0, #5
   bdc7a:	b004      	add	sp, #16
   bdc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdc80:	000bdc2d 	.word	0x000bdc2d

000bdc84 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bdc84:	4770      	bx	lr

000bdc86 <_ZN9IPAddressD0Ev>:
   bdc86:	b510      	push	{r4, lr}
   bdc88:	2118      	movs	r1, #24
   bdc8a:	4604      	mov	r4, r0
   bdc8c:	f7f6 fa07 	bl	b409e <_ZdlPvj>
   bdc90:	4620      	mov	r0, r4
   bdc92:	bd10      	pop	{r4, pc}

000bdc94 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bdc94:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bdc96:	7d03      	ldrb	r3, [r0, #20]
   bdc98:	2b06      	cmp	r3, #6
{
   bdc9a:	b08d      	sub	sp, #52	; 0x34
   bdc9c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bdc9e:	f100 0704 	add.w	r7, r0, #4
   bdca2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bdca6:	d012      	beq.n	bdcce <_ZNK9IPAddress7printToER5Print+0x3a>
   bdca8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bdcac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bdcb0:	220a      	movs	r2, #10
   bdcb2:	4630      	mov	r0, r6
   bdcb4:	f001 fb35 	bl	bf322 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bdcb8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bdcba:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bdcbc:	d019      	beq.n	bdcf2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bdcbe:	2c00      	cmp	r4, #0
   bdcc0:	d0f4      	beq.n	bdcac <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bdcc2:	212e      	movs	r1, #46	; 0x2e
   bdcc4:	4630      	mov	r0, r6
   bdcc6:	f001 fb1d 	bl	bf304 <_ZN5Print5printEc>
   bdcca:	4404      	add	r4, r0
   bdccc:	e7ee      	b.n	bdcac <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bdcce:	232f      	movs	r3, #47	; 0x2f
   bdcd0:	466a      	mov	r2, sp
   bdcd2:	4639      	mov	r1, r7
   bdcd4:	200a      	movs	r0, #10
		buf[0] = 0;
   bdcd6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bdcda:	f7fe fedb 	bl	bca94 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bdcde:	4668      	mov	r0, sp
   bdce0:	f003 fa69 	bl	c11b6 <strlen>
   bdce4:	6833      	ldr	r3, [r6, #0]
   bdce6:	4602      	mov	r2, r0
   bdce8:	68db      	ldr	r3, [r3, #12]
   bdcea:	4669      	mov	r1, sp
   bdcec:	4630      	mov	r0, r6
   bdcee:	4798      	blx	r3
   bdcf0:	4604      	mov	r4, r0
    }
    return n;
}
   bdcf2:	4620      	mov	r0, r4
   bdcf4:	b00d      	add	sp, #52	; 0x34
   bdcf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bdcf8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bdcf8:	b510      	push	{r4, lr}
   bdcfa:	4b05      	ldr	r3, [pc, #20]	; (bdd10 <_ZN9IPAddressC1Ev+0x18>)
   bdcfc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bdcfe:	2211      	movs	r2, #17
   bdd00:	f840 3b04 	str.w	r3, [r0], #4
   bdd04:	2100      	movs	r1, #0
   bdd06:	f003 f98b 	bl	c1020 <memset>
}
   bdd0a:	4620      	mov	r0, r4
   bdd0c:	bd10      	pop	{r4, pc}
   bdd0e:	bf00      	nop
   bdd10:	000c4f74 	.word	0x000c4f74

000bdd14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bdd14:	4603      	mov	r3, r0
   bdd16:	4a07      	ldr	r2, [pc, #28]	; (bdd34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bdd18:	b510      	push	{r4, lr}
   bdd1a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bdd1e:	f101 0210 	add.w	r2, r1, #16
   bdd22:	f851 4b04 	ldr.w	r4, [r1], #4
   bdd26:	f843 4b04 	str.w	r4, [r3], #4
   bdd2a:	4291      	cmp	r1, r2
   bdd2c:	d1f9      	bne.n	bdd22 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bdd2e:	780a      	ldrb	r2, [r1, #0]
   bdd30:	701a      	strb	r2, [r3, #0]
}
   bdd32:	bd10      	pop	{r4, pc}
   bdd34:	000c4f74 	.word	0x000c4f74

000bdd38 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bdd38:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bdd3a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bdd3e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bdd42:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bdd46:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bdd4a:	2304      	movs	r3, #4
   bdd4c:	6041      	str	r1, [r0, #4]
   bdd4e:	7503      	strb	r3, [r0, #20]
}
   bdd50:	bd10      	pop	{r4, pc}
	...

000bdd54 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bdd54:	b507      	push	{r0, r1, r2, lr}
   bdd56:	4b06      	ldr	r3, [pc, #24]	; (bdd70 <_ZN9IPAddressC1EPKh+0x1c>)
   bdd58:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bdd5a:	78cb      	ldrb	r3, [r1, #3]
   bdd5c:	9300      	str	r3, [sp, #0]
   bdd5e:	788b      	ldrb	r3, [r1, #2]
   bdd60:	784a      	ldrb	r2, [r1, #1]
   bdd62:	7809      	ldrb	r1, [r1, #0]
   bdd64:	f7ff ffe8 	bl	bdd38 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bdd68:	b003      	add	sp, #12
   bdd6a:	f85d fb04 	ldr.w	pc, [sp], #4
   bdd6e:	bf00      	nop
   bdd70:	000c4f74 	.word	0x000c4f74

000bdd74 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bdd74:	f100 0310 	add.w	r3, r0, #16
   bdd78:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bdd7a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bdd7e:	2901      	cmp	r1, #1
   bdd80:	4618      	mov	r0, r3
   bdd82:	d108      	bne.n	bdd96 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bdd84:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bdd88:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bdd8c:	3a01      	subs	r2, #1
   bdd8e:	f103 0310 	add.w	r3, r3, #16
   bdd92:	d1f2      	bne.n	bdd7a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bdd94:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bdd96:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bdd98:	bf04      	itt	eq
   bdd9a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bdd9e:	1852      	addeq	r2, r2, r1
   bdda0:	e7f4      	b.n	bdd8c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bdda2 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bdda2:	b40e      	push	{r1, r2, r3}
   bdda4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdda6:	b088      	sub	sp, #32
   bdda8:	af00      	add	r7, sp, #0
   bddaa:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bddae:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bddb0:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bddb4:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bddb6:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bddb8:	462b      	mov	r3, r5
   bddba:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bddbc:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bddbe:	f7ff f967 	bl	bd090 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bddc2:	280f      	cmp	r0, #15
   bddc4:	687a      	ldr	r2, [r7, #4]
   bddc6:	d91a      	bls.n	bddfe <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bddc8:	f100 0308 	add.w	r3, r0, #8
   bddcc:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bddd0:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bddd2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bddd6:	1c41      	adds	r1, r0, #1
   bddd8:	462b      	mov	r3, r5
   bddda:	4668      	mov	r0, sp
        va_start(args, fmt);
   bdddc:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bddde:	f7ff f957 	bl	bd090 <vsnprintf>
        if (n > 0) {
   bdde2:	1e02      	subs	r2, r0, #0
   bdde4:	dd04      	ble.n	bddf0 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bdde6:	6823      	ldr	r3, [r4, #0]
   bdde8:	4669      	mov	r1, sp
   bddea:	689b      	ldr	r3, [r3, #8]
   bddec:	4620      	mov	r0, r4
   bddee:	4798      	blx	r3
   bddf0:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bddf2:	3720      	adds	r7, #32
   bddf4:	46bd      	mov	sp, r7
   bddf6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bddfa:	b003      	add	sp, #12
   bddfc:	4770      	bx	lr
    } else if (n > 0) {
   bddfe:	2800      	cmp	r0, #0
   bde00:	d0f7      	beq.n	bddf2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bde02:	6823      	ldr	r3, [r4, #0]
   bde04:	4602      	mov	r2, r0
   bde06:	689b      	ldr	r3, [r3, #8]
   bde08:	f107 0110 	add.w	r1, r7, #16
   bde0c:	4620      	mov	r0, r4
   bde0e:	4798      	blx	r3
}
   bde10:	e7ef      	b.n	bddf2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bde12 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bde12:	b538      	push	{r3, r4, r5, lr}
   bde14:	680b      	ldr	r3, [r1, #0]
   bde16:	6003      	str	r3, [r0, #0]
   bde18:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bde1a:	6843      	ldr	r3, [r0, #4]
   bde1c:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bde1e:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bde20:	d008      	beq.n	bde34 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bde22:	b115      	cbz	r5, bde2a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bde24:	686b      	ldr	r3, [r5, #4]
   bde26:	3301      	adds	r3, #1
   bde28:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bde2a:	6860      	ldr	r0, [r4, #4]
   bde2c:	b108      	cbz	r0, bde32 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bde2e:	f7ff f996 	bl	bd15e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bde32:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bde34:	bd38      	pop	{r3, r4, r5, pc}

000bde36 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bde36:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bde38:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bde3a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bde3e:	689b      	ldr	r3, [r3, #8]
   bde40:	2201      	movs	r2, #1
   bde42:	f10d 0107 	add.w	r1, sp, #7
   bde46:	4798      	blx	r3
}
   bde48:	b003      	add	sp, #12
   bde4a:	f85d fb04 	ldr.w	pc, [sp], #4

000bde4e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bde4e:	460b      	mov	r3, r1
   bde50:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bde52:	2200      	movs	r2, #0
   bde54:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bde56:	e9c0 2200 	strd	r2, r2, [r0]
   bde5a:	4604      	mov	r4, r0
        t_ = t;
   bde5c:	6083      	str	r3, [r0, #8]
    if (t) {
   bde5e:	b90b      	cbnz	r3, bde64 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bde60:	4620      	mov	r0, r4
   bde62:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bde64:	f7ff ffd5 	bl	bde12 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bde68:	e7fa      	b.n	bde60 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bde6a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bde6a:	6883      	ldr	r3, [r0, #8]
   bde6c:	b1eb      	cbz	r3, bdeaa <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bde6e:	781a      	ldrb	r2, [r3, #0]
   bde70:	2a03      	cmp	r2, #3
   bde72:	d81a      	bhi.n	bdeaa <_ZNK5spark9JSONValue4typeEv+0x40>
   bde74:	e8df f002 	tbb	[pc, r2]
   bde78:	1b021704 	.word	0x1b021704
   bde7c:	2005      	movs	r0, #5
   bde7e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bde80:	6802      	ldr	r2, [r0, #0]
   bde82:	685b      	ldr	r3, [r3, #4]
   bde84:	6852      	ldr	r2, [r2, #4]
   bde86:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bde88:	282d      	cmp	r0, #45	; 0x2d
   bde8a:	d012      	beq.n	bdeb2 <_ZNK5spark9JSONValue4typeEv+0x48>
   bde8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bde90:	2b09      	cmp	r3, #9
   bde92:	d90e      	bls.n	bdeb2 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bde94:	2874      	cmp	r0, #116	; 0x74
   bde96:	d00e      	beq.n	bdeb6 <_ZNK5spark9JSONValue4typeEv+0x4c>
   bde98:	2866      	cmp	r0, #102	; 0x66
   bde9a:	d00c      	beq.n	bdeb6 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bde9c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bdea0:	4258      	negs	r0, r3
   bdea2:	4158      	adcs	r0, r3
   bdea4:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bdea6:	2006      	movs	r0, #6
   bdea8:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bdeaa:	2000      	movs	r0, #0
   bdeac:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bdeae:	2004      	movs	r0, #4
   bdeb0:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bdeb2:	2003      	movs	r0, #3
   bdeb4:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bdeb6:	2002      	movs	r0, #2
}
   bdeb8:	4770      	bx	lr

000bdeba <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bdeba:	b510      	push	{r4, lr}
   bdebc:	4604      	mov	r4, r0
    switch (type()) {
   bdebe:	f7ff ffd4 	bl	bde6a <_ZNK5spark9JSONValue4typeEv>
   bdec2:	2802      	cmp	r0, #2
   bdec4:	d00e      	beq.n	bdee4 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bdec6:	1ec3      	subs	r3, r0, #3
   bdec8:	b2db      	uxtb	r3, r3
   bdeca:	2b01      	cmp	r3, #1
   bdecc:	d814      	bhi.n	bdef8 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bdece:	6822      	ldr	r2, [r4, #0]
   bded0:	68a3      	ldr	r3, [r4, #8]
   bded2:	6850      	ldr	r0, [r2, #4]
   bded4:	685b      	ldr	r3, [r3, #4]
}
   bded6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bdeda:	220a      	movs	r2, #10
   bdedc:	2100      	movs	r1, #0
   bdede:	4418      	add	r0, r3
   bdee0:	f004 b8da 	b.w	c2098 <strtol>
        const char* const s = d_->json + t_->start;
   bdee4:	6822      	ldr	r2, [r4, #0]
   bdee6:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bdee8:	6852      	ldr	r2, [r2, #4]
   bdeea:	685b      	ldr	r3, [r3, #4]
   bdeec:	5cd0      	ldrb	r0, [r2, r3]
   bdeee:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bdef2:	4258      	negs	r0, r3
   bdef4:	4158      	adcs	r0, r3
}
   bdef6:	bd10      	pop	{r4, pc}
    switch (type()) {
   bdef8:	2000      	movs	r0, #0
   bdefa:	e7fc      	b.n	bdef6 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bdefc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bdefc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bdefe:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bdf00:	e9c0 3300 	strd	r3, r3, [r0]
   bdf04:	4604      	mov	r4, r0
        n_(0) {
   bdf06:	480e      	ldr	r0, [pc, #56]	; (bdf40 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bdf08:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bdf0c:	b1a9      	cbz	r1, bdf3a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bdf0e:	780b      	ldrb	r3, [r1, #0]
   bdf10:	2b03      	cmp	r3, #3
   bdf12:	d006      	beq.n	bdf22 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bdf14:	b98b      	cbnz	r3, bdf3a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bdf16:	6813      	ldr	r3, [r2, #0]
   bdf18:	6858      	ldr	r0, [r3, #4]
   bdf1a:	684b      	ldr	r3, [r1, #4]
   bdf1c:	5cc3      	ldrb	r3, [r0, r3]
   bdf1e:	2b6e      	cmp	r3, #110	; 0x6e
   bdf20:	d007      	beq.n	bdf32 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bdf22:	6813      	ldr	r3, [r2, #0]
   bdf24:	684d      	ldr	r5, [r1, #4]
   bdf26:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bdf28:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bdf2a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bdf2c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bdf2e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bdf30:	60e3      	str	r3, [r4, #12]
   bdf32:	4611      	mov	r1, r2
   bdf34:	4620      	mov	r0, r4
   bdf36:	f7ff ff6c 	bl	bde12 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bdf3a:	4620      	mov	r0, r4
   bdf3c:	bd38      	pop	{r3, r4, r5, pc}
   bdf3e:	bf00      	nop
   bdf40:	000c4fe0 	.word	0x000c4fe0

000bdf44 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bdf44:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bdf46:	2500      	movs	r5, #0
   bdf48:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bdf4a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bdf4e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bdf52:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bdf56:	4604      	mov	r4, r0
   bdf58:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bdf5a:	b14b      	cbz	r3, bdf70 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bdf5c:	781a      	ldrb	r2, [r3, #0]
   bdf5e:	2a01      	cmp	r2, #1
   bdf60:	d106      	bne.n	bdf70 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bdf62:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bdf66:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bdf68:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bdf6a:	6143      	str	r3, [r0, #20]
   bdf6c:	f7ff ff51 	bl	bde12 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bdf70:	4620      	mov	r0, r4
   bdf72:	bd38      	pop	{r3, r4, r5, pc}

000bdf74 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bdf74:	b510      	push	{r4, lr}
    if (!n_) {
   bdf76:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bdf78:	4604      	mov	r4, r0
    if (!n_) {
   bdf7a:	b163      	cbz	r3, bdf96 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bdf7c:	6880      	ldr	r0, [r0, #8]
   bdf7e:	60e0      	str	r0, [r4, #12]
    --n_;
   bdf80:	3b01      	subs	r3, #1
    ++t_;
   bdf82:	3010      	adds	r0, #16
   bdf84:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bdf86:	6120      	str	r0, [r4, #16]
    --n_;
   bdf88:	6163      	str	r3, [r4, #20]
    if (n_) {
   bdf8a:	b113      	cbz	r3, bdf92 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bdf8c:	f7ff fef2 	bl	bdd74 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bdf90:	60a0      	str	r0, [r4, #8]
    return true;
   bdf92:	2001      	movs	r0, #1
   bdf94:	e000      	b.n	bdf98 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bdf96:	4618      	mov	r0, r3
}
   bdf98:	bd10      	pop	{r4, pc}

000bdf9a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bdf9a:	b510      	push	{r4, lr}
    write('}');
   bdf9c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bdf9e:	4604      	mov	r4, r0
    write('}');
   bdfa0:	f7ff ff49 	bl	bde36 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bdfa4:	2301      	movs	r3, #1
   bdfa6:	7123      	strb	r3, [r4, #4]
}
   bdfa8:	4620      	mov	r0, r4
   bdfaa:	bd10      	pop	{r4, pc}

000bdfac <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bdfac:	b508      	push	{r3, lr}
    switch (state_) {
   bdfae:	7903      	ldrb	r3, [r0, #4]
   bdfb0:	2b01      	cmp	r3, #1
   bdfb2:	d002      	beq.n	bdfba <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bdfb4:	2b02      	cmp	r3, #2
   bdfb6:	d004      	beq.n	bdfc2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bdfb8:	bd08      	pop	{r3, pc}
        write(',');
   bdfba:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bdfbc:	f7ff ff3b 	bl	bde36 <_ZN5spark10JSONWriter5writeEc>
}
   bdfc0:	e7fa      	b.n	bdfb8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bdfc2:	213a      	movs	r1, #58	; 0x3a
   bdfc4:	e7fa      	b.n	bdfbc <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bdfc6 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bdfc6:	b510      	push	{r4, lr}
   bdfc8:	4604      	mov	r4, r0
    writeSeparator();
   bdfca:	f7ff ffef 	bl	bdfac <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bdfce:	4620      	mov	r0, r4
   bdfd0:	217b      	movs	r1, #123	; 0x7b
   bdfd2:	f7ff ff30 	bl	bde36 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bdfd6:	2300      	movs	r3, #0
   bdfd8:	7123      	strb	r3, [r4, #4]
}
   bdfda:	4620      	mov	r0, r4
   bdfdc:	bd10      	pop	{r4, pc}
	...

000bdfe0 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bdfe0:	b513      	push	{r0, r1, r4, lr}
   bdfe2:	4604      	mov	r4, r0
   bdfe4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bdfe6:	f7ff ffe1 	bl	bdfac <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bdfea:	6823      	ldr	r3, [r4, #0]
   bdfec:	9a01      	ldr	r2, [sp, #4]
   bdfee:	68db      	ldr	r3, [r3, #12]
   bdff0:	4903      	ldr	r1, [pc, #12]	; (be000 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bdff2:	4620      	mov	r0, r4
   bdff4:	4798      	blx	r3
    state_ = NEXT;
   bdff6:	2301      	movs	r3, #1
}
   bdff8:	4620      	mov	r0, r4
    state_ = NEXT;
   bdffa:	7123      	strb	r3, [r4, #4]
}
   bdffc:	b002      	add	sp, #8
   bdffe:	bd10      	pop	{r4, pc}
   be000:	000c36ef 	.word	0x000c36ef

000be004 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   be004:	b513      	push	{r0, r1, r4, lr}
   be006:	4604      	mov	r4, r0
   be008:	9101      	str	r1, [sp, #4]
    writeSeparator();
   be00a:	f7ff ffcf 	bl	bdfac <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   be00e:	6823      	ldr	r3, [r4, #0]
   be010:	9a01      	ldr	r2, [sp, #4]
   be012:	68db      	ldr	r3, [r3, #12]
   be014:	4903      	ldr	r1, [pc, #12]	; (be024 <_ZN5spark10JSONWriter5valueEj+0x20>)
   be016:	4620      	mov	r0, r4
   be018:	4798      	blx	r3
    state_ = NEXT;
   be01a:	2301      	movs	r3, #1
}
   be01c:	4620      	mov	r0, r4
    state_ = NEXT;
   be01e:	7123      	strb	r3, [r4, #4]
}
   be020:	b002      	add	sp, #8
   be022:	bd10      	pop	{r4, pc}
   be024:	000c486e 	.word	0x000c486e

000be028 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   be028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be02c:	460d      	mov	r5, r1
    write('"');
   be02e:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   be030:	4690      	mov	r8, r2
   be032:	4604      	mov	r4, r0
    write('"');
   be034:	f7ff feff 	bl	bde36 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   be038:	f8df 90a4 	ldr.w	r9, [pc, #164]	; be0e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   be03c:	44a8      	add	r8, r5
    const char *s = str;
   be03e:	462f      	mov	r7, r5
    while (s != end) {
   be040:	4547      	cmp	r7, r8
   be042:	46ba      	mov	sl, r7
   be044:	d03d      	beq.n	be0c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   be046:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   be04a:	2e22      	cmp	r6, #34	; 0x22
   be04c:	d006      	beq.n	be05c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   be04e:	2e5c      	cmp	r6, #92	; 0x5c
   be050:	d004      	beq.n	be05c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   be052:	4630      	mov	r0, r6
   be054:	f002 ffb4 	bl	c0fc0 <isprint>
   be058:	2800      	cmp	r0, #0
   be05a:	d1f1      	bne.n	be040 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   be05c:	6823      	ldr	r3, [r4, #0]
   be05e:	ebaa 0205 	sub.w	r2, sl, r5
   be062:	689b      	ldr	r3, [r3, #8]
   be064:	4629      	mov	r1, r5
   be066:	4620      	mov	r0, r4
   be068:	4798      	blx	r3
            write('\\');
   be06a:	215c      	movs	r1, #92	; 0x5c
   be06c:	4620      	mov	r0, r4
   be06e:	f7ff fee2 	bl	bde36 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   be072:	2e0d      	cmp	r6, #13
   be074:	d80a      	bhi.n	be08c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   be076:	2e07      	cmp	r6, #7
   be078:	d91c      	bls.n	be0b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   be07a:	f1a6 0308 	sub.w	r3, r6, #8
   be07e:	2b05      	cmp	r3, #5
   be080:	d818      	bhi.n	be0b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   be082:	e8df f003 	tbb	[pc, r3]
   be086:	0f0d      	.short	0x0f0d
   be088:	15131711 	.word	0x15131711
   be08c:	2e22      	cmp	r6, #34	; 0x22
   be08e:	d001      	beq.n	be094 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   be090:	2e5c      	cmp	r6, #92	; 0x5c
   be092:	d10f      	bne.n	be0b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   be094:	4631      	mov	r1, r6
                write('b');
   be096:	4620      	mov	r0, r4
   be098:	f7ff fecd 	bl	bde36 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   be09c:	463d      	mov	r5, r7
    while (s != end) {
   be09e:	e7cf      	b.n	be040 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   be0a0:	2162      	movs	r1, #98	; 0x62
   be0a2:	e7f8      	b.n	be096 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   be0a4:	2174      	movs	r1, #116	; 0x74
   be0a6:	e7f6      	b.n	be096 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   be0a8:	216e      	movs	r1, #110	; 0x6e
   be0aa:	e7f4      	b.n	be096 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   be0ac:	2166      	movs	r1, #102	; 0x66
   be0ae:	e7f2      	b.n	be096 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   be0b0:	2172      	movs	r1, #114	; 0x72
   be0b2:	e7f0      	b.n	be096 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   be0b4:	6823      	ldr	r3, [r4, #0]
   be0b6:	4632      	mov	r2, r6
   be0b8:	68db      	ldr	r3, [r3, #12]
   be0ba:	4649      	mov	r1, r9
   be0bc:	4620      	mov	r0, r4
   be0be:	4798      	blx	r3
                break;
   be0c0:	e7ec      	b.n	be09c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   be0c2:	42bd      	cmp	r5, r7
   be0c4:	d005      	beq.n	be0d2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   be0c6:	6823      	ldr	r3, [r4, #0]
   be0c8:	1b7a      	subs	r2, r7, r5
   be0ca:	689b      	ldr	r3, [r3, #8]
   be0cc:	4629      	mov	r1, r5
   be0ce:	4620      	mov	r0, r4
   be0d0:	4798      	blx	r3
    }
    write('"');
   be0d2:	2122      	movs	r1, #34	; 0x22
   be0d4:	4620      	mov	r0, r4
   be0d6:	f7ff feae 	bl	bde36 <_ZN5spark10JSONWriter5writeEc>
}
   be0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be0de:	bf00      	nop
   be0e0:	000c4f80 	.word	0x000c4f80

000be0e4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   be0e4:	b513      	push	{r0, r1, r4, lr}
   be0e6:	4604      	mov	r4, r0
   be0e8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   be0ec:	f7ff ff5e 	bl	bdfac <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   be0f0:	4620      	mov	r0, r4
   be0f2:	e9dd 2100 	ldrd	r2, r1, [sp]
   be0f6:	f7ff ff97 	bl	be028 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   be0fa:	2302      	movs	r3, #2
}
   be0fc:	4620      	mov	r0, r4
    state_ = VALUE;
   be0fe:	7123      	strb	r3, [r4, #4]
}
   be100:	b002      	add	sp, #8
   be102:	bd10      	pop	{r4, pc}

000be104 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   be104:	b513      	push	{r0, r1, r4, lr}
   be106:	4604      	mov	r4, r0
   be108:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   be10c:	f7ff ff4e 	bl	bdfac <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   be110:	4620      	mov	r0, r4
   be112:	e9dd 2100 	ldrd	r2, r1, [sp]
   be116:	f7ff ff87 	bl	be028 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   be11a:	2301      	movs	r3, #1
}
   be11c:	4620      	mov	r0, r4
    state_ = NEXT;
   be11e:	7123      	strb	r3, [r4, #4]
}
   be120:	b002      	add	sp, #8
   be122:	bd10      	pop	{r4, pc}

000be124 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   be124:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   be126:	460b      	mov	r3, r1
    s->update(ticks);
   be128:	6892      	ldr	r2, [r2, #8]
   be12a:	4601      	mov	r1, r0
   be12c:	4618      	mov	r0, r3
   be12e:	4710      	bx	r2

000be130 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   be130:	b570      	push	{r4, r5, r6, lr}
   be132:	4c0e      	ldr	r4, [pc, #56]	; (be16c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   be134:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   be136:	2500      	movs	r5, #0
   be138:	241c      	movs	r4, #28
   be13a:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   be13e:	f89d 4014 	ldrb.w	r4, [sp, #20]
   be142:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   be146:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   be148:	f004 0403 	and.w	r4, r4, #3
   be14c:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   be150:	b2e4      	uxtb	r4, r4
   be152:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   be154:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   be156:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   be158:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   be15a:	7c42      	ldrb	r2, [r0, #17]
   be15c:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   be15e:	bf0a      	itet	eq
   be160:	4b03      	ldreq	r3, [pc, #12]	; (be170 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   be162:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   be164:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   be168:	bd70      	pop	{r4, r5, r6, pc}
   be16a:	bf00      	nop
   be16c:	000c39e8 	.word	0x000c39e8
   be170:	000be125 	.word	0x000be125

000be174 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   be174:	6880      	ldr	r0, [r0, #8]
   be176:	6803      	ldr	r3, [r0, #0]
   be178:	68db      	ldr	r3, [r3, #12]
   be17a:	4718      	bx	r3

000be17c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   be17c:	4770      	bx	lr

000be17e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   be17e:	4608      	mov	r0, r1
   be180:	b111      	cbz	r1, be188 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   be182:	680b      	ldr	r3, [r1, #0]
   be184:	685b      	ldr	r3, [r3, #4]
   be186:	4718      	bx	r3
}
   be188:	4770      	bx	lr

000be18a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   be18a:	4770      	bx	lr

000be18c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   be18c:	4770      	bx	lr

000be18e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   be18e:	4770      	bx	lr

000be190 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   be190:	4770      	bx	lr

000be192 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   be192:	b538      	push	{r3, r4, r5, lr}
   be194:	4604      	mov	r4, r0
   be196:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   be198:	6800      	ldr	r0, [r0, #0]
   be19a:	212e      	movs	r1, #46	; 0x2e
   be19c:	f002 ffd1 	bl	c1142 <strchrnul>
    size = s - category;
   be1a0:	6823      	ldr	r3, [r4, #0]
   be1a2:	1ac3      	subs	r3, r0, r3
   be1a4:	602b      	str	r3, [r5, #0]
    if (size) {
   be1a6:	b123      	cbz	r3, be1b2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   be1a8:	7803      	ldrb	r3, [r0, #0]
   be1aa:	b103      	cbz	r3, be1ae <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   be1ac:	3001      	adds	r0, #1
   be1ae:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   be1b0:	6020      	str	r0, [r4, #0]
}
   be1b2:	4618      	mov	r0, r3
   be1b4:	bd38      	pop	{r3, r4, r5, pc}

000be1b6 <_ZN5spark16JSONStreamWriterD0Ev>:
   be1b6:	b510      	push	{r4, lr}
   be1b8:	210c      	movs	r1, #12
   be1ba:	4604      	mov	r4, r0
   be1bc:	f7f5 ff6f 	bl	b409e <_ZdlPvj>
   be1c0:	4620      	mov	r0, r4
   be1c2:	bd10      	pop	{r4, pc}

000be1c4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   be1c4:	b510      	push	{r4, lr}
   be1c6:	2104      	movs	r1, #4
   be1c8:	4604      	mov	r4, r0
   be1ca:	f7f5 ff68 	bl	b409e <_ZdlPvj>
   be1ce:	4620      	mov	r0, r4
   be1d0:	bd10      	pop	{r4, pc}

000be1d2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   be1d2:	b510      	push	{r4, lr}
   be1d4:	2104      	movs	r1, #4
   be1d6:	4604      	mov	r4, r0
   be1d8:	f7f5 ff61 	bl	b409e <_ZdlPvj>
   be1dc:	4620      	mov	r0, r4
   be1de:	bd10      	pop	{r4, pc}

000be1e0 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   be1e0:	f7fe bb48 	b.w	bc874 <os_mutex_recursive_lock>

000be1e4 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   be1e4:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   be1e6:	f002 ffb6 	bl	c1156 <strcmp>
}
   be1ea:	fab0 f080 	clz	r0, r0
   be1ee:	0940      	lsrs	r0, r0, #5
   be1f0:	bd08      	pop	{r3, pc}

000be1f2 <__tcf_1>:
   be1f2:	4770      	bx	lr

000be1f4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   be1f4:	b510      	push	{r4, lr}
   be1f6:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   be1f8:	f001 ff36 	bl	c0068 <_Z16_fetch_usbserialv>
   be1fc:	4284      	cmp	r4, r0
   be1fe:	d010      	beq.n	be222 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   be200:	f002 f938 	bl	c0474 <_Z22__fetch_global_Serial1v>
   be204:	4284      	cmp	r4, r0
   be206:	d105      	bne.n	be214 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   be208:	f002 f934 	bl	c0474 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   be20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   be210:	f001 bec3 	b.w	bff9a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   be214:	b12c      	cbz	r4, be222 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   be216:	6823      	ldr	r3, [r4, #0]
   be218:	4620      	mov	r0, r4
   be21a:	685b      	ldr	r3, [r3, #4]
}
   be21c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be220:	4718      	bx	r3
   be222:	bd10      	pop	{r4, pc}

000be224 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   be224:	b513      	push	{r0, r1, r4, lr}
   be226:	4604      	mov	r4, r0
    return value(val, strlen(val));
   be228:	4608      	mov	r0, r1
   be22a:	9101      	str	r1, [sp, #4]
   be22c:	f002 ffc3 	bl	c11b6 <strlen>
   be230:	9901      	ldr	r1, [sp, #4]
   be232:	4602      	mov	r2, r0
   be234:	4620      	mov	r0, r4
}
   be236:	b002      	add	sp, #8
   be238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   be23c:	f7ff bf62 	b.w	be104 <_ZN5spark10JSONWriter5valueEPKcj>

000be240 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   be240:	b513      	push	{r0, r1, r4, lr}
   be242:	4604      	mov	r4, r0
    write(str, strlen(str));
   be244:	4608      	mov	r0, r1
   be246:	9101      	str	r1, [sp, #4]
   be248:	f002 ffb5 	bl	c11b6 <strlen>
   be24c:	6823      	ldr	r3, [r4, #0]
   be24e:	9901      	ldr	r1, [sp, #4]
   be250:	68db      	ldr	r3, [r3, #12]
   be252:	4602      	mov	r2, r0
   be254:	4620      	mov	r0, r4
}
   be256:	b002      	add	sp, #8
   be258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   be25c:	4718      	bx	r3

000be25e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   be25e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   be260:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   be262:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   be266:	68db      	ldr	r3, [r3, #12]
   be268:	2201      	movs	r2, #1
   be26a:	f10d 0107 	add.w	r1, sp, #7
   be26e:	4798      	blx	r3
}
   be270:	b003      	add	sp, #12
   be272:	f85d fb04 	ldr.w	pc, [sp], #4

000be276 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   be276:	b40e      	push	{r1, r2, r3}
   be278:	b503      	push	{r0, r1, lr}
   be27a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   be27c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   be27e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   be282:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   be284:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   be286:	f001 f942 	bl	bf50e <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   be28a:	b002      	add	sp, #8
   be28c:	f85d eb04 	ldr.w	lr, [sp], #4
   be290:	b003      	add	sp, #12
   be292:	4770      	bx	lr

000be294 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   be294:	680a      	ldr	r2, [r1, #0]
   be296:	6002      	str	r2, [r0, #0]
   be298:	684a      	ldr	r2, [r1, #4]
   be29a:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   be29c:	2200      	movs	r2, #0
   be29e:	e9c0 2202 	strd	r2, r2, [r0, #8]
   be2a2:	b510      	push	{r4, lr}
   be2a4:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   be2a6:	688c      	ldr	r4, [r1, #8]
   be2a8:	6084      	str	r4, [r0, #8]
   be2aa:	68cc      	ldr	r4, [r1, #12]
   be2ac:	60c4      	str	r4, [r0, #12]
   be2ae:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   be2b0:	608a      	str	r2, [r1, #8]
   be2b2:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   be2b4:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   be2b6:	610a      	str	r2, [r1, #16]
   be2b8:	bd10      	pop	{r4, pc}
	...

000be2bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   be2bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   be2c0:	e9d0 8400 	ldrd	r8, r4, [r0]
   be2c4:	f04f 0a14 	mov.w	sl, #20
   be2c8:	9300      	str	r3, [sp, #0]
   be2ca:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   be2ce:	4b18      	ldr	r3, [pc, #96]	; (be330 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   be2d0:	10a4      	asrs	r4, r4, #2
   be2d2:	4617      	mov	r7, r2
   be2d4:	435c      	muls	r4, r3
   be2d6:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   be2d8:	2c00      	cmp	r4, #0
   be2da:	dd21      	ble.n	be320 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   be2dc:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   be2de:	fb0a f006 	mul.w	r0, sl, r6
   be2e2:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   be2e6:	463a      	mov	r2, r7
   be2e8:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   be2ec:	5828      	ldr	r0, [r5, r0]
   be2ee:	9101      	str	r1, [sp, #4]
   be2f0:	455f      	cmp	r7, fp
   be2f2:	bf28      	it	cs
   be2f4:	465a      	movcs	r2, fp
   be2f6:	f002 ff66 	bl	c11c6 <strncmp>
                if (cmp == 0) {
   be2fa:	2800      	cmp	r0, #0
   be2fc:	9901      	ldr	r1, [sp, #4]
   be2fe:	f04f 0301 	mov.w	r3, #1
   be302:	d10b      	bne.n	be31c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   be304:	455f      	cmp	r7, fp
   be306:	d103      	bne.n	be310 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   be308:	9a00      	ldr	r2, [sp, #0]
   be30a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   be30c:	4634      	mov	r4, r6
   be30e:	e7e3      	b.n	be2d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   be310:	d9fc      	bls.n	be30c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   be312:	1ba6      	subs	r6, r4, r6
	      ++__first;
   be314:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   be318:	3e01      	subs	r6, #1
   be31a:	e7f7      	b.n	be30c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   be31c:	dbf9      	blt.n	be312 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   be31e:	e7f5      	b.n	be30c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   be320:	eba5 0508 	sub.w	r5, r5, r8
}
   be324:	4802      	ldr	r0, [pc, #8]	; (be330 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   be326:	10ad      	asrs	r5, r5, #2
   be328:	4368      	muls	r0, r5
   be32a:	b003      	add	sp, #12
   be32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be330:	cccccccd 	.word	0xcccccccd

000be334 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   be334:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   be336:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   be338:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   be33a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   be33c:	b303      	cbz	r3, be380 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   be33e:	b1f9      	cbz	r1, be380 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   be340:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   be342:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   be346:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   be348:	a903      	add	r1, sp, #12
   be34a:	a801      	add	r0, sp, #4
   be34c:	f7ff ff21 	bl	be192 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   be350:	4601      	mov	r1, r0
   be352:	b1a8      	cbz	r0, be380 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   be354:	f10d 030b 	add.w	r3, sp, #11
   be358:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   be35a:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   be35e:	4620      	mov	r0, r4
   be360:	f7ff ffac 	bl	be2bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   be364:	f89d 300b 	ldrb.w	r3, [sp, #11]
   be368:	b153      	cbz	r3, be380 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   be36a:	6823      	ldr	r3, [r4, #0]
   be36c:	2414      	movs	r4, #20
   be36e:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   be372:	3408      	adds	r4, #8
            if (node.level >= 0) {
   be374:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   be378:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   be37a:	bfa8      	it	ge
   be37c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   be37e:	e7e3      	b.n	be348 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   be380:	4628      	mov	r0, r5
   be382:	b004      	add	sp, #16
   be384:	bd70      	pop	{r4, r5, r6, pc}
	...

000be388 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   be388:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   be38a:	4c09      	ldr	r4, [pc, #36]	; (be3b0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   be38c:	7823      	ldrb	r3, [r4, #0]
   be38e:	f3bf 8f5b 	dmb	ish
   be392:	07db      	lsls	r3, r3, #31
   be394:	d409      	bmi.n	be3aa <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   be396:	4620      	mov	r0, r4
   be398:	f7f5 fe90 	bl	b40bc <__cxa_guard_acquire>
   be39c:	b128      	cbz	r0, be3aa <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   be39e:	4620      	mov	r0, r4
   be3a0:	f7f5 fe91 	bl	b40c6 <__cxa_guard_release>
   be3a4:	4803      	ldr	r0, [pc, #12]	; (be3b4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   be3a6:	f002 fde7 	bl	c0f78 <atexit>
}
   be3aa:	4803      	ldr	r0, [pc, #12]	; (be3b8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   be3ac:	bd10      	pop	{r4, pc}
   be3ae:	bf00      	nop
   be3b0:	2003e650 	.word	0x2003e650
   be3b4:	000be18b 	.word	0x000be18b
   be3b8:	2003d690 	.word	0x2003d690

000be3bc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   be3bc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   be3be:	4c09      	ldr	r4, [pc, #36]	; (be3e4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   be3c0:	7823      	ldrb	r3, [r4, #0]
   be3c2:	f3bf 8f5b 	dmb	ish
   be3c6:	07db      	lsls	r3, r3, #31
   be3c8:	d409      	bmi.n	be3de <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   be3ca:	4620      	mov	r0, r4
   be3cc:	f7f5 fe76 	bl	b40bc <__cxa_guard_acquire>
   be3d0:	b128      	cbz	r0, be3de <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   be3d2:	4620      	mov	r0, r4
   be3d4:	f7f5 fe77 	bl	b40c6 <__cxa_guard_release>
   be3d8:	4803      	ldr	r0, [pc, #12]	; (be3e8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   be3da:	f002 fdcd 	bl	c0f78 <atexit>
    return &factory;
}
   be3de:	4803      	ldr	r0, [pc, #12]	; (be3ec <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   be3e0:	bd10      	pop	{r4, pc}
   be3e2:	bf00      	nop
   be3e4:	2003e654 	.word	0x2003e654
   be3e8:	000be1f3 	.word	0x000be1f3
   be3ec:	2003d694 	.word	0x2003d694

000be3f0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   be3f0:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   be3f2:	2500      	movs	r5, #0
   be3f4:	4604      	mov	r4, r0
   be3f6:	e9c0 5500 	strd	r5, r5, [r0]
   be3fa:	e9c0 5504 	strd	r5, r5, [r0, #16]
   be3fe:	6085      	str	r5, [r0, #8]
   be400:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   be402:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   be406:	f7fe fa25 	bl	bc854 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   be40a:	f7ff ffbd 	bl	be388 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   be40e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   be410:	f7ff ffd4 	bl	be3bc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   be414:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   be416:	6220      	str	r0, [r4, #32]
}
   be418:	4620      	mov	r0, r4
   be41a:	bd38      	pop	{r3, r4, r5, pc}

000be41c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   be41c:	b510      	push	{r4, lr}
    static LogManager mgr;
   be41e:	4c0a      	ldr	r4, [pc, #40]	; (be448 <_ZN5spark10LogManager8instanceEv+0x2c>)
   be420:	7823      	ldrb	r3, [r4, #0]
   be422:	f3bf 8f5b 	dmb	ish
   be426:	07db      	lsls	r3, r3, #31
   be428:	d40c      	bmi.n	be444 <_ZN5spark10LogManager8instanceEv+0x28>
   be42a:	4620      	mov	r0, r4
   be42c:	f7f5 fe46 	bl	b40bc <__cxa_guard_acquire>
   be430:	b140      	cbz	r0, be444 <_ZN5spark10LogManager8instanceEv+0x28>
   be432:	4806      	ldr	r0, [pc, #24]	; (be44c <_ZN5spark10LogManager8instanceEv+0x30>)
   be434:	f7ff ffdc 	bl	be3f0 <_ZN5spark10LogManagerC1Ev>
   be438:	4620      	mov	r0, r4
   be43a:	f7f5 fe44 	bl	b40c6 <__cxa_guard_release>
   be43e:	4804      	ldr	r0, [pc, #16]	; (be450 <_ZN5spark10LogManager8instanceEv+0x34>)
   be440:	f002 fd9a 	bl	c0f78 <atexit>
    return &mgr;
}
   be444:	4801      	ldr	r0, [pc, #4]	; (be44c <_ZN5spark10LogManager8instanceEv+0x30>)
   be446:	bd10      	pop	{r4, pc}
   be448:	2003e64c 	.word	0x2003e64c
   be44c:	2003e65c 	.word	0x2003e65c
   be450:	000be909 	.word	0x000be909

000be454 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   be454:	4a02      	ldr	r2, [pc, #8]	; (be460 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   be456:	4903      	ldr	r1, [pc, #12]	; (be464 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   be458:	4803      	ldr	r0, [pc, #12]	; (be468 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   be45a:	2300      	movs	r3, #0
   be45c:	f7fe bc92 	b.w	bcd84 <log_set_callbacks>
   be460:	000be6ed 	.word	0x000be6ed
   be464:	000be679 	.word	0x000be679
   be468:	000be5f9 	.word	0x000be5f9

000be46c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   be46c:	2300      	movs	r3, #0
   be46e:	461a      	mov	r2, r3
   be470:	4619      	mov	r1, r3
   be472:	4618      	mov	r0, r3
   be474:	f7fe bc86 	b.w	bcd84 <log_set_callbacks>

000be478 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   be478:	b570      	push	{r4, r5, r6, lr}
   be47a:	b08a      	sub	sp, #40	; 0x28
   be47c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   be47e:	4601      	mov	r1, r0
   be480:	a804      	add	r0, sp, #16
   be482:	f7fb fbd2 	bl	b9c2a <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   be486:	4e14      	ldr	r6, [pc, #80]	; (be4d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   be488:	a804      	add	r0, sp, #16
   be48a:	f7ff fd73 	bl	bdf74 <_ZN5spark18JSONObjectIterator4nextEv>
   be48e:	b1e8      	cbz	r0, be4cc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   be490:	a904      	add	r1, sp, #16
   be492:	4668      	mov	r0, sp
   be494:	f7fb fbda 	bl	b9c4c <_ZNK5spark18JSONObjectIterator4nameEv>
   be498:	9802      	ldr	r0, [sp, #8]
   be49a:	4631      	mov	r1, r6
   be49c:	f7ff fea2 	bl	be1e4 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   be4a0:	4604      	mov	r4, r0
   be4a2:	b110      	cbz	r0, be4aa <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   be4a4:	1e2c      	subs	r4, r5, #0
   be4a6:	bf18      	it	ne
   be4a8:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   be4aa:	a801      	add	r0, sp, #4
   be4ac:	f7f6 f8c4 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be4b0:	2c00      	cmp	r4, #0
   be4b2:	d0e9      	beq.n	be488 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   be4b4:	a904      	add	r1, sp, #16
   be4b6:	4668      	mov	r0, sp
   be4b8:	f7fb fbd9 	bl	b9c6e <_ZNK5spark18JSONObjectIterator5valueEv>
   be4bc:	4668      	mov	r0, sp
   be4be:	f7ff fcfc 	bl	bdeba <_ZNK5spark9JSONValue5toIntEv>
   be4c2:	6028      	str	r0, [r5, #0]
   be4c4:	a801      	add	r0, sp, #4
   be4c6:	f7f6 f8b7 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be4ca:	e7dd      	b.n	be488 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   be4cc:	a805      	add	r0, sp, #20
   be4ce:	f7f6 f8b3 	bl	b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be4d2:	b00a      	add	sp, #40	; 0x28
   be4d4:	bd70      	pop	{r4, r5, r6, pc}
   be4d6:	bf00      	nop
   be4d8:	000c4f86 	.word	0x000c4f86

000be4dc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   be4dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be4de:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   be4e0:	4620      	mov	r0, r4
   be4e2:	4913      	ldr	r1, [pc, #76]	; (be530 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   be4e4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   be4e6:	f002 fe36 	bl	c1156 <strcmp>
   be4ea:	b950      	cbnz	r0, be502 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   be4ec:	f001 fdbc 	bl	c0068 <_Z16_fetch_usbserialv>
   be4f0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   be4f4:	f001 fda6 	bl	c0044 <_ZN9USBSerial5beginEl>
}
   be4f8:	b003      	add	sp, #12
   be4fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   be4fe:	f001 bdb3 	b.w	c0068 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   be502:	490c      	ldr	r1, [pc, #48]	; (be534 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   be504:	4620      	mov	r0, r4
   be506:	f002 fe26 	bl	c1156 <strcmp>
   be50a:	b978      	cbnz	r0, be52c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   be50c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   be510:	a901      	add	r1, sp, #4
   be512:	4628      	mov	r0, r5
        int baud = 9600;
   be514:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   be516:	f7ff ffaf 	bl	be478 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   be51a:	f001 ffab 	bl	c0474 <_Z22__fetch_global_Serial1v>
   be51e:	9901      	ldr	r1, [sp, #4]
   be520:	f001 fd38 	bl	bff94 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   be524:	f001 ffa6 	bl	c0474 <_Z22__fetch_global_Serial1v>
}
   be528:	b003      	add	sp, #12
   be52a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   be52c:	2000      	movs	r0, #0
   be52e:	e7fb      	b.n	be528 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   be530:	000c4f8b 	.word	0x000c4f8b
   be534:	000c4f92 	.word	0x000c4f92

000be538 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be538:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be53a:	e9d0 5300 	ldrd	r5, r3, [r0]
   be53e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   be540:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be542:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   be546:	42ae      	cmp	r6, r5
   be548:	d005      	beq.n	be556 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   be54a:	f105 0008 	add.w	r0, r5, #8
   be54e:	f7ff fff3 	bl	be538 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   be552:	3514      	adds	r5, #20
   be554:	e7f7      	b.n	be546 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   be556:	6820      	ldr	r0, [r4, #0]
   be558:	f7fe fd72 	bl	bd040 <free>
}
   be55c:	4620      	mov	r0, r4
   be55e:	bd70      	pop	{r4, r5, r6, pc}

000be560 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   be560:	b510      	push	{r4, lr}
   be562:	4604      	mov	r4, r0
   be564:	300c      	adds	r0, #12
   be566:	f7ff ffe7 	bl	be538 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   be56a:	4620      	mov	r0, r4
   be56c:	f7fe fe0b 	bl	bd186 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   be570:	4620      	mov	r0, r4
   be572:	bd10      	pop	{r4, pc}

000be574 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   be574:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   be576:	4b04      	ldr	r3, [pc, #16]	; (be588 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   be578:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   be57a:	f840 3b04 	str.w	r3, [r0], #4
   be57e:	f7ff ffef 	bl	be560 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   be582:	4620      	mov	r0, r4
   be584:	bd10      	pop	{r4, pc}
   be586:	bf00      	nop
   be588:	000c4334 	.word	0x000c4334

000be58c <_ZN5spark16StreamLogHandlerD0Ev>:
   be58c:	b510      	push	{r4, lr}
   be58e:	4604      	mov	r4, r0
   be590:	f7ff fff0 	bl	be574 <_ZN5spark16StreamLogHandlerD1Ev>
   be594:	4620      	mov	r0, r4
   be596:	2124      	movs	r1, #36	; 0x24
   be598:	f7f5 fd81 	bl	b409e <_ZdlPvj>
   be59c:	4620      	mov	r0, r4
   be59e:	bd10      	pop	{r4, pc}

000be5a0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   be5a0:	b510      	push	{r4, lr}
   be5a2:	4b03      	ldr	r3, [pc, #12]	; (be5b0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   be5a4:	6003      	str	r3, [r0, #0]
   be5a6:	4604      	mov	r4, r0
   be5a8:	f7ff ffe4 	bl	be574 <_ZN5spark16StreamLogHandlerD1Ev>
   be5ac:	4620      	mov	r0, r4
   be5ae:	bd10      	pop	{r4, pc}
   be5b0:	000c5028 	.word	0x000c5028

000be5b4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   be5b4:	b510      	push	{r4, lr}
   be5b6:	4604      	mov	r4, r0
   be5b8:	f7ff fff2 	bl	be5a0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   be5bc:	4620      	mov	r0, r4
   be5be:	2124      	movs	r1, #36	; 0x24
   be5c0:	f7f5 fd6d 	bl	b409e <_ZdlPvj>
   be5c4:	4620      	mov	r0, r4
   be5c6:	bd10      	pop	{r4, pc}

000be5c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   be5c8:	2200      	movs	r2, #0
   be5ca:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   be5ce:	b510      	push	{r4, lr}
        capacity_(0) {
   be5d0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   be5d2:	680c      	ldr	r4, [r1, #0]
   be5d4:	6004      	str	r4, [r0, #0]
   be5d6:	684c      	ldr	r4, [r1, #4]
   be5d8:	6044      	str	r4, [r0, #4]
   be5da:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   be5dc:	600a      	str	r2, [r1, #0]
   be5de:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   be5e0:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   be5e2:	608a      	str	r2, [r1, #8]
}
   be5e4:	bd10      	pop	{r4, pc}

000be5e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   be5e6:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   be5e8:	6803      	ldr	r3, [r0, #0]
   be5ea:	4604      	mov	r4, r0
   be5ec:	6818      	ldr	r0, [r3, #0]
   be5ee:	f7fe f949 	bl	bc884 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   be5f2:	4620      	mov	r0, r4
   be5f4:	bd10      	pop	{r4, pc}
	...

000be5f8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   be5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be5fc:	b087      	sub	sp, #28
   be5fe:	4680      	mov	r8, r0
   be600:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   be602:	4b1c      	ldr	r3, [pc, #112]	; (be674 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   be604:	685b      	ldr	r3, [r3, #4]
   be606:	f3c3 0308 	ubfx	r3, r3, #0, #9
   be60a:	4689      	mov	r9, r1
   be60c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   be60e:	b96b      	cbnz	r3, be62c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   be610:	f7ff ff04 	bl	be41c <_ZN5spark10LogManager8instanceEv>
   be614:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   be616:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   be61a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be61c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   be61e:	f7ff fddf 	bl	be1e0 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   be622:	7b23      	ldrb	r3, [r4, #12]
   be624:	b12b      	cbz	r3, be632 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   be626:	a805      	add	r0, sp, #20
   be628:	f7ff ffdd 	bl	be5e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   be62c:	b007      	add	sp, #28
   be62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   be632:	2301      	movs	r3, #1
   be634:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   be636:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   be63a:	fa5f f989 	uxtb.w	r9, r9
   be63e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   be642:	45aa      	cmp	sl, r5
   be644:	d012      	beq.n	be66c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   be646:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   be64a:	4631      	mov	r1, r6
   be64c:	1d38      	adds	r0, r7, #4
   be64e:	f7ff fe71 	bl	be334 <_ZNK5spark6detail9LogFilter5levelEPKc>
   be652:	4581      	cmp	r9, r0
   be654:	d3f5      	bcc.n	be642 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   be656:	683b      	ldr	r3, [r7, #0]
   be658:	9a03      	ldr	r2, [sp, #12]
   be65a:	9200      	str	r2, [sp, #0]
   be65c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   be660:	464a      	mov	r2, r9
   be662:	4633      	mov	r3, r6
   be664:	4641      	mov	r1, r8
   be666:	4638      	mov	r0, r7
   be668:	47d8      	blx	fp
   be66a:	e7ea      	b.n	be642 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   be66c:	2300      	movs	r3, #0
   be66e:	7323      	strb	r3, [r4, #12]
   be670:	e7d9      	b.n	be626 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   be672:	bf00      	nop
   be674:	e000ed00 	.word	0xe000ed00

000be678 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   be678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be67c:	469b      	mov	fp, r3
   be67e:	4b1a      	ldr	r3, [pc, #104]	; (be6e8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   be680:	685b      	ldr	r3, [r3, #4]
   be682:	f3c3 0308 	ubfx	r3, r3, #0, #9
   be686:	4680      	mov	r8, r0
   be688:	4689      	mov	r9, r1
   be68a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   be68c:	b96b      	cbnz	r3, be6aa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   be68e:	f7ff fec5 	bl	be41c <_ZN5spark10LogManager8instanceEv>
   be692:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   be694:	f100 0324 	add.w	r3, r0, #36	; 0x24
   be698:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be69a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   be69c:	f7ff fda0 	bl	be1e0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   be6a0:	7b23      	ldrb	r3, [r4, #12]
   be6a2:	b12b      	cbz	r3, be6b0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   be6a4:	a801      	add	r0, sp, #4
   be6a6:	f7ff ff9e 	bl	be5e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   be6aa:	b003      	add	sp, #12
   be6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   be6b0:	2301      	movs	r3, #1
   be6b2:	7323      	strb	r3, [r4, #12]
   be6b4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   be6b8:	b2f6      	uxtb	r6, r6
   be6ba:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   be6be:	4555      	cmp	r5, sl
   be6c0:	d00e      	beq.n	be6e0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   be6c2:	f855 7b04 	ldr.w	r7, [r5], #4
   be6c6:	4659      	mov	r1, fp
   be6c8:	1d38      	adds	r0, r7, #4
   be6ca:	f7ff fe33 	bl	be334 <_ZNK5spark6detail9LogFilter5levelEPKc>
   be6ce:	4286      	cmp	r6, r0
   be6d0:	d3f5      	bcc.n	be6be <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   be6d2:	683b      	ldr	r3, [r7, #0]
   be6d4:	464a      	mov	r2, r9
   be6d6:	68db      	ldr	r3, [r3, #12]
   be6d8:	4641      	mov	r1, r8
   be6da:	4638      	mov	r0, r7
   be6dc:	4798      	blx	r3
   be6de:	e7ee      	b.n	be6be <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   be6e0:	2300      	movs	r3, #0
   be6e2:	7323      	strb	r3, [r4, #12]
   be6e4:	e7de      	b.n	be6a4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   be6e6:	bf00      	nop
   be6e8:	e000ed00 	.word	0xe000ed00

000be6ec <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   be6ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   be6f0:	4b16      	ldr	r3, [pc, #88]	; (be74c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   be6f2:	685b      	ldr	r3, [r3, #4]
   be6f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   be6f8:	4605      	mov	r5, r0
   be6fa:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   be6fc:	bb1b      	cbnz	r3, be746 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   be6fe:	f7ff fe8d 	bl	be41c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   be702:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   be706:	4604      	mov	r4, r0
   be708:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be70a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   be70c:	f7ff fd68 	bl	be1e0 <_ZN14RecursiveMutex4lockEv.isra.0>
   be710:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   be714:	2446      	movs	r4, #70	; 0x46
   be716:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   be71a:	45b0      	cmp	r8, r6
   be71c:	d109      	bne.n	be732 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   be71e:	a801      	add	r0, sp, #4
   be720:	f7ff ff61 	bl	be5e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   be724:	42a5      	cmp	r5, r4
   be726:	bfb4      	ite	lt
   be728:	2000      	movlt	r0, #0
   be72a:	2001      	movge	r0, #1
}
   be72c:	b002      	add	sp, #8
   be72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   be732:	f856 0b04 	ldr.w	r0, [r6], #4
   be736:	4639      	mov	r1, r7
   be738:	3004      	adds	r0, #4
   be73a:	f7ff fdfb 	bl	be334 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   be73e:	4284      	cmp	r4, r0
   be740:	bfa8      	it	ge
   be742:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   be744:	e7e9      	b.n	be71a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   be746:	2000      	movs	r0, #0
   be748:	e7f0      	b.n	be72c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   be74a:	bf00      	nop
   be74c:	e000ed00 	.word	0xe000ed00

000be750 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be752:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   be756:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be758:	4604      	mov	r4, r0
   be75a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be75c:	db0d      	blt.n	be77a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   be75e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   be760:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   be762:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   be764:	dd04      	ble.n	be770 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   be766:	00b9      	lsls	r1, r7, #2
   be768:	f7fe fc72 	bl	bd050 <realloc>
            if (!d) {
   be76c:	b918      	cbnz	r0, be776 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   be76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   be770:	f7fe fc66 	bl	bd040 <free>
        T* d = nullptr;
   be774:	2000      	movs	r0, #0
        data_ = d;
   be776:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   be778:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   be77a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   be77c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be77e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   be782:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   be784:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   be788:	1d08      	adds	r0, r1, #4
   be78a:	f002 fc2f 	bl	c0fec <memmove>
    new(p) T(std::move(value));
   be78e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   be792:	6863      	ldr	r3, [r4, #4]
   be794:	3301      	adds	r3, #1
   be796:	6063      	str	r3, [r4, #4]
    return true;
   be798:	2001      	movs	r0, #1
   be79a:	e7e8      	b.n	be76e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000be79c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   be79c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   be79e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   be7a2:	4604      	mov	r4, r0
   be7a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be7a6:	9301      	str	r3, [sp, #4]
   be7a8:	460d      	mov	r5, r1
      { _M_device.lock(); }
   be7aa:	f7ff fd19 	bl	be1e0 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   be7ae:	e9d4 3200 	ldrd	r3, r2, [r4]
   be7b2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   be7b6:	4293      	cmp	r3, r2
   be7b8:	4619      	mov	r1, r3
   be7ba:	d00b      	beq.n	be7d4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   be7bc:	6809      	ldr	r1, [r1, #0]
   be7be:	42a9      	cmp	r1, r5
   be7c0:	f103 0304 	add.w	r3, r3, #4
   be7c4:	d1f7      	bne.n	be7b6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   be7c6:	a801      	add	r0, sp, #4
   be7c8:	f7ff ff0d 	bl	be5e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   be7cc:	2500      	movs	r5, #0
}
   be7ce:	4628      	mov	r0, r5
   be7d0:	b003      	add	sp, #12
   be7d2:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   be7d4:	4629      	mov	r1, r5
   be7d6:	4620      	mov	r0, r4
   be7d8:	f7ff ffba 	bl	be750 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   be7dc:	4605      	mov	r5, r0
   be7de:	2800      	cmp	r0, #0
   be7e0:	d0f1      	beq.n	be7c6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   be7e2:	6863      	ldr	r3, [r4, #4]
   be7e4:	2b01      	cmp	r3, #1
   be7e6:	d101      	bne.n	be7ec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   be7e8:	f7ff fe34 	bl	be454 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   be7ec:	a801      	add	r0, sp, #4
   be7ee:	f7ff fefa 	bl	be5e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   be7f2:	e7ec      	b.n	be7ce <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000be7f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   be7f4:	b570      	push	{r4, r5, r6, lr}
   be7f6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   be7f8:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   be7fc:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   be7fe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   be802:	4282      	cmp	r2, r0
   be804:	d00f      	beq.n	be826 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   be806:	4601      	mov	r1, r0
            if (*p == value) {
   be808:	681d      	ldr	r5, [r3, #0]
   be80a:	f851 6b04 	ldr.w	r6, [r1], #4
   be80e:	42ae      	cmp	r6, r5
   be810:	d107      	bne.n	be822 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   be812:	1a52      	subs	r2, r2, r1
   be814:	f002 fbea 	bl	c0fec <memmove>
    --size_;
   be818:	6863      	ldr	r3, [r4, #4]
   be81a:	3b01      	subs	r3, #1
   be81c:	6063      	str	r3, [r4, #4]
    return true;
   be81e:	2001      	movs	r0, #1
}
   be820:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   be822:	4608      	mov	r0, r1
   be824:	e7ed      	b.n	be802 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   be826:	2000      	movs	r0, #0
   be828:	e7fa      	b.n	be820 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000be82a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   be82a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   be82c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   be830:	4604      	mov	r4, r0
   be832:	6a40      	ldr	r0, [r0, #36]	; 0x24
   be834:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be836:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   be838:	f7ff fcd2 	bl	be1e0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   be83c:	a901      	add	r1, sp, #4
   be83e:	4620      	mov	r0, r4
   be840:	f7ff ffd8 	bl	be7f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   be844:	b118      	cbz	r0, be84e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   be846:	6863      	ldr	r3, [r4, #4]
   be848:	b90b      	cbnz	r3, be84e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   be84a:	f7ff fe0f 	bl	be46c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   be84e:	a803      	add	r0, sp, #12
   be850:	f7ff fec9 	bl	be5e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   be854:	b004      	add	sp, #16
   be856:	bd10      	pop	{r4, pc}

000be858 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   be858:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   be85a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   be85e:	2318      	movs	r3, #24
   be860:	4604      	mov	r4, r0
   be862:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   be866:	42ae      	cmp	r6, r5
   be868:	d015      	beq.n	be896 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   be86a:	f105 0110 	add.w	r1, r5, #16
   be86e:	4620      	mov	r0, r4
   be870:	f7ff ffc0 	bl	be7f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   be874:	6863      	ldr	r3, [r4, #4]
   be876:	b90b      	cbnz	r3, be87c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   be878:	f7ff fdf8 	bl	be46c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   be87c:	69e0      	ldr	r0, [r4, #28]
   be87e:	6929      	ldr	r1, [r5, #16]
   be880:	6803      	ldr	r3, [r0, #0]
   be882:	68db      	ldr	r3, [r3, #12]
   be884:	4798      	blx	r3
        if (h.stream) {
   be886:	6969      	ldr	r1, [r5, #20]
   be888:	b119      	cbz	r1, be892 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   be88a:	6a20      	ldr	r0, [r4, #32]
   be88c:	6803      	ldr	r3, [r0, #0]
   be88e:	68db      	ldr	r3, [r3, #12]
   be890:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   be892:	3518      	adds	r5, #24
   be894:	e7e7      	b.n	be866 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   be896:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   be89a:	2618      	movs	r6, #24
   be89c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   be8a0:	42ae      	cmp	r6, r5
   be8a2:	d004      	beq.n	be8ae <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   be8a4:	4628      	mov	r0, r5
   be8a6:	f000 ff45 	bl	bf734 <_ZN6StringD1Ev>
   be8aa:	3518      	adds	r5, #24
   be8ac:	e7f8      	b.n	be8a0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   be8ae:	2300      	movs	r3, #0
   be8b0:	6163      	str	r3, [r4, #20]
}
   be8b2:	bd70      	pop	{r4, r5, r6, pc}

000be8b4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   be8b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   be8b6:	4604      	mov	r4, r0
    resetSystemCallbacks();
   be8b8:	f7ff fdd8 	bl	be46c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   be8bc:	f104 0324 	add.w	r3, r4, #36	; 0x24
   be8c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be8c2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   be8c4:	f7ff fc8c 	bl	be1e0 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   be8c8:	4620      	mov	r0, r4
   be8ca:	f7ff ffc5 	bl	be858 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   be8ce:	a801      	add	r0, sp, #4
   be8d0:	f7ff fe89 	bl	be5e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   be8d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   be8d6:	b108      	cbz	r0, be8dc <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   be8d8:	f7fd ffc4 	bl	bc864 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   be8dc:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   be8e0:	2618      	movs	r6, #24
   be8e2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   be8e6:	42ae      	cmp	r6, r5
   be8e8:	d004      	beq.n	be8f4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   be8ea:	4628      	mov	r0, r5
   be8ec:	f000 ff22 	bl	bf734 <_ZN6StringD1Ev>
   be8f0:	3518      	adds	r5, #24
   be8f2:	e7f8      	b.n	be8e6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   be8f4:	6920      	ldr	r0, [r4, #16]
   be8f6:	f7fe fba3 	bl	bd040 <free>
   be8fa:	6820      	ldr	r0, [r4, #0]
   be8fc:	f7fe fba0 	bl	bd040 <free>
}
   be900:	4620      	mov	r0, r4
   be902:	b002      	add	sp, #8
   be904:	bd70      	pop	{r4, r5, r6, pc}
	...

000be908 <__tcf_2>:
    static LogManager mgr;
   be908:	4801      	ldr	r0, [pc, #4]	; (be910 <__tcf_2+0x8>)
   be90a:	f7ff bfd3 	b.w	be8b4 <_ZN5spark10LogManagerD1Ev>
   be90e:	bf00      	nop
   be910:	2003e65c 	.word	0x2003e65c

000be914 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   be914:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be918:	4604      	mov	r4, r0
   be91a:	460d      	mov	r5, r1
   be91c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be91e:	d915      	bls.n	be94c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   be920:	4290      	cmp	r0, r2
   be922:	d214      	bcs.n	be94e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   be924:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   be928:	1a75      	subs	r5, r6, r1
   be92a:	f1a1 0714 	sub.w	r7, r1, #20
   be92e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be930:	42b7      	cmp	r7, r6
   be932:	d01a      	beq.n	be96a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   be934:	b11c      	cbz	r4, be93e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   be936:	4631      	mov	r1, r6
   be938:	4620      	mov	r0, r4
   be93a:	f7ff fcab 	bl	be294 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   be93e:	f106 0008 	add.w	r0, r6, #8
   be942:	f7ff fdf9 	bl	be538 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   be946:	3e14      	subs	r6, #20
   be948:	3c14      	subs	r4, #20
   be94a:	e7f1      	b.n	be930 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   be94c:	d00d      	beq.n	be96a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   be94e:	42b5      	cmp	r5, r6
   be950:	d00b      	beq.n	be96a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   be952:	b11c      	cbz	r4, be95c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   be954:	4629      	mov	r1, r5
   be956:	4620      	mov	r0, r4
   be958:	f7ff fc9c 	bl	be294 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   be95c:	f105 0008 	add.w	r0, r5, #8
   be960:	f7ff fdea 	bl	be538 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   be964:	3514      	adds	r5, #20
   be966:	3414      	adds	r4, #20
   be968:	e7f1      	b.n	be94e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   be96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be96c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   be96c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be96e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be970:	4604      	mov	r4, r0
   be972:	460d      	mov	r5, r1
   be974:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be976:	d914      	bls.n	be9a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   be978:	4290      	cmp	r0, r2
   be97a:	d213      	bcs.n	be9a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   be97c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   be980:	1a75      	subs	r5, r6, r1
   be982:	f1a1 0710 	sub.w	r7, r1, #16
   be986:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be988:	42b7      	cmp	r7, r6
   be98a:	d018      	beq.n	be9be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   be98c:	b11c      	cbz	r4, be996 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   be98e:	4631      	mov	r1, r6
   be990:	4620      	mov	r0, r4
   be992:	f000 ff4b 	bl	bf82c <_ZN6StringC1EOS_>
                end->~T();
   be996:	4630      	mov	r0, r6
   be998:	f000 fecc 	bl	bf734 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   be99c:	3e10      	subs	r6, #16
   be99e:	3c10      	subs	r4, #16
   be9a0:	e7f2      	b.n	be988 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   be9a2:	d00c      	beq.n	be9be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   be9a4:	42b5      	cmp	r5, r6
   be9a6:	d00a      	beq.n	be9be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   be9a8:	b11c      	cbz	r4, be9b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   be9aa:	4629      	mov	r1, r5
   be9ac:	4620      	mov	r0, r4
   be9ae:	f000 ff3d 	bl	bf82c <_ZN6StringC1EOS_>
                p->~T();
   be9b2:	4628      	mov	r0, r5
   be9b4:	f000 febe 	bl	bf734 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   be9b8:	3510      	adds	r5, #16
   be9ba:	3410      	adds	r4, #16
   be9bc:	e7f2      	b.n	be9a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   be9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be9c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   be9c0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   be9c2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   be9c4:	4605      	mov	r5, r0
        if (n > 0) {
   be9c6:	dd11      	ble.n	be9ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   be9c8:	0130      	lsls	r0, r6, #4
   be9ca:	f7fe fb31 	bl	bd030 <malloc>
            if (!d) {
   be9ce:	4604      	mov	r4, r0
   be9d0:	b158      	cbz	r0, be9ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   be9d2:	e9d5 1200 	ldrd	r1, r2, [r5]
   be9d6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   be9da:	f7ff ffc7 	bl	be96c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   be9de:	6828      	ldr	r0, [r5, #0]
   be9e0:	f7fe fb2e 	bl	bd040 <free>
        data_ = d;
   be9e4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   be9e6:	60ae      	str	r6, [r5, #8]
        return true;
   be9e8:	2001      	movs	r0, #1
    }
   be9ea:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   be9ec:	2400      	movs	r4, #0
   be9ee:	e7f6      	b.n	be9de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000be9f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   be9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be9f4:	4690      	mov	r8, r2
   be9f6:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   be9f8:	2300      	movs	r3, #0
   be9fa:	9103      	str	r1, [sp, #12]
    return size_;
   be9fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bea00:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bea02:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bea04:	4299      	cmp	r1, r3
        capacity_(0) {
   bea06:	e9c0 3300 	strd	r3, r3, [r0]
   bea0a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bea0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bea12:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bea16:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bea18:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bea1a:	dc23      	bgt.n	bea64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bea1c:	e9d8 5700 	ldrd	r5, r7, [r8]
   bea20:	2314      	movs	r3, #20
   bea22:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bea26:	42af      	cmp	r7, r5
   bea28:	d03b      	beq.n	beaa2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bea2a:	4629      	mov	r1, r5
   bea2c:	a80b      	add	r0, sp, #44	; 0x2c
   bea2e:	f000 fefd 	bl	bf82c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bea32:	a90b      	add	r1, sp, #44	; 0x2c
   bea34:	a80f      	add	r0, sp, #60	; 0x3c
   bea36:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bea38:	f000 fef8 	bl	bf82c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bea3c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bea40:	4299      	cmp	r1, r3
   bea42:	da1b      	bge.n	bea7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bea44:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bea46:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bea48:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bea4c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bea50:	4631      	mov	r1, r6
   bea52:	f106 0010 	add.w	r0, r6, #16
   bea56:	f7ff ff89 	bl	be96c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bea5a:	b9ee      	cbnz	r6, bea98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bea5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bea5e:	3301      	adds	r3, #1
   bea60:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bea62:	e011      	b.n	bea88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bea64:	a808      	add	r0, sp, #32
   bea66:	f7ff ffab 	bl	be9c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bea6a:	2800      	cmp	r0, #0
   bea6c:	d1d6      	bne.n	bea1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bea6e:	a808      	add	r0, sp, #32
   bea70:	f7fe fb89 	bl	bd186 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bea74:	4620      	mov	r0, r4
   bea76:	b015      	add	sp, #84	; 0x54
   bea78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bea7c:	3101      	adds	r1, #1
   bea7e:	a808      	add	r0, sp, #32
   bea80:	f7ff ff9e 	bl	be9c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bea84:	2800      	cmp	r0, #0
   bea86:	d1dd      	bne.n	bea44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   bea88:	a80f      	add	r0, sp, #60	; 0x3c
   bea8a:	f000 fe53 	bl	bf734 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   bea8e:	a80b      	add	r0, sp, #44	; 0x2c
   bea90:	f000 fe50 	bl	bf734 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   bea94:	3514      	adds	r5, #20
   bea96:	e7c6      	b.n	bea26 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   bea98:	a90f      	add	r1, sp, #60	; 0x3c
   bea9a:	4630      	mov	r0, r6
   bea9c:	f000 fec6 	bl	bf82c <_ZN6StringC1EOS_>
   beaa0:	e7dc      	b.n	bea5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   beaa2:	2600      	movs	r6, #0
   beaa4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   beaa8:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   beaaa:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   beaae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   beab2:	429e      	cmp	r6, r3
   beab4:	da7c      	bge.n	bebb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   beab6:	0133      	lsls	r3, r6, #4
   beab8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   beaba:	9306      	str	r3, [sp, #24]
        if (!category) {
   beabc:	b90b      	cbnz	r3, beac2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   beabe:	3601      	adds	r6, #1
   beac0:	e7f5      	b.n	beaae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   beac2:	2300      	movs	r3, #0
   beac4:	9307      	str	r3, [sp, #28]
   beac6:	fb09 f306 	mul.w	r3, r9, r6
   beaca:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   beacc:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   beace:	a907      	add	r1, sp, #28
   bead0:	a806      	add	r0, sp, #24
   bead2:	f7ff fb5e 	bl	be192 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bead6:	4682      	mov	sl, r0
   bead8:	2800      	cmp	r0, #0
   beada:	d0f0      	beq.n	beabe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   beadc:	f04f 0300 	mov.w	r3, #0
   beae0:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   beae4:	4601      	mov	r1, r0
   beae6:	9a07      	ldr	r2, [sp, #28]
   beae8:	f10d 0317 	add.w	r3, sp, #23
   beaec:	4628      	mov	r0, r5
   beaee:	f7ff fbe5 	bl	be2bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   beaf2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   beaf6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   beaf8:	2f00      	cmp	r7, #0
   beafa:	d14a      	bne.n	beb92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   beafc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   beb00:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   beb04:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   beb08:	f64f 73ff 	movw	r3, #65535	; 0xffff
   beb0c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   beb10:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   beb14:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   beb16:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   beb1a:	4293      	cmp	r3, r2
   beb1c:	db17      	blt.n	beb4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   beb1e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   beb22:	f1ba 0f00 	cmp.w	sl, #0
   beb26:	dd30      	ble.n	beb8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   beb28:	fb09 f00a 	mul.w	r0, r9, sl
   beb2c:	f7fe fa80 	bl	bd030 <malloc>
            if (!d) {
   beb30:	4683      	mov	fp, r0
   beb32:	b360      	cbz	r0, beb8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   beb34:	e9d5 1200 	ldrd	r1, r2, [r5]
   beb38:	fb09 1202 	mla	r2, r9, r2, r1
   beb3c:	f7ff feea 	bl	be914 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   beb40:	6828      	ldr	r0, [r5, #0]
   beb42:	f7fe fa7d 	bl	bd040 <free>
        data_ = d;
   beb46:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   beb4a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   beb4e:	682b      	ldr	r3, [r5, #0]
   beb50:	9a01      	ldr	r2, [sp, #4]
   beb52:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   beb56:	686a      	ldr	r2, [r5, #4]
   beb58:	4651      	mov	r1, sl
   beb5a:	fb09 3202 	mla	r2, r9, r2, r3
   beb5e:	f10a 0014 	add.w	r0, sl, #20
   beb62:	f7ff fed7 	bl	be914 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   beb66:	f1ba 0f00 	cmp.w	sl, #0
   beb6a:	d003      	beq.n	beb74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   beb6c:	a90f      	add	r1, sp, #60	; 0x3c
   beb6e:	4650      	mov	r0, sl
   beb70:	f7ff fb90 	bl	be294 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   beb74:	686b      	ldr	r3, [r5, #4]
   beb76:	3301      	adds	r3, #1
   beb78:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   beb7a:	a811      	add	r0, sp, #68	; 0x44
   beb7c:	f7ff fcdc 	bl	be538 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   beb80:	b13f      	cbz	r7, beb92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   beb82:	a80b      	add	r0, sp, #44	; 0x2c
   beb84:	f7ff fcd8 	bl	be538 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   beb88:	e771      	b.n	bea6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   beb8a:	46bb      	mov	fp, r7
   beb8c:	e7d8      	b.n	beb40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   beb8e:	2701      	movs	r7, #1
   beb90:	e7f3      	b.n	beb7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   beb92:	9b01      	ldr	r3, [sp, #4]
   beb94:	682d      	ldr	r5, [r5, #0]
   beb96:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   beb9a:	9b06      	ldr	r3, [sp, #24]
   beb9c:	781b      	ldrb	r3, [r3, #0]
   beb9e:	b92b      	cbnz	r3, bebac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   beba0:	f8d8 3000 	ldr.w	r3, [r8]
   beba4:	9a02      	ldr	r2, [sp, #8]
   beba6:	4413      	add	r3, r2
   beba8:	7c1b      	ldrb	r3, [r3, #16]
   bebaa:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bebac:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bebae:	e78e      	b.n	beace <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bebb0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bebb2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bebb4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bebb6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bebb8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bebba:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bebbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bebbe:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bebc0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bebc2:	60a2      	str	r2, [r4, #8]
   bebc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bebc6:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bebc8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bebca:	60e2      	str	r2, [r4, #12]
   bebcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bebce:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bebd0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bebd2:	6122      	str	r2, [r4, #16]
   bebd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bebd6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bebd8:	9b03      	ldr	r3, [sp, #12]
   bebda:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bebdc:	6162      	str	r2, [r4, #20]
   bebde:	7623      	strb	r3, [r4, #24]
   bebe0:	e7cf      	b.n	beb82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bebe4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bebe4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bebe6:	4604      	mov	r4, r0
   bebe8:	b087      	sub	sp, #28
   bebea:	460d      	mov	r5, r1
        filter_(level, filters) {
   bebec:	4626      	mov	r6, r4
        stream_(&stream) {
   bebee:	4619      	mov	r1, r3
   bebf0:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bebf2:	4617      	mov	r7, r2
        stream_(&stream) {
   bebf4:	f7f8 fb27 	bl	b7246 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bebf8:	4b0b      	ldr	r3, [pc, #44]	; (bec28 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bebfa:	f846 3b04 	str.w	r3, [r6], #4
   bebfe:	4669      	mov	r1, sp
   bec00:	a803      	add	r0, sp, #12
   bec02:	f7f8 fb20 	bl	b7246 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bec06:	aa03      	add	r2, sp, #12
   bec08:	4639      	mov	r1, r7
   bec0a:	4630      	mov	r0, r6
   bec0c:	f7ff fef0 	bl	be9f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bec10:	a803      	add	r0, sp, #12
   bec12:	f7f8 fad7 	bl	b71c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bec16:	4668      	mov	r0, sp
   bec18:	f7f8 fad4 	bl	b71c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bec1c:	4b03      	ldr	r3, [pc, #12]	; (bec2c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   bec1e:	6023      	str	r3, [r4, #0]
}
   bec20:	4620      	mov	r0, r4
        stream_(&stream) {
   bec22:	6225      	str	r5, [r4, #32]
}
   bec24:	b007      	add	sp, #28
   bec26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bec28:	000c4334 	.word	0x000c4334
   bec2c:	000c5010 	.word	0x000c5010

000bec30 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   bec30:	b5f0      	push	{r4, r5, r6, r7, lr}
   bec32:	460f      	mov	r7, r1
   bec34:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bec36:	491d      	ldr	r1, [pc, #116]	; (becac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   bec38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bec3a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   bec3c:	4616      	mov	r6, r2
   bec3e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bec40:	f002 fa89 	bl	c1156 <strcmp>
   bec44:	b9c0      	cbnz	r0, bec78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   bec46:	b1a4      	cbz	r4, bec72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   bec48:	4629      	mov	r1, r5
   bec4a:	a801      	add	r0, sp, #4
   bec4c:	f7ff fcbc 	bl	be5c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bec50:	4917      	ldr	r1, [pc, #92]	; (becb0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bec52:	2024      	movs	r0, #36	; 0x24
   bec54:	f001 fc32 	bl	c04bc <_ZnwjRKSt9nothrow_t>
   bec58:	4605      	mov	r5, r0
   bec5a:	b130      	cbz	r0, bec6a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   bec5c:	ab01      	add	r3, sp, #4
   bec5e:	4632      	mov	r2, r6
   bec60:	4621      	mov	r1, r4
   bec62:	f7ff ffbf 	bl	bebe4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bec66:	4b13      	ldr	r3, [pc, #76]	; (becb4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   bec68:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bec6a:	a801      	add	r0, sp, #4
   bec6c:	f7f8 faaa 	bl	b71c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bec70:	462c      	mov	r4, r5
}
   bec72:	4620      	mov	r0, r4
   bec74:	b005      	add	sp, #20
   bec76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   bec78:	490f      	ldr	r1, [pc, #60]	; (becb8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   bec7a:	4638      	mov	r0, r7
   bec7c:	f002 fa6b 	bl	c1156 <strcmp>
   bec80:	b990      	cbnz	r0, beca8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   bec82:	2c00      	cmp	r4, #0
   bec84:	d0f5      	beq.n	bec72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bec86:	4629      	mov	r1, r5
   bec88:	a801      	add	r0, sp, #4
   bec8a:	f7ff fc9d 	bl	be5c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bec8e:	4908      	ldr	r1, [pc, #32]	; (becb0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bec90:	2024      	movs	r0, #36	; 0x24
   bec92:	f001 fc13 	bl	c04bc <_ZnwjRKSt9nothrow_t>
   bec96:	4605      	mov	r5, r0
   bec98:	2800      	cmp	r0, #0
   bec9a:	d0e6      	beq.n	bec6a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   bec9c:	ab01      	add	r3, sp, #4
   bec9e:	4632      	mov	r2, r6
   beca0:	4621      	mov	r1, r4
   beca2:	f7ff ff9f 	bl	bebe4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   beca6:	e7e0      	b.n	bec6a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   beca8:	2400      	movs	r4, #0
   becaa:	e7e2      	b.n	bec72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   becac:	000c4f9a 	.word	0x000c4f9a
   becb0:	000c5164 	.word	0x000c5164
   becb4:	000c5028 	.word	0x000c5028
   becb8:	000c4f9e 	.word	0x000c4f9e

000becbc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   becbc:	4b01      	ldr	r3, [pc, #4]	; (becc4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   becbe:	4a02      	ldr	r2, [pc, #8]	; (becc8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   becc0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   becc2:	4770      	bx	lr
   becc4:	2003e658 	.word	0x2003e658
   becc8:	000c4faf 	.word	0x000c4faf

000beccc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   beccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   becd0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   becd2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   becd6:	4604      	mov	r4, r0
   becd8:	460e      	mov	r6, r1
   becda:	4617      	mov	r7, r2
   becdc:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   becde:	f001 f9c3 	bl	c0068 <_Z16_fetch_usbserialv>
   bece2:	4581      	cmp	r9, r0
   bece4:	d04c      	beq.n	bed80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   bece6:	792b      	ldrb	r3, [r5, #4]
   bece8:	0719      	lsls	r1, r3, #28
   becea:	d504      	bpl.n	becf6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   becec:	696a      	ldr	r2, [r5, #20]
   becee:	4954      	ldr	r1, [pc, #336]	; (bee40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   becf0:	4620      	mov	r0, r4
   becf2:	f7ff fac0 	bl	be276 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   becf6:	f1b8 0f00 	cmp.w	r8, #0
   becfa:	d00d      	beq.n	bed18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   becfc:	215b      	movs	r1, #91	; 0x5b
   becfe:	4620      	mov	r0, r4
   bed00:	f7ff faad 	bl	be25e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bed04:	4641      	mov	r1, r8
   bed06:	4620      	mov	r0, r4
   bed08:	f7ff fa9a 	bl	be240 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bed0c:	6823      	ldr	r3, [r4, #0]
   bed0e:	494d      	ldr	r1, [pc, #308]	; (bee44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bed10:	68db      	ldr	r3, [r3, #12]
   bed12:	2202      	movs	r2, #2
   bed14:	4620      	mov	r0, r4
   bed16:	4798      	blx	r3
    if (attr.has_file) {
   bed18:	792b      	ldrb	r3, [r5, #4]
   bed1a:	07da      	lsls	r2, r3, #31
   bed1c:	d523      	bpl.n	bed66 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bed1e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bed22:	212f      	movs	r1, #47	; 0x2f
   bed24:	4640      	mov	r0, r8
   bed26:	f002 fa75 	bl	c1214 <strrchr>
    if (s1) {
   bed2a:	b108      	cbz	r0, bed30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bed2c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bed30:	4641      	mov	r1, r8
   bed32:	4620      	mov	r0, r4
   bed34:	f7ff fa84 	bl	be240 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bed38:	792b      	ldrb	r3, [r5, #4]
   bed3a:	079b      	lsls	r3, r3, #30
   bed3c:	d508      	bpl.n	bed50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bed3e:	213a      	movs	r1, #58	; 0x3a
   bed40:	4620      	mov	r0, r4
   bed42:	f7ff fa8c 	bl	be25e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bed46:	68ea      	ldr	r2, [r5, #12]
   bed48:	493f      	ldr	r1, [pc, #252]	; (bee48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bed4a:	4620      	mov	r0, r4
   bed4c:	f7ff fa93 	bl	be276 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bed50:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bed52:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bed54:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bed58:	68db      	ldr	r3, [r3, #12]
   bed5a:	bf14      	ite	ne
   bed5c:	493b      	ldrne	r1, [pc, #236]	; (bee4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bed5e:	493c      	ldreq	r1, [pc, #240]	; (bee50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bed60:	2202      	movs	r2, #2
            write(": ", 2);
   bed62:	4620      	mov	r0, r4
   bed64:	4798      	blx	r3
    if (attr.has_function) {
   bed66:	792b      	ldrb	r3, [r5, #4]
   bed68:	0758      	lsls	r0, r3, #29
   bed6a:	d51d      	bpl.n	beda8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bed6c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bed6e:	460b      	mov	r3, r1
   bed70:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bed72:	f813 0b01 	ldrb.w	r0, [r3], #1
   bed76:	b160      	cbz	r0, bed92 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bed78:	2820      	cmp	r0, #32
   bed7a:	d108      	bne.n	bed8e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bed7c:	4619      	mov	r1, r3
   bed7e:	e7f7      	b.n	bed70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bed80:	4834      	ldr	r0, [pc, #208]	; (bee54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bed82:	f000 f966 	bl	bf052 <_ZN5spark12NetworkClass9listeningEv>
   bed86:	2800      	cmp	r0, #0
   bed88:	d0ad      	beq.n	bece6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   bed8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   bed8e:	2828      	cmp	r0, #40	; 0x28
   bed90:	d1ee      	bne.n	bed70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   bed92:	6823      	ldr	r3, [r4, #0]
   bed94:	1a52      	subs	r2, r2, r1
   bed96:	68db      	ldr	r3, [r3, #12]
   bed98:	4620      	mov	r0, r4
   bed9a:	4798      	blx	r3
        write("(): ", 4);
   bed9c:	6823      	ldr	r3, [r4, #0]
   bed9e:	492e      	ldr	r1, [pc, #184]	; (bee58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   beda0:	68db      	ldr	r3, [r3, #12]
   beda2:	2204      	movs	r2, #4
   beda4:	4620      	mov	r0, r4
   beda6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   beda8:	2100      	movs	r1, #0
   bedaa:	4638      	mov	r0, r7
   bedac:	f7fd ffe2 	bl	bcd74 <log_level_name>
   bedb0:	4601      	mov	r1, r0
    write(s);
   bedb2:	4620      	mov	r0, r4
   bedb4:	f7ff fa44 	bl	be240 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   bedb8:	6823      	ldr	r3, [r4, #0]
   bedba:	4925      	ldr	r1, [pc, #148]	; (bee50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   bedbc:	68db      	ldr	r3, [r3, #12]
   bedbe:	2202      	movs	r2, #2
   bedc0:	4620      	mov	r0, r4
   bedc2:	4798      	blx	r3
    if (msg) {
   bedc4:	b11e      	cbz	r6, bedce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   bedc6:	4631      	mov	r1, r6
   bedc8:	4620      	mov	r0, r4
   bedca:	f7ff fa39 	bl	be240 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   bedce:	792b      	ldrb	r3, [r5, #4]
   bedd0:	f013 0f30 	tst.w	r3, #48	; 0x30
   bedd4:	d02c      	beq.n	bee30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   bedd6:	6823      	ldr	r3, [r4, #0]
   bedd8:	4920      	ldr	r1, [pc, #128]	; (bee5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   bedda:	68db      	ldr	r3, [r3, #12]
   beddc:	2202      	movs	r2, #2
   bedde:	4620      	mov	r0, r4
   bede0:	4798      	blx	r3
        if (attr.has_code) {
   bede2:	792b      	ldrb	r3, [r5, #4]
   bede4:	06d9      	lsls	r1, r3, #27
   bede6:	d50a      	bpl.n	bedfe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   bede8:	6823      	ldr	r3, [r4, #0]
   bedea:	491d      	ldr	r1, [pc, #116]	; (bee60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   bedec:	68db      	ldr	r3, [r3, #12]
   bedee:	2207      	movs	r2, #7
   bedf0:	4620      	mov	r0, r4
   bedf2:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   bedf4:	69aa      	ldr	r2, [r5, #24]
   bedf6:	491b      	ldr	r1, [pc, #108]	; (bee64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   bedf8:	4620      	mov	r0, r4
   bedfa:	f7ff fa3c 	bl	be276 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   bedfe:	792b      	ldrb	r3, [r5, #4]
   bee00:	069a      	lsls	r2, r3, #26
   bee02:	d511      	bpl.n	bee28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   bee04:	06db      	lsls	r3, r3, #27
   bee06:	d505      	bpl.n	bee14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   bee08:	6823      	ldr	r3, [r4, #0]
   bee0a:	4910      	ldr	r1, [pc, #64]	; (bee4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   bee0c:	68db      	ldr	r3, [r3, #12]
   bee0e:	2202      	movs	r2, #2
   bee10:	4620      	mov	r0, r4
   bee12:	4798      	blx	r3
            write("details = ", 10);
   bee14:	6823      	ldr	r3, [r4, #0]
   bee16:	4914      	ldr	r1, [pc, #80]	; (bee68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   bee18:	68db      	ldr	r3, [r3, #12]
   bee1a:	4620      	mov	r0, r4
   bee1c:	220a      	movs	r2, #10
   bee1e:	4798      	blx	r3
            write(attr.details);
   bee20:	69e9      	ldr	r1, [r5, #28]
   bee22:	4620      	mov	r0, r4
   bee24:	f7ff fa0c 	bl	be240 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   bee28:	215d      	movs	r1, #93	; 0x5d
   bee2a:	4620      	mov	r0, r4
   bee2c:	f7ff fa17 	bl	be25e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   bee30:	6823      	ldr	r3, [r4, #0]
   bee32:	490e      	ldr	r1, [pc, #56]	; (bee6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   bee34:	68db      	ldr	r3, [r3, #12]
   bee36:	4620      	mov	r0, r4
   bee38:	2202      	movs	r2, #2
}
   bee3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   bee3e:	4718      	bx	r3
   bee40:	000c4fb3 	.word	0x000c4fb3
   bee44:	000c4fba 	.word	0x000c4fba
   bee48:	000c36ef 	.word	0x000c36ef
   bee4c:	000c4fbd 	.word	0x000c4fbd
   bee50:	000c4fc2 	.word	0x000c4fc2
   bee54:	2003e684 	.word	0x2003e684
   bee58:	000c4fc0 	.word	0x000c4fc0
   bee5c:	000c4fc5 	.word	0x000c4fc5
   bee60:	000c4fc8 	.word	0x000c4fc8
   bee64:	000c4fd0 	.word	0x000c4fd0
   bee68:	000c4fd3 	.word	0x000c4fd3
   bee6c:	000c4fde 	.word	0x000c4fde

000bee70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bee70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bee74:	b085      	sub	sp, #20
    return stream_;
   bee76:	f8d0 9020 	ldr.w	r9, [r0, #32]
   bee7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   bee7c:	4605      	mov	r5, r0
   bee7e:	460f      	mov	r7, r1
   bee80:	4690      	mov	r8, r2
   bee82:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   bee84:	f001 f8f0 	bl	c0068 <_Z16_fetch_usbserialv>
   bee88:	4581      	cmp	r9, r0
   bee8a:	d105      	bne.n	bee98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   bee8c:	4849      	ldr	r0, [pc, #292]	; (befb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   bee8e:	f000 f8e0 	bl	bf052 <_ZN5spark12NetworkClass9listeningEv>
   bee92:	2800      	cmp	r0, #0
   bee94:	f040 808a 	bne.w	befac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   bee98:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   bee9a:	4a47      	ldr	r2, [pc, #284]	; (befb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   bee9c:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   bee9e:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   beea2:	a801      	add	r0, sp, #4
        strm_(stream) {
   beea4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   beea6:	f88d 9008 	strb.w	r9, [sp, #8]
   beeaa:	f7ff f88c 	bl	bdfc6 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   beeae:	4649      	mov	r1, r9
   beeb0:	4640      	mov	r0, r8
   beeb2:	f7fd ff5f 	bl	bcd74 <log_level_name>
    json.name("l", 1).value(s);
   beeb6:	4941      	ldr	r1, [pc, #260]	; (befbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   beeb8:	4680      	mov	r8, r0
   beeba:	2201      	movs	r2, #1
   beebc:	a801      	add	r0, sp, #4
   beebe:	f7ff f911 	bl	be0e4 <_ZN5spark10JSONWriter4nameEPKcj>
   beec2:	4641      	mov	r1, r8
   beec4:	f7ff f9ae 	bl	be224 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   beec8:	b13f      	cbz	r7, beeda <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   beeca:	493d      	ldr	r1, [pc, #244]	; (befc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   beecc:	2201      	movs	r2, #1
   beece:	a801      	add	r0, sp, #4
   beed0:	f7ff f908 	bl	be0e4 <_ZN5spark10JSONWriter4nameEPKcj>
   beed4:	4639      	mov	r1, r7
   beed6:	f7ff f9a5 	bl	be224 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   beeda:	b13e      	cbz	r6, beeec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   beedc:	4939      	ldr	r1, [pc, #228]	; (befc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   beede:	2201      	movs	r2, #1
   beee0:	a801      	add	r0, sp, #4
   beee2:	f7ff f8ff 	bl	be0e4 <_ZN5spark10JSONWriter4nameEPKcj>
   beee6:	4631      	mov	r1, r6
   beee8:	f7ff f99c 	bl	be224 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   beeec:	7923      	ldrb	r3, [r4, #4]
   beeee:	07df      	lsls	r7, r3, #31
   beef0:	d50e      	bpl.n	bef10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   beef2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   beef4:	212f      	movs	r1, #47	; 0x2f
   beef6:	4630      	mov	r0, r6
   beef8:	f002 f98c 	bl	c1214 <strrchr>
    if (s1) {
   beefc:	b100      	cbz	r0, bef00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   beefe:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   bef00:	4931      	ldr	r1, [pc, #196]	; (befc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   bef02:	2201      	movs	r2, #1
   bef04:	a801      	add	r0, sp, #4
   bef06:	f7ff f8ed 	bl	be0e4 <_ZN5spark10JSONWriter4nameEPKcj>
   bef0a:	4631      	mov	r1, r6
   bef0c:	f7ff f98a 	bl	be224 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   bef10:	7923      	ldrb	r3, [r4, #4]
   bef12:	079e      	lsls	r6, r3, #30
   bef14:	d507      	bpl.n	bef26 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   bef16:	492d      	ldr	r1, [pc, #180]	; (befcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   bef18:	2202      	movs	r2, #2
   bef1a:	a801      	add	r0, sp, #4
   bef1c:	f7ff f8e2 	bl	be0e4 <_ZN5spark10JSONWriter4nameEPKcj>
   bef20:	68e1      	ldr	r1, [r4, #12]
   bef22:	f7ff f85d 	bl	bdfe0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   bef26:	7923      	ldrb	r3, [r4, #4]
   bef28:	0758      	lsls	r0, r3, #29
   bef2a:	d514      	bpl.n	bef56 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bef2c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bef2e:	4633      	mov	r3, r6
   bef30:	461f      	mov	r7, r3
    for (; *s; ++s) {
   bef32:	f813 2b01 	ldrb.w	r2, [r3], #1
   bef36:	b12a      	cbz	r2, bef44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   bef38:	2a20      	cmp	r2, #32
   bef3a:	d101      	bne.n	bef40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   bef3c:	461e      	mov	r6, r3
   bef3e:	e7f7      	b.n	bef30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   bef40:	2a28      	cmp	r2, #40	; 0x28
   bef42:	d1f5      	bne.n	bef30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   bef44:	4922      	ldr	r1, [pc, #136]	; (befd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bef46:	2202      	movs	r2, #2
   bef48:	a801      	add	r0, sp, #4
   bef4a:	f7ff f8cb 	bl	be0e4 <_ZN5spark10JSONWriter4nameEPKcj>
   bef4e:	1bba      	subs	r2, r7, r6
   bef50:	4631      	mov	r1, r6
   bef52:	f7ff f8d7 	bl	be104 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bef56:	7923      	ldrb	r3, [r4, #4]
   bef58:	0719      	lsls	r1, r3, #28
   bef5a:	d507      	bpl.n	bef6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   bef5c:	491d      	ldr	r1, [pc, #116]	; (befd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bef5e:	2201      	movs	r2, #1
   bef60:	a801      	add	r0, sp, #4
   bef62:	f7ff f8bf 	bl	be0e4 <_ZN5spark10JSONWriter4nameEPKcj>
   bef66:	6961      	ldr	r1, [r4, #20]
   bef68:	f7ff f84c 	bl	be004 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bef6c:	7923      	ldrb	r3, [r4, #4]
   bef6e:	06da      	lsls	r2, r3, #27
   bef70:	d508      	bpl.n	bef84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bef72:	2204      	movs	r2, #4
   bef74:	4918      	ldr	r1, [pc, #96]	; (befd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bef76:	eb0d 0002 	add.w	r0, sp, r2
   bef7a:	f7ff f8b3 	bl	be0e4 <_ZN5spark10JSONWriter4nameEPKcj>
   bef7e:	69a1      	ldr	r1, [r4, #24]
   bef80:	f7ff f82e 	bl	bdfe0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   bef84:	7923      	ldrb	r3, [r4, #4]
   bef86:	069b      	lsls	r3, r3, #26
   bef88:	d507      	bpl.n	bef9a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   bef8a:	4914      	ldr	r1, [pc, #80]	; (befdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   bef8c:	2206      	movs	r2, #6
   bef8e:	a801      	add	r0, sp, #4
   bef90:	f7ff f8a8 	bl	be0e4 <_ZN5spark10JSONWriter4nameEPKcj>
   bef94:	69e1      	ldr	r1, [r4, #28]
   bef96:	f7ff f945 	bl	be224 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bef9a:	a801      	add	r0, sp, #4
   bef9c:	f7fe fffd 	bl	bdf9a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   befa0:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   befa2:	490f      	ldr	r1, [pc, #60]	; (befe0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   befa4:	6803      	ldr	r3, [r0, #0]
   befa6:	2202      	movs	r2, #2
   befa8:	68db      	ldr	r3, [r3, #12]
   befaa:	4798      	blx	r3
}
   befac:	b005      	add	sp, #20
   befae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   befb2:	bf00      	nop
   befb4:	2003e684 	.word	0x2003e684
   befb8:	000c4ff8 	.word	0x000c4ff8
   befbc:	000c4f90 	.word	0x000c4f90
   befc0:	000c48e0 	.word	0x000c48e0
   befc4:	000c54c0 	.word	0x000c54c0
   befc8:	000c46f5 	.word	0x000c46f5
   befcc:	000c4fe1 	.word	0x000c4fe1
   befd0:	000c3fb9 	.word	0x000c3fb9
   befd4:	000c3c66 	.word	0x000c3c66
   befd8:	000c4fe4 	.word	0x000c4fe4
   befdc:	000c4fe9 	.word	0x000c4fe9
   befe0:	000c4fde 	.word	0x000c4fde

000befe4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   befe4:	2300      	movs	r3, #0
   befe6:	6840      	ldr	r0, [r0, #4]
   befe8:	461a      	mov	r2, r3
   befea:	f7fd bfc1 	b.w	bcf70 <network_connect>

000befee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   befee:	6840      	ldr	r0, [r0, #4]
   beff0:	2200      	movs	r2, #0
   beff2:	2102      	movs	r1, #2
   beff4:	f7fd bfcc 	b.w	bcf90 <network_disconnect>

000beff8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   beff8:	2200      	movs	r2, #0
   beffa:	6840      	ldr	r0, [r0, #4]
   beffc:	4611      	mov	r1, r2
   beffe:	f7fd bfbf 	b.w	bcf80 <network_connecting>

000bf002 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bf002:	2200      	movs	r2, #0
   bf004:	6840      	ldr	r0, [r0, #4]
   bf006:	4611      	mov	r1, r2
   bf008:	f7fd bfca 	b.w	bcfa0 <network_ready>

000bf00c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bf00c:	2300      	movs	r3, #0
   bf00e:	6840      	ldr	r0, [r0, #4]
   bf010:	461a      	mov	r2, r3
   bf012:	4619      	mov	r1, r3
   bf014:	f7fd bfcc 	b.w	bcfb0 <network_on>

000bf018 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bf018:	2300      	movs	r3, #0
   bf01a:	6840      	ldr	r0, [r0, #4]
   bf01c:	461a      	mov	r2, r3
   bf01e:	4619      	mov	r1, r3
   bf020:	f7fd bfce 	b.w	bcfc0 <network_off>

000bf024 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bf024:	6840      	ldr	r0, [r0, #4]
   bf026:	2100      	movs	r1, #0
   bf028:	f7fd bff2 	b.w	bd010 <network_is_on>

000bf02c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bf02c:	6840      	ldr	r0, [r0, #4]
   bf02e:	2100      	movs	r1, #0
   bf030:	f7fd bff6 	b.w	bd020 <network_is_off>

000bf034 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bf034:	6840      	ldr	r0, [r0, #4]
   bf036:	2200      	movs	r2, #0
   bf038:	f081 0101 	eor.w	r1, r1, #1
   bf03c:	f7fd bfc8 	b.w	bcfd0 <network_listen>

000bf040 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bf040:	6840      	ldr	r0, [r0, #4]
   bf042:	2200      	movs	r2, #0
   bf044:	f7fd bfd4 	b.w	bcff0 <network_set_listen_timeout>

000bf048 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bf048:	2200      	movs	r2, #0
   bf04a:	6840      	ldr	r0, [r0, #4]
   bf04c:	4611      	mov	r1, r2
   bf04e:	f7fd bfd7 	b.w	bd000 <network_get_listen_timeout>

000bf052 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bf052:	2200      	movs	r2, #0
   bf054:	6840      	ldr	r0, [r0, #4]
   bf056:	4611      	mov	r1, r2
   bf058:	f7fd bfc2 	b.w	bcfe0 <network_listening>

000bf05c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bf05c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf060:	b095      	sub	sp, #84	; 0x54
   bf062:	4614      	mov	r4, r2
   bf064:	460d      	mov	r5, r1
   bf066:	4607      	mov	r7, r0
    IPAddress addr;
   bf068:	f7fe fe46 	bl	bdcf8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bf06c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bf06e:	221c      	movs	r2, #28
   bf070:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bf072:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bf074:	f001 ffd4 	bl	c1020 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bf078:	2340      	movs	r3, #64	; 0x40
   bf07a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bf07c:	4620      	mov	r0, r4
   bf07e:	466b      	mov	r3, sp
   bf080:	aa0c      	add	r2, sp, #48	; 0x30
   bf082:	2100      	movs	r1, #0
   bf084:	f7fd fd16 	bl	bcab4 <netdb_getaddrinfo>
    if (!r) {
   bf088:	4604      	mov	r4, r0
   bf08a:	2800      	cmp	r0, #0
   bf08c:	d14b      	bne.n	bf126 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bf08e:	4602      	mov	r2, r0
   bf090:	2101      	movs	r1, #1
   bf092:	6868      	ldr	r0, [r5, #4]
   bf094:	f7fd ff84 	bl	bcfa0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bf098:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bf09a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bf09c:	4622      	mov	r2, r4
   bf09e:	6868      	ldr	r0, [r5, #4]
   bf0a0:	f7fd ff7e 	bl	bcfa0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bf0a4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bf0a6:	4681      	mov	r9, r0
        bool ok = false;
   bf0a8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bf0aa:	2e00      	cmp	r6, #0
   bf0ac:	d03b      	beq.n	bf126 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bf0ae:	2900      	cmp	r1, #0
   bf0b0:	d139      	bne.n	bf126 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bf0b2:	6873      	ldr	r3, [r6, #4]
   bf0b4:	2b02      	cmp	r3, #2
   bf0b6:	d003      	beq.n	bf0c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bf0b8:	2b0a      	cmp	r3, #10
   bf0ba:	d011      	beq.n	bf0e0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bf0bc:	69f6      	ldr	r6, [r6, #28]
   bf0be:	e7f4      	b.n	bf0aa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bf0c0:	f1b8 0f00 	cmp.w	r8, #0
   bf0c4:	d0fa      	beq.n	bf0bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bf0c6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bf0c8:	a806      	add	r0, sp, #24
   bf0ca:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bf0cc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bf0ce:	f7fe fe41 	bl	bdd54 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bf0d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf0d4:	1d3c      	adds	r4, r7, #4
   bf0d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bf0d8:	682b      	ldr	r3, [r5, #0]
   bf0da:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bf0dc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bf0de:	e7ed      	b.n	bf0bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bf0e0:	f1b9 0f00 	cmp.w	r9, #0
   bf0e4:	d0ea      	beq.n	bf0bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bf0e6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bf0e8:	2210      	movs	r2, #16
   bf0ea:	a801      	add	r0, sp, #4
   bf0ec:	f001 ff98 	bl	c1020 <memset>
                    a.v = 6;
   bf0f0:	2306      	movs	r3, #6
   bf0f2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bf0f6:	ad01      	add	r5, sp, #4
   bf0f8:	f104 0308 	add.w	r3, r4, #8
   bf0fc:	3418      	adds	r4, #24
   bf0fe:	6818      	ldr	r0, [r3, #0]
   bf100:	6859      	ldr	r1, [r3, #4]
   bf102:	462a      	mov	r2, r5
   bf104:	c203      	stmia	r2!, {r0, r1}
   bf106:	3308      	adds	r3, #8
   bf108:	42a3      	cmp	r3, r4
   bf10a:	4615      	mov	r5, r2
   bf10c:	d1f7      	bne.n	bf0fe <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bf10e:	a901      	add	r1, sp, #4
   bf110:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bf112:	ad07      	add	r5, sp, #28
   bf114:	f7fe fdfe 	bl	bdd14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bf118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf11a:	1d3c      	adds	r4, r7, #4
   bf11c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bf11e:	682b      	ldr	r3, [r5, #0]
   bf120:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bf122:	4649      	mov	r1, r9
   bf124:	e7ca      	b.n	bf0bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bf126:	9800      	ldr	r0, [sp, #0]
   bf128:	f7fd fcbc 	bl	bcaa4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bf12c:	4638      	mov	r0, r7
   bf12e:	b015      	add	sp, #84	; 0x54
   bf130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bf134 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bf134:	4b02      	ldr	r3, [pc, #8]	; (bf140 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bf136:	4a03      	ldr	r2, [pc, #12]	; (bf144 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bf138:	601a      	str	r2, [r3, #0]
   bf13a:	2200      	movs	r2, #0
   bf13c:	605a      	str	r2, [r3, #4]

} // spark
   bf13e:	4770      	bx	lr
   bf140:	2003e684 	.word	0x2003e684
   bf144:	000c5070 	.word	0x000c5070

000bf148 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   bf148:	b508      	push	{r3, lr}
            return &Wire1;
   bf14a:	f001 f953 	bl	c03f4 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   bf14e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   bf152:	f7fe bd59 	b.w	bdc08 <_ZN7TwoWire4lockEv>

000bf156 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   bf156:	b510      	push	{r4, lr}
   bf158:	4604      	mov	r4, r0
    lock_(_lock)
   bf15a:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   bf15c:	b109      	cbz	r1, bf162 <_ZN4PMICC1Eb+0xc>
        lock();
   bf15e:	f7ff fff3 	bl	bf148 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   bf162:	4620      	mov	r0, r4
   bf164:	bd10      	pop	{r4, pc}

000bf166 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   bf166:	b508      	push	{r3, lr}
            return &Wire1;
   bf168:	f001 f944 	bl	c03f4 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   bf16c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   bf170:	f7fe bd53 	b.w	bdc1a <_ZN7TwoWire6unlockEv>

000bf174 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   bf174:	b510      	push	{r4, lr}
    if (lock_) {
   bf176:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   bf178:	4604      	mov	r4, r0
    if (lock_) {
   bf17a:	b10b      	cbz	r3, bf180 <_ZN4PMICD1Ev+0xc>
        unlock();
   bf17c:	f7ff fff3 	bl	bf166 <_ZN4PMIC6unlockEv>
}
   bf180:	4620      	mov	r0, r4
   bf182:	bd10      	pop	{r4, pc}

000bf184 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   bf184:	b510      	push	{r4, lr}
   bf186:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   bf188:	6800      	ldr	r0, [r0, #0]
   bf18a:	f7ff ffec 	bl	bf166 <_ZN4PMIC6unlockEv>
   bf18e:	4620      	mov	r0, r4
   bf190:	bd10      	pop	{r4, pc}

000bf192 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   bf192:	b530      	push	{r4, r5, lr}
   bf194:	b087      	sub	sp, #28
   bf196:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf198:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf19a:	f7ff ffd5 	bl	bf148 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf19e:	226b      	movs	r2, #107	; 0x6b
   bf1a0:	2300      	movs	r3, #0
   bf1a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bf1a6:	2401      	movs	r4, #1
   bf1a8:	230a      	movs	r3, #10
   bf1aa:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   bf1ae:	f001 f921 	bl	c03f4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bf1b2:	a902      	add	r1, sp, #8
   bf1b4:	f7fe fd0c 	bl	bdbd0 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bf1b8:	f001 f91c 	bl	c03f4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   bf1bc:	6803      	ldr	r3, [r0, #0]
   bf1be:	4629      	mov	r1, r5
   bf1c0:	689b      	ldr	r3, [r3, #8]
   bf1c2:	4798      	blx	r3
            return &Wire1;
   bf1c4:	f001 f916 	bl	c03f4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bf1c8:	4621      	mov	r1, r4
   bf1ca:	f7fe fd19 	bl	bdc00 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   bf1ce:	9403      	str	r4, [sp, #12]
            return &Wire1;
   bf1d0:	f001 f910 	bl	c03f4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bf1d4:	a902      	add	r1, sp, #8
   bf1d6:	f7fe fccb 	bl	bdb70 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bf1da:	f001 f90b 	bl	c03f4 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bf1de:	6803      	ldr	r3, [r0, #0]
   bf1e0:	695b      	ldr	r3, [r3, #20]
   bf1e2:	4798      	blx	r3
   bf1e4:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bf1e6:	a801      	add	r0, sp, #4
   bf1e8:	f7ff ffcc 	bl	bf184 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf1ec:	b2e0      	uxtb	r0, r4
   bf1ee:	b007      	add	sp, #28
   bf1f0:	bd30      	pop	{r4, r5, pc}

000bf1f2 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bf1f2:	b570      	push	{r4, r5, r6, lr}
   bf1f4:	b086      	sub	sp, #24
   bf1f6:	460d      	mov	r5, r1
   bf1f8:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf1fa:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf1fc:	f7ff ffa4 	bl	bf148 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf200:	226b      	movs	r2, #107	; 0x6b
   bf202:	2300      	movs	r3, #0
   bf204:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bf208:	2601      	movs	r6, #1
   bf20a:	230a      	movs	r3, #10
   bf20c:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bf210:	f001 f8f0 	bl	c03f4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bf214:	a902      	add	r1, sp, #8
   bf216:	f7fe fcdb 	bl	bdbd0 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bf21a:	f001 f8eb 	bl	c03f4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bf21e:	6803      	ldr	r3, [r0, #0]
   bf220:	4629      	mov	r1, r5
   bf222:	689b      	ldr	r3, [r3, #8]
   bf224:	4798      	blx	r3
            return &Wire1;
   bf226:	f001 f8e5 	bl	c03f4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   bf22a:	6803      	ldr	r3, [r0, #0]
   bf22c:	4621      	mov	r1, r4
   bf22e:	689b      	ldr	r3, [r3, #8]
   bf230:	4798      	blx	r3
            return &Wire1;
   bf232:	f001 f8df 	bl	c03f4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bf236:	4631      	mov	r1, r6
   bf238:	f7fe fce2 	bl	bdc00 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bf23c:	a801      	add	r0, sp, #4
   bf23e:	f7ff ffa1 	bl	bf184 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf242:	b006      	add	sp, #24
   bf244:	bd70      	pop	{r4, r5, r6, pc}

000bf246 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bf246:	b513      	push	{r0, r1, r4, lr}
   bf248:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf24a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf24c:	f7ff ff7c 	bl	bf148 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bf250:	2101      	movs	r1, #1
   bf252:	4620      	mov	r0, r4
   bf254:	f7ff ff9d 	bl	bf192 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bf258:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bf25c:	2b10      	cmp	r3, #16
   bf25e:	d007      	beq.n	bf270 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bf260:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bf264:	f042 0210 	orr.w	r2, r2, #16
   bf268:	2101      	movs	r1, #1
   bf26a:	4620      	mov	r0, r4
   bf26c:	f7ff ffc1 	bl	bf1f2 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bf270:	a801      	add	r0, sp, #4
   bf272:	f7ff ff87 	bl	bf184 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf276:	2001      	movs	r0, #1
   bf278:	b002      	add	sp, #8
   bf27a:	bd10      	pop	{r4, pc}

000bf27c <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bf27c:	b513      	push	{r0, r1, r4, lr}
   bf27e:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf280:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf282:	f7ff ff61 	bl	bf148 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bf286:	2101      	movs	r1, #1
   bf288:	4620      	mov	r0, r4
   bf28a:	f7ff ff82 	bl	bf192 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bf28e:	f010 0f30 	tst.w	r0, #48	; 0x30
   bf292:	d005      	beq.n	bf2a0 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bf294:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bf298:	2101      	movs	r1, #1
   bf29a:	4620      	mov	r0, r4
   bf29c:	f7ff ffa9 	bl	bf1f2 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bf2a0:	a801      	add	r0, sp, #4
   bf2a2:	f7ff ff6f 	bl	bf184 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf2a6:	2001      	movs	r0, #1
   bf2a8:	b002      	add	sp, #8
   bf2aa:	bd10      	pop	{r4, pc}

000bf2ac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bf2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf2ae:	4606      	mov	r6, r0
   bf2b0:	460d      	mov	r5, r1
  size_t n = 0;
   bf2b2:	188f      	adds	r7, r1, r2
   bf2b4:	2400      	movs	r4, #0
  while (size--) {
   bf2b6:	42bd      	cmp	r5, r7
   bf2b8:	d00c      	beq.n	bf2d4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bf2ba:	6833      	ldr	r3, [r6, #0]
   bf2bc:	f815 1b01 	ldrb.w	r1, [r5], #1
   bf2c0:	689b      	ldr	r3, [r3, #8]
   bf2c2:	4630      	mov	r0, r6
   bf2c4:	4798      	blx	r3
     if (chunk>=0)
   bf2c6:	1e03      	subs	r3, r0, #0
   bf2c8:	db01      	blt.n	bf2ce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bf2ca:	441c      	add	r4, r3
  while (size--) {
   bf2cc:	e7f3      	b.n	bf2b6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bf2ce:	2c00      	cmp	r4, #0
   bf2d0:	bf08      	it	eq
   bf2d2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bf2d4:	4620      	mov	r0, r4
   bf2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf2d8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bf2d8:	b513      	push	{r0, r1, r4, lr}
   bf2da:	4604      	mov	r4, r0
    }
   bf2dc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bf2de:	b159      	cbz	r1, bf2f8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bf2e0:	9101      	str	r1, [sp, #4]
   bf2e2:	f001 ff68 	bl	c11b6 <strlen>
   bf2e6:	6823      	ldr	r3, [r4, #0]
   bf2e8:	9901      	ldr	r1, [sp, #4]
   bf2ea:	68db      	ldr	r3, [r3, #12]
   bf2ec:	4602      	mov	r2, r0
   bf2ee:	4620      	mov	r0, r4
    }
   bf2f0:	b002      	add	sp, #8
   bf2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bf2f6:	4718      	bx	r3
    }
   bf2f8:	b002      	add	sp, #8
   bf2fa:	bd10      	pop	{r4, pc}

000bf2fc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bf2fc:	b508      	push	{r3, lr}
  return write(str);
   bf2fe:	f7ff ffeb 	bl	bf2d8 <_ZN5Print5writeEPKc>
}
   bf302:	bd08      	pop	{r3, pc}

000bf304 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bf304:	6803      	ldr	r3, [r0, #0]
   bf306:	689b      	ldr	r3, [r3, #8]
   bf308:	4718      	bx	r3

000bf30a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bf30a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bf30c:	210d      	movs	r1, #13
{
   bf30e:	4605      	mov	r5, r0
  size_t n = print('\r');
   bf310:	f7ff fff8 	bl	bf304 <_ZN5Print5printEc>
  n += print('\n');
   bf314:	210a      	movs	r1, #10
  size_t n = print('\r');
   bf316:	4604      	mov	r4, r0
  n += print('\n');
   bf318:	4628      	mov	r0, r5
   bf31a:	f7ff fff3 	bl	bf304 <_ZN5Print5printEc>
  return n;
}
   bf31e:	4420      	add	r0, r4
   bf320:	bd38      	pop	{r3, r4, r5, pc}

000bf322 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bf322:	b530      	push	{r4, r5, lr}
   bf324:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bf326:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bf328:	2a01      	cmp	r2, #1
  *str = '\0';
   bf32a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bf32e:	bf98      	it	ls
   bf330:	220a      	movls	r2, #10
   bf332:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bf334:	460d      	mov	r5, r1
   bf336:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bf33a:	fb01 5312 	mls	r3, r1, r2, r5
   bf33e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bf342:	2b09      	cmp	r3, #9
   bf344:	bf94      	ite	ls
   bf346:	3330      	addls	r3, #48	; 0x30
   bf348:	3337      	addhi	r3, #55	; 0x37
   bf34a:	b2db      	uxtb	r3, r3
  } while(n);
   bf34c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bf34e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bf352:	d9ef      	bls.n	bf334 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bf354:	4621      	mov	r1, r4
   bf356:	f7ff ffbf 	bl	bf2d8 <_ZN5Print5writeEPKc>
}
   bf35a:	b00b      	add	sp, #44	; 0x2c
   bf35c:	bd30      	pop	{r4, r5, pc}
	...

000bf360 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bf360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf364:	ec55 4b10 	vmov	r4, r5, d0
   bf368:	4606      	mov	r6, r0
   bf36a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bf36c:	ee10 2a10 	vmov	r2, s0
   bf370:	ee10 0a10 	vmov	r0, s0
   bf374:	462b      	mov	r3, r5
   bf376:	4629      	mov	r1, r5
   bf378:	f001 fd0c 	bl	c0d94 <__aeabi_dcmpun>
   bf37c:	b140      	cbz	r0, bf390 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bf37e:	4953      	ldr	r1, [pc, #332]	; (bf4cc <_ZN5Print10printFloatEdh+0x16c>)
   bf380:	4630      	mov	r0, r6
   bf382:	f7ff ffa9 	bl	bf2d8 <_ZN5Print5writeEPKc>
   bf386:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bf388:	4650      	mov	r0, sl
   bf38a:	b003      	add	sp, #12
   bf38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bf390:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bf394:	4b4e      	ldr	r3, [pc, #312]	; (bf4d0 <_ZN5Print10printFloatEdh+0x170>)
   bf396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf39a:	4620      	mov	r0, r4
   bf39c:	4649      	mov	r1, r9
   bf39e:	f001 fcf9 	bl	c0d94 <__aeabi_dcmpun>
   bf3a2:	b948      	cbnz	r0, bf3b8 <_ZN5Print10printFloatEdh+0x58>
   bf3a4:	4b4a      	ldr	r3, [pc, #296]	; (bf4d0 <_ZN5Print10printFloatEdh+0x170>)
   bf3a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf3aa:	4620      	mov	r0, r4
   bf3ac:	4649      	mov	r1, r9
   bf3ae:	f001 fcd3 	bl	c0d58 <__aeabi_dcmple>
   bf3b2:	b908      	cbnz	r0, bf3b8 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bf3b4:	4947      	ldr	r1, [pc, #284]	; (bf4d4 <_ZN5Print10printFloatEdh+0x174>)
   bf3b6:	e7e3      	b.n	bf380 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bf3b8:	4b47      	ldr	r3, [pc, #284]	; (bf4d8 <_ZN5Print10printFloatEdh+0x178>)
   bf3ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bf3be:	4620      	mov	r0, r4
   bf3c0:	4629      	mov	r1, r5
   bf3c2:	f001 fcdd 	bl	c0d80 <__aeabi_dcmpgt>
   bf3c6:	b108      	cbz	r0, bf3cc <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bf3c8:	4944      	ldr	r1, [pc, #272]	; (bf4dc <_ZN5Print10printFloatEdh+0x17c>)
   bf3ca:	e7d9      	b.n	bf380 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bf3cc:	4b44      	ldr	r3, [pc, #272]	; (bf4e0 <_ZN5Print10printFloatEdh+0x180>)
   bf3ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bf3d2:	4620      	mov	r0, r4
   bf3d4:	4629      	mov	r1, r5
   bf3d6:	f001 fcb5 	bl	c0d44 <__aeabi_dcmplt>
   bf3da:	2800      	cmp	r0, #0
   bf3dc:	d1f4      	bne.n	bf3c8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bf3de:	2200      	movs	r2, #0
   bf3e0:	2300      	movs	r3, #0
   bf3e2:	4620      	mov	r0, r4
   bf3e4:	4629      	mov	r1, r5
   bf3e6:	f001 fcad 	bl	c0d44 <__aeabi_dcmplt>
   bf3ea:	b1d0      	cbz	r0, bf422 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bf3ec:	212d      	movs	r1, #45	; 0x2d
   bf3ee:	4630      	mov	r0, r6
   bf3f0:	f7ff ff88 	bl	bf304 <_ZN5Print5printEc>
     number = -number;
   bf3f4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bf3f8:	4682      	mov	sl, r0
     number = -number;
   bf3fa:	461d      	mov	r5, r3
  double rounding = 0.5;
   bf3fc:	4939      	ldr	r1, [pc, #228]	; (bf4e4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bf3fe:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bf4ec <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bf402:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bf406:	2000      	movs	r0, #0
    rounding /= 10.0;
   bf408:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   bf40c:	fa5f f38b 	uxtb.w	r3, fp
   bf410:	429f      	cmp	r7, r3
   bf412:	d908      	bls.n	bf426 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bf414:	4642      	mov	r2, r8
   bf416:	464b      	mov	r3, r9
   bf418:	f001 fb4c 	bl	c0ab4 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bf41c:	f10b 0b01 	add.w	fp, fp, #1
   bf420:	e7f4      	b.n	bf40c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bf422:	4682      	mov	sl, r0
   bf424:	e7ea      	b.n	bf3fc <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bf426:	4622      	mov	r2, r4
   bf428:	462b      	mov	r3, r5
   bf42a:	f001 f863 	bl	c04f4 <__adddf3>
   bf42e:	460d      	mov	r5, r1
   bf430:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bf432:	f001 fced 	bl	c0e10 <__aeabi_d2uiz>
   bf436:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bf438:	f001 f998 	bl	c076c <__aeabi_ui2d>
   bf43c:	4602      	mov	r2, r0
   bf43e:	460b      	mov	r3, r1
   bf440:	4620      	mov	r0, r4
   bf442:	4629      	mov	r1, r5
   bf444:	f001 f854 	bl	c04f0 <__aeabi_dsub>
        return printNumber(val, base) + t;
   bf448:	220a      	movs	r2, #10
   bf44a:	4604      	mov	r4, r0
   bf44c:	460d      	mov	r5, r1
   bf44e:	4630      	mov	r0, r6
   bf450:	4641      	mov	r1, r8
   bf452:	f7ff ff66 	bl	bf322 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bf456:	4482      	add	sl, r0
  if (digits > 0) {
   bf458:	2f00      	cmp	r7, #0
   bf45a:	d095      	beq.n	bf388 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bf45c:	4922      	ldr	r1, [pc, #136]	; (bf4e8 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bf45e:	f8df 908c 	ldr.w	r9, [pc, #140]	; bf4ec <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bf462:	4630      	mov	r0, r6
   bf464:	f7ff ff38 	bl	bf2d8 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bf468:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bf46c:	4482      	add	sl, r0
  while (digits-- > 0)
   bf46e:	2f00      	cmp	r7, #0
   bf470:	d08a      	beq.n	bf388 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bf472:	4642      	mov	r2, r8
   bf474:	464b      	mov	r3, r9
   bf476:	4620      	mov	r0, r4
   bf478:	4629      	mov	r1, r5
   bf47a:	f001 f9f1 	bl	c0860 <__aeabi_dmul>
   bf47e:	4604      	mov	r4, r0
   bf480:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bf482:	f001 fc9d 	bl	c0dc0 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bf486:	f1b0 0b00 	subs.w	fp, r0, #0
   bf48a:	da1c      	bge.n	bf4c6 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bf48c:	212d      	movs	r1, #45	; 0x2d
   bf48e:	4630      	mov	r0, r6
   bf490:	f7ff ff38 	bl	bf304 <_ZN5Print5printEc>
            val = -n;
   bf494:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bf498:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bf49a:	220a      	movs	r2, #10
   bf49c:	4630      	mov	r0, r6
   bf49e:	9301      	str	r3, [sp, #4]
   bf4a0:	f7ff ff3f 	bl	bf322 <_ZN5Print11printNumberEmh>
   bf4a4:	9b01      	ldr	r3, [sp, #4]
   bf4a6:	4418      	add	r0, r3
    n += print(toPrint);
   bf4a8:	4482      	add	sl, r0
    remainder -= toPrint;
   bf4aa:	4658      	mov	r0, fp
   bf4ac:	f001 f96e 	bl	c078c <__aeabi_i2d>
   bf4b0:	4602      	mov	r2, r0
   bf4b2:	460b      	mov	r3, r1
   bf4b4:	4620      	mov	r0, r4
   bf4b6:	4629      	mov	r1, r5
   bf4b8:	f001 f81a 	bl	c04f0 <__aeabi_dsub>
   bf4bc:	3f01      	subs	r7, #1
   bf4be:	4604      	mov	r4, r0
   bf4c0:	460d      	mov	r5, r1
   bf4c2:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bf4c4:	e7d3      	b.n	bf46e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bf4c6:	4659      	mov	r1, fp
        size_t t = 0;
   bf4c8:	2300      	movs	r3, #0
   bf4ca:	e7e6      	b.n	bf49a <_ZN5Print10printFloatEdh+0x13a>
   bf4cc:	000c50a4 	.word	0x000c50a4
   bf4d0:	7fefffff 	.word	0x7fefffff
   bf4d4:	000c50a8 	.word	0x000c50a8
   bf4d8:	41efffff 	.word	0x41efffff
   bf4dc:	000c50ac 	.word	0x000c50ac
   bf4e0:	c1efffff 	.word	0xc1efffff
   bf4e4:	3fe00000 	.word	0x3fe00000
   bf4e8:	000c50e4 	.word	0x000c50e4
   bf4ec:	40240000 	.word	0x40240000

000bf4f0 <_ZN5Print5printEfi>:
{
   bf4f0:	b538      	push	{r3, r4, r5, lr}
   bf4f2:	4604      	mov	r4, r0
   bf4f4:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bf4f8:	b2cd      	uxtb	r5, r1
   bf4fa:	f001 f959 	bl	c07b0 <__aeabi_f2d>
   bf4fe:	ec41 0b10 	vmov	d0, r0, r1
   bf502:	4629      	mov	r1, r5
   bf504:	4620      	mov	r0, r4
}
   bf506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bf50a:	f7ff bf29 	b.w	bf360 <_ZN5Print10printFloatEdh>

000bf50e <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bf50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf512:	b086      	sub	sp, #24
   bf514:	af00      	add	r7, sp, #0
   bf516:	4605      	mov	r5, r0
   bf518:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bf51a:	1d38      	adds	r0, r7, #4
   bf51c:	2114      	movs	r1, #20
{
   bf51e:	4614      	mov	r4, r2
    va_copy(args2, args);
   bf520:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bf522:	f7fd fdb5 	bl	bd090 <vsnprintf>

    if (n<bufsize)
   bf526:	2813      	cmp	r0, #19
   bf528:	d80e      	bhi.n	bf548 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bf52a:	1d39      	adds	r1, r7, #4
   bf52c:	4628      	mov	r0, r5
   bf52e:	f7ff fed3 	bl	bf2d8 <_ZN5Print5writeEPKc>
   bf532:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bf534:	b11e      	cbz	r6, bf53e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bf536:	4628      	mov	r0, r5
   bf538:	f7ff fee7 	bl	bf30a <_ZN5Print7printlnEv>
   bf53c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bf53e:	4620      	mov	r0, r4
   bf540:	3718      	adds	r7, #24
   bf542:	46bd      	mov	sp, r7
   bf544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bf548:	f100 0308 	add.w	r3, r0, #8
   bf54c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bf550:	46e8      	mov	r8, sp
        char bigger[n+1];
   bf552:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bf556:	4622      	mov	r2, r4
   bf558:	1c41      	adds	r1, r0, #1
   bf55a:	683b      	ldr	r3, [r7, #0]
   bf55c:	4668      	mov	r0, sp
   bf55e:	f7fd fd97 	bl	bd090 <vsnprintf>
  return write(str);
   bf562:	4669      	mov	r1, sp
   bf564:	4628      	mov	r0, r5
   bf566:	f7ff feb7 	bl	bf2d8 <_ZN5Print5writeEPKc>
   bf56a:	4604      	mov	r4, r0
   bf56c:	46c5      	mov	sp, r8
   bf56e:	e7e1      	b.n	bf534 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bf570 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bf570:	b510      	push	{r4, lr}
  if (0 == max) {
   bf572:	4604      	mov	r4, r0
   bf574:	b128      	cbz	r0, bf582 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bf576:	f001 fd99 	bl	c10ac <rand>
   bf57a:	fb90 f3f4 	sdiv	r3, r0, r4
   bf57e:	fb03 0414 	mls	r4, r3, r4, r0
}
   bf582:	4620      	mov	r0, r4
   bf584:	bd10      	pop	{r4, pc}

000bf586 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bf586:	4288      	cmp	r0, r1
{
   bf588:	b510      	push	{r4, lr}
   bf58a:	4604      	mov	r4, r0
  if (min >= max) {
   bf58c:	da03      	bge.n	bf596 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bf58e:	1a08      	subs	r0, r1, r0
   bf590:	f7ff ffee 	bl	bf570 <_Z6randomi>
   bf594:	4404      	add	r4, r0
}
   bf596:	4620      	mov	r0, r4
   bf598:	bd10      	pop	{r4, pc}
	...

000bf59c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bf59c:	4b01      	ldr	r3, [pc, #4]	; (bf5a4 <_GLOBAL__sub_I_RGB+0x8>)
   bf59e:	2200      	movs	r2, #0
   bf5a0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bf5a2:	4770      	bx	lr
   bf5a4:	2003e68c 	.word	0x2003e68c

000bf5a8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bf5a8:	2100      	movs	r1, #0
   bf5aa:	f7fd bacb 	b.w	bcb44 <hal_spi_release>

000bf5ae <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bf5ae:	2100      	movs	r1, #0
   bf5b0:	f7fd bac0 	b.w	bcb34 <hal_spi_acquire>

000bf5b4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bf5b4:	b510      	push	{r4, lr}
   bf5b6:	4604      	mov	r4, r0
   bf5b8:	4608      	mov	r0, r1
{
    _spi = spi;
   bf5ba:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bf5bc:	f7fd fa9a 	bl	bcaf4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bf5c0:	2300      	movs	r3, #0
   bf5c2:	6063      	str	r3, [r4, #4]
}
   bf5c4:	4620      	mov	r0, r4
   bf5c6:	bd10      	pop	{r4, pc}

000bf5c8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bf5c8:	b513      	push	{r0, r1, r4, lr}
   bf5ca:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bf5cc:	7800      	ldrb	r0, [r0, #0]
   bf5ce:	f7ff ffee 	bl	bf5ae <_ZN8SPIClass4lockEv.isra.0>
   bf5d2:	b958      	cbnz	r0, bf5ec <_ZN8SPIClass5beginEv+0x24>
   bf5d4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bf5d6:	9001      	str	r0, [sp, #4]
   bf5d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bf5dc:	f7fd fa72 	bl	bcac4 <hal_spi_begin>
        unlock();
   bf5e0:	9801      	ldr	r0, [sp, #4]
    }
}
   bf5e2:	b002      	add	sp, #8
   bf5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bf5e8:	f7ff bfde 	b.w	bf5a8 <_ZN8SPIClass6unlockEv.isra.0>
   bf5ec:	b002      	add	sp, #8
   bf5ee:	bd10      	pop	{r4, pc}

000bf5f0 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bf5f0:	b513      	push	{r0, r1, r4, lr}
   bf5f2:	4604      	mov	r4, r0
    if (!lock())
   bf5f4:	7800      	ldrb	r0, [r0, #0]
   bf5f6:	f7ff ffda 	bl	bf5ae <_ZN8SPIClass4lockEv.isra.0>
   bf5fa:	b948      	cbnz	r0, bf610 <_ZN8SPIClass3endEv+0x20>
   bf5fc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bf5fe:	9001      	str	r0, [sp, #4]
   bf600:	f7fd fa68 	bl	bcad4 <hal_spi_end>
        unlock();
   bf604:	9801      	ldr	r0, [sp, #4]
    }
}
   bf606:	b002      	add	sp, #8
   bf608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bf60c:	f7ff bfcc 	b.w	bf5a8 <_ZN8SPIClass6unlockEv.isra.0>
   bf610:	b002      	add	sp, #8
   bf612:	bd10      	pop	{r4, pc}

000bf614 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bf614:	7800      	ldrb	r0, [r0, #0]
   bf616:	f7ff bfc7 	b.w	bf5a8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bf61c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bf61c:	0840      	lsrs	r0, r0, #1
{
   bf61e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bf620:	6018      	str	r0, [r3, #0]
   bf622:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bf624:	6818      	ldr	r0, [r3, #0]
   bf626:	4288      	cmp	r0, r1
   bf628:	b2e5      	uxtb	r5, r4
   bf62a:	d906      	bls.n	bf63a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bf62c:	3401      	adds	r4, #1
   bf62e:	2c08      	cmp	r4, #8
   bf630:	d002      	beq.n	bf638 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bf632:	0840      	lsrs	r0, r0, #1
   bf634:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bf636:	e7f5      	b.n	bf624 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bf638:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bf63a:	4b02      	ldr	r3, [pc, #8]	; (bf644 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bf63c:	5d5b      	ldrb	r3, [r3, r5]
   bf63e:	7013      	strb	r3, [r2, #0]
}
   bf640:	bd30      	pop	{r4, r5, pc}
   bf642:	bf00      	nop
   bf644:	000c50b0 	.word	0x000c50b0

000bf648 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bf648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf64c:	4606      	mov	r6, r0
   bf64e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bf650:	7800      	ldrb	r0, [r0, #0]
{
   bf652:	460c      	mov	r4, r1
    CHECK(lock());
   bf654:	f7ff ffab 	bl	bf5ae <_ZN8SPIClass4lockEv.isra.0>
   bf658:	2800      	cmp	r0, #0
   bf65a:	db1b      	blt.n	bf694 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bf65c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bf65e:	2214      	movs	r2, #20
   bf660:	2100      	movs	r1, #0
   bf662:	a809      	add	r0, sp, #36	; 0x24
   bf664:	f001 fcdc 	bl	c1020 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bf668:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bf66a:	2200      	movs	r2, #0
   bf66c:	a909      	add	r1, sp, #36	; 0x24
   bf66e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bf670:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bf674:	f7fd fa4e 	bl	bcb14 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bf678:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bf67c:	b113      	cbz	r3, bf684 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bf67e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bf682:	b155      	cbz	r5, bf69a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bf684:	2700      	movs	r7, #0
   bf686:	46b9      	mov	r9, r7
   bf688:	46b8      	mov	r8, r7
   bf68a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bf68c:	7923      	ldrb	r3, [r4, #4]
   bf68e:	b15d      	cbz	r5, bf6a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bf690:	b1c3      	cbz	r3, bf6c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bf692:	2000      	movs	r0, #0
}
   bf694:	b00f      	add	sp, #60	; 0x3c
   bf696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bf69a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bf69e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bf6a2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bf6a6:	e7f1      	b.n	bf68c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bf6a8:	2b00      	cmp	r3, #0
   bf6aa:	d135      	bne.n	bf718 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bf6ac:	68a3      	ldr	r3, [r4, #8]
   bf6ae:	4543      	cmp	r3, r8
   bf6b0:	d108      	bne.n	bf6c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bf6b2:	f88d 9020 	strb.w	r9, [sp, #32]
   bf6b6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bf6ba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bf6be:	89a3      	ldrh	r3, [r4, #12]
   bf6c0:	429a      	cmp	r2, r3
   bf6c2:	d0e6      	beq.n	bf692 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bf6c4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bf6c6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bf6c8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bf6cc:	980a      	ldr	r0, [sp, #40]	; 0x28
   bf6ce:	ab04      	add	r3, sp, #16
   bf6d0:	f10d 020f 	add.w	r2, sp, #15
   bf6d4:	f7ff ffa2 	bl	bf61c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bf6d8:	7921      	ldrb	r1, [r4, #4]
   bf6da:	b985      	cbnz	r5, bf6fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bf6dc:	b989      	cbnz	r1, bf702 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bf6de:	68a3      	ldr	r3, [r4, #8]
   bf6e0:	4543      	cmp	r3, r8
   bf6e2:	d30e      	bcc.n	bf702 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bf6e4:	f88d 9020 	strb.w	r9, [sp, #32]
   bf6e8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bf6ec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bf6f0:	89a3      	ldrh	r3, [r4, #12]
   bf6f2:	429a      	cmp	r2, r3
   bf6f4:	d105      	bne.n	bf702 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bf6f6:	9b04      	ldr	r3, [sp, #16]
   bf6f8:	4543      	cmp	r3, r8
   bf6fa:	d102      	bne.n	bf702 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bf6fc:	e7c9      	b.n	bf692 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bf6fe:	2900      	cmp	r1, #0
   bf700:	d1f9      	bne.n	bf6f6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bf702:	2300      	movs	r3, #0
   bf704:	9301      	str	r3, [sp, #4]
   bf706:	7b63      	ldrb	r3, [r4, #13]
   bf708:	9300      	str	r3, [sp, #0]
   bf70a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bf70e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bf710:	7830      	ldrb	r0, [r6, #0]
   bf712:	f7fd fa07 	bl	bcb24 <hal_spi_set_settings>
   bf716:	e7bc      	b.n	bf692 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bf718:	e9cd 5500 	strd	r5, r5, [sp]
   bf71c:	462b      	mov	r3, r5
   bf71e:	462a      	mov	r2, r5
   bf720:	2101      	movs	r1, #1
   bf722:	e7f5      	b.n	bf710 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bf724 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bf724:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bf726:	7800      	ldrb	r0, [r0, #0]
   bf728:	f7fd f9dc 	bl	bcae4 <hal_spi_transfer>
}
   bf72c:	b2c0      	uxtb	r0, r0
   bf72e:	bd08      	pop	{r3, pc}

000bf730 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bf730:	4770      	bx	lr

000bf732 <_ZN8SPIClass15detachInterruptEv>:
   bf732:	4770      	bx	lr

000bf734 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bf734:	b510      	push	{r4, lr}
   bf736:	4604      	mov	r4, r0
{
	free(buffer);
   bf738:	6800      	ldr	r0, [r0, #0]
   bf73a:	f7fd fc81 	bl	bd040 <free>
}
   bf73e:	4620      	mov	r0, r4
   bf740:	bd10      	pop	{r4, pc}

000bf742 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bf742:	b510      	push	{r4, lr}
   bf744:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bf746:	6800      	ldr	r0, [r0, #0]
   bf748:	b108      	cbz	r0, bf74e <_ZN6String10invalidateEv+0xc>
   bf74a:	f7fd fc79 	bl	bd040 <free>
	buffer = NULL;
   bf74e:	2300      	movs	r3, #0
	capacity = len = 0;
   bf750:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bf754:	6023      	str	r3, [r4, #0]
}
   bf756:	bd10      	pop	{r4, pc}

000bf758 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bf758:	b538      	push	{r3, r4, r5, lr}
   bf75a:	4604      	mov	r4, r0
   bf75c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bf75e:	6800      	ldr	r0, [r0, #0]
   bf760:	3101      	adds	r1, #1
   bf762:	f7fd fc75 	bl	bd050 <realloc>
	if (newbuffer) {
   bf766:	b110      	cbz	r0, bf76e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bf768:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bf76c:	2001      	movs	r0, #1
	}
	return 0;
}
   bf76e:	bd38      	pop	{r3, r4, r5, pc}

000bf770 <_ZN6String7reserveEj>:
{
   bf770:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bf772:	6803      	ldr	r3, [r0, #0]
{
   bf774:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bf776:	b123      	cbz	r3, bf782 <_ZN6String7reserveEj+0x12>
   bf778:	6843      	ldr	r3, [r0, #4]
   bf77a:	428b      	cmp	r3, r1
   bf77c:	d301      	bcc.n	bf782 <_ZN6String7reserveEj+0x12>
   bf77e:	2001      	movs	r0, #1
}
   bf780:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bf782:	4620      	mov	r0, r4
   bf784:	f7ff ffe8 	bl	bf758 <_ZN6String12changeBufferEj>
   bf788:	2800      	cmp	r0, #0
   bf78a:	d0f9      	beq.n	bf780 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bf78c:	68a3      	ldr	r3, [r4, #8]
   bf78e:	2b00      	cmp	r3, #0
   bf790:	d1f5      	bne.n	bf77e <_ZN6String7reserveEj+0xe>
   bf792:	6822      	ldr	r2, [r4, #0]
   bf794:	7013      	strb	r3, [r2, #0]
   bf796:	e7f2      	b.n	bf77e <_ZN6String7reserveEj+0xe>

000bf798 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bf798:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf79a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bf79c:	4611      	mov	r1, r2
   bf79e:	9201      	str	r2, [sp, #4]
{
   bf7a0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bf7a2:	f7ff ffe5 	bl	bf770 <_ZN6String7reserveEj>
   bf7a6:	9a01      	ldr	r2, [sp, #4]
   bf7a8:	b928      	cbnz	r0, bf7b6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bf7aa:	4620      	mov	r0, r4
   bf7ac:	f7ff ffc9 	bl	bf742 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bf7b0:	4620      	mov	r0, r4
   bf7b2:	b003      	add	sp, #12
   bf7b4:	bd30      	pop	{r4, r5, pc}
	len = length;
   bf7b6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bf7b8:	4629      	mov	r1, r5
   bf7ba:	6820      	ldr	r0, [r4, #0]
   bf7bc:	f001 fc08 	bl	c0fd0 <memcpy>
	buffer[len] = 0;
   bf7c0:	6822      	ldr	r2, [r4, #0]
   bf7c2:	68a3      	ldr	r3, [r4, #8]
   bf7c4:	2100      	movs	r1, #0
   bf7c6:	54d1      	strb	r1, [r2, r3]
	return *this;
   bf7c8:	e7f2      	b.n	bf7b0 <_ZN6String4copyEPKcj+0x18>

000bf7ca <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bf7ca:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bf7cc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bf7ce:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bf7d2:	4604      	mov	r4, r0
	len = 0;
   bf7d4:	6083      	str	r3, [r0, #8]
	flags = 0;
   bf7d6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bf7d8:	b141      	cbz	r1, bf7ec <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bf7da:	4608      	mov	r0, r1
   bf7dc:	9101      	str	r1, [sp, #4]
   bf7de:	f001 fcea 	bl	c11b6 <strlen>
   bf7e2:	9901      	ldr	r1, [sp, #4]
   bf7e4:	4602      	mov	r2, r0
   bf7e6:	4620      	mov	r0, r4
   bf7e8:	f7ff ffd6 	bl	bf798 <_ZN6String4copyEPKcj>
}
   bf7ec:	4620      	mov	r0, r4
   bf7ee:	b002      	add	sp, #8
   bf7f0:	bd10      	pop	{r4, pc}

000bf7f2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bf7f2:	b538      	push	{r3, r4, r5, lr}
   bf7f4:	4605      	mov	r5, r0
	if (buffer) {
   bf7f6:	6800      	ldr	r0, [r0, #0]
{
   bf7f8:	460c      	mov	r4, r1
	if (buffer) {
   bf7fa:	b168      	cbz	r0, bf818 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bf7fc:	686a      	ldr	r2, [r5, #4]
   bf7fe:	688b      	ldr	r3, [r1, #8]
   bf800:	429a      	cmp	r2, r3
   bf802:	d307      	bcc.n	bf814 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bf804:	6809      	ldr	r1, [r1, #0]
   bf806:	f001 fcb0 	bl	c116a <strcpy>
			len = rhs.len;
   bf80a:	68a3      	ldr	r3, [r4, #8]
   bf80c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bf80e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bf810:	60a3      	str	r3, [r4, #8]
}
   bf812:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bf814:	f7fd fc14 	bl	bd040 <free>
	buffer = rhs.buffer;
   bf818:	6823      	ldr	r3, [r4, #0]
   bf81a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bf81c:	6863      	ldr	r3, [r4, #4]
   bf81e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bf820:	68a3      	ldr	r3, [r4, #8]
   bf822:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bf824:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bf826:	e9c4 3300 	strd	r3, r3, [r4]
   bf82a:	e7f1      	b.n	bf810 <_ZN6String4moveERS_+0x1e>

000bf82c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bf82c:	b510      	push	{r4, lr}
	buffer = NULL;
   bf82e:	2300      	movs	r3, #0
	capacity = 0;
   bf830:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bf834:	4604      	mov	r4, r0
	len = 0;
   bf836:	6083      	str	r3, [r0, #8]
	flags = 0;
   bf838:	7303      	strb	r3, [r0, #12]
	move(rval);
   bf83a:	f7ff ffda 	bl	bf7f2 <_ZN6String4moveERS_>
}
   bf83e:	4620      	mov	r0, r4
   bf840:	bd10      	pop	{r4, pc}

000bf842 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bf842:	4288      	cmp	r0, r1
{
   bf844:	b510      	push	{r4, lr}
   bf846:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bf848:	d005      	beq.n	bf856 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bf84a:	680b      	ldr	r3, [r1, #0]
   bf84c:	b12b      	cbz	r3, bf85a <_ZN6StringaSERKS_+0x18>
   bf84e:	688a      	ldr	r2, [r1, #8]
   bf850:	4619      	mov	r1, r3
   bf852:	f7ff ffa1 	bl	bf798 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bf856:	4620      	mov	r0, r4
   bf858:	bd10      	pop	{r4, pc}
	else invalidate();
   bf85a:	f7ff ff72 	bl	bf742 <_ZN6String10invalidateEv>
   bf85e:	e7fa      	b.n	bf856 <_ZN6StringaSERKS_+0x14>

000bf860 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bf860:	b510      	push	{r4, lr}
	buffer = NULL;
   bf862:	2300      	movs	r3, #0
String::String(const String &value)
   bf864:	4604      	mov	r4, r0
	capacity = 0;
   bf866:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bf86a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bf86c:	7303      	strb	r3, [r0, #12]
	*this = value;
   bf86e:	f7ff ffe8 	bl	bf842 <_ZN6StringaSERKS_>
}
   bf872:	4620      	mov	r0, r4
   bf874:	bd10      	pop	{r4, pc}

000bf876 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bf876:	4288      	cmp	r0, r1
{
   bf878:	b510      	push	{r4, lr}
   bf87a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bf87c:	d001      	beq.n	bf882 <_ZN6StringaSEOS_+0xc>
   bf87e:	f7ff ffb8 	bl	bf7f2 <_ZN6String4moveERS_>
	return *this;
}
   bf882:	4620      	mov	r0, r4
   bf884:	bd10      	pop	{r4, pc}

000bf886 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bf886:	b513      	push	{r0, r1, r4, lr}
   bf888:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bf88a:	b159      	cbz	r1, bf8a4 <_ZN6StringaSEPKc+0x1e>
   bf88c:	4608      	mov	r0, r1
   bf88e:	9101      	str	r1, [sp, #4]
   bf890:	f001 fc91 	bl	c11b6 <strlen>
   bf894:	9901      	ldr	r1, [sp, #4]
   bf896:	4602      	mov	r2, r0
   bf898:	4620      	mov	r0, r4
   bf89a:	f7ff ff7d 	bl	bf798 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bf89e:	4620      	mov	r0, r4
   bf8a0:	b002      	add	sp, #8
   bf8a2:	bd10      	pop	{r4, pc}
	else invalidate();
   bf8a4:	f7ff ff4d 	bl	bf742 <_ZN6String10invalidateEv>
   bf8a8:	e7f9      	b.n	bf89e <_ZN6StringaSEPKc+0x18>

000bf8aa <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bf8aa:	b570      	push	{r4, r5, r6, lr}
   bf8ac:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bf8ae:	460e      	mov	r6, r1
   bf8b0:	b909      	cbnz	r1, bf8b6 <_ZN6String6concatEPKcj+0xc>
   bf8b2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bf8b4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bf8b6:	b16a      	cbz	r2, bf8d4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bf8b8:	6884      	ldr	r4, [r0, #8]
   bf8ba:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bf8bc:	4621      	mov	r1, r4
   bf8be:	f7ff ff57 	bl	bf770 <_ZN6String7reserveEj>
   bf8c2:	2800      	cmp	r0, #0
   bf8c4:	d0f5      	beq.n	bf8b2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bf8c6:	6828      	ldr	r0, [r5, #0]
   bf8c8:	68ab      	ldr	r3, [r5, #8]
   bf8ca:	4631      	mov	r1, r6
   bf8cc:	4418      	add	r0, r3
   bf8ce:	f001 fc4c 	bl	c116a <strcpy>
	len = newlen;
   bf8d2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bf8d4:	2001      	movs	r0, #1
   bf8d6:	e7ed      	b.n	bf8b4 <_ZN6String6concatEPKcj+0xa>

000bf8d8 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   bf8d8:	b513      	push	{r0, r1, r4, lr}
   bf8da:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   bf8dc:	4608      	mov	r0, r1
	if (!cstr) return 0;
   bf8de:	b151      	cbz	r1, bf8f6 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   bf8e0:	9101      	str	r1, [sp, #4]
   bf8e2:	f001 fc68 	bl	c11b6 <strlen>
   bf8e6:	9901      	ldr	r1, [sp, #4]
   bf8e8:	4602      	mov	r2, r0
   bf8ea:	4620      	mov	r0, r4
}
   bf8ec:	b002      	add	sp, #8
   bf8ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   bf8f2:	f7ff bfda 	b.w	bf8aa <_ZN6String6concatEPKcj>
}
   bf8f6:	b002      	add	sp, #8
   bf8f8:	bd10      	pop	{r4, pc}

000bf8fa <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bf8fa:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bf8fc:	2300      	movs	r3, #0
	buf[0] = c;
   bf8fe:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bf902:	2201      	movs	r2, #1
   bf904:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bf906:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bf90a:	f7ff ffce 	bl	bf8aa <_ZN6String6concatEPKcj>
}
   bf90e:	b003      	add	sp, #12
   bf910:	f85d fb04 	ldr.w	pc, [sp], #4

000bf914 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bf914:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bf916:	688a      	ldr	r2, [r1, #8]
   bf918:	6809      	ldr	r1, [r1, #0]
{
   bf91a:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bf91c:	f7ff ffc5 	bl	bf8aa <_ZN6String6concatEPKcj>
   bf920:	b910      	cbnz	r0, bf928 <_ZplRK15StringSumHelperRK6String+0x14>
   bf922:	4620      	mov	r0, r4
   bf924:	f7ff ff0d 	bl	bf742 <_ZN6String10invalidateEv>
	return a;
}
   bf928:	4620      	mov	r0, r4
   bf92a:	bd10      	pop	{r4, pc}

000bf92c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   bf92c:	b513      	push	{r0, r1, r4, lr}
   bf92e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bf930:	b929      	cbnz	r1, bf93e <_ZplRK15StringSumHelperPKc+0x12>
   bf932:	4620      	mov	r0, r4
   bf934:	f7ff ff05 	bl	bf742 <_ZN6String10invalidateEv>
	return a;
}
   bf938:	4620      	mov	r0, r4
   bf93a:	b002      	add	sp, #8
   bf93c:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bf93e:	4608      	mov	r0, r1
   bf940:	9101      	str	r1, [sp, #4]
   bf942:	f001 fc38 	bl	c11b6 <strlen>
   bf946:	9901      	ldr	r1, [sp, #4]
   bf948:	4602      	mov	r2, r0
   bf94a:	4620      	mov	r0, r4
   bf94c:	f7ff ffad 	bl	bf8aa <_ZN6String6concatEPKcj>
   bf950:	2800      	cmp	r0, #0
   bf952:	d0ee      	beq.n	bf932 <_ZplRK15StringSumHelperPKc+0x6>
   bf954:	e7f0      	b.n	bf938 <_ZplRK15StringSumHelperPKc+0xc>

000bf956 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bf956:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bf958:	6882      	ldr	r2, [r0, #8]
   bf95a:	b93a      	cbnz	r2, bf96c <_ZNK6String6equalsEPKc+0x16>
   bf95c:	b121      	cbz	r1, bf968 <_ZNK6String6equalsEPKc+0x12>
   bf95e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bf960:	fab0 f080 	clz	r0, r0
   bf964:	0940      	lsrs	r0, r0, #5
   bf966:	e000      	b.n	bf96a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bf968:	2001      	movs	r0, #1
}
   bf96a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bf96c:	6800      	ldr	r0, [r0, #0]
   bf96e:	b909      	cbnz	r1, bf974 <_ZNK6String6equalsEPKc+0x1e>
   bf970:	7800      	ldrb	r0, [r0, #0]
   bf972:	e7f5      	b.n	bf960 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bf974:	f001 fbef 	bl	c1156 <strcmp>
   bf978:	e7f2      	b.n	bf960 <_ZNK6String6equalsEPKc+0xa>

000bf97a <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   bf97a:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bf97c:	6883      	ldr	r3, [r0, #8]
   bf97e:	688a      	ldr	r2, [r1, #8]
   bf980:	4293      	cmp	r3, r2
   bf982:	d30b      	bcc.n	bf99c <_ZNK6String8endsWithERKS_+0x22>
   bf984:	6800      	ldr	r0, [r0, #0]
   bf986:	b140      	cbz	r0, bf99a <_ZNK6String8endsWithERKS_+0x20>
   bf988:	6809      	ldr	r1, [r1, #0]
   bf98a:	b149      	cbz	r1, bf9a0 <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bf98c:	1a9b      	subs	r3, r3, r2
   bf98e:	4418      	add	r0, r3
   bf990:	f001 fbe1 	bl	c1156 <strcmp>
   bf994:	fab0 f080 	clz	r0, r0
   bf998:	0940      	lsrs	r0, r0, #5
}
   bf99a:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bf99c:	2000      	movs	r0, #0
   bf99e:	e7fc      	b.n	bf99a <_ZNK6String8endsWithERKS_+0x20>
   bf9a0:	4608      	mov	r0, r1
   bf9a2:	e7fa      	b.n	bf99a <_ZNK6String8endsWithERKS_+0x20>

000bf9a4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bf9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bf9a6:	429a      	cmp	r2, r3
{
   bf9a8:	460f      	mov	r7, r1
   bf9aa:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bf9ac:	490c      	ldr	r1, [pc, #48]	; (bf9e0 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bf9ae:	bf88      	it	hi
   bf9b0:	4613      	movhi	r3, r2
{
   bf9b2:	4614      	mov	r4, r2
   bf9b4:	4606      	mov	r6, r0
	if (left > right) {
   bf9b6:	bf84      	itt	hi
   bf9b8:	462c      	movhi	r4, r5
   bf9ba:	461d      	movhi	r5, r3
	String out;
   bf9bc:	f7ff ff05 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bf9c0:	68bb      	ldr	r3, [r7, #8]
   bf9c2:	42a3      	cmp	r3, r4
   bf9c4:	d30a      	bcc.n	bf9dc <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bf9c6:	6839      	ldr	r1, [r7, #0]
   bf9c8:	42ab      	cmp	r3, r5
   bf9ca:	bf94      	ite	ls
   bf9cc:	ebc4 0203 	rsbls	r2, r4, r3
   bf9d0:	ebc4 0205 	rsbhi	r2, r4, r5
   bf9d4:	4421      	add	r1, r4
   bf9d6:	4630      	mov	r0, r6
   bf9d8:	f7ff fede 	bl	bf798 <_ZN6String4copyEPKcj>
	return out;
}
   bf9dc:	4630      	mov	r0, r6
   bf9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bf9e0:	000c4fe0 	.word	0x000c4fe0

000bf9e4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bf9e4:	b40e      	push	{r1, r2, r3}
   bf9e6:	b570      	push	{r4, r5, r6, lr}
   bf9e8:	b087      	sub	sp, #28
   bf9ea:	ad0b      	add	r5, sp, #44	; 0x2c
   bf9ec:	4604      	mov	r4, r0
   bf9ee:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bf9f2:	9201      	str	r2, [sp, #4]
   bf9f4:	462b      	mov	r3, r5
   bf9f6:	2105      	movs	r1, #5
   bf9f8:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bf9fa:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bf9fc:	f7fd fb48 	bl	bd090 <vsnprintf>
    va_end(marker);

    String result;
   bfa00:	490b      	ldr	r1, [pc, #44]	; (bfa30 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bfa02:	4606      	mov	r6, r0
    String result;
   bfa04:	4620      	mov	r0, r4
   bfa06:	f7ff fee0 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bfa0a:	4631      	mov	r1, r6
   bfa0c:	4620      	mov	r0, r4
   bfa0e:	f7ff feaf 	bl	bf770 <_ZN6String7reserveEj>
    if (result.buffer) {
   bfa12:	6820      	ldr	r0, [r4, #0]
   bfa14:	b130      	cbz	r0, bfa24 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bfa16:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bfa18:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bfa1a:	462b      	mov	r3, r5
   bfa1c:	1c71      	adds	r1, r6, #1
   bfa1e:	f7fd fb37 	bl	bd090 <vsnprintf>
        va_end(marker);
        result.len = n;
   bfa22:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bfa24:	4620      	mov	r0, r4
   bfa26:	b007      	add	sp, #28
   bfa28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bfa2c:	b003      	add	sp, #12
   bfa2e:	4770      	bx	lr
   bfa30:	000c4fe0 	.word	0x000c4fe0

000bfa34 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bfa34:	b510      	push	{r4, lr}
   bfa36:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bfa38:	6800      	ldr	r0, [r0, #0]
   bfa3a:	b118      	cbz	r0, bfa44 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bfa3c:	f7fd fb00 	bl	bd040 <free>
            wakeupSource_ = nullptr;
   bfa40:	2300      	movs	r3, #0
   bfa42:	6023      	str	r3, [r4, #0]
        }
    }
   bfa44:	bd10      	pop	{r4, pc}

000bfa46 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bfa46:	b538      	push	{r3, r4, r5, lr}
   bfa48:	460c      	mov	r4, r1
   bfa4a:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bfa4c:	f7ff fff2 	bl	bfa34 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bfa50:	b154      	cbz	r4, bfa68 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bfa52:	8820      	ldrh	r0, [r4, #0]
   bfa54:	f7fd faec 	bl	bd030 <malloc>
   bfa58:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bfa5a:	b128      	cbz	r0, bfa68 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bfa5c:	8822      	ldrh	r2, [r4, #0]
   bfa5e:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bfa60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bfa64:	f001 bab4 	b.w	c0fd0 <memcpy>
    }
   bfa68:	bd38      	pop	{r3, r4, r5, pc}

000bfa6a <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bfa6a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bfa6c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bfa70:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bfa72:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bfa76:	f8c0 3006 	str.w	r3, [r0, #6]
   bfa7a:	894b      	ldrh	r3, [r1, #10]
   bfa7c:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bfa7e:	460c      	mov	r4, r1
   bfa80:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bfa82:	f7ff ffd7 	bl	bfa34 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bfa86:	6823      	ldr	r3, [r4, #0]
   bfa88:	b113      	cbz	r3, bfa90 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bfa8a:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bfa8c:	2300      	movs	r3, #0
   bfa8e:	6023      	str	r3, [r4, #0]
    }
   bfa90:	bd38      	pop	{r3, r4, r5, pc}

000bfa92 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bfa92:	b507      	push	{r0, r1, r2, lr}
   bfa94:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bfa96:	2100      	movs	r1, #0
{
   bfa98:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bfa9a:	9100      	str	r1, [sp, #0]
   bfa9c:	2001      	movs	r0, #1
   bfa9e:	218c      	movs	r1, #140	; 0x8c
   bfaa0:	f7fd fa04 	bl	bceac <system_reset>
}
   bfaa4:	b003      	add	sp, #12
   bfaa6:	f85d fb04 	ldr.w	pc, [sp], #4

000bfaaa <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bfaaa:	4601      	mov	r1, r0
    reset(0, flags);
   bfaac:	2000      	movs	r0, #0
   bfaae:	f7ff bff0 	b.w	bfa92 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bfab2 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bfab2:	2000      	movs	r0, #0
   bfab4:	f7ff bff9 	b.w	bfaaa <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bfab8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bfab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bfaba:	4d2b      	ldr	r5, [pc, #172]	; (bfb68 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bfabc:	7d0b      	ldrb	r3, [r1, #20]
   bfabe:	4604      	mov	r4, r0
   bfac0:	b08b      	sub	sp, #44	; 0x2c
   bfac2:	4608      	mov	r0, r1
   bfac4:	1daf      	adds	r7, r5, #6
   bfac6:	2b00      	cmp	r3, #0
   bfac8:	d036      	beq.n	bfb38 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bfaca:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bfacc:	791b      	ldrb	r3, [r3, #4]
   bface:	2b00      	cmp	r3, #0
   bfad0:	d032      	beq.n	bfb38 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bfad2:	4b26      	ldr	r3, [pc, #152]	; (bfb6c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bfad4:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bfad6:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bfad8:	a902      	add	r1, sp, #8
   bfada:	3004      	adds	r0, #4
   bfadc:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bfae0:	f7fd f9da 	bl	bce98 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bfae4:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bfae8:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bfaec:	b200      	sxth	r0, r0
   bfaee:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bfaf2:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bfaf6:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bfaf8:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bfafa:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bfafc:	4628      	mov	r0, r5
   bfafe:	f7ff ffa2 	bl	bfa46 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bfb02:	a802      	add	r0, sp, #8
   bfb04:	f7ff ff96 	bl	bfa34 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bfb08:	2300      	movs	r3, #0
   bfb0a:	6023      	str	r3, [r4, #0]
   bfb0c:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bfb0e:	71a3      	strb	r3, [r4, #6]
   bfb10:	8123      	strh	r3, [r4, #8]
   bfb12:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bfb16:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bfb18:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bfb1c:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bfb1e:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bfb22:	f8c4 3006 	str.w	r3, [r4, #6]
   bfb26:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bfb28:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bfb2a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bfb2c:	4620      	mov	r0, r4
   bfb2e:	f7ff ff8a 	bl	bfa46 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bfb32:	4620      	mov	r0, r4
   bfb34:	b00b      	add	sp, #44	; 0x2c
   bfb36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bfb38:	2600      	movs	r6, #0
   bfb3a:	2320      	movs	r3, #32
   bfb3c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bfb40:	4b0b      	ldr	r3, [pc, #44]	; (bfb70 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bfb42:	9300      	str	r3, [sp, #0]
   bfb44:	aa02      	add	r2, sp, #8
   bfb46:	4633      	mov	r3, r6
   bfb48:	490a      	ldr	r1, [pc, #40]	; (bfb74 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bfb4a:	2032      	movs	r0, #50	; 0x32
   bfb4c:	f7fd f902 	bl	bcd54 <log_message>
            : wakeupSource_(nullptr),
   bfb50:	4b06      	ldr	r3, [pc, #24]	; (bfb6c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bfb52:	4805      	ldr	r0, [pc, #20]	; (bfb68 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bfb54:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bfb56:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bfb5a:	a902      	add	r1, sp, #8
   bfb5c:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bfb60:	f7ff ff83 	bl	bfa6a <_ZN17SystemSleepResultaSEOS_.isra.0>
   bfb64:	e7cd      	b.n	bfb02 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bfb66:	bf00      	nop
   bfb68:	2003e69c 	.word	0x2003e69c
   bfb6c:	ffff0000 	.word	0xffff0000
   bfb70:	000c50bf 	.word	0x000c50bf
   bfb74:	000c50b8 	.word	0x000c50b8

000bfb78 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bfb78:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bfb7a:	2420      	movs	r4, #32
{
   bfb7c:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bfb7e:	4622      	mov	r2, r4
   bfb80:	2100      	movs	r1, #0
   bfb82:	4668      	mov	r0, sp
   bfb84:	f001 fa4c 	bl	c1020 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bfb88:	2100      	movs	r1, #0
   bfb8a:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bfb8c:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bfb90:	f7fc fe88 	bl	bc8a4 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bfb94:	9801      	ldr	r0, [sp, #4]
   bfb96:	b008      	add	sp, #32
   bfb98:	bd10      	pop	{r4, pc}
	...

000bfb9c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bfb9c:	4b05      	ldr	r3, [pc, #20]	; (bfbb4 <_GLOBAL__sub_I_System+0x18>)
   bfb9e:	2202      	movs	r2, #2
   bfba0:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bfba2:	4b05      	ldr	r3, [pc, #20]	; (bfbb8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bfba4:	4a05      	ldr	r2, [pc, #20]	; (bfbbc <_GLOBAL__sub_I_System+0x20>)
   bfba6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bfba8:	2000      	movs	r0, #0
   bfbaa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bfbae:	f7fd b90d 	b.w	bcdcc <set_system_mode>
   bfbb2:	bf00      	nop
   bfbb4:	2003e6a8 	.word	0x2003e6a8
   bfbb8:	2003e69c 	.word	0x2003e69c
   bfbbc:	ffff0000 	.word	0xffff0000

000bfbc0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bfbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bfbc4:	4a15      	ldr	r2, [pc, #84]	; (bfc1c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bfbc6:	f8df 8060 	ldr.w	r8, [pc, #96]	; bfc28 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bfbca:	e9d2 6300 	ldrd	r6, r3, [r2]
   bfbce:	1980      	adds	r0, r0, r6
   bfbd0:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bfbd4:	4b12      	ldr	r3, [pc, #72]	; (bfc20 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bfbd6:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bfbda:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bfbde:	1986      	adds	r6, r0, r6
   bfbe0:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bfbe4:	42bb      	cmp	r3, r7
   bfbe6:	bf08      	it	eq
   bfbe8:	42b2      	cmpeq	r2, r6
{
   bfbea:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bfbec:	d013      	beq.n	bfc16 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bfbee:	a903      	add	r1, sp, #12
   bfbf0:	4668      	mov	r0, sp
   bfbf2:	e9cd 6700 	strd	r6, r7, [sp]
   bfbf6:	f7fd fa83 	bl	bd100 <localtime_r>
	calendar_time.tm_year += 1900;
   bfbfa:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bfbfc:	4d09      	ldr	r5, [pc, #36]	; (bfc24 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bfbfe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bfc02:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bfc04:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bfc06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bfc08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bfc0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bfc0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bfc0e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bfc12:	6823      	ldr	r3, [r4, #0]
   bfc14:	602b      	str	r3, [r5, #0]
    }
}
   bfc16:	b00c      	add	sp, #48	; 0x30
   bfc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bfc1c:	2003e6e0 	.word	0x2003e6e0
   bfc20:	2003e6d8 	.word	0x2003e6d8
   bfc24:	2003e6b4 	.word	0x2003e6b4
   bfc28:	2003e6e8 	.word	0x2003e6e8

000bfc2c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bfc2c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bfc2e:	2000      	movs	r0, #0
   bfc30:	f7fd f97e 	bl	bcf30 <spark_sync_time_pending>
   bfc34:	b128      	cbz	r0, bfc42 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bfc36:	f7fd f95b 	bl	bcef0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bfc3a:	f080 0001 	eor.w	r0, r0, #1
   bfc3e:	b2c0      	uxtb	r0, r0
    }
   bfc40:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bfc42:	2001      	movs	r0, #1
   bfc44:	e7fc      	b.n	bfc40 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bfc48 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   bfc48:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bfc4a:	f7ff ffb9 	bl	bfbc0 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   bfc4e:	4b01      	ldr	r3, [pc, #4]	; (bfc54 <_ZN9TimeClass4hourEx+0xc>)
   bfc50:	6898      	ldr	r0, [r3, #8]
   bfc52:	bd08      	pop	{r3, pc}
   bfc54:	2003e6b4 	.word	0x2003e6b4

000bfc58 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   bfc58:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bfc5a:	f7ff ffb1 	bl	bfbc0 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   bfc5e:	4b01      	ldr	r3, [pc, #4]	; (bfc64 <_ZN9TimeClass3dayEx+0xc>)
   bfc60:	68d8      	ldr	r0, [r3, #12]
   bfc62:	bd08      	pop	{r3, pc}
   bfc64:	2003e6b4 	.word	0x2003e6b4

000bfc68 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bfc68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bfc6a:	4602      	mov	r2, r0
   bfc6c:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bfc6e:	4668      	mov	r0, sp
    struct timeval tv = {
   bfc70:	2100      	movs	r1, #0
    };
   bfc72:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bfc76:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bfc7a:	f7fc fe5b 	bl	bc934 <hal_rtc_set_time>
   bfc7e:	4602      	mov	r2, r0
   bfc80:	b910      	cbnz	r0, bfc88 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bfc82:	4601      	mov	r1, r0
   bfc84:	f7fd f8da 	bl	bce3c <system_notify_time_changed>
    }
}
   bfc88:	b005      	add	sp, #20
   bfc8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bfc90 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bfc90:	b530      	push	{r4, r5, lr}
   bfc92:	b093      	sub	sp, #76	; 0x4c
   bfc94:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bfc98:	4b19      	ldr	r3, [pc, #100]	; (bfd00 <_ZN9TimeClass7timeStrEx+0x70>)
{
   bfc9a:	4604      	mov	r4, r0
    t += time_zone_cache;
   bfc9c:	e9d3 1000 	ldrd	r1, r0, [r3]
   bfca0:	9b01      	ldr	r3, [sp, #4]
   bfca2:	1852      	adds	r2, r2, r1
   bfca4:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bfca8:	4816      	ldr	r0, [pc, #88]	; (bfd04 <_ZN9TimeClass7timeStrEx+0x74>)
   bfcaa:	e9d0 1000 	ldrd	r1, r0, [r0]
   bfcae:	1852      	adds	r2, r2, r1
   bfcb0:	eb43 0300 	adc.w	r3, r3, r0
   bfcb4:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bfcb8:	2224      	movs	r2, #36	; 0x24
   bfcba:	eb0d 0002 	add.w	r0, sp, r2
   bfcbe:	2100      	movs	r1, #0
   bfcc0:	f001 f9ae 	bl	c1020 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bfcc4:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bfcc6:	a909      	add	r1, sp, #36	; 0x24
   bfcc8:	4668      	mov	r0, sp
   bfcca:	f7fd fa19 	bl	bd100 <localtime_r>
    char ascstr[26] = {};
   bfcce:	2216      	movs	r2, #22
   bfcd0:	4629      	mov	r1, r5
   bfcd2:	a803      	add	r0, sp, #12
   bfcd4:	9502      	str	r5, [sp, #8]
   bfcd6:	f001 f9a3 	bl	c1020 <memset>
    asctime_r(&calendar_time, ascstr);
   bfcda:	a902      	add	r1, sp, #8
   bfcdc:	a809      	add	r0, sp, #36	; 0x24
   bfcde:	f001 f925 	bl	c0f2c <asctime_r>
    int len = strlen(ascstr);
   bfce2:	a802      	add	r0, sp, #8
   bfce4:	f001 fa67 	bl	c11b6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   bfce8:	ab12      	add	r3, sp, #72	; 0x48
   bfcea:	4418      	add	r0, r3
    return String(ascstr);
   bfcec:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bfcee:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bfcf2:	4620      	mov	r0, r4
   bfcf4:	f7ff fd69 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
}
   bfcf8:	4620      	mov	r0, r4
   bfcfa:	b013      	add	sp, #76	; 0x4c
   bfcfc:	bd30      	pop	{r4, r5, pc}
   bfcfe:	bf00      	nop
   bfd00:	2003e6e0 	.word	0x2003e6e0
   bfd04:	2003e6d8 	.word	0x2003e6d8

000bfd08 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bfd08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bfd0c:	b0a4      	sub	sp, #144	; 0x90
   bfd0e:	4607      	mov	r7, r0
   bfd10:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bfd12:	a814      	add	r0, sp, #80	; 0x50
{
   bfd14:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bfd16:	223f      	movs	r2, #63	; 0x3f
{
   bfd18:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bfd1a:	f001 fa68 	bl	c11ee <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bfd1e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bfd20:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bfd22:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bfd26:	f001 fa46 	bl	c11b6 <strlen>
   bfd2a:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bfd2c:	bb4c      	cbnz	r4, bfd82 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bfd2e:	4929      	ldr	r1, [pc, #164]	; (bfdd4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bfd30:	a803      	add	r0, sp, #12
   bfd32:	f001 fa1a 	bl	c116a <strcpy>
   bfd36:	ac14      	add	r4, sp, #80	; 0x50
{
   bfd38:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bfd3a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bfd3e:	45b1      	cmp	r9, r6
   bfd40:	d934      	bls.n	bfdac <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bfd42:	7823      	ldrb	r3, [r4, #0]
   bfd44:	2b25      	cmp	r3, #37	; 0x25
   bfd46:	f106 0a01 	add.w	sl, r6, #1
   bfd4a:	d117      	bne.n	bfd7c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bfd4c:	7863      	ldrb	r3, [r4, #1]
   bfd4e:	2b7a      	cmp	r3, #122	; 0x7a
   bfd50:	d114      	bne.n	bfd7c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bfd52:	a803      	add	r0, sp, #12
   bfd54:	f001 fa2f 	bl	c11b6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bfd58:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bfd5a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bfd5c:	1830      	adds	r0, r6, r0
   bfd5e:	4418      	add	r0, r3
   bfd60:	eba9 0206 	sub.w	r2, r9, r6
   bfd64:	1ca1      	adds	r1, r4, #2
   bfd66:	f001 f933 	bl	c0fd0 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bfd6a:	462a      	mov	r2, r5
   bfd6c:	a903      	add	r1, sp, #12
   bfd6e:	4620      	mov	r0, r4
   bfd70:	f001 f92e 	bl	c0fd0 <memcpy>
            len = strlen(format_str);
   bfd74:	a814      	add	r0, sp, #80	; 0x50
   bfd76:	f001 fa1e 	bl	c11b6 <strlen>
   bfd7a:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bfd7c:	3401      	adds	r4, #1
   bfd7e:	4656      	mov	r6, sl
   bfd80:	e7db      	b.n	bfd3a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bfd82:	233c      	movs	r3, #60	; 0x3c
   bfd84:	fb94 f2f3 	sdiv	r2, r4, r3
   bfd88:	2a00      	cmp	r2, #0
   bfd8a:	bfb8      	it	lt
   bfd8c:	4252      	neglt	r2, r2
   bfd8e:	fbb2 f1f3 	udiv	r1, r2, r3
   bfd92:	fb03 2211 	mls	r2, r3, r1, r2
   bfd96:	9200      	str	r2, [sp, #0]
   bfd98:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bfd9c:	4a0e      	ldr	r2, [pc, #56]	; (bfdd8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bfd9e:	fb94 f3f3 	sdiv	r3, r4, r3
   bfda2:	2110      	movs	r1, #16
   bfda4:	a803      	add	r0, sp, #12
   bfda6:	f7fd f96b 	bl	bd080 <snprintf>
   bfdaa:	e7c4      	b.n	bfd36 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bfdac:	2100      	movs	r1, #0
   bfdae:	222e      	movs	r2, #46	; 0x2e
   bfdb0:	a808      	add	r0, sp, #32
   bfdb2:	9107      	str	r1, [sp, #28]
   bfdb4:	f001 f934 	bl	c1020 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bfdb8:	4643      	mov	r3, r8
   bfdba:	aa14      	add	r2, sp, #80	; 0x50
   bfdbc:	2132      	movs	r1, #50	; 0x32
   bfdbe:	a807      	add	r0, sp, #28
   bfdc0:	f7fd f996 	bl	bd0f0 <strftime>
    return String(buf);
   bfdc4:	a907      	add	r1, sp, #28
   bfdc6:	4638      	mov	r0, r7
   bfdc8:	f7ff fcff 	bl	bf7ca <_ZN6StringC1EPK19__FlashStringHelper>
}
   bfdcc:	4638      	mov	r0, r7
   bfdce:	b024      	add	sp, #144	; 0x90
   bfdd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bfdd4:	000c475f 	.word	0x000c475f
   bfdd8:	000c4761 	.word	0x000c4761

000bfddc <_ZN9TimeClass6formatExPKc>:
{
   bfddc:	b5f0      	push	{r4, r5, r6, r7, lr}
   bfdde:	b08d      	sub	sp, #52	; 0x34
   bfde0:	e9cd 2300 	strd	r2, r3, [sp]
   bfde4:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bfde6:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bfde8:	b915      	cbnz	r5, bfdf0 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bfdea:	4b19      	ldr	r3, [pc, #100]	; (bfe50 <_ZN9TimeClass6formatExPKc+0x74>)
   bfdec:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bfdee:	b12d      	cbz	r5, bfdfc <_ZN9TimeClass6formatExPKc+0x20>
   bfdf0:	4b18      	ldr	r3, [pc, #96]	; (bfe54 <_ZN9TimeClass6formatExPKc+0x78>)
   bfdf2:	4628      	mov	r0, r5
   bfdf4:	6819      	ldr	r1, [r3, #0]
   bfdf6:	f001 f9ae 	bl	c1156 <strcmp>
   bfdfa:	b938      	cbnz	r0, bfe0c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bfdfc:	e9dd 2300 	ldrd	r2, r3, [sp]
   bfe00:	4620      	mov	r0, r4
   bfe02:	f7ff ff45 	bl	bfc90 <_ZN9TimeClass7timeStrEx>
}
   bfe06:	4620      	mov	r0, r4
   bfe08:	b00d      	add	sp, #52	; 0x34
   bfe0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bfe0c:	4e12      	ldr	r6, [pc, #72]	; (bfe58 <_ZN9TimeClass6formatExPKc+0x7c>)
   bfe0e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bfe10:	4f12      	ldr	r7, [pc, #72]	; (bfe5c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bfe12:	e9d6 3200 	ldrd	r3, r2, [r6]
   bfe16:	185b      	adds	r3, r3, r1
   bfe18:	9901      	ldr	r1, [sp, #4]
   bfe1a:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bfe1e:	e9d7 0100 	ldrd	r0, r1, [r7]
   bfe22:	181b      	adds	r3, r3, r0
   bfe24:	eb42 0201 	adc.w	r2, r2, r1
   bfe28:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bfe2c:	2100      	movs	r1, #0
   bfe2e:	2224      	movs	r2, #36	; 0x24
   bfe30:	a803      	add	r0, sp, #12
   bfe32:	f001 f8f5 	bl	c1020 <memset>
    localtime_r(&t, &calendar_time);
   bfe36:	a903      	add	r1, sp, #12
   bfe38:	4668      	mov	r0, sp
   bfe3a:	f7fd f961 	bl	bd100 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bfe3e:	6832      	ldr	r2, [r6, #0]
   bfe40:	683b      	ldr	r3, [r7, #0]
   bfe42:	a903      	add	r1, sp, #12
   bfe44:	4413      	add	r3, r2
   bfe46:	4620      	mov	r0, r4
   bfe48:	462a      	mov	r2, r5
   bfe4a:	f7ff ff5d 	bl	bfd08 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bfe4e:	e7da      	b.n	bfe06 <_ZN9TimeClass6formatExPKc+0x2a>
   bfe50:	2003e6b0 	.word	0x2003e6b0
   bfe54:	2003d698 	.word	0x2003d698
   bfe58:	2003e6e0 	.word	0x2003e6e0
   bfe5c:	2003e6d8 	.word	0x2003e6d8

000bfe60 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bfe60:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bfe62:	2000      	movs	r0, #0
   bfe64:	f7fc fd4e 	bl	bc904 <hal_rtc_time_is_valid>
    if (rtcstate)
   bfe68:	4604      	mov	r4, r0
   bfe6a:	b9a0      	cbnz	r0, bfe96 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bfe6c:	f7fc ffa6 	bl	bcdbc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bfe70:	2801      	cmp	r0, #1
   bfe72:	d110      	bne.n	bfe96 <_ZN9TimeClass7isValidEv+0x36>
   bfe74:	4620      	mov	r0, r4
   bfe76:	f7fc ffd9 	bl	bce2c <system_thread_get_state>
   bfe7a:	b960      	cbnz	r0, bfe96 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bfe7c:	f7ff fed6 	bl	bfc2c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bfe80:	b910      	cbnz	r0, bfe88 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bfe82:	f7fd f825 	bl	bced0 <spark_process>
        while (_while() && !_condition()) {
   bfe86:	e7f9      	b.n	bfe7c <_ZN9TimeClass7isValidEv+0x1c>
   bfe88:	f7ff fed0 	bl	bfc2c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bfe8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bfe90:	2000      	movs	r0, #0
   bfe92:	f7fc bd37 	b.w	bc904 <hal_rtc_time_is_valid>
}
   bfe96:	4620      	mov	r0, r4
   bfe98:	bd10      	pop	{r4, pc}

000bfe9a <_ZN9TimeClass3nowEv>:
{
   bfe9a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bfe9c:	f7ff ffe0 	bl	bfe60 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bfea0:	2210      	movs	r2, #16
   bfea2:	2100      	movs	r1, #0
   bfea4:	4668      	mov	r0, sp
   bfea6:	f001 f8bb 	bl	c1020 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bfeaa:	2100      	movs	r1, #0
   bfeac:	4668      	mov	r0, sp
   bfeae:	f7fc fd39 	bl	bc924 <hal_rtc_get_time>
}
   bfeb2:	9800      	ldr	r0, [sp, #0]
   bfeb4:	b005      	add	sp, #20
   bfeb6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bfebc <_ZN9TimeClass4hourEv>:
{
   bfebc:	b508      	push	{r3, lr}
	return hour(now());
   bfebe:	f7ff ffec 	bl	bfe9a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bfec2:	17c1      	asrs	r1, r0, #31
   bfec4:	f7ff fe7c 	bl	bfbc0 <_ZL22Refresh_UnixTime_Cachex>
}
   bfec8:	4b01      	ldr	r3, [pc, #4]	; (bfed0 <_ZN9TimeClass4hourEv+0x14>)
   bfeca:	6898      	ldr	r0, [r3, #8]
   bfecc:	bd08      	pop	{r3, pc}
   bfece:	bf00      	nop
   bfed0:	2003e6b4 	.word	0x2003e6b4

000bfed4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bfed4:	4b02      	ldr	r3, [pc, #8]	; (bfee0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bfed6:	681a      	ldr	r2, [r3, #0]
   bfed8:	4b02      	ldr	r3, [pc, #8]	; (bfee4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bfeda:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bfedc:	4770      	bx	lr
   bfede:	bf00      	nop
   bfee0:	2003d698 	.word	0x2003d698
   bfee4:	2003e6b0 	.word	0x2003e6b0

000bfee8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bfee8:	4770      	bx	lr

000bfeea <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bfeea:	7441      	strb	r1, [r0, #17]
}
   bfeec:	4770      	bx	lr

000bfeee <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bfeee:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bfef0:	7c00      	ldrb	r0, [r0, #16]
   bfef2:	f7fc fec7 	bl	bcc84 <hal_usart_available_data_for_write>
}
   bfef6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bfefa:	bd08      	pop	{r3, pc}

000bfefc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bfefc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bfefe:	7c00      	ldrb	r0, [r0, #16]
   bff00:	f7fc fe98 	bl	bcc34 <hal_usart_available>
}
   bff04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bff08:	bd08      	pop	{r3, pc}

000bff0a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bff0a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bff0c:	7c00      	ldrb	r0, [r0, #16]
   bff0e:	f7fc fea1 	bl	bcc54 <hal_usart_peek>
}
   bff12:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bff16:	bd08      	pop	{r3, pc}

000bff18 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bff18:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bff1a:	7c00      	ldrb	r0, [r0, #16]
   bff1c:	f7fc fe92 	bl	bcc44 <hal_usart_read>
}
   bff20:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bff24:	bd08      	pop	{r3, pc}

000bff26 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bff26:	7c00      	ldrb	r0, [r0, #16]
   bff28:	f7fc be9c 	b.w	bcc64 <hal_usart_flush>

000bff2c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bff2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bff2e:	7c45      	ldrb	r5, [r0, #17]
{
   bff30:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bff32:	b12d      	cbz	r5, bff40 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bff34:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bff36:	b003      	add	sp, #12
   bff38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bff3c:	f7fc be72 	b.w	bcc24 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bff40:	7c00      	ldrb	r0, [r0, #16]
   bff42:	9101      	str	r1, [sp, #4]
   bff44:	f7fc fe9e 	bl	bcc84 <hal_usart_available_data_for_write>
   bff48:	2800      	cmp	r0, #0
   bff4a:	9901      	ldr	r1, [sp, #4]
   bff4c:	dcf2      	bgt.n	bff34 <_ZN11USARTSerial5writeEh+0x8>
}
   bff4e:	4628      	mov	r0, r5
   bff50:	b003      	add	sp, #12
   bff52:	bd30      	pop	{r4, r5, pc}

000bff54 <_ZN11USARTSerialD0Ev>:
   bff54:	b510      	push	{r4, lr}
   bff56:	2114      	movs	r1, #20
   bff58:	4604      	mov	r4, r0
   bff5a:	f7f4 f8a0 	bl	b409e <_ZdlPvj>
   bff5e:	4620      	mov	r0, r4
   bff60:	bd10      	pop	{r4, pc}
	...

000bff64 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bff64:	b510      	push	{r4, lr}
   bff66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bff6a:	4604      	mov	r4, r0
   bff6c:	4608      	mov	r0, r1
   bff6e:	4611      	mov	r1, r2
   bff70:	2200      	movs	r2, #0
   bff72:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bff76:	4b04      	ldr	r3, [pc, #16]	; (bff88 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bff78:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bff7a:	2301      	movs	r3, #1
  _serial = serial;
   bff7c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bff7e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bff80:	f7fc fe90 	bl	bcca4 <hal_usart_init_ex>
}
   bff84:	4620      	mov	r0, r4
   bff86:	bd10      	pop	{r4, pc}
   bff88:	000c510c 	.word	0x000c510c

000bff8c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bff8c:	7c00      	ldrb	r0, [r0, #16]
   bff8e:	2300      	movs	r3, #0
   bff90:	f7fc be80 	b.w	bcc94 <hal_usart_begin_config>

000bff94 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bff94:	2200      	movs	r2, #0
   bff96:	f7ff bff9 	b.w	bff8c <_ZN11USARTSerial5beginEmm>

000bff9a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bff9a:	7c00      	ldrb	r0, [r0, #16]
   bff9c:	f7fc be3a 	b.w	bcc14 <hal_usart_end>

000bffa0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bffa0:	7441      	strb	r1, [r0, #17]
}
   bffa2:	4770      	bx	lr

000bffa4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bffa4:	4770      	bx	lr

000bffa6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bffa6:	4770      	bx	lr

000bffa8 <_ZN9USBSerial4readEv>:
{
   bffa8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bffaa:	2100      	movs	r1, #0
   bffac:	7c00      	ldrb	r0, [r0, #16]
   bffae:	f7fc fea9 	bl	bcd04 <HAL_USB_USART_Receive_Data>
}
   bffb2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bffb6:	bd08      	pop	{r3, pc}

000bffb8 <_ZN9USBSerial4peekEv>:
{
   bffb8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bffba:	2101      	movs	r1, #1
   bffbc:	7c00      	ldrb	r0, [r0, #16]
   bffbe:	f7fc fea1 	bl	bcd04 <HAL_USB_USART_Receive_Data>
}
   bffc2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bffc6:	bd08      	pop	{r3, pc}

000bffc8 <_ZN9USBSerial17availableForWriteEv>:
{
   bffc8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bffca:	7c00      	ldrb	r0, [r0, #16]
   bffcc:	f7fc fe92 	bl	bccf4 <HAL_USB_USART_Available_Data_For_Write>
}
   bffd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bffd4:	bd08      	pop	{r3, pc}

000bffd6 <_ZN9USBSerial9availableEv>:
{
   bffd6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bffd8:	7c00      	ldrb	r0, [r0, #16]
   bffda:	f7fc fe83 	bl	bcce4 <HAL_USB_USART_Available_Data>
}
   bffde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bffe2:	bd08      	pop	{r3, pc}

000bffe4 <_ZN9USBSerial5writeEh>:
{
   bffe4:	b513      	push	{r0, r1, r4, lr}
   bffe6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bffe8:	7c00      	ldrb	r0, [r0, #16]
{
   bffea:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bffec:	f7fc fe82 	bl	bccf4 <HAL_USB_USART_Available_Data_For_Write>
   bfff0:	2800      	cmp	r0, #0
   bfff2:	9901      	ldr	r1, [sp, #4]
   bfff4:	dc01      	bgt.n	bfffa <_ZN9USBSerial5writeEh+0x16>
   bfff6:	7c60      	ldrb	r0, [r4, #17]
   bfff8:	b120      	cbz	r0, c0004 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bfffa:	7c20      	ldrb	r0, [r4, #16]
   bfffc:	f7fc fe8a 	bl	bcd14 <HAL_USB_USART_Send_Data>
   c0000:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c0004:	b002      	add	sp, #8
   c0006:	bd10      	pop	{r4, pc}

000c0008 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c0008:	7c00      	ldrb	r0, [r0, #16]
   c000a:	f7fc be8b 	b.w	bcd24 <HAL_USB_USART_Flush_Data>

000c000e <_ZN9USBSerialD0Ev>:
   c000e:	b510      	push	{r4, lr}
   c0010:	2114      	movs	r1, #20
   c0012:	4604      	mov	r4, r0
   c0014:	f7f4 f843 	bl	b409e <_ZdlPvj>
   c0018:	4620      	mov	r0, r4
   c001a:	bd10      	pop	{r4, pc}

000c001c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c001c:	b510      	push	{r4, lr}
   c001e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c0022:	4604      	mov	r4, r0
   c0024:	4608      	mov	r0, r1
   c0026:	2100      	movs	r1, #0
   c0028:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c002c:	4b04      	ldr	r3, [pc, #16]	; (c0040 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c002e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c0030:	2301      	movs	r3, #1
  _serial = serial;
   c0032:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c0034:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c0036:	4611      	mov	r1, r2
   c0038:	f7fc fe3c 	bl	bccb4 <HAL_USB_USART_Init>
}
   c003c:	4620      	mov	r0, r4
   c003e:	bd10      	pop	{r4, pc}
   c0040:	000c513c 	.word	0x000c513c

000c0044 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c0044:	7c00      	ldrb	r0, [r0, #16]
   c0046:	2200      	movs	r2, #0
   c0048:	f7fc be3c 	b.w	bccc4 <HAL_USB_USART_Begin>

000c004c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c004c:	7c00      	ldrb	r0, [r0, #16]
   c004e:	f7fc be41 	b.w	bccd4 <HAL_USB_USART_End>

000c0052 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   c0052:	7c00      	ldrb	r0, [r0, #16]
   c0054:	f7fc be6e 	b.w	bcd34 <HAL_USB_USART_Is_Connected>

000c0058 <_Z19acquireSerialBufferv>:
{
   c0058:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c005a:	2214      	movs	r2, #20
{
   c005c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c005e:	2100      	movs	r1, #0
   c0060:	f000 ffde 	bl	c1020 <memset>
}
   c0064:	4620      	mov	r0, r4
   c0066:	bd10      	pop	{r4, pc}

000c0068 <_Z16_fetch_usbserialv>:
{
   c0068:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c006a:	4c0f      	ldr	r4, [pc, #60]	; (c00a8 <_Z16_fetch_usbserialv+0x40>)
{
   c006c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c006e:	a803      	add	r0, sp, #12
   c0070:	f7ff fff2 	bl	c0058 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c0074:	7821      	ldrb	r1, [r4, #0]
   c0076:	f3bf 8f5b 	dmb	ish
   c007a:	f011 0101 	ands.w	r1, r1, #1
   c007e:	d10f      	bne.n	c00a0 <_Z16_fetch_usbserialv+0x38>
   c0080:	4620      	mov	r0, r4
   c0082:	9101      	str	r1, [sp, #4]
   c0084:	f7f4 f81a 	bl	b40bc <__cxa_guard_acquire>
   c0088:	9901      	ldr	r1, [sp, #4]
   c008a:	b148      	cbz	r0, c00a0 <_Z16_fetch_usbserialv+0x38>
   c008c:	aa03      	add	r2, sp, #12
   c008e:	4807      	ldr	r0, [pc, #28]	; (c00ac <_Z16_fetch_usbserialv+0x44>)
   c0090:	f7ff ffc4 	bl	c001c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c0094:	4620      	mov	r0, r4
   c0096:	f7f4 f816 	bl	b40c6 <__cxa_guard_release>
   c009a:	4805      	ldr	r0, [pc, #20]	; (c00b0 <_Z16_fetch_usbserialv+0x48>)
   c009c:	f000 ff6c 	bl	c0f78 <atexit>
	return _usbserial;
}
   c00a0:	4802      	ldr	r0, [pc, #8]	; (c00ac <_Z16_fetch_usbserialv+0x44>)
   c00a2:	b008      	add	sp, #32
   c00a4:	bd10      	pop	{r4, pc}
   c00a6:	bf00      	nop
   c00a8:	2003e6f0 	.word	0x2003e6f0
   c00ac:	2003e6f4 	.word	0x2003e6f4
   c00b0:	000bffa5 	.word	0x000bffa5

000c00b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c00b4:	4b01      	ldr	r3, [pc, #4]	; (c00bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c00b6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c00b8:	4770      	bx	lr
   c00ba:	bf00      	nop
   c00bc:	2003d69c 	.word	0x2003d69c

000c00c0 <serialEventRun>:
{
   c00c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c00c2:	4b0b      	ldr	r3, [pc, #44]	; (c00f0 <serialEventRun+0x30>)
   c00c4:	b143      	cbz	r3, c00d8 <serialEventRun+0x18>
   c00c6:	f7ff ffcf 	bl	c0068 <_Z16_fetch_usbserialv>
   c00ca:	6803      	ldr	r3, [r0, #0]
   c00cc:	691b      	ldr	r3, [r3, #16]
   c00ce:	4798      	blx	r3
   c00d0:	2800      	cmp	r0, #0
   c00d2:	dd01      	ble.n	c00d8 <serialEventRun+0x18>
        serialEvent();
   c00d4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c00d8:	4b06      	ldr	r3, [pc, #24]	; (c00f4 <serialEventRun+0x34>)
   c00da:	b143      	cbz	r3, c00ee <serialEventRun+0x2e>
   c00dc:	f000 f9ca 	bl	c0474 <_Z22__fetch_global_Serial1v>
   c00e0:	6803      	ldr	r3, [r0, #0]
   c00e2:	691b      	ldr	r3, [r3, #16]
   c00e4:	4798      	blx	r3
   c00e6:	2800      	cmp	r0, #0
   c00e8:	dd01      	ble.n	c00ee <serialEventRun+0x2e>
        serialEvent1();
   c00ea:	f3af 8000 	nop.w
}
   c00ee:	bd08      	pop	{r3, pc}
	...

000c00f8 <_post_loop>:
{
   c00f8:	b508      	push	{r3, lr}
	serialEventRun();
   c00fa:	f7ff ffe1 	bl	c00c0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c00fe:	f7fc fbf9 	bl	bc8f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c0102:	4b01      	ldr	r3, [pc, #4]	; (c0108 <_post_loop+0x10>)
   c0104:	6018      	str	r0, [r3, #0]
}
   c0106:	bd08      	pop	{r3, pc}
   c0108:	2003e710 	.word	0x2003e710

000c010c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c010c:	4805      	ldr	r0, [pc, #20]	; (c0124 <_Z33system_initialize_user_backup_ramv+0x18>)
   c010e:	4a06      	ldr	r2, [pc, #24]	; (c0128 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c0110:	4906      	ldr	r1, [pc, #24]	; (c012c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c0112:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c0114:	1a12      	subs	r2, r2, r0
   c0116:	f000 ff5b 	bl	c0fd0 <memcpy>
    __backup_sram_signature = signature;
   c011a:	4b05      	ldr	r3, [pc, #20]	; (c0130 <_Z33system_initialize_user_backup_ramv+0x24>)
   c011c:	4a05      	ldr	r2, [pc, #20]	; (c0134 <_Z33system_initialize_user_backup_ramv+0x28>)
   c011e:	601a      	str	r2, [r3, #0]
}
   c0120:	bd08      	pop	{r3, pc}
   c0122:	bf00      	nop
   c0124:	2003f400 	.word	0x2003f400
   c0128:	2003f404 	.word	0x2003f404
   c012c:	000c5634 	.word	0x000c5634
   c0130:	2003f400 	.word	0x2003f400
   c0134:	9a271c1e 	.word	0x9a271c1e

000c0138 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c0138:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c013a:	2300      	movs	r3, #0
   c013c:	9300      	str	r3, [sp, #0]
   c013e:	461a      	mov	r2, r3
   c0140:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c0144:	f7fc fe94 	bl	bce70 <system_ctrl_set_result>
}
   c0148:	b003      	add	sp, #12
   c014a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c0150 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c0150:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c0152:	8843      	ldrh	r3, [r0, #2]
   c0154:	2b0a      	cmp	r3, #10
   c0156:	d008      	beq.n	c016a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c0158:	2b50      	cmp	r3, #80	; 0x50
   c015a:	d10b      	bne.n	c0174 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c015c:	4b09      	ldr	r3, [pc, #36]	; (c0184 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c015e:	681b      	ldr	r3, [r3, #0]
   c0160:	b14b      	cbz	r3, c0176 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c0162:	b003      	add	sp, #12
   c0164:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c0168:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c016a:	f7ff ffe5 	bl	c0138 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c016e:	b003      	add	sp, #12
   c0170:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c0174:	2300      	movs	r3, #0
   c0176:	9300      	str	r3, [sp, #0]
   c0178:	461a      	mov	r2, r3
   c017a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c017e:	f7fc fe77 	bl	bce70 <system_ctrl_set_result>
}
   c0182:	e7f4      	b.n	c016e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c0184:	2003e70c 	.word	0x2003e70c

000c0188 <module_user_init_hook>:
{
   c0188:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c018a:	4812      	ldr	r0, [pc, #72]	; (c01d4 <module_user_init_hook+0x4c>)
   c018c:	2100      	movs	r1, #0
   c018e:	f7fc ffa7 	bl	bd0e0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c0192:	4b11      	ldr	r3, [pc, #68]	; (c01d8 <module_user_init_hook+0x50>)
   c0194:	681a      	ldr	r2, [r3, #0]
   c0196:	4b11      	ldr	r3, [pc, #68]	; (c01dc <module_user_init_hook+0x54>)
   c0198:	429a      	cmp	r2, r3
   c019a:	4b11      	ldr	r3, [pc, #68]	; (c01e0 <module_user_init_hook+0x58>)
   c019c:	bf0c      	ite	eq
   c019e:	2201      	moveq	r2, #1
   c01a0:	2200      	movne	r2, #0
   c01a2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c01a4:	d001      	beq.n	c01aa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c01a6:	f7ff ffb1 	bl	c010c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c01aa:	f7fc fb8b 	bl	bc8c4 <HAL_RNG_GetRandomNumber>
   c01ae:	4604      	mov	r4, r0
    srand(seed);
   c01b0:	f000 ff4e 	bl	c1050 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c01b4:	4b0b      	ldr	r3, [pc, #44]	; (c01e4 <module_user_init_hook+0x5c>)
   c01b6:	b113      	cbz	r3, c01be <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c01b8:	4620      	mov	r0, r4
   c01ba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c01be:	2100      	movs	r1, #0
   c01c0:	4808      	ldr	r0, [pc, #32]	; (c01e4 <module_user_init_hook+0x5c>)
   c01c2:	f7fc fec5 	bl	bcf50 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c01c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c01ca:	4807      	ldr	r0, [pc, #28]	; (c01e8 <module_user_init_hook+0x60>)
   c01cc:	2100      	movs	r1, #0
   c01ce:	f7fc be45 	b.w	bce5c <system_ctrl_set_app_request_handler>
   c01d2:	bf00      	nop
   c01d4:	000c00b5 	.word	0x000c00b5
   c01d8:	2003f400 	.word	0x2003f400
   c01dc:	9a271c1e 	.word	0x9a271c1e
   c01e0:	2003e708 	.word	0x2003e708
   c01e4:	00000000 	.word	0x00000000
   c01e8:	000c0151 	.word	0x000c0151

000c01ec <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   c01ec:	b508      	push	{r3, lr}
   c01ee:	4b02      	ldr	r3, [pc, #8]	; (c01f8 <spark_protocol_instance+0xc>)
   c01f0:	681b      	ldr	r3, [r3, #0]
   c01f2:	681b      	ldr	r3, [r3, #0]
   c01f4:	9301      	str	r3, [sp, #4]
   c01f6:	bd08      	pop	{r3, pc}
   c01f8:	0003025c 	.word	0x0003025c

000c01fc <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   c01fc:	b508      	push	{r3, lr}
   c01fe:	4b02      	ldr	r3, [pc, #8]	; (c0208 <spark_protocol_set_product_id+0xc>)
   c0200:	681b      	ldr	r3, [r3, #0]
   c0202:	685b      	ldr	r3, [r3, #4]
   c0204:	9301      	str	r3, [sp, #4]
   c0206:	bd08      	pop	{r3, pc}
   c0208:	0003025c 	.word	0x0003025c

000c020c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   c020c:	b508      	push	{r3, lr}
   c020e:	4b02      	ldr	r3, [pc, #8]	; (c0218 <spark_protocol_set_product_firmware_version+0xc>)
   c0210:	681b      	ldr	r3, [r3, #0]
   c0212:	689b      	ldr	r3, [r3, #8]
   c0214:	9301      	str	r3, [sp, #4]
   c0216:	bd08      	pop	{r3, pc}
   c0218:	0003025c 	.word	0x0003025c

000c021c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c021c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   c021e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c0220:	d902      	bls.n	c0228 <pinAvailable+0xc>
    return false;
   c0222:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c0224:	b002      	add	sp, #8
   c0226:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c0228:	f1a0 030b 	sub.w	r3, r0, #11
   c022c:	2b02      	cmp	r3, #2
   c022e:	d81a      	bhi.n	c0266 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c0230:	4c17      	ldr	r4, [pc, #92]	; (c0290 <pinAvailable+0x74>)
   c0232:	7821      	ldrb	r1, [r4, #0]
   c0234:	f3bf 8f5b 	dmb	ish
   c0238:	f011 0101 	ands.w	r1, r1, #1
   c023c:	d10b      	bne.n	c0256 <pinAvailable+0x3a>
   c023e:	4620      	mov	r0, r4
   c0240:	9101      	str	r1, [sp, #4]
   c0242:	f7f3 ff3b 	bl	b40bc <__cxa_guard_acquire>
   c0246:	9901      	ldr	r1, [sp, #4]
   c0248:	b128      	cbz	r0, c0256 <pinAvailable+0x3a>
   c024a:	4812      	ldr	r0, [pc, #72]	; (c0294 <pinAvailable+0x78>)
   c024c:	f7ff f9b2 	bl	bf5b4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   c0250:	4620      	mov	r0, r4
   c0252:	f7f3 ff38 	bl	b40c6 <__cxa_guard_release>
   c0256:	4b0f      	ldr	r3, [pc, #60]	; (c0294 <pinAvailable+0x78>)
   c0258:	7818      	ldrb	r0, [r3, #0]
   c025a:	f7fc fc53 	bl	bcb04 <hal_spi_is_enabled>
   c025e:	2800      	cmp	r0, #0
   c0260:	d1df      	bne.n	c0222 <pinAvailable+0x6>
  return true; // 'pin' is available
   c0262:	2001      	movs	r0, #1
   c0264:	e7de      	b.n	c0224 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c0266:	2801      	cmp	r0, #1
   c0268:	d809      	bhi.n	c027e <pinAvailable+0x62>
   c026a:	f000 f89f 	bl	c03ac <_Z19__fetch_global_Wirev>
   c026e:	2100      	movs	r1, #0
   c0270:	7c00      	ldrb	r0, [r0, #16]
   c0272:	f7fc fbe7 	bl	bca44 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c0276:	f080 0001 	eor.w	r0, r0, #1
   c027a:	b2c0      	uxtb	r0, r0
   c027c:	e7d2      	b.n	c0224 <pinAvailable+0x8>
   c027e:	3809      	subs	r0, #9
   c0280:	2801      	cmp	r0, #1
   c0282:	d8ee      	bhi.n	c0262 <pinAvailable+0x46>
   c0284:	f000 f8f6 	bl	c0474 <_Z22__fetch_global_Serial1v>
   c0288:	7c00      	ldrb	r0, [r0, #16]
   c028a:	f7fc fcf3 	bl	bcc74 <hal_usart_is_enabled>
   c028e:	e7f2      	b.n	c0276 <pinAvailable+0x5a>
   c0290:	2003e4e0 	.word	0x2003e4e0
   c0294:	2003e4e4 	.word	0x2003e4e4

000c0298 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c0298:	2823      	cmp	r0, #35	; 0x23
{
   c029a:	b538      	push	{r3, r4, r5, lr}
   c029c:	4604      	mov	r4, r0
   c029e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c02a0:	d80a      	bhi.n	c02b8 <pinMode+0x20>
   c02a2:	29ff      	cmp	r1, #255	; 0xff
   c02a4:	d008      	beq.n	c02b8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c02a6:	f7ff ffb9 	bl	c021c <pinAvailable>
   c02aa:	b128      	cbz	r0, c02b8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c02ac:	4629      	mov	r1, r5
   c02ae:	4620      	mov	r0, r4
}
   c02b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c02b4:	f7fc bb4e 	b.w	bc954 <HAL_Pin_Mode>
}
   c02b8:	bd38      	pop	{r3, r4, r5, pc}

000c02ba <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c02ba:	b538      	push	{r3, r4, r5, lr}
   c02bc:	4604      	mov	r4, r0
   c02be:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c02c0:	f7fc fb50 	bl	bc964 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c02c4:	28ff      	cmp	r0, #255	; 0xff
   c02c6:	d010      	beq.n	c02ea <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c02c8:	2806      	cmp	r0, #6
   c02ca:	d804      	bhi.n	c02d6 <digitalWrite+0x1c>
   c02cc:	234d      	movs	r3, #77	; 0x4d
   c02ce:	fa23 f000 	lsr.w	r0, r3, r0
   c02d2:	07c3      	lsls	r3, r0, #31
   c02d4:	d409      	bmi.n	c02ea <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c02d6:	4620      	mov	r0, r4
   c02d8:	f7ff ffa0 	bl	c021c <pinAvailable>
   c02dc:	b128      	cbz	r0, c02ea <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c02de:	4629      	mov	r1, r5
   c02e0:	4620      	mov	r0, r4
}
   c02e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c02e6:	f7fc bb45 	b.w	bc974 <HAL_GPIO_Write>
}
   c02ea:	bd38      	pop	{r3, r4, r5, pc}

000c02ec <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   c02ec:	b510      	push	{r4, lr}
   c02ee:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c02f0:	f7fc fb38 	bl	bc964 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   c02f4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   c02f6:	b2db      	uxtb	r3, r3
   c02f8:	2b01      	cmp	r3, #1
   c02fa:	d908      	bls.n	c030e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   c02fc:	4620      	mov	r0, r4
   c02fe:	f7ff ff8d 	bl	c021c <pinAvailable>
   c0302:	b120      	cbz	r0, c030e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   c0304:	4620      	mov	r0, r4
}
   c0306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   c030a:	f7fc bb3b 	b.w	bc984 <HAL_GPIO_Read>
}
   c030e:	2000      	movs	r0, #0
   c0310:	bd10      	pop	{r4, pc}

000c0312 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c0312:	280d      	cmp	r0, #13
{
   c0314:	b510      	push	{r4, lr}
   c0316:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c0318:	bf9c      	itt	ls
   c031a:	340e      	addls	r4, #14
   c031c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c031e:	4620      	mov	r0, r4
   c0320:	f7ff ff7c 	bl	c021c <pinAvailable>
   c0324:	b150      	cbz	r0, c033c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c0326:	2103      	movs	r1, #3
   c0328:	4620      	mov	r0, r4
   c032a:	f7fc fb0b 	bl	bc944 <HAL_Validate_Pin_Function>
   c032e:	2803      	cmp	r0, #3
   c0330:	d104      	bne.n	c033c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c0332:	4620      	mov	r0, r4
}
   c0334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c0338:	f7fc bb3c 	b.w	bc9b4 <hal_adc_read>
}
   c033c:	2000      	movs	r0, #0
   c033e:	bd10      	pop	{r4, pc}

000c0340 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c0340:	4770      	bx	lr

000c0342 <__tcf_1>:
   c0342:	4770      	bx	lr

000c0344 <_Z17acquireWireBufferv>:
{
   c0344:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c0346:	4b0a      	ldr	r3, [pc, #40]	; (c0370 <_Z17acquireWireBufferv+0x2c>)
   c0348:	6003      	str	r3, [r0, #0]
   c034a:	2301      	movs	r3, #1
{
   c034c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c034e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0350:	4908      	ldr	r1, [pc, #32]	; (c0374 <_Z17acquireWireBufferv+0x30>)
   c0352:	2020      	movs	r0, #32
   c0354:	f000 f8b4 	bl	c04c0 <_ZnajRKSt9nothrow_t>
	};
   c0358:	2520      	movs	r5, #32
   c035a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c035c:	4905      	ldr	r1, [pc, #20]	; (c0374 <_Z17acquireWireBufferv+0x30>)
	};
   c035e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0360:	4628      	mov	r0, r5
   c0362:	f000 f8ad 	bl	c04c0 <_ZnajRKSt9nothrow_t>
	};
   c0366:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   c036a:	4620      	mov	r0, r4
   c036c:	bd38      	pop	{r3, r4, r5, pc}
   c036e:	bf00      	nop
   c0370:	00010018 	.word	0x00010018
   c0374:	000c5164 	.word	0x000c5164

000c0378 <_Z18acquireWire1Bufferv>:
{
   c0378:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c037a:	4b0a      	ldr	r3, [pc, #40]	; (c03a4 <_Z18acquireWire1Bufferv+0x2c>)
   c037c:	6003      	str	r3, [r0, #0]
   c037e:	2301      	movs	r3, #1
{
   c0380:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c0382:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0384:	4908      	ldr	r1, [pc, #32]	; (c03a8 <_Z18acquireWire1Bufferv+0x30>)
   c0386:	2020      	movs	r0, #32
   c0388:	f000 f89a 	bl	c04c0 <_ZnajRKSt9nothrow_t>
	};
   c038c:	2520      	movs	r5, #32
   c038e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0390:	4905      	ldr	r1, [pc, #20]	; (c03a8 <_Z18acquireWire1Bufferv+0x30>)
	};
   c0392:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0394:	4628      	mov	r0, r5
   c0396:	f000 f893 	bl	c04c0 <_ZnajRKSt9nothrow_t>
	};
   c039a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   c039e:	4620      	mov	r0, r4
   c03a0:	bd38      	pop	{r3, r4, r5, pc}
   c03a2:	bf00      	nop
   c03a4:	00010018 	.word	0x00010018
   c03a8:	000c5164 	.word	0x000c5164

000c03ac <_Z19__fetch_global_Wirev>:
{
   c03ac:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c03ae:	4d0e      	ldr	r5, [pc, #56]	; (c03e8 <_Z19__fetch_global_Wirev+0x3c>)
   c03b0:	7829      	ldrb	r1, [r5, #0]
   c03b2:	f3bf 8f5b 	dmb	ish
   c03b6:	f011 0401 	ands.w	r4, r1, #1
{
   c03ba:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c03bc:	d111      	bne.n	c03e2 <_Z19__fetch_global_Wirev+0x36>
   c03be:	4628      	mov	r0, r5
   c03c0:	f7f3 fe7c 	bl	b40bc <__cxa_guard_acquire>
   c03c4:	b168      	cbz	r0, c03e2 <_Z19__fetch_global_Wirev+0x36>
   c03c6:	4668      	mov	r0, sp
   c03c8:	f7ff ffbc 	bl	c0344 <_Z17acquireWireBufferv>
   c03cc:	466a      	mov	r2, sp
   c03ce:	4621      	mov	r1, r4
   c03d0:	4806      	ldr	r0, [pc, #24]	; (c03ec <_Z19__fetch_global_Wirev+0x40>)
   c03d2:	f7fd fba9 	bl	bdb28 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c03d6:	4628      	mov	r0, r5
   c03d8:	f7f3 fe75 	bl	b40c6 <__cxa_guard_release>
   c03dc:	4804      	ldr	r0, [pc, #16]	; (c03f0 <_Z19__fetch_global_Wirev+0x44>)
   c03de:	f000 fdcb 	bl	c0f78 <atexit>
	return wire;
}
   c03e2:	4802      	ldr	r0, [pc, #8]	; (c03ec <_Z19__fetch_global_Wirev+0x40>)
   c03e4:	b007      	add	sp, #28
   c03e6:	bd30      	pop	{r4, r5, pc}
   c03e8:	2003e714 	.word	0x2003e714
   c03ec:	2003e71c 	.word	0x2003e71c
   c03f0:	000c0341 	.word	0x000c0341

000c03f4 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   c03f4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   c03f6:	4c0e      	ldr	r4, [pc, #56]	; (c0430 <_Z20__fetch_global_Wire1v+0x3c>)
   c03f8:	7823      	ldrb	r3, [r4, #0]
   c03fa:	f3bf 8f5b 	dmb	ish
   c03fe:	07db      	lsls	r3, r3, #31
{
   c0400:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   c0402:	d411      	bmi.n	c0428 <_Z20__fetch_global_Wire1v+0x34>
   c0404:	4620      	mov	r0, r4
   c0406:	f7f3 fe59 	bl	b40bc <__cxa_guard_acquire>
   c040a:	b168      	cbz	r0, c0428 <_Z20__fetch_global_Wire1v+0x34>
   c040c:	4668      	mov	r0, sp
   c040e:	f7ff ffb3 	bl	c0378 <_Z18acquireWire1Bufferv>
   c0412:	466a      	mov	r2, sp
   c0414:	2101      	movs	r1, #1
   c0416:	4807      	ldr	r0, [pc, #28]	; (c0434 <_Z20__fetch_global_Wire1v+0x40>)
   c0418:	f7fd fb86 	bl	bdb28 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c041c:	4620      	mov	r0, r4
   c041e:	f7f3 fe52 	bl	b40c6 <__cxa_guard_release>
   c0422:	4805      	ldr	r0, [pc, #20]	; (c0438 <_Z20__fetch_global_Wire1v+0x44>)
   c0424:	f000 fda8 	bl	c0f78 <atexit>
	return wire;
}
   c0428:	4802      	ldr	r0, [pc, #8]	; (c0434 <_Z20__fetch_global_Wire1v+0x40>)
   c042a:	b006      	add	sp, #24
   c042c:	bd10      	pop	{r4, pc}
   c042e:	bf00      	nop
   c0430:	2003e718 	.word	0x2003e718
   c0434:	2003e730 	.word	0x2003e730
   c0438:	000c0343 	.word	0x000c0343

000c043c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c043c:	4770      	bx	lr
	...

000c0440 <_Z20acquireSerial1Bufferv>:
{
   c0440:	b538      	push	{r3, r4, r5, lr}
   c0442:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c0444:	2514      	movs	r5, #20
   c0446:	462a      	mov	r2, r5
   c0448:	2100      	movs	r1, #0
   c044a:	f000 fde9 	bl	c1020 <memset>
   c044e:	8025      	strh	r5, [r4, #0]
   c0450:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c0452:	4907      	ldr	r1, [pc, #28]	; (c0470 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c0454:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c0456:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c0458:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c045a:	f000 f831 	bl	c04c0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c045e:	4904      	ldr	r1, [pc, #16]	; (c0470 <_Z20acquireSerial1Bufferv+0x30>)
    };
   c0460:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c0462:	4628      	mov	r0, r5
   c0464:	f000 f82c 	bl	c04c0 <_ZnajRKSt9nothrow_t>
    };
   c0468:	60e0      	str	r0, [r4, #12]
}
   c046a:	4620      	mov	r0, r4
   c046c:	bd38      	pop	{r3, r4, r5, pc}
   c046e:	bf00      	nop
   c0470:	000c5164 	.word	0x000c5164

000c0474 <_Z22__fetch_global_Serial1v>:
{
   c0474:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c0476:	4d0e      	ldr	r5, [pc, #56]	; (c04b0 <_Z22__fetch_global_Serial1v+0x3c>)
   c0478:	7829      	ldrb	r1, [r5, #0]
   c047a:	f3bf 8f5b 	dmb	ish
   c047e:	f011 0401 	ands.w	r4, r1, #1
{
   c0482:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c0484:	d111      	bne.n	c04aa <_Z22__fetch_global_Serial1v+0x36>
   c0486:	4628      	mov	r0, r5
   c0488:	f7f3 fe18 	bl	b40bc <__cxa_guard_acquire>
   c048c:	b168      	cbz	r0, c04aa <_Z22__fetch_global_Serial1v+0x36>
   c048e:	a801      	add	r0, sp, #4
   c0490:	f7ff ffd6 	bl	c0440 <_Z20acquireSerial1Bufferv>
   c0494:	aa01      	add	r2, sp, #4
   c0496:	4621      	mov	r1, r4
   c0498:	4806      	ldr	r0, [pc, #24]	; (c04b4 <_Z22__fetch_global_Serial1v+0x40>)
   c049a:	f7ff fd63 	bl	bff64 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c049e:	4628      	mov	r0, r5
   c04a0:	f7f3 fe11 	bl	b40c6 <__cxa_guard_release>
   c04a4:	4804      	ldr	r0, [pc, #16]	; (c04b8 <_Z22__fetch_global_Serial1v+0x44>)
   c04a6:	f000 fd67 	bl	c0f78 <atexit>
    return serial1;
}
   c04aa:	4802      	ldr	r0, [pc, #8]	; (c04b4 <_Z22__fetch_global_Serial1v+0x40>)
   c04ac:	b007      	add	sp, #28
   c04ae:	bd30      	pop	{r4, r5, pc}
   c04b0:	2003e744 	.word	0x2003e744
   c04b4:	2003e748 	.word	0x2003e748
   c04b8:	000c043d 	.word	0x000c043d

000c04bc <_ZnwjRKSt9nothrow_t>:
   c04bc:	f7f3 bdeb 	b.w	b4096 <_Znwj>

000c04c0 <_ZnajRKSt9nothrow_t>:
   c04c0:	f7f3 bdeb 	b.w	b409a <_Znaj>

000c04c4 <_ZSt17__throw_bad_allocv>:
   c04c4:	b508      	push	{r3, lr}
   c04c6:	f7fc fdeb 	bl	bd0a0 <abort>

000c04ca <_ZSt20__throw_length_errorPKc>:
   c04ca:	b508      	push	{r3, lr}
   c04cc:	f7fc fde8 	bl	bd0a0 <abort>

000c04d0 <_ZSt25__throw_bad_function_callv>:
   c04d0:	b508      	push	{r3, lr}
   c04d2:	f7fc fde5 	bl	bd0a0 <abort>
	...

000c04d8 <nan>:
   c04d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; c04e0 <nan+0x8>
   c04dc:	4770      	bx	lr
   c04de:	bf00      	nop
   c04e0:	00000000 	.word	0x00000000
   c04e4:	7ff80000 	.word	0x7ff80000

000c04e8 <__aeabi_drsub>:
   c04e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c04ec:	e002      	b.n	c04f4 <__adddf3>
   c04ee:	bf00      	nop

000c04f0 <__aeabi_dsub>:
   c04f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c04f4 <__adddf3>:
   c04f4:	b530      	push	{r4, r5, lr}
   c04f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c04fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c04fe:	ea94 0f05 	teq	r4, r5
   c0502:	bf08      	it	eq
   c0504:	ea90 0f02 	teqeq	r0, r2
   c0508:	bf1f      	itttt	ne
   c050a:	ea54 0c00 	orrsne.w	ip, r4, r0
   c050e:	ea55 0c02 	orrsne.w	ip, r5, r2
   c0512:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c0516:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c051a:	f000 80e2 	beq.w	c06e2 <__adddf3+0x1ee>
   c051e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c0522:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c0526:	bfb8      	it	lt
   c0528:	426d      	neglt	r5, r5
   c052a:	dd0c      	ble.n	c0546 <__adddf3+0x52>
   c052c:	442c      	add	r4, r5
   c052e:	ea80 0202 	eor.w	r2, r0, r2
   c0532:	ea81 0303 	eor.w	r3, r1, r3
   c0536:	ea82 0000 	eor.w	r0, r2, r0
   c053a:	ea83 0101 	eor.w	r1, r3, r1
   c053e:	ea80 0202 	eor.w	r2, r0, r2
   c0542:	ea81 0303 	eor.w	r3, r1, r3
   c0546:	2d36      	cmp	r5, #54	; 0x36
   c0548:	bf88      	it	hi
   c054a:	bd30      	pophi	{r4, r5, pc}
   c054c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c0550:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c0554:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c0558:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c055c:	d002      	beq.n	c0564 <__adddf3+0x70>
   c055e:	4240      	negs	r0, r0
   c0560:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c0564:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c0568:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c056c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c0570:	d002      	beq.n	c0578 <__adddf3+0x84>
   c0572:	4252      	negs	r2, r2
   c0574:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c0578:	ea94 0f05 	teq	r4, r5
   c057c:	f000 80a7 	beq.w	c06ce <__adddf3+0x1da>
   c0580:	f1a4 0401 	sub.w	r4, r4, #1
   c0584:	f1d5 0e20 	rsbs	lr, r5, #32
   c0588:	db0d      	blt.n	c05a6 <__adddf3+0xb2>
   c058a:	fa02 fc0e 	lsl.w	ip, r2, lr
   c058e:	fa22 f205 	lsr.w	r2, r2, r5
   c0592:	1880      	adds	r0, r0, r2
   c0594:	f141 0100 	adc.w	r1, r1, #0
   c0598:	fa03 f20e 	lsl.w	r2, r3, lr
   c059c:	1880      	adds	r0, r0, r2
   c059e:	fa43 f305 	asr.w	r3, r3, r5
   c05a2:	4159      	adcs	r1, r3
   c05a4:	e00e      	b.n	c05c4 <__adddf3+0xd0>
   c05a6:	f1a5 0520 	sub.w	r5, r5, #32
   c05aa:	f10e 0e20 	add.w	lr, lr, #32
   c05ae:	2a01      	cmp	r2, #1
   c05b0:	fa03 fc0e 	lsl.w	ip, r3, lr
   c05b4:	bf28      	it	cs
   c05b6:	f04c 0c02 	orrcs.w	ip, ip, #2
   c05ba:	fa43 f305 	asr.w	r3, r3, r5
   c05be:	18c0      	adds	r0, r0, r3
   c05c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c05c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c05c8:	d507      	bpl.n	c05da <__adddf3+0xe6>
   c05ca:	f04f 0e00 	mov.w	lr, #0
   c05ce:	f1dc 0c00 	rsbs	ip, ip, #0
   c05d2:	eb7e 0000 	sbcs.w	r0, lr, r0
   c05d6:	eb6e 0101 	sbc.w	r1, lr, r1
   c05da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c05de:	d31b      	bcc.n	c0618 <__adddf3+0x124>
   c05e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c05e4:	d30c      	bcc.n	c0600 <__adddf3+0x10c>
   c05e6:	0849      	lsrs	r1, r1, #1
   c05e8:	ea5f 0030 	movs.w	r0, r0, rrx
   c05ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c05f0:	f104 0401 	add.w	r4, r4, #1
   c05f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c05f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c05fc:	f080 809a 	bcs.w	c0734 <__adddf3+0x240>
   c0600:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c0604:	bf08      	it	eq
   c0606:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c060a:	f150 0000 	adcs.w	r0, r0, #0
   c060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c0612:	ea41 0105 	orr.w	r1, r1, r5
   c0616:	bd30      	pop	{r4, r5, pc}
   c0618:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c061c:	4140      	adcs	r0, r0
   c061e:	eb41 0101 	adc.w	r1, r1, r1
   c0622:	3c01      	subs	r4, #1
   c0624:	bf28      	it	cs
   c0626:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c062a:	d2e9      	bcs.n	c0600 <__adddf3+0x10c>
   c062c:	f091 0f00 	teq	r1, #0
   c0630:	bf04      	itt	eq
   c0632:	4601      	moveq	r1, r0
   c0634:	2000      	moveq	r0, #0
   c0636:	fab1 f381 	clz	r3, r1
   c063a:	bf08      	it	eq
   c063c:	3320      	addeq	r3, #32
   c063e:	f1a3 030b 	sub.w	r3, r3, #11
   c0642:	f1b3 0220 	subs.w	r2, r3, #32
   c0646:	da0c      	bge.n	c0662 <__adddf3+0x16e>
   c0648:	320c      	adds	r2, #12
   c064a:	dd08      	ble.n	c065e <__adddf3+0x16a>
   c064c:	f102 0c14 	add.w	ip, r2, #20
   c0650:	f1c2 020c 	rsb	r2, r2, #12
   c0654:	fa01 f00c 	lsl.w	r0, r1, ip
   c0658:	fa21 f102 	lsr.w	r1, r1, r2
   c065c:	e00c      	b.n	c0678 <__adddf3+0x184>
   c065e:	f102 0214 	add.w	r2, r2, #20
   c0662:	bfd8      	it	le
   c0664:	f1c2 0c20 	rsble	ip, r2, #32
   c0668:	fa01 f102 	lsl.w	r1, r1, r2
   c066c:	fa20 fc0c 	lsr.w	ip, r0, ip
   c0670:	bfdc      	itt	le
   c0672:	ea41 010c 	orrle.w	r1, r1, ip
   c0676:	4090      	lslle	r0, r2
   c0678:	1ae4      	subs	r4, r4, r3
   c067a:	bfa2      	ittt	ge
   c067c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c0680:	4329      	orrge	r1, r5
   c0682:	bd30      	popge	{r4, r5, pc}
   c0684:	ea6f 0404 	mvn.w	r4, r4
   c0688:	3c1f      	subs	r4, #31
   c068a:	da1c      	bge.n	c06c6 <__adddf3+0x1d2>
   c068c:	340c      	adds	r4, #12
   c068e:	dc0e      	bgt.n	c06ae <__adddf3+0x1ba>
   c0690:	f104 0414 	add.w	r4, r4, #20
   c0694:	f1c4 0220 	rsb	r2, r4, #32
   c0698:	fa20 f004 	lsr.w	r0, r0, r4
   c069c:	fa01 f302 	lsl.w	r3, r1, r2
   c06a0:	ea40 0003 	orr.w	r0, r0, r3
   c06a4:	fa21 f304 	lsr.w	r3, r1, r4
   c06a8:	ea45 0103 	orr.w	r1, r5, r3
   c06ac:	bd30      	pop	{r4, r5, pc}
   c06ae:	f1c4 040c 	rsb	r4, r4, #12
   c06b2:	f1c4 0220 	rsb	r2, r4, #32
   c06b6:	fa20 f002 	lsr.w	r0, r0, r2
   c06ba:	fa01 f304 	lsl.w	r3, r1, r4
   c06be:	ea40 0003 	orr.w	r0, r0, r3
   c06c2:	4629      	mov	r1, r5
   c06c4:	bd30      	pop	{r4, r5, pc}
   c06c6:	fa21 f004 	lsr.w	r0, r1, r4
   c06ca:	4629      	mov	r1, r5
   c06cc:	bd30      	pop	{r4, r5, pc}
   c06ce:	f094 0f00 	teq	r4, #0
   c06d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c06d6:	bf06      	itte	eq
   c06d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c06dc:	3401      	addeq	r4, #1
   c06de:	3d01      	subne	r5, #1
   c06e0:	e74e      	b.n	c0580 <__adddf3+0x8c>
   c06e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c06e6:	bf18      	it	ne
   c06e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c06ec:	d029      	beq.n	c0742 <__adddf3+0x24e>
   c06ee:	ea94 0f05 	teq	r4, r5
   c06f2:	bf08      	it	eq
   c06f4:	ea90 0f02 	teqeq	r0, r2
   c06f8:	d005      	beq.n	c0706 <__adddf3+0x212>
   c06fa:	ea54 0c00 	orrs.w	ip, r4, r0
   c06fe:	bf04      	itt	eq
   c0700:	4619      	moveq	r1, r3
   c0702:	4610      	moveq	r0, r2
   c0704:	bd30      	pop	{r4, r5, pc}
   c0706:	ea91 0f03 	teq	r1, r3
   c070a:	bf1e      	ittt	ne
   c070c:	2100      	movne	r1, #0
   c070e:	2000      	movne	r0, #0
   c0710:	bd30      	popne	{r4, r5, pc}
   c0712:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c0716:	d105      	bne.n	c0724 <__adddf3+0x230>
   c0718:	0040      	lsls	r0, r0, #1
   c071a:	4149      	adcs	r1, r1
   c071c:	bf28      	it	cs
   c071e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c0722:	bd30      	pop	{r4, r5, pc}
   c0724:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c0728:	bf3c      	itt	cc
   c072a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c072e:	bd30      	popcc	{r4, r5, pc}
   c0730:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c0734:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c0738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c073c:	f04f 0000 	mov.w	r0, #0
   c0740:	bd30      	pop	{r4, r5, pc}
   c0742:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c0746:	bf1a      	itte	ne
   c0748:	4619      	movne	r1, r3
   c074a:	4610      	movne	r0, r2
   c074c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c0750:	bf1c      	itt	ne
   c0752:	460b      	movne	r3, r1
   c0754:	4602      	movne	r2, r0
   c0756:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c075a:	bf06      	itte	eq
   c075c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c0760:	ea91 0f03 	teqeq	r1, r3
   c0764:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c0768:	bd30      	pop	{r4, r5, pc}
   c076a:	bf00      	nop

000c076c <__aeabi_ui2d>:
   c076c:	f090 0f00 	teq	r0, #0
   c0770:	bf04      	itt	eq
   c0772:	2100      	moveq	r1, #0
   c0774:	4770      	bxeq	lr
   c0776:	b530      	push	{r4, r5, lr}
   c0778:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c077c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c0780:	f04f 0500 	mov.w	r5, #0
   c0784:	f04f 0100 	mov.w	r1, #0
   c0788:	e750      	b.n	c062c <__adddf3+0x138>
   c078a:	bf00      	nop

000c078c <__aeabi_i2d>:
   c078c:	f090 0f00 	teq	r0, #0
   c0790:	bf04      	itt	eq
   c0792:	2100      	moveq	r1, #0
   c0794:	4770      	bxeq	lr
   c0796:	b530      	push	{r4, r5, lr}
   c0798:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c079c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c07a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c07a4:	bf48      	it	mi
   c07a6:	4240      	negmi	r0, r0
   c07a8:	f04f 0100 	mov.w	r1, #0
   c07ac:	e73e      	b.n	c062c <__adddf3+0x138>
   c07ae:	bf00      	nop

000c07b0 <__aeabi_f2d>:
   c07b0:	0042      	lsls	r2, r0, #1
   c07b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c07b6:	ea4f 0131 	mov.w	r1, r1, rrx
   c07ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c07be:	bf1f      	itttt	ne
   c07c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c07c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c07c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c07cc:	4770      	bxne	lr
   c07ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c07d2:	bf08      	it	eq
   c07d4:	4770      	bxeq	lr
   c07d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c07da:	bf04      	itt	eq
   c07dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c07e0:	4770      	bxeq	lr
   c07e2:	b530      	push	{r4, r5, lr}
   c07e4:	f44f 7460 	mov.w	r4, #896	; 0x380
   c07e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c07ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c07f0:	e71c      	b.n	c062c <__adddf3+0x138>
   c07f2:	bf00      	nop

000c07f4 <__aeabi_ul2d>:
   c07f4:	ea50 0201 	orrs.w	r2, r0, r1
   c07f8:	bf08      	it	eq
   c07fa:	4770      	bxeq	lr
   c07fc:	b530      	push	{r4, r5, lr}
   c07fe:	f04f 0500 	mov.w	r5, #0
   c0802:	e00a      	b.n	c081a <__aeabi_l2d+0x16>

000c0804 <__aeabi_l2d>:
   c0804:	ea50 0201 	orrs.w	r2, r0, r1
   c0808:	bf08      	it	eq
   c080a:	4770      	bxeq	lr
   c080c:	b530      	push	{r4, r5, lr}
   c080e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c0812:	d502      	bpl.n	c081a <__aeabi_l2d+0x16>
   c0814:	4240      	negs	r0, r0
   c0816:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c081a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c081e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c0822:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c0826:	f43f aed8 	beq.w	c05da <__adddf3+0xe6>
   c082a:	f04f 0203 	mov.w	r2, #3
   c082e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c0832:	bf18      	it	ne
   c0834:	3203      	addne	r2, #3
   c0836:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c083a:	bf18      	it	ne
   c083c:	3203      	addne	r2, #3
   c083e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c0842:	f1c2 0320 	rsb	r3, r2, #32
   c0846:	fa00 fc03 	lsl.w	ip, r0, r3
   c084a:	fa20 f002 	lsr.w	r0, r0, r2
   c084e:	fa01 fe03 	lsl.w	lr, r1, r3
   c0852:	ea40 000e 	orr.w	r0, r0, lr
   c0856:	fa21 f102 	lsr.w	r1, r1, r2
   c085a:	4414      	add	r4, r2
   c085c:	e6bd      	b.n	c05da <__adddf3+0xe6>
   c085e:	bf00      	nop

000c0860 <__aeabi_dmul>:
   c0860:	b570      	push	{r4, r5, r6, lr}
   c0862:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c0866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c086e:	bf1d      	ittte	ne
   c0870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c0874:	ea94 0f0c 	teqne	r4, ip
   c0878:	ea95 0f0c 	teqne	r5, ip
   c087c:	f000 f8de 	bleq	c0a3c <__aeabi_dmul+0x1dc>
   c0880:	442c      	add	r4, r5
   c0882:	ea81 0603 	eor.w	r6, r1, r3
   c0886:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c088a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c088e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c0892:	bf18      	it	ne
   c0894:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c0898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c089c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c08a0:	d038      	beq.n	c0914 <__aeabi_dmul+0xb4>
   c08a2:	fba0 ce02 	umull	ip, lr, r0, r2
   c08a6:	f04f 0500 	mov.w	r5, #0
   c08aa:	fbe1 e502 	umlal	lr, r5, r1, r2
   c08ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c08b2:	fbe0 e503 	umlal	lr, r5, r0, r3
   c08b6:	f04f 0600 	mov.w	r6, #0
   c08ba:	fbe1 5603 	umlal	r5, r6, r1, r3
   c08be:	f09c 0f00 	teq	ip, #0
   c08c2:	bf18      	it	ne
   c08c4:	f04e 0e01 	orrne.w	lr, lr, #1
   c08c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c08cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c08d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c08d4:	d204      	bcs.n	c08e0 <__aeabi_dmul+0x80>
   c08d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c08da:	416d      	adcs	r5, r5
   c08dc:	eb46 0606 	adc.w	r6, r6, r6
   c08e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c08e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c08e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c08ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c08f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c08f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c08f8:	bf88      	it	hi
   c08fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c08fe:	d81e      	bhi.n	c093e <__aeabi_dmul+0xde>
   c0900:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c0904:	bf08      	it	eq
   c0906:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c090a:	f150 0000 	adcs.w	r0, r0, #0
   c090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c0912:	bd70      	pop	{r4, r5, r6, pc}
   c0914:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c0918:	ea46 0101 	orr.w	r1, r6, r1
   c091c:	ea40 0002 	orr.w	r0, r0, r2
   c0920:	ea81 0103 	eor.w	r1, r1, r3
   c0924:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c0928:	bfc2      	ittt	gt
   c092a:	ebd4 050c 	rsbsgt	r5, r4, ip
   c092e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c0932:	bd70      	popgt	{r4, r5, r6, pc}
   c0934:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0938:	f04f 0e00 	mov.w	lr, #0
   c093c:	3c01      	subs	r4, #1
   c093e:	f300 80ab 	bgt.w	c0a98 <__aeabi_dmul+0x238>
   c0942:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c0946:	bfde      	ittt	le
   c0948:	2000      	movle	r0, #0
   c094a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c094e:	bd70      	pople	{r4, r5, r6, pc}
   c0950:	f1c4 0400 	rsb	r4, r4, #0
   c0954:	3c20      	subs	r4, #32
   c0956:	da35      	bge.n	c09c4 <__aeabi_dmul+0x164>
   c0958:	340c      	adds	r4, #12
   c095a:	dc1b      	bgt.n	c0994 <__aeabi_dmul+0x134>
   c095c:	f104 0414 	add.w	r4, r4, #20
   c0960:	f1c4 0520 	rsb	r5, r4, #32
   c0964:	fa00 f305 	lsl.w	r3, r0, r5
   c0968:	fa20 f004 	lsr.w	r0, r0, r4
   c096c:	fa01 f205 	lsl.w	r2, r1, r5
   c0970:	ea40 0002 	orr.w	r0, r0, r2
   c0974:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c0978:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c097c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c0980:	fa21 f604 	lsr.w	r6, r1, r4
   c0984:	eb42 0106 	adc.w	r1, r2, r6
   c0988:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c098c:	bf08      	it	eq
   c098e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c0992:	bd70      	pop	{r4, r5, r6, pc}
   c0994:	f1c4 040c 	rsb	r4, r4, #12
   c0998:	f1c4 0520 	rsb	r5, r4, #32
   c099c:	fa00 f304 	lsl.w	r3, r0, r4
   c09a0:	fa20 f005 	lsr.w	r0, r0, r5
   c09a4:	fa01 f204 	lsl.w	r2, r1, r4
   c09a8:	ea40 0002 	orr.w	r0, r0, r2
   c09ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c09b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c09b4:	f141 0100 	adc.w	r1, r1, #0
   c09b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c09bc:	bf08      	it	eq
   c09be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c09c2:	bd70      	pop	{r4, r5, r6, pc}
   c09c4:	f1c4 0520 	rsb	r5, r4, #32
   c09c8:	fa00 f205 	lsl.w	r2, r0, r5
   c09cc:	ea4e 0e02 	orr.w	lr, lr, r2
   c09d0:	fa20 f304 	lsr.w	r3, r0, r4
   c09d4:	fa01 f205 	lsl.w	r2, r1, r5
   c09d8:	ea43 0302 	orr.w	r3, r3, r2
   c09dc:	fa21 f004 	lsr.w	r0, r1, r4
   c09e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c09e4:	fa21 f204 	lsr.w	r2, r1, r4
   c09e8:	ea20 0002 	bic.w	r0, r0, r2
   c09ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c09f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c09f4:	bf08      	it	eq
   c09f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c09fa:	bd70      	pop	{r4, r5, r6, pc}
   c09fc:	f094 0f00 	teq	r4, #0
   c0a00:	d10f      	bne.n	c0a22 <__aeabi_dmul+0x1c2>
   c0a02:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c0a06:	0040      	lsls	r0, r0, #1
   c0a08:	eb41 0101 	adc.w	r1, r1, r1
   c0a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c0a10:	bf08      	it	eq
   c0a12:	3c01      	subeq	r4, #1
   c0a14:	d0f7      	beq.n	c0a06 <__aeabi_dmul+0x1a6>
   c0a16:	ea41 0106 	orr.w	r1, r1, r6
   c0a1a:	f095 0f00 	teq	r5, #0
   c0a1e:	bf18      	it	ne
   c0a20:	4770      	bxne	lr
   c0a22:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c0a26:	0052      	lsls	r2, r2, #1
   c0a28:	eb43 0303 	adc.w	r3, r3, r3
   c0a2c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c0a30:	bf08      	it	eq
   c0a32:	3d01      	subeq	r5, #1
   c0a34:	d0f7      	beq.n	c0a26 <__aeabi_dmul+0x1c6>
   c0a36:	ea43 0306 	orr.w	r3, r3, r6
   c0a3a:	4770      	bx	lr
   c0a3c:	ea94 0f0c 	teq	r4, ip
   c0a40:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c0a44:	bf18      	it	ne
   c0a46:	ea95 0f0c 	teqne	r5, ip
   c0a4a:	d00c      	beq.n	c0a66 <__aeabi_dmul+0x206>
   c0a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c0a50:	bf18      	it	ne
   c0a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0a56:	d1d1      	bne.n	c09fc <__aeabi_dmul+0x19c>
   c0a58:	ea81 0103 	eor.w	r1, r1, r3
   c0a5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0a60:	f04f 0000 	mov.w	r0, #0
   c0a64:	bd70      	pop	{r4, r5, r6, pc}
   c0a66:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c0a6a:	bf06      	itte	eq
   c0a6c:	4610      	moveq	r0, r2
   c0a6e:	4619      	moveq	r1, r3
   c0a70:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0a74:	d019      	beq.n	c0aaa <__aeabi_dmul+0x24a>
   c0a76:	ea94 0f0c 	teq	r4, ip
   c0a7a:	d102      	bne.n	c0a82 <__aeabi_dmul+0x222>
   c0a7c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c0a80:	d113      	bne.n	c0aaa <__aeabi_dmul+0x24a>
   c0a82:	ea95 0f0c 	teq	r5, ip
   c0a86:	d105      	bne.n	c0a94 <__aeabi_dmul+0x234>
   c0a88:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c0a8c:	bf1c      	itt	ne
   c0a8e:	4610      	movne	r0, r2
   c0a90:	4619      	movne	r1, r3
   c0a92:	d10a      	bne.n	c0aaa <__aeabi_dmul+0x24a>
   c0a94:	ea81 0103 	eor.w	r1, r1, r3
   c0a98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0a9c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c0aa0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c0aa4:	f04f 0000 	mov.w	r0, #0
   c0aa8:	bd70      	pop	{r4, r5, r6, pc}
   c0aaa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c0aae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c0ab2:	bd70      	pop	{r4, r5, r6, pc}

000c0ab4 <__aeabi_ddiv>:
   c0ab4:	b570      	push	{r4, r5, r6, lr}
   c0ab6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c0aba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c0abe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c0ac2:	bf1d      	ittte	ne
   c0ac4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c0ac8:	ea94 0f0c 	teqne	r4, ip
   c0acc:	ea95 0f0c 	teqne	r5, ip
   c0ad0:	f000 f8a7 	bleq	c0c22 <__aeabi_ddiv+0x16e>
   c0ad4:	eba4 0405 	sub.w	r4, r4, r5
   c0ad8:	ea81 0e03 	eor.w	lr, r1, r3
   c0adc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c0ae0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c0ae4:	f000 8088 	beq.w	c0bf8 <__aeabi_ddiv+0x144>
   c0ae8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c0aec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c0af0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c0af4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c0af8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c0afc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c0b00:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c0b04:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c0b08:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c0b0c:	429d      	cmp	r5, r3
   c0b0e:	bf08      	it	eq
   c0b10:	4296      	cmpeq	r6, r2
   c0b12:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c0b16:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c0b1a:	d202      	bcs.n	c0b22 <__aeabi_ddiv+0x6e>
   c0b1c:	085b      	lsrs	r3, r3, #1
   c0b1e:	ea4f 0232 	mov.w	r2, r2, rrx
   c0b22:	1ab6      	subs	r6, r6, r2
   c0b24:	eb65 0503 	sbc.w	r5, r5, r3
   c0b28:	085b      	lsrs	r3, r3, #1
   c0b2a:	ea4f 0232 	mov.w	r2, r2, rrx
   c0b2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c0b32:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c0b36:	ebb6 0e02 	subs.w	lr, r6, r2
   c0b3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0b3e:	bf22      	ittt	cs
   c0b40:	1ab6      	subcs	r6, r6, r2
   c0b42:	4675      	movcs	r5, lr
   c0b44:	ea40 000c 	orrcs.w	r0, r0, ip
   c0b48:	085b      	lsrs	r3, r3, #1
   c0b4a:	ea4f 0232 	mov.w	r2, r2, rrx
   c0b4e:	ebb6 0e02 	subs.w	lr, r6, r2
   c0b52:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0b56:	bf22      	ittt	cs
   c0b58:	1ab6      	subcs	r6, r6, r2
   c0b5a:	4675      	movcs	r5, lr
   c0b5c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c0b60:	085b      	lsrs	r3, r3, #1
   c0b62:	ea4f 0232 	mov.w	r2, r2, rrx
   c0b66:	ebb6 0e02 	subs.w	lr, r6, r2
   c0b6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0b6e:	bf22      	ittt	cs
   c0b70:	1ab6      	subcs	r6, r6, r2
   c0b72:	4675      	movcs	r5, lr
   c0b74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c0b78:	085b      	lsrs	r3, r3, #1
   c0b7a:	ea4f 0232 	mov.w	r2, r2, rrx
   c0b7e:	ebb6 0e02 	subs.w	lr, r6, r2
   c0b82:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0b86:	bf22      	ittt	cs
   c0b88:	1ab6      	subcs	r6, r6, r2
   c0b8a:	4675      	movcs	r5, lr
   c0b8c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c0b90:	ea55 0e06 	orrs.w	lr, r5, r6
   c0b94:	d018      	beq.n	c0bc8 <__aeabi_ddiv+0x114>
   c0b96:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c0b9a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c0b9e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c0ba2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c0ba6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c0baa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c0bae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c0bb2:	d1c0      	bne.n	c0b36 <__aeabi_ddiv+0x82>
   c0bb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c0bb8:	d10b      	bne.n	c0bd2 <__aeabi_ddiv+0x11e>
   c0bba:	ea41 0100 	orr.w	r1, r1, r0
   c0bbe:	f04f 0000 	mov.w	r0, #0
   c0bc2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c0bc6:	e7b6      	b.n	c0b36 <__aeabi_ddiv+0x82>
   c0bc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c0bcc:	bf04      	itt	eq
   c0bce:	4301      	orreq	r1, r0
   c0bd0:	2000      	moveq	r0, #0
   c0bd2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c0bd6:	bf88      	it	hi
   c0bd8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c0bdc:	f63f aeaf 	bhi.w	c093e <__aeabi_dmul+0xde>
   c0be0:	ebb5 0c03 	subs.w	ip, r5, r3
   c0be4:	bf04      	itt	eq
   c0be6:	ebb6 0c02 	subseq.w	ip, r6, r2
   c0bea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c0bee:	f150 0000 	adcs.w	r0, r0, #0
   c0bf2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c0bf6:	bd70      	pop	{r4, r5, r6, pc}
   c0bf8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c0bfc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c0c00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c0c04:	bfc2      	ittt	gt
   c0c06:	ebd4 050c 	rsbsgt	r5, r4, ip
   c0c0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c0c0e:	bd70      	popgt	{r4, r5, r6, pc}
   c0c10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0c14:	f04f 0e00 	mov.w	lr, #0
   c0c18:	3c01      	subs	r4, #1
   c0c1a:	e690      	b.n	c093e <__aeabi_dmul+0xde>
   c0c1c:	ea45 0e06 	orr.w	lr, r5, r6
   c0c20:	e68d      	b.n	c093e <__aeabi_dmul+0xde>
   c0c22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c0c26:	ea94 0f0c 	teq	r4, ip
   c0c2a:	bf08      	it	eq
   c0c2c:	ea95 0f0c 	teqeq	r5, ip
   c0c30:	f43f af3b 	beq.w	c0aaa <__aeabi_dmul+0x24a>
   c0c34:	ea94 0f0c 	teq	r4, ip
   c0c38:	d10a      	bne.n	c0c50 <__aeabi_ddiv+0x19c>
   c0c3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c0c3e:	f47f af34 	bne.w	c0aaa <__aeabi_dmul+0x24a>
   c0c42:	ea95 0f0c 	teq	r5, ip
   c0c46:	f47f af25 	bne.w	c0a94 <__aeabi_dmul+0x234>
   c0c4a:	4610      	mov	r0, r2
   c0c4c:	4619      	mov	r1, r3
   c0c4e:	e72c      	b.n	c0aaa <__aeabi_dmul+0x24a>
   c0c50:	ea95 0f0c 	teq	r5, ip
   c0c54:	d106      	bne.n	c0c64 <__aeabi_ddiv+0x1b0>
   c0c56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c0c5a:	f43f aefd 	beq.w	c0a58 <__aeabi_dmul+0x1f8>
   c0c5e:	4610      	mov	r0, r2
   c0c60:	4619      	mov	r1, r3
   c0c62:	e722      	b.n	c0aaa <__aeabi_dmul+0x24a>
   c0c64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c0c68:	bf18      	it	ne
   c0c6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0c6e:	f47f aec5 	bne.w	c09fc <__aeabi_dmul+0x19c>
   c0c72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c0c76:	f47f af0d 	bne.w	c0a94 <__aeabi_dmul+0x234>
   c0c7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c0c7e:	f47f aeeb 	bne.w	c0a58 <__aeabi_dmul+0x1f8>
   c0c82:	e712      	b.n	c0aaa <__aeabi_dmul+0x24a>

000c0c84 <__gedf2>:
   c0c84:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c0c88:	e006      	b.n	c0c98 <__cmpdf2+0x4>
   c0c8a:	bf00      	nop

000c0c8c <__ledf2>:
   c0c8c:	f04f 0c01 	mov.w	ip, #1
   c0c90:	e002      	b.n	c0c98 <__cmpdf2+0x4>
   c0c92:	bf00      	nop

000c0c94 <__cmpdf2>:
   c0c94:	f04f 0c01 	mov.w	ip, #1
   c0c98:	f84d cd04 	str.w	ip, [sp, #-4]!
   c0c9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c0ca0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0ca4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c0ca8:	bf18      	it	ne
   c0caa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c0cae:	d01b      	beq.n	c0ce8 <__cmpdf2+0x54>
   c0cb0:	b001      	add	sp, #4
   c0cb2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c0cb6:	bf0c      	ite	eq
   c0cb8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c0cbc:	ea91 0f03 	teqne	r1, r3
   c0cc0:	bf02      	ittt	eq
   c0cc2:	ea90 0f02 	teqeq	r0, r2
   c0cc6:	2000      	moveq	r0, #0
   c0cc8:	4770      	bxeq	lr
   c0cca:	f110 0f00 	cmn.w	r0, #0
   c0cce:	ea91 0f03 	teq	r1, r3
   c0cd2:	bf58      	it	pl
   c0cd4:	4299      	cmppl	r1, r3
   c0cd6:	bf08      	it	eq
   c0cd8:	4290      	cmpeq	r0, r2
   c0cda:	bf2c      	ite	cs
   c0cdc:	17d8      	asrcs	r0, r3, #31
   c0cde:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c0ce2:	f040 0001 	orr.w	r0, r0, #1
   c0ce6:	4770      	bx	lr
   c0ce8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c0cec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0cf0:	d102      	bne.n	c0cf8 <__cmpdf2+0x64>
   c0cf2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c0cf6:	d107      	bne.n	c0d08 <__cmpdf2+0x74>
   c0cf8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c0cfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0d00:	d1d6      	bne.n	c0cb0 <__cmpdf2+0x1c>
   c0d02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c0d06:	d0d3      	beq.n	c0cb0 <__cmpdf2+0x1c>
   c0d08:	f85d 0b04 	ldr.w	r0, [sp], #4
   c0d0c:	4770      	bx	lr
   c0d0e:	bf00      	nop

000c0d10 <__aeabi_cdrcmple>:
   c0d10:	4684      	mov	ip, r0
   c0d12:	4610      	mov	r0, r2
   c0d14:	4662      	mov	r2, ip
   c0d16:	468c      	mov	ip, r1
   c0d18:	4619      	mov	r1, r3
   c0d1a:	4663      	mov	r3, ip
   c0d1c:	e000      	b.n	c0d20 <__aeabi_cdcmpeq>
   c0d1e:	bf00      	nop

000c0d20 <__aeabi_cdcmpeq>:
   c0d20:	b501      	push	{r0, lr}
   c0d22:	f7ff ffb7 	bl	c0c94 <__cmpdf2>
   c0d26:	2800      	cmp	r0, #0
   c0d28:	bf48      	it	mi
   c0d2a:	f110 0f00 	cmnmi.w	r0, #0
   c0d2e:	bd01      	pop	{r0, pc}

000c0d30 <__aeabi_dcmpeq>:
   c0d30:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0d34:	f7ff fff4 	bl	c0d20 <__aeabi_cdcmpeq>
   c0d38:	bf0c      	ite	eq
   c0d3a:	2001      	moveq	r0, #1
   c0d3c:	2000      	movne	r0, #0
   c0d3e:	f85d fb08 	ldr.w	pc, [sp], #8
   c0d42:	bf00      	nop

000c0d44 <__aeabi_dcmplt>:
   c0d44:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0d48:	f7ff ffea 	bl	c0d20 <__aeabi_cdcmpeq>
   c0d4c:	bf34      	ite	cc
   c0d4e:	2001      	movcc	r0, #1
   c0d50:	2000      	movcs	r0, #0
   c0d52:	f85d fb08 	ldr.w	pc, [sp], #8
   c0d56:	bf00      	nop

000c0d58 <__aeabi_dcmple>:
   c0d58:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0d5c:	f7ff ffe0 	bl	c0d20 <__aeabi_cdcmpeq>
   c0d60:	bf94      	ite	ls
   c0d62:	2001      	movls	r0, #1
   c0d64:	2000      	movhi	r0, #0
   c0d66:	f85d fb08 	ldr.w	pc, [sp], #8
   c0d6a:	bf00      	nop

000c0d6c <__aeabi_dcmpge>:
   c0d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0d70:	f7ff ffce 	bl	c0d10 <__aeabi_cdrcmple>
   c0d74:	bf94      	ite	ls
   c0d76:	2001      	movls	r0, #1
   c0d78:	2000      	movhi	r0, #0
   c0d7a:	f85d fb08 	ldr.w	pc, [sp], #8
   c0d7e:	bf00      	nop

000c0d80 <__aeabi_dcmpgt>:
   c0d80:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0d84:	f7ff ffc4 	bl	c0d10 <__aeabi_cdrcmple>
   c0d88:	bf34      	ite	cc
   c0d8a:	2001      	movcc	r0, #1
   c0d8c:	2000      	movcs	r0, #0
   c0d8e:	f85d fb08 	ldr.w	pc, [sp], #8
   c0d92:	bf00      	nop

000c0d94 <__aeabi_dcmpun>:
   c0d94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c0d98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0d9c:	d102      	bne.n	c0da4 <__aeabi_dcmpun+0x10>
   c0d9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c0da2:	d10a      	bne.n	c0dba <__aeabi_dcmpun+0x26>
   c0da4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c0da8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0dac:	d102      	bne.n	c0db4 <__aeabi_dcmpun+0x20>
   c0dae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c0db2:	d102      	bne.n	c0dba <__aeabi_dcmpun+0x26>
   c0db4:	f04f 0000 	mov.w	r0, #0
   c0db8:	4770      	bx	lr
   c0dba:	f04f 0001 	mov.w	r0, #1
   c0dbe:	4770      	bx	lr

000c0dc0 <__aeabi_d2iz>:
   c0dc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c0dc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c0dc8:	d215      	bcs.n	c0df6 <__aeabi_d2iz+0x36>
   c0dca:	d511      	bpl.n	c0df0 <__aeabi_d2iz+0x30>
   c0dcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c0dd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c0dd4:	d912      	bls.n	c0dfc <__aeabi_d2iz+0x3c>
   c0dd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c0dda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c0dde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c0de2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c0de6:	fa23 f002 	lsr.w	r0, r3, r2
   c0dea:	bf18      	it	ne
   c0dec:	4240      	negne	r0, r0
   c0dee:	4770      	bx	lr
   c0df0:	f04f 0000 	mov.w	r0, #0
   c0df4:	4770      	bx	lr
   c0df6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c0dfa:	d105      	bne.n	c0e08 <__aeabi_d2iz+0x48>
   c0dfc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c0e00:	bf08      	it	eq
   c0e02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c0e06:	4770      	bx	lr
   c0e08:	f04f 0000 	mov.w	r0, #0
   c0e0c:	4770      	bx	lr
   c0e0e:	bf00      	nop

000c0e10 <__aeabi_d2uiz>:
   c0e10:	004a      	lsls	r2, r1, #1
   c0e12:	d211      	bcs.n	c0e38 <__aeabi_d2uiz+0x28>
   c0e14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c0e18:	d211      	bcs.n	c0e3e <__aeabi_d2uiz+0x2e>
   c0e1a:	d50d      	bpl.n	c0e38 <__aeabi_d2uiz+0x28>
   c0e1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c0e20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c0e24:	d40e      	bmi.n	c0e44 <__aeabi_d2uiz+0x34>
   c0e26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c0e2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c0e2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c0e32:	fa23 f002 	lsr.w	r0, r3, r2
   c0e36:	4770      	bx	lr
   c0e38:	f04f 0000 	mov.w	r0, #0
   c0e3c:	4770      	bx	lr
   c0e3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c0e42:	d102      	bne.n	c0e4a <__aeabi_d2uiz+0x3a>
   c0e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c0e48:	4770      	bx	lr
   c0e4a:	f04f 0000 	mov.w	r0, #0
   c0e4e:	4770      	bx	lr

000c0e50 <__aeabi_d2f>:
   c0e50:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c0e54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c0e58:	bf24      	itt	cs
   c0e5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c0e5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c0e62:	d90d      	bls.n	c0e80 <__aeabi_d2f+0x30>
   c0e64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c0e68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c0e6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c0e70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c0e74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c0e78:	bf08      	it	eq
   c0e7a:	f020 0001 	biceq.w	r0, r0, #1
   c0e7e:	4770      	bx	lr
   c0e80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c0e84:	d121      	bne.n	c0eca <__aeabi_d2f+0x7a>
   c0e86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c0e8a:	bfbc      	itt	lt
   c0e8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c0e90:	4770      	bxlt	lr
   c0e92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0e96:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c0e9a:	f1c2 0218 	rsb	r2, r2, #24
   c0e9e:	f1c2 0c20 	rsb	ip, r2, #32
   c0ea2:	fa10 f30c 	lsls.w	r3, r0, ip
   c0ea6:	fa20 f002 	lsr.w	r0, r0, r2
   c0eaa:	bf18      	it	ne
   c0eac:	f040 0001 	orrne.w	r0, r0, #1
   c0eb0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c0eb4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c0eb8:	fa03 fc0c 	lsl.w	ip, r3, ip
   c0ebc:	ea40 000c 	orr.w	r0, r0, ip
   c0ec0:	fa23 f302 	lsr.w	r3, r3, r2
   c0ec4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c0ec8:	e7cc      	b.n	c0e64 <__aeabi_d2f+0x14>
   c0eca:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c0ece:	d107      	bne.n	c0ee0 <__aeabi_d2f+0x90>
   c0ed0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c0ed4:	bf1e      	ittt	ne
   c0ed6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c0eda:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c0ede:	4770      	bxne	lr
   c0ee0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c0ee4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c0ee8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c0eec:	4770      	bx	lr
   c0eee:	bf00      	nop

000c0ef0 <__aeabi_d2ulz>:
   c0ef0:	b5d0      	push	{r4, r6, r7, lr}
   c0ef2:	4b0c      	ldr	r3, [pc, #48]	; (c0f24 <__aeabi_d2ulz+0x34>)
   c0ef4:	2200      	movs	r2, #0
   c0ef6:	4606      	mov	r6, r0
   c0ef8:	460f      	mov	r7, r1
   c0efa:	f7ff fcb1 	bl	c0860 <__aeabi_dmul>
   c0efe:	f7ff ff87 	bl	c0e10 <__aeabi_d2uiz>
   c0f02:	4604      	mov	r4, r0
   c0f04:	f7ff fc32 	bl	c076c <__aeabi_ui2d>
   c0f08:	4b07      	ldr	r3, [pc, #28]	; (c0f28 <__aeabi_d2ulz+0x38>)
   c0f0a:	2200      	movs	r2, #0
   c0f0c:	f7ff fca8 	bl	c0860 <__aeabi_dmul>
   c0f10:	4602      	mov	r2, r0
   c0f12:	460b      	mov	r3, r1
   c0f14:	4630      	mov	r0, r6
   c0f16:	4639      	mov	r1, r7
   c0f18:	f7ff faea 	bl	c04f0 <__aeabi_dsub>
   c0f1c:	f7ff ff78 	bl	c0e10 <__aeabi_d2uiz>
   c0f20:	4621      	mov	r1, r4
   c0f22:	bdd0      	pop	{r4, r6, r7, pc}
   c0f24:	3df00000 	.word	0x3df00000
   c0f28:	41f00000 	.word	0x41f00000

000c0f2c <asctime_r>:
   c0f2c:	b510      	push	{r4, lr}
   c0f2e:	460c      	mov	r4, r1
   c0f30:	6941      	ldr	r1, [r0, #20]
   c0f32:	6903      	ldr	r3, [r0, #16]
   c0f34:	6982      	ldr	r2, [r0, #24]
   c0f36:	b086      	sub	sp, #24
   c0f38:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   c0f3c:	9104      	str	r1, [sp, #16]
   c0f3e:	6801      	ldr	r1, [r0, #0]
   c0f40:	9103      	str	r1, [sp, #12]
   c0f42:	6841      	ldr	r1, [r0, #4]
   c0f44:	9102      	str	r1, [sp, #8]
   c0f46:	6881      	ldr	r1, [r0, #8]
   c0f48:	9101      	str	r1, [sp, #4]
   c0f4a:	68c1      	ldr	r1, [r0, #12]
   c0f4c:	9100      	str	r1, [sp, #0]
   c0f4e:	4907      	ldr	r1, [pc, #28]	; (c0f6c <asctime_r+0x40>)
   c0f50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   c0f54:	440b      	add	r3, r1
   c0f56:	4906      	ldr	r1, [pc, #24]	; (c0f70 <asctime_r+0x44>)
   c0f58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   c0f5c:	440a      	add	r2, r1
   c0f5e:	4620      	mov	r0, r4
   c0f60:	4904      	ldr	r1, [pc, #16]	; (c0f74 <asctime_r+0x48>)
   c0f62:	f7fc f87d 	bl	bd060 <siprintf>
   c0f66:	4620      	mov	r0, r4
   c0f68:	b006      	add	sp, #24
   c0f6a:	bd10      	pop	{r4, pc}
   c0f6c:	000c519a 	.word	0x000c519a
   c0f70:	000c5185 	.word	0x000c5185
   c0f74:	000c5165 	.word	0x000c5165

000c0f78 <atexit>:
   c0f78:	2300      	movs	r3, #0
   c0f7a:	4601      	mov	r1, r0
   c0f7c:	461a      	mov	r2, r3
   c0f7e:	4618      	mov	r0, r3
   c0f80:	f001 b900 	b.w	c2184 <__register_exitproc>

000c0f84 <gmtime>:
   c0f84:	b538      	push	{r3, r4, r5, lr}
   c0f86:	4b0b      	ldr	r3, [pc, #44]	; (c0fb4 <gmtime+0x30>)
   c0f88:	681d      	ldr	r5, [r3, #0]
   c0f8a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   c0f8c:	4604      	mov	r4, r0
   c0f8e:	b953      	cbnz	r3, c0fa6 <gmtime+0x22>
   c0f90:	2024      	movs	r0, #36	; 0x24
   c0f92:	f7fc f84d 	bl	bd030 <malloc>
   c0f96:	4602      	mov	r2, r0
   c0f98:	63e8      	str	r0, [r5, #60]	; 0x3c
   c0f9a:	b920      	cbnz	r0, c0fa6 <gmtime+0x22>
   c0f9c:	4b06      	ldr	r3, [pc, #24]	; (c0fb8 <gmtime+0x34>)
   c0f9e:	4807      	ldr	r0, [pc, #28]	; (c0fbc <gmtime+0x38>)
   c0fa0:	2139      	movs	r1, #57	; 0x39
   c0fa2:	f7fc f895 	bl	bd0d0 <__assert_func>
   c0fa6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   c0fa8:	4620      	mov	r0, r4
   c0faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c0fae:	f7fc b8af 	b.w	bd110 <gmtime_r>
   c0fb2:	bf00      	nop
   c0fb4:	2003d69c 	.word	0x2003d69c
   c0fb8:	000c51be 	.word	0x000c51be
   c0fbc:	000c51d5 	.word	0x000c51d5

000c0fc0 <isprint>:
   c0fc0:	4b02      	ldr	r3, [pc, #8]	; (c0fcc <isprint+0xc>)
   c0fc2:	4418      	add	r0, r3
   c0fc4:	7840      	ldrb	r0, [r0, #1]
   c0fc6:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c0fca:	4770      	bx	lr
   c0fcc:	000c52e0 	.word	0x000c52e0

000c0fd0 <memcpy>:
   c0fd0:	440a      	add	r2, r1
   c0fd2:	4291      	cmp	r1, r2
   c0fd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c0fd8:	d100      	bne.n	c0fdc <memcpy+0xc>
   c0fda:	4770      	bx	lr
   c0fdc:	b510      	push	{r4, lr}
   c0fde:	f811 4b01 	ldrb.w	r4, [r1], #1
   c0fe2:	f803 4f01 	strb.w	r4, [r3, #1]!
   c0fe6:	4291      	cmp	r1, r2
   c0fe8:	d1f9      	bne.n	c0fde <memcpy+0xe>
   c0fea:	bd10      	pop	{r4, pc}

000c0fec <memmove>:
   c0fec:	4288      	cmp	r0, r1
   c0fee:	b510      	push	{r4, lr}
   c0ff0:	eb01 0402 	add.w	r4, r1, r2
   c0ff4:	d902      	bls.n	c0ffc <memmove+0x10>
   c0ff6:	4284      	cmp	r4, r0
   c0ff8:	4623      	mov	r3, r4
   c0ffa:	d807      	bhi.n	c100c <memmove+0x20>
   c0ffc:	1e43      	subs	r3, r0, #1
   c0ffe:	42a1      	cmp	r1, r4
   c1000:	d008      	beq.n	c1014 <memmove+0x28>
   c1002:	f811 2b01 	ldrb.w	r2, [r1], #1
   c1006:	f803 2f01 	strb.w	r2, [r3, #1]!
   c100a:	e7f8      	b.n	c0ffe <memmove+0x12>
   c100c:	4402      	add	r2, r0
   c100e:	4601      	mov	r1, r0
   c1010:	428a      	cmp	r2, r1
   c1012:	d100      	bne.n	c1016 <memmove+0x2a>
   c1014:	bd10      	pop	{r4, pc}
   c1016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c101a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c101e:	e7f7      	b.n	c1010 <memmove+0x24>

000c1020 <memset>:
   c1020:	4402      	add	r2, r0
   c1022:	4603      	mov	r3, r0
   c1024:	4293      	cmp	r3, r2
   c1026:	d100      	bne.n	c102a <memset+0xa>
   c1028:	4770      	bx	lr
   c102a:	f803 1b01 	strb.w	r1, [r3], #1
   c102e:	e7f9      	b.n	c1024 <memset+0x4>

000c1030 <_calloc_r>:
   c1030:	b513      	push	{r0, r1, r4, lr}
   c1032:	434a      	muls	r2, r1
   c1034:	4611      	mov	r1, r2
   c1036:	9201      	str	r2, [sp, #4]
   c1038:	f7fc f83a 	bl	bd0b0 <_malloc_r>
   c103c:	4604      	mov	r4, r0
   c103e:	b118      	cbz	r0, c1048 <_calloc_r+0x18>
   c1040:	9a01      	ldr	r2, [sp, #4]
   c1042:	2100      	movs	r1, #0
   c1044:	f7ff ffec 	bl	c1020 <memset>
   c1048:	4620      	mov	r0, r4
   c104a:	b002      	add	sp, #8
   c104c:	bd10      	pop	{r4, pc}
	...

000c1050 <srand>:
   c1050:	b538      	push	{r3, r4, r5, lr}
   c1052:	4b10      	ldr	r3, [pc, #64]	; (c1094 <srand+0x44>)
   c1054:	681d      	ldr	r5, [r3, #0]
   c1056:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c1058:	4604      	mov	r4, r0
   c105a:	b9b3      	cbnz	r3, c108a <srand+0x3a>
   c105c:	2018      	movs	r0, #24
   c105e:	f7fb ffe7 	bl	bd030 <malloc>
   c1062:	4602      	mov	r2, r0
   c1064:	63a8      	str	r0, [r5, #56]	; 0x38
   c1066:	b920      	cbnz	r0, c1072 <srand+0x22>
   c1068:	4b0b      	ldr	r3, [pc, #44]	; (c1098 <srand+0x48>)
   c106a:	480c      	ldr	r0, [pc, #48]	; (c109c <srand+0x4c>)
   c106c:	2142      	movs	r1, #66	; 0x42
   c106e:	f7fc f82f 	bl	bd0d0 <__assert_func>
   c1072:	490b      	ldr	r1, [pc, #44]	; (c10a0 <srand+0x50>)
   c1074:	4b0b      	ldr	r3, [pc, #44]	; (c10a4 <srand+0x54>)
   c1076:	e9c0 1300 	strd	r1, r3, [r0]
   c107a:	4b0b      	ldr	r3, [pc, #44]	; (c10a8 <srand+0x58>)
   c107c:	6083      	str	r3, [r0, #8]
   c107e:	230b      	movs	r3, #11
   c1080:	8183      	strh	r3, [r0, #12]
   c1082:	2100      	movs	r1, #0
   c1084:	2001      	movs	r0, #1
   c1086:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c108a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c108c:	2200      	movs	r2, #0
   c108e:	611c      	str	r4, [r3, #16]
   c1090:	615a      	str	r2, [r3, #20]
   c1092:	bd38      	pop	{r3, r4, r5, pc}
   c1094:	2003d69c 	.word	0x2003d69c
   c1098:	000c51be 	.word	0x000c51be
   c109c:	000c522e 	.word	0x000c522e
   c10a0:	abcd330e 	.word	0xabcd330e
   c10a4:	e66d1234 	.word	0xe66d1234
   c10a8:	0005deec 	.word	0x0005deec

000c10ac <rand>:
   c10ac:	4b16      	ldr	r3, [pc, #88]	; (c1108 <rand+0x5c>)
   c10ae:	b510      	push	{r4, lr}
   c10b0:	681c      	ldr	r4, [r3, #0]
   c10b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   c10b4:	b9b3      	cbnz	r3, c10e4 <rand+0x38>
   c10b6:	2018      	movs	r0, #24
   c10b8:	f7fb ffba 	bl	bd030 <malloc>
   c10bc:	63a0      	str	r0, [r4, #56]	; 0x38
   c10be:	b928      	cbnz	r0, c10cc <rand+0x20>
   c10c0:	4602      	mov	r2, r0
   c10c2:	4b12      	ldr	r3, [pc, #72]	; (c110c <rand+0x60>)
   c10c4:	4812      	ldr	r0, [pc, #72]	; (c1110 <rand+0x64>)
   c10c6:	214e      	movs	r1, #78	; 0x4e
   c10c8:	f7fc f802 	bl	bd0d0 <__assert_func>
   c10cc:	4a11      	ldr	r2, [pc, #68]	; (c1114 <rand+0x68>)
   c10ce:	4b12      	ldr	r3, [pc, #72]	; (c1118 <rand+0x6c>)
   c10d0:	e9c0 2300 	strd	r2, r3, [r0]
   c10d4:	4b11      	ldr	r3, [pc, #68]	; (c111c <rand+0x70>)
   c10d6:	6083      	str	r3, [r0, #8]
   c10d8:	230b      	movs	r3, #11
   c10da:	8183      	strh	r3, [r0, #12]
   c10dc:	2201      	movs	r2, #1
   c10de:	2300      	movs	r3, #0
   c10e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   c10e4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   c10e6:	4a0e      	ldr	r2, [pc, #56]	; (c1120 <rand+0x74>)
   c10e8:	6920      	ldr	r0, [r4, #16]
   c10ea:	6963      	ldr	r3, [r4, #20]
   c10ec:	490d      	ldr	r1, [pc, #52]	; (c1124 <rand+0x78>)
   c10ee:	4342      	muls	r2, r0
   c10f0:	fb01 2203 	mla	r2, r1, r3, r2
   c10f4:	fba0 0101 	umull	r0, r1, r0, r1
   c10f8:	1c43      	adds	r3, r0, #1
   c10fa:	eb42 0001 	adc.w	r0, r2, r1
   c10fe:	e9c4 3004 	strd	r3, r0, [r4, #16]
   c1102:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   c1106:	bd10      	pop	{r4, pc}
   c1108:	2003d69c 	.word	0x2003d69c
   c110c:	000c51be 	.word	0x000c51be
   c1110:	000c522e 	.word	0x000c522e
   c1114:	abcd330e 	.word	0xabcd330e
   c1118:	e66d1234 	.word	0xe66d1234
   c111c:	0005deec 	.word	0x0005deec
   c1120:	5851f42d 	.word	0x5851f42d
   c1124:	4c957f2d 	.word	0x4c957f2d

000c1128 <strchr>:
   c1128:	b2c9      	uxtb	r1, r1
   c112a:	4603      	mov	r3, r0
   c112c:	f810 2b01 	ldrb.w	r2, [r0], #1
   c1130:	b11a      	cbz	r2, c113a <strchr+0x12>
   c1132:	428a      	cmp	r2, r1
   c1134:	d1f9      	bne.n	c112a <strchr+0x2>
   c1136:	4618      	mov	r0, r3
   c1138:	4770      	bx	lr
   c113a:	2900      	cmp	r1, #0
   c113c:	bf18      	it	ne
   c113e:	2300      	movne	r3, #0
   c1140:	e7f9      	b.n	c1136 <strchr+0xe>

000c1142 <strchrnul>:
   c1142:	b510      	push	{r4, lr}
   c1144:	4604      	mov	r4, r0
   c1146:	f7ff ffef 	bl	c1128 <strchr>
   c114a:	b918      	cbnz	r0, c1154 <strchrnul+0x12>
   c114c:	4620      	mov	r0, r4
   c114e:	f000 f832 	bl	c11b6 <strlen>
   c1152:	4420      	add	r0, r4
   c1154:	bd10      	pop	{r4, pc}

000c1156 <strcmp>:
   c1156:	f810 2b01 	ldrb.w	r2, [r0], #1
   c115a:	f811 3b01 	ldrb.w	r3, [r1], #1
   c115e:	2a01      	cmp	r2, #1
   c1160:	bf28      	it	cs
   c1162:	429a      	cmpcs	r2, r3
   c1164:	d0f7      	beq.n	c1156 <strcmp>
   c1166:	1ad0      	subs	r0, r2, r3
   c1168:	4770      	bx	lr

000c116a <strcpy>:
   c116a:	4603      	mov	r3, r0
   c116c:	f811 2b01 	ldrb.w	r2, [r1], #1
   c1170:	f803 2b01 	strb.w	r2, [r3], #1
   c1174:	2a00      	cmp	r2, #0
   c1176:	d1f9      	bne.n	c116c <strcpy+0x2>
   c1178:	4770      	bx	lr
	...

000c117c <strdup>:
   c117c:	4b02      	ldr	r3, [pc, #8]	; (c1188 <strdup+0xc>)
   c117e:	4601      	mov	r1, r0
   c1180:	6818      	ldr	r0, [r3, #0]
   c1182:	f000 b803 	b.w	c118c <_strdup_r>
   c1186:	bf00      	nop
   c1188:	2003d69c 	.word	0x2003d69c

000c118c <_strdup_r>:
   c118c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c118e:	4604      	mov	r4, r0
   c1190:	4608      	mov	r0, r1
   c1192:	460d      	mov	r5, r1
   c1194:	f000 f80f 	bl	c11b6 <strlen>
   c1198:	1c42      	adds	r2, r0, #1
   c119a:	4611      	mov	r1, r2
   c119c:	4620      	mov	r0, r4
   c119e:	9201      	str	r2, [sp, #4]
   c11a0:	f7fb ff86 	bl	bd0b0 <_malloc_r>
   c11a4:	4604      	mov	r4, r0
   c11a6:	b118      	cbz	r0, c11b0 <_strdup_r+0x24>
   c11a8:	9a01      	ldr	r2, [sp, #4]
   c11aa:	4629      	mov	r1, r5
   c11ac:	f7ff ff10 	bl	c0fd0 <memcpy>
   c11b0:	4620      	mov	r0, r4
   c11b2:	b003      	add	sp, #12
   c11b4:	bd30      	pop	{r4, r5, pc}

000c11b6 <strlen>:
   c11b6:	4603      	mov	r3, r0
   c11b8:	f813 2b01 	ldrb.w	r2, [r3], #1
   c11bc:	2a00      	cmp	r2, #0
   c11be:	d1fb      	bne.n	c11b8 <strlen+0x2>
   c11c0:	1a18      	subs	r0, r3, r0
   c11c2:	3801      	subs	r0, #1
   c11c4:	4770      	bx	lr

000c11c6 <strncmp>:
   c11c6:	b510      	push	{r4, lr}
   c11c8:	b17a      	cbz	r2, c11ea <strncmp+0x24>
   c11ca:	4603      	mov	r3, r0
   c11cc:	3901      	subs	r1, #1
   c11ce:	1884      	adds	r4, r0, r2
   c11d0:	f813 0b01 	ldrb.w	r0, [r3], #1
   c11d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c11d8:	4290      	cmp	r0, r2
   c11da:	d101      	bne.n	c11e0 <strncmp+0x1a>
   c11dc:	42a3      	cmp	r3, r4
   c11de:	d101      	bne.n	c11e4 <strncmp+0x1e>
   c11e0:	1a80      	subs	r0, r0, r2
   c11e2:	bd10      	pop	{r4, pc}
   c11e4:	2800      	cmp	r0, #0
   c11e6:	d1f3      	bne.n	c11d0 <strncmp+0xa>
   c11e8:	e7fa      	b.n	c11e0 <strncmp+0x1a>
   c11ea:	4610      	mov	r0, r2
   c11ec:	e7f9      	b.n	c11e2 <strncmp+0x1c>

000c11ee <strncpy>:
   c11ee:	b510      	push	{r4, lr}
   c11f0:	3901      	subs	r1, #1
   c11f2:	4603      	mov	r3, r0
   c11f4:	b132      	cbz	r2, c1204 <strncpy+0x16>
   c11f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c11fa:	f803 4b01 	strb.w	r4, [r3], #1
   c11fe:	3a01      	subs	r2, #1
   c1200:	2c00      	cmp	r4, #0
   c1202:	d1f7      	bne.n	c11f4 <strncpy+0x6>
   c1204:	441a      	add	r2, r3
   c1206:	2100      	movs	r1, #0
   c1208:	4293      	cmp	r3, r2
   c120a:	d100      	bne.n	c120e <strncpy+0x20>
   c120c:	bd10      	pop	{r4, pc}
   c120e:	f803 1b01 	strb.w	r1, [r3], #1
   c1212:	e7f9      	b.n	c1208 <strncpy+0x1a>

000c1214 <strrchr>:
   c1214:	b538      	push	{r3, r4, r5, lr}
   c1216:	4603      	mov	r3, r0
   c1218:	460c      	mov	r4, r1
   c121a:	b969      	cbnz	r1, c1238 <strrchr+0x24>
   c121c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c1220:	f7ff bf82 	b.w	c1128 <strchr>
   c1224:	1c43      	adds	r3, r0, #1
   c1226:	4605      	mov	r5, r0
   c1228:	4621      	mov	r1, r4
   c122a:	4618      	mov	r0, r3
   c122c:	f7ff ff7c 	bl	c1128 <strchr>
   c1230:	2800      	cmp	r0, #0
   c1232:	d1f7      	bne.n	c1224 <strrchr+0x10>
   c1234:	4628      	mov	r0, r5
   c1236:	bd38      	pop	{r3, r4, r5, pc}
   c1238:	2500      	movs	r5, #0
   c123a:	e7f5      	b.n	c1228 <strrchr+0x14>

000c123c <sulp>:
   c123c:	b570      	push	{r4, r5, r6, lr}
   c123e:	4604      	mov	r4, r0
   c1240:	460d      	mov	r5, r1
   c1242:	ec45 4b10 	vmov	d0, r4, r5
   c1246:	4616      	mov	r6, r2
   c1248:	f001 ff2a 	bl	c30a0 <__ulp>
   c124c:	ec51 0b10 	vmov	r0, r1, d0
   c1250:	b17e      	cbz	r6, c1272 <sulp+0x36>
   c1252:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c1256:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c125a:	2b00      	cmp	r3, #0
   c125c:	dd09      	ble.n	c1272 <sulp+0x36>
   c125e:	051b      	lsls	r3, r3, #20
   c1260:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c1264:	2400      	movs	r4, #0
   c1266:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c126a:	4622      	mov	r2, r4
   c126c:	462b      	mov	r3, r5
   c126e:	f7ff faf7 	bl	c0860 <__aeabi_dmul>
   c1272:	bd70      	pop	{r4, r5, r6, pc}
   c1274:	0000      	movs	r0, r0
	...

000c1278 <_strtod_l>:
   c1278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c127c:	ed2d 8b02 	vpush	{d8}
   c1280:	b09d      	sub	sp, #116	; 0x74
   c1282:	461f      	mov	r7, r3
   c1284:	2300      	movs	r3, #0
   c1286:	9318      	str	r3, [sp, #96]	; 0x60
   c1288:	4ba2      	ldr	r3, [pc, #648]	; (c1514 <_strtod_l+0x29c>)
   c128a:	9213      	str	r2, [sp, #76]	; 0x4c
   c128c:	681b      	ldr	r3, [r3, #0]
   c128e:	9305      	str	r3, [sp, #20]
   c1290:	4604      	mov	r4, r0
   c1292:	4618      	mov	r0, r3
   c1294:	4688      	mov	r8, r1
   c1296:	f7ff ff8e 	bl	c11b6 <strlen>
   c129a:	f04f 0a00 	mov.w	sl, #0
   c129e:	4605      	mov	r5, r0
   c12a0:	f04f 0b00 	mov.w	fp, #0
   c12a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c12a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c12aa:	781a      	ldrb	r2, [r3, #0]
   c12ac:	2a2b      	cmp	r2, #43	; 0x2b
   c12ae:	d04e      	beq.n	c134e <_strtod_l+0xd6>
   c12b0:	d83b      	bhi.n	c132a <_strtod_l+0xb2>
   c12b2:	2a0d      	cmp	r2, #13
   c12b4:	d834      	bhi.n	c1320 <_strtod_l+0xa8>
   c12b6:	2a08      	cmp	r2, #8
   c12b8:	d834      	bhi.n	c1324 <_strtod_l+0xac>
   c12ba:	2a00      	cmp	r2, #0
   c12bc:	d03e      	beq.n	c133c <_strtod_l+0xc4>
   c12be:	2300      	movs	r3, #0
   c12c0:	930a      	str	r3, [sp, #40]	; 0x28
   c12c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c12c4:	7833      	ldrb	r3, [r6, #0]
   c12c6:	2b30      	cmp	r3, #48	; 0x30
   c12c8:	f040 80b0 	bne.w	c142c <_strtod_l+0x1b4>
   c12cc:	7873      	ldrb	r3, [r6, #1]
   c12ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c12d2:	2b58      	cmp	r3, #88	; 0x58
   c12d4:	d168      	bne.n	c13a8 <_strtod_l+0x130>
   c12d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c12d8:	9301      	str	r3, [sp, #4]
   c12da:	ab18      	add	r3, sp, #96	; 0x60
   c12dc:	9702      	str	r7, [sp, #8]
   c12de:	9300      	str	r3, [sp, #0]
   c12e0:	4a8d      	ldr	r2, [pc, #564]	; (c1518 <_strtod_l+0x2a0>)
   c12e2:	ab19      	add	r3, sp, #100	; 0x64
   c12e4:	a917      	add	r1, sp, #92	; 0x5c
   c12e6:	4620      	mov	r0, r4
   c12e8:	f001 f838 	bl	c235c <__gethex>
   c12ec:	f010 0707 	ands.w	r7, r0, #7
   c12f0:	4605      	mov	r5, r0
   c12f2:	d005      	beq.n	c1300 <_strtod_l+0x88>
   c12f4:	2f06      	cmp	r7, #6
   c12f6:	d12c      	bne.n	c1352 <_strtod_l+0xda>
   c12f8:	3601      	adds	r6, #1
   c12fa:	2300      	movs	r3, #0
   c12fc:	9617      	str	r6, [sp, #92]	; 0x5c
   c12fe:	930a      	str	r3, [sp, #40]	; 0x28
   c1300:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c1302:	2b00      	cmp	r3, #0
   c1304:	f040 8590 	bne.w	c1e28 <_strtod_l+0xbb0>
   c1308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c130a:	b1eb      	cbz	r3, c1348 <_strtod_l+0xd0>
   c130c:	4652      	mov	r2, sl
   c130e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c1312:	ec43 2b10 	vmov	d0, r2, r3
   c1316:	b01d      	add	sp, #116	; 0x74
   c1318:	ecbd 8b02 	vpop	{d8}
   c131c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c1320:	2a20      	cmp	r2, #32
   c1322:	d1cc      	bne.n	c12be <_strtod_l+0x46>
   c1324:	3301      	adds	r3, #1
   c1326:	9317      	str	r3, [sp, #92]	; 0x5c
   c1328:	e7be      	b.n	c12a8 <_strtod_l+0x30>
   c132a:	2a2d      	cmp	r2, #45	; 0x2d
   c132c:	d1c7      	bne.n	c12be <_strtod_l+0x46>
   c132e:	2201      	movs	r2, #1
   c1330:	920a      	str	r2, [sp, #40]	; 0x28
   c1332:	1c5a      	adds	r2, r3, #1
   c1334:	9217      	str	r2, [sp, #92]	; 0x5c
   c1336:	785b      	ldrb	r3, [r3, #1]
   c1338:	2b00      	cmp	r3, #0
   c133a:	d1c2      	bne.n	c12c2 <_strtod_l+0x4a>
   c133c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c133e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c1342:	2b00      	cmp	r3, #0
   c1344:	f040 856e 	bne.w	c1e24 <_strtod_l+0xbac>
   c1348:	4652      	mov	r2, sl
   c134a:	465b      	mov	r3, fp
   c134c:	e7e1      	b.n	c1312 <_strtod_l+0x9a>
   c134e:	2200      	movs	r2, #0
   c1350:	e7ee      	b.n	c1330 <_strtod_l+0xb8>
   c1352:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c1354:	b13a      	cbz	r2, c1366 <_strtod_l+0xee>
   c1356:	2135      	movs	r1, #53	; 0x35
   c1358:	a81a      	add	r0, sp, #104	; 0x68
   c135a:	f001 ffac 	bl	c32b6 <__copybits>
   c135e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1360:	4620      	mov	r0, r4
   c1362:	f001 fb6b 	bl	c2a3c <_Bfree>
   c1366:	3f01      	subs	r7, #1
   c1368:	2f04      	cmp	r7, #4
   c136a:	d806      	bhi.n	c137a <_strtod_l+0x102>
   c136c:	e8df f007 	tbb	[pc, r7]
   c1370:	1714030a 	.word	0x1714030a
   c1374:	0a          	.byte	0x0a
   c1375:	00          	.byte	0x00
   c1376:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c137a:	0728      	lsls	r0, r5, #28
   c137c:	d5c0      	bpl.n	c1300 <_strtod_l+0x88>
   c137e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c1382:	e7bd      	b.n	c1300 <_strtod_l+0x88>
   c1384:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c1388:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c138a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c138e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c1392:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c1396:	e7f0      	b.n	c137a <_strtod_l+0x102>
   c1398:	f8df b180 	ldr.w	fp, [pc, #384]	; c151c <_strtod_l+0x2a4>
   c139c:	e7ed      	b.n	c137a <_strtod_l+0x102>
   c139e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c13a2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c13a6:	e7e8      	b.n	c137a <_strtod_l+0x102>
   c13a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c13aa:	1c5a      	adds	r2, r3, #1
   c13ac:	9217      	str	r2, [sp, #92]	; 0x5c
   c13ae:	785b      	ldrb	r3, [r3, #1]
   c13b0:	2b30      	cmp	r3, #48	; 0x30
   c13b2:	d0f9      	beq.n	c13a8 <_strtod_l+0x130>
   c13b4:	2b00      	cmp	r3, #0
   c13b6:	d0a3      	beq.n	c1300 <_strtod_l+0x88>
   c13b8:	2301      	movs	r3, #1
   c13ba:	f04f 0900 	mov.w	r9, #0
   c13be:	9304      	str	r3, [sp, #16]
   c13c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c13c2:	9308      	str	r3, [sp, #32]
   c13c4:	f8cd 901c 	str.w	r9, [sp, #28]
   c13c8:	464f      	mov	r7, r9
   c13ca:	220a      	movs	r2, #10
   c13cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c13ce:	7806      	ldrb	r6, [r0, #0]
   c13d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c13d4:	b2d9      	uxtb	r1, r3
   c13d6:	2909      	cmp	r1, #9
   c13d8:	d92a      	bls.n	c1430 <_strtod_l+0x1b8>
   c13da:	9905      	ldr	r1, [sp, #20]
   c13dc:	462a      	mov	r2, r5
   c13de:	f7ff fef2 	bl	c11c6 <strncmp>
   c13e2:	b398      	cbz	r0, c144c <_strtod_l+0x1d4>
   c13e4:	2000      	movs	r0, #0
   c13e6:	4632      	mov	r2, r6
   c13e8:	463d      	mov	r5, r7
   c13ea:	9005      	str	r0, [sp, #20]
   c13ec:	4603      	mov	r3, r0
   c13ee:	2a65      	cmp	r2, #101	; 0x65
   c13f0:	d001      	beq.n	c13f6 <_strtod_l+0x17e>
   c13f2:	2a45      	cmp	r2, #69	; 0x45
   c13f4:	d118      	bne.n	c1428 <_strtod_l+0x1b0>
   c13f6:	b91d      	cbnz	r5, c1400 <_strtod_l+0x188>
   c13f8:	9a04      	ldr	r2, [sp, #16]
   c13fa:	4302      	orrs	r2, r0
   c13fc:	d09e      	beq.n	c133c <_strtod_l+0xc4>
   c13fe:	2500      	movs	r5, #0
   c1400:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c1404:	f108 0201 	add.w	r2, r8, #1
   c1408:	9217      	str	r2, [sp, #92]	; 0x5c
   c140a:	f898 2001 	ldrb.w	r2, [r8, #1]
   c140e:	2a2b      	cmp	r2, #43	; 0x2b
   c1410:	d075      	beq.n	c14fe <_strtod_l+0x286>
   c1412:	2a2d      	cmp	r2, #45	; 0x2d
   c1414:	d07b      	beq.n	c150e <_strtod_l+0x296>
   c1416:	f04f 0c00 	mov.w	ip, #0
   c141a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c141e:	2909      	cmp	r1, #9
   c1420:	f240 8082 	bls.w	c1528 <_strtod_l+0x2b0>
   c1424:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c1428:	2600      	movs	r6, #0
   c142a:	e09d      	b.n	c1568 <_strtod_l+0x2f0>
   c142c:	2300      	movs	r3, #0
   c142e:	e7c4      	b.n	c13ba <_strtod_l+0x142>
   c1430:	2f08      	cmp	r7, #8
   c1432:	bfd8      	it	le
   c1434:	9907      	ldrle	r1, [sp, #28]
   c1436:	f100 0001 	add.w	r0, r0, #1
   c143a:	bfda      	itte	le
   c143c:	fb02 3301 	mlale	r3, r2, r1, r3
   c1440:	9307      	strle	r3, [sp, #28]
   c1442:	fb02 3909 	mlagt	r9, r2, r9, r3
   c1446:	3701      	adds	r7, #1
   c1448:	9017      	str	r0, [sp, #92]	; 0x5c
   c144a:	e7bf      	b.n	c13cc <_strtod_l+0x154>
   c144c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c144e:	195a      	adds	r2, r3, r5
   c1450:	9217      	str	r2, [sp, #92]	; 0x5c
   c1452:	5d5a      	ldrb	r2, [r3, r5]
   c1454:	2f00      	cmp	r7, #0
   c1456:	d037      	beq.n	c14c8 <_strtod_l+0x250>
   c1458:	9005      	str	r0, [sp, #20]
   c145a:	463d      	mov	r5, r7
   c145c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c1460:	2b09      	cmp	r3, #9
   c1462:	d912      	bls.n	c148a <_strtod_l+0x212>
   c1464:	2301      	movs	r3, #1
   c1466:	e7c2      	b.n	c13ee <_strtod_l+0x176>
   c1468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c146a:	1c5a      	adds	r2, r3, #1
   c146c:	9217      	str	r2, [sp, #92]	; 0x5c
   c146e:	785a      	ldrb	r2, [r3, #1]
   c1470:	3001      	adds	r0, #1
   c1472:	2a30      	cmp	r2, #48	; 0x30
   c1474:	d0f8      	beq.n	c1468 <_strtod_l+0x1f0>
   c1476:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c147a:	2b08      	cmp	r3, #8
   c147c:	f200 84d9 	bhi.w	c1e32 <_strtod_l+0xbba>
   c1480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c1482:	9005      	str	r0, [sp, #20]
   c1484:	2000      	movs	r0, #0
   c1486:	9308      	str	r3, [sp, #32]
   c1488:	4605      	mov	r5, r0
   c148a:	3a30      	subs	r2, #48	; 0x30
   c148c:	f100 0301 	add.w	r3, r0, #1
   c1490:	d014      	beq.n	c14bc <_strtod_l+0x244>
   c1492:	9905      	ldr	r1, [sp, #20]
   c1494:	4419      	add	r1, r3
   c1496:	9105      	str	r1, [sp, #20]
   c1498:	462b      	mov	r3, r5
   c149a:	eb00 0e05 	add.w	lr, r0, r5
   c149e:	210a      	movs	r1, #10
   c14a0:	4573      	cmp	r3, lr
   c14a2:	d113      	bne.n	c14cc <_strtod_l+0x254>
   c14a4:	182b      	adds	r3, r5, r0
   c14a6:	2b08      	cmp	r3, #8
   c14a8:	f105 0501 	add.w	r5, r5, #1
   c14ac:	4405      	add	r5, r0
   c14ae:	dc1c      	bgt.n	c14ea <_strtod_l+0x272>
   c14b0:	9907      	ldr	r1, [sp, #28]
   c14b2:	230a      	movs	r3, #10
   c14b4:	fb03 2301 	mla	r3, r3, r1, r2
   c14b8:	9307      	str	r3, [sp, #28]
   c14ba:	2300      	movs	r3, #0
   c14bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c14be:	1c51      	adds	r1, r2, #1
   c14c0:	9117      	str	r1, [sp, #92]	; 0x5c
   c14c2:	7852      	ldrb	r2, [r2, #1]
   c14c4:	4618      	mov	r0, r3
   c14c6:	e7c9      	b.n	c145c <_strtod_l+0x1e4>
   c14c8:	4638      	mov	r0, r7
   c14ca:	e7d2      	b.n	c1472 <_strtod_l+0x1fa>
   c14cc:	2b08      	cmp	r3, #8
   c14ce:	dc04      	bgt.n	c14da <_strtod_l+0x262>
   c14d0:	9e07      	ldr	r6, [sp, #28]
   c14d2:	434e      	muls	r6, r1
   c14d4:	9607      	str	r6, [sp, #28]
   c14d6:	3301      	adds	r3, #1
   c14d8:	e7e2      	b.n	c14a0 <_strtod_l+0x228>
   c14da:	f103 0c01 	add.w	ip, r3, #1
   c14de:	f1bc 0f10 	cmp.w	ip, #16
   c14e2:	bfd8      	it	le
   c14e4:	fb01 f909 	mulle.w	r9, r1, r9
   c14e8:	e7f5      	b.n	c14d6 <_strtod_l+0x25e>
   c14ea:	2d10      	cmp	r5, #16
   c14ec:	bfdc      	itt	le
   c14ee:	230a      	movle	r3, #10
   c14f0:	fb03 2909 	mlale	r9, r3, r9, r2
   c14f4:	e7e1      	b.n	c14ba <_strtod_l+0x242>
   c14f6:	2300      	movs	r3, #0
   c14f8:	9305      	str	r3, [sp, #20]
   c14fa:	2301      	movs	r3, #1
   c14fc:	e77c      	b.n	c13f8 <_strtod_l+0x180>
   c14fe:	f04f 0c00 	mov.w	ip, #0
   c1502:	f108 0202 	add.w	r2, r8, #2
   c1506:	9217      	str	r2, [sp, #92]	; 0x5c
   c1508:	f898 2002 	ldrb.w	r2, [r8, #2]
   c150c:	e785      	b.n	c141a <_strtod_l+0x1a2>
   c150e:	f04f 0c01 	mov.w	ip, #1
   c1512:	e7f6      	b.n	c1502 <_strtod_l+0x28a>
   c1514:	000c5454 	.word	0x000c5454
   c1518:	000c5290 	.word	0x000c5290
   c151c:	7ff00000 	.word	0x7ff00000
   c1520:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c1522:	1c51      	adds	r1, r2, #1
   c1524:	9117      	str	r1, [sp, #92]	; 0x5c
   c1526:	7852      	ldrb	r2, [r2, #1]
   c1528:	2a30      	cmp	r2, #48	; 0x30
   c152a:	d0f9      	beq.n	c1520 <_strtod_l+0x2a8>
   c152c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c1530:	2908      	cmp	r1, #8
   c1532:	f63f af79 	bhi.w	c1428 <_strtod_l+0x1b0>
   c1536:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c153a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c153c:	9206      	str	r2, [sp, #24]
   c153e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c1540:	1c51      	adds	r1, r2, #1
   c1542:	9117      	str	r1, [sp, #92]	; 0x5c
   c1544:	7852      	ldrb	r2, [r2, #1]
   c1546:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c154a:	2e09      	cmp	r6, #9
   c154c:	d937      	bls.n	c15be <_strtod_l+0x346>
   c154e:	9e06      	ldr	r6, [sp, #24]
   c1550:	1b89      	subs	r1, r1, r6
   c1552:	2908      	cmp	r1, #8
   c1554:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c1558:	dc02      	bgt.n	c1560 <_strtod_l+0x2e8>
   c155a:	4576      	cmp	r6, lr
   c155c:	bfa8      	it	ge
   c155e:	4676      	movge	r6, lr
   c1560:	f1bc 0f00 	cmp.w	ip, #0
   c1564:	d000      	beq.n	c1568 <_strtod_l+0x2f0>
   c1566:	4276      	negs	r6, r6
   c1568:	2d00      	cmp	r5, #0
   c156a:	d14d      	bne.n	c1608 <_strtod_l+0x390>
   c156c:	9904      	ldr	r1, [sp, #16]
   c156e:	4301      	orrs	r1, r0
   c1570:	f47f aec6 	bne.w	c1300 <_strtod_l+0x88>
   c1574:	2b00      	cmp	r3, #0
   c1576:	f47f aee1 	bne.w	c133c <_strtod_l+0xc4>
   c157a:	2a69      	cmp	r2, #105	; 0x69
   c157c:	d027      	beq.n	c15ce <_strtod_l+0x356>
   c157e:	dc24      	bgt.n	c15ca <_strtod_l+0x352>
   c1580:	2a49      	cmp	r2, #73	; 0x49
   c1582:	d024      	beq.n	c15ce <_strtod_l+0x356>
   c1584:	2a4e      	cmp	r2, #78	; 0x4e
   c1586:	f47f aed9 	bne.w	c133c <_strtod_l+0xc4>
   c158a:	499f      	ldr	r1, [pc, #636]	; (c1808 <_strtod_l+0x590>)
   c158c:	a817      	add	r0, sp, #92	; 0x5c
   c158e:	f001 f93d 	bl	c280c <__match>
   c1592:	2800      	cmp	r0, #0
   c1594:	f43f aed2 	beq.w	c133c <_strtod_l+0xc4>
   c1598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c159a:	781b      	ldrb	r3, [r3, #0]
   c159c:	2b28      	cmp	r3, #40	; 0x28
   c159e:	d12d      	bne.n	c15fc <_strtod_l+0x384>
   c15a0:	499a      	ldr	r1, [pc, #616]	; (c180c <_strtod_l+0x594>)
   c15a2:	aa1a      	add	r2, sp, #104	; 0x68
   c15a4:	a817      	add	r0, sp, #92	; 0x5c
   c15a6:	f001 f945 	bl	c2834 <__hexnan>
   c15aa:	2805      	cmp	r0, #5
   c15ac:	d126      	bne.n	c15fc <_strtod_l+0x384>
   c15ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c15b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c15b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c15b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c15bc:	e6a0      	b.n	c1300 <_strtod_l+0x88>
   c15be:	210a      	movs	r1, #10
   c15c0:	fb01 2e0e 	mla	lr, r1, lr, r2
   c15c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c15c8:	e7b9      	b.n	c153e <_strtod_l+0x2c6>
   c15ca:	2a6e      	cmp	r2, #110	; 0x6e
   c15cc:	e7db      	b.n	c1586 <_strtod_l+0x30e>
   c15ce:	4990      	ldr	r1, [pc, #576]	; (c1810 <_strtod_l+0x598>)
   c15d0:	a817      	add	r0, sp, #92	; 0x5c
   c15d2:	f001 f91b 	bl	c280c <__match>
   c15d6:	2800      	cmp	r0, #0
   c15d8:	f43f aeb0 	beq.w	c133c <_strtod_l+0xc4>
   c15dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c15de:	498d      	ldr	r1, [pc, #564]	; (c1814 <_strtod_l+0x59c>)
   c15e0:	3b01      	subs	r3, #1
   c15e2:	a817      	add	r0, sp, #92	; 0x5c
   c15e4:	9317      	str	r3, [sp, #92]	; 0x5c
   c15e6:	f001 f911 	bl	c280c <__match>
   c15ea:	b910      	cbnz	r0, c15f2 <_strtod_l+0x37a>
   c15ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c15ee:	3301      	adds	r3, #1
   c15f0:	9317      	str	r3, [sp, #92]	; 0x5c
   c15f2:	f8df b230 	ldr.w	fp, [pc, #560]	; c1824 <_strtod_l+0x5ac>
   c15f6:	f04f 0a00 	mov.w	sl, #0
   c15fa:	e681      	b.n	c1300 <_strtod_l+0x88>
   c15fc:	4886      	ldr	r0, [pc, #536]	; (c1818 <_strtod_l+0x5a0>)
   c15fe:	f7fe ff6b 	bl	c04d8 <nan>
   c1602:	ec5b ab10 	vmov	sl, fp, d0
   c1606:	e67b      	b.n	c1300 <_strtod_l+0x88>
   c1608:	9b05      	ldr	r3, [sp, #20]
   c160a:	9807      	ldr	r0, [sp, #28]
   c160c:	1af3      	subs	r3, r6, r3
   c160e:	2f00      	cmp	r7, #0
   c1610:	bf08      	it	eq
   c1612:	462f      	moveq	r7, r5
   c1614:	2d10      	cmp	r5, #16
   c1616:	9306      	str	r3, [sp, #24]
   c1618:	46a8      	mov	r8, r5
   c161a:	bfa8      	it	ge
   c161c:	f04f 0810 	movge.w	r8, #16
   c1620:	f7ff f8a4 	bl	c076c <__aeabi_ui2d>
   c1624:	2d09      	cmp	r5, #9
   c1626:	4682      	mov	sl, r0
   c1628:	468b      	mov	fp, r1
   c162a:	dd13      	ble.n	c1654 <_strtod_l+0x3dc>
   c162c:	4b7b      	ldr	r3, [pc, #492]	; (c181c <_strtod_l+0x5a4>)
   c162e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c1632:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c1636:	f7ff f913 	bl	c0860 <__aeabi_dmul>
   c163a:	4682      	mov	sl, r0
   c163c:	4648      	mov	r0, r9
   c163e:	468b      	mov	fp, r1
   c1640:	f7ff f894 	bl	c076c <__aeabi_ui2d>
   c1644:	4602      	mov	r2, r0
   c1646:	460b      	mov	r3, r1
   c1648:	4650      	mov	r0, sl
   c164a:	4659      	mov	r1, fp
   c164c:	f7fe ff52 	bl	c04f4 <__adddf3>
   c1650:	4682      	mov	sl, r0
   c1652:	468b      	mov	fp, r1
   c1654:	2d0f      	cmp	r5, #15
   c1656:	dc38      	bgt.n	c16ca <_strtod_l+0x452>
   c1658:	9b06      	ldr	r3, [sp, #24]
   c165a:	2b00      	cmp	r3, #0
   c165c:	f43f ae50 	beq.w	c1300 <_strtod_l+0x88>
   c1660:	dd24      	ble.n	c16ac <_strtod_l+0x434>
   c1662:	2b16      	cmp	r3, #22
   c1664:	dc0b      	bgt.n	c167e <_strtod_l+0x406>
   c1666:	496d      	ldr	r1, [pc, #436]	; (c181c <_strtod_l+0x5a4>)
   c1668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c166c:	e9d1 0100 	ldrd	r0, r1, [r1]
   c1670:	4652      	mov	r2, sl
   c1672:	465b      	mov	r3, fp
   c1674:	f7ff f8f4 	bl	c0860 <__aeabi_dmul>
   c1678:	4682      	mov	sl, r0
   c167a:	468b      	mov	fp, r1
   c167c:	e640      	b.n	c1300 <_strtod_l+0x88>
   c167e:	9a06      	ldr	r2, [sp, #24]
   c1680:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c1684:	4293      	cmp	r3, r2
   c1686:	db20      	blt.n	c16ca <_strtod_l+0x452>
   c1688:	4c64      	ldr	r4, [pc, #400]	; (c181c <_strtod_l+0x5a4>)
   c168a:	f1c5 050f 	rsb	r5, r5, #15
   c168e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c1692:	4652      	mov	r2, sl
   c1694:	465b      	mov	r3, fp
   c1696:	e9d1 0100 	ldrd	r0, r1, [r1]
   c169a:	f7ff f8e1 	bl	c0860 <__aeabi_dmul>
   c169e:	9b06      	ldr	r3, [sp, #24]
   c16a0:	1b5d      	subs	r5, r3, r5
   c16a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c16a6:	e9d4 2300 	ldrd	r2, r3, [r4]
   c16aa:	e7e3      	b.n	c1674 <_strtod_l+0x3fc>
   c16ac:	9b06      	ldr	r3, [sp, #24]
   c16ae:	3316      	adds	r3, #22
   c16b0:	db0b      	blt.n	c16ca <_strtod_l+0x452>
   c16b2:	9b05      	ldr	r3, [sp, #20]
   c16b4:	1b9e      	subs	r6, r3, r6
   c16b6:	4b59      	ldr	r3, [pc, #356]	; (c181c <_strtod_l+0x5a4>)
   c16b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c16bc:	e9d6 2300 	ldrd	r2, r3, [r6]
   c16c0:	4650      	mov	r0, sl
   c16c2:	4659      	mov	r1, fp
   c16c4:	f7ff f9f6 	bl	c0ab4 <__aeabi_ddiv>
   c16c8:	e7d6      	b.n	c1678 <_strtod_l+0x400>
   c16ca:	9b06      	ldr	r3, [sp, #24]
   c16cc:	eba5 0808 	sub.w	r8, r5, r8
   c16d0:	4498      	add	r8, r3
   c16d2:	f1b8 0f00 	cmp.w	r8, #0
   c16d6:	dd74      	ble.n	c17c2 <_strtod_l+0x54a>
   c16d8:	f018 030f 	ands.w	r3, r8, #15
   c16dc:	d00a      	beq.n	c16f4 <_strtod_l+0x47c>
   c16de:	494f      	ldr	r1, [pc, #316]	; (c181c <_strtod_l+0x5a4>)
   c16e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c16e4:	4652      	mov	r2, sl
   c16e6:	465b      	mov	r3, fp
   c16e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   c16ec:	f7ff f8b8 	bl	c0860 <__aeabi_dmul>
   c16f0:	4682      	mov	sl, r0
   c16f2:	468b      	mov	fp, r1
   c16f4:	f038 080f 	bics.w	r8, r8, #15
   c16f8:	d04f      	beq.n	c179a <_strtod_l+0x522>
   c16fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c16fe:	dd22      	ble.n	c1746 <_strtod_l+0x4ce>
   c1700:	2500      	movs	r5, #0
   c1702:	462e      	mov	r6, r5
   c1704:	9507      	str	r5, [sp, #28]
   c1706:	9505      	str	r5, [sp, #20]
   c1708:	2322      	movs	r3, #34	; 0x22
   c170a:	f8df b118 	ldr.w	fp, [pc, #280]	; c1824 <_strtod_l+0x5ac>
   c170e:	6023      	str	r3, [r4, #0]
   c1710:	f04f 0a00 	mov.w	sl, #0
   c1714:	9b07      	ldr	r3, [sp, #28]
   c1716:	2b00      	cmp	r3, #0
   c1718:	f43f adf2 	beq.w	c1300 <_strtod_l+0x88>
   c171c:	9918      	ldr	r1, [sp, #96]	; 0x60
   c171e:	4620      	mov	r0, r4
   c1720:	f001 f98c 	bl	c2a3c <_Bfree>
   c1724:	9905      	ldr	r1, [sp, #20]
   c1726:	4620      	mov	r0, r4
   c1728:	f001 f988 	bl	c2a3c <_Bfree>
   c172c:	4631      	mov	r1, r6
   c172e:	4620      	mov	r0, r4
   c1730:	f001 f984 	bl	c2a3c <_Bfree>
   c1734:	9907      	ldr	r1, [sp, #28]
   c1736:	4620      	mov	r0, r4
   c1738:	f001 f980 	bl	c2a3c <_Bfree>
   c173c:	4629      	mov	r1, r5
   c173e:	4620      	mov	r0, r4
   c1740:	f001 f97c 	bl	c2a3c <_Bfree>
   c1744:	e5dc      	b.n	c1300 <_strtod_l+0x88>
   c1746:	4b36      	ldr	r3, [pc, #216]	; (c1820 <_strtod_l+0x5a8>)
   c1748:	9304      	str	r3, [sp, #16]
   c174a:	2300      	movs	r3, #0
   c174c:	ea4f 1828 	mov.w	r8, r8, asr #4
   c1750:	4650      	mov	r0, sl
   c1752:	4659      	mov	r1, fp
   c1754:	4699      	mov	r9, r3
   c1756:	f1b8 0f01 	cmp.w	r8, #1
   c175a:	dc21      	bgt.n	c17a0 <_strtod_l+0x528>
   c175c:	b10b      	cbz	r3, c1762 <_strtod_l+0x4ea>
   c175e:	4682      	mov	sl, r0
   c1760:	468b      	mov	fp, r1
   c1762:	4b2f      	ldr	r3, [pc, #188]	; (c1820 <_strtod_l+0x5a8>)
   c1764:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c1768:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c176c:	4652      	mov	r2, sl
   c176e:	465b      	mov	r3, fp
   c1770:	e9d9 0100 	ldrd	r0, r1, [r9]
   c1774:	f7ff f874 	bl	c0860 <__aeabi_dmul>
   c1778:	4b2a      	ldr	r3, [pc, #168]	; (c1824 <_strtod_l+0x5ac>)
   c177a:	460a      	mov	r2, r1
   c177c:	400b      	ands	r3, r1
   c177e:	492a      	ldr	r1, [pc, #168]	; (c1828 <_strtod_l+0x5b0>)
   c1780:	428b      	cmp	r3, r1
   c1782:	4682      	mov	sl, r0
   c1784:	d8bc      	bhi.n	c1700 <_strtod_l+0x488>
   c1786:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c178a:	428b      	cmp	r3, r1
   c178c:	bf86      	itte	hi
   c178e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c182c <_strtod_l+0x5b4>
   c1792:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c1796:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c179a:	2300      	movs	r3, #0
   c179c:	9304      	str	r3, [sp, #16]
   c179e:	e084      	b.n	c18aa <_strtod_l+0x632>
   c17a0:	f018 0f01 	tst.w	r8, #1
   c17a4:	d005      	beq.n	c17b2 <_strtod_l+0x53a>
   c17a6:	9b04      	ldr	r3, [sp, #16]
   c17a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c17ac:	f7ff f858 	bl	c0860 <__aeabi_dmul>
   c17b0:	2301      	movs	r3, #1
   c17b2:	9a04      	ldr	r2, [sp, #16]
   c17b4:	3208      	adds	r2, #8
   c17b6:	f109 0901 	add.w	r9, r9, #1
   c17ba:	ea4f 0868 	mov.w	r8, r8, asr #1
   c17be:	9204      	str	r2, [sp, #16]
   c17c0:	e7c9      	b.n	c1756 <_strtod_l+0x4de>
   c17c2:	d0ea      	beq.n	c179a <_strtod_l+0x522>
   c17c4:	f1c8 0800 	rsb	r8, r8, #0
   c17c8:	f018 020f 	ands.w	r2, r8, #15
   c17cc:	d00a      	beq.n	c17e4 <_strtod_l+0x56c>
   c17ce:	4b13      	ldr	r3, [pc, #76]	; (c181c <_strtod_l+0x5a4>)
   c17d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c17d4:	4650      	mov	r0, sl
   c17d6:	4659      	mov	r1, fp
   c17d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c17dc:	f7ff f96a 	bl	c0ab4 <__aeabi_ddiv>
   c17e0:	4682      	mov	sl, r0
   c17e2:	468b      	mov	fp, r1
   c17e4:	ea5f 1828 	movs.w	r8, r8, asr #4
   c17e8:	d0d7      	beq.n	c179a <_strtod_l+0x522>
   c17ea:	f1b8 0f1f 	cmp.w	r8, #31
   c17ee:	dd1f      	ble.n	c1830 <_strtod_l+0x5b8>
   c17f0:	2500      	movs	r5, #0
   c17f2:	462e      	mov	r6, r5
   c17f4:	9507      	str	r5, [sp, #28]
   c17f6:	9505      	str	r5, [sp, #20]
   c17f8:	2322      	movs	r3, #34	; 0x22
   c17fa:	f04f 0a00 	mov.w	sl, #0
   c17fe:	f04f 0b00 	mov.w	fp, #0
   c1802:	6023      	str	r3, [r4, #0]
   c1804:	e786      	b.n	c1714 <_strtod_l+0x49c>
   c1806:	bf00      	nop
   c1808:	000c50a5 	.word	0x000c50a5
   c180c:	000c52a4 	.word	0x000c52a4
   c1810:	000c50a9 	.word	0x000c50a9
   c1814:	000c5287 	.word	0x000c5287
   c1818:	000c4fe0 	.word	0x000c4fe0
   c181c:	000c54f0 	.word	0x000c54f0
   c1820:	000c54c8 	.word	0x000c54c8
   c1824:	7ff00000 	.word	0x7ff00000
   c1828:	7ca00000 	.word	0x7ca00000
   c182c:	7fefffff 	.word	0x7fefffff
   c1830:	f018 0310 	ands.w	r3, r8, #16
   c1834:	bf18      	it	ne
   c1836:	236a      	movne	r3, #106	; 0x6a
   c1838:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c1be8 <_strtod_l+0x970>
   c183c:	9304      	str	r3, [sp, #16]
   c183e:	4650      	mov	r0, sl
   c1840:	4659      	mov	r1, fp
   c1842:	2300      	movs	r3, #0
   c1844:	f018 0f01 	tst.w	r8, #1
   c1848:	d004      	beq.n	c1854 <_strtod_l+0x5dc>
   c184a:	e9d9 2300 	ldrd	r2, r3, [r9]
   c184e:	f7ff f807 	bl	c0860 <__aeabi_dmul>
   c1852:	2301      	movs	r3, #1
   c1854:	ea5f 0868 	movs.w	r8, r8, asr #1
   c1858:	f109 0908 	add.w	r9, r9, #8
   c185c:	d1f2      	bne.n	c1844 <_strtod_l+0x5cc>
   c185e:	b10b      	cbz	r3, c1864 <_strtod_l+0x5ec>
   c1860:	4682      	mov	sl, r0
   c1862:	468b      	mov	fp, r1
   c1864:	9b04      	ldr	r3, [sp, #16]
   c1866:	b1c3      	cbz	r3, c189a <_strtod_l+0x622>
   c1868:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c186c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c1870:	2b00      	cmp	r3, #0
   c1872:	4659      	mov	r1, fp
   c1874:	dd11      	ble.n	c189a <_strtod_l+0x622>
   c1876:	2b1f      	cmp	r3, #31
   c1878:	f340 8124 	ble.w	c1ac4 <_strtod_l+0x84c>
   c187c:	2b34      	cmp	r3, #52	; 0x34
   c187e:	bfde      	ittt	le
   c1880:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c1884:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c1888:	fa03 f202 	lslle.w	r2, r3, r2
   c188c:	f04f 0a00 	mov.w	sl, #0
   c1890:	bfcc      	ite	gt
   c1892:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c1896:	ea02 0b01 	andle.w	fp, r2, r1
   c189a:	2200      	movs	r2, #0
   c189c:	2300      	movs	r3, #0
   c189e:	4650      	mov	r0, sl
   c18a0:	4659      	mov	r1, fp
   c18a2:	f7ff fa45 	bl	c0d30 <__aeabi_dcmpeq>
   c18a6:	2800      	cmp	r0, #0
   c18a8:	d1a2      	bne.n	c17f0 <_strtod_l+0x578>
   c18aa:	9b07      	ldr	r3, [sp, #28]
   c18ac:	9300      	str	r3, [sp, #0]
   c18ae:	9908      	ldr	r1, [sp, #32]
   c18b0:	462b      	mov	r3, r5
   c18b2:	463a      	mov	r2, r7
   c18b4:	4620      	mov	r0, r4
   c18b6:	f001 f929 	bl	c2b0c <__s2b>
   c18ba:	9007      	str	r0, [sp, #28]
   c18bc:	2800      	cmp	r0, #0
   c18be:	f43f af1f 	beq.w	c1700 <_strtod_l+0x488>
   c18c2:	9b05      	ldr	r3, [sp, #20]
   c18c4:	1b9e      	subs	r6, r3, r6
   c18c6:	9b06      	ldr	r3, [sp, #24]
   c18c8:	2b00      	cmp	r3, #0
   c18ca:	bfb4      	ite	lt
   c18cc:	4633      	movlt	r3, r6
   c18ce:	2300      	movge	r3, #0
   c18d0:	930c      	str	r3, [sp, #48]	; 0x30
   c18d2:	9b06      	ldr	r3, [sp, #24]
   c18d4:	2500      	movs	r5, #0
   c18d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c18da:	9312      	str	r3, [sp, #72]	; 0x48
   c18dc:	462e      	mov	r6, r5
   c18de:	9b07      	ldr	r3, [sp, #28]
   c18e0:	4620      	mov	r0, r4
   c18e2:	6859      	ldr	r1, [r3, #4]
   c18e4:	f001 f86a 	bl	c29bc <_Balloc>
   c18e8:	9005      	str	r0, [sp, #20]
   c18ea:	2800      	cmp	r0, #0
   c18ec:	f43f af0c 	beq.w	c1708 <_strtod_l+0x490>
   c18f0:	9b07      	ldr	r3, [sp, #28]
   c18f2:	691a      	ldr	r2, [r3, #16]
   c18f4:	3202      	adds	r2, #2
   c18f6:	f103 010c 	add.w	r1, r3, #12
   c18fa:	0092      	lsls	r2, r2, #2
   c18fc:	300c      	adds	r0, #12
   c18fe:	f7ff fb67 	bl	c0fd0 <memcpy>
   c1902:	ec4b ab10 	vmov	d0, sl, fp
   c1906:	aa1a      	add	r2, sp, #104	; 0x68
   c1908:	a919      	add	r1, sp, #100	; 0x64
   c190a:	4620      	mov	r0, r4
   c190c:	f001 fc44 	bl	c3198 <__d2b>
   c1910:	ec4b ab18 	vmov	d8, sl, fp
   c1914:	9018      	str	r0, [sp, #96]	; 0x60
   c1916:	2800      	cmp	r0, #0
   c1918:	f43f aef6 	beq.w	c1708 <_strtod_l+0x490>
   c191c:	2101      	movs	r1, #1
   c191e:	4620      	mov	r0, r4
   c1920:	f001 f98e 	bl	c2c40 <__i2b>
   c1924:	4606      	mov	r6, r0
   c1926:	2800      	cmp	r0, #0
   c1928:	f43f aeee 	beq.w	c1708 <_strtod_l+0x490>
   c192c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c192e:	9904      	ldr	r1, [sp, #16]
   c1930:	2b00      	cmp	r3, #0
   c1932:	bfab      	itete	ge
   c1934:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c1936:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c1938:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c193a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c193e:	bfac      	ite	ge
   c1940:	eb03 0902 	addge.w	r9, r3, r2
   c1944:	1ad7      	sublt	r7, r2, r3
   c1946:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c1948:	eba3 0801 	sub.w	r8, r3, r1
   c194c:	4490      	add	r8, r2
   c194e:	4ba1      	ldr	r3, [pc, #644]	; (c1bd4 <_strtod_l+0x95c>)
   c1950:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c1954:	4598      	cmp	r8, r3
   c1956:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c195a:	f280 80c7 	bge.w	c1aec <_strtod_l+0x874>
   c195e:	eba3 0308 	sub.w	r3, r3, r8
   c1962:	2b1f      	cmp	r3, #31
   c1964:	eba2 0203 	sub.w	r2, r2, r3
   c1968:	f04f 0101 	mov.w	r1, #1
   c196c:	f300 80b1 	bgt.w	c1ad2 <_strtod_l+0x85a>
   c1970:	fa01 f303 	lsl.w	r3, r1, r3
   c1974:	930d      	str	r3, [sp, #52]	; 0x34
   c1976:	2300      	movs	r3, #0
   c1978:	9308      	str	r3, [sp, #32]
   c197a:	eb09 0802 	add.w	r8, r9, r2
   c197e:	9b04      	ldr	r3, [sp, #16]
   c1980:	45c1      	cmp	r9, r8
   c1982:	4417      	add	r7, r2
   c1984:	441f      	add	r7, r3
   c1986:	464b      	mov	r3, r9
   c1988:	bfa8      	it	ge
   c198a:	4643      	movge	r3, r8
   c198c:	42bb      	cmp	r3, r7
   c198e:	bfa8      	it	ge
   c1990:	463b      	movge	r3, r7
   c1992:	2b00      	cmp	r3, #0
   c1994:	bfc2      	ittt	gt
   c1996:	eba8 0803 	subgt.w	r8, r8, r3
   c199a:	1aff      	subgt	r7, r7, r3
   c199c:	eba9 0903 	subgt.w	r9, r9, r3
   c19a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c19a2:	2b00      	cmp	r3, #0
   c19a4:	dd17      	ble.n	c19d6 <_strtod_l+0x75e>
   c19a6:	4631      	mov	r1, r6
   c19a8:	461a      	mov	r2, r3
   c19aa:	4620      	mov	r0, r4
   c19ac:	f001 fa08 	bl	c2dc0 <__pow5mult>
   c19b0:	4606      	mov	r6, r0
   c19b2:	2800      	cmp	r0, #0
   c19b4:	f43f aea8 	beq.w	c1708 <_strtod_l+0x490>
   c19b8:	4601      	mov	r1, r0
   c19ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c19bc:	4620      	mov	r0, r4
   c19be:	f001 f955 	bl	c2c6c <__multiply>
   c19c2:	900b      	str	r0, [sp, #44]	; 0x2c
   c19c4:	2800      	cmp	r0, #0
   c19c6:	f43f ae9f 	beq.w	c1708 <_strtod_l+0x490>
   c19ca:	9918      	ldr	r1, [sp, #96]	; 0x60
   c19cc:	4620      	mov	r0, r4
   c19ce:	f001 f835 	bl	c2a3c <_Bfree>
   c19d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c19d4:	9318      	str	r3, [sp, #96]	; 0x60
   c19d6:	f1b8 0f00 	cmp.w	r8, #0
   c19da:	f300 808c 	bgt.w	c1af6 <_strtod_l+0x87e>
   c19de:	9b06      	ldr	r3, [sp, #24]
   c19e0:	2b00      	cmp	r3, #0
   c19e2:	dd08      	ble.n	c19f6 <_strtod_l+0x77e>
   c19e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c19e6:	9905      	ldr	r1, [sp, #20]
   c19e8:	4620      	mov	r0, r4
   c19ea:	f001 f9e9 	bl	c2dc0 <__pow5mult>
   c19ee:	9005      	str	r0, [sp, #20]
   c19f0:	2800      	cmp	r0, #0
   c19f2:	f43f ae89 	beq.w	c1708 <_strtod_l+0x490>
   c19f6:	2f00      	cmp	r7, #0
   c19f8:	dd08      	ble.n	c1a0c <_strtod_l+0x794>
   c19fa:	9905      	ldr	r1, [sp, #20]
   c19fc:	463a      	mov	r2, r7
   c19fe:	4620      	mov	r0, r4
   c1a00:	f001 fa38 	bl	c2e74 <__lshift>
   c1a04:	9005      	str	r0, [sp, #20]
   c1a06:	2800      	cmp	r0, #0
   c1a08:	f43f ae7e 	beq.w	c1708 <_strtod_l+0x490>
   c1a0c:	f1b9 0f00 	cmp.w	r9, #0
   c1a10:	dd08      	ble.n	c1a24 <_strtod_l+0x7ac>
   c1a12:	4631      	mov	r1, r6
   c1a14:	464a      	mov	r2, r9
   c1a16:	4620      	mov	r0, r4
   c1a18:	f001 fa2c 	bl	c2e74 <__lshift>
   c1a1c:	4606      	mov	r6, r0
   c1a1e:	2800      	cmp	r0, #0
   c1a20:	f43f ae72 	beq.w	c1708 <_strtod_l+0x490>
   c1a24:	9a05      	ldr	r2, [sp, #20]
   c1a26:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1a28:	4620      	mov	r0, r4
   c1a2a:	f001 faaf 	bl	c2f8c <__mdiff>
   c1a2e:	4605      	mov	r5, r0
   c1a30:	2800      	cmp	r0, #0
   c1a32:	f43f ae69 	beq.w	c1708 <_strtod_l+0x490>
   c1a36:	68c3      	ldr	r3, [r0, #12]
   c1a38:	930b      	str	r3, [sp, #44]	; 0x2c
   c1a3a:	2300      	movs	r3, #0
   c1a3c:	60c3      	str	r3, [r0, #12]
   c1a3e:	4631      	mov	r1, r6
   c1a40:	f001 fa88 	bl	c2f54 <__mcmp>
   c1a44:	2800      	cmp	r0, #0
   c1a46:	da60      	bge.n	c1b0a <_strtod_l+0x892>
   c1a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1a4a:	ea53 030a 	orrs.w	r3, r3, sl
   c1a4e:	f040 8082 	bne.w	c1b56 <_strtod_l+0x8de>
   c1a52:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1a56:	2b00      	cmp	r3, #0
   c1a58:	d17d      	bne.n	c1b56 <_strtod_l+0x8de>
   c1a5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c1a5e:	0d1b      	lsrs	r3, r3, #20
   c1a60:	051b      	lsls	r3, r3, #20
   c1a62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c1a66:	d976      	bls.n	c1b56 <_strtod_l+0x8de>
   c1a68:	696b      	ldr	r3, [r5, #20]
   c1a6a:	b913      	cbnz	r3, c1a72 <_strtod_l+0x7fa>
   c1a6c:	692b      	ldr	r3, [r5, #16]
   c1a6e:	2b01      	cmp	r3, #1
   c1a70:	dd71      	ble.n	c1b56 <_strtod_l+0x8de>
   c1a72:	4629      	mov	r1, r5
   c1a74:	2201      	movs	r2, #1
   c1a76:	4620      	mov	r0, r4
   c1a78:	f001 f9fc 	bl	c2e74 <__lshift>
   c1a7c:	4631      	mov	r1, r6
   c1a7e:	4605      	mov	r5, r0
   c1a80:	f001 fa68 	bl	c2f54 <__mcmp>
   c1a84:	2800      	cmp	r0, #0
   c1a86:	dd66      	ble.n	c1b56 <_strtod_l+0x8de>
   c1a88:	9904      	ldr	r1, [sp, #16]
   c1a8a:	4a53      	ldr	r2, [pc, #332]	; (c1bd8 <_strtod_l+0x960>)
   c1a8c:	465b      	mov	r3, fp
   c1a8e:	2900      	cmp	r1, #0
   c1a90:	f000 8081 	beq.w	c1b96 <_strtod_l+0x91e>
   c1a94:	ea02 010b 	and.w	r1, r2, fp
   c1a98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c1a9c:	dc7b      	bgt.n	c1b96 <_strtod_l+0x91e>
   c1a9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c1aa2:	f77f aea9 	ble.w	c17f8 <_strtod_l+0x580>
   c1aa6:	4b4d      	ldr	r3, [pc, #308]	; (c1bdc <_strtod_l+0x964>)
   c1aa8:	4650      	mov	r0, sl
   c1aaa:	4659      	mov	r1, fp
   c1aac:	2200      	movs	r2, #0
   c1aae:	f7fe fed7 	bl	c0860 <__aeabi_dmul>
   c1ab2:	460b      	mov	r3, r1
   c1ab4:	4303      	orrs	r3, r0
   c1ab6:	bf08      	it	eq
   c1ab8:	2322      	moveq	r3, #34	; 0x22
   c1aba:	4682      	mov	sl, r0
   c1abc:	468b      	mov	fp, r1
   c1abe:	bf08      	it	eq
   c1ac0:	6023      	streq	r3, [r4, #0]
   c1ac2:	e62b      	b.n	c171c <_strtod_l+0x4a4>
   c1ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c1ac8:	fa02 f303 	lsl.w	r3, r2, r3
   c1acc:	ea03 0a0a 	and.w	sl, r3, sl
   c1ad0:	e6e3      	b.n	c189a <_strtod_l+0x622>
   c1ad2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c1ad6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c1ada:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c1ade:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c1ae2:	fa01 f308 	lsl.w	r3, r1, r8
   c1ae6:	9308      	str	r3, [sp, #32]
   c1ae8:	910d      	str	r1, [sp, #52]	; 0x34
   c1aea:	e746      	b.n	c197a <_strtod_l+0x702>
   c1aec:	2300      	movs	r3, #0
   c1aee:	9308      	str	r3, [sp, #32]
   c1af0:	2301      	movs	r3, #1
   c1af2:	930d      	str	r3, [sp, #52]	; 0x34
   c1af4:	e741      	b.n	c197a <_strtod_l+0x702>
   c1af6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1af8:	4642      	mov	r2, r8
   c1afa:	4620      	mov	r0, r4
   c1afc:	f001 f9ba 	bl	c2e74 <__lshift>
   c1b00:	9018      	str	r0, [sp, #96]	; 0x60
   c1b02:	2800      	cmp	r0, #0
   c1b04:	f47f af6b 	bne.w	c19de <_strtod_l+0x766>
   c1b08:	e5fe      	b.n	c1708 <_strtod_l+0x490>
   c1b0a:	465f      	mov	r7, fp
   c1b0c:	d16e      	bne.n	c1bec <_strtod_l+0x974>
   c1b0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c1b10:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1b14:	b342      	cbz	r2, c1b68 <_strtod_l+0x8f0>
   c1b16:	4a32      	ldr	r2, [pc, #200]	; (c1be0 <_strtod_l+0x968>)
   c1b18:	4293      	cmp	r3, r2
   c1b1a:	d128      	bne.n	c1b6e <_strtod_l+0x8f6>
   c1b1c:	9b04      	ldr	r3, [sp, #16]
   c1b1e:	4651      	mov	r1, sl
   c1b20:	b1eb      	cbz	r3, c1b5e <_strtod_l+0x8e6>
   c1b22:	4b2d      	ldr	r3, [pc, #180]	; (c1bd8 <_strtod_l+0x960>)
   c1b24:	403b      	ands	r3, r7
   c1b26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c1b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c1b2e:	d819      	bhi.n	c1b64 <_strtod_l+0x8ec>
   c1b30:	0d1b      	lsrs	r3, r3, #20
   c1b32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c1b36:	fa02 f303 	lsl.w	r3, r2, r3
   c1b3a:	4299      	cmp	r1, r3
   c1b3c:	d117      	bne.n	c1b6e <_strtod_l+0x8f6>
   c1b3e:	4b29      	ldr	r3, [pc, #164]	; (c1be4 <_strtod_l+0x96c>)
   c1b40:	429f      	cmp	r7, r3
   c1b42:	d102      	bne.n	c1b4a <_strtod_l+0x8d2>
   c1b44:	3101      	adds	r1, #1
   c1b46:	f43f addf 	beq.w	c1708 <_strtod_l+0x490>
   c1b4a:	4b23      	ldr	r3, [pc, #140]	; (c1bd8 <_strtod_l+0x960>)
   c1b4c:	403b      	ands	r3, r7
   c1b4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c1b52:	f04f 0a00 	mov.w	sl, #0
   c1b56:	9b04      	ldr	r3, [sp, #16]
   c1b58:	2b00      	cmp	r3, #0
   c1b5a:	d1a4      	bne.n	c1aa6 <_strtod_l+0x82e>
   c1b5c:	e5de      	b.n	c171c <_strtod_l+0x4a4>
   c1b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c1b62:	e7ea      	b.n	c1b3a <_strtod_l+0x8c2>
   c1b64:	4613      	mov	r3, r2
   c1b66:	e7e8      	b.n	c1b3a <_strtod_l+0x8c2>
   c1b68:	ea53 030a 	orrs.w	r3, r3, sl
   c1b6c:	d08c      	beq.n	c1a88 <_strtod_l+0x810>
   c1b6e:	9b08      	ldr	r3, [sp, #32]
   c1b70:	b1db      	cbz	r3, c1baa <_strtod_l+0x932>
   c1b72:	423b      	tst	r3, r7
   c1b74:	d0ef      	beq.n	c1b56 <_strtod_l+0x8de>
   c1b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1b78:	9a04      	ldr	r2, [sp, #16]
   c1b7a:	4650      	mov	r0, sl
   c1b7c:	4659      	mov	r1, fp
   c1b7e:	b1c3      	cbz	r3, c1bb2 <_strtod_l+0x93a>
   c1b80:	f7ff fb5c 	bl	c123c <sulp>
   c1b84:	4602      	mov	r2, r0
   c1b86:	460b      	mov	r3, r1
   c1b88:	ec51 0b18 	vmov	r0, r1, d8
   c1b8c:	f7fe fcb2 	bl	c04f4 <__adddf3>
   c1b90:	4682      	mov	sl, r0
   c1b92:	468b      	mov	fp, r1
   c1b94:	e7df      	b.n	c1b56 <_strtod_l+0x8de>
   c1b96:	4013      	ands	r3, r2
   c1b98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c1b9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c1ba0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c1ba4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c1ba8:	e7d5      	b.n	c1b56 <_strtod_l+0x8de>
   c1baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c1bac:	ea13 0f0a 	tst.w	r3, sl
   c1bb0:	e7e0      	b.n	c1b74 <_strtod_l+0x8fc>
   c1bb2:	f7ff fb43 	bl	c123c <sulp>
   c1bb6:	4602      	mov	r2, r0
   c1bb8:	460b      	mov	r3, r1
   c1bba:	ec51 0b18 	vmov	r0, r1, d8
   c1bbe:	f7fe fc97 	bl	c04f0 <__aeabi_dsub>
   c1bc2:	2200      	movs	r2, #0
   c1bc4:	2300      	movs	r3, #0
   c1bc6:	4682      	mov	sl, r0
   c1bc8:	468b      	mov	fp, r1
   c1bca:	f7ff f8b1 	bl	c0d30 <__aeabi_dcmpeq>
   c1bce:	2800      	cmp	r0, #0
   c1bd0:	d0c1      	beq.n	c1b56 <_strtod_l+0x8de>
   c1bd2:	e611      	b.n	c17f8 <_strtod_l+0x580>
   c1bd4:	fffffc02 	.word	0xfffffc02
   c1bd8:	7ff00000 	.word	0x7ff00000
   c1bdc:	39500000 	.word	0x39500000
   c1be0:	000fffff 	.word	0x000fffff
   c1be4:	7fefffff 	.word	0x7fefffff
   c1be8:	000c52b8 	.word	0x000c52b8
   c1bec:	4631      	mov	r1, r6
   c1bee:	4628      	mov	r0, r5
   c1bf0:	f001 fb2e 	bl	c3250 <__ratio>
   c1bf4:	ec59 8b10 	vmov	r8, r9, d0
   c1bf8:	ee10 0a10 	vmov	r0, s0
   c1bfc:	2200      	movs	r2, #0
   c1bfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c1c02:	4649      	mov	r1, r9
   c1c04:	f7ff f8a8 	bl	c0d58 <__aeabi_dcmple>
   c1c08:	2800      	cmp	r0, #0
   c1c0a:	d07a      	beq.n	c1d02 <_strtod_l+0xa8a>
   c1c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1c0e:	2b00      	cmp	r3, #0
   c1c10:	d04a      	beq.n	c1ca8 <_strtod_l+0xa30>
   c1c12:	4b95      	ldr	r3, [pc, #596]	; (c1e68 <_strtod_l+0xbf0>)
   c1c14:	2200      	movs	r2, #0
   c1c16:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c1c1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; c1e68 <_strtod_l+0xbf0>
   c1c1e:	f04f 0800 	mov.w	r8, #0
   c1c22:	4b92      	ldr	r3, [pc, #584]	; (c1e6c <_strtod_l+0xbf4>)
   c1c24:	403b      	ands	r3, r7
   c1c26:	930d      	str	r3, [sp, #52]	; 0x34
   c1c28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c1c2a:	4b91      	ldr	r3, [pc, #580]	; (c1e70 <_strtod_l+0xbf8>)
   c1c2c:	429a      	cmp	r2, r3
   c1c2e:	f040 80b0 	bne.w	c1d92 <_strtod_l+0xb1a>
   c1c32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c1c36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c1c3a:	ec4b ab10 	vmov	d0, sl, fp
   c1c3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c1c42:	f001 fa2d 	bl	c30a0 <__ulp>
   c1c46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c1c4a:	ec53 2b10 	vmov	r2, r3, d0
   c1c4e:	f7fe fe07 	bl	c0860 <__aeabi_dmul>
   c1c52:	4652      	mov	r2, sl
   c1c54:	465b      	mov	r3, fp
   c1c56:	f7fe fc4d 	bl	c04f4 <__adddf3>
   c1c5a:	460b      	mov	r3, r1
   c1c5c:	4983      	ldr	r1, [pc, #524]	; (c1e6c <_strtod_l+0xbf4>)
   c1c5e:	4a85      	ldr	r2, [pc, #532]	; (c1e74 <_strtod_l+0xbfc>)
   c1c60:	4019      	ands	r1, r3
   c1c62:	4291      	cmp	r1, r2
   c1c64:	4682      	mov	sl, r0
   c1c66:	d960      	bls.n	c1d2a <_strtod_l+0xab2>
   c1c68:	ee18 3a90 	vmov	r3, s17
   c1c6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c1c70:	4293      	cmp	r3, r2
   c1c72:	d104      	bne.n	c1c7e <_strtod_l+0xa06>
   c1c74:	ee18 3a10 	vmov	r3, s16
   c1c78:	3301      	adds	r3, #1
   c1c7a:	f43f ad45 	beq.w	c1708 <_strtod_l+0x490>
   c1c7e:	f8df b200 	ldr.w	fp, [pc, #512]	; c1e80 <_strtod_l+0xc08>
   c1c82:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c1c86:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1c88:	4620      	mov	r0, r4
   c1c8a:	f000 fed7 	bl	c2a3c <_Bfree>
   c1c8e:	9905      	ldr	r1, [sp, #20]
   c1c90:	4620      	mov	r0, r4
   c1c92:	f000 fed3 	bl	c2a3c <_Bfree>
   c1c96:	4631      	mov	r1, r6
   c1c98:	4620      	mov	r0, r4
   c1c9a:	f000 fecf 	bl	c2a3c <_Bfree>
   c1c9e:	4629      	mov	r1, r5
   c1ca0:	4620      	mov	r0, r4
   c1ca2:	f000 fecb 	bl	c2a3c <_Bfree>
   c1ca6:	e61a      	b.n	c18de <_strtod_l+0x666>
   c1ca8:	f1ba 0f00 	cmp.w	sl, #0
   c1cac:	d11b      	bne.n	c1ce6 <_strtod_l+0xa6e>
   c1cae:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1cb2:	b9f3      	cbnz	r3, c1cf2 <_strtod_l+0xa7a>
   c1cb4:	4b6c      	ldr	r3, [pc, #432]	; (c1e68 <_strtod_l+0xbf0>)
   c1cb6:	2200      	movs	r2, #0
   c1cb8:	4640      	mov	r0, r8
   c1cba:	4649      	mov	r1, r9
   c1cbc:	f7ff f842 	bl	c0d44 <__aeabi_dcmplt>
   c1cc0:	b9d0      	cbnz	r0, c1cf8 <_strtod_l+0xa80>
   c1cc2:	4640      	mov	r0, r8
   c1cc4:	4649      	mov	r1, r9
   c1cc6:	4b6c      	ldr	r3, [pc, #432]	; (c1e78 <_strtod_l+0xc00>)
   c1cc8:	2200      	movs	r2, #0
   c1cca:	f7fe fdc9 	bl	c0860 <__aeabi_dmul>
   c1cce:	4680      	mov	r8, r0
   c1cd0:	4689      	mov	r9, r1
   c1cd2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c1cd6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c1cda:	9315      	str	r3, [sp, #84]	; 0x54
   c1cdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c1ce0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c1ce4:	e79d      	b.n	c1c22 <_strtod_l+0x9aa>
   c1ce6:	f1ba 0f01 	cmp.w	sl, #1
   c1cea:	d102      	bne.n	c1cf2 <_strtod_l+0xa7a>
   c1cec:	2f00      	cmp	r7, #0
   c1cee:	f43f ad83 	beq.w	c17f8 <_strtod_l+0x580>
   c1cf2:	4b62      	ldr	r3, [pc, #392]	; (c1e7c <_strtod_l+0xc04>)
   c1cf4:	2200      	movs	r2, #0
   c1cf6:	e78e      	b.n	c1c16 <_strtod_l+0x99e>
   c1cf8:	f8df 917c 	ldr.w	r9, [pc, #380]	; c1e78 <_strtod_l+0xc00>
   c1cfc:	f04f 0800 	mov.w	r8, #0
   c1d00:	e7e7      	b.n	c1cd2 <_strtod_l+0xa5a>
   c1d02:	4b5d      	ldr	r3, [pc, #372]	; (c1e78 <_strtod_l+0xc00>)
   c1d04:	4640      	mov	r0, r8
   c1d06:	4649      	mov	r1, r9
   c1d08:	2200      	movs	r2, #0
   c1d0a:	f7fe fda9 	bl	c0860 <__aeabi_dmul>
   c1d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1d10:	4680      	mov	r8, r0
   c1d12:	4689      	mov	r9, r1
   c1d14:	b933      	cbnz	r3, c1d24 <_strtod_l+0xaac>
   c1d16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c1d1a:	900e      	str	r0, [sp, #56]	; 0x38
   c1d1c:	930f      	str	r3, [sp, #60]	; 0x3c
   c1d1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c1d22:	e7dd      	b.n	c1ce0 <_strtod_l+0xa68>
   c1d24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c1d28:	e7f9      	b.n	c1d1e <_strtod_l+0xaa6>
   c1d2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c1d2e:	9b04      	ldr	r3, [sp, #16]
   c1d30:	2b00      	cmp	r3, #0
   c1d32:	d1a8      	bne.n	c1c86 <_strtod_l+0xa0e>
   c1d34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c1d38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c1d3a:	0d1b      	lsrs	r3, r3, #20
   c1d3c:	051b      	lsls	r3, r3, #20
   c1d3e:	429a      	cmp	r2, r3
   c1d40:	d1a1      	bne.n	c1c86 <_strtod_l+0xa0e>
   c1d42:	4640      	mov	r0, r8
   c1d44:	4649      	mov	r1, r9
   c1d46:	f001 fb33 	bl	c33b0 <__aeabi_d2lz>
   c1d4a:	f7fe fd5b 	bl	c0804 <__aeabi_l2d>
   c1d4e:	4602      	mov	r2, r0
   c1d50:	460b      	mov	r3, r1
   c1d52:	4640      	mov	r0, r8
   c1d54:	4649      	mov	r1, r9
   c1d56:	f7fe fbcb 	bl	c04f0 <__aeabi_dsub>
   c1d5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c1d5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1d60:	ea43 030a 	orr.w	r3, r3, sl
   c1d64:	4313      	orrs	r3, r2
   c1d66:	4680      	mov	r8, r0
   c1d68:	4689      	mov	r9, r1
   c1d6a:	d055      	beq.n	c1e18 <_strtod_l+0xba0>
   c1d6c:	a336      	add	r3, pc, #216	; (adr r3, c1e48 <_strtod_l+0xbd0>)
   c1d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1d72:	f7fe ffe7 	bl	c0d44 <__aeabi_dcmplt>
   c1d76:	2800      	cmp	r0, #0
   c1d78:	f47f acd0 	bne.w	c171c <_strtod_l+0x4a4>
   c1d7c:	a334      	add	r3, pc, #208	; (adr r3, c1e50 <_strtod_l+0xbd8>)
   c1d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1d82:	4640      	mov	r0, r8
   c1d84:	4649      	mov	r1, r9
   c1d86:	f7fe fffb 	bl	c0d80 <__aeabi_dcmpgt>
   c1d8a:	2800      	cmp	r0, #0
   c1d8c:	f43f af7b 	beq.w	c1c86 <_strtod_l+0xa0e>
   c1d90:	e4c4      	b.n	c171c <_strtod_l+0x4a4>
   c1d92:	9b04      	ldr	r3, [sp, #16]
   c1d94:	b333      	cbz	r3, c1de4 <_strtod_l+0xb6c>
   c1d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c1d98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c1d9c:	d822      	bhi.n	c1de4 <_strtod_l+0xb6c>
   c1d9e:	a32e      	add	r3, pc, #184	; (adr r3, c1e58 <_strtod_l+0xbe0>)
   c1da0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1da4:	4640      	mov	r0, r8
   c1da6:	4649      	mov	r1, r9
   c1da8:	f7fe ffd6 	bl	c0d58 <__aeabi_dcmple>
   c1dac:	b1a0      	cbz	r0, c1dd8 <_strtod_l+0xb60>
   c1dae:	4649      	mov	r1, r9
   c1db0:	4640      	mov	r0, r8
   c1db2:	f7ff f82d 	bl	c0e10 <__aeabi_d2uiz>
   c1db6:	2801      	cmp	r0, #1
   c1db8:	bf38      	it	cc
   c1dba:	2001      	movcc	r0, #1
   c1dbc:	f7fe fcd6 	bl	c076c <__aeabi_ui2d>
   c1dc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1dc2:	4680      	mov	r8, r0
   c1dc4:	4689      	mov	r9, r1
   c1dc6:	bb23      	cbnz	r3, c1e12 <_strtod_l+0xb9a>
   c1dc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c1dcc:	9010      	str	r0, [sp, #64]	; 0x40
   c1dce:	9311      	str	r3, [sp, #68]	; 0x44
   c1dd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c1dd4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c1dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c1dda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c1ddc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c1de0:	1a9b      	subs	r3, r3, r2
   c1de2:	9309      	str	r3, [sp, #36]	; 0x24
   c1de4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c1de8:	eeb0 0a48 	vmov.f32	s0, s16
   c1dec:	eef0 0a68 	vmov.f32	s1, s17
   c1df0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c1df4:	f001 f954 	bl	c30a0 <__ulp>
   c1df8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c1dfc:	ec53 2b10 	vmov	r2, r3, d0
   c1e00:	f7fe fd2e 	bl	c0860 <__aeabi_dmul>
   c1e04:	ec53 2b18 	vmov	r2, r3, d8
   c1e08:	f7fe fb74 	bl	c04f4 <__adddf3>
   c1e0c:	4682      	mov	sl, r0
   c1e0e:	468b      	mov	fp, r1
   c1e10:	e78d      	b.n	c1d2e <_strtod_l+0xab6>
   c1e12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c1e16:	e7db      	b.n	c1dd0 <_strtod_l+0xb58>
   c1e18:	a311      	add	r3, pc, #68	; (adr r3, c1e60 <_strtod_l+0xbe8>)
   c1e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1e1e:	f7fe ff91 	bl	c0d44 <__aeabi_dcmplt>
   c1e22:	e7b2      	b.n	c1d8a <_strtod_l+0xb12>
   c1e24:	2300      	movs	r3, #0
   c1e26:	930a      	str	r3, [sp, #40]	; 0x28
   c1e28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c1e2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c1e2c:	6013      	str	r3, [r2, #0]
   c1e2e:	f7ff ba6b 	b.w	c1308 <_strtod_l+0x90>
   c1e32:	2a65      	cmp	r2, #101	; 0x65
   c1e34:	f43f ab5f 	beq.w	c14f6 <_strtod_l+0x27e>
   c1e38:	2a45      	cmp	r2, #69	; 0x45
   c1e3a:	f43f ab5c 	beq.w	c14f6 <_strtod_l+0x27e>
   c1e3e:	2301      	movs	r3, #1
   c1e40:	f7ff bb94 	b.w	c156c <_strtod_l+0x2f4>
   c1e44:	f3af 8000 	nop.w
   c1e48:	94a03595 	.word	0x94a03595
   c1e4c:	3fdfffff 	.word	0x3fdfffff
   c1e50:	35afe535 	.word	0x35afe535
   c1e54:	3fe00000 	.word	0x3fe00000
   c1e58:	ffc00000 	.word	0xffc00000
   c1e5c:	41dfffff 	.word	0x41dfffff
   c1e60:	94a03595 	.word	0x94a03595
   c1e64:	3fcfffff 	.word	0x3fcfffff
   c1e68:	3ff00000 	.word	0x3ff00000
   c1e6c:	7ff00000 	.word	0x7ff00000
   c1e70:	7fe00000 	.word	0x7fe00000
   c1e74:	7c9fffff 	.word	0x7c9fffff
   c1e78:	3fe00000 	.word	0x3fe00000
   c1e7c:	bff00000 	.word	0xbff00000
   c1e80:	7fefffff 	.word	0x7fefffff

000c1e84 <strtof>:
   c1e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1e88:	f8df 80ac 	ldr.w	r8, [pc, #172]	; c1f38 <strtof+0xb4>
   c1e8c:	4b26      	ldr	r3, [pc, #152]	; (c1f28 <strtof+0xa4>)
   c1e8e:	460a      	mov	r2, r1
   c1e90:	ed2d 8b02 	vpush	{d8}
   c1e94:	4601      	mov	r1, r0
   c1e96:	f8d8 0000 	ldr.w	r0, [r8]
   c1e9a:	f7ff f9ed 	bl	c1278 <_strtod_l>
   c1e9e:	ec55 4b10 	vmov	r4, r5, d0
   c1ea2:	ee10 2a10 	vmov	r2, s0
   c1ea6:	ee10 0a10 	vmov	r0, s0
   c1eaa:	462b      	mov	r3, r5
   c1eac:	4629      	mov	r1, r5
   c1eae:	f7fe ff71 	bl	c0d94 <__aeabi_dcmpun>
   c1eb2:	b190      	cbz	r0, c1eda <strtof+0x56>
   c1eb4:	2d00      	cmp	r5, #0
   c1eb6:	481d      	ldr	r0, [pc, #116]	; (c1f2c <strtof+0xa8>)
   c1eb8:	da09      	bge.n	c1ece <strtof+0x4a>
   c1eba:	f001 fa65 	bl	c3388 <nanf>
   c1ebe:	eeb1 8a40 	vneg.f32	s16, s0
   c1ec2:	eeb0 0a48 	vmov.f32	s0, s16
   c1ec6:	ecbd 8b02 	vpop	{d8}
   c1eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1ece:	ecbd 8b02 	vpop	{d8}
   c1ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c1ed6:	f001 ba57 	b.w	c3388 <nanf>
   c1eda:	4620      	mov	r0, r4
   c1edc:	4629      	mov	r1, r5
   c1ede:	f7fe ffb7 	bl	c0e50 <__aeabi_d2f>
   c1ee2:	ee08 0a10 	vmov	s16, r0
   c1ee6:	eddf 7a12 	vldr	s15, [pc, #72]	; c1f30 <strtof+0xac>
   c1eea:	eeb0 7ac8 	vabs.f32	s14, s16
   c1eee:	eeb4 7a67 	vcmp.f32	s14, s15
   c1ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1ef6:	dde4      	ble.n	c1ec2 <strtof+0x3e>
   c1ef8:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   c1efc:	4b0d      	ldr	r3, [pc, #52]	; (c1f34 <strtof+0xb0>)
   c1efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c1f02:	4620      	mov	r0, r4
   c1f04:	4639      	mov	r1, r7
   c1f06:	f7fe ff45 	bl	c0d94 <__aeabi_dcmpun>
   c1f0a:	b940      	cbnz	r0, c1f1e <strtof+0x9a>
   c1f0c:	4b09      	ldr	r3, [pc, #36]	; (c1f34 <strtof+0xb0>)
   c1f0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c1f12:	4620      	mov	r0, r4
   c1f14:	4639      	mov	r1, r7
   c1f16:	f7fe ff1f 	bl	c0d58 <__aeabi_dcmple>
   c1f1a:	2800      	cmp	r0, #0
   c1f1c:	d0d1      	beq.n	c1ec2 <strtof+0x3e>
   c1f1e:	f8d8 3000 	ldr.w	r3, [r8]
   c1f22:	2222      	movs	r2, #34	; 0x22
   c1f24:	601a      	str	r2, [r3, #0]
   c1f26:	e7cc      	b.n	c1ec2 <strtof+0x3e>
   c1f28:	2003d708 	.word	0x2003d708
   c1f2c:	000c4fe0 	.word	0x000c4fe0
   c1f30:	7f7fffff 	.word	0x7f7fffff
   c1f34:	7fefffff 	.word	0x7fefffff
   c1f38:	2003d69c 	.word	0x2003d69c

000c1f3c <__strtok_r>:
   c1f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c1f3e:	b908      	cbnz	r0, c1f44 <__strtok_r+0x8>
   c1f40:	6810      	ldr	r0, [r2, #0]
   c1f42:	b188      	cbz	r0, c1f68 <__strtok_r+0x2c>
   c1f44:	4604      	mov	r4, r0
   c1f46:	4620      	mov	r0, r4
   c1f48:	f814 5b01 	ldrb.w	r5, [r4], #1
   c1f4c:	460f      	mov	r7, r1
   c1f4e:	f817 6b01 	ldrb.w	r6, [r7], #1
   c1f52:	b91e      	cbnz	r6, c1f5c <__strtok_r+0x20>
   c1f54:	b965      	cbnz	r5, c1f70 <__strtok_r+0x34>
   c1f56:	6015      	str	r5, [r2, #0]
   c1f58:	4628      	mov	r0, r5
   c1f5a:	e005      	b.n	c1f68 <__strtok_r+0x2c>
   c1f5c:	42b5      	cmp	r5, r6
   c1f5e:	d1f6      	bne.n	c1f4e <__strtok_r+0x12>
   c1f60:	2b00      	cmp	r3, #0
   c1f62:	d1f0      	bne.n	c1f46 <__strtok_r+0xa>
   c1f64:	6014      	str	r4, [r2, #0]
   c1f66:	7003      	strb	r3, [r0, #0]
   c1f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c1f6a:	461c      	mov	r4, r3
   c1f6c:	e00c      	b.n	c1f88 <__strtok_r+0x4c>
   c1f6e:	b915      	cbnz	r5, c1f76 <__strtok_r+0x3a>
   c1f70:	f814 3b01 	ldrb.w	r3, [r4], #1
   c1f74:	460e      	mov	r6, r1
   c1f76:	f816 5b01 	ldrb.w	r5, [r6], #1
   c1f7a:	42ab      	cmp	r3, r5
   c1f7c:	d1f7      	bne.n	c1f6e <__strtok_r+0x32>
   c1f7e:	2b00      	cmp	r3, #0
   c1f80:	d0f3      	beq.n	c1f6a <__strtok_r+0x2e>
   c1f82:	2300      	movs	r3, #0
   c1f84:	f804 3c01 	strb.w	r3, [r4, #-1]
   c1f88:	6014      	str	r4, [r2, #0]
   c1f8a:	e7ed      	b.n	c1f68 <__strtok_r+0x2c>

000c1f8c <strtok_r>:
   c1f8c:	2301      	movs	r3, #1
   c1f8e:	f7ff bfd5 	b.w	c1f3c <__strtok_r>
	...

000c1f94 <_strtol_l.constprop.0>:
   c1f94:	2b01      	cmp	r3, #1
   c1f96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c1f9a:	d001      	beq.n	c1fa0 <_strtol_l.constprop.0+0xc>
   c1f9c:	2b24      	cmp	r3, #36	; 0x24
   c1f9e:	d906      	bls.n	c1fae <_strtol_l.constprop.0+0x1a>
   c1fa0:	f7fb f88e 	bl	bd0c0 <__errno>
   c1fa4:	2316      	movs	r3, #22
   c1fa6:	6003      	str	r3, [r0, #0]
   c1fa8:	2000      	movs	r0, #0
   c1faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c1fae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c2094 <_strtol_l.constprop.0+0x100>
   c1fb2:	460d      	mov	r5, r1
   c1fb4:	462e      	mov	r6, r5
   c1fb6:	f815 4b01 	ldrb.w	r4, [r5], #1
   c1fba:	f814 700c 	ldrb.w	r7, [r4, ip]
   c1fbe:	f017 0708 	ands.w	r7, r7, #8
   c1fc2:	d1f7      	bne.n	c1fb4 <_strtol_l.constprop.0+0x20>
   c1fc4:	2c2d      	cmp	r4, #45	; 0x2d
   c1fc6:	d132      	bne.n	c202e <_strtol_l.constprop.0+0x9a>
   c1fc8:	782c      	ldrb	r4, [r5, #0]
   c1fca:	2701      	movs	r7, #1
   c1fcc:	1cb5      	adds	r5, r6, #2
   c1fce:	2b00      	cmp	r3, #0
   c1fd0:	d05b      	beq.n	c208a <_strtol_l.constprop.0+0xf6>
   c1fd2:	2b10      	cmp	r3, #16
   c1fd4:	d109      	bne.n	c1fea <_strtol_l.constprop.0+0x56>
   c1fd6:	2c30      	cmp	r4, #48	; 0x30
   c1fd8:	d107      	bne.n	c1fea <_strtol_l.constprop.0+0x56>
   c1fda:	782c      	ldrb	r4, [r5, #0]
   c1fdc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c1fe0:	2c58      	cmp	r4, #88	; 0x58
   c1fe2:	d14d      	bne.n	c2080 <_strtol_l.constprop.0+0xec>
   c1fe4:	786c      	ldrb	r4, [r5, #1]
   c1fe6:	2310      	movs	r3, #16
   c1fe8:	3502      	adds	r5, #2
   c1fea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c1fee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c1ff2:	f04f 0c00 	mov.w	ip, #0
   c1ff6:	fbb8 f9f3 	udiv	r9, r8, r3
   c1ffa:	4666      	mov	r6, ip
   c1ffc:	fb03 8a19 	mls	sl, r3, r9, r8
   c2000:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c2004:	f1be 0f09 	cmp.w	lr, #9
   c2008:	d816      	bhi.n	c2038 <_strtol_l.constprop.0+0xa4>
   c200a:	4674      	mov	r4, lr
   c200c:	42a3      	cmp	r3, r4
   c200e:	dd24      	ble.n	c205a <_strtol_l.constprop.0+0xc6>
   c2010:	f1bc 0f00 	cmp.w	ip, #0
   c2014:	db1e      	blt.n	c2054 <_strtol_l.constprop.0+0xc0>
   c2016:	45b1      	cmp	r9, r6
   c2018:	d31c      	bcc.n	c2054 <_strtol_l.constprop.0+0xc0>
   c201a:	d101      	bne.n	c2020 <_strtol_l.constprop.0+0x8c>
   c201c:	45a2      	cmp	sl, r4
   c201e:	db19      	blt.n	c2054 <_strtol_l.constprop.0+0xc0>
   c2020:	fb06 4603 	mla	r6, r6, r3, r4
   c2024:	f04f 0c01 	mov.w	ip, #1
   c2028:	f815 4b01 	ldrb.w	r4, [r5], #1
   c202c:	e7e8      	b.n	c2000 <_strtol_l.constprop.0+0x6c>
   c202e:	2c2b      	cmp	r4, #43	; 0x2b
   c2030:	bf04      	itt	eq
   c2032:	782c      	ldrbeq	r4, [r5, #0]
   c2034:	1cb5      	addeq	r5, r6, #2
   c2036:	e7ca      	b.n	c1fce <_strtol_l.constprop.0+0x3a>
   c2038:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c203c:	f1be 0f19 	cmp.w	lr, #25
   c2040:	d801      	bhi.n	c2046 <_strtol_l.constprop.0+0xb2>
   c2042:	3c37      	subs	r4, #55	; 0x37
   c2044:	e7e2      	b.n	c200c <_strtol_l.constprop.0+0x78>
   c2046:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c204a:	f1be 0f19 	cmp.w	lr, #25
   c204e:	d804      	bhi.n	c205a <_strtol_l.constprop.0+0xc6>
   c2050:	3c57      	subs	r4, #87	; 0x57
   c2052:	e7db      	b.n	c200c <_strtol_l.constprop.0+0x78>
   c2054:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c2058:	e7e6      	b.n	c2028 <_strtol_l.constprop.0+0x94>
   c205a:	f1bc 0f00 	cmp.w	ip, #0
   c205e:	da05      	bge.n	c206c <_strtol_l.constprop.0+0xd8>
   c2060:	2322      	movs	r3, #34	; 0x22
   c2062:	6003      	str	r3, [r0, #0]
   c2064:	4646      	mov	r6, r8
   c2066:	b942      	cbnz	r2, c207a <_strtol_l.constprop.0+0xe6>
   c2068:	4630      	mov	r0, r6
   c206a:	e79e      	b.n	c1faa <_strtol_l.constprop.0+0x16>
   c206c:	b107      	cbz	r7, c2070 <_strtol_l.constprop.0+0xdc>
   c206e:	4276      	negs	r6, r6
   c2070:	2a00      	cmp	r2, #0
   c2072:	d0f9      	beq.n	c2068 <_strtol_l.constprop.0+0xd4>
   c2074:	f1bc 0f00 	cmp.w	ip, #0
   c2078:	d000      	beq.n	c207c <_strtol_l.constprop.0+0xe8>
   c207a:	1e69      	subs	r1, r5, #1
   c207c:	6011      	str	r1, [r2, #0]
   c207e:	e7f3      	b.n	c2068 <_strtol_l.constprop.0+0xd4>
   c2080:	2430      	movs	r4, #48	; 0x30
   c2082:	2b00      	cmp	r3, #0
   c2084:	d1b1      	bne.n	c1fea <_strtol_l.constprop.0+0x56>
   c2086:	2308      	movs	r3, #8
   c2088:	e7af      	b.n	c1fea <_strtol_l.constprop.0+0x56>
   c208a:	2c30      	cmp	r4, #48	; 0x30
   c208c:	d0a5      	beq.n	c1fda <_strtol_l.constprop.0+0x46>
   c208e:	230a      	movs	r3, #10
   c2090:	e7ab      	b.n	c1fea <_strtol_l.constprop.0+0x56>
   c2092:	bf00      	nop
   c2094:	000c52e1 	.word	0x000c52e1

000c2098 <strtol>:
   c2098:	4613      	mov	r3, r2
   c209a:	460a      	mov	r2, r1
   c209c:	4601      	mov	r1, r0
   c209e:	4802      	ldr	r0, [pc, #8]	; (c20a8 <strtol+0x10>)
   c20a0:	6800      	ldr	r0, [r0, #0]
   c20a2:	f7ff bf77 	b.w	c1f94 <_strtol_l.constprop.0>
   c20a6:	bf00      	nop
   c20a8:	2003d69c 	.word	0x2003d69c

000c20ac <close>:
   c20ac:	4b02      	ldr	r3, [pc, #8]	; (c20b8 <close+0xc>)
   c20ae:	4601      	mov	r1, r0
   c20b0:	6818      	ldr	r0, [r3, #0]
   c20b2:	f000 b8c9 	b.w	c2248 <_close_r>
   c20b6:	bf00      	nop
   c20b8:	2003d69c 	.word	0x2003d69c

000c20bc <fstat>:
   c20bc:	4b02      	ldr	r3, [pc, #8]	; (c20c8 <fstat+0xc>)
   c20be:	460a      	mov	r2, r1
   c20c0:	4601      	mov	r1, r0
   c20c2:	6818      	ldr	r0, [r3, #0]
   c20c4:	f000 b8d0 	b.w	c2268 <_fstat_r>
   c20c8:	2003d69c 	.word	0x2003d69c

000c20cc <lseek>:
   c20cc:	4613      	mov	r3, r2
   c20ce:	460a      	mov	r2, r1
   c20d0:	4601      	mov	r1, r0
   c20d2:	4802      	ldr	r0, [pc, #8]	; (c20dc <lseek+0x10>)
   c20d4:	6800      	ldr	r0, [r0, #0]
   c20d6:	f000 bc4d 	b.w	c2974 <_lseek_r>
   c20da:	bf00      	nop
   c20dc:	2003d69c 	.word	0x2003d69c

000c20e0 <open>:
   c20e0:	b40e      	push	{r1, r2, r3}
   c20e2:	b503      	push	{r0, r1, lr}
   c20e4:	ab03      	add	r3, sp, #12
   c20e6:	4601      	mov	r1, r0
   c20e8:	4806      	ldr	r0, [pc, #24]	; (c2104 <open+0x24>)
   c20ea:	f853 2b04 	ldr.w	r2, [r3], #4
   c20ee:	9301      	str	r3, [sp, #4]
   c20f0:	6800      	ldr	r0, [r0, #0]
   c20f2:	9b04      	ldr	r3, [sp, #16]
   c20f4:	f001 f924 	bl	c3340 <_open_r>
   c20f8:	b002      	add	sp, #8
   c20fa:	f85d eb04 	ldr.w	lr, [sp], #4
   c20fe:	b003      	add	sp, #12
   c2100:	4770      	bx	lr
   c2102:	bf00      	nop
   c2104:	2003d69c 	.word	0x2003d69c

000c2108 <read>:
   c2108:	4613      	mov	r3, r2
   c210a:	460a      	mov	r2, r1
   c210c:	4601      	mov	r1, r0
   c210e:	4802      	ldr	r0, [pc, #8]	; (c2118 <read+0x10>)
   c2110:	6800      	ldr	r0, [r0, #0]
   c2112:	f001 b927 	b.w	c3364 <_read_r>
   c2116:	bf00      	nop
   c2118:	2003d69c 	.word	0x2003d69c

000c211c <unlink>:
   c211c:	4b02      	ldr	r3, [pc, #8]	; (c2128 <unlink+0xc>)
   c211e:	4601      	mov	r1, r0
   c2120:	6818      	ldr	r0, [r3, #0]
   c2122:	f000 b80d 	b.w	c2140 <_unlink_r>
   c2126:	bf00      	nop
   c2128:	2003d69c 	.word	0x2003d69c

000c212c <write>:
   c212c:	4613      	mov	r3, r2
   c212e:	460a      	mov	r2, r1
   c2130:	4601      	mov	r1, r0
   c2132:	4802      	ldr	r0, [pc, #8]	; (c213c <write+0x10>)
   c2134:	6800      	ldr	r0, [r0, #0]
   c2136:	f000 b813 	b.w	c2160 <_write_r>
   c213a:	bf00      	nop
   c213c:	2003d69c 	.word	0x2003d69c

000c2140 <_unlink_r>:
   c2140:	b538      	push	{r3, r4, r5, lr}
   c2142:	4d06      	ldr	r5, [pc, #24]	; (c215c <_unlink_r+0x1c>)
   c2144:	2300      	movs	r3, #0
   c2146:	4604      	mov	r4, r0
   c2148:	4608      	mov	r0, r1
   c214a:	602b      	str	r3, [r5, #0]
   c214c:	f7fa fd42 	bl	bcbd4 <_unlink>
   c2150:	1c43      	adds	r3, r0, #1
   c2152:	d102      	bne.n	c215a <_unlink_r+0x1a>
   c2154:	682b      	ldr	r3, [r5, #0]
   c2156:	b103      	cbz	r3, c215a <_unlink_r+0x1a>
   c2158:	6023      	str	r3, [r4, #0]
   c215a:	bd38      	pop	{r3, r4, r5, pc}
   c215c:	2003e7f0 	.word	0x2003e7f0

000c2160 <_write_r>:
   c2160:	b538      	push	{r3, r4, r5, lr}
   c2162:	4d07      	ldr	r5, [pc, #28]	; (c2180 <_write_r+0x20>)
   c2164:	4604      	mov	r4, r0
   c2166:	4608      	mov	r0, r1
   c2168:	4611      	mov	r1, r2
   c216a:	2200      	movs	r2, #0
   c216c:	602a      	str	r2, [r5, #0]
   c216e:	461a      	mov	r2, r3
   c2170:	f7fa fcf8 	bl	bcb64 <_write>
   c2174:	1c43      	adds	r3, r0, #1
   c2176:	d102      	bne.n	c217e <_write_r+0x1e>
   c2178:	682b      	ldr	r3, [r5, #0]
   c217a:	b103      	cbz	r3, c217e <_write_r+0x1e>
   c217c:	6023      	str	r3, [r4, #0]
   c217e:	bd38      	pop	{r3, r4, r5, pc}
   c2180:	2003e7f0 	.word	0x2003e7f0

000c2184 <__register_exitproc>:
   c2184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c2188:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c2244 <__register_exitproc+0xc0>
   c218c:	4606      	mov	r6, r0
   c218e:	f8d8 0000 	ldr.w	r0, [r8]
   c2192:	461f      	mov	r7, r3
   c2194:	460d      	mov	r5, r1
   c2196:	4691      	mov	r9, r2
   c2198:	f000 fbe8 	bl	c296c <__retarget_lock_acquire_recursive>
   c219c:	4b25      	ldr	r3, [pc, #148]	; (c2234 <__register_exitproc+0xb0>)
   c219e:	681c      	ldr	r4, [r3, #0]
   c21a0:	b934      	cbnz	r4, c21b0 <__register_exitproc+0x2c>
   c21a2:	4c25      	ldr	r4, [pc, #148]	; (c2238 <__register_exitproc+0xb4>)
   c21a4:	601c      	str	r4, [r3, #0]
   c21a6:	4b25      	ldr	r3, [pc, #148]	; (c223c <__register_exitproc+0xb8>)
   c21a8:	b113      	cbz	r3, c21b0 <__register_exitproc+0x2c>
   c21aa:	681b      	ldr	r3, [r3, #0]
   c21ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c21b0:	6863      	ldr	r3, [r4, #4]
   c21b2:	2b1f      	cmp	r3, #31
   c21b4:	dd07      	ble.n	c21c6 <__register_exitproc+0x42>
   c21b6:	f8d8 0000 	ldr.w	r0, [r8]
   c21ba:	f000 fbd9 	bl	c2970 <__retarget_lock_release_recursive>
   c21be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c21c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c21c6:	b34e      	cbz	r6, c221c <__register_exitproc+0x98>
   c21c8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c21cc:	b988      	cbnz	r0, c21f2 <__register_exitproc+0x6e>
   c21ce:	4b1c      	ldr	r3, [pc, #112]	; (c2240 <__register_exitproc+0xbc>)
   c21d0:	b923      	cbnz	r3, c21dc <__register_exitproc+0x58>
   c21d2:	f8d8 0000 	ldr.w	r0, [r8]
   c21d6:	f000 fbca 	bl	c296e <__retarget_lock_release>
   c21da:	e7f0      	b.n	c21be <__register_exitproc+0x3a>
   c21dc:	f44f 7084 	mov.w	r0, #264	; 0x108
   c21e0:	f7fa ff26 	bl	bd030 <malloc>
   c21e4:	2800      	cmp	r0, #0
   c21e6:	d0f4      	beq.n	c21d2 <__register_exitproc+0x4e>
   c21e8:	2300      	movs	r3, #0
   c21ea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c21ee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c21f2:	6863      	ldr	r3, [r4, #4]
   c21f4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c21f8:	2201      	movs	r2, #1
   c21fa:	409a      	lsls	r2, r3
   c21fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c2200:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c2204:	4313      	orrs	r3, r2
   c2206:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c220a:	2e02      	cmp	r6, #2
   c220c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c2210:	bf02      	ittt	eq
   c2212:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c2216:	4313      	orreq	r3, r2
   c2218:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c221c:	6863      	ldr	r3, [r4, #4]
   c221e:	f8d8 0000 	ldr.w	r0, [r8]
   c2222:	1c5a      	adds	r2, r3, #1
   c2224:	3302      	adds	r3, #2
   c2226:	6062      	str	r2, [r4, #4]
   c2228:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c222c:	f000 fba0 	bl	c2970 <__retarget_lock_release_recursive>
   c2230:	2000      	movs	r0, #0
   c2232:	e7c6      	b.n	c21c2 <__register_exitproc+0x3e>
   c2234:	2003e7e8 	.word	0x2003e7e8
   c2238:	2003e75c 	.word	0x2003e75c
   c223c:	00000000 	.word	0x00000000
   c2240:	000bd031 	.word	0x000bd031
   c2244:	2003d700 	.word	0x2003d700

000c2248 <_close_r>:
   c2248:	b538      	push	{r3, r4, r5, lr}
   c224a:	4d06      	ldr	r5, [pc, #24]	; (c2264 <_close_r+0x1c>)
   c224c:	2300      	movs	r3, #0
   c224e:	4604      	mov	r4, r0
   c2250:	4608      	mov	r0, r1
   c2252:	602b      	str	r3, [r5, #0]
   c2254:	f7fa fc96 	bl	bcb84 <_close>
   c2258:	1c43      	adds	r3, r0, #1
   c225a:	d102      	bne.n	c2262 <_close_r+0x1a>
   c225c:	682b      	ldr	r3, [r5, #0]
   c225e:	b103      	cbz	r3, c2262 <_close_r+0x1a>
   c2260:	6023      	str	r3, [r4, #0]
   c2262:	bd38      	pop	{r3, r4, r5, pc}
   c2264:	2003e7f0 	.word	0x2003e7f0

000c2268 <_fstat_r>:
   c2268:	b538      	push	{r3, r4, r5, lr}
   c226a:	4d07      	ldr	r5, [pc, #28]	; (c2288 <_fstat_r+0x20>)
   c226c:	2300      	movs	r3, #0
   c226e:	4604      	mov	r4, r0
   c2270:	4608      	mov	r0, r1
   c2272:	4611      	mov	r1, r2
   c2274:	602b      	str	r3, [r5, #0]
   c2276:	f7fa fc8d 	bl	bcb94 <_fstat>
   c227a:	1c43      	adds	r3, r0, #1
   c227c:	d102      	bne.n	c2284 <_fstat_r+0x1c>
   c227e:	682b      	ldr	r3, [r5, #0]
   c2280:	b103      	cbz	r3, c2284 <_fstat_r+0x1c>
   c2282:	6023      	str	r3, [r4, #0]
   c2284:	bd38      	pop	{r3, r4, r5, pc}
   c2286:	bf00      	nop
   c2288:	2003e7f0 	.word	0x2003e7f0

000c228c <rshift>:
   c228c:	6903      	ldr	r3, [r0, #16]
   c228e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c2292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c2296:	ea4f 1261 	mov.w	r2, r1, asr #5
   c229a:	f100 0414 	add.w	r4, r0, #20
   c229e:	dd45      	ble.n	c232c <rshift+0xa0>
   c22a0:	f011 011f 	ands.w	r1, r1, #31
   c22a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c22a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c22ac:	d10c      	bne.n	c22c8 <rshift+0x3c>
   c22ae:	f100 0710 	add.w	r7, r0, #16
   c22b2:	4629      	mov	r1, r5
   c22b4:	42b1      	cmp	r1, r6
   c22b6:	d334      	bcc.n	c2322 <rshift+0x96>
   c22b8:	1a9b      	subs	r3, r3, r2
   c22ba:	009b      	lsls	r3, r3, #2
   c22bc:	1eea      	subs	r2, r5, #3
   c22be:	4296      	cmp	r6, r2
   c22c0:	bf38      	it	cc
   c22c2:	2300      	movcc	r3, #0
   c22c4:	4423      	add	r3, r4
   c22c6:	e015      	b.n	c22f4 <rshift+0x68>
   c22c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c22cc:	f1c1 0820 	rsb	r8, r1, #32
   c22d0:	40cf      	lsrs	r7, r1
   c22d2:	f105 0e04 	add.w	lr, r5, #4
   c22d6:	46a1      	mov	r9, r4
   c22d8:	4576      	cmp	r6, lr
   c22da:	46f4      	mov	ip, lr
   c22dc:	d815      	bhi.n	c230a <rshift+0x7e>
   c22de:	1a9a      	subs	r2, r3, r2
   c22e0:	0092      	lsls	r2, r2, #2
   c22e2:	3a04      	subs	r2, #4
   c22e4:	3501      	adds	r5, #1
   c22e6:	42ae      	cmp	r6, r5
   c22e8:	bf38      	it	cc
   c22ea:	2200      	movcc	r2, #0
   c22ec:	18a3      	adds	r3, r4, r2
   c22ee:	50a7      	str	r7, [r4, r2]
   c22f0:	b107      	cbz	r7, c22f4 <rshift+0x68>
   c22f2:	3304      	adds	r3, #4
   c22f4:	1b1a      	subs	r2, r3, r4
   c22f6:	42a3      	cmp	r3, r4
   c22f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c22fc:	bf08      	it	eq
   c22fe:	2300      	moveq	r3, #0
   c2300:	6102      	str	r2, [r0, #16]
   c2302:	bf08      	it	eq
   c2304:	6143      	streq	r3, [r0, #20]
   c2306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c230a:	f8dc c000 	ldr.w	ip, [ip]
   c230e:	fa0c fc08 	lsl.w	ip, ip, r8
   c2312:	ea4c 0707 	orr.w	r7, ip, r7
   c2316:	f849 7b04 	str.w	r7, [r9], #4
   c231a:	f85e 7b04 	ldr.w	r7, [lr], #4
   c231e:	40cf      	lsrs	r7, r1
   c2320:	e7da      	b.n	c22d8 <rshift+0x4c>
   c2322:	f851 cb04 	ldr.w	ip, [r1], #4
   c2326:	f847 cf04 	str.w	ip, [r7, #4]!
   c232a:	e7c3      	b.n	c22b4 <rshift+0x28>
   c232c:	4623      	mov	r3, r4
   c232e:	e7e1      	b.n	c22f4 <rshift+0x68>

000c2330 <__hexdig_fun>:
   c2330:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c2334:	2b09      	cmp	r3, #9
   c2336:	d802      	bhi.n	c233e <__hexdig_fun+0xe>
   c2338:	3820      	subs	r0, #32
   c233a:	b2c0      	uxtb	r0, r0
   c233c:	4770      	bx	lr
   c233e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c2342:	2b05      	cmp	r3, #5
   c2344:	d801      	bhi.n	c234a <__hexdig_fun+0x1a>
   c2346:	3847      	subs	r0, #71	; 0x47
   c2348:	e7f7      	b.n	c233a <__hexdig_fun+0xa>
   c234a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c234e:	2b05      	cmp	r3, #5
   c2350:	d801      	bhi.n	c2356 <__hexdig_fun+0x26>
   c2352:	3827      	subs	r0, #39	; 0x27
   c2354:	e7f1      	b.n	c233a <__hexdig_fun+0xa>
   c2356:	2000      	movs	r0, #0
   c2358:	4770      	bx	lr
	...

000c235c <__gethex>:
   c235c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2360:	ed2d 8b02 	vpush	{d8}
   c2364:	b089      	sub	sp, #36	; 0x24
   c2366:	ee08 0a10 	vmov	s16, r0
   c236a:	9304      	str	r3, [sp, #16]
   c236c:	4bb4      	ldr	r3, [pc, #720]	; (c2640 <__gethex+0x2e4>)
   c236e:	681b      	ldr	r3, [r3, #0]
   c2370:	9301      	str	r3, [sp, #4]
   c2372:	4618      	mov	r0, r3
   c2374:	468b      	mov	fp, r1
   c2376:	4690      	mov	r8, r2
   c2378:	f7fe ff1d 	bl	c11b6 <strlen>
   c237c:	9b01      	ldr	r3, [sp, #4]
   c237e:	f8db 2000 	ldr.w	r2, [fp]
   c2382:	4403      	add	r3, r0
   c2384:	4682      	mov	sl, r0
   c2386:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c238a:	9305      	str	r3, [sp, #20]
   c238c:	1c93      	adds	r3, r2, #2
   c238e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c2392:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c2396:	32fe      	adds	r2, #254	; 0xfe
   c2398:	18d1      	adds	r1, r2, r3
   c239a:	461f      	mov	r7, r3
   c239c:	f813 0b01 	ldrb.w	r0, [r3], #1
   c23a0:	9100      	str	r1, [sp, #0]
   c23a2:	2830      	cmp	r0, #48	; 0x30
   c23a4:	d0f8      	beq.n	c2398 <__gethex+0x3c>
   c23a6:	f7ff ffc3 	bl	c2330 <__hexdig_fun>
   c23aa:	4604      	mov	r4, r0
   c23ac:	2800      	cmp	r0, #0
   c23ae:	d13a      	bne.n	c2426 <__gethex+0xca>
   c23b0:	9901      	ldr	r1, [sp, #4]
   c23b2:	4652      	mov	r2, sl
   c23b4:	4638      	mov	r0, r7
   c23b6:	f7fe ff06 	bl	c11c6 <strncmp>
   c23ba:	4605      	mov	r5, r0
   c23bc:	2800      	cmp	r0, #0
   c23be:	d168      	bne.n	c2492 <__gethex+0x136>
   c23c0:	f817 000a 	ldrb.w	r0, [r7, sl]
   c23c4:	eb07 060a 	add.w	r6, r7, sl
   c23c8:	f7ff ffb2 	bl	c2330 <__hexdig_fun>
   c23cc:	2800      	cmp	r0, #0
   c23ce:	d062      	beq.n	c2496 <__gethex+0x13a>
   c23d0:	4633      	mov	r3, r6
   c23d2:	7818      	ldrb	r0, [r3, #0]
   c23d4:	2830      	cmp	r0, #48	; 0x30
   c23d6:	461f      	mov	r7, r3
   c23d8:	f103 0301 	add.w	r3, r3, #1
   c23dc:	d0f9      	beq.n	c23d2 <__gethex+0x76>
   c23de:	f7ff ffa7 	bl	c2330 <__hexdig_fun>
   c23e2:	2301      	movs	r3, #1
   c23e4:	fab0 f480 	clz	r4, r0
   c23e8:	0964      	lsrs	r4, r4, #5
   c23ea:	4635      	mov	r5, r6
   c23ec:	9300      	str	r3, [sp, #0]
   c23ee:	463a      	mov	r2, r7
   c23f0:	4616      	mov	r6, r2
   c23f2:	3201      	adds	r2, #1
   c23f4:	7830      	ldrb	r0, [r6, #0]
   c23f6:	f7ff ff9b 	bl	c2330 <__hexdig_fun>
   c23fa:	2800      	cmp	r0, #0
   c23fc:	d1f8      	bne.n	c23f0 <__gethex+0x94>
   c23fe:	9901      	ldr	r1, [sp, #4]
   c2400:	4652      	mov	r2, sl
   c2402:	4630      	mov	r0, r6
   c2404:	f7fe fedf 	bl	c11c6 <strncmp>
   c2408:	b980      	cbnz	r0, c242c <__gethex+0xd0>
   c240a:	b94d      	cbnz	r5, c2420 <__gethex+0xc4>
   c240c:	eb06 050a 	add.w	r5, r6, sl
   c2410:	462a      	mov	r2, r5
   c2412:	4616      	mov	r6, r2
   c2414:	3201      	adds	r2, #1
   c2416:	7830      	ldrb	r0, [r6, #0]
   c2418:	f7ff ff8a 	bl	c2330 <__hexdig_fun>
   c241c:	2800      	cmp	r0, #0
   c241e:	d1f8      	bne.n	c2412 <__gethex+0xb6>
   c2420:	1bad      	subs	r5, r5, r6
   c2422:	00ad      	lsls	r5, r5, #2
   c2424:	e004      	b.n	c2430 <__gethex+0xd4>
   c2426:	2400      	movs	r4, #0
   c2428:	4625      	mov	r5, r4
   c242a:	e7e0      	b.n	c23ee <__gethex+0x92>
   c242c:	2d00      	cmp	r5, #0
   c242e:	d1f7      	bne.n	c2420 <__gethex+0xc4>
   c2430:	7833      	ldrb	r3, [r6, #0]
   c2432:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c2436:	2b50      	cmp	r3, #80	; 0x50
   c2438:	d13b      	bne.n	c24b2 <__gethex+0x156>
   c243a:	7873      	ldrb	r3, [r6, #1]
   c243c:	2b2b      	cmp	r3, #43	; 0x2b
   c243e:	d02c      	beq.n	c249a <__gethex+0x13e>
   c2440:	2b2d      	cmp	r3, #45	; 0x2d
   c2442:	d02e      	beq.n	c24a2 <__gethex+0x146>
   c2444:	1c71      	adds	r1, r6, #1
   c2446:	f04f 0900 	mov.w	r9, #0
   c244a:	7808      	ldrb	r0, [r1, #0]
   c244c:	f7ff ff70 	bl	c2330 <__hexdig_fun>
   c2450:	1e43      	subs	r3, r0, #1
   c2452:	b2db      	uxtb	r3, r3
   c2454:	2b18      	cmp	r3, #24
   c2456:	d82c      	bhi.n	c24b2 <__gethex+0x156>
   c2458:	f1a0 0210 	sub.w	r2, r0, #16
   c245c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c2460:	f7ff ff66 	bl	c2330 <__hexdig_fun>
   c2464:	1e43      	subs	r3, r0, #1
   c2466:	b2db      	uxtb	r3, r3
   c2468:	2b18      	cmp	r3, #24
   c246a:	d91d      	bls.n	c24a8 <__gethex+0x14c>
   c246c:	f1b9 0f00 	cmp.w	r9, #0
   c2470:	d000      	beq.n	c2474 <__gethex+0x118>
   c2472:	4252      	negs	r2, r2
   c2474:	4415      	add	r5, r2
   c2476:	f8cb 1000 	str.w	r1, [fp]
   c247a:	b1e4      	cbz	r4, c24b6 <__gethex+0x15a>
   c247c:	9b00      	ldr	r3, [sp, #0]
   c247e:	2b00      	cmp	r3, #0
   c2480:	bf14      	ite	ne
   c2482:	2700      	movne	r7, #0
   c2484:	2706      	moveq	r7, #6
   c2486:	4638      	mov	r0, r7
   c2488:	b009      	add	sp, #36	; 0x24
   c248a:	ecbd 8b02 	vpop	{d8}
   c248e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2492:	463e      	mov	r6, r7
   c2494:	4625      	mov	r5, r4
   c2496:	2401      	movs	r4, #1
   c2498:	e7ca      	b.n	c2430 <__gethex+0xd4>
   c249a:	f04f 0900 	mov.w	r9, #0
   c249e:	1cb1      	adds	r1, r6, #2
   c24a0:	e7d3      	b.n	c244a <__gethex+0xee>
   c24a2:	f04f 0901 	mov.w	r9, #1
   c24a6:	e7fa      	b.n	c249e <__gethex+0x142>
   c24a8:	230a      	movs	r3, #10
   c24aa:	fb03 0202 	mla	r2, r3, r2, r0
   c24ae:	3a10      	subs	r2, #16
   c24b0:	e7d4      	b.n	c245c <__gethex+0x100>
   c24b2:	4631      	mov	r1, r6
   c24b4:	e7df      	b.n	c2476 <__gethex+0x11a>
   c24b6:	1bf3      	subs	r3, r6, r7
   c24b8:	3b01      	subs	r3, #1
   c24ba:	4621      	mov	r1, r4
   c24bc:	2b07      	cmp	r3, #7
   c24be:	dc0b      	bgt.n	c24d8 <__gethex+0x17c>
   c24c0:	ee18 0a10 	vmov	r0, s16
   c24c4:	f000 fa7a 	bl	c29bc <_Balloc>
   c24c8:	4604      	mov	r4, r0
   c24ca:	b940      	cbnz	r0, c24de <__gethex+0x182>
   c24cc:	4b5d      	ldr	r3, [pc, #372]	; (c2644 <__gethex+0x2e8>)
   c24ce:	4602      	mov	r2, r0
   c24d0:	21de      	movs	r1, #222	; 0xde
   c24d2:	485d      	ldr	r0, [pc, #372]	; (c2648 <__gethex+0x2ec>)
   c24d4:	f7fa fdfc 	bl	bd0d0 <__assert_func>
   c24d8:	3101      	adds	r1, #1
   c24da:	105b      	asrs	r3, r3, #1
   c24dc:	e7ee      	b.n	c24bc <__gethex+0x160>
   c24de:	f100 0914 	add.w	r9, r0, #20
   c24e2:	f04f 0b00 	mov.w	fp, #0
   c24e6:	f1ca 0301 	rsb	r3, sl, #1
   c24ea:	f8cd 9008 	str.w	r9, [sp, #8]
   c24ee:	f8cd b000 	str.w	fp, [sp]
   c24f2:	9306      	str	r3, [sp, #24]
   c24f4:	42b7      	cmp	r7, r6
   c24f6:	d340      	bcc.n	c257a <__gethex+0x21e>
   c24f8:	9802      	ldr	r0, [sp, #8]
   c24fa:	9b00      	ldr	r3, [sp, #0]
   c24fc:	f840 3b04 	str.w	r3, [r0], #4
   c2500:	eba0 0009 	sub.w	r0, r0, r9
   c2504:	1080      	asrs	r0, r0, #2
   c2506:	0146      	lsls	r6, r0, #5
   c2508:	6120      	str	r0, [r4, #16]
   c250a:	4618      	mov	r0, r3
   c250c:	f000 fb48 	bl	c2ba0 <__hi0bits>
   c2510:	1a30      	subs	r0, r6, r0
   c2512:	f8d8 6000 	ldr.w	r6, [r8]
   c2516:	42b0      	cmp	r0, r6
   c2518:	dd63      	ble.n	c25e2 <__gethex+0x286>
   c251a:	1b87      	subs	r7, r0, r6
   c251c:	4639      	mov	r1, r7
   c251e:	4620      	mov	r0, r4
   c2520:	f000 feec 	bl	c32fc <__any_on>
   c2524:	4682      	mov	sl, r0
   c2526:	b1a8      	cbz	r0, c2554 <__gethex+0x1f8>
   c2528:	1e7b      	subs	r3, r7, #1
   c252a:	1159      	asrs	r1, r3, #5
   c252c:	f003 021f 	and.w	r2, r3, #31
   c2530:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c2534:	f04f 0a01 	mov.w	sl, #1
   c2538:	fa0a f202 	lsl.w	r2, sl, r2
   c253c:	420a      	tst	r2, r1
   c253e:	d009      	beq.n	c2554 <__gethex+0x1f8>
   c2540:	4553      	cmp	r3, sl
   c2542:	dd05      	ble.n	c2550 <__gethex+0x1f4>
   c2544:	1eb9      	subs	r1, r7, #2
   c2546:	4620      	mov	r0, r4
   c2548:	f000 fed8 	bl	c32fc <__any_on>
   c254c:	2800      	cmp	r0, #0
   c254e:	d145      	bne.n	c25dc <__gethex+0x280>
   c2550:	f04f 0a02 	mov.w	sl, #2
   c2554:	4639      	mov	r1, r7
   c2556:	4620      	mov	r0, r4
   c2558:	f7ff fe98 	bl	c228c <rshift>
   c255c:	443d      	add	r5, r7
   c255e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c2562:	42ab      	cmp	r3, r5
   c2564:	da4c      	bge.n	c2600 <__gethex+0x2a4>
   c2566:	ee18 0a10 	vmov	r0, s16
   c256a:	4621      	mov	r1, r4
   c256c:	f000 fa66 	bl	c2a3c <_Bfree>
   c2570:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c2572:	2300      	movs	r3, #0
   c2574:	6013      	str	r3, [r2, #0]
   c2576:	27a3      	movs	r7, #163	; 0xa3
   c2578:	e785      	b.n	c2486 <__gethex+0x12a>
   c257a:	1e73      	subs	r3, r6, #1
   c257c:	9a05      	ldr	r2, [sp, #20]
   c257e:	9303      	str	r3, [sp, #12]
   c2580:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c2584:	4293      	cmp	r3, r2
   c2586:	d019      	beq.n	c25bc <__gethex+0x260>
   c2588:	f1bb 0f20 	cmp.w	fp, #32
   c258c:	d107      	bne.n	c259e <__gethex+0x242>
   c258e:	9b02      	ldr	r3, [sp, #8]
   c2590:	9a00      	ldr	r2, [sp, #0]
   c2592:	f843 2b04 	str.w	r2, [r3], #4
   c2596:	9302      	str	r3, [sp, #8]
   c2598:	2300      	movs	r3, #0
   c259a:	9300      	str	r3, [sp, #0]
   c259c:	469b      	mov	fp, r3
   c259e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c25a2:	f7ff fec5 	bl	c2330 <__hexdig_fun>
   c25a6:	9b00      	ldr	r3, [sp, #0]
   c25a8:	f000 000f 	and.w	r0, r0, #15
   c25ac:	fa00 f00b 	lsl.w	r0, r0, fp
   c25b0:	4303      	orrs	r3, r0
   c25b2:	9300      	str	r3, [sp, #0]
   c25b4:	f10b 0b04 	add.w	fp, fp, #4
   c25b8:	9b03      	ldr	r3, [sp, #12]
   c25ba:	e00d      	b.n	c25d8 <__gethex+0x27c>
   c25bc:	9b03      	ldr	r3, [sp, #12]
   c25be:	9a06      	ldr	r2, [sp, #24]
   c25c0:	4413      	add	r3, r2
   c25c2:	42bb      	cmp	r3, r7
   c25c4:	d3e0      	bcc.n	c2588 <__gethex+0x22c>
   c25c6:	4618      	mov	r0, r3
   c25c8:	9901      	ldr	r1, [sp, #4]
   c25ca:	9307      	str	r3, [sp, #28]
   c25cc:	4652      	mov	r2, sl
   c25ce:	f7fe fdfa 	bl	c11c6 <strncmp>
   c25d2:	9b07      	ldr	r3, [sp, #28]
   c25d4:	2800      	cmp	r0, #0
   c25d6:	d1d7      	bne.n	c2588 <__gethex+0x22c>
   c25d8:	461e      	mov	r6, r3
   c25da:	e78b      	b.n	c24f4 <__gethex+0x198>
   c25dc:	f04f 0a03 	mov.w	sl, #3
   c25e0:	e7b8      	b.n	c2554 <__gethex+0x1f8>
   c25e2:	da0a      	bge.n	c25fa <__gethex+0x29e>
   c25e4:	1a37      	subs	r7, r6, r0
   c25e6:	4621      	mov	r1, r4
   c25e8:	ee18 0a10 	vmov	r0, s16
   c25ec:	463a      	mov	r2, r7
   c25ee:	f000 fc41 	bl	c2e74 <__lshift>
   c25f2:	1bed      	subs	r5, r5, r7
   c25f4:	4604      	mov	r4, r0
   c25f6:	f100 0914 	add.w	r9, r0, #20
   c25fa:	f04f 0a00 	mov.w	sl, #0
   c25fe:	e7ae      	b.n	c255e <__gethex+0x202>
   c2600:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c2604:	42a8      	cmp	r0, r5
   c2606:	dd72      	ble.n	c26ee <__gethex+0x392>
   c2608:	1b45      	subs	r5, r0, r5
   c260a:	42ae      	cmp	r6, r5
   c260c:	dc36      	bgt.n	c267c <__gethex+0x320>
   c260e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c2612:	2b02      	cmp	r3, #2
   c2614:	d02a      	beq.n	c266c <__gethex+0x310>
   c2616:	2b03      	cmp	r3, #3
   c2618:	d02c      	beq.n	c2674 <__gethex+0x318>
   c261a:	2b01      	cmp	r3, #1
   c261c:	d11c      	bne.n	c2658 <__gethex+0x2fc>
   c261e:	42ae      	cmp	r6, r5
   c2620:	d11a      	bne.n	c2658 <__gethex+0x2fc>
   c2622:	2e01      	cmp	r6, #1
   c2624:	d112      	bne.n	c264c <__gethex+0x2f0>
   c2626:	9a04      	ldr	r2, [sp, #16]
   c2628:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c262c:	6013      	str	r3, [r2, #0]
   c262e:	2301      	movs	r3, #1
   c2630:	6123      	str	r3, [r4, #16]
   c2632:	f8c9 3000 	str.w	r3, [r9]
   c2636:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c2638:	2762      	movs	r7, #98	; 0x62
   c263a:	601c      	str	r4, [r3, #0]
   c263c:	e723      	b.n	c2486 <__gethex+0x12a>
   c263e:	bf00      	nop
   c2640:	000c5454 	.word	0x000c5454
   c2644:	000c53e1 	.word	0x000c53e1
   c2648:	000c53f2 	.word	0x000c53f2
   c264c:	1e71      	subs	r1, r6, #1
   c264e:	4620      	mov	r0, r4
   c2650:	f000 fe54 	bl	c32fc <__any_on>
   c2654:	2800      	cmp	r0, #0
   c2656:	d1e6      	bne.n	c2626 <__gethex+0x2ca>
   c2658:	ee18 0a10 	vmov	r0, s16
   c265c:	4621      	mov	r1, r4
   c265e:	f000 f9ed 	bl	c2a3c <_Bfree>
   c2662:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c2664:	2300      	movs	r3, #0
   c2666:	6013      	str	r3, [r2, #0]
   c2668:	2750      	movs	r7, #80	; 0x50
   c266a:	e70c      	b.n	c2486 <__gethex+0x12a>
   c266c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c266e:	2b00      	cmp	r3, #0
   c2670:	d1f2      	bne.n	c2658 <__gethex+0x2fc>
   c2672:	e7d8      	b.n	c2626 <__gethex+0x2ca>
   c2674:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c2676:	2b00      	cmp	r3, #0
   c2678:	d1d5      	bne.n	c2626 <__gethex+0x2ca>
   c267a:	e7ed      	b.n	c2658 <__gethex+0x2fc>
   c267c:	1e6f      	subs	r7, r5, #1
   c267e:	f1ba 0f00 	cmp.w	sl, #0
   c2682:	d131      	bne.n	c26e8 <__gethex+0x38c>
   c2684:	b127      	cbz	r7, c2690 <__gethex+0x334>
   c2686:	4639      	mov	r1, r7
   c2688:	4620      	mov	r0, r4
   c268a:	f000 fe37 	bl	c32fc <__any_on>
   c268e:	4682      	mov	sl, r0
   c2690:	117b      	asrs	r3, r7, #5
   c2692:	2101      	movs	r1, #1
   c2694:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c2698:	f007 071f 	and.w	r7, r7, #31
   c269c:	fa01 f707 	lsl.w	r7, r1, r7
   c26a0:	421f      	tst	r7, r3
   c26a2:	4629      	mov	r1, r5
   c26a4:	4620      	mov	r0, r4
   c26a6:	bf18      	it	ne
   c26a8:	f04a 0a02 	orrne.w	sl, sl, #2
   c26ac:	1b76      	subs	r6, r6, r5
   c26ae:	f7ff fded 	bl	c228c <rshift>
   c26b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c26b6:	2702      	movs	r7, #2
   c26b8:	f1ba 0f00 	cmp.w	sl, #0
   c26bc:	d048      	beq.n	c2750 <__gethex+0x3f4>
   c26be:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c26c2:	2b02      	cmp	r3, #2
   c26c4:	d015      	beq.n	c26f2 <__gethex+0x396>
   c26c6:	2b03      	cmp	r3, #3
   c26c8:	d017      	beq.n	c26fa <__gethex+0x39e>
   c26ca:	2b01      	cmp	r3, #1
   c26cc:	d109      	bne.n	c26e2 <__gethex+0x386>
   c26ce:	f01a 0f02 	tst.w	sl, #2
   c26d2:	d006      	beq.n	c26e2 <__gethex+0x386>
   c26d4:	f8d9 0000 	ldr.w	r0, [r9]
   c26d8:	ea4a 0a00 	orr.w	sl, sl, r0
   c26dc:	f01a 0f01 	tst.w	sl, #1
   c26e0:	d10e      	bne.n	c2700 <__gethex+0x3a4>
   c26e2:	f047 0710 	orr.w	r7, r7, #16
   c26e6:	e033      	b.n	c2750 <__gethex+0x3f4>
   c26e8:	f04f 0a01 	mov.w	sl, #1
   c26ec:	e7d0      	b.n	c2690 <__gethex+0x334>
   c26ee:	2701      	movs	r7, #1
   c26f0:	e7e2      	b.n	c26b8 <__gethex+0x35c>
   c26f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c26f4:	f1c3 0301 	rsb	r3, r3, #1
   c26f8:	9315      	str	r3, [sp, #84]	; 0x54
   c26fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c26fc:	2b00      	cmp	r3, #0
   c26fe:	d0f0      	beq.n	c26e2 <__gethex+0x386>
   c2700:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c2704:	f104 0314 	add.w	r3, r4, #20
   c2708:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c270c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c2710:	f04f 0c00 	mov.w	ip, #0
   c2714:	4618      	mov	r0, r3
   c2716:	f853 2b04 	ldr.w	r2, [r3], #4
   c271a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c271e:	d01c      	beq.n	c275a <__gethex+0x3fe>
   c2720:	3201      	adds	r2, #1
   c2722:	6002      	str	r2, [r0, #0]
   c2724:	2f02      	cmp	r7, #2
   c2726:	f104 0314 	add.w	r3, r4, #20
   c272a:	d13f      	bne.n	c27ac <__gethex+0x450>
   c272c:	f8d8 2000 	ldr.w	r2, [r8]
   c2730:	3a01      	subs	r2, #1
   c2732:	42b2      	cmp	r2, r6
   c2734:	d10a      	bne.n	c274c <__gethex+0x3f0>
   c2736:	1171      	asrs	r1, r6, #5
   c2738:	2201      	movs	r2, #1
   c273a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c273e:	f006 061f 	and.w	r6, r6, #31
   c2742:	fa02 f606 	lsl.w	r6, r2, r6
   c2746:	421e      	tst	r6, r3
   c2748:	bf18      	it	ne
   c274a:	4617      	movne	r7, r2
   c274c:	f047 0720 	orr.w	r7, r7, #32
   c2750:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c2752:	601c      	str	r4, [r3, #0]
   c2754:	9b04      	ldr	r3, [sp, #16]
   c2756:	601d      	str	r5, [r3, #0]
   c2758:	e695      	b.n	c2486 <__gethex+0x12a>
   c275a:	4299      	cmp	r1, r3
   c275c:	f843 cc04 	str.w	ip, [r3, #-4]
   c2760:	d8d8      	bhi.n	c2714 <__gethex+0x3b8>
   c2762:	68a3      	ldr	r3, [r4, #8]
   c2764:	459b      	cmp	fp, r3
   c2766:	db19      	blt.n	c279c <__gethex+0x440>
   c2768:	6861      	ldr	r1, [r4, #4]
   c276a:	ee18 0a10 	vmov	r0, s16
   c276e:	3101      	adds	r1, #1
   c2770:	f000 f924 	bl	c29bc <_Balloc>
   c2774:	4681      	mov	r9, r0
   c2776:	b918      	cbnz	r0, c2780 <__gethex+0x424>
   c2778:	4b1a      	ldr	r3, [pc, #104]	; (c27e4 <__gethex+0x488>)
   c277a:	4602      	mov	r2, r0
   c277c:	2184      	movs	r1, #132	; 0x84
   c277e:	e6a8      	b.n	c24d2 <__gethex+0x176>
   c2780:	6922      	ldr	r2, [r4, #16]
   c2782:	3202      	adds	r2, #2
   c2784:	f104 010c 	add.w	r1, r4, #12
   c2788:	0092      	lsls	r2, r2, #2
   c278a:	300c      	adds	r0, #12
   c278c:	f7fe fc20 	bl	c0fd0 <memcpy>
   c2790:	4621      	mov	r1, r4
   c2792:	ee18 0a10 	vmov	r0, s16
   c2796:	f000 f951 	bl	c2a3c <_Bfree>
   c279a:	464c      	mov	r4, r9
   c279c:	6923      	ldr	r3, [r4, #16]
   c279e:	1c5a      	adds	r2, r3, #1
   c27a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c27a4:	6122      	str	r2, [r4, #16]
   c27a6:	2201      	movs	r2, #1
   c27a8:	615a      	str	r2, [r3, #20]
   c27aa:	e7bb      	b.n	c2724 <__gethex+0x3c8>
   c27ac:	6922      	ldr	r2, [r4, #16]
   c27ae:	455a      	cmp	r2, fp
   c27b0:	dd0b      	ble.n	c27ca <__gethex+0x46e>
   c27b2:	2101      	movs	r1, #1
   c27b4:	4620      	mov	r0, r4
   c27b6:	f7ff fd69 	bl	c228c <rshift>
   c27ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c27be:	3501      	adds	r5, #1
   c27c0:	42ab      	cmp	r3, r5
   c27c2:	f6ff aed0 	blt.w	c2566 <__gethex+0x20a>
   c27c6:	2701      	movs	r7, #1
   c27c8:	e7c0      	b.n	c274c <__gethex+0x3f0>
   c27ca:	f016 061f 	ands.w	r6, r6, #31
   c27ce:	d0fa      	beq.n	c27c6 <__gethex+0x46a>
   c27d0:	4453      	add	r3, sl
   c27d2:	f1c6 0620 	rsb	r6, r6, #32
   c27d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c27da:	f000 f9e1 	bl	c2ba0 <__hi0bits>
   c27de:	42b0      	cmp	r0, r6
   c27e0:	dbe7      	blt.n	c27b2 <__gethex+0x456>
   c27e2:	e7f0      	b.n	c27c6 <__gethex+0x46a>
   c27e4:	000c53e1 	.word	0x000c53e1

000c27e8 <L_shift>:
   c27e8:	f1c2 0208 	rsb	r2, r2, #8
   c27ec:	0092      	lsls	r2, r2, #2
   c27ee:	b570      	push	{r4, r5, r6, lr}
   c27f0:	f1c2 0620 	rsb	r6, r2, #32
   c27f4:	6843      	ldr	r3, [r0, #4]
   c27f6:	6804      	ldr	r4, [r0, #0]
   c27f8:	fa03 f506 	lsl.w	r5, r3, r6
   c27fc:	432c      	orrs	r4, r5
   c27fe:	40d3      	lsrs	r3, r2
   c2800:	6004      	str	r4, [r0, #0]
   c2802:	f840 3f04 	str.w	r3, [r0, #4]!
   c2806:	4288      	cmp	r0, r1
   c2808:	d3f4      	bcc.n	c27f4 <L_shift+0xc>
   c280a:	bd70      	pop	{r4, r5, r6, pc}

000c280c <__match>:
   c280c:	b530      	push	{r4, r5, lr}
   c280e:	6803      	ldr	r3, [r0, #0]
   c2810:	3301      	adds	r3, #1
   c2812:	f811 4b01 	ldrb.w	r4, [r1], #1
   c2816:	b914      	cbnz	r4, c281e <__match+0x12>
   c2818:	6003      	str	r3, [r0, #0]
   c281a:	2001      	movs	r0, #1
   c281c:	bd30      	pop	{r4, r5, pc}
   c281e:	f813 2b01 	ldrb.w	r2, [r3], #1
   c2822:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c2826:	2d19      	cmp	r5, #25
   c2828:	bf98      	it	ls
   c282a:	3220      	addls	r2, #32
   c282c:	42a2      	cmp	r2, r4
   c282e:	d0f0      	beq.n	c2812 <__match+0x6>
   c2830:	2000      	movs	r0, #0
   c2832:	e7f3      	b.n	c281c <__match+0x10>

000c2834 <__hexnan>:
   c2834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2838:	680b      	ldr	r3, [r1, #0]
   c283a:	115e      	asrs	r6, r3, #5
   c283c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c2840:	f013 031f 	ands.w	r3, r3, #31
   c2844:	b087      	sub	sp, #28
   c2846:	bf18      	it	ne
   c2848:	3604      	addne	r6, #4
   c284a:	2500      	movs	r5, #0
   c284c:	1f37      	subs	r7, r6, #4
   c284e:	4690      	mov	r8, r2
   c2850:	6802      	ldr	r2, [r0, #0]
   c2852:	9301      	str	r3, [sp, #4]
   c2854:	4682      	mov	sl, r0
   c2856:	f846 5c04 	str.w	r5, [r6, #-4]
   c285a:	46b9      	mov	r9, r7
   c285c:	463c      	mov	r4, r7
   c285e:	9502      	str	r5, [sp, #8]
   c2860:	46ab      	mov	fp, r5
   c2862:	7851      	ldrb	r1, [r2, #1]
   c2864:	1c53      	adds	r3, r2, #1
   c2866:	9303      	str	r3, [sp, #12]
   c2868:	b341      	cbz	r1, c28bc <__hexnan+0x88>
   c286a:	4608      	mov	r0, r1
   c286c:	9205      	str	r2, [sp, #20]
   c286e:	9104      	str	r1, [sp, #16]
   c2870:	f7ff fd5e 	bl	c2330 <__hexdig_fun>
   c2874:	2800      	cmp	r0, #0
   c2876:	d14f      	bne.n	c2918 <__hexnan+0xe4>
   c2878:	9904      	ldr	r1, [sp, #16]
   c287a:	9a05      	ldr	r2, [sp, #20]
   c287c:	2920      	cmp	r1, #32
   c287e:	d818      	bhi.n	c28b2 <__hexnan+0x7e>
   c2880:	9b02      	ldr	r3, [sp, #8]
   c2882:	459b      	cmp	fp, r3
   c2884:	dd13      	ble.n	c28ae <__hexnan+0x7a>
   c2886:	454c      	cmp	r4, r9
   c2888:	d206      	bcs.n	c2898 <__hexnan+0x64>
   c288a:	2d07      	cmp	r5, #7
   c288c:	dc04      	bgt.n	c2898 <__hexnan+0x64>
   c288e:	462a      	mov	r2, r5
   c2890:	4649      	mov	r1, r9
   c2892:	4620      	mov	r0, r4
   c2894:	f7ff ffa8 	bl	c27e8 <L_shift>
   c2898:	4544      	cmp	r4, r8
   c289a:	d950      	bls.n	c293e <__hexnan+0x10a>
   c289c:	2300      	movs	r3, #0
   c289e:	f1a4 0904 	sub.w	r9, r4, #4
   c28a2:	f844 3c04 	str.w	r3, [r4, #-4]
   c28a6:	f8cd b008 	str.w	fp, [sp, #8]
   c28aa:	464c      	mov	r4, r9
   c28ac:	461d      	mov	r5, r3
   c28ae:	9a03      	ldr	r2, [sp, #12]
   c28b0:	e7d7      	b.n	c2862 <__hexnan+0x2e>
   c28b2:	2929      	cmp	r1, #41	; 0x29
   c28b4:	d156      	bne.n	c2964 <__hexnan+0x130>
   c28b6:	3202      	adds	r2, #2
   c28b8:	f8ca 2000 	str.w	r2, [sl]
   c28bc:	f1bb 0f00 	cmp.w	fp, #0
   c28c0:	d050      	beq.n	c2964 <__hexnan+0x130>
   c28c2:	454c      	cmp	r4, r9
   c28c4:	d206      	bcs.n	c28d4 <__hexnan+0xa0>
   c28c6:	2d07      	cmp	r5, #7
   c28c8:	dc04      	bgt.n	c28d4 <__hexnan+0xa0>
   c28ca:	462a      	mov	r2, r5
   c28cc:	4649      	mov	r1, r9
   c28ce:	4620      	mov	r0, r4
   c28d0:	f7ff ff8a 	bl	c27e8 <L_shift>
   c28d4:	4544      	cmp	r4, r8
   c28d6:	d934      	bls.n	c2942 <__hexnan+0x10e>
   c28d8:	f1a8 0204 	sub.w	r2, r8, #4
   c28dc:	4623      	mov	r3, r4
   c28de:	f853 1b04 	ldr.w	r1, [r3], #4
   c28e2:	f842 1f04 	str.w	r1, [r2, #4]!
   c28e6:	429f      	cmp	r7, r3
   c28e8:	d2f9      	bcs.n	c28de <__hexnan+0xaa>
   c28ea:	1b3b      	subs	r3, r7, r4
   c28ec:	f023 0303 	bic.w	r3, r3, #3
   c28f0:	3304      	adds	r3, #4
   c28f2:	3401      	adds	r4, #1
   c28f4:	3e03      	subs	r6, #3
   c28f6:	42b4      	cmp	r4, r6
   c28f8:	bf88      	it	hi
   c28fa:	2304      	movhi	r3, #4
   c28fc:	4443      	add	r3, r8
   c28fe:	2200      	movs	r2, #0
   c2900:	f843 2b04 	str.w	r2, [r3], #4
   c2904:	429f      	cmp	r7, r3
   c2906:	d2fb      	bcs.n	c2900 <__hexnan+0xcc>
   c2908:	683b      	ldr	r3, [r7, #0]
   c290a:	b91b      	cbnz	r3, c2914 <__hexnan+0xe0>
   c290c:	4547      	cmp	r7, r8
   c290e:	d127      	bne.n	c2960 <__hexnan+0x12c>
   c2910:	2301      	movs	r3, #1
   c2912:	603b      	str	r3, [r7, #0]
   c2914:	2005      	movs	r0, #5
   c2916:	e026      	b.n	c2966 <__hexnan+0x132>
   c2918:	3501      	adds	r5, #1
   c291a:	2d08      	cmp	r5, #8
   c291c:	f10b 0b01 	add.w	fp, fp, #1
   c2920:	dd06      	ble.n	c2930 <__hexnan+0xfc>
   c2922:	4544      	cmp	r4, r8
   c2924:	d9c3      	bls.n	c28ae <__hexnan+0x7a>
   c2926:	2300      	movs	r3, #0
   c2928:	f844 3c04 	str.w	r3, [r4, #-4]
   c292c:	2501      	movs	r5, #1
   c292e:	3c04      	subs	r4, #4
   c2930:	6822      	ldr	r2, [r4, #0]
   c2932:	f000 000f 	and.w	r0, r0, #15
   c2936:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c293a:	6022      	str	r2, [r4, #0]
   c293c:	e7b7      	b.n	c28ae <__hexnan+0x7a>
   c293e:	2508      	movs	r5, #8
   c2940:	e7b5      	b.n	c28ae <__hexnan+0x7a>
   c2942:	9b01      	ldr	r3, [sp, #4]
   c2944:	2b00      	cmp	r3, #0
   c2946:	d0df      	beq.n	c2908 <__hexnan+0xd4>
   c2948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c294c:	f1c3 0320 	rsb	r3, r3, #32
   c2950:	fa22 f303 	lsr.w	r3, r2, r3
   c2954:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c2958:	401a      	ands	r2, r3
   c295a:	f846 2c04 	str.w	r2, [r6, #-4]
   c295e:	e7d3      	b.n	c2908 <__hexnan+0xd4>
   c2960:	3f04      	subs	r7, #4
   c2962:	e7d1      	b.n	c2908 <__hexnan+0xd4>
   c2964:	2004      	movs	r0, #4
   c2966:	b007      	add	sp, #28
   c2968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c296c <__retarget_lock_acquire_recursive>:
   c296c:	4770      	bx	lr

000c296e <__retarget_lock_release>:
   c296e:	4770      	bx	lr

000c2970 <__retarget_lock_release_recursive>:
   c2970:	4770      	bx	lr
	...

000c2974 <_lseek_r>:
   c2974:	b538      	push	{r3, r4, r5, lr}
   c2976:	4d07      	ldr	r5, [pc, #28]	; (c2994 <_lseek_r+0x20>)
   c2978:	4604      	mov	r4, r0
   c297a:	4608      	mov	r0, r1
   c297c:	4611      	mov	r1, r2
   c297e:	2200      	movs	r2, #0
   c2980:	602a      	str	r2, [r5, #0]
   c2982:	461a      	mov	r2, r3
   c2984:	f7fa f90e 	bl	bcba4 <_lseek>
   c2988:	1c43      	adds	r3, r0, #1
   c298a:	d102      	bne.n	c2992 <_lseek_r+0x1e>
   c298c:	682b      	ldr	r3, [r5, #0]
   c298e:	b103      	cbz	r3, c2992 <_lseek_r+0x1e>
   c2990:	6023      	str	r3, [r4, #0]
   c2992:	bd38      	pop	{r3, r4, r5, pc}
   c2994:	2003e7f0 	.word	0x2003e7f0

000c2998 <__ascii_mbtowc>:
   c2998:	b082      	sub	sp, #8
   c299a:	b901      	cbnz	r1, c299e <__ascii_mbtowc+0x6>
   c299c:	a901      	add	r1, sp, #4
   c299e:	b142      	cbz	r2, c29b2 <__ascii_mbtowc+0x1a>
   c29a0:	b14b      	cbz	r3, c29b6 <__ascii_mbtowc+0x1e>
   c29a2:	7813      	ldrb	r3, [r2, #0]
   c29a4:	600b      	str	r3, [r1, #0]
   c29a6:	7812      	ldrb	r2, [r2, #0]
   c29a8:	1e10      	subs	r0, r2, #0
   c29aa:	bf18      	it	ne
   c29ac:	2001      	movne	r0, #1
   c29ae:	b002      	add	sp, #8
   c29b0:	4770      	bx	lr
   c29b2:	4610      	mov	r0, r2
   c29b4:	e7fb      	b.n	c29ae <__ascii_mbtowc+0x16>
   c29b6:	f06f 0001 	mvn.w	r0, #1
   c29ba:	e7f8      	b.n	c29ae <__ascii_mbtowc+0x16>

000c29bc <_Balloc>:
   c29bc:	b570      	push	{r4, r5, r6, lr}
   c29be:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c29c0:	4604      	mov	r4, r0
   c29c2:	460d      	mov	r5, r1
   c29c4:	b976      	cbnz	r6, c29e4 <_Balloc+0x28>
   c29c6:	2010      	movs	r0, #16
   c29c8:	f7fa fb32 	bl	bd030 <malloc>
   c29cc:	4602      	mov	r2, r0
   c29ce:	6260      	str	r0, [r4, #36]	; 0x24
   c29d0:	b920      	cbnz	r0, c29dc <_Balloc+0x20>
   c29d2:	4b18      	ldr	r3, [pc, #96]	; (c2a34 <_Balloc+0x78>)
   c29d4:	4818      	ldr	r0, [pc, #96]	; (c2a38 <_Balloc+0x7c>)
   c29d6:	2166      	movs	r1, #102	; 0x66
   c29d8:	f7fa fb7a 	bl	bd0d0 <__assert_func>
   c29dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c29e0:	6006      	str	r6, [r0, #0]
   c29e2:	60c6      	str	r6, [r0, #12]
   c29e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c29e6:	68f3      	ldr	r3, [r6, #12]
   c29e8:	b183      	cbz	r3, c2a0c <_Balloc+0x50>
   c29ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c29ec:	68db      	ldr	r3, [r3, #12]
   c29ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c29f2:	b9b8      	cbnz	r0, c2a24 <_Balloc+0x68>
   c29f4:	2101      	movs	r1, #1
   c29f6:	fa01 f605 	lsl.w	r6, r1, r5
   c29fa:	1d72      	adds	r2, r6, #5
   c29fc:	0092      	lsls	r2, r2, #2
   c29fe:	4620      	mov	r0, r4
   c2a00:	f7fe fb16 	bl	c1030 <_calloc_r>
   c2a04:	b160      	cbz	r0, c2a20 <_Balloc+0x64>
   c2a06:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c2a0a:	e00e      	b.n	c2a2a <_Balloc+0x6e>
   c2a0c:	2221      	movs	r2, #33	; 0x21
   c2a0e:	2104      	movs	r1, #4
   c2a10:	4620      	mov	r0, r4
   c2a12:	f7fe fb0d 	bl	c1030 <_calloc_r>
   c2a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c2a18:	60f0      	str	r0, [r6, #12]
   c2a1a:	68db      	ldr	r3, [r3, #12]
   c2a1c:	2b00      	cmp	r3, #0
   c2a1e:	d1e4      	bne.n	c29ea <_Balloc+0x2e>
   c2a20:	2000      	movs	r0, #0
   c2a22:	bd70      	pop	{r4, r5, r6, pc}
   c2a24:	6802      	ldr	r2, [r0, #0]
   c2a26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c2a2a:	2300      	movs	r3, #0
   c2a2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c2a30:	e7f7      	b.n	c2a22 <_Balloc+0x66>
   c2a32:	bf00      	nop
   c2a34:	000c51be 	.word	0x000c51be
   c2a38:	000c5468 	.word	0x000c5468

000c2a3c <_Bfree>:
   c2a3c:	b570      	push	{r4, r5, r6, lr}
   c2a3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c2a40:	4605      	mov	r5, r0
   c2a42:	460c      	mov	r4, r1
   c2a44:	b976      	cbnz	r6, c2a64 <_Bfree+0x28>
   c2a46:	2010      	movs	r0, #16
   c2a48:	f7fa faf2 	bl	bd030 <malloc>
   c2a4c:	4602      	mov	r2, r0
   c2a4e:	6268      	str	r0, [r5, #36]	; 0x24
   c2a50:	b920      	cbnz	r0, c2a5c <_Bfree+0x20>
   c2a52:	4b09      	ldr	r3, [pc, #36]	; (c2a78 <_Bfree+0x3c>)
   c2a54:	4809      	ldr	r0, [pc, #36]	; (c2a7c <_Bfree+0x40>)
   c2a56:	218a      	movs	r1, #138	; 0x8a
   c2a58:	f7fa fb3a 	bl	bd0d0 <__assert_func>
   c2a5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c2a60:	6006      	str	r6, [r0, #0]
   c2a62:	60c6      	str	r6, [r0, #12]
   c2a64:	b13c      	cbz	r4, c2a76 <_Bfree+0x3a>
   c2a66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c2a68:	6862      	ldr	r2, [r4, #4]
   c2a6a:	68db      	ldr	r3, [r3, #12]
   c2a6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c2a70:	6021      	str	r1, [r4, #0]
   c2a72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c2a76:	bd70      	pop	{r4, r5, r6, pc}
   c2a78:	000c51be 	.word	0x000c51be
   c2a7c:	000c5468 	.word	0x000c5468

000c2a80 <__multadd>:
   c2a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c2a84:	690d      	ldr	r5, [r1, #16]
   c2a86:	4607      	mov	r7, r0
   c2a88:	460c      	mov	r4, r1
   c2a8a:	461e      	mov	r6, r3
   c2a8c:	f101 0c14 	add.w	ip, r1, #20
   c2a90:	2000      	movs	r0, #0
   c2a92:	f8dc 3000 	ldr.w	r3, [ip]
   c2a96:	b299      	uxth	r1, r3
   c2a98:	fb02 6101 	mla	r1, r2, r1, r6
   c2a9c:	0c1e      	lsrs	r6, r3, #16
   c2a9e:	0c0b      	lsrs	r3, r1, #16
   c2aa0:	fb02 3306 	mla	r3, r2, r6, r3
   c2aa4:	b289      	uxth	r1, r1
   c2aa6:	3001      	adds	r0, #1
   c2aa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c2aac:	4285      	cmp	r5, r0
   c2aae:	f84c 1b04 	str.w	r1, [ip], #4
   c2ab2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c2ab6:	dcec      	bgt.n	c2a92 <__multadd+0x12>
   c2ab8:	b30e      	cbz	r6, c2afe <__multadd+0x7e>
   c2aba:	68a3      	ldr	r3, [r4, #8]
   c2abc:	42ab      	cmp	r3, r5
   c2abe:	dc19      	bgt.n	c2af4 <__multadd+0x74>
   c2ac0:	6861      	ldr	r1, [r4, #4]
   c2ac2:	4638      	mov	r0, r7
   c2ac4:	3101      	adds	r1, #1
   c2ac6:	f7ff ff79 	bl	c29bc <_Balloc>
   c2aca:	4680      	mov	r8, r0
   c2acc:	b928      	cbnz	r0, c2ada <__multadd+0x5a>
   c2ace:	4602      	mov	r2, r0
   c2ad0:	4b0c      	ldr	r3, [pc, #48]	; (c2b04 <__multadd+0x84>)
   c2ad2:	480d      	ldr	r0, [pc, #52]	; (c2b08 <__multadd+0x88>)
   c2ad4:	21b5      	movs	r1, #181	; 0xb5
   c2ad6:	f7fa fafb 	bl	bd0d0 <__assert_func>
   c2ada:	6922      	ldr	r2, [r4, #16]
   c2adc:	3202      	adds	r2, #2
   c2ade:	f104 010c 	add.w	r1, r4, #12
   c2ae2:	0092      	lsls	r2, r2, #2
   c2ae4:	300c      	adds	r0, #12
   c2ae6:	f7fe fa73 	bl	c0fd0 <memcpy>
   c2aea:	4621      	mov	r1, r4
   c2aec:	4638      	mov	r0, r7
   c2aee:	f7ff ffa5 	bl	c2a3c <_Bfree>
   c2af2:	4644      	mov	r4, r8
   c2af4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c2af8:	3501      	adds	r5, #1
   c2afa:	615e      	str	r6, [r3, #20]
   c2afc:	6125      	str	r5, [r4, #16]
   c2afe:	4620      	mov	r0, r4
   c2b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2b04:	000c53e1 	.word	0x000c53e1
   c2b08:	000c5468 	.word	0x000c5468

000c2b0c <__s2b>:
   c2b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c2b10:	460c      	mov	r4, r1
   c2b12:	4615      	mov	r5, r2
   c2b14:	461f      	mov	r7, r3
   c2b16:	2209      	movs	r2, #9
   c2b18:	3308      	adds	r3, #8
   c2b1a:	4606      	mov	r6, r0
   c2b1c:	fb93 f3f2 	sdiv	r3, r3, r2
   c2b20:	2100      	movs	r1, #0
   c2b22:	2201      	movs	r2, #1
   c2b24:	429a      	cmp	r2, r3
   c2b26:	db09      	blt.n	c2b3c <__s2b+0x30>
   c2b28:	4630      	mov	r0, r6
   c2b2a:	f7ff ff47 	bl	c29bc <_Balloc>
   c2b2e:	b940      	cbnz	r0, c2b42 <__s2b+0x36>
   c2b30:	4602      	mov	r2, r0
   c2b32:	4b19      	ldr	r3, [pc, #100]	; (c2b98 <__s2b+0x8c>)
   c2b34:	4819      	ldr	r0, [pc, #100]	; (c2b9c <__s2b+0x90>)
   c2b36:	21ce      	movs	r1, #206	; 0xce
   c2b38:	f7fa faca 	bl	bd0d0 <__assert_func>
   c2b3c:	0052      	lsls	r2, r2, #1
   c2b3e:	3101      	adds	r1, #1
   c2b40:	e7f0      	b.n	c2b24 <__s2b+0x18>
   c2b42:	9b08      	ldr	r3, [sp, #32]
   c2b44:	6143      	str	r3, [r0, #20]
   c2b46:	2d09      	cmp	r5, #9
   c2b48:	f04f 0301 	mov.w	r3, #1
   c2b4c:	6103      	str	r3, [r0, #16]
   c2b4e:	dd16      	ble.n	c2b7e <__s2b+0x72>
   c2b50:	f104 0909 	add.w	r9, r4, #9
   c2b54:	46c8      	mov	r8, r9
   c2b56:	442c      	add	r4, r5
   c2b58:	f818 3b01 	ldrb.w	r3, [r8], #1
   c2b5c:	4601      	mov	r1, r0
   c2b5e:	3b30      	subs	r3, #48	; 0x30
   c2b60:	220a      	movs	r2, #10
   c2b62:	4630      	mov	r0, r6
   c2b64:	f7ff ff8c 	bl	c2a80 <__multadd>
   c2b68:	45a0      	cmp	r8, r4
   c2b6a:	d1f5      	bne.n	c2b58 <__s2b+0x4c>
   c2b6c:	f1a5 0408 	sub.w	r4, r5, #8
   c2b70:	444c      	add	r4, r9
   c2b72:	1b2d      	subs	r5, r5, r4
   c2b74:	1963      	adds	r3, r4, r5
   c2b76:	42bb      	cmp	r3, r7
   c2b78:	db04      	blt.n	c2b84 <__s2b+0x78>
   c2b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c2b7e:	340a      	adds	r4, #10
   c2b80:	2509      	movs	r5, #9
   c2b82:	e7f6      	b.n	c2b72 <__s2b+0x66>
   c2b84:	f814 3b01 	ldrb.w	r3, [r4], #1
   c2b88:	4601      	mov	r1, r0
   c2b8a:	3b30      	subs	r3, #48	; 0x30
   c2b8c:	220a      	movs	r2, #10
   c2b8e:	4630      	mov	r0, r6
   c2b90:	f7ff ff76 	bl	c2a80 <__multadd>
   c2b94:	e7ee      	b.n	c2b74 <__s2b+0x68>
   c2b96:	bf00      	nop
   c2b98:	000c53e1 	.word	0x000c53e1
   c2b9c:	000c5468 	.word	0x000c5468

000c2ba0 <__hi0bits>:
   c2ba0:	0c03      	lsrs	r3, r0, #16
   c2ba2:	041b      	lsls	r3, r3, #16
   c2ba4:	b9d3      	cbnz	r3, c2bdc <__hi0bits+0x3c>
   c2ba6:	0400      	lsls	r0, r0, #16
   c2ba8:	2310      	movs	r3, #16
   c2baa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c2bae:	bf04      	itt	eq
   c2bb0:	0200      	lsleq	r0, r0, #8
   c2bb2:	3308      	addeq	r3, #8
   c2bb4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c2bb8:	bf04      	itt	eq
   c2bba:	0100      	lsleq	r0, r0, #4
   c2bbc:	3304      	addeq	r3, #4
   c2bbe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c2bc2:	bf04      	itt	eq
   c2bc4:	0080      	lsleq	r0, r0, #2
   c2bc6:	3302      	addeq	r3, #2
   c2bc8:	2800      	cmp	r0, #0
   c2bca:	db05      	blt.n	c2bd8 <__hi0bits+0x38>
   c2bcc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c2bd0:	f103 0301 	add.w	r3, r3, #1
   c2bd4:	bf08      	it	eq
   c2bd6:	2320      	moveq	r3, #32
   c2bd8:	4618      	mov	r0, r3
   c2bda:	4770      	bx	lr
   c2bdc:	2300      	movs	r3, #0
   c2bde:	e7e4      	b.n	c2baa <__hi0bits+0xa>

000c2be0 <__lo0bits>:
   c2be0:	6803      	ldr	r3, [r0, #0]
   c2be2:	f013 0207 	ands.w	r2, r3, #7
   c2be6:	4601      	mov	r1, r0
   c2be8:	d00b      	beq.n	c2c02 <__lo0bits+0x22>
   c2bea:	07da      	lsls	r2, r3, #31
   c2bec:	d423      	bmi.n	c2c36 <__lo0bits+0x56>
   c2bee:	0798      	lsls	r0, r3, #30
   c2bf0:	bf49      	itett	mi
   c2bf2:	085b      	lsrmi	r3, r3, #1
   c2bf4:	089b      	lsrpl	r3, r3, #2
   c2bf6:	2001      	movmi	r0, #1
   c2bf8:	600b      	strmi	r3, [r1, #0]
   c2bfa:	bf5c      	itt	pl
   c2bfc:	600b      	strpl	r3, [r1, #0]
   c2bfe:	2002      	movpl	r0, #2
   c2c00:	4770      	bx	lr
   c2c02:	b298      	uxth	r0, r3
   c2c04:	b9a8      	cbnz	r0, c2c32 <__lo0bits+0x52>
   c2c06:	0c1b      	lsrs	r3, r3, #16
   c2c08:	2010      	movs	r0, #16
   c2c0a:	b2da      	uxtb	r2, r3
   c2c0c:	b90a      	cbnz	r2, c2c12 <__lo0bits+0x32>
   c2c0e:	3008      	adds	r0, #8
   c2c10:	0a1b      	lsrs	r3, r3, #8
   c2c12:	071a      	lsls	r2, r3, #28
   c2c14:	bf04      	itt	eq
   c2c16:	091b      	lsreq	r3, r3, #4
   c2c18:	3004      	addeq	r0, #4
   c2c1a:	079a      	lsls	r2, r3, #30
   c2c1c:	bf04      	itt	eq
   c2c1e:	089b      	lsreq	r3, r3, #2
   c2c20:	3002      	addeq	r0, #2
   c2c22:	07da      	lsls	r2, r3, #31
   c2c24:	d403      	bmi.n	c2c2e <__lo0bits+0x4e>
   c2c26:	085b      	lsrs	r3, r3, #1
   c2c28:	f100 0001 	add.w	r0, r0, #1
   c2c2c:	d005      	beq.n	c2c3a <__lo0bits+0x5a>
   c2c2e:	600b      	str	r3, [r1, #0]
   c2c30:	4770      	bx	lr
   c2c32:	4610      	mov	r0, r2
   c2c34:	e7e9      	b.n	c2c0a <__lo0bits+0x2a>
   c2c36:	2000      	movs	r0, #0
   c2c38:	4770      	bx	lr
   c2c3a:	2020      	movs	r0, #32
   c2c3c:	4770      	bx	lr
	...

000c2c40 <__i2b>:
   c2c40:	b510      	push	{r4, lr}
   c2c42:	460c      	mov	r4, r1
   c2c44:	2101      	movs	r1, #1
   c2c46:	f7ff feb9 	bl	c29bc <_Balloc>
   c2c4a:	4602      	mov	r2, r0
   c2c4c:	b928      	cbnz	r0, c2c5a <__i2b+0x1a>
   c2c4e:	4b05      	ldr	r3, [pc, #20]	; (c2c64 <__i2b+0x24>)
   c2c50:	4805      	ldr	r0, [pc, #20]	; (c2c68 <__i2b+0x28>)
   c2c52:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c2c56:	f7fa fa3b 	bl	bd0d0 <__assert_func>
   c2c5a:	2301      	movs	r3, #1
   c2c5c:	6144      	str	r4, [r0, #20]
   c2c5e:	6103      	str	r3, [r0, #16]
   c2c60:	bd10      	pop	{r4, pc}
   c2c62:	bf00      	nop
   c2c64:	000c53e1 	.word	0x000c53e1
   c2c68:	000c5468 	.word	0x000c5468

000c2c6c <__multiply>:
   c2c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2c70:	4691      	mov	r9, r2
   c2c72:	690a      	ldr	r2, [r1, #16]
   c2c74:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c2c78:	429a      	cmp	r2, r3
   c2c7a:	bfb8      	it	lt
   c2c7c:	460b      	movlt	r3, r1
   c2c7e:	460c      	mov	r4, r1
   c2c80:	bfbc      	itt	lt
   c2c82:	464c      	movlt	r4, r9
   c2c84:	4699      	movlt	r9, r3
   c2c86:	6927      	ldr	r7, [r4, #16]
   c2c88:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c2c8c:	68a3      	ldr	r3, [r4, #8]
   c2c8e:	6861      	ldr	r1, [r4, #4]
   c2c90:	eb07 060a 	add.w	r6, r7, sl
   c2c94:	42b3      	cmp	r3, r6
   c2c96:	b085      	sub	sp, #20
   c2c98:	bfb8      	it	lt
   c2c9a:	3101      	addlt	r1, #1
   c2c9c:	f7ff fe8e 	bl	c29bc <_Balloc>
   c2ca0:	b930      	cbnz	r0, c2cb0 <__multiply+0x44>
   c2ca2:	4602      	mov	r2, r0
   c2ca4:	4b44      	ldr	r3, [pc, #272]	; (c2db8 <__multiply+0x14c>)
   c2ca6:	4845      	ldr	r0, [pc, #276]	; (c2dbc <__multiply+0x150>)
   c2ca8:	f240 115d 	movw	r1, #349	; 0x15d
   c2cac:	f7fa fa10 	bl	bd0d0 <__assert_func>
   c2cb0:	f100 0514 	add.w	r5, r0, #20
   c2cb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c2cb8:	462b      	mov	r3, r5
   c2cba:	2200      	movs	r2, #0
   c2cbc:	4543      	cmp	r3, r8
   c2cbe:	d321      	bcc.n	c2d04 <__multiply+0x98>
   c2cc0:	f104 0314 	add.w	r3, r4, #20
   c2cc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c2cc8:	f109 0314 	add.w	r3, r9, #20
   c2ccc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c2cd0:	9202      	str	r2, [sp, #8]
   c2cd2:	1b3a      	subs	r2, r7, r4
   c2cd4:	3a15      	subs	r2, #21
   c2cd6:	f022 0203 	bic.w	r2, r2, #3
   c2cda:	3204      	adds	r2, #4
   c2cdc:	f104 0115 	add.w	r1, r4, #21
   c2ce0:	428f      	cmp	r7, r1
   c2ce2:	bf38      	it	cc
   c2ce4:	2204      	movcc	r2, #4
   c2ce6:	9201      	str	r2, [sp, #4]
   c2ce8:	9a02      	ldr	r2, [sp, #8]
   c2cea:	9303      	str	r3, [sp, #12]
   c2cec:	429a      	cmp	r2, r3
   c2cee:	d80c      	bhi.n	c2d0a <__multiply+0x9e>
   c2cf0:	2e00      	cmp	r6, #0
   c2cf2:	dd03      	ble.n	c2cfc <__multiply+0x90>
   c2cf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c2cf8:	2b00      	cmp	r3, #0
   c2cfa:	d05a      	beq.n	c2db2 <__multiply+0x146>
   c2cfc:	6106      	str	r6, [r0, #16]
   c2cfe:	b005      	add	sp, #20
   c2d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2d04:	f843 2b04 	str.w	r2, [r3], #4
   c2d08:	e7d8      	b.n	c2cbc <__multiply+0x50>
   c2d0a:	f8b3 a000 	ldrh.w	sl, [r3]
   c2d0e:	f1ba 0f00 	cmp.w	sl, #0
   c2d12:	d024      	beq.n	c2d5e <__multiply+0xf2>
   c2d14:	f104 0e14 	add.w	lr, r4, #20
   c2d18:	46a9      	mov	r9, r5
   c2d1a:	f04f 0c00 	mov.w	ip, #0
   c2d1e:	f85e 2b04 	ldr.w	r2, [lr], #4
   c2d22:	f8d9 1000 	ldr.w	r1, [r9]
   c2d26:	fa1f fb82 	uxth.w	fp, r2
   c2d2a:	b289      	uxth	r1, r1
   c2d2c:	fb0a 110b 	mla	r1, sl, fp, r1
   c2d30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c2d34:	f8d9 2000 	ldr.w	r2, [r9]
   c2d38:	4461      	add	r1, ip
   c2d3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c2d3e:	fb0a c20b 	mla	r2, sl, fp, ip
   c2d42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c2d46:	b289      	uxth	r1, r1
   c2d48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c2d4c:	4577      	cmp	r7, lr
   c2d4e:	f849 1b04 	str.w	r1, [r9], #4
   c2d52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c2d56:	d8e2      	bhi.n	c2d1e <__multiply+0xb2>
   c2d58:	9a01      	ldr	r2, [sp, #4]
   c2d5a:	f845 c002 	str.w	ip, [r5, r2]
   c2d5e:	9a03      	ldr	r2, [sp, #12]
   c2d60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c2d64:	3304      	adds	r3, #4
   c2d66:	f1b9 0f00 	cmp.w	r9, #0
   c2d6a:	d020      	beq.n	c2dae <__multiply+0x142>
   c2d6c:	6829      	ldr	r1, [r5, #0]
   c2d6e:	f104 0c14 	add.w	ip, r4, #20
   c2d72:	46ae      	mov	lr, r5
   c2d74:	f04f 0a00 	mov.w	sl, #0
   c2d78:	f8bc b000 	ldrh.w	fp, [ip]
   c2d7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c2d80:	fb09 220b 	mla	r2, r9, fp, r2
   c2d84:	4492      	add	sl, r2
   c2d86:	b289      	uxth	r1, r1
   c2d88:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c2d8c:	f84e 1b04 	str.w	r1, [lr], #4
   c2d90:	f85c 2b04 	ldr.w	r2, [ip], #4
   c2d94:	f8be 1000 	ldrh.w	r1, [lr]
   c2d98:	0c12      	lsrs	r2, r2, #16
   c2d9a:	fb09 1102 	mla	r1, r9, r2, r1
   c2d9e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c2da2:	4567      	cmp	r7, ip
   c2da4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c2da8:	d8e6      	bhi.n	c2d78 <__multiply+0x10c>
   c2daa:	9a01      	ldr	r2, [sp, #4]
   c2dac:	50a9      	str	r1, [r5, r2]
   c2dae:	3504      	adds	r5, #4
   c2db0:	e79a      	b.n	c2ce8 <__multiply+0x7c>
   c2db2:	3e01      	subs	r6, #1
   c2db4:	e79c      	b.n	c2cf0 <__multiply+0x84>
   c2db6:	bf00      	nop
   c2db8:	000c53e1 	.word	0x000c53e1
   c2dbc:	000c5468 	.word	0x000c5468

000c2dc0 <__pow5mult>:
   c2dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c2dc4:	4615      	mov	r5, r2
   c2dc6:	f012 0203 	ands.w	r2, r2, #3
   c2dca:	4606      	mov	r6, r0
   c2dcc:	460f      	mov	r7, r1
   c2dce:	d007      	beq.n	c2de0 <__pow5mult+0x20>
   c2dd0:	4c25      	ldr	r4, [pc, #148]	; (c2e68 <__pow5mult+0xa8>)
   c2dd2:	3a01      	subs	r2, #1
   c2dd4:	2300      	movs	r3, #0
   c2dd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c2dda:	f7ff fe51 	bl	c2a80 <__multadd>
   c2dde:	4607      	mov	r7, r0
   c2de0:	10ad      	asrs	r5, r5, #2
   c2de2:	d03d      	beq.n	c2e60 <__pow5mult+0xa0>
   c2de4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c2de6:	b97c      	cbnz	r4, c2e08 <__pow5mult+0x48>
   c2de8:	2010      	movs	r0, #16
   c2dea:	f7fa f921 	bl	bd030 <malloc>
   c2dee:	4602      	mov	r2, r0
   c2df0:	6270      	str	r0, [r6, #36]	; 0x24
   c2df2:	b928      	cbnz	r0, c2e00 <__pow5mult+0x40>
   c2df4:	4b1d      	ldr	r3, [pc, #116]	; (c2e6c <__pow5mult+0xac>)
   c2df6:	481e      	ldr	r0, [pc, #120]	; (c2e70 <__pow5mult+0xb0>)
   c2df8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c2dfc:	f7fa f968 	bl	bd0d0 <__assert_func>
   c2e00:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c2e04:	6004      	str	r4, [r0, #0]
   c2e06:	60c4      	str	r4, [r0, #12]
   c2e08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c2e0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c2e10:	b94c      	cbnz	r4, c2e26 <__pow5mult+0x66>
   c2e12:	f240 2171 	movw	r1, #625	; 0x271
   c2e16:	4630      	mov	r0, r6
   c2e18:	f7ff ff12 	bl	c2c40 <__i2b>
   c2e1c:	2300      	movs	r3, #0
   c2e1e:	f8c8 0008 	str.w	r0, [r8, #8]
   c2e22:	4604      	mov	r4, r0
   c2e24:	6003      	str	r3, [r0, #0]
   c2e26:	f04f 0900 	mov.w	r9, #0
   c2e2a:	07eb      	lsls	r3, r5, #31
   c2e2c:	d50a      	bpl.n	c2e44 <__pow5mult+0x84>
   c2e2e:	4639      	mov	r1, r7
   c2e30:	4622      	mov	r2, r4
   c2e32:	4630      	mov	r0, r6
   c2e34:	f7ff ff1a 	bl	c2c6c <__multiply>
   c2e38:	4639      	mov	r1, r7
   c2e3a:	4680      	mov	r8, r0
   c2e3c:	4630      	mov	r0, r6
   c2e3e:	f7ff fdfd 	bl	c2a3c <_Bfree>
   c2e42:	4647      	mov	r7, r8
   c2e44:	106d      	asrs	r5, r5, #1
   c2e46:	d00b      	beq.n	c2e60 <__pow5mult+0xa0>
   c2e48:	6820      	ldr	r0, [r4, #0]
   c2e4a:	b938      	cbnz	r0, c2e5c <__pow5mult+0x9c>
   c2e4c:	4622      	mov	r2, r4
   c2e4e:	4621      	mov	r1, r4
   c2e50:	4630      	mov	r0, r6
   c2e52:	f7ff ff0b 	bl	c2c6c <__multiply>
   c2e56:	6020      	str	r0, [r4, #0]
   c2e58:	f8c0 9000 	str.w	r9, [r0]
   c2e5c:	4604      	mov	r4, r0
   c2e5e:	e7e4      	b.n	c2e2a <__pow5mult+0x6a>
   c2e60:	4638      	mov	r0, r7
   c2e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c2e66:	bf00      	nop
   c2e68:	000c55b8 	.word	0x000c55b8
   c2e6c:	000c51be 	.word	0x000c51be
   c2e70:	000c5468 	.word	0x000c5468

000c2e74 <__lshift>:
   c2e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c2e78:	460c      	mov	r4, r1
   c2e7a:	6849      	ldr	r1, [r1, #4]
   c2e7c:	6923      	ldr	r3, [r4, #16]
   c2e7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c2e82:	68a3      	ldr	r3, [r4, #8]
   c2e84:	4607      	mov	r7, r0
   c2e86:	4691      	mov	r9, r2
   c2e88:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c2e8c:	f108 0601 	add.w	r6, r8, #1
   c2e90:	42b3      	cmp	r3, r6
   c2e92:	db0b      	blt.n	c2eac <__lshift+0x38>
   c2e94:	4638      	mov	r0, r7
   c2e96:	f7ff fd91 	bl	c29bc <_Balloc>
   c2e9a:	4605      	mov	r5, r0
   c2e9c:	b948      	cbnz	r0, c2eb2 <__lshift+0x3e>
   c2e9e:	4602      	mov	r2, r0
   c2ea0:	4b2a      	ldr	r3, [pc, #168]	; (c2f4c <__lshift+0xd8>)
   c2ea2:	482b      	ldr	r0, [pc, #172]	; (c2f50 <__lshift+0xdc>)
   c2ea4:	f240 11d9 	movw	r1, #473	; 0x1d9
   c2ea8:	f7fa f912 	bl	bd0d0 <__assert_func>
   c2eac:	3101      	adds	r1, #1
   c2eae:	005b      	lsls	r3, r3, #1
   c2eb0:	e7ee      	b.n	c2e90 <__lshift+0x1c>
   c2eb2:	2300      	movs	r3, #0
   c2eb4:	f100 0114 	add.w	r1, r0, #20
   c2eb8:	f100 0210 	add.w	r2, r0, #16
   c2ebc:	4618      	mov	r0, r3
   c2ebe:	4553      	cmp	r3, sl
   c2ec0:	db37      	blt.n	c2f32 <__lshift+0xbe>
   c2ec2:	6920      	ldr	r0, [r4, #16]
   c2ec4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c2ec8:	f104 0314 	add.w	r3, r4, #20
   c2ecc:	f019 091f 	ands.w	r9, r9, #31
   c2ed0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c2ed4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c2ed8:	d02f      	beq.n	c2f3a <__lshift+0xc6>
   c2eda:	f1c9 0e20 	rsb	lr, r9, #32
   c2ede:	468a      	mov	sl, r1
   c2ee0:	f04f 0c00 	mov.w	ip, #0
   c2ee4:	681a      	ldr	r2, [r3, #0]
   c2ee6:	fa02 f209 	lsl.w	r2, r2, r9
   c2eea:	ea42 020c 	orr.w	r2, r2, ip
   c2eee:	f84a 2b04 	str.w	r2, [sl], #4
   c2ef2:	f853 2b04 	ldr.w	r2, [r3], #4
   c2ef6:	4298      	cmp	r0, r3
   c2ef8:	fa22 fc0e 	lsr.w	ip, r2, lr
   c2efc:	d8f2      	bhi.n	c2ee4 <__lshift+0x70>
   c2efe:	1b03      	subs	r3, r0, r4
   c2f00:	3b15      	subs	r3, #21
   c2f02:	f023 0303 	bic.w	r3, r3, #3
   c2f06:	3304      	adds	r3, #4
   c2f08:	f104 0215 	add.w	r2, r4, #21
   c2f0c:	4290      	cmp	r0, r2
   c2f0e:	bf38      	it	cc
   c2f10:	2304      	movcc	r3, #4
   c2f12:	f841 c003 	str.w	ip, [r1, r3]
   c2f16:	f1bc 0f00 	cmp.w	ip, #0
   c2f1a:	d001      	beq.n	c2f20 <__lshift+0xac>
   c2f1c:	f108 0602 	add.w	r6, r8, #2
   c2f20:	3e01      	subs	r6, #1
   c2f22:	4638      	mov	r0, r7
   c2f24:	612e      	str	r6, [r5, #16]
   c2f26:	4621      	mov	r1, r4
   c2f28:	f7ff fd88 	bl	c2a3c <_Bfree>
   c2f2c:	4628      	mov	r0, r5
   c2f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c2f32:	f842 0f04 	str.w	r0, [r2, #4]!
   c2f36:	3301      	adds	r3, #1
   c2f38:	e7c1      	b.n	c2ebe <__lshift+0x4a>
   c2f3a:	3904      	subs	r1, #4
   c2f3c:	f853 2b04 	ldr.w	r2, [r3], #4
   c2f40:	f841 2f04 	str.w	r2, [r1, #4]!
   c2f44:	4298      	cmp	r0, r3
   c2f46:	d8f9      	bhi.n	c2f3c <__lshift+0xc8>
   c2f48:	e7ea      	b.n	c2f20 <__lshift+0xac>
   c2f4a:	bf00      	nop
   c2f4c:	000c53e1 	.word	0x000c53e1
   c2f50:	000c5468 	.word	0x000c5468

000c2f54 <__mcmp>:
   c2f54:	b530      	push	{r4, r5, lr}
   c2f56:	6902      	ldr	r2, [r0, #16]
   c2f58:	690c      	ldr	r4, [r1, #16]
   c2f5a:	1b12      	subs	r2, r2, r4
   c2f5c:	d10e      	bne.n	c2f7c <__mcmp+0x28>
   c2f5e:	f100 0314 	add.w	r3, r0, #20
   c2f62:	3114      	adds	r1, #20
   c2f64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c2f68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c2f6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c2f70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c2f74:	42a5      	cmp	r5, r4
   c2f76:	d003      	beq.n	c2f80 <__mcmp+0x2c>
   c2f78:	d305      	bcc.n	c2f86 <__mcmp+0x32>
   c2f7a:	2201      	movs	r2, #1
   c2f7c:	4610      	mov	r0, r2
   c2f7e:	bd30      	pop	{r4, r5, pc}
   c2f80:	4283      	cmp	r3, r0
   c2f82:	d3f3      	bcc.n	c2f6c <__mcmp+0x18>
   c2f84:	e7fa      	b.n	c2f7c <__mcmp+0x28>
   c2f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c2f8a:	e7f7      	b.n	c2f7c <__mcmp+0x28>

000c2f8c <__mdiff>:
   c2f8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2f90:	460c      	mov	r4, r1
   c2f92:	4606      	mov	r6, r0
   c2f94:	4611      	mov	r1, r2
   c2f96:	4620      	mov	r0, r4
   c2f98:	4690      	mov	r8, r2
   c2f9a:	f7ff ffdb 	bl	c2f54 <__mcmp>
   c2f9e:	1e05      	subs	r5, r0, #0
   c2fa0:	d110      	bne.n	c2fc4 <__mdiff+0x38>
   c2fa2:	4629      	mov	r1, r5
   c2fa4:	4630      	mov	r0, r6
   c2fa6:	f7ff fd09 	bl	c29bc <_Balloc>
   c2faa:	b930      	cbnz	r0, c2fba <__mdiff+0x2e>
   c2fac:	4b3a      	ldr	r3, [pc, #232]	; (c3098 <__mdiff+0x10c>)
   c2fae:	4602      	mov	r2, r0
   c2fb0:	f240 2132 	movw	r1, #562	; 0x232
   c2fb4:	4839      	ldr	r0, [pc, #228]	; (c309c <__mdiff+0x110>)
   c2fb6:	f7fa f88b 	bl	bd0d0 <__assert_func>
   c2fba:	2301      	movs	r3, #1
   c2fbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c2fc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2fc4:	bfa4      	itt	ge
   c2fc6:	4643      	movge	r3, r8
   c2fc8:	46a0      	movge	r8, r4
   c2fca:	4630      	mov	r0, r6
   c2fcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c2fd0:	bfa6      	itte	ge
   c2fd2:	461c      	movge	r4, r3
   c2fd4:	2500      	movge	r5, #0
   c2fd6:	2501      	movlt	r5, #1
   c2fd8:	f7ff fcf0 	bl	c29bc <_Balloc>
   c2fdc:	b920      	cbnz	r0, c2fe8 <__mdiff+0x5c>
   c2fde:	4b2e      	ldr	r3, [pc, #184]	; (c3098 <__mdiff+0x10c>)
   c2fe0:	4602      	mov	r2, r0
   c2fe2:	f44f 7110 	mov.w	r1, #576	; 0x240
   c2fe6:	e7e5      	b.n	c2fb4 <__mdiff+0x28>
   c2fe8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c2fec:	6926      	ldr	r6, [r4, #16]
   c2fee:	60c5      	str	r5, [r0, #12]
   c2ff0:	f104 0914 	add.w	r9, r4, #20
   c2ff4:	f108 0514 	add.w	r5, r8, #20
   c2ff8:	f100 0e14 	add.w	lr, r0, #20
   c2ffc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c3000:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c3004:	f108 0210 	add.w	r2, r8, #16
   c3008:	46f2      	mov	sl, lr
   c300a:	2100      	movs	r1, #0
   c300c:	f859 3b04 	ldr.w	r3, [r9], #4
   c3010:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c3014:	fa1f f883 	uxth.w	r8, r3
   c3018:	fa11 f18b 	uxtah	r1, r1, fp
   c301c:	0c1b      	lsrs	r3, r3, #16
   c301e:	eba1 0808 	sub.w	r8, r1, r8
   c3022:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c3026:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c302a:	fa1f f888 	uxth.w	r8, r8
   c302e:	1419      	asrs	r1, r3, #16
   c3030:	454e      	cmp	r6, r9
   c3032:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c3036:	f84a 3b04 	str.w	r3, [sl], #4
   c303a:	d8e7      	bhi.n	c300c <__mdiff+0x80>
   c303c:	1b33      	subs	r3, r6, r4
   c303e:	3b15      	subs	r3, #21
   c3040:	f023 0303 	bic.w	r3, r3, #3
   c3044:	3304      	adds	r3, #4
   c3046:	3415      	adds	r4, #21
   c3048:	42a6      	cmp	r6, r4
   c304a:	bf38      	it	cc
   c304c:	2304      	movcc	r3, #4
   c304e:	441d      	add	r5, r3
   c3050:	4473      	add	r3, lr
   c3052:	469e      	mov	lr, r3
   c3054:	462e      	mov	r6, r5
   c3056:	4566      	cmp	r6, ip
   c3058:	d30e      	bcc.n	c3078 <__mdiff+0xec>
   c305a:	f10c 0203 	add.w	r2, ip, #3
   c305e:	1b52      	subs	r2, r2, r5
   c3060:	f022 0203 	bic.w	r2, r2, #3
   c3064:	3d03      	subs	r5, #3
   c3066:	45ac      	cmp	ip, r5
   c3068:	bf38      	it	cc
   c306a:	2200      	movcc	r2, #0
   c306c:	441a      	add	r2, r3
   c306e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c3072:	b17b      	cbz	r3, c3094 <__mdiff+0x108>
   c3074:	6107      	str	r7, [r0, #16]
   c3076:	e7a3      	b.n	c2fc0 <__mdiff+0x34>
   c3078:	f856 8b04 	ldr.w	r8, [r6], #4
   c307c:	fa11 f288 	uxtah	r2, r1, r8
   c3080:	1414      	asrs	r4, r2, #16
   c3082:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c3086:	b292      	uxth	r2, r2
   c3088:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c308c:	f84e 2b04 	str.w	r2, [lr], #4
   c3090:	1421      	asrs	r1, r4, #16
   c3092:	e7e0      	b.n	c3056 <__mdiff+0xca>
   c3094:	3f01      	subs	r7, #1
   c3096:	e7ea      	b.n	c306e <__mdiff+0xe2>
   c3098:	000c53e1 	.word	0x000c53e1
   c309c:	000c5468 	.word	0x000c5468

000c30a0 <__ulp>:
   c30a0:	b082      	sub	sp, #8
   c30a2:	ed8d 0b00 	vstr	d0, [sp]
   c30a6:	9b01      	ldr	r3, [sp, #4]
   c30a8:	4912      	ldr	r1, [pc, #72]	; (c30f4 <__ulp+0x54>)
   c30aa:	4019      	ands	r1, r3
   c30ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c30b0:	2900      	cmp	r1, #0
   c30b2:	dd05      	ble.n	c30c0 <__ulp+0x20>
   c30b4:	2200      	movs	r2, #0
   c30b6:	460b      	mov	r3, r1
   c30b8:	ec43 2b10 	vmov	d0, r2, r3
   c30bc:	b002      	add	sp, #8
   c30be:	4770      	bx	lr
   c30c0:	4249      	negs	r1, r1
   c30c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c30c6:	ea4f 5021 	mov.w	r0, r1, asr #20
   c30ca:	f04f 0200 	mov.w	r2, #0
   c30ce:	f04f 0300 	mov.w	r3, #0
   c30d2:	da04      	bge.n	c30de <__ulp+0x3e>
   c30d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c30d8:	fa41 f300 	asr.w	r3, r1, r0
   c30dc:	e7ec      	b.n	c30b8 <__ulp+0x18>
   c30de:	f1a0 0114 	sub.w	r1, r0, #20
   c30e2:	291e      	cmp	r1, #30
   c30e4:	bfda      	itte	le
   c30e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c30ea:	fa20 f101 	lsrle.w	r1, r0, r1
   c30ee:	2101      	movgt	r1, #1
   c30f0:	460a      	mov	r2, r1
   c30f2:	e7e1      	b.n	c30b8 <__ulp+0x18>
   c30f4:	7ff00000 	.word	0x7ff00000

000c30f8 <__b2d>:
   c30f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c30fa:	6905      	ldr	r5, [r0, #16]
   c30fc:	f100 0714 	add.w	r7, r0, #20
   c3100:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c3104:	1f2e      	subs	r6, r5, #4
   c3106:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c310a:	4620      	mov	r0, r4
   c310c:	f7ff fd48 	bl	c2ba0 <__hi0bits>
   c3110:	f1c0 0320 	rsb	r3, r0, #32
   c3114:	280a      	cmp	r0, #10
   c3116:	f8df c07c 	ldr.w	ip, [pc, #124]	; c3194 <__b2d+0x9c>
   c311a:	600b      	str	r3, [r1, #0]
   c311c:	dc14      	bgt.n	c3148 <__b2d+0x50>
   c311e:	f1c0 0e0b 	rsb	lr, r0, #11
   c3122:	fa24 f10e 	lsr.w	r1, r4, lr
   c3126:	42b7      	cmp	r7, r6
   c3128:	ea41 030c 	orr.w	r3, r1, ip
   c312c:	bf34      	ite	cc
   c312e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c3132:	2100      	movcs	r1, #0
   c3134:	3015      	adds	r0, #21
   c3136:	fa04 f000 	lsl.w	r0, r4, r0
   c313a:	fa21 f10e 	lsr.w	r1, r1, lr
   c313e:	ea40 0201 	orr.w	r2, r0, r1
   c3142:	ec43 2b10 	vmov	d0, r2, r3
   c3146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c3148:	42b7      	cmp	r7, r6
   c314a:	bf3a      	itte	cc
   c314c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c3150:	f1a5 0608 	subcc.w	r6, r5, #8
   c3154:	2100      	movcs	r1, #0
   c3156:	380b      	subs	r0, #11
   c3158:	d017      	beq.n	c318a <__b2d+0x92>
   c315a:	f1c0 0c20 	rsb	ip, r0, #32
   c315e:	fa04 f500 	lsl.w	r5, r4, r0
   c3162:	42be      	cmp	r6, r7
   c3164:	fa21 f40c 	lsr.w	r4, r1, ip
   c3168:	ea45 0504 	orr.w	r5, r5, r4
   c316c:	bf8c      	ite	hi
   c316e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c3172:	2400      	movls	r4, #0
   c3174:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c3178:	fa01 f000 	lsl.w	r0, r1, r0
   c317c:	fa24 f40c 	lsr.w	r4, r4, ip
   c3180:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c3184:	ea40 0204 	orr.w	r2, r0, r4
   c3188:	e7db      	b.n	c3142 <__b2d+0x4a>
   c318a:	ea44 030c 	orr.w	r3, r4, ip
   c318e:	460a      	mov	r2, r1
   c3190:	e7d7      	b.n	c3142 <__b2d+0x4a>
   c3192:	bf00      	nop
   c3194:	3ff00000 	.word	0x3ff00000

000c3198 <__d2b>:
   c3198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c319c:	4689      	mov	r9, r1
   c319e:	2101      	movs	r1, #1
   c31a0:	ec57 6b10 	vmov	r6, r7, d0
   c31a4:	4690      	mov	r8, r2
   c31a6:	f7ff fc09 	bl	c29bc <_Balloc>
   c31aa:	4604      	mov	r4, r0
   c31ac:	b930      	cbnz	r0, c31bc <__d2b+0x24>
   c31ae:	4602      	mov	r2, r0
   c31b0:	4b25      	ldr	r3, [pc, #148]	; (c3248 <__d2b+0xb0>)
   c31b2:	4826      	ldr	r0, [pc, #152]	; (c324c <__d2b+0xb4>)
   c31b4:	f240 310a 	movw	r1, #778	; 0x30a
   c31b8:	f7f9 ff8a 	bl	bd0d0 <__assert_func>
   c31bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c31c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c31c4:	bb35      	cbnz	r5, c3214 <__d2b+0x7c>
   c31c6:	2e00      	cmp	r6, #0
   c31c8:	9301      	str	r3, [sp, #4]
   c31ca:	d028      	beq.n	c321e <__d2b+0x86>
   c31cc:	4668      	mov	r0, sp
   c31ce:	9600      	str	r6, [sp, #0]
   c31d0:	f7ff fd06 	bl	c2be0 <__lo0bits>
   c31d4:	9900      	ldr	r1, [sp, #0]
   c31d6:	b300      	cbz	r0, c321a <__d2b+0x82>
   c31d8:	9a01      	ldr	r2, [sp, #4]
   c31da:	f1c0 0320 	rsb	r3, r0, #32
   c31de:	fa02 f303 	lsl.w	r3, r2, r3
   c31e2:	430b      	orrs	r3, r1
   c31e4:	40c2      	lsrs	r2, r0
   c31e6:	6163      	str	r3, [r4, #20]
   c31e8:	9201      	str	r2, [sp, #4]
   c31ea:	9b01      	ldr	r3, [sp, #4]
   c31ec:	61a3      	str	r3, [r4, #24]
   c31ee:	2b00      	cmp	r3, #0
   c31f0:	bf14      	ite	ne
   c31f2:	2202      	movne	r2, #2
   c31f4:	2201      	moveq	r2, #1
   c31f6:	6122      	str	r2, [r4, #16]
   c31f8:	b1d5      	cbz	r5, c3230 <__d2b+0x98>
   c31fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c31fe:	4405      	add	r5, r0
   c3200:	f8c9 5000 	str.w	r5, [r9]
   c3204:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c3208:	f8c8 0000 	str.w	r0, [r8]
   c320c:	4620      	mov	r0, r4
   c320e:	b003      	add	sp, #12
   c3210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c3214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c3218:	e7d5      	b.n	c31c6 <__d2b+0x2e>
   c321a:	6161      	str	r1, [r4, #20]
   c321c:	e7e5      	b.n	c31ea <__d2b+0x52>
   c321e:	a801      	add	r0, sp, #4
   c3220:	f7ff fcde 	bl	c2be0 <__lo0bits>
   c3224:	9b01      	ldr	r3, [sp, #4]
   c3226:	6163      	str	r3, [r4, #20]
   c3228:	2201      	movs	r2, #1
   c322a:	6122      	str	r2, [r4, #16]
   c322c:	3020      	adds	r0, #32
   c322e:	e7e3      	b.n	c31f8 <__d2b+0x60>
   c3230:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c3234:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c3238:	f8c9 0000 	str.w	r0, [r9]
   c323c:	6918      	ldr	r0, [r3, #16]
   c323e:	f7ff fcaf 	bl	c2ba0 <__hi0bits>
   c3242:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c3246:	e7df      	b.n	c3208 <__d2b+0x70>
   c3248:	000c53e1 	.word	0x000c53e1
   c324c:	000c5468 	.word	0x000c5468

000c3250 <__ratio>:
   c3250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3254:	4688      	mov	r8, r1
   c3256:	4669      	mov	r1, sp
   c3258:	4681      	mov	r9, r0
   c325a:	f7ff ff4d 	bl	c30f8 <__b2d>
   c325e:	a901      	add	r1, sp, #4
   c3260:	4640      	mov	r0, r8
   c3262:	ec55 4b10 	vmov	r4, r5, d0
   c3266:	f7ff ff47 	bl	c30f8 <__b2d>
   c326a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c326e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c3272:	eba3 0c02 	sub.w	ip, r3, r2
   c3276:	e9dd 3200 	ldrd	r3, r2, [sp]
   c327a:	1a9b      	subs	r3, r3, r2
   c327c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c3280:	ec51 0b10 	vmov	r0, r1, d0
   c3284:	2b00      	cmp	r3, #0
   c3286:	bfd6      	itet	le
   c3288:	460a      	movle	r2, r1
   c328a:	462a      	movgt	r2, r5
   c328c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c3290:	468b      	mov	fp, r1
   c3292:	462f      	mov	r7, r5
   c3294:	bfd4      	ite	le
   c3296:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c329a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c329e:	4620      	mov	r0, r4
   c32a0:	ee10 2a10 	vmov	r2, s0
   c32a4:	465b      	mov	r3, fp
   c32a6:	4639      	mov	r1, r7
   c32a8:	f7fd fc04 	bl	c0ab4 <__aeabi_ddiv>
   c32ac:	ec41 0b10 	vmov	d0, r0, r1
   c32b0:	b003      	add	sp, #12
   c32b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c32b6 <__copybits>:
   c32b6:	3901      	subs	r1, #1
   c32b8:	b570      	push	{r4, r5, r6, lr}
   c32ba:	1149      	asrs	r1, r1, #5
   c32bc:	6914      	ldr	r4, [r2, #16]
   c32be:	3101      	adds	r1, #1
   c32c0:	f102 0314 	add.w	r3, r2, #20
   c32c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c32c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c32cc:	1f05      	subs	r5, r0, #4
   c32ce:	42a3      	cmp	r3, r4
   c32d0:	d30c      	bcc.n	c32ec <__copybits+0x36>
   c32d2:	1aa3      	subs	r3, r4, r2
   c32d4:	3b11      	subs	r3, #17
   c32d6:	f023 0303 	bic.w	r3, r3, #3
   c32da:	3211      	adds	r2, #17
   c32dc:	42a2      	cmp	r2, r4
   c32de:	bf88      	it	hi
   c32e0:	2300      	movhi	r3, #0
   c32e2:	4418      	add	r0, r3
   c32e4:	2300      	movs	r3, #0
   c32e6:	4288      	cmp	r0, r1
   c32e8:	d305      	bcc.n	c32f6 <__copybits+0x40>
   c32ea:	bd70      	pop	{r4, r5, r6, pc}
   c32ec:	f853 6b04 	ldr.w	r6, [r3], #4
   c32f0:	f845 6f04 	str.w	r6, [r5, #4]!
   c32f4:	e7eb      	b.n	c32ce <__copybits+0x18>
   c32f6:	f840 3b04 	str.w	r3, [r0], #4
   c32fa:	e7f4      	b.n	c32e6 <__copybits+0x30>

000c32fc <__any_on>:
   c32fc:	f100 0214 	add.w	r2, r0, #20
   c3300:	6900      	ldr	r0, [r0, #16]
   c3302:	114b      	asrs	r3, r1, #5
   c3304:	4298      	cmp	r0, r3
   c3306:	b510      	push	{r4, lr}
   c3308:	db11      	blt.n	c332e <__any_on+0x32>
   c330a:	dd0a      	ble.n	c3322 <__any_on+0x26>
   c330c:	f011 011f 	ands.w	r1, r1, #31
   c3310:	d007      	beq.n	c3322 <__any_on+0x26>
   c3312:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c3316:	fa24 f001 	lsr.w	r0, r4, r1
   c331a:	fa00 f101 	lsl.w	r1, r0, r1
   c331e:	428c      	cmp	r4, r1
   c3320:	d10b      	bne.n	c333a <__any_on+0x3e>
   c3322:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c3326:	4293      	cmp	r3, r2
   c3328:	d803      	bhi.n	c3332 <__any_on+0x36>
   c332a:	2000      	movs	r0, #0
   c332c:	bd10      	pop	{r4, pc}
   c332e:	4603      	mov	r3, r0
   c3330:	e7f7      	b.n	c3322 <__any_on+0x26>
   c3332:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c3336:	2900      	cmp	r1, #0
   c3338:	d0f5      	beq.n	c3326 <__any_on+0x2a>
   c333a:	2001      	movs	r0, #1
   c333c:	e7f6      	b.n	c332c <__any_on+0x30>
	...

000c3340 <_open_r>:
   c3340:	b538      	push	{r3, r4, r5, lr}
   c3342:	4d07      	ldr	r5, [pc, #28]	; (c3360 <_open_r+0x20>)
   c3344:	4604      	mov	r4, r0
   c3346:	4608      	mov	r0, r1
   c3348:	4611      	mov	r1, r2
   c334a:	2200      	movs	r2, #0
   c334c:	602a      	str	r2, [r5, #0]
   c334e:	461a      	mov	r2, r3
   c3350:	f7f9 fc00 	bl	bcb54 <_open>
   c3354:	1c43      	adds	r3, r0, #1
   c3356:	d102      	bne.n	c335e <_open_r+0x1e>
   c3358:	682b      	ldr	r3, [r5, #0]
   c335a:	b103      	cbz	r3, c335e <_open_r+0x1e>
   c335c:	6023      	str	r3, [r4, #0]
   c335e:	bd38      	pop	{r3, r4, r5, pc}
   c3360:	2003e7f0 	.word	0x2003e7f0

000c3364 <_read_r>:
   c3364:	b538      	push	{r3, r4, r5, lr}
   c3366:	4d07      	ldr	r5, [pc, #28]	; (c3384 <_read_r+0x20>)
   c3368:	4604      	mov	r4, r0
   c336a:	4608      	mov	r0, r1
   c336c:	4611      	mov	r1, r2
   c336e:	2200      	movs	r2, #0
   c3370:	602a      	str	r2, [r5, #0]
   c3372:	461a      	mov	r2, r3
   c3374:	f7f9 fbfe 	bl	bcb74 <_read>
   c3378:	1c43      	adds	r3, r0, #1
   c337a:	d102      	bne.n	c3382 <_read_r+0x1e>
   c337c:	682b      	ldr	r3, [r5, #0]
   c337e:	b103      	cbz	r3, c3382 <_read_r+0x1e>
   c3380:	6023      	str	r3, [r4, #0]
   c3382:	bd38      	pop	{r3, r4, r5, pc}
   c3384:	2003e7f0 	.word	0x2003e7f0

000c3388 <nanf>:
   c3388:	ed9f 0a01 	vldr	s0, [pc, #4]	; c3390 <nanf+0x8>
   c338c:	4770      	bx	lr
   c338e:	bf00      	nop
   c3390:	7fc00000 	.word	0x7fc00000

000c3394 <__ascii_wctomb>:
   c3394:	b149      	cbz	r1, c33aa <__ascii_wctomb+0x16>
   c3396:	2aff      	cmp	r2, #255	; 0xff
   c3398:	bf85      	ittet	hi
   c339a:	238a      	movhi	r3, #138	; 0x8a
   c339c:	6003      	strhi	r3, [r0, #0]
   c339e:	700a      	strbls	r2, [r1, #0]
   c33a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c33a4:	bf98      	it	ls
   c33a6:	2001      	movls	r0, #1
   c33a8:	4770      	bx	lr
   c33aa:	4608      	mov	r0, r1
   c33ac:	4770      	bx	lr
	...

000c33b0 <__aeabi_d2lz>:
   c33b0:	b538      	push	{r3, r4, r5, lr}
   c33b2:	2200      	movs	r2, #0
   c33b4:	2300      	movs	r3, #0
   c33b6:	4604      	mov	r4, r0
   c33b8:	460d      	mov	r5, r1
   c33ba:	f7fd fcc3 	bl	c0d44 <__aeabi_dcmplt>
   c33be:	b928      	cbnz	r0, c33cc <__aeabi_d2lz+0x1c>
   c33c0:	4620      	mov	r0, r4
   c33c2:	4629      	mov	r1, r5
   c33c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c33c8:	f7fd bd92 	b.w	c0ef0 <__aeabi_d2ulz>
   c33cc:	4620      	mov	r0, r4
   c33ce:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c33d2:	f7fd fd8d 	bl	c0ef0 <__aeabi_d2ulz>
   c33d6:	4240      	negs	r0, r0
   c33d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c33dc:	bd38      	pop	{r3, r4, r5, pc}
   c33de:	bf00      	nop

000c33e0 <dynalib_user>:
   c33e0:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c33f0:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c3400:	7620 7269 7574 6c61 6900 696e 2074 6166      virtual.init fa
   c3410:	6c69 6465 4c00 526f 2041 6152 6964 206f     iled.LoRA Radio 
   c3420:	6e69 7469 6169 696c 657a 2064 7361 6120     initialized as a
   c3430:	6720 7461 7765 7961 7720 7469 2068 2061      gateway with a 
   c3440:	6564 6976 6563 4449 6f20 2066 7325 4c00     deviceID of %s.L
   c3450:	526f 2041 6152 6964 206f 6e69 7469 6169     oRA Radio initia
   c3460:	696c 657a 2064 7361 6e20 646f 2065 6925     lized as node %i
   c3470:	6120 646e 6120 6420 7665 6369 4965 2044      and a deviceID 
   c3480:	666f 2520 0073 6f4c 4152 5220 6461 6f69     of %s.LoRA Radio
   c3490:	6920 696e 6974 6c61 7a69 6465 6120 2073      initialized as 
   c34a0:	6e61 7520 636e 6e6f 6966 7567 6572 2064     an unconfigured 
   c34b0:	6f6e 6564 2520 2069 6e61 2064 2061 6564     node %i and a de
   c34c0:	6976 6563 4449 6f20 2066 7325 5000 7261     viceID of %s.Par
   c34d0:	6573 2064 7553 6363 7365 6673 6c75 796c     sed Successfully
   c34e0:	5000 7261 6973 676e 6520 7272 726f 7220     .Parsing error r
   c34f0:	7365 7465 6974 676e 6e20 646f 4965 2044     esetting nodeID 
   c3500:	6164 6174 6162 6573 6e00 6c75 006c 6f6e     database.null.no
   c3510:	6564 0073 4964 0044 7246 6d6f 6720 7465     des.dID.From get
   c3520:	7954 6570 6620 6e75 7463 6f69 206e 6f4e     Type function No
   c3530:	6564 6e20 6d75 6562 2072 6f6e 2074 6f66     de number not fo
   c3540:	6e75 0064 7974 6570 4600 6f72 206d 6567     und.type.From ge
   c3550:	4174 656c 7472 6620 6e75 7463 6f69 2c6e     tAlert function,
   c3560:	4e20 646f 2065 756e 626d 7265 6e20 746f      Node number not
   c3570:	6620 756f 646e 7000 6e65 0064 6e75 6568      found.pend.unhe
   c3580:	6c61 6874 0079 616c 7473 4e00 646f 2065     althy.last.Node 
   c3590:	6f63 6e6e 6365 6974 6e6f 2073 7261 2065     connections are 
   c35a0:	7325 0020 6f4e 6564 6320 6e6f 656e 7463     %s .Node connect
   c35b0:	6f69 736e 7520 686e 6165 746c 7968 202c     ions unhealthy, 
   c35c0:	6572 6573 6974 676e 4c20 526f 2041 6172     reseting LoRA ra
   c35d0:	6964 006f 6163 0072 6570 7372 6e6f 4e00     dio.car.person.N
   c35e0:	646f 2065 6425 6a20 696f 656e 2064 6977     ode %d joined wi
   c35f0:	6874 7320 6e65 6f73 5472 7079 2065 7325     th sensorType %s
   c3600:	6320 756f 746e 7265 7720 7469 2068 6c61      counter with al
   c3610:	7265 2074 6425 6120 646e 7320 6769 616e     ert %d and signa
   c3620:	206c 7473 6572 676e 6874 2520 0064 7473     l strength %d.st
   c3630:	7461 7375 4e00 646f 2065 6425 6a20 696f     atus.Node %d joi
   c3640:	206e 6572 7073 6e6f 6573 6e20 746f 6120     n response not a
   c3650:	6b63 6f6e 6c77 6465 6567 0064 6f6e 6564     cknowledged.node
   c3660:	7300 6375 0063 6f4e 6564 2520 2c64 6420     .succ.Node %d, d
   c3670:	7665 6369 4965 3a44 2520 2c73 6c20 7361     eviceID: %s, las
   c3680:	4374 6e6f 656e 7463 6465 203a 7325 202c     tConnected: %s, 
   c3690:	7974 6570 2520 2c64 7320 6375 6563 7373     type %d, success
   c36a0:	2520 2e34 6632 7720 7469 2068 6570 646e      %4.2f with pend
   c36b0:	6e69 2067 6c61 7265 2074 6425 6e00 646f     ing alert %d.nod
   c36c0:	4465 7461 0061 6966 646e 6f4e 6564 754e     eData.findNodeNu
   c36d0:	626d 7265 7220 6e61 6f20 7475 6f20 2066     mber ran out of 
   c36e0:	6e65 7274 6569 2073 7461 6920 3d20 2520     entries at i = %
   c36f0:	0064 654e 2077 6f6e 6564 7720 6c69 206c     d.New node will 
   c3700:	6562 6120 7373 6769 656e 2064 756e 626d     be assigned numb
   c3710:	7265 2520 2c64 6420 7665 6369 4965 2044     er %d, deviceID 
   c3720:	666f 2520 0073 6f4e 6564 6e20 746f 6320     of %s.Node not c
   c3730:	6e6f 6966 7567 6572 0064 6843 6e61 6967     onfigured.Changi
   c3740:	676e 7320 6e65 6f73 2072 7974 6570 6620     ng sensor type f
   c3750:	6f72 206d 6425 7420 206f 6425 4e00 646f     rom %d to %d.Nod
   c3760:	2065 6425 6a20 696f 206e 6572 7571 7365     e %d join reques
   c3770:	2074 7266 6d6f 2520 2073 6977 6c6c 6320     t from %s will c
   c3780:	6168 676e 2065 6f6e 6564 6e20 6d75 6562     hange node numbe
   c3790:	2072 6f74 2520 0064 6f4e 6564 2520 2064     r to %d.Node %d 
   c37a0:	6f6a 6e69 7220 7165 6575 7473 6620 6f72     join request fro
   c37b0:	206d 7325 7320 7465 6974 676e 6320 6f6c     m %s setting clo
   c37c0:	6b63 6120 646e 7320 6e65 6f73 5472 7079     ck and sensorTyp
   c37d0:	2065 6f74 2520 0064 6843 6e61 6967 676e     e to %d.Changing
   c37e0:	7020 6e65 6964 676e 6120 656c 7472 6620      pending alert f
   c37f0:	6f72 206d 6425 7420 206f 6425 4900 206e     rom %d to %d.In 
   c3800:	6164 6174 6120 6b63 6f6e 6c77 6465 6567     data acknowledge
   c3810:	202c 6863 6e61 6967 676e 7420 7079 2065     , changing type 
   c3820:	6f74 6620 6f72 206d 6425 7420 206f 6425     to from %d to %d
   c3830:	4e00 646f 2065 6425 6920 2073 6e69 6176     .Node %d is inva
   c3840:	696c 2c64 7320 7465 6974 676e 6120 656c     lid, setting ale
   c3850:	7472 6320 646f 2065 6f74 3120 4e00 646f     rt code to 1.Nod
   c3860:	2065 6425 6820 7361 6120 7020 6e65 6964     e %d has a pendi
   c3870:	676e 6120 656c 7472 2520 0064 6f4e 6564     ng alert %d.Node
   c3880:	2520 2064 6164 6174 7220 7065 726f 2074      %d data report 
   c3890:	6425 6120 6b63 6f6e 6c77 6465 6567 2064     %d acknowledged 
   c38a0:	6977 6874 6120 656c 7472 2520 2c64 6120     with alert %d, a
   c38b0:	646e 7320 6769 616e 206c 7473 6572 676e     nd signal streng
   c38c0:	6874 2520 0064 6f4e 6564 2520 2064 6164     th %d.Node %d da
   c38d0:	6174 7220 7065 726f 2074 6572 7073 6e6f     ta report respon
   c38e0:	6573 6e20 746f 6120 6b63 6f6e 6c77 6465     se not acknowled
   c38f0:	6567 0064 6f4e 6564 2520 2064 6c61 7265     ged.Node %d aler
   c3900:	2074 6361 6e6b 776f 656c 6764 6465 4e00     t acknowledged.N
   c3910:	646f 2065 6425 5220 7365 6f70 736e 2065     ode %d Response 
   c3920:	6f6e 2074 6361 6e6b 776f 656c 6764 6465     not acknowledged
   c3930:	4e00 646f 2065 6425 6d20 7365 6173 6567     .Node %d message
   c3940:	6d20 6761 6369 6e20 6d75 6562 2072 666f      magic number of
   c3950:	2520 2064 6964 2064 6f6e 2074 616d 6374      %d did not matc
   c3960:	2068 6874 2065 614d 6967 2063 754e 626d     h the Magic Numb
   c3970:	7265 6920 206e 656d 6f6d 7972 2520 2064     er in memory %d 
   c3980:	202d 6749 6f6e 6972 676e 4e00 646f 2065     - Ignoring.Node 
   c3990:	6425 2520 2073 656d 7373 6761 2065 6977     %d %s message wi
   c39a0:	6874 7220 7373 3d69 6425 5700 2065 7261     th rssi=%d.We ar
   c39b0:	2065 7075 6164 6974 676e 7420 6568 7020     e updating the p
   c39c0:	6275 696c 6873 6620 6572 7571 6e65 7963     ublish frequency
   c39d0:	7420 206f 6925 6d20 6e69 7475 7365 0000      to %i minutes..

000c39e0 <_ZTVN8particle9LEDStatusE>:
	...
   c39e8:	40e1 000b 40fd 000b 40cd 000b               .@...@...@..

000c39f4 <_ZTV16JsonParserStaticILj1024ELj50EE>:
	...
   c39fc:	4111 000b 4125 000b                         .A..%A..

000c3a04 <_ZTV14LoRA_Functions>:
	...
   c3a0c:	40cf 000b 40d1 000b 7246 6d6f 2520 2073     .@...@..From %s 
   c3a1c:	6f74 2520 2073 6977 6874 6920 766e 6c61     to %s with inval
   c3a2c:	6469 7420 6d69 0065 7246 6d6f 2520 2073     id time.From %s 
   c3a3c:	6f74 2520 0073 6e55 6e6b 776f 006e 6f4e     to %s.Unknown.No
   c3a4c:	2074 6843 7261 6967 676e 4300 6168 6772     t Charging.Charg
   c3a5c:	6465 4400 7369 6863 7261 6967 676e 4600     ed.Discharging.F
   c3a6c:	7561 746c 4400 6369 6e6f 656e 7463 6465     ault.Diconnected
   c3a7c:	7b00 6422 7665 6369 6965 2264 223a 7325     .{"deviceid":"%s
   c3a8c:	2c22 2220 6f68 7275 796c 3a22 7525 202c     ", "hourly":%u, 
   c3a9c:	6422 6961 796c 3a22 7525 202c 7322 6e65     "daily":%u, "sen
   c3aac:	6f73 7472 7079 2265 253a 2c64 2220 6162     sortype":%d, "ba
   c3abc:	7474 7265 2279 253a 2e34 6632 222c 656b     ttery":%4.2f,"ke
   c3acc:	3179 3a22 2522 2273 222c 6574 706d 3a22     y1":"%s","temp":
   c3adc:	6425 202c 7222 7365 7465 2273 253a 2c64     %d, "resets":%d,
   c3aec:	6122 656c 7472 2273 203a 6425 202c 6e22     "alerts": %d, "n
   c3afc:	646f 2265 203a 6425 202c 7222 7373 2269     ode": %d, "rssi"
   c3b0c:	253a 2c64 2220 736d 2267 253a 2c64 2220     :%d, "msg":%d, "
   c3b1c:	7573 6363 7365 2273 253a 2e34 6632 202c     success":%4.2f, 
   c3b2c:	7422 6d69 7365 6174 706d 3a22 6c25 3075     "timestamp":%lu0
   c3b3c:	3030 007d 6255 6469 746f 2d73 6f4c 4152     00}.Ubidots-LoRA
   c3b4c:	4e2d 646f 2d65 3176 7b00 6422 7665 6369     -Node-v1.{"devic
   c3b5c:	6965 2264 223a 7325 2c22 2220 6f68 7275     eid":"%s", "hour
   c3b6c:	796c 3a22 7525 202c 6422 6961 796c 3a22     ly":%u, "daily":
   c3b7c:	7525 202c 7322 6e65 6f73 7472 7079 2265     %u, "sensortype"
   c3b8c:	253a 2c64 2220 6162 7474 7265 2279 253a     :%d, "battery":%
   c3b9c:	2e34 6632 222c 656b 3179 3a22 2522 2273     4.2f,"key1":"%s"
   c3bac:	222c 6574 706d 3a22 6425 202c 7222 7365     ,"temp":%d, "res
   c3bbc:	7465 2273 253a 2c64 2220 736d 2267 253a     ets":%d, "msg":%
   c3bcc:	2c64 2220 6974 656d 7473 6d61 2270 253a     d, "timestamp":%
   c3bdc:	756c 3030 7d30 5500 6962 6f64 7374 4c2d     lu000}.Ubidots-L
   c3bec:	526f 2d41 6147 6574 6177 2d79 3176 6900     oRA-Gateway-v1.i
   c3bfc:	0073 7369 6e20 746f 4500 5453 4535 5444     s.is not.EST5EDT
   c3c0c:	4d2c 2e33 2e32 2f30 3a32 3030 303a 2c30     ,M3.2.0/2:00:00,
   c3c1c:	314d 2e31 2e31 2f30 3a32 3030 303a 0030     M11.1.0/2:00:00.
   c3c2c:	4925 253a 3a4d 5325 7025 4c00 636f 6c61     %I:%M:%S%p.Local
   c3c3c:	6954 656d 6920 696e 6974 6c61 7a69 6465     Time initialized
   c3c4c:	202c 6974 656d 6920 2073 7325 6120 646e     , time is %s and
   c3c5c:	5220 4354 2520 2073 6573 0074 6f4c 6163      RTC %s set.Loca
   c3c6c:	546c 6d69 2065 6f6e 2074 6e69 7469 6169     lTime not initia
   c3c7c:	696c 657a 2064 6f73 7720 6c69 206c 656e     lized so will ne
   c3c8c:	6465 7420 206f 6f43 6e6e 6365 2074 6f74     ed to Connect to
   c3c9c:	5020 7261 6974 6c63 0065 7355 7265 6220      Particle.User b
   c3cac:	7475 6f74 206e 7270 7365 6573 2c64 6320     utton pressed, c
   c3cbc:	6e6f 656e 7463 6465 6d20 646f 0065 6f4e     onnected mode.No
   c3ccc:	7520 6573 2072 7562 7474 6e6f 7020 7375      user button pus
   c3cdc:	2068 6564 6574 6863 6574 0064 706f 6e65     h detechted.open
   c3cec:	6300 6f6c 6573 0064 5425 5300 656c 7065     .closed.%T.Sleep
   c3cfc:	6620 726f 2520 2069 6573 6f63 646e 2073      for %i seconds 
   c3d0c:	6974 6c6c 6e20 7865 2074 7665 6e65 2074     till next event 
   c3d1c:	7461 2520 2073 6977 6874 2520 696c 6620     at %s with %li f
   c3d2c:	6572 2065 656d 6f6d 7972 4100 6f77 656b     ree memory.Awoke
   c3d3c:	6120 2074 7325 7720 7469 2068 6c25 2069      at %s with %li 
   c3d4c:	7266 6565 6d20 6d65 726f 0079 6147 6574     free memory.Gate
   c3d5c:	6177 2079 7369 6c20 7369 6574 696e 676e     way is listening
   c3d6c:	6620 726f 4c20 526f 2041 656d 7373 6761      for LoRA messag
   c3d7c:	7365 6120 646e 7420 6568 7020 7261 206b     es and the park 
   c3d8c:	7369 2520 2073 2528 2064 202f 6425 2f20     is %s (%d / %d /
   c3d9c:	2520 2964 4900 206e 616d 6e69 6c20 6f6f      %d).In main loo
   c3dac:	2070 202d 6c61 7265 2074 6425 6120 646e     p - alert %d and
   c3dbc:	6f20 6570 206e 6f68 7275 2073 6425 5000      open hours %d.P
   c3dcc:	6275 696c 6873 6620 726f 6e20 646f 2065     ublish for node 
   c3ddc:	6425 4e00 7765 4420 7961 2d20 5220 7365     %d.New Day - Res
   c3dec:	7465 6974 676e 6520 6576 7972 6874 6e69     etting everythin
   c3dfc:	0067 6544 7065 7020 776f 7265 6420 776f     g.Deep power dow
   c3e0c:	206e 6564 6976 6563 5200 7365 7465 6974     n device.Resetti
   c3e1c:	676e 6420 6575 7420 206f 6f6c 2077 656d     ng due to low me
   c3e2c:	6f6d 7972 7b00 6e22 646f 7365 3a22 5d5b     mory.{"nodes":[]
   c3e3c:	007d 6552 6573 7474 6769 4e20 646f 4965     }.Resettig NodeI
   c3e4c:	2044 6f63 666e 6769 7420 3a6f 2520 0073     D config to: %s.
   c3e5c:	2041 656e 2077 6164 2079 202d 6572 6573     A new day - rese
   c3e6c:	7474 6e69 2067 7665 7265 7479 6968 676e     tting everything
   c3e7c:	4c00 616f 6964 676e 7320 7379 6574 206d     .Loading system 
   c3e8c:	6564 6166 6c75 7374 4f00 6570 206e 202f     defaults.Open / 
   c3e9c:	6c43 736f 2065 7369 7573 2065 202d 6572     Close issue - re
   c3eac:	6573 7474 6e69 0067                         setting.

000c3eb4 <_ZTV8MB85RC64>:
	...
   c3ebc:	6289 000b 629d 000b 9cd1 000b 9d67 000b     .b...b......g...
   c3ecc:	9de9 000b                                   ....

000c3ed0 <_ZTV10nodeIDData>:
	...
   c3ed8:	6591 000b 62e9 000b 62c7 000b c555 000b     .e...b...b..U...
   c3ee8:	c57d 000b c711 000b c7a9 000b 6389 000b     }............c..
   c3ef8:	639d 000b                                   .c..

000c3efc <_ZTV13sysStatusData>:
	...
   c3f04:	6ba5 000b 62e9 000b 62c7 000b c555 000b     .k...b...b..U...
   c3f14:	c57d 000b c711 000b c7a9 000b 6339 000b     }...........9c..
   c3f24:	634d 000b                                   Mc..

000c3f28 <_ZTV17currentStatusData>:
	...
   c3f30:	647d 000b 62e9 000b 62c7 000b c555 000b     }d...b...b..U...
   c3f40:	c57d 000b c711 000b c7a9 000b 6361 000b     }...........ac..
   c3f50:	6375 000b 6e49 7469 6169 696c 697a 676e     uc..Initializing
   c3f60:	5020 7261 6974 6c63 2065 7566 636e 6974      Particle functi
   c3f70:	6e6f 2073 6e61 2064 6176 6972 6261 656c     ons and variable
   c3f80:	0073 6f43 6d6d 6e61 7364 5600 7265 7a69     s.Commands.Veriz
   c3f90:	6e6f 5000 7261 6973 676e 6620 6961 656c     on.Parsing faile
   c3fa0:	2064 202d 6863 6365 206b 7973 746e 7861     d - check syntax
   c3fb0:	6300 646d 7600 7261 6600 006e 6572 6573     .cmd.var.fn.rese
   c3fc0:	0074 6552 6573 7474 6e69 2067 6874 2065     t.Resetting the 
   c3fd0:	6167 6574 6177 2779 2073 6f6e 6564 4420     gateway's node D
   c3fe0:	7461 0061 6c61 006c 6552 6573 7474 6e69     ata.all.Resettin
   c3ff0:	2067 6874 2065 6167 6574 6177 2779 2073     g the gateway's 
   c4000:	7973 7473 6d65 6120 646e 6320 7275 6572     system and curre
   c4010:	746e 6420 7461 0061 6552 6573 7474 6e69     nt data.Resettin
   c4020:	2067 6874 2065 6167 6574 6177 2779 2073     g the gateway's 
   c4030:	7563 7272 6e65 2074 6164 6174 5200 7365     current data.Res
   c4040:	7465 6974 676e 6e20 646f 2065 6425 7327     etting node %d's
   c4050:	7320 7379 6574 206d 6e61 2064 7563 7272      system and curr
   c4060:	6e65 2074 6164 6174 5200 7365 7465 6974     ent data.Resetti
   c4070:	676e 6e20 646f 2065 6425 7327 6320 7275     ng node %d's cur
   c4080:	6572 746e 6420 7461 0061 7266 7165 5300     rent data.freq.S
   c4090:	7465 6974 676e 7220 7065 726f 6974 676e     etting reporting
   c40a0:	6620 6572 7571 6e65 7963 7420 206f 6425      frequency to %d
   c40b0:	6d20 6e69 7475 7365 4e00 746f 6120 7620      minutes.Not a v
   c40c0:	6c61 6469 7220 7065 726f 6974 676e 6620     alid reporting f
   c40d0:	6572 7571 6e65 7963 7300 6174 0079 7274     requency.stay.tr
   c40e0:	6575 4700 696f 676e 7420 206f 656b 7065     ue.Going to keep
   c40f0:	4720 7461 7765 7961 6f20 206e 6150 7472      Gateway on Part
   c4100:	6369 656c 6120 646e 4c20 526f 2041 656e     icle and LoRA ne
   c4110:	7774 726f 736b 4700 696f 676e 6220 6361     tworks.Going bac
   c4120:	206b 6f74 6e20 726f 616d 206c 6f63 6e6e     k to normal conn
   c4130:	6365 6974 6976 7974 7200 7470 5000 6972     ectivity.rpt.Pri
   c4140:	746e 6e69 2067 6f6e 6564 4449 4420 7461     nting nodeID Dat
   c4150:	0061 6553 7474 6e69 2067 706f 6e65 6e69     a.Setting openin
   c4160:	2067 6f68 7275 7420 206f 6425 303a 0030     g hour to %d:00.
   c4170:	704f 6e65 6820 756f 2072 202d 756d 7473     Open hour - must
   c4180:	6220 2065 2d30 3231 6300 6f6c 6573 5300      be 0-12.close.S
   c4190:	7465 6974 676e 6320 6f6c 6973 676e 6820     etting closing h
   c41a0:	756f 2072 6f74 2520 3a64 3030 4300 6f6c     our to %d:00.Clo
   c41b0:	6573 6820 756f 2072 202d 756d 7473 6220     se hour - must b
   c41c0:	2065 3331 322d 0034 6553 7474 6e69 2067     e 13-24.Setting 
   c41d0:	6573 736e 726f 7420 7079 2065 6f74 2520     sensor type to %
   c41e0:	2064 6f66 2072 6f6e 6564 2520 0064 6553     d for node %d.Se
   c41f0:	736e 726f 5420 7079 2065 2d20 6d20 7375     nsor Type  - mus
   c4200:	2074 6562 3020 322d 7300 6d69 5300 7465     t be 0-2.sim.Set
   c4210:	6974 676e 5320 4d49 7420 206f 7325 5300     ting SIM to %s.S
   c4220:	4d49 5420 7079 2065 2d20 6d20 7375 2074     IM Type  - must 
   c4230:	6562 3020 2820 6150 7472 6369 656c 2029     be 0 (Particle) 
   c4240:	726f 3120 2820 6556 6972 6f7a 296e 4e00     or 1 (Verizon).N
   c4250:	746f 6120 7620 6c61 6469 6320 6d6f 616d     ot a valid comma
   c4260:	646e 4900 206e 6874 2065 6964 6373 6e6f     nd.In the discon
   c4270:	656e 7463 6620 6f72 206d 6150 7472 6369     nect from Partic
   c4280:	656c 6620 6e75 7463 6f69 006e 6146 6c69     le function.Fail
   c4290:	6465 7420 206f 6964 6373 6e6f 656e 7463     ed to disconnect
   c42a0:	6620 6f72 206d 6150 7472 6369 656c 4400      from Particle.D
   c42b0:	7369 6f63 6e6e 6365 6574 2064 7266 6d6f     isconnected from
   c42c0:	5020 7261 6974 6c63 2065 6e69 2520 2069      Particle in %i 
   c42d0:	6573 6f63 646e 0073 6146 6c69 6465 7420     seconds.Failed t
   c42e0:	206f 7574 6e72 6f20 6666 7420 6568 4320     o turn off the C
   c42f0:	6c65 756c 616c 2072 6f6d 6564 006d 7554     ellular modem.Tu
   c4300:	6e72 6465 6f20 6666 7420 6568 6320 6c65     rned off the cel
   c4310:	756c 616c 2072 6f6d 6564 206d 6e69 2520     lular modem in %
   c4320:	2069 6573 6f63 646e 0073 0000               i seconds...

000c432c <_ZTVN5spark10LogHandlerE>:
	...
   c433c:	40a5 000b 6bf5 000b                         .@...k..

000c4344 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c434c:	6ccd 000b 6d01 000b eccd 000b 6bf7 000b     .l...m.......k..

000c435c <_ZTV16JsonParserStaticILj1024ELj80EE>:
	...
   c4364:	6c11 000b 6c25 000b                         .l..%l..

000c436c <_ZTV18Particle_Functions>:
	...
   c4374:	6bff 000b 6c01 000b 6e49 7469 6c61 7a69     .k...l..Initaliz
   c4384:	6e69 2067 6874 2065 6970 4d6e 646f 7365     ing the pinModes
   c4394:	4900 696e 6974 6c61 7a69 6e69 2067 6f50     .Initializing Po
   c43a4:	6577 2072 6f43 666e 6769 0000               wer Config..

000c43b0 <BLUE_LED>:
   c43b0:	0007                                        ..

000c43b2 <BUTTON_PIN>:
   c43b2:	0004                                        ..

000c43b4 <RFM95_CS>:
   c43b4:	0005                                        ..

000c43b6 <RFM95_INT>:
   c43b6:	0002                                        ..

000c43b8 <RFM95_RST>:
   c43b8:	0006                                        ..

000c43ba <TMP36_SENSE_PIN>:
   c43ba:	000f 6f4e 656e 5700 4669 0069 5347 004d     ..None.WiFi.GSM.
   c43ca:	4d55 5354 4300 4d44 0041 544c 0045 4549     UMTS.CDMA.LTE.IE
   c43da:	4545 3038 3132 3435 4c00 4554 435f 5441     EE802154.LTE_CAT
   c43ea:	4d5f 0031 544c 5f45 4143 5f54 424e 0031     _M1.LTE_CAT_NB1.
   c43fa:	7325 5320 253a 2e32 6630 2525 202c 3a51     %s S:%2.0f%%, Q:
   c440a:	3225 302e 2566 2025 4100 7373 7265 6974     %2.0f%% .Asserti
   c441a:	6e6f 6146 6c69 7275 2065 7273 2063 2626     onFailure src &&
   c442a:	7320 6372 3e2d 6163 6c6c 6162 6b63 0000      src->callback..
   c443a:	0000 3a42 000c 43bc 000c 43c1 000c 43c6     ..B:...C...C...C
   c444a:	000c 43ca 000c 43cf 000c 43d4 000c 43d8     ...C...C...C...C
   c445a:	000c 43e3 000c 43ee 000c 6166 6c69 6465     ...C...C..failed
   c446a:	7420 206f 6572 6461 7220 6765 6441 7264      to read regAddr
   c447a:	253d 3230 2078 6f63 6e75 3d74 7525 6600     =%02x count=%u.f
   c448a:	6961 656c 2064 6f74 7220 6165 2064 6572     ailed to read re
   c449a:	4167 6464 3d72 3025 7832 7320 6174 3d74     gAddr=%02x stat=
   c44aa:	6425 4600 554f 2054 6964 2064 6f6e 2074     %d.FOUT did not 
   c44ba:	6f67 4820 4749 0048 6f6e 2074 6564 6574     go HIGH.not dete
   c44ca:	7463 6465 6600 6961 656c 2064 6f74 7720     cted.failed to w
   c44da:	6972 6574 7220 6765 6441 7264 253d 3230     rite regAddr=%02
   c44ea:	2078 7473 7461 253d 0064 6573 5774 5444     x stat=%d.setWDT
   c44fa:	2520 0064 6177 6374 6468 676f 6320 656c      %d.watchdog cle
   c450a:	7261 6465 6220 6552 7573 746c 253d 0064     ared bResult=%d.
   c451a:	6177 6374 6468 676f 7320 7465 6620 756f     watchdog set fou
   c452a:	5372 6365 3d73 6425 6220 6552 7573 746c     rSecs=%d bResult
   c453a:	253d 0064 4157 4354 4448 474f 4400 4545     =%d.WATCHDOG.DEE
   c454a:	5f50 4f50 4557 5f52 4f44 4e57 4300 554f     P_POWER_DOWN.COU
   c455a:	544e 4f44 4e57 545f 4d49 5245 4100 414c     NTDOWN_TIMER.ALA
   c456a:	4d52 6600 6961 756c 6572 6920 206e 7075     RM.failure in up
   c457a:	6164 6574 6157 656b 6552 7361 6e6f 2520     dateWakeReason %
   c458a:	0064 6177 656b 7220 6165 6f73 206e 203d     d.wake reason = 
   c459a:	7325 6600 6961 756c 6572 6920 206e 6573     %s.failure in se
   c45aa:	4374 756f 746e 6f64 6e77 6954 656d 2072     tCountdownTimer 
   c45ba:	6425 6600 6961 756c 6572 6920 206e 6564     %d.failure in de
   c45ca:	7065 6f50 6577 4472 776f 206e 6425 5200     epPowerDown %d.R
   c45da:	4745 535f 454c 5045 435f 5254 3d4c 7830     EG_SLEEP_CTRL=0x
   c45ea:	3225 0078 6964 6e64 7427 7020 776f 7265     %2x.didn't power
   c45fa:	6420 776f 006e 3025 6434 252d 3230 2d64      down.%04d-%02d-
   c460a:	3025 6432 2520 3230 3a64 3025 6432 253a     %02d %02d:%02d:%
   c461a:	3230 0064 6567 5274 6374 7341 6d54 2520     02d.getRtcAsTm %
   c462a:	0073 6573 5274 6374 7341 6d54 2520 0073     s.setRtcAsTm %s.
   c463a:	6166 6c69 7275 2065 6e69 7320 7465 7452     failure in setRt
   c464a:	4663 6f72 546d 206d 6425 7300 7465 5220     cFromTm %d.set R
   c465a:	4354 6620 6f72 206d 6c63 756f 2064 7325     TC from cloud %s
   c466a:	7300 7465 7320 7379 6574 206d 6c63 636f     .set system cloc
   c467a:	206b 7266 6d6f 5220 4354 2520 0073 6166     k from RTC %s.fa
   c468a:	6c69 6465 7420 206f 6564 6574 7463 4120     iled to detect A
   c469a:	3142 3038 0035 7061 2e70 6261 3831 3530     B1805.app.ab1805
	...

000c46ac <_ZTV6AB1805>:
	...
   c46b4:	778d 000b 778f 000b 7e05 000b 7e8b 000b     .w...w...~...~..
   c46c4:	6142 6b63 7267 756f 646e 7550 6c62 7369     BackgroundPublis
   c46d4:	5268 004b                                   hRK.

000c46d8 <_ZTV19BackgroundPublishRK>:
	...
   c46e0:	83c1 000b 83dd 000b 755c 3025 5834 2500     ........\u%04X.%
   c46f0:	2a2e 0066 6625 0000                         .*f.%f..

000c46f8 <_ZTV10JsonBuffer>:
	...
   c4700:	86c1 000b 86dd 000b                         ........

000c4708 <_ZTV10JsonParser>:
	...
   c4710:	8741 000b 8765 000b                         A...e...

000c4718 <_ZTV10JsonWriter>:
	...
   c4720:	86f1 000b 8705 000b                         ........

000c4728 <_ZTV12JsonModifier>:
	...
   c4730:	8719 000b 872d 000b 6425 253a 3a64 6425     ....-...%d:%d:%d
   c4740:	3000 3a30 3030 303a 0030 3332 353a 3a39     .00:00:00.23:59:
   c4750:	3935 4d00 6425 252e 2e64 6425 2c00 5a00     59.M%d.%d.%d.,.Z
   c4760:	2500 302b 6433 253a 3230 0075               .%+03d:%02u.

000c476c <_ZTV9LocalTime>:
	...
   c4774:	9391 000b 93a9 000b                         ........

000c477c <_ZTV12LocalTimeHMS>:
	...
   c4784:	9341 000b 9345 000b                         A...E...

000c478c <_ZTV15LocalTimeChange>:
	...
   c4794:	9343 000b 9353 000b                         C...S...

000c479c <_ZTV22LocalTimePosixTimezone>:
	...
   c47a4:	9361 000b 937d 000b                         a...}...

000c47ac <_ZTV6MB85RC>:
	...
   c47b4:	9c91 000b 9c93 000b 9cd1 000b 9d67 000b     ............g...
   c47c4:	9de9 000b 6966 656c 754e 3d6d 6425 7320     ....fileNum=%d s
   c47d4:	7a69 3d65 6c25 0064 6572 6461 7551 7565     ize=%ld.readQueu
   c47e4:	4665 6c69 2065 6425 6520 6576 746e 253d     eFile %d event=%
   c47f4:	2073 6164 6174 253d 0073 6572 6461 7551     s data=%s.readQu
   c4804:	7565 4665 6c69 2065 6425 6320 726f 7572     eueFile %d corru
   c4814:	7470 6465 6520 6576 746e 6e20 6d61 2065     pted event name 
   c4824:	726f 6420 7461 0061 6572 6461 7551 7565     or data.readQueu
   c4834:	4665 6c69 2065 6425 6220 6461 6d20 6761     eFile %d bad mag
   c4844:	6369 253d 3830 786c 7620 7265 6973 6e6f     ic=%08lx version
   c4854:	253d 2075 6568 6461 7265 6953 657a 253d     =%u headerSize=%
   c4864:	2075 616e 656d 654c 3d6e 7525 2f00 7375     u nameLen=%u./us
   c4874:	2f72 7570 7162 6575 6575 7700 6972 6574     r/pubqueue.write
   c4884:	7551 7565 5465 466f 6c69 7365 6620 6c69     QueueToFiles fil
   c4894:	4e65 6d75 253d 0064 6964 6373 7261 6564     eNum=%d.discarde
   c48a4:	2064 7665 6e65 2074 6425 7200 7365 7465     d event %d.reset
   c48b4:	6f20 2072 6964 6373 6e6f 656e 7463 6520      or disconnect e
   c48c4:	6576 746e 202c 6173 6576 6620 6c69 7365     vent, save files
   c48d4:	7420 206f 7571 7565 0065 6172 006d 6964      to queue.ram.di
   c48e4:	6373 7261 6964 676e 6320 726f 7572 7470     scarding corrupt
   c48f4:	6465 6620 6c69 2065 6425 7000 6275 696c     ed file %d.publi
   c4904:	6873 6e69 2067 7325 6520 6576 746e 253d     shing %s event=%
   c4914:	2073 6164 6174 253d 0073 5953 5453 4d45     s data=%s.SYSTEM
   c4924:	545f 5248 4145 2844 4e45 4241 454c 2944     _THREAD(ENABLED)
   c4934:	6920 2073 6572 7571 7269 6465 7000 6275      is required.pub
   c4944:	696c 6873 6f43 6d6d 6e6f 6520 6576 746e     lishCommon event
   c4954:	614e 656d 253d 2073 7665 6e65 4474 7461     Name=%s eventDat
   c4964:	3d61 7325 6300 6e61 6f6e 2074 7263 6165     a=%s.cannot crea
   c4974:	6574 7320 6474 3a3a 6564 7571 2065 616c     te std::deque la
   c4984:	6772 7265 7420 6168 206e 616d 5f78 6973     rger than max_si
   c4994:	657a 2928 6600 6c69 5165 6575 6575 654c     ze().fileQueueLe
   c49a4:	3d6e 7525 7220 6d61 7551 7565 4c65 6e65     n=%u ramQueueLen
   c49b4:	253d 2075 6f63 6e6e 6365 6574 3d64 6425     =%u connected=%d
   c49c4:	7100 6575 6575 2064 6f74 7220 6d61 7551     .queued to ramQu
   c49d4:	7565 0065 7570 6c62 7369 2068 7573 6363     eue.publish succ
   c49e4:	7365 2073 6425 7200 6d65 766f 6465 6620     ess %d.removed f
   c49f4:	6c69 2065 6425 7000 6275 696c 6873 6620     ile %d.publish f
   c4a04:	6961 656c 2064 6425 7700 6972 6974 676e     ailed %d.writing
   c4a14:	7420 206f 6966 656c 2073 6661 6574 2072      to files after 
   c4a24:	7570 6c62 7369 2068 6166 6c69 7275 0065     publish failure.
   c4a34:	7061 2e70 7570 7162 0000 0000               app.pubq....

000c4a40 <_ZTV17PublishQueuePosix>:
	...
   c4a48:	a71d 000b a9d9 000b a9fd 000b               ............

000c4a54 <_ZTV15RHGenericDriver>:
	...
   c4a64:	ab1d 000b 40a5 000b 40a5 000b 40a5 000b     .....@...@...@..
   c4a74:	40a5 000b ab7f 000b ab21 000b abcf 000b     .@......!.......
   c4a84:	ab9d 000b abf3 000b ab2b 000b ab33 000b     ........+...3...
   c4a94:	ab37 000b ab3b 000b ab3f 000b ab43 000b     7...;...?...C...
   c4aa4:	ab2f 000b ab4f 000b ab53 000b ab57 000b     /...O...S...W...
   c4ab4:	ab5b 000b ab5f 000b ab65 000b ab69 000b     [..._...e...i...
   c4ac4:	ab2b 000b ab6d 000b ab73 000b ab79 000b     +...m...s...y...

000c4ad4 <_ZTV12RHGenericSPI>:
	...
   c4adc:	40a5 000b ac51 000b ac53 000b 40a5 000b     .@..Q...S....@..
   c4aec:	40a5 000b ac5b 000b ac5f 000b ac63 000b     .@..[..._...c...
   c4afc:	ac55 000b ac57 000b ac59 000b 6564 6166     U...W...Y...defa
   c4b0c:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   c4b1c:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   c4b2c:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   c4b3c:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000c4b4c <_ZTVN8particle11SPISettingsE>:
	...
   c4b54:	aca9 000b ac7d 000b ac7f 000b               ....}.......

000c4b60 <_ZTV13RHHardwareSPI>:
	...
   c4b68:	ad5d 000b ad71 000b ad7f 000b ad8d 000b     ]...q...........
   c4b78:	adf9 000b ac5b 000b ac5f 000b ac63 000b     ....[..._...c...
   c4b88:	ae07 000b ae1b 000b ae29 000b               ........)...

000c4b94 <_ZTV6RHMesh>:
	...
   c4b9c:	aef5 000b b19d 000b ae55 000b ae41 000b     ........U...A...

000c4bac <_ZTV8RHRouter>:
	...
   c4bb4:	b409 000b b44d 000b                         ....M...

000c4bbc <_ZTV11RHSPIDriver>:
	...
   c4bcc:	b6e9 000b 40a5 000b 40a5 000b 40a5 000b     .....@...@...@..
   c4bdc:	40a5 000b ab7f 000b ab21 000b abcf 000b     .@......!.......
   c4bec:	ab9d 000b abf3 000b ab2b 000b ab33 000b     ........+...3...
   c4bfc:	ab37 000b ab3b 000b ab3f 000b ab43 000b     7...;...?...C...
   c4c0c:	ab2f 000b ab4f 000b ab53 000b ab57 000b     /...O...S...W...
   c4c1c:	ab5b 000b ab5f 000b ab65 000b ab69 000b     [..._...e...i...
   c4c2c:	ab2b 000b ab6d 000b ab73 000b ab79 000b     +...m...s...y...
   c4c3c:	b715 000b b71f 000b                         ........

000c4c44 <_ZL18MODEM_CONFIG_TABLE>:
   c4c44:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000c4c54 <_ZTV7RH_RF95>:
	...
   c4c5c:	b887 000b b8bf 000b bd99 000b bc2f 000b     ............/...
   c4c6c:	b8f5 000b bc77 000b b883 000b ab7f 000b     ....w...........
   c4c7c:	ab21 000b abcf 000b ab9d 000b abf3 000b     !...............
   c4c8c:	b889 000b ab33 000b ab37 000b ab3b 000b     ....3...7...;...
   c4c9c:	ab3f 000b ab43 000b ab2f 000b ab4f 000b     ?...C.../...O...
   c4cac:	ab53 000b ab57 000b ab5b 000b ab5f 000b     S...W...[..._...
   c4cbc:	ab65 000b ab69 000b b8cf 000b ab6d 000b     e...i.......m...
   c4ccc:	ab73 000b ab79 000b b715 000b b71f 000b     s...y...........
   c4cdc:	b87f 000b 3025 6438 2f00 7200 6d65 766f     ....%08d./.remov
   c4cec:	6465 2520 0073 7325 6520 6978 7473 2073     ed %s.%s exists 
   c4cfc:	6e61 2064 7369 6120 6420 7269 6365 6f74     and is a directo
   c4d0c:	7972 6600 6c69 2065 6e69 7420 6568 7720     ry.file in the w
   c4d1c:	7961 202c 6564 656c 6974 676e 2520 0073     ay, deleting %s.
   c4d2c:	7473 7461 6620 6c69 6465 6520 7272 6f6e     stat filed errno
   c4d3c:	253d 0064 7263 6165 6574 2064 6964 2072     =%d.created dir 
   c4d4c:	7325 6d00 646b 7269 6620 6961 656c 2064     %s.mkdir failed 
   c4d5c:	7265 6e72 3d6f 6425 7500 636e 6e6f 6966     errno=%d.unconfi
   c4d6c:	7567 6572 2064 6964 5072 7461 0068 6373     gured dirPath.sc
   c4d7c:	6e61 696e 676e 2520 2073 6977 6874 7020     anning %s with p
   c4d8c:	7461 6574 6e72 2520 0073 6461 6964 676e     attern %s.adding
   c4d9c:	7420 206f 7571 7565 2065 6425 2520 0073      to queue %d %s.
   c4dac:	6567 4674 6c69 4665 6f72 516d 6575 6575     getFileFromQueue
   c4dbc:	7220 7465 7275 656e 2064 6425 6100 7070      returned %d.app
   c4dcc:	732e 7165 6966 656c 0000 0000               .seqfile....

000c4dd8 <_ZTV14SequentialFile>:
	...
   c4de0:	c1f5 000b c221 000b bea1 000b 6f67 3a74     ....!.......got:
   c4df0:	6d20 6761 6369 253d 3830 2078 6576 7372      magic=%08x vers
   c4e00:	6f69 3d6e 3025 7834 7320 7a69 3d65 3025     ion=%04x size=%0
   c4e10:	7834 6820 7361 3d68 3025 7838 6500 7078     4x hash=%08x.exp
   c4e20:	203a 616d 6967 3d63 3025 7838 7620 7265     : magic=%08x ver
   c4e30:	6973 6e6f 253d 3430 2078 6973 657a 253d     sion=%04x size=%
   c4e40:	3430 2078 6168 6873 253d 3830 0078 0000     04x hash=%08x...

000c4e50 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   c4e58:	c54f 000b c59b 000b c54d 000b c555 000b     O.......M...U...
   c4e68:	c57d 000b c711 000b c7a9 000b               }...........

000c4e74 <_ZTVN5spark13CellularClassE>:
	...
   c4e7c:	d21b 000b d211 000b d207 000b d1bd 000b     ................
   c4e8c:	d1fb 000b d1ef 000b f025 000b f02d 000b     ........%...-...
   c4e9c:	d1e3 000b d1db 000b d1d1 000b d1c7 000b     ................
   c4eac:	f05d 000b                                   ]...

000c4eb0 <_ZTV14CellularSignal>:
	...
   c4eb8:	d2a9 000b d30d 000b d2ab 000b d31d 000b     ................
   c4ec8:	d351 000b d37d 000b d3b1 000b d2d1 000b     Q...}...........
   c4ed8:	d2af 000b d2cb 000b fffc ffff 0000 0000     ................
   c4ee8:	d305 000b                                   ....

000c4eec <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c4ef4:	d3f5 000b d3fb 000b d439 000b d409 000b     ........9.......
   c4f04:	d3f7 000b                                   ....

000c4f08 <_ZTVN5spark13EthernetClassE>:
	...
   c4f10:	d9ff 000b d9f5 000b d9eb 000b d9e1 000b     ................
   c4f20:	d9d5 000b d9c9 000b f025 000b f02d 000b     ........%...-...
   c4f30:	d9bd 000b d9b5 000b d9ab 000b d9a1 000b     ................
   c4f40:	f05d 000b                                   ]...

000c4f44 <_ZTV7TwoWire>:
	...
   c4f4c:	dacf 000b db19 000b daf1 000b dad1 000b     ................
   c4f5c:	daf9 000b db01 000b db09 000b db11 000b     ................

000c4f6c <_ZTV9IPAddress>:
	...
   c4f74:	dc95 000b dc85 000b dc87 000b 2575 3430     ............u%04
   c4f84:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   c4f94:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   c4fa4:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   c4fb4:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   c4fc4:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   c4fd4:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   c4fe4:	6f63 6564 6400 7465 6961 006c               code.detail.

000c4ff0 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c4ff8:	e191 000b e1b7 000b e175 000b dda3 000b     ........u.......

000c5008 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c5010:	e575 000b e58d 000b eccd 000b 6bf7 000b     u............k..

000c5020 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c5028:	e5a1 000b e5b5 000b ee71 000b e17d 000b     ........q...}...

000c5038 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c5040:	e18f 000b e1c5 000b ec31 000b e17f 000b     ........1.......

000c5050 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c5058:	e18d 000b e1d3 000b e4dd 000b e1f5 000b     ................

000c5068 <_ZTVN5spark12NetworkClassE>:
	...
   c5070:	efe5 000b efef 000b eff9 000b f003 000b     ................
   c5080:	f00d 000b f019 000b f025 000b f02d 000b     ........%...-...
   c5090:	f035 000b f041 000b f049 000b f053 000b     5...A...I...S...
   c50a0:	f05d 000b 616e 006e 6e69 0066 766f 0066     ]...nan.inf.ovf.

000c50b0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c50b0:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   c50c0:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   c50d0:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   c50e0:	6c61 6469 002e 5925 252d 2d6d 6425 2554     alid..%Y-%m-%dT%
   c50f0:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   c5100:	0065 0000                                   e...

000c5104 <_ZTV11USARTSerial>:
	...
   c510c:	fee9 000b ff55 000b ff2d 000b f2ad 000b     ....U...-.......
   c511c:	fefd 000b ff19 000b ff0b 000b ff27 000b     ............'...
   c512c:	feeb 000b feef 000b                         ........

000c5134 <_ZTV9USBSerial>:
	...
   c513c:	ffa7 000b 000f 000c ffe5 000b f2ad 000b     ................
   c514c:	ffd7 000b ffa9 000b ffb9 000b 0009 000c     ................
   c515c:	ffc9 000b ffa1 000b                         ........

000c5164 <_ZSt7nothrow>:
   c5164:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   c5174:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000c5185 <day_name.1>:
   c5185:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   c5195:	6972 6153                                    riSat

000c519a <mon_name.0>:
   c519a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   c51aa:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   c51ba:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   c51ca:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   c51da:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   c51ea:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   c51fa:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   c520a:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   c521a:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   c522a:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   c523a:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c524a:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c525a:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c526a:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c527a:	6474 696c 2f62 6172 646e 632e 6900 696e     tdlib/rand.c.ini
   c528a:	7974 0000 0000                              ty....

000c5290 <fpi.1>:
   c5290:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c52a0:	0000 0000                                   ....

000c52a4 <fpinan.0>:
   c52a4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   c52b4:	0000 0000                                   ....

000c52b8 <tinytens>:
   c52b8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c52c8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c52d8:	6f43 64ac 0628 1168                         Co.d(.h.

000c52e0 <_ctype_>:
   c52e0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c52f0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c5300:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c5310:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c5320:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c5330:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c5340:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c5350:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c5360:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c53e0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c53f0:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c5400:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c5410:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c5420:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c5430:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c5440:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c5450:	632e 0000                                   .c..

000c5454 <_C_numeric_locale>:
   c5454:	50e4 000c 4fe0 000c d704 2003 0043 4f50     .P...O..... C.PO
   c5464:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   c5474:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c5484:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c5494:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c54a4:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c54b4:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   c54c4:	0000 0000                                   ....

000c54c8 <__mprec_bigtens>:
   c54c8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c54d8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c54e8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c54f0 <__mprec_tens>:
   c54f0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c5500:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c5510:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c5520:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c5530:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c5540:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c5550:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c5560:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c5570:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c5580:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c5590:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c55a0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c55b0:	9db4 79d9 7843 44ea                         ...yCx.D

000c55b8 <p05.0>:
   c55b8:	0005 0000 0019 0000 007d 0000               ........}...

000c55c4 <link_const_variable_data_end>:
   c55c4:	000b4991 	.word	0x000b4991
   c55c8:	000b59ed 	.word	0x000b59ed
   c55cc:	000b6bd1 	.word	0x000b6bd1
   c55d0:	000b72ad 	.word	0x000b72ad
   c55d4:	000b7781 	.word	0x000b7781
   c55d8:	000b82a5 	.word	0x000b82a5
   c55dc:	000ba9c9 	.word	0x000ba9c9
   c55e0:	000bae31 	.word	0x000bae31
   c55e4:	000bc53d 	.word	0x000bc53d
   c55e8:	000bd1ad 	.word	0x000bd1ad
   c55ec:	000bd279 	.word	0x000bd279
   c55f0:	000bda09 	.word	0x000bda09
   c55f4:	000becbd 	.word	0x000becbd
   c55f8:	000bf135 	.word	0x000bf135
   c55fc:	000bf59d 	.word	0x000bf59d
   c5600:	000bfb9d 	.word	0x000bfb9d
   c5604:	000bfed5 	.word	0x000bfed5

000c5608 <link_constructors_end>:
	...
