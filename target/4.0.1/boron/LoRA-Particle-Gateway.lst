
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/4.0.1/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000e8e0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c2900  000c2900  00012900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c2924  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c8  2003d60c  000c2928  0002d60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000101c  2003d7d8  2003d7d8  0003d7d8  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c2af0  000c2af0  00032af0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c2b1c  000c2b1c  00032b1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0029f39c  00000000  00000000  00032b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002d15c  00000000  00000000  002d1ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0006d6ae  00000000  00000000  002ff018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00005020  00000000  00000000  0036c6c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000123a0  00000000  00000000  003716e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0006046e  00000000  00000000  00383a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00097909  00000000  00000000  003e3ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172f41  00000000  00000000  0047b7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000f094  00000000  00000000  005ee740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00c fadf 	bl	c05f4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00c fb01 	bl	c0644 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d60c 	.word	0x2003d60c
   b404c:	000c2928 	.word	0x000c2928
   b4050:	2003d7d4 	.word	0x2003d7d4
   b4054:	2003d7d8 	.word	0x2003d7d8
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00b fc19 	bl	bf898 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c28b4 	.word	0x000c28b4
   b4080:	000c28f8 	.word	0x000c28f8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bab8 	b.w	b55f8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fbbb 	bl	b5804 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00b bbb9 	b.w	bf808 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f008 bb61 	b.w	bc75c <malloc>

000b409a <_Znaj>:
   b409a:	f008 bb5f 	b.w	bc75c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f008 bb65 	b.w	bc76c <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f008 f9ea 	bl	bc484 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000bc025 	.word	0x000bc025
   b40b8:	000c0c18 	.word	0x000c0c18

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b40ce:	b510      	push	{r4, lr}
}
   b40d0:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b40d2:	4604      	mov	r4, r0
}
   b40d4:	f7ff ffe3 	bl	b409e <_ZdlPvj>
   b40d8:	4620      	mov	r0, r4
   b40da:	bd10      	pop	{r4, pc}

000b40dc <_ZN16JsonParserStaticILj1024ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40dc:	b510      	push	{r4, lr}
   b40de:	4b03      	ldr	r3, [pc, #12]	; (b40ec <_ZN16JsonParserStaticILj1024ELj50EED1Ev+0x10>)
   b40e0:	6003      	str	r3, [r0, #0]
   b40e2:	4604      	mov	r4, r0
   b40e4:	f003 ff06 	bl	b7ef4 <_ZN10JsonParserD1Ev>
   b40e8:	4620      	mov	r0, r4
   b40ea:	bd10      	pop	{r4, pc}
   b40ec:	000c1278 	.word	0x000c1278

000b40f0 <_ZN16JsonParserStaticILj1024ELj50EED0Ev>:
   b40f0:	b510      	push	{r4, lr}
   b40f2:	4604      	mov	r4, r0
   b40f4:	f7ff fff2 	bl	b40dc <_ZN16JsonParserStaticILj1024ELj50EED1Ev>
   b40f8:	4620      	mov	r0, r4
   b40fa:	f240 714c 	movw	r1, #1868	; 0x74c
   b40fe:	f7ff ffce 	bl	b409e <_ZdlPvj>
   b4102:	4620      	mov	r0, r4
   b4104:	bd10      	pop	{r4, pc}

000b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4106:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4108:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b410a:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b410c:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b410e:	f004 f8bb 	bl	b8288 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b4112:	b120      	cbz	r0, b411e <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4114:	9901      	ldr	r1, [sp, #4]
   b4116:	462a      	mov	r2, r5
   b4118:	4620      	mov	r0, r4
   b411a:	f003 ffd9 	bl	b80d0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	}
   b411e:	b003      	add	sp, #12
   b4120:	bd30      	pop	{r4, r5, pc}

000b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4122:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4124:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b4126:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4128:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b412a:	f004 f8ad 	bl	b8288 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b412e:	b120      	cbz	r0, b413a <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4130:	9901      	ldr	r1, [sp, #4]
   b4132:	462a      	mov	r2, r5
   b4134:	4620      	mov	r0, r4
   b4136:	f004 f889 	bl	b824c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b413a:	b003      	add	sp, #12
   b413c:	bd30      	pop	{r4, r5, pc}

000b413e <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b413e:	b40e      	push	{r1, r2, r3}
   b4140:	b500      	push	{lr}
   b4142:	b08c      	sub	sp, #48	; 0x30
   b4144:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4146:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b414a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b414e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4150:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4154:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4156:	6801      	ldr	r1, [r0, #0]
   b4158:	aa04      	add	r2, sp, #16
   b415a:	201e      	movs	r0, #30
    attr.flags = 0;
   b415c:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4160:	f008 f9a0 	bl	bc4a4 <log_message_v>
}
   b4164:	b00c      	add	sp, #48	; 0x30
   b4166:	f85d eb04 	ldr.w	lr, [sp], #4
   b416a:	b003      	add	sp, #12
   b416c:	4770      	bx	lr
	...

000b4170 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4170:	b510      	push	{r4, lr}
    if (!_instance) {
   b4172:	4c06      	ldr	r4, [pc, #24]	; (b418c <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4174:	6823      	ldr	r3, [r4, #0]
   b4176:	b933      	cbnz	r3, b4186 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4178:	2004      	movs	r0, #4
   b417a:	f7ff ff8c 	bl	b4096 <_Znwj>
   b417e:	b108      	cbz	r0, b4184 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b4180:	4b03      	ldr	r3, [pc, #12]	; (b4190 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b4182:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4184:	6020      	str	r0, [r4, #0]
}
   b4186:	6820      	ldr	r0, [r4, #0]
   b4188:	bd10      	pop	{r4, pc}
   b418a:	bf00      	nop
   b418c:	2003d7dc 	.word	0x2003d7dc
   b4190:	000c1288 	.word	0x000c1288

000b4194 <_ZN14LoRA_Functions4loopEv>:
	return true;
}

void LoRA_Functions::loop() {
												
}
   b4194:	4770      	bx	lr
	...

000b4198 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b4198:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b419a:	4c06      	ldr	r4, [pc, #24]	; (b41b4 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b419c:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b419e:	f10d 0203 	add.w	r2, sp, #3
   b41a2:	a901      	add	r1, sp, #4
   b41a4:	4620      	mov	r0, r4
   b41a6:	f006 ff47 	bl	bb038 <_ZN7RH_RF954recvEPhS0_>
   b41aa:	2800      	cmp	r0, #0
   b41ac:	d1f7      	bne.n	b419e <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b41ae:	b040      	add	sp, #256	; 0x100
   b41b0:	bd10      	pop	{r4, pc}
   b41b2:	bf00      	nop
   b41b4:	2003d864 	.word	0x2003d864

000b41b8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             // Here is where we will power down the LoRA radio module
   b41b8:	4801      	ldr	r0, [pc, #4]	; (b41c0 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b41ba:	f006 bf2a 	b.w	bb012 <_ZN7RH_RF955sleepEv>
   b41be:	bf00      	nop
   b41c0:	2003d864 	.word	0x2003d864

000b41c4 <_ZN14LoRA_Functions15initializeRadioEv>:
}

bool  LoRA_Functions::initializeRadio() {  // Set up the Radio Module
   b41c4:	b510      	push	{r4, lr}
	if (!manager.init()) {
   b41c6:	480b      	ldr	r0, [pc, #44]	; (b41f4 <_ZN14LoRA_Functions15initializeRadioEv+0x30>)
   b41c8:	f006 fcc1 	bl	bab4e <_ZN8RHRouter4initEv>
   b41cc:	4604      	mov	r4, r0
   b41ce:	b928      	cbnz	r0, b41dc <_ZN14LoRA_Functions15initializeRadioEv+0x18>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b41d0:	4909      	ldr	r1, [pc, #36]	; (b41f8 <_ZN14LoRA_Functions15initializeRadioEv+0x34>)
   b41d2:	480a      	ldr	r0, [pc, #40]	; (b41fc <_ZN14LoRA_Functions15initializeRadioEv+0x38>)
   b41d4:	f7ff ffb3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?

return true;
}
   b41d8:	4620      	mov	r0, r4
   b41da:	bd10      	pop	{r4, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b41dc:	ed9f 0a08 	vldr	s0, [pc, #32]	; b4200 <_ZN14LoRA_Functions15initializeRadioEv+0x3c>
   b41e0:	4808      	ldr	r0, [pc, #32]	; (b4204 <_ZN14LoRA_Functions15initializeRadioEv+0x40>)
   b41e2:	f006 ffad 	bl	bb140 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b41e6:	4807      	ldr	r0, [pc, #28]	; (b4204 <_ZN14LoRA_Functions15initializeRadioEv+0x40>)
   b41e8:	2200      	movs	r2, #0
   b41ea:	2117      	movs	r1, #23
   b41ec:	f007 f922 	bl	bb434 <_ZN7RH_RF9510setTxPowerEab>
return true;
   b41f0:	e7f2      	b.n	b41d8 <_ZN14LoRA_Functions15initializeRadioEv+0x14>
   b41f2:	bf00      	nop
   b41f4:	2003e0e0 	.word	0x2003e0e0
   b41f8:	000c0c2d 	.word	0x000c0c2d
   b41fc:	2003e654 	.word	0x2003e654
   b4200:	4464c000 	.word	0x4464c000
   b4204:	2003d864 	.word	0x2003d864

000b4208 <_ZN14LoRA_Functions5setupEb>:
bool LoRA_Functions::setup(bool gatewayID) {
   b4208:	b510      	push	{r4, lr}
   b420a:	460c      	mov	r4, r1
   b420c:	b086      	sub	sp, #24
	LoRA_Functions::initializeRadio();
   b420e:	f7ff ffd9 	bl	b41c4 <_ZN14LoRA_Functions15initializeRadioEv>
	if (gatewayID == true) {
   b4212:	b374      	cbz	r4, b4272 <_ZN14LoRA_Functions5setupEb+0x6a>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b4214:	f001 fe82 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b4218:	2100      	movs	r1, #0
   b421a:	f001 fff3 	bl	b6204 <_ZN13sysStatusData14set_nodeNumberEh>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b421e:	a802      	add	r0, sp, #8
   b4220:	f008 fa04 	bl	bc62c <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b4224:	9a02      	ldr	r2, [sp, #8]
   b4226:	492e      	ldr	r1, [pc, #184]	; (b42e0 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b4228:	482e      	ldr	r0, [pc, #184]	; (b42e4 <_ZN14LoRA_Functions5setupEb+0xdc>)
   b422a:	f7ff ff88 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b422e:	a802      	add	r0, sp, #8
   b4230:	f00a fe08 	bl	bee44 <_ZN6StringD1Ev>
	jp.addString(nodeID.get_nodeIDJson());				// Read in the JSON string from memory
   b4234:	f001 ff32 	bl	b609c <_ZN10nodeIDData8instanceEv>
   b4238:	4601      	mov	r1, r0
   b423a:	a802      	add	r0, sp, #8
   b423c:	f001 ff54 	bl	b60e8 <_ZNK10nodeIDData14get_nodeIDJsonEv>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4240:	9902      	ldr	r1, [sp, #8]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b4242:	9101      	str	r1, [sp, #4]
   b4244:	4608      	mov	r0, r1
   b4246:	f00c fab8 	bl	c07ba <strlen>
   b424a:	9901      	ldr	r1, [sp, #4]
   b424c:	4602      	mov	r2, r0
   b424e:	4826      	ldr	r0, [pc, #152]	; (b42e8 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b4250:	f003 fe8b 	bl	b7f6a <_ZN10JsonBuffer7addDataEPKcj>
   b4254:	a802      	add	r0, sp, #8
   b4256:	f00a fdf5 	bl	bee44 <_ZN6StringD1Ev>
	if (jp.parse()) Log.info("Parsed Successfully");
   b425a:	4823      	ldr	r0, [pc, #140]	; (b42e8 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b425c:	f004 fba6 	bl	b89ac <_ZN10JsonParser5parseEv>
   b4260:	2800      	cmp	r0, #0
   b4262:	d03b      	beq.n	b42dc <_ZN14LoRA_Functions5setupEb+0xd4>
   b4264:	4921      	ldr	r1, [pc, #132]	; (b42ec <_ZN14LoRA_Functions5setupEb+0xe4>)
	else Log.info("Parsing error");
   b4266:	481f      	ldr	r0, [pc, #124]	; (b42e4 <_ZN14LoRA_Functions5setupEb+0xdc>)
   b4268:	f7ff ff69 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b426c:	2001      	movs	r0, #1
   b426e:	b006      	add	sp, #24
   b4270:	bd10      	pop	{r4, pc}
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b4272:	f001 fe53 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b4276:	f001 ff61 	bl	b613c <_ZNK13sysStatusData14get_nodeNumberEv>
   b427a:	b1d8      	cbz	r0, b42b4 <_ZN14LoRA_Functions5setupEb+0xac>
   b427c:	f001 fe4e 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b4280:	f001 ff5c 	bl	b613c <_ZNK13sysStatusData14get_nodeNumberEv>
   b4284:	280a      	cmp	r0, #10
   b4286:	d815      	bhi.n	b42b4 <_ZN14LoRA_Functions5setupEb+0xac>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b4288:	f001 fe48 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b428c:	f001 ff56 	bl	b613c <_ZNK13sysStatusData14get_nodeNumberEv>
   b4290:	4601      	mov	r1, r0
   b4292:	4817      	ldr	r0, [pc, #92]	; (b42f0 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b4294:	f005 ff87 	bl	ba1a6 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4298:	4815      	ldr	r0, [pc, #84]	; (b42f0 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b429a:	f005 ff6a 	bl	ba172 <_ZN10RHDatagram11thisAddressEv>
   b429e:	9001      	str	r0, [sp, #4]
   b42a0:	a802      	add	r0, sp, #8
   b42a2:	f008 f9c3 	bl	bc62c <spark_deviceID>
   b42a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b42aa:	4912      	ldr	r1, [pc, #72]	; (b42f4 <_ZN14LoRA_Functions5setupEb+0xec>)
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b42ac:	480d      	ldr	r0, [pc, #52]	; (b42e4 <_ZN14LoRA_Functions5setupEb+0xdc>)
   b42ae:	f7ff ff46 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b42b2:	e7bc      	b.n	b422e <_ZN14LoRA_Functions5setupEb+0x26>
		sysStatus.set_nodeNumber(11);
   b42b4:	f001 fe32 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b42b8:	210b      	movs	r1, #11
   b42ba:	f001 ffa3 	bl	b6204 <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b42be:	210b      	movs	r1, #11
   b42c0:	480b      	ldr	r0, [pc, #44]	; (b42f0 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b42c2:	f005 ff70 	bl	ba1a6 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b42c6:	480a      	ldr	r0, [pc, #40]	; (b42f0 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b42c8:	f005 ff53 	bl	ba172 <_ZN10RHDatagram11thisAddressEv>
   b42cc:	9001      	str	r0, [sp, #4]
   b42ce:	a802      	add	r0, sp, #8
   b42d0:	f008 f9ac 	bl	bc62c <spark_deviceID>
   b42d4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b42d8:	4907      	ldr	r1, [pc, #28]	; (b42f8 <_ZN14LoRA_Functions5setupEb+0xf0>)
   b42da:	e7e7      	b.n	b42ac <_ZN14LoRA_Functions5setupEb+0xa4>
	else Log.info("Parsing error");
   b42dc:	4907      	ldr	r1, [pc, #28]	; (b42fc <_ZN14LoRA_Functions5setupEb+0xf4>)
   b42de:	e7c2      	b.n	b4266 <_ZN14LoRA_Functions5setupEb+0x5e>
   b42e0:	000c0c39 	.word	0x000c0c39
   b42e4:	2003e654 	.word	0x2003e654
   b42e8:	2003d994 	.word	0x2003d994
   b42ec:	000c0cf1 	.word	0x000c0cf1
   b42f0:	2003e0e4 	.word	0x2003e0e4
   b42f4:	000c0c73 	.word	0x000c0c73
   b42f8:	000c0caa 	.word	0x000c0caa
   b42fc:	000c0d05 	.word	0x000c0d05

000b4300 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>:
	return false; 
}

// These are the receive and respond messages for data reports

bool LoRA_Functions::decipherDataReportGateway() {			// Receives the data report and loads results into current object for reporting
   b4300:	b537      	push	{r0, r1, r2, r4, r5, lr}

	current.set_hourlyCount(buf[3] << 8 | buf[4]);
   b4302:	4c2a      	ldr	r4, [pc, #168]	; (b43ac <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xac>)
   b4304:	f001 fe4c 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4308:	f8b4 1003 	ldrh.w	r1, [r4, #3]
   b430c:	ba49      	rev16	r1, r1
   b430e:	b289      	uxth	r1, r1
   b4310:	f002 f84f 	bl	b63b2 <_ZN17currentStatusData15set_hourlyCountEt>
	current.set_dailyCount(buf[5] << 8 | buf[6]);
   b4314:	f001 fe44 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4318:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   b431c:	ba49      	rev16	r1, r1
   b431e:	b289      	uxth	r1, r1
   b4320:	f002 f84d 	bl	b63be <_ZN17currentStatusData14set_dailyCountEt>
	current.set_sensorType(buf[7]);
   b4324:	f001 fe3c 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4328:	79e1      	ldrb	r1, [r4, #7]
   b432a:	f001 ffc5 	bl	b62b8 <_ZN17currentStatusData14set_sensorTypeEh>
	current.set_internalTempC(buf[8]);
   b432e:	f001 fe37 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4332:	7a21      	ldrb	r1, [r4, #8]
   b4334:	f001 ffa2 	bl	b627c <_ZN17currentStatusData17set_internalTempCEh>
	current.set_stateOfCharge(buf[9]);
   b4338:	f001 fe32 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b433c:	4605      	mov	r5, r0
   b433e:	7a60      	ldrb	r0, [r4, #9]
   b4340:	f00b fd94 	bl	bfe6c <__aeabi_ui2d>
   b4344:	ec41 0b10 	vmov	d0, r0, r1
   b4348:	4628      	mov	r0, r5
   b434a:	f001 fe65 	bl	b6018 <_ZN17currentStatusData17set_stateOfChargeEd>
	current.set_batteryState(buf[10]);
   b434e:	f001 fe27 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4352:	7aa1      	ldrb	r1, [r4, #10]
   b4354:	f001 ff98 	bl	b6288 <_ZN17currentStatusData16set_batteryStateEh>
	current.set_resetCount(buf[11]);
   b4358:	f001 fe22 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b435c:	7ae1      	ldrb	r1, [r4, #11]
   b435e:	f001 ff99 	bl	b6294 <_ZN17currentStatusData14set_resetCountEh>
	current.set_messageNumber(buf[12]);
   b4362:	f001 fe1d 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4366:	7b21      	ldrb	r1, [r4, #12]
   b4368:	f001 ff9a 	bl	b62a0 <_ZN17currentStatusData17set_messageNumberEh>
	current.set_RSSI(driver.lastRssi());
   b436c:	f001 fe18 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4370:	4604      	mov	r4, r0
   b4372:	480f      	ldr	r0, [pc, #60]	; (b43b0 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xb0>)
   b4374:	f005 ff95 	bl	ba2a2 <_ZN15RHGenericDriver8lastRssiEv>
   b4378:	b281      	uxth	r1, r0
   b437a:	4620      	mov	r0, r4
   b437c:	f002 f813 	bl	b63a6 <_ZN17currentStatusData8set_RSSIEt>

	Log.info("Deciphered data report %d from node %d", current.get_messageNumber(), current.get_nodeNumber());
   b4380:	f001 fe0e 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4384:	f001 ff11 	bl	b61aa <_ZNK17currentStatusData17get_messageNumberEv>
   b4388:	9001      	str	r0, [sp, #4]
   b438a:	f001 fe09 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b438e:	f001 fef3 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4392:	9a01      	ldr	r2, [sp, #4]
   b4394:	4907      	ldr	r1, [pc, #28]	; (b43b4 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xb4>)
   b4396:	4603      	mov	r3, r0
   b4398:	4807      	ldr	r0, [pc, #28]	; (b43b8 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xb8>)
   b439a:	f7ff fed0 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>

	lora_state = DATA_ACK;		// Prepare to respond
   b439e:	4b07      	ldr	r3, [pc, #28]	; (b43bc <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xbc>)
   b43a0:	2204      	movs	r2, #4

	return true;
}
   b43a2:	2001      	movs	r0, #1
	lora_state = DATA_ACK;		// Prepare to respond
   b43a4:	701a      	strb	r2, [r3, #0]
}
   b43a6:	b003      	add	sp, #12
   b43a8:	bd30      	pop	{r4, r5, pc}
   b43aa:	bf00      	nop
   b43ac:	2003d7e8 	.word	0x2003d7e8
   b43b0:	2003d864 	.word	0x2003d864
   b43b4:	000c0d13 	.word	0x000c0d13
   b43b8:	2003e654 	.word	0x2003e654
   b43bc:	2003d7d8 	.word	0x2003d7d8

000b43c0 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>:
		return false;
	}
}

// These are the receive and respond messages for Alert Reports
bool LoRA_Functions::decipherAlertReportGateway() {
   b43c0:	b510      	push	{r4, lr}
	current.set_alertCodeNode(buf[2]);
   b43c2:	f001 fded 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b43c6:	4b13      	ldr	r3, [pc, #76]	; (b4414 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x54>)
   b43c8:	7899      	ldrb	r1, [r3, #2]
   b43ca:	f001 ff6f 	bl	b62ac <_ZN17currentStatusData17set_alertCodeNodeEh>
	current.set_alertTimestampNode(Time.now());
   b43ce:	f001 fde7 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b43d2:	4604      	mov	r4, r0
   b43d4:	f00b f8e9 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b43d8:	17c3      	asrs	r3, r0, #31
   b43da:	4602      	mov	r2, r0
   b43dc:	4620      	mov	r0, r4
   b43de:	f002 f873 	bl	b64c8 <_ZN17currentStatusData22set_alertTimestampNodeEx>
	current.set_RSSI(driver.lastRssi() );
   b43e2:	f001 fddd 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b43e6:	4604      	mov	r4, r0
   b43e8:	480b      	ldr	r0, [pc, #44]	; (b4418 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x58>)
   b43ea:	f005 ff5a 	bl	ba2a2 <_ZN15RHGenericDriver8lastRssiEv>
   b43ee:	b281      	uxth	r1, r0
   b43f0:	4620      	mov	r0, r4
   b43f2:	f001 ffd8 	bl	b63a6 <_ZN17currentStatusData8set_RSSIEt>
	Log.info("Deciphered alert report from node %d", current.get_nodeNumber());
   b43f6:	f001 fdd3 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b43fa:	f001 febd 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b43fe:	4907      	ldr	r1, [pc, #28]	; (b441c <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x5c>)
   b4400:	4602      	mov	r2, r0
   b4402:	4807      	ldr	r0, [pc, #28]	; (b4420 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x60>)
   b4404:	f7ff fe9b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>

	lora_state = ALERT_ACK;		// Prepare to respond
   b4408:	4b06      	ldr	r3, [pc, #24]	; (b4424 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x64>)
   b440a:	2206      	movs	r2, #6
   b440c:	701a      	strb	r2, [r3, #0]

	return true;
}
   b440e:	2001      	movs	r0, #1
   b4410:	bd10      	pop	{r4, pc}
   b4412:	bf00      	nop
   b4414:	2003d7e8 	.word	0x2003d7e8
   b4418:	2003d864 	.word	0x2003d864
   b441c:	000c0d3a 	.word	0x000c0d3a
   b4420:	2003e654 	.word	0x2003e654
   b4424:	2003d7d8 	.word	0x2003d7d8

000b4428 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>:

bool LoRA_Functions::acknowledgeAlertReportGateway() {
   b4428:	b570      	push	{r4, r5, r6, lr}
   b442a:	b088      	sub	sp, #32
	// uint16_t nextSecondsShort = (uint16_t)nextSeconds;

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client

	buf[0] = highByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b442c:	f001 fd76 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b4430:	f001 ff5a 	bl	b62e8 <_ZNK13sysStatusData15get_magicNumberEv>
   b4434:	4c32      	ldr	r4, [pc, #200]	; (b4500 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xd8>)
   b4436:	0a00      	lsrs	r0, r0, #8
   b4438:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b443a:	f001 fd6f 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b443e:	f001 ff53 	bl	b62e8 <_ZNK13sysStatusData15get_magicNumberEv>
   b4442:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  				// Fourth byte - current time
   b4444:	f00b f8b1 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b4448:	1600      	asrs	r0, r0, #24
   b444a:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));					// Third byte
   b444c:	f00b f8ad 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b4450:	1400      	asrs	r0, r0, #16
   b4452:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));					// Second byte
   b4454:	f00b f8a9 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b4458:	1200      	asrs	r0, r0, #8
   b445a:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    				// First byte	
   b445c:	f00b f8a5 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b4460:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());		// Frequency of reports - for Gateways
   b4462:	f001 fd5b 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b4466:	f001 ff44 	bl	b62f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b446a:	0a00      	lsrs	r0, r0, #8
   b446c:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());			
   b446e:	f001 fd55 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b4472:	f001 ff3e 	bl	b62f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
	buf[8] = 0;													// Send a zero for the alertcode to reset it
	
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4476:	4b23      	ldr	r3, [pc, #140]	; (b4504 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xdc>)
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());			
   b4478:	71e0      	strb	r0, [r4, #7]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b447a:	881e      	ldrh	r6, [r3, #0]
	buf[8] = 0;													// Send a zero for the alertcode to reset it
   b447c:	2500      	movs	r5, #0
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b447e:	2101      	movs	r1, #1
	buf[8] = 0;													// Send a zero for the alertcode to reset it
   b4480:	7225      	strb	r5, [r4, #8]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4482:	4630      	mov	r0, r6
   b4484:	f00b faa1 	bl	bf9ca <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), ALERT_ACK) == RH_ROUTER_ERROR_NONE) {
   b4488:	f001 fd8a 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b448c:	f001 fe74 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4490:	2206      	movs	r2, #6
   b4492:	4603      	mov	r3, r0
   b4494:	9200      	str	r2, [sp, #0]
   b4496:	4621      	mov	r1, r4
   b4498:	481b      	ldr	r0, [pc, #108]	; (b4508 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe0>)
   b449a:	2209      	movs	r2, #9
   b449c:	f006 f91c 	bl	ba6d8 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b44a0:	4604      	mov	r4, r0
   b44a2:	bb10      	cbnz	r0, b44ea <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xc2>
		Log.info("Sent acknowledgment to Node %d, time = %s and frequency %d minutes", current.get_nodeNumber(), Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b44a4:	f001 fd7c 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b44a8:	f001 fe66 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b44ac:	4605      	mov	r5, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b44ae:	f00b f87c 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b44b2:	4602      	mov	r2, r0
   b44b4:	17c3      	asrs	r3, r0, #31
   b44b6:	a804      	add	r0, sp, #16
   b44b8:	f00a ff72 	bl	bf3a0 <_ZN9TimeClass7timeStrEx>
   b44bc:	9b04      	ldr	r3, [sp, #16]
   b44be:	9303      	str	r3, [sp, #12]
   b44c0:	f001 fd2c 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b44c4:	f001 ff15 	bl	b62f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b44c8:	9b03      	ldr	r3, [sp, #12]
   b44ca:	4910      	ldr	r1, [pc, #64]	; (b450c <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe4>)
   b44cc:	9000      	str	r0, [sp, #0]
   b44ce:	462a      	mov	r2, r5
   b44d0:	480f      	ldr	r0, [pc, #60]	; (b4510 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe8>)
   b44d2:	f7ff fe34 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b44d6:	a804      	add	r0, sp, #16
   b44d8:	f00a fcb4 	bl	bee44 <_ZN6StringD1Ev>
		digitalWrite(BLUE_LED,LOW);
   b44dc:	4630      	mov	r0, r6
   b44de:	4621      	mov	r1, r4
   b44e0:	f00b fa73 	bl	bf9ca <digitalWrite>
		return true;
   b44e4:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b44e6:	b008      	add	sp, #32
   b44e8:	bd70      	pop	{r4, r5, r6, pc}
	Log.info("Response not acknowledged");
   b44ea:	490a      	ldr	r1, [pc, #40]	; (b4514 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xec>)
   b44ec:	4808      	ldr	r0, [pc, #32]	; (b4510 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe8>)
   b44ee:	f7ff fe26 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b44f2:	4630      	mov	r0, r6
   b44f4:	4629      	mov	r1, r5
   b44f6:	f00b fa68 	bl	bf9ca <digitalWrite>
	return false;
   b44fa:	4628      	mov	r0, r5
   b44fc:	e7f3      	b.n	b44e6 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xbe>
   b44fe:	bf00      	nop
   b4500:	2003d7e8 	.word	0x2003d7e8
   b4504:	000c18bc 	.word	0x000c18bc
   b4508:	2003e0e0 	.word	0x2003e0e0
   b450c:	000c0d5f 	.word	0x000c0d5f
   b4510:	2003e654 	.word	0x2003e654
   b4514:	000c0da2 	.word	0x000c0da2

000b4518 <_ZN14LoRA_Functions12findDeviceIDEh>:
	Log.info("Returning index %d",index);

	return index;
}

String LoRA_Functions::findDeviceID(uint8_t nodeNumber)  {
   b4518:	b530      	push	{r4, r5, lr}
   b451a:	b087      	sub	sp, #28
	String nodeDeviceID;
   b451c:	4917      	ldr	r1, [pc, #92]	; (b457c <_ZN14LoRA_Functions12findDeviceIDEh+0x64>)
String LoRA_Functions::findDeviceID(uint8_t nodeNumber)  {
   b451e:	4604      	mov	r4, r0
	String nodeDeviceID;
   b4520:	a802      	add	r0, sp, #8
String LoRA_Functions::findDeviceID(uint8_t nodeNumber)  {
   b4522:	4615      	mov	r5, r2
	String nodeDeviceID;
   b4524:	f00a fcd9 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4528:	4815      	ldr	r0, [pc, #84]	; (b4580 <_ZN14LoRA_Functions12findDeviceIDEh+0x68>)
   b452a:	f003 fd56 	bl	b7fda <_ZNK10JsonParser14getOuterObjectEv>
   b452e:	4a15      	ldr	r2, [pc, #84]	; (b4584 <_ZN14LoRA_Functions12findDeviceIDEh+0x6c>)
   b4530:	4601      	mov	r1, r0
   b4532:	ab01      	add	r3, sp, #4
   b4534:	4812      	ldr	r0, [pc, #72]	; (b4580 <_ZN14LoRA_Functions12findDeviceIDEh+0x68>)
   b4536:	f003 fea7 	bl	b8288 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b453a:	9901      	ldr	r1, [sp, #4]
   b453c:	4810      	ldr	r0, [pc, #64]	; (b4580 <_ZN14LoRA_Functions12findDeviceIDEh+0x68>)
   b453e:	1e6a      	subs	r2, r5, #1
   b4540:	f003 fd6d 	bl	b801e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return "null";							// Ran out of entries - no match found
   b4544:	4601      	mov	r1, r0
   b4546:	b948      	cbnz	r0, b455c <_ZN14LoRA_Functions12findDeviceIDEh+0x44>
   b4548:	490f      	ldr	r1, [pc, #60]	; (b4588 <_ZN14LoRA_Functions12findDeviceIDEh+0x70>)
   b454a:	4620      	mov	r0, r4
   b454c:	f00a fcc5 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
	String nodeDeviceID;
   b4550:	a802      	add	r0, sp, #8
   b4552:	f00a fc77 	bl	bee44 <_ZN6StringD1Ev>
	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);	// Get the deviceID and compare
	if (nodeDeviceID == NULL) return "null";
		
	return nodeDeviceID;
}
   b4556:	4620      	mov	r0, r4
   b4558:	b007      	add	sp, #28
   b455a:	bd30      	pop	{r4, r5, pc}
	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);	// Get the deviceID and compare
   b455c:	4808      	ldr	r0, [pc, #32]	; (b4580 <_ZN14LoRA_Functions12findDeviceIDEh+0x68>)
   b455e:	4a0b      	ldr	r2, [pc, #44]	; (b458c <_ZN14LoRA_Functions12findDeviceIDEh+0x74>)
   b4560:	ab02      	add	r3, sp, #8
   b4562:	f7ff fdde 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4566:	2100      	movs	r1, #0
   b4568:	a802      	add	r0, sp, #8
   b456a:	f00a fd7c 	bl	bf066 <_ZNK6String6equalsEPKc>
	if (nodeDeviceID == NULL) return "null";
   b456e:	2800      	cmp	r0, #0
   b4570:	d1ea      	bne.n	b4548 <_ZN14LoRA_Functions12findDeviceIDEh+0x30>
	return nodeDeviceID;
   b4572:	a902      	add	r1, sp, #8
   b4574:	4620      	mov	r0, r4
   b4576:	f00a fce1 	bl	bef3c <_ZN6StringC1EOS_>
   b457a:	e7e9      	b.n	b4550 <_ZN14LoRA_Functions12findDeviceIDEh+0x38>
   b457c:	000c2508 	.word	0x000c2508
   b4580:	2003d994 	.word	0x2003d994
   b4584:	000c0dbc 	.word	0x000c0dbc
   b4588:	000c0dc2 	.word	0x000c0dc2
   b458c:	000c0dc7 	.word	0x000c0dc7

000b4590 <_ZN14LoRA_Functions7getTypeEi>:
		return true;
	} 
	else return false;
}

byte LoRA_Functions::getType(int nodeNumber) {
   b4590:	b513      	push	{r0, r1, r4, lr}

	int type;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4592:	4810      	ldr	r0, [pc, #64]	; (b45d4 <_ZN14LoRA_Functions7getTypeEi+0x44>)
byte LoRA_Functions::getType(int nodeNumber) {
   b4594:	460c      	mov	r4, r1
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4596:	f003 fd20 	bl	b7fda <_ZNK10JsonParser14getOuterObjectEv>
   b459a:	4a0f      	ldr	r2, [pc, #60]	; (b45d8 <_ZN14LoRA_Functions7getTypeEi+0x48>)
   b459c:	4601      	mov	r1, r0
   b459e:	ab01      	add	r3, sp, #4
   b45a0:	480c      	ldr	r0, [pc, #48]	; (b45d4 <_ZN14LoRA_Functions7getTypeEi+0x44>)
   b45a2:	f003 fe71 	bl	b8288 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b45a6:	9901      	ldr	r1, [sp, #4]
   b45a8:	480a      	ldr	r0, [pc, #40]	; (b45d4 <_ZN14LoRA_Functions7getTypeEi+0x44>)
   b45aa:	1e62      	subs	r2, r4, #1
   b45ac:	f003 fd37 	bl	b801e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   b45b0:	4601      	mov	r1, r0
   b45b2:	b930      	cbnz	r0, b45c2 <_ZN14LoRA_Functions7getTypeEi+0x32>
		Log.info("Node number not found");
   b45b4:	4809      	ldr	r0, [pc, #36]	; (b45dc <_ZN14LoRA_Functions7getTypeEi+0x4c>)
   b45b6:	490a      	ldr	r1, [pc, #40]	; (b45e0 <_ZN14LoRA_Functions7getTypeEi+0x50>)
   b45b8:	f7ff fdc1 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		return 255;								// Ran out of entries 
   b45bc:	20ff      	movs	r0, #255	; 0xff

	jp.getValueByKey(nodeObjectContainer, "type", type);

	return type;

}
   b45be:	b002      	add	sp, #8
   b45c0:	bd10      	pop	{r4, pc}
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b45c2:	4804      	ldr	r0, [pc, #16]	; (b45d4 <_ZN14LoRA_Functions7getTypeEi+0x44>)
   b45c4:	4a07      	ldr	r2, [pc, #28]	; (b45e4 <_ZN14LoRA_Functions7getTypeEi+0x54>)
   b45c6:	466b      	mov	r3, sp
   b45c8:	f7ff fd9d 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	return type;
   b45cc:	f89d 0000 	ldrb.w	r0, [sp]
   b45d0:	e7f5      	b.n	b45be <_ZN14LoRA_Functions7getTypeEi+0x2e>
   b45d2:	bf00      	nop
   b45d4:	2003d994 	.word	0x2003d994
   b45d8:	000c0dbc 	.word	0x000c0dbc
   b45dc:	2003e654 	.word	0x2003e654
   b45e0:	000c0dcb 	.word	0x000c0dcb
   b45e4:	000c1183 	.word	0x000c1183

000b45e8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>:
bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b45e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b45ea:	b087      	sub	sp, #28
   b45ec:	4605      	mov	r5, r0
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b45ee:	f001 fc95 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b45f2:	f001 fe79 	bl	b62e8 <_ZNK13sysStatusData15get_magicNumberEv>
   b45f6:	4c40      	ldr	r4, [pc, #256]	; (b46f8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x110>)
   b45f8:	0a00      	lsrs	r0, r0, #8
   b45fa:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b45fc:	f001 fc8e 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b4600:	f001 fe72 	bl	b62e8 <_ZNK13sysStatusData15get_magicNumberEv>
   b4604:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  					// Fourth byte - current time
   b4606:	f00a ffd0 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b460a:	1600      	asrs	r0, r0, #24
   b460c:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));						// Third byte
   b460e:	f00a ffcc 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b4612:	1400      	asrs	r0, r0, #16
   b4614:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));						// Second byte
   b4616:	f00a ffc8 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b461a:	1200      	asrs	r0, r0, #8
   b461c:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    					// First byte		
   b461e:	f00a ffc4 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b4622:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());			// Frequency of reports - for Gateways
   b4624:	f001 fc7a 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b4628:	f001 fe63 	bl	b62f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b462c:	0a00      	lsrs	r0, r0, #8
   b462e:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b4630:	f001 fc74 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b4634:	f001 fe5d 	bl	b62f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4638:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_nodeNumber();
   b463a:	f001 fcb1 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b463e:	f001 fd9b 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4642:	7220      	strb	r0, [r4, #8]
	buf[9] = getType(current.get_nodeNumber());
   b4644:	f001 fcac 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4648:	f001 fd96 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b464c:	4601      	mov	r1, r0
   b464e:	4628      	mov	r0, r5
   b4650:	f7ff ff9e 	bl	b4590 <_ZN14LoRA_Functions7getTypeEi>
   b4654:	7260      	strb	r0, [r4, #9]
   b4656:	4605      	mov	r5, r0
	Log.info("Sent response to sensorType %d node %d, time = %s and frequency %d minutes",  buf[9], current.get_tempNodeNumber(), Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b4658:	f001 fca2 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b465c:	f001 fd91 	bl	b6182 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4660:	4606      	mov	r6, r0
   b4662:	f00a ffa2 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b4666:	4602      	mov	r2, r0
   b4668:	17c3      	asrs	r3, r0, #31
   b466a:	a802      	add	r0, sp, #8
   b466c:	f00a fe98 	bl	bf3a0 <_ZN9TimeClass7timeStrEx>
	const char * c_str() const { return buffer; }
   b4670:	9f02      	ldr	r7, [sp, #8]
   b4672:	f001 fc53 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b4676:	f001 fe3c 	bl	b62f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b467a:	462a      	mov	r2, r5
   b467c:	491f      	ldr	r1, [pc, #124]	; (b46fc <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x114>)
   b467e:	4633      	mov	r3, r6
   b4680:	e9cd 7000 	strd	r7, r0, [sp]
   b4684:	481e      	ldr	r0, [pc, #120]	; (b4700 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x118>)
   b4686:	f7ff fd5a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b468a:	a802      	add	r0, sp, #8
   b468c:	f00a fbda 	bl	bee44 <_ZN6StringD1Ev>
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4690:	4b1c      	ldr	r3, [pc, #112]	; (b4704 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x11c>)
   b4692:	881d      	ldrh	r5, [r3, #0]
   b4694:	2101      	movs	r1, #1
   b4696:	4628      	mov	r0, r5
   b4698:	f00b f997 	bl	bf9ca <digitalWrite>
	if (manager.sendtoWait(buf, 10, current.get_tempNodeNumber(), JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b469c:	f001 fc80 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b46a0:	f001 fd6f 	bl	b6182 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b46a4:	2202      	movs	r2, #2
   b46a6:	4603      	mov	r3, r0
   b46a8:	9200      	str	r2, [sp, #0]
   b46aa:	4621      	mov	r1, r4
   b46ac:	4816      	ldr	r0, [pc, #88]	; (b4708 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x120>)
   b46ae:	220a      	movs	r2, #10
   b46b0:	f006 f812 	bl	ba6d8 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b46b4:	4604      	mov	r4, r0
   b46b6:	b9a8      	cbnz	r0, b46e4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xfc>
		Log.info("Response received successfully");
   b46b8:	4914      	ldr	r1, [pc, #80]	; (b470c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x124>)
   b46ba:	4811      	ldr	r0, [pc, #68]	; (b4700 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x118>)
   b46bc:	f7ff fd3f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		current.set_tempNodeNumber(current.get_nodeNumber());		// Temp no longer needed
   b46c0:	f001 fc6e 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b46c4:	4606      	mov	r6, r0
   b46c6:	f001 fc6b 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b46ca:	f001 fd55 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b46ce:	4601      	mov	r1, r0
   b46d0:	4630      	mov	r0, r6
   b46d2:	f001 fdcd 	bl	b6270 <_ZN17currentStatusData18set_tempNodeNumberEh>
		digitalWrite(BLUE_LED,LOW);
   b46d6:	4628      	mov	r0, r5
   b46d8:	4621      	mov	r1, r4
   b46da:	f00b f976 	bl	bf9ca <digitalWrite>
		return true;
   b46de:	2001      	movs	r0, #1
}
   b46e0:	b007      	add	sp, #28
   b46e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("Response not acknowledged");							// Acknowledgement not received - this needs more attention as node is in undefined state
   b46e4:	490a      	ldr	r1, [pc, #40]	; (b4710 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x128>)
   b46e6:	4806      	ldr	r0, [pc, #24]	; (b4700 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x118>)
   b46e8:	f7ff fd29 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b46ec:	4628      	mov	r0, r5
   b46ee:	2100      	movs	r1, #0
   b46f0:	f00b f96b 	bl	bf9ca <digitalWrite>
		return false;
   b46f4:	2000      	movs	r0, #0
   b46f6:	e7f3      	b.n	b46e0 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf8>
   b46f8:	2003d7e8 	.word	0x2003d7e8
   b46fc:	000c0de1 	.word	0x000c0de1
   b4700:	2003e654 	.word	0x2003e654
   b4704:	000c18bc 	.word	0x000c18bc
   b4708:	2003e0e0 	.word	0x2003e0e0
   b470c:	000c0e2c 	.word	0x000c0e2c
   b4710:	000c0da2 	.word	0x000c0da2

000b4714 <_ZN14LoRA_Functions13printNodeDataEv>:

	return true;

}

void LoRA_Functions::printNodeData() {
   b4714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4718:	b0b3      	sub	sp, #204	; 0xcc

	int nodeNumber;
	String nodeDeviceID;
   b471a:	493e      	ldr	r1, [pc, #248]	; (b4814 <_ZN14LoRA_Functions13printNodeDataEv+0x100>)
	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b471c:	4e3e      	ldr	r6, [pc, #248]	; (b4818 <_ZN14LoRA_Functions13printNodeDataEv+0x104>)
		if(nodeObjectContainer == NULL) {
			Log.info("Last entry at i = %d", i);
			break;								// Ran out of entries 
		} 
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b471e:	4f3f      	ldr	r7, [pc, #252]	; (b481c <_ZN14LoRA_Functions13printNodeDataEv+0x108>)
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b4720:	f8df 8120 	ldr.w	r8, [pc, #288]	; b4844 <_ZN14LoRA_Functions13printNodeDataEv+0x130>
	String nodeDeviceID;
   b4724:	a80a      	add	r0, sp, #40	; 0x28
   b4726:	f00a fbd8 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
	Log.info("Print Node result:");
   b472a:	493d      	ldr	r1, [pc, #244]	; (b4820 <_ZN14LoRA_Functions13printNodeDataEv+0x10c>)
   b472c:	483d      	ldr	r0, [pc, #244]	; (b4824 <_ZN14LoRA_Functions13printNodeDataEv+0x110>)
   b472e:	f7ff fd06 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4732:	4839      	ldr	r0, [pc, #228]	; (b4818 <_ZN14LoRA_Functions13printNodeDataEv+0x104>)
   b4734:	f003 fc51 	bl	b7fda <_ZNK10JsonParser14getOuterObjectEv>
   b4738:	4a3b      	ldr	r2, [pc, #236]	; (b4828 <_ZN14LoRA_Functions13printNodeDataEv+0x114>)
   b473a:	4601      	mov	r1, r0
   b473c:	ab09      	add	r3, sp, #36	; 0x24
   b473e:	4836      	ldr	r0, [pc, #216]	; (b4818 <_ZN14LoRA_Functions13printNodeDataEv+0x104>)
   b4740:	f003 fda2 	bl	b8288 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4744:	2500      	movs	r5, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4746:	9909      	ldr	r1, [sp, #36]	; 0x24
   b4748:	462a      	mov	r2, r5
   b474a:	4630      	mov	r0, r6
   b474c:	f003 fc67 	bl	b801e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   b4750:	4601      	mov	r1, r0
   b4752:	b950      	cbnz	r0, b476a <_ZN14LoRA_Functions13printNodeDataEv+0x56>
			Log.info("Last entry at i = %d", i);
   b4754:	4935      	ldr	r1, [pc, #212]	; (b482c <_ZN14LoRA_Functions13printNodeDataEv+0x118>)
   b4756:	4833      	ldr	r0, [pc, #204]	; (b4824 <_ZN14LoRA_Functions13printNodeDataEv+0x110>)
   b4758:	462a      	mov	r2, r5
   b475a:	f7ff fcf0 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	String nodeDeviceID;
   b475e:	a80a      	add	r0, sp, #40	; 0x28
   b4760:	f00a fb70 	bl	bee44 <_ZN6StringD1Ev>
		snprintf(data, sizeof(data), "Node %d, deviceID: %s, lastConnected: %s, type %d", nodeNumber, nodeDeviceID.c_str(),Time.timeStr(lastConnect).c_str(), sensorType);
		Log.info(data);
		if (Particle.connected()) Particle.publish("nodeData", data, PRIVATE);
	}

}
   b4764:	b033      	add	sp, #204	; 0xcc
   b4766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b476a:	ab0a      	add	r3, sp, #40	; 0x28
   b476c:	463a      	mov	r2, r7
   b476e:	9005      	str	r0, [sp, #20]
   b4770:	4630      	mov	r0, r6
   b4772:	f7ff fcd6 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b4776:	9905      	ldr	r1, [sp, #20]
   b4778:	ab06      	add	r3, sp, #24
   b477a:	4642      	mov	r2, r8
   b477c:	4630      	mov	r0, r6
   b477e:	f7ff fcc2 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b4782:	4a2b      	ldr	r2, [pc, #172]	; (b4830 <_ZN14LoRA_Functions13printNodeDataEv+0x11c>)
   b4784:	9905      	ldr	r1, [sp, #20]
   b4786:	ab07      	add	r3, sp, #28
   b4788:	4630      	mov	r0, r6
   b478a:	f7ff fcbc 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);
   b478e:	9905      	ldr	r1, [sp, #20]
   b4790:	4a28      	ldr	r2, [pc, #160]	; (b4834 <_ZN14LoRA_Functions13printNodeDataEv+0x120>)
   b4792:	ab08      	add	r3, sp, #32
   b4794:	4630      	mov	r0, r6
   b4796:	f7ff fcb6 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		snprintf(data, sizeof(data), "Node %d, deviceID: %s, lastConnected: %s, type %d", nodeNumber, nodeDeviceID.c_str(),Time.timeStr(lastConnect).c_str(), sensorType);
   b479a:	9a07      	ldr	r2, [sp, #28]
   b479c:	9c06      	ldr	r4, [sp, #24]
   b479e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   b47a2:	17d3      	asrs	r3, r2, #31
   b47a4:	a80e      	add	r0, sp, #56	; 0x38
   b47a6:	f00a fdfb 	bl	bf3a0 <_ZN9TimeClass7timeStrEx>
   b47aa:	9b08      	ldr	r3, [sp, #32]
   b47ac:	9302      	str	r3, [sp, #8]
   b47ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b47b0:	4a21      	ldr	r2, [pc, #132]	; (b4838 <_ZN14LoRA_Functions13printNodeDataEv+0x124>)
   b47b2:	2180      	movs	r1, #128	; 0x80
   b47b4:	e9cd 9300 	strd	r9, r3, [sp]
   b47b8:	a812      	add	r0, sp, #72	; 0x48
   b47ba:	4623      	mov	r3, r4
   b47bc:	f007 fff6 	bl	bc7ac <snprintf>
   b47c0:	a80e      	add	r0, sp, #56	; 0x38
   b47c2:	f00a fb3f 	bl	bee44 <_ZN6StringD1Ev>
		Log.info(data);
   b47c6:	4817      	ldr	r0, [pc, #92]	; (b4824 <_ZN14LoRA_Functions13printNodeDataEv+0x110>)
   b47c8:	a912      	add	r1, sp, #72	; 0x48
   b47ca:	f7ff fcb8 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b47ce:	f007 ff25 	bl	bc61c <spark_cloud_flag_connected>
		if (Particle.connected()) Particle.publish("nodeData", data, PRIVATE);
   b47d2:	b1d8      	cbz	r0, b480c <_ZN14LoRA_Functions13printNodeDataEv+0xf8>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b47d4:	4b19      	ldr	r3, [pc, #100]	; (b483c <_ZN14LoRA_Functions13printNodeDataEv+0x128>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b47d6:	491a      	ldr	r1, [pc, #104]	; (b4840 <_ZN14LoRA_Functions13printNodeDataEv+0x12c>)
   b47d8:	781b      	ldrb	r3, [r3, #0]
   b47da:	f88d 3000 	strb.w	r3, [sp]
   b47de:	aa12      	add	r2, sp, #72	; 0x48
   b47e0:	233c      	movs	r3, #60	; 0x3c
   b47e2:	a80e      	add	r0, sp, #56	; 0x38
   b47e4:	f008 fb06 	bl	bcdf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b47e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   b47ea:	b17c      	cbz	r4, b480c <_ZN14LoRA_Functions13printNodeDataEv+0xf8>
      if (--_M_use_count == 0)
   b47ec:	6863      	ldr	r3, [r4, #4]
   b47ee:	3b01      	subs	r3, #1
   b47f0:	6063      	str	r3, [r4, #4]
   b47f2:	b95b      	cbnz	r3, b480c <_ZN14LoRA_Functions13printNodeDataEv+0xf8>
          _M_dispose();
   b47f4:	6823      	ldr	r3, [r4, #0]
   b47f6:	4620      	mov	r0, r4
   b47f8:	689b      	ldr	r3, [r3, #8]
   b47fa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b47fc:	68a3      	ldr	r3, [r4, #8]
   b47fe:	3b01      	subs	r3, #1
   b4800:	60a3      	str	r3, [r4, #8]
   b4802:	b91b      	cbnz	r3, b480c <_ZN14LoRA_Functions13printNodeDataEv+0xf8>
            _M_destroy();
   b4804:	6823      	ldr	r3, [r4, #0]
   b4806:	4620      	mov	r0, r4
   b4808:	68db      	ldr	r3, [r3, #12]
   b480a:	4798      	blx	r3
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b480c:	3501      	adds	r5, #1
   b480e:	2d0a      	cmp	r5, #10
   b4810:	d199      	bne.n	b4746 <_ZN14LoRA_Functions13printNodeDataEv+0x32>
   b4812:	e7a4      	b.n	b475e <_ZN14LoRA_Functions13printNodeDataEv+0x4a>
   b4814:	000c2508 	.word	0x000c2508
   b4818:	2003d994 	.word	0x2003d994
   b481c:	000c0dc7 	.word	0x000c0dc7
   b4820:	000c0e4b 	.word	0x000c0e4b
   b4824:	2003e654 	.word	0x2003e654
   b4828:	000c0dbc 	.word	0x000c0dbc
   b482c:	000c0e5e 	.word	0x000c0e5e
   b4830:	000c0e78 	.word	0x000c0e78
   b4834:	000c1183 	.word	0x000c1183
   b4838:	000c0e7d 	.word	0x000c0e7d
   b483c:	2003d7d9 	.word	0x2003d7d9
   b4840:	000c0eaf 	.word	0x000c0eaf
   b4844:	000c0e73 	.word	0x000c0e73

000b4848 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv>:

bool LoRA_Functions::nodeConnectionsHealthy() {								// Connections are healthy if at least one node connected in last two periods
   b4848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b484c:	4607      	mov	r7, r0
// Resets the LoRA Radio if not healthy
	
	int lastConnect;
	time_t secondsPerPeriod = sysStatus.get_frequencyMinutes() * 60;
   b484e:	f001 fb65 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b4852:	f001 fd4e 	bl	b62f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4856:	4604      	mov	r4, r0
	bool health = false;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4858:	4825      	ldr	r0, [pc, #148]	; (b48f0 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa8>)
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b485a:	f8df 8094 	ldr.w	r8, [pc, #148]	; b48f0 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa8>
		if(nodeObjectContainer == NULL) break;								// Ran out of entries 

		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b485e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; b4910 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xc8>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4862:	f003 fbba 	bl	b7fda <_ZNK10JsonParser14getOuterObjectEv>
   b4866:	ab01      	add	r3, sp, #4
   b4868:	4601      	mov	r1, r0
   b486a:	4a22      	ldr	r2, [pc, #136]	; (b48f4 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xac>)
   b486c:	4820      	ldr	r0, [pc, #128]	; (b48f0 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa8>)
   b486e:	f003 fd0b 	bl	b8288 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	time_t secondsPerPeriod = sysStatus.get_frequencyMinutes() * 60;
   b4872:	233c      	movs	r3, #60	; 0x3c
   b4874:	4363      	muls	r3, r4

		if ((Time.now() - lastConnect) < 2 * secondsPerPeriod) {			// If at least one node connects, the gateway is good.
   b4876:	17de      	asrs	r6, r3, #31
   b4878:	18dc      	adds	r4, r3, r3
   b487a:	4176      	adcs	r6, r6
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b487c:	2500      	movs	r5, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b487e:	9901      	ldr	r1, [sp, #4]
   b4880:	462a      	mov	r2, r5
   b4882:	4640      	mov	r0, r8
   b4884:	f003 fbcb 	bl	b801e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) break;								// Ran out of entries 
   b4888:	4601      	mov	r1, r0
   b488a:	b178      	cbz	r0, b48ac <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x64>
		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b488c:	466b      	mov	r3, sp
   b488e:	464a      	mov	r2, r9
   b4890:	4640      	mov	r0, r8
   b4892:	f7ff fc38 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		if ((Time.now() - lastConnect) < 2 * secondsPerPeriod) {			// If at least one node connects, the gateway is good.
   b4896:	f00a fe88 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b489a:	9b00      	ldr	r3, [sp, #0]
   b489c:	1ac0      	subs	r0, r0, r3
   b489e:	17c3      	asrs	r3, r0, #31
   b48a0:	42a0      	cmp	r0, r4
   b48a2:	41b3      	sbcs	r3, r6
   b48a4:	db21      	blt.n	b48ea <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa2>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b48a6:	3501      	adds	r5, #1
   b48a8:	2d0a      	cmp	r5, #10
   b48aa:	d1e8      	bne.n	b487e <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x36>
			health = true;
			break;															// Don't need to keep checking
		}
	}

	Log.info("Node connection is %s ", (health) ? "healthy":"unhealthy");
   b48ac:	4a12      	ldr	r2, [pc, #72]	; (b48f8 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xb0>)
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b48ae:	2400      	movs	r4, #0
	Log.info("Node connection is %s ", (health) ? "healthy":"unhealthy");
   b48b0:	4912      	ldr	r1, [pc, #72]	; (b48fc <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xb4>)
   b48b2:	4813      	ldr	r0, [pc, #76]	; (b4900 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xb8>)
   b48b4:	f7ff fc43 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>

	if(!health) {
   b48b8:	b99c      	cbnz	r4, b48e2 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x9a>
		Log.info("Node connection unhealthy, reseting LoRA radio");
   b48ba:	4912      	ldr	r1, [pc, #72]	; (b4904 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xbc>)
   b48bc:	4810      	ldr	r0, [pc, #64]	; (b4900 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xb8>)
   b48be:	f7ff fc3e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(RFM95_RST,LOW);
   b48c2:	4b11      	ldr	r3, [pc, #68]	; (b4908 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xc0>)
   b48c4:	881d      	ldrh	r5, [r3, #0]
   b48c6:	4621      	mov	r1, r4
   b48c8:	4628      	mov	r0, r5
   b48ca:	f00b f87e 	bl	bf9ca <digitalWrite>
		delay(10);
   b48ce:	200a      	movs	r0, #10
   b48d0:	f007 ffc4 	bl	bc85c <delay>
		digitalWrite(RFM95_RST,HIGH);
   b48d4:	4628      	mov	r0, r5
   b48d6:	2101      	movs	r1, #1
   b48d8:	f00b f877 	bl	bf9ca <digitalWrite>
		LoRA_Functions::initializeRadio();
   b48dc:	4638      	mov	r0, r7
   b48de:	f7ff fc71 	bl	b41c4 <_ZN14LoRA_Functions15initializeRadioEv>
	}

	return health;
}
   b48e2:	4620      	mov	r0, r4
   b48e4:	b003      	add	sp, #12
   b48e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Log.info("Node connection is %s ", (health) ? "healthy":"unhealthy");
   b48ea:	4a08      	ldr	r2, [pc, #32]	; (b490c <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xc4>)
			health = true;
   b48ec:	2401      	movs	r4, #1
   b48ee:	e7df      	b.n	b48b0 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x68>
   b48f0:	2003d994 	.word	0x2003d994
   b48f4:	000c0dbc 	.word	0x000c0dbc
   b48f8:	000c0eb8 	.word	0x000c0eb8
   b48fc:	000c0ec2 	.word	0x000c0ec2
   b4900:	2003e654 	.word	0x2003e654
   b4904:	000c0ed9 	.word	0x000c0ed9
   b4908:	000c18c4 	.word	0x000c18c4
   b490c:	000c0eba 	.word	0x000c0eba
   b4910:	000c0e78 	.word	0x000c0e78

000b4914 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   b4914:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4916:	4604      	mov	r4, r0
   b4918:	4615      	mov	r5, r2
   b491a:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b491c:	f003 fdd8 	bl	b84d0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4920:	9901      	ldr	r1, [sp, #4]
   b4922:	2201      	movs	r2, #1
   b4924:	4620      	mov	r0, r4
   b4926:	f003 fd41 	bl	b83ac <_ZN10JsonWriter12insertStringEPKcb>
		insertValue(key);
		insertChar(':');
   b492a:	4620      	mov	r0, r4
   b492c:	213a      	movs	r1, #58	; 0x3a
   b492e:	f003 fcf1 	bl	b8314 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   b4932:	4904      	ldr	r1, [pc, #16]	; (b4944 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   b4934:	462a      	mov	r2, r5
   b4936:	4620      	mov	r0, r4
		insertValue(value);
	}
   b4938:	b003      	add	sp, #12
   b493a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   b493e:	f003 bd28 	b.w	b8392 <_ZN10JsonWriter13insertsprintfEPKcz>
   b4942:	bf00      	nop
   b4944:	000c0f31 	.word	0x000c0f31

000b4948 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b4948:	b513      	push	{r0, r1, r4, lr}
        val_(val) {
   b494a:	4b11      	ldr	r3, [pc, #68]	; (b4990 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x48>)
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b494c:	4c11      	ldr	r4, [pc, #68]	; (b4994 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x4c>)
   b494e:	2201      	movs	r2, #1
   b4950:	701a      	strb	r2, [r3, #0]
   b4952:	2332      	movs	r3, #50	; 0x32
   b4954:	9300      	str	r3, [sp, #0]
   b4956:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b495a:	f204 432c 	addw	r3, r4, #1068	; 0x42c
   b495e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4962:	4620      	mov	r0, r4
   b4964:	f003 fb1e 	bl	b7fa4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b4968:	4b0b      	ldr	r3, [pc, #44]	; (b4998 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x50>)
   b496a:	6023      	str	r3, [r4, #0]
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b496c:	4a0b      	ldr	r2, [pc, #44]	; (b499c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x54>)
   b496e:	4c0c      	ldr	r4, [pc, #48]	; (b49a0 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x58>)
   b4970:	490c      	ldr	r1, [pc, #48]	; (b49a4 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x5c>)
   b4972:	4b0d      	ldr	r3, [pc, #52]	; (b49a8 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x60>)
   b4974:	7812      	ldrb	r2, [r2, #0]
   b4976:	7809      	ldrb	r1, [r1, #0]
   b4978:	4620      	mov	r0, r4
   b497a:	f006 fba3 	bl	bb0c4 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b497e:	480b      	ldr	r0, [pc, #44]	; (b49ac <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x64>)
   b4980:	2200      	movs	r2, #0
   b4982:	4621      	mov	r1, r4
}
   b4984:	b002      	add	sp, #8
   b4986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b498a:	f005 be9b 	b.w	ba6c4 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b498e:	bf00      	nop
   b4990:	2003d7d9 	.word	0x2003d7d9
   b4994:	2003d994 	.word	0x2003d994
   b4998:	000c1278 	.word	0x000c1278
   b499c:	000c18c2 	.word	0x000c18c2
   b49a0:	2003d864 	.word	0x2003d864
   b49a4:	000c18c0 	.word	0x000c18c0
   b49a8:	2003e458 	.word	0x2003e458
   b49ac:	2003e0e0 	.word	0x2003e0e0

000b49b0 <_ZN14LoRA_Functions14findNodeNumberEPKc>:
uint8_t LoRA_Functions::findNodeNumber(const char* deviceID) {
   b49b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b49b4:	b096      	sub	sp, #88	; 0x58
   b49b6:	460e      	mov	r6, r1
	String nodeDeviceID;
   b49b8:	a802      	add	r0, sp, #8
   b49ba:	494d      	ldr	r1, [pc, #308]	; (b4af0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x140>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b49bc:	f8df 8134 	ldr.w	r8, [pc, #308]	; b4af4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b49c0:	f8df a148 	ldr.w	sl, [pc, #328]	; b4b0c <_ZN14LoRA_Functions14findNodeNumberEPKc+0x15c>
	String nodeDeviceID;
   b49c4:	f00a fa89 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b49c8:	484a      	ldr	r0, [pc, #296]	; (b4af4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>)
   b49ca:	f003 fb06 	bl	b7fda <_ZNK10JsonParser14getOuterObjectEv>
   b49ce:	4a4a      	ldr	r2, [pc, #296]	; (b4af8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x148>)
   b49d0:	4601      	mov	r1, r0
   b49d2:	ab01      	add	r3, sp, #4
   b49d4:	4847      	ldr	r0, [pc, #284]	; (b4af4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>)
   b49d6:	f003 fc57 	bl	b8288 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b49da:	2500      	movs	r5, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b49dc:	9901      	ldr	r1, [sp, #4]
   b49de:	462a      	mov	r2, r5
   b49e0:	4640      	mov	r0, r8
   b49e2:	f003 fb1c 	bl	b801e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
   b49e6:	1c6c      	adds	r4, r5, #1
		if(nodeObjectContainer == NULL) {
   b49e8:	4607      	mov	r7, r0
   b49ea:	46a1      	mov	r9, r4
   b49ec:	2800      	cmp	r0, #0
   b49ee:	d15f      	bne.n	b4ab0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x100>
			Log.info("findNodeNumber ran out of entries at i = %d",i);
   b49f0:	4942      	ldr	r1, [pc, #264]	; (b4afc <_ZN14LoRA_Functions14findNodeNumberEPKc+0x14c>)
   b49f2:	4843      	ldr	r0, [pc, #268]	; (b4b00 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x150>)
   b49f4:	462a      	mov	r2, r5
   b49f6:	f7ff fba2 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   b49fa:	493e      	ldr	r1, [pc, #248]	; (b4af4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>)
   b49fc:	a806      	add	r0, sp, #24
   b49fe:	f003 fd8b 	bl	b8518 <_ZN12JsonModifierC1ER10JsonParser>
	Log.info("New node will be assigned number %d, deviceID of %s and type of 3",index, deviceID);
   b4a02:	4633      	mov	r3, r6
   b4a04:	4622      	mov	r2, r4
   b4a06:	493f      	ldr	r1, [pc, #252]	; (b4b04 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x154>)
   b4a08:	483d      	ldr	r0, [pc, #244]	; (b4b00 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x150>)
   b4a0a:	f7ff fb98 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	mod.startAppend(jp.getOuterArray());
   b4a0e:	4839      	ldr	r0, [pc, #228]	; (b4af4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>)
   b4a10:	f003 fad8 	bl	b7fc4 <_ZNK10JsonParser13getOuterArrayEv>
   b4a14:	4601      	mov	r1, r0
   b4a16:	a806      	add	r0, sp, #24
   b4a18:	f003 fdb9 	bl	b858e <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
	bool startObject() { return startObjectOrArray('{', '}'); };
   b4a1c:	227d      	movs	r2, #125	; 0x7d
   b4a1e:	217b      	movs	r1, #123	; 0x7b
   b4a20:	a806      	add	r0, sp, #24
   b4a22:	f003 fd60 	bl	b84e6 <_ZN10JsonWriter18startObjectOrArrayEcc>
		mod.insertKeyValue("node", (int)index);
   b4a26:	4622      	mov	r2, r4
   b4a28:	4937      	ldr	r1, [pc, #220]	; (b4b08 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x158>)
   b4a2a:	a806      	add	r0, sp, #24
   b4a2c:	f7ff ff72 	bl	b4914 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   b4a30:	a806      	add	r0, sp, #24
   b4a32:	f003 fd4d 	bl	b84d0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4a36:	2201      	movs	r2, #1
   b4a38:	a806      	add	r0, sp, #24
   b4a3a:	4934      	ldr	r1, [pc, #208]	; (b4b0c <_ZN14LoRA_Functions14findNodeNumberEPKc+0x15c>)
   b4a3c:	f003 fcb6 	bl	b83ac <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4a40:	a806      	add	r0, sp, #24
   b4a42:	213a      	movs	r1, #58	; 0x3a
   b4a44:	f003 fc66 	bl	b8314 <_ZN10JsonWriter10insertCharEc>
	void insertValue(const char *value) { insertString(value, true); }
   b4a48:	4631      	mov	r1, r6
   b4a4a:	2201      	movs	r2, #1
   b4a4c:	a806      	add	r0, sp, #24
   b4a4e:	f003 fcad 	bl	b83ac <_ZN10JsonWriter12insertStringEPKcb>
		mod.insertKeyValue("last", Time.now());
   b4a52:	f00a fdaa 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b4a56:	4605      	mov	r5, r0
		insertCheckSeparator();
   b4a58:	a806      	add	r0, sp, #24
   b4a5a:	f003 fd39 	bl	b84d0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4a5e:	2201      	movs	r2, #1
   b4a60:	a806      	add	r0, sp, #24
   b4a62:	492b      	ldr	r1, [pc, #172]	; (b4b10 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x160>)
   b4a64:	f003 fca2 	bl	b83ac <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4a68:	a806      	add	r0, sp, #24
   b4a6a:	213a      	movs	r1, #58	; 0x3a
   b4a6c:	f003 fc52 	bl	b8314 <_ZN10JsonWriter10insertCharEc>
	void insertValue(long value) { insertsprintf("%ld", value); }
   b4a70:	462a      	mov	r2, r5
   b4a72:	a806      	add	r0, sp, #24
   b4a74:	4927      	ldr	r1, [pc, #156]	; (b4b14 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x164>)
   b4a76:	f003 fc8c 	bl	b8392 <_ZN10JsonWriter13insertsprintfEPKcz>
		mod.insertKeyValue("type", (int)3);
   b4a7a:	2203      	movs	r2, #3
   b4a7c:	4926      	ldr	r1, [pc, #152]	; (b4b18 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x168>)
   b4a7e:	a806      	add	r0, sp, #24
   b4a80:	f7ff ff48 	bl	b4914 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.finishObjectOrArray();
   b4a84:	a806      	add	r0, sp, #24
   b4a86:	f003 fc53 	bl	b8330 <_ZN10JsonWriter19finishObjectOrArrayEv>
	mod.finish();
   b4a8a:	a806      	add	r0, sp, #24
   b4a8c:	f003 ffdb 	bl	b8a46 <_ZN12JsonModifier6finishEv>
	nodeID.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4a90:	f001 fb04 	bl	b609c <_ZN10nodeIDData8instanceEv>
   b4a94:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b4a98:	f001 fb38 	bl	b610c <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	Log.info("Returning index %d",index);
   b4a9c:	4622      	mov	r2, r4
   b4a9e:	491f      	ldr	r1, [pc, #124]	; (b4b1c <_ZN14LoRA_Functions14findNodeNumberEPKc+0x16c>)
   b4aa0:	4817      	ldr	r0, [pc, #92]	; (b4b00 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x150>)
   b4aa2:	f7ff fb4c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   b4aa6:	a806      	add	r0, sp, #24
	return index;
   b4aa8:	b2e4      	uxtb	r4, r4
	JsonModifier mod(jp);
   b4aaa:	f003 fa0f 	bl	b7ecc <_ZN12JsonModifierD1Ev>
   b4aae:	e012      	b.n	b4ad6 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x126>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b4ab0:	4601      	mov	r1, r0
   b4ab2:	ab02      	add	r3, sp, #8
   b4ab4:	4640      	mov	r0, r8
   b4ab6:	4652      	mov	r2, sl
   b4ab8:	f7ff fb33 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4abc:	4631      	mov	r1, r6
   b4abe:	a802      	add	r0, sp, #8
   b4ac0:	f00a fad1 	bl	bf066 <_ZNK6String6equalsEPKc>
		if (nodeDeviceID == deviceID) {
   b4ac4:	b170      	cbz	r0, b4ae4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x134>
			jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);		// A match!
   b4ac6:	4a10      	ldr	r2, [pc, #64]	; (b4b08 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x158>)
   b4ac8:	480a      	ldr	r0, [pc, #40]	; (b4af4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x144>)
   b4aca:	466b      	mov	r3, sp
   b4acc:	4639      	mov	r1, r7
   b4ace:	f7ff fb1a 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
			return nodeNumber;												// All is good - return node number for the deviceID passed to the function
   b4ad2:	f89d 4000 	ldrb.w	r4, [sp]
	String nodeDeviceID;
   b4ad6:	a802      	add	r0, sp, #8
   b4ad8:	f00a f9b4 	bl	bee44 <_ZN6StringD1Ev>
}
   b4adc:	4620      	mov	r0, r4
   b4ade:	b016      	add	sp, #88	; 0x58
   b4ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;															// This will be the node number for the next node if no match is found
   b4ae4:	1cac      	adds	r4, r5, #2
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4ae6:	464d      	mov	r5, r9
   b4ae8:	2d0a      	cmp	r5, #10
   b4aea:	f47f af77 	bne.w	b49dc <_ZN14LoRA_Functions14findNodeNumberEPKc+0x2c>
   b4aee:	e784      	b.n	b49fa <_ZN14LoRA_Functions14findNodeNumberEPKc+0x4a>
   b4af0:	000c2508 	.word	0x000c2508
   b4af4:	2003d994 	.word	0x2003d994
   b4af8:	000c0dbc 	.word	0x000c0dbc
   b4afc:	000c0f08 	.word	0x000c0f08
   b4b00:	2003e654 	.word	0x2003e654
   b4b04:	000c0f34 	.word	0x000c0f34
   b4b08:	000c0e73 	.word	0x000c0e73
   b4b0c:	000c0dc7 	.word	0x000c0dc7
   b4b10:	000c0e78 	.word	0x000c0e78
   b4b14:	000c1d00 	.word	0x000c1d00
   b4b18:	000c1183 	.word	0x000c1183
   b4b1c:	000c0f76 	.word	0x000c0f76

000b4b20 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>:
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4b20:	b5f0      	push	{r4, r5, r6, r7, lr}
	lora_state = JOIN_ACK;			// Prepare to respond
   b4b22:	4b33      	ldr	r3, [pc, #204]	; (b4bf0 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xd0>)
   b4b24:	2202      	movs	r2, #2
   b4b26:	701a      	strb	r2, [r3, #0]
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4b28:	b091      	sub	sp, #68	; 0x44
		nodeDeviceID[i] = buf[i+2];
   b4b2a:	4b32      	ldr	r3, [pc, #200]	; (b4bf4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xd4>)
   b4b2c:	ac09      	add	r4, sp, #36	; 0x24
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4b2e:	4605      	mov	r5, r0
		nodeDeviceID[i] = buf[i+2];
   b4b30:	f103 0218 	add.w	r2, r3, #24
   b4b34:	4627      	mov	r7, r4
   b4b36:	6818      	ldr	r0, [r3, #0]
   b4b38:	6859      	ldr	r1, [r3, #4]
   b4b3a:	4626      	mov	r6, r4
   b4b3c:	c603      	stmia	r6!, {r0, r1}
   b4b3e:	3308      	adds	r3, #8
   b4b40:	4293      	cmp	r3, r2
   b4b42:	4634      	mov	r4, r6
   b4b44:	d1f7      	bne.n	b4b36 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x16>
   b4b46:	781b      	ldrb	r3, [r3, #0]
   b4b48:	7033      	strb	r3, [r6, #0]
	current.set_tempNodeNumber(current.get_nodeNumber());			// Store the old node number for the ack - also differentiates between unconfigured node and time set
   b4b4a:	f001 fa29 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4b4e:	4604      	mov	r4, r0
   b4b50:	f001 fa26 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4b54:	f001 fb10 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4b58:	4601      	mov	r1, r0
   b4b5a:	4620      	mov	r0, r4
   b4b5c:	f001 fb88 	bl	b6270 <_ZN17currentStatusData18set_tempNodeNumberEh>
	if (current.get_nodeNumber() > 10) {							// An unconfigured node
   b4b60:	f001 fa1e 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4b64:	f001 fb08 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4b68:	280a      	cmp	r0, #10
   b4b6a:	d91d      	bls.n	b4ba8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x88>
		current.set_nodeNumber(findNodeNumber(nodeDeviceID));		// Look up the new node number
   b4b6c:	f001 fa18 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4b70:	4639      	mov	r1, r7
   b4b72:	4604      	mov	r4, r0
   b4b74:	4628      	mov	r0, r5
   b4b76:	f7ff ff1b 	bl	b49b0 <_ZN14LoRA_Functions14findNodeNumberEPKc>
   b4b7a:	4601      	mov	r1, r0
   b4b7c:	4620      	mov	r0, r4
   b4b7e:	f001 fb71 	bl	b6264 <_ZN17currentStatusData14set_nodeNumberEh>
		Log.info("Join request from Unconfigured node %s will change node number from %d to %d",  nodeDeviceID, current.get_tempNodeNumber(), current.get_nodeNumber());
   b4b82:	f001 fa0d 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4b86:	f001 fafc 	bl	b6182 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4b8a:	9003      	str	r0, [sp, #12]
   b4b8c:	f001 fa08 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4b90:	f001 faf2 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4b94:	9b03      	ldr	r3, [sp, #12]
   b4b96:	9000      	str	r0, [sp, #0]
   b4b98:	4917      	ldr	r1, [pc, #92]	; (b4bf8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xd8>)
   b4b9a:	4818      	ldr	r0, [pc, #96]	; (b4bfc <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xdc>)
   b4b9c:	463a      	mov	r2, r7
   b4b9e:	f7ff face 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b4ba2:	2001      	movs	r0, #1
   b4ba4:	b011      	add	sp, #68	; 0x44
   b4ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf[27] = getType(current.get_nodeNumber());
   b4ba8:	f001 f9fa 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4bac:	f001 fae4 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4bb0:	4601      	mov	r1, r0
   b4bb2:	4628      	mov	r0, r5
   b4bb4:	f7ff fcec 	bl	b4590 <_ZN14LoRA_Functions7getTypeEi>
   b4bb8:	4c11      	ldr	r4, [pc, #68]	; (b4c00 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xe0>)
   b4bba:	76e0      	strb	r0, [r4, #27]
		Log.info("Join request from %s with node %d - setting clock and setting sensorType to %d", LoRA_Functions::instance().findDeviceID(1).c_str(), current.get_nodeNumber(), buf[27]);
   b4bbc:	f7ff fad8 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4bc0:	2201      	movs	r2, #1
   b4bc2:	4601      	mov	r1, r0
   b4bc4:	a805      	add	r0, sp, #20
   b4bc6:	f7ff fca7 	bl	b4518 <_ZN14LoRA_Functions12findDeviceIDEh>
	const char * c_str() const { return buffer; }
   b4bca:	9a05      	ldr	r2, [sp, #20]
   b4bcc:	9203      	str	r2, [sp, #12]
   b4bce:	f001 f9e7 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4bd2:	f001 fad1 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4bd6:	7ee1      	ldrb	r1, [r4, #27]
   b4bd8:	9100      	str	r1, [sp, #0]
   b4bda:	4603      	mov	r3, r0
   b4bdc:	9a03      	ldr	r2, [sp, #12]
   b4bde:	4909      	ldr	r1, [pc, #36]	; (b4c04 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xe4>)
   b4be0:	4806      	ldr	r0, [pc, #24]	; (b4bfc <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xdc>)
   b4be2:	f7ff faac 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4be6:	a805      	add	r0, sp, #20
   b4be8:	f00a f92c 	bl	bee44 <_ZN6StringD1Ev>
   b4bec:	e7d9      	b.n	b4ba2 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x82>
   b4bee:	bf00      	nop
   b4bf0:	2003d7d8 	.word	0x2003d7d8
   b4bf4:	2003d7ea 	.word	0x2003d7ea
   b4bf8:	000c0f89 	.word	0x000c0f89
   b4bfc:	2003e654 	.word	0x2003e654
   b4c00:	2003d7e8 	.word	0x2003d7e8
   b4c04:	000c0fd6 	.word	0x000c0fd6

000b4c08 <_ZN14LoRA_Functions14nodeConfiguredEi>:
bool LoRA_Functions::nodeConfigured(int nodeNumber)  {
   b4c08:	b570      	push	{r4, r5, r6, lr}
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4c0a:	4826      	ldr	r0, [pc, #152]	; (b4ca4 <_ZN14LoRA_Functions14nodeConfiguredEi+0x9c>)
bool LoRA_Functions::nodeConfigured(int nodeNumber)  {
   b4c0c:	b098      	sub	sp, #96	; 0x60
   b4c0e:	460d      	mov	r5, r1
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4c10:	f003 f9e3 	bl	b7fda <_ZNK10JsonParser14getOuterObjectEv>
   b4c14:	4a24      	ldr	r2, [pc, #144]	; (b4ca8 <_ZN14LoRA_Functions14nodeConfiguredEi+0xa0>)
   b4c16:	4601      	mov	r1, r0
   b4c18:	ab06      	add	r3, sp, #24
   b4c1a:	4822      	ldr	r0, [pc, #136]	; (b4ca4 <_ZN14LoRA_Functions14nodeConfiguredEi+0x9c>)
   b4c1c:	f003 fb34 	bl	b8288 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4c20:	9906      	ldr	r1, [sp, #24]
   b4c22:	4820      	ldr	r0, [pc, #128]	; (b4ca4 <_ZN14LoRA_Functions14nodeConfiguredEi+0x9c>)
   b4c24:	1e6a      	subs	r2, r5, #1
   b4c26:	f003 f9fa 	bl	b801e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries - no match found
   b4c2a:	4604      	mov	r4, r0
   b4c2c:	b910      	cbnz	r0, b4c34 <_ZN14LoRA_Functions14nodeConfiguredEi+0x2c>
   b4c2e:	2000      	movs	r0, #0
}
   b4c30:	b018      	add	sp, #96	; 0x60
   b4c32:	bd70      	pop	{r4, r5, r6, pc}
	jp.getValueByKey(nodeObjectContainer, "node", nodeNumberConfigured);	// Get the deviceID and compare
   b4c34:	4601      	mov	r1, r0
   b4c36:	4a1d      	ldr	r2, [pc, #116]	; (b4cac <_ZN14LoRA_Functions14nodeConfiguredEi+0xa4>)
   b4c38:	481a      	ldr	r0, [pc, #104]	; (b4ca4 <_ZN14LoRA_Functions14nodeConfiguredEi+0x9c>)
   b4c3a:	ab04      	add	r3, sp, #16
   b4c3c:	f7ff fa63 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	if (nodeNumberConfigured == nodeNumber) {
   b4c40:	9e04      	ldr	r6, [sp, #16]
   b4c42:	42ae      	cmp	r6, r5
   b4c44:	d1f3      	bne.n	b4c2e <_ZN14LoRA_Functions14nodeConfiguredEi+0x26>
		jp.getValueByKey(nodeObjectContainer, "last", lastConnection);
   b4c46:	4a1a      	ldr	r2, [pc, #104]	; (b4cb0 <_ZN14LoRA_Functions14nodeConfiguredEi+0xa8>)
   b4c48:	4816      	ldr	r0, [pc, #88]	; (b4ca4 <_ZN14LoRA_Functions14nodeConfiguredEi+0x9c>)
   b4c4a:	4621      	mov	r1, r4
   b4c4c:	ab05      	add	r3, sp, #20
   b4c4e:	f7ff fa5a 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		Log.info("Last connected updated for node %d from %i to %li",nodeNumber,lastConnection,Time.now());
   b4c52:	9b05      	ldr	r3, [sp, #20]
   b4c54:	9303      	str	r3, [sp, #12]
   b4c56:	f00a fca8 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b4c5a:	9b03      	ldr	r3, [sp, #12]
   b4c5c:	4915      	ldr	r1, [pc, #84]	; (b4cb4 <_ZN14LoRA_Functions14nodeConfiguredEi+0xac>)
   b4c5e:	9000      	str	r0, [sp, #0]
   b4c60:	4632      	mov	r2, r6
   b4c62:	4815      	ldr	r0, [pc, #84]	; (b4cb8 <_ZN14LoRA_Functions14nodeConfiguredEi+0xb0>)
   b4c64:	f7ff fa6b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		jp.getValueTokenByKey(nodeObjectContainer, "last", value);
   b4c68:	ab07      	add	r3, sp, #28
   b4c6a:	4a11      	ldr	r2, [pc, #68]	; (b4cb0 <_ZN14LoRA_Functions14nodeConfiguredEi+0xa8>)
   b4c6c:	480d      	ldr	r0, [pc, #52]	; (b4ca4 <_ZN14LoRA_Functions14nodeConfiguredEi+0x9c>)
   b4c6e:	4621      	mov	r1, r4
   b4c70:	f003 fb0a 	bl	b8288 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
		JsonModifier mod(jp);
   b4c74:	490b      	ldr	r1, [pc, #44]	; (b4ca4 <_ZN14LoRA_Functions14nodeConfiguredEi+0x9c>)
   b4c76:	a808      	add	r0, sp, #32
   b4c78:	f003 fc4e 	bl	b8518 <_ZN12JsonModifierC1ER10JsonParser>
		mod.startModify(value);
   b4c7c:	9907      	ldr	r1, [sp, #28]
   b4c7e:	a808      	add	r0, sp, #32
   b4c80:	f003 fc5c 	bl	b853c <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
		mod.insertValue((int)Time.now());
   b4c84:	f00a fc91 	bl	bf5aa <_ZN9TimeClass3nowEv>
	void insertValue(int value) { insertsprintf("%d", value); }
   b4c88:	490c      	ldr	r1, [pc, #48]	; (b4cbc <_ZN14LoRA_Functions14nodeConfiguredEi+0xb4>)
   b4c8a:	4602      	mov	r2, r0
   b4c8c:	a808      	add	r0, sp, #32
   b4c8e:	f003 fb80 	bl	b8392 <_ZN10JsonWriter13insertsprintfEPKcz>
		mod.finish();
   b4c92:	a808      	add	r0, sp, #32
   b4c94:	f003 fed7 	bl	b8a46 <_ZN12JsonModifier6finishEv>
		JsonModifier mod(jp);
   b4c98:	a808      	add	r0, sp, #32
   b4c9a:	f003 f917 	bl	b7ecc <_ZN12JsonModifierD1Ev>
		return true;
   b4c9e:	2001      	movs	r0, #1
   b4ca0:	e7c6      	b.n	b4c30 <_ZN14LoRA_Functions14nodeConfiguredEi+0x28>
   b4ca2:	bf00      	nop
   b4ca4:	2003d994 	.word	0x2003d994
   b4ca8:	000c0dbc 	.word	0x000c0dbc
   b4cac:	000c0e73 	.word	0x000c0e73
   b4cb0:	000c0e78 	.word	0x000c0e78
   b4cb4:	000c1025 	.word	0x000c1025
   b4cb8:	2003e654 	.word	0x2003e654
   b4cbc:	000c0f31 	.word	0x000c0f31

000b4cc0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>:
bool LoRA_Functions::acknowledgeDataReportGateway() { 		// This is a response to a data message it has a length of 11 and a specific payload and message flag
   b4cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	attempts++;
   b4cc4:	4d6b      	ldr	r5, [pc, #428]	; (b4e74 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1b4>)
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b4cc6:	4c6c      	ldr	r4, [pc, #432]	; (b4e78 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1b8>)
	attempts++;
   b4cc8:	682b      	ldr	r3, [r5, #0]
bool LoRA_Functions::acknowledgeDataReportGateway() { 		// This is a response to a data message it has a length of 11 and a specific payload and message flag
   b4cca:	b089      	sub	sp, #36	; 0x24
	attempts++;
   b4ccc:	3301      	adds	r3, #1
   b4cce:	602b      	str	r3, [r5, #0]
bool LoRA_Functions::acknowledgeDataReportGateway() { 		// This is a response to a data message it has a length of 11 and a specific payload and message flag
   b4cd0:	4606      	mov	r6, r0
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b4cd2:	f00a fc6a 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b4cd6:	1600      	asrs	r0, r0, #24
   b4cd8:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));		// Third byte
   b4cda:	f00a fc66 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b4cde:	1400      	asrs	r0, r0, #16
   b4ce0:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));		// Second byte
   b4ce2:	f00a fc62 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b4ce6:	1200      	asrs	r0, r0, #8
   b4ce8:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    	// First byte			
   b4cea:	f00a fc5e 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b4cee:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports - for Gateways
   b4cf0:	f001 f914 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b4cf4:	f001 fafd 	bl	b62f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4cf8:	0a00      	lsrs	r0, r0, #8
   b4cfa:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b4cfc:	f001 f90e 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b4d00:	f001 faf7 	bl	b62f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4d04:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_openHours();
   b4d06:	f001 f94b 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4d0a:	f001 fbf4 	bl	b64f6 <_ZNK17currentStatusData13get_openHoursEv>
   b4d0e:	7220      	strb	r0, [r4, #8]
	if (nodeConfigured(current.get_nodeNumber())) {			// Check to see if we need to set an alert code
   b4d10:	f001 f946 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4d14:	f001 fa30 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d18:	4601      	mov	r1, r0
   b4d1a:	4630      	mov	r0, r6
   b4d1c:	f7ff ff74 	bl	b4c08 <_ZN14LoRA_Functions14nodeConfiguredEi>
   b4d20:	2800      	cmp	r0, #0
   b4d22:	d06f      	beq.n	b4e04 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x144>
		Log.info("Data Ack- Node number %d valid", current.get_nodeNumber());
   b4d24:	f001 f93c 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4d28:	f001 fa26 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d2c:	4953      	ldr	r1, [pc, #332]	; (b4e7c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1bc>)
   b4d2e:	4602      	mov	r2, r0
   b4d30:	4853      	ldr	r0, [pc, #332]	; (b4e80 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c0>)
   b4d32:	f7ff fa04 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		buf[9] = 0;											// Default is that there is no alert code
   b4d36:	2300      	movs	r3, #0
   b4d38:	7263      	strb	r3, [r4, #9]
	buf[10] = current.get_messageNumber();			 // Message number
   b4d3a:	f001 f931 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4d3e:	f001 fa34 	bl	b61aa <_ZNK17currentStatusData17get_messageNumberEv>
	Log.info("Acknowlegment to %snode %d message %d, time = %s and frequency %d minutes", (buf[9] > 0) ? "misconfigured ":"", current.get_nodeNumber(), buf[10], Time.timeStr(Time.now()).c_str(), sysStatus.get_frequencyMinutes());
   b4d42:	4f50      	ldr	r7, [pc, #320]	; (b4e84 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c4>)
   b4d44:	7a62      	ldrb	r2, [r4, #9]
   b4d46:	4b50      	ldr	r3, [pc, #320]	; (b4e88 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c8>)
	buf[10] = current.get_messageNumber();			 // Message number
   b4d48:	72a0      	strb	r0, [r4, #10]
	Log.info("Acknowlegment to %snode %d message %d, time = %s and frequency %d minutes", (buf[9] > 0) ? "misconfigured ":"", current.get_nodeNumber(), buf[10], Time.timeStr(Time.now()).c_str(), sysStatus.get_frequencyMinutes());
   b4d4a:	2a00      	cmp	r2, #0
   b4d4c:	bf08      	it	eq
   b4d4e:	461f      	moveq	r7, r3
   b4d50:	f001 f926 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4d54:	f001 fa10 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d58:	7aa4      	ldrb	r4, [r4, #10]
   b4d5a:	4680      	mov	r8, r0
   b4d5c:	f00a fc25 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b4d60:	4602      	mov	r2, r0
   b4d62:	17c3      	asrs	r3, r0, #31
   b4d64:	a804      	add	r0, sp, #16
   b4d66:	f00a fb1b 	bl	bf3a0 <_ZN9TimeClass7timeStrEx>
   b4d6a:	f8dd 9010 	ldr.w	r9, [sp, #16]
   b4d6e:	f001 f8d5 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b4d72:	f001 fabe 	bl	b62f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4d76:	463a      	mov	r2, r7
   b4d78:	4944      	ldr	r1, [pc, #272]	; (b4e8c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1cc>)
   b4d7a:	9400      	str	r4, [sp, #0]
   b4d7c:	4643      	mov	r3, r8
   b4d7e:	e9cd 9001 	strd	r9, r0, [sp, #4]
   b4d82:	483f      	ldr	r0, [pc, #252]	; (b4e80 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c0>)
   b4d84:	f7ff f9db 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4d88:	a804      	add	r0, sp, #16
   b4d8a:	f00a f85b 	bl	bee44 <_ZN6StringD1Ev>
	printNodeData();
   b4d8e:	4630      	mov	r0, r6
   b4d90:	f7ff fcc0 	bl	b4714 <_ZN14LoRA_Functions13printNodeDataEv>
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4d94:	4b3e      	ldr	r3, [pc, #248]	; (b4e90 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1d0>)
   b4d96:	881e      	ldrh	r6, [r3, #0]
   b4d98:	2101      	movs	r1, #1
   b4d9a:	4630      	mov	r0, r6
   b4d9c:	f00a fe15 	bl	bf9ca <digitalWrite>
	if (manager.sendtoWait(buf, 11, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b4da0:	f001 f8fe 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4da4:	f001 f9e8 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4da8:	2204      	movs	r2, #4
   b4daa:	4603      	mov	r3, r0
   b4dac:	9200      	str	r2, [sp, #0]
   b4dae:	4932      	ldr	r1, [pc, #200]	; (b4e78 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1b8>)
   b4db0:	4838      	ldr	r0, [pc, #224]	; (b4e94 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1d4>)
   b4db2:	220b      	movs	r2, #11
   b4db4:	f005 fc90 	bl	ba6d8 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4db8:	4b37      	ldr	r3, [pc, #220]	; (b4e98 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1d8>)
   b4dba:	4604      	mov	r4, r0
		success++;
   b4dbc:	6818      	ldr	r0, [r3, #0]
	if (manager.sendtoWait(buf, 11, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b4dbe:	2c00      	cmp	r4, #0
   b4dc0:	d13b      	bne.n	b4e3a <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x17a>
		success++;
   b4dc2:	3001      	adds	r0, #1
   b4dc4:	6018      	str	r0, [r3, #0]
		Log.info("Response received successfully - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b4dc6:	f00b f861 	bl	bfe8c <__aeabi_i2d>
   b4dca:	4680      	mov	r8, r0
   b4dcc:	6828      	ldr	r0, [r5, #0]
   b4dce:	4689      	mov	r9, r1
   b4dd0:	f00b f85c 	bl	bfe8c <__aeabi_i2d>
   b4dd4:	4602      	mov	r2, r0
   b4dd6:	460b      	mov	r3, r1
   b4dd8:	4640      	mov	r0, r8
   b4dda:	4649      	mov	r1, r9
   b4ddc:	f00b f9ea 	bl	c01b4 <__aeabi_ddiv>
   b4de0:	4b2e      	ldr	r3, [pc, #184]	; (b4e9c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1dc>)
   b4de2:	2200      	movs	r2, #0
   b4de4:	f00b f8bc 	bl	bff60 <__aeabi_dmul>
   b4de8:	4602      	mov	r2, r0
   b4dea:	460b      	mov	r3, r1
   b4dec:	4824      	ldr	r0, [pc, #144]	; (b4e80 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c0>)
   b4dee:	492c      	ldr	r1, [pc, #176]	; (b4ea0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1e0>)
   b4df0:	f7ff f9a5 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b4df4:	4630      	mov	r0, r6
   b4df6:	4621      	mov	r1, r4
   b4df8:	f00a fde7 	bl	bf9ca <digitalWrite>
		return true;
   b4dfc:	2001      	movs	r0, #1
}
   b4dfe:	b009      	add	sp, #36	; 0x24
   b4e00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		Log.info("Data Ack - Node number %d is invalid - resetting", current.get_nodeNumber());
   b4e04:	f001 f8cc 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4e08:	f001 f9b6 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e0c:	4925      	ldr	r1, [pc, #148]	; (b4ea4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1e4>)
   b4e0e:	4602      	mov	r2, r0
   b4e10:	481b      	ldr	r0, [pc, #108]	; (b4e80 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c0>)
   b4e12:	f7ff f994 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		current.set_alertCodeNode(true);						// Store as this will impact reporting
   b4e16:	f001 f8c3 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4e1a:	2101      	movs	r1, #1
   b4e1c:	f001 fa46 	bl	b62ac <_ZN17currentStatusData17set_alertCodeNodeEh>
		buf[9] = 1;												// Set the alert code
   b4e20:	2301      	movs	r3, #1
   b4e22:	7263      	strb	r3, [r4, #9]
		current.set_alertTimestampNode(Time.now());
   b4e24:	f001 f8bc 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4e28:	4607      	mov	r7, r0
   b4e2a:	f00a fbbe 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b4e2e:	4602      	mov	r2, r0
   b4e30:	17c3      	asrs	r3, r0, #31
   b4e32:	4638      	mov	r0, r7
   b4e34:	f001 fb48 	bl	b64c8 <_ZN17currentStatusData22set_alertTimestampNodeEx>
   b4e38:	e77f      	b.n	b4d3a <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x7a>
		Log.info("Response not acknowledged - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b4e3a:	f00b f827 	bl	bfe8c <__aeabi_i2d>
   b4e3e:	4680      	mov	r8, r0
   b4e40:	6828      	ldr	r0, [r5, #0]
   b4e42:	4689      	mov	r9, r1
   b4e44:	f00b f822 	bl	bfe8c <__aeabi_i2d>
   b4e48:	4602      	mov	r2, r0
   b4e4a:	460b      	mov	r3, r1
   b4e4c:	4640      	mov	r0, r8
   b4e4e:	4649      	mov	r1, r9
   b4e50:	f00b f9b0 	bl	c01b4 <__aeabi_ddiv>
   b4e54:	4b11      	ldr	r3, [pc, #68]	; (b4e9c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1dc>)
   b4e56:	2200      	movs	r2, #0
   b4e58:	f00b f882 	bl	bff60 <__aeabi_dmul>
   b4e5c:	4602      	mov	r2, r0
   b4e5e:	460b      	mov	r3, r1
   b4e60:	4807      	ldr	r0, [pc, #28]	; (b4e80 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c0>)
   b4e62:	4911      	ldr	r1, [pc, #68]	; (b4ea8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1e8>)
   b4e64:	f7ff f96b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b4e68:	4630      	mov	r0, r6
   b4e6a:	2100      	movs	r1, #0
   b4e6c:	f00a fdad 	bl	bf9ca <digitalWrite>
		return false;
   b4e70:	2000      	movs	r0, #0
   b4e72:	e7c4      	b.n	b4dfe <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x13e>
   b4e74:	2003d7e4 	.word	0x2003d7e4
   b4e78:	2003d7e8 	.word	0x2003d7e8
   b4e7c:	000c1066 	.word	0x000c1066
   b4e80:	2003e654 	.word	0x2003e654
   b4e84:	000c1057 	.word	0x000c1057
   b4e88:	000c2508 	.word	0x000c2508
   b4e8c:	000c10b6 	.word	0x000c10b6
   b4e90:	000c18bc 	.word	0x000c18bc
   b4e94:	2003e0e0 	.word	0x2003e0e0
   b4e98:	2003d7e0 	.word	0x2003d7e0
   b4e9c:	40590000 	.word	0x40590000
   b4ea0:	000c1100 	.word	0x000c1100
   b4ea4:	000c1085 	.word	0x000c1085
   b4ea8:	000c1134 	.word	0x000c1134

000b4eac <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>:
bool LoRA_Functions::respondToLoRAMessageGateway() {
   b4eac:	b510      	push	{r4, lr}
	Log.info("Responding using the %s message type", loraStateNames[lora_state]);
   b4eae:	4c13      	ldr	r4, [pc, #76]	; (b4efc <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x50>)
   b4eb0:	4b13      	ldr	r3, [pc, #76]	; (b4f00 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x54>)
   b4eb2:	7822      	ldrb	r2, [r4, #0]
   b4eb4:	4913      	ldr	r1, [pc, #76]	; (b4f04 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x58>)
   b4eb6:	4814      	ldr	r0, [pc, #80]	; (b4f08 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x5c>)
   b4eb8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b4ebc:	f7ff f93f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b4ec0:	7823      	ldrb	r3, [r4, #0]
   b4ec2:	2b04      	cmp	r3, #4
   b4ec4:	d00c      	beq.n	b4ee0 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x34>
	if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().acknowledgeJoinRequestGateway()) return true;}
   b4ec6:	7823      	ldrb	r3, [r4, #0]
   b4ec8:	2b02      	cmp	r3, #2
   b4eca:	d104      	bne.n	b4ed6 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x2a>
   b4ecc:	f7ff f950 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4ed0:	f7ff fb8a 	bl	b45e8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>
   b4ed4:	b950      	cbnz	r0, b4eec <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x40>
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b4ed6:	7823      	ldrb	r3, [r4, #0]
   b4ed8:	2b06      	cmp	r3, #6
   b4eda:	d009      	beq.n	b4ef0 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x44>
	return false; 
   b4edc:	2000      	movs	r0, #0
   b4ede:	e006      	b.n	b4eee <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x42>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b4ee0:	f7ff f946 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4ee4:	f7ff feec 	bl	b4cc0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>
   b4ee8:	2800      	cmp	r0, #0
   b4eea:	d0ec      	beq.n	b4ec6 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x1a>
   b4eec:	2001      	movs	r0, #1
}
   b4eee:	bd10      	pop	{r4, pc}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b4ef0:	f7ff f93e 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
}
   b4ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b4ef8:	f7ff ba96 	b.w	b4428 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>
   b4efc:	2003d7d8 	.word	0x2003d7d8
   b4f00:	2003d60c 	.word	0x2003d60c
   b4f04:	000c1163 	.word	0x000c1163
   b4f08:	2003e654 	.word	0x2003e654

000b4f0c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>:
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b4f0c:	b570      	push	{r4, r5, r6, lr}
   b4f0e:	b088      	sub	sp, #32
	uint8_t len = sizeof(buf);
   b4f10:	2379      	movs	r3, #121	; 0x79
   b4f12:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b4f16:	f10d 031f 	add.w	r3, sp, #31
   b4f1a:	9303      	str	r3, [sp, #12]
   b4f1c:	f10d 031e 	add.w	r3, sp, #30
   b4f20:	4e49      	ldr	r6, [pc, #292]	; (b5048 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x13c>)
   b4f22:	9302      	str	r3, [sp, #8]
   b4f24:	f10d 031d 	add.w	r3, sp, #29
   b4f28:	9301      	str	r3, [sp, #4]
   b4f2a:	ab07      	add	r3, sp, #28
   b4f2c:	9300      	str	r3, [sp, #0]
   b4f2e:	4847      	ldr	r0, [pc, #284]	; (b504c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x140>)
   b4f30:	f10d 031b 	add.w	r3, sp, #27
   b4f34:	f10d 021a 	add.w	r2, sp, #26
   b4f38:	4631      	mov	r1, r6
   b4f3a:	f005 fc01 	bl	ba740 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b4f3e:	b910      	cbnz	r0, b4f46 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x3a>
	return false;
   b4f40:	2000      	movs	r0, #0
}
   b4f42:	b008      	add	sp, #32
   b4f44:	bd70      	pop	{r4, r5, r6, pc}
		buf[len] = 0;
   b4f46:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b4f4a:	2400      	movs	r4, #0
   b4f4c:	54f4      	strb	r4, [r6, r3]
		if (!((buf[0] << 8 | buf[1]) == sysStatus.get_magicNumber())) {
   b4f4e:	8835      	ldrh	r5, [r6, #0]
   b4f50:	f000 ffe4 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b4f54:	f001 f9c8 	bl	b62e8 <_ZNK13sysStatusData15get_magicNumberEv>
   b4f58:	ba6d      	rev16	r5, r5
   b4f5a:	b2ad      	uxth	r5, r5
   b4f5c:	42a8      	cmp	r0, r5
   b4f5e:	d00e      	beq.n	b4f7e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x72>
			Log.info("Message magic number of %d did not match the Magic Number in memory %d - Ignoring", (buf[0] << 8 | buf[1]), sysStatus.get_magicNumber());
   b4f60:	8832      	ldrh	r2, [r6, #0]
   b4f62:	ba52      	rev16	r2, r2
   b4f64:	b292      	uxth	r2, r2
   b4f66:	9205      	str	r2, [sp, #20]
   b4f68:	f000 ffd8 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b4f6c:	f001 f9bc 	bl	b62e8 <_ZNK13sysStatusData15get_magicNumberEv>
   b4f70:	9a05      	ldr	r2, [sp, #20]
   b4f72:	4937      	ldr	r1, [pc, #220]	; (b5050 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x144>)
   b4f74:	4603      	mov	r3, r0
   b4f76:	4837      	ldr	r0, [pc, #220]	; (b5054 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x148>)
   b4f78:	f7ff f8e1 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
			return false;
   b4f7c:	e7e0      	b.n	b4f40 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
			current.set_nodeNumber(from);
   b4f7e:	f001 f80f 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4f82:	f89d 101b 	ldrb.w	r1, [sp, #27]
			lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b4f86:	4c34      	ldr	r4, [pc, #208]	; (b5058 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x14c>)
			current.set_nodeNumber(from);
   b4f88:	f001 f96c 	bl	b6264 <_ZN17currentStatusData14set_nodeNumberEh>
			lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b4f8c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b4f90:	f003 030f 	and.w	r3, r3, #15
   b4f94:	7023      	strb	r3, [r4, #0]
			Log.info("From node %d with rssi=%d - a %s message of length %d in %d hops", current.get_nodeNumber(), driver.lastRssi(), loraStateNames[lora_state], len, hops);
   b4f96:	f001 f803 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b4f9a:	f001 f8ed 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4f9e:	9005      	str	r0, [sp, #20]
   b4fa0:	482e      	ldr	r0, [pc, #184]	; (b505c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x150>)
   b4fa2:	f005 f97e 	bl	ba2a2 <_ZN15RHGenericDriver8lastRssiEv>
   b4fa6:	f89d 101f 	ldrb.w	r1, [sp, #31]
   b4faa:	9102      	str	r1, [sp, #8]
   b4fac:	f89d 101a 	ldrb.w	r1, [sp, #26]
   b4fb0:	9101      	str	r1, [sp, #4]
   b4fb2:	4603      	mov	r3, r0
   b4fb4:	492a      	ldr	r1, [pc, #168]	; (b5060 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x154>)
   b4fb6:	7820      	ldrb	r0, [r4, #0]
   b4fb8:	9a05      	ldr	r2, [sp, #20]
   b4fba:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b4fbe:	9100      	str	r1, [sp, #0]
   b4fc0:	4824      	ldr	r0, [pc, #144]	; (b5054 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x148>)
   b4fc2:	4928      	ldr	r1, [pc, #160]	; (b5064 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x158>)
   b4fc4:	f7ff f8bb 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_RPT) { if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b4fc8:	7823      	ldrb	r3, [r4, #0]
   b4fca:	2b03      	cmp	r3, #3
   b4fcc:	d10f      	bne.n	b4fee <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xe2>
   b4fce:	f7ff f8cf 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4fd2:	f7ff f995 	bl	b4300 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>
		else if (lora_state == ALERT_RPT) { if(!LoRA_Functions::instance().decipherAlertReportGateway()) return false;}
   b4fd6:	2800      	cmp	r0, #0
   b4fd8:	d0b2      	beq.n	b4f40 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (sysStatus.get_updatedFrequencyMinutes() > 0) {              							// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b4fda:	f000 ff9f 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b4fde:	f001 f98d 	bl	b62fc <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b4fe2:	b990      	cbnz	r0, b500a <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xfe>
		else Log.info("Reporting frequency unchanged");
   b4fe4:	4920      	ldr	r1, [pc, #128]	; (b5068 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x15c>)
   b4fe6:	481b      	ldr	r0, [pc, #108]	; (b5054 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x148>)
   b4fe8:	f7ff f8a9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4fec:	e026      	b.n	b503c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x130>
		else if (lora_state == JOIN_REQ) { if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b4fee:	2b01      	cmp	r3, #1
   b4ff0:	d104      	bne.n	b4ffc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xf0>
   b4ff2:	f7ff f8bd 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4ff6:	f7ff fd93 	bl	b4b20 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>
   b4ffa:	e7ec      	b.n	b4fd6 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xca>
		else if (lora_state == ALERT_RPT) { if(!LoRA_Functions::instance().decipherAlertReportGateway()) return false;}
   b4ffc:	2b05      	cmp	r3, #5
   b4ffe:	d1ec      	bne.n	b4fda <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xce>
   b5000:	f7ff f8b6 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5004:	f7ff f9dc 	bl	b43c0 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>
   b5008:	e7e5      	b.n	b4fd6 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xca>
			sysStatus.set_frequencyMinutes(sysStatus.get_updatedFrequencyMinutes());		// This was the temporary value from the particle function
   b500a:	f000 ff87 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b500e:	4604      	mov	r4, r0
   b5010:	f000 ff84 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5014:	f001 f972 	bl	b62fc <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b5018:	4601      	mov	r1, r0
   b501a:	4620      	mov	r0, r4
   b501c:	f001 f9b1 	bl	b6382 <_ZN13sysStatusData20set_frequencyMinutesEt>
			sysStatus.set_updatedFrequencyMinutes(0);
   b5020:	f000 ff7c 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5024:	2100      	movs	r1, #0
   b5026:	f001 f9b2 	bl	b638e <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
			Log.info("We are updating the publish frequency to %i minutes", sysStatus.get_frequencyMinutes());
   b502a:	f000 ff77 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b502e:	f001 f960 	bl	b62f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5032:	490e      	ldr	r1, [pc, #56]	; (b506c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x160>)
   b5034:	4602      	mov	r2, r0
   b5036:	4807      	ldr	r0, [pc, #28]	; (b5054 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x148>)
   b5038:	f7ff f881 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (LoRA_Functions::instance().respondToLoRAMessageGateway()) return true;
   b503c:	f7ff f898 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5040:	f7ff ff34 	bl	b4eac <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>
   b5044:	e77d      	b.n	b4f42 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x36>
   b5046:	bf00      	nop
   b5048:	2003d7e8 	.word	0x2003d7e8
   b504c:	2003e0e0 	.word	0x2003e0e0
   b5050:	000c1188 	.word	0x000c1188
   b5054:	2003e654 	.word	0x2003e654
   b5058:	2003d7d8 	.word	0x2003d7d8
   b505c:	2003d864 	.word	0x2003d864
   b5060:	2003d60c 	.word	0x2003d60c
   b5064:	000c11da 	.word	0x000c11da
   b5068:	000c124f 	.word	0x000c124f
   b506c:	000c121b 	.word	0x000c121b

000b5070 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b5070:	4b01      	ldr	r3, [pc, #4]	; (b5078 <_Z18outOfMemoryHandleryi+0x8>)
   b5072:	601a      	str	r2, [r3, #0]
}
   b5074:	4770      	bx	lr
   b5076:	bf00      	nop
   b5078:	2003d67c 	.word	0x2003d67c

000b507c <_Z13userSwitchISRv>:

void userSwitchISR() {
	userSwitchDectected = true;
   b507c:	4b01      	ldr	r3, [pc, #4]	; (b5084 <_Z13userSwitchISRv+0x8>)
   b507e:	2201      	movs	r2, #1
   b5080:	701a      	strb	r2, [r3, #0]
}
   b5082:	4770      	bx	lr
   b5084:	2003e3d4 	.word	0x2003e3d4

000b5088 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b5088:	b530      	push	{r4, r5, lr}
   b508a:	b085      	sub	sp, #20
   b508c:	4604      	mov	r4, r0
   b508e:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b5090:	b160      	cbz	r0, b50ac <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b5092:	6840      	ldr	r0, [r0, #4]
   b5094:	b150      	cbz	r0, b50ac <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b5096:	6885      	ldr	r5, [r0, #8]
   b5098:	b145      	cbz	r5, b50ac <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b509a:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b509e:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b50a2:	68c4      	ldr	r4, [r0, #12]
   b50a4:	ab01      	add	r3, sp, #4
   b50a6:	466a      	mov	r2, sp
   b50a8:	a902      	add	r1, sp, #8
   b50aa:	47a0      	blx	r4
    }
   b50ac:	b005      	add	sp, #20
   b50ae:	bd30      	pop	{r4, r5, pc}

000b50b0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b50b0:	b530      	push	{r4, r5, lr}
   b50b2:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b50b4:	6800      	ldr	r0, [r0, #0]
   b50b6:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b50b8:	9301      	str	r3, [sp, #4]
   b50ba:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b50be:	6883      	ldr	r3, [r0, #8]
   b50c0:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b50c4:	b90b      	cbnz	r3, b50ca <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b50c6:	f00a fd8b 	bl	bfbe0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b50ca:	68c3      	ldr	r3, [r0, #12]
   b50cc:	aa01      	add	r2, sp, #4
   b50ce:	a902      	add	r1, sp, #8
   b50d0:	4798      	blx	r3
      }
   b50d2:	b005      	add	sp, #20
   b50d4:	bd30      	pop	{r4, r5, pc}

000b50d6 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b50d6:	2a01      	cmp	r2, #1
   b50d8:	d102      	bne.n	b50e0 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b50da:	6001      	str	r1, [r0, #0]
      }
   b50dc:	2000      	movs	r0, #0
   b50de:	4770      	bx	lr
	  switch (__op)
   b50e0:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b50e2:	bf04      	itt	eq
   b50e4:	680b      	ldreq	r3, [r1, #0]
   b50e6:	6003      	streq	r3, [r0, #0]
	      break;
   b50e8:	e7f8      	b.n	b50dc <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b50ea <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b50ea:	6803      	ldr	r3, [r0, #0]
   b50ec:	6812      	ldr	r2, [r2, #0]
   b50ee:	e9d1 0100 	ldrd	r0, r1, [r1]
   b50f2:	4718      	bx	r3

000b50f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b50f4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b50f6:	2000      	movs	r0, #0
   b50f8:	f007 fab0 	bl	bc65c <spark_sync_time_pending>
   b50fc:	b128      	cbz	r0, b510a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b50fe:	f007 fa8d 	bl	bc61c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5102:	f080 0001 	eor.w	r0, r0, #1
   b5106:	b2c0      	uxtb	r0, r0
    }
   b5108:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b510a:	2001      	movs	r0, #1
   b510c:	e7fc      	b.n	b5108 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b510e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b510e:	b510      	push	{r4, lr}
      if (_M_manager)
   b5110:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5112:	4604      	mov	r4, r0
      if (_M_manager)
   b5114:	b113      	cbz	r3, b511c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5116:	2203      	movs	r2, #3
   b5118:	4601      	mov	r1, r0
   b511a:	4798      	blx	r3
    }
   b511c:	4620      	mov	r0, r4
   b511e:	bd10      	pop	{r4, pc}

000b5120 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b5120:	b510      	push	{r4, lr}
            delete callableWrapper;
   b5122:	4604      	mov	r4, r0
   b5124:	b138      	cbz	r0, b5136 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b5126:	f7ff fff2 	bl	b510e <_ZNSt14_Function_baseD1Ev>
   b512a:	4620      	mov	r0, r4
   b512c:	2110      	movs	r1, #16
        };
   b512e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b5132:	f7fe bfb4 	b.w	b409e <_ZdlPvj>
        };
   b5136:	bd10      	pop	{r4, pc}

000b5138 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 10 if the device is in test mode or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {											// Time till next scheduled event
   b5138:	b538      	push	{r3, r4, r5, lr}
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop

	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b513a:	f000 feef 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b513e:	f001 f8d8 	bl	b62f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5142:	4604      	mov	r4, r0
   	if (Time.isValid() && !testModeFlag) {
   b5144:	f00a fa14 	bl	bf570 <_ZN9TimeClass7isValidEv>
   b5148:	b1f0      	cbz	r0, b5188 <_Z21secondsUntilNextEventv+0x50>
   b514a:	4b10      	ldr	r3, [pc, #64]	; (b518c <_Z21secondsUntilNextEventv+0x54>)
   b514c:	781b      	ldrb	r3, [r3, #0]
   b514e:	b9db      	cbnz	r3, b5188 <_Z21secondsUntilNextEventv+0x50>
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b5150:	f00a fa2b 	bl	bf5aa <_ZN9TimeClass3nowEv>
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b5154:	253c      	movs	r5, #60	; 0x3c
   b5156:	4365      	muls	r5, r4
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b5158:	fbb0 f4f5 	udiv	r4, r0, r5
   b515c:	fb04 0015 	mls	r0, r4, r5, r0
   b5160:	1a2c      	subs	r4, r5, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b5162:	2c09      	cmp	r4, #9
   b5164:	d90e      	bls.n	b5184 <_Z21secondsUntilNextEventv+0x4c>
   b5166:	42ac      	cmp	r4, r5
   b5168:	bf28      	it	cs
   b516a:	462c      	movcs	r4, r5
        Log.info("Report frequency %d mins, next event in %lu seconds", sysStatus.get_frequencyMinutes(), secondsToReturn);
   b516c:	f000 fed6 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5170:	f001 f8bf 	bl	b62f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5174:	4906      	ldr	r1, [pc, #24]	; (b5190 <_Z21secondsUntilNextEventv+0x58>)
   b5176:	4602      	mov	r2, r0
   b5178:	4623      	mov	r3, r4
   b517a:	4806      	ldr	r0, [pc, #24]	; (b5194 <_Z21secondsUntilNextEventv+0x5c>)
   b517c:	f7fe ffdf 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    }
	return secondsToReturn;
}
   b5180:	4620      	mov	r0, r4
   b5182:	bd38      	pop	{r3, r4, r5, pc}
   b5184:	240a      	movs	r4, #10
   b5186:	e7f1      	b.n	b516c <_Z21secondsUntilNextEventv+0x34>
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop
   b5188:	240a      	movs	r4, #10
   b518a:	e7f9      	b.n	b5180 <_Z21secondsUntilNextEventv+0x48>
   b518c:	2003e3d3 	.word	0x2003e3d3
   b5190:	000c1290 	.word	0x000c1290
   b5194:	2003e654 	.word	0x2003e654

000b5198 <_Z22publishStateTransitionv>:
{
   b5198:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b519a:	4e1c      	ldr	r6, [pc, #112]	; (b520c <_Z22publishStateTransitionv+0x74>)
   b519c:	4c1c      	ldr	r4, [pc, #112]	; (b5210 <_Z22publishStateTransitionv+0x78>)
   b519e:	7832      	ldrb	r2, [r6, #0]
   b51a0:	4d1c      	ldr	r5, [pc, #112]	; (b5214 <_Z22publishStateTransitionv+0x7c>)
   b51a2:	2a02      	cmp	r2, #2
{
   b51a4:	b0c4      	sub	sp, #272	; 0x110
	if (state == IDLE_STATE) {
   b51a6:	d128      	bne.n	b51fa <_Z22publishStateTransitionv+0x62>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b51a8:	f00a f9e2 	bl	bf570 <_ZN9TimeClass7isValidEv>
   b51ac:	7832      	ldrb	r2, [r6, #0]
   b51ae:	782b      	ldrb	r3, [r5, #0]
   b51b0:	b958      	cbnz	r0, b51ca <_Z22publishStateTransitionv+0x32>
   b51b2:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b51b6:	9200      	str	r2, [sp, #0]
   b51b8:	4a17      	ldr	r2, [pc, #92]	; (b5218 <_Z22publishStateTransitionv+0x80>)
   b51ba:	eb04 1303 	add.w	r3, r4, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b51be:	f44f 7180 	mov.w	r1, #256	; 0x100
   b51c2:	a804      	add	r0, sp, #16
   b51c4:	f007 faf2 	bl	bc7ac <snprintf>
   b51c8:	e00f      	b.n	b51ea <_Z22publishStateTransitionv+0x52>
		else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s for %u seconds", stateNames[oldState],stateNames[state],(secondsUntilNextEvent()));	
   b51ca:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b51ce:	9303      	str	r3, [sp, #12]
   b51d0:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   b51d4:	f7ff ffb0 	bl	b5138 <_Z21secondsUntilNextEventv>
   b51d8:	9b03      	ldr	r3, [sp, #12]
   b51da:	4a10      	ldr	r2, [pc, #64]	; (b521c <_Z22publishStateTransitionv+0x84>)
   b51dc:	e9cd 4000 	strd	r4, r0, [sp]
   b51e0:	f44f 7180 	mov.w	r1, #256	; 0x100
   b51e4:	a804      	add	r0, sp, #16
   b51e6:	f007 fae1 	bl	bc7ac <snprintf>
	oldState = state;
   b51ea:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b51ec:	480c      	ldr	r0, [pc, #48]	; (b5220 <_Z22publishStateTransitionv+0x88>)
	oldState = state;
   b51ee:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b51f0:	a904      	add	r1, sp, #16
   b51f2:	f7fe ffa4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b51f6:	b044      	add	sp, #272	; 0x110
   b51f8:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b51fa:	782b      	ldrb	r3, [r5, #0]
   b51fc:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b5200:	9200      	str	r2, [sp, #0]
   b5202:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b5206:	4a07      	ldr	r2, [pc, #28]	; (b5224 <_Z22publishStateTransitionv+0x8c>)
   b5208:	e7d9      	b.n	b51be <_Z22publishStateTransitionv+0x26>
   b520a:	bf00      	nop
   b520c:	2003e3d2 	.word	0x2003e3d2
   b5210:	2003d680 	.word	0x2003d680
   b5214:	2003e3d1 	.word	0x2003e3d1
   b5218:	000c12c4 	.word	0x000c12c4
   b521c:	000c12e4 	.word	0x000c12e4
   b5220:	2003e654 	.word	0x2003e654
   b5224:	000c1301 	.word	0x000c1301

000b5228 <_Z14publishWebhookh>:
 * @details Nodes and Gateways will use the same format for this webook - data sources will change
 * 
 * 
 */

void publishWebhook(uint8_t nodeNumber) {
   b5228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b522c:	ed2d 8b02 	vpush	{d8}
   b5230:	b0db      	sub	sp, #364	; 0x16c
	char data[256];                             						// Store the date in this character array - not global
	// Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
    const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b5232:	ac12      	add	r4, sp, #72	; 0x48
   b5234:	4b6a      	ldr	r3, [pc, #424]	; (b53e0 <_Z14publishWebhookh+0x1b8>)
   b5236:	6023      	str	r3, [r4, #0]
   b5238:	4b6a      	ldr	r3, [pc, #424]	; (b53e4 <_Z14publishWebhookh+0x1bc>)
   b523a:	6063      	str	r3, [r4, #4]
   b523c:	4b6a      	ldr	r3, [pc, #424]	; (b53e8 <_Z14publishWebhookh+0x1c0>)
   b523e:	60a3      	str	r3, [r4, #8]
   b5240:	4b6a      	ldr	r3, [pc, #424]	; (b53ec <_Z14publishWebhookh+0x1c4>)
   b5242:	60e3      	str	r3, [r4, #12]
   b5244:	4b6a      	ldr	r3, [pc, #424]	; (b53f0 <_Z14publishWebhookh+0x1c8>)
   b5246:	6123      	str	r3, [r4, #16]
   b5248:	4b6a      	ldr	r3, [pc, #424]	; (b53f4 <_Z14publishWebhookh+0x1cc>)
   b524a:	6163      	str	r3, [r4, #20]
   b524c:	f04f 0800 	mov.w	r8, #0
   b5250:	4b69      	ldr	r3, [pc, #420]	; (b53f8 <_Z14publishWebhookh+0x1d0>)
   b5252:	f8c4 801c 	str.w	r8, [r4, #28]
   b5256:	61a3      	str	r3, [r4, #24]

	if (nodeNumber > 0) {												// Webhook for a node
   b5258:	4605      	mov	r5, r0
   b525a:	2800      	cmp	r0, #0
   b525c:	d06c      	beq.n	b5338 <_Z14publishWebhookh+0x110>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b525e:	f7fe ff87 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5262:	462a      	mov	r2, r5
   b5264:	4601      	mov	r1, r0
   b5266:	a80e      	add	r0, sp, #56	; 0x38
   b5268:	f7ff f956 	bl	b4518 <_ZN14LoRA_Functions12findDeviceIDEh>
   b526c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b526e:	930d      	str	r3, [sp, #52]	; 0x34
   b5270:	f000 fe96 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b5274:	f001 f851 	bl	b631a <_ZNK17currentStatusData15get_hourlyCountEv>
   b5278:	4605      	mov	r5, r0
   b527a:	f000 fe91 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b527e:	f001 f851 	bl	b6324 <_ZNK17currentStatusData14get_dailyCountEv>
   b5282:	4606      	mov	r6, r0
   b5284:	f000 fe8c 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b5288:	f000 ff99 	bl	b61be <_ZNK17currentStatusData14get_sensorTypeEv>
   b528c:	4607      	mov	r7, r0
   b528e:	f000 fe87 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b5292:	f000 fea1 	bl	b5fd8 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5296:	eeb0 8a40 	vmov.f32	s16, s0
   b529a:	eef0 8a60 	vmov.f32	s17, s1
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b529e:	f000 fe7f 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b52a2:	f000 ff78 	bl	b6196 <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b52a6:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
   b52aa:	920c      	str	r2, [sp, #48]	; 0x30
		current.get_internalTempC(), current.get_resetCount(), current.get_RSSI(), current.get_messageNumber(), Time.now());
   b52ac:	f000 fe78 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b52b0:	f000 ff6c 	bl	b618c <_ZNK17currentStatusData17get_internalTempCEv>
   b52b4:	4604      	mov	r4, r0
   b52b6:	f000 fe73 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b52ba:	f000 ff71 	bl	b61a0 <_ZNK17currentStatusData14get_resetCountEv>
   b52be:	4681      	mov	r9, r0
   b52c0:	f000 fe6e 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b52c4:	f001 f824 	bl	b6310 <_ZNK17currentStatusData8get_RSSIEv>
   b52c8:	4682      	mov	sl, r0
   b52ca:	f000 fe69 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b52ce:	f000 ff6c 	bl	b61aa <_ZNK17currentStatusData17get_messageNumberEv>
   b52d2:	4683      	mov	fp, r0
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b52d4:	f00a f969 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b52d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   b52da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b52dc:	9407      	str	r4, [sp, #28]
   b52de:	f44f 7180 	mov.w	r1, #256	; 0x100
   b52e2:	e9cd b00a 	strd	fp, r0, [sp, #40]	; 0x28
   b52e6:	9206      	str	r2, [sp, #24]
   b52e8:	e9cd 9a08 	strd	r9, sl, [sp, #32]
   b52ec:	4a43      	ldr	r2, [pc, #268]	; (b53fc <_Z14publishWebhookh+0x1d4>)
   b52ee:	9500      	str	r5, [sp, #0]
   b52f0:	ed8d 8b04 	vstr	d8, [sp, #16]
   b52f4:	e9cd 6701 	strd	r6, r7, [sp, #4]
   b52f8:	a81a      	add	r0, sp, #104	; 0x68
   b52fa:	f007 fa57 	bl	bc7ac <snprintf>
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b52fe:	a80e      	add	r0, sp, #56	; 0x38
   b5300:	f009 fda0 	bl	bee44 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Node-v1", data, PRIVATE | WITH_ACK);
   b5304:	f004 faa8 	bl	b9858 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b5308:	4b3d      	ldr	r3, [pc, #244]	; (b5400 <_Z14publishWebhookh+0x1d8>)
   b530a:	4a3e      	ldr	r2, [pc, #248]	; (b5404 <_Z14publishWebhookh+0x1dc>)
   b530c:	781b      	ldrb	r3, [r3, #0]
   b530e:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b5310:	493d      	ldr	r1, [pc, #244]	; (b5408 <_Z14publishWebhookh+0x1e0>)
   b5312:	4313      	orrs	r3, r2
   b5314:	6802      	ldr	r2, [r0, #0]
   b5316:	f88d 3000 	strb.w	r3, [sp]
   b531a:	f88d 8004 	strb.w	r8, [sp, #4]
   b531e:	6814      	ldr	r4, [r2, #0]
   b5320:	233c      	movs	r3, #60	; 0x3c
   b5322:	aa1a      	add	r2, sp, #104	; 0x68
   b5324:	47a0      	blx	r4
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_RSSI(), sysStatus.get_messageCount(), Time.now());
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
	}

	Log.info(data);
   b5326:	4839      	ldr	r0, [pc, #228]	; (b540c <_Z14publishWebhookh+0x1e4>)
   b5328:	a91a      	add	r1, sp, #104	; 0x68
   b532a:	f7fe ff08 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>



	return;
}
   b532e:	b05b      	add	sp, #364	; 0x16c
   b5330:	ecbd 8b02 	vpop	{d8}
   b5334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return spark_deviceID();
   b5338:	a80e      	add	r0, sp, #56	; 0x38
   b533a:	f007 f977 	bl	bc62c <spark_deviceID>
   b533e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b5340:	930c      	str	r3, [sp, #48]	; 0x30
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5342:	f000 fdeb 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5346:	f000 ff12 	bl	b616e <_ZNK13sysStatusData14get_sensorTypeEv>
   b534a:	4606      	mov	r6, r0
   b534c:	f000 fe28 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b5350:	f000 fe42 	bl	b5fd8 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5354:	eeb0 8a40 	vmov.f32	s16, s0
   b5358:	eef0 8a60 	vmov.f32	s17, s1
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b535c:	f000 fe20 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b5360:	f000 ff19 	bl	b6196 <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b5364:	f854 a020 	ldr.w	sl, [r4, r0, lsl #2]
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_RSSI(), sysStatus.get_messageCount(), Time.now());
   b5368:	f000 fe1a 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b536c:	f000 ff0e 	bl	b618c <_ZNK17currentStatusData17get_internalTempCEv>
   b5370:	4604      	mov	r4, r0
   b5372:	f000 fdd3 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5376:	f000 fee6 	bl	b6146 <_ZNK13sysStatusData14get_resetCountEv>
   b537a:	4607      	mov	r7, r0
   b537c:	f000 fdce 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5380:	f000 ffc1 	bl	b6306 <_ZNK13sysStatusData8get_RSSIEv>
   b5384:	4680      	mov	r8, r0
   b5386:	f000 fdc9 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b538a:	f000 fee1 	bl	b6150 <_ZNK13sysStatusData16get_messageCountEv>
   b538e:	4681      	mov	r9, r0
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b5390:	f00a f90b 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b5394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5396:	4a19      	ldr	r2, [pc, #100]	; (b53fc <_Z14publishWebhookh+0x1d4>)
   b5398:	9500      	str	r5, [sp, #0]
   b539a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b539e:	e9cd 900a 	strd	r9, r0, [sp, #40]	; 0x28
   b53a2:	e9cd a406 	strd	sl, r4, [sp, #24]
   b53a6:	e9cd 7808 	strd	r7, r8, [sp, #32]
   b53aa:	ed8d 8b04 	vstr	d8, [sp, #16]
   b53ae:	e9cd 5601 	strd	r5, r6, [sp, #4]
   b53b2:	a81a      	add	r0, sp, #104	; 0x68
   b53b4:	f007 f9fa 	bl	bc7ac <snprintf>
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b53b8:	a80e      	add	r0, sp, #56	; 0x38
   b53ba:	f009 fd43 	bl	bee44 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
   b53be:	f004 fa4b 	bl	b9858 <_ZN17PublishQueuePosix8instanceEv>
   b53c2:	4b0f      	ldr	r3, [pc, #60]	; (b5400 <_Z14publishWebhookh+0x1d8>)
   b53c4:	4a0f      	ldr	r2, [pc, #60]	; (b5404 <_Z14publishWebhookh+0x1dc>)
   b53c6:	781b      	ldrb	r3, [r3, #0]
   b53c8:	7812      	ldrb	r2, [r2, #0]
   b53ca:	4911      	ldr	r1, [pc, #68]	; (b5410 <_Z14publishWebhookh+0x1e8>)
   b53cc:	4313      	orrs	r3, r2
   b53ce:	6802      	ldr	r2, [r0, #0]
   b53d0:	f88d 3000 	strb.w	r3, [sp]
   b53d4:	f88d 5004 	strb.w	r5, [sp, #4]
   b53d8:	6814      	ldr	r4, [r2, #0]
   b53da:	233c      	movs	r3, #60	; 0x3c
   b53dc:	aa1a      	add	r2, sp, #104	; 0x68
   b53de:	e7a1      	b.n	b5324 <_Z14publishWebhookh+0xfc>
   b53e0:	000c130f 	.word	0x000c130f
   b53e4:	000c1317 	.word	0x000c1317
   b53e8:	000c131b 	.word	0x000c131b
   b53ec:	000c1324 	.word	0x000c1324
   b53f0:	000c132c 	.word	0x000c132c
   b53f4:	000c1338 	.word	0x000c1338
   b53f8:	000c133e 	.word	0x000c133e
   b53fc:	000c134a 	.word	0x000c134a
   b5400:	2003e294 	.word	0x2003e294
   b5404:	2003e295 	.word	0x2003e295
   b5408:	000c13e1 	.word	0x000c13e1
   b540c:	2003e654 	.word	0x2003e654
   b5410:	000c13f6 	.word	0x000c13f6

000b5414 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b5414:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5416:	2300      	movs	r3, #0
   b5418:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b541a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b541c:	4604      	mov	r4, r0
   b541e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5420:	b12b      	cbz	r3, b542e <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5422:	2202      	movs	r2, #2
   b5424:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5426:	68eb      	ldr	r3, [r5, #12]
   b5428:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b542a:	68ab      	ldr	r3, [r5, #8]
   b542c:	60a3      	str	r3, [r4, #8]
    }
   b542e:	4620      	mov	r0, r4
   b5430:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5434 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b5434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5438:	b095      	sub	sp, #84	; 0x54
   b543a:	4605      	mov	r5, r0
        };
   b543c:	991c      	ldr	r1, [sp, #112]	; 0x70
   b543e:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b5440:	4690      	mov	r8, r2
   b5442:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b5444:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b5446:	f7ff ffe5 	bl	b5414 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b544a:	a904      	add	r1, sp, #16
   b544c:	a808      	add	r0, sp, #32
   b544e:	f7ff ffe1 	bl	b5414 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b5452:	a908      	add	r1, sp, #32
   b5454:	4630      	mov	r0, r6
   b5456:	f7ff ffdd 	bl	b5414 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b545a:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b545e:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b5460:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5464:	f7fe fe17 	bl	b4096 <_Znwj>
   b5468:	4604      	mov	r4, r0
   b546a:	b1a0      	cbz	r0, b5496 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b546c:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5470:	ab01      	add	r3, sp, #4
   b5472:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5476:	e894 0003 	ldmia.w	r4, {r0, r1}
   b547a:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b547e:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b5484:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5486:	60a3      	str	r3, [r4, #8]
   b5488:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b548c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b548e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b5492:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b5494:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b5496:	4b24      	ldr	r3, [pc, #144]	; (b5528 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b5498:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b549a:	4b24      	ldr	r3, [pc, #144]	; (b552c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b549c:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b549e:	2200      	movs	r2, #0
   b54a0:	2300      	movs	r3, #0
   b54a2:	f04f 0900 	mov.w	r9, #0
   b54a6:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b54aa:	4b21      	ldr	r3, [pc, #132]	; (b5530 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b54ac:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b54b0:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b54b2:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b54b4:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b54b8:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b54bc:	f7fe fdeb 	bl	b4096 <_Znwj>
   b54c0:	4604      	mov	r4, r0
   b54c2:	b1d8      	cbz	r0, b54fc <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b54c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b54c6:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b54ca:	b133      	cbz	r3, b54da <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b54cc:	2202      	movs	r2, #2
   b54ce:	a910      	add	r1, sp, #64	; 0x40
   b54d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b54d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b54d4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b54d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b54d8:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b54da:	4b16      	ldr	r3, [pc, #88]	; (b5534 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b54dc:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b54de:	4a16      	ldr	r2, [pc, #88]	; (b5538 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b54e0:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b54e2:	ab01      	add	r3, sp, #4
   b54e4:	4640      	mov	r0, r8
   b54e6:	4639      	mov	r1, r7
   b54e8:	f007 f816 	bl	bc518 <system_subscribe_event>
        if (r) {
   b54ec:	b1b0      	cbz	r0, b551c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b54ee:	4620      	mov	r0, r4
   b54f0:	f7ff fe0d 	bl	b510e <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b54f4:	2110      	movs	r1, #16
   b54f6:	4620      	mov	r0, r4
   b54f8:	f7fe fdd1 	bl	b409e <_ZdlPvj>
   b54fc:	a810      	add	r0, sp, #64	; 0x40
   b54fe:	f7ff fe06 	bl	b510e <_ZNSt14_Function_baseD1Ev>
   b5502:	4630      	mov	r0, r6
   b5504:	f7ff fe03 	bl	b510e <_ZNSt14_Function_baseD1Ev>
   b5508:	a808      	add	r0, sp, #32
   b550a:	f7ff fe00 	bl	b510e <_ZNSt14_Function_baseD1Ev>
   b550e:	a804      	add	r0, sp, #16
   b5510:	f7ff fdfd 	bl	b510e <_ZNSt14_Function_baseD1Ev>
    }
   b5514:	4628      	mov	r0, r5
   b5516:	b015      	add	sp, #84	; 0x54
   b5518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b551c:	9b02      	ldr	r3, [sp, #8]
   b551e:	60ab      	str	r3, [r5, #8]
   b5520:	e9c5 8700 	strd	r8, r7, [r5]
   b5524:	e7ea      	b.n	b54fc <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b5526:	bf00      	nop
   b5528:	000b50b1 	.word	0x000b50b1
   b552c:	000b553d 	.word	0x000b553d
   b5530:	000c0002 	.word	0x000c0002
   b5534:	000b5121 	.word	0x000b5121
   b5538:	000b5089 	.word	0x000b5089

000b553c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b553c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b553e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5540:	4604      	mov	r4, r0
	switch (__op)
   b5542:	d104      	bne.n	b554e <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b5544:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5546:	6003      	str	r3, [r0, #0]
      }
   b5548:	2000      	movs	r0, #0
   b554a:	b003      	add	sp, #12
   b554c:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b554e:	2a02      	cmp	r2, #2
   b5550:	d00c      	beq.n	b556c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b5552:	2a03      	cmp	r2, #3
   b5554:	d1f8      	bne.n	b5548 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5556:	6804      	ldr	r4, [r0, #0]
   b5558:	2c00      	cmp	r4, #0
   b555a:	d0f5      	beq.n	b5548 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b555c:	4620      	mov	r0, r4
   b555e:	f7ff fdd6 	bl	b510e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5562:	2110      	movs	r1, #16
   b5564:	4620      	mov	r0, r4
   b5566:	f7fe fd9a 	bl	b409e <_ZdlPvj>
   b556a:	e7ed      	b.n	b5548 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b556c:	6809      	ldr	r1, [r1, #0]
   b556e:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5570:	2010      	movs	r0, #16
   b5572:	f7fe fd90 	bl	b4096 <_Znwj>
   b5576:	4605      	mov	r5, r0
   b5578:	b110      	cbz	r0, b5580 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b557a:	9901      	ldr	r1, [sp, #4]
   b557c:	f7ff ff4a 	bl	b5414 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b5580:	6025      	str	r5, [r4, #0]
	}
   b5582:	e7e1      	b.n	b5548 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b5584 <_GLOBAL__sub_I___appProductVersion>:
        val_(val) {
   b5584:	4b16      	ldr	r3, [pc, #88]	; (b55e0 <_GLOBAL__sub_I___appProductVersion+0x5c>)
}
   b5586:	b510      	push	{r4, lr}
   b5588:	2401      	movs	r4, #1
   b558a:	701c      	strb	r4, [r3, #0]
   b558c:	4b15      	ldr	r3, [pc, #84]	; (b55e4 <_GLOBAL__sub_I___appProductVersion+0x60>)
   b558e:	2208      	movs	r2, #8
   b5590:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b5592:	f00a f9b3 	bl	bf8fc <spark_protocol_instance>
   b5596:	2300      	movs	r3, #0
   b5598:	461a      	mov	r2, r3
   b559a:	4619      	mov	r1, r3
   b559c:	f00a f9be 	bl	bf91c <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b55a0:	f00a f9ac 	bl	bf8fc <spark_protocol_instance>
   b55a4:	2300      	movs	r3, #0
   b55a6:	461a      	mov	r2, r3
   b55a8:	210d      	movs	r1, #13
   b55aa:	f00a f9af 	bl	bf90c <spark_protocol_set_product_id>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b55ae:	4b0e      	ldr	r3, [pc, #56]	; (b55e8 <_GLOBAL__sub_I___appProductVersion+0x64>)
   b55b0:	1d1a      	adds	r2, r3, #4
   b55b2:	601a      	str	r2, [r3, #0]
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   b55b4:	4a0d      	ldr	r2, [pc, #52]	; (b55ec <_GLOBAL__sub_I___appProductVersion+0x68>)
   b55b6:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b55b8:	2200      	movs	r2, #0
   b55ba:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b55be:	611a      	str	r2, [r3, #16]
   b55c0:	751c      	strb	r4, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b55c2:	f00a fa7b 	bl	bfabc <_Z19__fetch_global_Wirev>
   b55c6:	2269      	movs	r2, #105	; 0x69
   b55c8:	4601      	mov	r1, r0
   b55ca:	4809      	ldr	r0, [pc, #36]	; (b55f0 <_GLOBAL__sub_I___appProductVersion+0x6c>)
   b55cc:	f001 fcd8 	bl	b6f80 <_ZN6AB1805C1ER7TwoWireh>
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b55d0:	4808      	ldr	r0, [pc, #32]	; (b55f4 <_GLOBAL__sub_I___appProductVersion+0x70>)
   b55d2:	2306      	movs	r3, #6
   b55d4:	f840 3b04 	str.w	r3, [r0], #4
}
   b55d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b55dc:	f003 bbf4 	b.w	b8dc8 <_ZN22LocalTimePosixTimezoneC1Ev>
   b55e0:	2003e294 	.word	0x2003e294
   b55e4:	2003e295 	.word	0x2003e295
   b55e8:	2003e2c8 	.word	0x2003e2c8
   b55ec:	00030010 	.word	0x00030010
   b55f0:	2003e2a8 	.word	0x2003e2a8
   b55f4:	2003e2e0 	.word	0x2003e2e0

000b55f8 <setup>:
{
   b55f8:	b5f0      	push	{r4, r5, r6, r7, lr}
        return hal_timer_millis(nullptr);
   b55fa:	2000      	movs	r0, #0
   b55fc:	b09d      	sub	sp, #116	; 0x74
   b55fe:	f006 fd29 	bl	bc054 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5602:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b5606:	4604      	mov	r4, r0
   b5608:	2000      	movs	r0, #0
   b560a:	f006 fd23 	bl	bc054 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b560e:	1b00      	subs	r0, r0, r4
   b5610:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5614:	42a8      	cmp	r0, r5
   b5616:	f171 0300 	sbcs.w	r3, r1, #0
   b561a:	d207      	bcs.n	b562c <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b561c:	f00a f8ac 	bl	bf778 <_Z16_fetch_usbserialv>
   b5620:	f00a f89f 	bl	bf762 <_ZN9USBSerial11isConnectedEv>
   b5624:	b910      	cbnz	r0, b562c <setup+0x34>
            spark_process();
   b5626:	f006 ffe9 	bl	bc5fc <spark_process>
        while (_while() && !_condition()) {
   b562a:	e7ed      	b.n	b5608 <setup+0x10>
   b562c:	f00a f8a4 	bl	bf778 <_Z16_fetch_usbserialv>
   b5630:	f00a f897 	bl	bf762 <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b5634:	f001 fada 	bl	b6bec <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b5638:	f001 fb0c 	bl	b6c54 <_Z18initializePowerCfgv>
		current.setup();
   b563c:	f000 fcb0 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b5640:	6803      	ldr	r3, [r0, #0]
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b5642:	4e5d      	ldr	r6, [pc, #372]	; (b57b8 <setup+0x1c0>)
   b5644:	681b      	ldr	r3, [r3, #0]
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b5646:	4f5d      	ldr	r7, [pc, #372]	; (b57bc <setup+0x1c4>)
   b5648:	4798      	blx	r3
  		sysStatus.setup();
   b564a:	f000 fc67 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b564e:	6803      	ldr	r3, [r0, #0]
   b5650:	681b      	ldr	r3, [r3, #0]
   b5652:	4798      	blx	r3
		nodeID.setup();
   b5654:	f000 fd22 	bl	b609c <_ZN10nodeIDData8instanceEv>
   b5658:	6803      	ldr	r3, [r0, #0]
   b565a:	681b      	ldr	r3, [r3, #0]
   b565c:	4798      	blx	r3
	sysStatus.checkSystemValues();						// Make sure system values are in bounds for normal operation
   b565e:	f000 fc5d 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5662:	f000 ffd4 	bl	b660e <_ZN13sysStatusData17checkSystemValuesEv>
    Particle_Functions::instance().setup();         // Sets up all the Particle functions and variables defined in particle_fn.h
   b5666:	f001 f8e9 	bl	b683c <_ZN18Particle_Functions8instanceEv>
   b566a:	f001 f8f9 	bl	b6860 <_ZN18Particle_Functions5setupEv>
   b566e:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b5670:	2101      	movs	r1, #1
   b5672:	4630      	mov	r0, r6
   b5674:	8173      	strh	r3, [r6, #10]
   b5676:	f002 f97f 	bl	b7978 <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b567a:	217c      	movs	r1, #124	; 0x7c
   b567c:	4630      	mov	r0, r6
   b567e:	f001 fd7d 	bl	b717c <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5682:	4b4f      	ldr	r3, [pc, #316]	; (b57c0 <setup+0x1c8>)
   b5684:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b5686:	4b4f      	ldr	r3, [pc, #316]	; (b57c4 <setup+0x1cc>)
   b5688:	9309      	str	r3, [sp, #36]	; 0x24
	System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b568a:	ad06      	add	r5, sp, #24
	    _M_manager = &_My_handler::_M_manager;
   b568c:	4b4e      	ldr	r3, [pc, #312]	; (b57c8 <setup+0x1d0>)
   b568e:	9308      	str	r3, [sp, #32]
   b5690:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b5694:	2300      	movs	r3, #0
   b5696:	a802      	add	r0, sp, #8
   b5698:	9500      	str	r5, [sp, #0]
   b569a:	f7ff fecb 	bl	b5434 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b569e:	4628      	mov	r0, r5
   b56a0:	f7ff fd35 	bl	b510e <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b56a4:	f004 f8d8 	bl	b9858 <_ZN17PublishQueuePosix8instanceEv>
   b56a8:	f004 fadc 	bl	b9c64 <_ZN17PublishQueuePosix5setupEv>
	LoRA_Functions::instance().setup(true);			// Start the LoRA radio (true for Gateway and false for Node)
   b56ac:	f7fe fd60 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b56b0:	2101      	movs	r1, #1
   b56b2:	f7fe fda9 	bl	b4208 <_ZN14LoRA_Functions5setupEb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b56b6:	f003 fd67 	bl	b9188 <_ZN9LocalTime8instanceEv>
   b56ba:	4944      	ldr	r1, [pc, #272]	; (b57cc <setup+0x1d4>)
   b56bc:	4604      	mov	r4, r0
   b56be:	4628      	mov	r0, r5
   b56c0:	f003 fc34 	bl	b8f2c <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b56c4:	a907      	add	r1, sp, #28
   b56c6:	f104 0008 	add.w	r0, r4, #8
   b56ca:	f009 fc42 	bl	bef52 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b56ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b56d0:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b56d2:	a90d      	add	r1, sp, #52	; 0x34
   b56d4:	f104 0020 	add.w	r0, r4, #32
   b56d8:	f009 fc3b 	bl	bef52 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b56dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b56de:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b56e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b56e2:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b56e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b56e6:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b56e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b56ea:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b56ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b56ee:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b56f0:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   b56f4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b56f8:	4628      	mov	r0, r5
   b56fa:	f003 f9d3 	bl	b8aa4 <_ZN22LocalTimePosixTimezoneD1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b56fe:	f009 ff54 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b5702:	17c3      	asrs	r3, r0, #31
   b5704:	e9c7 0318 	strd	r0, r3, [r7, #96]	; 0x60
	conv.withCurrentTime().convert();  				        // Convert to local time for use later
   b5708:	4638      	mov	r0, r7
   b570a:	f003 fdb5 	bl	b9278 <_ZN16LocalTimeConvert7convertEv>
	if (Time.isValid()) {
   b570e:	f009 ff2f 	bl	bf570 <_ZN9TimeClass7isValidEv>
   b5712:	4c2f      	ldr	r4, [pc, #188]	; (b57d0 <setup+0x1d8>)
   b5714:	2800      	cmp	r0, #0
   b5716:	d043      	beq.n	b57a0 <setup+0x1a8>
		Log.info("LocalTime initialized, time is %s and RTC %s set", conv.format("%I:%M:%S%p").c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b5718:	4639      	mov	r1, r7
   b571a:	4a2e      	ldr	r2, [pc, #184]	; (b57d4 <setup+0x1dc>)
   b571c:	4628      	mov	r0, r5
   b571e:	f003 fc95 	bl	b904c <_ZN16LocalTimeConvert6formatEPKc>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   b5722:	2301      	movs	r3, #1
   b5724:	461a      	mov	r2, r3
   b5726:	2110      	movs	r1, #16
   b5728:	4630      	mov	r0, r6
   b572a:	9f06      	ldr	r7, [sp, #24]
   b572c:	f001 fda7 	bl	b727e <_ZN6AB180510isBitClearEhhb>
   b5730:	4929      	ldr	r1, [pc, #164]	; (b57d8 <setup+0x1e0>)
   b5732:	4b2a      	ldr	r3, [pc, #168]	; (b57dc <setup+0x1e4>)
   b5734:	463a      	mov	r2, r7
   b5736:	2800      	cmp	r0, #0
   b5738:	bf18      	it	ne
   b573a:	460b      	movne	r3, r1
   b573c:	4828      	ldr	r0, [pc, #160]	; (b57e0 <setup+0x1e8>)
   b573e:	4929      	ldr	r1, [pc, #164]	; (b57e4 <setup+0x1ec>)
   b5740:	f7fe fcfd 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5744:	4628      	mov	r0, r5
   b5746:	f009 fb7d 	bl	bee44 <_ZN6StringD1Ev>
	if (!digitalRead(BUTTON_PIN)) {
   b574a:	4b27      	ldr	r3, [pc, #156]	; (b57e8 <setup+0x1f0>)
   b574c:	881e      	ldrh	r6, [r3, #0]
   b574e:	4630      	mov	r0, r6
   b5750:	f00a f954 	bl	bf9fc <digitalRead>
   b5754:	4605      	mov	r5, r0
   b5756:	bb50      	cbnz	r0, b57ae <setup+0x1b6>
		Log.info("User button pressed, test mode");
   b5758:	4924      	ldr	r1, [pc, #144]	; (b57ec <setup+0x1f4>)
   b575a:	4821      	ldr	r0, [pc, #132]	; (b57e0 <setup+0x1e8>)
   b575c:	f7fe fcef 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		testModeFlag = true;
   b5760:	4b23      	ldr	r3, [pc, #140]	; (b57f0 <setup+0x1f8>)
   b5762:	2101      	movs	r1, #1
   b5764:	7019      	strb	r1, [r3, #0]
		digitalWrite(BLUE_LED,HIGH);
   b5766:	4b23      	ldr	r3, [pc, #140]	; (b57f4 <setup+0x1fc>)
   b5768:	881f      	ldrh	r7, [r3, #0]
   b576a:	4638      	mov	r0, r7
   b576c:	f00a f92d 	bl	bf9ca <digitalWrite>
		delay(2000);
   b5770:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5774:	f007 f872 	bl	bc85c <delay>
		digitalWrite(BLUE_LED,LOW);
   b5778:	4629      	mov	r1, r5
   b577a:	4638      	mov	r0, r7
   b577c:	f00a f925 	bl	bf9ca <digitalWrite>
		state = LoRA_STATE;
   b5780:	2304      	movs	r3, #4
   b5782:	7023      	strb	r3, [r4, #0]
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b5784:	2200      	movs	r2, #0
   b5786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b578a:	491b      	ldr	r1, [pc, #108]	; (b57f8 <setup+0x200>)
   b578c:	9200      	str	r2, [sp, #0]
   b578e:	4630      	mov	r0, r6
   b5790:	f007 fde4 	bl	bd35c <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b5794:	7823      	ldrb	r3, [r4, #0]
   b5796:	b90b      	cbnz	r3, b579c <setup+0x1a4>
   b5798:	2302      	movs	r3, #2
   b579a:	7023      	strb	r3, [r4, #0]
}
   b579c:	b01d      	add	sp, #116	; 0x74
   b579e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("LocalTime not initialized so will need to Connect to Particle");
   b57a0:	4916      	ldr	r1, [pc, #88]	; (b57fc <setup+0x204>)
   b57a2:	480f      	ldr	r0, [pc, #60]	; (b57e0 <setup+0x1e8>)
   b57a4:	f7fe fccb 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		state = CONNECTING_STATE;
   b57a8:	2305      	movs	r3, #5
   b57aa:	7023      	strb	r3, [r4, #0]
   b57ac:	e7cd      	b.n	b574a <setup+0x152>
	else Log.info("No user button push detechted");
   b57ae:	4914      	ldr	r1, [pc, #80]	; (b5800 <setup+0x208>)
   b57b0:	480b      	ldr	r0, [pc, #44]	; (b57e0 <setup+0x1e8>)
   b57b2:	f7fe fcc4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b57b6:	e7e5      	b.n	b5784 <setup+0x18c>
   b57b8:	2003e2a8 	.word	0x2003e2a8
   b57bc:	2003e2e0 	.word	0x2003e2e0
   b57c0:	000b5071 	.word	0x000b5071
   b57c4:	000b50eb 	.word	0x000b50eb
   b57c8:	000b50d7 	.word	0x000b50d7
   b57cc:	000c1418 	.word	0x000c1418
   b57d0:	2003e3d2 	.word	0x2003e3d2
   b57d4:	000c143f 	.word	0x000c143f
   b57d8:	000c140e 	.word	0x000c140e
   b57dc:	000c1411 	.word	0x000c1411
   b57e0:	2003e654 	.word	0x2003e654
   b57e4:	000c144a 	.word	0x000c144a
   b57e8:	000c18be 	.word	0x000c18be
   b57ec:	000c14b9 	.word	0x000c14b9
   b57f0:	2003e3d3 	.word	0x2003e3d3
   b57f4:	000c18bc 	.word	0x000c18bc
   b57f8:	000b507d 	.word	0x000b507d
   b57fc:	000c147b 	.word	0x000c147b
   b5800:	000c14d8 	.word	0x000c14d8

000b5804 <loop>:
void loop() {
   b5804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (state) {
   b5808:	4d7f      	ldr	r5, [pc, #508]	; (b5a08 <loop+0x204>)
   b580a:	782b      	ldrb	r3, [r5, #0]
   b580c:	3b01      	subs	r3, #1
void loop() {
   b580e:	b090      	sub	sp, #64	; 0x40
   b5810:	2b06      	cmp	r3, #6
   b5812:	d817      	bhi.n	b5844 <loop+0x40>
   b5814:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5818:	0007028c 	.word	0x0007028c
   b581c:	01100037 	.word	0x01100037
   b5820:	024b01d5 	.word	0x024b01d5
   b5824:	01b7      	.short	0x01b7
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5826:	4b79      	ldr	r3, [pc, #484]	; (b5a0c <loop+0x208>)
   b5828:	781b      	ldrb	r3, [r3, #0]
   b582a:	2b02      	cmp	r3, #2
   b582c:	d001      	beq.n	b5832 <loop+0x2e>
   b582e:	f7ff fcb3 	bl	b5198 <_Z22publishStateTransitionv>
			if (nextEventTime) {
   b5832:	4b77      	ldr	r3, [pc, #476]	; (b5a10 <loop+0x20c>)
   b5834:	781a      	ldrb	r2, [r3, #0]
   b5836:	b11a      	cbz	r2, b5840 <loop+0x3c>
				nextEventTime = false;
   b5838:	2200      	movs	r2, #0
   b583a:	701a      	strb	r2, [r3, #0]
			state = LoRA_STATE;
   b583c:	2304      	movs	r3, #4
   b583e:	e000      	b.n	b5842 <loop+0x3e>
			else state = SLEEPING_STATE;
   b5840:	2303      	movs	r3, #3
   b5842:	702b      	strb	r3, [r5, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b5844:	4873      	ldr	r0, [pc, #460]	; (b5a14 <loop+0x210>)
   b5846:	f002 f845 	bl	b78d4 <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   b584a:	f004 f805 	bl	b9858 <_ZN17PublishQueuePosix8instanceEv>
   b584e:	f003 fef5 	bl	b963c <_ZN17PublishQueuePosix4loopEv>
	current.loop();
   b5852:	f000 fba5 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b5856:	f000 fbb3 	bl	b5fc0 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b585a:	f000 fb5f 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b585e:	f000 fb78 	bl	b5f52 <_ZN13sysStatusData4loopEv>
	nodeID.loop();
   b5862:	f000 fc1b 	bl	b609c <_ZN10nodeIDData8instanceEv>
   b5866:	f000 fc36 	bl	b60d6 <_ZN10nodeIDData4loopEv>
	LoRA_Functions::instance().loop();				// Check to see if Node connections are healthy
   b586a:	f7fe fc81 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b586e:	f7fe fc91 	bl	b4194 <_ZN14LoRA_Functions4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b5872:	4b69      	ldr	r3, [pc, #420]	; (b5a18 <loop+0x214>)
   b5874:	681b      	ldr	r3, [r3, #0]
   b5876:	2b00      	cmp	r3, #0
   b5878:	f2c0 828e 	blt.w	b5d98 <loop+0x594>
}
   b587c:	b010      	add	sp, #64	; 0x40
   b587e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		System.reset();
   b5882:	f009 bc9e 	b.w	bf1c2 <_ZN11SystemClass5resetEv>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5886:	4b61      	ldr	r3, [pc, #388]	; (b5a0c <loop+0x208>)
   b5888:	781b      	ldrb	r3, [r3, #0]
   b588a:	2b03      	cmp	r3, #3
   b588c:	d001      	beq.n	b5892 <loop+0x8e>
   b588e:	f7ff fc83 	bl	b5198 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b5892:	2100      	movs	r1, #0
   b5894:	485f      	ldr	r0, [pc, #380]	; (b5a14 <loop+0x210>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b5896:	4c61      	ldr	r4, [pc, #388]	; (b5a1c <loop+0x218>)
   b5898:	f001 fc70 	bl	b717c <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent();  		   		   	   // Time till next event
   b589c:	f7ff fc4c 	bl	b5138 <_Z21secondsUntilNextEventv>
   b58a0:	4607      	mov	r7, r0
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.timeStr(Time.now()+wakeInSeconds).c_str(),System.freeMemory());
   b58a2:	f009 fe82 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b58a6:	19c2      	adds	r2, r0, r7
   b58a8:	17d3      	asrs	r3, r2, #31
   b58aa:	a808      	add	r0, sp, #32
   b58ac:	f009 fd78 	bl	bf3a0 <_ZN9TimeClass7timeStrEx>
   b58b0:	9b08      	ldr	r3, [sp, #32]
   b58b2:	9302      	str	r3, [sp, #8]
   b58b4:	f009 fce8 	bl	bf288 <_ZN11SystemClass10freeMemoryEv>
   b58b8:	9b02      	ldr	r3, [sp, #8]
   b58ba:	4959      	ldr	r1, [pc, #356]	; (b5a20 <loop+0x21c>)
   b58bc:	9000      	str	r0, [sp, #0]
   b58be:	463a      	mov	r2, r7
   b58c0:	4858      	ldr	r0, [pc, #352]	; (b5a24 <loop+0x220>)
   b58c2:	f7fe fc3c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b58c6:	a808      	add	r0, sp, #32
   b58c8:	f009 fabc 	bl	bee44 <_ZN6StringD1Ev>
			delay(2000);									// Make sure message gets out
   b58cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b58d0:	f006 ffc4 	bl	bc85c <delay>
   b58d4:	7d23      	ldrb	r3, [r4, #20]
   b58d6:	2b00      	cmp	r3, #0
   b58d8:	d050      	beq.n	b597c <loop+0x178>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b58da:	2302      	movs	r3, #2
   b58dc:	7223      	strb	r3, [r4, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b58de:	4b52      	ldr	r3, [pc, #328]	; (b5a28 <loop+0x224>)
   b58e0:	f8b3 8000 	ldrh.w	r8, [r3]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b58e4:	6823      	ldr	r3, [r4, #0]
   b58e6:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b58e8:	b1f3      	cbz	r3, b5928 <loop+0x124>
            if (start->type == type) {
   b58ea:	889a      	ldrh	r2, [r3, #4]
   b58ec:	2a01      	cmp	r2, #1
   b58ee:	d006      	beq.n	b58fe <loop+0xfa>
            start = start->next;
   b58f0:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b58f2:	e7f9      	b.n	b58e8 <loop+0xe4>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b58f4:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b58f6:	b1bb      	cbz	r3, b5928 <loop+0x124>
            if (start->type == type) {
   b58f8:	889a      	ldrh	r2, [r3, #4]
   b58fa:	2a01      	cmp	r2, #1
   b58fc:	d1fa      	bne.n	b58f4 <loop+0xf0>
                if (gpioWakeup->pin == pin) {
   b58fe:	899a      	ldrh	r2, [r3, #12]
   b5900:	4542      	cmp	r2, r8
   b5902:	d1f7      	bne.n	b58f4 <loop+0xf0>
                    gpioWakeup->mode = mode;
   b5904:	2200      	movs	r2, #0
   b5906:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b5908:	7d23      	ldrb	r3, [r4, #20]
   b590a:	2b00      	cmp	r3, #0
   b590c:	d036      	beq.n	b597c <loop+0x178>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b590e:	6823      	ldr	r3, [r4, #0]
				.duration(wakeInSeconds * 1000L);
   b5910:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b5914:	68db      	ldr	r3, [r3, #12]
   b5916:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b591a:	b1db      	cbz	r3, b5954 <loop+0x150>
            if (start->type == type) {
   b591c:	889a      	ldrh	r2, [r3, #4]
   b591e:	2a04      	cmp	r2, #4
   b5920:	f000 8235 	beq.w	b5d8e <loop+0x58a>
            start = start->next;
   b5924:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5926:	e7f8      	b.n	b591a <loop+0x116>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b5928:	4940      	ldr	r1, [pc, #256]	; (b5a2c <loop+0x228>)
   b592a:	2010      	movs	r0, #16
   b592c:	f00a f94e 	bl	bfbcc <_ZnwjRKSt9nothrow_t>
   b5930:	4606      	mov	r6, r0
   b5932:	2800      	cmp	r0, #0
   b5934:	f000 822e 	beq.w	b5d94 <loop+0x590>
   b5938:	2210      	movs	r2, #16
   b593a:	2100      	movs	r1, #0
   b593c:	f00a fe82 	bl	c0644 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b5940:	4b3b      	ldr	r3, [pc, #236]	; (b5a30 <loop+0x22c>)
   b5942:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b5944:	2301      	movs	r3, #1
   b5946:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5948:	6923      	ldr	r3, [r4, #16]
   b594a:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b594c:	f8a6 800c 	strh.w	r8, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5950:	6126      	str	r6, [r4, #16]
   b5952:	e7d9      	b.n	b5908 <loop+0x104>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b5954:	4935      	ldr	r1, [pc, #212]	; (b5a2c <loop+0x228>)
   b5956:	2010      	movs	r0, #16
   b5958:	f00a f938 	bl	bfbcc <_ZnwjRKSt9nothrow_t>
   b595c:	4606      	mov	r6, r0
   b595e:	2800      	cmp	r0, #0
   b5960:	f000 8218 	beq.w	b5d94 <loop+0x590>
   b5964:	2210      	movs	r2, #16
   b5966:	2100      	movs	r1, #0
   b5968:	f00a fe6c 	bl	c0644 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b596c:	4b30      	ldr	r3, [pc, #192]	; (b5a30 <loop+0x22c>)
   b596e:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b5970:	2304      	movs	r3, #4
   b5972:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5974:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5976:	6126      	str	r6, [r4, #16]
            wakeupSource->ms = ms;
   b5978:	e9c6 3802 	strd	r3, r8, [r6, #8]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b597c:	4927      	ldr	r1, [pc, #156]	; (b5a1c <loop+0x218>)
   b597e:	a805      	add	r0, sp, #20
   b5980:	f009 fc22 	bl	bf1c8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b5984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5988:	4822      	ldr	r0, [pc, #136]	; (b5a14 <loop+0x210>)
   b598a:	f001 fbf7 	bl	b717c <_ZN6AB18056setWDTEi>
        return hal_timer_millis(nullptr);
   b598e:	2000      	movs	r0, #0
   b5990:	f006 fb60 	bl	bc054 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5994:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b5998:	4604      	mov	r4, r0
   b599a:	2000      	movs	r0, #0
   b599c:	f006 fb5a 	bl	bc054 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b59a0:	1b00      	subs	r0, r0, r4
   b59a2:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b59a6:	42b0      	cmp	r0, r6
   b59a8:	f171 0300 	sbcs.w	r3, r1, #0
   b59ac:	d207      	bcs.n	b59be <loop+0x1ba>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b59ae:	f009 fee3 	bl	bf778 <_Z16_fetch_usbserialv>
   b59b2:	f009 fed6 	bl	bf762 <_ZN9USBSerial11isConnectedEv>
   b59b6:	b910      	cbnz	r0, b59be <loop+0x1ba>
            spark_process();
   b59b8:	f006 fe20 	bl	bc5fc <spark_process>
        while (_while() && !_condition()) {
   b59bc:	e7ed      	b.n	b599a <loop+0x196>
   b59be:	f009 fedb 	bl	bf778 <_Z16_fetch_usbserialv>
   b59c2:	f009 fece 	bl	bf762 <_ZN9USBSerial11isConnectedEv>
			state = IDLE_STATE;
   b59c6:	2302      	movs	r3, #2
   b59c8:	702b      	strb	r3, [r5, #0]
			nextEventTime = true;
   b59ca:	4b11      	ldr	r3, [pc, #68]	; (b5a10 <loop+0x20c>)
   b59cc:	2201      	movs	r2, #1
   b59ce:	701a      	strb	r2, [r3, #0]
			Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b59d0:	f009 fdeb 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b59d4:	19c2      	adds	r2, r0, r7
   b59d6:	17d3      	asrs	r3, r2, #31
   b59d8:	a808      	add	r0, sp, #32
   b59da:	f009 fce1 	bl	bf3a0 <_ZN9TimeClass7timeStrEx>
   b59de:	9a08      	ldr	r2, [sp, #32]
   b59e0:	9202      	str	r2, [sp, #8]
   b59e2:	f009 fc51 	bl	bf288 <_ZN11SystemClass10freeMemoryEv>
   b59e6:	9a02      	ldr	r2, [sp, #8]
   b59e8:	4912      	ldr	r1, [pc, #72]	; (b5a34 <loop+0x230>)
   b59ea:	4603      	mov	r3, r0
   b59ec:	480d      	ldr	r0, [pc, #52]	; (b5a24 <loop+0x220>)
   b59ee:	f7fe fba6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b59f2:	a808      	add	r0, sp, #32
   b59f4:	f009 fa26 	bl	bee44 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b59f8:	9805      	ldr	r0, [sp, #20]
   b59fa:	2800      	cmp	r0, #0
   b59fc:	f43f af22 	beq.w	b5844 <loop+0x40>
            free(wakeupSource_);
   b5a00:	f006 feb4 	bl	bc76c <free>
		} break;
   b5a04:	e71e      	b.n	b5844 <loop+0x40>
   b5a06:	bf00      	nop
   b5a08:	2003e3d2 	.word	0x2003e3d2
   b5a0c:	2003e3d1 	.word	0x2003e3d1
   b5a10:	2003e3d0 	.word	0x2003e3d0
   b5a14:	2003e2a8 	.word	0x2003e2a8
   b5a18:	2003d67c 	.word	0x2003d67c
   b5a1c:	2003e2c8 	.word	0x2003e2c8
   b5a20:	000c1502 	.word	0x000c1502
   b5a24:	2003e654 	.word	0x2003e654
   b5a28:	000c18be 	.word	0x000c18be
   b5a2c:	000c2690 	.word	0x000c2690
   b5a30:	00030010 	.word	0x00030010
   b5a34:	000c1542 	.word	0x000c1542
			if (state != oldState) {
   b5a38:	4bac      	ldr	r3, [pc, #688]	; (b5cec <loop+0x4e8>)
   b5a3a:	781b      	ldrb	r3, [r3, #0]
   b5a3c:	2b04      	cmp	r3, #4
   b5a3e:	d062      	beq.n	b5b06 <loop+0x302>
				if (oldState != REPORTING_STATE) startLoRAWindow = millis();    // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b5a40:	2b07      	cmp	r3, #7
   b5a42:	d003      	beq.n	b5a4c <loop+0x248>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5a44:	f006 faf6 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
   b5a48:	4ba9      	ldr	r3, [pc, #676]	; (b5cf0 <loop+0x4ec>)
   b5a4a:	6018      	str	r0, [r3, #0]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5a4c:	f7ff fba4 	bl	b5198 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();						// Clear the buffer before we start the LoRA state
   b5a50:	f7fe fb8e 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5a54:	f7fe fba0 	bl	b4198 <_ZN14LoRA_Functions11clearBufferEv>
   b5a58:	f009 fda7 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b5a5c:	4ca5      	ldr	r4, [pc, #660]	; (b5cf4 <loop+0x4f0>)
   b5a5e:	17c3      	asrs	r3, r0, #31
   b5a60:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
				conv.withCurrentTime().convert();								// Get the time and convert to Local
   b5a64:	4620      	mov	r0, r4
   b5a66:	f003 fc07 	bl	b9278 <_ZN16LocalTimeConvert7convertEv>
    /**
     * @brief Get the value of this object as a LocalTimeHMS (hour minute second)
     * 
     * @return LocalTimeHMS 
     */
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   b5a6a:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b5a6e:	a805      	add	r0, sp, #20
   b5a70:	f003 fa94 	bl	b8f9c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour < sysStatus.get_closeTime()) current.set_openHours(true);
   b5a74:	f99d 6018 	ldrsb.w	r6, [sp, #24]
   b5a78:	f000 fa50 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5a7c:	f000 fb6d 	bl	b615a <_ZNK13sysStatusData12get_openTimeEv>
   b5a80:	4286      	cmp	r6, r0
   b5a82:	db7a      	blt.n	b5b7a <loop+0x376>
   b5a84:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b5a88:	a808      	add	r0, sp, #32
   b5a8a:	f003 fa87 	bl	b8f9c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5a8e:	f99d 6024 	ldrsb.w	r6, [sp, #36]	; 0x24
   b5a92:	f000 fa43 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5a96:	f000 fb65 	bl	b6164 <_ZNK13sysStatusData13get_closeTimeEv>
   b5a9a:	4286      	cmp	r6, r0
   b5a9c:	a808      	add	r0, sp, #32
   b5a9e:	bfac      	ite	ge
   b5aa0:	2600      	movge	r6, #0
   b5aa2:	2601      	movlt	r6, #1
   b5aa4:	f002 ffee 	bl	b8a84 <_ZN12LocalTimeHMSD1Ev>
   b5aa8:	a805      	add	r0, sp, #20
   b5aaa:	f002 ffeb 	bl	b8a84 <_ZN12LocalTimeHMSD1Ev>
   b5aae:	2e00      	cmp	r6, #0
   b5ab0:	d065      	beq.n	b5b7e <loop+0x37a>
   b5ab2:	f000 fa75 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b5ab6:	2101      	movs	r1, #1
				else current.set_openHours(false);
   b5ab8:	f000 fdbd 	bl	b6636 <_ZN17currentStatusData13set_openHoursEb>
				Log.info("Gateway is listening for LoRA messages and the park is %s (%d / %d / %d)", (current.get_openHours()) ? "open":"closed", conv.getLocalTimeHMS().hour, sysStatus.get_openTime(), sysStatus.get_closeTime());
   b5abc:	f000 fa70 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b5ac0:	f000 fd19 	bl	b64f6 <_ZNK17currentStatusData13get_openHoursEv>
   b5ac4:	4b8c      	ldr	r3, [pc, #560]	; (b5cf8 <loop+0x4f4>)
   b5ac6:	4a8d      	ldr	r2, [pc, #564]	; (b5cfc <loop+0x4f8>)
   b5ac8:	498d      	ldr	r1, [pc, #564]	; (b5d00 <loop+0x4fc>)
   b5aca:	2800      	cmp	r0, #0
   b5acc:	bf08      	it	eq
   b5ace:	461a      	moveq	r2, r3
   b5ad0:	a808      	add	r0, sp, #32
   b5ad2:	9203      	str	r2, [sp, #12]
   b5ad4:	f003 fa62 	bl	b8f9c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5ad8:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b5adc:	9302      	str	r3, [sp, #8]
   b5ade:	f000 fa1d 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5ae2:	f000 fb3a 	bl	b615a <_ZNK13sysStatusData12get_openTimeEv>
   b5ae6:	4604      	mov	r4, r0
   b5ae8:	f000 fa18 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5aec:	f000 fb3a 	bl	b6164 <_ZNK13sysStatusData13get_closeTimeEv>
   b5af0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b5af4:	e9cd 4000 	strd	r4, r0, [sp]
   b5af8:	4982      	ldr	r1, [pc, #520]	; (b5d04 <loop+0x500>)
   b5afa:	4883      	ldr	r0, [pc, #524]	; (b5d08 <loop+0x504>)
   b5afc:	f7fe fb1f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5b00:	a808      	add	r0, sp, #32
   b5b02:	f002 ffbf 	bl	b8a84 <_ZN12LocalTimeHMSD1Ev>
			if (LoRA_Functions::instance().listenForLoRAMessageGateway()) {
   b5b06:	f7fe fb33 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5b0a:	f7ff f9ff 	bl	b4f0c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>
   b5b0e:	b180      	cbz	r0, b5b32 <loop+0x32e>
				Log.info("Back in main app - alert code is %d", current.get_alertCodeNode());
   b5b10:	f000 fa46 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b5b14:	f000 fb4e 	bl	b61b4 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5b18:	497c      	ldr	r1, [pc, #496]	; (b5d0c <loop+0x508>)
   b5b1a:	4602      	mov	r2, r0
   b5b1c:	487a      	ldr	r0, [pc, #488]	; (b5d08 <loop+0x504>)
   b5b1e:	f7fe fb0e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				if (current.get_alertCodeNode() != 1) {
   b5b22:	f000 fa3d 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b5b26:	f000 fb45 	bl	b61b4 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5b2a:	2801      	cmp	r0, #1
					state = REPORTING_STATE; 			// Received and acknowledged data from a node - report unless there is Alert Code 1 (Unconfigured Node)
   b5b2c:	bf1c      	itt	ne
   b5b2e:	2307      	movne	r3, #7
   b5b30:	702b      	strbne	r3, [r5, #0]
			if (!testModeFlag && ((millis() - startLoRAWindow) > 150000L)) { 								// Keeps us in listening mode for the specified windpw - then back to idle unless in test mode - keeps listening
   b5b32:	4b77      	ldr	r3, [pc, #476]	; (b5d10 <loop+0x50c>)
   b5b34:	781b      	ldrb	r3, [r3, #0]
   b5b36:	2b00      	cmp	r3, #0
   b5b38:	f47f ae84 	bne.w	b5844 <loop+0x40>
   b5b3c:	f006 fa7a 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
   b5b40:	4b6b      	ldr	r3, [pc, #428]	; (b5cf0 <loop+0x4ec>)
   b5b42:	681b      	ldr	r3, [r3, #0]
   b5b44:	1ac0      	subs	r0, r0, r3
   b5b46:	4b73      	ldr	r3, [pc, #460]	; (b5d14 <loop+0x510>)
   b5b48:	4298      	cmp	r0, r3
   b5b4a:	f67f ae7b 	bls.w	b5844 <loop+0x40>
				LoRA_Functions::instance().nodeConnectionsHealthy();										// Will see if any nodes checked in - if not - will reset
   b5b4e:	f7fe fb0f 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5b52:	f7fe fe79 	bl	b4848 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv>
				LoRA_Functions::instance().sleepLoRaRadio();												// Done with the LoRA phase - put the radio to sleep
   b5b56:	f7fe fb0b 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5b5a:	f7fe fb2d 	bl	b41b8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection())) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over
   b5b5e:	f009 fd35 	bl	bf5cc <_ZN9TimeClass4hourEv>
   b5b62:	4604      	mov	r4, r0
   b5b64:	f000 f9da 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5b68:	f000 fc46 	bl	b63f8 <_ZNK13sysStatusData18get_lastConnectionEv>
   b5b6c:	f009 fbf4 	bl	bf358 <_ZN9TimeClass4hourEx>
   b5b70:	4284      	cmp	r4, r0
   b5b72:	f000 80b9 	beq.w	b5ce8 <loop+0x4e4>
   b5b76:	2305      	movs	r3, #5
   b5b78:	e663      	b.n	b5842 <loop+0x3e>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour < sysStatus.get_closeTime()) current.set_openHours(true);
   b5b7a:	2600      	movs	r6, #0
   b5b7c:	e794      	b.n	b5aa8 <loop+0x2a4>
				else current.set_openHours(false);
   b5b7e:	f000 fa0f 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b5b82:	4631      	mov	r1, r6
   b5b84:	e798      	b.n	b5ab8 <loop+0x2b4>
			if (state != oldState) publishStateTransition();
   b5b86:	4b59      	ldr	r3, [pc, #356]	; (b5cec <loop+0x4e8>)
   b5b88:	781b      	ldrb	r3, [r3, #0]
   b5b8a:	2b07      	cmp	r3, #7
   b5b8c:	d001      	beq.n	b5b92 <loop+0x38e>
   b5b8e:	f7ff fb03 	bl	b5198 <_Z22publishStateTransitionv>
			uint8_t nodeNumber = current.get_nodeNumber();						// Put this here to reduce line length
   b5b92:	f000 fa05 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b5b96:	f000 faef 	bl	b6178 <_ZNK17currentStatusData14get_nodeNumberEv>
			publishWebhook(nodeNumber);
   b5b9a:	f7ff fb45 	bl	b5228 <_Z14publishWebhookh>
			current.set_alertCodeNode(0);										// Zero alert code after send
   b5b9e:	f000 f9ff 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b5ba2:	2100      	movs	r1, #0
   b5ba4:	f000 fb82 	bl	b62ac <_ZN17currentStatusData17set_alertCodeNodeEh>
			sysStatus.set_messageCount(sysStatus.get_messageCount() + 1);		// Increment the message counter 
   b5ba8:	f000 f9b8 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5bac:	4604      	mov	r4, r0
   b5bae:	f000 f9b5 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5bb2:	f000 facd 	bl	b6150 <_ZNK13sysStatusData16get_messageCountEv>
   b5bb6:	3001      	adds	r0, #1
   b5bb8:	b2c1      	uxtb	r1, r0
   b5bba:	4620      	mov	r0, r4
   b5bbc:	f000 fb3a 	bl	b6234 <_ZN13sysStatusData16set_messageCountEh>
   b5bc0:	e63c      	b.n	b583c <loop+0x38>
			if (state != oldState) {
   b5bc2:	4b4a      	ldr	r3, [pc, #296]	; (b5cec <loop+0x4e8>)
   b5bc4:	4c54      	ldr	r4, [pc, #336]	; (b5d18 <loop+0x514>)
   b5bc6:	781b      	ldrb	r3, [r3, #0]
   b5bc8:	2b05      	cmp	r3, #5
   b5bca:	d027      	beq.n	b5c1c <loop+0x418>
				publishStateTransition();  
   b5bcc:	f7ff fae4 	bl	b5198 <_Z22publishStateTransitionv>
				if (Time.day(sysStatus.get_lastConnection()) != conv.getLocalTimeYMD().getDay()) {
   b5bd0:	f000 f9a4 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5bd4:	f000 fc10 	bl	b63f8 <_ZNK13sysStatusData18get_lastConnectionEv>
   b5bd8:	f009 fbc6 	bl	bf368 <_ZN9TimeClass3dayEx>
        fromLocalTimeValue(value);
   b5bdc:	4948      	ldr	r1, [pc, #288]	; (b5d00 <loop+0x4fc>)
   b5bde:	4606      	mov	r6, r0
   b5be0:	a808      	add	r0, sp, #32
   b5be2:	f003 f9f8 	bl	b8fd6 <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>
    /**
     * @brief Get the value of this object as a LocalTimeYMD (year month day0)
     * 
     * @return LocalTimeYMD 
     */
    LocalTimeYMD getLocalTimeYMD() const { return LocalTimeYMD(localTimeValue); };
   b5be6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   b5bea:	ebb6 0fd3 	cmp.w	r6, r3, lsr #3
   b5bee:	d007      	beq.n	b5c00 <loop+0x3fc>
					current.resetEverything();
   b5bf0:	f000 f9d6 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b5bf4:	f000 fc3e 	bl	b6474 <_ZN17currentStatusData15resetEverythingEv>
					Log.info("New Day - Resetting everything");
   b5bf8:	4948      	ldr	r1, [pc, #288]	; (b5d1c <loop+0x518>)
   b5bfa:	4843      	ldr	r0, [pc, #268]	; (b5d08 <loop+0x504>)
   b5bfc:	f7fe fa9f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				publishWebhook(sysStatus.get_nodeNumber());								// Before we connect - let's send the gateway's webhook
   b5c00:	f000 f98c 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5c04:	f000 fa9a 	bl	b613c <_ZNK13sysStatusData14get_nodeNumberEv>
   b5c08:	f7ff fb0e 	bl	b5228 <_Z14publishWebhookh>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5c0c:	f006 fd06 	bl	bc61c <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();							// Time to connect to Particle
   b5c10:	b908      	cbnz	r0, b5c16 <loop+0x412>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b5c12:	f006 fcfb 	bl	bc60c <spark_cloud_flag_connect>
   b5c16:	f006 fa0d 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b5c1a:	6020      	str	r0, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5c1c:	f006 fcfe 	bl	bc61c <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b5c20:	b338      	cbz	r0, b5c72 <loop+0x46e>
				sysStatus.set_lastConnection(Time.now());
   b5c22:	f000 f97b 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5c26:	4606      	mov	r6, r0
   b5c28:	f009 fcbf 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b5c2c:	4602      	mov	r2, r0
   b5c2e:	17c3      	asrs	r3, r0, #31
   b5c30:	4630      	mov	r0, r6
   b5c32:	f000 fc0f 	bl	b6454 <_ZN13sysStatusData18set_lastConnectionEx>
				sysStatus.set_lastConnectionDuration((millis() - connectingTimeout) / 1000);	// Record connection time in seconds
   b5c36:	f000 f971 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5c3a:	4606      	mov	r6, r0
   b5c3c:	f006 f9fa 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
   b5c40:	6821      	ldr	r1, [r4, #0]
   b5c42:	1a41      	subs	r1, r0, r1
   b5c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5c48:	fbb1 f1f0 	udiv	r1, r1, r0
   b5c4c:	4630      	mov	r0, r6
   b5c4e:	b289      	uxth	r1, r1
   b5c50:	f000 fb91 	bl	b6376 <_ZN13sysStatusData26set_lastConnectionDurationEt>
   b5c54:	f006 fce2 	bl	bc61c <spark_cloud_flag_connected>
				if (Particle.connected()) {
   b5c58:	b338      	cbz	r0, b5caa <loop+0x4a6>
   b5c5a:	f006 fcdf 	bl	bc61c <spark_cloud_flag_connected>
        if (!connected()) {
   b5c5e:	b110      	cbz	r0, b5c66 <loop+0x462>
        return spark_sync_time(NULL);
   b5c60:	2000      	movs	r0, #0
   b5c62:	f006 fcf3 	bl	bc64c <spark_sync_time>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b5c66:	f7ff fa45 	bl	b50f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        while (_while() && !_condition()) {
   b5c6a:	b950      	cbnz	r0, b5c82 <loop+0x47e>
            spark_process();
   b5c6c:	f006 fcc6 	bl	bc5fc <spark_process>
        while (_while() && !_condition()) {
   b5c70:	e7f9      	b.n	b5c66 <loop+0x462>
   b5c72:	f006 f9df 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b5c76:	6823      	ldr	r3, [r4, #0]
   b5c78:	1ac0      	subs	r0, r0, r3
   b5c7a:	4b29      	ldr	r3, [pc, #164]	; (b5d20 <loop+0x51c>)
   b5c7c:	4298      	cmp	r0, r3
   b5c7e:	d8d0      	bhi.n	b5c22 <loop+0x41e>
   b5c80:	e5e0      	b.n	b5844 <loop+0x40>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b5c82:	f7ff fa37 	bl	b50f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
					CellularSignal sig = Cellular.RSSI();
   b5c86:	4927      	ldr	r1, [pc, #156]	; (b5d24 <loop+0x520>)
   b5c88:	a808      	add	r0, sp, #32
   b5c8a:	f006 fe61 	bl	bc950 <_ZN5spark13CellularClass4RSSIEv>
					sysStatus.set_RSSI(sig.getStrength());
   b5c8e:	f000 f945 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5c92:	4604      	mov	r4, r0
   b5c94:	a808      	add	r0, sp, #32
   b5c96:	f006 fed7 	bl	bca48 <_ZNK14CellularSignal11getStrengthEv>
   b5c9a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
   b5c9e:	4620      	mov	r0, r4
   b5ca0:	ee10 3a10 	vmov	r3, s0
   b5ca4:	b299      	uxth	r1, r3
   b5ca6:	f000 fb78 	bl	b639a <_ZN13sysStatusData8set_RSSIEt>
				state = DISCONNECTING_STATE;											// Typically, we will disconnect and sleep to save power - publishes occur during the 90 seconds before disconnect
   b5caa:	2306      	movs	r3, #6
   b5cac:	e5c9      	b.n	b5842 <loop+0x3e>
			if (state != oldState) {
   b5cae:	4b0f      	ldr	r3, [pc, #60]	; (b5cec <loop+0x4e8>)
   b5cb0:	4c1d      	ldr	r4, [pc, #116]	; (b5d28 <loop+0x524>)
   b5cb2:	781b      	ldrb	r3, [r3, #0]
   b5cb4:	2b06      	cmp	r3, #6
   b5cb6:	d004      	beq.n	b5cc2 <loop+0x4be>
				publishStateTransition(); 
   b5cb8:	f7ff fa6e 	bl	b5198 <_Z22publishStateTransitionv>
   b5cbc:	f006 f9ba 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b5cc0:	6020      	str	r0, [r4, #0]
   b5cc2:	f006 f9b7 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - stayConnectedWindow > 90000) && PublishQueuePosix::instance().getCanSleep()) {	// Stay on-line for 90 seconds and until we are done clearing the queue
   b5cc6:	6823      	ldr	r3, [r4, #0]
   b5cc8:	1ac0      	subs	r0, r0, r3
   b5cca:	4b18      	ldr	r3, [pc, #96]	; (b5d2c <loop+0x528>)
   b5ccc:	4298      	cmp	r0, r3
   b5cce:	f67f adb9 	bls.w	b5844 <loop+0x40>
   b5cd2:	f003 fdc1 	bl	b9858 <_ZN17PublishQueuePosix8instanceEv>
   b5cd6:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
   b5cda:	2b00      	cmp	r3, #0
   b5cdc:	f43f adb2 	beq.w	b5844 <loop+0x40>
				Particle_Functions::instance().disconnectFromParticle();
   b5ce0:	f000 fdac 	bl	b683c <_ZN18Particle_Functions8instanceEv>
   b5ce4:	f000 fee4 	bl	b6ab0 <_ZN18Particle_Functions22disconnectFromParticleEv>
				state = IDLE_STATE;
   b5ce8:	2302      	movs	r3, #2
   b5cea:	e5aa      	b.n	b5842 <loop+0x3e>
   b5cec:	2003e3d1 	.word	0x2003e3d1
   b5cf0:	2003e29c 	.word	0x2003e29c
   b5cf4:	2003e2e0 	.word	0x2003e2e0
   b5cf8:	000c14fb 	.word	0x000c14fb
   b5cfc:	000c14f6 	.word	0x000c14f6
   b5d00:	2003e348 	.word	0x2003e348
   b5d04:	000c1563 	.word	0x000c1563
   b5d08:	2003e654 	.word	0x2003e654
   b5d0c:	000c15ac 	.word	0x000c15ac
   b5d10:	2003e3d3 	.word	0x2003e3d3
   b5d14:	000249f0 	.word	0x000249f0
   b5d18:	2003e2a0 	.word	0x2003e2a0
   b5d1c:	000c15d0 	.word	0x000c15d0
   b5d20:	000927c0 	.word	0x000927c0
   b5d24:	2003e580 	.word	0x2003e580
   b5d28:	2003e2a4 	.word	0x2003e2a4
   b5d2c:	00015f90 	.word	0x00015f90
			static system_tick_t resetTimeout = millis();
   b5d30:	4c1b      	ldr	r4, [pc, #108]	; (b5da0 <loop+0x59c>)
   b5d32:	4e1c      	ldr	r6, [pc, #112]	; (b5da4 <loop+0x5a0>)
   b5d34:	7823      	ldrb	r3, [r4, #0]
   b5d36:	f3bf 8f5b 	dmb	ish
   b5d3a:	f013 0f01 	tst.w	r3, #1
   b5d3e:	d109      	bne.n	b5d54 <loop+0x550>
   b5d40:	4620      	mov	r0, r4
   b5d42:	f7fe f9bb 	bl	b40bc <__cxa_guard_acquire>
   b5d46:	b128      	cbz	r0, b5d54 <loop+0x550>
   b5d48:	f006 f974 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
   b5d4c:	6030      	str	r0, [r6, #0]
   b5d4e:	4620      	mov	r0, r4
   b5d50:	f7fe f9b9 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) publishStateTransition();
   b5d54:	4b14      	ldr	r3, [pc, #80]	; (b5da8 <loop+0x5a4>)
   b5d56:	782a      	ldrb	r2, [r5, #0]
   b5d58:	781b      	ldrb	r3, [r3, #0]
   b5d5a:	429a      	cmp	r2, r3
   b5d5c:	d001      	beq.n	b5d62 <loop+0x55e>
   b5d5e:	f7ff fa1b 	bl	b5198 <_Z22publishStateTransitionv>
   b5d62:	f006 f967 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b5d66:	6833      	ldr	r3, [r6, #0]
   b5d68:	1ac0      	subs	r0, r0, r3
   b5d6a:	f247 5330 	movw	r3, #30000	; 0x7530
   b5d6e:	4298      	cmp	r0, r3
   b5d70:	f67f ad68 	bls.w	b5844 <loop+0x40>
				Log.info("Deep power down device");
   b5d74:	490d      	ldr	r1, [pc, #52]	; (b5dac <loop+0x5a8>)
   b5d76:	480e      	ldr	r0, [pc, #56]	; (b5db0 <loop+0x5ac>)
   b5d78:	f7fe f9e1 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				delay(2000);
   b5d7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5d80:	f006 fd6c 	bl	bc85c <delay>
				ab1805.deepPowerDown(); 
   b5d84:	211e      	movs	r1, #30
   b5d86:	480b      	ldr	r0, [pc, #44]	; (b5db4 <loop+0x5b0>)
   b5d88:	f001 fb52 	bl	b7430 <_ZN6AB180513deepPowerDownEi>
   b5d8c:	e55a      	b.n	b5844 <loop+0x40>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b5d8e:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b5d92:	e5f3      	b.n	b597c <loop+0x178>
                valid_ = false;
   b5d94:	7526      	strb	r6, [r4, #20]
                return *this;
   b5d96:	e5f1      	b.n	b597c <loop+0x178>
}
   b5d98:	b010      	add	sp, #64	; 0x40
   b5d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5d9e:	bf00      	nop
   b5da0:	2003e290 	.word	0x2003e290
   b5da4:	2003e298 	.word	0x2003e298
   b5da8:	2003e3d1 	.word	0x2003e3d1
   b5dac:	000c15ef 	.word	0x000c15ef
   b5db0:	2003e654 	.word	0x2003e654
   b5db4:	2003e2a8 	.word	0x2003e2a8

000b5db8 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b5db8:	b510      	push	{r4, lr}
   b5dba:	4b03      	ldr	r3, [pc, #12]	; (b5dc8 <_ZN8MB85RC64D1Ev+0x10>)
   b5dbc:	6003      	str	r3, [r0, #0]
   b5dbe:	4604      	mov	r4, r0
   b5dc0:	f003 fb08 	bl	b93d4 <_ZN6MB85RCD1Ev>
   b5dc4:	4620      	mov	r0, r4
   b5dc6:	bd10      	pop	{r4, pc}
   b5dc8:	000c1648 	.word	0x000c1648

000b5dcc <_ZN8MB85RC64D0Ev>:
   b5dcc:	b510      	push	{r4, lr}
   b5dce:	4604      	mov	r4, r0
   b5dd0:	f7ff fff2 	bl	b5db8 <_ZN8MB85RC64D1Ev>
   b5dd4:	4620      	mov	r0, r4
   b5dd6:	2110      	movs	r1, #16
   b5dd8:	f7fe f961 	bl	b409e <_ZdlPvj>
   b5ddc:	4620      	mov	r0, r4
   b5dde:	bd10      	pop	{r4, pc}

000b5de0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b5de0:	b510      	push	{r4, lr}
            if (!handle_) {
   b5de2:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b5de4:	4604      	mov	r4, r0
            if (!handle_) {
   b5de6:	b90b      	cbnz	r3, b5dec <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b5de8:	f006 f8d4 	bl	bbf94 <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b5dec:	6820      	ldr	r0, [r4, #0]
        }
   b5dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b5df2:	f006 b8df 	b.w	bbfb4 <os_mutex_recursive_lock>

000b5df6 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b5df6:	b538      	push	{r3, r4, r5, lr}
   b5df8:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b5dfa:	3004      	adds	r0, #4
   b5dfc:	f7ff fff0 	bl	b5de0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5e00:	6a20      	ldr	r0, [r4, #32]
   b5e02:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5e04:	6803      	ldr	r3, [r0, #0]
   b5e06:	68dd      	ldr	r5, [r3, #12]
   b5e08:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5e0c:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b5e0e:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b5e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b5e14:	f006 b8d6 	b.w	bbfc4 <os_mutex_recursive_unlock>

000b5e18 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5e18:	b538      	push	{r3, r4, r5, lr}
   b5e1a:	4604      	mov	r4, r0
   b5e1c:	3004      	adds	r0, #4
   b5e1e:	f7ff ffdf 	bl	b5de0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b5e22:	6a20      	ldr	r0, [r4, #32]
   b5e24:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5e26:	6803      	ldr	r3, [r0, #0]
   b5e28:	689d      	ldr	r5, [r3, #8]
   b5e2a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5e2e:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5e30:	68a2      	ldr	r2, [r4, #8]
   b5e32:	6823      	ldr	r3, [r4, #0]
   b5e34:	88d1      	ldrh	r1, [r2, #6]
   b5e36:	695b      	ldr	r3, [r3, #20]
   b5e38:	4620      	mov	r0, r4
   b5e3a:	4798      	blx	r3
   b5e3c:	b918      	cbnz	r0, b5e46 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b5e3e:	6823      	ldr	r3, [r4, #0]
   b5e40:	4620      	mov	r0, r4
   b5e42:	699b      	ldr	r3, [r3, #24]
   b5e44:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5e46:	6860      	ldr	r0, [r4, #4]
   b5e48:	f006 f8bc 	bl	bbfc4 <os_mutex_recursive_unlock>
        }
   b5e4c:	2001      	movs	r0, #1
   b5e4e:	bd38      	pop	{r3, r4, r5, pc}

000b5e50 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b5e50:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b5e52:	4b04      	ldr	r3, [pc, #16]	; (b5e64 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b5e54:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b5e56:	4604      	mov	r4, r0
            if (handle_) {
   b5e58:	6840      	ldr	r0, [r0, #4]
   b5e5a:	b108      	cbz	r0, b5e60 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5e5c:	f006 f8a2 	bl	bbfa4 <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b5e60:	4620      	mov	r0, r4
   b5e62:	bd10      	pop	{r4, pc}
   b5e64:	000c2380 	.word	0x000c2380

000b5e68 <_ZN13sysStatusDataD1Ev>:

sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {

};

sysStatusData::~sysStatusData() {
   b5e68:	b510      	push	{r4, lr}
   b5e6a:	4b03      	ldr	r3, [pc, #12]	; (b5e78 <_ZN13sysStatusDataD1Ev+0x10>)
   b5e6c:	6003      	str	r3, [r0, #0]
   b5e6e:	4604      	mov	r4, r0
   b5e70:	f7ff ffee 	bl	b5e50 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5e74:	4620      	mov	r0, r4
   b5e76:	bd10      	pop	{r4, pc}
   b5e78:	000c1690 	.word	0x000c1690

000b5e7c <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b5e7c:	b510      	push	{r4, lr}
   b5e7e:	4604      	mov	r4, r0
}
   b5e80:	f7ff fff2 	bl	b5e68 <_ZN13sysStatusDataD1Ev>
   b5e84:	4620      	mov	r0, r4
   b5e86:	2168      	movs	r1, #104	; 0x68
   b5e88:	f7fe f909 	bl	b409e <_ZdlPvj>
   b5e8c:	4620      	mov	r0, r4
   b5e8e:	bd10      	pop	{r4, pc}

000b5e90 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b5e90:	b510      	push	{r4, lr}
   b5e92:	4b03      	ldr	r3, [pc, #12]	; (b5ea0 <_ZN17currentStatusDataD1Ev+0x10>)
   b5e94:	6003      	str	r3, [r0, #0]
   b5e96:	4604      	mov	r4, r0
   b5e98:	f7ff ffda 	bl	b5e50 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5e9c:	4620      	mov	r0, r4
   b5e9e:	bd10      	pop	{r4, pc}
   b5ea0:	000c16bc 	.word	0x000c16bc

000b5ea4 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b5ea4:	b510      	push	{r4, lr}
   b5ea6:	4604      	mov	r4, r0
}
   b5ea8:	f7ff fff2 	bl	b5e90 <_ZN17currentStatusDataD1Ev>
   b5eac:	4620      	mov	r0, r4
   b5eae:	2170      	movs	r1, #112	; 0x70
   b5eb0:	f7fe f8f5 	bl	b409e <_ZdlPvj>
   b5eb4:	4620      	mov	r0, r4
   b5eb6:	bd10      	pop	{r4, pc}

000b5eb8 <_ZN10nodeIDDataD1Ev>:

nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {

};

nodeIDData::~nodeIDData() {
   b5eb8:	b510      	push	{r4, lr}
   b5eba:	4b03      	ldr	r3, [pc, #12]	; (b5ec8 <_ZN10nodeIDDataD1Ev+0x10>)
   b5ebc:	6003      	str	r3, [r0, #0]
   b5ebe:	4604      	mov	r4, r0
   b5ec0:	f7ff ffc6 	bl	b5e50 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5ec4:	4620      	mov	r0, r4
   b5ec6:	bd10      	pop	{r4, pc}
   b5ec8:	000c1664 	.word	0x000c1664

000b5ecc <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b5ecc:	b510      	push	{r4, lr}
   b5ece:	4604      	mov	r4, r0
}
   b5ed0:	f7ff fff2 	bl	b5eb8 <_ZN10nodeIDDataD1Ev>
   b5ed4:	4620      	mov	r0, r4
   b5ed6:	f44f 6187 	mov.w	r1, #1080	; 0x438
   b5eda:	f7fe f8e0 	bl	b409e <_ZdlPvj>
   b5ede:	4620      	mov	r0, r4
   b5ee0:	bd10      	pop	{r4, pc}
	...

000b5ee4 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5ee4:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ee8:	6081      	str	r1, [r0, #8]
   b5eea:	4909      	ldr	r1, [pc, #36]	; (b5f10 <_ZN13sysStatusDataC1Ev+0x2c>)
   b5eec:	f04f 0c40 	mov.w	ip, #64	; 0x40
   b5ef0:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b5ef4:	2101      	movs	r1, #1
   b5ef6:	8281      	strh	r1, [r0, #20]
   b5ef8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5efc:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5efe:	4905      	ldr	r1, [pc, #20]	; (b5f14 <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5f00:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5f02:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b5f06:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5f08:	6182      	str	r2, [r0, #24]
   b5f0a:	4a03      	ldr	r2, [pc, #12]	; (b5f18 <_ZN13sysStatusDataC1Ev+0x34>)
   b5f0c:	6002      	str	r2, [r0, #0]
};
   b5f0e:	4770      	bx	lr
   b5f10:	20a99e76 	.word	0x20a99e76
   b5f14:	2003e3e4 	.word	0x2003e3e4
   b5f18:	000c1690 	.word	0x000c1690

000b5f1c <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b5f1c:	b510      	push	{r4, lr}
    if (!_instance) {
   b5f1e:	4c06      	ldr	r4, [pc, #24]	; (b5f38 <_ZN13sysStatusData8instanceEv+0x1c>)
   b5f20:	6823      	ldr	r3, [r4, #0]
   b5f22:	b93b      	cbnz	r3, b5f34 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b5f24:	2068      	movs	r0, #104	; 0x68
   b5f26:	f7fe f8b6 	bl	b4096 <_Znwj>
   b5f2a:	4603      	mov	r3, r0
   b5f2c:	b108      	cbz	r0, b5f32 <_ZN13sysStatusData8instanceEv+0x16>
   b5f2e:	f7ff ffd9 	bl	b5ee4 <_ZN13sysStatusDataC1Ev>
   b5f32:	6023      	str	r3, [r4, #0]
}
   b5f34:	6820      	ldr	r0, [r4, #0]
   b5f36:	bd10      	pop	{r4, pc}
   b5f38:	2003e3dc 	.word	0x2003e3dc

000b5f3c <_ZN17currentStatusData5setupEv>:
void currentStatusData::setup() {
   b5f3c:	b510      	push	{r4, lr}
    fram.begin();
   b5f3e:	6a00      	ldr	r0, [r0, #32]
   b5f40:	f003 fa5e 	bl	b9400 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5f44:	f7ff ffea 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5f48:	6803      	ldr	r3, [r0, #0]
}
   b5f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.load();
   b5f4e:	685b      	ldr	r3, [r3, #4]
   b5f50:	4718      	bx	r3

000b5f52 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b5f52:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5f54:	f7ff ffe2 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5f58:	6803      	ldr	r3, [r0, #0]
}
   b5f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5f5e:	68db      	ldr	r3, [r3, #12]
   b5f60:	2100      	movs	r1, #0
   b5f62:	4718      	bx	r3

000b5f64 <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b5f64:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b5f66:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5f6a:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5f6c:	6182      	str	r2, [r0, #24]
   b5f6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5f72:	6081      	str	r1, [r0, #8]
   b5f74:	61c2      	str	r2, [r0, #28]
   b5f76:	4907      	ldr	r1, [pc, #28]	; (b5f94 <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5f78:	4a07      	ldr	r2, [pc, #28]	; (b5f98 <_ZN17currentStatusDataC1Ev+0x34>)
   b5f7a:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5f7c:	f04f 0c48 	mov.w	ip, #72	; 0x48
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5f80:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5f82:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5f86:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5f88:	2101      	movs	r1, #1
   b5f8a:	4a04      	ldr	r2, [pc, #16]	; (b5f9c <_ZN17currentStatusDataC1Ev+0x38>)
   b5f8c:	8281      	strh	r1, [r0, #20]
   b5f8e:	6002      	str	r2, [r0, #0]
};
   b5f90:	4770      	bx	lr
   b5f92:	bf00      	nop
   b5f94:	20a99e74 	.word	0x20a99e74
   b5f98:	2003e3e4 	.word	0x2003e3e4
   b5f9c:	000c16bc 	.word	0x000c16bc

000b5fa0 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b5fa0:	b510      	push	{r4, lr}
    if (!_instance) {
   b5fa2:	4c06      	ldr	r4, [pc, #24]	; (b5fbc <_ZN17currentStatusData8instanceEv+0x1c>)
   b5fa4:	6823      	ldr	r3, [r4, #0]
   b5fa6:	b93b      	cbnz	r3, b5fb8 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5fa8:	2070      	movs	r0, #112	; 0x70
   b5faa:	f7fe f874 	bl	b4096 <_Znwj>
   b5fae:	4603      	mov	r3, r0
   b5fb0:	b108      	cbz	r0, b5fb6 <_ZN17currentStatusData8instanceEv+0x16>
   b5fb2:	f7ff ffd7 	bl	b5f64 <_ZN17currentStatusDataC1Ev>
   b5fb6:	6023      	str	r3, [r4, #0]
}
   b5fb8:	6820      	ldr	r0, [r4, #0]
   b5fba:	bd10      	pop	{r4, pc}
   b5fbc:	2003e3e0 	.word	0x2003e3e0

000b5fc0 <_ZN17currentStatusData4loopEv>:
void currentStatusData::loop() {
   b5fc0:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5fc2:	f7ff ffab 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b5fc6:	6803      	ldr	r3, [r0, #0]
}
   b5fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5fcc:	68db      	ldr	r3, [r3, #12]
   b5fce:	2100      	movs	r1, #0
   b5fd0:	4718      	bx	r3
   b5fd2:	0000      	movs	r0, r0
   b5fd4:	0000      	movs	r0, r0
	...

000b5fd8 <_ZNK17currentStatusData17get_stateOfChargeEv>:
double currentStatusData::get_stateOfCharge() const {
   b5fd8:	b510      	push	{r4, lr}
   b5fda:	4604      	mov	r4, r0
   b5fdc:	ed2d 8b02 	vpush	{d8}
   b5fe0:	3004      	adds	r0, #4
   b5fe2:	f7ff fefd 	bl	b5de0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5fe6:	68e3      	ldr	r3, [r4, #12]
   b5fe8:	3b08      	subs	r3, #8
   b5fea:	2b17      	cmp	r3, #23
   b5fec:	d90c      	bls.n	b6008 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b5fee:	68a3      	ldr	r3, [r4, #8]
   b5ff0:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b5ff4:	6860      	ldr	r0, [r4, #4]
   b5ff6:	f005 ffe5 	bl	bbfc4 <os_mutex_recursive_unlock>
}
   b5ffa:	eeb0 0a48 	vmov.f32	s0, s16
   b5ffe:	eef0 0a68 	vmov.f32	s1, s17
   b6002:	ecbd 8b02 	vpop	{d8}
   b6006:	bd10      	pop	{r4, pc}
            T result = 0;
   b6008:	ed9f 8b01 	vldr	d8, [pc, #4]	; b6010 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b600c:	e7f2      	b.n	b5ff4 <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b600e:	bf00      	nop
	...

000b6018 <_ZN17currentStatusData17set_stateOfChargeEd>:
void currentStatusData::set_stateOfCharge(double value) {
   b6018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b601a:	4604      	mov	r4, r0
   b601c:	3004      	adds	r0, #4
   b601e:	ec57 6b10 	vmov	r6, r7, d0
   b6022:	f7ff fedd 	bl	b5de0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6026:	68e3      	ldr	r3, [r4, #12]
   b6028:	3b08      	subs	r3, #8
   b602a:	2b17      	cmp	r3, #23
   b602c:	d912      	bls.n	b6054 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b602e:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b6030:	4630      	mov	r0, r6
   b6032:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b6036:	4639      	mov	r1, r7
   b6038:	f00a f9fa 	bl	c0430 <__aeabi_dcmpeq>
   b603c:	b950      	cbnz	r0, b6054 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b603e:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b6042:	4620      	mov	r0, r4
   b6044:	68a5      	ldr	r5, [r4, #8]
   b6046:	f005 feb5 	bl	bbdb4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b604a:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b604c:	6823      	ldr	r3, [r4, #0]
   b604e:	4620      	mov	r0, r4
   b6050:	691b      	ldr	r3, [r3, #16]
   b6052:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b6054:	6860      	ldr	r0, [r4, #4]
}
   b6056:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b605a:	f005 bfb3 	b.w	bbfc4 <os_mutex_recursive_unlock>
	...

000b6060 <_ZN10nodeIDDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b6060:	2200      	movs	r2, #0
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b6062:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b6066:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6068:	6182      	str	r2, [r0, #24]
   b606a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b606e:	6081      	str	r1, [r0, #8]
   b6070:	61c2      	str	r2, [r0, #28]
   b6072:	4907      	ldr	r1, [pc, #28]	; (b6090 <_ZN10nodeIDDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6074:	4a07      	ldr	r2, [pc, #28]	; (b6094 <_ZN10nodeIDDataC1Ev+0x34>)
   b6076:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6078:	f44f 6c82 	mov.w	ip, #1040	; 0x410
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b607c:	2296      	movs	r2, #150	; 0x96
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b607e:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6082:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6084:	2102      	movs	r1, #2
   b6086:	4a04      	ldr	r2, [pc, #16]	; (b6098 <_ZN10nodeIDDataC1Ev+0x38>)
   b6088:	8281      	strh	r1, [r0, #20]
   b608a:	6002      	str	r2, [r0, #0]
};
   b608c:	4770      	bx	lr
   b608e:	bf00      	nop
   b6090:	20a99e60 	.word	0x20a99e60
   b6094:	2003e3e4 	.word	0x2003e3e4
   b6098:	000c1664 	.word	0x000c1664

000b609c <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b609c:	b510      	push	{r4, lr}
    if (!_instance) {
   b609e:	4c07      	ldr	r4, [pc, #28]	; (b60bc <_ZN10nodeIDData8instanceEv+0x20>)
   b60a0:	6823      	ldr	r3, [r4, #0]
   b60a2:	b943      	cbnz	r3, b60b6 <_ZN10nodeIDData8instanceEv+0x1a>
        _instance = new nodeIDData();
   b60a4:	f44f 6087 	mov.w	r0, #1080	; 0x438
   b60a8:	f7fd fff5 	bl	b4096 <_Znwj>
   b60ac:	4603      	mov	r3, r0
   b60ae:	b108      	cbz	r0, b60b4 <_ZN10nodeIDData8instanceEv+0x18>
   b60b0:	f7ff ffd6 	bl	b6060 <_ZN10nodeIDDataC1Ev>
   b60b4:	6023      	str	r3, [r4, #0]
}
   b60b6:	6820      	ldr	r0, [r4, #0]
   b60b8:	bd10      	pop	{r4, pc}
   b60ba:	bf00      	nop
   b60bc:	2003e3d8 	.word	0x2003e3d8

000b60c0 <_ZN10nodeIDData5setupEv>:

void nodeIDData::setup() {
   b60c0:	b510      	push	{r4, lr}
    fram.begin();
   b60c2:	6a00      	ldr	r0, [r0, #32]
   b60c4:	f003 f99c 	bl	b9400 <_ZN6MB85RC5beginEv>
    nodeID.load();
   b60c8:	f7ff ffe8 	bl	b609c <_ZN10nodeIDData8instanceEv>
   b60cc:	6803      	ldr	r3, [r0, #0]
}
   b60ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.load();
   b60d2:	685b      	ldr	r3, [r3, #4]
   b60d4:	4718      	bx	r3

000b60d6 <_ZN10nodeIDData4loopEv>:

void nodeIDData::loop() {
   b60d6:	b510      	push	{r4, lr}
    nodeID.flush(false);
   b60d8:	f7ff ffe0 	bl	b609c <_ZN10nodeIDData8instanceEv>
   b60dc:	6803      	ldr	r3, [r0, #0]
}
   b60de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.flush(false);
   b60e2:	68db      	ldr	r3, [r3, #12]
   b60e4:	2100      	movs	r1, #0
   b60e6:	4718      	bx	r3

000b60e8 <_ZNK10nodeIDData14get_nodeIDJsonEv>:
    nodeID.set_nodeIDJson(blank);

    Log.info("Resettig NodeID config to: %s", blank.c_str());
}

String nodeIDData::get_nodeIDJson() const {
   b60e8:	b538      	push	{r3, r4, r5, lr}
   b60ea:	4604      	mov	r4, r0
   b60ec:	460d      	mov	r5, r1
	String result;
   b60ee:	4906      	ldr	r1, [pc, #24]	; (b6108 <_ZNK10nodeIDData14get_nodeIDJsonEv+0x20>)
   b60f0:	f008 fef3 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), result);
   b60f4:	4623      	mov	r3, r4
   b60f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b60fa:	2110      	movs	r1, #16
   b60fc:	4628      	mov	r0, r5
   b60fe:	f005 fe00 	bl	bbd02 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b6102:	4620      	mov	r0, r4
   b6104:	bd38      	pop	{r3, r4, r5, pc}
   b6106:	bf00      	nop
   b6108:	000c2508 	.word	0x000c2508

000b610c <_ZN10nodeIDData14set_nodeIDJsonEPKc>:

bool nodeIDData::set_nodeIDJson(const char *str) {
   b610c:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), str);
   b610e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b6112:	2110      	movs	r1, #16
   b6114:	f005 be66 	b.w	bbde4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

000b6118 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b6118:	b538      	push	{r3, r4, r5, lr}
   b611a:	4604      	mov	r4, r0
   b611c:	3004      	adds	r0, #4
   b611e:	460d      	mov	r5, r1
   b6120:	f7ff fe5e 	bl	b5de0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6124:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6126:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6128:	3b01      	subs	r3, #1
   b612a:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b612c:	bf26      	itte	cs
   b612e:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6130:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b6132:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6134:	f005 ff46 	bl	bbfc4 <os_mutex_recursive_unlock>
        }
   b6138:	4628      	mov	r0, r5
   b613a:	bd38      	pop	{r3, r4, r5, pc}

000b613c <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b613c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b613e:	2110      	movs	r1, #16
   b6140:	f7ff ffea 	bl	b6118 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6144:	bd08      	pop	{r3, pc}

000b6146 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b6146:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b6148:	2115      	movs	r1, #21
   b614a:	f7ff ffe5 	bl	b6118 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b614e:	bd08      	pop	{r3, pc}

000b6150 <_ZNK13sysStatusData16get_messageCountEv>:
uint8_t sysStatusData::get_messageCount() const {
   b6150:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, messageCount));
   b6152:	2116      	movs	r1, #22
   b6154:	f7ff ffe0 	bl	b6118 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6158:	bd08      	pop	{r3, pc}

000b615a <_ZNK13sysStatusData12get_openTimeEv>:
uint8_t sysStatusData::get_openTime() const {
   b615a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, openTime));
   b615c:	2138      	movs	r1, #56	; 0x38
   b615e:	f7ff ffdb 	bl	b6118 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6162:	bd08      	pop	{r3, pc}

000b6164 <_ZNK13sysStatusData13get_closeTimeEv>:
uint8_t sysStatusData::get_closeTime() const {
   b6164:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, closeTime));
   b6166:	2139      	movs	r1, #57	; 0x39
   b6168:	f7ff ffd6 	bl	b6118 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b616c:	bd08      	pop	{r3, pc}

000b616e <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const {
   b616e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, sensorType));
   b6170:	213b      	movs	r1, #59	; 0x3b
   b6172:	f7ff ffd1 	bl	b6118 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6176:	bd08      	pop	{r3, pc}

000b6178 <_ZNK17currentStatusData14get_nodeNumberEv>:
uint8_t currentStatusData::get_nodeNumber() const {
   b6178:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, nodeNumber));
   b617a:	2110      	movs	r1, #16
   b617c:	f7ff ffcc 	bl	b6118 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6180:	bd08      	pop	{r3, pc}

000b6182 <_ZNK17currentStatusData18get_tempNodeNumberEv>:
uint8_t currentStatusData::get_tempNodeNumber() const {
   b6182:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, tempNodeNumber));
   b6184:	2111      	movs	r1, #17
   b6186:	f7ff ffc7 	bl	b6118 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b618a:	bd08      	pop	{r3, pc}

000b618c <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b618c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b618e:	2112      	movs	r1, #18
   b6190:	f7ff ffc2 	bl	b6118 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6194:	bd08      	pop	{r3, pc}

000b6196 <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b6196:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b6198:	2120      	movs	r1, #32
   b619a:	f7ff ffbd 	bl	b6118 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b619e:	bd08      	pop	{r3, pc}

000b61a0 <_ZNK17currentStatusData14get_resetCountEv>:
uint8_t currentStatusData::get_resetCount() const {
   b61a0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, resetCount));
   b61a2:	2121      	movs	r1, #33	; 0x21
   b61a4:	f7ff ffb8 	bl	b6118 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b61a8:	bd08      	pop	{r3, pc}

000b61aa <_ZNK17currentStatusData17get_messageNumberEv>:
uint8_t currentStatusData::get_messageNumber() const {
   b61aa:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageNumber));
   b61ac:	2124      	movs	r1, #36	; 0x24
   b61ae:	f7ff ffb3 	bl	b6118 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b61b2:	bd08      	pop	{r3, pc}

000b61b4 <_ZNK17currentStatusData17get_alertCodeNodeEv>:
uint8_t currentStatusData::get_alertCodeNode() const {
   b61b4:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
   b61b6:	2134      	movs	r1, #52	; 0x34
   b61b8:	f7ff ffae 	bl	b6118 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b61bc:	bd08      	pop	{r3, pc}

000b61be <_ZNK17currentStatusData14get_sensorTypeEv>:
uint8_t currentStatusData::get_sensorType() const {
   b61be:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, sensorType));
   b61c0:	2141      	movs	r1, #65	; 0x41
   b61c2:	f7ff ffa9 	bl	b6118 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b61c6:	bd08      	pop	{r3, pc}

000b61c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b61c8:	b570      	push	{r4, r5, r6, lr}
   b61ca:	4604      	mov	r4, r0
   b61cc:	3004      	adds	r0, #4
   b61ce:	460d      	mov	r5, r1
   b61d0:	4616      	mov	r6, r2
   b61d2:	f7ff fe05 	bl	b5de0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b61d6:	68e3      	ldr	r3, [r4, #12]
   b61d8:	3b01      	subs	r3, #1
   b61da:	42ab      	cmp	r3, r5
   b61dc:	d30d      	bcc.n	b61fa <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b61de:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b61e0:	5d5a      	ldrb	r2, [r3, r5]
   b61e2:	42b2      	cmp	r2, r6
   b61e4:	d009      	beq.n	b61fa <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b61e6:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b61e8:	4620      	mov	r0, r4
   b61ea:	68a5      	ldr	r5, [r4, #8]
   b61ec:	f005 fde2 	bl	bbdb4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b61f0:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b61f2:	6823      	ldr	r3, [r4, #0]
   b61f4:	4620      	mov	r0, r4
   b61f6:	691b      	ldr	r3, [r3, #16]
   b61f8:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b61fa:	6860      	ldr	r0, [r4, #4]
        }
   b61fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6200:	f005 bee0 	b.w	bbfc4 <os_mutex_recursive_unlock>

000b6204 <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b6204:	b508      	push	{r3, lr}
   b6206:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b6208:	2110      	movs	r1, #16
   b620a:	f7ff ffdd 	bl	b61c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b620e:	bd08      	pop	{r3, pc}

000b6210 <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b6210:	b508      	push	{r3, lr}
   b6212:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b6214:	2111      	movs	r1, #17
   b6216:	f7ff ffd7 	bl	b61c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b621a:	bd08      	pop	{r3, pc}

000b621c <_ZN13sysStatusData19set_firmwareReleaseEh>:
void sysStatusData::set_firmwareRelease(uint8_t value) {
   b621c:	b508      	push	{r3, lr}
   b621e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, firmwareRelease), value);
   b6220:	2114      	movs	r1, #20
   b6222:	f7ff ffd1 	bl	b61c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6226:	bd08      	pop	{r3, pc}

000b6228 <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b6228:	b508      	push	{r3, lr}
   b622a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b622c:	2115      	movs	r1, #21
   b622e:	f7ff ffcb 	bl	b61c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6232:	bd08      	pop	{r3, pc}

000b6234 <_ZN13sysStatusData16set_messageCountEh>:
void sysStatusData::set_messageCount(uint8_t value) {
   b6234:	b508      	push	{r3, lr}
   b6236:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, messageCount), value);
   b6238:	2116      	movs	r1, #22
   b623a:	f7ff ffc5 	bl	b61c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b623e:	bd08      	pop	{r3, pc}

000b6240 <_ZN13sysStatusData20set_alertCodeGatewayEh>:
void sysStatusData::set_alertCodeGateway(uint8_t value) {
   b6240:	b508      	push	{r3, lr}
   b6242:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, alertCodeGateway), value);
   b6244:	212e      	movs	r1, #46	; 0x2e
   b6246:	f7ff ffbf 	bl	b61c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b624a:	bd08      	pop	{r3, pc}

000b624c <_ZN13sysStatusData12set_openTimeEh>:
void sysStatusData::set_openTime(uint8_t value) {
   b624c:	b508      	push	{r3, lr}
   b624e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, openTime), value);
   b6250:	2138      	movs	r1, #56	; 0x38
   b6252:	f7ff ffb9 	bl	b61c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6256:	bd08      	pop	{r3, pc}

000b6258 <_ZN13sysStatusData13set_closeTimeEh>:
void sysStatusData::set_closeTime(uint8_t value) {
   b6258:	b508      	push	{r3, lr}
   b625a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, closeTime), value);
   b625c:	2139      	movs	r1, #57	; 0x39
   b625e:	f7ff ffb3 	bl	b61c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6262:	bd08      	pop	{r3, pc}

000b6264 <_ZN17currentStatusData14set_nodeNumberEh>:
void currentStatusData::set_nodeNumber(uint8_t value) {
   b6264:	b508      	push	{r3, lr}
   b6266:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, nodeNumber), value);
   b6268:	2110      	movs	r1, #16
   b626a:	f7ff ffad 	bl	b61c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b626e:	bd08      	pop	{r3, pc}

000b6270 <_ZN17currentStatusData18set_tempNodeNumberEh>:
void currentStatusData::set_tempNodeNumber(uint8_t value) {
   b6270:	b508      	push	{r3, lr}
   b6272:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, tempNodeNumber), value);
   b6274:	2111      	movs	r1, #17
   b6276:	f7ff ffa7 	bl	b61c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b627a:	bd08      	pop	{r3, pc}

000b627c <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b627c:	b508      	push	{r3, lr}
   b627e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b6280:	2112      	movs	r1, #18
   b6282:	f7ff ffa1 	bl	b61c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6286:	bd08      	pop	{r3, pc}

000b6288 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b6288:	b508      	push	{r3, lr}
   b628a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b628c:	2120      	movs	r1, #32
   b628e:	f7ff ff9b 	bl	b61c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6292:	bd08      	pop	{r3, pc}

000b6294 <_ZN17currentStatusData14set_resetCountEh>:
void currentStatusData::set_resetCount(uint8_t value) {
   b6294:	b508      	push	{r3, lr}
   b6296:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, resetCount), value);
   b6298:	2121      	movs	r1, #33	; 0x21
   b629a:	f7ff ff95 	bl	b61c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b629e:	bd08      	pop	{r3, pc}

000b62a0 <_ZN17currentStatusData17set_messageNumberEh>:
void currentStatusData::set_messageNumber(uint8_t value) {
   b62a0:	b508      	push	{r3, lr}
   b62a2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageNumber), value);
   b62a4:	2124      	movs	r1, #36	; 0x24
   b62a6:	f7ff ff8f 	bl	b61c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b62aa:	bd08      	pop	{r3, pc}

000b62ac <_ZN17currentStatusData17set_alertCodeNodeEh>:
void currentStatusData::set_alertCodeNode(uint8_t value) {
   b62ac:	b508      	push	{r3, lr}
   b62ae:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b62b0:	2134      	movs	r1, #52	; 0x34
   b62b2:	f7ff ff89 	bl	b61c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b62b6:	bd08      	pop	{r3, pc}

000b62b8 <_ZN17currentStatusData14set_sensorTypeEh>:
void currentStatusData::set_sensorType(uint8_t value) {
   b62b8:	b508      	push	{r3, lr}
   b62ba:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, sensorType), value);
   b62bc:	2141      	movs	r1, #65	; 0x41
   b62be:	f7ff ff83 	bl	b61c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b62c2:	bd08      	pop	{r3, pc}

000b62c4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b62c4:	b538      	push	{r3, r4, r5, lr}
   b62c6:	4604      	mov	r4, r0
   b62c8:	3004      	adds	r0, #4
   b62ca:	460d      	mov	r5, r1
   b62cc:	f7ff fd88 	bl	b5de0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b62d0:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b62d2:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b62d4:	3b02      	subs	r3, #2
   b62d6:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b62d8:	bf26      	itte	cs
   b62da:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b62dc:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b62de:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b62e0:	f005 fe70 	bl	bbfc4 <os_mutex_recursive_unlock>
        }
   b62e4:	4628      	mov	r0, r5
   b62e6:	bd38      	pop	{r3, r4, r5, pc}

000b62e8 <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b62e8:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b62ea:	2112      	movs	r1, #18
   b62ec:	f7ff ffea 	bl	b62c4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b62f0:	bd08      	pop	{r3, pc}

000b62f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b62f2:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b62f4:	212a      	movs	r1, #42	; 0x2a
   b62f6:	f7ff ffe5 	bl	b62c4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b62fa:	bd08      	pop	{r3, pc}

000b62fc <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>:
uint16_t sysStatusData::get_updatedFrequencyMinutes() const {
   b62fc:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,updatedFrequencyMinutes));
   b62fe:	212c      	movs	r1, #44	; 0x2c
   b6300:	f7ff ffe0 	bl	b62c4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6304:	bd08      	pop	{r3, pc}

000b6306 <_ZNK13sysStatusData8get_RSSIEv>:
uint16_t sysStatusData::get_RSSI() const {
   b6306:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,RSSI));
   b6308:	213c      	movs	r1, #60	; 0x3c
   b630a:	f7ff ffdb 	bl	b62c4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b630e:	bd08      	pop	{r3, pc}

000b6310 <_ZNK17currentStatusData8get_RSSIEv>:
uint16_t currentStatusData::get_RSSI() const {
   b6310:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, RSSI));
   b6312:	2122      	movs	r1, #34	; 0x22
   b6314:	f7ff ffd6 	bl	b62c4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6318:	bd08      	pop	{r3, pc}

000b631a <_ZNK17currentStatusData15get_hourlyCountEv>:
uint16_t currentStatusData::get_hourlyCount() const {
   b631a:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b631c:	2130      	movs	r1, #48	; 0x30
   b631e:	f7ff ffd1 	bl	b62c4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6322:	bd08      	pop	{r3, pc}

000b6324 <_ZNK17currentStatusData14get_dailyCountEv>:
uint16_t currentStatusData::get_dailyCount() const {
   b6324:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b6326:	2132      	movs	r1, #50	; 0x32
   b6328:	f7ff ffcc 	bl	b62c4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b632c:	bd08      	pop	{r3, pc}

000b632e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b632e:	b570      	push	{r4, r5, r6, lr}
   b6330:	4604      	mov	r4, r0
   b6332:	3004      	adds	r0, #4
   b6334:	460d      	mov	r5, r1
   b6336:	4616      	mov	r6, r2
   b6338:	f7ff fd52 	bl	b5de0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b633c:	68e3      	ldr	r3, [r4, #12]
   b633e:	3b02      	subs	r3, #2
   b6340:	42ab      	cmp	r3, r5
   b6342:	d30d      	bcc.n	b6360 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6344:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6346:	5b5a      	ldrh	r2, [r3, r5]
   b6348:	42b2      	cmp	r2, r6
   b634a:	d009      	beq.n	b6360 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b634c:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b634e:	4620      	mov	r0, r4
   b6350:	68a5      	ldr	r5, [r4, #8]
   b6352:	f005 fd2f 	bl	bbdb4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6356:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b6358:	6823      	ldr	r3, [r4, #0]
   b635a:	4620      	mov	r0, r4
   b635c:	691b      	ldr	r3, [r3, #16]
   b635e:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b6360:	6860      	ldr	r0, [r4, #4]
        }
   b6362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6366:	f005 be2d 	b.w	bbfc4 <os_mutex_recursive_unlock>

000b636a <_ZN13sysStatusData15set_magicNumberEt>:
void sysStatusData::set_magicNumber(uint16_t value) {
   b636a:	b508      	push	{r3, lr}
   b636c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, magicNumber), value);
   b636e:	2112      	movs	r1, #18
   b6370:	f7ff ffdd 	bl	b632e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6374:	bd08      	pop	{r3, pc}

000b6376 <_ZN13sysStatusData26set_lastConnectionDurationEt>:
void sysStatusData::set_lastConnectionDuration(uint16_t value) {
   b6376:	b508      	push	{r3, lr}
   b6378:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData,lastConnectionDuration), value);
   b637a:	2128      	movs	r1, #40	; 0x28
   b637c:	f7ff ffd7 	bl	b632e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6380:	bd08      	pop	{r3, pc}

000b6382 <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b6382:	b508      	push	{r3, lr}
   b6384:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b6386:	212a      	movs	r1, #42	; 0x2a
   b6388:	f7ff ffd1 	bl	b632e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b638c:	bd08      	pop	{r3, pc}

000b638e <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>:
void sysStatusData::set_updatedFrequencyMinutes(uint16_t value) {
   b638e:	b508      	push	{r3, lr}
   b6390:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, updatedFrequencyMinutes), value);
   b6392:	212c      	movs	r1, #44	; 0x2c
   b6394:	f7ff ffcb 	bl	b632e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6398:	bd08      	pop	{r3, pc}

000b639a <_ZN13sysStatusData8set_RSSIEt>:
void sysStatusData::set_RSSI(uint16_t value) {
   b639a:	b508      	push	{r3, lr}
   b639c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, RSSI), value);
   b639e:	213c      	movs	r1, #60	; 0x3c
   b63a0:	f7ff ffc5 	bl	b632e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b63a4:	bd08      	pop	{r3, pc}

000b63a6 <_ZN17currentStatusData8set_RSSIEt>:
void currentStatusData::set_RSSI(uint16_t value) {
   b63a6:	b508      	push	{r3, lr}
   b63a8:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, RSSI), value);
   b63aa:	2122      	movs	r1, #34	; 0x22
   b63ac:	f7ff ffbf 	bl	b632e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b63b0:	bd08      	pop	{r3, pc}

000b63b2 <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b63b2:	b508      	push	{r3, lr}
   b63b4:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b63b6:	2130      	movs	r1, #48	; 0x30
   b63b8:	f7ff ffb9 	bl	b632e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b63bc:	bd08      	pop	{r3, pc}

000b63be <_ZN17currentStatusData14set_dailyCountEt>:
void currentStatusData::set_dailyCount(uint16_t value) {
   b63be:	b508      	push	{r3, lr}
   b63c0:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b63c2:	2132      	movs	r1, #50	; 0x32
   b63c4:	f7ff ffb3 	bl	b632e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b63c8:	bd08      	pop	{r3, pc}

000b63ca <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b63ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b63cc:	4604      	mov	r4, r0
   b63ce:	3004      	adds	r0, #4
   b63d0:	460d      	mov	r5, r1
   b63d2:	f7ff fd05 	bl	b5de0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b63d6:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b63d8:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b63da:	3b08      	subs	r3, #8
   b63dc:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b63de:	bf23      	ittte	cs
   b63e0:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b63e2:	1949      	addcs	r1, r1, r5
   b63e4:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b63e8:	2600      	movcc	r6, #0
   b63ea:	bf38      	it	cc
   b63ec:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b63ee:	f005 fde9 	bl	bbfc4 <os_mutex_recursive_unlock>
        }
   b63f2:	4630      	mov	r0, r6
   b63f4:	4639      	mov	r1, r7
   b63f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b63f8 <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b63f8:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b63fa:	2120      	movs	r1, #32
   b63fc:	f7ff ffe5 	bl	b63ca <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b6400:	bd08      	pop	{r3, pc}

000b6402 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6404:	4604      	mov	r4, r0
   b6406:	3004      	adds	r0, #4
   b6408:	460d      	mov	r5, r1
   b640a:	461e      	mov	r6, r3
   b640c:	4617      	mov	r7, r2
   b640e:	f7ff fce7 	bl	b5de0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6412:	68e3      	ldr	r3, [r4, #12]
   b6414:	3b08      	subs	r3, #8
   b6416:	42ab      	cmp	r3, r5
   b6418:	d312      	bcc.n	b6440 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b641a:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b641c:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b641e:	5958      	ldr	r0, [r3, r5]
   b6420:	6851      	ldr	r1, [r2, #4]
   b6422:	42b1      	cmp	r1, r6
   b6424:	bf08      	it	eq
   b6426:	42b8      	cmpeq	r0, r7
   b6428:	d00a      	beq.n	b6440 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b642a:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b642c:	4620      	mov	r0, r4
                        *(T *)p = value;
   b642e:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b6430:	68a5      	ldr	r5, [r4, #8]
   b6432:	f005 fcbf 	bl	bbdb4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6436:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b6438:	6823      	ldr	r3, [r4, #0]
   b643a:	4620      	mov	r0, r4
   b643c:	691b      	ldr	r3, [r3, #16]
   b643e:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b6440:	6860      	ldr	r0, [r4, #4]
        }
   b6442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b6446:	f005 bdbd 	b.w	bbfc4 <os_mutex_recursive_unlock>

000b644a <_ZN13sysStatusData20set_lastHookResponseEx>:
void sysStatusData::set_lastHookResponse(time_t value) {
   b644a:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastHookResponse), value);
   b644c:	2118      	movs	r1, #24
   b644e:	f7ff ffd8 	bl	b6402 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6452:	bd08      	pop	{r3, pc}

000b6454 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b6454:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b6456:	2120      	movs	r1, #32
   b6458:	f7ff ffd3 	bl	b6402 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b645c:	bd08      	pop	{r3, pc}

000b645e <_ZN13sysStatusData25set_alertTimestampGatewayEx>:
void sysStatusData::set_alertTimestampGateway(time_t value) {
   b645e:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, alertTimestampGateway), value);
   b6460:	2130      	movs	r1, #48	; 0x30
   b6462:	f7ff ffce 	bl	b6402 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6466:	bd08      	pop	{r3, pc}

000b6468 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b6468:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b646a:	2128      	movs	r1, #40	; 0x28
   b646c:	f7ff ffc9 	bl	b6402 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6470:	bd08      	pop	{r3, pc}
	...

000b6474 <_ZN17currentStatusData15resetEverythingEv>:
void currentStatusData::resetEverything() {                             // The device is waking up in a new day or is a new install
   b6474:	b510      	push	{r4, lr}
  Log.info("A new day - resetting everything");
   b6476:	4912      	ldr	r1, [pc, #72]	; (b64c0 <_ZN17currentStatusData15resetEverythingEv+0x4c>)
   b6478:	4812      	ldr	r0, [pc, #72]	; (b64c4 <_ZN17currentStatusData15resetEverythingEv+0x50>)
   b647a:	f7fd fe60 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b647e:	f7ff fd8f 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b6482:	2100      	movs	r1, #0
   b6484:	f7ff ff9b 	bl	b63be <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b6488:	f7ff fd8a 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b648c:	2100      	movs	r1, #0
   b648e:	f7ff ff90 	bl	b63b2 <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b6492:	f7ff fd85 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b6496:	4604      	mov	r4, r0
   b6498:	f009 f887 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b649c:	4602      	mov	r2, r0
   b649e:	17c3      	asrs	r3, r0, #31
   b64a0:	4620      	mov	r0, r4
   b64a2:	f7ff ffe1 	bl	b6468 <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b64a6:	f7ff fd39 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b64aa:	2100      	movs	r1, #0
   b64ac:	f7ff febc 	bl	b6228 <_ZN13sysStatusData14set_resetCountEh>
  sysStatus.set_messageCount(0);
   b64b0:	f7ff fd34 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
}
   b64b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_messageCount(0);
   b64b8:	2100      	movs	r1, #0
   b64ba:	f7ff bebb 	b.w	b6234 <_ZN13sysStatusData16set_messageCountEh>
   b64be:	bf00      	nop
   b64c0:	000c1606 	.word	0x000c1606
   b64c4:	2003e654 	.word	0x2003e654

000b64c8 <_ZN17currentStatusData22set_alertTimestampNodeEx>:
void currentStatusData::set_alertTimestampNode(time_t value) {
   b64c8:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b64ca:	2138      	movs	r1, #56	; 0x38
   b64cc:	f7ff ff99 	bl	b6402 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b64d0:	bd08      	pop	{r3, pc}

000b64d2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b64d2:	b538      	push	{r3, r4, r5, lr}
   b64d4:	4604      	mov	r4, r0
   b64d6:	3004      	adds	r0, #4
   b64d8:	460d      	mov	r5, r1
   b64da:	f7ff fc81 	bl	b5de0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b64de:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b64e0:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b64e2:	3b01      	subs	r3, #1
   b64e4:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b64e6:	bf26      	itte	cs
   b64e8:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b64ea:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b64ec:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b64ee:	f005 fd69 	bl	bbfc4 <os_mutex_recursive_unlock>
        }
   b64f2:	4628      	mov	r0, r5
   b64f4:	bd38      	pop	{r3, r4, r5, pc}

000b64f6 <_ZNK17currentStatusData13get_openHoursEv>:
bool currentStatusData::get_openHours() const {
   b64f6:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(CurrentData, openHours));
   b64f8:	2140      	movs	r1, #64	; 0x40
   b64fa:	f7ff ffea 	bl	b64d2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b64fe:	bd08      	pop	{r3, pc}

000b6500 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6500:	b570      	push	{r4, r5, r6, lr}
   b6502:	4604      	mov	r4, r0
   b6504:	3004      	adds	r0, #4
   b6506:	460d      	mov	r5, r1
   b6508:	4616      	mov	r6, r2
   b650a:	f7ff fc69 	bl	b5de0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b650e:	68e3      	ldr	r3, [r4, #12]
   b6510:	3b01      	subs	r3, #1
   b6512:	42ab      	cmp	r3, r5
   b6514:	d30d      	bcc.n	b6532 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6516:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6518:	5d5a      	ldrb	r2, [r3, r5]
   b651a:	42b2      	cmp	r2, r6
   b651c:	d009      	beq.n	b6532 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                        *(T *)p = value;
   b651e:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b6520:	4620      	mov	r0, r4
   b6522:	68a5      	ldr	r5, [r4, #8]
   b6524:	f005 fc46 	bl	bbdb4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6528:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b652a:	6823      	ldr	r3, [r4, #0]
   b652c:	4620      	mov	r0, r4
   b652e:	691b      	ldr	r3, [r3, #16]
   b6530:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b6532:	6860      	ldr	r0, [r4, #4]
        }
   b6534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6538:	f005 bd44 	b.w	bbfc4 <os_mutex_recursive_unlock>

000b653c <_ZN13sysStatusData14set_verizonSIMEb>:
void sysStatusData::set_verizonSIM(bool value) {
   b653c:	b508      	push	{r3, lr}
   b653e:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, verizonSIM), value);
   b6540:	213a      	movs	r1, #58	; 0x3a
   b6542:	f7ff ffdd 	bl	b6500 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b6546:	bd08      	pop	{r3, pc}

000b6548 <_ZN13sysStatusData18loadSystemDefaultsEv>:
void sysStatusData::loadSystemDefaults() {                         // This code is only executed with a new device or a new storage object structure
   b6548:	b508      	push	{r3, lr}
  Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   b654a:	4926      	ldr	r1, [pc, #152]	; (b65e4 <_ZN13sysStatusData18loadSystemDefaultsEv+0x9c>)
   b654c:	4826      	ldr	r0, [pc, #152]	; (b65e8 <_ZN13sysStatusData18loadSystemDefaultsEv+0xa0>)
   b654e:	f7fd fdf6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_nodeNumber(0);                     // Default for a Gateway
   b6552:	f7ff fce3 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b6556:	2100      	movs	r1, #0
   b6558:	f7ff fe54 	bl	b6204 <_ZN13sysStatusData14set_nodeNumberEh>
  sysStatus.set_structuresVersion(1);
   b655c:	f7ff fcde 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b6560:	2101      	movs	r1, #1
   b6562:	f7ff fe55 	bl	b6210 <_ZN13sysStatusData21set_structuresVersionEh>
  sysStatus.set_magicNumber(27617);
   b6566:	f7ff fcd9 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b656a:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b656e:	f7ff fefc 	bl	b636a <_ZN13sysStatusData15set_magicNumberEt>
  sysStatus.set_firmwareRelease(1);
   b6572:	f7ff fcd3 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b6576:	2101      	movs	r1, #1
   b6578:	f7ff fe50 	bl	b621c <_ZN13sysStatusData19set_firmwareReleaseEh>
  sysStatus.set_resetCount(0);
   b657c:	f7ff fcce 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b6580:	2100      	movs	r1, #0
   b6582:	f7ff fe51 	bl	b6228 <_ZN13sysStatusData14set_resetCountEh>
  sysStatus.set_messageCount(0);
   b6586:	f7ff fcc9 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b658a:	2100      	movs	r1, #0
   b658c:	f7ff fe52 	bl	b6234 <_ZN13sysStatusData16set_messageCountEh>
  sysStatus.set_lastHookResponse(0);
   b6590:	f7ff fcc4 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b6594:	2200      	movs	r2, #0
   b6596:	2300      	movs	r3, #0
   b6598:	f7ff ff57 	bl	b644a <_ZN13sysStatusData20set_lastHookResponseEx>
  sysStatus.set_frequencyMinutes(60);
   b659c:	f7ff fcbe 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b65a0:	213c      	movs	r1, #60	; 0x3c
   b65a2:	f7ff feee 	bl	b6382 <_ZN13sysStatusData20set_frequencyMinutesEt>
  sysStatus.set_alertCodeGateway(0);
   b65a6:	f7ff fcb9 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b65aa:	2100      	movs	r1, #0
   b65ac:	f7ff fe48 	bl	b6240 <_ZN13sysStatusData20set_alertCodeGatewayEh>
  sysStatus.set_alertTimestampGateway(0);
   b65b0:	f7ff fcb4 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b65b4:	2300      	movs	r3, #0
   b65b6:	2200      	movs	r2, #0
   b65b8:	f7ff ff51 	bl	b645e <_ZN13sysStatusData25set_alertTimestampGatewayEx>
  sysStatus.set_openTime(6);
   b65bc:	f7ff fcae 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b65c0:	2106      	movs	r1, #6
   b65c2:	f7ff fe43 	bl	b624c <_ZN13sysStatusData12set_openTimeEh>
  sysStatus.set_closeTime(22);
   b65c6:	f7ff fca9 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b65ca:	2116      	movs	r1, #22
   b65cc:	f7ff fe44 	bl	b6258 <_ZN13sysStatusData13set_closeTimeEh>
  sysStatus.set_verizonSIM(false);
   b65d0:	f7ff fca4 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b65d4:	2100      	movs	r1, #0
   b65d6:	f7ff ffb1 	bl	b653c <_ZN13sysStatusData14set_verizonSIMEb>
}
   b65da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  setGatewayConfiguration();                             // Here we will fix the settings specific to the gateway
   b65de:	f000 bb71 	b.w	b6cc4 <_Z23setGatewayConfigurationv>
   b65e2:	bf00      	nop
   b65e4:	000c1627 	.word	0x000c1627
   b65e8:	2003e654 	.word	0x2003e654

000b65ec <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b65ec:	b508      	push	{r3, lr}
    fram.begin();
   b65ee:	6a00      	ldr	r0, [r0, #32]
   b65f0:	f002 ff06 	bl	b9400 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b65f4:	f7ff fc92 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b65f8:	6803      	ldr	r3, [r0, #0]
   b65fa:	685b      	ldr	r3, [r3, #4]
   b65fc:	4798      	blx	r3
    sysStatus.loadSystemDefaults();
   b65fe:	f7ff fc8d 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b6602:	f7ff ffa1 	bl	b6548 <_ZN13sysStatusData18loadSystemDefaultsEv>
}
   b6606:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setGatewayConfiguration();                             // Here we will fix the settings specific to the node
   b660a:	f000 bb5b 	b.w	b6cc4 <_Z23setGatewayConfigurationv>

000b660e <_ZN13sysStatusData17checkSystemValuesEv>:
void sysStatusData::checkSystemValues() {               // Values out of bounds indicates an initialization error - will reload defaults
   b660e:	b510      	push	{r4, lr}
   b6610:	4604      	mov	r4, r0
    if (sysStatus.get_openTime() > 12 || sysStatus.get_closeTime() <12) reset = true;
   b6612:	f7ff fc83 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b6616:	f7ff fda0 	bl	b615a <_ZNK13sysStatusData12get_openTimeEv>
   b661a:	280c      	cmp	r0, #12
   b661c:	d904      	bls.n	b6628 <_ZN13sysStatusData17checkSystemValuesEv+0x1a>
    if (reset) sysStatusData::loadSystemDefaults();
   b661e:	4620      	mov	r0, r4
}
   b6620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (reset) sysStatusData::loadSystemDefaults();
   b6624:	f7ff bf90 	b.w	b6548 <_ZN13sysStatusData18loadSystemDefaultsEv>
    if (sysStatus.get_openTime() > 12 || sysStatus.get_closeTime() <12) reset = true;
   b6628:	f7ff fc78 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b662c:	f7ff fd9a 	bl	b6164 <_ZNK13sysStatusData13get_closeTimeEv>
   b6630:	280b      	cmp	r0, #11
   b6632:	d9f4      	bls.n	b661e <_ZN13sysStatusData17checkSystemValuesEv+0x10>
}
   b6634:	bd10      	pop	{r4, pc}

000b6636 <_ZN17currentStatusData13set_openHoursEb>:
void currentStatusData::set_openHours(bool value) {
   b6636:	b508      	push	{r3, lr}
   b6638:	460a      	mov	r2, r1
    setValue<bool>(offsetof(CurrentData, openHours), value);
   b663a:	2140      	movs	r1, #64	; 0x40
   b663c:	f7ff ff60 	bl	b6500 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b6640:	bd08      	pop	{r3, pc}
	...

000b6644 <_GLOBAL__sub_I_fram>:
}
   b6644:	b510      	push	{r4, lr}
MB85RC64 fram(Wire, 0);
   b6646:	f009 fa39 	bl	bfabc <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b664a:	4c05      	ldr	r4, [pc, #20]	; (b6660 <_GLOBAL__sub_I_fram+0x1c>)
   b664c:	4601      	mov	r1, r0
   b664e:	2300      	movs	r3, #0
   b6650:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b6654:	4620      	mov	r0, r4
   b6656:	f002 fec9 	bl	b93ec <_ZN6MB85RCC1ER7TwoWireji>
   b665a:	4b02      	ldr	r3, [pc, #8]	; (b6664 <_GLOBAL__sub_I_fram+0x20>)
   b665c:	6023      	str	r3, [r4, #0]
}
   b665e:	bd10      	pop	{r4, pc}
   b6660:	2003e3e4 	.word	0x2003e3e4
   b6664:	000c1648 	.word	0x000c1648

000b6668 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b6668:	4770      	bx	lr

000b666a <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b666a:	6a00      	ldr	r0, [r0, #32]
   b666c:	6803      	ldr	r3, [r0, #0]
   b666e:	68db      	ldr	r3, [r3, #12]
   b6670:	4718      	bx	r3

000b6672 <_ZN18Particle_FunctionsD1Ev>:

Particle_Functions::Particle_Functions() {
}

Particle_Functions::~Particle_Functions() {
}
   b6672:	4770      	bx	lr

000b6674 <_ZN18Particle_FunctionsD0Ev>:
Particle_Functions::~Particle_Functions() {
   b6674:	b510      	push	{r4, lr}
}
   b6676:	2104      	movs	r1, #4
Particle_Functions::~Particle_Functions() {
   b6678:	4604      	mov	r4, r0
}
   b667a:	f7fd fd10 	bl	b409e <_ZdlPvj>
   b667e:	4620      	mov	r0, r4
   b6680:	bd10      	pop	{r4, pc}
	...

000b6684 <_Z15reportFrequencyv>:
/**
 * @brief Particle cacluated variable
 * 
 * @return String with the number of minutes for reporting frequency
 */
String reportFrequency() {							// Calculated variavble for the report frequency which is an unint16_t and does nto display properly.
   b6684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6686:	4604      	mov	r4, r0
    char reportStr[16];
    snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.get_frequencyMinutes());
   b6688:	f7ff fc48 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b668c:	f7ff fe31 	bl	b62f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b6690:	4a06      	ldr	r2, [pc, #24]	; (b66ac <_Z15reportFrequencyv+0x28>)
   b6692:	4603      	mov	r3, r0
   b6694:	2110      	movs	r1, #16
   b6696:	4668      	mov	r0, sp
   b6698:	f006 f888 	bl	bc7ac <snprintf>
    return reportStr;
   b669c:	4669      	mov	r1, sp
   b669e:	4620      	mov	r0, r4
   b66a0:	f008 fc1b 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
}
   b66a4:	4620      	mov	r0, r4
   b66a6:	b004      	add	sp, #16
   b66a8:	bd10      	pop	{r4, pc}
   b66aa:	bf00      	nop
   b66ac:	000c16e0 	.word	0x000c16e0

000b66b0 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b66b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
   b66b2:	6802      	ldr	r2, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b66b4:	6853      	ldr	r3, [r2, #4]
   b66b6:	6890      	ldr	r0, [r2, #8]
   b66b8:	6814      	ldr	r4, [r2, #0]
   b66ba:	105e      	asrs	r6, r3, #1
   b66bc:	eb00 0563 	add.w	r5, r0, r3, asr #1
   b66c0:	07db      	lsls	r3, r3, #31
   b66c2:	bf48      	it	mi
   b66c4:	5983      	ldrmi	r3, [r0, r6]
   b66c6:	4668      	mov	r0, sp
   b66c8:	bf48      	it	mi
   b66ca:	591c      	ldrmi	r4, [r3, r4]
   b66cc:	f008 fc36 	bl	bef3c <_ZN6StringC1EOS_>
   b66d0:	4669      	mov	r1, sp
   b66d2:	4628      	mov	r0, r5
   b66d4:	47a0      	blx	r4
   b66d6:	4604      	mov	r4, r0
   b66d8:	4668      	mov	r0, sp
   b66da:	f008 fbb3 	bl	bee44 <_ZN6StringD1Ev>
      }
   b66de:	4620      	mov	r0, r4
   b66e0:	b004      	add	sp, #16
   b66e2:	bd70      	pop	{r4, r5, r6, pc}

000b66e4 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b66e4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b66e6:	b538      	push	{r3, r4, r5, lr}
   b66e8:	4604      	mov	r4, r0
	switch (__op)
   b66ea:	d102      	bne.n	b66f2 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b66ec:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b66ee:	6023      	str	r3, [r4, #0]
	}
   b66f0:	e003      	b.n	b66fa <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
	  switch (__op)
   b66f2:	2a02      	cmp	r2, #2
   b66f4:	d003      	beq.n	b66fe <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
   b66f6:	2a03      	cmp	r2, #3
   b66f8:	d00d      	beq.n	b6716 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x32>
      }
   b66fa:	2000      	movs	r0, #0
   b66fc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b66fe:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b6700:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6702:	f7fd fcc8 	bl	b4096 <_Znwj>
   b6706:	4603      	mov	r3, r0
   b6708:	2800      	cmp	r0, #0
   b670a:	d0f0      	beq.n	b66ee <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
   b670c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6710:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b6714:	e7eb      	b.n	b66ee <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6716:	6800      	ldr	r0, [r0, #0]
   b6718:	2800      	cmp	r0, #0
   b671a:	d0ee      	beq.n	b66fa <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   b671c:	210c      	movs	r1, #12
   b671e:	f7fd fcbe 	bl	b409e <_ZdlPvj>
   b6722:	e7ea      	b.n	b66fa <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>

000b6724 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   b6724:	b530      	push	{r4, r5, lr}
   b6726:	b085      	sub	sp, #20
   b6728:	4603      	mov	r3, r0
   b672a:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   b672c:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   b672e:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   b6730:	4798      	blx	r3
	inline unsigned int length(void) const {return len;}
   b6732:	9802      	ldr	r0, [sp, #8]
        size = str.length();
   b6734:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   b6736:	f006 f811 	bl	bc75c <malloc>
   b673a:	6028      	str	r0, [r5, #0]
        if (!data) {
   b673c:	b150      	cbz	r0, b6754 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   b673e:	6822      	ldr	r2, [r4, #0]
   b6740:	9900      	ldr	r1, [sp, #0]
   b6742:	f009 ff57 	bl	c05f4 <memcpy>
        return 0;
   b6746:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   b6748:	4668      	mov	r0, sp
   b674a:	f008 fb7b 	bl	bee44 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   b674e:	4620      	mov	r0, r4
   b6750:	b005      	add	sp, #20
   b6752:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   b6754:	4c00      	ldr	r4, [pc, #0]	; (b6758 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   b6756:	e7f7      	b.n	b6748 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   b6758:	fffffefc 	.word	0xfffffefc

000b675c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b675c:	4b0a      	ldr	r3, [pc, #40]	; (b6788 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b675e:	b510      	push	{r4, lr}
   b6760:	4604      	mov	r4, r0
   b6762:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b6764:	f007 f9e2 	bl	bdb2c <_ZN5spark10LogManager8instanceEv>
   b6768:	4621      	mov	r1, r4
   b676a:	f007 fbe6 	bl	bdf3a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b676e:	f009 f803 	bl	bf778 <_Z16_fetch_usbserialv>
   b6772:	f008 fff3 	bl	bf75c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b6776:	4620      	mov	r0, r4
   b6778:	4b04      	ldr	r3, [pc, #16]	; (b678c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b677a:	f840 3b04 	str.w	r3, [r0], #4
   b677e:	f007 fa77 	bl	bdc70 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b6782:	4620      	mov	r0, r4
   b6784:	bd10      	pop	{r4, pc}
   b6786:	bf00      	nop
   b6788:	000c1868 	.word	0x000c1868
   b678c:	000c1850 	.word	0x000c1850

000b6790 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b6790:	b510      	push	{r4, lr}
   b6792:	4604      	mov	r4, r0
    }
   b6794:	f7ff ffe2 	bl	b675c <_ZN5spark16SerialLogHandlerD1Ev>
   b6798:	4620      	mov	r0, r4
   b679a:	2124      	movs	r1, #36	; 0x24
   b679c:	f7fd fc7f 	bl	b409e <_ZdlPvj>
   b67a0:	4620      	mov	r0, r4
   b67a2:	bd10      	pop	{r4, pc}

000b67a4 <_ZN18Particle_Functions12setFrequencyE6String>:
    // Put your code to run during the application thread loop here
}


int Particle_Functions::setFrequency(String command)
{
   b67a4:	b510      	push	{r4, lr}
   b67a6:	460b      	mov	r3, r1
   b67a8:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b67aa:	6818      	ldr	r0, [r3, #0]
   b67ac:	220a      	movs	r2, #10
   b67ae:	a903      	add	r1, sp, #12
   b67b0:	f00a f8f4 	bl	c099c <strtol>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b67b4:	2878      	cmp	r0, #120	; 0x78
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b67b6:	4604      	mov	r4, r0
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b67b8:	d834      	bhi.n	b6824 <_ZN18Particle_Functions12setFrequencyE6String+0x80>
  sysStatus.set_updatedFrequencyMinutes(tempTime);
   b67ba:	f7ff fbaf 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b67be:	b2a1      	uxth	r1, r4
   b67c0:	f7ff fde5 	bl	b638e <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",sysStatus.get_updatedFrequencyMinutes());
   b67c4:	f7ff fbaa 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b67c8:	f7ff fd98 	bl	b62fc <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b67cc:	4a17      	ldr	r2, [pc, #92]	; (b682c <_ZN18Particle_Functions12setFrequencyE6String+0x88>)
   b67ce:	4603      	mov	r3, r0
   b67d0:	f44f 7180 	mov.w	r1, #256	; 0x100
   b67d4:	a806      	add	r0, sp, #24
   b67d6:	f005 ffe9 	bl	bc7ac <snprintf>
  Log.info(data);
   b67da:	4815      	ldr	r0, [pc, #84]	; (b6830 <_ZN18Particle_Functions12setFrequencyE6String+0x8c>)
   b67dc:	a906      	add	r1, sp, #24
   b67de:	f7fd fcae 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b67e2:	f005 ff1b 	bl	bc61c <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   b67e6:	b1d8      	cbz	r0, b6820 <_ZN18Particle_Functions12setFrequencyE6String+0x7c>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b67e8:	4b12      	ldr	r3, [pc, #72]	; (b6834 <_ZN18Particle_Functions12setFrequencyE6String+0x90>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b67ea:	4913      	ldr	r1, [pc, #76]	; (b6838 <_ZN18Particle_Functions12setFrequencyE6String+0x94>)
   b67ec:	781b      	ldrb	r3, [r3, #0]
   b67ee:	f88d 3000 	strb.w	r3, [sp]
   b67f2:	aa06      	add	r2, sp, #24
   b67f4:	233c      	movs	r3, #60	; 0x3c
   b67f6:	a804      	add	r0, sp, #16
   b67f8:	f006 fafc 	bl	bcdf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   b67fc:	9c05      	ldr	r4, [sp, #20]
   b67fe:	b17c      	cbz	r4, b6820 <_ZN18Particle_Functions12setFrequencyE6String+0x7c>
      if (--_M_use_count == 0)
   b6800:	6863      	ldr	r3, [r4, #4]
   b6802:	3b01      	subs	r3, #1
   b6804:	6063      	str	r3, [r4, #4]
   b6806:	b95b      	cbnz	r3, b6820 <_ZN18Particle_Functions12setFrequencyE6String+0x7c>
          _M_dispose();
   b6808:	6823      	ldr	r3, [r4, #0]
   b680a:	4620      	mov	r0, r4
   b680c:	689b      	ldr	r3, [r3, #8]
   b680e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6810:	68a3      	ldr	r3, [r4, #8]
   b6812:	3b01      	subs	r3, #1
   b6814:	60a3      	str	r3, [r4, #8]
   b6816:	b91b      	cbnz	r3, b6820 <_ZN18Particle_Functions12setFrequencyE6String+0x7c>
            _M_destroy();
   b6818:	6823      	ldr	r3, [r4, #0]
   b681a:	4620      	mov	r0, r4
   b681c:	68db      	ldr	r3, [r3, #12]
   b681e:	4798      	blx	r3
  return 1;
   b6820:	2001      	movs	r0, #1
   b6822:	e000      	b.n	b6826 <_ZN18Particle_Functions12setFrequencyE6String+0x82>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b6824:	2000      	movs	r0, #0
}
   b6826:	b046      	add	sp, #280	; 0x118
   b6828:	bd10      	pop	{r4, pc}
   b682a:	bf00      	nop
   b682c:	000c16eb 	.word	0x000c16eb
   b6830:	2003e654 	.word	0x2003e654
   b6834:	2003e400 	.word	0x2003e400
   b6838:	000c172b 	.word	0x000c172b

000b683c <_ZN18Particle_Functions8instanceEv>:
Particle_Functions &Particle_Functions::instance() {
   b683c:	b510      	push	{r4, lr}
    if (!_instance) {
   b683e:	4c06      	ldr	r4, [pc, #24]	; (b6858 <_ZN18Particle_Functions8instanceEv+0x1c>)
   b6840:	6823      	ldr	r3, [r4, #0]
   b6842:	b933      	cbnz	r3, b6852 <_ZN18Particle_Functions8instanceEv+0x16>
        _instance = new Particle_Functions();
   b6844:	2004      	movs	r0, #4
   b6846:	f7fd fc26 	bl	b4096 <_Znwj>
   b684a:	b108      	cbz	r0, b6850 <_ZN18Particle_Functions8instanceEv+0x14>
Particle_Functions::Particle_Functions() {
   b684c:	4b03      	ldr	r3, [pc, #12]	; (b685c <_ZN18Particle_Functions8instanceEv+0x20>)
   b684e:	6003      	str	r3, [r0, #0]
        _instance = new Particle_Functions();
   b6850:	6020      	str	r0, [r4, #0]
}
   b6852:	6820      	ldr	r0, [r4, #0]
   b6854:	bd10      	pop	{r4, pc}
   b6856:	bf00      	nop
   b6858:	2003e404 	.word	0x2003e404
   b685c:	000c1880 	.word	0x000c1880

000b6860 <_ZN18Particle_Functions5setupEv>:
void Particle_Functions::setup() {
   b6860:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6862:	4920      	ldr	r1, [pc, #128]	; (b68e4 <_ZN18Particle_Functions5setupEv+0x84>)
void Particle_Functions::setup() {
   b6864:	4605      	mov	r5, r0
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6866:	4820      	ldr	r0, [pc, #128]	; (b68e8 <_ZN18Particle_Functions5setupEv+0x88>)
   b6868:	f7fd fc69 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        extra.copy = [](const void* var, void** data, size_t* size) {
   b686c:	4b1f      	ldr	r3, [pc, #124]	; (b68ec <_ZN18Particle_Functions5setupEv+0x8c>)
   b686e:	9302      	str	r3, [sp, #8]
        spark_variable_t extra = {};
   b6870:	2400      	movs	r4, #0
        extra.size = sizeof(extra);
   b6872:	260c      	movs	r6, #12
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b6874:	491e      	ldr	r1, [pc, #120]	; (b68f0 <_ZN18Particle_Functions5setupEv+0x90>)
   b6876:	481f      	ldr	r0, [pc, #124]	; (b68f4 <_ZN18Particle_Functions5setupEv+0x94>)
   b6878:	466b      	mov	r3, sp
   b687a:	2204      	movs	r2, #4
        spark_variable_t extra = {};
   b687c:	e9cd 4400 	strd	r4, r4, [sp]
        extra.size = sizeof(extra);
   b6880:	f8ad 6000 	strh.w	r6, [sp]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b6884:	f005 feaa 	bl	bc5dc <spark_variable>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6888:	4630      	mov	r0, r6
    _Function_base() : _M_manager(nullptr) { }
   b688a:	9402      	str	r4, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b688c:	f7fd fc03 	bl	b4096 <_Znwj>
   b6890:	b118      	cbz	r0, b689a <_ZN18Particle_Functions5setupEv+0x3a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6892:	4b19      	ldr	r3, [pc, #100]	; (b68f8 <_ZN18Particle_Functions5setupEv+0x98>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6894:	6085      	str	r5, [r0, #8]
   b6896:	e9c0 3400 	strd	r3, r4, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b689a:	4b18      	ldr	r3, [pc, #96]	; (b68fc <_ZN18Particle_Functions5setupEv+0x9c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b689c:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
   b689e:	9303      	str	r3, [sp, #12]
            auto wrapper = new user_std_function_int_str_t(func);
   b68a0:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   b68a2:	4b17      	ldr	r3, [pc, #92]	; (b6900 <_ZN18Particle_Functions5setupEv+0xa0>)
   b68a4:	9302      	str	r3, [sp, #8]
   b68a6:	f7fd fbf6 	bl	b4096 <_Znwj>
   b68aa:	4604      	mov	r4, r0
   b68ac:	b178      	cbz	r0, b68ce <_ZN18Particle_Functions5setupEv+0x6e>
    _Function_base() : _M_manager(nullptr) { }
   b68ae:	2300      	movs	r3, #0
   b68b0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b68b2:	9b02      	ldr	r3, [sp, #8]
      if (static_cast<bool>(__x))
   b68b4:	b133      	cbz	r3, b68c4 <_ZN18Particle_Functions5setupEv+0x64>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b68b6:	2202      	movs	r2, #2
   b68b8:	4669      	mov	r1, sp
   b68ba:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b68bc:	9b03      	ldr	r3, [sp, #12]
   b68be:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b68c0:	9b02      	ldr	r3, [sp, #8]
   b68c2:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
   b68c4:	4a0f      	ldr	r2, [pc, #60]	; (b6904 <_ZN18Particle_Functions5setupEv+0xa4>)
   b68c6:	4810      	ldr	r0, [pc, #64]	; (b6908 <_ZN18Particle_Functions5setupEv+0xa8>)
   b68c8:	4621      	mov	r1, r4
   b68ca:	f006 f982 	bl	bcbd2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
   b68ce:	9b02      	ldr	r3, [sp, #8]
   b68d0:	b11b      	cbz	r3, b68da <_ZN18Particle_Functions5setupEv+0x7a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b68d2:	4669      	mov	r1, sp
   b68d4:	2203      	movs	r2, #3
   b68d6:	4608      	mov	r0, r1
   b68d8:	4798      	blx	r3
}
   b68da:	b004      	add	sp, #16
   b68dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    takeMeasurements();                               // Initialize sensor values
   b68e0:	f000 bae6 	b.w	b6eb0 <_Z16takeMeasurementsv>
   b68e4:	000c1730 	.word	0x000c1730
   b68e8:	2003e654 	.word	0x2003e654
   b68ec:	000b6725 	.word	0x000b6725
   b68f0:	000b6685 	.word	0x000b6685
   b68f4:	000c175e 	.word	0x000c175e
   b68f8:	000b67a5 	.word	0x000b67a5
   b68fc:	000b66b1 	.word	0x000b66b1
   b6900:	000b66e5 	.word	0x000b66e5
   b6904:	000c1772 	.word	0x000c1772
   b6908:	000bcbab 	.word	0x000bcbab

000b690c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b690c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b690e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b6912:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6914:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6916:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b691a:	42ae      	cmp	r6, r5
   b691c:	d004      	beq.n	b6928 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b691e:	4628      	mov	r0, r5
   b6920:	f008 fa90 	bl	bee44 <_ZN6StringD1Ev>
   b6924:	3514      	adds	r5, #20
   b6926:	e7f8      	b.n	b691a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b6928:	6820      	ldr	r0, [r4, #0]
   b692a:	f005 ff1f 	bl	bc76c <free>
    AllocatorT::free(data_);
}
   b692e:	4620      	mov	r0, r4
   b6930:	bd70      	pop	{r4, r5, r6, pc}

000b6932 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6932:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6936:	4604      	mov	r4, r0
   b6938:	460d      	mov	r5, r1
   b693a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b693c:	d916      	bls.n	b696c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b693e:	4290      	cmp	r0, r2
   b6940:	d215      	bcs.n	b696e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b6942:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6946:	1a75      	subs	r5, r6, r1
   b6948:	f1a1 0714 	sub.w	r7, r1, #20
   b694c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b694e:	42b7      	cmp	r7, r6
   b6950:	d01c      	beq.n	b698c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b6952:	b12c      	cbz	r4, b6960 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b6954:	4631      	mov	r1, r6
   b6956:	4620      	mov	r0, r4
   b6958:	f008 faf0 	bl	bef3c <_ZN6StringC1EOS_>
   b695c:	7c33      	ldrb	r3, [r6, #16]
   b695e:	7423      	strb	r3, [r4, #16]
   b6960:	4630      	mov	r0, r6
   b6962:	f008 fa6f 	bl	bee44 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6966:	3e14      	subs	r6, #20
   b6968:	3c14      	subs	r4, #20
   b696a:	e7f0      	b.n	b694e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b696c:	d00e      	beq.n	b698c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b696e:	42b5      	cmp	r5, r6
   b6970:	d00c      	beq.n	b698c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b6972:	b12c      	cbz	r4, b6980 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b6974:	4629      	mov	r1, r5
   b6976:	4620      	mov	r0, r4
   b6978:	f008 fae0 	bl	bef3c <_ZN6StringC1EOS_>
   b697c:	7c2b      	ldrb	r3, [r5, #16]
   b697e:	7423      	strb	r3, [r4, #16]
   b6980:	4628      	mov	r0, r5
   b6982:	f008 fa5f 	bl	bee44 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6986:	3514      	adds	r5, #20
   b6988:	3414      	adds	r4, #20
   b698a:	e7f0      	b.n	b696e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b698c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b698e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b698e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b6992:	2300      	movs	r3, #0
   b6994:	e9c0 3300 	strd	r3, r3, [r0]
   b6998:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b699a:	684f      	ldr	r7, [r1, #4]
   b699c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b699e:	4604      	mov	r4, r0
   b69a0:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b69a2:	dd23      	ble.n	b69ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b69a4:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b69a8:	fb08 f007 	mul.w	r0, r8, r7
   b69ac:	f005 fed6 	bl	bc75c <malloc>
            if (!d) {
   b69b0:	4605      	mov	r5, r0
   b69b2:	b1d8      	cbz	r0, b69ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b69b4:	e9d4 1200 	ldrd	r1, r2, [r4]
   b69b8:	fb08 1202 	mla	r2, r8, r2, r1
   b69bc:	f7ff ffb9 	bl	b6932 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b69c0:	6820      	ldr	r0, [r4, #0]
   b69c2:	f005 fed3 	bl	bc76c <free>
        data_ = d;
   b69c6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b69c8:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b69ca:	e9d6 7300 	ldrd	r7, r3, [r6]
   b69ce:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b69d2:	45b8      	cmp	r8, r7
   b69d4:	d008      	beq.n	b69e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b69d6:	4639      	mov	r1, r7
   b69d8:	4628      	mov	r0, r5
   b69da:	f008 fac9 	bl	bef70 <_ZN6StringC1ERKS_>
   b69de:	7c3b      	ldrb	r3, [r7, #16]
   b69e0:	742b      	strb	r3, [r5, #16]
   b69e2:	3714      	adds	r7, #20
   b69e4:	3514      	adds	r5, #20
   b69e6:	e7f4      	b.n	b69d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b69e8:	6873      	ldr	r3, [r6, #4]
   b69ea:	6063      	str	r3, [r4, #4]
}
   b69ec:	4620      	mov	r0, r4
   b69ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b69f4 <_GLOBAL__sub_I_openTimeStr>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   b69f4:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b69f6:	4b27      	ldr	r3, [pc, #156]	; (b6a94 <_GLOBAL__sub_I_openTimeStr+0xa0>)
    SleepResult() {}
   b69f8:	4a27      	ldr	r2, [pc, #156]	; (b6a98 <_GLOBAL__sub_I_openTimeStr+0xa4>)
   b69fa:	2501      	movs	r5, #1
   b69fc:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b69fe:	4b27      	ldr	r3, [pc, #156]	; (b6a9c <_GLOBAL__sub_I_openTimeStr+0xa8>)
   b6a00:	2400      	movs	r4, #0
   b6a02:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b6a04:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6a06:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b6a0a:	2002      	movs	r0, #2
   b6a0c:	f005 fd74 	bl	bc4f8 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b6a10:	4621      	mov	r1, r4
   b6a12:	4628      	mov	r0, r5
   b6a14:	f005 fd88 	bl	bc528 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b6a18:	4629      	mov	r1, r5
   b6a1a:	2004      	movs	r0, #4
   b6a1c:	f005 faea 	bl	bbff4 <HAL_Feature_Set>
        capacity_(0) {
   b6a20:	e9cd 4400 	strd	r4, r4, [sp]
   b6a24:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b6a26:	f008 fea7 	bl	bf778 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b6a2a:	4c1d      	ldr	r4, [pc, #116]	; (b6aa0 <_GLOBAL__sub_I_openTimeStr+0xac>)
   b6a2c:	4605      	mov	r5, r0
   b6a2e:	4669      	mov	r1, sp
   b6a30:	a803      	add	r0, sp, #12
   b6a32:	f7ff ffac 	bl	b698e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6a36:	4626      	mov	r6, r4
        stream_(&stream) {
   b6a38:	a903      	add	r1, sp, #12
   b6a3a:	a806      	add	r0, sp, #24
   b6a3c:	f7ff ffa7 	bl	b698e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6a40:	4b18      	ldr	r3, [pc, #96]	; (b6aa4 <_GLOBAL__sub_I_openTimeStr+0xb0>)
   b6a42:	f846 3b04 	str.w	r3, [r6], #4
   b6a46:	a906      	add	r1, sp, #24
   b6a48:	a809      	add	r0, sp, #36	; 0x24
   b6a4a:	f7ff ffa0 	bl	b698e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6a4e:	aa09      	add	r2, sp, #36	; 0x24
   b6a50:	211e      	movs	r1, #30
   b6a52:	4630      	mov	r0, r6
   b6a54:	f007 fb54 	bl	be100 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6a58:	a809      	add	r0, sp, #36	; 0x24
   b6a5a:	f7ff ff57 	bl	b690c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b6a5e:	a806      	add	r0, sp, #24
   b6a60:	f7ff ff54 	bl	b690c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6a64:	4b10      	ldr	r3, [pc, #64]	; (b6aa8 <_GLOBAL__sub_I_openTimeStr+0xb4>)
   b6a66:	6023      	str	r3, [r4, #0]
   b6a68:	6225      	str	r5, [r4, #32]
   b6a6a:	a803      	add	r0, sp, #12
   b6a6c:	f7ff ff4e 	bl	b690c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6a70:	4b0e      	ldr	r3, [pc, #56]	; (b6aac <_GLOBAL__sub_I_openTimeStr+0xb8>)
   b6a72:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b6a74:	f008 fe80 	bl	bf778 <_Z16_fetch_usbserialv>
   b6a78:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6a7c:	f008 fe6a 	bl	bf754 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b6a80:	f007 f854 	bl	bdb2c <_ZN5spark10LogManager8instanceEv>
   b6a84:	4621      	mov	r1, r4
   b6a86:	f007 fa11 	bl	bdeac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b6a8a:	4668      	mov	r0, sp
   b6a8c:	f7ff ff3e 	bl	b690c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6a90:	b00c      	add	sp, #48	; 0x30
   b6a92:	bd70      	pop	{r4, r5, r6, pc}
   b6a94:	2003e400 	.word	0x2003e400
   b6a98:	ffff0000 	.word	0xffff0000
   b6a9c:	2003e3f4 	.word	0x2003e3f4
   b6aa0:	2003e408 	.word	0x2003e408
   b6aa4:	000c1850 	.word	0x000c1850
   b6aa8:	000c253c 	.word	0x000c253c
   b6aac:	000c1868 	.word	0x000c1868

000b6ab0 <_ZN18Particle_Functions22disconnectFromParticleEv>:
{
   b6ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6ab4:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b6ab6:	f008 fd78 	bl	bf5aa <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b6aba:	4943      	ldr	r1, [pc, #268]	; (b6bc8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x118>)
  time_t startTime = Time.now();
   b6abc:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b6abe:	4843      	ldr	r0, [pc, #268]	; (b6bcc <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b6ac0:	f7fd fb3d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  detachInterrupt(BUTTON_PIN);                                         // Stop watching the userSwitch as we will no longer be connected
   b6ac4:	4b42      	ldr	r3, [pc, #264]	; (b6bd0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x120>)
   b6ac6:	8818      	ldrh	r0, [r3, #0]
   b6ac8:	f006 fc72 	bl	bd3b0 <_Z15detachInterruptt>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b6acc:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b6ace:	a801      	add	r0, sp, #4
   b6ad0:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b6ad4:	f8ad 400c 	strh.w	r4, [sp, #12]
   b6ad8:	f006 f88c 	bl	bcbf4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b6adc:	4620      	mov	r0, r4
   b6ade:	f005 fab9 	bl	bc054 <hal_timer_millis>
        while (_while() && !_condition()) {
   b6ae2:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b6ae6:	4604      	mov	r4, r0
   b6ae8:	2000      	movs	r0, #0
   b6aea:	f005 fab3 	bl	bc054 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b6aee:	1b03      	subs	r3, r0, r4
   b6af0:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b6af4:	42b3      	cmp	r3, r6
   b6af6:	f171 0300 	sbcs.w	r3, r1, #0
   b6afa:	d205      	bcs.n	b6b08 <_ZN18Particle_Functions22disconnectFromParticleEv+0x58>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6afc:	f005 fd8e 	bl	bc61c <spark_cloud_flag_connected>
   b6b00:	b110      	cbz	r0, b6b08 <_ZN18Particle_Functions22disconnectFromParticleEv+0x58>
            spark_process();
   b6b02:	f005 fd7b 	bl	bc5fc <spark_process>
        while (_while() && !_condition()) {
   b6b06:	e7ef      	b.n	b6ae8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x38>
   b6b08:	f005 fd88 	bl	bc61c <spark_cloud_flag_connected>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6b0c:	f005 fa92 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6b10:	4f30      	ldr	r7, [pc, #192]	; (b6bd4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b6b12:	6038      	str	r0, [r7, #0]
    		spark_process();
   b6b14:	f005 fd72 	bl	bc5fc <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6b18:	f005 fd80 	bl	bc61c <spark_cloud_flag_connected>
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b6b1c:	4604      	mov	r4, r0
   b6b1e:	b140      	cbz	r0, b6b32 <_ZN18Particle_Functions22disconnectFromParticleEv+0x82>
    Log.info("Failed to disconnect from Particle");
   b6b20:	492d      	ldr	r1, [pc, #180]	; (b6bd8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x128>)
   b6b22:	482a      	ldr	r0, [pc, #168]	; (b6bcc <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b6b24:	f7fd fb0b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b6b28:	2400      	movs	r4, #0
   b6b2a:	4620      	mov	r0, r4
   b6b2c:	b005      	add	sp, #20
   b6b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b6b32:	f008 fd3a 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b6b36:	4929      	ldr	r1, [pc, #164]	; (b6bdc <_ZN18Particle_Functions22disconnectFromParticleEv+0x12c>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b6b38:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b6be0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x130>
   b6b3c:	1b42      	subs	r2, r0, r5
   b6b3e:	4823      	ldr	r0, [pc, #140]	; (b6bcc <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b6b40:	f7fd fafd 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b6b44:	f008 fd31 	bl	bf5aa <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6b48:	4622      	mov	r2, r4
   b6b4a:	2102      	movs	r1, #2
   b6b4c:	4606      	mov	r6, r0
   b6b4e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b6b52:	f005 fdb3 	bl	bc6bc <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b6b56:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b6b5a:	4623      	mov	r3, r4
   b6b5c:	4622      	mov	r2, r4
   b6b5e:	4621      	mov	r1, r4
   b6b60:	f005 fdc4 	bl	bc6ec <network_off>
        return hal_timer_millis(nullptr);
   b6b64:	4620      	mov	r0, r4
   b6b66:	f005 fa75 	bl	bc054 <hal_timer_millis>
        while (_while() && !_condition()) {
   b6b6a:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b6b6e:	4605      	mov	r5, r0
   b6b70:	2000      	movs	r0, #0
   b6b72:	f005 fa6f 	bl	bc054 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b6b76:	1b43      	subs	r3, r0, r5
   b6b78:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b6b7c:	454b      	cmp	r3, r9
   b6b7e:	f171 0300 	sbcs.w	r3, r1, #0
   b6b82:	d206      	bcs.n	b6b92 <_ZN18Particle_Functions22disconnectFromParticleEv+0xe2>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b6b84:	4640      	mov	r0, r8
   b6b86:	f007 fdd9 	bl	be73c <_ZN5spark12NetworkClass5isOffEv>
   b6b8a:	b910      	cbnz	r0, b6b92 <_ZN18Particle_Functions22disconnectFromParticleEv+0xe2>
            spark_process();
   b6b8c:	f005 fd36 	bl	bc5fc <spark_process>
        while (_while() && !_condition()) {
   b6b90:	e7ee      	b.n	b6b70 <_ZN18Particle_Functions22disconnectFromParticleEv+0xc0>
   b6b92:	4813      	ldr	r0, [pc, #76]	; (b6be0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x130>)
   b6b94:	f007 fdd2 	bl	be73c <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b6b98:	f005 fa4c 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b6b9c:	6038      	str	r0, [r7, #0]
    		spark_process();
   b6b9e:	f005 fd2d 	bl	bc5fc <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b6ba2:	480f      	ldr	r0, [pc, #60]	; (b6be0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x130>)
   b6ba4:	f007 fdc6 	bl	be734 <_ZN5spark12NetworkClass4isOnEv>
   b6ba8:	b120      	cbz	r0, b6bb4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x104>
    Log.info("Failed to turn off the Cellular modem");
   b6baa:	490e      	ldr	r1, [pc, #56]	; (b6be4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x134>)
   b6bac:	4807      	ldr	r0, [pc, #28]	; (b6bcc <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b6bae:	f7fd fac6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b6bb2:	e7ba      	b.n	b6b2a <_ZN18Particle_Functions22disconnectFromParticleEv+0x7a>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b6bb4:	f008 fcf9 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b6bb8:	490b      	ldr	r1, [pc, #44]	; (b6be8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x138>)
   b6bba:	1b82      	subs	r2, r0, r6
   b6bbc:	4803      	ldr	r0, [pc, #12]	; (b6bcc <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b6bbe:	f7fd fabe 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b6bc2:	2401      	movs	r4, #1
   b6bc4:	e7b1      	b.n	b6b2a <_ZN18Particle_Functions22disconnectFromParticleEv+0x7a>
   b6bc6:	bf00      	nop
   b6bc8:	000c1780 	.word	0x000c1780
   b6bcc:	2003e654 	.word	0x2003e654
   b6bd0:	000c18be 	.word	0x000c18be
   b6bd4:	2003e710 	.word	0x2003e710
   b6bd8:	000c17a9 	.word	0x000c17a9
   b6bdc:	000c17cc 	.word	0x000c17cc
   b6be0:	2003e580 	.word	0x2003e580
   b6be4:	000c17f5 	.word	0x000c17f5
   b6be8:	000c181b 	.word	0x000c181b

000b6bec <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b6bec:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b6bee:	4917      	ldr	r1, [pc, #92]	; (b6c4c <_Z18initializePinModesv+0x60>)
   b6bf0:	4817      	ldr	r0, [pc, #92]	; (b6c50 <_Z18initializePinModesv+0x64>)
   b6bf2:	f7fd faa4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b6bf6:	2102      	movs	r1, #2
   b6bf8:	2004      	movs	r0, #4
   b6bfa:	f008 fed5 	bl	bf9a8 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b6bfe:	2100      	movs	r1, #0
   b6c00:	2008      	movs	r0, #8
   b6c02:	f008 fed1 	bl	bf9a8 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b6c06:	2101      	movs	r1, #1
   b6c08:	2007      	movs	r0, #7
   b6c0a:	f008 fecd 	bl	bf9a8 <pinMode>
    pinMode(INT_PIN, INPUT);
   b6c0e:	2100      	movs	r1, #0
   b6c10:	2012      	movs	r0, #18
   b6c12:	f008 fec9 	bl	bf9a8 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b6c16:	2101      	movs	r1, #1
   b6c18:	2011      	movs	r0, #17
   b6c1a:	f008 fec5 	bl	bf9a8 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b6c1e:	2101      	movs	r1, #1
   b6c20:	2010      	movs	r0, #16
   b6c22:	f008 fec1 	bl	bf9a8 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b6c26:	2100      	movs	r1, #0
   b6c28:	2010      	movs	r0, #16
   b6c2a:	f008 fece 	bl	bf9ca <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b6c2e:	2100      	movs	r1, #0
   b6c30:	2011      	movs	r0, #17
   b6c32:	f008 feca 	bl	bf9ca <digitalWrite>
    pinMode(RFM95_RST,OUTPUT);
   b6c36:	2101      	movs	r1, #1
   b6c38:	2006      	movs	r0, #6
   b6c3a:	f008 feb5 	bl	bf9a8 <pinMode>
    digitalWrite(RFM95_RST,HIGH);
   b6c3e:	2101      	movs	r1, #1
   b6c40:	2006      	movs	r0, #6
   b6c42:	f008 fec2 	bl	bf9ca <digitalWrite>
    return true;
}
   b6c46:	2001      	movs	r0, #1
   b6c48:	bd08      	pop	{r3, pc}
   b6c4a:	bf00      	nop
   b6c4c:	000c1888 	.word	0x000c1888
   b6c50:	2003e654 	.word	0x2003e654

000b6c54 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b6c54:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b6c56:	4918      	ldr	r1, [pc, #96]	; (b6cb8 <_Z18initializePowerCfgv+0x64>)
   b6c58:	4818      	ldr	r0, [pc, #96]	; (b6cbc <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b6c5a:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b6c5c:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b6c5e:	f7fd fa6e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b6c62:	4622      	mov	r2, r4
   b6c64:	2100      	movs	r1, #0
   b6c66:	4668      	mov	r0, sp
   b6c68:	f009 fcec 	bl	c0644 <memset>
   b6c6c:	4622      	mov	r2, r4
   b6c6e:	2100      	movs	r1, #0
   b6c70:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b6c74:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b6c78:	f009 fce4 	bl	c0644 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b6c7c:	2100      	movs	r1, #0
   b6c7e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b6c82:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b6c86:	f005 fc8b 	bl	bc5a0 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b6c8a:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b6c8e:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b6c92:	4b0b      	ldr	r3, [pc, #44]	; (b6cc0 <_Z18initializePowerCfgv+0x6c>)
   b6c94:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b6c96:	f241 0370 	movw	r3, #4208	; 0x1070
   b6c9a:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b6c9e:	9b00      	ldr	r3, [sp, #0]
   b6ca0:	2100      	movs	r1, #0
   b6ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b6ca6:	4668      	mov	r0, sp
   b6ca8:	9300      	str	r3, [sp, #0]
   b6caa:	f005 fc79 	bl	bc5a0 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b6cae:	3800      	subs	r0, #0
   b6cb0:	bf18      	it	ne
   b6cb2:	2001      	movne	r0, #1
   b6cb4:	b010      	add	sp, #64	; 0x40
   b6cb6:	bd10      	pop	{r4, pc}
   b6cb8:	000c18a1 	.word	0x000c18a1
   b6cbc:	2003e654 	.word	0x2003e654
   b6cc0:	03840384 	.word	0x03840384

000b6cc4 <_Z23setGatewayConfigurationv>:
 */

#include "Particle.h"
#include "MyPersistentData.h"

void setGatewayConfiguration() {
   b6cc4:	b508      	push	{r3, lr}
  Log.info("Setting values for the Gateway");
   b6cc6:	4908      	ldr	r1, [pc, #32]	; (b6ce8 <_Z23setGatewayConfigurationv+0x24>)
   b6cc8:	4808      	ldr	r0, [pc, #32]	; (b6cec <_Z23setGatewayConfigurationv+0x28>)
   b6cca:	f7fd fa38 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_frequencyMinutes(10);
   b6cce:	f7ff f925 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b6cd2:	210a      	movs	r1, #10
   b6cd4:	f7ff fb55 	bl	b6382 <_ZN13sysStatusData20set_frequencyMinutesEt>
  sysStatus.set_magicNumber(27617);
   b6cd8:	f7ff f920 	bl	b5f1c <_ZN13sysStatusData8instanceEv>
   b6cdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_magicNumber(27617);
   b6ce0:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b6ce4:	f7ff bb41 	b.w	b636a <_ZN13sysStatusData15set_magicNumberEt>
   b6ce8:	000c18c8 	.word	0x000c18c8
   b6cec:	2003e654 	.word	0x2003e654

000b6cf0 <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b6cf0:	ee07 0a90 	vmov	s15, r0
   b6cf4:	ed9f 7a09 	vldr	s14, [pc, #36]	; b6d1c <_Z17tmp36TemperatureCi+0x2c>
   b6cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
   b6d00:	ed9f 7a07 	vldr	s14, [pc, #28]	; b6d20 <_Z17tmp36TemperatureCi+0x30>
   b6d04:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b6d08:	eddf 7a06 	vldr	s15, [pc, #24]	; b6d24 <_Z17tmp36TemperatureCi+0x34>
   b6d0c:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b6d10:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b6d14:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b6d18:	4770      	bx	lr
   b6d1a:	bf00      	nop
   b6d1c:	454e4000 	.word	0x454e4000
   b6d20:	457ff000 	.word	0x457ff000
   b6d24:	43fa0000 	.word	0x43fa0000

000b6d28 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b6d28:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b6d2a:	2101      	movs	r1, #1
   b6d2c:	a801      	add	r0, sp, #4
   b6d2e:	f007 fd9a 	bl	be866 <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b6d32:	f7ff f935 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b6d36:	f7ff fa29 	bl	b618c <_ZNK17currentStatusData17get_internalTempCEv>
   b6d3a:	f7ff f931 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b6d3e:	f7ff fa25 	bl	b618c <_ZNK17currentStatusData17get_internalTempCEv>
   b6d42:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6d44:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b6d46:	d90d      	bls.n	b6d64 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6d48:	f007 fe20 	bl	be98c <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b6d4c:	f7ff f928 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b6d50:	2101      	movs	r1, #1
   b6d52:	f7ff fa99 	bl	b6288 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b6d56:	2400      	movs	r4, #0
  PMIC pmic(true);
   b6d58:	a801      	add	r0, sp, #4
   b6d5a:	f007 fd93 	bl	be884 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b6d5e:	4620      	mov	r0, r4
   b6d60:	b002      	add	sp, #8
   b6d62:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b6d64:	f007 fdf7 	bl	be956 <_ZN4PMIC14enableChargingEv>
    return true;
   b6d68:	2401      	movs	r4, #1
   b6d6a:	e7f5      	b.n	b6d58 <_Z16isItSafeToChargev+0x30>

000b6d6c <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   b6d6c:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6d6e:	4d19      	ldr	r5, [pc, #100]	; (b6dd4 <_Z17getSignalStrengthv+0x68>)
   b6d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b6d72:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6d74:	ac0c      	add	r4, sp, #48	; 0x30
   b6d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d7c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6d80:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b6d84:	4914      	ldr	r1, [pc, #80]	; (b6dd8 <_Z17getSignalStrengthv+0x6c>)
   b6d86:	a804      	add	r0, sp, #16
   b6d88:	f005 fde2 	bl	bc950 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b6d8c:	a804      	add	r0, sp, #16
   b6d8e:	f005 fe22 	bl	bc9d6 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b6d92:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b6d94:	a804      	add	r0, sp, #16
   b6d96:	f005 fe57 	bl	bca48 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b6d9a:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b6d9c:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b6da0:	f005 fe82 	bl	bcaa8 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6da4:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b6da6:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6daa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b6dae:	f009 f87f 	bl	bfeb0 <__aeabi_f2d>
   b6db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b6db6:	4628      	mov	r0, r5
   b6db8:	f009 f87a 	bl	bfeb0 <__aeabi_f2d>
   b6dbc:	e9cd 0100 	strd	r0, r1, [sp]
   b6dc0:	4a06      	ldr	r2, [pc, #24]	; (b6ddc <_Z17getSignalStrengthv+0x70>)
   b6dc2:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b6dc6:	4806      	ldr	r0, [pc, #24]	; (b6de0 <_Z17getSignalStrengthv+0x74>)
   b6dc8:	2140      	movs	r1, #64	; 0x40
   b6dca:	f005 fcef 	bl	bc7ac <snprintf>
}
   b6dce:	b017      	add	sp, #92	; 0x5c
   b6dd0:	bd30      	pop	{r4, r5, pc}
   b6dd2:	bf00      	nop
   b6dd4:	000c196c 	.word	0x000c196c
   b6dd8:	2003e580 	.word	0x2003e580
   b6ddc:	000c1925 	.word	0x000c1925
   b6de0:	2003d720 	.word	0x2003d720

000b6de4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b6de4:	b530      	push	{r4, r5, lr}
   b6de6:	b085      	sub	sp, #20
   b6de8:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b6dea:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b6dec:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b6dee:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b6df0:	f005 fb70 	bl	bc4d4 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b6df4:	b990      	cbnz	r0, b6e1c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b6df6:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b6df8:	b10c      	cbz	r4, b6dfe <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b6dfa:	6923      	ldr	r3, [r4, #16]
   b6dfc:	b923      	cbnz	r3, b6e08 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b6dfe:	4a08      	ldr	r2, [pc, #32]	; (b6e20 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b6e00:	4908      	ldr	r1, [pc, #32]	; (b6e24 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b6e02:	200a      	movs	r0, #10
   b6e04:	f005 fb3e 	bl	bc484 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b6e08:	230c      	movs	r3, #12
   b6e0a:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b6e0e:	2304      	movs	r3, #4
   b6e10:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b6e12:	aa01      	add	r2, sp, #4
   b6e14:	6923      	ldr	r3, [r4, #16]
   b6e16:	2101      	movs	r1, #1
   b6e18:	4620      	mov	r0, r4
   b6e1a:	4798      	blx	r3
}
   b6e1c:	b005      	add	sp, #20
   b6e1e:	bd30      	pop	{r4, r5, pc}
   b6e20:	000bc025 	.word	0x000bc025
   b6e24:	000c193e 	.word	0x000c193e

000b6e28 <_Z12batteryStatev>:
bool batteryState() {
   b6e28:	b513      	push	{r0, r1, r4, lr}
  current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b6e2a:	f7ff f8b9 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b6e2e:	a901      	add	r1, sp, #4
   b6e30:	4604      	mov	r4, r0
   b6e32:	2007      	movs	r0, #7
   b6e34:	f7ff ffd6 	bl	b6de4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b6e38:	1e01      	subs	r1, r0, #0
        return val;
   b6e3a:	bfa8      	it	ge
   b6e3c:	9901      	ldrge	r1, [sp, #4]
   b6e3e:	4620      	mov	r0, r4
   b6e40:	b2c9      	uxtb	r1, r1
   b6e42:	f7ff fa21 	bl	b6288 <_ZN17currentStatusData16set_batteryStateEh>
  fuelGauge.quickStart();                                               // May help us re-establish a baseline for SoC
   b6e46:	4818      	ldr	r0, [pc, #96]	; (b6ea8 <_Z12batteryStatev+0x80>)
   b6e48:	f006 f9ce 	bl	bd1e8 <_ZN9FuelGauge10quickStartEv>
  delay(500);
   b6e4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6e50:	f005 fd04 	bl	bc85c <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b6e54:	f7ff f8a4 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b6e58:	a901      	add	r1, sp, #4
   b6e5a:	4604      	mov	r4, r0
   b6e5c:	2003      	movs	r0, #3
   b6e5e:	f7ff ffc1 	bl	b6de4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b6e62:	b9e8      	cbnz	r0, b6ea0 <_Z12batteryStatev+0x78>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b6e64:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b6e68:	ee07 3a90 	vmov	s15, r3
   b6e6c:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b6e70:	ee17 0a90 	vmov	r0, s15
   b6e74:	f009 f81c 	bl	bfeb0 <__aeabi_f2d>
   b6e78:	ec41 0b10 	vmov	d0, r0, r1
   b6e7c:	4620      	mov	r0, r4
   b6e7e:	f7ff f8cb 	bl	b6018 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b6e82:	f7ff f88d 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b6e86:	f7ff f8a7 	bl	b5fd8 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b6e8a:	4b08      	ldr	r3, [pc, #32]	; (b6eac <_Z12batteryStatev+0x84>)
   b6e8c:	ec51 0b10 	vmov	r0, r1, d0
   b6e90:	2200      	movs	r2, #0
   b6e92:	f009 faf5 	bl	c0480 <__aeabi_dcmpgt>
}
   b6e96:	3800      	subs	r0, #0
   b6e98:	bf18      	it	ne
   b6e9a:	2001      	movne	r0, #1
   b6e9c:	b002      	add	sp, #8
   b6e9e:	bd10      	pop	{r4, pc}
            return -1.0f;
   b6ea0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b6ea4:	e7e4      	b.n	b6e70 <_Z12batteryStatev+0x48>
   b6ea6:	bf00      	nop
   b6ea8:	2003e42c 	.word	0x2003e42c
   b6eac:	404e0000 	.word	0x404e0000

000b6eb0 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b6eb0:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b6eb2:	f7ff f875 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b6eb6:	4b11      	ldr	r3, [pc, #68]	; (b6efc <_Z16takeMeasurementsv+0x4c>)
   b6eb8:	4604      	mov	r4, r0
   b6eba:	8818      	ldrh	r0, [r3, #0]
   b6ebc:	f008 fdb1 	bl	bfa22 <analogRead>
   b6ec0:	f7ff ff16 	bl	b6cf0 <_Z17tmp36TemperatureCi>
   b6ec4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b6ec8:	4620      	mov	r0, r4
   b6eca:	edcd 7a01 	vstr	s15, [sp, #4]
   b6ece:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b6ed2:	f7ff f9d3 	bl	b627c <_ZN17currentStatusData17set_internalTempCEh>
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b6ed6:	f7ff f863 	bl	b5fa0 <_ZN17currentStatusData8instanceEv>
   b6eda:	f7ff f957 	bl	b618c <_ZNK17currentStatusData17get_internalTempCEv>
   b6ede:	4a08      	ldr	r2, [pc, #32]	; (b6f00 <_Z16takeMeasurementsv+0x50>)
   b6ee0:	4603      	mov	r3, r0
   b6ee2:	2110      	movs	r1, #16
   b6ee4:	4807      	ldr	r0, [pc, #28]	; (b6f04 <_Z16takeMeasurementsv+0x54>)
   b6ee6:	f005 fc61 	bl	bc7ac <snprintf>
    batteryState();
   b6eea:	f7ff ff9d 	bl	b6e28 <_Z12batteryStatev>
    isItSafeToCharge();
   b6eee:	f7ff ff1b 	bl	b6d28 <_Z16isItSafeToChargev>
    getSignalStrength();
   b6ef2:	f7ff ff3b 	bl	b6d6c <_Z17getSignalStrengthv>
}
   b6ef6:	2001      	movs	r0, #1
   b6ef8:	b002      	add	sp, #8
   b6efa:	bd10      	pop	{r4, pc}
   b6efc:	000c18c6 	.word	0x000c18c6
   b6f00:	000c1964 	.word	0x000c1964
   b6f04:	2003d710 	.word	0x2003d710

000b6f08 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b6f08:	4801      	ldr	r0, [pc, #4]	; (b6f10 <_GLOBAL__sub_I_batteryContext+0x8>)
   b6f0a:	2100      	movs	r1, #0
   b6f0c:	f006 b928 	b.w	bd160 <_ZN9FuelGaugeC1Eb>
   b6f10:	2003e42c 	.word	0x2003e42c

000b6f14 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b6f14:	4770      	bx	lr

000b6f16 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b6f16:	b510      	push	{r4, lr}
}
   b6f18:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b6f1a:	4604      	mov	r4, r0
}
   b6f1c:	f7fd f8bf 	bl	b409e <_ZdlPvj>
   b6f20:	4620      	mov	r0, r4
   b6f22:	bd10      	pop	{r4, pc}

000b6f24 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b6f24:	b510      	push	{r4, lr}
   b6f26:	4604      	mov	r4, r0
   b6f28:	b08a      	sub	sp, #40	; 0x28
   b6f2a:	4608      	mov	r0, r1
    attr.flags = 0;
   b6f2c:	f04f 0c20 	mov.w	ip, #32
   b6f30:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6f32:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b6f36:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6f3a:	460b      	mov	r3, r1
   b6f3c:	aa02      	add	r2, sp, #8
   b6f3e:	6821      	ldr	r1, [r4, #0]
   b6f40:	f005 fab0 	bl	bc4a4 <log_message_v>
}
   b6f44:	b00a      	add	sp, #40	; 0x28
   b6f46:	bd10      	pop	{r4, pc}

000b6f48 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b6f48:	b40e      	push	{r1, r2, r3}
   b6f4a:	b503      	push	{r0, r1, lr}
   b6f4c:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b6f4e:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b6f50:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6f54:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b6f56:	f7ff ffe5 	bl	b6f24 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6f5a:	b002      	add	sp, #8
   b6f5c:	f85d eb04 	ldr.w	lr, [sp], #4
   b6f60:	b003      	add	sp, #12
   b6f62:	4770      	bx	lr

000b6f64 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6f64:	b40e      	push	{r1, r2, r3}
   b6f66:	b503      	push	{r0, r1, lr}
   b6f68:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b6f6a:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6f6c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6f70:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b6f72:	f7ff ffd7 	bl	b6f24 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6f76:	b002      	add	sp, #8
   b6f78:	f85d eb04 	ldr.w	lr, [sp], #4
   b6f7c:	b003      	add	sp, #12
   b6f7e:	4770      	bx	lr

000b6f80 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6f80:	b510      	push	{r4, lr}
   b6f82:	7202      	strb	r2, [r0, #8]
   b6f84:	22ff      	movs	r2, #255	; 0xff
   b6f86:	8142      	strh	r2, [r0, #10]
   b6f88:	2200      	movs	r2, #0
   b6f8a:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b6f8e:	6142      	str	r2, [r0, #20]
   b6f90:	7602      	strb	r2, [r0, #24]
   b6f92:	61c2      	str	r2, [r0, #28]
    instance = this;
   b6f94:	4a02      	ldr	r2, [pc, #8]	; (b6fa0 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6f96:	4c03      	ldr	r4, [pc, #12]	; (b6fa4 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b6f98:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6f9a:	e9c0 4100 	strd	r4, r1, [r0]
}
   b6f9e:	bd10      	pop	{r4, pc}
   b6fa0:	2003e438 	.word	0x2003e438
   b6fa4:	000c1be4 	.word	0x000c1be4

000b6fa8 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b6fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6fac:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b6fb0:	4604      	mov	r4, r0
   b6fb2:	4689      	mov	r9, r1
   b6fb4:	4616      	mov	r6, r2
   b6fb6:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b6fb8:	f1b8 0f00 	cmp.w	r8, #0
   b6fbc:	d002      	beq.n	b6fc4 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b6fbe:	6840      	ldr	r0, [r0, #4]
   b6fc0:	f006 f9b8 	bl	bd334 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6fc4:	7a21      	ldrb	r1, [r4, #8]
   b6fc6:	6860      	ldr	r0, [r4, #4]
   b6fc8:	f006 f991 	bl	bd2ee <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6fcc:	6860      	ldr	r0, [r4, #4]
   b6fce:	6803      	ldr	r3, [r0, #0]
   b6fd0:	4649      	mov	r1, r9
   b6fd2:	689b      	ldr	r3, [r3, #8]
   b6fd4:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b6fd6:	6860      	ldr	r0, [r4, #4]
   b6fd8:	2100      	movs	r1, #0
   b6fda:	f006 f9a7 	bl	bd32c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6fde:	4605      	mov	r5, r0
   b6fe0:	bb00      	cbnz	r0, b7024 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6fe2:	2301      	movs	r3, #1
   b6fe4:	7a21      	ldrb	r1, [r4, #8]
   b6fe6:	6860      	ldr	r0, [r4, #4]
   b6fe8:	463a      	mov	r2, r7
   b6fea:	f006 f96e 	bl	bd2ca <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b6fee:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6ff0:	4603      	mov	r3, r0
        if (count == num) {
   b6ff2:	d109      	bne.n	b7008 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b6ff4:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b6ff6:	42be      	cmp	r6, r7
   b6ff8:	d01c      	beq.n	b7034 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b6ffa:	6860      	ldr	r0, [r4, #4]
   b6ffc:	6803      	ldr	r3, [r0, #0]
   b6ffe:	695b      	ldr	r3, [r3, #20]
   b7000:	4798      	blx	r3
   b7002:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b7006:	e7f6      	b.n	b6ff6 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b7008:	490b      	ldr	r1, [pc, #44]	; (b7038 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b700a:	480c      	ldr	r0, [pc, #48]	; (b703c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b700c:	464a      	mov	r2, r9
   b700e:	f7ff ff9b 	bl	b6f48 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b7012:	f1b8 0f00 	cmp.w	r8, #0
   b7016:	d002      	beq.n	b701e <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b7018:	6860      	ldr	r0, [r4, #4]
   b701a:	f006 f994 	bl	bd346 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b701e:	4628      	mov	r0, r5
   b7020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b7024:	4603      	mov	r3, r0
   b7026:	4906      	ldr	r1, [pc, #24]	; (b7040 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b7028:	4804      	ldr	r0, [pc, #16]	; (b703c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b702a:	464a      	mov	r2, r9
   b702c:	f7ff ff8c 	bl	b6f48 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b7030:	2500      	movs	r5, #0
   b7032:	e7ee      	b.n	b7012 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b7034:	2501      	movs	r5, #1
   b7036:	e7ec      	b.n	b7012 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b7038:	000c1994 	.word	0x000c1994
   b703c:	2003e434 	.word	0x2003e434
   b7040:	000c19b9 	.word	0x000c19b9

000b7044 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b7044:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b7046:	9300      	str	r3, [sp, #0]
   b7048:	2301      	movs	r3, #1
   b704a:	f7ff ffad 	bl	b6fa8 <_ZN6AB180513readRegistersEhPhjb>
}
   b704e:	b003      	add	sp, #12
   b7050:	f85d fb04 	ldr.w	pc, [sp], #4

000b7054 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b7054:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b7056:	8943      	ldrh	r3, [r0, #10]
   b7058:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b705a:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b705c:	d010      	beq.n	b7080 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b705e:	4e19      	ldr	r6, [pc, #100]	; (b70c4 <_ZN6AB180510detectChipEv+0x70>)
   b7060:	4d19      	ldr	r5, [pc, #100]	; (b70c8 <_ZN6AB180510detectChipEv+0x74>)
   b7062:	f004 ffe7 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b7066:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b706a:	d209      	bcs.n	b7080 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b706c:	8960      	ldrh	r0, [r4, #10]
   b706e:	f008 fcc5 	bl	bf9fc <digitalRead>
   b7072:	2801      	cmp	r0, #1
   b7074:	d004      	beq.n	b7080 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b7076:	4631      	mov	r1, r6
   b7078:	4628      	mov	r0, r5
   b707a:	f7fd f860 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b707e:	e7f0      	b.n	b7062 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b7080:	2301      	movs	r3, #1
   b7082:	f10d 0207 	add.w	r2, sp, #7
   b7086:	2128      	movs	r1, #40	; 0x28
   b7088:	4620      	mov	r0, r4
   b708a:	f7ff ffdb 	bl	b7044 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b708e:	b930      	cbnz	r0, b709e <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b7090:	480d      	ldr	r0, [pc, #52]	; (b70c8 <_ZN6AB180510detectChipEv+0x74>)
   b7092:	490e      	ldr	r1, [pc, #56]	; (b70cc <_ZN6AB180510detectChipEv+0x78>)
   b7094:	f7fd f853 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7098:	2000      	movs	r0, #0
}
   b709a:	b002      	add	sp, #8
   b709c:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b709e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b70a2:	2b18      	cmp	r3, #24
   b70a4:	d1f4      	bne.n	b7090 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b70a6:	2301      	movs	r3, #1
   b70a8:	f10d 0207 	add.w	r2, sp, #7
   b70ac:	2129      	movs	r1, #41	; 0x29
   b70ae:	4620      	mov	r0, r4
   b70b0:	f7ff ffc8 	bl	b7044 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b70b4:	2800      	cmp	r0, #0
   b70b6:	d0eb      	beq.n	b7090 <_ZN6AB180510detectChipEv+0x3c>
   b70b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b70bc:	2b05      	cmp	r3, #5
   b70be:	d1e7      	bne.n	b7090 <_ZN6AB180510detectChipEv+0x3c>
   b70c0:	e7eb      	b.n	b709a <_ZN6AB180510detectChipEv+0x46>
   b70c2:	bf00      	nop
   b70c4:	000c19dd 	.word	0x000c19dd
   b70c8:	2003e434 	.word	0x2003e434
   b70cc:	000c19f2 	.word	0x000c19f2

000b70d0 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b70d0:	b507      	push	{r0, r1, r2, lr}
   b70d2:	4613      	mov	r3, r2
    uint8_t value = 0;
   b70d4:	2200      	movs	r2, #0
   b70d6:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b70da:	f10d 0207 	add.w	r2, sp, #7
   b70de:	f7ff ffb1 	bl	b7044 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b70e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b70e6:	b003      	add	sp, #12
   b70e8:	f85d fb04 	ldr.w	pc, [sp], #4

000b70ec <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b70ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b70f0:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b70f4:	4604      	mov	r4, r0
   b70f6:	460f      	mov	r7, r1
   b70f8:	4615      	mov	r5, r2
   b70fa:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b70fc:	f1b8 0f00 	cmp.w	r8, #0
   b7100:	d002      	beq.n	b7108 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b7102:	6840      	ldr	r0, [r0, #4]
   b7104:	f006 f916 	bl	bd334 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b7108:	7a21      	ldrb	r1, [r4, #8]
   b710a:	6860      	ldr	r0, [r4, #4]
   b710c:	f006 f8ef 	bl	bd2ee <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b7110:	6860      	ldr	r0, [r4, #4]
   b7112:	6803      	ldr	r3, [r0, #0]
   b7114:	4639      	mov	r1, r7
   b7116:	689b      	ldr	r3, [r3, #8]
   b7118:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b711a:	442e      	add	r6, r5
   b711c:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b711e:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b7120:	d005      	beq.n	b712e <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b7122:	6803      	ldr	r3, [r0, #0]
   b7124:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7128:	689b      	ldr	r3, [r3, #8]
   b712a:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b712c:	e7f6      	b.n	b711c <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b712e:	2101      	movs	r1, #1
   b7130:	f006 f8fc 	bl	bd32c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b7134:	4603      	mov	r3, r0
   b7136:	b170      	cbz	r0, b7156 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b7138:	4908      	ldr	r1, [pc, #32]	; (b715c <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b713a:	4809      	ldr	r0, [pc, #36]	; (b7160 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b713c:	463a      	mov	r2, r7
   b713e:	f7ff ff03 	bl	b6f48 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b7142:	2500      	movs	r5, #0
    }

    if (lock) {
   b7144:	f1b8 0f00 	cmp.w	r8, #0
   b7148:	d002      	beq.n	b7150 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b714a:	6860      	ldr	r0, [r4, #4]
   b714c:	f006 f8fb 	bl	bd346 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b7150:	4628      	mov	r0, r5
   b7152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b7156:	2501      	movs	r5, #1
   b7158:	e7f4      	b.n	b7144 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b715a:	bf00      	nop
   b715c:	000c19ff 	.word	0x000c19ff
   b7160:	2003e434 	.word	0x2003e434

000b7164 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b7164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7166:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b716a:	9300      	str	r3, [sp, #0]
   b716c:	f10d 020f 	add.w	r2, sp, #15
   b7170:	2301      	movs	r3, #1
   b7172:	f7ff ffbb 	bl	b70ec <_ZN6AB180514writeRegistersEhPKhjb>
}
   b7176:	b005      	add	sp, #20
   b7178:	f85d fb04 	ldr.w	pc, [sp], #4

000b717c <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b717e:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b7180:	460c      	mov	r4, r1
   b7182:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b7184:	491a      	ldr	r1, [pc, #104]	; (b71f0 <_ZN6AB18056setWDTEi+0x74>)
   b7186:	481b      	ldr	r0, [pc, #108]	; (b71f4 <_ZN6AB18056setWDTEi+0x78>)
   b7188:	f7fc ffd9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b718c:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b718e:	bfb8      	it	lt
   b7190:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b7192:	b97c      	cbnz	r4, b71b4 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b7194:	2301      	movs	r3, #1
   b7196:	4622      	mov	r2, r4
   b7198:	211b      	movs	r1, #27
   b719a:	4628      	mov	r0, r5
   b719c:	f7ff ffe2 	bl	b7164 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b71a0:	4915      	ldr	r1, [pc, #84]	; (b71f8 <_ZN6AB18056setWDTEi+0x7c>)
   b71a2:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b71a4:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b71a6:	4813      	ldr	r0, [pc, #76]	; (b71f4 <_ZN6AB18056setWDTEi+0x78>)
   b71a8:	f7ff fedc 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b71ac:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b71ae:	616c      	str	r4, [r5, #20]
}
   b71b0:	4630      	mov	r0, r6
   b71b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b71b4:	2c03      	cmp	r4, #3
   b71b6:	dd19      	ble.n	b71ec <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b71b8:	10a7      	asrs	r7, r4, #2
   b71ba:	2f1f      	cmp	r7, #31
   b71bc:	bfa8      	it	ge
   b71be:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b71c0:	00ba      	lsls	r2, r7, #2
   b71c2:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b71c6:	2301      	movs	r3, #1
   b71c8:	b2d2      	uxtb	r2, r2
   b71ca:	211b      	movs	r1, #27
   b71cc:	4628      	mov	r0, r5
   b71ce:	f7ff ffc9 	bl	b7164 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b71d2:	463a      	mov	r2, r7
   b71d4:	4603      	mov	r3, r0
   b71d6:	4909      	ldr	r1, [pc, #36]	; (b71fc <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b71d8:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b71da:	4806      	ldr	r0, [pc, #24]	; (b71f4 <_ZN6AB18056setWDTEi+0x78>)
   b71dc:	f7ff fec2 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b71e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b71e4:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b71e6:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b71e8:	616f      	str	r7, [r5, #20]
   b71ea:	e7e1      	b.n	b71b0 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b71ec:	2701      	movs	r7, #1
   b71ee:	e7e7      	b.n	b71c0 <_ZN6AB18056setWDTEi+0x44>
   b71f0:	000c1a24 	.word	0x000c1a24
   b71f4:	2003e434 	.word	0x2003e434
   b71f8:	000c1a2e 	.word	0x000c1a2e
   b71fc:	000c1a4a 	.word	0x000c1a4a

000b7200 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b7200:	4b06      	ldr	r3, [pc, #24]	; (b721c <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b7202:	681a      	ldr	r2, [r3, #0]
   b7204:	b14a      	cbz	r2, b721a <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b7206:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b720a:	430b      	orrs	r3, r1
   b720c:	d105      	bne.n	b721a <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b720e:	68d3      	ldr	r3, [r2, #12]
   b7210:	b11b      	cbz	r3, b721a <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b7212:	2100      	movs	r1, #0
   b7214:	4610      	mov	r0, r2
   b7216:	f7ff bfb1 	b.w	b717c <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b721a:	4770      	bx	lr
   b721c:	2003e438 	.word	0x2003e438

000b7220 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b7220:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b7224:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b7228:	4605      	mov	r5, r0
   b722a:	4616      	mov	r6, r2
   b722c:	461f      	mov	r7, r3
    if (lock) {
   b722e:	f1b8 0f00 	cmp.w	r8, #0
   b7232:	d004      	beq.n	b723e <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b7234:	6840      	ldr	r0, [r0, #4]
   b7236:	9101      	str	r1, [sp, #4]
   b7238:	f006 f87c 	bl	bd334 <_ZN7TwoWire4lockEv>
   b723c:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b723e:	9101      	str	r1, [sp, #4]
   b7240:	2300      	movs	r3, #0
   b7242:	f10d 020f 	add.w	r2, sp, #15
   b7246:	4628      	mov	r0, r5
   b7248:	f7ff fefc 	bl	b7044 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b724c:	4604      	mov	r4, r0
   b724e:	b160      	cbz	r0, b726a <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b7250:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b7254:	ea03 0206 	and.w	r2, r3, r6
   b7258:	433a      	orrs	r2, r7
        if (newValue != value) {
   b725a:	4293      	cmp	r3, r2
   b725c:	d005      	beq.n	b726a <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b725e:	9901      	ldr	r1, [sp, #4]
   b7260:	2300      	movs	r3, #0
   b7262:	4628      	mov	r0, r5
   b7264:	f7ff ff7e 	bl	b7164 <_ZN6AB180513writeRegisterEhhb>
   b7268:	4604      	mov	r4, r0
    if (lock) {
   b726a:	f1b8 0f00 	cmp.w	r8, #0
   b726e:	d002      	beq.n	b7276 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b7270:	6868      	ldr	r0, [r5, #4]
   b7272:	f006 f868 	bl	bd346 <_ZN7TwoWire6unlockEv>
}
   b7276:	4620      	mov	r0, r4
   b7278:	b004      	add	sp, #16
   b727a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b727e <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b727e:	b513      	push	{r0, r1, r4, lr}
   b7280:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b7282:	f10d 0207 	add.w	r2, sp, #7
   b7286:	f7ff fedd 	bl	b7044 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b728a:	b128      	cbz	r0, b7298 <_ZN6AB180510isBitClearEhhb+0x1a>
   b728c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7290:	421c      	tst	r4, r3
   b7292:	bf0c      	ite	eq
   b7294:	2001      	moveq	r0, #1
   b7296:	2000      	movne	r0, #0
}
   b7298:	b002      	add	sp, #8
   b729a:	bd10      	pop	{r4, pc}

000b729c <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b729c:	b513      	push	{r0, r1, r4, lr}
   b729e:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b72a0:	f10d 0207 	add.w	r2, sp, #7
   b72a4:	f7ff fece 	bl	b7044 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b72a8:	b128      	cbz	r0, b72b6 <_ZN6AB18058isBitSetEhhb+0x1a>
   b72aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b72ae:	421c      	tst	r4, r3
   b72b0:	bf14      	ite	ne
   b72b2:	2001      	movne	r0, #1
   b72b4:	2000      	moveq	r0, #0
}
   b72b6:	b002      	add	sp, #8
   b72b8:	bd10      	pop	{r4, pc}

000b72ba <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b72ba:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b72bc:	43d2      	mvns	r2, r2
   b72be:	9300      	str	r3, [sp, #0]
   b72c0:	b2d2      	uxtb	r2, r2
   b72c2:	2300      	movs	r3, #0
   b72c4:	f7ff ffac 	bl	b7220 <_ZN6AB180512maskRegisterEhhhb>
}
   b72c8:	b003      	add	sp, #12
   b72ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b72d0 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b72d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b72d2:	2301      	movs	r3, #1
   b72d4:	f10d 0207 	add.w	r2, sp, #7
   b72d8:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b72da:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b72dc:	f7ff feb2 	bl	b7044 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b72e0:	4605      	mov	r5, r0
   b72e2:	b938      	cbnz	r0, b72f4 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b72e4:	491e      	ldr	r1, [pc, #120]	; (b7360 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b72e6:	481f      	ldr	r0, [pc, #124]	; (b7364 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b72e8:	22ad      	movs	r2, #173	; 0xad
   b72ea:	f7ff fe2d 	bl	b6f48 <_ZNK5spark6Logger5errorEPKcz>
}
   b72ee:	4628      	mov	r0, r5
   b72f0:	b003      	add	sp, #12
   b72f2:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b72f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b72f8:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b72fc:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b7300:	d00b      	beq.n	b731a <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b7302:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b7304:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b7306:	210f      	movs	r1, #15
   b7308:	4620      	mov	r0, r4
   b730a:	f7ff ffd6 	bl	b72ba <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b730e:	4a16      	ldr	r2, [pc, #88]	; (b7368 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b7310:	4916      	ldr	r1, [pc, #88]	; (b736c <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b7312:	4814      	ldr	r0, [pc, #80]	; (b7364 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b7314:	f7fc ff13 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7318:	e7e9      	b.n	b72ee <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b731a:	2208      	movs	r2, #8
   b731c:	2117      	movs	r1, #23
   b731e:	4620      	mov	r0, r4
   b7320:	f7ff ffbc 	bl	b729c <_ZN6AB18058isBitSetEhhb>
   b7324:	b118      	cbz	r0, b732e <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b7326:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b7328:	4a11      	ldr	r2, [pc, #68]	; (b7370 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b732a:	61e3      	str	r3, [r4, #28]
   b732c:	e7f0      	b.n	b7310 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b732e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7332:	071a      	lsls	r2, r3, #28
   b7334:	d509      	bpl.n	b734a <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b7336:	2303      	movs	r3, #3
   b7338:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b733a:	2208      	movs	r2, #8
   b733c:	2301      	movs	r3, #1
   b733e:	210f      	movs	r1, #15
   b7340:	4620      	mov	r0, r4
   b7342:	f7ff ffba 	bl	b72ba <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b7346:	4a0b      	ldr	r2, [pc, #44]	; (b7374 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b7348:	e7e2      	b.n	b7310 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b734a:	075b      	lsls	r3, r3, #29
   b734c:	d5cf      	bpl.n	b72ee <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b734e:	2204      	movs	r2, #4
   b7350:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b7352:	2301      	movs	r3, #1
   b7354:	210f      	movs	r1, #15
   b7356:	4620      	mov	r0, r4
   b7358:	f7ff ffaf 	bl	b72ba <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b735c:	4a06      	ldr	r2, [pc, #24]	; (b7378 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b735e:	e7d7      	b.n	b7310 <_ZN6AB180516updateWakeReasonEv+0x40>
   b7360:	000c1a9d 	.word	0x000c1a9d
   b7364:	2003e434 	.word	0x2003e434
   b7368:	000c1a6e 	.word	0x000c1a6e
   b736c:	000c1abc 	.word	0x000c1abc
   b7370:	000c1a77 	.word	0x000c1a77
   b7374:	000c1a87 	.word	0x000c1a87
   b7378:	000c1a97 	.word	0x000c1a97

000b737c <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b737c:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b737e:	9300      	str	r3, [sp, #0]
   b7380:	4613      	mov	r3, r2
   b7382:	22ff      	movs	r2, #255	; 0xff
   b7384:	f7ff ff4c 	bl	b7220 <_ZN6AB180512maskRegisterEhhhb>
}
   b7388:	b003      	add	sp, #12
   b738a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7390 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b7390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7392:	460f      	mov	r7, r1
   b7394:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b7396:	2301      	movs	r3, #1
   b7398:	2200      	movs	r2, #0
   b739a:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b739c:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b739e:	f7ff fee1 	bl	b7164 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b73a2:	4604      	mov	r4, r0
   b73a4:	b938      	cbnz	r0, b73b6 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b73a6:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b73aa:	491f      	ldr	r1, [pc, #124]	; (b7428 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b73ac:	481f      	ldr	r0, [pc, #124]	; (b742c <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b73ae:	f7ff fdcb 	bl	b6f48 <_ZNK5spark6Logger5errorEPKcz>
}
   b73b2:	4620      	mov	r0, r4
   b73b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b73b6:	2301      	movs	r3, #1
   b73b8:	2223      	movs	r2, #35	; 0x23
   b73ba:	2118      	movs	r1, #24
   b73bc:	4628      	mov	r0, r5
   b73be:	f7ff fed1 	bl	b7164 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b73c2:	4604      	mov	r4, r0
   b73c4:	b910      	cbnz	r0, b73cc <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b73c6:	f240 229b 	movw	r2, #667	; 0x29b
   b73ca:	e7ee      	b.n	b73aa <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b73cc:	2fff      	cmp	r7, #255	; 0xff
   b73ce:	bfa8      	it	ge
   b73d0:	27ff      	movge	r7, #255	; 0xff
   b73d2:	2f01      	cmp	r7, #1
   b73d4:	bfb8      	it	lt
   b73d6:	2701      	movlt	r7, #1
   b73d8:	2301      	movs	r3, #1
   b73da:	b2fa      	uxtb	r2, r7
   b73dc:	2119      	movs	r1, #25
   b73de:	4628      	mov	r0, r5
   b73e0:	f7ff fec0 	bl	b7164 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b73e4:	4604      	mov	r4, r0
   b73e6:	b910      	cbnz	r0, b73ee <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b73e8:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b73ec:	e7dd      	b.n	b73aa <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b73ee:	2301      	movs	r3, #1
   b73f0:	2208      	movs	r2, #8
   b73f2:	2112      	movs	r1, #18
   b73f4:	4628      	mov	r0, r5
   b73f6:	f7ff ffc1 	bl	b737c <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b73fa:	4604      	mov	r4, r0
   b73fc:	b910      	cbnz	r0, b7404 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b73fe:	f240 22af 	movw	r2, #687	; 0x2af
   b7402:	e7d2      	b.n	b73aa <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b7404:	2e00      	cmp	r6, #0
   b7406:	bf14      	ite	ne
   b7408:	2203      	movne	r2, #3
   b740a:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b740c:	2301      	movs	r3, #1
   b740e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b7412:	2118      	movs	r1, #24
   b7414:	4628      	mov	r0, r5
   b7416:	f7ff fea5 	bl	b7164 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b741a:	4604      	mov	r4, r0
   b741c:	2800      	cmp	r0, #0
   b741e:	d1c8      	bne.n	b73b2 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b7420:	f240 22b9 	movw	r2, #697	; 0x2b9
   b7424:	e7c1      	b.n	b73aa <_ZN6AB180517setCountdownTimerEib+0x1a>
   b7426:	bf00      	nop
   b7428:	000c1acd 	.word	0x000c1acd
   b742c:	2003e434 	.word	0x2003e434

000b7430 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b7430:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b7434:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b7436:	4605      	mov	r5, r0
   b7438:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b743a:	484f      	ldr	r0, [pc, #316]	; (b7578 <_ZN6AB180513deepPowerDownEi+0x148>)
   b743c:	494f      	ldr	r1, [pc, #316]	; (b757c <_ZN6AB180513deepPowerDownEi+0x14c>)
   b743e:	f7fc fe7e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b7442:	2100      	movs	r1, #0
   b7444:	4628      	mov	r0, r5
   b7446:	f7ff fe99 	bl	b717c <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b744a:	4604      	mov	r4, r0
   b744c:	b948      	cbnz	r0, b7462 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b744e:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b7452:	494b      	ldr	r1, [pc, #300]	; (b7580 <_ZN6AB180513deepPowerDownEi+0x150>)
   b7454:	4848      	ldr	r0, [pc, #288]	; (b7578 <_ZN6AB180513deepPowerDownEi+0x148>)
   b7456:	f7ff fd77 	bl	b6f48 <_ZNK5spark6Logger5errorEPKcz>
}
   b745a:	4620      	mov	r0, r4
   b745c:	b003      	add	sp, #12
   b745e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b7462:	2301      	movs	r3, #1
   b7464:	461a      	mov	r2, r3
   b7466:	2130      	movs	r1, #48	; 0x30
   b7468:	4628      	mov	r0, r5
   b746a:	f7ff ff87 	bl	b737c <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b746e:	4604      	mov	r4, r0
   b7470:	b910      	cbnz	r0, b7478 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b7472:	f240 2205 	movw	r2, #517	; 0x205
   b7476:	e7ec      	b.n	b7452 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b7478:	2210      	movs	r2, #16
   b747a:	2301      	movs	r3, #1
   b747c:	4611      	mov	r1, r2
   b747e:	4628      	mov	r0, r5
   b7480:	f7ff ff1b 	bl	b72ba <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b7484:	4604      	mov	r4, r0
   b7486:	b910      	cbnz	r0, b748e <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b7488:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b748c:	e7e1      	b.n	b7452 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b748e:	2301      	movs	r3, #1
   b7490:	2226      	movs	r2, #38	; 0x26
   b7492:	2113      	movs	r1, #19
   b7494:	4628      	mov	r0, r5
   b7496:	f7ff fe65 	bl	b7164 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b749a:	4604      	mov	r4, r0
   b749c:	b910      	cbnz	r0, b74a4 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b749e:	f240 2213 	movw	r2, #531	; 0x213
   b74a2:	e7d6      	b.n	b7452 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b74a4:	2601      	movs	r6, #1
   b74a6:	9600      	str	r6, [sp, #0]
   b74a8:	4633      	mov	r3, r6
   b74aa:	22fc      	movs	r2, #252	; 0xfc
   b74ac:	2111      	movs	r1, #17
   b74ae:	4628      	mov	r0, r5
   b74b0:	f7ff feb6 	bl	b7220 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b74b4:	4604      	mov	r4, r0
   b74b6:	b910      	cbnz	r0, b74be <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b74b8:	f240 221b 	movw	r2, #539	; 0x21b
   b74bc:	e7c9      	b.n	b7452 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b74be:	2200      	movs	r2, #0
   b74c0:	4639      	mov	r1, r7
   b74c2:	4628      	mov	r0, r5
   b74c4:	f7ff ff64 	bl	b7390 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b74c8:	4604      	mov	r4, r0
   b74ca:	b910      	cbnz	r0, b74d2 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b74cc:	f240 2222 	movw	r2, #546	; 0x222
   b74d0:	e7bf      	b.n	b7452 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b74d2:	9600      	str	r6, [sp, #0]
   b74d4:	2302      	movs	r3, #2
   b74d6:	2277      	movs	r2, #119	; 0x77
   b74d8:	2110      	movs	r1, #16
   b74da:	4628      	mov	r0, r5
   b74dc:	f7ff fea0 	bl	b7220 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b74e0:	4604      	mov	r4, r0
   b74e2:	b910      	cbnz	r0, b74ea <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b74e4:	f240 222b 	movw	r2, #555	; 0x22b
   b74e8:	e7b3      	b.n	b7452 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b74ea:	4633      	mov	r3, r6
   b74ec:	2204      	movs	r2, #4
   b74ee:	211c      	movs	r1, #28
   b74f0:	4628      	mov	r0, r5
   b74f2:	f7ff ff43 	bl	b737c <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b74f6:	4604      	mov	r4, r0
   b74f8:	b910      	cbnz	r0, b7500 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b74fa:	f240 2232 	movw	r2, #562	; 0x232
   b74fe:	e7a8      	b.n	b7452 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b7500:	9600      	str	r6, [sp, #0]
   b7502:	2318      	movs	r3, #24
   b7504:	22e3      	movs	r2, #227	; 0xe3
   b7506:	2111      	movs	r1, #17
   b7508:	4628      	mov	r0, r5
   b750a:	f7ff fe89 	bl	b7220 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b750e:	4604      	mov	r4, r0
   b7510:	b910      	cbnz	r0, b7518 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b7512:	f240 2239 	movw	r2, #569	; 0x239
   b7516:	e79c      	b.n	b7452 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b7518:	4633      	mov	r3, r6
   b751a:	22c0      	movs	r2, #192	; 0xc0
   b751c:	2117      	movs	r1, #23
   b751e:	4628      	mov	r0, r5
   b7520:	f7ff fe20 	bl	b7164 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7524:	4604      	mov	r4, r0
   b7526:	b910      	cbnz	r0, b752e <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b7528:	f44f 7210 	mov.w	r2, #576	; 0x240
   b752c:	e791      	b.n	b7452 <_ZN6AB180513deepPowerDownEi+0x22>
   b752e:	f004 fd81 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b7532:	f8df 9054 	ldr.w	r9, [pc, #84]	; b7588 <_ZN6AB180513deepPowerDownEi+0x158>
   b7536:	f8df 8040 	ldr.w	r8, [pc, #64]	; b7578 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b753a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b753e:	4606      	mov	r6, r0
   b7540:	434f      	muls	r7, r1
   b7542:	f004 fd77 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
   b7546:	1b80      	subs	r0, r0, r6
   b7548:	42b8      	cmp	r0, r7
   b754a:	d20e      	bcs.n	b756a <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b754c:	2201      	movs	r2, #1
   b754e:	2117      	movs	r1, #23
   b7550:	4628      	mov	r0, r5
   b7552:	f7ff fdbd 	bl	b70d0 <_ZN6AB180512readRegisterEhb>
   b7556:	4649      	mov	r1, r9
   b7558:	4602      	mov	r2, r0
   b755a:	4640      	mov	r0, r8
   b755c:	f7fc fdef 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b7560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b7564:	f005 f97a 	bl	bc85c <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b7568:	e7eb      	b.n	b7542 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b756a:	4906      	ldr	r1, [pc, #24]	; (b7584 <_ZN6AB180513deepPowerDownEi+0x154>)
   b756c:	4802      	ldr	r0, [pc, #8]	; (b7578 <_ZN6AB180513deepPowerDownEi+0x148>)
   b756e:	f7ff fceb 	bl	b6f48 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b7572:	f007 fe26 	bl	bf1c2 <_ZN11SystemClass5resetEv>
    return true;
   b7576:	e770      	b.n	b745a <_ZN6AB180513deepPowerDownEi+0x2a>
   b7578:	2003e434 	.word	0x2003e434
   b757c:	000c1af8 	.word	0x000c1af8
   b7580:	000c1aed 	.word	0x000c1aed
   b7584:	000c1b1e 	.word	0x000c1b1e
   b7588:	000c1b09 	.word	0x000c1b09

000b758c <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b758c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7590:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b7594:	4605      	mov	r5, r0
   b7596:	460c      	mov	r4, r1
   b7598:	4691      	mov	r9, r2
   b759a:	461f      	mov	r7, r3
    if (lock) {
   b759c:	f1ba 0f00 	cmp.w	sl, #0
   b75a0:	d002      	beq.n	b75a8 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b75a2:	6840      	ldr	r0, [r0, #4]
   b75a4:	f005 fec6 	bl	bd334 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b75a8:	b307      	cbz	r7, b75ec <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b75aa:	2f20      	cmp	r7, #32
   b75ac:	463e      	mov	r6, r7
   b75ae:	bf28      	it	cs
   b75b0:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b75b2:	2c7f      	cmp	r4, #127	; 0x7f
   b75b4:	d826      	bhi.n	b7604 <_ZN6AB18057readRamEjPhjb+0x78>
   b75b6:	1933      	adds	r3, r6, r4
   b75b8:	2b80      	cmp	r3, #128	; 0x80
   b75ba:	d901      	bls.n	b75c0 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b75bc:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b75c0:	2301      	movs	r3, #1
   b75c2:	2204      	movs	r2, #4
   b75c4:	213f      	movs	r1, #63	; 0x3f
   b75c6:	4628      	mov	r0, r5
   b75c8:	f7ff fe77 	bl	b72ba <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b75cc:	2300      	movs	r3, #0
   b75ce:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b75d2:	9300      	str	r3, [sp, #0]
   b75d4:	464a      	mov	r2, r9
   b75d6:	4633      	mov	r3, r6
   b75d8:	b2c9      	uxtb	r1, r1
   b75da:	4628      	mov	r0, r5
   b75dc:	f7ff fce4 	bl	b6fa8 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b75e0:	4680      	mov	r8, r0
   b75e2:	b128      	cbz	r0, b75f0 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b75e4:	4434      	add	r4, r6
        dataLen -= count;
   b75e6:	1bbf      	subs	r7, r7, r6
        data += count;
   b75e8:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b75ea:	e7dd      	b.n	b75a8 <_ZN6AB18057readRamEjPhjb+0x1c>
   b75ec:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b75f0:	f1ba 0f00 	cmp.w	sl, #0
   b75f4:	d002      	beq.n	b75fc <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b75f6:	6868      	ldr	r0, [r5, #4]
   b75f8:	f005 fea5 	bl	bd346 <_ZN7TwoWire6unlockEv>
}
   b75fc:	4640      	mov	r0, r8
   b75fe:	b002      	add	sp, #8
   b7600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7604:	2301      	movs	r3, #1
   b7606:	2204      	movs	r2, #4
   b7608:	213f      	movs	r1, #63	; 0x3f
   b760a:	4628      	mov	r0, r5
   b760c:	f7ff feb6 	bl	b737c <_ZN6AB180514setRegisterBitEhhb>
   b7610:	e7dc      	b.n	b75cc <_ZN6AB18057readRamEjPhjb+0x40>

000b7612 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b7612:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7616:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b761a:	4605      	mov	r5, r0
   b761c:	460c      	mov	r4, r1
   b761e:	4691      	mov	r9, r2
   b7620:	461f      	mov	r7, r3
    if (lock) {
   b7622:	f1ba 0f00 	cmp.w	sl, #0
   b7626:	d002      	beq.n	b762e <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b7628:	6840      	ldr	r0, [r0, #4]
   b762a:	f005 fe83 	bl	bd334 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b762e:	b307      	cbz	r7, b7672 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b7630:	2f1f      	cmp	r7, #31
   b7632:	463e      	mov	r6, r7
   b7634:	bf28      	it	cs
   b7636:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b7638:	2c7f      	cmp	r4, #127	; 0x7f
   b763a:	d826      	bhi.n	b768a <_ZN6AB18058writeRamEjPKhjb+0x78>
   b763c:	1933      	adds	r3, r6, r4
   b763e:	2b80      	cmp	r3, #128	; 0x80
   b7640:	d901      	bls.n	b7646 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b7642:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7646:	2301      	movs	r3, #1
   b7648:	2204      	movs	r2, #4
   b764a:	213f      	movs	r1, #63	; 0x3f
   b764c:	4628      	mov	r0, r5
   b764e:	f7ff fe34 	bl	b72ba <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b7652:	2300      	movs	r3, #0
   b7654:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b7658:	9300      	str	r3, [sp, #0]
   b765a:	464a      	mov	r2, r9
   b765c:	4633      	mov	r3, r6
   b765e:	b2c9      	uxtb	r1, r1
   b7660:	4628      	mov	r0, r5
   b7662:	f7ff fd43 	bl	b70ec <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b7666:	4680      	mov	r8, r0
   b7668:	b128      	cbz	r0, b7676 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b766a:	4434      	add	r4, r6
        dataLen -= count;
   b766c:	1bbf      	subs	r7, r7, r6
        data += count;
   b766e:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b7670:	e7dd      	b.n	b762e <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b7672:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b7676:	f1ba 0f00 	cmp.w	sl, #0
   b767a:	d002      	beq.n	b7682 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b767c:	6868      	ldr	r0, [r5, #4]
   b767e:	f005 fe62 	bl	bd346 <_ZN7TwoWire6unlockEv>
}
   b7682:	4640      	mov	r0, r8
   b7684:	b002      	add	sp, #8
   b7686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b768a:	2301      	movs	r3, #1
   b768c:	2204      	movs	r2, #4
   b768e:	213f      	movs	r1, #63	; 0x3f
   b7690:	4628      	mov	r0, r5
   b7692:	f7ff fe73 	bl	b737c <_ZN6AB180514setRegisterBitEhhb>
   b7696:	e7dc      	b.n	b7652 <_ZN6AB18058writeRamEjPKhjb+0x40>

000b7698 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b7698:	b530      	push	{r4, r5, lr}
   b769a:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b769c:	680d      	ldr	r5, [r1, #0]
   b769e:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b76a2:	9503      	str	r5, [sp, #12]
   b76a4:	684d      	ldr	r5, [r1, #4]
   b76a6:	9502      	str	r5, [sp, #8]
   b76a8:	688d      	ldr	r5, [r1, #8]
   b76aa:	9501      	str	r5, [sp, #4]
   b76ac:	68c9      	ldr	r1, [r1, #12]
   b76ae:	9100      	str	r1, [sp, #0]
   b76b0:	3301      	adds	r3, #1
   b76b2:	4904      	ldr	r1, [pc, #16]	; (b76c4 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b76b4:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b76b8:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b76ba:	f007 fd1b 	bl	bf0f4 <_ZN6String6formatEPKcz>
}
   b76be:	4620      	mov	r0, r4
   b76c0:	b005      	add	sp, #20
   b76c2:	bd30      	pop	{r4, r5, pc}
   b76c4:	000c1b30 	.word	0x000c1b30

000b76c8 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b76c8:	0903      	lsrs	r3, r0, #4
}
   b76ca:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b76cc:	f000 000f 	and.w	r0, r0, #15
}
   b76d0:	fb02 0003 	mla	r0, r2, r3, r0
   b76d4:	4770      	bx	lr

000b76d6 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b76d6:	b538      	push	{r3, r4, r5, lr}
   b76d8:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b76da:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b76dc:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b76de:	f7ff fff3 	bl	b76c8 <_ZN6AB180510bcdToValueEh>
   b76e2:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b76e4:	7860      	ldrb	r0, [r4, #1]
   b76e6:	f7ff ffef 	bl	b76c8 <_ZN6AB180510bcdToValueEh>
   b76ea:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b76ec:	78a0      	ldrb	r0, [r4, #2]
   b76ee:	f7ff ffeb 	bl	b76c8 <_ZN6AB180510bcdToValueEh>
   b76f2:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b76f4:	78e0      	ldrb	r0, [r4, #3]
   b76f6:	f7ff ffe7 	bl	b76c8 <_ZN6AB180510bcdToValueEh>
   b76fa:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b76fc:	7920      	ldrb	r0, [r4, #4]
   b76fe:	f7ff ffe3 	bl	b76c8 <_ZN6AB180510bcdToValueEh>
   b7702:	3801      	subs	r0, #1
   b7704:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b7706:	b92d      	cbnz	r5, b7714 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b7708:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b770a:	7828      	ldrb	r0, [r5, #0]
   b770c:	f7ff ffdc 	bl	b76c8 <_ZN6AB180510bcdToValueEh>
   b7710:	6188      	str	r0, [r1, #24]
}
   b7712:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b7714:	7960      	ldrb	r0, [r4, #5]
   b7716:	f7ff ffd7 	bl	b76c8 <_ZN6AB180510bcdToValueEh>
   b771a:	3064      	adds	r0, #100	; 0x64
   b771c:	1da5      	adds	r5, r4, #6
   b771e:	6148      	str	r0, [r1, #20]
   b7720:	e7f3      	b.n	b770a <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b7724 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7724:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7726:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7728:	b088      	sub	sp, #32
   b772a:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b772c:	461a      	mov	r2, r3
   b772e:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7730:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7732:	f7ff fda4 	bl	b727e <_ZN6AB180510isBitClearEhhb>
   b7736:	b1f0      	cbz	r0, b7776 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b7738:	2308      	movs	r3, #8
   b773a:	2601      	movs	r6, #1
   b773c:	4620      	mov	r0, r4
   b773e:	9600      	str	r6, [sp, #0]
   b7740:	eb0d 0203 	add.w	r2, sp, r3
   b7744:	2100      	movs	r1, #0
   b7746:	f7ff fc2f 	bl	b6fa8 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b774a:	4604      	mov	r4, r0
   b774c:	b198      	cbz	r0, b7776 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b774e:	4632      	mov	r2, r6
   b7750:	4629      	mov	r1, r5
   b7752:	f10d 0009 	add.w	r0, sp, #9
   b7756:	f7ff ffbe 	bl	b76d6 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b775a:	a804      	add	r0, sp, #16
   b775c:	f7ff ff9c 	bl	b7698 <_ZN6AB180510tmToStringEPK2tm>
   b7760:	4808      	ldr	r0, [pc, #32]	; (b7784 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b7762:	9a04      	ldr	r2, [sp, #16]
   b7764:	4908      	ldr	r1, [pc, #32]	; (b7788 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b7766:	f7fc fcea 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b776a:	a804      	add	r0, sp, #16
   b776c:	f007 fb6a 	bl	bee44 <_ZN6StringD1Ev>
}
   b7770:	4620      	mov	r0, r4
   b7772:	b008      	add	sp, #32
   b7774:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b7776:	2224      	movs	r2, #36	; 0x24
   b7778:	2100      	movs	r1, #0
   b777a:	4628      	mov	r0, r5
   b777c:	f008 ff62 	bl	c0644 <memset>
   b7780:	2400      	movs	r4, #0
   b7782:	e7f5      	b.n	b7770 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b7784:	2003e434 	.word	0x2003e434
   b7788:	000c1b4e 	.word	0x000c1b4e

000b778c <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b778c:	b530      	push	{r4, r5, lr}
   b778e:	b08b      	sub	sp, #44	; 0x2c
   b7790:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b7792:	a901      	add	r1, sp, #4
   b7794:	f7ff ffc6 	bl	b7724 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b7798:	4604      	mov	r4, r0
   b779a:	b120      	cbz	r0, b77a6 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b779c:	a801      	add	r0, sp, #4
   b779e:	f005 f855 	bl	bc84c <mktime>
   b77a2:	e9c5 0100 	strd	r0, r1, [r5]
}
   b77a6:	4620      	mov	r0, r4
   b77a8:	b00b      	add	sp, #44	; 0x2c
   b77aa:	bd30      	pop	{r4, r5, pc}

000b77ac <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b77ac:	230a      	movs	r3, #10
   b77ae:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b77b2:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b77b6:	fb91 f2f3 	sdiv	r2, r1, r3
   b77ba:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b77be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b77c2:	b2c0      	uxtb	r0, r0
   b77c4:	4770      	bx	lr

000b77c6 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b77c6:	b570      	push	{r4, r5, r6, lr}
   b77c8:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b77ca:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b77cc:	460c      	mov	r4, r1
   b77ce:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b77d0:	f7ff ffec 	bl	b77ac <_ZN6AB180510valueToBcdEi>
   b77d4:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b77d6:	6868      	ldr	r0, [r5, #4]
   b77d8:	f7ff ffe8 	bl	b77ac <_ZN6AB180510valueToBcdEi>
   b77dc:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b77de:	68a8      	ldr	r0, [r5, #8]
   b77e0:	f7ff ffe4 	bl	b77ac <_ZN6AB180510valueToBcdEi>
   b77e4:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b77e6:	68e8      	ldr	r0, [r5, #12]
   b77e8:	f7ff ffe0 	bl	b77ac <_ZN6AB180510valueToBcdEi>
   b77ec:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b77ee:	6928      	ldr	r0, [r5, #16]
   b77f0:	3001      	adds	r0, #1
   b77f2:	f7ff ffdb 	bl	b77ac <_ZN6AB180510valueToBcdEi>
   b77f6:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b77f8:	b92e      	cbnz	r6, b7806 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b77fa:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b77fc:	69a8      	ldr	r0, [r5, #24]
   b77fe:	f7ff ffd5 	bl	b77ac <_ZN6AB180510valueToBcdEi>
   b7802:	7030      	strb	r0, [r6, #0]
}
   b7804:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b7806:	696a      	ldr	r2, [r5, #20]
   b7808:	2364      	movs	r3, #100	; 0x64
   b780a:	fb92 f0f3 	sdiv	r0, r2, r3
   b780e:	fb03 2010 	mls	r0, r3, r0, r2
   b7812:	f7ff ffcb 	bl	b77ac <_ZN6AB180510valueToBcdEi>
   b7816:	1da6      	adds	r6, r4, #6
   b7818:	7160      	strb	r0, [r4, #5]
   b781a:	e7ef      	b.n	b77fc <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b781c <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b781c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b781e:	b087      	sub	sp, #28
   b7820:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b7822:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b7824:	4616      	mov	r6, r2
   b7826:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b7828:	f7ff ff36 	bl	b7698 <_ZN6AB180510tmToStringEPK2tm>
   b782c:	481e      	ldr	r0, [pc, #120]	; (b78a8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b782e:	9a02      	ldr	r2, [sp, #8]
   b7830:	491e      	ldr	r1, [pc, #120]	; (b78ac <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b7832:	f7fc fc84 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7836:	a802      	add	r0, sp, #8
   b7838:	f007 fb04 	bl	bee44 <_ZN6StringD1Ev>
    if (lock) {
   b783c:	b116      	cbz	r6, b7844 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b783e:	6868      	ldr	r0, [r5, #4]
   b7840:	f005 fd78 	bl	bd334 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b7844:	4620      	mov	r0, r4
   b7846:	2201      	movs	r2, #1
   b7848:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b784c:	2700      	movs	r7, #0
   b784e:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b7852:	f7ff ffb8 	bl	b77c6 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b7856:	2301      	movs	r3, #1
   b7858:	461a      	mov	r2, r3
   b785a:	2110      	movs	r1, #16
   b785c:	4628      	mov	r0, r5
   b785e:	f7ff fd8d 	bl	b737c <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b7862:	4604      	mov	r4, r0
   b7864:	b1e8      	cbz	r0, b78a2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b7866:	2308      	movs	r3, #8
   b7868:	9700      	str	r7, [sp, #0]
   b786a:	eb0d 0203 	add.w	r2, sp, r3
   b786e:	4639      	mov	r1, r7
   b7870:	4628      	mov	r0, r5
   b7872:	f7ff fc3b 	bl	b70ec <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b7876:	4604      	mov	r4, r0
   b7878:	b160      	cbz	r0, b7894 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b787a:	2301      	movs	r3, #1
   b787c:	461a      	mov	r2, r3
   b787e:	2110      	movs	r1, #16
   b7880:	4628      	mov	r0, r5
   b7882:	f7ff fd1a 	bl	b72ba <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b7886:	b116      	cbz	r6, b788e <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b7888:	6868      	ldr	r0, [r5, #4]
   b788a:	f005 fd5c 	bl	bd346 <_ZN7TwoWire6unlockEv>
}
   b788e:	4620      	mov	r0, r4
   b7890:	b007      	add	sp, #28
   b7892:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b7894:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b7898:	4905      	ldr	r1, [pc, #20]	; (b78b0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b789a:	4803      	ldr	r0, [pc, #12]	; (b78a8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b789c:	f7ff fb54 	bl	b6f48 <_ZNK5spark6Logger5errorEPKcz>
   b78a0:	e7f1      	b.n	b7886 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b78a2:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b78a6:	e7f7      	b.n	b7898 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b78a8:	2003e434 	.word	0x2003e434
   b78ac:	000c1b5c 	.word	0x000c1b5c
   b78b0:	000c1b6a 	.word	0x000c1b6a

000b78b4 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b78b4:	b513      	push	{r0, r1, r4, lr}
   b78b6:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b78b8:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b78ba:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b78be:	f008 fe73 	bl	c05a8 <gmtime>
    return setRtcFromTm(tm, lock);
   b78c2:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b78c6:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b78c8:	4620      	mov	r0, r4
   b78ca:	f7ff ffa7 	bl	b781c <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b78ce:	b002      	add	sp, #8
   b78d0:	bd10      	pop	{r4, pc}
	...

000b78d4 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b78d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b78d6:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b78d8:	b089      	sub	sp, #36	; 0x24
   b78da:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b78dc:	bb75      	cbnz	r5, b793c <_ZN6AB18054loopEv+0x68>
   b78de:	f007 fe47 	bl	bf570 <_ZN9TimeClass7isValidEv>
   b78e2:	b358      	cbz	r0, b793c <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b78e4:	2600      	movs	r6, #0
   b78e6:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b78e8:	a904      	add	r1, sp, #16
   b78ea:	4628      	mov	r0, r5
        tm = 0;
   b78ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b78f0:	f004 febc 	bl	bc66c <spark_sync_time_last>
   b78f4:	b310      	cbz	r0, b793c <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b78f6:	2501      	movs	r5, #1
   b78f8:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b78fa:	f007 fe56 	bl	bf5aa <_ZN9TimeClass3nowEv>
   b78fe:	17c3      	asrs	r3, r0, #31
   b7900:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b7904:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b7906:	9500      	str	r5, [sp, #0]
   b7908:	4620      	mov	r0, r4
   b790a:	f7ff ffd3 	bl	b78b4 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b790e:	a902      	add	r1, sp, #8
   b7910:	4620      	mov	r0, r4
        time = 0;
   b7912:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b7916:	f7ff ff39 	bl	b778c <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b791a:	4b13      	ldr	r3, [pc, #76]	; (b7968 <_ZN6AB18054loopEv+0x94>)
   b791c:	4913      	ldr	r1, [pc, #76]	; (b796c <_ZN6AB18054loopEv+0x98>)
   b791e:	681b      	ldr	r3, [r3, #0]
   b7920:	9300      	str	r3, [sp, #0]
   b7922:	a804      	add	r0, sp, #16
   b7924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7928:	f007 fde0 	bl	bf4ec <_ZN9TimeClass6formatExPKc>
   b792c:	4810      	ldr	r0, [pc, #64]	; (b7970 <_ZN6AB18054loopEv+0x9c>)
   b792e:	9a04      	ldr	r2, [sp, #16]
   b7930:	4910      	ldr	r1, [pc, #64]	; (b7974 <_ZN6AB18054loopEv+0xa0>)
   b7932:	f7fc fc04 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7936:	a804      	add	r0, sp, #16
   b7938:	f007 fa84 	bl	bee44 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b793c:	6963      	ldr	r3, [r4, #20]
   b793e:	b18b      	cbz	r3, b7964 <_ZN6AB18054loopEv+0x90>
   b7940:	f004 fb78 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b7944:	6923      	ldr	r3, [r4, #16]
   b7946:	1ac0      	subs	r0, r0, r3
   b7948:	6963      	ldr	r3, [r4, #20]
   b794a:	4298      	cmp	r0, r3
   b794c:	d30a      	bcc.n	b7964 <_ZN6AB18054loopEv+0x90>
   b794e:	f004 fb71 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b7952:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b7956:	6120      	str	r0, [r4, #16]
            setWDT();
   b7958:	4620      	mov	r0, r4
}
   b795a:	b009      	add	sp, #36	; 0x24
   b795c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b7960:	f7ff bc0c 	b.w	b717c <_ZN6AB18056setWDTEi>
}
   b7964:	b009      	add	sp, #36	; 0x24
   b7966:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7968:	2003d768 	.word	0x2003d768
   b796c:	2003e6a8 	.word	0x2003e6a8
   b7970:	2003e434 	.word	0x2003e434
   b7974:	000c1b85 	.word	0x000c1b85

000b7978 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b7978:	b530      	push	{r4, r5, lr}
   b797a:	4604      	mov	r4, r0
   b797c:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b797e:	b111      	cbz	r1, b7986 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b7980:	6840      	ldr	r0, [r0, #4]
   b7982:	f005 fc85 	bl	bd290 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b7986:	4620      	mov	r0, r4
   b7988:	f7ff fb64 	bl	b7054 <_ZN6AB180510detectChipEv>
   b798c:	ad06      	add	r5, sp, #24
   b798e:	2800      	cmp	r0, #0
   b7990:	d037      	beq.n	b7a02 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b7992:	4620      	mov	r0, r4
   b7994:	f7ff fc9c 	bl	b72d0 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b7998:	2301      	movs	r3, #1
   b799a:	461a      	mov	r2, r3
   b799c:	2110      	movs	r1, #16
   b799e:	4620      	mov	r0, r4
   b79a0:	f7ff fc6d 	bl	b727e <_ZN6AB180510isBitClearEhhb>
   b79a4:	b1d8      	cbz	r0, b79de <_ZN6AB18055setupEb+0x66>
   b79a6:	f007 fde3 	bl	bf570 <_ZN9TimeClass7isValidEv>
   b79aa:	b9c0      	cbnz	r0, b79de <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b79ac:	a902      	add	r1, sp, #8
   b79ae:	4620      	mov	r0, r4
   b79b0:	f7ff feec 	bl	b778c <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b79b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b79b8:	f007 fcde 	bl	bf378 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b79bc:	4b13      	ldr	r3, [pc, #76]	; (b7a0c <_ZN6AB18055setupEb+0x94>)
   b79be:	4914      	ldr	r1, [pc, #80]	; (b7a10 <_ZN6AB18055setupEb+0x98>)
   b79c0:	681b      	ldr	r3, [r3, #0]
   b79c2:	9300      	str	r3, [sp, #0]
   b79c4:	4628      	mov	r0, r5
   b79c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b79ca:	f007 fd8f 	bl	bf4ec <_ZN9TimeClass6formatExPKc>
   b79ce:	4811      	ldr	r0, [pc, #68]	; (b7a14 <_ZN6AB18055setupEb+0x9c>)
   b79d0:	9a06      	ldr	r2, [sp, #24]
   b79d2:	4911      	ldr	r1, [pc, #68]	; (b7a18 <_ZN6AB18055setupEb+0xa0>)
   b79d4:	f7fc fbb3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b79d8:	4628      	mov	r0, r5
   b79da:	f007 fa33 	bl	bee44 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b79de:	4b0f      	ldr	r3, [pc, #60]	; (b7a1c <_ZN6AB18055setupEb+0xa4>)
   b79e0:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b79e2:	4b0f      	ldr	r3, [pc, #60]	; (b7a20 <_ZN6AB18055setupEb+0xa8>)
   b79e4:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b79e6:	4b0f      	ldr	r3, [pc, #60]	; (b7a24 <_ZN6AB18055setupEb+0xac>)
   b79e8:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b79ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b79ee:	2300      	movs	r3, #0
   b79f0:	a802      	add	r0, sp, #8
   b79f2:	9500      	str	r5, [sp, #0]
   b79f4:	f7fd fd1e 	bl	b5434 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b79f8:	4628      	mov	r0, r5
   b79fa:	f7fd fb88 	bl	b510e <_ZNSt14_Function_baseD1Ev>
}
   b79fe:	b00b      	add	sp, #44	; 0x2c
   b7a00:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b7a02:	4909      	ldr	r1, [pc, #36]	; (b7a28 <_ZN6AB18055setupEb+0xb0>)
   b7a04:	4803      	ldr	r0, [pc, #12]	; (b7a14 <_ZN6AB18055setupEb+0x9c>)
   b7a06:	f7ff fa9f 	bl	b6f48 <_ZNK5spark6Logger5errorEPKcz>
   b7a0a:	e7e8      	b.n	b79de <_ZN6AB18055setupEb+0x66>
   b7a0c:	2003d768 	.word	0x2003d768
   b7a10:	2003e6a8 	.word	0x2003e6a8
   b7a14:	2003e434 	.word	0x2003e434
   b7a18:	000c1b9b 	.word	0x000c1b9b
   b7a1c:	000b7201 	.word	0x000b7201
   b7a20:	000b50eb 	.word	0x000b50eb
   b7a24:	000b50d7 	.word	0x000b50d7
   b7a28:	000c1bb8 	.word	0x000c1bb8

000b7a2c <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b7a2c:	4b01      	ldr	r3, [pc, #4]	; (b7a34 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b7a2e:	4a02      	ldr	r2, [pc, #8]	; (b7a38 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b7a30:	601a      	str	r2, [r3, #0]
}
   b7a32:	4770      	bx	lr
   b7a34:	2003e434 	.word	0x2003e434
   b7a38:	000c1bd0 	.word	0x000c1bd0

000b7a3c <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b7a3c:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b7a3e:	2301      	movs	r3, #1
   b7a40:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b7a42:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b7a44:	4604      	mov	r4, r0
        if (th->func) {
   b7a46:	b143      	cbz	r3, b7a5a <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b7a48:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7a4a:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b7a4c:	2301      	movs	r3, #1
   b7a4e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b7a50:	2000      	movs	r0, #0
    }
   b7a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b7a56:	f004 babd 	b.w	bbfd4 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7a5a:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b7a5c:	2800      	cmp	r0, #0
   b7a5e:	d0f5      	beq.n	b7a4c <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b7a60:	6883      	ldr	r3, [r0, #8]
   b7a62:	b90b      	cbnz	r3, b7a68 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b7a64:	f008 f8bc 	bl	bfbe0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7a68:	68c3      	ldr	r3, [r0, #12]
   b7a6a:	e7ee      	b.n	b7a4a <_ZN6Thread3runEPv+0xe>

000b7a6c <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b7a6c:	2a01      	cmp	r2, #1
   b7a6e:	d102      	bne.n	b7a76 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7a70:	6001      	str	r1, [r0, #0]
      }
   b7a72:	2000      	movs	r0, #0
   b7a74:	4770      	bx	lr
	  switch (__op)
   b7a76:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b7a78:	bf04      	itt	eq
   b7a7a:	680b      	ldreq	r3, [r1, #0]
   b7a7c:	6003      	streq	r3, [r0, #0]
	      break;
   b7a7e:	e7f8      	b.n	b7a72 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b7a80 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b7a80:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b7a82:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b7a84:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b7a86:	b135      	cbz	r5, b7a96 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b7a88:	4628      	mov	r0, r5
   b7a8a:	f7fd fb40 	bl	b510e <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b7a8e:	2110      	movs	r1, #16
   b7a90:	4628      	mov	r0, r5
   b7a92:	f7fc fb04 	bl	b409e <_ZdlPvj>
   b7a96:	4620      	mov	r0, r4
   b7a98:	2114      	movs	r1, #20
      }
   b7a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b7a9e:	f7fc bafe 	b.w	b409e <_ZdlPvj>

000b7aa2 <_ZN6Thread7disposeEv>:
    void dispose()
   b7aa2:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7aa4:	6803      	ldr	r3, [r0, #0]
   b7aa6:	4604      	mov	r4, r0
        if (!isValid())
   b7aa8:	b1ab      	cbz	r3, b7ad6 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b7aaa:	6858      	ldr	r0, [r3, #4]
   b7aac:	f004 fa42 	bl	bbf34 <os_thread_is_current>
   b7ab0:	b988      	cbnz	r0, b7ad6 <_ZN6Thread7disposeEv+0x34>
   b7ab2:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b7ab4:	7c5a      	ldrb	r2, [r3, #17]
   b7ab6:	b912      	cbnz	r2, b7abe <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b7ab8:	6858      	ldr	r0, [r3, #4]
   b7aba:	f004 fa43 	bl	bbf44 <os_thread_join>
        os_thread_cleanup(d_->handle);
   b7abe:	6823      	ldr	r3, [r4, #0]
   b7ac0:	6858      	ldr	r0, [r3, #4]
   b7ac2:	f004 fa47 	bl	bbf54 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b7ac6:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b7ac8:	2300      	movs	r3, #0
   b7aca:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b7acc:	b118      	cbz	r0, b7ad6 <_ZN6Thread7disposeEv+0x34>
    }
   b7ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7ad2:	f7ff bfd5 	b.w	b7a80 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b7ad6:	bd10      	pop	{r4, pc}

000b7ad8 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b7ad8:	4a05      	ldr	r2, [pc, #20]	; (b7af0 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b7ada:	6002      	str	r2, [r0, #0]
   b7adc:	2200      	movs	r2, #0
   b7ade:	6042      	str	r2, [r0, #4]
   b7ae0:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b7ae2:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b7ae6:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b7aea:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b7aee:	4770      	bx	lr
   b7af0:	000c1c10 	.word	0x000c1c10

000b7af4 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b7af4:	b510      	push	{r4, lr}
    if (!_instance) {
   b7af6:	4c07      	ldr	r4, [pc, #28]	; (b7b14 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b7af8:	6823      	ldr	r3, [r4, #0]
   b7afa:	b943      	cbnz	r3, b7b0e <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b7afc:	f240 4064 	movw	r0, #1124	; 0x464
   b7b00:	f7fc fac9 	bl	b4096 <_Znwj>
   b7b04:	4603      	mov	r3, r0
   b7b06:	b108      	cbz	r0, b7b0c <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b7b08:	f7ff ffe6 	bl	b7ad8 <_ZN19BackgroundPublishRKC1Ev>
   b7b0c:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b7b0e:	6820      	ldr	r0, [r4, #0]
   b7b10:	bd10      	pop	{r4, pc}
   b7b12:	bf00      	nop
   b7b14:	2003e43c 	.word	0x2003e43c

000b7b18 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b7b18:	b538      	push	{r3, r4, r5, lr}
   b7b1a:	4604      	mov	r4, r0
    if(thread)
   b7b1c:	6840      	ldr	r0, [r0, #4]
   b7b1e:	b190      	cbz	r0, b7b46 <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b7b20:	2302      	movs	r3, #2
   b7b22:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b7b24:	f7ff ffbd 	bl	b7aa2 <_ZN6Thread7disposeEv>
        delete thread;
   b7b28:	6865      	ldr	r5, [r4, #4]
   b7b2a:	b155      	cbz	r5, b7b42 <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b7b2c:	4628      	mov	r0, r5
   b7b2e:	f7ff ffb8 	bl	b7aa2 <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b7b32:	6828      	ldr	r0, [r5, #0]
   b7b34:	b108      	cbz	r0, b7b3a <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b7b36:	f7ff ffa3 	bl	b7a80 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b7b3a:	2104      	movs	r1, #4
   b7b3c:	4628      	mov	r0, r5
   b7b3e:	f7fc faae 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b7b42:	2300      	movs	r3, #0
   b7b44:	6063      	str	r3, [r4, #4]
    }
}
   b7b46:	bd38      	pop	{r3, r4, r5, pc}

000b7b48 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b7b48:	b510      	push	{r4, lr}
   b7b4a:	4b05      	ldr	r3, [pc, #20]	; (b7b60 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b7b4c:	6003      	str	r3, [r0, #0]
   b7b4e:	4604      	mov	r4, r0
    stop();
   b7b50:	f7ff ffe2 	bl	b7b18 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b7b54:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b7b58:	f7fd fad9 	bl	b510e <_ZNSt14_Function_baseD1Ev>
}
   b7b5c:	4620      	mov	r0, r4
   b7b5e:	bd10      	pop	{r4, pc}
   b7b60:	000c1c10 	.word	0x000c1c10

000b7b64 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b7b64:	b510      	push	{r4, lr}
   b7b66:	4604      	mov	r4, r0
}
   b7b68:	f7ff ffee 	bl	b7b48 <_ZN19BackgroundPublishRKD1Ev>
   b7b6c:	4620      	mov	r0, r4
   b7b6e:	f240 4164 	movw	r1, #1124	; 0x464
   b7b72:	f7fc fa94 	bl	b409e <_ZdlPvj>
   b7b76:	4620      	mov	r0, r4
   b7b78:	bd10      	pop	{r4, pc}

000b7b7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b7b7a:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b7b7c:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b7b7e:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b7b80:	b17c      	cbz	r4, b7ba2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b7b82:	6863      	ldr	r3, [r4, #4]
   b7b84:	3b01      	subs	r3, #1
   b7b86:	6063      	str	r3, [r4, #4]
   b7b88:	b95b      	cbnz	r3, b7ba2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b7b8a:	6823      	ldr	r3, [r4, #0]
   b7b8c:	4620      	mov	r0, r4
   b7b8e:	689b      	ldr	r3, [r3, #8]
   b7b90:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7b92:	68a3      	ldr	r3, [r4, #8]
   b7b94:	3b01      	subs	r3, #1
   b7b96:	60a3      	str	r3, [r4, #8]
   b7b98:	b91b      	cbnz	r3, b7ba2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b7b9a:	6823      	ldr	r3, [r4, #0]
   b7b9c:	4620      	mov	r0, r4
   b7b9e:	68db      	ldr	r3, [r3, #12]
   b7ba0:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b7ba2:	4628      	mov	r0, r5
   b7ba4:	bd38      	pop	{r3, r4, r5, pc}

000b7ba6 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b7ba6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7ba8:	4604      	mov	r4, r0
   b7baa:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b7bac:	f100 060d 	add.w	r6, r0, #13
   b7bb0:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b7bb4:	7b23      	ldrb	r3, [r4, #12]
   b7bb6:	b91b      	cbnz	r3, b7bc0 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b7bb8:	2001      	movs	r0, #1
   b7bba:	f004 fe4f 	bl	bc85c <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b7bbe:	e7f9      	b.n	b7bb4 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b7bc0:	7b23      	ldrb	r3, [r4, #12]
   b7bc2:	2b02      	cmp	r3, #2
   b7bc4:	d064      	beq.n	b7c90 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b7bc6:	68a0      	ldr	r0, [r4, #8]
   b7bc8:	f004 f9d4 	bl	bbf74 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b7bcc:	68a0      	ldr	r0, [r4, #8]
   b7bce:	f004 f9d9 	bl	bbf84 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b7bd2:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b7bd6:	f88d 3000 	strb.w	r3, [sp]
   b7bda:	463a      	mov	r2, r7
   b7bdc:	233c      	movs	r3, #60	; 0x3c
   b7bde:	4631      	mov	r1, r6
   b7be0:	a806      	add	r0, sp, #24
   b7be2:	f005 f907 	bl	bcdf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b7be6:	9d06      	ldr	r5, [sp, #24]
   b7be8:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b7bea:	b933      	cbnz	r3, b7bfa <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b7bec:	7b23      	ldrb	r3, [r4, #12]
   b7bee:	2b02      	cmp	r3, #2
   b7bf0:	d003      	beq.n	b7bfa <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b7bf2:	2001      	movs	r0, #1
   b7bf4:	f004 fe32 	bl	bc85c <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b7bf8:	e7f5      	b.n	b7be6 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b7bfa:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b7bfe:	b31b      	cbz	r3, b7c48 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b7c00:	2000      	movs	r0, #0
   b7c02:	f004 fc99 	bl	bc538 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7c06:	b120      	cbz	r0, b7c12 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b7c08:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b7c0a:	b913      	cbnz	r3, b7c12 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b7c0c:	f004 fcf6 	bl	bc5fc <spark_process>
    }
   b7c10:	e7fa      	b.n	b7c08 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b7c12:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b7c14:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b7c18:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b7c1a:	1e59      	subs	r1, r3, #1
   b7c1c:	424b      	negs	r3, r1
   b7c1e:	414b      	adcs	r3, r1
   b7c20:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b7c24:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b7c28:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b7c2c:	b90b      	cbnz	r3, b7c32 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b7c2e:	f007 ffd7 	bl	bfbe0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7c32:	ab05      	add	r3, sp, #20
   b7c34:	9300      	str	r3, [sp, #0]
   b7c36:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b7c3a:	ab04      	add	r3, sp, #16
   b7c3c:	aa03      	add	r2, sp, #12
   b7c3e:	f10d 010b 	add.w	r1, sp, #11
   b7c42:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b7c46:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b7c48:	68a0      	ldr	r0, [r4, #8]
   b7c4a:	f004 f993 	bl	bbf74 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b7c4e:	7b23      	ldrb	r3, [r4, #12]
   b7c50:	2b02      	cmp	r3, #2
   b7c52:	d017      	beq.n	b7c84 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b7c54:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b7c58:	2500      	movs	r5, #0
   b7c5a:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b7c5e:	b143      	cbz	r3, b7c72 <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b7c60:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7c64:	2203      	movs	r2, #3
   b7c66:	4608      	mov	r0, r1
   b7c68:	4798      	blx	r3
	    _M_manager = nullptr;
   b7c6a:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b7c6e:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b7c72:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b7c74:	68a0      	ldr	r0, [r4, #8]
   b7c76:	7323      	strb	r3, [r4, #12]
   b7c78:	f004 f984 	bl	bbf84 <os_mutex_unlock>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b7c7c:	a807      	add	r0, sp, #28
   b7c7e:	f7ff ff7c 	bl	b7b7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7c82:	e797      	b.n	b7bb4 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b7c84:	68a0      	ldr	r0, [r4, #8]
   b7c86:	f004 f97d 	bl	bbf84 <os_mutex_unlock>
   b7c8a:	a807      	add	r0, sp, #28
   b7c8c:	f7ff ff75 	bl	b7b7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b7c90:	b009      	add	sp, #36	; 0x24
   b7c92:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7c94 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b7c94:	6800      	ldr	r0, [r0, #0]
   b7c96:	f7ff bf86 	b.w	b7ba6 <_ZN19BackgroundPublishRK8thread_fEv>

000b7c9a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7c9a:	b513      	push	{r0, r1, r4, lr}
   b7c9c:	460b      	mov	r3, r1
   b7c9e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7ca0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7ca4:	466c      	mov	r4, sp
   b7ca6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7caa:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7cae:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7cb2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7cb6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7cba:	b002      	add	sp, #8
   b7cbc:	bd10      	pop	{r4, pc}
	...

000b7cc0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b7cc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7cc4:	4606      	mov	r6, r0
   b7cc6:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b7cc8:	2014      	movs	r0, #20
   b7cca:	4926      	ldr	r1, [pc, #152]	; (b7d64 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b7ccc:	4617      	mov	r7, r2
   b7cce:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b7cd0:	f007 ff7c 	bl	bfbcc <_ZnwjRKSt9nothrow_t>
   b7cd4:	4604      	mov	r4, r0
   b7cd6:	b130      	cbz	r0, b7ce6 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>
      : _M_head_impl() { }
   b7cd8:	2000      	movs	r0, #0
            exited(false) {
   b7cda:	e9c4 0000 	strd	r0, r0, [r4]
   b7cde:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b7ce2:	7420      	strb	r0, [r4, #16]
   b7ce4:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b7ce6:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b7ce8:	2c00      	cmp	r4, #0
   b7cea:	d031      	beq.n	b7d50 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b7cec:	491d      	ldr	r1, [pc, #116]	; (b7d64 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b7cee:	2010      	movs	r0, #16
   b7cf0:	f007 ff6c 	bl	bfbcc <_ZnwjRKSt9nothrow_t>
   b7cf4:	4605      	mov	r5, r0
   b7cf6:	b168      	cbz	r0, b7d14 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b7cf8:	2300      	movs	r3, #0
   b7cfa:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7cfc:	4601      	mov	r1, r0
   b7cfe:	4638      	mov	r0, r7
   b7d00:	f7ff ffcb 	bl	b7c9a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7d04:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7d06:	68aa      	ldr	r2, [r5, #8]
   b7d08:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7d0a:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7d0c:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7d0e:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7d10:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7d12:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b7d14:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b7d16:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b7d18:	b137      	cbz	r7, b7d28 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b7d1a:	4638      	mov	r0, r7
   b7d1c:	f7fd f9f7 	bl	b510e <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b7d20:	2110      	movs	r1, #16
   b7d22:	4638      	mov	r0, r7
   b7d24:	f7fc f9bb 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7d28:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b7d2a:	6803      	ldr	r3, [r0, #0]
   b7d2c:	b183      	cbz	r3, b7d50 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b7d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7d30:	464a      	mov	r2, r9
   b7d32:	e9cd 0300 	strd	r0, r3, [sp]
   b7d36:	4641      	mov	r1, r8
   b7d38:	4b0b      	ldr	r3, [pc, #44]	; (b7d68 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b7d3a:	3004      	adds	r0, #4
   b7d3c:	f004 f8f2 	bl	bbf24 <os_thread_create>
   b7d40:	b930      	cbnz	r0, b7d50 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b7d42:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b7d44:	7c1b      	ldrb	r3, [r3, #16]
   b7d46:	b94b      	cbnz	r3, b7d5c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b7d48:	2001      	movs	r0, #1
   b7d4a:	f004 f963 	bl	bc014 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b7d4e:	e7f8      	b.n	b7d42 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b7d50:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b7d52:	2300      	movs	r3, #0
   b7d54:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b7d56:	b108      	cbz	r0, b7d5c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b7d58:	f7ff fe92 	bl	b7a80 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b7d5c:	4630      	mov	r0, r6
   b7d5e:	b003      	add	sp, #12
   b7d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7d64:	000c2690 	.word	0x000c2690
   b7d68:	000b7a3d 	.word	0x000b7a3d

000b7d6c <_ZN19BackgroundPublishRK5startEv>:
{
   b7d6c:	b530      	push	{r4, r5, lr}
    if(!thread)
   b7d6e:	6843      	ldr	r3, [r0, #4]
{
   b7d70:	b087      	sub	sp, #28
   b7d72:	4604      	mov	r4, r0
    if(!thread)
   b7d74:	b9c3      	cbnz	r3, b7da8 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b7d76:	3008      	adds	r0, #8
   b7d78:	f004 f8f4 	bl	bbf64 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b7d7c:	4b0b      	ldr	r3, [pc, #44]	; (b7dac <_ZN19BackgroundPublishRK5startEv+0x40>)
   b7d7e:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b7d80:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b7d82:	4b0b      	ldr	r3, [pc, #44]	; (b7db0 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b7d84:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b7d86:	9304      	str	r3, [sp, #16]
   b7d88:	f7fc f985 	bl	b4096 <_Znwj>
   b7d8c:	4605      	mov	r5, r0
   b7d8e:	b138      	cbz	r0, b7da0 <_ZN19BackgroundPublishRK5startEv+0x34>
   b7d90:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b7d94:	9300      	str	r3, [sp, #0]
   b7d96:	4907      	ldr	r1, [pc, #28]	; (b7db4 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b7d98:	2302      	movs	r3, #2
   b7d9a:	aa02      	add	r2, sp, #8
   b7d9c:	f7ff ff90 	bl	b7cc0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b7da0:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b7da2:	a802      	add	r0, sp, #8
   b7da4:	f7fd f9b3 	bl	b510e <_ZNSt14_Function_baseD1Ev>
}
   b7da8:	b007      	add	sp, #28
   b7daa:	bd30      	pop	{r4, r5, pc}
   b7dac:	000b7c95 	.word	0x000b7c95
   b7db0:	000b7a6d 	.word	0x000b7a6d
   b7db4:	000c1bf4 	.word	0x000c1bf4

000b7db8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b7db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7dbc:	4604      	mov	r4, r0
   b7dbe:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b7dc0:	6880      	ldr	r0, [r0, #8]
   b7dc2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b7dc4:	4698      	mov	r8, r3
   b7dc6:	460d      	mov	r5, r1
   b7dc8:	4616      	mov	r6, r2
   b7dca:	f004 f8d3 	bl	bbf74 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b7dce:	6863      	ldr	r3, [r4, #4]
   b7dd0:	b11b      	cbz	r3, b7dda <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b7dd2:	7b23      	ldrb	r3, [r4, #12]
   b7dd4:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b7dd8:	b133      	cbz	r3, b7de8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b7dda:	68a0      	ldr	r0, [r4, #8]
   b7ddc:	f004 f8d2 	bl	bbf84 <os_mutex_unlock>
    {
        return false;
   b7de0:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b7de2:	b005      	add	sp, #20
   b7de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7de8:	68a0      	ldr	r0, [r4, #8]
   b7dea:	f004 f8cb 	bl	bbf84 <os_mutex_unlock>
    if(!name)
   b7dee:	2d00      	cmp	r5, #0
   b7df0:	d03d      	beq.n	b7e6e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b7df2:	2240      	movs	r2, #64	; 0x40
   b7df4:	4629      	mov	r1, r5
   b7df6:	f104 000d 	add.w	r0, r4, #13
   b7dfa:	f008 fcfa 	bl	c07f2 <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b7dfe:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b7e02:	b38e      	cbz	r6, b7e68 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b7e04:	f240 4201 	movw	r2, #1025	; 0x401
   b7e08:	4631      	mov	r1, r6
   b7e0a:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b7e0e:	f008 fcf0 	bl	c07f2 <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b7e12:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b7e16:	2300      	movs	r3, #0
   b7e18:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b7e1a:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b7e1c:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b7e20:	b13b      	cbz	r3, b7e32 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7e22:	2202      	movs	r2, #2
   b7e24:	4639      	mov	r1, r7
   b7e26:	4668      	mov	r0, sp
   b7e28:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7e2a:	68fb      	ldr	r3, [r7, #12]
   b7e2c:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b7e2e:	68bb      	ldr	r3, [r7, #8]
   b7e30:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b7e32:	4629      	mov	r1, r5
   b7e34:	4668      	mov	r0, sp
   b7e36:	f7ff ff30 	bl	b7c9a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7e3a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7e3c:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b7e40:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7e44:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7e46:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b7e48:	4668      	mov	r0, sp
   b7e4a:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b7e4e:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b7e52:	9203      	str	r2, [sp, #12]
   b7e54:	f7fd f95b 	bl	b510e <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b7e58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b7e5a:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b7e5e:	2001      	movs	r0, #1
    event_flags = flags;
   b7e60:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b7e64:	7320      	strb	r0, [r4, #12]
    return true;
   b7e66:	e7bc      	b.n	b7de2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b7e68:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b7e6c:	e7d3      	b.n	b7e16 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b7e6e:	4628      	mov	r0, r5
   b7e70:	e7b7      	b.n	b7de2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
	...

000b7e74 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b7e74:	b510      	push	{r4, lr}
   b7e76:	4b05      	ldr	r3, [pc, #20]	; (b7e8c <_ZN10JsonBufferD1Ev+0x18>)
   b7e78:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b7e7a:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b7e7c:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b7e7e:	b91b      	cbnz	r3, b7e88 <_ZN10JsonBufferD1Ev+0x14>
   b7e80:	6840      	ldr	r0, [r0, #4]
   b7e82:	b108      	cbz	r0, b7e88 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b7e84:	f004 fc72 	bl	bc76c <free>
	}
}
   b7e88:	4620      	mov	r0, r4
   b7e8a:	bd10      	pop	{r4, pc}
   b7e8c:	000c1c28 	.word	0x000c1c28

000b7e90 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b7e90:	b510      	push	{r4, lr}
   b7e92:	4604      	mov	r4, r0
}
   b7e94:	f7ff ffee 	bl	b7e74 <_ZN10JsonBufferD1Ev>
   b7e98:	4620      	mov	r0, r4
   b7e9a:	2114      	movs	r1, #20
   b7e9c:	f7fc f8ff 	bl	b409e <_ZdlPvj>
   b7ea0:	4620      	mov	r0, r4
   b7ea2:	bd10      	pop	{r4, pc}

000b7ea4 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b7ea4:	b510      	push	{r4, lr}
   b7ea6:	4b03      	ldr	r3, [pc, #12]	; (b7eb4 <_ZN10JsonWriterD1Ev+0x10>)
   b7ea8:	6003      	str	r3, [r0, #0]
   b7eaa:	4604      	mov	r4, r0
   b7eac:	f7ff ffe2 	bl	b7e74 <_ZN10JsonBufferD1Ev>

}
   b7eb0:	4620      	mov	r0, r4
   b7eb2:	bd10      	pop	{r4, pc}
   b7eb4:	000c1c48 	.word	0x000c1c48

000b7eb8 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b7eb8:	b510      	push	{r4, lr}
   b7eba:	4604      	mov	r4, r0
}
   b7ebc:	f7ff fff2 	bl	b7ea4 <_ZN10JsonWriterD1Ev>
   b7ec0:	4620      	mov	r0, r4
   b7ec2:	2130      	movs	r1, #48	; 0x30
   b7ec4:	f7fc f8eb 	bl	b409e <_ZdlPvj>
   b7ec8:	4620      	mov	r0, r4
   b7eca:	bd10      	pop	{r4, pc}

000b7ecc <_ZN12JsonModifierD1Ev>:

JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {

}

JsonModifier::~JsonModifier() {
   b7ecc:	b510      	push	{r4, lr}
   b7ece:	4b03      	ldr	r3, [pc, #12]	; (b7edc <_ZN12JsonModifierD1Ev+0x10>)
   b7ed0:	6003      	str	r3, [r0, #0]
   b7ed2:	4604      	mov	r4, r0
   b7ed4:	f7ff ffe6 	bl	b7ea4 <_ZN10JsonWriterD1Ev>

}
   b7ed8:	4620      	mov	r0, r4
   b7eda:	bd10      	pop	{r4, pc}
   b7edc:	000c1c58 	.word	0x000c1c58

000b7ee0 <_ZN12JsonModifierD0Ev>:
JsonModifier::~JsonModifier() {
   b7ee0:	b510      	push	{r4, lr}
   b7ee2:	4604      	mov	r4, r0
}
   b7ee4:	f7ff fff2 	bl	b7ecc <_ZN12JsonModifierD1Ev>
   b7ee8:	4620      	mov	r0, r4
   b7eea:	2140      	movs	r1, #64	; 0x40
   b7eec:	f7fc f8d7 	bl	b409e <_ZdlPvj>
   b7ef0:	4620      	mov	r0, r4
   b7ef2:	bd10      	pop	{r4, pc}

000b7ef4 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b7ef4:	b510      	push	{r4, lr}
   b7ef6:	4b07      	ldr	r3, [pc, #28]	; (b7f14 <_ZN10JsonParserD1Ev+0x20>)
   b7ef8:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b7efa:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b7efc:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b7efe:	b91b      	cbnz	r3, b7f08 <_ZN10JsonParserD1Ev+0x14>
   b7f00:	6940      	ldr	r0, [r0, #20]
   b7f02:	b108      	cbz	r0, b7f08 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b7f04:	f004 fc32 	bl	bc76c <free>
JsonParser::~JsonParser() {
   b7f08:	4620      	mov	r0, r4
   b7f0a:	f7ff ffb3 	bl	b7e74 <_ZN10JsonBufferD1Ev>
}
   b7f0e:	4620      	mov	r0, r4
   b7f10:	bd10      	pop	{r4, pc}
   b7f12:	bf00      	nop
   b7f14:	000c1c38 	.word	0x000c1c38

000b7f18 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b7f18:	b510      	push	{r4, lr}
   b7f1a:	4604      	mov	r4, r0
}
   b7f1c:	f7ff ffea 	bl	b7ef4 <_ZN10JsonParserD1Ev>
   b7f20:	4620      	mov	r0, r4
   b7f22:	212c      	movs	r1, #44	; 0x2c
   b7f24:	f7fc f8bb 	bl	b409e <_ZdlPvj>
   b7f28:	4620      	mov	r0, r4
   b7f2a:	bd10      	pop	{r4, pc}

000b7f2c <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
   b7f2c:	4a03      	ldr	r2, [pc, #12]	; (b7f3c <_ZN10JsonBufferC1Ev+0x10>)
   b7f2e:	6002      	str	r2, [r0, #0]
   b7f30:	2200      	movs	r2, #0
   b7f32:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b7f36:	60c2      	str	r2, [r0, #12]
   b7f38:	7402      	strb	r2, [r0, #16]
}
   b7f3a:	4770      	bx	lr
   b7f3c:	000c1c28 	.word	0x000c1c28

000b7f40 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b7f40:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b7f42:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b7f44:	4604      	mov	r4, r0
   b7f46:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b7f48:	b10b      	cbz	r3, b7f4e <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b7f4a:	2000      	movs	r0, #0
}
   b7f4c:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b7f4e:	6840      	ldr	r0, [r0, #4]
   b7f50:	b138      	cbz	r0, b7f62 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b7f52:	f004 fc13 	bl	bc77c <realloc>
		if (newBuffer) {
   b7f56:	2800      	cmp	r0, #0
   b7f58:	d0f7      	beq.n	b7f4a <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b7f5a:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b7f5e:	2001      	movs	r0, #1
   b7f60:	e7f4      	b.n	b7f4c <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b7f62:	4608      	mov	r0, r1
   b7f64:	f004 fbfa 	bl	bc75c <malloc>
   b7f68:	e7f5      	b.n	b7f56 <_ZN10JsonBuffer8allocateEj+0x16>

000b7f6a <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7f6a:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7f6c:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7f6e:	460e      	mov	r6, r1
   b7f70:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7f72:	18d1      	adds	r1, r2, r3
   b7f74:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7f76:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7f78:	b172      	cbz	r2, b7f98 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b7f7a:	6882      	ldr	r2, [r0, #8]
   b7f7c:	428a      	cmp	r2, r1
   b7f7e:	d30b      	bcc.n	b7f98 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b7f80:	6860      	ldr	r0, [r4, #4]
   b7f82:	68e3      	ldr	r3, [r4, #12]
   b7f84:	462a      	mov	r2, r5
   b7f86:	4631      	mov	r1, r6
   b7f88:	4418      	add	r0, r3
   b7f8a:	f008 fb33 	bl	c05f4 <memcpy>
	offset += dataLen;
   b7f8e:	68e2      	ldr	r2, [r4, #12]
   b7f90:	442a      	add	r2, r5
   b7f92:	60e2      	str	r2, [r4, #12]
	return true;
   b7f94:	2001      	movs	r0, #1
}
   b7f96:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b7f98:	4620      	mov	r0, r4
   b7f9a:	f7ff ffd1 	bl	b7f40 <_ZN10JsonBuffer8allocateEj>
   b7f9e:	2800      	cmp	r0, #0
   b7fa0:	d1ee      	bne.n	b7f80 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b7fa2:	e7f8      	b.n	b7f96 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b7fa4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b7fa4:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b7fa6:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b7faa:	2200      	movs	r2, #0
   b7fac:	60c2      	str	r2, [r0, #12]
   b7fae:	2201      	movs	r2, #1
   b7fb0:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b7fb2:	6143      	str	r3, [r0, #20]
   b7fb4:	4a02      	ldr	r2, [pc, #8]	; (b7fc0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b7fb6:	9b02      	ldr	r3, [sp, #8]
   b7fb8:	6002      	str	r2, [r0, #0]
   b7fba:	61c3      	str	r3, [r0, #28]
}
   b7fbc:	bd10      	pop	{r4, pc}
   b7fbe:	bf00      	nop
   b7fc0:	000c1c38 	.word	0x000c1c38

000b7fc4 <_ZNK10JsonParser13getOuterArrayEv>:
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b7fc4:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b7fc8:	4283      	cmp	r3, r0
   b7fca:	d904      	bls.n	b7fd6 <_ZNK10JsonParser13getOuterArrayEv+0x12>
		if (token->type == JsonParserGeneratorRK::JSMN_ARRAY) {
   b7fcc:	7802      	ldrb	r2, [r0, #0]
   b7fce:	2a02      	cmp	r2, #2
   b7fd0:	d002      	beq.n	b7fd8 <_ZNK10JsonParser13getOuterArrayEv+0x14>
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b7fd2:	3010      	adds	r0, #16
   b7fd4:	e7f8      	b.n	b7fc8 <_ZNK10JsonParser13getOuterArrayEv+0x4>
	return 0;
   b7fd6:	2000      	movs	r0, #0
}
   b7fd8:	4770      	bx	lr

000b7fda <_ZNK10JsonParser14getOuterObjectEv>:
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   b7fda:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b7fde:	4298      	cmp	r0, r3
   b7fe0:	d204      	bcs.n	b7fec <_ZNK10JsonParser14getOuterObjectEv+0x12>
   b7fe2:	7803      	ldrb	r3, [r0, #0]
		return 0;
   b7fe4:	2b01      	cmp	r3, #1
   b7fe6:	bf18      	it	ne
   b7fe8:	2000      	movne	r0, #0
   b7fea:	4770      	bx	lr
   b7fec:	2000      	movs	r0, #0
}
   b7fee:	4770      	bx	lr

000b7ff0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b7ff0:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b7ff2:	6813      	ldr	r3, [r2, #0]
   b7ff4:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b7ff6:	6813      	ldr	r3, [r2, #0]
   b7ff8:	f103 0410 	add.w	r4, r3, #16
   b7ffc:	6014      	str	r4, [r2, #0]
   b7ffe:	6986      	ldr	r6, [r0, #24]
   b8000:	42b4      	cmp	r4, r6
   b8002:	d20a      	bcs.n	b801a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b8004:	699b      	ldr	r3, [r3, #24]
   b8006:	688c      	ldr	r4, [r1, #8]
   b8008:	42a3      	cmp	r3, r4
   b800a:	da01      	bge.n	b8010 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b800c:	42ab      	cmp	r3, r5
   b800e:	ddf2      	ble.n	b7ff6 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b8010:	42a3      	cmp	r3, r4
   b8012:	bfcc      	ite	gt
   b8014:	2000      	movgt	r0, #0
   b8016:	2001      	movle	r0, #1
   b8018:	e000      	b.n	b801c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b801a:	2000      	movs	r0, #0
}
   b801c:	bd70      	pop	{r4, r5, r6, pc}

000b801e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b801e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8020:	f101 0310 	add.w	r3, r1, #16
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b8024:	4604      	mov	r4, r0
   b8026:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8028:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b802a:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b802c:	9801      	ldr	r0, [sp, #4]
   b802e:	69a3      	ldr	r3, [r4, #24]
   b8030:	4283      	cmp	r3, r0
   b8032:	d90b      	bls.n	b804c <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
   b8034:	6882      	ldr	r2, [r0, #8]
   b8036:	688b      	ldr	r3, [r1, #8]
   b8038:	429a      	cmp	r2, r3
   b803a:	da07      	bge.n	b804c <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
		if (desiredIndex == index) {
   b803c:	42b5      	cmp	r5, r6
   b803e:	d006      	beq.n	b804e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x30>
		skipObject(container, token);
   b8040:	aa01      	add	r2, sp, #4
   b8042:	4620      	mov	r0, r4
		index++;
   b8044:	3501      	adds	r5, #1
		skipObject(container, token);
   b8046:	f7ff ffd3 	bl	b7ff0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b804a:	e7ef      	b.n	b802c <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0xe>
	return 0;
   b804c:	2000      	movs	r0, #0
}
   b804e:	b002      	add	sp, #8
   b8050:	bd70      	pop	{r4, r5, r6, pc}

000b8052 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b8052:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8056:	9d08      	ldr	r5, [sp, #32]
   b8058:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b805a:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b805e:	4604      	mov	r4, r0
   b8060:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8062:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b8064:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b8066:	9801      	ldr	r0, [sp, #4]
   b8068:	69a3      	ldr	r3, [r4, #24]
   b806a:	4283      	cmp	r3, r0
   b806c:	d91a      	bls.n	b80a4 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b806e:	6882      	ldr	r2, [r0, #8]
   b8070:	688b      	ldr	r3, [r1, #8]
   b8072:	429a      	cmp	r2, r3
   b8074:	da16      	bge.n	b80a4 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b8076:	42ae      	cmp	r6, r5
   b8078:	d10b      	bne.n	b8092 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b807a:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b807c:	aa01      	add	r2, sp, #4
   b807e:	4620      	mov	r0, r4
   b8080:	f7ff ffb6 	bl	b7ff0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b8084:	b128      	cbz	r0, b8092 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b8086:	9b01      	ldr	r3, [sp, #4]
   b8088:	f8c8 3000 	str.w	r3, [r8]
}
   b808c:	b002      	add	sp, #8
   b808e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b8092:	aa01      	add	r2, sp, #4
   b8094:	4620      	mov	r0, r4
   b8096:	f7ff ffab 	bl	b7ff0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b809a:	4620      	mov	r0, r4
		index++;
   b809c:	3601      	adds	r6, #1
		skipObject(container, token);
   b809e:	f7ff ffa7 	bl	b7ff0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b80a2:	e7e0      	b.n	b8066 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b80a4:	2000      	movs	r0, #0
   b80a6:	e7f1      	b.n	b808c <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b80a8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b80a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b80aa:	3b01      	subs	r3, #1
   b80ac:	2400      	movs	r4, #0
   b80ae:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b80b2:	1bf6      	subs	r6, r6, r7
   b80b4:	42a6      	cmp	r6, r4
   b80b6:	dd08      	ble.n	b80ca <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b80b8:	42a3      	cmp	r3, r4
   b80ba:	dd06      	ble.n	b80ca <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b80bc:	6845      	ldr	r5, [r0, #4]
   b80be:	443d      	add	r5, r7
   b80c0:	5d2d      	ldrb	r5, [r5, r4]
   b80c2:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b80c6:	3401      	adds	r4, #1
   b80c8:	e7f1      	b.n	b80ae <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b80ca:	2300      	movs	r3, #0
   b80cc:	7013      	strb	r3, [r2, #0]
}
   b80ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b80d0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b80d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b80d2:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b80d4:	2310      	movs	r3, #16
   b80d6:	466a      	mov	r2, sp
   b80d8:	f7ff ffe6 	bl	b80a8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b80dc:	4904      	ldr	r1, [pc, #16]	; (b80f0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b80de:	4622      	mov	r2, r4
   b80e0:	4668      	mov	r0, sp
   b80e2:	f004 fb5b 	bl	bc79c <sscanf>
}
   b80e6:	1e43      	subs	r3, r0, #1
   b80e8:	4258      	negs	r0, r3
   b80ea:	4158      	adcs	r0, r3
   b80ec:	b004      	add	sp, #16
   b80ee:	bd10      	pop	{r4, pc}
   b80f0:	000c0f31 	.word	0x000c0f31

000b80f4 <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
   b80f4:	b510      	push	{r4, lr}
   b80f6:	4604      	mov	r4, r0
	if (str) {
   b80f8:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b80fa:	460b      	mov	r3, r1
	if (str) {
   b80fc:	b128      	cbz	r0, b810a <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b80fe:	f006 ff84 	bl	bf00a <_ZN6String6concatEc>
		length++;
   b8102:	68e3      	ldr	r3, [r4, #12]
   b8104:	3301      	adds	r3, #1
   b8106:	60e3      	str	r3, [r4, #12]
}
   b8108:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b810a:	6860      	ldr	r0, [r4, #4]
   b810c:	2800      	cmp	r0, #0
   b810e:	d0f8      	beq.n	b8102 <_ZN16JsonParserString6appendEc+0xe>
   b8110:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b8114:	3a01      	subs	r2, #1
   b8116:	428a      	cmp	r2, r1
			buf[length] = ch;
   b8118:	bf88      	it	hi
   b811a:	5443      	strbhi	r3, [r0, r1]
   b811c:	e7f1      	b.n	b8102 <_ZN16JsonParserString6appendEc+0xe>

000b811e <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b811e:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b8120:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b8122:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8124:	4608      	mov	r0, r1
		str.append((char)unicode);
   b8126:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b8128:	d804      	bhi.n	b8134 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b812a:	b003      	add	sp, #12
   b812c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b8130:	f7ff bfe0 	b.w	b80f4 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b8134:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b8138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b813c:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b8140:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b8144:	d207      	bcs.n	b8156 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b8146:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b814a:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b814c:	f7ff ffd2 	bl	b80f4 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b8150:	9801      	ldr	r0, [sp, #4]
   b8152:	4621      	mov	r1, r4
   b8154:	e7e9      	b.n	b812a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b8156:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b8158:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b815c:	9001      	str	r0, [sp, #4]
   b815e:	f7ff ffc9 	bl	b80f4 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b8162:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b8166:	9801      	ldr	r0, [sp, #4]
   b8168:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b816c:	e7ee      	b.n	b814c <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b8170 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b8170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b8174:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b8176:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8178:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b8248 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b817c:	4680      	mov	r8, r0
   b817e:	460f      	mov	r7, r1
   b8180:	4615      	mov	r5, r2
			escape = false;
   b8182:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b8184:	68b8      	ldr	r0, [r7, #8]
   b8186:	42b0      	cmp	r0, r6
   b8188:	dd5a      	ble.n	b8240 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b818a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b818e:	5d99      	ldrb	r1, [r3, r6]
   b8190:	199a      	adds	r2, r3, r6
		if (escape) {
   b8192:	2c00      	cmp	r4, #0
   b8194:	d04b      	beq.n	b822e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b8196:	2975      	cmp	r1, #117	; 0x75
   b8198:	d805      	bhi.n	b81a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b819a:	296d      	cmp	r1, #109	; 0x6d
   b819c:	d807      	bhi.n	b81ae <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b819e:	2962      	cmp	r1, #98	; 0x62
   b81a0:	d01e      	beq.n	b81e0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b81a2:	2966      	cmp	r1, #102	; 0x66
   b81a4:	d01e      	beq.n	b81e4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b81a6:	4628      	mov	r0, r5
   b81a8:	f7ff ffa4 	bl	b80f4 <_ZN16JsonParserString6appendEc>
				break;
   b81ac:	e03d      	b.n	b822a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b81ae:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b81b2:	2c07      	cmp	r4, #7
   b81b4:	d8f7      	bhi.n	b81a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b81b6:	f20f 0c08 	addw	ip, pc, #8
   b81ba:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b81be:	bf00      	nop
   b81c0:	000b81e9 	.word	0x000b81e9
   b81c4:	000b81a7 	.word	0x000b81a7
   b81c8:	000b81a7 	.word	0x000b81a7
   b81cc:	000b81a7 	.word	0x000b81a7
   b81d0:	000b81ed 	.word	0x000b81ed
   b81d4:	000b81a7 	.word	0x000b81a7
   b81d8:	000b81f1 	.word	0x000b81f1
   b81dc:	000b81f5 	.word	0x000b81f5
				str.append('\b');
   b81e0:	2108      	movs	r1, #8
   b81e2:	e7e0      	b.n	b81a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b81e4:	210c      	movs	r1, #12
   b81e6:	e7de      	b.n	b81a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b81e8:	210a      	movs	r1, #10
   b81ea:	e7dc      	b.n	b81a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b81ec:	210d      	movs	r1, #13
   b81ee:	e7da      	b.n	b81a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b81f0:	2109      	movs	r1, #9
   b81f2:	e7d8      	b.n	b81a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b81f4:	1d31      	adds	r1, r6, #4
   b81f6:	4288      	cmp	r0, r1
   b81f8:	dd17      	ble.n	b822a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b81fa:	a902      	add	r1, sp, #8
   b81fc:	3304      	adds	r3, #4
   b81fe:	4433      	add	r3, r6
   b8200:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b8202:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b8206:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b820a:	429a      	cmp	r2, r3
   b820c:	d1f9      	bne.n	b8202 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b820e:	aa01      	add	r2, sp, #4
   b8210:	4651      	mov	r1, sl
					tmp[4] = 0;
   b8212:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8216:	f004 fac1 	bl	bc79c <sscanf>
   b821a:	2801      	cmp	r0, #1
   b821c:	d105      	bne.n	b822a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b821e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b8222:	4629      	mov	r1, r5
   b8224:	f7ff ff7b 	bl	b811e <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b8228:	3605      	adds	r6, #5
			escape = false;
   b822a:	2400      	movs	r4, #0
   b822c:	e004      	b.n	b8238 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b822e:	295c      	cmp	r1, #92	; 0x5c
   b8230:	d004      	beq.n	b823c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b8232:	4628      	mov	r0, r5
   b8234:	f7ff ff5e 	bl	b80f4 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b8238:	3601      	adds	r6, #1
   b823a:	e7a3      	b.n	b8184 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b823c:	2401      	movs	r4, #1
   b823e:	e7fb      	b.n	b8238 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b8240:	2001      	movs	r0, #1
   b8242:	b004      	add	sp, #16
   b8244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8248:	000c24a9 	.word	0x000c24a9

000b824c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b824c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b824e:	460c      	mov	r4, r1
   b8250:	4606      	mov	r6, r0
	result = "";
   b8252:	490c      	ldr	r1, [pc, #48]	; (b8284 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b8254:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b8256:	4615      	mov	r5, r2
	result = "";
   b8258:	f006 fe9d 	bl	bef96 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b825c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b8260:	1ac9      	subs	r1, r1, r3
   b8262:	3101      	adds	r1, #1
   b8264:	4628      	mov	r0, r5
   b8266:	f006 fe0b 	bl	bee80 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b826a:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b826c:	466a      	mov	r2, sp
   b826e:	4621      	mov	r1, r4
   b8270:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b8272:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b8276:	9500      	str	r5, [sp, #0]
   b8278:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b827a:	f7ff ff79 	bl	b8170 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b827e:	b004      	add	sp, #16
   b8280:	bd70      	pop	{r4, r5, r6, pc}
   b8282:	bf00      	nop
   b8284:	000c2508 	.word	0x000c2508

000b8288 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b828c:	b089      	sub	sp, #36	; 0x24
   b828e:	4605      	mov	r5, r0
   b8290:	4688      	mov	r8, r1
	String keyName;
   b8292:	a804      	add	r0, sp, #16
   b8294:	4912      	ldr	r1, [pc, #72]	; (b82e0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8296:	4616      	mov	r6, r2
   b8298:	4699      	mov	r9, r3
	String keyName;
   b829a:	f006 fe1e 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b829e:	2700      	movs	r7, #0
   b82a0:	9700      	str	r7, [sp, #0]
   b82a2:	464b      	mov	r3, r9
   b82a4:	aa03      	add	r2, sp, #12
   b82a6:	4641      	mov	r1, r8
   b82a8:	4628      	mov	r0, r5
   b82aa:	f7ff fed2 	bl	b8052 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b82ae:	4604      	mov	r4, r0
   b82b0:	b170      	cbz	r0, b82d0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b82b2:	9903      	ldr	r1, [sp, #12]
   b82b4:	aa04      	add	r2, sp, #16
   b82b6:	4628      	mov	r0, r5
   b82b8:	f7ff ffc8 	bl	b824c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b82bc:	4604      	mov	r4, r0
   b82be:	b908      	cbnz	r0, b82c4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b82c0:	3701      	adds	r7, #1
   b82c2:	e7ed      	b.n	b82a0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b82c4:	4631      	mov	r1, r6
   b82c6:	a804      	add	r0, sp, #16
   b82c8:	f006 fecd 	bl	bf066 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b82cc:	2800      	cmp	r0, #0
   b82ce:	d0f7      	beq.n	b82c0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b82d0:	a804      	add	r0, sp, #16
   b82d2:	f006 fdb7 	bl	bee44 <_ZN6StringD1Ev>
}
   b82d6:	4620      	mov	r0, r4
   b82d8:	b009      	add	sp, #36	; 0x24
   b82da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b82de:	bf00      	nop
   b82e0:	000c2508 	.word	0x000c2508

000b82e4 <_ZN10JsonWriter4initEv>:
	offset = 0;
   b82e4:	2300      	movs	r3, #0
	context[contextIndex].isFirst = true;
   b82e6:	2201      	movs	r2, #1
	offset = 0;
   b82e8:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b82ea:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b82ec:	8302      	strh	r2, [r0, #24]
	truncated = false;
   b82ee:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
   b82f2:	4770      	bx	lr

000b82f4 <_ZN10JsonWriterC1Ev>:
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b82f4:	b508      	push	{r3, lr}
   b82f6:	4603      	mov	r3, r0
   b82f8:	f7ff fe18 	bl	b7f2c <_ZN10JsonBufferC1Ev>
   b82fc:	4a04      	ldr	r2, [pc, #16]	; (b8310 <_ZN10JsonWriterC1Ev+0x1c>)
   b82fe:	601a      	str	r2, [r3, #0]
   b8300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	init();
   b8304:	4618      	mov	r0, r3
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b8306:	62da      	str	r2, [r3, #44]	; 0x2c
	init();
   b8308:	f7ff ffec 	bl	b82e4 <_ZN10JsonWriter4initEv>
}
   b830c:	bd08      	pop	{r3, pc}
   b830e:	bf00      	nop
   b8310:	000c1c48 	.word	0x000c1c48

000b8314 <_ZN10JsonWriter10insertCharEc>:
	if (offset < bufferLen) {
   b8314:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b8318:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b831a:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b831c:	bf3f      	itttt	cc
   b831e:	6842      	ldrcc	r2, [r0, #4]
   b8320:	1c5c      	addcc	r4, r3, #1
   b8322:	60c4      	strcc	r4, [r0, #12]
   b8324:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
   b8326:	bf24      	itt	cs
   b8328:	2301      	movcs	r3, #1
   b832a:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
}
   b832e:	bd10      	pop	{r4, pc}

000b8330 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b8330:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b8332:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b8334:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b8336:	b143      	cbz	r3, b834a <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b8338:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b833c:	7e59      	ldrb	r1, [r3, #25]
   b833e:	b109      	cbz	r1, b8344 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b8340:	f7ff ffe8 	bl	b8314 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b8344:	6963      	ldr	r3, [r4, #20]
   b8346:	3b01      	subs	r3, #1
   b8348:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b834a:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b834e:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b8350:	4288      	cmp	r0, r1
   b8352:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b8356:	bf2a      	itet	cs
   b8358:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b835a:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b835c:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b8360:	bd10      	pop	{r4, pc}

000b8362 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b8362:	b570      	push	{r4, r5, r6, lr}
   b8364:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b8366:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b836a:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b836c:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b836e:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b8370:	4430      	add	r0, r6
   b8372:	460a      	mov	r2, r1
   b8374:	4629      	mov	r1, r5
   b8376:	f004 fa21 	bl	bc7bc <vsnprintf>
	if (count <= spaceAvailable) {
   b837a:	4285      	cmp	r5, r0
		offset += count;
   b837c:	bf2d      	iteet	cs
   b837e:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
   b8380:	68a3      	ldrcc	r3, [r4, #8]
   b8382:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b8384:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b8386:	bf36      	itet	cc
   b8388:	2301      	movcc	r3, #1
		offset += count;
   b838a:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b838c:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
}
   b8390:	bd70      	pop	{r4, r5, r6, pc}

000b8392 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b8392:	b40e      	push	{r1, r2, r3}
   b8394:	b503      	push	{r0, r1, lr}
   b8396:	aa03      	add	r2, sp, #12
   b8398:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b839c:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b839e:	f7ff ffe0 	bl	b8362 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b83a2:	b002      	add	sp, #8
   b83a4:	f85d eb04 	ldr.w	lr, [sp], #4
   b83a8:	b003      	add	sp, #12
   b83aa:	4770      	bx	lr

000b83ac <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b83ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b83b0:	4604      	mov	r4, r0
   b83b2:	460e      	mov	r6, r1
	if (quoted) {
   b83b4:	4617      	mov	r7, r2
   b83b6:	b112      	cbz	r2, b83be <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b83b8:	2122      	movs	r1, #34	; 0x22
   b83ba:	f7ff ffab 	bl	b8314 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b83be:	f8df 810c 	ldr.w	r8, [pc, #268]	; b84cc <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b83c2:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b83c4:	5d71      	ldrb	r1, [r6, r5]
   b83c6:	eb06 0905 	add.w	r9, r6, r5
   b83ca:	2900      	cmp	r1, #0
   b83cc:	d074      	beq.n	b84b8 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b83ce:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b83d2:	429a      	cmp	r2, r3
   b83d4:	d270      	bcs.n	b84b8 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b83d6:	060b      	lsls	r3, r1, #24
   b83d8:	d534      	bpl.n	b8444 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b83da:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b83de:	2be0      	cmp	r3, #224	; 0xe0
   b83e0:	f105 0901 	add.w	r9, r5, #1
   b83e4:	d11d      	bne.n	b8422 <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b83e6:	f816 2009 	ldrb.w	r2, [r6, r9]
   b83ea:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b83ee:	2b80      	cmp	r3, #128	; 0x80
   b83f0:	d139      	bne.n	b8466 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b83f2:	f105 0902 	add.w	r9, r5, #2
   b83f6:	f816 3009 	ldrb.w	r3, [r6, r9]
   b83fa:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b83fe:	2880      	cmp	r0, #128	; 0x80
   b8400:	d131      	bne.n	b8466 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b8402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b8406:	0192      	lsls	r2, r2, #6
   b8408:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b840c:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b8410:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b8412:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b8414:	4641      	mov	r1, r8
   b8416:	4620      	mov	r0, r4
   b8418:	f7ff ffbb 	bl	b8392 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b841c:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b841e:	3501      	adds	r5, #1
   b8420:	e7d0      	b.n	b83c4 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b8422:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b8426:	2bc0      	cmp	r3, #192	; 0xc0
   b8428:	d11d      	bne.n	b8466 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b842a:	f816 3009 	ldrb.w	r3, [r6, r9]
   b842e:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b8432:	2a80      	cmp	r2, #128	; 0x80
   b8434:	d117      	bne.n	b8466 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b8436:	0189      	lsls	r1, r1, #6
   b8438:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b843c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b8440:	431a      	orrs	r2, r3
   b8442:	e7e7      	b.n	b8414 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b8444:	290d      	cmp	r1, #13
   b8446:	d80a      	bhi.n	b845e <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b8448:	2907      	cmp	r1, #7
   b844a:	d90c      	bls.n	b8466 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b844c:	f1a1 0308 	sub.w	r3, r1, #8
   b8450:	2b05      	cmp	r3, #5
   b8452:	d808      	bhi.n	b8466 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8454:	e8df f003 	tbb	[pc, r3]
   b8458:	07172309 	.word	0x07172309
   b845c:	1d11      	.short	0x1d11
   b845e:	2922      	cmp	r1, #34	; 0x22
   b8460:	d023      	beq.n	b84aa <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b8462:	295c      	cmp	r1, #92	; 0x5c
   b8464:	d021      	beq.n	b84aa <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b8466:	4620      	mov	r0, r4
   b8468:	e004      	b.n	b8474 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b846a:	215c      	movs	r1, #92	; 0x5c
   b846c:	4620      	mov	r0, r4
   b846e:	f7ff ff51 	bl	b8314 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b8472:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b8474:	f7ff ff4e 	bl	b8314 <_ZN10JsonWriter10insertCharEc>
				break;
   b8478:	e7d1      	b.n	b841e <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b847a:	215c      	movs	r1, #92	; 0x5c
   b847c:	4620      	mov	r0, r4
   b847e:	f7ff ff49 	bl	b8314 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b8482:	2166      	movs	r1, #102	; 0x66
   b8484:	e7f6      	b.n	b8474 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8486:	215c      	movs	r1, #92	; 0x5c
   b8488:	4620      	mov	r0, r4
   b848a:	f7ff ff43 	bl	b8314 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b848e:	216e      	movs	r1, #110	; 0x6e
   b8490:	e7f0      	b.n	b8474 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8492:	215c      	movs	r1, #92	; 0x5c
   b8494:	4620      	mov	r0, r4
   b8496:	f7ff ff3d 	bl	b8314 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b849a:	2172      	movs	r1, #114	; 0x72
   b849c:	e7ea      	b.n	b8474 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b849e:	215c      	movs	r1, #92	; 0x5c
   b84a0:	4620      	mov	r0, r4
   b84a2:	f7ff ff37 	bl	b8314 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b84a6:	2174      	movs	r1, #116	; 0x74
   b84a8:	e7e4      	b.n	b8474 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b84aa:	215c      	movs	r1, #92	; 0x5c
   b84ac:	4620      	mov	r0, r4
   b84ae:	f7ff ff31 	bl	b8314 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b84b2:	f899 1000 	ldrb.w	r1, [r9]
   b84b6:	e7dd      	b.n	b8474 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b84b8:	b12f      	cbz	r7, b84c6 <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b84ba:	4620      	mov	r0, r4
   b84bc:	2122      	movs	r1, #34	; 0x22
}
   b84be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b84c2:	f7ff bf27 	b.w	b8314 <_ZN10JsonWriter10insertCharEc>
}
   b84c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b84ca:	bf00      	nop
   b84cc:	000c1c18 	.word	0x000c1c18

000b84d0 <_ZN10JsonWriter20insertCheckSeparatorEv>:
	if (context[contextIndex].isFirst) {
   b84d0:	6942      	ldr	r2, [r0, #20]
   b84d2:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b84d6:	7e1a      	ldrb	r2, [r3, #24]
   b84d8:	b112      	cbz	r2, b84e0 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b84da:	2200      	movs	r2, #0
   b84dc:	761a      	strb	r2, [r3, #24]
}
   b84de:	4770      	bx	lr
		insertChar(',');
   b84e0:	212c      	movs	r1, #44	; 0x2c
   b84e2:	f7ff bf17 	b.w	b8314 <_ZN10JsonWriter10insertCharEc>

000b84e6 <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b84e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b84e8:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b84ea:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b84ec:	3301      	adds	r3, #1
   b84ee:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b84f0:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b84f2:	d80f      	bhi.n	b8514 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b84f4:	f7ff ffec 	bl	b84d0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b84f8:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b84fa:	9901      	ldr	r1, [sp, #4]
   b84fc:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b8500:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b8502:	2501      	movs	r5, #1
	contextIndex++;
   b8504:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b8506:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b8508:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b850a:	f7ff ff03 	bl	b8314 <_ZN10JsonWriter10insertCharEc>
   b850e:	4628      	mov	r0, r5
}
   b8510:	b002      	add	sp, #8
   b8512:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b8514:	2000      	movs	r0, #0
   b8516:	e7fb      	b.n	b8510 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b8518 <_ZN12JsonModifierC1ER10JsonParser>:
JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {
   b8518:	b510      	push	{r4, lr}
   b851a:	4604      	mov	r4, r0
   b851c:	f7ff feea 	bl	b82f4 <_ZN10JsonWriterC1Ev>
   b8520:	4b05      	ldr	r3, [pc, #20]	; (b8538 <_ZN12JsonModifierC1ER10JsonParser+0x20>)
   b8522:	6023      	str	r3, [r4, #0]
   b8524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8528:	2300      	movs	r3, #0
   b852a:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   b852e:	6321      	str	r1, [r4, #48]	; 0x30
   b8530:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   b8532:	4620      	mov	r0, r4
   b8534:	bd10      	pop	{r4, pc}
   b8536:	bf00      	nop
   b8538:	000c1c58 	.word	0x000c1c58

000b853c <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	jp.setOffset(left + origAfter);
	jp.parse();

	return true;
}
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b853c:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b853e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b8540:	3301      	adds	r3, #1
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b8542:	4604      	mov	r4, r0
	if (start != -1) {
   b8544:	d121      	bne.n	b858a <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4e>
		// Modification or insertion already in progress
		return false;
	}
	start = token->start;
	origAfter = jp.getOffset() - token->end;
   b8546:	6b05      	ldr	r5, [r0, #48]	; 0x30
	start = token->start;
   b8548:	684b      	ldr	r3, [r1, #4]
   b854a:	6343      	str	r3, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b854c:	68eb      	ldr	r3, [r5, #12]
	origAfter = jp.getOffset() - token->end;
   b854e:	6888      	ldr	r0, [r1, #8]
   b8550:	1a1a      	subs	r2, r3, r0
   b8552:	63a2      	str	r2, [r4, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b8554:	68ae      	ldr	r6, [r5, #8]
   b8556:	4430      	add	r0, r6
   b8558:	1ac3      	subs	r3, r0, r3

	//printf("start=%d origAfter=%d saveLoc=%d bufferSize=%d\n", start, origAfter, saveLoc, saveLoc - start);

	if (origAfter > 0) {
   b855a:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b855c:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b855e:	dd05      	ble.n	b856c <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b8560:	6868      	ldr	r0, [r5, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + token->end, origAfter);
   b8562:	6889      	ldr	r1, [r1, #8]
   b8564:	4401      	add	r1, r0
   b8566:	4418      	add	r0, r3
   b8568:	f008 f852 	bl	c0610 <memmove>
   b856c:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b856e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b8570:	6852      	ldr	r2, [r2, #4]
   b8572:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8574:	440a      	add	r2, r1
   b8576:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b8578:	2101      	movs	r1, #1
	init();
   b857a:	4620      	mov	r0, r4
	this->bufferLen = bufferLen;
   b857c:	e9c4 2301 	strd	r2, r3, [r4, #4]
	this->staticBuffers = true;
   b8580:	7421      	strb	r1, [r4, #16]
	init();
   b8582:	f7ff feaf 	bl	b82e4 <_ZN10JsonWriter4initEv>
   b8586:	4608      	mov	r0, r1

	return true;
}
   b8588:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b858a:	2000      	movs	r0, #0
   b858c:	e7fc      	b.n	b8588 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4c>

000b858e <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>:

bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b858e:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b8590:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b8592:	3301      	adds	r3, #1
bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b8594:	4604      	mov	r4, r0
   b8596:	460e      	mov	r6, r1
	if (start != -1) {
   b8598:	d129      	bne.n	b85ee <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x60>
		// Modification or insertion already in progress
		return false;
	}

	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b859a:	688d      	ldr	r5, [r1, #8]
	origAfter = jp.getOffset() - start;
   b859c:	6b01      	ldr	r1, [r0, #48]	; 0x30
	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b859e:	3d01      	subs	r5, #1
   b85a0:	6345      	str	r5, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b85a2:	68cb      	ldr	r3, [r1, #12]
	origAfter = jp.getOffset() - start;
   b85a4:	1b5a      	subs	r2, r3, r5
   b85a6:	6382      	str	r2, [r0, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b85a8:	6888      	ldr	r0, [r1, #8]
   b85aa:	4428      	add	r0, r5
   b85ac:	1ac3      	subs	r3, r0, r3

	if (origAfter > 0) {
   b85ae:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b85b0:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b85b2:	dd04      	ble.n	b85be <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b85b4:	6848      	ldr	r0, [r1, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + start, origAfter);
   b85b6:	1941      	adds	r1, r0, r5
   b85b8:	4418      	add	r0, r3
   b85ba:	f008 f829 	bl	c0610 <memmove>
   b85be:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b85c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b85c2:	6852      	ldr	r2, [r2, #4]
   b85c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b85c6:	440a      	add	r2, r1
   b85c8:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b85ca:	2501      	movs	r5, #1
	this->bufferLen = bufferLen;
   b85cc:	e9c4 2301 	strd	r2, r3, [r4, #4]
	init();
   b85d0:	4620      	mov	r0, r4
	this->staticBuffers = true;
   b85d2:	7425      	strb	r5, [r4, #16]
	init();
   b85d4:	f7ff fe86 	bl	b82e4 <_ZN10JsonWriter4initEv>
	context[contextIndex].isFirst = isFirst;
   b85d8:	6963      	ldr	r3, [r4, #20]
   b85da:	f103 020c 	add.w	r2, r3, #12

	// If array is not empty, add a separator
	setIsFirst(arrayOrObjectToken->size == 0);
   b85de:	68f3      	ldr	r3, [r6, #12]
   b85e0:	fab3 f383 	clz	r3, r3
   b85e4:	095b      	lsrs	r3, r3, #5
   b85e6:	f804 3012 	strb.w	r3, [r4, r2, lsl #1]
	context[contextIndex].isFirst = isFirst;
   b85ea:	4628      	mov	r0, r5

	return true;
}
   b85ec:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b85ee:	2000      	movs	r0, #0
   b85f0:	e7fc      	b.n	b85ec <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x5e>
	...

000b85f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b85f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b85f8:	6844      	ldr	r4, [r0, #4]
   b85fa:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b85fe:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8602:	f8d0 e000 	ldr.w	lr, [r0]
   b8606:	4596      	cmp	lr, r2
   b8608:	f080 81b9 	bcs.w	b897e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b860c:	f811 800e 	ldrb.w	r8, [r1, lr]
   b8610:	f1b8 0f00 	cmp.w	r8, #0
   b8614:	f000 81b3 	beq.w	b897e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b8618:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b861c:	f000 8098 	beq.w	b8750 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b8620:	d833      	bhi.n	b868a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b8622:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b8626:	f000 80a6 	beq.w	b8776 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b862a:	d810      	bhi.n	b864e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b862c:	f1a8 0809 	sub.w	r8, r8, #9
   b8630:	fa5f f888 	uxtb.w	r8, r8
   b8634:	f1b8 0f17 	cmp.w	r8, #23
   b8638:	d80d      	bhi.n	b8656 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b863a:	4d9f      	ldr	r5, [pc, #636]	; (b88b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b863c:	fa0c f808 	lsl.w	r8, ip, r8
   b8640:	ea18 0f05 	tst.w	r8, r5
   b8644:	d007      	beq.n	b8656 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8646:	6805      	ldr	r5, [r0, #0]
   b8648:	3501      	adds	r5, #1
   b864a:	6005      	str	r5, [r0, #0]
   b864c:	e7d9      	b.n	b8602 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b864e:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b8652:	f000 8133 	beq.w	b88bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8656:	f8d0 8000 	ldr.w	r8, [r0]
   b865a:	4542      	cmp	r2, r8
   b865c:	d90e      	bls.n	b867c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b865e:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8662:	b15d      	cbz	r5, b867c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b8664:	2d3a      	cmp	r5, #58	; 0x3a
   b8666:	f200 8169 	bhi.w	b893c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b866a:	2d1f      	cmp	r5, #31
   b866c:	f200 8151 	bhi.w	b8912 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b8670:	2d0a      	cmp	r5, #10
   b8672:	f200 8160 	bhi.w	b8936 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b8676:	2d08      	cmp	r5, #8
   b8678:	f240 8156 	bls.w	b8928 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b867c:	2b00      	cmp	r3, #0
   b867e:	f040 8162 	bne.w	b8946 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b8682:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b8686:	6005      	str	r5, [r0, #0]
   b8688:	e0a5      	b.n	b87d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b868a:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b868e:	d037      	beq.n	b8700 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b8690:	d82e      	bhi.n	b86f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b8692:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b8696:	d033      	beq.n	b8700 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b8698:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b869c:	d1db      	bne.n	b8656 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b869e:	2b00      	cmp	r3, #0
   b86a0:	d0d1      	beq.n	b8646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b86a2:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b86a6:	6845      	ldr	r5, [r0, #4]
   b86a8:	3d01      	subs	r5, #1
   b86aa:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b86ae:	2d00      	cmp	r5, #0
   b86b0:	db55      	blt.n	b875e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b86b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b86b6:	3701      	adds	r7, #1
   b86b8:	d04d      	beq.n	b8756 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b86ba:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b86be:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b86c2:	d148      	bne.n	b8756 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b86c4:	f898 b000 	ldrb.w	fp, [r8]
   b86c8:	45cb      	cmp	fp, r9
   b86ca:	d14b      	bne.n	b8764 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b86cc:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b86d0:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b86d4:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b86d8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b86dc:	f8de 7004 	ldr.w	r7, [lr, #4]
   b86e0:	3701      	adds	r7, #1
   b86e2:	d042      	beq.n	b876a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b86e4:	f8de 7008 	ldr.w	r7, [lr, #8]
   b86e8:	3701      	adds	r7, #1
   b86ea:	d13e      	bne.n	b876a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b86ec:	6085      	str	r5, [r0, #8]
				break;
   b86ee:	e7aa      	b.n	b8646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b86f0:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b86f4:	d1af      	bne.n	b8656 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b86f6:	2b00      	cmp	r3, #0
   b86f8:	d0a5      	beq.n	b8646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b86fa:	f04f 0901 	mov.w	r9, #1
   b86fe:	e7d2      	b.n	b86a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b8700:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b8702:	2b00      	cmp	r3, #0
   b8704:	d09f      	beq.n	b8646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b8706:	6845      	ldr	r5, [r0, #4]
   b8708:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b870a:	42af      	cmp	r7, r5
   b870c:	d94a      	bls.n	b87a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b870e:	f105 0e01 	add.w	lr, r5, #1
   b8712:	f8c0 e004 	str.w	lr, [r0, #4]
   b8716:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b871a:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b871e:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b8722:	2500      	movs	r5, #0
   b8724:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b8728:	6885      	ldr	r5, [r0, #8]
   b872a:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b872c:	bf1f      	itttt	ne
   b872e:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b8732:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b8736:	3501      	addne	r5, #1
   b8738:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b873c:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b8740:	bf0c      	ite	eq
   b8742:	2501      	moveq	r5, #1
   b8744:	2502      	movne	r5, #2
   b8746:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b874a:	6805      	ldr	r5, [r0, #0]
   b874c:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b8750:	6845      	ldr	r5, [r0, #4]
   b8752:	3d01      	subs	r5, #1
   b8754:	e7ca      	b.n	b86ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b8756:	3d01      	subs	r5, #1
   b8758:	f1a8 0810 	sub.w	r8, r8, #16
   b875c:	e7a7      	b.n	b86ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b875e:	3501      	adds	r5, #1
   b8760:	f47f af71 	bne.w	b8646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b8764:	f06f 0401 	mvn.w	r4, #1
   b8768:	e01e      	b.n	b87a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b876a:	3d01      	subs	r5, #1
   b876c:	1c6f      	adds	r7, r5, #1
   b876e:	f1ae 0e10 	sub.w	lr, lr, #16
   b8772:	d1b3      	bne.n	b86dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b8774:	e767      	b.n	b8646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b8776:	f10e 0901 	add.w	r9, lr, #1
   b877a:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b877e:	f8d0 8000 	ldr.w	r8, [r0]
   b8782:	4542      	cmp	r2, r8
   b8784:	f240 8093 	bls.w	b88ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b8788:	f811 5008 	ldrb.w	r5, [r1, r8]
   b878c:	2d00      	cmp	r5, #0
   b878e:	f000 808e 	beq.w	b88ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b8792:	2d22      	cmp	r5, #34	; 0x22
   b8794:	d130      	bne.n	b87f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b8796:	b1f3      	cbz	r3, b87d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b8798:	6845      	ldr	r5, [r0, #4]
   b879a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b879c:	42af      	cmp	r7, r5
   b879e:	d806      	bhi.n	b87ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b87a0:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b87a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b87a8:	4620      	mov	r0, r4
   b87aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b87ae:	f105 0e01 	add.w	lr, r5, #1
   b87b2:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b87b6:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b87ba:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b87be:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b87c2:	2700      	movs	r7, #0
   b87c4:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b87c6:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b87ca:	f04f 0a03 	mov.w	sl, #3
   b87ce:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b87d2:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b87d6:	6885      	ldr	r5, [r0, #8]
   b87d8:	1c6f      	adds	r7, r5, #1
				count++;
   b87da:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b87de:	f43f af32 	beq.w	b8646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b87e2:	2b00      	cmp	r3, #0
   b87e4:	f43f af2f 	beq.w	b8646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b87e8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b87ec:	f8de 500c 	ldr.w	r5, [lr, #12]
   b87f0:	3501      	adds	r5, #1
   b87f2:	f8ce 500c 	str.w	r5, [lr, #12]
   b87f6:	e726      	b.n	b8646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b87f8:	2d5c      	cmp	r5, #92	; 0x5c
   b87fa:	d111      	bne.n	b8820 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b87fc:	f108 0501 	add.w	r5, r8, #1
   b8800:	42aa      	cmp	r2, r5
   b8802:	d90d      	bls.n	b8820 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b8804:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b8806:	5d4d      	ldrb	r5, [r1, r5]
   b8808:	2d75      	cmp	r5, #117	; 0x75
   b880a:	d82b      	bhi.n	b8864 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b880c:	2d6d      	cmp	r5, #109	; 0x6d
   b880e:	d80b      	bhi.n	b8828 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b8810:	2d66      	cmp	r5, #102	; 0x66
   b8812:	d827      	bhi.n	b8864 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b8814:	2d5b      	cmp	r5, #91	; 0x5b
   b8816:	d81d      	bhi.n	b8854 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b8818:	2d22      	cmp	r5, #34	; 0x22
   b881a:	d001      	beq.n	b8820 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b881c:	2d2f      	cmp	r5, #47	; 0x2f
   b881e:	d121      	bne.n	b8864 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8820:	6805      	ldr	r5, [r0, #0]
   b8822:	3501      	adds	r5, #1
   b8824:	6005      	str	r5, [r0, #0]
   b8826:	e7aa      	b.n	b877e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b8828:	3d6e      	subs	r5, #110	; 0x6e
   b882a:	2d07      	cmp	r5, #7
   b882c:	d81a      	bhi.n	b8864 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b882e:	a701      	add	r7, pc, #4	; (adr r7, b8834 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b8830:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b8834:	000b8821 	.word	0x000b8821
   b8838:	000b8865 	.word	0x000b8865
   b883c:	000b8865 	.word	0x000b8865
   b8840:	000b8865 	.word	0x000b8865
   b8844:	000b8821 	.word	0x000b8821
   b8848:	000b8865 	.word	0x000b8865
   b884c:	000b8821 	.word	0x000b8821
   b8850:	000b886b 	.word	0x000b886b
   b8854:	3d5c      	subs	r5, #92	; 0x5c
   b8856:	b2ed      	uxtb	r5, r5
   b8858:	fa0c f505 	lsl.w	r5, ip, r5
   b885c:	f240 4741 	movw	r7, #1089	; 0x441
   b8860:	423d      	tst	r5, r7
   b8862:	d1dd      	bne.n	b8820 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b8864:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b8868:	e77c      	b.n	b8764 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b886a:	f108 0502 	add.w	r5, r8, #2
   b886e:	6005      	str	r5, [r0, #0]
   b8870:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8874:	f8d0 8000 	ldr.w	r8, [r0]
   b8878:	4542      	cmp	r2, r8
   b887a:	d803      	bhi.n	b8884 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b887c:	6805      	ldr	r5, [r0, #0]
   b887e:	3d01      	subs	r5, #1
   b8880:	6005      	str	r5, [r0, #0]
					break;
   b8882:	e7cd      	b.n	b8820 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8884:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8888:	2d00      	cmp	r5, #0
   b888a:	d0f7      	beq.n	b887c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b888c:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b8890:	f1bb 0f09 	cmp.w	fp, #9
   b8894:	d904      	bls.n	b88a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b8896:	f025 0520 	bic.w	r5, r5, #32
   b889a:	3d41      	subs	r5, #65	; 0x41
   b889c:	2d05      	cmp	r5, #5
   b889e:	d8e1      	bhi.n	b8864 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b88a0:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b88a4:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b88a8:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b88aa:	d1e3      	bne.n	b8874 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b88ac:	e7e6      	b.n	b887c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b88ae:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b88b2:	f06f 0402 	mvn.w	r4, #2
   b88b6:	e777      	b.n	b87a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b88b8:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b88bc:	2b00      	cmp	r3, #0
   b88be:	f43f aec2 	beq.w	b8646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b88c2:	6885      	ldr	r5, [r0, #8]
   b88c4:	1c6f      	adds	r7, r5, #1
   b88c6:	f43f aebe 	beq.w	b8646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b88ca:	012d      	lsls	r5, r5, #4
   b88cc:	5d5d      	ldrb	r5, [r3, r5]
   b88ce:	3d01      	subs	r5, #1
   b88d0:	2d01      	cmp	r5, #1
   b88d2:	f67f aeb8 	bls.w	b8646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b88d6:	6845      	ldr	r5, [r0, #4]
   b88d8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b88dc:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b88e0:	f1b8 0f00 	cmp.w	r8, #0
   b88e4:	f6ff aeaf 	blt.w	b8646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b88e8:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b88ec:	3d01      	subs	r5, #1
   b88ee:	2d01      	cmp	r5, #1
   b88f0:	d80a      	bhi.n	b8908 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b88f2:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b88f6:	3501      	adds	r5, #1
   b88f8:	d006      	beq.n	b8908 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b88fa:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b88fe:	3501      	adds	r5, #1
   b8900:	d102      	bne.n	b8908 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b8902:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b8906:	e69e      	b.n	b8646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b8908:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b890c:	f1ae 0e10 	sub.w	lr, lr, #16
   b8910:	e7e6      	b.n	b88e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b8912:	f1a5 0920 	sub.w	r9, r5, #32
   b8916:	4f24      	ldr	r7, [pc, #144]	; (b89a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b8918:	fa5f f989 	uxtb.w	r9, r9
   b891c:	fa0c f909 	lsl.w	r9, ip, r9
   b8920:	ea19 0f07 	tst.w	r9, r7
   b8924:	f47f aeaa 	bne.w	b867c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b8928:	3d20      	subs	r5, #32
   b892a:	2d5e      	cmp	r5, #94	; 0x5e
   b892c:	d89a      	bhi.n	b8864 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b892e:	f108 0501 	add.w	r5, r8, #1
   b8932:	6005      	str	r5, [r0, #0]
   b8934:	e68f      	b.n	b8656 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b8936:	2d0d      	cmp	r5, #13
   b8938:	d1f6      	bne.n	b8928 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b893a:	e69f      	b.n	b867c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b893c:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b8940:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b8944:	e7f8      	b.n	b8938 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b8946:	6845      	ldr	r5, [r0, #4]
   b8948:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b894a:	42af      	cmp	r7, r5
   b894c:	f67f af28 	bls.w	b87a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b8950:	f105 0801 	add.w	r8, r5, #1
   b8954:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b8958:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b895c:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b8960:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b8964:	2700      	movs	r7, #0
   b8966:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b8968:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b896c:	f04f 0a04 	mov.w	sl, #4
   b8970:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b8974:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b8978:	6805      	ldr	r5, [r0, #0]
   b897a:	3d01      	subs	r5, #1
   b897c:	e683      	b.n	b8686 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b897e:	2b00      	cmp	r3, #0
   b8980:	f43f af12 	beq.w	b87a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b8984:	6842      	ldr	r2, [r0, #4]
   b8986:	1e51      	subs	r1, r2, #1
   b8988:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b898c:	2900      	cmp	r1, #0
   b898e:	f6ff af0b 	blt.w	b87a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b8992:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b8996:	3201      	adds	r2, #1
   b8998:	d003      	beq.n	b89a2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b899a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b899e:	3201      	adds	r2, #1
   b89a0:	d087      	beq.n	b88b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b89a2:	3901      	subs	r1, #1
   b89a4:	3b10      	subs	r3, #16
   b89a6:	e7f1      	b.n	b898c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b89a8:	04001001 	.word	0x04001001

000b89ac <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b89ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b89ae:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b89b0:	4604      	mov	r4, r0
	if (offset == 0) {
   b89b2:	b912      	cbnz	r2, b89ba <_ZN10JsonParser5parseEv+0xe>
		return false;
   b89b4:	2000      	movs	r0, #0
}
   b89b6:	b003      	add	sp, #12
   b89b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b89ba:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b89bc:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b89c0:	b1ab      	cbz	r3, b89ee <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b89c2:	2100      	movs	r1, #0
	parser->toknext = 0;
   b89c4:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b89c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b89cc:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b89ce:	69c1      	ldr	r1, [r0, #28]
   b89d0:	9100      	str	r1, [sp, #0]
   b89d2:	6841      	ldr	r1, [r0, #4]
   b89d4:	4630      	mov	r0, r6
   b89d6:	f7ff fe0d 	bl	b85f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b89da:	1c43      	adds	r3, r0, #1
   b89dc:	d128      	bne.n	b8a30 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b89de:	7c25      	ldrb	r5, [r4, #16]
   b89e0:	2d00      	cmp	r5, #0
   b89e2:	d1e7      	bne.n	b89b4 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b89e4:	6960      	ldr	r0, [r4, #20]
   b89e6:	f003 fec1 	bl	bc76c <free>
			tokens = 0;
   b89ea:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b89ec:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b89ee:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b89f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b89f4:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b89f8:	68e2      	ldr	r2, [r4, #12]
   b89fa:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b89fc:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b89fe:	9500      	str	r5, [sp, #0]
   b8a00:	462b      	mov	r3, r5
   b8a02:	4630      	mov	r0, r6
   b8a04:	f7ff fdf6 	bl	b85f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b8a08:	2800      	cmp	r0, #0
   b8a0a:	dbd3      	blt.n	b89b4 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b8a0c:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b8a0e:	d017      	beq.n	b8a40 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b8a10:	0100      	lsls	r0, r0, #4
   b8a12:	f003 fea3 	bl	bc75c <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8a16:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b8a18:	6160      	str	r0, [r4, #20]
   b8a1a:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8a1c:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b8a1e:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8a22:	68e2      	ldr	r2, [r4, #12]
   b8a24:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b8a26:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8a28:	4630      	mov	r0, r6
   b8a2a:	f7ff fde3 	bl	b85f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b8a2e:	e001      	b.n	b8a34 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b8a30:	2800      	cmp	r0, #0
   b8a32:	dbbf      	blt.n	b89b4 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b8a34:	6963      	ldr	r3, [r4, #20]
   b8a36:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b8a3a:	61a0      	str	r0, [r4, #24]
	return true;
   b8a3c:	2001      	movs	r0, #1
   b8a3e:	e7ba      	b.n	b89b6 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b8a40:	6963      	ldr	r3, [r4, #20]
   b8a42:	61a3      	str	r3, [r4, #24]
   b8a44:	e7fa      	b.n	b8a3c <_ZN10JsonParser5parseEv+0x90>

000b8a46 <_ZN12JsonModifier6finishEv>:
void JsonModifier::finish() {
   b8a46:	b538      	push	{r3, r4, r5, lr}
	if (start == -1) {
   b8a48:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b8a4a:	1c5a      	adds	r2, r3, #1
void JsonModifier::finish() {
   b8a4c:	4604      	mov	r4, r0
	if (start == -1) {
   b8a4e:	d018      	beq.n	b8a82 <_ZN12JsonModifier6finishEv+0x3c>
	if (origAfter > 0) {
   b8a50:	6b82      	ldr	r2, [r0, #56]	; 0x38
   b8a52:	2a00      	cmp	r2, #0
   b8a54:	dd08      	ble.n	b8a68 <_ZN12JsonModifier6finishEv+0x22>
   b8a56:	6b01      	ldr	r1, [r0, #48]	; 0x30
		memmove(jp.getBuffer() + start + getOffset(), jp.getBuffer() + saveLoc, origAfter);
   b8a58:	68e5      	ldr	r5, [r4, #12]
   b8a5a:	6848      	ldr	r0, [r1, #4]
   b8a5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b8a5e:	442b      	add	r3, r5
   b8a60:	4401      	add	r1, r0
   b8a62:	4418      	add	r0, r3
   b8a64:	f007 fdd4 	bl	c0610 <memmove>
	jp.setOffset(start + getOffset() + origAfter);
   b8a68:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   b8a6c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b8a6e:	440b      	add	r3, r1
   b8a70:	68e1      	ldr	r1, [r4, #12]
   b8a72:	440b      	add	r3, r1
	void setOffset(size_t offset) { this->offset = offset; };
   b8a74:	60d3      	str	r3, [r2, #12]
	jp.parse();
   b8a76:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b8a78:	f7ff ff98 	bl	b89ac <_ZN10JsonParser5parseEv>
	start = -1;
   b8a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8a80:	6363      	str	r3, [r4, #52]	; 0x34
}
   b8a82:	bd38      	pop	{r3, r4, r5, pc}

000b8a84 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b8a84:	4770      	bx	lr

000b8a86 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b8a86:	4770      	bx	lr

000b8a88 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b8a88:	b510      	push	{r4, lr}
}
   b8a8a:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b8a8c:	4604      	mov	r4, r0
}
   b8a8e:	f7fb fb06 	bl	b409e <_ZdlPvj>
   b8a92:	4620      	mov	r0, r4
   b8a94:	bd10      	pop	{r4, pc}

000b8a96 <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b8a96:	b510      	push	{r4, lr}
}
   b8a98:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b8a9a:	4604      	mov	r4, r0
}
   b8a9c:	f7fb faff 	bl	b409e <_ZdlPvj>
   b8aa0:	4620      	mov	r0, r4
   b8aa2:	bd10      	pop	{r4, pc}

000b8aa4 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b8aa4:	b510      	push	{r4, lr}
   b8aa6:	4b05      	ldr	r3, [pc, #20]	; (b8abc <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b8aa8:	4604      	mov	r4, r0
   b8aaa:	f840 3b1c 	str.w	r3, [r0], #28
   b8aae:	f006 f9c9 	bl	bee44 <_ZN6StringD1Ev>
   b8ab2:	1d20      	adds	r0, r4, #4
   b8ab4:	f006 f9c6 	bl	bee44 <_ZN6StringD1Ev>
}
   b8ab8:	4620      	mov	r0, r4
   b8aba:	bd10      	pop	{r4, pc}
   b8abc:	000c1ccc 	.word	0x000c1ccc

000b8ac0 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b8ac0:	b510      	push	{r4, lr}
   b8ac2:	4604      	mov	r4, r0
}
   b8ac4:	f7ff ffee 	bl	b8aa4 <_ZN22LocalTimePosixTimezoneD1Ev>
   b8ac8:	4620      	mov	r0, r4
   b8aca:	2158      	movs	r1, #88	; 0x58
   b8acc:	f7fb fae7 	bl	b409e <_ZdlPvj>
   b8ad0:	4620      	mov	r0, r4
   b8ad2:	bd10      	pop	{r4, pc}

000b8ad4 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b8ad4:	b510      	push	{r4, lr}
   b8ad6:	4b04      	ldr	r3, [pc, #16]	; (b8ae8 <_ZN9LocalTimeD1Ev+0x14>)
   b8ad8:	4604      	mov	r4, r0
   b8ada:	f840 3b04 	str.w	r3, [r0], #4
   b8ade:	f7ff ffe1 	bl	b8aa4 <_ZN22LocalTimePosixTimezoneD1Ev>
   b8ae2:	4620      	mov	r0, r4
   b8ae4:	bd10      	pop	{r4, pc}
   b8ae6:	bf00      	nop
   b8ae8:	000c1c9c 	.word	0x000c1c9c

000b8aec <_ZN9LocalTimeD0Ev>:
   b8aec:	b510      	push	{r4, lr}
   b8aee:	4604      	mov	r4, r0
   b8af0:	f7ff fff0 	bl	b8ad4 <_ZN9LocalTimeD1Ev>
   b8af4:	4620      	mov	r0, r4
   b8af6:	2160      	movs	r1, #96	; 0x60
   b8af8:	f7fb fad1 	bl	b409e <_ZdlPvj>
   b8afc:	4620      	mov	r0, r4
   b8afe:	bd10      	pop	{r4, pc}

000b8b00 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b8b00:	f020 0302 	bic.w	r3, r0, #2
   b8b04:	2b01      	cmp	r3, #1
   b8b06:	d003      	beq.n	b8b10 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b8b08:	1f43      	subs	r3, r0, #5
   b8b0a:	4258      	negs	r0, r3
   b8b0c:	4158      	adcs	r0, r3
   b8b0e:	4770      	bx	lr
   b8b10:	4618      	mov	r0, r3
   b8b12:	4770      	bx	lr

000b8b14 <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b8b14:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b8b18:	7103      	strb	r3, [r0, #4]
   b8b1a:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b8b1e:	7143      	strb	r3, [r0, #5]
   b8b20:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b8b24:	7183      	strb	r3, [r0, #6]
   b8b26:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b8b2a:	71c3      	strb	r3, [r0, #7]
   b8b2c:	4770      	bx	lr

000b8b2e <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b8b2e:	b538      	push	{r3, r4, r5, lr}
   b8b30:	4604      	mov	r4, r0
   b8b32:	460d      	mov	r5, r1
   b8b34:	3004      	adds	r0, #4
   b8b36:	3104      	adds	r1, #4
   b8b38:	f006 fa0b 	bl	bef52 <_ZN6StringaSERKS_>
   b8b3c:	f105 0114 	add.w	r1, r5, #20
   b8b40:	f104 0014 	add.w	r0, r4, #20
   b8b44:	f7ff ffe6 	bl	b8b14 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b8b48:	f105 011c 	add.w	r1, r5, #28
   b8b4c:	f104 001c 	add.w	r0, r4, #28
   b8b50:	f006 f9ff 	bl	bef52 <_ZN6StringaSERKS_>
   b8b54:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b8b58:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b8b5c:	f7ff ffda 	bl	b8b14 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b8b60:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b8b64:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b8b68:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b8b6c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b8b70:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b8b74:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b8b78:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b8b7c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b8b80:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b8b84:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8b88:	f7ff ffc4 	bl	b8b14 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b8b8c:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b8b90:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b8b94:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b8b98:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b8b9c:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b8ba0:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b8ba4:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b8ba8:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b8bac:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b8bb0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b8bb4:	f7ff ffae 	bl	b8b14 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b8bb8:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b8bbc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b8bc0:	bd38      	pop	{r3, r4, r5, pc}

000b8bc2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8bc2:	680b      	ldr	r3, [r1, #0]
   b8bc4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b8bc6:	684b      	ldr	r3, [r1, #4]
   b8bc8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b8bca:	b113      	cbz	r3, b8bd2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b8bcc:	685a      	ldr	r2, [r3, #4]
   b8bce:	3201      	adds	r2, #1
   b8bd0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8bd2:	4770      	bx	lr

000b8bd4 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b8bd4:	4a02      	ldr	r2, [pc, #8]	; (b8be0 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b8bd6:	6002      	str	r2, [r0, #0]
   b8bd8:	684a      	ldr	r2, [r1, #4]
   b8bda:	6042      	str	r2, [r0, #4]
   b8bdc:	4770      	bx	lr
   b8bde:	bf00      	nop
   b8be0:	000c1cac 	.word	0x000c1cac

000b8be4 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   b8be4:	694a      	ldr	r2, [r1, #20]
   b8be6:	6803      	ldr	r3, [r0, #0]
   b8be8:	f362 0316 	bfi	r3, r2, #0, #23
   b8bec:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   b8bee:	690b      	ldr	r3, [r1, #16]
   b8bf0:	1c5a      	adds	r2, r3, #1
   b8bf2:	8843      	ldrh	r3, [r0, #2]
   b8bf4:	f362 13ca 	bfi	r3, r2, #7, #4
   b8bf8:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   b8bfa:	68ca      	ldr	r2, [r1, #12]
   b8bfc:	f3c3 2307 	ubfx	r3, r3, #8, #8
   b8c00:	f362 03c7 	bfi	r3, r2, #3, #5
   b8c04:	70c3      	strb	r3, [r0, #3]
}
   b8c06:	4770      	bx	lr

000b8c08 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b8c08:	4a02      	ldr	r2, [pc, #8]	; (b8c14 <_ZN12LocalTimeHMSC1Ev+0xc>)
   b8c0a:	6002      	str	r2, [r0, #0]
   b8c0c:	2200      	movs	r2, #0
   b8c0e:	6042      	str	r2, [r0, #4]
}
   b8c10:	4770      	bx	lr
   b8c12:	bf00      	nop
   b8c14:	000c1cac 	.word	0x000c1cac

000b8c18 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b8c18:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b8c1a:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b8c1c:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b8c1e:	8083      	strh	r3, [r0, #4]
   b8c20:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b8c22:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b8c24:	ab05      	add	r3, sp, #20
   b8c26:	9300      	str	r3, [sp, #0]
   b8c28:	4913      	ldr	r1, [pc, #76]	; (b8c78 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b8c2a:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b8c2c:	ab04      	add	r3, sp, #16
   b8c2e:	aa03      	add	r2, sp, #12
   b8c30:	4628      	mov	r0, r5
   b8c32:	f003 fdb3 	bl	bc79c <sscanf>
   b8c36:	2803      	cmp	r0, #3
   b8c38:	d107      	bne.n	b8c4a <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b8c3a:	9b03      	ldr	r3, [sp, #12]
   b8c3c:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b8c3e:	9b04      	ldr	r3, [sp, #16]
   b8c40:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b8c42:	9b05      	ldr	r3, [sp, #20]
   b8c44:	71a3      	strb	r3, [r4, #6]
}
   b8c46:	b007      	add	sp, #28
   b8c48:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b8c4a:	490c      	ldr	r1, [pc, #48]	; (b8c7c <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b8c4c:	ab04      	add	r3, sp, #16
   b8c4e:	aa03      	add	r2, sp, #12
   b8c50:	4628      	mov	r0, r5
   b8c52:	f003 fda3 	bl	bc79c <sscanf>
   b8c56:	2802      	cmp	r0, #2
   b8c58:	d104      	bne.n	b8c64 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b8c5a:	9b03      	ldr	r3, [sp, #12]
   b8c5c:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b8c5e:	9b04      	ldr	r3, [sp, #16]
   b8c60:	7163      	strb	r3, [r4, #5]
   b8c62:	e7f0      	b.n	b8c46 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b8c64:	4906      	ldr	r1, [pc, #24]	; (b8c80 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b8c66:	aa03      	add	r2, sp, #12
   b8c68:	4628      	mov	r0, r5
   b8c6a:	f003 fd97 	bl	bc79c <sscanf>
   b8c6e:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b8c70:	bf04      	itt	eq
   b8c72:	9b03      	ldreq	r3, [sp, #12]
   b8c74:	7123      	strbeq	r3, [r4, #4]
}
   b8c76:	e7e6      	b.n	b8c46 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b8c78:	000c1c60 	.word	0x000c1c60
   b8c7c:	000c1c63 	.word	0x000c1c63
   b8c80:	000c0f31 	.word	0x000c0f31

000b8c84 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b8c84:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b8c88:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b8c8c:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b8c90:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b8c92:	bfb8      	it	lt
   b8c94:	4808      	ldrlt	r0, [pc, #32]	; (b8cb8 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b8c96:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b8c9a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b8c9e:	bfbd      	ittte	lt
   b8ca0:	fb00 3002 	mlalt	r0, r0, r2, r3
   b8ca4:	1840      	addlt	r0, r0, r1
   b8ca6:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b8ca8:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b8cac:	bfa4      	itt	ge
   b8cae:	fb00 3002 	mlage	r0, r0, r2, r3
   b8cb2:	1840      	addge	r0, r0, r1
}
   b8cb4:	4770      	bx	lr
   b8cb6:	bf00      	nop
   b8cb8:	fffff1f0 	.word	0xfffff1f0

000b8cbc <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   b8cbc:	b508      	push	{r3, lr}
   b8cbe:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   b8cc2:	b14b      	cbz	r3, b8cd8 <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   b8cc4:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   b8cc8:	b943      	cbnz	r3, b8cdc <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   b8cca:	302c      	adds	r0, #44	; 0x2c
   b8ccc:	f7ff ffda 	bl	b8c84 <_ZNK12LocalTimeHMS9toSecondsEv>
   b8cd0:	fab0 f080 	clz	r0, r0
   b8cd4:	0940      	lsrs	r0, r0, #5
   b8cd6:	bd08      	pop	{r3, pc}
   b8cd8:	2001      	movs	r0, #1
   b8cda:	e7fc      	b.n	b8cd6 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   b8cdc:	2000      	movs	r0, #0
   b8cde:	e7fa      	b.n	b8cd6 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000b8ce0 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b8ce0:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b8ce4:	b943      	cbnz	r3, b8cf8 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b8ce6:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b8cea:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b8cec:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b8cf0:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b8cf2:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b8cf6:	600b      	str	r3, [r1, #0]
}
   b8cf8:	4770      	bx	lr

000b8cfa <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b8cfa:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b8cfe:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b8d00:	b9b3      	cbnz	r3, b8d30 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b8d02:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b8d06:	688c      	ldr	r4, [r1, #8]
   b8d08:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b8d0a:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b8d0e:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b8d10:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b8d14:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b8d16:	bfb5      	itete	lt
   b8d18:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b8d1a:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b8d1c:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b8d1e:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b8d20:	bfb5      	itete	lt
   b8d22:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b8d26:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b8d2a:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b8d2c:	189b      	addge	r3, r3, r2
   b8d2e:	600b      	str	r3, [r1, #0]
}
   b8d30:	bd30      	pop	{r4, r5, pc}
	...

000b8d34 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b8d34:	b508      	push	{r3, lr}
   b8d36:	4a05      	ldr	r2, [pc, #20]	; (b8d4c <_ZN15LocalTimeChangeC1Ev+0x18>)
   b8d38:	6002      	str	r2, [r0, #0]
   b8d3a:	2200      	movs	r2, #0
   b8d3c:	4603      	mov	r3, r0
   b8d3e:	6042      	str	r2, [r0, #4]
   b8d40:	3008      	adds	r0, #8
   b8d42:	f7ff ff61 	bl	b8c08 <_ZN12LocalTimeHMSC1Ev>
}
   b8d46:	4618      	mov	r0, r3
   b8d48:	bd08      	pop	{r3, pc}
   b8d4a:	bf00      	nop
   b8d4c:	000c1cbc 	.word	0x000c1cbc

000b8d50 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b8d50:	2300      	movs	r3, #0
   b8d52:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b8d54:	8183      	strh	r3, [r0, #12]
   b8d56:	7383      	strb	r3, [r0, #14]
}
   b8d58:	4770      	bx	lr
	...

000b8d5c <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b8d5c:	b530      	push	{r4, r5, lr}
   b8d5e:	4604      	mov	r4, r0
   b8d60:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b8d62:	460d      	mov	r5, r1
   b8d64:	b111      	cbz	r1, b8d6c <_ZN15LocalTimeChange5parseEPKc+0x10>
   b8d66:	780b      	ldrb	r3, [r1, #0]
   b8d68:	2b4d      	cmp	r3, #77	; 0x4d
   b8d6a:	d005      	beq.n	b8d78 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b8d6c:	4620      	mov	r0, r4
}
   b8d6e:	b007      	add	sp, #28
   b8d70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b8d74:	f7ff bfec 	b.w	b8d50 <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b8d78:	ab05      	add	r3, sp, #20
   b8d7a:	9300      	str	r3, [sp, #0]
   b8d7c:	4911      	ldr	r1, [pc, #68]	; (b8dc4 <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b8d7e:	ab04      	add	r3, sp, #16
   b8d80:	aa03      	add	r2, sp, #12
   b8d82:	4628      	mov	r0, r5
   b8d84:	f003 fd0a 	bl	bc79c <sscanf>
   b8d88:	2803      	cmp	r0, #3
   b8d8a:	d116      	bne.n	b8dba <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b8d8c:	9b03      	ldr	r3, [sp, #12]
   b8d8e:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b8d90:	9b04      	ldr	r3, [sp, #16]
   b8d92:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b8d94:	9b05      	ldr	r3, [sp, #20]
   b8d96:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b8d98:	212f      	movs	r1, #47	; 0x2f
   b8d9a:	4628      	mov	r0, r5
   b8d9c:	f007 fcc6 	bl	c072c <strchr>
        if (cp) {
   b8da0:	b140      	cbz	r0, b8db4 <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b8da2:	1c41      	adds	r1, r0, #1
   b8da4:	f104 0008 	add.w	r0, r4, #8
   b8da8:	f7ff ff36 	bl	b8c18 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b8dac:	2301      	movs	r3, #1
   b8dae:	71e3      	strb	r3, [r4, #7]
}
   b8db0:	b007      	add	sp, #28
   b8db2:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b8db4:	81a0      	strh	r0, [r4, #12]
   b8db6:	73a0      	strb	r0, [r4, #14]
}
   b8db8:	e7f8      	b.n	b8dac <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b8dba:	4620      	mov	r0, r4
   b8dbc:	f7ff ffc8 	bl	b8d50 <_ZN15LocalTimeChange5clearEv>
   b8dc0:	e7f6      	b.n	b8db0 <_ZN15LocalTimeChange5parseEPKc+0x54>
   b8dc2:	bf00      	nop
   b8dc4:	000c1c7b 	.word	0x000c1c7b

000b8dc8 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b8dc8:	4b10      	ldr	r3, [pc, #64]	; (b8e0c <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b8dca:	4911      	ldr	r1, [pc, #68]	; (b8e10 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b8dcc:	b510      	push	{r4, lr}
   b8dce:	4604      	mov	r4, r0
   b8dd0:	f840 3b04 	str.w	r3, [r0], #4
   b8dd4:	f006 f881 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
   b8dd8:	f104 0014 	add.w	r0, r4, #20
   b8ddc:	f7ff ff14 	bl	b8c08 <_ZN12LocalTimeHMSC1Ev>
   b8de0:	490b      	ldr	r1, [pc, #44]	; (b8e10 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b8de2:	f104 001c 	add.w	r0, r4, #28
   b8de6:	f006 f878 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
   b8dea:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b8dee:	f7ff ff0b 	bl	b8c08 <_ZN12LocalTimeHMSC1Ev>
   b8df2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8df6:	f7ff ff9d 	bl	b8d34 <_ZN15LocalTimeChangeC1Ev>
   b8dfa:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8dfe:	f7ff ff99 	bl	b8d34 <_ZN15LocalTimeChangeC1Ev>
   b8e02:	2300      	movs	r3, #0
   b8e04:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b8e08:	4620      	mov	r0, r4
   b8e0a:	bd10      	pop	{r4, pc}
   b8e0c:	000c1ccc 	.word	0x000c1ccc
   b8e10:	000c2508 	.word	0x000c2508

000b8e14 <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b8e14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e18:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b8e1a:	4608      	mov	r0, r1
   b8e1c:	f007 fcb0 	bl	c0780 <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b8e20:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b8e22:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b8e24:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b8e26:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b8e2a:	493f      	ldr	r1, [pc, #252]	; (b8f28 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b8e2c:	9801      	ldr	r0, [sp, #4]
   b8e2e:	aa01      	add	r2, sp, #4
   b8e30:	f007 fd2e 	bl	c0890 <strtok_r>
   b8e34:	4601      	mov	r1, r0
   b8e36:	2800      	cmp	r0, #0
   b8e38:	d062      	beq.n	b8f00 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b8e3a:	2d01      	cmp	r5, #1
   b8e3c:	f105 0301 	add.w	r3, r5, #1
   b8e40:	d053      	beq.n	b8eea <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b8e42:	2d02      	cmp	r5, #2
   b8e44:	d056      	beq.n	b8ef4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b8e46:	2d00      	cmp	r5, #0
   b8e48:	d146      	bne.n	b8ed8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b8e4a:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b8e4c:	f892 9000 	ldrb.w	r9, [r2]
   b8e50:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b8e54:	4615      	mov	r5, r2
   b8e56:	4617      	mov	r7, r2
   b8e58:	f102 0201 	add.w	r2, r2, #1
   b8e5c:	d8f6      	bhi.n	b8e4c <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b8e5e:	2200      	movs	r2, #0
   b8e60:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b8e62:	f104 001c 	add.w	r0, r4, #28
   b8e66:	f006 f896 	bl	bef96 <_ZN6StringaSEPKc>
                valid = true;
   b8e6a:	2201      	movs	r2, #1
                *cp = save2;
   b8e6c:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b8e70:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b8e74:	782a      	ldrb	r2, [r5, #0]
   b8e76:	b36a      	cbz	r2, b8ed4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b8e78:	f897 a000 	ldrb.w	sl, [r7]
   b8e7c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b8e80:	2a3f      	cmp	r2, #63	; 0x3f
   b8e82:	46b9      	mov	r9, r7
   b8e84:	46bb      	mov	fp, r7
   b8e86:	f107 0701 	add.w	r7, r7, #1
   b8e8a:	d9f5      	bls.n	b8e78 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b8e8c:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b8e8e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b8e92:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b8e96:	4629      	mov	r1, r5
   b8e98:	4638      	mov	r0, r7
   b8e9a:	f7ff febd 	bl	b8c18 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b8e9e:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b8ea2:	f1ba 0f00 	cmp.w	sl, #0
   b8ea6:	d015      	beq.n	b8ed4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b8ea8:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b8eaa:	f81b ab01 	ldrb.w	sl, [fp], #1
   b8eae:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b8eb2:	d8f9      	bhi.n	b8ea8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b8eb4:	2200      	movs	r2, #0
   b8eb6:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b8eb8:	4649      	mov	r1, r9
   b8eba:	1d20      	adds	r0, r4, #4
   b8ebc:	f006 f86b 	bl	bef96 <_ZN6StringaSEPKc>
                        *cp = save2;
   b8ec0:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b8ec4:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b8ec8:	f1ba 0f00 	cmp.w	sl, #0
   b8ecc:	d006      	beq.n	b8edc <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b8ece:	4629      	mov	r1, r5
   b8ed0:	f7ff fea2 	bl	b8c18 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b8ed4:	2501      	movs	r5, #1
   b8ed6:	e7a8      	b.n	b8e2a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b8ed8:	461d      	mov	r5, r3
   b8eda:	e7a6      	b.n	b8e2a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b8edc:	4639      	mov	r1, r7
   b8ede:	f7ff fe19 	bl	b8b14 <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b8ee2:	7e23      	ldrb	r3, [r4, #24]
   b8ee4:	3b01      	subs	r3, #1
   b8ee6:	7623      	strb	r3, [r4, #24]
   b8ee8:	e7f4      	b.n	b8ed4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b8eea:	4640      	mov	r0, r8
   b8eec:	f7ff ff36 	bl	b8d5c <_ZN15LocalTimeChange5parseEPKc>
                break;
   b8ef0:	2502      	movs	r5, #2
   b8ef2:	e79a      	b.n	b8e2a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b8ef4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8ef8:	f7ff ff30 	bl	b8d5c <_ZN15LocalTimeChange5parseEPKc>
                break;
   b8efc:	2503      	movs	r5, #3
   b8efe:	e794      	b.n	b8e2a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b8f00:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b8f04:	b143      	cbz	r3, b8f18 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b8f06:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b8f0a:	b92a      	cbnz	r2, b8f18 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b8f0c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8f10:	f7ff ff1e 	bl	b8d50 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b8f14:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b8f18:	4630      	mov	r0, r6
   b8f1a:	f003 fc27 	bl	bc76c <free>

    return valid;
}
   b8f1e:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b8f22:	b003      	add	sp, #12
   b8f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8f28:	000c1c85 	.word	0x000c1c85

000b8f2c <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b8f2c:	b538      	push	{r3, r4, r5, lr}
   b8f2e:	4b13      	ldr	r3, [pc, #76]	; (b8f7c <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b8f30:	4604      	mov	r4, r0
   b8f32:	460d      	mov	r5, r1
   b8f34:	f840 3b04 	str.w	r3, [r0], #4
   b8f38:	4911      	ldr	r1, [pc, #68]	; (b8f80 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b8f3a:	f005 ffce 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
   b8f3e:	f104 0014 	add.w	r0, r4, #20
   b8f42:	f7ff fe61 	bl	b8c08 <_ZN12LocalTimeHMSC1Ev>
   b8f46:	490e      	ldr	r1, [pc, #56]	; (b8f80 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b8f48:	f104 001c 	add.w	r0, r4, #28
   b8f4c:	f005 ffc5 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
   b8f50:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b8f54:	f7ff fe58 	bl	b8c08 <_ZN12LocalTimeHMSC1Ev>
   b8f58:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8f5c:	f7ff feea 	bl	b8d34 <_ZN15LocalTimeChangeC1Ev>
   b8f60:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8f64:	f7ff fee6 	bl	b8d34 <_ZN15LocalTimeChangeC1Ev>
   b8f68:	2300      	movs	r3, #0
   b8f6a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b8f6e:	4629      	mov	r1, r5
   b8f70:	4620      	mov	r0, r4
   b8f72:	f7ff ff4f 	bl	b8e14 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b8f76:	4620      	mov	r0, r4
   b8f78:	bd38      	pop	{r3, r4, r5, pc}
   b8f7a:	bf00      	nop
   b8f7c:	000c1ccc 	.word	0x000c1ccc
   b8f80:	000c2508 	.word	0x000c2508

000b8f84 <_ZNK14LocalTimeValue3hmsEv>:
    else {
        return tm_hour - 12;
    }
}

LocalTimeHMS LocalTimeValue::hms() const {
   b8f84:	b508      	push	{r3, lr}
   b8f86:	4603      	mov	r3, r0
    LocalTimeHMS result;
   b8f88:	f7ff fe3e 	bl	b8c08 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   b8f8c:	688a      	ldr	r2, [r1, #8]
   b8f8e:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   b8f90:	684a      	ldr	r2, [r1, #4]
   b8f92:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   b8f94:	680a      	ldr	r2, [r1, #0]
   b8f96:	719a      	strb	r2, [r3, #6]
    result.fromTimeInfo(this);
    return result;
}
   b8f98:	4618      	mov	r0, r3
   b8f9a:	bd08      	pop	{r3, pc}

000b8f9c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   b8f9c:	b513      	push	{r0, r1, r4, lr}
   b8f9e:	4b07      	ldr	r3, [pc, #28]	; (b8fbc <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   b8fa0:	6003      	str	r3, [r0, #0]
   b8fa2:	2300      	movs	r3, #0
   b8fa4:	6043      	str	r3, [r0, #4]
   b8fa6:	4604      	mov	r4, r0
    *this = value.hms();
   b8fa8:	4668      	mov	r0, sp
   b8faa:	f7ff ffeb 	bl	b8f84 <_ZNK14LocalTimeValue3hmsEv>
   b8fae:	4620      	mov	r0, r4
   b8fb0:	4669      	mov	r1, sp
   b8fb2:	f7ff fdaf 	bl	b8b14 <_ZN12LocalTimeHMSaSERKS_.isra.0>
}
   b8fb6:	b002      	add	sp, #8
   b8fb8:	bd10      	pop	{r4, pc}
   b8fba:	bf00      	nop
   b8fbc:	000c1cac 	.word	0x000c1cac

000b8fc0 <_ZNK14LocalTimeValue3ymdEv>:
        tm_min = hms.minute;
        tm_sec = hms.second;
    }
}

LocalTimeYMD LocalTimeValue::ymd() const {
   b8fc0:	b507      	push	{r0, r1, r2, lr}
    LocalTimeYMD() {
   b8fc2:	2300      	movs	r3, #0
   b8fc4:	4601      	mov	r1, r0
    LocalTimeYMD result;
    result.fromTimeInfo(this);
   b8fc6:	a801      	add	r0, sp, #4
   b8fc8:	9301      	str	r3, [sp, #4]
   b8fca:	f7ff fe0b 	bl	b8be4 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
    return result;
}
   b8fce:	9801      	ldr	r0, [sp, #4]
   b8fd0:	b003      	add	sp, #12
   b8fd2:	f85d fb04 	ldr.w	pc, [sp], #4

000b8fd6 <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>:
void LocalTimeYMD::fromLocalTimeValue(const LocalTimeValue &value) {
   b8fd6:	b510      	push	{r4, lr}
   b8fd8:	4604      	mov	r4, r0
    *this = value.ymd();
   b8fda:	4608      	mov	r0, r1
   b8fdc:	f7ff fff0 	bl	b8fc0 <_ZNK14LocalTimeValue3ymdEv>
   b8fe0:	6020      	str	r0, [r4, #0]
}
   b8fe2:	bd10      	pop	{r4, pc}

000b8fe4 <_ZN16LocalTimeConvert7timeStrEv>:
        convert();
    }
}


String LocalTimeConvert::timeStr() {
   b8fe4:	b510      	push	{r4, lr}
   b8fe6:	4604      	mov	r4, r0
   b8fe8:	b088      	sub	sp, #32
   b8fea:	4608      	mov	r0, r1
    char ascstr[26];
    asctime_r(&localTimeValue, ascstr);
   b8fec:	3068      	adds	r0, #104	; 0x68
   b8fee:	a901      	add	r1, sp, #4
   b8ff0:	f007 faae 	bl	c0550 <asctime_r>
    int len = strlen(ascstr);
   b8ff4:	a801      	add	r0, sp, #4
   b8ff6:	f007 fbe0 	bl	c07ba <strlen>
    ascstr[len-1] = 0; // remove final newline
   b8ffa:	ab08      	add	r3, sp, #32
   b8ffc:	4418      	add	r0, r3
   b8ffe:	2300      	movs	r3, #0
   b9000:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   b9004:	a901      	add	r1, sp, #4
   b9006:	4620      	mov	r0, r4
   b9008:	f005 ff67 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
}
   b900c:	4620      	mov	r0, r4
   b900e:	b008      	add	sp, #32
   b9010:	bd10      	pop	{r4, pc}
	...

000b9014 <_ZNK16LocalTimeConvert8zoneNameEv>:
    char buf[50] = {};
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
    return String(buf);    
}

String LocalTimeConvert::zoneName() const { 
   b9014:	b538      	push	{r3, r4, r5, lr}
   b9016:	4604      	mov	r4, r0
    if (config.isZ()) {
   b9018:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   b901a:	460d      	mov	r5, r1
    if (config.isZ()) {
   b901c:	f7ff fe4e 	bl	b8cbc <_ZNK22LocalTimePosixTimezone3isZEv>
   b9020:	b128      	cbz	r0, b902e <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   b9022:	4909      	ldr	r1, [pc, #36]	; (b9048 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   b9024:	4620      	mov	r0, r4
   b9026:	f005 ff58 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
        return config.dstName;
    }
    else {
        return config.standardName;
    }
};
   b902a:	4620      	mov	r0, r4
   b902c:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   b902e:	6828      	ldr	r0, [r5, #0]
   b9030:	f7ff fd66 	bl	b8b00 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b9034:	b128      	cbz	r0, b9042 <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   b9036:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   b903a:	4620      	mov	r0, r4
   b903c:	f005 ff98 	bl	bef70 <_ZN6StringC1ERKS_>
   b9040:	e7f3      	b.n	b902a <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   b9042:	f105 0120 	add.w	r1, r5, #32
   b9046:	e7f8      	b.n	b903a <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   b9048:	000c1c87 	.word	0x000c1c87

000b904c <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   b904c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9050:	4680      	mov	r8, r0
   b9052:	b0a8      	sub	sp, #160	; 0xa0
   b9054:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b9056:	4615      	mov	r5, r2
   b9058:	b12a      	cbz	r2, b9066 <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   b905a:	4b47      	ldr	r3, [pc, #284]	; (b9178 <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   b905c:	4610      	mov	r0, r2
   b905e:	6819      	ldr	r1, [r3, #0]
   b9060:	f007 fb7b 	bl	c075a <strcmp>
   b9064:	b938      	cbnz	r0, b9076 <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   b9066:	4621      	mov	r1, r4
   b9068:	4640      	mov	r0, r8
   b906a:	f7ff ffbb 	bl	b8fe4 <_ZN16LocalTimeConvert7timeStrEv>
}
   b906e:	4640      	mov	r0, r8
   b9070:	b028      	add	sp, #160	; 0xa0
   b9072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b9076:	4629      	mov	r1, r5
   b9078:	223f      	movs	r2, #63	; 0x3f
   b907a:	a818      	add	r0, sp, #96	; 0x60
   b907c:	f007 fbb9 	bl	c07f2 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b9080:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9082:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b9084:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9088:	f007 fb97 	bl	c07ba <strlen>
    String zoneNameStr = zoneName();
   b908c:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b908e:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   b9090:	a803      	add	r0, sp, #12
   b9092:	f7ff ffbf 	bl	b9014 <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   b9096:	1d20      	adds	r0, r4, #4
   b9098:	f7ff fe10 	bl	b8cbc <_ZNK22LocalTimePosixTimezone3isZEv>
   b909c:	b348      	cbz	r0, b90f2 <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   b909e:	4937      	ldr	r1, [pc, #220]	; (b917c <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   b90a0:	a807      	add	r0, sp, #28
   b90a2:	f007 fb64 	bl	c076e <strcpy>
   b90a6:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   b90a8:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   b90aa:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   b90ae:	45ba      	cmp	sl, r7
   b90b0:	d94c      	bls.n	b914c <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b90b2:	7833      	ldrb	r3, [r6, #0]
   b90b4:	2b25      	cmp	r3, #37	; 0x25
   b90b6:	f107 0901 	add.w	r9, r7, #1
   b90ba:	d117      	bne.n	b90ec <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   b90bc:	7873      	ldrb	r3, [r6, #1]
   b90be:	2b7a      	cmp	r3, #122	; 0x7a
   b90c0:	d136      	bne.n	b9130 <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   b90c2:	a807      	add	r0, sp, #28
   b90c4:	f007 fb79 	bl	c07ba <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b90c8:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   b90ca:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b90cc:	1838      	adds	r0, r7, r0
   b90ce:	ebaa 0207 	sub.w	r2, sl, r7
   b90d2:	1cb1      	adds	r1, r6, #2
   b90d4:	4418      	add	r0, r3
   b90d6:	f007 fa8d 	bl	c05f4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b90da:	462a      	mov	r2, r5
   b90dc:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b90de:	4630      	mov	r0, r6
   b90e0:	f007 fa88 	bl	c05f4 <memcpy>
            len = strlen(format_str);
   b90e4:	a818      	add	r0, sp, #96	; 0x60
   b90e6:	f007 fb68 	bl	c07ba <strlen>
   b90ea:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b90ec:	3601      	adds	r6, #1
   b90ee:	464f      	mov	r7, r9
   b90f0:	e7db      	b.n	b90aa <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b90f2:	6820      	ldr	r0, [r4, #0]
   b90f4:	f7ff fd04 	bl	b8b00 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b90f8:	b1b8      	cbz	r0, b912a <_ZN16LocalTimeConvert6formatEPKc+0xde>
   b90fa:	f104 0018 	add.w	r0, r4, #24
   b90fe:	f7ff fdc1 	bl	b8c84 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   b9102:	223c      	movs	r2, #60	; 0x3c
   b9104:	fb90 f3f2 	sdiv	r3, r0, r2
   b9108:	2b00      	cmp	r3, #0
   b910a:	bfb8      	it	lt
   b910c:	425b      	neglt	r3, r3
   b910e:	fbb3 f1f2 	udiv	r1, r3, r2
   b9112:	fb02 3311 	mls	r3, r2, r1, r3
   b9116:	9300      	str	r3, [sp, #0]
   b9118:	4a19      	ldr	r2, [pc, #100]	; (b9180 <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   b911a:	4b1a      	ldr	r3, [pc, #104]	; (b9184 <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   b911c:	fb90 f3f3 	sdiv	r3, r0, r3
   b9120:	2110      	movs	r1, #16
   b9122:	a807      	add	r0, sp, #28
   b9124:	f003 fb42 	bl	bc7ac <snprintf>
   b9128:	e7bd      	b.n	b90a6 <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b912a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b912e:	e7e6      	b.n	b90fe <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   b9130:	2b5a      	cmp	r3, #90	; 0x5a
   b9132:	d1db      	bne.n	b90ec <_ZN16LocalTimeConvert6formatEPKc+0xa0>
	inline unsigned int length(void) const {return len;}
   b9134:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9136:	ab18      	add	r3, sp, #96	; 0x60
   b9138:	1978      	adds	r0, r7, r5
   b913a:	ebaa 0207 	sub.w	r2, sl, r7
   b913e:	1cb1      	adds	r1, r6, #2
   b9140:	4418      	add	r0, r3
   b9142:	f007 fa57 	bl	c05f4 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b9146:	9903      	ldr	r1, [sp, #12]
   b9148:	462a      	mov	r2, r5
   b914a:	e7c8      	b.n	b90de <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   b914c:	2100      	movs	r1, #0
   b914e:	222e      	movs	r2, #46	; 0x2e
   b9150:	a80c      	add	r0, sp, #48	; 0x30
   b9152:	910b      	str	r1, [sp, #44]	; 0x2c
   b9154:	f007 fa76 	bl	c0644 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   b9158:	f104 0368 	add.w	r3, r4, #104	; 0x68
   b915c:	aa18      	add	r2, sp, #96	; 0x60
   b915e:	2132      	movs	r1, #50	; 0x32
   b9160:	a80b      	add	r0, sp, #44	; 0x2c
   b9162:	f003 fb5b 	bl	bc81c <strftime>
    return String(buf);    
   b9166:	a90b      	add	r1, sp, #44	; 0x2c
   b9168:	4640      	mov	r0, r8
   b916a:	f005 feb6 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   b916e:	a803      	add	r0, sp, #12
   b9170:	f005 fe68 	bl	bee44 <_ZN6StringD1Ev>
   b9174:	e77b      	b.n	b906e <_ZN16LocalTimeConvert6formatEPKc+0x22>
   b9176:	bf00      	nop
   b9178:	2003d768 	.word	0x2003d768
   b917c:	000c1c87 	.word	0x000c1c87
   b9180:	000c1c89 	.word	0x000c1c89
   b9184:	fffff1f0 	.word	0xfffff1f0

000b9188 <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b9188:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b918a:	4d09      	ldr	r5, [pc, #36]	; (b91b0 <_ZN9LocalTime8instanceEv+0x28>)
   b918c:	682b      	ldr	r3, [r5, #0]
   b918e:	b963      	cbnz	r3, b91aa <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b9190:	2060      	movs	r0, #96	; 0x60
   b9192:	f7fa ff80 	bl	b4096 <_Znwj>
   b9196:	4604      	mov	r4, r0
   b9198:	b130      	cbz	r0, b91a8 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b919a:	4b06      	ldr	r3, [pc, #24]	; (b91b4 <_ZN9LocalTime8instanceEv+0x2c>)
   b919c:	f840 3b04 	str.w	r3, [r0], #4
   b91a0:	f7ff fe12 	bl	b8dc8 <_ZN22LocalTimePosixTimezoneC1Ev>
   b91a4:	2364      	movs	r3, #100	; 0x64
   b91a6:	65e3      	str	r3, [r4, #92]	; 0x5c
   b91a8:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b91aa:	6828      	ldr	r0, [r5, #0]
   b91ac:	bd38      	pop	{r3, r4, r5, pc}
   b91ae:	bf00      	nop
   b91b0:	2003e440 	.word	0x2003e440
   b91b4:	000c1c9c 	.word	0x000c1c9c

000b91b8 <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b91b8:	f003 bb48 	b.w	bc84c <mktime>

000b91bc <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b91bc:	3901      	subs	r1, #1
   b91be:	290b      	cmp	r1, #11
   b91c0:	d815      	bhi.n	b91ee <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b91c2:	e8df f001 	tbb	[pc, r1]
   b91c6:	0816      	.short	0x0816
   b91c8:	06160616 	.word	0x06160616
   b91cc:	16061616 	.word	0x16061616
   b91d0:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b91d2:	201e      	movs	r0, #30
   b91d4:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b91d6:	0783      	lsls	r3, r0, #30
   b91d8:	d10d      	bne.n	b91f6 <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b91da:	2364      	movs	r3, #100	; 0x64
   b91dc:	fb90 f2f3 	sdiv	r2, r0, r3
   b91e0:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b91e4:	2800      	cmp	r0, #0
   b91e6:	bf0c      	ite	eq
   b91e8:	201c      	moveq	r0, #28
   b91ea:	201d      	movne	r0, #29
   b91ec:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b91ee:	2000      	movs	r0, #0
   b91f0:	4770      	bx	lr
            return 31;
   b91f2:	201f      	movs	r0, #31
   b91f4:	4770      	bx	lr
                return 28;
   b91f6:	201c      	movs	r0, #28
}
   b91f8:	4770      	bx	lr

000b91fa <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b91fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b91fc:	2301      	movs	r3, #1
   b91fe:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b9200:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b9204:	3b01      	subs	r3, #1
   b9206:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b9208:	2300      	movs	r3, #0
   b920a:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b920e:	4606      	mov	r6, r0
   b9210:	460c      	mov	r4, r1
   b9212:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b9214:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b9216:	4620      	mov	r0, r4
   b9218:	f7ff ffce 	bl	b91b8 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b921c:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b9220:	69a2      	ldr	r2, [r4, #24]
   b9222:	429a      	cmp	r2, r3
   b9224:	d003      	beq.n	b922e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b9226:	68e3      	ldr	r3, [r4, #12]
   b9228:	3301      	adds	r3, #1
   b922a:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b922c:	e7f3      	b.n	b9216 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b922e:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b9232:	2d01      	cmp	r5, #1
   b9234:	d013      	beq.n	b925e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b9236:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b9238:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b923a:	3d01      	subs	r5, #1
   b923c:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b9240:	441d      	add	r5, r3
   b9242:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b9244:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b9248:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b924c:	f7ff ffb6 	bl	b91bc <_ZN9LocalTime14lastDayOfMonthEii>
   b9250:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b9252:	bfc4      	itt	gt
   b9254:	3d07      	subgt	r5, #7
   b9256:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b9258:	4620      	mov	r0, r4
   b925a:	f7ff ffad 	bl	b91b8 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b925e:	4621      	mov	r1, r4
   b9260:	f106 0008 	add.w	r0, r6, #8
   b9264:	f7ff fd3c 	bl	b8ce0 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b9268:	4638      	mov	r0, r7
   b926a:	f7ff fd46 	bl	b8cfa <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b926e:	4620      	mov	r0, r4
}
   b9270:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b9274:	f003 baea 	b.w	bc84c <mktime>

000b9278 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b9278:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b927a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b927e:	b085      	sub	sp, #20
   b9280:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b9282:	b92b      	cbnz	r3, b9290 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b9284:	f7ff ff80 	bl	b9188 <_ZN9LocalTime8instanceEv>
   b9288:	1d01      	adds	r1, r0, #4
   b928a:	1d20      	adds	r0, r4, #4
   b928c:	f7ff fc4f 	bl	b8b2e <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b9290:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b9294:	2b00      	cmp	r3, #0
   b9296:	d065      	beq.n	b9364 <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b9298:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b929c:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b92a0:	4639      	mov	r1, r7
   b92a2:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b92a4:	463e      	mov	r6, r7
   b92a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b92aa:	f003 fabf 	bl	bc82c <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b92ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b92b0:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b92b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b92b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b92b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b92ba:	6833      	ldr	r3, [r6, #0]
   b92bc:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b92be:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b92c2:	a802      	add	r0, sp, #8
   b92c4:	f7ff fc86 	bl	b8bd4 <_ZN12LocalTimeHMSC1ERKS_>
   b92c8:	aa02      	add	r2, sp, #8
   b92ca:	4639      	mov	r1, r7
   b92cc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b92d0:	f7ff ff93 	bl	b91fa <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b92d4:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b92d8:	f104 0118 	add.w	r1, r4, #24
   b92dc:	a802      	add	r0, sp, #8
   b92de:	f7ff fc79 	bl	b8bd4 <_ZN12LocalTimeHMSC1ERKS_>
   b92e2:	aa02      	add	r2, sp, #8
   b92e4:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b92e8:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b92ec:	f7ff ff85 	bl	b91fa <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b92f0:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b92f4:	4286      	cmp	r6, r0
   b92f6:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b92fa:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b92fe:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b9302:	da23      	bge.n	b934c <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b9304:	42b2      	cmp	r2, r6
   b9306:	eb73 0505 	sbcs.w	r5, r3, r5
   b930a:	da19      	bge.n	b9340 <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b930c:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b930e:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b9310:	6820      	ldr	r0, [r4, #0]
   b9312:	f7ff fbf5 	bl	b8b00 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b9316:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b931a:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b931e:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b9320:	bb10      	cbnz	r0, b9368 <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b9322:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b9326:	f7ff fcad 	bl	b8c84 <_ZNK12LocalTimeHMS9toSecondsEv>
   b932a:	1a2d      	subs	r5, r5, r0
   b932c:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b9330:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b9334:	9901      	ldr	r1, [sp, #4]
   b9336:	a802      	add	r0, sp, #8
   b9338:	f003 fa78 	bl	bc82c <localtime_r>
}
   b933c:	b005      	add	sp, #20
   b933e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b9340:	4282      	cmp	r2, r0
   b9342:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b9344:	bfb4      	ite	lt
   b9346:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b9348:	2302      	movge	r3, #2
   b934a:	e7e0      	b.n	b930e <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b934c:	4282      	cmp	r2, r0
   b934e:	eb73 0101 	sbcs.w	r1, r3, r1
   b9352:	da01      	bge.n	b9358 <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b9354:	2303      	movs	r3, #3
   b9356:	e7da      	b.n	b930e <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b9358:	42b2      	cmp	r2, r6
   b935a:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b935c:	bfb4      	ite	lt
   b935e:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b9360:	2305      	movge	r3, #5
   b9362:	e7d4      	b.n	b930e <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b9364:	2306      	movs	r3, #6
   b9366:	e7d2      	b.n	b930e <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b9368:	f104 0018 	add.w	r0, r4, #24
   b936c:	e7db      	b.n	b9326 <_ZN16LocalTimeConvert7convertEv+0xae>

000b936e <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b936e:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9370:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9372:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9374:	4668      	mov	r0, sp
   b9376:	f7ff fc24 	bl	b8bc2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b937a:	466a      	mov	r2, sp
   b937c:	4629      	mov	r1, r5
   b937e:	4620      	mov	r0, r4
   b9380:	f004 f990 	bl	bd6a4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9384:	a801      	add	r0, sp, #4
   b9386:	f7fe fbf8 	bl	b7b7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b938a:	4620      	mov	r0, r4
   b938c:	b003      	add	sp, #12
   b938e:	bd30      	pop	{r4, r5, pc}

000b9390 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9390:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9392:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9394:	4604      	mov	r4, r0
   b9396:	4668      	mov	r0, sp
   b9398:	f7ff fc13 	bl	b8bc2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b939c:	466a      	mov	r2, sp
   b939e:	4629      	mov	r1, r5
   b93a0:	4620      	mov	r0, r4
   b93a2:	f004 f95b 	bl	bd65c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b93a6:	a801      	add	r0, sp, #4
   b93a8:	f7fe fbe7 	bl	b7b7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b93ac:	4620      	mov	r0, r4
   b93ae:	b003      	add	sp, #12
   b93b0:	bd30      	pop	{r4, r5, pc}

000b93b2 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b93b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b93b4:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b93b6:	4604      	mov	r4, r0
   b93b8:	4668      	mov	r0, sp
   b93ba:	f7ff fc02 	bl	b8bc2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b93be:	466a      	mov	r2, sp
   b93c0:	4629      	mov	r1, r5
   b93c2:	4620      	mov	r0, r4
   b93c4:	f004 f8f3 	bl	bd5ae <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b93c8:	a801      	add	r0, sp, #4
   b93ca:	f7fe fbd6 	bl	b7b7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b93ce:	4620      	mov	r0, r4
   b93d0:	b003      	add	sp, #12
   b93d2:	bd30      	pop	{r4, r5, pc}

000b93d4 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b93d4:	4770      	bx	lr

000b93d6 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b93d6:	b510      	push	{r4, lr}
}
   b93d8:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b93da:	4604      	mov	r4, r0
}
   b93dc:	f7fa fe5f 	bl	b409e <_ZdlPvj>
   b93e0:	4620      	mov	r0, r4
   b93e2:	bd10      	pop	{r4, pc}

000b93e4 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b93e4:	6803      	ldr	r3, [r0, #0]
   b93e6:	b2c9      	uxtb	r1, r1
   b93e8:	689b      	ldr	r3, [r3, #8]
   b93ea:	4718      	bx	r3

000b93ec <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b93ec:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b93ee:	4d03      	ldr	r5, [pc, #12]	; (b93fc <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b93f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b93f4:	e9c0 5100 	strd	r5, r1, [r0]
}
   b93f8:	bd30      	pop	{r4, r5, pc}
   b93fa:	bf00      	nop
   b93fc:	000c1cdc 	.word	0x000c1cdc

000b9400 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b9400:	6840      	ldr	r0, [r0, #4]
   b9402:	f003 bf45 	b.w	bd290 <_ZN7TwoWire5beginEv>

000b9406 <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b9406:	b510      	push	{r4, lr}
   b9408:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b940a:	6800      	ldr	r0, [r0, #0]
   b940c:	f003 ff9b 	bl	bd346 <_ZN7TwoWire6unlockEv>
   b9410:	4620      	mov	r0, r4
   b9412:	bd10      	pop	{r4, pc}

000b9414 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b9414:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b9418:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b941a:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b941c:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b941e:	460d      	mov	r5, r1
   b9420:	4616      	mov	r6, r2
   b9422:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b9424:	f003 ff86 	bl	bd334 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b9428:	b1a7      	cbz	r7, b9454 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b942a:	68e1      	ldr	r1, [r4, #12]
   b942c:	6860      	ldr	r0, [r4, #4]
   b942e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b9432:	f003 ff60 	bl	bd2f6 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b9436:	0a29      	lsrs	r1, r5, #8
   b9438:	6860      	ldr	r0, [r4, #4]
   b943a:	f7ff ffd3 	bl	b93e4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b943e:	4629      	mov	r1, r5
   b9440:	6860      	ldr	r0, [r4, #4]
   b9442:	f7ff ffcf 	bl	b93e4 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b9446:	6860      	ldr	r0, [r4, #4]
   b9448:	2100      	movs	r1, #0
   b944a:	f003 ff6f 	bl	bd32c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b944e:	b148      	cbz	r0, b9464 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b9450:	2400      	movs	r4, #0
   b9452:	e000      	b.n	b9456 <_ZN6MB85RC8readDataEjPhj+0x42>
   b9454:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b9456:	a801      	add	r0, sp, #4
   b9458:	f7ff ffd5 	bl	b9406 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b945c:	4620      	mov	r0, r4
   b945e:	b003      	add	sp, #12
   b9460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b9464:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b9466:	7b21      	ldrb	r1, [r4, #12]
   b9468:	6860      	ldr	r0, [r4, #4]
   b946a:	46b8      	mov	r8, r7
   b946c:	bf28      	it	cs
   b946e:	f04f 0820 	movcs.w	r8, #32
   b9472:	2301      	movs	r3, #1
   b9474:	4642      	mov	r2, r8
   b9476:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b947a:	f003 ff26 	bl	bd2ca <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b947e:	f006 fb1d 	bl	bfabc <_Z19__fetch_global_Wirev>
   b9482:	6803      	ldr	r3, [r0, #0]
   b9484:	691b      	ldr	r3, [r3, #16]
   b9486:	4798      	blx	r3
   b9488:	4540      	cmp	r0, r8
   b948a:	dbe1      	blt.n	b9450 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b948c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b9490:	f006 fb14 	bl	bfabc <_Z19__fetch_global_Wirev>
   b9494:	6803      	ldr	r3, [r0, #0]
   b9496:	695b      	ldr	r3, [r3, #20]
   b9498:	4798      	blx	r3
   b949a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b949e:	454e      	cmp	r6, r9
   b94a0:	d1f6      	bne.n	b9490 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b94a2:	4445      	add	r5, r8
				dataLen--;
   b94a4:	eba7 0708 	sub.w	r7, r7, r8
   b94a8:	e7be      	b.n	b9428 <_ZN6MB85RC8readDataEjPhj+0x14>

000b94aa <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b94aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b94ae:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b94b0:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b94b2:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b94b4:	460e      	mov	r6, r1
   b94b6:	4690      	mov	r8, r2
   b94b8:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b94ba:	f003 ff3b 	bl	bd334 <_ZN7TwoWire4lockEv>
   b94be:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b94c2:	f1b9 0f00 	cmp.w	r9, #0
   b94c6:	d02a      	beq.n	b951e <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b94c8:	b34d      	cbz	r5, b951e <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b94ca:	68e1      	ldr	r1, [r4, #12]
   b94cc:	6860      	ldr	r0, [r4, #4]
   b94ce:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b94d2:	f003 ff10 	bl	bd2f6 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b94d6:	0a31      	lsrs	r1, r6, #8
   b94d8:	6860      	ldr	r0, [r4, #4]
   b94da:	f7ff ff83 	bl	b93e4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b94de:	6860      	ldr	r0, [r4, #4]
   b94e0:	4631      	mov	r1, r6
   b94e2:	f7ff ff7f 	bl	b93e4 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b94e6:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b94ea:	4647      	mov	r7, r8
   b94ec:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b94f0:	6860      	ldr	r0, [r4, #4]
   b94f2:	f817 1b01 	ldrb.w	r1, [r7], #1
   b94f6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b94f8:	3d01      	subs	r5, #1
				wire.write(*data);
   b94fa:	689b      	ldr	r3, [r3, #8]
   b94fc:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b94fe:	4555      	cmp	r5, sl
   b9500:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b9504:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9506:	d001      	beq.n	b950c <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b9508:	2d00      	cmp	r5, #0
   b950a:	d1f1      	bne.n	b94f0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b950c:	6860      	ldr	r0, [r4, #4]
   b950e:	2101      	movs	r1, #1
   b9510:	f003 ff0c 	bl	bd32c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b9514:	2800      	cmp	r0, #0
   b9516:	d0d7      	beq.n	b94c8 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b9518:	f04f 0900 	mov.w	r9, #0
   b951c:	e7d1      	b.n	b94c2 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b951e:	a801      	add	r0, sp, #4
   b9520:	f7ff ff71 	bl	b9406 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b9524:	4648      	mov	r0, r9
   b9526:	b003      	add	sp, #12
   b9528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b952c <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b952c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9530:	b08b      	sub	sp, #44	; 0x2c
   b9532:	460e      	mov	r6, r1
   b9534:	4615      	mov	r5, r2
   b9536:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b9538:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b953a:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b953c:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b953e:	f003 fef9 	bl	bd334 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b9542:	42ae      	cmp	r6, r5
   b9544:	d229      	bcs.n	b959a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b9546:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b9548:	4425      	add	r5, r4
			while(numBytes > 0) {
   b954a:	b18c      	cbz	r4, b9570 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b954c:	2c1e      	cmp	r4, #30
   b954e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b9550:	f8d8 3000 	ldr.w	r3, [r8]
   b9554:	bf28      	it	cs
   b9556:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b9558:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b955a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b955e:	aa02      	add	r2, sp, #8
   b9560:	463b      	mov	r3, r7
   b9562:	4631      	mov	r1, r6
   b9564:	4640      	mov	r0, r8
				framAddrTo -= count;
   b9566:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b9568:	47c8      	blx	r9
				if (!result) {
   b956a:	b948      	cbnz	r0, b9580 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b956c:	2400      	movs	r4, #0
   b956e:	e000      	b.n	b9572 <_ZN6MB85RC8moveDataEjjj+0x46>
   b9570:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b9572:	a801      	add	r0, sp, #4
   b9574:	f7ff ff47 	bl	b9406 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b9578:	4620      	mov	r0, r4
   b957a:	b00b      	add	sp, #44	; 0x2c
   b957c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b9580:	f8d8 3000 	ldr.w	r3, [r8]
   b9584:	aa02      	add	r2, sp, #8
   b9586:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b958a:	4629      	mov	r1, r5
   b958c:	463b      	mov	r3, r7
   b958e:	4640      	mov	r0, r8
   b9590:	47c8      	blx	r9
				if (!result) {
   b9592:	2800      	cmp	r0, #0
   b9594:	d0ea      	beq.n	b956c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b9596:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b9598:	e7d7      	b.n	b954a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b959a:	d9e9      	bls.n	b9570 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b959c:	2c00      	cmp	r4, #0
   b959e:	d0e7      	beq.n	b9570 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b95a0:	f8d8 3000 	ldr.w	r3, [r8]
   b95a4:	2c1e      	cmp	r4, #30
   b95a6:	4627      	mov	r7, r4
   b95a8:	bf28      	it	cs
   b95aa:	271e      	movcs	r7, #30
   b95ac:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b95b0:	aa02      	add	r2, sp, #8
   b95b2:	463b      	mov	r3, r7
   b95b4:	4631      	mov	r1, r6
   b95b6:	4640      	mov	r0, r8
   b95b8:	47c8      	blx	r9
				if (!result) {
   b95ba:	2800      	cmp	r0, #0
   b95bc:	d0d6      	beq.n	b956c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b95be:	f8d8 3000 	ldr.w	r3, [r8]
   b95c2:	aa02      	add	r2, sp, #8
   b95c4:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b95c8:	4629      	mov	r1, r5
   b95ca:	463b      	mov	r3, r7
   b95cc:	4640      	mov	r0, r8
   b95ce:	47c8      	blx	r9
				if (!result) {
   b95d0:	2800      	cmp	r0, #0
   b95d2:	d0cb      	beq.n	b956c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b95d4:	443e      	add	r6, r7
				framAddrTo += count;
   b95d6:	443d      	add	r5, r7
				numBytes -= count;
   b95d8:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b95da:	e7df      	b.n	b959c <_ZN6MB85RC8moveDataEjjj+0x70>

000b95dc <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   b95dc:	6803      	ldr	r3, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b95de:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   b95e0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   b95e4:	2101      	movs	r1, #1
   b95e6:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   b95ea:	4770      	bx	lr

000b95ec <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b95ec:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b95ee:	6842      	ldr	r2, [r0, #4]
   b95f0:	4603      	mov	r3, r0
   b95f2:	1054      	asrs	r4, r2, #1
   b95f4:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b95f8:	07d2      	lsls	r2, r2, #31
   b95fa:	bf48      	it	mi
   b95fc:	590a      	ldrmi	r2, [r1, r4]
   b95fe:	681b      	ldr	r3, [r3, #0]
      }
   b9600:	f85d 4b04 	ldr.w	r4, [sp], #4
   b9604:	bf48      	it	mi
   b9606:	58d3      	ldrmi	r3, [r2, r3]
   b9608:	4718      	bx	r3

000b960a <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b960a:	2a01      	cmp	r2, #1
   b960c:	d102      	bne.n	b9614 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b960e:	6001      	str	r1, [r0, #0]
      }
   b9610:	2000      	movs	r0, #0
   b9612:	4770      	bx	lr
	  switch (__op)
   b9614:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b9616:	bf04      	itt	eq
   b9618:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b961c:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b9620:	e7f6      	b.n	b9610 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b9622 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b9622:	2a01      	cmp	r2, #1
   b9624:	d102      	bne.n	b962c <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b9626:	6001      	str	r1, [r0, #0]
      }
   b9628:	2000      	movs	r0, #0
   b962a:	4770      	bx	lr
	  switch (__op)
   b962c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b962e:	bf04      	itt	eq
   b9630:	680b      	ldreq	r3, [r1, #0]
   b9632:	6003      	streq	r3, [r0, #0]
	      break;
   b9634:	e7f8      	b.n	b9628 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000b9636 <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   b9636:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b9638:	f002 bcbc 	b.w	bbfb4 <os_mutex_recursive_lock>

000b963c <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   b963c:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   b9640:	4601      	mov	r1, r0
    if (stateHandler) {
   b9642:	b11b      	cbz	r3, b964c <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9644:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   b9648:	30c0      	adds	r0, #192	; 0xc0
   b964a:	4718      	bx	r3
}
   b964c:	4770      	bx	lr
	...

000b9650 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b9650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   b9652:	4d12      	ldr	r5, [pc, #72]	; (b969c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b9654:	4608      	mov	r0, r1
        eventData = "";
   b9656:	2a00      	cmp	r2, #0
   b9658:	bf18      	it	ne
   b965a:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b965c:	460e      	mov	r6, r1
   b965e:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b9660:	f007 f8ab 	bl	c07ba <strlen>
   b9664:	2840      	cmp	r0, #64	; 0x40
   b9666:	d816      	bhi.n	b9696 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   b9668:	4628      	mov	r0, r5
   b966a:	f007 f8a6 	bl	c07ba <strlen>
   b966e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b9672:	d810      	bhi.n	b9696 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   b9674:	3043      	adds	r0, #67	; 0x43
   b9676:	f7fa fd10 	bl	b409a <_Znaj>
    if (event) {
   b967a:	4604      	mov	r4, r0
   b967c:	b148      	cbz	r0, b9692 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   b967e:	4631      	mov	r1, r6
        event->flags = flags;
   b9680:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   b9684:	f007 f873 	bl	c076e <strcpy>
        strcpy(event->eventData, eventData);
   b9688:	4629      	mov	r1, r5
   b968a:	f104 0042 	add.w	r0, r4, #66	; 0x42
   b968e:	f007 f86e 	bl	c076e <strcpy>
}
   b9692:	4620      	mov	r0, r4
   b9694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   b9696:	2400      	movs	r4, #0
   b9698:	e7fb      	b.n	b9692 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   b969a:	bf00      	nop
   b969c:	000c2508 	.word	0x000c2508

000b96a0 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b96a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b96a2:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b96a4:	460a      	mov	r2, r1
   b96a6:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b96a8:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b96aa:	1d01      	adds	r1, r0, #4
   b96ac:	a808      	add	r0, sp, #32
   b96ae:	f002 f881 	bl	bb7b4 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b96b2:	9808      	ldr	r0, [sp, #32]
   b96b4:	2100      	movs	r1, #0
   b96b6:	f007 f995 	bl	c09e4 <open>
   b96ba:	4605      	mov	r5, r0
   b96bc:	a808      	add	r0, sp, #32
   b96be:	f005 fbc1 	bl	bee44 <_ZN6StringD1Ev>
    if (fd) {
   b96c2:	2d00      	cmp	r5, #0
   b96c4:	d060      	beq.n	b9788 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   b96c6:	a908      	add	r1, sp, #32
   b96c8:	4628      	mov	r0, r5
   b96ca:	f007 f979 	bl	c09c0 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   b96ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b96d0:	492e      	ldr	r1, [pc, #184]	; (b978c <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   b96d2:	482f      	ldr	r0, [pc, #188]	; (b9790 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b96d4:	4632      	mov	r2, r6
   b96d6:	f7fd fc45 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   b96da:	2200      	movs	r2, #0
   b96dc:	4611      	mov	r1, r2
   b96de:	4628      	mov	r0, r5
   b96e0:	f007 f976 	bl	c09d0 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   b96e4:	2208      	movs	r2, #8
   b96e6:	a906      	add	r1, sp, #24
   b96e8:	4628      	mov	r0, r5
   b96ea:	f007 f98f 	bl	c0a0c <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   b96ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b96f0:	2f4a      	cmp	r7, #74	; 0x4a
   b96f2:	dd39      	ble.n	b9768 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   b96f4:	4b27      	ldr	r3, [pc, #156]	; (b9794 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   b96f6:	9a06      	ldr	r2, [sp, #24]
   b96f8:	429a      	cmp	r2, r3
   b96fa:	d135      	bne.n	b9768 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   b96fc:	4b26      	ldr	r3, [pc, #152]	; (b9798 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   b96fe:	9a07      	ldr	r2, [sp, #28]
   b9700:	429a      	cmp	r2, r3
   b9702:	d131      	bne.n	b9768 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   b9704:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   b9708:	4610      	mov	r0, r2
   b970a:	9205      	str	r2, [sp, #20]
   b970c:	f7fa fcc5 	bl	b409a <_Znaj>
            if (result) {
   b9710:	4604      	mov	r4, r0
   b9712:	b1c0      	cbz	r0, b9746 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b9714:	4427      	add	r7, r4
                read(fd, result, eventSize);
   b9716:	4601      	mov	r1, r0
   b9718:	9a05      	ldr	r2, [sp, #20]
   b971a:	4628      	mov	r0, r5
   b971c:	f007 f976 	bl	c0a0c <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b9720:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   b9724:	b9ab      	cbnz	r3, b9752 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   b9726:	1c63      	adds	r3, r4, #1
   b9728:	4618      	mov	r0, r3
   b972a:	9305      	str	r3, [sp, #20]
   b972c:	f007 f845 	bl	c07ba <strlen>
   b9730:	283f      	cmp	r0, #63	; 0x3f
   b9732:	9b05      	ldr	r3, [sp, #20]
   b9734:	d80d      	bhi.n	b9752 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   b9736:	f104 0242 	add.w	r2, r4, #66	; 0x42
   b973a:	9200      	str	r2, [sp, #0]
   b973c:	4917      	ldr	r1, [pc, #92]	; (b979c <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   b973e:	4814      	ldr	r0, [pc, #80]	; (b9790 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b9740:	4632      	mov	r2, r6
   b9742:	f7fd fc0f 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   b9746:	4628      	mov	r0, r5
   b9748:	f007 f932 	bl	c09b0 <close>
}
   b974c:	4620      	mov	r0, r4
   b974e:	b01f      	add	sp, #124	; 0x7c
   b9750:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   b9752:	4913      	ldr	r1, [pc, #76]	; (b97a0 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   b9754:	480e      	ldr	r0, [pc, #56]	; (b9790 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b9756:	4632      	mov	r2, r6
   b9758:	f7fd fc04 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   b975c:	2143      	movs	r1, #67	; 0x43
   b975e:	4620      	mov	r0, r4
   b9760:	f7fa fc9d 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   b9764:	2400      	movs	r4, #0
   b9766:	e7ee      	b.n	b9746 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   b9768:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   b976c:	9302      	str	r3, [sp, #8]
   b976e:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b9772:	9301      	str	r3, [sp, #4]
   b9774:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b9778:	9300      	str	r3, [sp, #0]
   b977a:	490a      	ldr	r1, [pc, #40]	; (b97a4 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   b977c:	9b06      	ldr	r3, [sp, #24]
   b977e:	4804      	ldr	r0, [pc, #16]	; (b9790 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b9780:	4632      	mov	r2, r6
   b9782:	f7fd fbef 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
   b9786:	e7ed      	b.n	b9764 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   b9788:	462c      	mov	r4, r5
    return result;
   b978a:	e7df      	b.n	b974c <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   b978c:	000c1cf0 	.word	0x000c1cf0
   b9790:	2003e444 	.word	0x2003e444
   b9794:	31b67663 	.word	0x31b67663
   b9798:	00410801 	.word	0x00410801
   b979c:	000c1d04 	.word	0x000c1d04
   b97a0:	000c1d26 	.word	0x000c1d26
   b97a4:	000c1d54 	.word	0x000c1d54

000b97a8 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   b97a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b97ac:	4680      	mov	r8, r0
   b97ae:	4b28      	ldr	r3, [pc, #160]	; (b9850 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   b97b0:	f848 3b04 	str.w	r3, [r8], #4
   b97b4:	4604      	mov	r4, r0
   b97b6:	4640      	mov	r0, r8
   b97b8:	f001 ff14 	bl	bb5e4 <_ZN14SequentialFileC1Ev>
   b97bc:	2202      	movs	r2, #2
   b97be:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b97c0:	2500      	movs	r5, #0
   b97c2:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b97c6:	2308      	movs	r3, #8
   b97c8:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b97ca:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   b97ce:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   b97d2:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   b97d6:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b97da:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b97dc:	2020      	movs	r0, #32
   b97de:	f7fa fc5a 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b97e2:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b97e4:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b97e6:	3e01      	subs	r6, #1
   b97e8:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b97ea:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b97ee:	4607      	mov	r7, r0
   b97f0:	f44f 7000 	mov.w	r0, #512	; 0x200
   b97f4:	f7fa fc4f 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b97f8:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b97fc:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   b9800:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9804:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b9808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b980c:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   b9810:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   b9814:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   b9818:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b981c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b9820:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   b9824:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   b9828:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   b982c:	4909      	ldr	r1, [pc, #36]	; (b9854 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   b982e:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   b9832:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   b9836:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   b983a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   b983e:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   b9842:	4640      	mov	r0, r8
   b9844:	f001 ff14 	bl	bb670 <_ZN14SequentialFile11withDirPathEPKc>
}
   b9848:	4620      	mov	r0, r4
   b984a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b984e:	bf00      	nop
   b9850:	000c1f70 	.word	0x000c1f70
   b9854:	000c1d99 	.word	0x000c1d99

000b9858 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   b9858:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b985a:	4d06      	ldr	r5, [pc, #24]	; (b9874 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   b985c:	682b      	ldr	r3, [r5, #0]
   b985e:	b93b      	cbnz	r3, b9870 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   b9860:	20d0      	movs	r0, #208	; 0xd0
   b9862:	f7fa fc18 	bl	b4096 <_Znwj>
   b9866:	4604      	mov	r4, r0
   b9868:	b108      	cbz	r0, b986e <_ZN17PublishQueuePosix8instanceEv+0x16>
   b986a:	f7ff ff9d 	bl	b97a8 <_ZN17PublishQueuePosixC1Ev>
   b986e:	602c      	str	r4, [r5, #0]
}
   b9870:	6828      	ldr	r0, [r5, #0]
   b9872:	bd38      	pop	{r3, r4, r5, pc}
   b9874:	2003e448 	.word	0x2003e448

000b9878 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b9878:	6942      	ldr	r2, [r0, #20]
   b987a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b987c:	1a9b      	subs	r3, r3, r2
   b987e:	109b      	asrs	r3, r3, #2
   b9880:	1e5a      	subs	r2, r3, #1
   b9882:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   b9886:	1a5b      	subs	r3, r3, r1
   b9888:	109b      	asrs	r3, r3, #2
   b988a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b988e:	6902      	ldr	r2, [r0, #16]
   b9890:	6880      	ldr	r0, [r0, #8]
   b9892:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b9894:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b9898:	4770      	bx	lr

000b989a <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   b989a:	b538      	push	{r3, r4, r5, lr}
   b989c:	4605      	mov	r5, r0
   b989e:	f7ff feca 	bl	b9636 <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   b98a2:	f105 0078 	add.w	r0, r5, #120	; 0x78
   b98a6:	f7ff ffe7 	bl	b9878 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   b98aa:	4604      	mov	r4, r0
   b98ac:	b950      	cbnz	r0, b98c4 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   b98ae:	1d28      	adds	r0, r5, #4
   b98b0:	f002 f9d4 	bl	bbc5c <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   b98b4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   b98b8:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   b98ba:	b11b      	cbz	r3, b98c4 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   b98bc:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   b98c0:	b903      	cbnz	r3, b98c4 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   b98c2:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   b98c4:	6f68      	ldr	r0, [r5, #116]	; 0x74
   b98c6:	f002 fb7d 	bl	bbfc4 <os_mutex_recursive_unlock>
}
   b98ca:	4620      	mov	r0, r4
   b98cc:	bd38      	pop	{r3, r4, r5, pc}

000b98ce <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   b98ce:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   b98d0:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   b98d2:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   b98d4:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b98d6:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   b98d8:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   b98da:	d002      	beq.n	b98e2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   b98dc:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b98de:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   b98e0:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b98e2:	68c0      	ldr	r0, [r0, #12]
   b98e4:	f44f 7100 	mov.w	r1, #512	; 0x200
   b98e8:	f7fa fbd9 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b98ec:	6963      	ldr	r3, [r4, #20]
   b98ee:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b98f0:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   b98f2:	685b      	ldr	r3, [r3, #4]
   b98f4:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b98f6:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b98fa:	6122      	str	r2, [r4, #16]
   b98fc:	e7ef      	b.n	b98de <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000b9900 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   b9900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9904:	b085      	sub	sp, #20
   b9906:	4604      	mov	r4, r0
   b9908:	f7ff fe95 	bl	b9636 <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   b990c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b99b4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   b9910:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b99b8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b9914:	f8df b0a4 	ldr.w	fp, [pc, #164]	; b99bc <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   b9918:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   b991c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b9920:	4293      	cmp	r3, r2
   b9922:	d105      	bne.n	b9930 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   b9924:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b9926:	b005      	add	sp, #20
   b9928:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b992c:	f002 bb4a 	b.w	bbfc4 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   b9930:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   b9934:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   b9938:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   b993a:	f7ff ffc8 	bl	b98ce <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   b993e:	4640      	mov	r0, r8
   b9940:	f002 f930 	bl	bbba4 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b9944:	2300      	movs	r3, #0
   b9946:	4602      	mov	r2, r0
   b9948:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   b994a:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b994c:	4668      	mov	r0, sp
   b994e:	f001 ff31 	bl	bb7b4 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b9952:	9800      	ldr	r0, [sp, #0]
   b9954:	f240 2102 	movw	r1, #514	; 0x202
   b9958:	f007 f844 	bl	c09e4 <open>
   b995c:	4605      	mov	r5, r0
   b995e:	4668      	mov	r0, sp
   b9960:	f005 fa70 	bl	bee44 <_ZN6StringD1Ev>
            if (fd) {
   b9964:	b1c5      	cbz	r5, b9998 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   b9966:	2208      	movs	r2, #8
   b9968:	4669      	mov	r1, sp
   b996a:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   b996c:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   b9970:	f007 f85e 	bl	c0a30 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   b9974:	f107 0042 	add.w	r0, r7, #66	; 0x42
   b9978:	f006 ff1f 	bl	c07ba <strlen>
   b997c:	4639      	mov	r1, r7
   b997e:	f100 0243 	add.w	r2, r0, #67	; 0x43
   b9982:	4628      	mov	r0, r5
   b9984:	f007 f854 	bl	c0a30 <write>
                close(fd);
   b9988:	4628      	mov	r0, r5
   b998a:	f007 f811 	bl	c09b0 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b998e:	4808      	ldr	r0, [pc, #32]	; (b99b0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   b9990:	4632      	mov	r2, r6
   b9992:	4659      	mov	r1, fp
   b9994:	f7fd fae6 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   b9998:	4631      	mov	r1, r6
   b999a:	4640      	mov	r0, r8
   b999c:	f002 f944 	bl	bbc28 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   b99a0:	2f00      	cmp	r7, #0
   b99a2:	d0b9      	beq.n	b9918 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   b99a4:	2143      	movs	r1, #67	; 0x43
   b99a6:	4638      	mov	r0, r7
   b99a8:	f7fa fb79 	bl	b409e <_ZdlPvj>
   b99ac:	e7b2      	b.n	b9914 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   b99ae:	bf00      	nop
   b99b0:	2003e444 	.word	0x2003e444
   b99b4:	31b67663 	.word	0x31b67663
   b99b8:	00410801 	.word	0x00410801
   b99bc:	000c1da7 	.word	0x000c1da7

000b99c0 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   b99c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b99c4:	4604      	mov	r4, r0
   b99c6:	f7ff fe36 	bl	b9636 <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   b99ca:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b99ce:	f7ff ff53 	bl	b9878 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b99d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b99d4:	4298      	cmp	r0, r3
   b99d6:	d902      	bls.n	b99de <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   b99d8:	4620      	mov	r0, r4
   b99da:	f7ff ff91 	bl	b9900 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   b99de:	f8df 8044 	ldr.w	r8, [pc, #68]	; b9a24 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   b99e2:	4f0f      	ldr	r7, [pc, #60]	; (b9a20 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   b99e4:	1d26      	adds	r6, r4, #4
   b99e6:	4630      	mov	r0, r6
   b99e8:	f002 f938 	bl	bbc5c <_ZNK14SequentialFile11getQueueLenEv>
   b99ec:	6f23      	ldr	r3, [r4, #112]	; 0x70
   b99ee:	4298      	cmp	r0, r3
   b99f0:	dc04      	bgt.n	b99fc <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   b99f2:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b99f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b99f8:	f002 bae4 	b.w	bbfc4 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   b99fc:	2101      	movs	r1, #1
   b99fe:	4630      	mov	r0, r6
   b9a00:	f002 f8dc 	bl	bbbbc <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   b9a04:	4605      	mov	r5, r0
   b9a06:	2800      	cmp	r0, #0
   b9a08:	d0ed      	beq.n	b99e6 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   b9a0a:	4601      	mov	r1, r0
   b9a0c:	2200      	movs	r2, #0
   b9a0e:	4630      	mov	r0, r6
   b9a10:	f001 ff0c 	bl	bb82c <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   b9a14:	462a      	mov	r2, r5
   b9a16:	4641      	mov	r1, r8
   b9a18:	4638      	mov	r0, r7
   b9a1a:	f7fa fb90 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b9a1e:	e7e2      	b.n	b99e6 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   b9a20:	2003e444 	.word	0x2003e444
   b9a24:	000c1dc4 	.word	0x000c1dc4

000b9a28 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   b9a28:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   b9a2a:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b9a2e:	430b      	orrs	r3, r1
   b9a30:	d005      	beq.n	b9a3e <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   b9a32:	3840      	subs	r0, #64	; 0x40
   b9a34:	ea50 0301 	orrs.w	r3, r0, r1
   b9a38:	d10b      	bne.n	b9a52 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   b9a3a:	2a09      	cmp	r2, #9
   b9a3c:	d109      	bne.n	b9a52 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   b9a3e:	4905      	ldr	r1, [pc, #20]	; (b9a54 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   b9a40:	4805      	ldr	r0, [pc, #20]	; (b9a58 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   b9a42:	f7fd fa8f 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   b9a46:	f7ff ff07 	bl	b9858 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   b9a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   b9a4e:	f7ff bf57 	b.w	b9900 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   b9a52:	bd08      	pop	{r3, pc}
   b9a54:	000c1dd7 	.word	0x000c1dd7
   b9a58:	2003e444 	.word	0x2003e444

000b9a5c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b9a5c:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b9a5e:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b9a60:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b9a62:	b183      	cbz	r3, b9a86 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b9a64:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b9a66:	6945      	ldr	r5, [r0, #20]
   b9a68:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b9a6a:	42ae      	cmp	r6, r5
   b9a6c:	d906      	bls.n	b9a7c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   b9a6e:	f855 0b04 	ldr.w	r0, [r5], #4
   b9a72:	f44f 7100 	mov.w	r1, #512	; 0x200
   b9a76:	f7fa fb12 	bl	b409e <_ZdlPvj>
   b9a7a:	e7f6      	b.n	b9a6a <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   b9a7c:	6861      	ldr	r1, [r4, #4]
   b9a7e:	6820      	ldr	r0, [r4, #0]
   b9a80:	0089      	lsls	r1, r1, #2
   b9a82:	f7fa fb0c 	bl	b409e <_ZdlPvj>
    }
   b9a86:	4620      	mov	r0, r4
   b9a88:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9a8c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b9a8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b9a8e:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   b9a92:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   b9a94:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b9a96:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   b9a98:	b90a      	cbnz	r2, b9a9e <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   b9a9a:	07d9      	lsls	r1, r3, #31
   b9a9c:	d505      	bpl.n	b9aaa <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b9a9e:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   b9aa2:	4b0a      	ldr	r3, [pc, #40]	; (b9acc <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   b9aa4:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b9aa6:	4b0a      	ldr	r3, [pc, #40]	; (b9ad0 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   b9aa8:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b9aaa:	4621      	mov	r1, r4
   b9aac:	4668      	mov	r0, sp
   b9aae:	f7fe f8f4 	bl	b7c9a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9ab2:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9ab4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9ab6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9ab8:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9aba:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b9abc:	4668      	mov	r0, sp
   b9abe:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9ac0:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9ac2:	9203      	str	r2, [sp, #12]
   b9ac4:	f7fb fb23 	bl	b510e <_ZNSt14_Function_baseD1Ev>
	}
   b9ac8:	b004      	add	sp, #16
   b9aca:	bd10      	pop	{r4, pc}
   b9acc:	000b95ed 	.word	0x000b95ed
   b9ad0:	000b960b 	.word	0x000b960b

000b9ad4 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   b9ad4:	b570      	push	{r4, r5, r6, lr}
   b9ad6:	b086      	sub	sp, #24
   b9ad8:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b9ada:	f002 fd9f 	bl	bc61c <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   b9ade:	b948      	cbnz	r0, b9af4 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   b9ae0:	4b43      	ldr	r3, [pc, #268]	; (b9bf0 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   b9ae2:	a902      	add	r1, sp, #8
   b9ae4:	e9cd 3002 	strd	r3, r0, [sp, #8]
   b9ae8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b9aec:	f7ff ffce 	bl	b9a8c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b9af0:	b006      	add	sp, #24
   b9af2:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   b9af4:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   b9af8:	b11d      	cbz	r5, b9b02 <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   b9afa:	2301      	movs	r3, #1
   b9afc:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   b9b00:	e7f6      	b.n	b9af0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   b9b02:	f002 fa97 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   b9b06:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b9b0a:	1ac0      	subs	r0, r0, r3
   b9b0c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b9b10:	4298      	cmp	r0, r3
   b9b12:	d3ed      	bcc.n	b9af0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   b9b14:	1d26      	adds	r6, r4, #4
   b9b16:	4629      	mov	r1, r5
   b9b18:	4630      	mov	r0, r6
   b9b1a:	f002 f84f 	bl	bbbbc <_ZN14SequentialFile16getFileFromQueueEb>
   b9b1e:	4601      	mov	r1, r0
   b9b20:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   b9b24:	2800      	cmp	r0, #0
   b9b26:	d052      	beq.n	b9bce <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   b9b28:	4620      	mov	r0, r4
   b9b2a:	f7ff fdb9 	bl	b96a0 <_ZN17PublishQueuePosix13readQueueFileEi>
   b9b2e:	4605      	mov	r5, r0
   b9b30:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   b9b34:	2800      	cmp	r0, #0
   b9b36:	d035      	beq.n	b9ba4 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   b9b38:	f002 fa7c 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   b9b3c:	ae02      	add	r6, sp, #8
   b9b3e:	2500      	movs	r5, #0
   b9b40:	4b2c      	ldr	r3, [pc, #176]	; (b9bf4 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   b9b42:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   b9b46:	4631      	mov	r1, r6
   b9b48:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b9b4c:	9302      	str	r3, [sp, #8]
   b9b4e:	9503      	str	r5, [sp, #12]
   b9b50:	f7ff ff9c 	bl	b9a8c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b9b54:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   b9b58:	f103 0242 	add.w	r2, r3, #66	; 0x42
   b9b5c:	9200      	str	r2, [sp, #0]
   b9b5e:	4926      	ldr	r1, [pc, #152]	; (b9bf8 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   b9b60:	4a26      	ldr	r2, [pc, #152]	; (b9bfc <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   b9b62:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b9b66:	42a8      	cmp	r0, r5
   b9b68:	bf08      	it	eq
   b9b6a:	460a      	moveq	r2, r1
   b9b6c:	3301      	adds	r3, #1
   b9b6e:	4924      	ldr	r1, [pc, #144]	; (b9c00 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   b9b70:	4824      	ldr	r0, [pc, #144]	; (b9c04 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   b9b72:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b9b76:	f7fd f9f5 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   b9b7a:	f7fd ffbb 	bl	b7af4 <_ZN19BackgroundPublishRK8instanceEv>
   b9b7e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   b9b82:	4b21      	ldr	r3, [pc, #132]	; (b9c08 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   b9b84:	9305      	str	r3, [sp, #20]
   b9b86:	e9cd 6500 	strd	r6, r5, [sp]
   b9b8a:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   b9b8c:	4b1f      	ldr	r3, [pc, #124]	; (b9c0c <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b9b8e:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b9b90:	9304      	str	r3, [sp, #16]
   b9b92:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9b96:	3242      	adds	r2, #66	; 0x42
   b9b98:	f7fe f90e 	bl	b7db8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   b9b9c:	4630      	mov	r0, r6
   b9b9e:	f7fb fab6 	bl	b510e <_ZNSt14_Function_baseD1Ev>
   b9ba2:	e7a5      	b.n	b9af0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   b9ba4:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   b9ba8:	4919      	ldr	r1, [pc, #100]	; (b9c10 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   b9baa:	4816      	ldr	r0, [pc, #88]	; (b9c04 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   b9bac:	f7fa fac7 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   b9bb0:	2101      	movs	r1, #1
   b9bb2:	4630      	mov	r0, r6
   b9bb4:	f002 f802 	bl	bbbbc <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   b9bb8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   b9bbc:	462a      	mov	r2, r5
   b9bbe:	4630      	mov	r0, r6
   b9bc0:	f001 fe34 	bl	bb82c <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   b9bc4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b9bc8:	2b00      	cmp	r3, #0
   b9bca:	d1b5      	bne.n	b9b38 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   b9bcc:	e795      	b.n	b9afa <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   b9bce:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   b9bd2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b9bd6:	429a      	cmp	r2, r3
   b9bd8:	d007      	beq.n	b9bea <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   b9bda:	681b      	ldr	r3, [r3, #0]
   b9bdc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   b9be0:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b9be4:	f7ff fe73 	bl	b98ce <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   b9be8:	e7ec      	b.n	b9bc4 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   b9bea:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   b9bee:	e784      	b.n	b9afa <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   b9bf0:	000b9c15 	.word	0x000b9c15
   b9bf4:	000b9f95 	.word	0x000b9f95
   b9bf8:	000c1e06 	.word	0x000c1e06
   b9bfc:	000c22f8 	.word	0x000c22f8
   b9c00:	000c1e27 	.word	0x000c1e27
   b9c04:	2003e444 	.word	0x2003e444
   b9c08:	000b95dd 	.word	0x000b95dd
   b9c0c:	000b9623 	.word	0x000b9623
   b9c10:	000c1e0a 	.word	0x000c1e0a

000b9c14 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   b9c14:	b513      	push	{r0, r1, r4, lr}
   b9c16:	4604      	mov	r4, r0
   b9c18:	f002 fd00 	bl	bc61c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b9c1c:	b190      	cbz	r0, b9c44 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   b9c1e:	f002 fa09 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   b9c22:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b9c26:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   b9c2a:	4b0d      	ldr	r3, [pc, #52]	; (b9c60 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   b9c2c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   b9c30:	9300      	str	r3, [sp, #0]
   b9c32:	4669      	mov	r1, sp
   b9c34:	2300      	movs	r3, #0
   b9c36:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b9c3a:	9301      	str	r3, [sp, #4]
   b9c3c:	f7ff ff26 	bl	b9a8c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b9c40:	b002      	add	sp, #8
   b9c42:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   b9c44:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   b9c48:	b11b      	cbz	r3, b9c52 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   b9c4a:	2301      	movs	r3, #1
   b9c4c:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   b9c50:	e7f6      	b.n	b9c40 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   b9c52:	4620      	mov	r0, r4
   b9c54:	f7ff fe21 	bl	b989a <_ZN17PublishQueuePosix12getNumEventsEv>
   b9c58:	2800      	cmp	r0, #0
   b9c5a:	d0f6      	beq.n	b9c4a <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   b9c5c:	e7f0      	b.n	b9c40 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   b9c5e:	bf00      	nop
   b9c60:	000b9ad5 	.word	0x000b9ad5

000b9c64 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   b9c64:	b570      	push	{r4, r5, r6, lr}
   b9c66:	4605      	mov	r5, r0
   b9c68:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   b9c6a:	2000      	movs	r0, #0
   b9c6c:	f002 fc74 	bl	bc558 <system_thread_get_state>
   b9c70:	2801      	cmp	r0, #1
   b9c72:	d005      	beq.n	b9c80 <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   b9c74:	493e      	ldr	r1, [pc, #248]	; (b9d70 <_ZN17PublishQueuePosix5setupEv+0x10c>)
   b9c76:	483f      	ldr	r0, [pc, #252]	; (b9d74 <_ZN17PublishQueuePosix5setupEv+0x110>)
   b9c78:	f7fd f966 	bl	b6f48 <_ZNK5spark6Logger5errorEPKcz>
}
   b9c7c:	b018      	add	sp, #96	; 0x60
   b9c7e:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   b9c80:	f105 0074 	add.w	r0, r5, #116	; 0x74
   b9c84:	f002 f986 	bl	bbf94 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b9c88:	4b3b      	ldr	r3, [pc, #236]	; (b9d78 <_ZN17PublishQueuePosix5setupEv+0x114>)
   b9c8a:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b9c8c:	4b3b      	ldr	r3, [pc, #236]	; (b9d7c <_ZN17PublishQueuePosix5setupEv+0x118>)
   b9c8e:	9307      	str	r3, [sp, #28]
        };
   b9c90:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   b9c92:	4b3b      	ldr	r3, [pc, #236]	; (b9d80 <_ZN17PublishQueuePosix5setupEv+0x11c>)
   b9c94:	9306      	str	r3, [sp, #24]
   b9c96:	a808      	add	r0, sp, #32
   b9c98:	f7fb fbbc 	bl	b5414 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b9c9c:	a908      	add	r1, sp, #32
   b9c9e:	a80c      	add	r0, sp, #48	; 0x30
   b9ca0:	f7fb fbb8 	bl	b5414 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b9ca4:	a90c      	add	r1, sp, #48	; 0x30
   b9ca6:	a810      	add	r0, sp, #64	; 0x40
   b9ca8:	f7fb fbb4 	bl	b5414 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b9cac:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9cae:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b9cb0:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9cb2:	f7fa f9f0 	bl	b4096 <_Znwj>
   b9cb6:	4604      	mov	r4, r0
   b9cb8:	b160      	cbz	r0, b9cd4 <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   b9cba:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b9cbc:	4601      	mov	r1, r0
   b9cbe:	a810      	add	r0, sp, #64	; 0x40
   b9cc0:	f7fd ffeb 	bl	b7c9a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9cc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   b9cc6:	68a2      	ldr	r2, [r4, #8]
   b9cc8:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   b9cca:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9ccc:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9cce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   b9cd0:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9cd2:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   b9cd4:	4b2b      	ldr	r3, [pc, #172]	; (b9d84 <_ZN17PublishQueuePosix5setupEv+0x120>)
   b9cd6:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   b9cd8:	4b2b      	ldr	r3, [pc, #172]	; (b9d88 <_ZN17PublishQueuePosix5setupEv+0x124>)
   b9cda:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   b9cdc:	4b2b      	ldr	r3, [pc, #172]	; (b9d8c <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9cde:	9414      	str	r4, [sp, #80]	; 0x50
   b9ce0:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b9ce2:	2010      	movs	r0, #16
        SystemEventContext context = {};
   b9ce4:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b9ce8:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b9cea:	f7fa f9d4 	bl	b4096 <_Znwj>
   b9cee:	4604      	mov	r4, r0
   b9cf0:	b1d8      	cbz	r0, b9d2a <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   b9cf2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   b9cf4:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   b9cf6:	b133      	cbz	r3, b9d06 <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b9cf8:	2202      	movs	r2, #2
   b9cfa:	a914      	add	r1, sp, #80	; 0x50
   b9cfc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b9cfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9d00:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b9d02:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b9d04:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b9d06:	4b22      	ldr	r3, [pc, #136]	; (b9d90 <_ZN17PublishQueuePosix5setupEv+0x12c>)
   b9d08:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b9d0a:	4a22      	ldr	r2, [pc, #136]	; (b9d94 <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   b9d0c:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b9d0e:	ab01      	add	r3, sp, #4
   b9d10:	f44f 6004 	mov.w	r0, #2112	; 0x840
   b9d14:	2100      	movs	r1, #0
   b9d16:	f002 fbff 	bl	bc518 <system_subscribe_event>
        if (r) {
   b9d1a:	b130      	cbz	r0, b9d2a <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   b9d1c:	4620      	mov	r0, r4
   b9d1e:	f7fb f9f6 	bl	b510e <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b9d22:	2110      	movs	r1, #16
   b9d24:	4620      	mov	r0, r4
   b9d26:	f7fa f9ba 	bl	b409e <_ZdlPvj>
   b9d2a:	a814      	add	r0, sp, #80	; 0x50
   b9d2c:	f7fb f9ef 	bl	b510e <_ZNSt14_Function_baseD1Ev>
   b9d30:	a810      	add	r0, sp, #64	; 0x40
   b9d32:	f7fb f9ec 	bl	b510e <_ZNSt14_Function_baseD1Ev>
   b9d36:	a80c      	add	r0, sp, #48	; 0x30
   b9d38:	f7fb f9e9 	bl	b510e <_ZNSt14_Function_baseD1Ev>
   b9d3c:	a808      	add	r0, sp, #32
   b9d3e:	f7fb f9e6 	bl	b510e <_ZNSt14_Function_baseD1Ev>
   b9d42:	a804      	add	r0, sp, #16
   b9d44:	f7fb f9e3 	bl	b510e <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   b9d48:	f7fd fed4 	bl	b7af4 <_ZN19BackgroundPublishRK8instanceEv>
   b9d4c:	f7fe f80e 	bl	b7d6c <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   b9d50:	1d28      	adds	r0, r5, #4
   b9d52:	f001 feaf 	bl	bbab4 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   b9d56:	4628      	mov	r0, r5
   b9d58:	f7ff fe32 	bl	b99c0 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   b9d5c:	4b0e      	ldr	r3, [pc, #56]	; (b9d98 <_ZN17PublishQueuePosix5setupEv+0x134>)
   b9d5e:	9314      	str	r3, [sp, #80]	; 0x50
   b9d60:	a914      	add	r1, sp, #80	; 0x50
   b9d62:	2300      	movs	r3, #0
   b9d64:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   b9d68:	9315      	str	r3, [sp, #84]	; 0x54
   b9d6a:	f7ff fe8f 	bl	b9a8c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b9d6e:	e785      	b.n	b9c7c <_ZN17PublishQueuePosix5setupEv+0x18>
   b9d70:	000c1e46 	.word	0x000c1e46
   b9d74:	2003e444 	.word	0x2003e444
   b9d78:	000b9a29 	.word	0x000b9a29
   b9d7c:	000b50eb 	.word	0x000b50eb
   b9d80:	000b50d7 	.word	0x000b50d7
   b9d84:	000b50b1 	.word	0x000b50b1
   b9d88:	000b553d 	.word	0x000b553d
   b9d8c:	000c0002 	.word	0x000c0002
   b9d90:	000b5121 	.word	0x000b5121
   b9d94:	000b5089 	.word	0x000b5089
   b9d98:	000b9c15 	.word	0x000b9c15

000b9d9c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   b9d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9da0:	4606      	mov	r6, r0
   b9da2:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b9da4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b9da6:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b9da8:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b9daa:	1a47      	subs	r7, r0, r1
   b9dac:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b9db0:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b9db2:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   b9db6:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b9db8:	d927      	bls.n	b9e0a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   b9dba:	1b5d      	subs	r5, r3, r5
   b9dbc:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b9dbe:	6832      	ldr	r2, [r6, #0]
   b9dc0:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b9dc2:	b10c      	cbz	r4, b9dc8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   b9dc4:	ea4f 0489 	mov.w	r4, r9, lsl #2
   b9dc8:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b9dca:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   b9dcc:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b9dce:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   b9dd0:	eba3 0201 	sub.w	r2, r3, r1
   b9dd4:	d913      	bls.n	b9dfe <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   b9dd6:	4299      	cmp	r1, r3
   b9dd8:	d002      	beq.n	b9de0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b9dda:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b9ddc:	f006 fc18 	bl	c0610 <memmove>
	_M_node = __new_node;
   b9de0:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   b9de2:	6823      	ldr	r3, [r4, #0]
   b9de4:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9de6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b9dea:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b9dec:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   b9dee:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   b9df0:	59e3      	ldr	r3, [r4, r7]
   b9df2:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9df4:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b9df8:	6233      	str	r3, [r6, #32]
    }
   b9dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   b9dfe:	4299      	cmp	r1, r3
   b9e00:	d0ee      	beq.n	b9de0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b9e02:	1d38      	adds	r0, r7, #4
   b9e04:	1a80      	subs	r0, r0, r2
   b9e06:	4420      	add	r0, r4
   b9e08:	e7e8      	b.n	b9ddc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b9e0a:	f103 0802 	add.w	r8, r3, #2
   b9e0e:	454b      	cmp	r3, r9
   b9e10:	bf2c      	ite	cs
   b9e12:	4498      	addcs	r8, r3
   b9e14:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   b9e16:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   b9e1a:	d301      	bcc.n	b9e20 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   b9e1c:	f005 feda 	bl	bfbd4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9e20:	ea4f 0088 	mov.w	r0, r8, lsl #2
   b9e24:	f7fa f937 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b9e28:	eba8 0505 	sub.w	r5, r8, r5
   b9e2c:	086d      	lsrs	r5, r5, #1
   b9e2e:	4682      	mov	sl, r0
   b9e30:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b9e32:	b10c      	cbz	r4, b9e38 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   b9e34:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   b9e38:	6a72      	ldr	r2, [r6, #36]	; 0x24
   b9e3a:	6971      	ldr	r1, [r6, #20]
   b9e3c:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   b9e3e:	442c      	add	r4, r5
	  if (_Num)
   b9e40:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b9e42:	4454      	add	r4, sl
   b9e44:	d003      	beq.n	b9e4e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b9e46:	1a52      	subs	r2, r2, r1
   b9e48:	4620      	mov	r0, r4
   b9e4a:	f006 fbe1 	bl	c0610 <memmove>
	::operator delete(__p
   b9e4e:	6871      	ldr	r1, [r6, #4]
   b9e50:	6830      	ldr	r0, [r6, #0]
   b9e52:	0089      	lsls	r1, r1, #2
   b9e54:	f7fa f923 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b9e58:	e9c6 a800 	strd	sl, r8, [r6]
   b9e5c:	e7c0      	b.n	b9de0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000b9e60 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b9e60:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9e62:	b085      	sub	sp, #20
   b9e64:	4604      	mov	r4, r0
   b9e66:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   b9e6a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b9e6e:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b9e70:	460f      	mov	r7, r1
   b9e72:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b9e74:	f7ff fbec 	bl	b9650 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   b9e78:	4605      	mov	r5, r0
   b9e7a:	2800      	cmp	r0, #0
   b9e7c:	d03c      	beq.n	b9ef8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   b9e7e:	4b3f      	ldr	r3, [pc, #252]	; (b9f7c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   b9e80:	493f      	ldr	r1, [pc, #252]	; (b9f80 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   b9e82:	4840      	ldr	r0, [pc, #256]	; (b9f84 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b9e84:	2e00      	cmp	r6, #0
   b9e86:	bf18      	it	ne
   b9e88:	4633      	movne	r3, r6
   b9e8a:	463a      	mov	r2, r7
   b9e8c:	f7fd f86a 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
   b9e90:	4620      	mov	r0, r4
   b9e92:	f7ff fbd0 	bl	b9636 <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   b9e96:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   b9e9a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   b9e9e:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b9ea0:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   b9ea2:	f104 0678 	add.w	r6, r4, #120	; 0x78
   b9ea6:	d029      	beq.n	b9efc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9ea8:	b103      	cbz	r3, b9eac <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   b9eaa:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b9eac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b9eb0:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   b9eb2:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b9eb4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   b9eb8:	4628      	mov	r0, r5
   b9eba:	f001 fecf 	bl	bbc5c <_ZNK14SequentialFile11getQueueLenEv>
   b9ebe:	9003      	str	r0, [sp, #12]
   b9ec0:	4630      	mov	r0, r6
   b9ec2:	f7ff fcd9 	bl	b9878 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9ec6:	9002      	str	r0, [sp, #8]
   b9ec8:	f002 fba8 	bl	bc61c <spark_cloud_flag_connected>
   b9ecc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b9ed0:	9000      	str	r0, [sp, #0]
   b9ed2:	492d      	ldr	r1, [pc, #180]	; (b9f88 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   b9ed4:	482b      	ldr	r0, [pc, #172]	; (b9f84 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b9ed6:	f7fd f845 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b9eda:	4628      	mov	r0, r5
   b9edc:	f001 febe 	bl	bbc5c <_ZNK14SequentialFile11getQueueLenEv>
   b9ee0:	2800      	cmp	r0, #0
   b9ee2:	d03b      	beq.n	b9f5c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   b9ee4:	4620      	mov	r0, r4
   b9ee6:	f7ff fd0b 	bl	b9900 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   b9eea:	4620      	mov	r0, r4
   b9eec:	f7ff fd68 	bl	b99c0 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   b9ef0:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b9ef2:	f002 f867 	bl	bbfc4 <os_mutex_recursive_unlock>
    return true;
   b9ef6:	2001      	movs	r0, #1
}
   b9ef8:	b005      	add	sp, #20
   b9efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   b9efc:	4630      	mov	r0, r6
   b9efe:	f7ff fcbb 	bl	b9878 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9f02:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b9f06:	4298      	cmp	r0, r3
   b9f08:	d102      	bne.n	b9f10 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   b9f0a:	4820      	ldr	r0, [pc, #128]	; (b9f8c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   b9f0c:	f005 fe65 	bl	bfbda <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b9f10:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b9f14:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   b9f16:	1a9a      	subs	r2, r3, r2
   b9f18:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9f1a:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b9f1e:	2b01      	cmp	r3, #1
   b9f20:	d804      	bhi.n	b9f2c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   b9f22:	2200      	movs	r2, #0
   b9f24:	2101      	movs	r1, #1
   b9f26:	4630      	mov	r0, r6
   b9f28:	f7ff ff38 	bl	b9d9c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9f2c:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b9f30:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   b9f34:	f7fa f8af 	bl	b4096 <_Znwj>
   b9f38:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b9f3a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9f3e:	b103      	cbz	r3, b9f42 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   b9f40:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b9f42:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b9f46:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b9f48:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   b9f4c:	685b      	ldr	r3, [r3, #4]
   b9f4e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9f52:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b9f56:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   b9f5a:	e7aa      	b.n	b9eb2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b9f5c:	4630      	mov	r0, r6
   b9f5e:	f7ff fc8b 	bl	b9878 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9f62:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b9f64:	4298      	cmp	r0, r3
   b9f66:	d8bd      	bhi.n	b9ee4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   b9f68:	f002 fb58 	bl	bc61c <spark_cloud_flag_connected>
   b9f6c:	2800      	cmp	r0, #0
   b9f6e:	d0b9      	beq.n	b9ee4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   b9f70:	4907      	ldr	r1, [pc, #28]	; (b9f90 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   b9f72:	4804      	ldr	r0, [pc, #16]	; (b9f84 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b9f74:	f7fc fff6 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
   b9f78:	e7b7      	b.n	b9eea <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   b9f7a:	bf00      	nop
   b9f7c:	000c2508 	.word	0x000c2508
   b9f80:	000c1e69 	.word	0x000c1e69
   b9f84:	2003e444 	.word	0x2003e444
   b9f88:	000c1ec1 	.word	0x000c1ec1
   b9f8c:	000c1e91 	.word	0x000c1e91
   b9f90:	000c1eed 	.word	0x000c1eed

000b9f94 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   b9f94:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   b9f96:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   b9f9a:	4604      	mov	r4, r0
    if (!publishComplete) {
   b9f9c:	2b00      	cmp	r3, #0
   b9f9e:	d041      	beq.n	ba024 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   b9fa0:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   b9fa4:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   b9fa8:	2b00      	cmp	r3, #0
   b9faa:	d03d      	beq.n	ba028 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   b9fac:	4950      	ldr	r1, [pc, #320]	; (ba0f0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   b9fae:	4851      	ldr	r0, [pc, #324]	; (ba0f4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9fb0:	f7fc ffd8 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   b9fb4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9fb8:	b1d3      	cbz	r3, b9ff0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   b9fba:	1d26      	adds	r6, r4, #4
   b9fbc:	2100      	movs	r1, #0
   b9fbe:	4630      	mov	r0, r6
   b9fc0:	f001 fdfc 	bl	bbbbc <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   b9fc4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9fc8:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   b9fca:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   b9fcc:	d10d      	bne.n	b9fea <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   b9fce:	2101      	movs	r1, #1
   b9fd0:	4630      	mov	r0, r6
   b9fd2:	f001 fdf3 	bl	bbbbc <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   b9fd6:	2200      	movs	r2, #0
   b9fd8:	4629      	mov	r1, r5
   b9fda:	4630      	mov	r0, r6
   b9fdc:	f001 fc26 	bl	bb82c <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   b9fe0:	4945      	ldr	r1, [pc, #276]	; (ba0f8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   b9fe2:	4844      	ldr	r0, [pc, #272]	; (ba0f4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9fe4:	462a      	mov	r2, r5
   b9fe6:	f7fc ffbd 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   b9fea:	2300      	movs	r3, #0
   b9fec:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   b9ff0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b9ff4:	b110      	cbz	r0, b9ffc <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   b9ff6:	2143      	movs	r1, #67	; 0x43
   b9ff8:	f7fa f851 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   b9ffc:	2300      	movs	r3, #0
   b9ffe:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   ba002:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   ba006:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   ba00a:	4b3c      	ldr	r3, [pc, #240]	; (ba0fc <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   ba00c:	9300      	str	r3, [sp, #0]
   ba00e:	4669      	mov	r1, sp
   ba010:	2300      	movs	r3, #0
   ba012:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba016:	9301      	str	r3, [sp, #4]
   ba018:	f7ff fd38 	bl	b9a8c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   ba01c:	f002 f80a 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   ba020:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   ba024:	b002      	add	sp, #8
   ba026:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   ba028:	4935      	ldr	r1, [pc, #212]	; (ba100 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   ba02a:	4832      	ldr	r0, [pc, #200]	; (ba0f4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   ba02c:	f7fc ff9a 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   ba030:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   ba034:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   ba038:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   ba03c:	b14b      	cbz	r3, ba052 <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   ba03e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   ba042:	b110      	cbz	r0, ba04a <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   ba044:	2143      	movs	r1, #67	; 0x43
   ba046:	f7fa f82a 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   ba04a:	2300      	movs	r3, #0
   ba04c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   ba050:	e7db      	b.n	ba00a <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   ba052:	4620      	mov	r0, r4
   ba054:	f7ff faef 	bl	b9636 <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   ba058:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   ba05c:	4293      	cmp	r3, r2
   ba05e:	d013      	beq.n	ba088 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   ba060:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   ba064:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   ba068:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   ba06c:	3b04      	subs	r3, #4
   ba06e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   ba072:	6f60      	ldr	r0, [r4, #116]	; 0x74
   ba074:	f001 ffa6 	bl	bbfc4 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   ba078:	4922      	ldr	r1, [pc, #136]	; (ba104 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   ba07a:	481e      	ldr	r0, [pc, #120]	; (ba0f4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   ba07c:	f7fc ff72 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   ba080:	4620      	mov	r0, r4
   ba082:	f7ff fc3d 	bl	b9900 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   ba086:	e7c0      	b.n	ba00a <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   ba088:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   ba08c:	4628      	mov	r0, r5
   ba08e:	f7ff fbf3 	bl	b9878 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba092:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   ba096:	4298      	cmp	r0, r3
   ba098:	d102      	bne.n	ba0a0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   ba09a:	481b      	ldr	r0, [pc, #108]	; (ba108 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   ba09c:	f005 fd9d 	bl	bfbda <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   ba0a0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   ba0a4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   ba0a6:	429a      	cmp	r2, r3
   ba0a8:	d104      	bne.n	ba0b4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   ba0aa:	2201      	movs	r2, #1
   ba0ac:	4611      	mov	r1, r2
   ba0ae:	4628      	mov	r0, r5
   ba0b0:	f7ff fe74 	bl	b9d9c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba0b4:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   ba0b8:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   ba0bc:	f7f9 ffeb 	bl	b4096 <_Znwj>
   ba0c0:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   ba0c4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   ba0c8:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   ba0ca:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   ba0ce:	f853 3c04 	ldr.w	r3, [r3, #-4]
   ba0d2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba0d6:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba0da:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   ba0de:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   ba0e2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba0e6:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   ba0ea:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   ba0ee:	e7c0      	b.n	ba072 <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   ba0f0:	000c1f00 	.word	0x000c1f00
   ba0f4:	2003e444 	.word	0x2003e444
   ba0f8:	000c1f13 	.word	0x000c1f13
   ba0fc:	000b9ad5 	.word	0x000b9ad5
   ba100:	000c1f23 	.word	0x000c1f23
   ba104:	000c1f35 	.word	0x000c1f35
   ba108:	000c1e91 	.word	0x000c1e91

000ba10c <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   ba10c:	4b01      	ldr	r3, [pc, #4]	; (ba114 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   ba10e:	4a02      	ldr	r2, [pc, #8]	; (ba118 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   ba110:	601a      	str	r2, [r3, #0]
}
   ba112:	4770      	bx	lr
   ba114:	2003e444 	.word	0x2003e444
   ba118:	000c1f5c 	.word	0x000c1f5c

000ba11c <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   ba11c:	b510      	push	{r4, lr}
   ba11e:	4b07      	ldr	r3, [pc, #28]	; (ba13c <_ZN17PublishQueuePosixD1Ev+0x20>)
   ba120:	4604      	mov	r4, r0
   ba122:	f840 3bc0 	str.w	r3, [r0], #192
   ba126:	f7fa fff2 	bl	b510e <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   ba12a:	f104 0078 	add.w	r0, r4, #120	; 0x78
   ba12e:	f7ff fc95 	bl	b9a5c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   ba132:	1d20      	adds	r0, r4, #4
   ba134:	f001 fbfe 	bl	bb934 <_ZN14SequentialFileD1Ev>
}
   ba138:	4620      	mov	r0, r4
   ba13a:	bd10      	pop	{r4, pc}
   ba13c:	000c1f70 	.word	0x000c1f70

000ba140 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   ba140:	b510      	push	{r4, lr}
   ba142:	4604      	mov	r4, r0
}
   ba144:	f7ff ffea 	bl	ba11c <_ZN17PublishQueuePosixD1Ev>
   ba148:	4620      	mov	r0, r4
   ba14a:	21d0      	movs	r1, #208	; 0xd0
   ba14c:	f7f9 ffa7 	bl	b409e <_ZdlPvj>
   ba150:	4620      	mov	r0, r4
   ba152:	bd10      	pop	{r4, pc}

000ba154 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   ba154:	6001      	str	r1, [r0, #0]
   ba156:	7102      	strb	r2, [r0, #4]
{
}
   ba158:	4770      	bx	lr

000ba15a <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   ba15a:	6800      	ldr	r0, [r0, #0]
   ba15c:	6803      	ldr	r3, [r0, #0]
   ba15e:	68db      	ldr	r3, [r3, #12]
   ba160:	4718      	bx	r3

000ba162 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   ba162:	6800      	ldr	r0, [r0, #0]
   ba164:	6803      	ldr	r3, [r0, #0]
   ba166:	6a1b      	ldr	r3, [r3, #32]
   ba168:	4718      	bx	r3

000ba16a <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   ba16a:	6800      	ldr	r0, [r0, #0]
   ba16c:	6803      	ldr	r3, [r0, #0]
   ba16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba170:	4718      	bx	r3

000ba172 <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   ba172:	7900      	ldrb	r0, [r0, #4]
   ba174:	4770      	bx	lr

000ba176 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   ba176:	6800      	ldr	r0, [r0, #0]
   ba178:	6803      	ldr	r3, [r0, #0]
   ba17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   ba17c:	4718      	bx	r3

000ba17e <_ZN10RHDatagram6sendtoEPhhh>:
{
   ba17e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba180:	4605      	mov	r5, r0
   ba182:	460c      	mov	r4, r1
    setHeaderTo(address);
   ba184:	4619      	mov	r1, r3
{
   ba186:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   ba188:	f7ff fff5 	bl	ba176 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   ba18c:	6828      	ldr	r0, [r5, #0]
   ba18e:	9a01      	ldr	r2, [sp, #4]
   ba190:	6803      	ldr	r3, [r0, #0]
   ba192:	695b      	ldr	r3, [r3, #20]
   ba194:	4621      	mov	r1, r4
}
   ba196:	b003      	add	sp, #12
   ba198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   ba19c:	4718      	bx	r3

000ba19e <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   ba19e:	6800      	ldr	r0, [r0, #0]
   ba1a0:	6803      	ldr	r3, [r0, #0]
   ba1a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba1a4:	4718      	bx	r3

000ba1a6 <_ZN10RHDatagram14setThisAddressEh>:
{
   ba1a6:	b538      	push	{r3, r4, r5, lr}
   ba1a8:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   ba1aa:	6800      	ldr	r0, [r0, #0]
   ba1ac:	6803      	ldr	r3, [r0, #0]
{
   ba1ae:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   ba1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba1b2:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   ba1b4:	4629      	mov	r1, r5
   ba1b6:	4620      	mov	r0, r4
   ba1b8:	f7ff fff1 	bl	ba19e <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   ba1bc:	7125      	strb	r5, [r4, #4]
}
   ba1be:	bd38      	pop	{r3, r4, r5, pc}

000ba1c0 <_ZN10RHDatagram4initEv>:
{
   ba1c0:	b538      	push	{r3, r4, r5, lr}
   ba1c2:	4604      	mov	r4, r0
    bool ret = _driver.init();
   ba1c4:	6800      	ldr	r0, [r0, #0]
   ba1c6:	6803      	ldr	r3, [r0, #0]
   ba1c8:	689b      	ldr	r3, [r3, #8]
   ba1ca:	4798      	blx	r3
    if (ret)
   ba1cc:	4605      	mov	r5, r0
   ba1ce:	b118      	cbz	r0, ba1d8 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   ba1d0:	7921      	ldrb	r1, [r4, #4]
   ba1d2:	4620      	mov	r0, r4
   ba1d4:	f7ff ffe7 	bl	ba1a6 <_ZN10RHDatagram14setThisAddressEh>
}
   ba1d8:	4628      	mov	r0, r5
   ba1da:	bd38      	pop	{r3, r4, r5, pc}

000ba1dc <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   ba1dc:	6800      	ldr	r0, [r0, #0]
   ba1de:	6803      	ldr	r3, [r0, #0]
   ba1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba1e2:	4718      	bx	r3

000ba1e4 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   ba1e4:	6800      	ldr	r0, [r0, #0]
   ba1e6:	6803      	ldr	r3, [r0, #0]
   ba1e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba1ea:	4718      	bx	r3

000ba1ec <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   ba1ec:	6800      	ldr	r0, [r0, #0]
   ba1ee:	6803      	ldr	r3, [r0, #0]
   ba1f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba1f2:	4718      	bx	r3

000ba1f4 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   ba1f4:	6800      	ldr	r0, [r0, #0]
   ba1f6:	6803      	ldr	r3, [r0, #0]
   ba1f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   ba1fa:	4718      	bx	r3

000ba1fc <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   ba1fc:	6800      	ldr	r0, [r0, #0]
   ba1fe:	6803      	ldr	r3, [r0, #0]
   ba200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba202:	4718      	bx	r3

000ba204 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   ba204:	6800      	ldr	r0, [r0, #0]
   ba206:	6803      	ldr	r3, [r0, #0]
   ba208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   ba20a:	4718      	bx	r3

000ba20c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   ba20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba210:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   ba212:	6800      	ldr	r0, [r0, #0]
{
   ba214:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   ba216:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   ba218:	6803      	ldr	r3, [r0, #0]
   ba21a:	691b      	ldr	r3, [r3, #16]
{
   ba21c:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   ba220:	4798      	blx	r3
   ba222:	4605      	mov	r5, r0
   ba224:	b1c8      	cbz	r0, ba25a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   ba226:	b11e      	cbz	r6, ba230 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   ba228:	4620      	mov	r0, r4
   ba22a:	f7ff ffe3 	bl	ba1f4 <_ZN10RHDatagram10headerFromEv>
   ba22e:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   ba230:	f1b9 0f00 	cmp.w	r9, #0
   ba234:	d004      	beq.n	ba240 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   ba236:	4620      	mov	r0, r4
   ba238:	f7ff ffd8 	bl	ba1ec <_ZN10RHDatagram8headerToEv>
   ba23c:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   ba240:	f1b8 0f00 	cmp.w	r8, #0
   ba244:	d004      	beq.n	ba250 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   ba246:	4620      	mov	r0, r4
   ba248:	f7ff ffd8 	bl	ba1fc <_ZN10RHDatagram8headerIdEv>
   ba24c:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   ba250:	b11f      	cbz	r7, ba25a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   ba252:	4620      	mov	r0, r4
   ba254:	f7ff ffd6 	bl	ba204 <_ZN10RHDatagram11headerFlagsEv>
   ba258:	7038      	strb	r0, [r7, #0]
}
   ba25a:	4628      	mov	r0, r5
   ba25c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000ba260 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   ba260:	2001      	movs	r0, #1
   ba262:	4770      	bx	lr

000ba264 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   ba264:	7903      	ldrb	r3, [r0, #4]
   ba266:	2b03      	cmp	r3, #3
   ba268:	d0fc      	beq.n	ba264 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   ba26a:	2001      	movs	r0, #1
   ba26c:	4770      	bx	lr

000ba26e <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   ba26e:	2000      	movs	r0, #0
   ba270:	4770      	bx	lr

000ba272 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   ba272:	7181      	strb	r1, [r0, #6]
}
   ba274:	4770      	bx	lr

000ba276 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   ba276:	7141      	strb	r1, [r0, #5]
}
   ba278:	4770      	bx	lr

000ba27a <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   ba27a:	72c1      	strb	r1, [r0, #11]
}
   ba27c:	4770      	bx	lr

000ba27e <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   ba27e:	7301      	strb	r1, [r0, #12]
}
   ba280:	4770      	bx	lr

000ba282 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   ba282:	7341      	strb	r1, [r0, #13]
}
   ba284:	4770      	bx	lr

000ba286 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   ba286:	7b83      	ldrb	r3, [r0, #14]
   ba288:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   ba28c:	4311      	orrs	r1, r2
   ba28e:	7381      	strb	r1, [r0, #14]
}
   ba290:	4770      	bx	lr

000ba292 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   ba292:	79c0      	ldrb	r0, [r0, #7]
}
   ba294:	4770      	bx	lr

000ba296 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   ba296:	7a00      	ldrb	r0, [r0, #8]
}
   ba298:	4770      	bx	lr

000ba29a <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   ba29a:	7a40      	ldrb	r0, [r0, #9]
}
   ba29c:	4770      	bx	lr

000ba29e <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   ba29e:	7a80      	ldrb	r0, [r0, #10]
}
   ba2a0:	4770      	bx	lr

000ba2a2 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   ba2a2:	8a00      	ldrh	r0, [r0, #16]
}
   ba2a4:	b200      	sxth	r0, r0
   ba2a6:	4770      	bx	lr

000ba2a8 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   ba2a8:	7900      	ldrb	r0, [r0, #4]
}
   ba2aa:	4770      	bx	lr

000ba2ac <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   ba2ac:	7101      	strb	r1, [r0, #4]
}
   ba2ae:	4770      	bx	lr

000ba2b0 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   ba2b0:	8a40      	ldrh	r0, [r0, #18]
}
   ba2b2:	b280      	uxth	r0, r0
   ba2b4:	4770      	bx	lr

000ba2b6 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   ba2b6:	8a80      	ldrh	r0, [r0, #20]
}
   ba2b8:	b280      	uxth	r0, r0
   ba2ba:	4770      	bx	lr

000ba2bc <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   ba2bc:	8ac0      	ldrh	r0, [r0, #22]
}
   ba2be:	b280      	uxth	r0, r0
   ba2c0:	4770      	bx	lr

000ba2c2 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   ba2c2:	b538      	push	{r3, r4, r5, lr}
   ba2c4:	4605      	mov	r5, r0
   ba2c6:	460c      	mov	r4, r1
    while (!available())
   ba2c8:	682b      	ldr	r3, [r5, #0]
   ba2ca:	4628      	mov	r0, r5
   ba2cc:	68db      	ldr	r3, [r3, #12]
   ba2ce:	4798      	blx	r3
   ba2d0:	b928      	cbnz	r0, ba2de <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   ba2d2:	2c00      	cmp	r4, #0
   ba2d4:	d0f8      	beq.n	ba2c8 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   ba2d6:	4620      	mov	r0, r4
   ba2d8:	f002 fac0 	bl	bc85c <delay>
   ba2dc:	e7f4      	b.n	ba2c8 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   ba2de:	bd38      	pop	{r3, r4, r5, pc}

000ba2e0 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   ba2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba2e2:	4605      	mov	r5, r0
   ba2e4:	460f      	mov	r7, r1
   ba2e6:	4614      	mov	r4, r2
   ba2e8:	f001 fea4 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
   ba2ec:	4606      	mov	r6, r0
   ba2ee:	f001 fea1 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   ba2f2:	1b80      	subs	r0, r0, r6
   ba2f4:	42b8      	cmp	r0, r7
   ba2f6:	d20a      	bcs.n	ba30e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   ba2f8:	682b      	ldr	r3, [r5, #0]
   ba2fa:	4628      	mov	r0, r5
   ba2fc:	68db      	ldr	r3, [r3, #12]
   ba2fe:	4798      	blx	r3
   ba300:	b930      	cbnz	r0, ba310 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   ba302:	2c00      	cmp	r4, #0
   ba304:	d0f3      	beq.n	ba2ee <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   ba306:	4620      	mov	r0, r4
   ba308:	f002 faa8 	bl	bc85c <delay>
   ba30c:	e7ef      	b.n	ba2ee <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   ba30e:	2000      	movs	r0, #0
}
   ba310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba312 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   ba312:	b570      	push	{r4, r5, r6, lr}
   ba314:	4604      	mov	r4, r0
   ba316:	460e      	mov	r6, r1
   ba318:	f001 fe8c 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
   ba31c:	4605      	mov	r5, r0
   ba31e:	f001 fe89 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   ba322:	1b40      	subs	r0, r0, r5
   ba324:	42b0      	cmp	r0, r6
   ba326:	d204      	bcs.n	ba332 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   ba328:	7923      	ldrb	r3, [r4, #4]
   ba32a:	2b03      	cmp	r3, #3
   ba32c:	d0f7      	beq.n	ba31e <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   ba32e:	2001      	movs	r0, #1
}
   ba330:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   ba332:	2000      	movs	r0, #0
   ba334:	e7fc      	b.n	ba330 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000ba336 <_ZN15RHGenericDriver7waitCADEv>:
{
   ba336:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   ba338:	69c3      	ldr	r3, [r0, #28]
{
   ba33a:	4604      	mov	r4, r0
    if (!_cad_timeout)
   ba33c:	b1b3      	cbz	r3, ba36c <_ZN15RHGenericDriver7waitCADEv+0x36>
   ba33e:	f001 fe79 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   ba342:	2664      	movs	r6, #100	; 0x64
   ba344:	4605      	mov	r5, r0
    while (isChannelActive())
   ba346:	6823      	ldr	r3, [r4, #0]
   ba348:	4620      	mov	r0, r4
   ba34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba34c:	4798      	blx	r3
   ba34e:	b168      	cbz	r0, ba36c <_ZN15RHGenericDriver7waitCADEv+0x36>
   ba350:	f001 fe70 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   ba354:	69e3      	ldr	r3, [r4, #28]
   ba356:	1b40      	subs	r0, r0, r5
   ba358:	4298      	cmp	r0, r3
   ba35a:	d809      	bhi.n	ba370 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   ba35c:	210a      	movs	r1, #10
   ba35e:	2001      	movs	r0, #1
   ba360:	f004 fc99 	bl	bec96 <_Z6randomii>
   ba364:	4370      	muls	r0, r6
   ba366:	f002 fa79 	bl	bc85c <delay>
    while (isChannelActive())
   ba36a:	e7ec      	b.n	ba346 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   ba36c:	2001      	movs	r0, #1
}
   ba36e:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   ba370:	2000      	movs	r0, #0
   ba372:	e7fc      	b.n	ba36e <_ZN15RHGenericDriver7waitCADEv+0x38>

000ba374 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   ba374:	4a06      	ldr	r2, [pc, #24]	; (ba390 <_ZN15RHGenericDriverC1Ev+0x1c>)
   ba376:	6002      	str	r2, [r0, #0]
   ba378:	21ff      	movs	r1, #255	; 0xff
   ba37a:	2200      	movs	r2, #0
   ba37c:	7102      	strb	r2, [r0, #4]
   ba37e:	7141      	strb	r1, [r0, #5]
   ba380:	8242      	strh	r2, [r0, #18]
   ba382:	72c1      	strb	r1, [r0, #11]
   ba384:	8282      	strh	r2, [r0, #20]
   ba386:	8181      	strh	r1, [r0, #12]
   ba388:	7382      	strb	r2, [r0, #14]
   ba38a:	82c2      	strh	r2, [r0, #22]
   ba38c:	61c2      	str	r2, [r0, #28]
}
   ba38e:	4770      	bx	lr
   ba390:	000c1f84 	.word	0x000c1f84

000ba394 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   ba394:	4770      	bx	lr

000ba396 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   ba396:	4770      	bx	lr

000ba398 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   ba398:	4770      	bx	lr

000ba39a <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   ba39a:	4770      	bx	lr

000ba39c <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   ba39c:	4770      	bx	lr

000ba39e <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   ba39e:	7141      	strb	r1, [r0, #5]
}
   ba3a0:	4770      	bx	lr

000ba3a2 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   ba3a2:	7181      	strb	r1, [r0, #6]
}
   ba3a4:	4770      	bx	lr

000ba3a6 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   ba3a6:	7101      	strb	r1, [r0, #4]
}
   ba3a8:	4770      	bx	lr
	...

000ba3ac <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   ba3ac:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   ba3ae:	4d03      	ldr	r5, [pc, #12]	; (ba3bc <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   ba3b0:	6005      	str	r5, [r0, #0]
   ba3b2:	7101      	strb	r1, [r0, #4]
   ba3b4:	7142      	strb	r2, [r0, #5]
   ba3b6:	7183      	strb	r3, [r0, #6]
}
   ba3b8:	bd30      	pop	{r4, r5, pc}
   ba3ba:	bf00      	nop
   ba3bc:	000c2004 	.word	0x000c2004

000ba3c0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   ba3c0:	4770      	bx	lr

000ba3c2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   ba3c2:	b510      	push	{r4, lr}
  }
   ba3c4:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   ba3c6:	4604      	mov	r4, r0
  }
   ba3c8:	f7f9 fe69 	bl	b409e <_ZdlPvj>
   ba3cc:	4620      	mov	r0, r4
   ba3ce:	bd10      	pop	{r4, pc}

000ba3d0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   ba3d0:	b40e      	push	{r1, r2, r3}
   ba3d2:	b503      	push	{r0, r1, lr}
   ba3d4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   ba3d6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   ba3d8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   ba3dc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   ba3de:	f004 fc1e 	bl	bec1e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   ba3e2:	b002      	add	sp, #8
   ba3e4:	f85d eb04 	ldr.w	lr, [sp], #4
   ba3e8:	b003      	add	sp, #12
   ba3ea:	4770      	bx	lr

000ba3ec <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   ba3ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba3ee:	4604      	mov	r4, r0
   ba3f0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   ba3f2:	7922      	ldrb	r2, [r4, #4]
   ba3f4:	68a3      	ldr	r3, [r4, #8]
   ba3f6:	b132      	cbz	r2, ba406 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   ba3f8:	b9a3      	cbnz	r3, ba424 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   ba3fa:	490b      	ldr	r1, [pc, #44]	; (ba428 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   ba3fc:	b002      	add	sp, #8
   ba3fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   ba402:	f004 bb03 	b.w	bea0c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   ba406:	4a09      	ldr	r2, [pc, #36]	; (ba42c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   ba408:	7b26      	ldrb	r6, [r4, #12]
   ba40a:	4d09      	ldr	r5, [pc, #36]	; (ba430 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   ba40c:	4909      	ldr	r1, [pc, #36]	; (ba434 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   ba40e:	7b64      	ldrb	r4, [r4, #13]
   ba410:	2e01      	cmp	r6, #1
   ba412:	bf18      	it	ne
   ba414:	4629      	movne	r1, r5
   ba416:	e9cd 1400 	strd	r1, r4, [sp]
   ba41a:	4907      	ldr	r1, [pc, #28]	; (ba438 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   ba41c:	f7ff ffd8 	bl	ba3d0 <_ZN5Print6printfEPKcz>
  }
   ba420:	b002      	add	sp, #8
   ba422:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   ba424:	4a05      	ldr	r2, [pc, #20]	; (ba43c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   ba426:	e7ef      	b.n	ba408 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   ba428:	000c2041 	.word	0x000c2041
   ba42c:	000c2508 	.word	0x000c2508
   ba430:	000c203d 	.word	0x000c203d
   ba434:	000c2039 	.word	0x000c2039
   ba438:	000c2057 	.word	0x000c2057
   ba43c:	000c2030 	.word	0x000c2030

000ba440 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   ba440:	b510      	push	{r4, lr}
   ba442:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   ba444:	f7ff ffb2 	bl	ba3ac <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   ba448:	4b05      	ldr	r3, [pc, #20]	; (ba460 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   ba44a:	6023      	str	r3, [r4, #0]
  {
   ba44c:	4b05      	ldr	r3, [pc, #20]	; (ba464 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   ba44e:	60a3      	str	r3, [r4, #8]
   ba450:	2301      	movs	r3, #1
   ba452:	7323      	strb	r3, [r4, #12]
   ba454:	2300      	movs	r3, #0
   ba456:	6123      	str	r3, [r4, #16]
   ba458:	82a3      	strh	r3, [r4, #20]
{
}
   ba45a:	4620      	mov	r0, r4
   ba45c:	bd10      	pop	{r4, pc}
   ba45e:	bf00      	nop
   ba460:	000c2090 	.word	0x000c2090
   ba464:	000c207c 	.word	0x000c207c

000ba468 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   ba468:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   ba46a:	4c0b      	ldr	r4, [pc, #44]	; (ba498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   ba46c:	7821      	ldrb	r1, [r4, #0]
   ba46e:	f3bf 8f5b 	dmb	ish
   ba472:	f011 0101 	ands.w	r1, r1, #1
   ba476:	d10b      	bne.n	ba490 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   ba478:	4620      	mov	r0, r4
   ba47a:	9101      	str	r1, [sp, #4]
   ba47c:	f7f9 fe1e 	bl	b40bc <__cxa_guard_acquire>
   ba480:	9901      	ldr	r1, [sp, #4]
   ba482:	b128      	cbz	r0, ba490 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   ba484:	4805      	ldr	r0, [pc, #20]	; (ba49c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   ba486:	f004 fc1d 	bl	becc4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   ba48a:	4620      	mov	r0, r4
   ba48c:	f7f9 fe1b 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   ba490:	4802      	ldr	r0, [pc, #8]	; (ba49c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   ba492:	b002      	add	sp, #8
   ba494:	bd10      	pop	{r4, pc}
   ba496:	bf00      	nop
   ba498:	2003e44c 	.word	0x2003e44c
   ba49c:	2003e450 	.word	0x2003e450

000ba4a0 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   ba4a0:	b507      	push	{r0, r1, r2, lr}
   ba4a2:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   ba4a4:	f7ff ffe0 	bl	ba468 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   ba4a8:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   ba4aa:	b003      	add	sp, #12
   ba4ac:	f85d eb04 	ldr.w	lr, [sp], #4
   ba4b0:	f004 bcc0 	b.w	bee34 <_ZN8SPIClass8transferEh>

000ba4b4 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   ba4b4:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   ba4b6:	f7ff ffd7 	bl	ba468 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   ba4ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba4be:	f004 bcbf 	b.w	bee40 <_ZN8SPIClass15attachInterruptEv>

000ba4c2 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   ba4c2:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   ba4c4:	f7ff ffd0 	bl	ba468 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   ba4c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba4cc:	f004 bcb9 	b.w	bee42 <_ZN8SPIClass15detachInterruptEv>

000ba4d0 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   ba4d0:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   ba4d2:	7903      	ldrb	r3, [r0, #4]
   ba4d4:	2b04      	cmp	r3, #4
   ba4d6:	d020      	beq.n	ba51a <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   ba4d8:	2b03      	cmp	r3, #3
   ba4da:	d020      	beq.n	ba51e <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   ba4dc:	2b02      	cmp	r3, #2
   ba4de:	d020      	beq.n	ba522 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   ba4e0:	4a11      	ldr	r2, [pc, #68]	; (ba528 <_ZN13RHHardwareSPI5beginEv+0x58>)
   ba4e2:	4912      	ldr	r1, [pc, #72]	; (ba52c <_ZN13RHHardwareSPI5beginEv+0x5c>)
   ba4e4:	2b01      	cmp	r3, #1
   ba4e6:	bf18      	it	ne
   ba4e8:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   ba4ea:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   ba4ec:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   ba4ee:	3901      	subs	r1, #1
   ba4f0:	bf18      	it	ne
   ba4f2:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   ba4f4:	b133      	cbz	r3, ba504 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   ba4f6:	2b01      	cmp	r3, #1
   ba4f8:	d004      	beq.n	ba504 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   ba4fa:	2b02      	cmp	r3, #2
   ba4fc:	d002      	beq.n	ba504 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   ba4fe:	2b03      	cmp	r3, #3
   ba500:	bf18      	it	ne
   ba502:	2300      	movne	r3, #0
class SPISettings : public Printable {
   ba504:	2400      	movs	r4, #0
   ba506:	7304      	strb	r4, [r0, #12]
   ba508:	6102      	str	r2, [r0, #16]
   ba50a:	7501      	strb	r1, [r0, #20]
   ba50c:	7543      	strb	r3, [r0, #21]
        instance().begin();
   ba50e:	f7ff ffab 	bl	ba468 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   ba512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba516:	f004 bbdf 	b.w	becd8 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   ba51a:	4a05      	ldr	r2, [pc, #20]	; (ba530 <_ZN13RHHardwareSPI5beginEv+0x60>)
   ba51c:	e7e5      	b.n	ba4ea <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   ba51e:	4a05      	ldr	r2, [pc, #20]	; (ba534 <_ZN13RHHardwareSPI5beginEv+0x64>)
   ba520:	e7e3      	b.n	ba4ea <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   ba522:	4a05      	ldr	r2, [pc, #20]	; (ba538 <_ZN13RHHardwareSPI5beginEv+0x68>)
   ba524:	e7e1      	b.n	ba4ea <_ZN13RHHardwareSPI5beginEv+0x1a>
   ba526:	bf00      	nop
   ba528:	001e8480 	.word	0x001e8480
   ba52c:	000f4240 	.word	0x000f4240
   ba530:	00f42400 	.word	0x00f42400
   ba534:	007a1200 	.word	0x007a1200
   ba538:	003d0900 	.word	0x003d0900

000ba53c <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   ba53c:	b508      	push	{r3, lr}
        instance().end();
   ba53e:	f7ff ff93 	bl	ba468 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   ba542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba546:	f004 bbdb 	b.w	bed00 <_ZN8SPIClass3endEv>

000ba54a <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   ba54a:	b510      	push	{r4, lr}
   ba54c:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   ba54e:	f7ff ff8b 	bl	ba468 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   ba552:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   ba556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba55a:	f004 bbfd 	b.w	bed58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000ba55e <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   ba55e:	b508      	push	{r3, lr}
        instance().endTransaction();
   ba560:	f7ff ff82 	bl	ba468 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   ba564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba568:	f004 bbdc 	b.w	bed24 <_ZN8SPIClass14endTransactionEv>

000ba56c <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   ba56c:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   ba56e:	f7ff ff7b 	bl	ba468 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   ba572:	bd08      	pop	{r3, pc}

000ba574 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   ba574:	2300      	movs	r3, #0
   ba576:	4802      	ldr	r0, [pc, #8]	; (ba580 <_GLOBAL__sub_I_hardware_spi+0xc>)
   ba578:	461a      	mov	r2, r3
   ba57a:	4619      	mov	r1, r3
   ba57c:	f7ff bf60 	b.w	ba440 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   ba580:	2003e458 	.word	0x2003e458

000ba584 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   ba584:	2a01      	cmp	r2, #1
   ba586:	d105      	bne.n	ba594 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   ba588:	7a00      	ldrb	r0, [r0, #8]
   ba58a:	780b      	ldrb	r3, [r1, #0]
   ba58c:	1a1b      	subs	r3, r3, r0
   ba58e:	4258      	negs	r0, r3
   ba590:	4158      	adcs	r0, r3
   ba592:	4770      	bx	lr
   ba594:	2000      	movs	r0, #0
}
   ba596:	4770      	bx	lr

000ba598 <_ZN6RHMesh5doArpEh>:
{
   ba598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   ba59c:	4c25      	ldr	r4, [pc, #148]	; (ba634 <_ZN6RHMesh5doArpEh+0x9c>)
   ba59e:	2301      	movs	r3, #1
{
   ba5a0:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   ba5a2:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   ba5a4:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   ba5a6:	2300      	movs	r3, #0
{
   ba5a8:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   ba5aa:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   ba5ac:	9300      	str	r3, [sp, #0]
   ba5ae:	2203      	movs	r2, #3
   ba5b0:	23ff      	movs	r3, #255	; 0xff
   ba5b2:	4621      	mov	r1, r4
{
   ba5b4:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   ba5b6:	f000 fbb7 	bl	bad28 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   ba5ba:	b120      	cbz	r0, ba5c6 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   ba5bc:	2500      	movs	r5, #0
}
   ba5be:	4628      	mov	r0, r5
   ba5c0:	b006      	add	sp, #24
   ba5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   ba5c6:	237a      	movs	r3, #122	; 0x7a
   ba5c8:	f88d 3017 	strb.w	r3, [sp, #23]
   ba5cc:	f001 fd32 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   ba5d0:	f106 0904 	add.w	r9, r6, #4
   ba5d4:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   ba5d6:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   ba5da:	f001 fd2b 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
   ba5de:	1a29      	subs	r1, r5, r0
   ba5e0:	2900      	cmp	r1, #0
   ba5e2:	ddeb      	ble.n	ba5bc <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   ba5e4:	2200      	movs	r2, #0
   ba5e6:	b289      	uxth	r1, r1
   ba5e8:	4648      	mov	r0, r9
   ba5ea:	f7ff fdbe 	bl	ba16a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   ba5ee:	2800      	cmp	r0, #0
   ba5f0:	d0f3      	beq.n	ba5da <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   ba5f2:	2300      	movs	r3, #0
   ba5f4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   ba5f8:	e9cd 3300 	strd	r3, r3, [sp]
   ba5fc:	f10d 0217 	add.w	r2, sp, #23
   ba600:	4621      	mov	r1, r4
   ba602:	4630      	mov	r0, r6
   ba604:	f000 fb9a 	bl	bad3c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   ba608:	4605      	mov	r5, r0
   ba60a:	2800      	cmp	r0, #0
   ba60c:	d0e3      	beq.n	ba5d6 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   ba60e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   ba612:	2b01      	cmp	r3, #1
   ba614:	d9df      	bls.n	ba5d6 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   ba616:	f894 a000 	ldrb.w	sl, [r4]
   ba61a:	f1ba 0f02 	cmp.w	sl, #2
   ba61e:	d1da      	bne.n	ba5d6 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   ba620:	4648      	mov	r0, r9
   ba622:	f7ff fde7 	bl	ba1f4 <_ZN10RHDatagram10headerFromEv>
   ba626:	4653      	mov	r3, sl
   ba628:	4602      	mov	r2, r0
   ba62a:	4639      	mov	r1, r7
   ba62c:	4630      	mov	r0, r6
   ba62e:	f000 faf3 	bl	bac18 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   ba632:	e7c4      	b.n	ba5be <_ZN6RHMesh5doArpEh+0x26>
   ba634:	2003e470 	.word	0x2003e470

000ba638 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   ba638:	2a01      	cmp	r2, #1
{
   ba63a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   ba63e:	4607      	mov	r7, r0
   ba640:	460e      	mov	r6, r1
   ba642:	4614      	mov	r4, r2
    if (   messageLen > 1 
   ba644:	d93b      	bls.n	ba6be <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   ba646:	794d      	ldrb	r5, [r1, #5]
   ba648:	2d02      	cmp	r5, #2
   ba64a:	d130      	bne.n	ba6ae <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   ba64c:	f100 0804 	add.w	r8, r0, #4
   ba650:	79c9      	ldrb	r1, [r1, #7]
   ba652:	9101      	str	r1, [sp, #4]
   ba654:	4640      	mov	r0, r8
   ba656:	f7ff fdcd 	bl	ba1f4 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   ba65a:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   ba65c:	462b      	mov	r3, r5
   ba65e:	4602      	mov	r2, r0
   ba660:	9901      	ldr	r1, [sp, #4]
   ba662:	4638      	mov	r0, r7
   ba664:	f000 fad8 	bl	bac18 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   ba668:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   ba66a:	f106 0308 	add.w	r3, r6, #8
   ba66e:	2400      	movs	r4, #0
   ba670:	4622      	mov	r2, r4
   ba672:	4295      	cmp	r5, r2
   ba674:	f104 0401 	add.w	r4, r4, #1
   ba678:	b2e4      	uxtb	r4, r4
   ba67a:	d904      	bls.n	ba686 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   ba67c:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba680:	7a39      	ldrb	r1, [r7, #8]
   ba682:	4291      	cmp	r1, r2
   ba684:	d1f4      	bne.n	ba670 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   ba686:	f104 0108 	add.w	r1, r4, #8
   ba68a:	440e      	add	r6, r1
	while (i < numRoutes)
   ba68c:	42a5      	cmp	r5, r4
   ba68e:	d916      	bls.n	ba6be <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   ba690:	f816 1b01 	ldrb.w	r1, [r6], #1
   ba694:	9101      	str	r1, [sp, #4]
   ba696:	4640      	mov	r0, r8
   ba698:	f7ff fdac 	bl	ba1f4 <_ZN10RHDatagram10headerFromEv>
   ba69c:	3401      	adds	r4, #1
   ba69e:	4602      	mov	r2, r0
   ba6a0:	9901      	ldr	r1, [sp, #4]
   ba6a2:	2302      	movs	r3, #2
   ba6a4:	4638      	mov	r0, r7
   ba6a6:	b2e4      	uxtb	r4, r4
   ba6a8:	f000 fab6 	bl	bac18 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   ba6ac:	e7ee      	b.n	ba68c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   ba6ae:	2d03      	cmp	r5, #3
   ba6b0:	d105      	bne.n	ba6be <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   ba6b2:	7989      	ldrb	r1, [r1, #6]
}
   ba6b4:	b002      	add	sp, #8
   ba6b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   ba6ba:	f000 ba96 	b.w	babea <_ZN8RHRouter13deleteRouteToEh>
}
   ba6be:	b002      	add	sp, #8
   ba6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba6c4 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   ba6c4:	b510      	push	{r4, lr}
   ba6c6:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   ba6c8:	f000 fae6 	bl	bac98 <_ZN8RHRouterC1ER15RHGenericDriverh>
   ba6cc:	4b01      	ldr	r3, [pc, #4]	; (ba6d4 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   ba6ce:	6023      	str	r3, [r4, #0]
}
   ba6d0:	4620      	mov	r0, r4
   ba6d2:	bd10      	pop	{r4, pc}
   ba6d4:	000c20c4 	.word	0x000c20c4

000ba6d8 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   ba6d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   ba6dc:	2a79      	cmp	r2, #121	; 0x79
{
   ba6de:	f89d 9020 	ldrb.w	r9, [sp, #32]
   ba6e2:	4606      	mov	r6, r0
   ba6e4:	460f      	mov	r7, r1
   ba6e6:	4614      	mov	r4, r2
   ba6e8:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   ba6ea:	d825      	bhi.n	ba738 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   ba6ec:	2bff      	cmp	r3, #255	; 0xff
   ba6ee:	d114      	bne.n	ba71a <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   ba6f0:	f8df 8048 	ldr.w	r8, [pc, #72]	; ba73c <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   ba6f4:	4640      	mov	r0, r8
   ba6f6:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   ba6f8:	4622      	mov	r2, r4
   ba6fa:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   ba6fc:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   ba700:	f005 ff78 	bl	c05f4 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   ba704:	1c62      	adds	r2, r4, #1
   ba706:	f8cd 9020 	str.w	r9, [sp, #32]
   ba70a:	462b      	mov	r3, r5
   ba70c:	4641      	mov	r1, r8
   ba70e:	4630      	mov	r0, r6
   ba710:	b2d2      	uxtb	r2, r2
}
   ba712:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   ba716:	f000 bb07 	b.w	bad28 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   ba71a:	4619      	mov	r1, r3
   ba71c:	f000 fa21 	bl	bab62 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   ba720:	2800      	cmp	r0, #0
   ba722:	d1e5      	bne.n	ba6f0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   ba724:	6833      	ldr	r3, [r6, #0]
   ba726:	4629      	mov	r1, r5
   ba728:	689b      	ldr	r3, [r3, #8]
   ba72a:	4630      	mov	r0, r6
   ba72c:	4798      	blx	r3
   ba72e:	2800      	cmp	r0, #0
   ba730:	d1de      	bne.n	ba6f0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   ba732:	2002      	movs	r0, #2
}
   ba734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   ba738:	2001      	movs	r0, #1
   ba73a:	e7fb      	b.n	ba734 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   ba73c:	2003e470 	.word	0x2003e470

000ba740 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   ba740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba744:	b089      	sub	sp, #36	; 0x24
   ba746:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   ba748:	237a      	movs	r3, #122	; 0x7a
   ba74a:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   ba74e:	f10d 031f 	add.w	r3, sp, #31
   ba752:	9303      	str	r3, [sp, #12]
   ba754:	f10d 031e 	add.w	r3, sp, #30
   ba758:	9302      	str	r3, [sp, #8]
   ba75a:	4e5d      	ldr	r6, [pc, #372]	; (ba8d0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   ba75c:	f10d 031d 	add.w	r3, sp, #29
   ba760:	9301      	str	r3, [sp, #4]
   ba762:	ab07      	add	r3, sp, #28
   ba764:	9300      	str	r3, [sp, #0]
{     
   ba766:	4689      	mov	r9, r1
   ba768:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   ba76a:	f10d 031b 	add.w	r3, sp, #27
   ba76e:	f10d 021a 	add.w	r2, sp, #26
   ba772:	4631      	mov	r1, r6
{     
   ba774:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   ba778:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   ba77a:	f000 fadf 	bl	bad3c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   ba77e:	4604      	mov	r4, r0
   ba780:	b920      	cbnz	r0, ba78c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   ba782:	2400      	movs	r4, #0
}
   ba784:	4620      	mov	r0, r4
   ba786:	b009      	add	sp, #36	; 0x24
   ba788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   ba78c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   ba790:	b373      	cbz	r3, ba7f0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   ba792:	7832      	ldrb	r2, [r6, #0]
   ba794:	bb62      	cbnz	r2, ba7f0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   ba796:	f1b8 0f00 	cmp.w	r8, #0
   ba79a:	d003      	beq.n	ba7a4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   ba79c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   ba7a0:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   ba7a4:	f1bb 0f00 	cmp.w	fp, #0
   ba7a8:	d003      	beq.n	ba7b2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   ba7aa:	f89d 201c 	ldrb.w	r2, [sp, #28]
   ba7ae:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   ba7b2:	f1ba 0f00 	cmp.w	sl, #0
   ba7b6:	d003      	beq.n	ba7c0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   ba7b8:	f89d 201d 	ldrb.w	r2, [sp, #29]
   ba7bc:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   ba7c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba7c2:	b11a      	cbz	r2, ba7cc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   ba7c4:	9914      	ldr	r1, [sp, #80]	; 0x50
   ba7c6:	f89d 201e 	ldrb.w	r2, [sp, #30]
   ba7ca:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   ba7cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   ba7ce:	b11a      	cbz	r2, ba7d8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   ba7d0:	9915      	ldr	r1, [sp, #84]	; 0x54
   ba7d2:	f89d 201f 	ldrb.w	r2, [sp, #31]
   ba7d6:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   ba7d8:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   ba7da:	493e      	ldr	r1, [pc, #248]	; (ba8d4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   ba7dc:	3b01      	subs	r3, #1
   ba7de:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   ba7e0:	429a      	cmp	r2, r3
		*len = msgLen;
   ba7e2:	bf88      	it	hi
   ba7e4:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   ba7e6:	783a      	ldrb	r2, [r7, #0]
   ba7e8:	4648      	mov	r0, r9
   ba7ea:	f005 ff03 	bl	c05f4 <memcpy>
	    return true;
   ba7ee:	e7c9      	b.n	ba784 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   ba7f0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   ba7f4:	2aff      	cmp	r2, #255	; 0xff
   ba7f6:	d1c4      	bne.n	ba782 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   ba7f8:	2b01      	cmp	r3, #1
   ba7fa:	d9c2      	bls.n	ba782 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   ba7fc:	7832      	ldrb	r2, [r6, #0]
   ba7fe:	2a01      	cmp	r2, #1
   ba800:	d1bf      	bne.n	ba782 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   ba802:	7a2a      	ldrb	r2, [r5, #8]
   ba804:	f89d 401b 	ldrb.w	r4, [sp, #27]
   ba808:	42a2      	cmp	r2, r4
   ba80a:	d0ba      	beq.n	ba782 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   ba80c:	1edf      	subs	r7, r3, #3
   ba80e:	4932      	ldr	r1, [pc, #200]	; (ba8d8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   ba810:	b2ff      	uxtb	r7, r7
   ba812:	2300      	movs	r3, #0
   ba814:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   ba818:	4547      	cmp	r7, r8
   ba81a:	d906      	bls.n	ba82a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   ba81c:	f811 0b01 	ldrb.w	r0, [r1], #1
   ba820:	4282      	cmp	r2, r0
   ba822:	f103 0301 	add.w	r3, r3, #1
   ba826:	d1f5      	bne.n	ba814 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   ba828:	e7ab      	b.n	ba782 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   ba82a:	f105 0904 	add.w	r9, r5, #4
   ba82e:	4648      	mov	r0, r9
   ba830:	f7ff fce0 	bl	ba1f4 <_ZN10RHDatagram10headerFromEv>
   ba834:	2302      	movs	r3, #2
   ba836:	4602      	mov	r2, r0
   ba838:	4621      	mov	r1, r4
   ba83a:	4628      	mov	r0, r5
   ba83c:	f000 f9ec 	bl	bac18 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   ba840:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   ba844:	b193      	cbz	r3, ba86c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   ba846:	4c22      	ldr	r4, [pc, #136]	; (ba8d0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   ba848:	1ba3      	subs	r3, r4, r6
   ba84a:	b2db      	uxtb	r3, r3
   ba84c:	429f      	cmp	r7, r3
   ba84e:	d90c      	bls.n	ba86a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   ba850:	78e1      	ldrb	r1, [r4, #3]
   ba852:	9105      	str	r1, [sp, #20]
   ba854:	4648      	mov	r0, r9
   ba856:	f7ff fccd 	bl	ba1f4 <_ZN10RHDatagram10headerFromEv>
   ba85a:	9905      	ldr	r1, [sp, #20]
   ba85c:	4602      	mov	r2, r0
   ba85e:	2302      	movs	r3, #2
   ba860:	4628      	mov	r0, r5
   ba862:	f000 f9d9 	bl	bac18 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   ba866:	3401      	adds	r4, #1
   ba868:	e7ee      	b.n	ba848 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   ba86a:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   ba86c:	682b      	ldr	r3, [r5, #0]
   ba86e:	7872      	ldrb	r2, [r6, #1]
   ba870:	68db      	ldr	r3, [r3, #12]
   ba872:	491a      	ldr	r1, [pc, #104]	; (ba8dc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   ba874:	4628      	mov	r0, r5
   ba876:	4798      	blx	r3
   ba878:	4604      	mov	r4, r0
   ba87a:	b160      	cbz	r0, ba896 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   ba87c:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   ba87e:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   ba880:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   ba882:	f89d 201a 	ldrb.w	r2, [sp, #26]
   ba886:	f89d 301b 	ldrb.w	r3, [sp, #27]
   ba88a:	4911      	ldr	r1, [pc, #68]	; (ba8d0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   ba88c:	9400      	str	r4, [sp, #0]
   ba88e:	4628      	mov	r0, r5
   ba890:	f000 fa4a 	bl	bad28 <_ZN8RHRouter10sendtoWaitEPhhhh>
   ba894:	e776      	b.n	ba784 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   ba896:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   ba89a:	4543      	cmp	r3, r8
   ba89c:	f67f af71 	bls.w	ba782 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   ba8a0:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   ba8a4:	2b00      	cmp	r3, #0
   ba8a6:	f43f af6c 	beq.w	ba782 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   ba8aa:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   ba8ae:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   ba8b0:	4907      	ldr	r1, [pc, #28]	; (ba8d0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   ba8b2:	443e      	add	r6, r7
		tmpMessageLen++;
   ba8b4:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   ba8b6:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   ba8b8:	f89d 301b 	ldrb.w	r3, [sp, #27]
   ba8bc:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   ba8be:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   ba8c0:	9300      	str	r3, [sp, #0]
   ba8c2:	4628      	mov	r0, r5
   ba8c4:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   ba8c6:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   ba8ca:	f000 f9f7 	bl	bacbc <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   ba8ce:	e759      	b.n	ba784 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   ba8d0:	2003e470 	.word	0x2003e470
   ba8d4:	2003e471 	.word	0x2003e471
   ba8d8:	2003e473 	.word	0x2003e473
   ba8dc:	2003e472 	.word	0x2003e472

000ba8e0 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   ba8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba8e2:	b085      	sub	sp, #20
   ba8e4:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   ba8e6:	3004      	adds	r0, #4
{
   ba8e8:	460e      	mov	r6, r1
   ba8ea:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   ba8ec:	f7ff fc82 	bl	ba1f4 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   ba8f0:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   ba8f2:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   ba8f4:	4631      	mov	r1, r6
   ba8f6:	4628      	mov	r0, r5
   ba8f8:	f000 f94a 	bl	bab90 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   ba8fc:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   ba8fe:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   ba900:	d001      	beq.n	ba906 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   ba902:	2805      	cmp	r0, #5
   ba904:	d11b      	bne.n	ba93e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   ba906:	7831      	ldrb	r1, [r6, #0]
   ba908:	4628      	mov	r0, r5
   ba90a:	f000 f96e 	bl	babea <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   ba90e:	7872      	ldrb	r2, [r6, #1]
   ba910:	7a2b      	ldrb	r3, [r5, #8]
   ba912:	429a      	cmp	r2, r3
   ba914:	d013      	beq.n	ba93e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   ba916:	4c0b      	ldr	r4, [pc, #44]	; (ba944 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   ba918:	2303      	movs	r3, #3
   ba91a:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   ba91c:	7833      	ldrb	r3, [r6, #0]
   ba91e:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   ba920:	7871      	ldrb	r1, [r6, #1]
   ba922:	2302      	movs	r3, #2
   ba924:	463a      	mov	r2, r7
   ba926:	4628      	mov	r0, r5
   ba928:	f000 f976 	bl	bac18 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   ba92c:	2300      	movs	r3, #0
   ba92e:	9300      	str	r3, [sp, #0]
   ba930:	4621      	mov	r1, r4
   ba932:	7873      	ldrb	r3, [r6, #1]
   ba934:	2202      	movs	r2, #2
   ba936:	4628      	mov	r0, r5
   ba938:	f000 f9f6 	bl	bad28 <_ZN8RHRouter10sendtoWaitEPhhhh>
   ba93c:	4604      	mov	r4, r0
}
   ba93e:	4620      	mov	r0, r4
   ba940:	b005      	add	sp, #20
   ba942:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba944:	2003e470 	.word	0x2003e470

000ba948 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   ba948:	b510      	push	{r4, lr}
   ba94a:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   ba94c:	f7ff fc02 	bl	ba154 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   ba950:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   ba952:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   ba954:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   ba956:	2303      	movs	r3, #3
    _retransmissions = 0;
   ba958:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   ba95a:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   ba95c:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   ba95e:	f44f 7280 	mov.w	r2, #256	; 0x100
   ba962:	f104 0011 	add.w	r0, r4, #17
   ba966:	f005 fe6d 	bl	c0644 <memset>
}
   ba96a:	4620      	mov	r0, r4
   ba96c:	bd10      	pop	{r4, pc}

000ba96e <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   ba96e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba970:	4604      	mov	r4, r0
   ba972:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   ba974:	f7ff fc32 	bl	ba1dc <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   ba978:	4620      	mov	r0, r4
   ba97a:	2200      	movs	r2, #0
   ba97c:	2180      	movs	r1, #128	; 0x80
   ba97e:	f7ff fc31 	bl	ba1e4 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   ba982:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   ba984:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   ba986:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   ba98a:	f10d 010f 	add.w	r1, sp, #15
   ba98e:	2201      	movs	r2, #1
   ba990:	4620      	mov	r0, r4
   ba992:	f7ff fbf4 	bl	ba17e <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   ba996:	4620      	mov	r0, r4
   ba998:	f7ff fbe3 	bl	ba162 <_ZN10RHDatagram14waitPacketSentEv>
}
   ba99c:	b004      	add	sp, #16
   ba99e:	bd10      	pop	{r4, pc}

000ba9a0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   ba9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   ba9a4:	7b05      	ldrb	r5, [r0, #12]
   ba9a6:	3501      	adds	r5, #1
   ba9a8:	b2ed      	uxtb	r5, r5
{
   ba9aa:	b087      	sub	sp, #28
   ba9ac:	4604      	mov	r4, r0
   ba9ae:	4689      	mov	r9, r1
   ba9b0:	4692      	mov	sl, r2
   ba9b2:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   ba9b4:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   ba9b6:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   ba9b8:	7c22      	ldrb	r2, [r4, #16]
   ba9ba:	463b      	mov	r3, r7
   ba9bc:	429a      	cmp	r2, r3
   ba9be:	f107 0701 	add.w	r7, r7, #1
   ba9c2:	b2ff      	uxtb	r7, r7
   ba9c4:	d36b      	bcc.n	baa9e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   ba9c6:	4629      	mov	r1, r5
   ba9c8:	4620      	mov	r0, r4
   ba9ca:	f7ff fc07 	bl	ba1dc <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   ba9ce:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   ba9d0:	bf0d      	iteet	eq
   ba9d2:	22c0      	moveq	r2, #192	; 0xc0
   ba9d4:	2280      	movne	r2, #128	; 0x80
   ba9d6:	2140      	movne	r1, #64	; 0x40
   ba9d8:	2100      	moveq	r1, #0
   ba9da:	4620      	mov	r0, r4
   ba9dc:	f7ff fc02 	bl	ba1e4 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   ba9e0:	4643      	mov	r3, r8
   ba9e2:	4652      	mov	r2, sl
   ba9e4:	4649      	mov	r1, r9
   ba9e6:	4620      	mov	r0, r4
   ba9e8:	f7ff fbc9 	bl	ba17e <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   ba9ec:	4620      	mov	r0, r4
   ba9ee:	f7ff fbb8 	bl	ba162 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   ba9f2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   ba9f6:	d054      	beq.n	baaa2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   ba9f8:	2f01      	cmp	r7, #1
	    _retransmissions++;
   ba9fa:	bf82      	ittt	hi
   ba9fc:	68a3      	ldrhi	r3, [r4, #8]
   ba9fe:	3301      	addhi	r3, #1
   baa00:	60a3      	strhi	r3, [r4, #8]
   baa02:	f001 fb17 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   baa06:	f44f 7180 	mov.w	r1, #256	; 0x100
   baa0a:	4683      	mov	fp, r0
   baa0c:	2000      	movs	r0, #0
   baa0e:	89e6      	ldrh	r6, [r4, #14]
   baa10:	f004 f941 	bl	bec96 <_Z6randomii>
   baa14:	4370      	muls	r0, r6
   baa16:	bf48      	it	mi
   baa18:	30ff      	addmi	r0, #255	; 0xff
   baa1a:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   baa1e:	fa1b f686 	uxtah	r6, fp, r6
   baa22:	f001 fb07 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
   baa26:	1a30      	subs	r0, r6, r0
   baa28:	2800      	cmp	r0, #0
   baa2a:	ddc5      	ble.n	ba9b8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   baa2c:	b281      	uxth	r1, r0
   baa2e:	2200      	movs	r2, #0
   baa30:	4620      	mov	r0, r4
   baa32:	f7ff fb9a 	bl	ba16a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   baa36:	2800      	cmp	r0, #0
   baa38:	d0f3      	beq.n	baa22 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   baa3a:	f10d 0317 	add.w	r3, sp, #23
   baa3e:	9302      	str	r3, [sp, #8]
   baa40:	f10d 0316 	add.w	r3, sp, #22
   baa44:	9301      	str	r3, [sp, #4]
   baa46:	2200      	movs	r2, #0
   baa48:	f10d 0315 	add.w	r3, sp, #21
   baa4c:	9300      	str	r3, [sp, #0]
   baa4e:	4611      	mov	r1, r2
   baa50:	ab05      	add	r3, sp, #20
   baa52:	4620      	mov	r0, r4
   baa54:	f7ff fbda 	bl	ba20c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   baa58:	2800      	cmp	r0, #0
   baa5a:	d0e2      	beq.n	baa22 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   baa5c:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   baa60:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   baa64:	4542      	cmp	r2, r8
   baa66:	d10e      	bne.n	baa86 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   baa68:	f894 c004 	ldrb.w	ip, [r4, #4]
   baa6c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   baa70:	458c      	cmp	ip, r1
   baa72:	d108      	bne.n	baa86 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   baa74:	2b00      	cmp	r3, #0
   baa76:	da08      	bge.n	baa8a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   baa78:	f89d 3016 	ldrb.w	r3, [sp, #22]
   baa7c:	42ab      	cmp	r3, r5
   baa7e:	d1d0      	bne.n	baa22 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   baa80:	b007      	add	sp, #28
   baa82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   baa86:	2b00      	cmp	r3, #0
   baa88:	dbcb      	blt.n	baa22 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   baa8a:	18a1      	adds	r1, r4, r2
   baa8c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   baa90:	7c49      	ldrb	r1, [r1, #17]
   baa92:	4299      	cmp	r1, r3
   baa94:	d1c5      	bne.n	baa22 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   baa96:	4620      	mov	r0, r4
   baa98:	f7ff ff69 	bl	ba96e <_ZN18RHReliableDatagram11acknowledgeEhh>
   baa9c:	e7c1      	b.n	baa22 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   baa9e:	2000      	movs	r0, #0
   baaa0:	e7ee      	b.n	baa80 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   baaa2:	2001      	movs	r0, #1
   baaa4:	e7ec      	b.n	baa80 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000baaa6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   baaa6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   baaaa:	b089      	sub	sp, #36	; 0x24
   baaac:	e9cd 2104 	strd	r2, r1, [sp, #16]
   baab0:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   baab4:	9f12      	ldr	r7, [sp, #72]	; 0x48
   baab6:	4604      	mov	r4, r0
   baab8:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   baaba:	f7ff fb4e 	bl	ba15a <_ZN10RHDatagram9availableEv>
   baabe:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   baac2:	b920      	cbnz	r0, baace <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   baac4:	2500      	movs	r5, #0
}
   baac6:	4628      	mov	r0, r5
   baac8:	b009      	add	sp, #36	; 0x24
   baaca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   baace:	f10d 031f 	add.w	r3, sp, #31
   baad2:	9302      	str	r3, [sp, #8]
   baad4:	f10d 031e 	add.w	r3, sp, #30
   baad8:	9301      	str	r3, [sp, #4]
   baada:	f10d 031d 	add.w	r3, sp, #29
   baade:	9300      	str	r3, [sp, #0]
   baae0:	4620      	mov	r0, r4
   baae2:	ab07      	add	r3, sp, #28
   baae4:	f7ff fb92 	bl	ba20c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   baae8:	4605      	mov	r5, r0
   baaea:	2800      	cmp	r0, #0
   baaec:	d0ea      	beq.n	baac4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   baaee:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   baaf2:	2b00      	cmp	r3, #0
   baaf4:	dbe6      	blt.n	baac4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   baaf6:	7922      	ldrb	r2, [r4, #4]
   baaf8:	f89d 301d 	ldrb.w	r3, [sp, #29]
   baafc:	429a      	cmp	r2, r3
   baafe:	d106      	bne.n	bab0e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   bab00:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bab04:	f89d 101e 	ldrb.w	r1, [sp, #30]
   bab08:	4620      	mov	r0, r4
   bab0a:	f7ff ff30 	bl	ba96e <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   bab0e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   bab12:	f89d 101c 	ldrb.w	r1, [sp, #28]
   bab16:	f89d 301e 	ldrb.w	r3, [sp, #30]
   bab1a:	f012 0f40 	tst.w	r2, #64	; 0x40
   bab1e:	440c      	add	r4, r1
   bab20:	d002      	beq.n	bab28 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   bab22:	7c60      	ldrb	r0, [r4, #17]
   bab24:	4298      	cmp	r0, r3
   bab26:	d0cd      	beq.n	baac4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   bab28:	b106      	cbz	r6, bab2c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   bab2a:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   bab2c:	f1b9 0f00 	cmp.w	r9, #0
   bab30:	d003      	beq.n	bab3a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   bab32:	f89d 101d 	ldrb.w	r1, [sp, #29]
   bab36:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   bab3a:	f1b8 0f00 	cmp.w	r8, #0
   bab3e:	d001      	beq.n	bab44 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   bab40:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   bab44:	b107      	cbz	r7, bab48 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   bab46:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   bab48:	7463      	strb	r3, [r4, #17]
		return true;
   bab4a:	e7bc      	b.n	baac6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000bab4c <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   bab4c:	4770      	bx	lr

000bab4e <_ZN8RHRouter4initEv>:
{
   bab4e:	b510      	push	{r4, lr}
   bab50:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   bab52:	3004      	adds	r0, #4
   bab54:	f7ff fb34 	bl	ba1c0 <_ZN10RHDatagram4initEv>
    if (ret)
   bab58:	b110      	cbz	r0, bab60 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   bab5a:	231e      	movs	r3, #30
   bab5c:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   bab60:	bd10      	pop	{r4, pc}

000bab62 <_ZN8RHRouter10getRouteToEh>:
{
   bab62:	b510      	push	{r4, lr}
   bab64:	4602      	mov	r2, r0
   bab66:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   bab68:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   bab6c:	428c      	cmp	r4, r1
   bab6e:	d108      	bne.n	bab82 <_ZN8RHRouter10getRouteToEh+0x20>
   bab70:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   bab74:	b12c      	cbz	r4, bab82 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   bab76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bab7a:	f503 738c 	add.w	r3, r3, #280	; 0x118
   bab7e:	4418      	add	r0, r3
}
   bab80:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bab82:	3301      	adds	r3, #1
   bab84:	2b32      	cmp	r3, #50	; 0x32
   bab86:	f102 0203 	add.w	r2, r2, #3
   bab8a:	d1ed      	bne.n	bab68 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   bab8c:	2000      	movs	r0, #0
   bab8e:	e7f7      	b.n	bab80 <_ZN8RHRouter10getRouteToEh+0x1e>

000bab90 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   bab90:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   bab92:	780b      	ldrb	r3, [r1, #0]
   bab94:	2bff      	cmp	r3, #255	; 0xff
{
   bab96:	4605      	mov	r5, r0
   bab98:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   bab9a:	d006      	beq.n	babaa <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   bab9c:	4619      	mov	r1, r3
   bab9e:	9201      	str	r2, [sp, #4]
   baba0:	f7ff ffdf 	bl	bab62 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   baba4:	b158      	cbz	r0, babbe <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   baba6:	7843      	ldrb	r3, [r0, #1]
   baba8:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   babaa:	4621      	mov	r1, r4
   babac:	1d28      	adds	r0, r5, #4
   babae:	f7ff fef7 	bl	ba9a0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   babb2:	2800      	cmp	r0, #0
   babb4:	bf14      	ite	ne
   babb6:	2000      	movne	r0, #0
   babb8:	2005      	moveq	r0, #5
}
   babba:	b003      	add	sp, #12
   babbc:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   babbe:	2002      	movs	r0, #2
   babc0:	e7fb      	b.n	babba <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000babc2 <_ZN8RHRouter11deleteRouteEh>:
{
   babc2:	b510      	push	{r4, lr}
   babc4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   babc8:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   babca:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   babce:	f503 708c 	add.w	r0, r3, #280	; 0x118
   babd2:	f203 111b 	addw	r1, r3, #283	; 0x11b
   babd6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   babda:	4421      	add	r1, r4
   babdc:	4420      	add	r0, r4
   babde:	f005 fd09 	bl	c05f4 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   babe2:	2300      	movs	r3, #0
   babe4:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   babe8:	bd10      	pop	{r4, pc}

000babea <_ZN8RHRouter13deleteRouteToEh>:
{
   babea:	b538      	push	{r3, r4, r5, lr}
   babec:	460a      	mov	r2, r1
   babee:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   babf0:	f500 748c 	add.w	r4, r0, #280	; 0x118
   babf4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   babf8:	b2d9      	uxtb	r1, r3
   babfa:	5d65      	ldrb	r5, [r4, r5]
   babfc:	4295      	cmp	r5, r2
   babfe:	d103      	bne.n	bac08 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   bac00:	f7ff ffdf 	bl	babc2 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   bac04:	2001      	movs	r0, #1
}
   bac06:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bac08:	3301      	adds	r3, #1
   bac0a:	2b32      	cmp	r3, #50	; 0x32
   bac0c:	d1f2      	bne.n	babf4 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   bac0e:	2000      	movs	r0, #0
   bac10:	e7f9      	b.n	bac06 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000bac12 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   bac12:	2100      	movs	r1, #0
   bac14:	f7ff bfd5 	b.w	babc2 <_ZN8RHRouter11deleteRouteEh>

000bac18 <_ZN8RHRouter10addRouteToEhhh>:
{
   bac18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bac1a:	4616      	mov	r6, r2
   bac1c:	461f      	mov	r7, r3
   bac1e:	4604      	mov	r4, r0
   bac20:	460d      	mov	r5, r1
   bac22:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   bac24:	f500 728c 	add.w	r2, r0, #280	; 0x118
   bac28:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   bac2c:	5c11      	ldrb	r1, [r2, r0]
   bac2e:	42a9      	cmp	r1, r5
   bac30:	d105      	bne.n	bac3e <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   bac32:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   bac34:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   bac38:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   bac3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bac3e:	3301      	adds	r3, #1
   bac40:	2b32      	cmp	r3, #50	; 0x32
   bac42:	d1f1      	bne.n	bac28 <_ZN8RHRouter10addRouteToEhhh+0x10>
   bac44:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   bac46:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   bac4a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   bac4e:	5c11      	ldrb	r1, [r2, r0]
   bac50:	b919      	cbnz	r1, bac5a <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   bac52:	4420      	add	r0, r4
   bac54:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   bac58:	e7ec      	b.n	bac34 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bac5a:	3301      	adds	r3, #1
   bac5c:	2b32      	cmp	r3, #50	; 0x32
   bac5e:	d1f4      	bne.n	bac4a <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   bac60:	4620      	mov	r0, r4
   bac62:	f7ff ffd6 	bl	bac12 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bac66:	4620      	mov	r0, r4
   bac68:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   bac6c:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   bac70:	b92a      	cbnz	r2, bac7e <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   bac72:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   bac76:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   bac7a:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bac7e:	3003      	adds	r0, #3
   bac80:	4298      	cmp	r0, r3
   bac82:	d1f3      	bne.n	bac6c <_ZN8RHRouter10addRouteToEhhh+0x54>
   bac84:	e7da      	b.n	bac3c <_ZN8RHRouter10addRouteToEhhh+0x24>

000bac86 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bac86:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   bac8a:	2200      	movs	r2, #0
   bac8c:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bac90:	3003      	adds	r0, #3
   bac92:	4298      	cmp	r0, r3
   bac94:	d1fa      	bne.n	bac8c <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   bac96:	4770      	bx	lr

000bac98 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   bac98:	b510      	push	{r4, lr}
   bac9a:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   bac9c:	3004      	adds	r0, #4
   bac9e:	f7ff fe53 	bl	ba948 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   baca2:	4b05      	ldr	r3, [pc, #20]	; (bacb8 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   baca4:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   baca6:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   bacaa:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   bacac:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   bacb0:	f7ff ffe9 	bl	bac86 <_ZN8RHRouter17clearRoutingTableEv>
}
   bacb4:	4620      	mov	r0, r4
   bacb6:	bd10      	pop	{r4, pc}
   bacb8:	000c20dc 	.word	0x000c20dc

000bacbc <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   bacbc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bacc0:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bacc2:	6840      	ldr	r0, [r0, #4]
{
   bacc4:	9101      	str	r1, [sp, #4]
   bacc6:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bacc8:	6803      	ldr	r3, [r0, #0]
{
   bacca:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bacce:	699b      	ldr	r3, [r3, #24]
{
   bacd0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   bacd4:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bacd6:	4798      	blx	r3
   bacd8:	f106 0805 	add.w	r8, r6, #5
   bacdc:	4580      	cmp	r8, r0
   bacde:	d81c      	bhi.n	bad1a <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   bace0:	4d10      	ldr	r5, [pc, #64]	; (bad24 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   bace2:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   bace4:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   bace8:	2300      	movs	r3, #0
   bacea:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   bacec:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   bacf0:	70eb      	strb	r3, [r5, #3]
   bacf2:	1c5a      	adds	r2, r3, #1
   bacf4:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   bacf8:	1d68      	adds	r0, r5, #5
   bacfa:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   bacfc:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   bacfe:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   bad02:	f005 fc77 	bl	c05f4 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   bad06:	6823      	ldr	r3, [r4, #0]
   bad08:	685b      	ldr	r3, [r3, #4]
   bad0a:	fa5f f288 	uxtb.w	r2, r8
   bad0e:	4629      	mov	r1, r5
   bad10:	4620      	mov	r0, r4
}
   bad12:	b002      	add	sp, #8
   bad14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   bad18:	4718      	bx	r3
}
   bad1a:	2001      	movs	r0, #1
   bad1c:	b002      	add	sp, #8
   bad1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bad22:	bf00      	nop
   bad24:	2003e4ea 	.word	0x2003e4ea

000bad28 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   bad28:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   bad2a:	f89d 4010 	ldrb.w	r4, [sp, #16]
   bad2e:	9401      	str	r4, [sp, #4]
   bad30:	7a04      	ldrb	r4, [r0, #8]
   bad32:	9400      	str	r4, [sp, #0]
   bad34:	f7ff ffc2 	bl	bacbc <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   bad38:	b002      	add	sp, #8
   bad3a:	bd10      	pop	{r4, pc}

000bad3c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   bad3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bad40:	b087      	sub	sp, #28
   bad42:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   bad44:	237f      	movs	r3, #127	; 0x7f
   bad46:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bad4a:	f10d 0317 	add.w	r3, sp, #23
   bad4e:	9302      	str	r3, [sp, #8]
   bad50:	f8df 90d0 	ldr.w	r9, [pc, #208]	; bae24 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   bad54:	f10d 0316 	add.w	r3, sp, #22
   bad58:	9301      	str	r3, [sp, #4]
   bad5a:	f10d 0315 	add.w	r3, sp, #21
   bad5e:	9300      	str	r3, [sp, #0]
{  
   bad60:	4604      	mov	r4, r0
   bad62:	4688      	mov	r8, r1
   bad64:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bad66:	ab05      	add	r3, sp, #20
   bad68:	f10d 0213 	add.w	r2, sp, #19
   bad6c:	4649      	mov	r1, r9
   bad6e:	3004      	adds	r0, #4
{  
   bad70:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bad74:	f7ff fe97 	bl	baaa6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   bad78:	4605      	mov	r5, r0
   bad7a:	b908      	cbnz	r0, bad80 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   bad7c:	2500      	movs	r5, #0
   bad7e:	e038      	b.n	badf2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   bad80:	6823      	ldr	r3, [r4, #0]
   bad82:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bad86:	681b      	ldr	r3, [r3, #0]
   bad88:	4649      	mov	r1, r9
   bad8a:	4620      	mov	r0, r4
   bad8c:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   bad8e:	f899 3000 	ldrb.w	r3, [r9]
   bad92:	7a22      	ldrb	r2, [r4, #8]
   bad94:	429a      	cmp	r2, r3
   bad96:	d001      	beq.n	bad9c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   bad98:	2bff      	cmp	r3, #255	; 0xff
   bad9a:	d12e      	bne.n	badfa <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   bad9c:	b117      	cbz	r7, bada4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   bad9e:	4b21      	ldr	r3, [pc, #132]	; (bae24 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bada0:	785b      	ldrb	r3, [r3, #1]
   bada2:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   bada4:	f1bb 0f00 	cmp.w	fp, #0
   bada8:	d003      	beq.n	badb2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   badaa:	4b1e      	ldr	r3, [pc, #120]	; (bae24 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   badac:	781b      	ldrb	r3, [r3, #0]
   badae:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   badb2:	f1ba 0f00 	cmp.w	sl, #0
   badb6:	d003      	beq.n	badc0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   badb8:	4b1a      	ldr	r3, [pc, #104]	; (bae24 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   badba:	78db      	ldrb	r3, [r3, #3]
   badbc:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   badc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   badc2:	b11b      	cbz	r3, badcc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   badc4:	4b17      	ldr	r3, [pc, #92]	; (bae24 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   badc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   badc8:	791b      	ldrb	r3, [r3, #4]
   badca:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   badcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   badce:	b11b      	cbz	r3, badd8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   badd0:	4b14      	ldr	r3, [pc, #80]	; (bae24 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   badd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   badd4:	789b      	ldrb	r3, [r3, #2]
   badd6:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   badd8:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   baddc:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   badde:	4912      	ldr	r1, [pc, #72]	; (bae28 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   bade0:	3b05      	subs	r3, #5
   bade2:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   bade4:	429a      	cmp	r2, r3
		*len = msgLen;
   bade6:	bf88      	it	hi
   bade8:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   badea:	7832      	ldrb	r2, [r6, #0]
   badec:	4640      	mov	r0, r8
   badee:	f005 fc01 	bl	c05f4 <memcpy>
}
   badf2:	4628      	mov	r0, r5
   badf4:	b007      	add	sp, #28
   badf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   badfa:	f899 3002 	ldrb.w	r3, [r9, #2]
   badfe:	1c5a      	adds	r2, r3, #1
   bae00:	f889 2002 	strb.w	r2, [r9, #2]
   bae04:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   bae08:	429a      	cmp	r2, r3
   bae0a:	d9b7      	bls.n	bad7c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   bae0c:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   bae10:	2b00      	cmp	r3, #0
   bae12:	d0b3      	beq.n	bad7c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   bae14:	6823      	ldr	r3, [r4, #0]
   bae16:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bae1a:	685b      	ldr	r3, [r3, #4]
   bae1c:	4649      	mov	r1, r9
   bae1e:	4620      	mov	r0, r4
   bae20:	4798      	blx	r3
   bae22:	e7ab      	b.n	bad7c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   bae24:	2003e4ea 	.word	0x2003e4ea
   bae28:	2003e4ef 	.word	0x2003e4ef

000bae2c <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   bae2c:	b510      	push	{r4, lr}
   bae2e:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   bae30:	6a00      	ldr	r0, [r0, #32]
   bae32:	6803      	ldr	r3, [r0, #0]
   bae34:	68db      	ldr	r3, [r3, #12]
   bae36:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   bae38:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   bae3c:	28ff      	cmp	r0, #255	; 0xff
   bae3e:	d002      	beq.n	bae46 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   bae40:	2101      	movs	r1, #1
   bae42:	f004 fdb1 	bl	bf9a8 <pinMode>

    deselectSlave();
   bae46:	6823      	ldr	r3, [r4, #0]
   bae48:	4620      	mov	r0, r4
   bae4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bae4c:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   bae4e:	2064      	movs	r0, #100	; 0x64
   bae50:	f001 fd04 	bl	bc85c <delay>
#endif
    
    return true;
}
   bae54:	2001      	movs	r0, #1
   bae56:	bd10      	pop	{r4, pc}

000bae58 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   bae58:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bae5c:	2100      	movs	r1, #0
   bae5e:	f004 bdb4 	b.w	bf9ca <digitalWrite>

000bae62 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   bae62:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bae66:	2101      	movs	r1, #1
   bae68:	f004 bdaf 	b.w	bf9ca <digitalWrite>

000bae6c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   bae6c:	b570      	push	{r4, r5, r6, lr}
   bae6e:	4604      	mov	r4, r0
   bae70:	460d      	mov	r5, r1
   bae72:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   bae74:	f7ff fa7e 	bl	ba374 <_ZN15RHGenericDriverC1Ev>
   bae78:	4b03      	ldr	r3, [pc, #12]	; (bae88 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   bae7a:	6023      	str	r3, [r4, #0]
   bae7c:	6226      	str	r6, [r4, #32]
   bae7e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   bae82:	4620      	mov	r0, r4
   bae84:	bd70      	pop	{r4, r5, r6, pc}
   bae86:	bf00      	nop
   bae88:	000c20ec 	.word	0x000c20ec

000bae8c <_ZN11RHSPIDriver7spiReadEh>:
{
   bae8c:	b538      	push	{r3, r4, r5, lr}
   bae8e:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bae90:	6a00      	ldr	r0, [r0, #32]
   bae92:	6803      	ldr	r3, [r0, #0]
   bae94:	6a1b      	ldr	r3, [r3, #32]
{
   bae96:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bae98:	4798      	blx	r3
    selectSlave();
   bae9a:	6823      	ldr	r3, [r4, #0]
   bae9c:	4620      	mov	r0, r4
   bae9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   baea0:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   baea2:	6a20      	ldr	r0, [r4, #32]
   baea4:	6803      	ldr	r3, [r0, #0]
   baea6:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   baeaa:	681b      	ldr	r3, [r3, #0]
   baeac:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   baeae:	6a20      	ldr	r0, [r4, #32]
   baeb0:	6803      	ldr	r3, [r0, #0]
   baeb2:	2100      	movs	r1, #0
   baeb4:	681b      	ldr	r3, [r3, #0]
   baeb6:	4798      	blx	r3
    deselectSlave();
   baeb8:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   baeba:	4605      	mov	r5, r0
    deselectSlave();
   baebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   baebe:	4620      	mov	r0, r4
   baec0:	4798      	blx	r3
    _spi.endTransaction();
   baec2:	6a20      	ldr	r0, [r4, #32]
   baec4:	6803      	ldr	r3, [r0, #0]
   baec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   baec8:	4798      	blx	r3
}
   baeca:	4628      	mov	r0, r5
   baecc:	bd38      	pop	{r3, r4, r5, pc}

000baece <_ZN11RHSPIDriver8spiWriteEhh>:
{
   baece:	b570      	push	{r4, r5, r6, lr}
   baed0:	4604      	mov	r4, r0
    _spi.beginTransaction();
   baed2:	6a00      	ldr	r0, [r0, #32]
   baed4:	6803      	ldr	r3, [r0, #0]
   baed6:	6a1b      	ldr	r3, [r3, #32]
{
   baed8:	4616      	mov	r6, r2
   baeda:	460d      	mov	r5, r1
    _spi.beginTransaction();
   baedc:	4798      	blx	r3
    selectSlave();
   baede:	6823      	ldr	r3, [r4, #0]
   baee0:	4620      	mov	r0, r4
   baee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   baee4:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   baee6:	6a20      	ldr	r0, [r4, #32]
   baee8:	6803      	ldr	r3, [r0, #0]
   baeea:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   baeee:	681b      	ldr	r3, [r3, #0]
   baef0:	4798      	blx	r3
   baef2:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   baef4:	6a20      	ldr	r0, [r4, #32]
   baef6:	6803      	ldr	r3, [r0, #0]
   baef8:	4631      	mov	r1, r6
   baefa:	681b      	ldr	r3, [r3, #0]
   baefc:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   baefe:	2001      	movs	r0, #1
   baf00:	f001 f890 	bl	bc024 <HAL_Delay_Microseconds>
    deselectSlave();
   baf04:	6823      	ldr	r3, [r4, #0]
   baf06:	4620      	mov	r0, r4
   baf08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   baf0a:	4798      	blx	r3
    _spi.endTransaction();
   baf0c:	6a20      	ldr	r0, [r4, #32]
   baf0e:	6803      	ldr	r3, [r0, #0]
   baf10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   baf12:	4798      	blx	r3
}
   baf14:	4628      	mov	r0, r5
   baf16:	bd70      	pop	{r4, r5, r6, pc}

000baf18 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   baf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baf1a:	4604      	mov	r4, r0
    _spi.beginTransaction();
   baf1c:	6a00      	ldr	r0, [r0, #32]
{
   baf1e:	461e      	mov	r6, r3
    _spi.beginTransaction();
   baf20:	6803      	ldr	r3, [r0, #0]
   baf22:	6a1b      	ldr	r3, [r3, #32]
{
   baf24:	460f      	mov	r7, r1
   baf26:	4615      	mov	r5, r2
    _spi.beginTransaction();
   baf28:	4798      	blx	r3
    selectSlave();
   baf2a:	6823      	ldr	r3, [r4, #0]
   baf2c:	4620      	mov	r0, r4
   baf2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   baf30:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   baf32:	6a20      	ldr	r0, [r4, #32]
   baf34:	6803      	ldr	r3, [r0, #0]
   baf36:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   baf3a:	681b      	ldr	r3, [r3, #0]
   baf3c:	4798      	blx	r3
   baf3e:	442e      	add	r6, r5
   baf40:	4607      	mov	r7, r0
    while (len--)
   baf42:	42b5      	cmp	r5, r6
   baf44:	d007      	beq.n	baf56 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   baf46:	6a20      	ldr	r0, [r4, #32]
   baf48:	6803      	ldr	r3, [r0, #0]
   baf4a:	2100      	movs	r1, #0
   baf4c:	681b      	ldr	r3, [r3, #0]
   baf4e:	4798      	blx	r3
   baf50:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   baf54:	e7f5      	b.n	baf42 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   baf56:	6823      	ldr	r3, [r4, #0]
   baf58:	4620      	mov	r0, r4
   baf5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   baf5c:	4798      	blx	r3
    _spi.endTransaction();
   baf5e:	6a20      	ldr	r0, [r4, #32]
   baf60:	6803      	ldr	r3, [r0, #0]
   baf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   baf64:	4798      	blx	r3
}
   baf66:	4638      	mov	r0, r7
   baf68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baf6a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   baf6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baf6c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   baf6e:	6a00      	ldr	r0, [r0, #32]
{
   baf70:	461e      	mov	r6, r3
    _spi.beginTransaction();
   baf72:	6803      	ldr	r3, [r0, #0]
   baf74:	6a1b      	ldr	r3, [r3, #32]
{
   baf76:	460f      	mov	r7, r1
   baf78:	4615      	mov	r5, r2
    _spi.beginTransaction();
   baf7a:	4798      	blx	r3
    selectSlave();
   baf7c:	6823      	ldr	r3, [r4, #0]
   baf7e:	4620      	mov	r0, r4
   baf80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   baf82:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   baf84:	6a20      	ldr	r0, [r4, #32]
   baf86:	6803      	ldr	r3, [r0, #0]
   baf88:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   baf8c:	681b      	ldr	r3, [r3, #0]
   baf8e:	4798      	blx	r3
   baf90:	442e      	add	r6, r5
   baf92:	4607      	mov	r7, r0
    while (len--)
   baf94:	42b5      	cmp	r5, r6
   baf96:	d006      	beq.n	bafa6 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   baf98:	6a20      	ldr	r0, [r4, #32]
   baf9a:	f815 1b01 	ldrb.w	r1, [r5], #1
   baf9e:	6803      	ldr	r3, [r0, #0]
   bafa0:	681b      	ldr	r3, [r3, #0]
   bafa2:	4798      	blx	r3
    while (len--)
   bafa4:	e7f6      	b.n	baf94 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   bafa6:	6823      	ldr	r3, [r4, #0]
   bafa8:	4620      	mov	r0, r4
   bafaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bafac:	4798      	blx	r3
    _spi.endTransaction();
   bafae:	6a20      	ldr	r0, [r4, #32]
   bafb0:	6803      	ldr	r3, [r0, #0]
   bafb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bafb4:	4798      	blx	r3
}
   bafb6:	4638      	mov	r0, r7
   bafb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bafba <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   bafba:	6a00      	ldr	r0, [r0, #32]
   bafbc:	6803      	ldr	r3, [r0, #0]
   bafbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bafc0:	4718      	bx	r3

000bafc2 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   bafc2:	2001      	movs	r0, #1
   bafc4:	4770      	bx	lr

000bafc6 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   bafc6:	20fb      	movs	r0, #251	; 0xfb
   bafc8:	4770      	bx	lr

000bafca <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   bafca:	4770      	bx	lr

000bafcc <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   bafcc:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   bafce:	7903      	ldrb	r3, [r0, #4]
   bafd0:	2b05      	cmp	r3, #5
{
   bafd2:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   bafd4:	d010      	beq.n	baff8 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   bafd6:	6803      	ldr	r3, [r0, #0]
   bafd8:	2105      	movs	r1, #5
   bafda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bafde:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   bafe0:	2207      	movs	r2, #7
   bafe2:	2101      	movs	r1, #1
   bafe4:	4620      	mov	r0, r4
   bafe6:	f7ff ff72 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   bafea:	2280      	movs	r2, #128	; 0x80
   bafec:	2140      	movs	r1, #64	; 0x40
   bafee:	4620      	mov	r0, r4
   baff0:	f7ff ff6d 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   baff4:	2305      	movs	r3, #5
   baff6:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   baff8:	7923      	ldrb	r3, [r4, #4]
   baffa:	2b05      	cmp	r3, #5
   baffc:	d0fc      	beq.n	baff8 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   baffe:	7e20      	ldrb	r0, [r4, #24]
}
   bb000:	bd10      	pop	{r4, pc}

000bb002 <_ZN7RH_RF95D0Ev>:
   bb002:	b510      	push	{r4, lr}
   bb004:	f44f 7198 	mov.w	r1, #304	; 0x130
   bb008:	4604      	mov	r4, r0
   bb00a:	f7f9 f848 	bl	b409e <_ZdlPvj>
   bb00e:	4620      	mov	r0, r4
   bb010:	bd10      	pop	{r4, pc}

000bb012 <_ZN7RH_RF955sleepEv>:
{
   bb012:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   bb014:	7903      	ldrb	r3, [r0, #4]
   bb016:	2b01      	cmp	r3, #1
{
   bb018:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   bb01a:	d00b      	beq.n	bb034 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   bb01c:	6803      	ldr	r3, [r0, #0]
   bb01e:	2101      	movs	r1, #1
   bb020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bb024:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   bb026:	2200      	movs	r2, #0
   bb028:	2101      	movs	r1, #1
   bb02a:	4620      	mov	r0, r4
   bb02c:	f7ff ff4f 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   bb030:	2301      	movs	r3, #1
   bb032:	7123      	strb	r3, [r4, #4]
}
   bb034:	2001      	movs	r0, #1
   bb036:	bd10      	pop	{r4, pc}

000bb038 <_ZN7RH_RF954recvEPhS0_>:
{
   bb038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   bb03a:	6803      	ldr	r3, [r0, #0]
   bb03c:	68db      	ldr	r3, [r3, #12]
{
   bb03e:	4604      	mov	r4, r0
   bb040:	460f      	mov	r7, r1
   bb042:	4615      	mov	r5, r2
    if (!available())
   bb044:	4798      	blx	r3
   bb046:	4606      	mov	r6, r0
   bb048:	b1b0      	cbz	r0, bb078 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   bb04a:	b187      	cbz	r7, bb06e <_ZN7RH_RF954recvEPhS0_+0x36>
   bb04c:	b17d      	cbz	r5, bb06e <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   bb04e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   bb052:	782a      	ldrb	r2, [r5, #0]
   bb054:	3b03      	subs	r3, #3
   bb056:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   bb058:	bfde      	ittt	le
   bb05a:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   bb05e:	3b04      	suble	r3, #4
   bb060:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   bb062:	782a      	ldrb	r2, [r5, #0]
   bb064:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   bb068:	4638      	mov	r0, r7
   bb06a:	f005 fac3 	bl	c05f4 <memcpy>
    _rxBufValid = false;
   bb06e:	2300      	movs	r3, #0
   bb070:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bb074:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   bb078:	4630      	mov	r0, r6
   bb07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb07c <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   bb07c:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   bb07e:	b538      	push	{r3, r4, r5, lr}
   bb080:	4605      	mov	r5, r0
   bb082:	460c      	mov	r4, r1
	if (power > 20)
   bb084:	dc14      	bgt.n	bb0b0 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   bb086:	2901      	cmp	r1, #1
   bb088:	dd14      	ble.n	bb0b4 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   bb08a:	2911      	cmp	r1, #17
   bb08c:	dd13      	ble.n	bb0b6 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   bb08e:	2207      	movs	r2, #7
   bb090:	214d      	movs	r1, #77	; 0x4d
   bb092:	4628      	mov	r0, r5
   bb094:	f7ff ff1b 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   bb098:	3c03      	subs	r4, #3
   bb09a:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bb09c:	1ea2      	subs	r2, r4, #2
   bb09e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   bb0a2:	4628      	mov	r0, r5
   bb0a4:	b2d2      	uxtb	r2, r2
}
   bb0a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bb0aa:	2109      	movs	r1, #9
   bb0ac:	f7ff bf0f 	b.w	baece <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   bb0b0:	2414      	movs	r4, #20
   bb0b2:	e7ec      	b.n	bb08e <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   bb0b4:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bb0b6:	2204      	movs	r2, #4
   bb0b8:	214d      	movs	r1, #77	; 0x4d
   bb0ba:	4628      	mov	r0, r5
   bb0bc:	f7ff ff07 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
   bb0c0:	e7ec      	b.n	bb09c <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000bb0c4 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   bb0c4:	b538      	push	{r3, r4, r5, lr}
   bb0c6:	4604      	mov	r4, r0
   bb0c8:	4615      	mov	r5, r2
    _rxBufValid(0)
   bb0ca:	461a      	mov	r2, r3
   bb0cc:	f7ff fece 	bl	bae6c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   bb0d0:	4b09      	ldr	r3, [pc, #36]	; (bb0f8 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   bb0d2:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   bb0d4:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   bb0d6:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   bb0d8:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   bb0dc:	2201      	movs	r2, #1
    _rxBufValid(0)
   bb0de:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bb0e2:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   bb0e6:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   bb0ea:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   bb0ee:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   bb0f2:	4620      	mov	r0, r4
   bb0f4:	bd38      	pop	{r3, r4, r5, pc}
   bb0f6:	bf00      	nop
   bb0f8:	000c2184 	.word	0x000c2184

000bb0fc <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   bb0fc:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   bb100:	2b03      	cmp	r3, #3
   bb102:	d91b      	bls.n	bb13c <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   bb104:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   bb108:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   bb10a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   bb10e:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   bb110:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   bb114:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   bb116:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   bb11a:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   bb11c:	7983      	ldrb	r3, [r0, #6]
   bb11e:	b933      	cbnz	r3, bb12e <_ZN7RH_RF9513validateRxBufEv+0x32>
   bb120:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   bb122:	7942      	ldrb	r2, [r0, #5]
   bb124:	429a      	cmp	r2, r3
   bb126:	d002      	beq.n	bb12e <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   bb128:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   bb12a:	2bff      	cmp	r3, #255	; 0xff
   bb12c:	d106      	bne.n	bb13c <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   bb12e:	8a83      	ldrh	r3, [r0, #20]
   bb130:	3301      	adds	r3, #1
   bb132:	b29b      	uxth	r3, r3
   bb134:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   bb136:	2301      	movs	r3, #1
   bb138:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   bb13c:	4770      	bx	lr
	...

000bb140 <_ZN7RH_RF9512setFrequencyEf>:
{
   bb140:	b538      	push	{r3, r4, r5, lr}
   bb142:	4604      	mov	r4, r0
   bb144:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bb148:	ee10 0a10 	vmov	r0, s0
{
   bb14c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bb150:	f004 feae 	bl	bfeb0 <__aeabi_f2d>
   bb154:	a317      	add	r3, pc, #92	; (adr r3, bb1b4 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   bb156:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb15a:	f004 ff01 	bl	bff60 <__aeabi_dmul>
   bb15e:	a317      	add	r3, pc, #92	; (adr r3, bb1bc <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   bb160:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb164:	f005 f826 	bl	c01b4 <__aeabi_ddiv>
   bb168:	f005 f9d2 	bl	c0510 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bb16c:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bb16e:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bb170:	f3c0 4207 	ubfx	r2, r0, #16, #8
   bb174:	4620      	mov	r0, r4
   bb176:	f7ff feaa 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   bb17a:	f3c5 2207 	ubfx	r2, r5, #8, #8
   bb17e:	2107      	movs	r1, #7
   bb180:	4620      	mov	r0, r4
   bb182:	f7ff fea4 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   bb186:	b2ea      	uxtb	r2, r5
   bb188:	2108      	movs	r1, #8
   bb18a:	4620      	mov	r0, r4
   bb18c:	f7ff fe9f 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   bb190:	eddf 7a07 	vldr	s15, [pc, #28]	; bb1b0 <_ZN7RH_RF9512setFrequencyEf+0x70>
   bb194:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   bb198:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   bb19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb1a0:	bfac      	ite	ge
   bb1a2:	2301      	movge	r3, #1
   bb1a4:	2300      	movlt	r3, #0
}
   bb1a6:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   bb1a8:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   bb1ac:	bd38      	pop	{r3, r4, r5, pc}
   bb1ae:	bf00      	nop
   bb1b0:	4442c000 	.word	0x4442c000
   bb1b4:	00000000 	.word	0x00000000
   bb1b8:	412e8480 	.word	0x412e8480
   bb1bc:	00000000 	.word	0x00000000
   bb1c0:	404e8480 	.word	0x404e8480

000bb1c4 <_ZN7RH_RF9511setModeIdleEv>:
{
   bb1c4:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   bb1c6:	7903      	ldrb	r3, [r0, #4]
   bb1c8:	2b02      	cmp	r3, #2
{
   bb1ca:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   bb1cc:	d00b      	beq.n	bb1e6 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   bb1ce:	6803      	ldr	r3, [r0, #0]
   bb1d0:	2102      	movs	r1, #2
   bb1d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bb1d6:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   bb1d8:	2201      	movs	r2, #1
   bb1da:	4611      	mov	r1, r2
   bb1dc:	4620      	mov	r0, r4
   bb1de:	f7ff fe76 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   bb1e2:	2302      	movs	r3, #2
   bb1e4:	7123      	strb	r3, [r4, #4]
}
   bb1e6:	bd10      	pop	{r4, pc}

000bb1e8 <_ZN7RH_RF9515handleInterruptEv>:
{
   bb1e8:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bb1ea:	2112      	movs	r1, #18
{
   bb1ec:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bb1ee:	f7ff fe4d 	bl	bae8c <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bb1f2:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bb1f4:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bb1f6:	4620      	mov	r0, r4
   bb1f8:	f7ff fe48 	bl	bae8c <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bb1fc:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bb1fe:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bb200:	2112      	movs	r1, #18
   bb202:	4620      	mov	r0, r4
   bb204:	f7ff fe63 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   bb208:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   bb20a:	2b04      	cmp	r3, #4
   bb20c:	d107      	bne.n	bb21e <_ZN7RH_RF9515handleInterruptEv+0x36>
   bb20e:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   bb212:	d117      	bne.n	bb244 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   bb214:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   bb218:	b10b      	cbz	r3, bb21e <_ZN7RH_RF9515handleInterruptEv+0x36>
   bb21a:	0670      	lsls	r0, r6, #25
   bb21c:	d512      	bpl.n	bb244 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   bb21e:	7923      	ldrb	r3, [r4, #4]
   bb220:	2b04      	cmp	r3, #4
   bb222:	d101      	bne.n	bb228 <_ZN7RH_RF9515handleInterruptEv+0x40>
   bb224:	0669      	lsls	r1, r5, #25
   bb226:	d422      	bmi.n	bb26e <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   bb228:	7923      	ldrb	r3, [r4, #4]
   bb22a:	2b03      	cmp	r3, #3
   bb22c:	d101      	bne.n	bb232 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   bb22e:	072a      	lsls	r2, r5, #28
   bb230:	d468      	bmi.n	bb304 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   bb232:	7923      	ldrb	r3, [r4, #4]
   bb234:	2b05      	cmp	r3, #5
   bb236:	d10e      	bne.n	bb256 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   bb238:	076b      	lsls	r3, r5, #29
   bb23a:	d50c      	bpl.n	bb256 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   bb23c:	f005 0501 	and.w	r5, r5, #1
   bb240:	7625      	strb	r5, [r4, #24]
   bb242:	e063      	b.n	bb30c <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   bb244:	8a63      	ldrh	r3, [r4, #18]
   bb246:	3301      	adds	r3, #1
   bb248:	b29b      	uxth	r3, r3
   bb24a:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   bb24c:	2300      	movs	r3, #0
   bb24e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bb252:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bb256:	22ff      	movs	r2, #255	; 0xff
   bb258:	2112      	movs	r1, #18
   bb25a:	4620      	mov	r0, r4
   bb25c:	f7ff fe37 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bb260:	4620      	mov	r0, r4
   bb262:	22ff      	movs	r2, #255	; 0xff
}
   bb264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bb268:	2112      	movs	r1, #18
   bb26a:	f7ff be30 	b.w	baece <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bb26e:	2113      	movs	r1, #19
   bb270:	4620      	mov	r0, r4
   bb272:	f7ff fe0b 	bl	bae8c <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bb276:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bb278:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bb27a:	4620      	mov	r0, r4
   bb27c:	f7ff fe06 	bl	bae8c <_ZN11RHSPIDriver7spiReadEh>
   bb280:	210d      	movs	r1, #13
   bb282:	4602      	mov	r2, r0
   bb284:	4620      	mov	r0, r4
   bb286:	f7ff fe22 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   bb28a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   bb28e:	462b      	mov	r3, r5
   bb290:	2100      	movs	r1, #0
   bb292:	4620      	mov	r0, r4
   bb294:	f7ff fe40 	bl	baf18 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bb298:	2119      	movs	r1, #25
	_bufLen = len;
   bb29a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bb29e:	4620      	mov	r0, r4
   bb2a0:	f7ff fdf4 	bl	bae8c <_ZN11RHSPIDriver7spiReadEh>
   bb2a4:	b240      	sxtb	r0, r0
   bb2a6:	2800      	cmp	r0, #0
   bb2a8:	bfb8      	it	lt
   bb2aa:	3003      	addlt	r0, #3
   bb2ac:	1080      	asrs	r0, r0, #2
   bb2ae:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bb2b2:	211a      	movs	r1, #26
   bb2b4:	4620      	mov	r0, r4
   bb2b6:	f7ff fde9 	bl	bae8c <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   bb2ba:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bb2be:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   bb2c0:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bb2c2:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bb2c4:	bfa9      	itett	ge
   bb2c6:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   bb2c8:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bb2ca:	b21b      	sxthge	r3, r3
   bb2cc:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   bb2ce:	bfb2      	itee	lt
   bb2d0:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bb2d2:	220f      	movge	r2, #15
   bb2d4:	fb93 f3f2 	sdivge	r3, r3, r2
   bb2d8:	b21b      	sxth	r3, r3
   bb2da:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   bb2dc:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   bb2e0:	b16b      	cbz	r3, bb2fe <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   bb2e2:	8a23      	ldrh	r3, [r4, #16]
   bb2e4:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   bb2e6:	b21b      	sxth	r3, r3
   bb2e8:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   bb2ea:	4620      	mov	r0, r4
   bb2ec:	f7ff ff06 	bl	bb0fc <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   bb2f0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   bb2f4:	2b00      	cmp	r3, #0
   bb2f6:	d0ae      	beq.n	bb256 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   bb2f8:	f7ff ff64 	bl	bb1c4 <_ZN7RH_RF9511setModeIdleEv>
   bb2fc:	e7ab      	b.n	bb256 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   bb2fe:	8a23      	ldrh	r3, [r4, #16]
   bb300:	3ba4      	subs	r3, #164	; 0xa4
   bb302:	e7f0      	b.n	bb2e6 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   bb304:	8ae3      	ldrh	r3, [r4, #22]
   bb306:	3301      	adds	r3, #1
   bb308:	b29b      	uxth	r3, r3
   bb30a:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   bb30c:	4620      	mov	r0, r4
   bb30e:	e7f3      	b.n	bb2f8 <_ZN7RH_RF9515handleInterruptEv+0x110>

000bb310 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   bb310:	4b02      	ldr	r3, [pc, #8]	; (bb31c <_ZN7RH_RF954isr0Ev+0xc>)
   bb312:	6818      	ldr	r0, [r3, #0]
   bb314:	b108      	cbz	r0, bb31a <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   bb316:	f7ff bf67 	b.w	bb1e8 <_ZN7RH_RF9515handleInterruptEv>
}
   bb31a:	4770      	bx	lr
   bb31c:	2003e56c 	.word	0x2003e56c

000bb320 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   bb320:	4b02      	ldr	r3, [pc, #8]	; (bb32c <_ZN7RH_RF954isr1Ev+0xc>)
   bb322:	6858      	ldr	r0, [r3, #4]
   bb324:	b108      	cbz	r0, bb32a <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   bb326:	f7ff bf5f 	b.w	bb1e8 <_ZN7RH_RF9515handleInterruptEv>
}
   bb32a:	4770      	bx	lr
   bb32c:	2003e56c 	.word	0x2003e56c

000bb330 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   bb330:	4b02      	ldr	r3, [pc, #8]	; (bb33c <_ZN7RH_RF954isr2Ev+0xc>)
   bb332:	6898      	ldr	r0, [r3, #8]
   bb334:	b108      	cbz	r0, bb33a <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   bb336:	f7ff bf57 	b.w	bb1e8 <_ZN7RH_RF9515handleInterruptEv>
}
   bb33a:	4770      	bx	lr
   bb33c:	2003e56c 	.word	0x2003e56c

000bb340 <_ZN7RH_RF959setModeRxEv>:
{
   bb340:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   bb342:	7903      	ldrb	r3, [r0, #4]
   bb344:	2b04      	cmp	r3, #4
{
   bb346:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   bb348:	d010      	beq.n	bb36c <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   bb34a:	6803      	ldr	r3, [r0, #0]
   bb34c:	2104      	movs	r1, #4
   bb34e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bb352:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   bb354:	2205      	movs	r2, #5
   bb356:	2101      	movs	r1, #1
   bb358:	4620      	mov	r0, r4
   bb35a:	f7ff fdb8 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   bb35e:	2200      	movs	r2, #0
   bb360:	2140      	movs	r1, #64	; 0x40
   bb362:	4620      	mov	r0, r4
   bb364:	f7ff fdb3 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   bb368:	2304      	movs	r3, #4
   bb36a:	7123      	strb	r3, [r4, #4]
}
   bb36c:	bd10      	pop	{r4, pc}

000bb36e <_ZN7RH_RF959availableEv>:
{
   bb36e:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   bb370:	7903      	ldrb	r3, [r0, #4]
   bb372:	2b03      	cmp	r3, #3
{
   bb374:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   bb376:	d005      	beq.n	bb384 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   bb378:	f7ff ffe2 	bl	bb340 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   bb37c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   bb380:	b2c0      	uxtb	r0, r0
}
   bb382:	bd10      	pop	{r4, pc}
	return false;
   bb384:	2000      	movs	r0, #0
   bb386:	e7fc      	b.n	bb382 <_ZN7RH_RF959availableEv+0x14>

000bb388 <_ZN7RH_RF959setModeTxEv>:
{
   bb388:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   bb38a:	7903      	ldrb	r3, [r0, #4]
   bb38c:	2b03      	cmp	r3, #3
{
   bb38e:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   bb390:	d010      	beq.n	bb3b4 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   bb392:	6803      	ldr	r3, [r0, #0]
   bb394:	2103      	movs	r1, #3
   bb396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bb39a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   bb39c:	2203      	movs	r2, #3
   bb39e:	2101      	movs	r1, #1
   bb3a0:	4620      	mov	r0, r4
   bb3a2:	f7ff fd94 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   bb3a6:	2240      	movs	r2, #64	; 0x40
   bb3a8:	4611      	mov	r1, r2
   bb3aa:	4620      	mov	r0, r4
   bb3ac:	f7ff fd8f 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   bb3b0:	2303      	movs	r3, #3
   bb3b2:	7123      	strb	r3, [r4, #4]
}
   bb3b4:	bd10      	pop	{r4, pc}

000bb3b6 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bb3b6:	2afb      	cmp	r2, #251	; 0xfb
{
   bb3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb3ba:	4604      	mov	r4, r0
   bb3bc:	460f      	mov	r7, r1
   bb3be:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bb3c0:	d902      	bls.n	bb3c8 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   bb3c2:	2600      	movs	r6, #0
}
   bb3c4:	4630      	mov	r0, r6
   bb3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   bb3c8:	6803      	ldr	r3, [r0, #0]
   bb3ca:	6a1b      	ldr	r3, [r3, #32]
   bb3cc:	4798      	blx	r3
    setModeIdle();
   bb3ce:	4620      	mov	r0, r4
   bb3d0:	f7ff fef8 	bl	bb1c4 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   bb3d4:	6823      	ldr	r3, [r4, #0]
   bb3d6:	4620      	mov	r0, r4
   bb3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb3da:	4798      	blx	r3
   bb3dc:	4606      	mov	r6, r0
   bb3de:	2800      	cmp	r0, #0
   bb3e0:	d0ef      	beq.n	bb3c2 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   bb3e2:	2200      	movs	r2, #0
   bb3e4:	210d      	movs	r1, #13
   bb3e6:	4620      	mov	r0, r4
   bb3e8:	f7ff fd71 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   bb3ec:	7ae2      	ldrb	r2, [r4, #11]
   bb3ee:	2100      	movs	r1, #0
   bb3f0:	4620      	mov	r0, r4
   bb3f2:	f7ff fd6c 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   bb3f6:	7b22      	ldrb	r2, [r4, #12]
   bb3f8:	2100      	movs	r1, #0
   bb3fa:	4620      	mov	r0, r4
   bb3fc:	f7ff fd67 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   bb400:	7b62      	ldrb	r2, [r4, #13]
   bb402:	2100      	movs	r1, #0
   bb404:	4620      	mov	r0, r4
   bb406:	f7ff fd62 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   bb40a:	7ba2      	ldrb	r2, [r4, #14]
   bb40c:	2100      	movs	r1, #0
   bb40e:	4620      	mov	r0, r4
   bb410:	f7ff fd5d 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   bb414:	462b      	mov	r3, r5
   bb416:	463a      	mov	r2, r7
   bb418:	2100      	movs	r1, #0
   bb41a:	4620      	mov	r0, r4
   bb41c:	f7ff fda5 	bl	baf6a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   bb420:	1d2a      	adds	r2, r5, #4
   bb422:	b2d2      	uxtb	r2, r2
   bb424:	2122      	movs	r1, #34	; 0x22
   bb426:	4620      	mov	r0, r4
   bb428:	f7ff fd51 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   bb42c:	4620      	mov	r0, r4
   bb42e:	f7ff ffab 	bl	bb388 <_ZN7RH_RF959setModeTxEv>
    return true;
   bb432:	e7c7      	b.n	bb3c4 <_ZN7RH_RF954sendEPKhh+0xe>

000bb434 <_ZN7RH_RF9510setTxPowerEab>:
{
   bb434:	b510      	push	{r4, lr}
   bb436:	4604      	mov	r4, r0
    _useRFO = useRFO;
   bb438:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   bb43c:	b172      	cbz	r2, bb45c <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   bb43e:	f381 0204 	usat	r2, #4, r1
   bb442:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   bb446:	b2d2      	uxtb	r2, r2
   bb448:	2109      	movs	r1, #9
   bb44a:	f7ff fd40 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bb44e:	4620      	mov	r0, r4
   bb450:	2204      	movs	r2, #4
}
   bb452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bb456:	214d      	movs	r1, #77	; 0x4d
   bb458:	f7ff bd39 	b.w	baece <_ZN11RHSPIDriver8spiWriteEhh>
}
   bb45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bb460:	f7ff be0c 	b.w	bb07c <_ZN7RH_RF9510setTxPowerEab.part.0>

000bb464 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   bb464:	b538      	push	{r3, r4, r5, lr}
   bb466:	460c      	mov	r4, r1
   bb468:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   bb46a:	780a      	ldrb	r2, [r1, #0]
   bb46c:	211d      	movs	r1, #29
   bb46e:	f7ff fd2e 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   bb472:	7862      	ldrb	r2, [r4, #1]
   bb474:	211e      	movs	r1, #30
   bb476:	4628      	mov	r0, r5
   bb478:	f7ff fd29 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bb47c:	78a2      	ldrb	r2, [r4, #2]
   bb47e:	4628      	mov	r0, r5
   bb480:	2126      	movs	r1, #38	; 0x26
}
   bb482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bb486:	f7ff bd22 	b.w	baece <_ZN11RHSPIDriver8spiWriteEhh>
	...

000bb48c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bb48c:	2905      	cmp	r1, #5
{
   bb48e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bb490:	d80f      	bhi.n	bb4b2 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bb492:	4b09      	ldr	r3, [pc, #36]	; (bb4b8 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   bb494:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   bb498:	185c      	adds	r4, r3, r1
   bb49a:	5a5a      	ldrh	r2, [r3, r1]
   bb49c:	78a3      	ldrb	r3, [r4, #2]
   bb49e:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   bb4a2:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bb4a4:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   bb4a8:	f7ff ffdc 	bl	bb464 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   bb4ac:	2001      	movs	r0, #1
}
   bb4ae:	b002      	add	sp, #8
   bb4b0:	bd10      	pop	{r4, pc}
        return false;
   bb4b2:	2000      	movs	r0, #0
   bb4b4:	e7fb      	b.n	bb4ae <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   bb4b6:	bf00      	nop
   bb4b8:	000c216c 	.word	0x000c216c

000bb4bc <_ZN7RH_RF9517setPreambleLengthEt>:
{
   bb4bc:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bb4be:	0a0a      	lsrs	r2, r1, #8
{
   bb4c0:	4605      	mov	r5, r0
   bb4c2:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bb4c4:	2120      	movs	r1, #32
   bb4c6:	f7ff fd02 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bb4ca:	b2e2      	uxtb	r2, r4
   bb4cc:	4628      	mov	r0, r5
   bb4ce:	2121      	movs	r1, #33	; 0x21
}
   bb4d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bb4d4:	f7ff bcfb 	b.w	baece <_ZN11RHSPIDriver8spiWriteEhh>

000bb4d8 <_ZN7RH_RF954initEv>:
{
   bb4d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb4da:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   bb4dc:	f7ff fca6 	bl	bae2c <_ZN11RHSPIDriver4initEv>
   bb4e0:	4606      	mov	r6, r0
   bb4e2:	b918      	cbnz	r0, bb4ec <_ZN7RH_RF954initEv+0x14>
	return false;
   bb4e4:	2600      	movs	r6, #0
}
   bb4e6:	4630      	mov	r0, r6
   bb4e8:	b002      	add	sp, #8
   bb4ea:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   bb4ec:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   bb4f0:	2dff      	cmp	r5, #255	; 0xff
   bb4f2:	d054      	beq.n	bb59e <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   bb4f4:	4629      	mov	r1, r5
   bb4f6:	4620      	mov	r0, r4
   bb4f8:	f7ff fd5f 	bl	bafba <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   bb4fc:	2280      	movs	r2, #128	; 0x80
   bb4fe:	2101      	movs	r1, #1
   bb500:	4620      	mov	r0, r4
   bb502:	f7ff fce4 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   bb506:	200a      	movs	r0, #10
   bb508:	f001 f9a8 	bl	bc85c <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   bb50c:	2101      	movs	r1, #1
   bb50e:	4620      	mov	r0, r4
   bb510:	f7ff fcbc 	bl	bae8c <_ZN11RHSPIDriver7spiReadEh>
   bb514:	2880      	cmp	r0, #128	; 0x80
   bb516:	d1e5      	bne.n	bb4e4 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   bb518:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   bb51c:	28ff      	cmp	r0, #255	; 0xff
   bb51e:	d01c      	beq.n	bb55a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   bb520:	2100      	movs	r1, #0
   bb522:	f004 fa41 	bl	bf9a8 <pinMode>
	if (_myInterruptIndex == 0xff)
   bb526:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   bb52a:	2bff      	cmp	r3, #255	; 0xff
   bb52c:	d107      	bne.n	bb53e <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   bb52e:	4a26      	ldr	r2, [pc, #152]	; (bb5c8 <_ZN7RH_RF954initEv+0xf0>)
   bb530:	7813      	ldrb	r3, [r2, #0]
   bb532:	2b03      	cmp	r3, #3
   bb534:	d8d6      	bhi.n	bb4e4 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   bb536:	1c59      	adds	r1, r3, #1
   bb538:	7011      	strb	r1, [r2, #0]
   bb53a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   bb53e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   bb542:	4b22      	ldr	r3, [pc, #136]	; (bb5cc <_ZN7RH_RF954initEv+0xf4>)
   bb544:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   bb548:	bb62      	cbnz	r2, bb5a4 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   bb54a:	4921      	ldr	r1, [pc, #132]	; (bb5d0 <_ZN7RH_RF954initEv+0xf8>)
   bb54c:	9200      	str	r2, [sp, #0]
   bb54e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb552:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   bb554:	b2a8      	uxth	r0, r5
   bb556:	f001 ff01 	bl	bd35c <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   bb55a:	2200      	movs	r2, #0
   bb55c:	210e      	movs	r1, #14
   bb55e:	4620      	mov	r0, r4
   bb560:	f7ff fcb5 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   bb564:	2200      	movs	r2, #0
   bb566:	210f      	movs	r1, #15
   bb568:	4620      	mov	r0, r4
   bb56a:	f7ff fcb0 	bl	baece <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   bb56e:	4620      	mov	r0, r4
   bb570:	f7ff fe28 	bl	bb1c4 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   bb574:	2100      	movs	r1, #0
   bb576:	4620      	mov	r0, r4
   bb578:	f7ff ff88 	bl	bb48c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   bb57c:	2108      	movs	r1, #8
   bb57e:	4620      	mov	r0, r4
   bb580:	f7ff ff9c 	bl	bb4bc <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   bb584:	ed9f 0a13 	vldr	s0, [pc, #76]	; bb5d4 <_ZN7RH_RF954initEv+0xfc>
   bb588:	4620      	mov	r0, r4
   bb58a:	f7ff fdd9 	bl	bb140 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   bb58e:	2300      	movs	r3, #0
   bb590:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   bb594:	210d      	movs	r1, #13
   bb596:	4620      	mov	r0, r4
   bb598:	f7ff fd70 	bl	bb07c <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   bb59c:	e7a3      	b.n	bb4e6 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   bb59e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   bb5a2:	e7ab      	b.n	bb4fc <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   bb5a4:	2a01      	cmp	r2, #1
   bb5a6:	f04f 0300 	mov.w	r3, #0
   bb5aa:	d104      	bne.n	bb5b6 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   bb5ac:	9300      	str	r3, [sp, #0]
   bb5ae:	490a      	ldr	r1, [pc, #40]	; (bb5d8 <_ZN7RH_RF954initEv+0x100>)
   bb5b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb5b4:	e7ce      	b.n	bb554 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   bb5b6:	2a02      	cmp	r2, #2
   bb5b8:	d194      	bne.n	bb4e4 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   bb5ba:	9300      	str	r3, [sp, #0]
   bb5bc:	4907      	ldr	r1, [pc, #28]	; (bb5dc <_ZN7RH_RF954initEv+0x104>)
   bb5be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb5c2:	2201      	movs	r2, #1
   bb5c4:	e7c6      	b.n	bb554 <_ZN7RH_RF954initEv+0x7c>
   bb5c6:	bf00      	nop
   bb5c8:	2003e569 	.word	0x2003e569
   bb5cc:	2003e56c 	.word	0x2003e56c
   bb5d0:	000bb311 	.word	0x000bb311
   bb5d4:	43d90000 	.word	0x43d90000
   bb5d8:	000bb321 	.word	0x000bb321
   bb5dc:	000bb331 	.word	0x000bb331

000bb5e0 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   bb5e0:	2001      	movs	r0, #1
   bb5e2:	4770      	bx	lr

000bb5e4 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   bb5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb5e6:	4d1f      	ldr	r5, [pc, #124]	; (bb664 <_ZN14SequentialFileC1Ev+0x80>)
   bb5e8:	4b1f      	ldr	r3, [pc, #124]	; (bb668 <_ZN14SequentialFileC1Ev+0x84>)
   bb5ea:	4604      	mov	r4, r0
   bb5ec:	4629      	mov	r1, r5
   bb5ee:	f840 3b04 	str.w	r3, [r0], #4
   bb5f2:	f003 fc72 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
   bb5f6:	491d      	ldr	r1, [pc, #116]	; (bb66c <_ZN14SequentialFileC1Ev+0x88>)
   bb5f8:	f104 0014 	add.w	r0, r4, #20
   bb5fc:	f003 fc6d 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
   bb600:	4629      	mov	r1, r5
   bb602:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bb606:	f003 fc68 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
   bb60a:	2300      	movs	r3, #0
   bb60c:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   bb610:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   bb614:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   bb618:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   bb61c:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   bb620:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   bb624:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   bb626:	2308      	movs	r3, #8
   bb628:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb62a:	2020      	movs	r0, #32
   bb62c:	f7f8 fd33 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bb630:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   bb632:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bb634:	3d01      	subs	r5, #1
   bb636:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   bb638:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   bb63c:	4606      	mov	r6, r0
   bb63e:	f44f 7000 	mov.w	r0, #512	; 0x200
   bb642:	f7f8 fd28 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb646:	f500 7300 	add.w	r3, r0, #512	; 0x200
   bb64a:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   bb64e:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   bb652:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   bb654:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   bb656:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   bb658:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb65a:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   bb65c:	6667      	str	r7, [r4, #100]	; 0x64

}
   bb65e:	4620      	mov	r0, r4
   bb660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb662:	bf00      	nop
   bb664:	000c2508 	.word	0x000c2508
   bb668:	000c2308 	.word	0x000c2308
   bb66c:	000c2208 	.word	0x000c2208

000bb670 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bb670:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   bb672:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bb674:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   bb676:	4628      	mov	r0, r5
   bb678:	f003 fc8d 	bl	bef96 <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   bb67c:	490e      	ldr	r1, [pc, #56]	; (bb6b8 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   bb67e:	4668      	mov	r0, sp
   bb680:	f003 fc2b 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
   bb684:	4669      	mov	r1, sp
   bb686:	4628      	mov	r0, r5
   bb688:	f003 fcff 	bl	bf08a <_ZNK6String8endsWithERKS_>
   bb68c:	4606      	mov	r6, r0
   bb68e:	4668      	mov	r0, sp
   bb690:	f003 fbd8 	bl	bee44 <_ZN6StringD1Ev>
   bb694:	b16e      	cbz	r6, bb6b2 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   bb696:	68e3      	ldr	r3, [r4, #12]
   bb698:	2200      	movs	r2, #0
   bb69a:	3b01      	subs	r3, #1
   bb69c:	4629      	mov	r1, r5
   bb69e:	4668      	mov	r0, sp
   bb6a0:	f003 fd08 	bl	bf0b4 <_ZNK6String9substringEjj>
   bb6a4:	4669      	mov	r1, sp
   bb6a6:	4628      	mov	r0, r5
   bb6a8:	f003 fc6d 	bl	bef86 <_ZN6StringaSEOS_>
   bb6ac:	4668      	mov	r0, sp
   bb6ae:	f003 fbc9 	bl	bee44 <_ZN6StringD1Ev>
    }
    return *this; 
};
   bb6b2:	4620      	mov	r0, r4
   bb6b4:	b004      	add	sp, #16
   bb6b6:	bd70      	pop	{r4, r5, r6, pc}
   bb6b8:	000c220d 	.word	0x000c220d

000bb6bc <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   bb6bc:	b510      	push	{r4, lr}
    if (!queueMutex) {
   bb6be:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   bb6c0:	4604      	mov	r4, r0
    if (!queueMutex) {
   bb6c2:	b913      	cbnz	r3, bb6ca <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   bb6c4:	303c      	adds	r0, #60	; 0x3c
   bb6c6:	f000 fc4d 	bl	bbf64 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   bb6ca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   bb6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   bb6d0:	f000 bc50 	b.w	bbf74 <os_mutex_lock>

000bb6d4 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   bb6d4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   bb6d6:	f000 bc55 	b.w	bbf84 <os_mutex_unlock>
	...

000bb6dc <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   bb6dc:	b510      	push	{r4, lr}
   bb6de:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   bb6e0:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   bb6e2:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   bb6e4:	f000 fe06 	bl	bc2f4 <stat>
    if (result == 0) {
   bb6e8:	b9d0      	cbnz	r0, bb720 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bb6ea:	9b01      	ldr	r3, [sp, #4]
   bb6ec:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   bb6ee:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bb6f0:	d506      	bpl.n	bb700 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   bb6f2:	4915      	ldr	r1, [pc, #84]	; (bb748 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   bb6f4:	4815      	ldr	r0, [pc, #84]	; (bb74c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bb6f6:	f7f8 fd22 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        return true;
   bb6fa:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   bb6fc:	b016      	add	sp, #88	; 0x58
   bb6fe:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   bb700:	4812      	ldr	r0, [pc, #72]	; (bb74c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bb702:	4913      	ldr	r1, [pc, #76]	; (bb750 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   bb704:	f7fb fc20 	bl	b6f48 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   bb708:	4620      	mov	r0, r4
   bb70a:	f005 f989 	bl	c0a20 <unlink>
    result = mkdir(path, 0777);
   bb70e:	f240 11ff 	movw	r1, #511	; 0x1ff
   bb712:	4620      	mov	r0, r4
   bb714:	f000 fdf6 	bl	bc304 <mkdir>
    if (result == 0) {
   bb718:	b980      	cbnz	r0, bb73c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   bb71a:	490e      	ldr	r1, [pc, #56]	; (bb754 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   bb71c:	4622      	mov	r2, r4
   bb71e:	e7e9      	b.n	bb6f4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   bb720:	f001 f864 	bl	bc7ec <__errno>
   bb724:	6803      	ldr	r3, [r0, #0]
   bb726:	2b02      	cmp	r3, #2
   bb728:	d0f1      	beq.n	bb70e <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   bb72a:	f001 f85f 	bl	bc7ec <__errno>
   bb72e:	490a      	ldr	r1, [pc, #40]	; (bb758 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   bb730:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   bb732:	4806      	ldr	r0, [pc, #24]	; (bb74c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bb734:	f7fb fc08 	bl	b6f48 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bb738:	2000      	movs	r0, #0
   bb73a:	e7df      	b.n	bb6fc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   bb73c:	f001 f856 	bl	bc7ec <__errno>
   bb740:	4906      	ldr	r1, [pc, #24]	; (bb75c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   bb742:	6802      	ldr	r2, [r0, #0]
   bb744:	e7f5      	b.n	bb732 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   bb746:	bf00      	nop
   bb748:	000c221a 	.word	0x000c221a
   bb74c:	2003e578 	.word	0x2003e578
   bb750:	000c2237 	.word	0x000c2237
   bb754:	000c2268 	.word	0x000c2268
   bb758:	000c2254 	.word	0x000c2254
   bb75c:	000c2277 	.word	0x000c2277

000bb760 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   bb760:	b538      	push	{r3, r4, r5, lr}
   bb762:	4615      	mov	r5, r2
   bb764:	4604      	mov	r4, r0
    String result = name;
   bb766:	f003 fbb8 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   bb76a:	b14d      	cbz	r5, bb780 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   bb76c:	782b      	ldrb	r3, [r5, #0]
   bb76e:	b13b      	cbz	r3, bb780 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   bb770:	4904      	ldr	r1, [pc, #16]	; (bb784 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   bb772:	4620      	mov	r0, r4
   bb774:	f003 fc38 	bl	befe8 <_ZN6String6concatEPKc>
   bb778:	4629      	mov	r1, r5
   bb77a:	4620      	mov	r0, r4
   bb77c:	f003 fc34 	bl	befe8 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   bb780:	4620      	mov	r0, r4
   bb782:	bd38      	pop	{r3, r4, r5, pc}
   bb784:	000c2610 	.word	0x000c2610

000bb788 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   bb788:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb78a:	4605      	mov	r5, r0
   bb78c:	460e      	mov	r6, r1
   bb78e:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   bb790:	6949      	ldr	r1, [r1, #20]
   bb792:	4668      	mov	r0, sp
   bb794:	f003 fcae 	bl	bf0f4 <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   bb798:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   bb79a:	b904      	cbnz	r4, bb79e <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   bb79c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bb79e:	4622      	mov	r2, r4
   bb7a0:	4628      	mov	r0, r5
   bb7a2:	f7ff ffdd 	bl	bb760 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   bb7a6:	4668      	mov	r0, sp
   bb7a8:	f003 fb4c 	bl	bee44 <_ZN6StringD1Ev>
}
   bb7ac:	4628      	mov	r0, r5
   bb7ae:	b004      	add	sp, #16
   bb7b0:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb7b4 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bb7b4:	b570      	push	{r4, r5, r6, lr}
   bb7b6:	460c      	mov	r4, r1
   bb7b8:	b08e      	sub	sp, #56	; 0x38
    String result;
   bb7ba:	491a      	ldr	r1, [pc, #104]	; (bb824 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bb7bc:	e9cd 3200 	strd	r3, r2, [sp]
   bb7c0:	4605      	mov	r5, r0
    String result;
   bb7c2:	f003 fb8a 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   bb7c6:	68e0      	ldr	r0, [r4, #12]
   bb7c8:	69e1      	ldr	r1, [r4, #28]
   bb7ca:	4401      	add	r1, r0
   bb7cc:	3104      	adds	r1, #4
   bb7ce:	4628      	mov	r0, r5
   bb7d0:	f003 fb56 	bl	bee80 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   bb7d4:	1d21      	adds	r1, r4, #4
   bb7d6:	a806      	add	r0, sp, #24
   bb7d8:	f003 fbca 	bl	bef70 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   bb7dc:	4912      	ldr	r1, [pc, #72]	; (bb828 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   bb7de:	a802      	add	r0, sp, #8
   bb7e0:	f003 fb7b 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
   bb7e4:	a902      	add	r1, sp, #8
   bb7e6:	a806      	add	r0, sp, #24
   bb7e8:	f003 fc1c 	bl	bf024 <_ZplRK15StringSumHelperRK6String>
   bb7ec:	e9dd 3200 	ldrd	r3, r2, [sp]
   bb7f0:	4606      	mov	r6, r0
   bb7f2:	4621      	mov	r1, r4
   bb7f4:	a80a      	add	r0, sp, #40	; 0x28
   bb7f6:	f7ff ffc7 	bl	bb788 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   bb7fa:	a90a      	add	r1, sp, #40	; 0x28
   bb7fc:	4630      	mov	r0, r6
   bb7fe:	f003 fc11 	bl	bf024 <_ZplRK15StringSumHelperRK6String>
   bb802:	4601      	mov	r1, r0
   bb804:	4628      	mov	r0, r5
   bb806:	f003 fba4 	bl	bef52 <_ZN6StringaSERKS_>
   bb80a:	a80a      	add	r0, sp, #40	; 0x28
   bb80c:	f003 fb1a 	bl	bee44 <_ZN6StringD1Ev>
   bb810:	a802      	add	r0, sp, #8
   bb812:	f003 fb17 	bl	bee44 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bb816:	a806      	add	r0, sp, #24
   bb818:	f003 fb14 	bl	bee44 <_ZN6StringD1Ev>
}
   bb81c:	4628      	mov	r0, r5
   bb81e:	b00e      	add	sp, #56	; 0x38
   bb820:	bd70      	pop	{r4, r5, r6, pc}
   bb822:	bf00      	nop
   bb824:	000c2508 	.word	0x000c2508
   bb828:	000c220d 	.word	0x000c220d

000bb82c <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bb82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   bb830:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bb832:	b08e      	sub	sp, #56	; 0x38
   bb834:	4605      	mov	r5, r0
   bb836:	460f      	mov	r7, r1
    if (allExtensions) {
   bb838:	2a00      	cmp	r2, #0
   bb83a:	d04a      	beq.n	bb8d2 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   bb83c:	6840      	ldr	r0, [r0, #4]
   bb83e:	f000 fd71 	bl	bc324 <opendir>
        if (dir) {
   bb842:	4606      	mov	r6, r0
   bb844:	2800      	cmp	r0, #0
   bb846:	d054      	beq.n	bb8f2 <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   bb848:	f8df a0b4 	ldr.w	sl, [pc, #180]	; bb900 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   bb84c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; bb8fc <_ZN14SequentialFile13removeFileNumEib+0xd0>
   bb850:	f8df 80a4 	ldr.w	r8, [pc, #164]	; bb8f8 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   bb854:	4630      	mov	r0, r6
   bb856:	f000 fd6d 	bl	bc334 <readdir>
                if (!ent) {
   bb85a:	2800      	cmp	r0, #0
   bb85c:	d033      	beq.n	bb8c6 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   bb85e:	7a82      	ldrb	r2, [r0, #10]
   bb860:	2a08      	cmp	r2, #8
   bb862:	d1f7      	bne.n	bb854 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   bb864:	f100 040b 	add.w	r4, r0, #11
   bb868:	6969      	ldr	r1, [r5, #20]
   bb86a:	aa01      	add	r2, sp, #4
   bb86c:	4620      	mov	r0, r4
   bb86e:	f000 ff95 	bl	bc79c <sscanf>
   bb872:	2801      	cmp	r0, #1
   bb874:	d1ee      	bne.n	bb854 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   bb876:	9b01      	ldr	r3, [sp, #4]
   bb878:	42bb      	cmp	r3, r7
   bb87a:	d1eb      	bne.n	bb854 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   bb87c:	1d29      	adds	r1, r5, #4
   bb87e:	a80a      	add	r0, sp, #40	; 0x28
   bb880:	f003 fb76 	bl	bef70 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   bb884:	4651      	mov	r1, sl
   bb886:	a806      	add	r0, sp, #24
   bb888:	f003 fb27 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
   bb88c:	a906      	add	r1, sp, #24
   bb88e:	a80a      	add	r0, sp, #40	; 0x28
   bb890:	f003 fbc8 	bl	bf024 <_ZplRK15StringSumHelperRK6String>
   bb894:	4621      	mov	r1, r4
   bb896:	f003 fbd1 	bl	bf03c <_ZplRK15StringSumHelperPKc>
   bb89a:	4601      	mov	r1, r0
   bb89c:	a802      	add	r0, sp, #8
   bb89e:	f003 fb67 	bl	bef70 <_ZN6StringC1ERKS_>
   bb8a2:	a806      	add	r0, sp, #24
   bb8a4:	f003 face 	bl	bee44 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bb8a8:	a80a      	add	r0, sp, #40	; 0x28
   bb8aa:	f003 facb 	bl	bee44 <_ZN6StringD1Ev>
                        unlink(path);
   bb8ae:	9802      	ldr	r0, [sp, #8]
   bb8b0:	f005 f8b6 	bl	c0a20 <unlink>
                        _log.trace("removed %s", path.c_str());
   bb8b4:	4640      	mov	r0, r8
   bb8b6:	9a02      	ldr	r2, [sp, #8]
   bb8b8:	4649      	mov	r1, r9
   bb8ba:	f7fb fb53 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   bb8be:	a802      	add	r0, sp, #8
   bb8c0:	f003 fac0 	bl	bee44 <_ZN6StringD1Ev>
                    continue;
   bb8c4:	e7c6      	b.n	bb854 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   bb8c6:	4630      	mov	r0, r6
}
   bb8c8:	b00e      	add	sp, #56	; 0x38
   bb8ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   bb8ce:	f000 bd39 	b.w	bc344 <closedir>
        String path = getPathForFileNum(fileNum); 
   bb8d2:	460a      	mov	r2, r1
   bb8d4:	4601      	mov	r1, r0
   bb8d6:	a80a      	add	r0, sp, #40	; 0x28
   bb8d8:	f7ff ff6c 	bl	bb7b4 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   bb8dc:	980a      	ldr	r0, [sp, #40]	; 0x28
   bb8de:	f005 f89f 	bl	c0a20 <unlink>
        _log.trace("removed %s", path.c_str());
   bb8e2:	4805      	ldr	r0, [pc, #20]	; (bb8f8 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   bb8e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bb8e6:	4905      	ldr	r1, [pc, #20]	; (bb8fc <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   bb8e8:	f7fb fb3c 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   bb8ec:	a80a      	add	r0, sp, #40	; 0x28
   bb8ee:	f003 faa9 	bl	bee44 <_ZN6StringD1Ev>
}
   bb8f2:	b00e      	add	sp, #56	; 0x38
   bb8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb8f8:	2003e578 	.word	0x2003e578
   bb8fc:	000c220f 	.word	0x000c220f
   bb900:	000c220d 	.word	0x000c220d

000bb904 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   bb904:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   bb906:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   bb908:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   bb90a:	b183      	cbz	r3, bb92e <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   bb90c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   bb90e:	6945      	ldr	r5, [r0, #20]
   bb910:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   bb912:	42ae      	cmp	r6, r5
   bb914:	d906      	bls.n	bb924 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   bb916:	f855 0b04 	ldr.w	r0, [r5], #4
   bb91a:	f44f 7100 	mov.w	r1, #512	; 0x200
   bb91e:	f7f8 fbbe 	bl	b409e <_ZdlPvj>
   bb922:	e7f6      	b.n	bb912 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   bb924:	6861      	ldr	r1, [r4, #4]
   bb926:	6820      	ldr	r0, [r4, #0]
   bb928:	0089      	lsls	r1, r1, #2
   bb92a:	f7f8 fbb8 	bl	b409e <_ZdlPvj>
    }
   bb92e:	4620      	mov	r0, r4
   bb930:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb934 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   bb934:	b510      	push	{r4, lr}
   bb936:	4b09      	ldr	r3, [pc, #36]	; (bb95c <_ZN14SequentialFileD1Ev+0x28>)
   bb938:	4604      	mov	r4, r0
   bb93a:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   bb93e:	f7ff ffe1 	bl	bb904 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   bb942:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bb946:	f003 fa7d 	bl	bee44 <_ZN6StringD1Ev>
   bb94a:	f104 0014 	add.w	r0, r4, #20
   bb94e:	f003 fa79 	bl	bee44 <_ZN6StringD1Ev>
   bb952:	1d20      	adds	r0, r4, #4
   bb954:	f003 fa76 	bl	bee44 <_ZN6StringD1Ev>
}
   bb958:	4620      	mov	r0, r4
   bb95a:	bd10      	pop	{r4, pc}
   bb95c:	000c2308 	.word	0x000c2308

000bb960 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   bb960:	b510      	push	{r4, lr}
   bb962:	4604      	mov	r4, r0
}
   bb964:	f7ff ffe6 	bl	bb934 <_ZN14SequentialFileD1Ev>
   bb968:	4620      	mov	r0, r4
   bb96a:	2168      	movs	r1, #104	; 0x68
   bb96c:	f7f8 fb97 	bl	b409e <_ZdlPvj>
   bb970:	4620      	mov	r0, r4
   bb972:	bd10      	pop	{r4, pc}

000bb974 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   bb974:	68c3      	ldr	r3, [r0, #12]
   bb976:	68ca      	ldr	r2, [r1, #12]
   bb978:	1a9b      	subs	r3, r3, r2
   bb97a:	109b      	asrs	r3, r3, #2
   bb97c:	1e5a      	subs	r2, r3, #1
   bb97e:	e9d0 3000 	ldrd	r3, r0, [r0]
   bb982:	1a1b      	subs	r3, r3, r0
   bb984:	109b      	asrs	r3, r3, #2
   bb986:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   bb98a:	6888      	ldr	r0, [r1, #8]
   bb98c:	680a      	ldr	r2, [r1, #0]
   bb98e:	1a80      	subs	r0, r0, r2
      }
   bb990:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   bb994:	4770      	bx	lr
	...

000bb998 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   bb998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   bb99c:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   bb99e:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   bb9a0:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   bb9a2:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   bb9a4:	4604      	mov	r4, r0
   bb9a6:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   bb9a8:	d007      	beq.n	bb9ba <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bb9aa:	b10b      	cbz	r3, bb9b0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   bb9ac:	680a      	ldr	r2, [r1, #0]
   bb9ae:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   bb9b0:	69a3      	ldr	r3, [r4, #24]
   bb9b2:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   bb9b4:	61a3      	str	r3, [r4, #24]
      }
   bb9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bb9ba:	f100 0108 	add.w	r1, r0, #8
   bb9be:	3018      	adds	r0, #24
   bb9c0:	f7ff ffd8 	bl	bb974 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   bb9c4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   bb9c8:	4298      	cmp	r0, r3
   bb9ca:	d102      	bne.n	bb9d2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   bb9cc:	4838      	ldr	r0, [pc, #224]	; (bbab0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   bb9ce:	f004 f904 	bl	bfbda <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bb9d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bb9d4:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bb9d6:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bb9d8:	1a11      	subs	r1, r2, r0
   bb9da:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bb9de:	2901      	cmp	r1, #1
   bb9e0:	d825      	bhi.n	bba2e <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   bb9e2:	6961      	ldr	r1, [r4, #20]
   bb9e4:	eba2 0801 	sub.w	r8, r2, r1
   bb9e8:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   bb9ec:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   bb9ee:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   bb9f2:	d936      	bls.n	bba62 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   bb9f4:	1b5d      	subs	r5, r3, r5
   bb9f6:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   bb9f8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   bb9fc:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   bb9fe:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   bba00:	eba3 0201 	sub.w	r2, r3, r1
   bba04:	d926      	bls.n	bba54 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   bba06:	428b      	cmp	r3, r1
   bba08:	d002      	beq.n	bba10 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bba0a:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bba0c:	f004 fe00 	bl	c0610 <memmove>
	_M_node = __new_node;
   bba10:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   bba12:	682b      	ldr	r3, [r5, #0]
   bba14:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bba16:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bba1a:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   bba1c:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   bba20:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bba22:	f855 3008 	ldr.w	r3, [r5, r8]
   bba26:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bba28:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bba2c:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bba2e:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   bba32:	6a65      	ldr	r5, [r4, #36]	; 0x24
   bba34:	f7f8 fb2f 	bl	b4096 <_Znwj>
   bba38:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   bba3a:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bba3c:	b10b      	cbz	r3, bba42 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   bba3e:	683a      	ldr	r2, [r7, #0]
   bba40:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   bba42:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bba44:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bba46:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bba48:	685b      	ldr	r3, [r3, #4]
   bba4a:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bba4c:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bba50:	6222      	str	r2, [r4, #32]
   bba52:	e7af      	b.n	bb9b4 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   bba54:	428b      	cmp	r3, r1
   bba56:	d0db      	beq.n	bba10 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bba58:	f108 0004 	add.w	r0, r8, #4
   bba5c:	1a80      	subs	r0, r0, r2
   bba5e:	4428      	add	r0, r5
   bba60:	e7d4      	b.n	bba0c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   bba62:	f103 0902 	add.w	r9, r3, #2
   bba66:	2b01      	cmp	r3, #1
   bba68:	bf2c      	ite	cs
   bba6a:	4499      	addcs	r9, r3
   bba6c:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   bba70:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   bba74:	d301      	bcc.n	bba7a <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   bba76:	f004 f8ad 	bl	bfbd4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bba7a:	ea4f 0089 	mov.w	r0, r9, lsl #2
   bba7e:	f7f8 fb0a 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   bba82:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bba84:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bba86:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   bba8a:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bba8c:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   bba8e:	4291      	cmp	r1, r2
   bba90:	4682      	mov	sl, r0
   bba92:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   bba96:	d003      	beq.n	bbaa0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bba98:	1a52      	subs	r2, r2, r1
   bba9a:	4628      	mov	r0, r5
   bba9c:	f004 fdb8 	bl	c0610 <memmove>
	::operator delete(__p
   bbaa0:	6861      	ldr	r1, [r4, #4]
   bbaa2:	6820      	ldr	r0, [r4, #0]
   bbaa4:	0089      	lsls	r1, r1, #2
   bbaa6:	f7f8 fafa 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   bbaaa:	e9c4 a900 	strd	sl, r9, [r4]
   bbaae:	e7af      	b.n	bba10 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   bbab0:	000c1e91 	.word	0x000c1e91

000bbab4 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   bbab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   bbab8:	68c3      	ldr	r3, [r0, #12]
   bbaba:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   bbabc:	b086      	sub	sp, #24
   bbabe:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   bbac0:	d808      	bhi.n	bbad4 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   bbac2:	4934      	ldr	r1, [pc, #208]	; (bbb94 <_ZN14SequentialFile7scanDirEv+0xe0>)
   bbac4:	4834      	ldr	r0, [pc, #208]	; (bbb98 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bbac6:	f7fb fa3f 	bl	b6f48 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bbaca:	2600      	movs	r6, #0
}
   bbacc:	4630      	mov	r0, r6
   bbace:	b006      	add	sp, #24
   bbad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   bbad4:	6840      	ldr	r0, [r0, #4]
   bbad6:	f7ff fe01 	bl	bb6dc <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   bbada:	4606      	mov	r6, r0
   bbadc:	2800      	cmp	r0, #0
   bbade:	d0f4      	beq.n	bbaca <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   bbae0:	6963      	ldr	r3, [r4, #20]
   bbae2:	6862      	ldr	r2, [r4, #4]
   bbae4:	492d      	ldr	r1, [pc, #180]	; (bbb9c <_ZN14SequentialFile7scanDirEv+0xe8>)
   bbae6:	482c      	ldr	r0, [pc, #176]	; (bbb98 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bbae8:	f7fb fa3c 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   bbaec:	6860      	ldr	r0, [r4, #4]
   bbaee:	f000 fc19 	bl	bc324 <opendir>
    if (!dir) {
   bbaf2:	4607      	mov	r7, r0
   bbaf4:	2800      	cmp	r0, #0
   bbaf6:	d0e8      	beq.n	bbaca <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   bbaf8:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bbafa:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bbba0 <_ZN14SequentialFile7scanDirEv+0xec>
   bbafe:	f8df 8098 	ldr.w	r8, [pc, #152]	; bbb98 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   bbb02:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   bbb04:	4638      	mov	r0, r7
   bbb06:	f000 fc15 	bl	bc334 <readdir>
        if (!ent) {
   bbb0a:	4605      	mov	r5, r0
   bbb0c:	2800      	cmp	r0, #0
   bbb0e:	d039      	beq.n	bbb84 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   bbb10:	7a83      	ldrb	r3, [r0, #10]
   bbb12:	2b08      	cmp	r3, #8
   bbb14:	d1f6      	bne.n	bbb04 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   bbb16:	350b      	adds	r5, #11
   bbb18:	6961      	ldr	r1, [r4, #20]
   bbb1a:	aa01      	add	r2, sp, #4
   bbb1c:	4628      	mov	r0, r5
   bbb1e:	f000 fe3d 	bl	bc79c <sscanf>
   bbb22:	2801      	cmp	r0, #1
   bbb24:	d1ee      	bne.n	bbb04 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   bbb26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bbb28:	b17b      	cbz	r3, bbb4a <_ZN14SequentialFile7scanDirEv+0x96>
   bbb2a:	4629      	mov	r1, r5
   bbb2c:	a802      	add	r0, sp, #8
   bbb2e:	f003 f9d4 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
   bbb32:	f104 0124 	add.w	r1, r4, #36	; 0x24
   bbb36:	a802      	add	r0, sp, #8
   bbb38:	f003 faa7 	bl	bf08a <_ZNK6String8endsWithERKS_>
   bbb3c:	4682      	mov	sl, r0
   bbb3e:	a802      	add	r0, sp, #8
   bbb40:	f003 f980 	bl	bee44 <_ZN6StringD1Ev>
   bbb44:	f1ba 0f00 	cmp.w	sl, #0
   bbb48:	d0dc      	beq.n	bbb04 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   bbb4a:	6823      	ldr	r3, [r4, #0]
   bbb4c:	4629      	mov	r1, r5
   bbb4e:	689b      	ldr	r3, [r3, #8]
   bbb50:	4620      	mov	r0, r4
   bbb52:	4798      	blx	r3
   bbb54:	2800      	cmp	r0, #0
   bbb56:	d0d5      	beq.n	bbb04 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   bbb58:	9a01      	ldr	r2, [sp, #4]
   bbb5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bbb5c:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   bbb5e:	bfb8      	it	lt
   bbb60:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bbb62:	462b      	mov	r3, r5
   bbb64:	4649      	mov	r1, r9
   bbb66:	4640      	mov	r0, r8
   bbb68:	f7fb f9fc 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   bbb6c:	4620      	mov	r0, r4
   bbb6e:	f7ff fda5 	bl	bb6bc <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   bbb72:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bbb76:	a901      	add	r1, sp, #4
   bbb78:	f7ff ff0e 	bl	bb998 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   bbb7c:	4620      	mov	r0, r4
   bbb7e:	f7ff fda9 	bl	bb6d4 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   bbb82:	e7bf      	b.n	bbb04 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   bbb84:	4638      	mov	r0, r7
   bbb86:	f000 fbdd 	bl	bc344 <closedir>
    scanDirCompleted = true;
   bbb8a:	2301      	movs	r3, #1
   bbb8c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   bbb90:	e79c      	b.n	bbacc <_ZN14SequentialFile7scanDirEv+0x18>
   bbb92:	bf00      	nop
   bbb94:	000c228d 	.word	0x000c228d
   bbb98:	2003e578 	.word	0x2003e578
   bbb9c:	000c22a2 	.word	0x000c22a2
   bbba0:	000c22be 	.word	0x000c22be

000bbba4 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   bbba4:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   bbba6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   bbbaa:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bbbac:	b90b      	cbnz	r3, bbbb2 <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   bbbae:	f7ff ff81 	bl	bbab4 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   bbbb2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   bbbb4:	3001      	adds	r0, #1
   bbbb6:	63a0      	str	r0, [r4, #56]	; 0x38
}
   bbbb8:	bd10      	pop	{r4, pc}
	...

000bbbbc <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   bbbbc:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   bbbbe:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   bbbc2:	4604      	mov	r4, r0
   bbbc4:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   bbbc6:	b90b      	cbnz	r3, bbbcc <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   bbbc8:	f7ff ff74 	bl	bbab4 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   bbbcc:	4620      	mov	r0, r4
   bbbce:	f7ff fd75 	bl	bb6bc <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   bbbd2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   bbbd4:	6da2      	ldr	r2, [r4, #88]	; 0x58
   bbbd6:	429a      	cmp	r2, r3
   bbbd8:	d020      	beq.n	bbc1c <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   bbbda:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   bbbde:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   bbbe0:	b126      	cbz	r6, bbbec <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   bbbe2:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   bbbe4:	4293      	cmp	r3, r2
   bbbe6:	d00c      	beq.n	bbc02 <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   bbbe8:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   bbbea:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   bbbec:	4620      	mov	r0, r4
   bbbee:	f7ff fd71 	bl	bb6d4 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   bbbf2:	b125      	cbz	r5, bbbfe <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   bbbf4:	490a      	ldr	r1, [pc, #40]	; (bbc20 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   bbbf6:	480b      	ldr	r0, [pc, #44]	; (bbc24 <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   bbbf8:	462a      	mov	r2, r5
   bbbfa:	f7fb f9b3 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
}
   bbbfe:	4628      	mov	r0, r5
   bbc00:	bd70      	pop	{r4, r5, r6, pc}
   bbc02:	f44f 7100 	mov.w	r1, #512	; 0x200
   bbc06:	f7f8 fa4a 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   bbc0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bbc0c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bbc0e:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   bbc10:	685b      	ldr	r3, [r3, #4]
   bbc12:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   bbc14:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bbc18:	6522      	str	r2, [r4, #80]	; 0x50
   bbc1a:	e7e6      	b.n	bbbea <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   bbc1c:	2500      	movs	r5, #0
   bbc1e:	e7e5      	b.n	bbbec <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   bbc20:	000c22d4 	.word	0x000c22d4
   bbc24:	2003e578 	.word	0x2003e578

000bbc28 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   bbc28:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   bbc2a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   bbc2e:	9101      	str	r1, [sp, #4]
   bbc30:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bbc32:	b90b      	cbnz	r3, bbc38 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   bbc34:	f7ff ff3e 	bl	bbab4 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   bbc38:	9b01      	ldr	r3, [sp, #4]
   bbc3a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   bbc3c:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   bbc3e:	bfb8      	it	lt
   bbc40:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   bbc42:	4620      	mov	r0, r4
   bbc44:	f7ff fd3a 	bl	bb6bc <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   bbc48:	a901      	add	r1, sp, #4
   bbc4a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bbc4e:	f7ff fea3 	bl	bb998 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   bbc52:	4620      	mov	r0, r4
   bbc54:	f7ff fd3e 	bl	bb6d4 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bbc58:	b002      	add	sp, #8
   bbc5a:	bd10      	pop	{r4, pc}

000bbc5c <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   bbc5c:	b538      	push	{r3, r4, r5, lr}
   bbc5e:	4604      	mov	r4, r0
    queueMutexLock();
   bbc60:	f7ff fd2c 	bl	bb6bc <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bbc64:	f104 0148 	add.w	r1, r4, #72	; 0x48
   bbc68:	f104 0058 	add.w	r0, r4, #88	; 0x58
   bbc6c:	f7ff fe82 	bl	bb974 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   bbc70:	4605      	mov	r5, r0
    queueMutexUnlock();
   bbc72:	4620      	mov	r0, r4
   bbc74:	f7ff fd2e 	bl	bb6d4 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bbc78:	4628      	mov	r0, r5
   bbc7a:	bd38      	pop	{r3, r4, r5, pc}

000bbc7c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   bbc7c:	4b01      	ldr	r3, [pc, #4]	; (bbc84 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   bbc7e:	4a02      	ldr	r2, [pc, #8]	; (bbc88 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   bbc80:	601a      	str	r2, [r3, #0]
}
   bbc82:	4770      	bx	lr
   bbc84:	2003e578 	.word	0x2003e578
   bbc88:	000c22f1 	.word	0x000c22f1

000bbc8c <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   bbc8c:	4770      	bx	lr

000bbc8e <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   bbc8e:	6803      	ldr	r3, [r0, #0]
   bbc90:	685b      	ldr	r3, [r3, #4]
   bbc92:	4718      	bx	r3

000bbc94 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bbc94:	b510      	push	{r4, lr}
    if (lastUpdate) {
   bbc96:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bbc98:	4604      	mov	r4, r0
    if (lastUpdate) {
   bbc9a:	b133      	cbz	r3, bbcaa <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bbc9c:	b131      	cbz	r1, bbcac <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   bbc9e:	6823      	ldr	r3, [r4, #0]
   bbca0:	4620      	mov	r0, r4
   bbca2:	689b      	ldr	r3, [r3, #8]
   bbca4:	4798      	blx	r3
            lastUpdate = 0;
   bbca6:	2300      	movs	r3, #0
   bbca8:	61a3      	str	r3, [r4, #24]
        }
    }
}
   bbcaa:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bbcac:	f000 f9c2 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bbcb0:	69a3      	ldr	r3, [r4, #24]
   bbcb2:	1ac0      	subs	r0, r0, r3
   bbcb4:	69e3      	ldr	r3, [r4, #28]
   bbcb6:	4298      	cmp	r0, r3
   bbcb8:	d2f1      	bcs.n	bbc9e <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   bbcba:	e7f6      	b.n	bbcaa <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000bbcbc <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bbcbc:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   bbcbe:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bbcc0:	4604      	mov	r4, r0
    if (saveDelayMs) {
   bbcc2:	b11b      	cbz	r3, bbccc <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   bbcc4:	f000 f9b6 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   bbcc8:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   bbcca:	bd10      	pop	{r4, pc}
        save();
   bbccc:	6803      	ldr	r3, [r0, #0]
}
   bbcce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   bbcd2:	689b      	ldr	r3, [r3, #8]
   bbcd4:	4718      	bx	r3

000bbcd6 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   bbcd6:	f000 b975 	b.w	bbfc4 <os_mutex_recursive_unlock>

000bbcda <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   bbcda:	b510      	push	{r4, lr}
   bbcdc:	4604      	mov	r4, r0
   bbcde:	3004      	adds	r0, #4
   bbce0:	f7fa f87e 	bl	b5de0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   bbce4:	6823      	ldr	r3, [r4, #0]
   bbce6:	68e1      	ldr	r1, [r4, #12]
   bbce8:	695b      	ldr	r3, [r3, #20]
   bbcea:	4620      	mov	r0, r4
   bbcec:	4798      	blx	r3
   bbcee:	b918      	cbnz	r0, bbcf8 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   bbcf0:	6823      	ldr	r3, [r4, #0]
   bbcf2:	4620      	mov	r0, r4
   bbcf4:	699b      	ldr	r3, [r3, #24]
   bbcf6:	4798      	blx	r3
      { _M_device.unlock(); }
   bbcf8:	6860      	ldr	r0, [r4, #4]
   bbcfa:	f7ff ffec 	bl	bbcd6 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bbcfe:	2001      	movs	r0, #1
   bbd00:	bd10      	pop	{r4, pc}

000bbd02 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>:



bool StorageHelperRK::PersistentDataBase::getValueString(size_t offset, size_t size, String &value) const {
   bbd02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbd04:	4605      	mov	r5, r0
      { _M_device.lock(); }
   bbd06:	3004      	adds	r0, #4
   bbd08:	4614      	mov	r4, r2
   bbd0a:	460e      	mov	r6, r1
   bbd0c:	461f      	mov	r7, r3
   bbd0e:	f7fa f867 	bl	b5de0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
    bool result = false;

    WITH_LOCK(*this) {
        if (offset <= (savedDataSize - (size - 1))) {
   bbd12:	68ea      	ldr	r2, [r5, #12]
   bbd14:	f1c4 0401 	rsb	r4, r4, #1
   bbd18:	4414      	add	r4, r2
   bbd1a:	42b4      	cmp	r4, r6
   bbd1c:	d30a      	bcc.n	bbd34 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x32>
            const char *p = (const char *)savedDataHeader;
   bbd1e:	68a9      	ldr	r1, [r5, #8]
            p += offset;
            value = p; // copies string
   bbd20:	4638      	mov	r0, r7
   bbd22:	4431      	add	r1, r6
   bbd24:	f003 f937 	bl	bef96 <_ZN6StringaSEPKc>
            result = true;
   bbd28:	2401      	movs	r4, #1
      { _M_device.unlock(); }
   bbd2a:	6868      	ldr	r0, [r5, #4]
   bbd2c:	f7ff ffd3 	bl	bbcd6 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
        }
    }
    return result;
}
   bbd30:	4620      	mov	r0, r4
   bbd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool result = false;
   bbd34:	2400      	movs	r4, #0
   bbd36:	e7f8      	b.n	bbd2a <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x28>

000bbd38 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   bbd38:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbd3a:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   bbd3e:	4f18      	ldr	r7, [pc, #96]	; (bbda0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   bbd40:	4e18      	ldr	r6, [pc, #96]	; (bbda4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   bbd42:	4d19      	ldr	r5, [pc, #100]	; (bbda8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   bbd44:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   bbd46:	42a0      	cmp	r0, r4
   bbd48:	d00c      	beq.n	bbd64 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   bbd4a:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   bbd4e:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   bbd50:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   bbd54:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   bbd56:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   bbd58:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   bbd5c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   bbd60:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   bbd62:	e7f0      	b.n	bbd46 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   bbd64:	f001 0403 	and.w	r4, r1, #3
   bbd68:	4404      	add	r4, r0
    k = 0;
   bbd6a:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   bbd6c:	42a0      	cmp	r0, r4
   bbd6e:	d004      	beq.n	bbd7a <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   bbd70:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   bbd74:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   bbd78:	e7f8      	b.n	bbd6c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   bbd7a:	4809      	ldr	r0, [pc, #36]	; (bbda0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   bbd7c:	4343      	muls	r3, r0
        k *= 0x1b873593;
   bbd7e:	4809      	ldr	r0, [pc, #36]	; (bbda4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   bbd80:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   bbd84:	404a      	eors	r2, r1
        k *= 0x1b873593;
   bbd86:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   bbd88:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   bbd8a:	4b08      	ldr	r3, [pc, #32]	; (bbdac <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   bbd8c:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   bbd90:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   bbd92:	4b07      	ldr	r3, [pc, #28]	; (bbdb0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   bbd94:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   bbd98:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   bbd9a:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   bbd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bbda0:	cc9e2d51 	.word	0xcc9e2d51
   bbda4:	1b873593 	.word	0x1b873593
   bbda8:	e6546b64 	.word	0xe6546b64
   bbdac:	85ebca6b 	.word	0x85ebca6b
   bbdb0:	c2b2ae35 	.word	0xc2b2ae35

000bbdb4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   bbdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbdb6:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bbdb8:	3004      	adds	r0, #4
   bbdba:	f7fa f811 	bl	b5de0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   bbdbe:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   bbdc0:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   bbdc2:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   bbdc4:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bbdc6:	68a6      	ldr	r6, [r4, #8]
   bbdc8:	4a05      	ldr	r2, [pc, #20]	; (bbde0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   bbdca:	88f1      	ldrh	r1, [r6, #6]
   bbdcc:	4630      	mov	r0, r6
   bbdce:	f7ff ffb3 	bl	bbd38 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   bbdd2:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bbdd4:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   bbdd6:	6860      	ldr	r0, [r4, #4]
   bbdd8:	f7ff ff7d 	bl	bbcd6 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bbddc:	4628      	mov	r0, r5
   bbdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bbde0:	851c2a3f 	.word	0x851c2a3f

000bbde4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   bbde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbde8:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bbdea:	3004      	adds	r0, #4
   bbdec:	4690      	mov	r8, r2
   bbdee:	460d      	mov	r5, r1
   bbdf0:	461f      	mov	r7, r3
   bbdf2:	f7f9 fff5 	bl	b5de0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   bbdf6:	68e2      	ldr	r2, [r4, #12]
   bbdf8:	f1c8 0301 	rsb	r3, r8, #1
   bbdfc:	4413      	add	r3, r2
   bbdfe:	42ab      	cmp	r3, r5
   bbe00:	d31f      	bcc.n	bbe42 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
   bbe02:	4638      	mov	r0, r7
   bbe04:	f004 fcd9 	bl	c07ba <strlen>
   bbe08:	4540      	cmp	r0, r8
   bbe0a:	d21a      	bcs.n	bbe42 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
            char *p = (char *)savedDataHeader;
   bbe0c:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   bbe0e:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   bbe10:	4629      	mov	r1, r5
   bbe12:	4638      	mov	r0, r7
   bbe14:	f004 fca1 	bl	c075a <strcmp>
   bbe18:	b188      	cbz	r0, bbe3e <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5a>
                memset(p, 0, size);
   bbe1a:	4642      	mov	r2, r8
   bbe1c:	2100      	movs	r1, #0
   bbe1e:	4628      	mov	r0, r5
   bbe20:	f004 fc10 	bl	c0644 <memset>
                strcpy(p, value);
   bbe24:	4639      	mov	r1, r7
   bbe26:	4628      	mov	r0, r5
   bbe28:	f004 fca1 	bl	c076e <strcpy>
                savedDataHeader->hash = getHash();
   bbe2c:	4620      	mov	r0, r4
   bbe2e:	68a5      	ldr	r5, [r4, #8]
   bbe30:	f7ff ffc0 	bl	bbdb4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bbe34:	60a8      	str	r0, [r5, #8]
                saveOrDefer();
   bbe36:	6823      	ldr	r3, [r4, #0]
   bbe38:	4620      	mov	r0, r4
   bbe3a:	691b      	ldr	r3, [r3, #16]
   bbe3c:	4798      	blx	r3
            result = true;
   bbe3e:	2501      	movs	r5, #1
   bbe40:	e000      	b.n	bbe44 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x60>
    bool result = false;
   bbe42:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   bbe44:	6860      	ldr	r0, [r4, #4]
   bbe46:	f7ff ff46 	bl	bbcd6 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bbe4a:	4628      	mov	r0, r5
   bbe4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbe50 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   bbe50:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbe52:	460d      	mov	r5, r1
   bbe54:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   bbe56:	f7ff ffad 	bl	bbdb4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   bbe5a:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   bbe5c:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   bbe5e:	d923      	bls.n	bbea8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   bbe60:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   bbe62:	6922      	ldr	r2, [r4, #16]
   bbe64:	6819      	ldr	r1, [r3, #0]
   bbe66:	4291      	cmp	r1, r2
   bbe68:	d11f      	bne.n	bbeaa <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   bbe6a:	8899      	ldrh	r1, [r3, #4]
   bbe6c:	8aa2      	ldrh	r2, [r4, #20]
   bbe6e:	4291      	cmp	r1, r2
   bbe70:	d11b      	bne.n	bbeaa <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   bbe72:	88d9      	ldrh	r1, [r3, #6]
   bbe74:	b2aa      	uxth	r2, r5
   bbe76:	4291      	cmp	r1, r2
   bbe78:	d817      	bhi.n	bbeaa <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   bbe7a:	689a      	ldr	r2, [r3, #8]
   bbe7c:	4282      	cmp	r2, r0
   bbe7e:	d114      	bne.n	bbeaa <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   bbe80:	68e2      	ldr	r2, [r4, #12]
   bbe82:	42aa      	cmp	r2, r5
   bbe84:	d905      	bls.n	bbe92 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   bbe86:	2100      	movs	r1, #0
   bbe88:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   bbe8a:	68e2      	ldr	r2, [r4, #12]
   bbe8c:	3501      	adds	r5, #1
   bbe8e:	42aa      	cmp	r2, r5
   bbe90:	d8fa      	bhi.n	bbe88 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   bbe92:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   bbe96:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   bbe98:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   bbe9a:	68a5      	ldr	r5, [r4, #8]
   bbe9c:	f7ff ff8a 	bl	bbdb4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bbea0:	60a8      	str	r0, [r5, #8]
        isValid = true;
   bbea2:	2001      	movs	r0, #1
}
   bbea4:	b002      	add	sp, #8
   bbea6:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   bbea8:	b19d      	cbz	r5, bbed2 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   bbeaa:	68a1      	ldr	r1, [r4, #8]
   bbeac:	680a      	ldr	r2, [r1, #0]
   bbeae:	b192      	cbz	r2, bbed6 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   bbeb0:	6888      	ldr	r0, [r1, #8]
   bbeb2:	888b      	ldrh	r3, [r1, #4]
   bbeb4:	9001      	str	r0, [sp, #4]
   bbeb6:	88c9      	ldrh	r1, [r1, #6]
   bbeb8:	4808      	ldr	r0, [pc, #32]	; (bbedc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bbeba:	9100      	str	r1, [sp, #0]
   bbebc:	4908      	ldr	r1, [pc, #32]	; (bbee0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   bbebe:	f7fb f851 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   bbec2:	e9cd 5600 	strd	r5, r6, [sp]
   bbec6:	8aa3      	ldrh	r3, [r4, #20]
   bbec8:	6922      	ldr	r2, [r4, #16]
   bbeca:	4906      	ldr	r1, [pc, #24]	; (bbee4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   bbecc:	4803      	ldr	r0, [pc, #12]	; (bbedc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bbece:	f7fb f849 	bl	b6f64 <_ZNK5spark6Logger5traceEPKcz>
   bbed2:	2000      	movs	r0, #0
   bbed4:	e7e6      	b.n	bbea4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bbed6:	4610      	mov	r0, r2
   bbed8:	e7e4      	b.n	bbea4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bbeda:	bf00      	nop
   bbedc:	2003e654 	.word	0x2003e654
   bbee0:	000c2314 	.word	0x000c2314
   bbee4:	000c2345 	.word	0x000c2345

000bbee8 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   bbee8:	b538      	push	{r3, r4, r5, lr}
   bbeea:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   bbeec:	68c2      	ldr	r2, [r0, #12]
   bbeee:	6880      	ldr	r0, [r0, #8]
   bbef0:	2100      	movs	r1, #0
   bbef2:	f004 fba7 	bl	c0644 <memset>
    savedDataHeader->magic = savedDataMagic;
   bbef6:	68a3      	ldr	r3, [r4, #8]
   bbef8:	6922      	ldr	r2, [r4, #16]
   bbefa:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   bbefc:	68a3      	ldr	r3, [r4, #8]
   bbefe:	8aa2      	ldrh	r2, [r4, #20]
   bbf00:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   bbf02:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   bbf06:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   bbf08:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   bbf0a:	68a5      	ldr	r5, [r4, #8]
   bbf0c:	f7ff ff52 	bl	bbdb4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bbf10:	60a8      	str	r0, [r5, #8]
}
   bbf12:	bd38      	pop	{r3, r4, r5, pc}

000bbf14 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   bbf14:	b508      	push	{r3, lr}
   bbf16:	4b02      	ldr	r3, [pc, #8]	; (bbf20 <cellular_signal+0xc>)
   bbf18:	681b      	ldr	r3, [r3, #0]
   bbf1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bbf1c:	9301      	str	r3, [sp, #4]
   bbf1e:	bd08      	pop	{r3, pc}
   bbf20:	00030274 	.word	0x00030274

000bbf24 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   bbf24:	b508      	push	{r3, lr}
   bbf26:	4b02      	ldr	r3, [pc, #8]	; (bbf30 <os_thread_create+0xc>)
   bbf28:	681b      	ldr	r3, [r3, #0]
   bbf2a:	685b      	ldr	r3, [r3, #4]
   bbf2c:	9301      	str	r3, [sp, #4]
   bbf2e:	bd08      	pop	{r3, pc}
   bbf30:	00030248 	.word	0x00030248

000bbf34 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   bbf34:	b508      	push	{r3, lr}
   bbf36:	4b02      	ldr	r3, [pc, #8]	; (bbf40 <os_thread_is_current+0xc>)
   bbf38:	681b      	ldr	r3, [r3, #0]
   bbf3a:	689b      	ldr	r3, [r3, #8]
   bbf3c:	9301      	str	r3, [sp, #4]
   bbf3e:	bd08      	pop	{r3, pc}
   bbf40:	00030248 	.word	0x00030248

000bbf44 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   bbf44:	b508      	push	{r3, lr}
   bbf46:	4b02      	ldr	r3, [pc, #8]	; (bbf50 <os_thread_join+0xc>)
   bbf48:	681b      	ldr	r3, [r3, #0]
   bbf4a:	691b      	ldr	r3, [r3, #16]
   bbf4c:	9301      	str	r3, [sp, #4]
   bbf4e:	bd08      	pop	{r3, pc}
   bbf50:	00030248 	.word	0x00030248

000bbf54 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   bbf54:	b508      	push	{r3, lr}
   bbf56:	4b02      	ldr	r3, [pc, #8]	; (bbf60 <os_thread_cleanup+0xc>)
   bbf58:	681b      	ldr	r3, [r3, #0]
   bbf5a:	695b      	ldr	r3, [r3, #20]
   bbf5c:	9301      	str	r3, [sp, #4]
   bbf5e:	bd08      	pop	{r3, pc}
   bbf60:	00030248 	.word	0x00030248

000bbf64 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   bbf64:	b508      	push	{r3, lr}
   bbf66:	4b02      	ldr	r3, [pc, #8]	; (bbf70 <os_mutex_create+0xc>)
   bbf68:	681b      	ldr	r3, [r3, #0]
   bbf6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bbf6c:	9301      	str	r3, [sp, #4]
   bbf6e:	bd08      	pop	{r3, pc}
   bbf70:	00030248 	.word	0x00030248

000bbf74 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   bbf74:	b508      	push	{r3, lr}
   bbf76:	4b02      	ldr	r3, [pc, #8]	; (bbf80 <os_mutex_lock+0xc>)
   bbf78:	681b      	ldr	r3, [r3, #0]
   bbf7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bbf7c:	9301      	str	r3, [sp, #4]
   bbf7e:	bd08      	pop	{r3, pc}
   bbf80:	00030248 	.word	0x00030248

000bbf84 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   bbf84:	b508      	push	{r3, lr}
   bbf86:	4b02      	ldr	r3, [pc, #8]	; (bbf90 <os_mutex_unlock+0xc>)
   bbf88:	681b      	ldr	r3, [r3, #0]
   bbf8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bbf8c:	9301      	str	r3, [sp, #4]
   bbf8e:	bd08      	pop	{r3, pc}
   bbf90:	00030248 	.word	0x00030248

000bbf94 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bbf94:	b508      	push	{r3, lr}
   bbf96:	4b02      	ldr	r3, [pc, #8]	; (bbfa0 <os_mutex_recursive_create+0xc>)
   bbf98:	681b      	ldr	r3, [r3, #0]
   bbf9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bbf9c:	9301      	str	r3, [sp, #4]
   bbf9e:	bd08      	pop	{r3, pc}
   bbfa0:	00030248 	.word	0x00030248

000bbfa4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bbfa4:	b508      	push	{r3, lr}
   bbfa6:	4b02      	ldr	r3, [pc, #8]	; (bbfb0 <os_mutex_recursive_destroy+0xc>)
   bbfa8:	681b      	ldr	r3, [r3, #0]
   bbfaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bbfac:	9301      	str	r3, [sp, #4]
   bbfae:	bd08      	pop	{r3, pc}
   bbfb0:	00030248 	.word	0x00030248

000bbfb4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bbfb4:	b508      	push	{r3, lr}
   bbfb6:	4b02      	ldr	r3, [pc, #8]	; (bbfc0 <os_mutex_recursive_lock+0xc>)
   bbfb8:	681b      	ldr	r3, [r3, #0]
   bbfba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bbfbc:	9301      	str	r3, [sp, #4]
   bbfbe:	bd08      	pop	{r3, pc}
   bbfc0:	00030248 	.word	0x00030248

000bbfc4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bbfc4:	b508      	push	{r3, lr}
   bbfc6:	4b02      	ldr	r3, [pc, #8]	; (bbfd0 <os_mutex_recursive_unlock+0xc>)
   bbfc8:	681b      	ldr	r3, [r3, #0]
   bbfca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bbfcc:	9301      	str	r3, [sp, #4]
   bbfce:	bd08      	pop	{r3, pc}
   bbfd0:	00030248 	.word	0x00030248

000bbfd4 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   bbfd4:	b508      	push	{r3, lr}
   bbfd6:	4b02      	ldr	r3, [pc, #8]	; (bbfe0 <os_thread_exit+0xc>)
   bbfd8:	681b      	ldr	r3, [r3, #0]
   bbfda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bbfdc:	9301      	str	r3, [sp, #4]
   bbfde:	bd08      	pop	{r3, pc}
   bbfe0:	00030248 	.word	0x00030248

000bbfe4 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   bbfe4:	b508      	push	{r3, lr}
   bbfe6:	4b02      	ldr	r3, [pc, #8]	; (bbff0 <HAL_Core_Runtime_Info+0xc>)
   bbfe8:	681b      	ldr	r3, [r3, #0]
   bbfea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bbfec:	9301      	str	r3, [sp, #4]
   bbfee:	bd08      	pop	{r3, pc}
   bbff0:	00030234 	.word	0x00030234

000bbff4 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   bbff4:	b508      	push	{r3, lr}
   bbff6:	4b02      	ldr	r3, [pc, #8]	; (bc000 <HAL_Feature_Set+0xc>)
   bbff8:	681b      	ldr	r3, [r3, #0]
   bbffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bbffc:	9301      	str	r3, [sp, #4]
   bbffe:	bd08      	pop	{r3, pc}
   bc000:	00030234 	.word	0x00030234

000bc004 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bc004:	b508      	push	{r3, lr}
   bc006:	4b02      	ldr	r3, [pc, #8]	; (bc010 <HAL_RNG_GetRandomNumber+0xc>)
   bc008:	681b      	ldr	r3, [r3, #0]
   bc00a:	685b      	ldr	r3, [r3, #4]
   bc00c:	9301      	str	r3, [sp, #4]
   bc00e:	bd08      	pop	{r3, pc}
   bc010:	00030218 	.word	0x00030218

000bc014 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   bc014:	b508      	push	{r3, lr}
   bc016:	4b02      	ldr	r3, [pc, #8]	; (bc020 <HAL_Delay_Milliseconds+0xc>)
   bc018:	681b      	ldr	r3, [r3, #0]
   bc01a:	689b      	ldr	r3, [r3, #8]
   bc01c:	9301      	str	r3, [sp, #4]
   bc01e:	bd08      	pop	{r3, pc}
   bc020:	00030218 	.word	0x00030218

000bc024 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bc024:	b508      	push	{r3, lr}
   bc026:	4b02      	ldr	r3, [pc, #8]	; (bc030 <HAL_Delay_Microseconds+0xc>)
   bc028:	681b      	ldr	r3, [r3, #0]
   bc02a:	68db      	ldr	r3, [r3, #12]
   bc02c:	9301      	str	r3, [sp, #4]
   bc02e:	bd08      	pop	{r3, pc}
   bc030:	00030218 	.word	0x00030218

000bc034 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bc034:	b508      	push	{r3, lr}
   bc036:	4b02      	ldr	r3, [pc, #8]	; (bc040 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bc038:	681b      	ldr	r3, [r3, #0]
   bc03a:	695b      	ldr	r3, [r3, #20]
   bc03c:	9301      	str	r3, [sp, #4]
   bc03e:	bd08      	pop	{r3, pc}
   bc040:	00030218 	.word	0x00030218

000bc044 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bc044:	b508      	push	{r3, lr}
   bc046:	4b02      	ldr	r3, [pc, #8]	; (bc050 <hal_rtc_time_is_valid+0xc>)
   bc048:	681b      	ldr	r3, [r3, #0]
   bc04a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bc04c:	9301      	str	r3, [sp, #4]
   bc04e:	bd08      	pop	{r3, pc}
   bc050:	00030218 	.word	0x00030218

000bc054 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   bc054:	b508      	push	{r3, lr}
   bc056:	4b02      	ldr	r3, [pc, #8]	; (bc060 <hal_timer_millis+0xc>)
   bc058:	681b      	ldr	r3, [r3, #0]
   bc05a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bc05c:	9301      	str	r3, [sp, #4]
   bc05e:	bd08      	pop	{r3, pc}
   bc060:	00030218 	.word	0x00030218

000bc064 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bc064:	b508      	push	{r3, lr}
   bc066:	4b02      	ldr	r3, [pc, #8]	; (bc070 <hal_rtc_get_time+0xc>)
   bc068:	681b      	ldr	r3, [r3, #0]
   bc06a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bc06c:	9301      	str	r3, [sp, #4]
   bc06e:	bd08      	pop	{r3, pc}
   bc070:	00030218 	.word	0x00030218

000bc074 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   bc074:	b508      	push	{r3, lr}
   bc076:	4b02      	ldr	r3, [pc, #8]	; (bc080 <hal_rtc_set_time+0xc>)
   bc078:	681b      	ldr	r3, [r3, #0]
   bc07a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   bc07c:	9301      	str	r3, [sp, #4]
   bc07e:	bd08      	pop	{r3, pc}
   bc080:	00030218 	.word	0x00030218

000bc084 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bc084:	b508      	push	{r3, lr}
   bc086:	4b02      	ldr	r3, [pc, #8]	; (bc090 <HAL_Validate_Pin_Function+0xc>)
   bc088:	681b      	ldr	r3, [r3, #0]
   bc08a:	685b      	ldr	r3, [r3, #4]
   bc08c:	9301      	str	r3, [sp, #4]
   bc08e:	bd08      	pop	{r3, pc}
   bc090:	0003022c 	.word	0x0003022c

000bc094 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bc094:	b508      	push	{r3, lr}
   bc096:	4b02      	ldr	r3, [pc, #8]	; (bc0a0 <HAL_Pin_Mode+0xc>)
   bc098:	681b      	ldr	r3, [r3, #0]
   bc09a:	689b      	ldr	r3, [r3, #8]
   bc09c:	9301      	str	r3, [sp, #4]
   bc09e:	bd08      	pop	{r3, pc}
   bc0a0:	0003022c 	.word	0x0003022c

000bc0a4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bc0a4:	b508      	push	{r3, lr}
   bc0a6:	4b02      	ldr	r3, [pc, #8]	; (bc0b0 <HAL_Get_Pin_Mode+0xc>)
   bc0a8:	681b      	ldr	r3, [r3, #0]
   bc0aa:	68db      	ldr	r3, [r3, #12]
   bc0ac:	9301      	str	r3, [sp, #4]
   bc0ae:	bd08      	pop	{r3, pc}
   bc0b0:	0003022c 	.word	0x0003022c

000bc0b4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bc0b4:	b508      	push	{r3, lr}
   bc0b6:	4b02      	ldr	r3, [pc, #8]	; (bc0c0 <HAL_GPIO_Write+0xc>)
   bc0b8:	681b      	ldr	r3, [r3, #0]
   bc0ba:	691b      	ldr	r3, [r3, #16]
   bc0bc:	9301      	str	r3, [sp, #4]
   bc0be:	bd08      	pop	{r3, pc}
   bc0c0:	0003022c 	.word	0x0003022c

000bc0c4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bc0c4:	b508      	push	{r3, lr}
   bc0c6:	4b02      	ldr	r3, [pc, #8]	; (bc0d0 <HAL_GPIO_Read+0xc>)
   bc0c8:	681b      	ldr	r3, [r3, #0]
   bc0ca:	695b      	ldr	r3, [r3, #20]
   bc0cc:	9301      	str	r3, [sp, #4]
   bc0ce:	bd08      	pop	{r3, pc}
   bc0d0:	0003022c 	.word	0x0003022c

000bc0d4 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bc0d4:	b508      	push	{r3, lr}
   bc0d6:	4b02      	ldr	r3, [pc, #8]	; (bc0e0 <HAL_Interrupts_Attach+0xc>)
   bc0d8:	681b      	ldr	r3, [r3, #0]
   bc0da:	699b      	ldr	r3, [r3, #24]
   bc0dc:	9301      	str	r3, [sp, #4]
   bc0de:	bd08      	pop	{r3, pc}
   bc0e0:	0003022c 	.word	0x0003022c

000bc0e4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bc0e4:	b508      	push	{r3, lr}
   bc0e6:	4b02      	ldr	r3, [pc, #8]	; (bc0f0 <HAL_Interrupts_Detach+0xc>)
   bc0e8:	681b      	ldr	r3, [r3, #0]
   bc0ea:	69db      	ldr	r3, [r3, #28]
   bc0ec:	9301      	str	r3, [sp, #4]
   bc0ee:	bd08      	pop	{r3, pc}
   bc0f0:	0003022c 	.word	0x0003022c

000bc0f4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bc0f4:	b508      	push	{r3, lr}
   bc0f6:	4b02      	ldr	r3, [pc, #8]	; (bc100 <hal_adc_read+0xc>)
   bc0f8:	681b      	ldr	r3, [r3, #0]
   bc0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc0fc:	9301      	str	r3, [sp, #4]
   bc0fe:	bd08      	pop	{r3, pc}
   bc100:	0003022c 	.word	0x0003022c

000bc104 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bc104:	b508      	push	{r3, lr}
   bc106:	4b02      	ldr	r3, [pc, #8]	; (bc110 <hal_i2c_begin+0xc>)
   bc108:	681b      	ldr	r3, [r3, #0]
   bc10a:	68db      	ldr	r3, [r3, #12]
   bc10c:	9301      	str	r3, [sp, #4]
   bc10e:	bd08      	pop	{r3, pc}
   bc110:	00030228 	.word	0x00030228

000bc114 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bc114:	b508      	push	{r3, lr}
   bc116:	4b02      	ldr	r3, [pc, #8]	; (bc120 <hal_i2c_begin_transmission+0xc>)
   bc118:	681b      	ldr	r3, [r3, #0]
   bc11a:	699b      	ldr	r3, [r3, #24]
   bc11c:	9301      	str	r3, [sp, #4]
   bc11e:	bd08      	pop	{r3, pc}
   bc120:	00030228 	.word	0x00030228

000bc124 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bc124:	b508      	push	{r3, lr}
   bc126:	4b02      	ldr	r3, [pc, #8]	; (bc130 <hal_i2c_end_transmission+0xc>)
   bc128:	681b      	ldr	r3, [r3, #0]
   bc12a:	69db      	ldr	r3, [r3, #28]
   bc12c:	9301      	str	r3, [sp, #4]
   bc12e:	bd08      	pop	{r3, pc}
   bc130:	00030228 	.word	0x00030228

000bc134 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bc134:	b508      	push	{r3, lr}
   bc136:	4b02      	ldr	r3, [pc, #8]	; (bc140 <hal_i2c_write+0xc>)
   bc138:	681b      	ldr	r3, [r3, #0]
   bc13a:	6a1b      	ldr	r3, [r3, #32]
   bc13c:	9301      	str	r3, [sp, #4]
   bc13e:	bd08      	pop	{r3, pc}
   bc140:	00030228 	.word	0x00030228

000bc144 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bc144:	b508      	push	{r3, lr}
   bc146:	4b02      	ldr	r3, [pc, #8]	; (bc150 <hal_i2c_available+0xc>)
   bc148:	681b      	ldr	r3, [r3, #0]
   bc14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc14c:	9301      	str	r3, [sp, #4]
   bc14e:	bd08      	pop	{r3, pc}
   bc150:	00030228 	.word	0x00030228

000bc154 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bc154:	b508      	push	{r3, lr}
   bc156:	4b02      	ldr	r3, [pc, #8]	; (bc160 <hal_i2c_read+0xc>)
   bc158:	681b      	ldr	r3, [r3, #0]
   bc15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bc15c:	9301      	str	r3, [sp, #4]
   bc15e:	bd08      	pop	{r3, pc}
   bc160:	00030228 	.word	0x00030228

000bc164 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bc164:	b508      	push	{r3, lr}
   bc166:	4b02      	ldr	r3, [pc, #8]	; (bc170 <hal_i2c_peek+0xc>)
   bc168:	681b      	ldr	r3, [r3, #0]
   bc16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc16c:	9301      	str	r3, [sp, #4]
   bc16e:	bd08      	pop	{r3, pc}
   bc170:	00030228 	.word	0x00030228

000bc174 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bc174:	b508      	push	{r3, lr}
   bc176:	4b02      	ldr	r3, [pc, #8]	; (bc180 <hal_i2c_flush+0xc>)
   bc178:	681b      	ldr	r3, [r3, #0]
   bc17a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc17c:	9301      	str	r3, [sp, #4]
   bc17e:	bd08      	pop	{r3, pc}
   bc180:	00030228 	.word	0x00030228

000bc184 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bc184:	b508      	push	{r3, lr}
   bc186:	4b02      	ldr	r3, [pc, #8]	; (bc190 <hal_i2c_is_enabled+0xc>)
   bc188:	681b      	ldr	r3, [r3, #0]
   bc18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc18c:	9301      	str	r3, [sp, #4]
   bc18e:	bd08      	pop	{r3, pc}
   bc190:	00030228 	.word	0x00030228

000bc194 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bc194:	b508      	push	{r3, lr}
   bc196:	4b02      	ldr	r3, [pc, #8]	; (bc1a0 <hal_i2c_init+0xc>)
   bc198:	681b      	ldr	r3, [r3, #0]
   bc19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc19c:	9301      	str	r3, [sp, #4]
   bc19e:	bd08      	pop	{r3, pc}
   bc1a0:	00030228 	.word	0x00030228

000bc1a4 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   bc1a4:	b508      	push	{r3, lr}
   bc1a6:	4b02      	ldr	r3, [pc, #8]	; (bc1b0 <hal_i2c_lock+0xc>)
   bc1a8:	681b      	ldr	r3, [r3, #0]
   bc1aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bc1ac:	9301      	str	r3, [sp, #4]
   bc1ae:	bd08      	pop	{r3, pc}
   bc1b0:	00030228 	.word	0x00030228

000bc1b4 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   bc1b4:	b508      	push	{r3, lr}
   bc1b6:	4b02      	ldr	r3, [pc, #8]	; (bc1c0 <hal_i2c_unlock+0xc>)
   bc1b8:	681b      	ldr	r3, [r3, #0]
   bc1ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc1bc:	9301      	str	r3, [sp, #4]
   bc1be:	bd08      	pop	{r3, pc}
   bc1c0:	00030228 	.word	0x00030228

000bc1c4 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bc1c4:	b508      	push	{r3, lr}
   bc1c6:	4b02      	ldr	r3, [pc, #8]	; (bc1d0 <hal_i2c_request_ex+0xc>)
   bc1c8:	681b      	ldr	r3, [r3, #0]
   bc1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bc1cc:	9301      	str	r3, [sp, #4]
   bc1ce:	bd08      	pop	{r3, pc}
   bc1d0:	00030228 	.word	0x00030228

000bc1d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bc1d4:	b508      	push	{r3, lr}
   bc1d6:	4b02      	ldr	r3, [pc, #8]	; (bc1e0 <inet_inet_ntop+0xc>)
   bc1d8:	681b      	ldr	r3, [r3, #0]
   bc1da:	695b      	ldr	r3, [r3, #20]
   bc1dc:	9301      	str	r3, [sp, #4]
   bc1de:	bd08      	pop	{r3, pc}
   bc1e0:	00030264 	.word	0x00030264

000bc1e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bc1e4:	b508      	push	{r3, lr}
   bc1e6:	4b02      	ldr	r3, [pc, #8]	; (bc1f0 <netdb_freeaddrinfo+0xc>)
   bc1e8:	681b      	ldr	r3, [r3, #0]
   bc1ea:	689b      	ldr	r3, [r3, #8]
   bc1ec:	9301      	str	r3, [sp, #4]
   bc1ee:	bd08      	pop	{r3, pc}
   bc1f0:	00030268 	.word	0x00030268

000bc1f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bc1f4:	b508      	push	{r3, lr}
   bc1f6:	4b02      	ldr	r3, [pc, #8]	; (bc200 <netdb_getaddrinfo+0xc>)
   bc1f8:	681b      	ldr	r3, [r3, #0]
   bc1fa:	68db      	ldr	r3, [r3, #12]
   bc1fc:	9301      	str	r3, [sp, #4]
   bc1fe:	bd08      	pop	{r3, pc}
   bc200:	00030268 	.word	0x00030268

000bc204 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bc204:	b508      	push	{r3, lr}
   bc206:	4b02      	ldr	r3, [pc, #8]	; (bc210 <hal_spi_begin+0xc>)
   bc208:	681b      	ldr	r3, [r3, #0]
   bc20a:	681b      	ldr	r3, [r3, #0]
   bc20c:	9301      	str	r3, [sp, #4]
   bc20e:	bd08      	pop	{r3, pc}
   bc210:	00030230 	.word	0x00030230

000bc214 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   bc214:	b508      	push	{r3, lr}
   bc216:	4b02      	ldr	r3, [pc, #8]	; (bc220 <hal_spi_end+0xc>)
   bc218:	681b      	ldr	r3, [r3, #0]
   bc21a:	685b      	ldr	r3, [r3, #4]
   bc21c:	9301      	str	r3, [sp, #4]
   bc21e:	bd08      	pop	{r3, pc}
   bc220:	00030230 	.word	0x00030230

000bc224 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bc224:	b508      	push	{r3, lr}
   bc226:	4b02      	ldr	r3, [pc, #8]	; (bc230 <hal_spi_transfer+0xc>)
   bc228:	681b      	ldr	r3, [r3, #0]
   bc22a:	695b      	ldr	r3, [r3, #20]
   bc22c:	9301      	str	r3, [sp, #4]
   bc22e:	bd08      	pop	{r3, pc}
   bc230:	00030230 	.word	0x00030230

000bc234 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bc234:	b508      	push	{r3, lr}
   bc236:	4b02      	ldr	r3, [pc, #8]	; (bc240 <hal_spi_init+0xc>)
   bc238:	681b      	ldr	r3, [r3, #0]
   bc23a:	69db      	ldr	r3, [r3, #28]
   bc23c:	9301      	str	r3, [sp, #4]
   bc23e:	bd08      	pop	{r3, pc}
   bc240:	00030230 	.word	0x00030230

000bc244 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bc244:	b508      	push	{r3, lr}
   bc246:	4b02      	ldr	r3, [pc, #8]	; (bc250 <hal_spi_is_enabled+0xc>)
   bc248:	681b      	ldr	r3, [r3, #0]
   bc24a:	6a1b      	ldr	r3, [r3, #32]
   bc24c:	9301      	str	r3, [sp, #4]
   bc24e:	bd08      	pop	{r3, pc}
   bc250:	00030230 	.word	0x00030230

000bc254 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bc254:	b508      	push	{r3, lr}
   bc256:	4b02      	ldr	r3, [pc, #8]	; (bc260 <hal_spi_info+0xc>)
   bc258:	681b      	ldr	r3, [r3, #0]
   bc25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc25c:	9301      	str	r3, [sp, #4]
   bc25e:	bd08      	pop	{r3, pc}
   bc260:	00030230 	.word	0x00030230

000bc264 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bc264:	b508      	push	{r3, lr}
   bc266:	4b02      	ldr	r3, [pc, #8]	; (bc270 <hal_spi_set_settings+0xc>)
   bc268:	681b      	ldr	r3, [r3, #0]
   bc26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bc26c:	9301      	str	r3, [sp, #4]
   bc26e:	bd08      	pop	{r3, pc}
   bc270:	00030230 	.word	0x00030230

000bc274 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bc274:	b508      	push	{r3, lr}
   bc276:	4b02      	ldr	r3, [pc, #8]	; (bc280 <hal_spi_acquire+0xc>)
   bc278:	681b      	ldr	r3, [r3, #0]
   bc27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc27c:	9301      	str	r3, [sp, #4]
   bc27e:	bd08      	pop	{r3, pc}
   bc280:	00030230 	.word	0x00030230

000bc284 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bc284:	b508      	push	{r3, lr}
   bc286:	4b02      	ldr	r3, [pc, #8]	; (bc290 <hal_spi_release+0xc>)
   bc288:	681b      	ldr	r3, [r3, #0]
   bc28a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc28c:	9301      	str	r3, [sp, #4]
   bc28e:	bd08      	pop	{r3, pc}
   bc290:	00030230 	.word	0x00030230

000bc294 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   bc294:	b508      	push	{r3, lr}
   bc296:	4b02      	ldr	r3, [pc, #8]	; (bc2a0 <_open+0xc>)
   bc298:	681b      	ldr	r3, [r3, #0]
   bc29a:	681b      	ldr	r3, [r3, #0]
   bc29c:	9301      	str	r3, [sp, #4]
   bc29e:	bd08      	pop	{r3, pc}
   bc2a0:	00030284 	.word	0x00030284

000bc2a4 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   bc2a4:	b508      	push	{r3, lr}
   bc2a6:	4b02      	ldr	r3, [pc, #8]	; (bc2b0 <_write+0xc>)
   bc2a8:	681b      	ldr	r3, [r3, #0]
   bc2aa:	685b      	ldr	r3, [r3, #4]
   bc2ac:	9301      	str	r3, [sp, #4]
   bc2ae:	bd08      	pop	{r3, pc}
   bc2b0:	00030284 	.word	0x00030284

000bc2b4 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   bc2b4:	b508      	push	{r3, lr}
   bc2b6:	4b02      	ldr	r3, [pc, #8]	; (bc2c0 <_read+0xc>)
   bc2b8:	681b      	ldr	r3, [r3, #0]
   bc2ba:	689b      	ldr	r3, [r3, #8]
   bc2bc:	9301      	str	r3, [sp, #4]
   bc2be:	bd08      	pop	{r3, pc}
   bc2c0:	00030284 	.word	0x00030284

000bc2c4 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   bc2c4:	b508      	push	{r3, lr}
   bc2c6:	4b02      	ldr	r3, [pc, #8]	; (bc2d0 <_close+0xc>)
   bc2c8:	681b      	ldr	r3, [r3, #0]
   bc2ca:	68db      	ldr	r3, [r3, #12]
   bc2cc:	9301      	str	r3, [sp, #4]
   bc2ce:	bd08      	pop	{r3, pc}
   bc2d0:	00030284 	.word	0x00030284

000bc2d4 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   bc2d4:	b508      	push	{r3, lr}
   bc2d6:	4b02      	ldr	r3, [pc, #8]	; (bc2e0 <_fstat+0xc>)
   bc2d8:	681b      	ldr	r3, [r3, #0]
   bc2da:	695b      	ldr	r3, [r3, #20]
   bc2dc:	9301      	str	r3, [sp, #4]
   bc2de:	bd08      	pop	{r3, pc}
   bc2e0:	00030284 	.word	0x00030284

000bc2e4 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   bc2e4:	b508      	push	{r3, lr}
   bc2e6:	4b02      	ldr	r3, [pc, #8]	; (bc2f0 <_lseek+0xc>)
   bc2e8:	681b      	ldr	r3, [r3, #0]
   bc2ea:	6a1b      	ldr	r3, [r3, #32]
   bc2ec:	9301      	str	r3, [sp, #4]
   bc2ee:	bd08      	pop	{r3, pc}
   bc2f0:	00030284 	.word	0x00030284

000bc2f4 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   bc2f4:	b508      	push	{r3, lr}
   bc2f6:	4b02      	ldr	r3, [pc, #8]	; (bc300 <stat+0xc>)
   bc2f8:	681b      	ldr	r3, [r3, #0]
   bc2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc2fc:	9301      	str	r3, [sp, #4]
   bc2fe:	bd08      	pop	{r3, pc}
   bc300:	00030284 	.word	0x00030284

000bc304 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   bc304:	b508      	push	{r3, lr}
   bc306:	4b02      	ldr	r3, [pc, #8]	; (bc310 <mkdir+0xc>)
   bc308:	681b      	ldr	r3, [r3, #0]
   bc30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bc30c:	9301      	str	r3, [sp, #4]
   bc30e:	bd08      	pop	{r3, pc}
   bc310:	00030284 	.word	0x00030284

000bc314 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   bc314:	b508      	push	{r3, lr}
   bc316:	4b02      	ldr	r3, [pc, #8]	; (bc320 <_unlink+0xc>)
   bc318:	681b      	ldr	r3, [r3, #0]
   bc31a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc31c:	9301      	str	r3, [sp, #4]
   bc31e:	bd08      	pop	{r3, pc}
   bc320:	00030284 	.word	0x00030284

000bc324 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   bc324:	b508      	push	{r3, lr}
   bc326:	4b02      	ldr	r3, [pc, #8]	; (bc330 <opendir+0xc>)
   bc328:	681b      	ldr	r3, [r3, #0]
   bc32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bc32c:	9301      	str	r3, [sp, #4]
   bc32e:	bd08      	pop	{r3, pc}
   bc330:	00030284 	.word	0x00030284

000bc334 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   bc334:	b508      	push	{r3, lr}
   bc336:	4b02      	ldr	r3, [pc, #8]	; (bc340 <readdir+0xc>)
   bc338:	681b      	ldr	r3, [r3, #0]
   bc33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc33c:	9301      	str	r3, [sp, #4]
   bc33e:	bd08      	pop	{r3, pc}
   bc340:	00030284 	.word	0x00030284

000bc344 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   bc344:	b508      	push	{r3, lr}
   bc346:	4b02      	ldr	r3, [pc, #8]	; (bc350 <closedir+0xc>)
   bc348:	681b      	ldr	r3, [r3, #0]
   bc34a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc34c:	9301      	str	r3, [sp, #4]
   bc34e:	bd08      	pop	{r3, pc}
   bc350:	00030284 	.word	0x00030284

000bc354 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bc354:	b508      	push	{r3, lr}
   bc356:	4b02      	ldr	r3, [pc, #8]	; (bc360 <hal_usart_end+0xc>)
   bc358:	681b      	ldr	r3, [r3, #0]
   bc35a:	689b      	ldr	r3, [r3, #8]
   bc35c:	9301      	str	r3, [sp, #4]
   bc35e:	bd08      	pop	{r3, pc}
   bc360:	0003023c 	.word	0x0003023c

000bc364 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bc364:	b508      	push	{r3, lr}
   bc366:	4b02      	ldr	r3, [pc, #8]	; (bc370 <hal_usart_write+0xc>)
   bc368:	681b      	ldr	r3, [r3, #0]
   bc36a:	68db      	ldr	r3, [r3, #12]
   bc36c:	9301      	str	r3, [sp, #4]
   bc36e:	bd08      	pop	{r3, pc}
   bc370:	0003023c 	.word	0x0003023c

000bc374 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bc374:	b508      	push	{r3, lr}
   bc376:	4b02      	ldr	r3, [pc, #8]	; (bc380 <hal_usart_available+0xc>)
   bc378:	681b      	ldr	r3, [r3, #0]
   bc37a:	691b      	ldr	r3, [r3, #16]
   bc37c:	9301      	str	r3, [sp, #4]
   bc37e:	bd08      	pop	{r3, pc}
   bc380:	0003023c 	.word	0x0003023c

000bc384 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bc384:	b508      	push	{r3, lr}
   bc386:	4b02      	ldr	r3, [pc, #8]	; (bc390 <hal_usart_read+0xc>)
   bc388:	681b      	ldr	r3, [r3, #0]
   bc38a:	695b      	ldr	r3, [r3, #20]
   bc38c:	9301      	str	r3, [sp, #4]
   bc38e:	bd08      	pop	{r3, pc}
   bc390:	0003023c 	.word	0x0003023c

000bc394 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bc394:	b508      	push	{r3, lr}
   bc396:	4b02      	ldr	r3, [pc, #8]	; (bc3a0 <hal_usart_peek+0xc>)
   bc398:	681b      	ldr	r3, [r3, #0]
   bc39a:	699b      	ldr	r3, [r3, #24]
   bc39c:	9301      	str	r3, [sp, #4]
   bc39e:	bd08      	pop	{r3, pc}
   bc3a0:	0003023c 	.word	0x0003023c

000bc3a4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bc3a4:	b508      	push	{r3, lr}
   bc3a6:	4b02      	ldr	r3, [pc, #8]	; (bc3b0 <hal_usart_flush+0xc>)
   bc3a8:	681b      	ldr	r3, [r3, #0]
   bc3aa:	69db      	ldr	r3, [r3, #28]
   bc3ac:	9301      	str	r3, [sp, #4]
   bc3ae:	bd08      	pop	{r3, pc}
   bc3b0:	0003023c 	.word	0x0003023c

000bc3b4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bc3b4:	b508      	push	{r3, lr}
   bc3b6:	4b02      	ldr	r3, [pc, #8]	; (bc3c0 <hal_usart_is_enabled+0xc>)
   bc3b8:	681b      	ldr	r3, [r3, #0]
   bc3ba:	6a1b      	ldr	r3, [r3, #32]
   bc3bc:	9301      	str	r3, [sp, #4]
   bc3be:	bd08      	pop	{r3, pc}
   bc3c0:	0003023c 	.word	0x0003023c

000bc3c4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bc3c4:	b508      	push	{r3, lr}
   bc3c6:	4b02      	ldr	r3, [pc, #8]	; (bc3d0 <hal_usart_available_data_for_write+0xc>)
   bc3c8:	681b      	ldr	r3, [r3, #0]
   bc3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bc3cc:	9301      	str	r3, [sp, #4]
   bc3ce:	bd08      	pop	{r3, pc}
   bc3d0:	0003023c 	.word	0x0003023c

000bc3d4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bc3d4:	b508      	push	{r3, lr}
   bc3d6:	4b02      	ldr	r3, [pc, #8]	; (bc3e0 <hal_usart_begin_config+0xc>)
   bc3d8:	681b      	ldr	r3, [r3, #0]
   bc3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc3dc:	9301      	str	r3, [sp, #4]
   bc3de:	bd08      	pop	{r3, pc}
   bc3e0:	0003023c 	.word	0x0003023c

000bc3e4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bc3e4:	b508      	push	{r3, lr}
   bc3e6:	4b02      	ldr	r3, [pc, #8]	; (bc3f0 <hal_usart_init_ex+0xc>)
   bc3e8:	681b      	ldr	r3, [r3, #0]
   bc3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc3ec:	9301      	str	r3, [sp, #4]
   bc3ee:	bd08      	pop	{r3, pc}
   bc3f0:	0003023c 	.word	0x0003023c

000bc3f4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bc3f4:	b508      	push	{r3, lr}
   bc3f6:	4b02      	ldr	r3, [pc, #8]	; (bc400 <HAL_USB_USART_Init+0xc>)
   bc3f8:	681b      	ldr	r3, [r3, #0]
   bc3fa:	681b      	ldr	r3, [r3, #0]
   bc3fc:	9301      	str	r3, [sp, #4]
   bc3fe:	bd08      	pop	{r3, pc}
   bc400:	0003024c 	.word	0x0003024c

000bc404 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bc404:	b508      	push	{r3, lr}
   bc406:	4b02      	ldr	r3, [pc, #8]	; (bc410 <HAL_USB_USART_Begin+0xc>)
   bc408:	681b      	ldr	r3, [r3, #0]
   bc40a:	685b      	ldr	r3, [r3, #4]
   bc40c:	9301      	str	r3, [sp, #4]
   bc40e:	bd08      	pop	{r3, pc}
   bc410:	0003024c 	.word	0x0003024c

000bc414 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bc414:	b508      	push	{r3, lr}
   bc416:	4b02      	ldr	r3, [pc, #8]	; (bc420 <HAL_USB_USART_End+0xc>)
   bc418:	681b      	ldr	r3, [r3, #0]
   bc41a:	689b      	ldr	r3, [r3, #8]
   bc41c:	9301      	str	r3, [sp, #4]
   bc41e:	bd08      	pop	{r3, pc}
   bc420:	0003024c 	.word	0x0003024c

000bc424 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bc424:	b508      	push	{r3, lr}
   bc426:	4b02      	ldr	r3, [pc, #8]	; (bc430 <HAL_USB_USART_Available_Data+0xc>)
   bc428:	681b      	ldr	r3, [r3, #0]
   bc42a:	691b      	ldr	r3, [r3, #16]
   bc42c:	9301      	str	r3, [sp, #4]
   bc42e:	bd08      	pop	{r3, pc}
   bc430:	0003024c 	.word	0x0003024c

000bc434 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bc434:	b508      	push	{r3, lr}
   bc436:	4b02      	ldr	r3, [pc, #8]	; (bc440 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bc438:	681b      	ldr	r3, [r3, #0]
   bc43a:	695b      	ldr	r3, [r3, #20]
   bc43c:	9301      	str	r3, [sp, #4]
   bc43e:	bd08      	pop	{r3, pc}
   bc440:	0003024c 	.word	0x0003024c

000bc444 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bc444:	b508      	push	{r3, lr}
   bc446:	4b02      	ldr	r3, [pc, #8]	; (bc450 <HAL_USB_USART_Receive_Data+0xc>)
   bc448:	681b      	ldr	r3, [r3, #0]
   bc44a:	699b      	ldr	r3, [r3, #24]
   bc44c:	9301      	str	r3, [sp, #4]
   bc44e:	bd08      	pop	{r3, pc}
   bc450:	0003024c 	.word	0x0003024c

000bc454 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bc454:	b508      	push	{r3, lr}
   bc456:	4b02      	ldr	r3, [pc, #8]	; (bc460 <HAL_USB_USART_Send_Data+0xc>)
   bc458:	681b      	ldr	r3, [r3, #0]
   bc45a:	69db      	ldr	r3, [r3, #28]
   bc45c:	9301      	str	r3, [sp, #4]
   bc45e:	bd08      	pop	{r3, pc}
   bc460:	0003024c 	.word	0x0003024c

000bc464 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bc464:	b508      	push	{r3, lr}
   bc466:	4b02      	ldr	r3, [pc, #8]	; (bc470 <HAL_USB_USART_Flush_Data+0xc>)
   bc468:	681b      	ldr	r3, [r3, #0]
   bc46a:	6a1b      	ldr	r3, [r3, #32]
   bc46c:	9301      	str	r3, [sp, #4]
   bc46e:	bd08      	pop	{r3, pc}
   bc470:	0003024c 	.word	0x0003024c

000bc474 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   bc474:	b508      	push	{r3, lr}
   bc476:	4b02      	ldr	r3, [pc, #8]	; (bc480 <HAL_USB_USART_Is_Connected+0xc>)
   bc478:	681b      	ldr	r3, [r3, #0]
   bc47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bc47c:	9301      	str	r3, [sp, #4]
   bc47e:	bd08      	pop	{r3, pc}
   bc480:	0003024c 	.word	0x0003024c

000bc484 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bc484:	b508      	push	{r3, lr}
   bc486:	4b02      	ldr	r3, [pc, #8]	; (bc490 <panic_+0xc>)
   bc488:	681b      	ldr	r3, [r3, #0]
   bc48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc48c:	9301      	str	r3, [sp, #4]
   bc48e:	bd08      	pop	{r3, pc}
   bc490:	00030260 	.word	0x00030260

000bc494 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bc494:	b508      	push	{r3, lr}
   bc496:	4b02      	ldr	r3, [pc, #8]	; (bc4a0 <log_message+0xc>)
   bc498:	681b      	ldr	r3, [r3, #0]
   bc49a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bc49c:	9301      	str	r3, [sp, #4]
   bc49e:	bd08      	pop	{r3, pc}
   bc4a0:	00030260 	.word	0x00030260

000bc4a4 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   bc4a4:	b508      	push	{r3, lr}
   bc4a6:	4b02      	ldr	r3, [pc, #8]	; (bc4b0 <log_message_v+0xc>)
   bc4a8:	681b      	ldr	r3, [r3, #0]
   bc4aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc4ac:	9301      	str	r3, [sp, #4]
   bc4ae:	bd08      	pop	{r3, pc}
   bc4b0:	00030260 	.word	0x00030260

000bc4b4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bc4b4:	b508      	push	{r3, lr}
   bc4b6:	4b02      	ldr	r3, [pc, #8]	; (bc4c0 <log_level_name+0xc>)
   bc4b8:	681b      	ldr	r3, [r3, #0]
   bc4ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bc4bc:	9301      	str	r3, [sp, #4]
   bc4be:	bd08      	pop	{r3, pc}
   bc4c0:	00030260 	.word	0x00030260

000bc4c4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bc4c4:	b508      	push	{r3, lr}
   bc4c6:	4b02      	ldr	r3, [pc, #8]	; (bc4d0 <log_set_callbacks+0xc>)
   bc4c8:	681b      	ldr	r3, [r3, #0]
   bc4ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bc4cc:	9301      	str	r3, [sp, #4]
   bc4ce:	bd08      	pop	{r3, pc}
   bc4d0:	00030260 	.word	0x00030260

000bc4d4 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   bc4d4:	b508      	push	{r3, lr}
   bc4d6:	4b03      	ldr	r3, [pc, #12]	; (bc4e4 <diag_get_source+0x10>)
   bc4d8:	681b      	ldr	r3, [r3, #0]
   bc4da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bc4de:	9301      	str	r3, [sp, #4]
   bc4e0:	bd08      	pop	{r3, pc}
   bc4e2:	0000      	.short	0x0000
   bc4e4:	00030260 	.word	0x00030260

000bc4e8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bc4e8:	b508      	push	{r3, lr}
   bc4ea:	4b02      	ldr	r3, [pc, #8]	; (bc4f4 <system_mode+0xc>)
   bc4ec:	681b      	ldr	r3, [r3, #0]
   bc4ee:	681b      	ldr	r3, [r3, #0]
   bc4f0:	9301      	str	r3, [sp, #4]
   bc4f2:	bd08      	pop	{r3, pc}
   bc4f4:	00030220 	.word	0x00030220

000bc4f8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bc4f8:	b508      	push	{r3, lr}
   bc4fa:	4b02      	ldr	r3, [pc, #8]	; (bc504 <set_system_mode+0xc>)
   bc4fc:	681b      	ldr	r3, [r3, #0]
   bc4fe:	685b      	ldr	r3, [r3, #4]
   bc500:	9301      	str	r3, [sp, #4]
   bc502:	bd08      	pop	{r3, pc}
   bc504:	00030220 	.word	0x00030220

000bc508 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bc508:	b508      	push	{r3, lr}
   bc50a:	4b02      	ldr	r3, [pc, #8]	; (bc514 <system_delay_ms+0xc>)
   bc50c:	681b      	ldr	r3, [r3, #0]
   bc50e:	695b      	ldr	r3, [r3, #20]
   bc510:	9301      	str	r3, [sp, #4]
   bc512:	bd08      	pop	{r3, pc}
   bc514:	00030220 	.word	0x00030220

000bc518 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   bc518:	b508      	push	{r3, lr}
   bc51a:	4b02      	ldr	r3, [pc, #8]	; (bc524 <system_subscribe_event+0xc>)
   bc51c:	681b      	ldr	r3, [r3, #0]
   bc51e:	6a1b      	ldr	r3, [r3, #32]
   bc520:	9301      	str	r3, [sp, #4]
   bc522:	bd08      	pop	{r3, pc}
   bc524:	00030220 	.word	0x00030220

000bc528 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   bc528:	b508      	push	{r3, lr}
   bc52a:	4b02      	ldr	r3, [pc, #8]	; (bc534 <system_thread_set_state+0xc>)
   bc52c:	681b      	ldr	r3, [r3, #0]
   bc52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc530:	9301      	str	r3, [sp, #4]
   bc532:	bd08      	pop	{r3, pc}
   bc534:	00030220 	.word	0x00030220

000bc538 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bc538:	b508      	push	{r3, lr}
   bc53a:	4b02      	ldr	r3, [pc, #8]	; (bc544 <application_thread_current+0xc>)
   bc53c:	681b      	ldr	r3, [r3, #0]
   bc53e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc540:	9301      	str	r3, [sp, #4]
   bc542:	bd08      	pop	{r3, pc}
   bc544:	00030220 	.word	0x00030220

000bc548 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bc548:	b508      	push	{r3, lr}
   bc54a:	4b02      	ldr	r3, [pc, #8]	; (bc554 <application_thread_invoke+0xc>)
   bc54c:	681b      	ldr	r3, [r3, #0]
   bc54e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc550:	9301      	str	r3, [sp, #4]
   bc552:	bd08      	pop	{r3, pc}
   bc554:	00030220 	.word	0x00030220

000bc558 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bc558:	b508      	push	{r3, lr}
   bc55a:	4b02      	ldr	r3, [pc, #8]	; (bc564 <system_thread_get_state+0xc>)
   bc55c:	681b      	ldr	r3, [r3, #0]
   bc55e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bc560:	9301      	str	r3, [sp, #4]
   bc562:	bd08      	pop	{r3, pc}
   bc564:	00030220 	.word	0x00030220

000bc568 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   bc568:	b508      	push	{r3, lr}
   bc56a:	4b02      	ldr	r3, [pc, #8]	; (bc574 <system_notify_time_changed+0xc>)
   bc56c:	681b      	ldr	r3, [r3, #0]
   bc56e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bc570:	9301      	str	r3, [sp, #4]
   bc572:	bd08      	pop	{r3, pc}
   bc574:	00030220 	.word	0x00030220

000bc578 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bc578:	b508      	push	{r3, lr}
   bc57a:	4b03      	ldr	r3, [pc, #12]	; (bc588 <system_ctrl_set_app_request_handler+0x10>)
   bc57c:	681b      	ldr	r3, [r3, #0]
   bc57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bc582:	9301      	str	r3, [sp, #4]
   bc584:	bd08      	pop	{r3, pc}
   bc586:	0000      	.short	0x0000
   bc588:	00030220 	.word	0x00030220

000bc58c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bc58c:	b508      	push	{r3, lr}
   bc58e:	4b03      	ldr	r3, [pc, #12]	; (bc59c <system_ctrl_set_result+0x10>)
   bc590:	681b      	ldr	r3, [r3, #0]
   bc592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bc596:	9301      	str	r3, [sp, #4]
   bc598:	bd08      	pop	{r3, pc}
   bc59a:	0000      	.short	0x0000
   bc59c:	00030220 	.word	0x00030220

000bc5a0 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   bc5a0:	b508      	push	{r3, lr}
   bc5a2:	4b03      	ldr	r3, [pc, #12]	; (bc5b0 <system_power_management_set_config+0x10>)
   bc5a4:	681b      	ldr	r3, [r3, #0]
   bc5a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bc5aa:	9301      	str	r3, [sp, #4]
   bc5ac:	bd08      	pop	{r3, pc}
   bc5ae:	0000      	.short	0x0000
   bc5b0:	00030220 	.word	0x00030220

000bc5b4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   bc5b4:	b508      	push	{r3, lr}
   bc5b6:	4b03      	ldr	r3, [pc, #12]	; (bc5c4 <system_sleep_ext+0x10>)
   bc5b8:	681b      	ldr	r3, [r3, #0]
   bc5ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   bc5be:	9301      	str	r3, [sp, #4]
   bc5c0:	bd08      	pop	{r3, pc}
   bc5c2:	0000      	.short	0x0000
   bc5c4:	00030220 	.word	0x00030220

000bc5c8 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   bc5c8:	b508      	push	{r3, lr}
   bc5ca:	4b03      	ldr	r3, [pc, #12]	; (bc5d8 <system_reset+0x10>)
   bc5cc:	681b      	ldr	r3, [r3, #0]
   bc5ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   bc5d2:	9301      	str	r3, [sp, #4]
   bc5d4:	bd08      	pop	{r3, pc}
   bc5d6:	0000      	.short	0x0000
   bc5d8:	00030220 	.word	0x00030220

000bc5dc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   bc5dc:	b508      	push	{r3, lr}
   bc5de:	4b02      	ldr	r3, [pc, #8]	; (bc5e8 <spark_variable+0xc>)
   bc5e0:	681b      	ldr	r3, [r3, #0]
   bc5e2:	681b      	ldr	r3, [r3, #0]
   bc5e4:	9301      	str	r3, [sp, #4]
   bc5e6:	bd08      	pop	{r3, pc}
   bc5e8:	00030244 	.word	0x00030244

000bc5ec <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bc5ec:	b508      	push	{r3, lr}
   bc5ee:	4b02      	ldr	r3, [pc, #8]	; (bc5f8 <spark_function+0xc>)
   bc5f0:	681b      	ldr	r3, [r3, #0]
   bc5f2:	685b      	ldr	r3, [r3, #4]
   bc5f4:	9301      	str	r3, [sp, #4]
   bc5f6:	bd08      	pop	{r3, pc}
   bc5f8:	00030244 	.word	0x00030244

000bc5fc <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bc5fc:	b508      	push	{r3, lr}
   bc5fe:	4b02      	ldr	r3, [pc, #8]	; (bc608 <spark_process+0xc>)
   bc600:	681b      	ldr	r3, [r3, #0]
   bc602:	689b      	ldr	r3, [r3, #8]
   bc604:	9301      	str	r3, [sp, #4]
   bc606:	bd08      	pop	{r3, pc}
   bc608:	00030244 	.word	0x00030244

000bc60c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   bc60c:	b508      	push	{r3, lr}
   bc60e:	4b02      	ldr	r3, [pc, #8]	; (bc618 <spark_cloud_flag_connect+0xc>)
   bc610:	681b      	ldr	r3, [r3, #0]
   bc612:	68db      	ldr	r3, [r3, #12]
   bc614:	9301      	str	r3, [sp, #4]
   bc616:	bd08      	pop	{r3, pc}
   bc618:	00030244 	.word	0x00030244

000bc61c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bc61c:	b508      	push	{r3, lr}
   bc61e:	4b02      	ldr	r3, [pc, #8]	; (bc628 <spark_cloud_flag_connected+0xc>)
   bc620:	681b      	ldr	r3, [r3, #0]
   bc622:	695b      	ldr	r3, [r3, #20]
   bc624:	9301      	str	r3, [sp, #4]
   bc626:	bd08      	pop	{r3, pc}
   bc628:	00030244 	.word	0x00030244

000bc62c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   bc62c:	b508      	push	{r3, lr}
   bc62e:	4b02      	ldr	r3, [pc, #8]	; (bc638 <spark_deviceID+0xc>)
   bc630:	681b      	ldr	r3, [r3, #0]
   bc632:	69db      	ldr	r3, [r3, #28]
   bc634:	9301      	str	r3, [sp, #4]
   bc636:	bd08      	pop	{r3, pc}
   bc638:	00030244 	.word	0x00030244

000bc63c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bc63c:	b508      	push	{r3, lr}
   bc63e:	4b02      	ldr	r3, [pc, #8]	; (bc648 <spark_send_event+0xc>)
   bc640:	681b      	ldr	r3, [r3, #0]
   bc642:	6a1b      	ldr	r3, [r3, #32]
   bc644:	9301      	str	r3, [sp, #4]
   bc646:	bd08      	pop	{r3, pc}
   bc648:	00030244 	.word	0x00030244

000bc64c <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   bc64c:	b508      	push	{r3, lr}
   bc64e:	4b02      	ldr	r3, [pc, #8]	; (bc658 <spark_sync_time+0xc>)
   bc650:	681b      	ldr	r3, [r3, #0]
   bc652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc654:	9301      	str	r3, [sp, #4]
   bc656:	bd08      	pop	{r3, pc}
   bc658:	00030244 	.word	0x00030244

000bc65c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bc65c:	b508      	push	{r3, lr}
   bc65e:	4b02      	ldr	r3, [pc, #8]	; (bc668 <spark_sync_time_pending+0xc>)
   bc660:	681b      	ldr	r3, [r3, #0]
   bc662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc664:	9301      	str	r3, [sp, #4]
   bc666:	bd08      	pop	{r3, pc}
   bc668:	00030244 	.word	0x00030244

000bc66c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   bc66c:	b508      	push	{r3, lr}
   bc66e:	4b02      	ldr	r3, [pc, #8]	; (bc678 <spark_sync_time_last+0xc>)
   bc670:	681b      	ldr	r3, [r3, #0]
   bc672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc674:	9301      	str	r3, [sp, #4]
   bc676:	bd08      	pop	{r3, pc}
   bc678:	00030244 	.word	0x00030244

000bc67c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bc67c:	b508      	push	{r3, lr}
   bc67e:	4b02      	ldr	r3, [pc, #8]	; (bc688 <spark_set_random_seed_from_cloud_handler+0xc>)
   bc680:	681b      	ldr	r3, [r3, #0]
   bc682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bc684:	9301      	str	r3, [sp, #4]
   bc686:	bd08      	pop	{r3, pc}
   bc688:	00030244 	.word	0x00030244

000bc68c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   bc68c:	b508      	push	{r3, lr}
   bc68e:	4b02      	ldr	r3, [pc, #8]	; (bc698 <spark_cloud_disconnect+0xc>)
   bc690:	681b      	ldr	r3, [r3, #0]
   bc692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc694:	9301      	str	r3, [sp, #4]
   bc696:	bd08      	pop	{r3, pc}
   bc698:	00030244 	.word	0x00030244

000bc69c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bc69c:	b508      	push	{r3, lr}
   bc69e:	4b02      	ldr	r3, [pc, #8]	; (bc6a8 <network_connect+0xc>)
   bc6a0:	681b      	ldr	r3, [r3, #0]
   bc6a2:	685b      	ldr	r3, [r3, #4]
   bc6a4:	9301      	str	r3, [sp, #4]
   bc6a6:	bd08      	pop	{r3, pc}
   bc6a8:	00030240 	.word	0x00030240

000bc6ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bc6ac:	b508      	push	{r3, lr}
   bc6ae:	4b02      	ldr	r3, [pc, #8]	; (bc6b8 <network_connecting+0xc>)
   bc6b0:	681b      	ldr	r3, [r3, #0]
   bc6b2:	689b      	ldr	r3, [r3, #8]
   bc6b4:	9301      	str	r3, [sp, #4]
   bc6b6:	bd08      	pop	{r3, pc}
   bc6b8:	00030240 	.word	0x00030240

000bc6bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bc6bc:	b508      	push	{r3, lr}
   bc6be:	4b02      	ldr	r3, [pc, #8]	; (bc6c8 <network_disconnect+0xc>)
   bc6c0:	681b      	ldr	r3, [r3, #0]
   bc6c2:	68db      	ldr	r3, [r3, #12]
   bc6c4:	9301      	str	r3, [sp, #4]
   bc6c6:	bd08      	pop	{r3, pc}
   bc6c8:	00030240 	.word	0x00030240

000bc6cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bc6cc:	b508      	push	{r3, lr}
   bc6ce:	4b02      	ldr	r3, [pc, #8]	; (bc6d8 <network_ready+0xc>)
   bc6d0:	681b      	ldr	r3, [r3, #0]
   bc6d2:	691b      	ldr	r3, [r3, #16]
   bc6d4:	9301      	str	r3, [sp, #4]
   bc6d6:	bd08      	pop	{r3, pc}
   bc6d8:	00030240 	.word	0x00030240

000bc6dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bc6dc:	b508      	push	{r3, lr}
   bc6de:	4b02      	ldr	r3, [pc, #8]	; (bc6e8 <network_on+0xc>)
   bc6e0:	681b      	ldr	r3, [r3, #0]
   bc6e2:	695b      	ldr	r3, [r3, #20]
   bc6e4:	9301      	str	r3, [sp, #4]
   bc6e6:	bd08      	pop	{r3, pc}
   bc6e8:	00030240 	.word	0x00030240

000bc6ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bc6ec:	b508      	push	{r3, lr}
   bc6ee:	4b02      	ldr	r3, [pc, #8]	; (bc6f8 <network_off+0xc>)
   bc6f0:	681b      	ldr	r3, [r3, #0]
   bc6f2:	699b      	ldr	r3, [r3, #24]
   bc6f4:	9301      	str	r3, [sp, #4]
   bc6f6:	bd08      	pop	{r3, pc}
   bc6f8:	00030240 	.word	0x00030240

000bc6fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bc6fc:	b508      	push	{r3, lr}
   bc6fe:	4b02      	ldr	r3, [pc, #8]	; (bc708 <network_listen+0xc>)
   bc700:	681b      	ldr	r3, [r3, #0]
   bc702:	69db      	ldr	r3, [r3, #28]
   bc704:	9301      	str	r3, [sp, #4]
   bc706:	bd08      	pop	{r3, pc}
   bc708:	00030240 	.word	0x00030240

000bc70c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bc70c:	b508      	push	{r3, lr}
   bc70e:	4b02      	ldr	r3, [pc, #8]	; (bc718 <network_listening+0xc>)
   bc710:	681b      	ldr	r3, [r3, #0]
   bc712:	6a1b      	ldr	r3, [r3, #32]
   bc714:	9301      	str	r3, [sp, #4]
   bc716:	bd08      	pop	{r3, pc}
   bc718:	00030240 	.word	0x00030240

000bc71c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bc71c:	b508      	push	{r3, lr}
   bc71e:	4b02      	ldr	r3, [pc, #8]	; (bc728 <network_set_listen_timeout+0xc>)
   bc720:	681b      	ldr	r3, [r3, #0]
   bc722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc724:	9301      	str	r3, [sp, #4]
   bc726:	bd08      	pop	{r3, pc}
   bc728:	00030240 	.word	0x00030240

000bc72c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bc72c:	b508      	push	{r3, lr}
   bc72e:	4b02      	ldr	r3, [pc, #8]	; (bc738 <network_get_listen_timeout+0xc>)
   bc730:	681b      	ldr	r3, [r3, #0]
   bc732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc734:	9301      	str	r3, [sp, #4]
   bc736:	bd08      	pop	{r3, pc}
   bc738:	00030240 	.word	0x00030240

000bc73c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bc73c:	b508      	push	{r3, lr}
   bc73e:	4b02      	ldr	r3, [pc, #8]	; (bc748 <network_is_on+0xc>)
   bc740:	681b      	ldr	r3, [r3, #0]
   bc742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc744:	9301      	str	r3, [sp, #4]
   bc746:	bd08      	pop	{r3, pc}
   bc748:	00030240 	.word	0x00030240

000bc74c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bc74c:	b508      	push	{r3, lr}
   bc74e:	4b02      	ldr	r3, [pc, #8]	; (bc758 <network_is_off+0xc>)
   bc750:	681b      	ldr	r3, [r3, #0]
   bc752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc754:	9301      	str	r3, [sp, #4]
   bc756:	bd08      	pop	{r3, pc}
   bc758:	00030240 	.word	0x00030240

000bc75c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bc75c:	b508      	push	{r3, lr}
   bc75e:	4b02      	ldr	r3, [pc, #8]	; (bc768 <malloc+0xc>)
   bc760:	681b      	ldr	r3, [r3, #0]
   bc762:	681b      	ldr	r3, [r3, #0]
   bc764:	9301      	str	r3, [sp, #4]
   bc766:	bd08      	pop	{r3, pc}
   bc768:	0003021c 	.word	0x0003021c

000bc76c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bc76c:	b508      	push	{r3, lr}
   bc76e:	4b02      	ldr	r3, [pc, #8]	; (bc778 <free+0xc>)
   bc770:	681b      	ldr	r3, [r3, #0]
   bc772:	685b      	ldr	r3, [r3, #4]
   bc774:	9301      	str	r3, [sp, #4]
   bc776:	bd08      	pop	{r3, pc}
   bc778:	0003021c 	.word	0x0003021c

000bc77c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bc77c:	b508      	push	{r3, lr}
   bc77e:	4b02      	ldr	r3, [pc, #8]	; (bc788 <realloc+0xc>)
   bc780:	681b      	ldr	r3, [r3, #0]
   bc782:	689b      	ldr	r3, [r3, #8]
   bc784:	9301      	str	r3, [sp, #4]
   bc786:	bd08      	pop	{r3, pc}
   bc788:	0003021c 	.word	0x0003021c

000bc78c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   bc78c:	b508      	push	{r3, lr}
   bc78e:	4b02      	ldr	r3, [pc, #8]	; (bc798 <siprintf+0xc>)
   bc790:	681b      	ldr	r3, [r3, #0]
   bc792:	691b      	ldr	r3, [r3, #16]
   bc794:	9301      	str	r3, [sp, #4]
   bc796:	bd08      	pop	{r3, pc}
   bc798:	0003021c 	.word	0x0003021c

000bc79c <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bc79c:	b508      	push	{r3, lr}
   bc79e:	4b02      	ldr	r3, [pc, #8]	; (bc7a8 <sscanf+0xc>)
   bc7a0:	681b      	ldr	r3, [r3, #0]
   bc7a2:	695b      	ldr	r3, [r3, #20]
   bc7a4:	9301      	str	r3, [sp, #4]
   bc7a6:	bd08      	pop	{r3, pc}
   bc7a8:	0003021c 	.word	0x0003021c

000bc7ac <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bc7ac:	b508      	push	{r3, lr}
   bc7ae:	4b02      	ldr	r3, [pc, #8]	; (bc7b8 <snprintf+0xc>)
   bc7b0:	681b      	ldr	r3, [r3, #0]
   bc7b2:	69db      	ldr	r3, [r3, #28]
   bc7b4:	9301      	str	r3, [sp, #4]
   bc7b6:	bd08      	pop	{r3, pc}
   bc7b8:	0003021c 	.word	0x0003021c

000bc7bc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bc7bc:	b508      	push	{r3, lr}
   bc7be:	4b02      	ldr	r3, [pc, #8]	; (bc7c8 <vsnprintf+0xc>)
   bc7c0:	681b      	ldr	r3, [r3, #0]
   bc7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc7c4:	9301      	str	r3, [sp, #4]
   bc7c6:	bd08      	pop	{r3, pc}
   bc7c8:	0003021c 	.word	0x0003021c

000bc7cc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bc7cc:	b508      	push	{r3, lr}
   bc7ce:	4b02      	ldr	r3, [pc, #8]	; (bc7d8 <abort+0xc>)
   bc7d0:	681b      	ldr	r3, [r3, #0]
   bc7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc7d4:	9301      	str	r3, [sp, #4]
   bc7d6:	bd08      	pop	{r3, pc}
   bc7d8:	0003021c 	.word	0x0003021c

000bc7dc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bc7dc:	b508      	push	{r3, lr}
   bc7de:	4b02      	ldr	r3, [pc, #8]	; (bc7e8 <_malloc_r+0xc>)
   bc7e0:	681b      	ldr	r3, [r3, #0]
   bc7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc7e4:	9301      	str	r3, [sp, #4]
   bc7e6:	bd08      	pop	{r3, pc}
   bc7e8:	0003021c 	.word	0x0003021c

000bc7ec <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bc7ec:	b508      	push	{r3, lr}
   bc7ee:	4b02      	ldr	r3, [pc, #8]	; (bc7f8 <__errno+0xc>)
   bc7f0:	681b      	ldr	r3, [r3, #0]
   bc7f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bc7f4:	9301      	str	r3, [sp, #4]
   bc7f6:	bd08      	pop	{r3, pc}
   bc7f8:	0003021c 	.word	0x0003021c

000bc7fc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bc7fc:	b508      	push	{r3, lr}
   bc7fe:	4b02      	ldr	r3, [pc, #8]	; (bc808 <__assert_func+0xc>)
   bc800:	681b      	ldr	r3, [r3, #0]
   bc802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc804:	9301      	str	r3, [sp, #4]
   bc806:	bd08      	pop	{r3, pc}
   bc808:	0003021c 	.word	0x0003021c

000bc80c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bc80c:	b508      	push	{r3, lr}
   bc80e:	4b02      	ldr	r3, [pc, #8]	; (bc818 <newlib_impure_ptr_callback+0xc>)
   bc810:	681b      	ldr	r3, [r3, #0]
   bc812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc814:	9301      	str	r3, [sp, #4]
   bc816:	bd08      	pop	{r3, pc}
   bc818:	0003021c 	.word	0x0003021c

000bc81c <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   bc81c:	b508      	push	{r3, lr}
   bc81e:	4b02      	ldr	r3, [pc, #8]	; (bc828 <strftime+0xc>)
   bc820:	681b      	ldr	r3, [r3, #0]
   bc822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bc824:	9301      	str	r3, [sp, #4]
   bc826:	bd08      	pop	{r3, pc}
   bc828:	0003021c 	.word	0x0003021c

000bc82c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bc82c:	b508      	push	{r3, lr}
   bc82e:	4b02      	ldr	r3, [pc, #8]	; (bc838 <localtime_r+0xc>)
   bc830:	681b      	ldr	r3, [r3, #0]
   bc832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc834:	9301      	str	r3, [sp, #4]
   bc836:	bd08      	pop	{r3, pc}
   bc838:	0003021c 	.word	0x0003021c

000bc83c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bc83c:	b508      	push	{r3, lr}
   bc83e:	4b02      	ldr	r3, [pc, #8]	; (bc848 <gmtime_r+0xc>)
   bc840:	681b      	ldr	r3, [r3, #0]
   bc842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bc844:	9301      	str	r3, [sp, #4]
   bc846:	bd08      	pop	{r3, pc}
   bc848:	0003021c 	.word	0x0003021c

000bc84c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   bc84c:	b508      	push	{r3, lr}
   bc84e:	4b02      	ldr	r3, [pc, #8]	; (bc858 <mktime+0xc>)
   bc850:	681b      	ldr	r3, [r3, #0]
   bc852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc854:	9301      	str	r3, [sp, #4]
   bc856:	bd08      	pop	{r3, pc}
   bc858:	0003021c 	.word	0x0003021c

000bc85c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bc85c:	2100      	movs	r1, #0
   bc85e:	f7ff be53 	b.w	bc508 <system_delay_ms>

000bc862 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bc862:	b510      	push	{r4, lr}
      if (_M_empty())
   bc864:	6883      	ldr	r3, [r0, #8]
   bc866:	4604      	mov	r4, r0
   bc868:	b90b      	cbnz	r3, bc86e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bc86a:	f003 f9b9 	bl	bfbe0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc86e:	68c3      	ldr	r3, [r0, #12]
   bc870:	4798      	blx	r3
      if (_M_manager)
   bc872:	68a3      	ldr	r3, [r4, #8]
   bc874:	b11b      	cbz	r3, bc87e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bc876:	2203      	movs	r2, #3
   bc878:	4621      	mov	r1, r4
   bc87a:	4620      	mov	r0, r4
   bc87c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bc87e:	4620      	mov	r0, r4
   bc880:	2110      	movs	r1, #16
}
   bc882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bc886:	f7f7 bc0a 	b.w	b409e <_ZdlPvj>

000bc88a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bc88a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bc88c:	6843      	ldr	r3, [r0, #4]
   bc88e:	3b01      	subs	r3, #1
    {
   bc890:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bc892:	6043      	str	r3, [r0, #4]
   bc894:	b963      	cbnz	r3, bc8b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bc896:	6803      	ldr	r3, [r0, #0]
   bc898:	689b      	ldr	r3, [r3, #8]
   bc89a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bc89c:	68a3      	ldr	r3, [r4, #8]
   bc89e:	3b01      	subs	r3, #1
   bc8a0:	60a3      	str	r3, [r4, #8]
   bc8a2:	b92b      	cbnz	r3, bc8b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bc8a4:	6823      	ldr	r3, [r4, #0]
   bc8a6:	4620      	mov	r0, r4
   bc8a8:	68db      	ldr	r3, [r3, #12]
    }
   bc8aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bc8ae:	4718      	bx	r3
    }
   bc8b0:	bd10      	pop	{r4, pc}

000bc8b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc8b2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bc8b4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc8b8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bc8ba:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bc8be:	42ae      	cmp	r6, r5
   bc8c0:	d004      	beq.n	bc8cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bc8c2:	4628      	mov	r0, r5
   bc8c4:	f002 fabe 	bl	bee44 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bc8c8:	3510      	adds	r5, #16
   bc8ca:	e7f8      	b.n	bc8be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bc8cc:	6820      	ldr	r0, [r4, #0]
   bc8ce:	f7ff ff4d 	bl	bc76c <free>
    AllocatorT::free(data_);
}
   bc8d2:	4620      	mov	r0, r4
   bc8d4:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc8d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   bc8d8:	4802      	ldr	r0, [pc, #8]	; (bc8e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bc8da:	2300      	movs	r3, #0
   bc8dc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   bc8de:	f7ff bb59 	b.w	bbf94 <os_mutex_recursive_create>
   bc8e2:	bf00      	nop
   bc8e4:	2003e57c 	.word	0x2003e57c

000bc8e8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bc8e8:	2200      	movs	r2, #0
   bc8ea:	6840      	ldr	r0, [r0, #4]
   bc8ec:	4611      	mov	r1, r2
   bc8ee:	f7ff beed 	b.w	bc6cc <network_ready>

000bc8f2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bc8f2:	2200      	movs	r2, #0
   bc8f4:	6840      	ldr	r0, [r0, #4]
   bc8f6:	4611      	mov	r1, r2
   bc8f8:	f7ff bf08 	b.w	bc70c <network_listening>

000bc8fc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bc8fc:	2200      	movs	r2, #0
   bc8fe:	6840      	ldr	r0, [r0, #4]
   bc900:	4611      	mov	r1, r2
   bc902:	f7ff bf13 	b.w	bc72c <network_get_listen_timeout>

000bc906 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bc906:	6840      	ldr	r0, [r0, #4]
   bc908:	2200      	movs	r2, #0
   bc90a:	f7ff bf07 	b.w	bc71c <network_set_listen_timeout>

000bc90e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bc90e:	6840      	ldr	r0, [r0, #4]
   bc910:	2200      	movs	r2, #0
   bc912:	f081 0101 	eor.w	r1, r1, #1
   bc916:	f7ff bef1 	b.w	bc6fc <network_listen>

000bc91a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bc91a:	2300      	movs	r3, #0
   bc91c:	6840      	ldr	r0, [r0, #4]
   bc91e:	461a      	mov	r2, r3
   bc920:	4619      	mov	r1, r3
   bc922:	f7ff bee3 	b.w	bc6ec <network_off>

000bc926 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bc926:	2300      	movs	r3, #0
   bc928:	6840      	ldr	r0, [r0, #4]
   bc92a:	461a      	mov	r2, r3
   bc92c:	4619      	mov	r1, r3
   bc92e:	f7ff bed5 	b.w	bc6dc <network_on>

000bc932 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bc932:	2200      	movs	r2, #0
   bc934:	6840      	ldr	r0, [r0, #4]
   bc936:	4611      	mov	r1, r2
   bc938:	f7ff beb8 	b.w	bc6ac <network_connecting>

000bc93c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bc93c:	6840      	ldr	r0, [r0, #4]
   bc93e:	2200      	movs	r2, #0
   bc940:	2102      	movs	r1, #2
   bc942:	f7ff bebb 	b.w	bc6bc <network_disconnect>

000bc946 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bc946:	2300      	movs	r3, #0
   bc948:	6840      	ldr	r0, [r0, #4]
   bc94a:	461a      	mov	r2, r3
   bc94c:	f7ff bea6 	b.w	bc69c <network_connect>

000bc950 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   bc950:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   bc952:	4b13      	ldr	r3, [pc, #76]	; (bc9a0 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   bc954:	6003      	str	r3, [r0, #0]
   bc956:	2518      	movs	r5, #24
   bc958:	3330      	adds	r3, #48	; 0x30
   bc95a:	b086      	sub	sp, #24
   bc95c:	460e      	mov	r6, r1
   bc95e:	6043      	str	r3, [r0, #4]
   bc960:	462a      	mov	r2, r5
   bc962:	2100      	movs	r1, #0
   bc964:	4604      	mov	r4, r0
   bc966:	3008      	adds	r0, #8
   bc968:	f003 fe6c 	bl	c0644 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bc96c:	2200      	movs	r2, #0
   bc96e:	6870      	ldr	r0, [r6, #4]
   bc970:	4611      	mov	r1, r2
   bc972:	f7ff feab 	bl	bc6cc <network_ready>
   bc976:	b178      	cbz	r0, bc998 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   bc978:	2100      	movs	r1, #0
   bc97a:	462a      	mov	r2, r5
   bc97c:	4668      	mov	r0, sp
   bc97e:	f003 fe61 	bl	c0644 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   bc982:	4669      	mov	r1, sp
   bc984:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   bc986:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   bc98a:	f7ff fac3 	bl	bbf14 <cellular_signal>
   bc98e:	b918      	cbnz	r0, bc998 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   bc990:	4669      	mov	r1, sp
   bc992:	4620      	mov	r0, r4
   bc994:	f000 f8b8 	bl	bcb08 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   bc998:	4620      	mov	r0, r4
   bc99a:	b006      	add	sp, #24
   bc99c:	bd70      	pop	{r4, r5, r6, pc}
   bc99e:	bf00      	nop
   bc9a0:	000c23e0 	.word	0x000c23e0

000bc9a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bc9a4:	4b08      	ldr	r3, [pc, #32]	; (bc9c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bc9a6:	b510      	push	{r4, lr}
   bc9a8:	2428      	movs	r4, #40	; 0x28
   bc9aa:	4622      	mov	r2, r4
   bc9ac:	4618      	mov	r0, r3
   bc9ae:	2100      	movs	r1, #0
   bc9b0:	f003 fe48 	bl	c0644 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bc9b4:	4b05      	ldr	r3, [pc, #20]	; (bc9cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bc9b6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bc9b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc9bc:	6042      	str	r2, [r0, #4]
   bc9be:	2204      	movs	r2, #4
   bc9c0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bc9c2:	4a03      	ldr	r2, [pc, #12]	; (bc9d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bc9c4:	601a      	str	r2, [r3, #0]
   bc9c6:	bd10      	pop	{r4, pc}
   bc9c8:	2003e588 	.word	0x2003e588
   bc9cc:	2003e580 	.word	0x2003e580
   bc9d0:	000c23a4 	.word	0x000c23a4

000bc9d4 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   bc9d4:	4770      	bx	lr

000bc9d6 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   bc9d6:	7b00      	ldrb	r0, [r0, #12]
   bc9d8:	4770      	bx	lr

000bc9da <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bc9da:	7b03      	ldrb	r3, [r0, #12]
   bc9dc:	b14b      	cbz	r3, bc9f2 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   bc9de:	6903      	ldr	r3, [r0, #16]
   bc9e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bc9e4:	d005      	beq.n	bc9f2 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bc9e6:	6980      	ldr	r0, [r0, #24]
   bc9e8:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   bc9ec:	bf18      	it	ne
   bc9ee:	2001      	movne	r0, #1
   bc9f0:	4770      	bx	lr
   bc9f2:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   bc9f4:	4770      	bx	lr

000bc9f6 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   bc9f6:	6803      	ldr	r3, [r0, #0]
   bc9f8:	6a1b      	ldr	r3, [r3, #32]
   bc9fa:	4718      	bx	r3

000bc9fc <_ZNK14CellularSignal7printToER5Print>:
{
   bc9fc:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   bc9fe:	6803      	ldr	r3, [r0, #0]
{
   bca00:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   bca02:	691b      	ldr	r3, [r3, #16]
{
   bca04:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   bca06:	4798      	blx	r3
   bca08:	2102      	movs	r1, #2
   bca0a:	4628      	mov	r0, r5
   bca0c:	f002 f8f8 	bl	bec00 <_ZN5Print5printEfi>
    n += p.print(',');
   bca10:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   bca12:	4604      	mov	r4, r0
    n += p.print(',');
   bca14:	4628      	mov	r0, r5
   bca16:	f001 fffd 	bl	bea14 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   bca1a:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   bca1c:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   bca1e:	699b      	ldr	r3, [r3, #24]
   bca20:	4630      	mov	r0, r6
   bca22:	4798      	blx	r3
   bca24:	2102      	movs	r1, #2
   bca26:	4628      	mov	r0, r5
   bca28:	f002 f8ea 	bl	bec00 <_ZN5Print5printEfi>
}
   bca2c:	4420      	add	r0, r4
   bca2e:	bd70      	pop	{r4, r5, r6, pc}

000bca30 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   bca30:	f1a0 0004 	sub.w	r0, r0, #4
   bca34:	f7ff bfe2 	b.w	bc9fc <_ZNK14CellularSignal7printToER5Print>

000bca38 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   bca38:	b510      	push	{r4, lr}
   bca3a:	2120      	movs	r1, #32
   bca3c:	4604      	mov	r4, r0
   bca3e:	f7f7 fb2e 	bl	b409e <_ZdlPvj>
   bca42:	4620      	mov	r0, r4
   bca44:	bd10      	pop	{r4, pc}
	...

000bca48 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bca48:	7b03      	ldrb	r3, [r0, #12]
   bca4a:	b17b      	cbz	r3, bca6c <_ZNK14CellularSignal11getStrengthEv+0x24>
   bca4c:	6943      	ldr	r3, [r0, #20]
   bca4e:	2b00      	cmp	r3, #0
   bca50:	db0c      	blt.n	bca6c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   bca52:	ee07 3a90 	vmov	s15, r3
   bca56:	ed9f 7a07 	vldr	s14, [pc, #28]	; bca74 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   bca5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bca5e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bca62:	eddf 7a05 	vldr	s15, [pc, #20]	; bca78 <_ZNK14CellularSignal11getStrengthEv+0x30>
   bca66:	ee20 0a27 	vmul.f32	s0, s0, s15
   bca6a:	4770      	bx	lr
    return -1.0f;
   bca6c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bca70:	4770      	bx	lr
   bca72:	bf00      	nop
   bca74:	477fff00 	.word	0x477fff00
   bca78:	42c80000 	.word	0x42c80000

000bca7c <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bca7c:	7b03      	ldrb	r3, [r0, #12]
   bca7e:	b163      	cbz	r3, bca9a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bca80:	6903      	ldr	r3, [r0, #16]
   bca82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bca86:	d008      	beq.n	bca9a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bca88:	ee07 3a90 	vmov	s15, r3
   bca8c:	ed9f 7a04 	vldr	s14, [pc, #16]	; bcaa0 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bca90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bca94:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bca98:	4770      	bx	lr
    return 0.0f;
   bca9a:	ed9f 0a02 	vldr	s0, [pc, #8]	; bcaa4 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bca9e:	4770      	bx	lr
   bcaa0:	42c80000 	.word	0x42c80000
   bcaa4:	00000000 	.word	0x00000000

000bcaa8 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bcaa8:	7b03      	ldrb	r3, [r0, #12]
   bcaaa:	b17b      	cbz	r3, bcacc <_ZNK14CellularSignal10getQualityEv+0x24>
   bcaac:	69c3      	ldr	r3, [r0, #28]
   bcaae:	2b00      	cmp	r3, #0
   bcab0:	db0c      	blt.n	bcacc <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bcab2:	ee07 3a90 	vmov	s15, r3
   bcab6:	ed9f 7a07 	vldr	s14, [pc, #28]	; bcad4 <_ZNK14CellularSignal10getQualityEv+0x2c>
   bcaba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bcabe:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bcac2:	eddf 7a05 	vldr	s15, [pc, #20]	; bcad8 <_ZNK14CellularSignal10getQualityEv+0x30>
   bcac6:	ee20 0a27 	vmul.f32	s0, s0, s15
   bcaca:	4770      	bx	lr
    return -1.0f;
   bcacc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bcad0:	4770      	bx	lr
   bcad2:	bf00      	nop
   bcad4:	477fff00 	.word	0x477fff00
   bcad8:	42c80000 	.word	0x42c80000

000bcadc <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   bcadc:	7b03      	ldrb	r3, [r0, #12]
   bcade:	b163      	cbz	r3, bcafa <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   bcae0:	6983      	ldr	r3, [r0, #24]
   bcae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bcae6:	d008      	beq.n	bcafa <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   bcae8:	ee07 3a90 	vmov	s15, r3
   bcaec:	ed9f 7a04 	vldr	s14, [pc, #16]	; bcb00 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   bcaf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bcaf4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bcaf8:	4770      	bx	lr
    return 0.0f;
   bcafa:	ed9f 0a02 	vldr	s0, [pc, #8]	; bcb04 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   bcafe:	4770      	bx	lr
   bcb00:	42c80000 	.word	0x42c80000
   bcb04:	00000000 	.word	0x00000000

000bcb08 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   bcb08:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   bcb0a:	460d      	mov	r5, r1
   bcb0c:	f100 0408 	add.w	r4, r0, #8
   bcb10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bcb12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bcb14:	e895 0003 	ldmia.w	r5, {r0, r1}
   bcb18:	e884 0003 	stmia.w	r4, {r0, r1}
}
   bcb1c:	2001      	movs	r0, #1
   bcb1e:	bd30      	pop	{r4, r5, pc}

000bcb20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bcb20:	4770      	bx	lr

000bcb22 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bcb22:	2000      	movs	r0, #0
   bcb24:	4770      	bx	lr

000bcb26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bcb26:	b510      	push	{r4, lr}
   bcb28:	2110      	movs	r1, #16
   bcb2a:	4604      	mov	r4, r0
   bcb2c:	f7f7 fab7 	bl	b409e <_ZdlPvj>
   bcb30:	4620      	mov	r0, r4
   bcb32:	bd10      	pop	{r4, pc}

000bcb34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bcb34:	b508      	push	{r3, lr}
      { delete this; }
   bcb36:	f7ff fff6 	bl	bcb26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bcb3a:	bd08      	pop	{r3, pc}

000bcb3c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bcb3c:	b530      	push	{r4, r5, lr}
        type_(type) {
   bcb3e:	2200      	movs	r2, #0
   bcb40:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bcb44:	6002      	str	r2, [r0, #0]
   bcb46:	8084      	strh	r4, [r0, #4]
   bcb48:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bcb4a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bcb4c:	680c      	ldr	r4, [r1, #0]
   bcb4e:	8085      	strh	r5, [r0, #4]
   bcb50:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bcb52:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bcb54:	bd30      	pop	{r4, r5, pc}

000bcb56 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bcb56:	b510      	push	{r4, lr}
   bcb58:	4604      	mov	r4, r0
    free((void*)msg_);
   bcb5a:	6800      	ldr	r0, [r0, #0]
   bcb5c:	f7ff fe06 	bl	bc76c <free>
}
   bcb60:	4620      	mov	r0, r4
   bcb62:	bd10      	pop	{r4, pc}

000bcb64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bcb64:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bcb66:	68c4      	ldr	r4, [r0, #12]
   bcb68:	b1f4      	cbz	r4, bcba8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bcb6a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bcb6c:	2b02      	cmp	r3, #2
   bcb6e:	d103      	bne.n	bcb78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bcb70:	f104 000c 	add.w	r0, r4, #12
   bcb74:	f7ff ffef 	bl	bcb56 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bcb78:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bcb7a:	b135      	cbz	r5, bcb8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bcb7c:	4628      	mov	r0, r5
   bcb7e:	f7f8 fac6 	bl	b510e <_ZNSt14_Function_baseD1Ev>
   bcb82:	2110      	movs	r1, #16
   bcb84:	4628      	mov	r0, r5
   bcb86:	f7f7 fa8a 	bl	b409e <_ZdlPvj>
   bcb8a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bcb8c:	b135      	cbz	r5, bcb9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bcb8e:	4628      	mov	r0, r5
   bcb90:	f7f8 fabd 	bl	b510e <_ZNSt14_Function_baseD1Ev>
   bcb94:	2110      	movs	r1, #16
   bcb96:	4628      	mov	r0, r5
   bcb98:	f7f7 fa81 	bl	b409e <_ZdlPvj>
   bcb9c:	4620      	mov	r0, r4
   bcb9e:	2114      	movs	r1, #20
   bcba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bcba4:	f7f7 ba7b 	b.w	b409e <_ZdlPvj>
   bcba8:	bd38      	pop	{r3, r4, r5, pc}

000bcbaa <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   bcbaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bcbac:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   bcbae:	4668      	mov	r0, sp
   bcbb0:	f002 f993 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
      if (_M_empty())
   bcbb4:	68a3      	ldr	r3, [r4, #8]
   bcbb6:	b90b      	cbnz	r3, bcbbc <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   bcbb8:	f003 f812 	bl	bfbe0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bcbbc:	68e3      	ldr	r3, [r4, #12]
   bcbbe:	4669      	mov	r1, sp
   bcbc0:	4620      	mov	r0, r4
   bcbc2:	4798      	blx	r3
   bcbc4:	4604      	mov	r4, r0
   bcbc6:	4668      	mov	r0, sp
   bcbc8:	f002 f93c 	bl	bee44 <_ZN6StringD1Ev>
}
   bcbcc:	4620      	mov	r0, r4
   bcbce:	b004      	add	sp, #16
   bcbd0:	bd10      	pop	{r4, pc}

000bcbd2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bcbd2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bcbd4:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bcbd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bcbda:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bcbdc:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bcbde:	461a      	mov	r2, r3
   bcbe0:	4669      	mov	r1, sp
   bcbe2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bcbe4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bcbe8:	f8ad 4000 	strh.w	r4, [sp]
   bcbec:	f7ff fcfe 	bl	bc5ec <spark_function>
}
   bcbf0:	b004      	add	sp, #16
   bcbf2:	bd10      	pop	{r4, pc}

000bcbf4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bcbf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bcbf6:	230c      	movs	r3, #12
   bcbf8:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bcbfc:	6803      	ldr	r3, [r0, #0]
   bcbfe:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bcc02:	7a03      	ldrb	r3, [r0, #8]
   bcc04:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bcc08:	6843      	ldr	r3, [r0, #4]
   bcc0a:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bcc0c:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bcc0e:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bcc10:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bcc14:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bcc16:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bcc1a:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bcc1e:	f7ff fd35 	bl	bc68c <spark_cloud_disconnect>
}
   bcc22:	b005      	add	sp, #20
   bcc24:	f85d fb04 	ldr.w	pc, [sp], #4

000bcc28 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bcc28:	680b      	ldr	r3, [r1, #0]
   bcc2a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bcc2c:	684b      	ldr	r3, [r1, #4]
   bcc2e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bcc30:	b113      	cbz	r3, bcc38 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bcc32:	685a      	ldr	r2, [r3, #4]
   bcc34:	3201      	adds	r2, #1
   bcc36:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bcc38:	4770      	bx	lr

000bcc3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bcc3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bcc3c:	4604      	mov	r4, r0
   bcc3e:	4668      	mov	r0, sp
   bcc40:	460d      	mov	r5, r1
   bcc42:	f7ff fff1 	bl	bcc28 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcc46:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bcc48:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcc4a:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bcc4c:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bcc4e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bcc50:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bcc52:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bcc54:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bcc56:	f7fa ff90 	bl	b7b7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bcc5a:	b135      	cbz	r5, bcc6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bcc5c:	1d28      	adds	r0, r5, #4
   bcc5e:	f7fa ff8c 	bl	b7b7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bcc62:	2108      	movs	r1, #8
   bcc64:	4628      	mov	r0, r5
   bcc66:	f7f7 fa1a 	bl	b409e <_ZdlPvj>
        return p;
    }
   bcc6a:	4620      	mov	r0, r4
   bcc6c:	b003      	add	sp, #12
   bcc6e:	bd30      	pop	{r4, r5, pc}

000bcc70 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bcc70:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bcc72:	b510      	push	{r4, lr}
      if (_M_empty())
   bcc74:	b90a      	cbnz	r2, bcc7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bcc76:	f002 ffb3 	bl	bfbe0 <_ZSt25__throw_bad_function_callv>
    }
   bcc7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bcc7e:	68c3      	ldr	r3, [r0, #12]
   bcc80:	4718      	bx	r3

000bcc82 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bcc82:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bcc84:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bcc86:	f100 0110 	add.w	r1, r0, #16
   bcc8a:	f7ff fff1 	bl	bcc70 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bcc8e:	bd08      	pop	{r3, pc}

000bcc90 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bcc90:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bcc92:	b510      	push	{r4, lr}
      if (_M_empty())
   bcc94:	b90a      	cbnz	r2, bcc9a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bcc96:	f002 ffa3 	bl	bfbe0 <_ZSt25__throw_bad_function_callv>
    }
   bcc9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bcc9e:	68c3      	ldr	r3, [r0, #12]
   bcca0:	4718      	bx	r3

000bcca2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bcca2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bcca4:	6800      	ldr	r0, [r0, #0]
   bcca6:	f100 0110 	add.w	r1, r0, #16
   bccaa:	f7ff fff1 	bl	bcc90 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bccae:	bd08      	pop	{r3, pc}

000bccb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bccb0:	b538      	push	{r3, r4, r5, lr}
   bccb2:	2300      	movs	r3, #0
   bccb4:	4604      	mov	r4, r0
   bccb6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bccb8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bccba:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bccbc:	f7f7 f9eb 	bl	b4096 <_Znwj>
   bccc0:	b128      	cbz	r0, bccce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bccc2:	2301      	movs	r3, #1
   bccc4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bccc8:	4b02      	ldr	r3, [pc, #8]	; (bccd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bccca:	6003      	str	r3, [r0, #0]
   bcccc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bccce:	6020      	str	r0, [r4, #0]
	}
   bccd0:	4620      	mov	r0, r4
   bccd2:	bd38      	pop	{r3, r4, r5, pc}
   bccd4:	000c241c 	.word	0x000c241c

000bccd8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bccd8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bccda:	2300      	movs	r3, #0
   bccdc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bccde:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bcce0:	4604      	mov	r4, r0
   bcce2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bcce4:	b12b      	cbz	r3, bccf2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bcce6:	2202      	movs	r2, #2
   bcce8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bccea:	68eb      	ldr	r3, [r5, #12]
   bccec:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bccee:	68ab      	ldr	r3, [r5, #8]
   bccf0:	60a3      	str	r3, [r4, #8]
    }
   bccf2:	4620      	mov	r0, r4
   bccf4:	bd38      	pop	{r3, r4, r5, pc}
	...

000bccf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bccf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bccfa:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bccfc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bccfe:	4668      	mov	r0, sp
   bcd00:	f7ff ff1c 	bl	bcb3c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bcd04:	f04f 0302 	mov.w	r3, #2
   bcd08:	e8d4 2f4f 	ldrexb	r2, [r4]
   bcd0c:	2a00      	cmp	r2, #0
   bcd0e:	d103      	bne.n	bcd18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bcd10:	e8c4 3f41 	strexb	r1, r3, [r4]
   bcd14:	2900      	cmp	r1, #0
   bcd16:	d1f7      	bne.n	bcd08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bcd18:	d125      	bne.n	bcd66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bcd1a:	f104 050c 	add.w	r5, r4, #12
   bcd1e:	4669      	mov	r1, sp
   bcd20:	4628      	mov	r0, r5
   bcd22:	f7ff ff0b 	bl	bcb3c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bcd26:	f3bf 8f5b 	dmb	ish
   bcd2a:	2301      	movs	r3, #1
   bcd2c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bcd2e:	2000      	movs	r0, #0
   bcd30:	f104 0308 	add.w	r3, r4, #8
   bcd34:	f3bf 8f5b 	dmb	ish
   bcd38:	e853 6f00 	ldrex	r6, [r3]
   bcd3c:	e843 0200 	strex	r2, r0, [r3]
   bcd40:	2a00      	cmp	r2, #0
   bcd42:	d1f9      	bne.n	bcd38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bcd44:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bcd48:	b16e      	cbz	r6, bcd66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bcd4a:	f7ff fbf5 	bl	bc538 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bcd4e:	b178      	cbz	r0, bcd70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bcd50:	4629      	mov	r1, r5
   bcd52:	4630      	mov	r0, r6
   bcd54:	f7ff ff8c 	bl	bcc70 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bcd58:	4630      	mov	r0, r6
   bcd5a:	f7f8 f9d8 	bl	b510e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bcd5e:	2110      	movs	r1, #16
   bcd60:	4630      	mov	r0, r6
   bcd62:	f7f7 f99c 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bcd66:	4668      	mov	r0, sp
   bcd68:	f7ff fef5 	bl	bcb56 <_ZN8particle5ErrorD1Ev>
    }
   bcd6c:	b009      	add	sp, #36	; 0x24
   bcd6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bcd70:	4631      	mov	r1, r6
   bcd72:	a802      	add	r0, sp, #8
   bcd74:	f7ff ffb0 	bl	bccd8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bcd78:	68e0      	ldr	r0, [r4, #12]
   bcd7a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcd7e:	b108      	cbz	r0, bcd84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bcd80:	f003 fcfe 	bl	c0780 <strdup>
        type_(type) {
   bcd84:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bcd86:	2010      	movs	r0, #16
   bcd88:	f8ad 501c 	strh.w	r5, [sp, #28]
   bcd8c:	f7f7 f983 	bl	b4096 <_Znwj>
   bcd90:	4605      	mov	r5, r0
   bcd92:	b1e8      	cbz	r0, bcdd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bcd94:	2700      	movs	r7, #0
   bcd96:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bcd98:	2018      	movs	r0, #24
   bcd9a:	f7f7 f97c 	bl	b4096 <_Znwj>
   bcd9e:	4604      	mov	r4, r0
   bcda0:	b188      	cbz	r0, bcdc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bcda2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bcda4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bcda6:	a802      	add	r0, sp, #8
   bcda8:	f7fa ff77 	bl	b7c9a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcdac:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bcdae:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bcdb0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcdb2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bcdb4:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bcdb6:	a906      	add	r1, sp, #24
   bcdb8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bcdba:	60e3      	str	r3, [r4, #12]
   bcdbc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bcdc0:	9205      	str	r2, [sp, #20]
   bcdc2:	f7ff febb 	bl	bcb3c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bcdc6:	4b08      	ldr	r3, [pc, #32]	; (bcde8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bcdc8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bcdca:	4b08      	ldr	r3, [pc, #32]	; (bcdec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bcdcc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bcdce:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bcdd0:	a806      	add	r0, sp, #24
   bcdd2:	f7ff fec0 	bl	bcb56 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bcdd6:	a802      	add	r0, sp, #8
   bcdd8:	f7f8 f999 	bl	b510e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bcddc:	2200      	movs	r2, #0
   bcdde:	4629      	mov	r1, r5
   bcde0:	4803      	ldr	r0, [pc, #12]	; (bcdf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bcde2:	f7ff fbb1 	bl	bc548 <application_thread_invoke>
   bcde6:	e7b7      	b.n	bcd58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bcde8:	000bcc83 	.word	0x000bcc83
   bcdec:	000bcf05 	.word	0x000bcf05
   bcdf0:	000bc863 	.word	0x000bc863

000bcdf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bcdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcdf8:	b08b      	sub	sp, #44	; 0x2c
   bcdfa:	4605      	mov	r5, r0
   bcdfc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bce00:	460f      	mov	r7, r1
   bce02:	4690      	mov	r8, r2
   bce04:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bce06:	f7ff fc09 	bl	bc61c <spark_cloud_flag_connected>
   bce0a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bce0c:	4683      	mov	fp, r0
   bce0e:	bb38      	cbnz	r0, bce60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bce10:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bce14:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bce16:	a905      	add	r1, sp, #20
   bce18:	4630      	mov	r0, r6
   bce1a:	f8ad 3018 	strh.w	r3, [sp, #24]
   bce1e:	f7ff fe8d 	bl	bcb3c <_ZN8particle5ErrorC1EOS0_>
   bce22:	2014      	movs	r0, #20
   bce24:	f7f7 f937 	bl	b4096 <_Znwj>
   bce28:	4604      	mov	r4, r0
   bce2a:	b148      	cbz	r0, bce40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bce2c:	2302      	movs	r3, #2
   bce2e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bce30:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bce32:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bce36:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bce38:	4631      	mov	r1, r6
   bce3a:	300c      	adds	r0, #12
   bce3c:	f7ff fe7e 	bl	bcb3c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bce40:	4628      	mov	r0, r5
	: __shared_count(__p)
   bce42:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bce44:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bce48:	f7ff ff32 	bl	bccb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bce4c:	4630      	mov	r0, r6
   bce4e:	f7ff fe82 	bl	bcb56 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bce52:	a805      	add	r0, sp, #20
   bce54:	f7ff fe7f 	bl	bcb56 <_ZN8particle5ErrorD1Ev>
}
   bce58:	4628      	mov	r0, r5
   bce5a:	b00b      	add	sp, #44	; 0x2c
   bce5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bce60:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bce62:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bce64:	2014      	movs	r0, #20
   bce66:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bce6a:	9307      	str	r3, [sp, #28]
   bce6c:	f7f7 f913 	bl	b4096 <_Znwj>
   bce70:	4601      	mov	r1, r0
   bce72:	b118      	cbz	r0, bce7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bce74:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bce78:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bce7a:	7044      	strb	r4, [r0, #1]
   bce7c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bce7e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bce80:	f7ff ff16 	bl	bccb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bce84:	4b1e      	ldr	r3, [pc, #120]	; (bcf00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bce86:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bce88:	2008      	movs	r0, #8
   bce8a:	f7f7 f904 	bl	b4096 <_Znwj>
   bce8e:	4604      	mov	r4, r0
   bce90:	b110      	cbz	r0, bce98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bce92:	a903      	add	r1, sp, #12
   bce94:	f7ff fec8 	bl	bcc28 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bce98:	9600      	str	r6, [sp, #0]
   bce9a:	fa5f f38a 	uxtb.w	r3, sl
   bce9e:	464a      	mov	r2, r9
   bcea0:	4641      	mov	r1, r8
   bcea2:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bcea4:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bcea6:	f7ff fbc9 	bl	bc63c <spark_send_event>
   bceaa:	b9b8      	cbnz	r0, bcedc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bceac:	9b03      	ldr	r3, [sp, #12]
   bceae:	785b      	ldrb	r3, [r3, #1]
   bceb0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bceb4:	b993      	cbnz	r3, bcedc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bceb6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bceba:	a905      	add	r1, sp, #20
   bcebc:	a803      	add	r0, sp, #12
   bcebe:	9205      	str	r2, [sp, #20]
   bcec0:	f8ad 3018 	strh.w	r3, [sp, #24]
   bcec4:	f7ff ff18 	bl	bccf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bcec8:	a805      	add	r0, sp, #20
   bceca:	f7ff fe44 	bl	bcb56 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bcece:	a805      	add	r0, sp, #20
   bced0:	9909      	ldr	r1, [sp, #36]	; 0x24
   bced2:	f7ff feb2 	bl	bcc3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bced6:	a806      	add	r0, sp, #24
   bced8:	f7fa fe4f 	bl	b7b7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bcedc:	a903      	add	r1, sp, #12
   bcede:	a805      	add	r0, sp, #20
   bcee0:	f7ff fea2 	bl	bcc28 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcee4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bcee6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcee8:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bceea:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bceec:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bceee:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bcef0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bcef2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bcef4:	f7fa fe41 	bl	b7b7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bcef8:	a804      	add	r0, sp, #16
   bcefa:	f7fa fe3e 	bl	b7b7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bcefe:	e7ab      	b.n	bce58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bcf00:	000bcf81 	.word	0x000bcf81

000bcf04 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bcf04:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bcf06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcf08:	4605      	mov	r5, r0
	switch (__op)
   bcf0a:	d103      	bne.n	bcf14 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bcf0c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bcf0e:	6003      	str	r3, [r0, #0]
      }
   bcf10:	2000      	movs	r0, #0
   bcf12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bcf14:	2a02      	cmp	r2, #2
   bcf16:	d010      	beq.n	bcf3a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bcf18:	2a03      	cmp	r2, #3
   bcf1a:	d1f9      	bne.n	bcf10 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bcf1c:	6804      	ldr	r4, [r0, #0]
   bcf1e:	2c00      	cmp	r4, #0
   bcf20:	d0f6      	beq.n	bcf10 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bcf22:	f104 0010 	add.w	r0, r4, #16
   bcf26:	f7ff fe16 	bl	bcb56 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bcf2a:	4620      	mov	r0, r4
   bcf2c:	f7f8 f8ef 	bl	b510e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bcf30:	2118      	movs	r1, #24
   bcf32:	4620      	mov	r0, r4
   bcf34:	f7f7 f8b3 	bl	b409e <_ZdlPvj>
   bcf38:	e7ea      	b.n	bcf10 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bcf3a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bcf3c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bcf3e:	f7f7 f8aa 	bl	b4096 <_Znwj>
   bcf42:	4604      	mov	r4, r0
   bcf44:	b150      	cbz	r0, bcf5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bcf46:	4631      	mov	r1, r6
   bcf48:	f7ff fec6 	bl	bccd8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bcf4c:	6930      	ldr	r0, [r6, #16]
   bcf4e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcf52:	b108      	cbz	r0, bcf58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bcf54:	f003 fc14 	bl	c0780 <strdup>
        type_(type) {
   bcf58:	6120      	str	r0, [r4, #16]
   bcf5a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bcf5c:	602c      	str	r4, [r5, #0]
	}
   bcf5e:	e7d7      	b.n	bcf10 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bcf60 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bcf60:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bcf62:	2300      	movs	r3, #0
   bcf64:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bcf66:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bcf68:	4604      	mov	r4, r0
   bcf6a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bcf6c:	b12b      	cbz	r3, bcf7a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bcf6e:	2202      	movs	r2, #2
   bcf70:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bcf72:	68eb      	ldr	r3, [r5, #12]
   bcf74:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bcf76:	68ab      	ldr	r3, [r5, #8]
   bcf78:	60a3      	str	r3, [r4, #8]
    }
   bcf7a:	4620      	mov	r0, r4
   bcf7c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bcf80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bcf80:	b5f0      	push	{r4, r5, r6, r7, lr}
   bcf82:	b089      	sub	sp, #36	; 0x24
   bcf84:	4604      	mov	r4, r0
   bcf86:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bcf88:	a801      	add	r0, sp, #4
   bcf8a:	4611      	mov	r1, r2
   bcf8c:	f7ff fe55 	bl	bcc3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bcf90:	b1a4      	cbz	r4, bcfbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bcf92:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcf94:	b11d      	cbz	r5, bcf9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bcf96:	4628      	mov	r0, r5
   bcf98:	f003 fbf2 	bl	c0780 <strdup>
   bcf9c:	4605      	mov	r5, r0
   bcf9e:	a801      	add	r0, sp, #4
   bcfa0:	a903      	add	r1, sp, #12
        type_(type) {
   bcfa2:	9503      	str	r5, [sp, #12]
   bcfa4:	f8ad 4010 	strh.w	r4, [sp, #16]
   bcfa8:	f7ff fea6 	bl	bccf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bcfac:	a803      	add	r0, sp, #12
   bcfae:	f7ff fdd2 	bl	bcb56 <_ZN8particle5ErrorD1Ev>
   bcfb2:	a802      	add	r0, sp, #8
   bcfb4:	f7fa fde1 	bl	b7b7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bcfb8:	b009      	add	sp, #36	; 0x24
   bcfba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bcfbc:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bcfbe:	2301      	movs	r3, #1
   bcfc0:	e8d5 2f4f 	ldrexb	r2, [r5]
   bcfc4:	2a00      	cmp	r2, #0
   bcfc6:	d103      	bne.n	bcfd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bcfc8:	e8c5 3f41 	strexb	r1, r3, [r5]
   bcfcc:	2900      	cmp	r1, #0
   bcfce:	d1f7      	bne.n	bcfc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bcfd0:	d1ef      	bne.n	bcfb2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bcfd2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bcfd4:	f3bf 8f5b 	dmb	ish
   bcfd8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bcfda:	1d2b      	adds	r3, r5, #4
   bcfdc:	f3bf 8f5b 	dmb	ish
   bcfe0:	e853 6f00 	ldrex	r6, [r3]
   bcfe4:	e843 4200 	strex	r2, r4, [r3]
   bcfe8:	2a00      	cmp	r2, #0
   bcfea:	d1f9      	bne.n	bcfe0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bcfec:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bcff0:	2e00      	cmp	r6, #0
   bcff2:	d0de      	beq.n	bcfb2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bcff4:	4620      	mov	r0, r4
   bcff6:	f7ff fa9f 	bl	bc538 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bcffa:	4607      	mov	r7, r0
   bcffc:	b160      	cbz	r0, bd018 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bcffe:	f105 010c 	add.w	r1, r5, #12
   bd002:	4630      	mov	r0, r6
   bd004:	f7ff fe44 	bl	bcc90 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bd008:	4630      	mov	r0, r6
   bd00a:	f7f8 f880 	bl	b510e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bd00e:	2110      	movs	r1, #16
   bd010:	4630      	mov	r0, r6
   bd012:	f7f7 f844 	bl	b409e <_ZdlPvj>
   bd016:	e7cc      	b.n	bcfb2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bd018:	4631      	mov	r1, r6
   bd01a:	a803      	add	r0, sp, #12
   bd01c:	f7ff ffa0 	bl	bcf60 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bd020:	7b2b      	ldrb	r3, [r5, #12]
   bd022:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bd026:	2010      	movs	r0, #16
   bd028:	f7f7 f835 	bl	b4096 <_Znwj>
   bd02c:	4605      	mov	r5, r0
   bd02e:	b1d0      	cbz	r0, bd066 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bd030:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd032:	2014      	movs	r0, #20
   bd034:	f7f7 f82f 	bl	b4096 <_Znwj>
   bd038:	4604      	mov	r4, r0
   bd03a:	b178      	cbz	r0, bd05c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bd03c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bd03e:	4601      	mov	r1, r0
   bd040:	a803      	add	r0, sp, #12
   bd042:	f7fa fe2a 	bl	b7c9a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd046:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bd048:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bd04a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd04c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bd04e:	9205      	str	r2, [sp, #20]
   bd050:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bd052:	60e3      	str	r3, [r4, #12]
   bd054:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bd058:	9206      	str	r2, [sp, #24]
   bd05a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bd05c:	4b06      	ldr	r3, [pc, #24]	; (bd078 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bd05e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bd060:	4b06      	ldr	r3, [pc, #24]	; (bd07c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd062:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bd064:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bd066:	a803      	add	r0, sp, #12
   bd068:	f7f8 f851 	bl	b510e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bd06c:	2200      	movs	r2, #0
   bd06e:	4629      	mov	r1, r5
   bd070:	4803      	ldr	r0, [pc, #12]	; (bd080 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bd072:	f7ff fa69 	bl	bc548 <application_thread_invoke>
   bd076:	e7c7      	b.n	bd008 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bd078:	000bcca3 	.word	0x000bcca3
   bd07c:	000bd085 	.word	0x000bd085
   bd080:	000bc863 	.word	0x000bc863

000bd084 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bd084:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bd086:	b570      	push	{r4, r5, r6, lr}
   bd088:	4604      	mov	r4, r0
	switch (__op)
   bd08a:	d103      	bne.n	bd094 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bd08c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bd08e:	6003      	str	r3, [r0, #0]
      }
   bd090:	2000      	movs	r0, #0
   bd092:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bd094:	2a02      	cmp	r2, #2
   bd096:	d00c      	beq.n	bd0b2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bd098:	2a03      	cmp	r2, #3
   bd09a:	d1f9      	bne.n	bd090 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bd09c:	6804      	ldr	r4, [r0, #0]
   bd09e:	2c00      	cmp	r4, #0
   bd0a0:	d0f6      	beq.n	bd090 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bd0a2:	4620      	mov	r0, r4
   bd0a4:	f7f8 f833 	bl	b510e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bd0a8:	2114      	movs	r1, #20
   bd0aa:	4620      	mov	r0, r4
   bd0ac:	f7f6 fff7 	bl	b409e <_ZdlPvj>
   bd0b0:	e7ee      	b.n	bd090 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bd0b2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bd0b4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bd0b6:	f7f6 ffee 	bl	b4096 <_Znwj>
   bd0ba:	4605      	mov	r5, r0
   bd0bc:	b120      	cbz	r0, bd0c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bd0be:	4631      	mov	r1, r6
   bd0c0:	f7ff ff4e 	bl	bcf60 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bd0c4:	7c33      	ldrb	r3, [r6, #16]
   bd0c6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bd0c8:	6025      	str	r5, [r4, #0]
	}
   bd0ca:	e7e1      	b.n	bd090 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bd0cc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bd0cc:	2200      	movs	r2, #0
   bd0ce:	6840      	ldr	r0, [r0, #4]
   bd0d0:	4611      	mov	r1, r2
   bd0d2:	f7ff bb1b 	b.w	bc70c <network_listening>

000bd0d6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bd0d6:	2200      	movs	r2, #0
   bd0d8:	6840      	ldr	r0, [r0, #4]
   bd0da:	4611      	mov	r1, r2
   bd0dc:	f7ff bb26 	b.w	bc72c <network_get_listen_timeout>

000bd0e0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bd0e0:	6840      	ldr	r0, [r0, #4]
   bd0e2:	2200      	movs	r2, #0
   bd0e4:	f7ff bb1a 	b.w	bc71c <network_set_listen_timeout>

000bd0e8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bd0e8:	6840      	ldr	r0, [r0, #4]
   bd0ea:	2200      	movs	r2, #0
   bd0ec:	f081 0101 	eor.w	r1, r1, #1
   bd0f0:	f7ff bb04 	b.w	bc6fc <network_listen>

000bd0f4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bd0f4:	2300      	movs	r3, #0
   bd0f6:	6840      	ldr	r0, [r0, #4]
   bd0f8:	461a      	mov	r2, r3
   bd0fa:	4619      	mov	r1, r3
   bd0fc:	f7ff baf6 	b.w	bc6ec <network_off>

000bd100 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bd100:	2300      	movs	r3, #0
   bd102:	6840      	ldr	r0, [r0, #4]
   bd104:	461a      	mov	r2, r3
   bd106:	4619      	mov	r1, r3
   bd108:	f7ff bae8 	b.w	bc6dc <network_on>

000bd10c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bd10c:	2200      	movs	r2, #0
   bd10e:	6840      	ldr	r0, [r0, #4]
   bd110:	4611      	mov	r1, r2
   bd112:	f7ff badb 	b.w	bc6cc <network_ready>

000bd116 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bd116:	2200      	movs	r2, #0
   bd118:	6840      	ldr	r0, [r0, #4]
   bd11a:	4611      	mov	r1, r2
   bd11c:	f7ff bac6 	b.w	bc6ac <network_connecting>

000bd120 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bd120:	6840      	ldr	r0, [r0, #4]
   bd122:	2200      	movs	r2, #0
   bd124:	2102      	movs	r1, #2
   bd126:	f7ff bac9 	b.w	bc6bc <network_disconnect>

000bd12a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bd12a:	2300      	movs	r3, #0
   bd12c:	6840      	ldr	r0, [r0, #4]
   bd12e:	461a      	mov	r2, r3
   bd130:	f7ff bab4 	b.w	bc69c <network_connect>

000bd134 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bd134:	4b02      	ldr	r3, [pc, #8]	; (bd140 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bd136:	2203      	movs	r2, #3
   bd138:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bd13a:	4a02      	ldr	r2, [pc, #8]	; (bd144 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bd13c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bd13e:	4770      	bx	lr
   bd140:	2003e5b0 	.word	0x2003e5b0
   bd144:	000c2438 	.word	0x000c2438

000bd148 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   bd148:	6800      	ldr	r0, [r0, #0]
   bd14a:	f000 b8f3 	b.w	bd334 <_ZN7TwoWire4lockEv>

000bd14e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   bd14e:	b510      	push	{r4, lr}
   bd150:	4604      	mov	r4, r0
      lock_(_lock) {
   bd152:	6001      	str	r1, [r0, #0]
   bd154:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   bd156:	b10a      	cbz	r2, bd15c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   bd158:	f7ff fff6 	bl	bd148 <_ZN9FuelGauge4lockEv>
}
   bd15c:	4620      	mov	r0, r4
   bd15e:	bd10      	pop	{r4, pc}

000bd160 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   bd160:	b513      	push	{r0, r1, r4, lr}
   bd162:	4604      	mov	r4, r0
   bd164:	9101      	str	r1, [sp, #4]
            return &Wire1;
   bd166:	f002 fccd 	bl	bfb04 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   bd16a:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   bd16c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   bd16e:	4620      	mov	r0, r4
   bd170:	f7ff ffed 	bl	bd14e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   bd174:	4620      	mov	r0, r4
   bd176:	b002      	add	sp, #8
   bd178:	bd10      	pop	{r4, pc}

000bd17a <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   bd17a:	6800      	ldr	r0, [r0, #0]
   bd17c:	f000 b8e3 	b.w	bd346 <_ZN7TwoWire6unlockEv>

000bd180 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   bd180:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bd184:	4604      	mov	r4, r0
   bd186:	461d      	mov	r5, r3
   bd188:	460f      	mov	r7, r1
   bd18a:	4616      	mov	r6, r2
      { _M_device.lock(); }
   bd18c:	f7ff ffdc 	bl	bd148 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bd190:	2236      	movs	r2, #54	; 0x36
   bd192:	2300      	movs	r3, #0
   bd194:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bd198:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   bd19a:	f04f 0801 	mov.w	r8, #1
   bd19e:	230a      	movs	r3, #10
   bd1a0:	4669      	mov	r1, sp
   bd1a2:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bd1a6:	f000 f8a9 	bl	bd2fc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   bd1aa:	6820      	ldr	r0, [r4, #0]
   bd1ac:	6803      	ldr	r3, [r0, #0]
   bd1ae:	4639      	mov	r1, r7
   bd1b0:	689b      	ldr	r3, [r3, #8]
   bd1b2:	4798      	blx	r3
    i2c_.write(MSB);
   bd1b4:	6820      	ldr	r0, [r4, #0]
   bd1b6:	6803      	ldr	r3, [r0, #0]
   bd1b8:	4631      	mov	r1, r6
   bd1ba:	689b      	ldr	r3, [r3, #8]
   bd1bc:	4798      	blx	r3
    i2c_.write(LSB);
   bd1be:	6820      	ldr	r0, [r4, #0]
   bd1c0:	6803      	ldr	r3, [r0, #0]
   bd1c2:	4629      	mov	r1, r5
   bd1c4:	689b      	ldr	r3, [r3, #8]
   bd1c6:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bd1c8:	4641      	mov	r1, r8
   bd1ca:	6820      	ldr	r0, [r4, #0]
   bd1cc:	f000 f8ae 	bl	bd32c <_ZN7TwoWire15endTransmissionEh>
   bd1d0:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   bd1d2:	4620      	mov	r0, r4
   bd1d4:	bf0c      	ite	eq
   bd1d6:	2500      	moveq	r5, #0
   bd1d8:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   bd1dc:	f7ff ffcd 	bl	bd17a <_ZN9FuelGauge6unlockEv>
}
   bd1e0:	4628      	mov	r0, r5
   bd1e2:	b004      	add	sp, #16
   bd1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd1e8 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   bd1e8:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   bd1ea:	2240      	movs	r2, #64	; 0x40
   bd1ec:	2300      	movs	r3, #0
   bd1ee:	2106      	movs	r1, #6
   bd1f0:	f7ff ffc6 	bl	bd180 <_ZN9FuelGauge13writeRegisterEhhh>
}
   bd1f4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bd1f8:	bd08      	pop	{r3, pc}

000bd1fa <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bd1fa:	4770      	bx	lr

000bd1fc <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bd1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd1fe:	4606      	mov	r6, r0
   bd200:	4615      	mov	r5, r2
   bd202:	460c      	mov	r4, r1
   bd204:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bd206:	42bc      	cmp	r4, r7
   bd208:	d006      	beq.n	bd218 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bd20a:	6833      	ldr	r3, [r6, #0]
   bd20c:	f814 1b01 	ldrb.w	r1, [r4], #1
   bd210:	689b      	ldr	r3, [r3, #8]
   bd212:	4630      	mov	r0, r6
   bd214:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bd216:	e7f6      	b.n	bd206 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bd218:	4628      	mov	r0, r5
   bd21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd21c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bd21c:	7c00      	ldrb	r0, [r0, #16]
   bd21e:	2200      	movs	r2, #0
   bd220:	f7fe bf88 	b.w	bc134 <hal_i2c_write>

000bd224 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bd224:	7c00      	ldrb	r0, [r0, #16]
   bd226:	2100      	movs	r1, #0
   bd228:	f7fe bf8c 	b.w	bc144 <hal_i2c_available>

000bd22c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bd22c:	7c00      	ldrb	r0, [r0, #16]
   bd22e:	2100      	movs	r1, #0
   bd230:	f7fe bf90 	b.w	bc154 <hal_i2c_read>

000bd234 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bd234:	7c00      	ldrb	r0, [r0, #16]
   bd236:	2100      	movs	r1, #0
   bd238:	f7fe bf94 	b.w	bc164 <hal_i2c_peek>

000bd23c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bd23c:	7c00      	ldrb	r0, [r0, #16]
   bd23e:	2100      	movs	r1, #0
   bd240:	f7fe bf98 	b.w	bc174 <hal_i2c_flush>

000bd244 <_ZN7TwoWireD0Ev>:
   bd244:	b510      	push	{r4, lr}
   bd246:	2114      	movs	r1, #20
   bd248:	4604      	mov	r4, r0
   bd24a:	f7f6 ff28 	bl	b409e <_ZdlPvj>
   bd24e:	4620      	mov	r0, r4
   bd250:	bd10      	pop	{r4, pc}
	...

000bd254 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bd254:	b538      	push	{r3, r4, r5, lr}
   bd256:	4604      	mov	r4, r0
   bd258:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bd25a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bd25e:	2200      	movs	r2, #0
   bd260:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bd264:	4b09      	ldr	r3, [pc, #36]	; (bd28c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   bd266:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bd268:	4608      	mov	r0, r1
   bd26a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   bd26c:	4629      	mov	r1, r5
   bd26e:	f7fe ff91 	bl	bc194 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bd272:	30bf      	adds	r0, #191	; 0xbf
   bd274:	d108      	bne.n	bd288 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   bd276:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bd278:	07db      	lsls	r3, r3, #31
   bd27a:	d505      	bpl.n	bd288 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   bd27c:	6868      	ldr	r0, [r5, #4]
   bd27e:	f7ff fa75 	bl	bc76c <free>
    free(conf.tx_buffer);
   bd282:	68e8      	ldr	r0, [r5, #12]
   bd284:	f7ff fa72 	bl	bc76c <free>
}
   bd288:	4620      	mov	r0, r4
   bd28a:	bd38      	pop	{r3, r4, r5, pc}
   bd28c:	000c2474 	.word	0x000c2474

000bd290 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bd290:	2300      	movs	r3, #0
   bd292:	7c00      	ldrb	r0, [r0, #16]
   bd294:	461a      	mov	r2, r3
   bd296:	4619      	mov	r1, r3
   bd298:	f7fe bf34 	b.w	bc104 <hal_i2c_begin>

000bd29c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bd29c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bd29e:	2200      	movs	r2, #0
   bd2a0:	2314      	movs	r3, #20
   bd2a2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bd2a6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bd2aa:	780b      	ldrb	r3, [r1, #0]
   bd2ac:	f88d 3008 	strb.w	r3, [sp, #8]
   bd2b0:	684b      	ldr	r3, [r1, #4]
   bd2b2:	9303      	str	r3, [sp, #12]
   bd2b4:	68cb      	ldr	r3, [r1, #12]
   bd2b6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bd2b8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bd2ba:	7a0b      	ldrb	r3, [r1, #8]
   bd2bc:	9305      	str	r3, [sp, #20]
   bd2be:	a901      	add	r1, sp, #4
   bd2c0:	f7fe ff80 	bl	bc1c4 <hal_i2c_request_ex>
}
   bd2c4:	b007      	add	sp, #28
   bd2c6:	f85d fb04 	ldr.w	pc, [sp], #4

000bd2ca <_ZN7TwoWire11requestFromEhjh>:
{
   bd2ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bd2cc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bd2ce:	f88d 1000 	strb.w	r1, [sp]
   bd2d2:	f04f 0164 	mov.w	r1, #100	; 0x64
   bd2d6:	9103      	str	r1, [sp, #12]
   bd2d8:	bf18      	it	ne
   bd2da:	2301      	movne	r3, #1
   bd2dc:	4669      	mov	r1, sp
    size_ = size;
   bd2de:	9201      	str	r2, [sp, #4]
   bd2e0:	f88d 3008 	strb.w	r3, [sp, #8]
   bd2e4:	f7ff ffda 	bl	bd29c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bd2e8:	b005      	add	sp, #20
   bd2ea:	f85d fb04 	ldr.w	pc, [sp], #4

000bd2ee <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bd2ee:	7c00      	ldrb	r0, [r0, #16]
   bd2f0:	2200      	movs	r2, #0
   bd2f2:	f7fe bf0f 	b.w	bc114 <hal_i2c_begin_transmission>

000bd2f6 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bd2f6:	b2c9      	uxtb	r1, r1
   bd2f8:	f7ff bff9 	b.w	bd2ee <_ZN7TwoWire17beginTransmissionEh>

000bd2fc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   bd2fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bd2fe:	2300      	movs	r3, #0
   bd300:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   bd304:	684a      	ldr	r2, [r1, #4]
   bd306:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   bd308:	2314      	movs	r3, #20
    };
   bd30a:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   bd30c:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   bd310:	780b      	ldrb	r3, [r1, #0]
    };
   bd312:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bd314:	7a0a      	ldrb	r2, [r1, #8]
   bd316:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   bd318:	7c00      	ldrb	r0, [r0, #16]
    };
   bd31a:	f88d 3008 	strb.w	r3, [sp, #8]
   bd31e:	aa01      	add	r2, sp, #4
   bd320:	4619      	mov	r1, r3
   bd322:	f7fe fef7 	bl	bc114 <hal_i2c_begin_transmission>
}
   bd326:	b007      	add	sp, #28
   bd328:	f85d fb04 	ldr.w	pc, [sp], #4

000bd32c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bd32c:	7c00      	ldrb	r0, [r0, #16]
   bd32e:	2200      	movs	r2, #0
   bd330:	f7fe bef8 	b.w	bc124 <hal_i2c_end_transmission>

000bd334 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bd334:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bd336:	2100      	movs	r1, #0
   bd338:	7c00      	ldrb	r0, [r0, #16]
   bd33a:	f7fe ff33 	bl	bc1a4 <hal_i2c_lock>
}
   bd33e:	fab0 f080 	clz	r0, r0
   bd342:	0940      	lsrs	r0, r0, #5
   bd344:	bd08      	pop	{r3, pc}

000bd346 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   bd346:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   bd348:	2100      	movs	r1, #0
   bd34a:	7c00      	ldrb	r0, [r0, #16]
   bd34c:	f7fe ff32 	bl	bc1b4 <hal_i2c_unlock>
}
   bd350:	fab0 f080 	clz	r0, r0
   bd354:	0940      	lsrs	r0, r0, #5
   bd356:	bd08      	pop	{r3, pc}

000bd358 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bd358:	4700      	bx	r0
	...

000bd35c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bd35c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bd360:	2400      	movs	r4, #0
{
   bd362:	461d      	mov	r5, r3
   bd364:	460f      	mov	r7, r1
   bd366:	4690      	mov	r8, r2
   bd368:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bd36a:	f7fe febb 	bl	bc0e4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bd36e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bd370:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bd374:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bd378:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bd37c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bd380:	bfa2      	ittt	ge
   bd382:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bd386:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bd38a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bd38c:	4907      	ldr	r1, [pc, #28]	; (bd3ac <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bd38e:	9400      	str	r4, [sp, #0]
   bd390:	4643      	mov	r3, r8
   bd392:	463a      	mov	r2, r7
   bd394:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bd396:	bfa8      	it	ge
   bd398:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bd39c:	f7fe fe9a 	bl	bc0d4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bd3a0:	fab0 f080 	clz	r0, r0
   bd3a4:	0940      	lsrs	r0, r0, #5
   bd3a6:	b004      	add	sp, #16
   bd3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd3ac:	000bd359 	.word	0x000bd359

000bd3b0 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   bd3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd3b2:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   bd3b4:	f7fe fe96 	bl	bc0e4 <HAL_Interrupts_Detach>
   bd3b8:	4605      	mov	r5, r0
   bd3ba:	b970      	cbnz	r0, bd3da <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   bd3bc:	4f08      	ldr	r7, [pc, #32]	; (bd3e0 <_Z15detachInterruptt+0x30>)
   bd3be:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   bd3c2:	b146      	cbz	r6, bd3d6 <_Z15detachInterruptt+0x26>
    class function<_Res(_ArgTypes...)>
   bd3c4:	4630      	mov	r0, r6
   bd3c6:	f7f7 fea2 	bl	b510e <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   bd3ca:	2110      	movs	r1, #16
   bd3cc:	4630      	mov	r0, r6
   bd3ce:	f7f6 fe66 	bl	b409e <_ZdlPvj>
        handlers[pin] = nullptr;
   bd3d2:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   bd3d6:	2001      	movs	r0, #1
   bd3d8:	e000      	b.n	bd3dc <_Z15detachInterruptt+0x2c>
        return false;
   bd3da:	2000      	movs	r0, #0
    }
    return true;
}
   bd3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd3de:	bf00      	nop
   bd3e0:	2003e5b8 	.word	0x2003e5b8

000bd3e4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bd3e4:	4770      	bx	lr

000bd3e6 <_ZN9IPAddressD0Ev>:
   bd3e6:	b510      	push	{r4, lr}
   bd3e8:	2118      	movs	r1, #24
   bd3ea:	4604      	mov	r4, r0
   bd3ec:	f7f6 fe57 	bl	b409e <_ZdlPvj>
   bd3f0:	4620      	mov	r0, r4
   bd3f2:	bd10      	pop	{r4, pc}

000bd3f4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bd3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bd3f6:	7d03      	ldrb	r3, [r0, #20]
   bd3f8:	2b06      	cmp	r3, #6
{
   bd3fa:	b08d      	sub	sp, #52	; 0x34
   bd3fc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bd3fe:	f100 0704 	add.w	r7, r0, #4
   bd402:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bd406:	d012      	beq.n	bd42e <_ZNK9IPAddress7printToER5Print+0x3a>
   bd408:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bd40c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bd410:	220a      	movs	r2, #10
   bd412:	4630      	mov	r0, r6
   bd414:	f001 fb0d 	bl	bea32 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bd418:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bd41a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bd41c:	d019      	beq.n	bd452 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bd41e:	2c00      	cmp	r4, #0
   bd420:	d0f4      	beq.n	bd40c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bd422:	212e      	movs	r1, #46	; 0x2e
   bd424:	4630      	mov	r0, r6
   bd426:	f001 faf5 	bl	bea14 <_ZN5Print5printEc>
   bd42a:	4404      	add	r4, r0
   bd42c:	e7ee      	b.n	bd40c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bd42e:	232f      	movs	r3, #47	; 0x2f
   bd430:	466a      	mov	r2, sp
   bd432:	4639      	mov	r1, r7
   bd434:	200a      	movs	r0, #10
		buf[0] = 0;
   bd436:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bd43a:	f7fe fecb 	bl	bc1d4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bd43e:	4668      	mov	r0, sp
   bd440:	f003 f9bb 	bl	c07ba <strlen>
   bd444:	6833      	ldr	r3, [r6, #0]
   bd446:	4602      	mov	r2, r0
   bd448:	68db      	ldr	r3, [r3, #12]
   bd44a:	4669      	mov	r1, sp
   bd44c:	4630      	mov	r0, r6
   bd44e:	4798      	blx	r3
   bd450:	4604      	mov	r4, r0
    }
    return n;
}
   bd452:	4620      	mov	r0, r4
   bd454:	b00d      	add	sp, #52	; 0x34
   bd456:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bd458 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bd458:	b510      	push	{r4, lr}
   bd45a:	4b05      	ldr	r3, [pc, #20]	; (bd470 <_ZN9IPAddressC1Ev+0x18>)
   bd45c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bd45e:	2211      	movs	r2, #17
   bd460:	f840 3b04 	str.w	r3, [r0], #4
   bd464:	2100      	movs	r1, #0
   bd466:	f003 f8ed 	bl	c0644 <memset>
}
   bd46a:	4620      	mov	r0, r4
   bd46c:	bd10      	pop	{r4, pc}
   bd46e:	bf00      	nop
   bd470:	000c249c 	.word	0x000c249c

000bd474 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bd474:	4603      	mov	r3, r0
   bd476:	4a07      	ldr	r2, [pc, #28]	; (bd494 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bd478:	b510      	push	{r4, lr}
   bd47a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bd47e:	f101 0210 	add.w	r2, r1, #16
   bd482:	f851 4b04 	ldr.w	r4, [r1], #4
   bd486:	f843 4b04 	str.w	r4, [r3], #4
   bd48a:	4291      	cmp	r1, r2
   bd48c:	d1f9      	bne.n	bd482 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bd48e:	780a      	ldrb	r2, [r1, #0]
   bd490:	701a      	strb	r2, [r3, #0]
}
   bd492:	bd10      	pop	{r4, pc}
   bd494:	000c249c 	.word	0x000c249c

000bd498 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bd498:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bd49a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bd49e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bd4a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bd4a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bd4aa:	2304      	movs	r3, #4
   bd4ac:	6041      	str	r1, [r0, #4]
   bd4ae:	7503      	strb	r3, [r0, #20]
}
   bd4b0:	bd10      	pop	{r4, pc}
	...

000bd4b4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bd4b4:	b507      	push	{r0, r1, r2, lr}
   bd4b6:	4b06      	ldr	r3, [pc, #24]	; (bd4d0 <_ZN9IPAddressC1EPKh+0x1c>)
   bd4b8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bd4ba:	78cb      	ldrb	r3, [r1, #3]
   bd4bc:	9300      	str	r3, [sp, #0]
   bd4be:	788b      	ldrb	r3, [r1, #2]
   bd4c0:	784a      	ldrb	r2, [r1, #1]
   bd4c2:	7809      	ldrb	r1, [r1, #0]
   bd4c4:	f7ff ffe8 	bl	bd498 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bd4c8:	b003      	add	sp, #12
   bd4ca:	f85d fb04 	ldr.w	pc, [sp], #4
   bd4ce:	bf00      	nop
   bd4d0:	000c249c 	.word	0x000c249c

000bd4d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bd4d4:	f100 0310 	add.w	r3, r0, #16
   bd4d8:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bd4da:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bd4de:	2901      	cmp	r1, #1
   bd4e0:	4618      	mov	r0, r3
   bd4e2:	d108      	bne.n	bd4f6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bd4e4:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bd4e8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bd4ec:	3a01      	subs	r2, #1
   bd4ee:	f103 0310 	add.w	r3, r3, #16
   bd4f2:	d1f2      	bne.n	bd4da <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bd4f4:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bd4f6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bd4f8:	bf04      	itt	eq
   bd4fa:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bd4fe:	1852      	addeq	r2, r2, r1
   bd500:	e7f4      	b.n	bd4ec <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bd502 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bd502:	b40e      	push	{r1, r2, r3}
   bd504:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd506:	b088      	sub	sp, #32
   bd508:	af00      	add	r7, sp, #0
   bd50a:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd50e:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bd510:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd514:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bd516:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd518:	462b      	mov	r3, r5
   bd51a:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bd51c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd51e:	f7ff f94d 	bl	bc7bc <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bd522:	280f      	cmp	r0, #15
   bd524:	687a      	ldr	r2, [r7, #4]
   bd526:	d91a      	bls.n	bd55e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bd528:	f100 0308 	add.w	r3, r0, #8
   bd52c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bd530:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bd532:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd536:	1c41      	adds	r1, r0, #1
   bd538:	462b      	mov	r3, r5
   bd53a:	4668      	mov	r0, sp
        va_start(args, fmt);
   bd53c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd53e:	f7ff f93d 	bl	bc7bc <vsnprintf>
        if (n > 0) {
   bd542:	1e02      	subs	r2, r0, #0
   bd544:	dd04      	ble.n	bd550 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bd546:	6823      	ldr	r3, [r4, #0]
   bd548:	4669      	mov	r1, sp
   bd54a:	689b      	ldr	r3, [r3, #8]
   bd54c:	4620      	mov	r0, r4
   bd54e:	4798      	blx	r3
   bd550:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bd552:	3720      	adds	r7, #32
   bd554:	46bd      	mov	sp, r7
   bd556:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bd55a:	b003      	add	sp, #12
   bd55c:	4770      	bx	lr
    } else if (n > 0) {
   bd55e:	2800      	cmp	r0, #0
   bd560:	d0f7      	beq.n	bd552 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bd562:	6823      	ldr	r3, [r4, #0]
   bd564:	4602      	mov	r2, r0
   bd566:	689b      	ldr	r3, [r3, #8]
   bd568:	f107 0110 	add.w	r1, r7, #16
   bd56c:	4620      	mov	r0, r4
   bd56e:	4798      	blx	r3
}
   bd570:	e7ef      	b.n	bd552 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bd572 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bd572:	b538      	push	{r3, r4, r5, lr}
   bd574:	680b      	ldr	r3, [r1, #0]
   bd576:	6003      	str	r3, [r0, #0]
   bd578:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bd57a:	6843      	ldr	r3, [r0, #4]
   bd57c:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bd57e:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bd580:	d008      	beq.n	bd594 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bd582:	b115      	cbz	r5, bd58a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bd584:	686b      	ldr	r3, [r5, #4]
   bd586:	3301      	adds	r3, #1
   bd588:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bd58a:	6860      	ldr	r0, [r4, #4]
   bd58c:	b108      	cbz	r0, bd592 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bd58e:	f7ff f97c 	bl	bc88a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bd592:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bd594:	bd38      	pop	{r3, r4, r5, pc}

000bd596 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bd596:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bd598:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bd59a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bd59e:	689b      	ldr	r3, [r3, #8]
   bd5a0:	2201      	movs	r2, #1
   bd5a2:	f10d 0107 	add.w	r1, sp, #7
   bd5a6:	4798      	blx	r3
}
   bd5a8:	b003      	add	sp, #12
   bd5aa:	f85d fb04 	ldr.w	pc, [sp], #4

000bd5ae <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bd5ae:	460b      	mov	r3, r1
   bd5b0:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bd5b2:	2200      	movs	r2, #0
   bd5b4:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bd5b6:	e9c0 2200 	strd	r2, r2, [r0]
   bd5ba:	4604      	mov	r4, r0
        t_ = t;
   bd5bc:	6083      	str	r3, [r0, #8]
    if (t) {
   bd5be:	b90b      	cbnz	r3, bd5c4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bd5c0:	4620      	mov	r0, r4
   bd5c2:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bd5c4:	f7ff ffd5 	bl	bd572 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bd5c8:	e7fa      	b.n	bd5c0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bd5ca <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bd5ca:	6883      	ldr	r3, [r0, #8]
   bd5cc:	b1eb      	cbz	r3, bd60a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bd5ce:	781a      	ldrb	r2, [r3, #0]
   bd5d0:	2a03      	cmp	r2, #3
   bd5d2:	d81a      	bhi.n	bd60a <_ZNK5spark9JSONValue4typeEv+0x40>
   bd5d4:	e8df f002 	tbb	[pc, r2]
   bd5d8:	1b021704 	.word	0x1b021704
   bd5dc:	2005      	movs	r0, #5
   bd5de:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bd5e0:	6802      	ldr	r2, [r0, #0]
   bd5e2:	685b      	ldr	r3, [r3, #4]
   bd5e4:	6852      	ldr	r2, [r2, #4]
   bd5e6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bd5e8:	282d      	cmp	r0, #45	; 0x2d
   bd5ea:	d012      	beq.n	bd612 <_ZNK5spark9JSONValue4typeEv+0x48>
   bd5ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bd5f0:	2b09      	cmp	r3, #9
   bd5f2:	d90e      	bls.n	bd612 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bd5f4:	2874      	cmp	r0, #116	; 0x74
   bd5f6:	d00e      	beq.n	bd616 <_ZNK5spark9JSONValue4typeEv+0x4c>
   bd5f8:	2866      	cmp	r0, #102	; 0x66
   bd5fa:	d00c      	beq.n	bd616 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bd5fc:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bd600:	4258      	negs	r0, r3
   bd602:	4158      	adcs	r0, r3
   bd604:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bd606:	2006      	movs	r0, #6
   bd608:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bd60a:	2000      	movs	r0, #0
   bd60c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bd60e:	2004      	movs	r0, #4
   bd610:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bd612:	2003      	movs	r0, #3
   bd614:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bd616:	2002      	movs	r0, #2
}
   bd618:	4770      	bx	lr

000bd61a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bd61a:	b510      	push	{r4, lr}
   bd61c:	4604      	mov	r4, r0
    switch (type()) {
   bd61e:	f7ff ffd4 	bl	bd5ca <_ZNK5spark9JSONValue4typeEv>
   bd622:	2802      	cmp	r0, #2
   bd624:	d00e      	beq.n	bd644 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bd626:	1ec3      	subs	r3, r0, #3
   bd628:	b2db      	uxtb	r3, r3
   bd62a:	2b01      	cmp	r3, #1
   bd62c:	d814      	bhi.n	bd658 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bd62e:	6822      	ldr	r2, [r4, #0]
   bd630:	68a3      	ldr	r3, [r4, #8]
   bd632:	6850      	ldr	r0, [r2, #4]
   bd634:	685b      	ldr	r3, [r3, #4]
}
   bd636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bd63a:	220a      	movs	r2, #10
   bd63c:	2100      	movs	r1, #0
   bd63e:	4418      	add	r0, r3
   bd640:	f003 b9ac 	b.w	c099c <strtol>
        const char* const s = d_->json + t_->start;
   bd644:	6822      	ldr	r2, [r4, #0]
   bd646:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bd648:	6852      	ldr	r2, [r2, #4]
   bd64a:	685b      	ldr	r3, [r3, #4]
   bd64c:	5cd0      	ldrb	r0, [r2, r3]
   bd64e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bd652:	4258      	negs	r0, r3
   bd654:	4158      	adcs	r0, r3
}
   bd656:	bd10      	pop	{r4, pc}
    switch (type()) {
   bd658:	2000      	movs	r0, #0
   bd65a:	e7fc      	b.n	bd656 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bd65c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bd65c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bd65e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bd660:	e9c0 3300 	strd	r3, r3, [r0]
   bd664:	4604      	mov	r4, r0
        n_(0) {
   bd666:	480e      	ldr	r0, [pc, #56]	; (bd6a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bd668:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bd66c:	b1a9      	cbz	r1, bd69a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bd66e:	780b      	ldrb	r3, [r1, #0]
   bd670:	2b03      	cmp	r3, #3
   bd672:	d006      	beq.n	bd682 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bd674:	b98b      	cbnz	r3, bd69a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bd676:	6813      	ldr	r3, [r2, #0]
   bd678:	6858      	ldr	r0, [r3, #4]
   bd67a:	684b      	ldr	r3, [r1, #4]
   bd67c:	5cc3      	ldrb	r3, [r0, r3]
   bd67e:	2b6e      	cmp	r3, #110	; 0x6e
   bd680:	d007      	beq.n	bd692 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bd682:	6813      	ldr	r3, [r2, #0]
   bd684:	684d      	ldr	r5, [r1, #4]
   bd686:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bd688:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bd68a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bd68c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bd68e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bd690:	60e3      	str	r3, [r4, #12]
   bd692:	4611      	mov	r1, r2
   bd694:	4620      	mov	r0, r4
   bd696:	f7ff ff6c 	bl	bd572 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bd69a:	4620      	mov	r0, r4
   bd69c:	bd38      	pop	{r3, r4, r5, pc}
   bd69e:	bf00      	nop
   bd6a0:	000c2508 	.word	0x000c2508

000bd6a4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bd6a4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bd6a6:	2500      	movs	r5, #0
   bd6a8:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bd6aa:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bd6ae:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bd6b2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bd6b6:	4604      	mov	r4, r0
   bd6b8:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bd6ba:	b14b      	cbz	r3, bd6d0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bd6bc:	781a      	ldrb	r2, [r3, #0]
   bd6be:	2a01      	cmp	r2, #1
   bd6c0:	d106      	bne.n	bd6d0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bd6c2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bd6c6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bd6c8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bd6ca:	6143      	str	r3, [r0, #20]
   bd6cc:	f7ff ff51 	bl	bd572 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bd6d0:	4620      	mov	r0, r4
   bd6d2:	bd38      	pop	{r3, r4, r5, pc}

000bd6d4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bd6d4:	b510      	push	{r4, lr}
    if (!n_) {
   bd6d6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bd6d8:	4604      	mov	r4, r0
    if (!n_) {
   bd6da:	b163      	cbz	r3, bd6f6 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bd6dc:	6880      	ldr	r0, [r0, #8]
   bd6de:	60e0      	str	r0, [r4, #12]
    --n_;
   bd6e0:	3b01      	subs	r3, #1
    ++t_;
   bd6e2:	3010      	adds	r0, #16
   bd6e4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bd6e6:	6120      	str	r0, [r4, #16]
    --n_;
   bd6e8:	6163      	str	r3, [r4, #20]
    if (n_) {
   bd6ea:	b113      	cbz	r3, bd6f2 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bd6ec:	f7ff fef2 	bl	bd4d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bd6f0:	60a0      	str	r0, [r4, #8]
    return true;
   bd6f2:	2001      	movs	r0, #1
   bd6f4:	e000      	b.n	bd6f8 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bd6f6:	4618      	mov	r0, r3
}
   bd6f8:	bd10      	pop	{r4, pc}

000bd6fa <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bd6fa:	b510      	push	{r4, lr}
    write('}');
   bd6fc:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bd6fe:	4604      	mov	r4, r0
    write('}');
   bd700:	f7ff ff49 	bl	bd596 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bd704:	2301      	movs	r3, #1
   bd706:	7123      	strb	r3, [r4, #4]
}
   bd708:	4620      	mov	r0, r4
   bd70a:	bd10      	pop	{r4, pc}

000bd70c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bd70c:	b508      	push	{r3, lr}
    switch (state_) {
   bd70e:	7903      	ldrb	r3, [r0, #4]
   bd710:	2b01      	cmp	r3, #1
   bd712:	d002      	beq.n	bd71a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bd714:	2b02      	cmp	r3, #2
   bd716:	d004      	beq.n	bd722 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bd718:	bd08      	pop	{r3, pc}
        write(',');
   bd71a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bd71c:	f7ff ff3b 	bl	bd596 <_ZN5spark10JSONWriter5writeEc>
}
   bd720:	e7fa      	b.n	bd718 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bd722:	213a      	movs	r1, #58	; 0x3a
   bd724:	e7fa      	b.n	bd71c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bd726 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bd726:	b510      	push	{r4, lr}
   bd728:	4604      	mov	r4, r0
    writeSeparator();
   bd72a:	f7ff ffef 	bl	bd70c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bd72e:	4620      	mov	r0, r4
   bd730:	217b      	movs	r1, #123	; 0x7b
   bd732:	f7ff ff30 	bl	bd596 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bd736:	2300      	movs	r3, #0
   bd738:	7123      	strb	r3, [r4, #4]
}
   bd73a:	4620      	mov	r0, r4
   bd73c:	bd10      	pop	{r4, pc}
	...

000bd740 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bd740:	b513      	push	{r0, r1, r4, lr}
   bd742:	4604      	mov	r4, r0
   bd744:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bd746:	f7ff ffe1 	bl	bd70c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bd74a:	6823      	ldr	r3, [r4, #0]
   bd74c:	9a01      	ldr	r2, [sp, #4]
   bd74e:	68db      	ldr	r3, [r3, #12]
   bd750:	4903      	ldr	r1, [pc, #12]	; (bd760 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bd752:	4620      	mov	r0, r4
   bd754:	4798      	blx	r3
    state_ = NEXT;
   bd756:	2301      	movs	r3, #1
}
   bd758:	4620      	mov	r0, r4
    state_ = NEXT;
   bd75a:	7123      	strb	r3, [r4, #4]
}
   bd75c:	b002      	add	sp, #8
   bd75e:	bd10      	pop	{r4, pc}
   bd760:	000c0f31 	.word	0x000c0f31

000bd764 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bd764:	b513      	push	{r0, r1, r4, lr}
   bd766:	4604      	mov	r4, r0
   bd768:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bd76a:	f7ff ffcf 	bl	bd70c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bd76e:	6823      	ldr	r3, [r4, #0]
   bd770:	9a01      	ldr	r2, [sp, #4]
   bd772:	68db      	ldr	r3, [r3, #12]
   bd774:	4903      	ldr	r1, [pc, #12]	; (bd784 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bd776:	4620      	mov	r0, r4
   bd778:	4798      	blx	r3
    state_ = NEXT;
   bd77a:	2301      	movs	r3, #1
}
   bd77c:	4620      	mov	r0, r4
    state_ = NEXT;
   bd77e:	7123      	strb	r3, [r4, #4]
}
   bd780:	b002      	add	sp, #8
   bd782:	bd10      	pop	{r4, pc}
   bd784:	000c1d96 	.word	0x000c1d96

000bd788 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bd788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd78c:	460d      	mov	r5, r1
    write('"');
   bd78e:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bd790:	4690      	mov	r8, r2
   bd792:	4604      	mov	r4, r0
    write('"');
   bd794:	f7ff feff 	bl	bd596 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bd798:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bd840 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bd79c:	44a8      	add	r8, r5
    const char *s = str;
   bd79e:	462f      	mov	r7, r5
    while (s != end) {
   bd7a0:	4547      	cmp	r7, r8
   bd7a2:	46ba      	mov	sl, r7
   bd7a4:	d03d      	beq.n	bd822 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bd7a6:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bd7aa:	2e22      	cmp	r6, #34	; 0x22
   bd7ac:	d006      	beq.n	bd7bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bd7ae:	2e5c      	cmp	r6, #92	; 0x5c
   bd7b0:	d004      	beq.n	bd7bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bd7b2:	4630      	mov	r0, r6
   bd7b4:	f002 ff16 	bl	c05e4 <isprint>
   bd7b8:	2800      	cmp	r0, #0
   bd7ba:	d1f1      	bne.n	bd7a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bd7bc:	6823      	ldr	r3, [r4, #0]
   bd7be:	ebaa 0205 	sub.w	r2, sl, r5
   bd7c2:	689b      	ldr	r3, [r3, #8]
   bd7c4:	4629      	mov	r1, r5
   bd7c6:	4620      	mov	r0, r4
   bd7c8:	4798      	blx	r3
            write('\\');
   bd7ca:	215c      	movs	r1, #92	; 0x5c
   bd7cc:	4620      	mov	r0, r4
   bd7ce:	f7ff fee2 	bl	bd596 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bd7d2:	2e0d      	cmp	r6, #13
   bd7d4:	d80a      	bhi.n	bd7ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bd7d6:	2e07      	cmp	r6, #7
   bd7d8:	d91c      	bls.n	bd814 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bd7da:	f1a6 0308 	sub.w	r3, r6, #8
   bd7de:	2b05      	cmp	r3, #5
   bd7e0:	d818      	bhi.n	bd814 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bd7e2:	e8df f003 	tbb	[pc, r3]
   bd7e6:	0f0d      	.short	0x0f0d
   bd7e8:	15131711 	.word	0x15131711
   bd7ec:	2e22      	cmp	r6, #34	; 0x22
   bd7ee:	d001      	beq.n	bd7f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bd7f0:	2e5c      	cmp	r6, #92	; 0x5c
   bd7f2:	d10f      	bne.n	bd814 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bd7f4:	4631      	mov	r1, r6
                write('b');
   bd7f6:	4620      	mov	r0, r4
   bd7f8:	f7ff fecd 	bl	bd596 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bd7fc:	463d      	mov	r5, r7
    while (s != end) {
   bd7fe:	e7cf      	b.n	bd7a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bd800:	2162      	movs	r1, #98	; 0x62
   bd802:	e7f8      	b.n	bd7f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bd804:	2174      	movs	r1, #116	; 0x74
   bd806:	e7f6      	b.n	bd7f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bd808:	216e      	movs	r1, #110	; 0x6e
   bd80a:	e7f4      	b.n	bd7f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bd80c:	2166      	movs	r1, #102	; 0x66
   bd80e:	e7f2      	b.n	bd7f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bd810:	2172      	movs	r1, #114	; 0x72
   bd812:	e7f0      	b.n	bd7f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bd814:	6823      	ldr	r3, [r4, #0]
   bd816:	4632      	mov	r2, r6
   bd818:	68db      	ldr	r3, [r3, #12]
   bd81a:	4649      	mov	r1, r9
   bd81c:	4620      	mov	r0, r4
   bd81e:	4798      	blx	r3
                break;
   bd820:	e7ec      	b.n	bd7fc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bd822:	42bd      	cmp	r5, r7
   bd824:	d005      	beq.n	bd832 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bd826:	6823      	ldr	r3, [r4, #0]
   bd828:	1b7a      	subs	r2, r7, r5
   bd82a:	689b      	ldr	r3, [r3, #8]
   bd82c:	4629      	mov	r1, r5
   bd82e:	4620      	mov	r0, r4
   bd830:	4798      	blx	r3
    }
    write('"');
   bd832:	2122      	movs	r1, #34	; 0x22
   bd834:	4620      	mov	r0, r4
   bd836:	f7ff feae 	bl	bd596 <_ZN5spark10JSONWriter5writeEc>
}
   bd83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd83e:	bf00      	nop
   bd840:	000c24a8 	.word	0x000c24a8

000bd844 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bd844:	b513      	push	{r0, r1, r4, lr}
   bd846:	4604      	mov	r4, r0
   bd848:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bd84c:	f7ff ff5e 	bl	bd70c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bd850:	4620      	mov	r0, r4
   bd852:	e9dd 2100 	ldrd	r2, r1, [sp]
   bd856:	f7ff ff97 	bl	bd788 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bd85a:	2302      	movs	r3, #2
}
   bd85c:	4620      	mov	r0, r4
    state_ = VALUE;
   bd85e:	7123      	strb	r3, [r4, #4]
}
   bd860:	b002      	add	sp, #8
   bd862:	bd10      	pop	{r4, pc}

000bd864 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bd864:	b513      	push	{r0, r1, r4, lr}
   bd866:	4604      	mov	r4, r0
   bd868:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bd86c:	f7ff ff4e 	bl	bd70c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bd870:	4620      	mov	r0, r4
   bd872:	e9dd 2100 	ldrd	r2, r1, [sp]
   bd876:	f7ff ff87 	bl	bd788 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bd87a:	2301      	movs	r3, #1
}
   bd87c:	4620      	mov	r0, r4
    state_ = NEXT;
   bd87e:	7123      	strb	r3, [r4, #4]
}
   bd880:	b002      	add	sp, #8
   bd882:	bd10      	pop	{r4, pc}

000bd884 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bd884:	6880      	ldr	r0, [r0, #8]
   bd886:	6803      	ldr	r3, [r0, #0]
   bd888:	68db      	ldr	r3, [r3, #12]
   bd88a:	4718      	bx	r3

000bd88c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bd88c:	4770      	bx	lr

000bd88e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bd88e:	4608      	mov	r0, r1
   bd890:	b111      	cbz	r1, bd898 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bd892:	680b      	ldr	r3, [r1, #0]
   bd894:	685b      	ldr	r3, [r3, #4]
   bd896:	4718      	bx	r3
}
   bd898:	4770      	bx	lr

000bd89a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bd89a:	4770      	bx	lr

000bd89c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bd89c:	4770      	bx	lr

000bd89e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bd89e:	4770      	bx	lr

000bd8a0 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bd8a0:	4770      	bx	lr

000bd8a2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bd8a2:	b538      	push	{r3, r4, r5, lr}
   bd8a4:	4604      	mov	r4, r0
   bd8a6:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bd8a8:	6800      	ldr	r0, [r0, #0]
   bd8aa:	212e      	movs	r1, #46	; 0x2e
   bd8ac:	f002 ff4b 	bl	c0746 <strchrnul>
    size = s - category;
   bd8b0:	6823      	ldr	r3, [r4, #0]
   bd8b2:	1ac3      	subs	r3, r0, r3
   bd8b4:	602b      	str	r3, [r5, #0]
    if (size) {
   bd8b6:	b123      	cbz	r3, bd8c2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bd8b8:	7803      	ldrb	r3, [r0, #0]
   bd8ba:	b103      	cbz	r3, bd8be <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bd8bc:	3001      	adds	r0, #1
   bd8be:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bd8c0:	6020      	str	r0, [r4, #0]
}
   bd8c2:	4618      	mov	r0, r3
   bd8c4:	bd38      	pop	{r3, r4, r5, pc}

000bd8c6 <_ZN5spark16JSONStreamWriterD0Ev>:
   bd8c6:	b510      	push	{r4, lr}
   bd8c8:	210c      	movs	r1, #12
   bd8ca:	4604      	mov	r4, r0
   bd8cc:	f7f6 fbe7 	bl	b409e <_ZdlPvj>
   bd8d0:	4620      	mov	r0, r4
   bd8d2:	bd10      	pop	{r4, pc}

000bd8d4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bd8d4:	b510      	push	{r4, lr}
   bd8d6:	2104      	movs	r1, #4
   bd8d8:	4604      	mov	r4, r0
   bd8da:	f7f6 fbe0 	bl	b409e <_ZdlPvj>
   bd8de:	4620      	mov	r0, r4
   bd8e0:	bd10      	pop	{r4, pc}

000bd8e2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bd8e2:	b510      	push	{r4, lr}
   bd8e4:	2104      	movs	r1, #4
   bd8e6:	4604      	mov	r4, r0
   bd8e8:	f7f6 fbd9 	bl	b409e <_ZdlPvj>
   bd8ec:	4620      	mov	r0, r4
   bd8ee:	bd10      	pop	{r4, pc}

000bd8f0 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bd8f0:	f7fe bb60 	b.w	bbfb4 <os_mutex_recursive_lock>

000bd8f4 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bd8f4:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bd8f6:	f002 ff30 	bl	c075a <strcmp>
}
   bd8fa:	fab0 f080 	clz	r0, r0
   bd8fe:	0940      	lsrs	r0, r0, #5
   bd900:	bd08      	pop	{r3, pc}

000bd902 <__tcf_1>:
   bd902:	4770      	bx	lr

000bd904 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bd904:	b510      	push	{r4, lr}
   bd906:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bd908:	f001 ff36 	bl	bf778 <_Z16_fetch_usbserialv>
   bd90c:	4284      	cmp	r4, r0
   bd90e:	d010      	beq.n	bd932 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bd910:	f002 f938 	bl	bfb84 <_Z22__fetch_global_Serial1v>
   bd914:	4284      	cmp	r4, r0
   bd916:	d105      	bne.n	bd924 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bd918:	f002 f934 	bl	bfb84 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bd91c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bd920:	f001 bec3 	b.w	bf6aa <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bd924:	b12c      	cbz	r4, bd932 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bd926:	6823      	ldr	r3, [r4, #0]
   bd928:	4620      	mov	r0, r4
   bd92a:	685b      	ldr	r3, [r3, #4]
}
   bd92c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd930:	4718      	bx	r3
   bd932:	bd10      	pop	{r4, pc}

000bd934 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bd934:	b513      	push	{r0, r1, r4, lr}
   bd936:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bd938:	4608      	mov	r0, r1
   bd93a:	9101      	str	r1, [sp, #4]
   bd93c:	f002 ff3d 	bl	c07ba <strlen>
   bd940:	9901      	ldr	r1, [sp, #4]
   bd942:	4602      	mov	r2, r0
   bd944:	4620      	mov	r0, r4
}
   bd946:	b002      	add	sp, #8
   bd948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bd94c:	f7ff bf8a 	b.w	bd864 <_ZN5spark10JSONWriter5valueEPKcj>

000bd950 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bd950:	b513      	push	{r0, r1, r4, lr}
   bd952:	4604      	mov	r4, r0
    write(str, strlen(str));
   bd954:	4608      	mov	r0, r1
   bd956:	9101      	str	r1, [sp, #4]
   bd958:	f002 ff2f 	bl	c07ba <strlen>
   bd95c:	6823      	ldr	r3, [r4, #0]
   bd95e:	9901      	ldr	r1, [sp, #4]
   bd960:	68db      	ldr	r3, [r3, #12]
   bd962:	4602      	mov	r2, r0
   bd964:	4620      	mov	r0, r4
}
   bd966:	b002      	add	sp, #8
   bd968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bd96c:	4718      	bx	r3

000bd96e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bd96e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bd970:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bd972:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bd976:	68db      	ldr	r3, [r3, #12]
   bd978:	2201      	movs	r2, #1
   bd97a:	f10d 0107 	add.w	r1, sp, #7
   bd97e:	4798      	blx	r3
}
   bd980:	b003      	add	sp, #12
   bd982:	f85d fb04 	ldr.w	pc, [sp], #4

000bd986 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bd986:	b40e      	push	{r1, r2, r3}
   bd988:	b503      	push	{r0, r1, lr}
   bd98a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bd98c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bd98e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bd992:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bd994:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bd996:	f001 f942 	bl	bec1e <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bd99a:	b002      	add	sp, #8
   bd99c:	f85d eb04 	ldr.w	lr, [sp], #4
   bd9a0:	b003      	add	sp, #12
   bd9a2:	4770      	bx	lr

000bd9a4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bd9a4:	680a      	ldr	r2, [r1, #0]
   bd9a6:	6002      	str	r2, [r0, #0]
   bd9a8:	684a      	ldr	r2, [r1, #4]
   bd9aa:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bd9ac:	2200      	movs	r2, #0
   bd9ae:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bd9b2:	b510      	push	{r4, lr}
   bd9b4:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bd9b6:	688c      	ldr	r4, [r1, #8]
   bd9b8:	6084      	str	r4, [r0, #8]
   bd9ba:	68cc      	ldr	r4, [r1, #12]
   bd9bc:	60c4      	str	r4, [r0, #12]
   bd9be:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bd9c0:	608a      	str	r2, [r1, #8]
   bd9c2:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bd9c4:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bd9c6:	610a      	str	r2, [r1, #16]
   bd9c8:	bd10      	pop	{r4, pc}
	...

000bd9cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bd9cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bd9d0:	e9d0 8400 	ldrd	r8, r4, [r0]
   bd9d4:	f04f 0a14 	mov.w	sl, #20
   bd9d8:	9300      	str	r3, [sp, #0]
   bd9da:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bd9de:	4b18      	ldr	r3, [pc, #96]	; (bda40 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bd9e0:	10a4      	asrs	r4, r4, #2
   bd9e2:	4617      	mov	r7, r2
   bd9e4:	435c      	muls	r4, r3
   bd9e6:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bd9e8:	2c00      	cmp	r4, #0
   bd9ea:	dd21      	ble.n	bda30 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bd9ec:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bd9ee:	fb0a f006 	mul.w	r0, sl, r6
   bd9f2:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bd9f6:	463a      	mov	r2, r7
   bd9f8:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bd9fc:	5828      	ldr	r0, [r5, r0]
   bd9fe:	9101      	str	r1, [sp, #4]
   bda00:	455f      	cmp	r7, fp
   bda02:	bf28      	it	cs
   bda04:	465a      	movcs	r2, fp
   bda06:	f002 fee0 	bl	c07ca <strncmp>
                if (cmp == 0) {
   bda0a:	2800      	cmp	r0, #0
   bda0c:	9901      	ldr	r1, [sp, #4]
   bda0e:	f04f 0301 	mov.w	r3, #1
   bda12:	d10b      	bne.n	bda2c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bda14:	455f      	cmp	r7, fp
   bda16:	d103      	bne.n	bda20 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bda18:	9a00      	ldr	r2, [sp, #0]
   bda1a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bda1c:	4634      	mov	r4, r6
   bda1e:	e7e3      	b.n	bd9e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bda20:	d9fc      	bls.n	bda1c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bda22:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bda24:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bda28:	3e01      	subs	r6, #1
   bda2a:	e7f7      	b.n	bda1c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bda2c:	dbf9      	blt.n	bda22 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bda2e:	e7f5      	b.n	bda1c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bda30:	eba5 0508 	sub.w	r5, r5, r8
}
   bda34:	4802      	ldr	r0, [pc, #8]	; (bda40 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bda36:	10ad      	asrs	r5, r5, #2
   bda38:	4368      	muls	r0, r5
   bda3a:	b003      	add	sp, #12
   bda3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bda40:	cccccccd 	.word	0xcccccccd

000bda44 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bda44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bda46:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bda48:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bda4a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bda4c:	b303      	cbz	r3, bda90 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bda4e:	b1f9      	cbz	r1, bda90 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bda50:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bda52:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bda56:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bda58:	a903      	add	r1, sp, #12
   bda5a:	a801      	add	r0, sp, #4
   bda5c:	f7ff ff21 	bl	bd8a2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bda60:	4601      	mov	r1, r0
   bda62:	b1a8      	cbz	r0, bda90 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bda64:	f10d 030b 	add.w	r3, sp, #11
   bda68:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bda6a:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bda6e:	4620      	mov	r0, r4
   bda70:	f7ff ffac 	bl	bd9cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bda74:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bda78:	b153      	cbz	r3, bda90 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bda7a:	6823      	ldr	r3, [r4, #0]
   bda7c:	2414      	movs	r4, #20
   bda7e:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bda82:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bda84:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bda88:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bda8a:	bfa8      	it	ge
   bda8c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bda8e:	e7e3      	b.n	bda58 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bda90:	4628      	mov	r0, r5
   bda92:	b004      	add	sp, #16
   bda94:	bd70      	pop	{r4, r5, r6, pc}
	...

000bda98 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bda98:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bda9a:	4c09      	ldr	r4, [pc, #36]	; (bdac0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bda9c:	7823      	ldrb	r3, [r4, #0]
   bda9e:	f3bf 8f5b 	dmb	ish
   bdaa2:	07db      	lsls	r3, r3, #31
   bdaa4:	d409      	bmi.n	bdaba <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bdaa6:	4620      	mov	r0, r4
   bdaa8:	f7f6 fb08 	bl	b40bc <__cxa_guard_acquire>
   bdaac:	b128      	cbz	r0, bdaba <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bdaae:	4620      	mov	r0, r4
   bdab0:	f7f6 fb09 	bl	b40c6 <__cxa_guard_release>
   bdab4:	4803      	ldr	r0, [pc, #12]	; (bdac4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bdab6:	f002 fd71 	bl	c059c <atexit>
}
   bdaba:	4803      	ldr	r0, [pc, #12]	; (bdac8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bdabc:	bd10      	pop	{r4, pc}
   bdabe:	bf00      	nop
   bdac0:	2003e64c 	.word	0x2003e64c
   bdac4:	000bd89b 	.word	0x000bd89b
   bdac8:	2003d760 	.word	0x2003d760

000bdacc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bdacc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bdace:	4c09      	ldr	r4, [pc, #36]	; (bdaf4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bdad0:	7823      	ldrb	r3, [r4, #0]
   bdad2:	f3bf 8f5b 	dmb	ish
   bdad6:	07db      	lsls	r3, r3, #31
   bdad8:	d409      	bmi.n	bdaee <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bdada:	4620      	mov	r0, r4
   bdadc:	f7f6 faee 	bl	b40bc <__cxa_guard_acquire>
   bdae0:	b128      	cbz	r0, bdaee <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bdae2:	4620      	mov	r0, r4
   bdae4:	f7f6 faef 	bl	b40c6 <__cxa_guard_release>
   bdae8:	4803      	ldr	r0, [pc, #12]	; (bdaf8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bdaea:	f002 fd57 	bl	c059c <atexit>
    return &factory;
}
   bdaee:	4803      	ldr	r0, [pc, #12]	; (bdafc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bdaf0:	bd10      	pop	{r4, pc}
   bdaf2:	bf00      	nop
   bdaf4:	2003e650 	.word	0x2003e650
   bdaf8:	000bd903 	.word	0x000bd903
   bdafc:	2003d764 	.word	0x2003d764

000bdb00 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bdb00:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bdb02:	2500      	movs	r5, #0
   bdb04:	4604      	mov	r4, r0
   bdb06:	e9c0 5500 	strd	r5, r5, [r0]
   bdb0a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bdb0e:	6085      	str	r5, [r0, #8]
   bdb10:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bdb12:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bdb16:	f7fe fa3d 	bl	bbf94 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bdb1a:	f7ff ffbd 	bl	bda98 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bdb1e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bdb20:	f7ff ffd4 	bl	bdacc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bdb24:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bdb26:	6220      	str	r0, [r4, #32]
}
   bdb28:	4620      	mov	r0, r4
   bdb2a:	bd38      	pop	{r3, r4, r5, pc}

000bdb2c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bdb2c:	b510      	push	{r4, lr}
    static LogManager mgr;
   bdb2e:	4c0a      	ldr	r4, [pc, #40]	; (bdb58 <_ZN5spark10LogManager8instanceEv+0x2c>)
   bdb30:	7823      	ldrb	r3, [r4, #0]
   bdb32:	f3bf 8f5b 	dmb	ish
   bdb36:	07db      	lsls	r3, r3, #31
   bdb38:	d40c      	bmi.n	bdb54 <_ZN5spark10LogManager8instanceEv+0x28>
   bdb3a:	4620      	mov	r0, r4
   bdb3c:	f7f6 fabe 	bl	b40bc <__cxa_guard_acquire>
   bdb40:	b140      	cbz	r0, bdb54 <_ZN5spark10LogManager8instanceEv+0x28>
   bdb42:	4806      	ldr	r0, [pc, #24]	; (bdb5c <_ZN5spark10LogManager8instanceEv+0x30>)
   bdb44:	f7ff ffdc 	bl	bdb00 <_ZN5spark10LogManagerC1Ev>
   bdb48:	4620      	mov	r0, r4
   bdb4a:	f7f6 fabc 	bl	b40c6 <__cxa_guard_release>
   bdb4e:	4804      	ldr	r0, [pc, #16]	; (bdb60 <_ZN5spark10LogManager8instanceEv+0x34>)
   bdb50:	f002 fd24 	bl	c059c <atexit>
    return &mgr;
}
   bdb54:	4801      	ldr	r0, [pc, #4]	; (bdb5c <_ZN5spark10LogManager8instanceEv+0x30>)
   bdb56:	bd10      	pop	{r4, pc}
   bdb58:	2003e648 	.word	0x2003e648
   bdb5c:	2003e658 	.word	0x2003e658
   bdb60:	000be019 	.word	0x000be019

000bdb64 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bdb64:	4a02      	ldr	r2, [pc, #8]	; (bdb70 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bdb66:	4903      	ldr	r1, [pc, #12]	; (bdb74 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bdb68:	4803      	ldr	r0, [pc, #12]	; (bdb78 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bdb6a:	2300      	movs	r3, #0
   bdb6c:	f7fe bcaa 	b.w	bc4c4 <log_set_callbacks>
   bdb70:	000bddfd 	.word	0x000bddfd
   bdb74:	000bdd89 	.word	0x000bdd89
   bdb78:	000bdd09 	.word	0x000bdd09

000bdb7c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bdb7c:	2300      	movs	r3, #0
   bdb7e:	461a      	mov	r2, r3
   bdb80:	4619      	mov	r1, r3
   bdb82:	4618      	mov	r0, r3
   bdb84:	f7fe bc9e 	b.w	bc4c4 <log_set_callbacks>

000bdb88 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bdb88:	b570      	push	{r4, r5, r6, lr}
   bdb8a:	b08a      	sub	sp, #40	; 0x28
   bdb8c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bdb8e:	4601      	mov	r1, r0
   bdb90:	a804      	add	r0, sp, #16
   bdb92:	f7fb fbec 	bl	b936e <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bdb96:	4e14      	ldr	r6, [pc, #80]	; (bdbe8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bdb98:	a804      	add	r0, sp, #16
   bdb9a:	f7ff fd9b 	bl	bd6d4 <_ZN5spark18JSONObjectIterator4nextEv>
   bdb9e:	b1e8      	cbz	r0, bdbdc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bdba0:	a904      	add	r1, sp, #16
   bdba2:	4668      	mov	r0, sp
   bdba4:	f7fb fbf4 	bl	b9390 <_ZNK5spark18JSONObjectIterator4nameEv>
   bdba8:	9802      	ldr	r0, [sp, #8]
   bdbaa:	4631      	mov	r1, r6
   bdbac:	f7ff fea2 	bl	bd8f4 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bdbb0:	4604      	mov	r4, r0
   bdbb2:	b110      	cbz	r0, bdbba <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bdbb4:	1e2c      	subs	r4, r5, #0
   bdbb6:	bf18      	it	ne
   bdbb8:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   bdbba:	a801      	add	r0, sp, #4
   bdbbc:	f7f9 ffdd 	bl	b7b7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bdbc0:	2c00      	cmp	r4, #0
   bdbc2:	d0e9      	beq.n	bdb98 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bdbc4:	a904      	add	r1, sp, #16
   bdbc6:	4668      	mov	r0, sp
   bdbc8:	f7fb fbf3 	bl	b93b2 <_ZNK5spark18JSONObjectIterator5valueEv>
   bdbcc:	4668      	mov	r0, sp
   bdbce:	f7ff fd24 	bl	bd61a <_ZNK5spark9JSONValue5toIntEv>
   bdbd2:	6028      	str	r0, [r5, #0]
   bdbd4:	a801      	add	r0, sp, #4
   bdbd6:	f7f9 ffd0 	bl	b7b7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bdbda:	e7dd      	b.n	bdb98 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bdbdc:	a805      	add	r0, sp, #20
   bdbde:	f7f9 ffcc 	bl	b7b7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bdbe2:	b00a      	add	sp, #40	; 0x28
   bdbe4:	bd70      	pop	{r4, r5, r6, pc}
   bdbe6:	bf00      	nop
   bdbe8:	000c24ae 	.word	0x000c24ae

000bdbec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bdbec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bdbee:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bdbf0:	4620      	mov	r0, r4
   bdbf2:	4913      	ldr	r1, [pc, #76]	; (bdc40 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bdbf4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bdbf6:	f002 fdb0 	bl	c075a <strcmp>
   bdbfa:	b950      	cbnz	r0, bdc12 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bdbfc:	f001 fdbc 	bl	bf778 <_Z16_fetch_usbserialv>
   bdc00:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bdc04:	f001 fda6 	bl	bf754 <_ZN9USBSerial5beginEl>
}
   bdc08:	b003      	add	sp, #12
   bdc0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bdc0e:	f001 bdb3 	b.w	bf778 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bdc12:	490c      	ldr	r1, [pc, #48]	; (bdc44 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bdc14:	4620      	mov	r0, r4
   bdc16:	f002 fda0 	bl	c075a <strcmp>
   bdc1a:	b978      	cbnz	r0, bdc3c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bdc1c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bdc20:	a901      	add	r1, sp, #4
   bdc22:	4628      	mov	r0, r5
        int baud = 9600;
   bdc24:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bdc26:	f7ff ffaf 	bl	bdb88 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bdc2a:	f001 ffab 	bl	bfb84 <_Z22__fetch_global_Serial1v>
   bdc2e:	9901      	ldr	r1, [sp, #4]
   bdc30:	f001 fd38 	bl	bf6a4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bdc34:	f001 ffa6 	bl	bfb84 <_Z22__fetch_global_Serial1v>
}
   bdc38:	b003      	add	sp, #12
   bdc3a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bdc3c:	2000      	movs	r0, #0
   bdc3e:	e7fb      	b.n	bdc38 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bdc40:	000c24b3 	.word	0x000c24b3
   bdc44:	000c24ba 	.word	0x000c24ba

000bdc48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bdc48:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bdc4a:	e9d0 5300 	ldrd	r5, r3, [r0]
   bdc4e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bdc50:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bdc52:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bdc56:	42ae      	cmp	r6, r5
   bdc58:	d005      	beq.n	bdc66 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bdc5a:	f105 0008 	add.w	r0, r5, #8
   bdc5e:	f7ff fff3 	bl	bdc48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bdc62:	3514      	adds	r5, #20
   bdc64:	e7f7      	b.n	bdc56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bdc66:	6820      	ldr	r0, [r4, #0]
   bdc68:	f7fe fd80 	bl	bc76c <free>
}
   bdc6c:	4620      	mov	r0, r4
   bdc6e:	bd70      	pop	{r4, r5, r6, pc}

000bdc70 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bdc70:	b510      	push	{r4, lr}
   bdc72:	4604      	mov	r4, r0
   bdc74:	300c      	adds	r0, #12
   bdc76:	f7ff ffe7 	bl	bdc48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bdc7a:	4620      	mov	r0, r4
   bdc7c:	f7fe fe19 	bl	bc8b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bdc80:	4620      	mov	r0, r4
   bdc82:	bd10      	pop	{r4, pc}

000bdc84 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bdc84:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bdc86:	4b04      	ldr	r3, [pc, #16]	; (bdc98 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bdc88:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bdc8a:	f840 3b04 	str.w	r3, [r0], #4
   bdc8e:	f7ff ffef 	bl	bdc70 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bdc92:	4620      	mov	r0, r4
   bdc94:	bd10      	pop	{r4, pc}
   bdc96:	bf00      	nop
   bdc98:	000c1850 	.word	0x000c1850

000bdc9c <_ZN5spark16StreamLogHandlerD0Ev>:
   bdc9c:	b510      	push	{r4, lr}
   bdc9e:	4604      	mov	r4, r0
   bdca0:	f7ff fff0 	bl	bdc84 <_ZN5spark16StreamLogHandlerD1Ev>
   bdca4:	4620      	mov	r0, r4
   bdca6:	2124      	movs	r1, #36	; 0x24
   bdca8:	f7f6 f9f9 	bl	b409e <_ZdlPvj>
   bdcac:	4620      	mov	r0, r4
   bdcae:	bd10      	pop	{r4, pc}

000bdcb0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bdcb0:	b510      	push	{r4, lr}
   bdcb2:	4b03      	ldr	r3, [pc, #12]	; (bdcc0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bdcb4:	6003      	str	r3, [r0, #0]
   bdcb6:	4604      	mov	r4, r0
   bdcb8:	f7ff ffe4 	bl	bdc84 <_ZN5spark16StreamLogHandlerD1Ev>
   bdcbc:	4620      	mov	r0, r4
   bdcbe:	bd10      	pop	{r4, pc}
   bdcc0:	000c2554 	.word	0x000c2554

000bdcc4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bdcc4:	b510      	push	{r4, lr}
   bdcc6:	4604      	mov	r4, r0
   bdcc8:	f7ff fff2 	bl	bdcb0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bdccc:	4620      	mov	r0, r4
   bdcce:	2124      	movs	r1, #36	; 0x24
   bdcd0:	f7f6 f9e5 	bl	b409e <_ZdlPvj>
   bdcd4:	4620      	mov	r0, r4
   bdcd6:	bd10      	pop	{r4, pc}

000bdcd8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bdcd8:	2200      	movs	r2, #0
   bdcda:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bdcde:	b510      	push	{r4, lr}
        capacity_(0) {
   bdce0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bdce2:	680c      	ldr	r4, [r1, #0]
   bdce4:	6004      	str	r4, [r0, #0]
   bdce6:	684c      	ldr	r4, [r1, #4]
   bdce8:	6044      	str	r4, [r0, #4]
   bdcea:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bdcec:	600a      	str	r2, [r1, #0]
   bdcee:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bdcf0:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bdcf2:	608a      	str	r2, [r1, #8]
}
   bdcf4:	bd10      	pop	{r4, pc}

000bdcf6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   bdcf6:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bdcf8:	6803      	ldr	r3, [r0, #0]
   bdcfa:	4604      	mov	r4, r0
   bdcfc:	6818      	ldr	r0, [r3, #0]
   bdcfe:	f7fe f961 	bl	bbfc4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bdd02:	4620      	mov	r0, r4
   bdd04:	bd10      	pop	{r4, pc}
	...

000bdd08 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bdd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdd0c:	b087      	sub	sp, #28
   bdd0e:	4680      	mov	r8, r0
   bdd10:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bdd12:	4b1c      	ldr	r3, [pc, #112]	; (bdd84 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bdd14:	685b      	ldr	r3, [r3, #4]
   bdd16:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bdd1a:	4689      	mov	r9, r1
   bdd1c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bdd1e:	b96b      	cbnz	r3, bdd3c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bdd20:	f7ff ff04 	bl	bdb2c <_ZN5spark10LogManager8instanceEv>
   bdd24:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bdd26:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bdd2a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bdd2c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bdd2e:	f7ff fddf 	bl	bd8f0 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bdd32:	7b23      	ldrb	r3, [r4, #12]
   bdd34:	b12b      	cbz	r3, bdd42 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bdd36:	a805      	add	r0, sp, #20
   bdd38:	f7ff ffdd 	bl	bdcf6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bdd3c:	b007      	add	sp, #28
   bdd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bdd42:	2301      	movs	r3, #1
   bdd44:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bdd46:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bdd4a:	fa5f f989 	uxtb.w	r9, r9
   bdd4e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bdd52:	45aa      	cmp	sl, r5
   bdd54:	d012      	beq.n	bdd7c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bdd56:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bdd5a:	4631      	mov	r1, r6
   bdd5c:	1d38      	adds	r0, r7, #4
   bdd5e:	f7ff fe71 	bl	bda44 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bdd62:	4581      	cmp	r9, r0
   bdd64:	d3f5      	bcc.n	bdd52 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bdd66:	683b      	ldr	r3, [r7, #0]
   bdd68:	9a03      	ldr	r2, [sp, #12]
   bdd6a:	9200      	str	r2, [sp, #0]
   bdd6c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bdd70:	464a      	mov	r2, r9
   bdd72:	4633      	mov	r3, r6
   bdd74:	4641      	mov	r1, r8
   bdd76:	4638      	mov	r0, r7
   bdd78:	47d8      	blx	fp
   bdd7a:	e7ea      	b.n	bdd52 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bdd7c:	2300      	movs	r3, #0
   bdd7e:	7323      	strb	r3, [r4, #12]
   bdd80:	e7d9      	b.n	bdd36 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bdd82:	bf00      	nop
   bdd84:	e000ed00 	.word	0xe000ed00

000bdd88 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bdd88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdd8c:	469b      	mov	fp, r3
   bdd8e:	4b1a      	ldr	r3, [pc, #104]	; (bddf8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bdd90:	685b      	ldr	r3, [r3, #4]
   bdd92:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bdd96:	4680      	mov	r8, r0
   bdd98:	4689      	mov	r9, r1
   bdd9a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bdd9c:	b96b      	cbnz	r3, bddba <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bdd9e:	f7ff fec5 	bl	bdb2c <_ZN5spark10LogManager8instanceEv>
   bdda2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bdda4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bdda8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bddaa:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bddac:	f7ff fda0 	bl	bd8f0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bddb0:	7b23      	ldrb	r3, [r4, #12]
   bddb2:	b12b      	cbz	r3, bddc0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bddb4:	a801      	add	r0, sp, #4
   bddb6:	f7ff ff9e 	bl	bdcf6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bddba:	b003      	add	sp, #12
   bddbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bddc0:	2301      	movs	r3, #1
   bddc2:	7323      	strb	r3, [r4, #12]
   bddc4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bddc8:	b2f6      	uxtb	r6, r6
   bddca:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bddce:	4555      	cmp	r5, sl
   bddd0:	d00e      	beq.n	bddf0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bddd2:	f855 7b04 	ldr.w	r7, [r5], #4
   bddd6:	4659      	mov	r1, fp
   bddd8:	1d38      	adds	r0, r7, #4
   bddda:	f7ff fe33 	bl	bda44 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bddde:	4286      	cmp	r6, r0
   bdde0:	d3f5      	bcc.n	bddce <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bdde2:	683b      	ldr	r3, [r7, #0]
   bdde4:	464a      	mov	r2, r9
   bdde6:	68db      	ldr	r3, [r3, #12]
   bdde8:	4641      	mov	r1, r8
   bddea:	4638      	mov	r0, r7
   bddec:	4798      	blx	r3
   bddee:	e7ee      	b.n	bddce <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bddf0:	2300      	movs	r3, #0
   bddf2:	7323      	strb	r3, [r4, #12]
   bddf4:	e7de      	b.n	bddb4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bddf6:	bf00      	nop
   bddf8:	e000ed00 	.word	0xe000ed00

000bddfc <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bddfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bde00:	4b16      	ldr	r3, [pc, #88]	; (bde5c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bde02:	685b      	ldr	r3, [r3, #4]
   bde04:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bde08:	4605      	mov	r5, r0
   bde0a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bde0c:	bb1b      	cbnz	r3, bde56 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bde0e:	f7ff fe8d 	bl	bdb2c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bde12:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bde16:	4604      	mov	r4, r0
   bde18:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bde1a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bde1c:	f7ff fd68 	bl	bd8f0 <_ZN14RecursiveMutex4lockEv.isra.0>
   bde20:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bde24:	2446      	movs	r4, #70	; 0x46
   bde26:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bde2a:	45b0      	cmp	r8, r6
   bde2c:	d109      	bne.n	bde42 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bde2e:	a801      	add	r0, sp, #4
   bde30:	f7ff ff61 	bl	bdcf6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bde34:	42a5      	cmp	r5, r4
   bde36:	bfb4      	ite	lt
   bde38:	2000      	movlt	r0, #0
   bde3a:	2001      	movge	r0, #1
}
   bde3c:	b002      	add	sp, #8
   bde3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bde42:	f856 0b04 	ldr.w	r0, [r6], #4
   bde46:	4639      	mov	r1, r7
   bde48:	3004      	adds	r0, #4
   bde4a:	f7ff fdfb 	bl	bda44 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bde4e:	4284      	cmp	r4, r0
   bde50:	bfa8      	it	ge
   bde52:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bde54:	e7e9      	b.n	bde2a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bde56:	2000      	movs	r0, #0
   bde58:	e7f0      	b.n	bde3c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bde5a:	bf00      	nop
   bde5c:	e000ed00 	.word	0xe000ed00

000bde60 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bde60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bde62:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bde66:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bde68:	4604      	mov	r4, r0
   bde6a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bde6c:	db0d      	blt.n	bde8a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bde6e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bde70:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bde72:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bde74:	dd04      	ble.n	bde80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bde76:	00b9      	lsls	r1, r7, #2
   bde78:	f7fe fc80 	bl	bc77c <realloc>
            if (!d) {
   bde7c:	b918      	cbnz	r0, bde86 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bde7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bde80:	f7fe fc74 	bl	bc76c <free>
        T* d = nullptr;
   bde84:	2000      	movs	r0, #0
        data_ = d;
   bde86:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bde88:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bde8a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bde8c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bde8e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bde92:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bde94:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bde98:	1d08      	adds	r0, r1, #4
   bde9a:	f002 fbb9 	bl	c0610 <memmove>
    new(p) T(std::move(value));
   bde9e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bdea2:	6863      	ldr	r3, [r4, #4]
   bdea4:	3301      	adds	r3, #1
   bdea6:	6063      	str	r3, [r4, #4]
    return true;
   bdea8:	2001      	movs	r0, #1
   bdeaa:	e7e8      	b.n	bde7e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bdeac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bdeac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bdeae:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bdeb2:	4604      	mov	r4, r0
   bdeb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bdeb6:	9301      	str	r3, [sp, #4]
   bdeb8:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bdeba:	f7ff fd19 	bl	bd8f0 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bdebe:	e9d4 3200 	ldrd	r3, r2, [r4]
   bdec2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bdec6:	4293      	cmp	r3, r2
   bdec8:	4619      	mov	r1, r3
   bdeca:	d00b      	beq.n	bdee4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bdecc:	6809      	ldr	r1, [r1, #0]
   bdece:	42a9      	cmp	r1, r5
   bded0:	f103 0304 	add.w	r3, r3, #4
   bded4:	d1f7      	bne.n	bdec6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bded6:	a801      	add	r0, sp, #4
   bded8:	f7ff ff0d 	bl	bdcf6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bdedc:	2500      	movs	r5, #0
}
   bdede:	4628      	mov	r0, r5
   bdee0:	b003      	add	sp, #12
   bdee2:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bdee4:	4629      	mov	r1, r5
   bdee6:	4620      	mov	r0, r4
   bdee8:	f7ff ffba 	bl	bde60 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bdeec:	4605      	mov	r5, r0
   bdeee:	2800      	cmp	r0, #0
   bdef0:	d0f1      	beq.n	bded6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bdef2:	6863      	ldr	r3, [r4, #4]
   bdef4:	2b01      	cmp	r3, #1
   bdef6:	d101      	bne.n	bdefc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bdef8:	f7ff fe34 	bl	bdb64 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bdefc:	a801      	add	r0, sp, #4
   bdefe:	f7ff fefa 	bl	bdcf6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bdf02:	e7ec      	b.n	bdede <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bdf04 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bdf04:	b570      	push	{r4, r5, r6, lr}
   bdf06:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bdf08:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bdf0c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bdf0e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bdf12:	4282      	cmp	r2, r0
   bdf14:	d00f      	beq.n	bdf36 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bdf16:	4601      	mov	r1, r0
            if (*p == value) {
   bdf18:	681d      	ldr	r5, [r3, #0]
   bdf1a:	f851 6b04 	ldr.w	r6, [r1], #4
   bdf1e:	42ae      	cmp	r6, r5
   bdf20:	d107      	bne.n	bdf32 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bdf22:	1a52      	subs	r2, r2, r1
   bdf24:	f002 fb74 	bl	c0610 <memmove>
    --size_;
   bdf28:	6863      	ldr	r3, [r4, #4]
   bdf2a:	3b01      	subs	r3, #1
   bdf2c:	6063      	str	r3, [r4, #4]
    return true;
   bdf2e:	2001      	movs	r0, #1
}
   bdf30:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bdf32:	4608      	mov	r0, r1
   bdf34:	e7ed      	b.n	bdf12 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bdf36:	2000      	movs	r0, #0
   bdf38:	e7fa      	b.n	bdf30 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bdf3a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bdf3a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bdf3c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bdf40:	4604      	mov	r4, r0
   bdf42:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bdf44:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bdf46:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bdf48:	f7ff fcd2 	bl	bd8f0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bdf4c:	a901      	add	r1, sp, #4
   bdf4e:	4620      	mov	r0, r4
   bdf50:	f7ff ffd8 	bl	bdf04 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bdf54:	b118      	cbz	r0, bdf5e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bdf56:	6863      	ldr	r3, [r4, #4]
   bdf58:	b90b      	cbnz	r3, bdf5e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bdf5a:	f7ff fe0f 	bl	bdb7c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bdf5e:	a803      	add	r0, sp, #12
   bdf60:	f7ff fec9 	bl	bdcf6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bdf64:	b004      	add	sp, #16
   bdf66:	bd10      	pop	{r4, pc}

000bdf68 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bdf68:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bdf6a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bdf6e:	2318      	movs	r3, #24
   bdf70:	4604      	mov	r4, r0
   bdf72:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bdf76:	42ae      	cmp	r6, r5
   bdf78:	d015      	beq.n	bdfa6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bdf7a:	f105 0110 	add.w	r1, r5, #16
   bdf7e:	4620      	mov	r0, r4
   bdf80:	f7ff ffc0 	bl	bdf04 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bdf84:	6863      	ldr	r3, [r4, #4]
   bdf86:	b90b      	cbnz	r3, bdf8c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bdf88:	f7ff fdf8 	bl	bdb7c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bdf8c:	69e0      	ldr	r0, [r4, #28]
   bdf8e:	6929      	ldr	r1, [r5, #16]
   bdf90:	6803      	ldr	r3, [r0, #0]
   bdf92:	68db      	ldr	r3, [r3, #12]
   bdf94:	4798      	blx	r3
        if (h.stream) {
   bdf96:	6969      	ldr	r1, [r5, #20]
   bdf98:	b119      	cbz	r1, bdfa2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bdf9a:	6a20      	ldr	r0, [r4, #32]
   bdf9c:	6803      	ldr	r3, [r0, #0]
   bdf9e:	68db      	ldr	r3, [r3, #12]
   bdfa0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bdfa2:	3518      	adds	r5, #24
   bdfa4:	e7e7      	b.n	bdf76 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bdfa6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bdfaa:	2618      	movs	r6, #24
   bdfac:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bdfb0:	42ae      	cmp	r6, r5
   bdfb2:	d004      	beq.n	bdfbe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bdfb4:	4628      	mov	r0, r5
   bdfb6:	f000 ff45 	bl	bee44 <_ZN6StringD1Ev>
   bdfba:	3518      	adds	r5, #24
   bdfbc:	e7f8      	b.n	bdfb0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bdfbe:	2300      	movs	r3, #0
   bdfc0:	6163      	str	r3, [r4, #20]
}
   bdfc2:	bd70      	pop	{r4, r5, r6, pc}

000bdfc4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bdfc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bdfc6:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bdfc8:	f7ff fdd8 	bl	bdb7c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bdfcc:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bdfd0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bdfd2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bdfd4:	f7ff fc8c 	bl	bd8f0 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bdfd8:	4620      	mov	r0, r4
   bdfda:	f7ff ffc5 	bl	bdf68 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bdfde:	a801      	add	r0, sp, #4
   bdfe0:	f7ff fe89 	bl	bdcf6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bdfe4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bdfe6:	b108      	cbz	r0, bdfec <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bdfe8:	f7fd ffdc 	bl	bbfa4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bdfec:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bdff0:	2618      	movs	r6, #24
   bdff2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bdff6:	42ae      	cmp	r6, r5
   bdff8:	d004      	beq.n	be004 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bdffa:	4628      	mov	r0, r5
   bdffc:	f000 ff22 	bl	bee44 <_ZN6StringD1Ev>
   be000:	3518      	adds	r5, #24
   be002:	e7f8      	b.n	bdff6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   be004:	6920      	ldr	r0, [r4, #16]
   be006:	f7fe fbb1 	bl	bc76c <free>
   be00a:	6820      	ldr	r0, [r4, #0]
   be00c:	f7fe fbae 	bl	bc76c <free>
}
   be010:	4620      	mov	r0, r4
   be012:	b002      	add	sp, #8
   be014:	bd70      	pop	{r4, r5, r6, pc}
	...

000be018 <__tcf_2>:
    static LogManager mgr;
   be018:	4801      	ldr	r0, [pc, #4]	; (be020 <__tcf_2+0x8>)
   be01a:	f7ff bfd3 	b.w	bdfc4 <_ZN5spark10LogManagerD1Ev>
   be01e:	bf00      	nop
   be020:	2003e658 	.word	0x2003e658

000be024 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   be024:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be028:	4604      	mov	r4, r0
   be02a:	460d      	mov	r5, r1
   be02c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be02e:	d915      	bls.n	be05c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   be030:	4290      	cmp	r0, r2
   be032:	d214      	bcs.n	be05e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   be034:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   be038:	1a75      	subs	r5, r6, r1
   be03a:	f1a1 0714 	sub.w	r7, r1, #20
   be03e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be040:	42b7      	cmp	r7, r6
   be042:	d01a      	beq.n	be07a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   be044:	b11c      	cbz	r4, be04e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   be046:	4631      	mov	r1, r6
   be048:	4620      	mov	r0, r4
   be04a:	f7ff fcab 	bl	bd9a4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   be04e:	f106 0008 	add.w	r0, r6, #8
   be052:	f7ff fdf9 	bl	bdc48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   be056:	3e14      	subs	r6, #20
   be058:	3c14      	subs	r4, #20
   be05a:	e7f1      	b.n	be040 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   be05c:	d00d      	beq.n	be07a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   be05e:	42b5      	cmp	r5, r6
   be060:	d00b      	beq.n	be07a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   be062:	b11c      	cbz	r4, be06c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   be064:	4629      	mov	r1, r5
   be066:	4620      	mov	r0, r4
   be068:	f7ff fc9c 	bl	bd9a4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   be06c:	f105 0008 	add.w	r0, r5, #8
   be070:	f7ff fdea 	bl	bdc48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   be074:	3514      	adds	r5, #20
   be076:	3414      	adds	r4, #20
   be078:	e7f1      	b.n	be05e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   be07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be07c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   be07c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be07e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be080:	4604      	mov	r4, r0
   be082:	460d      	mov	r5, r1
   be084:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be086:	d914      	bls.n	be0b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   be088:	4290      	cmp	r0, r2
   be08a:	d213      	bcs.n	be0b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   be08c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   be090:	1a75      	subs	r5, r6, r1
   be092:	f1a1 0710 	sub.w	r7, r1, #16
   be096:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be098:	42b7      	cmp	r7, r6
   be09a:	d018      	beq.n	be0ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   be09c:	b11c      	cbz	r4, be0a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   be09e:	4631      	mov	r1, r6
   be0a0:	4620      	mov	r0, r4
   be0a2:	f000 ff4b 	bl	bef3c <_ZN6StringC1EOS_>
                end->~T();
   be0a6:	4630      	mov	r0, r6
   be0a8:	f000 fecc 	bl	bee44 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   be0ac:	3e10      	subs	r6, #16
   be0ae:	3c10      	subs	r4, #16
   be0b0:	e7f2      	b.n	be098 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   be0b2:	d00c      	beq.n	be0ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   be0b4:	42b5      	cmp	r5, r6
   be0b6:	d00a      	beq.n	be0ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   be0b8:	b11c      	cbz	r4, be0c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   be0ba:	4629      	mov	r1, r5
   be0bc:	4620      	mov	r0, r4
   be0be:	f000 ff3d 	bl	bef3c <_ZN6StringC1EOS_>
                p->~T();
   be0c2:	4628      	mov	r0, r5
   be0c4:	f000 febe 	bl	bee44 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   be0c8:	3510      	adds	r5, #16
   be0ca:	3410      	adds	r4, #16
   be0cc:	e7f2      	b.n	be0b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   be0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be0d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   be0d0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   be0d2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   be0d4:	4605      	mov	r5, r0
        if (n > 0) {
   be0d6:	dd11      	ble.n	be0fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   be0d8:	0130      	lsls	r0, r6, #4
   be0da:	f7fe fb3f 	bl	bc75c <malloc>
            if (!d) {
   be0de:	4604      	mov	r4, r0
   be0e0:	b158      	cbz	r0, be0fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   be0e2:	e9d5 1200 	ldrd	r1, r2, [r5]
   be0e6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   be0ea:	f7ff ffc7 	bl	be07c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   be0ee:	6828      	ldr	r0, [r5, #0]
   be0f0:	f7fe fb3c 	bl	bc76c <free>
        data_ = d;
   be0f4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   be0f6:	60ae      	str	r6, [r5, #8]
        return true;
   be0f8:	2001      	movs	r0, #1
    }
   be0fa:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   be0fc:	2400      	movs	r4, #0
   be0fe:	e7f6      	b.n	be0ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000be100 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   be100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be104:	4690      	mov	r8, r2
   be106:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   be108:	2300      	movs	r3, #0
   be10a:	9103      	str	r1, [sp, #12]
    return size_;
   be10c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   be110:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   be112:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   be114:	4299      	cmp	r1, r3
        capacity_(0) {
   be116:	e9c0 3300 	strd	r3, r3, [r0]
   be11a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   be11e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   be122:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   be126:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   be128:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   be12a:	dc23      	bgt.n	be174 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   be12c:	e9d8 5700 	ldrd	r5, r7, [r8]
   be130:	2314      	movs	r3, #20
   be132:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   be136:	42af      	cmp	r7, r5
   be138:	d03b      	beq.n	be1b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   be13a:	4629      	mov	r1, r5
   be13c:	a80b      	add	r0, sp, #44	; 0x2c
   be13e:	f000 fefd 	bl	bef3c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   be142:	a90b      	add	r1, sp, #44	; 0x2c
   be144:	a80f      	add	r0, sp, #60	; 0x3c
   be146:	9e09      	ldr	r6, [sp, #36]	; 0x24
   be148:	f000 fef8 	bl	bef3c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be14c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   be150:	4299      	cmp	r1, r3
   be152:	da1b      	bge.n	be18c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   be154:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   be156:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   be158:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   be15c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   be160:	4631      	mov	r1, r6
   be162:	f106 0010 	add.w	r0, r6, #16
   be166:	f7ff ff89 	bl	be07c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   be16a:	b9ee      	cbnz	r6, be1a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   be16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   be16e:	3301      	adds	r3, #1
   be170:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   be172:	e011      	b.n	be198 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   be174:	a808      	add	r0, sp, #32
   be176:	f7ff ffab 	bl	be0d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   be17a:	2800      	cmp	r0, #0
   be17c:	d1d6      	bne.n	be12c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   be17e:	a808      	add	r0, sp, #32
   be180:	f7fe fb97 	bl	bc8b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   be184:	4620      	mov	r0, r4
   be186:	b015      	add	sp, #84	; 0x54
   be188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be18c:	3101      	adds	r1, #1
   be18e:	a808      	add	r0, sp, #32
   be190:	f7ff ff9e 	bl	be0d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   be194:	2800      	cmp	r0, #0
   be196:	d1dd      	bne.n	be154 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   be198:	a80f      	add	r0, sp, #60	; 0x3c
   be19a:	f000 fe53 	bl	bee44 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   be19e:	a80b      	add	r0, sp, #44	; 0x2c
   be1a0:	f000 fe50 	bl	bee44 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   be1a4:	3514      	adds	r5, #20
   be1a6:	e7c6      	b.n	be136 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   be1a8:	a90f      	add	r1, sp, #60	; 0x3c
   be1aa:	4630      	mov	r0, r6
   be1ac:	f000 fec6 	bl	bef3c <_ZN6StringC1EOS_>
   be1b0:	e7dc      	b.n	be16c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   be1b2:	2600      	movs	r6, #0
   be1b4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   be1b8:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   be1ba:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   be1be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   be1c2:	429e      	cmp	r6, r3
   be1c4:	da7c      	bge.n	be2c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   be1c6:	0133      	lsls	r3, r6, #4
   be1c8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   be1ca:	9306      	str	r3, [sp, #24]
        if (!category) {
   be1cc:	b90b      	cbnz	r3, be1d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   be1ce:	3601      	adds	r6, #1
   be1d0:	e7f5      	b.n	be1be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   be1d2:	2300      	movs	r3, #0
   be1d4:	9307      	str	r3, [sp, #28]
   be1d6:	fb09 f306 	mul.w	r3, r9, r6
   be1da:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   be1dc:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   be1de:	a907      	add	r1, sp, #28
   be1e0:	a806      	add	r0, sp, #24
   be1e2:	f7ff fb5e 	bl	bd8a2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   be1e6:	4682      	mov	sl, r0
   be1e8:	2800      	cmp	r0, #0
   be1ea:	d0f0      	beq.n	be1ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   be1ec:	f04f 0300 	mov.w	r3, #0
   be1f0:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   be1f4:	4601      	mov	r1, r0
   be1f6:	9a07      	ldr	r2, [sp, #28]
   be1f8:	f10d 0317 	add.w	r3, sp, #23
   be1fc:	4628      	mov	r0, r5
   be1fe:	f7ff fbe5 	bl	bd9cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   be202:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   be206:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   be208:	2f00      	cmp	r7, #0
   be20a:	d14a      	bne.n	be2a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   be20c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   be210:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   be214:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   be218:	f64f 73ff 	movw	r3, #65535	; 0xffff
   be21c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   be220:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   be224:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be226:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   be22a:	4293      	cmp	r3, r2
   be22c:	db17      	blt.n	be25e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   be22e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   be232:	f1ba 0f00 	cmp.w	sl, #0
   be236:	dd30      	ble.n	be29a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   be238:	fb09 f00a 	mul.w	r0, r9, sl
   be23c:	f7fe fa8e 	bl	bc75c <malloc>
            if (!d) {
   be240:	4683      	mov	fp, r0
   be242:	b360      	cbz	r0, be29e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   be244:	e9d5 1200 	ldrd	r1, r2, [r5]
   be248:	fb09 1202 	mla	r2, r9, r2, r1
   be24c:	f7ff feea 	bl	be024 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   be250:	6828      	ldr	r0, [r5, #0]
   be252:	f7fe fa8b 	bl	bc76c <free>
        data_ = d;
   be256:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   be25a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   be25e:	682b      	ldr	r3, [r5, #0]
   be260:	9a01      	ldr	r2, [sp, #4]
   be262:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   be266:	686a      	ldr	r2, [r5, #4]
   be268:	4651      	mov	r1, sl
   be26a:	fb09 3202 	mla	r2, r9, r2, r3
   be26e:	f10a 0014 	add.w	r0, sl, #20
   be272:	f7ff fed7 	bl	be024 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   be276:	f1ba 0f00 	cmp.w	sl, #0
   be27a:	d003      	beq.n	be284 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   be27c:	a90f      	add	r1, sp, #60	; 0x3c
   be27e:	4650      	mov	r0, sl
   be280:	f7ff fb90 	bl	bd9a4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   be284:	686b      	ldr	r3, [r5, #4]
   be286:	3301      	adds	r3, #1
   be288:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   be28a:	a811      	add	r0, sp, #68	; 0x44
   be28c:	f7ff fcdc 	bl	bdc48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   be290:	b13f      	cbz	r7, be2a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   be292:	a80b      	add	r0, sp, #44	; 0x2c
   be294:	f7ff fcd8 	bl	bdc48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   be298:	e771      	b.n	be17e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   be29a:	46bb      	mov	fp, r7
   be29c:	e7d8      	b.n	be250 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   be29e:	2701      	movs	r7, #1
   be2a0:	e7f3      	b.n	be28a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   be2a2:	9b01      	ldr	r3, [sp, #4]
   be2a4:	682d      	ldr	r5, [r5, #0]
   be2a6:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   be2aa:	9b06      	ldr	r3, [sp, #24]
   be2ac:	781b      	ldrb	r3, [r3, #0]
   be2ae:	b92b      	cbnz	r3, be2bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   be2b0:	f8d8 3000 	ldr.w	r3, [r8]
   be2b4:	9a02      	ldr	r2, [sp, #8]
   be2b6:	4413      	add	r3, r2
   be2b8:	7c1b      	ldrb	r3, [r3, #16]
   be2ba:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   be2bc:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   be2be:	e78e      	b.n	be1de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be2c0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   be2c2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be2c4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   be2c6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be2c8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   be2ca:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   be2cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   be2ce:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be2d0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   be2d2:	60a2      	str	r2, [r4, #8]
   be2d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   be2d6:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be2d8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   be2da:	60e2      	str	r2, [r4, #12]
   be2dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   be2de:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be2e0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   be2e2:	6122      	str	r2, [r4, #16]
   be2e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   be2e6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   be2e8:	9b03      	ldr	r3, [sp, #12]
   be2ea:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   be2ec:	6162      	str	r2, [r4, #20]
   be2ee:	7623      	strb	r3, [r4, #24]
   be2f0:	e7cf      	b.n	be292 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000be2f4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   be2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   be2f6:	4604      	mov	r4, r0
   be2f8:	b087      	sub	sp, #28
   be2fa:	460d      	mov	r5, r1
        filter_(level, filters) {
   be2fc:	4626      	mov	r6, r4
        stream_(&stream) {
   be2fe:	4619      	mov	r1, r3
   be300:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   be302:	4617      	mov	r7, r2
        stream_(&stream) {
   be304:	f7f8 fb43 	bl	b698e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   be308:	4b0b      	ldr	r3, [pc, #44]	; (be338 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   be30a:	f846 3b04 	str.w	r3, [r6], #4
   be30e:	4669      	mov	r1, sp
   be310:	a803      	add	r0, sp, #12
   be312:	f7f8 fb3c 	bl	b698e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   be316:	aa03      	add	r2, sp, #12
   be318:	4639      	mov	r1, r7
   be31a:	4630      	mov	r0, r6
   be31c:	f7ff fef0 	bl	be100 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   be320:	a803      	add	r0, sp, #12
   be322:	f7f8 faf3 	bl	b690c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   be326:	4668      	mov	r0, sp
   be328:	f7f8 faf0 	bl	b690c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   be32c:	4b03      	ldr	r3, [pc, #12]	; (be33c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   be32e:	6023      	str	r3, [r4, #0]
}
   be330:	4620      	mov	r0, r4
        stream_(&stream) {
   be332:	6225      	str	r5, [r4, #32]
}
   be334:	b007      	add	sp, #28
   be336:	bdf0      	pop	{r4, r5, r6, r7, pc}
   be338:	000c1850 	.word	0x000c1850
   be33c:	000c253c 	.word	0x000c253c

000be340 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   be340:	b5f0      	push	{r4, r5, r6, r7, lr}
   be342:	460f      	mov	r7, r1
   be344:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   be346:	491d      	ldr	r1, [pc, #116]	; (be3bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   be348:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   be34a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   be34c:	4616      	mov	r6, r2
   be34e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   be350:	f002 fa03 	bl	c075a <strcmp>
   be354:	b9c0      	cbnz	r0, be388 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   be356:	b1a4      	cbz	r4, be382 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   be358:	4629      	mov	r1, r5
   be35a:	a801      	add	r0, sp, #4
   be35c:	f7ff fcbc 	bl	bdcd8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   be360:	4917      	ldr	r1, [pc, #92]	; (be3c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   be362:	2024      	movs	r0, #36	; 0x24
   be364:	f001 fc32 	bl	bfbcc <_ZnwjRKSt9nothrow_t>
   be368:	4605      	mov	r5, r0
   be36a:	b130      	cbz	r0, be37a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   be36c:	ab01      	add	r3, sp, #4
   be36e:	4632      	mov	r2, r6
   be370:	4621      	mov	r1, r4
   be372:	f7ff ffbf 	bl	be2f4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   be376:	4b13      	ldr	r3, [pc, #76]	; (be3c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   be378:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   be37a:	a801      	add	r0, sp, #4
   be37c:	f7f8 fac6 	bl	b690c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   be380:	462c      	mov	r4, r5
}
   be382:	4620      	mov	r0, r4
   be384:	b005      	add	sp, #20
   be386:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   be388:	490f      	ldr	r1, [pc, #60]	; (be3c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   be38a:	4638      	mov	r0, r7
   be38c:	f002 f9e5 	bl	c075a <strcmp>
   be390:	b990      	cbnz	r0, be3b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   be392:	2c00      	cmp	r4, #0
   be394:	d0f5      	beq.n	be382 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   be396:	4629      	mov	r1, r5
   be398:	a801      	add	r0, sp, #4
   be39a:	f7ff fc9d 	bl	bdcd8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   be39e:	4908      	ldr	r1, [pc, #32]	; (be3c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   be3a0:	2024      	movs	r0, #36	; 0x24
   be3a2:	f001 fc13 	bl	bfbcc <_ZnwjRKSt9nothrow_t>
   be3a6:	4605      	mov	r5, r0
   be3a8:	2800      	cmp	r0, #0
   be3aa:	d0e6      	beq.n	be37a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   be3ac:	ab01      	add	r3, sp, #4
   be3ae:	4632      	mov	r2, r6
   be3b0:	4621      	mov	r1, r4
   be3b2:	f7ff ff9f 	bl	be2f4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   be3b6:	e7e0      	b.n	be37a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   be3b8:	2400      	movs	r4, #0
   be3ba:	e7e2      	b.n	be382 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   be3bc:	000c24c2 	.word	0x000c24c2
   be3c0:	000c2690 	.word	0x000c2690
   be3c4:	000c2554 	.word	0x000c2554
   be3c8:	000c24c6 	.word	0x000c24c6

000be3cc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   be3cc:	4b01      	ldr	r3, [pc, #4]	; (be3d4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   be3ce:	4a02      	ldr	r2, [pc, #8]	; (be3d8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   be3d0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   be3d2:	4770      	bx	lr
   be3d4:	2003e654 	.word	0x2003e654
   be3d8:	000c24d7 	.word	0x000c24d7

000be3dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   be3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be3e0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   be3e2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   be3e6:	4604      	mov	r4, r0
   be3e8:	460e      	mov	r6, r1
   be3ea:	4617      	mov	r7, r2
   be3ec:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   be3ee:	f001 f9c3 	bl	bf778 <_Z16_fetch_usbserialv>
   be3f2:	4581      	cmp	r9, r0
   be3f4:	d04c      	beq.n	be490 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   be3f6:	792b      	ldrb	r3, [r5, #4]
   be3f8:	0719      	lsls	r1, r3, #28
   be3fa:	d504      	bpl.n	be406 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   be3fc:	696a      	ldr	r2, [r5, #20]
   be3fe:	4954      	ldr	r1, [pc, #336]	; (be550 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   be400:	4620      	mov	r0, r4
   be402:	f7ff fac0 	bl	bd986 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   be406:	f1b8 0f00 	cmp.w	r8, #0
   be40a:	d00d      	beq.n	be428 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   be40c:	215b      	movs	r1, #91	; 0x5b
   be40e:	4620      	mov	r0, r4
   be410:	f7ff faad 	bl	bd96e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   be414:	4641      	mov	r1, r8
   be416:	4620      	mov	r0, r4
   be418:	f7ff fa9a 	bl	bd950 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   be41c:	6823      	ldr	r3, [r4, #0]
   be41e:	494d      	ldr	r1, [pc, #308]	; (be554 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   be420:	68db      	ldr	r3, [r3, #12]
   be422:	2202      	movs	r2, #2
   be424:	4620      	mov	r0, r4
   be426:	4798      	blx	r3
    if (attr.has_file) {
   be428:	792b      	ldrb	r3, [r5, #4]
   be42a:	07da      	lsls	r2, r3, #31
   be42c:	d523      	bpl.n	be476 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   be42e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   be432:	212f      	movs	r1, #47	; 0x2f
   be434:	4640      	mov	r0, r8
   be436:	f002 f9ef 	bl	c0818 <strrchr>
    if (s1) {
   be43a:	b108      	cbz	r0, be440 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   be43c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   be440:	4641      	mov	r1, r8
   be442:	4620      	mov	r0, r4
   be444:	f7ff fa84 	bl	bd950 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   be448:	792b      	ldrb	r3, [r5, #4]
   be44a:	079b      	lsls	r3, r3, #30
   be44c:	d508      	bpl.n	be460 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   be44e:	213a      	movs	r1, #58	; 0x3a
   be450:	4620      	mov	r0, r4
   be452:	f7ff fa8c 	bl	bd96e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   be456:	68ea      	ldr	r2, [r5, #12]
   be458:	493f      	ldr	r1, [pc, #252]	; (be558 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   be45a:	4620      	mov	r0, r4
   be45c:	f7ff fa93 	bl	bd986 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   be460:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   be462:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   be464:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   be468:	68db      	ldr	r3, [r3, #12]
   be46a:	bf14      	ite	ne
   be46c:	493b      	ldrne	r1, [pc, #236]	; (be55c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   be46e:	493c      	ldreq	r1, [pc, #240]	; (be560 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   be470:	2202      	movs	r2, #2
            write(": ", 2);
   be472:	4620      	mov	r0, r4
   be474:	4798      	blx	r3
    if (attr.has_function) {
   be476:	792b      	ldrb	r3, [r5, #4]
   be478:	0758      	lsls	r0, r3, #29
   be47a:	d51d      	bpl.n	be4b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   be47c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   be47e:	460b      	mov	r3, r1
   be480:	461a      	mov	r2, r3
    for (; *s; ++s) {
   be482:	f813 0b01 	ldrb.w	r0, [r3], #1
   be486:	b160      	cbz	r0, be4a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   be488:	2820      	cmp	r0, #32
   be48a:	d108      	bne.n	be49e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   be48c:	4619      	mov	r1, r3
   be48e:	e7f7      	b.n	be480 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   be490:	4834      	ldr	r0, [pc, #208]	; (be564 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   be492:	f000 f966 	bl	be762 <_ZN5spark12NetworkClass9listeningEv>
   be496:	2800      	cmp	r0, #0
   be498:	d0ad      	beq.n	be3f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   be49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   be49e:	2828      	cmp	r0, #40	; 0x28
   be4a0:	d1ee      	bne.n	be480 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   be4a2:	6823      	ldr	r3, [r4, #0]
   be4a4:	1a52      	subs	r2, r2, r1
   be4a6:	68db      	ldr	r3, [r3, #12]
   be4a8:	4620      	mov	r0, r4
   be4aa:	4798      	blx	r3
        write("(): ", 4);
   be4ac:	6823      	ldr	r3, [r4, #0]
   be4ae:	492e      	ldr	r1, [pc, #184]	; (be568 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   be4b0:	68db      	ldr	r3, [r3, #12]
   be4b2:	2204      	movs	r2, #4
   be4b4:	4620      	mov	r0, r4
   be4b6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   be4b8:	2100      	movs	r1, #0
   be4ba:	4638      	mov	r0, r7
   be4bc:	f7fd fffa 	bl	bc4b4 <log_level_name>
   be4c0:	4601      	mov	r1, r0
    write(s);
   be4c2:	4620      	mov	r0, r4
   be4c4:	f7ff fa44 	bl	bd950 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   be4c8:	6823      	ldr	r3, [r4, #0]
   be4ca:	4925      	ldr	r1, [pc, #148]	; (be560 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   be4cc:	68db      	ldr	r3, [r3, #12]
   be4ce:	2202      	movs	r2, #2
   be4d0:	4620      	mov	r0, r4
   be4d2:	4798      	blx	r3
    if (msg) {
   be4d4:	b11e      	cbz	r6, be4de <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   be4d6:	4631      	mov	r1, r6
   be4d8:	4620      	mov	r0, r4
   be4da:	f7ff fa39 	bl	bd950 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   be4de:	792b      	ldrb	r3, [r5, #4]
   be4e0:	f013 0f30 	tst.w	r3, #48	; 0x30
   be4e4:	d02c      	beq.n	be540 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   be4e6:	6823      	ldr	r3, [r4, #0]
   be4e8:	4920      	ldr	r1, [pc, #128]	; (be56c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   be4ea:	68db      	ldr	r3, [r3, #12]
   be4ec:	2202      	movs	r2, #2
   be4ee:	4620      	mov	r0, r4
   be4f0:	4798      	blx	r3
        if (attr.has_code) {
   be4f2:	792b      	ldrb	r3, [r5, #4]
   be4f4:	06d9      	lsls	r1, r3, #27
   be4f6:	d50a      	bpl.n	be50e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   be4f8:	6823      	ldr	r3, [r4, #0]
   be4fa:	491d      	ldr	r1, [pc, #116]	; (be570 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   be4fc:	68db      	ldr	r3, [r3, #12]
   be4fe:	2207      	movs	r2, #7
   be500:	4620      	mov	r0, r4
   be502:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   be504:	69aa      	ldr	r2, [r5, #24]
   be506:	491b      	ldr	r1, [pc, #108]	; (be574 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   be508:	4620      	mov	r0, r4
   be50a:	f7ff fa3c 	bl	bd986 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   be50e:	792b      	ldrb	r3, [r5, #4]
   be510:	069a      	lsls	r2, r3, #26
   be512:	d511      	bpl.n	be538 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   be514:	06db      	lsls	r3, r3, #27
   be516:	d505      	bpl.n	be524 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   be518:	6823      	ldr	r3, [r4, #0]
   be51a:	4910      	ldr	r1, [pc, #64]	; (be55c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   be51c:	68db      	ldr	r3, [r3, #12]
   be51e:	2202      	movs	r2, #2
   be520:	4620      	mov	r0, r4
   be522:	4798      	blx	r3
            write("details = ", 10);
   be524:	6823      	ldr	r3, [r4, #0]
   be526:	4914      	ldr	r1, [pc, #80]	; (be578 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   be528:	68db      	ldr	r3, [r3, #12]
   be52a:	4620      	mov	r0, r4
   be52c:	220a      	movs	r2, #10
   be52e:	4798      	blx	r3
            write(attr.details);
   be530:	69e9      	ldr	r1, [r5, #28]
   be532:	4620      	mov	r0, r4
   be534:	f7ff fa0c 	bl	bd950 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   be538:	215d      	movs	r1, #93	; 0x5d
   be53a:	4620      	mov	r0, r4
   be53c:	f7ff fa17 	bl	bd96e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   be540:	6823      	ldr	r3, [r4, #0]
   be542:	490e      	ldr	r1, [pc, #56]	; (be57c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   be544:	68db      	ldr	r3, [r3, #12]
   be546:	4620      	mov	r0, r4
   be548:	2202      	movs	r2, #2
}
   be54a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   be54e:	4718      	bx	r3
   be550:	000c24db 	.word	0x000c24db
   be554:	000c24e2 	.word	0x000c24e2
   be558:	000c0f31 	.word	0x000c0f31
   be55c:	000c24e5 	.word	0x000c24e5
   be560:	000c24ea 	.word	0x000c24ea
   be564:	2003e680 	.word	0x2003e680
   be568:	000c24e8 	.word	0x000c24e8
   be56c:	000c24ed 	.word	0x000c24ed
   be570:	000c24f0 	.word	0x000c24f0
   be574:	000c24f8 	.word	0x000c24f8
   be578:	000c24fb 	.word	0x000c24fb
   be57c:	000c2506 	.word	0x000c2506

000be580 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   be580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   be584:	b085      	sub	sp, #20
    return stream_;
   be586:	f8d0 9020 	ldr.w	r9, [r0, #32]
   be58a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   be58c:	4605      	mov	r5, r0
   be58e:	460f      	mov	r7, r1
   be590:	4690      	mov	r8, r2
   be592:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   be594:	f001 f8f0 	bl	bf778 <_Z16_fetch_usbserialv>
   be598:	4581      	cmp	r9, r0
   be59a:	d105      	bne.n	be5a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   be59c:	4849      	ldr	r0, [pc, #292]	; (be6c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   be59e:	f000 f8e0 	bl	be762 <_ZN5spark12NetworkClass9listeningEv>
   be5a2:	2800      	cmp	r0, #0
   be5a4:	f040 808a 	bne.w	be6bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   be5a8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   be5aa:	4a47      	ldr	r2, [pc, #284]	; (be6c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   be5ac:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   be5ae:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   be5b2:	a801      	add	r0, sp, #4
        strm_(stream) {
   be5b4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   be5b6:	f88d 9008 	strb.w	r9, [sp, #8]
   be5ba:	f7ff f8b4 	bl	bd726 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   be5be:	4649      	mov	r1, r9
   be5c0:	4640      	mov	r0, r8
   be5c2:	f7fd ff77 	bl	bc4b4 <log_level_name>
    json.name("l", 1).value(s);
   be5c6:	4941      	ldr	r1, [pc, #260]	; (be6cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   be5c8:	4680      	mov	r8, r0
   be5ca:	2201      	movs	r2, #1
   be5cc:	a801      	add	r0, sp, #4
   be5ce:	f7ff f939 	bl	bd844 <_ZN5spark10JSONWriter4nameEPKcj>
   be5d2:	4641      	mov	r1, r8
   be5d4:	f7ff f9ae 	bl	bd934 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   be5d8:	b13f      	cbz	r7, be5ea <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   be5da:	493d      	ldr	r1, [pc, #244]	; (be6d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   be5dc:	2201      	movs	r2, #1
   be5de:	a801      	add	r0, sp, #4
   be5e0:	f7ff f930 	bl	bd844 <_ZN5spark10JSONWriter4nameEPKcj>
   be5e4:	4639      	mov	r1, r7
   be5e6:	f7ff f9a5 	bl	bd934 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   be5ea:	b13e      	cbz	r6, be5fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   be5ec:	4939      	ldr	r1, [pc, #228]	; (be6d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   be5ee:	2201      	movs	r2, #1
   be5f0:	a801      	add	r0, sp, #4
   be5f2:	f7ff f927 	bl	bd844 <_ZN5spark10JSONWriter4nameEPKcj>
   be5f6:	4631      	mov	r1, r6
   be5f8:	f7ff f99c 	bl	bd934 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   be5fc:	7923      	ldrb	r3, [r4, #4]
   be5fe:	07df      	lsls	r7, r3, #31
   be600:	d50e      	bpl.n	be620 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   be602:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   be604:	212f      	movs	r1, #47	; 0x2f
   be606:	4630      	mov	r0, r6
   be608:	f002 f906 	bl	c0818 <strrchr>
    if (s1) {
   be60c:	b100      	cbz	r0, be610 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   be60e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   be610:	4931      	ldr	r1, [pc, #196]	; (be6d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   be612:	2201      	movs	r2, #1
   be614:	a801      	add	r0, sp, #4
   be616:	f7ff f915 	bl	bd844 <_ZN5spark10JSONWriter4nameEPKcj>
   be61a:	4631      	mov	r1, r6
   be61c:	f7ff f98a 	bl	bd934 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   be620:	7923      	ldrb	r3, [r4, #4]
   be622:	079e      	lsls	r6, r3, #30
   be624:	d507      	bpl.n	be636 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   be626:	492d      	ldr	r1, [pc, #180]	; (be6dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   be628:	2202      	movs	r2, #2
   be62a:	a801      	add	r0, sp, #4
   be62c:	f7ff f90a 	bl	bd844 <_ZN5spark10JSONWriter4nameEPKcj>
   be630:	68e1      	ldr	r1, [r4, #12]
   be632:	f7ff f885 	bl	bd740 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   be636:	7923      	ldrb	r3, [r4, #4]
   be638:	0758      	lsls	r0, r3, #29
   be63a:	d514      	bpl.n	be666 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   be63c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   be63e:	4633      	mov	r3, r6
   be640:	461f      	mov	r7, r3
    for (; *s; ++s) {
   be642:	f813 2b01 	ldrb.w	r2, [r3], #1
   be646:	b12a      	cbz	r2, be654 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   be648:	2a20      	cmp	r2, #32
   be64a:	d101      	bne.n	be650 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   be64c:	461e      	mov	r6, r3
   be64e:	e7f7      	b.n	be640 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   be650:	2a28      	cmp	r2, #40	; 0x28
   be652:	d1f5      	bne.n	be640 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   be654:	4922      	ldr	r1, [pc, #136]	; (be6e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   be656:	2202      	movs	r2, #2
   be658:	a801      	add	r0, sp, #4
   be65a:	f7ff f8f3 	bl	bd844 <_ZN5spark10JSONWriter4nameEPKcj>
   be65e:	1bba      	subs	r2, r7, r6
   be660:	4631      	mov	r1, r6
   be662:	f7ff f8ff 	bl	bd864 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   be666:	7923      	ldrb	r3, [r4, #4]
   be668:	0719      	lsls	r1, r3, #28
   be66a:	d507      	bpl.n	be67c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   be66c:	491d      	ldr	r1, [pc, #116]	; (be6e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   be66e:	2201      	movs	r2, #1
   be670:	a801      	add	r0, sp, #4
   be672:	f7ff f8e7 	bl	bd844 <_ZN5spark10JSONWriter4nameEPKcj>
   be676:	6961      	ldr	r1, [r4, #20]
   be678:	f7ff f874 	bl	bd764 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   be67c:	7923      	ldrb	r3, [r4, #4]
   be67e:	06da      	lsls	r2, r3, #27
   be680:	d508      	bpl.n	be694 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   be682:	2204      	movs	r2, #4
   be684:	4918      	ldr	r1, [pc, #96]	; (be6e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   be686:	eb0d 0002 	add.w	r0, sp, r2
   be68a:	f7ff f8db 	bl	bd844 <_ZN5spark10JSONWriter4nameEPKcj>
   be68e:	69a1      	ldr	r1, [r4, #24]
   be690:	f7ff f856 	bl	bd740 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   be694:	7923      	ldrb	r3, [r4, #4]
   be696:	069b      	lsls	r3, r3, #26
   be698:	d507      	bpl.n	be6aa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   be69a:	4914      	ldr	r1, [pc, #80]	; (be6ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   be69c:	2206      	movs	r2, #6
   be69e:	a801      	add	r0, sp, #4
   be6a0:	f7ff f8d0 	bl	bd844 <_ZN5spark10JSONWriter4nameEPKcj>
   be6a4:	69e1      	ldr	r1, [r4, #28]
   be6a6:	f7ff f945 	bl	bd934 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   be6aa:	a801      	add	r0, sp, #4
   be6ac:	f7ff f825 	bl	bd6fa <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   be6b0:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   be6b2:	490f      	ldr	r1, [pc, #60]	; (be6f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   be6b4:	6803      	ldr	r3, [r0, #0]
   be6b6:	2202      	movs	r2, #2
   be6b8:	68db      	ldr	r3, [r3, #12]
   be6ba:	4798      	blx	r3
}
   be6bc:	b005      	add	sp, #20
   be6be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   be6c2:	bf00      	nop
   be6c4:	2003e680 	.word	0x2003e680
   be6c8:	000c2524 	.word	0x000c2524
   be6cc:	000c24b8 	.word	0x000c24b8
   be6d0:	000c1e08 	.word	0x000c1e08
   be6d4:	000c27b1 	.word	0x000c27b1
   be6d8:	000c1161 	.word	0x000c1161
   be6dc:	000c2509 	.word	0x000c2509
   be6e0:	000c250c 	.word	0x000c250c
   be6e4:	000c1729 	.word	0x000c1729
   be6e8:	000c250f 	.word	0x000c250f
   be6ec:	000c2514 	.word	0x000c2514
   be6f0:	000c2506 	.word	0x000c2506

000be6f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   be6f4:	2300      	movs	r3, #0
   be6f6:	6840      	ldr	r0, [r0, #4]
   be6f8:	461a      	mov	r2, r3
   be6fa:	f7fd bfcf 	b.w	bc69c <network_connect>

000be6fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   be6fe:	6840      	ldr	r0, [r0, #4]
   be700:	2200      	movs	r2, #0
   be702:	2102      	movs	r1, #2
   be704:	f7fd bfda 	b.w	bc6bc <network_disconnect>

000be708 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   be708:	2200      	movs	r2, #0
   be70a:	6840      	ldr	r0, [r0, #4]
   be70c:	4611      	mov	r1, r2
   be70e:	f7fd bfcd 	b.w	bc6ac <network_connecting>

000be712 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   be712:	2200      	movs	r2, #0
   be714:	6840      	ldr	r0, [r0, #4]
   be716:	4611      	mov	r1, r2
   be718:	f7fd bfd8 	b.w	bc6cc <network_ready>

000be71c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   be71c:	2300      	movs	r3, #0
   be71e:	6840      	ldr	r0, [r0, #4]
   be720:	461a      	mov	r2, r3
   be722:	4619      	mov	r1, r3
   be724:	f7fd bfda 	b.w	bc6dc <network_on>

000be728 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   be728:	2300      	movs	r3, #0
   be72a:	6840      	ldr	r0, [r0, #4]
   be72c:	461a      	mov	r2, r3
   be72e:	4619      	mov	r1, r3
   be730:	f7fd bfdc 	b.w	bc6ec <network_off>

000be734 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   be734:	6840      	ldr	r0, [r0, #4]
   be736:	2100      	movs	r1, #0
   be738:	f7fe b800 	b.w	bc73c <network_is_on>

000be73c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   be73c:	6840      	ldr	r0, [r0, #4]
   be73e:	2100      	movs	r1, #0
   be740:	f7fe b804 	b.w	bc74c <network_is_off>

000be744 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   be744:	6840      	ldr	r0, [r0, #4]
   be746:	2200      	movs	r2, #0
   be748:	f081 0101 	eor.w	r1, r1, #1
   be74c:	f7fd bfd6 	b.w	bc6fc <network_listen>

000be750 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   be750:	6840      	ldr	r0, [r0, #4]
   be752:	2200      	movs	r2, #0
   be754:	f7fd bfe2 	b.w	bc71c <network_set_listen_timeout>

000be758 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   be758:	2200      	movs	r2, #0
   be75a:	6840      	ldr	r0, [r0, #4]
   be75c:	4611      	mov	r1, r2
   be75e:	f7fd bfe5 	b.w	bc72c <network_get_listen_timeout>

000be762 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   be762:	2200      	movs	r2, #0
   be764:	6840      	ldr	r0, [r0, #4]
   be766:	4611      	mov	r1, r2
   be768:	f7fd bfd0 	b.w	bc70c <network_listening>

000be76c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   be76c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   be770:	b095      	sub	sp, #84	; 0x54
   be772:	4614      	mov	r4, r2
   be774:	460d      	mov	r5, r1
   be776:	4607      	mov	r7, r0
    IPAddress addr;
   be778:	f7fe fe6e 	bl	bd458 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   be77c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   be77e:	221c      	movs	r2, #28
   be780:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   be782:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   be784:	f001 ff5e 	bl	c0644 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   be788:	2340      	movs	r3, #64	; 0x40
   be78a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   be78c:	4620      	mov	r0, r4
   be78e:	466b      	mov	r3, sp
   be790:	aa0c      	add	r2, sp, #48	; 0x30
   be792:	2100      	movs	r1, #0
   be794:	f7fd fd2e 	bl	bc1f4 <netdb_getaddrinfo>
    if (!r) {
   be798:	4604      	mov	r4, r0
   be79a:	2800      	cmp	r0, #0
   be79c:	d14b      	bne.n	be836 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   be79e:	4602      	mov	r2, r0
   be7a0:	2101      	movs	r1, #1
   be7a2:	6868      	ldr	r0, [r5, #4]
   be7a4:	f7fd ff92 	bl	bc6cc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   be7a8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   be7aa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   be7ac:	4622      	mov	r2, r4
   be7ae:	6868      	ldr	r0, [r5, #4]
   be7b0:	f7fd ff8c 	bl	bc6cc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   be7b4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   be7b6:	4681      	mov	r9, r0
        bool ok = false;
   be7b8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   be7ba:	2e00      	cmp	r6, #0
   be7bc:	d03b      	beq.n	be836 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   be7be:	2900      	cmp	r1, #0
   be7c0:	d139      	bne.n	be836 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   be7c2:	6873      	ldr	r3, [r6, #4]
   be7c4:	2b02      	cmp	r3, #2
   be7c6:	d003      	beq.n	be7d0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   be7c8:	2b0a      	cmp	r3, #10
   be7ca:	d011      	beq.n	be7f0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   be7cc:	69f6      	ldr	r6, [r6, #28]
   be7ce:	e7f4      	b.n	be7ba <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   be7d0:	f1b8 0f00 	cmp.w	r8, #0
   be7d4:	d0fa      	beq.n	be7cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   be7d6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   be7d8:	a806      	add	r0, sp, #24
   be7da:	3104      	adds	r1, #4
class IPAddress : public Printable {
   be7dc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   be7de:	f7fe fe69 	bl	bd4b4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   be7e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be7e4:	1d3c      	adds	r4, r7, #4
   be7e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   be7e8:	682b      	ldr	r3, [r5, #0]
   be7ea:	7023      	strb	r3, [r4, #0]
                    ok = true;
   be7ec:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   be7ee:	e7ed      	b.n	be7cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   be7f0:	f1b9 0f00 	cmp.w	r9, #0
   be7f4:	d0ea      	beq.n	be7cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   be7f6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   be7f8:	2210      	movs	r2, #16
   be7fa:	a801      	add	r0, sp, #4
   be7fc:	f001 ff22 	bl	c0644 <memset>
                    a.v = 6;
   be800:	2306      	movs	r3, #6
   be802:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   be806:	ad01      	add	r5, sp, #4
   be808:	f104 0308 	add.w	r3, r4, #8
   be80c:	3418      	adds	r4, #24
   be80e:	6818      	ldr	r0, [r3, #0]
   be810:	6859      	ldr	r1, [r3, #4]
   be812:	462a      	mov	r2, r5
   be814:	c203      	stmia	r2!, {r0, r1}
   be816:	3308      	adds	r3, #8
   be818:	42a3      	cmp	r3, r4
   be81a:	4615      	mov	r5, r2
   be81c:	d1f7      	bne.n	be80e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   be81e:	a901      	add	r1, sp, #4
   be820:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   be822:	ad07      	add	r5, sp, #28
   be824:	f7fe fe26 	bl	bd474 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   be828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be82a:	1d3c      	adds	r4, r7, #4
   be82c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   be82e:	682b      	ldr	r3, [r5, #0]
   be830:	7023      	strb	r3, [r4, #0]
                    ok = true;
   be832:	4649      	mov	r1, r9
   be834:	e7ca      	b.n	be7cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   be836:	9800      	ldr	r0, [sp, #0]
   be838:	f7fd fcd4 	bl	bc1e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   be83c:	4638      	mov	r0, r7
   be83e:	b015      	add	sp, #84	; 0x54
   be840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000be844 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   be844:	4b02      	ldr	r3, [pc, #8]	; (be850 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   be846:	4a03      	ldr	r2, [pc, #12]	; (be854 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   be848:	601a      	str	r2, [r3, #0]
   be84a:	2200      	movs	r2, #0
   be84c:	605a      	str	r2, [r3, #4]

} // spark
   be84e:	4770      	bx	lr
   be850:	2003e680 	.word	0x2003e680
   be854:	000c259c 	.word	0x000c259c

000be858 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   be858:	b508      	push	{r3, lr}
            return &Wire1;
   be85a:	f001 f953 	bl	bfb04 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   be85e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   be862:	f7fe bd67 	b.w	bd334 <_ZN7TwoWire4lockEv>

000be866 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   be866:	b510      	push	{r4, lr}
   be868:	4604      	mov	r4, r0
    lock_(_lock)
   be86a:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   be86c:	b109      	cbz	r1, be872 <_ZN4PMICC1Eb+0xc>
        lock();
   be86e:	f7ff fff3 	bl	be858 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   be872:	4620      	mov	r0, r4
   be874:	bd10      	pop	{r4, pc}

000be876 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   be876:	b508      	push	{r3, lr}
            return &Wire1;
   be878:	f001 f944 	bl	bfb04 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   be87c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   be880:	f7fe bd61 	b.w	bd346 <_ZN7TwoWire6unlockEv>

000be884 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   be884:	b510      	push	{r4, lr}
    if (lock_) {
   be886:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   be888:	4604      	mov	r4, r0
    if (lock_) {
   be88a:	b10b      	cbz	r3, be890 <_ZN4PMICD1Ev+0xc>
        unlock();
   be88c:	f7ff fff3 	bl	be876 <_ZN4PMIC6unlockEv>
}
   be890:	4620      	mov	r0, r4
   be892:	bd10      	pop	{r4, pc}

000be894 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   be894:	b510      	push	{r4, lr}
   be896:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   be898:	6800      	ldr	r0, [r0, #0]
   be89a:	f7ff ffec 	bl	be876 <_ZN4PMIC6unlockEv>
   be89e:	4620      	mov	r0, r4
   be8a0:	bd10      	pop	{r4, pc}

000be8a2 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   be8a2:	b530      	push	{r4, r5, lr}
   be8a4:	b087      	sub	sp, #28
   be8a6:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be8a8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   be8aa:	f7ff ffd5 	bl	be858 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   be8ae:	226b      	movs	r2, #107	; 0x6b
   be8b0:	2300      	movs	r3, #0
   be8b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   be8b6:	2401      	movs	r4, #1
   be8b8:	230a      	movs	r3, #10
   be8ba:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   be8be:	f001 f921 	bl	bfb04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   be8c2:	a902      	add	r1, sp, #8
   be8c4:	f7fe fd1a 	bl	bd2fc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   be8c8:	f001 f91c 	bl	bfb04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   be8cc:	6803      	ldr	r3, [r0, #0]
   be8ce:	4629      	mov	r1, r5
   be8d0:	689b      	ldr	r3, [r3, #8]
   be8d2:	4798      	blx	r3
            return &Wire1;
   be8d4:	f001 f916 	bl	bfb04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   be8d8:	4621      	mov	r1, r4
   be8da:	f7fe fd27 	bl	bd32c <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   be8de:	9403      	str	r4, [sp, #12]
            return &Wire1;
   be8e0:	f001 f910 	bl	bfb04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   be8e4:	a902      	add	r1, sp, #8
   be8e6:	f7fe fcd9 	bl	bd29c <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   be8ea:	f001 f90b 	bl	bfb04 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   be8ee:	6803      	ldr	r3, [r0, #0]
   be8f0:	695b      	ldr	r3, [r3, #20]
   be8f2:	4798      	blx	r3
   be8f4:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   be8f6:	a801      	add	r0, sp, #4
   be8f8:	f7ff ffcc 	bl	be894 <_ZNSt10lock_guardI4PMICED1Ev>
}
   be8fc:	b2e0      	uxtb	r0, r4
   be8fe:	b007      	add	sp, #28
   be900:	bd30      	pop	{r4, r5, pc}

000be902 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   be902:	b570      	push	{r4, r5, r6, lr}
   be904:	b086      	sub	sp, #24
   be906:	460d      	mov	r5, r1
   be908:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be90a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   be90c:	f7ff ffa4 	bl	be858 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   be910:	226b      	movs	r2, #107	; 0x6b
   be912:	2300      	movs	r3, #0
   be914:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   be918:	2601      	movs	r6, #1
   be91a:	230a      	movs	r3, #10
   be91c:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   be920:	f001 f8f0 	bl	bfb04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   be924:	a902      	add	r1, sp, #8
   be926:	f7fe fce9 	bl	bd2fc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   be92a:	f001 f8eb 	bl	bfb04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   be92e:	6803      	ldr	r3, [r0, #0]
   be930:	4629      	mov	r1, r5
   be932:	689b      	ldr	r3, [r3, #8]
   be934:	4798      	blx	r3
            return &Wire1;
   be936:	f001 f8e5 	bl	bfb04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   be93a:	6803      	ldr	r3, [r0, #0]
   be93c:	4621      	mov	r1, r4
   be93e:	689b      	ldr	r3, [r3, #8]
   be940:	4798      	blx	r3
            return &Wire1;
   be942:	f001 f8df 	bl	bfb04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   be946:	4631      	mov	r1, r6
   be948:	f7fe fcf0 	bl	bd32c <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   be94c:	a801      	add	r0, sp, #4
   be94e:	f7ff ffa1 	bl	be894 <_ZNSt10lock_guardI4PMICED1Ev>
}
   be952:	b006      	add	sp, #24
   be954:	bd70      	pop	{r4, r5, r6, pc}

000be956 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   be956:	b513      	push	{r0, r1, r4, lr}
   be958:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be95a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   be95c:	f7ff ff7c 	bl	be858 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   be960:	2101      	movs	r1, #1
   be962:	4620      	mov	r0, r4
   be964:	f7ff ff9d 	bl	be8a2 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   be968:	f000 0330 	and.w	r3, r0, #48	; 0x30
   be96c:	2b10      	cmp	r3, #16
   be96e:	d007      	beq.n	be980 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   be970:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   be974:	f042 0210 	orr.w	r2, r2, #16
   be978:	2101      	movs	r1, #1
   be97a:	4620      	mov	r0, r4
   be97c:	f7ff ffc1 	bl	be902 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   be980:	a801      	add	r0, sp, #4
   be982:	f7ff ff87 	bl	be894 <_ZNSt10lock_guardI4PMICED1Ev>
}
   be986:	2001      	movs	r0, #1
   be988:	b002      	add	sp, #8
   be98a:	bd10      	pop	{r4, pc}

000be98c <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   be98c:	b513      	push	{r0, r1, r4, lr}
   be98e:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be990:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   be992:	f7ff ff61 	bl	be858 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   be996:	2101      	movs	r1, #1
   be998:	4620      	mov	r0, r4
   be99a:	f7ff ff82 	bl	be8a2 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   be99e:	f010 0f30 	tst.w	r0, #48	; 0x30
   be9a2:	d005      	beq.n	be9b0 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   be9a4:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   be9a8:	2101      	movs	r1, #1
   be9aa:	4620      	mov	r0, r4
   be9ac:	f7ff ffa9 	bl	be902 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   be9b0:	a801      	add	r0, sp, #4
   be9b2:	f7ff ff6f 	bl	be894 <_ZNSt10lock_guardI4PMICED1Ev>
}
   be9b6:	2001      	movs	r0, #1
   be9b8:	b002      	add	sp, #8
   be9ba:	bd10      	pop	{r4, pc}

000be9bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   be9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be9be:	4606      	mov	r6, r0
   be9c0:	460d      	mov	r5, r1
  size_t n = 0;
   be9c2:	188f      	adds	r7, r1, r2
   be9c4:	2400      	movs	r4, #0
  while (size--) {
   be9c6:	42bd      	cmp	r5, r7
   be9c8:	d00c      	beq.n	be9e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   be9ca:	6833      	ldr	r3, [r6, #0]
   be9cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   be9d0:	689b      	ldr	r3, [r3, #8]
   be9d2:	4630      	mov	r0, r6
   be9d4:	4798      	blx	r3
     if (chunk>=0)
   be9d6:	1e03      	subs	r3, r0, #0
   be9d8:	db01      	blt.n	be9de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   be9da:	441c      	add	r4, r3
  while (size--) {
   be9dc:	e7f3      	b.n	be9c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   be9de:	2c00      	cmp	r4, #0
   be9e0:	bf08      	it	eq
   be9e2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   be9e4:	4620      	mov	r0, r4
   be9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be9e8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   be9e8:	b513      	push	{r0, r1, r4, lr}
   be9ea:	4604      	mov	r4, r0
    }
   be9ec:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   be9ee:	b159      	cbz	r1, bea08 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   be9f0:	9101      	str	r1, [sp, #4]
   be9f2:	f001 fee2 	bl	c07ba <strlen>
   be9f6:	6823      	ldr	r3, [r4, #0]
   be9f8:	9901      	ldr	r1, [sp, #4]
   be9fa:	68db      	ldr	r3, [r3, #12]
   be9fc:	4602      	mov	r2, r0
   be9fe:	4620      	mov	r0, r4
    }
   bea00:	b002      	add	sp, #8
   bea02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bea06:	4718      	bx	r3
    }
   bea08:	b002      	add	sp, #8
   bea0a:	bd10      	pop	{r4, pc}

000bea0c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bea0c:	b508      	push	{r3, lr}
  return write(str);
   bea0e:	f7ff ffeb 	bl	be9e8 <_ZN5Print5writeEPKc>
}
   bea12:	bd08      	pop	{r3, pc}

000bea14 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bea14:	6803      	ldr	r3, [r0, #0]
   bea16:	689b      	ldr	r3, [r3, #8]
   bea18:	4718      	bx	r3

000bea1a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bea1a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bea1c:	210d      	movs	r1, #13
{
   bea1e:	4605      	mov	r5, r0
  size_t n = print('\r');
   bea20:	f7ff fff8 	bl	bea14 <_ZN5Print5printEc>
  n += print('\n');
   bea24:	210a      	movs	r1, #10
  size_t n = print('\r');
   bea26:	4604      	mov	r4, r0
  n += print('\n');
   bea28:	4628      	mov	r0, r5
   bea2a:	f7ff fff3 	bl	bea14 <_ZN5Print5printEc>
  return n;
}
   bea2e:	4420      	add	r0, r4
   bea30:	bd38      	pop	{r3, r4, r5, pc}

000bea32 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bea32:	b530      	push	{r4, r5, lr}
   bea34:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bea36:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bea38:	2a01      	cmp	r2, #1
  *str = '\0';
   bea3a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bea3e:	bf98      	it	ls
   bea40:	220a      	movls	r2, #10
   bea42:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bea44:	460d      	mov	r5, r1
   bea46:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bea4a:	fb01 5312 	mls	r3, r1, r2, r5
   bea4e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bea52:	2b09      	cmp	r3, #9
   bea54:	bf94      	ite	ls
   bea56:	3330      	addls	r3, #48	; 0x30
   bea58:	3337      	addhi	r3, #55	; 0x37
   bea5a:	b2db      	uxtb	r3, r3
  } while(n);
   bea5c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bea5e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bea62:	d9ef      	bls.n	bea44 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bea64:	4621      	mov	r1, r4
   bea66:	f7ff ffbf 	bl	be9e8 <_ZN5Print5writeEPKc>
}
   bea6a:	b00b      	add	sp, #44	; 0x2c
   bea6c:	bd30      	pop	{r4, r5, pc}
	...

000bea70 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bea70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bea74:	ec55 4b10 	vmov	r4, r5, d0
   bea78:	4606      	mov	r6, r0
   bea7a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bea7c:	ee10 2a10 	vmov	r2, s0
   bea80:	ee10 0a10 	vmov	r0, s0
   bea84:	462b      	mov	r3, r5
   bea86:	4629      	mov	r1, r5
   bea88:	f001 fd04 	bl	c0494 <__aeabi_dcmpun>
   bea8c:	b140      	cbz	r0, beaa0 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bea8e:	4953      	ldr	r1, [pc, #332]	; (bebdc <_ZN5Print10printFloatEdh+0x16c>)
   bea90:	4630      	mov	r0, r6
   bea92:	f7ff ffa9 	bl	be9e8 <_ZN5Print5writeEPKc>
   bea96:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bea98:	4650      	mov	r0, sl
   bea9a:	b003      	add	sp, #12
   bea9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   beaa0:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   beaa4:	4b4e      	ldr	r3, [pc, #312]	; (bebe0 <_ZN5Print10printFloatEdh+0x170>)
   beaa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   beaaa:	4620      	mov	r0, r4
   beaac:	4649      	mov	r1, r9
   beaae:	f001 fcf1 	bl	c0494 <__aeabi_dcmpun>
   beab2:	b948      	cbnz	r0, beac8 <_ZN5Print10printFloatEdh+0x58>
   beab4:	4b4a      	ldr	r3, [pc, #296]	; (bebe0 <_ZN5Print10printFloatEdh+0x170>)
   beab6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   beaba:	4620      	mov	r0, r4
   beabc:	4649      	mov	r1, r9
   beabe:	f001 fccb 	bl	c0458 <__aeabi_dcmple>
   beac2:	b908      	cbnz	r0, beac8 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   beac4:	4947      	ldr	r1, [pc, #284]	; (bebe4 <_ZN5Print10printFloatEdh+0x174>)
   beac6:	e7e3      	b.n	bea90 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   beac8:	4b47      	ldr	r3, [pc, #284]	; (bebe8 <_ZN5Print10printFloatEdh+0x178>)
   beaca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   beace:	4620      	mov	r0, r4
   bead0:	4629      	mov	r1, r5
   bead2:	f001 fcd5 	bl	c0480 <__aeabi_dcmpgt>
   bead6:	b108      	cbz	r0, beadc <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bead8:	4944      	ldr	r1, [pc, #272]	; (bebec <_ZN5Print10printFloatEdh+0x17c>)
   beada:	e7d9      	b.n	bea90 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   beadc:	4b44      	ldr	r3, [pc, #272]	; (bebf0 <_ZN5Print10printFloatEdh+0x180>)
   beade:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   beae2:	4620      	mov	r0, r4
   beae4:	4629      	mov	r1, r5
   beae6:	f001 fcad 	bl	c0444 <__aeabi_dcmplt>
   beaea:	2800      	cmp	r0, #0
   beaec:	d1f4      	bne.n	bead8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   beaee:	2200      	movs	r2, #0
   beaf0:	2300      	movs	r3, #0
   beaf2:	4620      	mov	r0, r4
   beaf4:	4629      	mov	r1, r5
   beaf6:	f001 fca5 	bl	c0444 <__aeabi_dcmplt>
   beafa:	b1d0      	cbz	r0, beb32 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   beafc:	212d      	movs	r1, #45	; 0x2d
   beafe:	4630      	mov	r0, r6
   beb00:	f7ff ff88 	bl	bea14 <_ZN5Print5printEc>
     number = -number;
   beb04:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   beb08:	4682      	mov	sl, r0
     number = -number;
   beb0a:	461d      	mov	r5, r3
  double rounding = 0.5;
   beb0c:	4939      	ldr	r1, [pc, #228]	; (bebf4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   beb0e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bebfc <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   beb12:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   beb16:	2000      	movs	r0, #0
    rounding /= 10.0;
   beb18:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   beb1c:	fa5f f38b 	uxtb.w	r3, fp
   beb20:	429f      	cmp	r7, r3
   beb22:	d908      	bls.n	beb36 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   beb24:	4642      	mov	r2, r8
   beb26:	464b      	mov	r3, r9
   beb28:	f001 fb44 	bl	c01b4 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   beb2c:	f10b 0b01 	add.w	fp, fp, #1
   beb30:	e7f4      	b.n	beb1c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   beb32:	4682      	mov	sl, r0
   beb34:	e7ea      	b.n	beb0c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   beb36:	4622      	mov	r2, r4
   beb38:	462b      	mov	r3, r5
   beb3a:	f001 f85b 	bl	bfbf4 <__adddf3>
   beb3e:	460d      	mov	r5, r1
   beb40:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   beb42:	f001 fce5 	bl	c0510 <__aeabi_d2uiz>
   beb46:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   beb48:	f001 f990 	bl	bfe6c <__aeabi_ui2d>
   beb4c:	4602      	mov	r2, r0
   beb4e:	460b      	mov	r3, r1
   beb50:	4620      	mov	r0, r4
   beb52:	4629      	mov	r1, r5
   beb54:	f001 f84c 	bl	bfbf0 <__aeabi_dsub>
        return printNumber(val, base) + t;
   beb58:	220a      	movs	r2, #10
   beb5a:	4604      	mov	r4, r0
   beb5c:	460d      	mov	r5, r1
   beb5e:	4630      	mov	r0, r6
   beb60:	4641      	mov	r1, r8
   beb62:	f7ff ff66 	bl	bea32 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   beb66:	4482      	add	sl, r0
  if (digits > 0) {
   beb68:	2f00      	cmp	r7, #0
   beb6a:	d095      	beq.n	bea98 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   beb6c:	4922      	ldr	r1, [pc, #136]	; (bebf8 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   beb6e:	f8df 908c 	ldr.w	r9, [pc, #140]	; bebfc <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   beb72:	4630      	mov	r0, r6
   beb74:	f7ff ff38 	bl	be9e8 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   beb78:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   beb7c:	4482      	add	sl, r0
  while (digits-- > 0)
   beb7e:	2f00      	cmp	r7, #0
   beb80:	d08a      	beq.n	bea98 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   beb82:	4642      	mov	r2, r8
   beb84:	464b      	mov	r3, r9
   beb86:	4620      	mov	r0, r4
   beb88:	4629      	mov	r1, r5
   beb8a:	f001 f9e9 	bl	bff60 <__aeabi_dmul>
   beb8e:	4604      	mov	r4, r0
   beb90:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   beb92:	f001 fc95 	bl	c04c0 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   beb96:	f1b0 0b00 	subs.w	fp, r0, #0
   beb9a:	da1c      	bge.n	bebd6 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   beb9c:	212d      	movs	r1, #45	; 0x2d
   beb9e:	4630      	mov	r0, r6
   beba0:	f7ff ff38 	bl	bea14 <_ZN5Print5printEc>
            val = -n;
   beba4:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   beba8:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bebaa:	220a      	movs	r2, #10
   bebac:	4630      	mov	r0, r6
   bebae:	9301      	str	r3, [sp, #4]
   bebb0:	f7ff ff3f 	bl	bea32 <_ZN5Print11printNumberEmh>
   bebb4:	9b01      	ldr	r3, [sp, #4]
   bebb6:	4418      	add	r0, r3
    n += print(toPrint);
   bebb8:	4482      	add	sl, r0
    remainder -= toPrint;
   bebba:	4658      	mov	r0, fp
   bebbc:	f001 f966 	bl	bfe8c <__aeabi_i2d>
   bebc0:	4602      	mov	r2, r0
   bebc2:	460b      	mov	r3, r1
   bebc4:	4620      	mov	r0, r4
   bebc6:	4629      	mov	r1, r5
   bebc8:	f001 f812 	bl	bfbf0 <__aeabi_dsub>
   bebcc:	3f01      	subs	r7, #1
   bebce:	4604      	mov	r4, r0
   bebd0:	460d      	mov	r5, r1
   bebd2:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bebd4:	e7d3      	b.n	beb7e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bebd6:	4659      	mov	r1, fp
        size_t t = 0;
   bebd8:	2300      	movs	r3, #0
   bebda:	e7e6      	b.n	bebaa <_ZN5Print10printFloatEdh+0x13a>
   bebdc:	000c25d0 	.word	0x000c25d0
   bebe0:	7fefffff 	.word	0x7fefffff
   bebe4:	000c25d4 	.word	0x000c25d4
   bebe8:	41efffff 	.word	0x41efffff
   bebec:	000c25d8 	.word	0x000c25d8
   bebf0:	c1efffff 	.word	0xc1efffff
   bebf4:	3fe00000 	.word	0x3fe00000
   bebf8:	000c2610 	.word	0x000c2610
   bebfc:	40240000 	.word	0x40240000

000bec00 <_ZN5Print5printEfi>:
{
   bec00:	b538      	push	{r3, r4, r5, lr}
   bec02:	4604      	mov	r4, r0
   bec04:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bec08:	b2cd      	uxtb	r5, r1
   bec0a:	f001 f951 	bl	bfeb0 <__aeabi_f2d>
   bec0e:	ec41 0b10 	vmov	d0, r0, r1
   bec12:	4629      	mov	r1, r5
   bec14:	4620      	mov	r0, r4
}
   bec16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bec1a:	f7ff bf29 	b.w	bea70 <_ZN5Print10printFloatEdh>

000bec1e <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bec1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bec22:	b086      	sub	sp, #24
   bec24:	af00      	add	r7, sp, #0
   bec26:	4605      	mov	r5, r0
   bec28:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bec2a:	1d38      	adds	r0, r7, #4
   bec2c:	2114      	movs	r1, #20
{
   bec2e:	4614      	mov	r4, r2
    va_copy(args2, args);
   bec30:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bec32:	f7fd fdc3 	bl	bc7bc <vsnprintf>

    if (n<bufsize)
   bec36:	2813      	cmp	r0, #19
   bec38:	d80e      	bhi.n	bec58 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bec3a:	1d39      	adds	r1, r7, #4
   bec3c:	4628      	mov	r0, r5
   bec3e:	f7ff fed3 	bl	be9e8 <_ZN5Print5writeEPKc>
   bec42:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bec44:	b11e      	cbz	r6, bec4e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bec46:	4628      	mov	r0, r5
   bec48:	f7ff fee7 	bl	bea1a <_ZN5Print7printlnEv>
   bec4c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bec4e:	4620      	mov	r0, r4
   bec50:	3718      	adds	r7, #24
   bec52:	46bd      	mov	sp, r7
   bec54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bec58:	f100 0308 	add.w	r3, r0, #8
   bec5c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bec60:	46e8      	mov	r8, sp
        char bigger[n+1];
   bec62:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bec66:	4622      	mov	r2, r4
   bec68:	1c41      	adds	r1, r0, #1
   bec6a:	683b      	ldr	r3, [r7, #0]
   bec6c:	4668      	mov	r0, sp
   bec6e:	f7fd fda5 	bl	bc7bc <vsnprintf>
  return write(str);
   bec72:	4669      	mov	r1, sp
   bec74:	4628      	mov	r0, r5
   bec76:	f7ff feb7 	bl	be9e8 <_ZN5Print5writeEPKc>
   bec7a:	4604      	mov	r4, r0
   bec7c:	46c5      	mov	sp, r8
   bec7e:	e7e1      	b.n	bec44 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bec80 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bec80:	b510      	push	{r4, lr}
  if (0 == max) {
   bec82:	4604      	mov	r4, r0
   bec84:	b128      	cbz	r0, bec92 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bec86:	f001 fd13 	bl	c06b0 <rand>
   bec8a:	fb90 f3f4 	sdiv	r3, r0, r4
   bec8e:	fb03 0414 	mls	r4, r3, r4, r0
}
   bec92:	4620      	mov	r0, r4
   bec94:	bd10      	pop	{r4, pc}

000bec96 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bec96:	4288      	cmp	r0, r1
{
   bec98:	b510      	push	{r4, lr}
   bec9a:	4604      	mov	r4, r0
  if (min >= max) {
   bec9c:	da03      	bge.n	beca6 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bec9e:	1a08      	subs	r0, r1, r0
   beca0:	f7ff ffee 	bl	bec80 <_Z6randomi>
   beca4:	4404      	add	r4, r0
}
   beca6:	4620      	mov	r0, r4
   beca8:	bd10      	pop	{r4, pc}
	...

000becac <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   becac:	4b01      	ldr	r3, [pc, #4]	; (becb4 <_GLOBAL__sub_I_RGB+0x8>)
   becae:	2200      	movs	r2, #0
   becb0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   becb2:	4770      	bx	lr
   becb4:	2003e688 	.word	0x2003e688

000becb8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   becb8:	2100      	movs	r1, #0
   becba:	f7fd bae3 	b.w	bc284 <hal_spi_release>

000becbe <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   becbe:	2100      	movs	r1, #0
   becc0:	f7fd bad8 	b.w	bc274 <hal_spi_acquire>

000becc4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   becc4:	b510      	push	{r4, lr}
   becc6:	4604      	mov	r4, r0
   becc8:	4608      	mov	r0, r1
{
    _spi = spi;
   becca:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   beccc:	f7fd fab2 	bl	bc234 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   becd0:	2300      	movs	r3, #0
   becd2:	6063      	str	r3, [r4, #4]
}
   becd4:	4620      	mov	r0, r4
   becd6:	bd10      	pop	{r4, pc}

000becd8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   becd8:	b513      	push	{r0, r1, r4, lr}
   becda:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   becdc:	7800      	ldrb	r0, [r0, #0]
   becde:	f7ff ffee 	bl	becbe <_ZN8SPIClass4lockEv.isra.0>
   bece2:	b958      	cbnz	r0, becfc <_ZN8SPIClass5beginEv+0x24>
   bece4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bece6:	9001      	str	r0, [sp, #4]
   bece8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   becec:	f7fd fa8a 	bl	bc204 <hal_spi_begin>
        unlock();
   becf0:	9801      	ldr	r0, [sp, #4]
    }
}
   becf2:	b002      	add	sp, #8
   becf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   becf8:	f7ff bfde 	b.w	becb8 <_ZN8SPIClass6unlockEv.isra.0>
   becfc:	b002      	add	sp, #8
   becfe:	bd10      	pop	{r4, pc}

000bed00 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bed00:	b513      	push	{r0, r1, r4, lr}
   bed02:	4604      	mov	r4, r0
    if (!lock())
   bed04:	7800      	ldrb	r0, [r0, #0]
   bed06:	f7ff ffda 	bl	becbe <_ZN8SPIClass4lockEv.isra.0>
   bed0a:	b948      	cbnz	r0, bed20 <_ZN8SPIClass3endEv+0x20>
   bed0c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bed0e:	9001      	str	r0, [sp, #4]
   bed10:	f7fd fa80 	bl	bc214 <hal_spi_end>
        unlock();
   bed14:	9801      	ldr	r0, [sp, #4]
    }
}
   bed16:	b002      	add	sp, #8
   bed18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bed1c:	f7ff bfcc 	b.w	becb8 <_ZN8SPIClass6unlockEv.isra.0>
   bed20:	b002      	add	sp, #8
   bed22:	bd10      	pop	{r4, pc}

000bed24 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bed24:	7800      	ldrb	r0, [r0, #0]
   bed26:	f7ff bfc7 	b.w	becb8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bed2c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bed2c:	0840      	lsrs	r0, r0, #1
{
   bed2e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bed30:	6018      	str	r0, [r3, #0]
   bed32:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bed34:	6818      	ldr	r0, [r3, #0]
   bed36:	4288      	cmp	r0, r1
   bed38:	b2e5      	uxtb	r5, r4
   bed3a:	d906      	bls.n	bed4a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bed3c:	3401      	adds	r4, #1
   bed3e:	2c08      	cmp	r4, #8
   bed40:	d002      	beq.n	bed48 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bed42:	0840      	lsrs	r0, r0, #1
   bed44:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bed46:	e7f5      	b.n	bed34 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bed48:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bed4a:	4b02      	ldr	r3, [pc, #8]	; (bed54 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bed4c:	5d5b      	ldrb	r3, [r3, r5]
   bed4e:	7013      	strb	r3, [r2, #0]
}
   bed50:	bd30      	pop	{r4, r5, pc}
   bed52:	bf00      	nop
   bed54:	000c25dc 	.word	0x000c25dc

000bed58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bed58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bed5c:	4606      	mov	r6, r0
   bed5e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bed60:	7800      	ldrb	r0, [r0, #0]
{
   bed62:	460c      	mov	r4, r1
    CHECK(lock());
   bed64:	f7ff ffab 	bl	becbe <_ZN8SPIClass4lockEv.isra.0>
   bed68:	2800      	cmp	r0, #0
   bed6a:	db1b      	blt.n	beda4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bed6c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bed6e:	2214      	movs	r2, #20
   bed70:	2100      	movs	r1, #0
   bed72:	a809      	add	r0, sp, #36	; 0x24
   bed74:	f001 fc66 	bl	c0644 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bed78:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bed7a:	2200      	movs	r2, #0
   bed7c:	a909      	add	r1, sp, #36	; 0x24
   bed7e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bed80:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bed84:	f7fd fa66 	bl	bc254 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bed88:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bed8c:	b113      	cbz	r3, bed94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bed8e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bed92:	b155      	cbz	r5, bedaa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bed94:	2700      	movs	r7, #0
   bed96:	46b9      	mov	r9, r7
   bed98:	46b8      	mov	r8, r7
   bed9a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bed9c:	7923      	ldrb	r3, [r4, #4]
   bed9e:	b15d      	cbz	r5, bedb8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   beda0:	b1c3      	cbz	r3, bedd4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   beda2:	2000      	movs	r0, #0
}
   beda4:	b00f      	add	sp, #60	; 0x3c
   beda6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bedaa:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bedae:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bedb2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bedb6:	e7f1      	b.n	bed9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bedb8:	2b00      	cmp	r3, #0
   bedba:	d135      	bne.n	bee28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bedbc:	68a3      	ldr	r3, [r4, #8]
   bedbe:	4543      	cmp	r3, r8
   bedc0:	d108      	bne.n	bedd4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bedc2:	f88d 9020 	strb.w	r9, [sp, #32]
   bedc6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bedca:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bedce:	89a3      	ldrh	r3, [r4, #12]
   bedd0:	429a      	cmp	r2, r3
   bedd2:	d0e6      	beq.n	beda2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bedd4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bedd6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bedd8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   beddc:	980a      	ldr	r0, [sp, #40]	; 0x28
   bedde:	ab04      	add	r3, sp, #16
   bede0:	f10d 020f 	add.w	r2, sp, #15
   bede4:	f7ff ffa2 	bl	bed2c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bede8:	7921      	ldrb	r1, [r4, #4]
   bedea:	b985      	cbnz	r5, bee0e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bedec:	b989      	cbnz	r1, bee12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bedee:	68a3      	ldr	r3, [r4, #8]
   bedf0:	4543      	cmp	r3, r8
   bedf2:	d30e      	bcc.n	bee12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bedf4:	f88d 9020 	strb.w	r9, [sp, #32]
   bedf8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bedfc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bee00:	89a3      	ldrh	r3, [r4, #12]
   bee02:	429a      	cmp	r2, r3
   bee04:	d105      	bne.n	bee12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bee06:	9b04      	ldr	r3, [sp, #16]
   bee08:	4543      	cmp	r3, r8
   bee0a:	d102      	bne.n	bee12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bee0c:	e7c9      	b.n	beda2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bee0e:	2900      	cmp	r1, #0
   bee10:	d1f9      	bne.n	bee06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bee12:	2300      	movs	r3, #0
   bee14:	9301      	str	r3, [sp, #4]
   bee16:	7b63      	ldrb	r3, [r4, #13]
   bee18:	9300      	str	r3, [sp, #0]
   bee1a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bee1e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bee20:	7830      	ldrb	r0, [r6, #0]
   bee22:	f7fd fa1f 	bl	bc264 <hal_spi_set_settings>
   bee26:	e7bc      	b.n	beda2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bee28:	e9cd 5500 	strd	r5, r5, [sp]
   bee2c:	462b      	mov	r3, r5
   bee2e:	462a      	mov	r2, r5
   bee30:	2101      	movs	r1, #1
   bee32:	e7f5      	b.n	bee20 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bee34 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bee34:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bee36:	7800      	ldrb	r0, [r0, #0]
   bee38:	f7fd f9f4 	bl	bc224 <hal_spi_transfer>
}
   bee3c:	b2c0      	uxtb	r0, r0
   bee3e:	bd08      	pop	{r3, pc}

000bee40 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bee40:	4770      	bx	lr

000bee42 <_ZN8SPIClass15detachInterruptEv>:
   bee42:	4770      	bx	lr

000bee44 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bee44:	b510      	push	{r4, lr}
   bee46:	4604      	mov	r4, r0
{
	free(buffer);
   bee48:	6800      	ldr	r0, [r0, #0]
   bee4a:	f7fd fc8f 	bl	bc76c <free>
}
   bee4e:	4620      	mov	r0, r4
   bee50:	bd10      	pop	{r4, pc}

000bee52 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bee52:	b510      	push	{r4, lr}
   bee54:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bee56:	6800      	ldr	r0, [r0, #0]
   bee58:	b108      	cbz	r0, bee5e <_ZN6String10invalidateEv+0xc>
   bee5a:	f7fd fc87 	bl	bc76c <free>
	buffer = NULL;
   bee5e:	2300      	movs	r3, #0
	capacity = len = 0;
   bee60:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bee64:	6023      	str	r3, [r4, #0]
}
   bee66:	bd10      	pop	{r4, pc}

000bee68 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bee68:	b538      	push	{r3, r4, r5, lr}
   bee6a:	4604      	mov	r4, r0
   bee6c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bee6e:	6800      	ldr	r0, [r0, #0]
   bee70:	3101      	adds	r1, #1
   bee72:	f7fd fc83 	bl	bc77c <realloc>
	if (newbuffer) {
   bee76:	b110      	cbz	r0, bee7e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bee78:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bee7c:	2001      	movs	r0, #1
	}
	return 0;
}
   bee7e:	bd38      	pop	{r3, r4, r5, pc}

000bee80 <_ZN6String7reserveEj>:
{
   bee80:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bee82:	6803      	ldr	r3, [r0, #0]
{
   bee84:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bee86:	b123      	cbz	r3, bee92 <_ZN6String7reserveEj+0x12>
   bee88:	6843      	ldr	r3, [r0, #4]
   bee8a:	428b      	cmp	r3, r1
   bee8c:	d301      	bcc.n	bee92 <_ZN6String7reserveEj+0x12>
   bee8e:	2001      	movs	r0, #1
}
   bee90:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bee92:	4620      	mov	r0, r4
   bee94:	f7ff ffe8 	bl	bee68 <_ZN6String12changeBufferEj>
   bee98:	2800      	cmp	r0, #0
   bee9a:	d0f9      	beq.n	bee90 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bee9c:	68a3      	ldr	r3, [r4, #8]
   bee9e:	2b00      	cmp	r3, #0
   beea0:	d1f5      	bne.n	bee8e <_ZN6String7reserveEj+0xe>
   beea2:	6822      	ldr	r2, [r4, #0]
   beea4:	7013      	strb	r3, [r2, #0]
   beea6:	e7f2      	b.n	bee8e <_ZN6String7reserveEj+0xe>

000beea8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   beea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   beeaa:	460d      	mov	r5, r1
	if (!reserve(length)) {
   beeac:	4611      	mov	r1, r2
   beeae:	9201      	str	r2, [sp, #4]
{
   beeb0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   beeb2:	f7ff ffe5 	bl	bee80 <_ZN6String7reserveEj>
   beeb6:	9a01      	ldr	r2, [sp, #4]
   beeb8:	b928      	cbnz	r0, beec6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   beeba:	4620      	mov	r0, r4
   beebc:	f7ff ffc9 	bl	bee52 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   beec0:	4620      	mov	r0, r4
   beec2:	b003      	add	sp, #12
   beec4:	bd30      	pop	{r4, r5, pc}
	len = length;
   beec6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   beec8:	4629      	mov	r1, r5
   beeca:	6820      	ldr	r0, [r4, #0]
   beecc:	f001 fb92 	bl	c05f4 <memcpy>
	buffer[len] = 0;
   beed0:	6822      	ldr	r2, [r4, #0]
   beed2:	68a3      	ldr	r3, [r4, #8]
   beed4:	2100      	movs	r1, #0
   beed6:	54d1      	strb	r1, [r2, r3]
	return *this;
   beed8:	e7f2      	b.n	beec0 <_ZN6String4copyEPKcj+0x18>

000beeda <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   beeda:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   beedc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   beede:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   beee2:	4604      	mov	r4, r0
	len = 0;
   beee4:	6083      	str	r3, [r0, #8]
	flags = 0;
   beee6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   beee8:	b141      	cbz	r1, beefc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   beeea:	4608      	mov	r0, r1
   beeec:	9101      	str	r1, [sp, #4]
   beeee:	f001 fc64 	bl	c07ba <strlen>
   beef2:	9901      	ldr	r1, [sp, #4]
   beef4:	4602      	mov	r2, r0
   beef6:	4620      	mov	r0, r4
   beef8:	f7ff ffd6 	bl	beea8 <_ZN6String4copyEPKcj>
}
   beefc:	4620      	mov	r0, r4
   beefe:	b002      	add	sp, #8
   bef00:	bd10      	pop	{r4, pc}

000bef02 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bef02:	b538      	push	{r3, r4, r5, lr}
   bef04:	4605      	mov	r5, r0
	if (buffer) {
   bef06:	6800      	ldr	r0, [r0, #0]
{
   bef08:	460c      	mov	r4, r1
	if (buffer) {
   bef0a:	b168      	cbz	r0, bef28 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bef0c:	686a      	ldr	r2, [r5, #4]
   bef0e:	688b      	ldr	r3, [r1, #8]
   bef10:	429a      	cmp	r2, r3
   bef12:	d307      	bcc.n	bef24 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bef14:	6809      	ldr	r1, [r1, #0]
   bef16:	f001 fc2a 	bl	c076e <strcpy>
			len = rhs.len;
   bef1a:	68a3      	ldr	r3, [r4, #8]
   bef1c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bef1e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bef20:	60a3      	str	r3, [r4, #8]
}
   bef22:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bef24:	f7fd fc22 	bl	bc76c <free>
	buffer = rhs.buffer;
   bef28:	6823      	ldr	r3, [r4, #0]
   bef2a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bef2c:	6863      	ldr	r3, [r4, #4]
   bef2e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bef30:	68a3      	ldr	r3, [r4, #8]
   bef32:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bef34:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bef36:	e9c4 3300 	strd	r3, r3, [r4]
   bef3a:	e7f1      	b.n	bef20 <_ZN6String4moveERS_+0x1e>

000bef3c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bef3c:	b510      	push	{r4, lr}
	buffer = NULL;
   bef3e:	2300      	movs	r3, #0
	capacity = 0;
   bef40:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bef44:	4604      	mov	r4, r0
	len = 0;
   bef46:	6083      	str	r3, [r0, #8]
	flags = 0;
   bef48:	7303      	strb	r3, [r0, #12]
	move(rval);
   bef4a:	f7ff ffda 	bl	bef02 <_ZN6String4moveERS_>
}
   bef4e:	4620      	mov	r0, r4
   bef50:	bd10      	pop	{r4, pc}

000bef52 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bef52:	4288      	cmp	r0, r1
{
   bef54:	b510      	push	{r4, lr}
   bef56:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bef58:	d005      	beq.n	bef66 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bef5a:	680b      	ldr	r3, [r1, #0]
   bef5c:	b12b      	cbz	r3, bef6a <_ZN6StringaSERKS_+0x18>
   bef5e:	688a      	ldr	r2, [r1, #8]
   bef60:	4619      	mov	r1, r3
   bef62:	f7ff ffa1 	bl	beea8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bef66:	4620      	mov	r0, r4
   bef68:	bd10      	pop	{r4, pc}
	else invalidate();
   bef6a:	f7ff ff72 	bl	bee52 <_ZN6String10invalidateEv>
   bef6e:	e7fa      	b.n	bef66 <_ZN6StringaSERKS_+0x14>

000bef70 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bef70:	b510      	push	{r4, lr}
	buffer = NULL;
   bef72:	2300      	movs	r3, #0
String::String(const String &value)
   bef74:	4604      	mov	r4, r0
	capacity = 0;
   bef76:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bef7a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bef7c:	7303      	strb	r3, [r0, #12]
	*this = value;
   bef7e:	f7ff ffe8 	bl	bef52 <_ZN6StringaSERKS_>
}
   bef82:	4620      	mov	r0, r4
   bef84:	bd10      	pop	{r4, pc}

000bef86 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bef86:	4288      	cmp	r0, r1
{
   bef88:	b510      	push	{r4, lr}
   bef8a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bef8c:	d001      	beq.n	bef92 <_ZN6StringaSEOS_+0xc>
   bef8e:	f7ff ffb8 	bl	bef02 <_ZN6String4moveERS_>
	return *this;
}
   bef92:	4620      	mov	r0, r4
   bef94:	bd10      	pop	{r4, pc}

000bef96 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bef96:	b513      	push	{r0, r1, r4, lr}
   bef98:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bef9a:	b159      	cbz	r1, befb4 <_ZN6StringaSEPKc+0x1e>
   bef9c:	4608      	mov	r0, r1
   bef9e:	9101      	str	r1, [sp, #4]
   befa0:	f001 fc0b 	bl	c07ba <strlen>
   befa4:	9901      	ldr	r1, [sp, #4]
   befa6:	4602      	mov	r2, r0
   befa8:	4620      	mov	r0, r4
   befaa:	f7ff ff7d 	bl	beea8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   befae:	4620      	mov	r0, r4
   befb0:	b002      	add	sp, #8
   befb2:	bd10      	pop	{r4, pc}
	else invalidate();
   befb4:	f7ff ff4d 	bl	bee52 <_ZN6String10invalidateEv>
   befb8:	e7f9      	b.n	befae <_ZN6StringaSEPKc+0x18>

000befba <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   befba:	b570      	push	{r4, r5, r6, lr}
   befbc:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   befbe:	460e      	mov	r6, r1
   befc0:	b909      	cbnz	r1, befc6 <_ZN6String6concatEPKcj+0xc>
   befc2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   befc4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   befc6:	b16a      	cbz	r2, befe4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   befc8:	6884      	ldr	r4, [r0, #8]
   befca:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   befcc:	4621      	mov	r1, r4
   befce:	f7ff ff57 	bl	bee80 <_ZN6String7reserveEj>
   befd2:	2800      	cmp	r0, #0
   befd4:	d0f5      	beq.n	befc2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   befd6:	6828      	ldr	r0, [r5, #0]
   befd8:	68ab      	ldr	r3, [r5, #8]
   befda:	4631      	mov	r1, r6
   befdc:	4418      	add	r0, r3
   befde:	f001 fbc6 	bl	c076e <strcpy>
	len = newlen;
   befe2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   befe4:	2001      	movs	r0, #1
   befe6:	e7ed      	b.n	befc4 <_ZN6String6concatEPKcj+0xa>

000befe8 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   befe8:	b513      	push	{r0, r1, r4, lr}
   befea:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   befec:	4608      	mov	r0, r1
	if (!cstr) return 0;
   befee:	b151      	cbz	r1, bf006 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   beff0:	9101      	str	r1, [sp, #4]
   beff2:	f001 fbe2 	bl	c07ba <strlen>
   beff6:	9901      	ldr	r1, [sp, #4]
   beff8:	4602      	mov	r2, r0
   beffa:	4620      	mov	r0, r4
}
   beffc:	b002      	add	sp, #8
   beffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   bf002:	f7ff bfda 	b.w	befba <_ZN6String6concatEPKcj>
}
   bf006:	b002      	add	sp, #8
   bf008:	bd10      	pop	{r4, pc}

000bf00a <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bf00a:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bf00c:	2300      	movs	r3, #0
	buf[0] = c;
   bf00e:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bf012:	2201      	movs	r2, #1
   bf014:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bf016:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bf01a:	f7ff ffce 	bl	befba <_ZN6String6concatEPKcj>
}
   bf01e:	b003      	add	sp, #12
   bf020:	f85d fb04 	ldr.w	pc, [sp], #4

000bf024 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bf024:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bf026:	688a      	ldr	r2, [r1, #8]
   bf028:	6809      	ldr	r1, [r1, #0]
{
   bf02a:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bf02c:	f7ff ffc5 	bl	befba <_ZN6String6concatEPKcj>
   bf030:	b910      	cbnz	r0, bf038 <_ZplRK15StringSumHelperRK6String+0x14>
   bf032:	4620      	mov	r0, r4
   bf034:	f7ff ff0d 	bl	bee52 <_ZN6String10invalidateEv>
	return a;
}
   bf038:	4620      	mov	r0, r4
   bf03a:	bd10      	pop	{r4, pc}

000bf03c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   bf03c:	b513      	push	{r0, r1, r4, lr}
   bf03e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bf040:	b929      	cbnz	r1, bf04e <_ZplRK15StringSumHelperPKc+0x12>
   bf042:	4620      	mov	r0, r4
   bf044:	f7ff ff05 	bl	bee52 <_ZN6String10invalidateEv>
	return a;
}
   bf048:	4620      	mov	r0, r4
   bf04a:	b002      	add	sp, #8
   bf04c:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bf04e:	4608      	mov	r0, r1
   bf050:	9101      	str	r1, [sp, #4]
   bf052:	f001 fbb2 	bl	c07ba <strlen>
   bf056:	9901      	ldr	r1, [sp, #4]
   bf058:	4602      	mov	r2, r0
   bf05a:	4620      	mov	r0, r4
   bf05c:	f7ff ffad 	bl	befba <_ZN6String6concatEPKcj>
   bf060:	2800      	cmp	r0, #0
   bf062:	d0ee      	beq.n	bf042 <_ZplRK15StringSumHelperPKc+0x6>
   bf064:	e7f0      	b.n	bf048 <_ZplRK15StringSumHelperPKc+0xc>

000bf066 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bf066:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bf068:	6882      	ldr	r2, [r0, #8]
   bf06a:	b93a      	cbnz	r2, bf07c <_ZNK6String6equalsEPKc+0x16>
   bf06c:	b121      	cbz	r1, bf078 <_ZNK6String6equalsEPKc+0x12>
   bf06e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bf070:	fab0 f080 	clz	r0, r0
   bf074:	0940      	lsrs	r0, r0, #5
   bf076:	e000      	b.n	bf07a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bf078:	2001      	movs	r0, #1
}
   bf07a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bf07c:	6800      	ldr	r0, [r0, #0]
   bf07e:	b909      	cbnz	r1, bf084 <_ZNK6String6equalsEPKc+0x1e>
   bf080:	7800      	ldrb	r0, [r0, #0]
   bf082:	e7f5      	b.n	bf070 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bf084:	f001 fb69 	bl	c075a <strcmp>
   bf088:	e7f2      	b.n	bf070 <_ZNK6String6equalsEPKc+0xa>

000bf08a <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   bf08a:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bf08c:	6883      	ldr	r3, [r0, #8]
   bf08e:	688a      	ldr	r2, [r1, #8]
   bf090:	4293      	cmp	r3, r2
   bf092:	d30b      	bcc.n	bf0ac <_ZNK6String8endsWithERKS_+0x22>
   bf094:	6800      	ldr	r0, [r0, #0]
   bf096:	b140      	cbz	r0, bf0aa <_ZNK6String8endsWithERKS_+0x20>
   bf098:	6809      	ldr	r1, [r1, #0]
   bf09a:	b149      	cbz	r1, bf0b0 <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bf09c:	1a9b      	subs	r3, r3, r2
   bf09e:	4418      	add	r0, r3
   bf0a0:	f001 fb5b 	bl	c075a <strcmp>
   bf0a4:	fab0 f080 	clz	r0, r0
   bf0a8:	0940      	lsrs	r0, r0, #5
}
   bf0aa:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bf0ac:	2000      	movs	r0, #0
   bf0ae:	e7fc      	b.n	bf0aa <_ZNK6String8endsWithERKS_+0x20>
   bf0b0:	4608      	mov	r0, r1
   bf0b2:	e7fa      	b.n	bf0aa <_ZNK6String8endsWithERKS_+0x20>

000bf0b4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bf0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bf0b6:	429a      	cmp	r2, r3
{
   bf0b8:	460f      	mov	r7, r1
   bf0ba:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bf0bc:	490c      	ldr	r1, [pc, #48]	; (bf0f0 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bf0be:	bf88      	it	hi
   bf0c0:	4613      	movhi	r3, r2
{
   bf0c2:	4614      	mov	r4, r2
   bf0c4:	4606      	mov	r6, r0
	if (left > right) {
   bf0c6:	bf84      	itt	hi
   bf0c8:	462c      	movhi	r4, r5
   bf0ca:	461d      	movhi	r5, r3
	String out;
   bf0cc:	f7ff ff05 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bf0d0:	68bb      	ldr	r3, [r7, #8]
   bf0d2:	42a3      	cmp	r3, r4
   bf0d4:	d30a      	bcc.n	bf0ec <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bf0d6:	6839      	ldr	r1, [r7, #0]
   bf0d8:	42ab      	cmp	r3, r5
   bf0da:	bf94      	ite	ls
   bf0dc:	ebc4 0203 	rsbls	r2, r4, r3
   bf0e0:	ebc4 0205 	rsbhi	r2, r4, r5
   bf0e4:	4421      	add	r1, r4
   bf0e6:	4630      	mov	r0, r6
   bf0e8:	f7ff fede 	bl	beea8 <_ZN6String4copyEPKcj>
	return out;
}
   bf0ec:	4630      	mov	r0, r6
   bf0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bf0f0:	000c2508 	.word	0x000c2508

000bf0f4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bf0f4:	b40e      	push	{r1, r2, r3}
   bf0f6:	b570      	push	{r4, r5, r6, lr}
   bf0f8:	b087      	sub	sp, #28
   bf0fa:	ad0b      	add	r5, sp, #44	; 0x2c
   bf0fc:	4604      	mov	r4, r0
   bf0fe:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bf102:	9201      	str	r2, [sp, #4]
   bf104:	462b      	mov	r3, r5
   bf106:	2105      	movs	r1, #5
   bf108:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bf10a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bf10c:	f7fd fb56 	bl	bc7bc <vsnprintf>
    va_end(marker);

    String result;
   bf110:	490b      	ldr	r1, [pc, #44]	; (bf140 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bf112:	4606      	mov	r6, r0
    String result;
   bf114:	4620      	mov	r0, r4
   bf116:	f7ff fee0 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bf11a:	4631      	mov	r1, r6
   bf11c:	4620      	mov	r0, r4
   bf11e:	f7ff feaf 	bl	bee80 <_ZN6String7reserveEj>
    if (result.buffer) {
   bf122:	6820      	ldr	r0, [r4, #0]
   bf124:	b130      	cbz	r0, bf134 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bf126:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bf128:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bf12a:	462b      	mov	r3, r5
   bf12c:	1c71      	adds	r1, r6, #1
   bf12e:	f7fd fb45 	bl	bc7bc <vsnprintf>
        va_end(marker);
        result.len = n;
   bf132:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bf134:	4620      	mov	r0, r4
   bf136:	b007      	add	sp, #28
   bf138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bf13c:	b003      	add	sp, #12
   bf13e:	4770      	bx	lr
   bf140:	000c2508 	.word	0x000c2508

000bf144 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bf144:	b510      	push	{r4, lr}
   bf146:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bf148:	6800      	ldr	r0, [r0, #0]
   bf14a:	b118      	cbz	r0, bf154 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bf14c:	f7fd fb0e 	bl	bc76c <free>
            wakeupSource_ = nullptr;
   bf150:	2300      	movs	r3, #0
   bf152:	6023      	str	r3, [r4, #0]
        }
    }
   bf154:	bd10      	pop	{r4, pc}

000bf156 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bf156:	b538      	push	{r3, r4, r5, lr}
   bf158:	460c      	mov	r4, r1
   bf15a:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bf15c:	f7ff fff2 	bl	bf144 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bf160:	b154      	cbz	r4, bf178 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bf162:	8820      	ldrh	r0, [r4, #0]
   bf164:	f7fd fafa 	bl	bc75c <malloc>
   bf168:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bf16a:	b128      	cbz	r0, bf178 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bf16c:	8822      	ldrh	r2, [r4, #0]
   bf16e:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bf170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bf174:	f001 ba3e 	b.w	c05f4 <memcpy>
    }
   bf178:	bd38      	pop	{r3, r4, r5, pc}

000bf17a <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bf17a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bf17c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bf180:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bf182:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bf186:	f8c0 3006 	str.w	r3, [r0, #6]
   bf18a:	894b      	ldrh	r3, [r1, #10]
   bf18c:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bf18e:	460c      	mov	r4, r1
   bf190:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bf192:	f7ff ffd7 	bl	bf144 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bf196:	6823      	ldr	r3, [r4, #0]
   bf198:	b113      	cbz	r3, bf1a0 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bf19a:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bf19c:	2300      	movs	r3, #0
   bf19e:	6023      	str	r3, [r4, #0]
    }
   bf1a0:	bd38      	pop	{r3, r4, r5, pc}

000bf1a2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bf1a2:	b507      	push	{r0, r1, r2, lr}
   bf1a4:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bf1a6:	2100      	movs	r1, #0
{
   bf1a8:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bf1aa:	9100      	str	r1, [sp, #0]
   bf1ac:	2001      	movs	r0, #1
   bf1ae:	218c      	movs	r1, #140	; 0x8c
   bf1b0:	f7fd fa0a 	bl	bc5c8 <system_reset>
}
   bf1b4:	b003      	add	sp, #12
   bf1b6:	f85d fb04 	ldr.w	pc, [sp], #4

000bf1ba <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bf1ba:	4601      	mov	r1, r0
    reset(0, flags);
   bf1bc:	2000      	movs	r0, #0
   bf1be:	f7ff bff0 	b.w	bf1a2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bf1c2 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bf1c2:	2000      	movs	r0, #0
   bf1c4:	f7ff bff9 	b.w	bf1ba <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bf1c8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bf1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf1ca:	4d2b      	ldr	r5, [pc, #172]	; (bf278 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bf1cc:	7d0b      	ldrb	r3, [r1, #20]
   bf1ce:	4604      	mov	r4, r0
   bf1d0:	b08b      	sub	sp, #44	; 0x2c
   bf1d2:	4608      	mov	r0, r1
   bf1d4:	1daf      	adds	r7, r5, #6
   bf1d6:	2b00      	cmp	r3, #0
   bf1d8:	d036      	beq.n	bf248 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bf1da:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bf1dc:	791b      	ldrb	r3, [r3, #4]
   bf1de:	2b00      	cmp	r3, #0
   bf1e0:	d032      	beq.n	bf248 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bf1e2:	4b26      	ldr	r3, [pc, #152]	; (bf27c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bf1e4:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bf1e6:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bf1e8:	a902      	add	r1, sp, #8
   bf1ea:	3004      	adds	r0, #4
   bf1ec:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bf1f0:	f7fd f9e0 	bl	bc5b4 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bf1f4:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bf1f8:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bf1fc:	b200      	sxth	r0, r0
   bf1fe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bf202:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bf206:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bf208:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bf20a:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bf20c:	4628      	mov	r0, r5
   bf20e:	f7ff ffa2 	bl	bf156 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bf212:	a802      	add	r0, sp, #8
   bf214:	f7ff ff96 	bl	bf144 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bf218:	2300      	movs	r3, #0
   bf21a:	6023      	str	r3, [r4, #0]
   bf21c:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bf21e:	71a3      	strb	r3, [r4, #6]
   bf220:	8123      	strh	r3, [r4, #8]
   bf222:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bf226:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bf228:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bf22c:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bf22e:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bf232:	f8c4 3006 	str.w	r3, [r4, #6]
   bf236:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bf238:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bf23a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bf23c:	4620      	mov	r0, r4
   bf23e:	f7ff ff8a 	bl	bf156 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bf242:	4620      	mov	r0, r4
   bf244:	b00b      	add	sp, #44	; 0x2c
   bf246:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bf248:	2600      	movs	r6, #0
   bf24a:	2320      	movs	r3, #32
   bf24c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bf250:	4b0b      	ldr	r3, [pc, #44]	; (bf280 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bf252:	9300      	str	r3, [sp, #0]
   bf254:	aa02      	add	r2, sp, #8
   bf256:	4633      	mov	r3, r6
   bf258:	490a      	ldr	r1, [pc, #40]	; (bf284 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bf25a:	2032      	movs	r0, #50	; 0x32
   bf25c:	f7fd f91a 	bl	bc494 <log_message>
            : wakeupSource_(nullptr),
   bf260:	4b06      	ldr	r3, [pc, #24]	; (bf27c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bf262:	4805      	ldr	r0, [pc, #20]	; (bf278 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bf264:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bf266:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bf26a:	a902      	add	r1, sp, #8
   bf26c:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bf270:	f7ff ff83 	bl	bf17a <_ZN17SystemSleepResultaSEOS_.isra.0>
   bf274:	e7cd      	b.n	bf212 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bf276:	bf00      	nop
   bf278:	2003e698 	.word	0x2003e698
   bf27c:	ffff0000 	.word	0xffff0000
   bf280:	000c25eb 	.word	0x000c25eb
   bf284:	000c25e4 	.word	0x000c25e4

000bf288 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bf288:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bf28a:	2420      	movs	r4, #32
{
   bf28c:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bf28e:	4622      	mov	r2, r4
   bf290:	2100      	movs	r1, #0
   bf292:	4668      	mov	r0, sp
   bf294:	f001 f9d6 	bl	c0644 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bf298:	2100      	movs	r1, #0
   bf29a:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bf29c:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bf2a0:	f7fc fea0 	bl	bbfe4 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bf2a4:	9801      	ldr	r0, [sp, #4]
   bf2a6:	b008      	add	sp, #32
   bf2a8:	bd10      	pop	{r4, pc}
	...

000bf2ac <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bf2ac:	4b05      	ldr	r3, [pc, #20]	; (bf2c4 <_GLOBAL__sub_I_System+0x18>)
   bf2ae:	2202      	movs	r2, #2
   bf2b0:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bf2b2:	4b05      	ldr	r3, [pc, #20]	; (bf2c8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bf2b4:	4a05      	ldr	r2, [pc, #20]	; (bf2cc <_GLOBAL__sub_I_System+0x20>)
   bf2b6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bf2b8:	2000      	movs	r0, #0
   bf2ba:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bf2be:	f7fd b91b 	b.w	bc4f8 <set_system_mode>
   bf2c2:	bf00      	nop
   bf2c4:	2003e6a4 	.word	0x2003e6a4
   bf2c8:	2003e698 	.word	0x2003e698
   bf2cc:	ffff0000 	.word	0xffff0000

000bf2d0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bf2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bf2d4:	4a15      	ldr	r2, [pc, #84]	; (bf32c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bf2d6:	f8df 8060 	ldr.w	r8, [pc, #96]	; bf338 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bf2da:	e9d2 6300 	ldrd	r6, r3, [r2]
   bf2de:	1980      	adds	r0, r0, r6
   bf2e0:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bf2e4:	4b12      	ldr	r3, [pc, #72]	; (bf330 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bf2e6:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bf2ea:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bf2ee:	1986      	adds	r6, r0, r6
   bf2f0:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bf2f4:	42bb      	cmp	r3, r7
   bf2f6:	bf08      	it	eq
   bf2f8:	42b2      	cmpeq	r2, r6
{
   bf2fa:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bf2fc:	d013      	beq.n	bf326 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bf2fe:	a903      	add	r1, sp, #12
   bf300:	4668      	mov	r0, sp
   bf302:	e9cd 6700 	strd	r6, r7, [sp]
   bf306:	f7fd fa91 	bl	bc82c <localtime_r>
	calendar_time.tm_year += 1900;
   bf30a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bf30c:	4d09      	ldr	r5, [pc, #36]	; (bf334 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bf30e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bf312:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bf314:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bf316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bf318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bf31a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bf31c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bf31e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bf322:	6823      	ldr	r3, [r4, #0]
   bf324:	602b      	str	r3, [r5, #0]
    }
}
   bf326:	b00c      	add	sp, #48	; 0x30
   bf328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bf32c:	2003e6e0 	.word	0x2003e6e0
   bf330:	2003e6d8 	.word	0x2003e6d8
   bf334:	2003e6b0 	.word	0x2003e6b0
   bf338:	2003e6e8 	.word	0x2003e6e8

000bf33c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bf33c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bf33e:	2000      	movs	r0, #0
   bf340:	f7fd f98c 	bl	bc65c <spark_sync_time_pending>
   bf344:	b128      	cbz	r0, bf352 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bf346:	f7fd f969 	bl	bc61c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bf34a:	f080 0001 	eor.w	r0, r0, #1
   bf34e:	b2c0      	uxtb	r0, r0
    }
   bf350:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bf352:	2001      	movs	r0, #1
   bf354:	e7fc      	b.n	bf350 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bf358 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   bf358:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bf35a:	f7ff ffb9 	bl	bf2d0 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   bf35e:	4b01      	ldr	r3, [pc, #4]	; (bf364 <_ZN9TimeClass4hourEx+0xc>)
   bf360:	6898      	ldr	r0, [r3, #8]
   bf362:	bd08      	pop	{r3, pc}
   bf364:	2003e6b0 	.word	0x2003e6b0

000bf368 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   bf368:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bf36a:	f7ff ffb1 	bl	bf2d0 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   bf36e:	4b01      	ldr	r3, [pc, #4]	; (bf374 <_ZN9TimeClass3dayEx+0xc>)
   bf370:	68d8      	ldr	r0, [r3, #12]
   bf372:	bd08      	pop	{r3, pc}
   bf374:	2003e6b0 	.word	0x2003e6b0

000bf378 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bf378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bf37a:	4602      	mov	r2, r0
   bf37c:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bf37e:	4668      	mov	r0, sp
    struct timeval tv = {
   bf380:	2100      	movs	r1, #0
    };
   bf382:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bf386:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bf38a:	f7fc fe73 	bl	bc074 <hal_rtc_set_time>
   bf38e:	4602      	mov	r2, r0
   bf390:	b910      	cbnz	r0, bf398 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bf392:	4601      	mov	r1, r0
   bf394:	f7fd f8e8 	bl	bc568 <system_notify_time_changed>
    }
}
   bf398:	b005      	add	sp, #20
   bf39a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bf3a0 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bf3a0:	b530      	push	{r4, r5, lr}
   bf3a2:	b093      	sub	sp, #76	; 0x4c
   bf3a4:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bf3a8:	4b19      	ldr	r3, [pc, #100]	; (bf410 <_ZN9TimeClass7timeStrEx+0x70>)
{
   bf3aa:	4604      	mov	r4, r0
    t += time_zone_cache;
   bf3ac:	e9d3 1000 	ldrd	r1, r0, [r3]
   bf3b0:	9b01      	ldr	r3, [sp, #4]
   bf3b2:	1852      	adds	r2, r2, r1
   bf3b4:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bf3b8:	4816      	ldr	r0, [pc, #88]	; (bf414 <_ZN9TimeClass7timeStrEx+0x74>)
   bf3ba:	e9d0 1000 	ldrd	r1, r0, [r0]
   bf3be:	1852      	adds	r2, r2, r1
   bf3c0:	eb43 0300 	adc.w	r3, r3, r0
   bf3c4:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bf3c8:	2224      	movs	r2, #36	; 0x24
   bf3ca:	eb0d 0002 	add.w	r0, sp, r2
   bf3ce:	2100      	movs	r1, #0
   bf3d0:	f001 f938 	bl	c0644 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bf3d4:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bf3d6:	a909      	add	r1, sp, #36	; 0x24
   bf3d8:	4668      	mov	r0, sp
   bf3da:	f7fd fa27 	bl	bc82c <localtime_r>
    char ascstr[26] = {};
   bf3de:	2216      	movs	r2, #22
   bf3e0:	4629      	mov	r1, r5
   bf3e2:	a803      	add	r0, sp, #12
   bf3e4:	9502      	str	r5, [sp, #8]
   bf3e6:	f001 f92d 	bl	c0644 <memset>
    asctime_r(&calendar_time, ascstr);
   bf3ea:	a902      	add	r1, sp, #8
   bf3ec:	a809      	add	r0, sp, #36	; 0x24
   bf3ee:	f001 f8af 	bl	c0550 <asctime_r>
    int len = strlen(ascstr);
   bf3f2:	a802      	add	r0, sp, #8
   bf3f4:	f001 f9e1 	bl	c07ba <strlen>
    ascstr[len-1] = 0; // remove final newline
   bf3f8:	ab12      	add	r3, sp, #72	; 0x48
   bf3fa:	4418      	add	r0, r3
    return String(ascstr);
   bf3fc:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bf3fe:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bf402:	4620      	mov	r0, r4
   bf404:	f7ff fd69 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
}
   bf408:	4620      	mov	r0, r4
   bf40a:	b013      	add	sp, #76	; 0x4c
   bf40c:	bd30      	pop	{r4, r5, pc}
   bf40e:	bf00      	nop
   bf410:	2003e6e0 	.word	0x2003e6e0
   bf414:	2003e6d8 	.word	0x2003e6d8

000bf418 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bf418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf41c:	b0a4      	sub	sp, #144	; 0x90
   bf41e:	4607      	mov	r7, r0
   bf420:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bf422:	a814      	add	r0, sp, #80	; 0x50
{
   bf424:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bf426:	223f      	movs	r2, #63	; 0x3f
{
   bf428:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bf42a:	f001 f9e2 	bl	c07f2 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bf42e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bf430:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bf432:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bf436:	f001 f9c0 	bl	c07ba <strlen>
   bf43a:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bf43c:	bb4c      	cbnz	r4, bf492 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bf43e:	4929      	ldr	r1, [pc, #164]	; (bf4e4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bf440:	a803      	add	r0, sp, #12
   bf442:	f001 f994 	bl	c076e <strcpy>
   bf446:	ac14      	add	r4, sp, #80	; 0x50
{
   bf448:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bf44a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bf44e:	45b1      	cmp	r9, r6
   bf450:	d934      	bls.n	bf4bc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bf452:	7823      	ldrb	r3, [r4, #0]
   bf454:	2b25      	cmp	r3, #37	; 0x25
   bf456:	f106 0a01 	add.w	sl, r6, #1
   bf45a:	d117      	bne.n	bf48c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bf45c:	7863      	ldrb	r3, [r4, #1]
   bf45e:	2b7a      	cmp	r3, #122	; 0x7a
   bf460:	d114      	bne.n	bf48c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bf462:	a803      	add	r0, sp, #12
   bf464:	f001 f9a9 	bl	c07ba <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bf468:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bf46a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bf46c:	1830      	adds	r0, r6, r0
   bf46e:	4418      	add	r0, r3
   bf470:	eba9 0206 	sub.w	r2, r9, r6
   bf474:	1ca1      	adds	r1, r4, #2
   bf476:	f001 f8bd 	bl	c05f4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bf47a:	462a      	mov	r2, r5
   bf47c:	a903      	add	r1, sp, #12
   bf47e:	4620      	mov	r0, r4
   bf480:	f001 f8b8 	bl	c05f4 <memcpy>
            len = strlen(format_str);
   bf484:	a814      	add	r0, sp, #80	; 0x50
   bf486:	f001 f998 	bl	c07ba <strlen>
   bf48a:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bf48c:	3401      	adds	r4, #1
   bf48e:	4656      	mov	r6, sl
   bf490:	e7db      	b.n	bf44a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bf492:	233c      	movs	r3, #60	; 0x3c
   bf494:	fb94 f2f3 	sdiv	r2, r4, r3
   bf498:	2a00      	cmp	r2, #0
   bf49a:	bfb8      	it	lt
   bf49c:	4252      	neglt	r2, r2
   bf49e:	fbb2 f1f3 	udiv	r1, r2, r3
   bf4a2:	fb03 2211 	mls	r2, r3, r1, r2
   bf4a6:	9200      	str	r2, [sp, #0]
   bf4a8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bf4ac:	4a0e      	ldr	r2, [pc, #56]	; (bf4e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bf4ae:	fb94 f3f3 	sdiv	r3, r4, r3
   bf4b2:	2110      	movs	r1, #16
   bf4b4:	a803      	add	r0, sp, #12
   bf4b6:	f7fd f979 	bl	bc7ac <snprintf>
   bf4ba:	e7c4      	b.n	bf446 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bf4bc:	2100      	movs	r1, #0
   bf4be:	222e      	movs	r2, #46	; 0x2e
   bf4c0:	a808      	add	r0, sp, #32
   bf4c2:	9107      	str	r1, [sp, #28]
   bf4c4:	f001 f8be 	bl	c0644 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bf4c8:	4643      	mov	r3, r8
   bf4ca:	aa14      	add	r2, sp, #80	; 0x50
   bf4cc:	2132      	movs	r1, #50	; 0x32
   bf4ce:	a807      	add	r0, sp, #28
   bf4d0:	f7fd f9a4 	bl	bc81c <strftime>
    return String(buf);
   bf4d4:	a907      	add	r1, sp, #28
   bf4d6:	4638      	mov	r0, r7
   bf4d8:	f7ff fcff 	bl	beeda <_ZN6StringC1EPK19__FlashStringHelper>
}
   bf4dc:	4638      	mov	r0, r7
   bf4de:	b024      	add	sp, #144	; 0x90
   bf4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf4e4:	000c1c87 	.word	0x000c1c87
   bf4e8:	000c1c89 	.word	0x000c1c89

000bf4ec <_ZN9TimeClass6formatExPKc>:
{
   bf4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf4ee:	b08d      	sub	sp, #52	; 0x34
   bf4f0:	e9cd 2300 	strd	r2, r3, [sp]
   bf4f4:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bf4f6:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bf4f8:	b915      	cbnz	r5, bf500 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bf4fa:	4b19      	ldr	r3, [pc, #100]	; (bf560 <_ZN9TimeClass6formatExPKc+0x74>)
   bf4fc:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bf4fe:	b12d      	cbz	r5, bf50c <_ZN9TimeClass6formatExPKc+0x20>
   bf500:	4b18      	ldr	r3, [pc, #96]	; (bf564 <_ZN9TimeClass6formatExPKc+0x78>)
   bf502:	4628      	mov	r0, r5
   bf504:	6819      	ldr	r1, [r3, #0]
   bf506:	f001 f928 	bl	c075a <strcmp>
   bf50a:	b938      	cbnz	r0, bf51c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bf50c:	e9dd 2300 	ldrd	r2, r3, [sp]
   bf510:	4620      	mov	r0, r4
   bf512:	f7ff ff45 	bl	bf3a0 <_ZN9TimeClass7timeStrEx>
}
   bf516:	4620      	mov	r0, r4
   bf518:	b00d      	add	sp, #52	; 0x34
   bf51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bf51c:	4e12      	ldr	r6, [pc, #72]	; (bf568 <_ZN9TimeClass6formatExPKc+0x7c>)
   bf51e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bf520:	4f12      	ldr	r7, [pc, #72]	; (bf56c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bf522:	e9d6 3200 	ldrd	r3, r2, [r6]
   bf526:	185b      	adds	r3, r3, r1
   bf528:	9901      	ldr	r1, [sp, #4]
   bf52a:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bf52e:	e9d7 0100 	ldrd	r0, r1, [r7]
   bf532:	181b      	adds	r3, r3, r0
   bf534:	eb42 0201 	adc.w	r2, r2, r1
   bf538:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bf53c:	2100      	movs	r1, #0
   bf53e:	2224      	movs	r2, #36	; 0x24
   bf540:	a803      	add	r0, sp, #12
   bf542:	f001 f87f 	bl	c0644 <memset>
    localtime_r(&t, &calendar_time);
   bf546:	a903      	add	r1, sp, #12
   bf548:	4668      	mov	r0, sp
   bf54a:	f7fd f96f 	bl	bc82c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bf54e:	6832      	ldr	r2, [r6, #0]
   bf550:	683b      	ldr	r3, [r7, #0]
   bf552:	a903      	add	r1, sp, #12
   bf554:	4413      	add	r3, r2
   bf556:	4620      	mov	r0, r4
   bf558:	462a      	mov	r2, r5
   bf55a:	f7ff ff5d 	bl	bf418 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bf55e:	e7da      	b.n	bf516 <_ZN9TimeClass6formatExPKc+0x2a>
   bf560:	2003e6ac 	.word	0x2003e6ac
   bf564:	2003d768 	.word	0x2003d768
   bf568:	2003e6e0 	.word	0x2003e6e0
   bf56c:	2003e6d8 	.word	0x2003e6d8

000bf570 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bf570:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bf572:	2000      	movs	r0, #0
   bf574:	f7fc fd66 	bl	bc044 <hal_rtc_time_is_valid>
    if (rtcstate)
   bf578:	4604      	mov	r4, r0
   bf57a:	b9a0      	cbnz	r0, bf5a6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bf57c:	f7fc ffb4 	bl	bc4e8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bf580:	2801      	cmp	r0, #1
   bf582:	d110      	bne.n	bf5a6 <_ZN9TimeClass7isValidEv+0x36>
   bf584:	4620      	mov	r0, r4
   bf586:	f7fc ffe7 	bl	bc558 <system_thread_get_state>
   bf58a:	b960      	cbnz	r0, bf5a6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bf58c:	f7ff fed6 	bl	bf33c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bf590:	b910      	cbnz	r0, bf598 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bf592:	f7fd f833 	bl	bc5fc <spark_process>
        while (_while() && !_condition()) {
   bf596:	e7f9      	b.n	bf58c <_ZN9TimeClass7isValidEv+0x1c>
   bf598:	f7ff fed0 	bl	bf33c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bf59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bf5a0:	2000      	movs	r0, #0
   bf5a2:	f7fc bd4f 	b.w	bc044 <hal_rtc_time_is_valid>
}
   bf5a6:	4620      	mov	r0, r4
   bf5a8:	bd10      	pop	{r4, pc}

000bf5aa <_ZN9TimeClass3nowEv>:
{
   bf5aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bf5ac:	f7ff ffe0 	bl	bf570 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bf5b0:	2210      	movs	r2, #16
   bf5b2:	2100      	movs	r1, #0
   bf5b4:	4668      	mov	r0, sp
   bf5b6:	f001 f845 	bl	c0644 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bf5ba:	2100      	movs	r1, #0
   bf5bc:	4668      	mov	r0, sp
   bf5be:	f7fc fd51 	bl	bc064 <hal_rtc_get_time>
}
   bf5c2:	9800      	ldr	r0, [sp, #0]
   bf5c4:	b005      	add	sp, #20
   bf5c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bf5cc <_ZN9TimeClass4hourEv>:
{
   bf5cc:	b508      	push	{r3, lr}
	return hour(now());
   bf5ce:	f7ff ffec 	bl	bf5aa <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bf5d2:	17c1      	asrs	r1, r0, #31
   bf5d4:	f7ff fe7c 	bl	bf2d0 <_ZL22Refresh_UnixTime_Cachex>
}
   bf5d8:	4b01      	ldr	r3, [pc, #4]	; (bf5e0 <_ZN9TimeClass4hourEv+0x14>)
   bf5da:	6898      	ldr	r0, [r3, #8]
   bf5dc:	bd08      	pop	{r3, pc}
   bf5de:	bf00      	nop
   bf5e0:	2003e6b0 	.word	0x2003e6b0

000bf5e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bf5e4:	4b02      	ldr	r3, [pc, #8]	; (bf5f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bf5e6:	681a      	ldr	r2, [r3, #0]
   bf5e8:	4b02      	ldr	r3, [pc, #8]	; (bf5f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bf5ea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bf5ec:	4770      	bx	lr
   bf5ee:	bf00      	nop
   bf5f0:	2003d768 	.word	0x2003d768
   bf5f4:	2003e6ac 	.word	0x2003e6ac

000bf5f8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bf5f8:	4770      	bx	lr

000bf5fa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bf5fa:	7441      	strb	r1, [r0, #17]
}
   bf5fc:	4770      	bx	lr

000bf5fe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bf5fe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bf600:	7c00      	ldrb	r0, [r0, #16]
   bf602:	f7fc fedf 	bl	bc3c4 <hal_usart_available_data_for_write>
}
   bf606:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bf60a:	bd08      	pop	{r3, pc}

000bf60c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bf60c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bf60e:	7c00      	ldrb	r0, [r0, #16]
   bf610:	f7fc feb0 	bl	bc374 <hal_usart_available>
}
   bf614:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bf618:	bd08      	pop	{r3, pc}

000bf61a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bf61a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bf61c:	7c00      	ldrb	r0, [r0, #16]
   bf61e:	f7fc feb9 	bl	bc394 <hal_usart_peek>
}
   bf622:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bf626:	bd08      	pop	{r3, pc}

000bf628 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bf628:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bf62a:	7c00      	ldrb	r0, [r0, #16]
   bf62c:	f7fc feaa 	bl	bc384 <hal_usart_read>
}
   bf630:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bf634:	bd08      	pop	{r3, pc}

000bf636 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bf636:	7c00      	ldrb	r0, [r0, #16]
   bf638:	f7fc beb4 	b.w	bc3a4 <hal_usart_flush>

000bf63c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bf63c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bf63e:	7c45      	ldrb	r5, [r0, #17]
{
   bf640:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bf642:	b12d      	cbz	r5, bf650 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bf644:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bf646:	b003      	add	sp, #12
   bf648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bf64c:	f7fc be8a 	b.w	bc364 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bf650:	7c00      	ldrb	r0, [r0, #16]
   bf652:	9101      	str	r1, [sp, #4]
   bf654:	f7fc feb6 	bl	bc3c4 <hal_usart_available_data_for_write>
   bf658:	2800      	cmp	r0, #0
   bf65a:	9901      	ldr	r1, [sp, #4]
   bf65c:	dcf2      	bgt.n	bf644 <_ZN11USARTSerial5writeEh+0x8>
}
   bf65e:	4628      	mov	r0, r5
   bf660:	b003      	add	sp, #12
   bf662:	bd30      	pop	{r4, r5, pc}

000bf664 <_ZN11USARTSerialD0Ev>:
   bf664:	b510      	push	{r4, lr}
   bf666:	2114      	movs	r1, #20
   bf668:	4604      	mov	r4, r0
   bf66a:	f7f4 fd18 	bl	b409e <_ZdlPvj>
   bf66e:	4620      	mov	r0, r4
   bf670:	bd10      	pop	{r4, pc}
	...

000bf674 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bf674:	b510      	push	{r4, lr}
   bf676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bf67a:	4604      	mov	r4, r0
   bf67c:	4608      	mov	r0, r1
   bf67e:	4611      	mov	r1, r2
   bf680:	2200      	movs	r2, #0
   bf682:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bf686:	4b04      	ldr	r3, [pc, #16]	; (bf698 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bf688:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bf68a:	2301      	movs	r3, #1
  _serial = serial;
   bf68c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bf68e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bf690:	f7fc fea8 	bl	bc3e4 <hal_usart_init_ex>
}
   bf694:	4620      	mov	r0, r4
   bf696:	bd10      	pop	{r4, pc}
   bf698:	000c2638 	.word	0x000c2638

000bf69c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bf69c:	7c00      	ldrb	r0, [r0, #16]
   bf69e:	2300      	movs	r3, #0
   bf6a0:	f7fc be98 	b.w	bc3d4 <hal_usart_begin_config>

000bf6a4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bf6a4:	2200      	movs	r2, #0
   bf6a6:	f7ff bff9 	b.w	bf69c <_ZN11USARTSerial5beginEmm>

000bf6aa <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bf6aa:	7c00      	ldrb	r0, [r0, #16]
   bf6ac:	f7fc be52 	b.w	bc354 <hal_usart_end>

000bf6b0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bf6b0:	7441      	strb	r1, [r0, #17]
}
   bf6b2:	4770      	bx	lr

000bf6b4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bf6b4:	4770      	bx	lr

000bf6b6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bf6b6:	4770      	bx	lr

000bf6b8 <_ZN9USBSerial4readEv>:
{
   bf6b8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bf6ba:	2100      	movs	r1, #0
   bf6bc:	7c00      	ldrb	r0, [r0, #16]
   bf6be:	f7fc fec1 	bl	bc444 <HAL_USB_USART_Receive_Data>
}
   bf6c2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bf6c6:	bd08      	pop	{r3, pc}

000bf6c8 <_ZN9USBSerial4peekEv>:
{
   bf6c8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bf6ca:	2101      	movs	r1, #1
   bf6cc:	7c00      	ldrb	r0, [r0, #16]
   bf6ce:	f7fc feb9 	bl	bc444 <HAL_USB_USART_Receive_Data>
}
   bf6d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bf6d6:	bd08      	pop	{r3, pc}

000bf6d8 <_ZN9USBSerial17availableForWriteEv>:
{
   bf6d8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bf6da:	7c00      	ldrb	r0, [r0, #16]
   bf6dc:	f7fc feaa 	bl	bc434 <HAL_USB_USART_Available_Data_For_Write>
}
   bf6e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bf6e4:	bd08      	pop	{r3, pc}

000bf6e6 <_ZN9USBSerial9availableEv>:
{
   bf6e6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bf6e8:	7c00      	ldrb	r0, [r0, #16]
   bf6ea:	f7fc fe9b 	bl	bc424 <HAL_USB_USART_Available_Data>
}
   bf6ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bf6f2:	bd08      	pop	{r3, pc}

000bf6f4 <_ZN9USBSerial5writeEh>:
{
   bf6f4:	b513      	push	{r0, r1, r4, lr}
   bf6f6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bf6f8:	7c00      	ldrb	r0, [r0, #16]
{
   bf6fa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bf6fc:	f7fc fe9a 	bl	bc434 <HAL_USB_USART_Available_Data_For_Write>
   bf700:	2800      	cmp	r0, #0
   bf702:	9901      	ldr	r1, [sp, #4]
   bf704:	dc01      	bgt.n	bf70a <_ZN9USBSerial5writeEh+0x16>
   bf706:	7c60      	ldrb	r0, [r4, #17]
   bf708:	b120      	cbz	r0, bf714 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bf70a:	7c20      	ldrb	r0, [r4, #16]
   bf70c:	f7fc fea2 	bl	bc454 <HAL_USB_USART_Send_Data>
   bf710:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bf714:	b002      	add	sp, #8
   bf716:	bd10      	pop	{r4, pc}

000bf718 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bf718:	7c00      	ldrb	r0, [r0, #16]
   bf71a:	f7fc bea3 	b.w	bc464 <HAL_USB_USART_Flush_Data>

000bf71e <_ZN9USBSerialD0Ev>:
   bf71e:	b510      	push	{r4, lr}
   bf720:	2114      	movs	r1, #20
   bf722:	4604      	mov	r4, r0
   bf724:	f7f4 fcbb 	bl	b409e <_ZdlPvj>
   bf728:	4620      	mov	r0, r4
   bf72a:	bd10      	pop	{r4, pc}

000bf72c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bf72c:	b510      	push	{r4, lr}
   bf72e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bf732:	4604      	mov	r4, r0
   bf734:	4608      	mov	r0, r1
   bf736:	2100      	movs	r1, #0
   bf738:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bf73c:	4b04      	ldr	r3, [pc, #16]	; (bf750 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bf73e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bf740:	2301      	movs	r3, #1
  _serial = serial;
   bf742:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bf744:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bf746:	4611      	mov	r1, r2
   bf748:	f7fc fe54 	bl	bc3f4 <HAL_USB_USART_Init>
}
   bf74c:	4620      	mov	r0, r4
   bf74e:	bd10      	pop	{r4, pc}
   bf750:	000c2668 	.word	0x000c2668

000bf754 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bf754:	7c00      	ldrb	r0, [r0, #16]
   bf756:	2200      	movs	r2, #0
   bf758:	f7fc be54 	b.w	bc404 <HAL_USB_USART_Begin>

000bf75c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bf75c:	7c00      	ldrb	r0, [r0, #16]
   bf75e:	f7fc be59 	b.w	bc414 <HAL_USB_USART_End>

000bf762 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bf762:	7c00      	ldrb	r0, [r0, #16]
   bf764:	f7fc be86 	b.w	bc474 <HAL_USB_USART_Is_Connected>

000bf768 <_Z19acquireSerialBufferv>:
{
   bf768:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bf76a:	2214      	movs	r2, #20
{
   bf76c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bf76e:	2100      	movs	r1, #0
   bf770:	f000 ff68 	bl	c0644 <memset>
}
   bf774:	4620      	mov	r0, r4
   bf776:	bd10      	pop	{r4, pc}

000bf778 <_Z16_fetch_usbserialv>:
{
   bf778:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bf77a:	4c0f      	ldr	r4, [pc, #60]	; (bf7b8 <_Z16_fetch_usbserialv+0x40>)
{
   bf77c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bf77e:	a803      	add	r0, sp, #12
   bf780:	f7ff fff2 	bl	bf768 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bf784:	7821      	ldrb	r1, [r4, #0]
   bf786:	f3bf 8f5b 	dmb	ish
   bf78a:	f011 0101 	ands.w	r1, r1, #1
   bf78e:	d10f      	bne.n	bf7b0 <_Z16_fetch_usbserialv+0x38>
   bf790:	4620      	mov	r0, r4
   bf792:	9101      	str	r1, [sp, #4]
   bf794:	f7f4 fc92 	bl	b40bc <__cxa_guard_acquire>
   bf798:	9901      	ldr	r1, [sp, #4]
   bf79a:	b148      	cbz	r0, bf7b0 <_Z16_fetch_usbserialv+0x38>
   bf79c:	aa03      	add	r2, sp, #12
   bf79e:	4807      	ldr	r0, [pc, #28]	; (bf7bc <_Z16_fetch_usbserialv+0x44>)
   bf7a0:	f7ff ffc4 	bl	bf72c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bf7a4:	4620      	mov	r0, r4
   bf7a6:	f7f4 fc8e 	bl	b40c6 <__cxa_guard_release>
   bf7aa:	4805      	ldr	r0, [pc, #20]	; (bf7c0 <_Z16_fetch_usbserialv+0x48>)
   bf7ac:	f000 fef6 	bl	c059c <atexit>
	return _usbserial;
}
   bf7b0:	4802      	ldr	r0, [pc, #8]	; (bf7bc <_Z16_fetch_usbserialv+0x44>)
   bf7b2:	b008      	add	sp, #32
   bf7b4:	bd10      	pop	{r4, pc}
   bf7b6:	bf00      	nop
   bf7b8:	2003e6f0 	.word	0x2003e6f0
   bf7bc:	2003e6f4 	.word	0x2003e6f4
   bf7c0:	000bf6b5 	.word	0x000bf6b5

000bf7c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bf7c4:	4b01      	ldr	r3, [pc, #4]	; (bf7cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bf7c6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bf7c8:	4770      	bx	lr
   bf7ca:	bf00      	nop
   bf7cc:	2003d76c 	.word	0x2003d76c

000bf7d0 <serialEventRun>:
{
   bf7d0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bf7d2:	4b0b      	ldr	r3, [pc, #44]	; (bf800 <serialEventRun+0x30>)
   bf7d4:	b143      	cbz	r3, bf7e8 <serialEventRun+0x18>
   bf7d6:	f7ff ffcf 	bl	bf778 <_Z16_fetch_usbserialv>
   bf7da:	6803      	ldr	r3, [r0, #0]
   bf7dc:	691b      	ldr	r3, [r3, #16]
   bf7de:	4798      	blx	r3
   bf7e0:	2800      	cmp	r0, #0
   bf7e2:	dd01      	ble.n	bf7e8 <serialEventRun+0x18>
        serialEvent();
   bf7e4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bf7e8:	4b06      	ldr	r3, [pc, #24]	; (bf804 <serialEventRun+0x34>)
   bf7ea:	b143      	cbz	r3, bf7fe <serialEventRun+0x2e>
   bf7ec:	f000 f9ca 	bl	bfb84 <_Z22__fetch_global_Serial1v>
   bf7f0:	6803      	ldr	r3, [r0, #0]
   bf7f2:	691b      	ldr	r3, [r3, #16]
   bf7f4:	4798      	blx	r3
   bf7f6:	2800      	cmp	r0, #0
   bf7f8:	dd01      	ble.n	bf7fe <serialEventRun+0x2e>
        serialEvent1();
   bf7fa:	f3af 8000 	nop.w
}
   bf7fe:	bd08      	pop	{r3, pc}
	...

000bf808 <_post_loop>:
{
   bf808:	b508      	push	{r3, lr}
	serialEventRun();
   bf80a:	f7ff ffe1 	bl	bf7d0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bf80e:	f7fc fc11 	bl	bc034 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bf812:	4b01      	ldr	r3, [pc, #4]	; (bf818 <_post_loop+0x10>)
   bf814:	6018      	str	r0, [r3, #0]
}
   bf816:	bd08      	pop	{r3, pc}
   bf818:	2003e710 	.word	0x2003e710

000bf81c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bf81c:	4805      	ldr	r0, [pc, #20]	; (bf834 <_Z33system_initialize_user_backup_ramv+0x18>)
   bf81e:	4a06      	ldr	r2, [pc, #24]	; (bf838 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bf820:	4906      	ldr	r1, [pc, #24]	; (bf83c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bf822:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bf824:	1a12      	subs	r2, r2, r0
   bf826:	f000 fee5 	bl	c05f4 <memcpy>
    __backup_sram_signature = signature;
   bf82a:	4b05      	ldr	r3, [pc, #20]	; (bf840 <_Z33system_initialize_user_backup_ramv+0x24>)
   bf82c:	4a05      	ldr	r2, [pc, #20]	; (bf844 <_Z33system_initialize_user_backup_ramv+0x28>)
   bf82e:	601a      	str	r2, [r3, #0]
}
   bf830:	bd08      	pop	{r3, pc}
   bf832:	bf00      	nop
   bf834:	2003f400 	.word	0x2003f400
   bf838:	2003f404 	.word	0x2003f404
   bf83c:	000c2924 	.word	0x000c2924
   bf840:	2003f400 	.word	0x2003f400
   bf844:	9a271c1e 	.word	0x9a271c1e

000bf848 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bf848:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bf84a:	2300      	movs	r3, #0
   bf84c:	9300      	str	r3, [sp, #0]
   bf84e:	461a      	mov	r2, r3
   bf850:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bf854:	f7fc fe9a 	bl	bc58c <system_ctrl_set_result>
}
   bf858:	b003      	add	sp, #12
   bf85a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bf860 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bf860:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bf862:	8843      	ldrh	r3, [r0, #2]
   bf864:	2b0a      	cmp	r3, #10
   bf866:	d008      	beq.n	bf87a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bf868:	2b50      	cmp	r3, #80	; 0x50
   bf86a:	d10b      	bne.n	bf884 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bf86c:	4b09      	ldr	r3, [pc, #36]	; (bf894 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bf86e:	681b      	ldr	r3, [r3, #0]
   bf870:	b14b      	cbz	r3, bf886 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bf872:	b003      	add	sp, #12
   bf874:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bf878:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bf87a:	f7ff ffe5 	bl	bf848 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bf87e:	b003      	add	sp, #12
   bf880:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bf884:	2300      	movs	r3, #0
   bf886:	9300      	str	r3, [sp, #0]
   bf888:	461a      	mov	r2, r3
   bf88a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bf88e:	f7fc fe7d 	bl	bc58c <system_ctrl_set_result>
}
   bf892:	e7f4      	b.n	bf87e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bf894:	2003e70c 	.word	0x2003e70c

000bf898 <module_user_init_hook>:
{
   bf898:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bf89a:	4812      	ldr	r0, [pc, #72]	; (bf8e4 <module_user_init_hook+0x4c>)
   bf89c:	2100      	movs	r1, #0
   bf89e:	f7fc ffb5 	bl	bc80c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bf8a2:	4b11      	ldr	r3, [pc, #68]	; (bf8e8 <module_user_init_hook+0x50>)
   bf8a4:	681a      	ldr	r2, [r3, #0]
   bf8a6:	4b11      	ldr	r3, [pc, #68]	; (bf8ec <module_user_init_hook+0x54>)
   bf8a8:	429a      	cmp	r2, r3
   bf8aa:	4b11      	ldr	r3, [pc, #68]	; (bf8f0 <module_user_init_hook+0x58>)
   bf8ac:	bf0c      	ite	eq
   bf8ae:	2201      	moveq	r2, #1
   bf8b0:	2200      	movne	r2, #0
   bf8b2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bf8b4:	d001      	beq.n	bf8ba <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bf8b6:	f7ff ffb1 	bl	bf81c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bf8ba:	f7fc fba3 	bl	bc004 <HAL_RNG_GetRandomNumber>
   bf8be:	4604      	mov	r4, r0
    srand(seed);
   bf8c0:	f000 fec8 	bl	c0654 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bf8c4:	4b0b      	ldr	r3, [pc, #44]	; (bf8f4 <module_user_init_hook+0x5c>)
   bf8c6:	b113      	cbz	r3, bf8ce <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bf8c8:	4620      	mov	r0, r4
   bf8ca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bf8ce:	2100      	movs	r1, #0
   bf8d0:	4808      	ldr	r0, [pc, #32]	; (bf8f4 <module_user_init_hook+0x5c>)
   bf8d2:	f7fc fed3 	bl	bc67c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bf8d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bf8da:	4807      	ldr	r0, [pc, #28]	; (bf8f8 <module_user_init_hook+0x60>)
   bf8dc:	2100      	movs	r1, #0
   bf8de:	f7fc be4b 	b.w	bc578 <system_ctrl_set_app_request_handler>
   bf8e2:	bf00      	nop
   bf8e4:	000bf7c5 	.word	0x000bf7c5
   bf8e8:	2003f400 	.word	0x2003f400
   bf8ec:	9a271c1e 	.word	0x9a271c1e
   bf8f0:	2003e708 	.word	0x2003e708
   bf8f4:	00000000 	.word	0x00000000
   bf8f8:	000bf861 	.word	0x000bf861

000bf8fc <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bf8fc:	b508      	push	{r3, lr}
   bf8fe:	4b02      	ldr	r3, [pc, #8]	; (bf908 <spark_protocol_instance+0xc>)
   bf900:	681b      	ldr	r3, [r3, #0]
   bf902:	681b      	ldr	r3, [r3, #0]
   bf904:	9301      	str	r3, [sp, #4]
   bf906:	bd08      	pop	{r3, pc}
   bf908:	0003025c 	.word	0x0003025c

000bf90c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bf90c:	b508      	push	{r3, lr}
   bf90e:	4b02      	ldr	r3, [pc, #8]	; (bf918 <spark_protocol_set_product_id+0xc>)
   bf910:	681b      	ldr	r3, [r3, #0]
   bf912:	685b      	ldr	r3, [r3, #4]
   bf914:	9301      	str	r3, [sp, #4]
   bf916:	bd08      	pop	{r3, pc}
   bf918:	0003025c 	.word	0x0003025c

000bf91c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bf91c:	b508      	push	{r3, lr}
   bf91e:	4b02      	ldr	r3, [pc, #8]	; (bf928 <spark_protocol_set_product_firmware_version+0xc>)
   bf920:	681b      	ldr	r3, [r3, #0]
   bf922:	689b      	ldr	r3, [r3, #8]
   bf924:	9301      	str	r3, [sp, #4]
   bf926:	bd08      	pop	{r3, pc}
   bf928:	0003025c 	.word	0x0003025c

000bf92c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bf92c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bf92e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bf930:	d902      	bls.n	bf938 <pinAvailable+0xc>
    return false;
   bf932:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bf934:	b002      	add	sp, #8
   bf936:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bf938:	f1a0 030b 	sub.w	r3, r0, #11
   bf93c:	2b02      	cmp	r3, #2
   bf93e:	d81a      	bhi.n	bf976 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bf940:	4c17      	ldr	r4, [pc, #92]	; (bf9a0 <pinAvailable+0x74>)
   bf942:	7821      	ldrb	r1, [r4, #0]
   bf944:	f3bf 8f5b 	dmb	ish
   bf948:	f011 0101 	ands.w	r1, r1, #1
   bf94c:	d10b      	bne.n	bf966 <pinAvailable+0x3a>
   bf94e:	4620      	mov	r0, r4
   bf950:	9101      	str	r1, [sp, #4]
   bf952:	f7f4 fbb3 	bl	b40bc <__cxa_guard_acquire>
   bf956:	9901      	ldr	r1, [sp, #4]
   bf958:	b128      	cbz	r0, bf966 <pinAvailable+0x3a>
   bf95a:	4812      	ldr	r0, [pc, #72]	; (bf9a4 <pinAvailable+0x78>)
   bf95c:	f7ff f9b2 	bl	becc4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bf960:	4620      	mov	r0, r4
   bf962:	f7f4 fbb0 	bl	b40c6 <__cxa_guard_release>
   bf966:	4b0f      	ldr	r3, [pc, #60]	; (bf9a4 <pinAvailable+0x78>)
   bf968:	7818      	ldrb	r0, [r3, #0]
   bf96a:	f7fc fc6b 	bl	bc244 <hal_spi_is_enabled>
   bf96e:	2800      	cmp	r0, #0
   bf970:	d1df      	bne.n	bf932 <pinAvailable+0x6>
  return true; // 'pin' is available
   bf972:	2001      	movs	r0, #1
   bf974:	e7de      	b.n	bf934 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bf976:	2801      	cmp	r0, #1
   bf978:	d809      	bhi.n	bf98e <pinAvailable+0x62>
   bf97a:	f000 f89f 	bl	bfabc <_Z19__fetch_global_Wirev>
   bf97e:	2100      	movs	r1, #0
   bf980:	7c00      	ldrb	r0, [r0, #16]
   bf982:	f7fc fbff 	bl	bc184 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bf986:	f080 0001 	eor.w	r0, r0, #1
   bf98a:	b2c0      	uxtb	r0, r0
   bf98c:	e7d2      	b.n	bf934 <pinAvailable+0x8>
   bf98e:	3809      	subs	r0, #9
   bf990:	2801      	cmp	r0, #1
   bf992:	d8ee      	bhi.n	bf972 <pinAvailable+0x46>
   bf994:	f000 f8f6 	bl	bfb84 <_Z22__fetch_global_Serial1v>
   bf998:	7c00      	ldrb	r0, [r0, #16]
   bf99a:	f7fc fd0b 	bl	bc3b4 <hal_usart_is_enabled>
   bf99e:	e7f2      	b.n	bf986 <pinAvailable+0x5a>
   bf9a0:	2003e44c 	.word	0x2003e44c
   bf9a4:	2003e450 	.word	0x2003e450

000bf9a8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bf9a8:	2823      	cmp	r0, #35	; 0x23
{
   bf9aa:	b538      	push	{r3, r4, r5, lr}
   bf9ac:	4604      	mov	r4, r0
   bf9ae:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bf9b0:	d80a      	bhi.n	bf9c8 <pinMode+0x20>
   bf9b2:	29ff      	cmp	r1, #255	; 0xff
   bf9b4:	d008      	beq.n	bf9c8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bf9b6:	f7ff ffb9 	bl	bf92c <pinAvailable>
   bf9ba:	b128      	cbz	r0, bf9c8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bf9bc:	4629      	mov	r1, r5
   bf9be:	4620      	mov	r0, r4
}
   bf9c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bf9c4:	f7fc bb66 	b.w	bc094 <HAL_Pin_Mode>
}
   bf9c8:	bd38      	pop	{r3, r4, r5, pc}

000bf9ca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bf9ca:	b538      	push	{r3, r4, r5, lr}
   bf9cc:	4604      	mov	r4, r0
   bf9ce:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bf9d0:	f7fc fb68 	bl	bc0a4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bf9d4:	28ff      	cmp	r0, #255	; 0xff
   bf9d6:	d010      	beq.n	bf9fa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bf9d8:	2806      	cmp	r0, #6
   bf9da:	d804      	bhi.n	bf9e6 <digitalWrite+0x1c>
   bf9dc:	234d      	movs	r3, #77	; 0x4d
   bf9de:	fa23 f000 	lsr.w	r0, r3, r0
   bf9e2:	07c3      	lsls	r3, r0, #31
   bf9e4:	d409      	bmi.n	bf9fa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bf9e6:	4620      	mov	r0, r4
   bf9e8:	f7ff ffa0 	bl	bf92c <pinAvailable>
   bf9ec:	b128      	cbz	r0, bf9fa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bf9ee:	4629      	mov	r1, r5
   bf9f0:	4620      	mov	r0, r4
}
   bf9f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bf9f6:	f7fc bb5d 	b.w	bc0b4 <HAL_GPIO_Write>
}
   bf9fa:	bd38      	pop	{r3, r4, r5, pc}

000bf9fc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bf9fc:	b510      	push	{r4, lr}
   bf9fe:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bfa00:	f7fc fb50 	bl	bc0a4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bfa04:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bfa06:	b2db      	uxtb	r3, r3
   bfa08:	2b01      	cmp	r3, #1
   bfa0a:	d908      	bls.n	bfa1e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bfa0c:	4620      	mov	r0, r4
   bfa0e:	f7ff ff8d 	bl	bf92c <pinAvailable>
   bfa12:	b120      	cbz	r0, bfa1e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bfa14:	4620      	mov	r0, r4
}
   bfa16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bfa1a:	f7fc bb53 	b.w	bc0c4 <HAL_GPIO_Read>
}
   bfa1e:	2000      	movs	r0, #0
   bfa20:	bd10      	pop	{r4, pc}

000bfa22 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bfa22:	280d      	cmp	r0, #13
{
   bfa24:	b510      	push	{r4, lr}
   bfa26:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bfa28:	bf9c      	itt	ls
   bfa2a:	340e      	addls	r4, #14
   bfa2c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bfa2e:	4620      	mov	r0, r4
   bfa30:	f7ff ff7c 	bl	bf92c <pinAvailable>
   bfa34:	b150      	cbz	r0, bfa4c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bfa36:	2103      	movs	r1, #3
   bfa38:	4620      	mov	r0, r4
   bfa3a:	f7fc fb23 	bl	bc084 <HAL_Validate_Pin_Function>
   bfa3e:	2803      	cmp	r0, #3
   bfa40:	d104      	bne.n	bfa4c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bfa42:	4620      	mov	r0, r4
}
   bfa44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bfa48:	f7fc bb54 	b.w	bc0f4 <hal_adc_read>
}
   bfa4c:	2000      	movs	r0, #0
   bfa4e:	bd10      	pop	{r4, pc}

000bfa50 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bfa50:	4770      	bx	lr

000bfa52 <__tcf_1>:
   bfa52:	4770      	bx	lr

000bfa54 <_Z17acquireWireBufferv>:
{
   bfa54:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bfa56:	4b0a      	ldr	r3, [pc, #40]	; (bfa80 <_Z17acquireWireBufferv+0x2c>)
   bfa58:	6003      	str	r3, [r0, #0]
   bfa5a:	2301      	movs	r3, #1
{
   bfa5c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bfa5e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bfa60:	4908      	ldr	r1, [pc, #32]	; (bfa84 <_Z17acquireWireBufferv+0x30>)
   bfa62:	2020      	movs	r0, #32
   bfa64:	f000 f8b4 	bl	bfbd0 <_ZnajRKSt9nothrow_t>
	};
   bfa68:	2520      	movs	r5, #32
   bfa6a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bfa6c:	4905      	ldr	r1, [pc, #20]	; (bfa84 <_Z17acquireWireBufferv+0x30>)
	};
   bfa6e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bfa70:	4628      	mov	r0, r5
   bfa72:	f000 f8ad 	bl	bfbd0 <_ZnajRKSt9nothrow_t>
	};
   bfa76:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bfa7a:	4620      	mov	r0, r4
   bfa7c:	bd38      	pop	{r3, r4, r5, pc}
   bfa7e:	bf00      	nop
   bfa80:	00010018 	.word	0x00010018
   bfa84:	000c2690 	.word	0x000c2690

000bfa88 <_Z18acquireWire1Bufferv>:
{
   bfa88:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bfa8a:	4b0a      	ldr	r3, [pc, #40]	; (bfab4 <_Z18acquireWire1Bufferv+0x2c>)
   bfa8c:	6003      	str	r3, [r0, #0]
   bfa8e:	2301      	movs	r3, #1
{
   bfa90:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bfa92:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bfa94:	4908      	ldr	r1, [pc, #32]	; (bfab8 <_Z18acquireWire1Bufferv+0x30>)
   bfa96:	2020      	movs	r0, #32
   bfa98:	f000 f89a 	bl	bfbd0 <_ZnajRKSt9nothrow_t>
	};
   bfa9c:	2520      	movs	r5, #32
   bfa9e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bfaa0:	4905      	ldr	r1, [pc, #20]	; (bfab8 <_Z18acquireWire1Bufferv+0x30>)
	};
   bfaa2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bfaa4:	4628      	mov	r0, r5
   bfaa6:	f000 f893 	bl	bfbd0 <_ZnajRKSt9nothrow_t>
	};
   bfaaa:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bfaae:	4620      	mov	r0, r4
   bfab0:	bd38      	pop	{r3, r4, r5, pc}
   bfab2:	bf00      	nop
   bfab4:	00010018 	.word	0x00010018
   bfab8:	000c2690 	.word	0x000c2690

000bfabc <_Z19__fetch_global_Wirev>:
{
   bfabc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bfabe:	4d0e      	ldr	r5, [pc, #56]	; (bfaf8 <_Z19__fetch_global_Wirev+0x3c>)
   bfac0:	7829      	ldrb	r1, [r5, #0]
   bfac2:	f3bf 8f5b 	dmb	ish
   bfac6:	f011 0401 	ands.w	r4, r1, #1
{
   bfaca:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bfacc:	d111      	bne.n	bfaf2 <_Z19__fetch_global_Wirev+0x36>
   bface:	4628      	mov	r0, r5
   bfad0:	f7f4 faf4 	bl	b40bc <__cxa_guard_acquire>
   bfad4:	b168      	cbz	r0, bfaf2 <_Z19__fetch_global_Wirev+0x36>
   bfad6:	4668      	mov	r0, sp
   bfad8:	f7ff ffbc 	bl	bfa54 <_Z17acquireWireBufferv>
   bfadc:	466a      	mov	r2, sp
   bfade:	4621      	mov	r1, r4
   bfae0:	4806      	ldr	r0, [pc, #24]	; (bfafc <_Z19__fetch_global_Wirev+0x40>)
   bfae2:	f7fd fbb7 	bl	bd254 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bfae6:	4628      	mov	r0, r5
   bfae8:	f7f4 faed 	bl	b40c6 <__cxa_guard_release>
   bfaec:	4804      	ldr	r0, [pc, #16]	; (bfb00 <_Z19__fetch_global_Wirev+0x44>)
   bfaee:	f000 fd55 	bl	c059c <atexit>
	return wire;
}
   bfaf2:	4802      	ldr	r0, [pc, #8]	; (bfafc <_Z19__fetch_global_Wirev+0x40>)
   bfaf4:	b007      	add	sp, #28
   bfaf6:	bd30      	pop	{r4, r5, pc}
   bfaf8:	2003e714 	.word	0x2003e714
   bfafc:	2003e71c 	.word	0x2003e71c
   bfb00:	000bfa51 	.word	0x000bfa51

000bfb04 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bfb04:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bfb06:	4c0e      	ldr	r4, [pc, #56]	; (bfb40 <_Z20__fetch_global_Wire1v+0x3c>)
   bfb08:	7823      	ldrb	r3, [r4, #0]
   bfb0a:	f3bf 8f5b 	dmb	ish
   bfb0e:	07db      	lsls	r3, r3, #31
{
   bfb10:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bfb12:	d411      	bmi.n	bfb38 <_Z20__fetch_global_Wire1v+0x34>
   bfb14:	4620      	mov	r0, r4
   bfb16:	f7f4 fad1 	bl	b40bc <__cxa_guard_acquire>
   bfb1a:	b168      	cbz	r0, bfb38 <_Z20__fetch_global_Wire1v+0x34>
   bfb1c:	4668      	mov	r0, sp
   bfb1e:	f7ff ffb3 	bl	bfa88 <_Z18acquireWire1Bufferv>
   bfb22:	466a      	mov	r2, sp
   bfb24:	2101      	movs	r1, #1
   bfb26:	4807      	ldr	r0, [pc, #28]	; (bfb44 <_Z20__fetch_global_Wire1v+0x40>)
   bfb28:	f7fd fb94 	bl	bd254 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bfb2c:	4620      	mov	r0, r4
   bfb2e:	f7f4 faca 	bl	b40c6 <__cxa_guard_release>
   bfb32:	4805      	ldr	r0, [pc, #20]	; (bfb48 <_Z20__fetch_global_Wire1v+0x44>)
   bfb34:	f000 fd32 	bl	c059c <atexit>
	return wire;
}
   bfb38:	4802      	ldr	r0, [pc, #8]	; (bfb44 <_Z20__fetch_global_Wire1v+0x40>)
   bfb3a:	b006      	add	sp, #24
   bfb3c:	bd10      	pop	{r4, pc}
   bfb3e:	bf00      	nop
   bfb40:	2003e718 	.word	0x2003e718
   bfb44:	2003e730 	.word	0x2003e730
   bfb48:	000bfa53 	.word	0x000bfa53

000bfb4c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bfb4c:	4770      	bx	lr
	...

000bfb50 <_Z20acquireSerial1Bufferv>:
{
   bfb50:	b538      	push	{r3, r4, r5, lr}
   bfb52:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bfb54:	2514      	movs	r5, #20
   bfb56:	462a      	mov	r2, r5
   bfb58:	2100      	movs	r1, #0
   bfb5a:	f000 fd73 	bl	c0644 <memset>
   bfb5e:	8025      	strh	r5, [r4, #0]
   bfb60:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bfb62:	4907      	ldr	r1, [pc, #28]	; (bfb80 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bfb64:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bfb66:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bfb68:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bfb6a:	f000 f831 	bl	bfbd0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bfb6e:	4904      	ldr	r1, [pc, #16]	; (bfb80 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bfb70:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bfb72:	4628      	mov	r0, r5
   bfb74:	f000 f82c 	bl	bfbd0 <_ZnajRKSt9nothrow_t>
    };
   bfb78:	60e0      	str	r0, [r4, #12]
}
   bfb7a:	4620      	mov	r0, r4
   bfb7c:	bd38      	pop	{r3, r4, r5, pc}
   bfb7e:	bf00      	nop
   bfb80:	000c2690 	.word	0x000c2690

000bfb84 <_Z22__fetch_global_Serial1v>:
{
   bfb84:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bfb86:	4d0e      	ldr	r5, [pc, #56]	; (bfbc0 <_Z22__fetch_global_Serial1v+0x3c>)
   bfb88:	7829      	ldrb	r1, [r5, #0]
   bfb8a:	f3bf 8f5b 	dmb	ish
   bfb8e:	f011 0401 	ands.w	r4, r1, #1
{
   bfb92:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bfb94:	d111      	bne.n	bfbba <_Z22__fetch_global_Serial1v+0x36>
   bfb96:	4628      	mov	r0, r5
   bfb98:	f7f4 fa90 	bl	b40bc <__cxa_guard_acquire>
   bfb9c:	b168      	cbz	r0, bfbba <_Z22__fetch_global_Serial1v+0x36>
   bfb9e:	a801      	add	r0, sp, #4
   bfba0:	f7ff ffd6 	bl	bfb50 <_Z20acquireSerial1Bufferv>
   bfba4:	aa01      	add	r2, sp, #4
   bfba6:	4621      	mov	r1, r4
   bfba8:	4806      	ldr	r0, [pc, #24]	; (bfbc4 <_Z22__fetch_global_Serial1v+0x40>)
   bfbaa:	f7ff fd63 	bl	bf674 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bfbae:	4628      	mov	r0, r5
   bfbb0:	f7f4 fa89 	bl	b40c6 <__cxa_guard_release>
   bfbb4:	4804      	ldr	r0, [pc, #16]	; (bfbc8 <_Z22__fetch_global_Serial1v+0x44>)
   bfbb6:	f000 fcf1 	bl	c059c <atexit>
    return serial1;
}
   bfbba:	4802      	ldr	r0, [pc, #8]	; (bfbc4 <_Z22__fetch_global_Serial1v+0x40>)
   bfbbc:	b007      	add	sp, #28
   bfbbe:	bd30      	pop	{r4, r5, pc}
   bfbc0:	2003e744 	.word	0x2003e744
   bfbc4:	2003e748 	.word	0x2003e748
   bfbc8:	000bfb4d 	.word	0x000bfb4d

000bfbcc <_ZnwjRKSt9nothrow_t>:
   bfbcc:	f7f4 ba63 	b.w	b4096 <_Znwj>

000bfbd0 <_ZnajRKSt9nothrow_t>:
   bfbd0:	f7f4 ba63 	b.w	b409a <_Znaj>

000bfbd4 <_ZSt17__throw_bad_allocv>:
   bfbd4:	b508      	push	{r3, lr}
   bfbd6:	f7fc fdf9 	bl	bc7cc <abort>

000bfbda <_ZSt20__throw_length_errorPKc>:
   bfbda:	b508      	push	{r3, lr}
   bfbdc:	f7fc fdf6 	bl	bc7cc <abort>

000bfbe0 <_ZSt25__throw_bad_function_callv>:
   bfbe0:	b508      	push	{r3, lr}
   bfbe2:	f7fc fdf3 	bl	bc7cc <abort>
	...

000bfbe8 <__aeabi_drsub>:
   bfbe8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bfbec:	e002      	b.n	bfbf4 <__adddf3>
   bfbee:	bf00      	nop

000bfbf0 <__aeabi_dsub>:
   bfbf0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bfbf4 <__adddf3>:
   bfbf4:	b530      	push	{r4, r5, lr}
   bfbf6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bfbfa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bfbfe:	ea94 0f05 	teq	r4, r5
   bfc02:	bf08      	it	eq
   bfc04:	ea90 0f02 	teqeq	r0, r2
   bfc08:	bf1f      	itttt	ne
   bfc0a:	ea54 0c00 	orrsne.w	ip, r4, r0
   bfc0e:	ea55 0c02 	orrsne.w	ip, r5, r2
   bfc12:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bfc16:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bfc1a:	f000 80e2 	beq.w	bfde2 <__adddf3+0x1ee>
   bfc1e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bfc22:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bfc26:	bfb8      	it	lt
   bfc28:	426d      	neglt	r5, r5
   bfc2a:	dd0c      	ble.n	bfc46 <__adddf3+0x52>
   bfc2c:	442c      	add	r4, r5
   bfc2e:	ea80 0202 	eor.w	r2, r0, r2
   bfc32:	ea81 0303 	eor.w	r3, r1, r3
   bfc36:	ea82 0000 	eor.w	r0, r2, r0
   bfc3a:	ea83 0101 	eor.w	r1, r3, r1
   bfc3e:	ea80 0202 	eor.w	r2, r0, r2
   bfc42:	ea81 0303 	eor.w	r3, r1, r3
   bfc46:	2d36      	cmp	r5, #54	; 0x36
   bfc48:	bf88      	it	hi
   bfc4a:	bd30      	pophi	{r4, r5, pc}
   bfc4c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bfc50:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bfc54:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bfc58:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bfc5c:	d002      	beq.n	bfc64 <__adddf3+0x70>
   bfc5e:	4240      	negs	r0, r0
   bfc60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bfc64:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bfc68:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bfc6c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bfc70:	d002      	beq.n	bfc78 <__adddf3+0x84>
   bfc72:	4252      	negs	r2, r2
   bfc74:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bfc78:	ea94 0f05 	teq	r4, r5
   bfc7c:	f000 80a7 	beq.w	bfdce <__adddf3+0x1da>
   bfc80:	f1a4 0401 	sub.w	r4, r4, #1
   bfc84:	f1d5 0e20 	rsbs	lr, r5, #32
   bfc88:	db0d      	blt.n	bfca6 <__adddf3+0xb2>
   bfc8a:	fa02 fc0e 	lsl.w	ip, r2, lr
   bfc8e:	fa22 f205 	lsr.w	r2, r2, r5
   bfc92:	1880      	adds	r0, r0, r2
   bfc94:	f141 0100 	adc.w	r1, r1, #0
   bfc98:	fa03 f20e 	lsl.w	r2, r3, lr
   bfc9c:	1880      	adds	r0, r0, r2
   bfc9e:	fa43 f305 	asr.w	r3, r3, r5
   bfca2:	4159      	adcs	r1, r3
   bfca4:	e00e      	b.n	bfcc4 <__adddf3+0xd0>
   bfca6:	f1a5 0520 	sub.w	r5, r5, #32
   bfcaa:	f10e 0e20 	add.w	lr, lr, #32
   bfcae:	2a01      	cmp	r2, #1
   bfcb0:	fa03 fc0e 	lsl.w	ip, r3, lr
   bfcb4:	bf28      	it	cs
   bfcb6:	f04c 0c02 	orrcs.w	ip, ip, #2
   bfcba:	fa43 f305 	asr.w	r3, r3, r5
   bfcbe:	18c0      	adds	r0, r0, r3
   bfcc0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bfcc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bfcc8:	d507      	bpl.n	bfcda <__adddf3+0xe6>
   bfcca:	f04f 0e00 	mov.w	lr, #0
   bfcce:	f1dc 0c00 	rsbs	ip, ip, #0
   bfcd2:	eb7e 0000 	sbcs.w	r0, lr, r0
   bfcd6:	eb6e 0101 	sbc.w	r1, lr, r1
   bfcda:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bfcde:	d31b      	bcc.n	bfd18 <__adddf3+0x124>
   bfce0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bfce4:	d30c      	bcc.n	bfd00 <__adddf3+0x10c>
   bfce6:	0849      	lsrs	r1, r1, #1
   bfce8:	ea5f 0030 	movs.w	r0, r0, rrx
   bfcec:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bfcf0:	f104 0401 	add.w	r4, r4, #1
   bfcf4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bfcf8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bfcfc:	f080 809a 	bcs.w	bfe34 <__adddf3+0x240>
   bfd00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bfd04:	bf08      	it	eq
   bfd06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bfd0a:	f150 0000 	adcs.w	r0, r0, #0
   bfd0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bfd12:	ea41 0105 	orr.w	r1, r1, r5
   bfd16:	bd30      	pop	{r4, r5, pc}
   bfd18:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bfd1c:	4140      	adcs	r0, r0
   bfd1e:	eb41 0101 	adc.w	r1, r1, r1
   bfd22:	3c01      	subs	r4, #1
   bfd24:	bf28      	it	cs
   bfd26:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bfd2a:	d2e9      	bcs.n	bfd00 <__adddf3+0x10c>
   bfd2c:	f091 0f00 	teq	r1, #0
   bfd30:	bf04      	itt	eq
   bfd32:	4601      	moveq	r1, r0
   bfd34:	2000      	moveq	r0, #0
   bfd36:	fab1 f381 	clz	r3, r1
   bfd3a:	bf08      	it	eq
   bfd3c:	3320      	addeq	r3, #32
   bfd3e:	f1a3 030b 	sub.w	r3, r3, #11
   bfd42:	f1b3 0220 	subs.w	r2, r3, #32
   bfd46:	da0c      	bge.n	bfd62 <__adddf3+0x16e>
   bfd48:	320c      	adds	r2, #12
   bfd4a:	dd08      	ble.n	bfd5e <__adddf3+0x16a>
   bfd4c:	f102 0c14 	add.w	ip, r2, #20
   bfd50:	f1c2 020c 	rsb	r2, r2, #12
   bfd54:	fa01 f00c 	lsl.w	r0, r1, ip
   bfd58:	fa21 f102 	lsr.w	r1, r1, r2
   bfd5c:	e00c      	b.n	bfd78 <__adddf3+0x184>
   bfd5e:	f102 0214 	add.w	r2, r2, #20
   bfd62:	bfd8      	it	le
   bfd64:	f1c2 0c20 	rsble	ip, r2, #32
   bfd68:	fa01 f102 	lsl.w	r1, r1, r2
   bfd6c:	fa20 fc0c 	lsr.w	ip, r0, ip
   bfd70:	bfdc      	itt	le
   bfd72:	ea41 010c 	orrle.w	r1, r1, ip
   bfd76:	4090      	lslle	r0, r2
   bfd78:	1ae4      	subs	r4, r4, r3
   bfd7a:	bfa2      	ittt	ge
   bfd7c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bfd80:	4329      	orrge	r1, r5
   bfd82:	bd30      	popge	{r4, r5, pc}
   bfd84:	ea6f 0404 	mvn.w	r4, r4
   bfd88:	3c1f      	subs	r4, #31
   bfd8a:	da1c      	bge.n	bfdc6 <__adddf3+0x1d2>
   bfd8c:	340c      	adds	r4, #12
   bfd8e:	dc0e      	bgt.n	bfdae <__adddf3+0x1ba>
   bfd90:	f104 0414 	add.w	r4, r4, #20
   bfd94:	f1c4 0220 	rsb	r2, r4, #32
   bfd98:	fa20 f004 	lsr.w	r0, r0, r4
   bfd9c:	fa01 f302 	lsl.w	r3, r1, r2
   bfda0:	ea40 0003 	orr.w	r0, r0, r3
   bfda4:	fa21 f304 	lsr.w	r3, r1, r4
   bfda8:	ea45 0103 	orr.w	r1, r5, r3
   bfdac:	bd30      	pop	{r4, r5, pc}
   bfdae:	f1c4 040c 	rsb	r4, r4, #12
   bfdb2:	f1c4 0220 	rsb	r2, r4, #32
   bfdb6:	fa20 f002 	lsr.w	r0, r0, r2
   bfdba:	fa01 f304 	lsl.w	r3, r1, r4
   bfdbe:	ea40 0003 	orr.w	r0, r0, r3
   bfdc2:	4629      	mov	r1, r5
   bfdc4:	bd30      	pop	{r4, r5, pc}
   bfdc6:	fa21 f004 	lsr.w	r0, r1, r4
   bfdca:	4629      	mov	r1, r5
   bfdcc:	bd30      	pop	{r4, r5, pc}
   bfdce:	f094 0f00 	teq	r4, #0
   bfdd2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bfdd6:	bf06      	itte	eq
   bfdd8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bfddc:	3401      	addeq	r4, #1
   bfdde:	3d01      	subne	r5, #1
   bfde0:	e74e      	b.n	bfc80 <__adddf3+0x8c>
   bfde2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bfde6:	bf18      	it	ne
   bfde8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bfdec:	d029      	beq.n	bfe42 <__adddf3+0x24e>
   bfdee:	ea94 0f05 	teq	r4, r5
   bfdf2:	bf08      	it	eq
   bfdf4:	ea90 0f02 	teqeq	r0, r2
   bfdf8:	d005      	beq.n	bfe06 <__adddf3+0x212>
   bfdfa:	ea54 0c00 	orrs.w	ip, r4, r0
   bfdfe:	bf04      	itt	eq
   bfe00:	4619      	moveq	r1, r3
   bfe02:	4610      	moveq	r0, r2
   bfe04:	bd30      	pop	{r4, r5, pc}
   bfe06:	ea91 0f03 	teq	r1, r3
   bfe0a:	bf1e      	ittt	ne
   bfe0c:	2100      	movne	r1, #0
   bfe0e:	2000      	movne	r0, #0
   bfe10:	bd30      	popne	{r4, r5, pc}
   bfe12:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bfe16:	d105      	bne.n	bfe24 <__adddf3+0x230>
   bfe18:	0040      	lsls	r0, r0, #1
   bfe1a:	4149      	adcs	r1, r1
   bfe1c:	bf28      	it	cs
   bfe1e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bfe22:	bd30      	pop	{r4, r5, pc}
   bfe24:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bfe28:	bf3c      	itt	cc
   bfe2a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bfe2e:	bd30      	popcc	{r4, r5, pc}
   bfe30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bfe34:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bfe38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bfe3c:	f04f 0000 	mov.w	r0, #0
   bfe40:	bd30      	pop	{r4, r5, pc}
   bfe42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bfe46:	bf1a      	itte	ne
   bfe48:	4619      	movne	r1, r3
   bfe4a:	4610      	movne	r0, r2
   bfe4c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bfe50:	bf1c      	itt	ne
   bfe52:	460b      	movne	r3, r1
   bfe54:	4602      	movne	r2, r0
   bfe56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bfe5a:	bf06      	itte	eq
   bfe5c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bfe60:	ea91 0f03 	teqeq	r1, r3
   bfe64:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bfe68:	bd30      	pop	{r4, r5, pc}
   bfe6a:	bf00      	nop

000bfe6c <__aeabi_ui2d>:
   bfe6c:	f090 0f00 	teq	r0, #0
   bfe70:	bf04      	itt	eq
   bfe72:	2100      	moveq	r1, #0
   bfe74:	4770      	bxeq	lr
   bfe76:	b530      	push	{r4, r5, lr}
   bfe78:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bfe7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bfe80:	f04f 0500 	mov.w	r5, #0
   bfe84:	f04f 0100 	mov.w	r1, #0
   bfe88:	e750      	b.n	bfd2c <__adddf3+0x138>
   bfe8a:	bf00      	nop

000bfe8c <__aeabi_i2d>:
   bfe8c:	f090 0f00 	teq	r0, #0
   bfe90:	bf04      	itt	eq
   bfe92:	2100      	moveq	r1, #0
   bfe94:	4770      	bxeq	lr
   bfe96:	b530      	push	{r4, r5, lr}
   bfe98:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bfe9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bfea0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bfea4:	bf48      	it	mi
   bfea6:	4240      	negmi	r0, r0
   bfea8:	f04f 0100 	mov.w	r1, #0
   bfeac:	e73e      	b.n	bfd2c <__adddf3+0x138>
   bfeae:	bf00      	nop

000bfeb0 <__aeabi_f2d>:
   bfeb0:	0042      	lsls	r2, r0, #1
   bfeb2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bfeb6:	ea4f 0131 	mov.w	r1, r1, rrx
   bfeba:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bfebe:	bf1f      	itttt	ne
   bfec0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bfec4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bfec8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bfecc:	4770      	bxne	lr
   bfece:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bfed2:	bf08      	it	eq
   bfed4:	4770      	bxeq	lr
   bfed6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bfeda:	bf04      	itt	eq
   bfedc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bfee0:	4770      	bxeq	lr
   bfee2:	b530      	push	{r4, r5, lr}
   bfee4:	f44f 7460 	mov.w	r4, #896	; 0x380
   bfee8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bfeec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bfef0:	e71c      	b.n	bfd2c <__adddf3+0x138>
   bfef2:	bf00      	nop

000bfef4 <__aeabi_ul2d>:
   bfef4:	ea50 0201 	orrs.w	r2, r0, r1
   bfef8:	bf08      	it	eq
   bfefa:	4770      	bxeq	lr
   bfefc:	b530      	push	{r4, r5, lr}
   bfefe:	f04f 0500 	mov.w	r5, #0
   bff02:	e00a      	b.n	bff1a <__aeabi_l2d+0x16>

000bff04 <__aeabi_l2d>:
   bff04:	ea50 0201 	orrs.w	r2, r0, r1
   bff08:	bf08      	it	eq
   bff0a:	4770      	bxeq	lr
   bff0c:	b530      	push	{r4, r5, lr}
   bff0e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bff12:	d502      	bpl.n	bff1a <__aeabi_l2d+0x16>
   bff14:	4240      	negs	r0, r0
   bff16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bff1a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bff1e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bff22:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bff26:	f43f aed8 	beq.w	bfcda <__adddf3+0xe6>
   bff2a:	f04f 0203 	mov.w	r2, #3
   bff2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bff32:	bf18      	it	ne
   bff34:	3203      	addne	r2, #3
   bff36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bff3a:	bf18      	it	ne
   bff3c:	3203      	addne	r2, #3
   bff3e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bff42:	f1c2 0320 	rsb	r3, r2, #32
   bff46:	fa00 fc03 	lsl.w	ip, r0, r3
   bff4a:	fa20 f002 	lsr.w	r0, r0, r2
   bff4e:	fa01 fe03 	lsl.w	lr, r1, r3
   bff52:	ea40 000e 	orr.w	r0, r0, lr
   bff56:	fa21 f102 	lsr.w	r1, r1, r2
   bff5a:	4414      	add	r4, r2
   bff5c:	e6bd      	b.n	bfcda <__adddf3+0xe6>
   bff5e:	bf00      	nop

000bff60 <__aeabi_dmul>:
   bff60:	b570      	push	{r4, r5, r6, lr}
   bff62:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bff66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bff6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bff6e:	bf1d      	ittte	ne
   bff70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bff74:	ea94 0f0c 	teqne	r4, ip
   bff78:	ea95 0f0c 	teqne	r5, ip
   bff7c:	f000 f8de 	bleq	c013c <__aeabi_dmul+0x1dc>
   bff80:	442c      	add	r4, r5
   bff82:	ea81 0603 	eor.w	r6, r1, r3
   bff86:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bff8a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bff8e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bff92:	bf18      	it	ne
   bff94:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bff98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bff9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bffa0:	d038      	beq.n	c0014 <__aeabi_dmul+0xb4>
   bffa2:	fba0 ce02 	umull	ip, lr, r0, r2
   bffa6:	f04f 0500 	mov.w	r5, #0
   bffaa:	fbe1 e502 	umlal	lr, r5, r1, r2
   bffae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bffb2:	fbe0 e503 	umlal	lr, r5, r0, r3
   bffb6:	f04f 0600 	mov.w	r6, #0
   bffba:	fbe1 5603 	umlal	r5, r6, r1, r3
   bffbe:	f09c 0f00 	teq	ip, #0
   bffc2:	bf18      	it	ne
   bffc4:	f04e 0e01 	orrne.w	lr, lr, #1
   bffc8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bffcc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bffd0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bffd4:	d204      	bcs.n	bffe0 <__aeabi_dmul+0x80>
   bffd6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bffda:	416d      	adcs	r5, r5
   bffdc:	eb46 0606 	adc.w	r6, r6, r6
   bffe0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bffe4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bffe8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bffec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bfff0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bfff4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bfff8:	bf88      	it	hi
   bfffa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bfffe:	d81e      	bhi.n	c003e <__aeabi_dmul+0xde>
   c0000:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c0004:	bf08      	it	eq
   c0006:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c000a:	f150 0000 	adcs.w	r0, r0, #0
   c000e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c0012:	bd70      	pop	{r4, r5, r6, pc}
   c0014:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c0018:	ea46 0101 	orr.w	r1, r6, r1
   c001c:	ea40 0002 	orr.w	r0, r0, r2
   c0020:	ea81 0103 	eor.w	r1, r1, r3
   c0024:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c0028:	bfc2      	ittt	gt
   c002a:	ebd4 050c 	rsbsgt	r5, r4, ip
   c002e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c0032:	bd70      	popgt	{r4, r5, r6, pc}
   c0034:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0038:	f04f 0e00 	mov.w	lr, #0
   c003c:	3c01      	subs	r4, #1
   c003e:	f300 80ab 	bgt.w	c0198 <__aeabi_dmul+0x238>
   c0042:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c0046:	bfde      	ittt	le
   c0048:	2000      	movle	r0, #0
   c004a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c004e:	bd70      	pople	{r4, r5, r6, pc}
   c0050:	f1c4 0400 	rsb	r4, r4, #0
   c0054:	3c20      	subs	r4, #32
   c0056:	da35      	bge.n	c00c4 <__aeabi_dmul+0x164>
   c0058:	340c      	adds	r4, #12
   c005a:	dc1b      	bgt.n	c0094 <__aeabi_dmul+0x134>
   c005c:	f104 0414 	add.w	r4, r4, #20
   c0060:	f1c4 0520 	rsb	r5, r4, #32
   c0064:	fa00 f305 	lsl.w	r3, r0, r5
   c0068:	fa20 f004 	lsr.w	r0, r0, r4
   c006c:	fa01 f205 	lsl.w	r2, r1, r5
   c0070:	ea40 0002 	orr.w	r0, r0, r2
   c0074:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c0078:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c007c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c0080:	fa21 f604 	lsr.w	r6, r1, r4
   c0084:	eb42 0106 	adc.w	r1, r2, r6
   c0088:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c008c:	bf08      	it	eq
   c008e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c0092:	bd70      	pop	{r4, r5, r6, pc}
   c0094:	f1c4 040c 	rsb	r4, r4, #12
   c0098:	f1c4 0520 	rsb	r5, r4, #32
   c009c:	fa00 f304 	lsl.w	r3, r0, r4
   c00a0:	fa20 f005 	lsr.w	r0, r0, r5
   c00a4:	fa01 f204 	lsl.w	r2, r1, r4
   c00a8:	ea40 0002 	orr.w	r0, r0, r2
   c00ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c00b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c00b4:	f141 0100 	adc.w	r1, r1, #0
   c00b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c00bc:	bf08      	it	eq
   c00be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c00c2:	bd70      	pop	{r4, r5, r6, pc}
   c00c4:	f1c4 0520 	rsb	r5, r4, #32
   c00c8:	fa00 f205 	lsl.w	r2, r0, r5
   c00cc:	ea4e 0e02 	orr.w	lr, lr, r2
   c00d0:	fa20 f304 	lsr.w	r3, r0, r4
   c00d4:	fa01 f205 	lsl.w	r2, r1, r5
   c00d8:	ea43 0302 	orr.w	r3, r3, r2
   c00dc:	fa21 f004 	lsr.w	r0, r1, r4
   c00e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c00e4:	fa21 f204 	lsr.w	r2, r1, r4
   c00e8:	ea20 0002 	bic.w	r0, r0, r2
   c00ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c00f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c00f4:	bf08      	it	eq
   c00f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c00fa:	bd70      	pop	{r4, r5, r6, pc}
   c00fc:	f094 0f00 	teq	r4, #0
   c0100:	d10f      	bne.n	c0122 <__aeabi_dmul+0x1c2>
   c0102:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c0106:	0040      	lsls	r0, r0, #1
   c0108:	eb41 0101 	adc.w	r1, r1, r1
   c010c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c0110:	bf08      	it	eq
   c0112:	3c01      	subeq	r4, #1
   c0114:	d0f7      	beq.n	c0106 <__aeabi_dmul+0x1a6>
   c0116:	ea41 0106 	orr.w	r1, r1, r6
   c011a:	f095 0f00 	teq	r5, #0
   c011e:	bf18      	it	ne
   c0120:	4770      	bxne	lr
   c0122:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c0126:	0052      	lsls	r2, r2, #1
   c0128:	eb43 0303 	adc.w	r3, r3, r3
   c012c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c0130:	bf08      	it	eq
   c0132:	3d01      	subeq	r5, #1
   c0134:	d0f7      	beq.n	c0126 <__aeabi_dmul+0x1c6>
   c0136:	ea43 0306 	orr.w	r3, r3, r6
   c013a:	4770      	bx	lr
   c013c:	ea94 0f0c 	teq	r4, ip
   c0140:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c0144:	bf18      	it	ne
   c0146:	ea95 0f0c 	teqne	r5, ip
   c014a:	d00c      	beq.n	c0166 <__aeabi_dmul+0x206>
   c014c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c0150:	bf18      	it	ne
   c0152:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0156:	d1d1      	bne.n	c00fc <__aeabi_dmul+0x19c>
   c0158:	ea81 0103 	eor.w	r1, r1, r3
   c015c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0160:	f04f 0000 	mov.w	r0, #0
   c0164:	bd70      	pop	{r4, r5, r6, pc}
   c0166:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c016a:	bf06      	itte	eq
   c016c:	4610      	moveq	r0, r2
   c016e:	4619      	moveq	r1, r3
   c0170:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0174:	d019      	beq.n	c01aa <__aeabi_dmul+0x24a>
   c0176:	ea94 0f0c 	teq	r4, ip
   c017a:	d102      	bne.n	c0182 <__aeabi_dmul+0x222>
   c017c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c0180:	d113      	bne.n	c01aa <__aeabi_dmul+0x24a>
   c0182:	ea95 0f0c 	teq	r5, ip
   c0186:	d105      	bne.n	c0194 <__aeabi_dmul+0x234>
   c0188:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c018c:	bf1c      	itt	ne
   c018e:	4610      	movne	r0, r2
   c0190:	4619      	movne	r1, r3
   c0192:	d10a      	bne.n	c01aa <__aeabi_dmul+0x24a>
   c0194:	ea81 0103 	eor.w	r1, r1, r3
   c0198:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c019c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c01a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c01a4:	f04f 0000 	mov.w	r0, #0
   c01a8:	bd70      	pop	{r4, r5, r6, pc}
   c01aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c01ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c01b2:	bd70      	pop	{r4, r5, r6, pc}

000c01b4 <__aeabi_ddiv>:
   c01b4:	b570      	push	{r4, r5, r6, lr}
   c01b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c01ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c01be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c01c2:	bf1d      	ittte	ne
   c01c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c01c8:	ea94 0f0c 	teqne	r4, ip
   c01cc:	ea95 0f0c 	teqne	r5, ip
   c01d0:	f000 f8a7 	bleq	c0322 <__aeabi_ddiv+0x16e>
   c01d4:	eba4 0405 	sub.w	r4, r4, r5
   c01d8:	ea81 0e03 	eor.w	lr, r1, r3
   c01dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c01e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c01e4:	f000 8088 	beq.w	c02f8 <__aeabi_ddiv+0x144>
   c01e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c01ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c01f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c01f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c01f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c01fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c0200:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c0204:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c0208:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c020c:	429d      	cmp	r5, r3
   c020e:	bf08      	it	eq
   c0210:	4296      	cmpeq	r6, r2
   c0212:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c0216:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c021a:	d202      	bcs.n	c0222 <__aeabi_ddiv+0x6e>
   c021c:	085b      	lsrs	r3, r3, #1
   c021e:	ea4f 0232 	mov.w	r2, r2, rrx
   c0222:	1ab6      	subs	r6, r6, r2
   c0224:	eb65 0503 	sbc.w	r5, r5, r3
   c0228:	085b      	lsrs	r3, r3, #1
   c022a:	ea4f 0232 	mov.w	r2, r2, rrx
   c022e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c0232:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c0236:	ebb6 0e02 	subs.w	lr, r6, r2
   c023a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c023e:	bf22      	ittt	cs
   c0240:	1ab6      	subcs	r6, r6, r2
   c0242:	4675      	movcs	r5, lr
   c0244:	ea40 000c 	orrcs.w	r0, r0, ip
   c0248:	085b      	lsrs	r3, r3, #1
   c024a:	ea4f 0232 	mov.w	r2, r2, rrx
   c024e:	ebb6 0e02 	subs.w	lr, r6, r2
   c0252:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0256:	bf22      	ittt	cs
   c0258:	1ab6      	subcs	r6, r6, r2
   c025a:	4675      	movcs	r5, lr
   c025c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c0260:	085b      	lsrs	r3, r3, #1
   c0262:	ea4f 0232 	mov.w	r2, r2, rrx
   c0266:	ebb6 0e02 	subs.w	lr, r6, r2
   c026a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c026e:	bf22      	ittt	cs
   c0270:	1ab6      	subcs	r6, r6, r2
   c0272:	4675      	movcs	r5, lr
   c0274:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c0278:	085b      	lsrs	r3, r3, #1
   c027a:	ea4f 0232 	mov.w	r2, r2, rrx
   c027e:	ebb6 0e02 	subs.w	lr, r6, r2
   c0282:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0286:	bf22      	ittt	cs
   c0288:	1ab6      	subcs	r6, r6, r2
   c028a:	4675      	movcs	r5, lr
   c028c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c0290:	ea55 0e06 	orrs.w	lr, r5, r6
   c0294:	d018      	beq.n	c02c8 <__aeabi_ddiv+0x114>
   c0296:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c029a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c029e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c02a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c02a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c02aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c02ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c02b2:	d1c0      	bne.n	c0236 <__aeabi_ddiv+0x82>
   c02b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c02b8:	d10b      	bne.n	c02d2 <__aeabi_ddiv+0x11e>
   c02ba:	ea41 0100 	orr.w	r1, r1, r0
   c02be:	f04f 0000 	mov.w	r0, #0
   c02c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c02c6:	e7b6      	b.n	c0236 <__aeabi_ddiv+0x82>
   c02c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c02cc:	bf04      	itt	eq
   c02ce:	4301      	orreq	r1, r0
   c02d0:	2000      	moveq	r0, #0
   c02d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c02d6:	bf88      	it	hi
   c02d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c02dc:	f63f aeaf 	bhi.w	c003e <__aeabi_dmul+0xde>
   c02e0:	ebb5 0c03 	subs.w	ip, r5, r3
   c02e4:	bf04      	itt	eq
   c02e6:	ebb6 0c02 	subseq.w	ip, r6, r2
   c02ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c02ee:	f150 0000 	adcs.w	r0, r0, #0
   c02f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c02f6:	bd70      	pop	{r4, r5, r6, pc}
   c02f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c02fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c0300:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c0304:	bfc2      	ittt	gt
   c0306:	ebd4 050c 	rsbsgt	r5, r4, ip
   c030a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c030e:	bd70      	popgt	{r4, r5, r6, pc}
   c0310:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0314:	f04f 0e00 	mov.w	lr, #0
   c0318:	3c01      	subs	r4, #1
   c031a:	e690      	b.n	c003e <__aeabi_dmul+0xde>
   c031c:	ea45 0e06 	orr.w	lr, r5, r6
   c0320:	e68d      	b.n	c003e <__aeabi_dmul+0xde>
   c0322:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c0326:	ea94 0f0c 	teq	r4, ip
   c032a:	bf08      	it	eq
   c032c:	ea95 0f0c 	teqeq	r5, ip
   c0330:	f43f af3b 	beq.w	c01aa <__aeabi_dmul+0x24a>
   c0334:	ea94 0f0c 	teq	r4, ip
   c0338:	d10a      	bne.n	c0350 <__aeabi_ddiv+0x19c>
   c033a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c033e:	f47f af34 	bne.w	c01aa <__aeabi_dmul+0x24a>
   c0342:	ea95 0f0c 	teq	r5, ip
   c0346:	f47f af25 	bne.w	c0194 <__aeabi_dmul+0x234>
   c034a:	4610      	mov	r0, r2
   c034c:	4619      	mov	r1, r3
   c034e:	e72c      	b.n	c01aa <__aeabi_dmul+0x24a>
   c0350:	ea95 0f0c 	teq	r5, ip
   c0354:	d106      	bne.n	c0364 <__aeabi_ddiv+0x1b0>
   c0356:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c035a:	f43f aefd 	beq.w	c0158 <__aeabi_dmul+0x1f8>
   c035e:	4610      	mov	r0, r2
   c0360:	4619      	mov	r1, r3
   c0362:	e722      	b.n	c01aa <__aeabi_dmul+0x24a>
   c0364:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c0368:	bf18      	it	ne
   c036a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c036e:	f47f aec5 	bne.w	c00fc <__aeabi_dmul+0x19c>
   c0372:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c0376:	f47f af0d 	bne.w	c0194 <__aeabi_dmul+0x234>
   c037a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c037e:	f47f aeeb 	bne.w	c0158 <__aeabi_dmul+0x1f8>
   c0382:	e712      	b.n	c01aa <__aeabi_dmul+0x24a>

000c0384 <__gedf2>:
   c0384:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c0388:	e006      	b.n	c0398 <__cmpdf2+0x4>
   c038a:	bf00      	nop

000c038c <__ledf2>:
   c038c:	f04f 0c01 	mov.w	ip, #1
   c0390:	e002      	b.n	c0398 <__cmpdf2+0x4>
   c0392:	bf00      	nop

000c0394 <__cmpdf2>:
   c0394:	f04f 0c01 	mov.w	ip, #1
   c0398:	f84d cd04 	str.w	ip, [sp, #-4]!
   c039c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c03a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c03a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c03a8:	bf18      	it	ne
   c03aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c03ae:	d01b      	beq.n	c03e8 <__cmpdf2+0x54>
   c03b0:	b001      	add	sp, #4
   c03b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c03b6:	bf0c      	ite	eq
   c03b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c03bc:	ea91 0f03 	teqne	r1, r3
   c03c0:	bf02      	ittt	eq
   c03c2:	ea90 0f02 	teqeq	r0, r2
   c03c6:	2000      	moveq	r0, #0
   c03c8:	4770      	bxeq	lr
   c03ca:	f110 0f00 	cmn.w	r0, #0
   c03ce:	ea91 0f03 	teq	r1, r3
   c03d2:	bf58      	it	pl
   c03d4:	4299      	cmppl	r1, r3
   c03d6:	bf08      	it	eq
   c03d8:	4290      	cmpeq	r0, r2
   c03da:	bf2c      	ite	cs
   c03dc:	17d8      	asrcs	r0, r3, #31
   c03de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c03e2:	f040 0001 	orr.w	r0, r0, #1
   c03e6:	4770      	bx	lr
   c03e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c03ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c03f0:	d102      	bne.n	c03f8 <__cmpdf2+0x64>
   c03f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c03f6:	d107      	bne.n	c0408 <__cmpdf2+0x74>
   c03f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c03fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0400:	d1d6      	bne.n	c03b0 <__cmpdf2+0x1c>
   c0402:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c0406:	d0d3      	beq.n	c03b0 <__cmpdf2+0x1c>
   c0408:	f85d 0b04 	ldr.w	r0, [sp], #4
   c040c:	4770      	bx	lr
   c040e:	bf00      	nop

000c0410 <__aeabi_cdrcmple>:
   c0410:	4684      	mov	ip, r0
   c0412:	4610      	mov	r0, r2
   c0414:	4662      	mov	r2, ip
   c0416:	468c      	mov	ip, r1
   c0418:	4619      	mov	r1, r3
   c041a:	4663      	mov	r3, ip
   c041c:	e000      	b.n	c0420 <__aeabi_cdcmpeq>
   c041e:	bf00      	nop

000c0420 <__aeabi_cdcmpeq>:
   c0420:	b501      	push	{r0, lr}
   c0422:	f7ff ffb7 	bl	c0394 <__cmpdf2>
   c0426:	2800      	cmp	r0, #0
   c0428:	bf48      	it	mi
   c042a:	f110 0f00 	cmnmi.w	r0, #0
   c042e:	bd01      	pop	{r0, pc}

000c0430 <__aeabi_dcmpeq>:
   c0430:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0434:	f7ff fff4 	bl	c0420 <__aeabi_cdcmpeq>
   c0438:	bf0c      	ite	eq
   c043a:	2001      	moveq	r0, #1
   c043c:	2000      	movne	r0, #0
   c043e:	f85d fb08 	ldr.w	pc, [sp], #8
   c0442:	bf00      	nop

000c0444 <__aeabi_dcmplt>:
   c0444:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0448:	f7ff ffea 	bl	c0420 <__aeabi_cdcmpeq>
   c044c:	bf34      	ite	cc
   c044e:	2001      	movcc	r0, #1
   c0450:	2000      	movcs	r0, #0
   c0452:	f85d fb08 	ldr.w	pc, [sp], #8
   c0456:	bf00      	nop

000c0458 <__aeabi_dcmple>:
   c0458:	f84d ed08 	str.w	lr, [sp, #-8]!
   c045c:	f7ff ffe0 	bl	c0420 <__aeabi_cdcmpeq>
   c0460:	bf94      	ite	ls
   c0462:	2001      	movls	r0, #1
   c0464:	2000      	movhi	r0, #0
   c0466:	f85d fb08 	ldr.w	pc, [sp], #8
   c046a:	bf00      	nop

000c046c <__aeabi_dcmpge>:
   c046c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0470:	f7ff ffce 	bl	c0410 <__aeabi_cdrcmple>
   c0474:	bf94      	ite	ls
   c0476:	2001      	movls	r0, #1
   c0478:	2000      	movhi	r0, #0
   c047a:	f85d fb08 	ldr.w	pc, [sp], #8
   c047e:	bf00      	nop

000c0480 <__aeabi_dcmpgt>:
   c0480:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0484:	f7ff ffc4 	bl	c0410 <__aeabi_cdrcmple>
   c0488:	bf34      	ite	cc
   c048a:	2001      	movcc	r0, #1
   c048c:	2000      	movcs	r0, #0
   c048e:	f85d fb08 	ldr.w	pc, [sp], #8
   c0492:	bf00      	nop

000c0494 <__aeabi_dcmpun>:
   c0494:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c0498:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c049c:	d102      	bne.n	c04a4 <__aeabi_dcmpun+0x10>
   c049e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c04a2:	d10a      	bne.n	c04ba <__aeabi_dcmpun+0x26>
   c04a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c04a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c04ac:	d102      	bne.n	c04b4 <__aeabi_dcmpun+0x20>
   c04ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c04b2:	d102      	bne.n	c04ba <__aeabi_dcmpun+0x26>
   c04b4:	f04f 0000 	mov.w	r0, #0
   c04b8:	4770      	bx	lr
   c04ba:	f04f 0001 	mov.w	r0, #1
   c04be:	4770      	bx	lr

000c04c0 <__aeabi_d2iz>:
   c04c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c04c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c04c8:	d215      	bcs.n	c04f6 <__aeabi_d2iz+0x36>
   c04ca:	d511      	bpl.n	c04f0 <__aeabi_d2iz+0x30>
   c04cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c04d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c04d4:	d912      	bls.n	c04fc <__aeabi_d2iz+0x3c>
   c04d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c04da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c04de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c04e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c04e6:	fa23 f002 	lsr.w	r0, r3, r2
   c04ea:	bf18      	it	ne
   c04ec:	4240      	negne	r0, r0
   c04ee:	4770      	bx	lr
   c04f0:	f04f 0000 	mov.w	r0, #0
   c04f4:	4770      	bx	lr
   c04f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c04fa:	d105      	bne.n	c0508 <__aeabi_d2iz+0x48>
   c04fc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c0500:	bf08      	it	eq
   c0502:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c0506:	4770      	bx	lr
   c0508:	f04f 0000 	mov.w	r0, #0
   c050c:	4770      	bx	lr
   c050e:	bf00      	nop

000c0510 <__aeabi_d2uiz>:
   c0510:	004a      	lsls	r2, r1, #1
   c0512:	d211      	bcs.n	c0538 <__aeabi_d2uiz+0x28>
   c0514:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c0518:	d211      	bcs.n	c053e <__aeabi_d2uiz+0x2e>
   c051a:	d50d      	bpl.n	c0538 <__aeabi_d2uiz+0x28>
   c051c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c0520:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c0524:	d40e      	bmi.n	c0544 <__aeabi_d2uiz+0x34>
   c0526:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c052a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c052e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c0532:	fa23 f002 	lsr.w	r0, r3, r2
   c0536:	4770      	bx	lr
   c0538:	f04f 0000 	mov.w	r0, #0
   c053c:	4770      	bx	lr
   c053e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c0542:	d102      	bne.n	c054a <__aeabi_d2uiz+0x3a>
   c0544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c0548:	4770      	bx	lr
   c054a:	f04f 0000 	mov.w	r0, #0
   c054e:	4770      	bx	lr

000c0550 <asctime_r>:
   c0550:	b510      	push	{r4, lr}
   c0552:	460c      	mov	r4, r1
   c0554:	6941      	ldr	r1, [r0, #20]
   c0556:	6903      	ldr	r3, [r0, #16]
   c0558:	6982      	ldr	r2, [r0, #24]
   c055a:	b086      	sub	sp, #24
   c055c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   c0560:	9104      	str	r1, [sp, #16]
   c0562:	6801      	ldr	r1, [r0, #0]
   c0564:	9103      	str	r1, [sp, #12]
   c0566:	6841      	ldr	r1, [r0, #4]
   c0568:	9102      	str	r1, [sp, #8]
   c056a:	6881      	ldr	r1, [r0, #8]
   c056c:	9101      	str	r1, [sp, #4]
   c056e:	68c1      	ldr	r1, [r0, #12]
   c0570:	9100      	str	r1, [sp, #0]
   c0572:	4907      	ldr	r1, [pc, #28]	; (c0590 <asctime_r+0x40>)
   c0574:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   c0578:	440b      	add	r3, r1
   c057a:	4906      	ldr	r1, [pc, #24]	; (c0594 <asctime_r+0x44>)
   c057c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   c0580:	440a      	add	r2, r1
   c0582:	4620      	mov	r0, r4
   c0584:	4904      	ldr	r1, [pc, #16]	; (c0598 <asctime_r+0x48>)
   c0586:	f7fc f901 	bl	bc78c <siprintf>
   c058a:	4620      	mov	r0, r4
   c058c:	b006      	add	sp, #24
   c058e:	bd10      	pop	{r4, pc}
   c0590:	000c26c6 	.word	0x000c26c6
   c0594:	000c26b1 	.word	0x000c26b1
   c0598:	000c2691 	.word	0x000c2691

000c059c <atexit>:
   c059c:	2300      	movs	r3, #0
   c059e:	4601      	mov	r1, r0
   c05a0:	461a      	mov	r2, r3
   c05a2:	4618      	mov	r0, r3
   c05a4:	f000 ba70 	b.w	c0a88 <__register_exitproc>

000c05a8 <gmtime>:
   c05a8:	b538      	push	{r3, r4, r5, lr}
   c05aa:	4b0b      	ldr	r3, [pc, #44]	; (c05d8 <gmtime+0x30>)
   c05ac:	681d      	ldr	r5, [r3, #0]
   c05ae:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   c05b0:	4604      	mov	r4, r0
   c05b2:	b953      	cbnz	r3, c05ca <gmtime+0x22>
   c05b4:	2024      	movs	r0, #36	; 0x24
   c05b6:	f7fc f8d1 	bl	bc75c <malloc>
   c05ba:	4602      	mov	r2, r0
   c05bc:	63e8      	str	r0, [r5, #60]	; 0x3c
   c05be:	b920      	cbnz	r0, c05ca <gmtime+0x22>
   c05c0:	4b06      	ldr	r3, [pc, #24]	; (c05dc <gmtime+0x34>)
   c05c2:	4807      	ldr	r0, [pc, #28]	; (c05e0 <gmtime+0x38>)
   c05c4:	2139      	movs	r1, #57	; 0x39
   c05c6:	f7fc f919 	bl	bc7fc <__assert_func>
   c05ca:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   c05cc:	4620      	mov	r0, r4
   c05ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c05d2:	f7fc b933 	b.w	bc83c <gmtime_r>
   c05d6:	bf00      	nop
   c05d8:	2003d76c 	.word	0x2003d76c
   c05dc:	000c26ea 	.word	0x000c26ea
   c05e0:	000c2701 	.word	0x000c2701

000c05e4 <isprint>:
   c05e4:	4b02      	ldr	r3, [pc, #8]	; (c05f0 <isprint+0xc>)
   c05e6:	4418      	add	r0, r3
   c05e8:	7840      	ldrb	r0, [r0, #1]
   c05ea:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c05ee:	4770      	bx	lr
   c05f0:	000c27b3 	.word	0x000c27b3

000c05f4 <memcpy>:
   c05f4:	440a      	add	r2, r1
   c05f6:	4291      	cmp	r1, r2
   c05f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c05fc:	d100      	bne.n	c0600 <memcpy+0xc>
   c05fe:	4770      	bx	lr
   c0600:	b510      	push	{r4, lr}
   c0602:	f811 4b01 	ldrb.w	r4, [r1], #1
   c0606:	f803 4f01 	strb.w	r4, [r3, #1]!
   c060a:	4291      	cmp	r1, r2
   c060c:	d1f9      	bne.n	c0602 <memcpy+0xe>
   c060e:	bd10      	pop	{r4, pc}

000c0610 <memmove>:
   c0610:	4288      	cmp	r0, r1
   c0612:	b510      	push	{r4, lr}
   c0614:	eb01 0402 	add.w	r4, r1, r2
   c0618:	d902      	bls.n	c0620 <memmove+0x10>
   c061a:	4284      	cmp	r4, r0
   c061c:	4623      	mov	r3, r4
   c061e:	d807      	bhi.n	c0630 <memmove+0x20>
   c0620:	1e43      	subs	r3, r0, #1
   c0622:	42a1      	cmp	r1, r4
   c0624:	d008      	beq.n	c0638 <memmove+0x28>
   c0626:	f811 2b01 	ldrb.w	r2, [r1], #1
   c062a:	f803 2f01 	strb.w	r2, [r3, #1]!
   c062e:	e7f8      	b.n	c0622 <memmove+0x12>
   c0630:	4402      	add	r2, r0
   c0632:	4601      	mov	r1, r0
   c0634:	428a      	cmp	r2, r1
   c0636:	d100      	bne.n	c063a <memmove+0x2a>
   c0638:	bd10      	pop	{r4, pc}
   c063a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c063e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c0642:	e7f7      	b.n	c0634 <memmove+0x24>

000c0644 <memset>:
   c0644:	4402      	add	r2, r0
   c0646:	4603      	mov	r3, r0
   c0648:	4293      	cmp	r3, r2
   c064a:	d100      	bne.n	c064e <memset+0xa>
   c064c:	4770      	bx	lr
   c064e:	f803 1b01 	strb.w	r1, [r3], #1
   c0652:	e7f9      	b.n	c0648 <memset+0x4>

000c0654 <srand>:
   c0654:	b538      	push	{r3, r4, r5, lr}
   c0656:	4b10      	ldr	r3, [pc, #64]	; (c0698 <srand+0x44>)
   c0658:	681d      	ldr	r5, [r3, #0]
   c065a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c065c:	4604      	mov	r4, r0
   c065e:	b9b3      	cbnz	r3, c068e <srand+0x3a>
   c0660:	2018      	movs	r0, #24
   c0662:	f7fc f87b 	bl	bc75c <malloc>
   c0666:	4602      	mov	r2, r0
   c0668:	63a8      	str	r0, [r5, #56]	; 0x38
   c066a:	b920      	cbnz	r0, c0676 <srand+0x22>
   c066c:	4b0b      	ldr	r3, [pc, #44]	; (c069c <srand+0x48>)
   c066e:	480c      	ldr	r0, [pc, #48]	; (c06a0 <srand+0x4c>)
   c0670:	2142      	movs	r1, #66	; 0x42
   c0672:	f7fc f8c3 	bl	bc7fc <__assert_func>
   c0676:	490b      	ldr	r1, [pc, #44]	; (c06a4 <srand+0x50>)
   c0678:	4b0b      	ldr	r3, [pc, #44]	; (c06a8 <srand+0x54>)
   c067a:	e9c0 1300 	strd	r1, r3, [r0]
   c067e:	4b0b      	ldr	r3, [pc, #44]	; (c06ac <srand+0x58>)
   c0680:	6083      	str	r3, [r0, #8]
   c0682:	230b      	movs	r3, #11
   c0684:	8183      	strh	r3, [r0, #12]
   c0686:	2100      	movs	r1, #0
   c0688:	2001      	movs	r0, #1
   c068a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c068e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c0690:	2200      	movs	r2, #0
   c0692:	611c      	str	r4, [r3, #16]
   c0694:	615a      	str	r2, [r3, #20]
   c0696:	bd38      	pop	{r3, r4, r5, pc}
   c0698:	2003d76c 	.word	0x2003d76c
   c069c:	000c26ea 	.word	0x000c26ea
   c06a0:	000c275a 	.word	0x000c275a
   c06a4:	abcd330e 	.word	0xabcd330e
   c06a8:	e66d1234 	.word	0xe66d1234
   c06ac:	0005deec 	.word	0x0005deec

000c06b0 <rand>:
   c06b0:	4b16      	ldr	r3, [pc, #88]	; (c070c <rand+0x5c>)
   c06b2:	b510      	push	{r4, lr}
   c06b4:	681c      	ldr	r4, [r3, #0]
   c06b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   c06b8:	b9b3      	cbnz	r3, c06e8 <rand+0x38>
   c06ba:	2018      	movs	r0, #24
   c06bc:	f7fc f84e 	bl	bc75c <malloc>
   c06c0:	63a0      	str	r0, [r4, #56]	; 0x38
   c06c2:	b928      	cbnz	r0, c06d0 <rand+0x20>
   c06c4:	4602      	mov	r2, r0
   c06c6:	4b12      	ldr	r3, [pc, #72]	; (c0710 <rand+0x60>)
   c06c8:	4812      	ldr	r0, [pc, #72]	; (c0714 <rand+0x64>)
   c06ca:	214e      	movs	r1, #78	; 0x4e
   c06cc:	f7fc f896 	bl	bc7fc <__assert_func>
   c06d0:	4a11      	ldr	r2, [pc, #68]	; (c0718 <rand+0x68>)
   c06d2:	4b12      	ldr	r3, [pc, #72]	; (c071c <rand+0x6c>)
   c06d4:	e9c0 2300 	strd	r2, r3, [r0]
   c06d8:	4b11      	ldr	r3, [pc, #68]	; (c0720 <rand+0x70>)
   c06da:	6083      	str	r3, [r0, #8]
   c06dc:	230b      	movs	r3, #11
   c06de:	8183      	strh	r3, [r0, #12]
   c06e0:	2201      	movs	r2, #1
   c06e2:	2300      	movs	r3, #0
   c06e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   c06e8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   c06ea:	4a0e      	ldr	r2, [pc, #56]	; (c0724 <rand+0x74>)
   c06ec:	6920      	ldr	r0, [r4, #16]
   c06ee:	6963      	ldr	r3, [r4, #20]
   c06f0:	490d      	ldr	r1, [pc, #52]	; (c0728 <rand+0x78>)
   c06f2:	4342      	muls	r2, r0
   c06f4:	fb01 2203 	mla	r2, r1, r3, r2
   c06f8:	fba0 0101 	umull	r0, r1, r0, r1
   c06fc:	1c43      	adds	r3, r0, #1
   c06fe:	eb42 0001 	adc.w	r0, r2, r1
   c0702:	e9c4 3004 	strd	r3, r0, [r4, #16]
   c0706:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   c070a:	bd10      	pop	{r4, pc}
   c070c:	2003d76c 	.word	0x2003d76c
   c0710:	000c26ea 	.word	0x000c26ea
   c0714:	000c275a 	.word	0x000c275a
   c0718:	abcd330e 	.word	0xabcd330e
   c071c:	e66d1234 	.word	0xe66d1234
   c0720:	0005deec 	.word	0x0005deec
   c0724:	5851f42d 	.word	0x5851f42d
   c0728:	4c957f2d 	.word	0x4c957f2d

000c072c <strchr>:
   c072c:	b2c9      	uxtb	r1, r1
   c072e:	4603      	mov	r3, r0
   c0730:	f810 2b01 	ldrb.w	r2, [r0], #1
   c0734:	b11a      	cbz	r2, c073e <strchr+0x12>
   c0736:	428a      	cmp	r2, r1
   c0738:	d1f9      	bne.n	c072e <strchr+0x2>
   c073a:	4618      	mov	r0, r3
   c073c:	4770      	bx	lr
   c073e:	2900      	cmp	r1, #0
   c0740:	bf18      	it	ne
   c0742:	2300      	movne	r3, #0
   c0744:	e7f9      	b.n	c073a <strchr+0xe>

000c0746 <strchrnul>:
   c0746:	b510      	push	{r4, lr}
   c0748:	4604      	mov	r4, r0
   c074a:	f7ff ffef 	bl	c072c <strchr>
   c074e:	b918      	cbnz	r0, c0758 <strchrnul+0x12>
   c0750:	4620      	mov	r0, r4
   c0752:	f000 f832 	bl	c07ba <strlen>
   c0756:	4420      	add	r0, r4
   c0758:	bd10      	pop	{r4, pc}

000c075a <strcmp>:
   c075a:	f810 2b01 	ldrb.w	r2, [r0], #1
   c075e:	f811 3b01 	ldrb.w	r3, [r1], #1
   c0762:	2a01      	cmp	r2, #1
   c0764:	bf28      	it	cs
   c0766:	429a      	cmpcs	r2, r3
   c0768:	d0f7      	beq.n	c075a <strcmp>
   c076a:	1ad0      	subs	r0, r2, r3
   c076c:	4770      	bx	lr

000c076e <strcpy>:
   c076e:	4603      	mov	r3, r0
   c0770:	f811 2b01 	ldrb.w	r2, [r1], #1
   c0774:	f803 2b01 	strb.w	r2, [r3], #1
   c0778:	2a00      	cmp	r2, #0
   c077a:	d1f9      	bne.n	c0770 <strcpy+0x2>
   c077c:	4770      	bx	lr
	...

000c0780 <strdup>:
   c0780:	4b02      	ldr	r3, [pc, #8]	; (c078c <strdup+0xc>)
   c0782:	4601      	mov	r1, r0
   c0784:	6818      	ldr	r0, [r3, #0]
   c0786:	f000 b803 	b.w	c0790 <_strdup_r>
   c078a:	bf00      	nop
   c078c:	2003d76c 	.word	0x2003d76c

000c0790 <_strdup_r>:
   c0790:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c0792:	4604      	mov	r4, r0
   c0794:	4608      	mov	r0, r1
   c0796:	460d      	mov	r5, r1
   c0798:	f000 f80f 	bl	c07ba <strlen>
   c079c:	1c42      	adds	r2, r0, #1
   c079e:	4611      	mov	r1, r2
   c07a0:	4620      	mov	r0, r4
   c07a2:	9201      	str	r2, [sp, #4]
   c07a4:	f7fc f81a 	bl	bc7dc <_malloc_r>
   c07a8:	4604      	mov	r4, r0
   c07aa:	b118      	cbz	r0, c07b4 <_strdup_r+0x24>
   c07ac:	9a01      	ldr	r2, [sp, #4]
   c07ae:	4629      	mov	r1, r5
   c07b0:	f7ff ff20 	bl	c05f4 <memcpy>
   c07b4:	4620      	mov	r0, r4
   c07b6:	b003      	add	sp, #12
   c07b8:	bd30      	pop	{r4, r5, pc}

000c07ba <strlen>:
   c07ba:	4603      	mov	r3, r0
   c07bc:	f813 2b01 	ldrb.w	r2, [r3], #1
   c07c0:	2a00      	cmp	r2, #0
   c07c2:	d1fb      	bne.n	c07bc <strlen+0x2>
   c07c4:	1a18      	subs	r0, r3, r0
   c07c6:	3801      	subs	r0, #1
   c07c8:	4770      	bx	lr

000c07ca <strncmp>:
   c07ca:	b510      	push	{r4, lr}
   c07cc:	b17a      	cbz	r2, c07ee <strncmp+0x24>
   c07ce:	4603      	mov	r3, r0
   c07d0:	3901      	subs	r1, #1
   c07d2:	1884      	adds	r4, r0, r2
   c07d4:	f813 0b01 	ldrb.w	r0, [r3], #1
   c07d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c07dc:	4290      	cmp	r0, r2
   c07de:	d101      	bne.n	c07e4 <strncmp+0x1a>
   c07e0:	42a3      	cmp	r3, r4
   c07e2:	d101      	bne.n	c07e8 <strncmp+0x1e>
   c07e4:	1a80      	subs	r0, r0, r2
   c07e6:	bd10      	pop	{r4, pc}
   c07e8:	2800      	cmp	r0, #0
   c07ea:	d1f3      	bne.n	c07d4 <strncmp+0xa>
   c07ec:	e7fa      	b.n	c07e4 <strncmp+0x1a>
   c07ee:	4610      	mov	r0, r2
   c07f0:	e7f9      	b.n	c07e6 <strncmp+0x1c>

000c07f2 <strncpy>:
   c07f2:	b510      	push	{r4, lr}
   c07f4:	3901      	subs	r1, #1
   c07f6:	4603      	mov	r3, r0
   c07f8:	b132      	cbz	r2, c0808 <strncpy+0x16>
   c07fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c07fe:	f803 4b01 	strb.w	r4, [r3], #1
   c0802:	3a01      	subs	r2, #1
   c0804:	2c00      	cmp	r4, #0
   c0806:	d1f7      	bne.n	c07f8 <strncpy+0x6>
   c0808:	441a      	add	r2, r3
   c080a:	2100      	movs	r1, #0
   c080c:	4293      	cmp	r3, r2
   c080e:	d100      	bne.n	c0812 <strncpy+0x20>
   c0810:	bd10      	pop	{r4, pc}
   c0812:	f803 1b01 	strb.w	r1, [r3], #1
   c0816:	e7f9      	b.n	c080c <strncpy+0x1a>

000c0818 <strrchr>:
   c0818:	b538      	push	{r3, r4, r5, lr}
   c081a:	4603      	mov	r3, r0
   c081c:	460c      	mov	r4, r1
   c081e:	b969      	cbnz	r1, c083c <strrchr+0x24>
   c0820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c0824:	f7ff bf82 	b.w	c072c <strchr>
   c0828:	1c43      	adds	r3, r0, #1
   c082a:	4605      	mov	r5, r0
   c082c:	4621      	mov	r1, r4
   c082e:	4618      	mov	r0, r3
   c0830:	f7ff ff7c 	bl	c072c <strchr>
   c0834:	2800      	cmp	r0, #0
   c0836:	d1f7      	bne.n	c0828 <strrchr+0x10>
   c0838:	4628      	mov	r0, r5
   c083a:	bd38      	pop	{r3, r4, r5, pc}
   c083c:	2500      	movs	r5, #0
   c083e:	e7f5      	b.n	c082c <strrchr+0x14>

000c0840 <__strtok_r>:
   c0840:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0842:	b908      	cbnz	r0, c0848 <__strtok_r+0x8>
   c0844:	6810      	ldr	r0, [r2, #0]
   c0846:	b188      	cbz	r0, c086c <__strtok_r+0x2c>
   c0848:	4604      	mov	r4, r0
   c084a:	4620      	mov	r0, r4
   c084c:	f814 5b01 	ldrb.w	r5, [r4], #1
   c0850:	460f      	mov	r7, r1
   c0852:	f817 6b01 	ldrb.w	r6, [r7], #1
   c0856:	b91e      	cbnz	r6, c0860 <__strtok_r+0x20>
   c0858:	b965      	cbnz	r5, c0874 <__strtok_r+0x34>
   c085a:	6015      	str	r5, [r2, #0]
   c085c:	4628      	mov	r0, r5
   c085e:	e005      	b.n	c086c <__strtok_r+0x2c>
   c0860:	42b5      	cmp	r5, r6
   c0862:	d1f6      	bne.n	c0852 <__strtok_r+0x12>
   c0864:	2b00      	cmp	r3, #0
   c0866:	d1f0      	bne.n	c084a <__strtok_r+0xa>
   c0868:	6014      	str	r4, [r2, #0]
   c086a:	7003      	strb	r3, [r0, #0]
   c086c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c086e:	461c      	mov	r4, r3
   c0870:	e00c      	b.n	c088c <__strtok_r+0x4c>
   c0872:	b915      	cbnz	r5, c087a <__strtok_r+0x3a>
   c0874:	f814 3b01 	ldrb.w	r3, [r4], #1
   c0878:	460e      	mov	r6, r1
   c087a:	f816 5b01 	ldrb.w	r5, [r6], #1
   c087e:	42ab      	cmp	r3, r5
   c0880:	d1f7      	bne.n	c0872 <__strtok_r+0x32>
   c0882:	2b00      	cmp	r3, #0
   c0884:	d0f3      	beq.n	c086e <__strtok_r+0x2e>
   c0886:	2300      	movs	r3, #0
   c0888:	f804 3c01 	strb.w	r3, [r4, #-1]
   c088c:	6014      	str	r4, [r2, #0]
   c088e:	e7ed      	b.n	c086c <__strtok_r+0x2c>

000c0890 <strtok_r>:
   c0890:	2301      	movs	r3, #1
   c0892:	f7ff bfd5 	b.w	c0840 <__strtok_r>
	...

000c0898 <_strtol_l.constprop.0>:
   c0898:	2b01      	cmp	r3, #1
   c089a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c089e:	d001      	beq.n	c08a4 <_strtol_l.constprop.0+0xc>
   c08a0:	2b24      	cmp	r3, #36	; 0x24
   c08a2:	d906      	bls.n	c08b2 <_strtol_l.constprop.0+0x1a>
   c08a4:	f7fb ffa2 	bl	bc7ec <__errno>
   c08a8:	2316      	movs	r3, #22
   c08aa:	6003      	str	r3, [r0, #0]
   c08ac:	2000      	movs	r0, #0
   c08ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c08b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c0998 <_strtol_l.constprop.0+0x100>
   c08b6:	460d      	mov	r5, r1
   c08b8:	462e      	mov	r6, r5
   c08ba:	f815 4b01 	ldrb.w	r4, [r5], #1
   c08be:	f814 700c 	ldrb.w	r7, [r4, ip]
   c08c2:	f017 0708 	ands.w	r7, r7, #8
   c08c6:	d1f7      	bne.n	c08b8 <_strtol_l.constprop.0+0x20>
   c08c8:	2c2d      	cmp	r4, #45	; 0x2d
   c08ca:	d132      	bne.n	c0932 <_strtol_l.constprop.0+0x9a>
   c08cc:	782c      	ldrb	r4, [r5, #0]
   c08ce:	2701      	movs	r7, #1
   c08d0:	1cb5      	adds	r5, r6, #2
   c08d2:	2b00      	cmp	r3, #0
   c08d4:	d05b      	beq.n	c098e <_strtol_l.constprop.0+0xf6>
   c08d6:	2b10      	cmp	r3, #16
   c08d8:	d109      	bne.n	c08ee <_strtol_l.constprop.0+0x56>
   c08da:	2c30      	cmp	r4, #48	; 0x30
   c08dc:	d107      	bne.n	c08ee <_strtol_l.constprop.0+0x56>
   c08de:	782c      	ldrb	r4, [r5, #0]
   c08e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c08e4:	2c58      	cmp	r4, #88	; 0x58
   c08e6:	d14d      	bne.n	c0984 <_strtol_l.constprop.0+0xec>
   c08e8:	786c      	ldrb	r4, [r5, #1]
   c08ea:	2310      	movs	r3, #16
   c08ec:	3502      	adds	r5, #2
   c08ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c08f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c08f6:	f04f 0c00 	mov.w	ip, #0
   c08fa:	fbb8 f9f3 	udiv	r9, r8, r3
   c08fe:	4666      	mov	r6, ip
   c0900:	fb03 8a19 	mls	sl, r3, r9, r8
   c0904:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c0908:	f1be 0f09 	cmp.w	lr, #9
   c090c:	d816      	bhi.n	c093c <_strtol_l.constprop.0+0xa4>
   c090e:	4674      	mov	r4, lr
   c0910:	42a3      	cmp	r3, r4
   c0912:	dd24      	ble.n	c095e <_strtol_l.constprop.0+0xc6>
   c0914:	f1bc 0f00 	cmp.w	ip, #0
   c0918:	db1e      	blt.n	c0958 <_strtol_l.constprop.0+0xc0>
   c091a:	45b1      	cmp	r9, r6
   c091c:	d31c      	bcc.n	c0958 <_strtol_l.constprop.0+0xc0>
   c091e:	d101      	bne.n	c0924 <_strtol_l.constprop.0+0x8c>
   c0920:	45a2      	cmp	sl, r4
   c0922:	db19      	blt.n	c0958 <_strtol_l.constprop.0+0xc0>
   c0924:	fb06 4603 	mla	r6, r6, r3, r4
   c0928:	f04f 0c01 	mov.w	ip, #1
   c092c:	f815 4b01 	ldrb.w	r4, [r5], #1
   c0930:	e7e8      	b.n	c0904 <_strtol_l.constprop.0+0x6c>
   c0932:	2c2b      	cmp	r4, #43	; 0x2b
   c0934:	bf04      	itt	eq
   c0936:	782c      	ldrbeq	r4, [r5, #0]
   c0938:	1cb5      	addeq	r5, r6, #2
   c093a:	e7ca      	b.n	c08d2 <_strtol_l.constprop.0+0x3a>
   c093c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c0940:	f1be 0f19 	cmp.w	lr, #25
   c0944:	d801      	bhi.n	c094a <_strtol_l.constprop.0+0xb2>
   c0946:	3c37      	subs	r4, #55	; 0x37
   c0948:	e7e2      	b.n	c0910 <_strtol_l.constprop.0+0x78>
   c094a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c094e:	f1be 0f19 	cmp.w	lr, #25
   c0952:	d804      	bhi.n	c095e <_strtol_l.constprop.0+0xc6>
   c0954:	3c57      	subs	r4, #87	; 0x57
   c0956:	e7db      	b.n	c0910 <_strtol_l.constprop.0+0x78>
   c0958:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c095c:	e7e6      	b.n	c092c <_strtol_l.constprop.0+0x94>
   c095e:	f1bc 0f00 	cmp.w	ip, #0
   c0962:	da05      	bge.n	c0970 <_strtol_l.constprop.0+0xd8>
   c0964:	2322      	movs	r3, #34	; 0x22
   c0966:	6003      	str	r3, [r0, #0]
   c0968:	4646      	mov	r6, r8
   c096a:	b942      	cbnz	r2, c097e <_strtol_l.constprop.0+0xe6>
   c096c:	4630      	mov	r0, r6
   c096e:	e79e      	b.n	c08ae <_strtol_l.constprop.0+0x16>
   c0970:	b107      	cbz	r7, c0974 <_strtol_l.constprop.0+0xdc>
   c0972:	4276      	negs	r6, r6
   c0974:	2a00      	cmp	r2, #0
   c0976:	d0f9      	beq.n	c096c <_strtol_l.constprop.0+0xd4>
   c0978:	f1bc 0f00 	cmp.w	ip, #0
   c097c:	d000      	beq.n	c0980 <_strtol_l.constprop.0+0xe8>
   c097e:	1e69      	subs	r1, r5, #1
   c0980:	6011      	str	r1, [r2, #0]
   c0982:	e7f3      	b.n	c096c <_strtol_l.constprop.0+0xd4>
   c0984:	2430      	movs	r4, #48	; 0x30
   c0986:	2b00      	cmp	r3, #0
   c0988:	d1b1      	bne.n	c08ee <_strtol_l.constprop.0+0x56>
   c098a:	2308      	movs	r3, #8
   c098c:	e7af      	b.n	c08ee <_strtol_l.constprop.0+0x56>
   c098e:	2c30      	cmp	r4, #48	; 0x30
   c0990:	d0a5      	beq.n	c08de <_strtol_l.constprop.0+0x46>
   c0992:	230a      	movs	r3, #10
   c0994:	e7ab      	b.n	c08ee <_strtol_l.constprop.0+0x56>
   c0996:	bf00      	nop
   c0998:	000c27b4 	.word	0x000c27b4

000c099c <strtol>:
   c099c:	4613      	mov	r3, r2
   c099e:	460a      	mov	r2, r1
   c09a0:	4601      	mov	r1, r0
   c09a2:	4802      	ldr	r0, [pc, #8]	; (c09ac <strtol+0x10>)
   c09a4:	6800      	ldr	r0, [r0, #0]
   c09a6:	f7ff bf77 	b.w	c0898 <_strtol_l.constprop.0>
   c09aa:	bf00      	nop
   c09ac:	2003d76c 	.word	0x2003d76c

000c09b0 <close>:
   c09b0:	4b02      	ldr	r3, [pc, #8]	; (c09bc <close+0xc>)
   c09b2:	4601      	mov	r1, r0
   c09b4:	6818      	ldr	r0, [r3, #0]
   c09b6:	f000 b8c9 	b.w	c0b4c <_close_r>
   c09ba:	bf00      	nop
   c09bc:	2003d76c 	.word	0x2003d76c

000c09c0 <fstat>:
   c09c0:	4b02      	ldr	r3, [pc, #8]	; (c09cc <fstat+0xc>)
   c09c2:	460a      	mov	r2, r1
   c09c4:	4601      	mov	r1, r0
   c09c6:	6818      	ldr	r0, [r3, #0]
   c09c8:	f000 b8d0 	b.w	c0b6c <_fstat_r>
   c09cc:	2003d76c 	.word	0x2003d76c

000c09d0 <lseek>:
   c09d0:	4613      	mov	r3, r2
   c09d2:	460a      	mov	r2, r1
   c09d4:	4601      	mov	r1, r0
   c09d6:	4802      	ldr	r0, [pc, #8]	; (c09e0 <lseek+0x10>)
   c09d8:	6800      	ldr	r0, [r0, #0]
   c09da:	f000 b8dd 	b.w	c0b98 <_lseek_r>
   c09de:	bf00      	nop
   c09e0:	2003d76c 	.word	0x2003d76c

000c09e4 <open>:
   c09e4:	b40e      	push	{r1, r2, r3}
   c09e6:	b503      	push	{r0, r1, lr}
   c09e8:	ab03      	add	r3, sp, #12
   c09ea:	4601      	mov	r1, r0
   c09ec:	4806      	ldr	r0, [pc, #24]	; (c0a08 <open+0x24>)
   c09ee:	f853 2b04 	ldr.w	r2, [r3], #4
   c09f2:	9301      	str	r3, [sp, #4]
   c09f4:	6800      	ldr	r0, [r0, #0]
   c09f6:	9b04      	ldr	r3, [sp, #16]
   c09f8:	f000 f8e0 	bl	c0bbc <_open_r>
   c09fc:	b002      	add	sp, #8
   c09fe:	f85d eb04 	ldr.w	lr, [sp], #4
   c0a02:	b003      	add	sp, #12
   c0a04:	4770      	bx	lr
   c0a06:	bf00      	nop
   c0a08:	2003d76c 	.word	0x2003d76c

000c0a0c <read>:
   c0a0c:	4613      	mov	r3, r2
   c0a0e:	460a      	mov	r2, r1
   c0a10:	4601      	mov	r1, r0
   c0a12:	4802      	ldr	r0, [pc, #8]	; (c0a1c <read+0x10>)
   c0a14:	6800      	ldr	r0, [r0, #0]
   c0a16:	f000 b8e3 	b.w	c0be0 <_read_r>
   c0a1a:	bf00      	nop
   c0a1c:	2003d76c 	.word	0x2003d76c

000c0a20 <unlink>:
   c0a20:	4b02      	ldr	r3, [pc, #8]	; (c0a2c <unlink+0xc>)
   c0a22:	4601      	mov	r1, r0
   c0a24:	6818      	ldr	r0, [r3, #0]
   c0a26:	f000 b80d 	b.w	c0a44 <_unlink_r>
   c0a2a:	bf00      	nop
   c0a2c:	2003d76c 	.word	0x2003d76c

000c0a30 <write>:
   c0a30:	4613      	mov	r3, r2
   c0a32:	460a      	mov	r2, r1
   c0a34:	4601      	mov	r1, r0
   c0a36:	4802      	ldr	r0, [pc, #8]	; (c0a40 <write+0x10>)
   c0a38:	6800      	ldr	r0, [r0, #0]
   c0a3a:	f000 b813 	b.w	c0a64 <_write_r>
   c0a3e:	bf00      	nop
   c0a40:	2003d76c 	.word	0x2003d76c

000c0a44 <_unlink_r>:
   c0a44:	b538      	push	{r3, r4, r5, lr}
   c0a46:	4d06      	ldr	r5, [pc, #24]	; (c0a60 <_unlink_r+0x1c>)
   c0a48:	2300      	movs	r3, #0
   c0a4a:	4604      	mov	r4, r0
   c0a4c:	4608      	mov	r0, r1
   c0a4e:	602b      	str	r3, [r5, #0]
   c0a50:	f7fb fc60 	bl	bc314 <_unlink>
   c0a54:	1c43      	adds	r3, r0, #1
   c0a56:	d102      	bne.n	c0a5e <_unlink_r+0x1a>
   c0a58:	682b      	ldr	r3, [r5, #0]
   c0a5a:	b103      	cbz	r3, c0a5e <_unlink_r+0x1a>
   c0a5c:	6023      	str	r3, [r4, #0]
   c0a5e:	bd38      	pop	{r3, r4, r5, pc}
   c0a60:	2003e7f0 	.word	0x2003e7f0

000c0a64 <_write_r>:
   c0a64:	b538      	push	{r3, r4, r5, lr}
   c0a66:	4d07      	ldr	r5, [pc, #28]	; (c0a84 <_write_r+0x20>)
   c0a68:	4604      	mov	r4, r0
   c0a6a:	4608      	mov	r0, r1
   c0a6c:	4611      	mov	r1, r2
   c0a6e:	2200      	movs	r2, #0
   c0a70:	602a      	str	r2, [r5, #0]
   c0a72:	461a      	mov	r2, r3
   c0a74:	f7fb fc16 	bl	bc2a4 <_write>
   c0a78:	1c43      	adds	r3, r0, #1
   c0a7a:	d102      	bne.n	c0a82 <_write_r+0x1e>
   c0a7c:	682b      	ldr	r3, [r5, #0]
   c0a7e:	b103      	cbz	r3, c0a82 <_write_r+0x1e>
   c0a80:	6023      	str	r3, [r4, #0]
   c0a82:	bd38      	pop	{r3, r4, r5, pc}
   c0a84:	2003e7f0 	.word	0x2003e7f0

000c0a88 <__register_exitproc>:
   c0a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c0a8c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c0b48 <__register_exitproc+0xc0>
   c0a90:	4606      	mov	r6, r0
   c0a92:	f8d8 0000 	ldr.w	r0, [r8]
   c0a96:	461f      	mov	r7, r3
   c0a98:	460d      	mov	r5, r1
   c0a9a:	4691      	mov	r9, r2
   c0a9c:	f000 f878 	bl	c0b90 <__retarget_lock_acquire_recursive>
   c0aa0:	4b25      	ldr	r3, [pc, #148]	; (c0b38 <__register_exitproc+0xb0>)
   c0aa2:	681c      	ldr	r4, [r3, #0]
   c0aa4:	b934      	cbnz	r4, c0ab4 <__register_exitproc+0x2c>
   c0aa6:	4c25      	ldr	r4, [pc, #148]	; (c0b3c <__register_exitproc+0xb4>)
   c0aa8:	601c      	str	r4, [r3, #0]
   c0aaa:	4b25      	ldr	r3, [pc, #148]	; (c0b40 <__register_exitproc+0xb8>)
   c0aac:	b113      	cbz	r3, c0ab4 <__register_exitproc+0x2c>
   c0aae:	681b      	ldr	r3, [r3, #0]
   c0ab0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c0ab4:	6863      	ldr	r3, [r4, #4]
   c0ab6:	2b1f      	cmp	r3, #31
   c0ab8:	dd07      	ble.n	c0aca <__register_exitproc+0x42>
   c0aba:	f8d8 0000 	ldr.w	r0, [r8]
   c0abe:	f000 f869 	bl	c0b94 <__retarget_lock_release_recursive>
   c0ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c0ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c0aca:	b34e      	cbz	r6, c0b20 <__register_exitproc+0x98>
   c0acc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c0ad0:	b988      	cbnz	r0, c0af6 <__register_exitproc+0x6e>
   c0ad2:	4b1c      	ldr	r3, [pc, #112]	; (c0b44 <__register_exitproc+0xbc>)
   c0ad4:	b923      	cbnz	r3, c0ae0 <__register_exitproc+0x58>
   c0ad6:	f8d8 0000 	ldr.w	r0, [r8]
   c0ada:	f000 f85a 	bl	c0b92 <__retarget_lock_release>
   c0ade:	e7f0      	b.n	c0ac2 <__register_exitproc+0x3a>
   c0ae0:	f44f 7084 	mov.w	r0, #264	; 0x108
   c0ae4:	f7fb fe3a 	bl	bc75c <malloc>
   c0ae8:	2800      	cmp	r0, #0
   c0aea:	d0f4      	beq.n	c0ad6 <__register_exitproc+0x4e>
   c0aec:	2300      	movs	r3, #0
   c0aee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c0af2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c0af6:	6863      	ldr	r3, [r4, #4]
   c0af8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c0afc:	2201      	movs	r2, #1
   c0afe:	409a      	lsls	r2, r3
   c0b00:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c0b04:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c0b08:	4313      	orrs	r3, r2
   c0b0a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c0b0e:	2e02      	cmp	r6, #2
   c0b10:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c0b14:	bf02      	ittt	eq
   c0b16:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c0b1a:	4313      	orreq	r3, r2
   c0b1c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c0b20:	6863      	ldr	r3, [r4, #4]
   c0b22:	f8d8 0000 	ldr.w	r0, [r8]
   c0b26:	1c5a      	adds	r2, r3, #1
   c0b28:	3302      	adds	r3, #2
   c0b2a:	6062      	str	r2, [r4, #4]
   c0b2c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c0b30:	f000 f830 	bl	c0b94 <__retarget_lock_release_recursive>
   c0b34:	2000      	movs	r0, #0
   c0b36:	e7c6      	b.n	c0ac6 <__register_exitproc+0x3e>
   c0b38:	2003e7e8 	.word	0x2003e7e8
   c0b3c:	2003e75c 	.word	0x2003e75c
   c0b40:	00000000 	.word	0x00000000
   c0b44:	000bc75d 	.word	0x000bc75d
   c0b48:	2003d7d0 	.word	0x2003d7d0

000c0b4c <_close_r>:
   c0b4c:	b538      	push	{r3, r4, r5, lr}
   c0b4e:	4d06      	ldr	r5, [pc, #24]	; (c0b68 <_close_r+0x1c>)
   c0b50:	2300      	movs	r3, #0
   c0b52:	4604      	mov	r4, r0
   c0b54:	4608      	mov	r0, r1
   c0b56:	602b      	str	r3, [r5, #0]
   c0b58:	f7fb fbb4 	bl	bc2c4 <_close>
   c0b5c:	1c43      	adds	r3, r0, #1
   c0b5e:	d102      	bne.n	c0b66 <_close_r+0x1a>
   c0b60:	682b      	ldr	r3, [r5, #0]
   c0b62:	b103      	cbz	r3, c0b66 <_close_r+0x1a>
   c0b64:	6023      	str	r3, [r4, #0]
   c0b66:	bd38      	pop	{r3, r4, r5, pc}
   c0b68:	2003e7f0 	.word	0x2003e7f0

000c0b6c <_fstat_r>:
   c0b6c:	b538      	push	{r3, r4, r5, lr}
   c0b6e:	4d07      	ldr	r5, [pc, #28]	; (c0b8c <_fstat_r+0x20>)
   c0b70:	2300      	movs	r3, #0
   c0b72:	4604      	mov	r4, r0
   c0b74:	4608      	mov	r0, r1
   c0b76:	4611      	mov	r1, r2
   c0b78:	602b      	str	r3, [r5, #0]
   c0b7a:	f7fb fbab 	bl	bc2d4 <_fstat>
   c0b7e:	1c43      	adds	r3, r0, #1
   c0b80:	d102      	bne.n	c0b88 <_fstat_r+0x1c>
   c0b82:	682b      	ldr	r3, [r5, #0]
   c0b84:	b103      	cbz	r3, c0b88 <_fstat_r+0x1c>
   c0b86:	6023      	str	r3, [r4, #0]
   c0b88:	bd38      	pop	{r3, r4, r5, pc}
   c0b8a:	bf00      	nop
   c0b8c:	2003e7f0 	.word	0x2003e7f0

000c0b90 <__retarget_lock_acquire_recursive>:
   c0b90:	4770      	bx	lr

000c0b92 <__retarget_lock_release>:
   c0b92:	4770      	bx	lr

000c0b94 <__retarget_lock_release_recursive>:
   c0b94:	4770      	bx	lr
	...

000c0b98 <_lseek_r>:
   c0b98:	b538      	push	{r3, r4, r5, lr}
   c0b9a:	4d07      	ldr	r5, [pc, #28]	; (c0bb8 <_lseek_r+0x20>)
   c0b9c:	4604      	mov	r4, r0
   c0b9e:	4608      	mov	r0, r1
   c0ba0:	4611      	mov	r1, r2
   c0ba2:	2200      	movs	r2, #0
   c0ba4:	602a      	str	r2, [r5, #0]
   c0ba6:	461a      	mov	r2, r3
   c0ba8:	f7fb fb9c 	bl	bc2e4 <_lseek>
   c0bac:	1c43      	adds	r3, r0, #1
   c0bae:	d102      	bne.n	c0bb6 <_lseek_r+0x1e>
   c0bb0:	682b      	ldr	r3, [r5, #0]
   c0bb2:	b103      	cbz	r3, c0bb6 <_lseek_r+0x1e>
   c0bb4:	6023      	str	r3, [r4, #0]
   c0bb6:	bd38      	pop	{r3, r4, r5, pc}
   c0bb8:	2003e7f0 	.word	0x2003e7f0

000c0bbc <_open_r>:
   c0bbc:	b538      	push	{r3, r4, r5, lr}
   c0bbe:	4d07      	ldr	r5, [pc, #28]	; (c0bdc <_open_r+0x20>)
   c0bc0:	4604      	mov	r4, r0
   c0bc2:	4608      	mov	r0, r1
   c0bc4:	4611      	mov	r1, r2
   c0bc6:	2200      	movs	r2, #0
   c0bc8:	602a      	str	r2, [r5, #0]
   c0bca:	461a      	mov	r2, r3
   c0bcc:	f7fb fb62 	bl	bc294 <_open>
   c0bd0:	1c43      	adds	r3, r0, #1
   c0bd2:	d102      	bne.n	c0bda <_open_r+0x1e>
   c0bd4:	682b      	ldr	r3, [r5, #0]
   c0bd6:	b103      	cbz	r3, c0bda <_open_r+0x1e>
   c0bd8:	6023      	str	r3, [r4, #0]
   c0bda:	bd38      	pop	{r3, r4, r5, pc}
   c0bdc:	2003e7f0 	.word	0x2003e7f0

000c0be0 <_read_r>:
   c0be0:	b538      	push	{r3, r4, r5, lr}
   c0be2:	4d07      	ldr	r5, [pc, #28]	; (c0c00 <_read_r+0x20>)
   c0be4:	4604      	mov	r4, r0
   c0be6:	4608      	mov	r0, r1
   c0be8:	4611      	mov	r1, r2
   c0bea:	2200      	movs	r2, #0
   c0bec:	602a      	str	r2, [r5, #0]
   c0bee:	461a      	mov	r2, r3
   c0bf0:	f7fb fb60 	bl	bc2b4 <_read>
   c0bf4:	1c43      	adds	r3, r0, #1
   c0bf6:	d102      	bne.n	c0bfe <_read_r+0x1e>
   c0bf8:	682b      	ldr	r3, [r5, #0]
   c0bfa:	b103      	cbz	r3, c0bfe <_read_r+0x1e>
   c0bfc:	6023      	str	r3, [r4, #0]
   c0bfe:	bd38      	pop	{r3, r4, r5, pc}
   c0c00:	2003e7f0 	.word	0x2003e7f0

000c0c04 <dynalib_user>:
   c0c04:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   c0c14:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   c0c24:	72697620 6c617574 696e6900 61662074      virtual.init fa
   c0c34:	64656c69 526f4c00 61522041 206f6964     iled.LoRA Radio 
   c0c44:	74696e69 696c6169 2064657a 61207361     initialized as a
   c0c54:	74616720 79617765 74697720 20612068      gateway with a 
   c0c64:	69766564 44496563 20666f20 4c007325     deviceID of %s.L
   c0c74:	2041526f 69646152 6e69206f 61697469     oRA Radio initia
   c0c84:	657a696c 73612064 646f6e20 69252065     lized as node %i
   c0c94:	646e6120 64206120 63697665 20444965      and a deviceID 
   c0ca4:	2520666f 6f4c0073 52204152 6f696461     of %s.LoRA Radio
   c0cb4:	696e6920 6c616974 64657a69 20736120      initialized as 
   c0cc4:	75206e61 6e6f636e 75676966 20646572     an unconfigured 
   c0cd4:	65646f6e 20692520 20646e61 65642061     node %i and a de
   c0ce4:	65636976 6f204449 73252066 72615000     viceID of %s.Par
   c0cf4:	20646573 63637553 66737365 796c6c75     sed Successfully
   c0d04:	72615000 676e6973 72726520 4400726f     .Parsing error.D
   c0d14:	70696365 65726568 61642064 72206174     eciphered data r
   c0d24:	726f7065 64252074 6f726620 6f6e206d     eport %d from no
   c0d34:	25206564 65440064 68706963 64657265     de %d.Deciphered
   c0d44:	656c6120 72207472 726f7065 72662074      alert report fr
   c0d54:	6e206d6f 2065646f 53006425 20746e65     om node %d.Sent 
   c0d64:	6e6b6361 656c776f 656d6764 7420746e     acknowledgment t
   c0d74:	6f4e206f 25206564 74202c64 20656d69     o Node %d, time 
   c0d84:	7325203d 646e6120 65726620 6e657571     = %s and frequen
   c0d94:	25207963 696d2064 6574756e 65520073     cy %d minutes.Re
   c0da4:	6e6f7073 6e206573 6120746f 6f6e6b63     sponse not ackno
   c0db4:	64656c77 00646567 65646f6e 756e0073     wledged.nodes.nu
   c0dc4:	64006c6c 4e004449 2065646f 626d756e     ll.dID.Node numb
   c0dd4:	6e207265 6620746f 646e756f 6e655300     er not found.Sen
   c0de4:	65722074 6e6f7073 74206573 6573206f     t response to se
   c0df4:	726f736e 65707954 20642520 65646f6e     nsorType %d node
   c0e04:	2c642520 6d697420 203d2065 61207325      %d, time = %s a
   c0e14:	6620646e 75716572 79636e65 20642520     nd frequency %d 
   c0e24:	756e696d 00736574 70736552 65736e6f     minutes.Response
   c0e34:	63657220 65766965 75732064 73656363      received succes
   c0e44:	6c756673 5000796c 746e6972 646f4e20     sfully.Print Nod
   c0e54:	65722065 746c7573 614c003a 65207473     e result:.Last e
   c0e64:	7972746e 20746120 203d2069 6e006425     ntry at i = %d.n
   c0e74:	0065646f 7473616c 646f4e00 64252065     ode.last.Node %d
   c0e84:	6564202c 65636976 203a4449 202c7325     , deviceID: %s, 
   c0e94:	7473616c 6e6e6f43 65746365 25203a64     lastConnected: %
   c0ea4:	74202c73 20657079 6e006425 4465646f     s, type %d.nodeD
   c0eb4:	00617461 65686e75 68746c61 6f4e0079     ata.unhealthy.No
   c0ec4:	63206564 656e6e6f 6f697463 7369206e     de connection is
   c0ed4:	20732520 646f4e00 6f632065 63656e6e      %s .Node connec
   c0ee4:	6e6f6974 686e7520 746c6165 202c7968     tion unhealthy, 
   c0ef4:	65736572 676e6974 526f4c20 61722041     reseting LoRA ra
   c0f04:	006f6964 646e6966 65646f4e 626d754e     dio.findNodeNumb
   c0f14:	72207265 6f206e61 6f207475 6e652066     er ran out of en
   c0f24:	65697274 74612073 3d206920 00642520     tries at i = %d.
   c0f34:	2077654e 65646f6e 6c697720 6562206c     New node will be
   c0f44:	73736120 656e6769 756e2064 7265626d      assigned number
   c0f54:	2c642520 76656420 49656369 666f2044      %d, deviceID of
   c0f64:	20732520 20646e61 65707974 20666f20      %s and type of 
   c0f74:	65520033 6e727574 20676e69 65646e69     3.Returning inde
   c0f84:	64252078 696f4a00 6572206e 73657571     x %d.Join reques
   c0f94:	72662074 55206d6f 6e6f636e 75676966     t from Unconfigu
   c0fa4:	20646572 65646f6e 20732520 6c6c6977     red node %s will
   c0fb4:	61686320 2065676e 65646f6e 6d756e20      change node num
   c0fc4:	20726562 6d6f7266 20642520 25206f74     ber from %d to %
   c0fd4:	6f4a0064 72206e69 65757165 66207473     d.Join request f
   c0fe4:	206d6f72 77207325 20687469 65646f6e     rom %s with node
   c0ff4:	20642520 6573202d 6e697474 6c632067      %d - setting cl
   c1004:	206b636f 20646e61 74746573 20676e69     ock and setting 
   c1014:	736e6573 7954726f 74206570 6425206f     sensorType to %d
   c1024:	73614c00 6f632074 63656e6e 20646574     .Last connected 
   c1034:	61647075 20646574 20726f66 65646f6e     updated for node
   c1044:	20642520 6d6f7266 20692520 25206f74      %d from %i to %
   c1054:	6d00696c 6f637369 6769666e 64657275     li.misconfigured
   c1064:	61440020 41206174 202d6b63 65646f4e      .Data Ack- Node
   c1074:	6d756e20 20726562 76206425 64696c61      number %d valid
   c1084:	74614400 63412061 202d206b 65646f4e     .Data Ack - Node
   c1094:	6d756e20 20726562 69206425 6e692073      number %d is in
   c10a4:	696c6176 202d2064 65736572 6e697474     valid - resettin
   c10b4:	63410067 776f6e6b 6d67656c 20746e65     g.Acknowlegment 
   c10c4:	25206f74 646f6e73 64252065 73656d20     to %snode %d mes
   c10d4:	65676173 2c642520 6d697420 203d2065     sage %d, time = 
   c10e4:	61207325 6620646e 75716572 79636e65     %s and frequency
   c10f4:	20642520 756e696d 00736574 70736552      %d minutes.Resp
   c1104:	65736e6f 63657220 65766965 75732064     onse received su
   c1114:	73656363 6c756673 2d20796c 63757320     ccessfully - suc
   c1124:	73736563 74617220 34252065 0066322e     cess rate %4.2f.
   c1134:	70736552 65736e6f 746f6e20 6b636120     Response not ack
   c1144:	6c776f6e 65676465 202d2064 63637573     nowledged - succ
   c1154:	20737365 65746172 2e342520 52006632     ess rate %4.2f.R
   c1164:	6f707365 6e69646e 73752067 20676e69     esponding using 
   c1174:	20656874 6d207325 61737365 74206567     the %s message t
   c1184:	00657079 7373654d 20656761 6967616d     ype.Message magi
   c1194:	756e2063 7265626d 20666f20 64206425     c number of %d d
   c11a4:	6e206469 6d20746f 68637461 65687420     id not match the
   c11b4:	67614d20 4e206369 65626d75 6e692072      Magic Number in
   c11c4:	6d656d20 2079726f 2d206425 6e674920      memory %d - Ign
   c11d4:	6e69726f 72460067 6e206d6f 2065646f     oring.From node 
   c11e4:	77206425 20687469 69737372 2064253d     %d with rssi=%d 
   c11f4:	2061202d 6d207325 61737365 6f206567     - a %s message o
   c1204:	656c2066 6874676e 20642520 25206e69     f length %d in %
   c1214:	6f682064 57007370 72612065 70752065     d hops.We are up
   c1224:	69746164 7420676e 70206568 696c6275     dating the publi
   c1234:	66206873 75716572 79636e65 206f7420     sh frequency to 
   c1244:	6d206925 74756e69 52007365 726f7065     %i minutes.Repor
   c1254:	676e6974 65726620 6e657571 75207963     ting frequency u
   c1264:	6168636e 6465676e 00000000              nchanged....

000c1270 <_ZTV16JsonParserStaticILj1024ELj50EE>:
	...
   c1278:	000b40dd 000b40f1                       .@...@..

000c1280 <_ZTV14LoRA_Functions>:
	...
   c1288:	000b40cd 000b40cf 6f706552 66207472     .@...@..Report f
   c1298:	75716572 79636e65 20642520 736e696d     requency %d mins
   c12a8:	656e202c 65207478 746e6576 206e6920     , next event in 
   c12b8:	20756c25 6f636573 0073646e 6d6f7246     %lu seconds.From
   c12c8:	20732520 25206f74 69772073 69206874      %s to %s with i
   c12d8:	6c61766e 74206469 00656d69 6d6f7246     nvalid time.From
   c12e8:	20732520 25206f74 6f662073 75252072      %s to %s for %u
   c12f8:	63657320 73646e6f 6f724600 7325206d      seconds.From %s
   c1308:	206f7420 55007325 6f6e6b6e 4e006e77      to %s.Unknown.N
   c1318:	4320746f 67726168 00676e69 72616843     ot Charging.Char
   c1328:	00646567 63736944 67726168 00676e69     ged.Discharging.
   c1338:	6c756146 69440074 6e6e6f63 65746365     Fault.Diconnecte
   c1348:	227b0064 69766564 64696563 25223a22     d.{"deviceid":"%
   c1358:	202c2273 756f6822 22796c72 2c75253a     s", "hourly":%u,
   c1368:	61642220 22796c69 2c75253a 65732220      "daily":%u, "se
   c1378:	726f736e 65707974 64253a22 6222202c     nsortype":%d, "b
   c1388:	65747461 3a227972 322e3425 6b222c66     attery":%4.2f,"k
   c1398:	22317965 7325223a 74222c22 22706d65     ey1":"%s","temp"
   c13a8:	2c64253a 65722220 73746573 64253a22     :%d, "resets":%d
   c13b8:	7372222c 3a226973 202c6425 67736d22     ,"rssi":%d, "msg
   c13c8:	64253a22 6974222c 7473656d 22706d61     ":%d,"timestamp"
   c13d8:	756c253a 7d303030 69625500 73746f64     :%lu000}.Ubidots
   c13e8:	526f4c2d 6f4e2d41 762d6564 62550031     -LoRA-Node-v1.Ub
   c13f8:	746f6469 6f4c2d73 472d4152 77657461     idots-LoRA-Gatew
   c1408:	762d7961 73690031 20736900 00746f6e     ay-v1.is.is not.
   c1418:	35545345 2c544445 322e334d 322f302e     EST5EDT,M3.2.0/2
   c1428:	3a30303a 4d2c3030 312e3131 322f302e     :00:00,M11.1.0/2
   c1438:	3a30303a 25003030 4d253a49 2553253a     :00:00.%I:%M:%S%
   c1448:	6f4c0070 546c6163 20656d69 74696e69     p.LocalTime init
   c1458:	696c6169 2c64657a 6d697420 73692065     ialized, time is
   c1468:	20732520 20646e61 20435452 73207325      %s and RTC %s s
   c1478:	4c007465 6c61636f 656d6954 746f6e20     et.LocalTime not
   c1488:	696e6920 6c616974 64657a69 206f7320      initialized so 
   c1498:	6c6c6977 65656e20 6f742064 6e6f4320     will need to Con
   c14a8:	7463656e 206f7420 74726150 656c6369     nect to Particle
   c14b8:	65735500 75622072 6e6f7474 65727020     .User button pre
   c14c8:	64657373 6574202c 6d207473 0065646f     ssed, test mode.
   c14d8:	75206f4e 20726573 74747562 70206e6f     No user button p
   c14e8:	20687375 65746564 65746863 706f0064     ush detechted.op
   c14f8:	63006e65 65736f6c 6c530064 20706565     en.closed.Sleep 
   c1508:	20726f66 73206925 6e6f6365 74207364     for %i seconds t
   c1518:	206c6c69 7478656e 65766520 6120746e     ill next event a
   c1528:	73252074 74697720 6c252068 72662069     t %s with %li fr
   c1538:	6d206565 726f6d65 77410079 20656b6f     ee memory.Awoke 
   c1548:	25207461 69772073 25206874 6620696c     at %s with %li f
   c1558:	20656572 6f6d656d 47007972 77657461     ree memory.Gatew
   c1568:	69207961 696c2073 6e657473 20676e69     ay is listening 
   c1578:	20726f66 41526f4c 73656d20 65676173     for LoRA message
   c1588:	6e612073 68742064 61702065 69206b72     s and the park i
   c1598:	73252073 64252820 25202f20 202f2064     s %s (%d / %d / 
   c15a8:	00296425 6b636142 206e6920 6e69616d     %d).Back in main
   c15b8:	70706120 61202d20 7472656c 646f6320      app - alert cod
   c15c8:	73692065 00642520 2077654e 20796144     e is %d.New Day 
   c15d8:	6552202d 74746573 20676e69 72657665     - Resetting ever
   c15e8:	69687479 4400676e 20706565 65776f70     ything.Deep powe
   c15f8:	6f642072 64206e77 63697665 20410065     r down device.A 
   c1608:	2077656e 20796164 6572202d 74746573     new day - resett
   c1618:	20676e69 72657665 69687479 4c00676e     ing everything.L
   c1628:	6964616f 7320676e 65747379 6564206d     oading system de
   c1638:	6c756166 00007374                       faults..

000c1640 <_ZTV8MB85RC64>:
	...
   c1648:	000b5db9 000b5dcd 000b9415 000b94ab     .]...]..........
   c1658:	000b952d                                -...

000c165c <_ZTV10nodeIDData>:
	...
   c1664:	000b60c1 000b5e19 000b5df7 000bbc95     .`...^...]......
   c1674:	000bbcbd 000bbe51 000bbee9 000b5eb9     ....Q........^..
   c1684:	000b5ecd                                .^..

000c1688 <_ZTV13sysStatusData>:
	...
   c1690:	000b65ed 000b5e19 000b5df7 000bbc95     .e...^...]......
   c16a0:	000bbcbd 000bbe51 000bbee9 000b5e69     ....Q.......i^..
   c16b0:	000b5e7d                                }^..

000c16b4 <_ZTV17currentStatusData>:
	...
   c16bc:	000b5f3d 000b5e19 000b5df7 000bbc95     =_...^...]......
   c16cc:	000bbcbd 000bbe51 000bbee9 000b5e91     ....Q........^..
   c16dc:	000b5ea5 6d207525 72756e69 52007365     .^..%u minures.R
   c16ec:	726f7065 72662074 65757165 2079636e     eport frequency 
   c16fc:	6c6c6977 20656220 20746573 25206f74     will be set to %
   c170c:	696d2069 6574756e 74612073 78656e20     i minutes at nex
   c171c:	6f4c2074 63204152 656e6e6f 54007463     t LoRA connect.T
   c172c:	00656d69 74696e49 696c6169 676e697a     ime.Initializing
   c173c:	72615020 6c636974 75662065 6974636e      Particle functi
   c174c:	20736e6f 20646e61 69726176 656c6261     ons and variable
   c175c:	65520073 74726f70 20676e69 71657246     s.Reporting Freq
   c176c:	636e6575 65530079 72462074 65757165     uency.Set Freque
   c177c:	0079636e 74206e49 64206568 6f637369     ncy.In the disco
   c178c:	63656e6e 72662074 50206d6f 69747261     nnect from Parti
   c179c:	20656c63 636e7566 6e6f6974 69614600     cle function.Fai
   c17ac:	2064656c 64206f74 6f637369 63656e6e     led to disconnec
   c17bc:	72662074 50206d6f 69747261 00656c63     t from Particle.
   c17cc:	63736944 656e6e6f 64657463 6f726620     Disconnected fro
   c17dc:	6150206d 63697472 6920656c 6925206e     m Particle in %i
   c17ec:	63657320 73646e6f 69614600 2064656c      seconds.Failed 
   c17fc:	74206f74 206e7275 2066666f 20656874     to turn off the 
   c180c:	6c6c6543 72616c75 646f6d20 54006d65     Cellular modem.T
   c181c:	656e7275 666f2064 68742066 65632065     urned off the ce
   c182c:	6c756c6c 6d207261 6d65646f 206e6920     llular modem in 
   c183c:	73206925 6e6f6365 00007364              %i seconds..

000c1848 <_ZTVN5spark10LogHandlerE>:
	...
   c1858:	000b40a5 000b6669                       .@..if..

000c1860 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c1868:	000b675d 000b6791 000be3dd 000b666b     ]g...g......kf..

000c1878 <_ZTV18Particle_Functions>:
	...
   c1880:	000b6673 000b6675 74696e49 7a696c61     sf..uf..Initaliz
   c1890:	20676e69 20656874 4d6e6970 7365646f     ing the pinModes
   c18a0:	696e4900 6c616974 6e697a69 6f502067     .Initializing Po
   c18b0:	20726577 666e6f43 00006769              wer Config..

000c18bc <BLUE_LED>:
   c18bc:	                                         ..

000c18be <BUTTON_PIN>:
   c18be:	                                         ..

000c18c0 <RFM95_CS>:
   c18c0:	                                         ..

000c18c2 <RFM95_INT>:
   c18c2:	                                         ..

000c18c4 <RFM95_RST>:
   c18c4:	                                         ..

000c18c6 <TMP36_SENSE_PIN>:
   c18c6:	6553000f 6e697474 61762067 7365756c     ..Setting values
   c18d6:	726f6620 65687420 74614720 79617765      for the Gateway
   c18e6:	6e6f4e00 69570065 47006946 55004d53     .None.WiFi.GSM.U
   c18f6:	0053544d 414d4443 45544c00 45454900     MTS.CDMA.LTE.IEE
   c1906:	32303845 00343531 5f45544c 5f544143     E802154.LTE_CAT_
   c1916:	4c00314d 435f4554 4e5f5441 25003142     M1.LTE_CAT_NB1.%
   c1926:	3a532073 302e3225 2c252566 253a5120     s S:%2.0f%%, Q:%
   c1936:	66302e32 00202525 65737341 6f697472     2.0f%% .Assertio
   c1946:	6961466e 6572756c 63727320 20262620     nFailure src && 
   c1956:	2d637273 6c61633e 6361626c 6925006b     src->callback.%i
   c1966:	00004320 130f0000 18e7000c 18ec000c      C..............
   c1976:	18f1000c 18f5000c 18fa000c 18ff000c     ................
   c1986:	1903000c 190e000c 1919000c 6166000c     ..............fa
   c1996:	64656c69 206f7420 64616572 67657220     iled to read reg
   c19a6:	72646441 3230253d 6f632078 3d746e75     Addr=%02x count=
   c19b6:	66007525 656c6961 6f742064 61657220     %u.failed to rea
   c19c6:	65722064 64644167 30253d72 73207832     d regAddr=%02x s
   c19d6:	3d746174 46006425 2054554f 20646964     tat=%d.FOUT did 
   c19e6:	20746f6e 48206f67 00484749 20746f6e     not go HIGH.not 
   c19f6:	65746564 64657463 69616600 2064656c     detected.failed 
   c1a06:	77206f74 65746972 67657220 72646441     to write regAddr
   c1a16:	3230253d 74732078 253d7461 65730064     =%02x stat=%d.se
   c1a26:	54445774 00642520 63746177 676f6468     tWDT %d.watchdog
   c1a36:	656c6320 64657261 65526220 746c7573      cleared bResult
   c1a46:	0064253d 63746177 676f6468 74657320     =%d.watchdog set
   c1a56:	756f6620 63655372 64253d73 65526220      fourSecs=%d bRe
   c1a66:	746c7573 0064253d 43544157 474f4448     sult=%d.WATCHDOG
   c1a76:	45454400 4f505f50 5f524557 4e574f44     .DEEP_POWER_DOWN
   c1a86:	554f4300 4f44544e 545f4e57 52454d49     .COUNTDOWN_TIMER
   c1a96:	414c4100 66004d52 756c6961 69206572     .ALARM.failure i
   c1aa6:	7075206e 65746164 656b6157 73616552     n updateWakeReas
   c1ab6:	25206e6f 61770064 7220656b 6f736165     on %d.wake reaso
   c1ac6:	203d206e 66007325 756c6961 69206572     n = %s.failure i
   c1ad6:	6573206e 756f4374 6f64746e 69546e77     n setCountdownTi
   c1ae6:	2072656d 66006425 756c6961 69206572     mer %d.failure i
   c1af6:	6564206e 6f507065 44726577 206e776f     n deepPowerDown 
   c1b06:	52006425 535f4745 5045454c 5254435f     %d.REG_SLEEP_CTR
   c1b16:	78303d4c 00783225 6e646964 70207427     L=0x%2x.didn't p
   c1b26:	7265776f 776f6420 3025006e 252d6434     ower down.%04d-%
   c1b36:	2d643230 64323025 32302520 30253a64     02d-%02d %02d:%0
   c1b46:	253a6432 00643230 52746567 73416374     2d:%02d.getRtcAs
   c1b56:	25206d54 65730073 63745274 6d547341     Tm %s.setRtcAsTm
   c1b66:	00732520 6c696166 20657275 73206e69      %s.failure in s
   c1b76:	74527465 6f724663 206d546d 73006425     etRtcFromTm %d.s
   c1b86:	52207465 66204354 206d6f72 756f6c63     et RTC from clou
   c1b96:	73252064 74657300 73797320 206d6574     d %s.set system 
   c1ba6:	636f6c63 7266206b 52206d6f 25204354     clock from RTC %
   c1bb6:	61660073 64656c69 206f7420 65746564     s.failed to dete
   c1bc6:	41207463 30383142 70610035 62612e70     ct AB1805.app.ab
   c1bd6:	35303831                                 1805..

000c1bdc <_ZTV6AB1805>:
	...
   c1be4:	000b6f15 000b6f17 000b758d 000b7613     .o...o...u...v..
   c1bf4:	6b636142 756f7267 7550646e 73696c62     BackgroundPublis
   c1c04:	004b5268                                hRK.

000c1c08 <_ZTV19BackgroundPublishRK>:
	...
   c1c10:	000b7b49 000b7b65 3025755c 00005834     I{..e{..\u%04X..

000c1c20 <_ZTV10JsonBuffer>:
	...
   c1c28:	000b7e75 000b7e91                       u~...~..

000c1c30 <_ZTV10JsonParser>:
	...
   c1c38:	000b7ef5 000b7f19                       .~......

000c1c40 <_ZTV10JsonWriter>:
	...
   c1c48:	000b7ea5 000b7eb9                       .~...~..

000c1c50 <_ZTV12JsonModifier>:
	...
   c1c58:	000b7ecd 000b7ee1 253a6425 64253a64     .~...~..%d:%d:%d
   c1c68:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   c1c78:	4d003935 252e6425 64252e64 5a002c00     59.M%d.%d.%d.,.Z
   c1c88:	302b2500 253a6433 00753230              .%+03d:%02u.

000c1c94 <_ZTV9LocalTime>:
	...
   c1c9c:	000b8ad5 000b8aed                       ........

000c1ca4 <_ZTV12LocalTimeHMS>:
	...
   c1cac:	000b8a85 000b8a89                       ........

000c1cb4 <_ZTV15LocalTimeChange>:
	...
   c1cbc:	000b8a87 000b8a97                       ........

000c1cc4 <_ZTV22LocalTimePosixTimezone>:
	...
   c1ccc:	000b8aa5 000b8ac1                       ........

000c1cd4 <_ZTV6MB85RC>:
	...
   c1cdc:	000b93d5 000b93d7 000b9415 000b94ab     ................
   c1cec:	000b952d 656c6966 3d6d754e 73206425     -...fileNum=%d s
   c1cfc:	3d657a69 00646c25 64616572 75657551     ize=%ld.readQueu
   c1d0c:	6c694665 64252065 65766520 253d746e     eFile %d event=%
   c1d1c:	61642073 253d6174 65720073 75516461     s data=%s.readQu
   c1d2c:	46657565 20656c69 63206425 7572726f     eueFile %d corru
   c1d3c:	64657470 65766520 6e20746e 20656d61     pted event name 
   c1d4c:	6420726f 00617461 64616572 75657551     or data.readQueu
   c1d5c:	6c694665 64252065 64616220 67616d20     eFile %d bad mag
   c1d6c:	253d6369 786c3830 72657620 6e6f6973     ic=%08lx version
   c1d7c:	2075253d 64616568 69537265 253d657a     =%u headerSize=%
   c1d8c:	616e2075 654c656d 75253d6e 73752f00     u nameLen=%u./us
   c1d9c:	75702f72 65757162 77006575 65746972     r/pubqueue.write
   c1dac:	75657551 466f5465 73656c69 6c696620     QueueToFiles fil
   c1dbc:	6d754e65 0064253d 63736964 65647261     eNum=%d.discarde
   c1dcc:	76652064 20746e65 72006425 74657365     d event %d.reset
   c1ddc:	20726f20 63736964 656e6e6f 65207463      or disconnect e
   c1dec:	746e6576 6173202c 66206576 73656c69     vent, save files
   c1dfc:	206f7420 75657571 61720065 6964006d      to queue.ram.di
   c1e0c:	72616373 676e6964 726f6320 74707572     scarding corrupt
   c1e1c:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   c1e2c:	6e696873 73252067 65766520 253d746e     shing %s event=%
   c1e3c:	61642073 253d6174 59530073 4d455453     s data=%s.SYSTEM
   c1e4c:	5248545f 28444145 42414e45 2944454c     _THREAD(ENABLED)
   c1e5c:	20736920 75716572 64657269 62757000      is required.pub
   c1e6c:	6873696c 6d6d6f43 65206e6f 746e6576     lishCommon event
   c1e7c:	656d614e 2073253d 6e657665 74614474     Name=%s eventDat
   c1e8c:	73253d61 6e616300 20746f6e 61657263     a=%s.cannot crea
   c1e9c:	73206574 3a3a6474 75716564 616c2065     te std::deque la
   c1eac:	72656772 61687420 616d206e 69735f78     rger than max_si
   c1ebc:	2928657a 6c696600 65755165 654c6575     ze().fileQueueLe
   c1ecc:	75253d6e 6d617220 75657551 6e654c65     n=%u ramQueueLen
   c1edc:	2075253d 6e6e6f63 65746365 64253d64     =%u connected=%d
   c1eec:	65757100 20646575 72206f74 75516d61     .queued to ramQu
   c1efc:	00657565 6c627570 20687369 63637573     eue.publish succ
   c1f0c:	20737365 72006425 766f6d65 66206465     ess %d.removed f
   c1f1c:	20656c69 70006425 696c6275 66206873     ile %d.publish f
   c1f2c:	656c6961 64252064 69727700 676e6974     ailed %d.writing
   c1f3c:	206f7420 656c6966 66612073 20726574      to files after 
   c1f4c:	6c627570 20687369 6c696166 00657275     publish failure.
   c1f5c:	2e707061 71627570 00000000              app.pubq....

000c1f68 <_ZTV17PublishQueuePosix>:
	...
   c1f70:	000b9e61 000ba11d 000ba141              a.......A...

000c1f7c <_ZTV15RHGenericDriver>:
	...
   c1f8c:	000ba261 000b40a5 000b40a5 000b40a5     a....@...@...@..
   c1f9c:	000b40a5 000ba2c3 000ba265 000ba313     .@......e.......
   c1fac:	000ba2e1 000ba337 000ba26f 000ba277     ....7...o...w...
   c1fbc:	000ba27b 000ba27f 000ba283 000ba287     {...............
   c1fcc:	000ba273 000ba293 000ba297 000ba29b     s...............
   c1fdc:	000ba29f 000ba2a3 000ba2a9 000ba2ad     ................
   c1fec:	000ba26f 000ba2b1 000ba2b7 000ba2bd     o...............

000c1ffc <_ZTV12RHGenericSPI>:
	...
   c2004:	000b40a5 000ba395 000ba397 000b40a5     .@...........@..
   c2014:	000b40a5 000ba39f 000ba3a3 000ba3a7     .@..............
   c2024:	000ba399 000ba39b 000ba39d 61666564     ............defa
   c2034:	20746c75 42534d00 42534c00 50533c00     ult .MSB.LSB.<SP
   c2044:	74655349 676e6974 65642073 6c756166     ISettings defaul
   c2054:	3c003e74 53495053 69747465 2073676e     t>.<SPISettings 
   c2064:	75257325 20732520 45444f4d 003e7525     %s%u %s MODE%u>.

000c2074 <_ZTVN8particle11SPISettingsE>:
	...
   c207c:	000ba3ed 000ba3c1 000ba3c3              ............

000c2088 <_ZTV13RHHardwareSPI>:
	...
   c2090:	000ba4a1 000ba4b5 000ba4c3 000ba4d1     ................
   c20a0:	000ba53d 000ba39f 000ba3a3 000ba3a7     =...............
   c20b0:	000ba54b 000ba55f 000ba56d              K..._...m...

000c20bc <_ZTV6RHMesh>:
	...
   c20c4:	000ba639 000ba8e1 000ba599 000ba585     9...............

000c20d4 <_ZTV8RHRouter>:
	...
   c20dc:	000bab4d 000bab91                       M.......

000c20e4 <_ZTV11RHSPIDriver>:
	...
   c20f4:	000bae2d 000b40a5 000b40a5 000b40a5     -....@...@...@..
   c2104:	000b40a5 000ba2c3 000ba265 000ba313     .@......e.......
   c2114:	000ba2e1 000ba337 000ba26f 000ba277     ....7...o...w...
   c2124:	000ba27b 000ba27f 000ba283 000ba287     {...............
   c2134:	000ba273 000ba293 000ba297 000ba29b     s...............
   c2144:	000ba29f 000ba2a3 000ba2a9 000ba2ad     ................
   c2154:	000ba26f 000ba2b1 000ba2b7 000ba2bd     o...............
   c2164:	000bae59 000bae63                       Y...c...

000c216c <_ZL18MODEM_CONFIG_TABLE>:
   c216c:	92047472 94480474 0cc47804 0004b472     rt..t.H..x..r...

000c217c <_ZTV7RH_RF95>:
	...
   c2184:	000bafcb 000bb003 000bb4d9 000bb36f     ............o...
   c2194:	000bb039 000bb3b7 000bafc7 000ba2c3     9...............
   c21a4:	000ba265 000ba313 000ba2e1 000ba337     e...........7...
   c21b4:	000bafcd 000ba277 000ba27b 000ba27f     ....w...{.......
   c21c4:	000ba283 000ba287 000ba273 000ba293     ........s.......
   c21d4:	000ba297 000ba29b 000ba29f 000ba2a3     ................
   c21e4:	000ba2a9 000ba2ad 000bb013 000ba2b1     ................
   c21f4:	000ba2b7 000ba2bd 000bae59 000bae63     ........Y...c...
   c2204:	000bafc3 64383025 72002f00 766f6d65     ....%08d./.remov
   c2214:	25206465 73250073 69786520 20737473     ed %s.%s exists 
   c2224:	20646e61 61207369 72696420 6f746365     and is a directo
   c2234:	66007972 20656c69 74206e69 77206568     ry.file in the w
   c2244:	202c7961 656c6564 676e6974 00732520     ay, deleting %s.
   c2254:	74617473 6c696620 65206465 6f6e7272     stat filed errno
   c2264:	0064253d 61657263 20646574 20726964     =%d.created dir 
   c2274:	6d007325 7269646b 69616620 2064656c     %s.mkdir failed 
   c2284:	6e727265 64253d6f 636e7500 69666e6f     errno=%d.unconfi
   c2294:	65727567 69642064 74615072 63730068     gured dirPath.sc
   c22a4:	696e6e61 2520676e 69772073 70206874     anning %s with p
   c22b4:	65747461 25206e72 64610073 676e6964     attern %s.adding
   c22c4:	206f7420 75657571 64252065 00732520      to queue %d %s.
   c22d4:	46746567 46656c69 516d6f72 65756575     getFileFromQueue
   c22e4:	74657220 656e7275 64252064 70706100      returned %d.app
   c22f4:	7165732e 656c6966 00000000              .seqfile....

000c2300 <_ZTV14SequentialFile>:
	...
   c2308:	000bb935 000bb961 000bb5e1 3a746f67     5...a.......got:
   c2318:	67616d20 253d6369 20783830 73726576      magic=%08x vers
   c2328:	3d6e6f69 78343025 7a697320 30253d65     ion=%04x size=%0
   c2338:	68207834 3d687361 78383025 70786500     4x hash=%08x.exp
   c2348:	616d203a 3d636967 78383025 72657620     : magic=%08x ver
   c2358:	6e6f6973 3430253d 69732078 253d657a     sion=%04x size=%
   c2368:	20783430 68736168 3830253d 00000078     04x hash=%08x...

000c2378 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   c2380:	000bbc8f 000bbcdb 000bbc8d 000bbc95     ................
   c2390:	000bbcbd 000bbe51 000bbee9              ....Q.......

000c239c <_ZTVN5spark13CellularClassE>:
	...
   c23a4:	000bc947 000bc93d 000bc933 000bc8e9     G...=...3.......
   c23b4:	000bc927 000bc91b 000be735 000be73d     '.......5...=...
   c23c4:	000bc90f 000bc907 000bc8fd 000bc8f3     ................
   c23d4:	000be76d                                m...

000c23d8 <_ZTV14CellularSignal>:
	...
   c23e0:	000bc9d5 000bca39 000bc9d7 000bca49     ....9.......I...
   c23f0:	000bca7d 000bcaa9 000bcadd 000bc9fd     }...............
   c2400:	000bc9db 000bc9f7 fffffffc 00000000     ................
   c2410:	000bca31                                1...

000c2414 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c241c:	000bcb21 000bcb27 000bcb65 000bcb35     !...'...e...5...
   c242c:	000bcb23                                #...

000c2430 <_ZTVN5spark13EthernetClassE>:
	...
   c2438:	000bd12b 000bd121 000bd117 000bd10d     +...!...........
   c2448:	000bd101 000bd0f5 000be735 000be73d     ........5...=...
   c2458:	000bd0e9 000bd0e1 000bd0d7 000bd0cd     ................
   c2468:	000be76d                                m...

000c246c <_ZTV7TwoWire>:
	...
   c2474:	000bd1fb 000bd245 000bd21d 000bd1fd     ....E...........
   c2484:	000bd225 000bd22d 000bd235 000bd23d     %...-...5...=...

000c2494 <_ZTV9IPAddress>:
	...
   c249c:	000bd3f5 000bd3e5 000bd3e7 34302575     ............u%04
   c24ac:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   c24bc:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   c24cc:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   c24dc:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   c24ec:	005b2000 65646f63 00203d20 64006925     . [.code = .%i.d
   c24fc:	69617465 3d20736c 0a0d0020 006e6c00     etails = ....ln.
   c250c:	63006e66 0065646f 61746564 00006c69     fn.code.detail..

000c251c <_ZTVN5spark16JSONStreamWriterE>:
	...
   c2524:	000bd8a1 000bd8c7 000bd885 000bd503     ................

000c2534 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c253c:	000bdc85 000bdc9d 000be3dd 000b666b     ............kf..

000c254c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c2554:	000bdcb1 000bdcc5 000be581 000bd88d     ................

000c2564 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c256c:	000bd89f 000bd8d5 000be341 000bd88f     ........A.......

000c257c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c2584:	000bd89d 000bd8e3 000bdbed 000bd905     ................

000c2594 <_ZTVN5spark12NetworkClassE>:
	...
   c259c:	000be6f5 000be6ff 000be709 000be713     ................
   c25ac:	000be71d 000be729 000be735 000be73d     ....)...5...=...
   c25bc:	000be745 000be751 000be759 000be763     E...Q...Y...c...
   c25cc:	000be76d 006e616e 00666e69 0066766f     m...nan.inf.ovf.

000c25dc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c25dc:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   c25ec:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   c25fc:	72756769 6f697461 7369206e 766e6920     iguration is inv
   c260c:	64696c61 5925002e 2d6d252d 25546425     alid..%Y-%m-%dT%
   c261c:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   c262c:	00000065                                e...

000c2630 <_ZTV11USARTSerial>:
	...
   c2638:	000bf5f9 000bf665 000bf63d 000be9bd     ....e...=.......
   c2648:	000bf60d 000bf629 000bf61b 000bf637     ....).......7...
   c2658:	000bf5fb 000bf5ff                       ........

000c2660 <_ZTV9USBSerial>:
	...
   c2668:	000bf6b7 000bf71f 000bf6f5 000be9bd     ................
   c2678:	000bf6e7 000bf6b9 000bf6c9 000bf719     ................
   c2688:	000bf6d9 000bf6b1                       ........

000c2690 <_ZSt7nothrow>:
   c2690:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   c26a0:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000c26b1 <day_name.1>:
   c26b1:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   c26c1:	61536972                                 riSat

000c26c6 <mon_name.0>:
   c26c6:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   c26d6:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   c26e6:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   c26f6:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   c2706:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   c2716:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   c2726:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   c2736:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   c2746:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
   c2756:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
   c2766:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   c2776:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   c2786:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   c2796:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   c27a6:	696c6474 61722f62 632e646e               tdlib/rand.c.

000c27b3 <_ctype_>:
   c27b3:	20202000 20202020 28282020 20282828     .         ((((( 
   c27c3:	20202020 20202020 20202020 20202020                     
   c27d3:	10108820 10101010 10101010 10101010      ...............
   c27e3:	04040410 04040404 10040404 10101010     ................
   c27f3:	41411010 41414141 01010101 01010101     ..AAAAAA........
   c2803:	01010101 01010101 01010101 10101010     ................
   c2813:	42421010 42424242 02020202 02020202     ..BBBBBB........
   c2823:	02020202 02020202 02020202 10101010     ................
   c2833:	00000020 00000000 00000000 00000000      ...............
	...

000c28b4 <link_const_variable_data_end>:
   c28b4:	000b4949 	.word	0x000b4949
   c28b8:	000b5585 	.word	0x000b5585
   c28bc:	000b6645 	.word	0x000b6645
   c28c0:	000b69f5 	.word	0x000b69f5
   c28c4:	000b6f09 	.word	0x000b6f09
   c28c8:	000b7a2d 	.word	0x000b7a2d
   c28cc:	000ba10d 	.word	0x000ba10d
   c28d0:	000ba575 	.word	0x000ba575
   c28d4:	000bbc7d 	.word	0x000bbc7d
   c28d8:	000bc8d9 	.word	0x000bc8d9
   c28dc:	000bc9a5 	.word	0x000bc9a5
   c28e0:	000bd135 	.word	0x000bd135
   c28e4:	000be3cd 	.word	0x000be3cd
   c28e8:	000be845 	.word	0x000be845
   c28ec:	000becad 	.word	0x000becad
   c28f0:	000bf2ad 	.word	0x000bf2ad
   c28f4:	000bf5e5 	.word	0x000bf5e5

000c28f8 <link_constructors_end>:
	...
