
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/2.3.0/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009830  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dd850  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000128  2003dcf0  000dd854  0001dcf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000009d8  2003de18  2003de18  0002de18  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000dd97c  000dd97c  0002d97c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dd9a4  000dd9a4  0002d9a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   002abf89  00000000  00000000  0002d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0002769e  00000000  00000000  002d9931  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00049ea4  00000000  00000000  00300fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003918  00000000  00000000  0034ae73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000bb88  00000000  00000000  0034e78b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004cce5  00000000  00000000  0035a313  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00066e10  00000000  00000000  003a6ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001364a6  00000000  00000000  0040de08  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000aa1c  00000000  00000000  005442b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f008 fa35 	bl	dc4a0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f008 fa57 	bl	dc4f0 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dcf0 	.word	0x2003dcf0
   d404c:	000dd854 	.word	0x000dd854
   d4050:	2003de18 	.word	0x2003de18
   d4054:	2003de18 	.word	0x2003de18
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f007 fd09 	bl	dba78 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dd814 	.word	0x000dd814
   d4080:	000dd848 	.word	0x000dd848

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bada 	b.w	d463c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fc29 	bl	d48e0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f007 bca9 	b.w	db9e8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f005 b95f 	b.w	d9358 <malloc>

000d409a <_Znaj>:
   d409a:	f005 b95d 	b.w	d9358 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f005 b963 	b.w	d9368 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f005 f81e 	bl	d90ec <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d8d2d 	.word	0x000d8d2d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z13userSwitchISRv>:
  }
  return 1;
}

void userSwitchISR() {
  userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   d40d4:	4b01      	ldr	r3, [pc, #4]	; (d40dc <_Z13userSwitchISRv+0x8>)
   d40d6:	2201      	movs	r2, #1
   d40d8:	701a      	strb	r2, [r3, #0]
}
   d40da:	4770      	bx	lr
   d40dc:	2003e30c 	.word	0x2003e30c

000d40e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d40e0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d40e2:	2000      	movs	r0, #0
   d40e4:	f005 f8b8 	bl	d9258 <spark_sync_time_pending>
   d40e8:	b128      	cbz	r0, d40f6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d40ea:	f005 f89d 	bl	d9228 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d40ee:	f080 0001 	eor.w	r0, r0, #1
   d40f2:	b2c0      	uxtb	r0, r0
    }
   d40f4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d40f6:	2001      	movs	r0, #1
   d40f8:	e7fc      	b.n	d40f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d40fc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40fc:	4b0a      	ldr	r3, [pc, #40]	; (d4128 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40fe:	b510      	push	{r4, lr}
   d4100:	4604      	mov	r4, r0
   d4102:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4104:	f006 f928 	bl	da358 <_ZN5spark10LogManager8instanceEv>
   d4108:	4621      	mov	r1, r4
   d410a:	f006 faea 	bl	da6e2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d410e:	f007 fc23 	bl	db958 <_Z16_fetch_usbserialv>
   d4112:	f007 fc15 	bl	db940 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4116:	4620      	mov	r0, r4
   d4118:	4b04      	ldr	r3, [pc, #16]	; (d412c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d411a:	f840 3b04 	str.w	r3, [r0], #4
   d411e:	f006 f9cd 	bl	da4bc <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4122:	4620      	mov	r0, r4
   d4124:	bd10      	pop	{r4, pc}
   d4126:	bf00      	nop
   d4128:	000dcd20 	.word	0x000dcd20
   d412c:	000dcd08 	.word	0x000dcd08

000d4130 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4130:	b510      	push	{r4, lr}
   d4132:	4604      	mov	r4, r0
    }
   d4134:	f7ff ffe2 	bl	d40fc <_ZN5spark16SerialLogHandlerD1Ev>
   d4138:	4620      	mov	r0, r4
   d413a:	2124      	movs	r1, #36	; 0x24
   d413c:	f007 fd86 	bl	dbc4c <_ZdlPvj>
   d4140:	4620      	mov	r0, r4
   d4142:	bd10      	pop	{r4, pc}

000d4144 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4144:	b40e      	push	{r1, r2, r3}
   d4146:	b510      	push	{r4, lr}
   d4148:	b08d      	sub	sp, #52	; 0x34
   d414a:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d414c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d414e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4152:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4154:	2300      	movs	r3, #0
   d4156:	2020      	movs	r0, #32
   d4158:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d415c:	e9cd 4200 	strd	r4, r2, [sp]
   d4160:	201e      	movs	r0, #30
   d4162:	aa04      	add	r2, sp, #16
   d4164:	f004 ffca 	bl	d90fc <log_message_v>
}
   d4168:	b00d      	add	sp, #52	; 0x34
   d416a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d416e:	b003      	add	sp, #12
   d4170:	4770      	bx	lr

000d4172 <_ZN14LocalTimeRangeD1Ev>:
class LocalTimeConvert; // Forward declaration

/**
 * @brief Class to hold a time range in local time in HH:MM:SS format
 */
class LocalTimeRange : public LocalTimeRestrictedDate {
   d4172:	b510      	push	{r4, lr}
   d4174:	4604      	mov	r4, r0
   d4176:	3024      	adds	r0, #36	; 0x24
   d4178:	f000 ffb1 	bl	d50de <_ZN12LocalTimeHMSD1Ev>
   d417c:	f104 001c 	add.w	r0, r4, #28
   d4180:	f000 ffad 	bl	d50de <_ZN12LocalTimeHMSD1Ev>
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
   d4184:	6920      	ldr	r0, [r4, #16]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d4186:	b108      	cbz	r0, d418c <_ZN14LocalTimeRangeD1Ev+0x1a>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4188:	f7ff ff89 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   d418c:	6860      	ldr	r0, [r4, #4]
	if (__p)
   d418e:	b108      	cbz	r0, d4194 <_ZN14LocalTimeRangeD1Ev+0x22>
   d4190:	f7ff ff85 	bl	d409e <_ZdlPv>
   d4194:	4620      	mov	r0, r4
   d4196:	bd10      	pop	{r4, pc}

000d4198 <_Z12flashTheLEDsv>:

void flashTheLEDs() {
   d4198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	time_t lastChange = 0;
	int flashes = 0;
   d419c:	2500      	movs	r5, #0
	time_t lastChange = 0;
   d419e:	462c      	mov	r4, r5
   d41a0:	46aa      	mov	sl, r5

	while (flashes <= 6) {
		if (millis() - lastChange > 1000) {
   d41a2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   d41a6:	f04f 0900 	mov.w	r9, #0
	while (flashes <= 6) {
   d41aa:	2d07      	cmp	r5, #7
   d41ac:	d018      	beq.n	d41e0 <_Z12flashTheLEDsv+0x48>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41ae:	f004 fdc5 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
		if (millis() - lastChange > 1000) {
   d41b2:	1b06      	subs	r6, r0, r4
   d41b4:	eb6a 074a 	sbc.w	r7, sl, sl, lsl #1
   d41b8:	45b0      	cmp	r8, r6
   d41ba:	eb79 0307 	sbcs.w	r3, r9, r7
   d41be:	daf4      	bge.n	d41aa <_Z12flashTheLEDsv+0x12>
   d41c0:	f004 fdbc 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
			lastChange = millis();
   d41c4:	4604      	mov	r4, r0
			digitalWrite(blueLED, !digitalRead(blueLED));
   d41c6:	2007      	movs	r0, #7
   d41c8:	f007 fcf0 	bl	dbbac <digitalRead>
   d41cc:	fab0 f180 	clz	r1, r0
   d41d0:	0949      	lsrs	r1, r1, #5
   d41d2:	2007      	movs	r0, #7
   d41d4:	f007 fcd1 	bl	dbb7a <digitalWrite>
			lastChange = millis();
   d41d8:	f04f 0a00 	mov.w	sl, #0
			flashes++;
   d41dc:	3501      	adds	r5, #1
   d41de:	e7e4      	b.n	d41aa <_Z12flashTheLEDsv+0x12>
		}
	}
	digitalWrite(blueLED, LOW);
   d41e0:	4628      	mov	r0, r5
   d41e2:	2100      	movs	r1, #0
}
   d41e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	digitalWrite(blueLED, LOW);
   d41e8:	f007 bcc7 	b.w	dbb7a <digitalWrite>

000d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d41ec:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d41ee:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d41f0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d41f2:	b17c      	cbz	r4, d4214 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d41f4:	6863      	ldr	r3, [r4, #4]
   d41f6:	3b01      	subs	r3, #1
   d41f8:	6063      	str	r3, [r4, #4]
   d41fa:	b95b      	cbnz	r3, d4214 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d41fc:	6823      	ldr	r3, [r4, #0]
   d41fe:	4620      	mov	r0, r4
   d4200:	689b      	ldr	r3, [r3, #8]
   d4202:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4204:	68a3      	ldr	r3, [r4, #8]
   d4206:	3b01      	subs	r3, #1
   d4208:	60a3      	str	r3, [r4, #8]
   d420a:	b91b      	cbnz	r3, d4214 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d420c:	6823      	ldr	r3, [r4, #0]
   d420e:	4620      	mov	r0, r4
   d4210:	68db      	ldr	r3, [r3, #12]
   d4212:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4214:	4628      	mov	r0, r5
   d4216:	bd38      	pop	{r3, r4, r5, pc}

000d4218 <_Z22publishStateTransitionv>:
{
   d4218:	b5f0      	push	{r4, r5, r6, r7, lr}
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d421a:	4d1d      	ldr	r5, [pc, #116]	; (d4290 <_Z22publishStateTransitionv+0x78>)
   d421c:	4c1d      	ldr	r4, [pc, #116]	; (d4294 <_Z22publishStateTransitionv+0x7c>)
   d421e:	4b1e      	ldr	r3, [pc, #120]	; (d4298 <_Z22publishStateTransitionv+0x80>)
   d4220:	782a      	ldrb	r2, [r5, #0]
   d4222:	7821      	ldrb	r1, [r4, #0]
{
   d4224:	b08f      	sub	sp, #60	; 0x3c
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4226:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d422a:	9200      	str	r2, [sp, #0]
   d422c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   d4230:	4a1a      	ldr	r2, [pc, #104]	; (d429c <_Z22publishStateTransitionv+0x84>)
   d4232:	2128      	movs	r1, #40	; 0x28
   d4234:	a804      	add	r0, sp, #16
   d4236:	f005 f8b7 	bl	d93a8 <snprintf>
	oldState = state;
   d423a:	782b      	ldrb	r3, [r5, #0]
   d423c:	7023      	strb	r3, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d423e:	f004 fff3 	bl	d9228 <spark_cloud_flag_connected>
	if (Particle.connected()) {
   d4242:	b1f8      	cbz	r0, d4284 <_Z22publishStateTransitionv+0x6c>
		if (millis() - lastPublish > 1000) {
   d4244:	4c16      	ldr	r4, [pc, #88]	; (d42a0 <_Z22publishStateTransitionv+0x88>)
   d4246:	f004 fd79 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
   d424a:	e9d4 3200 	ldrd	r3, r2, [r4]
   d424e:	1ac6      	subs	r6, r0, r3
   d4250:	eb62 0742 	sbc.w	r7, r2, r2, lsl #1
   d4254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4258:	2300      	movs	r3, #0
   d425a:	42b2      	cmp	r2, r6
   d425c:	41bb      	sbcs	r3, r7
   d425e:	da11      	bge.n	d4284 <_Z22publishStateTransitionv+0x6c>
   d4260:	f004 fd6c 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d4264:	2300      	movs	r3, #0
   d4266:	6063      	str	r3, [r4, #4]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4268:	4b0e      	ldr	r3, [pc, #56]	; (d42a4 <_Z22publishStateTransitionv+0x8c>)
   d426a:	6020      	str	r0, [r4, #0]
   d426c:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d426e:	f88d 3000 	strb.w	r3, [sp]
   d4272:	a802      	add	r0, sp, #8
   d4274:	490c      	ldr	r1, [pc, #48]	; (d42a8 <_Z22publishStateTransitionv+0x90>)
   d4276:	233c      	movs	r3, #60	; 0x3c
   d4278:	aa04      	add	r2, sp, #16
   d427a:	f005 fab7 	bl	d97ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d427e:	a803      	add	r0, sp, #12
   d4280:	f7ff ffb4 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	Log.info(stateTransitionString);
   d4284:	4809      	ldr	r0, [pc, #36]	; (d42ac <_Z22publishStateTransitionv+0x94>)
   d4286:	a904      	add	r1, sp, #16
   d4288:	f7ff ff5c 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
}
   d428c:	b00f      	add	sp, #60	; 0x3c
   d428e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4290:	2003e308 	.word	0x2003e308
   d4294:	2003e2d0 	.word	0x2003e2d0
   d4298:	2003dd0e 	.word	0x2003dd0e
   d429c:	000dca88 	.word	0x000dca88
   d42a0:	2003de30 	.word	0x2003de30
   d42a4:	2003de28 	.word	0x2003de28
   d42a8:	000dca96 	.word	0x000dca96
   d42ac:	2003e59c 	.word	0x2003e59c

000d42b0 <_Z12setFrequency6String>:
{
   d42b0:	b500      	push	{lr}
   d42b2:	b0c7      	sub	sp, #284	; 0x11c
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d42b4:	6800      	ldr	r0, [r0, #0]
   d42b6:	220a      	movs	r2, #10
   d42b8:	a903      	add	r1, sp, #12
   d42ba:	f008 faa7 	bl	dc80c <strtol>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d42be:	2878      	cmp	r0, #120	; 0x78
   d42c0:	d81e      	bhi.n	d4300 <_Z12setFrequency6String+0x50>
  frequencyMinutes = tempTime;
   d42c2:	4b11      	ldr	r3, [pc, #68]	; (d4308 <_Z12setFrequency6String+0x58>)
  snprintf(data, sizeof(data), "Report frequency set to %i minutes",frequencyMinutes);
   d42c4:	4a11      	ldr	r2, [pc, #68]	; (d430c <_Z12setFrequency6String+0x5c>)
  frequencyMinutes = tempTime;
   d42c6:	8018      	strh	r0, [r3, #0]
  snprintf(data, sizeof(data), "Report frequency set to %i minutes",frequencyMinutes);
   d42c8:	f44f 7180 	mov.w	r1, #256	; 0x100
   d42cc:	4603      	mov	r3, r0
   d42ce:	a806      	add	r0, sp, #24
   d42d0:	f005 f86a 	bl	d93a8 <snprintf>
  Log.info(data);
   d42d4:	480e      	ldr	r0, [pc, #56]	; (d4310 <_Z12setFrequency6String+0x60>)
   d42d6:	a906      	add	r1, sp, #24
   d42d8:	f7ff ff34 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d42dc:	f004 ffa4 	bl	d9228 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d42e0:	b160      	cbz	r0, d42fc <_Z12setFrequency6String+0x4c>
   d42e2:	4b0c      	ldr	r3, [pc, #48]	; (d4314 <_Z12setFrequency6String+0x64>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42e4:	490c      	ldr	r1, [pc, #48]	; (d4318 <_Z12setFrequency6String+0x68>)
   d42e6:	781b      	ldrb	r3, [r3, #0]
   d42e8:	f88d 3000 	strb.w	r3, [sp]
   d42ec:	a804      	add	r0, sp, #16
   d42ee:	233c      	movs	r3, #60	; 0x3c
   d42f0:	aa06      	add	r2, sp, #24
   d42f2:	f005 fa7b 	bl	d97ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d42f6:	a805      	add	r0, sp, #20
   d42f8:	f7ff ff78 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d42fc:	2001      	movs	r0, #1
   d42fe:	e000      	b.n	d4302 <_Z12setFrequency6String+0x52>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4300:	2000      	movs	r0, #0
}
   d4302:	b047      	add	sp, #284	; 0x11c
   d4304:	f85d fb04 	ldr.w	pc, [sp], #4
   d4308:	2003dd0c 	.word	0x2003dd0c
   d430c:	000dcaa7 	.word	0x000dcaa7
   d4310:	2003e59c 	.word	0x2003e59c
   d4314:	2003de28 	.word	0x2003de28
   d4318:	000dcaca 	.word	0x000dcaca

000d431c <_Z15setLowPowerMode6String>:
{
   d431c:	b530      	push	{r4, r5, lr}
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d431e:	4921      	ldr	r1, [pc, #132]	; (d43a4 <_Z15setLowPowerMode6String+0x88>)
   d4320:	b085      	sub	sp, #20
   d4322:	4604      	mov	r4, r0
   d4324:	f007 f96c 	bl	db600 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4328:	b1a8      	cbz	r0, d4356 <_Z15setLowPowerMode6String+0x3a>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d432a:	491e      	ldr	r1, [pc, #120]	; (d43a4 <_Z15setLowPowerMode6String+0x88>)
   d432c:	4620      	mov	r0, r4
   d432e:	f007 f967 	bl	db600 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4332:	4605      	mov	r5, r0
   d4334:	b9b8      	cbnz	r0, d4366 <_Z15setLowPowerMode6String+0x4a>
   d4336:	491c      	ldr	r1, [pc, #112]	; (d43a8 <_Z15setLowPowerMode6String+0x8c>)
   d4338:	4620      	mov	r0, r4
   d433a:	f007 f961 	bl	db600 <_ZNK6String6equalsEPKc>
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d433e:	b1e0      	cbz	r0, d437a <_Z15setLowPowerMode6String+0x5e>
    lowPowerMode = false;
   d4340:	4c1a      	ldr	r4, [pc, #104]	; (d43ac <_Z15setLowPowerMode6String+0x90>)
    Log.info("Cleared Low Power Mode");
   d4342:	491b      	ldr	r1, [pc, #108]	; (d43b0 <_Z15setLowPowerMode6String+0x94>)
   d4344:	481b      	ldr	r0, [pc, #108]	; (d43b4 <_Z15setLowPowerMode6String+0x98>)
    lowPowerMode = false;
   d4346:	7025      	strb	r5, [r4, #0]
    Log.info("Cleared Low Power Mode");
   d4348:	f7ff fefc 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d434c:	f004 ff6c 	bl	d9228 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode",(lowPowerMode) ? "Low Power" :"Not Low Power", PRIVATE);
   d4350:	b198      	cbz	r0, d437a <_Z15setLowPowerMode6String+0x5e>
   d4352:	7820      	ldrb	r0, [r4, #0]
   d4354:	e014      	b.n	d4380 <_Z15setLowPowerMode6String+0x64>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4356:	4914      	ldr	r1, [pc, #80]	; (d43a8 <_Z15setLowPowerMode6String+0x8c>)
   d4358:	4620      	mov	r0, r4
   d435a:	f007 f951 	bl	db600 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d435e:	2800      	cmp	r0, #0
   d4360:	d1e3      	bne.n	d432a <_Z15setLowPowerMode6String+0xe>
}
   d4362:	b005      	add	sp, #20
   d4364:	bd30      	pop	{r4, r5, pc}
    lowPowerMode = true;
   d4366:	4d11      	ldr	r5, [pc, #68]	; (d43ac <_Z15setLowPowerMode6String+0x90>)
    Log.info("Set Low Power Mode");
   d4368:	4913      	ldr	r1, [pc, #76]	; (d43b8 <_Z15setLowPowerMode6String+0x9c>)
   d436a:	4812      	ldr	r0, [pc, #72]	; (d43b4 <_Z15setLowPowerMode6String+0x98>)
    lowPowerMode = true;
   d436c:	2401      	movs	r4, #1
   d436e:	702c      	strb	r4, [r5, #0]
    Log.info("Set Low Power Mode");
   d4370:	f7ff fee8 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
   d4374:	f004 ff58 	bl	d9228 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode",(lowPowerMode) ? "Low Power" :"Not Low Power", PRIVATE);
   d4378:	b908      	cbnz	r0, d437e <_Z15setLowPowerMode6String+0x62>
  return 1;
   d437a:	2001      	movs	r0, #1
   d437c:	e7f1      	b.n	d4362 <_Z15setLowPowerMode6String+0x46>
    if (Particle.connected()) Particle.publish("Mode",(lowPowerMode) ? "Low Power" :"Not Low Power", PRIVATE);
   d437e:	7828      	ldrb	r0, [r5, #0]
   d4380:	4b0e      	ldr	r3, [pc, #56]	; (d43bc <_Z15setLowPowerMode6String+0xa0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4382:	490f      	ldr	r1, [pc, #60]	; (d43c0 <_Z15setLowPowerMode6String+0xa4>)
   d4384:	4a0f      	ldr	r2, [pc, #60]	; (d43c4 <_Z15setLowPowerMode6String+0xa8>)
   d4386:	781b      	ldrb	r3, [r3, #0]
   d4388:	f88d 3000 	strb.w	r3, [sp]
   d438c:	2800      	cmp	r0, #0
   d438e:	bf08      	it	eq
   d4390:	460a      	moveq	r2, r1
   d4392:	233c      	movs	r3, #60	; 0x3c
   d4394:	a802      	add	r0, sp, #8
   d4396:	490c      	ldr	r1, [pc, #48]	; (d43c8 <_Z15setLowPowerMode6String+0xac>)
   d4398:	f005 fa28 	bl	d97ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d439c:	a803      	add	r0, sp, #12
   d439e:	f7ff ff25 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43a2:	e7ea      	b.n	d437a <_Z15setLowPowerMode6String+0x5e>
   d43a4:	000dd520 	.word	0x000dd520
   d43a8:	000dcda0 	.word	0x000dcda0
   d43ac:	2003e194 	.word	0x2003e194
   d43b0:	000dcaf0 	.word	0x000dcaf0
   d43b4:	2003e59c 	.word	0x2003e59c
   d43b8:	000dcadd 	.word	0x000dcadd
   d43bc:	2003de28 	.word	0x2003de28
   d43c0:	000dcacf 	.word	0x000dcacf
   d43c4:	000dcad3 	.word	0x000dcad3
   d43c8:	000dcb02 	.word	0x000dcb02

000d43cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d43cc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d43ce:	e9d0 5300 	ldrd	r5, r3, [r0]
   d43d2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d43d4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d43d6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d43da:	42ae      	cmp	r6, r5
   d43dc:	d004      	beq.n	d43e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d43de:	4628      	mov	r0, r5
   d43e0:	f007 f80a 	bl	db3f8 <_ZN6StringD1Ev>
   d43e4:	3514      	adds	r5, #20
   d43e6:	e7f8      	b.n	d43da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d43e8:	6820      	ldr	r0, [r4, #0]
   d43ea:	f004 ffbd 	bl	d9368 <free>
    AllocatorT::free(data_);
}
   d43ee:	4620      	mov	r0, r4
   d43f0:	bd70      	pop	{r4, r5, r6, pc}

000d43f2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d43f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        if (n > 0) {
   d43f6:	f1b1 0800 	subs.w	r8, r1, #0
    bool realloc(int n) {
   d43fa:	4607      	mov	r7, r0
        if (n > 0) {
   d43fc:	dd35      	ble.n	d446a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x78>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d43fe:	f04f 0914 	mov.w	r9, #20
    return ::malloc(size);
   d4402:	fb09 f008 	mul.w	r0, r9, r8
   d4406:	f004 ffa7 	bl	d9358 <malloc>
            if (!d) {
   d440a:	4605      	mov	r5, r0
   d440c:	b3a8      	cbz	r0, d447a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x88>
            move(d, data_, data_ + size_);
   d440e:	e9d7 4600 	ldrd	r4, r6, [r7]
        if (dest > p && dest < end) {
   d4412:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   d4414:	fb09 4606 	mla	r6, r9, r6, r4
        if (dest > p && dest < end) {
   d4418:	d215      	bcs.n	d4446 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x54>
   d441a:	4286      	cmp	r6, r0
   d441c:	d914      	bls.n	d4448 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x56>
            --end;
   d441e:	3e14      	subs	r6, #20
            dest += end - p - 1;
   d4420:	f1a4 0914 	sub.w	r9, r4, #20
   d4424:	1b34      	subs	r4, r6, r4
   d4426:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4428:	45b1      	cmp	r9, r6
   d442a:	d01f      	beq.n	d446c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
                new(dest) T(std::move(*end));
   d442c:	b12c      	cbz	r4, d443a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x48>
   d442e:	4631      	mov	r1, r6
   d4430:	4620      	mov	r0, r4
   d4432:	f007 f85d 	bl	db4f0 <_ZN6StringC1EOS_>
   d4436:	7c33      	ldrb	r3, [r6, #16]
   d4438:	7423      	strb	r3, [r4, #16]
   d443a:	4630      	mov	r0, r6
   d443c:	f006 ffdc 	bl	db3f8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d4440:	3e14      	subs	r6, #20
   d4442:	3c14      	subs	r4, #20
   d4444:	e7f0      	b.n	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x36>
        } else if (dest != p) {
   d4446:	d011      	beq.n	d446c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
   d4448:	46a9      	mov	r9, r5
            for (; p != end; ++p, ++dest) {
   d444a:	42a6      	cmp	r6, r4
   d444c:	d00e      	beq.n	d446c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
   d444e:	4621      	mov	r1, r4
   d4450:	4648      	mov	r0, r9
   d4452:	f007 f84d 	bl	db4f0 <_ZN6StringC1EOS_>
   d4456:	7c23      	ldrb	r3, [r4, #16]
   d4458:	f889 3010 	strb.w	r3, [r9, #16]
   d445c:	4620      	mov	r0, r4
   d445e:	f006 ffcb 	bl	db3f8 <_ZN6StringD1Ev>
   d4462:	3414      	adds	r4, #20
   d4464:	f109 0914 	add.w	r9, r9, #20
   d4468:	e7ef      	b.n	d444a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x58>
        T* d = nullptr;
   d446a:	2500      	movs	r5, #0
    ::free(ptr);
   d446c:	6838      	ldr	r0, [r7, #0]
   d446e:	f004 ff7b 	bl	d9368 <free>
        data_ = d;
   d4472:	603d      	str	r5, [r7, #0]
        capacity_ = n;
   d4474:	f8c7 8008 	str.w	r8, [r7, #8]
        return true;
   d4478:	2001      	movs	r0, #1
    }
   d447a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d447e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d447e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4482:	2300      	movs	r3, #0
   d4484:	e9c0 3300 	strd	r3, r3, [r0]
   d4488:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d448a:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d448c:	6849      	ldr	r1, [r1, #4]
   d448e:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4490:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4492:	dd17      	ble.n	d44c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
   d4494:	f7ff ffad 	bl	d43f2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d4498:	b1a0      	cbz	r0, d44c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d449a:	e9d5 6300 	ldrd	r6, r3, [r5]
   d449e:	f04f 0814 	mov.w	r8, #20
   d44a2:	6827      	ldr	r7, [r4, #0]
   d44a4:	fb08 6803 	mla	r8, r8, r3, r6
        for (; it != end; ++it, ++dest) {
   d44a8:	45b0      	cmp	r8, r6
   d44aa:	d009      	beq.n	d44c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x42>
            new(dest) T(*it);
   d44ac:	b12f      	cbz	r7, d44ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x3c>
   d44ae:	4631      	mov	r1, r6
   d44b0:	4638      	mov	r0, r7
   d44b2:	f007 f837 	bl	db524 <_ZN6StringC1ERKS_>
   d44b6:	7c33      	ldrb	r3, [r6, #16]
   d44b8:	743b      	strb	r3, [r7, #16]
        for (; it != end; ++it, ++dest) {
   d44ba:	3614      	adds	r6, #20
   d44bc:	3714      	adds	r7, #20
   d44be:	e7f3      	b.n	d44a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2a>
        size_ = vector.size_;
   d44c0:	686b      	ldr	r3, [r5, #4]
   d44c2:	6063      	str	r3, [r4, #4]
}
   d44c4:	4620      	mov	r0, r4
   d44c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d44cc <_GLOBAL__sub_I_SystemMode>:
        val_(val) {
   d44cc:	4b4b      	ldr	r3, [pc, #300]	; (d45fc <_GLOBAL__sub_I_SystemMode+0x130>)
}
   d44ce:	b530      	push	{r4, r5, lr}
   d44d0:	2501      	movs	r5, #1
   d44d2:	701d      	strb	r5, [r3, #0]
   d44d4:	4b4a      	ldr	r3, [pc, #296]	; (d4600 <_GLOBAL__sub_I_SystemMode+0x134>)
   d44d6:	2208      	movs	r2, #8
   d44d8:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d44da:	4b4a      	ldr	r3, [pc, #296]	; (d4604 <_GLOBAL__sub_I_SystemMode+0x138>)
    SleepResult() {}
   d44dc:	4a4a      	ldr	r2, [pc, #296]	; (d4608 <_GLOBAL__sub_I_SystemMode+0x13c>)
   d44de:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d44e0:	2400      	movs	r4, #0
   d44e2:	b097      	sub	sp, #92	; 0x5c
   d44e4:	601c      	str	r4, [r3, #0]
   d44e6:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d44e8:	719c      	strb	r4, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d44ea:	2002      	movs	r0, #2
   d44ec:	f004 fe30 	bl	d9150 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d44f0:	4621      	mov	r1, r4
   d44f2:	4628      	mov	r0, r5
   d44f4:	f004 fe44 	bl	d9180 <system_thread_set_state>
        level_(level) {
   d44f8:	4944      	ldr	r1, [pc, #272]	; (d460c <_GLOBAL__sub_I_SystemMode+0x140>)
   d44fa:	a80c      	add	r0, sp, #48	; 0x30
   d44fc:	f006 ffc7 	bl	db48e <_ZN6StringC1EPKc>
   d4500:	4943      	ldr	r1, [pc, #268]	; (d4610 <_GLOBAL__sub_I_SystemMode+0x144>)
   d4502:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
   d4506:	a811      	add	r0, sp, #68	; 0x44
   d4508:	f006 ffc1 	bl	db48e <_ZN6StringC1EPKc>
    if (n > 0 && realloc(n)) {
   d450c:	2102      	movs	r1, #2
   d450e:	4668      	mov	r0, sp
        capacity_(0) {
   d4510:	e9cd 4400 	strd	r4, r4, [sp]
   d4514:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
   d4518:	9402      	str	r4, [sp, #8]
    if (n > 0 && realloc(n)) {
   d451a:	f7ff ff6a 	bl	d43f2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d451e:	b198      	cbz	r0, d4548 <_GLOBAL__sub_I_SystemMode+0x7c>
        copy(data_, values.begin(), values.end());
   d4520:	9c00      	ldr	r4, [sp, #0]
            new(dest) T(*p);
   d4522:	b134      	cbz	r4, d4532 <_GLOBAL__sub_I_SystemMode+0x66>
class LogCategoryFilter {
   d4524:	a90c      	add	r1, sp, #48	; 0x30
   d4526:	4620      	mov	r0, r4
   d4528:	f006 fffc 	bl	db524 <_ZN6StringC1ERKS_>
   d452c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   d4530:	7423      	strb	r3, [r4, #16]
   d4532:	a911      	add	r1, sp, #68	; 0x44
   d4534:	f104 0014 	add.w	r0, r4, #20
   d4538:	f006 fff4 	bl	db524 <_ZN6StringC1ERKS_>
   d453c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   d4540:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        size_ = n;
   d4544:	2302      	movs	r3, #2
   d4546:	9301      	str	r3, [sp, #4]
            StreamLogHandler(Serial, level, filters) {
   d4548:	f007 fa06 	bl	db958 <_Z16_fetch_usbserialv>
   d454c:	4669      	mov	r1, sp
   d454e:	4605      	mov	r5, r0
   d4550:	a803      	add	r0, sp, #12
        filter_(level, filters) {
   d4552:	4c30      	ldr	r4, [pc, #192]	; (d4614 <_GLOBAL__sub_I_SystemMode+0x148>)
   d4554:	f7ff ff93 	bl	d447e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   d4558:	a903      	add	r1, sp, #12
   d455a:	a806      	add	r0, sp, #24
   d455c:	f7ff ff8f 	bl	d447e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4560:	4b2d      	ldr	r3, [pc, #180]	; (d4618 <_GLOBAL__sub_I_SystemMode+0x14c>)
   d4562:	6023      	str	r3, [r4, #0]
   d4564:	a906      	add	r1, sp, #24
   d4566:	a809      	add	r0, sp, #36	; 0x24
   d4568:	f7ff ff89 	bl	d447e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d456c:	aa09      	add	r2, sp, #36	; 0x24
   d456e:	211e      	movs	r1, #30
   d4570:	1d20      	adds	r0, r4, #4
   d4572:	f006 fa10 	bl	da996 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4576:	a809      	add	r0, sp, #36	; 0x24
   d4578:	f7ff ff28 	bl	d43cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d457c:	a806      	add	r0, sp, #24
   d457e:	f7ff ff25 	bl	d43cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4582:	4b26      	ldr	r3, [pc, #152]	; (d461c <_GLOBAL__sub_I_SystemMode+0x150>)
   d4584:	6023      	str	r3, [r4, #0]
   d4586:	6225      	str	r5, [r4, #32]
   d4588:	a803      	add	r0, sp, #12
   d458a:	f7ff ff1f 	bl	d43cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d458e:	4b24      	ldr	r3, [pc, #144]	; (d4620 <_GLOBAL__sub_I_SystemMode+0x154>)
   d4590:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d4592:	f007 f9e1 	bl	db958 <_Z16_fetch_usbserialv>
   d4596:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d459a:	f007 f9cd 	bl	db938 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d459e:	f005 fedb 	bl	da358 <_ZN5spark10LogManager8instanceEv>
   d45a2:	4621      	mov	r1, r4
   d45a4:	f006 f989 	bl	da8ba <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
});
   d45a8:	4668      	mov	r0, sp
   d45aa:	f7ff ff0f 	bl	d43cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
class LocalTimeSchedule {
public:
    /**
     * @brief Construct a new, empty schedule
     */
    LocalTimeSchedule() {
   d45ae:	4c1d      	ldr	r4, [pc, #116]	; (d4624 <_GLOBAL__sub_I_SystemMode+0x158>)
class LogCategoryFilter {
   d45b0:	a811      	add	r0, sp, #68	; 0x44
   d45b2:	f006 ff21 	bl	db3f8 <_ZN6StringD1Ev>
   d45b6:	a80c      	add	r0, sp, #48	; 0x30
   d45b8:	f006 ff1e 	bl	db3f8 <_ZN6StringD1Ev>
   d45bc:	491a      	ldr	r1, [pc, #104]	; (d4628 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d45be:	4620      	mov	r0, r4
   d45c0:	f006 ff65 	bl	db48e <_ZN6StringC1EPKc>
   d45c4:	2100      	movs	r1, #0
   d45c6:	2000      	movs	r0, #0
   d45c8:	e9c4 0106 	strd	r0, r1, [r4, #24]
   d45cc:	2300      	movs	r3, #0
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   d45ce:	4817      	ldr	r0, [pc, #92]	; (d462c <_GLOBAL__sub_I_SystemMode+0x160>)
    LocalTimeSchedule() {
   d45d0:	6123      	str	r3, [r4, #16]
	: _M_start(), _M_finish(), _M_end_of_storage()
   d45d2:	e9c4 3308 	strd	r3, r3, [r4, #32]
   d45d6:	62a3      	str	r3, [r4, #40]	; 0x28
class LocalTimeConvert {
   d45d8:	2306      	movs	r3, #6
   d45da:	f840 3b04 	str.w	r3, [r0], #4
   d45de:	f001 f859 	bl	d5694 <_ZN22LocalTimePosixTimezoneC1Ev>
RH_RF95 driver(RFM95_CS, RFM95_INT);
   d45e2:	4b13      	ldr	r3, [pc, #76]	; (d4630 <_GLOBAL__sub_I_SystemMode+0x164>)
   d45e4:	4813      	ldr	r0, [pc, #76]	; (d4634 <_GLOBAL__sub_I_SystemMode+0x168>)
   d45e6:	2202      	movs	r2, #2
   d45e8:	210e      	movs	r1, #14
   d45ea:	f003 fd33 	bl	d8054 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   d45ee:	4911      	ldr	r1, [pc, #68]	; (d4634 <_GLOBAL__sub_I_SystemMode+0x168>)
   d45f0:	4811      	ldr	r0, [pc, #68]	; (d4638 <_GLOBAL__sub_I_SystemMode+0x16c>)
   d45f2:	2201      	movs	r2, #1
   d45f4:	f003 f852 	bl	d769c <_ZN6RHMeshC1ER15RHGenericDriverh>
}
   d45f8:	b017      	add	sp, #92	; 0x5c
   d45fa:	bd30      	pop	{r4, r5, pc}
   d45fc:	2003de28 	.word	0x2003de28
   d4600:	2003de29 	.word	0x2003de29
   d4604:	2003de18 	.word	0x2003de18
   d4608:	ffff0000 	.word	0xffff0000
   d460c:	000dcb07 	.word	0x000dcb07
   d4610:	000dcb10 	.word	0x000dcb10
   d4614:	2003e170 	.word	0x2003e170
   d4618:	000dcd08 	.word	0x000dcd08
   d461c:	000dd5a0 	.word	0x000dd5a0
   d4620:	000dcd20 	.word	0x000dcd20
   d4624:	2003e2d8 	.word	0x2003e2d8
   d4628:	000dd568 	.word	0x000dd568
   d462c:	2003df48 	.word	0x2003df48
   d4630:	2003e32c 	.word	0x2003e32c
   d4634:	2003e038 	.word	0x2003e038
   d4638:	2003e198 	.word	0x2003e198

000d463c <setup>:
{
   d463c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Particle.variable("Report Frequency", frequencyMinutes);
   d4640:	4d8d      	ldr	r5, [pc, #564]	; (d4878 <setup+0x23c>)
{
   d4642:	b09e      	sub	sp, #120	; 0x78
	pinMode(blueLED,OUTPUT);                          // Turn on the led to signal startup
   d4644:	2101      	movs	r1, #1
   d4646:	2007      	movs	r0, #7
   d4648:	f007 fa86 	bl	dbb58 <pinMode>
        return _variable(name, std::forward<ArgsT>(args)...);
   d464c:	882b      	ldrh	r3, [r5, #0]
   d464e:	9308      	str	r3, [sp, #32]
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4650:	2202      	movs	r2, #2
   d4652:	2300      	movs	r3, #0
   d4654:	a908      	add	r1, sp, #32
   d4656:	4889      	ldr	r0, [pc, #548]	; (d487c <setup+0x240>)
   d4658:	f004 fdc6 	bl	d91e8 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d465c:	4a88      	ldr	r2, [pc, #544]	; (d4880 <setup+0x244>)
   d465e:	4989      	ldr	r1, [pc, #548]	; (d4884 <setup+0x248>)
   d4660:	4889      	ldr	r0, [pc, #548]	; (d4888 <setup+0x24c>)
   d4662:	f004 ffb6 	bl	d95d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4666:	4a89      	ldr	r2, [pc, #548]	; (d488c <setup+0x250>)
   d4668:	4989      	ldr	r1, [pc, #548]	; (d4890 <setup+0x254>)
   d466a:	4887      	ldr	r0, [pc, #540]	; (d4888 <setup+0x24c>)
   d466c:	f004 ffb1 	bl	d95d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d4670:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d4672:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d4674:	f8ad 2020 	strh.w	r2, [sp, #32]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4678:	2201      	movs	r2, #1
   d467a:	9209      	str	r2, [sp, #36]	; 0x24
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d467c:	f64e 2160 	movw	r1, #60000	; 0xea60
   d4680:	aa08      	add	r2, sp, #32
   d4682:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d4684:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4688:	f004 fdee 	bl	d9268 <spark_set_connection_property>
	if (!manager.init()) Log.info("init failed");	    // Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   d468c:	4881      	ldr	r0, [pc, #516]	; (d4894 <setup+0x258>)
   d468e:	f003 fa49 	bl	d7b24 <_ZN8RHRouter4initEv>
   d4692:	b918      	cbnz	r0, d469c <setup+0x60>
   d4694:	4980      	ldr	r1, [pc, #512]	; (d4898 <setup+0x25c>)
   d4696:	4881      	ldr	r0, [pc, #516]	; (d489c <setup+0x260>)
   d4698:	f7ff fd54 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
	driver.setFrequency(RF95_FREQ);					          // Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU
   d469c:	ed9f 0a80 	vldr	s0, [pc, #512]	; d48a0 <setup+0x264>
   d46a0:	4880      	ldr	r0, [pc, #512]	; (d48a4 <setup+0x268>)
   d46a2:	f003 fd15 	bl	d80d0 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                     // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default):
   d46a6:	2200      	movs	r2, #0
   d46a8:	2117      	movs	r1, #23
   d46aa:	487e      	ldr	r0, [pc, #504]	; (d48a4 <setup+0x268>)
   d46ac:	f003 fe8a 	bl	d83c4 <_ZN7RH_RF9510setTxPowerEab>
  	PublishQueuePosix::instance().setup();          // Start the Publish Queie
   d46b0:	f002 f900 	bl	d68b4 <_ZN17PublishQueuePosix8instanceEv>
   d46b4:	f002 fb0c 	bl	d6cd0 <_ZN17PublishQueuePosix5setupEv>
	if (!Time.isValid()) {							              // I need to make sure the time is valid here.
   d46b8:	f007 f831 	bl	db71e <_ZN9TimeClass7isValidEv>
   d46bc:	4604      	mov	r4, r0
   d46be:	bbb8      	cbnz	r0, d4730 <setup+0xf4>
        spark_cloud_flag_connect();
   d46c0:	f004 fdaa 	bl	d9218 <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d46c4:	4620      	mov	r0, r4
   d46c6:	f004 fb49 	bl	d8d5c <hal_timer_millis>
        while (_while() && !_condition()) {
   d46ca:	f8df 8210 	ldr.w	r8, [pc, #528]	; d48dc <setup+0x2a0>
        return hal_timer_millis(nullptr);
   d46ce:	4682      	mov	sl, r0
        while (_while() && !_condition()) {
   d46d0:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d46d4:	2000      	movs	r0, #0
   d46d6:	f004 fb41 	bl	d8d5c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d46da:	ebb0 060a 	subs.w	r6, r0, sl
   d46de:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d46e2:	45b9      	cmp	r9, r7
   d46e4:	bf08      	it	eq
   d46e6:	45b0      	cmpeq	r8, r6
   d46e8:	d305      	bcc.n	d46f6 <setup+0xba>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d46ea:	f004 fd9d 	bl	d9228 <spark_cloud_flag_connected>
   d46ee:	b910      	cbnz	r0, d46f6 <setup+0xba>
            spark_process();
   d46f0:	f004 fd8a 	bl	d9208 <spark_process>
        while (_while() && !_condition()) {
   d46f4:	e7ee      	b.n	d46d4 <setup+0x98>
   d46f6:	f004 fd97 	bl	d9228 <spark_cloud_flag_connected>
		if (waitFor(Particle.connected, 600000)) {	    // Connect to Particle
   d46fa:	b1c8      	cbz	r0, d4730 <setup+0xf4>
			lastConnectTime = Time.now();			            // Record the last connection time
   d46fc:	f007 f82c 	bl	db758 <_ZN9TimeClass3nowEv>
   d4700:	4b69      	ldr	r3, [pc, #420]	; (d48a8 <setup+0x26c>)
   d4702:	17c1      	asrs	r1, r0, #31
   d4704:	e9c3 0100 	strd	r0, r1, [r3]
   d4708:	f004 fd8e 	bl	d9228 <spark_cloud_flag_connected>
        if (!connected()) {
   d470c:	b110      	cbz	r0, d4714 <setup+0xd8>
        return spark_sync_time(NULL);
   d470e:	2000      	movs	r0, #0
   d4710:	f004 fd9a 	bl	d9248 <spark_sync_time>
			waitUntil(Particle.syncTimeDone);		          // Make sure sync is complete
   d4714:	f7ff fce4 	bl	d40e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d4718:	b910      	cbnz	r0, d4720 <setup+0xe4>
            spark_process();
   d471a:	f004 fd75 	bl	d9208 <spark_process>
        while (_while() && !_condition()) {
   d471e:	e7f9      	b.n	d4714 <setup+0xd8>
   d4720:	f7ff fcde 	bl	d40e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
			if (lowPowerMode) state = DISCONNECTING_STATE;
   d4724:	4b61      	ldr	r3, [pc, #388]	; (d48ac <setup+0x270>)
   d4726:	781b      	ldrb	r3, [r3, #0]
   d4728:	b113      	cbz	r3, d4730 <setup+0xf4>
   d472a:	4b61      	ldr	r3, [pc, #388]	; (d48b0 <setup+0x274>)
   d472c:	2206      	movs	r2, #6
   d472e:	701a      	strb	r2, [r3, #0]
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   d4730:	f001 fa1e 	bl	d5b70 <_ZN9LocalTime8instanceEv>
   d4734:	495f      	ldr	r1, [pc, #380]	; (d48b4 <setup+0x278>)
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d4736:	4e60      	ldr	r6, [pc, #384]	; (d48b8 <setup+0x27c>)
   d4738:	4604      	mov	r4, r0
   d473a:	a808      	add	r0, sp, #32
   d473c:	f001 f85c 	bl	d57f8 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   d4740:	a909      	add	r1, sp, #36	; 0x24
   d4742:	f104 0008 	add.w	r0, r4, #8
   d4746:	f006 fede 	bl	db506 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d474a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d474c:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   d474e:	a90f      	add	r1, sp, #60	; 0x3c
   d4750:	f104 0020 	add.w	r0, r4, #32
   d4754:	f006 fed7 	bl	db506 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d4758:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d475a:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   d475c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d475e:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   d4760:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d4762:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   d4764:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   d4766:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   d4768:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d476a:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   d476c:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
   d4770:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   d4774:	a808      	add	r0, sp, #32
   d4776:	f000 fcc9 	bl	d510c <_ZN22LocalTimePosixTimezoneD1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d477a:	f006 ffed 	bl	db758 <_ZN9TimeClass3nowEv>
   d477e:	17c1      	asrs	r1, r0, #31
   d4780:	e9c6 0118 	strd	r0, r1, [r6, #96]	; 0x60
	conv.withCurrentTime().convert();  				        // Convert to local time for use later
   d4784:	4630      	mov	r0, r6
   d4786:	f001 fa6b 	bl	d5c60 <_ZN16LocalTimeConvert7convertEv>
  publishSchedule.withMinuteOfHour(frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("21:59:59")));	 // Publish every 15 minutes from 6am to 10pm
   d478a:	494c      	ldr	r1, [pc, #304]	; (d48bc <setup+0x280>)
   d478c:	882d      	ldrh	r5, [r5, #0]
   d478e:	a803      	add	r0, sp, #12
   d4790:	f000 fe56 	bl	d5440 <_ZN12LocalTimeHMSC1EPKc>
   d4794:	494a      	ldr	r1, [pc, #296]	; (d48c0 <setup+0x284>)
   d4796:	a805      	add	r0, sp, #20
   d4798:	f000 fe52 	bl	d5440 <_ZN12LocalTimeHMSC1EPKc>
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d479c:	237f      	movs	r3, #127	; 0x7f
class LocalTimeHMS {
   d479e:	9a04      	ldr	r2, [sp, #16]
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d47a0:	f88d 3020 	strb.w	r3, [sp, #32]
class LocalTimeHMS {
   d47a4:	4b47      	ldr	r3, [pc, #284]	; (d48c4 <setup+0x288>)
   d47a6:	930f      	str	r3, [sp, #60]	; 0x3c
   d47a8:	4629      	mov	r1, r5
   d47aa:	2400      	movs	r4, #0
   d47ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   d47b0:	4845      	ldr	r0, [pc, #276]	; (d48c8 <setup+0x28c>)
   d47b2:	9b06      	ldr	r3, [sp, #24]
   d47b4:	9312      	str	r3, [sp, #72]	; 0x48
   d47b6:	aa08      	add	r2, sp, #32
   d47b8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   d47bc:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
   d47c0:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
   d47c4:	f001 fef1 	bl	d65aa <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d47c8:	a808      	add	r0, sp, #32
   d47ca:	f7ff fcd2 	bl	d4172 <_ZN14LocalTimeRangeD1Ev>
   d47ce:	a805      	add	r0, sp, #20
   d47d0:	f000 fc85 	bl	d50de <_ZN12LocalTimeHMSD1Ev>
   d47d4:	a803      	add	r0, sp, #12
   d47d6:	f000 fc82 	bl	d50de <_ZN12LocalTimeHMSD1Ev>
  Log.info("Startup complete at %s with battery %4.2f", conv.format(TIME_FORMAT_ISO8601_FULL).c_str(), System.batteryCharge());
   d47da:	4b3c      	ldr	r3, [pc, #240]	; (d48cc <setup+0x290>)
   d47dc:	4631      	mov	r1, r6
   d47de:	681a      	ldr	r2, [r3, #0]
   d47e0:	a808      	add	r0, sp, #32
   d47e2:	f001 f91f 	bl	d5a24 <_ZN16LocalTimeConvert6formatEPKc>
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
    const int ret = diag_get_source(id, &src, nullptr);
   d47e6:	4622      	mov	r2, r4
   d47e8:	a903      	add	r1, sp, #12
   d47ea:	2003      	movs	r0, #3
   d47ec:	9d08      	ldr	r5, [sp, #32]
    const diag_source* src = nullptr;
   d47ee:	9403      	str	r4, [sp, #12]
    const int ret = diag_get_source(id, &src, nullptr);
   d47f0:	f004 fc9c 	bl	d912c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d47f4:	2800      	cmp	r0, #0
   d47f6:	d13c      	bne.n	d4872 <setup+0x236>
        return ret;
    }
    return get(src, val);
   d47f8:	9c03      	ldr	r4, [sp, #12]
    SPARK_ASSERT(src && src->callback);
   d47fa:	b10c      	cbz	r4, d4800 <setup+0x1c4>
   d47fc:	6923      	ldr	r3, [r4, #16]
   d47fe:	b923      	cbnz	r3, d480a <setup+0x1ce>
   d4800:	4a33      	ldr	r2, [pc, #204]	; (d48d0 <setup+0x294>)
   d4802:	2100      	movs	r1, #0
   d4804:	200a      	movs	r0, #10
   d4806:	f004 fc71 	bl	d90ec <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d480a:	2300      	movs	r3, #0
   d480c:	f8ad 3016 	strh.w	r3, [sp, #22]
   d4810:	230c      	movs	r3, #12
   d4812:	f8ad 3014 	strh.w	r3, [sp, #20]
   d4816:	ab02      	add	r3, sp, #8
   d4818:	9306      	str	r3, [sp, #24]
   d481a:	2304      	movs	r3, #4
   d481c:	9307      	str	r3, [sp, #28]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d481e:	6923      	ldr	r3, [r4, #16]
   d4820:	aa05      	add	r2, sp, #20
   d4822:	2101      	movs	r1, #1
   d4824:	4620      	mov	r0, r4
   d4826:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4828:	bb18      	cbnz	r0, d4872 <setup+0x236>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d482a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   d482e:	ee07 3a90 	vmov	s15, r3
   d4832:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   d4836:	ee17 0a90 	vmov	r0, s15
   d483a:	f007 fb7b 	bl	dbf34 <__aeabi_f2d>
   d483e:	462a      	mov	r2, r5
   d4840:	e9cd 0100 	strd	r0, r1, [sp]
   d4844:	4923      	ldr	r1, [pc, #140]	; (d48d4 <setup+0x298>)
   d4846:	4815      	ldr	r0, [pc, #84]	; (d489c <setup+0x260>)
   d4848:	f7ff fc7c 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
   d484c:	a808      	add	r0, sp, #32
   d484e:	f006 fdd3 	bl	db3f8 <_ZN6StringD1Ev>
  attachInterrupt(userSwitch,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   d4852:	2200      	movs	r2, #0
   d4854:	9200      	str	r2, [sp, #0]
   d4856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d485a:	491f      	ldr	r1, [pc, #124]	; (d48d8 <setup+0x29c>)
   d485c:	2004      	movs	r0, #4
   d485e:	f005 f9b9 	bl	d9bd4 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = LoRA_STATE;  // This is not a bad way to start - could also go to the IDLE_STATE
   d4862:	4b13      	ldr	r3, [pc, #76]	; (d48b0 <setup+0x274>)
   d4864:	781a      	ldrb	r2, [r3, #0]
   d4866:	b90a      	cbnz	r2, d486c <setup+0x230>
   d4868:	2204      	movs	r2, #4
   d486a:	701a      	strb	r2, [r3, #0]
}
   d486c:	b01e      	add	sp, #120	; 0x78
   d486e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return -1.0f;
   d4872:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4876:	e7de      	b.n	d4836 <setup+0x1fa>
   d4878:	2003dd0c 	.word	0x2003dd0c
   d487c:	000dcb1c 	.word	0x000dcb1c
   d4880:	000dcb2d 	.word	0x000dcb2d
   d4884:	000d431d 	.word	0x000d431d
   d4888:	000d95a7 	.word	0x000d95a7
   d488c:	000dcb3b 	.word	0x000dcb3b
   d4890:	000d42b1 	.word	0x000d42b1
   d4894:	2003e198 	.word	0x2003e198
   d4898:	000dcb49 	.word	0x000dcb49
   d489c:	2003e59c 	.word	0x2003e59c
   d48a0:	4464c000 	.word	0x4464c000
   d48a4:	2003e038 	.word	0x2003e038
   d48a8:	2003e168 	.word	0x2003e168
   d48ac:	2003e194 	.word	0x2003e194
   d48b0:	2003e308 	.word	0x2003e308
   d48b4:	000dcb55 	.word	0x000dcb55
   d48b8:	2003df48 	.word	0x2003df48
   d48bc:	000dcb7c 	.word	0x000dcb7c
   d48c0:	000dcb85 	.word	0x000dcb85
   d48c4:	000dcdf8 	.word	0x000dcdf8
   d48c8:	2003e2d8 	.word	0x2003e2d8
   d48cc:	2003ddac 	.word	0x2003ddac
   d48d0:	000d8d2d 	.word	0x000d8d2d
   d48d4:	000dcb8e 	.word	0x000dcb8e
   d48d8:	000d40d5 	.word	0x000d40d5
   d48dc:	000927bf 	.word	0x000927bf

000d48e0 <loop>:
void loop() {
   d48e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (state) {
   d48e4:	4aaa      	ldr	r2, [pc, #680]	; (d4b90 <loop+0x2b0>)
void loop() {
   d48e6:	b0d1      	sub	sp, #324	; 0x144
	uint8_t len = sizeof(buf);
   d48e8:	23f9      	movs	r3, #249	; 0xf9
   d48ea:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	switch (state) {
   d48ee:	7813      	ldrb	r3, [r2, #0]
   d48f0:	3b02      	subs	r3, #2
   d48f2:	4692      	mov	sl, r2
   d48f4:	2b05      	cmp	r3, #5
   d48f6:	f200 80be 	bhi.w	d4a76 <loop+0x196>
   d48fa:	e8df f013 	tbh	[pc, r3, lsl #1]
   d48fe:	0006      	.short	0x0006
   d4900:	0024001a 	.word	0x0024001a
   d4904:	01750116 	.word	0x01750116
   d4908:	00c6      	.short	0x00c6
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d490a:	4ba2      	ldr	r3, [pc, #648]	; (d4b94 <loop+0x2b4>)
   d490c:	781b      	ldrb	r3, [r3, #0]
   d490e:	2b02      	cmp	r3, #2
   d4910:	d001      	beq.n	d4916 <loop+0x36>
   d4912:	f7ff fc81 	bl	d4218 <_Z22publishStateTransitionv>
			if (publishSchedule.isScheduledTime()) state = LoRA_STATE;		   // See Time section in setup for schedule
   d4916:	48a0      	ldr	r0, [pc, #640]	; (d4b98 <loop+0x2b8>)
   d4918:	f001 fd28 	bl	d636c <_ZN17LocalTimeSchedule15isScheduledTimeEv>
   d491c:	b110      	cbz	r0, d4924 <loop+0x44>
   d491e:	2304      	movs	r3, #4
   d4920:	f88a 3000 	strb.w	r3, [sl]
			if (userSwitchDectected) state = CONNECTING_STATE;
   d4924:	4b9d      	ldr	r3, [pc, #628]	; (d4b9c <loop+0x2bc>)
   d4926:	781b      	ldrb	r3, [r3, #0]
   d4928:	2b00      	cmp	r3, #0
   d492a:	f000 80a4 	beq.w	d4a76 <loop+0x196>
			state = CONNECTING_STATE;                     // Now we will turn on the cellular radio and connect to Particle
   d492e:	2305      	movs	r3, #5
   d4930:	e006      	b.n	d4940 <loop+0x60>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d4932:	4b98      	ldr	r3, [pc, #608]	; (d4b94 <loop+0x2b4>)
   d4934:	781b      	ldrb	r3, [r3, #0]
   d4936:	2b03      	cmp	r3, #3
   d4938:	d001      	beq.n	d493e <loop+0x5e>
   d493a:	f7ff fc6d 	bl	d4218 <_Z22publishStateTransitionv>
			state = IDLE_STATE;
   d493e:	2302      	movs	r3, #2
				state = SLEEPING_STATE;
   d4940:	f88a 3000 	strb.w	r3, [sl]
   d4944:	e097      	b.n	d4a76 <loop+0x196>
			if (state != oldState) {
   d4946:	4b93      	ldr	r3, [pc, #588]	; (d4b94 <loop+0x2b4>)
   d4948:	4c95      	ldr	r4, [pc, #596]	; (d4ba0 <loop+0x2c0>)
   d494a:	781b      	ldrb	r3, [r3, #0]
   d494c:	2b04      	cmp	r3, #4
   d494e:	d006      	beq.n	d495e <loop+0x7e>
				publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d4950:	f7ff fc62 	bl	d4218 <_Z22publishStateTransitionv>
				startLoRAWindow = Time.now();               // Mark when we enter this state - for timeouts
   d4954:	f006 ff00 	bl	db758 <_ZN9TimeClass3nowEv>
   d4958:	17c1      	asrs	r1, r0, #31
   d495a:	e9c4 0100 	strd	r0, r1, [r4]
			if (manager.recvfromAck(buf, &len, &from))	{	// We have received a message
   d495e:	4e91      	ldr	r6, [pc, #580]	; (d4ba4 <loop+0x2c4>)
   d4960:	4891      	ldr	r0, [pc, #580]	; (d4ba8 <loop+0x2c8>)
   d4962:	2500      	movs	r5, #0
   d4964:	e9cd 5502 	strd	r5, r5, [sp, #8]
   d4968:	e9cd 5500 	strd	r5, r5, [sp]
   d496c:	f10d 033f 	add.w	r3, sp, #63	; 0x3f
   d4970:	f10d 023e 	add.w	r2, sp, #62	; 0x3e
   d4974:	4631      	mov	r1, r6
   d4976:	f002 fecf 	bl	d7718 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d497a:	2800      	cmp	r0, #0
   d497c:	d06a      	beq.n	d4a54 <loop+0x174>
				digitalWrite(blueLED,HIGH);			            // Signal we are using the radio
   d497e:	2101      	movs	r1, #1
   d4980:	2007      	movs	r0, #7
   d4982:	f007 f8fa 	bl	dbb7a <digitalWrite>
				buf[len] = 0;
   d4986:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
				Log.info("Received from 0x%02x with rssi=%d msg = %d", from, driver.lastRssi(), buf[16]);
   d498a:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
   d498e:	4887      	ldr	r0, [pc, #540]	; (d4bac <loop+0x2cc>)
				buf[len] = 0;
   d4990:	54f5      	strb	r5, [r6, r3]
				Log.info("Received from 0x%02x with rssi=%d msg = %d", from, driver.lastRssi(), buf[16]);
   d4992:	920a      	str	r2, [sp, #40]	; 0x28
   d4994:	f002 fc6f 	bl	d7276 <_ZN15RHGenericDriver8lastRssiEv>
   d4998:	7c31      	ldrb	r1, [r6, #16]
   d499a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d499c:	9100      	str	r1, [sp, #0]
   d499e:	4603      	mov	r3, r0
   d49a0:	4983      	ldr	r1, [pc, #524]	; (d4bb0 <loop+0x2d0>)
   d49a2:	4884      	ldr	r0, [pc, #528]	; (d4bb4 <loop+0x2d4>)
   d49a4:	4f84      	ldr	r7, [pc, #528]	; (d4bb8 <loop+0x2d8>)
   d49a6:	f7ff fbcd 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
				if (updatedFrequencyMinutes) {              // If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   d49aa:	4b84      	ldr	r3, [pc, #528]	; (d4bbc <loop+0x2dc>)
   d49ac:	881a      	ldrh	r2, [r3, #0]
   d49ae:	b10a      	cbz	r2, d49b4 <loop+0xd4>
					frequencyMinutes = updatedFrequencyMinutes;
   d49b0:	803a      	strh	r2, [r7, #0]
					updatedFrequencyMinutes = 0;
   d49b2:	801d      	strh	r5, [r3, #0]
				data[2] = buf[16];								          // Message number
   d49b4:	7c33      	ldrb	r3, [r6, #16]
   d49b6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
        data[0] = 0;                                // to be replaced/updated
   d49ba:	2500      	movs	r5, #0
   d49bc:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
				data[3] = ((uint8_t) ((Time.now()) >> 24)); // Fourth byte - current time
   d49c0:	f006 feca 	bl	db758 <_ZN9TimeClass3nowEv>
   d49c4:	1600      	asrs	r0, r0, #24
   d49c6:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
				data[4] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   d49ca:	f006 fec5 	bl	db758 <_ZN9TimeClass3nowEv>
   d49ce:	1400      	asrs	r0, r0, #16
   d49d0:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
				data[5] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   d49d4:	f006 fec0 	bl	db758 <_ZN9TimeClass3nowEv>
   d49d8:	1200      	asrs	r0, r0, #8
   d49da:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
				data[6] = ((uint8_t) (Time.now()));				  // First byte			
   d49de:	f006 febb 	bl	db758 <_ZN9TimeClass3nowEv>
				data[7] = highByte(frequencyMinutes * 60);	// Time till next report
   d49e2:	883a      	ldrh	r2, [r7, #0]
				data[6] = ((uint8_t) (Time.now()));				  // First byte			
   d49e4:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
				data[7] = highByte(frequencyMinutes * 60);	// Time till next report
   d49e8:	263c      	movs	r6, #60	; 0x3c
   d49ea:	4356      	muls	r6, r2
				data[8] = lowByte(frequencyMinutes * 60);		
   d49ec:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
				data[7] = highByte(frequencyMinutes * 60);	// Time till next report
   d49f0:	1233      	asrs	r3, r6, #8
				data[8] = lowByte(frequencyMinutes * 60);		
   d49f2:	0091      	lsls	r1, r2, #2
				Log.info("Sent response to client message = %d, time = %u, next report = %u", data[2], (data[3] << 24 | data[4] << 16 | data[5] <<8 | data[6]), ( data[7] << 8 | data[8]));
   d49f4:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
				data[7] = highByte(frequencyMinutes * 60);	// Time till next report
   d49f8:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
				Log.info("Sent response to client message = %d, time = %u, next report = %u", data[2], (data[3] << 24 | data[4] << 16 | data[5] <<8 | data[6]), ( data[7] << 8 | data[8]));
   d49fc:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   d4a00:	0412      	lsls	r2, r2, #16
   d4a02:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d4a06:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
				data[8] = lowByte(frequencyMinutes * 60);		
   d4a0a:	b2c9      	uxtb	r1, r1
				Log.info("Sent response to client message = %d, time = %u, next report = %u", data[2], (data[3] << 24 | data[4] << 16 | data[5] <<8 | data[6]), ( data[7] << 8 | data[8]));
   d4a0c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
				data[8] = lowByte(frequencyMinutes * 60);		
   d4a10:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
				Log.info("Sent response to client message = %d, time = %u, next report = %u", data[2], (data[3] << 24 | data[4] << 16 | data[5] <<8 | data[6]), ( data[7] << 8 | data[8]));
   d4a14:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   d4a18:	b2c0      	uxtb	r0, r0
   d4a1a:	4331      	orrs	r1, r6
   d4a1c:	4303      	orrs	r3, r0
   d4a1e:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
   d4a22:	4864      	ldr	r0, [pc, #400]	; (d4bb4 <loop+0x2d4>)
   d4a24:	9100      	str	r1, [sp, #0]
   d4a26:	4966      	ldr	r1, [pc, #408]	; (d4bc0 <loop+0x2e0>)
   d4a28:	f7ff fb8c 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
				if (manager.sendtoWait(data, sizeof(data), from) != RH_ROUTER_ERROR_NONE) Log.info("sendtoWait failed");
   d4a2c:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   d4a30:	485d      	ldr	r0, [pc, #372]	; (d4ba8 <loop+0x2c8>)
   d4a32:	9500      	str	r5, [sp, #0]
   d4a34:	2209      	movs	r2, #9
   d4a36:	a910      	add	r1, sp, #64	; 0x40
   d4a38:	f002 fe3a 	bl	d76b0 <_ZN6RHMesh10sendtoWaitEPhhhh>
   d4a3c:	b310      	cbz	r0, d4a84 <loop+0x1a4>
   d4a3e:	4961      	ldr	r1, [pc, #388]	; (d4bc4 <loop+0x2e4>)
   d4a40:	485c      	ldr	r0, [pc, #368]	; (d4bb4 <loop+0x2d4>)
   d4a42:	f7ff fb7f 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
				digitalWrite(blueLED,LOW);			            // Done with the radio
   d4a46:	2100      	movs	r1, #0
   d4a48:	2007      	movs	r0, #7
   d4a4a:	f007 f896 	bl	dbb7a <digitalWrite>
				state = REPORTING_STATE;
   d4a4e:	2307      	movs	r3, #7
   d4a50:	f88a 3000 	strb.w	r3, [sl]
			if ((Time.now() - startLoRAWindow) > 3600L) state = CONNECTING_STATE;	// This is a fail safe to make sure an off-line client won't prevent gatewat from checking in - and setting its clock
   d4a54:	f006 fe80 	bl	db758 <_ZN9TimeClass3nowEv>
   d4a58:	e9d4 3200 	ldrd	r3, r2, [r4]
   d4a5c:	17c1      	asrs	r1, r0, #31
   d4a5e:	ebb0 0803 	subs.w	r8, r0, r3
   d4a62:	eb61 0902 	sbc.w	r9, r1, r2
   d4a66:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   d4a6a:	2300      	movs	r3, #0
   d4a6c:	4542      	cmp	r2, r8
   d4a6e:	eb73 0309 	sbcs.w	r3, r3, r9
   d4a72:	f6ff af5c 	blt.w	d492e <loop+0x4e>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   d4a76:	f001 ff1d 	bl	d68b4 <_ZN17PublishQueuePosix8instanceEv>
   d4a7a:	f001 fe0e 	bl	d669a <_ZN17PublishQueuePosix4loopEv>
}
   d4a7e:	b051      	add	sp, #324	; 0x144
   d4a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				else flashTheLEDs();
   d4a84:	f7ff fb88 	bl	d4198 <_Z12flashTheLEDsv>
   d4a88:	e7dd      	b.n	d4a46 <loop+0x166>
			if (state != oldState) publishStateTransition();
   d4a8a:	4b42      	ldr	r3, [pc, #264]	; (d4b94 <loop+0x2b4>)
   d4a8c:	781b      	ldrb	r3, [r3, #0]
   d4a8e:	2b07      	cmp	r3, #7
   d4a90:	d001      	beq.n	d4a96 <loop+0x1b6>
   d4a92:	f7ff fbc1 	bl	d4218 <_Z22publishStateTransitionv>
  			snprintf(data, sizeof(data), "{\"nodeid\":%u, \"hourly\":%u, \"daily\":%u,\"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"alerts\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",(buf[2] << 8 | buf[3]), (buf[5] << 8 | buf[6]), (buf[7] << 8 | buf[8]), buf[10], batteryContext[buf[11]], buf[9], buf[12], buf[13], ((buf[14] << 8 | buf[15]) - 65535), buf[16], Time.now());
   d4a96:	4a43      	ldr	r2, [pc, #268]	; (d4ba4 <loop+0x2c4>)
   d4a98:	494b      	ldr	r1, [pc, #300]	; (d4bc8 <loop+0x2e8>)
   d4a9a:	8853      	ldrh	r3, [r2, #2]
   d4a9c:	7ad0      	ldrb	r0, [r2, #11]
   d4a9e:	89d4      	ldrh	r4, [r2, #14]
   d4aa0:	7a97      	ldrb	r7, [r2, #10]
   d4aa2:	f892 9009 	ldrb.w	r9, [r2, #9]
   d4aa6:	f892 b00c 	ldrb.w	fp, [r2, #12]
   d4aaa:	f892 800d 	ldrb.w	r8, [r2, #13]
   d4aae:	f8b2 5005 	ldrh.w	r5, [r2, #5]
   d4ab2:	f8b2 6007 	ldrh.w	r6, [r2, #7]
   d4ab6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   d4aba:	7c12      	ldrb	r2, [r2, #16]
   d4abc:	910c      	str	r1, [sp, #48]	; 0x30
   d4abe:	ba5b      	rev16	r3, r3
   d4ac0:	b29b      	uxth	r3, r3
   d4ac2:	ba64      	rev16	r4, r4
   d4ac4:	930d      	str	r3, [sp, #52]	; 0x34
   d4ac6:	920a      	str	r2, [sp, #40]	; 0x28
   d4ac8:	b2a4      	uxth	r4, r4
   d4aca:	f006 fe45 	bl	db758 <_ZN9TimeClass3nowEv>
   d4ace:	ba6d      	rev16	r5, r5
   d4ad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d4ad2:	990c      	ldr	r1, [sp, #48]	; 0x30
   d4ad4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4ad6:	9009      	str	r0, [sp, #36]	; 0x24
   d4ad8:	ba76      	rev16	r6, r6
   d4ada:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   d4ade:	b2ad      	uxth	r5, r5
   d4ae0:	b2b6      	uxth	r6, r6
   d4ae2:	3cff      	subs	r4, #255	; 0xff
   d4ae4:	e9cd 4207 	strd	r4, r2, [sp, #28]
   d4ae8:	e9cd 7102 	strd	r7, r1, [sp, #8]
   d4aec:	4a37      	ldr	r2, [pc, #220]	; (d4bcc <loop+0x2ec>)
   d4aee:	f8cd 9010 	str.w	r9, [sp, #16]
   d4af2:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4af6:	e9cd b805 	strd	fp, r8, [sp, #20]
   d4afa:	e9cd 5600 	strd	r5, r6, [sp]
   d4afe:	a810      	add	r0, sp, #64	; 0x40
   d4b00:	f004 fc52 	bl	d93a8 <snprintf>
  			PublishQueuePosix::instance().publish("Ubidots-LoRA-Hook-v1", data, PRIVATE | WITH_ACK);
   d4b04:	f001 fed6 	bl	d68b4 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d4b08:	4b31      	ldr	r3, [pc, #196]	; (d4bd0 <loop+0x2f0>)
   d4b0a:	4a32      	ldr	r2, [pc, #200]	; (d4bd4 <loop+0x2f4>)
   d4b0c:	781b      	ldrb	r3, [r3, #0]
   d4b0e:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4b10:	2100      	movs	r1, #0
   d4b12:	4313      	orrs	r3, r2
   d4b14:	6802      	ldr	r2, [r0, #0]
   d4b16:	f88d 1004 	strb.w	r1, [sp, #4]
   d4b1a:	f88d 3000 	strb.w	r3, [sp]
   d4b1e:	6814      	ldr	r4, [r2, #0]
   d4b20:	492d      	ldr	r1, [pc, #180]	; (d4bd8 <loop+0x2f8>)
   d4b22:	233c      	movs	r3, #60	; 0x3c
   d4b24:	aa10      	add	r2, sp, #64	; 0x40
   d4b26:	47a0      	blx	r4
   d4b28:	e701      	b.n	d492e <loop+0x4e>
			if (state != oldState) publishStateTransition();  
   d4b2a:	4b1a      	ldr	r3, [pc, #104]	; (d4b94 <loop+0x2b4>)
   d4b2c:	781b      	ldrb	r3, [r3, #0]
   d4b2e:	2b05      	cmp	r3, #5
   d4b30:	d001      	beq.n	d4b36 <loop+0x256>
   d4b32:	f7ff fb71 	bl	d4218 <_Z22publishStateTransitionv>
        spark_cloud_flag_connect();
   d4b36:	f004 fb6f 	bl	d9218 <spark_cloud_flag_connect>
        return hal_timer_millis(nullptr);
   d4b3a:	2000      	movs	r0, #0
   d4b3c:	f004 f90e 	bl	d8d5c <hal_timer_millis>
        while (_while() && !_condition()) {
   d4b40:	4c26      	ldr	r4, [pc, #152]	; (d4bdc <loop+0x2fc>)
        return hal_timer_millis(nullptr);
   d4b42:	4680      	mov	r8, r0
   d4b44:	f04f 0900 	mov.w	r9, #0
        while (_while() && !_condition()) {
   d4b48:	2500      	movs	r5, #0
        return hal_timer_millis(nullptr);
   d4b4a:	2000      	movs	r0, #0
   d4b4c:	f004 f906 	bl	d8d5c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4b50:	ebb0 0608 	subs.w	r6, r0, r8
   d4b54:	eb61 0709 	sbc.w	r7, r1, r9
        while (_while() && !_condition()) {
   d4b58:	42bd      	cmp	r5, r7
   d4b5a:	bf08      	it	eq
   d4b5c:	42b4      	cmpeq	r4, r6
   d4b5e:	d305      	bcc.n	d4b6c <loop+0x28c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4b60:	f004 fb62 	bl	d9228 <spark_cloud_flag_connected>
   d4b64:	b910      	cbnz	r0, d4b6c <loop+0x28c>
            spark_process();
   d4b66:	f004 fb4f 	bl	d9208 <spark_process>
        while (_while() && !_condition()) {
   d4b6a:	e7ee      	b.n	d4b4a <loop+0x26a>
   d4b6c:	f004 fb5c 	bl	d9228 <spark_cloud_flag_connected>
			if (waitFor(Particle.connected, 600000)) {
   d4b70:	2800      	cmp	r0, #0
   d4b72:	d080      	beq.n	d4a76 <loop+0x196>
				lastConnectTime = Time.now();
   d4b74:	f006 fdf0 	bl	db758 <_ZN9TimeClass3nowEv>
   d4b78:	4b19      	ldr	r3, [pc, #100]	; (d4be0 <loop+0x300>)
   d4b7a:	17c1      	asrs	r1, r0, #31
   d4b7c:	e9c3 0100 	strd	r0, r1, [r3]
				if (lowPowerMode) state = DISCONNECTING_STATE;
   d4b80:	4b18      	ldr	r3, [pc, #96]	; (d4be4 <loop+0x304>)
   d4b82:	781b      	ldrb	r3, [r3, #0]
   d4b84:	2b00      	cmp	r3, #0
   d4b86:	f000 808d 	beq.w	d4ca4 <loop+0x3c4>
   d4b8a:	2306      	movs	r3, #6
   d4b8c:	e6d8      	b.n	d4940 <loop+0x60>
   d4b8e:	bf00      	nop
   d4b90:	2003e308 	.word	0x2003e308
   d4b94:	2003e2d0 	.word	0x2003e2d0
   d4b98:	2003e2d8 	.word	0x2003e2d8
   d4b9c:	2003e30c 	.word	0x2003e30c
   d4ba0:	2003de38 	.word	0x2003de38
   d4ba4:	2003de48 	.word	0x2003de48
   d4ba8:	2003e198 	.word	0x2003e198
   d4bac:	2003e038 	.word	0x2003e038
   d4bb0:	000dcbb8 	.word	0x000dcbb8
   d4bb4:	2003e59c 	.word	0x2003e59c
   d4bb8:	2003dd0c 	.word	0x2003dd0c
   d4bbc:	2003e30a 	.word	0x2003e30a
   d4bc0:	000dcbe3 	.word	0x000dcbe3
   d4bc4:	000dcc25 	.word	0x000dcc25
   d4bc8:	2003dcf0 	.word	0x2003dcf0
   d4bcc:	000dcc37 	.word	0x000dcc37
   d4bd0:	2003de28 	.word	0x2003de28
   d4bd4:	2003de29 	.word	0x2003de29
   d4bd8:	000dccc2 	.word	0x000dccc2
   d4bdc:	000927bf 	.word	0x000927bf
   d4be0:	2003e168 	.word	0x2003e168
   d4be4:	2003e194 	.word	0x2003e194
			if (state != oldState) publishStateTransition();  
   d4be8:	4b2f      	ldr	r3, [pc, #188]	; (d4ca8 <loop+0x3c8>)
   d4bea:	781b      	ldrb	r3, [r3, #0]
   d4bec:	2b06      	cmp	r3, #6
   d4bee:	d001      	beq.n	d4bf4 <loop+0x314>
   d4bf0:	f7ff fb12 	bl	d4218 <_Z22publishStateTransitionv>
			static time_t stayConnectedWindow = Time.now();
   d4bf4:	4f2d      	ldr	r7, [pc, #180]	; (d4cac <loop+0x3cc>)
   d4bf6:	4e2e      	ldr	r6, [pc, #184]	; (d4cb0 <loop+0x3d0>)
   d4bf8:	783b      	ldrb	r3, [r7, #0]
   d4bfa:	f3bf 8f5b 	dmb	ish
   d4bfe:	f013 0f01 	tst.w	r3, #1
   d4c02:	d10b      	bne.n	d4c1c <loop+0x33c>
   d4c04:	4638      	mov	r0, r7
   d4c06:	f7ff fa57 	bl	d40b8 <__cxa_guard_acquire>
   d4c0a:	b138      	cbz	r0, d4c1c <loop+0x33c>
   d4c0c:	f006 fda4 	bl	db758 <_ZN9TimeClass3nowEv>
   d4c10:	17c1      	asrs	r1, r0, #31
   d4c12:	e9c6 0100 	strd	r0, r1, [r6]
   d4c16:	4638      	mov	r0, r7
   d4c18:	f7ff fa53 	bl	d40c2 <__cxa_guard_release>
			if (Time.now() - stayConnectedWindow > 90) {
   d4c1c:	f006 fd9c 	bl	db758 <_ZN9TimeClass3nowEv>
   d4c20:	e9d6 3200 	ldrd	r3, r2, [r6]
   d4c24:	17c1      	asrs	r1, r0, #31
   d4c26:	1ac4      	subs	r4, r0, r3
   d4c28:	eb61 0502 	sbc.w	r5, r1, r2
   d4c2c:	2c5b      	cmp	r4, #91	; 0x5b
   d4c2e:	f175 0300 	sbcs.w	r3, r5, #0
   d4c32:	f6ff af20 	blt.w	d4a76 <loop+0x196>
				Log.info("Disconnecting from Particle / Cellular");
   d4c36:	491f      	ldr	r1, [pc, #124]	; (d4cb4 <loop+0x3d4>)
   d4c38:	481f      	ldr	r0, [pc, #124]	; (d4cb8 <loop+0x3d8>)
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4c3a:	4d20      	ldr	r5, [pc, #128]	; (d4cbc <loop+0x3dc>)
   d4c3c:	f7ff fa82 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   d4c40:	2400      	movs	r4, #0
				Particle.disconnect();
   d4c42:	a810      	add	r0, sp, #64	; 0x40
   d4c44:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
   d4c48:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
   d4c4c:	f004 fcd2 	bl	d95f4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
				delay(2000);
   d4c50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4c54:	f004 fbf0 	bl	d9438 <delay>
   d4c58:	6868      	ldr	r0, [r5, #4]
   d4c5a:	4623      	mov	r3, r4
   d4c5c:	4622      	mov	r2, r4
   d4c5e:	4621      	mov	r1, r4
   d4c60:	f004 fb42 	bl	d92e8 <network_off>
        return hal_timer_millis(nullptr);
   d4c64:	4620      	mov	r0, r4
   d4c66:	f004 f879 	bl	d8d5c <hal_timer_millis>
        while (_while() && !_condition()) {
   d4c6a:	f242 760f 	movw	r6, #9999	; 0x270f
        return hal_timer_millis(nullptr);
   d4c6e:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d4c70:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d4c72:	2000      	movs	r0, #0
   d4c74:	f004 f872 	bl	d8d5c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4c78:	ebb0 0308 	subs.w	r3, r0, r8
   d4c7c:	930a      	str	r3, [sp, #40]	; 0x28
   d4c7e:	eb61 0304 	sbc.w	r3, r1, r4
   d4c82:	930b      	str	r3, [sp, #44]	; 0x2c
        while (_while() && !_condition()) {
   d4c84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d4c88:	429f      	cmp	r7, r3
   d4c8a:	bf08      	it	eq
   d4c8c:	4296      	cmpeq	r6, r2
   d4c8e:	d306      	bcc.n	d4c9e <loop+0x3be>
				waitFor(Cellular.isOff,10000);
   d4c90:	4628      	mov	r0, r5
   d4c92:	f006 f9bf 	bl	db014 <_ZN5spark12NetworkClass5isOffEv>
   d4c96:	b910      	cbnz	r0, d4c9e <loop+0x3be>
            spark_process();
   d4c98:	f004 fab6 	bl	d9208 <spark_process>
        while (_while() && !_condition()) {
   d4c9c:	e7e9      	b.n	d4c72 <loop+0x392>
   d4c9e:	4807      	ldr	r0, [pc, #28]	; (d4cbc <loop+0x3dc>)
   d4ca0:	f006 f9b8 	bl	db014 <_ZN5spark12NetworkClass5isOffEv>
				state = SLEEPING_STATE;
   d4ca4:	2303      	movs	r3, #3
   d4ca6:	e64b      	b.n	d4940 <loop+0x60>
   d4ca8:	2003e2d0 	.word	0x2003e2d0
   d4cac:	2003de24 	.word	0x2003de24
   d4cb0:	2003de40 	.word	0x2003de40
   d4cb4:	000dccd7 	.word	0x000dccd7
   d4cb8:	2003e59c 	.word	0x2003e59c
   d4cbc:	2003e558 	.word	0x2003e558

000d4cc0 <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4cc0:	2a02      	cmp	r2, #2
   d4cc2:	d006      	beq.n	d4cd2 <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x12>
   d4cc4:	2a03      	cmp	r2, #3
   d4cc6:	d002      	beq.n	d4cce <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d4cc8:	2a01      	cmp	r2, #1
   d4cca:	d100      	bne.n	d4cce <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4ccc:	6001      	str	r1, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4cce:	2000      	movs	r0, #0
   d4cd0:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4cd2:	680b      	ldr	r3, [r1, #0]
   d4cd4:	6003      	str	r3, [r0, #0]
	}
   d4cd6:	e7fa      	b.n	d4cce <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>

000d4cd8 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4cd8:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d4cda:	2301      	movs	r3, #1
   d4cdc:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d4cde:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d4ce0:	4604      	mov	r4, r0
        if (th->func) {
   d4ce2:	b143      	cbz	r3, d4cf6 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d4ce4:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ce6:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d4ce8:	2301      	movs	r3, #1
   d4cea:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d4cec:	2000      	movs	r0, #0
    }
   d4cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d4cf2:	f004 b803 	b.w	d8cfc <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d4cf6:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d4cf8:	2800      	cmp	r0, #0
   d4cfa:	d0f5      	beq.n	d4ce8 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d4cfc:	6883      	ldr	r3, [r0, #8]
   d4cfe:	b90b      	cbnz	r3, d4d04 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d4d00:	f006 ffb0 	bl	dbc64 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d04:	68c3      	ldr	r3, [r0, #12]
   d4d06:	e7ee      	b.n	d4ce6 <_ZN6Thread3runEPv+0xe>

000d4d08 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4d08:	b510      	push	{r4, lr}
      if (_M_manager)
   d4d0a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4d0c:	4604      	mov	r4, r0
      if (_M_manager)
   d4d0e:	b113      	cbz	r3, d4d16 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4d10:	2203      	movs	r2, #3
   d4d12:	4601      	mov	r1, r0
   d4d14:	4798      	blx	r3
    }
   d4d16:	4620      	mov	r0, r4
   d4d18:	bd10      	pop	{r4, pc}

000d4d1a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d4d1a:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d4d1c:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   d4d1e:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   d4d20:	b135      	cbz	r5, d4d30 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   d4d22:	4628      	mov	r0, r5
   d4d24:	f7ff fff0 	bl	d4d08 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d4d28:	2110      	movs	r1, #16
   d4d2a:	4628      	mov	r0, r5
   d4d2c:	f006 ff8e 	bl	dbc4c <_ZdlPvj>
   d4d30:	4620      	mov	r0, r4
   d4d32:	2114      	movs	r1, #20
      }
   d4d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d4d38:	f006 bf88 	b.w	dbc4c <_ZdlPvj>

000d4d3c <_ZN6Thread7disposeEv>:
    void dispose()
   d4d3c:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d4d3e:	6803      	ldr	r3, [r0, #0]
   d4d40:	4604      	mov	r4, r0
        if (!isValid())
   d4d42:	b1ab      	cbz	r3, d4d70 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   d4d44:	6858      	ldr	r0, [r3, #4]
   d4d46:	f003 ff89 	bl	d8c5c <os_thread_is_current>
   d4d4a:	b988      	cbnz	r0, d4d70 <_ZN6Thread7disposeEv+0x34>
   d4d4c:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d4d4e:	7c5a      	ldrb	r2, [r3, #17]
   d4d50:	b912      	cbnz	r2, d4d58 <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d4d52:	6858      	ldr	r0, [r3, #4]
   d4d54:	f003 ff8a 	bl	d8c6c <os_thread_join>
        os_thread_cleanup(d_->handle);
   d4d58:	6823      	ldr	r3, [r4, #0]
   d4d5a:	6858      	ldr	r0, [r3, #4]
   d4d5c:	f003 ff8e 	bl	d8c7c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d60:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4d62:	2300      	movs	r3, #0
   d4d64:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d4d66:	b118      	cbz	r0, d4d70 <_ZN6Thread7disposeEv+0x34>
    }
   d4d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4d6c:	f7ff bfd5 	b.w	d4d1a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d4d70:	bd10      	pop	{r4, pc}
	...

000d4d74 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   d4d74:	4a05      	ldr	r2, [pc, #20]	; (d4d8c <_ZN19BackgroundPublishRKC1Ev+0x18>)
   d4d76:	6002      	str	r2, [r0, #0]
   d4d78:	2200      	movs	r2, #0
   d4d7a:	6042      	str	r2, [r0, #4]
   d4d7c:	7302      	strb	r2, [r0, #12]
        val_(0) {
   d4d7e:	f880 22bd 	strb.w	r2, [r0, #701]	; 0x2bd
    _Function_base() : _M_manager(nullptr) { }
   d4d82:	f8c0 22c8 	str.w	r2, [r0, #712]	; 0x2c8
   d4d86:	f8c0 22d0 	str.w	r2, [r0, #720]	; 0x2d0
}
   d4d8a:	4770      	bx	lr
   d4d8c:	000dcd88 	.word	0x000dcd88

000d4d90 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   d4d90:	b510      	push	{r4, lr}
    if (!_instance) {
   d4d92:	4c07      	ldr	r4, [pc, #28]	; (d4db0 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   d4d94:	6823      	ldr	r3, [r4, #0]
   d4d96:	b943      	cbnz	r3, d4daa <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   d4d98:	f44f 7035 	mov.w	r0, #724	; 0x2d4
   d4d9c:	f7ff f97b 	bl	d4096 <_Znwj>
   d4da0:	4603      	mov	r3, r0
   d4da2:	b108      	cbz	r0, d4da8 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   d4da4:	f7ff ffe6 	bl	d4d74 <_ZN19BackgroundPublishRKC1Ev>
   d4da8:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   d4daa:	6820      	ldr	r0, [r4, #0]
   d4dac:	bd10      	pop	{r4, pc}
   d4dae:	bf00      	nop
   d4db0:	2003e310 	.word	0x2003e310

000d4db4 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   d4db4:	b538      	push	{r3, r4, r5, lr}
   d4db6:	4604      	mov	r4, r0
    if(thread)
   d4db8:	6840      	ldr	r0, [r0, #4]
   d4dba:	b190      	cbz	r0, d4de2 <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   d4dbc:	2302      	movs	r3, #2
   d4dbe:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   d4dc0:	f7ff ffbc 	bl	d4d3c <_ZN6Thread7disposeEv>
        delete thread;
   d4dc4:	6865      	ldr	r5, [r4, #4]
   d4dc6:	b155      	cbz	r5, d4dde <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   d4dc8:	4628      	mov	r0, r5
   d4dca:	f7ff ffb7 	bl	d4d3c <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   d4dce:	6828      	ldr	r0, [r5, #0]
   d4dd0:	b108      	cbz	r0, d4dd6 <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   d4dd2:	f7ff ffa2 	bl	d4d1a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d4dd6:	2104      	movs	r1, #4
   d4dd8:	4628      	mov	r0, r5
   d4dda:	f006 ff37 	bl	dbc4c <_ZdlPvj>
        thread = NULL;
   d4dde:	2300      	movs	r3, #0
   d4de0:	6063      	str	r3, [r4, #4]
    }
}
   d4de2:	bd38      	pop	{r3, r4, r5, pc}

000d4de4 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d4de4:	b510      	push	{r4, lr}
   d4de6:	4b05      	ldr	r3, [pc, #20]	; (d4dfc <_ZN19BackgroundPublishRKD1Ev+0x18>)
   d4de8:	6003      	str	r3, [r0, #0]
   d4dea:	4604      	mov	r4, r0
    stop();
   d4dec:	f7ff ffe2 	bl	d4db4 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   d4df0:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d4df4:	f7ff ff88 	bl	d4d08 <_ZNSt14_Function_baseD1Ev>
}
   d4df8:	4620      	mov	r0, r4
   d4dfa:	bd10      	pop	{r4, pc}
   d4dfc:	000dcd88 	.word	0x000dcd88

000d4e00 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d4e00:	b510      	push	{r4, lr}
   d4e02:	4604      	mov	r4, r0
}
   d4e04:	f7ff ffee 	bl	d4de4 <_ZN19BackgroundPublishRKD1Ev>
   d4e08:	4620      	mov	r0, r4
   d4e0a:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   d4e0e:	f006 ff1d 	bl	dbc4c <_ZdlPvj>
   d4e12:	4620      	mov	r0, r4
   d4e14:	bd10      	pop	{r4, pc}

000d4e16 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   d4e16:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4e18:	4604      	mov	r4, r0
   d4e1a:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   d4e1c:	f100 060d 	add.w	r6, r0, #13
   d4e20:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   d4e24:	7b23      	ldrb	r3, [r4, #12]
   d4e26:	b91b      	cbnz	r3, d4e30 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   d4e28:	2001      	movs	r0, #1
   d4e2a:	f004 fb05 	bl	d9438 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   d4e2e:	e7f9      	b.n	d4e24 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   d4e30:	7b23      	ldrb	r3, [r4, #12]
   d4e32:	2b02      	cmp	r3, #2
   d4e34:	d062      	beq.n	d4efc <_ZN19BackgroundPublishRK8thread_fEv+0xe6>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   d4e36:	68a0      	ldr	r0, [r4, #8]
   d4e38:	f003 ff30 	bl	d8c9c <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   d4e3c:	68a0      	ldr	r0, [r4, #8]
   d4e3e:	f003 ff35 	bl	d8cac <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4e42:	f894 32bd 	ldrb.w	r3, [r4, #701]	; 0x2bd
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4e46:	f88d 3000 	strb.w	r3, [sp]
   d4e4a:	463a      	mov	r2, r7
   d4e4c:	233c      	movs	r3, #60	; 0x3c
   d4e4e:	4631      	mov	r1, r6
   d4e50:	a806      	add	r0, sp, #24
   d4e52:	f004 fccb 	bl	d97ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d4e56:	9d06      	ldr	r5, [sp, #24]
   d4e58:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d4e5a:	b933      	cbnz	r3, d4e6a <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   d4e5c:	7b23      	ldrb	r3, [r4, #12]
   d4e5e:	2b02      	cmp	r3, #2
   d4e60:	d003      	beq.n	d4e6a <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   d4e62:	2001      	movs	r0, #1
   d4e64:	f004 fae8 	bl	d9438 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d4e68:	e7f5      	b.n	d4e56 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   d4e6a:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d4e6e:	b31b      	cbz	r3, d4eb8 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4e70:	2000      	movs	r0, #0
   d4e72:	f004 f98d 	bl	d9190 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4e76:	b120      	cbz	r0, d4e82 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   d4e78:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d4e7a:	b913      	cbnz	r3, d4e82 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   d4e7c:	f004 f9c4 	bl	d9208 <spark_process>
    }
   d4e80:	e7fa      	b.n	d4e78 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4e82:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   d4e84:	f8d4 22d0 	ldr.w	r2, [r4, #720]	; 0x2d0
   d4e88:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   d4e8a:	1e59      	subs	r1, r3, #1
   d4e8c:	424b      	negs	r3, r1
   d4e8e:	414b      	adcs	r3, r1
   d4e90:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   d4e94:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d4e98:	e9cd 6703 	strd	r6, r7, [sp, #12]
   d4e9c:	b90b      	cbnz	r3, d4ea2 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   d4e9e:	f006 fee1 	bl	dbc64 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ea2:	ab05      	add	r3, sp, #20
   d4ea4:	9300      	str	r3, [sp, #0]
   d4ea6:	f8d4 52cc 	ldr.w	r5, [r4, #716]	; 0x2cc
   d4eaa:	ab04      	add	r3, sp, #16
   d4eac:	aa03      	add	r2, sp, #12
   d4eae:	f10d 010b 	add.w	r1, sp, #11
   d4eb2:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d4eb6:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   d4eb8:	68a0      	ldr	r0, [r4, #8]
   d4eba:	f003 feef 	bl	d8c9c <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   d4ebe:	7b23      	ldrb	r3, [r4, #12]
   d4ec0:	2b02      	cmp	r3, #2
   d4ec2:	d015      	beq.n	d4ef0 <_ZN19BackgroundPublishRK8thread_fEv+0xda>
	if (_M_manager)
   d4ec4:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
            {
                return;
            }
            event_context = NULL;
   d4ec8:	2500      	movs	r5, #0
   d4eca:	f8c4 52d0 	str.w	r5, [r4, #720]	; 0x2d0
   d4ece:	b133      	cbz	r3, d4ede <_ZN19BackgroundPublishRK8thread_fEv+0xc8>
            completed_cb = NULL;
   d4ed0:	f504 7130 	add.w	r1, r4, #704	; 0x2c0
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ed4:	2203      	movs	r2, #3
   d4ed6:	4608      	mov	r0, r1
   d4ed8:	4798      	blx	r3
	    _M_invoker = nullptr;
   d4eda:	e9c4 55b2 	strd	r5, r5, [r4, #712]	; 0x2c8
            state = BACKGROUND_PUBLISH_IDLE;
   d4ede:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   d4ee0:	68a0      	ldr	r0, [r4, #8]
   d4ee2:	7323      	strb	r3, [r4, #12]
   d4ee4:	f003 fee2 	bl	d8cac <os_mutex_unlock>
   d4ee8:	a807      	add	r0, sp, #28
   d4eea:	f7ff f97f 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4eee:	e799      	b.n	d4e24 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   d4ef0:	68a0      	ldr	r0, [r4, #8]
   d4ef2:	f003 fedb 	bl	d8cac <os_mutex_unlock>
   d4ef6:	a807      	add	r0, sp, #28
   d4ef8:	f7ff f978 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d4efc:	b009      	add	sp, #36	; 0x24
   d4efe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f00 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   d4f00:	6800      	ldr	r0, [r0, #0]
   d4f02:	f7ff bf88 	b.w	d4e16 <_ZN19BackgroundPublishRK8thread_fEv>

000d4f06 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d4f06:	b513      	push	{r0, r1, r4, lr}
   d4f08:	460b      	mov	r3, r1
   d4f0a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f0c:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4f10:	466c      	mov	r4, sp
   d4f12:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4f16:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4f1a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4f1e:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4f22:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4f26:	b002      	add	sp, #8
   d4f28:	bd10      	pop	{r4, pc}
	...

000d4f2c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   d4f2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4f30:	4606      	mov	r6, r0
   d4f32:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   d4f34:	2014      	movs	r0, #20
   d4f36:	4926      	ldr	r1, [pc, #152]	; (d4fd0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   d4f38:	4617      	mov	r7, r2
   d4f3a:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   d4f3c:	f006 fe88 	bl	dbc50 <_ZnwjRKSt9nothrow_t>
   d4f40:	4604      	mov	r4, r0
   d4f42:	b130      	cbz	r0, d4f52 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4f44:	2200      	movs	r2, #0
            exited(false) {
   d4f46:	e9c0 2200 	strd	r2, r2, [r0]
   d4f4a:	e9c0 2202 	strd	r2, r2, [r0, #8]
   d4f4e:	7402      	strb	r2, [r0, #16]
   d4f50:	7442      	strb	r2, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d4f52:	6034      	str	r4, [r6, #0]
        if (!d_) {
   d4f54:	2c00      	cmp	r4, #0
   d4f56:	d031      	beq.n	d4fbc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d4f58:	491d      	ldr	r1, [pc, #116]	; (d4fd0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   d4f5a:	2010      	movs	r0, #16
   d4f5c:	f006 fe78 	bl	dbc50 <_ZnwjRKSt9nothrow_t>
   d4f60:	4605      	mov	r5, r0
   d4f62:	b168      	cbz	r0, d4f80 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   d4f64:	2300      	movs	r3, #0
   d4f66:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4f68:	4601      	mov	r1, r0
   d4f6a:	4638      	mov	r0, r7
   d4f6c:	f7ff ffcb 	bl	d4f06 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f70:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4f72:	68aa      	ldr	r2, [r5, #8]
   d4f74:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f76:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4f78:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f7a:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f7c:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4f7e:	60fa      	str	r2, [r7, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f80:	6827      	ldr	r7, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4f82:	6025      	str	r5, [r4, #0]
	if (__p != pointer())
   d4f84:	b137      	cbz	r7, d4f94 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   d4f86:	4638      	mov	r0, r7
   d4f88:	f7ff febe 	bl	d4d08 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d4f8c:	2110      	movs	r1, #16
   d4f8e:	4638      	mov	r0, r7
   d4f90:	f006 fe5c 	bl	dbc4c <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d4f94:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   d4f96:	6803      	ldr	r3, [r0, #0]
   d4f98:	b183      	cbz	r3, d4fbc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d4f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4f9c:	464a      	mov	r2, r9
   d4f9e:	e9cd 0300 	strd	r0, r3, [sp]
   d4fa2:	4641      	mov	r1, r8
   d4fa4:	4b0b      	ldr	r3, [pc, #44]	; (d4fd4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   d4fa6:	3004      	adds	r0, #4
   d4fa8:	f003 fe50 	bl	d8c4c <os_thread_create>
   d4fac:	b930      	cbnz	r0, d4fbc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   d4fae:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   d4fb0:	7c1b      	ldrb	r3, [r3, #16]
   d4fb2:	b94b      	cbnz	r3, d4fc8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   d4fb4:	2001      	movs	r0, #1
   d4fb6:	f003 feb1 	bl	d8d1c <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d4fba:	e7f8      	b.n	d4fae <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fbc:	6830      	ldr	r0, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4fbe:	2300      	movs	r3, #0
   d4fc0:	6033      	str	r3, [r6, #0]
	if (__p != pointer())
   d4fc2:	b108      	cbz	r0, d4fc8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   d4fc4:	f7ff fea9 	bl	d4d1a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d4fc8:	4630      	mov	r0, r6
   d4fca:	b003      	add	sp, #12
   d4fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4fd0:	000dd6b8 	.word	0x000dd6b8
   d4fd4:	000d4cd9 	.word	0x000d4cd9

000d4fd8 <_ZN19BackgroundPublishRK5startEv>:
{
   d4fd8:	b530      	push	{r4, r5, lr}
    if(!thread)
   d4fda:	6843      	ldr	r3, [r0, #4]
{
   d4fdc:	b087      	sub	sp, #28
   d4fde:	4604      	mov	r4, r0
    if(!thread)
   d4fe0:	b9c3      	cbnz	r3, d5014 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   d4fe2:	3008      	adds	r0, #8
   d4fe4:	f003 fe52 	bl	d8c8c <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   d4fe8:	4b0b      	ldr	r3, [pc, #44]	; (d5018 <_ZN19BackgroundPublishRK5startEv+0x40>)
   d4fea:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   d4fec:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   d4fee:	4b0b      	ldr	r3, [pc, #44]	; (d501c <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d4ff0:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d4ff2:	9304      	str	r3, [sp, #16]
   d4ff4:	f7ff f84f 	bl	d4096 <_Znwj>
   d4ff8:	4605      	mov	r5, r0
   d4ffa:	b138      	cbz	r0, d500c <_ZN19BackgroundPublishRK5startEv+0x34>
   d4ffc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d5000:	9300      	str	r3, [sp, #0]
   d5002:	4907      	ldr	r1, [pc, #28]	; (d5020 <_ZN19BackgroundPublishRK5startEv+0x48>)
   d5004:	2302      	movs	r3, #2
   d5006:	aa02      	add	r2, sp, #8
   d5008:	f7ff ff90 	bl	d4f2c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   d500c:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   d500e:	a802      	add	r0, sp, #8
   d5010:	f7ff fe7a 	bl	d4d08 <_ZNSt14_Function_baseD1Ev>
}
   d5014:	b007      	add	sp, #28
   d5016:	bd30      	pop	{r4, r5, pc}
   d5018:	000d4f01 	.word	0x000d4f01
   d501c:	000d4cc1 	.word	0x000d4cc1
   d5020:	000dcd6b 	.word	0x000dcd6b

000d5024 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   d5024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5028:	4604      	mov	r4, r0
   d502a:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   d502c:	6880      	ldr	r0, [r0, #8]
   d502e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d5030:	4698      	mov	r8, r3
   d5032:	460d      	mov	r5, r1
   d5034:	4616      	mov	r6, r2
   d5036:	f003 fe31 	bl	d8c9c <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   d503a:	6863      	ldr	r3, [r4, #4]
   d503c:	b11b      	cbz	r3, d5046 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   d503e:	7b23      	ldrb	r3, [r4, #12]
   d5040:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   d5044:	b133      	cbz	r3, d5054 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   d5046:	68a0      	ldr	r0, [r4, #8]
   d5048:	f003 fe30 	bl	d8cac <os_mutex_unlock>
    {
        return false;
   d504c:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   d504e:	b005      	add	sp, #20
   d5050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5054:	68a0      	ldr	r0, [r4, #8]
   d5056:	f003 fe29 	bl	d8cac <os_mutex_unlock>
    if(!name)
   d505a:	2d00      	cmp	r5, #0
   d505c:	d03d      	beq.n	d50da <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   d505e:	2241      	movs	r2, #65	; 0x41
   d5060:	4629      	mov	r1, r5
   d5062:	f104 000d 	add.w	r0, r4, #13
   d5066:	f007 fb04 	bl	dc672 <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   d506a:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   d506e:	b38e      	cbz	r6, d50d4 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   d5070:	f240 226f 	movw	r2, #623	; 0x26f
   d5074:	4631      	mov	r1, r6
   d5076:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   d507a:	f007 fafa 	bl	dc672 <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   d507e:	f884 92bc 	strb.w	r9, [r4, #700]	; 0x2bc
    _Function_base() : _M_manager(nullptr) { }
   d5082:	2300      	movs	r3, #0
   d5084:	9302      	str	r3, [sp, #8]
      { return !_M_empty(); }
   d5086:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   d5088:	f504 7530 	add.w	r5, r4, #704	; 0x2c0
      if (static_cast<bool>(__x))
   d508c:	b13b      	cbz	r3, d509e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d508e:	2202      	movs	r2, #2
   d5090:	4639      	mov	r1, r7
   d5092:	4668      	mov	r0, sp
   d5094:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5096:	68fb      	ldr	r3, [r7, #12]
   d5098:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   d509a:	68bb      	ldr	r3, [r7, #8]
   d509c:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d509e:	4629      	mov	r1, r5
   d50a0:	4668      	mov	r0, sp
   d50a2:	f7ff ff30 	bl	d4f06 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50a6:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d50a8:	f8d4 22c8 	ldr.w	r2, [r4, #712]	; 0x2c8
      __b = _GLIBCXX_MOVE(__tmp);
   d50ac:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50b0:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d50b2:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d50b4:	4668      	mov	r0, sp
   d50b6:	f8d4 22cc 	ldr.w	r2, [r4, #716]	; 0x2cc
      __b = _GLIBCXX_MOVE(__tmp);
   d50ba:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
      __a = _GLIBCXX_MOVE(__b);
   d50be:	9203      	str	r2, [sp, #12]
   d50c0:	f7ff fe22 	bl	d4d08 <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   d50c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d50c6:	f8c4 32d0 	str.w	r3, [r4, #720]	; 0x2d0
    state = BACKGROUND_PUBLISH_REQUESTED;
   d50ca:	2001      	movs	r0, #1
    event_flags = flags;
   d50cc:	f884 82bd 	strb.w	r8, [r4, #701]	; 0x2bd
    state = BACKGROUND_PUBLISH_REQUESTED;
   d50d0:	7320      	strb	r0, [r4, #12]
    return true;
   d50d2:	e7bc      	b.n	d504e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   d50d4:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   d50d8:	e7d3      	b.n	d5082 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   d50da:	4628      	mov	r0, r5
   d50dc:	e7b7      	b.n	d504e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>

000d50de <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   d50de:	4770      	bx	lr

000d50e0 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   d50e0:	4770      	bx	lr

000d50e2 <_ZNSt17_Function_handlerIFbR21LocalTimeScheduleItemEZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      }
   d50e2:	2001      	movs	r0, #1
   d50e4:	4770      	bx	lr

000d50e6 <_ZNSt14_Function_base13_Base_managerIZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlR21LocalTimeScheduleItemE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d50e6:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d50e8:	bf08      	it	eq
   d50ea:	6001      	streq	r1, [r0, #0]
	}
   d50ec:	2000      	movs	r0, #0
   d50ee:	4770      	bx	lr

000d50f0 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   d50f0:	b510      	push	{r4, lr}
}
   d50f2:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   d50f4:	4604      	mov	r4, r0
}
   d50f6:	f006 fda9 	bl	dbc4c <_ZdlPvj>
   d50fa:	4620      	mov	r0, r4
   d50fc:	bd10      	pop	{r4, pc}

000d50fe <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   d50fe:	b510      	push	{r4, lr}
}
   d5100:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   d5102:	4604      	mov	r4, r0
}
   d5104:	f006 fda2 	bl	dbc4c <_ZdlPvj>
   d5108:	4620      	mov	r0, r4
   d510a:	bd10      	pop	{r4, pc}

000d510c <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d510c:	b510      	push	{r4, lr}
   d510e:	4b05      	ldr	r3, [pc, #20]	; (d5124 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   d5110:	4604      	mov	r4, r0
   d5112:	f840 3b1c 	str.w	r3, [r0], #28
   d5116:	f006 f96f 	bl	db3f8 <_ZN6StringD1Ev>
   d511a:	1d20      	adds	r0, r4, #4
   d511c:	f006 f96c 	bl	db3f8 <_ZN6StringD1Ev>
}
   d5120:	4620      	mov	r0, r4
   d5122:	bd10      	pop	{r4, pc}
   d5124:	000dce18 	.word	0x000dce18

000d5128 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d5128:	b510      	push	{r4, lr}
   d512a:	4604      	mov	r4, r0
}
   d512c:	f7ff ffee 	bl	d510c <_ZN22LocalTimePosixTimezoneD1Ev>
   d5130:	4620      	mov	r0, r4
   d5132:	2158      	movs	r1, #88	; 0x58
   d5134:	f006 fd8a 	bl	dbc4c <_ZdlPvj>
   d5138:	4620      	mov	r0, r4
   d513a:	bd10      	pop	{r4, pc}

000d513c <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   d513c:	b510      	push	{r4, lr}
   d513e:	4b04      	ldr	r3, [pc, #16]	; (d5150 <_ZN9LocalTimeD1Ev+0x14>)
   d5140:	4604      	mov	r4, r0
   d5142:	f840 3b04 	str.w	r3, [r0], #4
   d5146:	f7ff ffe1 	bl	d510c <_ZN22LocalTimePosixTimezoneD1Ev>
   d514a:	4620      	mov	r0, r4
   d514c:	bd10      	pop	{r4, pc}
   d514e:	bf00      	nop
   d5150:	000dcde8 	.word	0x000dcde8

000d5154 <_ZN9LocalTimeD0Ev>:
   d5154:	b510      	push	{r4, lr}
   d5156:	4604      	mov	r4, r0
   d5158:	f7ff fff0 	bl	d513c <_ZN9LocalTimeD1Ev>
   d515c:	4620      	mov	r0, r4
   d515e:	2160      	movs	r1, #96	; 0x60
   d5160:	f006 fd74 	bl	dbc4c <_ZdlPvj>
   d5164:	4620      	mov	r0, r4
   d5166:	bd10      	pop	{r4, pc}

000d5168 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   d5168:	f020 0302 	bic.w	r3, r0, #2
   d516c:	2b01      	cmp	r3, #1
   d516e:	d003      	beq.n	d5178 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   d5170:	1f43      	subs	r3, r0, #5
   d5172:	4258      	negs	r0, r3
   d5174:	4158      	adcs	r0, r3
   d5176:	4770      	bx	lr
   d5178:	4618      	mov	r0, r3
   d517a:	4770      	bx	lr

000d517c <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>:
	if (__p)
   d517c:	b108      	cbz	r0, d5182 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0+0x6>
   d517e:	f7fe bf8e 	b.w	d409e <_ZdlPv>
	  _Tr::deallocate(_M_impl, __p, __n);
      }
   d5182:	4770      	bx	lr

000d5184 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   d5184:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d5186:	b148      	cbz	r0, d519c <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->max_size())
   d5188:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   d518c:	d301      	bcc.n	d5192 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   d518e:	f006 fd63 	bl	dbc58 <_ZSt17__throw_bad_allocv>
      }
   d5192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5196:	0080      	lsls	r0, r0, #2
   d5198:	f7fe bf7d 	b.w	d4096 <_Znwj>
   d519c:	bd08      	pop	{r3, pc}

000d519e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d519e:	680b      	ldr	r3, [r1, #0]
   d51a0:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   d51a2:	684b      	ldr	r3, [r1, #4]
   d51a4:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   d51a6:	b113      	cbz	r3, d51ae <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   d51a8:	685a      	ldr	r2, [r3, #4]
   d51aa:	3201      	adds	r2, #1
   d51ac:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d51ae:	4770      	bx	lr

000d51b0 <_ZNK12LocalTimeHMS9compareToERKS_>:
        if (hour < other.hour) {
   d51b0:	f990 2004 	ldrsb.w	r2, [r0, #4]
   d51b4:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d51b8:	429a      	cmp	r2, r3
   d51ba:	db13      	blt.n	d51e4 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
        if (hour > other.hour) {
   d51bc:	dc10      	bgt.n	d51e0 <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
            if (minute < other.minute) {
   d51be:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d51c2:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d51c6:	429a      	cmp	r2, r3
   d51c8:	db0c      	blt.n	d51e4 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
            if (minute > other.minute) {
   d51ca:	dc09      	bgt.n	d51e0 <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
                if (second < other.second) {
   d51cc:	f990 2006 	ldrsb.w	r2, [r0, #6]
   d51d0:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d51d4:	429a      	cmp	r2, r3
   d51d6:	db05      	blt.n	d51e4 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
                if (second > other.second) {
   d51d8:	bfcc      	ite	gt
   d51da:	2001      	movgt	r0, #1
   d51dc:	2000      	movle	r0, #0
   d51de:	4770      	bx	lr
            return +1;
   d51e0:	2001      	movs	r0, #1
   d51e2:	4770      	bx	lr
            return -1;
   d51e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
   d51e8:	4770      	bx	lr
	...

000d51ec <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   d51ec:	4a02      	ldr	r2, [pc, #8]	; (d51f8 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   d51ee:	6002      	str	r2, [r0, #0]
   d51f0:	684a      	ldr	r2, [r1, #4]
   d51f2:	6042      	str	r2, [r0, #4]
   d51f4:	4770      	bx	lr
   d51f6:	bf00      	nop
   d51f8:	000dcdf8 	.word	0x000dcdf8

000d51fc <_ZN12LocalTimeHMSaSERKS_>:
   d51fc:	f991 2004 	ldrsb.w	r2, [r1, #4]
   d5200:	7102      	strb	r2, [r0, #4]
   d5202:	f991 2005 	ldrsb.w	r2, [r1, #5]
   d5206:	7142      	strb	r2, [r0, #5]
   d5208:	f991 2006 	ldrsb.w	r2, [r1, #6]
   d520c:	7182      	strb	r2, [r0, #6]
   d520e:	f991 2007 	ldrsb.w	r2, [r1, #7]
   d5212:	71c2      	strb	r2, [r0, #7]
   d5214:	4770      	bx	lr

000d5216 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>:
    int compareTo(LocalTimeHMS hms) const {
   d5216:	b538      	push	{r3, r4, r5, lr}
   d5218:	460c      	mov	r4, r1
   d521a:	4605      	mov	r5, r0
        return compareTo(other) < 0;
   d521c:	f100 011c 	add.w	r1, r0, #28
   d5220:	4620      	mov	r0, r4
   d5222:	f7ff ffc5 	bl	d51b0 <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms < hmsStart) {
   d5226:	2800      	cmp	r0, #0
   d5228:	db09      	blt.n	d523e <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x28>
        return compareTo(other) > 0;
   d522a:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d522e:	4620      	mov	r0, r4
   d5230:	f7ff ffbe 	bl	d51b0 <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms > hmsEnd) {
   d5234:	2800      	cmp	r0, #0
   d5236:	bfd4      	ite	le
   d5238:	2000      	movle	r0, #0
   d523a:	2001      	movgt	r0, #1
    }
   d523c:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   d523e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5242:	e7fb      	b.n	d523c <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x26>

000d5244 <_ZN22LocalTimePosixTimezoneaSERKS_>:
class LocalTimePosixTimezone {
   d5244:	b538      	push	{r3, r4, r5, lr}
   d5246:	4604      	mov	r4, r0
   d5248:	460d      	mov	r5, r1
   d524a:	3004      	adds	r0, #4
   d524c:	3104      	adds	r1, #4
   d524e:	f006 f95a 	bl	db506 <_ZN6StringaSERKS_>
   d5252:	f105 0114 	add.w	r1, r5, #20
   d5256:	f104 0014 	add.w	r0, r4, #20
   d525a:	f7ff ffcf 	bl	d51fc <_ZN12LocalTimeHMSaSERKS_>
   d525e:	f105 011c 	add.w	r1, r5, #28
   d5262:	f104 001c 	add.w	r0, r4, #28
   d5266:	f006 f94e 	bl	db506 <_ZN6StringaSERKS_>
   d526a:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d526e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5272:	f7ff ffc3 	bl	d51fc <_ZN12LocalTimeHMSaSERKS_>
class LocalTimeChange {
   d5276:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   d527a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   d527e:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   d5282:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   d5286:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   d528a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   d528e:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   d5292:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   d5296:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d529a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d529e:	f7ff ffad 	bl	d51fc <_ZN12LocalTimeHMSaSERKS_>
   d52a2:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   d52a6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   d52aa:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   d52ae:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   d52b2:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   d52b6:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   d52ba:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   d52be:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   d52c2:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d52c6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d52ca:	f7ff ff97 	bl	d51fc <_ZN12LocalTimeHMSaSERKS_>
class LocalTimePosixTimezone {
   d52ce:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d52d2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d52d6:	4620      	mov	r0, r4
   d52d8:	bd38      	pop	{r3, r4, r5, pc}

000d52da <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   d52da:	694a      	ldr	r2, [r1, #20]
   d52dc:	6803      	ldr	r3, [r0, #0]
   d52de:	f362 0316 	bfi	r3, r2, #0, #23
   d52e2:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   d52e4:	690b      	ldr	r3, [r1, #16]
   d52e6:	1c5a      	adds	r2, r3, #1
   d52e8:	8843      	ldrh	r3, [r0, #2]
   d52ea:	f362 13ca 	bfi	r3, r2, #7, #4
   d52ee:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   d52f0:	68ca      	ldr	r2, [r1, #12]
   d52f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d52f6:	f362 03c7 	bfi	r3, r2, #3, #5
   d52fa:	70c3      	strb	r3, [r0, #3]
}
   d52fc:	4770      	bx	lr

000d52fe <_ZNK12LocalTimeYMD12getDayOfWeekEv>:
int LocalTimeYMD::getDayOfWeek() const {
   d52fe:	b510      	push	{r4, lr}
   d5300:	4604      	mov	r4, r0
   d5302:	b08c      	sub	sp, #48	; 0x30
    struct tm timeInfo = {0};
   d5304:	2224      	movs	r2, #36	; 0x24
   d5306:	2100      	movs	r1, #0
   d5308:	a803      	add	r0, sp, #12
   d530a:	f007 f8f1 	bl	dc4f0 <memset>
    timeInfo.tm_year = ymd.year;
   d530e:	6823      	ldr	r3, [r4, #0]
   d5310:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d5314:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d5316:	8863      	ldrh	r3, [r4, #2]
   d5318:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d531c:	3b01      	subs	r3, #1
   d531e:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday = ymd.day;
   d5320:	78e3      	ldrb	r3, [r4, #3]
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   d5322:	a803      	add	r0, sp, #12
    timeInfo.tm_mday = ymd.day;
   d5324:	08db      	lsrs	r3, r3, #3
   d5326:	9306      	str	r3, [sp, #24]
    return mktime(pTimeInfo);
   d5328:	f004 f87e 	bl	d9428 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d532c:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d5330:	a903      	add	r1, sp, #12
   d5332:	4668      	mov	r0, sp
   d5334:	f004 f870 	bl	d9418 <localtime_r>
}
   d5338:	9809      	ldr	r0, [sp, #36]	; 0x24
   d533a:	b00c      	add	sp, #48	; 0x30
   d533c:	bd10      	pop	{r4, pc}

000d533e <_ZN12LocalTimeYMD6addDayEi>:
void LocalTimeYMD::addDay(int numberOfDays) {
   d533e:	b530      	push	{r4, r5, lr}
   d5340:	4604      	mov	r4, r0
   d5342:	b08d      	sub	sp, #52	; 0x34
    struct tm timeInfo = {0};
   d5344:	2224      	movs	r2, #36	; 0x24
void LocalTimeYMD::addDay(int numberOfDays) {
   d5346:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d5348:	a803      	add	r0, sp, #12
   d534a:	2100      	movs	r1, #0
   d534c:	f007 f8d0 	bl	dc4f0 <memset>
    timeInfo.tm_year = ymd.year;
   d5350:	6823      	ldr	r3, [r4, #0]
    timeInfo.tm_mday = ymd.day;
   d5352:	78e1      	ldrb	r1, [r4, #3]
    timeInfo.tm_year = ymd.year;
   d5354:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d5358:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d535a:	8863      	ldrh	r3, [r4, #2]
   d535c:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d5360:	3b01      	subs	r3, #1
    timeInfo.tm_mday += numberOfDays;
   d5362:	eb05 05d1 	add.w	r5, r5, r1, lsr #3
    return mktime(pTimeInfo);
   d5366:	a803      	add	r0, sp, #12
    timeInfo.tm_mon = ymd.month - 1;
   d5368:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday += numberOfDays;
   d536a:	9506      	str	r5, [sp, #24]
    return mktime(pTimeInfo);
   d536c:	f004 f85c 	bl	d9428 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d5370:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d5374:	a903      	add	r1, sp, #12
   d5376:	4668      	mov	r0, sp
   d5378:	f004 f84e 	bl	d9418 <localtime_r>
    fromTimeInfo(&timeInfo);
   d537c:	a903      	add	r1, sp, #12
   d537e:	4620      	mov	r0, r4
   d5380:	f7ff ffab 	bl	d52da <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d5384:	b00d      	add	sp, #52	; 0x34
   d5386:	bd30      	pop	{r4, r5, pc}

000d5388 <_ZNK12LocalTimeYMD9compareToES_>:
    if (ymd.year < other.ymd.year) {
   d5388:	6803      	ldr	r3, [r0, #0]
   d538a:	f3c1 0216 	ubfx	r2, r1, #0, #23
   d538e:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d5392:	4293      	cmp	r3, r2
   d5394:	d313      	bcc.n	d53be <_ZNK12LocalTimeYMD9compareToES_+0x36>
    if (ymd.year > other.ymd.year) {
   d5396:	d810      	bhi.n	d53ba <_ZNK12LocalTimeYMD9compareToES_+0x32>
        if (ymd.month < other.ymd.month) {
   d5398:	8842      	ldrh	r2, [r0, #2]
   d539a:	f3c1 53c3 	ubfx	r3, r1, #23, #4
   d539e:	f3c2 12c3 	ubfx	r2, r2, #7, #4
   d53a2:	429a      	cmp	r2, r3
   d53a4:	d30b      	bcc.n	d53be <_ZNK12LocalTimeYMD9compareToES_+0x36>
        if (ymd.month > other.ymd.month) {
   d53a6:	d808      	bhi.n	d53ba <_ZNK12LocalTimeYMD9compareToES_+0x32>
            if (ymd.day < other.ymd.day) {
   d53a8:	78c3      	ldrb	r3, [r0, #3]
   d53aa:	08db      	lsrs	r3, r3, #3
   d53ac:	ebb3 6fd1 	cmp.w	r3, r1, lsr #27
   d53b0:	d305      	bcc.n	d53be <_ZNK12LocalTimeYMD9compareToES_+0x36>
            if (ymd.day > other.ymd.day) {
   d53b2:	bf8c      	ite	hi
   d53b4:	2001      	movhi	r0, #1
   d53b6:	2000      	movls	r0, #0
   d53b8:	4770      	bx	lr
        cmp = +1;
   d53ba:	2001      	movs	r0, #1
   d53bc:	4770      	bx	lr
        cmp = -1;
   d53be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d53c2:	4770      	bx	lr

000d53c4 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   d53c4:	4a02      	ldr	r2, [pc, #8]	; (d53d0 <_ZN12LocalTimeHMSC1Ev+0xc>)
   d53c6:	6002      	str	r2, [r0, #0]
   d53c8:	2200      	movs	r2, #0
   d53ca:	6042      	str	r2, [r0, #4]
}
   d53cc:	4770      	bx	lr
   d53ce:	bf00      	nop
   d53d0:	000dcdf8 	.word	0x000dcdf8

000d53d4 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   d53d4:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   d53d6:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   d53d8:	b087      	sub	sp, #28
    hour = minute = second = 0;
   d53da:	8083      	strh	r3, [r0, #4]
   d53dc:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   d53de:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d53e0:	ab05      	add	r3, sp, #20
   d53e2:	9300      	str	r3, [sp, #0]
   d53e4:	4913      	ldr	r1, [pc, #76]	; (d5434 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   d53e6:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d53e8:	ab04      	add	r3, sp, #16
   d53ea:	aa03      	add	r2, sp, #12
   d53ec:	4628      	mov	r0, r5
   d53ee:	f003 ffd3 	bl	d9398 <sscanf>
   d53f2:	2803      	cmp	r0, #3
   d53f4:	d107      	bne.n	d5406 <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   d53f6:	9b03      	ldr	r3, [sp, #12]
   d53f8:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d53fa:	9b04      	ldr	r3, [sp, #16]
   d53fc:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   d53fe:	9b05      	ldr	r3, [sp, #20]
   d5400:	71a3      	strb	r3, [r4, #6]
}
   d5402:	b007      	add	sp, #28
   d5404:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   d5406:	490c      	ldr	r1, [pc, #48]	; (d5438 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   d5408:	ab04      	add	r3, sp, #16
   d540a:	aa03      	add	r2, sp, #12
   d540c:	4628      	mov	r0, r5
   d540e:	f003 ffc3 	bl	d9398 <sscanf>
   d5412:	2802      	cmp	r0, #2
   d5414:	d104      	bne.n	d5420 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   d5416:	9b03      	ldr	r3, [sp, #12]
   d5418:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d541a:	9b04      	ldr	r3, [sp, #16]
   d541c:	7163      	strb	r3, [r4, #5]
   d541e:	e7f0      	b.n	d5402 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   d5420:	4906      	ldr	r1, [pc, #24]	; (d543c <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   d5422:	aa03      	add	r2, sp, #12
   d5424:	4628      	mov	r0, r5
   d5426:	f003 ffb7 	bl	d9398 <sscanf>
   d542a:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   d542c:	bf04      	itt	eq
   d542e:	9b03      	ldreq	r3, [sp, #12]
   d5430:	7123      	strbeq	r3, [r4, #4]
}
   d5432:	e7e6      	b.n	d5402 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   d5434:	000dcd90 	.word	0x000dcd90
   d5438:	000dcd93 	.word	0x000dcd93
   d543c:	000dcbe0 	.word	0x000dcbe0

000d5440 <_ZN12LocalTimeHMSC1EPKc>:
LocalTimeHMS::LocalTimeHMS(const char *str) {
   d5440:	b510      	push	{r4, lr}
   d5442:	4b04      	ldr	r3, [pc, #16]	; (d5454 <_ZN12LocalTimeHMSC1EPKc+0x14>)
   d5444:	6003      	str	r3, [r0, #0]
   d5446:	2300      	movs	r3, #0
   d5448:	4604      	mov	r4, r0
   d544a:	6043      	str	r3, [r0, #4]
    parse(str);
   d544c:	f7ff ffc2 	bl	d53d4 <_ZN12LocalTimeHMS5parseEPKc>
}
   d5450:	4620      	mov	r0, r4
   d5452:	bd10      	pop	{r4, pc}
   d5454:	000dcdf8 	.word	0x000dcdf8

000d5458 <_ZN21LocalTimeScheduleItemC1Ev>:
    LocalTimeScheduleItem() {
   d5458:	b538      	push	{r3, r4, r5, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   d545a:	2500      	movs	r5, #0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d545c:	237f      	movs	r3, #127	; 0x7f
    LocalTimeScheduleItem() {
   d545e:	4604      	mov	r4, r0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d5460:	7003      	strb	r3, [r0, #0]
   d5462:	e9c0 5501 	strd	r5, r5, [r0, #4]
   d5466:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d546a:	e9c0 5505 	strd	r5, r5, [r0, #20]
    LocalTimeRange() : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(LocalTimeHMS("00:00:00")), hmsEnd(LocalTimeHMS("23:59:59")) {
   d546e:	490a      	ldr	r1, [pc, #40]	; (d5498 <_ZN21LocalTimeScheduleItemC1Ev+0x40>)
   d5470:	301c      	adds	r0, #28
   d5472:	f7ff ffe5 	bl	d5440 <_ZN12LocalTimeHMSC1EPKc>
   d5476:	4909      	ldr	r1, [pc, #36]	; (d549c <_ZN21LocalTimeScheduleItemC1Ev+0x44>)
   d5478:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d547c:	f7ff ffe0 	bl	d5440 <_ZN12LocalTimeHMSC1EPKc>
    LocalTimeScheduleItem() {
   d5480:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
   d5484:	4906      	ldr	r1, [pc, #24]	; (d54a0 <_ZN21LocalTimeScheduleItemC1Ev+0x48>)
   d5486:	6365      	str	r5, [r4, #52]	; 0x34
   d5488:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d548c:	f005 ffff 	bl	db48e <_ZN6StringC1EPKc>
   d5490:	64a5      	str	r5, [r4, #72]	; 0x48
    }
   d5492:	4620      	mov	r0, r4
   d5494:	bd38      	pop	{r3, r4, r5, pc}
   d5496:	bf00      	nop
   d5498:	000dcd99 	.word	0x000dcd99
   d549c:	000dcda2 	.word	0x000dcda2
   d54a0:	000dd568 	.word	0x000dd568

000d54a4 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   d54a4:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d54a8:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d54ac:	f990 1006 	ldrsb.w	r1, [r0, #6]
   d54b0:	2b00      	cmp	r3, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   d54b2:	bfb8      	it	lt
   d54b4:	4808      	ldrlt	r0, [pc, #32]	; (d54d8 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   d54b6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   d54ba:	ea4f 0282 	mov.w	r2, r2, lsl #2
   d54be:	bfbd      	ittte	lt
   d54c0:	fb00 2003 	mlalt	r0, r0, r3, r2
   d54c4:	1840      	addlt	r0, r0, r1
   d54c6:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   d54c8:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   d54cc:	bfa4      	itt	ge
   d54ce:	fb00 2303 	mlage	r3, r0, r3, r2
   d54d2:	1858      	addge	r0, r3, r1
}
   d54d4:	4770      	bx	lr
   d54d6:	bf00      	nop
   d54d8:	fffff1f0 	.word	0xfffff1f0

000d54dc <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   d54dc:	f990 3007 	ldrsb.w	r3, [r0, #7]
   d54e0:	b943      	cbnz	r3, d54f4 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   d54e2:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d54e6:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   d54e8:	f990 3005 	ldrsb.w	r3, [r0, #5]
   d54ec:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   d54ee:	f990 3006 	ldrsb.w	r3, [r0, #6]
   d54f2:	600b      	str	r3, [r1, #0]
}
   d54f4:	4770      	bx	lr

000d54f6 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   d54f6:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   d54fa:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   d54fc:	b9b3      	cbnz	r3, d552c <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   d54fe:	f990 5004 	ldrsb.w	r5, [r0, #4]
   d5502:	688c      	ldr	r4, [r1, #8]
   d5504:	442c      	add	r4, r5
   d5506:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   d550a:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   d550c:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   d5510:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   d5512:	bfb5      	itete	lt
   d5514:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   d5516:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   d5518:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   d551a:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   d551c:	bfb5      	itete	lt
   d551e:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   d5522:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   d5526:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   d5528:	189b      	addge	r3, r3, r2
   d552a:	600b      	str	r3, [r1, #0]
}
   d552c:	bd30      	pop	{r4, r5, pc}

000d552e <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inOnlyOnDates(LocalTimeYMD ymd) const {
   d552e:	b538      	push	{r3, r4, r5, lr}
   d5530:	6844      	ldr	r4, [r0, #4]
   d5532:	4605      	mov	r5, r0
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d5534:	68ab      	ldr	r3, [r5, #8]
   d5536:	42a3      	cmp	r3, r4
   d5538:	d007      	beq.n	d554a <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1c>
        return compareTo(other) == 0; 
   d553a:	4620      	mov	r0, r4
   d553c:	f7ff ff24 	bl	d5388 <_ZNK12LocalTimeYMD9compareToES_>
   d5540:	3404      	adds	r4, #4
        if (*it == ymd) {
   d5542:	2800      	cmp	r0, #0
   d5544:	d1f6      	bne.n	d5534 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x6>
            return true;
   d5546:	2001      	movs	r0, #1
}
   d5548:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d554a:	2000      	movs	r0, #0
   d554c:	e7fc      	b.n	d5548 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1a>

000d554e <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inExceptDates(LocalTimeYMD ymd) const {
   d554e:	b538      	push	{r3, r4, r5, lr}
   d5550:	6904      	ldr	r4, [r0, #16]
   d5552:	4605      	mov	r5, r0
    for(auto it = exceptDates.begin(); it != exceptDates.end(); ++it) {
   d5554:	696b      	ldr	r3, [r5, #20]
   d5556:	42a3      	cmp	r3, r4
   d5558:	d007      	beq.n	d556a <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1c>
   d555a:	4620      	mov	r0, r4
   d555c:	f7ff ff14 	bl	d5388 <_ZNK12LocalTimeYMD9compareToES_>
   d5560:	3404      	adds	r4, #4
        if (*it == ymd) {
   d5562:	2800      	cmp	r0, #0
   d5564:	d1f6      	bne.n	d5554 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x6>
            return true;
   d5566:	2001      	movs	r0, #1
}
   d5568:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d556a:	2000      	movs	r0, #0
   d556c:	e7fc      	b.n	d5568 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1a>

000d556e <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::isValid(LocalTimeYMD ymd) const {
   d556e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5570:	4605      	mov	r5, r0
   d5572:	460e      	mov	r6, r1
    if (inExceptDates(ymd)) {
   d5574:	f7ff ffeb 	bl	d554e <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>
   d5578:	b990      	cbnz	r0, d55a0 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x32>
        int dayOfWeek = ymd.getDayOfWeek();
   d557a:	a801      	add	r0, sp, #4
   d557c:	9101      	str	r1, [sp, #4]
   d557e:	f7ff febe 	bl	d52fe <_ZNK12LocalTimeYMD12getDayOfWeekEv>
        return (dayOfWeekMask & (1 << dayOfWeek)) != 0;
   d5582:	782b      	ldrb	r3, [r5, #0]
        bool isValidDates = inOnlyOnDates(ymd);
   d5584:	4631      	mov	r1, r6
   d5586:	fa43 f400 	asr.w	r4, r3, r0
   d558a:	4628      	mov	r0, r5
   d558c:	f7ff ffcf 	bl	d552e <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>
   d5590:	f004 0401 	and.w	r4, r4, #1
        result = isValidDays || isValidDates;
   d5594:	2c00      	cmp	r4, #0
   d5596:	bf08      	it	eq
   d5598:	4604      	moveq	r4, r0
}
   d559a:	4620      	mov	r0, r4
   d559c:	b002      	add	sp, #8
   d559e:	bd70      	pop	{r4, r5, r6, pc}
        result = false;
   d55a0:	2400      	movs	r4, #0
   d55a2:	e7fa      	b.n	d559a <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x2c>

000d55a4 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>:
LocalTimeYMD LocalTimeRestrictedDate::getExpirationDate() const {
   d55a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d55a8:	2400      	movs	r4, #0
   d55aa:	6845      	ldr	r5, [r0, #4]
   d55ac:	4680      	mov	r8, r0
   d55ae:	4626      	mov	r6, r4
   d55b0:	4627      	mov	r7, r4
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d55b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d55b6:	429d      	cmp	r5, r3
   d55b8:	d01e      	beq.n	d55f8 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x54>
        return ymd.year == 0 && ymd.month == 0 && ymd.day == 0;
   d55ba:	f367 0916 	bfi	r9, r7, #0, #23
   d55be:	f366 59da 	bfi	r9, r6, #23, #4
   d55c2:	f364 69df 	bfi	r9, r4, #27, #5
        if (result.isEmpty() || *it > result) {
   d55c6:	f1b9 0f00 	cmp.w	r9, #0
   d55ca:	d109      	bne.n	d55e0 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x3c>
            result = *it;
   d55cc:	682f      	ldr	r7, [r5, #0]
   d55ce:	886e      	ldrh	r6, [r5, #2]
   d55d0:	78ec      	ldrb	r4, [r5, #3]
   d55d2:	f3c7 0716 	ubfx	r7, r7, #0, #23
   d55d6:	f3c6 16c3 	ubfx	r6, r6, #7, #4
   d55da:	08e4      	lsrs	r4, r4, #3
      pointer
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   d55dc:	3504      	adds	r5, #4
      {
	++_M_current;
	return *this;
   d55de:	e7e8      	b.n	d55b2 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0xe>
   d55e0:	f367 0116 	bfi	r1, r7, #0, #23
   d55e4:	f366 51da 	bfi	r1, r6, #23, #4
   d55e8:	f364 61df 	bfi	r1, r4, #27, #5
        return compareTo(other) > 0; 
   d55ec:	4628      	mov	r0, r5
   d55ee:	f7ff fecb 	bl	d5388 <_ZNK12LocalTimeYMD9compareToES_>
        if (result.isEmpty() || *it > result) {
   d55f2:	2800      	cmp	r0, #0
   d55f4:	dcea      	bgt.n	d55cc <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x28>
   d55f6:	e7f1      	b.n	d55dc <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x38>
    return result;
   d55f8:	2000      	movs	r0, #0
   d55fa:	f367 0016 	bfi	r0, r7, #0, #23
   d55fe:	f366 50da 	bfi	r0, r6, #23, #4
   d5602:	f364 60df 	bfi	r0, r4, #27, #5
}
   d5606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d560c <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   d560c:	4a05      	ldr	r2, [pc, #20]	; (d5624 <_ZN15LocalTimeChangeC1Ev+0x18>)
   d560e:	b508      	push	{r3, lr}
   d5610:	6002      	str	r2, [r0, #0]
   d5612:	2200      	movs	r2, #0
   d5614:	4603      	mov	r3, r0
   d5616:	6042      	str	r2, [r0, #4]
   d5618:	3008      	adds	r0, #8
   d561a:	f7ff fed3 	bl	d53c4 <_ZN12LocalTimeHMSC1Ev>
}
   d561e:	4618      	mov	r0, r3
   d5620:	bd08      	pop	{r3, pc}
   d5622:	bf00      	nop
   d5624:	000dce08 	.word	0x000dce08

000d5628 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   d5628:	2300      	movs	r3, #0
   d562a:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   d562c:	8183      	strh	r3, [r0, #12]
   d562e:	7383      	strb	r3, [r0, #14]
}
   d5630:	4770      	bx	lr
	...

000d5634 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   d5634:	b530      	push	{r4, r5, lr}
   d5636:	4604      	mov	r4, r0
   d5638:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   d563a:	460d      	mov	r5, r1
   d563c:	b111      	cbz	r1, d5644 <_ZN15LocalTimeChange5parseEPKc+0x10>
   d563e:	780b      	ldrb	r3, [r1, #0]
   d5640:	2b4d      	cmp	r3, #77	; 0x4d
   d5642:	d003      	beq.n	d564c <_ZN15LocalTimeChange5parseEPKc+0x18>
        clear();
   d5644:	4620      	mov	r0, r4
   d5646:	f7ff ffef 	bl	d5628 <_ZN15LocalTimeChange5clearEv>
   d564a:	e01b      	b.n	d5684 <_ZN15LocalTimeChange5parseEPKc+0x50>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   d564c:	ab05      	add	r3, sp, #20
   d564e:	9300      	str	r3, [sp, #0]
   d5650:	490f      	ldr	r1, [pc, #60]	; (d5690 <_ZN15LocalTimeChange5parseEPKc+0x5c>)
   d5652:	ab04      	add	r3, sp, #16
   d5654:	aa03      	add	r2, sp, #12
   d5656:	4628      	mov	r0, r5
   d5658:	f003 fe9e 	bl	d9398 <sscanf>
   d565c:	2803      	cmp	r0, #3
   d565e:	d1f1      	bne.n	d5644 <_ZN15LocalTimeChange5parseEPKc+0x10>
        month = (int8_t) values[0];
   d5660:	9b03      	ldr	r3, [sp, #12]
   d5662:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   d5664:	9b04      	ldr	r3, [sp, #16]
   d5666:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   d5668:	9b05      	ldr	r3, [sp, #20]
   d566a:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   d566c:	212f      	movs	r1, #47	; 0x2f
   d566e:	4628      	mov	r0, r5
   d5670:	f006 ff9e 	bl	dc5b0 <strchr>
        if (cp) {
   d5674:	b140      	cbz	r0, d5688 <_ZN15LocalTimeChange5parseEPKc+0x54>
            hms.parse(cp);
   d5676:	1c41      	adds	r1, r0, #1
   d5678:	f104 0008 	add.w	r0, r4, #8
   d567c:	f7ff feaa 	bl	d53d4 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   d5680:	2301      	movs	r3, #1
   d5682:	71e3      	strb	r3, [r4, #7]
}
   d5684:	b007      	add	sp, #28
   d5686:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   d5688:	81a0      	strh	r0, [r4, #12]
   d568a:	73a0      	strb	r0, [r4, #14]
}
   d568c:	e7f8      	b.n	d5680 <_ZN15LocalTimeChange5parseEPKc+0x4c>
   d568e:	bf00      	nop
   d5690:	000dcdab 	.word	0x000dcdab

000d5694 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   d5694:	4b10      	ldr	r3, [pc, #64]	; (d56d8 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   d5696:	4911      	ldr	r1, [pc, #68]	; (d56dc <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d5698:	b510      	push	{r4, lr}
   d569a:	4604      	mov	r4, r0
   d569c:	f840 3b04 	str.w	r3, [r0], #4
   d56a0:	f005 fef5 	bl	db48e <_ZN6StringC1EPKc>
   d56a4:	f104 0014 	add.w	r0, r4, #20
   d56a8:	f7ff fe8c 	bl	d53c4 <_ZN12LocalTimeHMSC1Ev>
   d56ac:	490b      	ldr	r1, [pc, #44]	; (d56dc <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d56ae:	f104 001c 	add.w	r0, r4, #28
   d56b2:	f005 feec 	bl	db48e <_ZN6StringC1EPKc>
   d56b6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d56ba:	f7ff fe83 	bl	d53c4 <_ZN12LocalTimeHMSC1Ev>
   d56be:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d56c2:	f7ff ffa3 	bl	d560c <_ZN15LocalTimeChangeC1Ev>
   d56c6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d56ca:	f7ff ff9f 	bl	d560c <_ZN15LocalTimeChangeC1Ev>
   d56ce:	2300      	movs	r3, #0
   d56d0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   d56d4:	4620      	mov	r0, r4
   d56d6:	bd10      	pop	{r4, pc}
   d56d8:	000dce18 	.word	0x000dce18
   d56dc:	000dd568 	.word	0x000dd568

000d56e0 <_ZN22LocalTimePosixTimezone5parseEPKc>:
bool LocalTimePosixTimezone::parse(const char *str) {
   d56e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d56e4:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   d56e6:	4608      	mov	r0, r1
   d56e8:	f006 ff8c 	bl	dc604 <strdup>
    size_t ii = 0;
   d56ec:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   d56ee:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   d56f0:	9001      	str	r0, [sp, #4]
                dstStart.parse(token);
   d56f2:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   d56f6:	493f      	ldr	r1, [pc, #252]	; (d57f4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   d56f8:	9801      	ldr	r0, [sp, #4]
   d56fa:	aa01      	add	r2, sp, #4
   d56fc:	f007 f808 	bl	dc710 <strtok_r>
   d5700:	4601      	mov	r1, r0
   d5702:	2800      	cmp	r0, #0
   d5704:	d062      	beq.n	d57cc <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   d5706:	2d01      	cmp	r5, #1
   d5708:	f105 0301 	add.w	r3, r5, #1
   d570c:	d053      	beq.n	d57b6 <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   d570e:	2d02      	cmp	r5, #2
   d5710:	d056      	beq.n	d57c0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   d5712:	2d00      	cmp	r5, #0
   d5714:	d146      	bne.n	d57a4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   d5716:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   d5718:	f892 9000 	ldrb.w	r9, [r2]
   d571c:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   d5720:	4615      	mov	r5, r2
   d5722:	4617      	mov	r7, r2
   d5724:	f102 0201 	add.w	r2, r2, #1
   d5728:	d8f6      	bhi.n	d5718 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   d572a:	2200      	movs	r2, #0
   d572c:	702a      	strb	r2, [r5, #0]
                standardName = start;
   d572e:	f104 001c 	add.w	r0, r4, #28
   d5732:	f005 ff0a 	bl	db54a <_ZN6StringaSEPKc>
                valid = true;
   d5736:	2201      	movs	r2, #1
                *cp = save2;
   d5738:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   d573c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   d5740:	782a      	ldrb	r2, [r5, #0]
   d5742:	b36a      	cbz	r2, d57a0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   d5744:	f897 a000 	ldrb.w	sl, [r7]
   d5748:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   d574c:	2a3f      	cmp	r2, #63	; 0x3f
   d574e:	46b9      	mov	r9, r7
   d5750:	46bb      	mov	fp, r7
   d5752:	f107 0701 	add.w	r7, r7, #1
   d5756:	d9f5      	bls.n	d5744 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   d5758:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   d575a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   d575e:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   d5762:	4629      	mov	r1, r5
   d5764:	4638      	mov	r0, r7
   d5766:	f7ff fe35 	bl	d53d4 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   d576a:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   d576e:	f1ba 0f00 	cmp.w	sl, #0
   d5772:	d015      	beq.n	d57a0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   d5774:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   d5776:	f81b ab01 	ldrb.w	sl, [fp], #1
   d577a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   d577e:	d8f9      	bhi.n	d5774 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   d5780:	2200      	movs	r2, #0
   d5782:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   d5784:	4649      	mov	r1, r9
   d5786:	1d20      	adds	r0, r4, #4
   d5788:	f005 fedf 	bl	db54a <_ZN6StringaSEPKc>
                        *cp = save2;
   d578c:	f885 a000 	strb.w	sl, [r5]
                        if (*cp) {
   d5790:	f104 0014 	add.w	r0, r4, #20
   d5794:	f1ba 0f00 	cmp.w	sl, #0
   d5798:	d006      	beq.n	d57a8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   d579a:	4629      	mov	r1, r5
   d579c:	f7ff fe1a 	bl	d53d4 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   d57a0:	2501      	movs	r5, #1
   d57a2:	e7a8      	b.n	d56f6 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   d57a4:	461d      	mov	r5, r3
   d57a6:	e7a6      	b.n	d56f6 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   d57a8:	4639      	mov	r1, r7
   d57aa:	f7ff fd27 	bl	d51fc <_ZN12LocalTimeHMSaSERKS_>
                            dstHMS.hour--;
   d57ae:	7e23      	ldrb	r3, [r4, #24]
   d57b0:	3b01      	subs	r3, #1
   d57b2:	7623      	strb	r3, [r4, #24]
   d57b4:	e7f4      	b.n	d57a0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   d57b6:	4640      	mov	r0, r8
   d57b8:	f7ff ff3c 	bl	d5634 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d57bc:	2502      	movs	r5, #2
   d57be:	e79a      	b.n	d56f6 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                standardStart.parse(token);
   d57c0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d57c4:	f7ff ff36 	bl	d5634 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d57c8:	2503      	movs	r5, #3
   d57ca:	e794      	b.n	d56f6 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
    if (dstStart.valid && !standardStart.valid) {
   d57cc:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   d57d0:	b143      	cbz	r3, d57e4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   d57d2:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   d57d6:	b92a      	cbnz	r2, d57e4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        dstStart.clear();
   d57d8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d57dc:	f7ff ff24 	bl	d5628 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   d57e0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    free(mutableCopy);
   d57e4:	4630      	mov	r0, r6
   d57e6:	f003 fdbf 	bl	d9368 <free>
}
   d57ea:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   d57ee:	b003      	add	sp, #12
   d57f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d57f4:	000dcdb5 	.word	0x000dcdb5

000d57f8 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   d57f8:	b538      	push	{r3, r4, r5, lr}
   d57fa:	4b13      	ldr	r3, [pc, #76]	; (d5848 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   d57fc:	4604      	mov	r4, r0
   d57fe:	460d      	mov	r5, r1
   d5800:	f840 3b04 	str.w	r3, [r0], #4
   d5804:	4911      	ldr	r1, [pc, #68]	; (d584c <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d5806:	f005 fe42 	bl	db48e <_ZN6StringC1EPKc>
   d580a:	f104 0014 	add.w	r0, r4, #20
   d580e:	f7ff fdd9 	bl	d53c4 <_ZN12LocalTimeHMSC1Ev>
   d5812:	490e      	ldr	r1, [pc, #56]	; (d584c <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d5814:	f104 001c 	add.w	r0, r4, #28
   d5818:	f005 fe39 	bl	db48e <_ZN6StringC1EPKc>
   d581c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5820:	f7ff fdd0 	bl	d53c4 <_ZN12LocalTimeHMSC1Ev>
   d5824:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5828:	f7ff fef0 	bl	d560c <_ZN15LocalTimeChangeC1Ev>
   d582c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d5830:	f7ff feec 	bl	d560c <_ZN15LocalTimeChangeC1Ev>
   d5834:	2300      	movs	r3, #0
   d5836:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   d583a:	4629      	mov	r1, r5
   d583c:	4620      	mov	r0, r4
   d583e:	f7ff ff4f 	bl	d56e0 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   d5842:	4620      	mov	r0, r4
   d5844:	bd38      	pop	{r3, r4, r5, pc}
   d5846:	bf00      	nop
   d5848:	000dce18 	.word	0x000dce18
   d584c:	000dd568 	.word	0x000dd568

000d5850 <_ZNK14LocalTimeValue3hmsEv>:
LocalTimeHMS LocalTimeValue::hms() const {
   d5850:	b508      	push	{r3, lr}
   d5852:	4603      	mov	r3, r0
    LocalTimeHMS result;
   d5854:	f7ff fdb6 	bl	d53c4 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   d5858:	688a      	ldr	r2, [r1, #8]
   d585a:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   d585c:	684a      	ldr	r2, [r1, #4]
   d585e:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   d5860:	680a      	ldr	r2, [r1, #0]
   d5862:	719a      	strb	r2, [r3, #6]
}
   d5864:	4618      	mov	r0, r3
   d5866:	bd08      	pop	{r3, pc}

000d5868 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   d5868:	b513      	push	{r0, r1, r4, lr}
   d586a:	4b07      	ldr	r3, [pc, #28]	; (d5888 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   d586c:	6003      	str	r3, [r0, #0]
   d586e:	2300      	movs	r3, #0
   d5870:	4604      	mov	r4, r0
   d5872:	6043      	str	r3, [r0, #4]
    *this = value.hms();
   d5874:	4668      	mov	r0, sp
   d5876:	f7ff ffeb 	bl	d5850 <_ZNK14LocalTimeValue3hmsEv>
   d587a:	4669      	mov	r1, sp
   d587c:	4620      	mov	r0, r4
   d587e:	f7ff fcbd 	bl	d51fc <_ZN12LocalTimeHMSaSERKS_>
}
   d5882:	4620      	mov	r0, r4
   d5884:	b002      	add	sp, #8
   d5886:	bd10      	pop	{r4, pc}
   d5888:	000dcdf8 	.word	0x000dcdf8

000d588c <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>:
    if (!hms.ignore) {
   d588c:	f991 3007 	ldrsb.w	r3, [r1, #7]
   d5890:	b943      	cbnz	r3, d58a4 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS+0x18>
        tm_hour = hms.hour;
   d5892:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d5896:	6083      	str	r3, [r0, #8]
        tm_min = hms.minute;
   d5898:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d589c:	6043      	str	r3, [r0, #4]
        tm_sec = hms.second;
   d589e:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d58a2:	6003      	str	r3, [r0, #0]
}
   d58a4:	4770      	bx	lr

000d58a6 <_ZNK14LocalTimeValue3ymdEv>:
LocalTimeYMD LocalTimeValue::ymd() const {
   d58a6:	b507      	push	{r0, r1, r2, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d58a8:	2300      	movs	r3, #0
   d58aa:	4601      	mov	r1, r0
    result.fromTimeInfo(this);
   d58ac:	a801      	add	r0, sp, #4
   d58ae:	9301      	str	r3, [sp, #4]
   d58b0:	f7ff fd13 	bl	d52da <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d58b4:	9801      	ldr	r0, [sp, #4]
   d58b6:	b003      	add	sp, #12
   d58b8:	f85d fb04 	ldr.w	pc, [sp], #4

000d58bc <_ZN22LocalTimePosixTimezoneC1ERKS_>:
class LocalTimePosixTimezone {
   d58bc:	4b19      	ldr	r3, [pc, #100]	; (d5924 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x68>)
   d58be:	b570      	push	{r4, r5, r6, lr}
   d58c0:	4604      	mov	r4, r0
   d58c2:	460d      	mov	r5, r1
   d58c4:	f840 3b04 	str.w	r3, [r0], #4
   d58c8:	3104      	adds	r1, #4
   d58ca:	f005 fe2b 	bl	db524 <_ZN6StringC1ERKS_>
   d58ce:	f105 0114 	add.w	r1, r5, #20
   d58d2:	f104 0014 	add.w	r0, r4, #20
   d58d6:	f7ff fc89 	bl	d51ec <_ZN12LocalTimeHMSC1ERKS_>
   d58da:	f105 011c 	add.w	r1, r5, #28
   d58de:	f104 001c 	add.w	r0, r4, #28
   d58e2:	f005 fe1f 	bl	db524 <_ZN6StringC1ERKS_>
   d58e6:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d58ea:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d58ee:	f7ff fc7d 	bl	d51ec <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeChange {
   d58f2:	4e0d      	ldr	r6, [pc, #52]	; (d5928 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x6c>)
   d58f4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d58f6:	63a3      	str	r3, [r4, #56]	; 0x38
   d58f8:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d58fc:	6366      	str	r6, [r4, #52]	; 0x34
   d58fe:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5902:	f7ff fc73 	bl	d51ec <_ZN12LocalTimeHMSC1ERKS_>
   d5906:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d5908:	64a3      	str	r3, [r4, #72]	; 0x48
   d590a:	6466      	str	r6, [r4, #68]	; 0x44
   d590c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d5910:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d5914:	f7ff fc6a 	bl	d51ec <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimePosixTimezone {
   d5918:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d591c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d5920:	4620      	mov	r0, r4
   d5922:	bd70      	pop	{r4, r5, r6, pc}
   d5924:	000dce18 	.word	0x000dce18
   d5928:	000dce08 	.word	0x000dce08

000d592c <_ZN16LocalTimeConvertC1ERKS_>:
class LocalTimeConvert {
   d592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d592e:	460c      	mov	r4, r1
   d5930:	f851 3b04 	ldr.w	r3, [r1], #4
   d5934:	4607      	mov	r7, r0
   d5936:	f840 3b04 	str.w	r3, [r0], #4
   d593a:	f7ff ffbf 	bl	d58bc <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d593e:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d5942:	f104 0668 	add.w	r6, r4, #104	; 0x68
   d5946:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   d594a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d594c:	f107 0568 	add.w	r5, r7, #104	; 0x68
   d5950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5952:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5956:	6833      	ldr	r3, [r6, #0]
   d5958:	602b      	str	r3, [r5, #0]
   d595a:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
   d595e:	f104 0698 	add.w	r6, r4, #152	; 0x98
   d5962:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
   d5966:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5968:	f107 0598 	add.w	r5, r7, #152	; 0x98
   d596c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d596e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5972:	6833      	ldr	r3, [r6, #0]
   d5974:	602b      	str	r3, [r5, #0]
   d5976:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	; 0xc0
   d597a:	34c8      	adds	r4, #200	; 0xc8
   d597c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
   d5980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5982:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
   d5986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d598a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d598c:	6823      	ldr	r3, [r4, #0]
   d598e:	602b      	str	r3, [r5, #0]
   d5990:	4638      	mov	r0, r7
   d5992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5994 <_ZN21LocalTimeScheduleItemD1Ev>:
class LocalTimeScheduleItem {
   d5994:	b510      	push	{r4, lr}
   d5996:	4604      	mov	r4, r0
   d5998:	3038      	adds	r0, #56	; 0x38
   d599a:	f005 fd2d 	bl	db3f8 <_ZN6StringD1Ev>
	_M_deallocate(_M_impl._M_start,
   d599e:	6920      	ldr	r0, [r4, #16]
   d59a0:	f7ff fbec 	bl	d517c <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d59a4:	6860      	ldr	r0, [r4, #4]
   d59a6:	f7ff fbe9 	bl	d517c <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d59aa:	4620      	mov	r0, r4
   d59ac:	bd10      	pop	{r4, pc}

000d59ae <_ZN16LocalTimeConvert7timeStrEv>:
String LocalTimeConvert::timeStr() {
   d59ae:	b510      	push	{r4, lr}
   d59b0:	4604      	mov	r4, r0
   d59b2:	b088      	sub	sp, #32
   d59b4:	4608      	mov	r0, r1
    asctime_r(&localTimeValue, ascstr);
   d59b6:	3068      	adds	r0, #104	; 0x68
   d59b8:	a901      	add	r1, sp, #4
   d59ba:	f006 fd45 	bl	dc448 <asctime_r>
    int len = strlen(ascstr);
   d59be:	a801      	add	r0, sp, #4
   d59c0:	f006 fe3d 	bl	dc63e <strlen>
    ascstr[len-1] = 0; // remove final newline
   d59c4:	ab08      	add	r3, sp, #32
   d59c6:	4418      	add	r0, r3
   d59c8:	2300      	movs	r3, #0
   d59ca:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   d59ce:	a901      	add	r1, sp, #4
   d59d0:	4620      	mov	r0, r4
   d59d2:	f005 fd5c 	bl	db48e <_ZN6StringC1EPKc>
}
   d59d6:	4620      	mov	r0, r4
   d59d8:	b008      	add	sp, #32
   d59da:	bd10      	pop	{r4, pc}

000d59dc <_ZNK16LocalTimeConvert8zoneNameEv>:
String LocalTimeConvert::zoneName() const { 
   d59dc:	b538      	push	{r3, r4, r5, lr}
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   d59de:	f891 3058 	ldrb.w	r3, [r1, #88]	; 0x58
   d59e2:	4605      	mov	r5, r0
   d59e4:	460c      	mov	r4, r1
   d59e6:	b13b      	cbz	r3, d59f8 <_ZNK16LocalTimeConvert8zoneNameEv+0x1c>
   d59e8:	f991 303f 	ldrsb.w	r3, [r1, #63]	; 0x3f
   d59ec:	b953      	cbnz	r3, d5a04 <_ZNK16LocalTimeConvert8zoneNameEv+0x28>
   d59ee:	f101 0030 	add.w	r0, r1, #48	; 0x30
   d59f2:	f7ff fd57 	bl	d54a4 <_ZNK12LocalTimeHMS9toSecondsEv>
   d59f6:	b928      	cbnz	r0, d5a04 <_ZNK16LocalTimeConvert8zoneNameEv+0x28>
        return "Z";
   d59f8:	4909      	ldr	r1, [pc, #36]	; (d5a20 <_ZNK16LocalTimeConvert8zoneNameEv+0x44>)
   d59fa:	4628      	mov	r0, r5
   d59fc:	f005 fd47 	bl	db48e <_ZN6StringC1EPKc>
};
   d5a00:	4628      	mov	r0, r5
   d5a02:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   d5a04:	6820      	ldr	r0, [r4, #0]
   d5a06:	f7ff fbaf 	bl	d5168 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d5a0a:	b128      	cbz	r0, d5a18 <_ZNK16LocalTimeConvert8zoneNameEv+0x3c>
        return config.dstName;
   d5a0c:	f104 0108 	add.w	r1, r4, #8
        return config.standardName;
   d5a10:	4628      	mov	r0, r5
   d5a12:	f005 fd87 	bl	db524 <_ZN6StringC1ERKS_>
   d5a16:	e7f3      	b.n	d5a00 <_ZNK16LocalTimeConvert8zoneNameEv+0x24>
   d5a18:	f104 0120 	add.w	r1, r4, #32
   d5a1c:	e7f8      	b.n	d5a10 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>
   d5a1e:	bf00      	nop
   d5a20:	000dcdb7 	.word	0x000dcdb7

000d5a24 <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   d5a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a28:	4680      	mov	r8, r0
   d5a2a:	b0a9      	sub	sp, #164	; 0xa4
   d5a2c:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d5a2e:	4615      	mov	r5, r2
   d5a30:	b12a      	cbz	r2, d5a3e <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   d5a32:	4b4b      	ldr	r3, [pc, #300]	; (d5b60 <_ZN16LocalTimeConvert6formatEPKc+0x13c>)
   d5a34:	4610      	mov	r0, r2
   d5a36:	6819      	ldr	r1, [r3, #0]
   d5a38:	f006 fdd1 	bl	dc5de <strcmp>
   d5a3c:	b938      	cbnz	r0, d5a4e <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   d5a3e:	4621      	mov	r1, r4
   d5a40:	4640      	mov	r0, r8
   d5a42:	f7ff ffb4 	bl	d59ae <_ZN16LocalTimeConvert7timeStrEv>
}
   d5a46:	4640      	mov	r0, r8
   d5a48:	b029      	add	sp, #164	; 0xa4
   d5a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d5a4e:	4629      	mov	r1, r5
   d5a50:	223f      	movs	r2, #63	; 0x3f
   d5a52:	a818      	add	r0, sp, #96	; 0x60
   d5a54:	f006 fe0d 	bl	dc672 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d5a58:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d5a5a:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d5a5c:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d5a60:	f006 fded 	bl	dc63e <strlen>
    String zoneNameStr = zoneName();
   d5a64:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d5a66:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   d5a68:	a803      	add	r0, sp, #12
   d5a6a:	f7ff ffb7 	bl	d59dc <_ZNK16LocalTimeConvert8zoneNameEv>
   d5a6e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   d5a72:	b13b      	cbz	r3, d5a84 <_ZN16LocalTimeConvert6formatEPKc+0x60>
   d5a74:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d5a78:	bb83      	cbnz	r3, d5adc <_ZN16LocalTimeConvert6formatEPKc+0xb8>
   d5a7a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d5a7e:	f7ff fd11 	bl	d54a4 <_ZNK12LocalTimeHMS9toSecondsEv>
   d5a82:	bb58      	cbnz	r0, d5adc <_ZN16LocalTimeConvert6formatEPKc+0xb8>
        strcpy(time_zone_str, "Z");
   d5a84:	4937      	ldr	r1, [pc, #220]	; (d5b64 <_ZN16LocalTimeConvert6formatEPKc+0x140>)
   d5a86:	a807      	add	r0, sp, #28
   d5a88:	f006 fdb3 	bl	dc5f2 <strcpy>
   d5a8c:	af18      	add	r7, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   d5a8e:	2600      	movs	r6, #0
    for (size_t i=0; i<len-1; i++)
   d5a90:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   d5a94:	45b3      	cmp	fp, r6
   d5a96:	d94e      	bls.n	d5b36 <_ZN16LocalTimeConvert6formatEPKc+0x112>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d5a98:	46ba      	mov	sl, r7
   d5a9a:	f106 0901 	add.w	r9, r6, #1
   d5a9e:	f81a 3b01 	ldrb.w	r3, [sl], #1
   d5aa2:	2b25      	cmp	r3, #37	; 0x25
   d5aa4:	d117      	bne.n	d5ad6 <_ZN16LocalTimeConvert6formatEPKc+0xb2>
   d5aa6:	787b      	ldrb	r3, [r7, #1]
   d5aa8:	2b7a      	cmp	r3, #122	; 0x7a
   d5aaa:	d136      	bne.n	d5b1a <_ZN16LocalTimeConvert6formatEPKc+0xf6>
            size_t tzlen = strlen(time_zone_str);
   d5aac:	a807      	add	r0, sp, #28
   d5aae:	f006 fdc6 	bl	dc63e <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d5ab2:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   d5ab4:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d5ab6:	1830      	adds	r0, r6, r0
   d5ab8:	ebab 0206 	sub.w	r2, fp, r6
   d5abc:	1cb9      	adds	r1, r7, #2
   d5abe:	4418      	add	r0, r3
   d5ac0:	f006 fcee 	bl	dc4a0 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d5ac4:	462a      	mov	r2, r5
   d5ac6:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   d5ac8:	4638      	mov	r0, r7
   d5aca:	f006 fce9 	bl	dc4a0 <memcpy>
            len = strlen(format_str);
   d5ace:	a818      	add	r0, sp, #96	; 0x60
   d5ad0:	f006 fdb5 	bl	dc63e <strlen>
   d5ad4:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   d5ad6:	4657      	mov	r7, sl
   d5ad8:	464e      	mov	r6, r9
   d5ada:	e7d9      	b.n	d5a90 <_ZN16LocalTimeConvert6formatEPKc+0x6c>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   d5adc:	6820      	ldr	r0, [r4, #0]
   d5ade:	f7ff fb43 	bl	d5168 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d5ae2:	b1b8      	cbz	r0, d5b14 <_ZN16LocalTimeConvert6formatEPKc+0xf0>
   d5ae4:	f104 0018 	add.w	r0, r4, #24
   d5ae8:	f7ff fcdc 	bl	d54a4 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   d5aec:	213c      	movs	r1, #60	; 0x3c
   d5aee:	fb90 f3f1 	sdiv	r3, r0, r1
   d5af2:	2b00      	cmp	r3, #0
   d5af4:	bfb8      	it	lt
   d5af6:	425b      	neglt	r3, r3
   d5af8:	fbb3 f2f1 	udiv	r2, r3, r1
   d5afc:	fb01 3312 	mls	r3, r1, r2, r3
   d5b00:	9300      	str	r3, [sp, #0]
   d5b02:	4a19      	ldr	r2, [pc, #100]	; (d5b68 <_ZN16LocalTimeConvert6formatEPKc+0x144>)
   d5b04:	4b19      	ldr	r3, [pc, #100]	; (d5b6c <_ZN16LocalTimeConvert6formatEPKc+0x148>)
   d5b06:	fb90 f3f3 	sdiv	r3, r0, r3
   d5b0a:	2110      	movs	r1, #16
   d5b0c:	a807      	add	r0, sp, #28
   d5b0e:	f003 fc4b 	bl	d93a8 <snprintf>
   d5b12:	e7bb      	b.n	d5a8c <_ZN16LocalTimeConvert6formatEPKc+0x68>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   d5b14:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d5b18:	e7e6      	b.n	d5ae8 <_ZN16LocalTimeConvert6formatEPKc+0xc4>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   d5b1a:	2b5a      	cmp	r3, #90	; 0x5a
   d5b1c:	d1db      	bne.n	d5ad6 <_ZN16LocalTimeConvert6formatEPKc+0xb2>
            size_t tzlen = zoneNameStr.length();
   d5b1e:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d5b20:	ab18      	add	r3, sp, #96	; 0x60
   d5b22:	1970      	adds	r0, r6, r5
   d5b24:	ebab 0206 	sub.w	r2, fp, r6
   d5b28:	1cb9      	adds	r1, r7, #2
   d5b2a:	4418      	add	r0, r3
   d5b2c:	f006 fcb8 	bl	dc4a0 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   d5b30:	9903      	ldr	r1, [sp, #12]
   d5b32:	462a      	mov	r2, r5
   d5b34:	e7c8      	b.n	d5ac8 <_ZN16LocalTimeConvert6formatEPKc+0xa4>
    char buf[50] = {};
   d5b36:	2100      	movs	r1, #0
   d5b38:	222e      	movs	r2, #46	; 0x2e
   d5b3a:	a80c      	add	r0, sp, #48	; 0x30
   d5b3c:	910b      	str	r1, [sp, #44]	; 0x2c
   d5b3e:	f006 fcd7 	bl	dc4f0 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   d5b42:	f104 0368 	add.w	r3, r4, #104	; 0x68
   d5b46:	aa18      	add	r2, sp, #96	; 0x60
   d5b48:	2132      	movs	r1, #50	; 0x32
   d5b4a:	a80b      	add	r0, sp, #44	; 0x2c
   d5b4c:	f003 fc5c 	bl	d9408 <strftime>
    return String(buf);    
   d5b50:	a90b      	add	r1, sp, #44	; 0x2c
   d5b52:	4640      	mov	r0, r8
   d5b54:	f005 fc9b 	bl	db48e <_ZN6StringC1EPKc>
    String zoneNameStr = zoneName();
   d5b58:	a803      	add	r0, sp, #12
   d5b5a:	f005 fc4d 	bl	db3f8 <_ZN6StringD1Ev>
   d5b5e:	e772      	b.n	d5a46 <_ZN16LocalTimeConvert6formatEPKc+0x22>
   d5b60:	2003dda8 	.word	0x2003dda8
   d5b64:	000dcdb7 	.word	0x000dcdb7
   d5b68:	000dcdb9 	.word	0x000dcdb9
   d5b6c:	fffff1f0 	.word	0xfffff1f0

000d5b70 <_ZN9LocalTime8instanceEv>:
LocalTime &LocalTime::instance() {
   d5b70:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d5b72:	4d09      	ldr	r5, [pc, #36]	; (d5b98 <_ZN9LocalTime8instanceEv+0x28>)
   d5b74:	682b      	ldr	r3, [r5, #0]
   d5b76:	b963      	cbnz	r3, d5b92 <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   d5b78:	2060      	movs	r0, #96	; 0x60
   d5b7a:	f7fe fa8c 	bl	d4096 <_Znwj>
   d5b7e:	4604      	mov	r4, r0
   d5b80:	b130      	cbz	r0, d5b90 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   d5b82:	4b06      	ldr	r3, [pc, #24]	; (d5b9c <_ZN9LocalTime8instanceEv+0x2c>)
   d5b84:	f840 3b04 	str.w	r3, [r0], #4
   d5b88:	f7ff fd84 	bl	d5694 <_ZN22LocalTimePosixTimezoneC1Ev>
   d5b8c:	2364      	movs	r3, #100	; 0x64
   d5b8e:	65e3      	str	r3, [r4, #92]	; 0x5c
   d5b90:	602c      	str	r4, [r5, #0]
}
   d5b92:	6828      	ldr	r0, [r5, #0]
   d5b94:	bd38      	pop	{r3, r4, r5, pc}
   d5b96:	bf00      	nop
   d5b98:	2003e314 	.word	0x2003e314
   d5b9c:	000dcde8 	.word	0x000dcde8

000d5ba0 <_ZN9LocalTime8tmToTimeEP2tm>:
    return mktime(pTimeInfo);
   d5ba0:	f003 bc42 	b.w	d9428 <mktime>

000d5ba4 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   d5ba4:	3901      	subs	r1, #1
   d5ba6:	290b      	cmp	r1, #11
   d5ba8:	d815      	bhi.n	d5bd6 <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   d5baa:	e8df f001 	tbb	[pc, r1]
   d5bae:	0816      	.short	0x0816
   d5bb0:	06160616 	.word	0x06160616
   d5bb4:	16061616 	.word	0x16061616
   d5bb8:	1606      	.short	0x1606
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   d5bba:	201e      	movs	r0, #30
   d5bbc:	4770      	bx	lr
            if ((year % 4) == 0) {
   d5bbe:	0783      	lsls	r3, r0, #30
   d5bc0:	d10d      	bne.n	d5bde <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   d5bc2:	2264      	movs	r2, #100	; 0x64
   d5bc4:	fb90 f3f2 	sdiv	r3, r0, r2
   d5bc8:	fb02 0013 	mls	r0, r2, r3, r0
   d5bcc:	2800      	cmp	r0, #0
                    return 29;
   d5bce:	bf0c      	ite	eq
   d5bd0:	201c      	moveq	r0, #28
   d5bd2:	201d      	movne	r0, #29
   d5bd4:	4770      	bx	lr
    return 0;
   d5bd6:	2000      	movs	r0, #0
   d5bd8:	4770      	bx	lr
            return 31;
   d5bda:	201f      	movs	r0, #31
   d5bdc:	4770      	bx	lr
                return 28;
   d5bde:	201c      	movs	r0, #28
}
   d5be0:	4770      	bx	lr

000d5be2 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d5be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   d5be4:	2301      	movs	r3, #1
   d5be6:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   d5be8:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d5bec:	3b01      	subs	r3, #1
   d5bee:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d5bf0:	2300      	movs	r3, #0
   d5bf2:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d5bf6:	4606      	mov	r6, r0
   d5bf8:	460c      	mov	r4, r1
   d5bfa:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d5bfc:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   d5bfe:	4620      	mov	r0, r4
   d5c00:	f7ff ffce 	bl	d5ba0 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   d5c04:	f996 3006 	ldrsb.w	r3, [r6, #6]
   d5c08:	69a2      	ldr	r2, [r4, #24]
   d5c0a:	429a      	cmp	r2, r3
   d5c0c:	d003      	beq.n	d5c16 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   d5c0e:	68e3      	ldr	r3, [r4, #12]
   d5c10:	3301      	adds	r3, #1
   d5c12:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   d5c14:	e7f3      	b.n	d5bfe <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   d5c16:	f996 5005 	ldrsb.w	r5, [r6, #5]
   d5c1a:	2d01      	cmp	r5, #1
   d5c1c:	d013      	beq.n	d5c46 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   d5c1e:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d5c20:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   d5c22:	3d01      	subs	r5, #1
   d5c24:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   d5c28:	441d      	add	r5, r3
   d5c2a:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d5c2c:	f996 1004 	ldrsb.w	r1, [r6, #4]
   d5c30:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d5c34:	f7ff ffb6 	bl	d5ba4 <_ZN9LocalTime14lastDayOfMonthEii>
   d5c38:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   d5c3a:	bfc4      	itt	gt
   d5c3c:	3d07      	subgt	r5, #7
   d5c3e:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   d5c40:	4620      	mov	r0, r4
   d5c42:	f7ff ffad 	bl	d5ba0 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   d5c46:	4621      	mov	r1, r4
   d5c48:	f106 0008 	add.w	r0, r6, #8
   d5c4c:	f7ff fc46 	bl	d54dc <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   d5c50:	4638      	mov	r0, r7
   d5c52:	f7ff fc50 	bl	d54f6 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   d5c56:	4620      	mov	r0, r4
}
   d5c58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   d5c5c:	f003 bbe4 	b.w	d9428 <mktime>

000d5c60 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   d5c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   d5c62:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   d5c66:	b085      	sub	sp, #20
   d5c68:	4604      	mov	r4, r0
    if (!config.isValid()) {
   d5c6a:	b92b      	cbnz	r3, d5c78 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   d5c6c:	f7ff ff80 	bl	d5b70 <_ZN9LocalTime8instanceEv>
   d5c70:	1d01      	adds	r1, r0, #4
   d5c72:	1d20      	adds	r0, r4, #4
   d5c74:	f7ff fae6 	bl	d5244 <_ZN22LocalTimePosixTimezoneaSERKS_>
    if (config.hasDST()) {
   d5c78:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d5c7c:	2b00      	cmp	r3, #0
   d5c7e:	d069      	beq.n	d5d54 <_ZN16LocalTimeConvert7convertEv+0xf4>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   d5c80:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d5c84:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   d5c88:	4639      	mov	r1, r7
        standardStartTimeInfo = dstStartTimeInfo;
   d5c8a:	463e      	mov	r6, r7
    localtime_r(&time, pTimeInfo);
   d5c8c:	a802      	add	r0, sp, #8
   d5c8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d5c92:	f003 fbc1 	bl	d9418 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   d5c96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5c98:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   d5c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5c9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5ca2:	6833      	ldr	r3, [r6, #0]
   d5ca4:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   d5ca6:	f104 0130 	add.w	r1, r4, #48	; 0x30
   d5caa:	a802      	add	r0, sp, #8
   d5cac:	f7ff fa9e 	bl	d51ec <_ZN12LocalTimeHMSC1ERKS_>
   d5cb0:	aa02      	add	r2, sp, #8
   d5cb2:	4639      	mov	r1, r7
   d5cb4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5cb8:	f7ff ff93 	bl	d5be2 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   d5cbc:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d5cc0:	f104 0118 	add.w	r1, r4, #24
   d5cc4:	a802      	add	r0, sp, #8
   d5cc6:	f7ff fa91 	bl	d51ec <_ZN12LocalTimeHMSC1ERKS_>
   d5cca:	aa02      	add	r2, sp, #8
   d5ccc:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   d5cd0:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d5cd4:	f7ff ff85 	bl	d5be2 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   d5cd8:	e9d4 6724 	ldrd	r6, r7, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d5cdc:	460b      	mov	r3, r1
        if (dstStart < standardStart) {
   d5cde:	4286      	cmp	r6, r0
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d5ce0:	4602      	mov	r2, r0
        if (dstStart < standardStart) {
   d5ce2:	eb77 0103 	sbcs.w	r1, r7, r3
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d5ce6:	e9c4 2330 	strd	r2, r3, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   d5cea:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
   d5cee:	da24      	bge.n	d5d3a <_ZN16LocalTimeConvert7convertEv+0xda>
            if (time < dstStart) {
   d5cf0:	42b0      	cmp	r0, r6
   d5cf2:	eb71 0507 	sbcs.w	r5, r1, r7
   d5cf6:	da19      	bge.n	d5d2c <_ZN16LocalTimeConvert7convertEv+0xcc>
                position = Position::BEFORE_DST;
   d5cf8:	2300      	movs	r3, #0
        position = Position::NO_DST;
   d5cfa:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   d5cfc:	6820      	ldr	r0, [r4, #0]
   d5cfe:	f7ff fa33 	bl	d5168 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d5d02:	f104 0168 	add.w	r1, r4, #104	; 0x68
   d5d06:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
   d5d0a:	9101      	str	r1, [sp, #4]
   d5d0c:	bb20      	cbnz	r0, d5d58 <_ZN16LocalTimeConvert7convertEv+0xf8>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   d5d0e:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d5d12:	f7ff fbc7 	bl	d54a4 <_ZNK12LocalTimeHMS9toSecondsEv>
   d5d16:	1a36      	subs	r6, r6, r0
   d5d18:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
    localtime_r(&time, pTimeInfo);
   d5d1c:	9901      	ldr	r1, [sp, #4]
   d5d1e:	a802      	add	r0, sp, #8
   d5d20:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d5d24:	f003 fb78 	bl	d9418 <localtime_r>
}
   d5d28:	b005      	add	sp, #20
   d5d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   d5d2c:	4290      	cmp	r0, r2
   d5d2e:	eb71 0303 	sbcs.w	r3, r1, r3
                position = Position::IN_DST;
   d5d32:	bfb4      	ite	lt
   d5d34:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   d5d36:	2302      	movge	r3, #2
   d5d38:	e7df      	b.n	d5cfa <_ZN16LocalTimeConvert7convertEv+0x9a>
            if (time < standardStart) {
   d5d3a:	4290      	cmp	r0, r2
   d5d3c:	eb71 0303 	sbcs.w	r3, r1, r3
   d5d40:	da01      	bge.n	d5d46 <_ZN16LocalTimeConvert7convertEv+0xe6>
                position = Position::BEFORE_STANDARD;
   d5d42:	2303      	movs	r3, #3
   d5d44:	e7d9      	b.n	d5cfa <_ZN16LocalTimeConvert7convertEv+0x9a>
            else if (time < dstStart) {
   d5d46:	42b0      	cmp	r0, r6
   d5d48:	eb71 0307 	sbcs.w	r3, r1, r7
                position = Position::IN_STANDARD;
   d5d4c:	bfb4      	ite	lt
   d5d4e:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   d5d50:	2305      	movge	r3, #5
   d5d52:	e7d2      	b.n	d5cfa <_ZN16LocalTimeConvert7convertEv+0x9a>
        position = Position::NO_DST;
   d5d54:	2306      	movs	r3, #6
   d5d56:	e7d0      	b.n	d5cfa <_ZN16LocalTimeConvert7convertEv+0x9a>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d5d58:	f104 0018 	add.w	r0, r4, #24
   d5d5c:	e7d9      	b.n	d5d12 <_ZN16LocalTimeConvert7convertEv+0xb2>

000d5d5e <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>:
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d5d5e:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    struct tm mutableTimeInfo = *this;
   d5d62:	4604      	mov	r4, r0
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d5d64:	460e      	mov	r6, r1
    struct tm mutableTimeInfo = *this;
   d5d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d5d68:	b0dc      	sub	sp, #368	; 0x170
    struct tm mutableTimeInfo = *this;
   d5d6a:	ad01      	add	r5, sp, #4
   d5d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5d72:	6823      	ldr	r3, [r4, #0]
   d5d74:	602b      	str	r3, [r5, #0]
    return mktime(pTimeInfo);
   d5d76:	a801      	add	r0, sp, #4
   d5d78:	f003 fb56 	bl	d9428 <mktime>
   d5d7c:	4604      	mov	r4, r0
    standardTime += config.standardHMS.toSeconds();
   d5d7e:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    return mktime(pTimeInfo);
   d5d82:	460d      	mov	r5, r1
    standardTime += config.standardHMS.toSeconds();
   d5d84:	f7ff fb8e 	bl	d54a4 <_ZNK12LocalTimeHMS9toSecondsEv>
    if (config.hasDST()) {
   d5d88:	f996 303b 	ldrsb.w	r3, [r6, #59]	; 0x3b
    standardTime += config.standardHMS.toSeconds();
   d5d8c:	eb14 0800 	adds.w	r8, r4, r0
   d5d90:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
    if (config.hasDST()) {
   d5d94:	b31b      	cbz	r3, d5dde <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x80>
class LocalTimeConvert {
   d5d96:	2306      	movs	r3, #6
   d5d98:	a821      	add	r0, sp, #132	; 0x84
   d5d9a:	9320      	str	r3, [sp, #128]	; 0x80
   d5d9c:	f7ff fc7a 	bl	d5694 <_ZN22LocalTimePosixTimezoneC1Ev>
        convert.withConfig(config).withTime(standardTime).convert();
   d5da0:	4631      	mov	r1, r6
   d5da2:	a80a      	add	r0, sp, #40	; 0x28
   d5da4:	f7ff fd8a 	bl	d58bc <_ZN22LocalTimePosixTimezoneC1ERKS_>
    LocalTimeConvert &withConfig(LocalTimePosixTimezone config) { this->config = config; return *this; };
   d5da8:	a90a      	add	r1, sp, #40	; 0x28
   d5daa:	a821      	add	r0, sp, #132	; 0x84
   d5dac:	f7ff fa4a 	bl	d5244 <_ZN22LocalTimePosixTimezoneaSERKS_>
   d5db0:	a820      	add	r0, sp, #128	; 0x80
    LocalTimeConvert &withTime(time_t time) { this->time = time; return *this; };
   d5db2:	e9cd 8938 	strd	r8, r9, [sp, #224]	; 0xe0
   d5db6:	f7ff ff53 	bl	d5c60 <_ZN16LocalTimeConvert7convertEv>
   d5dba:	a80a      	add	r0, sp, #40	; 0x28
   d5dbc:	f7ff f9a6 	bl	d510c <_ZN22LocalTimePosixTimezoneD1Ev>
        if (convert.isDST()) {
   d5dc0:	9820      	ldr	r0, [sp, #128]	; 0x80
   d5dc2:	f7ff f9d1 	bl	d5168 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d5dc6:	b138      	cbz	r0, d5dd8 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x7a>
            dstTime += config.dstHMS.toSeconds();
   d5dc8:	f106 0014 	add.w	r0, r6, #20
   d5dcc:	f7ff fb6a 	bl	d54a4 <_ZNK12LocalTimeHMS9toSecondsEv>
   d5dd0:	eb14 0800 	adds.w	r8, r4, r0
   d5dd4:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
class LocalTimeConvert {
   d5dd8:	a821      	add	r0, sp, #132	; 0x84
   d5dda:	f7ff f997 	bl	d510c <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d5dde:	4640      	mov	r0, r8
   d5de0:	4649      	mov	r1, r9
   d5de2:	b05c      	add	sp, #368	; 0x170
   d5de4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

000d5de8 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>:
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d5de8:	b530      	push	{r4, r5, lr}
    if (!hms.ignore) {
   d5dea:	f991 3007 	ldrsb.w	r3, [r1, #7]
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d5dee:	b097      	sub	sp, #92	; 0x5c
   d5df0:	4604      	mov	r4, r0
    if (!hms.ignore) {
   d5df2:	b9c3      	cbnz	r3, d5e26 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS+0x3e>
        localTimeValue.setHMS(hms);
   d5df4:	f100 0568 	add.w	r5, r0, #104	; 0x68
   d5df8:	4668      	mov	r0, sp
   d5dfa:	f7ff f9f7 	bl	d51ec <_ZN12LocalTimeHMSC1ERKS_>
   d5dfe:	4669      	mov	r1, sp
   d5e00:	4628      	mov	r0, r5
   d5e02:	f7ff fd43 	bl	d588c <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>
        time = localTimeValue.toUTC(config);
   d5e06:	1d21      	adds	r1, r4, #4
   d5e08:	4668      	mov	r0, sp
   d5e0a:	f7ff fd57 	bl	d58bc <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d5e0e:	4669      	mov	r1, sp
   d5e10:	4628      	mov	r0, r5
   d5e12:	f7ff ffa4 	bl	d5d5e <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>
   d5e16:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   d5e1a:	4668      	mov	r0, sp
   d5e1c:	f7ff f976 	bl	d510c <_ZN22LocalTimePosixTimezoneD1Ev>
        convert();
   d5e20:	4620      	mov	r0, r4
   d5e22:	f7ff ff1d 	bl	d5c60 <_ZN16LocalTimeConvert7convertEv>
}
   d5e26:	b017      	add	sp, #92	; 0x5c
   d5e28:	bd30      	pop	{r4, r5, pc}
	...

000d5e2c <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>:
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d5e2c:	b530      	push	{r4, r5, lr}
    time += 86400;
   d5e2e:	e9d0 3218 	ldrd	r3, r2, [r0, #96]	; 0x60
   d5e32:	4d0b      	ldr	r5, [pc, #44]	; (d5e60 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS+0x34>)
   d5e34:	195b      	adds	r3, r3, r5
   d5e36:	f04f 0500 	mov.w	r5, #0
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d5e3a:	b085      	sub	sp, #20
    time += 86400;
   d5e3c:	eb45 0202 	adc.w	r2, r5, r2
   d5e40:	e9c0 3218 	strd	r3, r2, [r0, #96]	; 0x60
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d5e44:	4604      	mov	r4, r0
   d5e46:	9101      	str	r1, [sp, #4]
    convert();
   d5e48:	f7ff ff0a 	bl	d5c60 <_ZN16LocalTimeConvert7convertEv>
    atLocalTime(hms);
   d5e4c:	9901      	ldr	r1, [sp, #4]
   d5e4e:	a802      	add	r0, sp, #8
   d5e50:	f7ff f9cc 	bl	d51ec <_ZN12LocalTimeHMSC1ERKS_>
   d5e54:	a902      	add	r1, sp, #8
   d5e56:	4620      	mov	r0, r4
   d5e58:	f7ff ffc6 	bl	d5de8 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
}
   d5e5c:	b005      	add	sp, #20
   d5e5e:	bd30      	pop	{r4, r5, pc}
   d5e60:	00015180 	.word	0x00015180

000d5e64 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>:

// [static]
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d5e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e68:	b08a      	sub	sp, #40	; 0x28
   d5e6a:	4617      	mov	r7, r2
   d5e6c:	4606      	mov	r6, r0
   d5e6e:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d5e70:	2224      	movs	r2, #36	; 0x24
   d5e72:	2100      	movs	r1, #0
   d5e74:	a801      	add	r0, sp, #4
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d5e76:	461c      	mov	r4, r3
    struct tm timeInfo = {0};
   d5e78:	f006 fb3a 	bl	dc4f0 <memset>

    if (dayOfWeek < 0 || dayOfWeek >= 7) {
   d5e7c:	2f06      	cmp	r7, #6
   d5e7e:	d829      	bhi.n	d5ed4 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        // Invalid values of dayOfWeek can cause infinite loop below
        return 0;
    }

    int lastDay = lastDayOfMonth(year, month);
   d5e80:	4629      	mov	r1, r5
   d5e82:	4630      	mov	r0, r6
   d5e84:	f7ff fe8e 	bl	d5ba4 <_ZN9LocalTime14lastDayOfMonthEii>

    if (ordinal > 0) {
   d5e88:	2c00      	cmp	r4, #0
    int lastDay = lastDayOfMonth(year, month);
   d5e8a:	4680      	mov	r8, r0
    if (ordinal > 0) {
   d5e8c:	dd24      	ble.n	d5ed8 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x74>
        timeInfo.tm_year = year - 1900;
   d5e8e:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
        timeInfo.tm_mon = month - 1;
   d5e92:	3d01      	subs	r5, #1
        timeInfo.tm_year = year - 1900;
   d5e94:	9606      	str	r6, [sp, #24]
        timeInfo.tm_mon = month - 1;
   d5e96:	9505      	str	r5, [sp, #20]
        timeInfo.tm_mday = 1;
   d5e98:	2301      	movs	r3, #1
        tmToTime(&timeInfo);
   d5e9a:	a801      	add	r0, sp, #4
        timeInfo.tm_mday = 1;
   d5e9c:	9304      	str	r3, [sp, #16]
        tmToTime(&timeInfo);
   d5e9e:	f7ff fe7f 	bl	d5ba0 <_ZN9LocalTime8tmToTimeEP2tm>

        while(timeInfo.tm_wday != dayOfWeek) {
   d5ea2:	9a07      	ldr	r2, [sp, #28]
   d5ea4:	9b04      	ldr	r3, [sp, #16]
   d5ea6:	42ba      	cmp	r2, r7
   d5ea8:	d001      	beq.n	d5eae <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4a>
            timeInfo.tm_mday++;
   d5eaa:	3301      	adds	r3, #1
   d5eac:	e7f5      	b.n	d5e9a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x36>
   d5eae:	2100      	movs	r1, #0
            tmToTime(&timeInfo);
        }

        for(int loops = 1; loops <= 5; loops++) {
   d5eb0:	2201      	movs	r2, #1
            if (loops >= ordinal) {
   d5eb2:	4294      	cmp	r4, r2
   d5eb4:	d106      	bne.n	d5ec4 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x60>
   d5eb6:	b101      	cbz	r1, d5eba <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d5eb8:	9304      	str	r3, [sp, #16]
            timeInfo.tm_mday--;
            tmToTime(&timeInfo);
        }
        for(int loops = 1; loops <= 5; loops++) {
            if (loops >= -ordinal) {
                return timeInfo.tm_mday;
   d5eba:	9c04      	ldr	r4, [sp, #16]
        }
    }

    
    return 0;
}
   d5ebc:	4620      	mov	r0, r4
   d5ebe:	b00a      	add	sp, #40	; 0x28
   d5ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            timeInfo.tm_mday += 7;
   d5ec4:	3307      	adds	r3, #7
            if (timeInfo.tm_mday > lastDay) {
   d5ec6:	4543      	cmp	r3, r8
   d5ec8:	dc04      	bgt.n	d5ed4 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d5eca:	3201      	adds	r2, #1
   d5ecc:	2a06      	cmp	r2, #6
   d5ece:	f04f 0101 	mov.w	r1, #1
   d5ed2:	d1ee      	bne.n	d5eb2 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4e>
                return 0;
   d5ed4:	2400      	movs	r4, #0
   d5ed6:	e7f1      	b.n	d5ebc <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
    if (ordinal < 0) {
   d5ed8:	d0f0      	beq.n	d5ebc <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
        timeInfo.tm_mon = month - 1;
   d5eda:	3d01      	subs	r5, #1
        timeInfo.tm_mday = lastDay;
   d5edc:	e9cd 0504 	strd	r0, r5, [sp, #16]
        timeInfo.tm_year = year - 1900;
   d5ee0:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   d5ee4:	9606      	str	r6, [sp, #24]
        tmToTime(&timeInfo);
   d5ee6:	a801      	add	r0, sp, #4
   d5ee8:	f7ff fe5a 	bl	d5ba0 <_ZN9LocalTime8tmToTimeEP2tm>
        while(timeInfo.tm_wday != dayOfWeek) {
   d5eec:	9b07      	ldr	r3, [sp, #28]
   d5eee:	9904      	ldr	r1, [sp, #16]
   d5ef0:	42bb      	cmp	r3, r7
   d5ef2:	d002      	beq.n	d5efa <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x96>
            timeInfo.tm_mday--;
   d5ef4:	3901      	subs	r1, #1
   d5ef6:	9104      	str	r1, [sp, #16]
            tmToTime(&timeInfo);
   d5ef8:	e7f5      	b.n	d5ee6 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x82>
   d5efa:	2000      	movs	r0, #0
        for(int loops = 1; loops <= 5; loops++) {
   d5efc:	2201      	movs	r2, #1
            if (loops >= -ordinal) {
   d5efe:	4264      	negs	r4, r4
   d5f00:	4294      	cmp	r4, r2
   d5f02:	dc03      	bgt.n	d5f0c <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0xa8>
   d5f04:	2800      	cmp	r0, #0
   d5f06:	d0d8      	beq.n	d5eba <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d5f08:	9104      	str	r1, [sp, #16]
   d5f0a:	e7d6      	b.n	d5eba <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
            timeInfo.tm_mday -= 7;
   d5f0c:	3907      	subs	r1, #7
            if (timeInfo.tm_mday < 1) {
   d5f0e:	2900      	cmp	r1, #0
   d5f10:	dde0      	ble.n	d5ed4 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d5f12:	3201      	adds	r2, #1
   d5f14:	2a06      	cmp	r2, #6
   d5f16:	f04f 0001 	mov.w	r0, #1
   d5f1a:	d1f1      	bne.n	d5f00 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x9c>
   d5f1c:	e7da      	b.n	d5ed4 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
	...

000d5f20 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d5f20:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
   d5f24:	b0cd      	sub	sp, #308	; 0x134
   d5f26:	4604      	mov	r4, r0
    LocalTimeConvert tempConv(conv);
   d5f28:	a810      	add	r0, sp, #64	; 0x40
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d5f2a:	460d      	mov	r5, r1
    LocalTimeConvert tempConv(conv);
   d5f2c:	f7ff fcfe 	bl	d592c <_ZN16LocalTimeConvertC1ERKS_>
        ymd.year = ymd.month = ymd.day = 0;
   d5f30:	2300      	movs	r3, #0
        return LocalTimeRestrictedDate::getExpirationDate();
   d5f32:	4620      	mov	r0, r4
        ymd.year = ymd.month = ymd.day = 0;
   d5f34:	9302      	str	r3, [sp, #8]
        return LocalTimeRestrictedDate::getExpirationDate();
   d5f36:	f7ff fb35 	bl	d55a4 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>
    if (expirationDate.isEmpty()) {
   d5f3a:	bb58      	cbnz	r0, d5f94 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x74>
    *this = value.ymd();
   d5f3c:	a82a      	add	r0, sp, #168	; 0xa8
   d5f3e:	f7ff fcb2 	bl	d58a6 <_ZNK14LocalTimeValue3ymdEv>
        endYMD = tempConv.getLocalTimeYMD();
   d5f42:	9002      	str	r0, [sp, #8]
        endYMD.addDay(LocalTime::instance().getScheduleLookaheadDays());
   d5f44:	f7ff fe14 	bl	d5b70 <_ZN9LocalTime8instanceEv>
   d5f48:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
   d5f4a:	a802      	add	r0, sp, #8
   d5f4c:	f7ff f9f7 	bl	d533e <_ZN12LocalTimeYMD6addDayEi>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d5f50:	f8df a20c 	ldr.w	sl, [pc, #524]	; d6160 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x240>
    *this = value.ymd();
   d5f54:	a82a      	add	r0, sp, #168	; 0xa8
   d5f56:	f7ff fca6 	bl	d58a6 <_ZNK14LocalTimeValue3ymdEv>
        return compareTo(other) > 0; 
   d5f5a:	9902      	ldr	r1, [sp, #8]
        LocalTimeYMD curYMD = tempConv.getLocalTimeYMD();
   d5f5c:	9003      	str	r0, [sp, #12]
    *this = value.ymd();
   d5f5e:	4606      	mov	r6, r0
   d5f60:	a803      	add	r0, sp, #12
   d5f62:	f7ff fa11 	bl	d5388 <_ZNK12LocalTimeYMD9compareToES_>
        if (curYMD > endYMD) {
   d5f66:	2800      	cmp	r0, #0
   d5f68:	f300 80f2 	bgt.w	d6150 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x230>
        return LocalTimeRestrictedDate::isValid(ymd);
   d5f6c:	4631      	mov	r1, r6
   d5f6e:	4620      	mov	r0, r4
   d5f70:	f7ff fafd 	bl	d556e <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
        if (!timeRange.isValidDate(curYMD)) {
   d5f74:	4607      	mov	r7, r0
   d5f76:	2800      	cmp	r0, #0
   d5f78:	f000 8094 	beq.w	d60a4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
        switch(scheduleItemType) {
   d5f7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d5f7e:	3b01      	subs	r3, #1
   d5f80:	2b04      	cmp	r3, #4
   d5f82:	f200 808f 	bhi.w	d60a4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d5f86:	e8df f013 	tbh	[pc, r3, lsl #1]
   d5f8a:	0007      	.short	0x0007
   d5f8c:	00960007 	.word	0x00960007
   d5f90:	00d500b8 	.word	0x00d500b8
        endYMD = expirationDate;
   d5f94:	9002      	str	r0, [sp, #8]
   d5f96:	e7db      	b.n	d5f50 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x30>
                int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d5f98:	a92a      	add	r1, sp, #168	; 0xa8
   d5f9a:	a807      	add	r0, sp, #28
   d5f9c:	f7ff fc58 	bl	d5850 <_ZNK14LocalTimeValue3hmsEv>
   d5fa0:	a907      	add	r1, sp, #28
   d5fa2:	4620      	mov	r0, r4
   d5fa4:	f7ff f937 	bl	d5216 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                if (cmp < 0) {
   d5fa8:	2800      	cmp	r0, #0
   d5faa:	da0d      	bge.n	d5fc8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xa8>
                    tempConv.atLocalTime(timeRange.hmsStart);
   d5fac:	f104 011c 	add.w	r1, r4, #28
   d5fb0:	a807      	add	r0, sp, #28
   d5fb2:	f7ff f91b 	bl	d51ec <_ZN12LocalTimeHMSC1ERKS_>
   d5fb6:	a907      	add	r1, sp, #28
   d5fb8:	a810      	add	r0, sp, #64	; 0x40
   d5fba:	f7ff ff15 	bl	d5de8 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                        conv.time = tempConv.time;
   d5fbe:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d5fc2:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
   d5fc6:	e094      	b.n	d60f2 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1d2>
                if (cmp == 0) {
   d5fc8:	d16c      	bne.n	d60a4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    switch(scheduleItemType) {
   d5fca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d5fcc:	2b01      	cmp	r3, #1
   d5fce:	d025      	beq.n	d601c <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xfc>
   d5fd0:	2b02      	cmp	r3, #2
   d5fd2:	d167      	bne.n	d60a4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d5fd4:	f104 011c 	add.w	r1, r4, #28
   d5fd8:	a804      	add	r0, sp, #16
   d5fda:	f7ff f907 	bl	d51ec <_ZN12LocalTimeHMSC1ERKS_>
   d5fde:	f104 0924 	add.w	r9, r4, #36	; 0x24
        return compareTo(other) <= 0;
   d5fe2:	4649      	mov	r1, r9
   d5fe4:	a804      	add	r0, sp, #16
   d5fe6:	f7ff f8e3 	bl	d51b0 <_ZNK12LocalTimeHMS9compareToERKS_>
   d5fea:	2800      	cmp	r0, #0
   d5fec:	dc5a      	bgt.n	d60a4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                            tempConv.atLocalTime(tempHMS);
   d5fee:	a904      	add	r1, sp, #16
   d5ff0:	a807      	add	r0, sp, #28
   d5ff2:	f7ff f8fb 	bl	d51ec <_ZN12LocalTimeHMSC1ERKS_>
   d5ff6:	a907      	add	r1, sp, #28
   d5ff8:	a810      	add	r0, sp, #64	; 0x40
   d5ffa:	f7ff fef5 	bl	d5de8 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                            if (tempConv.time > conv.time) {
   d5ffe:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	; 0x60
   d6002:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d6006:	4290      	cmp	r0, r2
   d6008:	eb71 0303 	sbcs.w	r3, r1, r3
   d600c:	db41      	blt.n	d6092 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x172>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d600e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d6012:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d6014:	4413      	add	r3, r2
   d6016:	f88d 3014 	strb.w	r3, [sp, #20]
   d601a:	e7e2      	b.n	d5fe2 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xc2>
                        startingModulo = timeRange.hmsStart.minute % increment;
   d601c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d601e:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   d6022:	fb93 f6f2 	sdiv	r6, r3, r2
                        tempConv.time += increment * 60;
   d6026:	213c      	movs	r1, #60	; 0x3c
   d6028:	4351      	muls	r1, r2
                        startingModulo = timeRange.hmsStart.minute % increment;
   d602a:	fb02 3616 	mls	r6, r2, r6, r3
                        tempConv.time += increment * 60;
   d602e:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d6032:	1852      	adds	r2, r2, r1
   d6034:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
                        tempConv.convert();
   d6038:	a810      	add	r0, sp, #64	; 0x40
                        tempConv.time += increment * 60;
   d603a:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
                        tempConv.convert();
   d603e:	f7ff fe0f 	bl	d5c60 <_ZN16LocalTimeConvert7convertEv>
                        LocalTime::timeToTm(tempConv.time, &timeInfo);
   d6042:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
    localtime_r(&time, pTimeInfo);
   d6046:	a907      	add	r1, sp, #28
   d6048:	a804      	add	r0, sp, #16
   d604a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d604e:	f003 f9e3 	bl	d9418 <localtime_r>
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d6052:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   d6054:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d6056:	1b9b      	subs	r3, r3, r6
   d6058:	fb93 f2f1 	sdiv	r2, r3, r1
   d605c:	fb01 3312 	mls	r3, r1, r2, r3
   d6060:	9a08      	ldr	r2, [sp, #32]
    return mktime(pTimeInfo);
   d6062:	a807      	add	r0, sp, #28
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d6064:	1ad2      	subs	r2, r2, r3
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d6066:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d606a:	9208      	str	r2, [sp, #32]
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d606c:	9307      	str	r3, [sp, #28]
    return mktime(pTimeInfo);
   d606e:	f003 f9db 	bl	d9428 <mktime>
                        tempConv.time = LocalTime::tmToTime(&timeInfo);
   d6072:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
                        tempConv.convert();
   d6076:	a810      	add	r0, sp, #64	; 0x40
   d6078:	f7ff fdf2 	bl	d5c60 <_ZN16LocalTimeConvert7convertEv>
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   d607c:	a92a      	add	r1, sp, #168	; 0xa8
   d607e:	a804      	add	r0, sp, #16
   d6080:	f7ff fbf2 	bl	d5868 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
        return compareTo(other) < 0;
   d6084:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d6088:	a804      	add	r0, sp, #16
   d608a:	f7ff f891 	bl	d51b0 <_ZNK12LocalTimeHMS9compareToERKS_>
                        if (tempConv.getLocalTimeHMS() < timeRange.hmsEnd) {
   d608e:	2800      	cmp	r0, #0
   d6090:	da08      	bge.n	d60a4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
    *this = value.ymd();
   d6092:	a82a      	add	r0, sp, #168	; 0xa8
   d6094:	f7ff fc07 	bl	d58a6 <_ZNK14LocalTimeValue3ymdEv>
   d6098:	4601      	mov	r1, r0
        return LocalTimeRestrictedDate::isValid(ymd);
   d609a:	4620      	mov	r0, r4
   d609c:	f7ff fa67 	bl	d556e <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
                        if (!timeRange.isValidDate(tempConv.getLocalTimeYMD())) {
   d60a0:	2800      	cmp	r0, #0
   d60a2:	d18c      	bne.n	d5fbe <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x9e>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d60a4:	4651      	mov	r1, sl
   d60a6:	a807      	add	r0, sp, #28
   d60a8:	f7ff f9ca 	bl	d5440 <_ZN12LocalTimeHMSC1EPKc>
   d60ac:	a907      	add	r1, sp, #28
   d60ae:	a810      	add	r0, sp, #64	; 0x40
   d60b0:	f7ff febc 	bl	d5e2c <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>
    }
   d60b4:	e74e      	b.n	d5f54 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x34>
                int day = LocalTime::dayOfWeekOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month(), dayOfWeek, increment);
   d60b6:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d60b8:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d60ba:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
   d60be:	3101      	adds	r1, #1
   d60c0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d60c4:	f7ff fece 	bl	d5e64 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>
                if (day == tempConv.localTimeValue.day()) {
   d60c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   d60ca:	4298      	cmp	r0, r3
   d60cc:	d1ea      	bne.n	d60a4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        tempConv.atLocalTime(timeRange.hmsStart);
   d60ce:	f104 011c 	add.w	r1, r4, #28
                tempConv.atLocalTime(timeRange.hmsStart);
   d60d2:	a807      	add	r0, sp, #28
   d60d4:	f7ff f88a 	bl	d51ec <_ZN12LocalTimeHMSC1ERKS_>
   d60d8:	a907      	add	r1, sp, #28
   d60da:	a810      	add	r0, sp, #64	; 0x40
   d60dc:	f7ff fe84 	bl	d5de8 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                if (tempConv.time > conv.time) {
   d60e0:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
   d60e4:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d60e8:	4282      	cmp	r2, r0
   d60ea:	418b      	sbcs	r3, r1
   d60ec:	dada      	bge.n	d60a4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    conv.time = tempConv.time;
   d60ee:	e9c5 0118 	strd	r0, r1, [r5, #96]	; 0x60
                        conv.convert();
   d60f2:	4628      	mov	r0, r5
   d60f4:	f7ff fdb4 	bl	d5c60 <_ZN16LocalTimeConvert7convertEv>
                        return true;
   d60f8:	e02b      	b.n	d6152 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x232>
                int tempIncrement = increment;
   d60fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                if (tempIncrement < 0) {
   d60fc:	2e00      	cmp	r6, #0
   d60fe:	da08      	bge.n	d6112 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1f2>
                    tempIncrement = LocalTime::lastDayOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month()) + tempIncrement + 1;
   d6100:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d6102:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d6104:	3101      	adds	r1, #1
   d6106:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d610a:	f7ff fd4b 	bl	d5ba4 <_ZN9LocalTime14lastDayOfMonthEii>
   d610e:	4430      	add	r0, r6
   d6110:	1c46      	adds	r6, r0, #1
                if (tempConv.localTimeValue.ymd().getDay() == tempIncrement) {
   d6112:	a82a      	add	r0, sp, #168	; 0xa8
   d6114:	f7ff fbc7 	bl	d58a6 <_ZNK14LocalTimeValue3ymdEv>
   d6118:	ebb6 6fd0 	cmp.w	r6, r0, lsr #27
   d611c:	d1c2      	bne.n	d60a4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d611e:	a92a      	add	r1, sp, #168	; 0xa8
   d6120:	a807      	add	r0, sp, #28
   d6122:	f7ff fb95 	bl	d5850 <_ZNK14LocalTimeValue3hmsEv>
   d6126:	a907      	add	r1, sp, #28
   d6128:	4620      	mov	r0, r4
   d612a:	f7ff f874 	bl	d5216 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                    if (cmp <= 0) {
   d612e:	2800      	cmp	r0, #0
   d6130:	dcb8      	bgt.n	d60a4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d6132:	e7cc      	b.n	d60ce <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1ae>
            if (tempConv.localTimeValue.hms() <= timeRange.hmsStart) {
   d6134:	a92a      	add	r1, sp, #168	; 0xa8
   d6136:	a807      	add	r0, sp, #28
   d6138:	f7ff fb8a 	bl	d5850 <_ZNK14LocalTimeValue3hmsEv>
   d613c:	f104 011c 	add.w	r1, r4, #28
        return compareTo(other) <= 0;
   d6140:	a807      	add	r0, sp, #28
   d6142:	9101      	str	r1, [sp, #4]
   d6144:	f7ff f834 	bl	d51b0 <_ZNK12LocalTimeHMS9compareToERKS_>
   d6148:	2800      	cmp	r0, #0
   d614a:	9901      	ldr	r1, [sp, #4]
   d614c:	dcaa      	bgt.n	d60a4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d614e:	e7c0      	b.n	d60d2 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1b2>
    return false;
   d6150:	2700      	movs	r7, #0
class LocalTimeConvert {
   d6152:	a811      	add	r0, sp, #68	; 0x44
   d6154:	f7fe ffda 	bl	d510c <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d6158:	4638      	mov	r0, r7
   d615a:	b04d      	add	sp, #308	; 0x134
   d615c:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
   d6160:	000dcd99 	.word	0x000dcd99

000d6164 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6164:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d6166:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6168:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d616a:	4668      	mov	r0, sp
   d616c:	f7ff f817 	bl	d519e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   d6170:	466a      	mov	r2, sp
   d6172:	4629      	mov	r1, r5
   d6174:	4620      	mov	r0, r4
   d6176:	f003 fec5 	bl	d9f04 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d617a:	a801      	add	r0, sp, #4
   d617c:	f7fe f836 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6180:	4620      	mov	r0, r4
   d6182:	b003      	add	sp, #12
   d6184:	bd30      	pop	{r4, r5, pc}

000d6186 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6186:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d6188:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d618a:	4604      	mov	r4, r0
   d618c:	4668      	mov	r0, sp
   d618e:	f7ff f806 	bl	d519e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   d6192:	466a      	mov	r2, sp
   d6194:	4629      	mov	r1, r5
   d6196:	4620      	mov	r0, r4
   d6198:	f003 fe90 	bl	d9ebc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d619c:	a801      	add	r0, sp, #4
   d619e:	f7fe f825 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d61a2:	4620      	mov	r0, r4
   d61a4:	b003      	add	sp, #12
   d61a6:	bd30      	pop	{r4, r5, pc}

000d61a8 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d61a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d61aa:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d61ac:	4604      	mov	r4, r0
   d61ae:	4668      	mov	r0, sp
   d61b0:	f7fe fff5 	bl	d519e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   d61b4:	466a      	mov	r2, sp
   d61b6:	4629      	mov	r1, r5
   d61b8:	4620      	mov	r0, r4
   d61ba:	f003 fe28 	bl	d9e0e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d61be:	a801      	add	r0, sp, #4
   d61c0:	f7fe f814 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d61c4:	4620      	mov	r0, r4
   d61c6:	b003      	add	sp, #12
   d61c8:	bd30      	pop	{r4, r5, pc}

000d61ca <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>:
       *  (i.e. capacity() == size() in the new %vector).
       *
       *  The newly-created %vector uses a copy of the allocator object used
       *  by @a __x (unless the allocator traits dictate a different object).
       */
      vector(const vector& __x)
   d61ca:	b570      	push	{r4, r5, r6, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d61cc:	e9d1 3600 	ldrd	r3, r6, [r1]
   d61d0:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   d61d2:	2300      	movs	r3, #0
   d61d4:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   d61d8:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   d61da:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   d61dc:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   d61de:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   d61e0:	f7fe ffd0 	bl	d5184 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d61e4:	e9d5 5300 	ldrd	r5, r3, [r5]
	this->_M_impl._M_finish = this->_M_impl._M_start;
   d61e8:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   d61ec:	4406      	add	r6, r0
   d61ee:	60a6      	str	r6, [r4, #8]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   d61f0:	462a      	mov	r2, r5
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
   d61f2:	4601      	mov	r1, r0
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   d61f4:	4293      	cmp	r3, r2
   d61f6:	d005      	beq.n	d6204 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x3a>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d61f8:	b109      	cbz	r1, d61fe <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x34>
   d61fa:	6816      	ldr	r6, [r2, #0]
   d61fc:	600e      	str	r6, [r1, #0]
   d61fe:	3104      	adds	r1, #4
   d6200:	3204      	adds	r2, #4
   d6202:	e7f7      	b.n	d61f4 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x2a>
	this->_M_impl._M_finish =
   d6204:	1b5b      	subs	r3, r3, r5
   d6206:	4418      	add	r0, r3
   d6208:	6060      	str	r0, [r4, #4]
      }
   d620a:	4620      	mov	r0, r4
   d620c:	bd70      	pop	{r4, r5, r6, pc}

000d620e <_ZN23LocalTimeRestrictedDateC1ERKS_>:
class LocalTimeRestrictedDate {
   d620e:	b538      	push	{r3, r4, r5, lr}
   d6210:	460d      	mov	r5, r1
   d6212:	f811 3b04 	ldrb.w	r3, [r1], #4
   d6216:	4604      	mov	r4, r0
   d6218:	f800 3b04 	strb.w	r3, [r0], #4
   d621c:	f7ff ffd5 	bl	d61ca <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d6220:	f105 0110 	add.w	r1, r5, #16
   d6224:	f104 0010 	add.w	r0, r4, #16
   d6228:	f7ff ffcf 	bl	d61ca <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d622c:	4620      	mov	r0, r4
   d622e:	bd38      	pop	{r3, r4, r5, pc}

000d6230 <_ZN21LocalTimeScheduleItemC1ERKS_>:
class LocalTimeScheduleItem {
   d6230:	b538      	push	{r3, r4, r5, lr}
   d6232:	4604      	mov	r4, r0
   d6234:	460d      	mov	r5, r1
class LocalTimeRange : public LocalTimeRestrictedDate {
   d6236:	f7ff ffea 	bl	d620e <_ZN23LocalTimeRestrictedDateC1ERKS_>
   d623a:	f105 011c 	add.w	r1, r5, #28
   d623e:	f104 001c 	add.w	r0, r4, #28
   d6242:	f7fe ffd3 	bl	d51ec <_ZN12LocalTimeHMSC1ERKS_>
   d6246:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d624a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d624e:	f7fe ffcd 	bl	d51ec <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeScheduleItem {
   d6252:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   d6254:	62e3      	str	r3, [r4, #44]	; 0x2c
   d6256:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d6258:	6323      	str	r3, [r4, #48]	; 0x30
   d625a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   d625c:	6363      	str	r3, [r4, #52]	; 0x34
   d625e:	f105 0138 	add.w	r1, r5, #56	; 0x38
   d6262:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d6266:	f005 f95d 	bl	db524 <_ZN6StringC1ERKS_>
   d626a:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d626c:	64a3      	str	r3, [r4, #72]	; 0x48
   d626e:	4620      	mov	r0, r4
   d6270:	bd38      	pop	{r3, r4, r5, pc}

000d6272 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv, std::function<bool(LocalTimeScheduleItem &item)> filter) const {
   d6272:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6276:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d627a:	b0d1      	sub	sp, #324	; 0x144
   d627c:	4681      	mov	r9, r0
   d627e:	460c      	mov	r4, r1
   d6280:	4615      	mov	r5, r2
    time_t closestTime = 0;
   d6282:	2600      	movs	r6, #0
   d6284:	2700      	movs	r7, #0
    for(auto it = scheduleItems.begin(); it != scheduleItems.end(); ++it) {
   d6286:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   d628a:	4543      	cmp	r3, r8
   d628c:	d029      	beq.n	d62e2 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x70>
        LocalTimeScheduleItem item = *it;
   d628e:	4641      	mov	r1, r8
   d6290:	a801      	add	r0, sp, #4
   d6292:	f7ff ffcd 	bl	d6230 <_ZN21LocalTimeScheduleItemC1ERKS_>
      if (_M_empty())
   d6296:	68ab      	ldr	r3, [r5, #8]
   d6298:	b90b      	cbnz	r3, d629e <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x2c>
	__throw_bad_function_call();
   d629a:	f005 fce3 	bl	dbc64 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d629e:	68eb      	ldr	r3, [r5, #12]
   d62a0:	a901      	add	r1, sp, #4
   d62a2:	4628      	mov	r0, r5
   d62a4:	4798      	blx	r3
        if (filter(item)) {
   d62a6:	b1b0      	cbz	r0, d62d6 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x64>
            LocalTimeConvert tmpConvert(conv);
   d62a8:	4621      	mov	r1, r4
   d62aa:	a814      	add	r0, sp, #80	; 0x50
   d62ac:	f7ff fb3e 	bl	d592c <_ZN16LocalTimeConvertC1ERKS_>
            bool bResult = item.getNextScheduledTime(tmpConvert);
   d62b0:	a914      	add	r1, sp, #80	; 0x50
   d62b2:	a801      	add	r0, sp, #4
   d62b4:	f7ff fe34 	bl	d5f20 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>
            if (bResult && closestTime == 0 || tmpConvert.time < closestTime) {
   d62b8:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
   d62bc:	b110      	cbz	r0, d62c4 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x52>
   d62be:	ea56 0107 	orrs.w	r1, r6, r7
   d62c2:	d003      	beq.n	d62cc <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5a>
   d62c4:	42b2      	cmp	r2, r6
   d62c6:	eb73 0107 	sbcs.w	r1, r3, r7
   d62ca:	da01      	bge.n	d62d0 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5e>
                closestTime = tmpConvert.time;
   d62cc:	4616      	mov	r6, r2
   d62ce:	461f      	mov	r7, r3
class LocalTimeConvert {
   d62d0:	a815      	add	r0, sp, #84	; 0x54
   d62d2:	f7fe ff1b 	bl	d510c <_ZN22LocalTimePosixTimezoneD1Ev>
        LocalTimeScheduleItem item = *it;
   d62d6:	a801      	add	r0, sp, #4
   d62d8:	f7ff fb5c 	bl	d5994 <_ZN21LocalTimeScheduleItemD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   d62dc:	f108 084c 	add.w	r8, r8, #76	; 0x4c
	return *this;
   d62e0:	e7d1      	b.n	d6286 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x14>
    if (closestTime != 0) {
   d62e2:	ea56 0307 	orrs.w	r3, r6, r7
   d62e6:	d008      	beq.n	d62fa <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x88>
        conv.convert();
   d62e8:	4620      	mov	r0, r4
        conv.time = closestTime;
   d62ea:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
        conv.convert();
   d62ee:	f7ff fcb7 	bl	d5c60 <_ZN16LocalTimeConvert7convertEv>
        return true;
   d62f2:	2001      	movs	r0, #1
}
   d62f4:	b051      	add	sp, #324	; 0x144
   d62f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
   d62fa:	2000      	movs	r0, #0
   d62fc:	e7fa      	b.n	d62f4 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x82>
	...

000d6300 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv) const {
   d6300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	    _M_invoker = &_My_handler::_M_invoke;
   d6302:	4b08      	ldr	r3, [pc, #32]	; (d6324 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x24>)
   d6304:	9303      	str	r3, [sp, #12]
    return getNextScheduledTime(conv, [](LocalTimeScheduleItem &item) {
   d6306:	466a      	mov	r2, sp
	    _M_manager = &_My_handler::_M_manager;
   d6308:	4b07      	ldr	r3, [pc, #28]	; (d6328 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x28>)
   d630a:	9302      	str	r3, [sp, #8]
   d630c:	f7ff ffb1 	bl	d6272 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>
      if (_M_manager)
   d6310:	9b02      	ldr	r3, [sp, #8]
   d6312:	4604      	mov	r4, r0
   d6314:	b11b      	cbz	r3, d631e <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x1e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6316:	4669      	mov	r1, sp
   d6318:	2203      	movs	r2, #3
   d631a:	4608      	mov	r0, r1
   d631c:	4798      	blx	r3
}
   d631e:	4620      	mov	r0, r4
   d6320:	b004      	add	sp, #16
   d6322:	bd10      	pop	{r4, pc}
   d6324:	000d50e3 	.word	0x000d50e3
   d6328:	000d50e7 	.word	0x000d50e7

000d632c <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx>:
bool LocalTimeSchedule::isScheduledTime(LocalTimeConvert &conv, time_t timeNow) {
   d632c:	b570      	push	{r4, r5, r6, lr}
   d632e:	4604      	mov	r4, r0
   d6330:	460d      	mov	r5, r1
   d6332:	4610      	mov	r0, r2
   d6334:	4619      	mov	r1, r3
    if (nextTime != 0 && nextTime <= timeNow) {
   d6336:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d633a:	ea52 0603 	orrs.w	r6, r2, r3
   d633e:	d013      	beq.n	d6368 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x3c>
   d6340:	4290      	cmp	r0, r2
   d6342:	eb71 0303 	sbcs.w	r3, r1, r3
   d6346:	db0f      	blt.n	d6368 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x3c>
        nextTime = 0;
   d6348:	2200      	movs	r2, #0
   d634a:	2300      	movs	r3, #0
   d634c:	e9c4 2306 	strd	r2, r3, [r4, #24]
        result = true;
   d6350:	2601      	movs	r6, #1
    if (getNextScheduledTime(conv)) {
   d6352:	4629      	mov	r1, r5
   d6354:	4620      	mov	r0, r4
   d6356:	f7ff ffd3 	bl	d6300 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d635a:	b118      	cbz	r0, d6364 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x38>
        nextTime = conv.time;
   d635c:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d6360:	e9c4 2306 	strd	r2, r3, [r4, #24]
}
   d6364:	4630      	mov	r0, r6
   d6366:	bd70      	pop	{r4, r5, r6, pc}
    bool result = false;
   d6368:	2600      	movs	r6, #0
   d636a:	e7f2      	b.n	d6352 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x26>

000d636c <_ZN17LocalTimeSchedule15isScheduledTimeEv>:
bool LocalTimeSchedule::isScheduledTime() {
   d636c:	b530      	push	{r4, r5, lr}
   d636e:	b0bd      	sub	sp, #244	; 0xf4
   d6370:	4605      	mov	r5, r0
    if (!Time.isValid()) {
   d6372:	f005 f9d4 	bl	db71e <_ZN9TimeClass7isValidEv>
   d6376:	4604      	mov	r4, r0
   d6378:	b1c0      	cbz	r0, d63ac <_ZN17LocalTimeSchedule15isScheduledTimeEv+0x40>
   d637a:	2306      	movs	r3, #6
   d637c:	a801      	add	r0, sp, #4
   d637e:	9300      	str	r3, [sp, #0]
   d6380:	f7ff f988 	bl	d5694 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d6384:	f005 f9e8 	bl	db758 <_ZN9TimeClass3nowEv>
   d6388:	17c1      	asrs	r1, r0, #31
   d638a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    conv.withCurrentTime().convert();
   d638e:	4668      	mov	r0, sp
   d6390:	f7ff fc66 	bl	d5c60 <_ZN16LocalTimeConvert7convertEv>
    return isScheduledTime(conv, Time.now());
   d6394:	f005 f9e0 	bl	db758 <_ZN9TimeClass3nowEv>
   d6398:	4669      	mov	r1, sp
   d639a:	4602      	mov	r2, r0
   d639c:	17c3      	asrs	r3, r0, #31
   d639e:	4628      	mov	r0, r5
   d63a0:	f7ff ffc4 	bl	d632c <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx>
   d63a4:	4604      	mov	r4, r0
class LocalTimeConvert {
   d63a6:	a801      	add	r0, sp, #4
   d63a8:	f7fe feb0 	bl	d510c <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d63ac:	4620      	mov	r0, r4
   d63ae:	b03d      	add	sp, #244	; 0xf4
   d63b0:	bd30      	pop	{r4, r5, pc}

000d63b2 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   d63b2:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   d63b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d63b8:	4604      	mov	r4, r0
   d63ba:	460e      	mov	r6, r1
      if (&__x != this)
   d63bc:	d022      	beq.n	d6404 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x52>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d63be:	e9d1 5800 	ldrd	r5, r8, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   d63c2:	6800      	ldr	r0, [r0, #0]
   d63c4:	68a3      	ldr	r3, [r4, #8]
   d63c6:	1a1b      	subs	r3, r3, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d63c8:	eba8 0705 	sub.w	r7, r8, r5
			 - this->_M_impl._M_start); }
   d63cc:	109b      	asrs	r3, r3, #2
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   d63ce:	ebb3 0fa7 	cmp.w	r3, r7, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d63d2:	ea4f 01a7 	mov.w	r1, r7, asr #2
   d63d6:	d218      	bcs.n	d640a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   d63d8:	4608      	mov	r0, r1
   d63da:	f7fe fed3 	bl	d5184 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d63de:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   d63e0:	4603      	mov	r3, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d63e2:	45a8      	cmp	r8, r5
   d63e4:	d005      	beq.n	d63f2 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x40>
   d63e6:	b10b      	cbz	r3, d63ec <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x3a>
   d63e8:	682a      	ldr	r2, [r5, #0]
   d63ea:	601a      	str	r2, [r3, #0]
   d63ec:	3304      	adds	r3, #4
   d63ee:	3504      	adds	r5, #4
   d63f0:	e7f7      	b.n	d63e2 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x30>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
   d63f2:	6820      	ldr	r0, [r4, #0]
   d63f4:	f7fe fec2 	bl	d517c <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
   d63f8:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   d63fa:	443e      	add	r6, r7
   d63fc:	60a6      	str	r6, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   d63fe:	6823      	ldr	r3, [r4, #0]
   d6400:	441f      	add	r7, r3
   d6402:	6067      	str	r7, [r4, #4]
	}
      return *this;
    }
   d6404:	4620      	mov	r0, r4
   d6406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d640a:	6862      	ldr	r2, [r4, #4]
   d640c:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   d640e:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
   d6412:	d806      	bhi.n	d6422 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x70>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d6414:	45a8      	cmp	r8, r5
   d6416:	d0f2      	beq.n	d63fe <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d6418:	463a      	mov	r2, r7
   d641a:	4629      	mov	r1, r5
   d641c:	f006 f84e 	bl	dc4bc <memmove>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d6420:	e7ed      	b.n	d63fe <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	  if (_Num)
   d6422:	b112      	cbz	r2, d642a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d6424:	4629      	mov	r1, r5
   d6426:	f006 f849 	bl	dc4bc <memmove>
   d642a:	e9d4 3200 	ldrd	r3, r2, [r4]
   d642e:	1ad1      	subs	r1, r2, r3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   d6430:	6833      	ldr	r3, [r6, #0]
   d6432:	440b      	add	r3, r1
					  __x._M_impl._M_finish,
   d6434:	6871      	ldr	r1, [r6, #4]
   d6436:	4299      	cmp	r1, r3
   d6438:	d0e1      	beq.n	d63fe <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
   d643a:	b10a      	cbz	r2, d6440 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x8e>
   d643c:	6818      	ldr	r0, [r3, #0]
   d643e:	6010      	str	r0, [r2, #0]
   d6440:	3304      	adds	r3, #4
   d6442:	3204      	adds	r2, #4
   d6444:	e7f7      	b.n	d6436 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x84>

000d6446 <_ZN14LocalTimeRangeaSERKS_>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d6446:	b538      	push	{r3, r4, r5, lr}
   d6448:	460d      	mov	r5, r1
class LocalTimeRestrictedDate {
   d644a:	f811 3b04 	ldrb.w	r3, [r1], #4
class LocalTimeRange : public LocalTimeRestrictedDate {
   d644e:	4604      	mov	r4, r0
class LocalTimeRestrictedDate {
   d6450:	f800 3b04 	strb.w	r3, [r0], #4
   d6454:	f7ff ffad 	bl	d63b2 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
   d6458:	f105 0110 	add.w	r1, r5, #16
   d645c:	f104 0010 	add.w	r0, r4, #16
   d6460:	f7ff ffa7 	bl	d63b2 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
class LocalTimeRange : public LocalTimeRestrictedDate {
   d6464:	f105 011c 	add.w	r1, r5, #28
   d6468:	f104 001c 	add.w	r0, r4, #28
   d646c:	f7fe fec6 	bl	d51fc <_ZN12LocalTimeHMSaSERKS_>
   d6470:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d6474:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6478:	f7fe fec0 	bl	d51fc <_ZN12LocalTimeHMSaSERKS_>
   d647c:	4620      	mov	r0, r4
   d647e:	bd38      	pop	{r3, r4, r5, pc}

000d6480 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d6480:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6484:	e9d0 6900 	ldrd	r6, r9, [r0]
   d6488:	4d3b      	ldr	r5, [pc, #236]	; (d6578 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   d648a:	4b3c      	ldr	r3, [pc, #240]	; (d657c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d648c:	eba9 0406 	sub.w	r4, r9, r6
   d6490:	10a4      	asrs	r4, r4, #2
   d6492:	436c      	muls	r4, r5
	if (max_size() - size() < __n)
   d6494:	429c      	cmp	r4, r3
   d6496:	468a      	mov	sl, r1
   d6498:	4607      	mov	r7, r0
   d649a:	4611      	mov	r1, r2
   d649c:	46a8      	mov	r8, r5
   d649e:	d102      	bne.n	d64a6 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d64a0:	4837      	ldr	r0, [pc, #220]	; (d6580 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x100>)
   d64a2:	f005 fbdc 	bl	dbc5e <_ZSt20__throw_length_errorPKc>
   d64a6:	2c01      	cmp	r4, #1
   d64a8:	4622      	mov	r2, r4
   d64aa:	bf38      	it	cc
   d64ac:	2201      	movcc	r2, #1
   d64ae:	18a4      	adds	r4, r4, r2
   d64b0:	ebaa 0506 	sub.w	r5, sl, r6

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d64b4:	d25d      	bcs.n	d6572 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d64b6:	b154      	cbz	r4, d64ce <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4e>
   d64b8:	429c      	cmp	r4, r3
   d64ba:	bf28      	it	cs
   d64bc:	461c      	movcs	r4, r3
   d64be:	204c      	movs	r0, #76	; 0x4c
   d64c0:	4360      	muls	r0, r4
   d64c2:	9100      	str	r1, [sp, #0]
   d64c4:	f7fd fde7 	bl	d4096 <_Znwj>
   d64c8:	9900      	ldr	r1, [sp, #0]
   d64ca:	4683      	mov	fp, r0
   d64cc:	e000      	b.n	d64d0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x50>
   d64ce:	46a3      	mov	fp, r4
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d64d0:	eb1b 0005 	adds.w	r0, fp, r5
   d64d4:	d001      	beq.n	d64da <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
   d64d6:	f7ff feab 	bl	d6230 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d64da:	465b      	mov	r3, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d64dc:	4631      	mov	r1, r6
   d64de:	458a      	cmp	sl, r1
   d64e0:	d00a      	beq.n	d64f8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
   d64e2:	b133      	cbz	r3, d64f2 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
   d64e4:	4618      	mov	r0, r3
   d64e6:	9101      	str	r1, [sp, #4]
   d64e8:	9300      	str	r3, [sp, #0]
   d64ea:	f7ff fea1 	bl	d6230 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d64ee:	e9dd 3100 	ldrd	r3, r1, [sp]
   d64f2:	314c      	adds	r1, #76	; 0x4c
   d64f4:	334c      	adds	r3, #76	; 0x4c
   d64f6:	e7f2      	b.n	d64de <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
   d64f8:	08ad      	lsrs	r5, r5, #2
   d64fa:	fb08 fa05 	mul.w	sl, r8, r5
   d64fe:	f02a 4540 	bic.w	r5, sl, #3221225472	; 0xc0000000
   d6502:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
   d6506:	fb0a fa05 	mul.w	sl, sl, r5
   d650a:	eb06 050a 	add.w	r5, r6, sl
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
		 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   d650e:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   d6512:	44da      	add	sl, fp
	  _ForwardIterator __cur = __result;
   d6514:	4653      	mov	r3, sl
   d6516:	4629      	mov	r1, r5
	      for (; __first != __last; ++__first, (void)++__cur)
   d6518:	4549      	cmp	r1, r9
   d651a:	d113      	bne.n	d6544 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
   d651c:	eba9 0505 	sub.w	r5, r9, r5
   d6520:	08ad      	lsrs	r5, r5, #2
   d6522:	fb08 f505 	mul.w	r5, r8, r5
   d6526:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
   d652a:	f04f 084c 	mov.w	r8, #76	; 0x4c
   d652e:	fb08 a505 	mla	r5, r8, r5, sl
   d6532:	46b0      	mov	r8, r6
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d6534:	45c8      	cmp	r8, r9
   d6536:	d00f      	beq.n	d6558 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
    { __pointer->~_Tp(); }
   d6538:	4640      	mov	r0, r8
   d653a:	f7ff fa2b 	bl	d5994 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d653e:	f108 084c 	add.w	r8, r8, #76	; 0x4c
   d6542:	e7f7      	b.n	d6534 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d6544:	4618      	mov	r0, r3
   d6546:	9101      	str	r1, [sp, #4]
   d6548:	9300      	str	r3, [sp, #0]
   d654a:	f7ff fe71 	bl	d6230 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d654e:	9901      	ldr	r1, [sp, #4]
   d6550:	9b00      	ldr	r3, [sp, #0]
   d6552:	314c      	adds	r1, #76	; 0x4c
   d6554:	334c      	adds	r3, #76	; 0x4c
   d6556:	e7df      	b.n	d6518 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	if (__p)
   d6558:	b116      	cbz	r6, d6560 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe0>
	::operator delete(__p);
   d655a:	4630      	mov	r0, r6
   d655c:	f7fd fd9f 	bl	d409e <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d6560:	204c      	movs	r0, #76	; 0x4c
   d6562:	fb00 b404 	mla	r4, r0, r4, fp
      this->_M_impl._M_finish = __new_finish;
   d6566:	e9c7 b500 	strd	fp, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d656a:	60bc      	str	r4, [r7, #8]
    }
   d656c:	b003      	add	sp, #12
   d656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d6572:	461c      	mov	r4, r3
   d6574:	e7a3      	b.n	d64be <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
   d6576:	bf00      	nop
   d6578:	286bca1b 	.word	0x286bca1b
   d657c:	01af286b 	.word	0x01af286b
   d6580:	000dcdc4 	.word	0x000dcdc4

000d6584 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   d6584:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d6586:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   d658a:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   d658c:	4604      	mov	r4, r0
   d658e:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d6590:	d007      	beq.n	d65a2 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6592:	b113      	cbz	r3, d659a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x16>
   d6594:	4618      	mov	r0, r3
   d6596:	f7ff fe4b 	bl	d6230 <_ZN21LocalTimeScheduleItemC1ERKS_>
	    ++this->_M_impl._M_finish;
   d659a:	6863      	ldr	r3, [r4, #4]
   d659c:	334c      	adds	r3, #76	; 0x4c
   d659e:	6063      	str	r3, [r4, #4]
      }
   d65a0:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d65a2:	4619      	mov	r1, r3
   d65a4:	f7ff ff6c 	bl	d6480 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   d65a8:	e7fa      	b.n	d65a0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1c>

000d65aa <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>:
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d65aa:	b530      	push	{r4, r5, lr}
   d65ac:	b097      	sub	sp, #92	; 0x5c
   d65ae:	4604      	mov	r4, r0
    LocalTimeScheduleItem item;
   d65b0:	a803      	add	r0, sp, #12
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d65b2:	9201      	str	r2, [sp, #4]
   d65b4:	460d      	mov	r5, r1
    LocalTimeScheduleItem item;
   d65b6:	f7fe ff4f 	bl	d5458 <_ZN21LocalTimeScheduleItemC1Ev>
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d65ba:	2301      	movs	r3, #1
    item.timeRange = timeRange;
   d65bc:	9901      	ldr	r1, [sp, #4]
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d65be:	9315      	str	r3, [sp, #84]	; 0x54
    item.timeRange = timeRange;
   d65c0:	a803      	add	r0, sp, #12
    item.increment = increment;
   d65c2:	950e      	str	r5, [sp, #56]	; 0x38
    item.timeRange = timeRange;
   d65c4:	f7ff ff3f 	bl	d6446 <_ZN14LocalTimeRangeaSERKS_>
    scheduleItems.push_back(item);
   d65c8:	a903      	add	r1, sp, #12
   d65ca:	f104 0020 	add.w	r0, r4, #32
   d65ce:	f7ff ffd9 	bl	d6584 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>
    LocalTimeScheduleItem item;
   d65d2:	a803      	add	r0, sp, #12
   d65d4:	f7ff f9de 	bl	d5994 <_ZN21LocalTimeScheduleItemD1Ev>
}
   d65d8:	4620      	mov	r0, r4
   d65da:	b017      	add	sp, #92	; 0x5c
   d65dc:	bd30      	pop	{r4, r5, pc}

000d65de <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:
	(*_Base::_M_get_pointer(__functor))(
   d65de:	6803      	ldr	r3, [r0, #0]
   d65e0:	780a      	ldrb	r2, [r1, #0]
    return result;
}

void PublishQueuePosix::publishCompleteCallback(bool succeeded, const char *eventName, const char *eventData) {
    publishComplete = true;
    publishSuccess = succeeded;
   d65e2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   d65e6:	2101      	movs	r1, #1
   d65e8:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   d65ec:	4770      	bx	lr

000d65ee <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d65ee:	2a02      	cmp	r2, #2
   d65f0:	d006      	beq.n	d6600 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d65f2:	2a03      	cmp	r2, #3
   d65f4:	d002      	beq.n	d65fc <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d65f6:	2a01      	cmp	r2, #1
   d65f8:	d100      	bne.n	d65fc <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d65fa:	6001      	str	r1, [r0, #0]
	}
   d65fc:	2000      	movs	r0, #0
   d65fe:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6600:	680b      	ldr	r3, [r1, #0]
   d6602:	6003      	str	r3, [r0, #0]
	}
   d6604:	e7fa      	b.n	d65fc <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d6606 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d6606:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d6608:	4603      	mov	r3, r0
	switch (__op)
   d660a:	d102      	bne.n	d6612 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d660c:	6001      	str	r1, [r0, #0]
      }
   d660e:	2000      	movs	r0, #0
   d6610:	4770      	bx	lr
	  switch (__op)
   d6612:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6614:	bf04      	itt	eq
   d6616:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d661a:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d661e:	e7f6      	b.n	d660e <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d6620 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6620:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d6622:	6842      	ldr	r2, [r0, #4]
   d6624:	4603      	mov	r3, r0
   d6626:	1054      	asrs	r4, r2, #1
   d6628:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d662c:	07d2      	lsls	r2, r2, #31
   d662e:	bf48      	it	mi
   d6630:	590a      	ldrmi	r2, [r1, r4]
   d6632:	681b      	ldr	r3, [r3, #0]
      }
   d6634:	f85d 4b04 	ldr.w	r4, [sp], #4
   d6638:	bf48      	it	mi
   d663a:	58d3      	ldrmi	r3, [r2, r3]
   d663c:	4718      	bx	r3

000d663e <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d663e:	b40e      	push	{r1, r2, r3}
   d6640:	b510      	push	{r4, lr}
   d6642:	b08d      	sub	sp, #52	; 0x34
   d6644:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d6646:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d6648:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d664c:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d664e:	2300      	movs	r3, #0
   d6650:	2020      	movs	r0, #32
   d6652:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d6656:	e9cd 4200 	strd	r4, r2, [sp]
   d665a:	2001      	movs	r0, #1
   d665c:	aa04      	add	r2, sp, #16
   d665e:	f002 fd4d 	bl	d90fc <log_message_v>
}
   d6662:	b00d      	add	sp, #52	; 0x34
   d6664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6668:	b003      	add	sp, #12
   d666a:	4770      	bx	lr

000d666c <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d666c:	b40e      	push	{r1, r2, r3}
   d666e:	b510      	push	{r4, lr}
   d6670:	b08d      	sub	sp, #52	; 0x34
   d6672:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d6674:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d6676:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d667a:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d667c:	2300      	movs	r3, #0
   d667e:	2020      	movs	r0, #32
   d6680:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d6684:	e9cd 4200 	strd	r4, r2, [sp]
   d6688:	2032      	movs	r0, #50	; 0x32
   d668a:	aa04      	add	r2, sp, #16
   d668c:	f002 fd36 	bl	d90fc <log_message_v>
}
   d6690:	b00d      	add	sp, #52	; 0x34
   d6692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6696:	b003      	add	sp, #12
   d6698:	4770      	bx	lr

000d669a <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   d669a:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   d669e:	4601      	mov	r1, r0
    if (stateHandler) {
   d66a0:	b11b      	cbz	r3, d66aa <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d66a2:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   d66a6:	30c0      	adds	r0, #192	; 0xc0
   d66a8:	4718      	bx	r3
}
   d66aa:	4770      	bx	lr

000d66ac <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d66ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   d66ae:	4d12      	ldr	r5, [pc, #72]	; (d66f8 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d66b0:	4608      	mov	r0, r1
        eventData = "";
   d66b2:	2a00      	cmp	r2, #0
   d66b4:	bf18      	it	ne
   d66b6:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d66b8:	460f      	mov	r7, r1
   d66ba:	461e      	mov	r6, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d66bc:	f005 ffbf 	bl	dc63e <strlen>
   d66c0:	2840      	cmp	r0, #64	; 0x40
   d66c2:	d817      	bhi.n	d66f4 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   d66c4:	4628      	mov	r0, r5
   d66c6:	f005 ffba 	bl	dc63e <strlen>
   d66ca:	f240 236e 	movw	r3, #622	; 0x26e
   d66ce:	4298      	cmp	r0, r3
   d66d0:	d810      	bhi.n	d66f4 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   d66d2:	3043      	adds	r0, #67	; 0x43
   d66d4:	f7fd fce1 	bl	d409a <_Znaj>
    if (event) {
   d66d8:	4604      	mov	r4, r0
   d66da:	b148      	cbz	r0, d66f0 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
        strcpy(event->eventName, eventName);
   d66dc:	4639      	mov	r1, r7
        event->flags = flags;
   d66de:	f800 6b01 	strb.w	r6, [r0], #1
        strcpy(event->eventName, eventName);
   d66e2:	f005 ff86 	bl	dc5f2 <strcpy>
        strcpy(event->eventData, eventData);
   d66e6:	4629      	mov	r1, r5
   d66e8:	f104 0042 	add.w	r0, r4, #66	; 0x42
   d66ec:	f005 ff81 	bl	dc5f2 <strcpy>
}
   d66f0:	4620      	mov	r0, r4
   d66f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   d66f4:	2400      	movs	r4, #0
   d66f6:	e7fb      	b.n	d66f0 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
   d66f8:	000dd568 	.word	0x000dd568

000d66fc <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d66fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d66fe:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d6700:	460a      	mov	r2, r1
   d6702:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d6704:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d6706:	1d01      	adds	r1, r0, #4
   d6708:	a808      	add	r0, sp, #32
   d670a:	f002 f831 	bl	d8770 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d670e:	9808      	ldr	r0, [sp, #32]
   d6710:	2100      	movs	r1, #0
   d6712:	f006 f89f 	bl	dc854 <open>
   d6716:	4605      	mov	r5, r0
   d6718:	a808      	add	r0, sp, #32
   d671a:	f004 fe6d 	bl	db3f8 <_ZN6StringD1Ev>
    if (fd) {
   d671e:	2d00      	cmp	r5, #0
   d6720:	d060      	beq.n	d67e4 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   d6722:	a908      	add	r1, sp, #32
   d6724:	4628      	mov	r0, r5
   d6726:	f006 f883 	bl	dc830 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   d672a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d672c:	492e      	ldr	r1, [pc, #184]	; (d67e8 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   d672e:	482f      	ldr	r0, [pc, #188]	; (d67ec <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d6730:	4632      	mov	r2, r6
   d6732:	f7ff ff84 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   d6736:	2200      	movs	r2, #0
   d6738:	4611      	mov	r1, r2
   d673a:	4628      	mov	r0, r5
   d673c:	f006 f880 	bl	dc840 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   d6740:	2208      	movs	r2, #8
   d6742:	a906      	add	r1, sp, #24
   d6744:	4628      	mov	r0, r5
   d6746:	f006 f899 	bl	dc87c <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   d674a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d674c:	2f4a      	cmp	r7, #74	; 0x4a
   d674e:	dd39      	ble.n	d67c4 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   d6750:	4b27      	ldr	r3, [pc, #156]	; (d67f0 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   d6752:	9a06      	ldr	r2, [sp, #24]
   d6754:	429a      	cmp	r2, r3
   d6756:	d135      	bne.n	d67c4 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   d6758:	4b26      	ldr	r3, [pc, #152]	; (d67f4 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   d675a:	9a07      	ldr	r2, [sp, #28]
   d675c:	429a      	cmp	r2, r3
   d675e:	d131      	bne.n	d67c4 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   d6760:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   d6764:	4610      	mov	r0, r2
   d6766:	9205      	str	r2, [sp, #20]
   d6768:	f7fd fc97 	bl	d409a <_Znaj>
            if (result) {
   d676c:	4604      	mov	r4, r0
   d676e:	b1c0      	cbz	r0, d67a2 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d6770:	4427      	add	r7, r4
                read(fd, result, eventSize);
   d6772:	4601      	mov	r1, r0
   d6774:	9a05      	ldr	r2, [sp, #20]
   d6776:	4628      	mov	r0, r5
   d6778:	f006 f880 	bl	dc87c <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d677c:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   d6780:	b9ab      	cbnz	r3, d67ae <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   d6782:	1c63      	adds	r3, r4, #1
   d6784:	4618      	mov	r0, r3
   d6786:	9305      	str	r3, [sp, #20]
   d6788:	f005 ff59 	bl	dc63e <strlen>
   d678c:	283f      	cmp	r0, #63	; 0x3f
   d678e:	9b05      	ldr	r3, [sp, #20]
   d6790:	d80d      	bhi.n	d67ae <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   d6792:	f104 0242 	add.w	r2, r4, #66	; 0x42
   d6796:	9200      	str	r2, [sp, #0]
   d6798:	4917      	ldr	r1, [pc, #92]	; (d67f8 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   d679a:	4814      	ldr	r0, [pc, #80]	; (d67ec <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d679c:	4632      	mov	r2, r6
   d679e:	f7ff ff4e 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   d67a2:	4628      	mov	r0, r5
   d67a4:	f006 f83c 	bl	dc820 <close>
}
   d67a8:	4620      	mov	r0, r4
   d67aa:	b01f      	add	sp, #124	; 0x7c
   d67ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   d67ae:	4913      	ldr	r1, [pc, #76]	; (d67fc <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   d67b0:	480e      	ldr	r0, [pc, #56]	; (d67ec <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d67b2:	4632      	mov	r2, r6
   d67b4:	f7ff ff43 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   d67b8:	2143      	movs	r1, #67	; 0x43
   d67ba:	4620      	mov	r0, r4
   d67bc:	f005 fa46 	bl	dbc4c <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   d67c0:	2400      	movs	r4, #0
   d67c2:	e7ee      	b.n	d67a2 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   d67c4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d67c8:	9302      	str	r3, [sp, #8]
   d67ca:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d67ce:	9301      	str	r3, [sp, #4]
   d67d0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d67d4:	9300      	str	r3, [sp, #0]
   d67d6:	490a      	ldr	r1, [pc, #40]	; (d6800 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   d67d8:	9b06      	ldr	r3, [sp, #24]
   d67da:	4804      	ldr	r0, [pc, #16]	; (d67ec <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d67dc:	4632      	mov	r2, r6
   d67de:	f7ff ff2e 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
   d67e2:	e7ed      	b.n	d67c0 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   d67e4:	462c      	mov	r4, r5
    return result;
   d67e6:	e7df      	b.n	d67a8 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   d67e8:	000dce20 	.word	0x000dce20
   d67ec:	2003e318 	.word	0x2003e318
   d67f0:	31b67663 	.word	0x31b67663
   d67f4:	00410801 	.word	0x00410801
   d67f8:	000dce34 	.word	0x000dce34
   d67fc:	000dce56 	.word	0x000dce56
   d6800:	000dce84 	.word	0x000dce84

000d6804 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   d6804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6808:	4680      	mov	r8, r0
   d680a:	4b28      	ldr	r3, [pc, #160]	; (d68ac <_ZN17PublishQueuePosixC1Ev+0xa8>)
   d680c:	f848 3b04 	str.w	r3, [r8], #4
   d6810:	4604      	mov	r4, r0
   d6812:	4640      	mov	r0, r8
   d6814:	f001 fec4 	bl	d85a0 <_ZN14SequentialFileC1Ev>
   d6818:	2202      	movs	r2, #2
   d681a:	2364      	movs	r3, #100	; 0x64
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
   d681c:	2500      	movs	r5, #0
   d681e:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d6822:	2308      	movs	r3, #8
   d6824:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d6826:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   d682a:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   d682e:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   d6832:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	  _M_start(), _M_finish()
   d6836:	67a5      	str	r5, [r4, #120]	; 0x78
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6838:	2020      	movs	r0, #32
   d683a:	f7fd fc2c 	bl	d4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d683e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d6840:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d6842:	3e01      	subs	r6, #1
   d6844:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d6846:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   d684a:	4607      	mov	r7, r0
   d684c:	f44f 7000 	mov.w	r0, #512	; 0x200
   d6850:	f7fd fc21 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d6854:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d6858:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   d685c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d6860:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d6864:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6868:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   d686c:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   d6870:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   d6874:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d6878:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d687c:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   d6880:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   d6884:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   d6888:	4909      	ldr	r1, [pc, #36]	; (d68b0 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   d688a:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   d688e:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   d6892:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   d6896:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   d689a:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   d689e:	4640      	mov	r0, r8
   d68a0:	f001 fec4 	bl	d862c <_ZN14SequentialFile11withDirPathEPKc>
}
   d68a4:	4620      	mov	r0, r4
   d68a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d68aa:	bf00      	nop
   d68ac:	000dd094 	.word	0x000dd094
   d68b0:	000dcec9 	.word	0x000dcec9

000d68b4 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   d68b4:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d68b6:	4c06      	ldr	r4, [pc, #24]	; (d68d0 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   d68b8:	6823      	ldr	r3, [r4, #0]
   d68ba:	b93b      	cbnz	r3, d68cc <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   d68bc:	20d0      	movs	r0, #208	; 0xd0
   d68be:	f7fd fbea 	bl	d4096 <_Znwj>
   d68c2:	4605      	mov	r5, r0
   d68c4:	b108      	cbz	r0, d68ca <_ZN17PublishQueuePosix8instanceEv+0x16>
   d68c6:	f7ff ff9d 	bl	d6804 <_ZN17PublishQueuePosixC1Ev>
   d68ca:	6025      	str	r5, [r4, #0]
}
   d68cc:	6820      	ldr	r0, [r4, #0]
   d68ce:	bd38      	pop	{r3, r4, r5, pc}
   d68d0:	2003e31c 	.word	0x2003e31c

000d68d4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d68d4:	b510      	push	{r4, lr}
   d68d6:	e9d1 2300 	ldrd	r2, r3, [r1]
   d68da:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d68dc:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d68de:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d68e0:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d68e2:	b90a      	cbnz	r2, d68e8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d68e4:	07d9      	lsls	r1, r3, #31
   d68e6:	d505      	bpl.n	d68f4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d68e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d68ec:	4b0f      	ldr	r3, [pc, #60]	; (d692c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d68ee:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d68f0:	4b0f      	ldr	r3, [pc, #60]	; (d6930 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d68f2:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68f4:	ab02      	add	r3, sp, #8
   d68f6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d68fa:	466a      	mov	r2, sp
   d68fc:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6900:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6904:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6908:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d690c:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d690e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6912:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6914:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6916:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6918:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d691a:	4618      	mov	r0, r3
   d691c:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d691e:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6920:	9105      	str	r1, [sp, #20]
   d6922:	f7fe f9f1 	bl	d4d08 <_ZNSt14_Function_baseD1Ev>
	}
   d6926:	4620      	mov	r0, r4
   d6928:	b006      	add	sp, #24
   d692a:	bd10      	pop	{r4, pc}
   d692c:	000d6621 	.word	0x000d6621
   d6930:	000d6607 	.word	0x000d6607

000d6934 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6934:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d6936:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d6938:	4604      	mov	r4, r0
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   d693a:	6f58      	ldr	r0, [r3, #116]	; 0x74
   d693c:	f002 f9d6 	bl	d8cec <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d6940:	4620      	mov	r0, r4
   d6942:	bd10      	pop	{r4, pc}

000d6944 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   d6944:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   d6946:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   d6948:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   d694a:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d694c:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   d694e:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   d6950:	d002      	beq.n	d6958 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(this->_M_impl,
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   d6952:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d6954:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   d6956:	bd10      	pop	{r4, pc}
	::operator delete(__p);
   d6958:	68c0      	ldr	r0, [r0, #12]
   d695a:	f7fd fba0 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d695e:	6963      	ldr	r3, [r4, #20]
   d6960:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d6962:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   d6964:	685b      	ldr	r3, [r3, #4]
   d6966:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d6968:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d696c:	6122      	str	r2, [r4, #16]
   d696e:	e7f1      	b.n	d6954 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>

000d6970 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   d6970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6974:	b087      	sub	sp, #28
   d6976:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6978:	9001      	str	r0, [sp, #4]
    void lock() { os_mutex_recursive_lock(mutex); };
   d697a:	6f40      	ldr	r0, [r0, #116]	; 0x74
                hdr.magic = FILE_MAGIC;
   d697c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d6a28 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                hdr.version = FILE_VERSION;
   d6980:	f8df a0a8 	ldr.w	sl, [pc, #168]	; d6a2c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
   d6984:	f002 f9aa 	bl	d8cdc <os_mutex_recursive_lock>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d6988:	f8df b0a4 	ldr.w	fp, [pc, #164]	; d6a30 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xc0>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d698c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   d6990:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d6994:	4293      	cmp	r3, r2
   d6996:	d105      	bne.n	d69a4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x34>
    WITH_LOCK(*this) {
   d6998:	a801      	add	r0, sp, #4
   d699a:	f7ff ffcb 	bl	d6934 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d699e:	b007      	add	sp, #28
   d69a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ramQueue.pop_front();
   d69a4:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   d69a8:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   d69ac:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   d69ae:	f7ff ffc9 	bl	d6944 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   d69b2:	4640      	mov	r0, r8
   d69b4:	f002 f8d0 	bl	d8b58 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d69b8:	2300      	movs	r3, #0
   d69ba:	4602      	mov	r2, r0
   d69bc:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   d69be:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d69c0:	a802      	add	r0, sp, #8
   d69c2:	f001 fed5 	bl	d8770 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d69c6:	9802      	ldr	r0, [sp, #8]
   d69c8:	f240 2102 	movw	r1, #514	; 0x202
   d69cc:	f005 ff42 	bl	dc854 <open>
   d69d0:	4605      	mov	r5, r0
   d69d2:	a802      	add	r0, sp, #8
   d69d4:	f004 fd10 	bl	db3f8 <_ZN6StringD1Ev>
            if (fd) {
   d69d8:	b1cd      	cbz	r5, d6a0e <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x9e>
                write(fd, &hdr, sizeof(hdr));
   d69da:	2208      	movs	r2, #8
   d69dc:	eb0d 0102 	add.w	r1, sp, r2
   d69e0:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   d69e2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
                write(fd, &hdr, sizeof(hdr));
   d69e6:	f005 ff5b 	bl	dc8a0 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   d69ea:	f107 0042 	add.w	r0, r7, #66	; 0x42
   d69ee:	f005 fe26 	bl	dc63e <strlen>
   d69f2:	4639      	mov	r1, r7
   d69f4:	f100 0243 	add.w	r2, r0, #67	; 0x43
   d69f8:	4628      	mov	r0, r5
   d69fa:	f005 ff51 	bl	dc8a0 <write>
                close(fd);
   d69fe:	4628      	mov	r0, r5
   d6a00:	f005 ff0e 	bl	dc820 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d6a04:	4807      	ldr	r0, [pc, #28]	; (d6a24 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>)
   d6a06:	4632      	mov	r2, r6
   d6a08:	4659      	mov	r1, fp
   d6a0a:	f7ff fe18 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   d6a0e:	4631      	mov	r1, r6
   d6a10:	4640      	mov	r0, r8
   d6a12:	f002 f8e1 	bl	d8bd8 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   d6a16:	2f00      	cmp	r7, #0
   d6a18:	d0b8      	beq.n	d698c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x1c>
   d6a1a:	2143      	movs	r1, #67	; 0x43
   d6a1c:	4638      	mov	r0, r7
   d6a1e:	f005 f915 	bl	dbc4c <_ZdlPvj>
   d6a22:	e7b1      	b.n	d6988 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   d6a24:	2003e318 	.word	0x2003e318
   d6a28:	31b67663 	.word	0x31b67663
   d6a2c:	00410801 	.word	0x00410801
   d6a30:	000dced7 	.word	0x000dced7

000d6a34 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:
PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d6a34:	2900      	cmp	r1, #0
   d6a36:	bf08      	it	eq
   d6a38:	f5b0 6f00 	cmpeq.w	r0, #2048	; 0x800
void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   d6a3c:	b538      	push	{r3, r4, r5, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d6a3e:	d005      	beq.n	d6a4c <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x18>
   d6a40:	2900      	cmp	r1, #0
   d6a42:	bf08      	it	eq
   d6a44:	2840      	cmpeq	r0, #64	; 0x40
   d6a46:	d10b      	bne.n	d6a60 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
   d6a48:	2a09      	cmp	r2, #9
   d6a4a:	d109      	bne.n	d6a60 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
        _log.trace("reset or disconnect event, save files to queue");
   d6a4c:	4905      	ldr	r1, [pc, #20]	; (d6a64 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   d6a4e:	4806      	ldr	r0, [pc, #24]	; (d6a68 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x34>)
   d6a50:	f7ff fdf5 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   d6a54:	f7ff ff2e 	bl	d68b4 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   d6a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   d6a5c:	f7ff bf88 	b.w	d6970 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   d6a60:	bd38      	pop	{r3, r4, r5, pc}
   d6a62:	bf00      	nop
   d6a64:	000dcef4 	.word	0x000dcef4
   d6a68:	2003e318 	.word	0x2003e318

000d6a6c <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   d6a6c:	b570      	push	{r4, r5, r6, lr}
   d6a6e:	b086      	sub	sp, #24
   d6a70:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6a72:	f002 fbd9 	bl	d9228 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   d6a76:	b948      	cbnz	r0, d6a8c <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   d6a78:	4b43      	ldr	r3, [pc, #268]	; (d6b88 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   d6a7a:	a902      	add	r1, sp, #8
   d6a7c:	e9cd 3002 	strd	r3, r0, [sp, #8]
   d6a80:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d6a84:	f7ff ff26 	bl	d68d4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6a88:	b006      	add	sp, #24
   d6a8a:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   d6a8c:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   d6a90:	b11d      	cbz	r5, d6a9a <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   d6a92:	2301      	movs	r3, #1
   d6a94:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   d6a98:	e7f6      	b.n	d6a88 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   d6a9a:	f002 f94f 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   d6a9e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   d6aa2:	1ac0      	subs	r0, r0, r3
   d6aa4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   d6aa8:	4298      	cmp	r0, r3
   d6aaa:	d3ed      	bcc.n	d6a88 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   d6aac:	1d26      	adds	r6, r4, #4
   d6aae:	4629      	mov	r1, r5
   d6ab0:	4630      	mov	r0, r6
   d6ab2:	f002 f85d 	bl	d8b70 <_ZN14SequentialFile16getFileFromQueueEb>
   d6ab6:	4601      	mov	r1, r0
   d6ab8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   d6abc:	2800      	cmp	r0, #0
   d6abe:	d052      	beq.n	d6b66 <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   d6ac0:	4620      	mov	r0, r4
   d6ac2:	f7ff fe1b 	bl	d66fc <_ZN17PublishQueuePosix13readQueueFileEi>
   d6ac6:	4605      	mov	r5, r0
   d6ac8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   d6acc:	2800      	cmp	r0, #0
   d6ace:	d035      	beq.n	d6b3c <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   d6ad0:	f002 f934 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   d6ad4:	ae02      	add	r6, sp, #8
   d6ad6:	2500      	movs	r5, #0
   d6ad8:	4b2c      	ldr	r3, [pc, #176]	; (d6b8c <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   d6ada:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   d6ade:	4631      	mov	r1, r6
   d6ae0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d6ae4:	9302      	str	r3, [sp, #8]
   d6ae6:	9503      	str	r5, [sp, #12]
   d6ae8:	f7ff fef4 	bl	d68d4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d6aec:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   d6af0:	f103 0242 	add.w	r2, r3, #66	; 0x42
   d6af4:	9200      	str	r2, [sp, #0]
   d6af6:	4926      	ldr	r1, [pc, #152]	; (d6b90 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   d6af8:	4a26      	ldr	r2, [pc, #152]	; (d6b94 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   d6afa:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d6afe:	42a8      	cmp	r0, r5
   d6b00:	bf08      	it	eq
   d6b02:	460a      	moveq	r2, r1
   d6b04:	3301      	adds	r3, #1
   d6b06:	4924      	ldr	r1, [pc, #144]	; (d6b98 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   d6b08:	4824      	ldr	r0, [pc, #144]	; (d6b9c <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   d6b0a:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d6b0e:	f7ff fd96 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   d6b12:	f7fe f93d 	bl	d4d90 <_ZN19BackgroundPublishRK8instanceEv>
   d6b16:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   d6b1a:	4b21      	ldr	r3, [pc, #132]	; (d6ba0 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   d6b1c:	9305      	str	r3, [sp, #20]
   d6b1e:	e9cd 6500 	strd	r6, r5, [sp]
   d6b22:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   d6b24:	4b1f      	ldr	r3, [pc, #124]	; (d6ba4 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6b26:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d6b28:	9304      	str	r3, [sp, #16]
   d6b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6b2e:	3242      	adds	r2, #66	; 0x42
   d6b30:	f7fe fa78 	bl	d5024 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   d6b34:	4630      	mov	r0, r6
   d6b36:	f7fe f8e7 	bl	d4d08 <_ZNSt14_Function_baseD1Ev>
   d6b3a:	e7a5      	b.n	d6a88 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   d6b3c:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   d6b40:	4919      	ldr	r1, [pc, #100]	; (d6ba8 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   d6b42:	4816      	ldr	r0, [pc, #88]	; (d6b9c <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   d6b44:	f7fd fafe 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   d6b48:	2101      	movs	r1, #1
   d6b4a:	4630      	mov	r0, r6
   d6b4c:	f002 f810 	bl	d8b70 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   d6b50:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   d6b54:	462a      	mov	r2, r5
   d6b56:	4630      	mov	r0, r6
   d6b58:	f001 fe46 	bl	d87e8 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   d6b5c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   d6b60:	2b00      	cmp	r3, #0
   d6b62:	d1b5      	bne.n	d6ad0 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   d6b64:	e795      	b.n	d6a92 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   d6b66:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   d6b6a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d6b6e:	429a      	cmp	r2, r3
   d6b70:	d007      	beq.n	d6b82 <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   d6b72:	681b      	ldr	r3, [r3, #0]
   d6b74:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   d6b78:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d6b7c:	f7ff fee2 	bl	d6944 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   d6b80:	e7ec      	b.n	d6b5c <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   d6b82:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   d6b86:	e784      	b.n	d6a92 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   d6b88:	000d6c0d 	.word	0x000d6c0d
   d6b8c:	000d6f65 	.word	0x000d6f65
   d6b90:	000dcf23 	.word	0x000dcf23
   d6b94:	000dcb17 	.word	0x000dcb17
   d6b98:	000dcf44 	.word	0x000dcf44
   d6b9c:	2003e318 	.word	0x2003e318
   d6ba0:	000d65df 	.word	0x000d65df
   d6ba4:	000d65ef 	.word	0x000d65ef
   d6ba8:	000dcf27 	.word	0x000dcf27

000d6bac <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d6bac:	68c3      	ldr	r3, [r0, #12]
   d6bae:	68ca      	ldr	r2, [r1, #12]
   d6bb0:	1a9b      	subs	r3, r3, r2
   d6bb2:	109b      	asrs	r3, r3, #2
   d6bb4:	1e5a      	subs	r2, r3, #1
   d6bb6:	e9d0 3000 	ldrd	r3, r0, [r0]
   d6bba:	1a1b      	subs	r3, r3, r0
   d6bbc:	109b      	asrs	r3, r3, #2
   d6bbe:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d6bc2:	6888      	ldr	r0, [r1, #8]
   d6bc4:	680a      	ldr	r2, [r1, #0]
   d6bc6:	1a80      	subs	r0, r0, r2
    }
   d6bc8:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d6bcc:	4770      	bx	lr

000d6bce <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   d6bce:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6bd0:	4605      	mov	r5, r0
   d6bd2:	9001      	str	r0, [sp, #4]
   d6bd4:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d6bd6:	f002 f881 	bl	d8cdc <os_mutex_recursive_lock>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d6bda:	f105 0180 	add.w	r1, r5, #128	; 0x80
   d6bde:	f105 0090 	add.w	r0, r5, #144	; 0x90
   d6be2:	f7ff ffe3 	bl	d6bac <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (result == 0) {
   d6be6:	4604      	mov	r4, r0
   d6be8:	b950      	cbnz	r0, d6c00 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
            result = fileQueue.getQueueLen();
   d6bea:	1d28      	adds	r0, r5, #4
   d6bec:	f002 f80e 	bl	d8c0c <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   d6bf0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   d6bf4:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   d6bf6:	b11b      	cbz	r3, d6c00 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
   d6bf8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   d6bfc:	b903      	cbnz	r3, d6c00 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
                result++;
   d6bfe:	3401      	adds	r4, #1
    WITH_LOCK(*this) {
   d6c00:	a801      	add	r0, sp, #4
   d6c02:	f7ff fe97 	bl	d6934 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d6c06:	4620      	mov	r0, r4
   d6c08:	b003      	add	sp, #12
   d6c0a:	bd30      	pop	{r4, r5, pc}

000d6c0c <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   d6c0c:	b513      	push	{r0, r1, r4, lr}
   d6c0e:	4604      	mov	r4, r0
   d6c10:	f002 fb0a 	bl	d9228 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d6c14:	b190      	cbz	r0, d6c3c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   d6c16:	f002 f891 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   d6c1a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   d6c1e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   d6c22:	4b0d      	ldr	r3, [pc, #52]	; (d6c58 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   d6c24:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   d6c28:	9300      	str	r3, [sp, #0]
   d6c2a:	4669      	mov	r1, sp
   d6c2c:	2300      	movs	r3, #0
   d6c2e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d6c32:	9301      	str	r3, [sp, #4]
   d6c34:	f7ff fe4e 	bl	d68d4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6c38:	b002      	add	sp, #8
   d6c3a:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   d6c3c:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   d6c40:	b11b      	cbz	r3, d6c4a <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   d6c42:	2301      	movs	r3, #1
   d6c44:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   d6c48:	e7f6      	b.n	d6c38 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   d6c4a:	4620      	mov	r0, r4
   d6c4c:	f7ff ffbf 	bl	d6bce <_ZN17PublishQueuePosix12getNumEventsEv>
   d6c50:	2800      	cmp	r0, #0
   d6c52:	d0f6      	beq.n	d6c42 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   d6c54:	e7f0      	b.n	d6c38 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   d6c56:	bf00      	nop
   d6c58:	000d6a6d 	.word	0x000d6a6d

000d6c5c <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   d6c5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6c60:	4604      	mov	r4, r0
   d6c62:	9001      	str	r0, [sp, #4]
   d6c64:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d6c66:	f002 f839 	bl	d8cdc <os_mutex_recursive_lock>
   d6c6a:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d6c6e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d6c72:	f7ff ff9b 	bl	d6bac <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (ramQueue.size() > ramQueueSize) {
   d6c76:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d6c78:	4283      	cmp	r3, r0
   d6c7a:	d202      	bcs.n	d6c82 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
            writeQueueToFiles();
   d6c7c:	4620      	mov	r0, r4
   d6c7e:	f7ff fe77 	bl	d6970 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   d6c82:	f8df 8048 	ldr.w	r8, [pc, #72]	; d6ccc <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x70>
   d6c86:	4f10      	ldr	r7, [pc, #64]	; (d6cc8 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x6c>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   d6c88:	1d26      	adds	r6, r4, #4
   d6c8a:	4630      	mov	r0, r6
   d6c8c:	f001 ffbe 	bl	d8c0c <_ZNK14SequentialFile11getQueueLenEv>
   d6c90:	6f23      	ldr	r3, [r4, #112]	; 0x70
   d6c92:	4298      	cmp	r0, r3
   d6c94:	dc05      	bgt.n	d6ca2 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x46>
    WITH_LOCK(*this) {
   d6c96:	a801      	add	r0, sp, #4
   d6c98:	f7ff fe4c 	bl	d6934 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d6c9c:	b002      	add	sp, #8
   d6c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            int fileNum = fileQueue.getFileFromQueue(true);
   d6ca2:	2101      	movs	r1, #1
   d6ca4:	4630      	mov	r0, r6
   d6ca6:	f001 ff63 	bl	d8b70 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   d6caa:	4605      	mov	r5, r0
   d6cac:	2800      	cmp	r0, #0
   d6cae:	d0ec      	beq.n	d6c8a <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
                fileQueue.removeFileNum(fileNum, false);
   d6cb0:	4601      	mov	r1, r0
   d6cb2:	2200      	movs	r2, #0
   d6cb4:	4630      	mov	r0, r6
   d6cb6:	f001 fd97 	bl	d87e8 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   d6cba:	462a      	mov	r2, r5
   d6cbc:	4641      	mov	r1, r8
   d6cbe:	4638      	mov	r0, r7
   d6cc0:	f7fd fa40 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
   d6cc4:	e7e1      	b.n	d6c8a <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
   d6cc6:	bf00      	nop
   d6cc8:	2003e318 	.word	0x2003e318
   d6ccc:	000dcf63 	.word	0x000dcf63

000d6cd0 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   d6cd0:	b513      	push	{r0, r1, r4, lr}
   d6cd2:	4604      	mov	r4, r0
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   d6cd4:	2000      	movs	r0, #0
   d6cd6:	f002 fa6b 	bl	d91b0 <system_thread_get_state>
   d6cda:	2801      	cmp	r0, #1
   d6cdc:	d005      	beq.n	d6cea <_ZN17PublishQueuePosix5setupEv+0x1a>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   d6cde:	4912      	ldr	r1, [pc, #72]	; (d6d28 <_ZN17PublishQueuePosix5setupEv+0x58>)
   d6ce0:	4812      	ldr	r0, [pc, #72]	; (d6d2c <_ZN17PublishQueuePosix5setupEv+0x5c>)
   d6ce2:	f7ff fcc3 	bl	d666c <_ZNK5spark6Logger5errorEPKcz>
}
   d6ce6:	b002      	add	sp, #8
   d6ce8:	bd10      	pop	{r4, pc}
    os_mutex_recursive_create(&mutex);
   d6cea:	f104 0074 	add.w	r0, r4, #116	; 0x74
   d6cee:	f001 ffe5 	bl	d8cbc <os_mutex_recursive_create>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d6cf2:	4a0f      	ldr	r2, [pc, #60]	; (d6d30 <_ZN17PublishQueuePosix5setupEv+0x60>)
   d6cf4:	2300      	movs	r3, #0
   d6cf6:	2100      	movs	r1, #0
   d6cf8:	f44f 6004 	mov.w	r0, #2112	; 0x840
   d6cfc:	f002 fa38 	bl	d9170 <system_subscribe_event>
    BackgroundPublishRK::instance().start();
   d6d00:	f7fe f846 	bl	d4d90 <_ZN19BackgroundPublishRK8instanceEv>
   d6d04:	f7fe f968 	bl	d4fd8 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   d6d08:	1d20      	adds	r0, r4, #4
   d6d0a:	f001 fead 	bl	d8a68 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   d6d0e:	4620      	mov	r0, r4
   d6d10:	f7ff ffa4 	bl	d6c5c <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   d6d14:	4b07      	ldr	r3, [pc, #28]	; (d6d34 <_ZN17PublishQueuePosix5setupEv+0x64>)
   d6d16:	9300      	str	r3, [sp, #0]
   d6d18:	4669      	mov	r1, sp
   d6d1a:	2300      	movs	r3, #0
   d6d1c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d6d20:	9301      	str	r3, [sp, #4]
   d6d22:	f7ff fdd7 	bl	d68d4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d6d26:	e7de      	b.n	d6ce6 <_ZN17PublishQueuePosix5setupEv+0x16>
   d6d28:	000dcf76 	.word	0x000dcf76
   d6d2c:	2003e318 	.word	0x2003e318
   d6d30:	000d6a35 	.word	0x000d6a35
   d6d34:	000d6c0d 	.word	0x000d6c0d

000d6d38 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d6d38:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d6d3a:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d6d3c:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d6d3e:	b163      	cbz	r3, d6d5a <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d6d40:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d6d42:	6945      	ldr	r5, [r0, #20]
   d6d44:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d6d46:	42ae      	cmp	r6, r5
   d6d48:	d904      	bls.n	d6d54 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x1c>
   d6d4a:	f855 0b04 	ldr.w	r0, [r5], #4
   d6d4e:	f7fd f9a6 	bl	d409e <_ZdlPv>
   d6d52:	e7f8      	b.n	d6d46 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   d6d54:	6820      	ldr	r0, [r4, #0]
   d6d56:	f7fd f9a2 	bl	d409e <_ZdlPv>
    }
   d6d5a:	4620      	mov	r0, r4
   d6d5c:	bd70      	pop	{r4, r5, r6, pc}

000d6d5e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   d6d5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6d62:	4606      	mov	r6, r0
   d6d64:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d6d66:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d6d68:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d6d6a:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d6d6c:	1a47      	subs	r7, r0, r1
   d6d6e:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d6d72:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d6d74:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   d6d78:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d6d7a:	d927      	bls.n	d6dcc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   d6d7c:	1b5d      	subs	r5, r3, r5
   d6d7e:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d6d80:	6832      	ldr	r2, [r6, #0]
   d6d82:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d6d84:	b10c      	cbz	r4, d6d8a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   d6d86:	ea4f 0489 	mov.w	r4, r9, lsl #2
   d6d8a:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d6d8c:	4414      	add	r4, r2
   d6d8e:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d6d90:	42a1      	cmp	r1, r4
   d6d92:	eba3 0201 	sub.w	r2, r3, r1
   d6d96:	d913      	bls.n	d6dc0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   d6d98:	4299      	cmp	r1, r3
   d6d9a:	d002      	beq.n	d6da2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d6d9c:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d6d9e:	f005 fb8d 	bl	dc4bc <memmove>
	_M_node = __new_node;
   d6da2:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   d6da4:	6823      	ldr	r3, [r4, #0]
   d6da6:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d6da8:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d6dac:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d6dae:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   d6db0:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   d6db2:	59e3      	ldr	r3, [r4, r7]
   d6db4:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d6db6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d6dba:	6233      	str	r3, [r6, #32]
    }
   d6dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d6dc0:	4299      	cmp	r1, r3
   d6dc2:	d0ee      	beq.n	d6da2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d6dc4:	1d38      	adds	r0, r7, #4
   d6dc6:	1a80      	subs	r0, r0, r2
   d6dc8:	4420      	add	r0, r4
   d6dca:	e7e8      	b.n	d6d9e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d6dcc:	f103 0802 	add.w	r8, r3, #2
   d6dd0:	454b      	cmp	r3, r9
   d6dd2:	bf2c      	ite	cs
   d6dd4:	4498      	addcs	r8, r3
   d6dd6:	44c8      	addcc	r8, r9
	if (__n > this->max_size())
   d6dd8:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   d6ddc:	d301      	bcc.n	d6de2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   d6dde:	f004 ff3b 	bl	dbc58 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6de2:	ea4f 0088 	mov.w	r0, r8, lsl #2
   d6de6:	f7fd f956 	bl	d4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d6dea:	eba8 0505 	sub.w	r5, r8, r5
   d6dee:	086d      	lsrs	r5, r5, #1
   d6df0:	4682      	mov	sl, r0
   d6df2:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d6df4:	b10c      	cbz	r4, d6dfa <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   d6df6:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   d6dfa:	6a72      	ldr	r2, [r6, #36]	; 0x24
   d6dfc:	6971      	ldr	r1, [r6, #20]
   d6dfe:	3204      	adds	r2, #4
	                 + (__add_at_front ? __nodes_to_add : 0);
   d6e00:	442c      	add	r4, r5
	  if (_Num)
   d6e02:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d6e04:	4454      	add	r4, sl
   d6e06:	d003      	beq.n	d6e10 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d6e08:	1a52      	subs	r2, r2, r1
   d6e0a:	4620      	mov	r0, r4
   d6e0c:	f005 fb56 	bl	dc4bc <memmove>
	::operator delete(__p);
   d6e10:	6830      	ldr	r0, [r6, #0]
   d6e12:	f7fd f944 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d6e16:	e9c6 a800 	strd	sl, r8, [r6]
   d6e1a:	e7c2      	b.n	d6da2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>

000d6e1c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6e20:	b086      	sub	sp, #24
   d6e22:	4604      	mov	r4, r0
   d6e24:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   d6e28:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d6e2c:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6e2e:	460f      	mov	r7, r1
   d6e30:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d6e32:	f7ff fc3b 	bl	d66ac <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   d6e36:	4605      	mov	r5, r0
   d6e38:	2800      	cmp	r0, #0
   d6e3a:	d042      	beq.n	d6ec2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xa6>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   d6e3c:	4b43      	ldr	r3, [pc, #268]	; (d6f4c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   d6e3e:	4944      	ldr	r1, [pc, #272]	; (d6f50 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x134>)
   d6e40:	4844      	ldr	r0, [pc, #272]	; (d6f54 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d6e42:	2e00      	cmp	r6, #0
   d6e44:	bf18      	it	ne
   d6e46:	4633      	movne	r3, r6
   d6e48:	463a      	mov	r2, r7
   d6e4a:	f7ff fbf8 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
   d6e4e:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d6e50:	9405      	str	r4, [sp, #20]
   d6e52:	f001 ff43 	bl	d8cdc <os_mutex_recursive_lock>
	    != this->_M_impl._M_finish._M_last - 1)
   d6e56:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   d6e5a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   d6e5e:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   d6e60:	4293      	cmp	r3, r2
   d6e62:	f104 0878 	add.w	r8, r4, #120	; 0x78
   d6e66:	f104 0690 	add.w	r6, r4, #144	; 0x90
   d6e6a:	f104 0780 	add.w	r7, r4, #128	; 0x80
   d6e6e:	d02b      	beq.n	d6ec8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xac>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6e70:	b103      	cbz	r3, d6e74 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x58>
   d6e72:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d6e74:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   d6e78:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   d6e7a:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d6e7c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   d6e80:	4628      	mov	r0, r5
   d6e82:	f001 fec3 	bl	d8c0c <_ZNK14SequentialFile11getQueueLenEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d6e86:	4639      	mov	r1, r7
   d6e88:	9003      	str	r0, [sp, #12]
   d6e8a:	4630      	mov	r0, r6
   d6e8c:	f7ff fe8e 	bl	d6bac <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
   d6e90:	9002      	str	r0, [sp, #8]
   d6e92:	f002 f9c9 	bl	d9228 <spark_cloud_flag_connected>
   d6e96:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   d6e9a:	9000      	str	r0, [sp, #0]
   d6e9c:	492e      	ldr	r1, [pc, #184]	; (d6f58 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x13c>)
   d6e9e:	482d      	ldr	r0, [pc, #180]	; (d6f54 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d6ea0:	f7ff fbcd 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d6ea4:	4628      	mov	r0, r5
   d6ea6:	f001 feb1 	bl	d8c0c <_ZNK14SequentialFile11getQueueLenEv>
   d6eaa:	2800      	cmp	r0, #0
   d6eac:	d03e      	beq.n	d6f2c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x110>
            writeQueueToFiles();
   d6eae:	4620      	mov	r0, r4
   d6eb0:	f7ff fd5e 	bl	d6970 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   d6eb4:	4620      	mov	r0, r4
   d6eb6:	f7ff fed1 	bl	d6c5c <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    WITH_LOCK(*this) {
   d6eba:	a805      	add	r0, sp, #20
   d6ebc:	f7ff fd3a 	bl	d6934 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
    return true;
   d6ec0:	2001      	movs	r0, #1
}
   d6ec2:	b006      	add	sp, #24
   d6ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6ec8:	4639      	mov	r1, r7
   d6eca:	4630      	mov	r0, r6
   d6ecc:	f7ff fe6e 	bl	d6bac <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d6ed0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d6ed4:	4298      	cmp	r0, r3
   d6ed6:	d102      	bne.n	d6ede <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xc2>
	  __throw_length_error(
   d6ed8:	4820      	ldr	r0, [pc, #128]	; (d6f5c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x140>)
   d6eda:	f004 fec0 	bl	dbc5e <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d6ede:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d6ee2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   d6ee4:	1a9a      	subs	r2, r3, r2
   d6ee6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   d6ee8:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d6eec:	2b01      	cmp	r3, #1
   d6eee:	d804      	bhi.n	d6efa <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xde>
	  _M_reallocate_map(__nodes_to_add, false);
   d6ef0:	2200      	movs	r2, #0
   d6ef2:	2101      	movs	r1, #1
   d6ef4:	4640      	mov	r0, r8
   d6ef6:	f7ff ff32 	bl	d6d5e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6efa:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d6efe:	f8d4 809c 	ldr.w	r8, [r4, #156]	; 0x9c
   d6f02:	f7fd f8c8 	bl	d4096 <_Znwj>
   d6f06:	f8c8 0004 	str.w	r0, [r8, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d6f0a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6f0e:	b103      	cbz	r3, d6f12 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf6>
   d6f10:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d6f12:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d6f16:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d6f18:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   d6f1c:	685b      	ldr	r3, [r3, #4]
   d6f1e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   d6f22:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d6f26:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   d6f2a:	e7a6      	b.n	d6e7a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x5e>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d6f2c:	4639      	mov	r1, r7
   d6f2e:	4630      	mov	r0, r6
   d6f30:	f7ff fe3c 	bl	d6bac <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d6f34:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d6f36:	4283      	cmp	r3, r0
   d6f38:	d3b9      	bcc.n	d6eae <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
   d6f3a:	f002 f975 	bl	d9228 <spark_cloud_flag_connected>
   d6f3e:	2800      	cmp	r0, #0
   d6f40:	d0b5      	beq.n	d6eae <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
            _log.trace("queued to ramQueue");
   d6f42:	4907      	ldr	r1, [pc, #28]	; (d6f60 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x144>)
   d6f44:	4803      	ldr	r0, [pc, #12]	; (d6f54 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d6f46:	f7ff fb7a 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
   d6f4a:	e7b3      	b.n	d6eb4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
   d6f4c:	000dd568 	.word	0x000dd568
   d6f50:	000dcf99 	.word	0x000dcf99
   d6f54:	2003e318 	.word	0x2003e318
   d6f58:	000dcff1 	.word	0x000dcff1
   d6f5c:	000dcfc1 	.word	0x000dcfc1
   d6f60:	000dd01d 	.word	0x000dd01d

000d6f64 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   d6f64:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   d6f66:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   d6f6a:	4604      	mov	r4, r0
    if (!publishComplete) {
   d6f6c:	2b00      	cmp	r3, #0
   d6f6e:	d041      	beq.n	d6ff4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   d6f70:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
   d6f74:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
   d6f78:	2b00      	cmp	r3, #0
   d6f7a:	d03d      	beq.n	d6ff8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   d6f7c:	4952      	ldr	r1, [pc, #328]	; (d70c8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   d6f7e:	4853      	ldr	r0, [pc, #332]	; (d70cc <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d6f80:	f7ff fb5d 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   d6f84:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d6f88:	b1d3      	cbz	r3, d6fc0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   d6f8a:	1d26      	adds	r6, r4, #4
   d6f8c:	2100      	movs	r1, #0
   d6f8e:	4630      	mov	r0, r6
   d6f90:	f001 fdee 	bl	d8b70 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   d6f94:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d6f98:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   d6f9a:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   d6f9c:	d10d      	bne.n	d6fba <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   d6f9e:	2101      	movs	r1, #1
   d6fa0:	4630      	mov	r0, r6
   d6fa2:	f001 fde5 	bl	d8b70 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   d6fa6:	2200      	movs	r2, #0
   d6fa8:	4629      	mov	r1, r5
   d6faa:	4630      	mov	r0, r6
   d6fac:	f001 fc1c 	bl	d87e8 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   d6fb0:	4947      	ldr	r1, [pc, #284]	; (d70d0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   d6fb2:	4846      	ldr	r0, [pc, #280]	; (d70cc <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d6fb4:	462a      	mov	r2, r5
   d6fb6:	f7ff fb42 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   d6fba:	2300      	movs	r3, #0
   d6fbc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   d6fc0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d6fc4:	b110      	cbz	r0, d6fcc <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   d6fc6:	2143      	movs	r1, #67	; 0x43
   d6fc8:	f004 fe40 	bl	dbc4c <_ZdlPvj>
        curEvent = NULL;
   d6fcc:	2300      	movs	r3, #0
   d6fce:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   d6fd2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   d6fd6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   d6fda:	4b3e      	ldr	r3, [pc, #248]	; (d70d4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   d6fdc:	9300      	str	r3, [sp, #0]
   d6fde:	4669      	mov	r1, sp
   d6fe0:	2300      	movs	r3, #0
   d6fe2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d6fe6:	9301      	str	r3, [sp, #4]
   d6fe8:	f7ff fc74 	bl	d68d4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d6fec:	f001 fea6 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d6ff0:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   d6ff4:	b002      	add	sp, #8
   d6ff6:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   d6ff8:	4937      	ldr	r1, [pc, #220]	; (d70d8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   d6ffa:	4834      	ldr	r0, [pc, #208]	; (d70cc <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d6ffc:	f7ff fb1f 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   d7000:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   d7004:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   d7008:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d700c:	b14b      	cbz	r3, d7022 <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   d700e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d7012:	b110      	cbz	r0, d701a <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   d7014:	2143      	movs	r1, #67	; 0x43
   d7016:	f004 fe19 	bl	dbc4c <_ZdlPvj>
            curEvent = NULL;
   d701a:	2300      	movs	r3, #0
   d701c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   d7020:	e7db      	b.n	d6fda <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   d7022:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d7024:	9400      	str	r4, [sp, #0]
   d7026:	f001 fe59 	bl	d8cdc <os_mutex_recursive_lock>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   d702a:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   d702e:	4293      	cmp	r3, r2
   d7030:	d013      	beq.n	d705a <_ZN17PublishQueuePosix16statePublishWaitEv+0xf6>
	    _Alloc_traits::construct(this->_M_impl,
   d7032:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   d7036:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   d703a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   d703e:	3b04      	subs	r3, #4
   d7040:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            WITH_LOCK(*this) {
   d7044:	4668      	mov	r0, sp
   d7046:	f7ff fc75 	bl	d6934 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
            _log.trace("writing to files after publish failure");
   d704a:	4924      	ldr	r1, [pc, #144]	; (d70dc <_ZN17PublishQueuePosix16statePublishWaitEv+0x178>)
   d704c:	481f      	ldr	r0, [pc, #124]	; (d70cc <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d704e:	f7ff faf6 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   d7052:	4620      	mov	r0, r4
   d7054:	f7ff fc8c 	bl	d6970 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   d7058:	e7bf      	b.n	d6fda <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d705a:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d705e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d7062:	f7ff fda3 	bl	d6bac <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d7066:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d706a:	4298      	cmp	r0, r3
   d706c:	f104 0578 	add.w	r5, r4, #120	; 0x78
   d7070:	d102      	bne.n	d7078 <_ZN17PublishQueuePosix16statePublishWaitEv+0x114>
	  __throw_length_error(
   d7072:	481b      	ldr	r0, [pc, #108]	; (d70e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x17c>)
   d7074:	f004 fdf3 	bl	dbc5e <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   d7078:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   d707c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   d707e:	429a      	cmp	r2, r3
   d7080:	d104      	bne.n	d708c <_ZN17PublishQueuePosix16statePublishWaitEv+0x128>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   d7082:	2201      	movs	r2, #1
   d7084:	4611      	mov	r1, r2
   d7086:	4628      	mov	r0, r5
   d7088:	f7ff fe69 	bl	d6d5e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d708c:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   d7090:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   d7094:	f7fc ffff 	bl	d4096 <_Znwj>
   d7098:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   d709c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   d70a0:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   d70a2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   d70a6:	f853 3c04 	ldr.w	r3, [r3, #-4]
   d70aa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   d70ae:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d70b2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   d70b6:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   d70ba:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	    _Alloc_traits::construct(this->_M_impl,
   d70be:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d70c2:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   d70c6:	e7bd      	b.n	d7044 <_ZN17PublishQueuePosix16statePublishWaitEv+0xe0>
   d70c8:	000dd030 	.word	0x000dd030
   d70cc:	2003e318 	.word	0x2003e318
   d70d0:	000dd043 	.word	0x000dd043
   d70d4:	000d6a6d 	.word	0x000d6a6d
   d70d8:	000dd053 	.word	0x000dd053
   d70dc:	000dd065 	.word	0x000dd065
   d70e0:	000dcfc1 	.word	0x000dcfc1

000d70e4 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
        name_(name) {
   d70e4:	4b01      	ldr	r3, [pc, #4]	; (d70ec <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   d70e6:	4a02      	ldr	r2, [pc, #8]	; (d70f0 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   d70e8:	601a      	str	r2, [r3, #0]
}
   d70ea:	4770      	bx	lr
   d70ec:	2003e318 	.word	0x2003e318
   d70f0:	000dcb07 	.word	0x000dcb07

000d70f4 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d70f4:	b510      	push	{r4, lr}
   d70f6:	4b07      	ldr	r3, [pc, #28]	; (d7114 <_ZN17PublishQueuePosixD1Ev+0x20>)
   d70f8:	4604      	mov	r4, r0
   d70fa:	f840 3bc0 	str.w	r3, [r0], #192
   d70fe:	f7fd fe03 	bl	d4d08 <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d7102:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d7106:	f7ff fe17 	bl	d6d38 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   d710a:	1d20      	adds	r0, r4, #4
   d710c:	f001 fbea 	bl	d88e4 <_ZN14SequentialFileD1Ev>
}
   d7110:	4620      	mov	r0, r4
   d7112:	bd10      	pop	{r4, pc}
   d7114:	000dd094 	.word	0x000dd094

000d7118 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d7118:	b510      	push	{r4, lr}
   d711a:	4604      	mov	r4, r0
}
   d711c:	f7ff ffea 	bl	d70f4 <_ZN17PublishQueuePosixD1Ev>
   d7120:	4620      	mov	r0, r4
   d7122:	21d0      	movs	r1, #208	; 0xd0
   d7124:	f004 fd92 	bl	dbc4c <_ZdlPvj>
   d7128:	4620      	mov	r0, r4
   d712a:	bd10      	pop	{r4, pc}

000d712c <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   d712c:	6001      	str	r1, [r0, #0]
   d712e:	7102      	strb	r2, [r0, #4]
{
}
   d7130:	4770      	bx	lr

000d7132 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   d7132:	6800      	ldr	r0, [r0, #0]
   d7134:	6803      	ldr	r3, [r0, #0]
   d7136:	68db      	ldr	r3, [r3, #12]
   d7138:	4718      	bx	r3

000d713a <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   d713a:	6800      	ldr	r0, [r0, #0]
   d713c:	6803      	ldr	r3, [r0, #0]
   d713e:	6a1b      	ldr	r3, [r3, #32]
   d7140:	4718      	bx	r3

000d7142 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   d7142:	6800      	ldr	r0, [r0, #0]
   d7144:	6803      	ldr	r3, [r0, #0]
   d7146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7148:	4718      	bx	r3

000d714a <_ZN10RHDatagram11setHeaderToEh>:
    return _thisAddress;
}

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   d714a:	6800      	ldr	r0, [r0, #0]
   d714c:	6803      	ldr	r3, [r0, #0]
   d714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7150:	4718      	bx	r3

000d7152 <_ZN10RHDatagram6sendtoEPhhh>:
{
   d7152:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7154:	4605      	mov	r5, r0
   d7156:	460c      	mov	r4, r1
    setHeaderTo(address);
   d7158:	4619      	mov	r1, r3
{
   d715a:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   d715c:	f7ff fff5 	bl	d714a <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   d7160:	6828      	ldr	r0, [r5, #0]
   d7162:	9a01      	ldr	r2, [sp, #4]
   d7164:	6803      	ldr	r3, [r0, #0]
   d7166:	695b      	ldr	r3, [r3, #20]
   d7168:	4621      	mov	r1, r4
}
   d716a:	b003      	add	sp, #12
   d716c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   d7170:	4718      	bx	r3

000d7172 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   d7172:	6800      	ldr	r0, [r0, #0]
   d7174:	6803      	ldr	r3, [r0, #0]
   d7176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7178:	4718      	bx	r3

000d717a <_ZN10RHDatagram14setThisAddressEh>:
{
   d717a:	b538      	push	{r3, r4, r5, lr}
   d717c:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   d717e:	6800      	ldr	r0, [r0, #0]
   d7180:	6803      	ldr	r3, [r0, #0]
{
   d7182:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   d7184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7186:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   d7188:	4629      	mov	r1, r5
   d718a:	4620      	mov	r0, r4
   d718c:	f7ff fff1 	bl	d7172 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   d7190:	7125      	strb	r5, [r4, #4]
}
   d7192:	bd38      	pop	{r3, r4, r5, pc}

000d7194 <_ZN10RHDatagram4initEv>:
{
   d7194:	b538      	push	{r3, r4, r5, lr}
   d7196:	4604      	mov	r4, r0
    bool ret = _driver.init();
   d7198:	6800      	ldr	r0, [r0, #0]
   d719a:	6803      	ldr	r3, [r0, #0]
   d719c:	689b      	ldr	r3, [r3, #8]
   d719e:	4798      	blx	r3
    if (ret)
   d71a0:	4605      	mov	r5, r0
   d71a2:	b118      	cbz	r0, d71ac <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   d71a4:	7921      	ldrb	r1, [r4, #4]
   d71a6:	4620      	mov	r0, r4
   d71a8:	f7ff ffe7 	bl	d717a <_ZN10RHDatagram14setThisAddressEh>
}
   d71ac:	4628      	mov	r0, r5
   d71ae:	bd38      	pop	{r3, r4, r5, pc}

000d71b0 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   d71b0:	6800      	ldr	r0, [r0, #0]
   d71b2:	6803      	ldr	r3, [r0, #0]
   d71b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d71b6:	4718      	bx	r3

000d71b8 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   d71b8:	6800      	ldr	r0, [r0, #0]
   d71ba:	6803      	ldr	r3, [r0, #0]
   d71bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d71be:	4718      	bx	r3

000d71c0 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   d71c0:	6800      	ldr	r0, [r0, #0]
   d71c2:	6803      	ldr	r3, [r0, #0]
   d71c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d71c6:	4718      	bx	r3

000d71c8 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   d71c8:	6800      	ldr	r0, [r0, #0]
   d71ca:	6803      	ldr	r3, [r0, #0]
   d71cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d71ce:	4718      	bx	r3

000d71d0 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   d71d0:	6800      	ldr	r0, [r0, #0]
   d71d2:	6803      	ldr	r3, [r0, #0]
   d71d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d71d6:	4718      	bx	r3

000d71d8 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   d71d8:	6800      	ldr	r0, [r0, #0]
   d71da:	6803      	ldr	r3, [r0, #0]
   d71dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d71de:	4718      	bx	r3

000d71e0 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   d71e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d71e4:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   d71e6:	6800      	ldr	r0, [r0, #0]
{
   d71e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   d71ea:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   d71ec:	6803      	ldr	r3, [r0, #0]
   d71ee:	691b      	ldr	r3, [r3, #16]
{
   d71f0:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   d71f4:	4798      	blx	r3
   d71f6:	4605      	mov	r5, r0
   d71f8:	b1c8      	cbz	r0, d722e <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   d71fa:	b11e      	cbz	r6, d7204 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   d71fc:	4620      	mov	r0, r4
   d71fe:	f7ff ffe3 	bl	d71c8 <_ZN10RHDatagram10headerFromEv>
   d7202:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   d7204:	f1b9 0f00 	cmp.w	r9, #0
   d7208:	d004      	beq.n	d7214 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   d720a:	4620      	mov	r0, r4
   d720c:	f7ff ffd8 	bl	d71c0 <_ZN10RHDatagram8headerToEv>
   d7210:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   d7214:	f1b8 0f00 	cmp.w	r8, #0
   d7218:	d004      	beq.n	d7224 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   d721a:	4620      	mov	r0, r4
   d721c:	f7ff ffd8 	bl	d71d0 <_ZN10RHDatagram8headerIdEv>
   d7220:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   d7224:	b11f      	cbz	r7, d722e <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   d7226:	4620      	mov	r0, r4
   d7228:	f7ff ffd6 	bl	d71d8 <_ZN10RHDatagram11headerFlagsEv>
   d722c:	7038      	strb	r0, [r7, #0]
}
   d722e:	4628      	mov	r0, r5
   d7230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d7234 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   d7234:	2001      	movs	r0, #1
   d7236:	4770      	bx	lr

000d7238 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   d7238:	7903      	ldrb	r3, [r0, #4]
   d723a:	2b03      	cmp	r3, #3
   d723c:	d0fc      	beq.n	d7238 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   d723e:	2001      	movs	r0, #1
   d7240:	4770      	bx	lr

000d7242 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   d7242:	2000      	movs	r0, #0
   d7244:	4770      	bx	lr

000d7246 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   d7246:	7181      	strb	r1, [r0, #6]
}
   d7248:	4770      	bx	lr

000d724a <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   d724a:	7141      	strb	r1, [r0, #5]
}
   d724c:	4770      	bx	lr

000d724e <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   d724e:	72c1      	strb	r1, [r0, #11]
}
   d7250:	4770      	bx	lr

000d7252 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   d7252:	7301      	strb	r1, [r0, #12]
}
   d7254:	4770      	bx	lr

000d7256 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   d7256:	7341      	strb	r1, [r0, #13]
}
   d7258:	4770      	bx	lr

000d725a <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   d725a:	7b83      	ldrb	r3, [r0, #14]
   d725c:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   d7260:	4311      	orrs	r1, r2
   d7262:	7381      	strb	r1, [r0, #14]
}
   d7264:	4770      	bx	lr

000d7266 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   d7266:	79c0      	ldrb	r0, [r0, #7]
}
   d7268:	4770      	bx	lr

000d726a <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   d726a:	7a00      	ldrb	r0, [r0, #8]
}
   d726c:	4770      	bx	lr

000d726e <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   d726e:	7a40      	ldrb	r0, [r0, #9]
}
   d7270:	4770      	bx	lr

000d7272 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   d7272:	7a80      	ldrb	r0, [r0, #10]
}
   d7274:	4770      	bx	lr

000d7276 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   d7276:	8a00      	ldrh	r0, [r0, #16]
}
   d7278:	b200      	sxth	r0, r0
   d727a:	4770      	bx	lr

000d727c <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   d727c:	7900      	ldrb	r0, [r0, #4]
}
   d727e:	4770      	bx	lr

000d7280 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   d7280:	7101      	strb	r1, [r0, #4]
}
   d7282:	4770      	bx	lr

000d7284 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   d7284:	8a40      	ldrh	r0, [r0, #18]
}
   d7286:	b280      	uxth	r0, r0
   d7288:	4770      	bx	lr

000d728a <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   d728a:	8a80      	ldrh	r0, [r0, #20]
}
   d728c:	b280      	uxth	r0, r0
   d728e:	4770      	bx	lr

000d7290 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   d7290:	8ac0      	ldrh	r0, [r0, #22]
}
   d7292:	b280      	uxth	r0, r0
   d7294:	4770      	bx	lr

000d7296 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   d7296:	b538      	push	{r3, r4, r5, lr}
   d7298:	4605      	mov	r5, r0
   d729a:	460c      	mov	r4, r1
    while (!available())
   d729c:	682b      	ldr	r3, [r5, #0]
   d729e:	4628      	mov	r0, r5
   d72a0:	68db      	ldr	r3, [r3, #12]
   d72a2:	4798      	blx	r3
   d72a4:	b928      	cbnz	r0, d72b2 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   d72a6:	2c00      	cmp	r4, #0
   d72a8:	d0f8      	beq.n	d729c <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   d72aa:	4620      	mov	r0, r4
   d72ac:	f002 f8c4 	bl	d9438 <delay>
   d72b0:	e7f4      	b.n	d729c <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   d72b2:	bd38      	pop	{r3, r4, r5, pc}

000d72b4 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   d72b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d72b6:	4605      	mov	r5, r0
   d72b8:	460f      	mov	r7, r1
   d72ba:	4614      	mov	r4, r2
   d72bc:	f001 fd3e 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
   d72c0:	4606      	mov	r6, r0
   d72c2:	f001 fd3b 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d72c6:	1b80      	subs	r0, r0, r6
   d72c8:	42b8      	cmp	r0, r7
   d72ca:	d20a      	bcs.n	d72e2 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   d72cc:	682b      	ldr	r3, [r5, #0]
   d72ce:	4628      	mov	r0, r5
   d72d0:	68db      	ldr	r3, [r3, #12]
   d72d2:	4798      	blx	r3
   d72d4:	b930      	cbnz	r0, d72e4 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   d72d6:	2c00      	cmp	r4, #0
   d72d8:	d0f3      	beq.n	d72c2 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   d72da:	4620      	mov	r0, r4
   d72dc:	f002 f8ac 	bl	d9438 <delay>
   d72e0:	e7ef      	b.n	d72c2 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   d72e2:	2000      	movs	r0, #0
}
   d72e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d72e6 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   d72e6:	b570      	push	{r4, r5, r6, lr}
   d72e8:	4604      	mov	r4, r0
   d72ea:	460e      	mov	r6, r1
   d72ec:	f001 fd26 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
   d72f0:	4605      	mov	r5, r0
   d72f2:	f001 fd23 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d72f6:	1b40      	subs	r0, r0, r5
   d72f8:	42b0      	cmp	r0, r6
   d72fa:	d204      	bcs.n	d7306 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   d72fc:	7923      	ldrb	r3, [r4, #4]
   d72fe:	2b03      	cmp	r3, #3
   d7300:	d0f7      	beq.n	d72f2 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   d7302:	2001      	movs	r0, #1
}
   d7304:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d7306:	2000      	movs	r0, #0
   d7308:	e7fc      	b.n	d7304 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000d730a <_ZN15RHGenericDriver7waitCADEv>:
{
   d730a:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   d730c:	69c3      	ldr	r3, [r0, #28]
{
   d730e:	4604      	mov	r4, r0
    if (!_cad_timeout)
   d7310:	b1b3      	cbz	r3, d7340 <_ZN15RHGenericDriver7waitCADEv+0x36>
   d7312:	f001 fd13 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d7316:	2664      	movs	r6, #100	; 0x64
   d7318:	4605      	mov	r5, r0
    while (isChannelActive())
   d731a:	6823      	ldr	r3, [r4, #0]
   d731c:	4620      	mov	r0, r4
   d731e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7320:	4798      	blx	r3
   d7322:	b168      	cbz	r0, d7340 <_ZN15RHGenericDriver7waitCADEv+0x36>
   d7324:	f001 fd0a 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   d7328:	69e3      	ldr	r3, [r4, #28]
   d732a:	1b40      	subs	r0, r0, r5
   d732c:	4298      	cmp	r0, r3
   d732e:	d809      	bhi.n	d7344 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d7330:	210a      	movs	r1, #10
   d7332:	2001      	movs	r0, #1
   d7334:	f003 ff8f 	bl	db256 <_Z6randomii>
   d7338:	4370      	muls	r0, r6
   d733a:	f002 f87d 	bl	d9438 <delay>
    while (isChannelActive())
   d733e:	e7ec      	b.n	d731a <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   d7340:	2001      	movs	r0, #1
}
   d7342:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   d7344:	2000      	movs	r0, #0
   d7346:	e7fc      	b.n	d7342 <_ZN15RHGenericDriver7waitCADEv+0x38>

000d7348 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   d7348:	4a06      	ldr	r2, [pc, #24]	; (d7364 <_ZN15RHGenericDriverC1Ev+0x1c>)
   d734a:	6002      	str	r2, [r0, #0]
   d734c:	21ff      	movs	r1, #255	; 0xff
   d734e:	2200      	movs	r2, #0
   d7350:	7102      	strb	r2, [r0, #4]
   d7352:	7141      	strb	r1, [r0, #5]
   d7354:	8242      	strh	r2, [r0, #18]
   d7356:	72c1      	strb	r1, [r0, #11]
   d7358:	8282      	strh	r2, [r0, #20]
   d735a:	8181      	strh	r1, [r0, #12]
   d735c:	7382      	strb	r2, [r0, #14]
   d735e:	82c2      	strh	r2, [r0, #22]
   d7360:	61c2      	str	r2, [r0, #28]
}
   d7362:	4770      	bx	lr
   d7364:	000dd0a8 	.word	0x000dd0a8

000d7368 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   d7368:	4770      	bx	lr

000d736a <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   d736a:	4770      	bx	lr

000d736c <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   d736c:	4770      	bx	lr

000d736e <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   d736e:	4770      	bx	lr

000d7370 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   d7370:	4770      	bx	lr

000d7372 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   d7372:	7141      	strb	r1, [r0, #5]
}
   d7374:	4770      	bx	lr

000d7376 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   d7376:	7181      	strb	r1, [r0, #6]
}
   d7378:	4770      	bx	lr

000d737a <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   d737a:	7101      	strb	r1, [r0, #4]
}
   d737c:	4770      	bx	lr
	...

000d7380 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d7380:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   d7382:	4d03      	ldr	r5, [pc, #12]	; (d7390 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   d7384:	6005      	str	r5, [r0, #0]
   d7386:	7101      	strb	r1, [r0, #4]
   d7388:	7142      	strb	r2, [r0, #5]
   d738a:	7183      	strb	r3, [r0, #6]
}
   d738c:	bd30      	pop	{r4, r5, pc}
   d738e:	bf00      	nop
   d7390:	000dd128 	.word	0x000dd128

000d7394 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d7394:	4770      	bx	lr

000d7396 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d7396:	b510      	push	{r4, lr}
  }
   d7398:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d739a:	4604      	mov	r4, r0
  }
   d739c:	f004 fc56 	bl	dbc4c <_ZdlPvj>
   d73a0:	4620      	mov	r0, r4
   d73a2:	bd10      	pop	{r4, pc}

000d73a4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d73a4:	b40e      	push	{r1, r2, r3}
   d73a6:	b503      	push	{r0, r1, lr}
   d73a8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d73aa:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d73ac:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d73b0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d73b2:	f003 ff14 	bl	db1de <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d73b6:	b002      	add	sp, #8
   d73b8:	f85d eb04 	ldr.w	lr, [sp], #4
   d73bc:	b003      	add	sp, #12
   d73be:	4770      	bx	lr

000d73c0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d73c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d73c2:	4604      	mov	r4, r0
   d73c4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d73c6:	7922      	ldrb	r2, [r4, #4]
   d73c8:	68a3      	ldr	r3, [r4, #8]
   d73ca:	b132      	cbz	r2, d73da <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d73cc:	b9a3      	cbnz	r3, d73f8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d73ce:	490b      	ldr	r1, [pc, #44]	; (d73fc <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d73d0:	b002      	add	sp, #8
   d73d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d73d6:	f003 bed1 	b.w	db17c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d73da:	4a09      	ldr	r2, [pc, #36]	; (d7400 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d73dc:	7b26      	ldrb	r6, [r4, #12]
   d73de:	4d09      	ldr	r5, [pc, #36]	; (d7404 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d73e0:	4909      	ldr	r1, [pc, #36]	; (d7408 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d73e2:	7b64      	ldrb	r4, [r4, #13]
   d73e4:	2e01      	cmp	r6, #1
   d73e6:	bf18      	it	ne
   d73e8:	4629      	movne	r1, r5
   d73ea:	e9cd 1400 	strd	r1, r4, [sp]
   d73ee:	4907      	ldr	r1, [pc, #28]	; (d740c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d73f0:	f7ff ffd8 	bl	d73a4 <_ZN5Print6printfEPKcz>
  }
   d73f4:	b002      	add	sp, #8
   d73f6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d73f8:	4a05      	ldr	r2, [pc, #20]	; (d7410 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d73fa:	e7ef      	b.n	d73dc <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d73fc:	000dd165 	.word	0x000dd165
   d7400:	000dd568 	.word	0x000dd568
   d7404:	000dd161 	.word	0x000dd161
   d7408:	000dd15d 	.word	0x000dd15d
   d740c:	000dd17b 	.word	0x000dd17b
   d7410:	000dd154 	.word	0x000dd154

000d7414 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d7414:	b510      	push	{r4, lr}
   d7416:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   d7418:	f7ff ffb2 	bl	d7380 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   d741c:	4b05      	ldr	r3, [pc, #20]	; (d7434 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   d741e:	6023      	str	r3, [r4, #0]
  {
   d7420:	4b05      	ldr	r3, [pc, #20]	; (d7438 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   d7422:	60a3      	str	r3, [r4, #8]
   d7424:	2301      	movs	r3, #1
   d7426:	7323      	strb	r3, [r4, #12]
   d7428:	2300      	movs	r3, #0
   d742a:	6123      	str	r3, [r4, #16]
   d742c:	82a3      	strh	r3, [r4, #20]
{
}
   d742e:	4620      	mov	r0, r4
   d7430:	bd10      	pop	{r4, pc}
   d7432:	bf00      	nop
   d7434:	000dd1b4 	.word	0x000dd1b4
   d7438:	000dd1a0 	.word	0x000dd1a0

000d743c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d743c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d743e:	4c0b      	ldr	r4, [pc, #44]	; (d746c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d7440:	7821      	ldrb	r1, [r4, #0]
   d7442:	f3bf 8f5b 	dmb	ish
   d7446:	f011 0101 	ands.w	r1, r1, #1
   d744a:	d10b      	bne.n	d7464 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d744c:	4620      	mov	r0, r4
   d744e:	9101      	str	r1, [sp, #4]
   d7450:	f7fc fe32 	bl	d40b8 <__cxa_guard_acquire>
   d7454:	9901      	ldr	r1, [sp, #4]
   d7456:	b128      	cbz	r0, d7464 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d7458:	4805      	ldr	r0, [pc, #20]	; (d7470 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d745a:	f003 ff13 	bl	db284 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d745e:	4620      	mov	r0, r4
   d7460:	f7fc fe2f 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d7464:	4802      	ldr	r0, [pc, #8]	; (d7470 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d7466:	b002      	add	sp, #8
   d7468:	bd10      	pop	{r4, pc}
   d746a:	bf00      	nop
   d746c:	2003e320 	.word	0x2003e320
   d7470:	2003e324 	.word	0x2003e324

000d7474 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   d7474:	b507      	push	{r0, r1, r2, lr}
   d7476:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d7478:	f7ff ffe0 	bl	d743c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d747c:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   d747e:	b003      	add	sp, #12
   d7480:	f85d eb04 	ldr.w	lr, [sp], #4
   d7484:	f003 bfb0 	b.w	db3e8 <_ZN8SPIClass8transferEh>

000d7488 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   d7488:	b508      	push	{r3, lr}
    }
    void transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   d748a:	f7ff ffd7 	bl	d743c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   d748e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d7492:	f003 bfaf 	b.w	db3f4 <_ZN8SPIClass15attachInterruptEv>

000d7496 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   d7496:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   d7498:	f7ff ffd0 	bl	d743c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   d749c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d74a0:	f003 bfa9 	b.w	db3f6 <_ZN8SPIClass15detachInterruptEv>

000d74a4 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   d74a4:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   d74a6:	7903      	ldrb	r3, [r0, #4]
   d74a8:	2b04      	cmp	r3, #4
   d74aa:	d020      	beq.n	d74ee <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   d74ac:	2b03      	cmp	r3, #3
   d74ae:	d020      	beq.n	d74f2 <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   d74b0:	2b02      	cmp	r3, #2
   d74b2:	d020      	beq.n	d74f6 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   d74b4:	4a11      	ldr	r2, [pc, #68]	; (d74fc <_ZN13RHHardwareSPI5beginEv+0x58>)
   d74b6:	4912      	ldr	r1, [pc, #72]	; (d7500 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   d74b8:	2b01      	cmp	r3, #1
   d74ba:	bf18      	it	ne
   d74bc:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   d74be:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   d74c0:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   d74c2:	3901      	subs	r1, #1
   d74c4:	bf18      	it	ne
   d74c6:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   d74c8:	b133      	cbz	r3, d74d8 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   d74ca:	2b01      	cmp	r3, #1
   d74cc:	d004      	beq.n	d74d8 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   d74ce:	2b02      	cmp	r3, #2
   d74d0:	d002      	beq.n	d74d8 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   d74d2:	2b03      	cmp	r3, #3
   d74d4:	bf18      	it	ne
   d74d6:	2300      	movne	r3, #0
class SPISettings : public Printable {
   d74d8:	2400      	movs	r4, #0
   d74da:	7304      	strb	r4, [r0, #12]
   d74dc:	6102      	str	r2, [r0, #16]
   d74de:	7501      	strb	r1, [r0, #20]
   d74e0:	7543      	strb	r3, [r0, #21]
        instance().begin();
   d74e2:	f7ff ffab 	bl	d743c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   d74e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d74ea:	f003 bed5 	b.w	db298 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   d74ee:	4a05      	ldr	r2, [pc, #20]	; (d7504 <_ZN13RHHardwareSPI5beginEv+0x60>)
   d74f0:	e7e5      	b.n	d74be <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   d74f2:	4a05      	ldr	r2, [pc, #20]	; (d7508 <_ZN13RHHardwareSPI5beginEv+0x64>)
   d74f4:	e7e3      	b.n	d74be <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   d74f6:	4a05      	ldr	r2, [pc, #20]	; (d750c <_ZN13RHHardwareSPI5beginEv+0x68>)
   d74f8:	e7e1      	b.n	d74be <_ZN13RHHardwareSPI5beginEv+0x1a>
   d74fa:	bf00      	nop
   d74fc:	001e8480 	.word	0x001e8480
   d7500:	000f4240 	.word	0x000f4240
   d7504:	00f42400 	.word	0x00f42400
   d7508:	007a1200 	.word	0x007a1200
   d750c:	003d0900 	.word	0x003d0900

000d7510 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   d7510:	b508      	push	{r3, lr}
        instance().end();
   d7512:	f7ff ff93 	bl	d743c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   d7516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d751a:	f003 bece 	b.w	db2ba <_ZN8SPIClass3endEv>

000d751e <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   d751e:	b510      	push	{r4, lr}
   d7520:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d7522:	f7ff ff8b 	bl	d743c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d7526:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   d752a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d752e:	f003 beed 	b.w	db30c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d7532 <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   d7532:	b508      	push	{r3, lr}
        instance().endTransaction();
   d7534:	f7ff ff82 	bl	d743c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   d7538:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d753c:	f003 becc 	b.w	db2d8 <_ZN8SPIClass14endTransactionEv>

000d7540 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   d7540:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   d7542:	f7ff ff7b 	bl	d743c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   d7546:	bd08      	pop	{r3, pc}

000d7548 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   d7548:	2300      	movs	r3, #0
   d754a:	4802      	ldr	r0, [pc, #8]	; (d7554 <_GLOBAL__sub_I_hardware_spi+0xc>)
   d754c:	461a      	mov	r2, r3
   d754e:	4619      	mov	r1, r3
   d7550:	f7ff bf60 	b.w	d7414 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   d7554:	2003e32c 	.word	0x2003e32c

000d7558 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   d7558:	2a01      	cmp	r2, #1
   d755a:	d105      	bne.n	d7568 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   d755c:	7a00      	ldrb	r0, [r0, #8]
   d755e:	780b      	ldrb	r3, [r1, #0]
   d7560:	1a1b      	subs	r3, r3, r0
   d7562:	4258      	negs	r0, r3
   d7564:	4158      	adcs	r0, r3
   d7566:	4770      	bx	lr
   d7568:	2000      	movs	r0, #0
}
   d756a:	4770      	bx	lr

000d756c <_ZN6RHMesh5doArpEh>:
{
   d756c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d7570:	4d26      	ldr	r5, [pc, #152]	; (d760c <_ZN6RHMesh5doArpEh+0xa0>)
   d7572:	2301      	movs	r3, #1
{
   d7574:	b087      	sub	sp, #28
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d7576:	702b      	strb	r3, [r5, #0]
    p->destlen = 1; 
   d7578:	706b      	strb	r3, [r5, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d757a:	2300      	movs	r3, #0
{
   d757c:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   d757e:	70a9      	strb	r1, [r5, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d7580:	9300      	str	r3, [sp, #0]
   d7582:	2203      	movs	r2, #3
   d7584:	23ff      	movs	r3, #255	; 0xff
   d7586:	4629      	mov	r1, r5
{
   d7588:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d758a:	f000 fbb9 	bl	d7d00 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   d758e:	b120      	cbz	r0, d759a <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   d7590:	2400      	movs	r4, #0
}
   d7592:	4620      	mov	r0, r4
   d7594:	b007      	add	sp, #28
   d7596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   d759a:	23fa      	movs	r3, #250	; 0xfa
   d759c:	f88d 3017 	strb.w	r3, [sp, #23]
   d75a0:	f001 fbcc 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   d75a4:	f106 0904 	add.w	r9, r6, #4
   d75a8:	4680      	mov	r8, r0
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d75aa:	46aa      	mov	sl, r5
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   d75ac:	f508 647a 	add.w	r4, r8, #4000	; 0xfa0
   d75b0:	f001 fbc4 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
   d75b4:	1a20      	subs	r0, r4, r0
   d75b6:	2800      	cmp	r0, #0
   d75b8:	ddea      	ble.n	d7590 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   d75ba:	b281      	uxth	r1, r0
   d75bc:	2200      	movs	r2, #0
   d75be:	4648      	mov	r0, r9
   d75c0:	f7ff fdbf 	bl	d7142 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d75c4:	2800      	cmp	r0, #0
   d75c6:	d0f3      	beq.n	d75b0 <_ZN6RHMesh5doArpEh+0x44>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d75c8:	2300      	movs	r3, #0
   d75ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d75ce:	e9cd 3300 	strd	r3, r3, [sp]
   d75d2:	f10d 0217 	add.w	r2, sp, #23
   d75d6:	4651      	mov	r1, sl
   d75d8:	4630      	mov	r0, r6
   d75da:	f000 fb9b 	bl	d7d14 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d75de:	4604      	mov	r4, r0
   d75e0:	2800      	cmp	r0, #0
   d75e2:	d0e3      	beq.n	d75ac <_ZN6RHMesh5doArpEh+0x40>
		if (   messageLen > 1
   d75e4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d75e8:	2b01      	cmp	r3, #1
   d75ea:	d9df      	bls.n	d75ac <_ZN6RHMesh5doArpEh+0x40>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d75ec:	f895 b000 	ldrb.w	fp, [r5]
   d75f0:	f1bb 0f02 	cmp.w	fp, #2
   d75f4:	d1da      	bne.n	d75ac <_ZN6RHMesh5doArpEh+0x40>
		    addRouteTo(address, headerFrom());
   d75f6:	4648      	mov	r0, r9
   d75f8:	f7ff fde6 	bl	d71c8 <_ZN10RHDatagram10headerFromEv>
   d75fc:	465b      	mov	r3, fp
   d75fe:	4602      	mov	r2, r0
   d7600:	4639      	mov	r1, r7
   d7602:	4630      	mov	r0, r6
   d7604:	f000 faf3 	bl	d7bee <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   d7608:	e7c3      	b.n	d7592 <_ZN6RHMesh5doArpEh+0x26>
   d760a:	bf00      	nop
   d760c:	2003e344 	.word	0x2003e344

000d7610 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   d7610:	2a01      	cmp	r2, #1
{
   d7612:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7616:	4607      	mov	r7, r0
   d7618:	460e      	mov	r6, r1
   d761a:	4614      	mov	r4, r2
    if (   messageLen > 1 
   d761c:	d93b      	bls.n	d7696 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d761e:	794d      	ldrb	r5, [r1, #5]
   d7620:	2d02      	cmp	r5, #2
   d7622:	d130      	bne.n	d7686 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   d7624:	f100 0804 	add.w	r8, r0, #4
   d7628:	79c9      	ldrb	r1, [r1, #7]
   d762a:	9101      	str	r1, [sp, #4]
   d762c:	4640      	mov	r0, r8
   d762e:	f7ff fdcb 	bl	d71c8 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d7632:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   d7634:	462b      	mov	r3, r5
   d7636:	4602      	mov	r2, r0
   d7638:	9901      	ldr	r1, [sp, #4]
   d763a:	4638      	mov	r0, r7
   d763c:	f000 fad7 	bl	d7bee <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d7640:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   d7642:	f106 0308 	add.w	r3, r6, #8
   d7646:	2400      	movs	r4, #0
   d7648:	4622      	mov	r2, r4
   d764a:	4295      	cmp	r5, r2
   d764c:	f104 0401 	add.w	r4, r4, #1
   d7650:	b2e4      	uxtb	r4, r4
   d7652:	d904      	bls.n	d765e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   d7654:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7658:	7a39      	ldrb	r1, [r7, #8]
   d765a:	4291      	cmp	r1, r2
   d765c:	d1f4      	bne.n	d7648 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   d765e:	f104 0108 	add.w	r1, r4, #8
   d7662:	440e      	add	r6, r1
	while (i < numRoutes)
   d7664:	42a5      	cmp	r5, r4
   d7666:	d916      	bls.n	d7696 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   d7668:	f816 1b01 	ldrb.w	r1, [r6], #1
   d766c:	9101      	str	r1, [sp, #4]
   d766e:	4640      	mov	r0, r8
   d7670:	f7ff fdaa 	bl	d71c8 <_ZN10RHDatagram10headerFromEv>
   d7674:	3401      	adds	r4, #1
   d7676:	4602      	mov	r2, r0
   d7678:	9901      	ldr	r1, [sp, #4]
   d767a:	2302      	movs	r3, #2
   d767c:	4638      	mov	r0, r7
   d767e:	b2e4      	uxtb	r4, r4
   d7680:	f000 fab5 	bl	d7bee <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   d7684:	e7ee      	b.n	d7664 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   d7686:	2d03      	cmp	r5, #3
   d7688:	d105      	bne.n	d7696 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   d768a:	7989      	ldrb	r1, [r1, #6]
}
   d768c:	b002      	add	sp, #8
   d768e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   d7692:	f000 ba95 	b.w	d7bc0 <_ZN8RHRouter13deleteRouteToEh>
}
   d7696:	b002      	add	sp, #8
   d7698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d769c <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   d769c:	b510      	push	{r4, lr}
   d769e:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   d76a0:	f000 fae6 	bl	d7c70 <_ZN8RHRouterC1ER15RHGenericDriverh>
   d76a4:	4b01      	ldr	r3, [pc, #4]	; (d76ac <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   d76a6:	6023      	str	r3, [r4, #0]
}
   d76a8:	4620      	mov	r0, r4
   d76aa:	bd10      	pop	{r4, pc}
   d76ac:	000dd1e8 	.word	0x000dd1e8

000d76b0 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   d76b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d76b4:	2af9      	cmp	r2, #249	; 0xf9
{
   d76b6:	f89d 9020 	ldrb.w	r9, [sp, #32]
   d76ba:	4606      	mov	r6, r0
   d76bc:	460f      	mov	r7, r1
   d76be:	4614      	mov	r4, r2
   d76c0:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d76c2:	d825      	bhi.n	d7710 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   d76c4:	2bff      	cmp	r3, #255	; 0xff
   d76c6:	d114      	bne.n	d76f2 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d76c8:	f8df 8048 	ldr.w	r8, [pc, #72]	; d7714 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   d76cc:	4640      	mov	r0, r8
   d76ce:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   d76d0:	4622      	mov	r2, r4
   d76d2:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d76d4:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   d76d8:	f004 fee2 	bl	dc4a0 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d76dc:	1c62      	adds	r2, r4, #1
   d76de:	f8cd 9020 	str.w	r9, [sp, #32]
   d76e2:	462b      	mov	r3, r5
   d76e4:	4641      	mov	r1, r8
   d76e6:	4630      	mov	r0, r6
   d76e8:	b2d2      	uxtb	r2, r2
}
   d76ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d76ee:	f000 bb07 	b.w	d7d00 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   d76f2:	4619      	mov	r1, r3
   d76f4:	f000 fa20 	bl	d7b38 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   d76f8:	2800      	cmp	r0, #0
   d76fa:	d1e5      	bne.n	d76c8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   d76fc:	6833      	ldr	r3, [r6, #0]
   d76fe:	4629      	mov	r1, r5
   d7700:	689b      	ldr	r3, [r3, #8]
   d7702:	4630      	mov	r0, r6
   d7704:	4798      	blx	r3
   d7706:	2800      	cmp	r0, #0
   d7708:	d1de      	bne.n	d76c8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d770a:	2002      	movs	r0, #2
}
   d770c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   d7710:	2001      	movs	r0, #1
   d7712:	e7fb      	b.n	d770c <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   d7714:	2003e344 	.word	0x2003e344

000d7718 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   d7718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d771c:	b089      	sub	sp, #36	; 0x24
   d771e:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d7720:	23fa      	movs	r3, #250	; 0xfa
   d7722:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d7726:	f10d 031f 	add.w	r3, sp, #31
   d772a:	9303      	str	r3, [sp, #12]
   d772c:	f10d 031e 	add.w	r3, sp, #30
   d7730:	f8df a180 	ldr.w	sl, [pc, #384]	; d78b4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>
   d7734:	9302      	str	r3, [sp, #8]
   d7736:	f10d 031d 	add.w	r3, sp, #29
   d773a:	9301      	str	r3, [sp, #4]
   d773c:	ab07      	add	r3, sp, #28
   d773e:	9300      	str	r3, [sp, #0]
{     
   d7740:	4689      	mov	r9, r1
   d7742:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d7744:	f10d 031b 	add.w	r3, sp, #27
   d7748:	f10d 021a 	add.w	r2, sp, #26
   d774c:	4651      	mov	r1, sl
{     
   d774e:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   d7752:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d7754:	f000 fade 	bl	d7d14 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d7758:	4656      	mov	r6, sl
   d775a:	4604      	mov	r4, r0
   d775c:	b920      	cbnz	r0, d7768 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x50>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   d775e:	2400      	movs	r4, #0
}
   d7760:	4620      	mov	r0, r4
   d7762:	b009      	add	sp, #36	; 0x24
   d7764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   d7768:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d776c:	b373      	cbz	r3, d77cc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   d776e:	f89a 2000 	ldrb.w	r2, [sl]
   d7772:	bb5a      	cbnz	r2, d77cc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    if (source) *source = _source;
   d7774:	f1b8 0f00 	cmp.w	r8, #0
   d7778:	d003      	beq.n	d7782 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x6a>
   d777a:	f89d 201b 	ldrb.w	r2, [sp, #27]
   d777e:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   d7782:	f1bb 0f00 	cmp.w	fp, #0
   d7786:	d003      	beq.n	d7790 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x78>
   d7788:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d778c:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   d7790:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d7792:	b11a      	cbz	r2, d779c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d7794:	9913      	ldr	r1, [sp, #76]	; 0x4c
   d7796:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d779a:	700a      	strb	r2, [r1, #0]
	    if (flags)  *flags  = _flags;
   d779c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d779e:	b11a      	cbz	r2, d77a8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d77a0:	9914      	ldr	r1, [sp, #80]	; 0x50
   d77a2:	f89d 201e 	ldrb.w	r2, [sp, #30]
   d77a6:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   d77a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   d77aa:	b11a      	cbz	r2, d77b4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d77ac:	9915      	ldr	r1, [sp, #84]	; 0x54
   d77ae:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d77b2:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   d77b4:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   d77b6:	493d      	ldr	r1, [pc, #244]	; (d78ac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   d77b8:	3b01      	subs	r3, #1
   d77ba:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d77bc:	429a      	cmp	r2, r3
		*len = msgLen;
   d77be:	bf88      	it	hi
   d77c0:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   d77c2:	783a      	ldrb	r2, [r7, #0]
   d77c4:	4648      	mov	r0, r9
   d77c6:	f004 fe6b 	bl	dc4a0 <memcpy>
	    return true;
   d77ca:	e7c9      	b.n	d7760 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   d77cc:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d77d0:	2aff      	cmp	r2, #255	; 0xff
   d77d2:	d1c4      	bne.n	d775e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && tmpMessageLen > 1 
   d77d4:	2b01      	cmp	r3, #1
   d77d6:	d9c2      	bls.n	d775e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   d77d8:	7832      	ldrb	r2, [r6, #0]
   d77da:	2a01      	cmp	r2, #1
   d77dc:	d1bf      	bne.n	d775e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    if (_source == _thisAddress)
   d77de:	7a2a      	ldrb	r2, [r5, #8]
   d77e0:	f89d 401b 	ldrb.w	r4, [sp, #27]
   d77e4:	42a2      	cmp	r2, r4
   d77e6:	d0ba      	beq.n	d775e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   d77e8:	1edf      	subs	r7, r3, #3
   d77ea:	4931      	ldr	r1, [pc, #196]	; (d78b0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   d77ec:	b2ff      	uxtb	r7, r7
   d77ee:	2300      	movs	r3, #0
   d77f0:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   d77f4:	4547      	cmp	r7, r8
   d77f6:	d906      	bls.n	d7806 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xee>
		if (d->route[i] == _thisAddress)
   d77f8:	f811 0b01 	ldrb.w	r0, [r1], #1
   d77fc:	4282      	cmp	r2, r0
   d77fe:	f103 0301 	add.w	r3, r3, #1
   d7802:	d1f5      	bne.n	d77f0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd8>
   d7804:	e7ab      	b.n	d775e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   d7806:	f105 0904 	add.w	r9, r5, #4
   d780a:	4648      	mov	r0, r9
   d780c:	f7ff fcdc 	bl	d71c8 <_ZN10RHDatagram10headerFromEv>
   d7810:	2302      	movs	r3, #2
   d7812:	4602      	mov	r2, r0
   d7814:	4621      	mov	r1, r4
   d7816:	4628      	mov	r0, r5
   d7818:	f000 f9e9 	bl	d7bee <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   d781c:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d7820:	b193      	cbz	r3, d7848 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x130>
   d7822:	4c24      	ldr	r4, [pc, #144]	; (d78b4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
	        for (i = 0; i < numRoutes; i++)
   d7824:	1ba3      	subs	r3, r4, r6
   d7826:	b2db      	uxtb	r3, r3
   d7828:	429f      	cmp	r7, r3
   d782a:	d90c      	bls.n	d7846 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12e>
		    addRouteTo(d->route[i], headerFrom());
   d782c:	78e1      	ldrb	r1, [r4, #3]
   d782e:	9105      	str	r1, [sp, #20]
   d7830:	4648      	mov	r0, r9
   d7832:	f7ff fcc9 	bl	d71c8 <_ZN10RHDatagram10headerFromEv>
   d7836:	9905      	ldr	r1, [sp, #20]
   d7838:	4602      	mov	r2, r0
   d783a:	2302      	movs	r3, #2
   d783c:	4628      	mov	r0, r5
   d783e:	f000 f9d6 	bl	d7bee <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   d7842:	3401      	adds	r4, #1
   d7844:	e7ee      	b.n	d7824 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x10c>
   d7846:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   d7848:	682b      	ldr	r3, [r5, #0]
   d784a:	7872      	ldrb	r2, [r6, #1]
   d784c:	68db      	ldr	r3, [r3, #12]
   d784e:	491a      	ldr	r1, [pc, #104]	; (d78b8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x1a0>)
   d7850:	4628      	mov	r0, r5
   d7852:	4798      	blx	r3
   d7854:	4604      	mov	r4, r0
   d7856:	b160      	cbz	r0, d7872 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x15a>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d7858:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d785a:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d785c:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d785e:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d7862:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d7866:	4913      	ldr	r1, [pc, #76]	; (d78b4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   d7868:	9400      	str	r4, [sp, #0]
   d786a:	4628      	mov	r0, r5
   d786c:	f000 fa48 	bl	d7d00 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d7870:	e776      	b.n	d7760 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	    else if ((i < _max_hops) && _isa_router)
   d7872:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   d7876:	4543      	cmp	r3, r8
   d7878:	f67f af71 	bls.w	d775e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
   d787c:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d7880:	2b00      	cmp	r3, #0
   d7882:	f43f af6c 	beq.w	d775e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		tmpMessageLen++;
   d7886:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   d788a:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d788c:	4909      	ldr	r1, [pc, #36]	; (d78b4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
		d->route[numRoutes] = _thisAddress;
   d788e:	443e      	add	r6, r7
		tmpMessageLen++;
   d7890:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   d7892:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d7894:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d7898:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   d789a:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d789c:	9300      	str	r3, [sp, #0]
   d789e:	4628      	mov	r0, r5
   d78a0:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   d78a2:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d78a6:	f000 f9f5 	bl	d7c94 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   d78aa:	e759      	b.n	d7760 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
   d78ac:	2003e345 	.word	0x2003e345
   d78b0:	2003e347 	.word	0x2003e347
   d78b4:	2003e344 	.word	0x2003e344
   d78b8:	2003e346 	.word	0x2003e346

000d78bc <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   d78bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d78be:	b085      	sub	sp, #20
   d78c0:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d78c2:	3004      	adds	r0, #4
{
   d78c4:	460e      	mov	r6, r1
   d78c6:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d78c8:	f7ff fc7e 	bl	d71c8 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   d78cc:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d78ce:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   d78d0:	4631      	mov	r1, r6
   d78d2:	4628      	mov	r0, r5
   d78d4:	f000 f947 	bl	d7b66 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d78d8:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   d78da:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d78dc:	d001      	beq.n	d78e2 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   d78de:	2805      	cmp	r0, #5
   d78e0:	d11b      	bne.n	d791a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   d78e2:	7831      	ldrb	r1, [r6, #0]
   d78e4:	4628      	mov	r0, r5
   d78e6:	f000 f96b 	bl	d7bc0 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   d78ea:	7872      	ldrb	r2, [r6, #1]
   d78ec:	7a2b      	ldrb	r3, [r5, #8]
   d78ee:	429a      	cmp	r2, r3
   d78f0:	d013      	beq.n	d791a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   d78f2:	4c0b      	ldr	r4, [pc, #44]	; (d7920 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   d78f4:	2303      	movs	r3, #3
   d78f6:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   d78f8:	7833      	ldrb	r3, [r6, #0]
   d78fa:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   d78fc:	7871      	ldrb	r1, [r6, #1]
   d78fe:	2302      	movs	r3, #2
   d7900:	463a      	mov	r2, r7
   d7902:	4628      	mov	r0, r5
   d7904:	f000 f973 	bl	d7bee <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   d7908:	2300      	movs	r3, #0
   d790a:	9300      	str	r3, [sp, #0]
   d790c:	4621      	mov	r1, r4
   d790e:	7873      	ldrb	r3, [r6, #1]
   d7910:	2202      	movs	r2, #2
   d7912:	4628      	mov	r0, r5
   d7914:	f000 f9f4 	bl	d7d00 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d7918:	4604      	mov	r4, r0
}
   d791a:	4620      	mov	r0, r4
   d791c:	b005      	add	sp, #20
   d791e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7920:	2003e344 	.word	0x2003e344

000d7924 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   d7924:	b510      	push	{r4, lr}
   d7926:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   d7928:	f7ff fc00 	bl	d712c <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   d792c:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   d792e:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   d7930:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   d7932:	2303      	movs	r3, #3
    _retransmissions = 0;
   d7934:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   d7936:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   d7938:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   d793a:	f44f 7280 	mov.w	r2, #256	; 0x100
   d793e:	f104 0011 	add.w	r0, r4, #17
   d7942:	f004 fdd5 	bl	dc4f0 <memset>
}
   d7946:	4620      	mov	r0, r4
   d7948:	bd10      	pop	{r4, pc}

000d794a <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   d794a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d794c:	4604      	mov	r4, r0
   d794e:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   d7950:	f7ff fc2e 	bl	d71b0 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   d7954:	4620      	mov	r0, r4
   d7956:	2200      	movs	r2, #0
   d7958:	2180      	movs	r1, #128	; 0x80
   d795a:	f7ff fc2d 	bl	d71b8 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   d795e:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   d7960:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   d7962:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   d7966:	f10d 010f 	add.w	r1, sp, #15
   d796a:	2201      	movs	r2, #1
   d796c:	4620      	mov	r0, r4
   d796e:	f7ff fbf0 	bl	d7152 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   d7972:	4620      	mov	r0, r4
   d7974:	f7ff fbe1 	bl	d713a <_ZN10RHDatagram14waitPacketSentEv>
}
   d7978:	b004      	add	sp, #16
   d797a:	bd10      	pop	{r4, pc}

000d797c <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   d797c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d7980:	7b05      	ldrb	r5, [r0, #12]
   d7982:	3501      	adds	r5, #1
   d7984:	b2ed      	uxtb	r5, r5
{
   d7986:	b087      	sub	sp, #28
   d7988:	4604      	mov	r4, r0
   d798a:	4689      	mov	r9, r1
   d798c:	4692      	mov	sl, r2
   d798e:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d7990:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   d7992:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   d7994:	7c22      	ldrb	r2, [r4, #16]
   d7996:	463b      	mov	r3, r7
   d7998:	429a      	cmp	r2, r3
   d799a:	f107 0701 	add.w	r7, r7, #1
   d799e:	b2ff      	uxtb	r7, r7
   d79a0:	d36b      	bcc.n	d7a7a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   d79a2:	4629      	mov	r1, r5
   d79a4:	4620      	mov	r0, r4
   d79a6:	f7ff fc03 	bl	d71b0 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   d79aa:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   d79ac:	bf0d      	iteet	eq
   d79ae:	22c0      	moveq	r2, #192	; 0xc0
   d79b0:	2280      	movne	r2, #128	; 0x80
   d79b2:	2140      	movne	r1, #64	; 0x40
   d79b4:	2100      	moveq	r1, #0
   d79b6:	4620      	mov	r0, r4
   d79b8:	f7ff fbfe 	bl	d71b8 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   d79bc:	4643      	mov	r3, r8
   d79be:	4652      	mov	r2, sl
   d79c0:	4649      	mov	r1, r9
   d79c2:	4620      	mov	r0, r4
   d79c4:	f7ff fbc5 	bl	d7152 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   d79c8:	4620      	mov	r0, r4
   d79ca:	f7ff fbb6 	bl	d713a <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   d79ce:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d79d2:	d054      	beq.n	d7a7e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   d79d4:	2f01      	cmp	r7, #1
	    _retransmissions++;
   d79d6:	bf82      	ittt	hi
   d79d8:	68a3      	ldrhi	r3, [r4, #8]
   d79da:	3301      	addhi	r3, #1
   d79dc:	60a3      	strhi	r3, [r4, #8]
   d79de:	f001 f9ad 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   d79e2:	f44f 7180 	mov.w	r1, #256	; 0x100
   d79e6:	4683      	mov	fp, r0
   d79e8:	2000      	movs	r0, #0
   d79ea:	89e6      	ldrh	r6, [r4, #14]
   d79ec:	f003 fc33 	bl	db256 <_Z6randomii>
   d79f0:	4370      	muls	r0, r6
   d79f2:	bf48      	it	mi
   d79f4:	30ff      	addmi	r0, #255	; 0xff
   d79f6:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   d79fa:	fa1b f686 	uxtah	r6, fp, r6
   d79fe:	f001 f99d 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
   d7a02:	1a30      	subs	r0, r6, r0
   d7a04:	2800      	cmp	r0, #0
   d7a06:	ddc5      	ble.n	d7994 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   d7a08:	b281      	uxth	r1, r0
   d7a0a:	2200      	movs	r2, #0
   d7a0c:	4620      	mov	r0, r4
   d7a0e:	f7ff fb98 	bl	d7142 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d7a12:	2800      	cmp	r0, #0
   d7a14:	d0f3      	beq.n	d79fe <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   d7a16:	f10d 0317 	add.w	r3, sp, #23
   d7a1a:	9302      	str	r3, [sp, #8]
   d7a1c:	f10d 0316 	add.w	r3, sp, #22
   d7a20:	9301      	str	r3, [sp, #4]
   d7a22:	2200      	movs	r2, #0
   d7a24:	f10d 0315 	add.w	r3, sp, #21
   d7a28:	9300      	str	r3, [sp, #0]
   d7a2a:	4611      	mov	r1, r2
   d7a2c:	ab05      	add	r3, sp, #20
   d7a2e:	4620      	mov	r0, r4
   d7a30:	f7ff fbd6 	bl	d71e0 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d7a34:	2800      	cmp	r0, #0
   d7a36:	d0e2      	beq.n	d79fe <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   d7a38:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d7a3c:	f99d 3017 	ldrsb.w	r3, [sp, #23]
   d7a40:	4542      	cmp	r2, r8
   d7a42:	d10e      	bne.n	d7a62 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   d7a44:	f894 c004 	ldrb.w	ip, [r4, #4]
   d7a48:	f89d 1015 	ldrb.w	r1, [sp, #21]
   d7a4c:	458c      	cmp	ip, r1
   d7a4e:	d108      	bne.n	d7a62 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   d7a50:	2b00      	cmp	r3, #0
   d7a52:	da08      	bge.n	d7a66 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   d7a54:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d7a58:	42ab      	cmp	r3, r5
   d7a5a:	d1d0      	bne.n	d79fe <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   d7a5c:	b007      	add	sp, #28
   d7a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   d7a62:	2b00      	cmp	r3, #0
   d7a64:	dbcb      	blt.n	d79fe <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   d7a66:	18a1      	adds	r1, r4, r2
   d7a68:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d7a6c:	7c49      	ldrb	r1, [r1, #17]
   d7a6e:	4299      	cmp	r1, r3
   d7a70:	d1c5      	bne.n	d79fe <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   d7a72:	4620      	mov	r0, r4
   d7a74:	f7ff ff69 	bl	d794a <_ZN18RHReliableDatagram11acknowledgeEhh>
   d7a78:	e7c1      	b.n	d79fe <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   d7a7a:	2000      	movs	r0, #0
   d7a7c:	e7ee      	b.n	d7a5c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   d7a7e:	2001      	movs	r0, #1
   d7a80:	e7ec      	b.n	d7a5c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000d7a82 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   d7a82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7a86:	b089      	sub	sp, #36	; 0x24
   d7a88:	e9cd 2104 	strd	r2, r1, [sp, #16]
   d7a8c:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   d7a90:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d7a92:	4604      	mov	r4, r0
   d7a94:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d7a96:	f7ff fb4c 	bl	d7132 <_ZN10RHDatagram9availableEv>
   d7a9a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d7a9e:	b920      	cbnz	r0, d7aaa <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   d7aa0:	2500      	movs	r5, #0
}
   d7aa2:	4628      	mov	r0, r5
   d7aa4:	b009      	add	sp, #36	; 0x24
   d7aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d7aaa:	f10d 031f 	add.w	r3, sp, #31
   d7aae:	9302      	str	r3, [sp, #8]
   d7ab0:	f10d 031e 	add.w	r3, sp, #30
   d7ab4:	9301      	str	r3, [sp, #4]
   d7ab6:	f10d 031d 	add.w	r3, sp, #29
   d7aba:	9300      	str	r3, [sp, #0]
   d7abc:	4620      	mov	r0, r4
   d7abe:	ab07      	add	r3, sp, #28
   d7ac0:	f7ff fb8e 	bl	d71e0 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d7ac4:	4605      	mov	r5, r0
   d7ac6:	2800      	cmp	r0, #0
   d7ac8:	d0ea      	beq.n	d7aa0 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   d7aca:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   d7ace:	2b00      	cmp	r3, #0
   d7ad0:	dbe6      	blt.n	d7aa0 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   d7ad2:	7922      	ldrb	r2, [r4, #4]
   d7ad4:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d7ad8:	429a      	cmp	r2, r3
   d7ada:	d106      	bne.n	d7aea <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   d7adc:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d7ae0:	f89d 101e 	ldrb.w	r1, [sp, #30]
   d7ae4:	4620      	mov	r0, r4
   d7ae6:	f7ff ff30 	bl	d794a <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   d7aea:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d7aee:	f89d 301e 	ldrb.w	r3, [sp, #30]
   d7af2:	4414      	add	r4, r2
   d7af4:	7c61      	ldrb	r1, [r4, #17]
   d7af6:	4299      	cmp	r1, r3
   d7af8:	d0d2      	beq.n	d7aa0 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   d7afa:	b106      	cbz	r6, d7afe <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x7c>
   d7afc:	7032      	strb	r2, [r6, #0]
		if (to)    *to =    _to;
   d7afe:	f1b9 0f00 	cmp.w	r9, #0
   d7b02:	d003      	beq.n	d7b0c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x8a>
   d7b04:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d7b08:	f889 2000 	strb.w	r2, [r9]
		if (id)    *id =    _id;
   d7b0c:	f1b8 0f00 	cmp.w	r8, #0
   d7b10:	d001      	beq.n	d7b16 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   d7b12:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   d7b16:	b117      	cbz	r7, d7b1e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9c>
   d7b18:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d7b1c:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   d7b1e:	7463      	strb	r3, [r4, #17]
		return true;
   d7b20:	e7bf      	b.n	d7aa2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000d7b22 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   d7b22:	4770      	bx	lr

000d7b24 <_ZN8RHRouter4initEv>:
{
   d7b24:	b510      	push	{r4, lr}
   d7b26:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   d7b28:	3004      	adds	r0, #4
   d7b2a:	f7ff fb33 	bl	d7194 <_ZN10RHDatagram4initEv>
    if (ret)
   d7b2e:	b110      	cbz	r0, d7b36 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   d7b30:	231e      	movs	r3, #30
   d7b32:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   d7b36:	bd10      	pop	{r4, pc}

000d7b38 <_ZN8RHRouter10getRouteToEh>:
{
   d7b38:	b510      	push	{r4, lr}
   d7b3a:	4602      	mov	r2, r0
   d7b3c:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   d7b3e:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   d7b42:	428c      	cmp	r4, r1
   d7b44:	d108      	bne.n	d7b58 <_ZN8RHRouter10getRouteToEh+0x20>
   d7b46:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   d7b4a:	b12c      	cbz	r4, d7b58 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   d7b4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d7b50:	f503 738c 	add.w	r3, r3, #280	; 0x118
   d7b54:	4418      	add	r0, r3
}
   d7b56:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7b58:	3301      	adds	r3, #1
   d7b5a:	2b0a      	cmp	r3, #10
   d7b5c:	f102 0203 	add.w	r2, r2, #3
   d7b60:	d1ed      	bne.n	d7b3e <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   d7b62:	2000      	movs	r0, #0
   d7b64:	e7f7      	b.n	d7b56 <_ZN8RHRouter10getRouteToEh+0x1e>

000d7b66 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   d7b66:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d7b68:	780b      	ldrb	r3, [r1, #0]
   d7b6a:	2bff      	cmp	r3, #255	; 0xff
{
   d7b6c:	4605      	mov	r5, r0
   d7b6e:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d7b70:	d006      	beq.n	d7b80 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   d7b72:	4619      	mov	r1, r3
   d7b74:	9201      	str	r2, [sp, #4]
   d7b76:	f7ff ffdf 	bl	d7b38 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   d7b7a:	b158      	cbz	r0, d7b94 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   d7b7c:	7843      	ldrb	r3, [r0, #1]
   d7b7e:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   d7b80:	4621      	mov	r1, r4
   d7b82:	1d28      	adds	r0, r5, #4
   d7b84:	f7ff fefa 	bl	d797c <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   d7b88:	2800      	cmp	r0, #0
   d7b8a:	bf14      	ite	ne
   d7b8c:	2000      	movne	r0, #0
   d7b8e:	2005      	moveq	r0, #5
}
   d7b90:	b003      	add	sp, #12
   d7b92:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d7b94:	2002      	movs	r0, #2
   d7b96:	e7fb      	b.n	d7b90 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000d7b98 <_ZN8RHRouter11deleteRouteEh>:
{
   d7b98:	b510      	push	{r4, lr}
   d7b9a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   d7b9e:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   d7ba0:	f1c1 0209 	rsb	r2, r1, #9
    memcpy(&_routes[index], &_routes[index+1], 
   d7ba4:	f503 708c 	add.w	r0, r3, #280	; 0x118
   d7ba8:	f203 111b 	addw	r1, r3, #283	; 0x11b
   d7bac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d7bb0:	4421      	add	r1, r4
   d7bb2:	4420      	add	r0, r4
   d7bb4:	f004 fc74 	bl	dc4a0 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   d7bb8:	2300      	movs	r3, #0
   d7bba:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
}
   d7bbe:	bd10      	pop	{r4, pc}

000d7bc0 <_ZN8RHRouter13deleteRouteToEh>:
{
   d7bc0:	b538      	push	{r3, r4, r5, lr}
   d7bc2:	460a      	mov	r2, r1
   d7bc4:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d7bc6:	f500 748c 	add.w	r4, r0, #280	; 0x118
   d7bca:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   d7bce:	b2d9      	uxtb	r1, r3
   d7bd0:	5d65      	ldrb	r5, [r4, r5]
   d7bd2:	4295      	cmp	r5, r2
   d7bd4:	d103      	bne.n	d7bde <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   d7bd6:	f7ff ffdf 	bl	d7b98 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   d7bda:	2001      	movs	r0, #1
}
   d7bdc:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7bde:	3301      	adds	r3, #1
   d7be0:	2b0a      	cmp	r3, #10
   d7be2:	d1f2      	bne.n	d7bca <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   d7be4:	2000      	movs	r0, #0
   d7be6:	e7f9      	b.n	d7bdc <_ZN8RHRouter13deleteRouteToEh+0x1c>

000d7be8 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   d7be8:	2100      	movs	r1, #0
   d7bea:	f7ff bfd5 	b.w	d7b98 <_ZN8RHRouter11deleteRouteEh>

000d7bee <_ZN8RHRouter10addRouteToEhhh>:
{
   d7bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7bf0:	4616      	mov	r6, r2
   d7bf2:	461f      	mov	r7, r3
   d7bf4:	4604      	mov	r4, r0
   d7bf6:	460d      	mov	r5, r1
   d7bf8:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d7bfa:	f500 728c 	add.w	r2, r0, #280	; 0x118
   d7bfe:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d7c02:	5c11      	ldrb	r1, [r2, r0]
   d7c04:	42a9      	cmp	r1, r5
   d7c06:	d105      	bne.n	d7c14 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   d7c08:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   d7c0a:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d7c0e:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   d7c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7c14:	3301      	adds	r3, #1
   d7c16:	2b0a      	cmp	r3, #10
   d7c18:	d1f1      	bne.n	d7bfe <_ZN8RHRouter10addRouteToEhhh+0x10>
   d7c1a:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   d7c1c:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   d7c20:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d7c24:	5c11      	ldrb	r1, [r2, r0]
   d7c26:	b919      	cbnz	r1, d7c30 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   d7c28:	4420      	add	r0, r4
   d7c2a:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   d7c2e:	e7ec      	b.n	d7c0a <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7c30:	3301      	adds	r3, #1
   d7c32:	2b0a      	cmp	r3, #10
   d7c34:	d1f4      	bne.n	d7c20 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   d7c36:	4620      	mov	r0, r4
   d7c38:	f7ff ffd6 	bl	d7be8 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7c3c:	4620      	mov	r0, r4
   d7c3e:	f104 031e 	add.w	r3, r4, #30
	if (_routes[i].state == Invalid)
   d7c42:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   d7c46:	b92a      	cbnz	r2, d7c54 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   d7c48:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   d7c4c:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d7c50:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7c54:	3003      	adds	r0, #3
   d7c56:	4298      	cmp	r0, r3
   d7c58:	d1f3      	bne.n	d7c42 <_ZN8RHRouter10addRouteToEhhh+0x54>
   d7c5a:	e7da      	b.n	d7c12 <_ZN8RHRouter10addRouteToEhhh+0x24>

000d7c5c <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7c5c:	f100 031e 	add.w	r3, r0, #30
	_routes[i].state = Invalid;
   d7c60:	2200      	movs	r2, #0
   d7c62:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7c66:	3003      	adds	r0, #3
   d7c68:	4298      	cmp	r0, r3
   d7c6a:	d1fa      	bne.n	d7c62 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   d7c6c:	4770      	bx	lr
	...

000d7c70 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   d7c70:	b510      	push	{r4, lr}
   d7c72:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   d7c74:	3004      	adds	r0, #4
   d7c76:	f7ff fe55 	bl	d7924 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   d7c7a:	4b05      	ldr	r3, [pc, #20]	; (d7c90 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   d7c7c:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d7c7e:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   d7c82:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d7c84:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   d7c88:	f7ff ffe8 	bl	d7c5c <_ZN8RHRouter17clearRoutingTableEv>
}
   d7c8c:	4620      	mov	r0, r4
   d7c8e:	bd10      	pop	{r4, pc}
   d7c90:	000dd200 	.word	0x000dd200

000d7c94 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   d7c94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d7c98:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d7c9a:	6840      	ldr	r0, [r0, #4]
{
   d7c9c:	9101      	str	r1, [sp, #4]
   d7c9e:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d7ca0:	6803      	ldr	r3, [r0, #0]
{
   d7ca2:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d7ca6:	699b      	ldr	r3, [r3, #24]
{
   d7ca8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d7cac:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d7cae:	4798      	blx	r3
   d7cb0:	f106 0805 	add.w	r8, r6, #5
   d7cb4:	4580      	cmp	r8, r0
   d7cb6:	d81c      	bhi.n	d7cf2 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   d7cb8:	4d10      	ldr	r5, [pc, #64]	; (d7cfc <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   d7cba:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   d7cbc:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   d7cc0:	2300      	movs	r3, #0
   d7cc2:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   d7cc4:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   d7cc8:	70eb      	strb	r3, [r5, #3]
   d7cca:	1c5a      	adds	r2, r3, #1
   d7ccc:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   d7cd0:	1d68      	adds	r0, r5, #5
   d7cd2:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   d7cd4:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   d7cd6:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   d7cda:	f004 fbe1 	bl	dc4a0 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d7cde:	6823      	ldr	r3, [r4, #0]
   d7ce0:	685b      	ldr	r3, [r3, #4]
   d7ce2:	fa5f f288 	uxtb.w	r2, r8
   d7ce6:	4629      	mov	r1, r5
   d7ce8:	4620      	mov	r0, r4
}
   d7cea:	b002      	add	sp, #8
   d7cec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d7cf0:	4718      	bx	r3
}
   d7cf2:	2001      	movs	r0, #1
   d7cf4:	b002      	add	sp, #8
   d7cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7cfa:	bf00      	nop
   d7cfc:	2003e43e 	.word	0x2003e43e

000d7d00 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   d7d00:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   d7d02:	f89d 4010 	ldrb.w	r4, [sp, #16]
   d7d06:	9401      	str	r4, [sp, #4]
   d7d08:	7a04      	ldrb	r4, [r0, #8]
   d7d0a:	9400      	str	r4, [sp, #0]
   d7d0c:	f7ff ffc2 	bl	d7c94 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   d7d10:	b002      	add	sp, #8
   d7d12:	bd10      	pop	{r4, pc}

000d7d14 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d7d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d18:	b087      	sub	sp, #28
   d7d1a:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d7d1c:	23ff      	movs	r3, #255	; 0xff
   d7d1e:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d7d22:	f10d 0317 	add.w	r3, sp, #23
   d7d26:	9302      	str	r3, [sp, #8]
   d7d28:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d7dfc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   d7d2c:	f10d 0316 	add.w	r3, sp, #22
   d7d30:	9301      	str	r3, [sp, #4]
   d7d32:	f10d 0315 	add.w	r3, sp, #21
   d7d36:	9300      	str	r3, [sp, #0]
{  
   d7d38:	4604      	mov	r4, r0
   d7d3a:	4688      	mov	r8, r1
   d7d3c:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d7d3e:	ab05      	add	r3, sp, #20
   d7d40:	f10d 0213 	add.w	r2, sp, #19
   d7d44:	4649      	mov	r1, r9
   d7d46:	3004      	adds	r0, #4
{  
   d7d48:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d7d4c:	f7ff fe99 	bl	d7a82 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   d7d50:	4605      	mov	r5, r0
   d7d52:	b908      	cbnz	r0, d7d58 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   d7d54:	2500      	movs	r5, #0
   d7d56:	e038      	b.n	d7dca <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   d7d58:	6823      	ldr	r3, [r4, #0]
   d7d5a:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d7d5e:	681b      	ldr	r3, [r3, #0]
   d7d60:	4649      	mov	r1, r9
   d7d62:	4620      	mov	r0, r4
   d7d64:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   d7d66:	f899 3000 	ldrb.w	r3, [r9]
   d7d6a:	7a22      	ldrb	r2, [r4, #8]
   d7d6c:	429a      	cmp	r2, r3
   d7d6e:	d001      	beq.n	d7d74 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   d7d70:	2bff      	cmp	r3, #255	; 0xff
   d7d72:	d12e      	bne.n	d7dd2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   d7d74:	b117      	cbz	r7, d7d7c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   d7d76:	4b21      	ldr	r3, [pc, #132]	; (d7dfc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d7d78:	785b      	ldrb	r3, [r3, #1]
   d7d7a:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   d7d7c:	f1bb 0f00 	cmp.w	fp, #0
   d7d80:	d003      	beq.n	d7d8a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   d7d82:	4b1e      	ldr	r3, [pc, #120]	; (d7dfc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d7d84:	781b      	ldrb	r3, [r3, #0]
   d7d86:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   d7d8a:	f1ba 0f00 	cmp.w	sl, #0
   d7d8e:	d003      	beq.n	d7d98 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d7d90:	4b1a      	ldr	r3, [pc, #104]	; (d7dfc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d7d92:	78db      	ldrb	r3, [r3, #3]
   d7d94:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   d7d98:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d7d9a:	b11b      	cbz	r3, d7da4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d7d9c:	4b17      	ldr	r3, [pc, #92]	; (d7dfc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d7d9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d7da0:	791b      	ldrb	r3, [r3, #4]
   d7da2:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   d7da4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7da6:	b11b      	cbz	r3, d7db0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d7da8:	4b14      	ldr	r3, [pc, #80]	; (d7dfc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d7daa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d7dac:	789b      	ldrb	r3, [r3, #2]
   d7dae:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d7db0:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   d7db4:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d7db6:	4912      	ldr	r1, [pc, #72]	; (d7e00 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d7db8:	3b05      	subs	r3, #5
   d7dba:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d7dbc:	429a      	cmp	r2, r3
		*len = msgLen;
   d7dbe:	bf88      	it	hi
   d7dc0:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d7dc2:	7832      	ldrb	r2, [r6, #0]
   d7dc4:	4640      	mov	r0, r8
   d7dc6:	f004 fb6b 	bl	dc4a0 <memcpy>
}
   d7dca:	4628      	mov	r0, r5
   d7dcc:	b007      	add	sp, #28
   d7dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   d7dd2:	f899 3002 	ldrb.w	r3, [r9, #2]
   d7dd6:	1c5a      	adds	r2, r3, #1
   d7dd8:	f889 2002 	strb.w	r2, [r9, #2]
   d7ddc:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   d7de0:	429a      	cmp	r2, r3
   d7de2:	d9b7      	bls.n	d7d54 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   d7de4:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   d7de8:	2b00      	cmp	r3, #0
   d7dea:	d0b3      	beq.n	d7d54 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   d7dec:	6823      	ldr	r3, [r4, #0]
   d7dee:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d7df2:	685b      	ldr	r3, [r3, #4]
   d7df4:	4649      	mov	r1, r9
   d7df6:	4620      	mov	r0, r4
   d7df8:	4798      	blx	r3
   d7dfa:	e7ab      	b.n	d7d54 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   d7dfc:	2003e43e 	.word	0x2003e43e
   d7e00:	2003e443 	.word	0x2003e443

000d7e04 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   d7e04:	b510      	push	{r4, lr}
   d7e06:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   d7e08:	6a00      	ldr	r0, [r0, #32]
   d7e0a:	6803      	ldr	r3, [r0, #0]
   d7e0c:	68db      	ldr	r3, [r3, #12]
   d7e0e:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   d7e10:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   d7e14:	28ff      	cmp	r0, #255	; 0xff
   d7e16:	d002      	beq.n	d7e1e <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   d7e18:	2101      	movs	r1, #1
   d7e1a:	f003 fe9d 	bl	dbb58 <pinMode>

    deselectSlave();
   d7e1e:	6823      	ldr	r3, [r4, #0]
   d7e20:	4620      	mov	r0, r4
   d7e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d7e24:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   d7e26:	2064      	movs	r0, #100	; 0x64
   d7e28:	f001 fb06 	bl	d9438 <delay>
#endif
    
    return true;
}
   d7e2c:	2001      	movs	r0, #1
   d7e2e:	bd10      	pop	{r4, pc}

000d7e30 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   d7e30:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d7e34:	2100      	movs	r1, #0
   d7e36:	f003 bea0 	b.w	dbb7a <digitalWrite>

000d7e3a <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   d7e3a:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d7e3e:	2101      	movs	r1, #1
   d7e40:	f003 be9b 	b.w	dbb7a <digitalWrite>

000d7e44 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   d7e44:	b570      	push	{r4, r5, r6, lr}
   d7e46:	4604      	mov	r4, r0
   d7e48:	460d      	mov	r5, r1
   d7e4a:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   d7e4c:	f7ff fa7c 	bl	d7348 <_ZN15RHGenericDriverC1Ev>
   d7e50:	4b03      	ldr	r3, [pc, #12]	; (d7e60 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   d7e52:	6023      	str	r3, [r4, #0]
   d7e54:	6226      	str	r6, [r4, #32]
   d7e56:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   d7e5a:	4620      	mov	r0, r4
   d7e5c:	bd70      	pop	{r4, r5, r6, pc}
   d7e5e:	bf00      	nop
   d7e60:	000dd210 	.word	0x000dd210

000d7e64 <_ZN11RHSPIDriver7spiReadEh>:
{
   d7e64:	b538      	push	{r3, r4, r5, lr}
   d7e66:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d7e68:	6a00      	ldr	r0, [r0, #32]
   d7e6a:	6803      	ldr	r3, [r0, #0]
   d7e6c:	6a1b      	ldr	r3, [r3, #32]
{
   d7e6e:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d7e70:	4798      	blx	r3
    selectSlave();
   d7e72:	6823      	ldr	r3, [r4, #0]
   d7e74:	4620      	mov	r0, r4
   d7e76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d7e78:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   d7e7a:	6a20      	ldr	r0, [r4, #32]
   d7e7c:	6803      	ldr	r3, [r0, #0]
   d7e7e:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d7e82:	681b      	ldr	r3, [r3, #0]
   d7e84:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d7e86:	6a20      	ldr	r0, [r4, #32]
   d7e88:	6803      	ldr	r3, [r0, #0]
   d7e8a:	2100      	movs	r1, #0
   d7e8c:	681b      	ldr	r3, [r3, #0]
   d7e8e:	4798      	blx	r3
    deselectSlave();
   d7e90:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d7e92:	4605      	mov	r5, r0
    deselectSlave();
   d7e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d7e96:	4620      	mov	r0, r4
   d7e98:	4798      	blx	r3
    _spi.endTransaction();
   d7e9a:	6a20      	ldr	r0, [r4, #32]
   d7e9c:	6803      	ldr	r3, [r0, #0]
   d7e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7ea0:	4798      	blx	r3
}
   d7ea2:	4628      	mov	r0, r5
   d7ea4:	bd38      	pop	{r3, r4, r5, pc}

000d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   d7ea6:	b570      	push	{r4, r5, r6, lr}
   d7ea8:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d7eaa:	6a00      	ldr	r0, [r0, #32]
   d7eac:	6803      	ldr	r3, [r0, #0]
   d7eae:	6a1b      	ldr	r3, [r3, #32]
{
   d7eb0:	4616      	mov	r6, r2
   d7eb2:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d7eb4:	4798      	blx	r3
    selectSlave();
   d7eb6:	6823      	ldr	r3, [r4, #0]
   d7eb8:	4620      	mov	r0, r4
   d7eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d7ebc:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   d7ebe:	6a20      	ldr	r0, [r4, #32]
   d7ec0:	6803      	ldr	r3, [r0, #0]
   d7ec2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d7ec6:	681b      	ldr	r3, [r3, #0]
   d7ec8:	4798      	blx	r3
   d7eca:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   d7ecc:	6a20      	ldr	r0, [r4, #32]
   d7ece:	6803      	ldr	r3, [r0, #0]
   d7ed0:	4631      	mov	r1, r6
   d7ed2:	681b      	ldr	r3, [r3, #0]
   d7ed4:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d7ed6:	2001      	movs	r0, #1
   d7ed8:	f000 ff28 	bl	d8d2c <HAL_Delay_Microseconds>
    deselectSlave();
   d7edc:	6823      	ldr	r3, [r4, #0]
   d7ede:	4620      	mov	r0, r4
   d7ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d7ee2:	4798      	blx	r3
    _spi.endTransaction();
   d7ee4:	6a20      	ldr	r0, [r4, #32]
   d7ee6:	6803      	ldr	r3, [r0, #0]
   d7ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7eea:	4798      	blx	r3
}
   d7eec:	4628      	mov	r0, r5
   d7eee:	bd70      	pop	{r4, r5, r6, pc}

000d7ef0 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   d7ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ef2:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d7ef4:	6a00      	ldr	r0, [r0, #32]
{
   d7ef6:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d7ef8:	6803      	ldr	r3, [r0, #0]
   d7efa:	6a1b      	ldr	r3, [r3, #32]
{
   d7efc:	460f      	mov	r7, r1
   d7efe:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d7f00:	4798      	blx	r3
    selectSlave();
   d7f02:	6823      	ldr	r3, [r4, #0]
   d7f04:	4620      	mov	r0, r4
   d7f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d7f08:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   d7f0a:	6a20      	ldr	r0, [r4, #32]
   d7f0c:	6803      	ldr	r3, [r0, #0]
   d7f0e:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   d7f12:	681b      	ldr	r3, [r3, #0]
   d7f14:	4798      	blx	r3
   d7f16:	442e      	add	r6, r5
   d7f18:	4607      	mov	r7, r0
    while (len--)
   d7f1a:	42b5      	cmp	r5, r6
   d7f1c:	d007      	beq.n	d7f2e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   d7f1e:	6a20      	ldr	r0, [r4, #32]
   d7f20:	6803      	ldr	r3, [r0, #0]
   d7f22:	2100      	movs	r1, #0
   d7f24:	681b      	ldr	r3, [r3, #0]
   d7f26:	4798      	blx	r3
   d7f28:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   d7f2c:	e7f5      	b.n	d7f1a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   d7f2e:	6823      	ldr	r3, [r4, #0]
   d7f30:	4620      	mov	r0, r4
   d7f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d7f34:	4798      	blx	r3
    _spi.endTransaction();
   d7f36:	6a20      	ldr	r0, [r4, #32]
   d7f38:	6803      	ldr	r3, [r0, #0]
   d7f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7f3c:	4798      	blx	r3
}
   d7f3e:	4638      	mov	r0, r7
   d7f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7f42 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   d7f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f44:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d7f46:	6a00      	ldr	r0, [r0, #32]
{
   d7f48:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d7f4a:	6803      	ldr	r3, [r0, #0]
   d7f4c:	6a1b      	ldr	r3, [r3, #32]
{
   d7f4e:	460f      	mov	r7, r1
   d7f50:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d7f52:	4798      	blx	r3
    selectSlave();
   d7f54:	6823      	ldr	r3, [r4, #0]
   d7f56:	4620      	mov	r0, r4
   d7f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d7f5a:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   d7f5c:	6a20      	ldr	r0, [r4, #32]
   d7f5e:	6803      	ldr	r3, [r0, #0]
   d7f60:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d7f64:	681b      	ldr	r3, [r3, #0]
   d7f66:	4798      	blx	r3
   d7f68:	442e      	add	r6, r5
   d7f6a:	4607      	mov	r7, r0
    while (len--)
   d7f6c:	42b5      	cmp	r5, r6
   d7f6e:	d006      	beq.n	d7f7e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   d7f70:	6a20      	ldr	r0, [r4, #32]
   d7f72:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7f76:	6803      	ldr	r3, [r0, #0]
   d7f78:	681b      	ldr	r3, [r3, #0]
   d7f7a:	4798      	blx	r3
    while (len--)
   d7f7c:	e7f6      	b.n	d7f6c <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   d7f7e:	6823      	ldr	r3, [r4, #0]
   d7f80:	4620      	mov	r0, r4
   d7f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d7f84:	4798      	blx	r3
    _spi.endTransaction();
   d7f86:	6a20      	ldr	r0, [r4, #32]
   d7f88:	6803      	ldr	r3, [r0, #0]
   d7f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7f8c:	4798      	blx	r3
}
   d7f8e:	4638      	mov	r0, r7
   d7f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7f92 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   d7f92:	6a00      	ldr	r0, [r0, #32]
   d7f94:	6803      	ldr	r3, [r0, #0]
   d7f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7f98:	4718      	bx	r3

000d7f9a <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   d7f9a:	2001      	movs	r0, #1
   d7f9c:	4770      	bx	lr

000d7f9e <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   d7f9e:	20fb      	movs	r0, #251	; 0xfb
   d7fa0:	4770      	bx	lr

000d7fa2 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   d7fa2:	4770      	bx	lr

000d7fa4 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   d7fa4:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   d7fa6:	7903      	ldrb	r3, [r0, #4]
   d7fa8:	2b05      	cmp	r3, #5
{
   d7faa:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   d7fac:	d010      	beq.n	d7fd0 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   d7fae:	6803      	ldr	r3, [r0, #0]
   d7fb0:	2105      	movs	r1, #5
   d7fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d7fb6:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   d7fb8:	2207      	movs	r2, #7
   d7fba:	2101      	movs	r1, #1
   d7fbc:	4620      	mov	r0, r4
   d7fbe:	f7ff ff72 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   d7fc2:	2280      	movs	r2, #128	; 0x80
   d7fc4:	2140      	movs	r1, #64	; 0x40
   d7fc6:	4620      	mov	r0, r4
   d7fc8:	f7ff ff6d 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   d7fcc:	2305      	movs	r3, #5
   d7fce:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   d7fd0:	7923      	ldrb	r3, [r4, #4]
   d7fd2:	2b05      	cmp	r3, #5
   d7fd4:	d0fc      	beq.n	d7fd0 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   d7fd6:	7e20      	ldrb	r0, [r4, #24]
}
   d7fd8:	bd10      	pop	{r4, pc}

000d7fda <_ZN7RH_RF95D0Ev>:
   d7fda:	b510      	push	{r4, lr}
   d7fdc:	f44f 7198 	mov.w	r1, #304	; 0x130
   d7fe0:	4604      	mov	r4, r0
   d7fe2:	f003 fe33 	bl	dbc4c <_ZdlPvj>
   d7fe6:	4620      	mov	r0, r4
   d7fe8:	bd10      	pop	{r4, pc}

000d7fea <_ZN7RH_RF955sleepEv>:
{
   d7fea:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   d7fec:	7903      	ldrb	r3, [r0, #4]
   d7fee:	2b01      	cmp	r3, #1
{
   d7ff0:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   d7ff2:	d00b      	beq.n	d800c <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   d7ff4:	6803      	ldr	r3, [r0, #0]
   d7ff6:	2101      	movs	r1, #1
   d7ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d7ffc:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   d7ffe:	2200      	movs	r2, #0
   d8000:	2101      	movs	r1, #1
   d8002:	4620      	mov	r0, r4
   d8004:	f7ff ff4f 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   d8008:	2301      	movs	r3, #1
   d800a:	7123      	strb	r3, [r4, #4]
}
   d800c:	2001      	movs	r0, #1
   d800e:	bd10      	pop	{r4, pc}

000d8010 <_ZN7RH_RF954recvEPhS0_>:
{
   d8010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   d8012:	6803      	ldr	r3, [r0, #0]
   d8014:	68db      	ldr	r3, [r3, #12]
{
   d8016:	4604      	mov	r4, r0
   d8018:	460f      	mov	r7, r1
   d801a:	4615      	mov	r5, r2
    if (!available())
   d801c:	4798      	blx	r3
   d801e:	4606      	mov	r6, r0
   d8020:	b1b0      	cbz	r0, d8050 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   d8022:	b187      	cbz	r7, d8046 <_ZN7RH_RF954recvEPhS0_+0x36>
   d8024:	b17d      	cbz	r5, d8046 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   d8026:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d802a:	782a      	ldrb	r2, [r5, #0]
   d802c:	3b03      	subs	r3, #3
   d802e:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   d8030:	bfde      	ittt	le
   d8032:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   d8036:	3b04      	suble	r3, #4
   d8038:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   d803a:	782a      	ldrb	r2, [r5, #0]
   d803c:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d8040:	4638      	mov	r0, r7
   d8042:	f004 fa2d 	bl	dc4a0 <memcpy>
    _rxBufValid = false;
   d8046:	2300      	movs	r3, #0
   d8048:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d804c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   d8050:	4630      	mov	r0, r6
   d8052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8054 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   d8054:	b538      	push	{r3, r4, r5, lr}
   d8056:	4604      	mov	r4, r0
   d8058:	4615      	mov	r5, r2
    _rxBufValid(0)
   d805a:	461a      	mov	r2, r3
   d805c:	f7ff fef2 	bl	d7e44 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   d8060:	4b09      	ldr	r3, [pc, #36]	; (d8088 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   d8062:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   d8064:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   d8066:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   d8068:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   d806c:	2201      	movs	r2, #1
    _rxBufValid(0)
   d806e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   d8072:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   d8076:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   d807a:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   d807e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   d8082:	4620      	mov	r0, r4
   d8084:	bd38      	pop	{r3, r4, r5, pc}
   d8086:	bf00      	nop
   d8088:	000dd2a8 	.word	0x000dd2a8

000d808c <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   d808c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   d8090:	2b03      	cmp	r3, #3
   d8092:	d91b      	bls.n	d80cc <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   d8094:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d8098:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   d809a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   d809e:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   d80a0:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   d80a4:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   d80a6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d80aa:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   d80ac:	7983      	ldrb	r3, [r0, #6]
   d80ae:	b933      	cbnz	r3, d80be <_ZN7RH_RF9513validateRxBufEv+0x32>
   d80b0:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   d80b2:	7942      	ldrb	r2, [r0, #5]
   d80b4:	429a      	cmp	r2, r3
   d80b6:	d002      	beq.n	d80be <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   d80b8:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   d80ba:	2bff      	cmp	r3, #255	; 0xff
   d80bc:	d106      	bne.n	d80cc <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   d80be:	8a83      	ldrh	r3, [r0, #20]
   d80c0:	3301      	adds	r3, #1
   d80c2:	b29b      	uxth	r3, r3
   d80c4:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   d80c6:	2301      	movs	r3, #1
   d80c8:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   d80cc:	4770      	bx	lr
	...

000d80d0 <_ZN7RH_RF9512setFrequencyEf>:
{
   d80d0:	b538      	push	{r3, r4, r5, lr}
   d80d2:	4604      	mov	r4, r0
   d80d4:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d80d8:	ee10 0a10 	vmov	r0, s0
{
   d80dc:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d80e0:	f003 ff28 	bl	dbf34 <__aeabi_f2d>
   d80e4:	a317      	add	r3, pc, #92	; (adr r3, d8144 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   d80e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d80ea:	f003 ff7b 	bl	dbfe4 <__aeabi_dmul>
   d80ee:	a317      	add	r3, pc, #92	; (adr r3, d814c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   d80f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d80f4:	f004 f8a0 	bl	dc238 <__aeabi_ddiv>
   d80f8:	f004 f986 	bl	dc408 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d80fc:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d80fe:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d8100:	f3c0 4207 	ubfx	r2, r0, #16, #8
   d8104:	4620      	mov	r0, r4
   d8106:	f7ff fece 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   d810a:	f3c5 2207 	ubfx	r2, r5, #8, #8
   d810e:	2107      	movs	r1, #7
   d8110:	4620      	mov	r0, r4
   d8112:	f7ff fec8 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   d8116:	b2ea      	uxtb	r2, r5
   d8118:	2108      	movs	r1, #8
   d811a:	4620      	mov	r0, r4
   d811c:	f7ff fec3 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   d8120:	eddf 7a07 	vldr	s15, [pc, #28]	; d8140 <_ZN7RH_RF9512setFrequencyEf+0x70>
   d8124:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   d8128:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   d812c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8130:	bfac      	ite	ge
   d8132:	2301      	movge	r3, #1
   d8134:	2300      	movlt	r3, #0
}
   d8136:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   d8138:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   d813c:	bd38      	pop	{r3, r4, r5, pc}
   d813e:	bf00      	nop
   d8140:	4442c000 	.word	0x4442c000
   d8144:	00000000 	.word	0x00000000
   d8148:	412e8480 	.word	0x412e8480
   d814c:	00000000 	.word	0x00000000
   d8150:	404e8480 	.word	0x404e8480

000d8154 <_ZN7RH_RF9511setModeIdleEv>:
{
   d8154:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   d8156:	7903      	ldrb	r3, [r0, #4]
   d8158:	2b02      	cmp	r3, #2
{
   d815a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   d815c:	d00b      	beq.n	d8176 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   d815e:	6803      	ldr	r3, [r0, #0]
   d8160:	2102      	movs	r1, #2
   d8162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d8166:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   d8168:	2201      	movs	r2, #1
   d816a:	4611      	mov	r1, r2
   d816c:	4620      	mov	r0, r4
   d816e:	f7ff fe9a 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   d8172:	2302      	movs	r3, #2
   d8174:	7123      	strb	r3, [r4, #4]
}
   d8176:	bd10      	pop	{r4, pc}

000d8178 <_ZN7RH_RF9515handleInterruptEv>:
{
   d8178:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d817a:	2112      	movs	r1, #18
{
   d817c:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d817e:	f7ff fe71 	bl	d7e64 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d8182:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d8184:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d8186:	4620      	mov	r0, r4
   d8188:	f7ff fe6c 	bl	d7e64 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d818c:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d818e:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d8190:	2112      	movs	r1, #18
   d8192:	4620      	mov	r0, r4
   d8194:	f7ff fe87 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   d8198:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   d819a:	2b04      	cmp	r3, #4
   d819c:	d107      	bne.n	d81ae <_ZN7RH_RF9515handleInterruptEv+0x36>
   d819e:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   d81a2:	d117      	bne.n	d81d4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   d81a4:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   d81a8:	b10b      	cbz	r3, d81ae <_ZN7RH_RF9515handleInterruptEv+0x36>
   d81aa:	0670      	lsls	r0, r6, #25
   d81ac:	d512      	bpl.n	d81d4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   d81ae:	7923      	ldrb	r3, [r4, #4]
   d81b0:	2b04      	cmp	r3, #4
   d81b2:	d101      	bne.n	d81b8 <_ZN7RH_RF9515handleInterruptEv+0x40>
   d81b4:	0669      	lsls	r1, r5, #25
   d81b6:	d422      	bmi.n	d81fe <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   d81b8:	7923      	ldrb	r3, [r4, #4]
   d81ba:	2b03      	cmp	r3, #3
   d81bc:	d101      	bne.n	d81c2 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   d81be:	072a      	lsls	r2, r5, #28
   d81c0:	d469      	bmi.n	d8296 <_ZN7RH_RF9515handleInterruptEv+0x11e>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   d81c2:	7923      	ldrb	r3, [r4, #4]
   d81c4:	2b05      	cmp	r3, #5
   d81c6:	d10e      	bne.n	d81e6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   d81c8:	076b      	lsls	r3, r5, #29
   d81ca:	d50c      	bpl.n	d81e6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   d81cc:	f005 0501 	and.w	r5, r5, #1
   d81d0:	7625      	strb	r5, [r4, #24]
   d81d2:	e059      	b.n	d8288 <_ZN7RH_RF9515handleInterruptEv+0x110>
	_rxBad++;
   d81d4:	8a63      	ldrh	r3, [r4, #18]
   d81d6:	3301      	adds	r3, #1
   d81d8:	b29b      	uxth	r3, r3
   d81da:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   d81dc:	2300      	movs	r3, #0
   d81de:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d81e2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d81e6:	22ff      	movs	r2, #255	; 0xff
   d81e8:	2112      	movs	r1, #18
   d81ea:	4620      	mov	r0, r4
   d81ec:	f7ff fe5b 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d81f0:	4620      	mov	r0, r4
   d81f2:	22ff      	movs	r2, #255	; 0xff
}
   d81f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d81f8:	2112      	movs	r1, #18
   d81fa:	f7ff be54 	b.w	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d81fe:	2113      	movs	r1, #19
   d8200:	4620      	mov	r0, r4
   d8202:	f7ff fe2f 	bl	d7e64 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d8206:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d8208:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d820a:	4620      	mov	r0, r4
   d820c:	f7ff fe2a 	bl	d7e64 <_ZN11RHSPIDriver7spiReadEh>
   d8210:	210d      	movs	r1, #13
   d8212:	4602      	mov	r2, r0
   d8214:	4620      	mov	r0, r4
   d8216:	f7ff fe46 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   d821a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   d821e:	462b      	mov	r3, r5
   d8220:	2100      	movs	r1, #0
   d8222:	4620      	mov	r0, r4
   d8224:	f7ff fe64 	bl	d7ef0 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d8228:	2119      	movs	r1, #25
	_bufLen = len;
   d822a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d822e:	4620      	mov	r0, r4
   d8230:	f7ff fe18 	bl	d7e64 <_ZN11RHSPIDriver7spiReadEh>
   d8234:	b240      	sxtb	r0, r0
   d8236:	2800      	cmp	r0, #0
   d8238:	bfb8      	it	lt
   d823a:	3003      	addlt	r0, #3
   d823c:	1080      	asrs	r0, r0, #2
   d823e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d8242:	211a      	movs	r1, #26
   d8244:	4620      	mov	r0, r4
   d8246:	f7ff fe0d 	bl	d7e64 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   d824a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d824e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   d8250:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d8252:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d8254:	bfa9      	itett	ge
   d8256:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   d8258:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d825a:	b21b      	sxthge	r3, r3
   d825c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   d825e:	bfb2      	itee	lt
   d8260:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d8262:	220f      	movge	r2, #15
   d8264:	fb93 f3f2 	sdivge	r3, r3, r2
   d8268:	b21b      	sxth	r3, r3
   d826a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   d826c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   d8270:	b173      	cbz	r3, d8290 <_ZN7RH_RF9515handleInterruptEv+0x118>
	    _lastRssi -= 157;
   d8272:	8a23      	ldrh	r3, [r4, #16]
   d8274:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   d8276:	b21b      	sxth	r3, r3
   d8278:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   d827a:	4620      	mov	r0, r4
   d827c:	f7ff ff06 	bl	d808c <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   d8280:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   d8284:	2b00      	cmp	r3, #0
   d8286:	d0ae      	beq.n	d81e6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   d8288:	4620      	mov	r0, r4
   d828a:	f7ff ff63 	bl	d8154 <_ZN7RH_RF9511setModeIdleEv>
   d828e:	e7aa      	b.n	d81e6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   d8290:	8a23      	ldrh	r3, [r4, #16]
   d8292:	3ba4      	subs	r3, #164	; 0xa4
   d8294:	e7ef      	b.n	d8276 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   d8296:	8ae3      	ldrh	r3, [r4, #22]
   d8298:	3301      	adds	r3, #1
   d829a:	b29b      	uxth	r3, r3
   d829c:	82e3      	strh	r3, [r4, #22]
	setModeIdle();
   d829e:	e7f3      	b.n	d8288 <_ZN7RH_RF9515handleInterruptEv+0x110>

000d82a0 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   d82a0:	4b02      	ldr	r3, [pc, #8]	; (d82ac <_ZN7RH_RF954isr0Ev+0xc>)
   d82a2:	6818      	ldr	r0, [r3, #0]
   d82a4:	b108      	cbz	r0, d82aa <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   d82a6:	f7ff bf67 	b.w	d8178 <_ZN7RH_RF9515handleInterruptEv>
}
   d82aa:	4770      	bx	lr
   d82ac:	2003e540 	.word	0x2003e540

000d82b0 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   d82b0:	4b02      	ldr	r3, [pc, #8]	; (d82bc <_ZN7RH_RF954isr1Ev+0xc>)
   d82b2:	6858      	ldr	r0, [r3, #4]
   d82b4:	b108      	cbz	r0, d82ba <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   d82b6:	f7ff bf5f 	b.w	d8178 <_ZN7RH_RF9515handleInterruptEv>
}
   d82ba:	4770      	bx	lr
   d82bc:	2003e540 	.word	0x2003e540

000d82c0 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   d82c0:	4b02      	ldr	r3, [pc, #8]	; (d82cc <_ZN7RH_RF954isr2Ev+0xc>)
   d82c2:	6898      	ldr	r0, [r3, #8]
   d82c4:	b108      	cbz	r0, d82ca <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   d82c6:	f7ff bf57 	b.w	d8178 <_ZN7RH_RF9515handleInterruptEv>
}
   d82ca:	4770      	bx	lr
   d82cc:	2003e540 	.word	0x2003e540

000d82d0 <_ZN7RH_RF959setModeRxEv>:
{
   d82d0:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   d82d2:	7903      	ldrb	r3, [r0, #4]
   d82d4:	2b04      	cmp	r3, #4
{
   d82d6:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   d82d8:	d010      	beq.n	d82fc <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   d82da:	6803      	ldr	r3, [r0, #0]
   d82dc:	2104      	movs	r1, #4
   d82de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d82e2:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   d82e4:	2205      	movs	r2, #5
   d82e6:	2101      	movs	r1, #1
   d82e8:	4620      	mov	r0, r4
   d82ea:	f7ff fddc 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   d82ee:	2200      	movs	r2, #0
   d82f0:	2140      	movs	r1, #64	; 0x40
   d82f2:	4620      	mov	r0, r4
   d82f4:	f7ff fdd7 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   d82f8:	2304      	movs	r3, #4
   d82fa:	7123      	strb	r3, [r4, #4]
}
   d82fc:	bd10      	pop	{r4, pc}

000d82fe <_ZN7RH_RF959availableEv>:
{
   d82fe:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   d8300:	7903      	ldrb	r3, [r0, #4]
   d8302:	2b03      	cmp	r3, #3
{
   d8304:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   d8306:	d005      	beq.n	d8314 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   d8308:	f7ff ffe2 	bl	d82d0 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   d830c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   d8310:	b2c0      	uxtb	r0, r0
}
   d8312:	bd10      	pop	{r4, pc}
	return false;
   d8314:	2000      	movs	r0, #0
   d8316:	e7fc      	b.n	d8312 <_ZN7RH_RF959availableEv+0x14>

000d8318 <_ZN7RH_RF959setModeTxEv>:
{
   d8318:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   d831a:	7903      	ldrb	r3, [r0, #4]
   d831c:	2b03      	cmp	r3, #3
{
   d831e:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   d8320:	d010      	beq.n	d8344 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   d8322:	6803      	ldr	r3, [r0, #0]
   d8324:	2103      	movs	r1, #3
   d8326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d832a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   d832c:	2203      	movs	r2, #3
   d832e:	2101      	movs	r1, #1
   d8330:	4620      	mov	r0, r4
   d8332:	f7ff fdb8 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   d8336:	2240      	movs	r2, #64	; 0x40
   d8338:	4611      	mov	r1, r2
   d833a:	4620      	mov	r0, r4
   d833c:	f7ff fdb3 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   d8340:	2303      	movs	r3, #3
   d8342:	7123      	strb	r3, [r4, #4]
}
   d8344:	bd10      	pop	{r4, pc}

000d8346 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d8346:	2afb      	cmp	r2, #251	; 0xfb
{
   d8348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d834a:	4604      	mov	r4, r0
   d834c:	460f      	mov	r7, r1
   d834e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d8350:	d902      	bls.n	d8358 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   d8352:	2600      	movs	r6, #0
}
   d8354:	4630      	mov	r0, r6
   d8356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   d8358:	6803      	ldr	r3, [r0, #0]
   d835a:	6a1b      	ldr	r3, [r3, #32]
   d835c:	4798      	blx	r3
    setModeIdle();
   d835e:	4620      	mov	r0, r4
   d8360:	f7ff fef8 	bl	d8154 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   d8364:	6823      	ldr	r3, [r4, #0]
   d8366:	4620      	mov	r0, r4
   d8368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d836a:	4798      	blx	r3
   d836c:	4606      	mov	r6, r0
   d836e:	2800      	cmp	r0, #0
   d8370:	d0ef      	beq.n	d8352 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   d8372:	2200      	movs	r2, #0
   d8374:	210d      	movs	r1, #13
   d8376:	4620      	mov	r0, r4
   d8378:	f7ff fd95 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   d837c:	7ae2      	ldrb	r2, [r4, #11]
   d837e:	2100      	movs	r1, #0
   d8380:	4620      	mov	r0, r4
   d8382:	f7ff fd90 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   d8386:	7b22      	ldrb	r2, [r4, #12]
   d8388:	2100      	movs	r1, #0
   d838a:	4620      	mov	r0, r4
   d838c:	f7ff fd8b 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   d8390:	7b62      	ldrb	r2, [r4, #13]
   d8392:	2100      	movs	r1, #0
   d8394:	4620      	mov	r0, r4
   d8396:	f7ff fd86 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   d839a:	7ba2      	ldrb	r2, [r4, #14]
   d839c:	2100      	movs	r1, #0
   d839e:	4620      	mov	r0, r4
   d83a0:	f7ff fd81 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   d83a4:	462b      	mov	r3, r5
   d83a6:	463a      	mov	r2, r7
   d83a8:	2100      	movs	r1, #0
   d83aa:	4620      	mov	r0, r4
   d83ac:	f7ff fdc9 	bl	d7f42 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   d83b0:	1d2a      	adds	r2, r5, #4
   d83b2:	b2d2      	uxtb	r2, r2
   d83b4:	2122      	movs	r1, #34	; 0x22
   d83b6:	4620      	mov	r0, r4
   d83b8:	f7ff fd75 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   d83bc:	4620      	mov	r0, r4
   d83be:	f7ff ffab 	bl	d8318 <_ZN7RH_RF959setModeTxEv>
    return true;
   d83c2:	e7c7      	b.n	d8354 <_ZN7RH_RF954sendEPKhh+0xe>

000d83c4 <_ZN7RH_RF9510setTxPowerEab>:
{
   d83c4:	b538      	push	{r3, r4, r5, lr}
   d83c6:	4605      	mov	r5, r0
   d83c8:	460c      	mov	r4, r1
    _useRFO = useRFO;
   d83ca:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   d83ce:	b172      	cbz	r2, d83ee <_ZN7RH_RF9510setTxPowerEab+0x2a>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   d83d0:	f381 0204 	usat	r2, #4, r1
   d83d4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d83d8:	b2d2      	uxtb	r2, r2
   d83da:	2109      	movs	r1, #9
   d83dc:	f7ff fd63 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d83e0:	2204      	movs	r2, #4
   d83e2:	214d      	movs	r1, #77	; 0x4d
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d83e4:	4628      	mov	r0, r5
}
   d83e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d83ea:	f7ff bd5c 	b.w	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
	if (power > 20)
   d83ee:	2914      	cmp	r1, #20
   d83f0:	dc10      	bgt.n	d8414 <_ZN7RH_RF9510setTxPowerEab+0x50>
	if (power < 2)
   d83f2:	2901      	cmp	r1, #1
   d83f4:	dd10      	ble.n	d8418 <_ZN7RH_RF9510setTxPowerEab+0x54>
	if (power > 17)
   d83f6:	2911      	cmp	r1, #17
   d83f8:	dd0f      	ble.n	d841a <_ZN7RH_RF9510setTxPowerEab+0x56>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   d83fa:	2207      	movs	r2, #7
   d83fc:	214d      	movs	r1, #77	; 0x4d
   d83fe:	4628      	mov	r0, r5
   d8400:	f7ff fd51 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   d8404:	3c03      	subs	r4, #3
   d8406:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d8408:	1ea2      	subs	r2, r4, #2
   d840a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   d840e:	b2d2      	uxtb	r2, r2
   d8410:	2109      	movs	r1, #9
   d8412:	e7e7      	b.n	d83e4 <_ZN7RH_RF9510setTxPowerEab+0x20>
	    power = 20;
   d8414:	2414      	movs	r4, #20
   d8416:	e7f0      	b.n	d83fa <_ZN7RH_RF9510setTxPowerEab+0x36>
	    power = 2;
   d8418:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d841a:	2204      	movs	r2, #4
   d841c:	214d      	movs	r1, #77	; 0x4d
   d841e:	4628      	mov	r0, r5
   d8420:	f7ff fd41 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
   d8424:	e7f0      	b.n	d8408 <_ZN7RH_RF9510setTxPowerEab+0x44>

000d8426 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   d8426:	b538      	push	{r3, r4, r5, lr}
   d8428:	460c      	mov	r4, r1
   d842a:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   d842c:	780a      	ldrb	r2, [r1, #0]
   d842e:	211d      	movs	r1, #29
   d8430:	f7ff fd39 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   d8434:	7862      	ldrb	r2, [r4, #1]
   d8436:	211e      	movs	r1, #30
   d8438:	4628      	mov	r0, r5
   d843a:	f7ff fd34 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d843e:	78a2      	ldrb	r2, [r4, #2]
   d8440:	4628      	mov	r0, r5
   d8442:	2126      	movs	r1, #38	; 0x26
}
   d8444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d8448:	f7ff bd2d 	b.w	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>

000d844c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d844c:	2905      	cmp	r1, #5
{
   d844e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d8450:	d80f      	bhi.n	d8472 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d8452:	4b09      	ldr	r3, [pc, #36]	; (d8478 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   d8454:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d8458:	185c      	adds	r4, r3, r1
   d845a:	5a5a      	ldrh	r2, [r3, r1]
   d845c:	78a3      	ldrb	r3, [r4, #2]
   d845e:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   d8462:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d8464:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   d8468:	f7ff ffdd 	bl	d8426 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   d846c:	2001      	movs	r0, #1
}
   d846e:	b002      	add	sp, #8
   d8470:	bd10      	pop	{r4, pc}
        return false;
   d8472:	2000      	movs	r0, #0
   d8474:	e7fb      	b.n	d846e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   d8476:	bf00      	nop
   d8478:	000dd290 	.word	0x000dd290

000d847c <_ZN7RH_RF9517setPreambleLengthEt>:
{
   d847c:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d847e:	0a0a      	lsrs	r2, r1, #8
{
   d8480:	4605      	mov	r5, r0
   d8482:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d8484:	2120      	movs	r1, #32
   d8486:	f7ff fd0e 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d848a:	b2e2      	uxtb	r2, r4
   d848c:	4628      	mov	r0, r5
   d848e:	2121      	movs	r1, #33	; 0x21
}
   d8490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d8494:	f7ff bd07 	b.w	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>

000d8498 <_ZN7RH_RF954initEv>:
{
   d8498:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d849a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   d849c:	f7ff fcb2 	bl	d7e04 <_ZN11RHSPIDriver4initEv>
   d84a0:	4606      	mov	r6, r0
   d84a2:	b918      	cbnz	r0, d84ac <_ZN7RH_RF954initEv+0x14>
	return false;
   d84a4:	2600      	movs	r6, #0
}
   d84a6:	4630      	mov	r0, r6
   d84a8:	b002      	add	sp, #8
   d84aa:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   d84ac:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   d84b0:	2dff      	cmp	r5, #255	; 0xff
   d84b2:	d052      	beq.n	d855a <_ZN7RH_RF954initEv+0xc2>
	spiUsingInterrupt(interruptNumber);
   d84b4:	4629      	mov	r1, r5
   d84b6:	4620      	mov	r0, r4
   d84b8:	f7ff fd6b 	bl	d7f92 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   d84bc:	2280      	movs	r2, #128	; 0x80
   d84be:	2101      	movs	r1, #1
   d84c0:	4620      	mov	r0, r4
   d84c2:	f7ff fcf0 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   d84c6:	200a      	movs	r0, #10
   d84c8:	f000 ffb6 	bl	d9438 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   d84cc:	2101      	movs	r1, #1
   d84ce:	4620      	mov	r0, r4
   d84d0:	f7ff fcc8 	bl	d7e64 <_ZN11RHSPIDriver7spiReadEh>
   d84d4:	2880      	cmp	r0, #128	; 0x80
   d84d6:	d1e5      	bne.n	d84a4 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   d84d8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   d84dc:	28ff      	cmp	r0, #255	; 0xff
   d84de:	d01c      	beq.n	d851a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   d84e0:	2100      	movs	r1, #0
   d84e2:	f003 fb39 	bl	dbb58 <pinMode>
	if (_myInterruptIndex == 0xff)
   d84e6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d84ea:	2bff      	cmp	r3, #255	; 0xff
   d84ec:	d107      	bne.n	d84fe <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   d84ee:	4a25      	ldr	r2, [pc, #148]	; (d8584 <_ZN7RH_RF954initEv+0xec>)
   d84f0:	7813      	ldrb	r3, [r2, #0]
   d84f2:	2b03      	cmp	r3, #3
   d84f4:	d8d6      	bhi.n	d84a4 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   d84f6:	1c59      	adds	r1, r3, #1
   d84f8:	7011      	strb	r1, [r2, #0]
   d84fa:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   d84fe:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   d8502:	4b21      	ldr	r3, [pc, #132]	; (d8588 <_ZN7RH_RF954initEv+0xf0>)
   d8504:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   d8508:	bb52      	cbnz	r2, d8560 <_ZN7RH_RF954initEv+0xc8>
	    attachInterrupt(interruptNumber, isr0, RISING);
   d850a:	4920      	ldr	r1, [pc, #128]	; (d858c <_ZN7RH_RF954initEv+0xf4>)
   d850c:	9200      	str	r2, [sp, #0]
   d850e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8512:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   d8514:	b2a8      	uxth	r0, r5
   d8516:	f001 fb5d 	bl	d9bd4 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   d851a:	2200      	movs	r2, #0
   d851c:	210e      	movs	r1, #14
   d851e:	4620      	mov	r0, r4
   d8520:	f7ff fcc1 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   d8524:	2200      	movs	r2, #0
   d8526:	210f      	movs	r1, #15
   d8528:	4620      	mov	r0, r4
   d852a:	f7ff fcbc 	bl	d7ea6 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   d852e:	4620      	mov	r0, r4
   d8530:	f7ff fe10 	bl	d8154 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   d8534:	2100      	movs	r1, #0
   d8536:	4620      	mov	r0, r4
   d8538:	f7ff ff88 	bl	d844c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   d853c:	2108      	movs	r1, #8
   d853e:	4620      	mov	r0, r4
   d8540:	f7ff ff9c 	bl	d847c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   d8544:	ed9f 0a12 	vldr	s0, [pc, #72]	; d8590 <_ZN7RH_RF954initEv+0xf8>
   d8548:	4620      	mov	r0, r4
   d854a:	f7ff fdc1 	bl	d80d0 <_ZN7RH_RF9512setFrequencyEf>
    setTxPower(13);
   d854e:	2200      	movs	r2, #0
   d8550:	210d      	movs	r1, #13
   d8552:	4620      	mov	r0, r4
   d8554:	f7ff ff36 	bl	d83c4 <_ZN7RH_RF9510setTxPowerEab>
    return true;
   d8558:	e7a5      	b.n	d84a6 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   d855a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d855e:	e7ad      	b.n	d84bc <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   d8560:	2a01      	cmp	r2, #1
   d8562:	f04f 0300 	mov.w	r3, #0
   d8566:	d104      	bne.n	d8572 <_ZN7RH_RF954initEv+0xda>
	    attachInterrupt(interruptNumber, isr1, RISING);
   d8568:	9300      	str	r3, [sp, #0]
   d856a:	490a      	ldr	r1, [pc, #40]	; (d8594 <_ZN7RH_RF954initEv+0xfc>)
   d856c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8570:	e7d0      	b.n	d8514 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   d8572:	2a02      	cmp	r2, #2
   d8574:	d196      	bne.n	d84a4 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   d8576:	9300      	str	r3, [sp, #0]
   d8578:	4907      	ldr	r1, [pc, #28]	; (d8598 <_ZN7RH_RF954initEv+0x100>)
   d857a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d857e:	2201      	movs	r2, #1
   d8580:	e7c8      	b.n	d8514 <_ZN7RH_RF954initEv+0x7c>
   d8582:	bf00      	nop
   d8584:	2003e53d 	.word	0x2003e53d
   d8588:	2003e540 	.word	0x2003e540
   d858c:	000d82a1 	.word	0x000d82a1
   d8590:	43d90000 	.word	0x43d90000
   d8594:	000d82b1 	.word	0x000d82b1
   d8598:	000d82c1 	.word	0x000d82c1

000d859c <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   d859c:	2001      	movs	r0, #1
   d859e:	4770      	bx	lr

000d85a0 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   d85a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d85a2:	4d1f      	ldr	r5, [pc, #124]	; (d8620 <_ZN14SequentialFileC1Ev+0x80>)
   d85a4:	4b1f      	ldr	r3, [pc, #124]	; (d8624 <_ZN14SequentialFileC1Ev+0x84>)
   d85a6:	4604      	mov	r4, r0
   d85a8:	4629      	mov	r1, r5
   d85aa:	f840 3b04 	str.w	r3, [r0], #4
   d85ae:	f002 ff6e 	bl	db48e <_ZN6StringC1EPKc>
   d85b2:	491d      	ldr	r1, [pc, #116]	; (d8628 <_ZN14SequentialFileC1Ev+0x88>)
   d85b4:	f104 0014 	add.w	r0, r4, #20
   d85b8:	f002 ff69 	bl	db48e <_ZN6StringC1EPKc>
   d85bc:	4629      	mov	r1, r5
   d85be:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d85c2:	f002 ff64 	bl	db48e <_ZN6StringC1EPKc>
   d85c6:	2300      	movs	r3, #0
   d85c8:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d85cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   d85d0:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   d85d4:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   d85d8:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   d85dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	  _M_start(), _M_finish()
   d85e0:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d85e2:	2308      	movs	r3, #8
   d85e4:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d85e6:	2020      	movs	r0, #32
   d85e8:	f7fb fd55 	bl	d4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d85ec:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d85ee:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d85f0:	3d01      	subs	r5, #1
   d85f2:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d85f4:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   d85f8:	4606      	mov	r6, r0
   d85fa:	f44f 7000 	mov.w	r0, #512	; 0x200
   d85fe:	f7fb fd4a 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8602:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d8606:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   d860a:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   d860e:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d8610:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d8612:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   d8614:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8616:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   d8618:	6667      	str	r7, [r4, #100]	; 0x64

}
   d861a:	4620      	mov	r0, r4
   d861c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d861e:	bf00      	nop
   d8620:	000dd568 	.word	0x000dd568
   d8624:	000dd420 	.word	0x000dd420
   d8628:	000dd32c 	.word	0x000dd32c

000d862c <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d862c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   d862e:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d8630:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   d8632:	4628      	mov	r0, r5
   d8634:	f002 ff89 	bl	db54a <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   d8638:	490e      	ldr	r1, [pc, #56]	; (d8674 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   d863a:	4668      	mov	r0, sp
   d863c:	f002 ff27 	bl	db48e <_ZN6StringC1EPKc>
   d8640:	4669      	mov	r1, sp
   d8642:	4628      	mov	r0, r5
   d8644:	f002 ffee 	bl	db624 <_ZNK6String8endsWithERKS_>
   d8648:	4606      	mov	r6, r0
   d864a:	4668      	mov	r0, sp
   d864c:	f002 fed4 	bl	db3f8 <_ZN6StringD1Ev>
   d8650:	b16e      	cbz	r6, d866e <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   d8652:	68e3      	ldr	r3, [r4, #12]
   d8654:	2200      	movs	r2, #0
   d8656:	3b01      	subs	r3, #1
   d8658:	4629      	mov	r1, r5
   d865a:	4668      	mov	r0, sp
   d865c:	f002 fff8 	bl	db650 <_ZNK6String9substringEjj>
   d8660:	4669      	mov	r1, sp
   d8662:	4628      	mov	r0, r5
   d8664:	f002 ff69 	bl	db53a <_ZN6StringaSEOS_>
   d8668:	4668      	mov	r0, sp
   d866a:	f002 fec5 	bl	db3f8 <_ZN6StringD1Ev>
    }
    return *this; 
};
   d866e:	4620      	mov	r0, r4
   d8670:	b004      	add	sp, #16
   d8672:	bd70      	pop	{r4, r5, r6, pc}
   d8674:	000dd331 	.word	0x000dd331

000d8678 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   d8678:	b510      	push	{r4, lr}
    if (!queueMutex) {
   d867a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   d867c:	4604      	mov	r4, r0
    if (!queueMutex) {
   d867e:	b913      	cbnz	r3, d8686 <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   d8680:	303c      	adds	r0, #60	; 0x3c
   d8682:	f000 fb03 	bl	d8c8c <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   d8686:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   d8688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   d868c:	f000 bb06 	b.w	d8c9c <os_mutex_lock>

000d8690 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   d8690:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d8692:	f000 bb0b 	b.w	d8cac <os_mutex_unlock>
	...

000d8698 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   d8698:	b510      	push	{r4, lr}
   d869a:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   d869c:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   d869e:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   d86a0:	f000 fc64 	bl	d8f6c <stat>
    if (result == 0) {
   d86a4:	b9d0      	cbnz	r0, d86dc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d86a6:	9b01      	ldr	r3, [sp, #4]
   d86a8:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   d86aa:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d86ac:	d506      	bpl.n	d86bc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   d86ae:	4915      	ldr	r1, [pc, #84]	; (d8704 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   d86b0:	4815      	ldr	r0, [pc, #84]	; (d8708 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d86b2:	f7fb fd47 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
        return true;
   d86b6:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   d86b8:	b016      	add	sp, #88	; 0x58
   d86ba:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   d86bc:	4812      	ldr	r0, [pc, #72]	; (d8708 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d86be:	4913      	ldr	r1, [pc, #76]	; (d870c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   d86c0:	f7fd ffd4 	bl	d666c <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   d86c4:	4620      	mov	r0, r4
   d86c6:	f004 f8e3 	bl	dc890 <unlink>
    result = mkdir(path, 0777);
   d86ca:	f240 11ff 	movw	r1, #511	; 0x1ff
   d86ce:	4620      	mov	r0, r4
   d86d0:	f000 fc54 	bl	d8f7c <mkdir>
    if (result == 0) {
   d86d4:	b980      	cbnz	r0, d86f8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   d86d6:	490e      	ldr	r1, [pc, #56]	; (d8710 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   d86d8:	4622      	mov	r2, r4
   d86da:	e7e9      	b.n	d86b0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   d86dc:	f000 fe84 	bl	d93e8 <__errno>
   d86e0:	6803      	ldr	r3, [r0, #0]
   d86e2:	2b02      	cmp	r3, #2
   d86e4:	d0f1      	beq.n	d86ca <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   d86e6:	f000 fe7f 	bl	d93e8 <__errno>
   d86ea:	490a      	ldr	r1, [pc, #40]	; (d8714 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   d86ec:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   d86ee:	4806      	ldr	r0, [pc, #24]	; (d8708 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d86f0:	f7fd ffbc 	bl	d666c <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d86f4:	2000      	movs	r0, #0
   d86f6:	e7df      	b.n	d86b8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   d86f8:	f000 fe76 	bl	d93e8 <__errno>
   d86fc:	4906      	ldr	r1, [pc, #24]	; (d8718 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   d86fe:	6802      	ldr	r2, [r0, #0]
   d8700:	e7f5      	b.n	d86ee <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   d8702:	bf00      	nop
   d8704:	000dd33e 	.word	0x000dd33e
   d8708:	2003e54c 	.word	0x2003e54c
   d870c:	000dd35b 	.word	0x000dd35b
   d8710:	000dd38c 	.word	0x000dd38c
   d8714:	000dd378 	.word	0x000dd378
   d8718:	000dd39b 	.word	0x000dd39b

000d871c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   d871c:	b538      	push	{r3, r4, r5, lr}
   d871e:	4615      	mov	r5, r2
   d8720:	4604      	mov	r4, r0
    String result = name;
   d8722:	f002 feb4 	bl	db48e <_ZN6StringC1EPKc>

    if (ext && *ext) {
   d8726:	b14d      	cbz	r5, d873c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   d8728:	782b      	ldrb	r3, [r5, #0]
   d872a:	b13b      	cbz	r3, d873c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d872c:	4904      	ldr	r1, [pc, #16]	; (d8740 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   d872e:	4620      	mov	r0, r4
   d8730:	f002 ff34 	bl	db59c <_ZN6String6concatEPKc>
   d8734:	4629      	mov	r1, r5
   d8736:	4620      	mov	r0, r4
   d8738:	f002 ff30 	bl	db59c <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   d873c:	4620      	mov	r0, r4
   d873e:	bd38      	pop	{r3, r4, r5, pc}
   d8740:	000dd3b1 	.word	0x000dd3b1

000d8744 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   d8744:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8746:	4605      	mov	r5, r0
   d8748:	460e      	mov	r6, r1
   d874a:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   d874c:	6949      	ldr	r1, [r1, #20]
   d874e:	4668      	mov	r0, sp
   d8750:	f002 ff9e 	bl	db690 <_ZN6String6formatEPKcz>
        operator const char*() const { return c_str(); }
   d8754:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   d8756:	b904      	cbnz	r4, d875a <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   d8758:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d875a:	4622      	mov	r2, r4
   d875c:	4628      	mov	r0, r5
   d875e:	f7ff ffdd 	bl	d871c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   d8762:	4668      	mov	r0, sp
   d8764:	f002 fe48 	bl	db3f8 <_ZN6StringD1Ev>
}
   d8768:	4628      	mov	r0, r5
   d876a:	b004      	add	sp, #16
   d876c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8770 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d8770:	b570      	push	{r4, r5, r6, lr}
   d8772:	460c      	mov	r4, r1
   d8774:	b08e      	sub	sp, #56	; 0x38
    String result;
   d8776:	491a      	ldr	r1, [pc, #104]	; (d87e0 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d8778:	e9cd 3200 	strd	r3, r2, [sp]
   d877c:	4605      	mov	r5, r0
    String result;
   d877e:	f002 fe86 	bl	db48e <_ZN6StringC1EPKc>
    result.reserve(dirPath.length() + pattern.length() + 4);
   d8782:	69e0      	ldr	r0, [r4, #28]
   d8784:	68e1      	ldr	r1, [r4, #12]
   d8786:	4401      	add	r1, r0
   d8788:	3104      	adds	r1, #4
   d878a:	4628      	mov	r0, r5
   d878c:	f002 fe52 	bl	db434 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d8790:	1d21      	adds	r1, r4, #4
   d8792:	a806      	add	r0, sp, #24
   d8794:	f002 fec6 	bl	db524 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   d8798:	4912      	ldr	r1, [pc, #72]	; (d87e4 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   d879a:	a802      	add	r0, sp, #8
   d879c:	f002 fe77 	bl	db48e <_ZN6StringC1EPKc>
   d87a0:	a902      	add	r1, sp, #8
   d87a2:	a806      	add	r0, sp, #24
   d87a4:	f002 ff0b 	bl	db5be <_ZplRK15StringSumHelperRK6String>
   d87a8:	e9dd 3200 	ldrd	r3, r2, [sp]
   d87ac:	4606      	mov	r6, r0
   d87ae:	4621      	mov	r1, r4
   d87b0:	a80a      	add	r0, sp, #40	; 0x28
   d87b2:	f7ff ffc7 	bl	d8744 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   d87b6:	a90a      	add	r1, sp, #40	; 0x28
   d87b8:	4630      	mov	r0, r6
   d87ba:	f002 ff00 	bl	db5be <_ZplRK15StringSumHelperRK6String>
   d87be:	4601      	mov	r1, r0
   d87c0:	4628      	mov	r0, r5
   d87c2:	f002 fea0 	bl	db506 <_ZN6StringaSERKS_>
   d87c6:	a80a      	add	r0, sp, #40	; 0x28
   d87c8:	f002 fe16 	bl	db3f8 <_ZN6StringD1Ev>
   d87cc:	a802      	add	r0, sp, #8
   d87ce:	f002 fe13 	bl	db3f8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d87d2:	a806      	add	r0, sp, #24
   d87d4:	f002 fe10 	bl	db3f8 <_ZN6StringD1Ev>
}
   d87d8:	4628      	mov	r0, r5
   d87da:	b00e      	add	sp, #56	; 0x38
   d87dc:	bd70      	pop	{r4, r5, r6, pc}
   d87de:	bf00      	nop
   d87e0:	000dd568 	.word	0x000dd568
   d87e4:	000dd331 	.word	0x000dd331

000d87e8 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d87e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   d87ec:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d87ee:	b08e      	sub	sp, #56	; 0x38
   d87f0:	4605      	mov	r5, r0
   d87f2:	460f      	mov	r7, r1
    if (allExtensions) {
   d87f4:	2a00      	cmp	r2, #0
   d87f6:	d04a      	beq.n	d888e <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   d87f8:	6840      	ldr	r0, [r0, #4]
   d87fa:	f000 fbcf 	bl	d8f9c <opendir>
        if (dir) {
   d87fe:	4606      	mov	r6, r0
   d8800:	2800      	cmp	r0, #0
   d8802:	d041      	beq.n	d8888 <_ZN14SequentialFile13removeFileNumEib+0xa0>
                        String path = dirPath + String("/") + ent->d_name;
   d8804:	f8df a0b0 	ldr.w	sl, [pc, #176]	; d88b8 <_ZN14SequentialFile13removeFileNumEib+0xd0>
                        _log.trace("removed %s", path.c_str());
   d8808:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d88b0 <_ZN14SequentialFile13removeFileNumEib+0xc8>
   d880c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d88b4 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   d8810:	4630      	mov	r0, r6
   d8812:	f000 fbcb 	bl	d8fac <readdir>
                if (!ent) {
   d8816:	2800      	cmp	r0, #0
   d8818:	d033      	beq.n	d8882 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   d881a:	7a82      	ldrb	r2, [r0, #10]
   d881c:	2a08      	cmp	r2, #8
   d881e:	d1f7      	bne.n	d8810 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   d8820:	f100 040b 	add.w	r4, r0, #11
   d8824:	6969      	ldr	r1, [r5, #20]
   d8826:	aa01      	add	r2, sp, #4
   d8828:	4620      	mov	r0, r4
   d882a:	f000 fdb5 	bl	d9398 <sscanf>
   d882e:	2801      	cmp	r0, #1
   d8830:	d1ee      	bne.n	d8810 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   d8832:	9b01      	ldr	r3, [sp, #4]
   d8834:	429f      	cmp	r7, r3
   d8836:	d1eb      	bne.n	d8810 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   d8838:	1d29      	adds	r1, r5, #4
   d883a:	a806      	add	r0, sp, #24
   d883c:	f002 fe72 	bl	db524 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   d8840:	4651      	mov	r1, sl
   d8842:	a80a      	add	r0, sp, #40	; 0x28
   d8844:	f002 fe23 	bl	db48e <_ZN6StringC1EPKc>
   d8848:	a90a      	add	r1, sp, #40	; 0x28
   d884a:	a806      	add	r0, sp, #24
   d884c:	f002 feb7 	bl	db5be <_ZplRK15StringSumHelperRK6String>
   d8850:	4621      	mov	r1, r4
   d8852:	f002 fec0 	bl	db5d6 <_ZplRK15StringSumHelperPKc>
   d8856:	4601      	mov	r1, r0
   d8858:	a802      	add	r0, sp, #8
   d885a:	f002 fe63 	bl	db524 <_ZN6StringC1ERKS_>
   d885e:	a80a      	add	r0, sp, #40	; 0x28
   d8860:	f002 fdca 	bl	db3f8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d8864:	a806      	add	r0, sp, #24
   d8866:	f002 fdc7 	bl	db3f8 <_ZN6StringD1Ev>
                        unlink(path);
   d886a:	9802      	ldr	r0, [sp, #8]
   d886c:	f004 f810 	bl	dc890 <unlink>
                        _log.trace("removed %s", path.c_str());
   d8870:	4640      	mov	r0, r8
   d8872:	9a02      	ldr	r2, [sp, #8]
   d8874:	4649      	mov	r1, r9
   d8876:	f7fd fee2 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   d887a:	a802      	add	r0, sp, #8
   d887c:	f002 fdbc 	bl	db3f8 <_ZN6StringD1Ev>
                    continue;
   d8880:	e7c6      	b.n	d8810 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   d8882:	4630      	mov	r0, r6
   d8884:	f000 fb9a 	bl	d8fbc <closedir>
}
   d8888:	b00e      	add	sp, #56	; 0x38
   d888a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        String path = getPathForFileNum(fileNum); 
   d888e:	460a      	mov	r2, r1
   d8890:	4601      	mov	r1, r0
   d8892:	a80a      	add	r0, sp, #40	; 0x28
   d8894:	f7ff ff6c 	bl	d8770 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   d8898:	980a      	ldr	r0, [sp, #40]	; 0x28
   d889a:	f003 fff9 	bl	dc890 <unlink>
        _log.trace("removed %s", path.c_str());
   d889e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d88a0:	4903      	ldr	r1, [pc, #12]	; (d88b0 <_ZN14SequentialFile13removeFileNumEib+0xc8>)
   d88a2:	4804      	ldr	r0, [pc, #16]	; (d88b4 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   d88a4:	f7fd fecb 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   d88a8:	a80a      	add	r0, sp, #40	; 0x28
   d88aa:	f002 fda5 	bl	db3f8 <_ZN6StringD1Ev>
}
   d88ae:	e7eb      	b.n	d8888 <_ZN14SequentialFile13removeFileNumEib+0xa0>
   d88b0:	000dd333 	.word	0x000dd333
   d88b4:	2003e54c 	.word	0x2003e54c
   d88b8:	000dd331 	.word	0x000dd331

000d88bc <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d88bc:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d88be:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d88c0:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d88c2:	b163      	cbz	r3, d88de <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d88c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d88c6:	6945      	ldr	r5, [r0, #20]
   d88c8:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d88ca:	42ae      	cmp	r6, r5
   d88cc:	d904      	bls.n	d88d8 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x1c>
	::operator delete(__p);
   d88ce:	f855 0b04 	ldr.w	r0, [r5], #4
   d88d2:	f7fb fbe4 	bl	d409e <_ZdlPv>
   d88d6:	e7f8      	b.n	d88ca <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   d88d8:	6820      	ldr	r0, [r4, #0]
   d88da:	f7fb fbe0 	bl	d409e <_ZdlPv>
    }
   d88de:	4620      	mov	r0, r4
   d88e0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d88e4 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   d88e4:	b510      	push	{r4, lr}
   d88e6:	4b09      	ldr	r3, [pc, #36]	; (d890c <_ZN14SequentialFileD1Ev+0x28>)
   d88e8:	4604      	mov	r4, r0
   d88ea:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d88ee:	f7ff ffe5 	bl	d88bc <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   d88f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d88f6:	f002 fd7f 	bl	db3f8 <_ZN6StringD1Ev>
   d88fa:	f104 0014 	add.w	r0, r4, #20
   d88fe:	f002 fd7b 	bl	db3f8 <_ZN6StringD1Ev>
   d8902:	1d20      	adds	r0, r4, #4
   d8904:	f002 fd78 	bl	db3f8 <_ZN6StringD1Ev>
}
   d8908:	4620      	mov	r0, r4
   d890a:	bd10      	pop	{r4, pc}
   d890c:	000dd420 	.word	0x000dd420

000d8910 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   d8910:	b510      	push	{r4, lr}
   d8912:	4604      	mov	r4, r0
}
   d8914:	f7ff ffe6 	bl	d88e4 <_ZN14SequentialFileD1Ev>
   d8918:	4620      	mov	r0, r4
   d891a:	2168      	movs	r1, #104	; 0x68
   d891c:	f003 f996 	bl	dbc4c <_ZdlPvj>
   d8920:	4620      	mov	r0, r4
   d8922:	bd10      	pop	{r4, pc}

000d8924 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d8924:	68c3      	ldr	r3, [r0, #12]
   d8926:	68ca      	ldr	r2, [r1, #12]
   d8928:	1a9b      	subs	r3, r3, r2
   d892a:	109b      	asrs	r3, r3, #2
   d892c:	1e5a      	subs	r2, r3, #1
   d892e:	e9d0 3000 	ldrd	r3, r0, [r0]
   d8932:	1a1b      	subs	r3, r3, r0
   d8934:	109b      	asrs	r3, r3, #2
   d8936:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d893a:	6888      	ldr	r0, [r1, #8]
   d893c:	680a      	ldr	r2, [r1, #0]
   d893e:	1a80      	subs	r0, r0, r2
    }
   d8940:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d8944:	4770      	bx	lr
	...

000d8948 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>:
      deque<_Tp, _Alloc>::
   d8948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d894c:	4604      	mov	r4, r0
   d894e:	4688      	mov	r8, r1
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8950:	f100 0108 	add.w	r1, r0, #8
   d8954:	3018      	adds	r0, #24
   d8956:	f7ff ffe5 	bl	d8924 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
	if (size() == max_size())
   d895a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d895e:	4298      	cmp	r0, r3
   d8960:	d102      	bne.n	d8968 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x20>
	  __throw_length_error(
   d8962:	4837      	ldr	r0, [pc, #220]	; (d8a40 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xf8>)
   d8964:	f003 f97b 	bl	dbc5e <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d8968:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d896a:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d896c:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d896e:	1a11      	subs	r1, r2, r0
   d8970:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d8974:	2901      	cmp	r1, #1
   d8976:	d821      	bhi.n	d89bc <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x74>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d8978:	6961      	ldr	r1, [r4, #20]
   d897a:	1a57      	subs	r7, r2, r1
   d897c:	10be      	asrs	r6, r7, #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d897e:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d8980:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   d8984:	d936      	bls.n	d89f4 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xac>
					 - __new_num_nodes) / 2
   d8986:	1b5d      	subs	r5, r3, r5
   d8988:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d898a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d898e:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d8990:	42a9      	cmp	r1, r5
   d8992:	eba3 0201 	sub.w	r2, r3, r1
   d8996:	d927      	bls.n	d89e8 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xa0>
	  if (_Num)
   d8998:	4299      	cmp	r1, r3
   d899a:	d002      	beq.n	d89a2 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d899c:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d899e:	f003 fd8d 	bl	dc4bc <memmove>
	_M_node = __new_node;
   d89a2:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   d89a4:	682b      	ldr	r3, [r5, #0]
   d89a6:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d89a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d89ac:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d89ae:	19eb      	adds	r3, r5, r7
	_M_node = __new_node;
   d89b0:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d89b2:	59eb      	ldr	r3, [r5, r7]
   d89b4:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d89b6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d89ba:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d89bc:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d89c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d89c2:	f7fb fb68 	bl	d4096 <_Znwj>
   d89c6:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d89c8:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d89ca:	b113      	cbz	r3, d89d2 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x8a>
   d89cc:	f8d8 2000 	ldr.w	r2, [r8]
   d89d0:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d89d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d89d4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d89d6:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d89d8:	685b      	ldr	r3, [r3, #4]
   d89da:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d89dc:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d89e0:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d89e2:	61a3      	str	r3, [r4, #24]
      }
   d89e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d89e8:	4299      	cmp	r1, r3
   d89ea:	d0da      	beq.n	d89a2 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d89ec:	1d38      	adds	r0, r7, #4
   d89ee:	1a80      	subs	r0, r0, r2
   d89f0:	4428      	add	r0, r5
   d89f2:	e7d4      	b.n	d899e <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x56>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d89f4:	f103 0902 	add.w	r9, r3, #2
   d89f8:	2b01      	cmp	r3, #1
   d89fa:	bf2c      	ite	cs
   d89fc:	4499      	addcs	r9, r3
   d89fe:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->max_size())
   d8a02:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   d8a06:	d301      	bcc.n	d8a0c <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xc4>
	  std::__throw_bad_alloc();
   d8a08:	f003 f926 	bl	dbc58 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8a0c:	ea4f 0089 	mov.w	r0, r9, lsl #2
   d8a10:	f7fb fb41 	bl	d4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   d8a14:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d8a16:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d8a18:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   d8a1c:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d8a1e:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   d8a20:	4291      	cmp	r1, r2
   d8a22:	4682      	mov	sl, r0
   d8a24:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d8a28:	d003      	beq.n	d8a32 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xea>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d8a2a:	1a52      	subs	r2, r2, r1
   d8a2c:	4628      	mov	r0, r5
   d8a2e:	f003 fd45 	bl	dc4bc <memmove>
	::operator delete(__p);
   d8a32:	6820      	ldr	r0, [r4, #0]
   d8a34:	f7fb fb33 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d8a38:	e9c4 a900 	strd	sl, r9, [r4]
   d8a3c:	e7b1      	b.n	d89a2 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
   d8a3e:	bf00      	nop
   d8a40:	000dcfc1 	.word	0x000dcfc1

000d8a44 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   d8a44:	b538      	push	{r3, r4, r5, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   d8a46:	6a05      	ldr	r5, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   d8a48:	6982      	ldr	r2, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   d8a4a:	3d04      	subs	r5, #4
	if (this->_M_impl._M_finish._M_cur
   d8a4c:	42aa      	cmp	r2, r5
      push_back(const value_type& __x)
   d8a4e:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish._M_cur
   d8a50:	d006      	beq.n	d8a60 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8a52:	b10a      	cbz	r2, d8a58 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x14>
	    _Alloc_traits::construct(this->_M_impl,
   d8a54:	6809      	ldr	r1, [r1, #0]
   d8a56:	6011      	str	r1, [r2, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d8a58:	699a      	ldr	r2, [r3, #24]
   d8a5a:	3204      	adds	r2, #4
   d8a5c:	619a      	str	r2, [r3, #24]
      }
   d8a5e:	bd38      	pop	{r3, r4, r5, pc}
	  _M_push_back_aux(__x);
   d8a60:	f7ff ff72 	bl	d8948 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>
      }
   d8a64:	e7fb      	b.n	d8a5e <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1a>
	...

000d8a68 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   d8a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   d8a6c:	68c3      	ldr	r3, [r0, #12]
   d8a6e:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   d8a70:	b086      	sub	sp, #24
   d8a72:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   d8a74:	d808      	bhi.n	d8a88 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   d8a76:	4934      	ldr	r1, [pc, #208]	; (d8b48 <_ZN14SequentialFile7scanDirEv+0xe0>)
   d8a78:	4834      	ldr	r0, [pc, #208]	; (d8b4c <_ZN14SequentialFile7scanDirEv+0xe4>)
   d8a7a:	f7fd fdf7 	bl	d666c <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d8a7e:	2600      	movs	r6, #0
}
   d8a80:	4630      	mov	r0, r6
   d8a82:	b006      	add	sp, #24
   d8a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   d8a88:	6840      	ldr	r0, [r0, #4]
   d8a8a:	f7ff fe05 	bl	d8698 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   d8a8e:	4606      	mov	r6, r0
   d8a90:	2800      	cmp	r0, #0
   d8a92:	d0f4      	beq.n	d8a7e <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   d8a94:	6963      	ldr	r3, [r4, #20]
   d8a96:	6862      	ldr	r2, [r4, #4]
   d8a98:	492d      	ldr	r1, [pc, #180]	; (d8b50 <_ZN14SequentialFile7scanDirEv+0xe8>)
   d8a9a:	482c      	ldr	r0, [pc, #176]	; (d8b4c <_ZN14SequentialFile7scanDirEv+0xe4>)
   d8a9c:	f7fd fdcf 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   d8aa0:	6860      	ldr	r0, [r4, #4]
   d8aa2:	f000 fa7b 	bl	d8f9c <opendir>
    if (!dir) {
   d8aa6:	4607      	mov	r7, r0
   d8aa8:	2800      	cmp	r0, #0
   d8aaa:	d0e8      	beq.n	d8a7e <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   d8aac:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   d8aae:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d8b54 <_ZN14SequentialFile7scanDirEv+0xec>
   d8ab2:	f8df 8098 	ldr.w	r8, [pc, #152]	; d8b4c <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   d8ab6:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   d8ab8:	4638      	mov	r0, r7
   d8aba:	f000 fa77 	bl	d8fac <readdir>
        if (!ent) {
   d8abe:	4605      	mov	r5, r0
   d8ac0:	2800      	cmp	r0, #0
   d8ac2:	d039      	beq.n	d8b38 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   d8ac4:	7a83      	ldrb	r3, [r0, #10]
   d8ac6:	2b08      	cmp	r3, #8
   d8ac8:	d1f6      	bne.n	d8ab8 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   d8aca:	350b      	adds	r5, #11
   d8acc:	6961      	ldr	r1, [r4, #20]
   d8ace:	aa01      	add	r2, sp, #4
   d8ad0:	4628      	mov	r0, r5
   d8ad2:	f000 fc61 	bl	d9398 <sscanf>
   d8ad6:	2801      	cmp	r0, #1
   d8ad8:	d1ee      	bne.n	d8ab8 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   d8ada:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d8adc:	b17b      	cbz	r3, d8afe <_ZN14SequentialFile7scanDirEv+0x96>
   d8ade:	4629      	mov	r1, r5
   d8ae0:	a802      	add	r0, sp, #8
   d8ae2:	f002 fcd4 	bl	db48e <_ZN6StringC1EPKc>
   d8ae6:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d8aea:	a802      	add	r0, sp, #8
   d8aec:	f002 fd9a 	bl	db624 <_ZNK6String8endsWithERKS_>
   d8af0:	4682      	mov	sl, r0
   d8af2:	a802      	add	r0, sp, #8
   d8af4:	f002 fc80 	bl	db3f8 <_ZN6StringD1Ev>
   d8af8:	f1ba 0f00 	cmp.w	sl, #0
   d8afc:	d0dc      	beq.n	d8ab8 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   d8afe:	6823      	ldr	r3, [r4, #0]
   d8b00:	4629      	mov	r1, r5
   d8b02:	689b      	ldr	r3, [r3, #8]
   d8b04:	4620      	mov	r0, r4
   d8b06:	4798      	blx	r3
   d8b08:	2800      	cmp	r0, #0
   d8b0a:	d0d5      	beq.n	d8ab8 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   d8b0c:	9a01      	ldr	r2, [sp, #4]
   d8b0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8b10:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   d8b12:	bfb8      	it	lt
   d8b14:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   d8b16:	462b      	mov	r3, r5
   d8b18:	4649      	mov	r1, r9
   d8b1a:	4640      	mov	r0, r8
   d8b1c:	f7fd fd8f 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   d8b20:	4620      	mov	r0, r4
   d8b22:	f7ff fda9 	bl	d8678 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   d8b26:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d8b2a:	a901      	add	r1, sp, #4
   d8b2c:	f7ff ff8a 	bl	d8a44 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   d8b30:	4620      	mov	r0, r4
   d8b32:	f7ff fdad 	bl	d8690 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   d8b36:	e7bf      	b.n	d8ab8 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   d8b38:	4638      	mov	r0, r7
   d8b3a:	f000 fa3f 	bl	d8fbc <closedir>
    scanDirCompleted = true;
   d8b3e:	2301      	movs	r3, #1
   d8b40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   d8b44:	e79c      	b.n	d8a80 <_ZN14SequentialFile7scanDirEv+0x18>
   d8b46:	bf00      	nop
   d8b48:	000dd3b3 	.word	0x000dd3b3
   d8b4c:	2003e54c 	.word	0x2003e54c
   d8b50:	000dd3c8 	.word	0x000dd3c8
   d8b54:	000dd3e4 	.word	0x000dd3e4

000d8b58 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   d8b58:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   d8b5a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   d8b5e:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   d8b60:	b90b      	cbnz	r3, d8b66 <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   d8b62:	f7ff ff81 	bl	d8a68 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   d8b66:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d8b68:	3001      	adds	r0, #1
   d8b6a:	63a0      	str	r0, [r4, #56]	; 0x38
}
   d8b6c:	bd10      	pop	{r4, pc}
	...

000d8b70 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   d8b70:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   d8b72:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   d8b76:	4604      	mov	r4, r0
   d8b78:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   d8b7a:	b90b      	cbnz	r3, d8b80 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   d8b7c:	f7ff ff74 	bl	d8a68 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   d8b80:	4620      	mov	r0, r4
   d8b82:	f7ff fd79 	bl	d8678 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d8b86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   d8b88:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d8b8a:	4293      	cmp	r3, r2
   d8b8c:	d01e      	beq.n	d8bcc <_ZN14SequentialFile16getFileFromQueueEb+0x5c>
        fileNum = queue.front();
   d8b8e:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   d8b90:	b12e      	cbz	r6, d8b9e <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
	    != this->_M_impl._M_start._M_last - 1)
   d8b92:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d8b94:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d8b96:	4293      	cmp	r3, r2
   d8b98:	d00c      	beq.n	d8bb4 <_ZN14SequentialFile16getFileFromQueueEb+0x44>
	    ++this->_M_impl._M_start._M_cur;
   d8b9a:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d8b9c:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   d8b9e:	4620      	mov	r0, r4
   d8ba0:	f7ff fd76 	bl	d8690 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   d8ba4:	b125      	cbz	r5, d8bb0 <_ZN14SequentialFile16getFileFromQueueEb+0x40>
        _log.trace("getFileFromQueue returned %d", fileNum);
   d8ba6:	490a      	ldr	r1, [pc, #40]	; (d8bd0 <_ZN14SequentialFile16getFileFromQueueEb+0x60>)
   d8ba8:	480a      	ldr	r0, [pc, #40]	; (d8bd4 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   d8baa:	462a      	mov	r2, r5
   d8bac:	f7fd fd47 	bl	d663e <_ZNK5spark6Logger5traceEPKcz>
}
   d8bb0:	4628      	mov	r0, r5
   d8bb2:	bd70      	pop	{r4, r5, r6, pc}
	::operator delete(__p);
   d8bb4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d8bb6:	f7fb fa72 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d8bba:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d8bbc:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d8bbe:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   d8bc0:	685b      	ldr	r3, [r3, #4]
   d8bc2:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8bc4:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d8bc8:	6522      	str	r2, [r4, #80]	; 0x50
   d8bca:	e7e7      	b.n	d8b9c <_ZN14SequentialFile16getFileFromQueueEb+0x2c>
    int fileNum = 0;
   d8bcc:	2500      	movs	r5, #0
   d8bce:	e7e6      	b.n	d8b9e <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
   d8bd0:	000dd3fa 	.word	0x000dd3fa
   d8bd4:	2003e54c 	.word	0x2003e54c

000d8bd8 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   d8bd8:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   d8bda:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   d8bde:	9101      	str	r1, [sp, #4]
   d8be0:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   d8be2:	b90b      	cbnz	r3, d8be8 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   d8be4:	f7ff ff40 	bl	d8a68 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   d8be8:	9b01      	ldr	r3, [sp, #4]
   d8bea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d8bec:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   d8bee:	bfb8      	it	lt
   d8bf0:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   d8bf2:	4620      	mov	r0, r4
   d8bf4:	f7ff fd40 	bl	d8678 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   d8bf8:	a901      	add	r1, sp, #4
   d8bfa:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d8bfe:	f7ff ff21 	bl	d8a44 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   d8c02:	4620      	mov	r0, r4
   d8c04:	f7ff fd44 	bl	d8690 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   d8c08:	b002      	add	sp, #8
   d8c0a:	bd10      	pop	{r4, pc}

000d8c0c <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   d8c0c:	b538      	push	{r3, r4, r5, lr}
   d8c0e:	4604      	mov	r4, r0
    queueMutexLock();
   d8c10:	f7ff fd32 	bl	d8678 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8c14:	f104 0148 	add.w	r1, r4, #72	; 0x48
   d8c18:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d8c1c:	f7ff fe82 	bl	d8924 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
   d8c20:	4605      	mov	r5, r0
    queueMutexUnlock();
   d8c22:	4620      	mov	r0, r4
   d8c24:	f7ff fd34 	bl	d8690 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   d8c28:	4628      	mov	r0, r5
   d8c2a:	bd38      	pop	{r3, r4, r5, pc}

000d8c2c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   d8c2c:	4b01      	ldr	r3, [pc, #4]	; (d8c34 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   d8c2e:	4a02      	ldr	r2, [pc, #8]	; (d8c38 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   d8c30:	601a      	str	r2, [r3, #0]
}
   d8c32:	4770      	bx	lr
   d8c34:	2003e54c 	.word	0x2003e54c
   d8c38:	000dcb10 	.word	0x000dcb10

000d8c3c <_GLOBAL__sub_I__ZN6AB18058instanceE>:
   d8c3c:	4b01      	ldr	r3, [pc, #4]	; (d8c44 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d8c3e:	4a02      	ldr	r2, [pc, #8]	; (d8c48 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d8c40:	601a      	str	r2, [r3, #0]
// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
        instance->systemEvent(event, param);
    }
}
   d8c42:	4770      	bx	lr
   d8c44:	2003e550 	.word	0x2003e550
   d8c48:	000dd42c 	.word	0x000dd42c

000d8c4c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d8c4c:	b508      	push	{r3, lr}
   d8c4e:	4b02      	ldr	r3, [pc, #8]	; (d8c58 <os_thread_create+0xc>)
   d8c50:	681b      	ldr	r3, [r3, #0]
   d8c52:	685b      	ldr	r3, [r3, #4]
   d8c54:	9301      	str	r3, [sp, #4]
   d8c56:	bd08      	pop	{r3, pc}
   d8c58:	00030248 	.word	0x00030248

000d8c5c <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d8c5c:	b508      	push	{r3, lr}
   d8c5e:	4b02      	ldr	r3, [pc, #8]	; (d8c68 <os_thread_is_current+0xc>)
   d8c60:	681b      	ldr	r3, [r3, #0]
   d8c62:	689b      	ldr	r3, [r3, #8]
   d8c64:	9301      	str	r3, [sp, #4]
   d8c66:	bd08      	pop	{r3, pc}
   d8c68:	00030248 	.word	0x00030248

000d8c6c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d8c6c:	b508      	push	{r3, lr}
   d8c6e:	4b02      	ldr	r3, [pc, #8]	; (d8c78 <os_thread_join+0xc>)
   d8c70:	681b      	ldr	r3, [r3, #0]
   d8c72:	691b      	ldr	r3, [r3, #16]
   d8c74:	9301      	str	r3, [sp, #4]
   d8c76:	bd08      	pop	{r3, pc}
   d8c78:	00030248 	.word	0x00030248

000d8c7c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d8c7c:	b508      	push	{r3, lr}
   d8c7e:	4b02      	ldr	r3, [pc, #8]	; (d8c88 <os_thread_cleanup+0xc>)
   d8c80:	681b      	ldr	r3, [r3, #0]
   d8c82:	695b      	ldr	r3, [r3, #20]
   d8c84:	9301      	str	r3, [sp, #4]
   d8c86:	bd08      	pop	{r3, pc}
   d8c88:	00030248 	.word	0x00030248

000d8c8c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d8c8c:	b508      	push	{r3, lr}
   d8c8e:	4b02      	ldr	r3, [pc, #8]	; (d8c98 <os_mutex_create+0xc>)
   d8c90:	681b      	ldr	r3, [r3, #0]
   d8c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8c94:	9301      	str	r3, [sp, #4]
   d8c96:	bd08      	pop	{r3, pc}
   d8c98:	00030248 	.word	0x00030248

000d8c9c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d8c9c:	b508      	push	{r3, lr}
   d8c9e:	4b02      	ldr	r3, [pc, #8]	; (d8ca8 <os_mutex_lock+0xc>)
   d8ca0:	681b      	ldr	r3, [r3, #0]
   d8ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8ca4:	9301      	str	r3, [sp, #4]
   d8ca6:	bd08      	pop	{r3, pc}
   d8ca8:	00030248 	.word	0x00030248

000d8cac <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d8cac:	b508      	push	{r3, lr}
   d8cae:	4b02      	ldr	r3, [pc, #8]	; (d8cb8 <os_mutex_unlock+0xc>)
   d8cb0:	681b      	ldr	r3, [r3, #0]
   d8cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8cb4:	9301      	str	r3, [sp, #4]
   d8cb6:	bd08      	pop	{r3, pc}
   d8cb8:	00030248 	.word	0x00030248

000d8cbc <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d8cbc:	b508      	push	{r3, lr}
   d8cbe:	4b02      	ldr	r3, [pc, #8]	; (d8cc8 <os_mutex_recursive_create+0xc>)
   d8cc0:	681b      	ldr	r3, [r3, #0]
   d8cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8cc4:	9301      	str	r3, [sp, #4]
   d8cc6:	bd08      	pop	{r3, pc}
   d8cc8:	00030248 	.word	0x00030248

000d8ccc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d8ccc:	b508      	push	{r3, lr}
   d8cce:	4b02      	ldr	r3, [pc, #8]	; (d8cd8 <os_mutex_recursive_destroy+0xc>)
   d8cd0:	681b      	ldr	r3, [r3, #0]
   d8cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8cd4:	9301      	str	r3, [sp, #4]
   d8cd6:	bd08      	pop	{r3, pc}
   d8cd8:	00030248 	.word	0x00030248

000d8cdc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d8cdc:	b508      	push	{r3, lr}
   d8cde:	4b02      	ldr	r3, [pc, #8]	; (d8ce8 <os_mutex_recursive_lock+0xc>)
   d8ce0:	681b      	ldr	r3, [r3, #0]
   d8ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8ce4:	9301      	str	r3, [sp, #4]
   d8ce6:	bd08      	pop	{r3, pc}
   d8ce8:	00030248 	.word	0x00030248

000d8cec <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d8cec:	b508      	push	{r3, lr}
   d8cee:	4b02      	ldr	r3, [pc, #8]	; (d8cf8 <os_mutex_recursive_unlock+0xc>)
   d8cf0:	681b      	ldr	r3, [r3, #0]
   d8cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8cf4:	9301      	str	r3, [sp, #4]
   d8cf6:	bd08      	pop	{r3, pc}
   d8cf8:	00030248 	.word	0x00030248

000d8cfc <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d8cfc:	b508      	push	{r3, lr}
   d8cfe:	4b02      	ldr	r3, [pc, #8]	; (d8d08 <os_thread_exit+0xc>)
   d8d00:	681b      	ldr	r3, [r3, #0]
   d8d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d8d04:	9301      	str	r3, [sp, #4]
   d8d06:	bd08      	pop	{r3, pc}
   d8d08:	00030248 	.word	0x00030248

000d8d0c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d8d0c:	b508      	push	{r3, lr}
   d8d0e:	4b02      	ldr	r3, [pc, #8]	; (d8d18 <HAL_RNG_GetRandomNumber+0xc>)
   d8d10:	681b      	ldr	r3, [r3, #0]
   d8d12:	685b      	ldr	r3, [r3, #4]
   d8d14:	9301      	str	r3, [sp, #4]
   d8d16:	bd08      	pop	{r3, pc}
   d8d18:	00030218 	.word	0x00030218

000d8d1c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d8d1c:	b508      	push	{r3, lr}
   d8d1e:	4b02      	ldr	r3, [pc, #8]	; (d8d28 <HAL_Delay_Milliseconds+0xc>)
   d8d20:	681b      	ldr	r3, [r3, #0]
   d8d22:	689b      	ldr	r3, [r3, #8]
   d8d24:	9301      	str	r3, [sp, #4]
   d8d26:	bd08      	pop	{r3, pc}
   d8d28:	00030218 	.word	0x00030218

000d8d2c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d8d2c:	b508      	push	{r3, lr}
   d8d2e:	4b02      	ldr	r3, [pc, #8]	; (d8d38 <HAL_Delay_Microseconds+0xc>)
   d8d30:	681b      	ldr	r3, [r3, #0]
   d8d32:	68db      	ldr	r3, [r3, #12]
   d8d34:	9301      	str	r3, [sp, #4]
   d8d36:	bd08      	pop	{r3, pc}
   d8d38:	00030218 	.word	0x00030218

000d8d3c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d8d3c:	b508      	push	{r3, lr}
   d8d3e:	4b02      	ldr	r3, [pc, #8]	; (d8d48 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d8d40:	681b      	ldr	r3, [r3, #0]
   d8d42:	695b      	ldr	r3, [r3, #20]
   d8d44:	9301      	str	r3, [sp, #4]
   d8d46:	bd08      	pop	{r3, pc}
   d8d48:	00030218 	.word	0x00030218

000d8d4c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d8d4c:	b508      	push	{r3, lr}
   d8d4e:	4b02      	ldr	r3, [pc, #8]	; (d8d58 <hal_rtc_time_is_valid+0xc>)
   d8d50:	681b      	ldr	r3, [r3, #0]
   d8d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8d54:	9301      	str	r3, [sp, #4]
   d8d56:	bd08      	pop	{r3, pc}
   d8d58:	00030218 	.word	0x00030218

000d8d5c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d8d5c:	b508      	push	{r3, lr}
   d8d5e:	4b02      	ldr	r3, [pc, #8]	; (d8d68 <hal_timer_millis+0xc>)
   d8d60:	681b      	ldr	r3, [r3, #0]
   d8d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8d64:	9301      	str	r3, [sp, #4]
   d8d66:	bd08      	pop	{r3, pc}
   d8d68:	00030218 	.word	0x00030218

000d8d6c <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d8d6c:	b508      	push	{r3, lr}
   d8d6e:	4b02      	ldr	r3, [pc, #8]	; (d8d78 <hal_rtc_get_time+0xc>)
   d8d70:	681b      	ldr	r3, [r3, #0]
   d8d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d8d74:	9301      	str	r3, [sp, #4]
   d8d76:	bd08      	pop	{r3, pc}
   d8d78:	00030218 	.word	0x00030218

000d8d7c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d8d7c:	b508      	push	{r3, lr}
   d8d7e:	4b02      	ldr	r3, [pc, #8]	; (d8d88 <HAL_Pin_Mode+0xc>)
   d8d80:	681b      	ldr	r3, [r3, #0]
   d8d82:	689b      	ldr	r3, [r3, #8]
   d8d84:	9301      	str	r3, [sp, #4]
   d8d86:	bd08      	pop	{r3, pc}
   d8d88:	0003022c 	.word	0x0003022c

000d8d8c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d8d8c:	b508      	push	{r3, lr}
   d8d8e:	4b02      	ldr	r3, [pc, #8]	; (d8d98 <HAL_Get_Pin_Mode+0xc>)
   d8d90:	681b      	ldr	r3, [r3, #0]
   d8d92:	68db      	ldr	r3, [r3, #12]
   d8d94:	9301      	str	r3, [sp, #4]
   d8d96:	bd08      	pop	{r3, pc}
   d8d98:	0003022c 	.word	0x0003022c

000d8d9c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d8d9c:	b508      	push	{r3, lr}
   d8d9e:	4b02      	ldr	r3, [pc, #8]	; (d8da8 <HAL_GPIO_Write+0xc>)
   d8da0:	681b      	ldr	r3, [r3, #0]
   d8da2:	691b      	ldr	r3, [r3, #16]
   d8da4:	9301      	str	r3, [sp, #4]
   d8da6:	bd08      	pop	{r3, pc}
   d8da8:	0003022c 	.word	0x0003022c

000d8dac <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d8dac:	b508      	push	{r3, lr}
   d8dae:	4b02      	ldr	r3, [pc, #8]	; (d8db8 <HAL_GPIO_Read+0xc>)
   d8db0:	681b      	ldr	r3, [r3, #0]
   d8db2:	695b      	ldr	r3, [r3, #20]
   d8db4:	9301      	str	r3, [sp, #4]
   d8db6:	bd08      	pop	{r3, pc}
   d8db8:	0003022c 	.word	0x0003022c

000d8dbc <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d8dbc:	b508      	push	{r3, lr}
   d8dbe:	4b02      	ldr	r3, [pc, #8]	; (d8dc8 <HAL_Interrupts_Attach+0xc>)
   d8dc0:	681b      	ldr	r3, [r3, #0]
   d8dc2:	699b      	ldr	r3, [r3, #24]
   d8dc4:	9301      	str	r3, [sp, #4]
   d8dc6:	bd08      	pop	{r3, pc}
   d8dc8:	0003022c 	.word	0x0003022c

000d8dcc <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d8dcc:	b508      	push	{r3, lr}
   d8dce:	4b02      	ldr	r3, [pc, #8]	; (d8dd8 <HAL_Interrupts_Detach+0xc>)
   d8dd0:	681b      	ldr	r3, [r3, #0]
   d8dd2:	69db      	ldr	r3, [r3, #28]
   d8dd4:	9301      	str	r3, [sp, #4]
   d8dd6:	bd08      	pop	{r3, pc}
   d8dd8:	0003022c 	.word	0x0003022c

000d8ddc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d8ddc:	b508      	push	{r3, lr}
   d8dde:	4b02      	ldr	r3, [pc, #8]	; (d8de8 <hal_i2c_write+0xc>)
   d8de0:	681b      	ldr	r3, [r3, #0]
   d8de2:	6a1b      	ldr	r3, [r3, #32]
   d8de4:	9301      	str	r3, [sp, #4]
   d8de6:	bd08      	pop	{r3, pc}
   d8de8:	00030228 	.word	0x00030228

000d8dec <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d8dec:	b508      	push	{r3, lr}
   d8dee:	4b02      	ldr	r3, [pc, #8]	; (d8df8 <hal_i2c_available+0xc>)
   d8df0:	681b      	ldr	r3, [r3, #0]
   d8df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8df4:	9301      	str	r3, [sp, #4]
   d8df6:	bd08      	pop	{r3, pc}
   d8df8:	00030228 	.word	0x00030228

000d8dfc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d8dfc:	b508      	push	{r3, lr}
   d8dfe:	4b02      	ldr	r3, [pc, #8]	; (d8e08 <hal_i2c_read+0xc>)
   d8e00:	681b      	ldr	r3, [r3, #0]
   d8e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8e04:	9301      	str	r3, [sp, #4]
   d8e06:	bd08      	pop	{r3, pc}
   d8e08:	00030228 	.word	0x00030228

000d8e0c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d8e0c:	b508      	push	{r3, lr}
   d8e0e:	4b02      	ldr	r3, [pc, #8]	; (d8e18 <hal_i2c_peek+0xc>)
   d8e10:	681b      	ldr	r3, [r3, #0]
   d8e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8e14:	9301      	str	r3, [sp, #4]
   d8e16:	bd08      	pop	{r3, pc}
   d8e18:	00030228 	.word	0x00030228

000d8e1c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d8e1c:	b508      	push	{r3, lr}
   d8e1e:	4b02      	ldr	r3, [pc, #8]	; (d8e28 <hal_i2c_flush+0xc>)
   d8e20:	681b      	ldr	r3, [r3, #0]
   d8e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8e24:	9301      	str	r3, [sp, #4]
   d8e26:	bd08      	pop	{r3, pc}
   d8e28:	00030228 	.word	0x00030228

000d8e2c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d8e2c:	b508      	push	{r3, lr}
   d8e2e:	4b02      	ldr	r3, [pc, #8]	; (d8e38 <hal_i2c_is_enabled+0xc>)
   d8e30:	681b      	ldr	r3, [r3, #0]
   d8e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8e34:	9301      	str	r3, [sp, #4]
   d8e36:	bd08      	pop	{r3, pc}
   d8e38:	00030228 	.word	0x00030228

000d8e3c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d8e3c:	b508      	push	{r3, lr}
   d8e3e:	4b02      	ldr	r3, [pc, #8]	; (d8e48 <hal_i2c_init+0xc>)
   d8e40:	681b      	ldr	r3, [r3, #0]
   d8e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8e44:	9301      	str	r3, [sp, #4]
   d8e46:	bd08      	pop	{r3, pc}
   d8e48:	00030228 	.word	0x00030228

000d8e4c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d8e4c:	b508      	push	{r3, lr}
   d8e4e:	4b02      	ldr	r3, [pc, #8]	; (d8e58 <inet_inet_ntop+0xc>)
   d8e50:	681b      	ldr	r3, [r3, #0]
   d8e52:	695b      	ldr	r3, [r3, #20]
   d8e54:	9301      	str	r3, [sp, #4]
   d8e56:	bd08      	pop	{r3, pc}
   d8e58:	00030264 	.word	0x00030264

000d8e5c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d8e5c:	b508      	push	{r3, lr}
   d8e5e:	4b02      	ldr	r3, [pc, #8]	; (d8e68 <netdb_freeaddrinfo+0xc>)
   d8e60:	681b      	ldr	r3, [r3, #0]
   d8e62:	689b      	ldr	r3, [r3, #8]
   d8e64:	9301      	str	r3, [sp, #4]
   d8e66:	bd08      	pop	{r3, pc}
   d8e68:	00030268 	.word	0x00030268

000d8e6c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d8e6c:	b508      	push	{r3, lr}
   d8e6e:	4b02      	ldr	r3, [pc, #8]	; (d8e78 <netdb_getaddrinfo+0xc>)
   d8e70:	681b      	ldr	r3, [r3, #0]
   d8e72:	68db      	ldr	r3, [r3, #12]
   d8e74:	9301      	str	r3, [sp, #4]
   d8e76:	bd08      	pop	{r3, pc}
   d8e78:	00030268 	.word	0x00030268

000d8e7c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d8e7c:	b508      	push	{r3, lr}
   d8e7e:	4b02      	ldr	r3, [pc, #8]	; (d8e88 <hal_spi_begin+0xc>)
   d8e80:	681b      	ldr	r3, [r3, #0]
   d8e82:	681b      	ldr	r3, [r3, #0]
   d8e84:	9301      	str	r3, [sp, #4]
   d8e86:	bd08      	pop	{r3, pc}
   d8e88:	00030230 	.word	0x00030230

000d8e8c <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   d8e8c:	b508      	push	{r3, lr}
   d8e8e:	4b02      	ldr	r3, [pc, #8]	; (d8e98 <hal_spi_end+0xc>)
   d8e90:	681b      	ldr	r3, [r3, #0]
   d8e92:	685b      	ldr	r3, [r3, #4]
   d8e94:	9301      	str	r3, [sp, #4]
   d8e96:	bd08      	pop	{r3, pc}
   d8e98:	00030230 	.word	0x00030230

000d8e9c <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d8e9c:	b508      	push	{r3, lr}
   d8e9e:	4b02      	ldr	r3, [pc, #8]	; (d8ea8 <hal_spi_transfer+0xc>)
   d8ea0:	681b      	ldr	r3, [r3, #0]
   d8ea2:	695b      	ldr	r3, [r3, #20]
   d8ea4:	9301      	str	r3, [sp, #4]
   d8ea6:	bd08      	pop	{r3, pc}
   d8ea8:	00030230 	.word	0x00030230

000d8eac <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d8eac:	b508      	push	{r3, lr}
   d8eae:	4b02      	ldr	r3, [pc, #8]	; (d8eb8 <hal_spi_init+0xc>)
   d8eb0:	681b      	ldr	r3, [r3, #0]
   d8eb2:	69db      	ldr	r3, [r3, #28]
   d8eb4:	9301      	str	r3, [sp, #4]
   d8eb6:	bd08      	pop	{r3, pc}
   d8eb8:	00030230 	.word	0x00030230

000d8ebc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d8ebc:	b508      	push	{r3, lr}
   d8ebe:	4b02      	ldr	r3, [pc, #8]	; (d8ec8 <hal_spi_is_enabled+0xc>)
   d8ec0:	681b      	ldr	r3, [r3, #0]
   d8ec2:	6a1b      	ldr	r3, [r3, #32]
   d8ec4:	9301      	str	r3, [sp, #4]
   d8ec6:	bd08      	pop	{r3, pc}
   d8ec8:	00030230 	.word	0x00030230

000d8ecc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d8ecc:	b508      	push	{r3, lr}
   d8ece:	4b02      	ldr	r3, [pc, #8]	; (d8ed8 <hal_spi_info+0xc>)
   d8ed0:	681b      	ldr	r3, [r3, #0]
   d8ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8ed4:	9301      	str	r3, [sp, #4]
   d8ed6:	bd08      	pop	{r3, pc}
   d8ed8:	00030230 	.word	0x00030230

000d8edc <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d8edc:	b508      	push	{r3, lr}
   d8ede:	4b02      	ldr	r3, [pc, #8]	; (d8ee8 <hal_spi_set_settings+0xc>)
   d8ee0:	681b      	ldr	r3, [r3, #0]
   d8ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8ee4:	9301      	str	r3, [sp, #4]
   d8ee6:	bd08      	pop	{r3, pc}
   d8ee8:	00030230 	.word	0x00030230

000d8eec <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d8eec:	b508      	push	{r3, lr}
   d8eee:	4b02      	ldr	r3, [pc, #8]	; (d8ef8 <hal_spi_acquire+0xc>)
   d8ef0:	681b      	ldr	r3, [r3, #0]
   d8ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8ef4:	9301      	str	r3, [sp, #4]
   d8ef6:	bd08      	pop	{r3, pc}
   d8ef8:	00030230 	.word	0x00030230

000d8efc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d8efc:	b508      	push	{r3, lr}
   d8efe:	4b02      	ldr	r3, [pc, #8]	; (d8f08 <hal_spi_release+0xc>)
   d8f00:	681b      	ldr	r3, [r3, #0]
   d8f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8f04:	9301      	str	r3, [sp, #4]
   d8f06:	bd08      	pop	{r3, pc}
   d8f08:	00030230 	.word	0x00030230

000d8f0c <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   d8f0c:	b508      	push	{r3, lr}
   d8f0e:	4b02      	ldr	r3, [pc, #8]	; (d8f18 <_open+0xc>)
   d8f10:	681b      	ldr	r3, [r3, #0]
   d8f12:	681b      	ldr	r3, [r3, #0]
   d8f14:	9301      	str	r3, [sp, #4]
   d8f16:	bd08      	pop	{r3, pc}
   d8f18:	00030284 	.word	0x00030284

000d8f1c <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   d8f1c:	b508      	push	{r3, lr}
   d8f1e:	4b02      	ldr	r3, [pc, #8]	; (d8f28 <_write+0xc>)
   d8f20:	681b      	ldr	r3, [r3, #0]
   d8f22:	685b      	ldr	r3, [r3, #4]
   d8f24:	9301      	str	r3, [sp, #4]
   d8f26:	bd08      	pop	{r3, pc}
   d8f28:	00030284 	.word	0x00030284

000d8f2c <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   d8f2c:	b508      	push	{r3, lr}
   d8f2e:	4b02      	ldr	r3, [pc, #8]	; (d8f38 <_read+0xc>)
   d8f30:	681b      	ldr	r3, [r3, #0]
   d8f32:	689b      	ldr	r3, [r3, #8]
   d8f34:	9301      	str	r3, [sp, #4]
   d8f36:	bd08      	pop	{r3, pc}
   d8f38:	00030284 	.word	0x00030284

000d8f3c <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   d8f3c:	b508      	push	{r3, lr}
   d8f3e:	4b02      	ldr	r3, [pc, #8]	; (d8f48 <_close+0xc>)
   d8f40:	681b      	ldr	r3, [r3, #0]
   d8f42:	68db      	ldr	r3, [r3, #12]
   d8f44:	9301      	str	r3, [sp, #4]
   d8f46:	bd08      	pop	{r3, pc}
   d8f48:	00030284 	.word	0x00030284

000d8f4c <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   d8f4c:	b508      	push	{r3, lr}
   d8f4e:	4b02      	ldr	r3, [pc, #8]	; (d8f58 <_fstat+0xc>)
   d8f50:	681b      	ldr	r3, [r3, #0]
   d8f52:	695b      	ldr	r3, [r3, #20]
   d8f54:	9301      	str	r3, [sp, #4]
   d8f56:	bd08      	pop	{r3, pc}
   d8f58:	00030284 	.word	0x00030284

000d8f5c <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   d8f5c:	b508      	push	{r3, lr}
   d8f5e:	4b02      	ldr	r3, [pc, #8]	; (d8f68 <_lseek+0xc>)
   d8f60:	681b      	ldr	r3, [r3, #0]
   d8f62:	6a1b      	ldr	r3, [r3, #32]
   d8f64:	9301      	str	r3, [sp, #4]
   d8f66:	bd08      	pop	{r3, pc}
   d8f68:	00030284 	.word	0x00030284

000d8f6c <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   d8f6c:	b508      	push	{r3, lr}
   d8f6e:	4b02      	ldr	r3, [pc, #8]	; (d8f78 <stat+0xc>)
   d8f70:	681b      	ldr	r3, [r3, #0]
   d8f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8f74:	9301      	str	r3, [sp, #4]
   d8f76:	bd08      	pop	{r3, pc}
   d8f78:	00030284 	.word	0x00030284

000d8f7c <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   d8f7c:	b508      	push	{r3, lr}
   d8f7e:	4b02      	ldr	r3, [pc, #8]	; (d8f88 <mkdir+0xc>)
   d8f80:	681b      	ldr	r3, [r3, #0]
   d8f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8f84:	9301      	str	r3, [sp, #4]
   d8f86:	bd08      	pop	{r3, pc}
   d8f88:	00030284 	.word	0x00030284

000d8f8c <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   d8f8c:	b508      	push	{r3, lr}
   d8f8e:	4b02      	ldr	r3, [pc, #8]	; (d8f98 <_unlink+0xc>)
   d8f90:	681b      	ldr	r3, [r3, #0]
   d8f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8f94:	9301      	str	r3, [sp, #4]
   d8f96:	bd08      	pop	{r3, pc}
   d8f98:	00030284 	.word	0x00030284

000d8f9c <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   d8f9c:	b508      	push	{r3, lr}
   d8f9e:	4b02      	ldr	r3, [pc, #8]	; (d8fa8 <opendir+0xc>)
   d8fa0:	681b      	ldr	r3, [r3, #0]
   d8fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8fa4:	9301      	str	r3, [sp, #4]
   d8fa6:	bd08      	pop	{r3, pc}
   d8fa8:	00030284 	.word	0x00030284

000d8fac <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   d8fac:	b508      	push	{r3, lr}
   d8fae:	4b02      	ldr	r3, [pc, #8]	; (d8fb8 <readdir+0xc>)
   d8fb0:	681b      	ldr	r3, [r3, #0]
   d8fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8fb4:	9301      	str	r3, [sp, #4]
   d8fb6:	bd08      	pop	{r3, pc}
   d8fb8:	00030284 	.word	0x00030284

000d8fbc <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   d8fbc:	b508      	push	{r3, lr}
   d8fbe:	4b02      	ldr	r3, [pc, #8]	; (d8fc8 <closedir+0xc>)
   d8fc0:	681b      	ldr	r3, [r3, #0]
   d8fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8fc4:	9301      	str	r3, [sp, #4]
   d8fc6:	bd08      	pop	{r3, pc}
   d8fc8:	00030284 	.word	0x00030284

000d8fcc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d8fcc:	b508      	push	{r3, lr}
   d8fce:	4b02      	ldr	r3, [pc, #8]	; (d8fd8 <hal_usart_init+0xc>)
   d8fd0:	681b      	ldr	r3, [r3, #0]
   d8fd2:	681b      	ldr	r3, [r3, #0]
   d8fd4:	9301      	str	r3, [sp, #4]
   d8fd6:	bd08      	pop	{r3, pc}
   d8fd8:	0003023c 	.word	0x0003023c

000d8fdc <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d8fdc:	b508      	push	{r3, lr}
   d8fde:	4b02      	ldr	r3, [pc, #8]	; (d8fe8 <hal_usart_end+0xc>)
   d8fe0:	681b      	ldr	r3, [r3, #0]
   d8fe2:	689b      	ldr	r3, [r3, #8]
   d8fe4:	9301      	str	r3, [sp, #4]
   d8fe6:	bd08      	pop	{r3, pc}
   d8fe8:	0003023c 	.word	0x0003023c

000d8fec <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d8fec:	b508      	push	{r3, lr}
   d8fee:	4b02      	ldr	r3, [pc, #8]	; (d8ff8 <hal_usart_write+0xc>)
   d8ff0:	681b      	ldr	r3, [r3, #0]
   d8ff2:	68db      	ldr	r3, [r3, #12]
   d8ff4:	9301      	str	r3, [sp, #4]
   d8ff6:	bd08      	pop	{r3, pc}
   d8ff8:	0003023c 	.word	0x0003023c

000d8ffc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d8ffc:	b508      	push	{r3, lr}
   d8ffe:	4b02      	ldr	r3, [pc, #8]	; (d9008 <hal_usart_available+0xc>)
   d9000:	681b      	ldr	r3, [r3, #0]
   d9002:	691b      	ldr	r3, [r3, #16]
   d9004:	9301      	str	r3, [sp, #4]
   d9006:	bd08      	pop	{r3, pc}
   d9008:	0003023c 	.word	0x0003023c

000d900c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d900c:	b508      	push	{r3, lr}
   d900e:	4b02      	ldr	r3, [pc, #8]	; (d9018 <hal_usart_read+0xc>)
   d9010:	681b      	ldr	r3, [r3, #0]
   d9012:	695b      	ldr	r3, [r3, #20]
   d9014:	9301      	str	r3, [sp, #4]
   d9016:	bd08      	pop	{r3, pc}
   d9018:	0003023c 	.word	0x0003023c

000d901c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d901c:	b508      	push	{r3, lr}
   d901e:	4b02      	ldr	r3, [pc, #8]	; (d9028 <hal_usart_peek+0xc>)
   d9020:	681b      	ldr	r3, [r3, #0]
   d9022:	699b      	ldr	r3, [r3, #24]
   d9024:	9301      	str	r3, [sp, #4]
   d9026:	bd08      	pop	{r3, pc}
   d9028:	0003023c 	.word	0x0003023c

000d902c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d902c:	b508      	push	{r3, lr}
   d902e:	4b02      	ldr	r3, [pc, #8]	; (d9038 <hal_usart_flush+0xc>)
   d9030:	681b      	ldr	r3, [r3, #0]
   d9032:	69db      	ldr	r3, [r3, #28]
   d9034:	9301      	str	r3, [sp, #4]
   d9036:	bd08      	pop	{r3, pc}
   d9038:	0003023c 	.word	0x0003023c

000d903c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d903c:	b508      	push	{r3, lr}
   d903e:	4b02      	ldr	r3, [pc, #8]	; (d9048 <hal_usart_is_enabled+0xc>)
   d9040:	681b      	ldr	r3, [r3, #0]
   d9042:	6a1b      	ldr	r3, [r3, #32]
   d9044:	9301      	str	r3, [sp, #4]
   d9046:	bd08      	pop	{r3, pc}
   d9048:	0003023c 	.word	0x0003023c

000d904c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d904c:	b508      	push	{r3, lr}
   d904e:	4b02      	ldr	r3, [pc, #8]	; (d9058 <hal_usart_available_data_for_write+0xc>)
   d9050:	681b      	ldr	r3, [r3, #0]
   d9052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9054:	9301      	str	r3, [sp, #4]
   d9056:	bd08      	pop	{r3, pc}
   d9058:	0003023c 	.word	0x0003023c

000d905c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d905c:	b508      	push	{r3, lr}
   d905e:	4b02      	ldr	r3, [pc, #8]	; (d9068 <hal_usart_begin_config+0xc>)
   d9060:	681b      	ldr	r3, [r3, #0]
   d9062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9064:	9301      	str	r3, [sp, #4]
   d9066:	bd08      	pop	{r3, pc}
   d9068:	0003023c 	.word	0x0003023c

000d906c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d906c:	b508      	push	{r3, lr}
   d906e:	4b02      	ldr	r3, [pc, #8]	; (d9078 <HAL_USB_USART_Init+0xc>)
   d9070:	681b      	ldr	r3, [r3, #0]
   d9072:	681b      	ldr	r3, [r3, #0]
   d9074:	9301      	str	r3, [sp, #4]
   d9076:	bd08      	pop	{r3, pc}
   d9078:	0003024c 	.word	0x0003024c

000d907c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d907c:	b508      	push	{r3, lr}
   d907e:	4b02      	ldr	r3, [pc, #8]	; (d9088 <HAL_USB_USART_Begin+0xc>)
   d9080:	681b      	ldr	r3, [r3, #0]
   d9082:	685b      	ldr	r3, [r3, #4]
   d9084:	9301      	str	r3, [sp, #4]
   d9086:	bd08      	pop	{r3, pc}
   d9088:	0003024c 	.word	0x0003024c

000d908c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d908c:	b508      	push	{r3, lr}
   d908e:	4b02      	ldr	r3, [pc, #8]	; (d9098 <HAL_USB_USART_End+0xc>)
   d9090:	681b      	ldr	r3, [r3, #0]
   d9092:	689b      	ldr	r3, [r3, #8]
   d9094:	9301      	str	r3, [sp, #4]
   d9096:	bd08      	pop	{r3, pc}
   d9098:	0003024c 	.word	0x0003024c

000d909c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d909c:	b508      	push	{r3, lr}
   d909e:	4b02      	ldr	r3, [pc, #8]	; (d90a8 <HAL_USB_USART_Available_Data+0xc>)
   d90a0:	681b      	ldr	r3, [r3, #0]
   d90a2:	691b      	ldr	r3, [r3, #16]
   d90a4:	9301      	str	r3, [sp, #4]
   d90a6:	bd08      	pop	{r3, pc}
   d90a8:	0003024c 	.word	0x0003024c

000d90ac <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d90ac:	b508      	push	{r3, lr}
   d90ae:	4b02      	ldr	r3, [pc, #8]	; (d90b8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d90b0:	681b      	ldr	r3, [r3, #0]
   d90b2:	695b      	ldr	r3, [r3, #20]
   d90b4:	9301      	str	r3, [sp, #4]
   d90b6:	bd08      	pop	{r3, pc}
   d90b8:	0003024c 	.word	0x0003024c

000d90bc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d90bc:	b508      	push	{r3, lr}
   d90be:	4b02      	ldr	r3, [pc, #8]	; (d90c8 <HAL_USB_USART_Receive_Data+0xc>)
   d90c0:	681b      	ldr	r3, [r3, #0]
   d90c2:	699b      	ldr	r3, [r3, #24]
   d90c4:	9301      	str	r3, [sp, #4]
   d90c6:	bd08      	pop	{r3, pc}
   d90c8:	0003024c 	.word	0x0003024c

000d90cc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d90cc:	b508      	push	{r3, lr}
   d90ce:	4b02      	ldr	r3, [pc, #8]	; (d90d8 <HAL_USB_USART_Send_Data+0xc>)
   d90d0:	681b      	ldr	r3, [r3, #0]
   d90d2:	69db      	ldr	r3, [r3, #28]
   d90d4:	9301      	str	r3, [sp, #4]
   d90d6:	bd08      	pop	{r3, pc}
   d90d8:	0003024c 	.word	0x0003024c

000d90dc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d90dc:	b508      	push	{r3, lr}
   d90de:	4b02      	ldr	r3, [pc, #8]	; (d90e8 <HAL_USB_USART_Flush_Data+0xc>)
   d90e0:	681b      	ldr	r3, [r3, #0]
   d90e2:	6a1b      	ldr	r3, [r3, #32]
   d90e4:	9301      	str	r3, [sp, #4]
   d90e6:	bd08      	pop	{r3, pc}
   d90e8:	0003024c 	.word	0x0003024c

000d90ec <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d90ec:	b508      	push	{r3, lr}
   d90ee:	4b02      	ldr	r3, [pc, #8]	; (d90f8 <panic_+0xc>)
   d90f0:	681b      	ldr	r3, [r3, #0]
   d90f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d90f4:	9301      	str	r3, [sp, #4]
   d90f6:	bd08      	pop	{r3, pc}
   d90f8:	00030260 	.word	0x00030260

000d90fc <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d90fc:	b508      	push	{r3, lr}
   d90fe:	4b02      	ldr	r3, [pc, #8]	; (d9108 <log_message_v+0xc>)
   d9100:	681b      	ldr	r3, [r3, #0]
   d9102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d9104:	9301      	str	r3, [sp, #4]
   d9106:	bd08      	pop	{r3, pc}
   d9108:	00030260 	.word	0x00030260

000d910c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d910c:	b508      	push	{r3, lr}
   d910e:	4b02      	ldr	r3, [pc, #8]	; (d9118 <log_level_name+0xc>)
   d9110:	681b      	ldr	r3, [r3, #0]
   d9112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d9114:	9301      	str	r3, [sp, #4]
   d9116:	bd08      	pop	{r3, pc}
   d9118:	00030260 	.word	0x00030260

000d911c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d911c:	b508      	push	{r3, lr}
   d911e:	4b02      	ldr	r3, [pc, #8]	; (d9128 <log_set_callbacks+0xc>)
   d9120:	681b      	ldr	r3, [r3, #0]
   d9122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d9124:	9301      	str	r3, [sp, #4]
   d9126:	bd08      	pop	{r3, pc}
   d9128:	00030260 	.word	0x00030260

000d912c <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d912c:	b508      	push	{r3, lr}
   d912e:	4b03      	ldr	r3, [pc, #12]	; (d913c <diag_get_source+0x10>)
   d9130:	681b      	ldr	r3, [r3, #0]
   d9132:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d9136:	9301      	str	r3, [sp, #4]
   d9138:	bd08      	pop	{r3, pc}
   d913a:	0000      	.short	0x0000
   d913c:	00030260 	.word	0x00030260

000d9140 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d9140:	b508      	push	{r3, lr}
   d9142:	4b02      	ldr	r3, [pc, #8]	; (d914c <system_mode+0xc>)
   d9144:	681b      	ldr	r3, [r3, #0]
   d9146:	681b      	ldr	r3, [r3, #0]
   d9148:	9301      	str	r3, [sp, #4]
   d914a:	bd08      	pop	{r3, pc}
   d914c:	00030220 	.word	0x00030220

000d9150 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d9150:	b508      	push	{r3, lr}
   d9152:	4b02      	ldr	r3, [pc, #8]	; (d915c <set_system_mode+0xc>)
   d9154:	681b      	ldr	r3, [r3, #0]
   d9156:	685b      	ldr	r3, [r3, #4]
   d9158:	9301      	str	r3, [sp, #4]
   d915a:	bd08      	pop	{r3, pc}
   d915c:	00030220 	.word	0x00030220

000d9160 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d9160:	b508      	push	{r3, lr}
   d9162:	4b02      	ldr	r3, [pc, #8]	; (d916c <system_delay_ms+0xc>)
   d9164:	681b      	ldr	r3, [r3, #0]
   d9166:	695b      	ldr	r3, [r3, #20]
   d9168:	9301      	str	r3, [sp, #4]
   d916a:	bd08      	pop	{r3, pc}
   d916c:	00030220 	.word	0x00030220

000d9170 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d9170:	b508      	push	{r3, lr}
   d9172:	4b02      	ldr	r3, [pc, #8]	; (d917c <system_subscribe_event+0xc>)
   d9174:	681b      	ldr	r3, [r3, #0]
   d9176:	6a1b      	ldr	r3, [r3, #32]
   d9178:	9301      	str	r3, [sp, #4]
   d917a:	bd08      	pop	{r3, pc}
   d917c:	00030220 	.word	0x00030220

000d9180 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d9180:	b508      	push	{r3, lr}
   d9182:	4b02      	ldr	r3, [pc, #8]	; (d918c <system_thread_set_state+0xc>)
   d9184:	681b      	ldr	r3, [r3, #0]
   d9186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9188:	9301      	str	r3, [sp, #4]
   d918a:	bd08      	pop	{r3, pc}
   d918c:	00030220 	.word	0x00030220

000d9190 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d9190:	b508      	push	{r3, lr}
   d9192:	4b02      	ldr	r3, [pc, #8]	; (d919c <application_thread_current+0xc>)
   d9194:	681b      	ldr	r3, [r3, #0]
   d9196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d9198:	9301      	str	r3, [sp, #4]
   d919a:	bd08      	pop	{r3, pc}
   d919c:	00030220 	.word	0x00030220

000d91a0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d91a0:	b508      	push	{r3, lr}
   d91a2:	4b02      	ldr	r3, [pc, #8]	; (d91ac <application_thread_invoke+0xc>)
   d91a4:	681b      	ldr	r3, [r3, #0]
   d91a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d91a8:	9301      	str	r3, [sp, #4]
   d91aa:	bd08      	pop	{r3, pc}
   d91ac:	00030220 	.word	0x00030220

000d91b0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d91b0:	b508      	push	{r3, lr}
   d91b2:	4b02      	ldr	r3, [pc, #8]	; (d91bc <system_thread_get_state+0xc>)
   d91b4:	681b      	ldr	r3, [r3, #0]
   d91b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d91b8:	9301      	str	r3, [sp, #4]
   d91ba:	bd08      	pop	{r3, pc}
   d91bc:	00030220 	.word	0x00030220

000d91c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d91c0:	b508      	push	{r3, lr}
   d91c2:	4b03      	ldr	r3, [pc, #12]	; (d91d0 <system_ctrl_set_app_request_handler+0x10>)
   d91c4:	681b      	ldr	r3, [r3, #0]
   d91c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d91ca:	9301      	str	r3, [sp, #4]
   d91cc:	bd08      	pop	{r3, pc}
   d91ce:	0000      	.short	0x0000
   d91d0:	00030220 	.word	0x00030220

000d91d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d91d4:	b508      	push	{r3, lr}
   d91d6:	4b03      	ldr	r3, [pc, #12]	; (d91e4 <system_ctrl_set_result+0x10>)
   d91d8:	681b      	ldr	r3, [r3, #0]
   d91da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d91de:	9301      	str	r3, [sp, #4]
   d91e0:	bd08      	pop	{r3, pc}
   d91e2:	0000      	.short	0x0000
   d91e4:	00030220 	.word	0x00030220

000d91e8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d91e8:	b508      	push	{r3, lr}
   d91ea:	4b02      	ldr	r3, [pc, #8]	; (d91f4 <spark_variable+0xc>)
   d91ec:	681b      	ldr	r3, [r3, #0]
   d91ee:	681b      	ldr	r3, [r3, #0]
   d91f0:	9301      	str	r3, [sp, #4]
   d91f2:	bd08      	pop	{r3, pc}
   d91f4:	00030244 	.word	0x00030244

000d91f8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d91f8:	b508      	push	{r3, lr}
   d91fa:	4b02      	ldr	r3, [pc, #8]	; (d9204 <spark_function+0xc>)
   d91fc:	681b      	ldr	r3, [r3, #0]
   d91fe:	685b      	ldr	r3, [r3, #4]
   d9200:	9301      	str	r3, [sp, #4]
   d9202:	bd08      	pop	{r3, pc}
   d9204:	00030244 	.word	0x00030244

000d9208 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d9208:	b508      	push	{r3, lr}
   d920a:	4b02      	ldr	r3, [pc, #8]	; (d9214 <spark_process+0xc>)
   d920c:	681b      	ldr	r3, [r3, #0]
   d920e:	689b      	ldr	r3, [r3, #8]
   d9210:	9301      	str	r3, [sp, #4]
   d9212:	bd08      	pop	{r3, pc}
   d9214:	00030244 	.word	0x00030244

000d9218 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d9218:	b508      	push	{r3, lr}
   d921a:	4b02      	ldr	r3, [pc, #8]	; (d9224 <spark_cloud_flag_connect+0xc>)
   d921c:	681b      	ldr	r3, [r3, #0]
   d921e:	68db      	ldr	r3, [r3, #12]
   d9220:	9301      	str	r3, [sp, #4]
   d9222:	bd08      	pop	{r3, pc}
   d9224:	00030244 	.word	0x00030244

000d9228 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d9228:	b508      	push	{r3, lr}
   d922a:	4b02      	ldr	r3, [pc, #8]	; (d9234 <spark_cloud_flag_connected+0xc>)
   d922c:	681b      	ldr	r3, [r3, #0]
   d922e:	695b      	ldr	r3, [r3, #20]
   d9230:	9301      	str	r3, [sp, #4]
   d9232:	bd08      	pop	{r3, pc}
   d9234:	00030244 	.word	0x00030244

000d9238 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d9238:	b508      	push	{r3, lr}
   d923a:	4b02      	ldr	r3, [pc, #8]	; (d9244 <spark_send_event+0xc>)
   d923c:	681b      	ldr	r3, [r3, #0]
   d923e:	6a1b      	ldr	r3, [r3, #32]
   d9240:	9301      	str	r3, [sp, #4]
   d9242:	bd08      	pop	{r3, pc}
   d9244:	00030244 	.word	0x00030244

000d9248 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d9248:	b508      	push	{r3, lr}
   d924a:	4b02      	ldr	r3, [pc, #8]	; (d9254 <spark_sync_time+0xc>)
   d924c:	681b      	ldr	r3, [r3, #0]
   d924e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9250:	9301      	str	r3, [sp, #4]
   d9252:	bd08      	pop	{r3, pc}
   d9254:	00030244 	.word	0x00030244

000d9258 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d9258:	b508      	push	{r3, lr}
   d925a:	4b02      	ldr	r3, [pc, #8]	; (d9264 <spark_sync_time_pending+0xc>)
   d925c:	681b      	ldr	r3, [r3, #0]
   d925e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9260:	9301      	str	r3, [sp, #4]
   d9262:	bd08      	pop	{r3, pc}
   d9264:	00030244 	.word	0x00030244

000d9268 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d9268:	b508      	push	{r3, lr}
   d926a:	4b02      	ldr	r3, [pc, #8]	; (d9274 <spark_set_connection_property+0xc>)
   d926c:	681b      	ldr	r3, [r3, #0]
   d926e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d9270:	9301      	str	r3, [sp, #4]
   d9272:	bd08      	pop	{r3, pc}
   d9274:	00030244 	.word	0x00030244

000d9278 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d9278:	b508      	push	{r3, lr}
   d927a:	4b02      	ldr	r3, [pc, #8]	; (d9284 <spark_set_random_seed_from_cloud_handler+0xc>)
   d927c:	681b      	ldr	r3, [r3, #0]
   d927e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d9280:	9301      	str	r3, [sp, #4]
   d9282:	bd08      	pop	{r3, pc}
   d9284:	00030244 	.word	0x00030244

000d9288 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d9288:	b508      	push	{r3, lr}
   d928a:	4b02      	ldr	r3, [pc, #8]	; (d9294 <spark_cloud_disconnect+0xc>)
   d928c:	681b      	ldr	r3, [r3, #0]
   d928e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9290:	9301      	str	r3, [sp, #4]
   d9292:	bd08      	pop	{r3, pc}
   d9294:	00030244 	.word	0x00030244

000d9298 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d9298:	b508      	push	{r3, lr}
   d929a:	4b02      	ldr	r3, [pc, #8]	; (d92a4 <network_connect+0xc>)
   d929c:	681b      	ldr	r3, [r3, #0]
   d929e:	685b      	ldr	r3, [r3, #4]
   d92a0:	9301      	str	r3, [sp, #4]
   d92a2:	bd08      	pop	{r3, pc}
   d92a4:	00030240 	.word	0x00030240

000d92a8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d92a8:	b508      	push	{r3, lr}
   d92aa:	4b02      	ldr	r3, [pc, #8]	; (d92b4 <network_connecting+0xc>)
   d92ac:	681b      	ldr	r3, [r3, #0]
   d92ae:	689b      	ldr	r3, [r3, #8]
   d92b0:	9301      	str	r3, [sp, #4]
   d92b2:	bd08      	pop	{r3, pc}
   d92b4:	00030240 	.word	0x00030240

000d92b8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d92b8:	b508      	push	{r3, lr}
   d92ba:	4b02      	ldr	r3, [pc, #8]	; (d92c4 <network_disconnect+0xc>)
   d92bc:	681b      	ldr	r3, [r3, #0]
   d92be:	68db      	ldr	r3, [r3, #12]
   d92c0:	9301      	str	r3, [sp, #4]
   d92c2:	bd08      	pop	{r3, pc}
   d92c4:	00030240 	.word	0x00030240

000d92c8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d92c8:	b508      	push	{r3, lr}
   d92ca:	4b02      	ldr	r3, [pc, #8]	; (d92d4 <network_ready+0xc>)
   d92cc:	681b      	ldr	r3, [r3, #0]
   d92ce:	691b      	ldr	r3, [r3, #16]
   d92d0:	9301      	str	r3, [sp, #4]
   d92d2:	bd08      	pop	{r3, pc}
   d92d4:	00030240 	.word	0x00030240

000d92d8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d92d8:	b508      	push	{r3, lr}
   d92da:	4b02      	ldr	r3, [pc, #8]	; (d92e4 <network_on+0xc>)
   d92dc:	681b      	ldr	r3, [r3, #0]
   d92de:	695b      	ldr	r3, [r3, #20]
   d92e0:	9301      	str	r3, [sp, #4]
   d92e2:	bd08      	pop	{r3, pc}
   d92e4:	00030240 	.word	0x00030240

000d92e8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d92e8:	b508      	push	{r3, lr}
   d92ea:	4b02      	ldr	r3, [pc, #8]	; (d92f4 <network_off+0xc>)
   d92ec:	681b      	ldr	r3, [r3, #0]
   d92ee:	699b      	ldr	r3, [r3, #24]
   d92f0:	9301      	str	r3, [sp, #4]
   d92f2:	bd08      	pop	{r3, pc}
   d92f4:	00030240 	.word	0x00030240

000d92f8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d92f8:	b508      	push	{r3, lr}
   d92fa:	4b02      	ldr	r3, [pc, #8]	; (d9304 <network_listen+0xc>)
   d92fc:	681b      	ldr	r3, [r3, #0]
   d92fe:	69db      	ldr	r3, [r3, #28]
   d9300:	9301      	str	r3, [sp, #4]
   d9302:	bd08      	pop	{r3, pc}
   d9304:	00030240 	.word	0x00030240

000d9308 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d9308:	b508      	push	{r3, lr}
   d930a:	4b02      	ldr	r3, [pc, #8]	; (d9314 <network_listening+0xc>)
   d930c:	681b      	ldr	r3, [r3, #0]
   d930e:	6a1b      	ldr	r3, [r3, #32]
   d9310:	9301      	str	r3, [sp, #4]
   d9312:	bd08      	pop	{r3, pc}
   d9314:	00030240 	.word	0x00030240

000d9318 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d9318:	b508      	push	{r3, lr}
   d931a:	4b02      	ldr	r3, [pc, #8]	; (d9324 <network_set_listen_timeout+0xc>)
   d931c:	681b      	ldr	r3, [r3, #0]
   d931e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9320:	9301      	str	r3, [sp, #4]
   d9322:	bd08      	pop	{r3, pc}
   d9324:	00030240 	.word	0x00030240

000d9328 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d9328:	b508      	push	{r3, lr}
   d932a:	4b02      	ldr	r3, [pc, #8]	; (d9334 <network_get_listen_timeout+0xc>)
   d932c:	681b      	ldr	r3, [r3, #0]
   d932e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d9330:	9301      	str	r3, [sp, #4]
   d9332:	bd08      	pop	{r3, pc}
   d9334:	00030240 	.word	0x00030240

000d9338 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d9338:	b508      	push	{r3, lr}
   d933a:	4b02      	ldr	r3, [pc, #8]	; (d9344 <network_is_on+0xc>)
   d933c:	681b      	ldr	r3, [r3, #0]
   d933e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d9340:	9301      	str	r3, [sp, #4]
   d9342:	bd08      	pop	{r3, pc}
   d9344:	00030240 	.word	0x00030240

000d9348 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d9348:	b508      	push	{r3, lr}
   d934a:	4b02      	ldr	r3, [pc, #8]	; (d9354 <network_is_off+0xc>)
   d934c:	681b      	ldr	r3, [r3, #0]
   d934e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9350:	9301      	str	r3, [sp, #4]
   d9352:	bd08      	pop	{r3, pc}
   d9354:	00030240 	.word	0x00030240

000d9358 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d9358:	b508      	push	{r3, lr}
   d935a:	4b02      	ldr	r3, [pc, #8]	; (d9364 <malloc+0xc>)
   d935c:	681b      	ldr	r3, [r3, #0]
   d935e:	681b      	ldr	r3, [r3, #0]
   d9360:	9301      	str	r3, [sp, #4]
   d9362:	bd08      	pop	{r3, pc}
   d9364:	0003021c 	.word	0x0003021c

000d9368 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d9368:	b508      	push	{r3, lr}
   d936a:	4b02      	ldr	r3, [pc, #8]	; (d9374 <free+0xc>)
   d936c:	681b      	ldr	r3, [r3, #0]
   d936e:	685b      	ldr	r3, [r3, #4]
   d9370:	9301      	str	r3, [sp, #4]
   d9372:	bd08      	pop	{r3, pc}
   d9374:	0003021c 	.word	0x0003021c

000d9378 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d9378:	b508      	push	{r3, lr}
   d937a:	4b02      	ldr	r3, [pc, #8]	; (d9384 <realloc+0xc>)
   d937c:	681b      	ldr	r3, [r3, #0]
   d937e:	689b      	ldr	r3, [r3, #8]
   d9380:	9301      	str	r3, [sp, #4]
   d9382:	bd08      	pop	{r3, pc}
   d9384:	0003021c 	.word	0x0003021c

000d9388 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d9388:	b508      	push	{r3, lr}
   d938a:	4b02      	ldr	r3, [pc, #8]	; (d9394 <siprintf+0xc>)
   d938c:	681b      	ldr	r3, [r3, #0]
   d938e:	691b      	ldr	r3, [r3, #16]
   d9390:	9301      	str	r3, [sp, #4]
   d9392:	bd08      	pop	{r3, pc}
   d9394:	0003021c 	.word	0x0003021c

000d9398 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d9398:	b508      	push	{r3, lr}
   d939a:	4b02      	ldr	r3, [pc, #8]	; (d93a4 <sscanf+0xc>)
   d939c:	681b      	ldr	r3, [r3, #0]
   d939e:	695b      	ldr	r3, [r3, #20]
   d93a0:	9301      	str	r3, [sp, #4]
   d93a2:	bd08      	pop	{r3, pc}
   d93a4:	0003021c 	.word	0x0003021c

000d93a8 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d93a8:	b508      	push	{r3, lr}
   d93aa:	4b02      	ldr	r3, [pc, #8]	; (d93b4 <snprintf+0xc>)
   d93ac:	681b      	ldr	r3, [r3, #0]
   d93ae:	69db      	ldr	r3, [r3, #28]
   d93b0:	9301      	str	r3, [sp, #4]
   d93b2:	bd08      	pop	{r3, pc}
   d93b4:	0003021c 	.word	0x0003021c

000d93b8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d93b8:	b508      	push	{r3, lr}
   d93ba:	4b02      	ldr	r3, [pc, #8]	; (d93c4 <vsnprintf+0xc>)
   d93bc:	681b      	ldr	r3, [r3, #0]
   d93be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d93c0:	9301      	str	r3, [sp, #4]
   d93c2:	bd08      	pop	{r3, pc}
   d93c4:	0003021c 	.word	0x0003021c

000d93c8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d93c8:	b508      	push	{r3, lr}
   d93ca:	4b02      	ldr	r3, [pc, #8]	; (d93d4 <abort+0xc>)
   d93cc:	681b      	ldr	r3, [r3, #0]
   d93ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d93d0:	9301      	str	r3, [sp, #4]
   d93d2:	bd08      	pop	{r3, pc}
   d93d4:	0003021c 	.word	0x0003021c

000d93d8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d93d8:	b508      	push	{r3, lr}
   d93da:	4b02      	ldr	r3, [pc, #8]	; (d93e4 <_malloc_r+0xc>)
   d93dc:	681b      	ldr	r3, [r3, #0]
   d93de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d93e0:	9301      	str	r3, [sp, #4]
   d93e2:	bd08      	pop	{r3, pc}
   d93e4:	0003021c 	.word	0x0003021c

000d93e8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d93e8:	b508      	push	{r3, lr}
   d93ea:	4b02      	ldr	r3, [pc, #8]	; (d93f4 <__errno+0xc>)
   d93ec:	681b      	ldr	r3, [r3, #0]
   d93ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d93f0:	9301      	str	r3, [sp, #4]
   d93f2:	bd08      	pop	{r3, pc}
   d93f4:	0003021c 	.word	0x0003021c

000d93f8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d93f8:	b508      	push	{r3, lr}
   d93fa:	4b02      	ldr	r3, [pc, #8]	; (d9404 <newlib_impure_ptr_callback+0xc>)
   d93fc:	681b      	ldr	r3, [r3, #0]
   d93fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9400:	9301      	str	r3, [sp, #4]
   d9402:	bd08      	pop	{r3, pc}
   d9404:	0003021c 	.word	0x0003021c

000d9408 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d9408:	b508      	push	{r3, lr}
   d940a:	4b02      	ldr	r3, [pc, #8]	; (d9414 <strftime+0xc>)
   d940c:	681b      	ldr	r3, [r3, #0]
   d940e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d9410:	9301      	str	r3, [sp, #4]
   d9412:	bd08      	pop	{r3, pc}
   d9414:	0003021c 	.word	0x0003021c

000d9418 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d9418:	b508      	push	{r3, lr}
   d941a:	4b02      	ldr	r3, [pc, #8]	; (d9424 <localtime_r+0xc>)
   d941c:	681b      	ldr	r3, [r3, #0]
   d941e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d9420:	9301      	str	r3, [sp, #4]
   d9422:	bd08      	pop	{r3, pc}
   d9424:	0003021c 	.word	0x0003021c

000d9428 <mktime>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d9428:	b508      	push	{r3, lr}
   d942a:	4b02      	ldr	r3, [pc, #8]	; (d9434 <mktime+0xc>)
   d942c:	681b      	ldr	r3, [r3, #0]
   d942e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d9430:	9301      	str	r3, [sp, #4]
   d9432:	bd08      	pop	{r3, pc}
   d9434:	0003021c 	.word	0x0003021c

000d9438 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d9438:	2100      	movs	r1, #0
   d943a:	f7ff be91 	b.w	d9160 <system_delay_ms>

000d943e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d943e:	b510      	push	{r4, lr}
      if (_M_empty())
   d9440:	6883      	ldr	r3, [r0, #8]
   d9442:	4604      	mov	r4, r0
   d9444:	b90b      	cbnz	r3, d944a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d9446:	f002 fc0d 	bl	dbc64 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d944a:	68c3      	ldr	r3, [r0, #12]
   d944c:	4798      	blx	r3
      if (_M_manager)
   d944e:	68a3      	ldr	r3, [r4, #8]
   d9450:	b11b      	cbz	r3, d945a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d9452:	2203      	movs	r2, #3
   d9454:	4621      	mov	r1, r4
   d9456:	4620      	mov	r0, r4
   d9458:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d945a:	4620      	mov	r0, r4
   d945c:	2110      	movs	r1, #16
}
   d945e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d9462:	f002 bbf3 	b.w	dbc4c <_ZdlPvj>

000d9466 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d9466:	680b      	ldr	r3, [r1, #0]
   d9468:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d946a:	b113      	cbz	r3, d9472 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d946c:	685a      	ldr	r2, [r3, #4]
   d946e:	3201      	adds	r2, #1
   d9470:	605a      	str	r2, [r3, #4]
      }
   d9472:	4770      	bx	lr

000d9474 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d9474:	4802      	ldr	r0, [pc, #8]	; (d9480 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d9476:	2300      	movs	r3, #0
   d9478:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d947a:	f7ff bc1f 	b.w	d8cbc <os_mutex_recursive_create>
   d947e:	bf00      	nop
   d9480:	2003e554 	.word	0x2003e554

000d9484 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d9484:	2200      	movs	r2, #0
   d9486:	6840      	ldr	r0, [r0, #4]
   d9488:	4611      	mov	r1, r2
   d948a:	f7ff bf1d 	b.w	d92c8 <network_ready>

000d948e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d948e:	2200      	movs	r2, #0
   d9490:	6840      	ldr	r0, [r0, #4]
   d9492:	4611      	mov	r1, r2
   d9494:	f7ff bf38 	b.w	d9308 <network_listening>

000d9498 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d9498:	2200      	movs	r2, #0
   d949a:	6840      	ldr	r0, [r0, #4]
   d949c:	4611      	mov	r1, r2
   d949e:	f7ff bf43 	b.w	d9328 <network_get_listen_timeout>

000d94a2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d94a2:	6840      	ldr	r0, [r0, #4]
   d94a4:	2200      	movs	r2, #0
   d94a6:	f7ff bf37 	b.w	d9318 <network_set_listen_timeout>

000d94aa <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d94aa:	6840      	ldr	r0, [r0, #4]
   d94ac:	2200      	movs	r2, #0
   d94ae:	f081 0101 	eor.w	r1, r1, #1
   d94b2:	f7ff bf21 	b.w	d92f8 <network_listen>

000d94b6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d94b6:	2300      	movs	r3, #0
   d94b8:	6840      	ldr	r0, [r0, #4]
   d94ba:	461a      	mov	r2, r3
   d94bc:	4619      	mov	r1, r3
   d94be:	f7ff bf13 	b.w	d92e8 <network_off>

000d94c2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d94c2:	2300      	movs	r3, #0
   d94c4:	6840      	ldr	r0, [r0, #4]
   d94c6:	461a      	mov	r2, r3
   d94c8:	4619      	mov	r1, r3
   d94ca:	f7ff bf05 	b.w	d92d8 <network_on>

000d94ce <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d94ce:	2200      	movs	r2, #0
   d94d0:	6840      	ldr	r0, [r0, #4]
   d94d2:	4611      	mov	r1, r2
   d94d4:	f7ff bee8 	b.w	d92a8 <network_connecting>

000d94d8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d94d8:	6840      	ldr	r0, [r0, #4]
   d94da:	2200      	movs	r2, #0
   d94dc:	2102      	movs	r1, #2
   d94de:	f7ff beeb 	b.w	d92b8 <network_disconnect>

000d94e2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d94e2:	2300      	movs	r3, #0
   d94e4:	6840      	ldr	r0, [r0, #4]
   d94e6:	461a      	mov	r2, r3
   d94e8:	f7ff bed6 	b.w	d9298 <network_connect>

000d94ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d94ec:	4b08      	ldr	r3, [pc, #32]	; (d9510 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d94ee:	b510      	push	{r4, lr}
   d94f0:	2428      	movs	r4, #40	; 0x28
   d94f2:	4622      	mov	r2, r4
   d94f4:	4618      	mov	r0, r3
   d94f6:	2100      	movs	r1, #0
   d94f8:	f002 fffa 	bl	dc4f0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d94fc:	4b05      	ldr	r3, [pc, #20]	; (d9514 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d94fe:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d9500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9504:	6042      	str	r2, [r0, #4]
   d9506:	2204      	movs	r2, #4
   d9508:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d950a:	4a03      	ldr	r2, [pc, #12]	; (d9518 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d950c:	601a      	str	r2, [r3, #0]
   d950e:	bd10      	pop	{r4, pc}
   d9510:	2003e560 	.word	0x2003e560
   d9514:	2003e558 	.word	0x2003e558
   d9518:	000dd440 	.word	0x000dd440

000d951c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d951c:	4770      	bx	lr

000d951e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d951e:	2000      	movs	r0, #0
   d9520:	4770      	bx	lr

000d9522 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d9522:	b510      	push	{r4, lr}
   d9524:	2110      	movs	r1, #16
   d9526:	4604      	mov	r4, r0
   d9528:	f002 fb90 	bl	dbc4c <_ZdlPvj>
   d952c:	4620      	mov	r0, r4
   d952e:	bd10      	pop	{r4, pc}

000d9530 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d9530:	b508      	push	{r3, lr}
      { delete this; }
   d9532:	f7ff fff6 	bl	d9522 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d9536:	bd08      	pop	{r3, pc}

000d9538 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d9538:	b530      	push	{r4, r5, lr}
        type_(type) {
   d953a:	2200      	movs	r2, #0
   d953c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d9540:	6002      	str	r2, [r0, #0]
   d9542:	8084      	strh	r4, [r0, #4]
   d9544:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d9546:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9548:	680c      	ldr	r4, [r1, #0]
   d954a:	8085      	strh	r5, [r0, #4]
   d954c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d954e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d9550:	bd30      	pop	{r4, r5, pc}

000d9552 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d9552:	b510      	push	{r4, lr}
   d9554:	4604      	mov	r4, r0
    free((void*)msg_);
   d9556:	6800      	ldr	r0, [r0, #0]
   d9558:	f7ff ff06 	bl	d9368 <free>
}
   d955c:	4620      	mov	r0, r4
   d955e:	bd10      	pop	{r4, pc}

000d9560 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d9560:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d9562:	68c4      	ldr	r4, [r0, #12]
   d9564:	b1f4      	cbz	r4, d95a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d9566:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d9568:	2b02      	cmp	r3, #2
   d956a:	d103      	bne.n	d9574 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d956c:	f104 000c 	add.w	r0, r4, #12
   d9570:	f7ff ffef 	bl	d9552 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d9574:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d9576:	b135      	cbz	r5, d9586 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d9578:	4628      	mov	r0, r5
   d957a:	f7fb fbc5 	bl	d4d08 <_ZNSt14_Function_baseD1Ev>
   d957e:	2110      	movs	r1, #16
   d9580:	4628      	mov	r0, r5
   d9582:	f002 fb63 	bl	dbc4c <_ZdlPvj>
   d9586:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d9588:	b135      	cbz	r5, d9598 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d958a:	4628      	mov	r0, r5
   d958c:	f7fb fbbc 	bl	d4d08 <_ZNSt14_Function_baseD1Ev>
   d9590:	2110      	movs	r1, #16
   d9592:	4628      	mov	r0, r5
   d9594:	f002 fb5a 	bl	dbc4c <_ZdlPvj>
   d9598:	4620      	mov	r0, r4
   d959a:	2114      	movs	r1, #20
   d959c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d95a0:	f002 bb54 	b.w	dbc4c <_ZdlPvj>
   d95a4:	bd38      	pop	{r3, r4, r5, pc}

000d95a6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d95a6:	b510      	push	{r4, lr}
   d95a8:	b088      	sub	sp, #32
   d95aa:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d95ac:	4668      	mov	r0, sp
   d95ae:	f001 ff6e 	bl	db48e <_ZN6StringC1EPKc>
    return (*fn)(p);
   d95b2:	4669      	mov	r1, sp
   d95b4:	a804      	add	r0, sp, #16
   d95b6:	f001 ffb5 	bl	db524 <_ZN6StringC1ERKS_>
   d95ba:	a804      	add	r0, sp, #16
   d95bc:	47a0      	blx	r4
   d95be:	4604      	mov	r4, r0
   d95c0:	a804      	add	r0, sp, #16
   d95c2:	f001 ff19 	bl	db3f8 <_ZN6StringD1Ev>
    String p(param);
   d95c6:	4668      	mov	r0, sp
   d95c8:	f001 ff16 	bl	db3f8 <_ZN6StringD1Ev>
}
   d95cc:	4620      	mov	r0, r4
   d95ce:	b008      	add	sp, #32
   d95d0:	bd10      	pop	{r4, pc}

000d95d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d95d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d95d4:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d95d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d95da:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d95dc:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d95de:	461a      	mov	r2, r3
   d95e0:	4669      	mov	r1, sp
   d95e2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d95e4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d95e8:	f8ad 4000 	strh.w	r4, [sp]
   d95ec:	f7ff fe04 	bl	d91f8 <spark_function>
}
   d95f0:	b004      	add	sp, #16
   d95f2:	bd10      	pop	{r4, pc}

000d95f4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d95f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d95f6:	230c      	movs	r3, #12
   d95f8:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   d95fc:	6803      	ldr	r3, [r0, #0]
   d95fe:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   d9602:	7a03      	ldrb	r3, [r0, #8]
   d9604:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   d9608:	6843      	ldr	r3, [r0, #4]
   d960a:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d960c:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   d960e:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   d9610:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d9614:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   d9616:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   d961a:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d961e:	f7ff fe33 	bl	d9288 <spark_cloud_disconnect>
}
   d9622:	b005      	add	sp, #20
   d9624:	f85d fb04 	ldr.w	pc, [sp], #4

000d9628 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d9628:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d962a:	460e      	mov	r6, r1
   d962c:	4604      	mov	r4, r0
   d962e:	f856 3b04 	ldr.w	r3, [r6], #4
   d9632:	9300      	str	r3, [sp, #0]
   d9634:	460d      	mov	r5, r1
   d9636:	a801      	add	r0, sp, #4
   d9638:	4631      	mov	r1, r6
   d963a:	f7ff ff14 	bl	d9466 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d963e:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d9640:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d9642:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d9644:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d9646:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d9648:	2300      	movs	r3, #0
   d964a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d964c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d964e:	f7fa fdcd 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9652:	4630      	mov	r0, r6
   d9654:	f7fa fdca 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d9658:	4628      	mov	r0, r5
   d965a:	2108      	movs	r1, #8
   d965c:	f002 faf6 	bl	dbc4c <_ZdlPvj>
        return p;
    }
   d9660:	4620      	mov	r0, r4
   d9662:	b002      	add	sp, #8
   d9664:	bd70      	pop	{r4, r5, r6, pc}

000d9666 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d9666:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d9668:	b510      	push	{r4, lr}
      if (_M_empty())
   d966a:	b90a      	cbnz	r2, d9670 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d966c:	f002 fafa 	bl	dbc64 <_ZSt25__throw_bad_function_callv>
    }
   d9670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9674:	68c3      	ldr	r3, [r0, #12]
   d9676:	4718      	bx	r3

000d9678 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d9678:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d967a:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d967c:	f100 0110 	add.w	r1, r0, #16
   d9680:	f7ff fff1 	bl	d9666 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d9684:	bd08      	pop	{r3, pc}

000d9686 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d9686:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d9688:	b510      	push	{r4, lr}
      if (_M_empty())
   d968a:	b90a      	cbnz	r2, d9690 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d968c:	f002 faea 	bl	dbc64 <_ZSt25__throw_bad_function_callv>
    }
   d9690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9694:	68c3      	ldr	r3, [r0, #12]
   d9696:	4718      	bx	r3

000d9698 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d9698:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d969a:	6800      	ldr	r0, [r0, #0]
   d969c:	f100 0110 	add.w	r1, r0, #16
   d96a0:	f7ff fff1 	bl	d9686 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d96a4:	bd08      	pop	{r3, pc}
	...

000d96a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d96a8:	b538      	push	{r3, r4, r5, lr}
   d96aa:	2300      	movs	r3, #0
   d96ac:	4604      	mov	r4, r0
   d96ae:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d96b0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d96b2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d96b4:	f7fa fcef 	bl	d4096 <_Znwj>
   d96b8:	b128      	cbz	r0, d96c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d96ba:	2301      	movs	r3, #1
   d96bc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d96c0:	4b02      	ldr	r3, [pc, #8]	; (d96cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d96c2:	6003      	str	r3, [r0, #0]
   d96c4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d96c6:	6020      	str	r0, [r4, #0]
	}
   d96c8:	4620      	mov	r0, r4
   d96ca:	bd38      	pop	{r3, r4, r5, pc}
   d96cc:	000dd47c 	.word	0x000dd47c

000d96d0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d96d0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d96d2:	2300      	movs	r3, #0
   d96d4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d96d6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d96d8:	4604      	mov	r4, r0
   d96da:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d96dc:	b12b      	cbz	r3, d96ea <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d96de:	2202      	movs	r2, #2
   d96e0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d96e2:	68eb      	ldr	r3, [r5, #12]
   d96e4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d96e6:	68ab      	ldr	r3, [r5, #8]
   d96e8:	60a3      	str	r3, [r4, #8]
    }
   d96ea:	4620      	mov	r0, r4
   d96ec:	bd38      	pop	{r3, r4, r5, pc}
	...

000d96f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d96f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d96f2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d96f4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d96f6:	4668      	mov	r0, sp
   d96f8:	f7ff ff1e 	bl	d9538 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d96fc:	f04f 0302 	mov.w	r3, #2
   d9700:	e8d4 2f4f 	ldrexb	r2, [r4]
   d9704:	2a00      	cmp	r2, #0
   d9706:	d103      	bne.n	d9710 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d9708:	e8c4 3f41 	strexb	r1, r3, [r4]
   d970c:	2900      	cmp	r1, #0
   d970e:	d1f7      	bne.n	d9700 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d9710:	d125      	bne.n	d975e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d9712:	f104 050c 	add.w	r5, r4, #12
   d9716:	4669      	mov	r1, sp
   d9718:	4628      	mov	r0, r5
   d971a:	f7ff ff0d 	bl	d9538 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d971e:	f3bf 8f5b 	dmb	ish
   d9722:	2301      	movs	r3, #1
   d9724:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d9726:	2000      	movs	r0, #0
   d9728:	f104 0308 	add.w	r3, r4, #8
   d972c:	f3bf 8f5b 	dmb	ish
   d9730:	e853 6f00 	ldrex	r6, [r3]
   d9734:	e843 0200 	strex	r2, r0, [r3]
   d9738:	2a00      	cmp	r2, #0
   d973a:	d1f9      	bne.n	d9730 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d973c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d9740:	b16e      	cbz	r6, d975e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d9742:	f7ff fd25 	bl	d9190 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d9746:	b178      	cbz	r0, d9768 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d9748:	4629      	mov	r1, r5
   d974a:	4630      	mov	r0, r6
   d974c:	f7ff ff8b 	bl	d9666 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d9750:	4630      	mov	r0, r6
   d9752:	f7fb fad9 	bl	d4d08 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d9756:	2110      	movs	r1, #16
   d9758:	4630      	mov	r0, r6
   d975a:	f002 fa77 	bl	dbc4c <_ZdlPvj>
        p_->setError(std::move(error));
   d975e:	4668      	mov	r0, sp
   d9760:	f7ff fef7 	bl	d9552 <_ZN8particle5ErrorD1Ev>
    }
   d9764:	b009      	add	sp, #36	; 0x24
   d9766:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d9768:	4631      	mov	r1, r6
   d976a:	a802      	add	r0, sp, #8
   d976c:	f7ff ffb0 	bl	d96d0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d9770:	68e0      	ldr	r0, [r4, #12]
   d9772:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d9776:	b108      	cbz	r0, d977c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d9778:	f002 ff44 	bl	dc604 <strdup>
        type_(type) {
   d977c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d977e:	2010      	movs	r0, #16
   d9780:	f8ad 501c 	strh.w	r5, [sp, #28]
   d9784:	f7fa fc87 	bl	d4096 <_Znwj>
   d9788:	4605      	mov	r5, r0
   d978a:	b1e8      	cbz	r0, d97c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d978c:	2700      	movs	r7, #0
   d978e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9790:	2018      	movs	r0, #24
   d9792:	f7fa fc80 	bl	d4096 <_Znwj>
   d9796:	4604      	mov	r4, r0
   d9798:	b188      	cbz	r0, d97be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d979a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d979c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d979e:	a802      	add	r0, sp, #8
   d97a0:	f7fb fbb1 	bl	d4f06 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d97a4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d97a6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d97a8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d97aa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d97ac:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d97ae:	a906      	add	r1, sp, #24
   d97b0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d97b2:	60e3      	str	r3, [r4, #12]
   d97b4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d97b8:	9205      	str	r2, [sp, #20]
   d97ba:	f7ff febd 	bl	d9538 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d97be:	4b08      	ldr	r3, [pc, #32]	; (d97e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d97c0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d97c2:	4b08      	ldr	r3, [pc, #32]	; (d97e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d97c4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d97c6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d97c8:	a806      	add	r0, sp, #24
   d97ca:	f7ff fec2 	bl	d9552 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d97ce:	a802      	add	r0, sp, #8
   d97d0:	f7fb fa9a 	bl	d4d08 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d97d4:	2200      	movs	r2, #0
   d97d6:	4629      	mov	r1, r5
   d97d8:	4803      	ldr	r0, [pc, #12]	; (d97e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d97da:	f7ff fce1 	bl	d91a0 <application_thread_invoke>
   d97de:	e7b7      	b.n	d9750 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d97e0:	000d9679 	.word	0x000d9679
   d97e4:	000d9911 	.word	0x000d9911
   d97e8:	000d943f 	.word	0x000d943f

000d97ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d97ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d97f0:	b08a      	sub	sp, #40	; 0x28
   d97f2:	4605      	mov	r5, r0
   d97f4:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d97f8:	460c      	mov	r4, r1
   d97fa:	4617      	mov	r7, r2
   d97fc:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d97fe:	f7ff fd13 	bl	d9228 <spark_cloud_flag_connected>
   d9802:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d9804:	4682      	mov	sl, r0
   d9806:	bb38      	cbnz	r0, d9858 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d9808:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d980c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d980e:	a905      	add	r1, sp, #20
   d9810:	4630      	mov	r0, r6
   d9812:	f8ad 3018 	strh.w	r3, [sp, #24]
   d9816:	f7ff fe8f 	bl	d9538 <_ZN8particle5ErrorC1EOS0_>
   d981a:	2014      	movs	r0, #20
   d981c:	f7fa fc3b 	bl	d4096 <_Znwj>
   d9820:	4604      	mov	r4, r0
   d9822:	b148      	cbz	r0, d9838 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d9824:	2302      	movs	r3, #2
   d9826:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9828:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d982a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d982e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d9830:	4631      	mov	r1, r6
   d9832:	300c      	adds	r0, #12
   d9834:	f7ff fe80 	bl	d9538 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d9838:	4628      	mov	r0, r5
	: __shared_count(__p)
   d983a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d983c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d9840:	f7ff ff32 	bl	d96a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d9844:	4630      	mov	r0, r6
   d9846:	f7ff fe84 	bl	d9552 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d984a:	a805      	add	r0, sp, #20
   d984c:	f7ff fe81 	bl	d9552 <_ZN8particle5ErrorD1Ev>
}
   d9850:	4628      	mov	r0, r5
   d9852:	b00a      	add	sp, #40	; 0x28
   d9854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d9858:	230c      	movs	r3, #12
   d985a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d985e:	2014      	movs	r0, #20
   d9860:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d9864:	9307      	str	r3, [sp, #28]
   d9866:	f7fa fc16 	bl	d4096 <_Znwj>
   d986a:	4601      	mov	r1, r0
   d986c:	b128      	cbz	r0, d987a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d986e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d9872:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9876:	f880 a001 	strb.w	sl, [r0, #1]
   d987a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d987c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d987e:	f7ff ff13 	bl	d96a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d9882:	4b22      	ldr	r3, [pc, #136]	; (d990c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d9884:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d9886:	2008      	movs	r0, #8
   d9888:	f7fa fc05 	bl	d4096 <_Znwj>
   d988c:	4682      	mov	sl, r0
   d988e:	b128      	cbz	r0, d989c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9890:	9b03      	ldr	r3, [sp, #12]
   d9892:	f840 3b04 	str.w	r3, [r0], #4
   d9896:	a904      	add	r1, sp, #16
   d9898:	f7ff fde5 	bl	d9466 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d989c:	9600      	str	r6, [sp, #0]
   d989e:	fa5f f389 	uxtb.w	r3, r9
   d98a2:	4642      	mov	r2, r8
   d98a4:	4639      	mov	r1, r7
   d98a6:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d98a8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d98ac:	f7ff fcc4 	bl	d9238 <spark_send_event>
   d98b0:	b9b8      	cbnz	r0, d98e2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d98b2:	9b03      	ldr	r3, [sp, #12]
   d98b4:	785b      	ldrb	r3, [r3, #1]
   d98b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d98ba:	b993      	cbnz	r3, d98e2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d98bc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d98c0:	a905      	add	r1, sp, #20
   d98c2:	a803      	add	r0, sp, #12
   d98c4:	9205      	str	r2, [sp, #20]
   d98c6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d98ca:	f7ff ff11 	bl	d96f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d98ce:	a805      	add	r0, sp, #20
   d98d0:	f7ff fe3f 	bl	d9552 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d98d4:	a805      	add	r0, sp, #20
   d98d6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d98d8:	f7ff fea6 	bl	d9628 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d98dc:	a806      	add	r0, sp, #24
   d98de:	f7fa fc85 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d98e2:	9b03      	ldr	r3, [sp, #12]
   d98e4:	9305      	str	r3, [sp, #20]
   d98e6:	a904      	add	r1, sp, #16
   d98e8:	a806      	add	r0, sp, #24
   d98ea:	f7ff fdbc 	bl	d9466 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d98ee:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d98f0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d98f2:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d98f4:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d98f6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d98f8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d98fa:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d98fc:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d98fe:	f7fa fc75 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9902:	a804      	add	r0, sp, #16
   d9904:	f7fa fc72 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d9908:	e7a2      	b.n	d9850 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d990a:	bf00      	nop
   d990c:	000d99d5 	.word	0x000d99d5

000d9910 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d9910:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d9912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9914:	4605      	mov	r5, r0
	  switch (__op)
   d9916:	d007      	beq.n	d9928 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d9918:	2a03      	cmp	r2, #3
   d991a:	d018      	beq.n	d994e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d991c:	2a01      	cmp	r2, #1
   d991e:	d101      	bne.n	d9924 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d9920:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9922:	6003      	str	r3, [r0, #0]
	}
   d9924:	2000      	movs	r0, #0
   d9926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d9928:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d992a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d992c:	f7fa fbb3 	bl	d4096 <_Znwj>
   d9930:	4604      	mov	r4, r0
   d9932:	b150      	cbz	r0, d994a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d9934:	4631      	mov	r1, r6
   d9936:	f7ff fecb 	bl	d96d0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d993a:	6930      	ldr	r0, [r6, #16]
   d993c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d9940:	b108      	cbz	r0, d9946 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d9942:	f002 fe5f 	bl	dc604 <strdup>
        type_(type) {
   d9946:	6120      	str	r0, [r4, #16]
   d9948:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d994a:	602c      	str	r4, [r5, #0]
	}
   d994c:	e7ea      	b.n	d9924 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d994e:	6804      	ldr	r4, [r0, #0]
   d9950:	2c00      	cmp	r4, #0
   d9952:	d0e7      	beq.n	d9924 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d9954:	f104 0010 	add.w	r0, r4, #16
   d9958:	f7ff fdfb 	bl	d9552 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d995c:	4620      	mov	r0, r4
   d995e:	f7fb f9d3 	bl	d4d08 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d9962:	2118      	movs	r1, #24
   d9964:	4620      	mov	r0, r4
   d9966:	f002 f971 	bl	dbc4c <_ZdlPvj>
   d996a:	e7db      	b.n	d9924 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d996c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d996c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d996e:	2300      	movs	r3, #0
   d9970:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d9972:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d9974:	4604      	mov	r4, r0
   d9976:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d9978:	b12b      	cbz	r3, d9986 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d997a:	2202      	movs	r2, #2
   d997c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d997e:	68eb      	ldr	r3, [r5, #12]
   d9980:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d9982:	68ab      	ldr	r3, [r5, #8]
   d9984:	60a3      	str	r3, [r4, #8]
    }
   d9986:	4620      	mov	r0, r4
   d9988:	bd38      	pop	{r3, r4, r5, pc}

000d998a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d998a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d998c:	b570      	push	{r4, r5, r6, lr}
   d998e:	4604      	mov	r4, r0
	  switch (__op)
   d9990:	d007      	beq.n	d99a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d9992:	2a03      	cmp	r2, #3
   d9994:	d012      	beq.n	d99bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d9996:	2a01      	cmp	r2, #1
   d9998:	d101      	bne.n	d999e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d999a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d999c:	6003      	str	r3, [r0, #0]
	}
   d999e:	2000      	movs	r0, #0
   d99a0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d99a2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d99a4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d99a6:	f7fa fb76 	bl	d4096 <_Znwj>
   d99aa:	4605      	mov	r5, r0
   d99ac:	b120      	cbz	r0, d99b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d99ae:	4631      	mov	r1, r6
   d99b0:	f7ff ffdc 	bl	d996c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d99b4:	7c33      	ldrb	r3, [r6, #16]
   d99b6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d99b8:	6025      	str	r5, [r4, #0]
	}
   d99ba:	e7f0      	b.n	d999e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d99bc:	6804      	ldr	r4, [r0, #0]
   d99be:	2c00      	cmp	r4, #0
   d99c0:	d0ed      	beq.n	d999e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d99c2:	4620      	mov	r0, r4
   d99c4:	f7fb f9a0 	bl	d4d08 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d99c8:	2114      	movs	r1, #20
   d99ca:	4620      	mov	r0, r4
   d99cc:	f002 f93e 	bl	dbc4c <_ZdlPvj>
   d99d0:	e7e5      	b.n	d999e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d99d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d99d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d99d6:	b089      	sub	sp, #36	; 0x24
   d99d8:	4604      	mov	r4, r0
   d99da:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d99dc:	a801      	add	r0, sp, #4
   d99de:	4611      	mov	r1, r2
   d99e0:	f7ff fe22 	bl	d9628 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d99e4:	b1a4      	cbz	r4, d9a10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d99e6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d99e8:	b11d      	cbz	r5, d99f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d99ea:	4628      	mov	r0, r5
   d99ec:	f002 fe0a 	bl	dc604 <strdup>
   d99f0:	4605      	mov	r5, r0
   d99f2:	a801      	add	r0, sp, #4
   d99f4:	a903      	add	r1, sp, #12
        type_(type) {
   d99f6:	9503      	str	r5, [sp, #12]
   d99f8:	f8ad 4010 	strh.w	r4, [sp, #16]
   d99fc:	f7ff fe78 	bl	d96f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d9a00:	a803      	add	r0, sp, #12
   d9a02:	f7ff fda6 	bl	d9552 <_ZN8particle5ErrorD1Ev>
   d9a06:	a802      	add	r0, sp, #8
   d9a08:	f7fa fbf0 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9a0c:	b009      	add	sp, #36	; 0x24
   d9a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d9a10:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d9a12:	2301      	movs	r3, #1
   d9a14:	e8d5 2f4f 	ldrexb	r2, [r5]
   d9a18:	2a00      	cmp	r2, #0
   d9a1a:	d103      	bne.n	d9a24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d9a1c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d9a20:	2900      	cmp	r1, #0
   d9a22:	d1f7      	bne.n	d9a14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d9a24:	d1ef      	bne.n	d9a06 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d9a26:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d9a28:	f3bf 8f5b 	dmb	ish
   d9a2c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d9a2e:	1d2b      	adds	r3, r5, #4
   d9a30:	f3bf 8f5b 	dmb	ish
   d9a34:	e853 6f00 	ldrex	r6, [r3]
   d9a38:	e843 4200 	strex	r2, r4, [r3]
   d9a3c:	2a00      	cmp	r2, #0
   d9a3e:	d1f9      	bne.n	d9a34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d9a40:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d9a44:	2e00      	cmp	r6, #0
   d9a46:	d0de      	beq.n	d9a06 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d9a48:	4620      	mov	r0, r4
   d9a4a:	f7ff fba1 	bl	d9190 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d9a4e:	4607      	mov	r7, r0
   d9a50:	b160      	cbz	r0, d9a6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d9a52:	f105 010c 	add.w	r1, r5, #12
   d9a56:	4630      	mov	r0, r6
   d9a58:	f7ff fe15 	bl	d9686 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d9a5c:	4630      	mov	r0, r6
   d9a5e:	f7fb f953 	bl	d4d08 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d9a62:	2110      	movs	r1, #16
   d9a64:	4630      	mov	r0, r6
   d9a66:	f002 f8f1 	bl	dbc4c <_ZdlPvj>
   d9a6a:	e7cc      	b.n	d9a06 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d9a6c:	4631      	mov	r1, r6
   d9a6e:	a803      	add	r0, sp, #12
   d9a70:	f7ff ff7c 	bl	d996c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d9a74:	7b2b      	ldrb	r3, [r5, #12]
   d9a76:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d9a7a:	2010      	movs	r0, #16
   d9a7c:	f7fa fb0b 	bl	d4096 <_Znwj>
   d9a80:	4605      	mov	r5, r0
   d9a82:	b1d0      	cbz	r0, d9aba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d9a84:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9a86:	2014      	movs	r0, #20
   d9a88:	f7fa fb05 	bl	d4096 <_Znwj>
   d9a8c:	4604      	mov	r4, r0
   d9a8e:	b178      	cbz	r0, d9ab0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d9a90:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d9a92:	4601      	mov	r1, r0
   d9a94:	a803      	add	r0, sp, #12
   d9a96:	f7fb fa36 	bl	d4f06 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9a9a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d9a9c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9a9e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9aa0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d9aa2:	9205      	str	r2, [sp, #20]
   d9aa4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9aa6:	60e3      	str	r3, [r4, #12]
   d9aa8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d9aac:	9206      	str	r2, [sp, #24]
   d9aae:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d9ab0:	4b06      	ldr	r3, [pc, #24]	; (d9acc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d9ab2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d9ab4:	4b06      	ldr	r3, [pc, #24]	; (d9ad0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9ab6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d9ab8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d9aba:	a803      	add	r0, sp, #12
   d9abc:	f7fb f924 	bl	d4d08 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d9ac0:	2200      	movs	r2, #0
   d9ac2:	4629      	mov	r1, r5
   d9ac4:	4803      	ldr	r0, [pc, #12]	; (d9ad4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d9ac6:	f7ff fb6b 	bl	d91a0 <application_thread_invoke>
   d9aca:	e7c7      	b.n	d9a5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d9acc:	000d9699 	.word	0x000d9699
   d9ad0:	000d998b 	.word	0x000d998b
   d9ad4:	000d943f 	.word	0x000d943f

000d9ad8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9ad8:	2200      	movs	r2, #0
   d9ada:	6840      	ldr	r0, [r0, #4]
   d9adc:	4611      	mov	r1, r2
   d9ade:	f7ff bc13 	b.w	d9308 <network_listening>

000d9ae2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d9ae2:	2200      	movs	r2, #0
   d9ae4:	6840      	ldr	r0, [r0, #4]
   d9ae6:	4611      	mov	r1, r2
   d9ae8:	f7ff bc1e 	b.w	d9328 <network_get_listen_timeout>

000d9aec <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d9aec:	6840      	ldr	r0, [r0, #4]
   d9aee:	2200      	movs	r2, #0
   d9af0:	f7ff bc12 	b.w	d9318 <network_set_listen_timeout>

000d9af4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d9af4:	6840      	ldr	r0, [r0, #4]
   d9af6:	2200      	movs	r2, #0
   d9af8:	f081 0101 	eor.w	r1, r1, #1
   d9afc:	f7ff bbfc 	b.w	d92f8 <network_listen>

000d9b00 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d9b00:	2300      	movs	r3, #0
   d9b02:	6840      	ldr	r0, [r0, #4]
   d9b04:	461a      	mov	r2, r3
   d9b06:	4619      	mov	r1, r3
   d9b08:	f7ff bbee 	b.w	d92e8 <network_off>

000d9b0c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d9b0c:	2300      	movs	r3, #0
   d9b0e:	6840      	ldr	r0, [r0, #4]
   d9b10:	461a      	mov	r2, r3
   d9b12:	4619      	mov	r1, r3
   d9b14:	f7ff bbe0 	b.w	d92d8 <network_on>

000d9b18 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9b18:	2200      	movs	r2, #0
   d9b1a:	6840      	ldr	r0, [r0, #4]
   d9b1c:	4611      	mov	r1, r2
   d9b1e:	f7ff bbd3 	b.w	d92c8 <network_ready>

000d9b22 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d9b22:	2200      	movs	r2, #0
   d9b24:	6840      	ldr	r0, [r0, #4]
   d9b26:	4611      	mov	r1, r2
   d9b28:	f7ff bbbe 	b.w	d92a8 <network_connecting>

000d9b2c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9b2c:	6840      	ldr	r0, [r0, #4]
   d9b2e:	2200      	movs	r2, #0
   d9b30:	2102      	movs	r1, #2
   d9b32:	f7ff bbc1 	b.w	d92b8 <network_disconnect>

000d9b36 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d9b36:	2300      	movs	r3, #0
   d9b38:	6840      	ldr	r0, [r0, #4]
   d9b3a:	461a      	mov	r2, r3
   d9b3c:	f7ff bbac 	b.w	d9298 <network_connect>

000d9b40 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d9b40:	4b02      	ldr	r3, [pc, #8]	; (d9b4c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d9b42:	2203      	movs	r2, #3
   d9b44:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d9b46:	4a02      	ldr	r2, [pc, #8]	; (d9b50 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d9b48:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d9b4a:	4770      	bx	lr
   d9b4c:	2003e588 	.word	0x2003e588
   d9b50:	000dd498 	.word	0x000dd498

000d9b54 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d9b54:	4770      	bx	lr

000d9b56 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d9b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9b58:	4606      	mov	r6, r0
   d9b5a:	4615      	mov	r5, r2
   d9b5c:	460c      	mov	r4, r1
   d9b5e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9b60:	42bc      	cmp	r4, r7
   d9b62:	d006      	beq.n	d9b72 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9b64:	6833      	ldr	r3, [r6, #0]
   d9b66:	f814 1b01 	ldrb.w	r1, [r4], #1
   d9b6a:	689b      	ldr	r3, [r3, #8]
   d9b6c:	4630      	mov	r0, r6
   d9b6e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d9b70:	e7f6      	b.n	d9b60 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d9b72:	4628      	mov	r0, r5
   d9b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9b76 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d9b76:	7c00      	ldrb	r0, [r0, #16]
   d9b78:	2200      	movs	r2, #0
   d9b7a:	f7ff b92f 	b.w	d8ddc <hal_i2c_write>

000d9b7e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d9b7e:	7c00      	ldrb	r0, [r0, #16]
   d9b80:	2100      	movs	r1, #0
   d9b82:	f7ff b933 	b.w	d8dec <hal_i2c_available>

000d9b86 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d9b86:	7c00      	ldrb	r0, [r0, #16]
   d9b88:	2100      	movs	r1, #0
   d9b8a:	f7ff b937 	b.w	d8dfc <hal_i2c_read>

000d9b8e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d9b8e:	7c00      	ldrb	r0, [r0, #16]
   d9b90:	2100      	movs	r1, #0
   d9b92:	f7ff b93b 	b.w	d8e0c <hal_i2c_peek>

000d9b96 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d9b96:	7c00      	ldrb	r0, [r0, #16]
   d9b98:	2100      	movs	r1, #0
   d9b9a:	f7ff b93f 	b.w	d8e1c <hal_i2c_flush>

000d9b9e <_ZN7TwoWireD0Ev>:
   d9b9e:	b510      	push	{r4, lr}
   d9ba0:	2114      	movs	r1, #20
   d9ba2:	4604      	mov	r4, r0
   d9ba4:	f002 f852 	bl	dbc4c <_ZdlPvj>
   d9ba8:	4620      	mov	r0, r4
   d9baa:	bd10      	pop	{r4, pc}

000d9bac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d9bac:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d9bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9bb2:	4604      	mov	r4, r0
   d9bb4:	4608      	mov	r0, r1
   d9bb6:	2100      	movs	r1, #0
   d9bb8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9bbc:	4b03      	ldr	r3, [pc, #12]	; (d9bcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d9bbe:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d9bc0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d9bc2:	4611      	mov	r1, r2
   d9bc4:	f7ff f93a 	bl	d8e3c <hal_i2c_init>
}
   d9bc8:	4620      	mov	r0, r4
   d9bca:	bd10      	pop	{r4, pc}
   d9bcc:	000dd4d4 	.word	0x000dd4d4

000d9bd0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d9bd0:	4700      	bx	r0
	...

000d9bd4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d9bd4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d9bd8:	2400      	movs	r4, #0
{
   d9bda:	461d      	mov	r5, r3
   d9bdc:	460f      	mov	r7, r1
   d9bde:	4690      	mov	r8, r2
   d9be0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d9be2:	f7ff f8f3 	bl	d8dcc <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d9be6:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9be8:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d9bec:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9bf0:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d9bf4:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d9bf8:	bfa2      	ittt	ge
   d9bfa:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d9bfe:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d9c02:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9c04:	4907      	ldr	r1, [pc, #28]	; (d9c24 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d9c06:	9400      	str	r4, [sp, #0]
   d9c08:	4643      	mov	r3, r8
   d9c0a:	463a      	mov	r2, r7
   d9c0c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d9c0e:	bfa8      	it	ge
   d9c10:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9c14:	f7ff f8d2 	bl	d8dbc <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d9c18:	fab0 f080 	clz	r0, r0
   d9c1c:	0940      	lsrs	r0, r0, #5
   d9c1e:	b004      	add	sp, #16
   d9c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9c24:	000d9bd1 	.word	0x000d9bd1

000d9c28 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9c28:	4770      	bx	lr

000d9c2a <_ZN9IPAddressD0Ev>:
   d9c2a:	b510      	push	{r4, lr}
   d9c2c:	2118      	movs	r1, #24
   d9c2e:	4604      	mov	r4, r0
   d9c30:	f002 f80c 	bl	dbc4c <_ZdlPvj>
   d9c34:	4620      	mov	r0, r4
   d9c36:	bd10      	pop	{r4, pc}

000d9c38 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9c38:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9c3a:	7d03      	ldrb	r3, [r0, #20]
   d9c3c:	2b06      	cmp	r3, #6
{
   d9c3e:	b08d      	sub	sp, #52	; 0x34
   d9c40:	460e      	mov	r6, r1
   d9c42:	f100 0704 	add.w	r7, r0, #4
   d9c46:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d9c4a:	d012      	beq.n	d9c72 <_ZNK9IPAddress7printToER5Print+0x3a>
   d9c4c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d9c50:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9c54:	220a      	movs	r2, #10
   d9c56:	4630      	mov	r0, r6
   d9c58:	f001 faa3 	bl	db1a2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9c5c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9c5e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d9c60:	d019      	beq.n	d9c96 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d9c62:	2c00      	cmp	r4, #0
   d9c64:	d0f4      	beq.n	d9c50 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d9c66:	212e      	movs	r1, #46	; 0x2e
   d9c68:	4630      	mov	r0, r6
   d9c6a:	f001 fa8b 	bl	db184 <_ZN5Print5printEc>
   d9c6e:	4404      	add	r4, r0
   d9c70:	e7ee      	b.n	d9c50 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9c72:	232f      	movs	r3, #47	; 0x2f
   d9c74:	466a      	mov	r2, sp
   d9c76:	4639      	mov	r1, r7
   d9c78:	200a      	movs	r0, #10
		buf[0] = 0;
   d9c7a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9c7e:	f7ff f8e5 	bl	d8e4c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d9c82:	4668      	mov	r0, sp
   d9c84:	f002 fcdb 	bl	dc63e <strlen>
   d9c88:	6833      	ldr	r3, [r6, #0]
   d9c8a:	4602      	mov	r2, r0
   d9c8c:	68db      	ldr	r3, [r3, #12]
   d9c8e:	4669      	mov	r1, sp
   d9c90:	4630      	mov	r0, r6
   d9c92:	4798      	blx	r3
   d9c94:	4604      	mov	r4, r0
    }
    return n;
}
   d9c96:	4620      	mov	r0, r4
   d9c98:	b00d      	add	sp, #52	; 0x34
   d9c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9c9c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d9c9c:	b510      	push	{r4, lr}
   d9c9e:	4b05      	ldr	r3, [pc, #20]	; (d9cb4 <_ZN9IPAddressC1Ev+0x18>)
   d9ca0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9ca2:	2211      	movs	r2, #17
   d9ca4:	f840 3b04 	str.w	r3, [r0], #4
   d9ca8:	2100      	movs	r1, #0
   d9caa:	f002 fc21 	bl	dc4f0 <memset>
}
   d9cae:	4620      	mov	r0, r4
   d9cb0:	bd10      	pop	{r4, pc}
   d9cb2:	bf00      	nop
   d9cb4:	000dd4fc 	.word	0x000dd4fc

000d9cb8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d9cb8:	4603      	mov	r3, r0
   d9cba:	4a07      	ldr	r2, [pc, #28]	; (d9cd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9cbc:	b510      	push	{r4, lr}
   d9cbe:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d9cc2:	f101 0210 	add.w	r2, r1, #16
   d9cc6:	f851 4b04 	ldr.w	r4, [r1], #4
   d9cca:	f843 4b04 	str.w	r4, [r3], #4
   d9cce:	4291      	cmp	r1, r2
   d9cd0:	d1f9      	bne.n	d9cc6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d9cd2:	780a      	ldrb	r2, [r1, #0]
   d9cd4:	701a      	strb	r2, [r3, #0]
}
   d9cd6:	bd10      	pop	{r4, pc}
   d9cd8:	000dd4fc 	.word	0x000dd4fc

000d9cdc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d9cdc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9cde:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d9ce2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9ce6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9cea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d9cee:	2304      	movs	r3, #4
   d9cf0:	6041      	str	r1, [r0, #4]
   d9cf2:	7503      	strb	r3, [r0, #20]
}
   d9cf4:	bd10      	pop	{r4, pc}

000d9cf6 <_ZN9IPAddressaSEPKh>:
{
   d9cf6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9cf8:	78cb      	ldrb	r3, [r1, #3]
   d9cfa:	9300      	str	r3, [sp, #0]
   d9cfc:	788b      	ldrb	r3, [r1, #2]
   d9cfe:	784a      	ldrb	r2, [r1, #1]
   d9d00:	7809      	ldrb	r1, [r1, #0]
   d9d02:	f7ff ffeb 	bl	d9cdc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d9d06:	b002      	add	sp, #8
   d9d08:	bd10      	pop	{r4, pc}

000d9d0a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d9d0a:	f100 0310 	add.w	r3, r0, #16
   d9d0e:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d9d10:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d9d14:	2901      	cmp	r1, #1
   d9d16:	4618      	mov	r0, r3
   d9d18:	d108      	bne.n	d9d2c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d9d1a:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d9d1e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d9d22:	3a01      	subs	r2, #1
   d9d24:	f103 0310 	add.w	r3, r3, #16
   d9d28:	d1f2      	bne.n	d9d10 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d9d2a:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d9d2c:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d9d2e:	bf04      	itt	eq
   d9d30:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d9d34:	1852      	addeq	r2, r2, r1
   d9d36:	e7f4      	b.n	d9d22 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d9d38 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d9d38:	b40e      	push	{r1, r2, r3}
   d9d3a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9d3c:	b088      	sub	sp, #32
   d9d3e:	af00      	add	r7, sp, #0
   d9d40:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9d44:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d9d46:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9d4a:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d9d4c:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9d4e:	462b      	mov	r3, r5
   d9d50:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d9d52:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9d54:	f7ff fb30 	bl	d93b8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d9d58:	280f      	cmp	r0, #15
   d9d5a:	687a      	ldr	r2, [r7, #4]
   d9d5c:	d91a      	bls.n	d9d94 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d9d5e:	f100 0308 	add.w	r3, r0, #8
   d9d62:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d9d66:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d9d68:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9d6c:	1c41      	adds	r1, r0, #1
   d9d6e:	462b      	mov	r3, r5
   d9d70:	4668      	mov	r0, sp
        va_start(args, fmt);
   d9d72:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9d74:	f7ff fb20 	bl	d93b8 <vsnprintf>
        if (n > 0) {
   d9d78:	1e02      	subs	r2, r0, #0
   d9d7a:	dd04      	ble.n	d9d86 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d9d7c:	6823      	ldr	r3, [r4, #0]
   d9d7e:	4669      	mov	r1, sp
   d9d80:	689b      	ldr	r3, [r3, #8]
   d9d82:	4620      	mov	r0, r4
   d9d84:	4798      	blx	r3
   d9d86:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d9d88:	3720      	adds	r7, #32
   d9d8a:	46bd      	mov	sp, r7
   d9d8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d9d90:	b003      	add	sp, #12
   d9d92:	4770      	bx	lr
    } else if (n > 0) {
   d9d94:	2800      	cmp	r0, #0
   d9d96:	d0f7      	beq.n	d9d88 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d9d98:	6823      	ldr	r3, [r4, #0]
   d9d9a:	4602      	mov	r2, r0
   d9d9c:	689b      	ldr	r3, [r3, #8]
   d9d9e:	f107 0110 	add.w	r1, r7, #16
   d9da2:	4620      	mov	r0, r4
   d9da4:	4798      	blx	r3
}
   d9da6:	e7ef      	b.n	d9d88 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d9da8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9da8:	b510      	push	{r4, lr}
          _M_dispose();
   d9daa:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9dac:	4604      	mov	r4, r0
          _M_dispose();
   d9dae:	689b      	ldr	r3, [r3, #8]
   d9db0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d9db2:	68a3      	ldr	r3, [r4, #8]
   d9db4:	3b01      	subs	r3, #1
   d9db6:	60a3      	str	r3, [r4, #8]
   d9db8:	b92b      	cbnz	r3, d9dc6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d9dba:	6823      	ldr	r3, [r4, #0]
   d9dbc:	4620      	mov	r0, r4
   d9dbe:	68db      	ldr	r3, [r3, #12]
    }
   d9dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d9dc4:	4718      	bx	r3
    }
   d9dc6:	bd10      	pop	{r4, pc}

000d9dc8 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d9dc8:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d9dca:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d9dcc:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d9dd0:	689b      	ldr	r3, [r3, #8]
   d9dd2:	2201      	movs	r2, #1
   d9dd4:	f10d 0107 	add.w	r1, sp, #7
   d9dd8:	4798      	blx	r3
}
   d9dda:	b003      	add	sp, #12
   d9ddc:	f85d fb04 	ldr.w	pc, [sp], #4

000d9de0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d9de0:	b538      	push	{r3, r4, r5, lr}
   d9de2:	680b      	ldr	r3, [r1, #0]
   d9de4:	6003      	str	r3, [r0, #0]
   d9de6:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d9de8:	6843      	ldr	r3, [r0, #4]
   d9dea:	429d      	cmp	r5, r3
    class __shared_ptr
   d9dec:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d9dee:	d00c      	beq.n	d9e0a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d9df0:	b115      	cbz	r5, d9df8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d9df2:	686b      	ldr	r3, [r5, #4]
   d9df4:	3301      	adds	r3, #1
   d9df6:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d9df8:	6860      	ldr	r0, [r4, #4]
   d9dfa:	b128      	cbz	r0, d9e08 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d9dfc:	6843      	ldr	r3, [r0, #4]
   d9dfe:	3b01      	subs	r3, #1
   d9e00:	6043      	str	r3, [r0, #4]
   d9e02:	b90b      	cbnz	r3, d9e08 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d9e04:	f7ff ffd0 	bl	d9da8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d9e08:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d9e0a:	4620      	mov	r0, r4
   d9e0c:	bd38      	pop	{r3, r4, r5, pc}

000d9e0e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9e0e:	460b      	mov	r3, r1
   d9e10:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d9e12:	2200      	movs	r2, #0
   d9e14:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d9e16:	e9c0 2200 	strd	r2, r2, [r0]
   d9e1a:	4604      	mov	r4, r0
        t_ = t;
   d9e1c:	6083      	str	r3, [r0, #8]
    if (t) {
   d9e1e:	b90b      	cbnz	r3, d9e24 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d9e20:	4620      	mov	r0, r4
   d9e22:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   d9e24:	f7ff ffdc 	bl	d9de0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d9e28:	e7fa      	b.n	d9e20 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d9e2a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d9e2a:	6883      	ldr	r3, [r0, #8]
   d9e2c:	b1eb      	cbz	r3, d9e6a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d9e2e:	781a      	ldrb	r2, [r3, #0]
   d9e30:	2a03      	cmp	r2, #3
   d9e32:	d81a      	bhi.n	d9e6a <_ZNK5spark9JSONValue4typeEv+0x40>
   d9e34:	e8df f002 	tbb	[pc, r2]
   d9e38:	1b021704 	.word	0x1b021704
   d9e3c:	2005      	movs	r0, #5
   d9e3e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d9e40:	6802      	ldr	r2, [r0, #0]
   d9e42:	685b      	ldr	r3, [r3, #4]
   d9e44:	6852      	ldr	r2, [r2, #4]
   d9e46:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d9e48:	282d      	cmp	r0, #45	; 0x2d
   d9e4a:	d012      	beq.n	d9e72 <_ZNK5spark9JSONValue4typeEv+0x48>
   d9e4c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9e50:	2b09      	cmp	r3, #9
   d9e52:	d90e      	bls.n	d9e72 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d9e54:	2874      	cmp	r0, #116	; 0x74
   d9e56:	d00e      	beq.n	d9e76 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d9e58:	2866      	cmp	r0, #102	; 0x66
   d9e5a:	d00c      	beq.n	d9e76 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d9e5c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d9e60:	4258      	negs	r0, r3
   d9e62:	4158      	adcs	r0, r3
   d9e64:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d9e66:	2006      	movs	r0, #6
   d9e68:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d9e6a:	2000      	movs	r0, #0
   d9e6c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d9e6e:	2004      	movs	r0, #4
   d9e70:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d9e72:	2003      	movs	r0, #3
   d9e74:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d9e76:	2002      	movs	r0, #2
}
   d9e78:	4770      	bx	lr

000d9e7a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d9e7a:	b510      	push	{r4, lr}
   d9e7c:	4604      	mov	r4, r0
    switch (type()) {
   d9e7e:	f7ff ffd4 	bl	d9e2a <_ZNK5spark9JSONValue4typeEv>
   d9e82:	2802      	cmp	r0, #2
   d9e84:	d00e      	beq.n	d9ea4 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d9e86:	1ec3      	subs	r3, r0, #3
   d9e88:	b2db      	uxtb	r3, r3
   d9e8a:	2b01      	cmp	r3, #1
   d9e8c:	d814      	bhi.n	d9eb8 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d9e8e:	6822      	ldr	r2, [r4, #0]
   d9e90:	68a3      	ldr	r3, [r4, #8]
   d9e92:	6850      	ldr	r0, [r2, #4]
   d9e94:	685b      	ldr	r3, [r3, #4]
}
   d9e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d9e9a:	220a      	movs	r2, #10
   d9e9c:	2100      	movs	r1, #0
   d9e9e:	4418      	add	r0, r3
   d9ea0:	f002 bcb4 	b.w	dc80c <strtol>
        const char* const s = d_->json + t_->start;
   d9ea4:	6822      	ldr	r2, [r4, #0]
   d9ea6:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d9ea8:	6852      	ldr	r2, [r2, #4]
   d9eaa:	685b      	ldr	r3, [r3, #4]
   d9eac:	5cd0      	ldrb	r0, [r2, r3]
   d9eae:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d9eb2:	4258      	negs	r0, r3
   d9eb4:	4158      	adcs	r0, r3
}
   d9eb6:	bd10      	pop	{r4, pc}
    switch (type()) {
   d9eb8:	2000      	movs	r0, #0
   d9eba:	e7fc      	b.n	d9eb6 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d9ebc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9ebc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d9ebe:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d9ec0:	e9c0 3300 	strd	r3, r3, [r0]
   d9ec4:	4604      	mov	r4, r0
        n_(0) {
   d9ec6:	480e      	ldr	r0, [pc, #56]	; (d9f00 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d9ec8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d9ecc:	b1a9      	cbz	r1, d9efa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d9ece:	780b      	ldrb	r3, [r1, #0]
   d9ed0:	2b03      	cmp	r3, #3
   d9ed2:	d006      	beq.n	d9ee2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d9ed4:	b98b      	cbnz	r3, d9efa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d9ed6:	6813      	ldr	r3, [r2, #0]
   d9ed8:	6858      	ldr	r0, [r3, #4]
   d9eda:	684b      	ldr	r3, [r1, #4]
   d9edc:	5cc3      	ldrb	r3, [r0, r3]
   d9ede:	2b6e      	cmp	r3, #110	; 0x6e
   d9ee0:	d007      	beq.n	d9ef2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d9ee2:	6813      	ldr	r3, [r2, #0]
   d9ee4:	684d      	ldr	r5, [r1, #4]
   d9ee6:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d9ee8:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d9eea:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d9eec:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d9eee:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d9ef0:	60e3      	str	r3, [r4, #12]
   d9ef2:	4611      	mov	r1, r2
   d9ef4:	4620      	mov	r0, r4
   d9ef6:	f7ff ff73 	bl	d9de0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d9efa:	4620      	mov	r0, r4
   d9efc:	bd38      	pop	{r3, r4, r5, pc}
   d9efe:	bf00      	nop
   d9f00:	000dd568 	.word	0x000dd568

000d9f04 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9f04:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d9f06:	2500      	movs	r5, #0
   d9f08:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d9f0a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d9f0e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d9f12:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d9f16:	4604      	mov	r4, r0
   d9f18:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d9f1a:	b14b      	cbz	r3, d9f30 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d9f1c:	781a      	ldrb	r2, [r3, #0]
   d9f1e:	2a01      	cmp	r2, #1
   d9f20:	d106      	bne.n	d9f30 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d9f22:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d9f26:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d9f28:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d9f2a:	6143      	str	r3, [r0, #20]
   d9f2c:	f7ff ff58 	bl	d9de0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d9f30:	4620      	mov	r0, r4
   d9f32:	bd38      	pop	{r3, r4, r5, pc}

000d9f34 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d9f34:	b510      	push	{r4, lr}
    if (!n_) {
   d9f36:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d9f38:	4604      	mov	r4, r0
    if (!n_) {
   d9f3a:	b163      	cbz	r3, d9f56 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d9f3c:	6880      	ldr	r0, [r0, #8]
   d9f3e:	60e0      	str	r0, [r4, #12]
    --n_;
   d9f40:	3b01      	subs	r3, #1
    ++t_;
   d9f42:	3010      	adds	r0, #16
   d9f44:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d9f46:	6120      	str	r0, [r4, #16]
    --n_;
   d9f48:	6163      	str	r3, [r4, #20]
    if (n_) {
   d9f4a:	b113      	cbz	r3, d9f52 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d9f4c:	f7ff fedd 	bl	d9d0a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d9f50:	60a0      	str	r0, [r4, #8]
    return true;
   d9f52:	2001      	movs	r0, #1
   d9f54:	e000      	b.n	d9f58 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d9f56:	4618      	mov	r0, r3
}
   d9f58:	bd10      	pop	{r4, pc}

000d9f5a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d9f5a:	b510      	push	{r4, lr}
    write('}');
   d9f5c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d9f5e:	4604      	mov	r4, r0
    write('}');
   d9f60:	f7ff ff32 	bl	d9dc8 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d9f64:	2301      	movs	r3, #1
   d9f66:	7123      	strb	r3, [r4, #4]
}
   d9f68:	4620      	mov	r0, r4
   d9f6a:	bd10      	pop	{r4, pc}

000d9f6c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d9f6c:	b508      	push	{r3, lr}
    switch (state_) {
   d9f6e:	7903      	ldrb	r3, [r0, #4]
   d9f70:	2b01      	cmp	r3, #1
   d9f72:	d002      	beq.n	d9f7a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d9f74:	2b02      	cmp	r3, #2
   d9f76:	d004      	beq.n	d9f82 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d9f78:	bd08      	pop	{r3, pc}
        write(',');
   d9f7a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d9f7c:	f7ff ff24 	bl	d9dc8 <_ZN5spark10JSONWriter5writeEc>
}
   d9f80:	e7fa      	b.n	d9f78 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d9f82:	213a      	movs	r1, #58	; 0x3a
   d9f84:	e7fa      	b.n	d9f7c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d9f86 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d9f86:	b510      	push	{r4, lr}
   d9f88:	4604      	mov	r4, r0
    writeSeparator();
   d9f8a:	f7ff ffef 	bl	d9f6c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d9f8e:	4620      	mov	r0, r4
   d9f90:	217b      	movs	r1, #123	; 0x7b
   d9f92:	f7ff ff19 	bl	d9dc8 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d9f96:	2300      	movs	r3, #0
   d9f98:	7123      	strb	r3, [r4, #4]
}
   d9f9a:	4620      	mov	r0, r4
   d9f9c:	bd10      	pop	{r4, pc}
	...

000d9fa0 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d9fa0:	b513      	push	{r0, r1, r4, lr}
   d9fa2:	4604      	mov	r4, r0
   d9fa4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d9fa6:	f7ff ffe1 	bl	d9f6c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d9faa:	6823      	ldr	r3, [r4, #0]
   d9fac:	9a01      	ldr	r2, [sp, #4]
   d9fae:	68db      	ldr	r3, [r3, #12]
   d9fb0:	4903      	ldr	r1, [pc, #12]	; (d9fc0 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d9fb2:	4620      	mov	r0, r4
   d9fb4:	4798      	blx	r3
    state_ = NEXT;
   d9fb6:	2301      	movs	r3, #1
}
   d9fb8:	4620      	mov	r0, r4
    state_ = NEXT;
   d9fba:	7123      	strb	r3, [r4, #4]
}
   d9fbc:	b002      	add	sp, #8
   d9fbe:	bd10      	pop	{r4, pc}
   d9fc0:	000dcbe0 	.word	0x000dcbe0

000d9fc4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d9fc4:	b513      	push	{r0, r1, r4, lr}
   d9fc6:	4604      	mov	r4, r0
   d9fc8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d9fca:	f7ff ffcf 	bl	d9f6c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d9fce:	6823      	ldr	r3, [r4, #0]
   d9fd0:	9a01      	ldr	r2, [sp, #4]
   d9fd2:	68db      	ldr	r3, [r3, #12]
   d9fd4:	4903      	ldr	r1, [pc, #12]	; (d9fe4 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d9fd6:	4620      	mov	r0, r4
   d9fd8:	4798      	blx	r3
    state_ = NEXT;
   d9fda:	2301      	movs	r3, #1
}
   d9fdc:	4620      	mov	r0, r4
    state_ = NEXT;
   d9fde:	7123      	strb	r3, [r4, #4]
}
   d9fe0:	b002      	add	sp, #8
   d9fe2:	bd10      	pop	{r4, pc}
   d9fe4:	000dcc22 	.word	0x000dcc22

000d9fe8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d9fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9fec:	460d      	mov	r5, r1
   d9fee:	4617      	mov	r7, r2
    write('"');
   d9ff0:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d9ff2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; da094 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d9ff6:	4604      	mov	r4, r0
    const char* const end = str + size;
   d9ff8:	442f      	add	r7, r5
    write('"');
   d9ffa:	f7ff fee5 	bl	d9dc8 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d9ffe:	4629      	mov	r1, r5
    while (s != end) {
   da000:	42bd      	cmp	r5, r7
   da002:	462a      	mov	r2, r5
   da004:	d038      	beq.n	da078 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   da006:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   da00a:	2e22      	cmp	r6, #34	; 0x22
   da00c:	d003      	beq.n	da016 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   da00e:	2e5c      	cmp	r6, #92	; 0x5c
   da010:	d001      	beq.n	da016 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   da012:	2e1f      	cmp	r6, #31
   da014:	d8f4      	bhi.n	da000 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   da016:	6823      	ldr	r3, [r4, #0]
   da018:	1a52      	subs	r2, r2, r1
   da01a:	689b      	ldr	r3, [r3, #8]
   da01c:	4620      	mov	r0, r4
   da01e:	4798      	blx	r3
            write('\\');
   da020:	215c      	movs	r1, #92	; 0x5c
   da022:	4620      	mov	r0, r4
   da024:	f7ff fed0 	bl	d9dc8 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   da028:	2e0d      	cmp	r6, #13
   da02a:	d80a      	bhi.n	da042 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   da02c:	2e07      	cmp	r6, #7
   da02e:	d91c      	bls.n	da06a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   da030:	f1a6 0308 	sub.w	r3, r6, #8
   da034:	2b05      	cmp	r3, #5
   da036:	d818      	bhi.n	da06a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   da038:	e8df f003 	tbb	[pc, r3]
   da03c:	17110f0d 	.word	0x17110f0d
   da040:	1513      	.short	0x1513
   da042:	2e22      	cmp	r6, #34	; 0x22
   da044:	d001      	beq.n	da04a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   da046:	2e5c      	cmp	r6, #92	; 0x5c
   da048:	d10f      	bne.n	da06a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   da04a:	4631      	mov	r1, r6
                write('b');
   da04c:	4620      	mov	r0, r4
   da04e:	f7ff febb 	bl	d9dc8 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   da052:	4629      	mov	r1, r5
    while (s != end) {
   da054:	e7d4      	b.n	da000 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   da056:	2162      	movs	r1, #98	; 0x62
   da058:	e7f8      	b.n	da04c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   da05a:	2174      	movs	r1, #116	; 0x74
   da05c:	e7f6      	b.n	da04c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   da05e:	216e      	movs	r1, #110	; 0x6e
   da060:	e7f4      	b.n	da04c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   da062:	2166      	movs	r1, #102	; 0x66
   da064:	e7f2      	b.n	da04c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   da066:	2172      	movs	r1, #114	; 0x72
   da068:	e7f0      	b.n	da04c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   da06a:	6823      	ldr	r3, [r4, #0]
   da06c:	4632      	mov	r2, r6
   da06e:	68db      	ldr	r3, [r3, #12]
   da070:	4641      	mov	r1, r8
   da072:	4620      	mov	r0, r4
   da074:	4798      	blx	r3
                break;
   da076:	e7ec      	b.n	da052 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   da078:	428d      	cmp	r5, r1
   da07a:	d004      	beq.n	da086 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   da07c:	6823      	ldr	r3, [r4, #0]
   da07e:	1a6a      	subs	r2, r5, r1
   da080:	689b      	ldr	r3, [r3, #8]
   da082:	4620      	mov	r0, r4
   da084:	4798      	blx	r3
    }
    write('"');
   da086:	2122      	movs	r1, #34	; 0x22
   da088:	4620      	mov	r0, r4
   da08a:	f7ff fe9d 	bl	d9dc8 <_ZN5spark10JSONWriter5writeEc>
}
   da08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da092:	bf00      	nop
   da094:	000dd508 	.word	0x000dd508

000da098 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   da098:	b513      	push	{r0, r1, r4, lr}
   da09a:	4604      	mov	r4, r0
   da09c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   da0a0:	f7ff ff64 	bl	d9f6c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   da0a4:	4620      	mov	r0, r4
   da0a6:	e9dd 2100 	ldrd	r2, r1, [sp]
   da0aa:	f7ff ff9d 	bl	d9fe8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   da0ae:	2302      	movs	r3, #2
}
   da0b0:	4620      	mov	r0, r4
    state_ = VALUE;
   da0b2:	7123      	strb	r3, [r4, #4]
}
   da0b4:	b002      	add	sp, #8
   da0b6:	bd10      	pop	{r4, pc}

000da0b8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   da0b8:	b513      	push	{r0, r1, r4, lr}
   da0ba:	4604      	mov	r4, r0
   da0bc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   da0c0:	f7ff ff54 	bl	d9f6c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   da0c4:	4620      	mov	r0, r4
   da0c6:	e9dd 2100 	ldrd	r2, r1, [sp]
   da0ca:	f7ff ff8d 	bl	d9fe8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   da0ce:	2301      	movs	r3, #1
}
   da0d0:	4620      	mov	r0, r4
    state_ = NEXT;
   da0d2:	7123      	strb	r3, [r4, #4]
}
   da0d4:	b002      	add	sp, #8
   da0d6:	bd10      	pop	{r4, pc}

000da0d8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   da0d8:	6880      	ldr	r0, [r0, #8]
   da0da:	6803      	ldr	r3, [r0, #0]
   da0dc:	68db      	ldr	r3, [r3, #12]
   da0de:	4718      	bx	r3

000da0e0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   da0e0:	4770      	bx	lr

000da0e2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   da0e2:	4608      	mov	r0, r1
   da0e4:	b111      	cbz	r1, da0ec <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   da0e6:	680b      	ldr	r3, [r1, #0]
   da0e8:	685b      	ldr	r3, [r3, #4]
   da0ea:	4718      	bx	r3
}
   da0ec:	4770      	bx	lr

000da0ee <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   da0ee:	4770      	bx	lr

000da0f0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   da0f0:	4770      	bx	lr

000da0f2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   da0f2:	4770      	bx	lr

000da0f4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   da0f4:	4770      	bx	lr

000da0f6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   da0f6:	b538      	push	{r3, r4, r5, lr}
   da0f8:	4604      	mov	r4, r0
   da0fa:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   da0fc:	6800      	ldr	r0, [r0, #0]
   da0fe:	212e      	movs	r1, #46	; 0x2e
   da100:	f002 fa63 	bl	dc5ca <strchrnul>
    size = s - category;
   da104:	6823      	ldr	r3, [r4, #0]
   da106:	1ac3      	subs	r3, r0, r3
   da108:	602b      	str	r3, [r5, #0]
    if (size) {
   da10a:	b123      	cbz	r3, da116 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   da10c:	7803      	ldrb	r3, [r0, #0]
   da10e:	b103      	cbz	r3, da112 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   da110:	3001      	adds	r0, #1
   da112:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   da114:	6020      	str	r0, [r4, #0]
}
   da116:	4618      	mov	r0, r3
   da118:	bd38      	pop	{r3, r4, r5, pc}

000da11a <_ZN5spark16JSONStreamWriterD0Ev>:
   da11a:	b510      	push	{r4, lr}
   da11c:	210c      	movs	r1, #12
   da11e:	4604      	mov	r4, r0
   da120:	f001 fd94 	bl	dbc4c <_ZdlPvj>
   da124:	4620      	mov	r0, r4
   da126:	bd10      	pop	{r4, pc}

000da128 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   da128:	b510      	push	{r4, lr}
   da12a:	2104      	movs	r1, #4
   da12c:	4604      	mov	r4, r0
   da12e:	f001 fd8d 	bl	dbc4c <_ZdlPvj>
   da132:	4620      	mov	r0, r4
   da134:	bd10      	pop	{r4, pc}

000da136 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   da136:	b510      	push	{r4, lr}
   da138:	2104      	movs	r1, #4
   da13a:	4604      	mov	r4, r0
   da13c:	f001 fd86 	bl	dbc4c <_ZdlPvj>
   da140:	4620      	mov	r0, r4
   da142:	bd10      	pop	{r4, pc}

000da144 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   da144:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   da146:	f002 fa4a 	bl	dc5de <strcmp>
}
   da14a:	fab0 f080 	clz	r0, r0
   da14e:	0940      	lsrs	r0, r0, #5
   da150:	bd08      	pop	{r3, pc}

000da152 <__tcf_1>:
   da152:	4770      	bx	lr

000da154 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   da154:	b510      	push	{r4, lr}
   da156:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   da158:	f001 fbfe 	bl	db958 <_Z16_fetch_usbserialv>
   da15c:	4284      	cmp	r4, r0
   da15e:	d010      	beq.n	da182 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   da160:	f001 fb72 	bl	db848 <_Z22__fetch_global_Serial1v>
   da164:	4284      	cmp	r4, r0
   da166:	d105      	bne.n	da174 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   da168:	f001 fb6e 	bl	db848 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   da16c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   da170:	f001 bb67 	b.w	db842 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   da174:	b12c      	cbz	r4, da182 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   da176:	6823      	ldr	r3, [r4, #0]
   da178:	4620      	mov	r0, r4
   da17a:	685b      	ldr	r3, [r3, #4]
}
   da17c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   da180:	4718      	bx	r3
   da182:	bd10      	pop	{r4, pc}

000da184 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   da184:	b513      	push	{r0, r1, r4, lr}
   da186:	4604      	mov	r4, r0
    return value(val, strlen(val));
   da188:	4608      	mov	r0, r1
   da18a:	9101      	str	r1, [sp, #4]
   da18c:	f002 fa57 	bl	dc63e <strlen>
   da190:	9901      	ldr	r1, [sp, #4]
   da192:	4602      	mov	r2, r0
   da194:	4620      	mov	r0, r4
}
   da196:	b002      	add	sp, #8
   da198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   da19c:	f7ff bf8c 	b.w	da0b8 <_ZN5spark10JSONWriter5valueEPKcj>

000da1a0 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   da1a0:	b513      	push	{r0, r1, r4, lr}
   da1a2:	4604      	mov	r4, r0
    write(str, strlen(str));
   da1a4:	4608      	mov	r0, r1
   da1a6:	9101      	str	r1, [sp, #4]
   da1a8:	f002 fa49 	bl	dc63e <strlen>
   da1ac:	6823      	ldr	r3, [r4, #0]
   da1ae:	9901      	ldr	r1, [sp, #4]
   da1b0:	68db      	ldr	r3, [r3, #12]
   da1b2:	4602      	mov	r2, r0
   da1b4:	4620      	mov	r0, r4
}
   da1b6:	b002      	add	sp, #8
   da1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   da1bc:	4718      	bx	r3

000da1be <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   da1be:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   da1c0:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   da1c2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   da1c6:	68db      	ldr	r3, [r3, #12]
   da1c8:	2201      	movs	r2, #1
   da1ca:	f10d 0107 	add.w	r1, sp, #7
   da1ce:	4798      	blx	r3
}
   da1d0:	b003      	add	sp, #12
   da1d2:	f85d fb04 	ldr.w	pc, [sp], #4

000da1d6 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   da1d6:	b40e      	push	{r1, r2, r3}
   da1d8:	b503      	push	{r0, r1, lr}
   da1da:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   da1dc:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   da1de:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   da1e2:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   da1e4:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   da1e6:	f000 fffa 	bl	db1de <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   da1ea:	b002      	add	sp, #8
   da1ec:	f85d eb04 	ldr.w	lr, [sp], #4
   da1f0:	b003      	add	sp, #12
   da1f2:	4770      	bx	lr

000da1f4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   da1f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   da1f8:	e9d0 9500 	ldrd	r9, r5, [r0]
   da1fc:	f04f 0814 	mov.w	r8, #20
   da200:	fb08 f505 	mul.w	r5, r8, r5
   da204:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   da206:	10ab      	asrs	r3, r5, #2
   da208:	4d18      	ldr	r5, [pc, #96]	; (da26c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   da20a:	4617      	mov	r7, r2
   da20c:	435d      	muls	r5, r3
   da20e:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   da210:	2d00      	cmp	r5, #0
   da212:	dd23      	ble.n	da25c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   da214:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   da216:	fb08 f006 	mul.w	r0, r8, r6
   da21a:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   da21e:	463a      	mov	r2, r7
   da220:	f8ba b004 	ldrh.w	fp, [sl, #4]
   da224:	5820      	ldr	r0, [r4, r0]
   da226:	9101      	str	r1, [sp, #4]
   da228:	455f      	cmp	r7, fp
   da22a:	bf28      	it	cs
   da22c:	465a      	movcs	r2, fp
   da22e:	f002 fa0e 	bl	dc64e <strncmp>
                if (cmp == 0) {
   da232:	9901      	ldr	r1, [sp, #4]
   da234:	2301      	movs	r3, #1
   da236:	b978      	cbnz	r0, da258 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   da238:	455f      	cmp	r7, fp
   da23a:	d103      	bne.n	da244 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   da23c:	9a00      	ldr	r2, [sp, #0]
   da23e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   da240:	4635      	mov	r5, r6
   da242:	e7e5      	b.n	da210 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   da244:	bf8c      	ite	hi
   da246:	2001      	movhi	r0, #1
   da248:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   da24a:	2800      	cmp	r0, #0
   da24c:	d0f8      	beq.n	da240 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   da24e:	1bae      	subs	r6, r5, r6
	      ++__first;
   da250:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   da254:	3e01      	subs	r6, #1
   da256:	e7f3      	b.n	da240 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   da258:	0fc0      	lsrs	r0, r0, #31
   da25a:	e7f6      	b.n	da24a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   da25c:	eba4 0409 	sub.w	r4, r4, r9
}
   da260:	4802      	ldr	r0, [pc, #8]	; (da26c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   da262:	10a4      	asrs	r4, r4, #2
   da264:	4360      	muls	r0, r4
   da266:	b003      	add	sp, #12
   da268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da26c:	cccccccd 	.word	0xcccccccd

000da270 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   da270:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   da272:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   da274:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   da276:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   da278:	b30b      	cbz	r3, da2be <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   da27a:	b301      	cbz	r1, da2be <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   da27c:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   da27e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   da282:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   da284:	a903      	add	r1, sp, #12
   da286:	a801      	add	r0, sp, #4
   da288:	f7ff ff35 	bl	da0f6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   da28c:	4601      	mov	r1, r0
   da28e:	b1b0      	cbz	r0, da2be <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   da290:	f10d 030b 	add.w	r3, sp, #11
   da294:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   da296:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   da29a:	4620      	mov	r0, r4
   da29c:	f7ff ffaa 	bl	da1f4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   da2a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   da2a4:	b15b      	cbz	r3, da2be <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   da2a6:	6824      	ldr	r4, [r4, #0]
   da2a8:	2314      	movs	r3, #20
   da2aa:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   da2ae:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   da2b2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   da2b6:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   da2b8:	bfa8      	it	ge
   da2ba:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   da2bc:	e7e2      	b.n	da284 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   da2be:	4630      	mov	r0, r6
   da2c0:	b004      	add	sp, #16
   da2c2:	bd70      	pop	{r4, r5, r6, pc}

000da2c4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   da2c4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   da2c6:	4c09      	ldr	r4, [pc, #36]	; (da2ec <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   da2c8:	7823      	ldrb	r3, [r4, #0]
   da2ca:	f3bf 8f5b 	dmb	ish
   da2ce:	07db      	lsls	r3, r3, #31
   da2d0:	d409      	bmi.n	da2e6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   da2d2:	4620      	mov	r0, r4
   da2d4:	f7f9 fef0 	bl	d40b8 <__cxa_guard_acquire>
   da2d8:	b128      	cbz	r0, da2e6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   da2da:	4620      	mov	r0, r4
   da2dc:	f7f9 fef1 	bl	d40c2 <__cxa_guard_release>
   da2e0:	4803      	ldr	r0, [pc, #12]	; (da2f0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   da2e2:	f002 f8d7 	bl	dc494 <atexit>
}
   da2e6:	4803      	ldr	r0, [pc, #12]	; (da2f4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   da2e8:	bd10      	pop	{r4, pc}
   da2ea:	bf00      	nop
   da2ec:	2003e594 	.word	0x2003e594
   da2f0:	000da0ef 	.word	0x000da0ef
   da2f4:	2003dda0 	.word	0x2003dda0

000da2f8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   da2f8:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   da2fa:	4c09      	ldr	r4, [pc, #36]	; (da320 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   da2fc:	7823      	ldrb	r3, [r4, #0]
   da2fe:	f3bf 8f5b 	dmb	ish
   da302:	07db      	lsls	r3, r3, #31
   da304:	d409      	bmi.n	da31a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   da306:	4620      	mov	r0, r4
   da308:	f7f9 fed6 	bl	d40b8 <__cxa_guard_acquire>
   da30c:	b128      	cbz	r0, da31a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   da30e:	4620      	mov	r0, r4
   da310:	f7f9 fed7 	bl	d40c2 <__cxa_guard_release>
   da314:	4803      	ldr	r0, [pc, #12]	; (da324 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   da316:	f002 f8bd 	bl	dc494 <atexit>
    return &factory;
}
   da31a:	4803      	ldr	r0, [pc, #12]	; (da328 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   da31c:	bd10      	pop	{r4, pc}
   da31e:	bf00      	nop
   da320:	2003e598 	.word	0x2003e598
   da324:	000da153 	.word	0x000da153
   da328:	2003dda4 	.word	0x2003dda4

000da32c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   da32c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   da32e:	2500      	movs	r5, #0
   da330:	4604      	mov	r4, r0
   da332:	e9c0 5500 	strd	r5, r5, [r0]
   da336:	e9c0 5504 	strd	r5, r5, [r0, #16]
   da33a:	6085      	str	r5, [r0, #8]
   da33c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   da33e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   da342:	f7fe fcbb 	bl	d8cbc <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   da346:	f7ff ffbd 	bl	da2c4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   da34a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   da34c:	f7ff ffd4 	bl	da2f8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   da350:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   da352:	6220      	str	r0, [r4, #32]
}
   da354:	4620      	mov	r0, r4
   da356:	bd38      	pop	{r3, r4, r5, pc}

000da358 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   da358:	b510      	push	{r4, lr}
    static LogManager mgr;
   da35a:	4c0a      	ldr	r4, [pc, #40]	; (da384 <_ZN5spark10LogManager8instanceEv+0x2c>)
   da35c:	7823      	ldrb	r3, [r4, #0]
   da35e:	f3bf 8f5b 	dmb	ish
   da362:	07db      	lsls	r3, r3, #31
   da364:	d40c      	bmi.n	da380 <_ZN5spark10LogManager8instanceEv+0x28>
   da366:	4620      	mov	r0, r4
   da368:	f7f9 fea6 	bl	d40b8 <__cxa_guard_acquire>
   da36c:	b140      	cbz	r0, da380 <_ZN5spark10LogManager8instanceEv+0x28>
   da36e:	4806      	ldr	r0, [pc, #24]	; (da388 <_ZN5spark10LogManager8instanceEv+0x30>)
   da370:	f7ff ffdc 	bl	da32c <_ZN5spark10LogManagerC1Ev>
   da374:	4620      	mov	r0, r4
   da376:	f7f9 fea4 	bl	d40c2 <__cxa_guard_release>
   da37a:	4804      	ldr	r0, [pc, #16]	; (da38c <_ZN5spark10LogManager8instanceEv+0x34>)
   da37c:	f002 f88a 	bl	dc494 <atexit>
    return &mgr;
}
   da380:	4801      	ldr	r0, [pc, #4]	; (da388 <_ZN5spark10LogManager8instanceEv+0x30>)
   da382:	bd10      	pop	{r4, pc}
   da384:	2003e590 	.word	0x2003e590
   da388:	2003e5a0 	.word	0x2003e5a0
   da38c:	000da7c1 	.word	0x000da7c1

000da390 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   da390:	4a02      	ldr	r2, [pc, #8]	; (da39c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   da392:	4903      	ldr	r1, [pc, #12]	; (da3a0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   da394:	4803      	ldr	r0, [pc, #12]	; (da3a4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   da396:	2300      	movs	r3, #0
   da398:	f7fe bec0 	b.w	d911c <log_set_callbacks>
   da39c:	000da649 	.word	0x000da649
   da3a0:	000da5d5 	.word	0x000da5d5
   da3a4:	000da555 	.word	0x000da555

000da3a8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   da3a8:	2300      	movs	r3, #0
   da3aa:	461a      	mov	r2, r3
   da3ac:	4619      	mov	r1, r3
   da3ae:	4618      	mov	r0, r3
   da3b0:	f7fe beb4 	b.w	d911c <log_set_callbacks>

000da3b4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   da3b4:	b570      	push	{r4, r5, r6, lr}
   da3b6:	b08a      	sub	sp, #40	; 0x28
   da3b8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   da3ba:	4601      	mov	r1, r0
   da3bc:	a804      	add	r0, sp, #16
   da3be:	f7fb fed1 	bl	d6164 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   da3c2:	4e14      	ldr	r6, [pc, #80]	; (da414 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   da3c4:	a804      	add	r0, sp, #16
   da3c6:	f7ff fdb5 	bl	d9f34 <_ZN5spark18JSONObjectIterator4nextEv>
   da3ca:	b1e8      	cbz	r0, da408 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   da3cc:	a904      	add	r1, sp, #16
   da3ce:	4668      	mov	r0, sp
   da3d0:	f7fb fed9 	bl	d6186 <_ZNK5spark18JSONObjectIterator4nameEv>
   da3d4:	9802      	ldr	r0, [sp, #8]
   da3d6:	4631      	mov	r1, r6
   da3d8:	f7ff feb4 	bl	da144 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   da3dc:	4604      	mov	r4, r0
   da3de:	b110      	cbz	r0, da3e6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   da3e0:	1e2c      	subs	r4, r5, #0
   da3e2:	bf18      	it	ne
   da3e4:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   da3e6:	a801      	add	r0, sp, #4
   da3e8:	f7f9 ff00 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da3ec:	2c00      	cmp	r4, #0
   da3ee:	d0e9      	beq.n	da3c4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   da3f0:	a904      	add	r1, sp, #16
   da3f2:	4668      	mov	r0, sp
   da3f4:	f7fb fed8 	bl	d61a8 <_ZNK5spark18JSONObjectIterator5valueEv>
   da3f8:	4668      	mov	r0, sp
   da3fa:	f7ff fd3e 	bl	d9e7a <_ZNK5spark9JSONValue5toIntEv>
   da3fe:	6028      	str	r0, [r5, #0]
   da400:	a801      	add	r0, sp, #4
   da402:	f7f9 fef3 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da406:	e7dd      	b.n	da3c4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   da408:	a805      	add	r0, sp, #20
   da40a:	f7f9 feef 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da40e:	b00a      	add	sp, #40	; 0x28
   da410:	bd70      	pop	{r4, r5, r6, pc}
   da412:	bf00      	nop
   da414:	000dd50e 	.word	0x000dd50e

000da418 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   da418:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da41a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   da41c:	4620      	mov	r0, r4
   da41e:	4912      	ldr	r1, [pc, #72]	; (da468 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   da420:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   da422:	f002 f8dc 	bl	dc5de <strcmp>
   da426:	b948      	cbnz	r0, da43c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   da428:	f001 fa96 	bl	db958 <_Z16_fetch_usbserialv>
   da42c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   da430:	f001 fa82 	bl	db938 <_ZN9USBSerial5beginEl>
        return &Serial;
   da434:	f001 fa90 	bl	db958 <_Z16_fetch_usbserialv>
}
   da438:	b003      	add	sp, #12
   da43a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   da43c:	490b      	ldr	r1, [pc, #44]	; (da46c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   da43e:	4620      	mov	r0, r4
   da440:	f002 f8cd 	bl	dc5de <strcmp>
   da444:	b970      	cbnz	r0, da464 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   da446:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   da44a:	a901      	add	r1, sp, #4
   da44c:	4628      	mov	r0, r5
        int baud = 9600;
   da44e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   da450:	f7ff ffb0 	bl	da3b4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   da454:	f001 f9f8 	bl	db848 <_Z22__fetch_global_Serial1v>
   da458:	9901      	ldr	r1, [sp, #4]
   da45a:	f001 f9ef 	bl	db83c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   da45e:	f001 f9f3 	bl	db848 <_Z22__fetch_global_Serial1v>
   da462:	e7e9      	b.n	da438 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   da464:	2000      	movs	r0, #0
   da466:	e7e7      	b.n	da438 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   da468:	000dd513 	.word	0x000dd513
   da46c:	000dd51a 	.word	0x000dd51a

000da470 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   da470:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   da472:	e9d0 5300 	ldrd	r5, r3, [r0]
   da476:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   da478:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   da47a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   da47e:	42ae      	cmp	r6, r5
   da480:	d005      	beq.n	da48e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   da482:	f105 0008 	add.w	r0, r5, #8
   da486:	f7ff fff3 	bl	da470 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   da48a:	3514      	adds	r5, #20
   da48c:	e7f7      	b.n	da47e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   da48e:	6820      	ldr	r0, [r4, #0]
   da490:	f7fe ff6a 	bl	d9368 <free>
}
   da494:	4620      	mov	r0, r4
   da496:	bd70      	pop	{r4, r5, r6, pc}

000da498 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   da498:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   da49a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   da49e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   da4a0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   da4a4:	42ae      	cmp	r6, r5
   da4a6:	d004      	beq.n	da4b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   da4a8:	4628      	mov	r0, r5
   da4aa:	f000 ffa5 	bl	db3f8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   da4ae:	3510      	adds	r5, #16
   da4b0:	e7f8      	b.n	da4a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   da4b2:	6820      	ldr	r0, [r4, #0]
   da4b4:	f7fe ff58 	bl	d9368 <free>
}
   da4b8:	4620      	mov	r0, r4
   da4ba:	bd70      	pop	{r4, r5, r6, pc}

000da4bc <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   da4bc:	b510      	push	{r4, lr}
   da4be:	4604      	mov	r4, r0
   da4c0:	300c      	adds	r0, #12
   da4c2:	f7ff ffd5 	bl	da470 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   da4c6:	4620      	mov	r0, r4
   da4c8:	f7ff ffe6 	bl	da498 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   da4cc:	4620      	mov	r0, r4
   da4ce:	bd10      	pop	{r4, pc}

000da4d0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   da4d0:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   da4d2:	4b04      	ldr	r3, [pc, #16]	; (da4e4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   da4d4:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   da4d6:	f840 3b04 	str.w	r3, [r0], #4
   da4da:	f7ff ffef 	bl	da4bc <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   da4de:	4620      	mov	r0, r4
   da4e0:	bd10      	pop	{r4, pc}
   da4e2:	bf00      	nop
   da4e4:	000dcd08 	.word	0x000dcd08

000da4e8 <_ZN5spark16StreamLogHandlerD0Ev>:
   da4e8:	b510      	push	{r4, lr}
   da4ea:	4604      	mov	r4, r0
   da4ec:	f7ff fff0 	bl	da4d0 <_ZN5spark16StreamLogHandlerD1Ev>
   da4f0:	4620      	mov	r0, r4
   da4f2:	2124      	movs	r1, #36	; 0x24
   da4f4:	f001 fbaa 	bl	dbc4c <_ZdlPvj>
   da4f8:	4620      	mov	r0, r4
   da4fa:	bd10      	pop	{r4, pc}

000da4fc <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   da4fc:	b510      	push	{r4, lr}
   da4fe:	4b03      	ldr	r3, [pc, #12]	; (da50c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   da500:	6003      	str	r3, [r0, #0]
   da502:	4604      	mov	r4, r0
   da504:	f7ff ffe4 	bl	da4d0 <_ZN5spark16StreamLogHandlerD1Ev>
   da508:	4620      	mov	r0, r4
   da50a:	bd10      	pop	{r4, pc}
   da50c:	000dd5b8 	.word	0x000dd5b8

000da510 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   da510:	b510      	push	{r4, lr}
   da512:	4604      	mov	r4, r0
   da514:	f7ff fff2 	bl	da4fc <_ZN5spark20JSONStreamLogHandlerD1Ev>
   da518:	4620      	mov	r0, r4
   da51a:	2124      	movs	r1, #36	; 0x24
   da51c:	f001 fb96 	bl	dbc4c <_ZdlPvj>
   da520:	4620      	mov	r0, r4
   da522:	bd10      	pop	{r4, pc}

000da524 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   da524:	2200      	movs	r2, #0
   da526:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   da52a:	b510      	push	{r4, lr}
        capacity_(0) {
   da52c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   da52e:	680c      	ldr	r4, [r1, #0]
   da530:	6004      	str	r4, [r0, #0]
   da532:	684c      	ldr	r4, [r1, #4]
   da534:	6044      	str	r4, [r0, #4]
   da536:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da538:	600a      	str	r2, [r1, #0]
   da53a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   da53c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da53e:	608a      	str	r2, [r1, #8]
}
   da540:	bd10      	pop	{r4, pc}

000da542 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   da542:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   da544:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   da546:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   da548:	6818      	ldr	r0, [r3, #0]
   da54a:	f7fe fbcf 	bl	d8cec <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   da54e:	4620      	mov	r0, r4
   da550:	bd10      	pop	{r4, pc}
	...

000da554 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   da554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da558:	b087      	sub	sp, #28
   da55a:	4680      	mov	r8, r0
   da55c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   da55e:	4b1c      	ldr	r3, [pc, #112]	; (da5d0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   da560:	685b      	ldr	r3, [r3, #4]
   da562:	f3c3 0308 	ubfx	r3, r3, #0, #9
   da566:	4689      	mov	r9, r1
   da568:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   da56a:	b96b      	cbnz	r3, da588 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   da56c:	f7ff fef4 	bl	da358 <_ZN5spark10LogManager8instanceEv>
   da570:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   da572:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   da576:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da578:	9305      	str	r3, [sp, #20]
   da57a:	f7fe fbaf 	bl	d8cdc <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   da57e:	7b23      	ldrb	r3, [r4, #12]
   da580:	b12b      	cbz	r3, da58e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   da582:	a805      	add	r0, sp, #20
   da584:	f7ff ffdd 	bl	da542 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   da588:	b007      	add	sp, #28
   da58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   da58e:	2301      	movs	r3, #1
   da590:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   da592:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   da596:	fa5f f989 	uxtb.w	r9, r9
   da59a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   da59e:	45aa      	cmp	sl, r5
   da5a0:	d012      	beq.n	da5c8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   da5a2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   da5a6:	4631      	mov	r1, r6
   da5a8:	1d38      	adds	r0, r7, #4
   da5aa:	f7ff fe61 	bl	da270 <_ZNK5spark6detail9LogFilter5levelEPKc>
   da5ae:	4581      	cmp	r9, r0
   da5b0:	d3f5      	bcc.n	da59e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   da5b2:	683b      	ldr	r3, [r7, #0]
   da5b4:	9a03      	ldr	r2, [sp, #12]
   da5b6:	9200      	str	r2, [sp, #0]
   da5b8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   da5bc:	464a      	mov	r2, r9
   da5be:	4633      	mov	r3, r6
   da5c0:	4641      	mov	r1, r8
   da5c2:	4638      	mov	r0, r7
   da5c4:	47d8      	blx	fp
   da5c6:	e7ea      	b.n	da59e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   da5c8:	2300      	movs	r3, #0
   da5ca:	7323      	strb	r3, [r4, #12]
   da5cc:	e7d9      	b.n	da582 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   da5ce:	bf00      	nop
   da5d0:	e000ed00 	.word	0xe000ed00

000da5d4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   da5d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da5d8:	469b      	mov	fp, r3
   da5da:	4b1a      	ldr	r3, [pc, #104]	; (da644 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   da5dc:	685b      	ldr	r3, [r3, #4]
   da5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
   da5e2:	4680      	mov	r8, r0
   da5e4:	4689      	mov	r9, r1
   da5e6:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   da5e8:	b96b      	cbnz	r3, da606 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   da5ea:	f7ff feb5 	bl	da358 <_ZN5spark10LogManager8instanceEv>
   da5ee:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   da5f0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   da5f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   da5f6:	9301      	str	r3, [sp, #4]
   da5f8:	f7fe fb70 	bl	d8cdc <os_mutex_recursive_lock>
        if (that->isActive()) {
   da5fc:	7b23      	ldrb	r3, [r4, #12]
   da5fe:	b12b      	cbz	r3, da60c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   da600:	a801      	add	r0, sp, #4
   da602:	f7ff ff9e 	bl	da542 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   da606:	b003      	add	sp, #12
   da608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   da60c:	2301      	movs	r3, #1
   da60e:	7323      	strb	r3, [r4, #12]
   da610:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   da614:	b2f6      	uxtb	r6, r6
   da616:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   da61a:	4555      	cmp	r5, sl
   da61c:	d00e      	beq.n	da63c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   da61e:	f855 7b04 	ldr.w	r7, [r5], #4
   da622:	4659      	mov	r1, fp
   da624:	1d38      	adds	r0, r7, #4
   da626:	f7ff fe23 	bl	da270 <_ZNK5spark6detail9LogFilter5levelEPKc>
   da62a:	4286      	cmp	r6, r0
   da62c:	d3f5      	bcc.n	da61a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   da62e:	683b      	ldr	r3, [r7, #0]
   da630:	464a      	mov	r2, r9
   da632:	68db      	ldr	r3, [r3, #12]
   da634:	4641      	mov	r1, r8
   da636:	4638      	mov	r0, r7
   da638:	4798      	blx	r3
   da63a:	e7ee      	b.n	da61a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   da63c:	2300      	movs	r3, #0
   da63e:	7323      	strb	r3, [r4, #12]
   da640:	e7de      	b.n	da600 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   da642:	bf00      	nop
   da644:	e000ed00 	.word	0xe000ed00

000da648 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   da648:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   da64c:	4b16      	ldr	r3, [pc, #88]	; (da6a8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   da64e:	685b      	ldr	r3, [r3, #4]
   da650:	f3c3 0308 	ubfx	r3, r3, #0, #9
   da654:	4605      	mov	r5, r0
   da656:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   da658:	bb1b      	cbnz	r3, da6a2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   da65a:	f7ff fe7d 	bl	da358 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   da65e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   da662:	4604      	mov	r4, r0
   da664:	6a40      	ldr	r0, [r0, #36]	; 0x24
   da666:	9301      	str	r3, [sp, #4]
   da668:	f7fe fb38 	bl	d8cdc <os_mutex_recursive_lock>
   da66c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   da670:	2446      	movs	r4, #70	; 0x46
   da672:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   da676:	45b0      	cmp	r8, r6
   da678:	d109      	bne.n	da68e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   da67a:	a801      	add	r0, sp, #4
   da67c:	f7ff ff61 	bl	da542 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   da680:	42a5      	cmp	r5, r4
   da682:	bfb4      	ite	lt
   da684:	2000      	movlt	r0, #0
   da686:	2001      	movge	r0, #1
}
   da688:	b002      	add	sp, #8
   da68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   da68e:	f856 0b04 	ldr.w	r0, [r6], #4
   da692:	4639      	mov	r1, r7
   da694:	3004      	adds	r0, #4
   da696:	f7ff fdeb 	bl	da270 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   da69a:	4284      	cmp	r4, r0
   da69c:	bfa8      	it	ge
   da69e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   da6a0:	e7e9      	b.n	da676 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   da6a2:	2000      	movs	r0, #0
   da6a4:	e7f0      	b.n	da688 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   da6a6:	bf00      	nop
   da6a8:	e000ed00 	.word	0xe000ed00

000da6ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   da6ac:	b570      	push	{r4, r5, r6, lr}
   da6ae:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   da6b0:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   da6b4:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   da6b6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   da6ba:	4282      	cmp	r2, r0
   da6bc:	d007      	beq.n	da6ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   da6be:	4601      	mov	r1, r0
            if (*p == value) {
   da6c0:	681d      	ldr	r5, [r3, #0]
   da6c2:	f851 6b04 	ldr.w	r6, [r1], #4
   da6c6:	42ae      	cmp	r6, r5
   da6c8:	d003      	beq.n	da6d2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   da6ca:	4608      	mov	r0, r1
   da6cc:	e7f5      	b.n	da6ba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   da6ce:	2000      	movs	r0, #0
}
   da6d0:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   da6d2:	1a52      	subs	r2, r2, r1
   da6d4:	f001 fef2 	bl	dc4bc <memmove>
    --size_;
   da6d8:	6863      	ldr	r3, [r4, #4]
   da6da:	3b01      	subs	r3, #1
   da6dc:	6063      	str	r3, [r4, #4]
    return true;
   da6de:	2001      	movs	r0, #1
   da6e0:	e7f6      	b.n	da6d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000da6e2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   da6e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   da6e4:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   da6e8:	4604      	mov	r4, r0
   da6ea:	6a40      	ldr	r0, [r0, #36]	; 0x24
   da6ec:	9101      	str	r1, [sp, #4]
   da6ee:	9303      	str	r3, [sp, #12]
   da6f0:	f7fe faf4 	bl	d8cdc <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   da6f4:	a901      	add	r1, sp, #4
   da6f6:	4620      	mov	r0, r4
   da6f8:	f7ff ffd8 	bl	da6ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   da6fc:	b118      	cbz	r0, da706 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   da6fe:	6863      	ldr	r3, [r4, #4]
   da700:	b90b      	cbnz	r3, da706 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   da702:	f7ff fe51 	bl	da3a8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   da706:	a803      	add	r0, sp, #12
   da708:	f7ff ff1b 	bl	da542 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   da70c:	b004      	add	sp, #16
   da70e:	bd10      	pop	{r4, pc}

000da710 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   da710:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   da712:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   da716:	2318      	movs	r3, #24
   da718:	4604      	mov	r4, r0
   da71a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   da71e:	42ae      	cmp	r6, r5
   da720:	d015      	beq.n	da74e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   da722:	f105 0110 	add.w	r1, r5, #16
   da726:	4620      	mov	r0, r4
   da728:	f7ff ffc0 	bl	da6ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   da72c:	6863      	ldr	r3, [r4, #4]
   da72e:	b90b      	cbnz	r3, da734 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   da730:	f7ff fe3a 	bl	da3a8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   da734:	69e0      	ldr	r0, [r4, #28]
   da736:	6929      	ldr	r1, [r5, #16]
   da738:	6803      	ldr	r3, [r0, #0]
   da73a:	68db      	ldr	r3, [r3, #12]
   da73c:	4798      	blx	r3
        if (h.stream) {
   da73e:	6969      	ldr	r1, [r5, #20]
   da740:	b119      	cbz	r1, da74a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   da742:	6a20      	ldr	r0, [r4, #32]
   da744:	6803      	ldr	r3, [r0, #0]
   da746:	68db      	ldr	r3, [r3, #12]
   da748:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   da74a:	3518      	adds	r5, #24
   da74c:	e7e7      	b.n	da71e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   da74e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   da752:	2618      	movs	r6, #24
   da754:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   da758:	42ae      	cmp	r6, r5
   da75a:	d004      	beq.n	da766 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   da75c:	4628      	mov	r0, r5
   da75e:	f000 fe4b 	bl	db3f8 <_ZN6StringD1Ev>
   da762:	3518      	adds	r5, #24
   da764:	e7f8      	b.n	da758 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   da766:	2300      	movs	r3, #0
   da768:	6163      	str	r3, [r4, #20]
}
   da76a:	bd70      	pop	{r4, r5, r6, pc}

000da76c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   da76c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   da76e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   da770:	f7ff fe1a 	bl	da3a8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   da774:	f104 0324 	add.w	r3, r4, #36	; 0x24
   da778:	6a60      	ldr	r0, [r4, #36]	; 0x24
   da77a:	9301      	str	r3, [sp, #4]
   da77c:	f7fe faae 	bl	d8cdc <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   da780:	4620      	mov	r0, r4
   da782:	f7ff ffc5 	bl	da710 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   da786:	a801      	add	r0, sp, #4
   da788:	f7ff fedb 	bl	da542 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   da78c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   da78e:	b108      	cbz	r0, da794 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   da790:	f7fe fa9c 	bl	d8ccc <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   da794:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   da798:	2618      	movs	r6, #24
   da79a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   da79e:	42ae      	cmp	r6, r5
   da7a0:	d004      	beq.n	da7ac <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   da7a2:	4628      	mov	r0, r5
   da7a4:	f000 fe28 	bl	db3f8 <_ZN6StringD1Ev>
   da7a8:	3518      	adds	r5, #24
   da7aa:	e7f8      	b.n	da79e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   da7ac:	6920      	ldr	r0, [r4, #16]
   da7ae:	f7fe fddb 	bl	d9368 <free>
   da7b2:	6820      	ldr	r0, [r4, #0]
   da7b4:	f7fe fdd8 	bl	d9368 <free>
}
   da7b8:	4620      	mov	r0, r4
   da7ba:	b002      	add	sp, #8
   da7bc:	bd70      	pop	{r4, r5, r6, pc}
	...

000da7c0 <__tcf_2>:
    static LogManager mgr;
   da7c0:	4801      	ldr	r0, [pc, #4]	; (da7c8 <__tcf_2+0x8>)
   da7c2:	f7ff bfd3 	b.w	da76c <_ZN5spark10LogManagerD1Ev>
   da7c6:	bf00      	nop
   da7c8:	2003e5a0 	.word	0x2003e5a0

000da7cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   da7cc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   da7ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da7d0:	4606      	mov	r6, r0
   da7d2:	460c      	mov	r4, r1
   da7d4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   da7d6:	d927      	bls.n	da828 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   da7d8:	4290      	cmp	r0, r2
   da7da:	d226      	bcs.n	da82a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   da7dc:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   da7e0:	1a6c      	subs	r4, r5, r1
   da7e2:	f1a1 0714 	sub.w	r7, r1, #20
   da7e6:	4404      	add	r4, r0
        capacity_(0) {
   da7e8:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   da7ea:	42af      	cmp	r7, r5
   da7ec:	d03d      	beq.n	da86a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   da7ee:	b1a4      	cbz	r4, da81a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   da7f0:	682b      	ldr	r3, [r5, #0]
   da7f2:	6023      	str	r3, [r4, #0]
   da7f4:	88ab      	ldrh	r3, [r5, #4]
   da7f6:	80a3      	strh	r3, [r4, #4]
   da7f8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   da7fc:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   da7fe:	e9c4 6602 	strd	r6, r6, [r4, #8]
   da802:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   da804:	68ab      	ldr	r3, [r5, #8]
   da806:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da808:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da80a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   da80c:	68ea      	ldr	r2, [r5, #12]
   da80e:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   da810:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da812:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   da814:	692a      	ldr	r2, [r5, #16]
   da816:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   da818:	612b      	str	r3, [r5, #16]
   da81a:	f105 0008 	add.w	r0, r5, #8
   da81e:	f7ff fe27 	bl	da470 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   da822:	3d14      	subs	r5, #20
   da824:	3c14      	subs	r4, #20
   da826:	e7e0      	b.n	da7ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   da828:	d01f      	beq.n	da86a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   da82a:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   da82c:	42ac      	cmp	r4, r5
   da82e:	d01c      	beq.n	da86a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   da830:	b1a6      	cbz	r6, da85c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   da832:	6823      	ldr	r3, [r4, #0]
   da834:	6033      	str	r3, [r6, #0]
   da836:	88a3      	ldrh	r3, [r4, #4]
   da838:	80b3      	strh	r3, [r6, #4]
   da83a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   da83e:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   da840:	e9c6 7702 	strd	r7, r7, [r6, #8]
   da844:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   da846:	68a3      	ldr	r3, [r4, #8]
   da848:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da84a:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da84c:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   da84e:	68e2      	ldr	r2, [r4, #12]
   da850:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   da852:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da854:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   da856:	6922      	ldr	r2, [r4, #16]
   da858:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   da85a:	6123      	str	r3, [r4, #16]
   da85c:	f104 0008 	add.w	r0, r4, #8
   da860:	f7ff fe06 	bl	da470 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   da864:	3414      	adds	r4, #20
   da866:	3614      	adds	r6, #20
   da868:	e7e0      	b.n	da82c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   da86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da86c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   da86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da86e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   da872:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   da874:	4604      	mov	r4, r0
   da876:	460e      	mov	r6, r1
   da878:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da87a:	db0d      	blt.n	da898 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   da87c:	3501      	adds	r5, #1
        if (n > 0) {
   da87e:	2d00      	cmp	r5, #0
   da880:	6800      	ldr	r0, [r0, #0]
   da882:	dd04      	ble.n	da88e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   da884:	00a9      	lsls	r1, r5, #2
   da886:	f7fe fd77 	bl	d9378 <realloc>
            if (!d) {
   da88a:	b918      	cbnz	r0, da894 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   da88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   da88e:	f7fe fd6b 	bl	d9368 <free>
        T* d = nullptr;
   da892:	2000      	movs	r0, #0
        data_ = d;
   da894:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   da896:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   da898:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   da89a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   da89c:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   da8a0:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   da8a2:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   da8a6:	1d08      	adds	r0, r1, #4
   da8a8:	f001 fe08 	bl	dc4bc <memmove>
    new(p) T(std::move(value));
   da8ac:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   da8b0:	6863      	ldr	r3, [r4, #4]
   da8b2:	3301      	adds	r3, #1
   da8b4:	6063      	str	r3, [r4, #4]
    return true;
   da8b6:	2001      	movs	r0, #1
   da8b8:	e7e8      	b.n	da88c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000da8ba <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   da8ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   da8bc:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   da8c0:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   da8c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   da8c4:	9301      	str	r3, [sp, #4]
   da8c6:	460d      	mov	r5, r1
   da8c8:	f7fe fa08 	bl	d8cdc <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   da8cc:	e9d4 3100 	ldrd	r3, r1, [r4]
   da8d0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   da8d4:	4283      	cmp	r3, r0
   da8d6:	461a      	mov	r2, r3
   da8d8:	d00b      	beq.n	da8f2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   da8da:	6812      	ldr	r2, [r2, #0]
   da8dc:	42aa      	cmp	r2, r5
   da8de:	f103 0304 	add.w	r3, r3, #4
   da8e2:	d1f7      	bne.n	da8d4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   da8e4:	a801      	add	r0, sp, #4
   da8e6:	f7ff fe2c 	bl	da542 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   da8ea:	2500      	movs	r5, #0
}
   da8ec:	4628      	mov	r0, r5
   da8ee:	b003      	add	sp, #12
   da8f0:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   da8f2:	462a      	mov	r2, r5
   da8f4:	4620      	mov	r0, r4
   da8f6:	f7ff ffb9 	bl	da86c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   da8fa:	4605      	mov	r5, r0
   da8fc:	2800      	cmp	r0, #0
   da8fe:	d0f1      	beq.n	da8e4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   da900:	6863      	ldr	r3, [r4, #4]
   da902:	2b01      	cmp	r3, #1
   da904:	d101      	bne.n	da90a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   da906:	f7ff fd43 	bl	da390 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   da90a:	a801      	add	r0, sp, #4
   da90c:	f7ff fe19 	bl	da542 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   da910:	e7ec      	b.n	da8ec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000da912 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   da912:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   da914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da916:	4604      	mov	r4, r0
   da918:	460d      	mov	r5, r1
   da91a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   da91c:	d914      	bls.n	da948 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   da91e:	4290      	cmp	r0, r2
   da920:	d213      	bcs.n	da94a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   da922:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   da926:	1a75      	subs	r5, r6, r1
   da928:	f1a1 0710 	sub.w	r7, r1, #16
   da92c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   da92e:	42b7      	cmp	r7, r6
   da930:	d018      	beq.n	da964 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   da932:	b11c      	cbz	r4, da93c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   da934:	4631      	mov	r1, r6
   da936:	4620      	mov	r0, r4
   da938:	f000 fdda 	bl	db4f0 <_ZN6StringC1EOS_>
                end->~T();
   da93c:	4630      	mov	r0, r6
   da93e:	f000 fd5b 	bl	db3f8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   da942:	3e10      	subs	r6, #16
   da944:	3c10      	subs	r4, #16
   da946:	e7f2      	b.n	da92e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   da948:	d00c      	beq.n	da964 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   da94a:	42b5      	cmp	r5, r6
   da94c:	d00a      	beq.n	da964 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   da94e:	b11c      	cbz	r4, da958 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   da950:	4629      	mov	r1, r5
   da952:	4620      	mov	r0, r4
   da954:	f000 fdcc 	bl	db4f0 <_ZN6StringC1EOS_>
                p->~T();
   da958:	4628      	mov	r0, r5
   da95a:	f000 fd4d 	bl	db3f8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   da95e:	3510      	adds	r5, #16
   da960:	3410      	adds	r4, #16
   da962:	e7f2      	b.n	da94a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   da964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da966 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   da966:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   da968:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   da96a:	4605      	mov	r5, r0
        if (n > 0) {
   da96c:	dd11      	ble.n	da992 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   da96e:	0130      	lsls	r0, r6, #4
   da970:	f7fe fcf2 	bl	d9358 <malloc>
            if (!d) {
   da974:	4604      	mov	r4, r0
   da976:	b158      	cbz	r0, da990 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   da978:	e9d5 1200 	ldrd	r1, r2, [r5]
   da97c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   da980:	f7ff ffc7 	bl	da912 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   da984:	6828      	ldr	r0, [r5, #0]
   da986:	f7fe fcef 	bl	d9368 <free>
        data_ = d;
   da98a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   da98c:	60ae      	str	r6, [r5, #8]
        return true;
   da98e:	2001      	movs	r0, #1
    }
   da990:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   da992:	2400      	movs	r4, #0
   da994:	e7f6      	b.n	da984 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000da996 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   da996:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da99a:	4691      	mov	r9, r2
   da99c:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   da99e:	2300      	movs	r3, #0
   da9a0:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   da9a2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   da9a6:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   da9a8:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   da9aa:	4299      	cmp	r1, r3
        capacity_(0) {
   da9ac:	e9c0 3300 	strd	r3, r3, [r0]
   da9b0:	e9c0 3302 	strd	r3, r3, [r0, #8]
   da9b4:	e9c0 3304 	strd	r3, r3, [r0, #16]
   da9b8:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   da9bc:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   da9be:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   da9c0:	dc23      	bgt.n	daa0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   da9c2:	e9d9 5700 	ldrd	r5, r7, [r9]
   da9c6:	2314      	movs	r3, #20
   da9c8:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   da9cc:	42af      	cmp	r7, r5
   da9ce:	d03b      	beq.n	daa48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   da9d0:	4629      	mov	r1, r5
   da9d2:	a80d      	add	r0, sp, #52	; 0x34
   da9d4:	f000 fd8c 	bl	db4f0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   da9d8:	a90d      	add	r1, sp, #52	; 0x34
   da9da:	a811      	add	r0, sp, #68	; 0x44
   da9dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   da9de:	f000 fd87 	bl	db4f0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da9e2:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   da9e6:	4299      	cmp	r1, r3
   da9e8:	da1b      	bge.n	daa22 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   da9ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   da9ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   da9ee:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   da9f2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   da9f6:	4631      	mov	r1, r6
   da9f8:	f106 0010 	add.w	r0, r6, #16
   da9fc:	f7ff ff89 	bl	da912 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   daa00:	b9ee      	cbnz	r6, daa3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   daa02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   daa04:	3301      	adds	r3, #1
   daa06:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   daa08:	e011      	b.n	daa2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   daa0a:	a80a      	add	r0, sp, #40	; 0x28
   daa0c:	f7ff ffab 	bl	da966 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   daa10:	2800      	cmp	r0, #0
   daa12:	d1d6      	bne.n	da9c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   daa14:	a80a      	add	r0, sp, #40	; 0x28
   daa16:	f7ff fd3f 	bl	da498 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   daa1a:	4620      	mov	r0, r4
   daa1c:	b017      	add	sp, #92	; 0x5c
   daa1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   daa22:	3101      	adds	r1, #1
   daa24:	a80a      	add	r0, sp, #40	; 0x28
   daa26:	f7ff ff9e 	bl	da966 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   daa2a:	2800      	cmp	r0, #0
   daa2c:	d1dd      	bne.n	da9ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   daa2e:	a811      	add	r0, sp, #68	; 0x44
   daa30:	f000 fce2 	bl	db3f8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   daa34:	a80d      	add	r0, sp, #52	; 0x34
   daa36:	f000 fcdf 	bl	db3f8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   daa3a:	3514      	adds	r5, #20
   daa3c:	e7c6      	b.n	da9cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   daa3e:	a911      	add	r1, sp, #68	; 0x44
   daa40:	4630      	mov	r0, r6
   daa42:	f000 fd55 	bl	db4f0 <_ZN6StringC1EOS_>
   daa46:	e7dc      	b.n	daa02 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   daa48:	2600      	movs	r6, #0
   daa4a:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   daa4e:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   daa50:	4637      	mov	r7, r6
   daa52:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   daa56:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   daa5a:	429e      	cmp	r6, r3
   daa5c:	f280 8097 	bge.w	dab8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   daa60:	0133      	lsls	r3, r6, #4
   daa62:	58d3      	ldr	r3, [r2, r3]
   daa64:	9308      	str	r3, [sp, #32]
        if (!category) {
   daa66:	b90b      	cbnz	r3, daa6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   daa68:	3601      	adds	r6, #1
   daa6a:	e7f4      	b.n	daa56 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   daa6c:	fb0a f306 	mul.w	r3, sl, r6
   daa70:	9709      	str	r7, [sp, #36]	; 0x24
   daa72:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   daa74:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   daa76:	a909      	add	r1, sp, #36	; 0x24
   daa78:	a808      	add	r0, sp, #32
   daa7a:	f7ff fb3c 	bl	da0f6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   daa7e:	4683      	mov	fp, r0
   daa80:	2800      	cmp	r0, #0
   daa82:	d0f1      	beq.n	daa68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   daa84:	4601      	mov	r1, r0
   daa86:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   daa88:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   daa8c:	f10d 031f 	add.w	r3, sp, #31
   daa90:	4628      	mov	r0, r5
   daa92:	f7ff fbaf 	bl	da1f4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   daa96:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   daa9a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   daa9c:	f1b8 0f00 	cmp.w	r8, #0
   daaa0:	d166      	bne.n	dab70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   daaa2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   daaa6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   daaaa:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   daaae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   daab2:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   daab6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   daaba:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   daabe:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   daac2:	4293      	cmp	r3, r2
   daac4:	db1a      	blt.n	daafc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   daac6:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   daaca:	f1bb 0f00 	cmp.w	fp, #0
   daace:	dd4a      	ble.n	dab66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   daad0:	fb0a f00b 	mul.w	r0, sl, fp
   daad4:	f7fe fc40 	bl	d9358 <malloc>
            if (!d) {
   daad8:	9004      	str	r0, [sp, #16]
   daada:	2800      	cmp	r0, #0
   daadc:	d045      	beq.n	dab6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   daade:	e9d5 1200 	ldrd	r1, r2, [r5]
   daae2:	fb0a 1202 	mla	r2, sl, r2, r1
   daae6:	f7ff fe71 	bl	da7cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   daaea:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   daaec:	6828      	ldr	r0, [r5, #0]
   daaee:	9304      	str	r3, [sp, #16]
   daaf0:	f7fe fc3a 	bl	d9368 <free>
        data_ = d;
   daaf4:	9b04      	ldr	r3, [sp, #16]
   daaf6:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   daaf8:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   daafc:	9b01      	ldr	r3, [sp, #4]
   daafe:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   dab02:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   dab04:	fb0a f303 	mul.w	r3, sl, r3
   dab08:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   dab0c:	f101 0014 	add.w	r0, r1, #20
   dab10:	fb0a b202 	mla	r2, sl, r2, fp
   dab14:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   dab16:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   dab18:	f7ff fe58 	bl	da7cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   dab1c:	9904      	ldr	r1, [sp, #16]
   dab1e:	b1a9      	cbz	r1, dab4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   dab20:	9b05      	ldr	r3, [sp, #20]
   dab22:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dab24:	f84b 2003 	str.w	r2, [fp, r3]
   dab28:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   dab2c:	808b      	strh	r3, [r1, #4]
   dab2e:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   dab32:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   dab34:	e9c1 7702 	strd	r7, r7, [r1, #8]
   dab38:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   dab3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   dab3c:	608b      	str	r3, [r1, #8]
   dab3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   dab40:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   dab42:	60cb      	str	r3, [r1, #12]
   dab44:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   dab46:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   dab48:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dab4a:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   dab4c:	686b      	ldr	r3, [r5, #4]
   dab4e:	3301      	adds	r3, #1
   dab50:	606b      	str	r3, [r5, #4]
   dab52:	a813      	add	r0, sp, #76	; 0x4c
   dab54:	f7ff fc8c 	bl	da470 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dab58:	f1b8 0f00 	cmp.w	r8, #0
   dab5c:	d008      	beq.n	dab70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   dab5e:	a80d      	add	r0, sp, #52	; 0x34
   dab60:	f7ff fc86 	bl	da470 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   dab64:	e756      	b.n	daa14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   dab66:	4643      	mov	r3, r8
   dab68:	e7c0      	b.n	daaec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dab6a:	f04f 0801 	mov.w	r8, #1
   dab6e:	e7f0      	b.n	dab52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   dab70:	9b01      	ldr	r3, [sp, #4]
   dab72:	682d      	ldr	r5, [r5, #0]
   dab74:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   dab78:	9b08      	ldr	r3, [sp, #32]
   dab7a:	781b      	ldrb	r3, [r3, #0]
   dab7c:	b92b      	cbnz	r3, dab8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   dab7e:	f8d9 3000 	ldr.w	r3, [r9]
   dab82:	9a02      	ldr	r2, [sp, #8]
   dab84:	4413      	add	r3, r2
   dab86:	7c1b      	ldrb	r3, [r3, #16]
   dab88:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   dab8a:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   dab8c:	e773      	b.n	daa76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dab8e:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   dab90:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dab92:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   dab94:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dab96:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dab98:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   dab9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   dab9c:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dab9e:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   daba0:	60a2      	str	r2, [r4, #8]
   daba2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   daba4:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daba6:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   daba8:	60e2      	str	r2, [r4, #12]
   dabaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   dabac:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dabae:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   dabb0:	6122      	str	r2, [r4, #16]
   dabb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   dabb4:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   dabb6:	9b03      	ldr	r3, [sp, #12]
   dabb8:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   dabba:	6162      	str	r2, [r4, #20]
   dabbc:	7623      	strb	r3, [r4, #24]
   dabbe:	e7ce      	b.n	dab5e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000dabc0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   dabc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   dabc2:	4605      	mov	r5, r0
   dabc4:	4b09      	ldr	r3, [pc, #36]	; (dabec <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   dabc6:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   dabca:	4604      	mov	r4, r0
   dabcc:	460e      	mov	r6, r1
        filter_(level, filters) {
   dabce:	a801      	add	r0, sp, #4
   dabd0:	4611      	mov	r1, r2
   dabd2:	f7f9 fc54 	bl	d447e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dabd6:	aa01      	add	r2, sp, #4
   dabd8:	4631      	mov	r1, r6
   dabda:	4628      	mov	r0, r5
   dabdc:	f7ff fedb 	bl	da996 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dabe0:	a801      	add	r0, sp, #4
   dabe2:	f7f9 fbf3 	bl	d43cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   dabe6:	4620      	mov	r0, r4
   dabe8:	b004      	add	sp, #16
   dabea:	bd70      	pop	{r4, r5, r6, pc}
   dabec:	000dcd08 	.word	0x000dcd08

000dabf0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   dabf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dabf2:	460f      	mov	r7, r1
   dabf4:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dabf6:	4926      	ldr	r1, [pc, #152]	; (dac90 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   dabf8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dabfa:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   dabfc:	4616      	mov	r6, r2
   dabfe:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dac00:	f001 fced 	bl	dc5de <strcmp>
   dac04:	bb00      	cbnz	r0, dac48 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   dac06:	b1e4      	cbz	r4, dac42 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   dac08:	4629      	mov	r1, r5
   dac0a:	4668      	mov	r0, sp
   dac0c:	f7ff fc8a 	bl	da524 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dac10:	4920      	ldr	r1, [pc, #128]	; (dac94 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   dac12:	2024      	movs	r0, #36	; 0x24
   dac14:	f001 f81c 	bl	dbc50 <_ZnwjRKSt9nothrow_t>
   dac18:	4605      	mov	r5, r0
   dac1a:	b170      	cbz	r0, dac3a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   dac1c:	4669      	mov	r1, sp
   dac1e:	a803      	add	r0, sp, #12
   dac20:	f7f9 fc2d 	bl	d447e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dac24:	aa03      	add	r2, sp, #12
   dac26:	4631      	mov	r1, r6
   dac28:	4628      	mov	r0, r5
   dac2a:	f7ff ffc9 	bl	dabc0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dac2e:	a803      	add	r0, sp, #12
   dac30:	f7f9 fbcc 	bl	d43cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   dac34:	4b18      	ldr	r3, [pc, #96]	; (dac98 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   dac36:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   dac38:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   dac3a:	4668      	mov	r0, sp
   dac3c:	f7f9 fbc6 	bl	d43cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dac40:	462c      	mov	r4, r5
}
   dac42:	4620      	mov	r0, r4
   dac44:	b007      	add	sp, #28
   dac46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   dac48:	4914      	ldr	r1, [pc, #80]	; (dac9c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   dac4a:	4638      	mov	r0, r7
   dac4c:	f001 fcc7 	bl	dc5de <strcmp>
   dac50:	b9e0      	cbnz	r0, dac8c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   dac52:	2c00      	cmp	r4, #0
   dac54:	d0f5      	beq.n	dac42 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   dac56:	4629      	mov	r1, r5
   dac58:	4668      	mov	r0, sp
   dac5a:	f7ff fc63 	bl	da524 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dac5e:	490d      	ldr	r1, [pc, #52]	; (dac94 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   dac60:	2024      	movs	r0, #36	; 0x24
   dac62:	f000 fff5 	bl	dbc50 <_ZnwjRKSt9nothrow_t>
   dac66:	4605      	mov	r5, r0
   dac68:	2800      	cmp	r0, #0
   dac6a:	d0e6      	beq.n	dac3a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   dac6c:	4669      	mov	r1, sp
   dac6e:	a803      	add	r0, sp, #12
   dac70:	f7f9 fc05 	bl	d447e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dac74:	aa03      	add	r2, sp, #12
   dac76:	4631      	mov	r1, r6
   dac78:	4628      	mov	r0, r5
   dac7a:	f7ff ffa1 	bl	dabc0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dac7e:	a803      	add	r0, sp, #12
   dac80:	f7f9 fba4 	bl	d43cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dac84:	4b06      	ldr	r3, [pc, #24]	; (daca0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   dac86:	602b      	str	r3, [r5, #0]
   dac88:	622c      	str	r4, [r5, #32]
}
   dac8a:	e7d6      	b.n	dac3a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   dac8c:	2400      	movs	r4, #0
   dac8e:	e7d8      	b.n	dac42 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   dac90:	000dd522 	.word	0x000dd522
   dac94:	000dd6b8 	.word	0x000dd6b8
   dac98:	000dd5b8 	.word	0x000dd5b8
   dac9c:	000dd526 	.word	0x000dd526
   daca0:	000dd5a0 	.word	0x000dd5a0

000daca4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   daca4:	4b01      	ldr	r3, [pc, #4]	; (dacac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   daca6:	4a02      	ldr	r2, [pc, #8]	; (dacb0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   daca8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   dacaa:	4770      	bx	lr
   dacac:	2003e59c 	.word	0x2003e59c
   dacb0:	000dd537 	.word	0x000dd537

000dacb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dacb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dacb8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   dacba:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dacbe:	4604      	mov	r4, r0
   dacc0:	460e      	mov	r6, r1
   dacc2:	4617      	mov	r7, r2
   dacc4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   dacc6:	f000 fe47 	bl	db958 <_Z16_fetch_usbserialv>
   dacca:	4581      	cmp	r9, r0
   daccc:	d04c      	beq.n	dad68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   dacce:	792b      	ldrb	r3, [r5, #4]
   dacd0:	0719      	lsls	r1, r3, #28
   dacd2:	d504      	bpl.n	dacde <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   dacd4:	696a      	ldr	r2, [r5, #20]
   dacd6:	4954      	ldr	r1, [pc, #336]	; (dae28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   dacd8:	4620      	mov	r0, r4
   dacda:	f7ff fa7c 	bl	da1d6 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   dacde:	f1b8 0f00 	cmp.w	r8, #0
   dace2:	d00d      	beq.n	dad00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   dace4:	215b      	movs	r1, #91	; 0x5b
   dace6:	4620      	mov	r0, r4
   dace8:	f7ff fa69 	bl	da1be <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   dacec:	4641      	mov	r1, r8
   dacee:	4620      	mov	r0, r4
   dacf0:	f7ff fa56 	bl	da1a0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   dacf4:	6823      	ldr	r3, [r4, #0]
   dacf6:	494d      	ldr	r1, [pc, #308]	; (dae2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   dacf8:	68db      	ldr	r3, [r3, #12]
   dacfa:	2202      	movs	r2, #2
   dacfc:	4620      	mov	r0, r4
   dacfe:	4798      	blx	r3
    if (attr.has_file) {
   dad00:	792b      	ldrb	r3, [r5, #4]
   dad02:	07da      	lsls	r2, r3, #31
   dad04:	d523      	bpl.n	dad4e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   dad06:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   dad0a:	212f      	movs	r1, #47	; 0x2f
   dad0c:	4640      	mov	r0, r8
   dad0e:	f001 fcc3 	bl	dc698 <strrchr>
    if (s1) {
   dad12:	b108      	cbz	r0, dad18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   dad14:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   dad18:	4641      	mov	r1, r8
   dad1a:	4620      	mov	r0, r4
   dad1c:	f7ff fa40 	bl	da1a0 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   dad20:	792b      	ldrb	r3, [r5, #4]
   dad22:	079b      	lsls	r3, r3, #30
   dad24:	d508      	bpl.n	dad38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   dad26:	213a      	movs	r1, #58	; 0x3a
   dad28:	4620      	mov	r0, r4
   dad2a:	f7ff fa48 	bl	da1be <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   dad2e:	68ea      	ldr	r2, [r5, #12]
   dad30:	493f      	ldr	r1, [pc, #252]	; (dae30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   dad32:	4620      	mov	r0, r4
   dad34:	f7ff fa4f 	bl	da1d6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   dad38:	792a      	ldrb	r2, [r5, #4]
   dad3a:	6823      	ldr	r3, [r4, #0]
   dad3c:	f012 0f04 	tst.w	r2, #4
   dad40:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   dad42:	bf14      	ite	ne
   dad44:	493b      	ldrne	r1, [pc, #236]	; (dae34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   dad46:	493c      	ldreq	r1, [pc, #240]	; (dae38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   dad48:	2202      	movs	r2, #2
            write(": ", 2);
   dad4a:	4620      	mov	r0, r4
   dad4c:	4798      	blx	r3
    if (attr.has_function) {
   dad4e:	792b      	ldrb	r3, [r5, #4]
   dad50:	0758      	lsls	r0, r3, #29
   dad52:	d51d      	bpl.n	dad90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   dad54:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   dad56:	460b      	mov	r3, r1
   dad58:	461a      	mov	r2, r3
    for (; *s; ++s) {
   dad5a:	f813 0b01 	ldrb.w	r0, [r3], #1
   dad5e:	b160      	cbz	r0, dad7a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   dad60:	2820      	cmp	r0, #32
   dad62:	d108      	bne.n	dad76 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   dad64:	4619      	mov	r1, r3
   dad66:	e7f7      	b.n	dad58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   dad68:	4834      	ldr	r0, [pc, #208]	; (dae3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   dad6a:	f000 f966 	bl	db03a <_ZN5spark12NetworkClass9listeningEv>
   dad6e:	2800      	cmp	r0, #0
   dad70:	d0ad      	beq.n	dacce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   dad72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   dad76:	2828      	cmp	r0, #40	; 0x28
   dad78:	d1ee      	bne.n	dad58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   dad7a:	6823      	ldr	r3, [r4, #0]
   dad7c:	1a52      	subs	r2, r2, r1
   dad7e:	68db      	ldr	r3, [r3, #12]
   dad80:	4620      	mov	r0, r4
   dad82:	4798      	blx	r3
        write("(): ", 4);
   dad84:	6823      	ldr	r3, [r4, #0]
   dad86:	492e      	ldr	r1, [pc, #184]	; (dae40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   dad88:	68db      	ldr	r3, [r3, #12]
   dad8a:	2204      	movs	r2, #4
   dad8c:	4620      	mov	r0, r4
   dad8e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   dad90:	2100      	movs	r1, #0
   dad92:	4638      	mov	r0, r7
   dad94:	f7fe f9ba 	bl	d910c <log_level_name>
   dad98:	4601      	mov	r1, r0
    write(s);
   dad9a:	4620      	mov	r0, r4
   dad9c:	f7ff fa00 	bl	da1a0 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   dada0:	6823      	ldr	r3, [r4, #0]
   dada2:	4925      	ldr	r1, [pc, #148]	; (dae38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   dada4:	68db      	ldr	r3, [r3, #12]
   dada6:	2202      	movs	r2, #2
   dada8:	4620      	mov	r0, r4
   dadaa:	4798      	blx	r3
    if (msg) {
   dadac:	b11e      	cbz	r6, dadb6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   dadae:	4631      	mov	r1, r6
   dadb0:	4620      	mov	r0, r4
   dadb2:	f7ff f9f5 	bl	da1a0 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   dadb6:	792b      	ldrb	r3, [r5, #4]
   dadb8:	f013 0f30 	tst.w	r3, #48	; 0x30
   dadbc:	d02c      	beq.n	dae18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   dadbe:	6823      	ldr	r3, [r4, #0]
   dadc0:	4920      	ldr	r1, [pc, #128]	; (dae44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   dadc2:	68db      	ldr	r3, [r3, #12]
   dadc4:	2202      	movs	r2, #2
   dadc6:	4620      	mov	r0, r4
   dadc8:	4798      	blx	r3
        if (attr.has_code) {
   dadca:	792b      	ldrb	r3, [r5, #4]
   dadcc:	06d9      	lsls	r1, r3, #27
   dadce:	d50a      	bpl.n	dade6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   dadd0:	6823      	ldr	r3, [r4, #0]
   dadd2:	491d      	ldr	r1, [pc, #116]	; (dae48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   dadd4:	68db      	ldr	r3, [r3, #12]
   dadd6:	2207      	movs	r2, #7
   dadd8:	4620      	mov	r0, r4
   dadda:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   daddc:	69aa      	ldr	r2, [r5, #24]
   dadde:	491b      	ldr	r1, [pc, #108]	; (dae4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   dade0:	4620      	mov	r0, r4
   dade2:	f7ff f9f8 	bl	da1d6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   dade6:	792b      	ldrb	r3, [r5, #4]
   dade8:	069a      	lsls	r2, r3, #26
   dadea:	d511      	bpl.n	dae10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   dadec:	06db      	lsls	r3, r3, #27
   dadee:	d505      	bpl.n	dadfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   dadf0:	6823      	ldr	r3, [r4, #0]
   dadf2:	4910      	ldr	r1, [pc, #64]	; (dae34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   dadf4:	68db      	ldr	r3, [r3, #12]
   dadf6:	2202      	movs	r2, #2
   dadf8:	4620      	mov	r0, r4
   dadfa:	4798      	blx	r3
            write("details = ", 10);
   dadfc:	6823      	ldr	r3, [r4, #0]
   dadfe:	4914      	ldr	r1, [pc, #80]	; (dae50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   dae00:	68db      	ldr	r3, [r3, #12]
   dae02:	4620      	mov	r0, r4
   dae04:	220a      	movs	r2, #10
   dae06:	4798      	blx	r3
            write(attr.details);
   dae08:	69e9      	ldr	r1, [r5, #28]
   dae0a:	4620      	mov	r0, r4
   dae0c:	f7ff f9c8 	bl	da1a0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   dae10:	215d      	movs	r1, #93	; 0x5d
   dae12:	4620      	mov	r0, r4
   dae14:	f7ff f9d3 	bl	da1be <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   dae18:	6823      	ldr	r3, [r4, #0]
   dae1a:	490e      	ldr	r1, [pc, #56]	; (dae54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   dae1c:	68db      	ldr	r3, [r3, #12]
   dae1e:	4620      	mov	r0, r4
   dae20:	2202      	movs	r2, #2
}
   dae22:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   dae26:	4718      	bx	r3
   dae28:	000dd53b 	.word	0x000dd53b
   dae2c:	000dd542 	.word	0x000dd542
   dae30:	000dcbe0 	.word	0x000dcbe0
   dae34:	000dd545 	.word	0x000dd545
   dae38:	000dd54a 	.word	0x000dd54a
   dae3c:	2003e5c8 	.word	0x2003e5c8
   dae40:	000dd548 	.word	0x000dd548
   dae44:	000dd54d 	.word	0x000dd54d
   dae48:	000dd550 	.word	0x000dd550
   dae4c:	000dd558 	.word	0x000dd558
   dae50:	000dd55b 	.word	0x000dd55b
   dae54:	000dd566 	.word	0x000dd566

000dae58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dae58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dae5c:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   dae5e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dae62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   dae64:	4605      	mov	r5, r0
   dae66:	460f      	mov	r7, r1
   dae68:	4690      	mov	r8, r2
   dae6a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   dae6c:	f000 fd74 	bl	db958 <_Z16_fetch_usbserialv>
   dae70:	4581      	cmp	r9, r0
   dae72:	d105      	bne.n	dae80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   dae74:	4849      	ldr	r0, [pc, #292]	; (daf9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   dae76:	f000 f8e0 	bl	db03a <_ZN5spark12NetworkClass9listeningEv>
   dae7a:	2800      	cmp	r0, #0
   dae7c:	f040 808a 	bne.w	daf94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   dae80:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   dae82:	4a47      	ldr	r2, [pc, #284]	; (dafa0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   dae84:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   dae86:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   dae8a:	a801      	add	r0, sp, #4
        strm_(stream) {
   dae8c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   dae8e:	f88d 9008 	strb.w	r9, [sp, #8]
   dae92:	f7ff f878 	bl	d9f86 <_ZN5spark10JSONWriter11beginObjectEv>
   dae96:	4649      	mov	r1, r9
   dae98:	4640      	mov	r0, r8
   dae9a:	f7fe f937 	bl	d910c <log_level_name>
    json.name("l", 1).value(s);
   dae9e:	4941      	ldr	r1, [pc, #260]	; (dafa4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   daea0:	4680      	mov	r8, r0
   daea2:	2201      	movs	r2, #1
   daea4:	a801      	add	r0, sp, #4
   daea6:	f7ff f8f7 	bl	da098 <_ZN5spark10JSONWriter4nameEPKcj>
   daeaa:	4641      	mov	r1, r8
   daeac:	f7ff f96a 	bl	da184 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   daeb0:	b13f      	cbz	r7, daec2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   daeb2:	493d      	ldr	r1, [pc, #244]	; (dafa8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   daeb4:	2201      	movs	r2, #1
   daeb6:	a801      	add	r0, sp, #4
   daeb8:	f7ff f8ee 	bl	da098 <_ZN5spark10JSONWriter4nameEPKcj>
   daebc:	4639      	mov	r1, r7
   daebe:	f7ff f961 	bl	da184 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   daec2:	b13e      	cbz	r6, daed4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   daec4:	4939      	ldr	r1, [pc, #228]	; (dafac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   daec6:	2201      	movs	r2, #1
   daec8:	a801      	add	r0, sp, #4
   daeca:	f7ff f8e5 	bl	da098 <_ZN5spark10JSONWriter4nameEPKcj>
   daece:	4631      	mov	r1, r6
   daed0:	f7ff f958 	bl	da184 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   daed4:	7923      	ldrb	r3, [r4, #4]
   daed6:	07df      	lsls	r7, r3, #31
   daed8:	d50e      	bpl.n	daef8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   daeda:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   daedc:	212f      	movs	r1, #47	; 0x2f
   daede:	4630      	mov	r0, r6
   daee0:	f001 fbda 	bl	dc698 <strrchr>
    if (s1) {
   daee4:	b100      	cbz	r0, daee8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   daee6:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   daee8:	4931      	ldr	r1, [pc, #196]	; (dafb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   daeea:	2201      	movs	r2, #1
   daeec:	a801      	add	r0, sp, #4
   daeee:	f7ff f8d3 	bl	da098 <_ZN5spark10JSONWriter4nameEPKcj>
   daef2:	4631      	mov	r1, r6
   daef4:	f7ff f946 	bl	da184 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   daef8:	7923      	ldrb	r3, [r4, #4]
   daefa:	079e      	lsls	r6, r3, #30
   daefc:	d507      	bpl.n	daf0e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   daefe:	492d      	ldr	r1, [pc, #180]	; (dafb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   daf00:	2202      	movs	r2, #2
   daf02:	a801      	add	r0, sp, #4
   daf04:	f7ff f8c8 	bl	da098 <_ZN5spark10JSONWriter4nameEPKcj>
   daf08:	68e1      	ldr	r1, [r4, #12]
   daf0a:	f7ff f849 	bl	d9fa0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   daf0e:	7923      	ldrb	r3, [r4, #4]
   daf10:	0758      	lsls	r0, r3, #29
   daf12:	d514      	bpl.n	daf3e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   daf14:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   daf16:	4633      	mov	r3, r6
   daf18:	461f      	mov	r7, r3
    for (; *s; ++s) {
   daf1a:	f813 2b01 	ldrb.w	r2, [r3], #1
   daf1e:	b12a      	cbz	r2, daf2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   daf20:	2a20      	cmp	r2, #32
   daf22:	d101      	bne.n	daf28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   daf24:	461e      	mov	r6, r3
   daf26:	e7f7      	b.n	daf18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   daf28:	2a28      	cmp	r2, #40	; 0x28
   daf2a:	d1f5      	bne.n	daf18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   daf2c:	4922      	ldr	r1, [pc, #136]	; (dafb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   daf2e:	2202      	movs	r2, #2
   daf30:	a801      	add	r0, sp, #4
   daf32:	f7ff f8b1 	bl	da098 <_ZN5spark10JSONWriter4nameEPKcj>
   daf36:	1bba      	subs	r2, r7, r6
   daf38:	4631      	mov	r1, r6
   daf3a:	f7ff f8bd 	bl	da0b8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   daf3e:	7923      	ldrb	r3, [r4, #4]
   daf40:	0719      	lsls	r1, r3, #28
   daf42:	d507      	bpl.n	daf54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   daf44:	491d      	ldr	r1, [pc, #116]	; (dafbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   daf46:	2201      	movs	r2, #1
   daf48:	a801      	add	r0, sp, #4
   daf4a:	f7ff f8a5 	bl	da098 <_ZN5spark10JSONWriter4nameEPKcj>
   daf4e:	6961      	ldr	r1, [r4, #20]
   daf50:	f7ff f838 	bl	d9fc4 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   daf54:	7923      	ldrb	r3, [r4, #4]
   daf56:	06da      	lsls	r2, r3, #27
   daf58:	d508      	bpl.n	daf6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   daf5a:	2204      	movs	r2, #4
   daf5c:	4918      	ldr	r1, [pc, #96]	; (dafc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   daf5e:	eb0d 0002 	add.w	r0, sp, r2
   daf62:	f7ff f899 	bl	da098 <_ZN5spark10JSONWriter4nameEPKcj>
   daf66:	69a1      	ldr	r1, [r4, #24]
   daf68:	f7ff f81a 	bl	d9fa0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   daf6c:	7923      	ldrb	r3, [r4, #4]
   daf6e:	069b      	lsls	r3, r3, #26
   daf70:	d507      	bpl.n	daf82 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   daf72:	4914      	ldr	r1, [pc, #80]	; (dafc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   daf74:	2206      	movs	r2, #6
   daf76:	a801      	add	r0, sp, #4
   daf78:	f7ff f88e 	bl	da098 <_ZN5spark10JSONWriter4nameEPKcj>
   daf7c:	69e1      	ldr	r1, [r4, #28]
   daf7e:	f7ff f901 	bl	da184 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   daf82:	a801      	add	r0, sp, #4
   daf84:	f7fe ffe9 	bl	d9f5a <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   daf88:	6a28      	ldr	r0, [r5, #32]
   daf8a:	490f      	ldr	r1, [pc, #60]	; (dafc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   daf8c:	6803      	ldr	r3, [r0, #0]
   daf8e:	2202      	movs	r2, #2
   daf90:	68db      	ldr	r3, [r3, #12]
   daf92:	4798      	blx	r3
}
   daf94:	b005      	add	sp, #20
   daf96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   daf9a:	bf00      	nop
   daf9c:	2003e5c8 	.word	0x2003e5c8
   dafa0:	000dd588 	.word	0x000dd588
   dafa4:	000dd518 	.word	0x000dd518
   dafa8:	000dcf25 	.word	0x000dcf25
   dafac:	000dd569 	.word	0x000dd569
   dafb0:	000dcbb6 	.word	0x000dcbb6
   dafb4:	000dd56b 	.word	0x000dd56b
   dafb8:	000dd56e 	.word	0x000dd56e
   dafbc:	000dcd5d 	.word	0x000dcd5d
   dafc0:	000dd571 	.word	0x000dd571
   dafc4:	000dd576 	.word	0x000dd576
   dafc8:	000dd566 	.word	0x000dd566

000dafcc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   dafcc:	2300      	movs	r3, #0
   dafce:	6840      	ldr	r0, [r0, #4]
   dafd0:	461a      	mov	r2, r3
   dafd2:	f7fe b961 	b.w	d9298 <network_connect>

000dafd6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   dafd6:	6840      	ldr	r0, [r0, #4]
   dafd8:	2200      	movs	r2, #0
   dafda:	2102      	movs	r1, #2
   dafdc:	f7fe b96c 	b.w	d92b8 <network_disconnect>

000dafe0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   dafe0:	2200      	movs	r2, #0
   dafe2:	6840      	ldr	r0, [r0, #4]
   dafe4:	4611      	mov	r1, r2
   dafe6:	f7fe b95f 	b.w	d92a8 <network_connecting>

000dafea <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   dafea:	2200      	movs	r2, #0
   dafec:	6840      	ldr	r0, [r0, #4]
   dafee:	4611      	mov	r1, r2
   daff0:	f7fe b96a 	b.w	d92c8 <network_ready>

000daff4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   daff4:	2300      	movs	r3, #0
   daff6:	6840      	ldr	r0, [r0, #4]
   daff8:	461a      	mov	r2, r3
   daffa:	4619      	mov	r1, r3
   daffc:	f7fe b96c 	b.w	d92d8 <network_on>

000db000 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   db000:	2300      	movs	r3, #0
   db002:	6840      	ldr	r0, [r0, #4]
   db004:	461a      	mov	r2, r3
   db006:	4619      	mov	r1, r3
   db008:	f7fe b96e 	b.w	d92e8 <network_off>

000db00c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   db00c:	6840      	ldr	r0, [r0, #4]
   db00e:	2100      	movs	r1, #0
   db010:	f7fe b992 	b.w	d9338 <network_is_on>

000db014 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   db014:	6840      	ldr	r0, [r0, #4]
   db016:	2100      	movs	r1, #0
   db018:	f7fe b996 	b.w	d9348 <network_is_off>

000db01c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   db01c:	6840      	ldr	r0, [r0, #4]
   db01e:	2200      	movs	r2, #0
   db020:	f081 0101 	eor.w	r1, r1, #1
   db024:	f7fe b968 	b.w	d92f8 <network_listen>

000db028 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   db028:	6840      	ldr	r0, [r0, #4]
   db02a:	2200      	movs	r2, #0
   db02c:	f7fe b974 	b.w	d9318 <network_set_listen_timeout>

000db030 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   db030:	2200      	movs	r2, #0
   db032:	6840      	ldr	r0, [r0, #4]
   db034:	4611      	mov	r1, r2
   db036:	f7fe b977 	b.w	d9328 <network_get_listen_timeout>

000db03a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   db03a:	2200      	movs	r2, #0
   db03c:	6840      	ldr	r0, [r0, #4]
   db03e:	4611      	mov	r1, r2
   db040:	f7fe b962 	b.w	d9308 <network_listening>

000db044 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   db044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   db048:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   db04a:	b095      	sub	sp, #84	; 0x54
   db04c:	4616      	mov	r6, r2
   db04e:	460d      	mov	r5, r1
   db050:	4607      	mov	r7, r0
    IPAddress addr;
   db052:	f7fe fe23 	bl	d9c9c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   db056:	4621      	mov	r1, r4
   db058:	2218      	movs	r2, #24
   db05a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   db05c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   db05e:	f001 fa47 	bl	dc4f0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   db062:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   db064:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   db068:	4621      	mov	r1, r4
   db06a:	466b      	mov	r3, sp
   db06c:	aa0c      	add	r2, sp, #48	; 0x30
   db06e:	4630      	mov	r0, r6
   db070:	f7fd fefc 	bl	d8e6c <netdb_getaddrinfo>
    if (!r) {
   db074:	4604      	mov	r4, r0
   db076:	2800      	cmp	r0, #0
   db078:	d146      	bne.n	db108 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db07a:	4602      	mov	r2, r0
   db07c:	2101      	movs	r1, #1
   db07e:	6868      	ldr	r0, [r5, #4]
   db080:	f7fe f922 	bl	d92c8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db084:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db086:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db088:	4622      	mov	r2, r4
   db08a:	6868      	ldr	r0, [r5, #4]
   db08c:	f7fe f91c 	bl	d92c8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db090:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db092:	4681      	mov	r9, r0
        bool ok = false;
   db094:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db096:	2e00      	cmp	r6, #0
   db098:	d036      	beq.n	db108 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   db09a:	2900      	cmp	r1, #0
   db09c:	d134      	bne.n	db108 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   db09e:	6873      	ldr	r3, [r6, #4]
   db0a0:	2b02      	cmp	r3, #2
   db0a2:	d003      	beq.n	db0ac <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   db0a4:	2b0a      	cmp	r3, #10
   db0a6:	d00b      	beq.n	db0c0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db0a8:	69f6      	ldr	r6, [r6, #28]
   db0aa:	e7f4      	b.n	db096 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   db0ac:	f1b8 0f00 	cmp.w	r8, #0
   db0b0:	d004      	beq.n	db0bc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   db0b2:	6971      	ldr	r1, [r6, #20]
   db0b4:	4638      	mov	r0, r7
   db0b6:	3104      	adds	r1, #4
   db0b8:	f7fe fe1d 	bl	d9cf6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   db0bc:	4641      	mov	r1, r8
   db0be:	e7f3      	b.n	db0a8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   db0c0:	f1b9 0f00 	cmp.w	r9, #0
   db0c4:	d101      	bne.n	db0ca <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   db0c6:	4649      	mov	r1, r9
   db0c8:	e7ee      	b.n	db0a8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   db0ca:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   db0cc:	2210      	movs	r2, #16
   db0ce:	a801      	add	r0, sp, #4
   db0d0:	f001 fa0e 	bl	dc4f0 <memset>
                    a.v = 6;
   db0d4:	2306      	movs	r3, #6
   db0d6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   db0da:	ad01      	add	r5, sp, #4
   db0dc:	f104 0308 	add.w	r3, r4, #8
   db0e0:	3418      	adds	r4, #24
   db0e2:	6818      	ldr	r0, [r3, #0]
   db0e4:	6859      	ldr	r1, [r3, #4]
   db0e6:	462a      	mov	r2, r5
   db0e8:	c203      	stmia	r2!, {r0, r1}
   db0ea:	3308      	adds	r3, #8
   db0ec:	42a3      	cmp	r3, r4
   db0ee:	4615      	mov	r5, r2
   db0f0:	d1f7      	bne.n	db0e2 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   db0f2:	a901      	add	r1, sp, #4
   db0f4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   db0f6:	ad07      	add	r5, sp, #28
   db0f8:	f7fe fdde 	bl	d9cb8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   db0fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db0fe:	1d3c      	adds	r4, r7, #4
   db100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db102:	682b      	ldr	r3, [r5, #0]
   db104:	7023      	strb	r3, [r4, #0]
   db106:	e7de      	b.n	db0c6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   db108:	9800      	ldr	r0, [sp, #0]
   db10a:	f7fd fea7 	bl	d8e5c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   db10e:	4638      	mov	r0, r7
   db110:	b015      	add	sp, #84	; 0x54
   db112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000db118 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   db118:	4b02      	ldr	r3, [pc, #8]	; (db124 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   db11a:	4a03      	ldr	r2, [pc, #12]	; (db128 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   db11c:	601a      	str	r2, [r3, #0]
   db11e:	2200      	movs	r2, #0
   db120:	605a      	str	r2, [r3, #4]

} // spark
   db122:	4770      	bx	lr
   db124:	2003e5c8 	.word	0x2003e5c8
   db128:	000dd600 	.word	0x000dd600

000db12c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   db12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db12e:	4606      	mov	r6, r0
   db130:	460d      	mov	r5, r1
  size_t n = 0;
   db132:	188f      	adds	r7, r1, r2
   db134:	2400      	movs	r4, #0
  while (size--) {
   db136:	42bd      	cmp	r5, r7
   db138:	d00c      	beq.n	db154 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   db13a:	6833      	ldr	r3, [r6, #0]
   db13c:	f815 1b01 	ldrb.w	r1, [r5], #1
   db140:	689b      	ldr	r3, [r3, #8]
   db142:	4630      	mov	r0, r6
   db144:	4798      	blx	r3
     if (chunk>=0)
   db146:	1e03      	subs	r3, r0, #0
   db148:	db01      	blt.n	db14e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   db14a:	441c      	add	r4, r3
  while (size--) {
   db14c:	e7f3      	b.n	db136 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   db14e:	2c00      	cmp	r4, #0
   db150:	bf08      	it	eq
   db152:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   db154:	4620      	mov	r0, r4
   db156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db158 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   db158:	b513      	push	{r0, r1, r4, lr}
   db15a:	4604      	mov	r4, r0
    }
   db15c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   db15e:	b159      	cbz	r1, db178 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   db160:	9101      	str	r1, [sp, #4]
   db162:	f001 fa6c 	bl	dc63e <strlen>
   db166:	6823      	ldr	r3, [r4, #0]
   db168:	9901      	ldr	r1, [sp, #4]
   db16a:	68db      	ldr	r3, [r3, #12]
   db16c:	4602      	mov	r2, r0
   db16e:	4620      	mov	r0, r4
    }
   db170:	b002      	add	sp, #8
   db172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   db176:	4718      	bx	r3
    }
   db178:	b002      	add	sp, #8
   db17a:	bd10      	pop	{r4, pc}

000db17c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   db17c:	b508      	push	{r3, lr}
  return write(str);
   db17e:	f7ff ffeb 	bl	db158 <_ZN5Print5writeEPKc>
}
   db182:	bd08      	pop	{r3, pc}

000db184 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   db184:	6803      	ldr	r3, [r0, #0]
   db186:	689b      	ldr	r3, [r3, #8]
   db188:	4718      	bx	r3

000db18a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   db18a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   db18c:	210d      	movs	r1, #13
{
   db18e:	4605      	mov	r5, r0
  size_t n = print('\r');
   db190:	f7ff fff8 	bl	db184 <_ZN5Print5printEc>
  n += print('\n');
   db194:	210a      	movs	r1, #10
  size_t n = print('\r');
   db196:	4604      	mov	r4, r0
  n += print('\n');
   db198:	4628      	mov	r0, r5
   db19a:	f7ff fff3 	bl	db184 <_ZN5Print5printEc>
  return n;
}
   db19e:	4420      	add	r0, r4
   db1a0:	bd38      	pop	{r3, r4, r5, pc}

000db1a2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   db1a2:	b530      	push	{r4, r5, lr}
   db1a4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   db1a6:	2300      	movs	r3, #0
   db1a8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   db1ac:	2a01      	cmp	r2, #1
   db1ae:	bf98      	it	ls
   db1b0:	220a      	movls	r2, #10
   db1b2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   db1b4:	460d      	mov	r5, r1
   db1b6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   db1ba:	fb01 5312 	mls	r3, r1, r2, r5
   db1be:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   db1c2:	2b09      	cmp	r3, #9
   db1c4:	bf94      	ite	ls
   db1c6:	3330      	addls	r3, #48	; 0x30
   db1c8:	3337      	addhi	r3, #55	; 0x37
   db1ca:	b2db      	uxtb	r3, r3
  } while(n);
   db1cc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   db1ce:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   db1d2:	d9ef      	bls.n	db1b4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   db1d4:	4621      	mov	r1, r4
   db1d6:	f7ff ffbf 	bl	db158 <_ZN5Print5writeEPKc>
}
   db1da:	b00b      	add	sp, #44	; 0x2c
   db1dc:	bd30      	pop	{r4, r5, pc}

000db1de <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   db1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db1e2:	b086      	sub	sp, #24
   db1e4:	af00      	add	r7, sp, #0
   db1e6:	4605      	mov	r5, r0
   db1e8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   db1ea:	1d38      	adds	r0, r7, #4
   db1ec:	2114      	movs	r1, #20
{
   db1ee:	4614      	mov	r4, r2
    va_copy(args2, args);
   db1f0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   db1f2:	f7fe f8e1 	bl	d93b8 <vsnprintf>

    if (n<bufsize)
   db1f6:	2813      	cmp	r0, #19
   db1f8:	d80e      	bhi.n	db218 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   db1fa:	1d39      	adds	r1, r7, #4
   db1fc:	4628      	mov	r0, r5
   db1fe:	f7ff ffab 	bl	db158 <_ZN5Print5writeEPKc>
   db202:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   db204:	b11e      	cbz	r6, db20e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   db206:	4628      	mov	r0, r5
   db208:	f7ff ffbf 	bl	db18a <_ZN5Print7printlnEv>
   db20c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   db20e:	4620      	mov	r0, r4
   db210:	3718      	adds	r7, #24
   db212:	46bd      	mov	sp, r7
   db214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   db218:	f100 0308 	add.w	r3, r0, #8
   db21c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   db220:	46e8      	mov	r8, sp
        char bigger[n+1];
   db222:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   db226:	4622      	mov	r2, r4
   db228:	1c41      	adds	r1, r0, #1
   db22a:	683b      	ldr	r3, [r7, #0]
   db22c:	4668      	mov	r0, sp
   db22e:	f7fe f8c3 	bl	d93b8 <vsnprintf>
  return write(str);
   db232:	4669      	mov	r1, sp
   db234:	4628      	mov	r0, r5
   db236:	f7ff ff8f 	bl	db158 <_ZN5Print5writeEPKc>
   db23a:	4604      	mov	r4, r0
   db23c:	46c5      	mov	sp, r8
   db23e:	e7e1      	b.n	db204 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000db240 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   db240:	b510      	push	{r4, lr}
  if (0 == max) {
   db242:	4604      	mov	r4, r0
   db244:	b128      	cbz	r0, db252 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   db246:	f001 f97f 	bl	dc548 <rand>
   db24a:	fb90 f3f4 	sdiv	r3, r0, r4
   db24e:	fb03 0414 	mls	r4, r3, r4, r0
}
   db252:	4620      	mov	r0, r4
   db254:	bd10      	pop	{r4, pc}

000db256 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   db256:	4288      	cmp	r0, r1
{
   db258:	b510      	push	{r4, lr}
   db25a:	4604      	mov	r4, r0
  if (min >= max) {
   db25c:	da03      	bge.n	db266 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   db25e:	1a08      	subs	r0, r1, r0
   db260:	f7ff ffee 	bl	db240 <_Z6randomi>
   db264:	4404      	add	r4, r0
}
   db266:	4620      	mov	r0, r4
   db268:	bd10      	pop	{r4, pc}
	...

000db26c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   db26c:	4b01      	ldr	r3, [pc, #4]	; (db274 <_GLOBAL__sub_I_RGB+0x8>)
   db26e:	2200      	movs	r2, #0
   db270:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   db272:	4770      	bx	lr
   db274:	2003e5d0 	.word	0x2003e5d0

000db278 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   db278:	2100      	movs	r1, #0
   db27a:	f7fd be37 	b.w	d8eec <hal_spi_acquire>

000db27e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   db27e:	2100      	movs	r1, #0
   db280:	f7fd be3c 	b.w	d8efc <hal_spi_release>

000db284 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   db284:	b510      	push	{r4, lr}
   db286:	4604      	mov	r4, r0
   db288:	4608      	mov	r0, r1
{
    _spi = spi;
   db28a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   db28c:	f7fd fe0e 	bl	d8eac <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   db290:	2300      	movs	r3, #0
   db292:	6063      	str	r3, [r4, #4]
}
   db294:	4620      	mov	r0, r4
   db296:	bd10      	pop	{r4, pc}

000db298 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   db298:	b510      	push	{r4, lr}
   db29a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   db29c:	7800      	ldrb	r0, [r0, #0]
   db29e:	f7ff ffeb 	bl	db278 <_ZN8SPIClass4lockEv.isra.0>
   db2a2:	b948      	cbnz	r0, db2b8 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   db2a4:	7820      	ldrb	r0, [r4, #0]
   db2a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   db2aa:	f7fd fde7 	bl	d8e7c <hal_spi_begin>
        unlock();
   db2ae:	7820      	ldrb	r0, [r4, #0]
    }
}
   db2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   db2b4:	f7ff bfe3 	b.w	db27e <_ZN8SPIClass6unlockEv.isra.0>
}
   db2b8:	bd10      	pop	{r4, pc}

000db2ba <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   db2ba:	b510      	push	{r4, lr}
   db2bc:	4604      	mov	r4, r0
    if (!lock())
   db2be:	7800      	ldrb	r0, [r0, #0]
   db2c0:	f7ff ffda 	bl	db278 <_ZN8SPIClass4lockEv.isra.0>
   db2c4:	b938      	cbnz	r0, db2d6 <_ZN8SPIClass3endEv+0x1c>
    {
        hal_spi_end(_spi);
   db2c6:	7820      	ldrb	r0, [r4, #0]
   db2c8:	f7fd fde0 	bl	d8e8c <hal_spi_end>
        unlock();
   db2cc:	7820      	ldrb	r0, [r4, #0]
    }
}
   db2ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   db2d2:	f7ff bfd4 	b.w	db27e <_ZN8SPIClass6unlockEv.isra.0>
}
   db2d6:	bd10      	pop	{r4, pc}

000db2d8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   db2d8:	7800      	ldrb	r0, [r0, #0]
   db2da:	f7ff bfd0 	b.w	db27e <_ZN8SPIClass6unlockEv.isra.0>
	...

000db2e0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   db2e0:	0840      	lsrs	r0, r0, #1
{
   db2e2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   db2e4:	6018      	str	r0, [r3, #0]
   db2e6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   db2e8:	6818      	ldr	r0, [r3, #0]
   db2ea:	4288      	cmp	r0, r1
   db2ec:	b2e5      	uxtb	r5, r4
   db2ee:	d906      	bls.n	db2fe <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   db2f0:	3401      	adds	r4, #1
   db2f2:	2c08      	cmp	r4, #8
   db2f4:	d002      	beq.n	db2fc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   db2f6:	0840      	lsrs	r0, r0, #1
   db2f8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   db2fa:	e7f5      	b.n	db2e8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   db2fc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   db2fe:	4b02      	ldr	r3, [pc, #8]	; (db308 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   db300:	5d5b      	ldrb	r3, [r3, r5]
   db302:	7013      	strb	r3, [r2, #0]
}
   db304:	bd30      	pop	{r4, r5, pc}
   db306:	bf00      	nop
   db308:	000dd634 	.word	0x000dd634

000db30c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   db30c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db310:	4606      	mov	r6, r0
   db312:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   db314:	7800      	ldrb	r0, [r0, #0]
{
   db316:	460c      	mov	r4, r1
    CHECK(lock());
   db318:	f7ff ffae 	bl	db278 <_ZN8SPIClass4lockEv.isra.0>
   db31c:	2800      	cmp	r0, #0
   db31e:	db1b      	blt.n	db358 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   db320:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   db322:	2214      	movs	r2, #20
   db324:	2100      	movs	r1, #0
   db326:	a809      	add	r0, sp, #36	; 0x24
   db328:	f001 f8e2 	bl	dc4f0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   db32c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   db32e:	2200      	movs	r2, #0
   db330:	a909      	add	r1, sp, #36	; 0x24
   db332:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   db334:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   db338:	f7fd fdc8 	bl	d8ecc <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   db33c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   db340:	b113      	cbz	r3, db348 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   db342:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   db346:	b155      	cbz	r5, db35e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   db348:	2700      	movs	r7, #0
   db34a:	46b9      	mov	r9, r7
   db34c:	46b8      	mov	r8, r7
   db34e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   db350:	7923      	ldrb	r3, [r4, #4]
   db352:	b15d      	cbz	r5, db36c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   db354:	b1c3      	cbz	r3, db388 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   db356:	2000      	movs	r0, #0
}
   db358:	b00f      	add	sp, #60	; 0x3c
   db35a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   db35e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   db362:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   db366:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   db36a:	e7f1      	b.n	db350 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   db36c:	2b00      	cmp	r3, #0
   db36e:	d135      	bne.n	db3dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   db370:	68a3      	ldr	r3, [r4, #8]
   db372:	4543      	cmp	r3, r8
   db374:	d108      	bne.n	db388 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   db376:	f88d 9020 	strb.w	r9, [sp, #32]
   db37a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   db37e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   db382:	89a3      	ldrh	r3, [r4, #12]
   db384:	429a      	cmp	r2, r3
   db386:	d0e6      	beq.n	db356 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   db388:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   db38a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   db38c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   db390:	980a      	ldr	r0, [sp, #40]	; 0x28
   db392:	ab04      	add	r3, sp, #16
   db394:	f10d 020f 	add.w	r2, sp, #15
   db398:	f7ff ffa2 	bl	db2e0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   db39c:	7921      	ldrb	r1, [r4, #4]
   db39e:	b985      	cbnz	r5, db3c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   db3a0:	b989      	cbnz	r1, db3c6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   db3a2:	68a3      	ldr	r3, [r4, #8]
   db3a4:	4543      	cmp	r3, r8
   db3a6:	d30e      	bcc.n	db3c6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   db3a8:	f88d 9020 	strb.w	r9, [sp, #32]
   db3ac:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   db3b0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   db3b4:	89a3      	ldrh	r3, [r4, #12]
   db3b6:	429a      	cmp	r2, r3
   db3b8:	d105      	bne.n	db3c6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   db3ba:	9b04      	ldr	r3, [sp, #16]
   db3bc:	4543      	cmp	r3, r8
   db3be:	d102      	bne.n	db3c6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   db3c0:	e7c9      	b.n	db356 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   db3c2:	2900      	cmp	r1, #0
   db3c4:	d1f9      	bne.n	db3ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   db3c6:	2300      	movs	r3, #0
   db3c8:	9301      	str	r3, [sp, #4]
   db3ca:	7b63      	ldrb	r3, [r4, #13]
   db3cc:	9300      	str	r3, [sp, #0]
   db3ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
   db3d2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   db3d4:	7830      	ldrb	r0, [r6, #0]
   db3d6:	f7fd fd81 	bl	d8edc <hal_spi_set_settings>
   db3da:	e7bc      	b.n	db356 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   db3dc:	e9cd 5500 	strd	r5, r5, [sp]
   db3e0:	462b      	mov	r3, r5
   db3e2:	462a      	mov	r2, r5
   db3e4:	2101      	movs	r1, #1
   db3e6:	e7f5      	b.n	db3d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000db3e8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   db3e8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   db3ea:	7800      	ldrb	r0, [r0, #0]
   db3ec:	f7fd fd56 	bl	d8e9c <hal_spi_transfer>
}
   db3f0:	b2c0      	uxtb	r0, r0
   db3f2:	bd08      	pop	{r3, pc}

000db3f4 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   db3f4:	4770      	bx	lr

000db3f6 <_ZN8SPIClass15detachInterruptEv>:
   db3f6:	4770      	bx	lr

000db3f8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   db3f8:	b510      	push	{r4, lr}
   db3fa:	4604      	mov	r4, r0
{
	free(buffer);
   db3fc:	6800      	ldr	r0, [r0, #0]
   db3fe:	f7fd ffb3 	bl	d9368 <free>
}
   db402:	4620      	mov	r0, r4
   db404:	bd10      	pop	{r4, pc}

000db406 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   db406:	b510      	push	{r4, lr}
   db408:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   db40a:	6800      	ldr	r0, [r0, #0]
   db40c:	b108      	cbz	r0, db412 <_ZN6String10invalidateEv+0xc>
   db40e:	f7fd ffab 	bl	d9368 <free>
	buffer = NULL;
   db412:	2300      	movs	r3, #0
	capacity = len = 0;
   db414:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   db418:	6023      	str	r3, [r4, #0]
}
   db41a:	bd10      	pop	{r4, pc}

000db41c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   db41c:	b538      	push	{r3, r4, r5, lr}
   db41e:	4604      	mov	r4, r0
   db420:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   db422:	6800      	ldr	r0, [r0, #0]
   db424:	3101      	adds	r1, #1
   db426:	f7fd ffa7 	bl	d9378 <realloc>
	if (newbuffer) {
   db42a:	b110      	cbz	r0, db432 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   db42c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   db430:	2001      	movs	r0, #1
	}
	return 0;
}
   db432:	bd38      	pop	{r3, r4, r5, pc}

000db434 <_ZN6String7reserveEj>:
{
   db434:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   db436:	6803      	ldr	r3, [r0, #0]
{
   db438:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   db43a:	b123      	cbz	r3, db446 <_ZN6String7reserveEj+0x12>
   db43c:	6843      	ldr	r3, [r0, #4]
   db43e:	428b      	cmp	r3, r1
   db440:	d301      	bcc.n	db446 <_ZN6String7reserveEj+0x12>
   db442:	2001      	movs	r0, #1
}
   db444:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   db446:	4620      	mov	r0, r4
   db448:	f7ff ffe8 	bl	db41c <_ZN6String12changeBufferEj>
   db44c:	2800      	cmp	r0, #0
   db44e:	d0f9      	beq.n	db444 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   db450:	68a3      	ldr	r3, [r4, #8]
   db452:	2b00      	cmp	r3, #0
   db454:	d1f5      	bne.n	db442 <_ZN6String7reserveEj+0xe>
   db456:	6822      	ldr	r2, [r4, #0]
   db458:	7013      	strb	r3, [r2, #0]
   db45a:	e7f2      	b.n	db442 <_ZN6String7reserveEj+0xe>

000db45c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   db45c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db45e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   db460:	4611      	mov	r1, r2
   db462:	9201      	str	r2, [sp, #4]
{
   db464:	4604      	mov	r4, r0
	if (!reserve(length)) {
   db466:	f7ff ffe5 	bl	db434 <_ZN6String7reserveEj>
   db46a:	9a01      	ldr	r2, [sp, #4]
   db46c:	b928      	cbnz	r0, db47a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   db46e:	4620      	mov	r0, r4
   db470:	f7ff ffc9 	bl	db406 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   db474:	4620      	mov	r0, r4
   db476:	b003      	add	sp, #12
   db478:	bd30      	pop	{r4, r5, pc}
	len = length;
   db47a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   db47c:	4629      	mov	r1, r5
   db47e:	6820      	ldr	r0, [r4, #0]
   db480:	f001 f80e 	bl	dc4a0 <memcpy>
	buffer[len] = 0;
   db484:	6822      	ldr	r2, [r4, #0]
   db486:	68a3      	ldr	r3, [r4, #8]
   db488:	2100      	movs	r1, #0
   db48a:	54d1      	strb	r1, [r2, r3]
	return *this;
   db48c:	e7f2      	b.n	db474 <_ZN6String4copyEPKcj+0x18>

000db48e <_ZN6StringC1EPKc>:
	buffer = NULL;
   db48e:	2300      	movs	r3, #0
String::String(const char *cstr)
   db490:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   db492:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   db496:	4604      	mov	r4, r0
	len = 0;
   db498:	6083      	str	r3, [r0, #8]
	flags = 0;
   db49a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   db49c:	b141      	cbz	r1, db4b0 <_ZN6StringC1EPKc+0x22>
   db49e:	4608      	mov	r0, r1
   db4a0:	9101      	str	r1, [sp, #4]
   db4a2:	f001 f8cc 	bl	dc63e <strlen>
   db4a6:	9901      	ldr	r1, [sp, #4]
   db4a8:	4602      	mov	r2, r0
   db4aa:	4620      	mov	r0, r4
   db4ac:	f7ff ffd6 	bl	db45c <_ZN6String4copyEPKcj>
}
   db4b0:	4620      	mov	r0, r4
   db4b2:	b002      	add	sp, #8
   db4b4:	bd10      	pop	{r4, pc}

000db4b6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   db4b6:	b538      	push	{r3, r4, r5, lr}
   db4b8:	4605      	mov	r5, r0
	if (buffer) {
   db4ba:	6800      	ldr	r0, [r0, #0]
{
   db4bc:	460c      	mov	r4, r1
	if (buffer) {
   db4be:	b168      	cbz	r0, db4dc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   db4c0:	686a      	ldr	r2, [r5, #4]
   db4c2:	688b      	ldr	r3, [r1, #8]
   db4c4:	429a      	cmp	r2, r3
   db4c6:	d307      	bcc.n	db4d8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   db4c8:	6809      	ldr	r1, [r1, #0]
   db4ca:	f001 f892 	bl	dc5f2 <strcpy>
			len = rhs.len;
   db4ce:	68a3      	ldr	r3, [r4, #8]
   db4d0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   db4d2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   db4d4:	60a3      	str	r3, [r4, #8]
}
   db4d6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   db4d8:	f7fd ff46 	bl	d9368 <free>
	buffer = rhs.buffer;
   db4dc:	6823      	ldr	r3, [r4, #0]
   db4de:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   db4e0:	6863      	ldr	r3, [r4, #4]
   db4e2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   db4e4:	68a3      	ldr	r3, [r4, #8]
   db4e6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   db4e8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   db4ea:	e9c4 3300 	strd	r3, r3, [r4]
   db4ee:	e7f1      	b.n	db4d4 <_ZN6String4moveERS_+0x1e>

000db4f0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   db4f0:	b510      	push	{r4, lr}
	buffer = NULL;
   db4f2:	2300      	movs	r3, #0
	capacity = 0;
   db4f4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   db4f8:	4604      	mov	r4, r0
	len = 0;
   db4fa:	6083      	str	r3, [r0, #8]
	flags = 0;
   db4fc:	7303      	strb	r3, [r0, #12]
	move(rval);
   db4fe:	f7ff ffda 	bl	db4b6 <_ZN6String4moveERS_>
}
   db502:	4620      	mov	r0, r4
   db504:	bd10      	pop	{r4, pc}

000db506 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   db506:	4288      	cmp	r0, r1
{
   db508:	b510      	push	{r4, lr}
   db50a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   db50c:	d005      	beq.n	db51a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   db50e:	680b      	ldr	r3, [r1, #0]
   db510:	b12b      	cbz	r3, db51e <_ZN6StringaSERKS_+0x18>
   db512:	688a      	ldr	r2, [r1, #8]
   db514:	4619      	mov	r1, r3
   db516:	f7ff ffa1 	bl	db45c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   db51a:	4620      	mov	r0, r4
   db51c:	bd10      	pop	{r4, pc}
	else invalidate();
   db51e:	f7ff ff72 	bl	db406 <_ZN6String10invalidateEv>
   db522:	e7fa      	b.n	db51a <_ZN6StringaSERKS_+0x14>

000db524 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   db524:	b510      	push	{r4, lr}
	buffer = NULL;
   db526:	2300      	movs	r3, #0
String::String(const String &value)
   db528:	4604      	mov	r4, r0
	capacity = 0;
   db52a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   db52e:	6083      	str	r3, [r0, #8]
	flags = 0;
   db530:	7303      	strb	r3, [r0, #12]
	*this = value;
   db532:	f7ff ffe8 	bl	db506 <_ZN6StringaSERKS_>
}
   db536:	4620      	mov	r0, r4
   db538:	bd10      	pop	{r4, pc}

000db53a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   db53a:	4288      	cmp	r0, r1
{
   db53c:	b510      	push	{r4, lr}
   db53e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   db540:	d001      	beq.n	db546 <_ZN6StringaSEOS_+0xc>
   db542:	f7ff ffb8 	bl	db4b6 <_ZN6String4moveERS_>
	return *this;
}
   db546:	4620      	mov	r0, r4
   db548:	bd10      	pop	{r4, pc}

000db54a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   db54a:	b513      	push	{r0, r1, r4, lr}
   db54c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   db54e:	b159      	cbz	r1, db568 <_ZN6StringaSEPKc+0x1e>
   db550:	4608      	mov	r0, r1
   db552:	9101      	str	r1, [sp, #4]
   db554:	f001 f873 	bl	dc63e <strlen>
   db558:	9901      	ldr	r1, [sp, #4]
   db55a:	4602      	mov	r2, r0
   db55c:	4620      	mov	r0, r4
   db55e:	f7ff ff7d 	bl	db45c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   db562:	4620      	mov	r0, r4
   db564:	b002      	add	sp, #8
   db566:	bd10      	pop	{r4, pc}
	else invalidate();
   db568:	f7ff ff4d 	bl	db406 <_ZN6String10invalidateEv>
   db56c:	e7f9      	b.n	db562 <_ZN6StringaSEPKc+0x18>

000db56e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   db56e:	b570      	push	{r4, r5, r6, lr}
   db570:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   db572:	460e      	mov	r6, r1
   db574:	b909      	cbnz	r1, db57a <_ZN6String6concatEPKcj+0xc>
   db576:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   db578:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   db57a:	b16a      	cbz	r2, db598 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   db57c:	6884      	ldr	r4, [r0, #8]
   db57e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   db580:	4621      	mov	r1, r4
   db582:	f7ff ff57 	bl	db434 <_ZN6String7reserveEj>
   db586:	2800      	cmp	r0, #0
   db588:	d0f5      	beq.n	db576 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   db58a:	6828      	ldr	r0, [r5, #0]
   db58c:	68ab      	ldr	r3, [r5, #8]
   db58e:	4631      	mov	r1, r6
   db590:	4418      	add	r0, r3
   db592:	f001 f82e 	bl	dc5f2 <strcpy>
	len = newlen;
   db596:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   db598:	2001      	movs	r0, #1
   db59a:	e7ed      	b.n	db578 <_ZN6String6concatEPKcj+0xa>

000db59c <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   db59c:	b513      	push	{r0, r1, r4, lr}
   db59e:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   db5a0:	4608      	mov	r0, r1
	if (!cstr) return 0;
   db5a2:	b151      	cbz	r1, db5ba <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   db5a4:	9101      	str	r1, [sp, #4]
   db5a6:	f001 f84a 	bl	dc63e <strlen>
   db5aa:	9901      	ldr	r1, [sp, #4]
   db5ac:	4602      	mov	r2, r0
   db5ae:	4620      	mov	r0, r4
}
   db5b0:	b002      	add	sp, #8
   db5b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   db5b6:	f7ff bfda 	b.w	db56e <_ZN6String6concatEPKcj>
}
   db5ba:	b002      	add	sp, #8
   db5bc:	bd10      	pop	{r4, pc}

000db5be <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   db5be:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   db5c0:	688a      	ldr	r2, [r1, #8]
   db5c2:	6809      	ldr	r1, [r1, #0]
{
   db5c4:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   db5c6:	f7ff ffd2 	bl	db56e <_ZN6String6concatEPKcj>
   db5ca:	b910      	cbnz	r0, db5d2 <_ZplRK15StringSumHelperRK6String+0x14>
   db5cc:	4620      	mov	r0, r4
   db5ce:	f7ff ff1a 	bl	db406 <_ZN6String10invalidateEv>
	return a;
}
   db5d2:	4620      	mov	r0, r4
   db5d4:	bd10      	pop	{r4, pc}

000db5d6 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   db5d6:	b513      	push	{r0, r1, r4, lr}
   db5d8:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   db5da:	b929      	cbnz	r1, db5e8 <_ZplRK15StringSumHelperPKc+0x12>
   db5dc:	4620      	mov	r0, r4
   db5de:	f7ff ff12 	bl	db406 <_ZN6String10invalidateEv>
	return a;
}
   db5e2:	4620      	mov	r0, r4
   db5e4:	b002      	add	sp, #8
   db5e6:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   db5e8:	4608      	mov	r0, r1
   db5ea:	9101      	str	r1, [sp, #4]
   db5ec:	f001 f827 	bl	dc63e <strlen>
   db5f0:	9901      	ldr	r1, [sp, #4]
   db5f2:	4602      	mov	r2, r0
   db5f4:	4620      	mov	r0, r4
   db5f6:	f7ff ffba 	bl	db56e <_ZN6String6concatEPKcj>
   db5fa:	2800      	cmp	r0, #0
   db5fc:	d0ee      	beq.n	db5dc <_ZplRK15StringSumHelperPKc+0x6>
   db5fe:	e7f0      	b.n	db5e2 <_ZplRK15StringSumHelperPKc+0xc>

000db600 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   db600:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   db602:	6882      	ldr	r2, [r0, #8]
   db604:	b93a      	cbnz	r2, db616 <_ZNK6String6equalsEPKc+0x16>
   db606:	b121      	cbz	r1, db612 <_ZNK6String6equalsEPKc+0x12>
   db608:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   db60a:	fab0 f080 	clz	r0, r0
   db60e:	0940      	lsrs	r0, r0, #5
   db610:	e000      	b.n	db614 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   db612:	2001      	movs	r0, #1
}
   db614:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   db616:	6800      	ldr	r0, [r0, #0]
   db618:	b909      	cbnz	r1, db61e <_ZNK6String6equalsEPKc+0x1e>
   db61a:	7800      	ldrb	r0, [r0, #0]
   db61c:	e7f5      	b.n	db60a <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   db61e:	f000 ffde 	bl	dc5de <strcmp>
   db622:	e7f2      	b.n	db60a <_ZNK6String6equalsEPKc+0xa>

000db624 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   db624:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   db626:	6883      	ldr	r3, [r0, #8]
   db628:	688a      	ldr	r2, [r1, #8]
   db62a:	4293      	cmp	r3, r2
   db62c:	d30b      	bcc.n	db646 <_ZNK6String8endsWithERKS_+0x22>
   db62e:	6800      	ldr	r0, [r0, #0]
   db630:	b140      	cbz	r0, db644 <_ZNK6String8endsWithERKS_+0x20>
   db632:	6809      	ldr	r1, [r1, #0]
   db634:	b149      	cbz	r1, db64a <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   db636:	1a9b      	subs	r3, r3, r2
   db638:	4418      	add	r0, r3
   db63a:	f000 ffd0 	bl	dc5de <strcmp>
   db63e:	fab0 f080 	clz	r0, r0
   db642:	0940      	lsrs	r0, r0, #5
}
   db644:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   db646:	2000      	movs	r0, #0
   db648:	e7fc      	b.n	db644 <_ZNK6String8endsWithERKS_+0x20>
   db64a:	4608      	mov	r0, r1
   db64c:	e7fa      	b.n	db644 <_ZNK6String8endsWithERKS_+0x20>
	...

000db650 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   db650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   db652:	429a      	cmp	r2, r3
{
   db654:	460f      	mov	r7, r1
   db656:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   db658:	490c      	ldr	r1, [pc, #48]	; (db68c <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   db65a:	bf88      	it	hi
   db65c:	4613      	movhi	r3, r2
{
   db65e:	4614      	mov	r4, r2
   db660:	4606      	mov	r6, r0
	if (left > right) {
   db662:	bf84      	itt	hi
   db664:	462c      	movhi	r4, r5
   db666:	461d      	movhi	r5, r3
	String out;
   db668:	f7ff ff11 	bl	db48e <_ZN6StringC1EPKc>
	if (left > len) return out;
   db66c:	68ba      	ldr	r2, [r7, #8]
   db66e:	42a2      	cmp	r2, r4
   db670:	d30a      	bcc.n	db688 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   db672:	6839      	ldr	r1, [r7, #0]
   db674:	42aa      	cmp	r2, r5
   db676:	bf94      	ite	ls
   db678:	ebc4 0202 	rsbls	r2, r4, r2
   db67c:	ebc4 0205 	rsbhi	r2, r4, r5
   db680:	4421      	add	r1, r4
   db682:	4630      	mov	r0, r6
   db684:	f7ff feea 	bl	db45c <_ZN6String4copyEPKcj>
	return out;
}
   db688:	4630      	mov	r0, r6
   db68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   db68c:	000dd568 	.word	0x000dd568

000db690 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   db690:	b40e      	push	{r1, r2, r3}
   db692:	b570      	push	{r4, r5, r6, lr}
   db694:	b087      	sub	sp, #28
   db696:	ad0b      	add	r5, sp, #44	; 0x2c
   db698:	4604      	mov	r4, r0
   db69a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   db69e:	9201      	str	r2, [sp, #4]
   db6a0:	462b      	mov	r3, r5
   db6a2:	2105      	movs	r1, #5
   db6a4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   db6a6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   db6a8:	f7fd fe86 	bl	d93b8 <vsnprintf>
    va_end(marker);

    String result;
   db6ac:	490b      	ldr	r1, [pc, #44]	; (db6dc <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   db6ae:	4606      	mov	r6, r0
    String result;
   db6b0:	4620      	mov	r0, r4
   db6b2:	f7ff feec 	bl	db48e <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   db6b6:	4631      	mov	r1, r6
   db6b8:	4620      	mov	r0, r4
   db6ba:	f7ff febb 	bl	db434 <_ZN6String7reserveEj>
    if (result.buffer) {
   db6be:	6820      	ldr	r0, [r4, #0]
   db6c0:	b130      	cbz	r0, db6d0 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   db6c2:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   db6c4:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   db6c6:	462b      	mov	r3, r5
   db6c8:	1c71      	adds	r1, r6, #1
   db6ca:	f7fd fe75 	bl	d93b8 <vsnprintf>
        va_end(marker);
        result.len = n;
   db6ce:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   db6d0:	4620      	mov	r0, r4
   db6d2:	b007      	add	sp, #28
   db6d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   db6d8:	b003      	add	sp, #12
   db6da:	4770      	bx	lr
   db6dc:	000dd568 	.word	0x000dd568

000db6e0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   db6e0:	4b05      	ldr	r3, [pc, #20]	; (db6f8 <_GLOBAL__sub_I_System+0x18>)
   db6e2:	2202      	movs	r2, #2
   db6e4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   db6e6:	4b05      	ldr	r3, [pc, #20]	; (db6fc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   db6e8:	4a05      	ldr	r2, [pc, #20]	; (db700 <_GLOBAL__sub_I_System+0x20>)
   db6ea:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   db6ec:	2000      	movs	r0, #0
   db6ee:	6018      	str	r0, [r3, #0]
   db6f0:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   db6f2:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   db6f4:	f7fd bd2c 	b.w	d9150 <set_system_mode>
   db6f8:	2003e5ec 	.word	0x2003e5ec
   db6fc:	2003e5e0 	.word	0x2003e5e0
   db700:	ffff0000 	.word	0xffff0000

000db704 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   db704:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   db706:	2000      	movs	r0, #0
   db708:	f7fd fda6 	bl	d9258 <spark_sync_time_pending>
   db70c:	b128      	cbz	r0, db71a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   db70e:	f7fd fd8b 	bl	d9228 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   db712:	f080 0001 	eor.w	r0, r0, #1
   db716:	b2c0      	uxtb	r0, r0
    }
   db718:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   db71a:	2001      	movs	r0, #1
   db71c:	e7fc      	b.n	db718 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000db71e <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   db71e:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   db720:	2000      	movs	r0, #0
   db722:	f7fd fb13 	bl	d8d4c <hal_rtc_time_is_valid>
    if (rtcstate)
   db726:	4604      	mov	r4, r0
   db728:	b9a0      	cbnz	r0, db754 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   db72a:	f7fd fd09 	bl	d9140 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   db72e:	2801      	cmp	r0, #1
   db730:	d110      	bne.n	db754 <_ZN9TimeClass7isValidEv+0x36>
   db732:	4620      	mov	r0, r4
   db734:	f7fd fd3c 	bl	d91b0 <system_thread_get_state>
   db738:	b960      	cbnz	r0, db754 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   db73a:	f7ff ffe3 	bl	db704 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   db73e:	b910      	cbnz	r0, db746 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   db740:	f7fd fd62 	bl	d9208 <spark_process>
        while (_while() && !_condition()) {
   db744:	e7f9      	b.n	db73a <_ZN9TimeClass7isValidEv+0x1c>
   db746:	f7ff ffdd 	bl	db704 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   db74a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   db74e:	2000      	movs	r0, #0
   db750:	f7fd bafc 	b.w	d8d4c <hal_rtc_time_is_valid>
}
   db754:	4620      	mov	r0, r4
   db756:	bd10      	pop	{r4, pc}

000db758 <_ZN9TimeClass3nowEv>:
{
   db758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   db75a:	f7ff ffe0 	bl	db71e <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   db75e:	2210      	movs	r2, #16
   db760:	2100      	movs	r1, #0
   db762:	4668      	mov	r0, sp
   db764:	f000 fec4 	bl	dc4f0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   db768:	2100      	movs	r1, #0
   db76a:	4668      	mov	r0, sp
   db76c:	f7fd fafe 	bl	d8d6c <hal_rtc_get_time>
}
   db770:	9800      	ldr	r0, [sp, #0]
   db772:	b005      	add	sp, #20
   db774:	f85d fb04 	ldr.w	pc, [sp], #4

000db778 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   db778:	4b02      	ldr	r3, [pc, #8]	; (db784 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   db77a:	681a      	ldr	r2, [r3, #0]
   db77c:	4b02      	ldr	r3, [pc, #8]	; (db788 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   db77e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   db780:	4770      	bx	lr
   db782:	bf00      	nop
   db784:	2003dda8 	.word	0x2003dda8
   db788:	2003e5f0 	.word	0x2003e5f0

000db78c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   db78c:	4770      	bx	lr

000db78e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db78e:	7441      	strb	r1, [r0, #17]
}
   db790:	4770      	bx	lr

000db792 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   db792:	4770      	bx	lr

000db794 <_ZN11USARTSerial17availableForWriteEv>:
{
   db794:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   db796:	7c00      	ldrb	r0, [r0, #16]
   db798:	f7fd fc58 	bl	d904c <hal_usart_available_data_for_write>
}
   db79c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db7a0:	bd08      	pop	{r3, pc}

000db7a2 <_ZN11USARTSerial9availableEv>:
{
   db7a2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   db7a4:	7c00      	ldrb	r0, [r0, #16]
   db7a6:	f7fd fc29 	bl	d8ffc <hal_usart_available>
}
   db7aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db7ae:	bd08      	pop	{r3, pc}

000db7b0 <_ZN11USARTSerial4peekEv>:
{
   db7b0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   db7b2:	7c00      	ldrb	r0, [r0, #16]
   db7b4:	f7fd fc32 	bl	d901c <hal_usart_peek>
}
   db7b8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db7bc:	bd08      	pop	{r3, pc}

000db7be <_ZN11USARTSerial4readEv>:
{
   db7be:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   db7c0:	7c00      	ldrb	r0, [r0, #16]
   db7c2:	f7fd fc23 	bl	d900c <hal_usart_read>
}
   db7c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db7ca:	bd08      	pop	{r3, pc}

000db7cc <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   db7cc:	7c00      	ldrb	r0, [r0, #16]
   db7ce:	f7fd bc2d 	b.w	d902c <hal_usart_flush>

000db7d2 <_ZN11USARTSerial5writeEh>:
{
   db7d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db7d4:	7c45      	ldrb	r5, [r0, #17]
{
   db7d6:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db7d8:	b12d      	cbz	r5, db7e6 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   db7da:	7c20      	ldrb	r0, [r4, #16]
}
   db7dc:	b003      	add	sp, #12
   db7de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   db7e2:	f7fd bc03 	b.w	d8fec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db7e6:	7c00      	ldrb	r0, [r0, #16]
   db7e8:	9101      	str	r1, [sp, #4]
   db7ea:	f7fd fc2f 	bl	d904c <hal_usart_available_data_for_write>
   db7ee:	2800      	cmp	r0, #0
   db7f0:	9901      	ldr	r1, [sp, #4]
   db7f2:	dcf2      	bgt.n	db7da <_ZN11USARTSerial5writeEh+0x8>
}
   db7f4:	4628      	mov	r0, r5
   db7f6:	b003      	add	sp, #12
   db7f8:	bd30      	pop	{r4, r5, pc}

000db7fa <_ZN11USARTSerialD0Ev>:
   db7fa:	b510      	push	{r4, lr}
   db7fc:	2114      	movs	r1, #20
   db7fe:	4604      	mov	r4, r0
   db800:	f000 fa24 	bl	dbc4c <_ZdlPvj>
   db804:	4620      	mov	r0, r4
   db806:	bd10      	pop	{r4, pc}

000db808 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   db808:	b510      	push	{r4, lr}
   db80a:	f04f 0c00 	mov.w	ip, #0
   db80e:	4604      	mov	r4, r0
   db810:	4608      	mov	r0, r1
   db812:	4611      	mov	r1, r2
   db814:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db818:	e9c4 c201 	strd	ip, r2, [r4, #4]
   db81c:	4a04      	ldr	r2, [pc, #16]	; (db830 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   db81e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   db820:	2201      	movs	r2, #1
  _serial = serial;
   db822:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db824:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   db826:	461a      	mov	r2, r3
   db828:	f7fd fbd0 	bl	d8fcc <hal_usart_init>
}
   db82c:	4620      	mov	r0, r4
   db82e:	bd10      	pop	{r4, pc}
   db830:	000dd660 	.word	0x000dd660

000db834 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   db834:	7c00      	ldrb	r0, [r0, #16]
   db836:	2300      	movs	r3, #0
   db838:	f7fd bc10 	b.w	d905c <hal_usart_begin_config>

000db83c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   db83c:	2200      	movs	r2, #0
   db83e:	f7ff bff9 	b.w	db834 <_ZN11USARTSerial5beginEmm>

000db842 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   db842:	7c00      	ldrb	r0, [r0, #16]
   db844:	f7fd bbca 	b.w	d8fdc <hal_usart_end>

000db848 <_Z22__fetch_global_Serial1v>:
{
   db848:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   db84a:	4c0d      	ldr	r4, [pc, #52]	; (db880 <_Z22__fetch_global_Serial1v+0x38>)
   db84c:	7821      	ldrb	r1, [r4, #0]
   db84e:	f3bf 8f5b 	dmb	ish
   db852:	f011 0101 	ands.w	r1, r1, #1
   db856:	d110      	bne.n	db87a <_Z22__fetch_global_Serial1v+0x32>
   db858:	4620      	mov	r0, r4
   db85a:	9101      	str	r1, [sp, #4]
   db85c:	f7f8 fc2c 	bl	d40b8 <__cxa_guard_acquire>
   db860:	9901      	ldr	r1, [sp, #4]
   db862:	b150      	cbz	r0, db87a <_Z22__fetch_global_Serial1v+0x32>
   db864:	4b07      	ldr	r3, [pc, #28]	; (db884 <_Z22__fetch_global_Serial1v+0x3c>)
   db866:	4a08      	ldr	r2, [pc, #32]	; (db888 <_Z22__fetch_global_Serial1v+0x40>)
   db868:	4808      	ldr	r0, [pc, #32]	; (db88c <_Z22__fetch_global_Serial1v+0x44>)
   db86a:	f7ff ffcd 	bl	db808 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   db86e:	4620      	mov	r0, r4
   db870:	f7f8 fc27 	bl	d40c2 <__cxa_guard_release>
   db874:	4806      	ldr	r0, [pc, #24]	; (db890 <_Z22__fetch_global_Serial1v+0x48>)
   db876:	f000 fe0d 	bl	dc494 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   db87a:	4804      	ldr	r0, [pc, #16]	; (db88c <_Z22__fetch_global_Serial1v+0x44>)
   db87c:	b002      	add	sp, #8
   db87e:	bd10      	pop	{r4, pc}
   db880:	2003e5f4 	.word	0x2003e5f4
   db884:	2003e67c 	.word	0x2003e67c
   db888:	2003e5f8 	.word	0x2003e5f8
   db88c:	2003e700 	.word	0x2003e700
   db890:	000db793 	.word	0x000db793

000db894 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db894:	7441      	strb	r1, [r0, #17]
}
   db896:	4770      	bx	lr

000db898 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db898:	4770      	bx	lr

000db89a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   db89a:	4770      	bx	lr

000db89c <_ZN9USBSerial4readEv>:
{
   db89c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   db89e:	2100      	movs	r1, #0
   db8a0:	7c00      	ldrb	r0, [r0, #16]
   db8a2:	f7fd fc0b 	bl	d90bc <HAL_USB_USART_Receive_Data>
}
   db8a6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db8aa:	bd08      	pop	{r3, pc}

000db8ac <_ZN9USBSerial4peekEv>:
{
   db8ac:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   db8ae:	2101      	movs	r1, #1
   db8b0:	7c00      	ldrb	r0, [r0, #16]
   db8b2:	f7fd fc03 	bl	d90bc <HAL_USB_USART_Receive_Data>
}
   db8b6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db8ba:	bd08      	pop	{r3, pc}

000db8bc <_ZN9USBSerial17availableForWriteEv>:
{
   db8bc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   db8be:	7c00      	ldrb	r0, [r0, #16]
   db8c0:	f7fd fbf4 	bl	d90ac <HAL_USB_USART_Available_Data_For_Write>
}
   db8c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db8c8:	bd08      	pop	{r3, pc}

000db8ca <_ZN9USBSerial9availableEv>:
{
   db8ca:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   db8cc:	7c00      	ldrb	r0, [r0, #16]
   db8ce:	f7fd fbe5 	bl	d909c <HAL_USB_USART_Available_Data>
}
   db8d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db8d6:	bd08      	pop	{r3, pc}

000db8d8 <_ZN9USBSerial5writeEh>:
{
   db8d8:	b513      	push	{r0, r1, r4, lr}
   db8da:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db8dc:	7c00      	ldrb	r0, [r0, #16]
{
   db8de:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db8e0:	f7fd fbe4 	bl	d90ac <HAL_USB_USART_Available_Data_For_Write>
   db8e4:	2800      	cmp	r0, #0
   db8e6:	9901      	ldr	r1, [sp, #4]
   db8e8:	dc01      	bgt.n	db8ee <_ZN9USBSerial5writeEh+0x16>
   db8ea:	7c60      	ldrb	r0, [r4, #17]
   db8ec:	b120      	cbz	r0, db8f8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   db8ee:	7c20      	ldrb	r0, [r4, #16]
   db8f0:	f7fd fbec 	bl	d90cc <HAL_USB_USART_Send_Data>
   db8f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   db8f8:	b002      	add	sp, #8
   db8fa:	bd10      	pop	{r4, pc}

000db8fc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   db8fc:	7c00      	ldrb	r0, [r0, #16]
   db8fe:	f7fd bbed 	b.w	d90dc <HAL_USB_USART_Flush_Data>

000db902 <_ZN9USBSerialD0Ev>:
   db902:	b510      	push	{r4, lr}
   db904:	2114      	movs	r1, #20
   db906:	4604      	mov	r4, r0
   db908:	f000 f9a0 	bl	dbc4c <_ZdlPvj>
   db90c:	4620      	mov	r0, r4
   db90e:	bd10      	pop	{r4, pc}

000db910 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db910:	b510      	push	{r4, lr}
   db912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db916:	4604      	mov	r4, r0
   db918:	4608      	mov	r0, r1
   db91a:	2100      	movs	r1, #0
   db91c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   db920:	4b04      	ldr	r3, [pc, #16]	; (db934 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   db922:	6023      	str	r3, [r4, #0]
  _blocking = true;
   db924:	2301      	movs	r3, #1
  _serial = serial;
   db926:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db928:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   db92a:	4611      	mov	r1, r2
   db92c:	f7fd fb9e 	bl	d906c <HAL_USB_USART_Init>
}
   db930:	4620      	mov	r0, r4
   db932:	bd10      	pop	{r4, pc}
   db934:	000dd690 	.word	0x000dd690

000db938 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   db938:	7c00      	ldrb	r0, [r0, #16]
   db93a:	2200      	movs	r2, #0
   db93c:	f7fd bb9e 	b.w	d907c <HAL_USB_USART_Begin>

000db940 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   db940:	7c00      	ldrb	r0, [r0, #16]
   db942:	f7fd bba3 	b.w	d908c <HAL_USB_USART_End>

000db946 <_Z19acquireSerialBufferv>:
{
   db946:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   db948:	2214      	movs	r2, #20
{
   db94a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   db94c:	2100      	movs	r1, #0
   db94e:	f000 fdcf 	bl	dc4f0 <memset>
}
   db952:	4620      	mov	r0, r4
   db954:	bd10      	pop	{r4, pc}
	...

000db958 <_Z16_fetch_usbserialv>:
{
   db958:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db95a:	4c0f      	ldr	r4, [pc, #60]	; (db998 <_Z16_fetch_usbserialv+0x40>)
{
   db95c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   db95e:	a803      	add	r0, sp, #12
   db960:	f7ff fff1 	bl	db946 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db964:	7821      	ldrb	r1, [r4, #0]
   db966:	f3bf 8f5b 	dmb	ish
   db96a:	f011 0101 	ands.w	r1, r1, #1
   db96e:	d10f      	bne.n	db990 <_Z16_fetch_usbserialv+0x38>
   db970:	4620      	mov	r0, r4
   db972:	9101      	str	r1, [sp, #4]
   db974:	f7f8 fba0 	bl	d40b8 <__cxa_guard_acquire>
   db978:	9901      	ldr	r1, [sp, #4]
   db97a:	b148      	cbz	r0, db990 <_Z16_fetch_usbserialv+0x38>
   db97c:	aa03      	add	r2, sp, #12
   db97e:	4807      	ldr	r0, [pc, #28]	; (db99c <_Z16_fetch_usbserialv+0x44>)
   db980:	f7ff ffc6 	bl	db910 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   db984:	4620      	mov	r0, r4
   db986:	f7f8 fb9c 	bl	d40c2 <__cxa_guard_release>
   db98a:	4805      	ldr	r0, [pc, #20]	; (db9a0 <_Z16_fetch_usbserialv+0x48>)
   db98c:	f000 fd82 	bl	dc494 <atexit>
	return _usbserial;
}
   db990:	4802      	ldr	r0, [pc, #8]	; (db99c <_Z16_fetch_usbserialv+0x44>)
   db992:	b008      	add	sp, #32
   db994:	bd10      	pop	{r4, pc}
   db996:	bf00      	nop
   db998:	2003e714 	.word	0x2003e714
   db99c:	2003e718 	.word	0x2003e718
   db9a0:	000db899 	.word	0x000db899

000db9a4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   db9a4:	4b01      	ldr	r3, [pc, #4]	; (db9ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   db9a6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   db9a8:	4770      	bx	lr
   db9aa:	bf00      	nop
   db9ac:	2003ddb0 	.word	0x2003ddb0

000db9b0 <serialEventRun>:
{
   db9b0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   db9b2:	4b0b      	ldr	r3, [pc, #44]	; (db9e0 <serialEventRun+0x30>)
   db9b4:	b143      	cbz	r3, db9c8 <serialEventRun+0x18>
   db9b6:	f7ff ffcf 	bl	db958 <_Z16_fetch_usbserialv>
   db9ba:	6803      	ldr	r3, [r0, #0]
   db9bc:	691b      	ldr	r3, [r3, #16]
   db9be:	4798      	blx	r3
   db9c0:	2800      	cmp	r0, #0
   db9c2:	dd01      	ble.n	db9c8 <serialEventRun+0x18>
        serialEvent();
   db9c4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   db9c8:	4b06      	ldr	r3, [pc, #24]	; (db9e4 <serialEventRun+0x34>)
   db9ca:	b143      	cbz	r3, db9de <serialEventRun+0x2e>
   db9cc:	f7ff ff3c 	bl	db848 <_Z22__fetch_global_Serial1v>
   db9d0:	6803      	ldr	r3, [r0, #0]
   db9d2:	691b      	ldr	r3, [r3, #16]
   db9d4:	4798      	blx	r3
   db9d6:	2800      	cmp	r0, #0
   db9d8:	dd01      	ble.n	db9de <serialEventRun+0x2e>
        serialEvent1();
   db9da:	f3af 8000 	nop.w
}
   db9de:	bd08      	pop	{r3, pc}
	...

000db9e8 <_post_loop>:
{
   db9e8:	b508      	push	{r3, lr}
	serialEventRun();
   db9ea:	f7ff ffe1 	bl	db9b0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   db9ee:	f7fd f9a5 	bl	d8d3c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   db9f2:	4b01      	ldr	r3, [pc, #4]	; (db9f8 <_post_loop+0x10>)
   db9f4:	6018      	str	r0, [r3, #0]
}
   db9f6:	bd08      	pop	{r3, pc}
   db9f8:	2003e734 	.word	0x2003e734

000db9fc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   db9fc:	4805      	ldr	r0, [pc, #20]	; (dba14 <_Z33system_initialize_user_backup_ramv+0x18>)
   db9fe:	4a06      	ldr	r2, [pc, #24]	; (dba18 <_Z33system_initialize_user_backup_ramv+0x1c>)
   dba00:	4906      	ldr	r1, [pc, #24]	; (dba1c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   dba02:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dba04:	1a12      	subs	r2, r2, r0
   dba06:	f000 fd4b 	bl	dc4a0 <memcpy>
    __backup_sram_signature = signature;
   dba0a:	4b05      	ldr	r3, [pc, #20]	; (dba20 <_Z33system_initialize_user_backup_ramv+0x24>)
   dba0c:	4a05      	ldr	r2, [pc, #20]	; (dba24 <_Z33system_initialize_user_backup_ramv+0x28>)
   dba0e:	601a      	str	r2, [r3, #0]
}
   dba10:	bd08      	pop	{r3, pc}
   dba12:	bf00      	nop
   dba14:	2003f400 	.word	0x2003f400
   dba18:	2003f404 	.word	0x2003f404
   dba1c:	000dd850 	.word	0x000dd850
   dba20:	2003f400 	.word	0x2003f400
   dba24:	9a271c1e 	.word	0x9a271c1e

000dba28 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dba28:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dba2a:	2300      	movs	r3, #0
   dba2c:	9300      	str	r3, [sp, #0]
   dba2e:	461a      	mov	r2, r3
   dba30:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dba34:	f7fd fbce 	bl	d91d4 <system_ctrl_set_result>
}
   dba38:	b003      	add	sp, #12
   dba3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dba40 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   dba40:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dba42:	8843      	ldrh	r3, [r0, #2]
   dba44:	2b0a      	cmp	r3, #10
   dba46:	d008      	beq.n	dba5a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   dba48:	2b50      	cmp	r3, #80	; 0x50
   dba4a:	d10b      	bne.n	dba64 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   dba4c:	4b09      	ldr	r3, [pc, #36]	; (dba74 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dba4e:	681b      	ldr	r3, [r3, #0]
   dba50:	b14b      	cbz	r3, dba66 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   dba52:	b003      	add	sp, #12
   dba54:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   dba58:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   dba5a:	f7ff ffe5 	bl	dba28 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   dba5e:	b003      	add	sp, #12
   dba60:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dba64:	2300      	movs	r3, #0
   dba66:	9300      	str	r3, [sp, #0]
   dba68:	461a      	mov	r2, r3
   dba6a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dba6e:	f7fd fbb1 	bl	d91d4 <system_ctrl_set_result>
}
   dba72:	e7f4      	b.n	dba5e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   dba74:	2003e730 	.word	0x2003e730

000dba78 <module_user_init_hook>:
{
   dba78:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   dba7a:	4812      	ldr	r0, [pc, #72]	; (dbac4 <module_user_init_hook+0x4c>)
   dba7c:	2100      	movs	r1, #0
   dba7e:	f7fd fcbb 	bl	d93f8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   dba82:	4b11      	ldr	r3, [pc, #68]	; (dbac8 <module_user_init_hook+0x50>)
   dba84:	681a      	ldr	r2, [r3, #0]
   dba86:	4b11      	ldr	r3, [pc, #68]	; (dbacc <module_user_init_hook+0x54>)
   dba88:	429a      	cmp	r2, r3
   dba8a:	4b11      	ldr	r3, [pc, #68]	; (dbad0 <module_user_init_hook+0x58>)
   dba8c:	bf0c      	ite	eq
   dba8e:	2201      	moveq	r2, #1
   dba90:	2200      	movne	r2, #0
   dba92:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   dba94:	d001      	beq.n	dba9a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   dba96:	f7ff ffb1 	bl	db9fc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   dba9a:	f7fd f937 	bl	d8d0c <HAL_RNG_GetRandomNumber>
   dba9e:	4604      	mov	r4, r0
    srand(seed);
   dbaa0:	f000 fd2e 	bl	dc500 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   dbaa4:	4b0b      	ldr	r3, [pc, #44]	; (dbad4 <module_user_init_hook+0x5c>)
   dbaa6:	b113      	cbz	r3, dbaae <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   dbaa8:	4620      	mov	r0, r4
   dbaaa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   dbaae:	2100      	movs	r1, #0
   dbab0:	4808      	ldr	r0, [pc, #32]	; (dbad4 <module_user_init_hook+0x5c>)
   dbab2:	f7fd fbe1 	bl	d9278 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   dbab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dbaba:	4807      	ldr	r0, [pc, #28]	; (dbad8 <module_user_init_hook+0x60>)
   dbabc:	2100      	movs	r1, #0
   dbabe:	f7fd bb7f 	b.w	d91c0 <system_ctrl_set_app_request_handler>
   dbac2:	bf00      	nop
   dbac4:	000db9a5 	.word	0x000db9a5
   dbac8:	2003f400 	.word	0x2003f400
   dbacc:	9a271c1e 	.word	0x9a271c1e
   dbad0:	2003e72c 	.word	0x2003e72c
   dbad4:	00000000 	.word	0x00000000
   dbad8:	000dba41 	.word	0x000dba41

000dbadc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   dbadc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   dbade:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   dbae0:	d902      	bls.n	dbae8 <pinAvailable+0xc>
    return false;
   dbae2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   dbae4:	b002      	add	sp, #8
   dbae6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   dbae8:	f1a0 030b 	sub.w	r3, r0, #11
   dbaec:	2b02      	cmp	r3, #2
   dbaee:	d81a      	bhi.n	dbb26 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   dbaf0:	4c17      	ldr	r4, [pc, #92]	; (dbb50 <pinAvailable+0x74>)
   dbaf2:	7821      	ldrb	r1, [r4, #0]
   dbaf4:	f3bf 8f5b 	dmb	ish
   dbaf8:	f011 0101 	ands.w	r1, r1, #1
   dbafc:	d10b      	bne.n	dbb16 <pinAvailable+0x3a>
   dbafe:	4620      	mov	r0, r4
   dbb00:	9101      	str	r1, [sp, #4]
   dbb02:	f7f8 fad9 	bl	d40b8 <__cxa_guard_acquire>
   dbb06:	9901      	ldr	r1, [sp, #4]
   dbb08:	b128      	cbz	r0, dbb16 <pinAvailable+0x3a>
   dbb0a:	4812      	ldr	r0, [pc, #72]	; (dbb54 <pinAvailable+0x78>)
   dbb0c:	f7ff fbba 	bl	db284 <_ZN8SPIClassC1E19hal_spi_interface_t>
   dbb10:	4620      	mov	r0, r4
   dbb12:	f7f8 fad6 	bl	d40c2 <__cxa_guard_release>
   dbb16:	4b0f      	ldr	r3, [pc, #60]	; (dbb54 <pinAvailable+0x78>)
   dbb18:	7818      	ldrb	r0, [r3, #0]
   dbb1a:	f7fd f9cf 	bl	d8ebc <hal_spi_is_enabled>
   dbb1e:	2800      	cmp	r0, #0
   dbb20:	d1df      	bne.n	dbae2 <pinAvailable+0x6>
  return true; // 'pin' is available
   dbb22:	2001      	movs	r0, #1
   dbb24:	e7de      	b.n	dbae4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   dbb26:	2801      	cmp	r0, #1
   dbb28:	d809      	bhi.n	dbb3e <pinAvailable+0x62>
   dbb2a:	f000 f86b 	bl	dbc04 <_Z19__fetch_global_Wirev>
   dbb2e:	2100      	movs	r1, #0
   dbb30:	7c00      	ldrb	r0, [r0, #16]
   dbb32:	f7fd f97b 	bl	d8e2c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   dbb36:	f080 0001 	eor.w	r0, r0, #1
   dbb3a:	b2c0      	uxtb	r0, r0
   dbb3c:	e7d2      	b.n	dbae4 <pinAvailable+0x8>
   dbb3e:	3809      	subs	r0, #9
   dbb40:	2801      	cmp	r0, #1
   dbb42:	d8ee      	bhi.n	dbb22 <pinAvailable+0x46>
   dbb44:	f7ff fe80 	bl	db848 <_Z22__fetch_global_Serial1v>
   dbb48:	7c00      	ldrb	r0, [r0, #16]
   dbb4a:	f7fd fa77 	bl	d903c <hal_usart_is_enabled>
   dbb4e:	e7f2      	b.n	dbb36 <pinAvailable+0x5a>
   dbb50:	2003e320 	.word	0x2003e320
   dbb54:	2003e324 	.word	0x2003e324

000dbb58 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dbb58:	2823      	cmp	r0, #35	; 0x23
{
   dbb5a:	b538      	push	{r3, r4, r5, lr}
   dbb5c:	4604      	mov	r4, r0
   dbb5e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dbb60:	d80a      	bhi.n	dbb78 <pinMode+0x20>
   dbb62:	29ff      	cmp	r1, #255	; 0xff
   dbb64:	d008      	beq.n	dbb78 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   dbb66:	f7ff ffb9 	bl	dbadc <pinAvailable>
   dbb6a:	b128      	cbz	r0, dbb78 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   dbb6c:	4629      	mov	r1, r5
   dbb6e:	4620      	mov	r0, r4
}
   dbb70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   dbb74:	f7fd b902 	b.w	d8d7c <HAL_Pin_Mode>
}
   dbb78:	bd38      	pop	{r3, r4, r5, pc}

000dbb7a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dbb7a:	b538      	push	{r3, r4, r5, lr}
   dbb7c:	4604      	mov	r4, r0
   dbb7e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dbb80:	f7fd f904 	bl	d8d8c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dbb84:	28ff      	cmp	r0, #255	; 0xff
   dbb86:	d010      	beq.n	dbbaa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   dbb88:	2806      	cmp	r0, #6
   dbb8a:	d804      	bhi.n	dbb96 <digitalWrite+0x1c>
   dbb8c:	234d      	movs	r3, #77	; 0x4d
   dbb8e:	fa23 f000 	lsr.w	r0, r3, r0
   dbb92:	07c3      	lsls	r3, r0, #31
   dbb94:	d409      	bmi.n	dbbaa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   dbb96:	4620      	mov	r0, r4
   dbb98:	f7ff ffa0 	bl	dbadc <pinAvailable>
   dbb9c:	b128      	cbz	r0, dbbaa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   dbb9e:	4629      	mov	r1, r5
   dbba0:	4620      	mov	r0, r4
}
   dbba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   dbba6:	f7fd b8f9 	b.w	d8d9c <HAL_GPIO_Write>
}
   dbbaa:	bd38      	pop	{r3, r4, r5, pc}

000dbbac <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   dbbac:	b510      	push	{r4, lr}
   dbbae:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dbbb0:	f7fd f8ec 	bl	d8d8c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   dbbb4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   dbbb6:	b2db      	uxtb	r3, r3
   dbbb8:	2b01      	cmp	r3, #1
   dbbba:	d908      	bls.n	dbbce <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   dbbbc:	4620      	mov	r0, r4
   dbbbe:	f7ff ff8d 	bl	dbadc <pinAvailable>
   dbbc2:	b120      	cbz	r0, dbbce <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dbbc4:	4620      	mov	r0, r4
}
   dbbc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   dbbca:	f7fd b8ef 	b.w	d8dac <HAL_GPIO_Read>
}
   dbbce:	2000      	movs	r0, #0
   dbbd0:	bd10      	pop	{r4, pc}

000dbbd2 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dbbd2:	4770      	bx	lr

000dbbd4 <_Z17acquireWireBufferv>:
{
   dbbd4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   dbbd6:	2300      	movs	r3, #0
   dbbd8:	2520      	movs	r5, #32
   dbbda:	8043      	strh	r3, [r0, #2]
   dbbdc:	2314      	movs	r3, #20
{
   dbbde:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   dbbe0:	8003      	strh	r3, [r0, #0]
   dbbe2:	6085      	str	r5, [r0, #8]
   dbbe4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dbbe6:	4906      	ldr	r1, [pc, #24]	; (dbc00 <_Z17acquireWireBufferv+0x2c>)
   dbbe8:	4628      	mov	r0, r5
   dbbea:	f000 f833 	bl	dbc54 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dbbee:	4904      	ldr	r1, [pc, #16]	; (dbc00 <_Z17acquireWireBufferv+0x2c>)
	};
   dbbf0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dbbf2:	4628      	mov	r0, r5
   dbbf4:	f000 f82e 	bl	dbc54 <_ZnajRKSt9nothrow_t>
	};
   dbbf8:	60e0      	str	r0, [r4, #12]
}
   dbbfa:	4620      	mov	r0, r4
   dbbfc:	bd38      	pop	{r3, r4, r5, pc}
   dbbfe:	bf00      	nop
   dbc00:	000dd6b8 	.word	0x000dd6b8

000dbc04 <_Z19__fetch_global_Wirev>:
{
   dbc04:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dbc06:	4d0e      	ldr	r5, [pc, #56]	; (dbc40 <_Z19__fetch_global_Wirev+0x3c>)
   dbc08:	7829      	ldrb	r1, [r5, #0]
   dbc0a:	f3bf 8f5b 	dmb	ish
   dbc0e:	f011 0401 	ands.w	r4, r1, #1
{
   dbc12:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dbc14:	d111      	bne.n	dbc3a <_Z19__fetch_global_Wirev+0x36>
   dbc16:	4628      	mov	r0, r5
   dbc18:	f7f8 fa4e 	bl	d40b8 <__cxa_guard_acquire>
   dbc1c:	b168      	cbz	r0, dbc3a <_Z19__fetch_global_Wirev+0x36>
   dbc1e:	a801      	add	r0, sp, #4
   dbc20:	f7ff ffd8 	bl	dbbd4 <_Z17acquireWireBufferv>
   dbc24:	aa01      	add	r2, sp, #4
   dbc26:	4621      	mov	r1, r4
   dbc28:	4806      	ldr	r0, [pc, #24]	; (dbc44 <_Z19__fetch_global_Wirev+0x40>)
   dbc2a:	f7fd ffbf 	bl	d9bac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dbc2e:	4628      	mov	r0, r5
   dbc30:	f7f8 fa47 	bl	d40c2 <__cxa_guard_release>
   dbc34:	4804      	ldr	r0, [pc, #16]	; (dbc48 <_Z19__fetch_global_Wirev+0x44>)
   dbc36:	f000 fc2d 	bl	dc494 <atexit>
	return wire;
}
   dbc3a:	4802      	ldr	r0, [pc, #8]	; (dbc44 <_Z19__fetch_global_Wirev+0x40>)
   dbc3c:	b007      	add	sp, #28
   dbc3e:	bd30      	pop	{r4, r5, pc}
   dbc40:	2003e738 	.word	0x2003e738
   dbc44:	2003e73c 	.word	0x2003e73c
   dbc48:	000dbbd3 	.word	0x000dbbd3

000dbc4c <_ZdlPvj>:
   dbc4c:	f7f8 ba27 	b.w	d409e <_ZdlPv>

000dbc50 <_ZnwjRKSt9nothrow_t>:
   dbc50:	f7f8 ba21 	b.w	d4096 <_Znwj>

000dbc54 <_ZnajRKSt9nothrow_t>:
   dbc54:	f7f8 ba21 	b.w	d409a <_Znaj>

000dbc58 <_ZSt17__throw_bad_allocv>:
   dbc58:	b508      	push	{r3, lr}
   dbc5a:	f7fd fbb5 	bl	d93c8 <abort>

000dbc5e <_ZSt20__throw_length_errorPKc>:
   dbc5e:	b508      	push	{r3, lr}
   dbc60:	f7fd fbb2 	bl	d93c8 <abort>

000dbc64 <_ZSt25__throw_bad_function_callv>:
   dbc64:	b508      	push	{r3, lr}
   dbc66:	f7fd fbaf 	bl	d93c8 <abort>
	...

000dbc6c <__aeabi_drsub>:
   dbc6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dbc70:	e002      	b.n	dbc78 <__adddf3>
   dbc72:	bf00      	nop

000dbc74 <__aeabi_dsub>:
   dbc74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dbc78 <__adddf3>:
   dbc78:	b530      	push	{r4, r5, lr}
   dbc7a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dbc7e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dbc82:	ea94 0f05 	teq	r4, r5
   dbc86:	bf08      	it	eq
   dbc88:	ea90 0f02 	teqeq	r0, r2
   dbc8c:	bf1f      	itttt	ne
   dbc8e:	ea54 0c00 	orrsne.w	ip, r4, r0
   dbc92:	ea55 0c02 	orrsne.w	ip, r5, r2
   dbc96:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dbc9a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dbc9e:	f000 80e2 	beq.w	dbe66 <__adddf3+0x1ee>
   dbca2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dbca6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dbcaa:	bfb8      	it	lt
   dbcac:	426d      	neglt	r5, r5
   dbcae:	dd0c      	ble.n	dbcca <__adddf3+0x52>
   dbcb0:	442c      	add	r4, r5
   dbcb2:	ea80 0202 	eor.w	r2, r0, r2
   dbcb6:	ea81 0303 	eor.w	r3, r1, r3
   dbcba:	ea82 0000 	eor.w	r0, r2, r0
   dbcbe:	ea83 0101 	eor.w	r1, r3, r1
   dbcc2:	ea80 0202 	eor.w	r2, r0, r2
   dbcc6:	ea81 0303 	eor.w	r3, r1, r3
   dbcca:	2d36      	cmp	r5, #54	; 0x36
   dbccc:	bf88      	it	hi
   dbcce:	bd30      	pophi	{r4, r5, pc}
   dbcd0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dbcd4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dbcd8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dbcdc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dbce0:	d002      	beq.n	dbce8 <__adddf3+0x70>
   dbce2:	4240      	negs	r0, r0
   dbce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dbce8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dbcec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dbcf0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dbcf4:	d002      	beq.n	dbcfc <__adddf3+0x84>
   dbcf6:	4252      	negs	r2, r2
   dbcf8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dbcfc:	ea94 0f05 	teq	r4, r5
   dbd00:	f000 80a7 	beq.w	dbe52 <__adddf3+0x1da>
   dbd04:	f1a4 0401 	sub.w	r4, r4, #1
   dbd08:	f1d5 0e20 	rsbs	lr, r5, #32
   dbd0c:	db0d      	blt.n	dbd2a <__adddf3+0xb2>
   dbd0e:	fa02 fc0e 	lsl.w	ip, r2, lr
   dbd12:	fa22 f205 	lsr.w	r2, r2, r5
   dbd16:	1880      	adds	r0, r0, r2
   dbd18:	f141 0100 	adc.w	r1, r1, #0
   dbd1c:	fa03 f20e 	lsl.w	r2, r3, lr
   dbd20:	1880      	adds	r0, r0, r2
   dbd22:	fa43 f305 	asr.w	r3, r3, r5
   dbd26:	4159      	adcs	r1, r3
   dbd28:	e00e      	b.n	dbd48 <__adddf3+0xd0>
   dbd2a:	f1a5 0520 	sub.w	r5, r5, #32
   dbd2e:	f10e 0e20 	add.w	lr, lr, #32
   dbd32:	2a01      	cmp	r2, #1
   dbd34:	fa03 fc0e 	lsl.w	ip, r3, lr
   dbd38:	bf28      	it	cs
   dbd3a:	f04c 0c02 	orrcs.w	ip, ip, #2
   dbd3e:	fa43 f305 	asr.w	r3, r3, r5
   dbd42:	18c0      	adds	r0, r0, r3
   dbd44:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dbd48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbd4c:	d507      	bpl.n	dbd5e <__adddf3+0xe6>
   dbd4e:	f04f 0e00 	mov.w	lr, #0
   dbd52:	f1dc 0c00 	rsbs	ip, ip, #0
   dbd56:	eb7e 0000 	sbcs.w	r0, lr, r0
   dbd5a:	eb6e 0101 	sbc.w	r1, lr, r1
   dbd5e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dbd62:	d31b      	bcc.n	dbd9c <__adddf3+0x124>
   dbd64:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dbd68:	d30c      	bcc.n	dbd84 <__adddf3+0x10c>
   dbd6a:	0849      	lsrs	r1, r1, #1
   dbd6c:	ea5f 0030 	movs.w	r0, r0, rrx
   dbd70:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dbd74:	f104 0401 	add.w	r4, r4, #1
   dbd78:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dbd7c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dbd80:	f080 809a 	bcs.w	dbeb8 <__adddf3+0x240>
   dbd84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dbd88:	bf08      	it	eq
   dbd8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dbd8e:	f150 0000 	adcs.w	r0, r0, #0
   dbd92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbd96:	ea41 0105 	orr.w	r1, r1, r5
   dbd9a:	bd30      	pop	{r4, r5, pc}
   dbd9c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dbda0:	4140      	adcs	r0, r0
   dbda2:	eb41 0101 	adc.w	r1, r1, r1
   dbda6:	3c01      	subs	r4, #1
   dbda8:	bf28      	it	cs
   dbdaa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dbdae:	d2e9      	bcs.n	dbd84 <__adddf3+0x10c>
   dbdb0:	f091 0f00 	teq	r1, #0
   dbdb4:	bf04      	itt	eq
   dbdb6:	4601      	moveq	r1, r0
   dbdb8:	2000      	moveq	r0, #0
   dbdba:	fab1 f381 	clz	r3, r1
   dbdbe:	bf08      	it	eq
   dbdc0:	3320      	addeq	r3, #32
   dbdc2:	f1a3 030b 	sub.w	r3, r3, #11
   dbdc6:	f1b3 0220 	subs.w	r2, r3, #32
   dbdca:	da0c      	bge.n	dbde6 <__adddf3+0x16e>
   dbdcc:	320c      	adds	r2, #12
   dbdce:	dd08      	ble.n	dbde2 <__adddf3+0x16a>
   dbdd0:	f102 0c14 	add.w	ip, r2, #20
   dbdd4:	f1c2 020c 	rsb	r2, r2, #12
   dbdd8:	fa01 f00c 	lsl.w	r0, r1, ip
   dbddc:	fa21 f102 	lsr.w	r1, r1, r2
   dbde0:	e00c      	b.n	dbdfc <__adddf3+0x184>
   dbde2:	f102 0214 	add.w	r2, r2, #20
   dbde6:	bfd8      	it	le
   dbde8:	f1c2 0c20 	rsble	ip, r2, #32
   dbdec:	fa01 f102 	lsl.w	r1, r1, r2
   dbdf0:	fa20 fc0c 	lsr.w	ip, r0, ip
   dbdf4:	bfdc      	itt	le
   dbdf6:	ea41 010c 	orrle.w	r1, r1, ip
   dbdfa:	4090      	lslle	r0, r2
   dbdfc:	1ae4      	subs	r4, r4, r3
   dbdfe:	bfa2      	ittt	ge
   dbe00:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dbe04:	4329      	orrge	r1, r5
   dbe06:	bd30      	popge	{r4, r5, pc}
   dbe08:	ea6f 0404 	mvn.w	r4, r4
   dbe0c:	3c1f      	subs	r4, #31
   dbe0e:	da1c      	bge.n	dbe4a <__adddf3+0x1d2>
   dbe10:	340c      	adds	r4, #12
   dbe12:	dc0e      	bgt.n	dbe32 <__adddf3+0x1ba>
   dbe14:	f104 0414 	add.w	r4, r4, #20
   dbe18:	f1c4 0220 	rsb	r2, r4, #32
   dbe1c:	fa20 f004 	lsr.w	r0, r0, r4
   dbe20:	fa01 f302 	lsl.w	r3, r1, r2
   dbe24:	ea40 0003 	orr.w	r0, r0, r3
   dbe28:	fa21 f304 	lsr.w	r3, r1, r4
   dbe2c:	ea45 0103 	orr.w	r1, r5, r3
   dbe30:	bd30      	pop	{r4, r5, pc}
   dbe32:	f1c4 040c 	rsb	r4, r4, #12
   dbe36:	f1c4 0220 	rsb	r2, r4, #32
   dbe3a:	fa20 f002 	lsr.w	r0, r0, r2
   dbe3e:	fa01 f304 	lsl.w	r3, r1, r4
   dbe42:	ea40 0003 	orr.w	r0, r0, r3
   dbe46:	4629      	mov	r1, r5
   dbe48:	bd30      	pop	{r4, r5, pc}
   dbe4a:	fa21 f004 	lsr.w	r0, r1, r4
   dbe4e:	4629      	mov	r1, r5
   dbe50:	bd30      	pop	{r4, r5, pc}
   dbe52:	f094 0f00 	teq	r4, #0
   dbe56:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dbe5a:	bf06      	itte	eq
   dbe5c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dbe60:	3401      	addeq	r4, #1
   dbe62:	3d01      	subne	r5, #1
   dbe64:	e74e      	b.n	dbd04 <__adddf3+0x8c>
   dbe66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dbe6a:	bf18      	it	ne
   dbe6c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dbe70:	d029      	beq.n	dbec6 <__adddf3+0x24e>
   dbe72:	ea94 0f05 	teq	r4, r5
   dbe76:	bf08      	it	eq
   dbe78:	ea90 0f02 	teqeq	r0, r2
   dbe7c:	d005      	beq.n	dbe8a <__adddf3+0x212>
   dbe7e:	ea54 0c00 	orrs.w	ip, r4, r0
   dbe82:	bf04      	itt	eq
   dbe84:	4619      	moveq	r1, r3
   dbe86:	4610      	moveq	r0, r2
   dbe88:	bd30      	pop	{r4, r5, pc}
   dbe8a:	ea91 0f03 	teq	r1, r3
   dbe8e:	bf1e      	ittt	ne
   dbe90:	2100      	movne	r1, #0
   dbe92:	2000      	movne	r0, #0
   dbe94:	bd30      	popne	{r4, r5, pc}
   dbe96:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dbe9a:	d105      	bne.n	dbea8 <__adddf3+0x230>
   dbe9c:	0040      	lsls	r0, r0, #1
   dbe9e:	4149      	adcs	r1, r1
   dbea0:	bf28      	it	cs
   dbea2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dbea6:	bd30      	pop	{r4, r5, pc}
   dbea8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dbeac:	bf3c      	itt	cc
   dbeae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dbeb2:	bd30      	popcc	{r4, r5, pc}
   dbeb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbeb8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dbebc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dbec0:	f04f 0000 	mov.w	r0, #0
   dbec4:	bd30      	pop	{r4, r5, pc}
   dbec6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dbeca:	bf1a      	itte	ne
   dbecc:	4619      	movne	r1, r3
   dbece:	4610      	movne	r0, r2
   dbed0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dbed4:	bf1c      	itt	ne
   dbed6:	460b      	movne	r3, r1
   dbed8:	4602      	movne	r2, r0
   dbeda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dbede:	bf06      	itte	eq
   dbee0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dbee4:	ea91 0f03 	teqeq	r1, r3
   dbee8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dbeec:	bd30      	pop	{r4, r5, pc}
   dbeee:	bf00      	nop

000dbef0 <__aeabi_ui2d>:
   dbef0:	f090 0f00 	teq	r0, #0
   dbef4:	bf04      	itt	eq
   dbef6:	2100      	moveq	r1, #0
   dbef8:	4770      	bxeq	lr
   dbefa:	b530      	push	{r4, r5, lr}
   dbefc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbf00:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbf04:	f04f 0500 	mov.w	r5, #0
   dbf08:	f04f 0100 	mov.w	r1, #0
   dbf0c:	e750      	b.n	dbdb0 <__adddf3+0x138>
   dbf0e:	bf00      	nop

000dbf10 <__aeabi_i2d>:
   dbf10:	f090 0f00 	teq	r0, #0
   dbf14:	bf04      	itt	eq
   dbf16:	2100      	moveq	r1, #0
   dbf18:	4770      	bxeq	lr
   dbf1a:	b530      	push	{r4, r5, lr}
   dbf1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbf20:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbf24:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dbf28:	bf48      	it	mi
   dbf2a:	4240      	negmi	r0, r0
   dbf2c:	f04f 0100 	mov.w	r1, #0
   dbf30:	e73e      	b.n	dbdb0 <__adddf3+0x138>
   dbf32:	bf00      	nop

000dbf34 <__aeabi_f2d>:
   dbf34:	0042      	lsls	r2, r0, #1
   dbf36:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dbf3a:	ea4f 0131 	mov.w	r1, r1, rrx
   dbf3e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dbf42:	bf1f      	itttt	ne
   dbf44:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dbf48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dbf4c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dbf50:	4770      	bxne	lr
   dbf52:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dbf56:	bf08      	it	eq
   dbf58:	4770      	bxeq	lr
   dbf5a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dbf5e:	bf04      	itt	eq
   dbf60:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dbf64:	4770      	bxeq	lr
   dbf66:	b530      	push	{r4, r5, lr}
   dbf68:	f44f 7460 	mov.w	r4, #896	; 0x380
   dbf6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbf70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dbf74:	e71c      	b.n	dbdb0 <__adddf3+0x138>
   dbf76:	bf00      	nop

000dbf78 <__aeabi_ul2d>:
   dbf78:	ea50 0201 	orrs.w	r2, r0, r1
   dbf7c:	bf08      	it	eq
   dbf7e:	4770      	bxeq	lr
   dbf80:	b530      	push	{r4, r5, lr}
   dbf82:	f04f 0500 	mov.w	r5, #0
   dbf86:	e00a      	b.n	dbf9e <__aeabi_l2d+0x16>

000dbf88 <__aeabi_l2d>:
   dbf88:	ea50 0201 	orrs.w	r2, r0, r1
   dbf8c:	bf08      	it	eq
   dbf8e:	4770      	bxeq	lr
   dbf90:	b530      	push	{r4, r5, lr}
   dbf92:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dbf96:	d502      	bpl.n	dbf9e <__aeabi_l2d+0x16>
   dbf98:	4240      	negs	r0, r0
   dbf9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dbf9e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbfa2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbfa6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dbfaa:	f43f aed8 	beq.w	dbd5e <__adddf3+0xe6>
   dbfae:	f04f 0203 	mov.w	r2, #3
   dbfb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dbfb6:	bf18      	it	ne
   dbfb8:	3203      	addne	r2, #3
   dbfba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dbfbe:	bf18      	it	ne
   dbfc0:	3203      	addne	r2, #3
   dbfc2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dbfc6:	f1c2 0320 	rsb	r3, r2, #32
   dbfca:	fa00 fc03 	lsl.w	ip, r0, r3
   dbfce:	fa20 f002 	lsr.w	r0, r0, r2
   dbfd2:	fa01 fe03 	lsl.w	lr, r1, r3
   dbfd6:	ea40 000e 	orr.w	r0, r0, lr
   dbfda:	fa21 f102 	lsr.w	r1, r1, r2
   dbfde:	4414      	add	r4, r2
   dbfe0:	e6bd      	b.n	dbd5e <__adddf3+0xe6>
   dbfe2:	bf00      	nop

000dbfe4 <__aeabi_dmul>:
   dbfe4:	b570      	push	{r4, r5, r6, lr}
   dbfe6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dbfea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dbfee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dbff2:	bf1d      	ittte	ne
   dbff4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dbff8:	ea94 0f0c 	teqne	r4, ip
   dbffc:	ea95 0f0c 	teqne	r5, ip
   dc000:	f000 f8de 	bleq	dc1c0 <__aeabi_dmul+0x1dc>
   dc004:	442c      	add	r4, r5
   dc006:	ea81 0603 	eor.w	r6, r1, r3
   dc00a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dc00e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dc012:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dc016:	bf18      	it	ne
   dc018:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dc01c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dc024:	d038      	beq.n	dc098 <__aeabi_dmul+0xb4>
   dc026:	fba0 ce02 	umull	ip, lr, r0, r2
   dc02a:	f04f 0500 	mov.w	r5, #0
   dc02e:	fbe1 e502 	umlal	lr, r5, r1, r2
   dc032:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dc036:	fbe0 e503 	umlal	lr, r5, r0, r3
   dc03a:	f04f 0600 	mov.w	r6, #0
   dc03e:	fbe1 5603 	umlal	r5, r6, r1, r3
   dc042:	f09c 0f00 	teq	ip, #0
   dc046:	bf18      	it	ne
   dc048:	f04e 0e01 	orrne.w	lr, lr, #1
   dc04c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dc050:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dc054:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dc058:	d204      	bcs.n	dc064 <__aeabi_dmul+0x80>
   dc05a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dc05e:	416d      	adcs	r5, r5
   dc060:	eb46 0606 	adc.w	r6, r6, r6
   dc064:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dc068:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dc06c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dc070:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dc074:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dc078:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc07c:	bf88      	it	hi
   dc07e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc082:	d81e      	bhi.n	dc0c2 <__aeabi_dmul+0xde>
   dc084:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dc088:	bf08      	it	eq
   dc08a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dc08e:	f150 0000 	adcs.w	r0, r0, #0
   dc092:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc096:	bd70      	pop	{r4, r5, r6, pc}
   dc098:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dc09c:	ea46 0101 	orr.w	r1, r6, r1
   dc0a0:	ea40 0002 	orr.w	r0, r0, r2
   dc0a4:	ea81 0103 	eor.w	r1, r1, r3
   dc0a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dc0ac:	bfc2      	ittt	gt
   dc0ae:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc0b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc0b6:	bd70      	popgt	{r4, r5, r6, pc}
   dc0b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc0bc:	f04f 0e00 	mov.w	lr, #0
   dc0c0:	3c01      	subs	r4, #1
   dc0c2:	f300 80ab 	bgt.w	dc21c <__aeabi_dmul+0x238>
   dc0c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dc0ca:	bfde      	ittt	le
   dc0cc:	2000      	movle	r0, #0
   dc0ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dc0d2:	bd70      	pople	{r4, r5, r6, pc}
   dc0d4:	f1c4 0400 	rsb	r4, r4, #0
   dc0d8:	3c20      	subs	r4, #32
   dc0da:	da35      	bge.n	dc148 <__aeabi_dmul+0x164>
   dc0dc:	340c      	adds	r4, #12
   dc0de:	dc1b      	bgt.n	dc118 <__aeabi_dmul+0x134>
   dc0e0:	f104 0414 	add.w	r4, r4, #20
   dc0e4:	f1c4 0520 	rsb	r5, r4, #32
   dc0e8:	fa00 f305 	lsl.w	r3, r0, r5
   dc0ec:	fa20 f004 	lsr.w	r0, r0, r4
   dc0f0:	fa01 f205 	lsl.w	r2, r1, r5
   dc0f4:	ea40 0002 	orr.w	r0, r0, r2
   dc0f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dc0fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dc100:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc104:	fa21 f604 	lsr.w	r6, r1, r4
   dc108:	eb42 0106 	adc.w	r1, r2, r6
   dc10c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc110:	bf08      	it	eq
   dc112:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc116:	bd70      	pop	{r4, r5, r6, pc}
   dc118:	f1c4 040c 	rsb	r4, r4, #12
   dc11c:	f1c4 0520 	rsb	r5, r4, #32
   dc120:	fa00 f304 	lsl.w	r3, r0, r4
   dc124:	fa20 f005 	lsr.w	r0, r0, r5
   dc128:	fa01 f204 	lsl.w	r2, r1, r4
   dc12c:	ea40 0002 	orr.w	r0, r0, r2
   dc130:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc134:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc138:	f141 0100 	adc.w	r1, r1, #0
   dc13c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc140:	bf08      	it	eq
   dc142:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc146:	bd70      	pop	{r4, r5, r6, pc}
   dc148:	f1c4 0520 	rsb	r5, r4, #32
   dc14c:	fa00 f205 	lsl.w	r2, r0, r5
   dc150:	ea4e 0e02 	orr.w	lr, lr, r2
   dc154:	fa20 f304 	lsr.w	r3, r0, r4
   dc158:	fa01 f205 	lsl.w	r2, r1, r5
   dc15c:	ea43 0302 	orr.w	r3, r3, r2
   dc160:	fa21 f004 	lsr.w	r0, r1, r4
   dc164:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc168:	fa21 f204 	lsr.w	r2, r1, r4
   dc16c:	ea20 0002 	bic.w	r0, r0, r2
   dc170:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dc174:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc178:	bf08      	it	eq
   dc17a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc17e:	bd70      	pop	{r4, r5, r6, pc}
   dc180:	f094 0f00 	teq	r4, #0
   dc184:	d10f      	bne.n	dc1a6 <__aeabi_dmul+0x1c2>
   dc186:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dc18a:	0040      	lsls	r0, r0, #1
   dc18c:	eb41 0101 	adc.w	r1, r1, r1
   dc190:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc194:	bf08      	it	eq
   dc196:	3c01      	subeq	r4, #1
   dc198:	d0f7      	beq.n	dc18a <__aeabi_dmul+0x1a6>
   dc19a:	ea41 0106 	orr.w	r1, r1, r6
   dc19e:	f095 0f00 	teq	r5, #0
   dc1a2:	bf18      	it	ne
   dc1a4:	4770      	bxne	lr
   dc1a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dc1aa:	0052      	lsls	r2, r2, #1
   dc1ac:	eb43 0303 	adc.w	r3, r3, r3
   dc1b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dc1b4:	bf08      	it	eq
   dc1b6:	3d01      	subeq	r5, #1
   dc1b8:	d0f7      	beq.n	dc1aa <__aeabi_dmul+0x1c6>
   dc1ba:	ea43 0306 	orr.w	r3, r3, r6
   dc1be:	4770      	bx	lr
   dc1c0:	ea94 0f0c 	teq	r4, ip
   dc1c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc1c8:	bf18      	it	ne
   dc1ca:	ea95 0f0c 	teqne	r5, ip
   dc1ce:	d00c      	beq.n	dc1ea <__aeabi_dmul+0x206>
   dc1d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc1d4:	bf18      	it	ne
   dc1d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc1da:	d1d1      	bne.n	dc180 <__aeabi_dmul+0x19c>
   dc1dc:	ea81 0103 	eor.w	r1, r1, r3
   dc1e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc1e4:	f04f 0000 	mov.w	r0, #0
   dc1e8:	bd70      	pop	{r4, r5, r6, pc}
   dc1ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc1ee:	bf06      	itte	eq
   dc1f0:	4610      	moveq	r0, r2
   dc1f2:	4619      	moveq	r1, r3
   dc1f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc1f8:	d019      	beq.n	dc22e <__aeabi_dmul+0x24a>
   dc1fa:	ea94 0f0c 	teq	r4, ip
   dc1fe:	d102      	bne.n	dc206 <__aeabi_dmul+0x222>
   dc200:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dc204:	d113      	bne.n	dc22e <__aeabi_dmul+0x24a>
   dc206:	ea95 0f0c 	teq	r5, ip
   dc20a:	d105      	bne.n	dc218 <__aeabi_dmul+0x234>
   dc20c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dc210:	bf1c      	itt	ne
   dc212:	4610      	movne	r0, r2
   dc214:	4619      	movne	r1, r3
   dc216:	d10a      	bne.n	dc22e <__aeabi_dmul+0x24a>
   dc218:	ea81 0103 	eor.w	r1, r1, r3
   dc21c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc220:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc224:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dc228:	f04f 0000 	mov.w	r0, #0
   dc22c:	bd70      	pop	{r4, r5, r6, pc}
   dc22e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc232:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dc236:	bd70      	pop	{r4, r5, r6, pc}

000dc238 <__aeabi_ddiv>:
   dc238:	b570      	push	{r4, r5, r6, lr}
   dc23a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dc23e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dc242:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dc246:	bf1d      	ittte	ne
   dc248:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dc24c:	ea94 0f0c 	teqne	r4, ip
   dc250:	ea95 0f0c 	teqne	r5, ip
   dc254:	f000 f8a7 	bleq	dc3a6 <__aeabi_ddiv+0x16e>
   dc258:	eba4 0405 	sub.w	r4, r4, r5
   dc25c:	ea81 0e03 	eor.w	lr, r1, r3
   dc260:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc264:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dc268:	f000 8088 	beq.w	dc37c <__aeabi_ddiv+0x144>
   dc26c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dc270:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dc274:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dc278:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dc27c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dc280:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dc284:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dc288:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dc28c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dc290:	429d      	cmp	r5, r3
   dc292:	bf08      	it	eq
   dc294:	4296      	cmpeq	r6, r2
   dc296:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dc29a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dc29e:	d202      	bcs.n	dc2a6 <__aeabi_ddiv+0x6e>
   dc2a0:	085b      	lsrs	r3, r3, #1
   dc2a2:	ea4f 0232 	mov.w	r2, r2, rrx
   dc2a6:	1ab6      	subs	r6, r6, r2
   dc2a8:	eb65 0503 	sbc.w	r5, r5, r3
   dc2ac:	085b      	lsrs	r3, r3, #1
   dc2ae:	ea4f 0232 	mov.w	r2, r2, rrx
   dc2b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dc2b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dc2ba:	ebb6 0e02 	subs.w	lr, r6, r2
   dc2be:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc2c2:	bf22      	ittt	cs
   dc2c4:	1ab6      	subcs	r6, r6, r2
   dc2c6:	4675      	movcs	r5, lr
   dc2c8:	ea40 000c 	orrcs.w	r0, r0, ip
   dc2cc:	085b      	lsrs	r3, r3, #1
   dc2ce:	ea4f 0232 	mov.w	r2, r2, rrx
   dc2d2:	ebb6 0e02 	subs.w	lr, r6, r2
   dc2d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc2da:	bf22      	ittt	cs
   dc2dc:	1ab6      	subcs	r6, r6, r2
   dc2de:	4675      	movcs	r5, lr
   dc2e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dc2e4:	085b      	lsrs	r3, r3, #1
   dc2e6:	ea4f 0232 	mov.w	r2, r2, rrx
   dc2ea:	ebb6 0e02 	subs.w	lr, r6, r2
   dc2ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc2f2:	bf22      	ittt	cs
   dc2f4:	1ab6      	subcs	r6, r6, r2
   dc2f6:	4675      	movcs	r5, lr
   dc2f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dc2fc:	085b      	lsrs	r3, r3, #1
   dc2fe:	ea4f 0232 	mov.w	r2, r2, rrx
   dc302:	ebb6 0e02 	subs.w	lr, r6, r2
   dc306:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc30a:	bf22      	ittt	cs
   dc30c:	1ab6      	subcs	r6, r6, r2
   dc30e:	4675      	movcs	r5, lr
   dc310:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dc314:	ea55 0e06 	orrs.w	lr, r5, r6
   dc318:	d018      	beq.n	dc34c <__aeabi_ddiv+0x114>
   dc31a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dc31e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dc322:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dc326:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dc32a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dc32e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dc332:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dc336:	d1c0      	bne.n	dc2ba <__aeabi_ddiv+0x82>
   dc338:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc33c:	d10b      	bne.n	dc356 <__aeabi_ddiv+0x11e>
   dc33e:	ea41 0100 	orr.w	r1, r1, r0
   dc342:	f04f 0000 	mov.w	r0, #0
   dc346:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dc34a:	e7b6      	b.n	dc2ba <__aeabi_ddiv+0x82>
   dc34c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc350:	bf04      	itt	eq
   dc352:	4301      	orreq	r1, r0
   dc354:	2000      	moveq	r0, #0
   dc356:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc35a:	bf88      	it	hi
   dc35c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc360:	f63f aeaf 	bhi.w	dc0c2 <__aeabi_dmul+0xde>
   dc364:	ebb5 0c03 	subs.w	ip, r5, r3
   dc368:	bf04      	itt	eq
   dc36a:	ebb6 0c02 	subseq.w	ip, r6, r2
   dc36e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc372:	f150 0000 	adcs.w	r0, r0, #0
   dc376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc37a:	bd70      	pop	{r4, r5, r6, pc}
   dc37c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dc380:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dc384:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dc388:	bfc2      	ittt	gt
   dc38a:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc38e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc392:	bd70      	popgt	{r4, r5, r6, pc}
   dc394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc398:	f04f 0e00 	mov.w	lr, #0
   dc39c:	3c01      	subs	r4, #1
   dc39e:	e690      	b.n	dc0c2 <__aeabi_dmul+0xde>
   dc3a0:	ea45 0e06 	orr.w	lr, r5, r6
   dc3a4:	e68d      	b.n	dc0c2 <__aeabi_dmul+0xde>
   dc3a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc3aa:	ea94 0f0c 	teq	r4, ip
   dc3ae:	bf08      	it	eq
   dc3b0:	ea95 0f0c 	teqeq	r5, ip
   dc3b4:	f43f af3b 	beq.w	dc22e <__aeabi_dmul+0x24a>
   dc3b8:	ea94 0f0c 	teq	r4, ip
   dc3bc:	d10a      	bne.n	dc3d4 <__aeabi_ddiv+0x19c>
   dc3be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dc3c2:	f47f af34 	bne.w	dc22e <__aeabi_dmul+0x24a>
   dc3c6:	ea95 0f0c 	teq	r5, ip
   dc3ca:	f47f af25 	bne.w	dc218 <__aeabi_dmul+0x234>
   dc3ce:	4610      	mov	r0, r2
   dc3d0:	4619      	mov	r1, r3
   dc3d2:	e72c      	b.n	dc22e <__aeabi_dmul+0x24a>
   dc3d4:	ea95 0f0c 	teq	r5, ip
   dc3d8:	d106      	bne.n	dc3e8 <__aeabi_ddiv+0x1b0>
   dc3da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc3de:	f43f aefd 	beq.w	dc1dc <__aeabi_dmul+0x1f8>
   dc3e2:	4610      	mov	r0, r2
   dc3e4:	4619      	mov	r1, r3
   dc3e6:	e722      	b.n	dc22e <__aeabi_dmul+0x24a>
   dc3e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc3ec:	bf18      	it	ne
   dc3ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc3f2:	f47f aec5 	bne.w	dc180 <__aeabi_dmul+0x19c>
   dc3f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dc3fa:	f47f af0d 	bne.w	dc218 <__aeabi_dmul+0x234>
   dc3fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dc402:	f47f aeeb 	bne.w	dc1dc <__aeabi_dmul+0x1f8>
   dc406:	e712      	b.n	dc22e <__aeabi_dmul+0x24a>

000dc408 <__aeabi_d2uiz>:
   dc408:	004a      	lsls	r2, r1, #1
   dc40a:	d211      	bcs.n	dc430 <__aeabi_d2uiz+0x28>
   dc40c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dc410:	d211      	bcs.n	dc436 <__aeabi_d2uiz+0x2e>
   dc412:	d50d      	bpl.n	dc430 <__aeabi_d2uiz+0x28>
   dc414:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dc418:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dc41c:	d40e      	bmi.n	dc43c <__aeabi_d2uiz+0x34>
   dc41e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc422:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dc426:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dc42a:	fa23 f002 	lsr.w	r0, r3, r2
   dc42e:	4770      	bx	lr
   dc430:	f04f 0000 	mov.w	r0, #0
   dc434:	4770      	bx	lr
   dc436:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dc43a:	d102      	bne.n	dc442 <__aeabi_d2uiz+0x3a>
   dc43c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dc440:	4770      	bx	lr
   dc442:	f04f 0000 	mov.w	r0, #0
   dc446:	4770      	bx	lr

000dc448 <asctime_r>:
   dc448:	b510      	push	{r4, lr}
   dc44a:	460c      	mov	r4, r1
   dc44c:	6941      	ldr	r1, [r0, #20]
   dc44e:	6903      	ldr	r3, [r0, #16]
   dc450:	6982      	ldr	r2, [r0, #24]
   dc452:	b086      	sub	sp, #24
   dc454:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dc458:	9104      	str	r1, [sp, #16]
   dc45a:	6801      	ldr	r1, [r0, #0]
   dc45c:	9103      	str	r1, [sp, #12]
   dc45e:	6841      	ldr	r1, [r0, #4]
   dc460:	9102      	str	r1, [sp, #8]
   dc462:	6881      	ldr	r1, [r0, #8]
   dc464:	9101      	str	r1, [sp, #4]
   dc466:	68c1      	ldr	r1, [r0, #12]
   dc468:	9100      	str	r1, [sp, #0]
   dc46a:	4907      	ldr	r1, [pc, #28]	; (dc488 <asctime_r+0x40>)
   dc46c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dc470:	440b      	add	r3, r1
   dc472:	4906      	ldr	r1, [pc, #24]	; (dc48c <asctime_r+0x44>)
   dc474:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dc478:	440a      	add	r2, r1
   dc47a:	4620      	mov	r0, r4
   dc47c:	4904      	ldr	r1, [pc, #16]	; (dc490 <asctime_r+0x48>)
   dc47e:	f7fc ff83 	bl	d9388 <siprintf>
   dc482:	4620      	mov	r0, r4
   dc484:	b006      	add	sp, #24
   dc486:	bd10      	pop	{r4, pc}
   dc488:	000dd6ee 	.word	0x000dd6ee
   dc48c:	000dd6d9 	.word	0x000dd6d9
   dc490:	000dd6b9 	.word	0x000dd6b9

000dc494 <atexit>:
   dc494:	2300      	movs	r3, #0
   dc496:	4601      	mov	r1, r0
   dc498:	461a      	mov	r2, r3
   dc49a:	4618      	mov	r0, r3
   dc49c:	f000 ba2c 	b.w	dc8f8 <__register_exitproc>

000dc4a0 <memcpy>:
   dc4a0:	440a      	add	r2, r1
   dc4a2:	4291      	cmp	r1, r2
   dc4a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dc4a8:	d100      	bne.n	dc4ac <memcpy+0xc>
   dc4aa:	4770      	bx	lr
   dc4ac:	b510      	push	{r4, lr}
   dc4ae:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc4b2:	f803 4f01 	strb.w	r4, [r3, #1]!
   dc4b6:	4291      	cmp	r1, r2
   dc4b8:	d1f9      	bne.n	dc4ae <memcpy+0xe>
   dc4ba:	bd10      	pop	{r4, pc}

000dc4bc <memmove>:
   dc4bc:	4288      	cmp	r0, r1
   dc4be:	b510      	push	{r4, lr}
   dc4c0:	eb01 0402 	add.w	r4, r1, r2
   dc4c4:	d902      	bls.n	dc4cc <memmove+0x10>
   dc4c6:	4284      	cmp	r4, r0
   dc4c8:	4623      	mov	r3, r4
   dc4ca:	d807      	bhi.n	dc4dc <memmove+0x20>
   dc4cc:	1e43      	subs	r3, r0, #1
   dc4ce:	42a1      	cmp	r1, r4
   dc4d0:	d008      	beq.n	dc4e4 <memmove+0x28>
   dc4d2:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc4d6:	f803 2f01 	strb.w	r2, [r3, #1]!
   dc4da:	e7f8      	b.n	dc4ce <memmove+0x12>
   dc4dc:	4402      	add	r2, r0
   dc4de:	4601      	mov	r1, r0
   dc4e0:	428a      	cmp	r2, r1
   dc4e2:	d100      	bne.n	dc4e6 <memmove+0x2a>
   dc4e4:	bd10      	pop	{r4, pc}
   dc4e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dc4ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dc4ee:	e7f7      	b.n	dc4e0 <memmove+0x24>

000dc4f0 <memset>:
   dc4f0:	4402      	add	r2, r0
   dc4f2:	4603      	mov	r3, r0
   dc4f4:	4293      	cmp	r3, r2
   dc4f6:	d100      	bne.n	dc4fa <memset+0xa>
   dc4f8:	4770      	bx	lr
   dc4fa:	f803 1b01 	strb.w	r1, [r3], #1
   dc4fe:	e7f9      	b.n	dc4f4 <memset+0x4>

000dc500 <srand>:
   dc500:	b538      	push	{r3, r4, r5, lr}
   dc502:	4b0d      	ldr	r3, [pc, #52]	; (dc538 <srand+0x38>)
   dc504:	681d      	ldr	r5, [r3, #0]
   dc506:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc508:	4604      	mov	r4, r0
   dc50a:	b97b      	cbnz	r3, dc52c <srand+0x2c>
   dc50c:	2018      	movs	r0, #24
   dc50e:	f7fc ff23 	bl	d9358 <malloc>
   dc512:	4a0a      	ldr	r2, [pc, #40]	; (dc53c <srand+0x3c>)
   dc514:	4b0a      	ldr	r3, [pc, #40]	; (dc540 <srand+0x40>)
   dc516:	63a8      	str	r0, [r5, #56]	; 0x38
   dc518:	e9c0 2300 	strd	r2, r3, [r0]
   dc51c:	4b09      	ldr	r3, [pc, #36]	; (dc544 <srand+0x44>)
   dc51e:	6083      	str	r3, [r0, #8]
   dc520:	230b      	movs	r3, #11
   dc522:	8183      	strh	r3, [r0, #12]
   dc524:	2201      	movs	r2, #1
   dc526:	2300      	movs	r3, #0
   dc528:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dc52c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc52e:	2200      	movs	r2, #0
   dc530:	611c      	str	r4, [r3, #16]
   dc532:	615a      	str	r2, [r3, #20]
   dc534:	bd38      	pop	{r3, r4, r5, pc}
   dc536:	bf00      	nop
   dc538:	2003ddb0 	.word	0x2003ddb0
   dc53c:	abcd330e 	.word	0xabcd330e
   dc540:	e66d1234 	.word	0xe66d1234
   dc544:	0005deec 	.word	0x0005deec

000dc548 <rand>:
   dc548:	4b13      	ldr	r3, [pc, #76]	; (dc598 <rand+0x50>)
   dc54a:	b510      	push	{r4, lr}
   dc54c:	681c      	ldr	r4, [r3, #0]
   dc54e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dc550:	b97b      	cbnz	r3, dc572 <rand+0x2a>
   dc552:	2018      	movs	r0, #24
   dc554:	f7fc ff00 	bl	d9358 <malloc>
   dc558:	4a10      	ldr	r2, [pc, #64]	; (dc59c <rand+0x54>)
   dc55a:	4b11      	ldr	r3, [pc, #68]	; (dc5a0 <rand+0x58>)
   dc55c:	63a0      	str	r0, [r4, #56]	; 0x38
   dc55e:	e9c0 2300 	strd	r2, r3, [r0]
   dc562:	4b10      	ldr	r3, [pc, #64]	; (dc5a4 <rand+0x5c>)
   dc564:	6083      	str	r3, [r0, #8]
   dc566:	230b      	movs	r3, #11
   dc568:	8183      	strh	r3, [r0, #12]
   dc56a:	2201      	movs	r2, #1
   dc56c:	2300      	movs	r3, #0
   dc56e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dc572:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   dc574:	480c      	ldr	r0, [pc, #48]	; (dc5a8 <rand+0x60>)
   dc576:	690a      	ldr	r2, [r1, #16]
   dc578:	694b      	ldr	r3, [r1, #20]
   dc57a:	4c0c      	ldr	r4, [pc, #48]	; (dc5ac <rand+0x64>)
   dc57c:	4350      	muls	r0, r2
   dc57e:	fb04 0003 	mla	r0, r4, r3, r0
   dc582:	fba2 3404 	umull	r3, r4, r2, r4
   dc586:	1c5a      	adds	r2, r3, #1
   dc588:	4404      	add	r4, r0
   dc58a:	f144 0000 	adc.w	r0, r4, #0
   dc58e:	e9c1 2004 	strd	r2, r0, [r1, #16]
   dc592:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   dc596:	bd10      	pop	{r4, pc}
   dc598:	2003ddb0 	.word	0x2003ddb0
   dc59c:	abcd330e 	.word	0xabcd330e
   dc5a0:	e66d1234 	.word	0xe66d1234
   dc5a4:	0005deec 	.word	0x0005deec
   dc5a8:	5851f42d 	.word	0x5851f42d
   dc5ac:	4c957f2d 	.word	0x4c957f2d

000dc5b0 <strchr>:
   dc5b0:	b2c9      	uxtb	r1, r1
   dc5b2:	4603      	mov	r3, r0
   dc5b4:	f810 2b01 	ldrb.w	r2, [r0], #1
   dc5b8:	b11a      	cbz	r2, dc5c2 <strchr+0x12>
   dc5ba:	428a      	cmp	r2, r1
   dc5bc:	d1f9      	bne.n	dc5b2 <strchr+0x2>
   dc5be:	4618      	mov	r0, r3
   dc5c0:	4770      	bx	lr
   dc5c2:	2900      	cmp	r1, #0
   dc5c4:	bf18      	it	ne
   dc5c6:	2300      	movne	r3, #0
   dc5c8:	e7f9      	b.n	dc5be <strchr+0xe>

000dc5ca <strchrnul>:
   dc5ca:	b510      	push	{r4, lr}
   dc5cc:	4604      	mov	r4, r0
   dc5ce:	f7ff ffef 	bl	dc5b0 <strchr>
   dc5d2:	b918      	cbnz	r0, dc5dc <strchrnul+0x12>
   dc5d4:	4620      	mov	r0, r4
   dc5d6:	f000 f832 	bl	dc63e <strlen>
   dc5da:	4420      	add	r0, r4
   dc5dc:	bd10      	pop	{r4, pc}

000dc5de <strcmp>:
   dc5de:	f810 2b01 	ldrb.w	r2, [r0], #1
   dc5e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   dc5e6:	2a01      	cmp	r2, #1
   dc5e8:	bf28      	it	cs
   dc5ea:	429a      	cmpcs	r2, r3
   dc5ec:	d0f7      	beq.n	dc5de <strcmp>
   dc5ee:	1ad0      	subs	r0, r2, r3
   dc5f0:	4770      	bx	lr

000dc5f2 <strcpy>:
   dc5f2:	4603      	mov	r3, r0
   dc5f4:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc5f8:	f803 2b01 	strb.w	r2, [r3], #1
   dc5fc:	2a00      	cmp	r2, #0
   dc5fe:	d1f9      	bne.n	dc5f4 <strcpy+0x2>
   dc600:	4770      	bx	lr
	...

000dc604 <strdup>:
   dc604:	4b02      	ldr	r3, [pc, #8]	; (dc610 <strdup+0xc>)
   dc606:	4601      	mov	r1, r0
   dc608:	6818      	ldr	r0, [r3, #0]
   dc60a:	f000 b803 	b.w	dc614 <_strdup_r>
   dc60e:	bf00      	nop
   dc610:	2003ddb0 	.word	0x2003ddb0

000dc614 <_strdup_r>:
   dc614:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dc616:	4604      	mov	r4, r0
   dc618:	4608      	mov	r0, r1
   dc61a:	460d      	mov	r5, r1
   dc61c:	f000 f80f 	bl	dc63e <strlen>
   dc620:	1c42      	adds	r2, r0, #1
   dc622:	4611      	mov	r1, r2
   dc624:	4620      	mov	r0, r4
   dc626:	9201      	str	r2, [sp, #4]
   dc628:	f7fc fed6 	bl	d93d8 <_malloc_r>
   dc62c:	4604      	mov	r4, r0
   dc62e:	b118      	cbz	r0, dc638 <_strdup_r+0x24>
   dc630:	9a01      	ldr	r2, [sp, #4]
   dc632:	4629      	mov	r1, r5
   dc634:	f7ff ff34 	bl	dc4a0 <memcpy>
   dc638:	4620      	mov	r0, r4
   dc63a:	b003      	add	sp, #12
   dc63c:	bd30      	pop	{r4, r5, pc}

000dc63e <strlen>:
   dc63e:	4603      	mov	r3, r0
   dc640:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc644:	2a00      	cmp	r2, #0
   dc646:	d1fb      	bne.n	dc640 <strlen+0x2>
   dc648:	1a18      	subs	r0, r3, r0
   dc64a:	3801      	subs	r0, #1
   dc64c:	4770      	bx	lr

000dc64e <strncmp>:
   dc64e:	b510      	push	{r4, lr}
   dc650:	b16a      	cbz	r2, dc66e <strncmp+0x20>
   dc652:	3901      	subs	r1, #1
   dc654:	1884      	adds	r4, r0, r2
   dc656:	f810 3b01 	ldrb.w	r3, [r0], #1
   dc65a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dc65e:	4293      	cmp	r3, r2
   dc660:	d103      	bne.n	dc66a <strncmp+0x1c>
   dc662:	42a0      	cmp	r0, r4
   dc664:	d001      	beq.n	dc66a <strncmp+0x1c>
   dc666:	2b00      	cmp	r3, #0
   dc668:	d1f5      	bne.n	dc656 <strncmp+0x8>
   dc66a:	1a98      	subs	r0, r3, r2
   dc66c:	bd10      	pop	{r4, pc}
   dc66e:	4610      	mov	r0, r2
   dc670:	e7fc      	b.n	dc66c <strncmp+0x1e>

000dc672 <strncpy>:
   dc672:	b510      	push	{r4, lr}
   dc674:	3901      	subs	r1, #1
   dc676:	4603      	mov	r3, r0
   dc678:	b132      	cbz	r2, dc688 <strncpy+0x16>
   dc67a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc67e:	f803 4b01 	strb.w	r4, [r3], #1
   dc682:	3a01      	subs	r2, #1
   dc684:	2c00      	cmp	r4, #0
   dc686:	d1f7      	bne.n	dc678 <strncpy+0x6>
   dc688:	441a      	add	r2, r3
   dc68a:	2100      	movs	r1, #0
   dc68c:	4293      	cmp	r3, r2
   dc68e:	d100      	bne.n	dc692 <strncpy+0x20>
   dc690:	bd10      	pop	{r4, pc}
   dc692:	f803 1b01 	strb.w	r1, [r3], #1
   dc696:	e7f9      	b.n	dc68c <strncpy+0x1a>

000dc698 <strrchr>:
   dc698:	b538      	push	{r3, r4, r5, lr}
   dc69a:	4603      	mov	r3, r0
   dc69c:	460c      	mov	r4, r1
   dc69e:	b969      	cbnz	r1, dc6bc <strrchr+0x24>
   dc6a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc6a4:	f7ff bf84 	b.w	dc5b0 <strchr>
   dc6a8:	1c43      	adds	r3, r0, #1
   dc6aa:	4605      	mov	r5, r0
   dc6ac:	4621      	mov	r1, r4
   dc6ae:	4618      	mov	r0, r3
   dc6b0:	f7ff ff7e 	bl	dc5b0 <strchr>
   dc6b4:	2800      	cmp	r0, #0
   dc6b6:	d1f7      	bne.n	dc6a8 <strrchr+0x10>
   dc6b8:	4628      	mov	r0, r5
   dc6ba:	bd38      	pop	{r3, r4, r5, pc}
   dc6bc:	2500      	movs	r5, #0
   dc6be:	e7f5      	b.n	dc6ac <strrchr+0x14>

000dc6c0 <__strtok_r>:
   dc6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc6c2:	b908      	cbnz	r0, dc6c8 <__strtok_r+0x8>
   dc6c4:	6810      	ldr	r0, [r2, #0]
   dc6c6:	b188      	cbz	r0, dc6ec <__strtok_r+0x2c>
   dc6c8:	4604      	mov	r4, r0
   dc6ca:	4620      	mov	r0, r4
   dc6cc:	f814 5b01 	ldrb.w	r5, [r4], #1
   dc6d0:	460f      	mov	r7, r1
   dc6d2:	f817 6b01 	ldrb.w	r6, [r7], #1
   dc6d6:	b91e      	cbnz	r6, dc6e0 <__strtok_r+0x20>
   dc6d8:	b965      	cbnz	r5, dc6f4 <__strtok_r+0x34>
   dc6da:	6015      	str	r5, [r2, #0]
   dc6dc:	4628      	mov	r0, r5
   dc6de:	e005      	b.n	dc6ec <__strtok_r+0x2c>
   dc6e0:	42b5      	cmp	r5, r6
   dc6e2:	d1f6      	bne.n	dc6d2 <__strtok_r+0x12>
   dc6e4:	2b00      	cmp	r3, #0
   dc6e6:	d1f0      	bne.n	dc6ca <__strtok_r+0xa>
   dc6e8:	6014      	str	r4, [r2, #0]
   dc6ea:	7003      	strb	r3, [r0, #0]
   dc6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc6ee:	461c      	mov	r4, r3
   dc6f0:	e00c      	b.n	dc70c <__strtok_r+0x4c>
   dc6f2:	b915      	cbnz	r5, dc6fa <__strtok_r+0x3a>
   dc6f4:	f814 3b01 	ldrb.w	r3, [r4], #1
   dc6f8:	460e      	mov	r6, r1
   dc6fa:	f816 5b01 	ldrb.w	r5, [r6], #1
   dc6fe:	42ab      	cmp	r3, r5
   dc700:	d1f7      	bne.n	dc6f2 <__strtok_r+0x32>
   dc702:	2b00      	cmp	r3, #0
   dc704:	d0f3      	beq.n	dc6ee <__strtok_r+0x2e>
   dc706:	2300      	movs	r3, #0
   dc708:	f804 3c01 	strb.w	r3, [r4, #-1]
   dc70c:	6014      	str	r4, [r2, #0]
   dc70e:	e7ed      	b.n	dc6ec <__strtok_r+0x2c>

000dc710 <strtok_r>:
   dc710:	2301      	movs	r3, #1
   dc712:	f7ff bfd5 	b.w	dc6c0 <__strtok_r>
	...

000dc718 <_strtol_l.isra.0>:
   dc718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc71c:	4e3a      	ldr	r6, [pc, #232]	; (dc808 <_strtol_l.isra.0+0xf0>)
   dc71e:	4686      	mov	lr, r0
   dc720:	468c      	mov	ip, r1
   dc722:	4660      	mov	r0, ip
   dc724:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc728:	5da5      	ldrb	r5, [r4, r6]
   dc72a:	f015 0508 	ands.w	r5, r5, #8
   dc72e:	d1f8      	bne.n	dc722 <_strtol_l.isra.0+0xa>
   dc730:	2c2d      	cmp	r4, #45	; 0x2d
   dc732:	d133      	bne.n	dc79c <_strtol_l.isra.0+0x84>
   dc734:	f89c 4000 	ldrb.w	r4, [ip]
   dc738:	f04f 0801 	mov.w	r8, #1
   dc73c:	f100 0c02 	add.w	ip, r0, #2
   dc740:	2b00      	cmp	r3, #0
   dc742:	d05c      	beq.n	dc7fe <_strtol_l.isra.0+0xe6>
   dc744:	2b10      	cmp	r3, #16
   dc746:	d10c      	bne.n	dc762 <_strtol_l.isra.0+0x4a>
   dc748:	2c30      	cmp	r4, #48	; 0x30
   dc74a:	d10a      	bne.n	dc762 <_strtol_l.isra.0+0x4a>
   dc74c:	f89c 0000 	ldrb.w	r0, [ip]
   dc750:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc754:	2858      	cmp	r0, #88	; 0x58
   dc756:	d14d      	bne.n	dc7f4 <_strtol_l.isra.0+0xdc>
   dc758:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dc75c:	2310      	movs	r3, #16
   dc75e:	f10c 0c02 	add.w	ip, ip, #2
   dc762:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dc766:	3f01      	subs	r7, #1
   dc768:	2600      	movs	r6, #0
   dc76a:	fbb7 f9f3 	udiv	r9, r7, r3
   dc76e:	4630      	mov	r0, r6
   dc770:	fb03 7a19 	mls	sl, r3, r9, r7
   dc774:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dc778:	2d09      	cmp	r5, #9
   dc77a:	d818      	bhi.n	dc7ae <_strtol_l.isra.0+0x96>
   dc77c:	462c      	mov	r4, r5
   dc77e:	42a3      	cmp	r3, r4
   dc780:	dd24      	ble.n	dc7cc <_strtol_l.isra.0+0xb4>
   dc782:	1c75      	adds	r5, r6, #1
   dc784:	d007      	beq.n	dc796 <_strtol_l.isra.0+0x7e>
   dc786:	4581      	cmp	r9, r0
   dc788:	d31d      	bcc.n	dc7c6 <_strtol_l.isra.0+0xae>
   dc78a:	d101      	bne.n	dc790 <_strtol_l.isra.0+0x78>
   dc78c:	45a2      	cmp	sl, r4
   dc78e:	db1a      	blt.n	dc7c6 <_strtol_l.isra.0+0xae>
   dc790:	fb00 4003 	mla	r0, r0, r3, r4
   dc794:	2601      	movs	r6, #1
   dc796:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc79a:	e7eb      	b.n	dc774 <_strtol_l.isra.0+0x5c>
   dc79c:	2c2b      	cmp	r4, #43	; 0x2b
   dc79e:	bf08      	it	eq
   dc7a0:	f89c 4000 	ldrbeq.w	r4, [ip]
   dc7a4:	46a8      	mov	r8, r5
   dc7a6:	bf08      	it	eq
   dc7a8:	f100 0c02 	addeq.w	ip, r0, #2
   dc7ac:	e7c8      	b.n	dc740 <_strtol_l.isra.0+0x28>
   dc7ae:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dc7b2:	2d19      	cmp	r5, #25
   dc7b4:	d801      	bhi.n	dc7ba <_strtol_l.isra.0+0xa2>
   dc7b6:	3c37      	subs	r4, #55	; 0x37
   dc7b8:	e7e1      	b.n	dc77e <_strtol_l.isra.0+0x66>
   dc7ba:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dc7be:	2d19      	cmp	r5, #25
   dc7c0:	d804      	bhi.n	dc7cc <_strtol_l.isra.0+0xb4>
   dc7c2:	3c57      	subs	r4, #87	; 0x57
   dc7c4:	e7db      	b.n	dc77e <_strtol_l.isra.0+0x66>
   dc7c6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dc7ca:	e7e4      	b.n	dc796 <_strtol_l.isra.0+0x7e>
   dc7cc:	1c73      	adds	r3, r6, #1
   dc7ce:	d106      	bne.n	dc7de <_strtol_l.isra.0+0xc6>
   dc7d0:	2322      	movs	r3, #34	; 0x22
   dc7d2:	f8ce 3000 	str.w	r3, [lr]
   dc7d6:	4638      	mov	r0, r7
   dc7d8:	b942      	cbnz	r2, dc7ec <_strtol_l.isra.0+0xd4>
   dc7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc7de:	f1b8 0f00 	cmp.w	r8, #0
   dc7e2:	d000      	beq.n	dc7e6 <_strtol_l.isra.0+0xce>
   dc7e4:	4240      	negs	r0, r0
   dc7e6:	2a00      	cmp	r2, #0
   dc7e8:	d0f7      	beq.n	dc7da <_strtol_l.isra.0+0xc2>
   dc7ea:	b10e      	cbz	r6, dc7f0 <_strtol_l.isra.0+0xd8>
   dc7ec:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dc7f0:	6011      	str	r1, [r2, #0]
   dc7f2:	e7f2      	b.n	dc7da <_strtol_l.isra.0+0xc2>
   dc7f4:	2430      	movs	r4, #48	; 0x30
   dc7f6:	2b00      	cmp	r3, #0
   dc7f8:	d1b3      	bne.n	dc762 <_strtol_l.isra.0+0x4a>
   dc7fa:	2308      	movs	r3, #8
   dc7fc:	e7b1      	b.n	dc762 <_strtol_l.isra.0+0x4a>
   dc7fe:	2c30      	cmp	r4, #48	; 0x30
   dc800:	d0a4      	beq.n	dc74c <_strtol_l.isra.0+0x34>
   dc802:	230a      	movs	r3, #10
   dc804:	e7ad      	b.n	dc762 <_strtol_l.isra.0+0x4a>
   dc806:	bf00      	nop
   dc808:	000dd713 	.word	0x000dd713

000dc80c <strtol>:
   dc80c:	4613      	mov	r3, r2
   dc80e:	460a      	mov	r2, r1
   dc810:	4601      	mov	r1, r0
   dc812:	4802      	ldr	r0, [pc, #8]	; (dc81c <strtol+0x10>)
   dc814:	6800      	ldr	r0, [r0, #0]
   dc816:	f7ff bf7f 	b.w	dc718 <_strtol_l.isra.0>
   dc81a:	bf00      	nop
   dc81c:	2003ddb0 	.word	0x2003ddb0

000dc820 <close>:
   dc820:	4b02      	ldr	r3, [pc, #8]	; (dc82c <close+0xc>)
   dc822:	4601      	mov	r1, r0
   dc824:	6818      	ldr	r0, [r3, #0]
   dc826:	f000 b8c9 	b.w	dc9bc <_close_r>
   dc82a:	bf00      	nop
   dc82c:	2003ddb0 	.word	0x2003ddb0

000dc830 <fstat>:
   dc830:	4b02      	ldr	r3, [pc, #8]	; (dc83c <fstat+0xc>)
   dc832:	460a      	mov	r2, r1
   dc834:	4601      	mov	r1, r0
   dc836:	6818      	ldr	r0, [r3, #0]
   dc838:	f000 b8d0 	b.w	dc9dc <_fstat_r>
   dc83c:	2003ddb0 	.word	0x2003ddb0

000dc840 <lseek>:
   dc840:	4613      	mov	r3, r2
   dc842:	460a      	mov	r2, r1
   dc844:	4601      	mov	r1, r0
   dc846:	4802      	ldr	r0, [pc, #8]	; (dc850 <lseek+0x10>)
   dc848:	6800      	ldr	r0, [r0, #0]
   dc84a:	f000 b8dd 	b.w	dca08 <_lseek_r>
   dc84e:	bf00      	nop
   dc850:	2003ddb0 	.word	0x2003ddb0

000dc854 <open>:
   dc854:	b40e      	push	{r1, r2, r3}
   dc856:	b503      	push	{r0, r1, lr}
   dc858:	ab03      	add	r3, sp, #12
   dc85a:	4601      	mov	r1, r0
   dc85c:	4806      	ldr	r0, [pc, #24]	; (dc878 <open+0x24>)
   dc85e:	f853 2b04 	ldr.w	r2, [r3], #4
   dc862:	9301      	str	r3, [sp, #4]
   dc864:	6800      	ldr	r0, [r0, #0]
   dc866:	9b04      	ldr	r3, [sp, #16]
   dc868:	f000 f8e0 	bl	dca2c <_open_r>
   dc86c:	b002      	add	sp, #8
   dc86e:	f85d eb04 	ldr.w	lr, [sp], #4
   dc872:	b003      	add	sp, #12
   dc874:	4770      	bx	lr
   dc876:	bf00      	nop
   dc878:	2003ddb0 	.word	0x2003ddb0

000dc87c <read>:
   dc87c:	4613      	mov	r3, r2
   dc87e:	460a      	mov	r2, r1
   dc880:	4601      	mov	r1, r0
   dc882:	4802      	ldr	r0, [pc, #8]	; (dc88c <read+0x10>)
   dc884:	6800      	ldr	r0, [r0, #0]
   dc886:	f000 b8e3 	b.w	dca50 <_read_r>
   dc88a:	bf00      	nop
   dc88c:	2003ddb0 	.word	0x2003ddb0

000dc890 <unlink>:
   dc890:	4b02      	ldr	r3, [pc, #8]	; (dc89c <unlink+0xc>)
   dc892:	4601      	mov	r1, r0
   dc894:	6818      	ldr	r0, [r3, #0]
   dc896:	f000 b80d 	b.w	dc8b4 <_unlink_r>
   dc89a:	bf00      	nop
   dc89c:	2003ddb0 	.word	0x2003ddb0

000dc8a0 <write>:
   dc8a0:	4613      	mov	r3, r2
   dc8a2:	460a      	mov	r2, r1
   dc8a4:	4601      	mov	r1, r0
   dc8a6:	4802      	ldr	r0, [pc, #8]	; (dc8b0 <write+0x10>)
   dc8a8:	6800      	ldr	r0, [r0, #0]
   dc8aa:	f000 b813 	b.w	dc8d4 <_write_r>
   dc8ae:	bf00      	nop
   dc8b0:	2003ddb0 	.word	0x2003ddb0

000dc8b4 <_unlink_r>:
   dc8b4:	b538      	push	{r3, r4, r5, lr}
   dc8b6:	4d06      	ldr	r5, [pc, #24]	; (dc8d0 <_unlink_r+0x1c>)
   dc8b8:	2300      	movs	r3, #0
   dc8ba:	4604      	mov	r4, r0
   dc8bc:	4608      	mov	r0, r1
   dc8be:	602b      	str	r3, [r5, #0]
   dc8c0:	f7fc fb64 	bl	d8f8c <_unlink>
   dc8c4:	1c43      	adds	r3, r0, #1
   dc8c6:	d102      	bne.n	dc8ce <_unlink_r+0x1a>
   dc8c8:	682b      	ldr	r3, [r5, #0]
   dc8ca:	b103      	cbz	r3, dc8ce <_unlink_r+0x1a>
   dc8cc:	6023      	str	r3, [r4, #0]
   dc8ce:	bd38      	pop	{r3, r4, r5, pc}
   dc8d0:	2003e7ec 	.word	0x2003e7ec

000dc8d4 <_write_r>:
   dc8d4:	b538      	push	{r3, r4, r5, lr}
   dc8d6:	4d07      	ldr	r5, [pc, #28]	; (dc8f4 <_write_r+0x20>)
   dc8d8:	4604      	mov	r4, r0
   dc8da:	4608      	mov	r0, r1
   dc8dc:	4611      	mov	r1, r2
   dc8de:	2200      	movs	r2, #0
   dc8e0:	602a      	str	r2, [r5, #0]
   dc8e2:	461a      	mov	r2, r3
   dc8e4:	f7fc fb1a 	bl	d8f1c <_write>
   dc8e8:	1c43      	adds	r3, r0, #1
   dc8ea:	d102      	bne.n	dc8f2 <_write_r+0x1e>
   dc8ec:	682b      	ldr	r3, [r5, #0]
   dc8ee:	b103      	cbz	r3, dc8f2 <_write_r+0x1e>
   dc8f0:	6023      	str	r3, [r4, #0]
   dc8f2:	bd38      	pop	{r3, r4, r5, pc}
   dc8f4:	2003e7ec 	.word	0x2003e7ec

000dc8f8 <__register_exitproc>:
   dc8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc8fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dc9b8 <__register_exitproc+0xc0>
   dc900:	4606      	mov	r6, r0
   dc902:	f8d8 0000 	ldr.w	r0, [r8]
   dc906:	461f      	mov	r7, r3
   dc908:	460d      	mov	r5, r1
   dc90a:	4691      	mov	r9, r2
   dc90c:	f000 f878 	bl	dca00 <__retarget_lock_acquire_recursive>
   dc910:	4b25      	ldr	r3, [pc, #148]	; (dc9a8 <__register_exitproc+0xb0>)
   dc912:	681c      	ldr	r4, [r3, #0]
   dc914:	b934      	cbnz	r4, dc924 <__register_exitproc+0x2c>
   dc916:	4c25      	ldr	r4, [pc, #148]	; (dc9ac <__register_exitproc+0xb4>)
   dc918:	601c      	str	r4, [r3, #0]
   dc91a:	4b25      	ldr	r3, [pc, #148]	; (dc9b0 <__register_exitproc+0xb8>)
   dc91c:	b113      	cbz	r3, dc924 <__register_exitproc+0x2c>
   dc91e:	681b      	ldr	r3, [r3, #0]
   dc920:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dc924:	6863      	ldr	r3, [r4, #4]
   dc926:	2b1f      	cmp	r3, #31
   dc928:	dd07      	ble.n	dc93a <__register_exitproc+0x42>
   dc92a:	f8d8 0000 	ldr.w	r0, [r8]
   dc92e:	f000 f869 	bl	dca04 <__retarget_lock_release_recursive>
   dc932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dc936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc93a:	b34e      	cbz	r6, dc990 <__register_exitproc+0x98>
   dc93c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dc940:	b988      	cbnz	r0, dc966 <__register_exitproc+0x6e>
   dc942:	4b1c      	ldr	r3, [pc, #112]	; (dc9b4 <__register_exitproc+0xbc>)
   dc944:	b923      	cbnz	r3, dc950 <__register_exitproc+0x58>
   dc946:	f8d8 0000 	ldr.w	r0, [r8]
   dc94a:	f000 f85a 	bl	dca02 <__retarget_lock_release>
   dc94e:	e7f0      	b.n	dc932 <__register_exitproc+0x3a>
   dc950:	f44f 7084 	mov.w	r0, #264	; 0x108
   dc954:	f7fc fd00 	bl	d9358 <malloc>
   dc958:	2800      	cmp	r0, #0
   dc95a:	d0f4      	beq.n	dc946 <__register_exitproc+0x4e>
   dc95c:	2300      	movs	r3, #0
   dc95e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dc962:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dc966:	6863      	ldr	r3, [r4, #4]
   dc968:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dc96c:	2201      	movs	r2, #1
   dc96e:	409a      	lsls	r2, r3
   dc970:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dc974:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dc978:	4313      	orrs	r3, r2
   dc97a:	2e02      	cmp	r6, #2
   dc97c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dc980:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dc984:	bf02      	ittt	eq
   dc986:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dc98a:	431a      	orreq	r2, r3
   dc98c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dc990:	6863      	ldr	r3, [r4, #4]
   dc992:	f8d8 0000 	ldr.w	r0, [r8]
   dc996:	1c5a      	adds	r2, r3, #1
   dc998:	3302      	adds	r3, #2
   dc99a:	6062      	str	r2, [r4, #4]
   dc99c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dc9a0:	f000 f830 	bl	dca04 <__retarget_lock_release_recursive>
   dc9a4:	2000      	movs	r0, #0
   dc9a6:	e7c6      	b.n	dc936 <__register_exitproc+0x3e>
   dc9a8:	2003e7dc 	.word	0x2003e7dc
   dc9ac:	2003e750 	.word	0x2003e750
   dc9b0:	00000000 	.word	0x00000000
   dc9b4:	000d9359 	.word	0x000d9359
   dc9b8:	2003de14 	.word	0x2003de14

000dc9bc <_close_r>:
   dc9bc:	b538      	push	{r3, r4, r5, lr}
   dc9be:	4d06      	ldr	r5, [pc, #24]	; (dc9d8 <_close_r+0x1c>)
   dc9c0:	2300      	movs	r3, #0
   dc9c2:	4604      	mov	r4, r0
   dc9c4:	4608      	mov	r0, r1
   dc9c6:	602b      	str	r3, [r5, #0]
   dc9c8:	f7fc fab8 	bl	d8f3c <_close>
   dc9cc:	1c43      	adds	r3, r0, #1
   dc9ce:	d102      	bne.n	dc9d6 <_close_r+0x1a>
   dc9d0:	682b      	ldr	r3, [r5, #0]
   dc9d2:	b103      	cbz	r3, dc9d6 <_close_r+0x1a>
   dc9d4:	6023      	str	r3, [r4, #0]
   dc9d6:	bd38      	pop	{r3, r4, r5, pc}
   dc9d8:	2003e7ec 	.word	0x2003e7ec

000dc9dc <_fstat_r>:
   dc9dc:	b538      	push	{r3, r4, r5, lr}
   dc9de:	4d07      	ldr	r5, [pc, #28]	; (dc9fc <_fstat_r+0x20>)
   dc9e0:	2300      	movs	r3, #0
   dc9e2:	4604      	mov	r4, r0
   dc9e4:	4608      	mov	r0, r1
   dc9e6:	4611      	mov	r1, r2
   dc9e8:	602b      	str	r3, [r5, #0]
   dc9ea:	f7fc faaf 	bl	d8f4c <_fstat>
   dc9ee:	1c43      	adds	r3, r0, #1
   dc9f0:	d102      	bne.n	dc9f8 <_fstat_r+0x1c>
   dc9f2:	682b      	ldr	r3, [r5, #0]
   dc9f4:	b103      	cbz	r3, dc9f8 <_fstat_r+0x1c>
   dc9f6:	6023      	str	r3, [r4, #0]
   dc9f8:	bd38      	pop	{r3, r4, r5, pc}
   dc9fa:	bf00      	nop
   dc9fc:	2003e7ec 	.word	0x2003e7ec

000dca00 <__retarget_lock_acquire_recursive>:
   dca00:	4770      	bx	lr

000dca02 <__retarget_lock_release>:
   dca02:	4770      	bx	lr

000dca04 <__retarget_lock_release_recursive>:
   dca04:	4770      	bx	lr
	...

000dca08 <_lseek_r>:
   dca08:	b538      	push	{r3, r4, r5, lr}
   dca0a:	4d07      	ldr	r5, [pc, #28]	; (dca28 <_lseek_r+0x20>)
   dca0c:	4604      	mov	r4, r0
   dca0e:	4608      	mov	r0, r1
   dca10:	4611      	mov	r1, r2
   dca12:	2200      	movs	r2, #0
   dca14:	602a      	str	r2, [r5, #0]
   dca16:	461a      	mov	r2, r3
   dca18:	f7fc faa0 	bl	d8f5c <_lseek>
   dca1c:	1c43      	adds	r3, r0, #1
   dca1e:	d102      	bne.n	dca26 <_lseek_r+0x1e>
   dca20:	682b      	ldr	r3, [r5, #0]
   dca22:	b103      	cbz	r3, dca26 <_lseek_r+0x1e>
   dca24:	6023      	str	r3, [r4, #0]
   dca26:	bd38      	pop	{r3, r4, r5, pc}
   dca28:	2003e7ec 	.word	0x2003e7ec

000dca2c <_open_r>:
   dca2c:	b538      	push	{r3, r4, r5, lr}
   dca2e:	4d07      	ldr	r5, [pc, #28]	; (dca4c <_open_r+0x20>)
   dca30:	4604      	mov	r4, r0
   dca32:	4608      	mov	r0, r1
   dca34:	4611      	mov	r1, r2
   dca36:	2200      	movs	r2, #0
   dca38:	602a      	str	r2, [r5, #0]
   dca3a:	461a      	mov	r2, r3
   dca3c:	f7fc fa66 	bl	d8f0c <_open>
   dca40:	1c43      	adds	r3, r0, #1
   dca42:	d102      	bne.n	dca4a <_open_r+0x1e>
   dca44:	682b      	ldr	r3, [r5, #0]
   dca46:	b103      	cbz	r3, dca4a <_open_r+0x1e>
   dca48:	6023      	str	r3, [r4, #0]
   dca4a:	bd38      	pop	{r3, r4, r5, pc}
   dca4c:	2003e7ec 	.word	0x2003e7ec

000dca50 <_read_r>:
   dca50:	b538      	push	{r3, r4, r5, lr}
   dca52:	4d07      	ldr	r5, [pc, #28]	; (dca70 <_read_r+0x20>)
   dca54:	4604      	mov	r4, r0
   dca56:	4608      	mov	r0, r1
   dca58:	4611      	mov	r1, r2
   dca5a:	2200      	movs	r2, #0
   dca5c:	602a      	str	r2, [r5, #0]
   dca5e:	461a      	mov	r2, r3
   dca60:	f7fc fa64 	bl	d8f2c <_read>
   dca64:	1c43      	adds	r3, r0, #1
   dca66:	d102      	bne.n	dca6e <_read_r+0x1e>
   dca68:	682b      	ldr	r3, [r5, #0]
   dca6a:	b103      	cbz	r3, dca6e <_read_r+0x1e>
   dca6c:	6023      	str	r3, [r4, #0]
   dca6e:	bd38      	pop	{r3, r4, r5, pc}
   dca70:	2003e7ec 	.word	0x2003e7ec

000dca74 <dynalib_user>:
   dca74:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   dca84:	00000000 6d6f7246 20732520 25206f74     ....From %s to %
   dca94:	74530073 20657461 6e617254 69746973     s.State Transiti
   dcaa4:	52006e6f 726f7065 72662074 65757165     on.Report freque
   dcab4:	2079636e 20746573 25206f74 696d2069     ncy set to %i mi
   dcac4:	6574756e 69540073 4e00656d 4c20746f     nutes.Time.Not L
   dcad4:	5020776f 7265776f 74655300 776f4c20     ow Power.Set Low
   dcae4:	776f5020 4d207265 0065646f 61656c43      Power Mode.Clea
   dcaf4:	20646572 20776f4c 65776f50 6f4d2072     red Low Power Mo
   dcb04:	61006564 702e7070 00716275 2e707061     de.app.pubq.app.
   dcb14:	66716573 00656c69 6f706552 46207472     seqfile.Report F
   dcb24:	75716572 79636e65 776f4c00 65776f50     requency.LowPowe
   dcb34:	6f4d2072 53006564 46207465 75716572     r Mode.Set Frequ
   dcb44:	79636e65 696e6900 61662074 64656c69     ency.init failed
   dcb54:	54534500 54444535 2e334d2c 2f302e32     .EST5EDT,M3.2.0/
   dcb64:	30303a32 2c30303a 2e31314d 2f302e31     2:00:00,M11.1.0/
   dcb74:	30303a32 0030303a 303a3630 30303a30     2:00:00.06:00:00
   dcb84:	3a313200 353a3935 74530039 75747261     .21:59:59.Startu
   dcb94:	6f632070 656c706d 61206574 73252074     p complete at %s
   dcba4:	74697720 61622068 72657474 34252079      with battery %4
   dcbb4:	0066322e 65636552 64657669 6f726620     .2f.Received fro
   dcbc4:	7830206d 78323025 74697720 73722068     m 0x%02x with rs
   dcbd4:	253d6973 736d2064 203d2067 53006425     si=%d msg = %d.S
   dcbe4:	20746e65 70736572 65736e6f 206f7420     ent response to 
   dcbf4:	65696c63 6d20746e 61737365 3d206567     client message =
   dcc04:	2c642520 6d697420 203d2065 202c7525      %d, time = %u, 
   dcc14:	7478656e 70657220 2074726f 7525203d     next report = %u
   dcc24:	6e657300 576f7464 20746961 6c696166     .sendtoWait fail
   dcc34:	7b006465 646f6e22 22646965 2c75253a     ed.{"nodeid":%u,
   dcc44:	6f682220 796c7275 75253a22 6422202c      "hourly":%u, "d
   dcc54:	796c6961 75253a22 6162222c 72657474     aily":%u,"batter
   dcc64:	253a2279 6b222c64 22317965 7325223a     y":%d,"key1":"%s
   dcc74:	74222c22 22706d65 2c64253a 65722220     ","temp":%d, "re
   dcc84:	73746573 64253a22 6122202c 7472656c     sets":%d, "alert
   dcc94:	253a2273 72222c64 22697373 2c64253a     s":%d,"rssi":%d,
   dcca4:	736d2220 253a2267 74222c64 73656d69      "msg":%d,"times
   dccb4:	706d6174 6c253a22 30303075 6255007d     tamp":%lu000}.Ub
   dccc4:	746f6469 6f4c2d73 482d4152 2d6b6f6f     idots-LoRA-Hook-
   dccd4:	44003176 6f637369 63656e6e 676e6974     v1.Disconnecting
   dcce4:	6f726620 6150206d 63697472 2f20656c      from Particle /
   dccf4:	6c654320 616c756c 00000072               Cellular...

000dcd00 <_ZTVN5spark10LogHandlerE>:
	...
   dcd10:	000d40a5 000d40c9                       .@...@..

000dcd18 <_ZTVN5spark16SerialLogHandlerE>:
	...
   dcd20:	000d40fd 000d4131 000dacb5 000d40cb     .@..1A.......@..
   dcd30:	6e6b6e55 006e776f 20746f4e 72616843     Unknown.Not Char
   dcd40:	676e6967 61684300 64656772 73694400     ging.Charged.Dis
   dcd50:	72616863 676e6967 75614600 4400746c     charging.Fault.D
   dcd60:	6e6f6369 7463656e 42006465 676b6361     iconnected.Backg
   dcd70:	6e756f72 62755064 6873696c 00004b52     roundPublishRK..

000dcd80 <_ZTV19BackgroundPublishRK>:
	...
   dcd88:	000d4de5 000d4e01 253a6425 64253a64     .M...N..%d:%d:%d
   dcd98:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   dcda8:	4d003935 252e6425 64252e64 5a002c00     59.M%d.%d.%d.,.Z
   dcdb8:	302b2500 253a6433 00753230 74636576     .%+03d:%02u.vect
   dcdc8:	3a3a726f 725f4d5f 6c6c6165 695f636f     or::_M_realloc_i
   dcdd8:	7265736e 00000074                       nsert...

000dcde0 <_ZTV9LocalTime>:
	...
   dcde8:	000d513d 000d5155                       =Q..UQ..

000dcdf0 <_ZTV12LocalTimeHMS>:
	...
   dcdf8:	000d50df 000d50f1                       .P...P..

000dce00 <_ZTV15LocalTimeChange>:
	...
   dce08:	000d50e1 000d50ff                       .P...P..

000dce10 <_ZTV22LocalTimePosixTimezone>:
	...
   dce18:	000d510d 000d5129 656c6966 3d6d754e     .Q..)Q..fileNum=
   dce28:	73206425 3d657a69 00646c25 64616572     %d size=%ld.read
   dce38:	75657551 6c694665 64252065 65766520     QueueFile %d eve
   dce48:	253d746e 61642073 253d6174 65720073     nt=%s data=%s.re
   dce58:	75516461 46657565 20656c69 63206425     adQueueFile %d c
   dce68:	7572726f 64657470 65766520 6e20746e     orrupted event n
   dce78:	20656d61 6420726f 00617461 64616572     ame or data.read
   dce88:	75657551 6c694665 64252065 64616220     QueueFile %d bad
   dce98:	67616d20 253d6369 786c3830 72657620      magic=%08lx ver
   dcea8:	6e6f6973 2075253d 64616568 69537265     sion=%u headerSi
   dceb8:	253d657a 616e2075 654c656d 75253d6e     ze=%u nameLen=%u
   dcec8:	73752f00 75702f72 65757162 77006575     ./usr/pubqueue.w
   dced8:	65746972 75657551 466f5465 73656c69     riteQueueToFiles
   dcee8:	6c696620 6d754e65 0064253d 65736572      fileNum=%d.rese
   dcef8:	726f2074 73696420 6e6e6f63 20746365     t or disconnect 
   dcf08:	6e657665 73202c74 20657661 656c6966     event, save file
   dcf18:	6f742073 65757120 72006575 64006d61     s to queue.ram.d
   dcf28:	61637369 6e696472 6f632067 70757272     iscarding corrup
   dcf38:	20646574 656c6966 00642520 6c627570     ted file %d.publ
   dcf48:	69687369 2520676e 76652073 3d746e65     ishing %s event=
   dcf58:	64207325 3d617461 64007325 61637369     %s data=%s.disca
   dcf68:	64656472 65766520 2520746e 59530064     rded event %d.SY
   dcf78:	4d455453 5248545f 28444145 42414e45     STEM_THREAD(ENAB
   dcf88:	2944454c 20736920 75716572 64657269     LED) is required
   dcf98:	62757000 6873696c 6d6d6f43 65206e6f     .publishCommon e
   dcfa8:	746e6576 656d614e 2073253d 6e657665     ventName=%s even
   dcfb8:	74614474 73253d61 6e616300 20746f6e     tData=%s.cannot 
   dcfc8:	61657263 73206574 3a3a6474 75716564     create std::dequ
   dcfd8:	616c2065 72656772 61687420 616d206e     e larger than ma
   dcfe8:	69735f78 2928657a 6c696600 65755165     x_size().fileQue
   dcff8:	654c6575 75253d6e 6d617220 75657551     ueLen=%u ramQueu
   dd008:	6e654c65 2075253d 6e6e6f63 65746365     eLen=%u connecte
   dd018:	64253d64 65757100 20646575 72206f74     d=%d.queued to r
   dd028:	75516d61 00657565 6c627570 20687369     amQueue.publish 
   dd038:	63637573 20737365 72006425 766f6d65     success %d.remov
   dd048:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   dd058:	66206873 656c6961 64252064 69727700     sh failed %d.wri
   dd068:	676e6974 206f7420 656c6966 66612073     ting to files af
   dd078:	20726574 6c627570 20687369 6c696166     ter publish fail
   dd088:	00657275                                ure.

000dd08c <_ZTV17PublishQueuePosix>:
	...
   dd094:	000d6e1d 000d70f5 000d7119              .n...p...q..

000dd0a0 <_ZTV15RHGenericDriver>:
	...
   dd0b0:	000d7235 000d40a5 000d40a5 000d40a5     5r...@...@...@..
   dd0c0:	000d40a5 000d7297 000d7239 000d72e7     .@...r..9r...r..
   dd0d0:	000d72b5 000d730b 000d7243 000d724b     .r...s..Cr..Kr..
   dd0e0:	000d724f 000d7253 000d7257 000d725b     Or..Sr..Wr..[r..
   dd0f0:	000d7247 000d7267 000d726b 000d726f     Gr..gr..kr..or..
   dd100:	000d7273 000d7277 000d727d 000d7281     sr..wr..}r...r..
   dd110:	000d7243 000d7285 000d728b 000d7291     Cr...r...r...r..

000dd120 <_ZTV12RHGenericSPI>:
	...
   dd128:	000d40a5 000d7369 000d736b 000d40a5     .@..is..ks...@..
   dd138:	000d40a5 000d7373 000d7377 000d737b     .@..ss..ws..{s..
   dd148:	000d736d 000d736f 000d7371 61666564     ms..os..qs..defa
   dd158:	20746c75 42534d00 42534c00 50533c00     ult .MSB.LSB.<SP
   dd168:	74655349 676e6974 65642073 6c756166     ISettings defaul
   dd178:	3c003e74 53495053 69747465 2073676e     t>.<SPISettings 
   dd188:	75257325 20732520 45444f4d 003e7525     %s%u %s MODE%u>.

000dd198 <_ZTVN8particle11SPISettingsE>:
	...
   dd1a0:	000d73c1 000d7395 000d7397              .s...s...s..

000dd1ac <_ZTV13RHHardwareSPI>:
	...
   dd1b4:	000d7475 000d7489 000d7497 000d74a5     ut...t...t...t..
   dd1c4:	000d7511 000d7373 000d7377 000d737b     .u..ss..ws..{s..
   dd1d4:	000d751f 000d7533 000d7541              .u..3u..Au..

000dd1e0 <_ZTV6RHMesh>:
	...
   dd1e8:	000d7611 000d78bd 000d756d 000d7559     .v...x..mu..Yu..

000dd1f8 <_ZTV8RHRouter>:
	...
   dd200:	000d7b23 000d7b67                       #{..g{..

000dd208 <_ZTV11RHSPIDriver>:
	...
   dd218:	000d7e05 000d40a5 000d40a5 000d40a5     .~...@...@...@..
   dd228:	000d40a5 000d7297 000d7239 000d72e7     .@...r..9r...r..
   dd238:	000d72b5 000d730b 000d7243 000d724b     .r...s..Cr..Kr..
   dd248:	000d724f 000d7253 000d7257 000d725b     Or..Sr..Wr..[r..
   dd258:	000d7247 000d7267 000d726b 000d726f     Gr..gr..kr..or..
   dd268:	000d7273 000d7277 000d727d 000d7281     sr..wr..}r...r..
   dd278:	000d7243 000d7285 000d728b 000d7291     Cr...r...r...r..
   dd288:	000d7e31 000d7e3b                       1~..;~..

000dd290 <_ZL18MODEM_CONFIG_TABLE>:
   dd290:	92047472 94480474 0cc47804 0004b472     rt..t.H..x..r...

000dd2a0 <_ZTV7RH_RF95>:
	...
   dd2a8:	000d7fa3 000d7fdb 000d8499 000d82ff     ................
   dd2b8:	000d8011 000d8347 000d7f9f 000d7297     ....G........r..
   dd2c8:	000d7239 000d72e7 000d72b5 000d730b     9r...r...r...s..
   dd2d8:	000d7fa5 000d724b 000d724f 000d7253     ....Kr..Or..Sr..
   dd2e8:	000d7257 000d725b 000d7247 000d7267     Wr..[r..Gr..gr..
   dd2f8:	000d726b 000d726f 000d7273 000d7277     kr..or..sr..wr..
   dd308:	000d727d 000d7281 000d7feb 000d7285     }r...r.......r..
   dd318:	000d728b 000d7291 000d7e31 000d7e3b     .r...r..1~..;~..
   dd328:	000d7f9b 64383025 72002f00 766f6d65     ....%08d./.remov
   dd338:	25206465 73250073 69786520 20737473     ed %s.%s exists 
   dd348:	20646e61 61207369 72696420 6f746365     and is a directo
   dd358:	66007972 20656c69 74206e69 77206568     ry.file in the w
   dd368:	202c7961 656c6564 676e6974 00732520     ay, deleting %s.
   dd378:	74617473 6c696620 65206465 6f6e7272     stat filed errno
   dd388:	0064253d 61657263 20646574 20726964     =%d.created dir 
   dd398:	6d007325 7269646b 69616620 2064656c     %s.mkdir failed 
   dd3a8:	6e727265 64253d6f 75002e00 6e6f636e     errno=%d...uncon
   dd3b8:	75676966 20646572 50726964 00687461     figured dirPath.
   dd3c8:	6e616373 676e696e 20732520 68746977     scanning %s with
   dd3d8:	74617020 6e726574 00732520 69646461      pattern %s.addi
   dd3e8:	7420676e 7571206f 20657565 25206425     ng to queue %d %
   dd3f8:	65670073 6c694674 6f724665 6575516d     s.getFileFromQue
   dd408:	72206575 72757465 2064656e 00006425     ue returned %d..

000dd418 <_ZTV14SequentialFile>:
	...
   dd420:	000d88e5 000d8911 000d859d 2e707061     ............app.
   dd430:	38316261 00003530                       ab1805..

000dd438 <_ZTVN5spark13CellularClassE>:
	...
   dd440:	000d94e3 000d94d9 000d94cf 000d9485     ................
   dd450:	000d94c3 000d94b7 000db00d 000db015     ................
   dd460:	000d94ab 000d94a3 000d9499 000d948f     ................
   dd470:	000db045                                E...

000dd474 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd47c:	000d951d 000d9523 000d9561 000d9531     ....#...a...1...
   dd48c:	000d951f                                ....

000dd490 <_ZTVN5spark13EthernetClassE>:
	...
   dd498:	000d9b37 000d9b2d 000d9b23 000d9b19     7...-...#.......
   dd4a8:	000d9b0d 000d9b01 000db00d 000db015     ................
   dd4b8:	000d9af5 000d9aed 000d9ae3 000d9ad9     ................
   dd4c8:	000db045                                E...

000dd4cc <_ZTV7TwoWire>:
	...
   dd4d4:	000d9b55 000d9b9f 000d9b77 000d9b57     U.......w...W...
   dd4e4:	000d9b7f 000d9b87 000d9b8f 000d9b97     ................

000dd4f4 <_ZTV9IPAddress>:
	...
   dd4fc:	000d9c39 000d9c29 000d9c2b 34302575     9...)...+...u%04
   dd50c:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   dd51c:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   dd52c:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   dd53c:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   dd54c:	005b2000 65646f63 00203d20 64006925     . [.code = .%i.d
   dd55c:	69617465 3d20736c 0a0d0020 6c006300     etails = ....c.l
   dd56c:	6e66006e 646f6300 65640065 6c696174     n.fn.code.detail
   dd57c:	00000000                                ....

000dd580 <_ZTVN5spark16JSONStreamWriterE>:
	...
   dd588:	000da0f5 000da11b 000da0d9 000d9d39     ............9...

000dd598 <_ZTVN5spark16StreamLogHandlerE>:
	...
   dd5a0:	000da4d1 000da4e9 000dacb5 000d40cb     .............@..

000dd5b0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dd5b8:	000da4fd 000da511 000dae59 000da0e1     ........Y.......

000dd5c8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dd5d0:	000da0f3 000da129 000dabf1 000da0e3     ....)...........

000dd5e0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dd5e8:	000da0f1 000da137 000da419 000da155     ....7.......U...

000dd5f8 <_ZTVN5spark12NetworkClassE>:
	...
   dd600:	000dafcd 000dafd7 000dafe1 000dafeb     ................
   dd610:	000daff5 000db001 000db00d 000db015     ................
   dd620:	000db01d 000db029 000db031 000db03b     ....)...1...;...
   dd630:	000db045                                E...

000dd634 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dd634:	18100800 38302820 252d5925 64252d6d     .... (08%Y-%m-%d
   dd644:	3a482554 253a4d25 007a2553 74637361     T%H:%M:%S%z.asct
   dd654:	00656d69                                ime.

000dd658 <_ZTV11USARTSerial>:
	...
   dd660:	000db78d 000db7fb 000db7d3 000db12d     ............-...
   dd670:	000db7a3 000db7bf 000db7b1 000db7cd     ................
   dd680:	000db78f 000db795                       ........

000dd688 <_ZTV9USBSerial>:
	...
   dd690:	000db89b 000db903 000db8d9 000db12d     ............-...
   dd6a0:	000db8cb 000db89d 000db8ad 000db8fd     ................
   dd6b0:	000db8bd 000db895                       ........

000dd6b8 <_ZSt7nothrow>:
   dd6b8:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   dd6c8:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000dd6d9 <day_name.6145>:
   dd6d9:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   dd6e9:	61536972                                 riSat

000dd6ee <mon_name.6146>:
   dd6ee:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   dd6fe:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   dd70e:	63654476                                vDec

000dd712 <_ctype_>:
   dd712:	20202000 20202020 28282020 20282828     .         ((((( 
   dd722:	20202020 20202020 20202020 20202020                     
   dd732:	10108820 10101010 10101010 10101010      ...............
   dd742:	04040410 04040404 10040404 10101010     ................
   dd752:	41411010 41414141 01010101 01010101     ..AAAAAA........
   dd762:	01010101 01010101 01010101 10101010     ................
   dd772:	42421010 42424242 02020202 02020202     ..BBBBBB........
   dd782:	02020202 02020202 02020202 10101010     ................
   dd792:	00000020 00000000 00000000 00000000      ...............
	...

000dd813 <link_const_variable_data_end>:
	...

000dd814 <link_constructors_location>:
   dd814:	000d44cd 	.word	0x000d44cd
   dd818:	000d70e5 	.word	0x000d70e5
   dd81c:	000d7549 	.word	0x000d7549
   dd820:	000d8c2d 	.word	0x000d8c2d
   dd824:	000d8c3d 	.word	0x000d8c3d
   dd828:	000d9475 	.word	0x000d9475
   dd82c:	000d94ed 	.word	0x000d94ed
   dd830:	000d9b41 	.word	0x000d9b41
   dd834:	000daca5 	.word	0x000daca5
   dd838:	000db119 	.word	0x000db119
   dd83c:	000db26d 	.word	0x000db26d
   dd840:	000db6e1 	.word	0x000db6e1
   dd844:	000db779 	.word	0x000db779

000dd848 <link_constructors_end>:
	...
