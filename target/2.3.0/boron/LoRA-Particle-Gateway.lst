
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/2.3.0/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c2e0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000e0300  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000017c  2003db40  000e0304  0002db40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000b34  2003dcc0  2003dcc0  0003dcc0  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000e0480  000e0480  00030480  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000e04ac  000e04ac  000304ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00357cd7  00000000  00000000  000304b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000311a9  00000000  00000000  00388187  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00050bce  00000000  00000000  003b9330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00004218  00000000  00000000  00409efe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000d320  00000000  00000000  0040e116  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00058d41  00000000  00000000  0041b436  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0007e8e6  00000000  00000000  00474177  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0013a90c  00000000  00000000  004f2a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c174  00000000  00000000  0062d36c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00a fbe9 	bl	de808 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00a fc0b 	bl	de858 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003db40 	.word	0x2003db40
   d404c:	000e0304 	.word	0x000e0304
   d4050:	2003dcbc 	.word	0x2003dcbc
   d4054:	2003dcc0 	.word	0x2003dcc0
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f009 fdef 	bl	ddc44 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000e02b0 	.word	0x000e02b0
   d4080:	000e02f4 	.word	0x000e02f4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bac2 	b.w	d460c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fc05 	bl	d4898 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f009 bd8f 	b.w	ddbb4 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f006 bdcf 	b.w	dac38 <malloc>

000d409a <_Znaj>:
   d409a:	f006 bdcd 	b.w	dac38 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f006 bdd3 	b.w	dac48 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f006 fc62 	bl	da974 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000da525 	.word	0x000da525

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d40c8:	b40e      	push	{r1, r2, r3}
   d40ca:	b510      	push	{r4, lr}
   d40cc:	b08d      	sub	sp, #52	; 0x34
   d40ce:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d40d0:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d40d2:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d40d6:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d40d8:	2300      	movs	r3, #0
   d40da:	2020      	movs	r0, #32
   d40dc:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40e0:	e9cd 4200 	strd	r4, r2, [sp]
   d40e4:	201e      	movs	r0, #30
   d40e6:	aa04      	add	r2, sp, #16
   d40e8:	f006 fc54 	bl	da994 <log_message_v>
}
   d40ec:	b00d      	add	sp, #52	; 0x34
   d40ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d40f2:	b003      	add	sp, #12
   d40f4:	4770      	bx	lr
	...

000d40f8 <_Z14initializeLoRAv>:
// Dont put this on the stack:
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size 
//********************************************************


bool initializeLoRA() {
   d40f8:	b510      	push	{r4, lr}
 	// Set up the Radio Module
	if (!manager.init()) {
   d40fa:	480b      	ldr	r0, [pc, #44]	; (d4128 <_Z14initializeLoRAv+0x30>)
   d40fc:	f005 f906 	bl	d930c <_ZN8RHRouter4initEv>
   d4100:	4604      	mov	r4, r0
   d4102:	b928      	cbnz	r0, d4110 <_Z14initializeLoRAv+0x18>
		Log.info("init failed");	// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   d4104:	4909      	ldr	r1, [pc, #36]	; (d412c <_Z14initializeLoRAv+0x34>)
   d4106:	480a      	ldr	r0, [pc, #40]	; (d4130 <_Z14initializeLoRAv+0x38>)
   d4108:	f7ff ffde 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?

	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?

	return true;
}
   d410c:	4620      	mov	r0, r4
   d410e:	bd10      	pop	{r4, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   d4110:	ed9f 0a08 	vldr	s0, [pc, #32]	; d4134 <_Z14initializeLoRAv+0x3c>
   d4114:	4808      	ldr	r0, [pc, #32]	; (d4138 <_Z14initializeLoRAv+0x40>)
   d4116:	f005 fbcf 	bl	d98b8 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   d411a:	4807      	ldr	r0, [pc, #28]	; (d4138 <_Z14initializeLoRAv+0x40>)
   d411c:	2200      	movs	r2, #0
   d411e:	2117      	movs	r1, #23
   d4120:	f005 fd44 	bl	d9bac <_ZN7RH_RF9510setTxPowerEab>
	return true;
   d4124:	e7f2      	b.n	d410c <_Z14initializeLoRAv+0x14>
   d4126:	bf00      	nop
   d4128:	2003deec 	.word	0x2003deec
   d412c:	000dedf0 	.word	0x000dedf0
   d4130:	2003e570 	.word	0x2003e570
   d4134:	4464c000 	.word	0x4464c000
   d4138:	2003ddbc 	.word	0x2003ddbc

000d413c <_Z12flashTheLEDsv>:

void flashTheLEDs() {
   d413c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	time_t lastChange = 0;
	int flashes = 0;
   d4140:	f04f 0b00 	mov.w	fp, #0
	time_t lastChange = 0;
   d4144:	465c      	mov	r4, fp
   d4146:	465d      	mov	r5, fp

	while (flashes <= 6) {
		if (millis() - lastChange > 1000) {
   d4148:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   d414c:	f04f 0900 	mov.w	r9, #0
	while (flashes <= 6) {
   d4150:	f1bb 0f07 	cmp.w	fp, #7
   d4154:	d01b      	beq.n	d418e <_Z12flashTheLEDsv+0x52>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4156:	f006 f9ed 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
		if (millis() - lastChange > 1000) {
   d415a:	1b06      	subs	r6, r0, r4
   d415c:	eb65 0745 	sbc.w	r7, r5, r5, lsl #1
   d4160:	45b0      	cmp	r8, r6
   d4162:	eb79 0307 	sbcs.w	r3, r9, r7
   d4166:	daf3      	bge.n	d4150 <_Z12flashTheLEDsv+0x14>
   d4168:	f006 f9e4 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
			lastChange = millis();
			digitalWrite(BLUE_LED, !digitalRead(BLUE_LED));
   d416c:	4b0b      	ldr	r3, [pc, #44]	; (d419c <_Z12flashTheLEDsv+0x60>)
   d416e:	f8b3 a000 	ldrh.w	sl, [r3]
			lastChange = millis();
   d4172:	4604      	mov	r4, r0
			digitalWrite(BLUE_LED, !digitalRead(BLUE_LED));
   d4174:	4650      	mov	r0, sl
   d4176:	f009 fe17 	bl	ddda8 <digitalRead>
   d417a:	fab0 f180 	clz	r1, r0
   d417e:	0949      	lsrs	r1, r1, #5
   d4180:	4650      	mov	r0, sl
   d4182:	f009 fdf8 	bl	ddd76 <digitalWrite>
			lastChange = millis();
   d4186:	2500      	movs	r5, #0
			flashes++;
   d4188:	f10b 0b01 	add.w	fp, fp, #1
   d418c:	e7e0      	b.n	d4150 <_Z12flashTheLEDsv+0x14>
		}
	}
	digitalWrite(BLUE_LED, LOW);
   d418e:	4b03      	ldr	r3, [pc, #12]	; (d419c <_Z12flashTheLEDsv+0x60>)
   d4190:	2100      	movs	r1, #0
   d4192:	8818      	ldrh	r0, [r3, #0]
}
   d4194:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(BLUE_LED, LOW);
   d4198:	f009 bded 	b.w	ddd76 <digitalWrite>
   d419c:	000df108 	.word	0x000df108

000d41a0 <_Z20listenForLoRAMessagev>:

bool listenForLoRAMessage() {
   d41a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d41a4:	b090      	sub	sp, #64	; 0x40

	uint8_t len = sizeof(buf);
   d41a6:	23f9      	movs	r3, #249	; 0xf9
	uint8_t from;
	uint8_t messageFlag = 0;
   d41a8:	2600      	movs	r6, #0
	uint8_t len = sizeof(buf);
   d41aa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21


	if (manager.recvfromAckTimeout(buf, &len, 3000, &from,__null,__null,&messageFlag))	{	// We have received a message
   d41ae:	4c64      	ldr	r4, [pc, #400]	; (d4340 <_Z20listenForLoRAMessagev+0x1a0>)
   d41b0:	4864      	ldr	r0, [pc, #400]	; (d4344 <_Z20listenForLoRAMessagev+0x1a4>)
   d41b2:	9604      	str	r6, [sp, #16]
   d41b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   d41b8:	e9cd 6302 	strd	r6, r3, [sp, #8]
   d41bc:	f10d 0322 	add.w	r3, sp, #34	; 0x22
   d41c0:	9300      	str	r3, [sp, #0]
   d41c2:	9601      	str	r6, [sp, #4]
   d41c4:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d41c8:	f10d 0221 	add.w	r2, sp, #33	; 0x21
   d41cc:	4621      	mov	r1, r4
	uint8_t messageFlag = 0;
   d41ce:	f88d 6023 	strb.w	r6, [sp, #35]	; 0x23
	if (manager.recvfromAckTimeout(buf, &len, 3000, &from,__null,__null,&messageFlag))	{	// We have received a message
   d41d2:	f004 ff39 	bl	d9048 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>
   d41d6:	4605      	mov	r5, r0
   d41d8:	2800      	cmp	r0, #0
   d41da:	f000 809f 	beq.w	d431c <_Z20listenForLoRAMessagev+0x17c>
		digitalWrite(BLUE_LED,HIGH);			        // Signal we are using the radio
   d41de:	4b5a      	ldr	r3, [pc, #360]	; (d4348 <_Z20listenForLoRAMessagev+0x1a8>)
   d41e0:	881f      	ldrh	r7, [r3, #0]
   d41e2:	2101      	movs	r1, #1
   d41e4:	4638      	mov	r0, r7
   d41e6:	f009 fdc6 	bl	ddd76 <digitalWrite>
		buf[len] = 0;
   d41ea:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
		Log.info("Received from 0x%02x with rssi=%d msg = %d with flag %d", from, driver.lastRssi(), buf[16], (0x0F & messageFlag));
   d41ee:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   d41f2:	4856      	ldr	r0, [pc, #344]	; (d434c <_Z20listenForLoRAMessagev+0x1ac>)
		buf[len] = 0;
   d41f4:	54e6      	strb	r6, [r4, r3]
		Log.info("Received from 0x%02x with rssi=%d msg = %d with flag %d", from, driver.lastRssi(), buf[16], (0x0F & messageFlag));
   d41f6:	9207      	str	r2, [sp, #28]
   d41f8:	f004 fc03 	bl	d8a02 <_ZN15RHGenericDriver8lastRssiEv>
   d41fc:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   d4200:	9a07      	ldr	r2, [sp, #28]
   d4202:	f001 010f 	and.w	r1, r1, #15
   d4206:	9101      	str	r1, [sp, #4]
   d4208:	7c21      	ldrb	r1, [r4, #16]
   d420a:	9100      	str	r1, [sp, #0]
   d420c:	4603      	mov	r3, r0
   d420e:	4950      	ldr	r1, [pc, #320]	; (d4350 <_Z20listenForLoRAMessagev+0x1b0>)
   d4210:	4850      	ldr	r0, [pc, #320]	; (d4354 <_Z20listenForLoRAMessagev+0x1b4>)
   d4212:	f7ff ff59 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>

		sysStatus.nodeNumber = buf[2] << 8 | buf[3]; // One time kluge until I implement the join process.
   d4216:	8863      	ldrh	r3, [r4, #2]
   d4218:	78a1      	ldrb	r1, [r4, #2]
   d421a:	78e2      	ldrb	r2, [r4, #3]
   d421c:	ba5b      	rev16	r3, r3
   d421e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   d4222:	b29b      	uxth	r3, r3
   d4224:	494c      	ldr	r1, [pc, #304]	; (d4358 <_Z20listenForLoRAMessagev+0x1b8>)

		if(sysStatus.nodeNumber == (buf[2] << 8 | buf[3])) {
   d4226:	429a      	cmp	r2, r3
		sysStatus.nodeNumber = buf[2] << 8 | buf[3]; // One time kluge until I implement the join process.
   d4228:	804a      	strh	r2, [r1, #2]
		if(sysStatus.nodeNumber == (buf[2] << 8 | buf[3])) {
   d422a:	4688      	mov	r8, r1
   d422c:	d17a      	bne.n	d4324 <_Z20listenForLoRAMessagev+0x184>
			sysStatus.nodeNumber = buf[2] << 8 | buf[3];
			current.hourly = buf[5] << 8 | buf[6];
   d422e:	7961      	ldrb	r1, [r4, #5]
   d4230:	79a2      	ldrb	r2, [r4, #6]
   d4232:	4b4a      	ldr	r3, [pc, #296]	; (d435c <_Z20listenForLoRAMessagev+0x1bc>)
   d4234:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   d4238:	839a      	strh	r2, [r3, #28]
			current.daily = buf[7] << 8 | buf[8];
   d423a:	79e1      	ldrb	r1, [r4, #7]
   d423c:	7a22      	ldrb	r2, [r4, #8]
   d423e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   d4242:	83da      	strh	r2, [r3, #30]
			current.stateOfCharge = buf[10];
   d4244:	7aa2      	ldrb	r2, [r4, #10]
   d4246:	605a      	str	r2, [r3, #4]
			current.batteryState = buf[11];
   d4248:	7ae2      	ldrb	r2, [r4, #11]
   d424a:	721a      	strb	r2, [r3, #8]
			current.internalTempC = buf[9];
   d424c:	7a62      	ldrb	r2, [r4, #9]
   d424e:	701a      	strb	r2, [r3, #0]
			sysStatus.resetCount = buf[12];
   d4250:	7b22      	ldrb	r2, [r4, #12]
   d4252:	f8c8 200c 	str.w	r2, [r8, #12]
			sysStatus.lastAlertCode = buf[13];
   d4256:	7b62      	ldrb	r2, [r4, #13]
			current.rssi = (buf[14] << 8 | buf[15]) - 65535;
   d4258:	7ba1      	ldrb	r1, [r4, #14]
			sysStatus.lastAlertCode = buf[13];
   d425a:	f888 201c 	strb.w	r2, [r8, #28]
			current.rssi = (buf[14] << 8 | buf[15]) - 65535;
   d425e:	7be2      	ldrb	r2, [r4, #15]
   d4260:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   d4264:	3201      	adds	r2, #1
   d4266:	831a      	strh	r2, [r3, #24]
			current.messageNumber = buf[16];
   d4268:	7c22      	ldrb	r2, [r4, #16]
   d426a:	769a      	strb	r2, [r3, #26]

		// Send a reply back to the originator client
		uint8_t data[9];
		data[0] = 0;                                // to be replaced/updated
		data[1] = 0;                                // to be replaced/updated       
		data[2] = buf[16];							// Message number
   d426c:	7c23      	ldrb	r3, [r4, #16]
   d426e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		data[0] = 0;                                // to be replaced/updated
   d4272:	2600      	movs	r6, #0
   d4274:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
		data[3] = ((uint8_t) ((Time.now()) >> 24)); // Fourth byte - current time
   d4278:	f009 fb53 	bl	dd922 <_ZN9TimeClass3nowEv>
   d427c:	1600      	asrs	r0, r0, #24
   d427e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
		data[4] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   d4282:	f009 fb4e 	bl	dd922 <_ZN9TimeClass3nowEv>
   d4286:	1400      	asrs	r0, r0, #16
   d4288:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
		data[5] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   d428c:	f009 fb49 	bl	dd922 <_ZN9TimeClass3nowEv>
   d4290:	1200      	asrs	r0, r0, #8
   d4292:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
		data[6] = ((uint8_t) (Time.now()));		    // First byte			
   d4296:	f009 fb44 	bl	dd922 <_ZN9TimeClass3nowEv>
		data[7] = highByte(sysStatus.frequencyMinutes);	// Time till next report
   d429a:	f8b8 301a 	ldrh.w	r3, [r8, #26]
		data[8] = lowByte(sysStatus.frequencyMinutes);		
   d429e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
		data[7] = highByte(sysStatus.frequencyMinutes);	// Time till next report
   d42a2:	121a      	asrs	r2, r3, #8
   d42a4:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b

		Log.info("Sent response to client message = %d, time = %s, next report = %u minutes", data[2], Time.timeStr(data[3] << 24 | data[4] << 16 | data[5] <<8 | data[6]).c_str(), (data[7] << 8 | data[8]));
   d42a8:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   d42ac:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
		data[6] = ((uint8_t) (Time.now()));		    // First byte			
   d42b0:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
		Log.info("Sent response to client message = %d, time = %s, next report = %u minutes", data[2], Time.timeStr(data[3] << 24 | data[4] << 16 | data[5] <<8 | data[6]).c_str(), (data[7] << 8 | data[8]));
   d42b4:	0412      	lsls	r2, r2, #16
   d42b6:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d42ba:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   d42be:	f89d 4026 	ldrb.w	r4, [sp, #38]	; 0x26
   d42c2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   d42c6:	b2c0      	uxtb	r0, r0
   d42c8:	4302      	orrs	r2, r0
   d42ca:	17d3      	asrs	r3, r2, #31
   d42cc:	a80c      	add	r0, sp, #48	; 0x30
   d42ce:	f009 fa25 	bl	dd71c <_ZN9TimeClass7timeStrEx>
   d42d2:	f8bd 302b 	ldrh.w	r3, [sp, #43]	; 0x2b
   d42d6:	4922      	ldr	r1, [pc, #136]	; (d4360 <_Z20listenForLoRAMessagev+0x1c0>)
   d42d8:	481e      	ldr	r0, [pc, #120]	; (d4354 <_Z20listenForLoRAMessagev+0x1b4>)
   d42da:	ba5b      	rev16	r3, r3
   d42dc:	b29b      	uxth	r3, r3
   d42de:	4622      	mov	r2, r4
   d42e0:	9300      	str	r3, [sp, #0]
   d42e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d42e4:	f7ff fef0 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d42e8:	a80c      	add	r0, sp, #48	; 0x30
   d42ea:	f008 ffd7 	bl	dd29c <_ZN6StringD1Ev>

		digitalWrite(BLUE_LED,LOW);			        // Done with the radio
   d42ee:	4631      	mov	r1, r6
   d42f0:	4638      	mov	r0, r7
   d42f2:	f009 fd40 	bl	ddd76 <digitalWrite>

		if (manager.sendtoWait(data, sizeof(data), from, dataAcknowledge) == RH_ROUTER_ERROR_NONE) {
   d42f6:	2304      	movs	r3, #4
   d42f8:	9300      	str	r3, [sp, #0]
   d42fa:	4812      	ldr	r0, [pc, #72]	; (d4344 <_Z20listenForLoRAMessagev+0x1a4>)
   d42fc:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   d4300:	2209      	movs	r2, #9
   d4302:	a909      	add	r1, sp, #36	; 0x24
   d4304:	f004 fd9a 	bl	d8e3c <_ZN6RHMesh10sendtoWaitEPhhhh>
   d4308:	b988      	cbnz	r0, d432e <_Z20listenForLoRAMessagev+0x18e>
			Log.info("Response received successfully");
   d430a:	4812      	ldr	r0, [pc, #72]	; (d4354 <_Z20listenForLoRAMessagev+0x1b4>)
   d430c:	4915      	ldr	r1, [pc, #84]	; (d4364 <_Z20listenForLoRAMessagev+0x1c4>)
   d430e:	f7ff fedb 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
			flashTheLEDs();
   d4312:	f7ff ff13 	bl	d413c <_Z12flashTheLEDsv>
			driver.sleep();                             // Here is where we will power down the LoRA radio module
   d4316:	480d      	ldr	r0, [pc, #52]	; (d434c <_Z20listenForLoRAMessagev+0x1ac>)
   d4318:	f005 fa5b 	bl	d97d2 <_ZN7RH_RF955sleepEv>
		driver.sleep();                             // Here is where we will power down the LoRA radio module
		return false;

	}
	return false; 
}
   d431c:	4628      	mov	r0, r5
   d431e:	b010      	add	sp, #64	; 0x40
   d4320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else Log.info("Message intended for another node");
   d4324:	4910      	ldr	r1, [pc, #64]	; (d4368 <_Z20listenForLoRAMessagev+0x1c8>)
   d4326:	480b      	ldr	r0, [pc, #44]	; (d4354 <_Z20listenForLoRAMessagev+0x1b4>)
   d4328:	f7ff fece 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d432c:	e79e      	b.n	d426c <_Z20listenForLoRAMessagev+0xcc>
		Log.info("Response not acknowledged");
   d432e:	490f      	ldr	r1, [pc, #60]	; (d436c <_Z20listenForLoRAMessagev+0x1cc>)
   d4330:	4808      	ldr	r0, [pc, #32]	; (d4354 <_Z20listenForLoRAMessagev+0x1b4>)
   d4332:	f7ff fec9 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
		driver.sleep();                             // Here is where we will power down the LoRA radio module
   d4336:	4805      	ldr	r0, [pc, #20]	; (d434c <_Z20listenForLoRAMessagev+0x1ac>)
   d4338:	f005 fa4b 	bl	d97d2 <_ZN7RH_RF955sleepEv>
		return false;
   d433c:	4635      	mov	r5, r6
   d433e:	e7ed      	b.n	d431c <_Z20listenForLoRAMessagev+0x17c>
   d4340:	2003dcc0 	.word	0x2003dcc0
   d4344:	2003deec 	.word	0x2003deec
   d4348:	000df108 	.word	0x000df108
   d434c:	2003ddbc 	.word	0x2003ddbc
   d4350:	000dedfc 	.word	0x000dedfc
   d4354:	2003e570 	.word	0x2003e570
   d4358:	2003e220 	.word	0x2003e220
   d435c:	2003e200 	.word	0x2003e200
   d4360:	000dee56 	.word	0x000dee56
   d4364:	000deea0 	.word	0x000deea0
   d4368:	000dee34 	.word	0x000dee34
   d436c:	000deebf 	.word	0x000deebf

000d4370 <_GLOBAL__sub_I_driver>:
}
   d4370:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   d4372:	4a08      	ldr	r2, [pc, #32]	; (d4394 <_GLOBAL__sub_I_driver+0x24>)
   d4374:	4c08      	ldr	r4, [pc, #32]	; (d4398 <_GLOBAL__sub_I_driver+0x28>)
   d4376:	4909      	ldr	r1, [pc, #36]	; (d439c <_GLOBAL__sub_I_driver+0x2c>)
   d4378:	7812      	ldrb	r2, [r2, #0]
   d437a:	7809      	ldrb	r1, [r1, #0]
   d437c:	4b08      	ldr	r3, [pc, #32]	; (d43a0 <_GLOBAL__sub_I_driver+0x30>)
   d437e:	4620      	mov	r0, r4
   d4380:	f005 fa5c 	bl	d983c <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   d4384:	4621      	mov	r1, r4
   d4386:	4807      	ldr	r0, [pc, #28]	; (d43a4 <_GLOBAL__sub_I_driver+0x34>)
}
   d4388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   d438c:	2201      	movs	r2, #1
   d438e:	f004 bd4b 	b.w	d8e28 <_ZN6RHMeshC1ER15RHGenericDriverh>
   d4392:	bf00      	nop
   d4394:	000df10e 	.word	0x000df10e
   d4398:	2003ddbc 	.word	0x2003ddbc
   d439c:	000df10c 	.word	0x000df10c
   d43a0:	2003e274 	.word	0x2003e274
   d43a4:	2003deec 	.word	0x2003deec

000d43a8 <_Z13userSwitchISRv>:
	}
	Log.info(stateTransitionString);
}

void userSwitchISR() {
  userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   d43a8:	4b01      	ldr	r3, [pc, #4]	; (d43b0 <_Z13userSwitchISRv+0x8>)
   d43aa:	2201      	movs	r2, #1
   d43ac:	701a      	strb	r2, [r3, #0]
}
   d43ae:	4770      	bx	lr
   d43b0:	2003e1b1 	.word	0x2003e1b1

000d43b4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d43b4:	b510      	push	{r4, lr}
   d43b6:	4b03      	ldr	r3, [pc, #12]	; (d43c4 <_ZN8MB85RC64D1Ev+0x10>)
   d43b8:	6003      	str	r3, [r0, #0]
   d43ba:	4604      	mov	r4, r0
   d43bc:	f003 fbc5 	bl	d7b4a <_ZN6MB85RCD1Ev>
   d43c0:	4620      	mov	r0, r4
   d43c2:	bd10      	pop	{r4, pc}
   d43c4:	000df0c0 	.word	0x000df0c0

000d43c8 <_ZN8MB85RC64D0Ev>:
   d43c8:	b510      	push	{r4, lr}
   d43ca:	4604      	mov	r4, r0
   d43cc:	f7ff fff2 	bl	d43b4 <_ZN8MB85RC64D1Ev>
   d43d0:	4620      	mov	r0, r4
   d43d2:	2110      	movs	r1, #16
   d43d4:	f009 fd8c 	bl	ddef0 <_ZdlPvj>
   d43d8:	4620      	mov	r0, r4
   d43da:	bd10      	pop	{r4, pc}

000d43dc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d43dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d43de:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d43e0:	4605      	mov	r5, r0
   d43e2:	460f      	mov	r7, r1
   d43e4:	4616      	mov	r6, r2
        if (valid_) {
   d43e6:	b18b      	cbz	r3, d440c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d43e8:	6803      	ldr	r3, [r0, #0]
   d43ea:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d43ec:	b183      	cbz	r3, d4410 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d43ee:	889a      	ldrh	r2, [r3, #4]
   d43f0:	2a01      	cmp	r2, #1
   d43f2:	d006      	beq.n	d4402 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d43f4:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d43f6:	e7f9      	b.n	d43ec <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d43f8:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d43fa:	b14b      	cbz	r3, d4410 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d43fc:	889a      	ldrh	r2, [r3, #4]
   d43fe:	2a01      	cmp	r2, #1
   d4400:	d1fa      	bne.n	d43f8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d4402:	b12b      	cbz	r3, d4410 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d4404:	899a      	ldrh	r2, [r3, #12]
   d4406:	42ba      	cmp	r2, r7
   d4408:	d1f6      	bne.n	d43f8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d440a:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d440c:	4628      	mov	r0, r5
   d440e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4410:	490a      	ldr	r1, [pc, #40]	; (d443c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d4412:	2010      	movs	r0, #16
   d4414:	f009 fd6e 	bl	ddef4 <_ZnwjRKSt9nothrow_t>
   d4418:	4604      	mov	r4, r0
   d441a:	b168      	cbz	r0, d4438 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d441c:	2210      	movs	r2, #16
   d441e:	2100      	movs	r1, #0
   d4420:	f00a fa1a 	bl	de858 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4424:	4b06      	ldr	r3, [pc, #24]	; (d4440 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d4426:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4428:	2301      	movs	r3, #1
   d442a:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d442c:	692b      	ldr	r3, [r5, #16]
   d442e:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4430:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d4432:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4434:	612c      	str	r4, [r5, #16]
   d4436:	e7e9      	b.n	d440c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d4438:	7528      	strb	r0, [r5, #20]
                return *this;
   d443a:	e7e7      	b.n	d440c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d443c:	000e0154 	.word	0x000e0154
   d4440:	00030010 	.word	0x00030010

000d4444 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>:
     * 
     * Note that 24:00:00 is not a valid time. You should generally use inclusive times such that
     * 23:59:59 is the end of the day.
     * 
     */
    LocalTimeRange(LocalTimeHMS hmsStart, LocalTimeHMS hmsEnd = LocalTimeHMS("23:59:59")) : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(hmsStart), hmsEnd(hmsEnd) {
   d4444:	b510      	push	{r4, lr}
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d4446:	247f      	movs	r4, #127	; 0x7f
   d4448:	7004      	strb	r4, [r0, #0]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   d444a:	2400      	movs	r4, #0
   d444c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   d4450:	e9c0 4403 	strd	r4, r4, [r0, #12]
   d4454:	e9c0 4405 	strd	r4, r4, [r0, #20]
class LocalTimeHMS {
   d4458:	6849      	ldr	r1, [r1, #4]
   d445a:	4c03      	ldr	r4, [pc, #12]	; (d4468 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_+0x24>)
   d445c:	6852      	ldr	r2, [r2, #4]
   d445e:	61c4      	str	r4, [r0, #28]
   d4460:	e9c0 1408 	strd	r1, r4, [r0, #32]
   d4464:	6282      	str	r2, [r0, #40]	; 0x28
    }
   d4466:	bd10      	pop	{r4, pc}
   d4468:	000df7d4 	.word	0x000df7d4

000d446c <_ZN14LocalTimeRangeD1Ev>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d446c:	b510      	push	{r4, lr}
   d446e:	4604      	mov	r4, r0
   d4470:	3024      	adds	r0, #36	; 0x24
   d4472:	f002 f8ea 	bl	d664a <_ZN12LocalTimeHMSD1Ev>
   d4476:	f104 001c 	add.w	r0, r4, #28
   d447a:	f002 f8e6 	bl	d664a <_ZN12LocalTimeHMSD1Ev>
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
   d447e:	6920      	ldr	r0, [r4, #16]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d4480:	b108      	cbz	r0, d4486 <_ZN14LocalTimeRangeD1Ev+0x1a>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4482:	f7ff fe0c 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   d4486:	6860      	ldr	r0, [r4, #4]
	if (__p)
   d4488:	b108      	cbz	r0, d448e <_ZN14LocalTimeRangeD1Ev+0x22>
   d448a:	f7ff fe08 	bl	d409e <_ZdlPv>
   d448e:	4620      	mov	r0, r4
   d4490:	bd10      	pop	{r4, pc}
	...

000d4494 <_Z22publishStateTransitionv>:
{
   d4494:	b5f0      	push	{r4, r5, r6, r7, lr}
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4496:	4d25      	ldr	r5, [pc, #148]	; (d452c <_Z22publishStateTransitionv+0x98>)
   d4498:	4c25      	ldr	r4, [pc, #148]	; (d4530 <_Z22publishStateTransitionv+0x9c>)
   d449a:	4b26      	ldr	r3, [pc, #152]	; (d4534 <_Z22publishStateTransitionv+0xa0>)
   d449c:	782a      	ldrb	r2, [r5, #0]
   d449e:	7821      	ldrb	r1, [r4, #0]
{
   d44a0:	b08f      	sub	sp, #60	; 0x3c
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d44a2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d44a6:	9200      	str	r2, [sp, #0]
   d44a8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   d44ac:	4a22      	ldr	r2, [pc, #136]	; (d4538 <_Z22publishStateTransitionv+0xa4>)
   d44ae:	2128      	movs	r1, #40	; 0x28
   d44b0:	a804      	add	r0, sp, #16
   d44b2:	f006 fbe9 	bl	dac88 <snprintf>
	oldState = state;
   d44b6:	782b      	ldrb	r3, [r5, #0]
   d44b8:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44ba:	f006 fb1d 	bl	daaf8 <spark_cloud_flag_connected>
	if (Particle.connected()) {
   d44be:	2800      	cmp	r0, #0
   d44c0:	d02e      	beq.n	d4520 <_Z22publishStateTransitionv+0x8c>
		if (millis() - lastPublish > 1000) {
   d44c2:	4c1e      	ldr	r4, [pc, #120]	; (d453c <_Z22publishStateTransitionv+0xa8>)
   d44c4:	f006 f836 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
   d44c8:	e9d4 3200 	ldrd	r3, r2, [r4]
   d44cc:	1ac6      	subs	r6, r0, r3
   d44ce:	eb62 0742 	sbc.w	r7, r2, r2, lsl #1
   d44d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d44d6:	2300      	movs	r3, #0
   d44d8:	42b2      	cmp	r2, r6
   d44da:	41bb      	sbcs	r3, r7
   d44dc:	da20      	bge.n	d4520 <_Z22publishStateTransitionv+0x8c>
   d44de:	f006 f829 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d44e2:	2300      	movs	r3, #0
   d44e4:	6063      	str	r3, [r4, #4]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d44e6:	4b16      	ldr	r3, [pc, #88]	; (d4540 <_Z22publishStateTransitionv+0xac>)
   d44e8:	6020      	str	r0, [r4, #0]
   d44ea:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d44ec:	f88d 3000 	strb.w	r3, [sp]
   d44f0:	4914      	ldr	r1, [pc, #80]	; (d4544 <_Z22publishStateTransitionv+0xb0>)
   d44f2:	233c      	movs	r3, #60	; 0x3c
   d44f4:	aa04      	add	r2, sp, #16
   d44f6:	a802      	add	r0, sp, #8
   d44f8:	f006 feda 	bl	db2b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d44fc:	9c03      	ldr	r4, [sp, #12]
   d44fe:	b17c      	cbz	r4, d4520 <_Z22publishStateTransitionv+0x8c>
      if (--_M_use_count == 0)
   d4500:	6863      	ldr	r3, [r4, #4]
   d4502:	3b01      	subs	r3, #1
   d4504:	6063      	str	r3, [r4, #4]
   d4506:	b95b      	cbnz	r3, d4520 <_Z22publishStateTransitionv+0x8c>
          _M_dispose();
   d4508:	6823      	ldr	r3, [r4, #0]
   d450a:	4620      	mov	r0, r4
   d450c:	689b      	ldr	r3, [r3, #8]
   d450e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4510:	68a3      	ldr	r3, [r4, #8]
   d4512:	3b01      	subs	r3, #1
   d4514:	60a3      	str	r3, [r4, #8]
   d4516:	b91b      	cbnz	r3, d4520 <_Z22publishStateTransitionv+0x8c>
            _M_destroy();
   d4518:	6823      	ldr	r3, [r4, #0]
   d451a:	4620      	mov	r0, r4
   d451c:	68db      	ldr	r3, [r3, #12]
   d451e:	4798      	blx	r3
	Log.info(stateTransitionString);
   d4520:	4809      	ldr	r0, [pc, #36]	; (d4548 <_Z22publishStateTransitionv+0xb4>)
   d4522:	a904      	add	r1, sp, #16
   d4524:	f7ff fdd0 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
}
   d4528:	b00f      	add	sp, #60	; 0x3c
   d452a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d452c:	2003e1b0 	.word	0x2003e1b0
   d4530:	2003e178 	.word	0x2003e178
   d4534:	2003db46 	.word	0x2003db46
   d4538:	000deed9 	.word	0x000deed9
   d453c:	2003e028 	.word	0x2003e028
   d4540:	2003e024 	.word	0x2003e024
   d4544:	000deee7 	.word	0x000deee7
   d4548:	2003e570 	.word	0x2003e570

000d454c <_GLOBAL__sub_I___appProductID>:
			return secondsToReturn;
		}
		else return 0;
    }
	else return 0;
   d454c:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   d454e:	4b25      	ldr	r3, [pc, #148]	; (d45e4 <_GLOBAL__sub_I___appProductID+0x98>)
   d4550:	2501      	movs	r5, #1
   d4552:	701d      	strb	r5, [r3, #0]
   d4554:	4b24      	ldr	r3, [pc, #144]	; (d45e8 <_GLOBAL__sub_I___appProductID+0x9c>)
   d4556:	2208      	movs	r2, #8
   d4558:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d455a:	f009 fba5 	bl	ddca8 <spark_protocol_instance>
   d455e:	2300      	movs	r3, #0
   d4560:	461a      	mov	r2, r3
   d4562:	210d      	movs	r1, #13
   d4564:	f009 fba8 	bl	ddcb8 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d4568:	f009 fb9e 	bl	ddca8 <spark_protocol_instance>
   d456c:	2300      	movs	r3, #0
   d456e:	461a      	mov	r2, r3
   d4570:	4619      	mov	r1, r3
   d4572:	f009 fba9 	bl	ddcc8 <spark_protocol_set_product_firmware_version>
        : config_(config) {
   d4576:	4b1d      	ldr	r3, [pc, #116]	; (d45ec <_GLOBAL__sub_I___appProductID+0xa0>)
   d4578:	461a      	mov	r2, r3
   d457a:	1d19      	adds	r1, r3, #4
   d457c:	f842 1b09 	str.w	r1, [r2], #9
              valid_(true) {
   d4580:	2400      	movs	r4, #0
   d4582:	f8a3 4009 	strh.w	r4, [r3, #9]
   d4586:	7094      	strb	r4, [r2, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d4588:	4a19      	ldr	r2, [pc, #100]	; (d45f0 <_GLOBAL__sub_I___appProductID+0xa4>)
              valid_(true) {
   d458a:	751d      	strb	r5, [r3, #20]
        config_.wakeup_sources = nullptr;
   d458c:	e9c3 4403 	strd	r4, r4, [r3, #12]
        config_.size = sizeof(hal_sleep_config_t);
   d4590:	605a      	str	r2, [r3, #4]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d4592:	721c      	strb	r4, [r3, #8]
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d4594:	f009 fc64 	bl	dde60 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d4598:	4d16      	ldr	r5, [pc, #88]	; (d45f4 <_GLOBAL__sub_I___appProductID+0xa8>)
   d459a:	4601      	mov	r1, r0
   d459c:	4623      	mov	r3, r4
   d459e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d45a2:	4628      	mov	r0, r5
   d45a4:	f003 fade 	bl	d7b64 <_ZN6MB85RCC1ER7TwoWireji>
   d45a8:	4b13      	ldr	r3, [pc, #76]	; (d45f8 <_GLOBAL__sub_I___appProductID+0xac>)
   d45aa:	602b      	str	r3, [r5, #0]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d45ac:	f009 fc58 	bl	dde60 <_Z19__fetch_global_Wirev>
class LocalTimeSchedule {
public:
    /**
     * @brief Construct a new, empty schedule
     */
    LocalTimeSchedule() {
   d45b0:	4d12      	ldr	r5, [pc, #72]	; (d45fc <_GLOBAL__sub_I___appProductID+0xb0>)
   d45b2:	4601      	mov	r1, r0
   d45b4:	2269      	movs	r2, #105	; 0x69
   d45b6:	4812      	ldr	r0, [pc, #72]	; (d4600 <_GLOBAL__sub_I___appProductID+0xb4>)
   d45b8:	f001 f96e 	bl	d5898 <_ZN6AB1805C1ER7TwoWireh>
   d45bc:	4628      	mov	r0, r5
   d45be:	4911      	ldr	r1, [pc, #68]	; (d4604 <_GLOBAL__sub_I___appProductID+0xb8>)
   d45c0:	f008 feb7 	bl	dd332 <_ZN6StringC1EPKc>
   d45c4:	2300      	movs	r3, #0
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   d45c6:	4810      	ldr	r0, [pc, #64]	; (d4608 <_GLOBAL__sub_I___appProductID+0xbc>)
    LocalTimeSchedule() {
   d45c8:	612c      	str	r4, [r5, #16]
   d45ca:	2200      	movs	r2, #0
   d45cc:	e9c5 2306 	strd	r2, r3, [r5, #24]
	: _M_start(), _M_finish(), _M_end_of_storage()
   d45d0:	e9c5 4408 	strd	r4, r4, [r5, #32]
class LocalTimeConvert {
   d45d4:	2306      	movs	r3, #6
   d45d6:	f840 3b04 	str.w	r3, [r0], #4
   d45da:	62ac      	str	r4, [r5, #40]	; 0x28
   d45dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d45e0:	f002 bb0e 	b.w	d6c00 <_ZN22LocalTimePosixTimezoneC1Ev>
   d45e4:	2003e024 	.word	0x2003e024
   d45e8:	2003e025 	.word	0x2003e025
   d45ec:	2003e05c 	.word	0x2003e05c
   d45f0:	00030010 	.word	0x00030010
   d45f4:	2003e074 	.word	0x2003e074
   d45f8:	000df0c0 	.word	0x000df0c0
   d45fc:	2003e180 	.word	0x2003e180
   d4600:	2003e03c 	.word	0x2003e03c
   d4604:	000dffd4 	.word	0x000dffd4
   d4608:	2003e088 	.word	0x2003e088

000d460c <setup>:
{
   d460c:	b530      	push	{r4, r5, lr}
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d460e:	4c5d      	ldr	r4, [pc, #372]	; (d4784 <setup+0x178>)
   d4610:	b09f      	sub	sp, #124	; 0x7c
	delay(5000);	// Wait for serial 
   d4612:	f241 3088 	movw	r0, #5000	; 0x1388
   d4616:	f006 fb87 	bl	dad28 <delay>
    initializePinModes();                           // Sets the pinModes
   d461a:	f000 fae5 	bl	d4be8 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   d461e:	f000 fafb 	bl	d4c18 <_Z18initializePowerCfgv>
    storageObjectStart();                           // Sets up the storage for system and current status in storage_objects.h
   d4622:	f000 ffbf 	bl	d55a4 <_Z18storageObjectStartv>
    particleInitialize();                           // Sets up all the Particle functions and variables defined in particle_fn.h
   d4626:	f000 fe0b 	bl	d5240 <_Z18particleInitializev>
   d462a:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   d462c:	4620      	mov	r0, r4
   d462e:	2101      	movs	r1, #1
   d4630:	8163      	strh	r3, [r4, #10]
   d4632:	f001 fcc3 	bl	d5fbc <_ZN6AB18055setupEb>
        ab1805.resetConfig();                       // Reset the AB1805 configuration to default values
   d4636:	2100      	movs	r1, #0
   d4638:	4620      	mov	r0, r4
   d463a:	f001 faa1 	bl	d5b80 <_ZN6AB180511resetConfigEm>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   d463e:	217c      	movs	r1, #124	; 0x7c
   d4640:	4620      	mov	r0, r4
   d4642:	f001 fa19 	bl	d5a78 <_ZN6AB18056setWDTEi>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   d4646:	f003 fcfb 	bl	d8040 <_ZN17PublishQueuePosix8instanceEv>
   d464a:	f003 ff07 	bl	d845c <_ZN17PublishQueuePosix5setupEv>
	initializeLoRA();								// Start the LoRA radio
   d464e:	f7ff fd53 	bl	d40f8 <_Z14initializeLoRAv>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   d4652:	f002 fd43 	bl	d70dc <_ZN9LocalTime8instanceEv>
   d4656:	494c      	ldr	r1, [pc, #304]	; (d4788 <setup+0x17c>)
   d4658:	4604      	mov	r4, r0
   d465a:	a808      	add	r0, sp, #32
   d465c:	f002 fb82 	bl	d6d64 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   d4660:	a909      	add	r1, sp, #36	; 0x24
   d4662:	f104 0008 	add.w	r0, r4, #8
   d4666:	f008 fea0 	bl	dd3aa <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d466a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d466c:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   d466e:	a90f      	add	r1, sp, #60	; 0x3c
   d4670:	f104 0020 	add.w	r0, r4, #32
   d4674:	f008 fe99 	bl	dd3aa <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d4678:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d467a:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   d467c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d467e:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   d4680:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d4682:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   d4684:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   d4686:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   d4688:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d468a:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   d468c:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
   d4690:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   d4694:	a808      	add	r0, sp, #32
   d4696:	f001 ffef 	bl	d6678 <_ZN22LocalTimePosixTimezoneD1Ev>
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d469a:	f009 f942 	bl	dd922 <_ZN9TimeClass3nowEv>
   d469e:	4c3b      	ldr	r4, [pc, #236]	; (d478c <setup+0x180>)
   d46a0:	17c1      	asrs	r1, r0, #31
   d46a2:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
	localTimeConvert_NOW.withCurrentTime().convert();  				        // Convert to local time for use later
   d46a6:	4620      	mov	r0, r4
   d46a8:	f002 fd90 	bl	d71cc <_ZN16LocalTimeConvert7convertEv>
  	publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("22:59:59")));	 // Publish every 15 minutes from 6am to 10pm
   d46ac:	4b38      	ldr	r3, [pc, #224]	; (d4790 <setup+0x184>)
   d46ae:	4939      	ldr	r1, [pc, #228]	; (d4794 <setup+0x188>)
   d46b0:	8b5d      	ldrh	r5, [r3, #26]
   d46b2:	a803      	add	r0, sp, #12
   d46b4:	f002 f97a 	bl	d69ac <_ZN12LocalTimeHMSC1EPKc>
   d46b8:	4937      	ldr	r1, [pc, #220]	; (d4798 <setup+0x18c>)
   d46ba:	a805      	add	r0, sp, #20
   d46bc:	f002 f976 	bl	d69ac <_ZN12LocalTimeHMSC1EPKc>
   d46c0:	aa05      	add	r2, sp, #20
   d46c2:	a903      	add	r1, sp, #12
   d46c4:	a808      	add	r0, sp, #32
   d46c6:	f7ff febd 	bl	d4444 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   d46ca:	4629      	mov	r1, r5
   d46cc:	aa08      	add	r2, sp, #32
   d46ce:	4833      	ldr	r0, [pc, #204]	; (d479c <setup+0x190>)
   d46d0:	f003 fa21 	bl	d7b16 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d46d4:	a808      	add	r0, sp, #32
   d46d6:	f7ff fec9 	bl	d446c <_ZN14LocalTimeRangeD1Ev>
   d46da:	a805      	add	r0, sp, #20
   d46dc:	f001 ffb5 	bl	d664a <_ZN12LocalTimeHMSD1Ev>
   d46e0:	a803      	add	r0, sp, #12
   d46e2:	f001 ffb2 	bl	d664a <_ZN12LocalTimeHMSD1Ev>
  	Log.info("Startup complete at %s with battery %4.2f", localTimeConvert_NOW.format(TIME_FORMAT_ISO8601_FULL).c_str(), System.batteryCharge());
   d46e6:	4b2e      	ldr	r3, [pc, #184]	; (d47a0 <setup+0x194>)
   d46e8:	4621      	mov	r1, r4
   d46ea:	681a      	ldr	r2, [r3, #0]
   d46ec:	a808      	add	r0, sp, #32
   d46ee:	f002 fc4f 	bl	d6f90 <_ZN16LocalTimeConvert6formatEPKc>
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   d46f2:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d46f4:	a903      	add	r1, sp, #12
   d46f6:	2003      	movs	r0, #3
   d46f8:	9d08      	ldr	r5, [sp, #32]
    const diag_source* src = nullptr;
   d46fa:	9203      	str	r2, [sp, #12]
    const int ret = diag_get_source(id, &src, nullptr);
   d46fc:	f006 f962 	bl	da9c4 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4700:	2800      	cmp	r0, #0
   d4702:	d13c      	bne.n	d477e <setup+0x172>
        return ret;
    }
    return get(src, val);
   d4704:	9c03      	ldr	r4, [sp, #12]
    SPARK_ASSERT(src && src->callback);
   d4706:	b10c      	cbz	r4, d470c <setup+0x100>
   d4708:	6923      	ldr	r3, [r4, #16]
   d470a:	b923      	cbnz	r3, d4716 <setup+0x10a>
   d470c:	4a25      	ldr	r2, [pc, #148]	; (d47a4 <setup+0x198>)
   d470e:	2100      	movs	r1, #0
   d4710:	200a      	movs	r0, #10
   d4712:	f006 f92f 	bl	da974 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4716:	2300      	movs	r3, #0
   d4718:	f8ad 3016 	strh.w	r3, [sp, #22]
   d471c:	230c      	movs	r3, #12
   d471e:	f8ad 3014 	strh.w	r3, [sp, #20]
   d4722:	ab02      	add	r3, sp, #8
   d4724:	9306      	str	r3, [sp, #24]
   d4726:	2304      	movs	r3, #4
   d4728:	9307      	str	r3, [sp, #28]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d472a:	6923      	ldr	r3, [r4, #16]
   d472c:	aa05      	add	r2, sp, #20
   d472e:	2101      	movs	r1, #1
   d4730:	4620      	mov	r0, r4
   d4732:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4734:	bb18      	cbnz	r0, d477e <setup+0x172>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4736:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   d473a:	ee07 3a90 	vmov	s15, r3
   d473e:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   d4742:	ee17 0a90 	vmov	r0, s15
   d4746:	f009 fd47 	bl	de1d8 <__aeabi_f2d>
   d474a:	462a      	mov	r2, r5
   d474c:	e9cd 0100 	strd	r0, r1, [sp]
   d4750:	4915      	ldr	r1, [pc, #84]	; (d47a8 <setup+0x19c>)
   d4752:	4816      	ldr	r0, [pc, #88]	; (d47ac <setup+0x1a0>)
   d4754:	f7ff fcb8 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d4758:	a808      	add	r0, sp, #32
   d475a:	f008 fd9f 	bl	dd29c <_ZN6StringD1Ev>
  	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   d475e:	4814      	ldr	r0, [pc, #80]	; (d47b0 <setup+0x1a4>)
   d4760:	4914      	ldr	r1, [pc, #80]	; (d47b4 <setup+0x1a8>)
   d4762:	8800      	ldrh	r0, [r0, #0]
   d4764:	2200      	movs	r2, #0
   d4766:	9200      	str	r2, [sp, #0]
   d4768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d476c:	f007 f8bc 	bl	db8e8 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = LoRA_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   d4770:	4b11      	ldr	r3, [pc, #68]	; (d47b8 <setup+0x1ac>)
   d4772:	781a      	ldrb	r2, [r3, #0]
   d4774:	b90a      	cbnz	r2, d477a <setup+0x16e>
   d4776:	2204      	movs	r2, #4
   d4778:	701a      	strb	r2, [r3, #0]
}
   d477a:	b01f      	add	sp, #124	; 0x7c
   d477c:	bd30      	pop	{r4, r5, pc}
            return -1.0f;
   d477e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4782:	e7de      	b.n	d4742 <setup+0x136>
   d4784:	2003e03c 	.word	0x2003e03c
   d4788:	000deef8 	.word	0x000deef8
   d478c:	2003e088 	.word	0x2003e088
   d4790:	2003e220 	.word	0x2003e220
   d4794:	000def1f 	.word	0x000def1f
   d4798:	000def28 	.word	0x000def28
   d479c:	2003e180 	.word	0x2003e180
   d47a0:	2003dc50 	.word	0x2003dc50
   d47a4:	000da525 	.word	0x000da525
   d47a8:	000def31 	.word	0x000def31
   d47ac:	2003e570 	.word	0x2003e570
   d47b0:	000df10a 	.word	0x000df10a
   d47b4:	000d43a9 	.word	0x000d43a9
   d47b8:	2003e1b0 	.word	0x2003e1b0

000d47bc <_Z21secondsUntilNextEventv.part.0>:
int secondsUntilNextEvent() {											// Time till next scheduled event
   d47bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d47be:	b0c1      	sub	sp, #260	; 0x104
   d47c0:	f009 f8af 	bl	dd922 <_ZN9TimeClass3nowEv>
   d47c4:	4e28      	ldr	r6, [pc, #160]	; (d4868 <_Z21secondsUntilNextEventv.part.0+0xac>)
        Log.info("local time: %s", localTimeConvert_NOW.format(TIME_FORMAT_DEFAULT).c_str());
   d47c6:	4f29      	ldr	r7, [pc, #164]	; (d486c <_Z21secondsUntilNextEventv.part.0+0xb0>)
   d47c8:	17c1      	asrs	r1, r0, #31
   d47ca:	e9c6 0118 	strd	r0, r1, [r6, #96]	; 0x60
        localTimeConvert_NOW.withCurrentTime().convert();
   d47ce:	4630      	mov	r0, r6
   d47d0:	f002 fcfc 	bl	d71cc <_ZN16LocalTimeConvert7convertEv>
        Log.info("local time: %s", localTimeConvert_NOW.format(TIME_FORMAT_DEFAULT).c_str());
   d47d4:	683a      	ldr	r2, [r7, #0]
   d47d6:	4631      	mov	r1, r6
   d47d8:	a804      	add	r0, sp, #16
   d47da:	f002 fbd9 	bl	d6f90 <_ZN16LocalTimeConvert6formatEPKc>
   d47de:	9a04      	ldr	r2, [sp, #16]
   d47e0:	4923      	ldr	r1, [pc, #140]	; (d4870 <_Z21secondsUntilNextEventv.part.0+0xb4>)
   d47e2:	4824      	ldr	r0, [pc, #144]	; (d4874 <_Z21secondsUntilNextEventv.part.0+0xb8>)
   d47e4:	f7ff fc70 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d47e8:	a804      	add	r0, sp, #16
   d47ea:	f008 fd57 	bl	dd29c <_ZN6StringD1Ev>
class LocalTimeConvert {
   d47ee:	2306      	movs	r3, #6
   d47f0:	a805      	add	r0, sp, #20
   d47f2:	9304      	str	r3, [sp, #16]
   d47f4:	f002 fa04 	bl	d6c00 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d47f8:	f009 f893 	bl	dd922 <_ZN9TimeClass3nowEv>
   d47fc:	17c1      	asrs	r1, r0, #31
   d47fe:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
        localTimeConvert_NEXT.withCurrentTime().convert();
   d4802:	a804      	add	r0, sp, #16
   d4804:	f002 fce2 	bl	d71cc <_ZN16LocalTimeConvert7convertEv>
		if (publishSchedule.getNextScheduledTime(localTimeConvert_NEXT)) {
   d4808:	481b      	ldr	r0, [pc, #108]	; (d4878 <_Z21secondsUntilNextEventv.part.0+0xbc>)
   d480a:	a904      	add	r1, sp, #16
   d480c:	f003 f82e 	bl	d786c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d4810:	b340      	cbz	r0, d4864 <_Z21secondsUntilNextEventv.part.0+0xa8>
			long unsigned secondsToReturn = constrain(localTimeConvert_NEXT.time - localTimeConvert_NOW.time, 0L, 86400L);	// Constrain to positive seconds less than or equal to a day.
   d4812:	e9d6 3118 	ldrd	r3, r1, [r6, #96]	; 0x60
   d4816:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   d4818:	1ad4      	subs	r4, r2, r3
   d481a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d481c:	4a17      	ldr	r2, [pc, #92]	; (d487c <_Z21secondsUntilNextEventv.part.0+0xc0>)
   d481e:	eb63 0501 	sbc.w	r5, r3, r1
   d4822:	42a2      	cmp	r2, r4
   d4824:	f04f 0300 	mov.w	r3, #0
   d4828:	eb73 0105 	sbcs.w	r1, r3, r5
   d482c:	bfbc      	itt	lt
   d482e:	4614      	movlt	r4, r2
   d4830:	461d      	movlt	r5, r3
   d4832:	2c00      	cmp	r4, #0
   d4834:	f175 0300 	sbcs.w	r3, r5, #0
   d4838:	bfb8      	it	lt
   d483a:	2400      	movlt	r4, #0
        	Log.info("time of next event is: %s which is %lu seconds away", localTimeConvert_NEXT.format(TIME_FORMAT_DEFAULT).c_str(), secondsToReturn);
   d483c:	683a      	ldr	r2, [r7, #0]
   d483e:	a904      	add	r1, sp, #16
   d4840:	4668      	mov	r0, sp
   d4842:	f002 fba5 	bl	d6f90 <_ZN16LocalTimeConvert6formatEPKc>
   d4846:	480b      	ldr	r0, [pc, #44]	; (d4874 <_Z21secondsUntilNextEventv.part.0+0xb8>)
   d4848:	9a00      	ldr	r2, [sp, #0]
   d484a:	490d      	ldr	r1, [pc, #52]	; (d4880 <_Z21secondsUntilNextEventv.part.0+0xc4>)
   d484c:	4623      	mov	r3, r4
   d484e:	f7ff fc3b 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d4852:	4668      	mov	r0, sp
   d4854:	f008 fd22 	bl	dd29c <_ZN6StringD1Ev>
class LocalTimeConvert {
   d4858:	a805      	add	r0, sp, #20
   d485a:	f001 ff0d 	bl	d6678 <_ZN22LocalTimePosixTimezoneD1Ev>
   d485e:	4620      	mov	r0, r4
   d4860:	b041      	add	sp, #260	; 0x104
   d4862:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else return 0;
   d4864:	4604      	mov	r4, r0
   d4866:	e7f7      	b.n	d4858 <_Z21secondsUntilNextEventv.part.0+0x9c>
   d4868:	2003e088 	.word	0x2003e088
   d486c:	2003dc4c 	.word	0x2003dc4c
   d4870:	000def5b 	.word	0x000def5b
   d4874:	2003e570 	.word	0x2003e570
   d4878:	2003e180 	.word	0x2003e180
   d487c:	00015180 	.word	0x00015180
   d4880:	000def6a 	.word	0x000def6a

000d4884 <_Z21secondsUntilNextEventv>:
int secondsUntilNextEvent() {											// Time till next scheduled event
   d4884:	b508      	push	{r3, lr}
   if (Time.isValid()) {
   d4886:	f009 f82f 	bl	dd8e8 <_ZN9TimeClass7isValidEv>
   d488a:	b118      	cbz	r0, d4894 <_Z21secondsUntilNextEventv+0x10>
   d488c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4890:	f7ff bf94 	b.w	d47bc <_Z21secondsUntilNextEventv.part.0>
   d4894:	bd08      	pop	{r3, pc}
	...

000d4898 <loop>:
void loop() {
   d4898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (state) {
   d489c:	4ca4      	ldr	r4, [pc, #656]	; (d4b30 <loop+0x298>)
   d489e:	7823      	ldrb	r3, [r4, #0]
   d48a0:	3b02      	subs	r3, #2
void loop() {
   d48a2:	b0d5      	sub	sp, #340	; 0x154
   d48a4:	2b05      	cmp	r3, #5
   d48a6:	f200 8083 	bhi.w	d49b0 <loop+0x118>
   d48aa:	e8df f013 	tbh	[pc, r3, lsl #1]
   d48ae:	0006      	.short	0x0006
   d48b0:	00900019 	.word	0x00900019
   d48b4:	0177011f 	.word	0x0177011f
   d48b8:	00d0      	.short	0x00d0
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d48ba:	4b9e      	ldr	r3, [pc, #632]	; (d4b34 <loop+0x29c>)
   d48bc:	781b      	ldrb	r3, [r3, #0]
   d48be:	2b02      	cmp	r3, #2
   d48c0:	d001      	beq.n	d48c6 <loop+0x2e>
   d48c2:	f7ff fde7 	bl	d4494 <_Z22publishStateTransitionv>
			if (publishSchedule.isScheduledTime()) state = LoRA_STATE;		   // See Time section in setup for schedule
   d48c6:	489c      	ldr	r0, [pc, #624]	; (d4b38 <loop+0x2a0>)
   d48c8:	f003 f806 	bl	d78d8 <_ZN17LocalTimeSchedule15isScheduledTimeEv>
   d48cc:	b108      	cbz	r0, d48d2 <loop+0x3a>
   d48ce:	2304      	movs	r3, #4
   d48d0:	7023      	strb	r3, [r4, #0]
			if (userSwitchDectected) state = CONNECTING_STATE;
   d48d2:	4b9a      	ldr	r3, [pc, #616]	; (d4b3c <loop+0x2a4>)
   d48d4:	781b      	ldrb	r3, [r3, #0]
   d48d6:	2b00      	cmp	r3, #0
   d48d8:	d06a      	beq.n	d49b0 <loop+0x118>
			if (!Particle.connected()) state = CONNECTING_STATE;                     // Now we will turn on the cellular radio and connect to Particle
   d48da:	2305      	movs	r3, #5
				if (sysStatus.lowPowerMode) state = SLEEPING_STATE;
   d48dc:	7023      	strb	r3, [r4, #0]
   d48de:	e067      	b.n	d49b0 <loop+0x118>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d48e0:	4b94      	ldr	r3, [pc, #592]	; (d4b34 <loop+0x29c>)
   d48e2:	781b      	ldrb	r3, [r3, #0]
   d48e4:	2b03      	cmp	r3, #3
   d48e6:	d001      	beq.n	d48ec <loop+0x54>
   d48e8:	f7ff fdd4 	bl	d4494 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d48ec:	2100      	movs	r1, #0
   d48ee:	4894      	ldr	r0, [pc, #592]	; (d4b40 <loop+0x2a8>)
   d48f0:	f001 f8c2 	bl	d5a78 <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent()-10;  		   		   // Subtracting ten seconds to reduce prospect of round tripping to IDLE
   d48f4:	f7ff ffc6 	bl	d4884 <_Z21secondsUntilNextEventv>
   d48f8:	f1a0 070a 	sub.w	r7, r0, #10
			Log.info("Sleep for %i seconds", wakeInSeconds);
   d48fc:	463a      	mov	r2, r7
   d48fe:	4991      	ldr	r1, [pc, #580]	; (d4b44 <loop+0x2ac>)
   d4900:	4891      	ldr	r0, [pc, #580]	; (d4b48 <loop+0x2b0>)
   d4902:	f7ff fbe1 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
        if (valid_) {
   d4906:	4b91      	ldr	r3, [pc, #580]	; (d4b4c <loop+0x2b4>)
   d4908:	7d1a      	ldrb	r2, [r3, #20]
   d490a:	b10a      	cbz	r2, d4910 <loop+0x78>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d490c:	2202      	movs	r2, #2
   d490e:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   d4910:	4b8f      	ldr	r3, [pc, #572]	; (d4b50 <loop+0x2b8>)
   d4912:	488e      	ldr	r0, [pc, #568]	; (d4b4c <loop+0x2b4>)
   d4914:	f8b3 8000 	ldrh.w	r8, [r3]
   d4918:	2200      	movs	r2, #0
   d491a:	4641      	mov	r1, r8
   d491c:	f7ff fd5e 	bl	d43dc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d4920:	7d03      	ldrb	r3, [r0, #20]
   d4922:	4606      	mov	r6, r0
   d4924:	b1fb      	cbz	r3, d4966 <loop+0xce>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4926:	6833      	ldr	r3, [r6, #0]
				.duration(wakeInSeconds * 1000L);
   d4928:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d492c:	68db      	ldr	r3, [r3, #12]
   d492e:	4347      	muls	r7, r0
        if (!start) {
   d4930:	b12b      	cbz	r3, d493e <loop+0xa6>
            if (start->type == type) {
   d4932:	889a      	ldrh	r2, [r3, #4]
   d4934:	2a04      	cmp	r2, #4
   d4936:	f000 814d 	beq.w	d4bd4 <loop+0x33c>
            start = start->next;
   d493a:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d493c:	e7f8      	b.n	d4930 <loop+0x98>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d493e:	4985      	ldr	r1, [pc, #532]	; (d4b54 <loop+0x2bc>)
   d4940:	2010      	movs	r0, #16
   d4942:	f009 fad7 	bl	ddef4 <_ZnwjRKSt9nothrow_t>
   d4946:	4605      	mov	r5, r0
   d4948:	2800      	cmp	r0, #0
   d494a:	f000 8141 	beq.w	d4bd0 <loop+0x338>
   d494e:	2210      	movs	r2, #16
   d4950:	2100      	movs	r1, #0
   d4952:	f009 ff81 	bl	de858 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4956:	4b80      	ldr	r3, [pc, #512]	; (d4b58 <loop+0x2c0>)
   d4958:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d495a:	2304      	movs	r3, #4
   d495c:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d495e:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   d4960:	e9c5 3702 	strd	r3, r7, [r5, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4964:	6135      	str	r5, [r6, #16]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   d4966:	4979      	ldr	r1, [pc, #484]	; (d4b4c <loop+0x2b4>)
   d4968:	a811      	add	r0, sp, #68	; 0x44
   d496a:	f008 fe41 	bl	dd5f0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d496e:	4874      	ldr	r0, [pc, #464]	; (d4b40 <loop+0x2a8>)
   d4970:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d4974:	f001 f880 	bl	d5a78 <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d4978:	9b11      	ldr	r3, [sp, #68]	; 0x44
        if (wakeupSource_) {
   d497a:	b32b      	cbz	r3, d49c8 <loop+0x130>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d497c:	889a      	ldrh	r2, [r3, #4]
   d497e:	2a01      	cmp	r2, #1
   d4980:	d122      	bne.n	d49c8 <loop+0x130>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d4982:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                            // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   d4984:	4598      	cmp	r8, r3
   d4986:	d10d      	bne.n	d49a4 <loop+0x10c>
				setLowPowerMode("0");                                          // We are waking the device for a reason
   d4988:	4974      	ldr	r1, [pc, #464]	; (d4b5c <loop+0x2c4>)
   d498a:	a814      	add	r0, sp, #80	; 0x50
   d498c:	f008 fcd1 	bl	dd332 <_ZN6StringC1EPKc>
   d4990:	a814      	add	r0, sp, #80	; 0x50
   d4992:	f000 fa45 	bl	d4e20 <_Z15setLowPowerMode6String>
   d4996:	a814      	add	r0, sp, #80	; 0x50
   d4998:	f008 fc80 	bl	dd29c <_ZN6StringD1Ev>
				Log.info("Woke with user button - normal operations");
   d499c:	4970      	ldr	r1, [pc, #448]	; (d4b60 <loop+0x2c8>)
   d499e:	486a      	ldr	r0, [pc, #424]	; (d4b48 <loop+0x2b0>)
   d49a0:	f7ff fb92 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
        if (wakeupSource_) {
   d49a4:	9811      	ldr	r0, [sp, #68]	; 0x44
			state = IDLE_STATE;
   d49a6:	2302      	movs	r3, #2
   d49a8:	7023      	strb	r3, [r4, #0]
   d49aa:	b108      	cbz	r0, d49b0 <loop+0x118>
            free(wakeupSource_);
   d49ac:	f006 f94c 	bl	dac48 <free>
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   d49b0:	4863      	ldr	r0, [pc, #396]	; (d4b40 <loop+0x2a8>)
   d49b2:	f001 fbe3 	bl	d617c <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   d49b6:	f003 fb43 	bl	d8040 <_ZN17PublishQueuePosix8instanceEv>
   d49ba:	f003 fa33 	bl	d7e24 <_ZN17PublishQueuePosix4loopEv>
    storageObjectLoop();                            // Compares current system and current objects and stores if the hash changes (once / second) in storage_objects.h
   d49be:	f000 fd7b 	bl	d54b8 <_Z17storageObjectLoopv>
}
   d49c2:	b055      	add	sp, #340	; 0x154
   d49c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return std::numeric_limits<pin_t>::max();
   d49c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d49cc:	e7da      	b.n	d4984 <loop+0xec>
			if (state != oldState) {
   d49ce:	4b59      	ldr	r3, [pc, #356]	; (d4b34 <loop+0x29c>)
   d49d0:	4d64      	ldr	r5, [pc, #400]	; (d4b64 <loop+0x2cc>)
   d49d2:	781b      	ldrb	r3, [r3, #0]
   d49d4:	2b04      	cmp	r3, #4
   d49d6:	d00a      	beq.n	d49ee <loop+0x156>
				publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d49d8:	f7ff fd5c 	bl	d4494 <_Z22publishStateTransitionv>
   d49dc:	f005 fdaa 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
				Log.info("In the LoRA state with a frequency of %u minutes", sysStatus.frequencyMinutes);
   d49e0:	4b61      	ldr	r3, [pc, #388]	; (d4b68 <loop+0x2d0>)
				startLoRAWindow = millis();               // Mark when we enter this state - for timeouts
   d49e2:	6028      	str	r0, [r5, #0]
				Log.info("In the LoRA state with a frequency of %u minutes", sysStatus.frequencyMinutes);
   d49e4:	8b5a      	ldrh	r2, [r3, #26]
   d49e6:	4961      	ldr	r1, [pc, #388]	; (d4b6c <loop+0x2d4>)
   d49e8:	4857      	ldr	r0, [pc, #348]	; (d4b48 <loop+0x2b0>)
   d49ea:	f7ff fb6d 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
			if (listenForLoRAMessage()) {
   d49ee:	f7ff fbd7 	bl	d41a0 <_Z20listenForLoRAMessagev>
   d49f2:	b318      	cbz	r0, d4a3c <loop+0x1a4>
				if (frequencyUpdated) {              // If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   d49f4:	4b5e      	ldr	r3, [pc, #376]	; (d4b70 <loop+0x2d8>)
   d49f6:	781a      	ldrb	r2, [r3, #0]
   d49f8:	b1f2      	cbz	r2, d4a38 <loop+0x1a0>
					frequencyUpdated = false;
   d49fa:	2200      	movs	r2, #0
   d49fc:	701a      	strb	r2, [r3, #0]
					publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("21:59:59")));	 // Publish every 15 minutes from 6am to 10pm
   d49fe:	4b5a      	ldr	r3, [pc, #360]	; (d4b68 <loop+0x2d0>)
   d4a00:	495c      	ldr	r1, [pc, #368]	; (d4b74 <loop+0x2dc>)
   d4a02:	8b5e      	ldrh	r6, [r3, #26]
   d4a04:	a80f      	add	r0, sp, #60	; 0x3c
   d4a06:	f001 ffd1 	bl	d69ac <_ZN12LocalTimeHMSC1EPKc>
   d4a0a:	495b      	ldr	r1, [pc, #364]	; (d4b78 <loop+0x2e0>)
   d4a0c:	a811      	add	r0, sp, #68	; 0x44
   d4a0e:	f001 ffcd 	bl	d69ac <_ZN12LocalTimeHMSC1EPKc>
   d4a12:	aa11      	add	r2, sp, #68	; 0x44
   d4a14:	a90f      	add	r1, sp, #60	; 0x3c
   d4a16:	a814      	add	r0, sp, #80	; 0x50
   d4a18:	f7ff fd14 	bl	d4444 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   d4a1c:	aa14      	add	r2, sp, #80	; 0x50
   d4a1e:	4631      	mov	r1, r6
   d4a20:	4845      	ldr	r0, [pc, #276]	; (d4b38 <loop+0x2a0>)
   d4a22:	f003 f878 	bl	d7b16 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d4a26:	a814      	add	r0, sp, #80	; 0x50
   d4a28:	f7ff fd20 	bl	d446c <_ZN14LocalTimeRangeD1Ev>
   d4a2c:	a811      	add	r0, sp, #68	; 0x44
   d4a2e:	f001 fe0c 	bl	d664a <_ZN12LocalTimeHMSD1Ev>
   d4a32:	a80f      	add	r0, sp, #60	; 0x3c
   d4a34:	f001 fe09 	bl	d664a <_ZN12LocalTimeHMSD1Ev>
				state = REPORTING_STATE;
   d4a38:	2307      	movs	r3, #7
   d4a3a:	7023      	strb	r3, [r4, #0]
   d4a3c:	f005 fd7a 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - startLoRAWindow) > 300000L) state = CONNECTING_STATE;	// This is a fail safe to make sure an off-line client won't prevent gatewat from checking in - and setting its clock
   d4a40:	682b      	ldr	r3, [r5, #0]
   d4a42:	1ac0      	subs	r0, r0, r3
   d4a44:	4b4d      	ldr	r3, [pc, #308]	; (d4b7c <loop+0x2e4>)
   d4a46:	4298      	cmp	r0, r3
   d4a48:	f63f af47 	bhi.w	d48da <loop+0x42>
   d4a4c:	e7b0      	b.n	d49b0 <loop+0x118>
			if (state != oldState) publishStateTransition();
   d4a4e:	4b39      	ldr	r3, [pc, #228]	; (d4b34 <loop+0x29c>)
   d4a50:	781b      	ldrb	r3, [r3, #0]
   d4a52:	2b07      	cmp	r3, #7
   d4a54:	d001      	beq.n	d4a5a <loop+0x1c2>
   d4a56:	f7ff fd1d 	bl	d4494 <_Z22publishStateTransitionv>
  			snprintf(data, sizeof(data), "{\"nodeid\":%u, \"hourly\":%u, \"daily\":%u,\"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"alerts\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",sysStatus.nodeNumber, current.hourly, current.daily, current.stateOfCharge, batteryContext[current.batteryState], current.internalTempC, sysStatus.resetCount, sysStatus.lastAlertCode, current.rssi, current.messageNumber, Time.now());
   d4a5a:	4949      	ldr	r1, [pc, #292]	; (d4b80 <loop+0x2e8>)
   d4a5c:	4d42      	ldr	r5, [pc, #264]	; (d4b68 <loop+0x2d0>)
   d4a5e:	7a08      	ldrb	r0, [r1, #8]
   d4a60:	4a48      	ldr	r2, [pc, #288]	; (d4b84 <loop+0x2ec>)
   d4a62:	886b      	ldrh	r3, [r5, #2]
   d4a64:	8bce      	ldrh	r6, [r1, #30]
   d4a66:	f8b1 801c 	ldrh.w	r8, [r1, #28]
   d4a6a:	684f      	ldr	r7, [r1, #4]
   d4a6c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   d4a70:	f891 9000 	ldrb.w	r9, [r1]
   d4a74:	f8b1 a018 	ldrh.w	sl, [r1, #24]
   d4a78:	930d      	str	r3, [sp, #52]	; 0x34
   d4a7a:	7e89      	ldrb	r1, [r1, #26]
   d4a7c:	68eb      	ldr	r3, [r5, #12]
   d4a7e:	f895 b01c 	ldrb.w	fp, [r5, #28]
   d4a82:	920c      	str	r2, [sp, #48]	; 0x30
   d4a84:	930a      	str	r3, [sp, #40]	; 0x28
   d4a86:	910b      	str	r1, [sp, #44]	; 0x2c
   d4a88:	f008 ff4b 	bl	dd922 <_ZN9TimeClass3nowEv>
   d4a8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d4a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4a90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d4a92:	9009      	str	r0, [sp, #36]	; 0x24
   d4a94:	e9cd a107 	strd	sl, r1, [sp, #28]
   d4a98:	e9cd 9304 	strd	r9, r3, [sp, #16]
   d4a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4aa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4aa2:	f8cd b018 	str.w	fp, [sp, #24]
   d4aa6:	e9cd 7202 	strd	r7, r2, [sp, #8]
   d4aaa:	e9cd 8600 	strd	r8, r6, [sp]
   d4aae:	4a36      	ldr	r2, [pc, #216]	; (d4b88 <loop+0x2f0>)
   d4ab0:	a814      	add	r0, sp, #80	; 0x50
   d4ab2:	f006 f8e9 	bl	dac88 <snprintf>
  			PublishQueuePosix::instance().publish("Ubidots-LoRA-Hook-v1", data, PRIVATE | WITH_ACK);
   d4ab6:	f003 fac3 	bl	d8040 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d4aba:	4b34      	ldr	r3, [pc, #208]	; (d4b8c <loop+0x2f4>)
   d4abc:	4a34      	ldr	r2, [pc, #208]	; (d4b90 <loop+0x2f8>)
   d4abe:	781b      	ldrb	r3, [r3, #0]
   d4ac0:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4ac2:	2100      	movs	r1, #0
   d4ac4:	4313      	orrs	r3, r2
   d4ac6:	6802      	ldr	r2, [r0, #0]
   d4ac8:	f88d 1004 	strb.w	r1, [sp, #4]
   d4acc:	f88d 3000 	strb.w	r3, [sp]
   d4ad0:	6816      	ldr	r6, [r2, #0]
   d4ad2:	4930      	ldr	r1, [pc, #192]	; (d4b94 <loop+0x2fc>)
   d4ad4:	233c      	movs	r3, #60	; 0x3c
   d4ad6:	aa14      	add	r2, sp, #80	; 0x50
   d4ad8:	47b0      	blx	r6
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4ada:	f006 f80d 	bl	daaf8 <spark_cloud_flag_connected>
			if (!Particle.connected()) state = CONNECTING_STATE;                     // Now we will turn on the cellular radio and connect to Particle
   d4ade:	2800      	cmp	r0, #0
   d4ae0:	f43f aefb 	beq.w	d48da <loop+0x42>
				if(Particle.connected() && !sysStatus.lowPowerMode) state = IDLE_STATE;
   d4ae4:	7a2b      	ldrb	r3, [r5, #8]
   d4ae6:	b9c3      	cbnz	r3, d4b1a <loop+0x282>
   d4ae8:	2302      	movs	r3, #2
   d4aea:	e6f7      	b.n	d48dc <loop+0x44>
			if (state != oldState) {
   d4aec:	4b11      	ldr	r3, [pc, #68]	; (d4b34 <loop+0x29c>)
   d4aee:	781b      	ldrb	r3, [r3, #0]
   d4af0:	2b05      	cmp	r3, #5
   d4af2:	d007      	beq.n	d4b04 <loop+0x26c>
				publishStateTransition();  
   d4af4:	f7ff fcce 	bl	d4494 <_Z22publishStateTransitionv>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4af8:	f005 fff6 	bl	daae8 <spark_cloud_flag_connect>
   d4afc:	f005 fd1a 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   d4b00:	4b25      	ldr	r3, [pc, #148]	; (d4b98 <loop+0x300>)
   d4b02:	6018      	str	r0, [r3, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4b04:	f005 fff8 	bl	daaf8 <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout - either way we need to disconnect
   d4b08:	b148      	cbz	r0, d4b1e <loop+0x286>
				sysStatus.lastConnection = Time.now();
   d4b0a:	f008 ff0a 	bl	dd922 <_ZN9TimeClass3nowEv>
   d4b0e:	4d16      	ldr	r5, [pc, #88]	; (d4b68 <loop+0x2d0>)
   d4b10:	6168      	str	r0, [r5, #20]
   d4b12:	f005 fff1 	bl	daaf8 <spark_cloud_flag_connected>
				if(Particle.connected() && !sysStatus.lowPowerMode) state = IDLE_STATE;
   d4b16:	2800      	cmp	r0, #0
   d4b18:	d1e4      	bne.n	d4ae4 <loop+0x24c>
				else state = DISCONNECTING_STATE;
   d4b1a:	2306      	movs	r3, #6
   d4b1c:	e6de      	b.n	d48dc <loop+0x44>
   d4b1e:	f005 fd09 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout - either way we need to disconnect
   d4b22:	4b1d      	ldr	r3, [pc, #116]	; (d4b98 <loop+0x300>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	1ac0      	subs	r0, r0, r3
   d4b28:	4b14      	ldr	r3, [pc, #80]	; (d4b7c <loop+0x2e4>)
   d4b2a:	4298      	cmp	r0, r3
   d4b2c:	d8ed      	bhi.n	d4b0a <loop+0x272>
   d4b2e:	e73f      	b.n	d49b0 <loop+0x118>
   d4b30:	2003e1b0 	.word	0x2003e1b0
   d4b34:	2003e178 	.word	0x2003e178
   d4b38:	2003e180 	.word	0x2003e180
   d4b3c:	2003e1b1 	.word	0x2003e1b1
   d4b40:	2003e03c 	.word	0x2003e03c
   d4b44:	000def9e 	.word	0x000def9e
   d4b48:	2003e570 	.word	0x2003e570
   d4b4c:	2003e05c 	.word	0x2003e05c
   d4b50:	000df10a 	.word	0x000df10a
   d4b54:	000e0154 	.word	0x000e0154
   d4b58:	00030010 	.word	0x00030010
   d4b5c:	000df77c 	.word	0x000df77c
   d4b60:	000defb3 	.word	0x000defb3
   d4b64:	2003e030 	.word	0x2003e030
   d4b68:	2003e220 	.word	0x2003e220
   d4b6c:	000defdd 	.word	0x000defdd
   d4b70:	2003e1c1 	.word	0x2003e1c1
   d4b74:	000def1f 	.word	0x000def1f
   d4b78:	000df00e 	.word	0x000df00e
   d4b7c:	000493e0 	.word	0x000493e0
   d4b80:	2003e200 	.word	0x2003e200
   d4b84:	2003dbd8 	.word	0x2003dbd8
   d4b88:	000df017 	.word	0x000df017
   d4b8c:	2003e025 	.word	0x2003e025
   d4b90:	2003e024 	.word	0x2003e024
   d4b94:	000df0a2 	.word	0x000df0a2
   d4b98:	2003e034 	.word	0x2003e034
			if (state != oldState) {
   d4b9c:	4b0e      	ldr	r3, [pc, #56]	; (d4bd8 <loop+0x340>)
   d4b9e:	4d0f      	ldr	r5, [pc, #60]	; (d4bdc <loop+0x344>)
   d4ba0:	781b      	ldrb	r3, [r3, #0]
   d4ba2:	2b06      	cmp	r3, #6
   d4ba4:	d004      	beq.n	d4bb0 <loop+0x318>
				publishStateTransition(); 
   d4ba6:	f7ff fc75 	bl	d4494 <_Z22publishStateTransitionv>
   d4baa:	f005 fcc3 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   d4bae:	6028      	str	r0, [r5, #0]
   d4bb0:	f005 fcc0 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stayConnectedWindow > 90000) {							// Stay on-line for 90 seconds
   d4bb4:	682b      	ldr	r3, [r5, #0]
   d4bb6:	1ac0      	subs	r0, r0, r3
   d4bb8:	4b09      	ldr	r3, [pc, #36]	; (d4be0 <loop+0x348>)
   d4bba:	4298      	cmp	r0, r3
   d4bbc:	f67f aef8 	bls.w	d49b0 <loop+0x118>
				disconnectFromParticle();
   d4bc0:	f000 fa98 	bl	d50f4 <_Z22disconnectFromParticlev>
				if (sysStatus.lowPowerMode) state = SLEEPING_STATE;
   d4bc4:	4b07      	ldr	r3, [pc, #28]	; (d4be4 <loop+0x34c>)
   d4bc6:	7a1b      	ldrb	r3, [r3, #8]
   d4bc8:	2b00      	cmp	r3, #0
   d4bca:	d08d      	beq.n	d4ae8 <loop+0x250>
   d4bcc:	2303      	movs	r3, #3
   d4bce:	e685      	b.n	d48dc <loop+0x44>
                valid_ = false;
   d4bd0:	7530      	strb	r0, [r6, #20]
                return *this;
   d4bd2:	e6c8      	b.n	d4966 <loop+0xce>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4bd4:	60df      	str	r7, [r3, #12]
                return *this;
   d4bd6:	e6c6      	b.n	d4966 <loop+0xce>
   d4bd8:	2003e178 	.word	0x2003e178
   d4bdc:	2003e038 	.word	0x2003e038
   d4be0:	00015f90 	.word	0x00015f90
   d4be4:	2003e220 	.word	0x2003e220

000d4be8 <_Z18initializePinModesv>:
const pin_t TMP36_SENSE_PIN   = A4;
const pin_t BUTTON_PIN        = D4;
const pin_t BLUE_LED          = D7;
const pin_t WAKEUP_PIN        = D8;

bool initializePinModes() {
   d4be8:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   d4bea:	4909      	ldr	r1, [pc, #36]	; (d4c10 <_Z18initializePinModesv+0x28>)
   d4bec:	4809      	ldr	r0, [pc, #36]	; (d4c14 <_Z18initializePinModesv+0x2c>)
   d4bee:	f7ff fa6b 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   d4bf2:	2102      	movs	r1, #2
   d4bf4:	2004      	movs	r0, #4
   d4bf6:	f009 f8ad 	bl	ddd54 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   d4bfa:	2100      	movs	r1, #0
   d4bfc:	2008      	movs	r0, #8
   d4bfe:	f009 f8a9 	bl	ddd54 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   d4c02:	2101      	movs	r1, #1
   d4c04:	2007      	movs	r0, #7
   d4c06:	f009 f8a5 	bl	ddd54 <pinMode>
    return true;
}
   d4c0a:	2001      	movs	r0, #1
   d4c0c:	bd08      	pop	{r3, pc}
   d4c0e:	bf00      	nop
   d4c10:	000df0d4 	.word	0x000df0d4
   d4c14:	2003e570 	.word	0x2003e570

000d4c18 <_Z18initializePowerCfgv>:

bool initializePowerCfg() {
   d4c18:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   d4c1a:	4918      	ldr	r1, [pc, #96]	; (d4c7c <_Z18initializePowerCfgv+0x64>)
   d4c1c:	4818      	ldr	r0, [pc, #96]	; (d4c80 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   d4c1e:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d4c20:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   d4c22:	f7ff fa51 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d4c26:	4622      	mov	r2, r4
   d4c28:	2100      	movs	r1, #0
   d4c2a:	4668      	mov	r0, sp
   d4c2c:	f009 fe14 	bl	de858 <memset>
   d4c30:	4622      	mov	r2, r4
   d4c32:	2100      	movs	r1, #0
   d4c34:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4c38:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   d4c3c:	f009 fe0c 	bl	de858 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   d4c40:	2100      	movs	r1, #0
   d4c42:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4c46:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d4c4a:	f005 ff21 	bl	daa90 <system_power_management_set_config>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4c4e:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d4c52:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4c56:	4b0b      	ldr	r3, [pc, #44]	; (d4c84 <_Z18initializePowerCfgv+0x6c>)
   d4c58:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4c5a:	f241 0370 	movw	r3, #4208	; 0x1070
   d4c5e:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4c62:	9b00      	ldr	r3, [sp, #0]
   d4c64:	2100      	movs	r1, #0
   d4c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4c6a:	4668      	mov	r0, sp
   d4c6c:	9300      	str	r3, [sp, #0]
   d4c6e:	f005 ff0f 	bl	daa90 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   d4c72:	3800      	subs	r0, #0
   d4c74:	bf18      	it	ne
   d4c76:	2001      	movne	r0, #1
   d4c78:	b010      	add	sp, #64	; 0x40
   d4c7a:	bd10      	pop	{r4, pc}
   d4c7c:	000df0ed 	.word	0x000df0ed
   d4c80:	2003e570 	.word	0x2003e570
   d4c84:	03840384 	.word	0x03840384

000d4c88 <_ZN5spark10LogHandler5writeEPKcj>:
}
   d4c88:	4770      	bx	lr

000d4c8a <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   d4c8a:	6a00      	ldr	r0, [r0, #32]
   d4c8c:	6803      	ldr	r3, [r0, #0]
   d4c8e:	68db      	ldr	r3, [r3, #12]
   d4c90:	4718      	bx	r3
	...

000d4c94 <_Z15reportFrequencyv>:
/**
 * @brief Particle cacluated variable
 * 
 * @return String with the number of minutes for reporting frequency
 */
String reportFrequency() {							// Calculated variavble for the report frequency which is an unint16_t and does nto display properly.
   d4c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    char reportStr[16];
    snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.frequencyMinutes);
   d4c96:	4b07      	ldr	r3, [pc, #28]	; (d4cb4 <_Z15reportFrequencyv+0x20>)
   d4c98:	4a07      	ldr	r2, [pc, #28]	; (d4cb8 <_Z15reportFrequencyv+0x24>)
   d4c9a:	8b5b      	ldrh	r3, [r3, #26]
String reportFrequency() {							// Calculated variavble for the report frequency which is an unint16_t and does nto display properly.
   d4c9c:	4604      	mov	r4, r0
    snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.frequencyMinutes);
   d4c9e:	2110      	movs	r1, #16
   d4ca0:	4668      	mov	r0, sp
   d4ca2:	f005 fff1 	bl	dac88 <snprintf>
    return reportStr;
   d4ca6:	4669      	mov	r1, sp
   d4ca8:	4620      	mov	r0, r4
   d4caa:	f008 fb42 	bl	dd332 <_ZN6StringC1EPKc>
}
   d4cae:	4620      	mov	r0, r4
   d4cb0:	b004      	add	sp, #16
   d4cb2:	bd10      	pop	{r4, pc}
   d4cb4:	2003e220 	.word	0x2003e220
   d4cb8:	000df112 	.word	0x000df112

000d4cbc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d4cbc:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4cbe:	2000      	movs	r0, #0
   d4cc0:	f005 ff32 	bl	dab28 <spark_sync_time_pending>
   d4cc4:	b128      	cbz	r0, d4cd2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4cc6:	f005 ff17 	bl	daaf8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4cca:	f080 0001 	eor.w	r0, r0, #1
   d4cce:	b2c0      	uxtb	r0, r0
    }
   d4cd0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4cd2:	2001      	movs	r0, #1
   d4cd4:	e7fc      	b.n	d4cd0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d4cd8 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4cd8:	b530      	push	{r4, r5, lr}
   d4cda:	b085      	sub	sp, #20
   d4cdc:	4603      	mov	r3, r0
   d4cde:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   d4ce0:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4ce2:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   d4ce4:	4798      	blx	r3
        size = str.length();
   d4ce6:	9802      	ldr	r0, [sp, #8]
   d4ce8:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   d4cea:	f005 ffa5 	bl	dac38 <malloc>
   d4cee:	6028      	str	r0, [r5, #0]
        if (!data) {
   d4cf0:	b150      	cbz	r0, d4d08 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   d4cf2:	6822      	ldr	r2, [r4, #0]
   d4cf4:	9900      	ldr	r1, [sp, #0]
   d4cf6:	f009 fd87 	bl	de808 <memcpy>
        return 0;
   d4cfa:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   d4cfc:	4668      	mov	r0, sp
   d4cfe:	f008 facd 	bl	dd29c <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4d02:	4620      	mov	r0, r4
   d4d04:	b005      	add	sp, #20
   d4d06:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   d4d08:	4c00      	ldr	r4, [pc, #0]	; (d4d0c <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   d4d0a:	e7f7      	b.n	d4cfc <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   d4d0c:	fffffefc 	.word	0xfffffefc

000d4d10 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4d10:	4b0a      	ldr	r3, [pc, #40]	; (d4d3c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4d12:	b510      	push	{r4, lr}
   d4d14:	4604      	mov	r4, r0
   d4d16:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4d18:	f007 f9c2 	bl	dc0a0 <_ZN5spark10LogManager8instanceEv>
   d4d1c:	4621      	mov	r1, r4
   d4d1e:	f007 fb84 	bl	dc42a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4d22:	f008 feff 	bl	ddb24 <_Z16_fetch_usbserialv>
   d4d26:	f008 fef1 	bl	ddb0c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4d2a:	4620      	mov	r0, r4
   d4d2c:	4b04      	ldr	r3, [pc, #16]	; (d4d40 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4d2e:	f840 3b04 	str.w	r3, [r0], #4
   d4d32:	f007 fa67 	bl	dc204 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4d36:	4620      	mov	r0, r4
   d4d38:	bd10      	pop	{r4, pc}
   d4d3a:	bf00      	nop
   d4d3c:	000df380 	.word	0x000df380
   d4d40:	000df368 	.word	0x000df368

000d4d44 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4d44:	b510      	push	{r4, lr}
   d4d46:	4604      	mov	r4, r0
    }
   d4d48:	f7ff ffe2 	bl	d4d10 <_ZN5spark16SerialLogHandlerD1Ev>
   d4d4c:	4620      	mov	r0, r4
   d4d4e:	2124      	movs	r1, #36	; 0x24
   d4d50:	f009 f8ce 	bl	ddef0 <_ZdlPvj>
   d4d54:	4620      	mov	r0, r4
   d4d56:	bd10      	pop	{r4, pc}

000d4d58 <_ZN10CloudClass9keepAliveEj>:
    inline static void keepAlive(unsigned sec)
   d4d58:	b507      	push	{r0, r1, r2, lr}
        conn_prop.size = sizeof(conn_prop);
   d4d5a:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d4d5c:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d4d5e:	f8ad 2000 	strh.w	r2, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4d62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4d66:	2201      	movs	r2, #1
   d4d68:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4d6a:	4341      	muls	r1, r0
   d4d6c:	466a      	mov	r2, sp
   d4d6e:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d4d70:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4d74:	f005 fee8 	bl	dab48 <spark_set_connection_property>
    }
   d4d78:	b003      	add	sp, #12
   d4d7a:	f85d fb04 	ldr.w	pc, [sp], #4

000d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4d7e:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d4d80:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4d82:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4d84:	b17c      	cbz	r4, d4da6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4d86:	6863      	ldr	r3, [r4, #4]
   d4d88:	3b01      	subs	r3, #1
   d4d8a:	6063      	str	r3, [r4, #4]
   d4d8c:	b95b      	cbnz	r3, d4da6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4d8e:	6823      	ldr	r3, [r4, #0]
   d4d90:	4620      	mov	r0, r4
   d4d92:	689b      	ldr	r3, [r3, #8]
   d4d94:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d96:	68a3      	ldr	r3, [r4, #8]
   d4d98:	3b01      	subs	r3, #1
   d4d9a:	60a3      	str	r3, [r4, #8]
   d4d9c:	b91b      	cbnz	r3, d4da6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4d9e:	6823      	ldr	r3, [r4, #0]
   d4da0:	4620      	mov	r0, r4
   d4da2:	68db      	ldr	r3, [r3, #12]
   d4da4:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4da6:	4628      	mov	r0, r5
   d4da8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4dac <_Z12setFrequency6String>:
 * sets an interim value for reporting frequency which takes effect once sent to a new node.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setFrequency(String command)
{
   d4dac:	b510      	push	{r4, lr}
   d4dae:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4db0:	6800      	ldr	r0, [r0, #0]
   d4db2:	220a      	movs	r2, #10
   d4db4:	a903      	add	r1, sp, #12
   d4db6:	f009 fedd 	bl	deb74 <strtol>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4dba:	2878      	cmp	r0, #120	; 0x78
   d4dbc:	d821      	bhi.n	d4e02 <_Z12setFrequency6String+0x56>
  sysStatus.frequencyMinutes = tempTime;
   d4dbe:	4b12      	ldr	r3, [pc, #72]	; (d4e08 <_Z12setFrequency6String+0x5c>)
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",sysStatus.frequencyMinutes);
   d4dc0:	4a12      	ldr	r2, [pc, #72]	; (d4e0c <_Z12setFrequency6String+0x60>)
  sysStatus.frequencyMinutes = tempTime;
   d4dc2:	8358      	strh	r0, [r3, #26]
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
   d4dc4:	4b12      	ldr	r3, [pc, #72]	; (d4e10 <_Z12setFrequency6String+0x64>)
   d4dc6:	2401      	movs	r4, #1
   d4dc8:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",sysStatus.frequencyMinutes);
   d4dca:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4dce:	4603      	mov	r3, r0
   d4dd0:	a806      	add	r0, sp, #24
   d4dd2:	f005 ff59 	bl	dac88 <snprintf>
  Log.info(data);
   d4dd6:	480f      	ldr	r0, [pc, #60]	; (d4e14 <_Z12setFrequency6String+0x68>)
   d4dd8:	a906      	add	r1, sp, #24
   d4dda:	f7ff f975 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4dde:	f005 fe8b 	bl	daaf8 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4de2:	b160      	cbz	r0, d4dfe <_Z12setFrequency6String+0x52>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4de4:	4b0c      	ldr	r3, [pc, #48]	; (d4e18 <_Z12setFrequency6String+0x6c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4de6:	490d      	ldr	r1, [pc, #52]	; (d4e1c <_Z12setFrequency6String+0x70>)
   d4de8:	781b      	ldrb	r3, [r3, #0]
   d4dea:	f88d 3000 	strb.w	r3, [sp]
   d4dee:	a804      	add	r0, sp, #16
   d4df0:	233c      	movs	r3, #60	; 0x3c
   d4df2:	aa06      	add	r2, sp, #24
   d4df4:	f006 fa5c 	bl	db2b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4df8:	a805      	add	r0, sp, #20
   d4dfa:	f7ff ffc0 	bl	d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d4dfe:	4620      	mov	r0, r4
   d4e00:	e000      	b.n	d4e04 <_Z12setFrequency6String+0x58>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4e02:	2000      	movs	r0, #0
}
   d4e04:	b046      	add	sp, #280	; 0x118
   d4e06:	bd10      	pop	{r4, pc}
   d4e08:	2003e220 	.word	0x2003e220
   d4e0c:	000df11d 	.word	0x000df11d
   d4e10:	2003e1c1 	.word	0x2003e1c1
   d4e14:	2003e570 	.word	0x2003e570
   d4e18:	2003e1c0 	.word	0x2003e1c0
   d4e1c:	000df15d 	.word	0x000df15d

000d4e20 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4e20:	b510      	push	{r4, lr}
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4e22:	491c      	ldr	r1, [pc, #112]	; (d4e94 <_Z15setLowPowerMode6String+0x74>)
   d4e24:	b094      	sub	sp, #80	; 0x50
   d4e26:	4604      	mov	r4, r0
   d4e28:	f008 fb3c 	bl	dd4a4 <_ZNK6String6equalsEPKc>
  char data[64];
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4e2c:	b348      	cbz	r0, d4e82 <_Z15setLowPowerMode6String+0x62>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4e2e:	4919      	ldr	r1, [pc, #100]	; (d4e94 <_Z15setLowPowerMode6String+0x74>)
   d4e30:	4620      	mov	r0, r4
   d4e32:	f008 fb37 	bl	dd4a4 <_ZNK6String6equalsEPKc>
  if (command == "1") {                                               // Command calls for enabling sleep
   d4e36:	4b18      	ldr	r3, [pc, #96]	; (d4e98 <_Z15setLowPowerMode6String+0x78>)
   d4e38:	2800      	cmp	r0, #0
   d4e3a:	bf14      	ite	ne
   d4e3c:	2201      	movne	r2, #1
   d4e3e:	2200      	moveq	r2, #0
   d4e40:	721a      	strb	r2, [r3, #8]
    sysStatus.lowPowerMode = true;
  }
  else {                                                             // Command calls for disabling sleep
    sysStatus.lowPowerMode = false;
  }
  snprintf(data, sizeof(data), "Enable sleep is %s", (sysStatus.lowPowerMode) ? "true" : "false");
   d4e42:	4a16      	ldr	r2, [pc, #88]	; (d4e9c <_Z15setLowPowerMode6String+0x7c>)
   d4e44:	4b16      	ldr	r3, [pc, #88]	; (d4ea0 <_Z15setLowPowerMode6String+0x80>)
   d4e46:	f04f 0140 	mov.w	r1, #64	; 0x40
   d4e4a:	bf18      	it	ne
   d4e4c:	4613      	movne	r3, r2
   d4e4e:	a804      	add	r0, sp, #16
   d4e50:	4a14      	ldr	r2, [pc, #80]	; (d4ea4 <_Z15setLowPowerMode6String+0x84>)
   d4e52:	f005 ff19 	bl	dac88 <snprintf>
  Log.info(data);
   d4e56:	4814      	ldr	r0, [pc, #80]	; (d4ea8 <_Z15setLowPowerMode6String+0x88>)
   d4e58:	a904      	add	r1, sp, #16
   d4e5a:	f7ff f935 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4e5e:	f005 fe4b 	bl	daaf8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4e62:	b160      	cbz	r0, d4e7e <_Z15setLowPowerMode6String+0x5e>
   d4e64:	4b11      	ldr	r3, [pc, #68]	; (d4eac <_Z15setLowPowerMode6String+0x8c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4e66:	4912      	ldr	r1, [pc, #72]	; (d4eb0 <_Z15setLowPowerMode6String+0x90>)
   d4e68:	781b      	ldrb	r3, [r3, #0]
   d4e6a:	f88d 3000 	strb.w	r3, [sp]
   d4e6e:	a802      	add	r0, sp, #8
   d4e70:	233c      	movs	r3, #60	; 0x3c
   d4e72:	aa04      	add	r2, sp, #16
   d4e74:	f006 fa1c 	bl	db2b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4e78:	a803      	add	r0, sp, #12
   d4e7a:	f7ff ff80 	bl	d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Mode",data, PRIVATE);
  }
  return 1;
   d4e7e:	2001      	movs	r0, #1
   d4e80:	e005      	b.n	d4e8e <_Z15setLowPowerMode6String+0x6e>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4e82:	490c      	ldr	r1, [pc, #48]	; (d4eb4 <_Z15setLowPowerMode6String+0x94>)
   d4e84:	4620      	mov	r0, r4
   d4e86:	f008 fb0d 	bl	dd4a4 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4e8a:	2800      	cmp	r0, #0
   d4e8c:	d1cf      	bne.n	d4e2e <_Z15setLowPowerMode6String+0xe>
}
   d4e8e:	b014      	add	sp, #80	; 0x50
   d4e90:	bd10      	pop	{r4, pc}
   d4e92:	bf00      	nop
   d4e94:	000df4d0 	.word	0x000df4d0
   d4e98:	2003e220 	.word	0x2003e220
   d4e9c:	000df162 	.word	0x000df162
   d4ea0:	000df167 	.word	0x000df167
   d4ea4:	000df16d 	.word	0x000df16d
   d4ea8:	2003e570 	.word	0x2003e570
   d4eac:	2003e1c0 	.word	0x2003e1c0
   d4eb0:	000df180 	.word	0x000df180
   d4eb4:	000df77c 	.word	0x000df77c

000d4eb8 <_Z13setVerizonSIM6String>:
 * 
 * @param command  - 1 for Verizon and 0 for Particle (default)
 * @return int 
 */
int setVerizonSIM(String command)                                   // If we are using a Verizon SIM, we will need to execute "keepAlive" calls in the main loop when not in low power mode
{
   d4eb8:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4eba:	491d      	ldr	r1, [pc, #116]	; (d4f30 <_Z13setVerizonSIM6String+0x78>)
   d4ebc:	b085      	sub	sp, #20
   d4ebe:	4605      	mov	r5, r0
   d4ec0:	f008 faf0 	bl	dd4a4 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4ec4:	4604      	mov	r4, r0
   d4ec6:	b1d0      	cbz	r0, d4efe <_Z13setVerizonSIM6String+0x46>
  {
    sysStatus.verizonSIM = true;
   d4ec8:	4b1a      	ldr	r3, [pc, #104]	; (d4f34 <_Z13setVerizonSIM6String+0x7c>)
   d4eca:	2401      	movs	r4, #1
    Particle.keepAlive(60);                                         // send a ping every minute
   d4ecc:	203c      	movs	r0, #60	; 0x3c
    sysStatus.verizonSIM = true;
   d4ece:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    Particle.keepAlive(60);                                         // send a ping every minute
   d4ed2:	f7ff ff41 	bl	d4d58 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4ed6:	f005 fe0f 	bl	daaf8 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Verizon SIM", PRIVATE);
   d4eda:	b910      	cbnz	r0, d4ee2 <_Z13setVerizonSIM6String+0x2a>
   d4edc:	2001      	movs	r0, #1
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
    return 1;
  }
  else return 0;
}
   d4ede:	b005      	add	sp, #20
   d4ee0:	bd30      	pop	{r4, r5, pc}
   d4ee2:	4b15      	ldr	r3, [pc, #84]	; (d4f38 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4ee4:	4a15      	ldr	r2, [pc, #84]	; (d4f3c <_Z13setVerizonSIM6String+0x84>)
   d4ee6:	781b      	ldrb	r3, [r3, #0]
   d4ee8:	f88d 3000 	strb.w	r3, [sp]
   d4eec:	233c      	movs	r3, #60	; 0x3c
   d4eee:	a802      	add	r0, sp, #8
   d4ef0:	4913      	ldr	r1, [pc, #76]	; (d4f40 <_Z13setVerizonSIM6String+0x88>)
   d4ef2:	f006 f9dd 	bl	db2b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4ef6:	a803      	add	r0, sp, #12
   d4ef8:	f7ff ff41 	bl	d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4efc:	e7ee      	b.n	d4edc <_Z13setVerizonSIM6String+0x24>
   d4efe:	4911      	ldr	r1, [pc, #68]	; (d4f44 <_Z13setVerizonSIM6String+0x8c>)
   d4f00:	4628      	mov	r0, r5
   d4f02:	f008 facf 	bl	dd4a4 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4f06:	2800      	cmp	r0, #0
   d4f08:	d0e9      	beq.n	d4ede <_Z13setVerizonSIM6String+0x26>
    sysStatus.verizonSIM = false;
   d4f0a:	4b0a      	ldr	r3, [pc, #40]	; (d4f34 <_Z13setVerizonSIM6String+0x7c>)
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
   d4f0c:	f240 5064 	movw	r0, #1380	; 0x564
    sysStatus.verizonSIM = false;
   d4f10:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
   d4f14:	f7ff ff20 	bl	d4d58 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f18:	f005 fdee 	bl	daaf8 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
   d4f1c:	2800      	cmp	r0, #0
   d4f1e:	d0dd      	beq.n	d4edc <_Z13setVerizonSIM6String+0x24>
   d4f20:	4b05      	ldr	r3, [pc, #20]	; (d4f38 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4f22:	4a09      	ldr	r2, [pc, #36]	; (d4f48 <_Z13setVerizonSIM6String+0x90>)
   d4f24:	781b      	ldrb	r3, [r3, #0]
   d4f26:	f88d 3000 	strb.w	r3, [sp]
   d4f2a:	233c      	movs	r3, #60	; 0x3c
   d4f2c:	e7df      	b.n	d4eee <_Z13setVerizonSIM6String+0x36>
   d4f2e:	bf00      	nop
   d4f30:	000df4d0 	.word	0x000df4d0
   d4f34:	2003e220 	.word	0x2003e220
   d4f38:	2003e1c0 	.word	0x2003e1c0
   d4f3c:	000df185 	.word	0x000df185
   d4f40:	000df180 	.word	0x000df180
   d4f44:	000df77c 	.word	0x000df77c
   d4f48:	000df198 	.word	0x000df198

000d4f4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4f4c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4f4e:	e9d0 5300 	ldrd	r5, r3, [r0]
   d4f52:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4f54:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4f56:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d4f5a:	42ae      	cmp	r6, r5
   d4f5c:	d004      	beq.n	d4f68 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d4f5e:	4628      	mov	r0, r5
   d4f60:	f008 f99c 	bl	dd29c <_ZN6StringD1Ev>
   d4f64:	3514      	adds	r5, #20
   d4f66:	e7f8      	b.n	d4f5a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4f68:	6820      	ldr	r0, [r4, #0]
   d4f6a:	f005 fe6d 	bl	dac48 <free>
    AllocatorT::free(data_);
}
   d4f6e:	4620      	mov	r0, r4
   d4f70:	bd70      	pop	{r4, r5, r6, pc}

000d4f72 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4f72:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f76:	4604      	mov	r4, r0
   d4f78:	460d      	mov	r5, r1
   d4f7a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4f7c:	d916      	bls.n	d4fac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4f7e:	4290      	cmp	r0, r2
   d4f80:	d215      	bcs.n	d4fae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d4f82:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d4f86:	1a75      	subs	r5, r6, r1
   d4f88:	f1a1 0714 	sub.w	r7, r1, #20
   d4f8c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4f8e:	42b7      	cmp	r7, r6
   d4f90:	d01c      	beq.n	d4fcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4f92:	b12c      	cbz	r4, d4fa0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4f94:	4631      	mov	r1, r6
   d4f96:	4620      	mov	r0, r4
   d4f98:	f008 f9fc 	bl	dd394 <_ZN6StringC1EOS_>
   d4f9c:	7c33      	ldrb	r3, [r6, #16]
   d4f9e:	7423      	strb	r3, [r4, #16]
   d4fa0:	4630      	mov	r0, r6
   d4fa2:	f008 f97b 	bl	dd29c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d4fa6:	3e14      	subs	r6, #20
   d4fa8:	3c14      	subs	r4, #20
   d4faa:	e7f0      	b.n	d4f8e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4fac:	d00e      	beq.n	d4fcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4fae:	42b5      	cmp	r5, r6
   d4fb0:	d00c      	beq.n	d4fcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4fb2:	b12c      	cbz	r4, d4fc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4fb4:	4629      	mov	r1, r5
   d4fb6:	4620      	mov	r0, r4
   d4fb8:	f008 f9ec 	bl	dd394 <_ZN6StringC1EOS_>
   d4fbc:	7c2b      	ldrb	r3, [r5, #16]
   d4fbe:	7423      	strb	r3, [r4, #16]
   d4fc0:	4628      	mov	r0, r5
   d4fc2:	f008 f96b 	bl	dd29c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d4fc6:	3514      	adds	r5, #20
   d4fc8:	3414      	adds	r4, #20
   d4fca:	e7f0      	b.n	d4fae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4fce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4fd2:	2300      	movs	r3, #0
   d4fd4:	e9c0 3300 	strd	r3, r3, [r0]
   d4fd8:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4fda:	684f      	ldr	r7, [r1, #4]
   d4fdc:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4fde:	4604      	mov	r4, r0
   d4fe0:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4fe2:	dd23      	ble.n	d502c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4fe4:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4fe8:	fb08 f007 	mul.w	r0, r8, r7
   d4fec:	f005 fe24 	bl	dac38 <malloc>
            if (!d) {
   d4ff0:	4605      	mov	r5, r0
   d4ff2:	b1d8      	cbz	r0, d502c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4ff4:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4ff8:	fb08 1202 	mla	r2, r8, r2, r1
   d4ffc:	f7ff ffb9 	bl	d4f72 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d5000:	6820      	ldr	r0, [r4, #0]
   d5002:	f005 fe21 	bl	dac48 <free>
        data_ = d;
   d5006:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5008:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d500a:	e9d6 7300 	ldrd	r7, r3, [r6]
   d500e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d5012:	45b8      	cmp	r8, r7
   d5014:	d008      	beq.n	d5028 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d5016:	4639      	mov	r1, r7
   d5018:	4628      	mov	r0, r5
   d501a:	f008 f9d5 	bl	dd3c8 <_ZN6StringC1ERKS_>
   d501e:	7c3b      	ldrb	r3, [r7, #16]
   d5020:	742b      	strb	r3, [r5, #16]
   d5022:	3714      	adds	r7, #20
   d5024:	3514      	adds	r5, #20
   d5026:	e7f4      	b.n	d5012 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d5028:	6873      	ldr	r3, [r6, #4]
   d502a:	6063      	str	r3, [r4, #4]
}
   d502c:	4620      	mov	r0, r4
   d502e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5034 <_GLOBAL__sub_I_SystemMode>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   d5034:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   d5036:	4b28      	ldr	r3, [pc, #160]	; (d50d8 <_GLOBAL__sub_I_SystemMode+0xa4>)
    SleepResult() {}
   d5038:	4a28      	ldr	r2, [pc, #160]	; (d50dc <_GLOBAL__sub_I_SystemMode+0xa8>)
   d503a:	2501      	movs	r5, #1
   d503c:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   d503e:	4b28      	ldr	r3, [pc, #160]	; (d50e0 <_GLOBAL__sub_I_SystemMode+0xac>)
   d5040:	2400      	movs	r4, #0
   d5042:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   d5044:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5046:	601c      	str	r4, [r3, #0]
   d5048:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d504a:	719c      	strb	r4, [r3, #6]
        set_system_mode(mode);
   d504c:	2002      	movs	r0, #2
   d504e:	f005 fccb 	bl	da9e8 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5052:	4621      	mov	r1, r4
   d5054:	4628      	mov	r0, r5
   d5056:	f005 fcdf 	bl	daa18 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d505a:	4629      	mov	r1, r5
   d505c:	2004      	movs	r0, #4
   d505e:	f005 fa49 	bl	da4f4 <HAL_Feature_Set>
        capacity_(0) {
   d5062:	e9cd 4400 	strd	r4, r4, [sp]
   d5066:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d5068:	f008 fd5c 	bl	ddb24 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d506c:	4c1d      	ldr	r4, [pc, #116]	; (d50e4 <_GLOBAL__sub_I_SystemMode+0xb0>)
   d506e:	4605      	mov	r5, r0
   d5070:	4669      	mov	r1, sp
   d5072:	a803      	add	r0, sp, #12
   d5074:	f7ff ffab 	bl	d4fce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5078:	4626      	mov	r6, r4
        stream_(&stream) {
   d507a:	a903      	add	r1, sp, #12
   d507c:	a806      	add	r0, sp, #24
   d507e:	f7ff ffa6 	bl	d4fce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d5082:	4b19      	ldr	r3, [pc, #100]	; (d50e8 <_GLOBAL__sub_I_SystemMode+0xb4>)
   d5084:	f846 3b04 	str.w	r3, [r6], #4
   d5088:	a906      	add	r1, sp, #24
   d508a:	a809      	add	r0, sp, #36	; 0x24
   d508c:	f7ff ff9f 	bl	d4fce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5090:	aa09      	add	r2, sp, #36	; 0x24
   d5092:	211e      	movs	r1, #30
   d5094:	4630      	mov	r0, r6
   d5096:	f007 fb22 	bl	dc6de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d509a:	a809      	add	r0, sp, #36	; 0x24
   d509c:	f7ff ff56 	bl	d4f4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d50a0:	a806      	add	r0, sp, #24
   d50a2:	f7ff ff53 	bl	d4f4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d50a6:	4b11      	ldr	r3, [pc, #68]	; (d50ec <_GLOBAL__sub_I_SystemMode+0xb8>)
   d50a8:	6023      	str	r3, [r4, #0]
   d50aa:	6225      	str	r5, [r4, #32]
   d50ac:	a803      	add	r0, sp, #12
   d50ae:	f7ff ff4d 	bl	d4f4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d50b2:	4b0f      	ldr	r3, [pc, #60]	; (d50f0 <_GLOBAL__sub_I_SystemMode+0xbc>)
   d50b4:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d50b6:	f008 fd35 	bl	ddb24 <_Z16_fetch_usbserialv>
   d50ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d50be:	f008 fd21 	bl	ddb04 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d50c2:	f006 ffed 	bl	dc0a0 <_ZN5spark10LogManager8instanceEv>
   d50c6:	4621      	mov	r1, r4
   d50c8:	f007 fa9b 	bl	dc602 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   d50cc:	4668      	mov	r0, sp
   d50ce:	f7ff ff3d 	bl	d4f4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d50d2:	b00c      	add	sp, #48	; 0x30
   d50d4:	bd70      	pop	{r4, r5, r6, pc}
   d50d6:	bf00      	nop
   d50d8:	2003e1c0 	.word	0x2003e1c0
   d50dc:	ffff0000 	.word	0xffff0000
   d50e0:	2003e1b4 	.word	0x2003e1b4
   d50e4:	2003e1c4 	.word	0x2003e1c4
   d50e8:	000df368 	.word	0x000df368
   d50ec:	000e000c 	.word	0x000e000c
   d50f0:	000df380 	.word	0x000df380

000d50f4 <_Z22disconnectFromParticlev>:
{
   d50f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d50f8:	b087      	sub	sp, #28
  time_t startTime = Time.now();
   d50fa:	f008 fc12 	bl	dd922 <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   d50fe:	4947      	ldr	r1, [pc, #284]	; (d521c <_Z22disconnectFromParticlev+0x128>)
  time_t startTime = Time.now();
   d5100:	9001      	str	r0, [sp, #4]
  Log.info("In the disconnect from Particle function");
   d5102:	4847      	ldr	r0, [pc, #284]	; (d5220 <_Z22disconnectFromParticlev+0x12c>)
   d5104:	f7fe ffe0 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  detachInterrupt(BUTTON_PIN);                                         // Stop watching the userSwitch as we will no longer be connected
   d5108:	4b46      	ldr	r3, [pc, #280]	; (d5224 <_Z22disconnectFromParticlev+0x130>)
   d510a:	8818      	ldrh	r0, [r3, #0]
   d510c:	f006 fc16 	bl	db93c <_Z15detachInterruptt>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   d5110:	f04f 0a00 	mov.w	sl, #0
  Particle.disconnect();                                               // Disconnect from Particle
   d5114:	a803      	add	r0, sp, #12
   d5116:	e9cd aa03 	strd	sl, sl, [sp, #12]
   d511a:	f8ad a014 	strh.w	sl, [sp, #20]
   d511e:	f005 ffcc 	bl	db0ba <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   d5122:	4650      	mov	r0, sl
   d5124:	f005 fa16 	bl	da554 <hal_timer_millis>
        while (_while() && !_condition()) {
   d5128:	f643 2897 	movw	r8, #14999	; 0x3a97
        return hal_timer_millis(nullptr);
   d512c:	4683      	mov	fp, r0
        while (_while() && !_condition()) {
   d512e:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d5132:	2000      	movs	r0, #0
   d5134:	f005 fa0e 	bl	da554 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5138:	ebb0 060b 	subs.w	r6, r0, fp
   d513c:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d5140:	45b9      	cmp	r9, r7
   d5142:	bf08      	it	eq
   d5144:	45b0      	cmpeq	r8, r6
   d5146:	d305      	bcc.n	d5154 <_Z22disconnectFromParticlev+0x60>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5148:	f005 fcd6 	bl	daaf8 <spark_cloud_flag_connected>
   d514c:	b110      	cbz	r0, d5154 <_Z22disconnectFromParticlev+0x60>
            spark_process();
   d514e:	f005 fcc3 	bl	daad8 <spark_process>
        while (_while() && !_condition()) {
   d5152:	e7ee      	b.n	d5132 <_Z22disconnectFromParticlev+0x3e>
   d5154:	f005 fcd0 	bl	daaf8 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5158:	f005 f9ec 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d515c:	4f32      	ldr	r7, [pc, #200]	; (d5228 <_Z22disconnectFromParticlev+0x134>)
   d515e:	6038      	str	r0, [r7, #0]
    		spark_process();
   d5160:	f005 fcba 	bl	daad8 <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5164:	f005 fcc8 	bl	daaf8 <spark_cloud_flag_connected>
   d5168:	46bb      	mov	fp, r7
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   d516a:	4606      	mov	r6, r0
   d516c:	b140      	cbz	r0, d5180 <_Z22disconnectFromParticlev+0x8c>
    Log.info("Failed to disconnect from Particle");
   d516e:	492f      	ldr	r1, [pc, #188]	; (d522c <_Z22disconnectFromParticlev+0x138>)
   d5170:	482b      	ldr	r0, [pc, #172]	; (d5220 <_Z22disconnectFromParticlev+0x12c>)
   d5172:	f7fe ffa9 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   d5176:	2600      	movs	r6, #0
   d5178:	4630      	mov	r0, r6
   d517a:	b007      	add	sp, #28
   d517c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   d5180:	f008 fbcf 	bl	dd922 <_ZN9TimeClass3nowEv>
   d5184:	9b01      	ldr	r3, [sp, #4]
   d5186:	492a      	ldr	r1, [pc, #168]	; (d5230 <_Z22disconnectFromParticlev+0x13c>)
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5188:	4f2a      	ldr	r7, [pc, #168]	; (d5234 <_Z22disconnectFromParticlev+0x140>)
   d518a:	1ac2      	subs	r2, r0, r3
   d518c:	4824      	ldr	r0, [pc, #144]	; (d5220 <_Z22disconnectFromParticlev+0x12c>)
   d518e:	f7fe ff9b 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   d5192:	f008 fbc6 	bl	dd922 <_ZN9TimeClass3nowEv>
   d5196:	4632      	mov	r2, r6
   d5198:	2102      	movs	r1, #2
   d519a:	4680      	mov	r8, r0
   d519c:	6878      	ldr	r0, [r7, #4]
   d519e:	f005 fcfb 	bl	dab98 <network_disconnect>
        network_off(*this, 0, 0, NULL);
   d51a2:	6878      	ldr	r0, [r7, #4]
   d51a4:	4633      	mov	r3, r6
   d51a6:	4632      	mov	r2, r6
   d51a8:	4631      	mov	r1, r6
   d51aa:	f005 fd0d 	bl	dabc8 <network_off>
        return hal_timer_millis(nullptr);
   d51ae:	4630      	mov	r0, r6
   d51b0:	f005 f9d0 	bl	da554 <hal_timer_millis>
   d51b4:	46b2      	mov	sl, r6
   d51b6:	4681      	mov	r9, r0
   d51b8:	2000      	movs	r0, #0
   d51ba:	f005 f9cb 	bl	da554 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d51be:	ebb0 0409 	subs.w	r4, r0, r9
   d51c2:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d51c6:	2300      	movs	r3, #0
   d51c8:	f247 522f 	movw	r2, #29999	; 0x752f
   d51cc:	42ab      	cmp	r3, r5
   d51ce:	bf08      	it	eq
   d51d0:	42a2      	cmpeq	r2, r4
   d51d2:	d306      	bcc.n	d51e2 <_Z22disconnectFromParticlev+0xee>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d51d4:	4638      	mov	r0, r7
   d51d6:	f007 fdc1 	bl	dcd5c <_ZN5spark12NetworkClass5isOffEv>
   d51da:	b910      	cbnz	r0, d51e2 <_Z22disconnectFromParticlev+0xee>
            spark_process();
   d51dc:	f005 fc7c 	bl	daad8 <spark_process>
        while (_while() && !_condition()) {
   d51e0:	e7ea      	b.n	d51b8 <_Z22disconnectFromParticlev+0xc4>
   d51e2:	4814      	ldr	r0, [pc, #80]	; (d5234 <_Z22disconnectFromParticlev+0x140>)
   d51e4:	f007 fdba 	bl	dcd5c <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   d51e8:	f005 f9a4 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d51ec:	f8cb 0000 	str.w	r0, [fp]
    		spark_process();
   d51f0:	f005 fc72 	bl	daad8 <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   d51f4:	480f      	ldr	r0, [pc, #60]	; (d5234 <_Z22disconnectFromParticlev+0x140>)
   d51f6:	f007 fdad 	bl	dcd54 <_ZN5spark12NetworkClass4isOnEv>
   d51fa:	b120      	cbz	r0, d5206 <_Z22disconnectFromParticlev+0x112>
    Log.info("Failed to turn off the Cellular modem");
   d51fc:	490e      	ldr	r1, [pc, #56]	; (d5238 <_Z22disconnectFromParticlev+0x144>)
   d51fe:	4808      	ldr	r0, [pc, #32]	; (d5220 <_Z22disconnectFromParticlev+0x12c>)
   d5200:	f7fe ff62 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   d5204:	e7b8      	b.n	d5178 <_Z22disconnectFromParticlev+0x84>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   d5206:	f008 fb8c 	bl	dd922 <_ZN9TimeClass3nowEv>
   d520a:	490c      	ldr	r1, [pc, #48]	; (d523c <_Z22disconnectFromParticlev+0x148>)
   d520c:	eba0 0208 	sub.w	r2, r0, r8
   d5210:	4803      	ldr	r0, [pc, #12]	; (d5220 <_Z22disconnectFromParticlev+0x12c>)
   d5212:	f7fe ff59 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    return true;
   d5216:	2601      	movs	r6, #1
   d5218:	e7ae      	b.n	d5178 <_Z22disconnectFromParticlev+0x84>
   d521a:	bf00      	nop
   d521c:	000df1ac 	.word	0x000df1ac
   d5220:	2003e570 	.word	0x2003e570
   d5224:	000df10a 	.word	0x000df10a
   d5228:	2003e720 	.word	0x2003e720
   d522c:	000df1d5 	.word	0x000df1d5
   d5230:	000df1f8 	.word	0x000df1f8
   d5234:	2003e49c 	.word	0x2003e49c
   d5238:	000df221 	.word	0x000df221
   d523c:	000df247 	.word	0x000df247

000d5240 <_Z18particleInitializev>:
void particleInitialize() {
   d5240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5244:	b08c      	sub	sp, #48	; 0x30
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d5246:	4b55      	ldr	r3, [pc, #340]	; (d539c <_Z18particleInitializev+0x15c>)
   d5248:	9304      	str	r3, [sp, #16]
   d524a:	4b55      	ldr	r3, [pc, #340]	; (d53a0 <_Z18particleInitializev+0x160>)
   d524c:	9305      	str	r3, [sp, #20]
   d524e:	4b55      	ldr	r3, [pc, #340]	; (d53a4 <_Z18particleInitializev+0x164>)
   d5250:	9306      	str	r3, [sp, #24]
   d5252:	4b55      	ldr	r3, [pc, #340]	; (d53a8 <_Z18particleInitializev+0x168>)
   d5254:	9307      	str	r3, [sp, #28]
   d5256:	4b55      	ldr	r3, [pc, #340]	; (d53ac <_Z18particleInitializev+0x16c>)
  Particle.variable("Low Power Mode?",(sysStatus.lowPowerMode) ? "Yes" : "No");
   d5258:	4d55      	ldr	r5, [pc, #340]	; (d53b0 <_Z18particleInitializev+0x170>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d525a:	9308      	str	r3, [sp, #32]
   d525c:	4b55      	ldr	r3, [pc, #340]	; (d53b4 <_Z18particleInitializev+0x174>)
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   d525e:	4956      	ldr	r1, [pc, #344]	; (d53b8 <_Z18particleInitializev+0x178>)
   d5260:	4856      	ldr	r0, [pc, #344]	; (d53bc <_Z18particleInitializev+0x17c>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d5262:	9309      	str	r3, [sp, #36]	; 0x24
   d5264:	2400      	movs	r4, #0
   d5266:	4b56      	ldr	r3, [pc, #344]	; (d53c0 <_Z18particleInitializev+0x180>)
   d5268:	930a      	str	r3, [sp, #40]	; 0x28
   d526a:	940b      	str	r4, [sp, #44]	; 0x2c
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   d526c:	f7fe ff2c 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  Particle.variable("Low Power Mode?",(sysStatus.lowPowerMode) ? "Yes" : "No");
   d5270:	f895 c008 	ldrb.w	ip, [r5, #8]
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5274:	4853      	ldr	r0, [pc, #332]	; (d53c4 <_Z18particleInitializev+0x184>)
   d5276:	4954      	ldr	r1, [pc, #336]	; (d53c8 <_Z18particleInitializev+0x188>)
   d5278:	4623      	mov	r3, r4
   d527a:	45a4      	cmp	ip, r4
   d527c:	bf08      	it	eq
   d527e:	4601      	moveq	r1, r0
   d5280:	2204      	movs	r2, #4
   d5282:	4852      	ldr	r0, [pc, #328]	; (d53cc <_Z18particleInitializev+0x18c>)
   d5284:	f005 fc18 	bl	daab8 <spark_variable>
   d5288:	4951      	ldr	r1, [pc, #324]	; (d53d0 <_Z18particleInitializev+0x190>)
   d528a:	4852      	ldr	r0, [pc, #328]	; (d53d4 <_Z18particleInitializev+0x194>)
   d528c:	4623      	mov	r3, r4
   d528e:	2204      	movs	r2, #4
   d5290:	f005 fc12 	bl	daab8 <spark_variable>
   d5294:	4950      	ldr	r1, [pc, #320]	; (d53d8 <_Z18particleInitializev+0x198>)
   d5296:	4851      	ldr	r0, [pc, #324]	; (d53dc <_Z18particleInitializev+0x19c>)
   d5298:	4623      	mov	r3, r4
   d529a:	2204      	movs	r2, #4
   d529c:	f005 fc0c 	bl	daab8 <spark_variable>
   d52a0:	494f      	ldr	r1, [pc, #316]	; (d53e0 <_Z18particleInitializev+0x1a0>)
   d52a2:	4850      	ldr	r0, [pc, #320]	; (d53e4 <_Z18particleInitializev+0x1a4>)
   d52a4:	4623      	mov	r3, r4
   d52a6:	2202      	movs	r2, #2
   d52a8:	f005 fc06 	bl	daab8 <spark_variable>
  Particle.variable("BatteryContext",batteryContext[current.batteryState]);
   d52ac:	4b4e      	ldr	r3, [pc, #312]	; (d53e8 <_Z18particleInitializev+0x1a8>)
   d52ae:	484f      	ldr	r0, [pc, #316]	; (d53ec <_Z18particleInitializev+0x1ac>)
   d52b0:	7a19      	ldrb	r1, [r3, #8]
   d52b2:	ab0c      	add	r3, sp, #48	; 0x30
   d52b4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   d52b8:	2204      	movs	r2, #4
   d52ba:	f851 1c20 	ldr.w	r1, [r1, #-32]
   d52be:	4623      	mov	r3, r4
   d52c0:	f005 fbfa 	bl	daab8 <spark_variable>
        extra.size = sizeof(extra);
   d52c4:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d52c6:	e9cd 4401 	strd	r4, r4, [sp, #4]
        extra.size = sizeof(extra);
   d52ca:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.copy = [](const void* var, void** data, size_t* size) {
   d52ce:	4b48      	ldr	r3, [pc, #288]	; (d53f0 <_Z18particleInitializev+0x1b0>)
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d52d0:	4948      	ldr	r1, [pc, #288]	; (d53f4 <_Z18particleInitializev+0x1b4>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   d52d2:	9303      	str	r3, [sp, #12]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d52d4:	2204      	movs	r2, #4
   d52d6:	ab01      	add	r3, sp, #4
   d52d8:	4847      	ldr	r0, [pc, #284]	; (d53f8 <_Z18particleInitializev+0x1b8>)
   d52da:	f005 fbed 	bl	daab8 <spark_variable>
  Particle.variable("SIM Card", (sysStatus.verizonSIM) ? "Verizon" : "Particle");
   d52de:	f895 c024 	ldrb.w	ip, [r5, #36]	; 0x24
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d52e2:	4846      	ldr	r0, [pc, #280]	; (d53fc <_Z18particleInitializev+0x1bc>)
   d52e4:	4946      	ldr	r1, [pc, #280]	; (d5400 <_Z18particleInitializev+0x1c0>)
   d52e6:	4623      	mov	r3, r4
   d52e8:	45a4      	cmp	ip, r4
   d52ea:	bf08      	it	eq
   d52ec:	4601      	moveq	r1, r0
   d52ee:	2204      	movs	r2, #4
   d52f0:	4844      	ldr	r0, [pc, #272]	; (d5404 <_Z18particleInitializev+0x1c4>)
   d52f2:	f005 fbe1 	bl	daab8 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d52f6:	4a44      	ldr	r2, [pc, #272]	; (d5408 <_Z18particleInitializev+0x1c8>)
   d52f8:	4944      	ldr	r1, [pc, #272]	; (d540c <_Z18particleInitializev+0x1cc>)
   d52fa:	4845      	ldr	r0, [pc, #276]	; (d5410 <_Z18particleInitializev+0x1d0>)
   d52fc:	f005 fecc 	bl	db098 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5300:	4a44      	ldr	r2, [pc, #272]	; (d5414 <_Z18particleInitializev+0x1d4>)
   d5302:	4945      	ldr	r1, [pc, #276]	; (d5418 <_Z18particleInitializev+0x1d8>)
   d5304:	4842      	ldr	r0, [pc, #264]	; (d5410 <_Z18particleInitializev+0x1d0>)
   d5306:	f005 fec7 	bl	db098 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d530a:	4a3e      	ldr	r2, [pc, #248]	; (d5404 <_Z18particleInitializev+0x1c4>)
   d530c:	4943      	ldr	r1, [pc, #268]	; (d541c <_Z18particleInitializev+0x1dc>)
   d530e:	4840      	ldr	r0, [pc, #256]	; (d5410 <_Z18particleInitializev+0x1d0>)
   d5310:	f005 fec2 	bl	db098 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (!digitalRead(BUTTON_PIN)) {
   d5314:	4b42      	ldr	r3, [pc, #264]	; (d5420 <_Z18particleInitializev+0x1e0>)
   d5316:	8818      	ldrh	r0, [r3, #0]
   d5318:	f008 fd46 	bl	ddda8 <digitalRead>
   d531c:	b910      	cbnz	r0, d5324 <_Z18particleInitializev+0xe4>
    sysStatus.lowPowerMode = false;     // If the user button is held down while resetting - diable sleep
   d531e:	7228      	strb	r0, [r5, #8]
        spark_cloud_flag_connect();
   d5320:	f005 fbe2 	bl	daae8 <spark_cloud_flag_connect>
	if (!Time.isValid()) {							// I need to make sure the time is valid here.
   d5324:	f008 fae0 	bl	dd8e8 <_ZN9TimeClass7isValidEv>
   d5328:	4604      	mov	r4, r0
   d532a:	bb90      	cbnz	r0, d5392 <_Z18particleInitializev+0x152>
   d532c:	f005 fbdc 	bl	daae8 <spark_cloud_flag_connect>
        return hal_timer_millis(nullptr);
   d5330:	4620      	mov	r0, r4
   d5332:	f005 f90f 	bl	da554 <hal_timer_millis>
        while (_while() && !_condition()) {
   d5336:	f8df 80ec 	ldr.w	r8, [pc, #236]	; d5424 <_Z18particleInitializev+0x1e4>
        return hal_timer_millis(nullptr);
   d533a:	4682      	mov	sl, r0
        while (_while() && !_condition()) {
   d533c:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d5340:	2000      	movs	r0, #0
   d5342:	f005 f907 	bl	da554 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5346:	ebb0 060a 	subs.w	r6, r0, sl
   d534a:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d534e:	45b9      	cmp	r9, r7
   d5350:	bf08      	it	eq
   d5352:	45b0      	cmpeq	r8, r6
   d5354:	d305      	bcc.n	d5362 <_Z18particleInitializev+0x122>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5356:	f005 fbcf 	bl	daaf8 <spark_cloud_flag_connected>
   d535a:	b910      	cbnz	r0, d5362 <_Z18particleInitializev+0x122>
            spark_process();
   d535c:	f005 fbbc 	bl	daad8 <spark_process>
        while (_while() && !_condition()) {
   d5360:	e7ee      	b.n	d5340 <_Z18particleInitializev+0x100>
   d5362:	f005 fbc9 	bl	daaf8 <spark_cloud_flag_connected>
		if (waitFor(Particle.connected, 600000)) {	// Connect to Particle
   d5366:	b1a0      	cbz	r0, d5392 <_Z18particleInitializev+0x152>
			sysStatus.lastConnection = Time.now();			// Record the last connection time
   d5368:	f008 fadb 	bl	dd922 <_ZN9TimeClass3nowEv>
   d536c:	6168      	str	r0, [r5, #20]
   d536e:	f005 fbc3 	bl	daaf8 <spark_cloud_flag_connected>
        if (!connected()) {
   d5372:	b110      	cbz	r0, d537a <_Z18particleInitializev+0x13a>
        return spark_sync_time(NULL);
   d5374:	2000      	movs	r0, #0
   d5376:	f005 fbcf 	bl	dab18 <spark_sync_time>
			waitUntil(Particle.syncTimeDone);		// Make sure sync is complete
   d537a:	f7ff fc9f 	bl	d4cbc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d537e:	b910      	cbnz	r0, d5386 <_Z18particleInitializev+0x146>
            spark_process();
   d5380:	f005 fbaa 	bl	daad8 <spark_process>
        while (_while() && !_condition()) {
   d5384:	e7f9      	b.n	d537a <_Z18particleInitializev+0x13a>
   d5386:	f7ff fc99 	bl	d4cbc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
			if (sysStatus.lowPowerMode) disconnectFromParticle();
   d538a:	7a2b      	ldrb	r3, [r5, #8]
   d538c:	b10b      	cbz	r3, d5392 <_Z18particleInitializev+0x152>
   d538e:	f7ff feb1 	bl	d50f4 <_Z22disconnectFromParticlev>
  takeMeasurements();                               // Initialize sensor values
   d5392:	f000 fa17 	bl	d57c4 <_Z16takeMeasurementsv>
}
   d5396:	b00c      	add	sp, #48	; 0x30
   d5398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d539c:	000df282 	.word	0x000df282
   d53a0:	000df28a 	.word	0x000df28a
   d53a4:	000df28e 	.word	0x000df28e
   d53a8:	000df297 	.word	0x000df297
   d53ac:	000df29f 	.word	0x000df29f
   d53b0:	2003e220 	.word	0x2003e220
   d53b4:	000df2ab 	.word	0x000df2ab
   d53b8:	000df2bd 	.word	0x000df2bd
   d53bc:	2003e570 	.word	0x2003e570
   d53c0:	000df2b1 	.word	0x000df2b1
   d53c4:	000df277 	.word	0x000df277
   d53c8:	000df273 	.word	0x000df273
   d53cc:	000df2eb 	.word	0x000df2eb
   d53d0:	2003db40 	.word	0x2003db40
   d53d4:	000df2fb 	.word	0x000df2fb
   d53d8:	2003dc04 	.word	0x2003dc04
   d53dc:	000df303 	.word	0x000df303
   d53e0:	2003e204 	.word	0x2003e204
   d53e4:	000df30a 	.word	0x000df30a
   d53e8:	2003e200 	.word	0x2003e200
   d53ec:	000df315 	.word	0x000df315
   d53f0:	000d4cd9 	.word	0x000d4cd9
   d53f4:	000d4c95 	.word	0x000d4c95
   d53f8:	000df324 	.word	0x000df324
   d53fc:	000df1ef 	.word	0x000df1ef
   d5400:	000df27a 	.word	0x000df27a
   d5404:	000df338 	.word	0x000df338
   d5408:	000df341 	.word	0x000df341
   d540c:	000d4e21 	.word	0x000d4e21
   d5410:	000db06d 	.word	0x000db06d
   d5414:	000df34f 	.word	0x000df34f
   d5418:	000d4dad 	.word	0x000d4dad
   d541c:	000d4eb9 	.word	0x000d4eb9
   d5420:	000df10a 	.word	0x000df10a
   d5424:	000927bf 	.word	0x000927bf

000d5428 <_Z18loadSystemDefaultsv>:

/**
 * @brief This function is called in setup if the version of the FRAM stoage map has been changed
 * 
 */
void loadSystemDefaults() {                         // This code is only executed with a new device or a new storage object structure
   d5428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d542a:	f005 fb65 	bl	daaf8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d542e:	b1d8      	cbz	r0, d5468 <_Z18loadSystemDefaultsv+0x40>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d5430:	4b17      	ldr	r3, [pc, #92]	; (d5490 <_Z18loadSystemDefaultsv+0x68>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5432:	4a18      	ldr	r2, [pc, #96]	; (d5494 <_Z18loadSystemDefaultsv+0x6c>)
   d5434:	781b      	ldrb	r3, [r3, #0]
   d5436:	f88d 3000 	strb.w	r3, [sp]
   d543a:	4917      	ldr	r1, [pc, #92]	; (d5498 <_Z18loadSystemDefaultsv+0x70>)
   d543c:	233c      	movs	r3, #60	; 0x3c
   d543e:	a802      	add	r0, sp, #8
   d5440:	f005 ff36 	bl	db2b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d5444:	9c03      	ldr	r4, [sp, #12]
   d5446:	b17c      	cbz	r4, d5468 <_Z18loadSystemDefaultsv+0x40>
      if (--_M_use_count == 0)
   d5448:	6863      	ldr	r3, [r4, #4]
   d544a:	3b01      	subs	r3, #1
   d544c:	6063      	str	r3, [r4, #4]
   d544e:	b95b      	cbnz	r3, d5468 <_Z18loadSystemDefaultsv+0x40>
          _M_dispose();
   d5450:	6823      	ldr	r3, [r4, #0]
   d5452:	4620      	mov	r0, r4
   d5454:	689b      	ldr	r3, [r3, #8]
   d5456:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5458:	68a3      	ldr	r3, [r4, #8]
   d545a:	3b01      	subs	r3, #1
   d545c:	60a3      	str	r3, [r4, #8]
   d545e:	b91b      	cbnz	r3, d5468 <_Z18loadSystemDefaultsv+0x40>
            _M_destroy();
   d5460:	6823      	ldr	r3, [r4, #0]
   d5462:	4620      	mov	r0, r4
   d5464:	68db      	ldr	r3, [r3, #12]
   d5466:	4798      	blx	r3
    Particle.publish("Mode","Loading System Defaults", PRIVATE);
  }
  Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   d5468:	490c      	ldr	r1, [pc, #48]	; (d549c <_Z18loadSystemDefaultsv+0x74>)
   d546a:	480d      	ldr	r0, [pc, #52]	; (d54a0 <_Z18loadSystemDefaultsv+0x78>)
   d546c:	f7fe fe2c 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.structuresVersion = 1;
   d5470:	4b0c      	ldr	r3, [pc, #48]	; (d54a4 <_Z18loadSystemDefaultsv+0x7c>)
   d5472:	4a0d      	ldr	r2, [pc, #52]	; (d54a8 <_Z18loadSystemDefaultsv+0x80>)
   d5474:	605a      	str	r2, [r3, #4]
  sysStatus.firmwareRelease = 1;
  sysStatus.verboseMode = false;
  sysStatus.solarPowerMode = true;
  sysStatus.lowPowerMode = true;
   d5476:	2201      	movs	r2, #1
   d5478:	721a      	strb	r2, [r3, #8]
  sysStatus.resetCount = 0;
  sysStatus.lastHookResponse = 0;
  sysStatus.frequencyMinutes = 60;
   d547a:	213c      	movs	r1, #60	; 0x3c
  sysStatus.resetCount = 0;
   d547c:	2200      	movs	r2, #0
  sysStatus.lastHookResponse = 0;
   d547e:	e9c3 2203 	strd	r2, r2, [r3, #12]
  sysStatus.frequencyMinutes = 60;
   d5482:	8359      	strh	r1, [r3, #26]
  sysStatus.lastAlertCode = 0;
   d5484:	771a      	strb	r2, [r3, #28]
  sysStatus.lastAlertTime = 0;
   d5486:	621a      	str	r2, [r3, #32]
  sysStatus.verizonSIM = false;
   d5488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   d548c:	b004      	add	sp, #16
   d548e:	bd10      	pop	{r4, pc}
   d5490:	2003e1e8 	.word	0x2003e1e8
   d5494:	000df390 	.word	0x000df390
   d5498:	000df180 	.word	0x000df180
   d549c:	000df3a8 	.word	0x000df3a8
   d54a0:	2003e570 	.word	0x2003e570
   d54a4:	2003e220 	.word	0x2003e220
   d54a8:	01000101 	.word	0x01000101

000d54ac <_GLOBAL__sub_I_sysStatus>:
        val_(val) {
   d54ac:	4b01      	ldr	r3, [pc, #4]	; (d54b4 <_GLOBAL__sub_I_sysStatus+0x8>)
   d54ae:	2201      	movs	r2, #1
   d54b0:	701a      	strb	r2, [r3, #0]
   d54b2:	4770      	bx	lr
   d54b4:	2003e1e8 	.word	0x2003e1e8

000d54b8 <_Z17storageObjectLoopv>:
bool storageObjectLoop() {                          // Monitors the values of the two objects and writes to FRAM if changed after a second
   d54b8:	b570      	push	{r4, r5, r6, lr}
  if (Time.now() - lastCheckTime) {          // Check once a second
   d54ba:	4c31      	ldr	r4, [pc, #196]	; (d5580 <_Z17storageObjectLoopv+0xc8>)
   d54bc:	f008 fa31 	bl	dd922 <_ZN9TimeClass3nowEv>
   d54c0:	e9d4 2300 	ldrd	r2, r3, [r4]
   d54c4:	17c1      	asrs	r1, r0, #31
   d54c6:	4299      	cmp	r1, r3
   d54c8:	bf08      	it	eq
   d54ca:	4290      	cmpeq	r0, r2
   d54cc:	d056      	beq.n	d557c <_Z17storageObjectLoopv+0xc4>
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   d54ce:	f008 fa28 	bl	dd922 <_ZN9TimeClass3nowEv>
                      std::hash<uint32_t>{}(sysStatus.lastHookResponse) + \
   d54d2:	4d2c      	ldr	r5, [pc, #176]	; (d5584 <_Z17storageObjectLoopv+0xcc>)
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   d54d4:	4e2c      	ldr	r6, [pc, #176]	; (d5588 <_Z17storageObjectLoopv+0xd0>)
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   d54d6:	17c1      	asrs	r1, r0, #31
   d54d8:	e9c4 0100 	strd	r0, r1, [r4]
                      std::hash<byte>{}(sysStatus.lastAlertCode)+ \
   d54dc:	e9d5 3404 	ldrd	r3, r4, [r5, #16]
   d54e0:	441c      	add	r4, r3
   d54e2:	6a2b      	ldr	r3, [r5, #32]
   d54e4:	441c      	add	r4, r3

  /// Explicit specialization for long long.
  _Cxx_hashtable_define_trivial_hash(long long)

  /// Explicit specialization for unsigned short.
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d54e6:	882b      	ldrh	r3, [r5, #0]
   d54e8:	441c      	add	r4, r3
   d54ea:	886b      	ldrh	r3, [r5, #2]
   d54ec:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d54ee:	792b      	ldrb	r3, [r5, #4]
   d54f0:	441c      	add	r4, r3
   d54f2:	796b      	ldrb	r3, [r5, #5]
   d54f4:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   d54f6:	79ab      	ldrb	r3, [r5, #6]
   d54f8:	441c      	add	r4, r3
   d54fa:	79eb      	ldrb	r3, [r5, #7]
   d54fc:	441c      	add	r4, r3
   d54fe:	7a2b      	ldrb	r3, [r5, #8]
   d5500:	441c      	add	r4, r3
   d5502:	68eb      	ldr	r3, [r5, #12]
   d5504:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d5506:	8b2b      	ldrh	r3, [r5, #24]
   d5508:	441c      	add	r4, r3
   d550a:	8b6b      	ldrh	r3, [r5, #26]
   d550c:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d550e:	7f2b      	ldrb	r3, [r5, #28]
   d5510:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   d5512:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
                      std::hash<bool>{}(sysStatus.verizonSIM);
   d5516:	441c      	add	r4, r3
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   d5518:	6833      	ldr	r3, [r6, #0]
   d551a:	429c      	cmp	r4, r3
   d551c:	d02c      	beq.n	d5578 <_Z17storageObjectLoopv+0xc0>
      Log.info("sysStaus object stored and hash updated");
   d551e:	491b      	ldr	r1, [pc, #108]	; (d558c <_Z17storageObjectLoopv+0xd4>)
   d5520:	481b      	ldr	r0, [pc, #108]	; (d5590 <_Z17storageObjectLoopv+0xd8>)
   d5522:	f7fe fdd1 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5526:	481b      	ldr	r0, [pc, #108]	; (d5594 <_Z17storageObjectLoopv+0xdc>)
   d5528:	2328      	movs	r3, #40	; 0x28
   d552a:	462a      	mov	r2, r5
   d552c:	2101      	movs	r1, #1
   d552e:	f002 fbb0 	bl	d7c92 <_ZN6MB85RC9writeDataEjPKhj>
      lastSysStatusHash = sysStatusHash;
   d5532:	6034      	str	r4, [r6, #0]
      returnValue = true;                           // In case I want to test whether values changed
   d5534:	2001      	movs	r0, #1
    size_t currentHash =  std::hash<byte>{}(current.internalTempC) + \
   d5536:	4d18      	ldr	r5, [pc, #96]	; (d5598 <_Z17storageObjectLoopv+0xe0>)
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   d5538:	4e18      	ldr	r6, [pc, #96]	; (d559c <_Z17storageObjectLoopv+0xe4>)
    size_t currentHash =  std::hash<byte>{}(current.internalTempC) + \
   d553a:	686b      	ldr	r3, [r5, #4]
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d553c:	782c      	ldrb	r4, [r5, #0]
   d553e:	441c      	add	r4, r3
   d5540:	7a2b      	ldrb	r3, [r5, #8]
                      std::hash<int>{}(current.stateOfCharge)+ \
   d5542:	441c      	add	r4, r3
                      std::hash<byte>{}(current.batteryState) + \
   d5544:	692b      	ldr	r3, [r5, #16]
   d5546:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d5548:	8b2b      	ldrh	r3, [r5, #24]
                      std::hash<time_t>{}(current.lastSampleTime) + \
   d554a:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d554c:	7eab      	ldrb	r3, [r5, #26]
                      std::hash<uint16_t>{}(current.rssi) + \
   d554e:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d5550:	8bab      	ldrh	r3, [r5, #28]
                      std::hash<uint8_t>{}(current.messageNumber) + \
   d5552:	441c      	add	r4, r3
   d5554:	8beb      	ldrh	r3, [r5, #30]
                      std::hash<uint16_t>{}(current.daily);
   d5556:	441c      	add	r4, r3
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   d5558:	6833      	ldr	r3, [r6, #0]
   d555a:	429c      	cmp	r4, r3
   d555c:	d00b      	beq.n	d5576 <_Z17storageObjectLoopv+0xbe>
      Log.info("current object stored and hash updated");
   d555e:	4910      	ldr	r1, [pc, #64]	; (d55a0 <_Z17storageObjectLoopv+0xe8>)
   d5560:	480b      	ldr	r0, [pc, #44]	; (d5590 <_Z17storageObjectLoopv+0xd8>)
   d5562:	f7fe fdb1 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d5566:	480b      	ldr	r0, [pc, #44]	; (d5594 <_Z17storageObjectLoopv+0xdc>)
   d5568:	2320      	movs	r3, #32
   d556a:	462a      	mov	r2, r5
   d556c:	2150      	movs	r1, #80	; 0x50
   d556e:	f002 fb90 	bl	d7c92 <_ZN6MB85RC9writeDataEjPKhj>
      lastCurrentHash = currentHash;
   d5572:	6034      	str	r4, [r6, #0]
      returnValue = true;
   d5574:	2001      	movs	r0, #1
}
   d5576:	bd70      	pop	{r4, r5, r6, pc}
  bool returnValue = false;
   d5578:	2000      	movs	r0, #0
   d557a:	e7dc      	b.n	d5536 <_Z17storageObjectLoopv+0x7e>
   d557c:	2000      	movs	r0, #0
   d557e:	e7fa      	b.n	d5576 <_Z17storageObjectLoopv+0xbe>
   d5580:	2003e1f0 	.word	0x2003e1f0
   d5584:	2003e220 	.word	0x2003e220
   d5588:	2003e1fc 	.word	0x2003e1fc
   d558c:	000df3c0 	.word	0x000df3c0
   d5590:	2003e570 	.word	0x2003e570
   d5594:	2003e074 	.word	0x2003e074
   d5598:	2003e200 	.word	0x2003e200
   d559c:	2003e1f8 	.word	0x2003e1f8
   d55a0:	000df3e8 	.word	0x000df3e8

000d55a4 <_Z18storageObjectStartv>:
bool storageObjectStart() {
   d55a4:	b513      	push	{r0, r1, r4, lr}
  Log.info("Initializing the Object Store");
   d55a6:	4921      	ldr	r1, [pc, #132]	; (d562c <_Z18storageObjectStartv+0x88>)
   d55a8:	4821      	ldr	r0, [pc, #132]	; (d5630 <_Z18storageObjectStartv+0x8c>)
   d55aa:	f7fe fd8d 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  fram.begin();                                     // Initialize the FRAM module
   d55ae:	4821      	ldr	r0, [pc, #132]	; (d5634 <_Z18storageObjectStartv+0x90>)
   d55b0:	f002 fae2 	bl	d7b78 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d55b4:	481f      	ldr	r0, [pc, #124]	; (d5634 <_Z18storageObjectStartv+0x90>)
   d55b6:	2301      	movs	r3, #1
   d55b8:	f10d 0207 	add.w	r2, sp, #7
   d55bc:	2100      	movs	r1, #0
   d55be:	f002 fb1d 	bl	d7bfc <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {           // Check to see if the memory map in the sketch matches the data on the chip
   d55c2:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d55c6:	2c01      	cmp	r4, #1
   d55c8:	d01c      	beq.n	d5604 <_Z18storageObjectStartv+0x60>
    Log.info("FRAM mismatch, erasing and locafing defaults if it checks out");
   d55ca:	491b      	ldr	r1, [pc, #108]	; (d5638 <_Z18storageObjectStartv+0x94>)
   d55cc:	4818      	ldr	r0, [pc, #96]	; (d5630 <_Z18storageObjectStartv+0x8c>)
   d55ce:	f7fe fd7b 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    fram.erase();                                   // Reset the FRAM to correct the issue
   d55d2:	4818      	ldr	r0, [pc, #96]	; (d5634 <_Z18storageObjectStartv+0x90>)
   d55d4:	f002 fada 	bl	d7b8c <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d55d8:	4a18      	ldr	r2, [pc, #96]	; (d563c <_Z18storageObjectStartv+0x98>)
   d55da:	4816      	ldr	r0, [pc, #88]	; (d5634 <_Z18storageObjectStartv+0x90>)
   d55dc:	2304      	movs	r3, #4
   d55de:	2100      	movs	r1, #0
   d55e0:	f002 fb57 	bl	d7c92 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d55e4:	4813      	ldr	r0, [pc, #76]	; (d5634 <_Z18storageObjectStartv+0x90>)
   d55e6:	2301      	movs	r3, #1
   d55e8:	f10d 0207 	add.w	r2, sp, #7
   d55ec:	2100      	movs	r1, #0
   d55ee:	f002 fb05 	bl	d7bfc <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) {
   d55f2:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d55f6:	2c01      	cmp	r4, #1
   d55f8:	d115      	bne.n	d5626 <_Z18storageObjectStartv+0x82>
    loadSystemDefaults();                           // Since we are re-initializing the storage objects, we need to set the right default values
   d55fa:	f7ff ff15 	bl	d5428 <_Z18loadSystemDefaultsv>
   d55fe:	4620      	mov	r0, r4
}
   d5600:	b002      	add	sp, #8
   d5602:	bd10      	pop	{r4, pc}
    Log.info("FRAM initialized, loading objects");
   d5604:	490e      	ldr	r1, [pc, #56]	; (d5640 <_Z18storageObjectStartv+0x9c>)
   d5606:	480a      	ldr	r0, [pc, #40]	; (d5630 <_Z18storageObjectStartv+0x8c>)
   d5608:	f7fe fd5e 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d560c:	4621      	mov	r1, r4
   d560e:	4a0d      	ldr	r2, [pc, #52]	; (d5644 <_Z18storageObjectStartv+0xa0>)
   d5610:	4808      	ldr	r0, [pc, #32]	; (d5634 <_Z18storageObjectStartv+0x90>)
   d5612:	2328      	movs	r3, #40	; 0x28
   d5614:	f002 faf2 	bl	d7bfc <_ZN6MB85RC8readDataEjPhj>
   d5618:	4a0b      	ldr	r2, [pc, #44]	; (d5648 <_Z18storageObjectStartv+0xa4>)
   d561a:	4806      	ldr	r0, [pc, #24]	; (d5634 <_Z18storageObjectStartv+0x90>)
   d561c:	2320      	movs	r3, #32
   d561e:	2150      	movs	r1, #80	; 0x50
   d5620:	f002 faec 	bl	d7bfc <_ZN6MB85RC8readDataEjPhj>
   d5624:	e7eb      	b.n	d55fe <_Z18storageObjectStartv+0x5a>
      return false;
   d5626:	2000      	movs	r0, #0
   d5628:	e7ea      	b.n	d5600 <_Z18storageObjectStartv+0x5c>
   d562a:	bf00      	nop
   d562c:	000df40f 	.word	0x000df40f
   d5630:	2003e570 	.word	0x2003e570
   d5634:	2003e074 	.word	0x2003e074
   d5638:	000df42d 	.word	0x000df42d
   d563c:	000df490 	.word	0x000df490
   d5640:	000df46b 	.word	0x000df46b
   d5644:	2003e220 	.word	0x2003e220
   d5648:	2003e200 	.word	0x2003e200

000d564c <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   d564c:	ee07 0a90 	vmov	s15, r0
   d5650:	ed9f 7a09 	vldr	s14, [pc, #36]	; d5678 <_Z17tmp36TemperatureCi+0x2c>
   d5654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5658:	ee67 7a87 	vmul.f32	s15, s15, s14
   d565c:	ed9f 7a07 	vldr	s14, [pc, #28]	; d567c <_Z17tmp36TemperatureCi+0x30>
   d5660:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   d5664:	eddf 7a06 	vldr	s15, [pc, #24]	; d5680 <_Z17tmp36TemperatureCi+0x34>
   d5668:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   d566c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   d5670:	ee87 0a80 	vdiv.f32	s0, s15, s0
   d5674:	4770      	bx	lr
   d5676:	bf00      	nop
   d5678:	454e4000 	.word	0x454e4000
   d567c:	457ff000 	.word	0x457ff000
   d5680:	43fa0000 	.word	0x43fa0000

000d5684 <_Z12batteryStatev>:
 * from sleep.  In order to help with this, there is a test for enable sleep and an additional delay.
 * 
 * @return true  - If the battery has a charge over 60%
 * @return false - Less than 60% indicates a low battery condition
 */
bool batteryState() {
   d5684:	b510      	push	{r4, lr}
   d5686:	b086      	sub	sp, #24
    const diag_source* src = nullptr;
   d5688:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d568a:	a902      	add	r1, sp, #8
   d568c:	2007      	movs	r0, #7
    const diag_source* src = nullptr;
   d568e:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
   d5690:	f005 f998 	bl	da9c4 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d5694:	b9b8      	cbnz	r0, d56c6 <_Z12batteryStatev+0x42>
    return get(src, val);
   d5696:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
   d5698:	b10c      	cbz	r4, d569e <_Z12batteryStatev+0x1a>
   d569a:	6923      	ldr	r3, [r4, #16]
   d569c:	b923      	cbnz	r3, d56a8 <_Z12batteryStatev+0x24>
   d569e:	4a19      	ldr	r2, [pc, #100]	; (d5704 <_Z12batteryStatev+0x80>)
   d56a0:	2100      	movs	r1, #0
   d56a2:	200a      	movs	r0, #10
   d56a4:	f005 f966 	bl	da974 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d56a8:	2300      	movs	r3, #0
   d56aa:	f8ad 300e 	strh.w	r3, [sp, #14]
   d56ae:	230c      	movs	r3, #12
   d56b0:	f8ad 300c 	strh.w	r3, [sp, #12]
   d56b4:	ab01      	add	r3, sp, #4
   d56b6:	9304      	str	r3, [sp, #16]
   d56b8:	2304      	movs	r3, #4
   d56ba:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d56bc:	aa03      	add	r2, sp, #12
   d56be:	6923      	ldr	r3, [r4, #16]
   d56c0:	2101      	movs	r1, #1
   d56c2:	4620      	mov	r0, r4
   d56c4:	4798      	blx	r3
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context

  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d56c6:	4a10      	ldr	r2, [pc, #64]	; (d5708 <_Z12batteryStatev+0x84>)
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d56c8:	4c10      	ldr	r4, [pc, #64]	; (d570c <_Z12batteryStatev+0x88>)
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d56ca:	7a12      	ldrb	r2, [r2, #8]
        if (r < 0) {
   d56cc:	2800      	cmp	r0, #0
        return val;
   d56ce:	bfa8      	it	ge
   d56d0:	9801      	ldrge	r0, [sp, #4]
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d56d2:	7220      	strb	r0, [r4, #8]
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d56d4:	b132      	cbz	r2, d56e4 <_Z12batteryStatev+0x60>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   d56d6:	480e      	ldr	r0, [pc, #56]	; (d5710 <_Z12batteryStatev+0x8c>)
   d56d8:	f006 f858 	bl	db78c <_ZN9FuelGauge10quickStartEv>
    delay(500);
   d56dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d56e0:	f005 fb22 	bl	dad28 <delay>
  }

  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d56e4:	480a      	ldr	r0, [pc, #40]	; (d5710 <_Z12batteryStatev+0x8c>)
   d56e6:	f005 fff1 	bl	db6cc <_ZN9FuelGauge6getSoCEv>
   d56ea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d56ee:	ee17 0a90 	vmov	r0, s15

  if (current.stateOfCharge > 60) return true;
  else return false;
}
   d56f2:	283c      	cmp	r0, #60	; 0x3c
   d56f4:	bfd4      	ite	le
   d56f6:	2000      	movle	r0, #0
   d56f8:	2001      	movgt	r0, #1
  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d56fa:	edc4 7a01 	vstr	s15, [r4, #4]
}
   d56fe:	b006      	add	sp, #24
   d5700:	bd10      	pop	{r4, pc}
   d5702:	bf00      	nop
   d5704:	000da525 	.word	0x000da525
   d5708:	2003e220 	.word	0x2003e220
   d570c:	2003e200 	.word	0x2003e200
   d5710:	2003e248 	.word	0x2003e248

000d5714 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   d5714:	b537      	push	{r0, r1, r2, r4, r5, lr}
  PMIC pmic(true);
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d5716:	4d0c      	ldr	r5, [pc, #48]	; (d5748 <_Z16isItSafeToChargev+0x34>)
  PMIC pmic(true);
   d5718:	2101      	movs	r1, #1
   d571a:	a801      	add	r0, sp, #4
   d571c:	f007 fbb1 	bl	dce82 <_ZN4PMICC1Eb>
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d5720:	782b      	ldrb	r3, [r5, #0]
   d5722:	2b25      	cmp	r3, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   d5724:	a801      	add	r0, sp, #4
   d5726:	f04f 0401 	mov.w	r4, #1
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d572a:	d909      	bls.n	d5740 <_Z16isItSafeToChargev+0x2c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   d572c:	f007 fc3c 	bl	dcfa8 <_ZN4PMIC15disableChargingEv>
    current.batteryState = 1;                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d5730:	722c      	strb	r4, [r5, #8]
    return false;
   d5732:	2400      	movs	r4, #0
  PMIC pmic(true);
   d5734:	a801      	add	r0, sp, #4
   d5736:	f007 fbb3 	bl	dcea0 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   d573a:	4620      	mov	r0, r4
   d573c:	b003      	add	sp, #12
   d573e:	bd30      	pop	{r4, r5, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   d5740:	f007 fc1b 	bl	dcf7a <_ZN4PMIC14enableChargingEv>
    return true;
   d5744:	e7f6      	b.n	d5734 <_Z16isItSafeToChargev+0x20>
   d5746:	bf00      	nop
   d5748:	2003e200 	.word	0x2003e200

000d574c <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   d574c:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d574e:	4d19      	ldr	r5, [pc, #100]	; (d57b4 <_Z17getSignalStrengthv+0x68>)
   d5750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d5752:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d5754:	ac04      	add	r4, sp, #16
   d5756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d575a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d575c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5760:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d5764:	4914      	ldr	r1, [pc, #80]	; (d57b8 <_Z17getSignalStrengthv+0x6c>)
   d5766:	a80e      	add	r0, sp, #56	; 0x38
   d5768:	f005 fb38 	bl	daddc <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d576c:	a80e      	add	r0, sp, #56	; 0x38
   d576e:	f005 fb88 	bl	dae82 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d5772:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d5774:	a80e      	add	r0, sp, #56	; 0x38
   d5776:	f005 fb9f 	bl	daeb8 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d577a:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d577c:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d5780:	f005 fbca 	bl	daf18 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d5784:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d5786:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d578a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d578e:	f008 fd23 	bl	de1d8 <__aeabi_f2d>
   d5792:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d5796:	4628      	mov	r0, r5
   d5798:	f008 fd1e 	bl	de1d8 <__aeabi_f2d>
   d579c:	e9cd 0100 	strd	r0, r1, [sp]
   d57a0:	4a06      	ldr	r2, [pc, #24]	; (d57bc <_Z17getSignalStrengthv+0x70>)
   d57a2:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d57a6:	4806      	ldr	r0, [pc, #24]	; (d57c0 <_Z17getSignalStrengthv+0x74>)
   d57a8:	2140      	movs	r1, #64	; 0x40
   d57aa:	f005 fa6d 	bl	dac88 <snprintf>
   d57ae:	b019      	add	sp, #100	; 0x64
   d57b0:	bd30      	pop	{r4, r5, pc}
   d57b2:	bf00      	nop
   d57b4:	000df50c 	.word	0x000df50c
   d57b8:	2003e49c 	.word	0x2003e49c
   d57bc:	000df4d2 	.word	0x000df4d2
   d57c0:	2003dc04 	.word	0x2003dc04

000d57c4 <_Z16takeMeasurementsv>:
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d57c4:	4b10      	ldr	r3, [pc, #64]	; (d5808 <_Z16takeMeasurementsv+0x44>)
bool takeMeasurements() { 
   d57c6:	b510      	push	{r4, lr}
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d57c8:	8818      	ldrh	r0, [r3, #0]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d57ca:	4c10      	ldr	r4, [pc, #64]	; (d580c <_Z16takeMeasurementsv+0x48>)
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d57cc:	f008 faff 	bl	dddce <analogRead>
   d57d0:	f7ff ff3c 	bl	d564c <_Z17tmp36TemperatureCi>
   d57d4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d57d8:	4a0d      	ldr	r2, [pc, #52]	; (d5810 <_Z16takeMeasurementsv+0x4c>)
   d57da:	ee17 3a90 	vmov	r3, s15
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d57de:	2110      	movs	r1, #16
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d57e0:	7013      	strb	r3, [r2, #0]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d57e2:	4620      	mov	r0, r4
   d57e4:	b2db      	uxtb	r3, r3
   d57e6:	4a0b      	ldr	r2, [pc, #44]	; (d5814 <_Z16takeMeasurementsv+0x50>)
   d57e8:	f005 fa4e 	bl	dac88 <snprintf>
    Log.info("Internal Temperature is %s",internalTempStr);
   d57ec:	490a      	ldr	r1, [pc, #40]	; (d5818 <_Z16takeMeasurementsv+0x54>)
   d57ee:	480b      	ldr	r0, [pc, #44]	; (d581c <_Z16takeMeasurementsv+0x58>)
   d57f0:	4622      	mov	r2, r4
   d57f2:	f7fe fc69 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    batteryState();
   d57f6:	f7ff ff45 	bl	d5684 <_Z12batteryStatev>
    isItSafeToCharge();
   d57fa:	f7ff ff8b 	bl	d5714 <_Z16isItSafeToChargev>
    getSignalStrength();
   d57fe:	f7ff ffa5 	bl	d574c <_Z17getSignalStrengthv>
}
   d5802:	2001      	movs	r0, #1
   d5804:	bd10      	pop	{r4, pc}
   d5806:	bf00      	nop
   d5808:	000df110 	.word	0x000df110
   d580c:	2003dbf4 	.word	0x2003dbf4
   d5810:	2003e200 	.word	0x2003e200
   d5814:	000df4eb 	.word	0x000df4eb
   d5818:	000df4f0 	.word	0x000df4f0
   d581c:	2003e570 	.word	0x2003e570

000d5820 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   d5820:	4801      	ldr	r0, [pc, #4]	; (d5828 <_GLOBAL__sub_I_batteryContext+0x8>)
   d5822:	2100      	movs	r1, #0
   d5824:	f005 bf04 	b.w	db630 <_ZN9FuelGaugeC1Eb>
   d5828:	2003e248 	.word	0x2003e248

000d582c <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d582c:	4770      	bx	lr

000d582e <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d582e:	b510      	push	{r4, lr}
}
   d5830:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d5832:	4604      	mov	r4, r0
}
   d5834:	f008 fb5c 	bl	ddef0 <_ZdlPvj>
   d5838:	4620      	mov	r0, r4
   d583a:	bd10      	pop	{r4, pc}

000d583c <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d583c:	b40e      	push	{r1, r2, r3}
   d583e:	b510      	push	{r4, lr}
   d5840:	b08d      	sub	sp, #52	; 0x34
   d5842:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d5844:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d5846:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d584a:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d584c:	2300      	movs	r3, #0
   d584e:	2020      	movs	r0, #32
   d5850:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5854:	e9cd 4200 	strd	r4, r2, [sp]
   d5858:	2001      	movs	r0, #1
   d585a:	aa04      	add	r2, sp, #16
   d585c:	f005 f89a 	bl	da994 <log_message_v>
}
   d5860:	b00d      	add	sp, #52	; 0x34
   d5862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5866:	b003      	add	sp, #12
   d5868:	4770      	bx	lr

000d586a <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d586a:	b40e      	push	{r1, r2, r3}
   d586c:	b510      	push	{r4, lr}
   d586e:	b08d      	sub	sp, #52	; 0x34
   d5870:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d5872:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d5874:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5878:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d587a:	2300      	movs	r3, #0
   d587c:	2020      	movs	r0, #32
   d587e:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5882:	e9cd 4200 	strd	r4, r2, [sp]
   d5886:	2032      	movs	r0, #50	; 0x32
   d5888:	aa04      	add	r2, sp, #16
   d588a:	f005 f883 	bl	da994 <log_message_v>
}
   d588e:	b00d      	add	sp, #52	; 0x34
   d5890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5894:	b003      	add	sp, #12
   d5896:	4770      	bx	lr

000d5898 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d5898:	b510      	push	{r4, lr}
   d589a:	7202      	strb	r2, [r0, #8]
   d589c:	22ff      	movs	r2, #255	; 0xff
   d589e:	8142      	strh	r2, [r0, #10]
   d58a0:	2200      	movs	r2, #0
   d58a2:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d58a6:	6142      	str	r2, [r0, #20]
   d58a8:	7602      	strb	r2, [r0, #24]
   d58aa:	61c2      	str	r2, [r0, #28]
    instance = this;
   d58ac:	4a02      	ldr	r2, [pc, #8]	; (d58b8 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d58ae:	4c03      	ldr	r4, [pc, #12]	; (d58bc <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d58b0:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d58b2:	e9c0 4100 	strd	r4, r1, [r0]
}
   d58b6:	bd10      	pop	{r4, pc}
   d58b8:	2003e254 	.word	0x2003e254
   d58bc:	000df738 	.word	0x000df738

000d58c0 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d58c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d58c4:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d58c8:	4604      	mov	r4, r0
   d58ca:	4689      	mov	r9, r1
   d58cc:	4616      	mov	r6, r2
   d58ce:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d58d0:	f1b8 0f00 	cmp.w	r8, #0
   d58d4:	d002      	beq.n	d58dc <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d58d6:	6840      	ldr	r0, [r0, #4]
   d58d8:	f005 fff2 	bl	db8c0 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d58dc:	7a21      	ldrb	r1, [r4, #8]
   d58de:	6860      	ldr	r0, [r4, #4]
   d58e0:	f005 ffcb 	bl	db87a <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d58e4:	6860      	ldr	r0, [r4, #4]
   d58e6:	6803      	ldr	r3, [r0, #0]
   d58e8:	4649      	mov	r1, r9
   d58ea:	689b      	ldr	r3, [r3, #8]
   d58ec:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d58ee:	6860      	ldr	r0, [r4, #4]
   d58f0:	2100      	movs	r1, #0
   d58f2:	f005 ffe1 	bl	db8b8 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d58f6:	4605      	mov	r5, r0
   d58f8:	bb00      	cbnz	r0, d593c <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d58fa:	2301      	movs	r3, #1
   d58fc:	7a21      	ldrb	r1, [r4, #8]
   d58fe:	6860      	ldr	r0, [r4, #4]
   d5900:	463a      	mov	r2, r7
   d5902:	f005 ffa8 	bl	db856 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d5906:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d5908:	4603      	mov	r3, r0
        if (count == num) {
   d590a:	d109      	bne.n	d5920 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d590c:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d590e:	42be      	cmp	r6, r7
   d5910:	d01c      	beq.n	d594c <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d5912:	6860      	ldr	r0, [r4, #4]
   d5914:	6803      	ldr	r3, [r0, #0]
   d5916:	695b      	ldr	r3, [r3, #20]
   d5918:	4798      	blx	r3
   d591a:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d591e:	e7f6      	b.n	d590e <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d5920:	490b      	ldr	r1, [pc, #44]	; (d5950 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d5922:	480c      	ldr	r0, [pc, #48]	; (d5954 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d5924:	464a      	mov	r2, r9
   d5926:	f7ff ffa0 	bl	d586a <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d592a:	f1b8 0f00 	cmp.w	r8, #0
   d592e:	d002      	beq.n	d5936 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d5930:	6860      	ldr	r0, [r4, #4]
   d5932:	f005 ffce 	bl	db8d2 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d5936:	4628      	mov	r0, r5
   d5938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d593c:	4603      	mov	r3, r0
   d593e:	4906      	ldr	r1, [pc, #24]	; (d5958 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d5940:	4804      	ldr	r0, [pc, #16]	; (d5954 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d5942:	464a      	mov	r2, r9
   d5944:	f7ff ff91 	bl	d586a <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d5948:	2500      	movs	r5, #0
   d594a:	e7ee      	b.n	d592a <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d594c:	2501      	movs	r5, #1
   d594e:	e7ec      	b.n	d592a <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d5950:	000df534 	.word	0x000df534
   d5954:	2003e250 	.word	0x2003e250
   d5958:	000df559 	.word	0x000df559

000d595c <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d595c:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d595e:	9300      	str	r3, [sp, #0]
   d5960:	2301      	movs	r3, #1
   d5962:	f7ff ffad 	bl	d58c0 <_ZN6AB180513readRegistersEhPhjb>
}
   d5966:	b003      	add	sp, #12
   d5968:	f85d fb04 	ldr.w	pc, [sp], #4

000d596c <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d596c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d596e:	8943      	ldrh	r3, [r0, #10]
   d5970:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d5972:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d5974:	d010      	beq.n	d5998 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d5976:	4e19      	ldr	r6, [pc, #100]	; (d59dc <_ZN6AB180510detectChipEv+0x70>)
   d5978:	4d19      	ldr	r5, [pc, #100]	; (d59e0 <_ZN6AB180510detectChipEv+0x74>)
   d597a:	f004 fddb 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d597e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d5982:	d209      	bcs.n	d5998 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d5984:	8960      	ldrh	r0, [r4, #10]
   d5986:	f008 fa0f 	bl	ddda8 <digitalRead>
   d598a:	2801      	cmp	r0, #1
   d598c:	d004      	beq.n	d5998 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d598e:	4631      	mov	r1, r6
   d5990:	4628      	mov	r0, r5
   d5992:	f7fe fb99 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d5996:	e7f0      	b.n	d597a <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d5998:	2301      	movs	r3, #1
   d599a:	f10d 0207 	add.w	r2, sp, #7
   d599e:	2128      	movs	r1, #40	; 0x28
   d59a0:	4620      	mov	r0, r4
   d59a2:	f7ff ffdb 	bl	d595c <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d59a6:	b930      	cbnz	r0, d59b6 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d59a8:	480d      	ldr	r0, [pc, #52]	; (d59e0 <_ZN6AB180510detectChipEv+0x74>)
   d59aa:	490e      	ldr	r1, [pc, #56]	; (d59e4 <_ZN6AB180510detectChipEv+0x78>)
   d59ac:	f7fe fb8c 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d59b0:	2000      	movs	r0, #0
}
   d59b2:	b002      	add	sp, #8
   d59b4:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d59b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d59ba:	2b18      	cmp	r3, #24
   d59bc:	d1f4      	bne.n	d59a8 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d59be:	2301      	movs	r3, #1
   d59c0:	f10d 0207 	add.w	r2, sp, #7
   d59c4:	2129      	movs	r1, #41	; 0x29
   d59c6:	4620      	mov	r0, r4
   d59c8:	f7ff ffc8 	bl	d595c <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d59cc:	2800      	cmp	r0, #0
   d59ce:	d0eb      	beq.n	d59a8 <_ZN6AB180510detectChipEv+0x3c>
   d59d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d59d4:	2b05      	cmp	r3, #5
   d59d6:	d1e7      	bne.n	d59a8 <_ZN6AB180510detectChipEv+0x3c>
   d59d8:	e7eb      	b.n	d59b2 <_ZN6AB180510detectChipEv+0x46>
   d59da:	bf00      	nop
   d59dc:	000df57d 	.word	0x000df57d
   d59e0:	2003e250 	.word	0x2003e250
   d59e4:	000df592 	.word	0x000df592

000d59e8 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d59e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59ec:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d59f0:	4604      	mov	r4, r0
   d59f2:	460f      	mov	r7, r1
   d59f4:	4615      	mov	r5, r2
   d59f6:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d59f8:	f1b8 0f00 	cmp.w	r8, #0
   d59fc:	d002      	beq.n	d5a04 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d59fe:	6840      	ldr	r0, [r0, #4]
   d5a00:	f005 ff5e 	bl	db8c0 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d5a04:	7a21      	ldrb	r1, [r4, #8]
   d5a06:	6860      	ldr	r0, [r4, #4]
   d5a08:	f005 ff37 	bl	db87a <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d5a0c:	6860      	ldr	r0, [r4, #4]
   d5a0e:	6803      	ldr	r3, [r0, #0]
   d5a10:	4639      	mov	r1, r7
   d5a12:	689b      	ldr	r3, [r3, #8]
   d5a14:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d5a16:	442e      	add	r6, r5
   d5a18:	42b5      	cmp	r5, r6
   d5a1a:	6860      	ldr	r0, [r4, #4]
   d5a1c:	d005      	beq.n	d5a2a <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d5a1e:	6803      	ldr	r3, [r0, #0]
   d5a20:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5a24:	689b      	ldr	r3, [r3, #8]
   d5a26:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d5a28:	e7f6      	b.n	d5a18 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d5a2a:	2101      	movs	r1, #1
   d5a2c:	f005 ff44 	bl	db8b8 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d5a30:	4603      	mov	r3, r0
   d5a32:	b170      	cbz	r0, d5a52 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d5a34:	4908      	ldr	r1, [pc, #32]	; (d5a58 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d5a36:	4809      	ldr	r0, [pc, #36]	; (d5a5c <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d5a38:	463a      	mov	r2, r7
   d5a3a:	f7ff ff16 	bl	d586a <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d5a3e:	2500      	movs	r5, #0
    }

    if (lock) {
   d5a40:	f1b8 0f00 	cmp.w	r8, #0
   d5a44:	d002      	beq.n	d5a4c <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d5a46:	6860      	ldr	r0, [r4, #4]
   d5a48:	f005 ff43 	bl	db8d2 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d5a4c:	4628      	mov	r0, r5
   d5a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d5a52:	2501      	movs	r5, #1
   d5a54:	e7f4      	b.n	d5a40 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d5a56:	bf00      	nop
   d5a58:	000df59f 	.word	0x000df59f
   d5a5c:	2003e250 	.word	0x2003e250

000d5a60 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d5a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5a62:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d5a66:	9300      	str	r3, [sp, #0]
   d5a68:	f10d 020f 	add.w	r2, sp, #15
   d5a6c:	2301      	movs	r3, #1
   d5a6e:	f7ff ffbb 	bl	d59e8 <_ZN6AB180514writeRegistersEhPKhjb>
}
   d5a72:	b005      	add	sp, #20
   d5a74:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a78 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d5a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d5a7a:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d5a7c:	460c      	mov	r4, r1
   d5a7e:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d5a80:	491a      	ldr	r1, [pc, #104]	; (d5aec <_ZN6AB18056setWDTEi+0x74>)
   d5a82:	481b      	ldr	r0, [pc, #108]	; (d5af0 <_ZN6AB18056setWDTEi+0x78>)
   d5a84:	f7fe fb20 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d5a88:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d5a8a:	bfb8      	it	lt
   d5a8c:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d5a8e:	b97c      	cbnz	r4, d5ab0 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d5a90:	2301      	movs	r3, #1
   d5a92:	4622      	mov	r2, r4
   d5a94:	211b      	movs	r1, #27
   d5a96:	4628      	mov	r0, r5
   d5a98:	f7ff ffe2 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d5a9c:	4915      	ldr	r1, [pc, #84]	; (d5af4 <_ZN6AB18056setWDTEi+0x7c>)
   d5a9e:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d5aa0:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d5aa2:	4813      	ldr	r0, [pc, #76]	; (d5af0 <_ZN6AB18056setWDTEi+0x78>)
   d5aa4:	f7ff feca 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d5aa8:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d5aaa:	616c      	str	r4, [r5, #20]
}
   d5aac:	4630      	mov	r0, r6
   d5aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d5ab0:	2c03      	cmp	r4, #3
   d5ab2:	dd19      	ble.n	d5ae8 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d5ab4:	10a7      	asrs	r7, r4, #2
   d5ab6:	2f1f      	cmp	r7, #31
   d5ab8:	bfa8      	it	ge
   d5aba:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d5abc:	00ba      	lsls	r2, r7, #2
   d5abe:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d5ac2:	2301      	movs	r3, #1
   d5ac4:	b2d2      	uxtb	r2, r2
   d5ac6:	211b      	movs	r1, #27
   d5ac8:	4628      	mov	r0, r5
   d5aca:	f7ff ffc9 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d5ace:	463a      	mov	r2, r7
   d5ad0:	4603      	mov	r3, r0
   d5ad2:	4909      	ldr	r1, [pc, #36]	; (d5af8 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d5ad4:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d5ad6:	4806      	ldr	r0, [pc, #24]	; (d5af0 <_ZN6AB18056setWDTEi+0x78>)
   d5ad8:	f7ff feb0 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d5adc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d5ae0:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d5ae2:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d5ae4:	616f      	str	r7, [r5, #20]
   d5ae6:	e7e1      	b.n	d5aac <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d5ae8:	2701      	movs	r7, #1
   d5aea:	e7e7      	b.n	d5abc <_ZN6AB18056setWDTEi+0x44>
   d5aec:	000df5c4 	.word	0x000df5c4
   d5af0:	2003e250 	.word	0x2003e250
   d5af4:	000df5ce 	.word	0x000df5ce
   d5af8:	000df5ea 	.word	0x000df5ea

000d5afc <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d5afc:	460b      	mov	r3, r1
    if (instance) {
   d5afe:	4907      	ldr	r1, [pc, #28]	; (d5b1c <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d5b00:	4602      	mov	r2, r0
    if (instance) {
   d5b02:	6808      	ldr	r0, [r1, #0]
   d5b04:	b148      	cbz	r0, d5b1a <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d5b06:	2b00      	cmp	r3, #0
   d5b08:	bf08      	it	eq
   d5b0a:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d5b0e:	d104      	bne.n	d5b1a <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d5b10:	68c3      	ldr	r3, [r0, #12]
   d5b12:	b113      	cbz	r3, d5b1a <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d5b14:	2100      	movs	r1, #0
   d5b16:	f7ff bfaf 	b.w	d5a78 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d5b1a:	4770      	bx	lr
   d5b1c:	2003e254 	.word	0x2003e254

000d5b20 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d5b20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5b24:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5b28:	4605      	mov	r5, r0
   d5b2a:	4616      	mov	r6, r2
   d5b2c:	461f      	mov	r7, r3
    if (lock) {
   d5b2e:	f1b8 0f00 	cmp.w	r8, #0
   d5b32:	d004      	beq.n	d5b3e <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d5b34:	6840      	ldr	r0, [r0, #4]
   d5b36:	9101      	str	r1, [sp, #4]
   d5b38:	f005 fec2 	bl	db8c0 <_ZN7TwoWire4lockEv>
   d5b3c:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d5b3e:	9101      	str	r1, [sp, #4]
   d5b40:	2300      	movs	r3, #0
   d5b42:	f10d 020f 	add.w	r2, sp, #15
   d5b46:	4628      	mov	r0, r5
   d5b48:	f7ff ff08 	bl	d595c <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d5b4c:	4604      	mov	r4, r0
   d5b4e:	b160      	cbz	r0, d5b6a <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d5b50:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d5b54:	ea03 0206 	and.w	r2, r3, r6
   d5b58:	433a      	orrs	r2, r7
        if (newValue != value) {
   d5b5a:	4293      	cmp	r3, r2
   d5b5c:	d005      	beq.n	d5b6a <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d5b5e:	9901      	ldr	r1, [sp, #4]
   d5b60:	2300      	movs	r3, #0
   d5b62:	4628      	mov	r0, r5
   d5b64:	f7ff ff7c 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
   d5b68:	4604      	mov	r4, r0
    if (lock) {
   d5b6a:	f1b8 0f00 	cmp.w	r8, #0
   d5b6e:	d002      	beq.n	d5b76 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d5b70:	6868      	ldr	r0, [r5, #4]
   d5b72:	f005 feae 	bl	db8d2 <_ZN7TwoWire6unlockEv>
}
   d5b76:	4620      	mov	r0, r4
   d5b78:	b004      	add	sp, #16
   d5b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5b80 <_ZN6AB180511resetConfigEm>:
bool AB1805::resetConfig(uint32_t flags) {
   d5b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5b82:	4604      	mov	r4, r0
    _log.trace("resetConfig(0x%08lx)", flags);
   d5b84:	460a      	mov	r2, r1
   d5b86:	483f      	ldr	r0, [pc, #252]	; (d5c84 <_ZN6AB180511resetConfigEm+0x104>)
bool AB1805::resetConfig(uint32_t flags) {
   d5b88:	460d      	mov	r5, r1
    _log.trace("resetConfig(0x%08lx)", flags);
   d5b8a:	493f      	ldr	r1, [pc, #252]	; (d5c88 <_ZN6AB180511resetConfigEm+0x108>)
   d5b8c:	f7ff fe56 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
    wire.lock();
   d5b90:	6860      	ldr	r0, [r4, #4]
   d5b92:	f005 fe95 	bl	db8c0 <_ZN7TwoWire4lockEv>
    writeRegister(REG_STATUS, REG_STATUS_DEFAULT, false);
   d5b96:	2300      	movs	r3, #0
   d5b98:	461a      	mov	r2, r3
   d5b9a:	210f      	movs	r1, #15
   d5b9c:	4620      	mov	r0, r4
   d5b9e:	f7ff ff5f 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_1, REG_CTRL_1_DEFAULT, false);
   d5ba2:	2300      	movs	r3, #0
   d5ba4:	2213      	movs	r2, #19
   d5ba6:	2110      	movs	r1, #16
   d5ba8:	4620      	mov	r0, r4
   d5baa:	f7ff ff59 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_2, REG_CTRL_2_DEFAULT, false);
   d5bae:	2300      	movs	r3, #0
   d5bb0:	223c      	movs	r2, #60	; 0x3c
   d5bb2:	2111      	movs	r1, #17
   d5bb4:	4620      	mov	r0, r4
   d5bb6:	f7ff ff53 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_INT_MASK, REG_INT_MASK_DEFAULT, false);
   d5bba:	2300      	movs	r3, #0
   d5bbc:	22e0      	movs	r2, #224	; 0xe0
   d5bbe:	2112      	movs	r1, #18
   d5bc0:	4620      	mov	r0, r4
   d5bc2:	f7ff ff4d 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SQW, REG_SQW_DEFAULT, false);
   d5bc6:	2300      	movs	r3, #0
   d5bc8:	2226      	movs	r2, #38	; 0x26
   d5bca:	2113      	movs	r1, #19
   d5bcc:	4620      	mov	r0, r4
   d5bce:	f7ff ff47 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_DEFAULT, false);
   d5bd2:	2300      	movs	r3, #0
   d5bd4:	461a      	mov	r2, r3
   d5bd6:	2117      	movs	r1, #23
   d5bd8:	4620      	mov	r0, r4
   d5bda:	f7ff ff41 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
    if ((flags & RESET_PRESERVE_REPEATING_TIMER) != 0) {
   d5bde:	f015 0301 	ands.w	r3, r5, #1
   d5be2:	d048      	beq.n	d5c76 <_ZN6AB180511resetConfigEm+0xf6>
        maskRegister(REG_TIMER_CTRL, ~REG_TIMER_CTRL_RPT_MASK, REG_TIMER_CTRL_DEFAULT & ~REG_TIMER_CTRL_RPT_MASK, false);
   d5be4:	2300      	movs	r3, #0
   d5be6:	9300      	str	r3, [sp, #0]
   d5be8:	22e3      	movs	r2, #227	; 0xe3
   d5bea:	2323      	movs	r3, #35	; 0x23
   d5bec:	2118      	movs	r1, #24
   d5bee:	4620      	mov	r0, r4
   d5bf0:	f7ff ff96 	bl	d5b20 <_ZN6AB180512maskRegisterEhhhb>
    writeRegister(REG_TIMER, REG_TIMER_DEFAULT, false);
   d5bf4:	2300      	movs	r3, #0
   d5bf6:	461a      	mov	r2, r3
   d5bf8:	2119      	movs	r1, #25
   d5bfa:	4620      	mov	r0, r4
   d5bfc:	f7ff ff30 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TIMER_INITIAL, REG_TIMER_INITIAL_DEFAULT, false);
   d5c00:	2300      	movs	r3, #0
   d5c02:	461a      	mov	r2, r3
   d5c04:	211a      	movs	r1, #26
   d5c06:	4620      	mov	r0, r4
   d5c08:	f7ff ff2a 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_WDT, REG_WDT_DEFAULT, false);
   d5c0c:	2300      	movs	r3, #0
   d5c0e:	461a      	mov	r2, r3
   d5c10:	211b      	movs	r1, #27
   d5c12:	4620      	mov	r0, r4
   d5c14:	f7ff ff24 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
        oscCtrl |= REG_OSC_CTRL_OSEL | REG_OSC_CTRL_FOS;
   d5c18:	f015 0f02 	tst.w	r5, #2
    writeRegister(REG_OSC_CTRL, oscCtrl, false);
   d5c1c:	f04f 0300 	mov.w	r3, #0
   d5c20:	bf0c      	ite	eq
   d5c22:	461a      	moveq	r2, r3
   d5c24:	2288      	movne	r2, #136	; 0x88
   d5c26:	211c      	movs	r1, #28
   d5c28:	4620      	mov	r0, r4
   d5c2a:	f7ff ff19 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TRICKLE, REG_TRICKLE_DEFAULT, false);
   d5c2e:	2300      	movs	r3, #0
   d5c30:	461a      	mov	r2, r3
   d5c32:	2120      	movs	r1, #32
   d5c34:	4620      	mov	r0, r4
   d5c36:	f7ff ff13 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BREF_CTRL, REG_BREF_CTRL_DEFAULT, false);
   d5c3a:	2300      	movs	r3, #0
   d5c3c:	22f0      	movs	r2, #240	; 0xf0
   d5c3e:	2121      	movs	r1, #33	; 0x21
   d5c40:	4620      	mov	r0, r4
   d5c42:	f7ff ff0d 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_AFCTRL, REG_AFCTRL_DEFAULT, false);
   d5c46:	2300      	movs	r3, #0
   d5c48:	461a      	mov	r2, r3
   d5c4a:	2126      	movs	r1, #38	; 0x26
   d5c4c:	4620      	mov	r0, r4
   d5c4e:	f7ff ff07 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BATMODE_IO, REG_BATMODE_IO_DEFAULT, false);
   d5c52:	2300      	movs	r3, #0
   d5c54:	2280      	movs	r2, #128	; 0x80
   d5c56:	2127      	movs	r1, #39	; 0x27
   d5c58:	4620      	mov	r0, r4
   d5c5a:	f7ff ff01 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_OCTRL, REG_OCTRL_DEFAULT, false);
   d5c5e:	2300      	movs	r3, #0
   d5c60:	461a      	mov	r2, r3
   d5c62:	2130      	movs	r1, #48	; 0x30
   d5c64:	4620      	mov	r0, r4
   d5c66:	f7ff fefb 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
    wire.unlock();
   d5c6a:	6860      	ldr	r0, [r4, #4]
   d5c6c:	f005 fe31 	bl	db8d2 <_ZN7TwoWire6unlockEv>
}
   d5c70:	2001      	movs	r0, #1
   d5c72:	b003      	add	sp, #12
   d5c74:	bd30      	pop	{r4, r5, pc}
        writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT, false);
   d5c76:	2223      	movs	r2, #35	; 0x23
   d5c78:	2118      	movs	r1, #24
   d5c7a:	4620      	mov	r0, r4
   d5c7c:	f7ff fef0 	bl	d5a60 <_ZN6AB180513writeRegisterEhhb>
   d5c80:	e7b8      	b.n	d5bf4 <_ZN6AB180511resetConfigEm+0x74>
   d5c82:	bf00      	nop
   d5c84:	2003e250 	.word	0x2003e250
   d5c88:	000df60e 	.word	0x000df60e

000d5c8c <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5c8c:	b513      	push	{r0, r1, r4, lr}
   d5c8e:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d5c90:	f10d 0207 	add.w	r2, sp, #7
   d5c94:	f7ff fe62 	bl	d595c <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d5c98:	b128      	cbz	r0, d5ca6 <_ZN6AB180510isBitClearEhhb+0x1a>
   d5c9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5c9e:	421c      	tst	r4, r3
   d5ca0:	bf0c      	ite	eq
   d5ca2:	2001      	moveq	r0, #1
   d5ca4:	2000      	movne	r0, #0
}
   d5ca6:	b002      	add	sp, #8
   d5ca8:	bd10      	pop	{r4, pc}

000d5caa <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5caa:	b513      	push	{r0, r1, r4, lr}
   d5cac:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d5cae:	f10d 0207 	add.w	r2, sp, #7
   d5cb2:	f7ff fe53 	bl	d595c <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d5cb6:	b128      	cbz	r0, d5cc4 <_ZN6AB18058isBitSetEhhb+0x1a>
   d5cb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5cbc:	421c      	tst	r4, r3
   d5cbe:	bf14      	ite	ne
   d5cc0:	2001      	movne	r0, #1
   d5cc2:	2000      	moveq	r0, #0
}
   d5cc4:	b002      	add	sp, #8
   d5cc6:	bd10      	pop	{r4, pc}

000d5cc8 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5cc8:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d5cca:	43d2      	mvns	r2, r2
   d5ccc:	9300      	str	r3, [sp, #0]
   d5cce:	b2d2      	uxtb	r2, r2
   d5cd0:	2300      	movs	r3, #0
   d5cd2:	f7ff ff25 	bl	d5b20 <_ZN6AB180512maskRegisterEhhhb>
}
   d5cd6:	b003      	add	sp, #12
   d5cd8:	f85d fb04 	ldr.w	pc, [sp], #4

000d5cdc <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d5cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d5cde:	2301      	movs	r3, #1
   d5ce0:	f10d 0207 	add.w	r2, sp, #7
   d5ce4:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d5ce6:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d5ce8:	f7ff fe38 	bl	d595c <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d5cec:	4605      	mov	r5, r0
   d5cee:	b938      	cbnz	r0, d5d00 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d5cf0:	491e      	ldr	r1, [pc, #120]	; (d5d6c <_ZN6AB180516updateWakeReasonEv+0x90>)
   d5cf2:	481f      	ldr	r0, [pc, #124]	; (d5d70 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5cf4:	22ad      	movs	r2, #173	; 0xad
   d5cf6:	f7ff fdb8 	bl	d586a <_ZNK5spark6Logger5errorEPKcz>
}
   d5cfa:	4628      	mov	r0, r5
   d5cfc:	b003      	add	sp, #12
   d5cfe:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d5d00:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5d04:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d5d08:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d5d0c:	d00b      	beq.n	d5d26 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d5d0e:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d5d10:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d5d12:	210f      	movs	r1, #15
   d5d14:	4620      	mov	r0, r4
   d5d16:	f7ff ffd7 	bl	d5cc8 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d5d1a:	4a16      	ldr	r2, [pc, #88]	; (d5d74 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d5d1c:	4916      	ldr	r1, [pc, #88]	; (d5d78 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d5d1e:	4814      	ldr	r0, [pc, #80]	; (d5d70 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5d20:	f7fe f9d2 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d5d24:	e7e9      	b.n	d5cfa <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d5d26:	2208      	movs	r2, #8
   d5d28:	2117      	movs	r1, #23
   d5d2a:	4620      	mov	r0, r4
   d5d2c:	f7ff ffbd 	bl	d5caa <_ZN6AB18058isBitSetEhhb>
   d5d30:	b118      	cbz	r0, d5d3a <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d5d32:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d5d34:	4a11      	ldr	r2, [pc, #68]	; (d5d7c <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d5d36:	61e3      	str	r3, [r4, #28]
   d5d38:	e7f0      	b.n	d5d1c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d5d3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5d3e:	071a      	lsls	r2, r3, #28
   d5d40:	d509      	bpl.n	d5d56 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d5d42:	2303      	movs	r3, #3
   d5d44:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d5d46:	2208      	movs	r2, #8
   d5d48:	2301      	movs	r3, #1
   d5d4a:	210f      	movs	r1, #15
   d5d4c:	4620      	mov	r0, r4
   d5d4e:	f7ff ffbb 	bl	d5cc8 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d5d52:	4a0b      	ldr	r2, [pc, #44]	; (d5d80 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d5d54:	e7e2      	b.n	d5d1c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d5d56:	075b      	lsls	r3, r3, #29
   d5d58:	d5cf      	bpl.n	d5cfa <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d5d5a:	2204      	movs	r2, #4
   d5d5c:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d5d5e:	2301      	movs	r3, #1
   d5d60:	210f      	movs	r1, #15
   d5d62:	4620      	mov	r0, r4
   d5d64:	f7ff ffb0 	bl	d5cc8 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d5d68:	4a06      	ldr	r2, [pc, #24]	; (d5d84 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d5d6a:	e7d7      	b.n	d5d1c <_ZN6AB180516updateWakeReasonEv+0x40>
   d5d6c:	000df652 	.word	0x000df652
   d5d70:	2003e250 	.word	0x2003e250
   d5d74:	000df623 	.word	0x000df623
   d5d78:	000df671 	.word	0x000df671
   d5d7c:	000df62c 	.word	0x000df62c
   d5d80:	000df63c 	.word	0x000df63c
   d5d84:	000df64c 	.word	0x000df64c

000d5d88 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5d88:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d5d8a:	9300      	str	r3, [sp, #0]
   d5d8c:	4613      	mov	r3, r2
   d5d8e:	22ff      	movs	r2, #255	; 0xff
   d5d90:	f7ff fec6 	bl	d5b20 <_ZN6AB180512maskRegisterEhhhb>
}
   d5d94:	b003      	add	sp, #12
   d5d96:	f85d fb04 	ldr.w	pc, [sp], #4

000d5d9a <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d5d9a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5d9e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d5da2:	4605      	mov	r5, r0
   d5da4:	460c      	mov	r4, r1
   d5da6:	4691      	mov	r9, r2
   d5da8:	461f      	mov	r7, r3
    if (lock) {
   d5daa:	f1ba 0f00 	cmp.w	sl, #0
   d5dae:	d002      	beq.n	d5db6 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d5db0:	6840      	ldr	r0, [r0, #4]
   d5db2:	f005 fd85 	bl	db8c0 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d5db6:	b307      	cbz	r7, d5dfa <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d5db8:	2f20      	cmp	r7, #32
   d5dba:	463e      	mov	r6, r7
   d5dbc:	bf28      	it	cs
   d5dbe:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d5dc0:	2c7f      	cmp	r4, #127	; 0x7f
   d5dc2:	d826      	bhi.n	d5e12 <_ZN6AB18057readRamEjPhjb+0x78>
   d5dc4:	1933      	adds	r3, r6, r4
   d5dc6:	2b80      	cmp	r3, #128	; 0x80
   d5dc8:	d901      	bls.n	d5dce <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d5dca:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5dce:	2301      	movs	r3, #1
   d5dd0:	2204      	movs	r2, #4
   d5dd2:	213f      	movs	r1, #63	; 0x3f
   d5dd4:	4628      	mov	r0, r5
   d5dd6:	f7ff ff77 	bl	d5cc8 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d5dda:	2300      	movs	r3, #0
   d5ddc:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d5de0:	9300      	str	r3, [sp, #0]
   d5de2:	464a      	mov	r2, r9
   d5de4:	4633      	mov	r3, r6
   d5de6:	b2c9      	uxtb	r1, r1
   d5de8:	4628      	mov	r0, r5
   d5dea:	f7ff fd69 	bl	d58c0 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d5dee:	4680      	mov	r8, r0
   d5df0:	b128      	cbz	r0, d5dfe <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d5df2:	4434      	add	r4, r6
        dataLen -= count;
   d5df4:	1bbf      	subs	r7, r7, r6
        data += count;
   d5df6:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d5df8:	e7dd      	b.n	d5db6 <_ZN6AB18057readRamEjPhjb+0x1c>
   d5dfa:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d5dfe:	f1ba 0f00 	cmp.w	sl, #0
   d5e02:	d002      	beq.n	d5e0a <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d5e04:	6868      	ldr	r0, [r5, #4]
   d5e06:	f005 fd64 	bl	db8d2 <_ZN7TwoWire6unlockEv>
}
   d5e0a:	4640      	mov	r0, r8
   d5e0c:	b002      	add	sp, #8
   d5e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5e12:	2301      	movs	r3, #1
   d5e14:	2204      	movs	r2, #4
   d5e16:	213f      	movs	r1, #63	; 0x3f
   d5e18:	4628      	mov	r0, r5
   d5e1a:	f7ff ffb5 	bl	d5d88 <_ZN6AB180514setRegisterBitEhhb>
   d5e1e:	e7dc      	b.n	d5dda <_ZN6AB18057readRamEjPhjb+0x40>

000d5e20 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d5e20:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5e24:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d5e28:	4605      	mov	r5, r0
   d5e2a:	460c      	mov	r4, r1
   d5e2c:	4691      	mov	r9, r2
   d5e2e:	461f      	mov	r7, r3
    if (lock) {
   d5e30:	f1ba 0f00 	cmp.w	sl, #0
   d5e34:	d002      	beq.n	d5e3c <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d5e36:	6840      	ldr	r0, [r0, #4]
   d5e38:	f005 fd42 	bl	db8c0 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d5e3c:	b307      	cbz	r7, d5e80 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d5e3e:	2f1f      	cmp	r7, #31
   d5e40:	463e      	mov	r6, r7
   d5e42:	bf28      	it	cs
   d5e44:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d5e46:	2c7f      	cmp	r4, #127	; 0x7f
   d5e48:	d826      	bhi.n	d5e98 <_ZN6AB18058writeRamEjPKhjb+0x78>
   d5e4a:	1933      	adds	r3, r6, r4
   d5e4c:	2b80      	cmp	r3, #128	; 0x80
   d5e4e:	d901      	bls.n	d5e54 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d5e50:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5e54:	2301      	movs	r3, #1
   d5e56:	2204      	movs	r2, #4
   d5e58:	213f      	movs	r1, #63	; 0x3f
   d5e5a:	4628      	mov	r0, r5
   d5e5c:	f7ff ff34 	bl	d5cc8 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d5e60:	2300      	movs	r3, #0
   d5e62:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d5e66:	9300      	str	r3, [sp, #0]
   d5e68:	464a      	mov	r2, r9
   d5e6a:	4633      	mov	r3, r6
   d5e6c:	b2c9      	uxtb	r1, r1
   d5e6e:	4628      	mov	r0, r5
   d5e70:	f7ff fdba 	bl	d59e8 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d5e74:	4680      	mov	r8, r0
   d5e76:	b128      	cbz	r0, d5e84 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d5e78:	4434      	add	r4, r6
        dataLen -= count;
   d5e7a:	1bbf      	subs	r7, r7, r6
        data += count;
   d5e7c:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d5e7e:	e7dd      	b.n	d5e3c <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d5e80:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d5e84:	f1ba 0f00 	cmp.w	sl, #0
   d5e88:	d002      	beq.n	d5e90 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d5e8a:	6868      	ldr	r0, [r5, #4]
   d5e8c:	f005 fd21 	bl	db8d2 <_ZN7TwoWire6unlockEv>
}
   d5e90:	4640      	mov	r0, r8
   d5e92:	b002      	add	sp, #8
   d5e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5e98:	2301      	movs	r3, #1
   d5e9a:	2204      	movs	r2, #4
   d5e9c:	213f      	movs	r1, #63	; 0x3f
   d5e9e:	4628      	mov	r0, r5
   d5ea0:	f7ff ff72 	bl	d5d88 <_ZN6AB180514setRegisterBitEhhb>
   d5ea4:	e7dc      	b.n	d5e60 <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

000d5ea8 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d5ea8:	b530      	push	{r4, r5, lr}
   d5eaa:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d5eac:	680d      	ldr	r5, [r1, #0]
   d5eae:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d5eb2:	9503      	str	r5, [sp, #12]
   d5eb4:	684d      	ldr	r5, [r1, #4]
   d5eb6:	9502      	str	r5, [sp, #8]
   d5eb8:	688d      	ldr	r5, [r1, #8]
   d5eba:	9501      	str	r5, [sp, #4]
   d5ebc:	68c9      	ldr	r1, [r1, #12]
   d5ebe:	9100      	str	r1, [sp, #0]
   d5ec0:	3301      	adds	r3, #1
   d5ec2:	4904      	ldr	r1, [pc, #16]	; (d5ed4 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d5ec4:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d5ec8:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d5eca:	f007 fb33 	bl	dd534 <_ZN6String6formatEPKcz>
}
   d5ece:	4620      	mov	r0, r4
   d5ed0:	b005      	add	sp, #20
   d5ed2:	bd30      	pop	{r4, r5, pc}
   d5ed4:	000df682 	.word	0x000df682

000d5ed8 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d5ed8:	1103      	asrs	r3, r0, #4
}
   d5eda:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d5edc:	f000 000f 	and.w	r0, r0, #15
}
   d5ee0:	fb02 0003 	mla	r0, r2, r3, r0
   d5ee4:	4770      	bx	lr

000d5ee6 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d5ee6:	b538      	push	{r3, r4, r5, lr}
   d5ee8:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d5eea:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d5eec:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d5eee:	f7ff fff3 	bl	d5ed8 <_ZN6AB180510bcdToValueEh>
   d5ef2:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d5ef4:	7860      	ldrb	r0, [r4, #1]
   d5ef6:	f7ff ffef 	bl	d5ed8 <_ZN6AB180510bcdToValueEh>
   d5efa:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d5efc:	78a0      	ldrb	r0, [r4, #2]
   d5efe:	f7ff ffeb 	bl	d5ed8 <_ZN6AB180510bcdToValueEh>
   d5f02:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d5f04:	78e0      	ldrb	r0, [r4, #3]
   d5f06:	f7ff ffe7 	bl	d5ed8 <_ZN6AB180510bcdToValueEh>
   d5f0a:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d5f0c:	7920      	ldrb	r0, [r4, #4]
   d5f0e:	f7ff ffe3 	bl	d5ed8 <_ZN6AB180510bcdToValueEh>
   d5f12:	3801      	subs	r0, #1
   d5f14:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d5f16:	b92d      	cbnz	r5, d5f24 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d5f18:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d5f1a:	7828      	ldrb	r0, [r5, #0]
   d5f1c:	f7ff ffdc 	bl	d5ed8 <_ZN6AB180510bcdToValueEh>
   d5f20:	6188      	str	r0, [r1, #24]
}
   d5f22:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d5f24:	7960      	ldrb	r0, [r4, #5]
   d5f26:	f7ff ffd7 	bl	d5ed8 <_ZN6AB180510bcdToValueEh>
   d5f2a:	3064      	adds	r0, #100	; 0x64
   d5f2c:	1da5      	adds	r5, r4, #6
   d5f2e:	6148      	str	r0, [r1, #20]
   d5f30:	e7f3      	b.n	d5f1a <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d5f34 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d5f34:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d5f36:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d5f38:	b088      	sub	sp, #32
   d5f3a:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d5f3c:	461a      	mov	r2, r3
   d5f3e:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d5f40:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d5f42:	f7ff fea3 	bl	d5c8c <_ZN6AB180510isBitClearEhhb>
   d5f46:	b1f0      	cbz	r0, d5f86 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d5f48:	2308      	movs	r3, #8
   d5f4a:	2601      	movs	r6, #1
   d5f4c:	4620      	mov	r0, r4
   d5f4e:	9600      	str	r6, [sp, #0]
   d5f50:	eb0d 0203 	add.w	r2, sp, r3
   d5f54:	2100      	movs	r1, #0
   d5f56:	f7ff fcb3 	bl	d58c0 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d5f5a:	4604      	mov	r4, r0
   d5f5c:	b198      	cbz	r0, d5f86 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d5f5e:	4632      	mov	r2, r6
   d5f60:	4629      	mov	r1, r5
   d5f62:	f10d 0009 	add.w	r0, sp, #9
   d5f66:	f7ff ffbe 	bl	d5ee6 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d5f6a:	a804      	add	r0, sp, #16
   d5f6c:	f7ff ff9c 	bl	d5ea8 <_ZN6AB180510tmToStringEPK2tm>
   d5f70:	4808      	ldr	r0, [pc, #32]	; (d5f94 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d5f72:	9a04      	ldr	r2, [sp, #16]
   d5f74:	4908      	ldr	r1, [pc, #32]	; (d5f98 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d5f76:	f7fe f8a7 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d5f7a:	a804      	add	r0, sp, #16
   d5f7c:	f007 f98e 	bl	dd29c <_ZN6StringD1Ev>
}
   d5f80:	4620      	mov	r0, r4
   d5f82:	b008      	add	sp, #32
   d5f84:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d5f86:	2224      	movs	r2, #36	; 0x24
   d5f88:	2100      	movs	r1, #0
   d5f8a:	4628      	mov	r0, r5
   d5f8c:	f008 fc64 	bl	de858 <memset>
   d5f90:	2400      	movs	r4, #0
   d5f92:	e7f5      	b.n	d5f80 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d5f94:	2003e250 	.word	0x2003e250
   d5f98:	000df6a0 	.word	0x000df6a0

000d5f9c <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d5f9c:	b530      	push	{r4, r5, lr}
   d5f9e:	b08b      	sub	sp, #44	; 0x2c
   d5fa0:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d5fa2:	a901      	add	r1, sp, #4
   d5fa4:	f7ff ffc6 	bl	d5f34 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d5fa8:	4604      	mov	r4, r0
   d5faa:	b120      	cbz	r0, d5fb6 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d5fac:	a801      	add	r0, sp, #4
   d5fae:	f004 feb3 	bl	dad18 <mktime>
   d5fb2:	e9c5 0100 	strd	r0, r1, [r5]
}
   d5fb6:	4620      	mov	r0, r4
   d5fb8:	b00b      	add	sp, #44	; 0x2c
   d5fba:	bd30      	pop	{r4, r5, pc}

000d5fbc <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d5fbc:	b510      	push	{r4, lr}
   d5fbe:	4604      	mov	r4, r0
   d5fc0:	b088      	sub	sp, #32
    if (callBegin) {
   d5fc2:	b111      	cbz	r1, d5fca <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d5fc4:	6840      	ldr	r0, [r0, #4]
   d5fc6:	f005 fc29 	bl	db81c <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d5fca:	4620      	mov	r0, r4
   d5fcc:	f7ff fcce 	bl	d596c <_ZN6AB180510detectChipEv>
   d5fd0:	b370      	cbz	r0, d6030 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d5fd2:	4620      	mov	r0, r4
   d5fd4:	f7ff fe82 	bl	d5cdc <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d5fd8:	2301      	movs	r3, #1
   d5fda:	461a      	mov	r2, r3
   d5fdc:	2110      	movs	r1, #16
   d5fde:	4620      	mov	r0, r4
   d5fe0:	f7ff fe54 	bl	d5c8c <_ZN6AB180510isBitClearEhhb>
   d5fe4:	b1d8      	cbz	r0, d601e <_ZN6AB18055setupEb+0x62>
   d5fe6:	f007 fc7f 	bl	dd8e8 <_ZN9TimeClass7isValidEv>
   d5fea:	b9c0      	cbnz	r0, d601e <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d5fec:	a902      	add	r1, sp, #8
   d5fee:	4620      	mov	r0, r4
   d5ff0:	f7ff ffd4 	bl	d5f9c <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d5ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d5ff8:	f007 fb7d 	bl	dd6f6 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d5ffc:	4b0f      	ldr	r3, [pc, #60]	; (d603c <_ZN6AB18055setupEb+0x80>)
   d5ffe:	4910      	ldr	r1, [pc, #64]	; (d6040 <_ZN6AB18055setupEb+0x84>)
   d6000:	681b      	ldr	r3, [r3, #0]
   d6002:	9300      	str	r3, [sp, #0]
   d6004:	a804      	add	r0, sp, #16
   d6006:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d600a:	f007 fc2b 	bl	dd864 <_ZN9TimeClass6formatExPKc>
   d600e:	480d      	ldr	r0, [pc, #52]	; (d6044 <_ZN6AB18055setupEb+0x88>)
   d6010:	9a04      	ldr	r2, [sp, #16]
   d6012:	490d      	ldr	r1, [pc, #52]	; (d6048 <_ZN6AB18055setupEb+0x8c>)
   d6014:	f7fe f858 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d6018:	a804      	add	r0, sp, #16
   d601a:	f007 f93f 	bl	dd29c <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d601e:	4a0b      	ldr	r2, [pc, #44]	; (d604c <_ZN6AB18055setupEb+0x90>)
   d6020:	2300      	movs	r3, #0
   d6022:	2100      	movs	r1, #0
   d6024:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d6028:	f004 fcee 	bl	daa08 <system_subscribe_event>
}
   d602c:	b008      	add	sp, #32
   d602e:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d6030:	4907      	ldr	r1, [pc, #28]	; (d6050 <_ZN6AB18055setupEb+0x94>)
   d6032:	4804      	ldr	r0, [pc, #16]	; (d6044 <_ZN6AB18055setupEb+0x88>)
   d6034:	f7ff fc19 	bl	d586a <_ZNK5spark6Logger5errorEPKcz>
   d6038:	e7f1      	b.n	d601e <_ZN6AB18055setupEb+0x62>
   d603a:	bf00      	nop
   d603c:	2003dc4c 	.word	0x2003dc4c
   d6040:	2003e5c4 	.word	0x2003e5c4
   d6044:	2003e250 	.word	0x2003e250
   d6048:	000df6ae 	.word	0x000df6ae
   d604c:	000d5afd 	.word	0x000d5afd
   d6050:	000df6cb 	.word	0x000df6cb

000d6054 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d6054:	220a      	movs	r2, #10
   d6056:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d605a:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d605e:	fb93 f1f2 	sdiv	r1, r3, r2
   d6062:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d6066:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d606a:	b2c0      	uxtb	r0, r0
   d606c:	4770      	bx	lr

000d606e <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d606e:	b570      	push	{r4, r5, r6, lr}
   d6070:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d6072:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6074:	460c      	mov	r4, r1
   d6076:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d6078:	f7ff ffec 	bl	d6054 <_ZN6AB180510valueToBcdEi>
   d607c:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d607e:	6868      	ldr	r0, [r5, #4]
   d6080:	f7ff ffe8 	bl	d6054 <_ZN6AB180510valueToBcdEi>
   d6084:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d6086:	68a8      	ldr	r0, [r5, #8]
   d6088:	f7ff ffe4 	bl	d6054 <_ZN6AB180510valueToBcdEi>
   d608c:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d608e:	68e8      	ldr	r0, [r5, #12]
   d6090:	f7ff ffe0 	bl	d6054 <_ZN6AB180510valueToBcdEi>
   d6094:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6096:	6928      	ldr	r0, [r5, #16]
   d6098:	3001      	adds	r0, #1
   d609a:	f7ff ffdb 	bl	d6054 <_ZN6AB180510valueToBcdEi>
   d609e:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d60a0:	b92e      	cbnz	r6, d60ae <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d60a2:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d60a4:	69a8      	ldr	r0, [r5, #24]
   d60a6:	f7ff ffd5 	bl	d6054 <_ZN6AB180510valueToBcdEi>
   d60aa:	7030      	strb	r0, [r6, #0]
}
   d60ac:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d60ae:	696a      	ldr	r2, [r5, #20]
   d60b0:	2364      	movs	r3, #100	; 0x64
   d60b2:	fb92 f0f3 	sdiv	r0, r2, r3
   d60b6:	fb03 2010 	mls	r0, r3, r0, r2
   d60ba:	f7ff ffcb 	bl	d6054 <_ZN6AB180510valueToBcdEi>
   d60be:	1da6      	adds	r6, r4, #6
   d60c0:	7160      	strb	r0, [r4, #5]
   d60c2:	e7ef      	b.n	d60a4 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d60c4 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d60c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d60c6:	b087      	sub	sp, #28
   d60c8:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d60ca:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d60cc:	4616      	mov	r6, r2
   d60ce:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d60d0:	f7ff feea 	bl	d5ea8 <_ZN6AB180510tmToStringEPK2tm>
   d60d4:	481e      	ldr	r0, [pc, #120]	; (d6150 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d60d6:	9a02      	ldr	r2, [sp, #8]
   d60d8:	491e      	ldr	r1, [pc, #120]	; (d6154 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d60da:	f7fd fff5 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d60de:	a802      	add	r0, sp, #8
   d60e0:	f007 f8dc 	bl	dd29c <_ZN6StringD1Ev>
    if (lock) {
   d60e4:	b116      	cbz	r6, d60ec <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d60e6:	6868      	ldr	r0, [r5, #4]
   d60e8:	f005 fbea 	bl	db8c0 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d60ec:	4620      	mov	r0, r4
   d60ee:	2201      	movs	r2, #1
   d60f0:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d60f4:	2700      	movs	r7, #0
   d60f6:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d60fa:	f7ff ffb8 	bl	d606e <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d60fe:	2301      	movs	r3, #1
   d6100:	461a      	mov	r2, r3
   d6102:	2110      	movs	r1, #16
   d6104:	4628      	mov	r0, r5
   d6106:	f7ff fe3f 	bl	d5d88 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d610a:	4604      	mov	r4, r0
   d610c:	b1e8      	cbz	r0, d614a <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d610e:	2308      	movs	r3, #8
   d6110:	9700      	str	r7, [sp, #0]
   d6112:	eb0d 0203 	add.w	r2, sp, r3
   d6116:	4639      	mov	r1, r7
   d6118:	4628      	mov	r0, r5
   d611a:	f7ff fc65 	bl	d59e8 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d611e:	4604      	mov	r4, r0
   d6120:	b160      	cbz	r0, d613c <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d6122:	2301      	movs	r3, #1
   d6124:	461a      	mov	r2, r3
   d6126:	2110      	movs	r1, #16
   d6128:	4628      	mov	r0, r5
   d612a:	f7ff fdcd 	bl	d5cc8 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d612e:	b116      	cbz	r6, d6136 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d6130:	6868      	ldr	r0, [r5, #4]
   d6132:	f005 fbce 	bl	db8d2 <_ZN7TwoWire6unlockEv>
}
   d6136:	4620      	mov	r0, r4
   d6138:	b007      	add	sp, #28
   d613a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d613c:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d6140:	4905      	ldr	r1, [pc, #20]	; (d6158 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d6142:	4803      	ldr	r0, [pc, #12]	; (d6150 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6144:	f7ff fb91 	bl	d586a <_ZNK5spark6Logger5errorEPKcz>
   d6148:	e7f1      	b.n	d612e <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d614a:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d614e:	e7f7      	b.n	d6140 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d6150:	2003e250 	.word	0x2003e250
   d6154:	000df6e3 	.word	0x000df6e3
   d6158:	000df6f1 	.word	0x000df6f1

000d615c <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d615c:	b513      	push	{r0, r1, r4, lr}
   d615e:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d6160:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d6162:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d6166:	f008 fb3d 	bl	de7e4 <gmtime>
    return setRtcFromTm(tm, lock);
   d616a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d616e:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d6170:	4620      	mov	r0, r4
   d6172:	f7ff ffa7 	bl	d60c4 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d6176:	b002      	add	sp, #8
   d6178:	bd10      	pop	{r4, pc}
	...

000d617c <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d617c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d617e:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d6180:	b089      	sub	sp, #36	; 0x24
   d6182:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d6184:	bb75      	cbnz	r5, d61e4 <_ZN6AB18054loopEv+0x68>
   d6186:	f007 fbaf 	bl	dd8e8 <_ZN9TimeClass7isValidEv>
   d618a:	b358      	cbz	r0, d61e4 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d618c:	2600      	movs	r6, #0
   d618e:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d6190:	a904      	add	r1, sp, #16
   d6192:	4628      	mov	r0, r5
        tm = 0;
   d6194:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d6198:	f004 fcce 	bl	dab38 <spark_sync_time_last>
   d619c:	b310      	cbz	r0, d61e4 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d619e:	2501      	movs	r5, #1
   d61a0:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d61a2:	f007 fbbe 	bl	dd922 <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d61a6:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d61a8:	4602      	mov	r2, r0
   d61aa:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d61ac:	4620      	mov	r0, r4
        time_t time = Time.now();
   d61ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d61b2:	f7ff ffd3 	bl	d615c <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d61b6:	a902      	add	r1, sp, #8
   d61b8:	4620      	mov	r0, r4
        time = 0;
   d61ba:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d61be:	f7ff feed 	bl	d5f9c <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d61c2:	4b12      	ldr	r3, [pc, #72]	; (d620c <_ZN6AB18054loopEv+0x90>)
   d61c4:	4912      	ldr	r1, [pc, #72]	; (d6210 <_ZN6AB18054loopEv+0x94>)
   d61c6:	681b      	ldr	r3, [r3, #0]
   d61c8:	9300      	str	r3, [sp, #0]
   d61ca:	a804      	add	r0, sp, #16
   d61cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d61d0:	f007 fb48 	bl	dd864 <_ZN9TimeClass6formatExPKc>
   d61d4:	480f      	ldr	r0, [pc, #60]	; (d6214 <_ZN6AB18054loopEv+0x98>)
   d61d6:	9a04      	ldr	r2, [sp, #16]
   d61d8:	490f      	ldr	r1, [pc, #60]	; (d6218 <_ZN6AB18054loopEv+0x9c>)
   d61da:	f7fd ff75 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d61de:	a804      	add	r0, sp, #16
   d61e0:	f007 f85c 	bl	dd29c <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d61e4:	6963      	ldr	r3, [r4, #20]
   d61e6:	b173      	cbz	r3, d6206 <_ZN6AB18054loopEv+0x8a>
   d61e8:	f004 f9a4 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d61ec:	6923      	ldr	r3, [r4, #16]
   d61ee:	1ac0      	subs	r0, r0, r3
   d61f0:	6963      	ldr	r3, [r4, #20]
   d61f2:	4298      	cmp	r0, r3
   d61f4:	d307      	bcc.n	d6206 <_ZN6AB18054loopEv+0x8a>
   d61f6:	f004 f99d 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d61fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d61fe:	6120      	str	r0, [r4, #16]
            setWDT();
   d6200:	4620      	mov	r0, r4
   d6202:	f7ff fc39 	bl	d5a78 <_ZN6AB18056setWDTEi>
}
   d6206:	b009      	add	sp, #36	; 0x24
   d6208:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d620a:	bf00      	nop
   d620c:	2003dc4c 	.word	0x2003dc4c
   d6210:	2003e5c4 	.word	0x2003e5c4
   d6214:	2003e250 	.word	0x2003e250
   d6218:	000df70c 	.word	0x000df70c

000d621c <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d621c:	4b01      	ldr	r3, [pc, #4]	; (d6224 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d621e:	4a02      	ldr	r2, [pc, #8]	; (d6228 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d6220:	601a      	str	r2, [r3, #0]
}
   d6222:	4770      	bx	lr
   d6224:	2003e250 	.word	0x2003e250
   d6228:	000df722 	.word	0x000df722

000d622c <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d622c:	2a02      	cmp	r2, #2
   d622e:	d006      	beq.n	d623e <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x12>
   d6230:	2a03      	cmp	r2, #3
   d6232:	d002      	beq.n	d623a <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d6234:	2a01      	cmp	r2, #1
   d6236:	d100      	bne.n	d623a <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6238:	6001      	str	r1, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d623a:	2000      	movs	r0, #0
   d623c:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d623e:	680b      	ldr	r3, [r1, #0]
   d6240:	6003      	str	r3, [r0, #0]
	}
   d6242:	e7fa      	b.n	d623a <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>

000d6244 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6244:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d6246:	2301      	movs	r3, #1
   d6248:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d624a:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d624c:	4604      	mov	r4, r0
        if (th->func) {
   d624e:	b143      	cbz	r3, d6262 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d6250:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6252:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d6254:	2301      	movs	r3, #1
   d6256:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d6258:	2000      	movs	r0, #0
    }
   d625a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d625e:	f004 b941 	b.w	da4e4 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6262:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d6264:	2800      	cmp	r0, #0
   d6266:	d0f5      	beq.n	d6254 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d6268:	6883      	ldr	r3, [r0, #8]
   d626a:	b90b      	cbnz	r3, d6270 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d626c:	f007 fe4c 	bl	ddf08 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6270:	68c3      	ldr	r3, [r0, #12]
   d6272:	e7ee      	b.n	d6252 <_ZN6Thread3runEPv+0xe>

000d6274 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d6274:	b510      	push	{r4, lr}
      if (_M_manager)
   d6276:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6278:	4604      	mov	r4, r0
      if (_M_manager)
   d627a:	b113      	cbz	r3, d6282 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d627c:	2203      	movs	r2, #3
   d627e:	4601      	mov	r1, r0
   d6280:	4798      	blx	r3
    }
   d6282:	4620      	mov	r0, r4
   d6284:	bd10      	pop	{r4, pc}

000d6286 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d6286:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d6288:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   d628a:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   d628c:	b135      	cbz	r5, d629c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   d628e:	4628      	mov	r0, r5
   d6290:	f7ff fff0 	bl	d6274 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d6294:	2110      	movs	r1, #16
   d6296:	4628      	mov	r0, r5
   d6298:	f007 fe2a 	bl	ddef0 <_ZdlPvj>
   d629c:	4620      	mov	r0, r4
   d629e:	2114      	movs	r1, #20
      }
   d62a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d62a4:	f007 be24 	b.w	ddef0 <_ZdlPvj>

000d62a8 <_ZN6Thread7disposeEv>:
    void dispose()
   d62a8:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d62aa:	6803      	ldr	r3, [r0, #0]
   d62ac:	4604      	mov	r4, r0
        if (!isValid())
   d62ae:	b1ab      	cbz	r3, d62dc <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   d62b0:	6858      	ldr	r0, [r3, #4]
   d62b2:	f004 f8c7 	bl	da444 <os_thread_is_current>
   d62b6:	b988      	cbnz	r0, d62dc <_ZN6Thread7disposeEv+0x34>
   d62b8:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d62ba:	7c5a      	ldrb	r2, [r3, #17]
   d62bc:	b912      	cbnz	r2, d62c4 <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d62be:	6858      	ldr	r0, [r3, #4]
   d62c0:	f004 f8c8 	bl	da454 <os_thread_join>
        os_thread_cleanup(d_->handle);
   d62c4:	6823      	ldr	r3, [r4, #0]
   d62c6:	6858      	ldr	r0, [r3, #4]
   d62c8:	f004 f8cc 	bl	da464 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62cc:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d62ce:	2300      	movs	r3, #0
   d62d0:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d62d2:	b118      	cbz	r0, d62dc <_ZN6Thread7disposeEv+0x34>
    }
   d62d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d62d8:	f7ff bfd5 	b.w	d6286 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d62dc:	bd10      	pop	{r4, pc}
	...

000d62e0 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   d62e0:	4a05      	ldr	r2, [pc, #20]	; (d62f8 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   d62e2:	6002      	str	r2, [r0, #0]
   d62e4:	2200      	movs	r2, #0
   d62e6:	6042      	str	r2, [r0, #4]
   d62e8:	7302      	strb	r2, [r0, #12]
        val_(0) {
   d62ea:	f880 22bd 	strb.w	r2, [r0, #701]	; 0x2bd
    _Function_base() : _M_manager(nullptr) { }
   d62ee:	f8c0 22c8 	str.w	r2, [r0, #712]	; 0x2c8
   d62f2:	f8c0 22d0 	str.w	r2, [r0, #720]	; 0x2d0
}
   d62f6:	4770      	bx	lr
   d62f8:	000df764 	.word	0x000df764

000d62fc <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   d62fc:	b510      	push	{r4, lr}
    if (!_instance) {
   d62fe:	4c07      	ldr	r4, [pc, #28]	; (d631c <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   d6300:	6823      	ldr	r3, [r4, #0]
   d6302:	b943      	cbnz	r3, d6316 <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   d6304:	f44f 7035 	mov.w	r0, #724	; 0x2d4
   d6308:	f7fd fec5 	bl	d4096 <_Znwj>
   d630c:	4603      	mov	r3, r0
   d630e:	b108      	cbz	r0, d6314 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   d6310:	f7ff ffe6 	bl	d62e0 <_ZN19BackgroundPublishRKC1Ev>
   d6314:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   d6316:	6820      	ldr	r0, [r4, #0]
   d6318:	bd10      	pop	{r4, pc}
   d631a:	bf00      	nop
   d631c:	2003e258 	.word	0x2003e258

000d6320 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   d6320:	b538      	push	{r3, r4, r5, lr}
   d6322:	4604      	mov	r4, r0
    if(thread)
   d6324:	6840      	ldr	r0, [r0, #4]
   d6326:	b190      	cbz	r0, d634e <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   d6328:	2302      	movs	r3, #2
   d632a:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   d632c:	f7ff ffbc 	bl	d62a8 <_ZN6Thread7disposeEv>
        delete thread;
   d6330:	6865      	ldr	r5, [r4, #4]
   d6332:	b155      	cbz	r5, d634a <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   d6334:	4628      	mov	r0, r5
   d6336:	f7ff ffb7 	bl	d62a8 <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   d633a:	6828      	ldr	r0, [r5, #0]
   d633c:	b108      	cbz	r0, d6342 <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   d633e:	f7ff ffa2 	bl	d6286 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d6342:	2104      	movs	r1, #4
   d6344:	4628      	mov	r0, r5
   d6346:	f007 fdd3 	bl	ddef0 <_ZdlPvj>
        thread = NULL;
   d634a:	2300      	movs	r3, #0
   d634c:	6063      	str	r3, [r4, #4]
    }
}
   d634e:	bd38      	pop	{r3, r4, r5, pc}

000d6350 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d6350:	b510      	push	{r4, lr}
   d6352:	4b05      	ldr	r3, [pc, #20]	; (d6368 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   d6354:	6003      	str	r3, [r0, #0]
   d6356:	4604      	mov	r4, r0
    stop();
   d6358:	f7ff ffe2 	bl	d6320 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   d635c:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d6360:	f7ff ff88 	bl	d6274 <_ZNSt14_Function_baseD1Ev>
}
   d6364:	4620      	mov	r0, r4
   d6366:	bd10      	pop	{r4, pc}
   d6368:	000df764 	.word	0x000df764

000d636c <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d636c:	b510      	push	{r4, lr}
   d636e:	4604      	mov	r4, r0
}
   d6370:	f7ff ffee 	bl	d6350 <_ZN19BackgroundPublishRKD1Ev>
   d6374:	4620      	mov	r0, r4
   d6376:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   d637a:	f007 fdb9 	bl	ddef0 <_ZdlPvj>
   d637e:	4620      	mov	r0, r4
   d6380:	bd10      	pop	{r4, pc}

000d6382 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   d6382:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6384:	4604      	mov	r4, r0
   d6386:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   d6388:	f100 060d 	add.w	r6, r0, #13
   d638c:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   d6390:	7b23      	ldrb	r3, [r4, #12]
   d6392:	b91b      	cbnz	r3, d639c <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   d6394:	2001      	movs	r0, #1
   d6396:	f004 fcc7 	bl	dad28 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   d639a:	e7f9      	b.n	d6390 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   d639c:	7b23      	ldrb	r3, [r4, #12]
   d639e:	2b02      	cmp	r3, #2
   d63a0:	d062      	beq.n	d6468 <_ZN19BackgroundPublishRK8thread_fEv+0xe6>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   d63a2:	68a0      	ldr	r0, [r4, #8]
   d63a4:	f004 f86e 	bl	da484 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   d63a8:	68a0      	ldr	r0, [r4, #8]
   d63aa:	f004 f873 	bl	da494 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d63ae:	f894 32bd 	ldrb.w	r3, [r4, #701]	; 0x2bd
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d63b2:	f88d 3000 	strb.w	r3, [sp]
   d63b6:	463a      	mov	r2, r7
   d63b8:	233c      	movs	r3, #60	; 0x3c
   d63ba:	4631      	mov	r1, r6
   d63bc:	a806      	add	r0, sp, #24
   d63be:	f004 ff77 	bl	db2b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d63c2:	9d06      	ldr	r5, [sp, #24]
   d63c4:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d63c6:	b933      	cbnz	r3, d63d6 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   d63c8:	7b23      	ldrb	r3, [r4, #12]
   d63ca:	2b02      	cmp	r3, #2
   d63cc:	d003      	beq.n	d63d6 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   d63ce:	2001      	movs	r0, #1
   d63d0:	f004 fcaa 	bl	dad28 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d63d4:	e7f5      	b.n	d63c2 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   d63d6:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d63da:	b31b      	cbz	r3, d6424 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d63dc:	2000      	movs	r0, #0
   d63de:	f004 fb23 	bl	daa28 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d63e2:	b120      	cbz	r0, d63ee <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   d63e4:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d63e6:	b913      	cbnz	r3, d63ee <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   d63e8:	f004 fb76 	bl	daad8 <spark_process>
    }
   d63ec:	e7fa      	b.n	d63e4 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d63ee:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   d63f0:	f8d4 22d0 	ldr.w	r2, [r4, #720]	; 0x2d0
   d63f4:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   d63f6:	1e59      	subs	r1, r3, #1
   d63f8:	424b      	negs	r3, r1
   d63fa:	414b      	adcs	r3, r1
   d63fc:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   d6400:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d6404:	e9cd 6703 	strd	r6, r7, [sp, #12]
   d6408:	b90b      	cbnz	r3, d640e <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   d640a:	f007 fd7d 	bl	ddf08 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d640e:	ab05      	add	r3, sp, #20
   d6410:	9300      	str	r3, [sp, #0]
   d6412:	f8d4 52cc 	ldr.w	r5, [r4, #716]	; 0x2cc
   d6416:	ab04      	add	r3, sp, #16
   d6418:	aa03      	add	r2, sp, #12
   d641a:	f10d 010b 	add.w	r1, sp, #11
   d641e:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d6422:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   d6424:	68a0      	ldr	r0, [r4, #8]
   d6426:	f004 f82d 	bl	da484 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   d642a:	7b23      	ldrb	r3, [r4, #12]
   d642c:	2b02      	cmp	r3, #2
   d642e:	d015      	beq.n	d645c <_ZN19BackgroundPublishRK8thread_fEv+0xda>
	if (_M_manager)
   d6430:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
            {
                return;
            }
            event_context = NULL;
   d6434:	2500      	movs	r5, #0
   d6436:	f8c4 52d0 	str.w	r5, [r4, #720]	; 0x2d0
   d643a:	b133      	cbz	r3, d644a <_ZN19BackgroundPublishRK8thread_fEv+0xc8>
            completed_cb = NULL;
   d643c:	f504 7130 	add.w	r1, r4, #704	; 0x2c0
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d6440:	2203      	movs	r2, #3
   d6442:	4608      	mov	r0, r1
   d6444:	4798      	blx	r3
	    _M_invoker = nullptr;
   d6446:	e9c4 55b2 	strd	r5, r5, [r4, #712]	; 0x2c8
            state = BACKGROUND_PUBLISH_IDLE;
   d644a:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   d644c:	68a0      	ldr	r0, [r4, #8]
   d644e:	7323      	strb	r3, [r4, #12]
   d6450:	f004 f820 	bl	da494 <os_mutex_unlock>
      ~__shared_ptr() = default;
   d6454:	a807      	add	r0, sp, #28
   d6456:	f7fe fc92 	bl	d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d645a:	e799      	b.n	d6390 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   d645c:	68a0      	ldr	r0, [r4, #8]
   d645e:	f004 f819 	bl	da494 <os_mutex_unlock>
   d6462:	a807      	add	r0, sp, #28
   d6464:	f7fe fc8b 	bl	d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d6468:	b009      	add	sp, #36	; 0x24
   d646a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d646c <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   d646c:	6800      	ldr	r0, [r0, #0]
   d646e:	f7ff bf88 	b.w	d6382 <_ZN19BackgroundPublishRK8thread_fEv>

000d6472 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6472:	b513      	push	{r0, r1, r4, lr}
   d6474:	460b      	mov	r3, r1
   d6476:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6478:	e9d0 0100 	ldrd	r0, r1, [r0]
   d647c:	466c      	mov	r4, sp
   d647e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6482:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6486:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d648a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d648e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6492:	b002      	add	sp, #8
   d6494:	bd10      	pop	{r4, pc}
	...

000d6498 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   d6498:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d649c:	4606      	mov	r6, r0
   d649e:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   d64a0:	2014      	movs	r0, #20
   d64a2:	4926      	ldr	r1, [pc, #152]	; (d653c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   d64a4:	4617      	mov	r7, r2
   d64a6:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   d64a8:	f007 fd24 	bl	ddef4 <_ZnwjRKSt9nothrow_t>
   d64ac:	4604      	mov	r4, r0
   d64ae:	b130      	cbz	r0, d64be <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d64b0:	2200      	movs	r2, #0
            exited(false) {
   d64b2:	e9c0 2200 	strd	r2, r2, [r0]
   d64b6:	e9c0 2202 	strd	r2, r2, [r0, #8]
   d64ba:	7402      	strb	r2, [r0, #16]
   d64bc:	7442      	strb	r2, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d64be:	6034      	str	r4, [r6, #0]
        if (!d_) {
   d64c0:	2c00      	cmp	r4, #0
   d64c2:	d031      	beq.n	d6528 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d64c4:	491d      	ldr	r1, [pc, #116]	; (d653c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   d64c6:	2010      	movs	r0, #16
   d64c8:	f007 fd14 	bl	ddef4 <_ZnwjRKSt9nothrow_t>
   d64cc:	4605      	mov	r5, r0
   d64ce:	b168      	cbz	r0, d64ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   d64d0:	2300      	movs	r3, #0
   d64d2:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d64d4:	4601      	mov	r1, r0
   d64d6:	4638      	mov	r0, r7
   d64d8:	f7ff ffcb 	bl	d6472 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64dc:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   d64de:	68aa      	ldr	r2, [r5, #8]
   d64e0:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d64e2:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d64e4:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64e6:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d64e8:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d64ea:	60fa      	str	r2, [r7, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64ec:	6827      	ldr	r7, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d64ee:	6025      	str	r5, [r4, #0]
	if (__p != pointer())
   d64f0:	b137      	cbz	r7, d6500 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   d64f2:	4638      	mov	r0, r7
   d64f4:	f7ff febe 	bl	d6274 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d64f8:	2110      	movs	r1, #16
   d64fa:	4638      	mov	r0, r7
   d64fc:	f007 fcf8 	bl	ddef0 <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6500:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   d6502:	6803      	ldr	r3, [r0, #0]
   d6504:	b183      	cbz	r3, d6528 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6508:	464a      	mov	r2, r9
   d650a:	e9cd 0300 	strd	r0, r3, [sp]
   d650e:	4641      	mov	r1, r8
   d6510:	4b0b      	ldr	r3, [pc, #44]	; (d6540 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   d6512:	3004      	adds	r0, #4
   d6514:	f003 ff8e 	bl	da434 <os_thread_create>
   d6518:	b930      	cbnz	r0, d6528 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   d651a:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   d651c:	7c1b      	ldrb	r3, [r3, #16]
   d651e:	b94b      	cbnz	r3, d6534 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   d6520:	2001      	movs	r0, #1
   d6522:	f003 fff7 	bl	da514 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d6526:	e7f8      	b.n	d651a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6528:	6830      	ldr	r0, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
   d652a:	2300      	movs	r3, #0
   d652c:	6033      	str	r3, [r6, #0]
	if (__p != pointer())
   d652e:	b108      	cbz	r0, d6534 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   d6530:	f7ff fea9 	bl	d6286 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d6534:	4630      	mov	r0, r6
   d6536:	b003      	add	sp, #12
   d6538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d653c:	000e0154 	.word	0x000e0154
   d6540:	000d6245 	.word	0x000d6245

000d6544 <_ZN19BackgroundPublishRK5startEv>:
{
   d6544:	b530      	push	{r4, r5, lr}
    if(!thread)
   d6546:	6843      	ldr	r3, [r0, #4]
{
   d6548:	b087      	sub	sp, #28
   d654a:	4604      	mov	r4, r0
    if(!thread)
   d654c:	b9c3      	cbnz	r3, d6580 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   d654e:	3008      	adds	r0, #8
   d6550:	f003 ff90 	bl	da474 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   d6554:	4b0b      	ldr	r3, [pc, #44]	; (d6584 <_ZN19BackgroundPublishRK5startEv+0x40>)
   d6556:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   d6558:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   d655a:	4b0b      	ldr	r3, [pc, #44]	; (d6588 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d655c:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d655e:	9304      	str	r3, [sp, #16]
   d6560:	f7fd fd99 	bl	d4096 <_Znwj>
   d6564:	4605      	mov	r5, r0
   d6566:	b138      	cbz	r0, d6578 <_ZN19BackgroundPublishRK5startEv+0x34>
   d6568:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d656c:	9300      	str	r3, [sp, #0]
   d656e:	4907      	ldr	r1, [pc, #28]	; (d658c <_ZN19BackgroundPublishRK5startEv+0x48>)
   d6570:	2302      	movs	r3, #2
   d6572:	aa02      	add	r2, sp, #8
   d6574:	f7ff ff90 	bl	d6498 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   d6578:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   d657a:	a802      	add	r0, sp, #8
   d657c:	f7ff fe7a 	bl	d6274 <_ZNSt14_Function_baseD1Ev>
}
   d6580:	b007      	add	sp, #28
   d6582:	bd30      	pop	{r4, r5, pc}
   d6584:	000d646d 	.word	0x000d646d
   d6588:	000d622d 	.word	0x000d622d
   d658c:	000df748 	.word	0x000df748

000d6590 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   d6590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6594:	4604      	mov	r4, r0
   d6596:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   d6598:	6880      	ldr	r0, [r0, #8]
   d659a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d659c:	4698      	mov	r8, r3
   d659e:	460d      	mov	r5, r1
   d65a0:	4616      	mov	r6, r2
   d65a2:	f003 ff6f 	bl	da484 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   d65a6:	6863      	ldr	r3, [r4, #4]
   d65a8:	b11b      	cbz	r3, d65b2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   d65aa:	7b23      	ldrb	r3, [r4, #12]
   d65ac:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   d65b0:	b133      	cbz	r3, d65c0 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   d65b2:	68a0      	ldr	r0, [r4, #8]
   d65b4:	f003 ff6e 	bl	da494 <os_mutex_unlock>
    {
        return false;
   d65b8:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   d65ba:	b005      	add	sp, #20
   d65bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d65c0:	68a0      	ldr	r0, [r4, #8]
   d65c2:	f003 ff67 	bl	da494 <os_mutex_unlock>
    if(!name)
   d65c6:	2d00      	cmp	r5, #0
   d65c8:	d03d      	beq.n	d6646 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   d65ca:	2241      	movs	r2, #65	; 0x41
   d65cc:	4629      	mov	r1, r5
   d65ce:	f104 000d 	add.w	r0, r4, #13
   d65d2:	f008 fa02 	bl	de9da <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   d65d6:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   d65da:	b38e      	cbz	r6, d6640 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   d65dc:	f240 226f 	movw	r2, #623	; 0x26f
   d65e0:	4631      	mov	r1, r6
   d65e2:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   d65e6:	f008 f9f8 	bl	de9da <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   d65ea:	f884 92bc 	strb.w	r9, [r4, #700]	; 0x2bc
    _Function_base() : _M_manager(nullptr) { }
   d65ee:	2300      	movs	r3, #0
   d65f0:	9302      	str	r3, [sp, #8]
      { return !_M_empty(); }
   d65f2:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   d65f4:	f504 7530 	add.w	r5, r4, #704	; 0x2c0
      if (static_cast<bool>(__x))
   d65f8:	b13b      	cbz	r3, d660a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d65fa:	2202      	movs	r2, #2
   d65fc:	4639      	mov	r1, r7
   d65fe:	4668      	mov	r0, sp
   d6600:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6602:	68fb      	ldr	r3, [r7, #12]
   d6604:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   d6606:	68bb      	ldr	r3, [r7, #8]
   d6608:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d660a:	4629      	mov	r1, r5
   d660c:	4668      	mov	r0, sp
   d660e:	f7ff ff30 	bl	d6472 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6612:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6614:	f8d4 22c8 	ldr.w	r2, [r4, #712]	; 0x2c8
      __b = _GLIBCXX_MOVE(__tmp);
   d6618:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d661c:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d661e:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d6620:	4668      	mov	r0, sp
   d6622:	f8d4 22cc 	ldr.w	r2, [r4, #716]	; 0x2cc
      __b = _GLIBCXX_MOVE(__tmp);
   d6626:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
      __a = _GLIBCXX_MOVE(__b);
   d662a:	9203      	str	r2, [sp, #12]
   d662c:	f7ff fe22 	bl	d6274 <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   d6630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d6632:	f8c4 32d0 	str.w	r3, [r4, #720]	; 0x2d0
    state = BACKGROUND_PUBLISH_REQUESTED;
   d6636:	2001      	movs	r0, #1
    event_flags = flags;
   d6638:	f884 82bd 	strb.w	r8, [r4, #701]	; 0x2bd
    state = BACKGROUND_PUBLISH_REQUESTED;
   d663c:	7320      	strb	r0, [r4, #12]
    return true;
   d663e:	e7bc      	b.n	d65ba <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   d6640:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   d6644:	e7d3      	b.n	d65ee <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   d6646:	4628      	mov	r0, r5
   d6648:	e7b7      	b.n	d65ba <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>

000d664a <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   d664a:	4770      	bx	lr

000d664c <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   d664c:	4770      	bx	lr

000d664e <_ZNSt17_Function_handlerIFbR21LocalTimeScheduleItemEZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      }
   d664e:	2001      	movs	r0, #1
   d6650:	4770      	bx	lr

000d6652 <_ZNSt14_Function_base13_Base_managerIZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlR21LocalTimeScheduleItemE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d6652:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6654:	bf08      	it	eq
   d6656:	6001      	streq	r1, [r0, #0]
	}
   d6658:	2000      	movs	r0, #0
   d665a:	4770      	bx	lr

000d665c <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   d665c:	b510      	push	{r4, lr}
}
   d665e:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   d6660:	4604      	mov	r4, r0
}
   d6662:	f007 fc45 	bl	ddef0 <_ZdlPvj>
   d6666:	4620      	mov	r0, r4
   d6668:	bd10      	pop	{r4, pc}

000d666a <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   d666a:	b510      	push	{r4, lr}
}
   d666c:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   d666e:	4604      	mov	r4, r0
}
   d6670:	f007 fc3e 	bl	ddef0 <_ZdlPvj>
   d6674:	4620      	mov	r0, r4
   d6676:	bd10      	pop	{r4, pc}

000d6678 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d6678:	b510      	push	{r4, lr}
   d667a:	4b05      	ldr	r3, [pc, #20]	; (d6690 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   d667c:	4604      	mov	r4, r0
   d667e:	f840 3b1c 	str.w	r3, [r0], #28
   d6682:	f006 fe0b 	bl	dd29c <_ZN6StringD1Ev>
   d6686:	1d20      	adds	r0, r4, #4
   d6688:	f006 fe08 	bl	dd29c <_ZN6StringD1Ev>
}
   d668c:	4620      	mov	r0, r4
   d668e:	bd10      	pop	{r4, pc}
   d6690:	000df7f4 	.word	0x000df7f4

000d6694 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d6694:	b510      	push	{r4, lr}
   d6696:	4604      	mov	r4, r0
}
   d6698:	f7ff ffee 	bl	d6678 <_ZN22LocalTimePosixTimezoneD1Ev>
   d669c:	4620      	mov	r0, r4
   d669e:	2158      	movs	r1, #88	; 0x58
   d66a0:	f007 fc26 	bl	ddef0 <_ZdlPvj>
   d66a4:	4620      	mov	r0, r4
   d66a6:	bd10      	pop	{r4, pc}

000d66a8 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   d66a8:	b510      	push	{r4, lr}
   d66aa:	4b04      	ldr	r3, [pc, #16]	; (d66bc <_ZN9LocalTimeD1Ev+0x14>)
   d66ac:	4604      	mov	r4, r0
   d66ae:	f840 3b04 	str.w	r3, [r0], #4
   d66b2:	f7ff ffe1 	bl	d6678 <_ZN22LocalTimePosixTimezoneD1Ev>
   d66b6:	4620      	mov	r0, r4
   d66b8:	bd10      	pop	{r4, pc}
   d66ba:	bf00      	nop
   d66bc:	000df7c4 	.word	0x000df7c4

000d66c0 <_ZN9LocalTimeD0Ev>:
   d66c0:	b510      	push	{r4, lr}
   d66c2:	4604      	mov	r4, r0
   d66c4:	f7ff fff0 	bl	d66a8 <_ZN9LocalTimeD1Ev>
   d66c8:	4620      	mov	r0, r4
   d66ca:	2160      	movs	r1, #96	; 0x60
   d66cc:	f007 fc10 	bl	ddef0 <_ZdlPvj>
   d66d0:	4620      	mov	r0, r4
   d66d2:	bd10      	pop	{r4, pc}

000d66d4 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   d66d4:	f020 0302 	bic.w	r3, r0, #2
   d66d8:	2b01      	cmp	r3, #1
   d66da:	d003      	beq.n	d66e4 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   d66dc:	1f43      	subs	r3, r0, #5
   d66de:	4258      	negs	r0, r3
   d66e0:	4158      	adcs	r0, r3
   d66e2:	4770      	bx	lr
   d66e4:	4618      	mov	r0, r3
   d66e6:	4770      	bx	lr

000d66e8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>:
	if (__p)
   d66e8:	b108      	cbz	r0, d66ee <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0+0x6>
   d66ea:	f7fd bcd8 	b.w	d409e <_ZdlPv>
	  _Tr::deallocate(_M_impl, __p, __n);
      }
   d66ee:	4770      	bx	lr

000d66f0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   d66f0:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d66f2:	b148      	cbz	r0, d6708 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->max_size())
   d66f4:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   d66f8:	d301      	bcc.n	d66fe <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   d66fa:	f007 fbff 	bl	ddefc <_ZSt17__throw_bad_allocv>
      }
   d66fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6702:	0080      	lsls	r0, r0, #2
   d6704:	f7fd bcc7 	b.w	d4096 <_Znwj>
   d6708:	bd08      	pop	{r3, pc}

000d670a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d670a:	680b      	ldr	r3, [r1, #0]
   d670c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   d670e:	684b      	ldr	r3, [r1, #4]
   d6710:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   d6712:	b113      	cbz	r3, d671a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   d6714:	685a      	ldr	r2, [r3, #4]
   d6716:	3201      	adds	r2, #1
   d6718:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d671a:	4770      	bx	lr

000d671c <_ZNK12LocalTimeHMS9compareToERKS_>:
        if (hour < other.hour) {
   d671c:	f990 2004 	ldrsb.w	r2, [r0, #4]
   d6720:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d6724:	429a      	cmp	r2, r3
   d6726:	db13      	blt.n	d6750 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
        if (hour > other.hour) {
   d6728:	dc10      	bgt.n	d674c <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
            if (minute < other.minute) {
   d672a:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d672e:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d6732:	429a      	cmp	r2, r3
   d6734:	db0c      	blt.n	d6750 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
            if (minute > other.minute) {
   d6736:	dc09      	bgt.n	d674c <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
                if (second < other.second) {
   d6738:	f990 2006 	ldrsb.w	r2, [r0, #6]
   d673c:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d6740:	429a      	cmp	r2, r3
   d6742:	db05      	blt.n	d6750 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
                if (second > other.second) {
   d6744:	bfcc      	ite	gt
   d6746:	2001      	movgt	r0, #1
   d6748:	2000      	movle	r0, #0
   d674a:	4770      	bx	lr
            return +1;
   d674c:	2001      	movs	r0, #1
   d674e:	4770      	bx	lr
            return -1;
   d6750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
   d6754:	4770      	bx	lr
	...

000d6758 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   d6758:	4a02      	ldr	r2, [pc, #8]	; (d6764 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   d675a:	6002      	str	r2, [r0, #0]
   d675c:	684a      	ldr	r2, [r1, #4]
   d675e:	6042      	str	r2, [r0, #4]
   d6760:	4770      	bx	lr
   d6762:	bf00      	nop
   d6764:	000df7d4 	.word	0x000df7d4

000d6768 <_ZN12LocalTimeHMSaSERKS_>:
   d6768:	f991 2004 	ldrsb.w	r2, [r1, #4]
   d676c:	7102      	strb	r2, [r0, #4]
   d676e:	f991 2005 	ldrsb.w	r2, [r1, #5]
   d6772:	7142      	strb	r2, [r0, #5]
   d6774:	f991 2006 	ldrsb.w	r2, [r1, #6]
   d6778:	7182      	strb	r2, [r0, #6]
   d677a:	f991 2007 	ldrsb.w	r2, [r1, #7]
   d677e:	71c2      	strb	r2, [r0, #7]
   d6780:	4770      	bx	lr

000d6782 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>:
    int compareTo(LocalTimeHMS hms) const {
   d6782:	b538      	push	{r3, r4, r5, lr}
   d6784:	460c      	mov	r4, r1
   d6786:	4605      	mov	r5, r0
        return compareTo(other) < 0;
   d6788:	f100 011c 	add.w	r1, r0, #28
   d678c:	4620      	mov	r0, r4
   d678e:	f7ff ffc5 	bl	d671c <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms < hmsStart) {
   d6792:	2800      	cmp	r0, #0
   d6794:	db09      	blt.n	d67aa <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x28>
        return compareTo(other) > 0;
   d6796:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d679a:	4620      	mov	r0, r4
   d679c:	f7ff ffbe 	bl	d671c <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms > hmsEnd) {
   d67a0:	2800      	cmp	r0, #0
   d67a2:	bfd4      	ite	le
   d67a4:	2000      	movle	r0, #0
   d67a6:	2001      	movgt	r0, #1
    }
   d67a8:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   d67aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d67ae:	e7fb      	b.n	d67a8 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x26>

000d67b0 <_ZN22LocalTimePosixTimezoneaSERKS_>:
class LocalTimePosixTimezone {
   d67b0:	b538      	push	{r3, r4, r5, lr}
   d67b2:	4604      	mov	r4, r0
   d67b4:	460d      	mov	r5, r1
   d67b6:	3004      	adds	r0, #4
   d67b8:	3104      	adds	r1, #4
   d67ba:	f006 fdf6 	bl	dd3aa <_ZN6StringaSERKS_>
   d67be:	f105 0114 	add.w	r1, r5, #20
   d67c2:	f104 0014 	add.w	r0, r4, #20
   d67c6:	f7ff ffcf 	bl	d6768 <_ZN12LocalTimeHMSaSERKS_>
   d67ca:	f105 011c 	add.w	r1, r5, #28
   d67ce:	f104 001c 	add.w	r0, r4, #28
   d67d2:	f006 fdea 	bl	dd3aa <_ZN6StringaSERKS_>
   d67d6:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d67da:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d67de:	f7ff ffc3 	bl	d6768 <_ZN12LocalTimeHMSaSERKS_>
class LocalTimeChange {
   d67e2:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   d67e6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   d67ea:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   d67ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   d67f2:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   d67f6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   d67fa:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   d67fe:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   d6802:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d6806:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d680a:	f7ff ffad 	bl	d6768 <_ZN12LocalTimeHMSaSERKS_>
   d680e:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   d6812:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   d6816:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   d681a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   d681e:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   d6822:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   d6826:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   d682a:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   d682e:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d6832:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d6836:	f7ff ff97 	bl	d6768 <_ZN12LocalTimeHMSaSERKS_>
class LocalTimePosixTimezone {
   d683a:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d683e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d6842:	4620      	mov	r0, r4
   d6844:	bd38      	pop	{r3, r4, r5, pc}

000d6846 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   d6846:	694a      	ldr	r2, [r1, #20]
   d6848:	6803      	ldr	r3, [r0, #0]
   d684a:	f362 0316 	bfi	r3, r2, #0, #23
   d684e:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   d6850:	690b      	ldr	r3, [r1, #16]
   d6852:	1c5a      	adds	r2, r3, #1
   d6854:	8843      	ldrh	r3, [r0, #2]
   d6856:	f362 13ca 	bfi	r3, r2, #7, #4
   d685a:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   d685c:	68ca      	ldr	r2, [r1, #12]
   d685e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d6862:	f362 03c7 	bfi	r3, r2, #3, #5
   d6866:	70c3      	strb	r3, [r0, #3]
}
   d6868:	4770      	bx	lr

000d686a <_ZNK12LocalTimeYMD12getDayOfWeekEv>:
int LocalTimeYMD::getDayOfWeek() const {
   d686a:	b510      	push	{r4, lr}
   d686c:	4604      	mov	r4, r0
   d686e:	b08c      	sub	sp, #48	; 0x30
    struct tm timeInfo = {0};
   d6870:	2224      	movs	r2, #36	; 0x24
   d6872:	2100      	movs	r1, #0
   d6874:	a803      	add	r0, sp, #12
   d6876:	f007 ffef 	bl	de858 <memset>
    timeInfo.tm_year = ymd.year;
   d687a:	6823      	ldr	r3, [r4, #0]
   d687c:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d6880:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d6882:	8863      	ldrh	r3, [r4, #2]
   d6884:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d6888:	3b01      	subs	r3, #1
   d688a:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday = ymd.day;
   d688c:	78e3      	ldrb	r3, [r4, #3]
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   d688e:	a803      	add	r0, sp, #12
    timeInfo.tm_mday = ymd.day;
   d6890:	08db      	lsrs	r3, r3, #3
   d6892:	9306      	str	r3, [sp, #24]
    return mktime(pTimeInfo);
   d6894:	f004 fa40 	bl	dad18 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d6898:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d689c:	a903      	add	r1, sp, #12
   d689e:	4668      	mov	r0, sp
   d68a0:	f004 fa2a 	bl	dacf8 <localtime_r>
}
   d68a4:	9809      	ldr	r0, [sp, #36]	; 0x24
   d68a6:	b00c      	add	sp, #48	; 0x30
   d68a8:	bd10      	pop	{r4, pc}

000d68aa <_ZN12LocalTimeYMD6addDayEi>:
void LocalTimeYMD::addDay(int numberOfDays) {
   d68aa:	b530      	push	{r4, r5, lr}
   d68ac:	4604      	mov	r4, r0
   d68ae:	b08d      	sub	sp, #52	; 0x34
    struct tm timeInfo = {0};
   d68b0:	2224      	movs	r2, #36	; 0x24
void LocalTimeYMD::addDay(int numberOfDays) {
   d68b2:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d68b4:	a803      	add	r0, sp, #12
   d68b6:	2100      	movs	r1, #0
   d68b8:	f007 ffce 	bl	de858 <memset>
    timeInfo.tm_year = ymd.year;
   d68bc:	6823      	ldr	r3, [r4, #0]
    timeInfo.tm_mday = ymd.day;
   d68be:	78e1      	ldrb	r1, [r4, #3]
    timeInfo.tm_year = ymd.year;
   d68c0:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d68c4:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d68c6:	8863      	ldrh	r3, [r4, #2]
   d68c8:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d68cc:	3b01      	subs	r3, #1
    timeInfo.tm_mday += numberOfDays;
   d68ce:	eb05 05d1 	add.w	r5, r5, r1, lsr #3
    return mktime(pTimeInfo);
   d68d2:	a803      	add	r0, sp, #12
    timeInfo.tm_mon = ymd.month - 1;
   d68d4:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday += numberOfDays;
   d68d6:	9506      	str	r5, [sp, #24]
    return mktime(pTimeInfo);
   d68d8:	f004 fa1e 	bl	dad18 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d68dc:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d68e0:	a903      	add	r1, sp, #12
   d68e2:	4668      	mov	r0, sp
   d68e4:	f004 fa08 	bl	dacf8 <localtime_r>
    fromTimeInfo(&timeInfo);
   d68e8:	a903      	add	r1, sp, #12
   d68ea:	4620      	mov	r0, r4
   d68ec:	f7ff ffab 	bl	d6846 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d68f0:	b00d      	add	sp, #52	; 0x34
   d68f2:	bd30      	pop	{r4, r5, pc}

000d68f4 <_ZNK12LocalTimeYMD9compareToES_>:
    if (ymd.year < other.ymd.year) {
   d68f4:	6803      	ldr	r3, [r0, #0]
   d68f6:	f3c1 0216 	ubfx	r2, r1, #0, #23
   d68fa:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d68fe:	4293      	cmp	r3, r2
   d6900:	d313      	bcc.n	d692a <_ZNK12LocalTimeYMD9compareToES_+0x36>
    if (ymd.year > other.ymd.year) {
   d6902:	d810      	bhi.n	d6926 <_ZNK12LocalTimeYMD9compareToES_+0x32>
        if (ymd.month < other.ymd.month) {
   d6904:	8842      	ldrh	r2, [r0, #2]
   d6906:	f3c1 53c3 	ubfx	r3, r1, #23, #4
   d690a:	f3c2 12c3 	ubfx	r2, r2, #7, #4
   d690e:	429a      	cmp	r2, r3
   d6910:	d30b      	bcc.n	d692a <_ZNK12LocalTimeYMD9compareToES_+0x36>
        if (ymd.month > other.ymd.month) {
   d6912:	d808      	bhi.n	d6926 <_ZNK12LocalTimeYMD9compareToES_+0x32>
            if (ymd.day < other.ymd.day) {
   d6914:	78c3      	ldrb	r3, [r0, #3]
   d6916:	08db      	lsrs	r3, r3, #3
   d6918:	ebb3 6fd1 	cmp.w	r3, r1, lsr #27
   d691c:	d305      	bcc.n	d692a <_ZNK12LocalTimeYMD9compareToES_+0x36>
            if (ymd.day > other.ymd.day) {
   d691e:	bf8c      	ite	hi
   d6920:	2001      	movhi	r0, #1
   d6922:	2000      	movls	r0, #0
   d6924:	4770      	bx	lr
        cmp = +1;
   d6926:	2001      	movs	r0, #1
   d6928:	4770      	bx	lr
        cmp = -1;
   d692a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d692e:	4770      	bx	lr

000d6930 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   d6930:	4a02      	ldr	r2, [pc, #8]	; (d693c <_ZN12LocalTimeHMSC1Ev+0xc>)
   d6932:	6002      	str	r2, [r0, #0]
   d6934:	2200      	movs	r2, #0
   d6936:	6042      	str	r2, [r0, #4]
}
   d6938:	4770      	bx	lr
   d693a:	bf00      	nop
   d693c:	000df7d4 	.word	0x000df7d4

000d6940 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   d6940:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   d6942:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   d6944:	b087      	sub	sp, #28
    hour = minute = second = 0;
   d6946:	8083      	strh	r3, [r0, #4]
   d6948:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   d694a:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d694c:	ab05      	add	r3, sp, #20
   d694e:	9300      	str	r3, [sp, #0]
   d6950:	4913      	ldr	r1, [pc, #76]	; (d69a0 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   d6952:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d6954:	ab04      	add	r3, sp, #16
   d6956:	aa03      	add	r2, sp, #12
   d6958:	4628      	mov	r0, r5
   d695a:	f004 f98d 	bl	dac78 <sscanf>
   d695e:	2803      	cmp	r0, #3
   d6960:	d107      	bne.n	d6972 <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   d6962:	9b03      	ldr	r3, [sp, #12]
   d6964:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d6966:	9b04      	ldr	r3, [sp, #16]
   d6968:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   d696a:	9b05      	ldr	r3, [sp, #20]
   d696c:	71a3      	strb	r3, [r4, #6]
}
   d696e:	b007      	add	sp, #28
   d6970:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   d6972:	490c      	ldr	r1, [pc, #48]	; (d69a4 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   d6974:	ab04      	add	r3, sp, #16
   d6976:	aa03      	add	r2, sp, #12
   d6978:	4628      	mov	r0, r5
   d697a:	f004 f97d 	bl	dac78 <sscanf>
   d697e:	2802      	cmp	r0, #2
   d6980:	d104      	bne.n	d698c <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   d6982:	9b03      	ldr	r3, [sp, #12]
   d6984:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d6986:	9b04      	ldr	r3, [sp, #16]
   d6988:	7163      	strb	r3, [r4, #5]
   d698a:	e7f0      	b.n	d696e <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   d698c:	4906      	ldr	r1, [pc, #24]	; (d69a8 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   d698e:	aa03      	add	r2, sp, #12
   d6990:	4628      	mov	r0, r5
   d6992:	f004 f971 	bl	dac78 <sscanf>
   d6996:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   d6998:	bf04      	itt	eq
   d699a:	9b03      	ldreq	r3, [sp, #12]
   d699c:	7123      	strbeq	r3, [r4, #4]
}
   d699e:	e7e6      	b.n	d696e <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   d69a0:	000df76c 	.word	0x000df76c
   d69a4:	000df76f 	.word	0x000df76f
   d69a8:	000df5cb 	.word	0x000df5cb

000d69ac <_ZN12LocalTimeHMSC1EPKc>:
LocalTimeHMS::LocalTimeHMS(const char *str) {
   d69ac:	b510      	push	{r4, lr}
   d69ae:	4b04      	ldr	r3, [pc, #16]	; (d69c0 <_ZN12LocalTimeHMSC1EPKc+0x14>)
   d69b0:	6003      	str	r3, [r0, #0]
   d69b2:	2300      	movs	r3, #0
   d69b4:	4604      	mov	r4, r0
   d69b6:	6043      	str	r3, [r0, #4]
    parse(str);
   d69b8:	f7ff ffc2 	bl	d6940 <_ZN12LocalTimeHMS5parseEPKc>
}
   d69bc:	4620      	mov	r0, r4
   d69be:	bd10      	pop	{r4, pc}
   d69c0:	000df7d4 	.word	0x000df7d4

000d69c4 <_ZN21LocalTimeScheduleItemC1Ev>:
    LocalTimeScheduleItem() {
   d69c4:	b538      	push	{r3, r4, r5, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   d69c6:	2500      	movs	r5, #0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d69c8:	237f      	movs	r3, #127	; 0x7f
    LocalTimeScheduleItem() {
   d69ca:	4604      	mov	r4, r0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d69cc:	7003      	strb	r3, [r0, #0]
   d69ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
   d69d2:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d69d6:	e9c0 5505 	strd	r5, r5, [r0, #20]
    LocalTimeRange() : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(LocalTimeHMS("00:00:00")), hmsEnd(LocalTimeHMS("23:59:59")) {
   d69da:	490a      	ldr	r1, [pc, #40]	; (d6a04 <_ZN21LocalTimeScheduleItemC1Ev+0x40>)
   d69dc:	301c      	adds	r0, #28
   d69de:	f7ff ffe5 	bl	d69ac <_ZN12LocalTimeHMSC1EPKc>
   d69e2:	4909      	ldr	r1, [pc, #36]	; (d6a08 <_ZN21LocalTimeScheduleItemC1Ev+0x44>)
   d69e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d69e8:	f7ff ffe0 	bl	d69ac <_ZN12LocalTimeHMSC1EPKc>
    LocalTimeScheduleItem() {
   d69ec:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
   d69f0:	4906      	ldr	r1, [pc, #24]	; (d6a0c <_ZN21LocalTimeScheduleItemC1Ev+0x48>)
   d69f2:	6365      	str	r5, [r4, #52]	; 0x34
   d69f4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d69f8:	f006 fc9b 	bl	dd332 <_ZN6StringC1EPKc>
   d69fc:	64a5      	str	r5, [r4, #72]	; 0x48
    }
   d69fe:	4620      	mov	r0, r4
   d6a00:	bd38      	pop	{r3, r4, r5, pc}
   d6a02:	bf00      	nop
   d6a04:	000df775 	.word	0x000df775
   d6a08:	000df77e 	.word	0x000df77e
   d6a0c:	000dffd4 	.word	0x000dffd4

000d6a10 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   d6a10:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d6a14:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d6a18:	f990 1006 	ldrsb.w	r1, [r0, #6]
   d6a1c:	2b00      	cmp	r3, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   d6a1e:	bfb8      	it	lt
   d6a20:	4808      	ldrlt	r0, [pc, #32]	; (d6a44 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   d6a22:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   d6a26:	ea4f 0282 	mov.w	r2, r2, lsl #2
   d6a2a:	bfbd      	ittte	lt
   d6a2c:	fb00 2003 	mlalt	r0, r0, r3, r2
   d6a30:	1840      	addlt	r0, r0, r1
   d6a32:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   d6a34:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   d6a38:	bfa4      	itt	ge
   d6a3a:	fb00 2303 	mlage	r3, r0, r3, r2
   d6a3e:	1858      	addge	r0, r3, r1
}
   d6a40:	4770      	bx	lr
   d6a42:	bf00      	nop
   d6a44:	fffff1f0 	.word	0xfffff1f0

000d6a48 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   d6a48:	f990 3007 	ldrsb.w	r3, [r0, #7]
   d6a4c:	b943      	cbnz	r3, d6a60 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   d6a4e:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d6a52:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   d6a54:	f990 3005 	ldrsb.w	r3, [r0, #5]
   d6a58:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   d6a5a:	f990 3006 	ldrsb.w	r3, [r0, #6]
   d6a5e:	600b      	str	r3, [r1, #0]
}
   d6a60:	4770      	bx	lr

000d6a62 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   d6a62:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   d6a66:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   d6a68:	b9b3      	cbnz	r3, d6a98 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   d6a6a:	f990 5004 	ldrsb.w	r5, [r0, #4]
   d6a6e:	688c      	ldr	r4, [r1, #8]
   d6a70:	442c      	add	r4, r5
   d6a72:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   d6a76:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   d6a78:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   d6a7c:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   d6a7e:	bfb5      	itete	lt
   d6a80:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   d6a82:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   d6a84:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   d6a86:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   d6a88:	bfb5      	itete	lt
   d6a8a:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   d6a8e:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   d6a92:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   d6a94:	189b      	addge	r3, r3, r2
   d6a96:	600b      	str	r3, [r1, #0]
}
   d6a98:	bd30      	pop	{r4, r5, pc}

000d6a9a <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inOnlyOnDates(LocalTimeYMD ymd) const {
   d6a9a:	b538      	push	{r3, r4, r5, lr}
   d6a9c:	6844      	ldr	r4, [r0, #4]
   d6a9e:	4605      	mov	r5, r0
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d6aa0:	68ab      	ldr	r3, [r5, #8]
   d6aa2:	42a3      	cmp	r3, r4
   d6aa4:	d007      	beq.n	d6ab6 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1c>
        return compareTo(other) == 0; 
   d6aa6:	4620      	mov	r0, r4
   d6aa8:	f7ff ff24 	bl	d68f4 <_ZNK12LocalTimeYMD9compareToES_>
   d6aac:	3404      	adds	r4, #4
        if (*it == ymd) {
   d6aae:	2800      	cmp	r0, #0
   d6ab0:	d1f6      	bne.n	d6aa0 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x6>
            return true;
   d6ab2:	2001      	movs	r0, #1
}
   d6ab4:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d6ab6:	2000      	movs	r0, #0
   d6ab8:	e7fc      	b.n	d6ab4 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1a>

000d6aba <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inExceptDates(LocalTimeYMD ymd) const {
   d6aba:	b538      	push	{r3, r4, r5, lr}
   d6abc:	6904      	ldr	r4, [r0, #16]
   d6abe:	4605      	mov	r5, r0
    for(auto it = exceptDates.begin(); it != exceptDates.end(); ++it) {
   d6ac0:	696b      	ldr	r3, [r5, #20]
   d6ac2:	42a3      	cmp	r3, r4
   d6ac4:	d007      	beq.n	d6ad6 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1c>
   d6ac6:	4620      	mov	r0, r4
   d6ac8:	f7ff ff14 	bl	d68f4 <_ZNK12LocalTimeYMD9compareToES_>
   d6acc:	3404      	adds	r4, #4
        if (*it == ymd) {
   d6ace:	2800      	cmp	r0, #0
   d6ad0:	d1f6      	bne.n	d6ac0 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x6>
            return true;
   d6ad2:	2001      	movs	r0, #1
}
   d6ad4:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d6ad6:	2000      	movs	r0, #0
   d6ad8:	e7fc      	b.n	d6ad4 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1a>

000d6ada <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::isValid(LocalTimeYMD ymd) const {
   d6ada:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6adc:	4605      	mov	r5, r0
   d6ade:	460e      	mov	r6, r1
    if (inExceptDates(ymd)) {
   d6ae0:	f7ff ffeb 	bl	d6aba <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>
   d6ae4:	b990      	cbnz	r0, d6b0c <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x32>
        int dayOfWeek = ymd.getDayOfWeek();
   d6ae6:	a801      	add	r0, sp, #4
   d6ae8:	9101      	str	r1, [sp, #4]
   d6aea:	f7ff febe 	bl	d686a <_ZNK12LocalTimeYMD12getDayOfWeekEv>
        return (dayOfWeekMask & (1 << dayOfWeek)) != 0;
   d6aee:	782b      	ldrb	r3, [r5, #0]
        bool isValidDates = inOnlyOnDates(ymd);
   d6af0:	4631      	mov	r1, r6
   d6af2:	fa43 f400 	asr.w	r4, r3, r0
   d6af6:	4628      	mov	r0, r5
   d6af8:	f7ff ffcf 	bl	d6a9a <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>
   d6afc:	f004 0401 	and.w	r4, r4, #1
        result = isValidDays || isValidDates;
   d6b00:	2c00      	cmp	r4, #0
   d6b02:	bf08      	it	eq
   d6b04:	4604      	moveq	r4, r0
}
   d6b06:	4620      	mov	r0, r4
   d6b08:	b002      	add	sp, #8
   d6b0a:	bd70      	pop	{r4, r5, r6, pc}
        result = false;
   d6b0c:	2400      	movs	r4, #0
   d6b0e:	e7fa      	b.n	d6b06 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x2c>

000d6b10 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>:
LocalTimeYMD LocalTimeRestrictedDate::getExpirationDate() const {
   d6b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d6b14:	2400      	movs	r4, #0
   d6b16:	6845      	ldr	r5, [r0, #4]
   d6b18:	4680      	mov	r8, r0
   d6b1a:	4626      	mov	r6, r4
   d6b1c:	4627      	mov	r7, r4
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d6b1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d6b22:	429d      	cmp	r5, r3
   d6b24:	d01e      	beq.n	d6b64 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x54>
        return ymd.year == 0 && ymd.month == 0 && ymd.day == 0;
   d6b26:	f367 0916 	bfi	r9, r7, #0, #23
   d6b2a:	f366 59da 	bfi	r9, r6, #23, #4
   d6b2e:	f364 69df 	bfi	r9, r4, #27, #5
        if (result.isEmpty() || *it > result) {
   d6b32:	f1b9 0f00 	cmp.w	r9, #0
   d6b36:	d109      	bne.n	d6b4c <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x3c>
            result = *it;
   d6b38:	682f      	ldr	r7, [r5, #0]
   d6b3a:	886e      	ldrh	r6, [r5, #2]
   d6b3c:	78ec      	ldrb	r4, [r5, #3]
   d6b3e:	f3c7 0716 	ubfx	r7, r7, #0, #23
   d6b42:	f3c6 16c3 	ubfx	r6, r6, #7, #4
   d6b46:	08e4      	lsrs	r4, r4, #3
      pointer
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   d6b48:	3504      	adds	r5, #4
      {
	++_M_current;
	return *this;
   d6b4a:	e7e8      	b.n	d6b1e <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0xe>
   d6b4c:	f367 0116 	bfi	r1, r7, #0, #23
   d6b50:	f366 51da 	bfi	r1, r6, #23, #4
   d6b54:	f364 61df 	bfi	r1, r4, #27, #5
        return compareTo(other) > 0; 
   d6b58:	4628      	mov	r0, r5
   d6b5a:	f7ff fecb 	bl	d68f4 <_ZNK12LocalTimeYMD9compareToES_>
        if (result.isEmpty() || *it > result) {
   d6b5e:	2800      	cmp	r0, #0
   d6b60:	dcea      	bgt.n	d6b38 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x28>
   d6b62:	e7f1      	b.n	d6b48 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x38>
    return result;
   d6b64:	2000      	movs	r0, #0
   d6b66:	f367 0016 	bfi	r0, r7, #0, #23
   d6b6a:	f366 50da 	bfi	r0, r6, #23, #4
   d6b6e:	f364 60df 	bfi	r0, r4, #27, #5
}
   d6b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d6b78 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   d6b78:	4a05      	ldr	r2, [pc, #20]	; (d6b90 <_ZN15LocalTimeChangeC1Ev+0x18>)
   d6b7a:	b508      	push	{r3, lr}
   d6b7c:	6002      	str	r2, [r0, #0]
   d6b7e:	2200      	movs	r2, #0
   d6b80:	4603      	mov	r3, r0
   d6b82:	6042      	str	r2, [r0, #4]
   d6b84:	3008      	adds	r0, #8
   d6b86:	f7ff fed3 	bl	d6930 <_ZN12LocalTimeHMSC1Ev>
}
   d6b8a:	4618      	mov	r0, r3
   d6b8c:	bd08      	pop	{r3, pc}
   d6b8e:	bf00      	nop
   d6b90:	000df7e4 	.word	0x000df7e4

000d6b94 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   d6b94:	2300      	movs	r3, #0
   d6b96:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   d6b98:	8183      	strh	r3, [r0, #12]
   d6b9a:	7383      	strb	r3, [r0, #14]
}
   d6b9c:	4770      	bx	lr
	...

000d6ba0 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   d6ba0:	b530      	push	{r4, r5, lr}
   d6ba2:	4604      	mov	r4, r0
   d6ba4:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   d6ba6:	460d      	mov	r5, r1
   d6ba8:	b111      	cbz	r1, d6bb0 <_ZN15LocalTimeChange5parseEPKc+0x10>
   d6baa:	780b      	ldrb	r3, [r1, #0]
   d6bac:	2b4d      	cmp	r3, #77	; 0x4d
   d6bae:	d003      	beq.n	d6bb8 <_ZN15LocalTimeChange5parseEPKc+0x18>
        clear();
   d6bb0:	4620      	mov	r0, r4
   d6bb2:	f7ff ffef 	bl	d6b94 <_ZN15LocalTimeChange5clearEv>
   d6bb6:	e01b      	b.n	d6bf0 <_ZN15LocalTimeChange5parseEPKc+0x50>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   d6bb8:	ab05      	add	r3, sp, #20
   d6bba:	9300      	str	r3, [sp, #0]
   d6bbc:	490f      	ldr	r1, [pc, #60]	; (d6bfc <_ZN15LocalTimeChange5parseEPKc+0x5c>)
   d6bbe:	ab04      	add	r3, sp, #16
   d6bc0:	aa03      	add	r2, sp, #12
   d6bc2:	4628      	mov	r0, r5
   d6bc4:	f004 f858 	bl	dac78 <sscanf>
   d6bc8:	2803      	cmp	r0, #3
   d6bca:	d1f1      	bne.n	d6bb0 <_ZN15LocalTimeChange5parseEPKc+0x10>
        month = (int8_t) values[0];
   d6bcc:	9b03      	ldr	r3, [sp, #12]
   d6bce:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   d6bd0:	9b04      	ldr	r3, [sp, #16]
   d6bd2:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   d6bd4:	9b05      	ldr	r3, [sp, #20]
   d6bd6:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   d6bd8:	212f      	movs	r1, #47	; 0x2f
   d6bda:	4628      	mov	r0, r5
   d6bdc:	f007 fe9c 	bl	de918 <strchr>
        if (cp) {
   d6be0:	b140      	cbz	r0, d6bf4 <_ZN15LocalTimeChange5parseEPKc+0x54>
            hms.parse(cp);
   d6be2:	1c41      	adds	r1, r0, #1
   d6be4:	f104 0008 	add.w	r0, r4, #8
   d6be8:	f7ff feaa 	bl	d6940 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   d6bec:	2301      	movs	r3, #1
   d6bee:	71e3      	strb	r3, [r4, #7]
}
   d6bf0:	b007      	add	sp, #28
   d6bf2:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   d6bf4:	81a0      	strh	r0, [r4, #12]
   d6bf6:	73a0      	strb	r0, [r4, #14]
}
   d6bf8:	e7f8      	b.n	d6bec <_ZN15LocalTimeChange5parseEPKc+0x4c>
   d6bfa:	bf00      	nop
   d6bfc:	000df787 	.word	0x000df787

000d6c00 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   d6c00:	4b10      	ldr	r3, [pc, #64]	; (d6c44 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   d6c02:	4911      	ldr	r1, [pc, #68]	; (d6c48 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d6c04:	b510      	push	{r4, lr}
   d6c06:	4604      	mov	r4, r0
   d6c08:	f840 3b04 	str.w	r3, [r0], #4
   d6c0c:	f006 fb91 	bl	dd332 <_ZN6StringC1EPKc>
   d6c10:	f104 0014 	add.w	r0, r4, #20
   d6c14:	f7ff fe8c 	bl	d6930 <_ZN12LocalTimeHMSC1Ev>
   d6c18:	490b      	ldr	r1, [pc, #44]	; (d6c48 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d6c1a:	f104 001c 	add.w	r0, r4, #28
   d6c1e:	f006 fb88 	bl	dd332 <_ZN6StringC1EPKc>
   d6c22:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d6c26:	f7ff fe83 	bl	d6930 <_ZN12LocalTimeHMSC1Ev>
   d6c2a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6c2e:	f7ff ffa3 	bl	d6b78 <_ZN15LocalTimeChangeC1Ev>
   d6c32:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6c36:	f7ff ff9f 	bl	d6b78 <_ZN15LocalTimeChangeC1Ev>
   d6c3a:	2300      	movs	r3, #0
   d6c3c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   d6c40:	4620      	mov	r0, r4
   d6c42:	bd10      	pop	{r4, pc}
   d6c44:	000df7f4 	.word	0x000df7f4
   d6c48:	000dffd4 	.word	0x000dffd4

000d6c4c <_ZN22LocalTimePosixTimezone5parseEPKc>:
bool LocalTimePosixTimezone::parse(const char *str) {
   d6c4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6c50:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   d6c52:	4608      	mov	r0, r1
   d6c54:	f007 fe8a 	bl	de96c <strdup>
    size_t ii = 0;
   d6c58:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   d6c5a:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   d6c5c:	9001      	str	r0, [sp, #4]
                dstStart.parse(token);
   d6c5e:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   d6c62:	493f      	ldr	r1, [pc, #252]	; (d6d60 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   d6c64:	9801      	ldr	r0, [sp, #4]
   d6c66:	aa01      	add	r2, sp, #4
   d6c68:	f007 ff06 	bl	dea78 <strtok_r>
   d6c6c:	4601      	mov	r1, r0
   d6c6e:	2800      	cmp	r0, #0
   d6c70:	d062      	beq.n	d6d38 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   d6c72:	2d01      	cmp	r5, #1
   d6c74:	f105 0301 	add.w	r3, r5, #1
   d6c78:	d053      	beq.n	d6d22 <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   d6c7a:	2d02      	cmp	r5, #2
   d6c7c:	d056      	beq.n	d6d2c <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   d6c7e:	2d00      	cmp	r5, #0
   d6c80:	d146      	bne.n	d6d10 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   d6c82:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   d6c84:	f892 9000 	ldrb.w	r9, [r2]
   d6c88:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   d6c8c:	4615      	mov	r5, r2
   d6c8e:	4617      	mov	r7, r2
   d6c90:	f102 0201 	add.w	r2, r2, #1
   d6c94:	d8f6      	bhi.n	d6c84 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   d6c96:	2200      	movs	r2, #0
   d6c98:	702a      	strb	r2, [r5, #0]
                standardName = start;
   d6c9a:	f104 001c 	add.w	r0, r4, #28
   d6c9e:	f006 fba6 	bl	dd3ee <_ZN6StringaSEPKc>
                valid = true;
   d6ca2:	2201      	movs	r2, #1
                *cp = save2;
   d6ca4:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   d6ca8:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   d6cac:	782a      	ldrb	r2, [r5, #0]
   d6cae:	b36a      	cbz	r2, d6d0c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   d6cb0:	f897 a000 	ldrb.w	sl, [r7]
   d6cb4:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   d6cb8:	2a3f      	cmp	r2, #63	; 0x3f
   d6cba:	46b9      	mov	r9, r7
   d6cbc:	46bb      	mov	fp, r7
   d6cbe:	f107 0701 	add.w	r7, r7, #1
   d6cc2:	d9f5      	bls.n	d6cb0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   d6cc4:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   d6cc6:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   d6cca:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   d6cce:	4629      	mov	r1, r5
   d6cd0:	4638      	mov	r0, r7
   d6cd2:	f7ff fe35 	bl	d6940 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   d6cd6:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   d6cda:	f1ba 0f00 	cmp.w	sl, #0
   d6cde:	d015      	beq.n	d6d0c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   d6ce0:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   d6ce2:	f81b ab01 	ldrb.w	sl, [fp], #1
   d6ce6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   d6cea:	d8f9      	bhi.n	d6ce0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   d6cec:	2200      	movs	r2, #0
   d6cee:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   d6cf0:	4649      	mov	r1, r9
   d6cf2:	1d20      	adds	r0, r4, #4
   d6cf4:	f006 fb7b 	bl	dd3ee <_ZN6StringaSEPKc>
                        *cp = save2;
   d6cf8:	f885 a000 	strb.w	sl, [r5]
                        if (*cp) {
   d6cfc:	f104 0014 	add.w	r0, r4, #20
   d6d00:	f1ba 0f00 	cmp.w	sl, #0
   d6d04:	d006      	beq.n	d6d14 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   d6d06:	4629      	mov	r1, r5
   d6d08:	f7ff fe1a 	bl	d6940 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   d6d0c:	2501      	movs	r5, #1
   d6d0e:	e7a8      	b.n	d6c62 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   d6d10:	461d      	mov	r5, r3
   d6d12:	e7a6      	b.n	d6c62 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   d6d14:	4639      	mov	r1, r7
   d6d16:	f7ff fd27 	bl	d6768 <_ZN12LocalTimeHMSaSERKS_>
                            dstHMS.hour--;
   d6d1a:	7e23      	ldrb	r3, [r4, #24]
   d6d1c:	3b01      	subs	r3, #1
   d6d1e:	7623      	strb	r3, [r4, #24]
   d6d20:	e7f4      	b.n	d6d0c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   d6d22:	4640      	mov	r0, r8
   d6d24:	f7ff ff3c 	bl	d6ba0 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d6d28:	2502      	movs	r5, #2
   d6d2a:	e79a      	b.n	d6c62 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                standardStart.parse(token);
   d6d2c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6d30:	f7ff ff36 	bl	d6ba0 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d6d34:	2503      	movs	r5, #3
   d6d36:	e794      	b.n	d6c62 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
    if (dstStart.valid && !standardStart.valid) {
   d6d38:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   d6d3c:	b143      	cbz	r3, d6d50 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   d6d3e:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   d6d42:	b92a      	cbnz	r2, d6d50 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        dstStart.clear();
   d6d44:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6d48:	f7ff ff24 	bl	d6b94 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   d6d4c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    free(mutableCopy);
   d6d50:	4630      	mov	r0, r6
   d6d52:	f003 ff79 	bl	dac48 <free>
}
   d6d56:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   d6d5a:	b003      	add	sp, #12
   d6d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6d60:	000df791 	.word	0x000df791

000d6d64 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   d6d64:	b538      	push	{r3, r4, r5, lr}
   d6d66:	4b13      	ldr	r3, [pc, #76]	; (d6db4 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   d6d68:	4604      	mov	r4, r0
   d6d6a:	460d      	mov	r5, r1
   d6d6c:	f840 3b04 	str.w	r3, [r0], #4
   d6d70:	4911      	ldr	r1, [pc, #68]	; (d6db8 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d6d72:	f006 fade 	bl	dd332 <_ZN6StringC1EPKc>
   d6d76:	f104 0014 	add.w	r0, r4, #20
   d6d7a:	f7ff fdd9 	bl	d6930 <_ZN12LocalTimeHMSC1Ev>
   d6d7e:	490e      	ldr	r1, [pc, #56]	; (d6db8 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d6d80:	f104 001c 	add.w	r0, r4, #28
   d6d84:	f006 fad5 	bl	dd332 <_ZN6StringC1EPKc>
   d6d88:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d6d8c:	f7ff fdd0 	bl	d6930 <_ZN12LocalTimeHMSC1Ev>
   d6d90:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6d94:	f7ff fef0 	bl	d6b78 <_ZN15LocalTimeChangeC1Ev>
   d6d98:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6d9c:	f7ff feec 	bl	d6b78 <_ZN15LocalTimeChangeC1Ev>
   d6da0:	2300      	movs	r3, #0
   d6da2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   d6da6:	4629      	mov	r1, r5
   d6da8:	4620      	mov	r0, r4
   d6daa:	f7ff ff4f 	bl	d6c4c <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   d6dae:	4620      	mov	r0, r4
   d6db0:	bd38      	pop	{r3, r4, r5, pc}
   d6db2:	bf00      	nop
   d6db4:	000df7f4 	.word	0x000df7f4
   d6db8:	000dffd4 	.word	0x000dffd4

000d6dbc <_ZNK14LocalTimeValue3hmsEv>:
LocalTimeHMS LocalTimeValue::hms() const {
   d6dbc:	b508      	push	{r3, lr}
   d6dbe:	4603      	mov	r3, r0
    LocalTimeHMS result;
   d6dc0:	f7ff fdb6 	bl	d6930 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   d6dc4:	688a      	ldr	r2, [r1, #8]
   d6dc6:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   d6dc8:	684a      	ldr	r2, [r1, #4]
   d6dca:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   d6dcc:	680a      	ldr	r2, [r1, #0]
   d6dce:	719a      	strb	r2, [r3, #6]
}
   d6dd0:	4618      	mov	r0, r3
   d6dd2:	bd08      	pop	{r3, pc}

000d6dd4 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   d6dd4:	b513      	push	{r0, r1, r4, lr}
   d6dd6:	4b07      	ldr	r3, [pc, #28]	; (d6df4 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   d6dd8:	6003      	str	r3, [r0, #0]
   d6dda:	2300      	movs	r3, #0
   d6ddc:	4604      	mov	r4, r0
   d6dde:	6043      	str	r3, [r0, #4]
    *this = value.hms();
   d6de0:	4668      	mov	r0, sp
   d6de2:	f7ff ffeb 	bl	d6dbc <_ZNK14LocalTimeValue3hmsEv>
   d6de6:	4669      	mov	r1, sp
   d6de8:	4620      	mov	r0, r4
   d6dea:	f7ff fcbd 	bl	d6768 <_ZN12LocalTimeHMSaSERKS_>
}
   d6dee:	4620      	mov	r0, r4
   d6df0:	b002      	add	sp, #8
   d6df2:	bd10      	pop	{r4, pc}
   d6df4:	000df7d4 	.word	0x000df7d4

000d6df8 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>:
    if (!hms.ignore) {
   d6df8:	f991 3007 	ldrsb.w	r3, [r1, #7]
   d6dfc:	b943      	cbnz	r3, d6e10 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS+0x18>
        tm_hour = hms.hour;
   d6dfe:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d6e02:	6083      	str	r3, [r0, #8]
        tm_min = hms.minute;
   d6e04:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d6e08:	6043      	str	r3, [r0, #4]
        tm_sec = hms.second;
   d6e0a:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d6e0e:	6003      	str	r3, [r0, #0]
}
   d6e10:	4770      	bx	lr

000d6e12 <_ZNK14LocalTimeValue3ymdEv>:
LocalTimeYMD LocalTimeValue::ymd() const {
   d6e12:	b507      	push	{r0, r1, r2, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d6e14:	2300      	movs	r3, #0
   d6e16:	4601      	mov	r1, r0
    result.fromTimeInfo(this);
   d6e18:	a801      	add	r0, sp, #4
   d6e1a:	9301      	str	r3, [sp, #4]
   d6e1c:	f7ff fd13 	bl	d6846 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d6e20:	9801      	ldr	r0, [sp, #4]
   d6e22:	b003      	add	sp, #12
   d6e24:	f85d fb04 	ldr.w	pc, [sp], #4

000d6e28 <_ZN22LocalTimePosixTimezoneC1ERKS_>:
class LocalTimePosixTimezone {
   d6e28:	4b19      	ldr	r3, [pc, #100]	; (d6e90 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x68>)
   d6e2a:	b570      	push	{r4, r5, r6, lr}
   d6e2c:	4604      	mov	r4, r0
   d6e2e:	460d      	mov	r5, r1
   d6e30:	f840 3b04 	str.w	r3, [r0], #4
   d6e34:	3104      	adds	r1, #4
   d6e36:	f006 fac7 	bl	dd3c8 <_ZN6StringC1ERKS_>
   d6e3a:	f105 0114 	add.w	r1, r5, #20
   d6e3e:	f104 0014 	add.w	r0, r4, #20
   d6e42:	f7ff fc89 	bl	d6758 <_ZN12LocalTimeHMSC1ERKS_>
   d6e46:	f105 011c 	add.w	r1, r5, #28
   d6e4a:	f104 001c 	add.w	r0, r4, #28
   d6e4e:	f006 fabb 	bl	dd3c8 <_ZN6StringC1ERKS_>
   d6e52:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d6e56:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d6e5a:	f7ff fc7d 	bl	d6758 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeChange {
   d6e5e:	4e0d      	ldr	r6, [pc, #52]	; (d6e94 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x6c>)
   d6e60:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6e62:	63a3      	str	r3, [r4, #56]	; 0x38
   d6e64:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d6e68:	6366      	str	r6, [r4, #52]	; 0x34
   d6e6a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6e6e:	f7ff fc73 	bl	d6758 <_ZN12LocalTimeHMSC1ERKS_>
   d6e72:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d6e74:	64a3      	str	r3, [r4, #72]	; 0x48
   d6e76:	6466      	str	r6, [r4, #68]	; 0x44
   d6e78:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d6e7c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d6e80:	f7ff fc6a 	bl	d6758 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimePosixTimezone {
   d6e84:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d6e88:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d6e8c:	4620      	mov	r0, r4
   d6e8e:	bd70      	pop	{r4, r5, r6, pc}
   d6e90:	000df7f4 	.word	0x000df7f4
   d6e94:	000df7e4 	.word	0x000df7e4

000d6e98 <_ZN16LocalTimeConvertC1ERKS_>:
class LocalTimeConvert {
   d6e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e9a:	460c      	mov	r4, r1
   d6e9c:	f851 3b04 	ldr.w	r3, [r1], #4
   d6ea0:	4607      	mov	r7, r0
   d6ea2:	f840 3b04 	str.w	r3, [r0], #4
   d6ea6:	f7ff ffbf 	bl	d6e28 <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d6eaa:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d6eae:	f104 0668 	add.w	r6, r4, #104	; 0x68
   d6eb2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   d6eb6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6eb8:	f107 0568 	add.w	r5, r7, #104	; 0x68
   d6ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6ebe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6ec2:	6833      	ldr	r3, [r6, #0]
   d6ec4:	602b      	str	r3, [r5, #0]
   d6ec6:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
   d6eca:	f104 0698 	add.w	r6, r4, #152	; 0x98
   d6ece:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
   d6ed2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6ed4:	f107 0598 	add.w	r5, r7, #152	; 0x98
   d6ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6eda:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6ede:	6833      	ldr	r3, [r6, #0]
   d6ee0:	602b      	str	r3, [r5, #0]
   d6ee2:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	; 0xc0
   d6ee6:	34c8      	adds	r4, #200	; 0xc8
   d6ee8:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
   d6eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6eee:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
   d6ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6ef8:	6823      	ldr	r3, [r4, #0]
   d6efa:	602b      	str	r3, [r5, #0]
   d6efc:	4638      	mov	r0, r7
   d6efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f00 <_ZN21LocalTimeScheduleItemD1Ev>:
class LocalTimeScheduleItem {
   d6f00:	b510      	push	{r4, lr}
   d6f02:	4604      	mov	r4, r0
   d6f04:	3038      	adds	r0, #56	; 0x38
   d6f06:	f006 f9c9 	bl	dd29c <_ZN6StringD1Ev>
	_M_deallocate(_M_impl._M_start,
   d6f0a:	6920      	ldr	r0, [r4, #16]
   d6f0c:	f7ff fbec 	bl	d66e8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d6f10:	6860      	ldr	r0, [r4, #4]
   d6f12:	f7ff fbe9 	bl	d66e8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d6f16:	4620      	mov	r0, r4
   d6f18:	bd10      	pop	{r4, pc}

000d6f1a <_ZN16LocalTimeConvert7timeStrEv>:
String LocalTimeConvert::timeStr() {
   d6f1a:	b510      	push	{r4, lr}
   d6f1c:	4604      	mov	r4, r0
   d6f1e:	b088      	sub	sp, #32
   d6f20:	4608      	mov	r0, r1
    asctime_r(&localTimeValue, ascstr);
   d6f22:	3068      	adds	r0, #104	; 0x68
   d6f24:	a901      	add	r1, sp, #4
   d6f26:	f007 fc31 	bl	de78c <asctime_r>
    int len = strlen(ascstr);
   d6f2a:	a801      	add	r0, sp, #4
   d6f2c:	f007 fd3b 	bl	de9a6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d6f30:	ab08      	add	r3, sp, #32
   d6f32:	4418      	add	r0, r3
   d6f34:	2300      	movs	r3, #0
   d6f36:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   d6f3a:	a901      	add	r1, sp, #4
   d6f3c:	4620      	mov	r0, r4
   d6f3e:	f006 f9f8 	bl	dd332 <_ZN6StringC1EPKc>
}
   d6f42:	4620      	mov	r0, r4
   d6f44:	b008      	add	sp, #32
   d6f46:	bd10      	pop	{r4, pc}

000d6f48 <_ZNK16LocalTimeConvert8zoneNameEv>:
String LocalTimeConvert::zoneName() const { 
   d6f48:	b538      	push	{r3, r4, r5, lr}
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   d6f4a:	f891 3058 	ldrb.w	r3, [r1, #88]	; 0x58
   d6f4e:	4605      	mov	r5, r0
   d6f50:	460c      	mov	r4, r1
   d6f52:	b13b      	cbz	r3, d6f64 <_ZNK16LocalTimeConvert8zoneNameEv+0x1c>
   d6f54:	f991 303f 	ldrsb.w	r3, [r1, #63]	; 0x3f
   d6f58:	b953      	cbnz	r3, d6f70 <_ZNK16LocalTimeConvert8zoneNameEv+0x28>
   d6f5a:	f101 0030 	add.w	r0, r1, #48	; 0x30
   d6f5e:	f7ff fd57 	bl	d6a10 <_ZNK12LocalTimeHMS9toSecondsEv>
   d6f62:	b928      	cbnz	r0, d6f70 <_ZNK16LocalTimeConvert8zoneNameEv+0x28>
        return "Z";
   d6f64:	4909      	ldr	r1, [pc, #36]	; (d6f8c <_ZNK16LocalTimeConvert8zoneNameEv+0x44>)
   d6f66:	4628      	mov	r0, r5
   d6f68:	f006 f9e3 	bl	dd332 <_ZN6StringC1EPKc>
};
   d6f6c:	4628      	mov	r0, r5
   d6f6e:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   d6f70:	6820      	ldr	r0, [r4, #0]
   d6f72:	f7ff fbaf 	bl	d66d4 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d6f76:	b128      	cbz	r0, d6f84 <_ZNK16LocalTimeConvert8zoneNameEv+0x3c>
        return config.dstName;
   d6f78:	f104 0108 	add.w	r1, r4, #8
        return config.standardName;
   d6f7c:	4628      	mov	r0, r5
   d6f7e:	f006 fa23 	bl	dd3c8 <_ZN6StringC1ERKS_>
   d6f82:	e7f3      	b.n	d6f6c <_ZNK16LocalTimeConvert8zoneNameEv+0x24>
   d6f84:	f104 0120 	add.w	r1, r4, #32
   d6f88:	e7f8      	b.n	d6f7c <_ZNK16LocalTimeConvert8zoneNameEv+0x34>
   d6f8a:	bf00      	nop
   d6f8c:	000df793 	.word	0x000df793

000d6f90 <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   d6f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6f94:	4680      	mov	r8, r0
   d6f96:	b0a9      	sub	sp, #164	; 0xa4
   d6f98:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d6f9a:	4615      	mov	r5, r2
   d6f9c:	b12a      	cbz	r2, d6faa <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   d6f9e:	4b4b      	ldr	r3, [pc, #300]	; (d70cc <_ZN16LocalTimeConvert6formatEPKc+0x13c>)
   d6fa0:	4610      	mov	r0, r2
   d6fa2:	6819      	ldr	r1, [r3, #0]
   d6fa4:	f007 fccf 	bl	de946 <strcmp>
   d6fa8:	b938      	cbnz	r0, d6fba <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   d6faa:	4621      	mov	r1, r4
   d6fac:	4640      	mov	r0, r8
   d6fae:	f7ff ffb4 	bl	d6f1a <_ZN16LocalTimeConvert7timeStrEv>
}
   d6fb2:	4640      	mov	r0, r8
   d6fb4:	b029      	add	sp, #164	; 0xa4
   d6fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d6fba:	4629      	mov	r1, r5
   d6fbc:	223f      	movs	r2, #63	; 0x3f
   d6fbe:	a818      	add	r0, sp, #96	; 0x60
   d6fc0:	f007 fd0b 	bl	de9da <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d6fc4:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d6fc6:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d6fc8:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d6fcc:	f007 fceb 	bl	de9a6 <strlen>
    String zoneNameStr = zoneName();
   d6fd0:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d6fd2:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   d6fd4:	a803      	add	r0, sp, #12
   d6fd6:	f7ff ffb7 	bl	d6f48 <_ZNK16LocalTimeConvert8zoneNameEv>
   d6fda:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   d6fde:	b13b      	cbz	r3, d6ff0 <_ZN16LocalTimeConvert6formatEPKc+0x60>
   d6fe0:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d6fe4:	bb83      	cbnz	r3, d7048 <_ZN16LocalTimeConvert6formatEPKc+0xb8>
   d6fe6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d6fea:	f7ff fd11 	bl	d6a10 <_ZNK12LocalTimeHMS9toSecondsEv>
   d6fee:	bb58      	cbnz	r0, d7048 <_ZN16LocalTimeConvert6formatEPKc+0xb8>
        strcpy(time_zone_str, "Z");
   d6ff0:	4937      	ldr	r1, [pc, #220]	; (d70d0 <_ZN16LocalTimeConvert6formatEPKc+0x140>)
   d6ff2:	a807      	add	r0, sp, #28
   d6ff4:	f007 fcb1 	bl	de95a <strcpy>
   d6ff8:	af18      	add	r7, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   d6ffa:	2600      	movs	r6, #0
    for (size_t i=0; i<len-1; i++)
   d6ffc:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   d7000:	45b3      	cmp	fp, r6
   d7002:	d94e      	bls.n	d70a2 <_ZN16LocalTimeConvert6formatEPKc+0x112>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d7004:	46ba      	mov	sl, r7
   d7006:	f106 0901 	add.w	r9, r6, #1
   d700a:	f81a 3b01 	ldrb.w	r3, [sl], #1
   d700e:	2b25      	cmp	r3, #37	; 0x25
   d7010:	d117      	bne.n	d7042 <_ZN16LocalTimeConvert6formatEPKc+0xb2>
   d7012:	787b      	ldrb	r3, [r7, #1]
   d7014:	2b7a      	cmp	r3, #122	; 0x7a
   d7016:	d136      	bne.n	d7086 <_ZN16LocalTimeConvert6formatEPKc+0xf6>
            size_t tzlen = strlen(time_zone_str);
   d7018:	a807      	add	r0, sp, #28
   d701a:	f007 fcc4 	bl	de9a6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d701e:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   d7020:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d7022:	1830      	adds	r0, r6, r0
   d7024:	ebab 0206 	sub.w	r2, fp, r6
   d7028:	1cb9      	adds	r1, r7, #2
   d702a:	4418      	add	r0, r3
   d702c:	f007 fbec 	bl	de808 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d7030:	462a      	mov	r2, r5
   d7032:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   d7034:	4638      	mov	r0, r7
   d7036:	f007 fbe7 	bl	de808 <memcpy>
            len = strlen(format_str);
   d703a:	a818      	add	r0, sp, #96	; 0x60
   d703c:	f007 fcb3 	bl	de9a6 <strlen>
   d7040:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   d7042:	4657      	mov	r7, sl
   d7044:	464e      	mov	r6, r9
   d7046:	e7d9      	b.n	d6ffc <_ZN16LocalTimeConvert6formatEPKc+0x6c>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   d7048:	6820      	ldr	r0, [r4, #0]
   d704a:	f7ff fb43 	bl	d66d4 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d704e:	b1b8      	cbz	r0, d7080 <_ZN16LocalTimeConvert6formatEPKc+0xf0>
   d7050:	f104 0018 	add.w	r0, r4, #24
   d7054:	f7ff fcdc 	bl	d6a10 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   d7058:	213c      	movs	r1, #60	; 0x3c
   d705a:	fb90 f3f1 	sdiv	r3, r0, r1
   d705e:	2b00      	cmp	r3, #0
   d7060:	bfb8      	it	lt
   d7062:	425b      	neglt	r3, r3
   d7064:	fbb3 f2f1 	udiv	r2, r3, r1
   d7068:	fb01 3312 	mls	r3, r1, r2, r3
   d706c:	9300      	str	r3, [sp, #0]
   d706e:	4a19      	ldr	r2, [pc, #100]	; (d70d4 <_ZN16LocalTimeConvert6formatEPKc+0x144>)
   d7070:	4b19      	ldr	r3, [pc, #100]	; (d70d8 <_ZN16LocalTimeConvert6formatEPKc+0x148>)
   d7072:	fb90 f3f3 	sdiv	r3, r0, r3
   d7076:	2110      	movs	r1, #16
   d7078:	a807      	add	r0, sp, #28
   d707a:	f003 fe05 	bl	dac88 <snprintf>
   d707e:	e7bb      	b.n	d6ff8 <_ZN16LocalTimeConvert6formatEPKc+0x68>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   d7080:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d7084:	e7e6      	b.n	d7054 <_ZN16LocalTimeConvert6formatEPKc+0xc4>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   d7086:	2b5a      	cmp	r3, #90	; 0x5a
   d7088:	d1db      	bne.n	d7042 <_ZN16LocalTimeConvert6formatEPKc+0xb2>
            size_t tzlen = zoneNameStr.length();
   d708a:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d708c:	ab18      	add	r3, sp, #96	; 0x60
   d708e:	1970      	adds	r0, r6, r5
   d7090:	ebab 0206 	sub.w	r2, fp, r6
   d7094:	1cb9      	adds	r1, r7, #2
   d7096:	4418      	add	r0, r3
   d7098:	f007 fbb6 	bl	de808 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   d709c:	9903      	ldr	r1, [sp, #12]
   d709e:	462a      	mov	r2, r5
   d70a0:	e7c8      	b.n	d7034 <_ZN16LocalTimeConvert6formatEPKc+0xa4>
    char buf[50] = {};
   d70a2:	2100      	movs	r1, #0
   d70a4:	222e      	movs	r2, #46	; 0x2e
   d70a6:	a80c      	add	r0, sp, #48	; 0x30
   d70a8:	910b      	str	r1, [sp, #44]	; 0x2c
   d70aa:	f007 fbd5 	bl	de858 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   d70ae:	f104 0368 	add.w	r3, r4, #104	; 0x68
   d70b2:	aa18      	add	r2, sp, #96	; 0x60
   d70b4:	2132      	movs	r1, #50	; 0x32
   d70b6:	a80b      	add	r0, sp, #44	; 0x2c
   d70b8:	f003 fe16 	bl	dace8 <strftime>
    return String(buf);    
   d70bc:	a90b      	add	r1, sp, #44	; 0x2c
   d70be:	4640      	mov	r0, r8
   d70c0:	f006 f937 	bl	dd332 <_ZN6StringC1EPKc>
    String zoneNameStr = zoneName();
   d70c4:	a803      	add	r0, sp, #12
   d70c6:	f006 f8e9 	bl	dd29c <_ZN6StringD1Ev>
   d70ca:	e772      	b.n	d6fb2 <_ZN16LocalTimeConvert6formatEPKc+0x22>
   d70cc:	2003dc4c 	.word	0x2003dc4c
   d70d0:	000df793 	.word	0x000df793
   d70d4:	000df795 	.word	0x000df795
   d70d8:	fffff1f0 	.word	0xfffff1f0

000d70dc <_ZN9LocalTime8instanceEv>:
LocalTime &LocalTime::instance() {
   d70dc:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d70de:	4d09      	ldr	r5, [pc, #36]	; (d7104 <_ZN9LocalTime8instanceEv+0x28>)
   d70e0:	682b      	ldr	r3, [r5, #0]
   d70e2:	b963      	cbnz	r3, d70fe <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   d70e4:	2060      	movs	r0, #96	; 0x60
   d70e6:	f7fc ffd6 	bl	d4096 <_Znwj>
   d70ea:	4604      	mov	r4, r0
   d70ec:	b130      	cbz	r0, d70fc <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   d70ee:	4b06      	ldr	r3, [pc, #24]	; (d7108 <_ZN9LocalTime8instanceEv+0x2c>)
   d70f0:	f840 3b04 	str.w	r3, [r0], #4
   d70f4:	f7ff fd84 	bl	d6c00 <_ZN22LocalTimePosixTimezoneC1Ev>
   d70f8:	2364      	movs	r3, #100	; 0x64
   d70fa:	65e3      	str	r3, [r4, #92]	; 0x5c
   d70fc:	602c      	str	r4, [r5, #0]
}
   d70fe:	6828      	ldr	r0, [r5, #0]
   d7100:	bd38      	pop	{r3, r4, r5, pc}
   d7102:	bf00      	nop
   d7104:	2003e25c 	.word	0x2003e25c
   d7108:	000df7c4 	.word	0x000df7c4

000d710c <_ZN9LocalTime8tmToTimeEP2tm>:
    return mktime(pTimeInfo);
   d710c:	f003 be04 	b.w	dad18 <mktime>

000d7110 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   d7110:	3901      	subs	r1, #1
   d7112:	290b      	cmp	r1, #11
   d7114:	d815      	bhi.n	d7142 <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   d7116:	e8df f001 	tbb	[pc, r1]
   d711a:	0816      	.short	0x0816
   d711c:	06160616 	.word	0x06160616
   d7120:	16061616 	.word	0x16061616
   d7124:	1606      	.short	0x1606
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   d7126:	201e      	movs	r0, #30
   d7128:	4770      	bx	lr
            if ((year % 4) == 0) {
   d712a:	0783      	lsls	r3, r0, #30
   d712c:	d10d      	bne.n	d714a <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   d712e:	2264      	movs	r2, #100	; 0x64
   d7130:	fb90 f3f2 	sdiv	r3, r0, r2
   d7134:	fb02 0013 	mls	r0, r2, r3, r0
   d7138:	2800      	cmp	r0, #0
                    return 29;
   d713a:	bf0c      	ite	eq
   d713c:	201c      	moveq	r0, #28
   d713e:	201d      	movne	r0, #29
   d7140:	4770      	bx	lr
    return 0;
   d7142:	2000      	movs	r0, #0
   d7144:	4770      	bx	lr
            return 31;
   d7146:	201f      	movs	r0, #31
   d7148:	4770      	bx	lr
                return 28;
   d714a:	201c      	movs	r0, #28
}
   d714c:	4770      	bx	lr

000d714e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d714e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   d7150:	2301      	movs	r3, #1
   d7152:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   d7154:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d7158:	3b01      	subs	r3, #1
   d715a:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d715c:	2300      	movs	r3, #0
   d715e:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d7162:	4606      	mov	r6, r0
   d7164:	460c      	mov	r4, r1
   d7166:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d7168:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   d716a:	4620      	mov	r0, r4
   d716c:	f7ff ffce 	bl	d710c <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   d7170:	f996 3006 	ldrsb.w	r3, [r6, #6]
   d7174:	69a2      	ldr	r2, [r4, #24]
   d7176:	429a      	cmp	r2, r3
   d7178:	d003      	beq.n	d7182 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   d717a:	68e3      	ldr	r3, [r4, #12]
   d717c:	3301      	adds	r3, #1
   d717e:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   d7180:	e7f3      	b.n	d716a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   d7182:	f996 5005 	ldrsb.w	r5, [r6, #5]
   d7186:	2d01      	cmp	r5, #1
   d7188:	d013      	beq.n	d71b2 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   d718a:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d718c:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   d718e:	3d01      	subs	r5, #1
   d7190:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   d7194:	441d      	add	r5, r3
   d7196:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d7198:	f996 1004 	ldrsb.w	r1, [r6, #4]
   d719c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d71a0:	f7ff ffb6 	bl	d7110 <_ZN9LocalTime14lastDayOfMonthEii>
   d71a4:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   d71a6:	bfc4      	itt	gt
   d71a8:	3d07      	subgt	r5, #7
   d71aa:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   d71ac:	4620      	mov	r0, r4
   d71ae:	f7ff ffad 	bl	d710c <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   d71b2:	4621      	mov	r1, r4
   d71b4:	f106 0008 	add.w	r0, r6, #8
   d71b8:	f7ff fc46 	bl	d6a48 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   d71bc:	4638      	mov	r0, r7
   d71be:	f7ff fc50 	bl	d6a62 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   d71c2:	4620      	mov	r0, r4
}
   d71c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   d71c8:	f003 bda6 	b.w	dad18 <mktime>

000d71cc <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   d71cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   d71ce:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   d71d2:	b085      	sub	sp, #20
   d71d4:	4604      	mov	r4, r0
    if (!config.isValid()) {
   d71d6:	b92b      	cbnz	r3, d71e4 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   d71d8:	f7ff ff80 	bl	d70dc <_ZN9LocalTime8instanceEv>
   d71dc:	1d01      	adds	r1, r0, #4
   d71de:	1d20      	adds	r0, r4, #4
   d71e0:	f7ff fae6 	bl	d67b0 <_ZN22LocalTimePosixTimezoneaSERKS_>
    if (config.hasDST()) {
   d71e4:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d71e8:	2b00      	cmp	r3, #0
   d71ea:	d069      	beq.n	d72c0 <_ZN16LocalTimeConvert7convertEv+0xf4>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   d71ec:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d71f0:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   d71f4:	4639      	mov	r1, r7
        standardStartTimeInfo = dstStartTimeInfo;
   d71f6:	463e      	mov	r6, r7
    localtime_r(&time, pTimeInfo);
   d71f8:	a802      	add	r0, sp, #8
   d71fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d71fe:	f003 fd7b 	bl	dacf8 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   d7202:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7204:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   d7208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d720a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d720c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d720e:	6833      	ldr	r3, [r6, #0]
   d7210:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   d7212:	f104 0130 	add.w	r1, r4, #48	; 0x30
   d7216:	a802      	add	r0, sp, #8
   d7218:	f7ff fa9e 	bl	d6758 <_ZN12LocalTimeHMSC1ERKS_>
   d721c:	aa02      	add	r2, sp, #8
   d721e:	4639      	mov	r1, r7
   d7220:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d7224:	f7ff ff93 	bl	d714e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   d7228:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d722c:	f104 0118 	add.w	r1, r4, #24
   d7230:	a802      	add	r0, sp, #8
   d7232:	f7ff fa91 	bl	d6758 <_ZN12LocalTimeHMSC1ERKS_>
   d7236:	aa02      	add	r2, sp, #8
   d7238:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   d723c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d7240:	f7ff ff85 	bl	d714e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   d7244:	e9d4 6724 	ldrd	r6, r7, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d7248:	460b      	mov	r3, r1
        if (dstStart < standardStart) {
   d724a:	4286      	cmp	r6, r0
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d724c:	4602      	mov	r2, r0
        if (dstStart < standardStart) {
   d724e:	eb77 0103 	sbcs.w	r1, r7, r3
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d7252:	e9c4 2330 	strd	r2, r3, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   d7256:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
   d725a:	da24      	bge.n	d72a6 <_ZN16LocalTimeConvert7convertEv+0xda>
            if (time < dstStart) {
   d725c:	42b0      	cmp	r0, r6
   d725e:	eb71 0507 	sbcs.w	r5, r1, r7
   d7262:	da19      	bge.n	d7298 <_ZN16LocalTimeConvert7convertEv+0xcc>
                position = Position::BEFORE_DST;
   d7264:	2300      	movs	r3, #0
        position = Position::NO_DST;
   d7266:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   d7268:	6820      	ldr	r0, [r4, #0]
   d726a:	f7ff fa33 	bl	d66d4 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d726e:	f104 0168 	add.w	r1, r4, #104	; 0x68
   d7272:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
   d7276:	9101      	str	r1, [sp, #4]
   d7278:	bb20      	cbnz	r0, d72c4 <_ZN16LocalTimeConvert7convertEv+0xf8>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   d727a:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d727e:	f7ff fbc7 	bl	d6a10 <_ZNK12LocalTimeHMS9toSecondsEv>
   d7282:	1a36      	subs	r6, r6, r0
   d7284:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
    localtime_r(&time, pTimeInfo);
   d7288:	9901      	ldr	r1, [sp, #4]
   d728a:	a802      	add	r0, sp, #8
   d728c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7290:	f003 fd32 	bl	dacf8 <localtime_r>
}
   d7294:	b005      	add	sp, #20
   d7296:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   d7298:	4290      	cmp	r0, r2
   d729a:	eb71 0303 	sbcs.w	r3, r1, r3
                position = Position::IN_DST;
   d729e:	bfb4      	ite	lt
   d72a0:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   d72a2:	2302      	movge	r3, #2
   d72a4:	e7df      	b.n	d7266 <_ZN16LocalTimeConvert7convertEv+0x9a>
            if (time < standardStart) {
   d72a6:	4290      	cmp	r0, r2
   d72a8:	eb71 0303 	sbcs.w	r3, r1, r3
   d72ac:	da01      	bge.n	d72b2 <_ZN16LocalTimeConvert7convertEv+0xe6>
                position = Position::BEFORE_STANDARD;
   d72ae:	2303      	movs	r3, #3
   d72b0:	e7d9      	b.n	d7266 <_ZN16LocalTimeConvert7convertEv+0x9a>
            else if (time < dstStart) {
   d72b2:	42b0      	cmp	r0, r6
   d72b4:	eb71 0307 	sbcs.w	r3, r1, r7
                position = Position::IN_STANDARD;
   d72b8:	bfb4      	ite	lt
   d72ba:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   d72bc:	2305      	movge	r3, #5
   d72be:	e7d2      	b.n	d7266 <_ZN16LocalTimeConvert7convertEv+0x9a>
        position = Position::NO_DST;
   d72c0:	2306      	movs	r3, #6
   d72c2:	e7d0      	b.n	d7266 <_ZN16LocalTimeConvert7convertEv+0x9a>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d72c4:	f104 0018 	add.w	r0, r4, #24
   d72c8:	e7d9      	b.n	d727e <_ZN16LocalTimeConvert7convertEv+0xb2>

000d72ca <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>:
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d72ca:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    struct tm mutableTimeInfo = *this;
   d72ce:	4604      	mov	r4, r0
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d72d0:	460e      	mov	r6, r1
    struct tm mutableTimeInfo = *this;
   d72d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d72d4:	b0dc      	sub	sp, #368	; 0x170
    struct tm mutableTimeInfo = *this;
   d72d6:	ad01      	add	r5, sp, #4
   d72d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d72da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d72dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d72de:	6823      	ldr	r3, [r4, #0]
   d72e0:	602b      	str	r3, [r5, #0]
    return mktime(pTimeInfo);
   d72e2:	a801      	add	r0, sp, #4
   d72e4:	f003 fd18 	bl	dad18 <mktime>
   d72e8:	4604      	mov	r4, r0
    standardTime += config.standardHMS.toSeconds();
   d72ea:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    return mktime(pTimeInfo);
   d72ee:	460d      	mov	r5, r1
    standardTime += config.standardHMS.toSeconds();
   d72f0:	f7ff fb8e 	bl	d6a10 <_ZNK12LocalTimeHMS9toSecondsEv>
    if (config.hasDST()) {
   d72f4:	f996 303b 	ldrsb.w	r3, [r6, #59]	; 0x3b
    standardTime += config.standardHMS.toSeconds();
   d72f8:	eb14 0800 	adds.w	r8, r4, r0
   d72fc:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
    if (config.hasDST()) {
   d7300:	b31b      	cbz	r3, d734a <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x80>
class LocalTimeConvert {
   d7302:	2306      	movs	r3, #6
   d7304:	a821      	add	r0, sp, #132	; 0x84
   d7306:	9320      	str	r3, [sp, #128]	; 0x80
   d7308:	f7ff fc7a 	bl	d6c00 <_ZN22LocalTimePosixTimezoneC1Ev>
        convert.withConfig(config).withTime(standardTime).convert();
   d730c:	4631      	mov	r1, r6
   d730e:	a80a      	add	r0, sp, #40	; 0x28
   d7310:	f7ff fd8a 	bl	d6e28 <_ZN22LocalTimePosixTimezoneC1ERKS_>
    LocalTimeConvert &withConfig(LocalTimePosixTimezone config) { this->config = config; return *this; };
   d7314:	a90a      	add	r1, sp, #40	; 0x28
   d7316:	a821      	add	r0, sp, #132	; 0x84
   d7318:	f7ff fa4a 	bl	d67b0 <_ZN22LocalTimePosixTimezoneaSERKS_>
   d731c:	a820      	add	r0, sp, #128	; 0x80
    LocalTimeConvert &withTime(time_t time) { this->time = time; return *this; };
   d731e:	e9cd 8938 	strd	r8, r9, [sp, #224]	; 0xe0
   d7322:	f7ff ff53 	bl	d71cc <_ZN16LocalTimeConvert7convertEv>
   d7326:	a80a      	add	r0, sp, #40	; 0x28
   d7328:	f7ff f9a6 	bl	d6678 <_ZN22LocalTimePosixTimezoneD1Ev>
        if (convert.isDST()) {
   d732c:	9820      	ldr	r0, [sp, #128]	; 0x80
   d732e:	f7ff f9d1 	bl	d66d4 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d7332:	b138      	cbz	r0, d7344 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x7a>
            dstTime += config.dstHMS.toSeconds();
   d7334:	f106 0014 	add.w	r0, r6, #20
   d7338:	f7ff fb6a 	bl	d6a10 <_ZNK12LocalTimeHMS9toSecondsEv>
   d733c:	eb14 0800 	adds.w	r8, r4, r0
   d7340:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
class LocalTimeConvert {
   d7344:	a821      	add	r0, sp, #132	; 0x84
   d7346:	f7ff f997 	bl	d6678 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d734a:	4640      	mov	r0, r8
   d734c:	4649      	mov	r1, r9
   d734e:	b05c      	add	sp, #368	; 0x170
   d7350:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

000d7354 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>:
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d7354:	b530      	push	{r4, r5, lr}
    if (!hms.ignore) {
   d7356:	f991 3007 	ldrsb.w	r3, [r1, #7]
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d735a:	b097      	sub	sp, #92	; 0x5c
   d735c:	4604      	mov	r4, r0
    if (!hms.ignore) {
   d735e:	b9c3      	cbnz	r3, d7392 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS+0x3e>
        localTimeValue.setHMS(hms);
   d7360:	f100 0568 	add.w	r5, r0, #104	; 0x68
   d7364:	4668      	mov	r0, sp
   d7366:	f7ff f9f7 	bl	d6758 <_ZN12LocalTimeHMSC1ERKS_>
   d736a:	4669      	mov	r1, sp
   d736c:	4628      	mov	r0, r5
   d736e:	f7ff fd43 	bl	d6df8 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>
        time = localTimeValue.toUTC(config);
   d7372:	1d21      	adds	r1, r4, #4
   d7374:	4668      	mov	r0, sp
   d7376:	f7ff fd57 	bl	d6e28 <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d737a:	4669      	mov	r1, sp
   d737c:	4628      	mov	r0, r5
   d737e:	f7ff ffa4 	bl	d72ca <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>
   d7382:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   d7386:	4668      	mov	r0, sp
   d7388:	f7ff f976 	bl	d6678 <_ZN22LocalTimePosixTimezoneD1Ev>
        convert();
   d738c:	4620      	mov	r0, r4
   d738e:	f7ff ff1d 	bl	d71cc <_ZN16LocalTimeConvert7convertEv>
}
   d7392:	b017      	add	sp, #92	; 0x5c
   d7394:	bd30      	pop	{r4, r5, pc}
	...

000d7398 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>:
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d7398:	b530      	push	{r4, r5, lr}
    time += 86400;
   d739a:	e9d0 3218 	ldrd	r3, r2, [r0, #96]	; 0x60
   d739e:	4d0b      	ldr	r5, [pc, #44]	; (d73cc <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS+0x34>)
   d73a0:	195b      	adds	r3, r3, r5
   d73a2:	f04f 0500 	mov.w	r5, #0
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d73a6:	b085      	sub	sp, #20
    time += 86400;
   d73a8:	eb45 0202 	adc.w	r2, r5, r2
   d73ac:	e9c0 3218 	strd	r3, r2, [r0, #96]	; 0x60
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d73b0:	4604      	mov	r4, r0
   d73b2:	9101      	str	r1, [sp, #4]
    convert();
   d73b4:	f7ff ff0a 	bl	d71cc <_ZN16LocalTimeConvert7convertEv>
    atLocalTime(hms);
   d73b8:	9901      	ldr	r1, [sp, #4]
   d73ba:	a802      	add	r0, sp, #8
   d73bc:	f7ff f9cc 	bl	d6758 <_ZN12LocalTimeHMSC1ERKS_>
   d73c0:	a902      	add	r1, sp, #8
   d73c2:	4620      	mov	r0, r4
   d73c4:	f7ff ffc6 	bl	d7354 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
}
   d73c8:	b005      	add	sp, #20
   d73ca:	bd30      	pop	{r4, r5, pc}
   d73cc:	00015180 	.word	0x00015180

000d73d0 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>:

// [static]
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d73d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d73d4:	b08a      	sub	sp, #40	; 0x28
   d73d6:	4617      	mov	r7, r2
   d73d8:	4606      	mov	r6, r0
   d73da:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d73dc:	2224      	movs	r2, #36	; 0x24
   d73de:	2100      	movs	r1, #0
   d73e0:	a801      	add	r0, sp, #4
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d73e2:	461c      	mov	r4, r3
    struct tm timeInfo = {0};
   d73e4:	f007 fa38 	bl	de858 <memset>

    if (dayOfWeek < 0 || dayOfWeek >= 7) {
   d73e8:	2f06      	cmp	r7, #6
   d73ea:	d829      	bhi.n	d7440 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        // Invalid values of dayOfWeek can cause infinite loop below
        return 0;
    }

    int lastDay = lastDayOfMonth(year, month);
   d73ec:	4629      	mov	r1, r5
   d73ee:	4630      	mov	r0, r6
   d73f0:	f7ff fe8e 	bl	d7110 <_ZN9LocalTime14lastDayOfMonthEii>

    if (ordinal > 0) {
   d73f4:	2c00      	cmp	r4, #0
    int lastDay = lastDayOfMonth(year, month);
   d73f6:	4680      	mov	r8, r0
    if (ordinal > 0) {
   d73f8:	dd24      	ble.n	d7444 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x74>
        timeInfo.tm_year = year - 1900;
   d73fa:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
        timeInfo.tm_mon = month - 1;
   d73fe:	3d01      	subs	r5, #1
        timeInfo.tm_year = year - 1900;
   d7400:	9606      	str	r6, [sp, #24]
        timeInfo.tm_mon = month - 1;
   d7402:	9505      	str	r5, [sp, #20]
        timeInfo.tm_mday = 1;
   d7404:	2301      	movs	r3, #1
        tmToTime(&timeInfo);
   d7406:	a801      	add	r0, sp, #4
        timeInfo.tm_mday = 1;
   d7408:	9304      	str	r3, [sp, #16]
        tmToTime(&timeInfo);
   d740a:	f7ff fe7f 	bl	d710c <_ZN9LocalTime8tmToTimeEP2tm>

        while(timeInfo.tm_wday != dayOfWeek) {
   d740e:	9a07      	ldr	r2, [sp, #28]
   d7410:	9b04      	ldr	r3, [sp, #16]
   d7412:	42ba      	cmp	r2, r7
   d7414:	d001      	beq.n	d741a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4a>
            timeInfo.tm_mday++;
   d7416:	3301      	adds	r3, #1
   d7418:	e7f5      	b.n	d7406 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x36>
   d741a:	2100      	movs	r1, #0
            tmToTime(&timeInfo);
        }

        for(int loops = 1; loops <= 5; loops++) {
   d741c:	2201      	movs	r2, #1
            if (loops >= ordinal) {
   d741e:	4294      	cmp	r4, r2
   d7420:	d106      	bne.n	d7430 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x60>
   d7422:	b101      	cbz	r1, d7426 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d7424:	9304      	str	r3, [sp, #16]
            timeInfo.tm_mday--;
            tmToTime(&timeInfo);
        }
        for(int loops = 1; loops <= 5; loops++) {
            if (loops >= -ordinal) {
                return timeInfo.tm_mday;
   d7426:	9c04      	ldr	r4, [sp, #16]
        }
    }

    
    return 0;
}
   d7428:	4620      	mov	r0, r4
   d742a:	b00a      	add	sp, #40	; 0x28
   d742c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            timeInfo.tm_mday += 7;
   d7430:	3307      	adds	r3, #7
            if (timeInfo.tm_mday > lastDay) {
   d7432:	4543      	cmp	r3, r8
   d7434:	dc04      	bgt.n	d7440 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d7436:	3201      	adds	r2, #1
   d7438:	2a06      	cmp	r2, #6
   d743a:	f04f 0101 	mov.w	r1, #1
   d743e:	d1ee      	bne.n	d741e <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4e>
                return 0;
   d7440:	2400      	movs	r4, #0
   d7442:	e7f1      	b.n	d7428 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
    if (ordinal < 0) {
   d7444:	d0f0      	beq.n	d7428 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
        timeInfo.tm_mon = month - 1;
   d7446:	3d01      	subs	r5, #1
        timeInfo.tm_mday = lastDay;
   d7448:	e9cd 0504 	strd	r0, r5, [sp, #16]
        timeInfo.tm_year = year - 1900;
   d744c:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   d7450:	9606      	str	r6, [sp, #24]
        tmToTime(&timeInfo);
   d7452:	a801      	add	r0, sp, #4
   d7454:	f7ff fe5a 	bl	d710c <_ZN9LocalTime8tmToTimeEP2tm>
        while(timeInfo.tm_wday != dayOfWeek) {
   d7458:	9b07      	ldr	r3, [sp, #28]
   d745a:	9904      	ldr	r1, [sp, #16]
   d745c:	42bb      	cmp	r3, r7
   d745e:	d002      	beq.n	d7466 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x96>
            timeInfo.tm_mday--;
   d7460:	3901      	subs	r1, #1
   d7462:	9104      	str	r1, [sp, #16]
            tmToTime(&timeInfo);
   d7464:	e7f5      	b.n	d7452 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x82>
   d7466:	2000      	movs	r0, #0
        for(int loops = 1; loops <= 5; loops++) {
   d7468:	2201      	movs	r2, #1
            if (loops >= -ordinal) {
   d746a:	4264      	negs	r4, r4
   d746c:	4294      	cmp	r4, r2
   d746e:	dc03      	bgt.n	d7478 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0xa8>
   d7470:	2800      	cmp	r0, #0
   d7472:	d0d8      	beq.n	d7426 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d7474:	9104      	str	r1, [sp, #16]
   d7476:	e7d6      	b.n	d7426 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
            timeInfo.tm_mday -= 7;
   d7478:	3907      	subs	r1, #7
            if (timeInfo.tm_mday < 1) {
   d747a:	2900      	cmp	r1, #0
   d747c:	dde0      	ble.n	d7440 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d747e:	3201      	adds	r2, #1
   d7480:	2a06      	cmp	r2, #6
   d7482:	f04f 0001 	mov.w	r0, #1
   d7486:	d1f1      	bne.n	d746c <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x9c>
   d7488:	e7da      	b.n	d7440 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
	...

000d748c <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d748c:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
   d7490:	b0cd      	sub	sp, #308	; 0x134
   d7492:	4604      	mov	r4, r0
    LocalTimeConvert tempConv(conv);
   d7494:	a810      	add	r0, sp, #64	; 0x40
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d7496:	460d      	mov	r5, r1
    LocalTimeConvert tempConv(conv);
   d7498:	f7ff fcfe 	bl	d6e98 <_ZN16LocalTimeConvertC1ERKS_>
        ymd.year = ymd.month = ymd.day = 0;
   d749c:	2300      	movs	r3, #0
        return LocalTimeRestrictedDate::getExpirationDate();
   d749e:	4620      	mov	r0, r4
        ymd.year = ymd.month = ymd.day = 0;
   d74a0:	9302      	str	r3, [sp, #8]
        return LocalTimeRestrictedDate::getExpirationDate();
   d74a2:	f7ff fb35 	bl	d6b10 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>
    if (expirationDate.isEmpty()) {
   d74a6:	bb58      	cbnz	r0, d7500 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x74>
    *this = value.ymd();
   d74a8:	a82a      	add	r0, sp, #168	; 0xa8
   d74aa:	f7ff fcb2 	bl	d6e12 <_ZNK14LocalTimeValue3ymdEv>
        endYMD = tempConv.getLocalTimeYMD();
   d74ae:	9002      	str	r0, [sp, #8]
        endYMD.addDay(LocalTime::instance().getScheduleLookaheadDays());
   d74b0:	f7ff fe14 	bl	d70dc <_ZN9LocalTime8instanceEv>
   d74b4:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
   d74b6:	a802      	add	r0, sp, #8
   d74b8:	f7ff f9f7 	bl	d68aa <_ZN12LocalTimeYMD6addDayEi>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d74bc:	f8df a20c 	ldr.w	sl, [pc, #524]	; d76cc <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x240>
    *this = value.ymd();
   d74c0:	a82a      	add	r0, sp, #168	; 0xa8
   d74c2:	f7ff fca6 	bl	d6e12 <_ZNK14LocalTimeValue3ymdEv>
        return compareTo(other) > 0; 
   d74c6:	9902      	ldr	r1, [sp, #8]
        LocalTimeYMD curYMD = tempConv.getLocalTimeYMD();
   d74c8:	9003      	str	r0, [sp, #12]
    *this = value.ymd();
   d74ca:	4606      	mov	r6, r0
   d74cc:	a803      	add	r0, sp, #12
   d74ce:	f7ff fa11 	bl	d68f4 <_ZNK12LocalTimeYMD9compareToES_>
        if (curYMD > endYMD) {
   d74d2:	2800      	cmp	r0, #0
   d74d4:	f300 80f2 	bgt.w	d76bc <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x230>
        return LocalTimeRestrictedDate::isValid(ymd);
   d74d8:	4631      	mov	r1, r6
   d74da:	4620      	mov	r0, r4
   d74dc:	f7ff fafd 	bl	d6ada <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
        if (!timeRange.isValidDate(curYMD)) {
   d74e0:	4607      	mov	r7, r0
   d74e2:	2800      	cmp	r0, #0
   d74e4:	f000 8094 	beq.w	d7610 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
        switch(scheduleItemType) {
   d74e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d74ea:	3b01      	subs	r3, #1
   d74ec:	2b04      	cmp	r3, #4
   d74ee:	f200 808f 	bhi.w	d7610 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d74f2:	e8df f013 	tbh	[pc, r3, lsl #1]
   d74f6:	0007      	.short	0x0007
   d74f8:	00960007 	.word	0x00960007
   d74fc:	00d500b8 	.word	0x00d500b8
        endYMD = expirationDate;
   d7500:	9002      	str	r0, [sp, #8]
   d7502:	e7db      	b.n	d74bc <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x30>
                int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d7504:	a92a      	add	r1, sp, #168	; 0xa8
   d7506:	a807      	add	r0, sp, #28
   d7508:	f7ff fc58 	bl	d6dbc <_ZNK14LocalTimeValue3hmsEv>
   d750c:	a907      	add	r1, sp, #28
   d750e:	4620      	mov	r0, r4
   d7510:	f7ff f937 	bl	d6782 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                if (cmp < 0) {
   d7514:	2800      	cmp	r0, #0
   d7516:	da0d      	bge.n	d7534 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xa8>
                    tempConv.atLocalTime(timeRange.hmsStart);
   d7518:	f104 011c 	add.w	r1, r4, #28
   d751c:	a807      	add	r0, sp, #28
   d751e:	f7ff f91b 	bl	d6758 <_ZN12LocalTimeHMSC1ERKS_>
   d7522:	a907      	add	r1, sp, #28
   d7524:	a810      	add	r0, sp, #64	; 0x40
   d7526:	f7ff ff15 	bl	d7354 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                        conv.time = tempConv.time;
   d752a:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d752e:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
   d7532:	e094      	b.n	d765e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1d2>
                if (cmp == 0) {
   d7534:	d16c      	bne.n	d7610 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    switch(scheduleItemType) {
   d7536:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d7538:	2b01      	cmp	r3, #1
   d753a:	d025      	beq.n	d7588 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xfc>
   d753c:	2b02      	cmp	r3, #2
   d753e:	d167      	bne.n	d7610 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d7540:	f104 011c 	add.w	r1, r4, #28
   d7544:	a804      	add	r0, sp, #16
   d7546:	f7ff f907 	bl	d6758 <_ZN12LocalTimeHMSC1ERKS_>
   d754a:	f104 0924 	add.w	r9, r4, #36	; 0x24
        return compareTo(other) <= 0;
   d754e:	4649      	mov	r1, r9
   d7550:	a804      	add	r0, sp, #16
   d7552:	f7ff f8e3 	bl	d671c <_ZNK12LocalTimeHMS9compareToERKS_>
   d7556:	2800      	cmp	r0, #0
   d7558:	dc5a      	bgt.n	d7610 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                            tempConv.atLocalTime(tempHMS);
   d755a:	a904      	add	r1, sp, #16
   d755c:	a807      	add	r0, sp, #28
   d755e:	f7ff f8fb 	bl	d6758 <_ZN12LocalTimeHMSC1ERKS_>
   d7562:	a907      	add	r1, sp, #28
   d7564:	a810      	add	r0, sp, #64	; 0x40
   d7566:	f7ff fef5 	bl	d7354 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                            if (tempConv.time > conv.time) {
   d756a:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	; 0x60
   d756e:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d7572:	4290      	cmp	r0, r2
   d7574:	eb71 0303 	sbcs.w	r3, r1, r3
   d7578:	db41      	blt.n	d75fe <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x172>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d757a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d757e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d7580:	4413      	add	r3, r2
   d7582:	f88d 3014 	strb.w	r3, [sp, #20]
   d7586:	e7e2      	b.n	d754e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xc2>
                        startingModulo = timeRange.hmsStart.minute % increment;
   d7588:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d758a:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   d758e:	fb93 f6f2 	sdiv	r6, r3, r2
                        tempConv.time += increment * 60;
   d7592:	213c      	movs	r1, #60	; 0x3c
   d7594:	4351      	muls	r1, r2
                        startingModulo = timeRange.hmsStart.minute % increment;
   d7596:	fb02 3616 	mls	r6, r2, r6, r3
                        tempConv.time += increment * 60;
   d759a:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d759e:	1852      	adds	r2, r2, r1
   d75a0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
                        tempConv.convert();
   d75a4:	a810      	add	r0, sp, #64	; 0x40
                        tempConv.time += increment * 60;
   d75a6:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
                        tempConv.convert();
   d75aa:	f7ff fe0f 	bl	d71cc <_ZN16LocalTimeConvert7convertEv>
                        LocalTime::timeToTm(tempConv.time, &timeInfo);
   d75ae:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
    localtime_r(&time, pTimeInfo);
   d75b2:	a907      	add	r1, sp, #28
   d75b4:	a804      	add	r0, sp, #16
   d75b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d75ba:	f003 fb9d 	bl	dacf8 <localtime_r>
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d75be:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   d75c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d75c2:	1b9b      	subs	r3, r3, r6
   d75c4:	fb93 f2f1 	sdiv	r2, r3, r1
   d75c8:	fb01 3312 	mls	r3, r1, r2, r3
   d75cc:	9a08      	ldr	r2, [sp, #32]
    return mktime(pTimeInfo);
   d75ce:	a807      	add	r0, sp, #28
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d75d0:	1ad2      	subs	r2, r2, r3
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d75d2:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d75d6:	9208      	str	r2, [sp, #32]
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d75d8:	9307      	str	r3, [sp, #28]
    return mktime(pTimeInfo);
   d75da:	f003 fb9d 	bl	dad18 <mktime>
                        tempConv.time = LocalTime::tmToTime(&timeInfo);
   d75de:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
                        tempConv.convert();
   d75e2:	a810      	add	r0, sp, #64	; 0x40
   d75e4:	f7ff fdf2 	bl	d71cc <_ZN16LocalTimeConvert7convertEv>
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   d75e8:	a92a      	add	r1, sp, #168	; 0xa8
   d75ea:	a804      	add	r0, sp, #16
   d75ec:	f7ff fbf2 	bl	d6dd4 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
        return compareTo(other) < 0;
   d75f0:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d75f4:	a804      	add	r0, sp, #16
   d75f6:	f7ff f891 	bl	d671c <_ZNK12LocalTimeHMS9compareToERKS_>
                        if (tempConv.getLocalTimeHMS() < timeRange.hmsEnd) {
   d75fa:	2800      	cmp	r0, #0
   d75fc:	da08      	bge.n	d7610 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
    *this = value.ymd();
   d75fe:	a82a      	add	r0, sp, #168	; 0xa8
   d7600:	f7ff fc07 	bl	d6e12 <_ZNK14LocalTimeValue3ymdEv>
   d7604:	4601      	mov	r1, r0
        return LocalTimeRestrictedDate::isValid(ymd);
   d7606:	4620      	mov	r0, r4
   d7608:	f7ff fa67 	bl	d6ada <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
                        if (!timeRange.isValidDate(tempConv.getLocalTimeYMD())) {
   d760c:	2800      	cmp	r0, #0
   d760e:	d18c      	bne.n	d752a <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x9e>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d7610:	4651      	mov	r1, sl
   d7612:	a807      	add	r0, sp, #28
   d7614:	f7ff f9ca 	bl	d69ac <_ZN12LocalTimeHMSC1EPKc>
   d7618:	a907      	add	r1, sp, #28
   d761a:	a810      	add	r0, sp, #64	; 0x40
   d761c:	f7ff febc 	bl	d7398 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>
    }
   d7620:	e74e      	b.n	d74c0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x34>
                int day = LocalTime::dayOfWeekOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month(), dayOfWeek, increment);
   d7622:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d7624:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d7626:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
   d762a:	3101      	adds	r1, #1
   d762c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d7630:	f7ff fece 	bl	d73d0 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>
                if (day == tempConv.localTimeValue.day()) {
   d7634:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   d7636:	4298      	cmp	r0, r3
   d7638:	d1ea      	bne.n	d7610 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        tempConv.atLocalTime(timeRange.hmsStart);
   d763a:	f104 011c 	add.w	r1, r4, #28
                tempConv.atLocalTime(timeRange.hmsStart);
   d763e:	a807      	add	r0, sp, #28
   d7640:	f7ff f88a 	bl	d6758 <_ZN12LocalTimeHMSC1ERKS_>
   d7644:	a907      	add	r1, sp, #28
   d7646:	a810      	add	r0, sp, #64	; 0x40
   d7648:	f7ff fe84 	bl	d7354 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                if (tempConv.time > conv.time) {
   d764c:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
   d7650:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d7654:	4282      	cmp	r2, r0
   d7656:	418b      	sbcs	r3, r1
   d7658:	dada      	bge.n	d7610 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    conv.time = tempConv.time;
   d765a:	e9c5 0118 	strd	r0, r1, [r5, #96]	; 0x60
                        conv.convert();
   d765e:	4628      	mov	r0, r5
   d7660:	f7ff fdb4 	bl	d71cc <_ZN16LocalTimeConvert7convertEv>
                        return true;
   d7664:	e02b      	b.n	d76be <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x232>
                int tempIncrement = increment;
   d7666:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                if (tempIncrement < 0) {
   d7668:	2e00      	cmp	r6, #0
   d766a:	da08      	bge.n	d767e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1f2>
                    tempIncrement = LocalTime::lastDayOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month()) + tempIncrement + 1;
   d766c:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d766e:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d7670:	3101      	adds	r1, #1
   d7672:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d7676:	f7ff fd4b 	bl	d7110 <_ZN9LocalTime14lastDayOfMonthEii>
   d767a:	4430      	add	r0, r6
   d767c:	1c46      	adds	r6, r0, #1
                if (tempConv.localTimeValue.ymd().getDay() == tempIncrement) {
   d767e:	a82a      	add	r0, sp, #168	; 0xa8
   d7680:	f7ff fbc7 	bl	d6e12 <_ZNK14LocalTimeValue3ymdEv>
   d7684:	ebb6 6fd0 	cmp.w	r6, r0, lsr #27
   d7688:	d1c2      	bne.n	d7610 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d768a:	a92a      	add	r1, sp, #168	; 0xa8
   d768c:	a807      	add	r0, sp, #28
   d768e:	f7ff fb95 	bl	d6dbc <_ZNK14LocalTimeValue3hmsEv>
   d7692:	a907      	add	r1, sp, #28
   d7694:	4620      	mov	r0, r4
   d7696:	f7ff f874 	bl	d6782 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                    if (cmp <= 0) {
   d769a:	2800      	cmp	r0, #0
   d769c:	dcb8      	bgt.n	d7610 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d769e:	e7cc      	b.n	d763a <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1ae>
            if (tempConv.localTimeValue.hms() <= timeRange.hmsStart) {
   d76a0:	a92a      	add	r1, sp, #168	; 0xa8
   d76a2:	a807      	add	r0, sp, #28
   d76a4:	f7ff fb8a 	bl	d6dbc <_ZNK14LocalTimeValue3hmsEv>
   d76a8:	f104 011c 	add.w	r1, r4, #28
        return compareTo(other) <= 0;
   d76ac:	a807      	add	r0, sp, #28
   d76ae:	9101      	str	r1, [sp, #4]
   d76b0:	f7ff f834 	bl	d671c <_ZNK12LocalTimeHMS9compareToERKS_>
   d76b4:	2800      	cmp	r0, #0
   d76b6:	9901      	ldr	r1, [sp, #4]
   d76b8:	dcaa      	bgt.n	d7610 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d76ba:	e7c0      	b.n	d763e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1b2>
    return false;
   d76bc:	2700      	movs	r7, #0
class LocalTimeConvert {
   d76be:	a811      	add	r0, sp, #68	; 0x44
   d76c0:	f7fe ffda 	bl	d6678 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d76c4:	4638      	mov	r0, r7
   d76c6:	b04d      	add	sp, #308	; 0x134
   d76c8:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
   d76cc:	000df775 	.word	0x000df775

000d76d0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d76d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d76d2:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d76d4:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d76d6:	4668      	mov	r0, sp
   d76d8:	f7ff f817 	bl	d670a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   d76dc:	466a      	mov	r2, sp
   d76de:	4629      	mov	r1, r5
   d76e0:	4620      	mov	r0, r4
   d76e2:	f004 fab3 	bl	dbc4c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d76e6:	a801      	add	r0, sp, #4
   d76e8:	f7fd fb49 	bl	d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d76ec:	4620      	mov	r0, r4
   d76ee:	b003      	add	sp, #12
   d76f0:	bd30      	pop	{r4, r5, pc}

000d76f2 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d76f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d76f4:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d76f6:	4604      	mov	r4, r0
   d76f8:	4668      	mov	r0, sp
   d76fa:	f7ff f806 	bl	d670a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   d76fe:	466a      	mov	r2, sp
   d7700:	4629      	mov	r1, r5
   d7702:	4620      	mov	r0, r4
   d7704:	f004 fa7e 	bl	dbc04 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d7708:	a801      	add	r0, sp, #4
   d770a:	f7fd fb38 	bl	d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d770e:	4620      	mov	r0, r4
   d7710:	b003      	add	sp, #12
   d7712:	bd30      	pop	{r4, r5, pc}

000d7714 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7714:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d7716:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7718:	4604      	mov	r4, r0
   d771a:	4668      	mov	r0, sp
   d771c:	f7fe fff5 	bl	d670a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   d7720:	466a      	mov	r2, sp
   d7722:	4629      	mov	r1, r5
   d7724:	4620      	mov	r0, r4
   d7726:	f004 fa16 	bl	dbb56 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d772a:	a801      	add	r0, sp, #4
   d772c:	f7fd fb27 	bl	d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7730:	4620      	mov	r0, r4
   d7732:	b003      	add	sp, #12
   d7734:	bd30      	pop	{r4, r5, pc}

000d7736 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>:
       *  (i.e. capacity() == size() in the new %vector).
       *
       *  The newly-created %vector uses a copy of the allocator object used
       *  by @a __x (unless the allocator traits dictate a different object).
       */
      vector(const vector& __x)
   d7736:	b570      	push	{r4, r5, r6, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7738:	e9d1 3600 	ldrd	r3, r6, [r1]
   d773c:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   d773e:	2300      	movs	r3, #0
   d7740:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   d7744:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   d7746:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   d7748:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   d774a:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   d774c:	f7fe ffd0 	bl	d66f0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d7750:	e9d5 5300 	ldrd	r5, r3, [r5]
	this->_M_impl._M_finish = this->_M_impl._M_start;
   d7754:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   d7758:	4406      	add	r6, r0
   d775a:	60a6      	str	r6, [r4, #8]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   d775c:	462a      	mov	r2, r5
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
   d775e:	4601      	mov	r1, r0
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   d7760:	4293      	cmp	r3, r2
   d7762:	d005      	beq.n	d7770 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x3a>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d7764:	b109      	cbz	r1, d776a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x34>
   d7766:	6816      	ldr	r6, [r2, #0]
   d7768:	600e      	str	r6, [r1, #0]
   d776a:	3104      	adds	r1, #4
   d776c:	3204      	adds	r2, #4
   d776e:	e7f7      	b.n	d7760 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x2a>
	this->_M_impl._M_finish =
   d7770:	1b5b      	subs	r3, r3, r5
   d7772:	4418      	add	r0, r3
   d7774:	6060      	str	r0, [r4, #4]
      }
   d7776:	4620      	mov	r0, r4
   d7778:	bd70      	pop	{r4, r5, r6, pc}

000d777a <_ZN23LocalTimeRestrictedDateC1ERKS_>:
class LocalTimeRestrictedDate {
   d777a:	b538      	push	{r3, r4, r5, lr}
   d777c:	460d      	mov	r5, r1
   d777e:	f811 3b04 	ldrb.w	r3, [r1], #4
   d7782:	4604      	mov	r4, r0
   d7784:	f800 3b04 	strb.w	r3, [r0], #4
   d7788:	f7ff ffd5 	bl	d7736 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d778c:	f105 0110 	add.w	r1, r5, #16
   d7790:	f104 0010 	add.w	r0, r4, #16
   d7794:	f7ff ffcf 	bl	d7736 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d7798:	4620      	mov	r0, r4
   d779a:	bd38      	pop	{r3, r4, r5, pc}

000d779c <_ZN21LocalTimeScheduleItemC1ERKS_>:
class LocalTimeScheduleItem {
   d779c:	b538      	push	{r3, r4, r5, lr}
   d779e:	4604      	mov	r4, r0
   d77a0:	460d      	mov	r5, r1
class LocalTimeRange : public LocalTimeRestrictedDate {
   d77a2:	f7ff ffea 	bl	d777a <_ZN23LocalTimeRestrictedDateC1ERKS_>
   d77a6:	f105 011c 	add.w	r1, r5, #28
   d77aa:	f104 001c 	add.w	r0, r4, #28
   d77ae:	f7fe ffd3 	bl	d6758 <_ZN12LocalTimeHMSC1ERKS_>
   d77b2:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d77b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d77ba:	f7fe ffcd 	bl	d6758 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeScheduleItem {
   d77be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   d77c0:	62e3      	str	r3, [r4, #44]	; 0x2c
   d77c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d77c4:	6323      	str	r3, [r4, #48]	; 0x30
   d77c6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   d77c8:	6363      	str	r3, [r4, #52]	; 0x34
   d77ca:	f105 0138 	add.w	r1, r5, #56	; 0x38
   d77ce:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d77d2:	f005 fdf9 	bl	dd3c8 <_ZN6StringC1ERKS_>
   d77d6:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d77d8:	64a3      	str	r3, [r4, #72]	; 0x48
   d77da:	4620      	mov	r0, r4
   d77dc:	bd38      	pop	{r3, r4, r5, pc}

000d77de <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv, std::function<bool(LocalTimeScheduleItem &item)> filter) const {
   d77de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d77e2:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d77e6:	b0d1      	sub	sp, #324	; 0x144
   d77e8:	4681      	mov	r9, r0
   d77ea:	460c      	mov	r4, r1
   d77ec:	4615      	mov	r5, r2
    time_t closestTime = 0;
   d77ee:	2600      	movs	r6, #0
   d77f0:	2700      	movs	r7, #0
    for(auto it = scheduleItems.begin(); it != scheduleItems.end(); ++it) {
   d77f2:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   d77f6:	4543      	cmp	r3, r8
   d77f8:	d029      	beq.n	d784e <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x70>
        LocalTimeScheduleItem item = *it;
   d77fa:	4641      	mov	r1, r8
   d77fc:	a801      	add	r0, sp, #4
   d77fe:	f7ff ffcd 	bl	d779c <_ZN21LocalTimeScheduleItemC1ERKS_>
      if (_M_empty())
   d7802:	68ab      	ldr	r3, [r5, #8]
   d7804:	b90b      	cbnz	r3, d780a <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x2c>
	__throw_bad_function_call();
   d7806:	f006 fb7f 	bl	ddf08 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d780a:	68eb      	ldr	r3, [r5, #12]
   d780c:	a901      	add	r1, sp, #4
   d780e:	4628      	mov	r0, r5
   d7810:	4798      	blx	r3
        if (filter(item)) {
   d7812:	b1b0      	cbz	r0, d7842 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x64>
            LocalTimeConvert tmpConvert(conv);
   d7814:	4621      	mov	r1, r4
   d7816:	a814      	add	r0, sp, #80	; 0x50
   d7818:	f7ff fb3e 	bl	d6e98 <_ZN16LocalTimeConvertC1ERKS_>
            bool bResult = item.getNextScheduledTime(tmpConvert);
   d781c:	a914      	add	r1, sp, #80	; 0x50
   d781e:	a801      	add	r0, sp, #4
   d7820:	f7ff fe34 	bl	d748c <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>
            if (bResult && closestTime == 0 || tmpConvert.time < closestTime) {
   d7824:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
   d7828:	b110      	cbz	r0, d7830 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x52>
   d782a:	ea56 0107 	orrs.w	r1, r6, r7
   d782e:	d003      	beq.n	d7838 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5a>
   d7830:	42b2      	cmp	r2, r6
   d7832:	eb73 0107 	sbcs.w	r1, r3, r7
   d7836:	da01      	bge.n	d783c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5e>
                closestTime = tmpConvert.time;
   d7838:	4616      	mov	r6, r2
   d783a:	461f      	mov	r7, r3
class LocalTimeConvert {
   d783c:	a815      	add	r0, sp, #84	; 0x54
   d783e:	f7fe ff1b 	bl	d6678 <_ZN22LocalTimePosixTimezoneD1Ev>
        LocalTimeScheduleItem item = *it;
   d7842:	a801      	add	r0, sp, #4
   d7844:	f7ff fb5c 	bl	d6f00 <_ZN21LocalTimeScheduleItemD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   d7848:	f108 084c 	add.w	r8, r8, #76	; 0x4c
	return *this;
   d784c:	e7d1      	b.n	d77f2 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x14>
    if (closestTime != 0) {
   d784e:	ea56 0307 	orrs.w	r3, r6, r7
   d7852:	d008      	beq.n	d7866 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x88>
        conv.convert();
   d7854:	4620      	mov	r0, r4
        conv.time = closestTime;
   d7856:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
        conv.convert();
   d785a:	f7ff fcb7 	bl	d71cc <_ZN16LocalTimeConvert7convertEv>
        return true;
   d785e:	2001      	movs	r0, #1
}
   d7860:	b051      	add	sp, #324	; 0x144
   d7862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
   d7866:	2000      	movs	r0, #0
   d7868:	e7fa      	b.n	d7860 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x82>
	...

000d786c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv) const {
   d786c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	    _M_invoker = &_My_handler::_M_invoke;
   d786e:	4b08      	ldr	r3, [pc, #32]	; (d7890 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x24>)
   d7870:	9303      	str	r3, [sp, #12]
    return getNextScheduledTime(conv, [](LocalTimeScheduleItem &item) {
   d7872:	466a      	mov	r2, sp
	    _M_manager = &_My_handler::_M_manager;
   d7874:	4b07      	ldr	r3, [pc, #28]	; (d7894 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x28>)
   d7876:	9302      	str	r3, [sp, #8]
   d7878:	f7ff ffb1 	bl	d77de <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>
      if (_M_manager)
   d787c:	9b02      	ldr	r3, [sp, #8]
   d787e:	4604      	mov	r4, r0
   d7880:	b11b      	cbz	r3, d788a <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x1e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7882:	4669      	mov	r1, sp
   d7884:	2203      	movs	r2, #3
   d7886:	4608      	mov	r0, r1
   d7888:	4798      	blx	r3
}
   d788a:	4620      	mov	r0, r4
   d788c:	b004      	add	sp, #16
   d788e:	bd10      	pop	{r4, pc}
   d7890:	000d664f 	.word	0x000d664f
   d7894:	000d6653 	.word	0x000d6653

000d7898 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx>:
bool LocalTimeSchedule::isScheduledTime(LocalTimeConvert &conv, time_t timeNow) {
   d7898:	b570      	push	{r4, r5, r6, lr}
   d789a:	4604      	mov	r4, r0
   d789c:	460d      	mov	r5, r1
   d789e:	4610      	mov	r0, r2
   d78a0:	4619      	mov	r1, r3
    if (nextTime != 0 && nextTime <= timeNow) {
   d78a2:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d78a6:	ea52 0603 	orrs.w	r6, r2, r3
   d78aa:	d013      	beq.n	d78d4 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x3c>
   d78ac:	4290      	cmp	r0, r2
   d78ae:	eb71 0303 	sbcs.w	r3, r1, r3
   d78b2:	db0f      	blt.n	d78d4 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x3c>
        nextTime = 0;
   d78b4:	2200      	movs	r2, #0
   d78b6:	2300      	movs	r3, #0
   d78b8:	e9c4 2306 	strd	r2, r3, [r4, #24]
        result = true;
   d78bc:	2601      	movs	r6, #1
    if (getNextScheduledTime(conv)) {
   d78be:	4629      	mov	r1, r5
   d78c0:	4620      	mov	r0, r4
   d78c2:	f7ff ffd3 	bl	d786c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d78c6:	b118      	cbz	r0, d78d0 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x38>
        nextTime = conv.time;
   d78c8:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d78cc:	e9c4 2306 	strd	r2, r3, [r4, #24]
}
   d78d0:	4630      	mov	r0, r6
   d78d2:	bd70      	pop	{r4, r5, r6, pc}
    bool result = false;
   d78d4:	2600      	movs	r6, #0
   d78d6:	e7f2      	b.n	d78be <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x26>

000d78d8 <_ZN17LocalTimeSchedule15isScheduledTimeEv>:
bool LocalTimeSchedule::isScheduledTime() {
   d78d8:	b530      	push	{r4, r5, lr}
   d78da:	b0bd      	sub	sp, #244	; 0xf4
   d78dc:	4605      	mov	r5, r0
    if (!Time.isValid()) {
   d78de:	f006 f803 	bl	dd8e8 <_ZN9TimeClass7isValidEv>
   d78e2:	4604      	mov	r4, r0
   d78e4:	b1c0      	cbz	r0, d7918 <_ZN17LocalTimeSchedule15isScheduledTimeEv+0x40>
   d78e6:	2306      	movs	r3, #6
   d78e8:	a801      	add	r0, sp, #4
   d78ea:	9300      	str	r3, [sp, #0]
   d78ec:	f7ff f988 	bl	d6c00 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d78f0:	f006 f817 	bl	dd922 <_ZN9TimeClass3nowEv>
   d78f4:	17c1      	asrs	r1, r0, #31
   d78f6:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    conv.withCurrentTime().convert();
   d78fa:	4668      	mov	r0, sp
   d78fc:	f7ff fc66 	bl	d71cc <_ZN16LocalTimeConvert7convertEv>
    return isScheduledTime(conv, Time.now());
   d7900:	f006 f80f 	bl	dd922 <_ZN9TimeClass3nowEv>
   d7904:	4669      	mov	r1, sp
   d7906:	4602      	mov	r2, r0
   d7908:	17c3      	asrs	r3, r0, #31
   d790a:	4628      	mov	r0, r5
   d790c:	f7ff ffc4 	bl	d7898 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx>
   d7910:	4604      	mov	r4, r0
class LocalTimeConvert {
   d7912:	a801      	add	r0, sp, #4
   d7914:	f7fe feb0 	bl	d6678 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d7918:	4620      	mov	r0, r4
   d791a:	b03d      	add	sp, #244	; 0xf4
   d791c:	bd30      	pop	{r4, r5, pc}

000d791e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   d791e:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   d7920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7924:	4604      	mov	r4, r0
   d7926:	460e      	mov	r6, r1
      if (&__x != this)
   d7928:	d022      	beq.n	d7970 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x52>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d792a:	e9d1 5800 	ldrd	r5, r8, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   d792e:	6800      	ldr	r0, [r0, #0]
   d7930:	68a3      	ldr	r3, [r4, #8]
   d7932:	1a1b      	subs	r3, r3, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7934:	eba8 0705 	sub.w	r7, r8, r5
			 - this->_M_impl._M_start); }
   d7938:	109b      	asrs	r3, r3, #2
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   d793a:	ebb3 0fa7 	cmp.w	r3, r7, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d793e:	ea4f 01a7 	mov.w	r1, r7, asr #2
   d7942:	d218      	bcs.n	d7976 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   d7944:	4608      	mov	r0, r1
   d7946:	f7fe fed3 	bl	d66f0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d794a:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   d794c:	4603      	mov	r3, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d794e:	45a8      	cmp	r8, r5
   d7950:	d005      	beq.n	d795e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x40>
   d7952:	b10b      	cbz	r3, d7958 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x3a>
   d7954:	682a      	ldr	r2, [r5, #0]
   d7956:	601a      	str	r2, [r3, #0]
   d7958:	3304      	adds	r3, #4
   d795a:	3504      	adds	r5, #4
   d795c:	e7f7      	b.n	d794e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x30>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
   d795e:	6820      	ldr	r0, [r4, #0]
   d7960:	f7fe fec2 	bl	d66e8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
   d7964:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   d7966:	443e      	add	r6, r7
   d7968:	60a6      	str	r6, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   d796a:	6823      	ldr	r3, [r4, #0]
   d796c:	441f      	add	r7, r3
   d796e:	6067      	str	r7, [r4, #4]
	}
      return *this;
    }
   d7970:	4620      	mov	r0, r4
   d7972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7976:	6862      	ldr	r2, [r4, #4]
   d7978:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   d797a:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
   d797e:	d806      	bhi.n	d798e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x70>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d7980:	45a8      	cmp	r8, r5
   d7982:	d0f2      	beq.n	d796a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d7984:	463a      	mov	r2, r7
   d7986:	4629      	mov	r1, r5
   d7988:	f006 ff4c 	bl	de824 <memmove>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d798c:	e7ed      	b.n	d796a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	  if (_Num)
   d798e:	b112      	cbz	r2, d7996 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d7990:	4629      	mov	r1, r5
   d7992:	f006 ff47 	bl	de824 <memmove>
   d7996:	e9d4 3200 	ldrd	r3, r2, [r4]
   d799a:	1ad1      	subs	r1, r2, r3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   d799c:	6833      	ldr	r3, [r6, #0]
   d799e:	440b      	add	r3, r1
					  __x._M_impl._M_finish,
   d79a0:	6871      	ldr	r1, [r6, #4]
   d79a2:	4299      	cmp	r1, r3
   d79a4:	d0e1      	beq.n	d796a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
   d79a6:	b10a      	cbz	r2, d79ac <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x8e>
   d79a8:	6818      	ldr	r0, [r3, #0]
   d79aa:	6010      	str	r0, [r2, #0]
   d79ac:	3304      	adds	r3, #4
   d79ae:	3204      	adds	r2, #4
   d79b0:	e7f7      	b.n	d79a2 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x84>

000d79b2 <_ZN14LocalTimeRangeaSERKS_>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d79b2:	b538      	push	{r3, r4, r5, lr}
   d79b4:	460d      	mov	r5, r1
class LocalTimeRestrictedDate {
   d79b6:	f811 3b04 	ldrb.w	r3, [r1], #4
class LocalTimeRange : public LocalTimeRestrictedDate {
   d79ba:	4604      	mov	r4, r0
class LocalTimeRestrictedDate {
   d79bc:	f800 3b04 	strb.w	r3, [r0], #4
   d79c0:	f7ff ffad 	bl	d791e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
   d79c4:	f105 0110 	add.w	r1, r5, #16
   d79c8:	f104 0010 	add.w	r0, r4, #16
   d79cc:	f7ff ffa7 	bl	d791e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
class LocalTimeRange : public LocalTimeRestrictedDate {
   d79d0:	f105 011c 	add.w	r1, r5, #28
   d79d4:	f104 001c 	add.w	r0, r4, #28
   d79d8:	f7fe fec6 	bl	d6768 <_ZN12LocalTimeHMSaSERKS_>
   d79dc:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d79e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d79e4:	f7fe fec0 	bl	d6768 <_ZN12LocalTimeHMSaSERKS_>
   d79e8:	4620      	mov	r0, r4
   d79ea:	bd38      	pop	{r3, r4, r5, pc}

000d79ec <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d79ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d79f0:	e9d0 6900 	ldrd	r6, r9, [r0]
   d79f4:	4d3b      	ldr	r5, [pc, #236]	; (d7ae4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   d79f6:	4b3c      	ldr	r3, [pc, #240]	; (d7ae8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d79f8:	eba9 0406 	sub.w	r4, r9, r6
   d79fc:	10a4      	asrs	r4, r4, #2
   d79fe:	436c      	muls	r4, r5
	if (max_size() - size() < __n)
   d7a00:	429c      	cmp	r4, r3
   d7a02:	468a      	mov	sl, r1
   d7a04:	4607      	mov	r7, r0
   d7a06:	4611      	mov	r1, r2
   d7a08:	46a8      	mov	r8, r5
   d7a0a:	d102      	bne.n	d7a12 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d7a0c:	4837      	ldr	r0, [pc, #220]	; (d7aec <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x100>)
   d7a0e:	f006 fa78 	bl	ddf02 <_ZSt20__throw_length_errorPKc>
   d7a12:	2c01      	cmp	r4, #1
   d7a14:	4622      	mov	r2, r4
   d7a16:	bf38      	it	cc
   d7a18:	2201      	movcc	r2, #1
   d7a1a:	18a4      	adds	r4, r4, r2
   d7a1c:	ebaa 0506 	sub.w	r5, sl, r6

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d7a20:	d25d      	bcs.n	d7ade <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d7a22:	b154      	cbz	r4, d7a3a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4e>
   d7a24:	429c      	cmp	r4, r3
   d7a26:	bf28      	it	cs
   d7a28:	461c      	movcs	r4, r3
   d7a2a:	204c      	movs	r0, #76	; 0x4c
   d7a2c:	4360      	muls	r0, r4
   d7a2e:	9100      	str	r1, [sp, #0]
   d7a30:	f7fc fb31 	bl	d4096 <_Znwj>
   d7a34:	9900      	ldr	r1, [sp, #0]
   d7a36:	4683      	mov	fp, r0
   d7a38:	e000      	b.n	d7a3c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x50>
   d7a3a:	46a3      	mov	fp, r4
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7a3c:	eb1b 0005 	adds.w	r0, fp, r5
   d7a40:	d001      	beq.n	d7a46 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
   d7a42:	f7ff feab 	bl	d779c <_ZN21LocalTimeScheduleItemC1ERKS_>
   d7a46:	465b      	mov	r3, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7a48:	4631      	mov	r1, r6
   d7a4a:	458a      	cmp	sl, r1
   d7a4c:	d00a      	beq.n	d7a64 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
   d7a4e:	b133      	cbz	r3, d7a5e <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
   d7a50:	4618      	mov	r0, r3
   d7a52:	9101      	str	r1, [sp, #4]
   d7a54:	9300      	str	r3, [sp, #0]
   d7a56:	f7ff fea1 	bl	d779c <_ZN21LocalTimeScheduleItemC1ERKS_>
   d7a5a:	e9dd 3100 	ldrd	r3, r1, [sp]
   d7a5e:	314c      	adds	r1, #76	; 0x4c
   d7a60:	334c      	adds	r3, #76	; 0x4c
   d7a62:	e7f2      	b.n	d7a4a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
   d7a64:	08ad      	lsrs	r5, r5, #2
   d7a66:	fb08 fa05 	mul.w	sl, r8, r5
   d7a6a:	f02a 4540 	bic.w	r5, sl, #3221225472	; 0xc0000000
   d7a6e:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
   d7a72:	fb0a fa05 	mul.w	sl, sl, r5
   d7a76:	eb06 050a 	add.w	r5, r6, sl
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
		 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   d7a7a:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   d7a7e:	44da      	add	sl, fp
	  _ForwardIterator __cur = __result;
   d7a80:	4653      	mov	r3, sl
   d7a82:	4629      	mov	r1, r5
	      for (; __first != __last; ++__first, (void)++__cur)
   d7a84:	4549      	cmp	r1, r9
   d7a86:	d113      	bne.n	d7ab0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
   d7a88:	eba9 0505 	sub.w	r5, r9, r5
   d7a8c:	08ad      	lsrs	r5, r5, #2
   d7a8e:	fb08 f505 	mul.w	r5, r8, r5
   d7a92:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
   d7a96:	f04f 084c 	mov.w	r8, #76	; 0x4c
   d7a9a:	fb08 a505 	mla	r5, r8, r5, sl
   d7a9e:	46b0      	mov	r8, r6
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d7aa0:	45c8      	cmp	r8, r9
   d7aa2:	d00f      	beq.n	d7ac4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
    { __pointer->~_Tp(); }
   d7aa4:	4640      	mov	r0, r8
   d7aa6:	f7ff fa2b 	bl	d6f00 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d7aaa:	f108 084c 	add.w	r8, r8, #76	; 0x4c
   d7aae:	e7f7      	b.n	d7aa0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d7ab0:	4618      	mov	r0, r3
   d7ab2:	9101      	str	r1, [sp, #4]
   d7ab4:	9300      	str	r3, [sp, #0]
   d7ab6:	f7ff fe71 	bl	d779c <_ZN21LocalTimeScheduleItemC1ERKS_>
   d7aba:	9901      	ldr	r1, [sp, #4]
   d7abc:	9b00      	ldr	r3, [sp, #0]
   d7abe:	314c      	adds	r1, #76	; 0x4c
   d7ac0:	334c      	adds	r3, #76	; 0x4c
   d7ac2:	e7df      	b.n	d7a84 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	if (__p)
   d7ac4:	b116      	cbz	r6, d7acc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe0>
	::operator delete(__p);
   d7ac6:	4630      	mov	r0, r6
   d7ac8:	f7fc fae9 	bl	d409e <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d7acc:	204c      	movs	r0, #76	; 0x4c
   d7ace:	fb00 b404 	mla	r4, r0, r4, fp
      this->_M_impl._M_finish = __new_finish;
   d7ad2:	e9c7 b500 	strd	fp, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d7ad6:	60bc      	str	r4, [r7, #8]
    }
   d7ad8:	b003      	add	sp, #12
   d7ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d7ade:	461c      	mov	r4, r3
   d7ae0:	e7a3      	b.n	d7a2a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
   d7ae2:	bf00      	nop
   d7ae4:	286bca1b 	.word	0x286bca1b
   d7ae8:	01af286b 	.word	0x01af286b
   d7aec:	000df7a0 	.word	0x000df7a0

000d7af0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   d7af0:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d7af2:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   d7af6:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   d7af8:	4604      	mov	r4, r0
   d7afa:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d7afc:	d007      	beq.n	d7b0e <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7afe:	b113      	cbz	r3, d7b06 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x16>
   d7b00:	4618      	mov	r0, r3
   d7b02:	f7ff fe4b 	bl	d779c <_ZN21LocalTimeScheduleItemC1ERKS_>
	    ++this->_M_impl._M_finish;
   d7b06:	6863      	ldr	r3, [r4, #4]
   d7b08:	334c      	adds	r3, #76	; 0x4c
   d7b0a:	6063      	str	r3, [r4, #4]
      }
   d7b0c:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d7b0e:	4619      	mov	r1, r3
   d7b10:	f7ff ff6c 	bl	d79ec <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   d7b14:	e7fa      	b.n	d7b0c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1c>

000d7b16 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>:
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d7b16:	b530      	push	{r4, r5, lr}
   d7b18:	b097      	sub	sp, #92	; 0x5c
   d7b1a:	4604      	mov	r4, r0
    LocalTimeScheduleItem item;
   d7b1c:	a803      	add	r0, sp, #12
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d7b1e:	9201      	str	r2, [sp, #4]
   d7b20:	460d      	mov	r5, r1
    LocalTimeScheduleItem item;
   d7b22:	f7fe ff4f 	bl	d69c4 <_ZN21LocalTimeScheduleItemC1Ev>
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d7b26:	2301      	movs	r3, #1
    item.timeRange = timeRange;
   d7b28:	9901      	ldr	r1, [sp, #4]
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d7b2a:	9315      	str	r3, [sp, #84]	; 0x54
    item.timeRange = timeRange;
   d7b2c:	a803      	add	r0, sp, #12
    item.increment = increment;
   d7b2e:	950e      	str	r5, [sp, #56]	; 0x38
    item.timeRange = timeRange;
   d7b30:	f7ff ff3f 	bl	d79b2 <_ZN14LocalTimeRangeaSERKS_>
    scheduleItems.push_back(item);
   d7b34:	a903      	add	r1, sp, #12
   d7b36:	f104 0020 	add.w	r0, r4, #32
   d7b3a:	f7ff ffd9 	bl	d7af0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>
    LocalTimeScheduleItem item;
   d7b3e:	a803      	add	r0, sp, #12
   d7b40:	f7ff f9de 	bl	d6f00 <_ZN21LocalTimeScheduleItemD1Ev>
}
   d7b44:	4620      	mov	r0, r4
   d7b46:	b017      	add	sp, #92	; 0x5c
   d7b48:	bd30      	pop	{r4, r5, pc}

000d7b4a <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d7b4a:	4770      	bx	lr

000d7b4c <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d7b4c:	b510      	push	{r4, lr}
}
   d7b4e:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d7b50:	4604      	mov	r4, r0
}
   d7b52:	f006 f9cd 	bl	ddef0 <_ZdlPvj>
   d7b56:	4620      	mov	r0, r4
   d7b58:	bd10      	pop	{r4, pc}

000d7b5a <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d7b5a:	6803      	ldr	r3, [r0, #0]
   d7b5c:	b2c9      	uxtb	r1, r1
   d7b5e:	689b      	ldr	r3, [r3, #8]
   d7b60:	4718      	bx	r3
	...

000d7b64 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d7b64:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d7b66:	4d03      	ldr	r5, [pc, #12]	; (d7b74 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d7b68:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d7b6c:	e9c0 5100 	strd	r5, r1, [r0]
}
   d7b70:	bd30      	pop	{r4, r5, pc}
   d7b72:	bf00      	nop
   d7b74:	000df830 	.word	0x000df830

000d7b78 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d7b78:	6840      	ldr	r0, [r0, #4]
   d7b7a:	f003 be4f 	b.w	db81c <_ZN7TwoWire5beginEv>

000d7b7e <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7b7e:	b510      	push	{r4, lr}
   d7b80:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d7b82:	6800      	ldr	r0, [r0, #0]
   d7b84:	f003 fea5 	bl	db8d2 <_ZN7TwoWire6unlockEv>
   d7b88:	4620      	mov	r0, r4
   d7b8a:	bd10      	pop	{r4, pc}

000d7b8c <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d7b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7b90:	b08a      	sub	sp, #40	; 0x28
   d7b92:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d7b94:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7b96:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7b98:	f003 fe92 	bl	db8c0 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d7b9c:	221e      	movs	r2, #30
   d7b9e:	2100      	movs	r1, #0
   d7ba0:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d7ba2:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d7ba4:	f006 fe58 	bl	de858 <memset>
		size_t framAddr = 0;
   d7ba8:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d7baa:	b1ef      	cbz	r7, d7be8 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d7bac:	6823      	ldr	r3, [r4, #0]
   d7bae:	2f1e      	cmp	r7, #30
   d7bb0:	46b8      	mov	r8, r7
   d7bb2:	bf28      	it	cs
   d7bb4:	f04f 081e 	movcs.w	r8, #30
   d7bb8:	68dd      	ldr	r5, [r3, #12]
   d7bba:	aa02      	add	r2, sp, #8
   d7bbc:	4643      	mov	r3, r8
   d7bbe:	4631      	mov	r1, r6
   d7bc0:	4620      	mov	r0, r4
   d7bc2:	47a8      	blx	r5
			if (!result) {
   d7bc4:	4605      	mov	r5, r0
   d7bc6:	b958      	cbnz	r0, d7be0 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d7bc8:	480a      	ldr	r0, [pc, #40]	; (d7bf4 <_ZN6MB85RC5eraseEv+0x68>)
   d7bca:	490b      	ldr	r1, [pc, #44]	; (d7bf8 <_ZN6MB85RC5eraseEv+0x6c>)
   d7bcc:	4632      	mov	r2, r6
   d7bce:	f7fc fa7b 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d7bd2:	a801      	add	r0, sp, #4
   d7bd4:	f7ff ffd3 	bl	d7b7e <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d7bd8:	4628      	mov	r0, r5
   d7bda:	b00a      	add	sp, #40	; 0x28
   d7bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d7be0:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d7be4:	4446      	add	r6, r8
		while(totalLen > 0) {
   d7be6:	e7e0      	b.n	d7baa <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d7be8:	a801      	add	r0, sp, #4
   d7bea:	f7ff ffc8 	bl	d7b7e <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d7bee:	2501      	movs	r5, #1
   d7bf0:	e7f2      	b.n	d7bd8 <_ZN6MB85RC5eraseEv+0x4c>
   d7bf2:	bf00      	nop
   d7bf4:	2003e570 	.word	0x2003e570
   d7bf8:	000df7fc 	.word	0x000df7fc

000d7bfc <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d7bfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d7c00:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7c02:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7c04:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d7c06:	460d      	mov	r5, r1
   d7c08:	4616      	mov	r6, r2
   d7c0a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d7c0c:	f003 fe58 	bl	db8c0 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d7c10:	b1a7      	cbz	r7, d7c3c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7c12:	68e1      	ldr	r1, [r4, #12]
   d7c14:	6860      	ldr	r0, [r4, #4]
   d7c16:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7c1a:	f003 fe32 	bl	db882 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d7c1e:	0a29      	lsrs	r1, r5, #8
   d7c20:	6860      	ldr	r0, [r4, #4]
   d7c22:	f7ff ff9a 	bl	d7b5a <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d7c26:	4629      	mov	r1, r5
   d7c28:	6860      	ldr	r0, [r4, #4]
   d7c2a:	f7ff ff96 	bl	d7b5a <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d7c2e:	6860      	ldr	r0, [r4, #4]
   d7c30:	2100      	movs	r1, #0
   d7c32:	f003 fe41 	bl	db8b8 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d7c36:	b148      	cbz	r0, d7c4c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d7c38:	2400      	movs	r4, #0
   d7c3a:	e000      	b.n	d7c3e <_ZN6MB85RC8readDataEjPhj+0x42>
   d7c3c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d7c3e:	a801      	add	r0, sp, #4
   d7c40:	f7ff ff9d 	bl	d7b7e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d7c44:	4620      	mov	r0, r4
   d7c46:	b003      	add	sp, #12
   d7c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d7c4c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d7c4e:	7b21      	ldrb	r1, [r4, #12]
   d7c50:	6860      	ldr	r0, [r4, #4]
   d7c52:	46b8      	mov	r8, r7
   d7c54:	bf28      	it	cs
   d7c56:	f04f 0820 	movcs.w	r8, #32
   d7c5a:	2301      	movs	r3, #1
   d7c5c:	4642      	mov	r2, r8
   d7c5e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7c62:	f003 fdf8 	bl	db856 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d7c66:	f006 f8fb 	bl	dde60 <_Z19__fetch_global_Wirev>
   d7c6a:	6803      	ldr	r3, [r0, #0]
   d7c6c:	691b      	ldr	r3, [r3, #16]
   d7c6e:	4798      	blx	r3
   d7c70:	4540      	cmp	r0, r8
   d7c72:	dbe1      	blt.n	d7c38 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d7c74:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d7c78:	f006 f8f2 	bl	dde60 <_Z19__fetch_global_Wirev>
   d7c7c:	6803      	ldr	r3, [r0, #0]
   d7c7e:	695b      	ldr	r3, [r3, #20]
   d7c80:	4798      	blx	r3
   d7c82:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d7c86:	454e      	cmp	r6, r9
   d7c88:	d1f6      	bne.n	d7c78 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d7c8a:	4445      	add	r5, r8
   d7c8c:	eba7 0708 	sub.w	r7, r7, r8
   d7c90:	e7be      	b.n	d7c10 <_ZN6MB85RC8readDataEjPhj+0x14>

000d7c92 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d7c92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7c96:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7c98:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7c9a:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d7c9c:	460e      	mov	r6, r1
   d7c9e:	4690      	mov	r8, r2
   d7ca0:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d7ca2:	f003 fe0d 	bl	db8c0 <_ZN7TwoWire4lockEv>
   d7ca6:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d7caa:	f1b9 0f00 	cmp.w	r9, #0
   d7cae:	d02a      	beq.n	d7d06 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d7cb0:	b34d      	cbz	r5, d7d06 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7cb2:	68e1      	ldr	r1, [r4, #12]
   d7cb4:	6860      	ldr	r0, [r4, #4]
   d7cb6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7cba:	f003 fde2 	bl	db882 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d7cbe:	0a31      	lsrs	r1, r6, #8
   d7cc0:	6860      	ldr	r0, [r4, #4]
   d7cc2:	f7ff ff4a 	bl	d7b5a <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d7cc6:	6860      	ldr	r0, [r4, #4]
   d7cc8:	4631      	mov	r1, r6
   d7cca:	f7ff ff46 	bl	d7b5a <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7cce:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d7cd2:	4647      	mov	r7, r8
   d7cd4:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d7cd8:	6860      	ldr	r0, [r4, #4]
   d7cda:	f817 1b01 	ldrb.w	r1, [r7], #1
   d7cde:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d7ce0:	3d01      	subs	r5, #1
				wire.write(*data);
   d7ce2:	689b      	ldr	r3, [r3, #8]
   d7ce4:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7ce6:	4555      	cmp	r5, sl
   d7ce8:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d7cec:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7cee:	d001      	beq.n	d7cf4 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d7cf0:	2d00      	cmp	r5, #0
   d7cf2:	d1f1      	bne.n	d7cd8 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d7cf4:	6860      	ldr	r0, [r4, #4]
   d7cf6:	2101      	movs	r1, #1
   d7cf8:	f003 fdde 	bl	db8b8 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d7cfc:	2800      	cmp	r0, #0
   d7cfe:	d0d7      	beq.n	d7cb0 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d7d00:	f04f 0900 	mov.w	r9, #0
   d7d04:	e7d1      	b.n	d7caa <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d7d06:	a801      	add	r0, sp, #4
   d7d08:	f7ff ff39 	bl	d7b7e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d7d0c:	4648      	mov	r0, r9
   d7d0e:	b003      	add	sp, #12
   d7d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7d14 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7d18:	b08b      	sub	sp, #44	; 0x2c
   d7d1a:	460e      	mov	r6, r1
   d7d1c:	4615      	mov	r5, r2
   d7d1e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d7d20:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7d22:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7d24:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d7d26:	f003 fdcb 	bl	db8c0 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d7d2a:	42ae      	cmp	r6, r5
   d7d2c:	d229      	bcs.n	d7d82 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d7d2e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d7d30:	4425      	add	r5, r4
			while(numBytes > 0) {
   d7d32:	b18c      	cbz	r4, d7d58 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d7d34:	2c1e      	cmp	r4, #30
   d7d36:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d7d38:	f8d8 3000 	ldr.w	r3, [r8]
   d7d3c:	bf28      	it	cs
   d7d3e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d7d40:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d7d42:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d7d46:	aa02      	add	r2, sp, #8
   d7d48:	463b      	mov	r3, r7
   d7d4a:	4631      	mov	r1, r6
   d7d4c:	4640      	mov	r0, r8
				framAddrTo -= count;
   d7d4e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d7d50:	47c8      	blx	r9
				if (!result) {
   d7d52:	b948      	cbnz	r0, d7d68 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7d54:	2400      	movs	r4, #0
   d7d56:	e000      	b.n	d7d5a <_ZN6MB85RC8moveDataEjjj+0x46>
   d7d58:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d7d5a:	a801      	add	r0, sp, #4
   d7d5c:	f7ff ff0f 	bl	d7b7e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d7d60:	4620      	mov	r0, r4
   d7d62:	b00b      	add	sp, #44	; 0x2c
   d7d64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d7d68:	f8d8 3000 	ldr.w	r3, [r8]
   d7d6c:	aa02      	add	r2, sp, #8
   d7d6e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d7d72:	4629      	mov	r1, r5
   d7d74:	463b      	mov	r3, r7
   d7d76:	4640      	mov	r0, r8
   d7d78:	47c8      	blx	r9
				if (!result) {
   d7d7a:	2800      	cmp	r0, #0
   d7d7c:	d0ea      	beq.n	d7d54 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d7d7e:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d7d80:	e7d7      	b.n	d7d32 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d7d82:	d9e9      	bls.n	d7d58 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d7d84:	2c00      	cmp	r4, #0
   d7d86:	d0e7      	beq.n	d7d58 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d7d88:	f8d8 3000 	ldr.w	r3, [r8]
   d7d8c:	2c1e      	cmp	r4, #30
   d7d8e:	4627      	mov	r7, r4
   d7d90:	bf28      	it	cs
   d7d92:	271e      	movcs	r7, #30
   d7d94:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d7d98:	aa02      	add	r2, sp, #8
   d7d9a:	463b      	mov	r3, r7
   d7d9c:	4631      	mov	r1, r6
   d7d9e:	4640      	mov	r0, r8
   d7da0:	47c8      	blx	r9
				if (!result) {
   d7da2:	2800      	cmp	r0, #0
   d7da4:	d0d6      	beq.n	d7d54 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d7da6:	f8d8 3000 	ldr.w	r3, [r8]
   d7daa:	aa02      	add	r2, sp, #8
   d7dac:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d7db0:	4629      	mov	r1, r5
   d7db2:	463b      	mov	r3, r7
   d7db4:	4640      	mov	r0, r8
   d7db6:	47c8      	blx	r9
				if (!result) {
   d7db8:	2800      	cmp	r0, #0
   d7dba:	d0cb      	beq.n	d7d54 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d7dbc:	443e      	add	r6, r7
				framAddrTo += count;
   d7dbe:	443d      	add	r5, r7
				numBytes -= count;
   d7dc0:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d7dc2:	e7df      	b.n	d7d84 <_ZN6MB85RC8moveDataEjjj+0x70>

000d7dc4 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:
	(*_Base::_M_get_pointer(__functor))(
   d7dc4:	6803      	ldr	r3, [r0, #0]
   d7dc6:	780a      	ldrb	r2, [r1, #0]
    return result;
}

void PublishQueuePosix::publishCompleteCallback(bool succeeded, const char *eventName, const char *eventData) {
    publishComplete = true;
    publishSuccess = succeeded;
   d7dc8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   d7dcc:	2101      	movs	r1, #1
   d7dce:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   d7dd2:	4770      	bx	lr

000d7dd4 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d7dd4:	2a02      	cmp	r2, #2
   d7dd6:	d006      	beq.n	d7de6 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d7dd8:	2a03      	cmp	r2, #3
   d7dda:	d002      	beq.n	d7de2 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d7ddc:	2a01      	cmp	r2, #1
   d7dde:	d100      	bne.n	d7de2 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7de0:	6001      	str	r1, [r0, #0]
	}
   d7de2:	2000      	movs	r0, #0
   d7de4:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7de6:	680b      	ldr	r3, [r1, #0]
   d7de8:	6003      	str	r3, [r0, #0]
	}
   d7dea:	e7fa      	b.n	d7de2 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d7dec <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d7dec:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d7dee:	4603      	mov	r3, r0
	switch (__op)
   d7df0:	d102      	bne.n	d7df8 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d7df2:	6001      	str	r1, [r0, #0]
      }
   d7df4:	2000      	movs	r0, #0
   d7df6:	4770      	bx	lr
	  switch (__op)
   d7df8:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7dfa:	bf04      	itt	eq
   d7dfc:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d7e00:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d7e04:	e7f6      	b.n	d7df4 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d7e06 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7e06:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d7e08:	6842      	ldr	r2, [r0, #4]
   d7e0a:	4603      	mov	r3, r0
   d7e0c:	1054      	asrs	r4, r2, #1
   d7e0e:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d7e12:	07d2      	lsls	r2, r2, #31
   d7e14:	bf48      	it	mi
   d7e16:	590a      	ldrmi	r2, [r1, r4]
   d7e18:	681b      	ldr	r3, [r3, #0]
      }
   d7e1a:	f85d 4b04 	ldr.w	r4, [sp], #4
   d7e1e:	bf48      	it	mi
   d7e20:	58d3      	ldrmi	r3, [r2, r3]
   d7e22:	4718      	bx	r3

000d7e24 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   d7e24:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   d7e28:	4601      	mov	r1, r0
    if (stateHandler) {
   d7e2a:	b11b      	cbz	r3, d7e34 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7e2c:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   d7e30:	30c0      	adds	r0, #192	; 0xc0
   d7e32:	4718      	bx	r3
}
   d7e34:	4770      	bx	lr
	...

000d7e38 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d7e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   d7e3a:	4d12      	ldr	r5, [pc, #72]	; (d7e84 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d7e3c:	4608      	mov	r0, r1
        eventData = "";
   d7e3e:	2a00      	cmp	r2, #0
   d7e40:	bf18      	it	ne
   d7e42:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d7e44:	460f      	mov	r7, r1
   d7e46:	461e      	mov	r6, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d7e48:	f006 fdad 	bl	de9a6 <strlen>
   d7e4c:	2840      	cmp	r0, #64	; 0x40
   d7e4e:	d817      	bhi.n	d7e80 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   d7e50:	4628      	mov	r0, r5
   d7e52:	f006 fda8 	bl	de9a6 <strlen>
   d7e56:	f240 236e 	movw	r3, #622	; 0x26e
   d7e5a:	4298      	cmp	r0, r3
   d7e5c:	d810      	bhi.n	d7e80 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   d7e5e:	3043      	adds	r0, #67	; 0x43
   d7e60:	f7fc f91b 	bl	d409a <_Znaj>
    if (event) {
   d7e64:	4604      	mov	r4, r0
   d7e66:	b148      	cbz	r0, d7e7c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
        strcpy(event->eventName, eventName);
   d7e68:	4639      	mov	r1, r7
        event->flags = flags;
   d7e6a:	f800 6b01 	strb.w	r6, [r0], #1
        strcpy(event->eventName, eventName);
   d7e6e:	f006 fd74 	bl	de95a <strcpy>
        strcpy(event->eventData, eventData);
   d7e72:	4629      	mov	r1, r5
   d7e74:	f104 0042 	add.w	r0, r4, #66	; 0x42
   d7e78:	f006 fd6f 	bl	de95a <strcpy>
}
   d7e7c:	4620      	mov	r0, r4
   d7e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   d7e80:	2400      	movs	r4, #0
   d7e82:	e7fb      	b.n	d7e7c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
   d7e84:	000dffd4 	.word	0x000dffd4

000d7e88 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d7e88:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7e8a:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d7e8c:	460a      	mov	r2, r1
   d7e8e:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d7e90:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d7e92:	1d01      	adds	r1, r0, #4
   d7e94:	a808      	add	r0, sp, #32
   d7e96:	f002 f85f 	bl	d9f58 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d7e9a:	9808      	ldr	r0, [sp, #32]
   d7e9c:	2100      	movs	r1, #0
   d7e9e:	f006 fe8d 	bl	debbc <open>
   d7ea2:	4605      	mov	r5, r0
   d7ea4:	a808      	add	r0, sp, #32
   d7ea6:	f005 f9f9 	bl	dd29c <_ZN6StringD1Ev>
    if (fd) {
   d7eaa:	2d00      	cmp	r5, #0
   d7eac:	d060      	beq.n	d7f70 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   d7eae:	a908      	add	r1, sp, #32
   d7eb0:	4628      	mov	r0, r5
   d7eb2:	f006 fe71 	bl	deb98 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   d7eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7eb8:	492e      	ldr	r1, [pc, #184]	; (d7f74 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   d7eba:	482f      	ldr	r0, [pc, #188]	; (d7f78 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d7ebc:	4632      	mov	r2, r6
   d7ebe:	f7fd fcbd 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   d7ec2:	2200      	movs	r2, #0
   d7ec4:	4611      	mov	r1, r2
   d7ec6:	4628      	mov	r0, r5
   d7ec8:	f006 fe6e 	bl	deba8 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   d7ecc:	2208      	movs	r2, #8
   d7ece:	a906      	add	r1, sp, #24
   d7ed0:	4628      	mov	r0, r5
   d7ed2:	f006 fe87 	bl	debe4 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   d7ed6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d7ed8:	2f4a      	cmp	r7, #74	; 0x4a
   d7eda:	dd39      	ble.n	d7f50 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   d7edc:	4b27      	ldr	r3, [pc, #156]	; (d7f7c <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   d7ede:	9a06      	ldr	r2, [sp, #24]
   d7ee0:	429a      	cmp	r2, r3
   d7ee2:	d135      	bne.n	d7f50 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   d7ee4:	4b26      	ldr	r3, [pc, #152]	; (d7f80 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   d7ee6:	9a07      	ldr	r2, [sp, #28]
   d7ee8:	429a      	cmp	r2, r3
   d7eea:	d131      	bne.n	d7f50 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   d7eec:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   d7ef0:	4610      	mov	r0, r2
   d7ef2:	9205      	str	r2, [sp, #20]
   d7ef4:	f7fc f8d1 	bl	d409a <_Znaj>
            if (result) {
   d7ef8:	4604      	mov	r4, r0
   d7efa:	b1c0      	cbz	r0, d7f2e <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d7efc:	4427      	add	r7, r4
                read(fd, result, eventSize);
   d7efe:	4601      	mov	r1, r0
   d7f00:	9a05      	ldr	r2, [sp, #20]
   d7f02:	4628      	mov	r0, r5
   d7f04:	f006 fe6e 	bl	debe4 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d7f08:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   d7f0c:	b9ab      	cbnz	r3, d7f3a <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   d7f0e:	1c63      	adds	r3, r4, #1
   d7f10:	4618      	mov	r0, r3
   d7f12:	9305      	str	r3, [sp, #20]
   d7f14:	f006 fd47 	bl	de9a6 <strlen>
   d7f18:	283f      	cmp	r0, #63	; 0x3f
   d7f1a:	9b05      	ldr	r3, [sp, #20]
   d7f1c:	d80d      	bhi.n	d7f3a <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   d7f1e:	f104 0242 	add.w	r2, r4, #66	; 0x42
   d7f22:	9200      	str	r2, [sp, #0]
   d7f24:	4917      	ldr	r1, [pc, #92]	; (d7f84 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   d7f26:	4814      	ldr	r0, [pc, #80]	; (d7f78 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d7f28:	4632      	mov	r2, r6
   d7f2a:	f7fd fc87 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   d7f2e:	4628      	mov	r0, r5
   d7f30:	f006 fe2a 	bl	deb88 <close>
}
   d7f34:	4620      	mov	r0, r4
   d7f36:	b01f      	add	sp, #124	; 0x7c
   d7f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   d7f3a:	4913      	ldr	r1, [pc, #76]	; (d7f88 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   d7f3c:	480e      	ldr	r0, [pc, #56]	; (d7f78 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d7f3e:	4632      	mov	r2, r6
   d7f40:	f7fd fc7c 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   d7f44:	2143      	movs	r1, #67	; 0x43
   d7f46:	4620      	mov	r0, r4
   d7f48:	f005 ffd2 	bl	ddef0 <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   d7f4c:	2400      	movs	r4, #0
   d7f4e:	e7ee      	b.n	d7f2e <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   d7f50:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d7f54:	9302      	str	r3, [sp, #8]
   d7f56:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d7f5a:	9301      	str	r3, [sp, #4]
   d7f5c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d7f60:	9300      	str	r3, [sp, #0]
   d7f62:	490a      	ldr	r1, [pc, #40]	; (d7f8c <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   d7f64:	9b06      	ldr	r3, [sp, #24]
   d7f66:	4804      	ldr	r0, [pc, #16]	; (d7f78 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d7f68:	4632      	mov	r2, r6
   d7f6a:	f7fd fc67 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
   d7f6e:	e7ed      	b.n	d7f4c <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   d7f70:	462c      	mov	r4, r5
    return result;
   d7f72:	e7df      	b.n	d7f34 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   d7f74:	000df844 	.word	0x000df844
   d7f78:	2003e260 	.word	0x2003e260
   d7f7c:	31b67663 	.word	0x31b67663
   d7f80:	00410801 	.word	0x00410801
   d7f84:	000df858 	.word	0x000df858
   d7f88:	000df87a 	.word	0x000df87a
   d7f8c:	000df8a8 	.word	0x000df8a8

000d7f90 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   d7f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7f94:	4680      	mov	r8, r0
   d7f96:	4b28      	ldr	r3, [pc, #160]	; (d8038 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   d7f98:	f848 3b04 	str.w	r3, [r8], #4
   d7f9c:	4604      	mov	r4, r0
   d7f9e:	4640      	mov	r0, r8
   d7fa0:	f001 fef2 	bl	d9d88 <_ZN14SequentialFileC1Ev>
   d7fa4:	2202      	movs	r2, #2
   d7fa6:	2364      	movs	r3, #100	; 0x64
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
   d7fa8:	2500      	movs	r5, #0
   d7faa:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d7fae:	2308      	movs	r3, #8
   d7fb0:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d7fb2:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   d7fb6:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   d7fba:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   d7fbe:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	  _M_start(), _M_finish()
   d7fc2:	67a5      	str	r5, [r4, #120]	; 0x78
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7fc4:	2020      	movs	r0, #32
   d7fc6:	f7fc f866 	bl	d4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d7fca:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d7fcc:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d7fce:	3e01      	subs	r6, #1
   d7fd0:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d7fd2:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   d7fd6:	4607      	mov	r7, r0
   d7fd8:	f44f 7000 	mov.w	r0, #512	; 0x200
   d7fdc:	f7fc f85b 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d7fe0:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d7fe4:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   d7fe8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d7fec:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d7ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7ff4:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   d7ff8:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   d7ffc:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   d8000:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d8004:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d8008:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   d800c:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   d8010:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   d8014:	4909      	ldr	r1, [pc, #36]	; (d803c <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   d8016:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   d801a:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   d801e:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   d8022:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   d8026:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   d802a:	4640      	mov	r0, r8
   d802c:	f001 fef2 	bl	d9e14 <_ZN14SequentialFile11withDirPathEPKc>
}
   d8030:	4620      	mov	r0, r4
   d8032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8036:	bf00      	nop
   d8038:	000dfac4 	.word	0x000dfac4
   d803c:	000df8ed 	.word	0x000df8ed

000d8040 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   d8040:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d8042:	4c06      	ldr	r4, [pc, #24]	; (d805c <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   d8044:	6823      	ldr	r3, [r4, #0]
   d8046:	b93b      	cbnz	r3, d8058 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   d8048:	20d0      	movs	r0, #208	; 0xd0
   d804a:	f7fc f824 	bl	d4096 <_Znwj>
   d804e:	4605      	mov	r5, r0
   d8050:	b108      	cbz	r0, d8056 <_ZN17PublishQueuePosix8instanceEv+0x16>
   d8052:	f7ff ff9d 	bl	d7f90 <_ZN17PublishQueuePosixC1Ev>
   d8056:	6025      	str	r5, [r4, #0]
}
   d8058:	6820      	ldr	r0, [r4, #0]
   d805a:	bd38      	pop	{r3, r4, r5, pc}
   d805c:	2003e264 	.word	0x2003e264

000d8060 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d8060:	b510      	push	{r4, lr}
   d8062:	e9d1 2300 	ldrd	r2, r3, [r1]
   d8066:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d8068:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d806a:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d806c:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d806e:	b90a      	cbnz	r2, d8074 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d8070:	07d9      	lsls	r1, r3, #31
   d8072:	d505      	bpl.n	d8080 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d8074:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d8078:	4b0f      	ldr	r3, [pc, #60]	; (d80b8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d807a:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d807c:	4b0f      	ldr	r3, [pc, #60]	; (d80bc <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d807e:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8080:	ab02      	add	r3, sp, #8
   d8082:	e893 0003 	ldmia.w	r3, {r0, r1}
   d8086:	466a      	mov	r2, sp
   d8088:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d808c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d8090:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d8094:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8098:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d809a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d809e:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d80a0:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d80a2:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d80a4:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d80a6:	4618      	mov	r0, r3
   d80a8:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d80aa:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d80ac:	9105      	str	r1, [sp, #20]
   d80ae:	f7fe f8e1 	bl	d6274 <_ZNSt14_Function_baseD1Ev>
	}
   d80b2:	4620      	mov	r0, r4
   d80b4:	b006      	add	sp, #24
   d80b6:	bd10      	pop	{r4, pc}
   d80b8:	000d7e07 	.word	0x000d7e07
   d80bc:	000d7ded 	.word	0x000d7ded

000d80c0 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>:
      ~lock_guard()
   d80c0:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d80c2:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d80c4:	4604      	mov	r4, r0
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   d80c6:	6f58      	ldr	r0, [r3, #116]	; 0x74
   d80c8:	f002 fa04 	bl	da4d4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d80cc:	4620      	mov	r0, r4
   d80ce:	bd10      	pop	{r4, pc}

000d80d0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   d80d0:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   d80d2:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   d80d4:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   d80d6:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d80d8:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   d80da:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   d80dc:	d002      	beq.n	d80e4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(this->_M_impl,
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   d80de:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d80e0:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   d80e2:	bd10      	pop	{r4, pc}
	::operator delete(__p);
   d80e4:	68c0      	ldr	r0, [r0, #12]
   d80e6:	f7fb ffda 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d80ea:	6963      	ldr	r3, [r4, #20]
   d80ec:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d80ee:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   d80f0:	685b      	ldr	r3, [r3, #4]
   d80f2:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d80f4:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d80f8:	6122      	str	r2, [r4, #16]
   d80fa:	e7f1      	b.n	d80e0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>

000d80fc <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   d80fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8100:	b087      	sub	sp, #28
   d8102:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8104:	9001      	str	r0, [sp, #4]
    void lock() { os_mutex_recursive_lock(mutex); };
   d8106:	6f40      	ldr	r0, [r0, #116]	; 0x74
                hdr.magic = FILE_MAGIC;
   d8108:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d81b4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                hdr.version = FILE_VERSION;
   d810c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; d81b8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
   d8110:	f002 f9d8 	bl	da4c4 <os_mutex_recursive_lock>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d8114:	f8df b0a4 	ldr.w	fp, [pc, #164]	; d81bc <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xc0>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d8118:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   d811c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d8120:	4293      	cmp	r3, r2
   d8122:	d105      	bne.n	d8130 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x34>
    WITH_LOCK(*this) {
   d8124:	a801      	add	r0, sp, #4
   d8126:	f7ff ffcb 	bl	d80c0 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d812a:	b007      	add	sp, #28
   d812c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ramQueue.pop_front();
   d8130:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   d8134:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   d8138:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   d813a:	f7ff ffc9 	bl	d80d0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   d813e:	4640      	mov	r0, r8
   d8140:	f002 f8fe 	bl	da340 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d8144:	2300      	movs	r3, #0
   d8146:	4602      	mov	r2, r0
   d8148:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   d814a:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d814c:	a802      	add	r0, sp, #8
   d814e:	f001 ff03 	bl	d9f58 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d8152:	9802      	ldr	r0, [sp, #8]
   d8154:	f240 2102 	movw	r1, #514	; 0x202
   d8158:	f006 fd30 	bl	debbc <open>
   d815c:	4605      	mov	r5, r0
   d815e:	a802      	add	r0, sp, #8
   d8160:	f005 f89c 	bl	dd29c <_ZN6StringD1Ev>
            if (fd) {
   d8164:	b1cd      	cbz	r5, d819a <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x9e>
                write(fd, &hdr, sizeof(hdr));
   d8166:	2208      	movs	r2, #8
   d8168:	eb0d 0102 	add.w	r1, sp, r2
   d816c:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   d816e:	e9cd 9a02 	strd	r9, sl, [sp, #8]
                write(fd, &hdr, sizeof(hdr));
   d8172:	f006 fd49 	bl	dec08 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   d8176:	f107 0042 	add.w	r0, r7, #66	; 0x42
   d817a:	f006 fc14 	bl	de9a6 <strlen>
   d817e:	4639      	mov	r1, r7
   d8180:	f100 0243 	add.w	r2, r0, #67	; 0x43
   d8184:	4628      	mov	r0, r5
   d8186:	f006 fd3f 	bl	dec08 <write>
                close(fd);
   d818a:	4628      	mov	r0, r5
   d818c:	f006 fcfc 	bl	deb88 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d8190:	4807      	ldr	r0, [pc, #28]	; (d81b0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>)
   d8192:	4632      	mov	r2, r6
   d8194:	4659      	mov	r1, fp
   d8196:	f7fd fb51 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   d819a:	4631      	mov	r1, r6
   d819c:	4640      	mov	r0, r8
   d819e:	f002 f90f 	bl	da3c0 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   d81a2:	2f00      	cmp	r7, #0
   d81a4:	d0b8      	beq.n	d8118 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x1c>
   d81a6:	2143      	movs	r1, #67	; 0x43
   d81a8:	4638      	mov	r0, r7
   d81aa:	f005 fea1 	bl	ddef0 <_ZdlPvj>
   d81ae:	e7b1      	b.n	d8114 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   d81b0:	2003e260 	.word	0x2003e260
   d81b4:	31b67663 	.word	0x31b67663
   d81b8:	00410801 	.word	0x00410801
   d81bc:	000df8fb 	.word	0x000df8fb

000d81c0 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:
PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d81c0:	2900      	cmp	r1, #0
   d81c2:	bf08      	it	eq
   d81c4:	f5b0 6f00 	cmpeq.w	r0, #2048	; 0x800
void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   d81c8:	b538      	push	{r3, r4, r5, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d81ca:	d005      	beq.n	d81d8 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x18>
   d81cc:	2900      	cmp	r1, #0
   d81ce:	bf08      	it	eq
   d81d0:	2840      	cmpeq	r0, #64	; 0x40
   d81d2:	d10b      	bne.n	d81ec <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
   d81d4:	2a09      	cmp	r2, #9
   d81d6:	d109      	bne.n	d81ec <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
        _log.trace("reset or disconnect event, save files to queue");
   d81d8:	4905      	ldr	r1, [pc, #20]	; (d81f0 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   d81da:	4806      	ldr	r0, [pc, #24]	; (d81f4 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x34>)
   d81dc:	f7fd fb2e 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   d81e0:	f7ff ff2e 	bl	d8040 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   d81e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   d81e8:	f7ff bf88 	b.w	d80fc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   d81ec:	bd38      	pop	{r3, r4, r5, pc}
   d81ee:	bf00      	nop
   d81f0:	000df918 	.word	0x000df918
   d81f4:	2003e260 	.word	0x2003e260

000d81f8 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   d81f8:	b570      	push	{r4, r5, r6, lr}
   d81fa:	b086      	sub	sp, #24
   d81fc:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d81fe:	f002 fc7b 	bl	daaf8 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   d8202:	b948      	cbnz	r0, d8218 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   d8204:	4b43      	ldr	r3, [pc, #268]	; (d8314 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   d8206:	a902      	add	r1, sp, #8
   d8208:	e9cd 3002 	strd	r3, r0, [sp, #8]
   d820c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8210:	f7ff ff26 	bl	d8060 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d8214:	b006      	add	sp, #24
   d8216:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   d8218:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   d821c:	b11d      	cbz	r5, d8226 <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   d821e:	2301      	movs	r3, #1
   d8220:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   d8224:	e7f6      	b.n	d8214 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   d8226:	f002 f985 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   d822a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   d822e:	1ac0      	subs	r0, r0, r3
   d8230:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   d8234:	4298      	cmp	r0, r3
   d8236:	d3ed      	bcc.n	d8214 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   d8238:	1d26      	adds	r6, r4, #4
   d823a:	4629      	mov	r1, r5
   d823c:	4630      	mov	r0, r6
   d823e:	f002 f88b 	bl	da358 <_ZN14SequentialFile16getFileFromQueueEb>
   d8242:	4601      	mov	r1, r0
   d8244:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   d8248:	2800      	cmp	r0, #0
   d824a:	d052      	beq.n	d82f2 <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   d824c:	4620      	mov	r0, r4
   d824e:	f7ff fe1b 	bl	d7e88 <_ZN17PublishQueuePosix13readQueueFileEi>
   d8252:	4605      	mov	r5, r0
   d8254:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   d8258:	2800      	cmp	r0, #0
   d825a:	d035      	beq.n	d82c8 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   d825c:	f002 f96a 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   d8260:	ae02      	add	r6, sp, #8
   d8262:	2500      	movs	r5, #0
   d8264:	4b2c      	ldr	r3, [pc, #176]	; (d8318 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   d8266:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   d826a:	4631      	mov	r1, r6
   d826c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8270:	9302      	str	r3, [sp, #8]
   d8272:	9503      	str	r5, [sp, #12]
   d8274:	f7ff fef4 	bl	d8060 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d8278:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   d827c:	f103 0242 	add.w	r2, r3, #66	; 0x42
   d8280:	9200      	str	r2, [sp, #0]
   d8282:	4926      	ldr	r1, [pc, #152]	; (d831c <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   d8284:	4a26      	ldr	r2, [pc, #152]	; (d8320 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   d8286:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d828a:	42a8      	cmp	r0, r5
   d828c:	bf08      	it	eq
   d828e:	460a      	moveq	r2, r1
   d8290:	3301      	adds	r3, #1
   d8292:	4924      	ldr	r1, [pc, #144]	; (d8324 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   d8294:	4824      	ldr	r0, [pc, #144]	; (d8328 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   d8296:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d829a:	f7fd facf 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   d829e:	f7fe f82d 	bl	d62fc <_ZN19BackgroundPublishRK8instanceEv>
   d82a2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   d82a6:	4b21      	ldr	r3, [pc, #132]	; (d832c <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   d82a8:	9305      	str	r3, [sp, #20]
   d82aa:	e9cd 6500 	strd	r6, r5, [sp]
   d82ae:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   d82b0:	4b1f      	ldr	r3, [pc, #124]	; (d8330 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d82b2:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d82b4:	9304      	str	r3, [sp, #16]
   d82b6:	f811 3b01 	ldrb.w	r3, [r1], #1
   d82ba:	3242      	adds	r2, #66	; 0x42
   d82bc:	f7fe f968 	bl	d6590 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   d82c0:	4630      	mov	r0, r6
   d82c2:	f7fd ffd7 	bl	d6274 <_ZNSt14_Function_baseD1Ev>
   d82c6:	e7a5      	b.n	d8214 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   d82c8:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   d82cc:	4919      	ldr	r1, [pc, #100]	; (d8334 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   d82ce:	4816      	ldr	r0, [pc, #88]	; (d8328 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   d82d0:	f7fb fefa 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   d82d4:	2101      	movs	r1, #1
   d82d6:	4630      	mov	r0, r6
   d82d8:	f002 f83e 	bl	da358 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   d82dc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   d82e0:	462a      	mov	r2, r5
   d82e2:	4630      	mov	r0, r6
   d82e4:	f001 fe74 	bl	d9fd0 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   d82e8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   d82ec:	2b00      	cmp	r3, #0
   d82ee:	d1b5      	bne.n	d825c <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   d82f0:	e795      	b.n	d821e <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   d82f2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   d82f6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d82fa:	429a      	cmp	r2, r3
   d82fc:	d007      	beq.n	d830e <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   d82fe:	681b      	ldr	r3, [r3, #0]
   d8300:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   d8304:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d8308:	f7ff fee2 	bl	d80d0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   d830c:	e7ec      	b.n	d82e8 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   d830e:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   d8312:	e784      	b.n	d821e <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   d8314:	000d8399 	.word	0x000d8399
   d8318:	000d86f1 	.word	0x000d86f1
   d831c:	000df947 	.word	0x000df947
   d8320:	000dfe4c 	.word	0x000dfe4c
   d8324:	000df968 	.word	0x000df968
   d8328:	2003e260 	.word	0x2003e260
   d832c:	000d7dc5 	.word	0x000d7dc5
   d8330:	000d7dd5 	.word	0x000d7dd5
   d8334:	000df94b 	.word	0x000df94b

000d8338 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d8338:	68c3      	ldr	r3, [r0, #12]
   d833a:	68ca      	ldr	r2, [r1, #12]
   d833c:	1a9b      	subs	r3, r3, r2
   d833e:	109b      	asrs	r3, r3, #2
   d8340:	1e5a      	subs	r2, r3, #1
   d8342:	e9d0 3000 	ldrd	r3, r0, [r0]
   d8346:	1a1b      	subs	r3, r3, r0
   d8348:	109b      	asrs	r3, r3, #2
   d834a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d834e:	6888      	ldr	r0, [r1, #8]
   d8350:	680a      	ldr	r2, [r1, #0]
   d8352:	1a80      	subs	r0, r0, r2
    }
   d8354:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d8358:	4770      	bx	lr

000d835a <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   d835a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d835c:	4605      	mov	r5, r0
   d835e:	9001      	str	r0, [sp, #4]
   d8360:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d8362:	f002 f8af 	bl	da4c4 <os_mutex_recursive_lock>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8366:	f105 0180 	add.w	r1, r5, #128	; 0x80
   d836a:	f105 0090 	add.w	r0, r5, #144	; 0x90
   d836e:	f7ff ffe3 	bl	d8338 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (result == 0) {
   d8372:	4604      	mov	r4, r0
   d8374:	b950      	cbnz	r0, d838c <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
            result = fileQueue.getQueueLen();
   d8376:	1d28      	adds	r0, r5, #4
   d8378:	f002 f83c 	bl	da3f4 <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   d837c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   d8380:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   d8382:	b11b      	cbz	r3, d838c <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
   d8384:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   d8388:	b903      	cbnz	r3, d838c <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
                result++;
   d838a:	3401      	adds	r4, #1
    WITH_LOCK(*this) {
   d838c:	a801      	add	r0, sp, #4
   d838e:	f7ff fe97 	bl	d80c0 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d8392:	4620      	mov	r0, r4
   d8394:	b003      	add	sp, #12
   d8396:	bd30      	pop	{r4, r5, pc}

000d8398 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   d8398:	b513      	push	{r0, r1, r4, lr}
   d839a:	4604      	mov	r4, r0
   d839c:	f002 fbac 	bl	daaf8 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d83a0:	b190      	cbz	r0, d83c8 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   d83a2:	f002 f8c7 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   d83a6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   d83aa:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   d83ae:	4b0d      	ldr	r3, [pc, #52]	; (d83e4 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   d83b0:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   d83b4:	9300      	str	r3, [sp, #0]
   d83b6:	4669      	mov	r1, sp
   d83b8:	2300      	movs	r3, #0
   d83ba:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d83be:	9301      	str	r3, [sp, #4]
   d83c0:	f7ff fe4e 	bl	d8060 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d83c4:	b002      	add	sp, #8
   d83c6:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   d83c8:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   d83cc:	b11b      	cbz	r3, d83d6 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   d83ce:	2301      	movs	r3, #1
   d83d0:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   d83d4:	e7f6      	b.n	d83c4 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   d83d6:	4620      	mov	r0, r4
   d83d8:	f7ff ffbf 	bl	d835a <_ZN17PublishQueuePosix12getNumEventsEv>
   d83dc:	2800      	cmp	r0, #0
   d83de:	d0f6      	beq.n	d83ce <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   d83e0:	e7f0      	b.n	d83c4 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   d83e2:	bf00      	nop
   d83e4:	000d81f9 	.word	0x000d81f9

000d83e8 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   d83e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d83ec:	4604      	mov	r4, r0
   d83ee:	9001      	str	r0, [sp, #4]
   d83f0:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d83f2:	f002 f867 	bl	da4c4 <os_mutex_recursive_lock>
   d83f6:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d83fa:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d83fe:	f7ff ff9b 	bl	d8338 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (ramQueue.size() > ramQueueSize) {
   d8402:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d8404:	4283      	cmp	r3, r0
   d8406:	d202      	bcs.n	d840e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
            writeQueueToFiles();
   d8408:	4620      	mov	r0, r4
   d840a:	f7ff fe77 	bl	d80fc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   d840e:	f8df 8048 	ldr.w	r8, [pc, #72]	; d8458 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x70>
   d8412:	4f10      	ldr	r7, [pc, #64]	; (d8454 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x6c>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   d8414:	1d26      	adds	r6, r4, #4
   d8416:	4630      	mov	r0, r6
   d8418:	f001 ffec 	bl	da3f4 <_ZNK14SequentialFile11getQueueLenEv>
   d841c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   d841e:	4298      	cmp	r0, r3
   d8420:	dc05      	bgt.n	d842e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x46>
    WITH_LOCK(*this) {
   d8422:	a801      	add	r0, sp, #4
   d8424:	f7ff fe4c 	bl	d80c0 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d8428:	b002      	add	sp, #8
   d842a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            int fileNum = fileQueue.getFileFromQueue(true);
   d842e:	2101      	movs	r1, #1
   d8430:	4630      	mov	r0, r6
   d8432:	f001 ff91 	bl	da358 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   d8436:	4605      	mov	r5, r0
   d8438:	2800      	cmp	r0, #0
   d843a:	d0ec      	beq.n	d8416 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
                fileQueue.removeFileNum(fileNum, false);
   d843c:	4601      	mov	r1, r0
   d843e:	2200      	movs	r2, #0
   d8440:	4630      	mov	r0, r6
   d8442:	f001 fdc5 	bl	d9fd0 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   d8446:	462a      	mov	r2, r5
   d8448:	4641      	mov	r1, r8
   d844a:	4638      	mov	r0, r7
   d844c:	f7fb fe3c 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d8450:	e7e1      	b.n	d8416 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
   d8452:	bf00      	nop
   d8454:	2003e260 	.word	0x2003e260
   d8458:	000df987 	.word	0x000df987

000d845c <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   d845c:	b513      	push	{r0, r1, r4, lr}
   d845e:	4604      	mov	r4, r0
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   d8460:	2000      	movs	r0, #0
   d8462:	f002 faf1 	bl	daa48 <system_thread_get_state>
   d8466:	2801      	cmp	r0, #1
   d8468:	d005      	beq.n	d8476 <_ZN17PublishQueuePosix5setupEv+0x1a>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   d846a:	4912      	ldr	r1, [pc, #72]	; (d84b4 <_ZN17PublishQueuePosix5setupEv+0x58>)
   d846c:	4812      	ldr	r0, [pc, #72]	; (d84b8 <_ZN17PublishQueuePosix5setupEv+0x5c>)
   d846e:	f7fd f9fc 	bl	d586a <_ZNK5spark6Logger5errorEPKcz>
}
   d8472:	b002      	add	sp, #8
   d8474:	bd10      	pop	{r4, pc}
    os_mutex_recursive_create(&mutex);
   d8476:	f104 0074 	add.w	r0, r4, #116	; 0x74
   d847a:	f002 f813 	bl	da4a4 <os_mutex_recursive_create>
   d847e:	4a0f      	ldr	r2, [pc, #60]	; (d84bc <_ZN17PublishQueuePosix5setupEv+0x60>)
   d8480:	2300      	movs	r3, #0
   d8482:	2100      	movs	r1, #0
   d8484:	f44f 6004 	mov.w	r0, #2112	; 0x840
   d8488:	f002 fabe 	bl	daa08 <system_subscribe_event>
    BackgroundPublishRK::instance().start();
   d848c:	f7fd ff36 	bl	d62fc <_ZN19BackgroundPublishRK8instanceEv>
   d8490:	f7fe f858 	bl	d6544 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   d8494:	1d20      	adds	r0, r4, #4
   d8496:	f001 fedb 	bl	da250 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   d849a:	4620      	mov	r0, r4
   d849c:	f7ff ffa4 	bl	d83e8 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   d84a0:	4b07      	ldr	r3, [pc, #28]	; (d84c0 <_ZN17PublishQueuePosix5setupEv+0x64>)
   d84a2:	9300      	str	r3, [sp, #0]
   d84a4:	4669      	mov	r1, sp
   d84a6:	2300      	movs	r3, #0
   d84a8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d84ac:	9301      	str	r3, [sp, #4]
   d84ae:	f7ff fdd7 	bl	d8060 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d84b2:	e7de      	b.n	d8472 <_ZN17PublishQueuePosix5setupEv+0x16>
   d84b4:	000df99a 	.word	0x000df99a
   d84b8:	2003e260 	.word	0x2003e260
   d84bc:	000d81c1 	.word	0x000d81c1
   d84c0:	000d8399 	.word	0x000d8399

000d84c4 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d84c4:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d84c6:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d84c8:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d84ca:	b163      	cbz	r3, d84e6 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d84cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d84ce:	6945      	ldr	r5, [r0, #20]
   d84d0:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d84d2:	42ae      	cmp	r6, r5
   d84d4:	d904      	bls.n	d84e0 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x1c>
   d84d6:	f855 0b04 	ldr.w	r0, [r5], #4
   d84da:	f7fb fde0 	bl	d409e <_ZdlPv>
   d84de:	e7f8      	b.n	d84d2 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   d84e0:	6820      	ldr	r0, [r4, #0]
   d84e2:	f7fb fddc 	bl	d409e <_ZdlPv>
    }
   d84e6:	4620      	mov	r0, r4
   d84e8:	bd70      	pop	{r4, r5, r6, pc}

000d84ea <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   d84ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d84ee:	4606      	mov	r6, r0
   d84f0:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d84f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d84f4:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d84f6:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d84f8:	1a47      	subs	r7, r0, r1
   d84fa:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d84fe:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d8500:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   d8504:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d8506:	d927      	bls.n	d8558 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   d8508:	1b5d      	subs	r5, r3, r5
   d850a:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d850c:	6832      	ldr	r2, [r6, #0]
   d850e:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d8510:	b10c      	cbz	r4, d8516 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   d8512:	ea4f 0489 	mov.w	r4, r9, lsl #2
   d8516:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d8518:	4414      	add	r4, r2
   d851a:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d851c:	42a1      	cmp	r1, r4
   d851e:	eba3 0201 	sub.w	r2, r3, r1
   d8522:	d913      	bls.n	d854c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   d8524:	4299      	cmp	r1, r3
   d8526:	d002      	beq.n	d852e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d8528:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d852a:	f006 f97b 	bl	de824 <memmove>
	_M_node = __new_node;
   d852e:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   d8530:	6823      	ldr	r3, [r4, #0]
   d8532:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8534:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d8538:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d853a:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   d853c:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   d853e:	59e3      	ldr	r3, [r4, r7]
   d8540:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8542:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d8546:	6233      	str	r3, [r6, #32]
    }
   d8548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d854c:	4299      	cmp	r1, r3
   d854e:	d0ee      	beq.n	d852e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d8550:	1d38      	adds	r0, r7, #4
   d8552:	1a80      	subs	r0, r0, r2
   d8554:	4420      	add	r0, r4
   d8556:	e7e8      	b.n	d852a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d8558:	f103 0802 	add.w	r8, r3, #2
   d855c:	454b      	cmp	r3, r9
   d855e:	bf2c      	ite	cs
   d8560:	4498      	addcs	r8, r3
   d8562:	44c8      	addcc	r8, r9
	if (__n > this->max_size())
   d8564:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   d8568:	d301      	bcc.n	d856e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   d856a:	f005 fcc7 	bl	ddefc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d856e:	ea4f 0088 	mov.w	r0, r8, lsl #2
   d8572:	f7fb fd90 	bl	d4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d8576:	eba8 0505 	sub.w	r5, r8, r5
   d857a:	086d      	lsrs	r5, r5, #1
   d857c:	4682      	mov	sl, r0
   d857e:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d8580:	b10c      	cbz	r4, d8586 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   d8582:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   d8586:	6a72      	ldr	r2, [r6, #36]	; 0x24
   d8588:	6971      	ldr	r1, [r6, #20]
   d858a:	3204      	adds	r2, #4
	                 + (__add_at_front ? __nodes_to_add : 0);
   d858c:	442c      	add	r4, r5
	  if (_Num)
   d858e:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d8590:	4454      	add	r4, sl
   d8592:	d003      	beq.n	d859c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d8594:	1a52      	subs	r2, r2, r1
   d8596:	4620      	mov	r0, r4
   d8598:	f006 f944 	bl	de824 <memmove>
	::operator delete(__p);
   d859c:	6830      	ldr	r0, [r6, #0]
   d859e:	f7fb fd7e 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d85a2:	e9c6 a800 	strd	sl, r8, [r6]
   d85a6:	e7c2      	b.n	d852e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>

000d85a8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d85a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d85ac:	b086      	sub	sp, #24
   d85ae:	4604      	mov	r4, r0
   d85b0:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   d85b4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d85b8:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d85ba:	460f      	mov	r7, r1
   d85bc:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d85be:	f7ff fc3b 	bl	d7e38 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   d85c2:	4605      	mov	r5, r0
   d85c4:	2800      	cmp	r0, #0
   d85c6:	d042      	beq.n	d864e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xa6>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   d85c8:	4b43      	ldr	r3, [pc, #268]	; (d86d8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   d85ca:	4944      	ldr	r1, [pc, #272]	; (d86dc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x134>)
   d85cc:	4844      	ldr	r0, [pc, #272]	; (d86e0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d85ce:	2e00      	cmp	r6, #0
   d85d0:	bf18      	it	ne
   d85d2:	4633      	movne	r3, r6
   d85d4:	463a      	mov	r2, r7
   d85d6:	f7fd f931 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
   d85da:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d85dc:	9405      	str	r4, [sp, #20]
   d85de:	f001 ff71 	bl	da4c4 <os_mutex_recursive_lock>
	    != this->_M_impl._M_finish._M_last - 1)
   d85e2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   d85e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   d85ea:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   d85ec:	4293      	cmp	r3, r2
   d85ee:	f104 0878 	add.w	r8, r4, #120	; 0x78
   d85f2:	f104 0690 	add.w	r6, r4, #144	; 0x90
   d85f6:	f104 0780 	add.w	r7, r4, #128	; 0x80
   d85fa:	d02b      	beq.n	d8654 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xac>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d85fc:	b103      	cbz	r3, d8600 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x58>
   d85fe:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d8600:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   d8604:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   d8606:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d8608:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   d860c:	4628      	mov	r0, r5
   d860e:	f001 fef1 	bl	da3f4 <_ZNK14SequentialFile11getQueueLenEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8612:	4639      	mov	r1, r7
   d8614:	9003      	str	r0, [sp, #12]
   d8616:	4630      	mov	r0, r6
   d8618:	f7ff fe8e 	bl	d8338 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
   d861c:	9002      	str	r0, [sp, #8]
   d861e:	f002 fa6b 	bl	daaf8 <spark_cloud_flag_connected>
   d8622:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   d8626:	9000      	str	r0, [sp, #0]
   d8628:	492e      	ldr	r1, [pc, #184]	; (d86e4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x13c>)
   d862a:	482d      	ldr	r0, [pc, #180]	; (d86e0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d862c:	f7fd f906 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d8630:	4628      	mov	r0, r5
   d8632:	f001 fedf 	bl	da3f4 <_ZNK14SequentialFile11getQueueLenEv>
   d8636:	2800      	cmp	r0, #0
   d8638:	d03e      	beq.n	d86b8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x110>
            writeQueueToFiles();
   d863a:	4620      	mov	r0, r4
   d863c:	f7ff fd5e 	bl	d80fc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   d8640:	4620      	mov	r0, r4
   d8642:	f7ff fed1 	bl	d83e8 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    WITH_LOCK(*this) {
   d8646:	a805      	add	r0, sp, #20
   d8648:	f7ff fd3a 	bl	d80c0 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
    return true;
   d864c:	2001      	movs	r0, #1
}
   d864e:	b006      	add	sp, #24
   d8650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8654:	4639      	mov	r1, r7
   d8656:	4630      	mov	r0, r6
   d8658:	f7ff fe6e 	bl	d8338 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d865c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d8660:	4298      	cmp	r0, r3
   d8662:	d102      	bne.n	d866a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xc2>
	  __throw_length_error(
   d8664:	4820      	ldr	r0, [pc, #128]	; (d86e8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x140>)
   d8666:	f005 fc4c 	bl	ddf02 <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d866a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d866e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   d8670:	1a9a      	subs	r2, r3, r2
   d8672:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   d8674:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d8678:	2b01      	cmp	r3, #1
   d867a:	d804      	bhi.n	d8686 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xde>
	  _M_reallocate_map(__nodes_to_add, false);
   d867c:	2200      	movs	r2, #0
   d867e:	2101      	movs	r1, #1
   d8680:	4640      	mov	r0, r8
   d8682:	f7ff ff32 	bl	d84ea <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8686:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d868a:	f8d4 809c 	ldr.w	r8, [r4, #156]	; 0x9c
   d868e:	f7fb fd02 	bl	d4096 <_Znwj>
   d8692:	f8c8 0004 	str.w	r0, [r8, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d8696:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d869a:	b103      	cbz	r3, d869e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf6>
   d869c:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d869e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d86a2:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d86a4:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   d86a8:	685b      	ldr	r3, [r3, #4]
   d86aa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   d86ae:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d86b2:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   d86b6:	e7a6      	b.n	d8606 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x5e>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d86b8:	4639      	mov	r1, r7
   d86ba:	4630      	mov	r0, r6
   d86bc:	f7ff fe3c 	bl	d8338 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d86c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d86c2:	4283      	cmp	r3, r0
   d86c4:	d3b9      	bcc.n	d863a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
   d86c6:	f002 fa17 	bl	daaf8 <spark_cloud_flag_connected>
   d86ca:	2800      	cmp	r0, #0
   d86cc:	d0b5      	beq.n	d863a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
            _log.trace("queued to ramQueue");
   d86ce:	4907      	ldr	r1, [pc, #28]	; (d86ec <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x144>)
   d86d0:	4803      	ldr	r0, [pc, #12]	; (d86e0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d86d2:	f7fd f8b3 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
   d86d6:	e7b3      	b.n	d8640 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
   d86d8:	000dffd4 	.word	0x000dffd4
   d86dc:	000df9bd 	.word	0x000df9bd
   d86e0:	2003e260 	.word	0x2003e260
   d86e4:	000dfa15 	.word	0x000dfa15
   d86e8:	000df9e5 	.word	0x000df9e5
   d86ec:	000dfa41 	.word	0x000dfa41

000d86f0 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   d86f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   d86f2:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   d86f6:	4604      	mov	r4, r0
    if (!publishComplete) {
   d86f8:	2b00      	cmp	r3, #0
   d86fa:	d041      	beq.n	d8780 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   d86fc:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
   d8700:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
   d8704:	2b00      	cmp	r3, #0
   d8706:	d03d      	beq.n	d8784 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   d8708:	4952      	ldr	r1, [pc, #328]	; (d8854 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   d870a:	4853      	ldr	r0, [pc, #332]	; (d8858 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d870c:	f7fd f896 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   d8710:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d8714:	b1d3      	cbz	r3, d874c <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   d8716:	1d26      	adds	r6, r4, #4
   d8718:	2100      	movs	r1, #0
   d871a:	4630      	mov	r0, r6
   d871c:	f001 fe1c 	bl	da358 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   d8720:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d8724:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   d8726:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   d8728:	d10d      	bne.n	d8746 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   d872a:	2101      	movs	r1, #1
   d872c:	4630      	mov	r0, r6
   d872e:	f001 fe13 	bl	da358 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   d8732:	2200      	movs	r2, #0
   d8734:	4629      	mov	r1, r5
   d8736:	4630      	mov	r0, r6
   d8738:	f001 fc4a 	bl	d9fd0 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   d873c:	4947      	ldr	r1, [pc, #284]	; (d885c <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   d873e:	4846      	ldr	r0, [pc, #280]	; (d8858 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d8740:	462a      	mov	r2, r5
   d8742:	f7fd f87b 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   d8746:	2300      	movs	r3, #0
   d8748:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   d874c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d8750:	b110      	cbz	r0, d8758 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   d8752:	2143      	movs	r1, #67	; 0x43
   d8754:	f005 fbcc 	bl	ddef0 <_ZdlPvj>
        curEvent = NULL;
   d8758:	2300      	movs	r3, #0
   d875a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   d875e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   d8762:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   d8766:	4b3e      	ldr	r3, [pc, #248]	; (d8860 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   d8768:	9300      	str	r3, [sp, #0]
   d876a:	4669      	mov	r1, sp
   d876c:	2300      	movs	r3, #0
   d876e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8772:	9301      	str	r3, [sp, #4]
   d8774:	f7ff fc74 	bl	d8060 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d8778:	f001 fedc 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d877c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   d8780:	b002      	add	sp, #8
   d8782:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   d8784:	4937      	ldr	r1, [pc, #220]	; (d8864 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   d8786:	4834      	ldr	r0, [pc, #208]	; (d8858 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d8788:	f7fd f858 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   d878c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   d8790:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   d8794:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d8798:	b14b      	cbz	r3, d87ae <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   d879a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d879e:	b110      	cbz	r0, d87a6 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   d87a0:	2143      	movs	r1, #67	; 0x43
   d87a2:	f005 fba5 	bl	ddef0 <_ZdlPvj>
            curEvent = NULL;
   d87a6:	2300      	movs	r3, #0
   d87a8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   d87ac:	e7db      	b.n	d8766 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   d87ae:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d87b0:	9400      	str	r4, [sp, #0]
   d87b2:	f001 fe87 	bl	da4c4 <os_mutex_recursive_lock>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   d87b6:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   d87ba:	4293      	cmp	r3, r2
   d87bc:	d013      	beq.n	d87e6 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf6>
	    _Alloc_traits::construct(this->_M_impl,
   d87be:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   d87c2:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   d87c6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   d87ca:	3b04      	subs	r3, #4
   d87cc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            WITH_LOCK(*this) {
   d87d0:	4668      	mov	r0, sp
   d87d2:	f7ff fc75 	bl	d80c0 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
            _log.trace("writing to files after publish failure");
   d87d6:	4924      	ldr	r1, [pc, #144]	; (d8868 <_ZN17PublishQueuePosix16statePublishWaitEv+0x178>)
   d87d8:	481f      	ldr	r0, [pc, #124]	; (d8858 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d87da:	f7fd f82f 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   d87de:	4620      	mov	r0, r4
   d87e0:	f7ff fc8c 	bl	d80fc <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   d87e4:	e7bf      	b.n	d8766 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d87e6:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d87ea:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d87ee:	f7ff fda3 	bl	d8338 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d87f2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d87f6:	4298      	cmp	r0, r3
   d87f8:	f104 0578 	add.w	r5, r4, #120	; 0x78
   d87fc:	d102      	bne.n	d8804 <_ZN17PublishQueuePosix16statePublishWaitEv+0x114>
	  __throw_length_error(
   d87fe:	481b      	ldr	r0, [pc, #108]	; (d886c <_ZN17PublishQueuePosix16statePublishWaitEv+0x17c>)
   d8800:	f005 fb7f 	bl	ddf02 <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   d8804:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   d8808:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   d880a:	429a      	cmp	r2, r3
   d880c:	d104      	bne.n	d8818 <_ZN17PublishQueuePosix16statePublishWaitEv+0x128>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   d880e:	2201      	movs	r2, #1
   d8810:	4611      	mov	r1, r2
   d8812:	4628      	mov	r0, r5
   d8814:	f7ff fe69 	bl	d84ea <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8818:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   d881c:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   d8820:	f7fb fc39 	bl	d4096 <_Znwj>
   d8824:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   d8828:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   d882c:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   d882e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   d8832:	f853 3c04 	ldr.w	r3, [r3, #-4]
   d8836:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   d883a:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d883e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   d8842:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   d8846:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	    _Alloc_traits::construct(this->_M_impl,
   d884a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d884e:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   d8852:	e7bd      	b.n	d87d0 <_ZN17PublishQueuePosix16statePublishWaitEv+0xe0>
   d8854:	000dfa54 	.word	0x000dfa54
   d8858:	2003e260 	.word	0x2003e260
   d885c:	000dfa67 	.word	0x000dfa67
   d8860:	000d81f9 	.word	0x000d81f9
   d8864:	000dfa77 	.word	0x000dfa77
   d8868:	000dfa89 	.word	0x000dfa89
   d886c:	000df9e5 	.word	0x000df9e5

000d8870 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   d8870:	4b01      	ldr	r3, [pc, #4]	; (d8878 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   d8872:	4a02      	ldr	r2, [pc, #8]	; (d887c <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   d8874:	601a      	str	r2, [r3, #0]
}
   d8876:	4770      	bx	lr
   d8878:	2003e260 	.word	0x2003e260
   d887c:	000dfab0 	.word	0x000dfab0

000d8880 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d8880:	b510      	push	{r4, lr}
   d8882:	4b07      	ldr	r3, [pc, #28]	; (d88a0 <_ZN17PublishQueuePosixD1Ev+0x20>)
   d8884:	4604      	mov	r4, r0
   d8886:	f840 3bc0 	str.w	r3, [r0], #192
   d888a:	f7fd fcf3 	bl	d6274 <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d888e:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d8892:	f7ff fe17 	bl	d84c4 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   d8896:	1d20      	adds	r0, r4, #4
   d8898:	f001 fc18 	bl	da0cc <_ZN14SequentialFileD1Ev>
}
   d889c:	4620      	mov	r0, r4
   d889e:	bd10      	pop	{r4, pc}
   d88a0:	000dfac4 	.word	0x000dfac4

000d88a4 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d88a4:	b510      	push	{r4, lr}
   d88a6:	4604      	mov	r4, r0
}
   d88a8:	f7ff ffea 	bl	d8880 <_ZN17PublishQueuePosixD1Ev>
   d88ac:	4620      	mov	r0, r4
   d88ae:	21d0      	movs	r1, #208	; 0xd0
   d88b0:	f005 fb1e 	bl	ddef0 <_ZdlPvj>
   d88b4:	4620      	mov	r0, r4
   d88b6:	bd10      	pop	{r4, pc}

000d88b8 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   d88b8:	6001      	str	r1, [r0, #0]
   d88ba:	7102      	strb	r2, [r0, #4]
{
}
   d88bc:	4770      	bx	lr

000d88be <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   d88be:	6800      	ldr	r0, [r0, #0]
   d88c0:	6803      	ldr	r3, [r0, #0]
   d88c2:	68db      	ldr	r3, [r3, #12]
   d88c4:	4718      	bx	r3

000d88c6 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   d88c6:	6800      	ldr	r0, [r0, #0]
   d88c8:	6803      	ldr	r3, [r0, #0]
   d88ca:	6a1b      	ldr	r3, [r3, #32]
   d88cc:	4718      	bx	r3

000d88ce <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   d88ce:	6800      	ldr	r0, [r0, #0]
   d88d0:	6803      	ldr	r3, [r0, #0]
   d88d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d88d4:	4718      	bx	r3

000d88d6 <_ZN10RHDatagram11setHeaderToEh>:
    return _thisAddress;
}

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   d88d6:	6800      	ldr	r0, [r0, #0]
   d88d8:	6803      	ldr	r3, [r0, #0]
   d88da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d88dc:	4718      	bx	r3

000d88de <_ZN10RHDatagram6sendtoEPhhh>:
{
   d88de:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d88e0:	4605      	mov	r5, r0
   d88e2:	460c      	mov	r4, r1
    setHeaderTo(address);
   d88e4:	4619      	mov	r1, r3
{
   d88e6:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   d88e8:	f7ff fff5 	bl	d88d6 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   d88ec:	6828      	ldr	r0, [r5, #0]
   d88ee:	9a01      	ldr	r2, [sp, #4]
   d88f0:	6803      	ldr	r3, [r0, #0]
   d88f2:	695b      	ldr	r3, [r3, #20]
   d88f4:	4621      	mov	r1, r4
}
   d88f6:	b003      	add	sp, #12
   d88f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   d88fc:	4718      	bx	r3

000d88fe <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   d88fe:	6800      	ldr	r0, [r0, #0]
   d8900:	6803      	ldr	r3, [r0, #0]
   d8902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8904:	4718      	bx	r3

000d8906 <_ZN10RHDatagram14setThisAddressEh>:
{
   d8906:	b538      	push	{r3, r4, r5, lr}
   d8908:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   d890a:	6800      	ldr	r0, [r0, #0]
   d890c:	6803      	ldr	r3, [r0, #0]
{
   d890e:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   d8910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8912:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   d8914:	4629      	mov	r1, r5
   d8916:	4620      	mov	r0, r4
   d8918:	f7ff fff1 	bl	d88fe <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   d891c:	7125      	strb	r5, [r4, #4]
}
   d891e:	bd38      	pop	{r3, r4, r5, pc}

000d8920 <_ZN10RHDatagram4initEv>:
{
   d8920:	b538      	push	{r3, r4, r5, lr}
   d8922:	4604      	mov	r4, r0
    bool ret = _driver.init();
   d8924:	6800      	ldr	r0, [r0, #0]
   d8926:	6803      	ldr	r3, [r0, #0]
   d8928:	689b      	ldr	r3, [r3, #8]
   d892a:	4798      	blx	r3
    if (ret)
   d892c:	4605      	mov	r5, r0
   d892e:	b118      	cbz	r0, d8938 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   d8930:	7921      	ldrb	r1, [r4, #4]
   d8932:	4620      	mov	r0, r4
   d8934:	f7ff ffe7 	bl	d8906 <_ZN10RHDatagram14setThisAddressEh>
}
   d8938:	4628      	mov	r0, r5
   d893a:	bd38      	pop	{r3, r4, r5, pc}

000d893c <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   d893c:	6800      	ldr	r0, [r0, #0]
   d893e:	6803      	ldr	r3, [r0, #0]
   d8940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8942:	4718      	bx	r3

000d8944 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   d8944:	6800      	ldr	r0, [r0, #0]
   d8946:	6803      	ldr	r3, [r0, #0]
   d8948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d894a:	4718      	bx	r3

000d894c <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   d894c:	6800      	ldr	r0, [r0, #0]
   d894e:	6803      	ldr	r3, [r0, #0]
   d8950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8952:	4718      	bx	r3

000d8954 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   d8954:	6800      	ldr	r0, [r0, #0]
   d8956:	6803      	ldr	r3, [r0, #0]
   d8958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d895a:	4718      	bx	r3

000d895c <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   d895c:	6800      	ldr	r0, [r0, #0]
   d895e:	6803      	ldr	r3, [r0, #0]
   d8960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8962:	4718      	bx	r3

000d8964 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   d8964:	6800      	ldr	r0, [r0, #0]
   d8966:	6803      	ldr	r3, [r0, #0]
   d8968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d896a:	4718      	bx	r3

000d896c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   d896c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8970:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   d8972:	6800      	ldr	r0, [r0, #0]
{
   d8974:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   d8976:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   d8978:	6803      	ldr	r3, [r0, #0]
   d897a:	691b      	ldr	r3, [r3, #16]
{
   d897c:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   d8980:	4798      	blx	r3
   d8982:	4605      	mov	r5, r0
   d8984:	b1c8      	cbz	r0, d89ba <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   d8986:	b11e      	cbz	r6, d8990 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   d8988:	4620      	mov	r0, r4
   d898a:	f7ff ffe3 	bl	d8954 <_ZN10RHDatagram10headerFromEv>
   d898e:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   d8990:	f1b9 0f00 	cmp.w	r9, #0
   d8994:	d004      	beq.n	d89a0 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   d8996:	4620      	mov	r0, r4
   d8998:	f7ff ffd8 	bl	d894c <_ZN10RHDatagram8headerToEv>
   d899c:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   d89a0:	f1b8 0f00 	cmp.w	r8, #0
   d89a4:	d004      	beq.n	d89b0 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   d89a6:	4620      	mov	r0, r4
   d89a8:	f7ff ffd8 	bl	d895c <_ZN10RHDatagram8headerIdEv>
   d89ac:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   d89b0:	b11f      	cbz	r7, d89ba <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   d89b2:	4620      	mov	r0, r4
   d89b4:	f7ff ffd6 	bl	d8964 <_ZN10RHDatagram11headerFlagsEv>
   d89b8:	7038      	strb	r0, [r7, #0]
}
   d89ba:	4628      	mov	r0, r5
   d89bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d89c0 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   d89c0:	2001      	movs	r0, #1
   d89c2:	4770      	bx	lr

000d89c4 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   d89c4:	7903      	ldrb	r3, [r0, #4]
   d89c6:	2b03      	cmp	r3, #3
   d89c8:	d0fc      	beq.n	d89c4 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   d89ca:	2001      	movs	r0, #1
   d89cc:	4770      	bx	lr

000d89ce <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   d89ce:	2000      	movs	r0, #0
   d89d0:	4770      	bx	lr

000d89d2 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   d89d2:	7181      	strb	r1, [r0, #6]
}
   d89d4:	4770      	bx	lr

000d89d6 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   d89d6:	7141      	strb	r1, [r0, #5]
}
   d89d8:	4770      	bx	lr

000d89da <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   d89da:	72c1      	strb	r1, [r0, #11]
}
   d89dc:	4770      	bx	lr

000d89de <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   d89de:	7301      	strb	r1, [r0, #12]
}
   d89e0:	4770      	bx	lr

000d89e2 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   d89e2:	7341      	strb	r1, [r0, #13]
}
   d89e4:	4770      	bx	lr

000d89e6 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   d89e6:	7b83      	ldrb	r3, [r0, #14]
   d89e8:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   d89ec:	4311      	orrs	r1, r2
   d89ee:	7381      	strb	r1, [r0, #14]
}
   d89f0:	4770      	bx	lr

000d89f2 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   d89f2:	79c0      	ldrb	r0, [r0, #7]
}
   d89f4:	4770      	bx	lr

000d89f6 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   d89f6:	7a00      	ldrb	r0, [r0, #8]
}
   d89f8:	4770      	bx	lr

000d89fa <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   d89fa:	7a40      	ldrb	r0, [r0, #9]
}
   d89fc:	4770      	bx	lr

000d89fe <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   d89fe:	7a80      	ldrb	r0, [r0, #10]
}
   d8a00:	4770      	bx	lr

000d8a02 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   d8a02:	8a00      	ldrh	r0, [r0, #16]
}
   d8a04:	b200      	sxth	r0, r0
   d8a06:	4770      	bx	lr

000d8a08 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   d8a08:	7900      	ldrb	r0, [r0, #4]
}
   d8a0a:	4770      	bx	lr

000d8a0c <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   d8a0c:	7101      	strb	r1, [r0, #4]
}
   d8a0e:	4770      	bx	lr

000d8a10 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   d8a10:	8a40      	ldrh	r0, [r0, #18]
}
   d8a12:	b280      	uxth	r0, r0
   d8a14:	4770      	bx	lr

000d8a16 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   d8a16:	8a80      	ldrh	r0, [r0, #20]
}
   d8a18:	b280      	uxth	r0, r0
   d8a1a:	4770      	bx	lr

000d8a1c <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   d8a1c:	8ac0      	ldrh	r0, [r0, #22]
}
   d8a1e:	b280      	uxth	r0, r0
   d8a20:	4770      	bx	lr

000d8a22 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   d8a22:	b538      	push	{r3, r4, r5, lr}
   d8a24:	4605      	mov	r5, r0
   d8a26:	460c      	mov	r4, r1
    while (!available())
   d8a28:	682b      	ldr	r3, [r5, #0]
   d8a2a:	4628      	mov	r0, r5
   d8a2c:	68db      	ldr	r3, [r3, #12]
   d8a2e:	4798      	blx	r3
   d8a30:	b928      	cbnz	r0, d8a3e <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   d8a32:	2c00      	cmp	r4, #0
   d8a34:	d0f8      	beq.n	d8a28 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   d8a36:	4620      	mov	r0, r4
   d8a38:	f002 f976 	bl	dad28 <delay>
   d8a3c:	e7f4      	b.n	d8a28 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   d8a3e:	bd38      	pop	{r3, r4, r5, pc}

000d8a40 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   d8a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8a42:	4605      	mov	r5, r0
   d8a44:	460f      	mov	r7, r1
   d8a46:	4614      	mov	r4, r2
   d8a48:	f001 fd74 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
   d8a4c:	4606      	mov	r6, r0
   d8a4e:	f001 fd71 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d8a52:	1b80      	subs	r0, r0, r6
   d8a54:	42b8      	cmp	r0, r7
   d8a56:	d20a      	bcs.n	d8a6e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   d8a58:	682b      	ldr	r3, [r5, #0]
   d8a5a:	4628      	mov	r0, r5
   d8a5c:	68db      	ldr	r3, [r3, #12]
   d8a5e:	4798      	blx	r3
   d8a60:	b930      	cbnz	r0, d8a70 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   d8a62:	2c00      	cmp	r4, #0
   d8a64:	d0f3      	beq.n	d8a4e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   d8a66:	4620      	mov	r0, r4
   d8a68:	f002 f95e 	bl	dad28 <delay>
   d8a6c:	e7ef      	b.n	d8a4e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   d8a6e:	2000      	movs	r0, #0
}
   d8a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8a72 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   d8a72:	b570      	push	{r4, r5, r6, lr}
   d8a74:	4604      	mov	r4, r0
   d8a76:	460e      	mov	r6, r1
   d8a78:	f001 fd5c 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
   d8a7c:	4605      	mov	r5, r0
   d8a7e:	f001 fd59 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d8a82:	1b40      	subs	r0, r0, r5
   d8a84:	42b0      	cmp	r0, r6
   d8a86:	d204      	bcs.n	d8a92 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   d8a88:	7923      	ldrb	r3, [r4, #4]
   d8a8a:	2b03      	cmp	r3, #3
   d8a8c:	d0f7      	beq.n	d8a7e <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   d8a8e:	2001      	movs	r0, #1
}
   d8a90:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d8a92:	2000      	movs	r0, #0
   d8a94:	e7fc      	b.n	d8a90 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000d8a96 <_ZN15RHGenericDriver7waitCADEv>:
{
   d8a96:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   d8a98:	69c3      	ldr	r3, [r0, #28]
{
   d8a9a:	4604      	mov	r4, r0
    if (!_cad_timeout)
   d8a9c:	b1b3      	cbz	r3, d8acc <_ZN15RHGenericDriver7waitCADEv+0x36>
   d8a9e:	f001 fd49 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d8aa2:	2664      	movs	r6, #100	; 0x64
   d8aa4:	4605      	mov	r5, r0
    while (isChannelActive())
   d8aa6:	6823      	ldr	r3, [r4, #0]
   d8aa8:	4620      	mov	r0, r4
   d8aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8aac:	4798      	blx	r3
   d8aae:	b168      	cbz	r0, d8acc <_ZN15RHGenericDriver7waitCADEv+0x36>
   d8ab0:	f001 fd40 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   d8ab4:	69e3      	ldr	r3, [r4, #28]
   d8ab6:	1b40      	subs	r0, r0, r5
   d8ab8:	4298      	cmp	r0, r3
   d8aba:	d809      	bhi.n	d8ad0 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d8abc:	210a      	movs	r1, #10
   d8abe:	2001      	movs	r0, #1
   d8ac0:	f004 fb1c 	bl	dd0fc <_Z6randomii>
   d8ac4:	4370      	muls	r0, r6
   d8ac6:	f002 f92f 	bl	dad28 <delay>
    while (isChannelActive())
   d8aca:	e7ec      	b.n	d8aa6 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   d8acc:	2001      	movs	r0, #1
}
   d8ace:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   d8ad0:	2000      	movs	r0, #0
   d8ad2:	e7fc      	b.n	d8ace <_ZN15RHGenericDriver7waitCADEv+0x38>

000d8ad4 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   d8ad4:	4a06      	ldr	r2, [pc, #24]	; (d8af0 <_ZN15RHGenericDriverC1Ev+0x1c>)
   d8ad6:	6002      	str	r2, [r0, #0]
   d8ad8:	21ff      	movs	r1, #255	; 0xff
   d8ada:	2200      	movs	r2, #0
   d8adc:	7102      	strb	r2, [r0, #4]
   d8ade:	7141      	strb	r1, [r0, #5]
   d8ae0:	8242      	strh	r2, [r0, #18]
   d8ae2:	72c1      	strb	r1, [r0, #11]
   d8ae4:	8282      	strh	r2, [r0, #20]
   d8ae6:	8181      	strh	r1, [r0, #12]
   d8ae8:	7382      	strb	r2, [r0, #14]
   d8aea:	82c2      	strh	r2, [r0, #22]
   d8aec:	61c2      	str	r2, [r0, #28]
}
   d8aee:	4770      	bx	lr
   d8af0:	000dfad8 	.word	0x000dfad8

000d8af4 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   d8af4:	4770      	bx	lr

000d8af6 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   d8af6:	4770      	bx	lr

000d8af8 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   d8af8:	4770      	bx	lr

000d8afa <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   d8afa:	4770      	bx	lr

000d8afc <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   d8afc:	4770      	bx	lr

000d8afe <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   d8afe:	7141      	strb	r1, [r0, #5]
}
   d8b00:	4770      	bx	lr

000d8b02 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   d8b02:	7181      	strb	r1, [r0, #6]
}
   d8b04:	4770      	bx	lr

000d8b06 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   d8b06:	7101      	strb	r1, [r0, #4]
}
   d8b08:	4770      	bx	lr
	...

000d8b0c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d8b0c:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   d8b0e:	4d03      	ldr	r5, [pc, #12]	; (d8b1c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   d8b10:	6005      	str	r5, [r0, #0]
   d8b12:	7101      	strb	r1, [r0, #4]
   d8b14:	7142      	strb	r2, [r0, #5]
   d8b16:	7183      	strb	r3, [r0, #6]
}
   d8b18:	bd30      	pop	{r4, r5, pc}
   d8b1a:	bf00      	nop
   d8b1c:	000dfb58 	.word	0x000dfb58

000d8b20 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d8b20:	4770      	bx	lr

000d8b22 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d8b22:	b510      	push	{r4, lr}
  }
   d8b24:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d8b26:	4604      	mov	r4, r0
  }
   d8b28:	f005 f9e2 	bl	ddef0 <_ZdlPvj>
   d8b2c:	4620      	mov	r0, r4
   d8b2e:	bd10      	pop	{r4, pc}

000d8b30 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d8b30:	b40e      	push	{r1, r2, r3}
   d8b32:	b503      	push	{r0, r1, lr}
   d8b34:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d8b36:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d8b38:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d8b3c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d8b3e:	f004 faa1 	bl	dd084 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d8b42:	b002      	add	sp, #8
   d8b44:	f85d eb04 	ldr.w	lr, [sp], #4
   d8b48:	b003      	add	sp, #12
   d8b4a:	4770      	bx	lr

000d8b4c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d8b4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8b4e:	4604      	mov	r4, r0
   d8b50:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d8b52:	7922      	ldrb	r2, [r4, #4]
   d8b54:	68a3      	ldr	r3, [r4, #8]
   d8b56:	b132      	cbz	r2, d8b66 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d8b58:	b9a3      	cbnz	r3, d8b84 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d8b5a:	490b      	ldr	r1, [pc, #44]	; (d8b88 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d8b5c:	b002      	add	sp, #8
   d8b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d8b62:	f004 ba5e 	b.w	dd022 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d8b66:	4a09      	ldr	r2, [pc, #36]	; (d8b8c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d8b68:	7b26      	ldrb	r6, [r4, #12]
   d8b6a:	4d09      	ldr	r5, [pc, #36]	; (d8b90 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d8b6c:	4909      	ldr	r1, [pc, #36]	; (d8b94 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d8b6e:	7b64      	ldrb	r4, [r4, #13]
   d8b70:	2e01      	cmp	r6, #1
   d8b72:	bf18      	it	ne
   d8b74:	4629      	movne	r1, r5
   d8b76:	e9cd 1400 	strd	r1, r4, [sp]
   d8b7a:	4907      	ldr	r1, [pc, #28]	; (d8b98 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d8b7c:	f7ff ffd8 	bl	d8b30 <_ZN5Print6printfEPKcz>
  }
   d8b80:	b002      	add	sp, #8
   d8b82:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d8b84:	4a05      	ldr	r2, [pc, #20]	; (d8b9c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d8b86:	e7ef      	b.n	d8b68 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d8b88:	000dfb95 	.word	0x000dfb95
   d8b8c:	000dffd4 	.word	0x000dffd4
   d8b90:	000dfb91 	.word	0x000dfb91
   d8b94:	000dfb8d 	.word	0x000dfb8d
   d8b98:	000dfbab 	.word	0x000dfbab
   d8b9c:	000dfb84 	.word	0x000dfb84

000d8ba0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d8ba0:	b510      	push	{r4, lr}
   d8ba2:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   d8ba4:	f7ff ffb2 	bl	d8b0c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   d8ba8:	4b05      	ldr	r3, [pc, #20]	; (d8bc0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   d8baa:	6023      	str	r3, [r4, #0]
  {
   d8bac:	4b05      	ldr	r3, [pc, #20]	; (d8bc4 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   d8bae:	60a3      	str	r3, [r4, #8]
   d8bb0:	2301      	movs	r3, #1
   d8bb2:	7323      	strb	r3, [r4, #12]
   d8bb4:	2300      	movs	r3, #0
   d8bb6:	6123      	str	r3, [r4, #16]
   d8bb8:	82a3      	strh	r3, [r4, #20]
{
}
   d8bba:	4620      	mov	r0, r4
   d8bbc:	bd10      	pop	{r4, pc}
   d8bbe:	bf00      	nop
   d8bc0:	000dfbe4 	.word	0x000dfbe4
   d8bc4:	000dfbd0 	.word	0x000dfbd0

000d8bc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d8bc8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d8bca:	4c0b      	ldr	r4, [pc, #44]	; (d8bf8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d8bcc:	7821      	ldrb	r1, [r4, #0]
   d8bce:	f3bf 8f5b 	dmb	ish
   d8bd2:	f011 0101 	ands.w	r1, r1, #1
   d8bd6:	d10b      	bne.n	d8bf0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d8bd8:	4620      	mov	r0, r4
   d8bda:	9101      	str	r1, [sp, #4]
   d8bdc:	f7fb fa6c 	bl	d40b8 <__cxa_guard_acquire>
   d8be0:	9901      	ldr	r1, [sp, #4]
   d8be2:	b128      	cbz	r0, d8bf0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d8be4:	4805      	ldr	r0, [pc, #20]	; (d8bfc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d8be6:	f004 fa9f 	bl	dd128 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8bea:	4620      	mov	r0, r4
   d8bec:	f7fb fa69 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d8bf0:	4802      	ldr	r0, [pc, #8]	; (d8bfc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d8bf2:	b002      	add	sp, #8
   d8bf4:	bd10      	pop	{r4, pc}
   d8bf6:	bf00      	nop
   d8bf8:	2003e268 	.word	0x2003e268
   d8bfc:	2003e26c 	.word	0x2003e26c

000d8c00 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   d8c00:	b507      	push	{r0, r1, r2, lr}
   d8c02:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d8c04:	f7ff ffe0 	bl	d8bc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8c08:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   d8c0a:	b003      	add	sp, #12
   d8c0c:	f85d eb04 	ldr.w	lr, [sp], #4
   d8c10:	f004 bb3c 	b.w	dd28c <_ZN8SPIClass8transferEh>

000d8c14 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   d8c14:	b508      	push	{r3, lr}
    }
    void transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   d8c16:	f7ff ffd7 	bl	d8bc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   d8c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d8c1e:	f004 bb3b 	b.w	dd298 <_ZN8SPIClass15attachInterruptEv>

000d8c22 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   d8c22:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   d8c24:	f7ff ffd0 	bl	d8bc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   d8c28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d8c2c:	f004 bb35 	b.w	dd29a <_ZN8SPIClass15detachInterruptEv>

000d8c30 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   d8c30:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   d8c32:	7903      	ldrb	r3, [r0, #4]
   d8c34:	2b04      	cmp	r3, #4
   d8c36:	d020      	beq.n	d8c7a <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   d8c38:	2b03      	cmp	r3, #3
   d8c3a:	d020      	beq.n	d8c7e <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   d8c3c:	2b02      	cmp	r3, #2
   d8c3e:	d020      	beq.n	d8c82 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   d8c40:	4a11      	ldr	r2, [pc, #68]	; (d8c88 <_ZN13RHHardwareSPI5beginEv+0x58>)
   d8c42:	4912      	ldr	r1, [pc, #72]	; (d8c8c <_ZN13RHHardwareSPI5beginEv+0x5c>)
   d8c44:	2b01      	cmp	r3, #1
   d8c46:	bf18      	it	ne
   d8c48:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   d8c4a:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   d8c4c:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   d8c4e:	3901      	subs	r1, #1
   d8c50:	bf18      	it	ne
   d8c52:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   d8c54:	b133      	cbz	r3, d8c64 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   d8c56:	2b01      	cmp	r3, #1
   d8c58:	d004      	beq.n	d8c64 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   d8c5a:	2b02      	cmp	r3, #2
   d8c5c:	d002      	beq.n	d8c64 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   d8c5e:	2b03      	cmp	r3, #3
   d8c60:	bf18      	it	ne
   d8c62:	2300      	movne	r3, #0
class SPISettings : public Printable {
   d8c64:	2400      	movs	r4, #0
   d8c66:	7304      	strb	r4, [r0, #12]
   d8c68:	6102      	str	r2, [r0, #16]
   d8c6a:	7501      	strb	r1, [r0, #20]
   d8c6c:	7543      	strb	r3, [r0, #21]
        instance().begin();
   d8c6e:	f7ff ffab 	bl	d8bc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   d8c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8c76:	f004 ba61 	b.w	dd13c <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   d8c7a:	4a05      	ldr	r2, [pc, #20]	; (d8c90 <_ZN13RHHardwareSPI5beginEv+0x60>)
   d8c7c:	e7e5      	b.n	d8c4a <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   d8c7e:	4a05      	ldr	r2, [pc, #20]	; (d8c94 <_ZN13RHHardwareSPI5beginEv+0x64>)
   d8c80:	e7e3      	b.n	d8c4a <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   d8c82:	4a05      	ldr	r2, [pc, #20]	; (d8c98 <_ZN13RHHardwareSPI5beginEv+0x68>)
   d8c84:	e7e1      	b.n	d8c4a <_ZN13RHHardwareSPI5beginEv+0x1a>
   d8c86:	bf00      	nop
   d8c88:	001e8480 	.word	0x001e8480
   d8c8c:	000f4240 	.word	0x000f4240
   d8c90:	00f42400 	.word	0x00f42400
   d8c94:	007a1200 	.word	0x007a1200
   d8c98:	003d0900 	.word	0x003d0900

000d8c9c <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   d8c9c:	b508      	push	{r3, lr}
        instance().end();
   d8c9e:	f7ff ff93 	bl	d8bc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   d8ca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d8ca6:	f004 ba5a 	b.w	dd15e <_ZN8SPIClass3endEv>

000d8caa <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   d8caa:	b510      	push	{r4, lr}
   d8cac:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d8cae:	f7ff ff8b 	bl	d8bc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8cb2:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   d8cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8cba:	f004 ba79 	b.w	dd1b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d8cbe <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   d8cbe:	b508      	push	{r3, lr}
        instance().endTransaction();
   d8cc0:	f7ff ff82 	bl	d8bc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   d8cc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d8cc8:	f004 ba58 	b.w	dd17c <_ZN8SPIClass14endTransactionEv>

000d8ccc <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   d8ccc:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   d8cce:	f7ff ff7b 	bl	d8bc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   d8cd2:	bd08      	pop	{r3, pc}

000d8cd4 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   d8cd4:	2300      	movs	r3, #0
   d8cd6:	4802      	ldr	r0, [pc, #8]	; (d8ce0 <_GLOBAL__sub_I_hardware_spi+0xc>)
   d8cd8:	461a      	mov	r2, r3
   d8cda:	4619      	mov	r1, r3
   d8cdc:	f7ff bf60 	b.w	d8ba0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   d8ce0:	2003e274 	.word	0x2003e274

000d8ce4 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   d8ce4:	2a01      	cmp	r2, #1
   d8ce6:	d105      	bne.n	d8cf4 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   d8ce8:	7a00      	ldrb	r0, [r0, #8]
   d8cea:	780b      	ldrb	r3, [r1, #0]
   d8cec:	1a1b      	subs	r3, r3, r0
   d8cee:	4258      	negs	r0, r3
   d8cf0:	4158      	adcs	r0, r3
   d8cf2:	4770      	bx	lr
   d8cf4:	2000      	movs	r0, #0
}
   d8cf6:	4770      	bx	lr

000d8cf8 <_ZN6RHMesh5doArpEh>:
{
   d8cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d8cfc:	4d26      	ldr	r5, [pc, #152]	; (d8d98 <_ZN6RHMesh5doArpEh+0xa0>)
   d8cfe:	2301      	movs	r3, #1
{
   d8d00:	b087      	sub	sp, #28
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d8d02:	702b      	strb	r3, [r5, #0]
    p->destlen = 1; 
   d8d04:	706b      	strb	r3, [r5, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d8d06:	2300      	movs	r3, #0
{
   d8d08:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   d8d0a:	70a9      	strb	r1, [r5, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d8d0c:	9300      	str	r3, [sp, #0]
   d8d0e:	2203      	movs	r2, #3
   d8d10:	23ff      	movs	r3, #255	; 0xff
   d8d12:	4629      	mov	r1, r5
{
   d8d14:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d8d16:	f000 fbe7 	bl	d94e8 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   d8d1a:	b120      	cbz	r0, d8d26 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   d8d1c:	2400      	movs	r4, #0
}
   d8d1e:	4620      	mov	r0, r4
   d8d20:	b007      	add	sp, #28
   d8d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   d8d26:	23fa      	movs	r3, #250	; 0xfa
   d8d28:	f88d 3017 	strb.w	r3, [sp, #23]
   d8d2c:	f001 fc02 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   d8d30:	f106 0904 	add.w	r9, r6, #4
   d8d34:	4680      	mov	r8, r0
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d8d36:	46aa      	mov	sl, r5
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   d8d38:	f508 647a 	add.w	r4, r8, #4000	; 0xfa0
   d8d3c:	f001 fbfa 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
   d8d40:	1a20      	subs	r0, r4, r0
   d8d42:	2800      	cmp	r0, #0
   d8d44:	ddea      	ble.n	d8d1c <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   d8d46:	b281      	uxth	r1, r0
   d8d48:	2200      	movs	r2, #0
   d8d4a:	4648      	mov	r0, r9
   d8d4c:	f7ff fdbf 	bl	d88ce <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d8d50:	2800      	cmp	r0, #0
   d8d52:	d0f3      	beq.n	d8d3c <_ZN6RHMesh5doArpEh+0x44>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d8d54:	2300      	movs	r3, #0
   d8d56:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d8d5a:	e9cd 3300 	strd	r3, r3, [sp]
   d8d5e:	f10d 0217 	add.w	r2, sp, #23
   d8d62:	4651      	mov	r1, sl
   d8d64:	4630      	mov	r0, r6
   d8d66:	f000 fbc9 	bl	d94fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d8d6a:	4604      	mov	r4, r0
   d8d6c:	2800      	cmp	r0, #0
   d8d6e:	d0e3      	beq.n	d8d38 <_ZN6RHMesh5doArpEh+0x40>
		if (   messageLen > 1
   d8d70:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d8d74:	2b01      	cmp	r3, #1
   d8d76:	d9df      	bls.n	d8d38 <_ZN6RHMesh5doArpEh+0x40>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d8d78:	f895 b000 	ldrb.w	fp, [r5]
   d8d7c:	f1bb 0f02 	cmp.w	fp, #2
   d8d80:	d1da      	bne.n	d8d38 <_ZN6RHMesh5doArpEh+0x40>
		    addRouteTo(address, headerFrom());
   d8d82:	4648      	mov	r0, r9
   d8d84:	f7ff fde6 	bl	d8954 <_ZN10RHDatagram10headerFromEv>
   d8d88:	465b      	mov	r3, fp
   d8d8a:	4602      	mov	r2, r0
   d8d8c:	4639      	mov	r1, r7
   d8d8e:	4630      	mov	r0, r6
   d8d90:	f000 fb21 	bl	d93d6 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   d8d94:	e7c3      	b.n	d8d1e <_ZN6RHMesh5doArpEh+0x26>
   d8d96:	bf00      	nop
   d8d98:	2003e28c 	.word	0x2003e28c

000d8d9c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   d8d9c:	2a01      	cmp	r2, #1
{
   d8d9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d8da2:	4607      	mov	r7, r0
   d8da4:	460e      	mov	r6, r1
   d8da6:	4614      	mov	r4, r2
    if (   messageLen > 1 
   d8da8:	d93b      	bls.n	d8e22 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d8daa:	794d      	ldrb	r5, [r1, #5]
   d8dac:	2d02      	cmp	r5, #2
   d8dae:	d130      	bne.n	d8e12 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   d8db0:	f100 0804 	add.w	r8, r0, #4
   d8db4:	79c9      	ldrb	r1, [r1, #7]
   d8db6:	9101      	str	r1, [sp, #4]
   d8db8:	4640      	mov	r0, r8
   d8dba:	f7ff fdcb 	bl	d8954 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d8dbe:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   d8dc0:	462b      	mov	r3, r5
   d8dc2:	4602      	mov	r2, r0
   d8dc4:	9901      	ldr	r1, [sp, #4]
   d8dc6:	4638      	mov	r0, r7
   d8dc8:	f000 fb05 	bl	d93d6 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d8dcc:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   d8dce:	f106 0308 	add.w	r3, r6, #8
   d8dd2:	2400      	movs	r4, #0
   d8dd4:	4622      	mov	r2, r4
   d8dd6:	4295      	cmp	r5, r2
   d8dd8:	f104 0401 	add.w	r4, r4, #1
   d8ddc:	b2e4      	uxtb	r4, r4
   d8dde:	d904      	bls.n	d8dea <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   d8de0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8de4:	7a39      	ldrb	r1, [r7, #8]
   d8de6:	4291      	cmp	r1, r2
   d8de8:	d1f4      	bne.n	d8dd4 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   d8dea:	f104 0108 	add.w	r1, r4, #8
   d8dee:	440e      	add	r6, r1
	while (i < numRoutes)
   d8df0:	42a5      	cmp	r5, r4
   d8df2:	d916      	bls.n	d8e22 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   d8df4:	f816 1b01 	ldrb.w	r1, [r6], #1
   d8df8:	9101      	str	r1, [sp, #4]
   d8dfa:	4640      	mov	r0, r8
   d8dfc:	f7ff fdaa 	bl	d8954 <_ZN10RHDatagram10headerFromEv>
   d8e00:	3401      	adds	r4, #1
   d8e02:	4602      	mov	r2, r0
   d8e04:	9901      	ldr	r1, [sp, #4]
   d8e06:	2302      	movs	r3, #2
   d8e08:	4638      	mov	r0, r7
   d8e0a:	b2e4      	uxtb	r4, r4
   d8e0c:	f000 fae3 	bl	d93d6 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   d8e10:	e7ee      	b.n	d8df0 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   d8e12:	2d03      	cmp	r5, #3
   d8e14:	d105      	bne.n	d8e22 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   d8e16:	7989      	ldrb	r1, [r1, #6]
}
   d8e18:	b002      	add	sp, #8
   d8e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   d8e1e:	f000 bac3 	b.w	d93a8 <_ZN8RHRouter13deleteRouteToEh>
}
   d8e22:	b002      	add	sp, #8
   d8e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8e28 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   d8e28:	b510      	push	{r4, lr}
   d8e2a:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   d8e2c:	f000 fb14 	bl	d9458 <_ZN8RHRouterC1ER15RHGenericDriverh>
   d8e30:	4b01      	ldr	r3, [pc, #4]	; (d8e38 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   d8e32:	6023      	str	r3, [r4, #0]
}
   d8e34:	4620      	mov	r0, r4
   d8e36:	bd10      	pop	{r4, pc}
   d8e38:	000dfc18 	.word	0x000dfc18

000d8e3c <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   d8e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d8e40:	2af9      	cmp	r2, #249	; 0xf9
{
   d8e42:	f89d 9020 	ldrb.w	r9, [sp, #32]
   d8e46:	4606      	mov	r6, r0
   d8e48:	460f      	mov	r7, r1
   d8e4a:	4614      	mov	r4, r2
   d8e4c:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d8e4e:	d825      	bhi.n	d8e9c <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   d8e50:	2bff      	cmp	r3, #255	; 0xff
   d8e52:	d114      	bne.n	d8e7e <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d8e54:	f8df 8048 	ldr.w	r8, [pc, #72]	; d8ea0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   d8e58:	4640      	mov	r0, r8
   d8e5a:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   d8e5c:	4622      	mov	r2, r4
   d8e5e:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d8e60:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   d8e64:	f005 fcd0 	bl	de808 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d8e68:	1c62      	adds	r2, r4, #1
   d8e6a:	f8cd 9020 	str.w	r9, [sp, #32]
   d8e6e:	462b      	mov	r3, r5
   d8e70:	4641      	mov	r1, r8
   d8e72:	4630      	mov	r0, r6
   d8e74:	b2d2      	uxtb	r2, r2
}
   d8e76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d8e7a:	f000 bb35 	b.w	d94e8 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   d8e7e:	4619      	mov	r1, r3
   d8e80:	f000 fa4e 	bl	d9320 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   d8e84:	2800      	cmp	r0, #0
   d8e86:	d1e5      	bne.n	d8e54 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   d8e88:	6833      	ldr	r3, [r6, #0]
   d8e8a:	4629      	mov	r1, r5
   d8e8c:	689b      	ldr	r3, [r3, #8]
   d8e8e:	4630      	mov	r0, r6
   d8e90:	4798      	blx	r3
   d8e92:	2800      	cmp	r0, #0
   d8e94:	d1de      	bne.n	d8e54 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d8e96:	2002      	movs	r0, #2
}
   d8e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   d8e9c:	2001      	movs	r0, #1
   d8e9e:	e7fb      	b.n	d8e98 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   d8ea0:	2003e28c 	.word	0x2003e28c

000d8ea4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   d8ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8ea8:	b089      	sub	sp, #36	; 0x24
   d8eaa:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d8eac:	23fa      	movs	r3, #250	; 0xfa
   d8eae:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d8eb2:	f10d 031f 	add.w	r3, sp, #31
   d8eb6:	9303      	str	r3, [sp, #12]
   d8eb8:	f10d 031e 	add.w	r3, sp, #30
   d8ebc:	f8df a180 	ldr.w	sl, [pc, #384]	; d9040 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>
   d8ec0:	9302      	str	r3, [sp, #8]
   d8ec2:	f10d 031d 	add.w	r3, sp, #29
   d8ec6:	9301      	str	r3, [sp, #4]
   d8ec8:	ab07      	add	r3, sp, #28
   d8eca:	9300      	str	r3, [sp, #0]
{     
   d8ecc:	4689      	mov	r9, r1
   d8ece:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d8ed0:	f10d 031b 	add.w	r3, sp, #27
   d8ed4:	f10d 021a 	add.w	r2, sp, #26
   d8ed8:	4651      	mov	r1, sl
{     
   d8eda:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   d8ede:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d8ee0:	f000 fb0c 	bl	d94fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d8ee4:	4656      	mov	r6, sl
   d8ee6:	4604      	mov	r4, r0
   d8ee8:	b920      	cbnz	r0, d8ef4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x50>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   d8eea:	2400      	movs	r4, #0
}
   d8eec:	4620      	mov	r0, r4
   d8eee:	b009      	add	sp, #36	; 0x24
   d8ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   d8ef4:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d8ef8:	b373      	cbz	r3, d8f58 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   d8efa:	f89a 2000 	ldrb.w	r2, [sl]
   d8efe:	bb5a      	cbnz	r2, d8f58 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    if (source) *source = _source;
   d8f00:	f1b8 0f00 	cmp.w	r8, #0
   d8f04:	d003      	beq.n	d8f0e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x6a>
   d8f06:	f89d 201b 	ldrb.w	r2, [sp, #27]
   d8f0a:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   d8f0e:	f1bb 0f00 	cmp.w	fp, #0
   d8f12:	d003      	beq.n	d8f1c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x78>
   d8f14:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d8f18:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   d8f1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d8f1e:	b11a      	cbz	r2, d8f28 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d8f20:	9913      	ldr	r1, [sp, #76]	; 0x4c
   d8f22:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d8f26:	700a      	strb	r2, [r1, #0]
	    if (flags)  *flags  = _flags;
   d8f28:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8f2a:	b11a      	cbz	r2, d8f34 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d8f2c:	9914      	ldr	r1, [sp, #80]	; 0x50
   d8f2e:	f89d 201e 	ldrb.w	r2, [sp, #30]
   d8f32:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   d8f34:	9a15      	ldr	r2, [sp, #84]	; 0x54
   d8f36:	b11a      	cbz	r2, d8f40 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d8f38:	9915      	ldr	r1, [sp, #84]	; 0x54
   d8f3a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d8f3e:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   d8f40:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   d8f42:	493d      	ldr	r1, [pc, #244]	; (d9038 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   d8f44:	3b01      	subs	r3, #1
   d8f46:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d8f48:	429a      	cmp	r2, r3
		*len = msgLen;
   d8f4a:	bf88      	it	hi
   d8f4c:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   d8f4e:	783a      	ldrb	r2, [r7, #0]
   d8f50:	4648      	mov	r0, r9
   d8f52:	f005 fc59 	bl	de808 <memcpy>
	    return true;
   d8f56:	e7c9      	b.n	d8eec <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   d8f58:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d8f5c:	2aff      	cmp	r2, #255	; 0xff
   d8f5e:	d1c4      	bne.n	d8eea <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && tmpMessageLen > 1 
   d8f60:	2b01      	cmp	r3, #1
   d8f62:	d9c2      	bls.n	d8eea <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   d8f64:	7832      	ldrb	r2, [r6, #0]
   d8f66:	2a01      	cmp	r2, #1
   d8f68:	d1bf      	bne.n	d8eea <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    if (_source == _thisAddress)
   d8f6a:	7a2a      	ldrb	r2, [r5, #8]
   d8f6c:	f89d 401b 	ldrb.w	r4, [sp, #27]
   d8f70:	42a2      	cmp	r2, r4
   d8f72:	d0ba      	beq.n	d8eea <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   d8f74:	1edf      	subs	r7, r3, #3
   d8f76:	4931      	ldr	r1, [pc, #196]	; (d903c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   d8f78:	b2ff      	uxtb	r7, r7
   d8f7a:	2300      	movs	r3, #0
   d8f7c:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   d8f80:	4547      	cmp	r7, r8
   d8f82:	d906      	bls.n	d8f92 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xee>
		if (d->route[i] == _thisAddress)
   d8f84:	f811 0b01 	ldrb.w	r0, [r1], #1
   d8f88:	4282      	cmp	r2, r0
   d8f8a:	f103 0301 	add.w	r3, r3, #1
   d8f8e:	d1f5      	bne.n	d8f7c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd8>
   d8f90:	e7ab      	b.n	d8eea <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   d8f92:	f105 0904 	add.w	r9, r5, #4
   d8f96:	4648      	mov	r0, r9
   d8f98:	f7ff fcdc 	bl	d8954 <_ZN10RHDatagram10headerFromEv>
   d8f9c:	2302      	movs	r3, #2
   d8f9e:	4602      	mov	r2, r0
   d8fa0:	4621      	mov	r1, r4
   d8fa2:	4628      	mov	r0, r5
   d8fa4:	f000 fa17 	bl	d93d6 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   d8fa8:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d8fac:	b193      	cbz	r3, d8fd4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x130>
   d8fae:	4c24      	ldr	r4, [pc, #144]	; (d9040 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
	        for (i = 0; i < numRoutes; i++)
   d8fb0:	1ba3      	subs	r3, r4, r6
   d8fb2:	b2db      	uxtb	r3, r3
   d8fb4:	429f      	cmp	r7, r3
   d8fb6:	d90c      	bls.n	d8fd2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12e>
		    addRouteTo(d->route[i], headerFrom());
   d8fb8:	78e1      	ldrb	r1, [r4, #3]
   d8fba:	9105      	str	r1, [sp, #20]
   d8fbc:	4648      	mov	r0, r9
   d8fbe:	f7ff fcc9 	bl	d8954 <_ZN10RHDatagram10headerFromEv>
   d8fc2:	9905      	ldr	r1, [sp, #20]
   d8fc4:	4602      	mov	r2, r0
   d8fc6:	2302      	movs	r3, #2
   d8fc8:	4628      	mov	r0, r5
   d8fca:	f000 fa04 	bl	d93d6 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   d8fce:	3401      	adds	r4, #1
   d8fd0:	e7ee      	b.n	d8fb0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x10c>
   d8fd2:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   d8fd4:	682b      	ldr	r3, [r5, #0]
   d8fd6:	7872      	ldrb	r2, [r6, #1]
   d8fd8:	68db      	ldr	r3, [r3, #12]
   d8fda:	491a      	ldr	r1, [pc, #104]	; (d9044 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x1a0>)
   d8fdc:	4628      	mov	r0, r5
   d8fde:	4798      	blx	r3
   d8fe0:	4604      	mov	r4, r0
   d8fe2:	b160      	cbz	r0, d8ffe <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x15a>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d8fe4:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d8fe6:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d8fe8:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d8fea:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d8fee:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d8ff2:	4913      	ldr	r1, [pc, #76]	; (d9040 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   d8ff4:	9400      	str	r4, [sp, #0]
   d8ff6:	4628      	mov	r0, r5
   d8ff8:	f000 fa76 	bl	d94e8 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d8ffc:	e776      	b.n	d8eec <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	    else if ((i < _max_hops) && _isa_router)
   d8ffe:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   d9002:	4543      	cmp	r3, r8
   d9004:	f67f af71 	bls.w	d8eea <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
   d9008:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d900c:	2b00      	cmp	r3, #0
   d900e:	f43f af6c 	beq.w	d8eea <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		tmpMessageLen++;
   d9012:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   d9016:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d9018:	4909      	ldr	r1, [pc, #36]	; (d9040 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
		d->route[numRoutes] = _thisAddress;
   d901a:	443e      	add	r6, r7
		tmpMessageLen++;
   d901c:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   d901e:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d9020:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d9024:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   d9026:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d9028:	9300      	str	r3, [sp, #0]
   d902a:	4628      	mov	r0, r5
   d902c:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   d902e:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d9032:	f000 fa23 	bl	d947c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   d9036:	e759      	b.n	d8eec <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
   d9038:	2003e28d 	.word	0x2003e28d
   d903c:	2003e28f 	.word	0x2003e28f
   d9040:	2003e28c 	.word	0x2003e28c
   d9044:	2003e28e 	.word	0x2003e28e

000d9048 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAckTimeout(uint8_t* buf, uint8_t* len, uint16_t timeout, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d9048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d904c:	b085      	sub	sp, #20
   d904e:	4680      	mov	r8, r0
   d9050:	461c      	mov	r4, r3
   d9052:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
   d9056:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d9058:	4689      	mov	r9, r1
   d905a:	4692      	mov	sl, r2
   d905c:	f001 fa6a 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    int32_t timeLeft;
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
    {
	if (waitAvailableTimeout(timeLeft))
   d9060:	f108 0b04 	add.w	fp, r8, #4
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
   d9064:	4404      	add	r4, r0
   d9066:	f001 fa65 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
   d906a:	1a20      	subs	r0, r4, r0
   d906c:	2800      	cmp	r0, #0
   d906e:	dd16      	ble.n	d909e <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x56>
	if (waitAvailableTimeout(timeLeft))
   d9070:	b281      	uxth	r1, r0
   d9072:	2200      	movs	r2, #0
   d9074:	4658      	mov	r0, fp
   d9076:	f7ff fc2a 	bl	d88ce <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d907a:	2800      	cmp	r0, #0
   d907c:	d0f3      	beq.n	d9066 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
	{
	    if (recvfromAck(buf, len, from, to, id, flags, hops))
   d907e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9080:	9300      	str	r3, [sp, #0]
   d9082:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d9086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d9088:	9501      	str	r5, [sp, #4]
   d908a:	4652      	mov	r2, sl
   d908c:	4649      	mov	r1, r9
   d908e:	4640      	mov	r0, r8
   d9090:	f7ff ff08 	bl	d8ea4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d9094:	2800      	cmp	r0, #0
   d9096:	d0e6      	beq.n	d9066 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
		return true;
	    YIELD;
	}
    }
    return false;
}
   d9098:	b005      	add	sp, #20
   d909a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
   d909e:	2000      	movs	r0, #0
   d90a0:	e7fa      	b.n	d9098 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x50>
	...

000d90a4 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   d90a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d90a6:	b085      	sub	sp, #20
   d90a8:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d90aa:	3004      	adds	r0, #4
{
   d90ac:	460e      	mov	r6, r1
   d90ae:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d90b0:	f7ff fc50 	bl	d8954 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   d90b4:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d90b6:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   d90b8:	4631      	mov	r1, r6
   d90ba:	4628      	mov	r0, r5
   d90bc:	f000 f947 	bl	d934e <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d90c0:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   d90c2:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d90c4:	d001      	beq.n	d90ca <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   d90c6:	2805      	cmp	r0, #5
   d90c8:	d11b      	bne.n	d9102 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   d90ca:	7831      	ldrb	r1, [r6, #0]
   d90cc:	4628      	mov	r0, r5
   d90ce:	f000 f96b 	bl	d93a8 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   d90d2:	7872      	ldrb	r2, [r6, #1]
   d90d4:	7a2b      	ldrb	r3, [r5, #8]
   d90d6:	429a      	cmp	r2, r3
   d90d8:	d013      	beq.n	d9102 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   d90da:	4c0b      	ldr	r4, [pc, #44]	; (d9108 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   d90dc:	2303      	movs	r3, #3
   d90de:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   d90e0:	7833      	ldrb	r3, [r6, #0]
   d90e2:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   d90e4:	7871      	ldrb	r1, [r6, #1]
   d90e6:	2302      	movs	r3, #2
   d90e8:	463a      	mov	r2, r7
   d90ea:	4628      	mov	r0, r5
   d90ec:	f000 f973 	bl	d93d6 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   d90f0:	2300      	movs	r3, #0
   d90f2:	9300      	str	r3, [sp, #0]
   d90f4:	4621      	mov	r1, r4
   d90f6:	7873      	ldrb	r3, [r6, #1]
   d90f8:	2202      	movs	r2, #2
   d90fa:	4628      	mov	r0, r5
   d90fc:	f000 f9f4 	bl	d94e8 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d9100:	4604      	mov	r4, r0
}
   d9102:	4620      	mov	r0, r4
   d9104:	b005      	add	sp, #20
   d9106:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9108:	2003e28c 	.word	0x2003e28c

000d910c <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   d910c:	b510      	push	{r4, lr}
   d910e:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   d9110:	f7ff fbd2 	bl	d88b8 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   d9114:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   d9116:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   d9118:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   d911a:	2303      	movs	r3, #3
    _retransmissions = 0;
   d911c:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   d911e:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   d9120:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   d9122:	f44f 7280 	mov.w	r2, #256	; 0x100
   d9126:	f104 0011 	add.w	r0, r4, #17
   d912a:	f005 fb95 	bl	de858 <memset>
}
   d912e:	4620      	mov	r0, r4
   d9130:	bd10      	pop	{r4, pc}

000d9132 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   d9132:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d9134:	4604      	mov	r4, r0
   d9136:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   d9138:	f7ff fc00 	bl	d893c <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   d913c:	4620      	mov	r0, r4
   d913e:	2200      	movs	r2, #0
   d9140:	2180      	movs	r1, #128	; 0x80
   d9142:	f7ff fbff 	bl	d8944 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   d9146:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   d9148:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   d914a:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   d914e:	f10d 010f 	add.w	r1, sp, #15
   d9152:	2201      	movs	r2, #1
   d9154:	4620      	mov	r0, r4
   d9156:	f7ff fbc2 	bl	d88de <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   d915a:	4620      	mov	r0, r4
   d915c:	f7ff fbb3 	bl	d88c6 <_ZN10RHDatagram14waitPacketSentEv>
}
   d9160:	b004      	add	sp, #16
   d9162:	bd10      	pop	{r4, pc}

000d9164 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   d9164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d9168:	7b05      	ldrb	r5, [r0, #12]
   d916a:	3501      	adds	r5, #1
   d916c:	b2ed      	uxtb	r5, r5
{
   d916e:	b087      	sub	sp, #28
   d9170:	4604      	mov	r4, r0
   d9172:	4689      	mov	r9, r1
   d9174:	4692      	mov	sl, r2
   d9176:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d9178:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   d917a:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   d917c:	7c22      	ldrb	r2, [r4, #16]
   d917e:	463b      	mov	r3, r7
   d9180:	429a      	cmp	r2, r3
   d9182:	f107 0701 	add.w	r7, r7, #1
   d9186:	b2ff      	uxtb	r7, r7
   d9188:	d36b      	bcc.n	d9262 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   d918a:	4629      	mov	r1, r5
   d918c:	4620      	mov	r0, r4
   d918e:	f7ff fbd5 	bl	d893c <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   d9192:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   d9194:	bf0d      	iteet	eq
   d9196:	22c0      	moveq	r2, #192	; 0xc0
   d9198:	2280      	movne	r2, #128	; 0x80
   d919a:	2140      	movne	r1, #64	; 0x40
   d919c:	2100      	moveq	r1, #0
   d919e:	4620      	mov	r0, r4
   d91a0:	f7ff fbd0 	bl	d8944 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   d91a4:	4643      	mov	r3, r8
   d91a6:	4652      	mov	r2, sl
   d91a8:	4649      	mov	r1, r9
   d91aa:	4620      	mov	r0, r4
   d91ac:	f7ff fb97 	bl	d88de <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   d91b0:	4620      	mov	r0, r4
   d91b2:	f7ff fb88 	bl	d88c6 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   d91b6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d91ba:	d054      	beq.n	d9266 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   d91bc:	2f01      	cmp	r7, #1
	    _retransmissions++;
   d91be:	bf82      	ittt	hi
   d91c0:	68a3      	ldrhi	r3, [r4, #8]
   d91c2:	3301      	addhi	r3, #1
   d91c4:	60a3      	strhi	r3, [r4, #8]
   d91c6:	f001 f9b5 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   d91ca:	f44f 7180 	mov.w	r1, #256	; 0x100
   d91ce:	4683      	mov	fp, r0
   d91d0:	2000      	movs	r0, #0
   d91d2:	89e6      	ldrh	r6, [r4, #14]
   d91d4:	f003 ff92 	bl	dd0fc <_Z6randomii>
   d91d8:	4370      	muls	r0, r6
   d91da:	bf48      	it	mi
   d91dc:	30ff      	addmi	r0, #255	; 0xff
   d91de:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   d91e2:	fa1b f686 	uxtah	r6, fp, r6
   d91e6:	f001 f9a5 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
   d91ea:	1a30      	subs	r0, r6, r0
   d91ec:	2800      	cmp	r0, #0
   d91ee:	ddc5      	ble.n	d917c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   d91f0:	b281      	uxth	r1, r0
   d91f2:	2200      	movs	r2, #0
   d91f4:	4620      	mov	r0, r4
   d91f6:	f7ff fb6a 	bl	d88ce <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d91fa:	2800      	cmp	r0, #0
   d91fc:	d0f3      	beq.n	d91e6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   d91fe:	f10d 0317 	add.w	r3, sp, #23
   d9202:	9302      	str	r3, [sp, #8]
   d9204:	f10d 0316 	add.w	r3, sp, #22
   d9208:	9301      	str	r3, [sp, #4]
   d920a:	2200      	movs	r2, #0
   d920c:	f10d 0315 	add.w	r3, sp, #21
   d9210:	9300      	str	r3, [sp, #0]
   d9212:	4611      	mov	r1, r2
   d9214:	ab05      	add	r3, sp, #20
   d9216:	4620      	mov	r0, r4
   d9218:	f7ff fba8 	bl	d896c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d921c:	2800      	cmp	r0, #0
   d921e:	d0e2      	beq.n	d91e6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   d9220:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d9224:	f99d 3017 	ldrsb.w	r3, [sp, #23]
   d9228:	4542      	cmp	r2, r8
   d922a:	d10e      	bne.n	d924a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   d922c:	f894 c004 	ldrb.w	ip, [r4, #4]
   d9230:	f89d 1015 	ldrb.w	r1, [sp, #21]
   d9234:	458c      	cmp	ip, r1
   d9236:	d108      	bne.n	d924a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   d9238:	2b00      	cmp	r3, #0
   d923a:	da08      	bge.n	d924e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   d923c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d9240:	42ab      	cmp	r3, r5
   d9242:	d1d0      	bne.n	d91e6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   d9244:	b007      	add	sp, #28
   d9246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   d924a:	2b00      	cmp	r3, #0
   d924c:	dbcb      	blt.n	d91e6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   d924e:	18a1      	adds	r1, r4, r2
   d9250:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d9254:	7c49      	ldrb	r1, [r1, #17]
   d9256:	4299      	cmp	r1, r3
   d9258:	d1c5      	bne.n	d91e6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   d925a:	4620      	mov	r0, r4
   d925c:	f7ff ff69 	bl	d9132 <_ZN18RHReliableDatagram11acknowledgeEhh>
   d9260:	e7c1      	b.n	d91e6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   d9262:	2000      	movs	r0, #0
   d9264:	e7ee      	b.n	d9244 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   d9266:	2001      	movs	r0, #1
   d9268:	e7ec      	b.n	d9244 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000d926a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   d926a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d926e:	b089      	sub	sp, #36	; 0x24
   d9270:	e9cd 2104 	strd	r2, r1, [sp, #16]
   d9274:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   d9278:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d927a:	4604      	mov	r4, r0
   d927c:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d927e:	f7ff fb1e 	bl	d88be <_ZN10RHDatagram9availableEv>
   d9282:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d9286:	b920      	cbnz	r0, d9292 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   d9288:	2500      	movs	r5, #0
}
   d928a:	4628      	mov	r0, r5
   d928c:	b009      	add	sp, #36	; 0x24
   d928e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d9292:	f10d 031f 	add.w	r3, sp, #31
   d9296:	9302      	str	r3, [sp, #8]
   d9298:	f10d 031e 	add.w	r3, sp, #30
   d929c:	9301      	str	r3, [sp, #4]
   d929e:	f10d 031d 	add.w	r3, sp, #29
   d92a2:	9300      	str	r3, [sp, #0]
   d92a4:	4620      	mov	r0, r4
   d92a6:	ab07      	add	r3, sp, #28
   d92a8:	f7ff fb60 	bl	d896c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d92ac:	4605      	mov	r5, r0
   d92ae:	2800      	cmp	r0, #0
   d92b0:	d0ea      	beq.n	d9288 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   d92b2:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   d92b6:	2b00      	cmp	r3, #0
   d92b8:	dbe6      	blt.n	d9288 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   d92ba:	7922      	ldrb	r2, [r4, #4]
   d92bc:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d92c0:	429a      	cmp	r2, r3
   d92c2:	d106      	bne.n	d92d2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   d92c4:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d92c8:	f89d 101e 	ldrb.w	r1, [sp, #30]
   d92cc:	4620      	mov	r0, r4
   d92ce:	f7ff ff30 	bl	d9132 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   d92d2:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d92d6:	f89d 301e 	ldrb.w	r3, [sp, #30]
   d92da:	4414      	add	r4, r2
   d92dc:	7c61      	ldrb	r1, [r4, #17]
   d92de:	4299      	cmp	r1, r3
   d92e0:	d0d2      	beq.n	d9288 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   d92e2:	b106      	cbz	r6, d92e6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x7c>
   d92e4:	7032      	strb	r2, [r6, #0]
		if (to)    *to =    _to;
   d92e6:	f1b9 0f00 	cmp.w	r9, #0
   d92ea:	d003      	beq.n	d92f4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x8a>
   d92ec:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d92f0:	f889 2000 	strb.w	r2, [r9]
		if (id)    *id =    _id;
   d92f4:	f1b8 0f00 	cmp.w	r8, #0
   d92f8:	d001      	beq.n	d92fe <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   d92fa:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   d92fe:	b117      	cbz	r7, d9306 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9c>
   d9300:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d9304:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   d9306:	7463      	strb	r3, [r4, #17]
		return true;
   d9308:	e7bf      	b.n	d928a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000d930a <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   d930a:	4770      	bx	lr

000d930c <_ZN8RHRouter4initEv>:
{
   d930c:	b510      	push	{r4, lr}
   d930e:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   d9310:	3004      	adds	r0, #4
   d9312:	f7ff fb05 	bl	d8920 <_ZN10RHDatagram4initEv>
    if (ret)
   d9316:	b110      	cbz	r0, d931e <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   d9318:	231e      	movs	r3, #30
   d931a:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   d931e:	bd10      	pop	{r4, pc}

000d9320 <_ZN8RHRouter10getRouteToEh>:
{
   d9320:	b510      	push	{r4, lr}
   d9322:	4602      	mov	r2, r0
   d9324:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   d9326:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   d932a:	428c      	cmp	r4, r1
   d932c:	d108      	bne.n	d9340 <_ZN8RHRouter10getRouteToEh+0x20>
   d932e:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   d9332:	b12c      	cbz	r4, d9340 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   d9334:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d9338:	f503 738c 	add.w	r3, r3, #280	; 0x118
   d933c:	4418      	add	r0, r3
}
   d933e:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d9340:	3301      	adds	r3, #1
   d9342:	2b0a      	cmp	r3, #10
   d9344:	f102 0203 	add.w	r2, r2, #3
   d9348:	d1ed      	bne.n	d9326 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   d934a:	2000      	movs	r0, #0
   d934c:	e7f7      	b.n	d933e <_ZN8RHRouter10getRouteToEh+0x1e>

000d934e <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   d934e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d9350:	780b      	ldrb	r3, [r1, #0]
   d9352:	2bff      	cmp	r3, #255	; 0xff
{
   d9354:	4605      	mov	r5, r0
   d9356:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d9358:	d006      	beq.n	d9368 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   d935a:	4619      	mov	r1, r3
   d935c:	9201      	str	r2, [sp, #4]
   d935e:	f7ff ffdf 	bl	d9320 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   d9362:	b158      	cbz	r0, d937c <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   d9364:	7843      	ldrb	r3, [r0, #1]
   d9366:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   d9368:	4621      	mov	r1, r4
   d936a:	1d28      	adds	r0, r5, #4
   d936c:	f7ff fefa 	bl	d9164 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   d9370:	2800      	cmp	r0, #0
   d9372:	bf14      	ite	ne
   d9374:	2000      	movne	r0, #0
   d9376:	2005      	moveq	r0, #5
}
   d9378:	b003      	add	sp, #12
   d937a:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d937c:	2002      	movs	r0, #2
   d937e:	e7fb      	b.n	d9378 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000d9380 <_ZN8RHRouter11deleteRouteEh>:
{
   d9380:	b510      	push	{r4, lr}
   d9382:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   d9386:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   d9388:	f1c1 0209 	rsb	r2, r1, #9
    memcpy(&_routes[index], &_routes[index+1], 
   d938c:	f503 708c 	add.w	r0, r3, #280	; 0x118
   d9390:	f203 111b 	addw	r1, r3, #283	; 0x11b
   d9394:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d9398:	4421      	add	r1, r4
   d939a:	4420      	add	r0, r4
   d939c:	f005 fa34 	bl	de808 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   d93a0:	2300      	movs	r3, #0
   d93a2:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
}
   d93a6:	bd10      	pop	{r4, pc}

000d93a8 <_ZN8RHRouter13deleteRouteToEh>:
{
   d93a8:	b538      	push	{r3, r4, r5, lr}
   d93aa:	460a      	mov	r2, r1
   d93ac:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d93ae:	f500 748c 	add.w	r4, r0, #280	; 0x118
   d93b2:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   d93b6:	b2d9      	uxtb	r1, r3
   d93b8:	5d65      	ldrb	r5, [r4, r5]
   d93ba:	4295      	cmp	r5, r2
   d93bc:	d103      	bne.n	d93c6 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   d93be:	f7ff ffdf 	bl	d9380 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   d93c2:	2001      	movs	r0, #1
}
   d93c4:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d93c6:	3301      	adds	r3, #1
   d93c8:	2b0a      	cmp	r3, #10
   d93ca:	d1f2      	bne.n	d93b2 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   d93cc:	2000      	movs	r0, #0
   d93ce:	e7f9      	b.n	d93c4 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000d93d0 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   d93d0:	2100      	movs	r1, #0
   d93d2:	f7ff bfd5 	b.w	d9380 <_ZN8RHRouter11deleteRouteEh>

000d93d6 <_ZN8RHRouter10addRouteToEhhh>:
{
   d93d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d93d8:	4616      	mov	r6, r2
   d93da:	461f      	mov	r7, r3
   d93dc:	4604      	mov	r4, r0
   d93de:	460d      	mov	r5, r1
   d93e0:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d93e2:	f500 728c 	add.w	r2, r0, #280	; 0x118
   d93e6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d93ea:	5c11      	ldrb	r1, [r2, r0]
   d93ec:	42a9      	cmp	r1, r5
   d93ee:	d105      	bne.n	d93fc <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   d93f0:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   d93f2:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d93f6:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   d93fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d93fc:	3301      	adds	r3, #1
   d93fe:	2b0a      	cmp	r3, #10
   d9400:	d1f1      	bne.n	d93e6 <_ZN8RHRouter10addRouteToEhhh+0x10>
   d9402:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   d9404:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   d9408:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d940c:	5c11      	ldrb	r1, [r2, r0]
   d940e:	b919      	cbnz	r1, d9418 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   d9410:	4420      	add	r0, r4
   d9412:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   d9416:	e7ec      	b.n	d93f2 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d9418:	3301      	adds	r3, #1
   d941a:	2b0a      	cmp	r3, #10
   d941c:	d1f4      	bne.n	d9408 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   d941e:	4620      	mov	r0, r4
   d9420:	f7ff ffd6 	bl	d93d0 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d9424:	4620      	mov	r0, r4
   d9426:	f104 031e 	add.w	r3, r4, #30
	if (_routes[i].state == Invalid)
   d942a:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   d942e:	b92a      	cbnz	r2, d943c <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   d9430:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   d9434:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d9438:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d943c:	3003      	adds	r0, #3
   d943e:	4298      	cmp	r0, r3
   d9440:	d1f3      	bne.n	d942a <_ZN8RHRouter10addRouteToEhhh+0x54>
   d9442:	e7da      	b.n	d93fa <_ZN8RHRouter10addRouteToEhhh+0x24>

000d9444 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d9444:	f100 031e 	add.w	r3, r0, #30
	_routes[i].state = Invalid;
   d9448:	2200      	movs	r2, #0
   d944a:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d944e:	3003      	adds	r0, #3
   d9450:	4298      	cmp	r0, r3
   d9452:	d1fa      	bne.n	d944a <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   d9454:	4770      	bx	lr
	...

000d9458 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   d9458:	b510      	push	{r4, lr}
   d945a:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   d945c:	3004      	adds	r0, #4
   d945e:	f7ff fe55 	bl	d910c <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   d9462:	4b05      	ldr	r3, [pc, #20]	; (d9478 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   d9464:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d9466:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   d946a:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d946c:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   d9470:	f7ff ffe8 	bl	d9444 <_ZN8RHRouter17clearRoutingTableEv>
}
   d9474:	4620      	mov	r0, r4
   d9476:	bd10      	pop	{r4, pc}
   d9478:	000dfc30 	.word	0x000dfc30

000d947c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   d947c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d9480:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d9482:	6840      	ldr	r0, [r0, #4]
{
   d9484:	9101      	str	r1, [sp, #4]
   d9486:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d9488:	6803      	ldr	r3, [r0, #0]
{
   d948a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d948e:	699b      	ldr	r3, [r3, #24]
{
   d9490:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d9494:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d9496:	4798      	blx	r3
   d9498:	f106 0805 	add.w	r8, r6, #5
   d949c:	4580      	cmp	r8, r0
   d949e:	d81c      	bhi.n	d94da <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   d94a0:	4d10      	ldr	r5, [pc, #64]	; (d94e4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   d94a2:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   d94a4:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   d94a8:	2300      	movs	r3, #0
   d94aa:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   d94ac:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   d94b0:	70eb      	strb	r3, [r5, #3]
   d94b2:	1c5a      	adds	r2, r3, #1
   d94b4:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   d94b8:	1d68      	adds	r0, r5, #5
   d94ba:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   d94bc:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   d94be:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   d94c2:	f005 f9a1 	bl	de808 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d94c6:	6823      	ldr	r3, [r4, #0]
   d94c8:	685b      	ldr	r3, [r3, #4]
   d94ca:	fa5f f288 	uxtb.w	r2, r8
   d94ce:	4629      	mov	r1, r5
   d94d0:	4620      	mov	r0, r4
}
   d94d2:	b002      	add	sp, #8
   d94d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d94d8:	4718      	bx	r3
}
   d94da:	2001      	movs	r0, #1
   d94dc:	b002      	add	sp, #8
   d94de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d94e2:	bf00      	nop
   d94e4:	2003e386 	.word	0x2003e386

000d94e8 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   d94e8:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   d94ea:	f89d 4010 	ldrb.w	r4, [sp, #16]
   d94ee:	9401      	str	r4, [sp, #4]
   d94f0:	7a04      	ldrb	r4, [r0, #8]
   d94f2:	9400      	str	r4, [sp, #0]
   d94f4:	f7ff ffc2 	bl	d947c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   d94f8:	b002      	add	sp, #8
   d94fa:	bd10      	pop	{r4, pc}

000d94fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d94fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9500:	b087      	sub	sp, #28
   d9502:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d9504:	23ff      	movs	r3, #255	; 0xff
   d9506:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d950a:	f10d 0317 	add.w	r3, sp, #23
   d950e:	9302      	str	r3, [sp, #8]
   d9510:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d95e4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   d9514:	f10d 0316 	add.w	r3, sp, #22
   d9518:	9301      	str	r3, [sp, #4]
   d951a:	f10d 0315 	add.w	r3, sp, #21
   d951e:	9300      	str	r3, [sp, #0]
{  
   d9520:	4604      	mov	r4, r0
   d9522:	4688      	mov	r8, r1
   d9524:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d9526:	ab05      	add	r3, sp, #20
   d9528:	f10d 0213 	add.w	r2, sp, #19
   d952c:	4649      	mov	r1, r9
   d952e:	3004      	adds	r0, #4
{  
   d9530:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d9534:	f7ff fe99 	bl	d926a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   d9538:	4605      	mov	r5, r0
   d953a:	b908      	cbnz	r0, d9540 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   d953c:	2500      	movs	r5, #0
   d953e:	e038      	b.n	d95b2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   d9540:	6823      	ldr	r3, [r4, #0]
   d9542:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d9546:	681b      	ldr	r3, [r3, #0]
   d9548:	4649      	mov	r1, r9
   d954a:	4620      	mov	r0, r4
   d954c:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   d954e:	f899 3000 	ldrb.w	r3, [r9]
   d9552:	7a22      	ldrb	r2, [r4, #8]
   d9554:	429a      	cmp	r2, r3
   d9556:	d001      	beq.n	d955c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   d9558:	2bff      	cmp	r3, #255	; 0xff
   d955a:	d12e      	bne.n	d95ba <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   d955c:	b117      	cbz	r7, d9564 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   d955e:	4b21      	ldr	r3, [pc, #132]	; (d95e4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d9560:	785b      	ldrb	r3, [r3, #1]
   d9562:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   d9564:	f1bb 0f00 	cmp.w	fp, #0
   d9568:	d003      	beq.n	d9572 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   d956a:	4b1e      	ldr	r3, [pc, #120]	; (d95e4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d956c:	781b      	ldrb	r3, [r3, #0]
   d956e:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   d9572:	f1ba 0f00 	cmp.w	sl, #0
   d9576:	d003      	beq.n	d9580 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d9578:	4b1a      	ldr	r3, [pc, #104]	; (d95e4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d957a:	78db      	ldrb	r3, [r3, #3]
   d957c:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   d9580:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d9582:	b11b      	cbz	r3, d958c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d9584:	4b17      	ldr	r3, [pc, #92]	; (d95e4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d9586:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d9588:	791b      	ldrb	r3, [r3, #4]
   d958a:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   d958c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d958e:	b11b      	cbz	r3, d9598 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d9590:	4b14      	ldr	r3, [pc, #80]	; (d95e4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d9592:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d9594:	789b      	ldrb	r3, [r3, #2]
   d9596:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d9598:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   d959c:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d959e:	4912      	ldr	r1, [pc, #72]	; (d95e8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d95a0:	3b05      	subs	r3, #5
   d95a2:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d95a4:	429a      	cmp	r2, r3
		*len = msgLen;
   d95a6:	bf88      	it	hi
   d95a8:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d95aa:	7832      	ldrb	r2, [r6, #0]
   d95ac:	4640      	mov	r0, r8
   d95ae:	f005 f92b 	bl	de808 <memcpy>
}
   d95b2:	4628      	mov	r0, r5
   d95b4:	b007      	add	sp, #28
   d95b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   d95ba:	f899 3002 	ldrb.w	r3, [r9, #2]
   d95be:	1c5a      	adds	r2, r3, #1
   d95c0:	f889 2002 	strb.w	r2, [r9, #2]
   d95c4:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   d95c8:	429a      	cmp	r2, r3
   d95ca:	d9b7      	bls.n	d953c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   d95cc:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   d95d0:	2b00      	cmp	r3, #0
   d95d2:	d0b3      	beq.n	d953c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   d95d4:	6823      	ldr	r3, [r4, #0]
   d95d6:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d95da:	685b      	ldr	r3, [r3, #4]
   d95dc:	4649      	mov	r1, r9
   d95de:	4620      	mov	r0, r4
   d95e0:	4798      	blx	r3
   d95e2:	e7ab      	b.n	d953c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   d95e4:	2003e386 	.word	0x2003e386
   d95e8:	2003e38b 	.word	0x2003e38b

000d95ec <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   d95ec:	b510      	push	{r4, lr}
   d95ee:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   d95f0:	6a00      	ldr	r0, [r0, #32]
   d95f2:	6803      	ldr	r3, [r0, #0]
   d95f4:	68db      	ldr	r3, [r3, #12]
   d95f6:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   d95f8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   d95fc:	28ff      	cmp	r0, #255	; 0xff
   d95fe:	d002      	beq.n	d9606 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   d9600:	2101      	movs	r1, #1
   d9602:	f004 fba7 	bl	ddd54 <pinMode>

    deselectSlave();
   d9606:	6823      	ldr	r3, [r4, #0]
   d9608:	4620      	mov	r0, r4
   d960a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d960c:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   d960e:	2064      	movs	r0, #100	; 0x64
   d9610:	f001 fb8a 	bl	dad28 <delay>
#endif
    
    return true;
}
   d9614:	2001      	movs	r0, #1
   d9616:	bd10      	pop	{r4, pc}

000d9618 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   d9618:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d961c:	2100      	movs	r1, #0
   d961e:	f004 bbaa 	b.w	ddd76 <digitalWrite>

000d9622 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   d9622:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d9626:	2101      	movs	r1, #1
   d9628:	f004 bba5 	b.w	ddd76 <digitalWrite>

000d962c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   d962c:	b570      	push	{r4, r5, r6, lr}
   d962e:	4604      	mov	r4, r0
   d9630:	460d      	mov	r5, r1
   d9632:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   d9634:	f7ff fa4e 	bl	d8ad4 <_ZN15RHGenericDriverC1Ev>
   d9638:	4b03      	ldr	r3, [pc, #12]	; (d9648 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   d963a:	6023      	str	r3, [r4, #0]
   d963c:	6226      	str	r6, [r4, #32]
   d963e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   d9642:	4620      	mov	r0, r4
   d9644:	bd70      	pop	{r4, r5, r6, pc}
   d9646:	bf00      	nop
   d9648:	000dfc40 	.word	0x000dfc40

000d964c <_ZN11RHSPIDriver7spiReadEh>:
{
   d964c:	b538      	push	{r3, r4, r5, lr}
   d964e:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d9650:	6a00      	ldr	r0, [r0, #32]
   d9652:	6803      	ldr	r3, [r0, #0]
   d9654:	6a1b      	ldr	r3, [r3, #32]
{
   d9656:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d9658:	4798      	blx	r3
    selectSlave();
   d965a:	6823      	ldr	r3, [r4, #0]
   d965c:	4620      	mov	r0, r4
   d965e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d9660:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   d9662:	6a20      	ldr	r0, [r4, #32]
   d9664:	6803      	ldr	r3, [r0, #0]
   d9666:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d966a:	681b      	ldr	r3, [r3, #0]
   d966c:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d966e:	6a20      	ldr	r0, [r4, #32]
   d9670:	6803      	ldr	r3, [r0, #0]
   d9672:	2100      	movs	r1, #0
   d9674:	681b      	ldr	r3, [r3, #0]
   d9676:	4798      	blx	r3
    deselectSlave();
   d9678:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d967a:	4605      	mov	r5, r0
    deselectSlave();
   d967c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d967e:	4620      	mov	r0, r4
   d9680:	4798      	blx	r3
    _spi.endTransaction();
   d9682:	6a20      	ldr	r0, [r4, #32]
   d9684:	6803      	ldr	r3, [r0, #0]
   d9686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9688:	4798      	blx	r3
}
   d968a:	4628      	mov	r0, r5
   d968c:	bd38      	pop	{r3, r4, r5, pc}

000d968e <_ZN11RHSPIDriver8spiWriteEhh>:
{
   d968e:	b570      	push	{r4, r5, r6, lr}
   d9690:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d9692:	6a00      	ldr	r0, [r0, #32]
   d9694:	6803      	ldr	r3, [r0, #0]
   d9696:	6a1b      	ldr	r3, [r3, #32]
{
   d9698:	4616      	mov	r6, r2
   d969a:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d969c:	4798      	blx	r3
    selectSlave();
   d969e:	6823      	ldr	r3, [r4, #0]
   d96a0:	4620      	mov	r0, r4
   d96a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d96a4:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   d96a6:	6a20      	ldr	r0, [r4, #32]
   d96a8:	6803      	ldr	r3, [r0, #0]
   d96aa:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d96ae:	681b      	ldr	r3, [r3, #0]
   d96b0:	4798      	blx	r3
   d96b2:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   d96b4:	6a20      	ldr	r0, [r4, #32]
   d96b6:	6803      	ldr	r3, [r0, #0]
   d96b8:	4631      	mov	r1, r6
   d96ba:	681b      	ldr	r3, [r3, #0]
   d96bc:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d96be:	2001      	movs	r0, #1
   d96c0:	f000 ff30 	bl	da524 <HAL_Delay_Microseconds>
    deselectSlave();
   d96c4:	6823      	ldr	r3, [r4, #0]
   d96c6:	4620      	mov	r0, r4
   d96c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d96ca:	4798      	blx	r3
    _spi.endTransaction();
   d96cc:	6a20      	ldr	r0, [r4, #32]
   d96ce:	6803      	ldr	r3, [r0, #0]
   d96d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d96d2:	4798      	blx	r3
}
   d96d4:	4628      	mov	r0, r5
   d96d6:	bd70      	pop	{r4, r5, r6, pc}

000d96d8 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   d96d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d96da:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d96dc:	6a00      	ldr	r0, [r0, #32]
{
   d96de:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d96e0:	6803      	ldr	r3, [r0, #0]
   d96e2:	6a1b      	ldr	r3, [r3, #32]
{
   d96e4:	460f      	mov	r7, r1
   d96e6:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d96e8:	4798      	blx	r3
    selectSlave();
   d96ea:	6823      	ldr	r3, [r4, #0]
   d96ec:	4620      	mov	r0, r4
   d96ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d96f0:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   d96f2:	6a20      	ldr	r0, [r4, #32]
   d96f4:	6803      	ldr	r3, [r0, #0]
   d96f6:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   d96fa:	681b      	ldr	r3, [r3, #0]
   d96fc:	4798      	blx	r3
   d96fe:	442e      	add	r6, r5
   d9700:	4607      	mov	r7, r0
    while (len--)
   d9702:	42b5      	cmp	r5, r6
   d9704:	d007      	beq.n	d9716 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   d9706:	6a20      	ldr	r0, [r4, #32]
   d9708:	6803      	ldr	r3, [r0, #0]
   d970a:	2100      	movs	r1, #0
   d970c:	681b      	ldr	r3, [r3, #0]
   d970e:	4798      	blx	r3
   d9710:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   d9714:	e7f5      	b.n	d9702 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   d9716:	6823      	ldr	r3, [r4, #0]
   d9718:	4620      	mov	r0, r4
   d971a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d971c:	4798      	blx	r3
    _spi.endTransaction();
   d971e:	6a20      	ldr	r0, [r4, #32]
   d9720:	6803      	ldr	r3, [r0, #0]
   d9722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9724:	4798      	blx	r3
}
   d9726:	4638      	mov	r0, r7
   d9728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d972a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   d972a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d972c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d972e:	6a00      	ldr	r0, [r0, #32]
{
   d9730:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d9732:	6803      	ldr	r3, [r0, #0]
   d9734:	6a1b      	ldr	r3, [r3, #32]
{
   d9736:	460f      	mov	r7, r1
   d9738:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d973a:	4798      	blx	r3
    selectSlave();
   d973c:	6823      	ldr	r3, [r4, #0]
   d973e:	4620      	mov	r0, r4
   d9740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d9742:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   d9744:	6a20      	ldr	r0, [r4, #32]
   d9746:	6803      	ldr	r3, [r0, #0]
   d9748:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d974c:	681b      	ldr	r3, [r3, #0]
   d974e:	4798      	blx	r3
   d9750:	442e      	add	r6, r5
   d9752:	4607      	mov	r7, r0
    while (len--)
   d9754:	42b5      	cmp	r5, r6
   d9756:	d006      	beq.n	d9766 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   d9758:	6a20      	ldr	r0, [r4, #32]
   d975a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d975e:	6803      	ldr	r3, [r0, #0]
   d9760:	681b      	ldr	r3, [r3, #0]
   d9762:	4798      	blx	r3
    while (len--)
   d9764:	e7f6      	b.n	d9754 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   d9766:	6823      	ldr	r3, [r4, #0]
   d9768:	4620      	mov	r0, r4
   d976a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d976c:	4798      	blx	r3
    _spi.endTransaction();
   d976e:	6a20      	ldr	r0, [r4, #32]
   d9770:	6803      	ldr	r3, [r0, #0]
   d9772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9774:	4798      	blx	r3
}
   d9776:	4638      	mov	r0, r7
   d9778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d977a <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   d977a:	6a00      	ldr	r0, [r0, #32]
   d977c:	6803      	ldr	r3, [r0, #0]
   d977e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9780:	4718      	bx	r3

000d9782 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   d9782:	2001      	movs	r0, #1
   d9784:	4770      	bx	lr

000d9786 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   d9786:	20fb      	movs	r0, #251	; 0xfb
   d9788:	4770      	bx	lr

000d978a <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   d978a:	4770      	bx	lr

000d978c <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   d978c:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   d978e:	7903      	ldrb	r3, [r0, #4]
   d9790:	2b05      	cmp	r3, #5
{
   d9792:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   d9794:	d010      	beq.n	d97b8 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   d9796:	6803      	ldr	r3, [r0, #0]
   d9798:	2105      	movs	r1, #5
   d979a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d979e:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   d97a0:	2207      	movs	r2, #7
   d97a2:	2101      	movs	r1, #1
   d97a4:	4620      	mov	r0, r4
   d97a6:	f7ff ff72 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   d97aa:	2280      	movs	r2, #128	; 0x80
   d97ac:	2140      	movs	r1, #64	; 0x40
   d97ae:	4620      	mov	r0, r4
   d97b0:	f7ff ff6d 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   d97b4:	2305      	movs	r3, #5
   d97b6:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   d97b8:	7923      	ldrb	r3, [r4, #4]
   d97ba:	2b05      	cmp	r3, #5
   d97bc:	d0fc      	beq.n	d97b8 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   d97be:	7e20      	ldrb	r0, [r4, #24]
}
   d97c0:	bd10      	pop	{r4, pc}

000d97c2 <_ZN7RH_RF95D0Ev>:
   d97c2:	b510      	push	{r4, lr}
   d97c4:	f44f 7198 	mov.w	r1, #304	; 0x130
   d97c8:	4604      	mov	r4, r0
   d97ca:	f004 fb91 	bl	ddef0 <_ZdlPvj>
   d97ce:	4620      	mov	r0, r4
   d97d0:	bd10      	pop	{r4, pc}

000d97d2 <_ZN7RH_RF955sleepEv>:
{
   d97d2:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   d97d4:	7903      	ldrb	r3, [r0, #4]
   d97d6:	2b01      	cmp	r3, #1
{
   d97d8:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   d97da:	d00b      	beq.n	d97f4 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   d97dc:	6803      	ldr	r3, [r0, #0]
   d97de:	2101      	movs	r1, #1
   d97e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d97e4:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   d97e6:	2200      	movs	r2, #0
   d97e8:	2101      	movs	r1, #1
   d97ea:	4620      	mov	r0, r4
   d97ec:	f7ff ff4f 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   d97f0:	2301      	movs	r3, #1
   d97f2:	7123      	strb	r3, [r4, #4]
}
   d97f4:	2001      	movs	r0, #1
   d97f6:	bd10      	pop	{r4, pc}

000d97f8 <_ZN7RH_RF954recvEPhS0_>:
{
   d97f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   d97fa:	6803      	ldr	r3, [r0, #0]
   d97fc:	68db      	ldr	r3, [r3, #12]
{
   d97fe:	4604      	mov	r4, r0
   d9800:	460f      	mov	r7, r1
   d9802:	4615      	mov	r5, r2
    if (!available())
   d9804:	4798      	blx	r3
   d9806:	4606      	mov	r6, r0
   d9808:	b1b0      	cbz	r0, d9838 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   d980a:	b187      	cbz	r7, d982e <_ZN7RH_RF954recvEPhS0_+0x36>
   d980c:	b17d      	cbz	r5, d982e <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   d980e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d9812:	782a      	ldrb	r2, [r5, #0]
   d9814:	3b03      	subs	r3, #3
   d9816:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   d9818:	bfde      	ittt	le
   d981a:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   d981e:	3b04      	suble	r3, #4
   d9820:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   d9822:	782a      	ldrb	r2, [r5, #0]
   d9824:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d9828:	4638      	mov	r0, r7
   d982a:	f004 ffed 	bl	de808 <memcpy>
    _rxBufValid = false;
   d982e:	2300      	movs	r3, #0
   d9830:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d9834:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   d9838:	4630      	mov	r0, r6
   d983a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d983c <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   d983c:	b538      	push	{r3, r4, r5, lr}
   d983e:	4604      	mov	r4, r0
   d9840:	4615      	mov	r5, r2
    _rxBufValid(0)
   d9842:	461a      	mov	r2, r3
   d9844:	f7ff fef2 	bl	d962c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   d9848:	4b09      	ldr	r3, [pc, #36]	; (d9870 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   d984a:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   d984c:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   d984e:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   d9850:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   d9854:	2201      	movs	r2, #1
    _rxBufValid(0)
   d9856:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   d985a:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   d985e:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   d9862:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   d9866:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   d986a:	4620      	mov	r0, r4
   d986c:	bd38      	pop	{r3, r4, r5, pc}
   d986e:	bf00      	nop
   d9870:	000dfcd8 	.word	0x000dfcd8

000d9874 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   d9874:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   d9878:	2b03      	cmp	r3, #3
   d987a:	d91b      	bls.n	d98b4 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   d987c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d9880:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   d9882:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   d9886:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   d9888:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   d988c:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   d988e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d9892:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   d9894:	7983      	ldrb	r3, [r0, #6]
   d9896:	b933      	cbnz	r3, d98a6 <_ZN7RH_RF9513validateRxBufEv+0x32>
   d9898:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   d989a:	7942      	ldrb	r2, [r0, #5]
   d989c:	429a      	cmp	r2, r3
   d989e:	d002      	beq.n	d98a6 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   d98a0:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   d98a2:	2bff      	cmp	r3, #255	; 0xff
   d98a4:	d106      	bne.n	d98b4 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   d98a6:	8a83      	ldrh	r3, [r0, #20]
   d98a8:	3301      	adds	r3, #1
   d98aa:	b29b      	uxth	r3, r3
   d98ac:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   d98ae:	2301      	movs	r3, #1
   d98b0:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   d98b4:	4770      	bx	lr
	...

000d98b8 <_ZN7RH_RF9512setFrequencyEf>:
{
   d98b8:	b538      	push	{r3, r4, r5, lr}
   d98ba:	4604      	mov	r4, r0
   d98bc:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d98c0:	ee10 0a10 	vmov	r0, s0
{
   d98c4:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d98c8:	f004 fc86 	bl	de1d8 <__aeabi_f2d>
   d98cc:	a317      	add	r3, pc, #92	; (adr r3, d992c <_ZN7RH_RF9512setFrequencyEf+0x74>)
   d98ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98d2:	f004 fcd9 	bl	de288 <__aeabi_dmul>
   d98d6:	a317      	add	r3, pc, #92	; (adr r3, d9934 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   d98d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98dc:	f004 fdfe 	bl	de4dc <__aeabi_ddiv>
   d98e0:	f004 fee4 	bl	de6ac <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d98e4:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d98e6:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d98e8:	f3c0 4207 	ubfx	r2, r0, #16, #8
   d98ec:	4620      	mov	r0, r4
   d98ee:	f7ff fece 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   d98f2:	f3c5 2207 	ubfx	r2, r5, #8, #8
   d98f6:	2107      	movs	r1, #7
   d98f8:	4620      	mov	r0, r4
   d98fa:	f7ff fec8 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   d98fe:	b2ea      	uxtb	r2, r5
   d9900:	2108      	movs	r1, #8
   d9902:	4620      	mov	r0, r4
   d9904:	f7ff fec3 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   d9908:	eddf 7a07 	vldr	s15, [pc, #28]	; d9928 <_ZN7RH_RF9512setFrequencyEf+0x70>
   d990c:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   d9910:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   d9914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9918:	bfac      	ite	ge
   d991a:	2301      	movge	r3, #1
   d991c:	2300      	movlt	r3, #0
}
   d991e:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   d9920:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   d9924:	bd38      	pop	{r3, r4, r5, pc}
   d9926:	bf00      	nop
   d9928:	4442c000 	.word	0x4442c000
   d992c:	00000000 	.word	0x00000000
   d9930:	412e8480 	.word	0x412e8480
   d9934:	00000000 	.word	0x00000000
   d9938:	404e8480 	.word	0x404e8480

000d993c <_ZN7RH_RF9511setModeIdleEv>:
{
   d993c:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   d993e:	7903      	ldrb	r3, [r0, #4]
   d9940:	2b02      	cmp	r3, #2
{
   d9942:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   d9944:	d00b      	beq.n	d995e <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   d9946:	6803      	ldr	r3, [r0, #0]
   d9948:	2102      	movs	r1, #2
   d994a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d994e:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   d9950:	2201      	movs	r2, #1
   d9952:	4611      	mov	r1, r2
   d9954:	4620      	mov	r0, r4
   d9956:	f7ff fe9a 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   d995a:	2302      	movs	r3, #2
   d995c:	7123      	strb	r3, [r4, #4]
}
   d995e:	bd10      	pop	{r4, pc}

000d9960 <_ZN7RH_RF9515handleInterruptEv>:
{
   d9960:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d9962:	2112      	movs	r1, #18
{
   d9964:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d9966:	f7ff fe71 	bl	d964c <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d996a:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d996c:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d996e:	4620      	mov	r0, r4
   d9970:	f7ff fe6c 	bl	d964c <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d9974:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d9976:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d9978:	2112      	movs	r1, #18
   d997a:	4620      	mov	r0, r4
   d997c:	f7ff fe87 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   d9980:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   d9982:	2b04      	cmp	r3, #4
   d9984:	d107      	bne.n	d9996 <_ZN7RH_RF9515handleInterruptEv+0x36>
   d9986:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   d998a:	d117      	bne.n	d99bc <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   d998c:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   d9990:	b10b      	cbz	r3, d9996 <_ZN7RH_RF9515handleInterruptEv+0x36>
   d9992:	0670      	lsls	r0, r6, #25
   d9994:	d512      	bpl.n	d99bc <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   d9996:	7923      	ldrb	r3, [r4, #4]
   d9998:	2b04      	cmp	r3, #4
   d999a:	d101      	bne.n	d99a0 <_ZN7RH_RF9515handleInterruptEv+0x40>
   d999c:	0669      	lsls	r1, r5, #25
   d999e:	d422      	bmi.n	d99e6 <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   d99a0:	7923      	ldrb	r3, [r4, #4]
   d99a2:	2b03      	cmp	r3, #3
   d99a4:	d101      	bne.n	d99aa <_ZN7RH_RF9515handleInterruptEv+0x4a>
   d99a6:	072a      	lsls	r2, r5, #28
   d99a8:	d469      	bmi.n	d9a7e <_ZN7RH_RF9515handleInterruptEv+0x11e>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   d99aa:	7923      	ldrb	r3, [r4, #4]
   d99ac:	2b05      	cmp	r3, #5
   d99ae:	d10e      	bne.n	d99ce <_ZN7RH_RF9515handleInterruptEv+0x6e>
   d99b0:	076b      	lsls	r3, r5, #29
   d99b2:	d50c      	bpl.n	d99ce <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   d99b4:	f005 0501 	and.w	r5, r5, #1
   d99b8:	7625      	strb	r5, [r4, #24]
   d99ba:	e059      	b.n	d9a70 <_ZN7RH_RF9515handleInterruptEv+0x110>
	_rxBad++;
   d99bc:	8a63      	ldrh	r3, [r4, #18]
   d99be:	3301      	adds	r3, #1
   d99c0:	b29b      	uxth	r3, r3
   d99c2:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   d99c4:	2300      	movs	r3, #0
   d99c6:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d99ca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d99ce:	22ff      	movs	r2, #255	; 0xff
   d99d0:	2112      	movs	r1, #18
   d99d2:	4620      	mov	r0, r4
   d99d4:	f7ff fe5b 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d99d8:	4620      	mov	r0, r4
   d99da:	22ff      	movs	r2, #255	; 0xff
}
   d99dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d99e0:	2112      	movs	r1, #18
   d99e2:	f7ff be54 	b.w	d968e <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d99e6:	2113      	movs	r1, #19
   d99e8:	4620      	mov	r0, r4
   d99ea:	f7ff fe2f 	bl	d964c <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d99ee:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d99f0:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d99f2:	4620      	mov	r0, r4
   d99f4:	f7ff fe2a 	bl	d964c <_ZN11RHSPIDriver7spiReadEh>
   d99f8:	210d      	movs	r1, #13
   d99fa:	4602      	mov	r2, r0
   d99fc:	4620      	mov	r0, r4
   d99fe:	f7ff fe46 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   d9a02:	f104 0229 	add.w	r2, r4, #41	; 0x29
   d9a06:	462b      	mov	r3, r5
   d9a08:	2100      	movs	r1, #0
   d9a0a:	4620      	mov	r0, r4
   d9a0c:	f7ff fe64 	bl	d96d8 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d9a10:	2119      	movs	r1, #25
	_bufLen = len;
   d9a12:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d9a16:	4620      	mov	r0, r4
   d9a18:	f7ff fe18 	bl	d964c <_ZN11RHSPIDriver7spiReadEh>
   d9a1c:	b240      	sxtb	r0, r0
   d9a1e:	2800      	cmp	r0, #0
   d9a20:	bfb8      	it	lt
   d9a22:	3003      	addlt	r0, #3
   d9a24:	1080      	asrs	r0, r0, #2
   d9a26:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d9a2a:	211a      	movs	r1, #26
   d9a2c:	4620      	mov	r0, r4
   d9a2e:	f7ff fe0d 	bl	d964c <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   d9a32:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d9a36:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   d9a38:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d9a3a:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d9a3c:	bfa9      	itett	ge
   d9a3e:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   d9a40:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d9a42:	b21b      	sxthge	r3, r3
   d9a44:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   d9a46:	bfb2      	itee	lt
   d9a48:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d9a4a:	220f      	movge	r2, #15
   d9a4c:	fb93 f3f2 	sdivge	r3, r3, r2
   d9a50:	b21b      	sxth	r3, r3
   d9a52:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   d9a54:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   d9a58:	b173      	cbz	r3, d9a78 <_ZN7RH_RF9515handleInterruptEv+0x118>
	    _lastRssi -= 157;
   d9a5a:	8a23      	ldrh	r3, [r4, #16]
   d9a5c:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   d9a5e:	b21b      	sxth	r3, r3
   d9a60:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   d9a62:	4620      	mov	r0, r4
   d9a64:	f7ff ff06 	bl	d9874 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   d9a68:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   d9a6c:	2b00      	cmp	r3, #0
   d9a6e:	d0ae      	beq.n	d99ce <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   d9a70:	4620      	mov	r0, r4
   d9a72:	f7ff ff63 	bl	d993c <_ZN7RH_RF9511setModeIdleEv>
   d9a76:	e7aa      	b.n	d99ce <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   d9a78:	8a23      	ldrh	r3, [r4, #16]
   d9a7a:	3ba4      	subs	r3, #164	; 0xa4
   d9a7c:	e7ef      	b.n	d9a5e <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   d9a7e:	8ae3      	ldrh	r3, [r4, #22]
   d9a80:	3301      	adds	r3, #1
   d9a82:	b29b      	uxth	r3, r3
   d9a84:	82e3      	strh	r3, [r4, #22]
	setModeIdle();
   d9a86:	e7f3      	b.n	d9a70 <_ZN7RH_RF9515handleInterruptEv+0x110>

000d9a88 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   d9a88:	4b02      	ldr	r3, [pc, #8]	; (d9a94 <_ZN7RH_RF954isr0Ev+0xc>)
   d9a8a:	6818      	ldr	r0, [r3, #0]
   d9a8c:	b108      	cbz	r0, d9a92 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   d9a8e:	f7ff bf67 	b.w	d9960 <_ZN7RH_RF9515handleInterruptEv>
}
   d9a92:	4770      	bx	lr
   d9a94:	2003e488 	.word	0x2003e488

000d9a98 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   d9a98:	4b02      	ldr	r3, [pc, #8]	; (d9aa4 <_ZN7RH_RF954isr1Ev+0xc>)
   d9a9a:	6858      	ldr	r0, [r3, #4]
   d9a9c:	b108      	cbz	r0, d9aa2 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   d9a9e:	f7ff bf5f 	b.w	d9960 <_ZN7RH_RF9515handleInterruptEv>
}
   d9aa2:	4770      	bx	lr
   d9aa4:	2003e488 	.word	0x2003e488

000d9aa8 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   d9aa8:	4b02      	ldr	r3, [pc, #8]	; (d9ab4 <_ZN7RH_RF954isr2Ev+0xc>)
   d9aaa:	6898      	ldr	r0, [r3, #8]
   d9aac:	b108      	cbz	r0, d9ab2 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   d9aae:	f7ff bf57 	b.w	d9960 <_ZN7RH_RF9515handleInterruptEv>
}
   d9ab2:	4770      	bx	lr
   d9ab4:	2003e488 	.word	0x2003e488

000d9ab8 <_ZN7RH_RF959setModeRxEv>:
{
   d9ab8:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   d9aba:	7903      	ldrb	r3, [r0, #4]
   d9abc:	2b04      	cmp	r3, #4
{
   d9abe:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   d9ac0:	d010      	beq.n	d9ae4 <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   d9ac2:	6803      	ldr	r3, [r0, #0]
   d9ac4:	2104      	movs	r1, #4
   d9ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d9aca:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   d9acc:	2205      	movs	r2, #5
   d9ace:	2101      	movs	r1, #1
   d9ad0:	4620      	mov	r0, r4
   d9ad2:	f7ff fddc 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   d9ad6:	2200      	movs	r2, #0
   d9ad8:	2140      	movs	r1, #64	; 0x40
   d9ada:	4620      	mov	r0, r4
   d9adc:	f7ff fdd7 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   d9ae0:	2304      	movs	r3, #4
   d9ae2:	7123      	strb	r3, [r4, #4]
}
   d9ae4:	bd10      	pop	{r4, pc}

000d9ae6 <_ZN7RH_RF959availableEv>:
{
   d9ae6:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   d9ae8:	7903      	ldrb	r3, [r0, #4]
   d9aea:	2b03      	cmp	r3, #3
{
   d9aec:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   d9aee:	d005      	beq.n	d9afc <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   d9af0:	f7ff ffe2 	bl	d9ab8 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   d9af4:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   d9af8:	b2c0      	uxtb	r0, r0
}
   d9afa:	bd10      	pop	{r4, pc}
	return false;
   d9afc:	2000      	movs	r0, #0
   d9afe:	e7fc      	b.n	d9afa <_ZN7RH_RF959availableEv+0x14>

000d9b00 <_ZN7RH_RF959setModeTxEv>:
{
   d9b00:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   d9b02:	7903      	ldrb	r3, [r0, #4]
   d9b04:	2b03      	cmp	r3, #3
{
   d9b06:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   d9b08:	d010      	beq.n	d9b2c <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   d9b0a:	6803      	ldr	r3, [r0, #0]
   d9b0c:	2103      	movs	r1, #3
   d9b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d9b12:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   d9b14:	2203      	movs	r2, #3
   d9b16:	2101      	movs	r1, #1
   d9b18:	4620      	mov	r0, r4
   d9b1a:	f7ff fdb8 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   d9b1e:	2240      	movs	r2, #64	; 0x40
   d9b20:	4611      	mov	r1, r2
   d9b22:	4620      	mov	r0, r4
   d9b24:	f7ff fdb3 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   d9b28:	2303      	movs	r3, #3
   d9b2a:	7123      	strb	r3, [r4, #4]
}
   d9b2c:	bd10      	pop	{r4, pc}

000d9b2e <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d9b2e:	2afb      	cmp	r2, #251	; 0xfb
{
   d9b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9b32:	4604      	mov	r4, r0
   d9b34:	460f      	mov	r7, r1
   d9b36:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d9b38:	d902      	bls.n	d9b40 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   d9b3a:	2600      	movs	r6, #0
}
   d9b3c:	4630      	mov	r0, r6
   d9b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   d9b40:	6803      	ldr	r3, [r0, #0]
   d9b42:	6a1b      	ldr	r3, [r3, #32]
   d9b44:	4798      	blx	r3
    setModeIdle();
   d9b46:	4620      	mov	r0, r4
   d9b48:	f7ff fef8 	bl	d993c <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   d9b4c:	6823      	ldr	r3, [r4, #0]
   d9b4e:	4620      	mov	r0, r4
   d9b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9b52:	4798      	blx	r3
   d9b54:	4606      	mov	r6, r0
   d9b56:	2800      	cmp	r0, #0
   d9b58:	d0ef      	beq.n	d9b3a <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   d9b5a:	2200      	movs	r2, #0
   d9b5c:	210d      	movs	r1, #13
   d9b5e:	4620      	mov	r0, r4
   d9b60:	f7ff fd95 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   d9b64:	7ae2      	ldrb	r2, [r4, #11]
   d9b66:	2100      	movs	r1, #0
   d9b68:	4620      	mov	r0, r4
   d9b6a:	f7ff fd90 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   d9b6e:	7b22      	ldrb	r2, [r4, #12]
   d9b70:	2100      	movs	r1, #0
   d9b72:	4620      	mov	r0, r4
   d9b74:	f7ff fd8b 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   d9b78:	7b62      	ldrb	r2, [r4, #13]
   d9b7a:	2100      	movs	r1, #0
   d9b7c:	4620      	mov	r0, r4
   d9b7e:	f7ff fd86 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   d9b82:	7ba2      	ldrb	r2, [r4, #14]
   d9b84:	2100      	movs	r1, #0
   d9b86:	4620      	mov	r0, r4
   d9b88:	f7ff fd81 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   d9b8c:	462b      	mov	r3, r5
   d9b8e:	463a      	mov	r2, r7
   d9b90:	2100      	movs	r1, #0
   d9b92:	4620      	mov	r0, r4
   d9b94:	f7ff fdc9 	bl	d972a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   d9b98:	1d2a      	adds	r2, r5, #4
   d9b9a:	b2d2      	uxtb	r2, r2
   d9b9c:	2122      	movs	r1, #34	; 0x22
   d9b9e:	4620      	mov	r0, r4
   d9ba0:	f7ff fd75 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   d9ba4:	4620      	mov	r0, r4
   d9ba6:	f7ff ffab 	bl	d9b00 <_ZN7RH_RF959setModeTxEv>
    return true;
   d9baa:	e7c7      	b.n	d9b3c <_ZN7RH_RF954sendEPKhh+0xe>

000d9bac <_ZN7RH_RF9510setTxPowerEab>:
{
   d9bac:	b538      	push	{r3, r4, r5, lr}
   d9bae:	4605      	mov	r5, r0
   d9bb0:	460c      	mov	r4, r1
    _useRFO = useRFO;
   d9bb2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   d9bb6:	b172      	cbz	r2, d9bd6 <_ZN7RH_RF9510setTxPowerEab+0x2a>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   d9bb8:	f381 0204 	usat	r2, #4, r1
   d9bbc:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d9bc0:	b2d2      	uxtb	r2, r2
   d9bc2:	2109      	movs	r1, #9
   d9bc4:	f7ff fd63 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d9bc8:	2204      	movs	r2, #4
   d9bca:	214d      	movs	r1, #77	; 0x4d
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d9bcc:	4628      	mov	r0, r5
}
   d9bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d9bd2:	f7ff bd5c 	b.w	d968e <_ZN11RHSPIDriver8spiWriteEhh>
	if (power > 20)
   d9bd6:	2914      	cmp	r1, #20
   d9bd8:	dc10      	bgt.n	d9bfc <_ZN7RH_RF9510setTxPowerEab+0x50>
	if (power < 2)
   d9bda:	2901      	cmp	r1, #1
   d9bdc:	dd10      	ble.n	d9c00 <_ZN7RH_RF9510setTxPowerEab+0x54>
	if (power > 17)
   d9bde:	2911      	cmp	r1, #17
   d9be0:	dd0f      	ble.n	d9c02 <_ZN7RH_RF9510setTxPowerEab+0x56>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   d9be2:	2207      	movs	r2, #7
   d9be4:	214d      	movs	r1, #77	; 0x4d
   d9be6:	4628      	mov	r0, r5
   d9be8:	f7ff fd51 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   d9bec:	3c03      	subs	r4, #3
   d9bee:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d9bf0:	1ea2      	subs	r2, r4, #2
   d9bf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   d9bf6:	b2d2      	uxtb	r2, r2
   d9bf8:	2109      	movs	r1, #9
   d9bfa:	e7e7      	b.n	d9bcc <_ZN7RH_RF9510setTxPowerEab+0x20>
	    power = 20;
   d9bfc:	2414      	movs	r4, #20
   d9bfe:	e7f0      	b.n	d9be2 <_ZN7RH_RF9510setTxPowerEab+0x36>
	    power = 2;
   d9c00:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d9c02:	2204      	movs	r2, #4
   d9c04:	214d      	movs	r1, #77	; 0x4d
   d9c06:	4628      	mov	r0, r5
   d9c08:	f7ff fd41 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
   d9c0c:	e7f0      	b.n	d9bf0 <_ZN7RH_RF9510setTxPowerEab+0x44>

000d9c0e <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   d9c0e:	b538      	push	{r3, r4, r5, lr}
   d9c10:	460c      	mov	r4, r1
   d9c12:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   d9c14:	780a      	ldrb	r2, [r1, #0]
   d9c16:	211d      	movs	r1, #29
   d9c18:	f7ff fd39 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   d9c1c:	7862      	ldrb	r2, [r4, #1]
   d9c1e:	211e      	movs	r1, #30
   d9c20:	4628      	mov	r0, r5
   d9c22:	f7ff fd34 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d9c26:	78a2      	ldrb	r2, [r4, #2]
   d9c28:	4628      	mov	r0, r5
   d9c2a:	2126      	movs	r1, #38	; 0x26
}
   d9c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d9c30:	f7ff bd2d 	b.w	d968e <_ZN11RHSPIDriver8spiWriteEhh>

000d9c34 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d9c34:	2905      	cmp	r1, #5
{
   d9c36:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d9c38:	d80f      	bhi.n	d9c5a <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d9c3a:	4b09      	ldr	r3, [pc, #36]	; (d9c60 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   d9c3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d9c40:	185c      	adds	r4, r3, r1
   d9c42:	5a5a      	ldrh	r2, [r3, r1]
   d9c44:	78a3      	ldrb	r3, [r4, #2]
   d9c46:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   d9c4a:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d9c4c:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   d9c50:	f7ff ffdd 	bl	d9c0e <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   d9c54:	2001      	movs	r0, #1
}
   d9c56:	b002      	add	sp, #8
   d9c58:	bd10      	pop	{r4, pc}
        return false;
   d9c5a:	2000      	movs	r0, #0
   d9c5c:	e7fb      	b.n	d9c56 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   d9c5e:	bf00      	nop
   d9c60:	000dfcc0 	.word	0x000dfcc0

000d9c64 <_ZN7RH_RF9517setPreambleLengthEt>:
{
   d9c64:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d9c66:	0a0a      	lsrs	r2, r1, #8
{
   d9c68:	4605      	mov	r5, r0
   d9c6a:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d9c6c:	2120      	movs	r1, #32
   d9c6e:	f7ff fd0e 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d9c72:	b2e2      	uxtb	r2, r4
   d9c74:	4628      	mov	r0, r5
   d9c76:	2121      	movs	r1, #33	; 0x21
}
   d9c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d9c7c:	f7ff bd07 	b.w	d968e <_ZN11RHSPIDriver8spiWriteEhh>

000d9c80 <_ZN7RH_RF954initEv>:
{
   d9c80:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9c82:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   d9c84:	f7ff fcb2 	bl	d95ec <_ZN11RHSPIDriver4initEv>
   d9c88:	4606      	mov	r6, r0
   d9c8a:	b918      	cbnz	r0, d9c94 <_ZN7RH_RF954initEv+0x14>
	return false;
   d9c8c:	2600      	movs	r6, #0
}
   d9c8e:	4630      	mov	r0, r6
   d9c90:	b002      	add	sp, #8
   d9c92:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   d9c94:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   d9c98:	2dff      	cmp	r5, #255	; 0xff
   d9c9a:	d052      	beq.n	d9d42 <_ZN7RH_RF954initEv+0xc2>
	spiUsingInterrupt(interruptNumber);
   d9c9c:	4629      	mov	r1, r5
   d9c9e:	4620      	mov	r0, r4
   d9ca0:	f7ff fd6b 	bl	d977a <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   d9ca4:	2280      	movs	r2, #128	; 0x80
   d9ca6:	2101      	movs	r1, #1
   d9ca8:	4620      	mov	r0, r4
   d9caa:	f7ff fcf0 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   d9cae:	200a      	movs	r0, #10
   d9cb0:	f001 f83a 	bl	dad28 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   d9cb4:	2101      	movs	r1, #1
   d9cb6:	4620      	mov	r0, r4
   d9cb8:	f7ff fcc8 	bl	d964c <_ZN11RHSPIDriver7spiReadEh>
   d9cbc:	2880      	cmp	r0, #128	; 0x80
   d9cbe:	d1e5      	bne.n	d9c8c <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   d9cc0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   d9cc4:	28ff      	cmp	r0, #255	; 0xff
   d9cc6:	d01c      	beq.n	d9d02 <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   d9cc8:	2100      	movs	r1, #0
   d9cca:	f004 f843 	bl	ddd54 <pinMode>
	if (_myInterruptIndex == 0xff)
   d9cce:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d9cd2:	2bff      	cmp	r3, #255	; 0xff
   d9cd4:	d107      	bne.n	d9ce6 <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   d9cd6:	4a25      	ldr	r2, [pc, #148]	; (d9d6c <_ZN7RH_RF954initEv+0xec>)
   d9cd8:	7813      	ldrb	r3, [r2, #0]
   d9cda:	2b03      	cmp	r3, #3
   d9cdc:	d8d6      	bhi.n	d9c8c <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   d9cde:	1c59      	adds	r1, r3, #1
   d9ce0:	7011      	strb	r1, [r2, #0]
   d9ce2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   d9ce6:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   d9cea:	4b21      	ldr	r3, [pc, #132]	; (d9d70 <_ZN7RH_RF954initEv+0xf0>)
   d9cec:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   d9cf0:	bb52      	cbnz	r2, d9d48 <_ZN7RH_RF954initEv+0xc8>
	    attachInterrupt(interruptNumber, isr0, RISING);
   d9cf2:	4920      	ldr	r1, [pc, #128]	; (d9d74 <_ZN7RH_RF954initEv+0xf4>)
   d9cf4:	9200      	str	r2, [sp, #0]
   d9cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9cfa:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   d9cfc:	b2a8      	uxth	r0, r5
   d9cfe:	f001 fdf3 	bl	db8e8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   d9d02:	2200      	movs	r2, #0
   d9d04:	210e      	movs	r1, #14
   d9d06:	4620      	mov	r0, r4
   d9d08:	f7ff fcc1 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   d9d0c:	2200      	movs	r2, #0
   d9d0e:	210f      	movs	r1, #15
   d9d10:	4620      	mov	r0, r4
   d9d12:	f7ff fcbc 	bl	d968e <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   d9d16:	4620      	mov	r0, r4
   d9d18:	f7ff fe10 	bl	d993c <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   d9d1c:	2100      	movs	r1, #0
   d9d1e:	4620      	mov	r0, r4
   d9d20:	f7ff ff88 	bl	d9c34 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   d9d24:	2108      	movs	r1, #8
   d9d26:	4620      	mov	r0, r4
   d9d28:	f7ff ff9c 	bl	d9c64 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   d9d2c:	ed9f 0a12 	vldr	s0, [pc, #72]	; d9d78 <_ZN7RH_RF954initEv+0xf8>
   d9d30:	4620      	mov	r0, r4
   d9d32:	f7ff fdc1 	bl	d98b8 <_ZN7RH_RF9512setFrequencyEf>
    setTxPower(13);
   d9d36:	2200      	movs	r2, #0
   d9d38:	210d      	movs	r1, #13
   d9d3a:	4620      	mov	r0, r4
   d9d3c:	f7ff ff36 	bl	d9bac <_ZN7RH_RF9510setTxPowerEab>
    return true;
   d9d40:	e7a5      	b.n	d9c8e <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   d9d42:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d9d46:	e7ad      	b.n	d9ca4 <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   d9d48:	2a01      	cmp	r2, #1
   d9d4a:	f04f 0300 	mov.w	r3, #0
   d9d4e:	d104      	bne.n	d9d5a <_ZN7RH_RF954initEv+0xda>
	    attachInterrupt(interruptNumber, isr1, RISING);
   d9d50:	9300      	str	r3, [sp, #0]
   d9d52:	490a      	ldr	r1, [pc, #40]	; (d9d7c <_ZN7RH_RF954initEv+0xfc>)
   d9d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9d58:	e7d0      	b.n	d9cfc <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   d9d5a:	2a02      	cmp	r2, #2
   d9d5c:	d196      	bne.n	d9c8c <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   d9d5e:	9300      	str	r3, [sp, #0]
   d9d60:	4907      	ldr	r1, [pc, #28]	; (d9d80 <_ZN7RH_RF954initEv+0x100>)
   d9d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9d66:	2201      	movs	r2, #1
   d9d68:	e7c8      	b.n	d9cfc <_ZN7RH_RF954initEv+0x7c>
   d9d6a:	bf00      	nop
   d9d6c:	2003e485 	.word	0x2003e485
   d9d70:	2003e488 	.word	0x2003e488
   d9d74:	000d9a89 	.word	0x000d9a89
   d9d78:	43d90000 	.word	0x43d90000
   d9d7c:	000d9a99 	.word	0x000d9a99
   d9d80:	000d9aa9 	.word	0x000d9aa9

000d9d84 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   d9d84:	2001      	movs	r0, #1
   d9d86:	4770      	bx	lr

000d9d88 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   d9d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9d8a:	4d1f      	ldr	r5, [pc, #124]	; (d9e08 <_ZN14SequentialFileC1Ev+0x80>)
   d9d8c:	4b1f      	ldr	r3, [pc, #124]	; (d9e0c <_ZN14SequentialFileC1Ev+0x84>)
   d9d8e:	4604      	mov	r4, r0
   d9d90:	4629      	mov	r1, r5
   d9d92:	f840 3b04 	str.w	r3, [r0], #4
   d9d96:	f003 facc 	bl	dd332 <_ZN6StringC1EPKc>
   d9d9a:	491d      	ldr	r1, [pc, #116]	; (d9e10 <_ZN14SequentialFileC1Ev+0x88>)
   d9d9c:	f104 0014 	add.w	r0, r4, #20
   d9da0:	f003 fac7 	bl	dd332 <_ZN6StringC1EPKc>
   d9da4:	4629      	mov	r1, r5
   d9da6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d9daa:	f003 fac2 	bl	dd332 <_ZN6StringC1EPKc>
   d9dae:	2300      	movs	r3, #0
   d9db0:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d9db4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   d9db8:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   d9dbc:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   d9dc0:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   d9dc4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	  _M_start(), _M_finish()
   d9dc8:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d9dca:	2308      	movs	r3, #8
   d9dcc:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9dce:	2020      	movs	r0, #32
   d9dd0:	f7fa f961 	bl	d4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d9dd4:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d9dd6:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d9dd8:	3d01      	subs	r5, #1
   d9dda:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d9ddc:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   d9de0:	4606      	mov	r6, r0
   d9de2:	f44f 7000 	mov.w	r0, #512	; 0x200
   d9de6:	f7fa f956 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d9dea:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d9dee:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   d9df2:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   d9df6:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d9df8:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d9dfa:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   d9dfc:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   d9dfe:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   d9e00:	6667      	str	r7, [r4, #100]	; 0x64

}
   d9e02:	4620      	mov	r0, r4
   d9e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9e06:	bf00      	nop
   d9e08:	000dffd4 	.word	0x000dffd4
   d9e0c:	000dfe5c 	.word	0x000dfe5c
   d9e10:	000dfd5c 	.word	0x000dfd5c

000d9e14 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d9e14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   d9e16:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d9e18:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   d9e1a:	4628      	mov	r0, r5
   d9e1c:	f003 fae7 	bl	dd3ee <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   d9e20:	490e      	ldr	r1, [pc, #56]	; (d9e5c <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   d9e22:	4668      	mov	r0, sp
   d9e24:	f003 fa85 	bl	dd332 <_ZN6StringC1EPKc>
   d9e28:	4669      	mov	r1, sp
   d9e2a:	4628      	mov	r0, r5
   d9e2c:	f003 fb4c 	bl	dd4c8 <_ZNK6String8endsWithERKS_>
   d9e30:	4606      	mov	r6, r0
   d9e32:	4668      	mov	r0, sp
   d9e34:	f003 fa32 	bl	dd29c <_ZN6StringD1Ev>
   d9e38:	b16e      	cbz	r6, d9e56 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   d9e3a:	68e3      	ldr	r3, [r4, #12]
   d9e3c:	2200      	movs	r2, #0
   d9e3e:	3b01      	subs	r3, #1
   d9e40:	4629      	mov	r1, r5
   d9e42:	4668      	mov	r0, sp
   d9e44:	f003 fb56 	bl	dd4f4 <_ZNK6String9substringEjj>
   d9e48:	4669      	mov	r1, sp
   d9e4a:	4628      	mov	r0, r5
   d9e4c:	f003 fac7 	bl	dd3de <_ZN6StringaSEOS_>
   d9e50:	4668      	mov	r0, sp
   d9e52:	f003 fa23 	bl	dd29c <_ZN6StringD1Ev>
    }
    return *this; 
};
   d9e56:	4620      	mov	r0, r4
   d9e58:	b004      	add	sp, #16
   d9e5a:	bd70      	pop	{r4, r5, r6, pc}
   d9e5c:	000dfd61 	.word	0x000dfd61

000d9e60 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   d9e60:	b510      	push	{r4, lr}
    if (!queueMutex) {
   d9e62:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   d9e64:	4604      	mov	r4, r0
    if (!queueMutex) {
   d9e66:	b913      	cbnz	r3, d9e6e <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   d9e68:	303c      	adds	r0, #60	; 0x3c
   d9e6a:	f000 fb03 	bl	da474 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   d9e6e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   d9e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   d9e74:	f000 bb06 	b.w	da484 <os_mutex_lock>

000d9e78 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   d9e78:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d9e7a:	f000 bb0b 	b.w	da494 <os_mutex_unlock>
	...

000d9e80 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   d9e80:	b510      	push	{r4, lr}
   d9e82:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   d9e84:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   d9e86:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   d9e88:	f000 fcb4 	bl	da7f4 <stat>
    if (result == 0) {
   d9e8c:	b9d0      	cbnz	r0, d9ec4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d9e8e:	9b01      	ldr	r3, [sp, #4]
   d9e90:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   d9e92:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d9e94:	d506      	bpl.n	d9ea4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   d9e96:	4915      	ldr	r1, [pc, #84]	; (d9eec <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   d9e98:	4815      	ldr	r0, [pc, #84]	; (d9ef0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d9e9a:	f7fa f915 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
        return true;
   d9e9e:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   d9ea0:	b016      	add	sp, #88	; 0x58
   d9ea2:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   d9ea4:	4812      	ldr	r0, [pc, #72]	; (d9ef0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d9ea6:	4913      	ldr	r1, [pc, #76]	; (d9ef4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   d9ea8:	f7fb fcdf 	bl	d586a <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   d9eac:	4620      	mov	r0, r4
   d9eae:	f004 fea3 	bl	debf8 <unlink>
    result = mkdir(path, 0777);
   d9eb2:	f240 11ff 	movw	r1, #511	; 0x1ff
   d9eb6:	4620      	mov	r0, r4
   d9eb8:	f000 fca4 	bl	da804 <mkdir>
    if (result == 0) {
   d9ebc:	b980      	cbnz	r0, d9ee0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   d9ebe:	490e      	ldr	r1, [pc, #56]	; (d9ef8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   d9ec0:	4622      	mov	r2, r4
   d9ec2:	e7e9      	b.n	d9e98 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   d9ec4:	f000 ff00 	bl	dacc8 <__errno>
   d9ec8:	6803      	ldr	r3, [r0, #0]
   d9eca:	2b02      	cmp	r3, #2
   d9ecc:	d0f1      	beq.n	d9eb2 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   d9ece:	f000 fefb 	bl	dacc8 <__errno>
   d9ed2:	490a      	ldr	r1, [pc, #40]	; (d9efc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   d9ed4:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   d9ed6:	4806      	ldr	r0, [pc, #24]	; (d9ef0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d9ed8:	f7fb fcc7 	bl	d586a <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d9edc:	2000      	movs	r0, #0
   d9ede:	e7df      	b.n	d9ea0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   d9ee0:	f000 fef2 	bl	dacc8 <__errno>
   d9ee4:	4906      	ldr	r1, [pc, #24]	; (d9f00 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   d9ee6:	6802      	ldr	r2, [r0, #0]
   d9ee8:	e7f5      	b.n	d9ed6 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   d9eea:	bf00      	nop
   d9eec:	000dfd6e 	.word	0x000dfd6e
   d9ef0:	2003e494 	.word	0x2003e494
   d9ef4:	000dfd8b 	.word	0x000dfd8b
   d9ef8:	000dfdbc 	.word	0x000dfdbc
   d9efc:	000dfda8 	.word	0x000dfda8
   d9f00:	000dfdcb 	.word	0x000dfdcb

000d9f04 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   d9f04:	b538      	push	{r3, r4, r5, lr}
   d9f06:	4615      	mov	r5, r2
   d9f08:	4604      	mov	r4, r0
    String result = name;
   d9f0a:	f003 fa12 	bl	dd332 <_ZN6StringC1EPKc>

    if (ext && *ext) {
   d9f0e:	b14d      	cbz	r5, d9f24 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   d9f10:	782b      	ldrb	r3, [r5, #0]
   d9f12:	b13b      	cbz	r3, d9f24 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d9f14:	4904      	ldr	r1, [pc, #16]	; (d9f28 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   d9f16:	4620      	mov	r0, r4
   d9f18:	f003 fa92 	bl	dd440 <_ZN6String6concatEPKc>
   d9f1c:	4629      	mov	r1, r5
   d9f1e:	4620      	mov	r0, r4
   d9f20:	f003 fa8e 	bl	dd440 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   d9f24:	4620      	mov	r0, r4
   d9f26:	bd38      	pop	{r3, r4, r5, pc}
   d9f28:	000e00d4 	.word	0x000e00d4

000d9f2c <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   d9f2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d9f2e:	4605      	mov	r5, r0
   d9f30:	460e      	mov	r6, r1
   d9f32:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   d9f34:	6949      	ldr	r1, [r1, #20]
   d9f36:	4668      	mov	r0, sp
   d9f38:	f003 fafc 	bl	dd534 <_ZN6String6formatEPKcz>
        operator const char*() const { return c_str(); }
   d9f3c:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   d9f3e:	b904      	cbnz	r4, d9f42 <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   d9f40:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d9f42:	4622      	mov	r2, r4
   d9f44:	4628      	mov	r0, r5
   d9f46:	f7ff ffdd 	bl	d9f04 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   d9f4a:	4668      	mov	r0, sp
   d9f4c:	f003 f9a6 	bl	dd29c <_ZN6StringD1Ev>
}
   d9f50:	4628      	mov	r0, r5
   d9f52:	b004      	add	sp, #16
   d9f54:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9f58 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d9f58:	b570      	push	{r4, r5, r6, lr}
   d9f5a:	460c      	mov	r4, r1
   d9f5c:	b08e      	sub	sp, #56	; 0x38
    String result;
   d9f5e:	491a      	ldr	r1, [pc, #104]	; (d9fc8 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d9f60:	e9cd 3200 	strd	r3, r2, [sp]
   d9f64:	4605      	mov	r5, r0
    String result;
   d9f66:	f003 f9e4 	bl	dd332 <_ZN6StringC1EPKc>
    result.reserve(dirPath.length() + pattern.length() + 4);
   d9f6a:	69e0      	ldr	r0, [r4, #28]
   d9f6c:	68e1      	ldr	r1, [r4, #12]
   d9f6e:	4401      	add	r1, r0
   d9f70:	3104      	adds	r1, #4
   d9f72:	4628      	mov	r0, r5
   d9f74:	f003 f9b0 	bl	dd2d8 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d9f78:	1d21      	adds	r1, r4, #4
   d9f7a:	a806      	add	r0, sp, #24
   d9f7c:	f003 fa24 	bl	dd3c8 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   d9f80:	4912      	ldr	r1, [pc, #72]	; (d9fcc <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   d9f82:	a802      	add	r0, sp, #8
   d9f84:	f003 f9d5 	bl	dd332 <_ZN6StringC1EPKc>
   d9f88:	a902      	add	r1, sp, #8
   d9f8a:	a806      	add	r0, sp, #24
   d9f8c:	f003 fa69 	bl	dd462 <_ZplRK15StringSumHelperRK6String>
   d9f90:	e9dd 3200 	ldrd	r3, r2, [sp]
   d9f94:	4606      	mov	r6, r0
   d9f96:	4621      	mov	r1, r4
   d9f98:	a80a      	add	r0, sp, #40	; 0x28
   d9f9a:	f7ff ffc7 	bl	d9f2c <_ZN14SequentialFile17getNameForFileNumEiPKc>
   d9f9e:	a90a      	add	r1, sp, #40	; 0x28
   d9fa0:	4630      	mov	r0, r6
   d9fa2:	f003 fa5e 	bl	dd462 <_ZplRK15StringSumHelperRK6String>
   d9fa6:	4601      	mov	r1, r0
   d9fa8:	4628      	mov	r0, r5
   d9faa:	f003 f9fe 	bl	dd3aa <_ZN6StringaSERKS_>
   d9fae:	a80a      	add	r0, sp, #40	; 0x28
   d9fb0:	f003 f974 	bl	dd29c <_ZN6StringD1Ev>
   d9fb4:	a802      	add	r0, sp, #8
   d9fb6:	f003 f971 	bl	dd29c <_ZN6StringD1Ev>
class StringSumHelper : public String
   d9fba:	a806      	add	r0, sp, #24
   d9fbc:	f003 f96e 	bl	dd29c <_ZN6StringD1Ev>
}
   d9fc0:	4628      	mov	r0, r5
   d9fc2:	b00e      	add	sp, #56	; 0x38
   d9fc4:	bd70      	pop	{r4, r5, r6, pc}
   d9fc6:	bf00      	nop
   d9fc8:	000dffd4 	.word	0x000dffd4
   d9fcc:	000dfd61 	.word	0x000dfd61

000d9fd0 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d9fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   d9fd4:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d9fd6:	b08e      	sub	sp, #56	; 0x38
   d9fd8:	4605      	mov	r5, r0
   d9fda:	460f      	mov	r7, r1
    if (allExtensions) {
   d9fdc:	2a00      	cmp	r2, #0
   d9fde:	d04a      	beq.n	da076 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   d9fe0:	6840      	ldr	r0, [r0, #4]
   d9fe2:	f000 fc1f 	bl	da824 <opendir>
        if (dir) {
   d9fe6:	4606      	mov	r6, r0
   d9fe8:	2800      	cmp	r0, #0
   d9fea:	d041      	beq.n	da070 <_ZN14SequentialFile13removeFileNumEib+0xa0>
                        String path = dirPath + String("/") + ent->d_name;
   d9fec:	f8df a0b0 	ldr.w	sl, [pc, #176]	; da0a0 <_ZN14SequentialFile13removeFileNumEib+0xd0>
                        _log.trace("removed %s", path.c_str());
   d9ff0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; da098 <_ZN14SequentialFile13removeFileNumEib+0xc8>
   d9ff4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; da09c <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   d9ff8:	4630      	mov	r0, r6
   d9ffa:	f000 fc1b 	bl	da834 <readdir>
                if (!ent) {
   d9ffe:	2800      	cmp	r0, #0
   da000:	d033      	beq.n	da06a <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   da002:	7a82      	ldrb	r2, [r0, #10]
   da004:	2a08      	cmp	r2, #8
   da006:	d1f7      	bne.n	d9ff8 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   da008:	f100 040b 	add.w	r4, r0, #11
   da00c:	6969      	ldr	r1, [r5, #20]
   da00e:	aa01      	add	r2, sp, #4
   da010:	4620      	mov	r0, r4
   da012:	f000 fe31 	bl	dac78 <sscanf>
   da016:	2801      	cmp	r0, #1
   da018:	d1ee      	bne.n	d9ff8 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   da01a:	9b01      	ldr	r3, [sp, #4]
   da01c:	429f      	cmp	r7, r3
   da01e:	d1eb      	bne.n	d9ff8 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   da020:	1d29      	adds	r1, r5, #4
   da022:	a806      	add	r0, sp, #24
   da024:	f003 f9d0 	bl	dd3c8 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   da028:	4651      	mov	r1, sl
   da02a:	a80a      	add	r0, sp, #40	; 0x28
   da02c:	f003 f981 	bl	dd332 <_ZN6StringC1EPKc>
   da030:	a90a      	add	r1, sp, #40	; 0x28
   da032:	a806      	add	r0, sp, #24
   da034:	f003 fa15 	bl	dd462 <_ZplRK15StringSumHelperRK6String>
   da038:	4621      	mov	r1, r4
   da03a:	f003 fa1e 	bl	dd47a <_ZplRK15StringSumHelperPKc>
   da03e:	4601      	mov	r1, r0
   da040:	a802      	add	r0, sp, #8
   da042:	f003 f9c1 	bl	dd3c8 <_ZN6StringC1ERKS_>
   da046:	a80a      	add	r0, sp, #40	; 0x28
   da048:	f003 f928 	bl	dd29c <_ZN6StringD1Ev>
class StringSumHelper : public String
   da04c:	a806      	add	r0, sp, #24
   da04e:	f003 f925 	bl	dd29c <_ZN6StringD1Ev>
                        unlink(path);
   da052:	9802      	ldr	r0, [sp, #8]
   da054:	f004 fdd0 	bl	debf8 <unlink>
                        _log.trace("removed %s", path.c_str());
   da058:	4640      	mov	r0, r8
   da05a:	9a02      	ldr	r2, [sp, #8]
   da05c:	4649      	mov	r1, r9
   da05e:	f7fb fbed 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   da062:	a802      	add	r0, sp, #8
   da064:	f003 f91a 	bl	dd29c <_ZN6StringD1Ev>
                    continue;
   da068:	e7c6      	b.n	d9ff8 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   da06a:	4630      	mov	r0, r6
   da06c:	f000 fbea 	bl	da844 <closedir>
}
   da070:	b00e      	add	sp, #56	; 0x38
   da072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        String path = getPathForFileNum(fileNum); 
   da076:	460a      	mov	r2, r1
   da078:	4601      	mov	r1, r0
   da07a:	a80a      	add	r0, sp, #40	; 0x28
   da07c:	f7ff ff6c 	bl	d9f58 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   da080:	980a      	ldr	r0, [sp, #40]	; 0x28
   da082:	f004 fdb9 	bl	debf8 <unlink>
        _log.trace("removed %s", path.c_str());
   da086:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   da088:	4903      	ldr	r1, [pc, #12]	; (da098 <_ZN14SequentialFile13removeFileNumEib+0xc8>)
   da08a:	4804      	ldr	r0, [pc, #16]	; (da09c <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   da08c:	f7fb fbd6 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   da090:	a80a      	add	r0, sp, #40	; 0x28
   da092:	f003 f903 	bl	dd29c <_ZN6StringD1Ev>
}
   da096:	e7eb      	b.n	da070 <_ZN14SequentialFile13removeFileNumEib+0xa0>
   da098:	000dfd63 	.word	0x000dfd63
   da09c:	2003e494 	.word	0x2003e494
   da0a0:	000dfd61 	.word	0x000dfd61

000da0a4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   da0a4:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   da0a6:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   da0a8:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   da0aa:	b163      	cbz	r3, da0c6 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   da0ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
   da0ae:	6945      	ldr	r5, [r0, #20]
   da0b0:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   da0b2:	42ae      	cmp	r6, r5
   da0b4:	d904      	bls.n	da0c0 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x1c>
	::operator delete(__p);
   da0b6:	f855 0b04 	ldr.w	r0, [r5], #4
   da0ba:	f7f9 fff0 	bl	d409e <_ZdlPv>
   da0be:	e7f8      	b.n	da0b2 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   da0c0:	6820      	ldr	r0, [r4, #0]
   da0c2:	f7f9 ffec 	bl	d409e <_ZdlPv>
    }
   da0c6:	4620      	mov	r0, r4
   da0c8:	bd70      	pop	{r4, r5, r6, pc}
	...

000da0cc <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   da0cc:	b510      	push	{r4, lr}
   da0ce:	4b09      	ldr	r3, [pc, #36]	; (da0f4 <_ZN14SequentialFileD1Ev+0x28>)
   da0d0:	4604      	mov	r4, r0
   da0d2:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   da0d6:	f7ff ffe5 	bl	da0a4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   da0da:	f104 0024 	add.w	r0, r4, #36	; 0x24
   da0de:	f003 f8dd 	bl	dd29c <_ZN6StringD1Ev>
   da0e2:	f104 0014 	add.w	r0, r4, #20
   da0e6:	f003 f8d9 	bl	dd29c <_ZN6StringD1Ev>
   da0ea:	1d20      	adds	r0, r4, #4
   da0ec:	f003 f8d6 	bl	dd29c <_ZN6StringD1Ev>
}
   da0f0:	4620      	mov	r0, r4
   da0f2:	bd10      	pop	{r4, pc}
   da0f4:	000dfe5c 	.word	0x000dfe5c

000da0f8 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   da0f8:	b510      	push	{r4, lr}
   da0fa:	4604      	mov	r4, r0
}
   da0fc:	f7ff ffe6 	bl	da0cc <_ZN14SequentialFileD1Ev>
   da100:	4620      	mov	r0, r4
   da102:	2168      	movs	r1, #104	; 0x68
   da104:	f003 fef4 	bl	ddef0 <_ZdlPvj>
   da108:	4620      	mov	r0, r4
   da10a:	bd10      	pop	{r4, pc}

000da10c <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   da10c:	68c3      	ldr	r3, [r0, #12]
   da10e:	68ca      	ldr	r2, [r1, #12]
   da110:	1a9b      	subs	r3, r3, r2
   da112:	109b      	asrs	r3, r3, #2
   da114:	1e5a      	subs	r2, r3, #1
   da116:	e9d0 3000 	ldrd	r3, r0, [r0]
   da11a:	1a1b      	subs	r3, r3, r0
   da11c:	109b      	asrs	r3, r3, #2
   da11e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   da122:	6888      	ldr	r0, [r1, #8]
   da124:	680a      	ldr	r2, [r1, #0]
   da126:	1a80      	subs	r0, r0, r2
    }
   da128:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   da12c:	4770      	bx	lr
	...

000da130 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>:
      deque<_Tp, _Alloc>::
   da130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da134:	4604      	mov	r4, r0
   da136:	4688      	mov	r8, r1
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   da138:	f100 0108 	add.w	r1, r0, #8
   da13c:	3018      	adds	r0, #24
   da13e:	f7ff ffe5 	bl	da10c <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
	if (size() == max_size())
   da142:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   da146:	4298      	cmp	r0, r3
   da148:	d102      	bne.n	da150 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x20>
	  __throw_length_error(
   da14a:	4837      	ldr	r0, [pc, #220]	; (da228 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xf8>)
   da14c:	f003 fed9 	bl	ddf02 <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   da150:	6a62      	ldr	r2, [r4, #36]	; 0x24
   da152:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   da154:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   da156:	1a11      	subs	r1, r2, r0
   da158:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   da15c:	2901      	cmp	r1, #1
   da15e:	d821      	bhi.n	da1a4 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x74>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   da160:	6961      	ldr	r1, [r4, #20]
   da162:	1a57      	subs	r7, r2, r1
   da164:	10be      	asrs	r6, r7, #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   da166:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   da168:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   da16c:	d936      	bls.n	da1dc <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xac>
					 - __new_num_nodes) / 2
   da16e:	1b5d      	subs	r5, r3, r5
   da170:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   da172:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   da176:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   da178:	42a9      	cmp	r1, r5
   da17a:	eba3 0201 	sub.w	r2, r3, r1
   da17e:	d927      	bls.n	da1d0 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xa0>
	  if (_Num)
   da180:	4299      	cmp	r1, r3
   da182:	d002      	beq.n	da18a <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   da184:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   da186:	f004 fb4d 	bl	de824 <memmove>
	_M_node = __new_node;
   da18a:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   da18c:	682b      	ldr	r3, [r5, #0]
   da18e:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   da190:	f503 7300 	add.w	r3, r3, #512	; 0x200
   da194:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   da196:	19eb      	adds	r3, r5, r7
	_M_node = __new_node;
   da198:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   da19a:	59eb      	ldr	r3, [r5, r7]
   da19c:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   da19e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   da1a2:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da1a4:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   da1a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   da1aa:	f7f9 ff74 	bl	d4096 <_Znwj>
   da1ae:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   da1b0:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da1b2:	b113      	cbz	r3, da1ba <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x8a>
   da1b4:	f8d8 2000 	ldr.w	r2, [r8]
   da1b8:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   da1ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da1bc:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   da1be:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   da1c0:	685b      	ldr	r3, [r3, #4]
   da1c2:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   da1c4:	f503 7200 	add.w	r2, r3, #512	; 0x200
   da1c8:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   da1ca:	61a3      	str	r3, [r4, #24]
      }
   da1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   da1d0:	4299      	cmp	r1, r3
   da1d2:	d0da      	beq.n	da18a <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   da1d4:	1d38      	adds	r0, r7, #4
   da1d6:	1a80      	subs	r0, r0, r2
   da1d8:	4428      	add	r0, r5
   da1da:	e7d4      	b.n	da186 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x56>
	  size_type __new_map_size = this->_M_impl._M_map_size
   da1dc:	f103 0902 	add.w	r9, r3, #2
   da1e0:	2b01      	cmp	r3, #1
   da1e2:	bf2c      	ite	cs
   da1e4:	4499      	addcs	r9, r3
   da1e6:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->max_size())
   da1ea:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   da1ee:	d301      	bcc.n	da1f4 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xc4>
	  std::__throw_bad_alloc();
   da1f0:	f003 fe84 	bl	ddefc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da1f4:	ea4f 0089 	mov.w	r0, r9, lsl #2
   da1f8:	f7f9 ff4d 	bl	d4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   da1fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   da1fe:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   da200:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   da204:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   da206:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   da208:	4291      	cmp	r1, r2
   da20a:	4682      	mov	sl, r0
   da20c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   da210:	d003      	beq.n	da21a <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xea>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   da212:	1a52      	subs	r2, r2, r1
   da214:	4628      	mov	r0, r5
   da216:	f004 fb05 	bl	de824 <memmove>
	::operator delete(__p);
   da21a:	6820      	ldr	r0, [r4, #0]
   da21c:	f7f9 ff3f 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   da220:	e9c4 a900 	strd	sl, r9, [r4]
   da224:	e7b1      	b.n	da18a <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
   da226:	bf00      	nop
   da228:	000df9e5 	.word	0x000df9e5

000da22c <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   da22c:	b538      	push	{r3, r4, r5, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   da22e:	6a05      	ldr	r5, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   da230:	6982      	ldr	r2, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   da232:	3d04      	subs	r5, #4
	if (this->_M_impl._M_finish._M_cur
   da234:	42aa      	cmp	r2, r5
      push_back(const value_type& __x)
   da236:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish._M_cur
   da238:	d006      	beq.n	da248 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da23a:	b10a      	cbz	r2, da240 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x14>
	    _Alloc_traits::construct(this->_M_impl,
   da23c:	6809      	ldr	r1, [r1, #0]
   da23e:	6011      	str	r1, [r2, #0]
	    ++this->_M_impl._M_finish._M_cur;
   da240:	699a      	ldr	r2, [r3, #24]
   da242:	3204      	adds	r2, #4
   da244:	619a      	str	r2, [r3, #24]
      }
   da246:	bd38      	pop	{r3, r4, r5, pc}
	  _M_push_back_aux(__x);
   da248:	f7ff ff72 	bl	da130 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>
      }
   da24c:	e7fb      	b.n	da246 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1a>
	...

000da250 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   da250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   da254:	68c3      	ldr	r3, [r0, #12]
   da256:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   da258:	b086      	sub	sp, #24
   da25a:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   da25c:	d808      	bhi.n	da270 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   da25e:	4934      	ldr	r1, [pc, #208]	; (da330 <_ZN14SequentialFile7scanDirEv+0xe0>)
   da260:	4834      	ldr	r0, [pc, #208]	; (da334 <_ZN14SequentialFile7scanDirEv+0xe4>)
   da262:	f7fb fb02 	bl	d586a <_ZNK5spark6Logger5errorEPKcz>
        return false;
   da266:	2600      	movs	r6, #0
}
   da268:	4630      	mov	r0, r6
   da26a:	b006      	add	sp, #24
   da26c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   da270:	6840      	ldr	r0, [r0, #4]
   da272:	f7ff fe05 	bl	d9e80 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   da276:	4606      	mov	r6, r0
   da278:	2800      	cmp	r0, #0
   da27a:	d0f4      	beq.n	da266 <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   da27c:	6963      	ldr	r3, [r4, #20]
   da27e:	6862      	ldr	r2, [r4, #4]
   da280:	492d      	ldr	r1, [pc, #180]	; (da338 <_ZN14SequentialFile7scanDirEv+0xe8>)
   da282:	482c      	ldr	r0, [pc, #176]	; (da334 <_ZN14SequentialFile7scanDirEv+0xe4>)
   da284:	f7fb fada 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   da288:	6860      	ldr	r0, [r4, #4]
   da28a:	f000 facb 	bl	da824 <opendir>
    if (!dir) {
   da28e:	4607      	mov	r7, r0
   da290:	2800      	cmp	r0, #0
   da292:	d0e8      	beq.n	da266 <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   da294:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   da296:	f8df 90a4 	ldr.w	r9, [pc, #164]	; da33c <_ZN14SequentialFile7scanDirEv+0xec>
   da29a:	f8df 8098 	ldr.w	r8, [pc, #152]	; da334 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   da29e:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   da2a0:	4638      	mov	r0, r7
   da2a2:	f000 fac7 	bl	da834 <readdir>
        if (!ent) {
   da2a6:	4605      	mov	r5, r0
   da2a8:	2800      	cmp	r0, #0
   da2aa:	d039      	beq.n	da320 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   da2ac:	7a83      	ldrb	r3, [r0, #10]
   da2ae:	2b08      	cmp	r3, #8
   da2b0:	d1f6      	bne.n	da2a0 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   da2b2:	350b      	adds	r5, #11
   da2b4:	6961      	ldr	r1, [r4, #20]
   da2b6:	aa01      	add	r2, sp, #4
   da2b8:	4628      	mov	r0, r5
   da2ba:	f000 fcdd 	bl	dac78 <sscanf>
   da2be:	2801      	cmp	r0, #1
   da2c0:	d1ee      	bne.n	da2a0 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   da2c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   da2c4:	b17b      	cbz	r3, da2e6 <_ZN14SequentialFile7scanDirEv+0x96>
   da2c6:	4629      	mov	r1, r5
   da2c8:	a802      	add	r0, sp, #8
   da2ca:	f003 f832 	bl	dd332 <_ZN6StringC1EPKc>
   da2ce:	f104 0124 	add.w	r1, r4, #36	; 0x24
   da2d2:	a802      	add	r0, sp, #8
   da2d4:	f003 f8f8 	bl	dd4c8 <_ZNK6String8endsWithERKS_>
   da2d8:	4682      	mov	sl, r0
   da2da:	a802      	add	r0, sp, #8
   da2dc:	f002 ffde 	bl	dd29c <_ZN6StringD1Ev>
   da2e0:	f1ba 0f00 	cmp.w	sl, #0
   da2e4:	d0dc      	beq.n	da2a0 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   da2e6:	6823      	ldr	r3, [r4, #0]
   da2e8:	4629      	mov	r1, r5
   da2ea:	689b      	ldr	r3, [r3, #8]
   da2ec:	4620      	mov	r0, r4
   da2ee:	4798      	blx	r3
   da2f0:	2800      	cmp	r0, #0
   da2f2:	d0d5      	beq.n	da2a0 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   da2f4:	9a01      	ldr	r2, [sp, #4]
   da2f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da2f8:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   da2fa:	bfb8      	it	lt
   da2fc:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   da2fe:	462b      	mov	r3, r5
   da300:	4649      	mov	r1, r9
   da302:	4640      	mov	r0, r8
   da304:	f7fb fa9a 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   da308:	4620      	mov	r0, r4
   da30a:	f7ff fda9 	bl	d9e60 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   da30e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   da312:	a901      	add	r1, sp, #4
   da314:	f7ff ff8a 	bl	da22c <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   da318:	4620      	mov	r0, r4
   da31a:	f7ff fdad 	bl	d9e78 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   da31e:	e7bf      	b.n	da2a0 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   da320:	4638      	mov	r0, r7
   da322:	f000 fa8f 	bl	da844 <closedir>
    scanDirCompleted = true;
   da326:	2301      	movs	r3, #1
   da328:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   da32c:	e79c      	b.n	da268 <_ZN14SequentialFile7scanDirEv+0x18>
   da32e:	bf00      	nop
   da330:	000dfde1 	.word	0x000dfde1
   da334:	2003e494 	.word	0x2003e494
   da338:	000dfdf6 	.word	0x000dfdf6
   da33c:	000dfe12 	.word	0x000dfe12

000da340 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   da340:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   da342:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   da346:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   da348:	b90b      	cbnz	r3, da34e <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   da34a:	f7ff ff81 	bl	da250 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   da34e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   da350:	3001      	adds	r0, #1
   da352:	63a0      	str	r0, [r4, #56]	; 0x38
}
   da354:	bd10      	pop	{r4, pc}
	...

000da358 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   da358:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   da35a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   da35e:	4604      	mov	r4, r0
   da360:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   da362:	b90b      	cbnz	r3, da368 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   da364:	f7ff ff74 	bl	da250 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   da368:	4620      	mov	r0, r4
   da36a:	f7ff fd79 	bl	d9e60 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   da36e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   da370:	6da2      	ldr	r2, [r4, #88]	; 0x58
   da372:	4293      	cmp	r3, r2
   da374:	d01e      	beq.n	da3b4 <_ZN14SequentialFile16getFileFromQueueEb+0x5c>
        fileNum = queue.front();
   da376:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   da378:	b12e      	cbz	r6, da386 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
	    != this->_M_impl._M_start._M_last - 1)
   da37a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   da37c:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   da37e:	4293      	cmp	r3, r2
   da380:	d00c      	beq.n	da39c <_ZN14SequentialFile16getFileFromQueueEb+0x44>
	    ++this->_M_impl._M_start._M_cur;
   da382:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   da384:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   da386:	4620      	mov	r0, r4
   da388:	f7ff fd76 	bl	d9e78 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   da38c:	b125      	cbz	r5, da398 <_ZN14SequentialFile16getFileFromQueueEb+0x40>
        _log.trace("getFileFromQueue returned %d", fileNum);
   da38e:	490a      	ldr	r1, [pc, #40]	; (da3b8 <_ZN14SequentialFile16getFileFromQueueEb+0x60>)
   da390:	480a      	ldr	r0, [pc, #40]	; (da3bc <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   da392:	462a      	mov	r2, r5
   da394:	f7fb fa52 	bl	d583c <_ZNK5spark6Logger5traceEPKcz>
}
   da398:	4628      	mov	r0, r5
   da39a:	bd70      	pop	{r4, r5, r6, pc}
	::operator delete(__p);
   da39c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   da39e:	f7f9 fe7e 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   da3a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   da3a4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   da3a6:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   da3a8:	685b      	ldr	r3, [r3, #4]
   da3aa:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   da3ac:	f503 7200 	add.w	r2, r3, #512	; 0x200
   da3b0:	6522      	str	r2, [r4, #80]	; 0x50
   da3b2:	e7e7      	b.n	da384 <_ZN14SequentialFile16getFileFromQueueEb+0x2c>
    int fileNum = 0;
   da3b4:	2500      	movs	r5, #0
   da3b6:	e7e6      	b.n	da386 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
   da3b8:	000dfe28 	.word	0x000dfe28
   da3bc:	2003e494 	.word	0x2003e494

000da3c0 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   da3c0:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   da3c2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   da3c6:	9101      	str	r1, [sp, #4]
   da3c8:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   da3ca:	b90b      	cbnz	r3, da3d0 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   da3cc:	f7ff ff40 	bl	da250 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   da3d0:	9b01      	ldr	r3, [sp, #4]
   da3d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   da3d4:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   da3d6:	bfb8      	it	lt
   da3d8:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   da3da:	4620      	mov	r0, r4
   da3dc:	f7ff fd40 	bl	d9e60 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   da3e0:	a901      	add	r1, sp, #4
   da3e2:	f104 0040 	add.w	r0, r4, #64	; 0x40
   da3e6:	f7ff ff21 	bl	da22c <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   da3ea:	4620      	mov	r0, r4
   da3ec:	f7ff fd44 	bl	d9e78 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   da3f0:	b002      	add	sp, #8
   da3f2:	bd10      	pop	{r4, pc}

000da3f4 <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   da3f4:	b538      	push	{r3, r4, r5, lr}
   da3f6:	4604      	mov	r4, r0
    queueMutexLock();
   da3f8:	f7ff fd32 	bl	d9e60 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   da3fc:	f104 0148 	add.w	r1, r4, #72	; 0x48
   da400:	f104 0058 	add.w	r0, r4, #88	; 0x58
   da404:	f7ff fe82 	bl	da10c <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
   da408:	4605      	mov	r5, r0
    queueMutexUnlock();
   da40a:	4620      	mov	r0, r4
   da40c:	f7ff fd34 	bl	d9e78 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   da410:	4628      	mov	r0, r5
   da412:	bd38      	pop	{r3, r4, r5, pc}

000da414 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   da414:	4b01      	ldr	r3, [pc, #4]	; (da41c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   da416:	4a02      	ldr	r2, [pc, #8]	; (da420 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   da418:	601a      	str	r2, [r3, #0]
}
   da41a:	4770      	bx	lr
   da41c:	2003e494 	.word	0x2003e494
   da420:	000dfe45 	.word	0x000dfe45

000da424 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   da424:	b508      	push	{r3, lr}
   da426:	4b02      	ldr	r3, [pc, #8]	; (da430 <cellular_signal+0xc>)
   da428:	681b      	ldr	r3, [r3, #0]
   da42a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da42c:	9301      	str	r3, [sp, #4]
   da42e:	bd08      	pop	{r3, pc}
   da430:	00030274 	.word	0x00030274

000da434 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   da434:	b508      	push	{r3, lr}
   da436:	4b02      	ldr	r3, [pc, #8]	; (da440 <os_thread_create+0xc>)
   da438:	681b      	ldr	r3, [r3, #0]
   da43a:	685b      	ldr	r3, [r3, #4]
   da43c:	9301      	str	r3, [sp, #4]
   da43e:	bd08      	pop	{r3, pc}
   da440:	00030248 	.word	0x00030248

000da444 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   da444:	b508      	push	{r3, lr}
   da446:	4b02      	ldr	r3, [pc, #8]	; (da450 <os_thread_is_current+0xc>)
   da448:	681b      	ldr	r3, [r3, #0]
   da44a:	689b      	ldr	r3, [r3, #8]
   da44c:	9301      	str	r3, [sp, #4]
   da44e:	bd08      	pop	{r3, pc}
   da450:	00030248 	.word	0x00030248

000da454 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   da454:	b508      	push	{r3, lr}
   da456:	4b02      	ldr	r3, [pc, #8]	; (da460 <os_thread_join+0xc>)
   da458:	681b      	ldr	r3, [r3, #0]
   da45a:	691b      	ldr	r3, [r3, #16]
   da45c:	9301      	str	r3, [sp, #4]
   da45e:	bd08      	pop	{r3, pc}
   da460:	00030248 	.word	0x00030248

000da464 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   da464:	b508      	push	{r3, lr}
   da466:	4b02      	ldr	r3, [pc, #8]	; (da470 <os_thread_cleanup+0xc>)
   da468:	681b      	ldr	r3, [r3, #0]
   da46a:	695b      	ldr	r3, [r3, #20]
   da46c:	9301      	str	r3, [sp, #4]
   da46e:	bd08      	pop	{r3, pc}
   da470:	00030248 	.word	0x00030248

000da474 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   da474:	b508      	push	{r3, lr}
   da476:	4b02      	ldr	r3, [pc, #8]	; (da480 <os_mutex_create+0xc>)
   da478:	681b      	ldr	r3, [r3, #0]
   da47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da47c:	9301      	str	r3, [sp, #4]
   da47e:	bd08      	pop	{r3, pc}
   da480:	00030248 	.word	0x00030248

000da484 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   da484:	b508      	push	{r3, lr}
   da486:	4b02      	ldr	r3, [pc, #8]	; (da490 <os_mutex_lock+0xc>)
   da488:	681b      	ldr	r3, [r3, #0]
   da48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   da48c:	9301      	str	r3, [sp, #4]
   da48e:	bd08      	pop	{r3, pc}
   da490:	00030248 	.word	0x00030248

000da494 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   da494:	b508      	push	{r3, lr}
   da496:	4b02      	ldr	r3, [pc, #8]	; (da4a0 <os_mutex_unlock+0xc>)
   da498:	681b      	ldr	r3, [r3, #0]
   da49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da49c:	9301      	str	r3, [sp, #4]
   da49e:	bd08      	pop	{r3, pc}
   da4a0:	00030248 	.word	0x00030248

000da4a4 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   da4a4:	b508      	push	{r3, lr}
   da4a6:	4b02      	ldr	r3, [pc, #8]	; (da4b0 <os_mutex_recursive_create+0xc>)
   da4a8:	681b      	ldr	r3, [r3, #0]
   da4aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da4ac:	9301      	str	r3, [sp, #4]
   da4ae:	bd08      	pop	{r3, pc}
   da4b0:	00030248 	.word	0x00030248

000da4b4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   da4b4:	b508      	push	{r3, lr}
   da4b6:	4b02      	ldr	r3, [pc, #8]	; (da4c0 <os_mutex_recursive_destroy+0xc>)
   da4b8:	681b      	ldr	r3, [r3, #0]
   da4ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   da4bc:	9301      	str	r3, [sp, #4]
   da4be:	bd08      	pop	{r3, pc}
   da4c0:	00030248 	.word	0x00030248

000da4c4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   da4c4:	b508      	push	{r3, lr}
   da4c6:	4b02      	ldr	r3, [pc, #8]	; (da4d0 <os_mutex_recursive_lock+0xc>)
   da4c8:	681b      	ldr	r3, [r3, #0]
   da4ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   da4cc:	9301      	str	r3, [sp, #4]
   da4ce:	bd08      	pop	{r3, pc}
   da4d0:	00030248 	.word	0x00030248

000da4d4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   da4d4:	b508      	push	{r3, lr}
   da4d6:	4b02      	ldr	r3, [pc, #8]	; (da4e0 <os_mutex_recursive_unlock+0xc>)
   da4d8:	681b      	ldr	r3, [r3, #0]
   da4da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   da4dc:	9301      	str	r3, [sp, #4]
   da4de:	bd08      	pop	{r3, pc}
   da4e0:	00030248 	.word	0x00030248

000da4e4 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   da4e4:	b508      	push	{r3, lr}
   da4e6:	4b02      	ldr	r3, [pc, #8]	; (da4f0 <os_thread_exit+0xc>)
   da4e8:	681b      	ldr	r3, [r3, #0]
   da4ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   da4ec:	9301      	str	r3, [sp, #4]
   da4ee:	bd08      	pop	{r3, pc}
   da4f0:	00030248 	.word	0x00030248

000da4f4 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   da4f4:	b508      	push	{r3, lr}
   da4f6:	4b02      	ldr	r3, [pc, #8]	; (da500 <HAL_Feature_Set+0xc>)
   da4f8:	681b      	ldr	r3, [r3, #0]
   da4fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   da4fc:	9301      	str	r3, [sp, #4]
   da4fe:	bd08      	pop	{r3, pc}
   da500:	00030234 	.word	0x00030234

000da504 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   da504:	b508      	push	{r3, lr}
   da506:	4b02      	ldr	r3, [pc, #8]	; (da510 <HAL_RNG_GetRandomNumber+0xc>)
   da508:	681b      	ldr	r3, [r3, #0]
   da50a:	685b      	ldr	r3, [r3, #4]
   da50c:	9301      	str	r3, [sp, #4]
   da50e:	bd08      	pop	{r3, pc}
   da510:	00030218 	.word	0x00030218

000da514 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   da514:	b508      	push	{r3, lr}
   da516:	4b02      	ldr	r3, [pc, #8]	; (da520 <HAL_Delay_Milliseconds+0xc>)
   da518:	681b      	ldr	r3, [r3, #0]
   da51a:	689b      	ldr	r3, [r3, #8]
   da51c:	9301      	str	r3, [sp, #4]
   da51e:	bd08      	pop	{r3, pc}
   da520:	00030218 	.word	0x00030218

000da524 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   da524:	b508      	push	{r3, lr}
   da526:	4b02      	ldr	r3, [pc, #8]	; (da530 <HAL_Delay_Microseconds+0xc>)
   da528:	681b      	ldr	r3, [r3, #0]
   da52a:	68db      	ldr	r3, [r3, #12]
   da52c:	9301      	str	r3, [sp, #4]
   da52e:	bd08      	pop	{r3, pc}
   da530:	00030218 	.word	0x00030218

000da534 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   da534:	b508      	push	{r3, lr}
   da536:	4b02      	ldr	r3, [pc, #8]	; (da540 <HAL_Timer_Get_Milli_Seconds+0xc>)
   da538:	681b      	ldr	r3, [r3, #0]
   da53a:	695b      	ldr	r3, [r3, #20]
   da53c:	9301      	str	r3, [sp, #4]
   da53e:	bd08      	pop	{r3, pc}
   da540:	00030218 	.word	0x00030218

000da544 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   da544:	b508      	push	{r3, lr}
   da546:	4b02      	ldr	r3, [pc, #8]	; (da550 <hal_rtc_time_is_valid+0xc>)
   da548:	681b      	ldr	r3, [r3, #0]
   da54a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   da54c:	9301      	str	r3, [sp, #4]
   da54e:	bd08      	pop	{r3, pc}
   da550:	00030218 	.word	0x00030218

000da554 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   da554:	b508      	push	{r3, lr}
   da556:	4b02      	ldr	r3, [pc, #8]	; (da560 <hal_timer_millis+0xc>)
   da558:	681b      	ldr	r3, [r3, #0]
   da55a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   da55c:	9301      	str	r3, [sp, #4]
   da55e:	bd08      	pop	{r3, pc}
   da560:	00030218 	.word	0x00030218

000da564 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   da564:	b508      	push	{r3, lr}
   da566:	4b02      	ldr	r3, [pc, #8]	; (da570 <hal_rtc_get_time+0xc>)
   da568:	681b      	ldr	r3, [r3, #0]
   da56a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   da56c:	9301      	str	r3, [sp, #4]
   da56e:	bd08      	pop	{r3, pc}
   da570:	00030218 	.word	0x00030218

000da574 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   da574:	b508      	push	{r3, lr}
   da576:	4b02      	ldr	r3, [pc, #8]	; (da580 <hal_rtc_set_time+0xc>)
   da578:	681b      	ldr	r3, [r3, #0]
   da57a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   da57c:	9301      	str	r3, [sp, #4]
   da57e:	bd08      	pop	{r3, pc}
   da580:	00030218 	.word	0x00030218

000da584 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   da584:	b508      	push	{r3, lr}
   da586:	4b02      	ldr	r3, [pc, #8]	; (da590 <HAL_Validate_Pin_Function+0xc>)
   da588:	681b      	ldr	r3, [r3, #0]
   da58a:	685b      	ldr	r3, [r3, #4]
   da58c:	9301      	str	r3, [sp, #4]
   da58e:	bd08      	pop	{r3, pc}
   da590:	0003022c 	.word	0x0003022c

000da594 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   da594:	b508      	push	{r3, lr}
   da596:	4b02      	ldr	r3, [pc, #8]	; (da5a0 <HAL_Pin_Mode+0xc>)
   da598:	681b      	ldr	r3, [r3, #0]
   da59a:	689b      	ldr	r3, [r3, #8]
   da59c:	9301      	str	r3, [sp, #4]
   da59e:	bd08      	pop	{r3, pc}
   da5a0:	0003022c 	.word	0x0003022c

000da5a4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   da5a4:	b508      	push	{r3, lr}
   da5a6:	4b02      	ldr	r3, [pc, #8]	; (da5b0 <HAL_Get_Pin_Mode+0xc>)
   da5a8:	681b      	ldr	r3, [r3, #0]
   da5aa:	68db      	ldr	r3, [r3, #12]
   da5ac:	9301      	str	r3, [sp, #4]
   da5ae:	bd08      	pop	{r3, pc}
   da5b0:	0003022c 	.word	0x0003022c

000da5b4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   da5b4:	b508      	push	{r3, lr}
   da5b6:	4b02      	ldr	r3, [pc, #8]	; (da5c0 <HAL_GPIO_Write+0xc>)
   da5b8:	681b      	ldr	r3, [r3, #0]
   da5ba:	691b      	ldr	r3, [r3, #16]
   da5bc:	9301      	str	r3, [sp, #4]
   da5be:	bd08      	pop	{r3, pc}
   da5c0:	0003022c 	.word	0x0003022c

000da5c4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   da5c4:	b508      	push	{r3, lr}
   da5c6:	4b02      	ldr	r3, [pc, #8]	; (da5d0 <HAL_GPIO_Read+0xc>)
   da5c8:	681b      	ldr	r3, [r3, #0]
   da5ca:	695b      	ldr	r3, [r3, #20]
   da5cc:	9301      	str	r3, [sp, #4]
   da5ce:	bd08      	pop	{r3, pc}
   da5d0:	0003022c 	.word	0x0003022c

000da5d4 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   da5d4:	b508      	push	{r3, lr}
   da5d6:	4b02      	ldr	r3, [pc, #8]	; (da5e0 <HAL_Interrupts_Attach+0xc>)
   da5d8:	681b      	ldr	r3, [r3, #0]
   da5da:	699b      	ldr	r3, [r3, #24]
   da5dc:	9301      	str	r3, [sp, #4]
   da5de:	bd08      	pop	{r3, pc}
   da5e0:	0003022c 	.word	0x0003022c

000da5e4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   da5e4:	b508      	push	{r3, lr}
   da5e6:	4b02      	ldr	r3, [pc, #8]	; (da5f0 <HAL_Interrupts_Detach+0xc>)
   da5e8:	681b      	ldr	r3, [r3, #0]
   da5ea:	69db      	ldr	r3, [r3, #28]
   da5ec:	9301      	str	r3, [sp, #4]
   da5ee:	bd08      	pop	{r3, pc}
   da5f0:	0003022c 	.word	0x0003022c

000da5f4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   da5f4:	b508      	push	{r3, lr}
   da5f6:	4b02      	ldr	r3, [pc, #8]	; (da600 <hal_adc_read+0xc>)
   da5f8:	681b      	ldr	r3, [r3, #0]
   da5fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da5fc:	9301      	str	r3, [sp, #4]
   da5fe:	bd08      	pop	{r3, pc}
   da600:	0003022c 	.word	0x0003022c

000da604 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   da604:	b508      	push	{r3, lr}
   da606:	4b02      	ldr	r3, [pc, #8]	; (da610 <hal_i2c_begin+0xc>)
   da608:	681b      	ldr	r3, [r3, #0]
   da60a:	68db      	ldr	r3, [r3, #12]
   da60c:	9301      	str	r3, [sp, #4]
   da60e:	bd08      	pop	{r3, pc}
   da610:	00030228 	.word	0x00030228

000da614 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   da614:	b508      	push	{r3, lr}
   da616:	4b02      	ldr	r3, [pc, #8]	; (da620 <hal_i2c_begin_transmission+0xc>)
   da618:	681b      	ldr	r3, [r3, #0]
   da61a:	699b      	ldr	r3, [r3, #24]
   da61c:	9301      	str	r3, [sp, #4]
   da61e:	bd08      	pop	{r3, pc}
   da620:	00030228 	.word	0x00030228

000da624 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   da624:	b508      	push	{r3, lr}
   da626:	4b02      	ldr	r3, [pc, #8]	; (da630 <hal_i2c_end_transmission+0xc>)
   da628:	681b      	ldr	r3, [r3, #0]
   da62a:	69db      	ldr	r3, [r3, #28]
   da62c:	9301      	str	r3, [sp, #4]
   da62e:	bd08      	pop	{r3, pc}
   da630:	00030228 	.word	0x00030228

000da634 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   da634:	b508      	push	{r3, lr}
   da636:	4b02      	ldr	r3, [pc, #8]	; (da640 <hal_i2c_write+0xc>)
   da638:	681b      	ldr	r3, [r3, #0]
   da63a:	6a1b      	ldr	r3, [r3, #32]
   da63c:	9301      	str	r3, [sp, #4]
   da63e:	bd08      	pop	{r3, pc}
   da640:	00030228 	.word	0x00030228

000da644 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   da644:	b508      	push	{r3, lr}
   da646:	4b02      	ldr	r3, [pc, #8]	; (da650 <hal_i2c_available+0xc>)
   da648:	681b      	ldr	r3, [r3, #0]
   da64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   da64c:	9301      	str	r3, [sp, #4]
   da64e:	bd08      	pop	{r3, pc}
   da650:	00030228 	.word	0x00030228

000da654 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   da654:	b508      	push	{r3, lr}
   da656:	4b02      	ldr	r3, [pc, #8]	; (da660 <hal_i2c_read+0xc>)
   da658:	681b      	ldr	r3, [r3, #0]
   da65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da65c:	9301      	str	r3, [sp, #4]
   da65e:	bd08      	pop	{r3, pc}
   da660:	00030228 	.word	0x00030228

000da664 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   da664:	b508      	push	{r3, lr}
   da666:	4b02      	ldr	r3, [pc, #8]	; (da670 <hal_i2c_peek+0xc>)
   da668:	681b      	ldr	r3, [r3, #0]
   da66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da66c:	9301      	str	r3, [sp, #4]
   da66e:	bd08      	pop	{r3, pc}
   da670:	00030228 	.word	0x00030228

000da674 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   da674:	b508      	push	{r3, lr}
   da676:	4b02      	ldr	r3, [pc, #8]	; (da680 <hal_i2c_flush+0xc>)
   da678:	681b      	ldr	r3, [r3, #0]
   da67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da67c:	9301      	str	r3, [sp, #4]
   da67e:	bd08      	pop	{r3, pc}
   da680:	00030228 	.word	0x00030228

000da684 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   da684:	b508      	push	{r3, lr}
   da686:	4b02      	ldr	r3, [pc, #8]	; (da690 <hal_i2c_is_enabled+0xc>)
   da688:	681b      	ldr	r3, [r3, #0]
   da68a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   da68c:	9301      	str	r3, [sp, #4]
   da68e:	bd08      	pop	{r3, pc}
   da690:	00030228 	.word	0x00030228

000da694 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   da694:	b508      	push	{r3, lr}
   da696:	4b02      	ldr	r3, [pc, #8]	; (da6a0 <hal_i2c_init+0xc>)
   da698:	681b      	ldr	r3, [r3, #0]
   da69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da69c:	9301      	str	r3, [sp, #4]
   da69e:	bd08      	pop	{r3, pc}
   da6a0:	00030228 	.word	0x00030228

000da6a4 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   da6a4:	b508      	push	{r3, lr}
   da6a6:	4b02      	ldr	r3, [pc, #8]	; (da6b0 <hal_i2c_lock+0xc>)
   da6a8:	681b      	ldr	r3, [r3, #0]
   da6aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   da6ac:	9301      	str	r3, [sp, #4]
   da6ae:	bd08      	pop	{r3, pc}
   da6b0:	00030228 	.word	0x00030228

000da6b4 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   da6b4:	b508      	push	{r3, lr}
   da6b6:	4b02      	ldr	r3, [pc, #8]	; (da6c0 <hal_i2c_unlock+0xc>)
   da6b8:	681b      	ldr	r3, [r3, #0]
   da6ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   da6bc:	9301      	str	r3, [sp, #4]
   da6be:	bd08      	pop	{r3, pc}
   da6c0:	00030228 	.word	0x00030228

000da6c4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   da6c4:	b508      	push	{r3, lr}
   da6c6:	4b02      	ldr	r3, [pc, #8]	; (da6d0 <hal_i2c_request_ex+0xc>)
   da6c8:	681b      	ldr	r3, [r3, #0]
   da6ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   da6cc:	9301      	str	r3, [sp, #4]
   da6ce:	bd08      	pop	{r3, pc}
   da6d0:	00030228 	.word	0x00030228

000da6d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   da6d4:	b508      	push	{r3, lr}
   da6d6:	4b02      	ldr	r3, [pc, #8]	; (da6e0 <inet_inet_ntop+0xc>)
   da6d8:	681b      	ldr	r3, [r3, #0]
   da6da:	695b      	ldr	r3, [r3, #20]
   da6dc:	9301      	str	r3, [sp, #4]
   da6de:	bd08      	pop	{r3, pc}
   da6e0:	00030264 	.word	0x00030264

000da6e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   da6e4:	b508      	push	{r3, lr}
   da6e6:	4b02      	ldr	r3, [pc, #8]	; (da6f0 <netdb_freeaddrinfo+0xc>)
   da6e8:	681b      	ldr	r3, [r3, #0]
   da6ea:	689b      	ldr	r3, [r3, #8]
   da6ec:	9301      	str	r3, [sp, #4]
   da6ee:	bd08      	pop	{r3, pc}
   da6f0:	00030268 	.word	0x00030268

000da6f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   da6f4:	b508      	push	{r3, lr}
   da6f6:	4b02      	ldr	r3, [pc, #8]	; (da700 <netdb_getaddrinfo+0xc>)
   da6f8:	681b      	ldr	r3, [r3, #0]
   da6fa:	68db      	ldr	r3, [r3, #12]
   da6fc:	9301      	str	r3, [sp, #4]
   da6fe:	bd08      	pop	{r3, pc}
   da700:	00030268 	.word	0x00030268

000da704 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   da704:	b508      	push	{r3, lr}
   da706:	4b02      	ldr	r3, [pc, #8]	; (da710 <hal_spi_begin+0xc>)
   da708:	681b      	ldr	r3, [r3, #0]
   da70a:	681b      	ldr	r3, [r3, #0]
   da70c:	9301      	str	r3, [sp, #4]
   da70e:	bd08      	pop	{r3, pc}
   da710:	00030230 	.word	0x00030230

000da714 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   da714:	b508      	push	{r3, lr}
   da716:	4b02      	ldr	r3, [pc, #8]	; (da720 <hal_spi_end+0xc>)
   da718:	681b      	ldr	r3, [r3, #0]
   da71a:	685b      	ldr	r3, [r3, #4]
   da71c:	9301      	str	r3, [sp, #4]
   da71e:	bd08      	pop	{r3, pc}
   da720:	00030230 	.word	0x00030230

000da724 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   da724:	b508      	push	{r3, lr}
   da726:	4b02      	ldr	r3, [pc, #8]	; (da730 <hal_spi_transfer+0xc>)
   da728:	681b      	ldr	r3, [r3, #0]
   da72a:	695b      	ldr	r3, [r3, #20]
   da72c:	9301      	str	r3, [sp, #4]
   da72e:	bd08      	pop	{r3, pc}
   da730:	00030230 	.word	0x00030230

000da734 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   da734:	b508      	push	{r3, lr}
   da736:	4b02      	ldr	r3, [pc, #8]	; (da740 <hal_spi_init+0xc>)
   da738:	681b      	ldr	r3, [r3, #0]
   da73a:	69db      	ldr	r3, [r3, #28]
   da73c:	9301      	str	r3, [sp, #4]
   da73e:	bd08      	pop	{r3, pc}
   da740:	00030230 	.word	0x00030230

000da744 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   da744:	b508      	push	{r3, lr}
   da746:	4b02      	ldr	r3, [pc, #8]	; (da750 <hal_spi_is_enabled+0xc>)
   da748:	681b      	ldr	r3, [r3, #0]
   da74a:	6a1b      	ldr	r3, [r3, #32]
   da74c:	9301      	str	r3, [sp, #4]
   da74e:	bd08      	pop	{r3, pc}
   da750:	00030230 	.word	0x00030230

000da754 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   da754:	b508      	push	{r3, lr}
   da756:	4b02      	ldr	r3, [pc, #8]	; (da760 <hal_spi_info+0xc>)
   da758:	681b      	ldr	r3, [r3, #0]
   da75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   da75c:	9301      	str	r3, [sp, #4]
   da75e:	bd08      	pop	{r3, pc}
   da760:	00030230 	.word	0x00030230

000da764 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   da764:	b508      	push	{r3, lr}
   da766:	4b02      	ldr	r3, [pc, #8]	; (da770 <hal_spi_set_settings+0xc>)
   da768:	681b      	ldr	r3, [r3, #0]
   da76a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   da76c:	9301      	str	r3, [sp, #4]
   da76e:	bd08      	pop	{r3, pc}
   da770:	00030230 	.word	0x00030230

000da774 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   da774:	b508      	push	{r3, lr}
   da776:	4b02      	ldr	r3, [pc, #8]	; (da780 <hal_spi_acquire+0xc>)
   da778:	681b      	ldr	r3, [r3, #0]
   da77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da77c:	9301      	str	r3, [sp, #4]
   da77e:	bd08      	pop	{r3, pc}
   da780:	00030230 	.word	0x00030230

000da784 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   da784:	b508      	push	{r3, lr}
   da786:	4b02      	ldr	r3, [pc, #8]	; (da790 <hal_spi_release+0xc>)
   da788:	681b      	ldr	r3, [r3, #0]
   da78a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da78c:	9301      	str	r3, [sp, #4]
   da78e:	bd08      	pop	{r3, pc}
   da790:	00030230 	.word	0x00030230

000da794 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   da794:	b508      	push	{r3, lr}
   da796:	4b02      	ldr	r3, [pc, #8]	; (da7a0 <_open+0xc>)
   da798:	681b      	ldr	r3, [r3, #0]
   da79a:	681b      	ldr	r3, [r3, #0]
   da79c:	9301      	str	r3, [sp, #4]
   da79e:	bd08      	pop	{r3, pc}
   da7a0:	00030284 	.word	0x00030284

000da7a4 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   da7a4:	b508      	push	{r3, lr}
   da7a6:	4b02      	ldr	r3, [pc, #8]	; (da7b0 <_write+0xc>)
   da7a8:	681b      	ldr	r3, [r3, #0]
   da7aa:	685b      	ldr	r3, [r3, #4]
   da7ac:	9301      	str	r3, [sp, #4]
   da7ae:	bd08      	pop	{r3, pc}
   da7b0:	00030284 	.word	0x00030284

000da7b4 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   da7b4:	b508      	push	{r3, lr}
   da7b6:	4b02      	ldr	r3, [pc, #8]	; (da7c0 <_read+0xc>)
   da7b8:	681b      	ldr	r3, [r3, #0]
   da7ba:	689b      	ldr	r3, [r3, #8]
   da7bc:	9301      	str	r3, [sp, #4]
   da7be:	bd08      	pop	{r3, pc}
   da7c0:	00030284 	.word	0x00030284

000da7c4 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   da7c4:	b508      	push	{r3, lr}
   da7c6:	4b02      	ldr	r3, [pc, #8]	; (da7d0 <_close+0xc>)
   da7c8:	681b      	ldr	r3, [r3, #0]
   da7ca:	68db      	ldr	r3, [r3, #12]
   da7cc:	9301      	str	r3, [sp, #4]
   da7ce:	bd08      	pop	{r3, pc}
   da7d0:	00030284 	.word	0x00030284

000da7d4 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   da7d4:	b508      	push	{r3, lr}
   da7d6:	4b02      	ldr	r3, [pc, #8]	; (da7e0 <_fstat+0xc>)
   da7d8:	681b      	ldr	r3, [r3, #0]
   da7da:	695b      	ldr	r3, [r3, #20]
   da7dc:	9301      	str	r3, [sp, #4]
   da7de:	bd08      	pop	{r3, pc}
   da7e0:	00030284 	.word	0x00030284

000da7e4 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   da7e4:	b508      	push	{r3, lr}
   da7e6:	4b02      	ldr	r3, [pc, #8]	; (da7f0 <_lseek+0xc>)
   da7e8:	681b      	ldr	r3, [r3, #0]
   da7ea:	6a1b      	ldr	r3, [r3, #32]
   da7ec:	9301      	str	r3, [sp, #4]
   da7ee:	bd08      	pop	{r3, pc}
   da7f0:	00030284 	.word	0x00030284

000da7f4 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   da7f4:	b508      	push	{r3, lr}
   da7f6:	4b02      	ldr	r3, [pc, #8]	; (da800 <stat+0xc>)
   da7f8:	681b      	ldr	r3, [r3, #0]
   da7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   da7fc:	9301      	str	r3, [sp, #4]
   da7fe:	bd08      	pop	{r3, pc}
   da800:	00030284 	.word	0x00030284

000da804 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   da804:	b508      	push	{r3, lr}
   da806:	4b02      	ldr	r3, [pc, #8]	; (da810 <mkdir+0xc>)
   da808:	681b      	ldr	r3, [r3, #0]
   da80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da80c:	9301      	str	r3, [sp, #4]
   da80e:	bd08      	pop	{r3, pc}
   da810:	00030284 	.word	0x00030284

000da814 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   da814:	b508      	push	{r3, lr}
   da816:	4b02      	ldr	r3, [pc, #8]	; (da820 <_unlink+0xc>)
   da818:	681b      	ldr	r3, [r3, #0]
   da81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da81c:	9301      	str	r3, [sp, #4]
   da81e:	bd08      	pop	{r3, pc}
   da820:	00030284 	.word	0x00030284

000da824 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   da824:	b508      	push	{r3, lr}
   da826:	4b02      	ldr	r3, [pc, #8]	; (da830 <opendir+0xc>)
   da828:	681b      	ldr	r3, [r3, #0]
   da82a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   da82c:	9301      	str	r3, [sp, #4]
   da82e:	bd08      	pop	{r3, pc}
   da830:	00030284 	.word	0x00030284

000da834 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   da834:	b508      	push	{r3, lr}
   da836:	4b02      	ldr	r3, [pc, #8]	; (da840 <readdir+0xc>)
   da838:	681b      	ldr	r3, [r3, #0]
   da83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da83c:	9301      	str	r3, [sp, #4]
   da83e:	bd08      	pop	{r3, pc}
   da840:	00030284 	.word	0x00030284

000da844 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   da844:	b508      	push	{r3, lr}
   da846:	4b02      	ldr	r3, [pc, #8]	; (da850 <closedir+0xc>)
   da848:	681b      	ldr	r3, [r3, #0]
   da84a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   da84c:	9301      	str	r3, [sp, #4]
   da84e:	bd08      	pop	{r3, pc}
   da850:	00030284 	.word	0x00030284

000da854 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   da854:	b508      	push	{r3, lr}
   da856:	4b02      	ldr	r3, [pc, #8]	; (da860 <hal_usart_init+0xc>)
   da858:	681b      	ldr	r3, [r3, #0]
   da85a:	681b      	ldr	r3, [r3, #0]
   da85c:	9301      	str	r3, [sp, #4]
   da85e:	bd08      	pop	{r3, pc}
   da860:	0003023c 	.word	0x0003023c

000da864 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   da864:	b508      	push	{r3, lr}
   da866:	4b02      	ldr	r3, [pc, #8]	; (da870 <hal_usart_end+0xc>)
   da868:	681b      	ldr	r3, [r3, #0]
   da86a:	689b      	ldr	r3, [r3, #8]
   da86c:	9301      	str	r3, [sp, #4]
   da86e:	bd08      	pop	{r3, pc}
   da870:	0003023c 	.word	0x0003023c

000da874 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   da874:	b508      	push	{r3, lr}
   da876:	4b02      	ldr	r3, [pc, #8]	; (da880 <hal_usart_write+0xc>)
   da878:	681b      	ldr	r3, [r3, #0]
   da87a:	68db      	ldr	r3, [r3, #12]
   da87c:	9301      	str	r3, [sp, #4]
   da87e:	bd08      	pop	{r3, pc}
   da880:	0003023c 	.word	0x0003023c

000da884 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   da884:	b508      	push	{r3, lr}
   da886:	4b02      	ldr	r3, [pc, #8]	; (da890 <hal_usart_available+0xc>)
   da888:	681b      	ldr	r3, [r3, #0]
   da88a:	691b      	ldr	r3, [r3, #16]
   da88c:	9301      	str	r3, [sp, #4]
   da88e:	bd08      	pop	{r3, pc}
   da890:	0003023c 	.word	0x0003023c

000da894 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   da894:	b508      	push	{r3, lr}
   da896:	4b02      	ldr	r3, [pc, #8]	; (da8a0 <hal_usart_read+0xc>)
   da898:	681b      	ldr	r3, [r3, #0]
   da89a:	695b      	ldr	r3, [r3, #20]
   da89c:	9301      	str	r3, [sp, #4]
   da89e:	bd08      	pop	{r3, pc}
   da8a0:	0003023c 	.word	0x0003023c

000da8a4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   da8a4:	b508      	push	{r3, lr}
   da8a6:	4b02      	ldr	r3, [pc, #8]	; (da8b0 <hal_usart_peek+0xc>)
   da8a8:	681b      	ldr	r3, [r3, #0]
   da8aa:	699b      	ldr	r3, [r3, #24]
   da8ac:	9301      	str	r3, [sp, #4]
   da8ae:	bd08      	pop	{r3, pc}
   da8b0:	0003023c 	.word	0x0003023c

000da8b4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   da8b4:	b508      	push	{r3, lr}
   da8b6:	4b02      	ldr	r3, [pc, #8]	; (da8c0 <hal_usart_flush+0xc>)
   da8b8:	681b      	ldr	r3, [r3, #0]
   da8ba:	69db      	ldr	r3, [r3, #28]
   da8bc:	9301      	str	r3, [sp, #4]
   da8be:	bd08      	pop	{r3, pc}
   da8c0:	0003023c 	.word	0x0003023c

000da8c4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   da8c4:	b508      	push	{r3, lr}
   da8c6:	4b02      	ldr	r3, [pc, #8]	; (da8d0 <hal_usart_is_enabled+0xc>)
   da8c8:	681b      	ldr	r3, [r3, #0]
   da8ca:	6a1b      	ldr	r3, [r3, #32]
   da8cc:	9301      	str	r3, [sp, #4]
   da8ce:	bd08      	pop	{r3, pc}
   da8d0:	0003023c 	.word	0x0003023c

000da8d4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   da8d4:	b508      	push	{r3, lr}
   da8d6:	4b02      	ldr	r3, [pc, #8]	; (da8e0 <hal_usart_available_data_for_write+0xc>)
   da8d8:	681b      	ldr	r3, [r3, #0]
   da8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da8dc:	9301      	str	r3, [sp, #4]
   da8de:	bd08      	pop	{r3, pc}
   da8e0:	0003023c 	.word	0x0003023c

000da8e4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   da8e4:	b508      	push	{r3, lr}
   da8e6:	4b02      	ldr	r3, [pc, #8]	; (da8f0 <hal_usart_begin_config+0xc>)
   da8e8:	681b      	ldr	r3, [r3, #0]
   da8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da8ec:	9301      	str	r3, [sp, #4]
   da8ee:	bd08      	pop	{r3, pc}
   da8f0:	0003023c 	.word	0x0003023c

000da8f4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   da8f4:	b508      	push	{r3, lr}
   da8f6:	4b02      	ldr	r3, [pc, #8]	; (da900 <HAL_USB_USART_Init+0xc>)
   da8f8:	681b      	ldr	r3, [r3, #0]
   da8fa:	681b      	ldr	r3, [r3, #0]
   da8fc:	9301      	str	r3, [sp, #4]
   da8fe:	bd08      	pop	{r3, pc}
   da900:	0003024c 	.word	0x0003024c

000da904 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   da904:	b508      	push	{r3, lr}
   da906:	4b02      	ldr	r3, [pc, #8]	; (da910 <HAL_USB_USART_Begin+0xc>)
   da908:	681b      	ldr	r3, [r3, #0]
   da90a:	685b      	ldr	r3, [r3, #4]
   da90c:	9301      	str	r3, [sp, #4]
   da90e:	bd08      	pop	{r3, pc}
   da910:	0003024c 	.word	0x0003024c

000da914 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   da914:	b508      	push	{r3, lr}
   da916:	4b02      	ldr	r3, [pc, #8]	; (da920 <HAL_USB_USART_End+0xc>)
   da918:	681b      	ldr	r3, [r3, #0]
   da91a:	689b      	ldr	r3, [r3, #8]
   da91c:	9301      	str	r3, [sp, #4]
   da91e:	bd08      	pop	{r3, pc}
   da920:	0003024c 	.word	0x0003024c

000da924 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   da924:	b508      	push	{r3, lr}
   da926:	4b02      	ldr	r3, [pc, #8]	; (da930 <HAL_USB_USART_Available_Data+0xc>)
   da928:	681b      	ldr	r3, [r3, #0]
   da92a:	691b      	ldr	r3, [r3, #16]
   da92c:	9301      	str	r3, [sp, #4]
   da92e:	bd08      	pop	{r3, pc}
   da930:	0003024c 	.word	0x0003024c

000da934 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   da934:	b508      	push	{r3, lr}
   da936:	4b02      	ldr	r3, [pc, #8]	; (da940 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   da938:	681b      	ldr	r3, [r3, #0]
   da93a:	695b      	ldr	r3, [r3, #20]
   da93c:	9301      	str	r3, [sp, #4]
   da93e:	bd08      	pop	{r3, pc}
   da940:	0003024c 	.word	0x0003024c

000da944 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   da944:	b508      	push	{r3, lr}
   da946:	4b02      	ldr	r3, [pc, #8]	; (da950 <HAL_USB_USART_Receive_Data+0xc>)
   da948:	681b      	ldr	r3, [r3, #0]
   da94a:	699b      	ldr	r3, [r3, #24]
   da94c:	9301      	str	r3, [sp, #4]
   da94e:	bd08      	pop	{r3, pc}
   da950:	0003024c 	.word	0x0003024c

000da954 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   da954:	b508      	push	{r3, lr}
   da956:	4b02      	ldr	r3, [pc, #8]	; (da960 <HAL_USB_USART_Send_Data+0xc>)
   da958:	681b      	ldr	r3, [r3, #0]
   da95a:	69db      	ldr	r3, [r3, #28]
   da95c:	9301      	str	r3, [sp, #4]
   da95e:	bd08      	pop	{r3, pc}
   da960:	0003024c 	.word	0x0003024c

000da964 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   da964:	b508      	push	{r3, lr}
   da966:	4b02      	ldr	r3, [pc, #8]	; (da970 <HAL_USB_USART_Flush_Data+0xc>)
   da968:	681b      	ldr	r3, [r3, #0]
   da96a:	6a1b      	ldr	r3, [r3, #32]
   da96c:	9301      	str	r3, [sp, #4]
   da96e:	bd08      	pop	{r3, pc}
   da970:	0003024c 	.word	0x0003024c

000da974 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   da974:	b508      	push	{r3, lr}
   da976:	4b02      	ldr	r3, [pc, #8]	; (da980 <panic_+0xc>)
   da978:	681b      	ldr	r3, [r3, #0]
   da97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   da97c:	9301      	str	r3, [sp, #4]
   da97e:	bd08      	pop	{r3, pc}
   da980:	00030260 	.word	0x00030260

000da984 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   da984:	b508      	push	{r3, lr}
   da986:	4b02      	ldr	r3, [pc, #8]	; (da990 <log_message+0xc>)
   da988:	681b      	ldr	r3, [r3, #0]
   da98a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   da98c:	9301      	str	r3, [sp, #4]
   da98e:	bd08      	pop	{r3, pc}
   da990:	00030260 	.word	0x00030260

000da994 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   da994:	b508      	push	{r3, lr}
   da996:	4b02      	ldr	r3, [pc, #8]	; (da9a0 <log_message_v+0xc>)
   da998:	681b      	ldr	r3, [r3, #0]
   da99a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   da99c:	9301      	str	r3, [sp, #4]
   da99e:	bd08      	pop	{r3, pc}
   da9a0:	00030260 	.word	0x00030260

000da9a4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   da9a4:	b508      	push	{r3, lr}
   da9a6:	4b02      	ldr	r3, [pc, #8]	; (da9b0 <log_level_name+0xc>)
   da9a8:	681b      	ldr	r3, [r3, #0]
   da9aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   da9ac:	9301      	str	r3, [sp, #4]
   da9ae:	bd08      	pop	{r3, pc}
   da9b0:	00030260 	.word	0x00030260

000da9b4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   da9b4:	b508      	push	{r3, lr}
   da9b6:	4b02      	ldr	r3, [pc, #8]	; (da9c0 <log_set_callbacks+0xc>)
   da9b8:	681b      	ldr	r3, [r3, #0]
   da9ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   da9bc:	9301      	str	r3, [sp, #4]
   da9be:	bd08      	pop	{r3, pc}
   da9c0:	00030260 	.word	0x00030260

000da9c4 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   da9c4:	b508      	push	{r3, lr}
   da9c6:	4b03      	ldr	r3, [pc, #12]	; (da9d4 <diag_get_source+0x10>)
   da9c8:	681b      	ldr	r3, [r3, #0]
   da9ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   da9ce:	9301      	str	r3, [sp, #4]
   da9d0:	bd08      	pop	{r3, pc}
   da9d2:	0000      	.short	0x0000
   da9d4:	00030260 	.word	0x00030260

000da9d8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   da9d8:	b508      	push	{r3, lr}
   da9da:	4b02      	ldr	r3, [pc, #8]	; (da9e4 <system_mode+0xc>)
   da9dc:	681b      	ldr	r3, [r3, #0]
   da9de:	681b      	ldr	r3, [r3, #0]
   da9e0:	9301      	str	r3, [sp, #4]
   da9e2:	bd08      	pop	{r3, pc}
   da9e4:	00030220 	.word	0x00030220

000da9e8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   da9e8:	b508      	push	{r3, lr}
   da9ea:	4b02      	ldr	r3, [pc, #8]	; (da9f4 <set_system_mode+0xc>)
   da9ec:	681b      	ldr	r3, [r3, #0]
   da9ee:	685b      	ldr	r3, [r3, #4]
   da9f0:	9301      	str	r3, [sp, #4]
   da9f2:	bd08      	pop	{r3, pc}
   da9f4:	00030220 	.word	0x00030220

000da9f8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   da9f8:	b508      	push	{r3, lr}
   da9fa:	4b02      	ldr	r3, [pc, #8]	; (daa04 <system_delay_ms+0xc>)
   da9fc:	681b      	ldr	r3, [r3, #0]
   da9fe:	695b      	ldr	r3, [r3, #20]
   daa00:	9301      	str	r3, [sp, #4]
   daa02:	bd08      	pop	{r3, pc}
   daa04:	00030220 	.word	0x00030220

000daa08 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   daa08:	b508      	push	{r3, lr}
   daa0a:	4b02      	ldr	r3, [pc, #8]	; (daa14 <system_subscribe_event+0xc>)
   daa0c:	681b      	ldr	r3, [r3, #0]
   daa0e:	6a1b      	ldr	r3, [r3, #32]
   daa10:	9301      	str	r3, [sp, #4]
   daa12:	bd08      	pop	{r3, pc}
   daa14:	00030220 	.word	0x00030220

000daa18 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   daa18:	b508      	push	{r3, lr}
   daa1a:	4b02      	ldr	r3, [pc, #8]	; (daa24 <system_thread_set_state+0xc>)
   daa1c:	681b      	ldr	r3, [r3, #0]
   daa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   daa20:	9301      	str	r3, [sp, #4]
   daa22:	bd08      	pop	{r3, pc}
   daa24:	00030220 	.word	0x00030220

000daa28 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   daa28:	b508      	push	{r3, lr}
   daa2a:	4b02      	ldr	r3, [pc, #8]	; (daa34 <application_thread_current+0xc>)
   daa2c:	681b      	ldr	r3, [r3, #0]
   daa2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   daa30:	9301      	str	r3, [sp, #4]
   daa32:	bd08      	pop	{r3, pc}
   daa34:	00030220 	.word	0x00030220

000daa38 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   daa38:	b508      	push	{r3, lr}
   daa3a:	4b02      	ldr	r3, [pc, #8]	; (daa44 <application_thread_invoke+0xc>)
   daa3c:	681b      	ldr	r3, [r3, #0]
   daa3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   daa40:	9301      	str	r3, [sp, #4]
   daa42:	bd08      	pop	{r3, pc}
   daa44:	00030220 	.word	0x00030220

000daa48 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   daa48:	b508      	push	{r3, lr}
   daa4a:	4b02      	ldr	r3, [pc, #8]	; (daa54 <system_thread_get_state+0xc>)
   daa4c:	681b      	ldr	r3, [r3, #0]
   daa4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   daa50:	9301      	str	r3, [sp, #4]
   daa52:	bd08      	pop	{r3, pc}
   daa54:	00030220 	.word	0x00030220

000daa58 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   daa58:	b508      	push	{r3, lr}
   daa5a:	4b02      	ldr	r3, [pc, #8]	; (daa64 <system_notify_time_changed+0xc>)
   daa5c:	681b      	ldr	r3, [r3, #0]
   daa5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   daa60:	9301      	str	r3, [sp, #4]
   daa62:	bd08      	pop	{r3, pc}
   daa64:	00030220 	.word	0x00030220

000daa68 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   daa68:	b508      	push	{r3, lr}
   daa6a:	4b03      	ldr	r3, [pc, #12]	; (daa78 <system_ctrl_set_app_request_handler+0x10>)
   daa6c:	681b      	ldr	r3, [r3, #0]
   daa6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   daa72:	9301      	str	r3, [sp, #4]
   daa74:	bd08      	pop	{r3, pc}
   daa76:	0000      	.short	0x0000
   daa78:	00030220 	.word	0x00030220

000daa7c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   daa7c:	b508      	push	{r3, lr}
   daa7e:	4b03      	ldr	r3, [pc, #12]	; (daa8c <system_ctrl_set_result+0x10>)
   daa80:	681b      	ldr	r3, [r3, #0]
   daa82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   daa86:	9301      	str	r3, [sp, #4]
   daa88:	bd08      	pop	{r3, pc}
   daa8a:	0000      	.short	0x0000
   daa8c:	00030220 	.word	0x00030220

000daa90 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   daa90:	b508      	push	{r3, lr}
   daa92:	4b03      	ldr	r3, [pc, #12]	; (daaa0 <system_power_management_set_config+0x10>)
   daa94:	681b      	ldr	r3, [r3, #0]
   daa96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   daa9a:	9301      	str	r3, [sp, #4]
   daa9c:	bd08      	pop	{r3, pc}
   daa9e:	0000      	.short	0x0000
   daaa0:	00030220 	.word	0x00030220

000daaa4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   daaa4:	b508      	push	{r3, lr}
   daaa6:	4b03      	ldr	r3, [pc, #12]	; (daab4 <system_sleep_ext+0x10>)
   daaa8:	681b      	ldr	r3, [r3, #0]
   daaaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   daaae:	9301      	str	r3, [sp, #4]
   daab0:	bd08      	pop	{r3, pc}
   daab2:	0000      	.short	0x0000
   daab4:	00030220 	.word	0x00030220

000daab8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   daab8:	b508      	push	{r3, lr}
   daaba:	4b02      	ldr	r3, [pc, #8]	; (daac4 <spark_variable+0xc>)
   daabc:	681b      	ldr	r3, [r3, #0]
   daabe:	681b      	ldr	r3, [r3, #0]
   daac0:	9301      	str	r3, [sp, #4]
   daac2:	bd08      	pop	{r3, pc}
   daac4:	00030244 	.word	0x00030244

000daac8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   daac8:	b508      	push	{r3, lr}
   daaca:	4b02      	ldr	r3, [pc, #8]	; (daad4 <spark_function+0xc>)
   daacc:	681b      	ldr	r3, [r3, #0]
   daace:	685b      	ldr	r3, [r3, #4]
   daad0:	9301      	str	r3, [sp, #4]
   daad2:	bd08      	pop	{r3, pc}
   daad4:	00030244 	.word	0x00030244

000daad8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   daad8:	b508      	push	{r3, lr}
   daada:	4b02      	ldr	r3, [pc, #8]	; (daae4 <spark_process+0xc>)
   daadc:	681b      	ldr	r3, [r3, #0]
   daade:	689b      	ldr	r3, [r3, #8]
   daae0:	9301      	str	r3, [sp, #4]
   daae2:	bd08      	pop	{r3, pc}
   daae4:	00030244 	.word	0x00030244

000daae8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   daae8:	b508      	push	{r3, lr}
   daaea:	4b02      	ldr	r3, [pc, #8]	; (daaf4 <spark_cloud_flag_connect+0xc>)
   daaec:	681b      	ldr	r3, [r3, #0]
   daaee:	68db      	ldr	r3, [r3, #12]
   daaf0:	9301      	str	r3, [sp, #4]
   daaf2:	bd08      	pop	{r3, pc}
   daaf4:	00030244 	.word	0x00030244

000daaf8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   daaf8:	b508      	push	{r3, lr}
   daafa:	4b02      	ldr	r3, [pc, #8]	; (dab04 <spark_cloud_flag_connected+0xc>)
   daafc:	681b      	ldr	r3, [r3, #0]
   daafe:	695b      	ldr	r3, [r3, #20]
   dab00:	9301      	str	r3, [sp, #4]
   dab02:	bd08      	pop	{r3, pc}
   dab04:	00030244 	.word	0x00030244

000dab08 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   dab08:	b508      	push	{r3, lr}
   dab0a:	4b02      	ldr	r3, [pc, #8]	; (dab14 <spark_send_event+0xc>)
   dab0c:	681b      	ldr	r3, [r3, #0]
   dab0e:	6a1b      	ldr	r3, [r3, #32]
   dab10:	9301      	str	r3, [sp, #4]
   dab12:	bd08      	pop	{r3, pc}
   dab14:	00030244 	.word	0x00030244

000dab18 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   dab18:	b508      	push	{r3, lr}
   dab1a:	4b02      	ldr	r3, [pc, #8]	; (dab24 <spark_sync_time+0xc>)
   dab1c:	681b      	ldr	r3, [r3, #0]
   dab1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dab20:	9301      	str	r3, [sp, #4]
   dab22:	bd08      	pop	{r3, pc}
   dab24:	00030244 	.word	0x00030244

000dab28 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   dab28:	b508      	push	{r3, lr}
   dab2a:	4b02      	ldr	r3, [pc, #8]	; (dab34 <spark_sync_time_pending+0xc>)
   dab2c:	681b      	ldr	r3, [r3, #0]
   dab2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dab30:	9301      	str	r3, [sp, #4]
   dab32:	bd08      	pop	{r3, pc}
   dab34:	00030244 	.word	0x00030244

000dab38 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   dab38:	b508      	push	{r3, lr}
   dab3a:	4b02      	ldr	r3, [pc, #8]	; (dab44 <spark_sync_time_last+0xc>)
   dab3c:	681b      	ldr	r3, [r3, #0]
   dab3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dab40:	9301      	str	r3, [sp, #4]
   dab42:	bd08      	pop	{r3, pc}
   dab44:	00030244 	.word	0x00030244

000dab48 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   dab48:	b508      	push	{r3, lr}
   dab4a:	4b02      	ldr	r3, [pc, #8]	; (dab54 <spark_set_connection_property+0xc>)
   dab4c:	681b      	ldr	r3, [r3, #0]
   dab4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   dab50:	9301      	str	r3, [sp, #4]
   dab52:	bd08      	pop	{r3, pc}
   dab54:	00030244 	.word	0x00030244

000dab58 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   dab58:	b508      	push	{r3, lr}
   dab5a:	4b02      	ldr	r3, [pc, #8]	; (dab64 <spark_set_random_seed_from_cloud_handler+0xc>)
   dab5c:	681b      	ldr	r3, [r3, #0]
   dab5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dab60:	9301      	str	r3, [sp, #4]
   dab62:	bd08      	pop	{r3, pc}
   dab64:	00030244 	.word	0x00030244

000dab68 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   dab68:	b508      	push	{r3, lr}
   dab6a:	4b02      	ldr	r3, [pc, #8]	; (dab74 <spark_cloud_disconnect+0xc>)
   dab6c:	681b      	ldr	r3, [r3, #0]
   dab6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dab70:	9301      	str	r3, [sp, #4]
   dab72:	bd08      	pop	{r3, pc}
   dab74:	00030244 	.word	0x00030244

000dab78 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   dab78:	b508      	push	{r3, lr}
   dab7a:	4b02      	ldr	r3, [pc, #8]	; (dab84 <network_connect+0xc>)
   dab7c:	681b      	ldr	r3, [r3, #0]
   dab7e:	685b      	ldr	r3, [r3, #4]
   dab80:	9301      	str	r3, [sp, #4]
   dab82:	bd08      	pop	{r3, pc}
   dab84:	00030240 	.word	0x00030240

000dab88 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   dab88:	b508      	push	{r3, lr}
   dab8a:	4b02      	ldr	r3, [pc, #8]	; (dab94 <network_connecting+0xc>)
   dab8c:	681b      	ldr	r3, [r3, #0]
   dab8e:	689b      	ldr	r3, [r3, #8]
   dab90:	9301      	str	r3, [sp, #4]
   dab92:	bd08      	pop	{r3, pc}
   dab94:	00030240 	.word	0x00030240

000dab98 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   dab98:	b508      	push	{r3, lr}
   dab9a:	4b02      	ldr	r3, [pc, #8]	; (daba4 <network_disconnect+0xc>)
   dab9c:	681b      	ldr	r3, [r3, #0]
   dab9e:	68db      	ldr	r3, [r3, #12]
   daba0:	9301      	str	r3, [sp, #4]
   daba2:	bd08      	pop	{r3, pc}
   daba4:	00030240 	.word	0x00030240

000daba8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   daba8:	b508      	push	{r3, lr}
   dabaa:	4b02      	ldr	r3, [pc, #8]	; (dabb4 <network_ready+0xc>)
   dabac:	681b      	ldr	r3, [r3, #0]
   dabae:	691b      	ldr	r3, [r3, #16]
   dabb0:	9301      	str	r3, [sp, #4]
   dabb2:	bd08      	pop	{r3, pc}
   dabb4:	00030240 	.word	0x00030240

000dabb8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   dabb8:	b508      	push	{r3, lr}
   dabba:	4b02      	ldr	r3, [pc, #8]	; (dabc4 <network_on+0xc>)
   dabbc:	681b      	ldr	r3, [r3, #0]
   dabbe:	695b      	ldr	r3, [r3, #20]
   dabc0:	9301      	str	r3, [sp, #4]
   dabc2:	bd08      	pop	{r3, pc}
   dabc4:	00030240 	.word	0x00030240

000dabc8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   dabc8:	b508      	push	{r3, lr}
   dabca:	4b02      	ldr	r3, [pc, #8]	; (dabd4 <network_off+0xc>)
   dabcc:	681b      	ldr	r3, [r3, #0]
   dabce:	699b      	ldr	r3, [r3, #24]
   dabd0:	9301      	str	r3, [sp, #4]
   dabd2:	bd08      	pop	{r3, pc}
   dabd4:	00030240 	.word	0x00030240

000dabd8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   dabd8:	b508      	push	{r3, lr}
   dabda:	4b02      	ldr	r3, [pc, #8]	; (dabe4 <network_listen+0xc>)
   dabdc:	681b      	ldr	r3, [r3, #0]
   dabde:	69db      	ldr	r3, [r3, #28]
   dabe0:	9301      	str	r3, [sp, #4]
   dabe2:	bd08      	pop	{r3, pc}
   dabe4:	00030240 	.word	0x00030240

000dabe8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   dabe8:	b508      	push	{r3, lr}
   dabea:	4b02      	ldr	r3, [pc, #8]	; (dabf4 <network_listening+0xc>)
   dabec:	681b      	ldr	r3, [r3, #0]
   dabee:	6a1b      	ldr	r3, [r3, #32]
   dabf0:	9301      	str	r3, [sp, #4]
   dabf2:	bd08      	pop	{r3, pc}
   dabf4:	00030240 	.word	0x00030240

000dabf8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   dabf8:	b508      	push	{r3, lr}
   dabfa:	4b02      	ldr	r3, [pc, #8]	; (dac04 <network_set_listen_timeout+0xc>)
   dabfc:	681b      	ldr	r3, [r3, #0]
   dabfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dac00:	9301      	str	r3, [sp, #4]
   dac02:	bd08      	pop	{r3, pc}
   dac04:	00030240 	.word	0x00030240

000dac08 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   dac08:	b508      	push	{r3, lr}
   dac0a:	4b02      	ldr	r3, [pc, #8]	; (dac14 <network_get_listen_timeout+0xc>)
   dac0c:	681b      	ldr	r3, [r3, #0]
   dac0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dac10:	9301      	str	r3, [sp, #4]
   dac12:	bd08      	pop	{r3, pc}
   dac14:	00030240 	.word	0x00030240

000dac18 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   dac18:	b508      	push	{r3, lr}
   dac1a:	4b02      	ldr	r3, [pc, #8]	; (dac24 <network_is_on+0xc>)
   dac1c:	681b      	ldr	r3, [r3, #0]
   dac1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dac20:	9301      	str	r3, [sp, #4]
   dac22:	bd08      	pop	{r3, pc}
   dac24:	00030240 	.word	0x00030240

000dac28 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   dac28:	b508      	push	{r3, lr}
   dac2a:	4b02      	ldr	r3, [pc, #8]	; (dac34 <network_is_off+0xc>)
   dac2c:	681b      	ldr	r3, [r3, #0]
   dac2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dac30:	9301      	str	r3, [sp, #4]
   dac32:	bd08      	pop	{r3, pc}
   dac34:	00030240 	.word	0x00030240

000dac38 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   dac38:	b508      	push	{r3, lr}
   dac3a:	4b02      	ldr	r3, [pc, #8]	; (dac44 <malloc+0xc>)
   dac3c:	681b      	ldr	r3, [r3, #0]
   dac3e:	681b      	ldr	r3, [r3, #0]
   dac40:	9301      	str	r3, [sp, #4]
   dac42:	bd08      	pop	{r3, pc}
   dac44:	0003021c 	.word	0x0003021c

000dac48 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   dac48:	b508      	push	{r3, lr}
   dac4a:	4b02      	ldr	r3, [pc, #8]	; (dac54 <free+0xc>)
   dac4c:	681b      	ldr	r3, [r3, #0]
   dac4e:	685b      	ldr	r3, [r3, #4]
   dac50:	9301      	str	r3, [sp, #4]
   dac52:	bd08      	pop	{r3, pc}
   dac54:	0003021c 	.word	0x0003021c

000dac58 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   dac58:	b508      	push	{r3, lr}
   dac5a:	4b02      	ldr	r3, [pc, #8]	; (dac64 <realloc+0xc>)
   dac5c:	681b      	ldr	r3, [r3, #0]
   dac5e:	689b      	ldr	r3, [r3, #8]
   dac60:	9301      	str	r3, [sp, #4]
   dac62:	bd08      	pop	{r3, pc}
   dac64:	0003021c 	.word	0x0003021c

000dac68 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   dac68:	b508      	push	{r3, lr}
   dac6a:	4b02      	ldr	r3, [pc, #8]	; (dac74 <siprintf+0xc>)
   dac6c:	681b      	ldr	r3, [r3, #0]
   dac6e:	691b      	ldr	r3, [r3, #16]
   dac70:	9301      	str	r3, [sp, #4]
   dac72:	bd08      	pop	{r3, pc}
   dac74:	0003021c 	.word	0x0003021c

000dac78 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   dac78:	b508      	push	{r3, lr}
   dac7a:	4b02      	ldr	r3, [pc, #8]	; (dac84 <sscanf+0xc>)
   dac7c:	681b      	ldr	r3, [r3, #0]
   dac7e:	695b      	ldr	r3, [r3, #20]
   dac80:	9301      	str	r3, [sp, #4]
   dac82:	bd08      	pop	{r3, pc}
   dac84:	0003021c 	.word	0x0003021c

000dac88 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   dac88:	b508      	push	{r3, lr}
   dac8a:	4b02      	ldr	r3, [pc, #8]	; (dac94 <snprintf+0xc>)
   dac8c:	681b      	ldr	r3, [r3, #0]
   dac8e:	69db      	ldr	r3, [r3, #28]
   dac90:	9301      	str	r3, [sp, #4]
   dac92:	bd08      	pop	{r3, pc}
   dac94:	0003021c 	.word	0x0003021c

000dac98 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   dac98:	b508      	push	{r3, lr}
   dac9a:	4b02      	ldr	r3, [pc, #8]	; (daca4 <vsnprintf+0xc>)
   dac9c:	681b      	ldr	r3, [r3, #0]
   dac9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   daca0:	9301      	str	r3, [sp, #4]
   daca2:	bd08      	pop	{r3, pc}
   daca4:	0003021c 	.word	0x0003021c

000daca8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   daca8:	b508      	push	{r3, lr}
   dacaa:	4b02      	ldr	r3, [pc, #8]	; (dacb4 <abort+0xc>)
   dacac:	681b      	ldr	r3, [r3, #0]
   dacae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dacb0:	9301      	str	r3, [sp, #4]
   dacb2:	bd08      	pop	{r3, pc}
   dacb4:	0003021c 	.word	0x0003021c

000dacb8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   dacb8:	b508      	push	{r3, lr}
   dacba:	4b02      	ldr	r3, [pc, #8]	; (dacc4 <_malloc_r+0xc>)
   dacbc:	681b      	ldr	r3, [r3, #0]
   dacbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dacc0:	9301      	str	r3, [sp, #4]
   dacc2:	bd08      	pop	{r3, pc}
   dacc4:	0003021c 	.word	0x0003021c

000dacc8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   dacc8:	b508      	push	{r3, lr}
   dacca:	4b02      	ldr	r3, [pc, #8]	; (dacd4 <__errno+0xc>)
   daccc:	681b      	ldr	r3, [r3, #0]
   dacce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dacd0:	9301      	str	r3, [sp, #4]
   dacd2:	bd08      	pop	{r3, pc}
   dacd4:	0003021c 	.word	0x0003021c

000dacd8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   dacd8:	b508      	push	{r3, lr}
   dacda:	4b02      	ldr	r3, [pc, #8]	; (dace4 <newlib_impure_ptr_callback+0xc>)
   dacdc:	681b      	ldr	r3, [r3, #0]
   dacde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dace0:	9301      	str	r3, [sp, #4]
   dace2:	bd08      	pop	{r3, pc}
   dace4:	0003021c 	.word	0x0003021c

000dace8 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   dace8:	b508      	push	{r3, lr}
   dacea:	4b02      	ldr	r3, [pc, #8]	; (dacf4 <strftime+0xc>)
   dacec:	681b      	ldr	r3, [r3, #0]
   dacee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dacf0:	9301      	str	r3, [sp, #4]
   dacf2:	bd08      	pop	{r3, pc}
   dacf4:	0003021c 	.word	0x0003021c

000dacf8 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   dacf8:	b508      	push	{r3, lr}
   dacfa:	4b02      	ldr	r3, [pc, #8]	; (dad04 <localtime_r+0xc>)
   dacfc:	681b      	ldr	r3, [r3, #0]
   dacfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dad00:	9301      	str	r3, [sp, #4]
   dad02:	bd08      	pop	{r3, pc}
   dad04:	0003021c 	.word	0x0003021c

000dad08 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   dad08:	b508      	push	{r3, lr}
   dad0a:	4b02      	ldr	r3, [pc, #8]	; (dad14 <gmtime_r+0xc>)
   dad0c:	681b      	ldr	r3, [r3, #0]
   dad0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   dad10:	9301      	str	r3, [sp, #4]
   dad12:	bd08      	pop	{r3, pc}
   dad14:	0003021c 	.word	0x0003021c

000dad18 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   dad18:	b508      	push	{r3, lr}
   dad1a:	4b02      	ldr	r3, [pc, #8]	; (dad24 <mktime+0xc>)
   dad1c:	681b      	ldr	r3, [r3, #0]
   dad1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dad20:	9301      	str	r3, [sp, #4]
   dad22:	bd08      	pop	{r3, pc}
   dad24:	0003021c 	.word	0x0003021c

000dad28 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   dad28:	2100      	movs	r1, #0
   dad2a:	f7ff be65 	b.w	da9f8 <system_delay_ms>

000dad2e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   dad2e:	b510      	push	{r4, lr}
      if (_M_empty())
   dad30:	6883      	ldr	r3, [r0, #8]
   dad32:	4604      	mov	r4, r0
   dad34:	b90b      	cbnz	r3, dad3a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   dad36:	f003 f8e7 	bl	ddf08 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dad3a:	68c3      	ldr	r3, [r0, #12]
   dad3c:	4798      	blx	r3
      if (_M_manager)
   dad3e:	68a3      	ldr	r3, [r4, #8]
   dad40:	b11b      	cbz	r3, dad4a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dad42:	2203      	movs	r2, #3
   dad44:	4621      	mov	r1, r4
   dad46:	4620      	mov	r0, r4
   dad48:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dad4a:	4620      	mov	r0, r4
   dad4c:	2110      	movs	r1, #16
}
   dad4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   dad52:	f003 b8cd 	b.w	ddef0 <_ZdlPvj>

000dad56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   dad56:	680b      	ldr	r3, [r1, #0]
   dad58:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   dad5a:	b113      	cbz	r3, dad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   dad5c:	685a      	ldr	r2, [r3, #4]
   dad5e:	3201      	adds	r2, #1
   dad60:	605a      	str	r2, [r3, #4]
      }
   dad62:	4770      	bx	lr

000dad64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dad64:	4802      	ldr	r0, [pc, #8]	; (dad70 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   dad66:	2300      	movs	r3, #0
   dad68:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   dad6a:	f7ff bb9b 	b.w	da4a4 <os_mutex_recursive_create>
   dad6e:	bf00      	nop
   dad70:	2003e498 	.word	0x2003e498

000dad74 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   dad74:	2200      	movs	r2, #0
   dad76:	6840      	ldr	r0, [r0, #4]
   dad78:	4611      	mov	r1, r2
   dad7a:	f7ff bf15 	b.w	daba8 <network_ready>

000dad7e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   dad7e:	2200      	movs	r2, #0
   dad80:	6840      	ldr	r0, [r0, #4]
   dad82:	4611      	mov	r1, r2
   dad84:	f7ff bf30 	b.w	dabe8 <network_listening>

000dad88 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   dad88:	2200      	movs	r2, #0
   dad8a:	6840      	ldr	r0, [r0, #4]
   dad8c:	4611      	mov	r1, r2
   dad8e:	f7ff bf3b 	b.w	dac08 <network_get_listen_timeout>

000dad92 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   dad92:	6840      	ldr	r0, [r0, #4]
   dad94:	2200      	movs	r2, #0
   dad96:	f7ff bf2f 	b.w	dabf8 <network_set_listen_timeout>

000dad9a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   dad9a:	6840      	ldr	r0, [r0, #4]
   dad9c:	2200      	movs	r2, #0
   dad9e:	f081 0101 	eor.w	r1, r1, #1
   dada2:	f7ff bf19 	b.w	dabd8 <network_listen>

000dada6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   dada6:	2300      	movs	r3, #0
   dada8:	6840      	ldr	r0, [r0, #4]
   dadaa:	461a      	mov	r2, r3
   dadac:	4619      	mov	r1, r3
   dadae:	f7ff bf0b 	b.w	dabc8 <network_off>

000dadb2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   dadb2:	2300      	movs	r3, #0
   dadb4:	6840      	ldr	r0, [r0, #4]
   dadb6:	461a      	mov	r2, r3
   dadb8:	4619      	mov	r1, r3
   dadba:	f7ff befd 	b.w	dabb8 <network_on>

000dadbe <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   dadbe:	2200      	movs	r2, #0
   dadc0:	6840      	ldr	r0, [r0, #4]
   dadc2:	4611      	mov	r1, r2
   dadc4:	f7ff bee0 	b.w	dab88 <network_connecting>

000dadc8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dadc8:	6840      	ldr	r0, [r0, #4]
   dadca:	2200      	movs	r2, #0
   dadcc:	2102      	movs	r1, #2
   dadce:	f7ff bee3 	b.w	dab98 <network_disconnect>

000dadd2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   dadd2:	2300      	movs	r3, #0
   dadd4:	6840      	ldr	r0, [r0, #4]
   dadd6:	461a      	mov	r2, r3
   dadd8:	f7ff bece 	b.w	dab78 <network_connect>

000daddc <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   daddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   dadde:	4b1b      	ldr	r3, [pc, #108]	; (dae4c <_ZN5spark13CellularClass4RSSIEv+0x70>)
   dade0:	6003      	str	r3, [r0, #0]
   dade2:	2500      	movs	r5, #0
   dade4:	460f      	mov	r7, r1
   dade6:	3330      	adds	r3, #48	; 0x30
   dade8:	2618      	movs	r6, #24
   dadea:	e9c0 5502 	strd	r5, r5, [r0, #8]
   dadee:	b089      	sub	sp, #36	; 0x24
   dadf0:	6043      	str	r3, [r0, #4]
   dadf2:	4632      	mov	r2, r6
   dadf4:	4629      	mov	r1, r5
   dadf6:	4604      	mov	r4, r0
   dadf8:	3010      	adds	r0, #16
   dadfa:	f003 fd2d 	bl	de858 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   dadfe:	6878      	ldr	r0, [r7, #4]
   dae00:	462a      	mov	r2, r5
   dae02:	4629      	mov	r1, r5
   dae04:	f7ff fed0 	bl	daba8 <network_ready>
   dae08:	b918      	cbnz	r0, dae12 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   dae0a:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   dae0c:	4620      	mov	r0, r4
   dae0e:	b009      	add	sp, #36	; 0x24
   dae10:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   dae12:	4629      	mov	r1, r5
   dae14:	4632      	mov	r2, r6
   dae16:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   dae18:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   dae1c:	f003 fd1c 	bl	de858 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   dae20:	a902      	add	r1, sp, #8
   dae22:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   dae24:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   dae28:	f7ff fafc 	bl	da424 <cellular_signal>
   dae2c:	b110      	cbz	r0, dae34 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   dae2e:	2301      	movs	r3, #1
   dae30:	60a3      	str	r3, [r4, #8]
            return sig;
   dae32:	e7eb      	b.n	dae0c <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   dae34:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   dae36:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   dae38:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   dae3a:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   dae3c:	b90b      	cbnz	r3, dae42 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   dae3e:	2302      	movs	r3, #2
   dae40:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   dae42:	a902      	add	r1, sp, #8
   dae44:	4620      	mov	r0, r4
   dae46:	f000 f8c0 	bl	dafca <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   dae4a:	e7df      	b.n	dae0c <_ZN5spark13CellularClass4RSSIEv+0x30>
   dae4c:	000dfeac 	.word	0x000dfeac

000dae50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   dae50:	4b08      	ldr	r3, [pc, #32]	; (dae74 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   dae52:	b510      	push	{r4, lr}
   dae54:	2428      	movs	r4, #40	; 0x28
   dae56:	4622      	mov	r2, r4
   dae58:	4618      	mov	r0, r3
   dae5a:	2100      	movs	r1, #0
   dae5c:	f003 fcfc 	bl	de858 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   dae60:	4b05      	ldr	r3, [pc, #20]	; (dae78 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   dae62:	8004      	strh	r4, [r0, #0]
        cid = -1;
   dae64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dae68:	6042      	str	r2, [r0, #4]
   dae6a:	2204      	movs	r2, #4
   dae6c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   dae6e:	4a03      	ldr	r2, [pc, #12]	; (dae7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   dae70:	601a      	str	r2, [r3, #0]
   dae72:	bd10      	pop	{r4, pc}
   dae74:	2003e4a4 	.word	0x2003e4a4
   dae78:	2003e49c 	.word	0x2003e49c
   dae7c:	000dfe70 	.word	0x000dfe70

000dae80 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   dae80:	4770      	bx	lr

000dae82 <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   dae82:	7d00      	ldrb	r0, [r0, #20]
   dae84:	4770      	bx	lr

000dae86 <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   dae86:	7d03      	ldrb	r3, [r0, #20]
   dae88:	b14b      	cbz	r3, dae9e <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   dae8a:	6983      	ldr	r3, [r0, #24]
   dae8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dae90:	d005      	beq.n	dae9e <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   dae92:	6a00      	ldr	r0, [r0, #32]
   dae94:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   dae98:	bf18      	it	ne
   dae9a:	2001      	movne	r0, #1
   dae9c:	4770      	bx	lr
   dae9e:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   daea0:	4770      	bx	lr

000daea2 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   daea2:	6803      	ldr	r3, [r0, #0]
   daea4:	6a1b      	ldr	r3, [r3, #32]
   daea6:	4718      	bx	r3

000daea8 <_ZN14CellularSignalD0Ev>:
   daea8:	b510      	push	{r4, lr}
   daeaa:	2128      	movs	r1, #40	; 0x28
   daeac:	4604      	mov	r4, r0
   daeae:	f003 f81f 	bl	ddef0 <_ZdlPvj>
   daeb2:	4620      	mov	r0, r4
   daeb4:	bd10      	pop	{r4, pc}
	...

000daeb8 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   daeb8:	7d03      	ldrb	r3, [r0, #20]
   daeba:	b17b      	cbz	r3, daedc <_ZNK14CellularSignal11getStrengthEv+0x24>
   daebc:	69c3      	ldr	r3, [r0, #28]
   daebe:	2b00      	cmp	r3, #0
   daec0:	db0c      	blt.n	daedc <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   daec2:	ee07 3a90 	vmov	s15, r3
   daec6:	ed9f 7a07 	vldr	s14, [pc, #28]	; daee4 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   daeca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   daece:	ee87 0a87 	vdiv.f32	s0, s15, s14
   daed2:	eddf 7a05 	vldr	s15, [pc, #20]	; daee8 <_ZNK14CellularSignal11getStrengthEv+0x30>
   daed6:	ee20 0a27 	vmul.f32	s0, s0, s15
   daeda:	4770      	bx	lr
    return -1.0f;
   daedc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   daee0:	4770      	bx	lr
   daee2:	bf00      	nop
   daee4:	477fff00 	.word	0x477fff00
   daee8:	42c80000 	.word	0x42c80000

000daeec <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   daeec:	7d03      	ldrb	r3, [r0, #20]
   daeee:	b163      	cbz	r3, daf0a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   daef0:	6983      	ldr	r3, [r0, #24]
   daef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   daef6:	d008      	beq.n	daf0a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   daef8:	ee07 3a90 	vmov	s15, r3
   daefc:	ed9f 7a04 	vldr	s14, [pc, #16]	; daf10 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   daf00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   daf04:	ee87 0a87 	vdiv.f32	s0, s15, s14
   daf08:	4770      	bx	lr
    return 0.0f;
   daf0a:	ed9f 0a02 	vldr	s0, [pc, #8]	; daf14 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   daf0e:	4770      	bx	lr
   daf10:	42c80000 	.word	0x42c80000
   daf14:	00000000 	.word	0x00000000

000daf18 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   daf18:	7d03      	ldrb	r3, [r0, #20]
   daf1a:	b17b      	cbz	r3, daf3c <_ZNK14CellularSignal10getQualityEv+0x24>
   daf1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   daf1e:	2b00      	cmp	r3, #0
   daf20:	db0c      	blt.n	daf3c <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   daf22:	ee07 3a90 	vmov	s15, r3
   daf26:	ed9f 7a07 	vldr	s14, [pc, #28]	; daf44 <_ZNK14CellularSignal10getQualityEv+0x2c>
   daf2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   daf2e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   daf32:	eddf 7a05 	vldr	s15, [pc, #20]	; daf48 <_ZNK14CellularSignal10getQualityEv+0x30>
   daf36:	ee20 0a27 	vmul.f32	s0, s0, s15
   daf3a:	4770      	bx	lr
    return -1.0f;
   daf3c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   daf40:	4770      	bx	lr
   daf42:	bf00      	nop
   daf44:	477fff00 	.word	0x477fff00
   daf48:	42c80000 	.word	0x42c80000

000daf4c <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   daf4c:	7d03      	ldrb	r3, [r0, #20]
   daf4e:	b163      	cbz	r3, daf6a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   daf50:	6a03      	ldr	r3, [r0, #32]
   daf52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   daf56:	d008      	beq.n	daf6a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   daf58:	ee07 3a90 	vmov	s15, r3
   daf5c:	ed9f 7a04 	vldr	s14, [pc, #16]	; daf70 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   daf60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   daf64:	ee87 0a87 	vdiv.f32	s0, s15, s14
   daf68:	4770      	bx	lr
    return 0.0f;
   daf6a:	ed9f 0a02 	vldr	s0, [pc, #8]	; daf74 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   daf6e:	4770      	bx	lr
   daf70:	42c80000 	.word	0x42c80000
   daf74:	00000000 	.word	0x00000000

000daf78 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   daf78:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   daf7a:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   daf7c:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   daf7e:	da0a      	bge.n	daf96 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   daf80:	212d      	movs	r1, #45	; 0x2d
   daf82:	f002 f852 	bl	dd02a <_ZN5Print5printEc>
            val = -n;
   daf86:	4261      	negs	r1, r4
            t = print('-');
   daf88:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   daf8a:	220a      	movs	r2, #10
   daf8c:	4630      	mov	r0, r6
   daf8e:	f002 f85b 	bl	dd048 <_ZN5Print11printNumberEmh>
    }
}
   daf92:	4428      	add	r0, r5
   daf94:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   daf96:	4621      	mov	r1, r4
        size_t t = 0;
   daf98:	2500      	movs	r5, #0
   daf9a:	e7f6      	b.n	daf8a <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000daf9c <_ZNK14CellularSignal7printToER5Print>:
{
   daf9c:	b570      	push	{r4, r5, r6, lr}
   daf9e:	460c      	mov	r4, r1
   dafa0:	4605      	mov	r5, r0
   dafa2:	6881      	ldr	r1, [r0, #8]
   dafa4:	4620      	mov	r0, r4
   dafa6:	f7ff ffe7 	bl	daf78 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   dafaa:	212c      	movs	r1, #44	; 0x2c
   dafac:	4606      	mov	r6, r0
   dafae:	4620      	mov	r0, r4
   dafb0:	f002 f83b 	bl	dd02a <_ZN5Print5printEc>
   dafb4:	68e9      	ldr	r1, [r5, #12]
   dafb6:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   dafb8:	4620      	mov	r0, r4
   dafba:	f7ff ffdd 	bl	daf78 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   dafbe:	4430      	add	r0, r6
   dafc0:	bd70      	pop	{r4, r5, r6, pc}

000dafc2 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   dafc2:	f1a0 0004 	sub.w	r0, r0, #4
   dafc6:	f7ff bfe9 	b.w	daf9c <_ZNK14CellularSignal7printToER5Print>

000dafca <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   dafca:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   dafcc:	460d      	mov	r5, r1
   dafce:	f100 0410 	add.w	r4, r0, #16
   dafd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dafd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dafd6:	e895 0003 	ldmia.w	r5, {r0, r1}
   dafda:	e884 0003 	stmia.w	r4, {r0, r1}
}
   dafde:	2001      	movs	r0, #1
   dafe0:	bd30      	pop	{r4, r5, pc}

000dafe2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dafe2:	4770      	bx	lr

000dafe4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   dafe4:	2000      	movs	r0, #0
   dafe6:	4770      	bx	lr

000dafe8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dafe8:	b510      	push	{r4, lr}
   dafea:	2110      	movs	r1, #16
   dafec:	4604      	mov	r4, r0
   dafee:	f002 ff7f 	bl	ddef0 <_ZdlPvj>
   daff2:	4620      	mov	r0, r4
   daff4:	bd10      	pop	{r4, pc}

000daff6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   daff6:	b508      	push	{r3, lr}
      { delete this; }
   daff8:	f7ff fff6 	bl	dafe8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   daffc:	bd08      	pop	{r3, pc}

000daffe <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   daffe:	b530      	push	{r4, r5, lr}
        type_(type) {
   db000:	2200      	movs	r2, #0
   db002:	f64f 749c 	movw	r4, #65436	; 0xff9c
   db006:	6002      	str	r2, [r0, #0]
   db008:	8084      	strh	r4, [r0, #4]
   db00a:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   db00c:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   db00e:	680c      	ldr	r4, [r1, #0]
   db010:	8085      	strh	r5, [r0, #4]
   db012:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   db014:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   db016:	bd30      	pop	{r4, r5, pc}

000db018 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   db018:	b510      	push	{r4, lr}
   db01a:	4604      	mov	r4, r0
    free((void*)msg_);
   db01c:	6800      	ldr	r0, [r0, #0]
   db01e:	f7ff fe13 	bl	dac48 <free>
}
   db022:	4620      	mov	r0, r4
   db024:	bd10      	pop	{r4, pc}

000db026 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   db026:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   db028:	68c4      	ldr	r4, [r0, #12]
   db02a:	b1f4      	cbz	r4, db06a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   db02c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   db02e:	2b02      	cmp	r3, #2
   db030:	d103      	bne.n	db03a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   db032:	f104 000c 	add.w	r0, r4, #12
   db036:	f7ff ffef 	bl	db018 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   db03a:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   db03c:	b135      	cbz	r5, db04c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   db03e:	4628      	mov	r0, r5
   db040:	f7fb f918 	bl	d6274 <_ZNSt14_Function_baseD1Ev>
   db044:	2110      	movs	r1, #16
   db046:	4628      	mov	r0, r5
   db048:	f002 ff52 	bl	ddef0 <_ZdlPvj>
   db04c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   db04e:	b135      	cbz	r5, db05e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   db050:	4628      	mov	r0, r5
   db052:	f7fb f90f 	bl	d6274 <_ZNSt14_Function_baseD1Ev>
   db056:	2110      	movs	r1, #16
   db058:	4628      	mov	r0, r5
   db05a:	f002 ff49 	bl	ddef0 <_ZdlPvj>
   db05e:	4620      	mov	r0, r4
   db060:	2114      	movs	r1, #20
   db062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db066:	f002 bf43 	b.w	ddef0 <_ZdlPvj>
   db06a:	bd38      	pop	{r3, r4, r5, pc}

000db06c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   db06c:	b510      	push	{r4, lr}
   db06e:	b088      	sub	sp, #32
   db070:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   db072:	4668      	mov	r0, sp
   db074:	f002 f95d 	bl	dd332 <_ZN6StringC1EPKc>
    return (*fn)(p);
   db078:	4669      	mov	r1, sp
   db07a:	a804      	add	r0, sp, #16
   db07c:	f002 f9a4 	bl	dd3c8 <_ZN6StringC1ERKS_>
   db080:	a804      	add	r0, sp, #16
   db082:	47a0      	blx	r4
   db084:	4604      	mov	r4, r0
   db086:	a804      	add	r0, sp, #16
   db088:	f002 f908 	bl	dd29c <_ZN6StringD1Ev>
    String p(param);
   db08c:	4668      	mov	r0, sp
   db08e:	f002 f905 	bl	dd29c <_ZN6StringD1Ev>
}
   db092:	4620      	mov	r0, r4
   db094:	b008      	add	sp, #32
   db096:	bd10      	pop	{r4, pc}

000db098 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   db098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   db09a:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   db09c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   db0a0:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   db0a2:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   db0a4:	461a      	mov	r2, r3
   db0a6:	4669      	mov	r1, sp
   db0a8:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   db0aa:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   db0ae:	f8ad 4000 	strh.w	r4, [sp]
   db0b2:	f7ff fd09 	bl	daac8 <spark_function>
}
   db0b6:	b004      	add	sp, #16
   db0b8:	bd10      	pop	{r4, pc}

000db0ba <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   db0ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   db0bc:	230c      	movs	r3, #12
   db0be:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   db0c2:	6803      	ldr	r3, [r0, #0]
   db0c4:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   db0c8:	7a03      	ldrb	r3, [r0, #8]
   db0ca:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   db0ce:	6843      	ldr	r3, [r0, #4]
   db0d0:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   db0d2:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   db0d4:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   db0d6:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   db0da:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   db0dc:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   db0e0:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   db0e4:	f7ff fd40 	bl	dab68 <spark_cloud_disconnect>
}
   db0e8:	b005      	add	sp, #20
   db0ea:	f85d fb04 	ldr.w	pc, [sp], #4

000db0ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   db0ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   db0f0:	460e      	mov	r6, r1
   db0f2:	4604      	mov	r4, r0
   db0f4:	f856 3b04 	ldr.w	r3, [r6], #4
   db0f8:	9300      	str	r3, [sp, #0]
   db0fa:	460d      	mov	r5, r1
   db0fc:	a801      	add	r0, sp, #4
   db0fe:	4631      	mov	r1, r6
   db100:	f7ff fe29 	bl	dad56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   db104:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   db106:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   db108:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   db10a:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   db10c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   db10e:	2300      	movs	r3, #0
   db110:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   db112:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   db114:	f7f9 fe33 	bl	d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   db118:	4630      	mov	r0, r6
   db11a:	f7f9 fe30 	bl	d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   db11e:	4628      	mov	r0, r5
   db120:	2108      	movs	r1, #8
   db122:	f002 fee5 	bl	ddef0 <_ZdlPvj>
        return p;
    }
   db126:	4620      	mov	r0, r4
   db128:	b002      	add	sp, #8
   db12a:	bd70      	pop	{r4, r5, r6, pc}

000db12c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   db12c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   db12e:	b510      	push	{r4, lr}
      if (_M_empty())
   db130:	b90a      	cbnz	r2, db136 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   db132:	f002 fee9 	bl	ddf08 <_ZSt25__throw_bad_function_callv>
    }
   db136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   db13a:	68c3      	ldr	r3, [r0, #12]
   db13c:	4718      	bx	r3

000db13e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   db13e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   db140:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   db142:	f100 0110 	add.w	r1, r0, #16
   db146:	f7ff fff1 	bl	db12c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   db14a:	bd08      	pop	{r3, pc}

000db14c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   db14c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   db14e:	b510      	push	{r4, lr}
      if (_M_empty())
   db150:	b90a      	cbnz	r2, db156 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   db152:	f002 fed9 	bl	ddf08 <_ZSt25__throw_bad_function_callv>
    }
   db156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   db15a:	68c3      	ldr	r3, [r0, #12]
   db15c:	4718      	bx	r3

000db15e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   db15e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   db160:	6800      	ldr	r0, [r0, #0]
   db162:	f100 0110 	add.w	r1, r0, #16
   db166:	f7ff fff1 	bl	db14c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   db16a:	bd08      	pop	{r3, pc}

000db16c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   db16c:	b538      	push	{r3, r4, r5, lr}
   db16e:	2300      	movs	r3, #0
   db170:	4604      	mov	r4, r0
   db172:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   db174:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   db176:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   db178:	f7f8 ff8d 	bl	d4096 <_Znwj>
   db17c:	b128      	cbz	r0, db18a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   db17e:	2301      	movs	r3, #1
   db180:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   db184:	4b02      	ldr	r3, [pc, #8]	; (db190 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   db186:	6003      	str	r3, [r0, #0]
   db188:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   db18a:	6020      	str	r0, [r4, #0]
	}
   db18c:	4620      	mov	r0, r4
   db18e:	bd38      	pop	{r3, r4, r5, pc}
   db190:	000dfee8 	.word	0x000dfee8

000db194 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   db194:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   db196:	2300      	movs	r3, #0
   db198:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   db19a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   db19c:	4604      	mov	r4, r0
   db19e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   db1a0:	b12b      	cbz	r3, db1ae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   db1a2:	2202      	movs	r2, #2
   db1a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   db1a6:	68eb      	ldr	r3, [r5, #12]
   db1a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   db1aa:	68ab      	ldr	r3, [r5, #8]
   db1ac:	60a3      	str	r3, [r4, #8]
    }
   db1ae:	4620      	mov	r0, r4
   db1b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000db1b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   db1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   db1b6:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   db1b8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   db1ba:	4668      	mov	r0, sp
   db1bc:	f7ff ff1f 	bl	daffe <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   db1c0:	f04f 0302 	mov.w	r3, #2
   db1c4:	e8d4 2f4f 	ldrexb	r2, [r4]
   db1c8:	2a00      	cmp	r2, #0
   db1ca:	d103      	bne.n	db1d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   db1cc:	e8c4 3f41 	strexb	r1, r3, [r4]
   db1d0:	2900      	cmp	r1, #0
   db1d2:	d1f7      	bne.n	db1c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   db1d4:	d125      	bne.n	db222 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   db1d6:	f104 050c 	add.w	r5, r4, #12
   db1da:	4669      	mov	r1, sp
   db1dc:	4628      	mov	r0, r5
   db1de:	f7ff ff0e 	bl	daffe <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   db1e2:	f3bf 8f5b 	dmb	ish
   db1e6:	2301      	movs	r3, #1
   db1e8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   db1ea:	2000      	movs	r0, #0
   db1ec:	f104 0308 	add.w	r3, r4, #8
   db1f0:	f3bf 8f5b 	dmb	ish
   db1f4:	e853 6f00 	ldrex	r6, [r3]
   db1f8:	e843 0200 	strex	r2, r0, [r3]
   db1fc:	2a00      	cmp	r2, #0
   db1fe:	d1f9      	bne.n	db1f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   db200:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   db204:	b16e      	cbz	r6, db222 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   db206:	f7ff fc0f 	bl	daa28 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   db20a:	b178      	cbz	r0, db22c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   db20c:	4629      	mov	r1, r5
   db20e:	4630      	mov	r0, r6
   db210:	f7ff ff8c 	bl	db12c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   db214:	4630      	mov	r0, r6
   db216:	f7fb f82d 	bl	d6274 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   db21a:	2110      	movs	r1, #16
   db21c:	4630      	mov	r0, r6
   db21e:	f002 fe67 	bl	ddef0 <_ZdlPvj>
        p_->setError(std::move(error));
   db222:	4668      	mov	r0, sp
   db224:	f7ff fef8 	bl	db018 <_ZN8particle5ErrorD1Ev>
    }
   db228:	b009      	add	sp, #36	; 0x24
   db22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   db22c:	4631      	mov	r1, r6
   db22e:	a802      	add	r0, sp, #8
   db230:	f7ff ffb0 	bl	db194 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   db234:	68e0      	ldr	r0, [r4, #12]
   db236:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   db23a:	b108      	cbz	r0, db240 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   db23c:	f003 fb96 	bl	de96c <strdup>
        type_(type) {
   db240:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   db242:	2010      	movs	r0, #16
   db244:	f8ad 501c 	strh.w	r5, [sp, #28]
   db248:	f7f8 ff25 	bl	d4096 <_Znwj>
   db24c:	4605      	mov	r5, r0
   db24e:	b1e8      	cbz	r0, db28c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   db250:	2700      	movs	r7, #0
   db252:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db254:	2018      	movs	r0, #24
   db256:	f7f8 ff1e 	bl	d4096 <_Znwj>
   db25a:	4604      	mov	r4, r0
   db25c:	b188      	cbz	r0, db282 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   db25e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   db260:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   db262:	a802      	add	r0, sp, #8
   db264:	f7fb f905 	bl	d6472 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db268:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   db26a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   db26c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db26e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   db270:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   db272:	a906      	add	r1, sp, #24
   db274:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   db276:	60e3      	str	r3, [r4, #12]
   db278:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   db27c:	9205      	str	r2, [sp, #20]
   db27e:	f7ff febe 	bl	daffe <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   db282:	4b08      	ldr	r3, [pc, #32]	; (db2a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   db284:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   db286:	4b08      	ldr	r3, [pc, #32]	; (db2a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db288:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   db28a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   db28c:	a806      	add	r0, sp, #24
   db28e:	f7ff fec3 	bl	db018 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   db292:	a802      	add	r0, sp, #8
   db294:	f7fa ffee 	bl	d6274 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   db298:	2200      	movs	r2, #0
   db29a:	4629      	mov	r1, r5
   db29c:	4803      	ldr	r0, [pc, #12]	; (db2ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   db29e:	f7ff fbcb 	bl	daa38 <application_thread_invoke>
   db2a2:	e7b7      	b.n	db214 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   db2a4:	000db13f 	.word	0x000db13f
   db2a8:	000db3d5 	.word	0x000db3d5
   db2ac:	000dad2f 	.word	0x000dad2f

000db2b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   db2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db2b4:	b08a      	sub	sp, #40	; 0x28
   db2b6:	4605      	mov	r5, r0
   db2b8:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   db2bc:	460c      	mov	r4, r1
   db2be:	4617      	mov	r7, r2
   db2c0:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   db2c2:	f7ff fc19 	bl	daaf8 <spark_cloud_flag_connected>
   db2c6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   db2c8:	4682      	mov	sl, r0
   db2ca:	bb38      	cbnz	r0, db31c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   db2cc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   db2d0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   db2d2:	a905      	add	r1, sp, #20
   db2d4:	4630      	mov	r0, r6
   db2d6:	f8ad 3018 	strh.w	r3, [sp, #24]
   db2da:	f7ff fe90 	bl	daffe <_ZN8particle5ErrorC1EOS0_>
   db2de:	2014      	movs	r0, #20
   db2e0:	f7f8 fed9 	bl	d4096 <_Znwj>
   db2e4:	4604      	mov	r4, r0
   db2e6:	b148      	cbz	r0, db2fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   db2e8:	2302      	movs	r3, #2
   db2ea:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db2ec:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   db2ee:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db2f2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   db2f4:	4631      	mov	r1, r6
   db2f6:	300c      	adds	r0, #12
   db2f8:	f7ff fe81 	bl	daffe <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   db2fc:	4628      	mov	r0, r5
	: __shared_count(__p)
   db2fe:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   db300:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   db304:	f7ff ff32 	bl	db16c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   db308:	4630      	mov	r0, r6
   db30a:	f7ff fe85 	bl	db018 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   db30e:	a805      	add	r0, sp, #20
   db310:	f7ff fe82 	bl	db018 <_ZN8particle5ErrorD1Ev>
}
   db314:	4628      	mov	r0, r5
   db316:	b00a      	add	sp, #40	; 0x28
   db318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   db31c:	230c      	movs	r3, #12
   db31e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   db322:	2014      	movs	r0, #20
   db324:	e9cd aa08 	strd	sl, sl, [sp, #32]
   db328:	9307      	str	r3, [sp, #28]
   db32a:	f7f8 feb4 	bl	d4096 <_Znwj>
   db32e:	4601      	mov	r1, r0
   db330:	b128      	cbz	r0, db33e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   db332:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   db336:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db33a:	f880 a001 	strb.w	sl, [r0, #1]
   db33e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   db340:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   db342:	f7ff ff13 	bl	db16c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   db346:	4b22      	ldr	r3, [pc, #136]	; (db3d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   db348:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   db34a:	2008      	movs	r0, #8
   db34c:	f7f8 fea3 	bl	d4096 <_Znwj>
   db350:	4682      	mov	sl, r0
   db352:	b128      	cbz	r0, db360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   db354:	9b03      	ldr	r3, [sp, #12]
   db356:	f840 3b04 	str.w	r3, [r0], #4
   db35a:	a904      	add	r1, sp, #16
   db35c:	f7ff fcfb 	bl	dad56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   db360:	9600      	str	r6, [sp, #0]
   db362:	fa5f f389 	uxtb.w	r3, r9
   db366:	4642      	mov	r2, r8
   db368:	4639      	mov	r1, r7
   db36a:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   db36c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   db370:	f7ff fbca 	bl	dab08 <spark_send_event>
   db374:	b9b8      	cbnz	r0, db3a6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   db376:	9b03      	ldr	r3, [sp, #12]
   db378:	785b      	ldrb	r3, [r3, #1]
   db37a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   db37e:	b993      	cbnz	r3, db3a6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   db380:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   db384:	a905      	add	r1, sp, #20
   db386:	a803      	add	r0, sp, #12
   db388:	9205      	str	r2, [sp, #20]
   db38a:	f8ad 3018 	strh.w	r3, [sp, #24]
   db38e:	f7ff ff11 	bl	db1b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   db392:	a805      	add	r0, sp, #20
   db394:	f7ff fe40 	bl	db018 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   db398:	a805      	add	r0, sp, #20
   db39a:	9909      	ldr	r1, [sp, #36]	; 0x24
   db39c:	f7ff fea7 	bl	db0ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   db3a0:	a806      	add	r0, sp, #24
   db3a2:	f7f9 fcec 	bl	d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   db3a6:	9b03      	ldr	r3, [sp, #12]
   db3a8:	9305      	str	r3, [sp, #20]
   db3aa:	a904      	add	r1, sp, #16
   db3ac:	a806      	add	r0, sp, #24
   db3ae:	f7ff fcd2 	bl	dad56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   db3b2:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   db3b4:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   db3b6:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   db3b8:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   db3ba:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   db3bc:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   db3be:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   db3c0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   db3c2:	f7f9 fcdc 	bl	d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   db3c6:	a804      	add	r0, sp, #16
   db3c8:	f7f9 fcd9 	bl	d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   db3cc:	e7a2      	b.n	db314 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   db3ce:	bf00      	nop
   db3d0:	000db499 	.word	0x000db499

000db3d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   db3d4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   db3d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db3d8:	4605      	mov	r5, r0
	  switch (__op)
   db3da:	d007      	beq.n	db3ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   db3dc:	2a03      	cmp	r2, #3
   db3de:	d018      	beq.n	db412 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   db3e0:	2a01      	cmp	r2, #1
   db3e2:	d101      	bne.n	db3e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   db3e4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db3e6:	6003      	str	r3, [r0, #0]
	}
   db3e8:	2000      	movs	r0, #0
   db3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   db3ec:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   db3ee:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   db3f0:	f7f8 fe51 	bl	d4096 <_Znwj>
   db3f4:	4604      	mov	r4, r0
   db3f6:	b150      	cbz	r0, db40e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   db3f8:	4631      	mov	r1, r6
   db3fa:	f7ff fecb 	bl	db194 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   db3fe:	6930      	ldr	r0, [r6, #16]
   db400:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   db404:	b108      	cbz	r0, db40a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   db406:	f003 fab1 	bl	de96c <strdup>
        type_(type) {
   db40a:	6120      	str	r0, [r4, #16]
   db40c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   db40e:	602c      	str	r4, [r5, #0]
	}
   db410:	e7ea      	b.n	db3e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   db412:	6804      	ldr	r4, [r0, #0]
   db414:	2c00      	cmp	r4, #0
   db416:	d0e7      	beq.n	db3e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   db418:	f104 0010 	add.w	r0, r4, #16
   db41c:	f7ff fdfc 	bl	db018 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   db420:	4620      	mov	r0, r4
   db422:	f7fa ff27 	bl	d6274 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   db426:	2118      	movs	r1, #24
   db428:	4620      	mov	r0, r4
   db42a:	f002 fd61 	bl	ddef0 <_ZdlPvj>
   db42e:	e7db      	b.n	db3e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000db430 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   db430:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   db432:	2300      	movs	r3, #0
   db434:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   db436:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   db438:	4604      	mov	r4, r0
   db43a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   db43c:	b12b      	cbz	r3, db44a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   db43e:	2202      	movs	r2, #2
   db440:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   db442:	68eb      	ldr	r3, [r5, #12]
   db444:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   db446:	68ab      	ldr	r3, [r5, #8]
   db448:	60a3      	str	r3, [r4, #8]
    }
   db44a:	4620      	mov	r0, r4
   db44c:	bd38      	pop	{r3, r4, r5, pc}

000db44e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   db44e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   db450:	b570      	push	{r4, r5, r6, lr}
   db452:	4604      	mov	r4, r0
	  switch (__op)
   db454:	d007      	beq.n	db466 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   db456:	2a03      	cmp	r2, #3
   db458:	d012      	beq.n	db480 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   db45a:	2a01      	cmp	r2, #1
   db45c:	d101      	bne.n	db462 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   db45e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db460:	6003      	str	r3, [r0, #0]
	}
   db462:	2000      	movs	r0, #0
   db464:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   db466:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   db468:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   db46a:	f7f8 fe14 	bl	d4096 <_Znwj>
   db46e:	4605      	mov	r5, r0
   db470:	b120      	cbz	r0, db47c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   db472:	4631      	mov	r1, r6
   db474:	f7ff ffdc 	bl	db430 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   db478:	7c33      	ldrb	r3, [r6, #16]
   db47a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   db47c:	6025      	str	r5, [r4, #0]
	}
   db47e:	e7f0      	b.n	db462 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   db480:	6804      	ldr	r4, [r0, #0]
   db482:	2c00      	cmp	r4, #0
   db484:	d0ed      	beq.n	db462 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   db486:	4620      	mov	r0, r4
   db488:	f7fa fef4 	bl	d6274 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   db48c:	2114      	movs	r1, #20
   db48e:	4620      	mov	r0, r4
   db490:	f002 fd2e 	bl	ddef0 <_ZdlPvj>
   db494:	e7e5      	b.n	db462 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000db498 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   db498:	b5f0      	push	{r4, r5, r6, r7, lr}
   db49a:	b089      	sub	sp, #36	; 0x24
   db49c:	4604      	mov	r4, r0
   db49e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   db4a0:	a801      	add	r0, sp, #4
   db4a2:	4611      	mov	r1, r2
   db4a4:	f7ff fe23 	bl	db0ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   db4a8:	b1a4      	cbz	r4, db4d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   db4aa:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   db4ac:	b11d      	cbz	r5, db4b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   db4ae:	4628      	mov	r0, r5
   db4b0:	f003 fa5c 	bl	de96c <strdup>
   db4b4:	4605      	mov	r5, r0
   db4b6:	a801      	add	r0, sp, #4
   db4b8:	a903      	add	r1, sp, #12
        type_(type) {
   db4ba:	9503      	str	r5, [sp, #12]
   db4bc:	f8ad 4010 	strh.w	r4, [sp, #16]
   db4c0:	f7ff fe78 	bl	db1b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   db4c4:	a803      	add	r0, sp, #12
   db4c6:	f7ff fda7 	bl	db018 <_ZN8particle5ErrorD1Ev>
   db4ca:	a802      	add	r0, sp, #8
   db4cc:	f7f9 fc57 	bl	d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   db4d0:	b009      	add	sp, #36	; 0x24
   db4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   db4d4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   db4d6:	2301      	movs	r3, #1
   db4d8:	e8d5 2f4f 	ldrexb	r2, [r5]
   db4dc:	2a00      	cmp	r2, #0
   db4de:	d103      	bne.n	db4e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   db4e0:	e8c5 3f41 	strexb	r1, r3, [r5]
   db4e4:	2900      	cmp	r1, #0
   db4e6:	d1f7      	bne.n	db4d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   db4e8:	d1ef      	bne.n	db4ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   db4ea:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   db4ec:	f3bf 8f5b 	dmb	ish
   db4f0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   db4f2:	1d2b      	adds	r3, r5, #4
   db4f4:	f3bf 8f5b 	dmb	ish
   db4f8:	e853 6f00 	ldrex	r6, [r3]
   db4fc:	e843 4200 	strex	r2, r4, [r3]
   db500:	2a00      	cmp	r2, #0
   db502:	d1f9      	bne.n	db4f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   db504:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   db508:	2e00      	cmp	r6, #0
   db50a:	d0de      	beq.n	db4ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   db50c:	4620      	mov	r0, r4
   db50e:	f7ff fa8b 	bl	daa28 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   db512:	4607      	mov	r7, r0
   db514:	b160      	cbz	r0, db530 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   db516:	f105 010c 	add.w	r1, r5, #12
   db51a:	4630      	mov	r0, r6
   db51c:	f7ff fe16 	bl	db14c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   db520:	4630      	mov	r0, r6
   db522:	f7fa fea7 	bl	d6274 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   db526:	2110      	movs	r1, #16
   db528:	4630      	mov	r0, r6
   db52a:	f002 fce1 	bl	ddef0 <_ZdlPvj>
   db52e:	e7cc      	b.n	db4ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   db530:	4631      	mov	r1, r6
   db532:	a803      	add	r0, sp, #12
   db534:	f7ff ff7c 	bl	db430 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   db538:	7b2b      	ldrb	r3, [r5, #12]
   db53a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   db53e:	2010      	movs	r0, #16
   db540:	f7f8 fda9 	bl	d4096 <_Znwj>
   db544:	4605      	mov	r5, r0
   db546:	b1d0      	cbz	r0, db57e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   db548:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db54a:	2014      	movs	r0, #20
   db54c:	f7f8 fda3 	bl	d4096 <_Znwj>
   db550:	4604      	mov	r4, r0
   db552:	b178      	cbz	r0, db574 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   db554:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   db556:	4601      	mov	r1, r0
   db558:	a803      	add	r0, sp, #12
   db55a:	f7fa ff8a 	bl	d6472 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db55e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   db560:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   db562:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db564:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   db566:	9205      	str	r2, [sp, #20]
   db568:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   db56a:	60e3      	str	r3, [r4, #12]
   db56c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   db570:	9206      	str	r2, [sp, #24]
   db572:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   db574:	4b06      	ldr	r3, [pc, #24]	; (db590 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   db576:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   db578:	4b06      	ldr	r3, [pc, #24]	; (db594 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db57a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   db57c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   db57e:	a803      	add	r0, sp, #12
   db580:	f7fa fe78 	bl	d6274 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   db584:	2200      	movs	r2, #0
   db586:	4629      	mov	r1, r5
   db588:	4803      	ldr	r0, [pc, #12]	; (db598 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   db58a:	f7ff fa55 	bl	daa38 <application_thread_invoke>
   db58e:	e7c7      	b.n	db520 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   db590:	000db15f 	.word	0x000db15f
   db594:	000db44f 	.word	0x000db44f
   db598:	000dad2f 	.word	0x000dad2f

000db59c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   db59c:	2200      	movs	r2, #0
   db59e:	6840      	ldr	r0, [r0, #4]
   db5a0:	4611      	mov	r1, r2
   db5a2:	f7ff bb21 	b.w	dabe8 <network_listening>

000db5a6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   db5a6:	2200      	movs	r2, #0
   db5a8:	6840      	ldr	r0, [r0, #4]
   db5aa:	4611      	mov	r1, r2
   db5ac:	f7ff bb2c 	b.w	dac08 <network_get_listen_timeout>

000db5b0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   db5b0:	6840      	ldr	r0, [r0, #4]
   db5b2:	2200      	movs	r2, #0
   db5b4:	f7ff bb20 	b.w	dabf8 <network_set_listen_timeout>

000db5b8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   db5b8:	6840      	ldr	r0, [r0, #4]
   db5ba:	2200      	movs	r2, #0
   db5bc:	f081 0101 	eor.w	r1, r1, #1
   db5c0:	f7ff bb0a 	b.w	dabd8 <network_listen>

000db5c4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   db5c4:	2300      	movs	r3, #0
   db5c6:	6840      	ldr	r0, [r0, #4]
   db5c8:	461a      	mov	r2, r3
   db5ca:	4619      	mov	r1, r3
   db5cc:	f7ff bafc 	b.w	dabc8 <network_off>

000db5d0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   db5d0:	2300      	movs	r3, #0
   db5d2:	6840      	ldr	r0, [r0, #4]
   db5d4:	461a      	mov	r2, r3
   db5d6:	4619      	mov	r1, r3
   db5d8:	f7ff baee 	b.w	dabb8 <network_on>

000db5dc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   db5dc:	2200      	movs	r2, #0
   db5de:	6840      	ldr	r0, [r0, #4]
   db5e0:	4611      	mov	r1, r2
   db5e2:	f7ff bae1 	b.w	daba8 <network_ready>

000db5e6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   db5e6:	2200      	movs	r2, #0
   db5e8:	6840      	ldr	r0, [r0, #4]
   db5ea:	4611      	mov	r1, r2
   db5ec:	f7ff bacc 	b.w	dab88 <network_connecting>

000db5f0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db5f0:	6840      	ldr	r0, [r0, #4]
   db5f2:	2200      	movs	r2, #0
   db5f4:	2102      	movs	r1, #2
   db5f6:	f7ff bacf 	b.w	dab98 <network_disconnect>

000db5fa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   db5fa:	2300      	movs	r3, #0
   db5fc:	6840      	ldr	r0, [r0, #4]
   db5fe:	461a      	mov	r2, r3
   db600:	f7ff baba 	b.w	dab78 <network_connect>

000db604 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   db604:	4b02      	ldr	r3, [pc, #8]	; (db610 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   db606:	2203      	movs	r2, #3
   db608:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   db60a:	4a02      	ldr	r2, [pc, #8]	; (db614 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   db60c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   db60e:	4770      	bx	lr
   db610:	2003e4cc 	.word	0x2003e4cc
   db614:	000dff04 	.word	0x000dff04

000db618 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   db618:	6800      	ldr	r0, [r0, #0]
   db61a:	f000 b951 	b.w	db8c0 <_ZN7TwoWire4lockEv>

000db61e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   db61e:	b510      	push	{r4, lr}
   db620:	4604      	mov	r4, r0
      lock_(_lock) {
   db622:	6001      	str	r1, [r0, #0]
   db624:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   db626:	b10a      	cbz	r2, db62c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   db628:	f7ff fff6 	bl	db618 <_ZN9FuelGauge4lockEv>
}
   db62c:	4620      	mov	r0, r4
   db62e:	bd10      	pop	{r4, pc}

000db630 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   db630:	b513      	push	{r0, r1, r4, lr}
   db632:	4604      	mov	r4, r0
   db634:	9101      	str	r1, [sp, #4]
            return &Wire1;
   db636:	f002 fc37 	bl	ddea8 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   db63a:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   db63c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   db63e:	4620      	mov	r0, r4
   db640:	f7ff ffed 	bl	db61e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   db644:	4620      	mov	r0, r4
   db646:	b002      	add	sp, #8
   db648:	bd10      	pop	{r4, pc}

000db64a <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   db64a:	6800      	ldr	r0, [r0, #0]
   db64c:	f000 b941 	b.w	db8d2 <_ZN7TwoWire6unlockEv>

000db650 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   db650:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   db654:	4604      	mov	r4, r0
   db656:	460d      	mov	r5, r1
   db658:	4617      	mov	r7, r2
   db65a:	461e      	mov	r6, r3
      { _M_device.lock(); }
   db65c:	f7ff ffdc 	bl	db618 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db660:	2336      	movs	r3, #54	; 0x36
   db662:	f88d 3000 	strb.w	r3, [sp]
   db666:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   db668:	6820      	ldr	r0, [r4, #0]
   db66a:	9301      	str	r3, [sp, #4]
   db66c:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   db670:	230a      	movs	r3, #10
   db672:	4669      	mov	r1, sp
   db674:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db676:	f88d 8008 	strb.w	r8, [sp, #8]
   db67a:	f000 f905 	bl	db888 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   db67e:	6820      	ldr	r0, [r4, #0]
   db680:	6803      	ldr	r3, [r0, #0]
   db682:	4629      	mov	r1, r5
   db684:	689b      	ldr	r3, [r3, #8]
   db686:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   db688:	6820      	ldr	r0, [r4, #0]
   db68a:	4641      	mov	r1, r8
   db68c:	f000 f914 	bl	db8b8 <_ZN7TwoWire15endTransmissionEh>
   db690:	4605      	mov	r5, r0
   db692:	b140      	cbz	r0, db6a6 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   db694:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   db698:	4620      	mov	r0, r4
   db69a:	f7ff ffd6 	bl	db64a <_ZN9FuelGauge6unlockEv>
}
   db69e:	4628      	mov	r0, r5
   db6a0:	b004      	add	sp, #16
   db6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   db6a6:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   db6a8:	6820      	ldr	r0, [r4, #0]
   db6aa:	9301      	str	r3, [sp, #4]
   db6ac:	4669      	mov	r1, sp
   db6ae:	f000 f8bb 	bl	db828 <_ZN7TwoWire11requestFromERK16WireTransmission>
   db6b2:	2802      	cmp	r0, #2
   db6b4:	d1ee      	bne.n	db694 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   db6b6:	6820      	ldr	r0, [r4, #0]
   db6b8:	6803      	ldr	r3, [r0, #0]
   db6ba:	695b      	ldr	r3, [r3, #20]
   db6bc:	4798      	blx	r3
   db6be:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   db6c0:	6820      	ldr	r0, [r4, #0]
   db6c2:	6803      	ldr	r3, [r0, #0]
   db6c4:	695b      	ldr	r3, [r3, #20]
   db6c6:	4798      	blx	r3
   db6c8:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   db6ca:	e7e5      	b.n	db698 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000db6cc <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   db6cc:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   db6ce:	2300      	movs	r3, #0
   db6d0:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   db6d4:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   db6d8:	f10d 0206 	add.w	r2, sp, #6
   db6dc:	f10d 0307 	add.w	r3, sp, #7
   db6e0:	2104      	movs	r1, #4
   db6e2:	f7ff ffb5 	bl	db650 <_ZN9FuelGauge12readRegisterEhRhS0_>
   db6e6:	b9b0      	cbnz	r0, db716 <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   db6e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   db6ec:	f002 fd62 	bl	de1b4 <__aeabi_i2d>
   db6f0:	4b0a      	ldr	r3, [pc, #40]	; (db71c <_ZN9FuelGauge6getSoCEv+0x50>)
   db6f2:	2200      	movs	r2, #0
   db6f4:	f002 fdc8 	bl	de288 <__aeabi_dmul>
   db6f8:	f002 fff8 	bl	de6ec <__aeabi_d2f>
        return MSB + decimal;
   db6fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
   db700:	ee00 3a10 	vmov	s0, r3
   db704:	ee07 0a90 	vmov	s15, r0
   db708:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   db70c:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   db710:	b003      	add	sp, #12
   db712:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   db716:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   db71a:	e7f9      	b.n	db710 <_ZN9FuelGauge6getSoCEv+0x44>
   db71c:	3f700000 	.word	0x3f700000

000db720 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   db720:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   db724:	4616      	mov	r6, r2
   db726:	4604      	mov	r4, r0
   db728:	461d      	mov	r5, r3
   db72a:	460f      	mov	r7, r1
      { _M_device.lock(); }
   db72c:	f7ff ff74 	bl	db618 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db730:	2336      	movs	r3, #54	; 0x36
   db732:	f88d 3000 	strb.w	r3, [sp]
   db736:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   db738:	6820      	ldr	r0, [r4, #0]
   db73a:	9301      	str	r3, [sp, #4]
   db73c:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   db740:	230a      	movs	r3, #10
   db742:	4669      	mov	r1, sp
   db744:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db746:	f88d 8008 	strb.w	r8, [sp, #8]
   db74a:	f000 f89d 	bl	db888 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   db74e:	6820      	ldr	r0, [r4, #0]
   db750:	6803      	ldr	r3, [r0, #0]
   db752:	4639      	mov	r1, r7
   db754:	689b      	ldr	r3, [r3, #8]
   db756:	4798      	blx	r3
    i2c_.write(MSB);
   db758:	6820      	ldr	r0, [r4, #0]
   db75a:	6803      	ldr	r3, [r0, #0]
   db75c:	4631      	mov	r1, r6
   db75e:	689b      	ldr	r3, [r3, #8]
   db760:	4798      	blx	r3
    i2c_.write(LSB);
   db762:	6820      	ldr	r0, [r4, #0]
   db764:	6803      	ldr	r3, [r0, #0]
   db766:	4629      	mov	r1, r5
   db768:	689b      	ldr	r3, [r3, #8]
   db76a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   db76c:	4641      	mov	r1, r8
   db76e:	6820      	ldr	r0, [r4, #0]
   db770:	f000 f8a2 	bl	db8b8 <_ZN7TwoWire15endTransmissionEh>
   db774:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   db776:	4620      	mov	r0, r4
   db778:	bf0c      	ite	eq
   db77a:	2500      	moveq	r5, #0
   db77c:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   db780:	f7ff ff63 	bl	db64a <_ZN9FuelGauge6unlockEv>
}
   db784:	4628      	mov	r0, r5
   db786:	b004      	add	sp, #16
   db788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db78c <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   db78c:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   db78e:	2240      	movs	r2, #64	; 0x40
   db790:	2300      	movs	r3, #0
   db792:	2106      	movs	r1, #6
   db794:	f7ff ffc4 	bl	db720 <_ZN9FuelGauge13writeRegisterEhhh>
}
   db798:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   db79c:	bd08      	pop	{r3, pc}

000db79e <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   db79e:	4770      	bx	lr

000db7a0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   db7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db7a2:	4606      	mov	r6, r0
   db7a4:	4615      	mov	r5, r2
   db7a6:	460c      	mov	r4, r1
   db7a8:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   db7aa:	42bc      	cmp	r4, r7
   db7ac:	d006      	beq.n	db7bc <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   db7ae:	6833      	ldr	r3, [r6, #0]
   db7b0:	f814 1b01 	ldrb.w	r1, [r4], #1
   db7b4:	689b      	ldr	r3, [r3, #8]
   db7b6:	4630      	mov	r0, r6
   db7b8:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   db7ba:	e7f6      	b.n	db7aa <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   db7bc:	4628      	mov	r0, r5
   db7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db7c0 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   db7c0:	7c00      	ldrb	r0, [r0, #16]
   db7c2:	2200      	movs	r2, #0
   db7c4:	f7fe bf36 	b.w	da634 <hal_i2c_write>

000db7c8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   db7c8:	7c00      	ldrb	r0, [r0, #16]
   db7ca:	2100      	movs	r1, #0
   db7cc:	f7fe bf3a 	b.w	da644 <hal_i2c_available>

000db7d0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   db7d0:	7c00      	ldrb	r0, [r0, #16]
   db7d2:	2100      	movs	r1, #0
   db7d4:	f7fe bf3e 	b.w	da654 <hal_i2c_read>

000db7d8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   db7d8:	7c00      	ldrb	r0, [r0, #16]
   db7da:	2100      	movs	r1, #0
   db7dc:	f7fe bf42 	b.w	da664 <hal_i2c_peek>

000db7e0 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   db7e0:	7c00      	ldrb	r0, [r0, #16]
   db7e2:	2100      	movs	r1, #0
   db7e4:	f7fe bf46 	b.w	da674 <hal_i2c_flush>

000db7e8 <_ZN7TwoWireD0Ev>:
   db7e8:	b510      	push	{r4, lr}
   db7ea:	2114      	movs	r1, #20
   db7ec:	4604      	mov	r4, r0
   db7ee:	f002 fb7f 	bl	ddef0 <_ZdlPvj>
   db7f2:	4620      	mov	r0, r4
   db7f4:	bd10      	pop	{r4, pc}
	...

000db7f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   db7f8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   db7fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db7fe:	4604      	mov	r4, r0
   db800:	4608      	mov	r0, r1
   db802:	2100      	movs	r1, #0
   db804:	e9c4 1301 	strd	r1, r3, [r4, #4]
   db808:	4b03      	ldr	r3, [pc, #12]	; (db818 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   db80a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   db80c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   db80e:	4611      	mov	r1, r2
   db810:	f7fe ff40 	bl	da694 <hal_i2c_init>
}
   db814:	4620      	mov	r0, r4
   db816:	bd10      	pop	{r4, pc}
   db818:	000dff40 	.word	0x000dff40

000db81c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   db81c:	2300      	movs	r3, #0
   db81e:	7c00      	ldrb	r0, [r0, #16]
   db820:	461a      	mov	r2, r3
   db822:	4619      	mov	r1, r3
   db824:	f7fe beee 	b.w	da604 <hal_i2c_begin>

000db828 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   db828:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   db82a:	2200      	movs	r2, #0
   db82c:	2314      	movs	r3, #20
   db82e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   db832:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   db836:	780b      	ldrb	r3, [r1, #0]
   db838:	f88d 3008 	strb.w	r3, [sp, #8]
   db83c:	684b      	ldr	r3, [r1, #4]
   db83e:	9303      	str	r3, [sp, #12]
   db840:	68cb      	ldr	r3, [r1, #12]
   db842:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   db844:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   db846:	7a0b      	ldrb	r3, [r1, #8]
   db848:	9305      	str	r3, [sp, #20]
   db84a:	a901      	add	r1, sp, #4
   db84c:	f7fe ff3a 	bl	da6c4 <hal_i2c_request_ex>
}
   db850:	b007      	add	sp, #28
   db852:	f85d fb04 	ldr.w	pc, [sp], #4

000db856 <_ZN7TwoWire11requestFromEhjh>:
{
   db856:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   db858:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db85a:	f88d 1000 	strb.w	r1, [sp]
   db85e:	f04f 0164 	mov.w	r1, #100	; 0x64
   db862:	9103      	str	r1, [sp, #12]
   db864:	bf18      	it	ne
   db866:	2301      	movne	r3, #1
   db868:	4669      	mov	r1, sp
    size_ = size;
   db86a:	9201      	str	r2, [sp, #4]
   db86c:	f88d 3008 	strb.w	r3, [sp, #8]
   db870:	f7ff ffda 	bl	db828 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   db874:	b005      	add	sp, #20
   db876:	f85d fb04 	ldr.w	pc, [sp], #4

000db87a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   db87a:	7c00      	ldrb	r0, [r0, #16]
   db87c:	2200      	movs	r2, #0
   db87e:	f7fe bec9 	b.w	da614 <hal_i2c_begin_transmission>

000db882 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   db882:	b2c9      	uxtb	r1, r1
   db884:	f7ff bff9 	b.w	db87a <_ZN7TwoWire17beginTransmissionEh>

000db888 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   db888:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   db88a:	2300      	movs	r3, #0
   db88c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   db890:	684a      	ldr	r2, [r1, #4]
   db892:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   db894:	2314      	movs	r3, #20
    };
   db896:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   db898:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   db89c:	780b      	ldrb	r3, [r1, #0]
    };
   db89e:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   db8a0:	7a0a      	ldrb	r2, [r1, #8]
   db8a2:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   db8a4:	7c00      	ldrb	r0, [r0, #16]
    };
   db8a6:	f88d 3008 	strb.w	r3, [sp, #8]
   db8aa:	aa01      	add	r2, sp, #4
   db8ac:	4619      	mov	r1, r3
   db8ae:	f7fe feb1 	bl	da614 <hal_i2c_begin_transmission>
}
   db8b2:	b007      	add	sp, #28
   db8b4:	f85d fb04 	ldr.w	pc, [sp], #4

000db8b8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   db8b8:	7c00      	ldrb	r0, [r0, #16]
   db8ba:	2200      	movs	r2, #0
   db8bc:	f7fe beb2 	b.w	da624 <hal_i2c_end_transmission>

000db8c0 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   db8c0:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   db8c2:	2100      	movs	r1, #0
   db8c4:	7c00      	ldrb	r0, [r0, #16]
   db8c6:	f7fe feed 	bl	da6a4 <hal_i2c_lock>
}
   db8ca:	fab0 f080 	clz	r0, r0
   db8ce:	0940      	lsrs	r0, r0, #5
   db8d0:	bd08      	pop	{r3, pc}

000db8d2 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   db8d2:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   db8d4:	2100      	movs	r1, #0
   db8d6:	7c00      	ldrb	r0, [r0, #16]
   db8d8:	f7fe feec 	bl	da6b4 <hal_i2c_unlock>
}
   db8dc:	fab0 f080 	clz	r0, r0
   db8e0:	0940      	lsrs	r0, r0, #5
   db8e2:	bd08      	pop	{r3, pc}

000db8e4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   db8e4:	4700      	bx	r0
	...

000db8e8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   db8e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   db8ec:	2400      	movs	r4, #0
{
   db8ee:	461d      	mov	r5, r3
   db8f0:	460f      	mov	r7, r1
   db8f2:	4690      	mov	r8, r2
   db8f4:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   db8f6:	f7fe fe75 	bl	da5e4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   db8fa:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   db8fc:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   db900:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   db904:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   db908:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   db90c:	bfa2      	ittt	ge
   db90e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   db912:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   db916:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   db918:	4907      	ldr	r1, [pc, #28]	; (db938 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   db91a:	9400      	str	r4, [sp, #0]
   db91c:	4643      	mov	r3, r8
   db91e:	463a      	mov	r2, r7
   db920:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   db922:	bfa8      	it	ge
   db924:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   db928:	f7fe fe54 	bl	da5d4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   db92c:	fab0 f080 	clz	r0, r0
   db930:	0940      	lsrs	r0, r0, #5
   db932:	b004      	add	sp, #16
   db934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db938:	000db8e5 	.word	0x000db8e5

000db93c <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   db93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db93e:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   db940:	f7fe fe50 	bl	da5e4 <HAL_Interrupts_Detach>
   db944:	4605      	mov	r5, r0
   db946:	b970      	cbnz	r0, db966 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   db948:	4f08      	ldr	r7, [pc, #32]	; (db96c <_Z15detachInterruptt+0x30>)
   db94a:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   db94e:	b146      	cbz	r6, db962 <_Z15detachInterruptt+0x26>
   db950:	4630      	mov	r0, r6
   db952:	f7fa fc8f 	bl	d6274 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   db956:	2110      	movs	r1, #16
   db958:	4630      	mov	r0, r6
   db95a:	f002 fac9 	bl	ddef0 <_ZdlPvj>
        handlers[pin] = nullptr;
   db95e:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   db962:	2001      	movs	r0, #1
   db964:	e000      	b.n	db968 <_Z15detachInterruptt+0x2c>
        return false;
   db966:	2000      	movs	r0, #0
    }
    return true;
}
   db968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   db96a:	bf00      	nop
   db96c:	2003e4d4 	.word	0x2003e4d4

000db970 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   db970:	4770      	bx	lr

000db972 <_ZN9IPAddressD0Ev>:
   db972:	b510      	push	{r4, lr}
   db974:	2118      	movs	r1, #24
   db976:	4604      	mov	r4, r0
   db978:	f002 faba 	bl	ddef0 <_ZdlPvj>
   db97c:	4620      	mov	r0, r4
   db97e:	bd10      	pop	{r4, pc}

000db980 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   db980:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   db982:	7d03      	ldrb	r3, [r0, #20]
   db984:	2b06      	cmp	r3, #6
{
   db986:	b08d      	sub	sp, #52	; 0x34
   db988:	460e      	mov	r6, r1
   db98a:	f100 0704 	add.w	r7, r0, #4
   db98e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   db992:	d012      	beq.n	db9ba <_ZNK9IPAddress7printToER5Print+0x3a>
   db994:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   db998:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   db99c:	220a      	movs	r2, #10
   db99e:	4630      	mov	r0, r6
   db9a0:	f001 fb52 	bl	dd048 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   db9a4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   db9a6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   db9a8:	d019      	beq.n	db9de <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   db9aa:	2c00      	cmp	r4, #0
   db9ac:	d0f4      	beq.n	db998 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   db9ae:	212e      	movs	r1, #46	; 0x2e
   db9b0:	4630      	mov	r0, r6
   db9b2:	f001 fb3a 	bl	dd02a <_ZN5Print5printEc>
   db9b6:	4404      	add	r4, r0
   db9b8:	e7ee      	b.n	db998 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   db9ba:	232f      	movs	r3, #47	; 0x2f
   db9bc:	466a      	mov	r2, sp
   db9be:	4639      	mov	r1, r7
   db9c0:	200a      	movs	r0, #10
		buf[0] = 0;
   db9c2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   db9c6:	f7fe fe85 	bl	da6d4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   db9ca:	4668      	mov	r0, sp
   db9cc:	f002 ffeb 	bl	de9a6 <strlen>
   db9d0:	6833      	ldr	r3, [r6, #0]
   db9d2:	4602      	mov	r2, r0
   db9d4:	68db      	ldr	r3, [r3, #12]
   db9d6:	4669      	mov	r1, sp
   db9d8:	4630      	mov	r0, r6
   db9da:	4798      	blx	r3
   db9dc:	4604      	mov	r4, r0
    }
    return n;
}
   db9de:	4620      	mov	r0, r4
   db9e0:	b00d      	add	sp, #52	; 0x34
   db9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000db9e4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   db9e4:	b510      	push	{r4, lr}
   db9e6:	4b05      	ldr	r3, [pc, #20]	; (db9fc <_ZN9IPAddressC1Ev+0x18>)
   db9e8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   db9ea:	2211      	movs	r2, #17
   db9ec:	f840 3b04 	str.w	r3, [r0], #4
   db9f0:	2100      	movs	r1, #0
   db9f2:	f002 ff31 	bl	de858 <memset>
}
   db9f6:	4620      	mov	r0, r4
   db9f8:	bd10      	pop	{r4, pc}
   db9fa:	bf00      	nop
   db9fc:	000dff68 	.word	0x000dff68

000dba00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   dba00:	4603      	mov	r3, r0
   dba02:	4a07      	ldr	r2, [pc, #28]	; (dba20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   dba04:	b510      	push	{r4, lr}
   dba06:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   dba0a:	f101 0210 	add.w	r2, r1, #16
   dba0e:	f851 4b04 	ldr.w	r4, [r1], #4
   dba12:	f843 4b04 	str.w	r4, [r3], #4
   dba16:	4291      	cmp	r1, r2
   dba18:	d1f9      	bne.n	dba0e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dba1a:	780a      	ldrb	r2, [r1, #0]
   dba1c:	701a      	strb	r2, [r3, #0]
}
   dba1e:	bd10      	pop	{r4, pc}
   dba20:	000dff68 	.word	0x000dff68

000dba24 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   dba24:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dba26:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dba2a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dba2e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dba32:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   dba36:	2304      	movs	r3, #4
   dba38:	6041      	str	r1, [r0, #4]
   dba3a:	7503      	strb	r3, [r0, #20]
}
   dba3c:	bd10      	pop	{r4, pc}

000dba3e <_ZN9IPAddressaSEPKh>:
{
   dba3e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   dba40:	78cb      	ldrb	r3, [r1, #3]
   dba42:	9300      	str	r3, [sp, #0]
   dba44:	788b      	ldrb	r3, [r1, #2]
   dba46:	784a      	ldrb	r2, [r1, #1]
   dba48:	7809      	ldrb	r1, [r1, #0]
   dba4a:	f7ff ffeb 	bl	dba24 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   dba4e:	b002      	add	sp, #8
   dba50:	bd10      	pop	{r4, pc}

000dba52 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   dba52:	f100 0310 	add.w	r3, r0, #16
   dba56:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   dba58:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   dba5c:	2901      	cmp	r1, #1
   dba5e:	4618      	mov	r0, r3
   dba60:	d108      	bne.n	dba74 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   dba62:	f853 1c04 	ldr.w	r1, [r3, #-4]
   dba66:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   dba6a:	3a01      	subs	r2, #1
   dba6c:	f103 0310 	add.w	r3, r3, #16
   dba70:	d1f2      	bne.n	dba58 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   dba72:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   dba74:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   dba76:	bf04      	itt	eq
   dba78:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   dba7c:	1852      	addeq	r2, r2, r1
   dba7e:	e7f4      	b.n	dba6a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000dba80 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   dba80:	b40e      	push	{r1, r2, r3}
   dba82:	b5f0      	push	{r4, r5, r6, r7, lr}
   dba84:	b088      	sub	sp, #32
   dba86:	af00      	add	r7, sp, #0
   dba88:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dba8c:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   dba8e:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dba92:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   dba94:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dba96:	462b      	mov	r3, r5
   dba98:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   dba9a:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dba9c:	f7ff f8fc 	bl	dac98 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   dbaa0:	280f      	cmp	r0, #15
   dbaa2:	687a      	ldr	r2, [r7, #4]
   dbaa4:	d91a      	bls.n	dbadc <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   dbaa6:	f100 0308 	add.w	r3, r0, #8
   dbaaa:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   dbaae:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   dbab0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   dbab4:	1c41      	adds	r1, r0, #1
   dbab6:	462b      	mov	r3, r5
   dbab8:	4668      	mov	r0, sp
        va_start(args, fmt);
   dbaba:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   dbabc:	f7ff f8ec 	bl	dac98 <vsnprintf>
        if (n > 0) {
   dbac0:	1e02      	subs	r2, r0, #0
   dbac2:	dd04      	ble.n	dbace <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   dbac4:	6823      	ldr	r3, [r4, #0]
   dbac6:	4669      	mov	r1, sp
   dbac8:	689b      	ldr	r3, [r3, #8]
   dbaca:	4620      	mov	r0, r4
   dbacc:	4798      	blx	r3
   dbace:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   dbad0:	3720      	adds	r7, #32
   dbad2:	46bd      	mov	sp, r7
   dbad4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   dbad8:	b003      	add	sp, #12
   dbada:	4770      	bx	lr
    } else if (n > 0) {
   dbadc:	2800      	cmp	r0, #0
   dbade:	d0f7      	beq.n	dbad0 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   dbae0:	6823      	ldr	r3, [r4, #0]
   dbae2:	4602      	mov	r2, r0
   dbae4:	689b      	ldr	r3, [r3, #8]
   dbae6:	f107 0110 	add.w	r1, r7, #16
   dbaea:	4620      	mov	r0, r4
   dbaec:	4798      	blx	r3
}
   dbaee:	e7ef      	b.n	dbad0 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000dbaf0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dbaf0:	b510      	push	{r4, lr}
          _M_dispose();
   dbaf2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dbaf4:	4604      	mov	r4, r0
          _M_dispose();
   dbaf6:	689b      	ldr	r3, [r3, #8]
   dbaf8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   dbafa:	68a3      	ldr	r3, [r4, #8]
   dbafc:	3b01      	subs	r3, #1
   dbafe:	60a3      	str	r3, [r4, #8]
   dbb00:	b92b      	cbnz	r3, dbb0e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   dbb02:	6823      	ldr	r3, [r4, #0]
   dbb04:	4620      	mov	r0, r4
   dbb06:	68db      	ldr	r3, [r3, #12]
    }
   dbb08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   dbb0c:	4718      	bx	r3
    }
   dbb0e:	bd10      	pop	{r4, pc}

000dbb10 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   dbb10:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   dbb12:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   dbb14:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   dbb18:	689b      	ldr	r3, [r3, #8]
   dbb1a:	2201      	movs	r2, #1
   dbb1c:	f10d 0107 	add.w	r1, sp, #7
   dbb20:	4798      	blx	r3
}
   dbb22:	b003      	add	sp, #12
   dbb24:	f85d fb04 	ldr.w	pc, [sp], #4

000dbb28 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   dbb28:	b538      	push	{r3, r4, r5, lr}
   dbb2a:	680b      	ldr	r3, [r1, #0]
   dbb2c:	6003      	str	r3, [r0, #0]
   dbb2e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   dbb30:	6843      	ldr	r3, [r0, #4]
   dbb32:	429d      	cmp	r5, r3
    class __shared_ptr
   dbb34:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   dbb36:	d00c      	beq.n	dbb52 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   dbb38:	b115      	cbz	r5, dbb40 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   dbb3a:	686b      	ldr	r3, [r5, #4]
   dbb3c:	3301      	adds	r3, #1
   dbb3e:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   dbb40:	6860      	ldr	r0, [r4, #4]
   dbb42:	b128      	cbz	r0, dbb50 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   dbb44:	6843      	ldr	r3, [r0, #4]
   dbb46:	3b01      	subs	r3, #1
   dbb48:	6043      	str	r3, [r0, #4]
   dbb4a:	b90b      	cbnz	r3, dbb50 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   dbb4c:	f7ff ffd0 	bl	dbaf0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   dbb50:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   dbb52:	4620      	mov	r0, r4
   dbb54:	bd38      	pop	{r3, r4, r5, pc}

000dbb56 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   dbb56:	460b      	mov	r3, r1
   dbb58:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   dbb5a:	2200      	movs	r2, #0
   dbb5c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   dbb5e:	e9c0 2200 	strd	r2, r2, [r0]
   dbb62:	4604      	mov	r4, r0
        t_ = t;
   dbb64:	6083      	str	r3, [r0, #8]
    if (t) {
   dbb66:	b90b      	cbnz	r3, dbb6c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   dbb68:	4620      	mov	r0, r4
   dbb6a:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   dbb6c:	f7ff ffdc 	bl	dbb28 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   dbb70:	e7fa      	b.n	dbb68 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000dbb72 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   dbb72:	6883      	ldr	r3, [r0, #8]
   dbb74:	b1eb      	cbz	r3, dbbb2 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   dbb76:	781a      	ldrb	r2, [r3, #0]
   dbb78:	2a03      	cmp	r2, #3
   dbb7a:	d81a      	bhi.n	dbbb2 <_ZNK5spark9JSONValue4typeEv+0x40>
   dbb7c:	e8df f002 	tbb	[pc, r2]
   dbb80:	1b021704 	.word	0x1b021704
   dbb84:	2005      	movs	r0, #5
   dbb86:	4770      	bx	lr
        const char c = d_->json[t_->start];
   dbb88:	6802      	ldr	r2, [r0, #0]
   dbb8a:	685b      	ldr	r3, [r3, #4]
   dbb8c:	6852      	ldr	r2, [r2, #4]
   dbb8e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   dbb90:	282d      	cmp	r0, #45	; 0x2d
   dbb92:	d012      	beq.n	dbbba <_ZNK5spark9JSONValue4typeEv+0x48>
   dbb94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dbb98:	2b09      	cmp	r3, #9
   dbb9a:	d90e      	bls.n	dbbba <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   dbb9c:	2874      	cmp	r0, #116	; 0x74
   dbb9e:	d00e      	beq.n	dbbbe <_ZNK5spark9JSONValue4typeEv+0x4c>
   dbba0:	2866      	cmp	r0, #102	; 0x66
   dbba2:	d00c      	beq.n	dbbbe <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   dbba4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   dbba8:	4258      	negs	r0, r3
   dbbaa:	4158      	adcs	r0, r3
   dbbac:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   dbbae:	2006      	movs	r0, #6
   dbbb0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   dbbb2:	2000      	movs	r0, #0
   dbbb4:	4770      	bx	lr
        return JSON_TYPE_STRING;
   dbbb6:	2004      	movs	r0, #4
   dbbb8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   dbbba:	2003      	movs	r0, #3
   dbbbc:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   dbbbe:	2002      	movs	r0, #2
}
   dbbc0:	4770      	bx	lr

000dbbc2 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   dbbc2:	b510      	push	{r4, lr}
   dbbc4:	4604      	mov	r4, r0
    switch (type()) {
   dbbc6:	f7ff ffd4 	bl	dbb72 <_ZNK5spark9JSONValue4typeEv>
   dbbca:	2802      	cmp	r0, #2
   dbbcc:	d00e      	beq.n	dbbec <_ZNK5spark9JSONValue5toIntEv+0x2a>
   dbbce:	1ec3      	subs	r3, r0, #3
   dbbd0:	b2db      	uxtb	r3, r3
   dbbd2:	2b01      	cmp	r3, #1
   dbbd4:	d814      	bhi.n	dbc00 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   dbbd6:	6822      	ldr	r2, [r4, #0]
   dbbd8:	68a3      	ldr	r3, [r4, #8]
   dbbda:	6850      	ldr	r0, [r2, #4]
   dbbdc:	685b      	ldr	r3, [r3, #4]
}
   dbbde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   dbbe2:	220a      	movs	r2, #10
   dbbe4:	2100      	movs	r1, #0
   dbbe6:	4418      	add	r0, r3
   dbbe8:	f002 bfc4 	b.w	deb74 <strtol>
        const char* const s = d_->json + t_->start;
   dbbec:	6822      	ldr	r2, [r4, #0]
   dbbee:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   dbbf0:	6852      	ldr	r2, [r2, #4]
   dbbf2:	685b      	ldr	r3, [r3, #4]
   dbbf4:	5cd0      	ldrb	r0, [r2, r3]
   dbbf6:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   dbbfa:	4258      	negs	r0, r3
   dbbfc:	4158      	adcs	r0, r3
}
   dbbfe:	bd10      	pop	{r4, pc}
    switch (type()) {
   dbc00:	2000      	movs	r0, #0
   dbc02:	e7fc      	b.n	dbbfe <_ZNK5spark9JSONValue5toIntEv+0x3c>

000dbc04 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   dbc04:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   dbc06:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   dbc08:	e9c0 3300 	strd	r3, r3, [r0]
   dbc0c:	4604      	mov	r4, r0
        n_(0) {
   dbc0e:	480e      	ldr	r0, [pc, #56]	; (dbc48 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   dbc10:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   dbc14:	b1a9      	cbz	r1, dbc42 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   dbc16:	780b      	ldrb	r3, [r1, #0]
   dbc18:	2b03      	cmp	r3, #3
   dbc1a:	d006      	beq.n	dbc2a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   dbc1c:	b98b      	cbnz	r3, dbc42 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   dbc1e:	6813      	ldr	r3, [r2, #0]
   dbc20:	6858      	ldr	r0, [r3, #4]
   dbc22:	684b      	ldr	r3, [r1, #4]
   dbc24:	5cc3      	ldrb	r3, [r0, r3]
   dbc26:	2b6e      	cmp	r3, #110	; 0x6e
   dbc28:	d007      	beq.n	dbc3a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   dbc2a:	6813      	ldr	r3, [r2, #0]
   dbc2c:	684d      	ldr	r5, [r1, #4]
   dbc2e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   dbc30:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   dbc32:	4428      	add	r0, r5
            n_ = t->end - t->start;
   dbc34:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   dbc36:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   dbc38:	60e3      	str	r3, [r4, #12]
   dbc3a:	4611      	mov	r1, r2
   dbc3c:	4620      	mov	r0, r4
   dbc3e:	f7ff ff73 	bl	dbb28 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   dbc42:	4620      	mov	r0, r4
   dbc44:	bd38      	pop	{r3, r4, r5, pc}
   dbc46:	bf00      	nop
   dbc48:	000dffd4 	.word	0x000dffd4

000dbc4c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   dbc4c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   dbc4e:	2500      	movs	r5, #0
   dbc50:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   dbc52:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   dbc56:	e9c0 5502 	strd	r5, r5, [r0, #8]
   dbc5a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   dbc5e:	4604      	mov	r4, r0
   dbc60:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   dbc62:	b14b      	cbz	r3, dbc78 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   dbc64:	781a      	ldrb	r2, [r3, #0]
   dbc66:	2a01      	cmp	r2, #1
   dbc68:	d106      	bne.n	dbc78 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   dbc6a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   dbc6e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   dbc70:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   dbc72:	6143      	str	r3, [r0, #20]
   dbc74:	f7ff ff58 	bl	dbb28 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   dbc78:	4620      	mov	r0, r4
   dbc7a:	bd38      	pop	{r3, r4, r5, pc}

000dbc7c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   dbc7c:	b510      	push	{r4, lr}
    if (!n_) {
   dbc7e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   dbc80:	4604      	mov	r4, r0
    if (!n_) {
   dbc82:	b163      	cbz	r3, dbc9e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   dbc84:	6880      	ldr	r0, [r0, #8]
   dbc86:	60e0      	str	r0, [r4, #12]
    --n_;
   dbc88:	3b01      	subs	r3, #1
    ++t_;
   dbc8a:	3010      	adds	r0, #16
   dbc8c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   dbc8e:	6120      	str	r0, [r4, #16]
    --n_;
   dbc90:	6163      	str	r3, [r4, #20]
    if (n_) {
   dbc92:	b113      	cbz	r3, dbc9a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   dbc94:	f7ff fedd 	bl	dba52 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   dbc98:	60a0      	str	r0, [r4, #8]
    return true;
   dbc9a:	2001      	movs	r0, #1
   dbc9c:	e000      	b.n	dbca0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   dbc9e:	4618      	mov	r0, r3
}
   dbca0:	bd10      	pop	{r4, pc}

000dbca2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   dbca2:	b510      	push	{r4, lr}
    write('}');
   dbca4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   dbca6:	4604      	mov	r4, r0
    write('}');
   dbca8:	f7ff ff32 	bl	dbb10 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   dbcac:	2301      	movs	r3, #1
   dbcae:	7123      	strb	r3, [r4, #4]
}
   dbcb0:	4620      	mov	r0, r4
   dbcb2:	bd10      	pop	{r4, pc}

000dbcb4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   dbcb4:	b508      	push	{r3, lr}
    switch (state_) {
   dbcb6:	7903      	ldrb	r3, [r0, #4]
   dbcb8:	2b01      	cmp	r3, #1
   dbcba:	d002      	beq.n	dbcc2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   dbcbc:	2b02      	cmp	r3, #2
   dbcbe:	d004      	beq.n	dbcca <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   dbcc0:	bd08      	pop	{r3, pc}
        write(',');
   dbcc2:	212c      	movs	r1, #44	; 0x2c
        write(':');
   dbcc4:	f7ff ff24 	bl	dbb10 <_ZN5spark10JSONWriter5writeEc>
}
   dbcc8:	e7fa      	b.n	dbcc0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   dbcca:	213a      	movs	r1, #58	; 0x3a
   dbccc:	e7fa      	b.n	dbcc4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000dbcce <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   dbcce:	b510      	push	{r4, lr}
   dbcd0:	4604      	mov	r4, r0
    writeSeparator();
   dbcd2:	f7ff ffef 	bl	dbcb4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   dbcd6:	4620      	mov	r0, r4
   dbcd8:	217b      	movs	r1, #123	; 0x7b
   dbcda:	f7ff ff19 	bl	dbb10 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   dbcde:	2300      	movs	r3, #0
   dbce0:	7123      	strb	r3, [r4, #4]
}
   dbce2:	4620      	mov	r0, r4
   dbce4:	bd10      	pop	{r4, pc}
	...

000dbce8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   dbce8:	b513      	push	{r0, r1, r4, lr}
   dbcea:	4604      	mov	r4, r0
   dbcec:	9101      	str	r1, [sp, #4]
    writeSeparator();
   dbcee:	f7ff ffe1 	bl	dbcb4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   dbcf2:	6823      	ldr	r3, [r4, #0]
   dbcf4:	9a01      	ldr	r2, [sp, #4]
   dbcf6:	68db      	ldr	r3, [r3, #12]
   dbcf8:	4903      	ldr	r1, [pc, #12]	; (dbd08 <_ZN5spark10JSONWriter5valueEi+0x20>)
   dbcfa:	4620      	mov	r0, r4
   dbcfc:	4798      	blx	r3
    state_ = NEXT;
   dbcfe:	2301      	movs	r3, #1
}
   dbd00:	4620      	mov	r0, r4
    state_ = NEXT;
   dbd02:	7123      	strb	r3, [r4, #4]
}
   dbd04:	b002      	add	sp, #8
   dbd06:	bd10      	pop	{r4, pc}
   dbd08:	000df5cb 	.word	0x000df5cb

000dbd0c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   dbd0c:	b513      	push	{r0, r1, r4, lr}
   dbd0e:	4604      	mov	r4, r0
   dbd10:	9101      	str	r1, [sp, #4]
    writeSeparator();
   dbd12:	f7ff ffcf 	bl	dbcb4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   dbd16:	6823      	ldr	r3, [r4, #0]
   dbd18:	9a01      	ldr	r2, [sp, #4]
   dbd1a:	68db      	ldr	r3, [r3, #12]
   dbd1c:	4903      	ldr	r1, [pc, #12]	; (dbd2c <_ZN5spark10JSONWriter5valueEj+0x20>)
   dbd1e:	4620      	mov	r0, r4
   dbd20:	4798      	blx	r3
    state_ = NEXT;
   dbd22:	2301      	movs	r3, #1
}
   dbd24:	4620      	mov	r0, r4
    state_ = NEXT;
   dbd26:	7123      	strb	r3, [r4, #4]
}
   dbd28:	b002      	add	sp, #8
   dbd2a:	bd10      	pop	{r4, pc}
   dbd2c:	000df8ea 	.word	0x000df8ea

000dbd30 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   dbd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dbd34:	460d      	mov	r5, r1
   dbd36:	4617      	mov	r7, r2
    write('"');
   dbd38:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   dbd3a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; dbddc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   dbd3e:	4604      	mov	r4, r0
    const char* const end = str + size;
   dbd40:	442f      	add	r7, r5
    write('"');
   dbd42:	f7ff fee5 	bl	dbb10 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   dbd46:	4629      	mov	r1, r5
    while (s != end) {
   dbd48:	42bd      	cmp	r5, r7
   dbd4a:	462a      	mov	r2, r5
   dbd4c:	d038      	beq.n	dbdc0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   dbd4e:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   dbd52:	2e22      	cmp	r6, #34	; 0x22
   dbd54:	d003      	beq.n	dbd5e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   dbd56:	2e5c      	cmp	r6, #92	; 0x5c
   dbd58:	d001      	beq.n	dbd5e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   dbd5a:	2e1f      	cmp	r6, #31
   dbd5c:	d8f4      	bhi.n	dbd48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   dbd5e:	6823      	ldr	r3, [r4, #0]
   dbd60:	1a52      	subs	r2, r2, r1
   dbd62:	689b      	ldr	r3, [r3, #8]
   dbd64:	4620      	mov	r0, r4
   dbd66:	4798      	blx	r3
            write('\\');
   dbd68:	215c      	movs	r1, #92	; 0x5c
   dbd6a:	4620      	mov	r0, r4
   dbd6c:	f7ff fed0 	bl	dbb10 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   dbd70:	2e0d      	cmp	r6, #13
   dbd72:	d80a      	bhi.n	dbd8a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   dbd74:	2e07      	cmp	r6, #7
   dbd76:	d91c      	bls.n	dbdb2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   dbd78:	f1a6 0308 	sub.w	r3, r6, #8
   dbd7c:	2b05      	cmp	r3, #5
   dbd7e:	d818      	bhi.n	dbdb2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   dbd80:	e8df f003 	tbb	[pc, r3]
   dbd84:	17110f0d 	.word	0x17110f0d
   dbd88:	1513      	.short	0x1513
   dbd8a:	2e22      	cmp	r6, #34	; 0x22
   dbd8c:	d001      	beq.n	dbd92 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   dbd8e:	2e5c      	cmp	r6, #92	; 0x5c
   dbd90:	d10f      	bne.n	dbdb2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   dbd92:	4631      	mov	r1, r6
                write('b');
   dbd94:	4620      	mov	r0, r4
   dbd96:	f7ff febb 	bl	dbb10 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   dbd9a:	4629      	mov	r1, r5
    while (s != end) {
   dbd9c:	e7d4      	b.n	dbd48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   dbd9e:	2162      	movs	r1, #98	; 0x62
   dbda0:	e7f8      	b.n	dbd94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   dbda2:	2174      	movs	r1, #116	; 0x74
   dbda4:	e7f6      	b.n	dbd94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   dbda6:	216e      	movs	r1, #110	; 0x6e
   dbda8:	e7f4      	b.n	dbd94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   dbdaa:	2166      	movs	r1, #102	; 0x66
   dbdac:	e7f2      	b.n	dbd94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   dbdae:	2172      	movs	r1, #114	; 0x72
   dbdb0:	e7f0      	b.n	dbd94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   dbdb2:	6823      	ldr	r3, [r4, #0]
   dbdb4:	4632      	mov	r2, r6
   dbdb6:	68db      	ldr	r3, [r3, #12]
   dbdb8:	4641      	mov	r1, r8
   dbdba:	4620      	mov	r0, r4
   dbdbc:	4798      	blx	r3
                break;
   dbdbe:	e7ec      	b.n	dbd9a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   dbdc0:	428d      	cmp	r5, r1
   dbdc2:	d004      	beq.n	dbdce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   dbdc4:	6823      	ldr	r3, [r4, #0]
   dbdc6:	1a6a      	subs	r2, r5, r1
   dbdc8:	689b      	ldr	r3, [r3, #8]
   dbdca:	4620      	mov	r0, r4
   dbdcc:	4798      	blx	r3
    }
    write('"');
   dbdce:	2122      	movs	r1, #34	; 0x22
   dbdd0:	4620      	mov	r0, r4
   dbdd2:	f7ff fe9d 	bl	dbb10 <_ZN5spark10JSONWriter5writeEc>
}
   dbdd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dbdda:	bf00      	nop
   dbddc:	000dff74 	.word	0x000dff74

000dbde0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   dbde0:	b513      	push	{r0, r1, r4, lr}
   dbde2:	4604      	mov	r4, r0
   dbde4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   dbde8:	f7ff ff64 	bl	dbcb4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   dbdec:	4620      	mov	r0, r4
   dbdee:	e9dd 2100 	ldrd	r2, r1, [sp]
   dbdf2:	f7ff ff9d 	bl	dbd30 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   dbdf6:	2302      	movs	r3, #2
}
   dbdf8:	4620      	mov	r0, r4
    state_ = VALUE;
   dbdfa:	7123      	strb	r3, [r4, #4]
}
   dbdfc:	b002      	add	sp, #8
   dbdfe:	bd10      	pop	{r4, pc}

000dbe00 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   dbe00:	b513      	push	{r0, r1, r4, lr}
   dbe02:	4604      	mov	r4, r0
   dbe04:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   dbe08:	f7ff ff54 	bl	dbcb4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   dbe0c:	4620      	mov	r0, r4
   dbe0e:	e9dd 2100 	ldrd	r2, r1, [sp]
   dbe12:	f7ff ff8d 	bl	dbd30 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   dbe16:	2301      	movs	r3, #1
}
   dbe18:	4620      	mov	r0, r4
    state_ = NEXT;
   dbe1a:	7123      	strb	r3, [r4, #4]
}
   dbe1c:	b002      	add	sp, #8
   dbe1e:	bd10      	pop	{r4, pc}

000dbe20 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   dbe20:	6880      	ldr	r0, [r0, #8]
   dbe22:	6803      	ldr	r3, [r0, #0]
   dbe24:	68db      	ldr	r3, [r3, #12]
   dbe26:	4718      	bx	r3

000dbe28 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   dbe28:	4770      	bx	lr

000dbe2a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   dbe2a:	4608      	mov	r0, r1
   dbe2c:	b111      	cbz	r1, dbe34 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   dbe2e:	680b      	ldr	r3, [r1, #0]
   dbe30:	685b      	ldr	r3, [r3, #4]
   dbe32:	4718      	bx	r3
}
   dbe34:	4770      	bx	lr

000dbe36 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   dbe36:	4770      	bx	lr

000dbe38 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   dbe38:	4770      	bx	lr

000dbe3a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   dbe3a:	4770      	bx	lr

000dbe3c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   dbe3c:	4770      	bx	lr

000dbe3e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   dbe3e:	b538      	push	{r3, r4, r5, lr}
   dbe40:	4604      	mov	r4, r0
   dbe42:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   dbe44:	6800      	ldr	r0, [r0, #0]
   dbe46:	212e      	movs	r1, #46	; 0x2e
   dbe48:	f002 fd73 	bl	de932 <strchrnul>
    size = s - category;
   dbe4c:	6823      	ldr	r3, [r4, #0]
   dbe4e:	1ac3      	subs	r3, r0, r3
   dbe50:	602b      	str	r3, [r5, #0]
    if (size) {
   dbe52:	b123      	cbz	r3, dbe5e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   dbe54:	7803      	ldrb	r3, [r0, #0]
   dbe56:	b103      	cbz	r3, dbe5a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   dbe58:	3001      	adds	r0, #1
   dbe5a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dbe5c:	6020      	str	r0, [r4, #0]
}
   dbe5e:	4618      	mov	r0, r3
   dbe60:	bd38      	pop	{r3, r4, r5, pc}

000dbe62 <_ZN5spark16JSONStreamWriterD0Ev>:
   dbe62:	b510      	push	{r4, lr}
   dbe64:	210c      	movs	r1, #12
   dbe66:	4604      	mov	r4, r0
   dbe68:	f002 f842 	bl	ddef0 <_ZdlPvj>
   dbe6c:	4620      	mov	r0, r4
   dbe6e:	bd10      	pop	{r4, pc}

000dbe70 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   dbe70:	b510      	push	{r4, lr}
   dbe72:	2104      	movs	r1, #4
   dbe74:	4604      	mov	r4, r0
   dbe76:	f002 f83b 	bl	ddef0 <_ZdlPvj>
   dbe7a:	4620      	mov	r0, r4
   dbe7c:	bd10      	pop	{r4, pc}

000dbe7e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   dbe7e:	b510      	push	{r4, lr}
   dbe80:	2104      	movs	r1, #4
   dbe82:	4604      	mov	r4, r0
   dbe84:	f002 f834 	bl	ddef0 <_ZdlPvj>
   dbe88:	4620      	mov	r0, r4
   dbe8a:	bd10      	pop	{r4, pc}

000dbe8c <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   dbe8c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   dbe8e:	f002 fd5a 	bl	de946 <strcmp>
}
   dbe92:	fab0 f080 	clz	r0, r0
   dbe96:	0940      	lsrs	r0, r0, #5
   dbe98:	bd08      	pop	{r3, pc}

000dbe9a <__tcf_1>:
   dbe9a:	4770      	bx	lr

000dbe9c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   dbe9c:	b510      	push	{r4, lr}
   dbe9e:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   dbea0:	f001 fe40 	bl	ddb24 <_Z16_fetch_usbserialv>
   dbea4:	4284      	cmp	r4, r0
   dbea6:	d010      	beq.n	dbeca <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   dbea8:	f001 fdb4 	bl	dda14 <_Z22__fetch_global_Serial1v>
   dbeac:	4284      	cmp	r4, r0
   dbeae:	d105      	bne.n	dbebc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   dbeb0:	f001 fdb0 	bl	dda14 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   dbeb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   dbeb8:	f001 bda9 	b.w	dda0e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   dbebc:	b12c      	cbz	r4, dbeca <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   dbebe:	6823      	ldr	r3, [r4, #0]
   dbec0:	4620      	mov	r0, r4
   dbec2:	685b      	ldr	r3, [r3, #4]
}
   dbec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dbec8:	4718      	bx	r3
   dbeca:	bd10      	pop	{r4, pc}

000dbecc <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   dbecc:	b513      	push	{r0, r1, r4, lr}
   dbece:	4604      	mov	r4, r0
    return value(val, strlen(val));
   dbed0:	4608      	mov	r0, r1
   dbed2:	9101      	str	r1, [sp, #4]
   dbed4:	f002 fd67 	bl	de9a6 <strlen>
   dbed8:	9901      	ldr	r1, [sp, #4]
   dbeda:	4602      	mov	r2, r0
   dbedc:	4620      	mov	r0, r4
}
   dbede:	b002      	add	sp, #8
   dbee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   dbee4:	f7ff bf8c 	b.w	dbe00 <_ZN5spark10JSONWriter5valueEPKcj>

000dbee8 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   dbee8:	b513      	push	{r0, r1, r4, lr}
   dbeea:	4604      	mov	r4, r0
    write(str, strlen(str));
   dbeec:	4608      	mov	r0, r1
   dbeee:	9101      	str	r1, [sp, #4]
   dbef0:	f002 fd59 	bl	de9a6 <strlen>
   dbef4:	6823      	ldr	r3, [r4, #0]
   dbef6:	9901      	ldr	r1, [sp, #4]
   dbef8:	68db      	ldr	r3, [r3, #12]
   dbefa:	4602      	mov	r2, r0
   dbefc:	4620      	mov	r0, r4
}
   dbefe:	b002      	add	sp, #8
   dbf00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   dbf04:	4718      	bx	r3

000dbf06 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   dbf06:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   dbf08:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   dbf0a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   dbf0e:	68db      	ldr	r3, [r3, #12]
   dbf10:	2201      	movs	r2, #1
   dbf12:	f10d 0107 	add.w	r1, sp, #7
   dbf16:	4798      	blx	r3
}
   dbf18:	b003      	add	sp, #12
   dbf1a:	f85d fb04 	ldr.w	pc, [sp], #4

000dbf1e <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   dbf1e:	b40e      	push	{r1, r2, r3}
   dbf20:	b503      	push	{r0, r1, lr}
   dbf22:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   dbf24:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   dbf26:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   dbf2a:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   dbf2c:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   dbf2e:	f001 f8a9 	bl	dd084 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   dbf32:	b002      	add	sp, #8
   dbf34:	f85d eb04 	ldr.w	lr, [sp], #4
   dbf38:	b003      	add	sp, #12
   dbf3a:	4770      	bx	lr

000dbf3c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   dbf3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   dbf40:	e9d0 9500 	ldrd	r9, r5, [r0]
   dbf44:	f04f 0814 	mov.w	r8, #20
   dbf48:	fb08 f505 	mul.w	r5, r8, r5
   dbf4c:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   dbf4e:	10ab      	asrs	r3, r5, #2
   dbf50:	4d18      	ldr	r5, [pc, #96]	; (dbfb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   dbf52:	4617      	mov	r7, r2
   dbf54:	435d      	muls	r5, r3
   dbf56:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   dbf58:	2d00      	cmp	r5, #0
   dbf5a:	dd23      	ble.n	dbfa4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   dbf5c:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   dbf5e:	fb08 f006 	mul.w	r0, r8, r6
   dbf62:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   dbf66:	463a      	mov	r2, r7
   dbf68:	f8ba b004 	ldrh.w	fp, [sl, #4]
   dbf6c:	5820      	ldr	r0, [r4, r0]
   dbf6e:	9101      	str	r1, [sp, #4]
   dbf70:	455f      	cmp	r7, fp
   dbf72:	bf28      	it	cs
   dbf74:	465a      	movcs	r2, fp
   dbf76:	f002 fd1e 	bl	de9b6 <strncmp>
                if (cmp == 0) {
   dbf7a:	9901      	ldr	r1, [sp, #4]
   dbf7c:	2301      	movs	r3, #1
   dbf7e:	b978      	cbnz	r0, dbfa0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   dbf80:	455f      	cmp	r7, fp
   dbf82:	d103      	bne.n	dbf8c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   dbf84:	9a00      	ldr	r2, [sp, #0]
   dbf86:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   dbf88:	4635      	mov	r5, r6
   dbf8a:	e7e5      	b.n	dbf58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   dbf8c:	bf8c      	ite	hi
   dbf8e:	2001      	movhi	r0, #1
   dbf90:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   dbf92:	2800      	cmp	r0, #0
   dbf94:	d0f8      	beq.n	dbf88 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   dbf96:	1bae      	subs	r6, r5, r6
	      ++__first;
   dbf98:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   dbf9c:	3e01      	subs	r6, #1
   dbf9e:	e7f3      	b.n	dbf88 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   dbfa0:	0fc0      	lsrs	r0, r0, #31
   dbfa2:	e7f6      	b.n	dbf92 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   dbfa4:	eba4 0409 	sub.w	r4, r4, r9
}
   dbfa8:	4802      	ldr	r0, [pc, #8]	; (dbfb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   dbfaa:	10a4      	asrs	r4, r4, #2
   dbfac:	4360      	muls	r0, r4
   dbfae:	b003      	add	sp, #12
   dbfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbfb4:	cccccccd 	.word	0xcccccccd

000dbfb8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   dbfb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   dbfba:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   dbfbc:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   dbfbe:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   dbfc0:	b30b      	cbz	r3, dc006 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   dbfc2:	b301      	cbz	r1, dc006 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   dbfc4:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   dbfc6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   dbfca:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   dbfcc:	a903      	add	r1, sp, #12
   dbfce:	a801      	add	r0, sp, #4
   dbfd0:	f7ff ff35 	bl	dbe3e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   dbfd4:	4601      	mov	r1, r0
   dbfd6:	b1b0      	cbz	r0, dc006 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   dbfd8:	f10d 030b 	add.w	r3, sp, #11
   dbfdc:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   dbfde:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   dbfe2:	4620      	mov	r0, r4
   dbfe4:	f7ff ffaa 	bl	dbf3c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   dbfe8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   dbfec:	b15b      	cbz	r3, dc006 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   dbfee:	6824      	ldr	r4, [r4, #0]
   dbff0:	2314      	movs	r3, #20
   dbff2:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   dbff6:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   dbffa:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   dbffe:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   dc000:	bfa8      	it	ge
   dc002:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   dc004:	e7e2      	b.n	dbfcc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   dc006:	4630      	mov	r0, r6
   dc008:	b004      	add	sp, #16
   dc00a:	bd70      	pop	{r4, r5, r6, pc}

000dc00c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   dc00c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   dc00e:	4c09      	ldr	r4, [pc, #36]	; (dc034 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   dc010:	7823      	ldrb	r3, [r4, #0]
   dc012:	f3bf 8f5b 	dmb	ish
   dc016:	07db      	lsls	r3, r3, #31
   dc018:	d409      	bmi.n	dc02e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   dc01a:	4620      	mov	r0, r4
   dc01c:	f7f8 f84c 	bl	d40b8 <__cxa_guard_acquire>
   dc020:	b128      	cbz	r0, dc02e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   dc022:	4620      	mov	r0, r4
   dc024:	f7f8 f84d 	bl	d40c2 <__cxa_guard_release>
   dc028:	4803      	ldr	r0, [pc, #12]	; (dc038 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   dc02a:	f002 fbd5 	bl	de7d8 <atexit>
}
   dc02e:	4803      	ldr	r0, [pc, #12]	; (dc03c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   dc030:	bd10      	pop	{r4, pc}
   dc032:	bf00      	nop
   dc034:	2003e568 	.word	0x2003e568
   dc038:	000dbe37 	.word	0x000dbe37
   dc03c:	2003dc44 	.word	0x2003dc44

000dc040 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   dc040:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   dc042:	4c09      	ldr	r4, [pc, #36]	; (dc068 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   dc044:	7823      	ldrb	r3, [r4, #0]
   dc046:	f3bf 8f5b 	dmb	ish
   dc04a:	07db      	lsls	r3, r3, #31
   dc04c:	d409      	bmi.n	dc062 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   dc04e:	4620      	mov	r0, r4
   dc050:	f7f8 f832 	bl	d40b8 <__cxa_guard_acquire>
   dc054:	b128      	cbz	r0, dc062 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   dc056:	4620      	mov	r0, r4
   dc058:	f7f8 f833 	bl	d40c2 <__cxa_guard_release>
   dc05c:	4803      	ldr	r0, [pc, #12]	; (dc06c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   dc05e:	f002 fbbb 	bl	de7d8 <atexit>
    return &factory;
}
   dc062:	4803      	ldr	r0, [pc, #12]	; (dc070 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   dc064:	bd10      	pop	{r4, pc}
   dc066:	bf00      	nop
   dc068:	2003e56c 	.word	0x2003e56c
   dc06c:	000dbe9b 	.word	0x000dbe9b
   dc070:	2003dc48 	.word	0x2003dc48

000dc074 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   dc074:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   dc076:	2500      	movs	r5, #0
   dc078:	4604      	mov	r4, r0
   dc07a:	e9c0 5500 	strd	r5, r5, [r0]
   dc07e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   dc082:	6085      	str	r5, [r0, #8]
   dc084:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   dc086:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   dc08a:	f7fe fa0b 	bl	da4a4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   dc08e:	f7ff ffbd 	bl	dc00c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   dc092:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   dc094:	f7ff ffd4 	bl	dc040 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   dc098:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   dc09a:	6220      	str	r0, [r4, #32]
}
   dc09c:	4620      	mov	r0, r4
   dc09e:	bd38      	pop	{r3, r4, r5, pc}

000dc0a0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   dc0a0:	b510      	push	{r4, lr}
    static LogManager mgr;
   dc0a2:	4c0a      	ldr	r4, [pc, #40]	; (dc0cc <_ZN5spark10LogManager8instanceEv+0x2c>)
   dc0a4:	7823      	ldrb	r3, [r4, #0]
   dc0a6:	f3bf 8f5b 	dmb	ish
   dc0aa:	07db      	lsls	r3, r3, #31
   dc0ac:	d40c      	bmi.n	dc0c8 <_ZN5spark10LogManager8instanceEv+0x28>
   dc0ae:	4620      	mov	r0, r4
   dc0b0:	f7f8 f802 	bl	d40b8 <__cxa_guard_acquire>
   dc0b4:	b140      	cbz	r0, dc0c8 <_ZN5spark10LogManager8instanceEv+0x28>
   dc0b6:	4806      	ldr	r0, [pc, #24]	; (dc0d0 <_ZN5spark10LogManager8instanceEv+0x30>)
   dc0b8:	f7ff ffdc 	bl	dc074 <_ZN5spark10LogManagerC1Ev>
   dc0bc:	4620      	mov	r0, r4
   dc0be:	f7f8 f800 	bl	d40c2 <__cxa_guard_release>
   dc0c2:	4804      	ldr	r0, [pc, #16]	; (dc0d4 <_ZN5spark10LogManager8instanceEv+0x34>)
   dc0c4:	f002 fb88 	bl	de7d8 <atexit>
    return &mgr;
}
   dc0c8:	4801      	ldr	r0, [pc, #4]	; (dc0d0 <_ZN5spark10LogManager8instanceEv+0x30>)
   dc0ca:	bd10      	pop	{r4, pc}
   dc0cc:	2003e564 	.word	0x2003e564
   dc0d0:	2003e574 	.word	0x2003e574
   dc0d4:	000dc509 	.word	0x000dc509

000dc0d8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   dc0d8:	4a02      	ldr	r2, [pc, #8]	; (dc0e4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   dc0da:	4903      	ldr	r1, [pc, #12]	; (dc0e8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   dc0dc:	4803      	ldr	r0, [pc, #12]	; (dc0ec <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   dc0de:	2300      	movs	r3, #0
   dc0e0:	f7fe bc68 	b.w	da9b4 <log_set_callbacks>
   dc0e4:	000dc391 	.word	0x000dc391
   dc0e8:	000dc31d 	.word	0x000dc31d
   dc0ec:	000dc29d 	.word	0x000dc29d

000dc0f0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   dc0f0:	2300      	movs	r3, #0
   dc0f2:	461a      	mov	r2, r3
   dc0f4:	4619      	mov	r1, r3
   dc0f6:	4618      	mov	r0, r3
   dc0f8:	f7fe bc5c 	b.w	da9b4 <log_set_callbacks>

000dc0fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   dc0fc:	b570      	push	{r4, r5, r6, lr}
   dc0fe:	b08a      	sub	sp, #40	; 0x28
   dc100:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   dc102:	4601      	mov	r1, r0
   dc104:	a804      	add	r0, sp, #16
   dc106:	f7fb fae3 	bl	d76d0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   dc10a:	4e14      	ldr	r6, [pc, #80]	; (dc15c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   dc10c:	a804      	add	r0, sp, #16
   dc10e:	f7ff fdb5 	bl	dbc7c <_ZN5spark18JSONObjectIterator4nextEv>
   dc112:	b1e8      	cbz	r0, dc150 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   dc114:	a904      	add	r1, sp, #16
   dc116:	4668      	mov	r0, sp
   dc118:	f7fb faeb 	bl	d76f2 <_ZNK5spark18JSONObjectIterator4nameEv>
   dc11c:	9802      	ldr	r0, [sp, #8]
   dc11e:	4631      	mov	r1, r6
   dc120:	f7ff feb4 	bl	dbe8c <_ZNK5spark10JSONStringeqEPKc.isra.0>
   dc124:	4604      	mov	r4, r0
   dc126:	b110      	cbz	r0, dc12e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   dc128:	1e2c      	subs	r4, r5, #0
   dc12a:	bf18      	it	ne
   dc12c:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   dc12e:	a801      	add	r0, sp, #4
   dc130:	f7f8 fe25 	bl	d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc134:	2c00      	cmp	r4, #0
   dc136:	d0e9      	beq.n	dc10c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   dc138:	a904      	add	r1, sp, #16
   dc13a:	4668      	mov	r0, sp
   dc13c:	f7fb faea 	bl	d7714 <_ZNK5spark18JSONObjectIterator5valueEv>
   dc140:	4668      	mov	r0, sp
   dc142:	f7ff fd3e 	bl	dbbc2 <_ZNK5spark9JSONValue5toIntEv>
   dc146:	6028      	str	r0, [r5, #0]
   dc148:	a801      	add	r0, sp, #4
   dc14a:	f7f8 fe18 	bl	d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc14e:	e7dd      	b.n	dc10c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   dc150:	a805      	add	r0, sp, #20
   dc152:	f7f8 fe14 	bl	d4d7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   dc156:	b00a      	add	sp, #40	; 0x28
   dc158:	bd70      	pop	{r4, r5, r6, pc}
   dc15a:	bf00      	nop
   dc15c:	000dff7a 	.word	0x000dff7a

000dc160 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   dc160:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dc162:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   dc164:	4620      	mov	r0, r4
   dc166:	4912      	ldr	r1, [pc, #72]	; (dc1b0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   dc168:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   dc16a:	f002 fbec 	bl	de946 <strcmp>
   dc16e:	b948      	cbnz	r0, dc184 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   dc170:	f001 fcd8 	bl	ddb24 <_Z16_fetch_usbserialv>
   dc174:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   dc178:	f001 fcc4 	bl	ddb04 <_ZN9USBSerial5beginEl>
        return &Serial;
   dc17c:	f001 fcd2 	bl	ddb24 <_Z16_fetch_usbserialv>
}
   dc180:	b003      	add	sp, #12
   dc182:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   dc184:	490b      	ldr	r1, [pc, #44]	; (dc1b4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   dc186:	4620      	mov	r0, r4
   dc188:	f002 fbdd 	bl	de946 <strcmp>
   dc18c:	b970      	cbnz	r0, dc1ac <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   dc18e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   dc192:	a901      	add	r1, sp, #4
   dc194:	4628      	mov	r0, r5
        int baud = 9600;
   dc196:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   dc198:	f7ff ffb0 	bl	dc0fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   dc19c:	f001 fc3a 	bl	dda14 <_Z22__fetch_global_Serial1v>
   dc1a0:	9901      	ldr	r1, [sp, #4]
   dc1a2:	f001 fc31 	bl	dda08 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   dc1a6:	f001 fc35 	bl	dda14 <_Z22__fetch_global_Serial1v>
   dc1aa:	e7e9      	b.n	dc180 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   dc1ac:	2000      	movs	r0, #0
   dc1ae:	e7e7      	b.n	dc180 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   dc1b0:	000dff7f 	.word	0x000dff7f
   dc1b4:	000dff86 	.word	0x000dff86

000dc1b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   dc1b8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   dc1ba:	e9d0 5300 	ldrd	r5, r3, [r0]
   dc1be:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   dc1c0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   dc1c2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dc1c6:	42ae      	cmp	r6, r5
   dc1c8:	d005      	beq.n	dc1d6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   dc1ca:	f105 0008 	add.w	r0, r5, #8
   dc1ce:	f7ff fff3 	bl	dc1b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   dc1d2:	3514      	adds	r5, #20
   dc1d4:	e7f7      	b.n	dc1c6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   dc1d6:	6820      	ldr	r0, [r4, #0]
   dc1d8:	f7fe fd36 	bl	dac48 <free>
}
   dc1dc:	4620      	mov	r0, r4
   dc1de:	bd70      	pop	{r4, r5, r6, pc}

000dc1e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   dc1e0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   dc1e2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   dc1e6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   dc1e8:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   dc1ec:	42ae      	cmp	r6, r5
   dc1ee:	d004      	beq.n	dc1fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   dc1f0:	4628      	mov	r0, r5
   dc1f2:	f001 f853 	bl	dd29c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   dc1f6:	3510      	adds	r5, #16
   dc1f8:	e7f8      	b.n	dc1ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   dc1fa:	6820      	ldr	r0, [r4, #0]
   dc1fc:	f7fe fd24 	bl	dac48 <free>
}
   dc200:	4620      	mov	r0, r4
   dc202:	bd70      	pop	{r4, r5, r6, pc}

000dc204 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   dc204:	b510      	push	{r4, lr}
   dc206:	4604      	mov	r4, r0
   dc208:	300c      	adds	r0, #12
   dc20a:	f7ff ffd5 	bl	dc1b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   dc20e:	4620      	mov	r0, r4
   dc210:	f7ff ffe6 	bl	dc1e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   dc214:	4620      	mov	r0, r4
   dc216:	bd10      	pop	{r4, pc}

000dc218 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   dc218:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   dc21a:	4b04      	ldr	r3, [pc, #16]	; (dc22c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   dc21c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   dc21e:	f840 3b04 	str.w	r3, [r0], #4
   dc222:	f7ff ffef 	bl	dc204 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   dc226:	4620      	mov	r0, r4
   dc228:	bd10      	pop	{r4, pc}
   dc22a:	bf00      	nop
   dc22c:	000df368 	.word	0x000df368

000dc230 <_ZN5spark16StreamLogHandlerD0Ev>:
   dc230:	b510      	push	{r4, lr}
   dc232:	4604      	mov	r4, r0
   dc234:	f7ff fff0 	bl	dc218 <_ZN5spark16StreamLogHandlerD1Ev>
   dc238:	4620      	mov	r0, r4
   dc23a:	2124      	movs	r1, #36	; 0x24
   dc23c:	f001 fe58 	bl	ddef0 <_ZdlPvj>
   dc240:	4620      	mov	r0, r4
   dc242:	bd10      	pop	{r4, pc}

000dc244 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   dc244:	b510      	push	{r4, lr}
   dc246:	4b03      	ldr	r3, [pc, #12]	; (dc254 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   dc248:	6003      	str	r3, [r0, #0]
   dc24a:	4604      	mov	r4, r0
   dc24c:	f7ff ffe4 	bl	dc218 <_ZN5spark16StreamLogHandlerD1Ev>
   dc250:	4620      	mov	r0, r4
   dc252:	bd10      	pop	{r4, pc}
   dc254:	000e0024 	.word	0x000e0024

000dc258 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   dc258:	b510      	push	{r4, lr}
   dc25a:	4604      	mov	r4, r0
   dc25c:	f7ff fff2 	bl	dc244 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   dc260:	4620      	mov	r0, r4
   dc262:	2124      	movs	r1, #36	; 0x24
   dc264:	f001 fe44 	bl	ddef0 <_ZdlPvj>
   dc268:	4620      	mov	r0, r4
   dc26a:	bd10      	pop	{r4, pc}

000dc26c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   dc26c:	2200      	movs	r2, #0
   dc26e:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   dc272:	b510      	push	{r4, lr}
        capacity_(0) {
   dc274:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   dc276:	680c      	ldr	r4, [r1, #0]
   dc278:	6004      	str	r4, [r0, #0]
   dc27a:	684c      	ldr	r4, [r1, #4]
   dc27c:	6044      	str	r4, [r0, #4]
   dc27e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc280:	600a      	str	r2, [r1, #0]
   dc282:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   dc284:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc286:	608a      	str	r2, [r1, #8]
}
   dc288:	bd10      	pop	{r4, pc}

000dc28a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   dc28a:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   dc28c:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   dc28e:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   dc290:	6818      	ldr	r0, [r3, #0]
   dc292:	f7fe f91f 	bl	da4d4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   dc296:	4620      	mov	r0, r4
   dc298:	bd10      	pop	{r4, pc}
	...

000dc29c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   dc29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc2a0:	b087      	sub	sp, #28
   dc2a2:	4680      	mov	r8, r0
   dc2a4:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   dc2a6:	4b1c      	ldr	r3, [pc, #112]	; (dc318 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   dc2a8:	685b      	ldr	r3, [r3, #4]
   dc2aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   dc2ae:	4689      	mov	r9, r1
   dc2b0:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   dc2b2:	b96b      	cbnz	r3, dc2d0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   dc2b4:	f7ff fef4 	bl	dc0a0 <_ZN5spark10LogManager8instanceEv>
   dc2b8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   dc2ba:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   dc2be:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dc2c0:	9305      	str	r3, [sp, #20]
   dc2c2:	f7fe f8ff 	bl	da4c4 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   dc2c6:	7b23      	ldrb	r3, [r4, #12]
   dc2c8:	b12b      	cbz	r3, dc2d6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   dc2ca:	a805      	add	r0, sp, #20
   dc2cc:	f7ff ffdd 	bl	dc28a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   dc2d0:	b007      	add	sp, #28
   dc2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   dc2d6:	2301      	movs	r3, #1
   dc2d8:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   dc2da:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   dc2de:	fa5f f989 	uxtb.w	r9, r9
   dc2e2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   dc2e6:	45aa      	cmp	sl, r5
   dc2e8:	d012      	beq.n	dc310 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   dc2ea:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   dc2ee:	4631      	mov	r1, r6
   dc2f0:	1d38      	adds	r0, r7, #4
   dc2f2:	f7ff fe61 	bl	dbfb8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   dc2f6:	4581      	cmp	r9, r0
   dc2f8:	d3f5      	bcc.n	dc2e6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   dc2fa:	683b      	ldr	r3, [r7, #0]
   dc2fc:	9a03      	ldr	r2, [sp, #12]
   dc2fe:	9200      	str	r2, [sp, #0]
   dc300:	f8d3 b008 	ldr.w	fp, [r3, #8]
   dc304:	464a      	mov	r2, r9
   dc306:	4633      	mov	r3, r6
   dc308:	4641      	mov	r1, r8
   dc30a:	4638      	mov	r0, r7
   dc30c:	47d8      	blx	fp
   dc30e:	e7ea      	b.n	dc2e6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   dc310:	2300      	movs	r3, #0
   dc312:	7323      	strb	r3, [r4, #12]
   dc314:	e7d9      	b.n	dc2ca <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   dc316:	bf00      	nop
   dc318:	e000ed00 	.word	0xe000ed00

000dc31c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   dc31c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc320:	469b      	mov	fp, r3
   dc322:	4b1a      	ldr	r3, [pc, #104]	; (dc38c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   dc324:	685b      	ldr	r3, [r3, #4]
   dc326:	f3c3 0308 	ubfx	r3, r3, #0, #9
   dc32a:	4680      	mov	r8, r0
   dc32c:	4689      	mov	r9, r1
   dc32e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   dc330:	b96b      	cbnz	r3, dc34e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   dc332:	f7ff feb5 	bl	dc0a0 <_ZN5spark10LogManager8instanceEv>
   dc336:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   dc338:	f100 0324 	add.w	r3, r0, #36	; 0x24
   dc33c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dc33e:	9301      	str	r3, [sp, #4]
   dc340:	f7fe f8c0 	bl	da4c4 <os_mutex_recursive_lock>
        if (that->isActive()) {
   dc344:	7b23      	ldrb	r3, [r4, #12]
   dc346:	b12b      	cbz	r3, dc354 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   dc348:	a801      	add	r0, sp, #4
   dc34a:	f7ff ff9e 	bl	dc28a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   dc34e:	b003      	add	sp, #12
   dc350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   dc354:	2301      	movs	r3, #1
   dc356:	7323      	strb	r3, [r4, #12]
   dc358:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   dc35c:	b2f6      	uxtb	r6, r6
   dc35e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   dc362:	4555      	cmp	r5, sl
   dc364:	d00e      	beq.n	dc384 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   dc366:	f855 7b04 	ldr.w	r7, [r5], #4
   dc36a:	4659      	mov	r1, fp
   dc36c:	1d38      	adds	r0, r7, #4
   dc36e:	f7ff fe23 	bl	dbfb8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   dc372:	4286      	cmp	r6, r0
   dc374:	d3f5      	bcc.n	dc362 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   dc376:	683b      	ldr	r3, [r7, #0]
   dc378:	464a      	mov	r2, r9
   dc37a:	68db      	ldr	r3, [r3, #12]
   dc37c:	4641      	mov	r1, r8
   dc37e:	4638      	mov	r0, r7
   dc380:	4798      	blx	r3
   dc382:	e7ee      	b.n	dc362 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   dc384:	2300      	movs	r3, #0
   dc386:	7323      	strb	r3, [r4, #12]
   dc388:	e7de      	b.n	dc348 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   dc38a:	bf00      	nop
   dc38c:	e000ed00 	.word	0xe000ed00

000dc390 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   dc390:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   dc394:	4b16      	ldr	r3, [pc, #88]	; (dc3f0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   dc396:	685b      	ldr	r3, [r3, #4]
   dc398:	f3c3 0308 	ubfx	r3, r3, #0, #9
   dc39c:	4605      	mov	r5, r0
   dc39e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   dc3a0:	bb1b      	cbnz	r3, dc3ea <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   dc3a2:	f7ff fe7d 	bl	dc0a0 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   dc3a6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   dc3aa:	4604      	mov	r4, r0
   dc3ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dc3ae:	9301      	str	r3, [sp, #4]
   dc3b0:	f7fe f888 	bl	da4c4 <os_mutex_recursive_lock>
   dc3b4:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   dc3b8:	2446      	movs	r4, #70	; 0x46
   dc3ba:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   dc3be:	45b0      	cmp	r8, r6
   dc3c0:	d109      	bne.n	dc3d6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   dc3c2:	a801      	add	r0, sp, #4
   dc3c4:	f7ff ff61 	bl	dc28a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   dc3c8:	42a5      	cmp	r5, r4
   dc3ca:	bfb4      	ite	lt
   dc3cc:	2000      	movlt	r0, #0
   dc3ce:	2001      	movge	r0, #1
}
   dc3d0:	b002      	add	sp, #8
   dc3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   dc3d6:	f856 0b04 	ldr.w	r0, [r6], #4
   dc3da:	4639      	mov	r1, r7
   dc3dc:	3004      	adds	r0, #4
   dc3de:	f7ff fdeb 	bl	dbfb8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   dc3e2:	4284      	cmp	r4, r0
   dc3e4:	bfa8      	it	ge
   dc3e6:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   dc3e8:	e7e9      	b.n	dc3be <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   dc3ea:	2000      	movs	r0, #0
   dc3ec:	e7f0      	b.n	dc3d0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   dc3ee:	bf00      	nop
   dc3f0:	e000ed00 	.word	0xe000ed00

000dc3f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   dc3f4:	b570      	push	{r4, r5, r6, lr}
   dc3f6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   dc3f8:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   dc3fc:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   dc3fe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   dc402:	4282      	cmp	r2, r0
   dc404:	d007      	beq.n	dc416 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   dc406:	4601      	mov	r1, r0
            if (*p == value) {
   dc408:	681d      	ldr	r5, [r3, #0]
   dc40a:	f851 6b04 	ldr.w	r6, [r1], #4
   dc40e:	42ae      	cmp	r6, r5
   dc410:	d003      	beq.n	dc41a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   dc412:	4608      	mov	r0, r1
   dc414:	e7f5      	b.n	dc402 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   dc416:	2000      	movs	r0, #0
}
   dc418:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   dc41a:	1a52      	subs	r2, r2, r1
   dc41c:	f002 fa02 	bl	de824 <memmove>
    --size_;
   dc420:	6863      	ldr	r3, [r4, #4]
   dc422:	3b01      	subs	r3, #1
   dc424:	6063      	str	r3, [r4, #4]
    return true;
   dc426:	2001      	movs	r0, #1
   dc428:	e7f6      	b.n	dc418 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000dc42a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   dc42a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   dc42c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   dc430:	4604      	mov	r4, r0
   dc432:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dc434:	9101      	str	r1, [sp, #4]
   dc436:	9303      	str	r3, [sp, #12]
   dc438:	f7fe f844 	bl	da4c4 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   dc43c:	a901      	add	r1, sp, #4
   dc43e:	4620      	mov	r0, r4
   dc440:	f7ff ffd8 	bl	dc3f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   dc444:	b118      	cbz	r0, dc44e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   dc446:	6863      	ldr	r3, [r4, #4]
   dc448:	b90b      	cbnz	r3, dc44e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   dc44a:	f7ff fe51 	bl	dc0f0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   dc44e:	a803      	add	r0, sp, #12
   dc450:	f7ff ff1b 	bl	dc28a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   dc454:	b004      	add	sp, #16
   dc456:	bd10      	pop	{r4, pc}

000dc458 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   dc458:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   dc45a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   dc45e:	2318      	movs	r3, #24
   dc460:	4604      	mov	r4, r0
   dc462:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   dc466:	42ae      	cmp	r6, r5
   dc468:	d015      	beq.n	dc496 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   dc46a:	f105 0110 	add.w	r1, r5, #16
   dc46e:	4620      	mov	r0, r4
   dc470:	f7ff ffc0 	bl	dc3f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   dc474:	6863      	ldr	r3, [r4, #4]
   dc476:	b90b      	cbnz	r3, dc47c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   dc478:	f7ff fe3a 	bl	dc0f0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   dc47c:	69e0      	ldr	r0, [r4, #28]
   dc47e:	6929      	ldr	r1, [r5, #16]
   dc480:	6803      	ldr	r3, [r0, #0]
   dc482:	68db      	ldr	r3, [r3, #12]
   dc484:	4798      	blx	r3
        if (h.stream) {
   dc486:	6969      	ldr	r1, [r5, #20]
   dc488:	b119      	cbz	r1, dc492 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   dc48a:	6a20      	ldr	r0, [r4, #32]
   dc48c:	6803      	ldr	r3, [r0, #0]
   dc48e:	68db      	ldr	r3, [r3, #12]
   dc490:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   dc492:	3518      	adds	r5, #24
   dc494:	e7e7      	b.n	dc466 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   dc496:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   dc49a:	2618      	movs	r6, #24
   dc49c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dc4a0:	42ae      	cmp	r6, r5
   dc4a2:	d004      	beq.n	dc4ae <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   dc4a4:	4628      	mov	r0, r5
   dc4a6:	f000 fef9 	bl	dd29c <_ZN6StringD1Ev>
   dc4aa:	3518      	adds	r5, #24
   dc4ac:	e7f8      	b.n	dc4a0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   dc4ae:	2300      	movs	r3, #0
   dc4b0:	6163      	str	r3, [r4, #20]
}
   dc4b2:	bd70      	pop	{r4, r5, r6, pc}

000dc4b4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   dc4b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   dc4b6:	4604      	mov	r4, r0
    resetSystemCallbacks();
   dc4b8:	f7ff fe1a 	bl	dc0f0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   dc4bc:	f104 0324 	add.w	r3, r4, #36	; 0x24
   dc4c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   dc4c2:	9301      	str	r3, [sp, #4]
   dc4c4:	f7fd fffe 	bl	da4c4 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   dc4c8:	4620      	mov	r0, r4
   dc4ca:	f7ff ffc5 	bl	dc458 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   dc4ce:	a801      	add	r0, sp, #4
   dc4d0:	f7ff fedb 	bl	dc28a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   dc4d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   dc4d6:	b108      	cbz	r0, dc4dc <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   dc4d8:	f7fd ffec 	bl	da4b4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   dc4dc:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   dc4e0:	2618      	movs	r6, #24
   dc4e2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dc4e6:	42ae      	cmp	r6, r5
   dc4e8:	d004      	beq.n	dc4f4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   dc4ea:	4628      	mov	r0, r5
   dc4ec:	f000 fed6 	bl	dd29c <_ZN6StringD1Ev>
   dc4f0:	3518      	adds	r5, #24
   dc4f2:	e7f8      	b.n	dc4e6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   dc4f4:	6920      	ldr	r0, [r4, #16]
   dc4f6:	f7fe fba7 	bl	dac48 <free>
   dc4fa:	6820      	ldr	r0, [r4, #0]
   dc4fc:	f7fe fba4 	bl	dac48 <free>
}
   dc500:	4620      	mov	r0, r4
   dc502:	b002      	add	sp, #8
   dc504:	bd70      	pop	{r4, r5, r6, pc}
	...

000dc508 <__tcf_2>:
    static LogManager mgr;
   dc508:	4801      	ldr	r0, [pc, #4]	; (dc510 <__tcf_2+0x8>)
   dc50a:	f7ff bfd3 	b.w	dc4b4 <_ZN5spark10LogManagerD1Ev>
   dc50e:	bf00      	nop
   dc510:	2003e574 	.word	0x2003e574

000dc514 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   dc514:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   dc516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc518:	4606      	mov	r6, r0
   dc51a:	460c      	mov	r4, r1
   dc51c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   dc51e:	d927      	bls.n	dc570 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   dc520:	4290      	cmp	r0, r2
   dc522:	d226      	bcs.n	dc572 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   dc524:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   dc528:	1a6c      	subs	r4, r5, r1
   dc52a:	f1a1 0714 	sub.w	r7, r1, #20
   dc52e:	4404      	add	r4, r0
        capacity_(0) {
   dc530:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   dc532:	42af      	cmp	r7, r5
   dc534:	d03d      	beq.n	dc5b2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   dc536:	b1a4      	cbz	r4, dc562 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   dc538:	682b      	ldr	r3, [r5, #0]
   dc53a:	6023      	str	r3, [r4, #0]
   dc53c:	88ab      	ldrh	r3, [r5, #4]
   dc53e:	80a3      	strh	r3, [r4, #4]
   dc540:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   dc544:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   dc546:	e9c4 6602 	strd	r6, r6, [r4, #8]
   dc54a:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc54c:	68ab      	ldr	r3, [r5, #8]
   dc54e:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc550:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc552:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dc554:	68ea      	ldr	r2, [r5, #12]
   dc556:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dc558:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc55a:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc55c:	692a      	ldr	r2, [r5, #16]
   dc55e:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dc560:	612b      	str	r3, [r5, #16]
   dc562:	f105 0008 	add.w	r0, r5, #8
   dc566:	f7ff fe27 	bl	dc1b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   dc56a:	3d14      	subs	r5, #20
   dc56c:	3c14      	subs	r4, #20
   dc56e:	e7e0      	b.n	dc532 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   dc570:	d01f      	beq.n	dc5b2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   dc572:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   dc574:	42ac      	cmp	r4, r5
   dc576:	d01c      	beq.n	dc5b2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   dc578:	b1a6      	cbz	r6, dc5a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   dc57a:	6823      	ldr	r3, [r4, #0]
   dc57c:	6033      	str	r3, [r6, #0]
   dc57e:	88a3      	ldrh	r3, [r4, #4]
   dc580:	80b3      	strh	r3, [r6, #4]
   dc582:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   dc586:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   dc588:	e9c6 7702 	strd	r7, r7, [r6, #8]
   dc58c:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc58e:	68a3      	ldr	r3, [r4, #8]
   dc590:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc592:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc594:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   dc596:	68e2      	ldr	r2, [r4, #12]
   dc598:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dc59a:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc59c:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc59e:	6922      	ldr	r2, [r4, #16]
   dc5a0:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dc5a2:	6123      	str	r3, [r4, #16]
   dc5a4:	f104 0008 	add.w	r0, r4, #8
   dc5a8:	f7ff fe06 	bl	dc1b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   dc5ac:	3414      	adds	r4, #20
   dc5ae:	3614      	adds	r6, #20
   dc5b0:	e7e0      	b.n	dc574 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   dc5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc5b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   dc5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dc5b6:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   dc5ba:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   dc5bc:	4604      	mov	r4, r0
   dc5be:	460e      	mov	r6, r1
   dc5c0:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dc5c2:	db0d      	blt.n	dc5e0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   dc5c4:	3501      	adds	r5, #1
        if (n > 0) {
   dc5c6:	2d00      	cmp	r5, #0
   dc5c8:	6800      	ldr	r0, [r0, #0]
   dc5ca:	dd04      	ble.n	dc5d6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   dc5cc:	00a9      	lsls	r1, r5, #2
   dc5ce:	f7fe fb43 	bl	dac58 <realloc>
            if (!d) {
   dc5d2:	b918      	cbnz	r0, dc5dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   dc5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   dc5d6:	f7fe fb37 	bl	dac48 <free>
        T* d = nullptr;
   dc5da:	2000      	movs	r0, #0
        data_ = d;
   dc5dc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   dc5de:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   dc5e0:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   dc5e2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   dc5e4:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   dc5e8:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   dc5ea:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   dc5ee:	1d08      	adds	r0, r1, #4
   dc5f0:	f002 f918 	bl	de824 <memmove>
    new(p) T(std::move(value));
   dc5f4:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   dc5f8:	6863      	ldr	r3, [r4, #4]
   dc5fa:	3301      	adds	r3, #1
   dc5fc:	6063      	str	r3, [r4, #4]
    return true;
   dc5fe:	2001      	movs	r0, #1
   dc600:	e7e8      	b.n	dc5d4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000dc602 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   dc602:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   dc604:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   dc608:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   dc60a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dc60c:	9301      	str	r3, [sp, #4]
   dc60e:	460d      	mov	r5, r1
   dc610:	f7fd ff58 	bl	da4c4 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   dc614:	e9d4 3100 	ldrd	r3, r1, [r4]
   dc618:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   dc61c:	4283      	cmp	r3, r0
   dc61e:	461a      	mov	r2, r3
   dc620:	d00b      	beq.n	dc63a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   dc622:	6812      	ldr	r2, [r2, #0]
   dc624:	42aa      	cmp	r2, r5
   dc626:	f103 0304 	add.w	r3, r3, #4
   dc62a:	d1f7      	bne.n	dc61c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   dc62c:	a801      	add	r0, sp, #4
   dc62e:	f7ff fe2c 	bl	dc28a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   dc632:	2500      	movs	r5, #0
}
   dc634:	4628      	mov	r0, r5
   dc636:	b003      	add	sp, #12
   dc638:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   dc63a:	462a      	mov	r2, r5
   dc63c:	4620      	mov	r0, r4
   dc63e:	f7ff ffb9 	bl	dc5b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   dc642:	4605      	mov	r5, r0
   dc644:	2800      	cmp	r0, #0
   dc646:	d0f1      	beq.n	dc62c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   dc648:	6863      	ldr	r3, [r4, #4]
   dc64a:	2b01      	cmp	r3, #1
   dc64c:	d101      	bne.n	dc652 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   dc64e:	f7ff fd43 	bl	dc0d8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   dc652:	a801      	add	r0, sp, #4
   dc654:	f7ff fe19 	bl	dc28a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   dc658:	e7ec      	b.n	dc634 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000dc65a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   dc65a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   dc65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc65e:	4604      	mov	r4, r0
   dc660:	460d      	mov	r5, r1
   dc662:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   dc664:	d914      	bls.n	dc690 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   dc666:	4290      	cmp	r0, r2
   dc668:	d213      	bcs.n	dc692 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   dc66a:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   dc66e:	1a75      	subs	r5, r6, r1
   dc670:	f1a1 0710 	sub.w	r7, r1, #16
   dc674:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   dc676:	42b7      	cmp	r7, r6
   dc678:	d018      	beq.n	dc6ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   dc67a:	b11c      	cbz	r4, dc684 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   dc67c:	4631      	mov	r1, r6
   dc67e:	4620      	mov	r0, r4
   dc680:	f000 fe88 	bl	dd394 <_ZN6StringC1EOS_>
                end->~T();
   dc684:	4630      	mov	r0, r6
   dc686:	f000 fe09 	bl	dd29c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   dc68a:	3e10      	subs	r6, #16
   dc68c:	3c10      	subs	r4, #16
   dc68e:	e7f2      	b.n	dc676 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   dc690:	d00c      	beq.n	dc6ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   dc692:	42b5      	cmp	r5, r6
   dc694:	d00a      	beq.n	dc6ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   dc696:	b11c      	cbz	r4, dc6a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   dc698:	4629      	mov	r1, r5
   dc69a:	4620      	mov	r0, r4
   dc69c:	f000 fe7a 	bl	dd394 <_ZN6StringC1EOS_>
                p->~T();
   dc6a0:	4628      	mov	r0, r5
   dc6a2:	f000 fdfb 	bl	dd29c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   dc6a6:	3510      	adds	r5, #16
   dc6a8:	3410      	adds	r4, #16
   dc6aa:	e7f2      	b.n	dc692 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   dc6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc6ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   dc6ae:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   dc6b0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   dc6b2:	4605      	mov	r5, r0
        if (n > 0) {
   dc6b4:	dd11      	ble.n	dc6da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   dc6b6:	0130      	lsls	r0, r6, #4
   dc6b8:	f7fe fabe 	bl	dac38 <malloc>
            if (!d) {
   dc6bc:	4604      	mov	r4, r0
   dc6be:	b158      	cbz	r0, dc6d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   dc6c0:	e9d5 1200 	ldrd	r1, r2, [r5]
   dc6c4:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   dc6c8:	f7ff ffc7 	bl	dc65a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   dc6cc:	6828      	ldr	r0, [r5, #0]
   dc6ce:	f7fe fabb 	bl	dac48 <free>
        data_ = d;
   dc6d2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   dc6d4:	60ae      	str	r6, [r5, #8]
        return true;
   dc6d6:	2001      	movs	r0, #1
    }
   dc6d8:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   dc6da:	2400      	movs	r4, #0
   dc6dc:	e7f6      	b.n	dc6cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000dc6de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   dc6de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc6e2:	4691      	mov	r9, r2
   dc6e4:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   dc6e6:	2300      	movs	r3, #0
   dc6e8:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   dc6ea:	f8d9 1004 	ldr.w	r1, [r9, #4]
   dc6ee:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   dc6f0:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   dc6f2:	4299      	cmp	r1, r3
        capacity_(0) {
   dc6f4:	e9c0 3300 	strd	r3, r3, [r0]
   dc6f8:	e9c0 3302 	strd	r3, r3, [r0, #8]
   dc6fc:	e9c0 3304 	strd	r3, r3, [r0, #16]
   dc700:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   dc704:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   dc706:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   dc708:	dc23      	bgt.n	dc752 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   dc70a:	e9d9 5700 	ldrd	r5, r7, [r9]
   dc70e:	2314      	movs	r3, #20
   dc710:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   dc714:	42af      	cmp	r7, r5
   dc716:	d03b      	beq.n	dc790 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   dc718:	4629      	mov	r1, r5
   dc71a:	a80d      	add	r0, sp, #52	; 0x34
   dc71c:	f000 fe3a 	bl	dd394 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   dc720:	a90d      	add	r1, sp, #52	; 0x34
   dc722:	a811      	add	r0, sp, #68	; 0x44
   dc724:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   dc726:	f000 fe35 	bl	dd394 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dc72a:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   dc72e:	4299      	cmp	r1, r3
   dc730:	da1b      	bge.n	dc76a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   dc732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   dc734:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   dc736:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   dc73a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   dc73e:	4631      	mov	r1, r6
   dc740:	f106 0010 	add.w	r0, r6, #16
   dc744:	f7ff ff89 	bl	dc65a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   dc748:	b9ee      	cbnz	r6, dc786 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   dc74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dc74c:	3301      	adds	r3, #1
   dc74e:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   dc750:	e011      	b.n	dc776 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   dc752:	a80a      	add	r0, sp, #40	; 0x28
   dc754:	f7ff ffab 	bl	dc6ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   dc758:	2800      	cmp	r0, #0
   dc75a:	d1d6      	bne.n	dc70a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   dc75c:	a80a      	add	r0, sp, #40	; 0x28
   dc75e:	f7ff fd3f 	bl	dc1e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   dc762:	4620      	mov	r0, r4
   dc764:	b017      	add	sp, #92	; 0x5c
   dc766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dc76a:	3101      	adds	r1, #1
   dc76c:	a80a      	add	r0, sp, #40	; 0x28
   dc76e:	f7ff ff9e 	bl	dc6ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   dc772:	2800      	cmp	r0, #0
   dc774:	d1dd      	bne.n	dc732 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   dc776:	a811      	add	r0, sp, #68	; 0x44
   dc778:	f000 fd90 	bl	dd29c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   dc77c:	a80d      	add	r0, sp, #52	; 0x34
   dc77e:	f000 fd8d 	bl	dd29c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   dc782:	3514      	adds	r5, #20
   dc784:	e7c6      	b.n	dc714 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   dc786:	a911      	add	r1, sp, #68	; 0x44
   dc788:	4630      	mov	r0, r6
   dc78a:	f000 fe03 	bl	dd394 <_ZN6StringC1EOS_>
   dc78e:	e7dc      	b.n	dc74a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   dc790:	2600      	movs	r6, #0
   dc792:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   dc796:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   dc798:	4637      	mov	r7, r6
   dc79a:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   dc79e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dc7a2:	429e      	cmp	r6, r3
   dc7a4:	f280 8097 	bge.w	dc8d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   dc7a8:	0133      	lsls	r3, r6, #4
   dc7aa:	58d3      	ldr	r3, [r2, r3]
   dc7ac:	9308      	str	r3, [sp, #32]
        if (!category) {
   dc7ae:	b90b      	cbnz	r3, dc7b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   dc7b0:	3601      	adds	r6, #1
   dc7b2:	e7f4      	b.n	dc79e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   dc7b4:	fb0a f306 	mul.w	r3, sl, r6
   dc7b8:	9709      	str	r7, [sp, #36]	; 0x24
   dc7ba:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   dc7bc:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   dc7be:	a909      	add	r1, sp, #36	; 0x24
   dc7c0:	a808      	add	r0, sp, #32
   dc7c2:	f7ff fb3c 	bl	dbe3e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   dc7c6:	4683      	mov	fp, r0
   dc7c8:	2800      	cmp	r0, #0
   dc7ca:	d0f1      	beq.n	dc7b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   dc7cc:	4601      	mov	r1, r0
   dc7ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   dc7d0:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   dc7d4:	f10d 031f 	add.w	r3, sp, #31
   dc7d8:	4628      	mov	r0, r5
   dc7da:	f7ff fbaf 	bl	dbf3c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dc7de:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   dc7e2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dc7e4:	f1b8 0f00 	cmp.w	r8, #0
   dc7e8:	d166      	bne.n	dc8b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   dc7ea:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   dc7ee:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   dc7f2:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   dc7f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dc7fa:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   dc7fe:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   dc802:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dc806:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   dc80a:	4293      	cmp	r3, r2
   dc80c:	db1a      	blt.n	dc844 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   dc80e:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   dc812:	f1bb 0f00 	cmp.w	fp, #0
   dc816:	dd4a      	ble.n	dc8ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   dc818:	fb0a f00b 	mul.w	r0, sl, fp
   dc81c:	f7fe fa0c 	bl	dac38 <malloc>
            if (!d) {
   dc820:	9004      	str	r0, [sp, #16]
   dc822:	2800      	cmp	r0, #0
   dc824:	d045      	beq.n	dc8b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   dc826:	e9d5 1200 	ldrd	r1, r2, [r5]
   dc82a:	fb0a 1202 	mla	r2, sl, r2, r1
   dc82e:	f7ff fe71 	bl	dc514 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   dc832:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   dc834:	6828      	ldr	r0, [r5, #0]
   dc836:	9304      	str	r3, [sp, #16]
   dc838:	f7fe fa06 	bl	dac48 <free>
        data_ = d;
   dc83c:	9b04      	ldr	r3, [sp, #16]
   dc83e:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   dc840:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   dc844:	9b01      	ldr	r3, [sp, #4]
   dc846:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   dc84a:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   dc84c:	fb0a f303 	mul.w	r3, sl, r3
   dc850:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   dc854:	f101 0014 	add.w	r0, r1, #20
   dc858:	fb0a b202 	mla	r2, sl, r2, fp
   dc85c:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   dc85e:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   dc860:	f7ff fe58 	bl	dc514 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   dc864:	9904      	ldr	r1, [sp, #16]
   dc866:	b1a9      	cbz	r1, dc894 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   dc868:	9b05      	ldr	r3, [sp, #20]
   dc86a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc86c:	f84b 2003 	str.w	r2, [fp, r3]
   dc870:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   dc874:	808b      	strh	r3, [r1, #4]
   dc876:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   dc87a:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   dc87c:	e9c1 7702 	strd	r7, r7, [r1, #8]
   dc880:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc882:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   dc884:	608b      	str	r3, [r1, #8]
   dc886:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   dc888:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   dc88a:	60cb      	str	r3, [r1, #12]
   dc88c:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   dc88e:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   dc890:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dc892:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   dc894:	686b      	ldr	r3, [r5, #4]
   dc896:	3301      	adds	r3, #1
   dc898:	606b      	str	r3, [r5, #4]
   dc89a:	a813      	add	r0, sp, #76	; 0x4c
   dc89c:	f7ff fc8c 	bl	dc1b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dc8a0:	f1b8 0f00 	cmp.w	r8, #0
   dc8a4:	d008      	beq.n	dc8b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   dc8a6:	a80d      	add	r0, sp, #52	; 0x34
   dc8a8:	f7ff fc86 	bl	dc1b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   dc8ac:	e756      	b.n	dc75c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   dc8ae:	4643      	mov	r3, r8
   dc8b0:	e7c0      	b.n	dc834 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dc8b2:	f04f 0801 	mov.w	r8, #1
   dc8b6:	e7f0      	b.n	dc89a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   dc8b8:	9b01      	ldr	r3, [sp, #4]
   dc8ba:	682d      	ldr	r5, [r5, #0]
   dc8bc:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   dc8c0:	9b08      	ldr	r3, [sp, #32]
   dc8c2:	781b      	ldrb	r3, [r3, #0]
   dc8c4:	b92b      	cbnz	r3, dc8d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   dc8c6:	f8d9 3000 	ldr.w	r3, [r9]
   dc8ca:	9a02      	ldr	r2, [sp, #8]
   dc8cc:	4413      	add	r3, r2
   dc8ce:	7c1b      	ldrb	r3, [r3, #16]
   dc8d0:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   dc8d2:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   dc8d4:	e773      	b.n	dc7be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc8d6:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   dc8d8:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc8da:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   dc8dc:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc8de:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc8e0:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   dc8e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   dc8e4:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc8e6:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dc8e8:	60a2      	str	r2, [r4, #8]
   dc8ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   dc8ec:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc8ee:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc8f0:	60e2      	str	r2, [r4, #12]
   dc8f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   dc8f4:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc8f6:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   dc8f8:	6122      	str	r2, [r4, #16]
   dc8fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   dc8fc:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   dc8fe:	9b03      	ldr	r3, [sp, #12]
   dc900:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   dc902:	6162      	str	r2, [r4, #20]
   dc904:	7623      	strb	r3, [r4, #24]
   dc906:	e7ce      	b.n	dc8a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000dc908 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   dc908:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   dc90a:	4605      	mov	r5, r0
   dc90c:	4b09      	ldr	r3, [pc, #36]	; (dc934 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   dc90e:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   dc912:	4604      	mov	r4, r0
   dc914:	460e      	mov	r6, r1
        filter_(level, filters) {
   dc916:	a801      	add	r0, sp, #4
   dc918:	4611      	mov	r1, r2
   dc91a:	f7f8 fb58 	bl	d4fce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dc91e:	aa01      	add	r2, sp, #4
   dc920:	4631      	mov	r1, r6
   dc922:	4628      	mov	r0, r5
   dc924:	f7ff fedb 	bl	dc6de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dc928:	a801      	add	r0, sp, #4
   dc92a:	f7f8 fb0f 	bl	d4f4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   dc92e:	4620      	mov	r0, r4
   dc930:	b004      	add	sp, #16
   dc932:	bd70      	pop	{r4, r5, r6, pc}
   dc934:	000df368 	.word	0x000df368

000dc938 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   dc938:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc93a:	460f      	mov	r7, r1
   dc93c:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dc93e:	4926      	ldr	r1, [pc, #152]	; (dc9d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   dc940:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dc942:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   dc944:	4616      	mov	r6, r2
   dc946:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dc948:	f001 fffd 	bl	de946 <strcmp>
   dc94c:	bb00      	cbnz	r0, dc990 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   dc94e:	b1e4      	cbz	r4, dc98a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   dc950:	4629      	mov	r1, r5
   dc952:	4668      	mov	r0, sp
   dc954:	f7ff fc8a 	bl	dc26c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dc958:	4920      	ldr	r1, [pc, #128]	; (dc9dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   dc95a:	2024      	movs	r0, #36	; 0x24
   dc95c:	f001 faca 	bl	ddef4 <_ZnwjRKSt9nothrow_t>
   dc960:	4605      	mov	r5, r0
   dc962:	b170      	cbz	r0, dc982 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   dc964:	4669      	mov	r1, sp
   dc966:	a803      	add	r0, sp, #12
   dc968:	f7f8 fb31 	bl	d4fce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dc96c:	aa03      	add	r2, sp, #12
   dc96e:	4631      	mov	r1, r6
   dc970:	4628      	mov	r0, r5
   dc972:	f7ff ffc9 	bl	dc908 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dc976:	a803      	add	r0, sp, #12
   dc978:	f7f8 fae8 	bl	d4f4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   dc97c:	4b18      	ldr	r3, [pc, #96]	; (dc9e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   dc97e:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   dc980:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   dc982:	4668      	mov	r0, sp
   dc984:	f7f8 fae2 	bl	d4f4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dc988:	462c      	mov	r4, r5
}
   dc98a:	4620      	mov	r0, r4
   dc98c:	b007      	add	sp, #28
   dc98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   dc990:	4914      	ldr	r1, [pc, #80]	; (dc9e4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   dc992:	4638      	mov	r0, r7
   dc994:	f001 ffd7 	bl	de946 <strcmp>
   dc998:	b9e0      	cbnz	r0, dc9d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   dc99a:	2c00      	cmp	r4, #0
   dc99c:	d0f5      	beq.n	dc98a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   dc99e:	4629      	mov	r1, r5
   dc9a0:	4668      	mov	r0, sp
   dc9a2:	f7ff fc63 	bl	dc26c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dc9a6:	490d      	ldr	r1, [pc, #52]	; (dc9dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   dc9a8:	2024      	movs	r0, #36	; 0x24
   dc9aa:	f001 faa3 	bl	ddef4 <_ZnwjRKSt9nothrow_t>
   dc9ae:	4605      	mov	r5, r0
   dc9b0:	2800      	cmp	r0, #0
   dc9b2:	d0e6      	beq.n	dc982 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   dc9b4:	4669      	mov	r1, sp
   dc9b6:	a803      	add	r0, sp, #12
   dc9b8:	f7f8 fb09 	bl	d4fce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dc9bc:	aa03      	add	r2, sp, #12
   dc9be:	4631      	mov	r1, r6
   dc9c0:	4628      	mov	r0, r5
   dc9c2:	f7ff ffa1 	bl	dc908 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dc9c6:	a803      	add	r0, sp, #12
   dc9c8:	f7f8 fac0 	bl	d4f4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dc9cc:	4b06      	ldr	r3, [pc, #24]	; (dc9e8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   dc9ce:	602b      	str	r3, [r5, #0]
   dc9d0:	622c      	str	r4, [r5, #32]
}
   dc9d2:	e7d6      	b.n	dc982 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   dc9d4:	2400      	movs	r4, #0
   dc9d6:	e7d8      	b.n	dc98a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   dc9d8:	000dff8e 	.word	0x000dff8e
   dc9dc:	000e0154 	.word	0x000e0154
   dc9e0:	000e0024 	.word	0x000e0024
   dc9e4:	000dff92 	.word	0x000dff92
   dc9e8:	000e000c 	.word	0x000e000c

000dc9ec <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   dc9ec:	4b01      	ldr	r3, [pc, #4]	; (dc9f4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   dc9ee:	4a02      	ldr	r2, [pc, #8]	; (dc9f8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   dc9f0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   dc9f2:	4770      	bx	lr
   dc9f4:	2003e570 	.word	0x2003e570
   dc9f8:	000dffa3 	.word	0x000dffa3

000dc9fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dc9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dca00:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   dca02:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dca06:	4604      	mov	r4, r0
   dca08:	460e      	mov	r6, r1
   dca0a:	4617      	mov	r7, r2
   dca0c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   dca0e:	f001 f889 	bl	ddb24 <_Z16_fetch_usbserialv>
   dca12:	4581      	cmp	r9, r0
   dca14:	d04c      	beq.n	dcab0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   dca16:	792b      	ldrb	r3, [r5, #4]
   dca18:	0719      	lsls	r1, r3, #28
   dca1a:	d504      	bpl.n	dca26 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   dca1c:	696a      	ldr	r2, [r5, #20]
   dca1e:	4954      	ldr	r1, [pc, #336]	; (dcb70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   dca20:	4620      	mov	r0, r4
   dca22:	f7ff fa7c 	bl	dbf1e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   dca26:	f1b8 0f00 	cmp.w	r8, #0
   dca2a:	d00d      	beq.n	dca48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   dca2c:	215b      	movs	r1, #91	; 0x5b
   dca2e:	4620      	mov	r0, r4
   dca30:	f7ff fa69 	bl	dbf06 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   dca34:	4641      	mov	r1, r8
   dca36:	4620      	mov	r0, r4
   dca38:	f7ff fa56 	bl	dbee8 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   dca3c:	6823      	ldr	r3, [r4, #0]
   dca3e:	494d      	ldr	r1, [pc, #308]	; (dcb74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   dca40:	68db      	ldr	r3, [r3, #12]
   dca42:	2202      	movs	r2, #2
   dca44:	4620      	mov	r0, r4
   dca46:	4798      	blx	r3
    if (attr.has_file) {
   dca48:	792b      	ldrb	r3, [r5, #4]
   dca4a:	07da      	lsls	r2, r3, #31
   dca4c:	d523      	bpl.n	dca96 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   dca4e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   dca52:	212f      	movs	r1, #47	; 0x2f
   dca54:	4640      	mov	r0, r8
   dca56:	f001 ffd3 	bl	dea00 <strrchr>
    if (s1) {
   dca5a:	b108      	cbz	r0, dca60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   dca5c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   dca60:	4641      	mov	r1, r8
   dca62:	4620      	mov	r0, r4
   dca64:	f7ff fa40 	bl	dbee8 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   dca68:	792b      	ldrb	r3, [r5, #4]
   dca6a:	079b      	lsls	r3, r3, #30
   dca6c:	d508      	bpl.n	dca80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   dca6e:	213a      	movs	r1, #58	; 0x3a
   dca70:	4620      	mov	r0, r4
   dca72:	f7ff fa48 	bl	dbf06 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   dca76:	68ea      	ldr	r2, [r5, #12]
   dca78:	493f      	ldr	r1, [pc, #252]	; (dcb78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   dca7a:	4620      	mov	r0, r4
   dca7c:	f7ff fa4f 	bl	dbf1e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   dca80:	792a      	ldrb	r2, [r5, #4]
   dca82:	6823      	ldr	r3, [r4, #0]
   dca84:	f012 0f04 	tst.w	r2, #4
   dca88:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   dca8a:	bf14      	ite	ne
   dca8c:	493b      	ldrne	r1, [pc, #236]	; (dcb7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   dca8e:	493c      	ldreq	r1, [pc, #240]	; (dcb80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   dca90:	2202      	movs	r2, #2
            write(": ", 2);
   dca92:	4620      	mov	r0, r4
   dca94:	4798      	blx	r3
    if (attr.has_function) {
   dca96:	792b      	ldrb	r3, [r5, #4]
   dca98:	0758      	lsls	r0, r3, #29
   dca9a:	d51d      	bpl.n	dcad8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   dca9c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   dca9e:	460b      	mov	r3, r1
   dcaa0:	461a      	mov	r2, r3
    for (; *s; ++s) {
   dcaa2:	f813 0b01 	ldrb.w	r0, [r3], #1
   dcaa6:	b160      	cbz	r0, dcac2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   dcaa8:	2820      	cmp	r0, #32
   dcaaa:	d108      	bne.n	dcabe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   dcaac:	4619      	mov	r1, r3
   dcaae:	e7f7      	b.n	dcaa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   dcab0:	4834      	ldr	r0, [pc, #208]	; (dcb84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   dcab2:	f000 f966 	bl	dcd82 <_ZN5spark12NetworkClass9listeningEv>
   dcab6:	2800      	cmp	r0, #0
   dcab8:	d0ad      	beq.n	dca16 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   dcaba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   dcabe:	2828      	cmp	r0, #40	; 0x28
   dcac0:	d1ee      	bne.n	dcaa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   dcac2:	6823      	ldr	r3, [r4, #0]
   dcac4:	1a52      	subs	r2, r2, r1
   dcac6:	68db      	ldr	r3, [r3, #12]
   dcac8:	4620      	mov	r0, r4
   dcaca:	4798      	blx	r3
        write("(): ", 4);
   dcacc:	6823      	ldr	r3, [r4, #0]
   dcace:	492e      	ldr	r1, [pc, #184]	; (dcb88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   dcad0:	68db      	ldr	r3, [r3, #12]
   dcad2:	2204      	movs	r2, #4
   dcad4:	4620      	mov	r0, r4
   dcad6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   dcad8:	2100      	movs	r1, #0
   dcada:	4638      	mov	r0, r7
   dcadc:	f7fd ff62 	bl	da9a4 <log_level_name>
   dcae0:	4601      	mov	r1, r0
    write(s);
   dcae2:	4620      	mov	r0, r4
   dcae4:	f7ff fa00 	bl	dbee8 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   dcae8:	6823      	ldr	r3, [r4, #0]
   dcaea:	4925      	ldr	r1, [pc, #148]	; (dcb80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   dcaec:	68db      	ldr	r3, [r3, #12]
   dcaee:	2202      	movs	r2, #2
   dcaf0:	4620      	mov	r0, r4
   dcaf2:	4798      	blx	r3
    if (msg) {
   dcaf4:	b11e      	cbz	r6, dcafe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   dcaf6:	4631      	mov	r1, r6
   dcaf8:	4620      	mov	r0, r4
   dcafa:	f7ff f9f5 	bl	dbee8 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   dcafe:	792b      	ldrb	r3, [r5, #4]
   dcb00:	f013 0f30 	tst.w	r3, #48	; 0x30
   dcb04:	d02c      	beq.n	dcb60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   dcb06:	6823      	ldr	r3, [r4, #0]
   dcb08:	4920      	ldr	r1, [pc, #128]	; (dcb8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   dcb0a:	68db      	ldr	r3, [r3, #12]
   dcb0c:	2202      	movs	r2, #2
   dcb0e:	4620      	mov	r0, r4
   dcb10:	4798      	blx	r3
        if (attr.has_code) {
   dcb12:	792b      	ldrb	r3, [r5, #4]
   dcb14:	06d9      	lsls	r1, r3, #27
   dcb16:	d50a      	bpl.n	dcb2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   dcb18:	6823      	ldr	r3, [r4, #0]
   dcb1a:	491d      	ldr	r1, [pc, #116]	; (dcb90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   dcb1c:	68db      	ldr	r3, [r3, #12]
   dcb1e:	2207      	movs	r2, #7
   dcb20:	4620      	mov	r0, r4
   dcb22:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   dcb24:	69aa      	ldr	r2, [r5, #24]
   dcb26:	491b      	ldr	r1, [pc, #108]	; (dcb94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   dcb28:	4620      	mov	r0, r4
   dcb2a:	f7ff f9f8 	bl	dbf1e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   dcb2e:	792b      	ldrb	r3, [r5, #4]
   dcb30:	069a      	lsls	r2, r3, #26
   dcb32:	d511      	bpl.n	dcb58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   dcb34:	06db      	lsls	r3, r3, #27
   dcb36:	d505      	bpl.n	dcb44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   dcb38:	6823      	ldr	r3, [r4, #0]
   dcb3a:	4910      	ldr	r1, [pc, #64]	; (dcb7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   dcb3c:	68db      	ldr	r3, [r3, #12]
   dcb3e:	2202      	movs	r2, #2
   dcb40:	4620      	mov	r0, r4
   dcb42:	4798      	blx	r3
            write("details = ", 10);
   dcb44:	6823      	ldr	r3, [r4, #0]
   dcb46:	4914      	ldr	r1, [pc, #80]	; (dcb98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   dcb48:	68db      	ldr	r3, [r3, #12]
   dcb4a:	4620      	mov	r0, r4
   dcb4c:	220a      	movs	r2, #10
   dcb4e:	4798      	blx	r3
            write(attr.details);
   dcb50:	69e9      	ldr	r1, [r5, #28]
   dcb52:	4620      	mov	r0, r4
   dcb54:	f7ff f9c8 	bl	dbee8 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   dcb58:	215d      	movs	r1, #93	; 0x5d
   dcb5a:	4620      	mov	r0, r4
   dcb5c:	f7ff f9d3 	bl	dbf06 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   dcb60:	6823      	ldr	r3, [r4, #0]
   dcb62:	490e      	ldr	r1, [pc, #56]	; (dcb9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   dcb64:	68db      	ldr	r3, [r3, #12]
   dcb66:	4620      	mov	r0, r4
   dcb68:	2202      	movs	r2, #2
}
   dcb6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   dcb6e:	4718      	bx	r3
   dcb70:	000dffa7 	.word	0x000dffa7
   dcb74:	000dffae 	.word	0x000dffae
   dcb78:	000df5cb 	.word	0x000df5cb
   dcb7c:	000dffb1 	.word	0x000dffb1
   dcb80:	000dffb6 	.word	0x000dffb6
   dcb84:	2003e59c 	.word	0x2003e59c
   dcb88:	000dffb4 	.word	0x000dffb4
   dcb8c:	000dffb9 	.word	0x000dffb9
   dcb90:	000dffbc 	.word	0x000dffbc
   dcb94:	000dffc4 	.word	0x000dffc4
   dcb98:	000dffc7 	.word	0x000dffc7
   dcb9c:	000dffd2 	.word	0x000dffd2

000dcba0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dcba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dcba4:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   dcba6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dcbaa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   dcbac:	4605      	mov	r5, r0
   dcbae:	460f      	mov	r7, r1
   dcbb0:	4690      	mov	r8, r2
   dcbb2:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   dcbb4:	f000 ffb6 	bl	ddb24 <_Z16_fetch_usbserialv>
   dcbb8:	4581      	cmp	r9, r0
   dcbba:	d105      	bne.n	dcbc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   dcbbc:	4849      	ldr	r0, [pc, #292]	; (dcce4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   dcbbe:	f000 f8e0 	bl	dcd82 <_ZN5spark12NetworkClass9listeningEv>
   dcbc2:	2800      	cmp	r0, #0
   dcbc4:	f040 808a 	bne.w	dccdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   dcbc8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   dcbca:	4a47      	ldr	r2, [pc, #284]	; (dcce8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   dcbcc:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   dcbce:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   dcbd2:	a801      	add	r0, sp, #4
        strm_(stream) {
   dcbd4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   dcbd6:	f88d 9008 	strb.w	r9, [sp, #8]
   dcbda:	f7ff f878 	bl	dbcce <_ZN5spark10JSONWriter11beginObjectEv>
   dcbde:	4649      	mov	r1, r9
   dcbe0:	4640      	mov	r0, r8
   dcbe2:	f7fd fedf 	bl	da9a4 <log_level_name>
    json.name("l", 1).value(s);
   dcbe6:	4941      	ldr	r1, [pc, #260]	; (dccec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   dcbe8:	4680      	mov	r8, r0
   dcbea:	2201      	movs	r2, #1
   dcbec:	a801      	add	r0, sp, #4
   dcbee:	f7ff f8f7 	bl	dbde0 <_ZN5spark10JSONWriter4nameEPKcj>
   dcbf2:	4641      	mov	r1, r8
   dcbf4:	f7ff f96a 	bl	dbecc <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   dcbf8:	b13f      	cbz	r7, dcc0a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   dcbfa:	493d      	ldr	r1, [pc, #244]	; (dccf0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   dcbfc:	2201      	movs	r2, #1
   dcbfe:	a801      	add	r0, sp, #4
   dcc00:	f7ff f8ee 	bl	dbde0 <_ZN5spark10JSONWriter4nameEPKcj>
   dcc04:	4639      	mov	r1, r7
   dcc06:	f7ff f961 	bl	dbecc <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   dcc0a:	b13e      	cbz	r6, dcc1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   dcc0c:	4939      	ldr	r1, [pc, #228]	; (dccf4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   dcc0e:	2201      	movs	r2, #1
   dcc10:	a801      	add	r0, sp, #4
   dcc12:	f7ff f8e5 	bl	dbde0 <_ZN5spark10JSONWriter4nameEPKcj>
   dcc16:	4631      	mov	r1, r6
   dcc18:	f7ff f958 	bl	dbecc <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   dcc1c:	7923      	ldrb	r3, [r4, #4]
   dcc1e:	07df      	lsls	r7, r3, #31
   dcc20:	d50e      	bpl.n	dcc40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   dcc22:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   dcc24:	212f      	movs	r1, #47	; 0x2f
   dcc26:	4630      	mov	r0, r6
   dcc28:	f001 feea 	bl	dea00 <strrchr>
    if (s1) {
   dcc2c:	b100      	cbz	r0, dcc30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   dcc2e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   dcc30:	4931      	ldr	r1, [pc, #196]	; (dccf8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   dcc32:	2201      	movs	r2, #1
   dcc34:	a801      	add	r0, sp, #4
   dcc36:	f7ff f8d3 	bl	dbde0 <_ZN5spark10JSONWriter4nameEPKcj>
   dcc3a:	4631      	mov	r1, r6
   dcc3c:	f7ff f946 	bl	dbecc <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   dcc40:	7923      	ldrb	r3, [r4, #4]
   dcc42:	079e      	lsls	r6, r3, #30
   dcc44:	d507      	bpl.n	dcc56 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   dcc46:	492d      	ldr	r1, [pc, #180]	; (dccfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   dcc48:	2202      	movs	r2, #2
   dcc4a:	a801      	add	r0, sp, #4
   dcc4c:	f7ff f8c8 	bl	dbde0 <_ZN5spark10JSONWriter4nameEPKcj>
   dcc50:	68e1      	ldr	r1, [r4, #12]
   dcc52:	f7ff f849 	bl	dbce8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   dcc56:	7923      	ldrb	r3, [r4, #4]
   dcc58:	0758      	lsls	r0, r3, #29
   dcc5a:	d514      	bpl.n	dcc86 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   dcc5c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   dcc5e:	4633      	mov	r3, r6
   dcc60:	461f      	mov	r7, r3
    for (; *s; ++s) {
   dcc62:	f813 2b01 	ldrb.w	r2, [r3], #1
   dcc66:	b12a      	cbz	r2, dcc74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   dcc68:	2a20      	cmp	r2, #32
   dcc6a:	d101      	bne.n	dcc70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   dcc6c:	461e      	mov	r6, r3
   dcc6e:	e7f7      	b.n	dcc60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   dcc70:	2a28      	cmp	r2, #40	; 0x28
   dcc72:	d1f5      	bne.n	dcc60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   dcc74:	4922      	ldr	r1, [pc, #136]	; (dcd00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   dcc76:	2202      	movs	r2, #2
   dcc78:	a801      	add	r0, sp, #4
   dcc7a:	f7ff f8b1 	bl	dbde0 <_ZN5spark10JSONWriter4nameEPKcj>
   dcc7e:	1bba      	subs	r2, r7, r6
   dcc80:	4631      	mov	r1, r6
   dcc82:	f7ff f8bd 	bl	dbe00 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   dcc86:	7923      	ldrb	r3, [r4, #4]
   dcc88:	0719      	lsls	r1, r3, #28
   dcc8a:	d507      	bpl.n	dcc9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   dcc8c:	491d      	ldr	r1, [pc, #116]	; (dcd04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   dcc8e:	2201      	movs	r2, #1
   dcc90:	a801      	add	r0, sp, #4
   dcc92:	f7ff f8a5 	bl	dbde0 <_ZN5spark10JSONWriter4nameEPKcj>
   dcc96:	6961      	ldr	r1, [r4, #20]
   dcc98:	f7ff f838 	bl	dbd0c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   dcc9c:	7923      	ldrb	r3, [r4, #4]
   dcc9e:	06da      	lsls	r2, r3, #27
   dcca0:	d508      	bpl.n	dccb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   dcca2:	2204      	movs	r2, #4
   dcca4:	4918      	ldr	r1, [pc, #96]	; (dcd08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   dcca6:	eb0d 0002 	add.w	r0, sp, r2
   dccaa:	f7ff f899 	bl	dbde0 <_ZN5spark10JSONWriter4nameEPKcj>
   dccae:	69a1      	ldr	r1, [r4, #24]
   dccb0:	f7ff f81a 	bl	dbce8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   dccb4:	7923      	ldrb	r3, [r4, #4]
   dccb6:	069b      	lsls	r3, r3, #26
   dccb8:	d507      	bpl.n	dccca <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   dccba:	4914      	ldr	r1, [pc, #80]	; (dcd0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   dccbc:	2206      	movs	r2, #6
   dccbe:	a801      	add	r0, sp, #4
   dccc0:	f7ff f88e 	bl	dbde0 <_ZN5spark10JSONWriter4nameEPKcj>
   dccc4:	69e1      	ldr	r1, [r4, #28]
   dccc6:	f7ff f901 	bl	dbecc <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   dccca:	a801      	add	r0, sp, #4
   dcccc:	f7fe ffe9 	bl	dbca2 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   dccd0:	6a28      	ldr	r0, [r5, #32]
   dccd2:	490f      	ldr	r1, [pc, #60]	; (dcd10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   dccd4:	6803      	ldr	r3, [r0, #0]
   dccd6:	2202      	movs	r2, #2
   dccd8:	68db      	ldr	r3, [r3, #12]
   dccda:	4798      	blx	r3
}
   dccdc:	b005      	add	sp, #20
   dccde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcce2:	bf00      	nop
   dcce4:	2003e59c 	.word	0x2003e59c
   dcce8:	000dfff4 	.word	0x000dfff4
   dccec:	000dff84 	.word	0x000dff84
   dccf0:	000df949 	.word	0x000df949
   dccf4:	000dffd5 	.word	0x000dffd5
   dccf8:	000def59 	.word	0x000def59
   dccfc:	000dffd7 	.word	0x000dffd7
   dcd00:	000dffda 	.word	0x000dffda
   dcd04:	000df15b 	.word	0x000df15b
   dcd08:	000dffdd 	.word	0x000dffdd
   dcd0c:	000dffe2 	.word	0x000dffe2
   dcd10:	000dffd2 	.word	0x000dffd2

000dcd14 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   dcd14:	2300      	movs	r3, #0
   dcd16:	6840      	ldr	r0, [r0, #4]
   dcd18:	461a      	mov	r2, r3
   dcd1a:	f7fd bf2d 	b.w	dab78 <network_connect>

000dcd1e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   dcd1e:	6840      	ldr	r0, [r0, #4]
   dcd20:	2200      	movs	r2, #0
   dcd22:	2102      	movs	r1, #2
   dcd24:	f7fd bf38 	b.w	dab98 <network_disconnect>

000dcd28 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   dcd28:	2200      	movs	r2, #0
   dcd2a:	6840      	ldr	r0, [r0, #4]
   dcd2c:	4611      	mov	r1, r2
   dcd2e:	f7fd bf2b 	b.w	dab88 <network_connecting>

000dcd32 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   dcd32:	2200      	movs	r2, #0
   dcd34:	6840      	ldr	r0, [r0, #4]
   dcd36:	4611      	mov	r1, r2
   dcd38:	f7fd bf36 	b.w	daba8 <network_ready>

000dcd3c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   dcd3c:	2300      	movs	r3, #0
   dcd3e:	6840      	ldr	r0, [r0, #4]
   dcd40:	461a      	mov	r2, r3
   dcd42:	4619      	mov	r1, r3
   dcd44:	f7fd bf38 	b.w	dabb8 <network_on>

000dcd48 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   dcd48:	2300      	movs	r3, #0
   dcd4a:	6840      	ldr	r0, [r0, #4]
   dcd4c:	461a      	mov	r2, r3
   dcd4e:	4619      	mov	r1, r3
   dcd50:	f7fd bf3a 	b.w	dabc8 <network_off>

000dcd54 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   dcd54:	6840      	ldr	r0, [r0, #4]
   dcd56:	2100      	movs	r1, #0
   dcd58:	f7fd bf5e 	b.w	dac18 <network_is_on>

000dcd5c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   dcd5c:	6840      	ldr	r0, [r0, #4]
   dcd5e:	2100      	movs	r1, #0
   dcd60:	f7fd bf62 	b.w	dac28 <network_is_off>

000dcd64 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   dcd64:	6840      	ldr	r0, [r0, #4]
   dcd66:	2200      	movs	r2, #0
   dcd68:	f081 0101 	eor.w	r1, r1, #1
   dcd6c:	f7fd bf34 	b.w	dabd8 <network_listen>

000dcd70 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   dcd70:	6840      	ldr	r0, [r0, #4]
   dcd72:	2200      	movs	r2, #0
   dcd74:	f7fd bf40 	b.w	dabf8 <network_set_listen_timeout>

000dcd78 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   dcd78:	2200      	movs	r2, #0
   dcd7a:	6840      	ldr	r0, [r0, #4]
   dcd7c:	4611      	mov	r1, r2
   dcd7e:	f7fd bf43 	b.w	dac08 <network_get_listen_timeout>

000dcd82 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   dcd82:	2200      	movs	r2, #0
   dcd84:	6840      	ldr	r0, [r0, #4]
   dcd86:	4611      	mov	r1, r2
   dcd88:	f7fd bf2e 	b.w	dabe8 <network_listening>

000dcd8c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   dcd8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   dcd90:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   dcd92:	b095      	sub	sp, #84	; 0x54
   dcd94:	4616      	mov	r6, r2
   dcd96:	460d      	mov	r5, r1
   dcd98:	4607      	mov	r7, r0
    IPAddress addr;
   dcd9a:	f7fe fe23 	bl	db9e4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   dcd9e:	4621      	mov	r1, r4
   dcda0:	2218      	movs	r2, #24
   dcda2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   dcda4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   dcda6:	f001 fd57 	bl	de858 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   dcdaa:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   dcdac:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   dcdb0:	4621      	mov	r1, r4
   dcdb2:	466b      	mov	r3, sp
   dcdb4:	aa0c      	add	r2, sp, #48	; 0x30
   dcdb6:	4630      	mov	r0, r6
   dcdb8:	f7fd fc9c 	bl	da6f4 <netdb_getaddrinfo>
    if (!r) {
   dcdbc:	4604      	mov	r4, r0
   dcdbe:	2800      	cmp	r0, #0
   dcdc0:	d146      	bne.n	dce50 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dcdc2:	4602      	mov	r2, r0
   dcdc4:	2101      	movs	r1, #1
   dcdc6:	6868      	ldr	r0, [r5, #4]
   dcdc8:	f7fd feee 	bl	daba8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dcdcc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dcdce:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dcdd0:	4622      	mov	r2, r4
   dcdd2:	6868      	ldr	r0, [r5, #4]
   dcdd4:	f7fd fee8 	bl	daba8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dcdd8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dcdda:	4681      	mov	r9, r0
        bool ok = false;
   dcddc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dcdde:	2e00      	cmp	r6, #0
   dcde0:	d036      	beq.n	dce50 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   dcde2:	2900      	cmp	r1, #0
   dcde4:	d134      	bne.n	dce50 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   dcde6:	6873      	ldr	r3, [r6, #4]
   dcde8:	2b02      	cmp	r3, #2
   dcdea:	d003      	beq.n	dcdf4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   dcdec:	2b0a      	cmp	r3, #10
   dcdee:	d00b      	beq.n	dce08 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dcdf0:	69f6      	ldr	r6, [r6, #28]
   dcdf2:	e7f4      	b.n	dcdde <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   dcdf4:	f1b8 0f00 	cmp.w	r8, #0
   dcdf8:	d004      	beq.n	dce04 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   dcdfa:	6971      	ldr	r1, [r6, #20]
   dcdfc:	4638      	mov	r0, r7
   dcdfe:	3104      	adds	r1, #4
   dce00:	f7fe fe1d 	bl	dba3e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   dce04:	4641      	mov	r1, r8
   dce06:	e7f3      	b.n	dcdf0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   dce08:	f1b9 0f00 	cmp.w	r9, #0
   dce0c:	d101      	bne.n	dce12 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   dce0e:	4649      	mov	r1, r9
   dce10:	e7ee      	b.n	dcdf0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   dce12:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   dce14:	2210      	movs	r2, #16
   dce16:	a801      	add	r0, sp, #4
   dce18:	f001 fd1e 	bl	de858 <memset>
                    a.v = 6;
   dce1c:	2306      	movs	r3, #6
   dce1e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   dce22:	ad01      	add	r5, sp, #4
   dce24:	f104 0308 	add.w	r3, r4, #8
   dce28:	3418      	adds	r4, #24
   dce2a:	6818      	ldr	r0, [r3, #0]
   dce2c:	6859      	ldr	r1, [r3, #4]
   dce2e:	462a      	mov	r2, r5
   dce30:	c203      	stmia	r2!, {r0, r1}
   dce32:	3308      	adds	r3, #8
   dce34:	42a3      	cmp	r3, r4
   dce36:	4615      	mov	r5, r2
   dce38:	d1f7      	bne.n	dce2a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   dce3a:	a901      	add	r1, sp, #4
   dce3c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   dce3e:	ad07      	add	r5, sp, #28
   dce40:	f7fe fdde 	bl	dba00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dce44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dce46:	1d3c      	adds	r4, r7, #4
   dce48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dce4a:	682b      	ldr	r3, [r5, #0]
   dce4c:	7023      	strb	r3, [r4, #0]
   dce4e:	e7de      	b.n	dce0e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   dce50:	9800      	ldr	r0, [sp, #0]
   dce52:	f7fd fc47 	bl	da6e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   dce56:	4638      	mov	r0, r7
   dce58:	b015      	add	sp, #84	; 0x54
   dce5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000dce60 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   dce60:	4b02      	ldr	r3, [pc, #8]	; (dce6c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   dce62:	4a03      	ldr	r2, [pc, #12]	; (dce70 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   dce64:	601a      	str	r2, [r3, #0]
   dce66:	2200      	movs	r2, #0
   dce68:	605a      	str	r2, [r3, #4]

} // spark
   dce6a:	4770      	bx	lr
   dce6c:	2003e59c 	.word	0x2003e59c
   dce70:	000e006c 	.word	0x000e006c

000dce74 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   dce74:	b508      	push	{r3, lr}
            return &Wire1;
   dce76:	f001 f817 	bl	ddea8 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   dce7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   dce7e:	f7fe bd1f 	b.w	db8c0 <_ZN7TwoWire4lockEv>

000dce82 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   dce82:	b510      	push	{r4, lr}
   dce84:	4604      	mov	r4, r0
    lock_(_lock)
   dce86:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   dce88:	b109      	cbz	r1, dce8e <_ZN4PMICC1Eb+0xc>
        lock();
   dce8a:	f7ff fff3 	bl	dce74 <_ZN4PMIC4lockEv.constprop.0>
}
   dce8e:	4620      	mov	r0, r4
   dce90:	bd10      	pop	{r4, pc}

000dce92 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   dce92:	b508      	push	{r3, lr}
            return &Wire1;
   dce94:	f001 f808 	bl	ddea8 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   dce98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   dce9c:	f7fe bd19 	b.w	db8d2 <_ZN7TwoWire6unlockEv>

000dcea0 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   dcea0:	b510      	push	{r4, lr}
    if (lock_) {
   dcea2:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   dcea4:	4604      	mov	r4, r0
    if (lock_) {
   dcea6:	b10b      	cbz	r3, dceac <_ZN4PMICD1Ev+0xc>
        unlock();
   dcea8:	f7ff fff3 	bl	dce92 <_ZN4PMIC6unlockEv>
}
   dceac:	4620      	mov	r0, r4
   dceae:	bd10      	pop	{r4, pc}

000dceb0 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   dceb0:	b510      	push	{r4, lr}
   dceb2:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   dceb4:	6800      	ldr	r0, [r0, #0]
   dceb6:	f7ff ffec 	bl	dce92 <_ZN4PMIC6unlockEv>
   dceba:	4620      	mov	r0, r4
   dcebc:	bd10      	pop	{r4, pc}

000dcebe <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   dcebe:	b530      	push	{r4, r5, lr}
   dcec0:	b087      	sub	sp, #28
   dcec2:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dcec4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   dcec6:	f7ff ffd5 	bl	dce74 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dceca:	236b      	movs	r3, #107	; 0x6b
   dcecc:	f88d 3008 	strb.w	r3, [sp, #8]
   dced0:	2300      	movs	r3, #0
   dced2:	2401      	movs	r4, #1
   dced4:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   dced6:	230a      	movs	r3, #10
   dced8:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dceda:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   dcede:	f000 ffe3 	bl	ddea8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   dcee2:	a902      	add	r1, sp, #8
   dcee4:	f7fe fcd0 	bl	db888 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   dcee8:	f000 ffde 	bl	ddea8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   dceec:	6803      	ldr	r3, [r0, #0]
   dceee:	4629      	mov	r1, r5
   dcef0:	689b      	ldr	r3, [r3, #8]
   dcef2:	4798      	blx	r3
            return &Wire1;
   dcef4:	f000 ffd8 	bl	ddea8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   dcef8:	4621      	mov	r1, r4
   dcefa:	f7fe fcdd 	bl	db8b8 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   dcefe:	9403      	str	r4, [sp, #12]
            return &Wire1;
   dcf00:	f000 ffd2 	bl	ddea8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   dcf04:	a902      	add	r1, sp, #8
   dcf06:	f7fe fc8f 	bl	db828 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   dcf0a:	f000 ffcd 	bl	ddea8 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   dcf0e:	6803      	ldr	r3, [r0, #0]
   dcf10:	695b      	ldr	r3, [r3, #20]
   dcf12:	4798      	blx	r3
   dcf14:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   dcf16:	a801      	add	r0, sp, #4
   dcf18:	f7ff ffca 	bl	dceb0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   dcf1c:	b2e0      	uxtb	r0, r4
   dcf1e:	b007      	add	sp, #28
   dcf20:	bd30      	pop	{r4, r5, pc}

000dcf22 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   dcf22:	b570      	push	{r4, r5, r6, lr}
   dcf24:	b086      	sub	sp, #24
   dcf26:	4614      	mov	r4, r2
   dcf28:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dcf2a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   dcf2c:	f7ff ffa2 	bl	dce74 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dcf30:	236b      	movs	r3, #107	; 0x6b
   dcf32:	f88d 3008 	strb.w	r3, [sp, #8]
   dcf36:	2300      	movs	r3, #0
   dcf38:	9303      	str	r3, [sp, #12]
   dcf3a:	2601      	movs	r6, #1
    timeout_ = ms;
   dcf3c:	230a      	movs	r3, #10
   dcf3e:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dcf40:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   dcf44:	f000 ffb0 	bl	ddea8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   dcf48:	a902      	add	r1, sp, #8
   dcf4a:	f7fe fc9d 	bl	db888 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   dcf4e:	f000 ffab 	bl	ddea8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   dcf52:	6803      	ldr	r3, [r0, #0]
   dcf54:	4629      	mov	r1, r5
   dcf56:	689b      	ldr	r3, [r3, #8]
   dcf58:	4798      	blx	r3
            return &Wire1;
   dcf5a:	f000 ffa5 	bl	ddea8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   dcf5e:	6803      	ldr	r3, [r0, #0]
   dcf60:	4621      	mov	r1, r4
   dcf62:	689b      	ldr	r3, [r3, #8]
   dcf64:	4798      	blx	r3
            return &Wire1;
   dcf66:	f000 ff9f 	bl	ddea8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   dcf6a:	4631      	mov	r1, r6
   dcf6c:	f7fe fca4 	bl	db8b8 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   dcf70:	a801      	add	r0, sp, #4
   dcf72:	f7ff ff9d 	bl	dceb0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   dcf76:	b006      	add	sp, #24
   dcf78:	bd70      	pop	{r4, r5, r6, pc}

000dcf7a <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   dcf7a:	b513      	push	{r0, r1, r4, lr}
   dcf7c:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dcf7e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   dcf80:	f7ff ff78 	bl	dce74 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   dcf84:	2101      	movs	r1, #1
   dcf86:	4620      	mov	r0, r4
   dcf88:	f7ff ff99 	bl	dcebe <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   dcf8c:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   dcf90:	f040 0210 	orr.w	r2, r0, #16
   dcf94:	2101      	movs	r1, #1
   dcf96:	4620      	mov	r0, r4
   dcf98:	f7ff ffc3 	bl	dcf22 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   dcf9c:	a801      	add	r0, sp, #4
   dcf9e:	f7ff ff87 	bl	dceb0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   dcfa2:	2001      	movs	r0, #1
   dcfa4:	b002      	add	sp, #8
   dcfa6:	bd10      	pop	{r4, pc}

000dcfa8 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   dcfa8:	b513      	push	{r0, r1, r4, lr}
   dcfaa:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dcfac:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   dcfae:	f7ff ff61 	bl	dce74 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   dcfb2:	2101      	movs	r1, #1
   dcfb4:	4620      	mov	r0, r4
   dcfb6:	f7ff ff82 	bl	dcebe <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   dcfba:	2101      	movs	r1, #1
   dcfbc:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   dcfc0:	4620      	mov	r0, r4
   dcfc2:	f7ff ffae 	bl	dcf22 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   dcfc6:	a801      	add	r0, sp, #4
   dcfc8:	f7ff ff72 	bl	dceb0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   dcfcc:	2001      	movs	r0, #1
   dcfce:	b002      	add	sp, #8
   dcfd0:	bd10      	pop	{r4, pc}

000dcfd2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   dcfd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dcfd4:	4606      	mov	r6, r0
   dcfd6:	460d      	mov	r5, r1
  size_t n = 0;
   dcfd8:	188f      	adds	r7, r1, r2
   dcfda:	2400      	movs	r4, #0
  while (size--) {
   dcfdc:	42bd      	cmp	r5, r7
   dcfde:	d00c      	beq.n	dcffa <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   dcfe0:	6833      	ldr	r3, [r6, #0]
   dcfe2:	f815 1b01 	ldrb.w	r1, [r5], #1
   dcfe6:	689b      	ldr	r3, [r3, #8]
   dcfe8:	4630      	mov	r0, r6
   dcfea:	4798      	blx	r3
     if (chunk>=0)
   dcfec:	1e03      	subs	r3, r0, #0
   dcfee:	db01      	blt.n	dcff4 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   dcff0:	441c      	add	r4, r3
  while (size--) {
   dcff2:	e7f3      	b.n	dcfdc <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   dcff4:	2c00      	cmp	r4, #0
   dcff6:	bf08      	it	eq
   dcff8:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   dcffa:	4620      	mov	r0, r4
   dcffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dcffe <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   dcffe:	b513      	push	{r0, r1, r4, lr}
   dd000:	4604      	mov	r4, r0
    }
   dd002:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   dd004:	b159      	cbz	r1, dd01e <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   dd006:	9101      	str	r1, [sp, #4]
   dd008:	f001 fccd 	bl	de9a6 <strlen>
   dd00c:	6823      	ldr	r3, [r4, #0]
   dd00e:	9901      	ldr	r1, [sp, #4]
   dd010:	68db      	ldr	r3, [r3, #12]
   dd012:	4602      	mov	r2, r0
   dd014:	4620      	mov	r0, r4
    }
   dd016:	b002      	add	sp, #8
   dd018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   dd01c:	4718      	bx	r3
    }
   dd01e:	b002      	add	sp, #8
   dd020:	bd10      	pop	{r4, pc}

000dd022 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   dd022:	b508      	push	{r3, lr}
  return write(str);
   dd024:	f7ff ffeb 	bl	dcffe <_ZN5Print5writeEPKc>
}
   dd028:	bd08      	pop	{r3, pc}

000dd02a <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   dd02a:	6803      	ldr	r3, [r0, #0]
   dd02c:	689b      	ldr	r3, [r3, #8]
   dd02e:	4718      	bx	r3

000dd030 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   dd030:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   dd032:	210d      	movs	r1, #13
{
   dd034:	4605      	mov	r5, r0
  size_t n = print('\r');
   dd036:	f7ff fff8 	bl	dd02a <_ZN5Print5printEc>
  n += print('\n');
   dd03a:	210a      	movs	r1, #10
  size_t n = print('\r');
   dd03c:	4604      	mov	r4, r0
  n += print('\n');
   dd03e:	4628      	mov	r0, r5
   dd040:	f7ff fff3 	bl	dd02a <_ZN5Print5printEc>
  return n;
}
   dd044:	4420      	add	r0, r4
   dd046:	bd38      	pop	{r3, r4, r5, pc}

000dd048 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   dd048:	b530      	push	{r4, r5, lr}
   dd04a:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   dd04c:	2300      	movs	r3, #0
   dd04e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   dd052:	2a01      	cmp	r2, #1
   dd054:	bf98      	it	ls
   dd056:	220a      	movls	r2, #10
   dd058:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   dd05a:	460d      	mov	r5, r1
   dd05c:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   dd060:	fb01 5312 	mls	r3, r1, r2, r5
   dd064:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dd068:	2b09      	cmp	r3, #9
   dd06a:	bf94      	ite	ls
   dd06c:	3330      	addls	r3, #48	; 0x30
   dd06e:	3337      	addhi	r3, #55	; 0x37
   dd070:	b2db      	uxtb	r3, r3
  } while(n);
   dd072:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dd074:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   dd078:	d9ef      	bls.n	dd05a <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   dd07a:	4621      	mov	r1, r4
   dd07c:	f7ff ffbf 	bl	dcffe <_ZN5Print5writeEPKc>
}
   dd080:	b00b      	add	sp, #44	; 0x2c
   dd082:	bd30      	pop	{r4, r5, pc}

000dd084 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   dd084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd088:	b086      	sub	sp, #24
   dd08a:	af00      	add	r7, sp, #0
   dd08c:	4605      	mov	r5, r0
   dd08e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   dd090:	1d38      	adds	r0, r7, #4
   dd092:	2114      	movs	r1, #20
{
   dd094:	4614      	mov	r4, r2
    va_copy(args2, args);
   dd096:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   dd098:	f7fd fdfe 	bl	dac98 <vsnprintf>

    if (n<bufsize)
   dd09c:	2813      	cmp	r0, #19
   dd09e:	d80e      	bhi.n	dd0be <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   dd0a0:	1d39      	adds	r1, r7, #4
   dd0a2:	4628      	mov	r0, r5
   dd0a4:	f7ff ffab 	bl	dcffe <_ZN5Print5writeEPKc>
   dd0a8:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   dd0aa:	b11e      	cbz	r6, dd0b4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   dd0ac:	4628      	mov	r0, r5
   dd0ae:	f7ff ffbf 	bl	dd030 <_ZN5Print7printlnEv>
   dd0b2:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   dd0b4:	4620      	mov	r0, r4
   dd0b6:	3718      	adds	r7, #24
   dd0b8:	46bd      	mov	sp, r7
   dd0ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   dd0be:	f100 0308 	add.w	r3, r0, #8
   dd0c2:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   dd0c6:	46e8      	mov	r8, sp
        char bigger[n+1];
   dd0c8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   dd0cc:	4622      	mov	r2, r4
   dd0ce:	1c41      	adds	r1, r0, #1
   dd0d0:	683b      	ldr	r3, [r7, #0]
   dd0d2:	4668      	mov	r0, sp
   dd0d4:	f7fd fde0 	bl	dac98 <vsnprintf>
  return write(str);
   dd0d8:	4669      	mov	r1, sp
   dd0da:	4628      	mov	r0, r5
   dd0dc:	f7ff ff8f 	bl	dcffe <_ZN5Print5writeEPKc>
   dd0e0:	4604      	mov	r4, r0
   dd0e2:	46c5      	mov	sp, r8
   dd0e4:	e7e1      	b.n	dd0aa <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000dd0e6 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   dd0e6:	b510      	push	{r4, lr}
  if (0 == max) {
   dd0e8:	4604      	mov	r4, r0
   dd0ea:	b128      	cbz	r0, dd0f8 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   dd0ec:	f001 fbe0 	bl	de8b0 <rand>
   dd0f0:	fb90 f3f4 	sdiv	r3, r0, r4
   dd0f4:	fb03 0414 	mls	r4, r3, r4, r0
}
   dd0f8:	4620      	mov	r0, r4
   dd0fa:	bd10      	pop	{r4, pc}

000dd0fc <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   dd0fc:	4288      	cmp	r0, r1
{
   dd0fe:	b510      	push	{r4, lr}
   dd100:	4604      	mov	r4, r0
  if (min >= max) {
   dd102:	da03      	bge.n	dd10c <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   dd104:	1a08      	subs	r0, r1, r0
   dd106:	f7ff ffee 	bl	dd0e6 <_Z6randomi>
   dd10a:	4404      	add	r4, r0
}
   dd10c:	4620      	mov	r0, r4
   dd10e:	bd10      	pop	{r4, pc}

000dd110 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   dd110:	4b01      	ldr	r3, [pc, #4]	; (dd118 <_GLOBAL__sub_I_RGB+0x8>)
   dd112:	2200      	movs	r2, #0
   dd114:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   dd116:	4770      	bx	lr
   dd118:	2003e5a4 	.word	0x2003e5a4

000dd11c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   dd11c:	2100      	movs	r1, #0
   dd11e:	f7fd bb29 	b.w	da774 <hal_spi_acquire>

000dd122 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   dd122:	2100      	movs	r1, #0
   dd124:	f7fd bb2e 	b.w	da784 <hal_spi_release>

000dd128 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   dd128:	b510      	push	{r4, lr}
   dd12a:	4604      	mov	r4, r0
   dd12c:	4608      	mov	r0, r1
{
    _spi = spi;
   dd12e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   dd130:	f7fd fb00 	bl	da734 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   dd134:	2300      	movs	r3, #0
   dd136:	6063      	str	r3, [r4, #4]
}
   dd138:	4620      	mov	r0, r4
   dd13a:	bd10      	pop	{r4, pc}

000dd13c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   dd13c:	b510      	push	{r4, lr}
   dd13e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   dd140:	7800      	ldrb	r0, [r0, #0]
   dd142:	f7ff ffeb 	bl	dd11c <_ZN8SPIClass4lockEv.isra.0>
   dd146:	b948      	cbnz	r0, dd15c <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   dd148:	7820      	ldrb	r0, [r4, #0]
   dd14a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   dd14e:	f7fd fad9 	bl	da704 <hal_spi_begin>
        unlock();
   dd152:	7820      	ldrb	r0, [r4, #0]
    }
}
   dd154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   dd158:	f7ff bfe3 	b.w	dd122 <_ZN8SPIClass6unlockEv.isra.0>
}
   dd15c:	bd10      	pop	{r4, pc}

000dd15e <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   dd15e:	b510      	push	{r4, lr}
   dd160:	4604      	mov	r4, r0
    if (!lock())
   dd162:	7800      	ldrb	r0, [r0, #0]
   dd164:	f7ff ffda 	bl	dd11c <_ZN8SPIClass4lockEv.isra.0>
   dd168:	b938      	cbnz	r0, dd17a <_ZN8SPIClass3endEv+0x1c>
    {
        hal_spi_end(_spi);
   dd16a:	7820      	ldrb	r0, [r4, #0]
   dd16c:	f7fd fad2 	bl	da714 <hal_spi_end>
        unlock();
   dd170:	7820      	ldrb	r0, [r4, #0]
    }
}
   dd172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   dd176:	f7ff bfd4 	b.w	dd122 <_ZN8SPIClass6unlockEv.isra.0>
}
   dd17a:	bd10      	pop	{r4, pc}

000dd17c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   dd17c:	7800      	ldrb	r0, [r0, #0]
   dd17e:	f7ff bfd0 	b.w	dd122 <_ZN8SPIClass6unlockEv.isra.0>
	...

000dd184 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   dd184:	0840      	lsrs	r0, r0, #1
{
   dd186:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   dd188:	6018      	str	r0, [r3, #0]
   dd18a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   dd18c:	6818      	ldr	r0, [r3, #0]
   dd18e:	4288      	cmp	r0, r1
   dd190:	b2e5      	uxtb	r5, r4
   dd192:	d906      	bls.n	dd1a2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   dd194:	3401      	adds	r4, #1
   dd196:	2c08      	cmp	r4, #8
   dd198:	d002      	beq.n	dd1a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   dd19a:	0840      	lsrs	r0, r0, #1
   dd19c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   dd19e:	e7f5      	b.n	dd18c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   dd1a0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   dd1a2:	4b02      	ldr	r3, [pc, #8]	; (dd1ac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   dd1a4:	5d5b      	ldrb	r3, [r3, r5]
   dd1a6:	7013      	strb	r3, [r2, #0]
}
   dd1a8:	bd30      	pop	{r4, r5, pc}
   dd1aa:	bf00      	nop
   dd1ac:	000e00a0 	.word	0x000e00a0

000dd1b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   dd1b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dd1b4:	4606      	mov	r6, r0
   dd1b6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   dd1b8:	7800      	ldrb	r0, [r0, #0]
{
   dd1ba:	460c      	mov	r4, r1
    CHECK(lock());
   dd1bc:	f7ff ffae 	bl	dd11c <_ZN8SPIClass4lockEv.isra.0>
   dd1c0:	2800      	cmp	r0, #0
   dd1c2:	db1b      	blt.n	dd1fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   dd1c4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   dd1c6:	2214      	movs	r2, #20
   dd1c8:	2100      	movs	r1, #0
   dd1ca:	a809      	add	r0, sp, #36	; 0x24
   dd1cc:	f001 fb44 	bl	de858 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   dd1d0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   dd1d2:	2200      	movs	r2, #0
   dd1d4:	a909      	add	r1, sp, #36	; 0x24
   dd1d6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   dd1d8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   dd1dc:	f7fd faba 	bl	da754 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   dd1e0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   dd1e4:	b113      	cbz	r3, dd1ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   dd1e6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   dd1ea:	b155      	cbz	r5, dd202 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   dd1ec:	2700      	movs	r7, #0
   dd1ee:	46b9      	mov	r9, r7
   dd1f0:	46b8      	mov	r8, r7
   dd1f2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   dd1f4:	7923      	ldrb	r3, [r4, #4]
   dd1f6:	b15d      	cbz	r5, dd210 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   dd1f8:	b1c3      	cbz	r3, dd22c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   dd1fa:	2000      	movs	r0, #0
}
   dd1fc:	b00f      	add	sp, #60	; 0x3c
   dd1fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   dd202:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   dd206:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   dd20a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   dd20e:	e7f1      	b.n	dd1f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   dd210:	2b00      	cmp	r3, #0
   dd212:	d135      	bne.n	dd280 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   dd214:	68a3      	ldr	r3, [r4, #8]
   dd216:	4543      	cmp	r3, r8
   dd218:	d108      	bne.n	dd22c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   dd21a:	f88d 9020 	strb.w	r9, [sp, #32]
   dd21e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   dd222:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   dd226:	89a3      	ldrh	r3, [r4, #12]
   dd228:	429a      	cmp	r2, r3
   dd22a:	d0e6      	beq.n	dd1fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   dd22c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   dd22e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   dd230:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   dd234:	980a      	ldr	r0, [sp, #40]	; 0x28
   dd236:	ab04      	add	r3, sp, #16
   dd238:	f10d 020f 	add.w	r2, sp, #15
   dd23c:	f7ff ffa2 	bl	dd184 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   dd240:	7921      	ldrb	r1, [r4, #4]
   dd242:	b985      	cbnz	r5, dd266 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   dd244:	b989      	cbnz	r1, dd26a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   dd246:	68a3      	ldr	r3, [r4, #8]
   dd248:	4543      	cmp	r3, r8
   dd24a:	d30e      	bcc.n	dd26a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   dd24c:	f88d 9020 	strb.w	r9, [sp, #32]
   dd250:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   dd254:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   dd258:	89a3      	ldrh	r3, [r4, #12]
   dd25a:	429a      	cmp	r2, r3
   dd25c:	d105      	bne.n	dd26a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   dd25e:	9b04      	ldr	r3, [sp, #16]
   dd260:	4543      	cmp	r3, r8
   dd262:	d102      	bne.n	dd26a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   dd264:	e7c9      	b.n	dd1fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   dd266:	2900      	cmp	r1, #0
   dd268:	d1f9      	bne.n	dd25e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   dd26a:	2300      	movs	r3, #0
   dd26c:	9301      	str	r3, [sp, #4]
   dd26e:	7b63      	ldrb	r3, [r4, #13]
   dd270:	9300      	str	r3, [sp, #0]
   dd272:	f89d 200f 	ldrb.w	r2, [sp, #15]
   dd276:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   dd278:	7830      	ldrb	r0, [r6, #0]
   dd27a:	f7fd fa73 	bl	da764 <hal_spi_set_settings>
   dd27e:	e7bc      	b.n	dd1fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   dd280:	e9cd 5500 	strd	r5, r5, [sp]
   dd284:	462b      	mov	r3, r5
   dd286:	462a      	mov	r2, r5
   dd288:	2101      	movs	r1, #1
   dd28a:	e7f5      	b.n	dd278 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000dd28c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   dd28c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   dd28e:	7800      	ldrb	r0, [r0, #0]
   dd290:	f7fd fa48 	bl	da724 <hal_spi_transfer>
}
   dd294:	b2c0      	uxtb	r0, r0
   dd296:	bd08      	pop	{r3, pc}

000dd298 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   dd298:	4770      	bx	lr

000dd29a <_ZN8SPIClass15detachInterruptEv>:
   dd29a:	4770      	bx	lr

000dd29c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   dd29c:	b510      	push	{r4, lr}
   dd29e:	4604      	mov	r4, r0
{
	free(buffer);
   dd2a0:	6800      	ldr	r0, [r0, #0]
   dd2a2:	f7fd fcd1 	bl	dac48 <free>
}
   dd2a6:	4620      	mov	r0, r4
   dd2a8:	bd10      	pop	{r4, pc}

000dd2aa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   dd2aa:	b510      	push	{r4, lr}
   dd2ac:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   dd2ae:	6800      	ldr	r0, [r0, #0]
   dd2b0:	b108      	cbz	r0, dd2b6 <_ZN6String10invalidateEv+0xc>
   dd2b2:	f7fd fcc9 	bl	dac48 <free>
	buffer = NULL;
   dd2b6:	2300      	movs	r3, #0
	capacity = len = 0;
   dd2b8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   dd2bc:	6023      	str	r3, [r4, #0]
}
   dd2be:	bd10      	pop	{r4, pc}

000dd2c0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   dd2c0:	b538      	push	{r3, r4, r5, lr}
   dd2c2:	4604      	mov	r4, r0
   dd2c4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   dd2c6:	6800      	ldr	r0, [r0, #0]
   dd2c8:	3101      	adds	r1, #1
   dd2ca:	f7fd fcc5 	bl	dac58 <realloc>
	if (newbuffer) {
   dd2ce:	b110      	cbz	r0, dd2d6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   dd2d0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   dd2d4:	2001      	movs	r0, #1
	}
	return 0;
}
   dd2d6:	bd38      	pop	{r3, r4, r5, pc}

000dd2d8 <_ZN6String7reserveEj>:
{
   dd2d8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   dd2da:	6803      	ldr	r3, [r0, #0]
{
   dd2dc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   dd2de:	b123      	cbz	r3, dd2ea <_ZN6String7reserveEj+0x12>
   dd2e0:	6843      	ldr	r3, [r0, #4]
   dd2e2:	428b      	cmp	r3, r1
   dd2e4:	d301      	bcc.n	dd2ea <_ZN6String7reserveEj+0x12>
   dd2e6:	2001      	movs	r0, #1
}
   dd2e8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   dd2ea:	4620      	mov	r0, r4
   dd2ec:	f7ff ffe8 	bl	dd2c0 <_ZN6String12changeBufferEj>
   dd2f0:	2800      	cmp	r0, #0
   dd2f2:	d0f9      	beq.n	dd2e8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   dd2f4:	68a3      	ldr	r3, [r4, #8]
   dd2f6:	2b00      	cmp	r3, #0
   dd2f8:	d1f5      	bne.n	dd2e6 <_ZN6String7reserveEj+0xe>
   dd2fa:	6822      	ldr	r2, [r4, #0]
   dd2fc:	7013      	strb	r3, [r2, #0]
   dd2fe:	e7f2      	b.n	dd2e6 <_ZN6String7reserveEj+0xe>

000dd300 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dd300:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dd302:	460d      	mov	r5, r1
	if (!reserve(length)) {
   dd304:	4611      	mov	r1, r2
   dd306:	9201      	str	r2, [sp, #4]
{
   dd308:	4604      	mov	r4, r0
	if (!reserve(length)) {
   dd30a:	f7ff ffe5 	bl	dd2d8 <_ZN6String7reserveEj>
   dd30e:	9a01      	ldr	r2, [sp, #4]
   dd310:	b928      	cbnz	r0, dd31e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   dd312:	4620      	mov	r0, r4
   dd314:	f7ff ffc9 	bl	dd2aa <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   dd318:	4620      	mov	r0, r4
   dd31a:	b003      	add	sp, #12
   dd31c:	bd30      	pop	{r4, r5, pc}
	len = length;
   dd31e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   dd320:	4629      	mov	r1, r5
   dd322:	6820      	ldr	r0, [r4, #0]
   dd324:	f001 fa70 	bl	de808 <memcpy>
	buffer[len] = 0;
   dd328:	6822      	ldr	r2, [r4, #0]
   dd32a:	68a3      	ldr	r3, [r4, #8]
   dd32c:	2100      	movs	r1, #0
   dd32e:	54d1      	strb	r1, [r2, r3]
	return *this;
   dd330:	e7f2      	b.n	dd318 <_ZN6String4copyEPKcj+0x18>

000dd332 <_ZN6StringC1EPKc>:
	buffer = NULL;
   dd332:	2300      	movs	r3, #0
String::String(const char *cstr)
   dd334:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   dd336:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   dd33a:	4604      	mov	r4, r0
	len = 0;
   dd33c:	6083      	str	r3, [r0, #8]
	flags = 0;
   dd33e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   dd340:	b141      	cbz	r1, dd354 <_ZN6StringC1EPKc+0x22>
   dd342:	4608      	mov	r0, r1
   dd344:	9101      	str	r1, [sp, #4]
   dd346:	f001 fb2e 	bl	de9a6 <strlen>
   dd34a:	9901      	ldr	r1, [sp, #4]
   dd34c:	4602      	mov	r2, r0
   dd34e:	4620      	mov	r0, r4
   dd350:	f7ff ffd6 	bl	dd300 <_ZN6String4copyEPKcj>
}
   dd354:	4620      	mov	r0, r4
   dd356:	b002      	add	sp, #8
   dd358:	bd10      	pop	{r4, pc}

000dd35a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   dd35a:	b538      	push	{r3, r4, r5, lr}
   dd35c:	4605      	mov	r5, r0
	if (buffer) {
   dd35e:	6800      	ldr	r0, [r0, #0]
{
   dd360:	460c      	mov	r4, r1
	if (buffer) {
   dd362:	b168      	cbz	r0, dd380 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   dd364:	686a      	ldr	r2, [r5, #4]
   dd366:	688b      	ldr	r3, [r1, #8]
   dd368:	429a      	cmp	r2, r3
   dd36a:	d307      	bcc.n	dd37c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   dd36c:	6809      	ldr	r1, [r1, #0]
   dd36e:	f001 faf4 	bl	de95a <strcpy>
			len = rhs.len;
   dd372:	68a3      	ldr	r3, [r4, #8]
   dd374:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   dd376:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   dd378:	60a3      	str	r3, [r4, #8]
}
   dd37a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   dd37c:	f7fd fc64 	bl	dac48 <free>
	buffer = rhs.buffer;
   dd380:	6823      	ldr	r3, [r4, #0]
   dd382:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   dd384:	6863      	ldr	r3, [r4, #4]
   dd386:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   dd388:	68a3      	ldr	r3, [r4, #8]
   dd38a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   dd38c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   dd38e:	e9c4 3300 	strd	r3, r3, [r4]
   dd392:	e7f1      	b.n	dd378 <_ZN6String4moveERS_+0x1e>

000dd394 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   dd394:	b510      	push	{r4, lr}
	buffer = NULL;
   dd396:	2300      	movs	r3, #0
	capacity = 0;
   dd398:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   dd39c:	4604      	mov	r4, r0
	len = 0;
   dd39e:	6083      	str	r3, [r0, #8]
	flags = 0;
   dd3a0:	7303      	strb	r3, [r0, #12]
	move(rval);
   dd3a2:	f7ff ffda 	bl	dd35a <_ZN6String4moveERS_>
}
   dd3a6:	4620      	mov	r0, r4
   dd3a8:	bd10      	pop	{r4, pc}

000dd3aa <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   dd3aa:	4288      	cmp	r0, r1
{
   dd3ac:	b510      	push	{r4, lr}
   dd3ae:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   dd3b0:	d005      	beq.n	dd3be <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   dd3b2:	680b      	ldr	r3, [r1, #0]
   dd3b4:	b12b      	cbz	r3, dd3c2 <_ZN6StringaSERKS_+0x18>
   dd3b6:	688a      	ldr	r2, [r1, #8]
   dd3b8:	4619      	mov	r1, r3
   dd3ba:	f7ff ffa1 	bl	dd300 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   dd3be:	4620      	mov	r0, r4
   dd3c0:	bd10      	pop	{r4, pc}
	else invalidate();
   dd3c2:	f7ff ff72 	bl	dd2aa <_ZN6String10invalidateEv>
   dd3c6:	e7fa      	b.n	dd3be <_ZN6StringaSERKS_+0x14>

000dd3c8 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   dd3c8:	b510      	push	{r4, lr}
	buffer = NULL;
   dd3ca:	2300      	movs	r3, #0
String::String(const String &value)
   dd3cc:	4604      	mov	r4, r0
	capacity = 0;
   dd3ce:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   dd3d2:	6083      	str	r3, [r0, #8]
	flags = 0;
   dd3d4:	7303      	strb	r3, [r0, #12]
	*this = value;
   dd3d6:	f7ff ffe8 	bl	dd3aa <_ZN6StringaSERKS_>
}
   dd3da:	4620      	mov	r0, r4
   dd3dc:	bd10      	pop	{r4, pc}

000dd3de <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   dd3de:	4288      	cmp	r0, r1
{
   dd3e0:	b510      	push	{r4, lr}
   dd3e2:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   dd3e4:	d001      	beq.n	dd3ea <_ZN6StringaSEOS_+0xc>
   dd3e6:	f7ff ffb8 	bl	dd35a <_ZN6String4moveERS_>
	return *this;
}
   dd3ea:	4620      	mov	r0, r4
   dd3ec:	bd10      	pop	{r4, pc}

000dd3ee <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   dd3ee:	b513      	push	{r0, r1, r4, lr}
   dd3f0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   dd3f2:	b159      	cbz	r1, dd40c <_ZN6StringaSEPKc+0x1e>
   dd3f4:	4608      	mov	r0, r1
   dd3f6:	9101      	str	r1, [sp, #4]
   dd3f8:	f001 fad5 	bl	de9a6 <strlen>
   dd3fc:	9901      	ldr	r1, [sp, #4]
   dd3fe:	4602      	mov	r2, r0
   dd400:	4620      	mov	r0, r4
   dd402:	f7ff ff7d 	bl	dd300 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   dd406:	4620      	mov	r0, r4
   dd408:	b002      	add	sp, #8
   dd40a:	bd10      	pop	{r4, pc}
	else invalidate();
   dd40c:	f7ff ff4d 	bl	dd2aa <_ZN6String10invalidateEv>
   dd410:	e7f9      	b.n	dd406 <_ZN6StringaSEPKc+0x18>

000dd412 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   dd412:	b570      	push	{r4, r5, r6, lr}
   dd414:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   dd416:	460e      	mov	r6, r1
   dd418:	b909      	cbnz	r1, dd41e <_ZN6String6concatEPKcj+0xc>
   dd41a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   dd41c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   dd41e:	b16a      	cbz	r2, dd43c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   dd420:	6884      	ldr	r4, [r0, #8]
   dd422:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   dd424:	4621      	mov	r1, r4
   dd426:	f7ff ff57 	bl	dd2d8 <_ZN6String7reserveEj>
   dd42a:	2800      	cmp	r0, #0
   dd42c:	d0f5      	beq.n	dd41a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   dd42e:	6828      	ldr	r0, [r5, #0]
   dd430:	68ab      	ldr	r3, [r5, #8]
   dd432:	4631      	mov	r1, r6
   dd434:	4418      	add	r0, r3
   dd436:	f001 fa90 	bl	de95a <strcpy>
	len = newlen;
   dd43a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   dd43c:	2001      	movs	r0, #1
   dd43e:	e7ed      	b.n	dd41c <_ZN6String6concatEPKcj+0xa>

000dd440 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   dd440:	b513      	push	{r0, r1, r4, lr}
   dd442:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   dd444:	4608      	mov	r0, r1
	if (!cstr) return 0;
   dd446:	b151      	cbz	r1, dd45e <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   dd448:	9101      	str	r1, [sp, #4]
   dd44a:	f001 faac 	bl	de9a6 <strlen>
   dd44e:	9901      	ldr	r1, [sp, #4]
   dd450:	4602      	mov	r2, r0
   dd452:	4620      	mov	r0, r4
}
   dd454:	b002      	add	sp, #8
   dd456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   dd45a:	f7ff bfda 	b.w	dd412 <_ZN6String6concatEPKcj>
}
   dd45e:	b002      	add	sp, #8
   dd460:	bd10      	pop	{r4, pc}

000dd462 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   dd462:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dd464:	688a      	ldr	r2, [r1, #8]
   dd466:	6809      	ldr	r1, [r1, #0]
{
   dd468:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dd46a:	f7ff ffd2 	bl	dd412 <_ZN6String6concatEPKcj>
   dd46e:	b910      	cbnz	r0, dd476 <_ZplRK15StringSumHelperRK6String+0x14>
   dd470:	4620      	mov	r0, r4
   dd472:	f7ff ff1a 	bl	dd2aa <_ZN6String10invalidateEv>
	return a;
}
   dd476:	4620      	mov	r0, r4
   dd478:	bd10      	pop	{r4, pc}

000dd47a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   dd47a:	b513      	push	{r0, r1, r4, lr}
   dd47c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dd47e:	b929      	cbnz	r1, dd48c <_ZplRK15StringSumHelperPKc+0x12>
   dd480:	4620      	mov	r0, r4
   dd482:	f7ff ff12 	bl	dd2aa <_ZN6String10invalidateEv>
	return a;
}
   dd486:	4620      	mov	r0, r4
   dd488:	b002      	add	sp, #8
   dd48a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dd48c:	4608      	mov	r0, r1
   dd48e:	9101      	str	r1, [sp, #4]
   dd490:	f001 fa89 	bl	de9a6 <strlen>
   dd494:	9901      	ldr	r1, [sp, #4]
   dd496:	4602      	mov	r2, r0
   dd498:	4620      	mov	r0, r4
   dd49a:	f7ff ffba 	bl	dd412 <_ZN6String6concatEPKcj>
   dd49e:	2800      	cmp	r0, #0
   dd4a0:	d0ee      	beq.n	dd480 <_ZplRK15StringSumHelperPKc+0x6>
   dd4a2:	e7f0      	b.n	dd486 <_ZplRK15StringSumHelperPKc+0xc>

000dd4a4 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   dd4a4:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dd4a6:	6882      	ldr	r2, [r0, #8]
   dd4a8:	b93a      	cbnz	r2, dd4ba <_ZNK6String6equalsEPKc+0x16>
   dd4aa:	b121      	cbz	r1, dd4b6 <_ZNK6String6equalsEPKc+0x12>
   dd4ac:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   dd4ae:	fab0 f080 	clz	r0, r0
   dd4b2:	0940      	lsrs	r0, r0, #5
   dd4b4:	e000      	b.n	dd4b8 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dd4b6:	2001      	movs	r0, #1
}
   dd4b8:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   dd4ba:	6800      	ldr	r0, [r0, #0]
   dd4bc:	b909      	cbnz	r1, dd4c2 <_ZNK6String6equalsEPKc+0x1e>
   dd4be:	7800      	ldrb	r0, [r0, #0]
   dd4c0:	e7f5      	b.n	dd4ae <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   dd4c2:	f001 fa40 	bl	de946 <strcmp>
   dd4c6:	e7f2      	b.n	dd4ae <_ZNK6String6equalsEPKc+0xa>

000dd4c8 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   dd4c8:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   dd4ca:	6883      	ldr	r3, [r0, #8]
   dd4cc:	688a      	ldr	r2, [r1, #8]
   dd4ce:	4293      	cmp	r3, r2
   dd4d0:	d30b      	bcc.n	dd4ea <_ZNK6String8endsWithERKS_+0x22>
   dd4d2:	6800      	ldr	r0, [r0, #0]
   dd4d4:	b140      	cbz	r0, dd4e8 <_ZNK6String8endsWithERKS_+0x20>
   dd4d6:	6809      	ldr	r1, [r1, #0]
   dd4d8:	b149      	cbz	r1, dd4ee <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   dd4da:	1a9b      	subs	r3, r3, r2
   dd4dc:	4418      	add	r0, r3
   dd4de:	f001 fa32 	bl	de946 <strcmp>
   dd4e2:	fab0 f080 	clz	r0, r0
   dd4e6:	0940      	lsrs	r0, r0, #5
}
   dd4e8:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   dd4ea:	2000      	movs	r0, #0
   dd4ec:	e7fc      	b.n	dd4e8 <_ZNK6String8endsWithERKS_+0x20>
   dd4ee:	4608      	mov	r0, r1
   dd4f0:	e7fa      	b.n	dd4e8 <_ZNK6String8endsWithERKS_+0x20>
	...

000dd4f4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   dd4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   dd4f6:	429a      	cmp	r2, r3
{
   dd4f8:	460f      	mov	r7, r1
   dd4fa:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   dd4fc:	490c      	ldr	r1, [pc, #48]	; (dd530 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   dd4fe:	bf88      	it	hi
   dd500:	4613      	movhi	r3, r2
{
   dd502:	4614      	mov	r4, r2
   dd504:	4606      	mov	r6, r0
	if (left > right) {
   dd506:	bf84      	itt	hi
   dd508:	462c      	movhi	r4, r5
   dd50a:	461d      	movhi	r5, r3
	String out;
   dd50c:	f7ff ff11 	bl	dd332 <_ZN6StringC1EPKc>
	if (left > len) return out;
   dd510:	68ba      	ldr	r2, [r7, #8]
   dd512:	42a2      	cmp	r2, r4
   dd514:	d30a      	bcc.n	dd52c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   dd516:	6839      	ldr	r1, [r7, #0]
   dd518:	42aa      	cmp	r2, r5
   dd51a:	bf94      	ite	ls
   dd51c:	ebc4 0202 	rsbls	r2, r4, r2
   dd520:	ebc4 0205 	rsbhi	r2, r4, r5
   dd524:	4421      	add	r1, r4
   dd526:	4630      	mov	r0, r6
   dd528:	f7ff feea 	bl	dd300 <_ZN6String4copyEPKcj>
	return out;
}
   dd52c:	4630      	mov	r0, r6
   dd52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dd530:	000dffd4 	.word	0x000dffd4

000dd534 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   dd534:	b40e      	push	{r1, r2, r3}
   dd536:	b570      	push	{r4, r5, r6, lr}
   dd538:	b087      	sub	sp, #28
   dd53a:	ad0b      	add	r5, sp, #44	; 0x2c
   dd53c:	4604      	mov	r4, r0
   dd53e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dd542:	9201      	str	r2, [sp, #4]
   dd544:	462b      	mov	r3, r5
   dd546:	2105      	movs	r1, #5
   dd548:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   dd54a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dd54c:	f7fd fba4 	bl	dac98 <vsnprintf>
    va_end(marker);

    String result;
   dd550:	490b      	ldr	r1, [pc, #44]	; (dd580 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dd552:	4606      	mov	r6, r0
    String result;
   dd554:	4620      	mov	r0, r4
   dd556:	f7ff feec 	bl	dd332 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   dd55a:	4631      	mov	r1, r6
   dd55c:	4620      	mov	r0, r4
   dd55e:	f7ff febb 	bl	dd2d8 <_ZN6String7reserveEj>
    if (result.buffer) {
   dd562:	6820      	ldr	r0, [r4, #0]
   dd564:	b130      	cbz	r0, dd574 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dd566:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   dd568:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dd56a:	462b      	mov	r3, r5
   dd56c:	1c71      	adds	r1, r6, #1
   dd56e:	f7fd fb93 	bl	dac98 <vsnprintf>
        va_end(marker);
        result.len = n;
   dd572:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   dd574:	4620      	mov	r0, r4
   dd576:	b007      	add	sp, #28
   dd578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dd57c:	b003      	add	sp, #12
   dd57e:	4770      	bx	lr
   dd580:	000dffd4 	.word	0x000dffd4

000dd584 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   dd584:	b510      	push	{r4, lr}
   dd586:	4604      	mov	r4, r0
        if (wakeupSource_) {
   dd588:	6800      	ldr	r0, [r0, #0]
   dd58a:	b118      	cbz	r0, dd594 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   dd58c:	f7fd fb5c 	bl	dac48 <free>
            wakeupSource_ = nullptr;
   dd590:	2300      	movs	r3, #0
   dd592:	6023      	str	r3, [r4, #0]
        }
    }
   dd594:	bd10      	pop	{r4, pc}

000dd596 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dd596:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   dd598:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   dd59c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   dd59e:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dd5a0:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   dd5a2:	f853 2f06 	ldr.w	r2, [r3, #6]!
   dd5a6:	f8c0 2006 	str.w	r2, [r0, #6]
   dd5aa:	889b      	ldrh	r3, [r3, #4]
   dd5ac:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dd5ae:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   dd5b0:	f7ff ffe8 	bl	dd584 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   dd5b4:	682b      	ldr	r3, [r5, #0]
   dd5b6:	b113      	cbz	r3, dd5be <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   dd5b8:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   dd5ba:	2300      	movs	r3, #0
   dd5bc:	602b      	str	r3, [r5, #0]
    }
   dd5be:	4620      	mov	r0, r4
   dd5c0:	bd38      	pop	{r3, r4, r5, pc}
	...

000dd5c4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   dd5c4:	b538      	push	{r3, r4, r5, lr}
   dd5c6:	460c      	mov	r4, r1
   dd5c8:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   dd5ca:	f7ff ffdb 	bl	dd584 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   dd5ce:	b144      	cbz	r4, dd5e2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   dd5d0:	8820      	ldrh	r0, [r4, #0]
   dd5d2:	f7fd fb31 	bl	dac38 <malloc>
   dd5d6:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   dd5d8:	b128      	cbz	r0, dd5e6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   dd5da:	8822      	ldrh	r2, [r4, #0]
   dd5dc:	4621      	mov	r1, r4
   dd5de:	f001 f913 	bl	de808 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   dd5e2:	2000      	movs	r0, #0
    }
   dd5e4:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   dd5e6:	4801      	ldr	r0, [pc, #4]	; (dd5ec <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   dd5e8:	e7fc      	b.n	dd5e4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   dd5ea:	bf00      	nop
   dd5ec:	fffffefc 	.word	0xfffffefc

000dd5f0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   dd5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd5f2:	4d2d      	ldr	r5, [pc, #180]	; (dd6a8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   dd5f4:	7d0b      	ldrb	r3, [r1, #20]
   dd5f6:	4604      	mov	r4, r0
   dd5f8:	b08b      	sub	sp, #44	; 0x2c
   dd5fa:	4608      	mov	r0, r1
   dd5fc:	1daf      	adds	r7, r5, #6
   dd5fe:	2b00      	cmp	r3, #0
   dd600:	d038      	beq.n	dd674 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   dd602:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   dd604:	791b      	ldrb	r3, [r3, #4]
   dd606:	2b00      	cmp	r3, #0
   dd608:	d034      	beq.n	dd674 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   dd60a:	2200      	movs	r2, #0
    SleepResult() {}
   dd60c:	4b27      	ldr	r3, [pc, #156]	; (dd6ac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dd60e:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   dd610:	a902      	add	r1, sp, #8
   dd612:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   dd614:	9202      	str	r2, [sp, #8]
   dd616:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   dd61a:	f88d 200e 	strb.w	r2, [sp, #14]
   dd61e:	f7fd fa41 	bl	daaa4 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   dd622:	f8dd 300e 	ldr.w	r3, [sp, #14]
   dd626:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   dd62a:	b200      	sxth	r0, r0
   dd62c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   dd630:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   dd634:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   dd636:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   dd638:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dd63a:	4628      	mov	r0, r5
   dd63c:	f7ff ffc2 	bl	dd5c4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   dd640:	a802      	add	r0, sp, #8
   dd642:	f7ff ff9f 	bl	dd584 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   dd646:	2300      	movs	r3, #0
   dd648:	6023      	str	r3, [r4, #0]
   dd64a:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   dd64c:	71a3      	strb	r3, [r4, #6]
   dd64e:	8123      	strh	r3, [r4, #8]
   dd650:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dd654:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   dd656:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   dd65a:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   dd65c:	683b      	ldr	r3, [r7, #0]
   dd65e:	f8c4 3006 	str.w	r3, [r4, #6]
   dd662:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dd664:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   dd666:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   dd668:	4620      	mov	r0, r4
   dd66a:	f7ff ffab 	bl	dd5c4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   dd66e:	4620      	mov	r0, r4
   dd670:	b00b      	add	sp, #44	; 0x2c
   dd672:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   dd674:	2600      	movs	r6, #0
   dd676:	2320      	movs	r3, #32
   dd678:	e9cd 3602 	strd	r3, r6, [sp, #8]
   dd67c:	4b0c      	ldr	r3, [pc, #48]	; (dd6b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   dd67e:	9300      	str	r3, [sp, #0]
   dd680:	490c      	ldr	r1, [pc, #48]	; (dd6b4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   dd682:	4633      	mov	r3, r6
   dd684:	aa02      	add	r2, sp, #8
   dd686:	2032      	movs	r0, #50	; 0x32
   dd688:	f7fd f97c 	bl	da984 <log_message>
    SleepResult() {}
   dd68c:	4b07      	ldr	r3, [pc, #28]	; (dd6ac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dd68e:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   dd690:	a902      	add	r1, sp, #8
        error_ = error;
   dd692:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   dd696:	4804      	ldr	r0, [pc, #16]	; (dd6a8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   dd698:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   dd69a:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   dd69e:	f8ad 300c 	strh.w	r3, [sp, #12]
   dd6a2:	f7ff ff78 	bl	dd596 <_ZN17SystemSleepResultaSEOS_>
   dd6a6:	e7cb      	b.n	dd640 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   dd6a8:	2003e5b4 	.word	0x2003e5b4
   dd6ac:	ffff0000 	.word	0xffff0000
   dd6b0:	000e00af 	.word	0x000e00af
   dd6b4:	000e00a8 	.word	0x000e00a8

000dd6b8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   dd6b8:	4b05      	ldr	r3, [pc, #20]	; (dd6d0 <_GLOBAL__sub_I_System+0x18>)
   dd6ba:	2202      	movs	r2, #2
   dd6bc:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   dd6be:	4b05      	ldr	r3, [pc, #20]	; (dd6d4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   dd6c0:	4a05      	ldr	r2, [pc, #20]	; (dd6d8 <_GLOBAL__sub_I_System+0x20>)
   dd6c2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   dd6c4:	2000      	movs	r0, #0
   dd6c6:	6018      	str	r0, [r3, #0]
   dd6c8:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   dd6ca:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   dd6cc:	f7fd b98c 	b.w	da9e8 <set_system_mode>
   dd6d0:	2003e5c0 	.word	0x2003e5c0
   dd6d4:	2003e5b4 	.word	0x2003e5b4
   dd6d8:	ffff0000 	.word	0xffff0000

000dd6dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   dd6dc:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dd6de:	2000      	movs	r0, #0
   dd6e0:	f7fd fa22 	bl	dab28 <spark_sync_time_pending>
   dd6e4:	b128      	cbz	r0, dd6f2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   dd6e6:	f7fd fa07 	bl	daaf8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   dd6ea:	f080 0001 	eor.w	r0, r0, #1
   dd6ee:	b2c0      	uxtb	r0, r0
    }
   dd6f0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dd6f2:	2001      	movs	r0, #1
   dd6f4:	e7fc      	b.n	dd6f0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000dd6f6 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   dd6f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   dd6f8:	4602      	mov	r2, r0
   dd6fa:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dd6fc:	4668      	mov	r0, sp
    struct timeval tv = {
   dd6fe:	2100      	movs	r1, #0
    };
   dd700:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   dd704:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dd708:	f7fc ff34 	bl	da574 <hal_rtc_set_time>
   dd70c:	4602      	mov	r2, r0
   dd70e:	b910      	cbnz	r0, dd716 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   dd710:	4601      	mov	r1, r0
   dd712:	f7fd f9a1 	bl	daa58 <system_notify_time_changed>
    }
}
   dd716:	b005      	add	sp, #20
   dd718:	f85d fb04 	ldr.w	pc, [sp], #4

000dd71c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dd71c:	b530      	push	{r4, r5, lr}
   dd71e:	4604      	mov	r4, r0
    t += time_zone_cache;
   dd720:	4818      	ldr	r0, [pc, #96]	; (dd784 <_ZN9TimeClass7timeStrEx+0x68>)
   dd722:	e9d0 1000 	ldrd	r1, r0, [r0]
   dd726:	1852      	adds	r2, r2, r1
   dd728:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   dd72c:	4816      	ldr	r0, [pc, #88]	; (dd788 <_ZN9TimeClass7timeStrEx+0x6c>)
   dd72e:	e9d0 1000 	ldrd	r1, r0, [r0]
   dd732:	1852      	adds	r2, r2, r1
{
   dd734:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   dd736:	eb40 0303 	adc.w	r3, r0, r3
   dd73a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   dd73e:	2224      	movs	r2, #36	; 0x24
   dd740:	eb0d 0002 	add.w	r0, sp, r2
   dd744:	2100      	movs	r1, #0
   dd746:	f001 f887 	bl	de858 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   dd74a:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   dd74c:	a909      	add	r1, sp, #36	; 0x24
   dd74e:	4668      	mov	r0, sp
   dd750:	f7fd fad2 	bl	dacf8 <localtime_r>
    char ascstr[26] = {};
   dd754:	2216      	movs	r2, #22
   dd756:	4629      	mov	r1, r5
   dd758:	a803      	add	r0, sp, #12
   dd75a:	9502      	str	r5, [sp, #8]
   dd75c:	f001 f87c 	bl	de858 <memset>
    asctime_r(&calendar_time, ascstr);
   dd760:	a902      	add	r1, sp, #8
   dd762:	a809      	add	r0, sp, #36	; 0x24
   dd764:	f001 f812 	bl	de78c <asctime_r>
    int len = strlen(ascstr);
   dd768:	a802      	add	r0, sp, #8
   dd76a:	f001 f91c 	bl	de9a6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   dd76e:	ab12      	add	r3, sp, #72	; 0x48
   dd770:	4418      	add	r0, r3
    return String(ascstr);
   dd772:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   dd774:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   dd778:	4620      	mov	r0, r4
   dd77a:	f7ff fdda 	bl	dd332 <_ZN6StringC1EPKc>
}
   dd77e:	4620      	mov	r0, r4
   dd780:	b013      	add	sp, #76	; 0x4c
   dd782:	bd30      	pop	{r4, r5, pc}
   dd784:	2003e5d8 	.word	0x2003e5d8
   dd788:	2003e5d0 	.word	0x2003e5d0

000dd78c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dd78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd790:	b0a5      	sub	sp, #148	; 0x94
   dd792:	4607      	mov	r7, r0
   dd794:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dd796:	a814      	add	r0, sp, #80	; 0x50
{
   dd798:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dd79a:	223f      	movs	r2, #63	; 0x3f
{
   dd79c:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dd79e:	f001 f91c 	bl	de9da <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dd7a2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dd7a4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dd7a6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dd7aa:	f001 f8fc 	bl	de9a6 <strlen>
   dd7ae:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   dd7b0:	bb5d      	cbnz	r5, dd80a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   dd7b2:	492a      	ldr	r1, [pc, #168]	; (dd85c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   dd7b4:	a803      	add	r0, sp, #12
   dd7b6:	f001 f8d0 	bl	de95a <strcpy>
   dd7ba:	ae14      	add	r6, sp, #80	; 0x50
{
   dd7bc:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dd7be:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   dd7c2:	45ab      	cmp	fp, r5
   dd7c4:	d936      	bls.n	dd834 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   dd7c6:	46b1      	mov	r9, r6
   dd7c8:	f105 0a01 	add.w	sl, r5, #1
   dd7cc:	f819 3b01 	ldrb.w	r3, [r9], #1
   dd7d0:	2b25      	cmp	r3, #37	; 0x25
   dd7d2:	d117      	bne.n	dd804 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   dd7d4:	7873      	ldrb	r3, [r6, #1]
   dd7d6:	2b7a      	cmp	r3, #122	; 0x7a
   dd7d8:	d114      	bne.n	dd804 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   dd7da:	a803      	add	r0, sp, #12
   dd7dc:	f001 f8e3 	bl	de9a6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dd7e0:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   dd7e2:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dd7e4:	1828      	adds	r0, r5, r0
   dd7e6:	4418      	add	r0, r3
   dd7e8:	ebab 0205 	sub.w	r2, fp, r5
   dd7ec:	1cb1      	adds	r1, r6, #2
   dd7ee:	f001 f80b 	bl	de808 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   dd7f2:	4622      	mov	r2, r4
   dd7f4:	a903      	add	r1, sp, #12
   dd7f6:	4630      	mov	r0, r6
   dd7f8:	f001 f806 	bl	de808 <memcpy>
            len = strlen(format_str);
   dd7fc:	a814      	add	r0, sp, #80	; 0x50
   dd7fe:	f001 f8d2 	bl	de9a6 <strlen>
   dd802:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   dd804:	464e      	mov	r6, r9
   dd806:	4655      	mov	r5, sl
   dd808:	e7d9      	b.n	dd7be <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   dd80a:	213c      	movs	r1, #60	; 0x3c
   dd80c:	fb95 f3f1 	sdiv	r3, r5, r1
   dd810:	2b00      	cmp	r3, #0
   dd812:	bfb8      	it	lt
   dd814:	425b      	neglt	r3, r3
   dd816:	fbb3 f2f1 	udiv	r2, r3, r1
   dd81a:	fb01 3312 	mls	r3, r1, r2, r3
   dd81e:	9300      	str	r3, [sp, #0]
   dd820:	4a0f      	ldr	r2, [pc, #60]	; (dd860 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   dd822:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dd826:	2110      	movs	r1, #16
   dd828:	a803      	add	r0, sp, #12
   dd82a:	fb95 f3f3 	sdiv	r3, r5, r3
   dd82e:	f7fd fa2b 	bl	dac88 <snprintf>
   dd832:	e7c2      	b.n	dd7ba <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   dd834:	2100      	movs	r1, #0
   dd836:	222e      	movs	r2, #46	; 0x2e
   dd838:	a808      	add	r0, sp, #32
   dd83a:	9107      	str	r1, [sp, #28]
   dd83c:	f001 f80c 	bl	de858 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   dd840:	4643      	mov	r3, r8
   dd842:	aa14      	add	r2, sp, #80	; 0x50
   dd844:	2132      	movs	r1, #50	; 0x32
   dd846:	a807      	add	r0, sp, #28
   dd848:	f7fd fa4e 	bl	dace8 <strftime>
    return String(buf);
   dd84c:	a907      	add	r1, sp, #28
   dd84e:	4638      	mov	r0, r7
   dd850:	f7ff fd6f 	bl	dd332 <_ZN6StringC1EPKc>
}
   dd854:	4638      	mov	r0, r7
   dd856:	b025      	add	sp, #148	; 0x94
   dd858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd85c:	000df793 	.word	0x000df793
   dd860:	000df795 	.word	0x000df795

000dd864 <_ZN9TimeClass6formatExPKc>:
{
   dd864:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd866:	b08d      	sub	sp, #52	; 0x34
   dd868:	e9cd 2300 	strd	r2, r3, [sp]
   dd86c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   dd86e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   dd870:	b915      	cbnz	r5, dd878 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   dd872:	4b19      	ldr	r3, [pc, #100]	; (dd8d8 <_ZN9TimeClass6formatExPKc+0x74>)
   dd874:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   dd876:	b12d      	cbz	r5, dd884 <_ZN9TimeClass6formatExPKc+0x20>
   dd878:	4b18      	ldr	r3, [pc, #96]	; (dd8dc <_ZN9TimeClass6formatExPKc+0x78>)
   dd87a:	4628      	mov	r0, r5
   dd87c:	6819      	ldr	r1, [r3, #0]
   dd87e:	f001 f862 	bl	de946 <strcmp>
   dd882:	b938      	cbnz	r0, dd894 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   dd884:	e9dd 2300 	ldrd	r2, r3, [sp]
   dd888:	4620      	mov	r0, r4
   dd88a:	f7ff ff47 	bl	dd71c <_ZN9TimeClass7timeStrEx>
}
   dd88e:	4620      	mov	r0, r4
   dd890:	b00d      	add	sp, #52	; 0x34
   dd892:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   dd894:	4e12      	ldr	r6, [pc, #72]	; (dd8e0 <_ZN9TimeClass6formatExPKc+0x7c>)
   dd896:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   dd898:	4f12      	ldr	r7, [pc, #72]	; (dd8e4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   dd89a:	e9d6 3200 	ldrd	r3, r2, [r6]
   dd89e:	185b      	adds	r3, r3, r1
   dd8a0:	9901      	ldr	r1, [sp, #4]
   dd8a2:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   dd8a6:	e9d7 0100 	ldrd	r0, r1, [r7]
   dd8aa:	181b      	adds	r3, r3, r0
   dd8ac:	eb41 0202 	adc.w	r2, r1, r2
   dd8b0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   dd8b4:	2100      	movs	r1, #0
   dd8b6:	2224      	movs	r2, #36	; 0x24
   dd8b8:	a803      	add	r0, sp, #12
   dd8ba:	f000 ffcd 	bl	de858 <memset>
    localtime_r(&t, &calendar_time);
   dd8be:	a903      	add	r1, sp, #12
   dd8c0:	4668      	mov	r0, sp
   dd8c2:	f7fd fa19 	bl	dacf8 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   dd8c6:	6832      	ldr	r2, [r6, #0]
   dd8c8:	683b      	ldr	r3, [r7, #0]
   dd8ca:	a903      	add	r1, sp, #12
   dd8cc:	4413      	add	r3, r2
   dd8ce:	4620      	mov	r0, r4
   dd8d0:	462a      	mov	r2, r5
   dd8d2:	f7ff ff5b 	bl	dd78c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   dd8d6:	e7da      	b.n	dd88e <_ZN9TimeClass6formatExPKc+0x2a>
   dd8d8:	2003e5c8 	.word	0x2003e5c8
   dd8dc:	2003dc4c 	.word	0x2003dc4c
   dd8e0:	2003e5d8 	.word	0x2003e5d8
   dd8e4:	2003e5d0 	.word	0x2003e5d0

000dd8e8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   dd8e8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   dd8ea:	2000      	movs	r0, #0
   dd8ec:	f7fc fe2a 	bl	da544 <hal_rtc_time_is_valid>
    if (rtcstate)
   dd8f0:	4604      	mov	r4, r0
   dd8f2:	b9a0      	cbnz	r0, dd91e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   dd8f4:	f7fd f870 	bl	da9d8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   dd8f8:	2801      	cmp	r0, #1
   dd8fa:	d110      	bne.n	dd91e <_ZN9TimeClass7isValidEv+0x36>
   dd8fc:	4620      	mov	r0, r4
   dd8fe:	f7fd f8a3 	bl	daa48 <system_thread_get_state>
   dd902:	b960      	cbnz	r0, dd91e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   dd904:	f7ff feea 	bl	dd6dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   dd908:	b910      	cbnz	r0, dd910 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   dd90a:	f7fd f8e5 	bl	daad8 <spark_process>
        while (_while() && !_condition()) {
   dd90e:	e7f9      	b.n	dd904 <_ZN9TimeClass7isValidEv+0x1c>
   dd910:	f7ff fee4 	bl	dd6dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   dd914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   dd918:	2000      	movs	r0, #0
   dd91a:	f7fc be13 	b.w	da544 <hal_rtc_time_is_valid>
}
   dd91e:	4620      	mov	r0, r4
   dd920:	bd10      	pop	{r4, pc}

000dd922 <_ZN9TimeClass3nowEv>:
{
   dd922:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   dd924:	f7ff ffe0 	bl	dd8e8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   dd928:	2210      	movs	r2, #16
   dd92a:	2100      	movs	r1, #0
   dd92c:	4668      	mov	r0, sp
   dd92e:	f000 ff93 	bl	de858 <memset>
    hal_rtc_get_time(&tv, nullptr);
   dd932:	2100      	movs	r1, #0
   dd934:	4668      	mov	r0, sp
   dd936:	f7fc fe15 	bl	da564 <hal_rtc_get_time>
}
   dd93a:	9800      	ldr	r0, [sp, #0]
   dd93c:	b005      	add	sp, #20
   dd93e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dd944 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   dd944:	4b02      	ldr	r3, [pc, #8]	; (dd950 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   dd946:	681a      	ldr	r2, [r3, #0]
   dd948:	4b02      	ldr	r3, [pc, #8]	; (dd954 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   dd94a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   dd94c:	4770      	bx	lr
   dd94e:	bf00      	nop
   dd950:	2003dc4c 	.word	0x2003dc4c
   dd954:	2003e5c8 	.word	0x2003e5c8

000dd958 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   dd958:	4770      	bx	lr

000dd95a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dd95a:	7441      	strb	r1, [r0, #17]
}
   dd95c:	4770      	bx	lr

000dd95e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dd95e:	4770      	bx	lr

000dd960 <_ZN11USARTSerial17availableForWriteEv>:
{
   dd960:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   dd962:	7c00      	ldrb	r0, [r0, #16]
   dd964:	f7fc ffb6 	bl	da8d4 <hal_usart_available_data_for_write>
}
   dd968:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dd96c:	bd08      	pop	{r3, pc}

000dd96e <_ZN11USARTSerial9availableEv>:
{
   dd96e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   dd970:	7c00      	ldrb	r0, [r0, #16]
   dd972:	f7fc ff87 	bl	da884 <hal_usart_available>
}
   dd976:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dd97a:	bd08      	pop	{r3, pc}

000dd97c <_ZN11USARTSerial4peekEv>:
{
   dd97c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   dd97e:	7c00      	ldrb	r0, [r0, #16]
   dd980:	f7fc ff90 	bl	da8a4 <hal_usart_peek>
}
   dd984:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dd988:	bd08      	pop	{r3, pc}

000dd98a <_ZN11USARTSerial4readEv>:
{
   dd98a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   dd98c:	7c00      	ldrb	r0, [r0, #16]
   dd98e:	f7fc ff81 	bl	da894 <hal_usart_read>
}
   dd992:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dd996:	bd08      	pop	{r3, pc}

000dd998 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   dd998:	7c00      	ldrb	r0, [r0, #16]
   dd99a:	f7fc bf8b 	b.w	da8b4 <hal_usart_flush>

000dd99e <_ZN11USARTSerial5writeEh>:
{
   dd99e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dd9a0:	7c45      	ldrb	r5, [r0, #17]
{
   dd9a2:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dd9a4:	b12d      	cbz	r5, dd9b2 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   dd9a6:	7c20      	ldrb	r0, [r4, #16]
}
   dd9a8:	b003      	add	sp, #12
   dd9aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   dd9ae:	f7fc bf61 	b.w	da874 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dd9b2:	7c00      	ldrb	r0, [r0, #16]
   dd9b4:	9101      	str	r1, [sp, #4]
   dd9b6:	f7fc ff8d 	bl	da8d4 <hal_usart_available_data_for_write>
   dd9ba:	2800      	cmp	r0, #0
   dd9bc:	9901      	ldr	r1, [sp, #4]
   dd9be:	dcf2      	bgt.n	dd9a6 <_ZN11USARTSerial5writeEh+0x8>
}
   dd9c0:	4628      	mov	r0, r5
   dd9c2:	b003      	add	sp, #12
   dd9c4:	bd30      	pop	{r4, r5, pc}

000dd9c6 <_ZN11USARTSerialD0Ev>:
   dd9c6:	b510      	push	{r4, lr}
   dd9c8:	2114      	movs	r1, #20
   dd9ca:	4604      	mov	r4, r0
   dd9cc:	f000 fa90 	bl	ddef0 <_ZdlPvj>
   dd9d0:	4620      	mov	r0, r4
   dd9d2:	bd10      	pop	{r4, pc}

000dd9d4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   dd9d4:	b510      	push	{r4, lr}
   dd9d6:	f04f 0c00 	mov.w	ip, #0
   dd9da:	4604      	mov	r4, r0
   dd9dc:	4608      	mov	r0, r1
   dd9de:	4611      	mov	r1, r2
   dd9e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dd9e4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   dd9e8:	4a04      	ldr	r2, [pc, #16]	; (dd9fc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   dd9ea:	6022      	str	r2, [r4, #0]
  _blocking = true;
   dd9ec:	2201      	movs	r2, #1
  _serial = serial;
   dd9ee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   dd9f0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   dd9f2:	461a      	mov	r2, r3
   dd9f4:	f7fc ff2e 	bl	da854 <hal_usart_init>
}
   dd9f8:	4620      	mov	r0, r4
   dd9fa:	bd10      	pop	{r4, pc}
   dd9fc:	000e00fc 	.word	0x000e00fc

000dda00 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   dda00:	7c00      	ldrb	r0, [r0, #16]
   dda02:	2300      	movs	r3, #0
   dda04:	f7fc bf6e 	b.w	da8e4 <hal_usart_begin_config>

000dda08 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   dda08:	2200      	movs	r2, #0
   dda0a:	f7ff bff9 	b.w	dda00 <_ZN11USARTSerial5beginEmm>

000dda0e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   dda0e:	7c00      	ldrb	r0, [r0, #16]
   dda10:	f7fc bf28 	b.w	da864 <hal_usart_end>

000dda14 <_Z22__fetch_global_Serial1v>:
{
   dda14:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dda16:	4c0d      	ldr	r4, [pc, #52]	; (dda4c <_Z22__fetch_global_Serial1v+0x38>)
   dda18:	7821      	ldrb	r1, [r4, #0]
   dda1a:	f3bf 8f5b 	dmb	ish
   dda1e:	f011 0101 	ands.w	r1, r1, #1
   dda22:	d110      	bne.n	dda46 <_Z22__fetch_global_Serial1v+0x32>
   dda24:	4620      	mov	r0, r4
   dda26:	9101      	str	r1, [sp, #4]
   dda28:	f7f6 fb46 	bl	d40b8 <__cxa_guard_acquire>
   dda2c:	9901      	ldr	r1, [sp, #4]
   dda2e:	b150      	cbz	r0, dda46 <_Z22__fetch_global_Serial1v+0x32>
   dda30:	4b07      	ldr	r3, [pc, #28]	; (dda50 <_Z22__fetch_global_Serial1v+0x3c>)
   dda32:	4a08      	ldr	r2, [pc, #32]	; (dda54 <_Z22__fetch_global_Serial1v+0x40>)
   dda34:	4808      	ldr	r0, [pc, #32]	; (dda58 <_Z22__fetch_global_Serial1v+0x44>)
   dda36:	f7ff ffcd 	bl	dd9d4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   dda3a:	4620      	mov	r0, r4
   dda3c:	f7f6 fb41 	bl	d40c2 <__cxa_guard_release>
   dda40:	4806      	ldr	r0, [pc, #24]	; (dda5c <_Z22__fetch_global_Serial1v+0x48>)
   dda42:	f000 fec9 	bl	de7d8 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   dda46:	4804      	ldr	r0, [pc, #16]	; (dda58 <_Z22__fetch_global_Serial1v+0x44>)
   dda48:	b002      	add	sp, #8
   dda4a:	bd10      	pop	{r4, pc}
   dda4c:	2003e5e0 	.word	0x2003e5e0
   dda50:	2003e668 	.word	0x2003e668
   dda54:	2003e5e4 	.word	0x2003e5e4
   dda58:	2003e6ec 	.word	0x2003e6ec
   dda5c:	000dd95f 	.word	0x000dd95f

000dda60 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dda60:	7441      	strb	r1, [r0, #17]
}
   dda62:	4770      	bx	lr

000dda64 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dda64:	4770      	bx	lr

000dda66 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dda66:	4770      	bx	lr

000dda68 <_ZN9USBSerial4readEv>:
{
   dda68:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dda6a:	2100      	movs	r1, #0
   dda6c:	7c00      	ldrb	r0, [r0, #16]
   dda6e:	f7fc ff69 	bl	da944 <HAL_USB_USART_Receive_Data>
}
   dda72:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dda76:	bd08      	pop	{r3, pc}

000dda78 <_ZN9USBSerial4peekEv>:
{
   dda78:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dda7a:	2101      	movs	r1, #1
   dda7c:	7c00      	ldrb	r0, [r0, #16]
   dda7e:	f7fc ff61 	bl	da944 <HAL_USB_USART_Receive_Data>
}
   dda82:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dda86:	bd08      	pop	{r3, pc}

000dda88 <_ZN9USBSerial17availableForWriteEv>:
{
   dda88:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dda8a:	7c00      	ldrb	r0, [r0, #16]
   dda8c:	f7fc ff52 	bl	da934 <HAL_USB_USART_Available_Data_For_Write>
}
   dda90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dda94:	bd08      	pop	{r3, pc}

000dda96 <_ZN9USBSerial9availableEv>:
{
   dda96:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dda98:	7c00      	ldrb	r0, [r0, #16]
   dda9a:	f7fc ff43 	bl	da924 <HAL_USB_USART_Available_Data>
}
   dda9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ddaa2:	bd08      	pop	{r3, pc}

000ddaa4 <_ZN9USBSerial5writeEh>:
{
   ddaa4:	b513      	push	{r0, r1, r4, lr}
   ddaa6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ddaa8:	7c00      	ldrb	r0, [r0, #16]
{
   ddaaa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ddaac:	f7fc ff42 	bl	da934 <HAL_USB_USART_Available_Data_For_Write>
   ddab0:	2800      	cmp	r0, #0
   ddab2:	9901      	ldr	r1, [sp, #4]
   ddab4:	dc01      	bgt.n	ddaba <_ZN9USBSerial5writeEh+0x16>
   ddab6:	7c60      	ldrb	r0, [r4, #17]
   ddab8:	b120      	cbz	r0, ddac4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   ddaba:	7c20      	ldrb	r0, [r4, #16]
   ddabc:	f7fc ff4a 	bl	da954 <HAL_USB_USART_Send_Data>
   ddac0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   ddac4:	b002      	add	sp, #8
   ddac6:	bd10      	pop	{r4, pc}

000ddac8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   ddac8:	7c00      	ldrb	r0, [r0, #16]
   ddaca:	f7fc bf4b 	b.w	da964 <HAL_USB_USART_Flush_Data>

000ddace <_ZN9USBSerialD0Ev>:
   ddace:	b510      	push	{r4, lr}
   ddad0:	2114      	movs	r1, #20
   ddad2:	4604      	mov	r4, r0
   ddad4:	f000 fa0c 	bl	ddef0 <_ZdlPvj>
   ddad8:	4620      	mov	r0, r4
   ddada:	bd10      	pop	{r4, pc}

000ddadc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   ddadc:	b510      	push	{r4, lr}
   ddade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ddae2:	4604      	mov	r4, r0
   ddae4:	4608      	mov	r0, r1
   ddae6:	2100      	movs	r1, #0
   ddae8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ddaec:	4b04      	ldr	r3, [pc, #16]	; (ddb00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   ddaee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ddaf0:	2301      	movs	r3, #1
  _serial = serial;
   ddaf2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ddaf4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   ddaf6:	4611      	mov	r1, r2
   ddaf8:	f7fc fefc 	bl	da8f4 <HAL_USB_USART_Init>
}
   ddafc:	4620      	mov	r0, r4
   ddafe:	bd10      	pop	{r4, pc}
   ddb00:	000e012c 	.word	0x000e012c

000ddb04 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   ddb04:	7c00      	ldrb	r0, [r0, #16]
   ddb06:	2200      	movs	r2, #0
   ddb08:	f7fc befc 	b.w	da904 <HAL_USB_USART_Begin>

000ddb0c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   ddb0c:	7c00      	ldrb	r0, [r0, #16]
   ddb0e:	f7fc bf01 	b.w	da914 <HAL_USB_USART_End>

000ddb12 <_Z19acquireSerialBufferv>:
{
   ddb12:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   ddb14:	2214      	movs	r2, #20
{
   ddb16:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   ddb18:	2100      	movs	r1, #0
   ddb1a:	f000 fe9d 	bl	de858 <memset>
}
   ddb1e:	4620      	mov	r0, r4
   ddb20:	bd10      	pop	{r4, pc}
	...

000ddb24 <_Z16_fetch_usbserialv>:
{
   ddb24:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ddb26:	4c0f      	ldr	r4, [pc, #60]	; (ddb64 <_Z16_fetch_usbserialv+0x40>)
{
   ddb28:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   ddb2a:	a803      	add	r0, sp, #12
   ddb2c:	f7ff fff1 	bl	ddb12 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ddb30:	7821      	ldrb	r1, [r4, #0]
   ddb32:	f3bf 8f5b 	dmb	ish
   ddb36:	f011 0101 	ands.w	r1, r1, #1
   ddb3a:	d10f      	bne.n	ddb5c <_Z16_fetch_usbserialv+0x38>
   ddb3c:	4620      	mov	r0, r4
   ddb3e:	9101      	str	r1, [sp, #4]
   ddb40:	f7f6 faba 	bl	d40b8 <__cxa_guard_acquire>
   ddb44:	9901      	ldr	r1, [sp, #4]
   ddb46:	b148      	cbz	r0, ddb5c <_Z16_fetch_usbserialv+0x38>
   ddb48:	aa03      	add	r2, sp, #12
   ddb4a:	4807      	ldr	r0, [pc, #28]	; (ddb68 <_Z16_fetch_usbserialv+0x44>)
   ddb4c:	f7ff ffc6 	bl	ddadc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   ddb50:	4620      	mov	r0, r4
   ddb52:	f7f6 fab6 	bl	d40c2 <__cxa_guard_release>
   ddb56:	4805      	ldr	r0, [pc, #20]	; (ddb6c <_Z16_fetch_usbserialv+0x48>)
   ddb58:	f000 fe3e 	bl	de7d8 <atexit>
	return _usbserial;
}
   ddb5c:	4802      	ldr	r0, [pc, #8]	; (ddb68 <_Z16_fetch_usbserialv+0x44>)
   ddb5e:	b008      	add	sp, #32
   ddb60:	bd10      	pop	{r4, pc}
   ddb62:	bf00      	nop
   ddb64:	2003e700 	.word	0x2003e700
   ddb68:	2003e704 	.word	0x2003e704
   ddb6c:	000dda65 	.word	0x000dda65

000ddb70 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ddb70:	4b01      	ldr	r3, [pc, #4]	; (ddb78 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ddb72:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ddb74:	4770      	bx	lr
   ddb76:	bf00      	nop
   ddb78:	2003dc54 	.word	0x2003dc54

000ddb7c <serialEventRun>:
{
   ddb7c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   ddb7e:	4b0b      	ldr	r3, [pc, #44]	; (ddbac <serialEventRun+0x30>)
   ddb80:	b143      	cbz	r3, ddb94 <serialEventRun+0x18>
   ddb82:	f7ff ffcf 	bl	ddb24 <_Z16_fetch_usbserialv>
   ddb86:	6803      	ldr	r3, [r0, #0]
   ddb88:	691b      	ldr	r3, [r3, #16]
   ddb8a:	4798      	blx	r3
   ddb8c:	2800      	cmp	r0, #0
   ddb8e:	dd01      	ble.n	ddb94 <serialEventRun+0x18>
        serialEvent();
   ddb90:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   ddb94:	4b06      	ldr	r3, [pc, #24]	; (ddbb0 <serialEventRun+0x34>)
   ddb96:	b143      	cbz	r3, ddbaa <serialEventRun+0x2e>
   ddb98:	f7ff ff3c 	bl	dda14 <_Z22__fetch_global_Serial1v>
   ddb9c:	6803      	ldr	r3, [r0, #0]
   ddb9e:	691b      	ldr	r3, [r3, #16]
   ddba0:	4798      	blx	r3
   ddba2:	2800      	cmp	r0, #0
   ddba4:	dd01      	ble.n	ddbaa <serialEventRun+0x2e>
        serialEvent1();
   ddba6:	f3af 8000 	nop.w
}
   ddbaa:	bd08      	pop	{r3, pc}
	...

000ddbb4 <_post_loop>:
{
   ddbb4:	b508      	push	{r3, lr}
	serialEventRun();
   ddbb6:	f7ff ffe1 	bl	ddb7c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   ddbba:	f7fc fcbb 	bl	da534 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   ddbbe:	4b01      	ldr	r3, [pc, #4]	; (ddbc4 <_post_loop+0x10>)
   ddbc0:	6018      	str	r0, [r3, #0]
}
   ddbc2:	bd08      	pop	{r3, pc}
   ddbc4:	2003e720 	.word	0x2003e720

000ddbc8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ddbc8:	4805      	ldr	r0, [pc, #20]	; (ddbe0 <_Z33system_initialize_user_backup_ramv+0x18>)
   ddbca:	4a06      	ldr	r2, [pc, #24]	; (ddbe4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   ddbcc:	4906      	ldr	r1, [pc, #24]	; (ddbe8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   ddbce:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ddbd0:	1a12      	subs	r2, r2, r0
   ddbd2:	f000 fe19 	bl	de808 <memcpy>
    __backup_sram_signature = signature;
   ddbd6:	4b05      	ldr	r3, [pc, #20]	; (ddbec <_Z33system_initialize_user_backup_ramv+0x24>)
   ddbd8:	4a05      	ldr	r2, [pc, #20]	; (ddbf0 <_Z33system_initialize_user_backup_ramv+0x28>)
   ddbda:	601a      	str	r2, [r3, #0]
}
   ddbdc:	bd08      	pop	{r3, pc}
   ddbde:	bf00      	nop
   ddbe0:	2003f400 	.word	0x2003f400
   ddbe4:	2003f404 	.word	0x2003f404
   ddbe8:	000e0300 	.word	0x000e0300
   ddbec:	2003f400 	.word	0x2003f400
   ddbf0:	9a271c1e 	.word	0x9a271c1e

000ddbf4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ddbf4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ddbf6:	2300      	movs	r3, #0
   ddbf8:	9300      	str	r3, [sp, #0]
   ddbfa:	461a      	mov	r2, r3
   ddbfc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ddc00:	f7fc ff3c 	bl	daa7c <system_ctrl_set_result>
}
   ddc04:	b003      	add	sp, #12
   ddc06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ddc0c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ddc0c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ddc0e:	8843      	ldrh	r3, [r0, #2]
   ddc10:	2b0a      	cmp	r3, #10
   ddc12:	d008      	beq.n	ddc26 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ddc14:	2b50      	cmp	r3, #80	; 0x50
   ddc16:	d10b      	bne.n	ddc30 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ddc18:	4b09      	ldr	r3, [pc, #36]	; (ddc40 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ddc1a:	681b      	ldr	r3, [r3, #0]
   ddc1c:	b14b      	cbz	r3, ddc32 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ddc1e:	b003      	add	sp, #12
   ddc20:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ddc24:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ddc26:	f7ff ffe5 	bl	ddbf4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ddc2a:	b003      	add	sp, #12
   ddc2c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ddc30:	2300      	movs	r3, #0
   ddc32:	9300      	str	r3, [sp, #0]
   ddc34:	461a      	mov	r2, r3
   ddc36:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ddc3a:	f7fc ff1f 	bl	daa7c <system_ctrl_set_result>
}
   ddc3e:	e7f4      	b.n	ddc2a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ddc40:	2003e71c 	.word	0x2003e71c

000ddc44 <module_user_init_hook>:
{
   ddc44:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ddc46:	4812      	ldr	r0, [pc, #72]	; (ddc90 <module_user_init_hook+0x4c>)
   ddc48:	2100      	movs	r1, #0
   ddc4a:	f7fd f845 	bl	dacd8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ddc4e:	4b11      	ldr	r3, [pc, #68]	; (ddc94 <module_user_init_hook+0x50>)
   ddc50:	681a      	ldr	r2, [r3, #0]
   ddc52:	4b11      	ldr	r3, [pc, #68]	; (ddc98 <module_user_init_hook+0x54>)
   ddc54:	429a      	cmp	r2, r3
   ddc56:	4b11      	ldr	r3, [pc, #68]	; (ddc9c <module_user_init_hook+0x58>)
   ddc58:	bf0c      	ite	eq
   ddc5a:	2201      	moveq	r2, #1
   ddc5c:	2200      	movne	r2, #0
   ddc5e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   ddc60:	d001      	beq.n	ddc66 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   ddc62:	f7ff ffb1 	bl	ddbc8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ddc66:	f7fc fc4d 	bl	da504 <HAL_RNG_GetRandomNumber>
   ddc6a:	4604      	mov	r4, r0
    srand(seed);
   ddc6c:	f000 fdfc 	bl	de868 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ddc70:	4b0b      	ldr	r3, [pc, #44]	; (ddca0 <module_user_init_hook+0x5c>)
   ddc72:	b113      	cbz	r3, ddc7a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ddc74:	4620      	mov	r0, r4
   ddc76:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ddc7a:	2100      	movs	r1, #0
   ddc7c:	4808      	ldr	r0, [pc, #32]	; (ddca0 <module_user_init_hook+0x5c>)
   ddc7e:	f7fc ff6b 	bl	dab58 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ddc82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ddc86:	4807      	ldr	r0, [pc, #28]	; (ddca4 <module_user_init_hook+0x60>)
   ddc88:	2100      	movs	r1, #0
   ddc8a:	f7fc beed 	b.w	daa68 <system_ctrl_set_app_request_handler>
   ddc8e:	bf00      	nop
   ddc90:	000ddb71 	.word	0x000ddb71
   ddc94:	2003f400 	.word	0x2003f400
   ddc98:	9a271c1e 	.word	0x9a271c1e
   ddc9c:	2003e718 	.word	0x2003e718
   ddca0:	00000000 	.word	0x00000000
   ddca4:	000ddc0d 	.word	0x000ddc0d

000ddca8 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   ddca8:	b508      	push	{r3, lr}
   ddcaa:	4b02      	ldr	r3, [pc, #8]	; (ddcb4 <spark_protocol_instance+0xc>)
   ddcac:	681b      	ldr	r3, [r3, #0]
   ddcae:	681b      	ldr	r3, [r3, #0]
   ddcb0:	9301      	str	r3, [sp, #4]
   ddcb2:	bd08      	pop	{r3, pc}
   ddcb4:	0003025c 	.word	0x0003025c

000ddcb8 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   ddcb8:	b508      	push	{r3, lr}
   ddcba:	4b02      	ldr	r3, [pc, #8]	; (ddcc4 <spark_protocol_set_product_id+0xc>)
   ddcbc:	681b      	ldr	r3, [r3, #0]
   ddcbe:	685b      	ldr	r3, [r3, #4]
   ddcc0:	9301      	str	r3, [sp, #4]
   ddcc2:	bd08      	pop	{r3, pc}
   ddcc4:	0003025c 	.word	0x0003025c

000ddcc8 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   ddcc8:	b508      	push	{r3, lr}
   ddcca:	4b02      	ldr	r3, [pc, #8]	; (ddcd4 <spark_protocol_set_product_firmware_version+0xc>)
   ddccc:	681b      	ldr	r3, [r3, #0]
   ddcce:	689b      	ldr	r3, [r3, #8]
   ddcd0:	9301      	str	r3, [sp, #4]
   ddcd2:	bd08      	pop	{r3, pc}
   ddcd4:	0003025c 	.word	0x0003025c

000ddcd8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   ddcd8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   ddcda:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   ddcdc:	d902      	bls.n	ddce4 <pinAvailable+0xc>
    return false;
   ddcde:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   ddce0:	b002      	add	sp, #8
   ddce2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   ddce4:	f1a0 030b 	sub.w	r3, r0, #11
   ddce8:	2b02      	cmp	r3, #2
   ddcea:	d81a      	bhi.n	ddd22 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   ddcec:	4c17      	ldr	r4, [pc, #92]	; (ddd4c <pinAvailable+0x74>)
   ddcee:	7821      	ldrb	r1, [r4, #0]
   ddcf0:	f3bf 8f5b 	dmb	ish
   ddcf4:	f011 0101 	ands.w	r1, r1, #1
   ddcf8:	d10b      	bne.n	ddd12 <pinAvailable+0x3a>
   ddcfa:	4620      	mov	r0, r4
   ddcfc:	9101      	str	r1, [sp, #4]
   ddcfe:	f7f6 f9db 	bl	d40b8 <__cxa_guard_acquire>
   ddd02:	9901      	ldr	r1, [sp, #4]
   ddd04:	b128      	cbz	r0, ddd12 <pinAvailable+0x3a>
   ddd06:	4812      	ldr	r0, [pc, #72]	; (ddd50 <pinAvailable+0x78>)
   ddd08:	f7ff fa0e 	bl	dd128 <_ZN8SPIClassC1E19hal_spi_interface_t>
   ddd0c:	4620      	mov	r0, r4
   ddd0e:	f7f6 f9d8 	bl	d40c2 <__cxa_guard_release>
   ddd12:	4b0f      	ldr	r3, [pc, #60]	; (ddd50 <pinAvailable+0x78>)
   ddd14:	7818      	ldrb	r0, [r3, #0]
   ddd16:	f7fc fd15 	bl	da744 <hal_spi_is_enabled>
   ddd1a:	2800      	cmp	r0, #0
   ddd1c:	d1df      	bne.n	ddcde <pinAvailable+0x6>
  return true; // 'pin' is available
   ddd1e:	2001      	movs	r0, #1
   ddd20:	e7de      	b.n	ddce0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   ddd22:	2801      	cmp	r0, #1
   ddd24:	d809      	bhi.n	ddd3a <pinAvailable+0x62>
   ddd26:	f000 f89b 	bl	dde60 <_Z19__fetch_global_Wirev>
   ddd2a:	2100      	movs	r1, #0
   ddd2c:	7c00      	ldrb	r0, [r0, #16]
   ddd2e:	f7fc fca9 	bl	da684 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   ddd32:	f080 0001 	eor.w	r0, r0, #1
   ddd36:	b2c0      	uxtb	r0, r0
   ddd38:	e7d2      	b.n	ddce0 <pinAvailable+0x8>
   ddd3a:	3809      	subs	r0, #9
   ddd3c:	2801      	cmp	r0, #1
   ddd3e:	d8ee      	bhi.n	ddd1e <pinAvailable+0x46>
   ddd40:	f7ff fe68 	bl	dda14 <_Z22__fetch_global_Serial1v>
   ddd44:	7c00      	ldrb	r0, [r0, #16]
   ddd46:	f7fc fdbd 	bl	da8c4 <hal_usart_is_enabled>
   ddd4a:	e7f2      	b.n	ddd32 <pinAvailable+0x5a>
   ddd4c:	2003e268 	.word	0x2003e268
   ddd50:	2003e26c 	.word	0x2003e26c

000ddd54 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ddd54:	2823      	cmp	r0, #35	; 0x23
{
   ddd56:	b538      	push	{r3, r4, r5, lr}
   ddd58:	4604      	mov	r4, r0
   ddd5a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ddd5c:	d80a      	bhi.n	ddd74 <pinMode+0x20>
   ddd5e:	29ff      	cmp	r1, #255	; 0xff
   ddd60:	d008      	beq.n	ddd74 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   ddd62:	f7ff ffb9 	bl	ddcd8 <pinAvailable>
   ddd66:	b128      	cbz	r0, ddd74 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   ddd68:	4629      	mov	r1, r5
   ddd6a:	4620      	mov	r0, r4
}
   ddd6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   ddd70:	f7fc bc10 	b.w	da594 <HAL_Pin_Mode>
}
   ddd74:	bd38      	pop	{r3, r4, r5, pc}

000ddd76 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   ddd76:	b538      	push	{r3, r4, r5, lr}
   ddd78:	4604      	mov	r4, r0
   ddd7a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   ddd7c:	f7fc fc12 	bl	da5a4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   ddd80:	28ff      	cmp	r0, #255	; 0xff
   ddd82:	d010      	beq.n	ddda6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   ddd84:	2806      	cmp	r0, #6
   ddd86:	d804      	bhi.n	ddd92 <digitalWrite+0x1c>
   ddd88:	234d      	movs	r3, #77	; 0x4d
   ddd8a:	fa23 f000 	lsr.w	r0, r3, r0
   ddd8e:	07c3      	lsls	r3, r0, #31
   ddd90:	d409      	bmi.n	ddda6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   ddd92:	4620      	mov	r0, r4
   ddd94:	f7ff ffa0 	bl	ddcd8 <pinAvailable>
   ddd98:	b128      	cbz	r0, ddda6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   ddd9a:	4629      	mov	r1, r5
   ddd9c:	4620      	mov	r0, r4
}
   ddd9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   ddda2:	f7fc bc07 	b.w	da5b4 <HAL_GPIO_Write>
}
   ddda6:	bd38      	pop	{r3, r4, r5, pc}

000ddda8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   ddda8:	b510      	push	{r4, lr}
   dddaa:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dddac:	f7fc fbfa 	bl	da5a4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   dddb0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   dddb2:	b2db      	uxtb	r3, r3
   dddb4:	2b01      	cmp	r3, #1
   dddb6:	d908      	bls.n	dddca <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   dddb8:	4620      	mov	r0, r4
   dddba:	f7ff ff8d 	bl	ddcd8 <pinAvailable>
   dddbe:	b120      	cbz	r0, dddca <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dddc0:	4620      	mov	r0, r4
}
   dddc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   dddc6:	f7fc bbfd 	b.w	da5c4 <HAL_GPIO_Read>
}
   dddca:	2000      	movs	r0, #0
   dddcc:	bd10      	pop	{r4, pc}

000dddce <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   dddce:	280d      	cmp	r0, #13
{
   dddd0:	b510      	push	{r4, lr}
   dddd2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   dddd4:	bf9c      	itt	ls
   dddd6:	340e      	addls	r4, #14
   dddd8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dddda:	4620      	mov	r0, r4
   ddddc:	f7ff ff7c 	bl	ddcd8 <pinAvailable>
   ddde0:	b150      	cbz	r0, dddf8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   ddde2:	2103      	movs	r1, #3
   ddde4:	4620      	mov	r0, r4
   ddde6:	f7fc fbcd 	bl	da584 <HAL_Validate_Pin_Function>
   dddea:	2803      	cmp	r0, #3
   dddec:	d104      	bne.n	dddf8 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   dddee:	4620      	mov	r0, r4
}
   dddf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   dddf4:	f7fc bbfe 	b.w	da5f4 <hal_adc_read>
}
   dddf8:	2000      	movs	r0, #0
   dddfa:	bd10      	pop	{r4, pc}

000dddfc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dddfc:	4770      	bx	lr

000dddfe <__tcf_1>:
   dddfe:	4770      	bx	lr

000dde00 <_Z17acquireWireBufferv>:
{
   dde00:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   dde02:	2300      	movs	r3, #0
   dde04:	2520      	movs	r5, #32
   dde06:	8043      	strh	r3, [r0, #2]
   dde08:	2314      	movs	r3, #20
{
   dde0a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   dde0c:	8003      	strh	r3, [r0, #0]
   dde0e:	6085      	str	r5, [r0, #8]
   dde10:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dde12:	4906      	ldr	r1, [pc, #24]	; (dde2c <_Z17acquireWireBufferv+0x2c>)
   dde14:	4628      	mov	r0, r5
   dde16:	f000 f86f 	bl	ddef8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dde1a:	4904      	ldr	r1, [pc, #16]	; (dde2c <_Z17acquireWireBufferv+0x2c>)
	};
   dde1c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dde1e:	4628      	mov	r0, r5
   dde20:	f000 f86a 	bl	ddef8 <_ZnajRKSt9nothrow_t>
	};
   dde24:	60e0      	str	r0, [r4, #12]
}
   dde26:	4620      	mov	r0, r4
   dde28:	bd38      	pop	{r3, r4, r5, pc}
   dde2a:	bf00      	nop
   dde2c:	000e0154 	.word	0x000e0154

000dde30 <_Z18acquireWire1Bufferv>:
   dde30:	b538      	push	{r3, r4, r5, lr}
   dde32:	2300      	movs	r3, #0
   dde34:	2520      	movs	r5, #32
   dde36:	8043      	strh	r3, [r0, #2]
   dde38:	2314      	movs	r3, #20
   dde3a:	4604      	mov	r4, r0
   dde3c:	8003      	strh	r3, [r0, #0]
   dde3e:	6085      	str	r5, [r0, #8]
   dde40:	6105      	str	r5, [r0, #16]
   dde42:	4906      	ldr	r1, [pc, #24]	; (dde5c <_Z18acquireWire1Bufferv+0x2c>)
   dde44:	4628      	mov	r0, r5
   dde46:	f000 f857 	bl	ddef8 <_ZnajRKSt9nothrow_t>
   dde4a:	4904      	ldr	r1, [pc, #16]	; (dde5c <_Z18acquireWire1Bufferv+0x2c>)
   dde4c:	6060      	str	r0, [r4, #4]
   dde4e:	4628      	mov	r0, r5
   dde50:	f000 f852 	bl	ddef8 <_ZnajRKSt9nothrow_t>
   dde54:	60e0      	str	r0, [r4, #12]
   dde56:	4620      	mov	r0, r4
   dde58:	bd38      	pop	{r3, r4, r5, pc}
   dde5a:	bf00      	nop
   dde5c:	000e0154 	.word	0x000e0154

000dde60 <_Z19__fetch_global_Wirev>:
{
   dde60:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dde62:	4d0e      	ldr	r5, [pc, #56]	; (dde9c <_Z19__fetch_global_Wirev+0x3c>)
   dde64:	7829      	ldrb	r1, [r5, #0]
   dde66:	f3bf 8f5b 	dmb	ish
   dde6a:	f011 0401 	ands.w	r4, r1, #1
{
   dde6e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dde70:	d111      	bne.n	dde96 <_Z19__fetch_global_Wirev+0x36>
   dde72:	4628      	mov	r0, r5
   dde74:	f7f6 f920 	bl	d40b8 <__cxa_guard_acquire>
   dde78:	b168      	cbz	r0, dde96 <_Z19__fetch_global_Wirev+0x36>
   dde7a:	a801      	add	r0, sp, #4
   dde7c:	f7ff ffc0 	bl	dde00 <_Z17acquireWireBufferv>
   dde80:	aa01      	add	r2, sp, #4
   dde82:	4621      	mov	r1, r4
   dde84:	4806      	ldr	r0, [pc, #24]	; (ddea0 <_Z19__fetch_global_Wirev+0x40>)
   dde86:	f7fd fcb7 	bl	db7f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dde8a:	4628      	mov	r0, r5
   dde8c:	f7f6 f919 	bl	d40c2 <__cxa_guard_release>
   dde90:	4804      	ldr	r0, [pc, #16]	; (ddea4 <_Z19__fetch_global_Wirev+0x44>)
   dde92:	f000 fca1 	bl	de7d8 <atexit>
	return wire;
}
   dde96:	4802      	ldr	r0, [pc, #8]	; (ddea0 <_Z19__fetch_global_Wirev+0x40>)
   dde98:	b007      	add	sp, #28
   dde9a:	bd30      	pop	{r4, r5, pc}
   dde9c:	2003e724 	.word	0x2003e724
   ddea0:	2003e72c 	.word	0x2003e72c
   ddea4:	000dddfd 	.word	0x000dddfd

000ddea8 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   ddea8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   ddeaa:	4c0e      	ldr	r4, [pc, #56]	; (ddee4 <_Z20__fetch_global_Wire1v+0x3c>)
   ddeac:	7823      	ldrb	r3, [r4, #0]
   ddeae:	f3bf 8f5b 	dmb	ish
   ddeb2:	07db      	lsls	r3, r3, #31
{
   ddeb4:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   ddeb6:	d411      	bmi.n	ddedc <_Z20__fetch_global_Wire1v+0x34>
   ddeb8:	4620      	mov	r0, r4
   ddeba:	f7f6 f8fd 	bl	d40b8 <__cxa_guard_acquire>
   ddebe:	b168      	cbz	r0, ddedc <_Z20__fetch_global_Wire1v+0x34>
   ddec0:	a801      	add	r0, sp, #4
   ddec2:	f7ff ffb5 	bl	dde30 <_Z18acquireWire1Bufferv>
   ddec6:	aa01      	add	r2, sp, #4
   ddec8:	2101      	movs	r1, #1
   ddeca:	4807      	ldr	r0, [pc, #28]	; (ddee8 <_Z20__fetch_global_Wire1v+0x40>)
   ddecc:	f7fd fc94 	bl	db7f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dded0:	4620      	mov	r0, r4
   dded2:	f7f6 f8f6 	bl	d40c2 <__cxa_guard_release>
   dded6:	4805      	ldr	r0, [pc, #20]	; (ddeec <_Z20__fetch_global_Wire1v+0x44>)
   dded8:	f000 fc7e 	bl	de7d8 <atexit>
	return wire;
}
   ddedc:	4802      	ldr	r0, [pc, #8]	; (ddee8 <_Z20__fetch_global_Wire1v+0x40>)
   ddede:	b006      	add	sp, #24
   ddee0:	bd10      	pop	{r4, pc}
   ddee2:	bf00      	nop
   ddee4:	2003e728 	.word	0x2003e728
   ddee8:	2003e740 	.word	0x2003e740
   ddeec:	000dddff 	.word	0x000dddff

000ddef0 <_ZdlPvj>:
   ddef0:	f7f6 b8d5 	b.w	d409e <_ZdlPv>

000ddef4 <_ZnwjRKSt9nothrow_t>:
   ddef4:	f7f6 b8cf 	b.w	d4096 <_Znwj>

000ddef8 <_ZnajRKSt9nothrow_t>:
   ddef8:	f7f6 b8cf 	b.w	d409a <_Znaj>

000ddefc <_ZSt17__throw_bad_allocv>:
   ddefc:	b508      	push	{r3, lr}
   ddefe:	f7fc fed3 	bl	daca8 <abort>

000ddf02 <_ZSt20__throw_length_errorPKc>:
   ddf02:	b508      	push	{r3, lr}
   ddf04:	f7fc fed0 	bl	daca8 <abort>

000ddf08 <_ZSt25__throw_bad_function_callv>:
   ddf08:	b508      	push	{r3, lr}
   ddf0a:	f7fc fecd 	bl	daca8 <abort>
	...

000ddf10 <__aeabi_drsub>:
   ddf10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   ddf14:	e002      	b.n	ddf1c <__adddf3>
   ddf16:	bf00      	nop

000ddf18 <__aeabi_dsub>:
   ddf18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000ddf1c <__adddf3>:
   ddf1c:	b530      	push	{r4, r5, lr}
   ddf1e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   ddf22:	ea4f 0543 	mov.w	r5, r3, lsl #1
   ddf26:	ea94 0f05 	teq	r4, r5
   ddf2a:	bf08      	it	eq
   ddf2c:	ea90 0f02 	teqeq	r0, r2
   ddf30:	bf1f      	itttt	ne
   ddf32:	ea54 0c00 	orrsne.w	ip, r4, r0
   ddf36:	ea55 0c02 	orrsne.w	ip, r5, r2
   ddf3a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   ddf3e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ddf42:	f000 80e2 	beq.w	de10a <__adddf3+0x1ee>
   ddf46:	ea4f 5454 	mov.w	r4, r4, lsr #21
   ddf4a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   ddf4e:	bfb8      	it	lt
   ddf50:	426d      	neglt	r5, r5
   ddf52:	dd0c      	ble.n	ddf6e <__adddf3+0x52>
   ddf54:	442c      	add	r4, r5
   ddf56:	ea80 0202 	eor.w	r2, r0, r2
   ddf5a:	ea81 0303 	eor.w	r3, r1, r3
   ddf5e:	ea82 0000 	eor.w	r0, r2, r0
   ddf62:	ea83 0101 	eor.w	r1, r3, r1
   ddf66:	ea80 0202 	eor.w	r2, r0, r2
   ddf6a:	ea81 0303 	eor.w	r3, r1, r3
   ddf6e:	2d36      	cmp	r5, #54	; 0x36
   ddf70:	bf88      	it	hi
   ddf72:	bd30      	pophi	{r4, r5, pc}
   ddf74:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ddf78:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ddf7c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   ddf80:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   ddf84:	d002      	beq.n	ddf8c <__adddf3+0x70>
   ddf86:	4240      	negs	r0, r0
   ddf88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ddf8c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   ddf90:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ddf94:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   ddf98:	d002      	beq.n	ddfa0 <__adddf3+0x84>
   ddf9a:	4252      	negs	r2, r2
   ddf9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ddfa0:	ea94 0f05 	teq	r4, r5
   ddfa4:	f000 80a7 	beq.w	de0f6 <__adddf3+0x1da>
   ddfa8:	f1a4 0401 	sub.w	r4, r4, #1
   ddfac:	f1d5 0e20 	rsbs	lr, r5, #32
   ddfb0:	db0d      	blt.n	ddfce <__adddf3+0xb2>
   ddfb2:	fa02 fc0e 	lsl.w	ip, r2, lr
   ddfb6:	fa22 f205 	lsr.w	r2, r2, r5
   ddfba:	1880      	adds	r0, r0, r2
   ddfbc:	f141 0100 	adc.w	r1, r1, #0
   ddfc0:	fa03 f20e 	lsl.w	r2, r3, lr
   ddfc4:	1880      	adds	r0, r0, r2
   ddfc6:	fa43 f305 	asr.w	r3, r3, r5
   ddfca:	4159      	adcs	r1, r3
   ddfcc:	e00e      	b.n	ddfec <__adddf3+0xd0>
   ddfce:	f1a5 0520 	sub.w	r5, r5, #32
   ddfd2:	f10e 0e20 	add.w	lr, lr, #32
   ddfd6:	2a01      	cmp	r2, #1
   ddfd8:	fa03 fc0e 	lsl.w	ip, r3, lr
   ddfdc:	bf28      	it	cs
   ddfde:	f04c 0c02 	orrcs.w	ip, ip, #2
   ddfe2:	fa43 f305 	asr.w	r3, r3, r5
   ddfe6:	18c0      	adds	r0, r0, r3
   ddfe8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   ddfec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ddff0:	d507      	bpl.n	de002 <__adddf3+0xe6>
   ddff2:	f04f 0e00 	mov.w	lr, #0
   ddff6:	f1dc 0c00 	rsbs	ip, ip, #0
   ddffa:	eb7e 0000 	sbcs.w	r0, lr, r0
   ddffe:	eb6e 0101 	sbc.w	r1, lr, r1
   de002:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   de006:	d31b      	bcc.n	de040 <__adddf3+0x124>
   de008:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   de00c:	d30c      	bcc.n	de028 <__adddf3+0x10c>
   de00e:	0849      	lsrs	r1, r1, #1
   de010:	ea5f 0030 	movs.w	r0, r0, rrx
   de014:	ea4f 0c3c 	mov.w	ip, ip, rrx
   de018:	f104 0401 	add.w	r4, r4, #1
   de01c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   de020:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   de024:	f080 809a 	bcs.w	de15c <__adddf3+0x240>
   de028:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   de02c:	bf08      	it	eq
   de02e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   de032:	f150 0000 	adcs.w	r0, r0, #0
   de036:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   de03a:	ea41 0105 	orr.w	r1, r1, r5
   de03e:	bd30      	pop	{r4, r5, pc}
   de040:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   de044:	4140      	adcs	r0, r0
   de046:	eb41 0101 	adc.w	r1, r1, r1
   de04a:	3c01      	subs	r4, #1
   de04c:	bf28      	it	cs
   de04e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   de052:	d2e9      	bcs.n	de028 <__adddf3+0x10c>
   de054:	f091 0f00 	teq	r1, #0
   de058:	bf04      	itt	eq
   de05a:	4601      	moveq	r1, r0
   de05c:	2000      	moveq	r0, #0
   de05e:	fab1 f381 	clz	r3, r1
   de062:	bf08      	it	eq
   de064:	3320      	addeq	r3, #32
   de066:	f1a3 030b 	sub.w	r3, r3, #11
   de06a:	f1b3 0220 	subs.w	r2, r3, #32
   de06e:	da0c      	bge.n	de08a <__adddf3+0x16e>
   de070:	320c      	adds	r2, #12
   de072:	dd08      	ble.n	de086 <__adddf3+0x16a>
   de074:	f102 0c14 	add.w	ip, r2, #20
   de078:	f1c2 020c 	rsb	r2, r2, #12
   de07c:	fa01 f00c 	lsl.w	r0, r1, ip
   de080:	fa21 f102 	lsr.w	r1, r1, r2
   de084:	e00c      	b.n	de0a0 <__adddf3+0x184>
   de086:	f102 0214 	add.w	r2, r2, #20
   de08a:	bfd8      	it	le
   de08c:	f1c2 0c20 	rsble	ip, r2, #32
   de090:	fa01 f102 	lsl.w	r1, r1, r2
   de094:	fa20 fc0c 	lsr.w	ip, r0, ip
   de098:	bfdc      	itt	le
   de09a:	ea41 010c 	orrle.w	r1, r1, ip
   de09e:	4090      	lslle	r0, r2
   de0a0:	1ae4      	subs	r4, r4, r3
   de0a2:	bfa2      	ittt	ge
   de0a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   de0a8:	4329      	orrge	r1, r5
   de0aa:	bd30      	popge	{r4, r5, pc}
   de0ac:	ea6f 0404 	mvn.w	r4, r4
   de0b0:	3c1f      	subs	r4, #31
   de0b2:	da1c      	bge.n	de0ee <__adddf3+0x1d2>
   de0b4:	340c      	adds	r4, #12
   de0b6:	dc0e      	bgt.n	de0d6 <__adddf3+0x1ba>
   de0b8:	f104 0414 	add.w	r4, r4, #20
   de0bc:	f1c4 0220 	rsb	r2, r4, #32
   de0c0:	fa20 f004 	lsr.w	r0, r0, r4
   de0c4:	fa01 f302 	lsl.w	r3, r1, r2
   de0c8:	ea40 0003 	orr.w	r0, r0, r3
   de0cc:	fa21 f304 	lsr.w	r3, r1, r4
   de0d0:	ea45 0103 	orr.w	r1, r5, r3
   de0d4:	bd30      	pop	{r4, r5, pc}
   de0d6:	f1c4 040c 	rsb	r4, r4, #12
   de0da:	f1c4 0220 	rsb	r2, r4, #32
   de0de:	fa20 f002 	lsr.w	r0, r0, r2
   de0e2:	fa01 f304 	lsl.w	r3, r1, r4
   de0e6:	ea40 0003 	orr.w	r0, r0, r3
   de0ea:	4629      	mov	r1, r5
   de0ec:	bd30      	pop	{r4, r5, pc}
   de0ee:	fa21 f004 	lsr.w	r0, r1, r4
   de0f2:	4629      	mov	r1, r5
   de0f4:	bd30      	pop	{r4, r5, pc}
   de0f6:	f094 0f00 	teq	r4, #0
   de0fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   de0fe:	bf06      	itte	eq
   de100:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   de104:	3401      	addeq	r4, #1
   de106:	3d01      	subne	r5, #1
   de108:	e74e      	b.n	ddfa8 <__adddf3+0x8c>
   de10a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   de10e:	bf18      	it	ne
   de110:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   de114:	d029      	beq.n	de16a <__adddf3+0x24e>
   de116:	ea94 0f05 	teq	r4, r5
   de11a:	bf08      	it	eq
   de11c:	ea90 0f02 	teqeq	r0, r2
   de120:	d005      	beq.n	de12e <__adddf3+0x212>
   de122:	ea54 0c00 	orrs.w	ip, r4, r0
   de126:	bf04      	itt	eq
   de128:	4619      	moveq	r1, r3
   de12a:	4610      	moveq	r0, r2
   de12c:	bd30      	pop	{r4, r5, pc}
   de12e:	ea91 0f03 	teq	r1, r3
   de132:	bf1e      	ittt	ne
   de134:	2100      	movne	r1, #0
   de136:	2000      	movne	r0, #0
   de138:	bd30      	popne	{r4, r5, pc}
   de13a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   de13e:	d105      	bne.n	de14c <__adddf3+0x230>
   de140:	0040      	lsls	r0, r0, #1
   de142:	4149      	adcs	r1, r1
   de144:	bf28      	it	cs
   de146:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   de14a:	bd30      	pop	{r4, r5, pc}
   de14c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   de150:	bf3c      	itt	cc
   de152:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   de156:	bd30      	popcc	{r4, r5, pc}
   de158:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   de15c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   de160:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   de164:	f04f 0000 	mov.w	r0, #0
   de168:	bd30      	pop	{r4, r5, pc}
   de16a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   de16e:	bf1a      	itte	ne
   de170:	4619      	movne	r1, r3
   de172:	4610      	movne	r0, r2
   de174:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   de178:	bf1c      	itt	ne
   de17a:	460b      	movne	r3, r1
   de17c:	4602      	movne	r2, r0
   de17e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   de182:	bf06      	itte	eq
   de184:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   de188:	ea91 0f03 	teqeq	r1, r3
   de18c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   de190:	bd30      	pop	{r4, r5, pc}
   de192:	bf00      	nop

000de194 <__aeabi_ui2d>:
   de194:	f090 0f00 	teq	r0, #0
   de198:	bf04      	itt	eq
   de19a:	2100      	moveq	r1, #0
   de19c:	4770      	bxeq	lr
   de19e:	b530      	push	{r4, r5, lr}
   de1a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   de1a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   de1a8:	f04f 0500 	mov.w	r5, #0
   de1ac:	f04f 0100 	mov.w	r1, #0
   de1b0:	e750      	b.n	de054 <__adddf3+0x138>
   de1b2:	bf00      	nop

000de1b4 <__aeabi_i2d>:
   de1b4:	f090 0f00 	teq	r0, #0
   de1b8:	bf04      	itt	eq
   de1ba:	2100      	moveq	r1, #0
   de1bc:	4770      	bxeq	lr
   de1be:	b530      	push	{r4, r5, lr}
   de1c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   de1c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   de1c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   de1cc:	bf48      	it	mi
   de1ce:	4240      	negmi	r0, r0
   de1d0:	f04f 0100 	mov.w	r1, #0
   de1d4:	e73e      	b.n	de054 <__adddf3+0x138>
   de1d6:	bf00      	nop

000de1d8 <__aeabi_f2d>:
   de1d8:	0042      	lsls	r2, r0, #1
   de1da:	ea4f 01e2 	mov.w	r1, r2, asr #3
   de1de:	ea4f 0131 	mov.w	r1, r1, rrx
   de1e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   de1e6:	bf1f      	itttt	ne
   de1e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   de1ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   de1f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   de1f4:	4770      	bxne	lr
   de1f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   de1fa:	bf08      	it	eq
   de1fc:	4770      	bxeq	lr
   de1fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   de202:	bf04      	itt	eq
   de204:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   de208:	4770      	bxeq	lr
   de20a:	b530      	push	{r4, r5, lr}
   de20c:	f44f 7460 	mov.w	r4, #896	; 0x380
   de210:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   de214:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   de218:	e71c      	b.n	de054 <__adddf3+0x138>
   de21a:	bf00      	nop

000de21c <__aeabi_ul2d>:
   de21c:	ea50 0201 	orrs.w	r2, r0, r1
   de220:	bf08      	it	eq
   de222:	4770      	bxeq	lr
   de224:	b530      	push	{r4, r5, lr}
   de226:	f04f 0500 	mov.w	r5, #0
   de22a:	e00a      	b.n	de242 <__aeabi_l2d+0x16>

000de22c <__aeabi_l2d>:
   de22c:	ea50 0201 	orrs.w	r2, r0, r1
   de230:	bf08      	it	eq
   de232:	4770      	bxeq	lr
   de234:	b530      	push	{r4, r5, lr}
   de236:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   de23a:	d502      	bpl.n	de242 <__aeabi_l2d+0x16>
   de23c:	4240      	negs	r0, r0
   de23e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   de242:	f44f 6480 	mov.w	r4, #1024	; 0x400
   de246:	f104 0432 	add.w	r4, r4, #50	; 0x32
   de24a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   de24e:	f43f aed8 	beq.w	de002 <__adddf3+0xe6>
   de252:	f04f 0203 	mov.w	r2, #3
   de256:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   de25a:	bf18      	it	ne
   de25c:	3203      	addne	r2, #3
   de25e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   de262:	bf18      	it	ne
   de264:	3203      	addne	r2, #3
   de266:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   de26a:	f1c2 0320 	rsb	r3, r2, #32
   de26e:	fa00 fc03 	lsl.w	ip, r0, r3
   de272:	fa20 f002 	lsr.w	r0, r0, r2
   de276:	fa01 fe03 	lsl.w	lr, r1, r3
   de27a:	ea40 000e 	orr.w	r0, r0, lr
   de27e:	fa21 f102 	lsr.w	r1, r1, r2
   de282:	4414      	add	r4, r2
   de284:	e6bd      	b.n	de002 <__adddf3+0xe6>
   de286:	bf00      	nop

000de288 <__aeabi_dmul>:
   de288:	b570      	push	{r4, r5, r6, lr}
   de28a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   de28e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   de292:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   de296:	bf1d      	ittte	ne
   de298:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   de29c:	ea94 0f0c 	teqne	r4, ip
   de2a0:	ea95 0f0c 	teqne	r5, ip
   de2a4:	f000 f8de 	bleq	de464 <__aeabi_dmul+0x1dc>
   de2a8:	442c      	add	r4, r5
   de2aa:	ea81 0603 	eor.w	r6, r1, r3
   de2ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   de2b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   de2b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   de2ba:	bf18      	it	ne
   de2bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   de2c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   de2c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   de2c8:	d038      	beq.n	de33c <__aeabi_dmul+0xb4>
   de2ca:	fba0 ce02 	umull	ip, lr, r0, r2
   de2ce:	f04f 0500 	mov.w	r5, #0
   de2d2:	fbe1 e502 	umlal	lr, r5, r1, r2
   de2d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   de2da:	fbe0 e503 	umlal	lr, r5, r0, r3
   de2de:	f04f 0600 	mov.w	r6, #0
   de2e2:	fbe1 5603 	umlal	r5, r6, r1, r3
   de2e6:	f09c 0f00 	teq	ip, #0
   de2ea:	bf18      	it	ne
   de2ec:	f04e 0e01 	orrne.w	lr, lr, #1
   de2f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   de2f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   de2f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   de2fc:	d204      	bcs.n	de308 <__aeabi_dmul+0x80>
   de2fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   de302:	416d      	adcs	r5, r5
   de304:	eb46 0606 	adc.w	r6, r6, r6
   de308:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   de30c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   de310:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   de314:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   de318:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   de31c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   de320:	bf88      	it	hi
   de322:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   de326:	d81e      	bhi.n	de366 <__aeabi_dmul+0xde>
   de328:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   de32c:	bf08      	it	eq
   de32e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   de332:	f150 0000 	adcs.w	r0, r0, #0
   de336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   de33a:	bd70      	pop	{r4, r5, r6, pc}
   de33c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   de340:	ea46 0101 	orr.w	r1, r6, r1
   de344:	ea40 0002 	orr.w	r0, r0, r2
   de348:	ea81 0103 	eor.w	r1, r1, r3
   de34c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   de350:	bfc2      	ittt	gt
   de352:	ebd4 050c 	rsbsgt	r5, r4, ip
   de356:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   de35a:	bd70      	popgt	{r4, r5, r6, pc}
   de35c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   de360:	f04f 0e00 	mov.w	lr, #0
   de364:	3c01      	subs	r4, #1
   de366:	f300 80ab 	bgt.w	de4c0 <__aeabi_dmul+0x238>
   de36a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   de36e:	bfde      	ittt	le
   de370:	2000      	movle	r0, #0
   de372:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   de376:	bd70      	pople	{r4, r5, r6, pc}
   de378:	f1c4 0400 	rsb	r4, r4, #0
   de37c:	3c20      	subs	r4, #32
   de37e:	da35      	bge.n	de3ec <__aeabi_dmul+0x164>
   de380:	340c      	adds	r4, #12
   de382:	dc1b      	bgt.n	de3bc <__aeabi_dmul+0x134>
   de384:	f104 0414 	add.w	r4, r4, #20
   de388:	f1c4 0520 	rsb	r5, r4, #32
   de38c:	fa00 f305 	lsl.w	r3, r0, r5
   de390:	fa20 f004 	lsr.w	r0, r0, r4
   de394:	fa01 f205 	lsl.w	r2, r1, r5
   de398:	ea40 0002 	orr.w	r0, r0, r2
   de39c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   de3a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   de3a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   de3a8:	fa21 f604 	lsr.w	r6, r1, r4
   de3ac:	eb42 0106 	adc.w	r1, r2, r6
   de3b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   de3b4:	bf08      	it	eq
   de3b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   de3ba:	bd70      	pop	{r4, r5, r6, pc}
   de3bc:	f1c4 040c 	rsb	r4, r4, #12
   de3c0:	f1c4 0520 	rsb	r5, r4, #32
   de3c4:	fa00 f304 	lsl.w	r3, r0, r4
   de3c8:	fa20 f005 	lsr.w	r0, r0, r5
   de3cc:	fa01 f204 	lsl.w	r2, r1, r4
   de3d0:	ea40 0002 	orr.w	r0, r0, r2
   de3d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   de3d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   de3dc:	f141 0100 	adc.w	r1, r1, #0
   de3e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   de3e4:	bf08      	it	eq
   de3e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   de3ea:	bd70      	pop	{r4, r5, r6, pc}
   de3ec:	f1c4 0520 	rsb	r5, r4, #32
   de3f0:	fa00 f205 	lsl.w	r2, r0, r5
   de3f4:	ea4e 0e02 	orr.w	lr, lr, r2
   de3f8:	fa20 f304 	lsr.w	r3, r0, r4
   de3fc:	fa01 f205 	lsl.w	r2, r1, r5
   de400:	ea43 0302 	orr.w	r3, r3, r2
   de404:	fa21 f004 	lsr.w	r0, r1, r4
   de408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   de40c:	fa21 f204 	lsr.w	r2, r1, r4
   de410:	ea20 0002 	bic.w	r0, r0, r2
   de414:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   de418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   de41c:	bf08      	it	eq
   de41e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   de422:	bd70      	pop	{r4, r5, r6, pc}
   de424:	f094 0f00 	teq	r4, #0
   de428:	d10f      	bne.n	de44a <__aeabi_dmul+0x1c2>
   de42a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   de42e:	0040      	lsls	r0, r0, #1
   de430:	eb41 0101 	adc.w	r1, r1, r1
   de434:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   de438:	bf08      	it	eq
   de43a:	3c01      	subeq	r4, #1
   de43c:	d0f7      	beq.n	de42e <__aeabi_dmul+0x1a6>
   de43e:	ea41 0106 	orr.w	r1, r1, r6
   de442:	f095 0f00 	teq	r5, #0
   de446:	bf18      	it	ne
   de448:	4770      	bxne	lr
   de44a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   de44e:	0052      	lsls	r2, r2, #1
   de450:	eb43 0303 	adc.w	r3, r3, r3
   de454:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   de458:	bf08      	it	eq
   de45a:	3d01      	subeq	r5, #1
   de45c:	d0f7      	beq.n	de44e <__aeabi_dmul+0x1c6>
   de45e:	ea43 0306 	orr.w	r3, r3, r6
   de462:	4770      	bx	lr
   de464:	ea94 0f0c 	teq	r4, ip
   de468:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   de46c:	bf18      	it	ne
   de46e:	ea95 0f0c 	teqne	r5, ip
   de472:	d00c      	beq.n	de48e <__aeabi_dmul+0x206>
   de474:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   de478:	bf18      	it	ne
   de47a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   de47e:	d1d1      	bne.n	de424 <__aeabi_dmul+0x19c>
   de480:	ea81 0103 	eor.w	r1, r1, r3
   de484:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   de488:	f04f 0000 	mov.w	r0, #0
   de48c:	bd70      	pop	{r4, r5, r6, pc}
   de48e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   de492:	bf06      	itte	eq
   de494:	4610      	moveq	r0, r2
   de496:	4619      	moveq	r1, r3
   de498:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   de49c:	d019      	beq.n	de4d2 <__aeabi_dmul+0x24a>
   de49e:	ea94 0f0c 	teq	r4, ip
   de4a2:	d102      	bne.n	de4aa <__aeabi_dmul+0x222>
   de4a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   de4a8:	d113      	bne.n	de4d2 <__aeabi_dmul+0x24a>
   de4aa:	ea95 0f0c 	teq	r5, ip
   de4ae:	d105      	bne.n	de4bc <__aeabi_dmul+0x234>
   de4b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   de4b4:	bf1c      	itt	ne
   de4b6:	4610      	movne	r0, r2
   de4b8:	4619      	movne	r1, r3
   de4ba:	d10a      	bne.n	de4d2 <__aeabi_dmul+0x24a>
   de4bc:	ea81 0103 	eor.w	r1, r1, r3
   de4c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   de4c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   de4c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   de4cc:	f04f 0000 	mov.w	r0, #0
   de4d0:	bd70      	pop	{r4, r5, r6, pc}
   de4d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   de4d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   de4da:	bd70      	pop	{r4, r5, r6, pc}

000de4dc <__aeabi_ddiv>:
   de4dc:	b570      	push	{r4, r5, r6, lr}
   de4de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   de4e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   de4e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   de4ea:	bf1d      	ittte	ne
   de4ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   de4f0:	ea94 0f0c 	teqne	r4, ip
   de4f4:	ea95 0f0c 	teqne	r5, ip
   de4f8:	f000 f8a7 	bleq	de64a <__aeabi_ddiv+0x16e>
   de4fc:	eba4 0405 	sub.w	r4, r4, r5
   de500:	ea81 0e03 	eor.w	lr, r1, r3
   de504:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   de508:	ea4f 3101 	mov.w	r1, r1, lsl #12
   de50c:	f000 8088 	beq.w	de620 <__aeabi_ddiv+0x144>
   de510:	ea4f 3303 	mov.w	r3, r3, lsl #12
   de514:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   de518:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   de51c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   de520:	ea4f 2202 	mov.w	r2, r2, lsl #8
   de524:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   de528:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   de52c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   de530:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   de534:	429d      	cmp	r5, r3
   de536:	bf08      	it	eq
   de538:	4296      	cmpeq	r6, r2
   de53a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   de53e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   de542:	d202      	bcs.n	de54a <__aeabi_ddiv+0x6e>
   de544:	085b      	lsrs	r3, r3, #1
   de546:	ea4f 0232 	mov.w	r2, r2, rrx
   de54a:	1ab6      	subs	r6, r6, r2
   de54c:	eb65 0503 	sbc.w	r5, r5, r3
   de550:	085b      	lsrs	r3, r3, #1
   de552:	ea4f 0232 	mov.w	r2, r2, rrx
   de556:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   de55a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   de55e:	ebb6 0e02 	subs.w	lr, r6, r2
   de562:	eb75 0e03 	sbcs.w	lr, r5, r3
   de566:	bf22      	ittt	cs
   de568:	1ab6      	subcs	r6, r6, r2
   de56a:	4675      	movcs	r5, lr
   de56c:	ea40 000c 	orrcs.w	r0, r0, ip
   de570:	085b      	lsrs	r3, r3, #1
   de572:	ea4f 0232 	mov.w	r2, r2, rrx
   de576:	ebb6 0e02 	subs.w	lr, r6, r2
   de57a:	eb75 0e03 	sbcs.w	lr, r5, r3
   de57e:	bf22      	ittt	cs
   de580:	1ab6      	subcs	r6, r6, r2
   de582:	4675      	movcs	r5, lr
   de584:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   de588:	085b      	lsrs	r3, r3, #1
   de58a:	ea4f 0232 	mov.w	r2, r2, rrx
   de58e:	ebb6 0e02 	subs.w	lr, r6, r2
   de592:	eb75 0e03 	sbcs.w	lr, r5, r3
   de596:	bf22      	ittt	cs
   de598:	1ab6      	subcs	r6, r6, r2
   de59a:	4675      	movcs	r5, lr
   de59c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   de5a0:	085b      	lsrs	r3, r3, #1
   de5a2:	ea4f 0232 	mov.w	r2, r2, rrx
   de5a6:	ebb6 0e02 	subs.w	lr, r6, r2
   de5aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   de5ae:	bf22      	ittt	cs
   de5b0:	1ab6      	subcs	r6, r6, r2
   de5b2:	4675      	movcs	r5, lr
   de5b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   de5b8:	ea55 0e06 	orrs.w	lr, r5, r6
   de5bc:	d018      	beq.n	de5f0 <__aeabi_ddiv+0x114>
   de5be:	ea4f 1505 	mov.w	r5, r5, lsl #4
   de5c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   de5c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   de5ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   de5ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   de5d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   de5d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   de5da:	d1c0      	bne.n	de55e <__aeabi_ddiv+0x82>
   de5dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   de5e0:	d10b      	bne.n	de5fa <__aeabi_ddiv+0x11e>
   de5e2:	ea41 0100 	orr.w	r1, r1, r0
   de5e6:	f04f 0000 	mov.w	r0, #0
   de5ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   de5ee:	e7b6      	b.n	de55e <__aeabi_ddiv+0x82>
   de5f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   de5f4:	bf04      	itt	eq
   de5f6:	4301      	orreq	r1, r0
   de5f8:	2000      	moveq	r0, #0
   de5fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   de5fe:	bf88      	it	hi
   de600:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   de604:	f63f aeaf 	bhi.w	de366 <__aeabi_dmul+0xde>
   de608:	ebb5 0c03 	subs.w	ip, r5, r3
   de60c:	bf04      	itt	eq
   de60e:	ebb6 0c02 	subseq.w	ip, r6, r2
   de612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   de616:	f150 0000 	adcs.w	r0, r0, #0
   de61a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   de61e:	bd70      	pop	{r4, r5, r6, pc}
   de620:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   de624:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   de628:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   de62c:	bfc2      	ittt	gt
   de62e:	ebd4 050c 	rsbsgt	r5, r4, ip
   de632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   de636:	bd70      	popgt	{r4, r5, r6, pc}
   de638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   de63c:	f04f 0e00 	mov.w	lr, #0
   de640:	3c01      	subs	r4, #1
   de642:	e690      	b.n	de366 <__aeabi_dmul+0xde>
   de644:	ea45 0e06 	orr.w	lr, r5, r6
   de648:	e68d      	b.n	de366 <__aeabi_dmul+0xde>
   de64a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   de64e:	ea94 0f0c 	teq	r4, ip
   de652:	bf08      	it	eq
   de654:	ea95 0f0c 	teqeq	r5, ip
   de658:	f43f af3b 	beq.w	de4d2 <__aeabi_dmul+0x24a>
   de65c:	ea94 0f0c 	teq	r4, ip
   de660:	d10a      	bne.n	de678 <__aeabi_ddiv+0x19c>
   de662:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   de666:	f47f af34 	bne.w	de4d2 <__aeabi_dmul+0x24a>
   de66a:	ea95 0f0c 	teq	r5, ip
   de66e:	f47f af25 	bne.w	de4bc <__aeabi_dmul+0x234>
   de672:	4610      	mov	r0, r2
   de674:	4619      	mov	r1, r3
   de676:	e72c      	b.n	de4d2 <__aeabi_dmul+0x24a>
   de678:	ea95 0f0c 	teq	r5, ip
   de67c:	d106      	bne.n	de68c <__aeabi_ddiv+0x1b0>
   de67e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   de682:	f43f aefd 	beq.w	de480 <__aeabi_dmul+0x1f8>
   de686:	4610      	mov	r0, r2
   de688:	4619      	mov	r1, r3
   de68a:	e722      	b.n	de4d2 <__aeabi_dmul+0x24a>
   de68c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   de690:	bf18      	it	ne
   de692:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   de696:	f47f aec5 	bne.w	de424 <__aeabi_dmul+0x19c>
   de69a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   de69e:	f47f af0d 	bne.w	de4bc <__aeabi_dmul+0x234>
   de6a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   de6a6:	f47f aeeb 	bne.w	de480 <__aeabi_dmul+0x1f8>
   de6aa:	e712      	b.n	de4d2 <__aeabi_dmul+0x24a>

000de6ac <__aeabi_d2uiz>:
   de6ac:	004a      	lsls	r2, r1, #1
   de6ae:	d211      	bcs.n	de6d4 <__aeabi_d2uiz+0x28>
   de6b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   de6b4:	d211      	bcs.n	de6da <__aeabi_d2uiz+0x2e>
   de6b6:	d50d      	bpl.n	de6d4 <__aeabi_d2uiz+0x28>
   de6b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   de6bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   de6c0:	d40e      	bmi.n	de6e0 <__aeabi_d2uiz+0x34>
   de6c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   de6c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   de6ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   de6ce:	fa23 f002 	lsr.w	r0, r3, r2
   de6d2:	4770      	bx	lr
   de6d4:	f04f 0000 	mov.w	r0, #0
   de6d8:	4770      	bx	lr
   de6da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   de6de:	d102      	bne.n	de6e6 <__aeabi_d2uiz+0x3a>
   de6e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   de6e4:	4770      	bx	lr
   de6e6:	f04f 0000 	mov.w	r0, #0
   de6ea:	4770      	bx	lr

000de6ec <__aeabi_d2f>:
   de6ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   de6f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   de6f4:	bf24      	itt	cs
   de6f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   de6fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   de6fe:	d90d      	bls.n	de71c <__aeabi_d2f+0x30>
   de700:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   de704:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   de708:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   de70c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   de710:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   de714:	bf08      	it	eq
   de716:	f020 0001 	biceq.w	r0, r0, #1
   de71a:	4770      	bx	lr
   de71c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   de720:	d121      	bne.n	de766 <__aeabi_d2f+0x7a>
   de722:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   de726:	bfbc      	itt	lt
   de728:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   de72c:	4770      	bxlt	lr
   de72e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   de732:	ea4f 5252 	mov.w	r2, r2, lsr #21
   de736:	f1c2 0218 	rsb	r2, r2, #24
   de73a:	f1c2 0c20 	rsb	ip, r2, #32
   de73e:	fa10 f30c 	lsls.w	r3, r0, ip
   de742:	fa20 f002 	lsr.w	r0, r0, r2
   de746:	bf18      	it	ne
   de748:	f040 0001 	orrne.w	r0, r0, #1
   de74c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   de750:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   de754:	fa03 fc0c 	lsl.w	ip, r3, ip
   de758:	ea40 000c 	orr.w	r0, r0, ip
   de75c:	fa23 f302 	lsr.w	r3, r3, r2
   de760:	ea4f 0343 	mov.w	r3, r3, lsl #1
   de764:	e7cc      	b.n	de700 <__aeabi_d2f+0x14>
   de766:	ea7f 5362 	mvns.w	r3, r2, asr #21
   de76a:	d107      	bne.n	de77c <__aeabi_d2f+0x90>
   de76c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   de770:	bf1e      	ittt	ne
   de772:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   de776:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   de77a:	4770      	bxne	lr
   de77c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   de780:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   de784:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   de788:	4770      	bx	lr
   de78a:	bf00      	nop

000de78c <asctime_r>:
   de78c:	b510      	push	{r4, lr}
   de78e:	460c      	mov	r4, r1
   de790:	6941      	ldr	r1, [r0, #20]
   de792:	6903      	ldr	r3, [r0, #16]
   de794:	6982      	ldr	r2, [r0, #24]
   de796:	b086      	sub	sp, #24
   de798:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   de79c:	9104      	str	r1, [sp, #16]
   de79e:	6801      	ldr	r1, [r0, #0]
   de7a0:	9103      	str	r1, [sp, #12]
   de7a2:	6841      	ldr	r1, [r0, #4]
   de7a4:	9102      	str	r1, [sp, #8]
   de7a6:	6881      	ldr	r1, [r0, #8]
   de7a8:	9101      	str	r1, [sp, #4]
   de7aa:	68c1      	ldr	r1, [r0, #12]
   de7ac:	9100      	str	r1, [sp, #0]
   de7ae:	4907      	ldr	r1, [pc, #28]	; (de7cc <asctime_r+0x40>)
   de7b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   de7b4:	440b      	add	r3, r1
   de7b6:	4906      	ldr	r1, [pc, #24]	; (de7d0 <asctime_r+0x44>)
   de7b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   de7bc:	440a      	add	r2, r1
   de7be:	4620      	mov	r0, r4
   de7c0:	4904      	ldr	r1, [pc, #16]	; (de7d4 <asctime_r+0x48>)
   de7c2:	f7fc fa51 	bl	dac68 <siprintf>
   de7c6:	4620      	mov	r0, r4
   de7c8:	b006      	add	sp, #24
   de7ca:	bd10      	pop	{r4, pc}
   de7cc:	000e018a 	.word	0x000e018a
   de7d0:	000e0175 	.word	0x000e0175
   de7d4:	000e0155 	.word	0x000e0155

000de7d8 <atexit>:
   de7d8:	2300      	movs	r3, #0
   de7da:	4601      	mov	r1, r0
   de7dc:	461a      	mov	r2, r3
   de7de:	4618      	mov	r0, r3
   de7e0:	f000 ba3e 	b.w	dec60 <__register_exitproc>

000de7e4 <gmtime>:
   de7e4:	b538      	push	{r3, r4, r5, lr}
   de7e6:	4b07      	ldr	r3, [pc, #28]	; (de804 <gmtime+0x20>)
   de7e8:	681d      	ldr	r5, [r3, #0]
   de7ea:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   de7ec:	4604      	mov	r4, r0
   de7ee:	b91b      	cbnz	r3, de7f8 <gmtime+0x14>
   de7f0:	2024      	movs	r0, #36	; 0x24
   de7f2:	f7fc fa21 	bl	dac38 <malloc>
   de7f6:	63e8      	str	r0, [r5, #60]	; 0x3c
   de7f8:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   de7fa:	4620      	mov	r0, r4
   de7fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   de800:	f7fc ba82 	b.w	dad08 <gmtime_r>
   de804:	2003dc54 	.word	0x2003dc54

000de808 <memcpy>:
   de808:	440a      	add	r2, r1
   de80a:	4291      	cmp	r1, r2
   de80c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   de810:	d100      	bne.n	de814 <memcpy+0xc>
   de812:	4770      	bx	lr
   de814:	b510      	push	{r4, lr}
   de816:	f811 4b01 	ldrb.w	r4, [r1], #1
   de81a:	f803 4f01 	strb.w	r4, [r3, #1]!
   de81e:	4291      	cmp	r1, r2
   de820:	d1f9      	bne.n	de816 <memcpy+0xe>
   de822:	bd10      	pop	{r4, pc}

000de824 <memmove>:
   de824:	4288      	cmp	r0, r1
   de826:	b510      	push	{r4, lr}
   de828:	eb01 0402 	add.w	r4, r1, r2
   de82c:	d902      	bls.n	de834 <memmove+0x10>
   de82e:	4284      	cmp	r4, r0
   de830:	4623      	mov	r3, r4
   de832:	d807      	bhi.n	de844 <memmove+0x20>
   de834:	1e43      	subs	r3, r0, #1
   de836:	42a1      	cmp	r1, r4
   de838:	d008      	beq.n	de84c <memmove+0x28>
   de83a:	f811 2b01 	ldrb.w	r2, [r1], #1
   de83e:	f803 2f01 	strb.w	r2, [r3, #1]!
   de842:	e7f8      	b.n	de836 <memmove+0x12>
   de844:	4402      	add	r2, r0
   de846:	4601      	mov	r1, r0
   de848:	428a      	cmp	r2, r1
   de84a:	d100      	bne.n	de84e <memmove+0x2a>
   de84c:	bd10      	pop	{r4, pc}
   de84e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   de852:	f802 4d01 	strb.w	r4, [r2, #-1]!
   de856:	e7f7      	b.n	de848 <memmove+0x24>

000de858 <memset>:
   de858:	4402      	add	r2, r0
   de85a:	4603      	mov	r3, r0
   de85c:	4293      	cmp	r3, r2
   de85e:	d100      	bne.n	de862 <memset+0xa>
   de860:	4770      	bx	lr
   de862:	f803 1b01 	strb.w	r1, [r3], #1
   de866:	e7f9      	b.n	de85c <memset+0x4>

000de868 <srand>:
   de868:	b538      	push	{r3, r4, r5, lr}
   de86a:	4b0d      	ldr	r3, [pc, #52]	; (de8a0 <srand+0x38>)
   de86c:	681d      	ldr	r5, [r3, #0]
   de86e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   de870:	4604      	mov	r4, r0
   de872:	b97b      	cbnz	r3, de894 <srand+0x2c>
   de874:	2018      	movs	r0, #24
   de876:	f7fc f9df 	bl	dac38 <malloc>
   de87a:	4a0a      	ldr	r2, [pc, #40]	; (de8a4 <srand+0x3c>)
   de87c:	4b0a      	ldr	r3, [pc, #40]	; (de8a8 <srand+0x40>)
   de87e:	63a8      	str	r0, [r5, #56]	; 0x38
   de880:	e9c0 2300 	strd	r2, r3, [r0]
   de884:	4b09      	ldr	r3, [pc, #36]	; (de8ac <srand+0x44>)
   de886:	6083      	str	r3, [r0, #8]
   de888:	230b      	movs	r3, #11
   de88a:	8183      	strh	r3, [r0, #12]
   de88c:	2201      	movs	r2, #1
   de88e:	2300      	movs	r3, #0
   de890:	e9c0 2304 	strd	r2, r3, [r0, #16]
   de894:	6bab      	ldr	r3, [r5, #56]	; 0x38
   de896:	2200      	movs	r2, #0
   de898:	611c      	str	r4, [r3, #16]
   de89a:	615a      	str	r2, [r3, #20]
   de89c:	bd38      	pop	{r3, r4, r5, pc}
   de89e:	bf00      	nop
   de8a0:	2003dc54 	.word	0x2003dc54
   de8a4:	abcd330e 	.word	0xabcd330e
   de8a8:	e66d1234 	.word	0xe66d1234
   de8ac:	0005deec 	.word	0x0005deec

000de8b0 <rand>:
   de8b0:	4b13      	ldr	r3, [pc, #76]	; (de900 <rand+0x50>)
   de8b2:	b510      	push	{r4, lr}
   de8b4:	681c      	ldr	r4, [r3, #0]
   de8b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   de8b8:	b97b      	cbnz	r3, de8da <rand+0x2a>
   de8ba:	2018      	movs	r0, #24
   de8bc:	f7fc f9bc 	bl	dac38 <malloc>
   de8c0:	4a10      	ldr	r2, [pc, #64]	; (de904 <rand+0x54>)
   de8c2:	4b11      	ldr	r3, [pc, #68]	; (de908 <rand+0x58>)
   de8c4:	63a0      	str	r0, [r4, #56]	; 0x38
   de8c6:	e9c0 2300 	strd	r2, r3, [r0]
   de8ca:	4b10      	ldr	r3, [pc, #64]	; (de90c <rand+0x5c>)
   de8cc:	6083      	str	r3, [r0, #8]
   de8ce:	230b      	movs	r3, #11
   de8d0:	8183      	strh	r3, [r0, #12]
   de8d2:	2201      	movs	r2, #1
   de8d4:	2300      	movs	r3, #0
   de8d6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   de8da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   de8dc:	480c      	ldr	r0, [pc, #48]	; (de910 <rand+0x60>)
   de8de:	690a      	ldr	r2, [r1, #16]
   de8e0:	694b      	ldr	r3, [r1, #20]
   de8e2:	4c0c      	ldr	r4, [pc, #48]	; (de914 <rand+0x64>)
   de8e4:	4350      	muls	r0, r2
   de8e6:	fb04 0003 	mla	r0, r4, r3, r0
   de8ea:	fba2 3404 	umull	r3, r4, r2, r4
   de8ee:	1c5a      	adds	r2, r3, #1
   de8f0:	4404      	add	r4, r0
   de8f2:	f144 0000 	adc.w	r0, r4, #0
   de8f6:	e9c1 2004 	strd	r2, r0, [r1, #16]
   de8fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   de8fe:	bd10      	pop	{r4, pc}
   de900:	2003dc54 	.word	0x2003dc54
   de904:	abcd330e 	.word	0xabcd330e
   de908:	e66d1234 	.word	0xe66d1234
   de90c:	0005deec 	.word	0x0005deec
   de910:	5851f42d 	.word	0x5851f42d
   de914:	4c957f2d 	.word	0x4c957f2d

000de918 <strchr>:
   de918:	b2c9      	uxtb	r1, r1
   de91a:	4603      	mov	r3, r0
   de91c:	f810 2b01 	ldrb.w	r2, [r0], #1
   de920:	b11a      	cbz	r2, de92a <strchr+0x12>
   de922:	428a      	cmp	r2, r1
   de924:	d1f9      	bne.n	de91a <strchr+0x2>
   de926:	4618      	mov	r0, r3
   de928:	4770      	bx	lr
   de92a:	2900      	cmp	r1, #0
   de92c:	bf18      	it	ne
   de92e:	2300      	movne	r3, #0
   de930:	e7f9      	b.n	de926 <strchr+0xe>

000de932 <strchrnul>:
   de932:	b510      	push	{r4, lr}
   de934:	4604      	mov	r4, r0
   de936:	f7ff ffef 	bl	de918 <strchr>
   de93a:	b918      	cbnz	r0, de944 <strchrnul+0x12>
   de93c:	4620      	mov	r0, r4
   de93e:	f000 f832 	bl	de9a6 <strlen>
   de942:	4420      	add	r0, r4
   de944:	bd10      	pop	{r4, pc}

000de946 <strcmp>:
   de946:	f810 2b01 	ldrb.w	r2, [r0], #1
   de94a:	f811 3b01 	ldrb.w	r3, [r1], #1
   de94e:	2a01      	cmp	r2, #1
   de950:	bf28      	it	cs
   de952:	429a      	cmpcs	r2, r3
   de954:	d0f7      	beq.n	de946 <strcmp>
   de956:	1ad0      	subs	r0, r2, r3
   de958:	4770      	bx	lr

000de95a <strcpy>:
   de95a:	4603      	mov	r3, r0
   de95c:	f811 2b01 	ldrb.w	r2, [r1], #1
   de960:	f803 2b01 	strb.w	r2, [r3], #1
   de964:	2a00      	cmp	r2, #0
   de966:	d1f9      	bne.n	de95c <strcpy+0x2>
   de968:	4770      	bx	lr
	...

000de96c <strdup>:
   de96c:	4b02      	ldr	r3, [pc, #8]	; (de978 <strdup+0xc>)
   de96e:	4601      	mov	r1, r0
   de970:	6818      	ldr	r0, [r3, #0]
   de972:	f000 b803 	b.w	de97c <_strdup_r>
   de976:	bf00      	nop
   de978:	2003dc54 	.word	0x2003dc54

000de97c <_strdup_r>:
   de97c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   de97e:	4604      	mov	r4, r0
   de980:	4608      	mov	r0, r1
   de982:	460d      	mov	r5, r1
   de984:	f000 f80f 	bl	de9a6 <strlen>
   de988:	1c42      	adds	r2, r0, #1
   de98a:	4611      	mov	r1, r2
   de98c:	4620      	mov	r0, r4
   de98e:	9201      	str	r2, [sp, #4]
   de990:	f7fc f992 	bl	dacb8 <_malloc_r>
   de994:	4604      	mov	r4, r0
   de996:	b118      	cbz	r0, de9a0 <_strdup_r+0x24>
   de998:	9a01      	ldr	r2, [sp, #4]
   de99a:	4629      	mov	r1, r5
   de99c:	f7ff ff34 	bl	de808 <memcpy>
   de9a0:	4620      	mov	r0, r4
   de9a2:	b003      	add	sp, #12
   de9a4:	bd30      	pop	{r4, r5, pc}

000de9a6 <strlen>:
   de9a6:	4603      	mov	r3, r0
   de9a8:	f813 2b01 	ldrb.w	r2, [r3], #1
   de9ac:	2a00      	cmp	r2, #0
   de9ae:	d1fb      	bne.n	de9a8 <strlen+0x2>
   de9b0:	1a18      	subs	r0, r3, r0
   de9b2:	3801      	subs	r0, #1
   de9b4:	4770      	bx	lr

000de9b6 <strncmp>:
   de9b6:	b510      	push	{r4, lr}
   de9b8:	b16a      	cbz	r2, de9d6 <strncmp+0x20>
   de9ba:	3901      	subs	r1, #1
   de9bc:	1884      	adds	r4, r0, r2
   de9be:	f810 3b01 	ldrb.w	r3, [r0], #1
   de9c2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   de9c6:	4293      	cmp	r3, r2
   de9c8:	d103      	bne.n	de9d2 <strncmp+0x1c>
   de9ca:	42a0      	cmp	r0, r4
   de9cc:	d001      	beq.n	de9d2 <strncmp+0x1c>
   de9ce:	2b00      	cmp	r3, #0
   de9d0:	d1f5      	bne.n	de9be <strncmp+0x8>
   de9d2:	1a98      	subs	r0, r3, r2
   de9d4:	bd10      	pop	{r4, pc}
   de9d6:	4610      	mov	r0, r2
   de9d8:	e7fc      	b.n	de9d4 <strncmp+0x1e>

000de9da <strncpy>:
   de9da:	b510      	push	{r4, lr}
   de9dc:	3901      	subs	r1, #1
   de9de:	4603      	mov	r3, r0
   de9e0:	b132      	cbz	r2, de9f0 <strncpy+0x16>
   de9e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   de9e6:	f803 4b01 	strb.w	r4, [r3], #1
   de9ea:	3a01      	subs	r2, #1
   de9ec:	2c00      	cmp	r4, #0
   de9ee:	d1f7      	bne.n	de9e0 <strncpy+0x6>
   de9f0:	441a      	add	r2, r3
   de9f2:	2100      	movs	r1, #0
   de9f4:	4293      	cmp	r3, r2
   de9f6:	d100      	bne.n	de9fa <strncpy+0x20>
   de9f8:	bd10      	pop	{r4, pc}
   de9fa:	f803 1b01 	strb.w	r1, [r3], #1
   de9fe:	e7f9      	b.n	de9f4 <strncpy+0x1a>

000dea00 <strrchr>:
   dea00:	b538      	push	{r3, r4, r5, lr}
   dea02:	4603      	mov	r3, r0
   dea04:	460c      	mov	r4, r1
   dea06:	b969      	cbnz	r1, dea24 <strrchr+0x24>
   dea08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dea0c:	f7ff bf84 	b.w	de918 <strchr>
   dea10:	1c43      	adds	r3, r0, #1
   dea12:	4605      	mov	r5, r0
   dea14:	4621      	mov	r1, r4
   dea16:	4618      	mov	r0, r3
   dea18:	f7ff ff7e 	bl	de918 <strchr>
   dea1c:	2800      	cmp	r0, #0
   dea1e:	d1f7      	bne.n	dea10 <strrchr+0x10>
   dea20:	4628      	mov	r0, r5
   dea22:	bd38      	pop	{r3, r4, r5, pc}
   dea24:	2500      	movs	r5, #0
   dea26:	e7f5      	b.n	dea14 <strrchr+0x14>

000dea28 <__strtok_r>:
   dea28:	b5f0      	push	{r4, r5, r6, r7, lr}
   dea2a:	b908      	cbnz	r0, dea30 <__strtok_r+0x8>
   dea2c:	6810      	ldr	r0, [r2, #0]
   dea2e:	b188      	cbz	r0, dea54 <__strtok_r+0x2c>
   dea30:	4604      	mov	r4, r0
   dea32:	4620      	mov	r0, r4
   dea34:	f814 5b01 	ldrb.w	r5, [r4], #1
   dea38:	460f      	mov	r7, r1
   dea3a:	f817 6b01 	ldrb.w	r6, [r7], #1
   dea3e:	b91e      	cbnz	r6, dea48 <__strtok_r+0x20>
   dea40:	b965      	cbnz	r5, dea5c <__strtok_r+0x34>
   dea42:	6015      	str	r5, [r2, #0]
   dea44:	4628      	mov	r0, r5
   dea46:	e005      	b.n	dea54 <__strtok_r+0x2c>
   dea48:	42b5      	cmp	r5, r6
   dea4a:	d1f6      	bne.n	dea3a <__strtok_r+0x12>
   dea4c:	2b00      	cmp	r3, #0
   dea4e:	d1f0      	bne.n	dea32 <__strtok_r+0xa>
   dea50:	6014      	str	r4, [r2, #0]
   dea52:	7003      	strb	r3, [r0, #0]
   dea54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dea56:	461c      	mov	r4, r3
   dea58:	e00c      	b.n	dea74 <__strtok_r+0x4c>
   dea5a:	b915      	cbnz	r5, dea62 <__strtok_r+0x3a>
   dea5c:	f814 3b01 	ldrb.w	r3, [r4], #1
   dea60:	460e      	mov	r6, r1
   dea62:	f816 5b01 	ldrb.w	r5, [r6], #1
   dea66:	42ab      	cmp	r3, r5
   dea68:	d1f7      	bne.n	dea5a <__strtok_r+0x32>
   dea6a:	2b00      	cmp	r3, #0
   dea6c:	d0f3      	beq.n	dea56 <__strtok_r+0x2e>
   dea6e:	2300      	movs	r3, #0
   dea70:	f804 3c01 	strb.w	r3, [r4, #-1]
   dea74:	6014      	str	r4, [r2, #0]
   dea76:	e7ed      	b.n	dea54 <__strtok_r+0x2c>

000dea78 <strtok_r>:
   dea78:	2301      	movs	r3, #1
   dea7a:	f7ff bfd5 	b.w	dea28 <__strtok_r>
	...

000dea80 <_strtol_l.isra.0>:
   dea80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dea84:	4e3a      	ldr	r6, [pc, #232]	; (deb70 <_strtol_l.isra.0+0xf0>)
   dea86:	4686      	mov	lr, r0
   dea88:	468c      	mov	ip, r1
   dea8a:	4660      	mov	r0, ip
   dea8c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dea90:	5da5      	ldrb	r5, [r4, r6]
   dea92:	f015 0508 	ands.w	r5, r5, #8
   dea96:	d1f8      	bne.n	dea8a <_strtol_l.isra.0+0xa>
   dea98:	2c2d      	cmp	r4, #45	; 0x2d
   dea9a:	d133      	bne.n	deb04 <_strtol_l.isra.0+0x84>
   dea9c:	f89c 4000 	ldrb.w	r4, [ip]
   deaa0:	f04f 0801 	mov.w	r8, #1
   deaa4:	f100 0c02 	add.w	ip, r0, #2
   deaa8:	2b00      	cmp	r3, #0
   deaaa:	d05c      	beq.n	deb66 <_strtol_l.isra.0+0xe6>
   deaac:	2b10      	cmp	r3, #16
   deaae:	d10c      	bne.n	deaca <_strtol_l.isra.0+0x4a>
   deab0:	2c30      	cmp	r4, #48	; 0x30
   deab2:	d10a      	bne.n	deaca <_strtol_l.isra.0+0x4a>
   deab4:	f89c 0000 	ldrb.w	r0, [ip]
   deab8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   deabc:	2858      	cmp	r0, #88	; 0x58
   deabe:	d14d      	bne.n	deb5c <_strtol_l.isra.0+0xdc>
   deac0:	f89c 4001 	ldrb.w	r4, [ip, #1]
   deac4:	2310      	movs	r3, #16
   deac6:	f10c 0c02 	add.w	ip, ip, #2
   deaca:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   deace:	3f01      	subs	r7, #1
   dead0:	2600      	movs	r6, #0
   dead2:	fbb7 f9f3 	udiv	r9, r7, r3
   dead6:	4630      	mov	r0, r6
   dead8:	fb03 7a19 	mls	sl, r3, r9, r7
   deadc:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   deae0:	2d09      	cmp	r5, #9
   deae2:	d818      	bhi.n	deb16 <_strtol_l.isra.0+0x96>
   deae4:	462c      	mov	r4, r5
   deae6:	42a3      	cmp	r3, r4
   deae8:	dd24      	ble.n	deb34 <_strtol_l.isra.0+0xb4>
   deaea:	1c75      	adds	r5, r6, #1
   deaec:	d007      	beq.n	deafe <_strtol_l.isra.0+0x7e>
   deaee:	4581      	cmp	r9, r0
   deaf0:	d31d      	bcc.n	deb2e <_strtol_l.isra.0+0xae>
   deaf2:	d101      	bne.n	deaf8 <_strtol_l.isra.0+0x78>
   deaf4:	45a2      	cmp	sl, r4
   deaf6:	db1a      	blt.n	deb2e <_strtol_l.isra.0+0xae>
   deaf8:	fb00 4003 	mla	r0, r0, r3, r4
   deafc:	2601      	movs	r6, #1
   deafe:	f81c 4b01 	ldrb.w	r4, [ip], #1
   deb02:	e7eb      	b.n	deadc <_strtol_l.isra.0+0x5c>
   deb04:	2c2b      	cmp	r4, #43	; 0x2b
   deb06:	bf08      	it	eq
   deb08:	f89c 4000 	ldrbeq.w	r4, [ip]
   deb0c:	46a8      	mov	r8, r5
   deb0e:	bf08      	it	eq
   deb10:	f100 0c02 	addeq.w	ip, r0, #2
   deb14:	e7c8      	b.n	deaa8 <_strtol_l.isra.0+0x28>
   deb16:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   deb1a:	2d19      	cmp	r5, #25
   deb1c:	d801      	bhi.n	deb22 <_strtol_l.isra.0+0xa2>
   deb1e:	3c37      	subs	r4, #55	; 0x37
   deb20:	e7e1      	b.n	deae6 <_strtol_l.isra.0+0x66>
   deb22:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   deb26:	2d19      	cmp	r5, #25
   deb28:	d804      	bhi.n	deb34 <_strtol_l.isra.0+0xb4>
   deb2a:	3c57      	subs	r4, #87	; 0x57
   deb2c:	e7db      	b.n	deae6 <_strtol_l.isra.0+0x66>
   deb2e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   deb32:	e7e4      	b.n	deafe <_strtol_l.isra.0+0x7e>
   deb34:	1c73      	adds	r3, r6, #1
   deb36:	d106      	bne.n	deb46 <_strtol_l.isra.0+0xc6>
   deb38:	2322      	movs	r3, #34	; 0x22
   deb3a:	f8ce 3000 	str.w	r3, [lr]
   deb3e:	4638      	mov	r0, r7
   deb40:	b942      	cbnz	r2, deb54 <_strtol_l.isra.0+0xd4>
   deb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   deb46:	f1b8 0f00 	cmp.w	r8, #0
   deb4a:	d000      	beq.n	deb4e <_strtol_l.isra.0+0xce>
   deb4c:	4240      	negs	r0, r0
   deb4e:	2a00      	cmp	r2, #0
   deb50:	d0f7      	beq.n	deb42 <_strtol_l.isra.0+0xc2>
   deb52:	b10e      	cbz	r6, deb58 <_strtol_l.isra.0+0xd8>
   deb54:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   deb58:	6011      	str	r1, [r2, #0]
   deb5a:	e7f2      	b.n	deb42 <_strtol_l.isra.0+0xc2>
   deb5c:	2430      	movs	r4, #48	; 0x30
   deb5e:	2b00      	cmp	r3, #0
   deb60:	d1b3      	bne.n	deaca <_strtol_l.isra.0+0x4a>
   deb62:	2308      	movs	r3, #8
   deb64:	e7b1      	b.n	deaca <_strtol_l.isra.0+0x4a>
   deb66:	2c30      	cmp	r4, #48	; 0x30
   deb68:	d0a4      	beq.n	deab4 <_strtol_l.isra.0+0x34>
   deb6a:	230a      	movs	r3, #10
   deb6c:	e7ad      	b.n	deaca <_strtol_l.isra.0+0x4a>
   deb6e:	bf00      	nop
   deb70:	000e01af 	.word	0x000e01af

000deb74 <strtol>:
   deb74:	4613      	mov	r3, r2
   deb76:	460a      	mov	r2, r1
   deb78:	4601      	mov	r1, r0
   deb7a:	4802      	ldr	r0, [pc, #8]	; (deb84 <strtol+0x10>)
   deb7c:	6800      	ldr	r0, [r0, #0]
   deb7e:	f7ff bf7f 	b.w	dea80 <_strtol_l.isra.0>
   deb82:	bf00      	nop
   deb84:	2003dc54 	.word	0x2003dc54

000deb88 <close>:
   deb88:	4b02      	ldr	r3, [pc, #8]	; (deb94 <close+0xc>)
   deb8a:	4601      	mov	r1, r0
   deb8c:	6818      	ldr	r0, [r3, #0]
   deb8e:	f000 b8c9 	b.w	ded24 <_close_r>
   deb92:	bf00      	nop
   deb94:	2003dc54 	.word	0x2003dc54

000deb98 <fstat>:
   deb98:	4b02      	ldr	r3, [pc, #8]	; (deba4 <fstat+0xc>)
   deb9a:	460a      	mov	r2, r1
   deb9c:	4601      	mov	r1, r0
   deb9e:	6818      	ldr	r0, [r3, #0]
   deba0:	f000 b8d0 	b.w	ded44 <_fstat_r>
   deba4:	2003dc54 	.word	0x2003dc54

000deba8 <lseek>:
   deba8:	4613      	mov	r3, r2
   debaa:	460a      	mov	r2, r1
   debac:	4601      	mov	r1, r0
   debae:	4802      	ldr	r0, [pc, #8]	; (debb8 <lseek+0x10>)
   debb0:	6800      	ldr	r0, [r0, #0]
   debb2:	f000 b8dd 	b.w	ded70 <_lseek_r>
   debb6:	bf00      	nop
   debb8:	2003dc54 	.word	0x2003dc54

000debbc <open>:
   debbc:	b40e      	push	{r1, r2, r3}
   debbe:	b503      	push	{r0, r1, lr}
   debc0:	ab03      	add	r3, sp, #12
   debc2:	4601      	mov	r1, r0
   debc4:	4806      	ldr	r0, [pc, #24]	; (debe0 <open+0x24>)
   debc6:	f853 2b04 	ldr.w	r2, [r3], #4
   debca:	9301      	str	r3, [sp, #4]
   debcc:	6800      	ldr	r0, [r0, #0]
   debce:	9b04      	ldr	r3, [sp, #16]
   debd0:	f000 f8e0 	bl	ded94 <_open_r>
   debd4:	b002      	add	sp, #8
   debd6:	f85d eb04 	ldr.w	lr, [sp], #4
   debda:	b003      	add	sp, #12
   debdc:	4770      	bx	lr
   debde:	bf00      	nop
   debe0:	2003dc54 	.word	0x2003dc54

000debe4 <read>:
   debe4:	4613      	mov	r3, r2
   debe6:	460a      	mov	r2, r1
   debe8:	4601      	mov	r1, r0
   debea:	4802      	ldr	r0, [pc, #8]	; (debf4 <read+0x10>)
   debec:	6800      	ldr	r0, [r0, #0]
   debee:	f000 b8e3 	b.w	dedb8 <_read_r>
   debf2:	bf00      	nop
   debf4:	2003dc54 	.word	0x2003dc54

000debf8 <unlink>:
   debf8:	4b02      	ldr	r3, [pc, #8]	; (dec04 <unlink+0xc>)
   debfa:	4601      	mov	r1, r0
   debfc:	6818      	ldr	r0, [r3, #0]
   debfe:	f000 b80d 	b.w	dec1c <_unlink_r>
   dec02:	bf00      	nop
   dec04:	2003dc54 	.word	0x2003dc54

000dec08 <write>:
   dec08:	4613      	mov	r3, r2
   dec0a:	460a      	mov	r2, r1
   dec0c:	4601      	mov	r1, r0
   dec0e:	4802      	ldr	r0, [pc, #8]	; (dec18 <write+0x10>)
   dec10:	6800      	ldr	r0, [r0, #0]
   dec12:	f000 b813 	b.w	dec3c <_write_r>
   dec16:	bf00      	nop
   dec18:	2003dc54 	.word	0x2003dc54

000dec1c <_unlink_r>:
   dec1c:	b538      	push	{r3, r4, r5, lr}
   dec1e:	4d06      	ldr	r5, [pc, #24]	; (dec38 <_unlink_r+0x1c>)
   dec20:	2300      	movs	r3, #0
   dec22:	4604      	mov	r4, r0
   dec24:	4608      	mov	r0, r1
   dec26:	602b      	str	r3, [r5, #0]
   dec28:	f7fb fdf4 	bl	da814 <_unlink>
   dec2c:	1c43      	adds	r3, r0, #1
   dec2e:	d102      	bne.n	dec36 <_unlink_r+0x1a>
   dec30:	682b      	ldr	r3, [r5, #0]
   dec32:	b103      	cbz	r3, dec36 <_unlink_r+0x1a>
   dec34:	6023      	str	r3, [r4, #0]
   dec36:	bd38      	pop	{r3, r4, r5, pc}
   dec38:	2003e7f0 	.word	0x2003e7f0

000dec3c <_write_r>:
   dec3c:	b538      	push	{r3, r4, r5, lr}
   dec3e:	4d07      	ldr	r5, [pc, #28]	; (dec5c <_write_r+0x20>)
   dec40:	4604      	mov	r4, r0
   dec42:	4608      	mov	r0, r1
   dec44:	4611      	mov	r1, r2
   dec46:	2200      	movs	r2, #0
   dec48:	602a      	str	r2, [r5, #0]
   dec4a:	461a      	mov	r2, r3
   dec4c:	f7fb fdaa 	bl	da7a4 <_write>
   dec50:	1c43      	adds	r3, r0, #1
   dec52:	d102      	bne.n	dec5a <_write_r+0x1e>
   dec54:	682b      	ldr	r3, [r5, #0]
   dec56:	b103      	cbz	r3, dec5a <_write_r+0x1e>
   dec58:	6023      	str	r3, [r4, #0]
   dec5a:	bd38      	pop	{r3, r4, r5, pc}
   dec5c:	2003e7f0 	.word	0x2003e7f0

000dec60 <__register_exitproc>:
   dec60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dec64:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ded20 <__register_exitproc+0xc0>
   dec68:	4606      	mov	r6, r0
   dec6a:	f8d8 0000 	ldr.w	r0, [r8]
   dec6e:	461f      	mov	r7, r3
   dec70:	460d      	mov	r5, r1
   dec72:	4691      	mov	r9, r2
   dec74:	f000 f878 	bl	ded68 <__retarget_lock_acquire_recursive>
   dec78:	4b25      	ldr	r3, [pc, #148]	; (ded10 <__register_exitproc+0xb0>)
   dec7a:	681c      	ldr	r4, [r3, #0]
   dec7c:	b934      	cbnz	r4, dec8c <__register_exitproc+0x2c>
   dec7e:	4c25      	ldr	r4, [pc, #148]	; (ded14 <__register_exitproc+0xb4>)
   dec80:	601c      	str	r4, [r3, #0]
   dec82:	4b25      	ldr	r3, [pc, #148]	; (ded18 <__register_exitproc+0xb8>)
   dec84:	b113      	cbz	r3, dec8c <__register_exitproc+0x2c>
   dec86:	681b      	ldr	r3, [r3, #0]
   dec88:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dec8c:	6863      	ldr	r3, [r4, #4]
   dec8e:	2b1f      	cmp	r3, #31
   dec90:	dd07      	ble.n	deca2 <__register_exitproc+0x42>
   dec92:	f8d8 0000 	ldr.w	r0, [r8]
   dec96:	f000 f869 	bl	ded6c <__retarget_lock_release_recursive>
   dec9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dec9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   deca2:	b34e      	cbz	r6, decf8 <__register_exitproc+0x98>
   deca4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   deca8:	b988      	cbnz	r0, decce <__register_exitproc+0x6e>
   decaa:	4b1c      	ldr	r3, [pc, #112]	; (ded1c <__register_exitproc+0xbc>)
   decac:	b923      	cbnz	r3, decb8 <__register_exitproc+0x58>
   decae:	f8d8 0000 	ldr.w	r0, [r8]
   decb2:	f000 f85a 	bl	ded6a <__retarget_lock_release>
   decb6:	e7f0      	b.n	dec9a <__register_exitproc+0x3a>
   decb8:	f44f 7084 	mov.w	r0, #264	; 0x108
   decbc:	f7fb ffbc 	bl	dac38 <malloc>
   decc0:	2800      	cmp	r0, #0
   decc2:	d0f4      	beq.n	decae <__register_exitproc+0x4e>
   decc4:	2300      	movs	r3, #0
   decc6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   decca:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   decce:	6863      	ldr	r3, [r4, #4]
   decd0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   decd4:	2201      	movs	r2, #1
   decd6:	409a      	lsls	r2, r3
   decd8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   decdc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dece0:	4313      	orrs	r3, r2
   dece2:	2e02      	cmp	r6, #2
   dece4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dece8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   decec:	bf02      	ittt	eq
   decee:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   decf2:	431a      	orreq	r2, r3
   decf4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   decf8:	6863      	ldr	r3, [r4, #4]
   decfa:	f8d8 0000 	ldr.w	r0, [r8]
   decfe:	1c5a      	adds	r2, r3, #1
   ded00:	3302      	adds	r3, #2
   ded02:	6062      	str	r2, [r4, #4]
   ded04:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ded08:	f000 f830 	bl	ded6c <__retarget_lock_release_recursive>
   ded0c:	2000      	movs	r0, #0
   ded0e:	e7c6      	b.n	dec9e <__register_exitproc+0x3e>
   ded10:	2003e7e0 	.word	0x2003e7e0
   ded14:	2003e754 	.word	0x2003e754
   ded18:	00000000 	.word	0x00000000
   ded1c:	000dac39 	.word	0x000dac39
   ded20:	2003dcb8 	.word	0x2003dcb8

000ded24 <_close_r>:
   ded24:	b538      	push	{r3, r4, r5, lr}
   ded26:	4d06      	ldr	r5, [pc, #24]	; (ded40 <_close_r+0x1c>)
   ded28:	2300      	movs	r3, #0
   ded2a:	4604      	mov	r4, r0
   ded2c:	4608      	mov	r0, r1
   ded2e:	602b      	str	r3, [r5, #0]
   ded30:	f7fb fd48 	bl	da7c4 <_close>
   ded34:	1c43      	adds	r3, r0, #1
   ded36:	d102      	bne.n	ded3e <_close_r+0x1a>
   ded38:	682b      	ldr	r3, [r5, #0]
   ded3a:	b103      	cbz	r3, ded3e <_close_r+0x1a>
   ded3c:	6023      	str	r3, [r4, #0]
   ded3e:	bd38      	pop	{r3, r4, r5, pc}
   ded40:	2003e7f0 	.word	0x2003e7f0

000ded44 <_fstat_r>:
   ded44:	b538      	push	{r3, r4, r5, lr}
   ded46:	4d07      	ldr	r5, [pc, #28]	; (ded64 <_fstat_r+0x20>)
   ded48:	2300      	movs	r3, #0
   ded4a:	4604      	mov	r4, r0
   ded4c:	4608      	mov	r0, r1
   ded4e:	4611      	mov	r1, r2
   ded50:	602b      	str	r3, [r5, #0]
   ded52:	f7fb fd3f 	bl	da7d4 <_fstat>
   ded56:	1c43      	adds	r3, r0, #1
   ded58:	d102      	bne.n	ded60 <_fstat_r+0x1c>
   ded5a:	682b      	ldr	r3, [r5, #0]
   ded5c:	b103      	cbz	r3, ded60 <_fstat_r+0x1c>
   ded5e:	6023      	str	r3, [r4, #0]
   ded60:	bd38      	pop	{r3, r4, r5, pc}
   ded62:	bf00      	nop
   ded64:	2003e7f0 	.word	0x2003e7f0

000ded68 <__retarget_lock_acquire_recursive>:
   ded68:	4770      	bx	lr

000ded6a <__retarget_lock_release>:
   ded6a:	4770      	bx	lr

000ded6c <__retarget_lock_release_recursive>:
   ded6c:	4770      	bx	lr
	...

000ded70 <_lseek_r>:
   ded70:	b538      	push	{r3, r4, r5, lr}
   ded72:	4d07      	ldr	r5, [pc, #28]	; (ded90 <_lseek_r+0x20>)
   ded74:	4604      	mov	r4, r0
   ded76:	4608      	mov	r0, r1
   ded78:	4611      	mov	r1, r2
   ded7a:	2200      	movs	r2, #0
   ded7c:	602a      	str	r2, [r5, #0]
   ded7e:	461a      	mov	r2, r3
   ded80:	f7fb fd30 	bl	da7e4 <_lseek>
   ded84:	1c43      	adds	r3, r0, #1
   ded86:	d102      	bne.n	ded8e <_lseek_r+0x1e>
   ded88:	682b      	ldr	r3, [r5, #0]
   ded8a:	b103      	cbz	r3, ded8e <_lseek_r+0x1e>
   ded8c:	6023      	str	r3, [r4, #0]
   ded8e:	bd38      	pop	{r3, r4, r5, pc}
   ded90:	2003e7f0 	.word	0x2003e7f0

000ded94 <_open_r>:
   ded94:	b538      	push	{r3, r4, r5, lr}
   ded96:	4d07      	ldr	r5, [pc, #28]	; (dedb4 <_open_r+0x20>)
   ded98:	4604      	mov	r4, r0
   ded9a:	4608      	mov	r0, r1
   ded9c:	4611      	mov	r1, r2
   ded9e:	2200      	movs	r2, #0
   deda0:	602a      	str	r2, [r5, #0]
   deda2:	461a      	mov	r2, r3
   deda4:	f7fb fcf6 	bl	da794 <_open>
   deda8:	1c43      	adds	r3, r0, #1
   dedaa:	d102      	bne.n	dedb2 <_open_r+0x1e>
   dedac:	682b      	ldr	r3, [r5, #0]
   dedae:	b103      	cbz	r3, dedb2 <_open_r+0x1e>
   dedb0:	6023      	str	r3, [r4, #0]
   dedb2:	bd38      	pop	{r3, r4, r5, pc}
   dedb4:	2003e7f0 	.word	0x2003e7f0

000dedb8 <_read_r>:
   dedb8:	b538      	push	{r3, r4, r5, lr}
   dedba:	4d07      	ldr	r5, [pc, #28]	; (dedd8 <_read_r+0x20>)
   dedbc:	4604      	mov	r4, r0
   dedbe:	4608      	mov	r0, r1
   dedc0:	4611      	mov	r1, r2
   dedc2:	2200      	movs	r2, #0
   dedc4:	602a      	str	r2, [r5, #0]
   dedc6:	461a      	mov	r2, r3
   dedc8:	f7fb fcf4 	bl	da7b4 <_read>
   dedcc:	1c43      	adds	r3, r0, #1
   dedce:	d102      	bne.n	dedd6 <_read_r+0x1e>
   dedd0:	682b      	ldr	r3, [r5, #0]
   dedd2:	b103      	cbz	r3, dedd6 <_read_r+0x1e>
   dedd4:	6023      	str	r3, [r4, #0]
   dedd6:	bd38      	pop	{r3, r4, r5, pc}
   dedd8:	2003e7f0 	.word	0x2003e7f0

000deddc <dynalib_user>:
   deddc:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   dedec:	00000000 74696e69 69616620 0064656c     ....init failed.
   dedfc:	65636552 64657669 6f726620 7830206d     Received from 0x
   dee0c:	78323025 74697720 73722068 253d6973     %02x with rssi=%
   dee1c:	736d2064 203d2067 77206425 20687469     d msg = %d with 
   dee2c:	67616c66 00642520 7373654d 20656761     flag %d.Message 
   dee3c:	65746e69 6465646e 726f6620 6f6e6120     intended for ano
   dee4c:	72656874 646f6e20 65530065 7220746e     ther node.Sent r
   dee5c:	6f707365 2065736e 63206f74 6e65696c     esponse to clien
   dee6c:	656d2074 67617373 203d2065 202c6425     t message = %d, 
   dee7c:	656d6974 25203d20 6e202c73 20747865     time = %s, next 
   dee8c:	6f706572 3d207472 20752520 756e696d     report = %u minu
   dee9c:	00736574 70736552 65736e6f 63657220     tes.Response rec
   deeac:	65766965 75732064 73656363 6c756673     eived successful
   deebc:	5200796c 6f707365 2065736e 20746f6e     ly.Response not 
   deecc:	6e6b6361 656c776f 64656764 6f724600     acknowledged.Fro
   deedc:	7325206d 206f7420 53007325 65746174     m %s to %s.State
   deeec:	61725420 7469736e 006e6f69 35545345      Transition.EST5
   deefc:	2c544445 322e334d 322f302e 3a30303a     EDT,M3.2.0/2:00:
   def0c:	4d2c3030 312e3131 322f302e 3a30303a     00,M11.1.0/2:00:
   def1c:	30003030 30303a36 0030303a 353a3232     00.06:00:00.22:5
   def2c:	39353a39 61745300 70757472 6d6f6320     9:59.Startup com
   def3c:	74656c70 74612065 20732520 68746977     plete at %s with
   def4c:	74616220 79726574 2e342520 6c006632      battery %4.2f.l
   def5c:	6c61636f 6d697420 25203a65 69740073     ocal time: %s.ti
   def6c:	6f20656d 656e2066 65207478 746e6576     me of next event
   def7c:	3a736920 20732520 63696877 73692068      is: %s which is
   def8c:	756c2520 63657320 73646e6f 61776120      %lu seconds awa
   def9c:	6c530079 20706565 20726f66 73206925     y.Sleep for %i s
   defac:	6e6f6365 57007364 20656b6f 68746977     econds.Woke with
   defbc:	65737520 75622072 6e6f7474 6e202d20      user button - n
   defcc:	616d726f 706f206c 74617265 736e6f69     ormal operations
   defdc:	206e4900 20656874 41526f4c 61747320     .In the LoRA sta
   defec:	77206574 20687469 72662061 65757165     te with a freque
   deffc:	2079636e 2520666f 696d2075 6574756e     ncy of %u minute
   df00c:	31320073 3a39353a 7b003935 646f6e22     s.21:59:59.{"nod
   df01c:	22646965 2c75253a 6f682220 796c7275     eid":%u, "hourly
   df02c:	75253a22 6422202c 796c6961 75253a22     ":%u, "daily":%u
   df03c:	6162222c 72657474 253a2279 6b222c64     ,"battery":%d,"k
   df04c:	22317965 7325223a 74222c22 22706d65     ey1":"%s","temp"
   df05c:	2c64253a 65722220 73746573 64253a22     :%d, "resets":%d
   df06c:	6122202c 7472656c 253a2273 72222c64     , "alerts":%d,"r
   df07c:	22697373 2c64253a 736d2220 253a2267     ssi":%d, "msg":%
   df08c:	74222c64 73656d69 706d6174 6c253a22     d,"timestamp":%l
   df09c:	30303075 6255007d 746f6469 6f4c2d73     u000}.Ubidots-Lo
   df0ac:	482d4152 2d6b6f6f 00003176              RA-Hook-v1..

000df0b8 <_ZTV8MB85RC64>:
	...
   df0c0:	000d43b5 000d43c9 000d7bfd 000d7c93     .C...C...{...|..
   df0d0:	000d7d15 74696e49 7a696c61 20676e69     .}..Initalizing 
   df0e0:	20656874 4d6e6970 7365646f 696e4900     the pinModes.Ini
   df0f0:	6c616974 6e697a69 6f502067 20726577     tializing Power 
   df100:	666e6f43 00006769                       Config..

000df108 <BLUE_LED>:
   df108:	                                         ..

000df10a <BUTTON_PIN>:
   df10a:	                                         ..

000df10c <RFM95_CS>:
   df10c:	                                         ..

000df10e <RFM95_INT>:
   df10e:	                                         ..

000df110 <TMP36_SENSE_PIN>:
   df110:	7525000f 6e696d20 73657275 70655200     ..%u minures.Rep
   df120:	2074726f 71657266 636e6575 69772079     ort frequency wi
   df130:	62206c6c 65732065 6f742074 20692520     ll be set to %i 
   df140:	756e696d 20736574 6e207461 20747865     minutes at next 
   df150:	41526f4c 6e6f6320 7463656e 6d695400     LoRA connect.Tim
   df160:	72740065 66006575 65736c61 616e4500     e.true.false.Ena
   df170:	20656c62 65656c73 73692070 00732520     ble sleep is %s.
   df180:	65646f4d 74655300 206f7420 69726556     Mode.Set to Veri
   df190:	206e6f7a 004d4953 20746553 50206f74     zon SIM.Set to P
   df1a0:	69747261 20656c63 004d4953 74206e49     article SIM.In t
   df1b0:	64206568 6f637369 63656e6e 72662074     he disconnect fr
   df1c0:	50206d6f 69747261 20656c63 636e7566     om Particle func
   df1d0:	6e6f6974 69614600 2064656c 64206f74     tion.Failed to d
   df1e0:	6f637369 63656e6e 72662074 50206d6f     isconnect from P
   df1f0:	69747261 00656c63 63736944 656e6e6f     article.Disconne
   df200:	64657463 6f726620 6150206d 63697472     cted from Partic
   df210:	6920656c 6925206e 63657320 73646e6f     le in %i seconds
   df220:	69614600 2064656c 74206f74 206e7275     .Failed to turn 
   df230:	2066666f 20656874 6c6c6543 72616c75     off the Cellular
   df240:	646f6d20 54006d65 656e7275 666f2064      modem.Turned of
   df250:	68742066 65632065 6c756c6c 6d207261     f the cellular m
   df260:	6d65646f 206e6920 73206925 6e6f6365     odem in %i secon
   df270:	59007364 4e007365 6556006f 6f7a6972     ds.Yes.No.Verizo
   df280:	6e55006e 776f6e6b 6f4e006e 68432074     n.Unknown.Not Ch
   df290:	69677261 4300676e 67726168 44006465     arging.Charged.D
   df2a0:	68637369 69677261 4600676e 746c7561     ischarging.Fault
   df2b0:	63694400 656e6e6f 64657463 696e4900     .Diconnected.Ini
   df2c0:	6c616974 6e697a69 61502067 63697472     tializing Partic
   df2d0:	6620656c 74636e75 736e6f69 646e6120     le functions and
   df2e0:	72617620 6c626169 4c007365 5020776f      variables.Low P
   df2f0:	7265776f 646f4d20 52003f65 61656c65     ower Mode?.Relea
   df300:	53006573 616e6769 7473006c 4f657461     se.Signal.stateO
   df310:	67684366 74614200 79726574 746e6f43     fChg.BatteryCont
   df320:	00747865 6f706552 6e697472 72462067     ext.Reporting Fr
   df330:	65757165 0079636e 204d4953 64726143     equency.SIM Card
   df340:	74655300 776f4c20 776f5020 53007265     .Set Low Power.S
   df350:	46207465 75716572 79636e65 00000000     et Frequency....

000df360 <_ZTVN5spark10LogHandlerE>:
	...
   df370:	000d40a5 000d4c89                       .@...L..

000df378 <_ZTVN5spark16SerialLogHandlerE>:
	...
   df380:	000d4d11 000d4d45 000dc9fd 000d4c8b     .M..EM.......L..
   df390:	64616f4c 20676e69 74737953 44206d65     Loading System D
   df3a0:	75616665 0073746c 64616f4c 20676e69     efaults.Loading 
   df3b0:	74737973 64206d65 75616665 0073746c     system defaults.
   df3c0:	53737973 73756174 6a626f20 20746365     sysStaus object 
   df3d0:	726f7473 61206465 6820646e 20687361     stored and hash 
   df3e0:	61647075 00646574 72727563 20746e65     updated.current 
   df3f0:	656a626f 73207463 65726f74 6e612064     object stored an
   df400:	61682064 75206873 74616470 49006465     d hash updated.I
   df410:	6974696e 7a696c61 20676e69 20656874     nitializing the 
   df420:	656a624f 53207463 65726f74 41524600     Object Store.FRA
   df430:	696d204d 74616d73 202c6863 73617265     M mismatch, eras
   df440:	20676e69 20646e61 61636f6c 676e6966     ing and locafing
   df450:	66656420 746c7561 66692073 20746920      defaults if it 
   df460:	63656863 6f20736b 46007475 204d4152     checks out.FRAM 
   df470:	74696e69 696c6169 2c64657a 616f6c20     initialized, loa
   df480:	676e6964 6a626f20 73746365 00000000     ding objects....

000df490 <_ZL17FRAMversionNumber>:
   df490:	00000001 656e6f4e 46695700 53470069     ....None.WiFi.GS
   df4a0:	4d55004d 43005354 00414d44 0045544c     M.UMTS.CDMA.LTE.
   df4b0:	45454549 31323038 4c003435 435f4554     IEEE802154.LTE_C
   df4c0:	4d5f5441 544c0031 41435f45 424e5f54     AT_M1.LTE_CAT_NB
   df4d0:	73250031 253a5320 66302e32 202c2525     1.%s S:%2.0f%%, 
   df4e0:	32253a51 2566302e 25002025 00432069     Q:%2.0f%% .%i C.
   df4f0:	65746e49 6c616e72 6d655420 61726570     Internal Tempera
   df500:	65727574 20736920 00007325 000df282     ture is %s......
   df510:	000df494 000df499 000df49e 000df4a2     ................
   df520:	000df4a7 000df4ac 000df4b0 000df4bb     ................
   df530:	000df4c6 6c696166 74206465 6572206f     ....failed to re
   df540:	72206461 64416765 253d7264 20783230     ad regAddr=%02x 
   df550:	6e756f63 75253d74 69616600 2064656c     count=%u.failed 
   df560:	72206f74 20646165 41676572 3d726464     to read regAddr=
   df570:	78323025 61747320 64253d74 554f4600     %02x stat=%d.FOU
   df580:	69642054 6f6e2064 6f672074 47494820     T did not go HIG
   df590:	6f6e0048 65642074 74636574 66006465     H.not detected.f
   df5a0:	656c6961 6f742064 69727720 72206574     ailed to write r
   df5b0:	64416765 253d7264 20783230 74617473     egAddr=%02x stat
   df5c0:	0064253d 57746573 25205444 61770064     =%d.setWDT %d.wa
   df5d0:	64686374 6320676f 7261656c 62206465     tchdog cleared b
   df5e0:	75736552 253d746c 61770064 64686374     Result=%d.watchd
   df5f0:	7320676f 66207465 5372756f 3d736365     og set fourSecs=
   df600:	62206425 75736552 253d746c 65720064     %d bResult=%d.re
   df610:	43746573 69666e6f 78302867 6c383025     setConfig(0x%08l
   df620:	57002978 48435441 00474f44 50454544     x).WATCHDOG.DEEP
   df630:	574f505f 445f5245 004e574f 4e554f43     _POWER_DOWN.COUN
   df640:	574f4454 49545f4e 0052454d 52414c41     TDOWN_TIMER.ALAR
   df650:	6166004d 72756c69 6e692065 64707520     M.failure in upd
   df660:	57657461 52656b61 6f736165 6425206e     ateWakeReason %d
   df670:	6b617700 65722065 6e6f7361 25203d20     .wake reason = %
   df680:	30250073 252d6434 2d643230 64323025     s.%04d-%02d-%02d
   df690:	32302520 30253a64 253a6432 00643230      %02d:%02d:%02d.
   df6a0:	52746567 73416374 25206d54 65730073     getRtcAsTm %s.se
   df6b0:	79732074 6d657473 6f6c6320 66206b63     t system clock f
   df6c0:	206d6f72 20435452 66007325 656c6961     rom RTC %s.faile
   df6d0:	6f742064 74656420 20746365 38314241     d to detect AB18
   df6e0:	73003530 74527465 54734163 7325206d     05.setRtcAsTm %s
   df6f0:	69616600 6572756c 206e6920 52746573     .failure in setR
   df700:	72466374 6d546d6f 00642520 20746573     tcFromTm %d.set 
   df710:	20435452 6d6f7266 6f6c6320 25206475     RTC from cloud %
   df720:	70610073 62612e70 35303831 00000000     s.app.ab1805....

000df730 <_ZTV6AB1805>:
	...
   df738:	000d582d 000d582f 000d5d9b 000d5e21     -X../X...]..!^..
   df748:	6b636142 756f7267 7550646e 73696c62     BackgroundPublis
   df758:	004b5268                                hRK.

000df75c <_ZTV19BackgroundPublishRK>:
	...
   df764:	000d6351 000d636d 253a6425 64253a64     Qc..mc..%d:%d:%d
   df774:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   df784:	4d003935 252e6425 64252e64 5a002c00     59.M%d.%d.%d.,.Z
   df794:	302b2500 253a6433 00753230 74636576     .%+03d:%02u.vect
   df7a4:	3a3a726f 725f4d5f 6c6c6165 695f636f     or::_M_realloc_i
   df7b4:	7265736e 00000074                       nsert...

000df7bc <_ZTV9LocalTime>:
	...
   df7c4:	000d66a9 000d66c1                       .f...f..

000df7cc <_ZTV12LocalTimeHMS>:
	...
   df7d4:	000d664b 000d665d                       Kf..]f..

000df7dc <_ZTV15LocalTimeChange>:
	...
   df7e4:	000d664d 000d666b                       Mf..kf..

000df7ec <_ZTV22LocalTimePosixTimezone>:
	...
   df7f4:	000d6679 000d6695 74697277 74614465     yf...f..writeDat
   df804:	61662061 64656c69 72756420 20676e69     a failed during 
   df814:	73617265 72662065 64416d61 253d7264     erase framAddr=%
   df824:	00000075                                u...

000df828 <_ZTV6MB85RC>:
	...
   df830:	000d7b4b 000d7b4d 000d7bfd 000d7c93     K{..M{...{...|..
   df840:	000d7d15 656c6966 3d6d754e 73206425     .}..fileNum=%d s
   df850:	3d657a69 00646c25 64616572 75657551     ize=%ld.readQueu
   df860:	6c694665 64252065 65766520 253d746e     eFile %d event=%
   df870:	61642073 253d6174 65720073 75516461     s data=%s.readQu
   df880:	46657565 20656c69 63206425 7572726f     eueFile %d corru
   df890:	64657470 65766520 6e20746e 20656d61     pted event name 
   df8a0:	6420726f 00617461 64616572 75657551     or data.readQueu
   df8b0:	6c694665 64252065 64616220 67616d20     eFile %d bad mag
   df8c0:	253d6369 786c3830 72657620 6e6f6973     ic=%08lx version
   df8d0:	2075253d 64616568 69537265 253d657a     =%u headerSize=%
   df8e0:	616e2075 654c656d 75253d6e 73752f00     u nameLen=%u./us
   df8f0:	75702f72 65757162 77006575 65746972     r/pubqueue.write
   df900:	75657551 466f5465 73656c69 6c696620     QueueToFiles fil
   df910:	6d754e65 0064253d 65736572 726f2074     eNum=%d.reset or
   df920:	73696420 6e6e6f63 20746365 6e657665      disconnect even
   df930:	73202c74 20657661 656c6966 6f742073     t, save files to
   df940:	65757120 72006575 64006d61 61637369      queue.ram.disca
   df950:	6e696472 6f632067 70757272 20646574     rding corrupted 
   df960:	656c6966 00642520 6c627570 69687369     file %d.publishi
   df970:	2520676e 76652073 3d746e65 64207325     ng %s event=%s d
   df980:	3d617461 64007325 61637369 64656472     ata=%s.discarded
   df990:	65766520 2520746e 59530064 4d455453      event %d.SYSTEM
   df9a0:	5248545f 28444145 42414e45 2944454c     _THREAD(ENABLED)
   df9b0:	20736920 75716572 64657269 62757000      is required.pub
   df9c0:	6873696c 6d6d6f43 65206e6f 746e6576     lishCommon event
   df9d0:	656d614e 2073253d 6e657665 74614474     Name=%s eventDat
   df9e0:	73253d61 6e616300 20746f6e 61657263     a=%s.cannot crea
   df9f0:	73206574 3a3a6474 75716564 616c2065     te std::deque la
   dfa00:	72656772 61687420 616d206e 69735f78     rger than max_si
   dfa10:	2928657a 6c696600 65755165 654c6575     ze().fileQueueLe
   dfa20:	75253d6e 6d617220 75657551 6e654c65     n=%u ramQueueLen
   dfa30:	2075253d 6e6e6f63 65746365 64253d64     =%u connected=%d
   dfa40:	65757100 20646575 72206f74 75516d61     .queued to ramQu
   dfa50:	00657565 6c627570 20687369 63637573     eue.publish succ
   dfa60:	20737365 72006425 766f6d65 66206465     ess %d.removed f
   dfa70:	20656c69 70006425 696c6275 66206873     ile %d.publish f
   dfa80:	656c6961 64252064 69727700 676e6974     ailed %d.writing
   dfa90:	206f7420 656c6966 66612073 20726574      to files after 
   dfaa0:	6c627570 20687369 6c696166 00657275     publish failure.
   dfab0:	2e707061 71627570 00000000              app.pubq....

000dfabc <_ZTV17PublishQueuePosix>:
	...
   dfac4:	000d85a9 000d8881 000d88a5              ............

000dfad0 <_ZTV15RHGenericDriver>:
	...
   dfae0:	000d89c1 000d40a5 000d40a5 000d40a5     .....@...@...@..
   dfaf0:	000d40a5 000d8a23 000d89c5 000d8a73     .@..#.......s...
   dfb00:	000d8a41 000d8a97 000d89cf 000d89d7     A...............
   dfb10:	000d89db 000d89df 000d89e3 000d89e7     ................
   dfb20:	000d89d3 000d89f3 000d89f7 000d89fb     ................
   dfb30:	000d89ff 000d8a03 000d8a09 000d8a0d     ................
   dfb40:	000d89cf 000d8a11 000d8a17 000d8a1d     ................

000dfb50 <_ZTV12RHGenericSPI>:
	...
   dfb58:	000d40a5 000d8af5 000d8af7 000d40a5     .@...........@..
   dfb68:	000d40a5 000d8aff 000d8b03 000d8b07     .@..............
   dfb78:	000d8af9 000d8afb 000d8afd 61666564     ............defa
   dfb88:	20746c75 42534d00 42534c00 50533c00     ult .MSB.LSB.<SP
   dfb98:	74655349 676e6974 65642073 6c756166     ISettings defaul
   dfba8:	3c003e74 53495053 69747465 2073676e     t>.<SPISettings 
   dfbb8:	75257325 20732520 45444f4d 003e7525     %s%u %s MODE%u>.

000dfbc8 <_ZTVN8particle11SPISettingsE>:
	...
   dfbd0:	000d8b4d 000d8b21 000d8b23              M...!...#...

000dfbdc <_ZTV13RHHardwareSPI>:
	...
   dfbe4:	000d8c01 000d8c15 000d8c23 000d8c31     ........#...1...
   dfbf4:	000d8c9d 000d8aff 000d8b03 000d8b07     ................
   dfc04:	000d8cab 000d8cbf 000d8ccd              ............

000dfc10 <_ZTV6RHMesh>:
	...
   dfc18:	000d8d9d 000d90a5 000d8cf9 000d8ce5     ................

000dfc28 <_ZTV8RHRouter>:
	...
   dfc30:	000d930b 000d934f                       ....O...

000dfc38 <_ZTV11RHSPIDriver>:
	...
   dfc48:	000d95ed 000d40a5 000d40a5 000d40a5     .....@...@...@..
   dfc58:	000d40a5 000d8a23 000d89c5 000d8a73     .@..#.......s...
   dfc68:	000d8a41 000d8a97 000d89cf 000d89d7     A...............
   dfc78:	000d89db 000d89df 000d89e3 000d89e7     ................
   dfc88:	000d89d3 000d89f3 000d89f7 000d89fb     ................
   dfc98:	000d89ff 000d8a03 000d8a09 000d8a0d     ................
   dfca8:	000d89cf 000d8a11 000d8a17 000d8a1d     ................
   dfcb8:	000d9619 000d9623                       ....#...

000dfcc0 <_ZL18MODEM_CONFIG_TABLE>:
   dfcc0:	92047472 94480474 0cc47804 0004b472     rt..t.H..x..r...

000dfcd0 <_ZTV7RH_RF95>:
	...
   dfcd8:	000d978b 000d97c3 000d9c81 000d9ae7     ................
   dfce8:	000d97f9 000d9b2f 000d9787 000d8a23     ..../.......#...
   dfcf8:	000d89c5 000d8a73 000d8a41 000d8a97     ....s...A.......
   dfd08:	000d978d 000d89d7 000d89db 000d89df     ................
   dfd18:	000d89e3 000d89e7 000d89d3 000d89f3     ................
   dfd28:	000d89f7 000d89fb 000d89ff 000d8a03     ................
   dfd38:	000d8a09 000d8a0d 000d97d3 000d8a11     ................
   dfd48:	000d8a17 000d8a1d 000d9619 000d9623     ............#...
   dfd58:	000d9783 64383025 72002f00 766f6d65     ....%08d./.remov
   dfd68:	25206465 73250073 69786520 20737473     ed %s.%s exists 
   dfd78:	20646e61 61207369 72696420 6f746365     and is a directo
   dfd88:	66007972 20656c69 74206e69 77206568     ry.file in the w
   dfd98:	202c7961 656c6564 676e6974 00732520     ay, deleting %s.
   dfda8:	74617473 6c696620 65206465 6f6e7272     stat filed errno
   dfdb8:	0064253d 61657263 20646574 20726964     =%d.created dir 
   dfdc8:	6d007325 7269646b 69616620 2064656c     %s.mkdir failed 
   dfdd8:	6e727265 64253d6f 636e7500 69666e6f     errno=%d.unconfi
   dfde8:	65727567 69642064 74615072 63730068     gured dirPath.sc
   dfdf8:	696e6e61 2520676e 69772073 70206874     anning %s with p
   dfe08:	65747461 25206e72 64610073 676e6964     attern %s.adding
   dfe18:	206f7420 75657571 64252065 00732520      to queue %d %s.
   dfe28:	46746567 46656c69 516d6f72 65756575     getFileFromQueue
   dfe38:	74657220 656e7275 64252064 70706100      returned %d.app
   dfe48:	7165732e 656c6966 00000000              .seqfile....

000dfe54 <_ZTV14SequentialFile>:
	...
   dfe5c:	000da0cd 000da0f9 000d9d85              ............

000dfe68 <_ZTVN5spark13CellularClassE>:
	...
   dfe70:	000dadd3 000dadc9 000dadbf 000dad75     ............u...
   dfe80:	000dadb3 000dada7 000dcd55 000dcd5d     ........U...]...
   dfe90:	000dad9b 000dad93 000dad89 000dad7f     ................
   dfea0:	000dcd8d                                ....

000dfea4 <_ZTV14CellularSignal>:
	...
   dfeac:	000dae81 000daea9 000dae83 000daeb9     ................
   dfebc:	000daeed 000daf19 000daf4d 000daf9d     ........M.......
   dfecc:	000dae87 000daea3 fffffffc 00000000     ................
   dfedc:	000dafc3                                ....

000dfee0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dfee8:	000dafe3 000dafe9 000db027 000daff7     ........'.......
   dfef8:	000dafe5                                ....

000dfefc <_ZTVN5spark13EthernetClassE>:
	...
   dff04:	000db5fb 000db5f1 000db5e7 000db5dd     ................
   dff14:	000db5d1 000db5c5 000dcd55 000dcd5d     ........U...]...
   dff24:	000db5b9 000db5b1 000db5a7 000db59d     ................
   dff34:	000dcd8d                                ....

000dff38 <_ZTV7TwoWire>:
	...
   dff40:	000db79f 000db7e9 000db7c1 000db7a1     ................
   dff50:	000db7c9 000db7d1 000db7d9 000db7e1     ................

000dff60 <_ZTV9IPAddress>:
	...
   dff68:	000db981 000db971 000db973 34302575     ....q...s...u%04
   dff78:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   dff88:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   dff98:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   dffa8:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   dffb8:	005b2000 65646f63 00203d20 64006925     . [.code = .%i.d
   dffc8:	69617465 3d20736c 0a0d0020 6c006300     etails = ....c.l
   dffd8:	6e66006e 646f6300 65640065 6c696174     n.fn.code.detail
   dffe8:	00000000                                ....

000dffec <_ZTVN5spark16JSONStreamWriterE>:
	...
   dfff4:	000dbe3d 000dbe63 000dbe21 000dba81     =...c...!.......

000e0004 <_ZTVN5spark16StreamLogHandlerE>:
	...
   e000c:	000dc219 000dc231 000dc9fd 000d4c8b     ....1........L..

000e001c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   e0024:	000dc245 000dc259 000dcba1 000dbe29     E...Y.......)...

000e0034 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   e003c:	000dbe3b 000dbe71 000dc939 000dbe2b     ;...q...9...+...

000e004c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   e0054:	000dbe39 000dbe7f 000dc161 000dbe9d     9.......a.......

000e0064 <_ZTVN5spark12NetworkClassE>:
	...
   e006c:	000dcd15 000dcd1f 000dcd29 000dcd33     ........)...3...
   e007c:	000dcd3d 000dcd49 000dcd55 000dcd5d     =...I...U...]...
   e008c:	000dcd65 000dcd71 000dcd79 000dcd83     e...q...y.......
   e009c:	000dcd8d                                ....

000e00a0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   e00a0:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   e00b0:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   e00c0:	72756769 6f697461 7369206e 766e6920     iguration is inv
   e00d0:	64696c61 5925002e 2d6d252d 25546425     alid..%Y-%m-%dT%
   e00e0:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   e00f0:	00000065                                e...

000e00f4 <_ZTV11USARTSerial>:
	...
   e00fc:	000dd959 000dd9c7 000dd99f 000dcfd3     Y...............
   e010c:	000dd96f 000dd98b 000dd97d 000dd999     o.......}.......
   e011c:	000dd95b 000dd961                       [...a...

000e0124 <_ZTV9USBSerial>:
	...
   e012c:	000dda67 000ddacf 000ddaa5 000dcfd3     g...............
   e013c:	000dda97 000dda69 000dda79 000ddac9     ....i...y.......
   e014c:	000dda89 000dda61                       ....a...

000e0154 <_ZSt7nothrow>:
   e0154:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   e0164:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000e0175 <day_name.6145>:
   e0175:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   e0185:	61536972                                 riSat

000e018a <mon_name.6146>:
   e018a:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   e019a:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   e01aa:	63654476                                vDec

000e01ae <_ctype_>:
   e01ae:	20202000 20202020 28282020 20282828     .         ((((( 
   e01be:	20202020 20202020 20202020 20202020                     
   e01ce:	10108820 10101010 10101010 10101010      ...............
   e01de:	04040410 04040404 10040404 10101010     ................
   e01ee:	41411010 41414141 01010101 01010101     ..AAAAAA........
   e01fe:	01010101 01010101 01010101 10101010     ................
   e020e:	42421010 42424242 02020202 02020202     ..BBBBBB........
   e021e:	02020202 02020202 02020202 10101010     ................
   e022e:	00000020 00000000 00000000 00000000      ...............
	...

000e02af <link_const_variable_data_end>:
	...

000e02b0 <link_constructors_location>:
   e02b0:	000d4371 	.word	0x000d4371
   e02b4:	000d454d 	.word	0x000d454d
   e02b8:	000d5035 	.word	0x000d5035
   e02bc:	000d54ad 	.word	0x000d54ad
   e02c0:	000d5821 	.word	0x000d5821
   e02c4:	000d621d 	.word	0x000d621d
   e02c8:	000d8871 	.word	0x000d8871
   e02cc:	000d8cd5 	.word	0x000d8cd5
   e02d0:	000da415 	.word	0x000da415
   e02d4:	000dad65 	.word	0x000dad65
   e02d8:	000dae51 	.word	0x000dae51
   e02dc:	000db605 	.word	0x000db605
   e02e0:	000dc9ed 	.word	0x000dc9ed
   e02e4:	000dce61 	.word	0x000dce61
   e02e8:	000dd111 	.word	0x000dd111
   e02ec:	000dd6b9 	.word	0x000dd6b9
   e02f0:	000dd945 	.word	0x000dd945

000e02f4 <link_constructors_end>:
	...
