
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/2.3.0/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c490  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000e04b0  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001ec  2003dac8  000e04b4  0002dac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000b3c  2003dcb8  2003dcb8  0003dcb8  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000e06a0  000e06a0  000306a0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000e06cc  000e06cc  000306cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00357f3f  00000000  00000000  000306d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000311aa  00000000  00000000  0038860f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00050cec  00000000  00000000  003b97b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00004238  00000000  00000000  0040a4a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000d338  00000000  00000000  0040e6dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00058d41  00000000  00000000  0041ba15  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0007ea5a  00000000  00000000  00474756  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0013a9fa  00000000  00000000  004f31b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c1f0  00000000  00000000  0062dbac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00a fc6d 	bl	de910 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00a fc8f 	bl	de960 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dac8 	.word	0x2003dac8
   d404c:	000e04b4 	.word	0x000e04b4
   d4050:	2003dcb4 	.word	0x2003dcb4
   d4054:	2003dcb8 	.word	0x2003dcb8
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f009 fe73 	bl	ddd4c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000e046c 	.word	0x000e046c
   d4080:	000e04b0 	.word	0x000e04b0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bb1c 	b.w	d46c0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fc5f 	bl	d494c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f009 be13 	b.w	ddcbc <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f006 be53 	b.w	dad40 <malloc>

000d409a <_Znaj>:
   d409a:	f006 be51 	b.w	dad40 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f006 be57 	b.w	dad50 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f006 fce6 	bl	daa7c <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000da62d 	.word	0x000da62d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d40c8:	b40e      	push	{r1, r2, r3}
   d40ca:	b510      	push	{r4, lr}
   d40cc:	b08d      	sub	sp, #52	; 0x34
   d40ce:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d40d0:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d40d2:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d40d6:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d40d8:	2300      	movs	r3, #0
   d40da:	2020      	movs	r0, #32
   d40dc:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40e0:	e9cd 4200 	strd	r4, r2, [sp]
   d40e4:	201e      	movs	r0, #30
   d40e6:	aa04      	add	r2, sp, #16
   d40e8:	f006 fcd8 	bl	daa9c <log_message_v>
}
   d40ec:	b00d      	add	sp, #52	; 0x34
   d40ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d40f2:	b003      	add	sp, #12
   d40f4:	4770      	bx	lr
	...

000d40f8 <_Z14initializeLoRAv>:
uint8_t from;
uint8_t messageFlag = 0;
//********************************************************


bool initializeLoRA() {
   d40f8:	b510      	push	{r4, lr}
 	// Set up the Radio Module
	if (!manager.init()) {
   d40fa:	480b      	ldr	r0, [pc, #44]	; (d4128 <_Z14initializeLoRAv+0x30>)
   d40fc:	f005 f98a 	bl	d9414 <_ZN8RHRouter4initEv>
   d4100:	4604      	mov	r4, r0
   d4102:	b928      	cbnz	r0, d4110 <_Z14initializeLoRAv+0x18>
		Log.info("init failed");	// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   d4104:	4909      	ldr	r1, [pc, #36]	; (d412c <_Z14initializeLoRAv+0x34>)
   d4106:	480a      	ldr	r0, [pc, #40]	; (d4130 <_Z14initializeLoRAv+0x38>)
   d4108:	f7ff ffde 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?

	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?

	return true;
}
   d410c:	4620      	mov	r0, r4
   d410e:	bd10      	pop	{r4, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   d4110:	ed9f 0a08 	vldr	s0, [pc, #32]	; d4134 <_Z14initializeLoRAv+0x3c>
   d4114:	4808      	ldr	r0, [pc, #32]	; (d4138 <_Z14initializeLoRAv+0x40>)
   d4116:	f005 fc53 	bl	d99c0 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   d411a:	4807      	ldr	r0, [pc, #28]	; (d4138 <_Z14initializeLoRAv+0x40>)
   d411c:	2200      	movs	r2, #0
   d411e:	2117      	movs	r1, #23
   d4120:	f005 fdc8 	bl	d9cb4 <_ZN7RH_RF9510setTxPowerEab>
	return true;
   d4124:	e7f2      	b.n	d410c <_Z14initializeLoRAv+0x14>
   d4126:	bf00      	nop
   d4128:	2003dee8 	.word	0x2003dee8
   d412c:	000deef8 	.word	0x000deef8
   d4130:	2003e570 	.word	0x2003e570
   d4134:	4464c000 	.word	0x4464c000
   d4138:	2003ddb4 	.word	0x2003ddb4

000d413c <_Z21acknowledgeDataReportv>:
		break;
	}
	return false;
}

bool acknowledgeDataReport() {
   d413c:	b530      	push	{r4, r5, lr}
	Log.info("Sent response to client message = %d, time = %s, next report = %u minutes", buf[2], Time.timeStr(buf[3] << 24 | buf[4] << 16 | buf[5] <<8 | buf[6]).c_str(), (buf[7] << 8 | buf[8]));
   d413e:	4c22      	ldr	r4, [pc, #136]	; (d41c8 <_Z21acknowledgeDataReportv+0x8c>)
   d4140:	f8d4 2003 	ldr.w	r2, [r4, #3]
   d4144:	78a5      	ldrb	r5, [r4, #2]
bool acknowledgeDataReport() {
   d4146:	b087      	sub	sp, #28
   d4148:	ba12      	rev	r2, r2
	Log.info("Sent response to client message = %d, time = %s, next report = %u minutes", buf[2], Time.timeStr(buf[3] << 24 | buf[4] << 16 | buf[5] <<8 | buf[6]).c_str(), (buf[7] << 8 | buf[8]));
   d414a:	17d3      	asrs	r3, r2, #31
   d414c:	a802      	add	r0, sp, #8
   d414e:	f009 fb69 	bl	dd824 <_ZN9TimeClass7timeStrEx>
   d4152:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   d4156:	491d      	ldr	r1, [pc, #116]	; (d41cc <_Z21acknowledgeDataReportv+0x90>)
   d4158:	481d      	ldr	r0, [pc, #116]	; (d41d0 <_Z21acknowledgeDataReportv+0x94>)
   d415a:	ba5b      	rev16	r3, r3
   d415c:	b29b      	uxth	r3, r3
   d415e:	462a      	mov	r2, r5
   d4160:	9300      	str	r3, [sp, #0]
   d4162:	9b02      	ldr	r3, [sp, #8]
   d4164:	f7ff ffb0 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d4168:	a802      	add	r0, sp, #8
   d416a:	f009 f91b 	bl	dd3a4 <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   d416e:	4b19      	ldr	r3, [pc, #100]	; (d41d4 <_Z21acknowledgeDataReportv+0x98>)
   d4170:	881d      	ldrh	r5, [r3, #0]
   d4172:	2101      	movs	r1, #1
   d4174:	4628      	mov	r0, r5
   d4176:	f009 fe82 	bl	dde7e <digitalWrite>

	if (manager.sendtoWait(buf, 9, from, dataAcknowledge) == RH_ROUTER_ERROR_NONE) {
   d417a:	2304      	movs	r3, #4
   d417c:	9300      	str	r3, [sp, #0]
   d417e:	4b16      	ldr	r3, [pc, #88]	; (d41d8 <_Z21acknowledgeDataReportv+0x9c>)
   d4180:	4816      	ldr	r0, [pc, #88]	; (d41dc <_Z21acknowledgeDataReportv+0xa0>)
   d4182:	781b      	ldrb	r3, [r3, #0]
   d4184:	4621      	mov	r1, r4
   d4186:	2209      	movs	r2, #9
   d4188:	f004 fedc 	bl	d8f44 <_ZN6RHMesh10sendtoWaitEPhhhh>
   d418c:	4604      	mov	r4, r0
   d418e:	b968      	cbnz	r0, d41ac <_Z21acknowledgeDataReportv+0x70>
		Log.info("Response received successfully");
   d4190:	4913      	ldr	r1, [pc, #76]	; (d41e0 <_Z21acknowledgeDataReportv+0xa4>)
   d4192:	480f      	ldr	r0, [pc, #60]	; (d41d0 <_Z21acknowledgeDataReportv+0x94>)
   d4194:	f7ff ff98 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   d4198:	4621      	mov	r1, r4
   d419a:	4628      	mov	r0, r5
   d419c:	f009 fe6f 	bl	dde7e <digitalWrite>
		driver.sleep();                             // Here is where we will power down the LoRA radio module
   d41a0:	4810      	ldr	r0, [pc, #64]	; (d41e4 <_Z21acknowledgeDataReportv+0xa8>)
   d41a2:	f005 fb9a 	bl	d98da <_ZN7RH_RF955sleepEv>
		return true;
   d41a6:	2001      	movs	r0, #1

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	driver.sleep();                             // Here is where we will power down the LoRA radio module
	return false;
}
   d41a8:	b007      	add	sp, #28
   d41aa:	bd30      	pop	{r4, r5, pc}
	Log.info("Response not acknowledged");
   d41ac:	490e      	ldr	r1, [pc, #56]	; (d41e8 <_Z21acknowledgeDataReportv+0xac>)
   d41ae:	4808      	ldr	r0, [pc, #32]	; (d41d0 <_Z21acknowledgeDataReportv+0x94>)
   d41b0:	f7ff ff8a 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   d41b4:	2100      	movs	r1, #0
   d41b6:	4628      	mov	r0, r5
   d41b8:	f009 fe61 	bl	dde7e <digitalWrite>
	driver.sleep();                             // Here is where we will power down the LoRA radio module
   d41bc:	4809      	ldr	r0, [pc, #36]	; (d41e4 <_Z21acknowledgeDataReportv+0xa8>)
   d41be:	f005 fb8c 	bl	d98da <_ZN7RH_RF955sleepEv>
	return false;
   d41c2:	2000      	movs	r0, #0
   d41c4:	e7f0      	b.n	d41a8 <_Z21acknowledgeDataReportv+0x6c>
   d41c6:	bf00      	nop
   d41c8:	2003dcb8 	.word	0x2003dcb8
   d41cc:	000def04 	.word	0x000def04
   d41d0:	2003e570 	.word	0x2003e570
   d41d4:	000df26c 	.word	0x000df26c
   d41d8:	2003dee4 	.word	0x2003dee4
   d41dc:	2003dee8 	.word	0x2003dee8
   d41e0:	000def4e 	.word	0x000def4e
   d41e4:	2003ddb4 	.word	0x2003ddb4
   d41e8:	000def6d 	.word	0x000def6d

000d41ec <_Z17deciperDataReportv>:

bool deciperDataReport() {
   d41ec:	b538      	push	{r3, r4, r5, lr}
   d41ee:	4c24      	ldr	r4, [pc, #144]	; (d4280 <_Z17deciperDataReportv+0x94>)
		sysStatus.nodeNumber = buf[2] << 8 | buf[3]; // One time kluge until I implement the join process.
   d41f0:	4d24      	ldr	r5, [pc, #144]	; (d4284 <_Z17deciperDataReportv+0x98>)
   d41f2:	8863      	ldrh	r3, [r4, #2]
   d41f4:	78a1      	ldrb	r1, [r4, #2]
   d41f6:	78e2      	ldrb	r2, [r4, #3]
   d41f8:	ba5b      	rev16	r3, r3
   d41fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   d41fe:	b29b      	uxth	r3, r3

		if(sysStatus.nodeNumber == (buf[2] << 8 | buf[3])) {
   d4200:	429a      	cmp	r2, r3
		sysStatus.nodeNumber = buf[2] << 8 | buf[3]; // One time kluge until I implement the join process.
   d4202:	806a      	strh	r2, [r5, #2]
		if(sysStatus.nodeNumber == (buf[2] << 8 | buf[3])) {
   d4204:	d136      	bne.n	d4274 <_Z17deciperDataReportv+0x88>
			sysStatus.nodeNumber = buf[2] << 8 | buf[3];
			current.hourly = buf[5] << 8 | buf[6];
   d4206:	7961      	ldrb	r1, [r4, #5]
   d4208:	79a2      	ldrb	r2, [r4, #6]
   d420a:	4b1f      	ldr	r3, [pc, #124]	; (d4288 <_Z17deciperDataReportv+0x9c>)
   d420c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   d4210:	839a      	strh	r2, [r3, #28]
			current.daily = buf[7] << 8 | buf[8];
   d4212:	79e1      	ldrb	r1, [r4, #7]
   d4214:	7a22      	ldrb	r2, [r4, #8]
   d4216:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   d421a:	83da      	strh	r2, [r3, #30]
			current.stateOfCharge = buf[10];
   d421c:	7aa2      	ldrb	r2, [r4, #10]
   d421e:	605a      	str	r2, [r3, #4]
			current.batteryState = buf[11];
   d4220:	7ae2      	ldrb	r2, [r4, #11]
   d4222:	721a      	strb	r2, [r3, #8]
			current.internalTempC = buf[9];
   d4224:	7a62      	ldrb	r2, [r4, #9]
   d4226:	701a      	strb	r2, [r3, #0]
			sysStatus.resetCount = buf[12];
   d4228:	7b22      	ldrb	r2, [r4, #12]
   d422a:	60ea      	str	r2, [r5, #12]
			sysStatus.lastAlertCode = buf[13];
   d422c:	7b62      	ldrb	r2, [r4, #13]
			current.rssi = (buf[14] << 8 | buf[15]) - 65535;
   d422e:	7ba1      	ldrb	r1, [r4, #14]
			sysStatus.lastAlertCode = buf[13];
   d4230:	772a      	strb	r2, [r5, #28]
			current.rssi = (buf[14] << 8 | buf[15]) - 65535;
   d4232:	7be2      	ldrb	r2, [r4, #15]
   d4234:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   d4238:	3201      	adds	r2, #1
   d423a:	831a      	strh	r2, [r3, #24]
			current.messageNumber = buf[16];
   d423c:	7c22      	ldrb	r2, [r4, #16]
   d423e:	769a      	strb	r2, [r3, #26]
		}
		else Log.info("Message intended for another node");

		// This is a response to a data message it has a length of 9 and a specific payload and message flag
		// Send a reply back to the originator client
		buf[0] = 0;                                // to be replaced/updated
   d4240:	2300      	movs	r3, #0
   d4242:	7023      	strb	r3, [r4, #0]
		buf[1] = 0;                                // to be replaced/updated       
   d4244:	7063      	strb	r3, [r4, #1]
		buf[2] = buf[16];							// Message number
   d4246:	7c23      	ldrb	r3, [r4, #16]
   d4248:	70a3      	strb	r3, [r4, #2]
		buf[3] = ((uint8_t) ((Time.now()) >> 24)); // Fourth byte - current time
   d424a:	f009 fbee 	bl	dda2a <_ZN9TimeClass3nowEv>
   d424e:	1600      	asrs	r0, r0, #24
   d4250:	70e0      	strb	r0, [r4, #3]
		buf[4] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   d4252:	f009 fbea 	bl	dda2a <_ZN9TimeClass3nowEv>
   d4256:	1400      	asrs	r0, r0, #16
   d4258:	7120      	strb	r0, [r4, #4]
		buf[5] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   d425a:	f009 fbe6 	bl	dda2a <_ZN9TimeClass3nowEv>
   d425e:	1200      	asrs	r0, r0, #8
   d4260:	7160      	strb	r0, [r4, #5]
		buf[6] = ((uint8_t) (Time.now()));		    // First byte			
   d4262:	f009 fbe2 	bl	dda2a <_ZN9TimeClass3nowEv>
		buf[7] = highByte(sysStatus.frequencyMinutes);	// Time till next report
   d4266:	8b6b      	ldrh	r3, [r5, #26]
		buf[6] = ((uint8_t) (Time.now()));		    // First byte			
   d4268:	71a0      	strb	r0, [r4, #6]
		buf[7] = highByte(sysStatus.frequencyMinutes);	// Time till next report
   d426a:	121a      	asrs	r2, r3, #8
   d426c:	71e2      	strb	r2, [r4, #7]
		buf[8] = lowByte(sysStatus.frequencyMinutes);		
   d426e:	7223      	strb	r3, [r4, #8]

		return true;
}
   d4270:	2001      	movs	r0, #1
   d4272:	bd38      	pop	{r3, r4, r5, pc}
		else Log.info("Message intended for another node");
   d4274:	4905      	ldr	r1, [pc, #20]	; (d428c <_Z17deciperDataReportv+0xa0>)
   d4276:	4806      	ldr	r0, [pc, #24]	; (d4290 <_Z17deciperDataReportv+0xa4>)
   d4278:	f7ff ff26 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d427c:	e7e0      	b.n	d4240 <_Z17deciperDataReportv+0x54>
   d427e:	bf00      	nop
   d4280:	2003dcb8 	.word	0x2003dcb8
   d4284:	2003e220 	.word	0x2003e220
   d4288:	2003e200 	.word	0x2003e200
   d428c:	000def87 	.word	0x000def87
   d4290:	2003e570 	.word	0x2003e570

000d4294 <_Z15sendLoRAMessagev>:
bool sendLoRAMessage() {
   d4294:	b538      	push	{r3, r4, r5, lr}
	switch (lora_state) {
   d4296:	4d10      	ldr	r5, [pc, #64]	; (d42d8 <_Z15sendLoRAMessagev+0x44>)
   d4298:	782c      	ldrb	r4, [r5, #0]
   d429a:	2c03      	cmp	r4, #3
   d429c:	d008      	beq.n	d42b0 <_Z15sendLoRAMessagev+0x1c>
   d429e:	2c04      	cmp	r4, #4
   d42a0:	d00f      	beq.n	d42c2 <_Z15sendLoRAMessagev+0x2e>
   d42a2:	b91c      	cbnz	r4, d42ac <_Z15sendLoRAMessagev+0x18>
			Log.info("Error - no message flag received");
   d42a4:	490d      	ldr	r1, [pc, #52]	; (d42dc <_Z15sendLoRAMessagev+0x48>)
   d42a6:	480e      	ldr	r0, [pc, #56]	; (d42e0 <_Z15sendLoRAMessagev+0x4c>)
   d42a8:	f7ff ff0e 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
	switch (lora_state) {
   d42ac:	2000      	movs	r0, #0
   d42ae:	e011      	b.n	d42d4 <_Z15sendLoRAMessagev+0x40>
			Log.info("Decipering data report"); 	// Gateway or a mesh node
   d42b0:	490c      	ldr	r1, [pc, #48]	; (d42e4 <_Z15sendLoRAMessagev+0x50>)
   d42b2:	480b      	ldr	r0, [pc, #44]	; (d42e0 <_Z15sendLoRAMessagev+0x4c>)
   d42b4:	f7ff ff08 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
			deciperDataReport();
   d42b8:	f7ff ff98 	bl	d41ec <_Z17deciperDataReportv>
			lora_state = DATA_ACQ;
   d42bc:	2304      	movs	r3, #4
   d42be:	702b      	strb	r3, [r5, #0]
		break;
   d42c0:	e7f4      	b.n	d42ac <_Z15sendLoRAMessagev+0x18>
			Log.info("Deciperng data acknowledge"); // Typically a node or mesh node
   d42c2:	4909      	ldr	r1, [pc, #36]	; (d42e8 <_Z15sendLoRAMessagev+0x54>)
   d42c4:	4806      	ldr	r0, [pc, #24]	; (d42e0 <_Z15sendLoRAMessagev+0x4c>)
   d42c6:	f7ff feff 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
			if (acknowledgeDataReport()) {
   d42ca:	f7ff ff37 	bl	d413c <_Z21acknowledgeDataReportv>
   d42ce:	b108      	cbz	r0, d42d4 <_Z15sendLoRAMessagev+0x40>
				lora_state = NULL_STATE;
   d42d0:	2300      	movs	r3, #0
   d42d2:	702b      	strb	r3, [r5, #0]
}
   d42d4:	bd38      	pop	{r3, r4, r5, pc}
   d42d6:	bf00      	nop
   d42d8:	2003dee5 	.word	0x2003dee5
   d42dc:	000defa9 	.word	0x000defa9
   d42e0:	2003e570 	.word	0x2003e570
   d42e4:	000defca 	.word	0x000defca
   d42e8:	000defe1 	.word	0x000defe1

000d42ec <_Z12flashTheLEDsv>:


void flashTheLEDs() {
   d42ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	time_t lastChange = 0;
	int flashes = 0;
   d42f0:	f04f 0b00 	mov.w	fp, #0
	time_t lastChange = 0;
   d42f4:	465c      	mov	r4, fp
   d42f6:	465d      	mov	r5, fp

	while (flashes <= 6) {
		if (millis() - lastChange > 1000) {
   d42f8:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   d42fc:	f04f 0900 	mov.w	r9, #0
	while (flashes <= 6) {
   d4300:	f1bb 0f07 	cmp.w	fp, #7
   d4304:	d01b      	beq.n	d433e <_Z12flashTheLEDsv+0x52>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4306:	f006 f999 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
		if (millis() - lastChange > 1000) {
   d430a:	1b06      	subs	r6, r0, r4
   d430c:	eb65 0745 	sbc.w	r7, r5, r5, lsl #1
   d4310:	45b0      	cmp	r8, r6
   d4312:	eb79 0307 	sbcs.w	r3, r9, r7
   d4316:	daf3      	bge.n	d4300 <_Z12flashTheLEDsv+0x14>
   d4318:	f006 f990 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
			lastChange = millis();
			digitalWrite(BLUE_LED, !digitalRead(BLUE_LED));
   d431c:	4b0b      	ldr	r3, [pc, #44]	; (d434c <_Z12flashTheLEDsv+0x60>)
   d431e:	f8b3 a000 	ldrh.w	sl, [r3]
			lastChange = millis();
   d4322:	4604      	mov	r4, r0
			digitalWrite(BLUE_LED, !digitalRead(BLUE_LED));
   d4324:	4650      	mov	r0, sl
   d4326:	f009 fdc3 	bl	ddeb0 <digitalRead>
   d432a:	fab0 f180 	clz	r1, r0
   d432e:	0949      	lsrs	r1, r1, #5
   d4330:	4650      	mov	r0, sl
   d4332:	f009 fda4 	bl	dde7e <digitalWrite>
			lastChange = millis();
   d4336:	2500      	movs	r5, #0
			flashes++;
   d4338:	f10b 0b01 	add.w	fp, fp, #1
   d433c:	e7e0      	b.n	d4300 <_Z12flashTheLEDsv+0x14>
		}
	}
	digitalWrite(BLUE_LED, LOW);
   d433e:	4b03      	ldr	r3, [pc, #12]	; (d434c <_Z12flashTheLEDsv+0x60>)
   d4340:	2100      	movs	r1, #0
   d4342:	8818      	ldrh	r0, [r3, #0]
}
   d4344:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(BLUE_LED, LOW);
   d4348:	f009 bd99 	b.w	dde7e <digitalWrite>
   d434c:	000df26c 	.word	0x000df26c

000d4350 <_Z20listenForLoRAMessagev>:
bool listenForLoRAMessage() {
   d4350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (manager.recvfromAckTimeout(buf, &len, 3000, &from,__null,__null,&messageFlag))	{	// We have received a message
   d4354:	4f26      	ldr	r7, [pc, #152]	; (d43f0 <_Z20listenForLoRAMessagev+0xa0>)
   d4356:	f8df 90c4 	ldr.w	r9, [pc, #196]	; d441c <_Z20listenForLoRAMessagev+0xcc>
   d435a:	4e26      	ldr	r6, [pc, #152]	; (d43f4 <_Z20listenForLoRAMessagev+0xa4>)
   d435c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; d4420 <_Z20listenForLoRAMessagev+0xd0>
   d4360:	4825      	ldr	r0, [pc, #148]	; (d43f8 <_Z20listenForLoRAMessagev+0xa8>)
bool listenForLoRAMessage() {
   d4362:	b089      	sub	sp, #36	; 0x24
	if (manager.recvfromAckTimeout(buf, &len, 3000, &from,__null,__null,&messageFlag))	{	// We have received a message
   d4364:	2500      	movs	r5, #0
   d4366:	e9cd 5602 	strd	r5, r6, [sp, #8]
   d436a:	9504      	str	r5, [sp, #16]
   d436c:	9501      	str	r5, [sp, #4]
   d436e:	f8cd 8000 	str.w	r8, [sp]
   d4372:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d4376:	463a      	mov	r2, r7
   d4378:	4649      	mov	r1, r9
   d437a:	f004 fee9 	bl	d9150 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>
   d437e:	4604      	mov	r4, r0
   d4380:	2800      	cmp	r0, #0
   d4382:	d02f      	beq.n	d43e4 <_Z20listenForLoRAMessagev+0x94>
		buf[len] = 0;
   d4384:	783b      	ldrb	r3, [r7, #0]
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[messageFlag] ,len);
   d4386:	f898 2000 	ldrb.w	r2, [r8]
		buf[len] = 0;
   d438a:	f809 5003 	strb.w	r5, [r9, r3]
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   d438e:	7833      	ldrb	r3, [r6, #0]
   d4390:	4d1a      	ldr	r5, [pc, #104]	; (d43fc <_Z20listenForLoRAMessagev+0xac>)
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[messageFlag] ,len);
   d4392:	481b      	ldr	r0, [pc, #108]	; (d4400 <_Z20listenForLoRAMessagev+0xb0>)
   d4394:	9207      	str	r2, [sp, #28]
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   d4396:	f003 030f 	and.w	r3, r3, #15
   d439a:	702b      	strb	r3, [r5, #0]
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[messageFlag] ,len);
   d439c:	f004 fbb5 	bl	d8b0a <_ZN15RHGenericDriver8lastRssiEv>
   d43a0:	7839      	ldrb	r1, [r7, #0]
   d43a2:	9101      	str	r1, [sp, #4]
   d43a4:	4603      	mov	r3, r0
   d43a6:	4917      	ldr	r1, [pc, #92]	; (d4404 <_Z20listenForLoRAMessagev+0xb4>)
   d43a8:	7830      	ldrb	r0, [r6, #0]
   d43aa:	9a07      	ldr	r2, [sp, #28]
   d43ac:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   d43b0:	9100      	str	r1, [sp, #0]
   d43b2:	4815      	ldr	r0, [pc, #84]	; (d4408 <_Z20listenForLoRAMessagev+0xb8>)
   d43b4:	4915      	ldr	r1, [pc, #84]	; (d440c <_Z20listenForLoRAMessagev+0xbc>)
   d43b6:	f7ff fe87 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
		switch (lora_state) {
   d43ba:	782b      	ldrb	r3, [r5, #0]
   d43bc:	2b03      	cmp	r3, #3
   d43be:	d007      	beq.n	d43d0 <_Z20listenForLoRAMessagev+0x80>
   d43c0:	2b04      	cmp	r3, #4
   d43c2:	d013      	beq.n	d43ec <_Z20listenForLoRAMessagev+0x9c>
   d43c4:	b963      	cbnz	r3, d43e0 <_Z20listenForLoRAMessagev+0x90>
				Log.info("Error - no message flag received");
   d43c6:	4912      	ldr	r1, [pc, #72]	; (d4410 <_Z20listenForLoRAMessagev+0xc0>)
				Log.info("Deciperng data acknowledge"); // Typically a node or mesh node
   d43c8:	480f      	ldr	r0, [pc, #60]	; (d4408 <_Z20listenForLoRAMessagev+0xb8>)
   d43ca:	f7ff fe7d 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d43ce:	e007      	b.n	d43e0 <_Z20listenForLoRAMessagev+0x90>
				Log.info("Decipering data report"); 	// Gateway or a mesh node
   d43d0:	4910      	ldr	r1, [pc, #64]	; (d4414 <_Z20listenForLoRAMessagev+0xc4>)
   d43d2:	480d      	ldr	r0, [pc, #52]	; (d4408 <_Z20listenForLoRAMessagev+0xb8>)
   d43d4:	f7ff fe78 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
				deciperDataReport();
   d43d8:	f7ff ff08 	bl	d41ec <_Z17deciperDataReportv>
				lora_state = DATA_ACQ;
   d43dc:	2304      	movs	r3, #4
   d43de:	702b      	strb	r3, [r5, #0]
		flashTheLEDs();
   d43e0:	f7ff ff84 	bl	d42ec <_Z12flashTheLEDsv>
}
   d43e4:	4620      	mov	r0, r4
   d43e6:	b009      	add	sp, #36	; 0x24
   d43e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				Log.info("Deciperng data acknowledge"); // Typically a node or mesh node
   d43ec:	490a      	ldr	r1, [pc, #40]	; (d4418 <_Z20listenForLoRAMessagev+0xc8>)
   d43ee:	e7eb      	b.n	d43c8 <_Z20listenForLoRAMessagev+0x78>
   d43f0:	2003dac8 	.word	0x2003dac8
   d43f4:	2003e020 	.word	0x2003e020
   d43f8:	2003dee8 	.word	0x2003dee8
   d43fc:	2003dee5 	.word	0x2003dee5
   d4400:	2003ddb4 	.word	0x2003ddb4
   d4404:	2003dac9 	.word	0x2003dac9
   d4408:	2003e570 	.word	0x2003e570
   d440c:	000deffc 	.word	0x000deffc
   d4410:	000defa9 	.word	0x000defa9
   d4414:	000defca 	.word	0x000defca
   d4418:	000defe1 	.word	0x000defe1
   d441c:	2003dcb8 	.word	0x2003dcb8
   d4420:	2003dee4 	.word	0x2003dee4

000d4424 <_GLOBAL__sub_I_loraStateNames>:
}
   d4424:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   d4426:	4a08      	ldr	r2, [pc, #32]	; (d4448 <_GLOBAL__sub_I_loraStateNames+0x24>)
   d4428:	4c08      	ldr	r4, [pc, #32]	; (d444c <_GLOBAL__sub_I_loraStateNames+0x28>)
   d442a:	4909      	ldr	r1, [pc, #36]	; (d4450 <_GLOBAL__sub_I_loraStateNames+0x2c>)
   d442c:	7812      	ldrb	r2, [r2, #0]
   d442e:	7809      	ldrb	r1, [r1, #0]
   d4430:	4b08      	ldr	r3, [pc, #32]	; (d4454 <_GLOBAL__sub_I_loraStateNames+0x30>)
   d4432:	4620      	mov	r0, r4
   d4434:	f005 fa86 	bl	d9944 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   d4438:	4621      	mov	r1, r4
   d443a:	4807      	ldr	r0, [pc, #28]	; (d4458 <_GLOBAL__sub_I_loraStateNames+0x34>)
}
   d443c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   d4440:	2201      	movs	r2, #1
   d4442:	f004 bd75 	b.w	d8f30 <_ZN6RHMeshC1ER15RHGenericDriverh>
   d4446:	bf00      	nop
   d4448:	000df272 	.word	0x000df272
   d444c:	2003ddb4 	.word	0x2003ddb4
   d4450:	000df270 	.word	0x000df270
   d4454:	2003e274 	.word	0x2003e274
   d4458:	2003dee8 	.word	0x2003dee8

000d445c <_Z13userSwitchISRv>:
	}
	Log.info(stateTransitionString);
}

void userSwitchISR() {
  userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   d445c:	4b01      	ldr	r3, [pc, #4]	; (d4464 <_Z13userSwitchISRv+0x8>)
   d445e:	2201      	movs	r2, #1
   d4460:	701a      	strb	r2, [r3, #0]
}
   d4462:	4770      	bx	lr
   d4464:	2003e1b1 	.word	0x2003e1b1

000d4468 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4468:	b510      	push	{r4, lr}
   d446a:	4b03      	ldr	r3, [pc, #12]	; (d4478 <_ZN8MB85RC64D1Ev+0x10>)
   d446c:	6003      	str	r3, [r0, #0]
   d446e:	4604      	mov	r4, r0
   d4470:	f003 fbef 	bl	d7c52 <_ZN6MB85RCD1Ev>
   d4474:	4620      	mov	r0, r4
   d4476:	bd10      	pop	{r4, pc}
   d4478:	000df224 	.word	0x000df224

000d447c <_ZN8MB85RC64D0Ev>:
   d447c:	b510      	push	{r4, lr}
   d447e:	4604      	mov	r4, r0
   d4480:	f7ff fff2 	bl	d4468 <_ZN8MB85RC64D1Ev>
   d4484:	4620      	mov	r0, r4
   d4486:	2110      	movs	r1, #16
   d4488:	f009 fdb6 	bl	ddff8 <_ZdlPvj>
   d448c:	4620      	mov	r0, r4
   d448e:	bd10      	pop	{r4, pc}

000d4490 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d4492:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4494:	4605      	mov	r5, r0
   d4496:	460f      	mov	r7, r1
   d4498:	4616      	mov	r6, r2
        if (valid_) {
   d449a:	b18b      	cbz	r3, d44c0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d449c:	6803      	ldr	r3, [r0, #0]
   d449e:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d44a0:	b183      	cbz	r3, d44c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d44a2:	889a      	ldrh	r2, [r3, #4]
   d44a4:	2a01      	cmp	r2, #1
   d44a6:	d006      	beq.n	d44b6 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d44a8:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d44aa:	e7f9      	b.n	d44a0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d44ac:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d44ae:	b14b      	cbz	r3, d44c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d44b0:	889a      	ldrh	r2, [r3, #4]
   d44b2:	2a01      	cmp	r2, #1
   d44b4:	d1fa      	bne.n	d44ac <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d44b6:	b12b      	cbz	r3, d44c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d44b8:	899a      	ldrh	r2, [r3, #12]
   d44ba:	42ba      	cmp	r2, r7
   d44bc:	d1f6      	bne.n	d44ac <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d44be:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d44c0:	4628      	mov	r0, r5
   d44c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d44c4:	490a      	ldr	r1, [pc, #40]	; (d44f0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d44c6:	2010      	movs	r0, #16
   d44c8:	f009 fd98 	bl	ddffc <_ZnwjRKSt9nothrow_t>
   d44cc:	4604      	mov	r4, r0
   d44ce:	b168      	cbz	r0, d44ec <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d44d0:	2210      	movs	r2, #16
   d44d2:	2100      	movs	r1, #0
   d44d4:	f00a fa44 	bl	de960 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d44d8:	4b06      	ldr	r3, [pc, #24]	; (d44f4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d44da:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d44dc:	2301      	movs	r3, #1
   d44de:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d44e0:	692b      	ldr	r3, [r5, #16]
   d44e2:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d44e4:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d44e6:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d44e8:	612c      	str	r4, [r5, #16]
   d44ea:	e7e9      	b.n	d44c0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d44ec:	7528      	strb	r0, [r5, #20]
                return *this;
   d44ee:	e7e7      	b.n	d44c0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d44f0:	000e0310 	.word	0x000e0310
   d44f4:	00030010 	.word	0x00030010

000d44f8 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>:
     * 
     * Note that 24:00:00 is not a valid time. You should generally use inclusive times such that
     * 23:59:59 is the end of the day.
     * 
     */
    LocalTimeRange(LocalTimeHMS hmsStart, LocalTimeHMS hmsEnd = LocalTimeHMS("23:59:59")) : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(hmsStart), hmsEnd(hmsEnd) {
   d44f8:	b510      	push	{r4, lr}
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d44fa:	247f      	movs	r4, #127	; 0x7f
   d44fc:	7004      	strb	r4, [r0, #0]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   d44fe:	2400      	movs	r4, #0
   d4500:	e9c0 4401 	strd	r4, r4, [r0, #4]
   d4504:	e9c0 4403 	strd	r4, r4, [r0, #12]
   d4508:	e9c0 4405 	strd	r4, r4, [r0, #20]
class LocalTimeHMS {
   d450c:	6849      	ldr	r1, [r1, #4]
   d450e:	4c03      	ldr	r4, [pc, #12]	; (d451c <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_+0x24>)
   d4510:	6852      	ldr	r2, [r2, #4]
   d4512:	61c4      	str	r4, [r0, #28]
   d4514:	e9c0 1408 	strd	r1, r4, [r0, #32]
   d4518:	6282      	str	r2, [r0, #40]	; 0x28
    }
   d451a:	bd10      	pop	{r4, pc}
   d451c:	000df990 	.word	0x000df990

000d4520 <_ZN14LocalTimeRangeD1Ev>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d4520:	b510      	push	{r4, lr}
   d4522:	4604      	mov	r4, r0
   d4524:	3024      	adds	r0, #36	; 0x24
   d4526:	f002 f914 	bl	d6752 <_ZN12LocalTimeHMSD1Ev>
   d452a:	f104 001c 	add.w	r0, r4, #28
   d452e:	f002 f910 	bl	d6752 <_ZN12LocalTimeHMSD1Ev>
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
   d4532:	6920      	ldr	r0, [r4, #16]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d4534:	b108      	cbz	r0, d453a <_ZN14LocalTimeRangeD1Ev+0x1a>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4536:	f7ff fdb2 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   d453a:	6860      	ldr	r0, [r4, #4]
	if (__p)
   d453c:	b108      	cbz	r0, d4542 <_ZN14LocalTimeRangeD1Ev+0x22>
   d453e:	f7ff fdae 	bl	d409e <_ZdlPv>
   d4542:	4620      	mov	r0, r4
   d4544:	bd10      	pop	{r4, pc}
	...

000d4548 <_Z22publishStateTransitionv>:
{
   d4548:	b5f0      	push	{r4, r5, r6, r7, lr}
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d454a:	4d25      	ldr	r5, [pc, #148]	; (d45e0 <_Z22publishStateTransitionv+0x98>)
   d454c:	4c25      	ldr	r4, [pc, #148]	; (d45e4 <_Z22publishStateTransitionv+0x9c>)
   d454e:	4b26      	ldr	r3, [pc, #152]	; (d45e8 <_Z22publishStateTransitionv+0xa0>)
   d4550:	782a      	ldrb	r2, [r5, #0]
   d4552:	7821      	ldrb	r1, [r4, #0]
{
   d4554:	b08f      	sub	sp, #60	; 0x3c
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4556:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d455a:	9200      	str	r2, [sp, #0]
   d455c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   d4560:	4a22      	ldr	r2, [pc, #136]	; (d45ec <_Z22publishStateTransitionv+0xa4>)
   d4562:	2128      	movs	r1, #40	; 0x28
   d4564:	a804      	add	r0, sp, #16
   d4566:	f006 fc13 	bl	dad90 <snprintf>
	oldState = state;
   d456a:	782b      	ldrb	r3, [r5, #0]
   d456c:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d456e:	f006 fb47 	bl	dac00 <spark_cloud_flag_connected>
	if (Particle.connected()) {
   d4572:	2800      	cmp	r0, #0
   d4574:	d02e      	beq.n	d45d4 <_Z22publishStateTransitionv+0x8c>
		if (millis() - lastPublish > 1000) {
   d4576:	4c1e      	ldr	r4, [pc, #120]	; (d45f0 <_Z22publishStateTransitionv+0xa8>)
   d4578:	f006 f860 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
   d457c:	e9d4 3200 	ldrd	r3, r2, [r4]
   d4580:	1ac6      	subs	r6, r0, r3
   d4582:	eb62 0742 	sbc.w	r7, r2, r2, lsl #1
   d4586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d458a:	2300      	movs	r3, #0
   d458c:	42b2      	cmp	r2, r6
   d458e:	41bb      	sbcs	r3, r7
   d4590:	da20      	bge.n	d45d4 <_Z22publishStateTransitionv+0x8c>
   d4592:	f006 f853 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d4596:	2300      	movs	r3, #0
   d4598:	6063      	str	r3, [r4, #4]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d459a:	4b16      	ldr	r3, [pc, #88]	; (d45f4 <_Z22publishStateTransitionv+0xac>)
   d459c:	6020      	str	r0, [r4, #0]
   d459e:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d45a0:	f88d 3000 	strb.w	r3, [sp]
   d45a4:	4914      	ldr	r1, [pc, #80]	; (d45f8 <_Z22publishStateTransitionv+0xb0>)
   d45a6:	233c      	movs	r3, #60	; 0x3c
   d45a8:	aa04      	add	r2, sp, #16
   d45aa:	a802      	add	r0, sp, #8
   d45ac:	f006 ff04 	bl	db3b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d45b0:	9c03      	ldr	r4, [sp, #12]
   d45b2:	b17c      	cbz	r4, d45d4 <_Z22publishStateTransitionv+0x8c>
      if (--_M_use_count == 0)
   d45b4:	6863      	ldr	r3, [r4, #4]
   d45b6:	3b01      	subs	r3, #1
   d45b8:	6063      	str	r3, [r4, #4]
   d45ba:	b95b      	cbnz	r3, d45d4 <_Z22publishStateTransitionv+0x8c>
          _M_dispose();
   d45bc:	6823      	ldr	r3, [r4, #0]
   d45be:	4620      	mov	r0, r4
   d45c0:	689b      	ldr	r3, [r3, #8]
   d45c2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d45c4:	68a3      	ldr	r3, [r4, #8]
   d45c6:	3b01      	subs	r3, #1
   d45c8:	60a3      	str	r3, [r4, #8]
   d45ca:	b91b      	cbnz	r3, d45d4 <_Z22publishStateTransitionv+0x8c>
            _M_destroy();
   d45cc:	6823      	ldr	r3, [r4, #0]
   d45ce:	4620      	mov	r0, r4
   d45d0:	68db      	ldr	r3, [r3, #12]
   d45d2:	4798      	blx	r3
	Log.info(stateTransitionString);
   d45d4:	4809      	ldr	r0, [pc, #36]	; (d45fc <_Z22publishStateTransitionv+0xb4>)
   d45d6:	a904      	add	r1, sp, #16
   d45d8:	f7ff fd76 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
}
   d45dc:	b00f      	add	sp, #60	; 0x3c
   d45de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d45e0:	2003e1b0 	.word	0x2003e1b0
   d45e4:	2003e178 	.word	0x2003e178
   d45e8:	2003db3f 	.word	0x2003db3f
   d45ec:	000df03b 	.word	0x000df03b
   d45f0:	2003e028 	.word	0x2003e028
   d45f4:	2003e021 	.word	0x2003e021
   d45f8:	000df049 	.word	0x000df049
   d45fc:	2003e570 	.word	0x2003e570

000d4600 <_GLOBAL__sub_I___appProductID>:
			return secondsToReturn;
		}
		else return 0;
    }
	else return 0;
   d4600:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   d4602:	4b25      	ldr	r3, [pc, #148]	; (d4698 <_GLOBAL__sub_I___appProductID+0x98>)
   d4604:	2501      	movs	r5, #1
   d4606:	701d      	strb	r5, [r3, #0]
   d4608:	4b24      	ldr	r3, [pc, #144]	; (d469c <_GLOBAL__sub_I___appProductID+0x9c>)
   d460a:	2208      	movs	r2, #8
   d460c:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d460e:	f009 fbcf 	bl	dddb0 <spark_protocol_instance>
   d4612:	2300      	movs	r3, #0
   d4614:	461a      	mov	r2, r3
   d4616:	210d      	movs	r1, #13
   d4618:	f009 fbd2 	bl	dddc0 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d461c:	f009 fbc8 	bl	dddb0 <spark_protocol_instance>
   d4620:	2300      	movs	r3, #0
   d4622:	461a      	mov	r2, r3
   d4624:	4619      	mov	r1, r3
   d4626:	f009 fbd3 	bl	dddd0 <spark_protocol_set_product_firmware_version>
        : config_(config) {
   d462a:	4b1d      	ldr	r3, [pc, #116]	; (d46a0 <_GLOBAL__sub_I___appProductID+0xa0>)
   d462c:	461a      	mov	r2, r3
   d462e:	1d19      	adds	r1, r3, #4
   d4630:	f842 1b09 	str.w	r1, [r2], #9
              valid_(true) {
   d4634:	2400      	movs	r4, #0
   d4636:	f8a3 4009 	strh.w	r4, [r3, #9]
   d463a:	7094      	strb	r4, [r2, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d463c:	4a19      	ldr	r2, [pc, #100]	; (d46a4 <_GLOBAL__sub_I___appProductID+0xa4>)
              valid_(true) {
   d463e:	751d      	strb	r5, [r3, #20]
        config_.wakeup_sources = nullptr;
   d4640:	e9c3 4403 	strd	r4, r4, [r3, #12]
        config_.size = sizeof(hal_sleep_config_t);
   d4644:	605a      	str	r2, [r3, #4]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d4646:	721c      	strb	r4, [r3, #8]
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d4648:	f009 fc8e 	bl	ddf68 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d464c:	4d16      	ldr	r5, [pc, #88]	; (d46a8 <_GLOBAL__sub_I___appProductID+0xa8>)
   d464e:	4601      	mov	r1, r0
   d4650:	4623      	mov	r3, r4
   d4652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d4656:	4628      	mov	r0, r5
   d4658:	f003 fb08 	bl	d7c6c <_ZN6MB85RCC1ER7TwoWireji>
   d465c:	4b13      	ldr	r3, [pc, #76]	; (d46ac <_GLOBAL__sub_I___appProductID+0xac>)
   d465e:	602b      	str	r3, [r5, #0]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d4660:	f009 fc82 	bl	ddf68 <_Z19__fetch_global_Wirev>
class LocalTimeSchedule {
public:
    /**
     * @brief Construct a new, empty schedule
     */
    LocalTimeSchedule() {
   d4664:	4d12      	ldr	r5, [pc, #72]	; (d46b0 <_GLOBAL__sub_I___appProductID+0xb0>)
   d4666:	4601      	mov	r1, r0
   d4668:	2269      	movs	r2, #105	; 0x69
   d466a:	4812      	ldr	r0, [pc, #72]	; (d46b4 <_GLOBAL__sub_I___appProductID+0xb4>)
   d466c:	f001 f998 	bl	d59a0 <_ZN6AB1805C1ER7TwoWireh>
   d4670:	4628      	mov	r0, r5
   d4672:	4911      	ldr	r1, [pc, #68]	; (d46b8 <_GLOBAL__sub_I___appProductID+0xb8>)
   d4674:	f008 fee1 	bl	dd43a <_ZN6StringC1EPKc>
   d4678:	2300      	movs	r3, #0
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   d467a:	4810      	ldr	r0, [pc, #64]	; (d46bc <_GLOBAL__sub_I___appProductID+0xbc>)
    LocalTimeSchedule() {
   d467c:	612c      	str	r4, [r5, #16]
   d467e:	2200      	movs	r2, #0
   d4680:	e9c5 2306 	strd	r2, r3, [r5, #24]
	: _M_start(), _M_finish(), _M_end_of_storage()
   d4684:	e9c5 4408 	strd	r4, r4, [r5, #32]
class LocalTimeConvert {
   d4688:	2306      	movs	r3, #6
   d468a:	f840 3b04 	str.w	r3, [r0], #4
   d468e:	62ac      	str	r4, [r5, #40]	; 0x28
   d4690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4694:	f002 bb38 	b.w	d6d08 <_ZN22LocalTimePosixTimezoneC1Ev>
   d4698:	2003e021 	.word	0x2003e021
   d469c:	2003e022 	.word	0x2003e022
   d46a0:	2003e05c 	.word	0x2003e05c
   d46a4:	00030010 	.word	0x00030010
   d46a8:	2003e074 	.word	0x2003e074
   d46ac:	000df224 	.word	0x000df224
   d46b0:	2003e180 	.word	0x2003e180
   d46b4:	2003e03c 	.word	0x2003e03c
   d46b8:	000e0190 	.word	0x000e0190
   d46bc:	2003e088 	.word	0x2003e088

000d46c0 <setup>:
{
   d46c0:	b530      	push	{r4, r5, lr}
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d46c2:	4c5d      	ldr	r4, [pc, #372]	; (d4838 <setup+0x178>)
   d46c4:	b09f      	sub	sp, #124	; 0x7c
	delay(5000);	// Wait for serial 
   d46c6:	f241 3088 	movw	r0, #5000	; 0x1388
   d46ca:	f006 fbb1 	bl	dae30 <delay>
    initializePinModes();                           // Sets the pinModes
   d46ce:	f000 fae7 	bl	d4ca0 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   d46d2:	f000 fafd 	bl	d4cd0 <_Z18initializePowerCfgv>
    storageObjectStart();                           // Sets up the storage for system and current status in storage_objects.h
   d46d6:	f000 ffe9 	bl	d56ac <_Z18storageObjectStartv>
    particleInitialize();                           // Sets up all the Particle functions and variables defined in particle_fn.h
   d46da:	f000 fe35 	bl	d5348 <_Z18particleInitializev>
   d46de:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   d46e0:	4620      	mov	r0, r4
   d46e2:	2101      	movs	r1, #1
   d46e4:	8163      	strh	r3, [r4, #10]
   d46e6:	f001 fced 	bl	d60c4 <_ZN6AB18055setupEb>
        ab1805.resetConfig();                       // Reset the AB1805 configuration to default values
   d46ea:	2100      	movs	r1, #0
   d46ec:	4620      	mov	r0, r4
   d46ee:	f001 facb 	bl	d5c88 <_ZN6AB180511resetConfigEm>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   d46f2:	217c      	movs	r1, #124	; 0x7c
   d46f4:	4620      	mov	r0, r4
   d46f6:	f001 fa43 	bl	d5b80 <_ZN6AB18056setWDTEi>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   d46fa:	f003 fd25 	bl	d8148 <_ZN17PublishQueuePosix8instanceEv>
   d46fe:	f003 ff31 	bl	d8564 <_ZN17PublishQueuePosix5setupEv>
	initializeLoRA();								// Start the LoRA radio
   d4702:	f7ff fcf9 	bl	d40f8 <_Z14initializeLoRAv>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   d4706:	f002 fd6d 	bl	d71e4 <_ZN9LocalTime8instanceEv>
   d470a:	494c      	ldr	r1, [pc, #304]	; (d483c <setup+0x17c>)
   d470c:	4604      	mov	r4, r0
   d470e:	a808      	add	r0, sp, #32
   d4710:	f002 fbac 	bl	d6e6c <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   d4714:	a909      	add	r1, sp, #36	; 0x24
   d4716:	f104 0008 	add.w	r0, r4, #8
   d471a:	f008 feca 	bl	dd4b2 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d471e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d4720:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   d4722:	a90f      	add	r1, sp, #60	; 0x3c
   d4724:	f104 0020 	add.w	r0, r4, #32
   d4728:	f008 fec3 	bl	dd4b2 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d472c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d472e:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   d4730:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d4732:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   d4734:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d4736:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   d4738:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   d473a:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   d473c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d473e:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   d4740:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
   d4744:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   d4748:	a808      	add	r0, sp, #32
   d474a:	f002 f819 	bl	d6780 <_ZN22LocalTimePosixTimezoneD1Ev>
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d474e:	f009 f96c 	bl	dda2a <_ZN9TimeClass3nowEv>
   d4752:	4c3b      	ldr	r4, [pc, #236]	; (d4840 <setup+0x180>)
   d4754:	17c1      	asrs	r1, r0, #31
   d4756:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
	localTimeConvert_NOW.withCurrentTime().convert();  				        // Convert to local time for use later
   d475a:	4620      	mov	r0, r4
   d475c:	f002 fdba 	bl	d72d4 <_ZN16LocalTimeConvert7convertEv>
  	publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("22:59:59")));	 // Publish every 15 minutes from 6am to 10pm
   d4760:	4b38      	ldr	r3, [pc, #224]	; (d4844 <setup+0x184>)
   d4762:	4939      	ldr	r1, [pc, #228]	; (d4848 <setup+0x188>)
   d4764:	8b5d      	ldrh	r5, [r3, #26]
   d4766:	a803      	add	r0, sp, #12
   d4768:	f002 f9a4 	bl	d6ab4 <_ZN12LocalTimeHMSC1EPKc>
   d476c:	4937      	ldr	r1, [pc, #220]	; (d484c <setup+0x18c>)
   d476e:	a805      	add	r0, sp, #20
   d4770:	f002 f9a0 	bl	d6ab4 <_ZN12LocalTimeHMSC1EPKc>
   d4774:	aa05      	add	r2, sp, #20
   d4776:	a903      	add	r1, sp, #12
   d4778:	a808      	add	r0, sp, #32
   d477a:	f7ff febd 	bl	d44f8 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   d477e:	4629      	mov	r1, r5
   d4780:	aa08      	add	r2, sp, #32
   d4782:	4833      	ldr	r0, [pc, #204]	; (d4850 <setup+0x190>)
   d4784:	f003 fa4b 	bl	d7c1e <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d4788:	a808      	add	r0, sp, #32
   d478a:	f7ff fec9 	bl	d4520 <_ZN14LocalTimeRangeD1Ev>
   d478e:	a805      	add	r0, sp, #20
   d4790:	f001 ffdf 	bl	d6752 <_ZN12LocalTimeHMSD1Ev>
   d4794:	a803      	add	r0, sp, #12
   d4796:	f001 ffdc 	bl	d6752 <_ZN12LocalTimeHMSD1Ev>
  	Log.info("Startup complete at %s with battery %4.2f", localTimeConvert_NOW.format(TIME_FORMAT_ISO8601_FULL).c_str(), System.batteryCharge());
   d479a:	4b2e      	ldr	r3, [pc, #184]	; (d4854 <setup+0x194>)
   d479c:	4621      	mov	r1, r4
   d479e:	681a      	ldr	r2, [r3, #0]
   d47a0:	a808      	add	r0, sp, #32
   d47a2:	f002 fc79 	bl	d7098 <_ZN16LocalTimeConvert6formatEPKc>
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   d47a6:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d47a8:	a903      	add	r1, sp, #12
   d47aa:	2003      	movs	r0, #3
   d47ac:	9d08      	ldr	r5, [sp, #32]
    const diag_source* src = nullptr;
   d47ae:	9203      	str	r2, [sp, #12]
    const int ret = diag_get_source(id, &src, nullptr);
   d47b0:	f006 f98c 	bl	daacc <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d47b4:	2800      	cmp	r0, #0
   d47b6:	d13c      	bne.n	d4832 <setup+0x172>
        return ret;
    }
    return get(src, val);
   d47b8:	9c03      	ldr	r4, [sp, #12]
    SPARK_ASSERT(src && src->callback);
   d47ba:	b10c      	cbz	r4, d47c0 <setup+0x100>
   d47bc:	6923      	ldr	r3, [r4, #16]
   d47be:	b923      	cbnz	r3, d47ca <setup+0x10a>
   d47c0:	4a25      	ldr	r2, [pc, #148]	; (d4858 <setup+0x198>)
   d47c2:	2100      	movs	r1, #0
   d47c4:	200a      	movs	r0, #10
   d47c6:	f006 f959 	bl	daa7c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d47ca:	2300      	movs	r3, #0
   d47cc:	f8ad 3016 	strh.w	r3, [sp, #22]
   d47d0:	230c      	movs	r3, #12
   d47d2:	f8ad 3014 	strh.w	r3, [sp, #20]
   d47d6:	ab02      	add	r3, sp, #8
   d47d8:	9306      	str	r3, [sp, #24]
   d47da:	2304      	movs	r3, #4
   d47dc:	9307      	str	r3, [sp, #28]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d47de:	6923      	ldr	r3, [r4, #16]
   d47e0:	aa05      	add	r2, sp, #20
   d47e2:	2101      	movs	r1, #1
   d47e4:	4620      	mov	r0, r4
   d47e6:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d47e8:	bb18      	cbnz	r0, d4832 <setup+0x172>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d47ea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   d47ee:	ee07 3a90 	vmov	s15, r3
   d47f2:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   d47f6:	ee17 0a90 	vmov	r0, s15
   d47fa:	f009 fd71 	bl	de2e0 <__aeabi_f2d>
   d47fe:	462a      	mov	r2, r5
   d4800:	e9cd 0100 	strd	r0, r1, [sp]
   d4804:	4915      	ldr	r1, [pc, #84]	; (d485c <setup+0x19c>)
   d4806:	4816      	ldr	r0, [pc, #88]	; (d4860 <setup+0x1a0>)
   d4808:	f7ff fc5e 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d480c:	a808      	add	r0, sp, #32
   d480e:	f008 fdc9 	bl	dd3a4 <_ZN6StringD1Ev>
  	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   d4812:	4814      	ldr	r0, [pc, #80]	; (d4864 <setup+0x1a4>)
   d4814:	4914      	ldr	r1, [pc, #80]	; (d4868 <setup+0x1a8>)
   d4816:	8800      	ldrh	r0, [r0, #0]
   d4818:	2200      	movs	r2, #0
   d481a:	9200      	str	r2, [sp, #0]
   d481c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4820:	f007 f8e6 	bl	db9f0 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = LoRA_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   d4824:	4b11      	ldr	r3, [pc, #68]	; (d486c <setup+0x1ac>)
   d4826:	781a      	ldrb	r2, [r3, #0]
   d4828:	b90a      	cbnz	r2, d482e <setup+0x16e>
   d482a:	2204      	movs	r2, #4
   d482c:	701a      	strb	r2, [r3, #0]
}
   d482e:	b01f      	add	sp, #124	; 0x7c
   d4830:	bd30      	pop	{r4, r5, pc}
            return -1.0f;
   d4832:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4836:	e7de      	b.n	d47f6 <setup+0x136>
   d4838:	2003e03c 	.word	0x2003e03c
   d483c:	000df05a 	.word	0x000df05a
   d4840:	2003e088 	.word	0x2003e088
   d4844:	2003e220 	.word	0x2003e220
   d4848:	000df081 	.word	0x000df081
   d484c:	000df08a 	.word	0x000df08a
   d4850:	2003e180 	.word	0x2003e180
   d4854:	2003dc48 	.word	0x2003dc48
   d4858:	000da62d 	.word	0x000da62d
   d485c:	000df093 	.word	0x000df093
   d4860:	2003e570 	.word	0x2003e570
   d4864:	000df26e 	.word	0x000df26e
   d4868:	000d445d 	.word	0x000d445d
   d486c:	2003e1b0 	.word	0x2003e1b0

000d4870 <_Z21secondsUntilNextEventv.part.0>:
int secondsUntilNextEvent() {											// Time till next scheduled event
   d4870:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4872:	b0c1      	sub	sp, #260	; 0x104
   d4874:	f009 f8d9 	bl	dda2a <_ZN9TimeClass3nowEv>
   d4878:	4e28      	ldr	r6, [pc, #160]	; (d491c <_Z21secondsUntilNextEventv.part.0+0xac>)
        Log.info("local time: %s", localTimeConvert_NOW.format(TIME_FORMAT_DEFAULT).c_str());
   d487a:	4f29      	ldr	r7, [pc, #164]	; (d4920 <_Z21secondsUntilNextEventv.part.0+0xb0>)
   d487c:	17c1      	asrs	r1, r0, #31
   d487e:	e9c6 0118 	strd	r0, r1, [r6, #96]	; 0x60
        localTimeConvert_NOW.withCurrentTime().convert();
   d4882:	4630      	mov	r0, r6
   d4884:	f002 fd26 	bl	d72d4 <_ZN16LocalTimeConvert7convertEv>
        Log.info("local time: %s", localTimeConvert_NOW.format(TIME_FORMAT_DEFAULT).c_str());
   d4888:	683a      	ldr	r2, [r7, #0]
   d488a:	4631      	mov	r1, r6
   d488c:	a804      	add	r0, sp, #16
   d488e:	f002 fc03 	bl	d7098 <_ZN16LocalTimeConvert6formatEPKc>
   d4892:	9a04      	ldr	r2, [sp, #16]
   d4894:	4923      	ldr	r1, [pc, #140]	; (d4924 <_Z21secondsUntilNextEventv.part.0+0xb4>)
   d4896:	4824      	ldr	r0, [pc, #144]	; (d4928 <_Z21secondsUntilNextEventv.part.0+0xb8>)
   d4898:	f7ff fc16 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d489c:	a804      	add	r0, sp, #16
   d489e:	f008 fd81 	bl	dd3a4 <_ZN6StringD1Ev>
class LocalTimeConvert {
   d48a2:	2306      	movs	r3, #6
   d48a4:	a805      	add	r0, sp, #20
   d48a6:	9304      	str	r3, [sp, #16]
   d48a8:	f002 fa2e 	bl	d6d08 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d48ac:	f009 f8bd 	bl	dda2a <_ZN9TimeClass3nowEv>
   d48b0:	17c1      	asrs	r1, r0, #31
   d48b2:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
        localTimeConvert_NEXT.withCurrentTime().convert();
   d48b6:	a804      	add	r0, sp, #16
   d48b8:	f002 fd0c 	bl	d72d4 <_ZN16LocalTimeConvert7convertEv>
		if (publishSchedule.getNextScheduledTime(localTimeConvert_NEXT)) {
   d48bc:	481b      	ldr	r0, [pc, #108]	; (d492c <_Z21secondsUntilNextEventv.part.0+0xbc>)
   d48be:	a904      	add	r1, sp, #16
   d48c0:	f003 f858 	bl	d7974 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d48c4:	b340      	cbz	r0, d4918 <_Z21secondsUntilNextEventv.part.0+0xa8>
			long unsigned secondsToReturn = constrain(localTimeConvert_NEXT.time - localTimeConvert_NOW.time, 0L, 86400L);	// Constrain to positive seconds less than or equal to a day.
   d48c6:	e9d6 3118 	ldrd	r3, r1, [r6, #96]	; 0x60
   d48ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   d48cc:	1ad4      	subs	r4, r2, r3
   d48ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d48d0:	4a17      	ldr	r2, [pc, #92]	; (d4930 <_Z21secondsUntilNextEventv.part.0+0xc0>)
   d48d2:	eb63 0501 	sbc.w	r5, r3, r1
   d48d6:	42a2      	cmp	r2, r4
   d48d8:	f04f 0300 	mov.w	r3, #0
   d48dc:	eb73 0105 	sbcs.w	r1, r3, r5
   d48e0:	bfbc      	itt	lt
   d48e2:	4614      	movlt	r4, r2
   d48e4:	461d      	movlt	r5, r3
   d48e6:	2c00      	cmp	r4, #0
   d48e8:	f175 0300 	sbcs.w	r3, r5, #0
   d48ec:	bfb8      	it	lt
   d48ee:	2400      	movlt	r4, #0
        	Log.info("time of next event is: %s which is %lu seconds away", localTimeConvert_NEXT.format(TIME_FORMAT_DEFAULT).c_str(), secondsToReturn);
   d48f0:	683a      	ldr	r2, [r7, #0]
   d48f2:	a904      	add	r1, sp, #16
   d48f4:	4668      	mov	r0, sp
   d48f6:	f002 fbcf 	bl	d7098 <_ZN16LocalTimeConvert6formatEPKc>
   d48fa:	480b      	ldr	r0, [pc, #44]	; (d4928 <_Z21secondsUntilNextEventv.part.0+0xb8>)
   d48fc:	9a00      	ldr	r2, [sp, #0]
   d48fe:	490d      	ldr	r1, [pc, #52]	; (d4934 <_Z21secondsUntilNextEventv.part.0+0xc4>)
   d4900:	4623      	mov	r3, r4
   d4902:	f7ff fbe1 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d4906:	4668      	mov	r0, sp
   d4908:	f008 fd4c 	bl	dd3a4 <_ZN6StringD1Ev>
class LocalTimeConvert {
   d490c:	a805      	add	r0, sp, #20
   d490e:	f001 ff37 	bl	d6780 <_ZN22LocalTimePosixTimezoneD1Ev>
   d4912:	4620      	mov	r0, r4
   d4914:	b041      	add	sp, #260	; 0x104
   d4916:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else return 0;
   d4918:	4604      	mov	r4, r0
   d491a:	e7f7      	b.n	d490c <_Z21secondsUntilNextEventv.part.0+0x9c>
   d491c:	2003e088 	.word	0x2003e088
   d4920:	2003dc44 	.word	0x2003dc44
   d4924:	000df0bd 	.word	0x000df0bd
   d4928:	2003e570 	.word	0x2003e570
   d492c:	2003e180 	.word	0x2003e180
   d4930:	00015180 	.word	0x00015180
   d4934:	000df0cc 	.word	0x000df0cc

000d4938 <_Z21secondsUntilNextEventv>:
int secondsUntilNextEvent() {											// Time till next scheduled event
   d4938:	b508      	push	{r3, lr}
   if (Time.isValid()) {
   d493a:	f009 f859 	bl	dd9f0 <_ZN9TimeClass7isValidEv>
   d493e:	b118      	cbz	r0, d4948 <_Z21secondsUntilNextEventv+0x10>
   d4940:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4944:	f7ff bf94 	b.w	d4870 <_Z21secondsUntilNextEventv.part.0>
   d4948:	bd08      	pop	{r3, pc}
	...

000d494c <loop>:
void loop() {
   d494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (state) {
   d4950:	4ca5      	ldr	r4, [pc, #660]	; (d4be8 <loop+0x29c>)
   d4952:	7823      	ldrb	r3, [r4, #0]
   d4954:	3b02      	subs	r3, #2
void loop() {
   d4956:	b0d5      	sub	sp, #340	; 0x154
   d4958:	2b05      	cmp	r3, #5
   d495a:	f200 8083 	bhi.w	d4a64 <loop+0x118>
   d495e:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4962:	0006      	.short	0x0006
   d4964:	00900019 	.word	0x00900019
   d4968:	01790121 	.word	0x01790121
   d496c:	00d2      	.short	0x00d2
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d496e:	4b9f      	ldr	r3, [pc, #636]	; (d4bec <loop+0x2a0>)
   d4970:	781b      	ldrb	r3, [r3, #0]
   d4972:	2b02      	cmp	r3, #2
   d4974:	d001      	beq.n	d497a <loop+0x2e>
   d4976:	f7ff fde7 	bl	d4548 <_Z22publishStateTransitionv>
			if (publishSchedule.isScheduledTime()) state = LoRA_STATE;		   // See Time section in setup for schedule
   d497a:	489d      	ldr	r0, [pc, #628]	; (d4bf0 <loop+0x2a4>)
   d497c:	f003 f830 	bl	d79e0 <_ZN17LocalTimeSchedule15isScheduledTimeEv>
   d4980:	b108      	cbz	r0, d4986 <loop+0x3a>
   d4982:	2304      	movs	r3, #4
   d4984:	7023      	strb	r3, [r4, #0]
			if (userSwitchDectected) state = CONNECTING_STATE;
   d4986:	4b9b      	ldr	r3, [pc, #620]	; (d4bf4 <loop+0x2a8>)
   d4988:	781b      	ldrb	r3, [r3, #0]
   d498a:	2b00      	cmp	r3, #0
   d498c:	d06a      	beq.n	d4a64 <loop+0x118>
			if (!Particle.connected()) state = CONNECTING_STATE;                     // Now we will turn on the cellular radio and connect to Particle
   d498e:	2305      	movs	r3, #5
				if (sysStatus.lowPowerMode) state = SLEEPING_STATE;
   d4990:	7023      	strb	r3, [r4, #0]
   d4992:	e067      	b.n	d4a64 <loop+0x118>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d4994:	4b95      	ldr	r3, [pc, #596]	; (d4bec <loop+0x2a0>)
   d4996:	781b      	ldrb	r3, [r3, #0]
   d4998:	2b03      	cmp	r3, #3
   d499a:	d001      	beq.n	d49a0 <loop+0x54>
   d499c:	f7ff fdd4 	bl	d4548 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d49a0:	2100      	movs	r1, #0
   d49a2:	4895      	ldr	r0, [pc, #596]	; (d4bf8 <loop+0x2ac>)
   d49a4:	f001 f8ec 	bl	d5b80 <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent()-10;  		   		   // Subtracting ten seconds to reduce prospect of round tripping to IDLE
   d49a8:	f7ff ffc6 	bl	d4938 <_Z21secondsUntilNextEventv>
   d49ac:	f1a0 070a 	sub.w	r7, r0, #10
			Log.info("Sleep for %i seconds", wakeInSeconds);
   d49b0:	463a      	mov	r2, r7
   d49b2:	4992      	ldr	r1, [pc, #584]	; (d4bfc <loop+0x2b0>)
   d49b4:	4892      	ldr	r0, [pc, #584]	; (d4c00 <loop+0x2b4>)
   d49b6:	f7ff fb87 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
        if (valid_) {
   d49ba:	4b92      	ldr	r3, [pc, #584]	; (d4c04 <loop+0x2b8>)
   d49bc:	7d1a      	ldrb	r2, [r3, #20]
   d49be:	b10a      	cbz	r2, d49c4 <loop+0x78>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d49c0:	2202      	movs	r2, #2
   d49c2:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   d49c4:	4b90      	ldr	r3, [pc, #576]	; (d4c08 <loop+0x2bc>)
   d49c6:	488f      	ldr	r0, [pc, #572]	; (d4c04 <loop+0x2b8>)
   d49c8:	f8b3 8000 	ldrh.w	r8, [r3]
   d49cc:	2200      	movs	r2, #0
   d49ce:	4641      	mov	r1, r8
   d49d0:	f7ff fd5e 	bl	d4490 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d49d4:	7d03      	ldrb	r3, [r0, #20]
   d49d6:	4606      	mov	r6, r0
   d49d8:	b1fb      	cbz	r3, d4a1a <loop+0xce>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d49da:	6833      	ldr	r3, [r6, #0]
				.duration(wakeInSeconds * 1000L);
   d49dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d49e0:	68db      	ldr	r3, [r3, #12]
   d49e2:	4347      	muls	r7, r0
        if (!start) {
   d49e4:	b12b      	cbz	r3, d49f2 <loop+0xa6>
            if (start->type == type) {
   d49e6:	889a      	ldrh	r2, [r3, #4]
   d49e8:	2a04      	cmp	r2, #4
   d49ea:	f000 814f 	beq.w	d4c8c <loop+0x340>
            start = start->next;
   d49ee:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d49f0:	e7f8      	b.n	d49e4 <loop+0x98>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d49f2:	4986      	ldr	r1, [pc, #536]	; (d4c0c <loop+0x2c0>)
   d49f4:	2010      	movs	r0, #16
   d49f6:	f009 fb01 	bl	ddffc <_ZnwjRKSt9nothrow_t>
   d49fa:	4605      	mov	r5, r0
   d49fc:	2800      	cmp	r0, #0
   d49fe:	f000 8143 	beq.w	d4c88 <loop+0x33c>
   d4a02:	2210      	movs	r2, #16
   d4a04:	2100      	movs	r1, #0
   d4a06:	f009 ffab 	bl	de960 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4a0a:	4b81      	ldr	r3, [pc, #516]	; (d4c10 <loop+0x2c4>)
   d4a0c:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4a0e:	2304      	movs	r3, #4
   d4a10:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4a12:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   d4a14:	e9c5 3702 	strd	r3, r7, [r5, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4a18:	6135      	str	r5, [r6, #16]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   d4a1a:	497a      	ldr	r1, [pc, #488]	; (d4c04 <loop+0x2b8>)
   d4a1c:	a811      	add	r0, sp, #68	; 0x44
   d4a1e:	f008 fe6b 	bl	dd6f8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d4a22:	4875      	ldr	r0, [pc, #468]	; (d4bf8 <loop+0x2ac>)
   d4a24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d4a28:	f001 f8aa 	bl	d5b80 <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d4a2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
        if (wakeupSource_) {
   d4a2e:	b32b      	cbz	r3, d4a7c <loop+0x130>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d4a30:	889a      	ldrh	r2, [r3, #4]
   d4a32:	2a01      	cmp	r2, #1
   d4a34:	d122      	bne.n	d4a7c <loop+0x130>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d4a36:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                            // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   d4a38:	4598      	cmp	r8, r3
   d4a3a:	d10d      	bne.n	d4a58 <loop+0x10c>
				setLowPowerMode("0");                                          // We are waking the device for a reason
   d4a3c:	4975      	ldr	r1, [pc, #468]	; (d4c14 <loop+0x2c8>)
   d4a3e:	a814      	add	r0, sp, #80	; 0x50
   d4a40:	f008 fcfb 	bl	dd43a <_ZN6StringC1EPKc>
   d4a44:	a814      	add	r0, sp, #80	; 0x50
   d4a46:	f000 fa5f 	bl	d4f08 <_Z15setLowPowerMode6String>
   d4a4a:	a814      	add	r0, sp, #80	; 0x50
   d4a4c:	f008 fcaa 	bl	dd3a4 <_ZN6StringD1Ev>
				Log.info("Woke with user button - normal operations");
   d4a50:	4971      	ldr	r1, [pc, #452]	; (d4c18 <loop+0x2cc>)
   d4a52:	486b      	ldr	r0, [pc, #428]	; (d4c00 <loop+0x2b4>)
   d4a54:	f7ff fb38 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
        if (wakeupSource_) {
   d4a58:	9811      	ldr	r0, [sp, #68]	; 0x44
			state = IDLE_STATE;
   d4a5a:	2302      	movs	r3, #2
   d4a5c:	7023      	strb	r3, [r4, #0]
   d4a5e:	b108      	cbz	r0, d4a64 <loop+0x118>
            free(wakeupSource_);
   d4a60:	f006 f976 	bl	dad50 <free>
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   d4a64:	4864      	ldr	r0, [pc, #400]	; (d4bf8 <loop+0x2ac>)
   d4a66:	f001 fc0d 	bl	d6284 <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   d4a6a:	f003 fb6d 	bl	d8148 <_ZN17PublishQueuePosix8instanceEv>
   d4a6e:	f003 fa5d 	bl	d7f2c <_ZN17PublishQueuePosix4loopEv>
    storageObjectLoop();                            // Compares current system and current objects and stores if the hash changes (once / second) in storage_objects.h
   d4a72:	f000 fda5 	bl	d55c0 <_Z17storageObjectLoopv>
}
   d4a76:	b055      	add	sp, #340	; 0x154
   d4a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return std::numeric_limits<pin_t>::max();
   d4a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4a80:	e7da      	b.n	d4a38 <loop+0xec>
			if (state != oldState) {
   d4a82:	4b5a      	ldr	r3, [pc, #360]	; (d4bec <loop+0x2a0>)
   d4a84:	4d65      	ldr	r5, [pc, #404]	; (d4c1c <loop+0x2d0>)
   d4a86:	781b      	ldrb	r3, [r3, #0]
   d4a88:	2b04      	cmp	r3, #4
   d4a8a:	d00a      	beq.n	d4aa2 <loop+0x156>
				publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d4a8c:	f7ff fd5c 	bl	d4548 <_Z22publishStateTransitionv>
   d4a90:	f005 fdd4 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
				Log.info("In the LoRA state with a frequency of %u minutes", sysStatus.frequencyMinutes);
   d4a94:	4b62      	ldr	r3, [pc, #392]	; (d4c20 <loop+0x2d4>)
				startLoRAWindow = millis();               // Mark when we enter this state - for timeouts
   d4a96:	6028      	str	r0, [r5, #0]
				Log.info("In the LoRA state with a frequency of %u minutes", sysStatus.frequencyMinutes);
   d4a98:	8b5a      	ldrh	r2, [r3, #26]
   d4a9a:	4962      	ldr	r1, [pc, #392]	; (d4c24 <loop+0x2d8>)
   d4a9c:	4858      	ldr	r0, [pc, #352]	; (d4c00 <loop+0x2b4>)
   d4a9e:	f7ff fb13 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
			if (listenForLoRAMessage()) {
   d4aa2:	f7ff fc55 	bl	d4350 <_Z20listenForLoRAMessagev>
   d4aa6:	b328      	cbz	r0, d4af4 <loop+0x1a8>
				if (frequencyUpdated) {              // If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   d4aa8:	4b5f      	ldr	r3, [pc, #380]	; (d4c28 <loop+0x2dc>)
   d4aaa:	781a      	ldrb	r2, [r3, #0]
   d4aac:	b1f2      	cbz	r2, d4aec <loop+0x1a0>
					frequencyUpdated = false;
   d4aae:	2200      	movs	r2, #0
   d4ab0:	701a      	strb	r2, [r3, #0]
					publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("21:59:59")));	 // Publish every 15 minutes from 6am to 10pm
   d4ab2:	4b5b      	ldr	r3, [pc, #364]	; (d4c20 <loop+0x2d4>)
   d4ab4:	495d      	ldr	r1, [pc, #372]	; (d4c2c <loop+0x2e0>)
   d4ab6:	8b5e      	ldrh	r6, [r3, #26]
   d4ab8:	a80f      	add	r0, sp, #60	; 0x3c
   d4aba:	f001 fffb 	bl	d6ab4 <_ZN12LocalTimeHMSC1EPKc>
   d4abe:	495c      	ldr	r1, [pc, #368]	; (d4c30 <loop+0x2e4>)
   d4ac0:	a811      	add	r0, sp, #68	; 0x44
   d4ac2:	f001 fff7 	bl	d6ab4 <_ZN12LocalTimeHMSC1EPKc>
   d4ac6:	aa11      	add	r2, sp, #68	; 0x44
   d4ac8:	a90f      	add	r1, sp, #60	; 0x3c
   d4aca:	a814      	add	r0, sp, #80	; 0x50
   d4acc:	f7ff fd14 	bl	d44f8 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   d4ad0:	aa14      	add	r2, sp, #80	; 0x50
   d4ad2:	4631      	mov	r1, r6
   d4ad4:	4846      	ldr	r0, [pc, #280]	; (d4bf0 <loop+0x2a4>)
   d4ad6:	f003 f8a2 	bl	d7c1e <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d4ada:	a814      	add	r0, sp, #80	; 0x50
   d4adc:	f7ff fd20 	bl	d4520 <_ZN14LocalTimeRangeD1Ev>
   d4ae0:	a811      	add	r0, sp, #68	; 0x44
   d4ae2:	f001 fe36 	bl	d6752 <_ZN12LocalTimeHMSD1Ev>
   d4ae6:	a80f      	add	r0, sp, #60	; 0x3c
   d4ae8:	f001 fe33 	bl	d6752 <_ZN12LocalTimeHMSD1Ev>
				sendLoRAMessage();					// Here we send our response based on the type of message received.
   d4aec:	f7ff fbd2 	bl	d4294 <_Z15sendLoRAMessagev>
				state = REPORTING_STATE;
   d4af0:	2307      	movs	r3, #7
   d4af2:	7023      	strb	r3, [r4, #0]
   d4af4:	f005 fda2 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - startLoRAWindow) > 300000L) state = CONNECTING_STATE;	// This is a fail safe to make sure an off-line client won't prevent gatewat from checking in - and setting its clock
   d4af8:	682b      	ldr	r3, [r5, #0]
   d4afa:	1ac0      	subs	r0, r0, r3
   d4afc:	4b4d      	ldr	r3, [pc, #308]	; (d4c34 <loop+0x2e8>)
   d4afe:	4298      	cmp	r0, r3
   d4b00:	f63f af45 	bhi.w	d498e <loop+0x42>
   d4b04:	e7ae      	b.n	d4a64 <loop+0x118>
			if (state != oldState) publishStateTransition();
   d4b06:	4b39      	ldr	r3, [pc, #228]	; (d4bec <loop+0x2a0>)
   d4b08:	781b      	ldrb	r3, [r3, #0]
   d4b0a:	2b07      	cmp	r3, #7
   d4b0c:	d001      	beq.n	d4b12 <loop+0x1c6>
   d4b0e:	f7ff fd1b 	bl	d4548 <_Z22publishStateTransitionv>
  			snprintf(data, sizeof(data), "{\"nodeid\":%u, \"hourly\":%u, \"daily\":%u,\"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"alerts\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",sysStatus.nodeNumber, current.hourly, current.daily, current.stateOfCharge, batteryContext[current.batteryState], current.internalTempC, sysStatus.resetCount, sysStatus.lastAlertCode, current.rssi, current.messageNumber, Time.now());
   d4b12:	4949      	ldr	r1, [pc, #292]	; (d4c38 <loop+0x2ec>)
   d4b14:	4d42      	ldr	r5, [pc, #264]	; (d4c20 <loop+0x2d4>)
   d4b16:	7a08      	ldrb	r0, [r1, #8]
   d4b18:	4a48      	ldr	r2, [pc, #288]	; (d4c3c <loop+0x2f0>)
   d4b1a:	886b      	ldrh	r3, [r5, #2]
   d4b1c:	8bce      	ldrh	r6, [r1, #30]
   d4b1e:	f8b1 801c 	ldrh.w	r8, [r1, #28]
   d4b22:	684f      	ldr	r7, [r1, #4]
   d4b24:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   d4b28:	f891 9000 	ldrb.w	r9, [r1]
   d4b2c:	f8b1 a018 	ldrh.w	sl, [r1, #24]
   d4b30:	930d      	str	r3, [sp, #52]	; 0x34
   d4b32:	7e89      	ldrb	r1, [r1, #26]
   d4b34:	68eb      	ldr	r3, [r5, #12]
   d4b36:	f895 b01c 	ldrb.w	fp, [r5, #28]
   d4b3a:	920c      	str	r2, [sp, #48]	; 0x30
   d4b3c:	930a      	str	r3, [sp, #40]	; 0x28
   d4b3e:	910b      	str	r1, [sp, #44]	; 0x2c
   d4b40:	f008 ff73 	bl	dda2a <_ZN9TimeClass3nowEv>
   d4b44:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d4b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4b48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d4b4a:	9009      	str	r0, [sp, #36]	; 0x24
   d4b4c:	e9cd a107 	strd	sl, r1, [sp, #28]
   d4b50:	e9cd 9304 	strd	r9, r3, [sp, #16]
   d4b54:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4b58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4b5a:	f8cd b018 	str.w	fp, [sp, #24]
   d4b5e:	e9cd 7202 	strd	r7, r2, [sp, #8]
   d4b62:	e9cd 8600 	strd	r8, r6, [sp]
   d4b66:	4a36      	ldr	r2, [pc, #216]	; (d4c40 <loop+0x2f4>)
   d4b68:	a814      	add	r0, sp, #80	; 0x50
   d4b6a:	f006 f911 	bl	dad90 <snprintf>
  			PublishQueuePosix::instance().publish("Ubidots-LoRA-Hook-v1", data, PRIVATE | WITH_ACK);
   d4b6e:	f003 faeb 	bl	d8148 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d4b72:	4b34      	ldr	r3, [pc, #208]	; (d4c44 <loop+0x2f8>)
   d4b74:	4a34      	ldr	r2, [pc, #208]	; (d4c48 <loop+0x2fc>)
   d4b76:	781b      	ldrb	r3, [r3, #0]
   d4b78:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4b7a:	2100      	movs	r1, #0
   d4b7c:	4313      	orrs	r3, r2
   d4b7e:	6802      	ldr	r2, [r0, #0]
   d4b80:	f88d 1004 	strb.w	r1, [sp, #4]
   d4b84:	f88d 3000 	strb.w	r3, [sp]
   d4b88:	6816      	ldr	r6, [r2, #0]
   d4b8a:	4930      	ldr	r1, [pc, #192]	; (d4c4c <loop+0x300>)
   d4b8c:	233c      	movs	r3, #60	; 0x3c
   d4b8e:	aa14      	add	r2, sp, #80	; 0x50
   d4b90:	47b0      	blx	r6
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4b92:	f006 f835 	bl	dac00 <spark_cloud_flag_connected>
			if (!Particle.connected()) state = CONNECTING_STATE;                     // Now we will turn on the cellular radio and connect to Particle
   d4b96:	2800      	cmp	r0, #0
   d4b98:	f43f aef9 	beq.w	d498e <loop+0x42>
				if(Particle.connected() && !sysStatus.lowPowerMode) state = IDLE_STATE;	// We are connected and not low power - stay connected
   d4b9c:	7a2b      	ldrb	r3, [r5, #8]
   d4b9e:	b9c3      	cbnz	r3, d4bd2 <loop+0x286>
   d4ba0:	2302      	movs	r3, #2
   d4ba2:	e6f5      	b.n	d4990 <loop+0x44>
			if (state != oldState) {
   d4ba4:	4b11      	ldr	r3, [pc, #68]	; (d4bec <loop+0x2a0>)
   d4ba6:	781b      	ldrb	r3, [r3, #0]
   d4ba8:	2b05      	cmp	r3, #5
   d4baa:	d007      	beq.n	d4bbc <loop+0x270>
				publishStateTransition();  
   d4bac:	f7ff fccc 	bl	d4548 <_Z22publishStateTransitionv>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4bb0:	f006 f81e 	bl	dabf0 <spark_cloud_flag_connect>
   d4bb4:	f005 fd42 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   d4bb8:	4b25      	ldr	r3, [pc, #148]	; (d4c50 <loop+0x304>)
   d4bba:	6018      	str	r0, [r3, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4bbc:	f006 f820 	bl	dac00 <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout 
   d4bc0:	b148      	cbz	r0, d4bd6 <loop+0x28a>
				sysStatus.lastConnection = Time.now();
   d4bc2:	f008 ff32 	bl	dda2a <_ZN9TimeClass3nowEv>
   d4bc6:	4d16      	ldr	r5, [pc, #88]	; (d4c20 <loop+0x2d4>)
   d4bc8:	6168      	str	r0, [r5, #20]
   d4bca:	f006 f819 	bl	dac00 <spark_cloud_flag_connected>
				if(Particle.connected() && !sysStatus.lowPowerMode) state = IDLE_STATE;	// We are connected and not low power - stay connected
   d4bce:	2800      	cmp	r0, #0
   d4bd0:	d1e4      	bne.n	d4b9c <loop+0x250>
				else state = DISCONNECTING_STATE;										// Typically, we will disconnect and sleep to save power
   d4bd2:	2306      	movs	r3, #6
   d4bd4:	e6dc      	b.n	d4990 <loop+0x44>
   d4bd6:	f005 fd31 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout 
   d4bda:	4b1d      	ldr	r3, [pc, #116]	; (d4c50 <loop+0x304>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	1ac0      	subs	r0, r0, r3
   d4be0:	4b14      	ldr	r3, [pc, #80]	; (d4c34 <loop+0x2e8>)
   d4be2:	4298      	cmp	r0, r3
   d4be4:	d8ed      	bhi.n	d4bc2 <loop+0x276>
   d4be6:	e73d      	b.n	d4a64 <loop+0x118>
   d4be8:	2003e1b0 	.word	0x2003e1b0
   d4bec:	2003e178 	.word	0x2003e178
   d4bf0:	2003e180 	.word	0x2003e180
   d4bf4:	2003e1b1 	.word	0x2003e1b1
   d4bf8:	2003e03c 	.word	0x2003e03c
   d4bfc:	000df100 	.word	0x000df100
   d4c00:	2003e570 	.word	0x2003e570
   d4c04:	2003e05c 	.word	0x2003e05c
   d4c08:	000df26e 	.word	0x000df26e
   d4c0c:	000e0310 	.word	0x000e0310
   d4c10:	00030010 	.word	0x00030010
   d4c14:	000df938 	.word	0x000df938
   d4c18:	000df115 	.word	0x000df115
   d4c1c:	2003e030 	.word	0x2003e030
   d4c20:	2003e220 	.word	0x2003e220
   d4c24:	000df13f 	.word	0x000df13f
   d4c28:	2003e1c1 	.word	0x2003e1c1
   d4c2c:	000df081 	.word	0x000df081
   d4c30:	000df170 	.word	0x000df170
   d4c34:	000493e0 	.word	0x000493e0
   d4c38:	2003e200 	.word	0x2003e200
   d4c3c:	2003dbd0 	.word	0x2003dbd0
   d4c40:	000df179 	.word	0x000df179
   d4c44:	2003e022 	.word	0x2003e022
   d4c48:	2003e021 	.word	0x2003e021
   d4c4c:	000df204 	.word	0x000df204
   d4c50:	2003e034 	.word	0x2003e034
			if (state != oldState) {
   d4c54:	4b0e      	ldr	r3, [pc, #56]	; (d4c90 <loop+0x344>)
   d4c56:	4d0f      	ldr	r5, [pc, #60]	; (d4c94 <loop+0x348>)
   d4c58:	781b      	ldrb	r3, [r3, #0]
   d4c5a:	2b06      	cmp	r3, #6
   d4c5c:	d004      	beq.n	d4c68 <loop+0x31c>
				publishStateTransition(); 
   d4c5e:	f7ff fc73 	bl	d4548 <_Z22publishStateTransitionv>
   d4c62:	f005 fceb 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   d4c66:	6028      	str	r0, [r5, #0]
   d4c68:	f005 fce8 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stayConnectedWindow > 90000) {							// Stay on-line for 90 seconds
   d4c6c:	682b      	ldr	r3, [r5, #0]
   d4c6e:	1ac0      	subs	r0, r0, r3
   d4c70:	4b09      	ldr	r3, [pc, #36]	; (d4c98 <loop+0x34c>)
   d4c72:	4298      	cmp	r0, r3
   d4c74:	f67f aef6 	bls.w	d4a64 <loop+0x118>
				disconnectFromParticle();
   d4c78:	f000 fac0 	bl	d51fc <_Z22disconnectFromParticlev>
				if (sysStatus.lowPowerMode) state = SLEEPING_STATE;
   d4c7c:	4b07      	ldr	r3, [pc, #28]	; (d4c9c <loop+0x350>)
   d4c7e:	7a1b      	ldrb	r3, [r3, #8]
   d4c80:	2b00      	cmp	r3, #0
   d4c82:	d08d      	beq.n	d4ba0 <loop+0x254>
   d4c84:	2303      	movs	r3, #3
   d4c86:	e683      	b.n	d4990 <loop+0x44>
                valid_ = false;
   d4c88:	7530      	strb	r0, [r6, #20]
                return *this;
   d4c8a:	e6c6      	b.n	d4a1a <loop+0xce>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4c8c:	60df      	str	r7, [r3, #12]
                return *this;
   d4c8e:	e6c4      	b.n	d4a1a <loop+0xce>
   d4c90:	2003e178 	.word	0x2003e178
   d4c94:	2003e038 	.word	0x2003e038
   d4c98:	00015f90 	.word	0x00015f90
   d4c9c:	2003e220 	.word	0x2003e220

000d4ca0 <_Z18initializePinModesv>:
const pin_t TMP36_SENSE_PIN   = A4;
const pin_t BUTTON_PIN        = D4;
const pin_t BLUE_LED          = D7;
const pin_t WAKEUP_PIN        = D8;

bool initializePinModes() {
   d4ca0:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   d4ca2:	4909      	ldr	r1, [pc, #36]	; (d4cc8 <_Z18initializePinModesv+0x28>)
   d4ca4:	4809      	ldr	r0, [pc, #36]	; (d4ccc <_Z18initializePinModesv+0x2c>)
   d4ca6:	f7ff fa0f 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   d4caa:	2102      	movs	r1, #2
   d4cac:	2004      	movs	r0, #4
   d4cae:	f009 f8d5 	bl	dde5c <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   d4cb2:	2100      	movs	r1, #0
   d4cb4:	2008      	movs	r0, #8
   d4cb6:	f009 f8d1 	bl	dde5c <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   d4cba:	2101      	movs	r1, #1
   d4cbc:	2007      	movs	r0, #7
   d4cbe:	f009 f8cd 	bl	dde5c <pinMode>
    return true;
}
   d4cc2:	2001      	movs	r0, #1
   d4cc4:	bd08      	pop	{r3, pc}
   d4cc6:	bf00      	nop
   d4cc8:	000df238 	.word	0x000df238
   d4ccc:	2003e570 	.word	0x2003e570

000d4cd0 <_Z18initializePowerCfgv>:

bool initializePowerCfg() {
   d4cd0:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   d4cd2:	4918      	ldr	r1, [pc, #96]	; (d4d34 <_Z18initializePowerCfgv+0x64>)
   d4cd4:	4818      	ldr	r0, [pc, #96]	; (d4d38 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   d4cd6:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d4cd8:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   d4cda:	f7ff f9f5 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d4cde:	4622      	mov	r2, r4
   d4ce0:	2100      	movs	r1, #0
   d4ce2:	4668      	mov	r0, sp
   d4ce4:	f009 fe3c 	bl	de960 <memset>
   d4ce8:	4622      	mov	r2, r4
   d4cea:	2100      	movs	r1, #0
   d4cec:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4cf0:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   d4cf4:	f009 fe34 	bl	de960 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   d4cf8:	2100      	movs	r1, #0
   d4cfa:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4cfe:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d4d02:	f005 ff49 	bl	dab98 <system_power_management_set_config>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4d06:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d4d0a:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4d0e:	4b0b      	ldr	r3, [pc, #44]	; (d4d3c <_Z18initializePowerCfgv+0x6c>)
   d4d10:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4d12:	f241 0370 	movw	r3, #4208	; 0x1070
   d4d16:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4d1a:	9b00      	ldr	r3, [sp, #0]
   d4d1c:	2100      	movs	r1, #0
   d4d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4d22:	4668      	mov	r0, sp
   d4d24:	9300      	str	r3, [sp, #0]
   d4d26:	f005 ff37 	bl	dab98 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   d4d2a:	3800      	subs	r0, #0
   d4d2c:	bf18      	it	ne
   d4d2e:	2001      	movne	r0, #1
   d4d30:	b010      	add	sp, #64	; 0x40
   d4d32:	bd10      	pop	{r4, pc}
   d4d34:	000df251 	.word	0x000df251
   d4d38:	2003e570 	.word	0x2003e570
   d4d3c:	03840384 	.word	0x03840384

000d4d40 <_ZN5spark10LogHandler5writeEPKcj>:
}
   d4d40:	4770      	bx	lr

000d4d42 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   d4d42:	6a00      	ldr	r0, [r0, #32]
   d4d44:	6803      	ldr	r3, [r0, #0]
   d4d46:	68db      	ldr	r3, [r3, #12]
   d4d48:	4718      	bx	r3
	...

000d4d4c <_Z15reportFrequencyv>:
/**
 * @brief Particle cacluated variable
 * 
 * @return String with the number of minutes for reporting frequency
 */
String reportFrequency() {							// Calculated variavble for the report frequency which is an unint16_t and does nto display properly.
   d4d4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    char reportStr[16];
    snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.frequencyMinutes);
   d4d4e:	4b07      	ldr	r3, [pc, #28]	; (d4d6c <_Z15reportFrequencyv+0x20>)
   d4d50:	4a07      	ldr	r2, [pc, #28]	; (d4d70 <_Z15reportFrequencyv+0x24>)
   d4d52:	8b5b      	ldrh	r3, [r3, #26]
String reportFrequency() {							// Calculated variavble for the report frequency which is an unint16_t and does nto display properly.
   d4d54:	4604      	mov	r4, r0
    snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.frequencyMinutes);
   d4d56:	2110      	movs	r1, #16
   d4d58:	4668      	mov	r0, sp
   d4d5a:	f006 f819 	bl	dad90 <snprintf>
    return reportStr;
   d4d5e:	4669      	mov	r1, sp
   d4d60:	4620      	mov	r0, r4
   d4d62:	f008 fb6a 	bl	dd43a <_ZN6StringC1EPKc>
}
   d4d66:	4620      	mov	r0, r4
   d4d68:	b004      	add	sp, #16
   d4d6a:	bd10      	pop	{r4, pc}
   d4d6c:	2003e220 	.word	0x2003e220
   d4d70:	000df276 	.word	0x000df276

000d4d74 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d4d74:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4d76:	2000      	movs	r0, #0
   d4d78:	f005 ff5a 	bl	dac30 <spark_sync_time_pending>
   d4d7c:	b128      	cbz	r0, d4d8a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4d7e:	f005 ff3f 	bl	dac00 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4d82:	f080 0001 	eor.w	r0, r0, #1
   d4d86:	b2c0      	uxtb	r0, r0
    }
   d4d88:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4d8a:	2001      	movs	r0, #1
   d4d8c:	e7fc      	b.n	d4d88 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d4d90 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4d90:	b530      	push	{r4, r5, lr}
   d4d92:	b085      	sub	sp, #20
   d4d94:	4603      	mov	r3, r0
   d4d96:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   d4d98:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4d9a:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   d4d9c:	4798      	blx	r3
        size = str.length();
   d4d9e:	9802      	ldr	r0, [sp, #8]
   d4da0:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   d4da2:	f005 ffcd 	bl	dad40 <malloc>
   d4da6:	6028      	str	r0, [r5, #0]
        if (!data) {
   d4da8:	b150      	cbz	r0, d4dc0 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   d4daa:	6822      	ldr	r2, [r4, #0]
   d4dac:	9900      	ldr	r1, [sp, #0]
   d4dae:	f009 fdaf 	bl	de910 <memcpy>
        return 0;
   d4db2:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   d4db4:	4668      	mov	r0, sp
   d4db6:	f008 faf5 	bl	dd3a4 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4dba:	4620      	mov	r0, r4
   d4dbc:	b005      	add	sp, #20
   d4dbe:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   d4dc0:	4c00      	ldr	r4, [pc, #0]	; (d4dc4 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   d4dc2:	e7f7      	b.n	d4db4 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   d4dc4:	fffffefc 	.word	0xfffffefc

000d4dc8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4dc8:	4b0a      	ldr	r3, [pc, #40]	; (d4df4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4dca:	b510      	push	{r4, lr}
   d4dcc:	4604      	mov	r4, r0
   d4dce:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4dd0:	f007 f9ea 	bl	dc1a8 <_ZN5spark10LogManager8instanceEv>
   d4dd4:	4621      	mov	r1, r4
   d4dd6:	f007 fbac 	bl	dc532 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4dda:	f008 ff27 	bl	ddc2c <_Z16_fetch_usbserialv>
   d4dde:	f008 ff19 	bl	ddc14 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4de2:	4620      	mov	r0, r4
   d4de4:	4b04      	ldr	r3, [pc, #16]	; (d4df8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4de6:	f840 3b04 	str.w	r3, [r0], #4
   d4dea:	f007 fa8f 	bl	dc30c <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4dee:	4620      	mov	r0, r4
   d4df0:	bd10      	pop	{r4, pc}
   d4df2:	bf00      	nop
   d4df4:	000df53c 	.word	0x000df53c
   d4df8:	000df524 	.word	0x000df524

000d4dfc <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4dfc:	b510      	push	{r4, lr}
   d4dfe:	4604      	mov	r4, r0
    }
   d4e00:	f7ff ffe2 	bl	d4dc8 <_ZN5spark16SerialLogHandlerD1Ev>
   d4e04:	4620      	mov	r0, r4
   d4e06:	2124      	movs	r1, #36	; 0x24
   d4e08:	f009 f8f6 	bl	ddff8 <_ZdlPvj>
   d4e0c:	4620      	mov	r0, r4
   d4e0e:	bd10      	pop	{r4, pc}

000d4e10 <_ZN10CloudClass9keepAliveEj>:
    inline static void keepAlive(unsigned sec)
   d4e10:	b507      	push	{r0, r1, r2, lr}
        conn_prop.size = sizeof(conn_prop);
   d4e12:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d4e14:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d4e16:	f8ad 2000 	strh.w	r2, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4e1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4e1e:	2201      	movs	r2, #1
   d4e20:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4e22:	4341      	muls	r1, r0
   d4e24:	466a      	mov	r2, sp
   d4e26:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d4e28:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4e2c:	f005 ff10 	bl	dac50 <spark_set_connection_property>
    }
   d4e30:	b003      	add	sp, #12
   d4e32:	f85d fb04 	ldr.w	pc, [sp], #4

000d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4e36:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d4e38:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4e3a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4e3c:	b17c      	cbz	r4, d4e5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4e3e:	6863      	ldr	r3, [r4, #4]
   d4e40:	3b01      	subs	r3, #1
   d4e42:	6063      	str	r3, [r4, #4]
   d4e44:	b95b      	cbnz	r3, d4e5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4e46:	6823      	ldr	r3, [r4, #0]
   d4e48:	4620      	mov	r0, r4
   d4e4a:	689b      	ldr	r3, [r3, #8]
   d4e4c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4e4e:	68a3      	ldr	r3, [r4, #8]
   d4e50:	3b01      	subs	r3, #1
   d4e52:	60a3      	str	r3, [r4, #8]
   d4e54:	b91b      	cbnz	r3, d4e5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4e56:	6823      	ldr	r3, [r4, #0]
   d4e58:	4620      	mov	r0, r4
   d4e5a:	68db      	ldr	r3, [r3, #12]
   d4e5c:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4e5e:	4628      	mov	r0, r5
   d4e60:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4e64 <_Z12setFrequency6String.part.0>:
 * @param command A string indicating the number of minutes between reporting events.  Note, this function
 * sets an interim value for reporting frequency which takes effect once sent to a new node.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setFrequency(String command)
   d4e64:	b500      	push	{lr}
  sysStatus.frequencyMinutes = tempTime;
  if (sysStatus.frequencyMinutes < 12 && sysStatus.lowPowerMode) {
    Log.info("Short reporting frequency over-rides low power");
    sysStatus.lowPowerMode = false;
  }
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
   d4e66:	4b12      	ldr	r3, [pc, #72]	; (d4eb0 <_Z12setFrequency6String.part.0+0x4c>)
   d4e68:	2201      	movs	r2, #1
   d4e6a:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",sysStatus.frequencyMinutes);
   d4e6c:	4b11      	ldr	r3, [pc, #68]	; (d4eb4 <_Z12setFrequency6String.part.0+0x50>)
   d4e6e:	4a12      	ldr	r2, [pc, #72]	; (d4eb8 <_Z12setFrequency6String.part.0+0x54>)
   d4e70:	8b5b      	ldrh	r3, [r3, #26]
int setFrequency(String command)
   d4e72:	b0c5      	sub	sp, #276	; 0x114
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",sysStatus.frequencyMinutes);
   d4e74:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4e78:	a804      	add	r0, sp, #16
   d4e7a:	f005 ff89 	bl	dad90 <snprintf>
  Log.info(data);
   d4e7e:	480f      	ldr	r0, [pc, #60]	; (d4ebc <_Z12setFrequency6String.part.0+0x58>)
   d4e80:	a904      	add	r1, sp, #16
   d4e82:	f7ff f921 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4e86:	f005 febb 	bl	dac00 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4e8a:	b160      	cbz	r0, d4ea6 <_Z12setFrequency6String.part.0+0x42>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4e8c:	4b0c      	ldr	r3, [pc, #48]	; (d4ec0 <_Z12setFrequency6String.part.0+0x5c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4e8e:	490d      	ldr	r1, [pc, #52]	; (d4ec4 <_Z12setFrequency6String.part.0+0x60>)
   d4e90:	781b      	ldrb	r3, [r3, #0]
   d4e92:	f88d 3000 	strb.w	r3, [sp]
   d4e96:	a802      	add	r0, sp, #8
   d4e98:	233c      	movs	r3, #60	; 0x3c
   d4e9a:	aa04      	add	r2, sp, #16
   d4e9c:	f006 fa8c 	bl	db3b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ea0:	a803      	add	r0, sp, #12
   d4ea2:	f7ff ffc8 	bl	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
}
   d4ea6:	2001      	movs	r0, #1
   d4ea8:	b045      	add	sp, #276	; 0x114
   d4eaa:	f85d fb04 	ldr.w	pc, [sp], #4
   d4eae:	bf00      	nop
   d4eb0:	2003e1c1 	.word	0x2003e1c1
   d4eb4:	2003e220 	.word	0x2003e220
   d4eb8:	000df281 	.word	0x000df281
   d4ebc:	2003e570 	.word	0x2003e570
   d4ec0:	2003e1c0 	.word	0x2003e1c0
   d4ec4:	000df2c1 	.word	0x000df2c1

000d4ec8 <_Z12setFrequency6String>:
{
   d4ec8:	b513      	push	{r0, r1, r4, lr}
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4eca:	220a      	movs	r2, #10
   d4ecc:	6800      	ldr	r0, [r0, #0]
   d4ece:	a901      	add	r1, sp, #4
   d4ed0:	f009 fed4 	bl	dec7c <strtol>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4ed4:	2878      	cmp	r0, #120	; 0x78
   d4ed6:	d80f      	bhi.n	d4ef8 <_Z12setFrequency6String+0x30>
  sysStatus.frequencyMinutes = tempTime;
   d4ed8:	4c08      	ldr	r4, [pc, #32]	; (d4efc <_Z12setFrequency6String+0x34>)
  if (sysStatus.frequencyMinutes < 12 && sysStatus.lowPowerMode) {
   d4eda:	280b      	cmp	r0, #11
  sysStatus.frequencyMinutes = tempTime;
   d4edc:	8360      	strh	r0, [r4, #26]
  if (sysStatus.frequencyMinutes < 12 && sysStatus.lowPowerMode) {
   d4ede:	dc07      	bgt.n	d4ef0 <_Z12setFrequency6String+0x28>
   d4ee0:	7a23      	ldrb	r3, [r4, #8]
   d4ee2:	b12b      	cbz	r3, d4ef0 <_Z12setFrequency6String+0x28>
    Log.info("Short reporting frequency over-rides low power");
   d4ee4:	4906      	ldr	r1, [pc, #24]	; (d4f00 <_Z12setFrequency6String+0x38>)
   d4ee6:	4807      	ldr	r0, [pc, #28]	; (d4f04 <_Z12setFrequency6String+0x3c>)
   d4ee8:	f7ff f8ee 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.lowPowerMode = false;
   d4eec:	2300      	movs	r3, #0
   d4eee:	7223      	strb	r3, [r4, #8]
   d4ef0:	f7ff ffb8 	bl	d4e64 <_Z12setFrequency6String.part.0>
}
   d4ef4:	b002      	add	sp, #8
   d4ef6:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4ef8:	2000      	movs	r0, #0
   d4efa:	e7fb      	b.n	d4ef4 <_Z12setFrequency6String+0x2c>
   d4efc:	2003e220 	.word	0x2003e220
   d4f00:	000df2c6 	.word	0x000df2c6
   d4f04:	2003e570 	.word	0x2003e570

000d4f08 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4f08:	b530      	push	{r4, r5, lr}
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4f0a:	4922      	ldr	r1, [pc, #136]	; (d4f94 <_Z15setLowPowerMode6String+0x8c>)
   d4f0c:	b095      	sub	sp, #84	; 0x54
   d4f0e:	4604      	mov	r4, r0
   d4f10:	f008 fb4c 	bl	dd5ac <_ZNK6String6equalsEPKc>
  char data[64];
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4f14:	b138      	cbz	r0, d4f26 <_Z15setLowPowerMode6String+0x1e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4f16:	4620      	mov	r0, r4
   d4f18:	491e      	ldr	r1, [pc, #120]	; (d4f94 <_Z15setLowPowerMode6String+0x8c>)
   d4f1a:	4c1f      	ldr	r4, [pc, #124]	; (d4f98 <_Z15setLowPowerMode6String+0x90>)
   d4f1c:	f008 fb46 	bl	dd5ac <_ZNK6String6equalsEPKc>
  if (command == "1") {                                               // Command calls for enabling sleep
   d4f20:	b948      	cbnz	r0, d4f36 <_Z15setLowPowerMode6String+0x2e>
      sysStatus.frequencyMinutes = 12;
      frequencyUpdated = true;
    }
  }
  else {                                                             // Command calls for disabling sleep
    sysStatus.lowPowerMode = false;
   d4f22:	7220      	strb	r0, [r4, #8]
   d4f24:	e033      	b.n	d4f8e <_Z15setLowPowerMode6String+0x86>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4f26:	491d      	ldr	r1, [pc, #116]	; (d4f9c <_Z15setLowPowerMode6String+0x94>)
   d4f28:	4620      	mov	r0, r4
   d4f2a:	f008 fb3f 	bl	dd5ac <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4f2e:	2800      	cmp	r0, #0
   d4f30:	d1f1      	bne.n	d4f16 <_Z15setLowPowerMode6String+0xe>
  Log.info(data);
  if (Particle.connected()) {
    Particle.publish("Mode",data, PRIVATE);
  }
  return 1;
}
   d4f32:	b015      	add	sp, #84	; 0x54
   d4f34:	bd30      	pop	{r4, r5, pc}
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   d4f36:	8b63      	ldrh	r3, [r4, #26]
    sysStatus.lowPowerMode = true;
   d4f38:	2501      	movs	r5, #1
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   d4f3a:	2b0b      	cmp	r3, #11
    sysStatus.lowPowerMode = true;
   d4f3c:	7225      	strb	r5, [r4, #8]
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   d4f3e:	d91b      	bls.n	d4f78 <_Z15setLowPowerMode6String+0x70>
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.lowPowerMode) ? "yes" : "no");
   d4f40:	4b17      	ldr	r3, [pc, #92]	; (d4fa0 <_Z15setLowPowerMode6String+0x98>)
   d4f42:	4a18      	ldr	r2, [pc, #96]	; (d4fa4 <_Z15setLowPowerMode6String+0x9c>)
   d4f44:	2140      	movs	r1, #64	; 0x40
   d4f46:	a804      	add	r0, sp, #16
   d4f48:	f005 ff22 	bl	dad90 <snprintf>
  Log.info(data);
   d4f4c:	4816      	ldr	r0, [pc, #88]	; (d4fa8 <_Z15setLowPowerMode6String+0xa0>)
   d4f4e:	a904      	add	r1, sp, #16
   d4f50:	f7ff f8ba 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f54:	f005 fe54 	bl	dac00 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4f58:	b160      	cbz	r0, d4f74 <_Z15setLowPowerMode6String+0x6c>
   d4f5a:	4b14      	ldr	r3, [pc, #80]	; (d4fac <_Z15setLowPowerMode6String+0xa4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4f5c:	4914      	ldr	r1, [pc, #80]	; (d4fb0 <_Z15setLowPowerMode6String+0xa8>)
   d4f5e:	781b      	ldrb	r3, [r3, #0]
   d4f60:	f88d 3000 	strb.w	r3, [sp]
   d4f64:	a802      	add	r0, sp, #8
   d4f66:	233c      	movs	r3, #60	; 0x3c
   d4f68:	aa04      	add	r2, sp, #16
   d4f6a:	f006 fa25 	bl	db3b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4f6e:	a803      	add	r0, sp, #12
   d4f70:	f7ff ff61 	bl	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d4f74:	2001      	movs	r0, #1
   d4f76:	e7dc      	b.n	d4f32 <_Z15setLowPowerMode6String+0x2a>
      Log.info("Increasing reporting frequency to 12 minutes");
   d4f78:	490e      	ldr	r1, [pc, #56]	; (d4fb4 <_Z15setLowPowerMode6String+0xac>)
   d4f7a:	480b      	ldr	r0, [pc, #44]	; (d4fa8 <_Z15setLowPowerMode6String+0xa0>)
   d4f7c:	f7ff f8a4 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
      sysStatus.frequencyMinutes = 12;
   d4f80:	230c      	movs	r3, #12
   d4f82:	8363      	strh	r3, [r4, #26]
      frequencyUpdated = true;
   d4f84:	4b0c      	ldr	r3, [pc, #48]	; (d4fb8 <_Z15setLowPowerMode6String+0xb0>)
   d4f86:	701d      	strb	r5, [r3, #0]
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.lowPowerMode) ? "yes" : "no");
   d4f88:	7a23      	ldrb	r3, [r4, #8]
   d4f8a:	2b00      	cmp	r3, #0
   d4f8c:	d1d8      	bne.n	d4f40 <_Z15setLowPowerMode6String+0x38>
   d4f8e:	4b0b      	ldr	r3, [pc, #44]	; (d4fbc <_Z15setLowPowerMode6String+0xb4>)
   d4f90:	e7d7      	b.n	d4f42 <_Z15setLowPowerMode6String+0x3a>
   d4f92:	bf00      	nop
   d4f94:	000df68c 	.word	0x000df68c
   d4f98:	2003e220 	.word	0x2003e220
   d4f9c:	000df938 	.word	0x000df938
   d4fa0:	000df2f5 	.word	0x000df2f5
   d4fa4:	000df329 	.word	0x000df329
   d4fa8:	2003e570 	.word	0x2003e570
   d4fac:	2003e1c0 	.word	0x2003e1c0
   d4fb0:	000df4b3 	.word	0x000df4b3
   d4fb4:	000df2fc 	.word	0x000df2fc
   d4fb8:	2003e1c1 	.word	0x2003e1c1
   d4fbc:	000df2f9 	.word	0x000df2f9

000d4fc0 <_Z13setVerizonSIM6String>:
 * 
 * @param command  - 1 for Verizon and 0 for Particle (default)
 * @return int 
 */
int setVerizonSIM(String command)                                   // If we are using a Verizon SIM, we will need to execute "keepAlive" calls in the main loop when not in low power mode
{
   d4fc0:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4fc2:	491d      	ldr	r1, [pc, #116]	; (d5038 <_Z13setVerizonSIM6String+0x78>)
   d4fc4:	b085      	sub	sp, #20
   d4fc6:	4605      	mov	r5, r0
   d4fc8:	f008 faf0 	bl	dd5ac <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4fcc:	4604      	mov	r4, r0
   d4fce:	b1d0      	cbz	r0, d5006 <_Z13setVerizonSIM6String+0x46>
  {
    sysStatus.verizonSIM = true;
   d4fd0:	4b1a      	ldr	r3, [pc, #104]	; (d503c <_Z13setVerizonSIM6String+0x7c>)
   d4fd2:	2401      	movs	r4, #1
    Particle.keepAlive(60);                                         // send a ping every minute
   d4fd4:	203c      	movs	r0, #60	; 0x3c
    sysStatus.verizonSIM = true;
   d4fd6:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    Particle.keepAlive(60);                                         // send a ping every minute
   d4fda:	f7ff ff19 	bl	d4e10 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4fde:	f005 fe0f 	bl	dac00 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Verizon SIM", PRIVATE);
   d4fe2:	b910      	cbnz	r0, d4fea <_Z13setVerizonSIM6String+0x2a>
   d4fe4:	2001      	movs	r0, #1
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
    return 1;
  }
  else return 0;
}
   d4fe6:	b005      	add	sp, #20
   d4fe8:	bd30      	pop	{r4, r5, pc}
   d4fea:	4b15      	ldr	r3, [pc, #84]	; (d5040 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4fec:	4a15      	ldr	r2, [pc, #84]	; (d5044 <_Z13setVerizonSIM6String+0x84>)
   d4fee:	781b      	ldrb	r3, [r3, #0]
   d4ff0:	f88d 3000 	strb.w	r3, [sp]
   d4ff4:	233c      	movs	r3, #60	; 0x3c
   d4ff6:	a802      	add	r0, sp, #8
   d4ff8:	4913      	ldr	r1, [pc, #76]	; (d5048 <_Z13setVerizonSIM6String+0x88>)
   d4ffa:	f006 f9dd 	bl	db3b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4ffe:	a803      	add	r0, sp, #12
   d5000:	f7ff ff19 	bl	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5004:	e7ee      	b.n	d4fe4 <_Z13setVerizonSIM6String+0x24>
   d5006:	4911      	ldr	r1, [pc, #68]	; (d504c <_Z13setVerizonSIM6String+0x8c>)
   d5008:	4628      	mov	r0, r5
   d500a:	f008 facf 	bl	dd5ac <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d500e:	2800      	cmp	r0, #0
   d5010:	d0e9      	beq.n	d4fe6 <_Z13setVerizonSIM6String+0x26>
    sysStatus.verizonSIM = false;
   d5012:	4b0a      	ldr	r3, [pc, #40]	; (d503c <_Z13setVerizonSIM6String+0x7c>)
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
   d5014:	f240 5064 	movw	r0, #1380	; 0x564
    sysStatus.verizonSIM = false;
   d5018:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
   d501c:	f7ff fef8 	bl	d4e10 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5020:	f005 fdee 	bl	dac00 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
   d5024:	2800      	cmp	r0, #0
   d5026:	d0dd      	beq.n	d4fe4 <_Z13setVerizonSIM6String+0x24>
   d5028:	4b05      	ldr	r3, [pc, #20]	; (d5040 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d502a:	4a09      	ldr	r2, [pc, #36]	; (d5050 <_Z13setVerizonSIM6String+0x90>)
   d502c:	781b      	ldrb	r3, [r3, #0]
   d502e:	f88d 3000 	strb.w	r3, [sp]
   d5032:	233c      	movs	r3, #60	; 0x3c
   d5034:	e7df      	b.n	d4ff6 <_Z13setVerizonSIM6String+0x36>
   d5036:	bf00      	nop
   d5038:	000df68c 	.word	0x000df68c
   d503c:	2003e220 	.word	0x2003e220
   d5040:	2003e1c0 	.word	0x2003e1c0
   d5044:	000df343 	.word	0x000df343
   d5048:	000df4b3 	.word	0x000df4b3
   d504c:	000df938 	.word	0x000df938
   d5050:	000df356 	.word	0x000df356

000d5054 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5054:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5056:	e9d0 5300 	ldrd	r5, r3, [r0]
   d505a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d505c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d505e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d5062:	42ae      	cmp	r6, r5
   d5064:	d004      	beq.n	d5070 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d5066:	4628      	mov	r0, r5
   d5068:	f008 f99c 	bl	dd3a4 <_ZN6StringD1Ev>
   d506c:	3514      	adds	r5, #20
   d506e:	e7f8      	b.n	d5062 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d5070:	6820      	ldr	r0, [r4, #0]
   d5072:	f005 fe6d 	bl	dad50 <free>
    AllocatorT::free(data_);
}
   d5076:	4620      	mov	r0, r4
   d5078:	bd70      	pop	{r4, r5, r6, pc}

000d507a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d507a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d507e:	4604      	mov	r4, r0
   d5080:	460d      	mov	r5, r1
   d5082:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5084:	d916      	bls.n	d50b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d5086:	4290      	cmp	r0, r2
   d5088:	d215      	bcs.n	d50b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d508a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d508e:	1a75      	subs	r5, r6, r1
   d5090:	f1a1 0714 	sub.w	r7, r1, #20
   d5094:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5096:	42b7      	cmp	r7, r6
   d5098:	d01c      	beq.n	d50d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d509a:	b12c      	cbz	r4, d50a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d509c:	4631      	mov	r1, r6
   d509e:	4620      	mov	r0, r4
   d50a0:	f008 f9fc 	bl	dd49c <_ZN6StringC1EOS_>
   d50a4:	7c33      	ldrb	r3, [r6, #16]
   d50a6:	7423      	strb	r3, [r4, #16]
   d50a8:	4630      	mov	r0, r6
   d50aa:	f008 f97b 	bl	dd3a4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d50ae:	3e14      	subs	r6, #20
   d50b0:	3c14      	subs	r4, #20
   d50b2:	e7f0      	b.n	d5096 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d50b4:	d00e      	beq.n	d50d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d50b6:	42b5      	cmp	r5, r6
   d50b8:	d00c      	beq.n	d50d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d50ba:	b12c      	cbz	r4, d50c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d50bc:	4629      	mov	r1, r5
   d50be:	4620      	mov	r0, r4
   d50c0:	f008 f9ec 	bl	dd49c <_ZN6StringC1EOS_>
   d50c4:	7c2b      	ldrb	r3, [r5, #16]
   d50c6:	7423      	strb	r3, [r4, #16]
   d50c8:	4628      	mov	r0, r5
   d50ca:	f008 f96b 	bl	dd3a4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d50ce:	3514      	adds	r5, #20
   d50d0:	3414      	adds	r4, #20
   d50d2:	e7f0      	b.n	d50b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d50d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d50d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d50d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d50da:	2300      	movs	r3, #0
   d50dc:	e9c0 3300 	strd	r3, r3, [r0]
   d50e0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d50e2:	684f      	ldr	r7, [r1, #4]
   d50e4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d50e6:	4604      	mov	r4, r0
   d50e8:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d50ea:	dd23      	ble.n	d5134 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d50ec:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d50f0:	fb08 f007 	mul.w	r0, r8, r7
   d50f4:	f005 fe24 	bl	dad40 <malloc>
            if (!d) {
   d50f8:	4605      	mov	r5, r0
   d50fa:	b1d8      	cbz	r0, d5134 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d50fc:	e9d4 1200 	ldrd	r1, r2, [r4]
   d5100:	fb08 1202 	mla	r2, r8, r2, r1
   d5104:	f7ff ffb9 	bl	d507a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d5108:	6820      	ldr	r0, [r4, #0]
   d510a:	f005 fe21 	bl	dad50 <free>
        data_ = d;
   d510e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5110:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d5112:	e9d6 7300 	ldrd	r7, r3, [r6]
   d5116:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d511a:	45b8      	cmp	r8, r7
   d511c:	d008      	beq.n	d5130 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d511e:	4639      	mov	r1, r7
   d5120:	4628      	mov	r0, r5
   d5122:	f008 f9d5 	bl	dd4d0 <_ZN6StringC1ERKS_>
   d5126:	7c3b      	ldrb	r3, [r7, #16]
   d5128:	742b      	strb	r3, [r5, #16]
   d512a:	3714      	adds	r7, #20
   d512c:	3514      	adds	r5, #20
   d512e:	e7f4      	b.n	d511a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d5130:	6873      	ldr	r3, [r6, #4]
   d5132:	6063      	str	r3, [r4, #4]
}
   d5134:	4620      	mov	r0, r4
   d5136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d513c <_GLOBAL__sub_I_SystemMode>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   d513c:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   d513e:	4b28      	ldr	r3, [pc, #160]	; (d51e0 <_GLOBAL__sub_I_SystemMode+0xa4>)
    SleepResult() {}
   d5140:	4a28      	ldr	r2, [pc, #160]	; (d51e4 <_GLOBAL__sub_I_SystemMode+0xa8>)
   d5142:	2501      	movs	r5, #1
   d5144:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   d5146:	4b28      	ldr	r3, [pc, #160]	; (d51e8 <_GLOBAL__sub_I_SystemMode+0xac>)
   d5148:	2400      	movs	r4, #0
   d514a:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   d514c:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d514e:	601c      	str	r4, [r3, #0]
   d5150:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d5152:	719c      	strb	r4, [r3, #6]
        set_system_mode(mode);
   d5154:	2002      	movs	r0, #2
   d5156:	f005 fccb 	bl	daaf0 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d515a:	4621      	mov	r1, r4
   d515c:	4628      	mov	r0, r5
   d515e:	f005 fcdf 	bl	dab20 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5162:	4629      	mov	r1, r5
   d5164:	2004      	movs	r0, #4
   d5166:	f005 fa49 	bl	da5fc <HAL_Feature_Set>
        capacity_(0) {
   d516a:	e9cd 4400 	strd	r4, r4, [sp]
   d516e:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d5170:	f008 fd5c 	bl	ddc2c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d5174:	4c1d      	ldr	r4, [pc, #116]	; (d51ec <_GLOBAL__sub_I_SystemMode+0xb0>)
   d5176:	4605      	mov	r5, r0
   d5178:	4669      	mov	r1, sp
   d517a:	a803      	add	r0, sp, #12
   d517c:	f7ff ffab 	bl	d50d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5180:	4626      	mov	r6, r4
        stream_(&stream) {
   d5182:	a903      	add	r1, sp, #12
   d5184:	a806      	add	r0, sp, #24
   d5186:	f7ff ffa6 	bl	d50d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d518a:	4b19      	ldr	r3, [pc, #100]	; (d51f0 <_GLOBAL__sub_I_SystemMode+0xb4>)
   d518c:	f846 3b04 	str.w	r3, [r6], #4
   d5190:	a906      	add	r1, sp, #24
   d5192:	a809      	add	r0, sp, #36	; 0x24
   d5194:	f7ff ff9f 	bl	d50d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5198:	aa09      	add	r2, sp, #36	; 0x24
   d519a:	211e      	movs	r1, #30
   d519c:	4630      	mov	r0, r6
   d519e:	f007 fb22 	bl	dc7e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d51a2:	a809      	add	r0, sp, #36	; 0x24
   d51a4:	f7ff ff56 	bl	d5054 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d51a8:	a806      	add	r0, sp, #24
   d51aa:	f7ff ff53 	bl	d5054 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d51ae:	4b11      	ldr	r3, [pc, #68]	; (d51f4 <_GLOBAL__sub_I_SystemMode+0xb8>)
   d51b0:	6023      	str	r3, [r4, #0]
   d51b2:	6225      	str	r5, [r4, #32]
   d51b4:	a803      	add	r0, sp, #12
   d51b6:	f7ff ff4d 	bl	d5054 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d51ba:	4b0f      	ldr	r3, [pc, #60]	; (d51f8 <_GLOBAL__sub_I_SystemMode+0xbc>)
   d51bc:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d51be:	f008 fd35 	bl	ddc2c <_Z16_fetch_usbserialv>
   d51c2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d51c6:	f008 fd21 	bl	ddc0c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d51ca:	f006 ffed 	bl	dc1a8 <_ZN5spark10LogManager8instanceEv>
   d51ce:	4621      	mov	r1, r4
   d51d0:	f007 fa9b 	bl	dc70a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   d51d4:	4668      	mov	r0, sp
   d51d6:	f7ff ff3d 	bl	d5054 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d51da:	b00c      	add	sp, #48	; 0x30
   d51dc:	bd70      	pop	{r4, r5, r6, pc}
   d51de:	bf00      	nop
   d51e0:	2003e1c0 	.word	0x2003e1c0
   d51e4:	ffff0000 	.word	0xffff0000
   d51e8:	2003e1b4 	.word	0x2003e1b4
   d51ec:	2003e1c4 	.word	0x2003e1c4
   d51f0:	000df524 	.word	0x000df524
   d51f4:	000e01c8 	.word	0x000e01c8
   d51f8:	000df53c 	.word	0x000df53c

000d51fc <_Z22disconnectFromParticlev>:
{
   d51fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5200:	b087      	sub	sp, #28
  time_t startTime = Time.now();
   d5202:	f008 fc12 	bl	dda2a <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   d5206:	4947      	ldr	r1, [pc, #284]	; (d5324 <_Z22disconnectFromParticlev+0x128>)
  time_t startTime = Time.now();
   d5208:	9001      	str	r0, [sp, #4]
  Log.info("In the disconnect from Particle function");
   d520a:	4847      	ldr	r0, [pc, #284]	; (d5328 <_Z22disconnectFromParticlev+0x12c>)
   d520c:	f7fe ff5c 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  detachInterrupt(BUTTON_PIN);                                         // Stop watching the userSwitch as we will no longer be connected
   d5210:	4b46      	ldr	r3, [pc, #280]	; (d532c <_Z22disconnectFromParticlev+0x130>)
   d5212:	8818      	ldrh	r0, [r3, #0]
   d5214:	f006 fc16 	bl	dba44 <_Z15detachInterruptt>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   d5218:	f04f 0a00 	mov.w	sl, #0
  Particle.disconnect();                                               // Disconnect from Particle
   d521c:	a803      	add	r0, sp, #12
   d521e:	e9cd aa03 	strd	sl, sl, [sp, #12]
   d5222:	f8ad a014 	strh.w	sl, [sp, #20]
   d5226:	f005 ffcc 	bl	db1c2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   d522a:	4650      	mov	r0, sl
   d522c:	f005 fa16 	bl	da65c <hal_timer_millis>
        while (_while() && !_condition()) {
   d5230:	f643 2897 	movw	r8, #14999	; 0x3a97
        return hal_timer_millis(nullptr);
   d5234:	4683      	mov	fp, r0
        while (_while() && !_condition()) {
   d5236:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d523a:	2000      	movs	r0, #0
   d523c:	f005 fa0e 	bl	da65c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5240:	ebb0 060b 	subs.w	r6, r0, fp
   d5244:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d5248:	45b9      	cmp	r9, r7
   d524a:	bf08      	it	eq
   d524c:	45b0      	cmpeq	r8, r6
   d524e:	d305      	bcc.n	d525c <_Z22disconnectFromParticlev+0x60>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5250:	f005 fcd6 	bl	dac00 <spark_cloud_flag_connected>
   d5254:	b110      	cbz	r0, d525c <_Z22disconnectFromParticlev+0x60>
            spark_process();
   d5256:	f005 fcc3 	bl	dabe0 <spark_process>
        while (_while() && !_condition()) {
   d525a:	e7ee      	b.n	d523a <_Z22disconnectFromParticlev+0x3e>
   d525c:	f005 fcd0 	bl	dac00 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5260:	f005 f9ec 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5264:	4f32      	ldr	r7, [pc, #200]	; (d5330 <_Z22disconnectFromParticlev+0x134>)
   d5266:	6038      	str	r0, [r7, #0]
    		spark_process();
   d5268:	f005 fcba 	bl	dabe0 <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d526c:	f005 fcc8 	bl	dac00 <spark_cloud_flag_connected>
   d5270:	46bb      	mov	fp, r7
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   d5272:	4606      	mov	r6, r0
   d5274:	b140      	cbz	r0, d5288 <_Z22disconnectFromParticlev+0x8c>
    Log.info("Failed to disconnect from Particle");
   d5276:	492f      	ldr	r1, [pc, #188]	; (d5334 <_Z22disconnectFromParticlev+0x138>)
   d5278:	482b      	ldr	r0, [pc, #172]	; (d5328 <_Z22disconnectFromParticlev+0x12c>)
   d527a:	f7fe ff25 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   d527e:	2600      	movs	r6, #0
   d5280:	4630      	mov	r0, r6
   d5282:	b007      	add	sp, #28
   d5284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   d5288:	f008 fbcf 	bl	dda2a <_ZN9TimeClass3nowEv>
   d528c:	9b01      	ldr	r3, [sp, #4]
   d528e:	492a      	ldr	r1, [pc, #168]	; (d5338 <_Z22disconnectFromParticlev+0x13c>)
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5290:	4f2a      	ldr	r7, [pc, #168]	; (d533c <_Z22disconnectFromParticlev+0x140>)
   d5292:	1ac2      	subs	r2, r0, r3
   d5294:	4824      	ldr	r0, [pc, #144]	; (d5328 <_Z22disconnectFromParticlev+0x12c>)
   d5296:	f7fe ff17 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   d529a:	f008 fbc6 	bl	dda2a <_ZN9TimeClass3nowEv>
   d529e:	4632      	mov	r2, r6
   d52a0:	2102      	movs	r1, #2
   d52a2:	4680      	mov	r8, r0
   d52a4:	6878      	ldr	r0, [r7, #4]
   d52a6:	f005 fcfb 	bl	daca0 <network_disconnect>
        network_off(*this, 0, 0, NULL);
   d52aa:	6878      	ldr	r0, [r7, #4]
   d52ac:	4633      	mov	r3, r6
   d52ae:	4632      	mov	r2, r6
   d52b0:	4631      	mov	r1, r6
   d52b2:	f005 fd0d 	bl	dacd0 <network_off>
        return hal_timer_millis(nullptr);
   d52b6:	4630      	mov	r0, r6
   d52b8:	f005 f9d0 	bl	da65c <hal_timer_millis>
   d52bc:	46b2      	mov	sl, r6
   d52be:	4681      	mov	r9, r0
   d52c0:	2000      	movs	r0, #0
   d52c2:	f005 f9cb 	bl	da65c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d52c6:	ebb0 0409 	subs.w	r4, r0, r9
   d52ca:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d52ce:	2300      	movs	r3, #0
   d52d0:	f247 522f 	movw	r2, #29999	; 0x752f
   d52d4:	42ab      	cmp	r3, r5
   d52d6:	bf08      	it	eq
   d52d8:	42a2      	cmpeq	r2, r4
   d52da:	d306      	bcc.n	d52ea <_Z22disconnectFromParticlev+0xee>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d52dc:	4638      	mov	r0, r7
   d52de:	f007 fdc1 	bl	dce64 <_ZN5spark12NetworkClass5isOffEv>
   d52e2:	b910      	cbnz	r0, d52ea <_Z22disconnectFromParticlev+0xee>
            spark_process();
   d52e4:	f005 fc7c 	bl	dabe0 <spark_process>
        while (_while() && !_condition()) {
   d52e8:	e7ea      	b.n	d52c0 <_Z22disconnectFromParticlev+0xc4>
   d52ea:	4814      	ldr	r0, [pc, #80]	; (d533c <_Z22disconnectFromParticlev+0x140>)
   d52ec:	f007 fdba 	bl	dce64 <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   d52f0:	f005 f9a4 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d52f4:	f8cb 0000 	str.w	r0, [fp]
    		spark_process();
   d52f8:	f005 fc72 	bl	dabe0 <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   d52fc:	480f      	ldr	r0, [pc, #60]	; (d533c <_Z22disconnectFromParticlev+0x140>)
   d52fe:	f007 fdad 	bl	dce5c <_ZN5spark12NetworkClass4isOnEv>
   d5302:	b120      	cbz	r0, d530e <_Z22disconnectFromParticlev+0x112>
    Log.info("Failed to turn off the Cellular modem");
   d5304:	490e      	ldr	r1, [pc, #56]	; (d5340 <_Z22disconnectFromParticlev+0x144>)
   d5306:	4808      	ldr	r0, [pc, #32]	; (d5328 <_Z22disconnectFromParticlev+0x12c>)
   d5308:	f7fe fede 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   d530c:	e7b8      	b.n	d5280 <_Z22disconnectFromParticlev+0x84>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   d530e:	f008 fb8c 	bl	dda2a <_ZN9TimeClass3nowEv>
   d5312:	490c      	ldr	r1, [pc, #48]	; (d5344 <_Z22disconnectFromParticlev+0x148>)
   d5314:	eba0 0208 	sub.w	r2, r0, r8
   d5318:	4803      	ldr	r0, [pc, #12]	; (d5328 <_Z22disconnectFromParticlev+0x12c>)
   d531a:	f7fe fed5 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    return true;
   d531e:	2601      	movs	r6, #1
   d5320:	e7ae      	b.n	d5280 <_Z22disconnectFromParticlev+0x84>
   d5322:	bf00      	nop
   d5324:	000df36a 	.word	0x000df36a
   d5328:	2003e570 	.word	0x2003e570
   d532c:	000df26e 	.word	0x000df26e
   d5330:	2003e720 	.word	0x2003e720
   d5334:	000df393 	.word	0x000df393
   d5338:	000df3b6 	.word	0x000df3b6
   d533c:	2003e49c 	.word	0x2003e49c
   d5340:	000df3df 	.word	0x000df3df
   d5344:	000df405 	.word	0x000df405

000d5348 <_Z18particleInitializev>:
void particleInitialize() {
   d5348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d534c:	b08c      	sub	sp, #48	; 0x30
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d534e:	4b55      	ldr	r3, [pc, #340]	; (d54a4 <_Z18particleInitializev+0x15c>)
   d5350:	9304      	str	r3, [sp, #16]
   d5352:	4b55      	ldr	r3, [pc, #340]	; (d54a8 <_Z18particleInitializev+0x160>)
   d5354:	9305      	str	r3, [sp, #20]
   d5356:	4b55      	ldr	r3, [pc, #340]	; (d54ac <_Z18particleInitializev+0x164>)
   d5358:	9306      	str	r3, [sp, #24]
   d535a:	4b55      	ldr	r3, [pc, #340]	; (d54b0 <_Z18particleInitializev+0x168>)
   d535c:	9307      	str	r3, [sp, #28]
   d535e:	4b55      	ldr	r3, [pc, #340]	; (d54b4 <_Z18particleInitializev+0x16c>)
  Particle.variable("Low Power Mode",(sysStatus.lowPowerMode) ? "Yes" : "No");
   d5360:	4d55      	ldr	r5, [pc, #340]	; (d54b8 <_Z18particleInitializev+0x170>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d5362:	9308      	str	r3, [sp, #32]
   d5364:	4b55      	ldr	r3, [pc, #340]	; (d54bc <_Z18particleInitializev+0x174>)
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   d5366:	4956      	ldr	r1, [pc, #344]	; (d54c0 <_Z18particleInitializev+0x178>)
   d5368:	4856      	ldr	r0, [pc, #344]	; (d54c4 <_Z18particleInitializev+0x17c>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d536a:	9309      	str	r3, [sp, #36]	; 0x24
   d536c:	2400      	movs	r4, #0
   d536e:	4b56      	ldr	r3, [pc, #344]	; (d54c8 <_Z18particleInitializev+0x180>)
   d5370:	930a      	str	r3, [sp, #40]	; 0x28
   d5372:	940b      	str	r4, [sp, #44]	; 0x2c
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   d5374:	f7fe fea8 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  Particle.variable("Low Power Mode",(sysStatus.lowPowerMode) ? "Yes" : "No");
   d5378:	f895 c008 	ldrb.w	ip, [r5, #8]
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d537c:	4853      	ldr	r0, [pc, #332]	; (d54cc <_Z18particleInitializev+0x184>)
   d537e:	4954      	ldr	r1, [pc, #336]	; (d54d0 <_Z18particleInitializev+0x188>)
   d5380:	4623      	mov	r3, r4
   d5382:	45a4      	cmp	ip, r4
   d5384:	bf08      	it	eq
   d5386:	4601      	moveq	r1, r0
   d5388:	2204      	movs	r2, #4
   d538a:	4852      	ldr	r0, [pc, #328]	; (d54d4 <_Z18particleInitializev+0x18c>)
   d538c:	f005 fc18 	bl	dabc0 <spark_variable>
   d5390:	4951      	ldr	r1, [pc, #324]	; (d54d8 <_Z18particleInitializev+0x190>)
   d5392:	4852      	ldr	r0, [pc, #328]	; (d54dc <_Z18particleInitializev+0x194>)
   d5394:	4623      	mov	r3, r4
   d5396:	2204      	movs	r2, #4
   d5398:	f005 fc12 	bl	dabc0 <spark_variable>
   d539c:	4950      	ldr	r1, [pc, #320]	; (d54e0 <_Z18particleInitializev+0x198>)
   d539e:	4851      	ldr	r0, [pc, #324]	; (d54e4 <_Z18particleInitializev+0x19c>)
   d53a0:	4623      	mov	r3, r4
   d53a2:	2204      	movs	r2, #4
   d53a4:	f005 fc0c 	bl	dabc0 <spark_variable>
   d53a8:	494f      	ldr	r1, [pc, #316]	; (d54e8 <_Z18particleInitializev+0x1a0>)
   d53aa:	4850      	ldr	r0, [pc, #320]	; (d54ec <_Z18particleInitializev+0x1a4>)
   d53ac:	4623      	mov	r3, r4
   d53ae:	2202      	movs	r2, #2
   d53b0:	f005 fc06 	bl	dabc0 <spark_variable>
  Particle.variable("BatteryContext",batteryContext[current.batteryState]);
   d53b4:	4b4e      	ldr	r3, [pc, #312]	; (d54f0 <_Z18particleInitializev+0x1a8>)
   d53b6:	484f      	ldr	r0, [pc, #316]	; (d54f4 <_Z18particleInitializev+0x1ac>)
   d53b8:	7a19      	ldrb	r1, [r3, #8]
   d53ba:	ab0c      	add	r3, sp, #48	; 0x30
   d53bc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   d53c0:	2204      	movs	r2, #4
   d53c2:	f851 1c20 	ldr.w	r1, [r1, #-32]
   d53c6:	4623      	mov	r3, r4
   d53c8:	f005 fbfa 	bl	dabc0 <spark_variable>
        extra.size = sizeof(extra);
   d53cc:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d53ce:	e9cd 4401 	strd	r4, r4, [sp, #4]
        extra.size = sizeof(extra);
   d53d2:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.copy = [](const void* var, void** data, size_t* size) {
   d53d6:	4b48      	ldr	r3, [pc, #288]	; (d54f8 <_Z18particleInitializev+0x1b0>)
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d53d8:	4948      	ldr	r1, [pc, #288]	; (d54fc <_Z18particleInitializev+0x1b4>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   d53da:	9303      	str	r3, [sp, #12]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d53dc:	2204      	movs	r2, #4
   d53de:	ab01      	add	r3, sp, #4
   d53e0:	4847      	ldr	r0, [pc, #284]	; (d5500 <_Z18particleInitializev+0x1b8>)
   d53e2:	f005 fbed 	bl	dabc0 <spark_variable>
  Particle.variable("SIM Card", (sysStatus.verizonSIM) ? "Verizon" : "Particle");
   d53e6:	f895 c024 	ldrb.w	ip, [r5, #36]	; 0x24
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d53ea:	4846      	ldr	r0, [pc, #280]	; (d5504 <_Z18particleInitializev+0x1bc>)
   d53ec:	4946      	ldr	r1, [pc, #280]	; (d5508 <_Z18particleInitializev+0x1c0>)
   d53ee:	4623      	mov	r3, r4
   d53f0:	45a4      	cmp	ip, r4
   d53f2:	bf08      	it	eq
   d53f4:	4601      	moveq	r1, r0
   d53f6:	2204      	movs	r2, #4
   d53f8:	4844      	ldr	r0, [pc, #272]	; (d550c <_Z18particleInitializev+0x1c4>)
   d53fa:	f005 fbe1 	bl	dabc0 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d53fe:	4a44      	ldr	r2, [pc, #272]	; (d5510 <_Z18particleInitializev+0x1c8>)
   d5400:	4944      	ldr	r1, [pc, #272]	; (d5514 <_Z18particleInitializev+0x1cc>)
   d5402:	4845      	ldr	r0, [pc, #276]	; (d5518 <_Z18particleInitializev+0x1d0>)
   d5404:	f005 fecc 	bl	db1a0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5408:	4a44      	ldr	r2, [pc, #272]	; (d551c <_Z18particleInitializev+0x1d4>)
   d540a:	4945      	ldr	r1, [pc, #276]	; (d5520 <_Z18particleInitializev+0x1d8>)
   d540c:	4842      	ldr	r0, [pc, #264]	; (d5518 <_Z18particleInitializev+0x1d0>)
   d540e:	f005 fec7 	bl	db1a0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5412:	4a3e      	ldr	r2, [pc, #248]	; (d550c <_Z18particleInitializev+0x1c4>)
   d5414:	4943      	ldr	r1, [pc, #268]	; (d5524 <_Z18particleInitializev+0x1dc>)
   d5416:	4840      	ldr	r0, [pc, #256]	; (d5518 <_Z18particleInitializev+0x1d0>)
   d5418:	f005 fec2 	bl	db1a0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (!digitalRead(BUTTON_PIN)) {
   d541c:	4b42      	ldr	r3, [pc, #264]	; (d5528 <_Z18particleInitializev+0x1e0>)
   d541e:	8818      	ldrh	r0, [r3, #0]
   d5420:	f008 fd46 	bl	ddeb0 <digitalRead>
   d5424:	b910      	cbnz	r0, d542c <_Z18particleInitializev+0xe4>
    sysStatus.lowPowerMode = false;     // If the user button is held down while resetting - diable sleep
   d5426:	7228      	strb	r0, [r5, #8]
        spark_cloud_flag_connect();
   d5428:	f005 fbe2 	bl	dabf0 <spark_cloud_flag_connect>
	if (!Time.isValid()) {							// I need to make sure the time is valid here.
   d542c:	f008 fae0 	bl	dd9f0 <_ZN9TimeClass7isValidEv>
   d5430:	4604      	mov	r4, r0
   d5432:	bb90      	cbnz	r0, d549a <_Z18particleInitializev+0x152>
   d5434:	f005 fbdc 	bl	dabf0 <spark_cloud_flag_connect>
        return hal_timer_millis(nullptr);
   d5438:	4620      	mov	r0, r4
   d543a:	f005 f90f 	bl	da65c <hal_timer_millis>
        while (_while() && !_condition()) {
   d543e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; d552c <_Z18particleInitializev+0x1e4>
        return hal_timer_millis(nullptr);
   d5442:	4682      	mov	sl, r0
        while (_while() && !_condition()) {
   d5444:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d5448:	2000      	movs	r0, #0
   d544a:	f005 f907 	bl	da65c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d544e:	ebb0 060a 	subs.w	r6, r0, sl
   d5452:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d5456:	45b9      	cmp	r9, r7
   d5458:	bf08      	it	eq
   d545a:	45b0      	cmpeq	r8, r6
   d545c:	d305      	bcc.n	d546a <_Z18particleInitializev+0x122>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d545e:	f005 fbcf 	bl	dac00 <spark_cloud_flag_connected>
   d5462:	b910      	cbnz	r0, d546a <_Z18particleInitializev+0x122>
            spark_process();
   d5464:	f005 fbbc 	bl	dabe0 <spark_process>
        while (_while() && !_condition()) {
   d5468:	e7ee      	b.n	d5448 <_Z18particleInitializev+0x100>
   d546a:	f005 fbc9 	bl	dac00 <spark_cloud_flag_connected>
		if (waitFor(Particle.connected, 600000)) {	// Connect to Particle
   d546e:	b1a0      	cbz	r0, d549a <_Z18particleInitializev+0x152>
			sysStatus.lastConnection = Time.now();			// Record the last connection time
   d5470:	f008 fadb 	bl	dda2a <_ZN9TimeClass3nowEv>
   d5474:	6168      	str	r0, [r5, #20]
   d5476:	f005 fbc3 	bl	dac00 <spark_cloud_flag_connected>
        if (!connected()) {
   d547a:	b110      	cbz	r0, d5482 <_Z18particleInitializev+0x13a>
        return spark_sync_time(NULL);
   d547c:	2000      	movs	r0, #0
   d547e:	f005 fbcf 	bl	dac20 <spark_sync_time>
			waitUntil(Particle.syncTimeDone);		// Make sure sync is complete
   d5482:	f7ff fc77 	bl	d4d74 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d5486:	b910      	cbnz	r0, d548e <_Z18particleInitializev+0x146>
            spark_process();
   d5488:	f005 fbaa 	bl	dabe0 <spark_process>
        while (_while() && !_condition()) {
   d548c:	e7f9      	b.n	d5482 <_Z18particleInitializev+0x13a>
   d548e:	f7ff fc71 	bl	d4d74 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
			if (sysStatus.lowPowerMode) disconnectFromParticle();
   d5492:	7a2b      	ldrb	r3, [r5, #8]
   d5494:	b10b      	cbz	r3, d549a <_Z18particleInitializev+0x152>
   d5496:	f7ff feb1 	bl	d51fc <_Z22disconnectFromParticlev>
  takeMeasurements();                               // Initialize sensor values
   d549a:	f000 fa17 	bl	d58cc <_Z16takeMeasurementsv>
}
   d549e:	b00c      	add	sp, #48	; 0x30
   d54a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d54a4:	000df440 	.word	0x000df440
   d54a8:	000df448 	.word	0x000df448
   d54ac:	000df44c 	.word	0x000df44c
   d54b0:	000df455 	.word	0x000df455
   d54b4:	000df45d 	.word	0x000df45d
   d54b8:	2003e220 	.word	0x2003e220
   d54bc:	000df469 	.word	0x000df469
   d54c0:	000df47b 	.word	0x000df47b
   d54c4:	2003e570 	.word	0x2003e570
   d54c8:	000df46f 	.word	0x000df46f
   d54cc:	000df435 	.word	0x000df435
   d54d0:	000df431 	.word	0x000df431
   d54d4:	000df4a9 	.word	0x000df4a9
   d54d8:	2003db39 	.word	0x2003db39
   d54dc:	000df4b8 	.word	0x000df4b8
   d54e0:	2003dbfc 	.word	0x2003dbfc
   d54e4:	000df4c0 	.word	0x000df4c0
   d54e8:	2003e204 	.word	0x2003e204
   d54ec:	000df4c7 	.word	0x000df4c7
   d54f0:	2003e200 	.word	0x2003e200
   d54f4:	000df4d2 	.word	0x000df4d2
   d54f8:	000d4d91 	.word	0x000d4d91
   d54fc:	000d4d4d 	.word	0x000d4d4d
   d5500:	000df4e1 	.word	0x000df4e1
   d5504:	000df3ad 	.word	0x000df3ad
   d5508:	000df438 	.word	0x000df438
   d550c:	000df4f5 	.word	0x000df4f5
   d5510:	000df4fe 	.word	0x000df4fe
   d5514:	000d4f09 	.word	0x000d4f09
   d5518:	000db175 	.word	0x000db175
   d551c:	000df50c 	.word	0x000df50c
   d5520:	000d4ec9 	.word	0x000d4ec9
   d5524:	000d4fc1 	.word	0x000d4fc1
   d5528:	000df26e 	.word	0x000df26e
   d552c:	000927bf 	.word	0x000927bf

000d5530 <_Z18loadSystemDefaultsv>:

/**
 * @brief This function is called in setup if the version of the FRAM stoage map has been changed
 * 
 */
void loadSystemDefaults() {                         // This code is only executed with a new device or a new storage object structure
   d5530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5532:	f005 fb65 	bl	dac00 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d5536:	b1d8      	cbz	r0, d5570 <_Z18loadSystemDefaultsv+0x40>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d5538:	4b17      	ldr	r3, [pc, #92]	; (d5598 <_Z18loadSystemDefaultsv+0x68>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d553a:	4a18      	ldr	r2, [pc, #96]	; (d559c <_Z18loadSystemDefaultsv+0x6c>)
   d553c:	781b      	ldrb	r3, [r3, #0]
   d553e:	f88d 3000 	strb.w	r3, [sp]
   d5542:	4917      	ldr	r1, [pc, #92]	; (d55a0 <_Z18loadSystemDefaultsv+0x70>)
   d5544:	233c      	movs	r3, #60	; 0x3c
   d5546:	a802      	add	r0, sp, #8
   d5548:	f005 ff36 	bl	db3b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d554c:	9c03      	ldr	r4, [sp, #12]
   d554e:	b17c      	cbz	r4, d5570 <_Z18loadSystemDefaultsv+0x40>
      if (--_M_use_count == 0)
   d5550:	6863      	ldr	r3, [r4, #4]
   d5552:	3b01      	subs	r3, #1
   d5554:	6063      	str	r3, [r4, #4]
   d5556:	b95b      	cbnz	r3, d5570 <_Z18loadSystemDefaultsv+0x40>
          _M_dispose();
   d5558:	6823      	ldr	r3, [r4, #0]
   d555a:	4620      	mov	r0, r4
   d555c:	689b      	ldr	r3, [r3, #8]
   d555e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5560:	68a3      	ldr	r3, [r4, #8]
   d5562:	3b01      	subs	r3, #1
   d5564:	60a3      	str	r3, [r4, #8]
   d5566:	b91b      	cbnz	r3, d5570 <_Z18loadSystemDefaultsv+0x40>
            _M_destroy();
   d5568:	6823      	ldr	r3, [r4, #0]
   d556a:	4620      	mov	r0, r4
   d556c:	68db      	ldr	r3, [r3, #12]
   d556e:	4798      	blx	r3
    Particle.publish("Mode","Loading System Defaults", PRIVATE);
  }
  Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   d5570:	490c      	ldr	r1, [pc, #48]	; (d55a4 <_Z18loadSystemDefaultsv+0x74>)
   d5572:	480d      	ldr	r0, [pc, #52]	; (d55a8 <_Z18loadSystemDefaultsv+0x78>)
   d5574:	f7fe fda8 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.structuresVersion = 1;
   d5578:	4b0c      	ldr	r3, [pc, #48]	; (d55ac <_Z18loadSystemDefaultsv+0x7c>)
   d557a:	4a0d      	ldr	r2, [pc, #52]	; (d55b0 <_Z18loadSystemDefaultsv+0x80>)
   d557c:	605a      	str	r2, [r3, #4]
  sysStatus.firmwareRelease = 1;
  sysStatus.verboseMode = false;
  sysStatus.solarPowerMode = true;
  sysStatus.lowPowerMode = true;
   d557e:	2201      	movs	r2, #1
   d5580:	721a      	strb	r2, [r3, #8]
  sysStatus.resetCount = 0;
  sysStatus.lastHookResponse = 0;
  sysStatus.frequencyMinutes = 60;
   d5582:	213c      	movs	r1, #60	; 0x3c
  sysStatus.resetCount = 0;
   d5584:	2200      	movs	r2, #0
  sysStatus.lastHookResponse = 0;
   d5586:	e9c3 2203 	strd	r2, r2, [r3, #12]
  sysStatus.frequencyMinutes = 60;
   d558a:	8359      	strh	r1, [r3, #26]
  sysStatus.lastAlertCode = 0;
   d558c:	771a      	strb	r2, [r3, #28]
  sysStatus.lastAlertTime = 0;
   d558e:	621a      	str	r2, [r3, #32]
  sysStatus.verizonSIM = false;
   d5590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   d5594:	b004      	add	sp, #16
   d5596:	bd10      	pop	{r4, pc}
   d5598:	2003e1e8 	.word	0x2003e1e8
   d559c:	000df54c 	.word	0x000df54c
   d55a0:	000df4b3 	.word	0x000df4b3
   d55a4:	000df564 	.word	0x000df564
   d55a8:	2003e570 	.word	0x2003e570
   d55ac:	2003e220 	.word	0x2003e220
   d55b0:	01000101 	.word	0x01000101

000d55b4 <_GLOBAL__sub_I_sysStatus>:
        val_(val) {
   d55b4:	4b01      	ldr	r3, [pc, #4]	; (d55bc <_GLOBAL__sub_I_sysStatus+0x8>)
   d55b6:	2201      	movs	r2, #1
   d55b8:	701a      	strb	r2, [r3, #0]
   d55ba:	4770      	bx	lr
   d55bc:	2003e1e8 	.word	0x2003e1e8

000d55c0 <_Z17storageObjectLoopv>:
bool storageObjectLoop() {                          // Monitors the values of the two objects and writes to FRAM if changed after a second
   d55c0:	b570      	push	{r4, r5, r6, lr}
  if (Time.now() - lastCheckTime) {          // Check once a second
   d55c2:	4c31      	ldr	r4, [pc, #196]	; (d5688 <_Z17storageObjectLoopv+0xc8>)
   d55c4:	f008 fa31 	bl	dda2a <_ZN9TimeClass3nowEv>
   d55c8:	e9d4 2300 	ldrd	r2, r3, [r4]
   d55cc:	17c1      	asrs	r1, r0, #31
   d55ce:	4299      	cmp	r1, r3
   d55d0:	bf08      	it	eq
   d55d2:	4290      	cmpeq	r0, r2
   d55d4:	d056      	beq.n	d5684 <_Z17storageObjectLoopv+0xc4>
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   d55d6:	f008 fa28 	bl	dda2a <_ZN9TimeClass3nowEv>
                      std::hash<uint32_t>{}(sysStatus.lastHookResponse) + \
   d55da:	4d2c      	ldr	r5, [pc, #176]	; (d568c <_Z17storageObjectLoopv+0xcc>)
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   d55dc:	4e2c      	ldr	r6, [pc, #176]	; (d5690 <_Z17storageObjectLoopv+0xd0>)
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   d55de:	17c1      	asrs	r1, r0, #31
   d55e0:	e9c4 0100 	strd	r0, r1, [r4]
                      std::hash<byte>{}(sysStatus.lastAlertCode)+ \
   d55e4:	e9d5 3404 	ldrd	r3, r4, [r5, #16]
   d55e8:	441c      	add	r4, r3
   d55ea:	6a2b      	ldr	r3, [r5, #32]
   d55ec:	441c      	add	r4, r3

  /// Explicit specialization for long long.
  _Cxx_hashtable_define_trivial_hash(long long)

  /// Explicit specialization for unsigned short.
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d55ee:	882b      	ldrh	r3, [r5, #0]
   d55f0:	441c      	add	r4, r3
   d55f2:	886b      	ldrh	r3, [r5, #2]
   d55f4:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d55f6:	792b      	ldrb	r3, [r5, #4]
   d55f8:	441c      	add	r4, r3
   d55fa:	796b      	ldrb	r3, [r5, #5]
   d55fc:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   d55fe:	79ab      	ldrb	r3, [r5, #6]
   d5600:	441c      	add	r4, r3
   d5602:	79eb      	ldrb	r3, [r5, #7]
   d5604:	441c      	add	r4, r3
   d5606:	7a2b      	ldrb	r3, [r5, #8]
   d5608:	441c      	add	r4, r3
   d560a:	68eb      	ldr	r3, [r5, #12]
   d560c:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d560e:	8b2b      	ldrh	r3, [r5, #24]
   d5610:	441c      	add	r4, r3
   d5612:	8b6b      	ldrh	r3, [r5, #26]
   d5614:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d5616:	7f2b      	ldrb	r3, [r5, #28]
   d5618:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   d561a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
                      std::hash<bool>{}(sysStatus.verizonSIM);
   d561e:	441c      	add	r4, r3
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   d5620:	6833      	ldr	r3, [r6, #0]
   d5622:	429c      	cmp	r4, r3
   d5624:	d02c      	beq.n	d5680 <_Z17storageObjectLoopv+0xc0>
      Log.info("sysStaus object stored and hash updated");
   d5626:	491b      	ldr	r1, [pc, #108]	; (d5694 <_Z17storageObjectLoopv+0xd4>)
   d5628:	481b      	ldr	r0, [pc, #108]	; (d5698 <_Z17storageObjectLoopv+0xd8>)
   d562a:	f7fe fd4d 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d562e:	481b      	ldr	r0, [pc, #108]	; (d569c <_Z17storageObjectLoopv+0xdc>)
   d5630:	2328      	movs	r3, #40	; 0x28
   d5632:	462a      	mov	r2, r5
   d5634:	2101      	movs	r1, #1
   d5636:	f002 fbb0 	bl	d7d9a <_ZN6MB85RC9writeDataEjPKhj>
      lastSysStatusHash = sysStatusHash;
   d563a:	6034      	str	r4, [r6, #0]
      returnValue = true;                           // In case I want to test whether values changed
   d563c:	2001      	movs	r0, #1
    size_t currentHash =  std::hash<byte>{}(current.internalTempC) + \
   d563e:	4d18      	ldr	r5, [pc, #96]	; (d56a0 <_Z17storageObjectLoopv+0xe0>)
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   d5640:	4e18      	ldr	r6, [pc, #96]	; (d56a4 <_Z17storageObjectLoopv+0xe4>)
    size_t currentHash =  std::hash<byte>{}(current.internalTempC) + \
   d5642:	686b      	ldr	r3, [r5, #4]
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d5644:	782c      	ldrb	r4, [r5, #0]
   d5646:	441c      	add	r4, r3
   d5648:	7a2b      	ldrb	r3, [r5, #8]
                      std::hash<int>{}(current.stateOfCharge)+ \
   d564a:	441c      	add	r4, r3
                      std::hash<byte>{}(current.batteryState) + \
   d564c:	692b      	ldr	r3, [r5, #16]
   d564e:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d5650:	8b2b      	ldrh	r3, [r5, #24]
                      std::hash<time_t>{}(current.lastSampleTime) + \
   d5652:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d5654:	7eab      	ldrb	r3, [r5, #26]
                      std::hash<uint16_t>{}(current.rssi) + \
   d5656:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d5658:	8bab      	ldrh	r3, [r5, #28]
                      std::hash<uint8_t>{}(current.messageNumber) + \
   d565a:	441c      	add	r4, r3
   d565c:	8beb      	ldrh	r3, [r5, #30]
                      std::hash<uint16_t>{}(current.daily);
   d565e:	441c      	add	r4, r3
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   d5660:	6833      	ldr	r3, [r6, #0]
   d5662:	429c      	cmp	r4, r3
   d5664:	d00b      	beq.n	d567e <_Z17storageObjectLoopv+0xbe>
      Log.info("current object stored and hash updated");
   d5666:	4910      	ldr	r1, [pc, #64]	; (d56a8 <_Z17storageObjectLoopv+0xe8>)
   d5668:	480b      	ldr	r0, [pc, #44]	; (d5698 <_Z17storageObjectLoopv+0xd8>)
   d566a:	f7fe fd2d 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d566e:	480b      	ldr	r0, [pc, #44]	; (d569c <_Z17storageObjectLoopv+0xdc>)
   d5670:	2320      	movs	r3, #32
   d5672:	462a      	mov	r2, r5
   d5674:	2150      	movs	r1, #80	; 0x50
   d5676:	f002 fb90 	bl	d7d9a <_ZN6MB85RC9writeDataEjPKhj>
      lastCurrentHash = currentHash;
   d567a:	6034      	str	r4, [r6, #0]
      returnValue = true;
   d567c:	2001      	movs	r0, #1
}
   d567e:	bd70      	pop	{r4, r5, r6, pc}
  bool returnValue = false;
   d5680:	2000      	movs	r0, #0
   d5682:	e7dc      	b.n	d563e <_Z17storageObjectLoopv+0x7e>
   d5684:	2000      	movs	r0, #0
   d5686:	e7fa      	b.n	d567e <_Z17storageObjectLoopv+0xbe>
   d5688:	2003e1f0 	.word	0x2003e1f0
   d568c:	2003e220 	.word	0x2003e220
   d5690:	2003e1fc 	.word	0x2003e1fc
   d5694:	000df57c 	.word	0x000df57c
   d5698:	2003e570 	.word	0x2003e570
   d569c:	2003e074 	.word	0x2003e074
   d56a0:	2003e200 	.word	0x2003e200
   d56a4:	2003e1f8 	.word	0x2003e1f8
   d56a8:	000df5a4 	.word	0x000df5a4

000d56ac <_Z18storageObjectStartv>:
bool storageObjectStart() {
   d56ac:	b513      	push	{r0, r1, r4, lr}
  Log.info("Initializing the Object Store");
   d56ae:	4921      	ldr	r1, [pc, #132]	; (d5734 <_Z18storageObjectStartv+0x88>)
   d56b0:	4821      	ldr	r0, [pc, #132]	; (d5738 <_Z18storageObjectStartv+0x8c>)
   d56b2:	f7fe fd09 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  fram.begin();                                     // Initialize the FRAM module
   d56b6:	4821      	ldr	r0, [pc, #132]	; (d573c <_Z18storageObjectStartv+0x90>)
   d56b8:	f002 fae2 	bl	d7c80 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d56bc:	481f      	ldr	r0, [pc, #124]	; (d573c <_Z18storageObjectStartv+0x90>)
   d56be:	2301      	movs	r3, #1
   d56c0:	f10d 0207 	add.w	r2, sp, #7
   d56c4:	2100      	movs	r1, #0
   d56c6:	f002 fb1d 	bl	d7d04 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {           // Check to see if the memory map in the sketch matches the data on the chip
   d56ca:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d56ce:	2c01      	cmp	r4, #1
   d56d0:	d01c      	beq.n	d570c <_Z18storageObjectStartv+0x60>
    Log.info("FRAM mismatch, erasing and locafing defaults if it checks out");
   d56d2:	491b      	ldr	r1, [pc, #108]	; (d5740 <_Z18storageObjectStartv+0x94>)
   d56d4:	4818      	ldr	r0, [pc, #96]	; (d5738 <_Z18storageObjectStartv+0x8c>)
   d56d6:	f7fe fcf7 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    fram.erase();                                   // Reset the FRAM to correct the issue
   d56da:	4818      	ldr	r0, [pc, #96]	; (d573c <_Z18storageObjectStartv+0x90>)
   d56dc:	f002 fada 	bl	d7c94 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d56e0:	4a18      	ldr	r2, [pc, #96]	; (d5744 <_Z18storageObjectStartv+0x98>)
   d56e2:	4816      	ldr	r0, [pc, #88]	; (d573c <_Z18storageObjectStartv+0x90>)
   d56e4:	2304      	movs	r3, #4
   d56e6:	2100      	movs	r1, #0
   d56e8:	f002 fb57 	bl	d7d9a <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d56ec:	4813      	ldr	r0, [pc, #76]	; (d573c <_Z18storageObjectStartv+0x90>)
   d56ee:	2301      	movs	r3, #1
   d56f0:	f10d 0207 	add.w	r2, sp, #7
   d56f4:	2100      	movs	r1, #0
   d56f6:	f002 fb05 	bl	d7d04 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) {
   d56fa:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d56fe:	2c01      	cmp	r4, #1
   d5700:	d115      	bne.n	d572e <_Z18storageObjectStartv+0x82>
    loadSystemDefaults();                           // Since we are re-initializing the storage objects, we need to set the right default values
   d5702:	f7ff ff15 	bl	d5530 <_Z18loadSystemDefaultsv>
   d5706:	4620      	mov	r0, r4
}
   d5708:	b002      	add	sp, #8
   d570a:	bd10      	pop	{r4, pc}
    Log.info("FRAM initialized, loading objects");
   d570c:	490e      	ldr	r1, [pc, #56]	; (d5748 <_Z18storageObjectStartv+0x9c>)
   d570e:	480a      	ldr	r0, [pc, #40]	; (d5738 <_Z18storageObjectStartv+0x8c>)
   d5710:	f7fe fcda 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d5714:	4621      	mov	r1, r4
   d5716:	4a0d      	ldr	r2, [pc, #52]	; (d574c <_Z18storageObjectStartv+0xa0>)
   d5718:	4808      	ldr	r0, [pc, #32]	; (d573c <_Z18storageObjectStartv+0x90>)
   d571a:	2328      	movs	r3, #40	; 0x28
   d571c:	f002 faf2 	bl	d7d04 <_ZN6MB85RC8readDataEjPhj>
   d5720:	4a0b      	ldr	r2, [pc, #44]	; (d5750 <_Z18storageObjectStartv+0xa4>)
   d5722:	4806      	ldr	r0, [pc, #24]	; (d573c <_Z18storageObjectStartv+0x90>)
   d5724:	2320      	movs	r3, #32
   d5726:	2150      	movs	r1, #80	; 0x50
   d5728:	f002 faec 	bl	d7d04 <_ZN6MB85RC8readDataEjPhj>
   d572c:	e7eb      	b.n	d5706 <_Z18storageObjectStartv+0x5a>
      return false;
   d572e:	2000      	movs	r0, #0
   d5730:	e7ea      	b.n	d5708 <_Z18storageObjectStartv+0x5c>
   d5732:	bf00      	nop
   d5734:	000df5cb 	.word	0x000df5cb
   d5738:	2003e570 	.word	0x2003e570
   d573c:	2003e074 	.word	0x2003e074
   d5740:	000df5e9 	.word	0x000df5e9
   d5744:	000df64c 	.word	0x000df64c
   d5748:	000df627 	.word	0x000df627
   d574c:	2003e220 	.word	0x2003e220
   d5750:	2003e200 	.word	0x2003e200

000d5754 <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   d5754:	ee07 0a90 	vmov	s15, r0
   d5758:	ed9f 7a09 	vldr	s14, [pc, #36]	; d5780 <_Z17tmp36TemperatureCi+0x2c>
   d575c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5760:	ee67 7a87 	vmul.f32	s15, s15, s14
   d5764:	ed9f 7a07 	vldr	s14, [pc, #28]	; d5784 <_Z17tmp36TemperatureCi+0x30>
   d5768:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   d576c:	eddf 7a06 	vldr	s15, [pc, #24]	; d5788 <_Z17tmp36TemperatureCi+0x34>
   d5770:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   d5774:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   d5778:	ee87 0a80 	vdiv.f32	s0, s15, s0
   d577c:	4770      	bx	lr
   d577e:	bf00      	nop
   d5780:	454e4000 	.word	0x454e4000
   d5784:	457ff000 	.word	0x457ff000
   d5788:	43fa0000 	.word	0x43fa0000

000d578c <_Z12batteryStatev>:
 * from sleep.  In order to help with this, there is a test for enable sleep and an additional delay.
 * 
 * @return true  - If the battery has a charge over 60%
 * @return false - Less than 60% indicates a low battery condition
 */
bool batteryState() {
   d578c:	b510      	push	{r4, lr}
   d578e:	b086      	sub	sp, #24
    const diag_source* src = nullptr;
   d5790:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d5792:	a902      	add	r1, sp, #8
   d5794:	2007      	movs	r0, #7
    const diag_source* src = nullptr;
   d5796:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
   d5798:	f005 f998 	bl	daacc <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d579c:	b9b8      	cbnz	r0, d57ce <_Z12batteryStatev+0x42>
    return get(src, val);
   d579e:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
   d57a0:	b10c      	cbz	r4, d57a6 <_Z12batteryStatev+0x1a>
   d57a2:	6923      	ldr	r3, [r4, #16]
   d57a4:	b923      	cbnz	r3, d57b0 <_Z12batteryStatev+0x24>
   d57a6:	4a19      	ldr	r2, [pc, #100]	; (d580c <_Z12batteryStatev+0x80>)
   d57a8:	2100      	movs	r1, #0
   d57aa:	200a      	movs	r0, #10
   d57ac:	f005 f966 	bl	daa7c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d57b0:	2300      	movs	r3, #0
   d57b2:	f8ad 300e 	strh.w	r3, [sp, #14]
   d57b6:	230c      	movs	r3, #12
   d57b8:	f8ad 300c 	strh.w	r3, [sp, #12]
   d57bc:	ab01      	add	r3, sp, #4
   d57be:	9304      	str	r3, [sp, #16]
   d57c0:	2304      	movs	r3, #4
   d57c2:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d57c4:	aa03      	add	r2, sp, #12
   d57c6:	6923      	ldr	r3, [r4, #16]
   d57c8:	2101      	movs	r1, #1
   d57ca:	4620      	mov	r0, r4
   d57cc:	4798      	blx	r3
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context

  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d57ce:	4a10      	ldr	r2, [pc, #64]	; (d5810 <_Z12batteryStatev+0x84>)
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d57d0:	4c10      	ldr	r4, [pc, #64]	; (d5814 <_Z12batteryStatev+0x88>)
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d57d2:	7a12      	ldrb	r2, [r2, #8]
        if (r < 0) {
   d57d4:	2800      	cmp	r0, #0
        return val;
   d57d6:	bfa8      	it	ge
   d57d8:	9801      	ldrge	r0, [sp, #4]
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d57da:	7220      	strb	r0, [r4, #8]
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d57dc:	b132      	cbz	r2, d57ec <_Z12batteryStatev+0x60>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   d57de:	480e      	ldr	r0, [pc, #56]	; (d5818 <_Z12batteryStatev+0x8c>)
   d57e0:	f006 f858 	bl	db894 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   d57e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d57e8:	f005 fb22 	bl	dae30 <delay>
  }

  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d57ec:	480a      	ldr	r0, [pc, #40]	; (d5818 <_Z12batteryStatev+0x8c>)
   d57ee:	f005 fff1 	bl	db7d4 <_ZN9FuelGauge6getSoCEv>
   d57f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d57f6:	ee17 0a90 	vmov	r0, s15

  if (current.stateOfCharge > 60) return true;
  else return false;
}
   d57fa:	283c      	cmp	r0, #60	; 0x3c
   d57fc:	bfd4      	ite	le
   d57fe:	2000      	movle	r0, #0
   d5800:	2001      	movgt	r0, #1
  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d5802:	edc4 7a01 	vstr	s15, [r4, #4]
}
   d5806:	b006      	add	sp, #24
   d5808:	bd10      	pop	{r4, pc}
   d580a:	bf00      	nop
   d580c:	000da62d 	.word	0x000da62d
   d5810:	2003e220 	.word	0x2003e220
   d5814:	2003e200 	.word	0x2003e200
   d5818:	2003e248 	.word	0x2003e248

000d581c <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   d581c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  PMIC pmic(true);
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d581e:	4d0c      	ldr	r5, [pc, #48]	; (d5850 <_Z16isItSafeToChargev+0x34>)
  PMIC pmic(true);
   d5820:	2101      	movs	r1, #1
   d5822:	a801      	add	r0, sp, #4
   d5824:	f007 fbb1 	bl	dcf8a <_ZN4PMICC1Eb>
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d5828:	782b      	ldrb	r3, [r5, #0]
   d582a:	2b25      	cmp	r3, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   d582c:	a801      	add	r0, sp, #4
   d582e:	f04f 0401 	mov.w	r4, #1
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d5832:	d909      	bls.n	d5848 <_Z16isItSafeToChargev+0x2c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   d5834:	f007 fc3c 	bl	dd0b0 <_ZN4PMIC15disableChargingEv>
    current.batteryState = 1;                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d5838:	722c      	strb	r4, [r5, #8]
    return false;
   d583a:	2400      	movs	r4, #0
  PMIC pmic(true);
   d583c:	a801      	add	r0, sp, #4
   d583e:	f007 fbb3 	bl	dcfa8 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   d5842:	4620      	mov	r0, r4
   d5844:	b003      	add	sp, #12
   d5846:	bd30      	pop	{r4, r5, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   d5848:	f007 fc1b 	bl	dd082 <_ZN4PMIC14enableChargingEv>
    return true;
   d584c:	e7f6      	b.n	d583c <_Z16isItSafeToChargev+0x20>
   d584e:	bf00      	nop
   d5850:	2003e200 	.word	0x2003e200

000d5854 <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   d5854:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d5856:	4d19      	ldr	r5, [pc, #100]	; (d58bc <_Z17getSignalStrengthv+0x68>)
   d5858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d585a:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d585c:	ac04      	add	r4, sp, #16
   d585e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5864:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5868:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d586c:	4914      	ldr	r1, [pc, #80]	; (d58c0 <_Z17getSignalStrengthv+0x6c>)
   d586e:	a80e      	add	r0, sp, #56	; 0x38
   d5870:	f005 fb38 	bl	daee4 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d5874:	a80e      	add	r0, sp, #56	; 0x38
   d5876:	f005 fb88 	bl	daf8a <_ZNK14CellularSignal19getAccessTechnologyEv>
   d587a:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d587c:	a80e      	add	r0, sp, #56	; 0x38
   d587e:	f005 fb9f 	bl	dafc0 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d5882:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d5884:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d5888:	f005 fbca 	bl	db020 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d588c:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d588e:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d5892:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d5896:	f008 fd23 	bl	de2e0 <__aeabi_f2d>
   d589a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d589e:	4628      	mov	r0, r5
   d58a0:	f008 fd1e 	bl	de2e0 <__aeabi_f2d>
   d58a4:	e9cd 0100 	strd	r0, r1, [sp]
   d58a8:	4a06      	ldr	r2, [pc, #24]	; (d58c4 <_Z17getSignalStrengthv+0x70>)
   d58aa:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d58ae:	4806      	ldr	r0, [pc, #24]	; (d58c8 <_Z17getSignalStrengthv+0x74>)
   d58b0:	2140      	movs	r1, #64	; 0x40
   d58b2:	f005 fa6d 	bl	dad90 <snprintf>
   d58b6:	b019      	add	sp, #100	; 0x64
   d58b8:	bd30      	pop	{r4, r5, pc}
   d58ba:	bf00      	nop
   d58bc:	000df6c8 	.word	0x000df6c8
   d58c0:	2003e49c 	.word	0x2003e49c
   d58c4:	000df68e 	.word	0x000df68e
   d58c8:	2003dbfc 	.word	0x2003dbfc

000d58cc <_Z16takeMeasurementsv>:
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d58cc:	4b10      	ldr	r3, [pc, #64]	; (d5910 <_Z16takeMeasurementsv+0x44>)
bool takeMeasurements() { 
   d58ce:	b510      	push	{r4, lr}
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d58d0:	8818      	ldrh	r0, [r3, #0]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d58d2:	4c10      	ldr	r4, [pc, #64]	; (d5914 <_Z16takeMeasurementsv+0x48>)
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d58d4:	f008 faff 	bl	dded6 <analogRead>
   d58d8:	f7ff ff3c 	bl	d5754 <_Z17tmp36TemperatureCi>
   d58dc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d58e0:	4a0d      	ldr	r2, [pc, #52]	; (d5918 <_Z16takeMeasurementsv+0x4c>)
   d58e2:	ee17 3a90 	vmov	r3, s15
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d58e6:	2110      	movs	r1, #16
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d58e8:	7013      	strb	r3, [r2, #0]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d58ea:	4620      	mov	r0, r4
   d58ec:	b2db      	uxtb	r3, r3
   d58ee:	4a0b      	ldr	r2, [pc, #44]	; (d591c <_Z16takeMeasurementsv+0x50>)
   d58f0:	f005 fa4e 	bl	dad90 <snprintf>
    Log.info("Internal Temperature is %s",internalTempStr);
   d58f4:	490a      	ldr	r1, [pc, #40]	; (d5920 <_Z16takeMeasurementsv+0x54>)
   d58f6:	480b      	ldr	r0, [pc, #44]	; (d5924 <_Z16takeMeasurementsv+0x58>)
   d58f8:	4622      	mov	r2, r4
   d58fa:	f7fe fbe5 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    batteryState();
   d58fe:	f7ff ff45 	bl	d578c <_Z12batteryStatev>
    isItSafeToCharge();
   d5902:	f7ff ff8b 	bl	d581c <_Z16isItSafeToChargev>
    getSignalStrength();
   d5906:	f7ff ffa5 	bl	d5854 <_Z17getSignalStrengthv>
}
   d590a:	2001      	movs	r0, #1
   d590c:	bd10      	pop	{r4, pc}
   d590e:	bf00      	nop
   d5910:	000df274 	.word	0x000df274
   d5914:	2003dbec 	.word	0x2003dbec
   d5918:	2003e200 	.word	0x2003e200
   d591c:	000df6a7 	.word	0x000df6a7
   d5920:	000df6ac 	.word	0x000df6ac
   d5924:	2003e570 	.word	0x2003e570

000d5928 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   d5928:	4801      	ldr	r0, [pc, #4]	; (d5930 <_GLOBAL__sub_I_batteryContext+0x8>)
   d592a:	2100      	movs	r1, #0
   d592c:	f005 bf04 	b.w	db738 <_ZN9FuelGaugeC1Eb>
   d5930:	2003e248 	.word	0x2003e248

000d5934 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d5934:	4770      	bx	lr

000d5936 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d5936:	b510      	push	{r4, lr}
}
   d5938:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d593a:	4604      	mov	r4, r0
}
   d593c:	f008 fb5c 	bl	ddff8 <_ZdlPvj>
   d5940:	4620      	mov	r0, r4
   d5942:	bd10      	pop	{r4, pc}

000d5944 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d5944:	b40e      	push	{r1, r2, r3}
   d5946:	b510      	push	{r4, lr}
   d5948:	b08d      	sub	sp, #52	; 0x34
   d594a:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d594c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d594e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5952:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d5954:	2300      	movs	r3, #0
   d5956:	2020      	movs	r0, #32
   d5958:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d595c:	e9cd 4200 	strd	r4, r2, [sp]
   d5960:	2001      	movs	r0, #1
   d5962:	aa04      	add	r2, sp, #16
   d5964:	f005 f89a 	bl	daa9c <log_message_v>
}
   d5968:	b00d      	add	sp, #52	; 0x34
   d596a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d596e:	b003      	add	sp, #12
   d5970:	4770      	bx	lr

000d5972 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d5972:	b40e      	push	{r1, r2, r3}
   d5974:	b510      	push	{r4, lr}
   d5976:	b08d      	sub	sp, #52	; 0x34
   d5978:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d597a:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d597c:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5980:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d5982:	2300      	movs	r3, #0
   d5984:	2020      	movs	r0, #32
   d5986:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d598a:	e9cd 4200 	strd	r4, r2, [sp]
   d598e:	2032      	movs	r0, #50	; 0x32
   d5990:	aa04      	add	r2, sp, #16
   d5992:	f005 f883 	bl	daa9c <log_message_v>
}
   d5996:	b00d      	add	sp, #52	; 0x34
   d5998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d599c:	b003      	add	sp, #12
   d599e:	4770      	bx	lr

000d59a0 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d59a0:	b510      	push	{r4, lr}
   d59a2:	7202      	strb	r2, [r0, #8]
   d59a4:	22ff      	movs	r2, #255	; 0xff
   d59a6:	8142      	strh	r2, [r0, #10]
   d59a8:	2200      	movs	r2, #0
   d59aa:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d59ae:	6142      	str	r2, [r0, #20]
   d59b0:	7602      	strb	r2, [r0, #24]
   d59b2:	61c2      	str	r2, [r0, #28]
    instance = this;
   d59b4:	4a02      	ldr	r2, [pc, #8]	; (d59c0 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d59b6:	4c03      	ldr	r4, [pc, #12]	; (d59c4 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d59b8:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d59ba:	e9c0 4100 	strd	r4, r1, [r0]
}
   d59be:	bd10      	pop	{r4, pc}
   d59c0:	2003e254 	.word	0x2003e254
   d59c4:	000df8f4 	.word	0x000df8f4

000d59c8 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d59c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d59cc:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d59d0:	4604      	mov	r4, r0
   d59d2:	4689      	mov	r9, r1
   d59d4:	4616      	mov	r6, r2
   d59d6:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d59d8:	f1b8 0f00 	cmp.w	r8, #0
   d59dc:	d002      	beq.n	d59e4 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d59de:	6840      	ldr	r0, [r0, #4]
   d59e0:	f005 fff2 	bl	db9c8 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d59e4:	7a21      	ldrb	r1, [r4, #8]
   d59e6:	6860      	ldr	r0, [r4, #4]
   d59e8:	f005 ffcb 	bl	db982 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d59ec:	6860      	ldr	r0, [r4, #4]
   d59ee:	6803      	ldr	r3, [r0, #0]
   d59f0:	4649      	mov	r1, r9
   d59f2:	689b      	ldr	r3, [r3, #8]
   d59f4:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d59f6:	6860      	ldr	r0, [r4, #4]
   d59f8:	2100      	movs	r1, #0
   d59fa:	f005 ffe1 	bl	db9c0 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d59fe:	4605      	mov	r5, r0
   d5a00:	bb00      	cbnz	r0, d5a44 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d5a02:	2301      	movs	r3, #1
   d5a04:	7a21      	ldrb	r1, [r4, #8]
   d5a06:	6860      	ldr	r0, [r4, #4]
   d5a08:	463a      	mov	r2, r7
   d5a0a:	f005 ffa8 	bl	db95e <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d5a0e:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d5a10:	4603      	mov	r3, r0
        if (count == num) {
   d5a12:	d109      	bne.n	d5a28 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d5a14:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d5a16:	42be      	cmp	r6, r7
   d5a18:	d01c      	beq.n	d5a54 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d5a1a:	6860      	ldr	r0, [r4, #4]
   d5a1c:	6803      	ldr	r3, [r0, #0]
   d5a1e:	695b      	ldr	r3, [r3, #20]
   d5a20:	4798      	blx	r3
   d5a22:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d5a26:	e7f6      	b.n	d5a16 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d5a28:	490b      	ldr	r1, [pc, #44]	; (d5a58 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d5a2a:	480c      	ldr	r0, [pc, #48]	; (d5a5c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d5a2c:	464a      	mov	r2, r9
   d5a2e:	f7ff ffa0 	bl	d5972 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d5a32:	f1b8 0f00 	cmp.w	r8, #0
   d5a36:	d002      	beq.n	d5a3e <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d5a38:	6860      	ldr	r0, [r4, #4]
   d5a3a:	f005 ffce 	bl	db9da <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d5a3e:	4628      	mov	r0, r5
   d5a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d5a44:	4603      	mov	r3, r0
   d5a46:	4906      	ldr	r1, [pc, #24]	; (d5a60 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d5a48:	4804      	ldr	r0, [pc, #16]	; (d5a5c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d5a4a:	464a      	mov	r2, r9
   d5a4c:	f7ff ff91 	bl	d5972 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d5a50:	2500      	movs	r5, #0
   d5a52:	e7ee      	b.n	d5a32 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d5a54:	2501      	movs	r5, #1
   d5a56:	e7ec      	b.n	d5a32 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d5a58:	000df6f0 	.word	0x000df6f0
   d5a5c:	2003e250 	.word	0x2003e250
   d5a60:	000df715 	.word	0x000df715

000d5a64 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d5a64:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d5a66:	9300      	str	r3, [sp, #0]
   d5a68:	2301      	movs	r3, #1
   d5a6a:	f7ff ffad 	bl	d59c8 <_ZN6AB180513readRegistersEhPhjb>
}
   d5a6e:	b003      	add	sp, #12
   d5a70:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a74 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d5a74:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d5a76:	8943      	ldrh	r3, [r0, #10]
   d5a78:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d5a7a:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d5a7c:	d010      	beq.n	d5aa0 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d5a7e:	4e19      	ldr	r6, [pc, #100]	; (d5ae4 <_ZN6AB180510detectChipEv+0x70>)
   d5a80:	4d19      	ldr	r5, [pc, #100]	; (d5ae8 <_ZN6AB180510detectChipEv+0x74>)
   d5a82:	f004 fddb 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d5a86:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d5a8a:	d209      	bcs.n	d5aa0 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d5a8c:	8960      	ldrh	r0, [r4, #10]
   d5a8e:	f008 fa0f 	bl	ddeb0 <digitalRead>
   d5a92:	2801      	cmp	r0, #1
   d5a94:	d004      	beq.n	d5aa0 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d5a96:	4631      	mov	r1, r6
   d5a98:	4628      	mov	r0, r5
   d5a9a:	f7fe fb15 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d5a9e:	e7f0      	b.n	d5a82 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d5aa0:	2301      	movs	r3, #1
   d5aa2:	f10d 0207 	add.w	r2, sp, #7
   d5aa6:	2128      	movs	r1, #40	; 0x28
   d5aa8:	4620      	mov	r0, r4
   d5aaa:	f7ff ffdb 	bl	d5a64 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d5aae:	b930      	cbnz	r0, d5abe <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d5ab0:	480d      	ldr	r0, [pc, #52]	; (d5ae8 <_ZN6AB180510detectChipEv+0x74>)
   d5ab2:	490e      	ldr	r1, [pc, #56]	; (d5aec <_ZN6AB180510detectChipEv+0x78>)
   d5ab4:	f7fe fb08 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d5ab8:	2000      	movs	r0, #0
}
   d5aba:	b002      	add	sp, #8
   d5abc:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d5abe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5ac2:	2b18      	cmp	r3, #24
   d5ac4:	d1f4      	bne.n	d5ab0 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d5ac6:	2301      	movs	r3, #1
   d5ac8:	f10d 0207 	add.w	r2, sp, #7
   d5acc:	2129      	movs	r1, #41	; 0x29
   d5ace:	4620      	mov	r0, r4
   d5ad0:	f7ff ffc8 	bl	d5a64 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d5ad4:	2800      	cmp	r0, #0
   d5ad6:	d0eb      	beq.n	d5ab0 <_ZN6AB180510detectChipEv+0x3c>
   d5ad8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5adc:	2b05      	cmp	r3, #5
   d5ade:	d1e7      	bne.n	d5ab0 <_ZN6AB180510detectChipEv+0x3c>
   d5ae0:	e7eb      	b.n	d5aba <_ZN6AB180510detectChipEv+0x46>
   d5ae2:	bf00      	nop
   d5ae4:	000df739 	.word	0x000df739
   d5ae8:	2003e250 	.word	0x2003e250
   d5aec:	000df74e 	.word	0x000df74e

000d5af0 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d5af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5af4:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d5af8:	4604      	mov	r4, r0
   d5afa:	460f      	mov	r7, r1
   d5afc:	4615      	mov	r5, r2
   d5afe:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d5b00:	f1b8 0f00 	cmp.w	r8, #0
   d5b04:	d002      	beq.n	d5b0c <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d5b06:	6840      	ldr	r0, [r0, #4]
   d5b08:	f005 ff5e 	bl	db9c8 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d5b0c:	7a21      	ldrb	r1, [r4, #8]
   d5b0e:	6860      	ldr	r0, [r4, #4]
   d5b10:	f005 ff37 	bl	db982 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d5b14:	6860      	ldr	r0, [r4, #4]
   d5b16:	6803      	ldr	r3, [r0, #0]
   d5b18:	4639      	mov	r1, r7
   d5b1a:	689b      	ldr	r3, [r3, #8]
   d5b1c:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d5b1e:	442e      	add	r6, r5
   d5b20:	42b5      	cmp	r5, r6
   d5b22:	6860      	ldr	r0, [r4, #4]
   d5b24:	d005      	beq.n	d5b32 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d5b26:	6803      	ldr	r3, [r0, #0]
   d5b28:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5b2c:	689b      	ldr	r3, [r3, #8]
   d5b2e:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d5b30:	e7f6      	b.n	d5b20 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d5b32:	2101      	movs	r1, #1
   d5b34:	f005 ff44 	bl	db9c0 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d5b38:	4603      	mov	r3, r0
   d5b3a:	b170      	cbz	r0, d5b5a <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d5b3c:	4908      	ldr	r1, [pc, #32]	; (d5b60 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d5b3e:	4809      	ldr	r0, [pc, #36]	; (d5b64 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d5b40:	463a      	mov	r2, r7
   d5b42:	f7ff ff16 	bl	d5972 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d5b46:	2500      	movs	r5, #0
    }

    if (lock) {
   d5b48:	f1b8 0f00 	cmp.w	r8, #0
   d5b4c:	d002      	beq.n	d5b54 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d5b4e:	6860      	ldr	r0, [r4, #4]
   d5b50:	f005 ff43 	bl	db9da <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d5b54:	4628      	mov	r0, r5
   d5b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d5b5a:	2501      	movs	r5, #1
   d5b5c:	e7f4      	b.n	d5b48 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d5b5e:	bf00      	nop
   d5b60:	000df75b 	.word	0x000df75b
   d5b64:	2003e250 	.word	0x2003e250

000d5b68 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d5b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5b6a:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d5b6e:	9300      	str	r3, [sp, #0]
   d5b70:	f10d 020f 	add.w	r2, sp, #15
   d5b74:	2301      	movs	r3, #1
   d5b76:	f7ff ffbb 	bl	d5af0 <_ZN6AB180514writeRegistersEhPKhjb>
}
   d5b7a:	b005      	add	sp, #20
   d5b7c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5b80 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d5b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d5b82:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d5b84:	460c      	mov	r4, r1
   d5b86:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d5b88:	491a      	ldr	r1, [pc, #104]	; (d5bf4 <_ZN6AB18056setWDTEi+0x74>)
   d5b8a:	481b      	ldr	r0, [pc, #108]	; (d5bf8 <_ZN6AB18056setWDTEi+0x78>)
   d5b8c:	f7fe fa9c 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d5b90:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d5b92:	bfb8      	it	lt
   d5b94:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d5b96:	b97c      	cbnz	r4, d5bb8 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d5b98:	2301      	movs	r3, #1
   d5b9a:	4622      	mov	r2, r4
   d5b9c:	211b      	movs	r1, #27
   d5b9e:	4628      	mov	r0, r5
   d5ba0:	f7ff ffe2 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d5ba4:	4915      	ldr	r1, [pc, #84]	; (d5bfc <_ZN6AB18056setWDTEi+0x7c>)
   d5ba6:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d5ba8:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d5baa:	4813      	ldr	r0, [pc, #76]	; (d5bf8 <_ZN6AB18056setWDTEi+0x78>)
   d5bac:	f7ff feca 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d5bb0:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d5bb2:	616c      	str	r4, [r5, #20]
}
   d5bb4:	4630      	mov	r0, r6
   d5bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d5bb8:	2c03      	cmp	r4, #3
   d5bba:	dd19      	ble.n	d5bf0 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d5bbc:	10a7      	asrs	r7, r4, #2
   d5bbe:	2f1f      	cmp	r7, #31
   d5bc0:	bfa8      	it	ge
   d5bc2:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d5bc4:	00ba      	lsls	r2, r7, #2
   d5bc6:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d5bca:	2301      	movs	r3, #1
   d5bcc:	b2d2      	uxtb	r2, r2
   d5bce:	211b      	movs	r1, #27
   d5bd0:	4628      	mov	r0, r5
   d5bd2:	f7ff ffc9 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d5bd6:	463a      	mov	r2, r7
   d5bd8:	4603      	mov	r3, r0
   d5bda:	4909      	ldr	r1, [pc, #36]	; (d5c00 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d5bdc:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d5bde:	4806      	ldr	r0, [pc, #24]	; (d5bf8 <_ZN6AB18056setWDTEi+0x78>)
   d5be0:	f7ff feb0 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d5be4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d5be8:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d5bea:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d5bec:	616f      	str	r7, [r5, #20]
   d5bee:	e7e1      	b.n	d5bb4 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d5bf0:	2701      	movs	r7, #1
   d5bf2:	e7e7      	b.n	d5bc4 <_ZN6AB18056setWDTEi+0x44>
   d5bf4:	000df780 	.word	0x000df780
   d5bf8:	2003e250 	.word	0x2003e250
   d5bfc:	000df78a 	.word	0x000df78a
   d5c00:	000df7a6 	.word	0x000df7a6

000d5c04 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d5c04:	460b      	mov	r3, r1
    if (instance) {
   d5c06:	4907      	ldr	r1, [pc, #28]	; (d5c24 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d5c08:	4602      	mov	r2, r0
    if (instance) {
   d5c0a:	6808      	ldr	r0, [r1, #0]
   d5c0c:	b148      	cbz	r0, d5c22 <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d5c0e:	2b00      	cmp	r3, #0
   d5c10:	bf08      	it	eq
   d5c12:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d5c16:	d104      	bne.n	d5c22 <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d5c18:	68c3      	ldr	r3, [r0, #12]
   d5c1a:	b113      	cbz	r3, d5c22 <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d5c1c:	2100      	movs	r1, #0
   d5c1e:	f7ff bfaf 	b.w	d5b80 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d5c22:	4770      	bx	lr
   d5c24:	2003e254 	.word	0x2003e254

000d5c28 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d5c28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5c2c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5c30:	4605      	mov	r5, r0
   d5c32:	4616      	mov	r6, r2
   d5c34:	461f      	mov	r7, r3
    if (lock) {
   d5c36:	f1b8 0f00 	cmp.w	r8, #0
   d5c3a:	d004      	beq.n	d5c46 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d5c3c:	6840      	ldr	r0, [r0, #4]
   d5c3e:	9101      	str	r1, [sp, #4]
   d5c40:	f005 fec2 	bl	db9c8 <_ZN7TwoWire4lockEv>
   d5c44:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d5c46:	9101      	str	r1, [sp, #4]
   d5c48:	2300      	movs	r3, #0
   d5c4a:	f10d 020f 	add.w	r2, sp, #15
   d5c4e:	4628      	mov	r0, r5
   d5c50:	f7ff ff08 	bl	d5a64 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d5c54:	4604      	mov	r4, r0
   d5c56:	b160      	cbz	r0, d5c72 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d5c58:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d5c5c:	ea03 0206 	and.w	r2, r3, r6
   d5c60:	433a      	orrs	r2, r7
        if (newValue != value) {
   d5c62:	4293      	cmp	r3, r2
   d5c64:	d005      	beq.n	d5c72 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d5c66:	9901      	ldr	r1, [sp, #4]
   d5c68:	2300      	movs	r3, #0
   d5c6a:	4628      	mov	r0, r5
   d5c6c:	f7ff ff7c 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
   d5c70:	4604      	mov	r4, r0
    if (lock) {
   d5c72:	f1b8 0f00 	cmp.w	r8, #0
   d5c76:	d002      	beq.n	d5c7e <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d5c78:	6868      	ldr	r0, [r5, #4]
   d5c7a:	f005 feae 	bl	db9da <_ZN7TwoWire6unlockEv>
}
   d5c7e:	4620      	mov	r0, r4
   d5c80:	b004      	add	sp, #16
   d5c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5c88 <_ZN6AB180511resetConfigEm>:
bool AB1805::resetConfig(uint32_t flags) {
   d5c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5c8a:	4604      	mov	r4, r0
    _log.trace("resetConfig(0x%08lx)", flags);
   d5c8c:	460a      	mov	r2, r1
   d5c8e:	483f      	ldr	r0, [pc, #252]	; (d5d8c <_ZN6AB180511resetConfigEm+0x104>)
bool AB1805::resetConfig(uint32_t flags) {
   d5c90:	460d      	mov	r5, r1
    _log.trace("resetConfig(0x%08lx)", flags);
   d5c92:	493f      	ldr	r1, [pc, #252]	; (d5d90 <_ZN6AB180511resetConfigEm+0x108>)
   d5c94:	f7ff fe56 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
    wire.lock();
   d5c98:	6860      	ldr	r0, [r4, #4]
   d5c9a:	f005 fe95 	bl	db9c8 <_ZN7TwoWire4lockEv>
    writeRegister(REG_STATUS, REG_STATUS_DEFAULT, false);
   d5c9e:	2300      	movs	r3, #0
   d5ca0:	461a      	mov	r2, r3
   d5ca2:	210f      	movs	r1, #15
   d5ca4:	4620      	mov	r0, r4
   d5ca6:	f7ff ff5f 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_1, REG_CTRL_1_DEFAULT, false);
   d5caa:	2300      	movs	r3, #0
   d5cac:	2213      	movs	r2, #19
   d5cae:	2110      	movs	r1, #16
   d5cb0:	4620      	mov	r0, r4
   d5cb2:	f7ff ff59 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_2, REG_CTRL_2_DEFAULT, false);
   d5cb6:	2300      	movs	r3, #0
   d5cb8:	223c      	movs	r2, #60	; 0x3c
   d5cba:	2111      	movs	r1, #17
   d5cbc:	4620      	mov	r0, r4
   d5cbe:	f7ff ff53 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_INT_MASK, REG_INT_MASK_DEFAULT, false);
   d5cc2:	2300      	movs	r3, #0
   d5cc4:	22e0      	movs	r2, #224	; 0xe0
   d5cc6:	2112      	movs	r1, #18
   d5cc8:	4620      	mov	r0, r4
   d5cca:	f7ff ff4d 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SQW, REG_SQW_DEFAULT, false);
   d5cce:	2300      	movs	r3, #0
   d5cd0:	2226      	movs	r2, #38	; 0x26
   d5cd2:	2113      	movs	r1, #19
   d5cd4:	4620      	mov	r0, r4
   d5cd6:	f7ff ff47 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_DEFAULT, false);
   d5cda:	2300      	movs	r3, #0
   d5cdc:	461a      	mov	r2, r3
   d5cde:	2117      	movs	r1, #23
   d5ce0:	4620      	mov	r0, r4
   d5ce2:	f7ff ff41 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
    if ((flags & RESET_PRESERVE_REPEATING_TIMER) != 0) {
   d5ce6:	f015 0301 	ands.w	r3, r5, #1
   d5cea:	d048      	beq.n	d5d7e <_ZN6AB180511resetConfigEm+0xf6>
        maskRegister(REG_TIMER_CTRL, ~REG_TIMER_CTRL_RPT_MASK, REG_TIMER_CTRL_DEFAULT & ~REG_TIMER_CTRL_RPT_MASK, false);
   d5cec:	2300      	movs	r3, #0
   d5cee:	9300      	str	r3, [sp, #0]
   d5cf0:	22e3      	movs	r2, #227	; 0xe3
   d5cf2:	2323      	movs	r3, #35	; 0x23
   d5cf4:	2118      	movs	r1, #24
   d5cf6:	4620      	mov	r0, r4
   d5cf8:	f7ff ff96 	bl	d5c28 <_ZN6AB180512maskRegisterEhhhb>
    writeRegister(REG_TIMER, REG_TIMER_DEFAULT, false);
   d5cfc:	2300      	movs	r3, #0
   d5cfe:	461a      	mov	r2, r3
   d5d00:	2119      	movs	r1, #25
   d5d02:	4620      	mov	r0, r4
   d5d04:	f7ff ff30 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TIMER_INITIAL, REG_TIMER_INITIAL_DEFAULT, false);
   d5d08:	2300      	movs	r3, #0
   d5d0a:	461a      	mov	r2, r3
   d5d0c:	211a      	movs	r1, #26
   d5d0e:	4620      	mov	r0, r4
   d5d10:	f7ff ff2a 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_WDT, REG_WDT_DEFAULT, false);
   d5d14:	2300      	movs	r3, #0
   d5d16:	461a      	mov	r2, r3
   d5d18:	211b      	movs	r1, #27
   d5d1a:	4620      	mov	r0, r4
   d5d1c:	f7ff ff24 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
        oscCtrl |= REG_OSC_CTRL_OSEL | REG_OSC_CTRL_FOS;
   d5d20:	f015 0f02 	tst.w	r5, #2
    writeRegister(REG_OSC_CTRL, oscCtrl, false);
   d5d24:	f04f 0300 	mov.w	r3, #0
   d5d28:	bf0c      	ite	eq
   d5d2a:	461a      	moveq	r2, r3
   d5d2c:	2288      	movne	r2, #136	; 0x88
   d5d2e:	211c      	movs	r1, #28
   d5d30:	4620      	mov	r0, r4
   d5d32:	f7ff ff19 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TRICKLE, REG_TRICKLE_DEFAULT, false);
   d5d36:	2300      	movs	r3, #0
   d5d38:	461a      	mov	r2, r3
   d5d3a:	2120      	movs	r1, #32
   d5d3c:	4620      	mov	r0, r4
   d5d3e:	f7ff ff13 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BREF_CTRL, REG_BREF_CTRL_DEFAULT, false);
   d5d42:	2300      	movs	r3, #0
   d5d44:	22f0      	movs	r2, #240	; 0xf0
   d5d46:	2121      	movs	r1, #33	; 0x21
   d5d48:	4620      	mov	r0, r4
   d5d4a:	f7ff ff0d 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_AFCTRL, REG_AFCTRL_DEFAULT, false);
   d5d4e:	2300      	movs	r3, #0
   d5d50:	461a      	mov	r2, r3
   d5d52:	2126      	movs	r1, #38	; 0x26
   d5d54:	4620      	mov	r0, r4
   d5d56:	f7ff ff07 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BATMODE_IO, REG_BATMODE_IO_DEFAULT, false);
   d5d5a:	2300      	movs	r3, #0
   d5d5c:	2280      	movs	r2, #128	; 0x80
   d5d5e:	2127      	movs	r1, #39	; 0x27
   d5d60:	4620      	mov	r0, r4
   d5d62:	f7ff ff01 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_OCTRL, REG_OCTRL_DEFAULT, false);
   d5d66:	2300      	movs	r3, #0
   d5d68:	461a      	mov	r2, r3
   d5d6a:	2130      	movs	r1, #48	; 0x30
   d5d6c:	4620      	mov	r0, r4
   d5d6e:	f7ff fefb 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
    wire.unlock();
   d5d72:	6860      	ldr	r0, [r4, #4]
   d5d74:	f005 fe31 	bl	db9da <_ZN7TwoWire6unlockEv>
}
   d5d78:	2001      	movs	r0, #1
   d5d7a:	b003      	add	sp, #12
   d5d7c:	bd30      	pop	{r4, r5, pc}
        writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT, false);
   d5d7e:	2223      	movs	r2, #35	; 0x23
   d5d80:	2118      	movs	r1, #24
   d5d82:	4620      	mov	r0, r4
   d5d84:	f7ff fef0 	bl	d5b68 <_ZN6AB180513writeRegisterEhhb>
   d5d88:	e7b8      	b.n	d5cfc <_ZN6AB180511resetConfigEm+0x74>
   d5d8a:	bf00      	nop
   d5d8c:	2003e250 	.word	0x2003e250
   d5d90:	000df7ca 	.word	0x000df7ca

000d5d94 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5d94:	b513      	push	{r0, r1, r4, lr}
   d5d96:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d5d98:	f10d 0207 	add.w	r2, sp, #7
   d5d9c:	f7ff fe62 	bl	d5a64 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d5da0:	b128      	cbz	r0, d5dae <_ZN6AB180510isBitClearEhhb+0x1a>
   d5da2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5da6:	421c      	tst	r4, r3
   d5da8:	bf0c      	ite	eq
   d5daa:	2001      	moveq	r0, #1
   d5dac:	2000      	movne	r0, #0
}
   d5dae:	b002      	add	sp, #8
   d5db0:	bd10      	pop	{r4, pc}

000d5db2 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5db2:	b513      	push	{r0, r1, r4, lr}
   d5db4:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d5db6:	f10d 0207 	add.w	r2, sp, #7
   d5dba:	f7ff fe53 	bl	d5a64 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d5dbe:	b128      	cbz	r0, d5dcc <_ZN6AB18058isBitSetEhhb+0x1a>
   d5dc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5dc4:	421c      	tst	r4, r3
   d5dc6:	bf14      	ite	ne
   d5dc8:	2001      	movne	r0, #1
   d5dca:	2000      	moveq	r0, #0
}
   d5dcc:	b002      	add	sp, #8
   d5dce:	bd10      	pop	{r4, pc}

000d5dd0 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5dd0:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d5dd2:	43d2      	mvns	r2, r2
   d5dd4:	9300      	str	r3, [sp, #0]
   d5dd6:	b2d2      	uxtb	r2, r2
   d5dd8:	2300      	movs	r3, #0
   d5dda:	f7ff ff25 	bl	d5c28 <_ZN6AB180512maskRegisterEhhhb>
}
   d5dde:	b003      	add	sp, #12
   d5de0:	f85d fb04 	ldr.w	pc, [sp], #4

000d5de4 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d5de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d5de6:	2301      	movs	r3, #1
   d5de8:	f10d 0207 	add.w	r2, sp, #7
   d5dec:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d5dee:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d5df0:	f7ff fe38 	bl	d5a64 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d5df4:	4605      	mov	r5, r0
   d5df6:	b938      	cbnz	r0, d5e08 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d5df8:	491e      	ldr	r1, [pc, #120]	; (d5e74 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d5dfa:	481f      	ldr	r0, [pc, #124]	; (d5e78 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5dfc:	22ad      	movs	r2, #173	; 0xad
   d5dfe:	f7ff fdb8 	bl	d5972 <_ZNK5spark6Logger5errorEPKcz>
}
   d5e02:	4628      	mov	r0, r5
   d5e04:	b003      	add	sp, #12
   d5e06:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d5e08:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5e0c:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d5e10:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d5e14:	d00b      	beq.n	d5e2e <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d5e16:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d5e18:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d5e1a:	210f      	movs	r1, #15
   d5e1c:	4620      	mov	r0, r4
   d5e1e:	f7ff ffd7 	bl	d5dd0 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d5e22:	4a16      	ldr	r2, [pc, #88]	; (d5e7c <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d5e24:	4916      	ldr	r1, [pc, #88]	; (d5e80 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d5e26:	4814      	ldr	r0, [pc, #80]	; (d5e78 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5e28:	f7fe f94e 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d5e2c:	e7e9      	b.n	d5e02 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d5e2e:	2208      	movs	r2, #8
   d5e30:	2117      	movs	r1, #23
   d5e32:	4620      	mov	r0, r4
   d5e34:	f7ff ffbd 	bl	d5db2 <_ZN6AB18058isBitSetEhhb>
   d5e38:	b118      	cbz	r0, d5e42 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d5e3a:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d5e3c:	4a11      	ldr	r2, [pc, #68]	; (d5e84 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d5e3e:	61e3      	str	r3, [r4, #28]
   d5e40:	e7f0      	b.n	d5e24 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d5e42:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5e46:	071a      	lsls	r2, r3, #28
   d5e48:	d509      	bpl.n	d5e5e <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d5e4a:	2303      	movs	r3, #3
   d5e4c:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d5e4e:	2208      	movs	r2, #8
   d5e50:	2301      	movs	r3, #1
   d5e52:	210f      	movs	r1, #15
   d5e54:	4620      	mov	r0, r4
   d5e56:	f7ff ffbb 	bl	d5dd0 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d5e5a:	4a0b      	ldr	r2, [pc, #44]	; (d5e88 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d5e5c:	e7e2      	b.n	d5e24 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d5e5e:	075b      	lsls	r3, r3, #29
   d5e60:	d5cf      	bpl.n	d5e02 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d5e62:	2204      	movs	r2, #4
   d5e64:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d5e66:	2301      	movs	r3, #1
   d5e68:	210f      	movs	r1, #15
   d5e6a:	4620      	mov	r0, r4
   d5e6c:	f7ff ffb0 	bl	d5dd0 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d5e70:	4a06      	ldr	r2, [pc, #24]	; (d5e8c <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d5e72:	e7d7      	b.n	d5e24 <_ZN6AB180516updateWakeReasonEv+0x40>
   d5e74:	000df80e 	.word	0x000df80e
   d5e78:	2003e250 	.word	0x2003e250
   d5e7c:	000df7df 	.word	0x000df7df
   d5e80:	000df82d 	.word	0x000df82d
   d5e84:	000df7e8 	.word	0x000df7e8
   d5e88:	000df7f8 	.word	0x000df7f8
   d5e8c:	000df808 	.word	0x000df808

000d5e90 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5e90:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d5e92:	9300      	str	r3, [sp, #0]
   d5e94:	4613      	mov	r3, r2
   d5e96:	22ff      	movs	r2, #255	; 0xff
   d5e98:	f7ff fec6 	bl	d5c28 <_ZN6AB180512maskRegisterEhhhb>
}
   d5e9c:	b003      	add	sp, #12
   d5e9e:	f85d fb04 	ldr.w	pc, [sp], #4

000d5ea2 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d5ea2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5ea6:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d5eaa:	4605      	mov	r5, r0
   d5eac:	460c      	mov	r4, r1
   d5eae:	4691      	mov	r9, r2
   d5eb0:	461f      	mov	r7, r3
    if (lock) {
   d5eb2:	f1ba 0f00 	cmp.w	sl, #0
   d5eb6:	d002      	beq.n	d5ebe <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d5eb8:	6840      	ldr	r0, [r0, #4]
   d5eba:	f005 fd85 	bl	db9c8 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d5ebe:	b307      	cbz	r7, d5f02 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d5ec0:	2f20      	cmp	r7, #32
   d5ec2:	463e      	mov	r6, r7
   d5ec4:	bf28      	it	cs
   d5ec6:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d5ec8:	2c7f      	cmp	r4, #127	; 0x7f
   d5eca:	d826      	bhi.n	d5f1a <_ZN6AB18057readRamEjPhjb+0x78>
   d5ecc:	1933      	adds	r3, r6, r4
   d5ece:	2b80      	cmp	r3, #128	; 0x80
   d5ed0:	d901      	bls.n	d5ed6 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d5ed2:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5ed6:	2301      	movs	r3, #1
   d5ed8:	2204      	movs	r2, #4
   d5eda:	213f      	movs	r1, #63	; 0x3f
   d5edc:	4628      	mov	r0, r5
   d5ede:	f7ff ff77 	bl	d5dd0 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d5ee2:	2300      	movs	r3, #0
   d5ee4:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d5ee8:	9300      	str	r3, [sp, #0]
   d5eea:	464a      	mov	r2, r9
   d5eec:	4633      	mov	r3, r6
   d5eee:	b2c9      	uxtb	r1, r1
   d5ef0:	4628      	mov	r0, r5
   d5ef2:	f7ff fd69 	bl	d59c8 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d5ef6:	4680      	mov	r8, r0
   d5ef8:	b128      	cbz	r0, d5f06 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d5efa:	4434      	add	r4, r6
        dataLen -= count;
   d5efc:	1bbf      	subs	r7, r7, r6
        data += count;
   d5efe:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d5f00:	e7dd      	b.n	d5ebe <_ZN6AB18057readRamEjPhjb+0x1c>
   d5f02:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d5f06:	f1ba 0f00 	cmp.w	sl, #0
   d5f0a:	d002      	beq.n	d5f12 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d5f0c:	6868      	ldr	r0, [r5, #4]
   d5f0e:	f005 fd64 	bl	db9da <_ZN7TwoWire6unlockEv>
}
   d5f12:	4640      	mov	r0, r8
   d5f14:	b002      	add	sp, #8
   d5f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5f1a:	2301      	movs	r3, #1
   d5f1c:	2204      	movs	r2, #4
   d5f1e:	213f      	movs	r1, #63	; 0x3f
   d5f20:	4628      	mov	r0, r5
   d5f22:	f7ff ffb5 	bl	d5e90 <_ZN6AB180514setRegisterBitEhhb>
   d5f26:	e7dc      	b.n	d5ee2 <_ZN6AB18057readRamEjPhjb+0x40>

000d5f28 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d5f28:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5f2c:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d5f30:	4605      	mov	r5, r0
   d5f32:	460c      	mov	r4, r1
   d5f34:	4691      	mov	r9, r2
   d5f36:	461f      	mov	r7, r3
    if (lock) {
   d5f38:	f1ba 0f00 	cmp.w	sl, #0
   d5f3c:	d002      	beq.n	d5f44 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d5f3e:	6840      	ldr	r0, [r0, #4]
   d5f40:	f005 fd42 	bl	db9c8 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d5f44:	b307      	cbz	r7, d5f88 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d5f46:	2f1f      	cmp	r7, #31
   d5f48:	463e      	mov	r6, r7
   d5f4a:	bf28      	it	cs
   d5f4c:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d5f4e:	2c7f      	cmp	r4, #127	; 0x7f
   d5f50:	d826      	bhi.n	d5fa0 <_ZN6AB18058writeRamEjPKhjb+0x78>
   d5f52:	1933      	adds	r3, r6, r4
   d5f54:	2b80      	cmp	r3, #128	; 0x80
   d5f56:	d901      	bls.n	d5f5c <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d5f58:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5f5c:	2301      	movs	r3, #1
   d5f5e:	2204      	movs	r2, #4
   d5f60:	213f      	movs	r1, #63	; 0x3f
   d5f62:	4628      	mov	r0, r5
   d5f64:	f7ff ff34 	bl	d5dd0 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d5f68:	2300      	movs	r3, #0
   d5f6a:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d5f6e:	9300      	str	r3, [sp, #0]
   d5f70:	464a      	mov	r2, r9
   d5f72:	4633      	mov	r3, r6
   d5f74:	b2c9      	uxtb	r1, r1
   d5f76:	4628      	mov	r0, r5
   d5f78:	f7ff fdba 	bl	d5af0 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d5f7c:	4680      	mov	r8, r0
   d5f7e:	b128      	cbz	r0, d5f8c <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d5f80:	4434      	add	r4, r6
        dataLen -= count;
   d5f82:	1bbf      	subs	r7, r7, r6
        data += count;
   d5f84:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d5f86:	e7dd      	b.n	d5f44 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d5f88:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d5f8c:	f1ba 0f00 	cmp.w	sl, #0
   d5f90:	d002      	beq.n	d5f98 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d5f92:	6868      	ldr	r0, [r5, #4]
   d5f94:	f005 fd21 	bl	db9da <_ZN7TwoWire6unlockEv>
}
   d5f98:	4640      	mov	r0, r8
   d5f9a:	b002      	add	sp, #8
   d5f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5fa0:	2301      	movs	r3, #1
   d5fa2:	2204      	movs	r2, #4
   d5fa4:	213f      	movs	r1, #63	; 0x3f
   d5fa6:	4628      	mov	r0, r5
   d5fa8:	f7ff ff72 	bl	d5e90 <_ZN6AB180514setRegisterBitEhhb>
   d5fac:	e7dc      	b.n	d5f68 <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

000d5fb0 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d5fb0:	b530      	push	{r4, r5, lr}
   d5fb2:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d5fb4:	680d      	ldr	r5, [r1, #0]
   d5fb6:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d5fba:	9503      	str	r5, [sp, #12]
   d5fbc:	684d      	ldr	r5, [r1, #4]
   d5fbe:	9502      	str	r5, [sp, #8]
   d5fc0:	688d      	ldr	r5, [r1, #8]
   d5fc2:	9501      	str	r5, [sp, #4]
   d5fc4:	68c9      	ldr	r1, [r1, #12]
   d5fc6:	9100      	str	r1, [sp, #0]
   d5fc8:	3301      	adds	r3, #1
   d5fca:	4904      	ldr	r1, [pc, #16]	; (d5fdc <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d5fcc:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d5fd0:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d5fd2:	f007 fb33 	bl	dd63c <_ZN6String6formatEPKcz>
}
   d5fd6:	4620      	mov	r0, r4
   d5fd8:	b005      	add	sp, #20
   d5fda:	bd30      	pop	{r4, r5, pc}
   d5fdc:	000df83e 	.word	0x000df83e

000d5fe0 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d5fe0:	1103      	asrs	r3, r0, #4
}
   d5fe2:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d5fe4:	f000 000f 	and.w	r0, r0, #15
}
   d5fe8:	fb02 0003 	mla	r0, r2, r3, r0
   d5fec:	4770      	bx	lr

000d5fee <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d5fee:	b538      	push	{r3, r4, r5, lr}
   d5ff0:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d5ff2:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d5ff4:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d5ff6:	f7ff fff3 	bl	d5fe0 <_ZN6AB180510bcdToValueEh>
   d5ffa:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d5ffc:	7860      	ldrb	r0, [r4, #1]
   d5ffe:	f7ff ffef 	bl	d5fe0 <_ZN6AB180510bcdToValueEh>
   d6002:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d6004:	78a0      	ldrb	r0, [r4, #2]
   d6006:	f7ff ffeb 	bl	d5fe0 <_ZN6AB180510bcdToValueEh>
   d600a:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d600c:	78e0      	ldrb	r0, [r4, #3]
   d600e:	f7ff ffe7 	bl	d5fe0 <_ZN6AB180510bcdToValueEh>
   d6012:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6014:	7920      	ldrb	r0, [r4, #4]
   d6016:	f7ff ffe3 	bl	d5fe0 <_ZN6AB180510bcdToValueEh>
   d601a:	3801      	subs	r0, #1
   d601c:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d601e:	b92d      	cbnz	r5, d602c <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6020:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d6022:	7828      	ldrb	r0, [r5, #0]
   d6024:	f7ff ffdc 	bl	d5fe0 <_ZN6AB180510bcdToValueEh>
   d6028:	6188      	str	r0, [r1, #24]
}
   d602a:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d602c:	7960      	ldrb	r0, [r4, #5]
   d602e:	f7ff ffd7 	bl	d5fe0 <_ZN6AB180510bcdToValueEh>
   d6032:	3064      	adds	r0, #100	; 0x64
   d6034:	1da5      	adds	r5, r4, #6
   d6036:	6148      	str	r0, [r1, #20]
   d6038:	e7f3      	b.n	d6022 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d603c <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d603c:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d603e:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6040:	b088      	sub	sp, #32
   d6042:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6044:	461a      	mov	r2, r3
   d6046:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6048:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d604a:	f7ff fea3 	bl	d5d94 <_ZN6AB180510isBitClearEhhb>
   d604e:	b1f0      	cbz	r0, d608e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d6050:	2308      	movs	r3, #8
   d6052:	2601      	movs	r6, #1
   d6054:	4620      	mov	r0, r4
   d6056:	9600      	str	r6, [sp, #0]
   d6058:	eb0d 0203 	add.w	r2, sp, r3
   d605c:	2100      	movs	r1, #0
   d605e:	f7ff fcb3 	bl	d59c8 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d6062:	4604      	mov	r4, r0
   d6064:	b198      	cbz	r0, d608e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d6066:	4632      	mov	r2, r6
   d6068:	4629      	mov	r1, r5
   d606a:	f10d 0009 	add.w	r0, sp, #9
   d606e:	f7ff ffbe 	bl	d5fee <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d6072:	a804      	add	r0, sp, #16
   d6074:	f7ff ff9c 	bl	d5fb0 <_ZN6AB180510tmToStringEPK2tm>
   d6078:	4808      	ldr	r0, [pc, #32]	; (d609c <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d607a:	9a04      	ldr	r2, [sp, #16]
   d607c:	4908      	ldr	r1, [pc, #32]	; (d60a0 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d607e:	f7fe f823 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d6082:	a804      	add	r0, sp, #16
   d6084:	f007 f98e 	bl	dd3a4 <_ZN6StringD1Ev>
}
   d6088:	4620      	mov	r0, r4
   d608a:	b008      	add	sp, #32
   d608c:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d608e:	2224      	movs	r2, #36	; 0x24
   d6090:	2100      	movs	r1, #0
   d6092:	4628      	mov	r0, r5
   d6094:	f008 fc64 	bl	de960 <memset>
   d6098:	2400      	movs	r4, #0
   d609a:	e7f5      	b.n	d6088 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d609c:	2003e250 	.word	0x2003e250
   d60a0:	000df85c 	.word	0x000df85c

000d60a4 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d60a4:	b530      	push	{r4, r5, lr}
   d60a6:	b08b      	sub	sp, #44	; 0x2c
   d60a8:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d60aa:	a901      	add	r1, sp, #4
   d60ac:	f7ff ffc6 	bl	d603c <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d60b0:	4604      	mov	r4, r0
   d60b2:	b120      	cbz	r0, d60be <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d60b4:	a801      	add	r0, sp, #4
   d60b6:	f004 feb3 	bl	dae20 <mktime>
   d60ba:	e9c5 0100 	strd	r0, r1, [r5]
}
   d60be:	4620      	mov	r0, r4
   d60c0:	b00b      	add	sp, #44	; 0x2c
   d60c2:	bd30      	pop	{r4, r5, pc}

000d60c4 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d60c4:	b510      	push	{r4, lr}
   d60c6:	4604      	mov	r4, r0
   d60c8:	b088      	sub	sp, #32
    if (callBegin) {
   d60ca:	b111      	cbz	r1, d60d2 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d60cc:	6840      	ldr	r0, [r0, #4]
   d60ce:	f005 fc29 	bl	db924 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d60d2:	4620      	mov	r0, r4
   d60d4:	f7ff fcce 	bl	d5a74 <_ZN6AB180510detectChipEv>
   d60d8:	b370      	cbz	r0, d6138 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d60da:	4620      	mov	r0, r4
   d60dc:	f7ff fe82 	bl	d5de4 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d60e0:	2301      	movs	r3, #1
   d60e2:	461a      	mov	r2, r3
   d60e4:	2110      	movs	r1, #16
   d60e6:	4620      	mov	r0, r4
   d60e8:	f7ff fe54 	bl	d5d94 <_ZN6AB180510isBitClearEhhb>
   d60ec:	b1d8      	cbz	r0, d6126 <_ZN6AB18055setupEb+0x62>
   d60ee:	f007 fc7f 	bl	dd9f0 <_ZN9TimeClass7isValidEv>
   d60f2:	b9c0      	cbnz	r0, d6126 <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d60f4:	a902      	add	r1, sp, #8
   d60f6:	4620      	mov	r0, r4
   d60f8:	f7ff ffd4 	bl	d60a4 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d60fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6100:	f007 fb7d 	bl	dd7fe <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6104:	4b0f      	ldr	r3, [pc, #60]	; (d6144 <_ZN6AB18055setupEb+0x80>)
   d6106:	4910      	ldr	r1, [pc, #64]	; (d6148 <_ZN6AB18055setupEb+0x84>)
   d6108:	681b      	ldr	r3, [r3, #0]
   d610a:	9300      	str	r3, [sp, #0]
   d610c:	a804      	add	r0, sp, #16
   d610e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6112:	f007 fc2b 	bl	dd96c <_ZN9TimeClass6formatExPKc>
   d6116:	480d      	ldr	r0, [pc, #52]	; (d614c <_ZN6AB18055setupEb+0x88>)
   d6118:	9a04      	ldr	r2, [sp, #16]
   d611a:	490d      	ldr	r1, [pc, #52]	; (d6150 <_ZN6AB18055setupEb+0x8c>)
   d611c:	f7fd ffd4 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d6120:	a804      	add	r0, sp, #16
   d6122:	f007 f93f 	bl	dd3a4 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d6126:	4a0b      	ldr	r2, [pc, #44]	; (d6154 <_ZN6AB18055setupEb+0x90>)
   d6128:	2300      	movs	r3, #0
   d612a:	2100      	movs	r1, #0
   d612c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d6130:	f004 fcee 	bl	dab10 <system_subscribe_event>
}
   d6134:	b008      	add	sp, #32
   d6136:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d6138:	4907      	ldr	r1, [pc, #28]	; (d6158 <_ZN6AB18055setupEb+0x94>)
   d613a:	4804      	ldr	r0, [pc, #16]	; (d614c <_ZN6AB18055setupEb+0x88>)
   d613c:	f7ff fc19 	bl	d5972 <_ZNK5spark6Logger5errorEPKcz>
   d6140:	e7f1      	b.n	d6126 <_ZN6AB18055setupEb+0x62>
   d6142:	bf00      	nop
   d6144:	2003dc44 	.word	0x2003dc44
   d6148:	2003e5c4 	.word	0x2003e5c4
   d614c:	2003e250 	.word	0x2003e250
   d6150:	000df86a 	.word	0x000df86a
   d6154:	000d5c05 	.word	0x000d5c05
   d6158:	000df887 	.word	0x000df887

000d615c <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d615c:	220a      	movs	r2, #10
   d615e:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d6162:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d6166:	fb93 f1f2 	sdiv	r1, r3, r2
   d616a:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d616e:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d6172:	b2c0      	uxtb	r0, r0
   d6174:	4770      	bx	lr

000d6176 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6176:	b570      	push	{r4, r5, r6, lr}
   d6178:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d617a:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d617c:	460c      	mov	r4, r1
   d617e:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d6180:	f7ff ffec 	bl	d615c <_ZN6AB180510valueToBcdEi>
   d6184:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d6186:	6868      	ldr	r0, [r5, #4]
   d6188:	f7ff ffe8 	bl	d615c <_ZN6AB180510valueToBcdEi>
   d618c:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d618e:	68a8      	ldr	r0, [r5, #8]
   d6190:	f7ff ffe4 	bl	d615c <_ZN6AB180510valueToBcdEi>
   d6194:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d6196:	68e8      	ldr	r0, [r5, #12]
   d6198:	f7ff ffe0 	bl	d615c <_ZN6AB180510valueToBcdEi>
   d619c:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d619e:	6928      	ldr	r0, [r5, #16]
   d61a0:	3001      	adds	r0, #1
   d61a2:	f7ff ffdb 	bl	d615c <_ZN6AB180510valueToBcdEi>
   d61a6:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d61a8:	b92e      	cbnz	r6, d61b6 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d61aa:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d61ac:	69a8      	ldr	r0, [r5, #24]
   d61ae:	f7ff ffd5 	bl	d615c <_ZN6AB180510valueToBcdEi>
   d61b2:	7030      	strb	r0, [r6, #0]
}
   d61b4:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d61b6:	696a      	ldr	r2, [r5, #20]
   d61b8:	2364      	movs	r3, #100	; 0x64
   d61ba:	fb92 f0f3 	sdiv	r0, r2, r3
   d61be:	fb03 2010 	mls	r0, r3, r0, r2
   d61c2:	f7ff ffcb 	bl	d615c <_ZN6AB180510valueToBcdEi>
   d61c6:	1da6      	adds	r6, r4, #6
   d61c8:	7160      	strb	r0, [r4, #5]
   d61ca:	e7ef      	b.n	d61ac <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d61cc <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d61cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d61ce:	b087      	sub	sp, #28
   d61d0:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d61d2:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d61d4:	4616      	mov	r6, r2
   d61d6:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d61d8:	f7ff feea 	bl	d5fb0 <_ZN6AB180510tmToStringEPK2tm>
   d61dc:	481e      	ldr	r0, [pc, #120]	; (d6258 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d61de:	9a02      	ldr	r2, [sp, #8]
   d61e0:	491e      	ldr	r1, [pc, #120]	; (d625c <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d61e2:	f7fd ff71 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d61e6:	a802      	add	r0, sp, #8
   d61e8:	f007 f8dc 	bl	dd3a4 <_ZN6StringD1Ev>
    if (lock) {
   d61ec:	b116      	cbz	r6, d61f4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d61ee:	6868      	ldr	r0, [r5, #4]
   d61f0:	f005 fbea 	bl	db9c8 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d61f4:	4620      	mov	r0, r4
   d61f6:	2201      	movs	r2, #1
   d61f8:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d61fc:	2700      	movs	r7, #0
   d61fe:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d6202:	f7ff ffb8 	bl	d6176 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d6206:	2301      	movs	r3, #1
   d6208:	461a      	mov	r2, r3
   d620a:	2110      	movs	r1, #16
   d620c:	4628      	mov	r0, r5
   d620e:	f7ff fe3f 	bl	d5e90 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d6212:	4604      	mov	r4, r0
   d6214:	b1e8      	cbz	r0, d6252 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d6216:	2308      	movs	r3, #8
   d6218:	9700      	str	r7, [sp, #0]
   d621a:	eb0d 0203 	add.w	r2, sp, r3
   d621e:	4639      	mov	r1, r7
   d6220:	4628      	mov	r0, r5
   d6222:	f7ff fc65 	bl	d5af0 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d6226:	4604      	mov	r4, r0
   d6228:	b160      	cbz	r0, d6244 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d622a:	2301      	movs	r3, #1
   d622c:	461a      	mov	r2, r3
   d622e:	2110      	movs	r1, #16
   d6230:	4628      	mov	r0, r5
   d6232:	f7ff fdcd 	bl	d5dd0 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d6236:	b116      	cbz	r6, d623e <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d6238:	6868      	ldr	r0, [r5, #4]
   d623a:	f005 fbce 	bl	db9da <_ZN7TwoWire6unlockEv>
}
   d623e:	4620      	mov	r0, r4
   d6240:	b007      	add	sp, #28
   d6242:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d6244:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d6248:	4905      	ldr	r1, [pc, #20]	; (d6260 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d624a:	4803      	ldr	r0, [pc, #12]	; (d6258 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d624c:	f7ff fb91 	bl	d5972 <_ZNK5spark6Logger5errorEPKcz>
   d6250:	e7f1      	b.n	d6236 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d6252:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d6256:	e7f7      	b.n	d6248 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d6258:	2003e250 	.word	0x2003e250
   d625c:	000df89f 	.word	0x000df89f
   d6260:	000df8ad 	.word	0x000df8ad

000d6264 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d6264:	b513      	push	{r0, r1, r4, lr}
   d6266:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d6268:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d626a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d626e:	f008 fb3d 	bl	de8ec <gmtime>
    return setRtcFromTm(tm, lock);
   d6272:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d6276:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d6278:	4620      	mov	r0, r4
   d627a:	f7ff ffa7 	bl	d61cc <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d627e:	b002      	add	sp, #8
   d6280:	bd10      	pop	{r4, pc}
	...

000d6284 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d6284:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d6286:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d6288:	b089      	sub	sp, #36	; 0x24
   d628a:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d628c:	bb75      	cbnz	r5, d62ec <_ZN6AB18054loopEv+0x68>
   d628e:	f007 fbaf 	bl	dd9f0 <_ZN9TimeClass7isValidEv>
   d6292:	b358      	cbz	r0, d62ec <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d6294:	2600      	movs	r6, #0
   d6296:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d6298:	a904      	add	r1, sp, #16
   d629a:	4628      	mov	r0, r5
        tm = 0;
   d629c:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d62a0:	f004 fcce 	bl	dac40 <spark_sync_time_last>
   d62a4:	b310      	cbz	r0, d62ec <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d62a6:	2501      	movs	r5, #1
   d62a8:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d62aa:	f007 fbbe 	bl	dda2a <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d62ae:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d62b0:	4602      	mov	r2, r0
   d62b2:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d62b4:	4620      	mov	r0, r4
        time_t time = Time.now();
   d62b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d62ba:	f7ff ffd3 	bl	d6264 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d62be:	a902      	add	r1, sp, #8
   d62c0:	4620      	mov	r0, r4
        time = 0;
   d62c2:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d62c6:	f7ff feed 	bl	d60a4 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d62ca:	4b12      	ldr	r3, [pc, #72]	; (d6314 <_ZN6AB18054loopEv+0x90>)
   d62cc:	4912      	ldr	r1, [pc, #72]	; (d6318 <_ZN6AB18054loopEv+0x94>)
   d62ce:	681b      	ldr	r3, [r3, #0]
   d62d0:	9300      	str	r3, [sp, #0]
   d62d2:	a804      	add	r0, sp, #16
   d62d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d62d8:	f007 fb48 	bl	dd96c <_ZN9TimeClass6formatExPKc>
   d62dc:	480f      	ldr	r0, [pc, #60]	; (d631c <_ZN6AB18054loopEv+0x98>)
   d62de:	9a04      	ldr	r2, [sp, #16]
   d62e0:	490f      	ldr	r1, [pc, #60]	; (d6320 <_ZN6AB18054loopEv+0x9c>)
   d62e2:	f7fd fef1 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d62e6:	a804      	add	r0, sp, #16
   d62e8:	f007 f85c 	bl	dd3a4 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d62ec:	6963      	ldr	r3, [r4, #20]
   d62ee:	b173      	cbz	r3, d630e <_ZN6AB18054loopEv+0x8a>
   d62f0:	f004 f9a4 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d62f4:	6923      	ldr	r3, [r4, #16]
   d62f6:	1ac0      	subs	r0, r0, r3
   d62f8:	6963      	ldr	r3, [r4, #20]
   d62fa:	4298      	cmp	r0, r3
   d62fc:	d307      	bcc.n	d630e <_ZN6AB18054loopEv+0x8a>
   d62fe:	f004 f99d 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d6302:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d6306:	6120      	str	r0, [r4, #16]
            setWDT();
   d6308:	4620      	mov	r0, r4
   d630a:	f7ff fc39 	bl	d5b80 <_ZN6AB18056setWDTEi>
}
   d630e:	b009      	add	sp, #36	; 0x24
   d6310:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6312:	bf00      	nop
   d6314:	2003dc44 	.word	0x2003dc44
   d6318:	2003e5c4 	.word	0x2003e5c4
   d631c:	2003e250 	.word	0x2003e250
   d6320:	000df8c8 	.word	0x000df8c8

000d6324 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d6324:	4b01      	ldr	r3, [pc, #4]	; (d632c <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d6326:	4a02      	ldr	r2, [pc, #8]	; (d6330 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d6328:	601a      	str	r2, [r3, #0]
}
   d632a:	4770      	bx	lr
   d632c:	2003e250 	.word	0x2003e250
   d6330:	000df8de 	.word	0x000df8de

000d6334 <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6334:	2a02      	cmp	r2, #2
   d6336:	d006      	beq.n	d6346 <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x12>
   d6338:	2a03      	cmp	r2, #3
   d633a:	d002      	beq.n	d6342 <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d633c:	2a01      	cmp	r2, #1
   d633e:	d100      	bne.n	d6342 <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6340:	6001      	str	r1, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6342:	2000      	movs	r0, #0
   d6344:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6346:	680b      	ldr	r3, [r1, #0]
   d6348:	6003      	str	r3, [r0, #0]
	}
   d634a:	e7fa      	b.n	d6342 <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>

000d634c <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d634c:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d634e:	2301      	movs	r3, #1
   d6350:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d6352:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d6354:	4604      	mov	r4, r0
        if (th->func) {
   d6356:	b143      	cbz	r3, d636a <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d6358:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d635a:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d635c:	2301      	movs	r3, #1
   d635e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d6360:	2000      	movs	r0, #0
    }
   d6362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d6366:	f004 b941 	b.w	da5ec <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d636a:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d636c:	2800      	cmp	r0, #0
   d636e:	d0f5      	beq.n	d635c <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d6370:	6883      	ldr	r3, [r0, #8]
   d6372:	b90b      	cbnz	r3, d6378 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d6374:	f007 fe4c 	bl	de010 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6378:	68c3      	ldr	r3, [r0, #12]
   d637a:	e7ee      	b.n	d635a <_ZN6Thread3runEPv+0xe>

000d637c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d637c:	b510      	push	{r4, lr}
      if (_M_manager)
   d637e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6380:	4604      	mov	r4, r0
      if (_M_manager)
   d6382:	b113      	cbz	r3, d638a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6384:	2203      	movs	r2, #3
   d6386:	4601      	mov	r1, r0
   d6388:	4798      	blx	r3
    }
   d638a:	4620      	mov	r0, r4
   d638c:	bd10      	pop	{r4, pc}

000d638e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d638e:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d6390:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   d6392:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   d6394:	b135      	cbz	r5, d63a4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   d6396:	4628      	mov	r0, r5
   d6398:	f7ff fff0 	bl	d637c <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d639c:	2110      	movs	r1, #16
   d639e:	4628      	mov	r0, r5
   d63a0:	f007 fe2a 	bl	ddff8 <_ZdlPvj>
   d63a4:	4620      	mov	r0, r4
   d63a6:	2114      	movs	r1, #20
      }
   d63a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d63ac:	f007 be24 	b.w	ddff8 <_ZdlPvj>

000d63b0 <_ZN6Thread7disposeEv>:
    void dispose()
   d63b0:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d63b2:	6803      	ldr	r3, [r0, #0]
   d63b4:	4604      	mov	r4, r0
        if (!isValid())
   d63b6:	b1ab      	cbz	r3, d63e4 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   d63b8:	6858      	ldr	r0, [r3, #4]
   d63ba:	f004 f8c7 	bl	da54c <os_thread_is_current>
   d63be:	b988      	cbnz	r0, d63e4 <_ZN6Thread7disposeEv+0x34>
   d63c0:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d63c2:	7c5a      	ldrb	r2, [r3, #17]
   d63c4:	b912      	cbnz	r2, d63cc <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d63c6:	6858      	ldr	r0, [r3, #4]
   d63c8:	f004 f8c8 	bl	da55c <os_thread_join>
        os_thread_cleanup(d_->handle);
   d63cc:	6823      	ldr	r3, [r4, #0]
   d63ce:	6858      	ldr	r0, [r3, #4]
   d63d0:	f004 f8cc 	bl	da56c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d63d4:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d63d6:	2300      	movs	r3, #0
   d63d8:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d63da:	b118      	cbz	r0, d63e4 <_ZN6Thread7disposeEv+0x34>
    }
   d63dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d63e0:	f7ff bfd5 	b.w	d638e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d63e4:	bd10      	pop	{r4, pc}
	...

000d63e8 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   d63e8:	4a05      	ldr	r2, [pc, #20]	; (d6400 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   d63ea:	6002      	str	r2, [r0, #0]
   d63ec:	2200      	movs	r2, #0
   d63ee:	6042      	str	r2, [r0, #4]
   d63f0:	7302      	strb	r2, [r0, #12]
        val_(0) {
   d63f2:	f880 22bd 	strb.w	r2, [r0, #701]	; 0x2bd
    _Function_base() : _M_manager(nullptr) { }
   d63f6:	f8c0 22c8 	str.w	r2, [r0, #712]	; 0x2c8
   d63fa:	f8c0 22d0 	str.w	r2, [r0, #720]	; 0x2d0
}
   d63fe:	4770      	bx	lr
   d6400:	000df920 	.word	0x000df920

000d6404 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   d6404:	b510      	push	{r4, lr}
    if (!_instance) {
   d6406:	4c07      	ldr	r4, [pc, #28]	; (d6424 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   d6408:	6823      	ldr	r3, [r4, #0]
   d640a:	b943      	cbnz	r3, d641e <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   d640c:	f44f 7035 	mov.w	r0, #724	; 0x2d4
   d6410:	f7fd fe41 	bl	d4096 <_Znwj>
   d6414:	4603      	mov	r3, r0
   d6416:	b108      	cbz	r0, d641c <_ZN19BackgroundPublishRK8instanceEv+0x18>
   d6418:	f7ff ffe6 	bl	d63e8 <_ZN19BackgroundPublishRKC1Ev>
   d641c:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   d641e:	6820      	ldr	r0, [r4, #0]
   d6420:	bd10      	pop	{r4, pc}
   d6422:	bf00      	nop
   d6424:	2003e258 	.word	0x2003e258

000d6428 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   d6428:	b538      	push	{r3, r4, r5, lr}
   d642a:	4604      	mov	r4, r0
    if(thread)
   d642c:	6840      	ldr	r0, [r0, #4]
   d642e:	b190      	cbz	r0, d6456 <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   d6430:	2302      	movs	r3, #2
   d6432:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   d6434:	f7ff ffbc 	bl	d63b0 <_ZN6Thread7disposeEv>
        delete thread;
   d6438:	6865      	ldr	r5, [r4, #4]
   d643a:	b155      	cbz	r5, d6452 <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   d643c:	4628      	mov	r0, r5
   d643e:	f7ff ffb7 	bl	d63b0 <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   d6442:	6828      	ldr	r0, [r5, #0]
   d6444:	b108      	cbz	r0, d644a <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   d6446:	f7ff ffa2 	bl	d638e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d644a:	2104      	movs	r1, #4
   d644c:	4628      	mov	r0, r5
   d644e:	f007 fdd3 	bl	ddff8 <_ZdlPvj>
        thread = NULL;
   d6452:	2300      	movs	r3, #0
   d6454:	6063      	str	r3, [r4, #4]
    }
}
   d6456:	bd38      	pop	{r3, r4, r5, pc}

000d6458 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d6458:	b510      	push	{r4, lr}
   d645a:	4b05      	ldr	r3, [pc, #20]	; (d6470 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   d645c:	6003      	str	r3, [r0, #0]
   d645e:	4604      	mov	r4, r0
    stop();
   d6460:	f7ff ffe2 	bl	d6428 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   d6464:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d6468:	f7ff ff88 	bl	d637c <_ZNSt14_Function_baseD1Ev>
}
   d646c:	4620      	mov	r0, r4
   d646e:	bd10      	pop	{r4, pc}
   d6470:	000df920 	.word	0x000df920

000d6474 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d6474:	b510      	push	{r4, lr}
   d6476:	4604      	mov	r4, r0
}
   d6478:	f7ff ffee 	bl	d6458 <_ZN19BackgroundPublishRKD1Ev>
   d647c:	4620      	mov	r0, r4
   d647e:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   d6482:	f007 fdb9 	bl	ddff8 <_ZdlPvj>
   d6486:	4620      	mov	r0, r4
   d6488:	bd10      	pop	{r4, pc}

000d648a <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   d648a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d648c:	4604      	mov	r4, r0
   d648e:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   d6490:	f100 060d 	add.w	r6, r0, #13
   d6494:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   d6498:	7b23      	ldrb	r3, [r4, #12]
   d649a:	b91b      	cbnz	r3, d64a4 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   d649c:	2001      	movs	r0, #1
   d649e:	f004 fcc7 	bl	dae30 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   d64a2:	e7f9      	b.n	d6498 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   d64a4:	7b23      	ldrb	r3, [r4, #12]
   d64a6:	2b02      	cmp	r3, #2
   d64a8:	d062      	beq.n	d6570 <_ZN19BackgroundPublishRK8thread_fEv+0xe6>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   d64aa:	68a0      	ldr	r0, [r4, #8]
   d64ac:	f004 f86e 	bl	da58c <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   d64b0:	68a0      	ldr	r0, [r4, #8]
   d64b2:	f004 f873 	bl	da59c <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d64b6:	f894 32bd 	ldrb.w	r3, [r4, #701]	; 0x2bd
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d64ba:	f88d 3000 	strb.w	r3, [sp]
   d64be:	463a      	mov	r2, r7
   d64c0:	233c      	movs	r3, #60	; 0x3c
   d64c2:	4631      	mov	r1, r6
   d64c4:	a806      	add	r0, sp, #24
   d64c6:	f004 ff77 	bl	db3b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d64ca:	9d06      	ldr	r5, [sp, #24]
   d64cc:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d64ce:	b933      	cbnz	r3, d64de <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   d64d0:	7b23      	ldrb	r3, [r4, #12]
   d64d2:	2b02      	cmp	r3, #2
   d64d4:	d003      	beq.n	d64de <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   d64d6:	2001      	movs	r0, #1
   d64d8:	f004 fcaa 	bl	dae30 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d64dc:	e7f5      	b.n	d64ca <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   d64de:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d64e2:	b31b      	cbz	r3, d652c <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d64e4:	2000      	movs	r0, #0
   d64e6:	f004 fb23 	bl	dab30 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d64ea:	b120      	cbz	r0, d64f6 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   d64ec:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d64ee:	b913      	cbnz	r3, d64f6 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   d64f0:	f004 fb76 	bl	dabe0 <spark_process>
    }
   d64f4:	e7fa      	b.n	d64ec <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d64f6:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   d64f8:	f8d4 22d0 	ldr.w	r2, [r4, #720]	; 0x2d0
   d64fc:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   d64fe:	1e59      	subs	r1, r3, #1
   d6500:	424b      	negs	r3, r1
   d6502:	414b      	adcs	r3, r1
   d6504:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   d6508:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d650c:	e9cd 6703 	strd	r6, r7, [sp, #12]
   d6510:	b90b      	cbnz	r3, d6516 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   d6512:	f007 fd7d 	bl	de010 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6516:	ab05      	add	r3, sp, #20
   d6518:	9300      	str	r3, [sp, #0]
   d651a:	f8d4 52cc 	ldr.w	r5, [r4, #716]	; 0x2cc
   d651e:	ab04      	add	r3, sp, #16
   d6520:	aa03      	add	r2, sp, #12
   d6522:	f10d 010b 	add.w	r1, sp, #11
   d6526:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d652a:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   d652c:	68a0      	ldr	r0, [r4, #8]
   d652e:	f004 f82d 	bl	da58c <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   d6532:	7b23      	ldrb	r3, [r4, #12]
   d6534:	2b02      	cmp	r3, #2
   d6536:	d015      	beq.n	d6564 <_ZN19BackgroundPublishRK8thread_fEv+0xda>
	if (_M_manager)
   d6538:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
            {
                return;
            }
            event_context = NULL;
   d653c:	2500      	movs	r5, #0
   d653e:	f8c4 52d0 	str.w	r5, [r4, #720]	; 0x2d0
   d6542:	b133      	cbz	r3, d6552 <_ZN19BackgroundPublishRK8thread_fEv+0xc8>
            completed_cb = NULL;
   d6544:	f504 7130 	add.w	r1, r4, #704	; 0x2c0
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d6548:	2203      	movs	r2, #3
   d654a:	4608      	mov	r0, r1
   d654c:	4798      	blx	r3
	    _M_invoker = nullptr;
   d654e:	e9c4 55b2 	strd	r5, r5, [r4, #712]	; 0x2c8
            state = BACKGROUND_PUBLISH_IDLE;
   d6552:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   d6554:	68a0      	ldr	r0, [r4, #8]
   d6556:	7323      	strb	r3, [r4, #12]
   d6558:	f004 f820 	bl	da59c <os_mutex_unlock>
      ~__shared_ptr() = default;
   d655c:	a807      	add	r0, sp, #28
   d655e:	f7fe fc6a 	bl	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6562:	e799      	b.n	d6498 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   d6564:	68a0      	ldr	r0, [r4, #8]
   d6566:	f004 f819 	bl	da59c <os_mutex_unlock>
   d656a:	a807      	add	r0, sp, #28
   d656c:	f7fe fc63 	bl	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d6570:	b009      	add	sp, #36	; 0x24
   d6572:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6574 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   d6574:	6800      	ldr	r0, [r0, #0]
   d6576:	f7ff bf88 	b.w	d648a <_ZN19BackgroundPublishRK8thread_fEv>

000d657a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d657a:	b513      	push	{r0, r1, r4, lr}
   d657c:	460b      	mov	r3, r1
   d657e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6580:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6584:	466c      	mov	r4, sp
   d6586:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d658a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d658e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6592:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6596:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d659a:	b002      	add	sp, #8
   d659c:	bd10      	pop	{r4, pc}
	...

000d65a0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   d65a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d65a4:	4606      	mov	r6, r0
   d65a6:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   d65a8:	2014      	movs	r0, #20
   d65aa:	4926      	ldr	r1, [pc, #152]	; (d6644 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   d65ac:	4617      	mov	r7, r2
   d65ae:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   d65b0:	f007 fd24 	bl	ddffc <_ZnwjRKSt9nothrow_t>
   d65b4:	4604      	mov	r4, r0
   d65b6:	b130      	cbz	r0, d65c6 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d65b8:	2200      	movs	r2, #0
            exited(false) {
   d65ba:	e9c0 2200 	strd	r2, r2, [r0]
   d65be:	e9c0 2202 	strd	r2, r2, [r0, #8]
   d65c2:	7402      	strb	r2, [r0, #16]
   d65c4:	7442      	strb	r2, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d65c6:	6034      	str	r4, [r6, #0]
        if (!d_) {
   d65c8:	2c00      	cmp	r4, #0
   d65ca:	d031      	beq.n	d6630 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d65cc:	491d      	ldr	r1, [pc, #116]	; (d6644 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   d65ce:	2010      	movs	r0, #16
   d65d0:	f007 fd14 	bl	ddffc <_ZnwjRKSt9nothrow_t>
   d65d4:	4605      	mov	r5, r0
   d65d6:	b168      	cbz	r0, d65f4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   d65d8:	2300      	movs	r3, #0
   d65da:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d65dc:	4601      	mov	r1, r0
   d65de:	4638      	mov	r0, r7
   d65e0:	f7ff ffcb 	bl	d657a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d65e4:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   d65e6:	68aa      	ldr	r2, [r5, #8]
   d65e8:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d65ea:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d65ec:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d65ee:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d65f0:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d65f2:	60fa      	str	r2, [r7, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d65f4:	6827      	ldr	r7, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d65f6:	6025      	str	r5, [r4, #0]
	if (__p != pointer())
   d65f8:	b137      	cbz	r7, d6608 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   d65fa:	4638      	mov	r0, r7
   d65fc:	f7ff febe 	bl	d637c <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d6600:	2110      	movs	r1, #16
   d6602:	4638      	mov	r0, r7
   d6604:	f007 fcf8 	bl	ddff8 <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6608:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   d660a:	6803      	ldr	r3, [r0, #0]
   d660c:	b183      	cbz	r3, d6630 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d660e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6610:	464a      	mov	r2, r9
   d6612:	e9cd 0300 	strd	r0, r3, [sp]
   d6616:	4641      	mov	r1, r8
   d6618:	4b0b      	ldr	r3, [pc, #44]	; (d6648 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   d661a:	3004      	adds	r0, #4
   d661c:	f003 ff8e 	bl	da53c <os_thread_create>
   d6620:	b930      	cbnz	r0, d6630 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   d6622:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   d6624:	7c1b      	ldrb	r3, [r3, #16]
   d6626:	b94b      	cbnz	r3, d663c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   d6628:	2001      	movs	r0, #1
   d662a:	f003 fff7 	bl	da61c <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d662e:	e7f8      	b.n	d6622 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6630:	6830      	ldr	r0, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6632:	2300      	movs	r3, #0
   d6634:	6033      	str	r3, [r6, #0]
	if (__p != pointer())
   d6636:	b108      	cbz	r0, d663c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   d6638:	f7ff fea9 	bl	d638e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d663c:	4630      	mov	r0, r6
   d663e:	b003      	add	sp, #12
   d6640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6644:	000e0310 	.word	0x000e0310
   d6648:	000d634d 	.word	0x000d634d

000d664c <_ZN19BackgroundPublishRK5startEv>:
{
   d664c:	b530      	push	{r4, r5, lr}
    if(!thread)
   d664e:	6843      	ldr	r3, [r0, #4]
{
   d6650:	b087      	sub	sp, #28
   d6652:	4604      	mov	r4, r0
    if(!thread)
   d6654:	b9c3      	cbnz	r3, d6688 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   d6656:	3008      	adds	r0, #8
   d6658:	f003 ff90 	bl	da57c <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   d665c:	4b0b      	ldr	r3, [pc, #44]	; (d668c <_ZN19BackgroundPublishRK5startEv+0x40>)
   d665e:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   d6660:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   d6662:	4b0b      	ldr	r3, [pc, #44]	; (d6690 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6664:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d6666:	9304      	str	r3, [sp, #16]
   d6668:	f7fd fd15 	bl	d4096 <_Znwj>
   d666c:	4605      	mov	r5, r0
   d666e:	b138      	cbz	r0, d6680 <_ZN19BackgroundPublishRK5startEv+0x34>
   d6670:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d6674:	9300      	str	r3, [sp, #0]
   d6676:	4907      	ldr	r1, [pc, #28]	; (d6694 <_ZN19BackgroundPublishRK5startEv+0x48>)
   d6678:	2302      	movs	r3, #2
   d667a:	aa02      	add	r2, sp, #8
   d667c:	f7ff ff90 	bl	d65a0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   d6680:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   d6682:	a802      	add	r0, sp, #8
   d6684:	f7ff fe7a 	bl	d637c <_ZNSt14_Function_baseD1Ev>
}
   d6688:	b007      	add	sp, #28
   d668a:	bd30      	pop	{r4, r5, pc}
   d668c:	000d6575 	.word	0x000d6575
   d6690:	000d6335 	.word	0x000d6335
   d6694:	000df904 	.word	0x000df904

000d6698 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   d6698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d669c:	4604      	mov	r4, r0
   d669e:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   d66a0:	6880      	ldr	r0, [r0, #8]
   d66a2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d66a4:	4698      	mov	r8, r3
   d66a6:	460d      	mov	r5, r1
   d66a8:	4616      	mov	r6, r2
   d66aa:	f003 ff6f 	bl	da58c <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   d66ae:	6863      	ldr	r3, [r4, #4]
   d66b0:	b11b      	cbz	r3, d66ba <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   d66b2:	7b23      	ldrb	r3, [r4, #12]
   d66b4:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   d66b8:	b133      	cbz	r3, d66c8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   d66ba:	68a0      	ldr	r0, [r4, #8]
   d66bc:	f003 ff6e 	bl	da59c <os_mutex_unlock>
    {
        return false;
   d66c0:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   d66c2:	b005      	add	sp, #20
   d66c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d66c8:	68a0      	ldr	r0, [r4, #8]
   d66ca:	f003 ff67 	bl	da59c <os_mutex_unlock>
    if(!name)
   d66ce:	2d00      	cmp	r5, #0
   d66d0:	d03d      	beq.n	d674e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   d66d2:	2241      	movs	r2, #65	; 0x41
   d66d4:	4629      	mov	r1, r5
   d66d6:	f104 000d 	add.w	r0, r4, #13
   d66da:	f008 fa02 	bl	deae2 <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   d66de:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   d66e2:	b38e      	cbz	r6, d6748 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   d66e4:	f240 226f 	movw	r2, #623	; 0x26f
   d66e8:	4631      	mov	r1, r6
   d66ea:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   d66ee:	f008 f9f8 	bl	deae2 <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   d66f2:	f884 92bc 	strb.w	r9, [r4, #700]	; 0x2bc
    _Function_base() : _M_manager(nullptr) { }
   d66f6:	2300      	movs	r3, #0
   d66f8:	9302      	str	r3, [sp, #8]
      { return !_M_empty(); }
   d66fa:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   d66fc:	f504 7530 	add.w	r5, r4, #704	; 0x2c0
      if (static_cast<bool>(__x))
   d6700:	b13b      	cbz	r3, d6712 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6702:	2202      	movs	r2, #2
   d6704:	4639      	mov	r1, r7
   d6706:	4668      	mov	r0, sp
   d6708:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d670a:	68fb      	ldr	r3, [r7, #12]
   d670c:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   d670e:	68bb      	ldr	r3, [r7, #8]
   d6710:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d6712:	4629      	mov	r1, r5
   d6714:	4668      	mov	r0, sp
   d6716:	f7ff ff30 	bl	d657a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d671a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d671c:	f8d4 22c8 	ldr.w	r2, [r4, #712]	; 0x2c8
      __b = _GLIBCXX_MOVE(__tmp);
   d6720:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6724:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6726:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d6728:	4668      	mov	r0, sp
   d672a:	f8d4 22cc 	ldr.w	r2, [r4, #716]	; 0x2cc
      __b = _GLIBCXX_MOVE(__tmp);
   d672e:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
      __a = _GLIBCXX_MOVE(__b);
   d6732:	9203      	str	r2, [sp, #12]
   d6734:	f7ff fe22 	bl	d637c <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   d6738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d673a:	f8c4 32d0 	str.w	r3, [r4, #720]	; 0x2d0
    state = BACKGROUND_PUBLISH_REQUESTED;
   d673e:	2001      	movs	r0, #1
    event_flags = flags;
   d6740:	f884 82bd 	strb.w	r8, [r4, #701]	; 0x2bd
    state = BACKGROUND_PUBLISH_REQUESTED;
   d6744:	7320      	strb	r0, [r4, #12]
    return true;
   d6746:	e7bc      	b.n	d66c2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   d6748:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   d674c:	e7d3      	b.n	d66f6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   d674e:	4628      	mov	r0, r5
   d6750:	e7b7      	b.n	d66c2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>

000d6752 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   d6752:	4770      	bx	lr

000d6754 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   d6754:	4770      	bx	lr

000d6756 <_ZNSt17_Function_handlerIFbR21LocalTimeScheduleItemEZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      }
   d6756:	2001      	movs	r0, #1
   d6758:	4770      	bx	lr

000d675a <_ZNSt14_Function_base13_Base_managerIZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlR21LocalTimeScheduleItemE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d675a:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d675c:	bf08      	it	eq
   d675e:	6001      	streq	r1, [r0, #0]
	}
   d6760:	2000      	movs	r0, #0
   d6762:	4770      	bx	lr

000d6764 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   d6764:	b510      	push	{r4, lr}
}
   d6766:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   d6768:	4604      	mov	r4, r0
}
   d676a:	f007 fc45 	bl	ddff8 <_ZdlPvj>
   d676e:	4620      	mov	r0, r4
   d6770:	bd10      	pop	{r4, pc}

000d6772 <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   d6772:	b510      	push	{r4, lr}
}
   d6774:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   d6776:	4604      	mov	r4, r0
}
   d6778:	f007 fc3e 	bl	ddff8 <_ZdlPvj>
   d677c:	4620      	mov	r0, r4
   d677e:	bd10      	pop	{r4, pc}

000d6780 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d6780:	b510      	push	{r4, lr}
   d6782:	4b05      	ldr	r3, [pc, #20]	; (d6798 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   d6784:	4604      	mov	r4, r0
   d6786:	f840 3b1c 	str.w	r3, [r0], #28
   d678a:	f006 fe0b 	bl	dd3a4 <_ZN6StringD1Ev>
   d678e:	1d20      	adds	r0, r4, #4
   d6790:	f006 fe08 	bl	dd3a4 <_ZN6StringD1Ev>
}
   d6794:	4620      	mov	r0, r4
   d6796:	bd10      	pop	{r4, pc}
   d6798:	000df9b0 	.word	0x000df9b0

000d679c <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d679c:	b510      	push	{r4, lr}
   d679e:	4604      	mov	r4, r0
}
   d67a0:	f7ff ffee 	bl	d6780 <_ZN22LocalTimePosixTimezoneD1Ev>
   d67a4:	4620      	mov	r0, r4
   d67a6:	2158      	movs	r1, #88	; 0x58
   d67a8:	f007 fc26 	bl	ddff8 <_ZdlPvj>
   d67ac:	4620      	mov	r0, r4
   d67ae:	bd10      	pop	{r4, pc}

000d67b0 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   d67b0:	b510      	push	{r4, lr}
   d67b2:	4b04      	ldr	r3, [pc, #16]	; (d67c4 <_ZN9LocalTimeD1Ev+0x14>)
   d67b4:	4604      	mov	r4, r0
   d67b6:	f840 3b04 	str.w	r3, [r0], #4
   d67ba:	f7ff ffe1 	bl	d6780 <_ZN22LocalTimePosixTimezoneD1Ev>
   d67be:	4620      	mov	r0, r4
   d67c0:	bd10      	pop	{r4, pc}
   d67c2:	bf00      	nop
   d67c4:	000df980 	.word	0x000df980

000d67c8 <_ZN9LocalTimeD0Ev>:
   d67c8:	b510      	push	{r4, lr}
   d67ca:	4604      	mov	r4, r0
   d67cc:	f7ff fff0 	bl	d67b0 <_ZN9LocalTimeD1Ev>
   d67d0:	4620      	mov	r0, r4
   d67d2:	2160      	movs	r1, #96	; 0x60
   d67d4:	f007 fc10 	bl	ddff8 <_ZdlPvj>
   d67d8:	4620      	mov	r0, r4
   d67da:	bd10      	pop	{r4, pc}

000d67dc <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   d67dc:	f020 0302 	bic.w	r3, r0, #2
   d67e0:	2b01      	cmp	r3, #1
   d67e2:	d003      	beq.n	d67ec <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   d67e4:	1f43      	subs	r3, r0, #5
   d67e6:	4258      	negs	r0, r3
   d67e8:	4158      	adcs	r0, r3
   d67ea:	4770      	bx	lr
   d67ec:	4618      	mov	r0, r3
   d67ee:	4770      	bx	lr

000d67f0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>:
	if (__p)
   d67f0:	b108      	cbz	r0, d67f6 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0+0x6>
   d67f2:	f7fd bc54 	b.w	d409e <_ZdlPv>
	  _Tr::deallocate(_M_impl, __p, __n);
      }
   d67f6:	4770      	bx	lr

000d67f8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   d67f8:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d67fa:	b148      	cbz	r0, d6810 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->max_size())
   d67fc:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   d6800:	d301      	bcc.n	d6806 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   d6802:	f007 fbff 	bl	de004 <_ZSt17__throw_bad_allocv>
      }
   d6806:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d680a:	0080      	lsls	r0, r0, #2
   d680c:	f7fd bc43 	b.w	d4096 <_Znwj>
   d6810:	bd08      	pop	{r3, pc}

000d6812 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6812:	680b      	ldr	r3, [r1, #0]
   d6814:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   d6816:	684b      	ldr	r3, [r1, #4]
   d6818:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   d681a:	b113      	cbz	r3, d6822 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   d681c:	685a      	ldr	r2, [r3, #4]
   d681e:	3201      	adds	r2, #1
   d6820:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6822:	4770      	bx	lr

000d6824 <_ZNK12LocalTimeHMS9compareToERKS_>:
        if (hour < other.hour) {
   d6824:	f990 2004 	ldrsb.w	r2, [r0, #4]
   d6828:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d682c:	429a      	cmp	r2, r3
   d682e:	db13      	blt.n	d6858 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
        if (hour > other.hour) {
   d6830:	dc10      	bgt.n	d6854 <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
            if (minute < other.minute) {
   d6832:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d6836:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d683a:	429a      	cmp	r2, r3
   d683c:	db0c      	blt.n	d6858 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
            if (minute > other.minute) {
   d683e:	dc09      	bgt.n	d6854 <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
                if (second < other.second) {
   d6840:	f990 2006 	ldrsb.w	r2, [r0, #6]
   d6844:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d6848:	429a      	cmp	r2, r3
   d684a:	db05      	blt.n	d6858 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
                if (second > other.second) {
   d684c:	bfcc      	ite	gt
   d684e:	2001      	movgt	r0, #1
   d6850:	2000      	movle	r0, #0
   d6852:	4770      	bx	lr
            return +1;
   d6854:	2001      	movs	r0, #1
   d6856:	4770      	bx	lr
            return -1;
   d6858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
   d685c:	4770      	bx	lr
	...

000d6860 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   d6860:	4a02      	ldr	r2, [pc, #8]	; (d686c <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   d6862:	6002      	str	r2, [r0, #0]
   d6864:	684a      	ldr	r2, [r1, #4]
   d6866:	6042      	str	r2, [r0, #4]
   d6868:	4770      	bx	lr
   d686a:	bf00      	nop
   d686c:	000df990 	.word	0x000df990

000d6870 <_ZN12LocalTimeHMSaSERKS_>:
   d6870:	f991 2004 	ldrsb.w	r2, [r1, #4]
   d6874:	7102      	strb	r2, [r0, #4]
   d6876:	f991 2005 	ldrsb.w	r2, [r1, #5]
   d687a:	7142      	strb	r2, [r0, #5]
   d687c:	f991 2006 	ldrsb.w	r2, [r1, #6]
   d6880:	7182      	strb	r2, [r0, #6]
   d6882:	f991 2007 	ldrsb.w	r2, [r1, #7]
   d6886:	71c2      	strb	r2, [r0, #7]
   d6888:	4770      	bx	lr

000d688a <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>:
    int compareTo(LocalTimeHMS hms) const {
   d688a:	b538      	push	{r3, r4, r5, lr}
   d688c:	460c      	mov	r4, r1
   d688e:	4605      	mov	r5, r0
        return compareTo(other) < 0;
   d6890:	f100 011c 	add.w	r1, r0, #28
   d6894:	4620      	mov	r0, r4
   d6896:	f7ff ffc5 	bl	d6824 <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms < hmsStart) {
   d689a:	2800      	cmp	r0, #0
   d689c:	db09      	blt.n	d68b2 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x28>
        return compareTo(other) > 0;
   d689e:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d68a2:	4620      	mov	r0, r4
   d68a4:	f7ff ffbe 	bl	d6824 <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms > hmsEnd) {
   d68a8:	2800      	cmp	r0, #0
   d68aa:	bfd4      	ite	le
   d68ac:	2000      	movle	r0, #0
   d68ae:	2001      	movgt	r0, #1
    }
   d68b0:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   d68b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d68b6:	e7fb      	b.n	d68b0 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x26>

000d68b8 <_ZN22LocalTimePosixTimezoneaSERKS_>:
class LocalTimePosixTimezone {
   d68b8:	b538      	push	{r3, r4, r5, lr}
   d68ba:	4604      	mov	r4, r0
   d68bc:	460d      	mov	r5, r1
   d68be:	3004      	adds	r0, #4
   d68c0:	3104      	adds	r1, #4
   d68c2:	f006 fdf6 	bl	dd4b2 <_ZN6StringaSERKS_>
   d68c6:	f105 0114 	add.w	r1, r5, #20
   d68ca:	f104 0014 	add.w	r0, r4, #20
   d68ce:	f7ff ffcf 	bl	d6870 <_ZN12LocalTimeHMSaSERKS_>
   d68d2:	f105 011c 	add.w	r1, r5, #28
   d68d6:	f104 001c 	add.w	r0, r4, #28
   d68da:	f006 fdea 	bl	dd4b2 <_ZN6StringaSERKS_>
   d68de:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d68e2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d68e6:	f7ff ffc3 	bl	d6870 <_ZN12LocalTimeHMSaSERKS_>
class LocalTimeChange {
   d68ea:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   d68ee:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   d68f2:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   d68f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   d68fa:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   d68fe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   d6902:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   d6906:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   d690a:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d690e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6912:	f7ff ffad 	bl	d6870 <_ZN12LocalTimeHMSaSERKS_>
   d6916:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   d691a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   d691e:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   d6922:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   d6926:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   d692a:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   d692e:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   d6932:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   d6936:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d693a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d693e:	f7ff ff97 	bl	d6870 <_ZN12LocalTimeHMSaSERKS_>
class LocalTimePosixTimezone {
   d6942:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d6946:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d694a:	4620      	mov	r0, r4
   d694c:	bd38      	pop	{r3, r4, r5, pc}

000d694e <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   d694e:	694a      	ldr	r2, [r1, #20]
   d6950:	6803      	ldr	r3, [r0, #0]
   d6952:	f362 0316 	bfi	r3, r2, #0, #23
   d6956:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   d6958:	690b      	ldr	r3, [r1, #16]
   d695a:	1c5a      	adds	r2, r3, #1
   d695c:	8843      	ldrh	r3, [r0, #2]
   d695e:	f362 13ca 	bfi	r3, r2, #7, #4
   d6962:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   d6964:	68ca      	ldr	r2, [r1, #12]
   d6966:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d696a:	f362 03c7 	bfi	r3, r2, #3, #5
   d696e:	70c3      	strb	r3, [r0, #3]
}
   d6970:	4770      	bx	lr

000d6972 <_ZNK12LocalTimeYMD12getDayOfWeekEv>:
int LocalTimeYMD::getDayOfWeek() const {
   d6972:	b510      	push	{r4, lr}
   d6974:	4604      	mov	r4, r0
   d6976:	b08c      	sub	sp, #48	; 0x30
    struct tm timeInfo = {0};
   d6978:	2224      	movs	r2, #36	; 0x24
   d697a:	2100      	movs	r1, #0
   d697c:	a803      	add	r0, sp, #12
   d697e:	f007 ffef 	bl	de960 <memset>
    timeInfo.tm_year = ymd.year;
   d6982:	6823      	ldr	r3, [r4, #0]
   d6984:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d6988:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d698a:	8863      	ldrh	r3, [r4, #2]
   d698c:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d6990:	3b01      	subs	r3, #1
   d6992:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday = ymd.day;
   d6994:	78e3      	ldrb	r3, [r4, #3]
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   d6996:	a803      	add	r0, sp, #12
    timeInfo.tm_mday = ymd.day;
   d6998:	08db      	lsrs	r3, r3, #3
   d699a:	9306      	str	r3, [sp, #24]
    return mktime(pTimeInfo);
   d699c:	f004 fa40 	bl	dae20 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d69a0:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d69a4:	a903      	add	r1, sp, #12
   d69a6:	4668      	mov	r0, sp
   d69a8:	f004 fa2a 	bl	dae00 <localtime_r>
}
   d69ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   d69ae:	b00c      	add	sp, #48	; 0x30
   d69b0:	bd10      	pop	{r4, pc}

000d69b2 <_ZN12LocalTimeYMD6addDayEi>:
void LocalTimeYMD::addDay(int numberOfDays) {
   d69b2:	b530      	push	{r4, r5, lr}
   d69b4:	4604      	mov	r4, r0
   d69b6:	b08d      	sub	sp, #52	; 0x34
    struct tm timeInfo = {0};
   d69b8:	2224      	movs	r2, #36	; 0x24
void LocalTimeYMD::addDay(int numberOfDays) {
   d69ba:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d69bc:	a803      	add	r0, sp, #12
   d69be:	2100      	movs	r1, #0
   d69c0:	f007 ffce 	bl	de960 <memset>
    timeInfo.tm_year = ymd.year;
   d69c4:	6823      	ldr	r3, [r4, #0]
    timeInfo.tm_mday = ymd.day;
   d69c6:	78e1      	ldrb	r1, [r4, #3]
    timeInfo.tm_year = ymd.year;
   d69c8:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d69cc:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d69ce:	8863      	ldrh	r3, [r4, #2]
   d69d0:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d69d4:	3b01      	subs	r3, #1
    timeInfo.tm_mday += numberOfDays;
   d69d6:	eb05 05d1 	add.w	r5, r5, r1, lsr #3
    return mktime(pTimeInfo);
   d69da:	a803      	add	r0, sp, #12
    timeInfo.tm_mon = ymd.month - 1;
   d69dc:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday += numberOfDays;
   d69de:	9506      	str	r5, [sp, #24]
    return mktime(pTimeInfo);
   d69e0:	f004 fa1e 	bl	dae20 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d69e4:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d69e8:	a903      	add	r1, sp, #12
   d69ea:	4668      	mov	r0, sp
   d69ec:	f004 fa08 	bl	dae00 <localtime_r>
    fromTimeInfo(&timeInfo);
   d69f0:	a903      	add	r1, sp, #12
   d69f2:	4620      	mov	r0, r4
   d69f4:	f7ff ffab 	bl	d694e <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d69f8:	b00d      	add	sp, #52	; 0x34
   d69fa:	bd30      	pop	{r4, r5, pc}

000d69fc <_ZNK12LocalTimeYMD9compareToES_>:
    if (ymd.year < other.ymd.year) {
   d69fc:	6803      	ldr	r3, [r0, #0]
   d69fe:	f3c1 0216 	ubfx	r2, r1, #0, #23
   d6a02:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d6a06:	4293      	cmp	r3, r2
   d6a08:	d313      	bcc.n	d6a32 <_ZNK12LocalTimeYMD9compareToES_+0x36>
    if (ymd.year > other.ymd.year) {
   d6a0a:	d810      	bhi.n	d6a2e <_ZNK12LocalTimeYMD9compareToES_+0x32>
        if (ymd.month < other.ymd.month) {
   d6a0c:	8842      	ldrh	r2, [r0, #2]
   d6a0e:	f3c1 53c3 	ubfx	r3, r1, #23, #4
   d6a12:	f3c2 12c3 	ubfx	r2, r2, #7, #4
   d6a16:	429a      	cmp	r2, r3
   d6a18:	d30b      	bcc.n	d6a32 <_ZNK12LocalTimeYMD9compareToES_+0x36>
        if (ymd.month > other.ymd.month) {
   d6a1a:	d808      	bhi.n	d6a2e <_ZNK12LocalTimeYMD9compareToES_+0x32>
            if (ymd.day < other.ymd.day) {
   d6a1c:	78c3      	ldrb	r3, [r0, #3]
   d6a1e:	08db      	lsrs	r3, r3, #3
   d6a20:	ebb3 6fd1 	cmp.w	r3, r1, lsr #27
   d6a24:	d305      	bcc.n	d6a32 <_ZNK12LocalTimeYMD9compareToES_+0x36>
            if (ymd.day > other.ymd.day) {
   d6a26:	bf8c      	ite	hi
   d6a28:	2001      	movhi	r0, #1
   d6a2a:	2000      	movls	r0, #0
   d6a2c:	4770      	bx	lr
        cmp = +1;
   d6a2e:	2001      	movs	r0, #1
   d6a30:	4770      	bx	lr
        cmp = -1;
   d6a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6a36:	4770      	bx	lr

000d6a38 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   d6a38:	4a02      	ldr	r2, [pc, #8]	; (d6a44 <_ZN12LocalTimeHMSC1Ev+0xc>)
   d6a3a:	6002      	str	r2, [r0, #0]
   d6a3c:	2200      	movs	r2, #0
   d6a3e:	6042      	str	r2, [r0, #4]
}
   d6a40:	4770      	bx	lr
   d6a42:	bf00      	nop
   d6a44:	000df990 	.word	0x000df990

000d6a48 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   d6a48:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   d6a4a:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   d6a4c:	b087      	sub	sp, #28
    hour = minute = second = 0;
   d6a4e:	8083      	strh	r3, [r0, #4]
   d6a50:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   d6a52:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d6a54:	ab05      	add	r3, sp, #20
   d6a56:	9300      	str	r3, [sp, #0]
   d6a58:	4913      	ldr	r1, [pc, #76]	; (d6aa8 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   d6a5a:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d6a5c:	ab04      	add	r3, sp, #16
   d6a5e:	aa03      	add	r2, sp, #12
   d6a60:	4628      	mov	r0, r5
   d6a62:	f004 f98d 	bl	dad80 <sscanf>
   d6a66:	2803      	cmp	r0, #3
   d6a68:	d107      	bne.n	d6a7a <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   d6a6a:	9b03      	ldr	r3, [sp, #12]
   d6a6c:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d6a6e:	9b04      	ldr	r3, [sp, #16]
   d6a70:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   d6a72:	9b05      	ldr	r3, [sp, #20]
   d6a74:	71a3      	strb	r3, [r4, #6]
}
   d6a76:	b007      	add	sp, #28
   d6a78:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   d6a7a:	490c      	ldr	r1, [pc, #48]	; (d6aac <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   d6a7c:	ab04      	add	r3, sp, #16
   d6a7e:	aa03      	add	r2, sp, #12
   d6a80:	4628      	mov	r0, r5
   d6a82:	f004 f97d 	bl	dad80 <sscanf>
   d6a86:	2802      	cmp	r0, #2
   d6a88:	d104      	bne.n	d6a94 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   d6a8a:	9b03      	ldr	r3, [sp, #12]
   d6a8c:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d6a8e:	9b04      	ldr	r3, [sp, #16]
   d6a90:	7163      	strb	r3, [r4, #5]
   d6a92:	e7f0      	b.n	d6a76 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   d6a94:	4906      	ldr	r1, [pc, #24]	; (d6ab0 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   d6a96:	aa03      	add	r2, sp, #12
   d6a98:	4628      	mov	r0, r5
   d6a9a:	f004 f971 	bl	dad80 <sscanf>
   d6a9e:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   d6aa0:	bf04      	itt	eq
   d6aa2:	9b03      	ldreq	r3, [sp, #12]
   d6aa4:	7123      	strbeq	r3, [r4, #4]
}
   d6aa6:	e7e6      	b.n	d6a76 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   d6aa8:	000df928 	.word	0x000df928
   d6aac:	000df92b 	.word	0x000df92b
   d6ab0:	000df787 	.word	0x000df787

000d6ab4 <_ZN12LocalTimeHMSC1EPKc>:
LocalTimeHMS::LocalTimeHMS(const char *str) {
   d6ab4:	b510      	push	{r4, lr}
   d6ab6:	4b04      	ldr	r3, [pc, #16]	; (d6ac8 <_ZN12LocalTimeHMSC1EPKc+0x14>)
   d6ab8:	6003      	str	r3, [r0, #0]
   d6aba:	2300      	movs	r3, #0
   d6abc:	4604      	mov	r4, r0
   d6abe:	6043      	str	r3, [r0, #4]
    parse(str);
   d6ac0:	f7ff ffc2 	bl	d6a48 <_ZN12LocalTimeHMS5parseEPKc>
}
   d6ac4:	4620      	mov	r0, r4
   d6ac6:	bd10      	pop	{r4, pc}
   d6ac8:	000df990 	.word	0x000df990

000d6acc <_ZN21LocalTimeScheduleItemC1Ev>:
    LocalTimeScheduleItem() {
   d6acc:	b538      	push	{r3, r4, r5, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   d6ace:	2500      	movs	r5, #0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d6ad0:	237f      	movs	r3, #127	; 0x7f
    LocalTimeScheduleItem() {
   d6ad2:	4604      	mov	r4, r0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d6ad4:	7003      	strb	r3, [r0, #0]
   d6ad6:	e9c0 5501 	strd	r5, r5, [r0, #4]
   d6ada:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d6ade:	e9c0 5505 	strd	r5, r5, [r0, #20]
    LocalTimeRange() : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(LocalTimeHMS("00:00:00")), hmsEnd(LocalTimeHMS("23:59:59")) {
   d6ae2:	490a      	ldr	r1, [pc, #40]	; (d6b0c <_ZN21LocalTimeScheduleItemC1Ev+0x40>)
   d6ae4:	301c      	adds	r0, #28
   d6ae6:	f7ff ffe5 	bl	d6ab4 <_ZN12LocalTimeHMSC1EPKc>
   d6aea:	4909      	ldr	r1, [pc, #36]	; (d6b10 <_ZN21LocalTimeScheduleItemC1Ev+0x44>)
   d6aec:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6af0:	f7ff ffe0 	bl	d6ab4 <_ZN12LocalTimeHMSC1EPKc>
    LocalTimeScheduleItem() {
   d6af4:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
   d6af8:	4906      	ldr	r1, [pc, #24]	; (d6b14 <_ZN21LocalTimeScheduleItemC1Ev+0x48>)
   d6afa:	6365      	str	r5, [r4, #52]	; 0x34
   d6afc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d6b00:	f006 fc9b 	bl	dd43a <_ZN6StringC1EPKc>
   d6b04:	64a5      	str	r5, [r4, #72]	; 0x48
    }
   d6b06:	4620      	mov	r0, r4
   d6b08:	bd38      	pop	{r3, r4, r5, pc}
   d6b0a:	bf00      	nop
   d6b0c:	000df931 	.word	0x000df931
   d6b10:	000df93a 	.word	0x000df93a
   d6b14:	000e0190 	.word	0x000e0190

000d6b18 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   d6b18:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d6b1c:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d6b20:	f990 1006 	ldrsb.w	r1, [r0, #6]
   d6b24:	2b00      	cmp	r3, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   d6b26:	bfb8      	it	lt
   d6b28:	4808      	ldrlt	r0, [pc, #32]	; (d6b4c <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   d6b2a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   d6b2e:	ea4f 0282 	mov.w	r2, r2, lsl #2
   d6b32:	bfbd      	ittte	lt
   d6b34:	fb00 2003 	mlalt	r0, r0, r3, r2
   d6b38:	1840      	addlt	r0, r0, r1
   d6b3a:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   d6b3c:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   d6b40:	bfa4      	itt	ge
   d6b42:	fb00 2303 	mlage	r3, r0, r3, r2
   d6b46:	1858      	addge	r0, r3, r1
}
   d6b48:	4770      	bx	lr
   d6b4a:	bf00      	nop
   d6b4c:	fffff1f0 	.word	0xfffff1f0

000d6b50 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   d6b50:	f990 3007 	ldrsb.w	r3, [r0, #7]
   d6b54:	b943      	cbnz	r3, d6b68 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   d6b56:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d6b5a:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   d6b5c:	f990 3005 	ldrsb.w	r3, [r0, #5]
   d6b60:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   d6b62:	f990 3006 	ldrsb.w	r3, [r0, #6]
   d6b66:	600b      	str	r3, [r1, #0]
}
   d6b68:	4770      	bx	lr

000d6b6a <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   d6b6a:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   d6b6e:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   d6b70:	b9b3      	cbnz	r3, d6ba0 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   d6b72:	f990 5004 	ldrsb.w	r5, [r0, #4]
   d6b76:	688c      	ldr	r4, [r1, #8]
   d6b78:	442c      	add	r4, r5
   d6b7a:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   d6b7e:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   d6b80:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   d6b84:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   d6b86:	bfb5      	itete	lt
   d6b88:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   d6b8a:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   d6b8c:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   d6b8e:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   d6b90:	bfb5      	itete	lt
   d6b92:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   d6b96:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   d6b9a:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   d6b9c:	189b      	addge	r3, r3, r2
   d6b9e:	600b      	str	r3, [r1, #0]
}
   d6ba0:	bd30      	pop	{r4, r5, pc}

000d6ba2 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inOnlyOnDates(LocalTimeYMD ymd) const {
   d6ba2:	b538      	push	{r3, r4, r5, lr}
   d6ba4:	6844      	ldr	r4, [r0, #4]
   d6ba6:	4605      	mov	r5, r0
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d6ba8:	68ab      	ldr	r3, [r5, #8]
   d6baa:	42a3      	cmp	r3, r4
   d6bac:	d007      	beq.n	d6bbe <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1c>
        return compareTo(other) == 0; 
   d6bae:	4620      	mov	r0, r4
   d6bb0:	f7ff ff24 	bl	d69fc <_ZNK12LocalTimeYMD9compareToES_>
   d6bb4:	3404      	adds	r4, #4
        if (*it == ymd) {
   d6bb6:	2800      	cmp	r0, #0
   d6bb8:	d1f6      	bne.n	d6ba8 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x6>
            return true;
   d6bba:	2001      	movs	r0, #1
}
   d6bbc:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d6bbe:	2000      	movs	r0, #0
   d6bc0:	e7fc      	b.n	d6bbc <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1a>

000d6bc2 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inExceptDates(LocalTimeYMD ymd) const {
   d6bc2:	b538      	push	{r3, r4, r5, lr}
   d6bc4:	6904      	ldr	r4, [r0, #16]
   d6bc6:	4605      	mov	r5, r0
    for(auto it = exceptDates.begin(); it != exceptDates.end(); ++it) {
   d6bc8:	696b      	ldr	r3, [r5, #20]
   d6bca:	42a3      	cmp	r3, r4
   d6bcc:	d007      	beq.n	d6bde <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1c>
   d6bce:	4620      	mov	r0, r4
   d6bd0:	f7ff ff14 	bl	d69fc <_ZNK12LocalTimeYMD9compareToES_>
   d6bd4:	3404      	adds	r4, #4
        if (*it == ymd) {
   d6bd6:	2800      	cmp	r0, #0
   d6bd8:	d1f6      	bne.n	d6bc8 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x6>
            return true;
   d6bda:	2001      	movs	r0, #1
}
   d6bdc:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d6bde:	2000      	movs	r0, #0
   d6be0:	e7fc      	b.n	d6bdc <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1a>

000d6be2 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::isValid(LocalTimeYMD ymd) const {
   d6be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6be4:	4605      	mov	r5, r0
   d6be6:	460e      	mov	r6, r1
    if (inExceptDates(ymd)) {
   d6be8:	f7ff ffeb 	bl	d6bc2 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>
   d6bec:	b990      	cbnz	r0, d6c14 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x32>
        int dayOfWeek = ymd.getDayOfWeek();
   d6bee:	a801      	add	r0, sp, #4
   d6bf0:	9101      	str	r1, [sp, #4]
   d6bf2:	f7ff febe 	bl	d6972 <_ZNK12LocalTimeYMD12getDayOfWeekEv>
        return (dayOfWeekMask & (1 << dayOfWeek)) != 0;
   d6bf6:	782b      	ldrb	r3, [r5, #0]
        bool isValidDates = inOnlyOnDates(ymd);
   d6bf8:	4631      	mov	r1, r6
   d6bfa:	fa43 f400 	asr.w	r4, r3, r0
   d6bfe:	4628      	mov	r0, r5
   d6c00:	f7ff ffcf 	bl	d6ba2 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>
   d6c04:	f004 0401 	and.w	r4, r4, #1
        result = isValidDays || isValidDates;
   d6c08:	2c00      	cmp	r4, #0
   d6c0a:	bf08      	it	eq
   d6c0c:	4604      	moveq	r4, r0
}
   d6c0e:	4620      	mov	r0, r4
   d6c10:	b002      	add	sp, #8
   d6c12:	bd70      	pop	{r4, r5, r6, pc}
        result = false;
   d6c14:	2400      	movs	r4, #0
   d6c16:	e7fa      	b.n	d6c0e <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x2c>

000d6c18 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>:
LocalTimeYMD LocalTimeRestrictedDate::getExpirationDate() const {
   d6c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d6c1c:	2400      	movs	r4, #0
   d6c1e:	6845      	ldr	r5, [r0, #4]
   d6c20:	4680      	mov	r8, r0
   d6c22:	4626      	mov	r6, r4
   d6c24:	4627      	mov	r7, r4
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d6c26:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d6c2a:	429d      	cmp	r5, r3
   d6c2c:	d01e      	beq.n	d6c6c <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x54>
        return ymd.year == 0 && ymd.month == 0 && ymd.day == 0;
   d6c2e:	f367 0916 	bfi	r9, r7, #0, #23
   d6c32:	f366 59da 	bfi	r9, r6, #23, #4
   d6c36:	f364 69df 	bfi	r9, r4, #27, #5
        if (result.isEmpty() || *it > result) {
   d6c3a:	f1b9 0f00 	cmp.w	r9, #0
   d6c3e:	d109      	bne.n	d6c54 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x3c>
            result = *it;
   d6c40:	682f      	ldr	r7, [r5, #0]
   d6c42:	886e      	ldrh	r6, [r5, #2]
   d6c44:	78ec      	ldrb	r4, [r5, #3]
   d6c46:	f3c7 0716 	ubfx	r7, r7, #0, #23
   d6c4a:	f3c6 16c3 	ubfx	r6, r6, #7, #4
   d6c4e:	08e4      	lsrs	r4, r4, #3
      pointer
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   d6c50:	3504      	adds	r5, #4
      {
	++_M_current;
	return *this;
   d6c52:	e7e8      	b.n	d6c26 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0xe>
   d6c54:	f367 0116 	bfi	r1, r7, #0, #23
   d6c58:	f366 51da 	bfi	r1, r6, #23, #4
   d6c5c:	f364 61df 	bfi	r1, r4, #27, #5
        return compareTo(other) > 0; 
   d6c60:	4628      	mov	r0, r5
   d6c62:	f7ff fecb 	bl	d69fc <_ZNK12LocalTimeYMD9compareToES_>
        if (result.isEmpty() || *it > result) {
   d6c66:	2800      	cmp	r0, #0
   d6c68:	dcea      	bgt.n	d6c40 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x28>
   d6c6a:	e7f1      	b.n	d6c50 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x38>
    return result;
   d6c6c:	2000      	movs	r0, #0
   d6c6e:	f367 0016 	bfi	r0, r7, #0, #23
   d6c72:	f366 50da 	bfi	r0, r6, #23, #4
   d6c76:	f364 60df 	bfi	r0, r4, #27, #5
}
   d6c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d6c80 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   d6c80:	4a05      	ldr	r2, [pc, #20]	; (d6c98 <_ZN15LocalTimeChangeC1Ev+0x18>)
   d6c82:	b508      	push	{r3, lr}
   d6c84:	6002      	str	r2, [r0, #0]
   d6c86:	2200      	movs	r2, #0
   d6c88:	4603      	mov	r3, r0
   d6c8a:	6042      	str	r2, [r0, #4]
   d6c8c:	3008      	adds	r0, #8
   d6c8e:	f7ff fed3 	bl	d6a38 <_ZN12LocalTimeHMSC1Ev>
}
   d6c92:	4618      	mov	r0, r3
   d6c94:	bd08      	pop	{r3, pc}
   d6c96:	bf00      	nop
   d6c98:	000df9a0 	.word	0x000df9a0

000d6c9c <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   d6c9c:	2300      	movs	r3, #0
   d6c9e:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   d6ca0:	8183      	strh	r3, [r0, #12]
   d6ca2:	7383      	strb	r3, [r0, #14]
}
   d6ca4:	4770      	bx	lr
	...

000d6ca8 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   d6ca8:	b530      	push	{r4, r5, lr}
   d6caa:	4604      	mov	r4, r0
   d6cac:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   d6cae:	460d      	mov	r5, r1
   d6cb0:	b111      	cbz	r1, d6cb8 <_ZN15LocalTimeChange5parseEPKc+0x10>
   d6cb2:	780b      	ldrb	r3, [r1, #0]
   d6cb4:	2b4d      	cmp	r3, #77	; 0x4d
   d6cb6:	d003      	beq.n	d6cc0 <_ZN15LocalTimeChange5parseEPKc+0x18>
        clear();
   d6cb8:	4620      	mov	r0, r4
   d6cba:	f7ff ffef 	bl	d6c9c <_ZN15LocalTimeChange5clearEv>
   d6cbe:	e01b      	b.n	d6cf8 <_ZN15LocalTimeChange5parseEPKc+0x50>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   d6cc0:	ab05      	add	r3, sp, #20
   d6cc2:	9300      	str	r3, [sp, #0]
   d6cc4:	490f      	ldr	r1, [pc, #60]	; (d6d04 <_ZN15LocalTimeChange5parseEPKc+0x5c>)
   d6cc6:	ab04      	add	r3, sp, #16
   d6cc8:	aa03      	add	r2, sp, #12
   d6cca:	4628      	mov	r0, r5
   d6ccc:	f004 f858 	bl	dad80 <sscanf>
   d6cd0:	2803      	cmp	r0, #3
   d6cd2:	d1f1      	bne.n	d6cb8 <_ZN15LocalTimeChange5parseEPKc+0x10>
        month = (int8_t) values[0];
   d6cd4:	9b03      	ldr	r3, [sp, #12]
   d6cd6:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   d6cd8:	9b04      	ldr	r3, [sp, #16]
   d6cda:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   d6cdc:	9b05      	ldr	r3, [sp, #20]
   d6cde:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   d6ce0:	212f      	movs	r1, #47	; 0x2f
   d6ce2:	4628      	mov	r0, r5
   d6ce4:	f007 fe9c 	bl	dea20 <strchr>
        if (cp) {
   d6ce8:	b140      	cbz	r0, d6cfc <_ZN15LocalTimeChange5parseEPKc+0x54>
            hms.parse(cp);
   d6cea:	1c41      	adds	r1, r0, #1
   d6cec:	f104 0008 	add.w	r0, r4, #8
   d6cf0:	f7ff feaa 	bl	d6a48 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   d6cf4:	2301      	movs	r3, #1
   d6cf6:	71e3      	strb	r3, [r4, #7]
}
   d6cf8:	b007      	add	sp, #28
   d6cfa:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   d6cfc:	81a0      	strh	r0, [r4, #12]
   d6cfe:	73a0      	strb	r0, [r4, #14]
}
   d6d00:	e7f8      	b.n	d6cf4 <_ZN15LocalTimeChange5parseEPKc+0x4c>
   d6d02:	bf00      	nop
   d6d04:	000df943 	.word	0x000df943

000d6d08 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   d6d08:	4b10      	ldr	r3, [pc, #64]	; (d6d4c <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   d6d0a:	4911      	ldr	r1, [pc, #68]	; (d6d50 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d6d0c:	b510      	push	{r4, lr}
   d6d0e:	4604      	mov	r4, r0
   d6d10:	f840 3b04 	str.w	r3, [r0], #4
   d6d14:	f006 fb91 	bl	dd43a <_ZN6StringC1EPKc>
   d6d18:	f104 0014 	add.w	r0, r4, #20
   d6d1c:	f7ff fe8c 	bl	d6a38 <_ZN12LocalTimeHMSC1Ev>
   d6d20:	490b      	ldr	r1, [pc, #44]	; (d6d50 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d6d22:	f104 001c 	add.w	r0, r4, #28
   d6d26:	f006 fb88 	bl	dd43a <_ZN6StringC1EPKc>
   d6d2a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d6d2e:	f7ff fe83 	bl	d6a38 <_ZN12LocalTimeHMSC1Ev>
   d6d32:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6d36:	f7ff ffa3 	bl	d6c80 <_ZN15LocalTimeChangeC1Ev>
   d6d3a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6d3e:	f7ff ff9f 	bl	d6c80 <_ZN15LocalTimeChangeC1Ev>
   d6d42:	2300      	movs	r3, #0
   d6d44:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   d6d48:	4620      	mov	r0, r4
   d6d4a:	bd10      	pop	{r4, pc}
   d6d4c:	000df9b0 	.word	0x000df9b0
   d6d50:	000e0190 	.word	0x000e0190

000d6d54 <_ZN22LocalTimePosixTimezone5parseEPKc>:
bool LocalTimePosixTimezone::parse(const char *str) {
   d6d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d58:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   d6d5a:	4608      	mov	r0, r1
   d6d5c:	f007 fe8a 	bl	dea74 <strdup>
    size_t ii = 0;
   d6d60:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   d6d62:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   d6d64:	9001      	str	r0, [sp, #4]
                dstStart.parse(token);
   d6d66:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   d6d6a:	493f      	ldr	r1, [pc, #252]	; (d6e68 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   d6d6c:	9801      	ldr	r0, [sp, #4]
   d6d6e:	aa01      	add	r2, sp, #4
   d6d70:	f007 ff06 	bl	deb80 <strtok_r>
   d6d74:	4601      	mov	r1, r0
   d6d76:	2800      	cmp	r0, #0
   d6d78:	d062      	beq.n	d6e40 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   d6d7a:	2d01      	cmp	r5, #1
   d6d7c:	f105 0301 	add.w	r3, r5, #1
   d6d80:	d053      	beq.n	d6e2a <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   d6d82:	2d02      	cmp	r5, #2
   d6d84:	d056      	beq.n	d6e34 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   d6d86:	2d00      	cmp	r5, #0
   d6d88:	d146      	bne.n	d6e18 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   d6d8a:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   d6d8c:	f892 9000 	ldrb.w	r9, [r2]
   d6d90:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   d6d94:	4615      	mov	r5, r2
   d6d96:	4617      	mov	r7, r2
   d6d98:	f102 0201 	add.w	r2, r2, #1
   d6d9c:	d8f6      	bhi.n	d6d8c <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   d6d9e:	2200      	movs	r2, #0
   d6da0:	702a      	strb	r2, [r5, #0]
                standardName = start;
   d6da2:	f104 001c 	add.w	r0, r4, #28
   d6da6:	f006 fba6 	bl	dd4f6 <_ZN6StringaSEPKc>
                valid = true;
   d6daa:	2201      	movs	r2, #1
                *cp = save2;
   d6dac:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   d6db0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   d6db4:	782a      	ldrb	r2, [r5, #0]
   d6db6:	b36a      	cbz	r2, d6e14 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   d6db8:	f897 a000 	ldrb.w	sl, [r7]
   d6dbc:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   d6dc0:	2a3f      	cmp	r2, #63	; 0x3f
   d6dc2:	46b9      	mov	r9, r7
   d6dc4:	46bb      	mov	fp, r7
   d6dc6:	f107 0701 	add.w	r7, r7, #1
   d6dca:	d9f5      	bls.n	d6db8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   d6dcc:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   d6dce:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   d6dd2:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   d6dd6:	4629      	mov	r1, r5
   d6dd8:	4638      	mov	r0, r7
   d6dda:	f7ff fe35 	bl	d6a48 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   d6dde:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   d6de2:	f1ba 0f00 	cmp.w	sl, #0
   d6de6:	d015      	beq.n	d6e14 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   d6de8:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   d6dea:	f81b ab01 	ldrb.w	sl, [fp], #1
   d6dee:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   d6df2:	d8f9      	bhi.n	d6de8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   d6df4:	2200      	movs	r2, #0
   d6df6:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   d6df8:	4649      	mov	r1, r9
   d6dfa:	1d20      	adds	r0, r4, #4
   d6dfc:	f006 fb7b 	bl	dd4f6 <_ZN6StringaSEPKc>
                        *cp = save2;
   d6e00:	f885 a000 	strb.w	sl, [r5]
                        if (*cp) {
   d6e04:	f104 0014 	add.w	r0, r4, #20
   d6e08:	f1ba 0f00 	cmp.w	sl, #0
   d6e0c:	d006      	beq.n	d6e1c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   d6e0e:	4629      	mov	r1, r5
   d6e10:	f7ff fe1a 	bl	d6a48 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   d6e14:	2501      	movs	r5, #1
   d6e16:	e7a8      	b.n	d6d6a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   d6e18:	461d      	mov	r5, r3
   d6e1a:	e7a6      	b.n	d6d6a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   d6e1c:	4639      	mov	r1, r7
   d6e1e:	f7ff fd27 	bl	d6870 <_ZN12LocalTimeHMSaSERKS_>
                            dstHMS.hour--;
   d6e22:	7e23      	ldrb	r3, [r4, #24]
   d6e24:	3b01      	subs	r3, #1
   d6e26:	7623      	strb	r3, [r4, #24]
   d6e28:	e7f4      	b.n	d6e14 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   d6e2a:	4640      	mov	r0, r8
   d6e2c:	f7ff ff3c 	bl	d6ca8 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d6e30:	2502      	movs	r5, #2
   d6e32:	e79a      	b.n	d6d6a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                standardStart.parse(token);
   d6e34:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6e38:	f7ff ff36 	bl	d6ca8 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d6e3c:	2503      	movs	r5, #3
   d6e3e:	e794      	b.n	d6d6a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
    if (dstStart.valid && !standardStart.valid) {
   d6e40:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   d6e44:	b143      	cbz	r3, d6e58 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   d6e46:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   d6e4a:	b92a      	cbnz	r2, d6e58 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        dstStart.clear();
   d6e4c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6e50:	f7ff ff24 	bl	d6c9c <_ZN15LocalTimeChange5clearEv>
        valid = false;
   d6e54:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    free(mutableCopy);
   d6e58:	4630      	mov	r0, r6
   d6e5a:	f003 ff79 	bl	dad50 <free>
}
   d6e5e:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   d6e62:	b003      	add	sp, #12
   d6e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6e68:	000df94d 	.word	0x000df94d

000d6e6c <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   d6e6c:	b538      	push	{r3, r4, r5, lr}
   d6e6e:	4b13      	ldr	r3, [pc, #76]	; (d6ebc <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   d6e70:	4604      	mov	r4, r0
   d6e72:	460d      	mov	r5, r1
   d6e74:	f840 3b04 	str.w	r3, [r0], #4
   d6e78:	4911      	ldr	r1, [pc, #68]	; (d6ec0 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d6e7a:	f006 fade 	bl	dd43a <_ZN6StringC1EPKc>
   d6e7e:	f104 0014 	add.w	r0, r4, #20
   d6e82:	f7ff fdd9 	bl	d6a38 <_ZN12LocalTimeHMSC1Ev>
   d6e86:	490e      	ldr	r1, [pc, #56]	; (d6ec0 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d6e88:	f104 001c 	add.w	r0, r4, #28
   d6e8c:	f006 fad5 	bl	dd43a <_ZN6StringC1EPKc>
   d6e90:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d6e94:	f7ff fdd0 	bl	d6a38 <_ZN12LocalTimeHMSC1Ev>
   d6e98:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6e9c:	f7ff fef0 	bl	d6c80 <_ZN15LocalTimeChangeC1Ev>
   d6ea0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6ea4:	f7ff feec 	bl	d6c80 <_ZN15LocalTimeChangeC1Ev>
   d6ea8:	2300      	movs	r3, #0
   d6eaa:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   d6eae:	4629      	mov	r1, r5
   d6eb0:	4620      	mov	r0, r4
   d6eb2:	f7ff ff4f 	bl	d6d54 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   d6eb6:	4620      	mov	r0, r4
   d6eb8:	bd38      	pop	{r3, r4, r5, pc}
   d6eba:	bf00      	nop
   d6ebc:	000df9b0 	.word	0x000df9b0
   d6ec0:	000e0190 	.word	0x000e0190

000d6ec4 <_ZNK14LocalTimeValue3hmsEv>:
LocalTimeHMS LocalTimeValue::hms() const {
   d6ec4:	b508      	push	{r3, lr}
   d6ec6:	4603      	mov	r3, r0
    LocalTimeHMS result;
   d6ec8:	f7ff fdb6 	bl	d6a38 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   d6ecc:	688a      	ldr	r2, [r1, #8]
   d6ece:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   d6ed0:	684a      	ldr	r2, [r1, #4]
   d6ed2:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   d6ed4:	680a      	ldr	r2, [r1, #0]
   d6ed6:	719a      	strb	r2, [r3, #6]
}
   d6ed8:	4618      	mov	r0, r3
   d6eda:	bd08      	pop	{r3, pc}

000d6edc <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   d6edc:	b513      	push	{r0, r1, r4, lr}
   d6ede:	4b07      	ldr	r3, [pc, #28]	; (d6efc <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   d6ee0:	6003      	str	r3, [r0, #0]
   d6ee2:	2300      	movs	r3, #0
   d6ee4:	4604      	mov	r4, r0
   d6ee6:	6043      	str	r3, [r0, #4]
    *this = value.hms();
   d6ee8:	4668      	mov	r0, sp
   d6eea:	f7ff ffeb 	bl	d6ec4 <_ZNK14LocalTimeValue3hmsEv>
   d6eee:	4669      	mov	r1, sp
   d6ef0:	4620      	mov	r0, r4
   d6ef2:	f7ff fcbd 	bl	d6870 <_ZN12LocalTimeHMSaSERKS_>
}
   d6ef6:	4620      	mov	r0, r4
   d6ef8:	b002      	add	sp, #8
   d6efa:	bd10      	pop	{r4, pc}
   d6efc:	000df990 	.word	0x000df990

000d6f00 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>:
    if (!hms.ignore) {
   d6f00:	f991 3007 	ldrsb.w	r3, [r1, #7]
   d6f04:	b943      	cbnz	r3, d6f18 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS+0x18>
        tm_hour = hms.hour;
   d6f06:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d6f0a:	6083      	str	r3, [r0, #8]
        tm_min = hms.minute;
   d6f0c:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d6f10:	6043      	str	r3, [r0, #4]
        tm_sec = hms.second;
   d6f12:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d6f16:	6003      	str	r3, [r0, #0]
}
   d6f18:	4770      	bx	lr

000d6f1a <_ZNK14LocalTimeValue3ymdEv>:
LocalTimeYMD LocalTimeValue::ymd() const {
   d6f1a:	b507      	push	{r0, r1, r2, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d6f1c:	2300      	movs	r3, #0
   d6f1e:	4601      	mov	r1, r0
    result.fromTimeInfo(this);
   d6f20:	a801      	add	r0, sp, #4
   d6f22:	9301      	str	r3, [sp, #4]
   d6f24:	f7ff fd13 	bl	d694e <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d6f28:	9801      	ldr	r0, [sp, #4]
   d6f2a:	b003      	add	sp, #12
   d6f2c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6f30 <_ZN22LocalTimePosixTimezoneC1ERKS_>:
class LocalTimePosixTimezone {
   d6f30:	4b19      	ldr	r3, [pc, #100]	; (d6f98 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x68>)
   d6f32:	b570      	push	{r4, r5, r6, lr}
   d6f34:	4604      	mov	r4, r0
   d6f36:	460d      	mov	r5, r1
   d6f38:	f840 3b04 	str.w	r3, [r0], #4
   d6f3c:	3104      	adds	r1, #4
   d6f3e:	f006 fac7 	bl	dd4d0 <_ZN6StringC1ERKS_>
   d6f42:	f105 0114 	add.w	r1, r5, #20
   d6f46:	f104 0014 	add.w	r0, r4, #20
   d6f4a:	f7ff fc89 	bl	d6860 <_ZN12LocalTimeHMSC1ERKS_>
   d6f4e:	f105 011c 	add.w	r1, r5, #28
   d6f52:	f104 001c 	add.w	r0, r4, #28
   d6f56:	f006 fabb 	bl	dd4d0 <_ZN6StringC1ERKS_>
   d6f5a:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d6f5e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d6f62:	f7ff fc7d 	bl	d6860 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeChange {
   d6f66:	4e0d      	ldr	r6, [pc, #52]	; (d6f9c <_ZN22LocalTimePosixTimezoneC1ERKS_+0x6c>)
   d6f68:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6f6a:	63a3      	str	r3, [r4, #56]	; 0x38
   d6f6c:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d6f70:	6366      	str	r6, [r4, #52]	; 0x34
   d6f72:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6f76:	f7ff fc73 	bl	d6860 <_ZN12LocalTimeHMSC1ERKS_>
   d6f7a:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d6f7c:	64a3      	str	r3, [r4, #72]	; 0x48
   d6f7e:	6466      	str	r6, [r4, #68]	; 0x44
   d6f80:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d6f84:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d6f88:	f7ff fc6a 	bl	d6860 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimePosixTimezone {
   d6f8c:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d6f90:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d6f94:	4620      	mov	r0, r4
   d6f96:	bd70      	pop	{r4, r5, r6, pc}
   d6f98:	000df9b0 	.word	0x000df9b0
   d6f9c:	000df9a0 	.word	0x000df9a0

000d6fa0 <_ZN16LocalTimeConvertC1ERKS_>:
class LocalTimeConvert {
   d6fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6fa2:	460c      	mov	r4, r1
   d6fa4:	f851 3b04 	ldr.w	r3, [r1], #4
   d6fa8:	4607      	mov	r7, r0
   d6faa:	f840 3b04 	str.w	r3, [r0], #4
   d6fae:	f7ff ffbf 	bl	d6f30 <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d6fb2:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d6fb6:	f104 0668 	add.w	r6, r4, #104	; 0x68
   d6fba:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   d6fbe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6fc0:	f107 0568 	add.w	r5, r7, #104	; 0x68
   d6fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6fc6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6fca:	6833      	ldr	r3, [r6, #0]
   d6fcc:	602b      	str	r3, [r5, #0]
   d6fce:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
   d6fd2:	f104 0698 	add.w	r6, r4, #152	; 0x98
   d6fd6:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
   d6fda:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6fdc:	f107 0598 	add.w	r5, r7, #152	; 0x98
   d6fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6fe2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6fe6:	6833      	ldr	r3, [r6, #0]
   d6fe8:	602b      	str	r3, [r5, #0]
   d6fea:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	; 0xc0
   d6fee:	34c8      	adds	r4, #200	; 0xc8
   d6ff0:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
   d6ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6ff6:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
   d6ffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7000:	6823      	ldr	r3, [r4, #0]
   d7002:	602b      	str	r3, [r5, #0]
   d7004:	4638      	mov	r0, r7
   d7006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7008 <_ZN21LocalTimeScheduleItemD1Ev>:
class LocalTimeScheduleItem {
   d7008:	b510      	push	{r4, lr}
   d700a:	4604      	mov	r4, r0
   d700c:	3038      	adds	r0, #56	; 0x38
   d700e:	f006 f9c9 	bl	dd3a4 <_ZN6StringD1Ev>
	_M_deallocate(_M_impl._M_start,
   d7012:	6920      	ldr	r0, [r4, #16]
   d7014:	f7ff fbec 	bl	d67f0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d7018:	6860      	ldr	r0, [r4, #4]
   d701a:	f7ff fbe9 	bl	d67f0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d701e:	4620      	mov	r0, r4
   d7020:	bd10      	pop	{r4, pc}

000d7022 <_ZN16LocalTimeConvert7timeStrEv>:
String LocalTimeConvert::timeStr() {
   d7022:	b510      	push	{r4, lr}
   d7024:	4604      	mov	r4, r0
   d7026:	b088      	sub	sp, #32
   d7028:	4608      	mov	r0, r1
    asctime_r(&localTimeValue, ascstr);
   d702a:	3068      	adds	r0, #104	; 0x68
   d702c:	a901      	add	r1, sp, #4
   d702e:	f007 fc31 	bl	de894 <asctime_r>
    int len = strlen(ascstr);
   d7032:	a801      	add	r0, sp, #4
   d7034:	f007 fd3b 	bl	deaae <strlen>
    ascstr[len-1] = 0; // remove final newline
   d7038:	ab08      	add	r3, sp, #32
   d703a:	4418      	add	r0, r3
   d703c:	2300      	movs	r3, #0
   d703e:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   d7042:	a901      	add	r1, sp, #4
   d7044:	4620      	mov	r0, r4
   d7046:	f006 f9f8 	bl	dd43a <_ZN6StringC1EPKc>
}
   d704a:	4620      	mov	r0, r4
   d704c:	b008      	add	sp, #32
   d704e:	bd10      	pop	{r4, pc}

000d7050 <_ZNK16LocalTimeConvert8zoneNameEv>:
String LocalTimeConvert::zoneName() const { 
   d7050:	b538      	push	{r3, r4, r5, lr}
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   d7052:	f891 3058 	ldrb.w	r3, [r1, #88]	; 0x58
   d7056:	4605      	mov	r5, r0
   d7058:	460c      	mov	r4, r1
   d705a:	b13b      	cbz	r3, d706c <_ZNK16LocalTimeConvert8zoneNameEv+0x1c>
   d705c:	f991 303f 	ldrsb.w	r3, [r1, #63]	; 0x3f
   d7060:	b953      	cbnz	r3, d7078 <_ZNK16LocalTimeConvert8zoneNameEv+0x28>
   d7062:	f101 0030 	add.w	r0, r1, #48	; 0x30
   d7066:	f7ff fd57 	bl	d6b18 <_ZNK12LocalTimeHMS9toSecondsEv>
   d706a:	b928      	cbnz	r0, d7078 <_ZNK16LocalTimeConvert8zoneNameEv+0x28>
        return "Z";
   d706c:	4909      	ldr	r1, [pc, #36]	; (d7094 <_ZNK16LocalTimeConvert8zoneNameEv+0x44>)
   d706e:	4628      	mov	r0, r5
   d7070:	f006 f9e3 	bl	dd43a <_ZN6StringC1EPKc>
};
   d7074:	4628      	mov	r0, r5
   d7076:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   d7078:	6820      	ldr	r0, [r4, #0]
   d707a:	f7ff fbaf 	bl	d67dc <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d707e:	b128      	cbz	r0, d708c <_ZNK16LocalTimeConvert8zoneNameEv+0x3c>
        return config.dstName;
   d7080:	f104 0108 	add.w	r1, r4, #8
        return config.standardName;
   d7084:	4628      	mov	r0, r5
   d7086:	f006 fa23 	bl	dd4d0 <_ZN6StringC1ERKS_>
   d708a:	e7f3      	b.n	d7074 <_ZNK16LocalTimeConvert8zoneNameEv+0x24>
   d708c:	f104 0120 	add.w	r1, r4, #32
   d7090:	e7f8      	b.n	d7084 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>
   d7092:	bf00      	nop
   d7094:	000df94f 	.word	0x000df94f

000d7098 <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   d7098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d709c:	4680      	mov	r8, r0
   d709e:	b0a9      	sub	sp, #164	; 0xa4
   d70a0:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d70a2:	4615      	mov	r5, r2
   d70a4:	b12a      	cbz	r2, d70b2 <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   d70a6:	4b4b      	ldr	r3, [pc, #300]	; (d71d4 <_ZN16LocalTimeConvert6formatEPKc+0x13c>)
   d70a8:	4610      	mov	r0, r2
   d70aa:	6819      	ldr	r1, [r3, #0]
   d70ac:	f007 fccf 	bl	dea4e <strcmp>
   d70b0:	b938      	cbnz	r0, d70c2 <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   d70b2:	4621      	mov	r1, r4
   d70b4:	4640      	mov	r0, r8
   d70b6:	f7ff ffb4 	bl	d7022 <_ZN16LocalTimeConvert7timeStrEv>
}
   d70ba:	4640      	mov	r0, r8
   d70bc:	b029      	add	sp, #164	; 0xa4
   d70be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d70c2:	4629      	mov	r1, r5
   d70c4:	223f      	movs	r2, #63	; 0x3f
   d70c6:	a818      	add	r0, sp, #96	; 0x60
   d70c8:	f007 fd0b 	bl	deae2 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d70cc:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d70ce:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d70d0:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d70d4:	f007 fceb 	bl	deaae <strlen>
    String zoneNameStr = zoneName();
   d70d8:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d70da:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   d70dc:	a803      	add	r0, sp, #12
   d70de:	f7ff ffb7 	bl	d7050 <_ZNK16LocalTimeConvert8zoneNameEv>
   d70e2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   d70e6:	b13b      	cbz	r3, d70f8 <_ZN16LocalTimeConvert6formatEPKc+0x60>
   d70e8:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d70ec:	bb83      	cbnz	r3, d7150 <_ZN16LocalTimeConvert6formatEPKc+0xb8>
   d70ee:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d70f2:	f7ff fd11 	bl	d6b18 <_ZNK12LocalTimeHMS9toSecondsEv>
   d70f6:	bb58      	cbnz	r0, d7150 <_ZN16LocalTimeConvert6formatEPKc+0xb8>
        strcpy(time_zone_str, "Z");
   d70f8:	4937      	ldr	r1, [pc, #220]	; (d71d8 <_ZN16LocalTimeConvert6formatEPKc+0x140>)
   d70fa:	a807      	add	r0, sp, #28
   d70fc:	f007 fcb1 	bl	dea62 <strcpy>
   d7100:	af18      	add	r7, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   d7102:	2600      	movs	r6, #0
    for (size_t i=0; i<len-1; i++)
   d7104:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   d7108:	45b3      	cmp	fp, r6
   d710a:	d94e      	bls.n	d71aa <_ZN16LocalTimeConvert6formatEPKc+0x112>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d710c:	46ba      	mov	sl, r7
   d710e:	f106 0901 	add.w	r9, r6, #1
   d7112:	f81a 3b01 	ldrb.w	r3, [sl], #1
   d7116:	2b25      	cmp	r3, #37	; 0x25
   d7118:	d117      	bne.n	d714a <_ZN16LocalTimeConvert6formatEPKc+0xb2>
   d711a:	787b      	ldrb	r3, [r7, #1]
   d711c:	2b7a      	cmp	r3, #122	; 0x7a
   d711e:	d136      	bne.n	d718e <_ZN16LocalTimeConvert6formatEPKc+0xf6>
            size_t tzlen = strlen(time_zone_str);
   d7120:	a807      	add	r0, sp, #28
   d7122:	f007 fcc4 	bl	deaae <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d7126:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   d7128:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d712a:	1830      	adds	r0, r6, r0
   d712c:	ebab 0206 	sub.w	r2, fp, r6
   d7130:	1cb9      	adds	r1, r7, #2
   d7132:	4418      	add	r0, r3
   d7134:	f007 fbec 	bl	de910 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d7138:	462a      	mov	r2, r5
   d713a:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   d713c:	4638      	mov	r0, r7
   d713e:	f007 fbe7 	bl	de910 <memcpy>
            len = strlen(format_str);
   d7142:	a818      	add	r0, sp, #96	; 0x60
   d7144:	f007 fcb3 	bl	deaae <strlen>
   d7148:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   d714a:	4657      	mov	r7, sl
   d714c:	464e      	mov	r6, r9
   d714e:	e7d9      	b.n	d7104 <_ZN16LocalTimeConvert6formatEPKc+0x6c>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   d7150:	6820      	ldr	r0, [r4, #0]
   d7152:	f7ff fb43 	bl	d67dc <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d7156:	b1b8      	cbz	r0, d7188 <_ZN16LocalTimeConvert6formatEPKc+0xf0>
   d7158:	f104 0018 	add.w	r0, r4, #24
   d715c:	f7ff fcdc 	bl	d6b18 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   d7160:	213c      	movs	r1, #60	; 0x3c
   d7162:	fb90 f3f1 	sdiv	r3, r0, r1
   d7166:	2b00      	cmp	r3, #0
   d7168:	bfb8      	it	lt
   d716a:	425b      	neglt	r3, r3
   d716c:	fbb3 f2f1 	udiv	r2, r3, r1
   d7170:	fb01 3312 	mls	r3, r1, r2, r3
   d7174:	9300      	str	r3, [sp, #0]
   d7176:	4a19      	ldr	r2, [pc, #100]	; (d71dc <_ZN16LocalTimeConvert6formatEPKc+0x144>)
   d7178:	4b19      	ldr	r3, [pc, #100]	; (d71e0 <_ZN16LocalTimeConvert6formatEPKc+0x148>)
   d717a:	fb90 f3f3 	sdiv	r3, r0, r3
   d717e:	2110      	movs	r1, #16
   d7180:	a807      	add	r0, sp, #28
   d7182:	f003 fe05 	bl	dad90 <snprintf>
   d7186:	e7bb      	b.n	d7100 <_ZN16LocalTimeConvert6formatEPKc+0x68>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   d7188:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d718c:	e7e6      	b.n	d715c <_ZN16LocalTimeConvert6formatEPKc+0xc4>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   d718e:	2b5a      	cmp	r3, #90	; 0x5a
   d7190:	d1db      	bne.n	d714a <_ZN16LocalTimeConvert6formatEPKc+0xb2>
            size_t tzlen = zoneNameStr.length();
   d7192:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d7194:	ab18      	add	r3, sp, #96	; 0x60
   d7196:	1970      	adds	r0, r6, r5
   d7198:	ebab 0206 	sub.w	r2, fp, r6
   d719c:	1cb9      	adds	r1, r7, #2
   d719e:	4418      	add	r0, r3
   d71a0:	f007 fbb6 	bl	de910 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   d71a4:	9903      	ldr	r1, [sp, #12]
   d71a6:	462a      	mov	r2, r5
   d71a8:	e7c8      	b.n	d713c <_ZN16LocalTimeConvert6formatEPKc+0xa4>
    char buf[50] = {};
   d71aa:	2100      	movs	r1, #0
   d71ac:	222e      	movs	r2, #46	; 0x2e
   d71ae:	a80c      	add	r0, sp, #48	; 0x30
   d71b0:	910b      	str	r1, [sp, #44]	; 0x2c
   d71b2:	f007 fbd5 	bl	de960 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   d71b6:	f104 0368 	add.w	r3, r4, #104	; 0x68
   d71ba:	aa18      	add	r2, sp, #96	; 0x60
   d71bc:	2132      	movs	r1, #50	; 0x32
   d71be:	a80b      	add	r0, sp, #44	; 0x2c
   d71c0:	f003 fe16 	bl	dadf0 <strftime>
    return String(buf);    
   d71c4:	a90b      	add	r1, sp, #44	; 0x2c
   d71c6:	4640      	mov	r0, r8
   d71c8:	f006 f937 	bl	dd43a <_ZN6StringC1EPKc>
    String zoneNameStr = zoneName();
   d71cc:	a803      	add	r0, sp, #12
   d71ce:	f006 f8e9 	bl	dd3a4 <_ZN6StringD1Ev>
   d71d2:	e772      	b.n	d70ba <_ZN16LocalTimeConvert6formatEPKc+0x22>
   d71d4:	2003dc44 	.word	0x2003dc44
   d71d8:	000df94f 	.word	0x000df94f
   d71dc:	000df951 	.word	0x000df951
   d71e0:	fffff1f0 	.word	0xfffff1f0

000d71e4 <_ZN9LocalTime8instanceEv>:
LocalTime &LocalTime::instance() {
   d71e4:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d71e6:	4d09      	ldr	r5, [pc, #36]	; (d720c <_ZN9LocalTime8instanceEv+0x28>)
   d71e8:	682b      	ldr	r3, [r5, #0]
   d71ea:	b963      	cbnz	r3, d7206 <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   d71ec:	2060      	movs	r0, #96	; 0x60
   d71ee:	f7fc ff52 	bl	d4096 <_Znwj>
   d71f2:	4604      	mov	r4, r0
   d71f4:	b130      	cbz	r0, d7204 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   d71f6:	4b06      	ldr	r3, [pc, #24]	; (d7210 <_ZN9LocalTime8instanceEv+0x2c>)
   d71f8:	f840 3b04 	str.w	r3, [r0], #4
   d71fc:	f7ff fd84 	bl	d6d08 <_ZN22LocalTimePosixTimezoneC1Ev>
   d7200:	2364      	movs	r3, #100	; 0x64
   d7202:	65e3      	str	r3, [r4, #92]	; 0x5c
   d7204:	602c      	str	r4, [r5, #0]
}
   d7206:	6828      	ldr	r0, [r5, #0]
   d7208:	bd38      	pop	{r3, r4, r5, pc}
   d720a:	bf00      	nop
   d720c:	2003e25c 	.word	0x2003e25c
   d7210:	000df980 	.word	0x000df980

000d7214 <_ZN9LocalTime8tmToTimeEP2tm>:
    return mktime(pTimeInfo);
   d7214:	f003 be04 	b.w	dae20 <mktime>

000d7218 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   d7218:	3901      	subs	r1, #1
   d721a:	290b      	cmp	r1, #11
   d721c:	d815      	bhi.n	d724a <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   d721e:	e8df f001 	tbb	[pc, r1]
   d7222:	0816      	.short	0x0816
   d7224:	06160616 	.word	0x06160616
   d7228:	16061616 	.word	0x16061616
   d722c:	1606      	.short	0x1606
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   d722e:	201e      	movs	r0, #30
   d7230:	4770      	bx	lr
            if ((year % 4) == 0) {
   d7232:	0783      	lsls	r3, r0, #30
   d7234:	d10d      	bne.n	d7252 <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   d7236:	2264      	movs	r2, #100	; 0x64
   d7238:	fb90 f3f2 	sdiv	r3, r0, r2
   d723c:	fb02 0013 	mls	r0, r2, r3, r0
   d7240:	2800      	cmp	r0, #0
                    return 29;
   d7242:	bf0c      	ite	eq
   d7244:	201c      	moveq	r0, #28
   d7246:	201d      	movne	r0, #29
   d7248:	4770      	bx	lr
    return 0;
   d724a:	2000      	movs	r0, #0
   d724c:	4770      	bx	lr
            return 31;
   d724e:	201f      	movs	r0, #31
   d7250:	4770      	bx	lr
                return 28;
   d7252:	201c      	movs	r0, #28
}
   d7254:	4770      	bx	lr

000d7256 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d7256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   d7258:	2301      	movs	r3, #1
   d725a:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   d725c:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d7260:	3b01      	subs	r3, #1
   d7262:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d7264:	2300      	movs	r3, #0
   d7266:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d726a:	4606      	mov	r6, r0
   d726c:	460c      	mov	r4, r1
   d726e:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d7270:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   d7272:	4620      	mov	r0, r4
   d7274:	f7ff ffce 	bl	d7214 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   d7278:	f996 3006 	ldrsb.w	r3, [r6, #6]
   d727c:	69a2      	ldr	r2, [r4, #24]
   d727e:	429a      	cmp	r2, r3
   d7280:	d003      	beq.n	d728a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   d7282:	68e3      	ldr	r3, [r4, #12]
   d7284:	3301      	adds	r3, #1
   d7286:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   d7288:	e7f3      	b.n	d7272 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   d728a:	f996 5005 	ldrsb.w	r5, [r6, #5]
   d728e:	2d01      	cmp	r5, #1
   d7290:	d013      	beq.n	d72ba <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   d7292:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d7294:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   d7296:	3d01      	subs	r5, #1
   d7298:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   d729c:	441d      	add	r5, r3
   d729e:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d72a0:	f996 1004 	ldrsb.w	r1, [r6, #4]
   d72a4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d72a8:	f7ff ffb6 	bl	d7218 <_ZN9LocalTime14lastDayOfMonthEii>
   d72ac:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   d72ae:	bfc4      	itt	gt
   d72b0:	3d07      	subgt	r5, #7
   d72b2:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   d72b4:	4620      	mov	r0, r4
   d72b6:	f7ff ffad 	bl	d7214 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   d72ba:	4621      	mov	r1, r4
   d72bc:	f106 0008 	add.w	r0, r6, #8
   d72c0:	f7ff fc46 	bl	d6b50 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   d72c4:	4638      	mov	r0, r7
   d72c6:	f7ff fc50 	bl	d6b6a <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   d72ca:	4620      	mov	r0, r4
}
   d72cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   d72d0:	f003 bda6 	b.w	dae20 <mktime>

000d72d4 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   d72d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   d72d6:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   d72da:	b085      	sub	sp, #20
   d72dc:	4604      	mov	r4, r0
    if (!config.isValid()) {
   d72de:	b92b      	cbnz	r3, d72ec <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   d72e0:	f7ff ff80 	bl	d71e4 <_ZN9LocalTime8instanceEv>
   d72e4:	1d01      	adds	r1, r0, #4
   d72e6:	1d20      	adds	r0, r4, #4
   d72e8:	f7ff fae6 	bl	d68b8 <_ZN22LocalTimePosixTimezoneaSERKS_>
    if (config.hasDST()) {
   d72ec:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d72f0:	2b00      	cmp	r3, #0
   d72f2:	d069      	beq.n	d73c8 <_ZN16LocalTimeConvert7convertEv+0xf4>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   d72f4:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d72f8:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   d72fc:	4639      	mov	r1, r7
        standardStartTimeInfo = dstStartTimeInfo;
   d72fe:	463e      	mov	r6, r7
    localtime_r(&time, pTimeInfo);
   d7300:	a802      	add	r0, sp, #8
   d7302:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d7306:	f003 fd7b 	bl	dae00 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   d730a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d730c:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   d7310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7312:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7316:	6833      	ldr	r3, [r6, #0]
   d7318:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   d731a:	f104 0130 	add.w	r1, r4, #48	; 0x30
   d731e:	a802      	add	r0, sp, #8
   d7320:	f7ff fa9e 	bl	d6860 <_ZN12LocalTimeHMSC1ERKS_>
   d7324:	aa02      	add	r2, sp, #8
   d7326:	4639      	mov	r1, r7
   d7328:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d732c:	f7ff ff93 	bl	d7256 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   d7330:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d7334:	f104 0118 	add.w	r1, r4, #24
   d7338:	a802      	add	r0, sp, #8
   d733a:	f7ff fa91 	bl	d6860 <_ZN12LocalTimeHMSC1ERKS_>
   d733e:	aa02      	add	r2, sp, #8
   d7340:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   d7344:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d7348:	f7ff ff85 	bl	d7256 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   d734c:	e9d4 6724 	ldrd	r6, r7, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d7350:	460b      	mov	r3, r1
        if (dstStart < standardStart) {
   d7352:	4286      	cmp	r6, r0
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d7354:	4602      	mov	r2, r0
        if (dstStart < standardStart) {
   d7356:	eb77 0103 	sbcs.w	r1, r7, r3
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d735a:	e9c4 2330 	strd	r2, r3, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   d735e:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
   d7362:	da24      	bge.n	d73ae <_ZN16LocalTimeConvert7convertEv+0xda>
            if (time < dstStart) {
   d7364:	42b0      	cmp	r0, r6
   d7366:	eb71 0507 	sbcs.w	r5, r1, r7
   d736a:	da19      	bge.n	d73a0 <_ZN16LocalTimeConvert7convertEv+0xcc>
                position = Position::BEFORE_DST;
   d736c:	2300      	movs	r3, #0
        position = Position::NO_DST;
   d736e:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   d7370:	6820      	ldr	r0, [r4, #0]
   d7372:	f7ff fa33 	bl	d67dc <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d7376:	f104 0168 	add.w	r1, r4, #104	; 0x68
   d737a:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
   d737e:	9101      	str	r1, [sp, #4]
   d7380:	bb20      	cbnz	r0, d73cc <_ZN16LocalTimeConvert7convertEv+0xf8>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   d7382:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d7386:	f7ff fbc7 	bl	d6b18 <_ZNK12LocalTimeHMS9toSecondsEv>
   d738a:	1a36      	subs	r6, r6, r0
   d738c:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
    localtime_r(&time, pTimeInfo);
   d7390:	9901      	ldr	r1, [sp, #4]
   d7392:	a802      	add	r0, sp, #8
   d7394:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7398:	f003 fd32 	bl	dae00 <localtime_r>
}
   d739c:	b005      	add	sp, #20
   d739e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   d73a0:	4290      	cmp	r0, r2
   d73a2:	eb71 0303 	sbcs.w	r3, r1, r3
                position = Position::IN_DST;
   d73a6:	bfb4      	ite	lt
   d73a8:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   d73aa:	2302      	movge	r3, #2
   d73ac:	e7df      	b.n	d736e <_ZN16LocalTimeConvert7convertEv+0x9a>
            if (time < standardStart) {
   d73ae:	4290      	cmp	r0, r2
   d73b0:	eb71 0303 	sbcs.w	r3, r1, r3
   d73b4:	da01      	bge.n	d73ba <_ZN16LocalTimeConvert7convertEv+0xe6>
                position = Position::BEFORE_STANDARD;
   d73b6:	2303      	movs	r3, #3
   d73b8:	e7d9      	b.n	d736e <_ZN16LocalTimeConvert7convertEv+0x9a>
            else if (time < dstStart) {
   d73ba:	42b0      	cmp	r0, r6
   d73bc:	eb71 0307 	sbcs.w	r3, r1, r7
                position = Position::IN_STANDARD;
   d73c0:	bfb4      	ite	lt
   d73c2:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   d73c4:	2305      	movge	r3, #5
   d73c6:	e7d2      	b.n	d736e <_ZN16LocalTimeConvert7convertEv+0x9a>
        position = Position::NO_DST;
   d73c8:	2306      	movs	r3, #6
   d73ca:	e7d0      	b.n	d736e <_ZN16LocalTimeConvert7convertEv+0x9a>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d73cc:	f104 0018 	add.w	r0, r4, #24
   d73d0:	e7d9      	b.n	d7386 <_ZN16LocalTimeConvert7convertEv+0xb2>

000d73d2 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>:
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d73d2:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    struct tm mutableTimeInfo = *this;
   d73d6:	4604      	mov	r4, r0
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d73d8:	460e      	mov	r6, r1
    struct tm mutableTimeInfo = *this;
   d73da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d73dc:	b0dc      	sub	sp, #368	; 0x170
    struct tm mutableTimeInfo = *this;
   d73de:	ad01      	add	r5, sp, #4
   d73e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d73e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d73e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d73e6:	6823      	ldr	r3, [r4, #0]
   d73e8:	602b      	str	r3, [r5, #0]
    return mktime(pTimeInfo);
   d73ea:	a801      	add	r0, sp, #4
   d73ec:	f003 fd18 	bl	dae20 <mktime>
   d73f0:	4604      	mov	r4, r0
    standardTime += config.standardHMS.toSeconds();
   d73f2:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    return mktime(pTimeInfo);
   d73f6:	460d      	mov	r5, r1
    standardTime += config.standardHMS.toSeconds();
   d73f8:	f7ff fb8e 	bl	d6b18 <_ZNK12LocalTimeHMS9toSecondsEv>
    if (config.hasDST()) {
   d73fc:	f996 303b 	ldrsb.w	r3, [r6, #59]	; 0x3b
    standardTime += config.standardHMS.toSeconds();
   d7400:	eb14 0800 	adds.w	r8, r4, r0
   d7404:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
    if (config.hasDST()) {
   d7408:	b31b      	cbz	r3, d7452 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x80>
class LocalTimeConvert {
   d740a:	2306      	movs	r3, #6
   d740c:	a821      	add	r0, sp, #132	; 0x84
   d740e:	9320      	str	r3, [sp, #128]	; 0x80
   d7410:	f7ff fc7a 	bl	d6d08 <_ZN22LocalTimePosixTimezoneC1Ev>
        convert.withConfig(config).withTime(standardTime).convert();
   d7414:	4631      	mov	r1, r6
   d7416:	a80a      	add	r0, sp, #40	; 0x28
   d7418:	f7ff fd8a 	bl	d6f30 <_ZN22LocalTimePosixTimezoneC1ERKS_>
    LocalTimeConvert &withConfig(LocalTimePosixTimezone config) { this->config = config; return *this; };
   d741c:	a90a      	add	r1, sp, #40	; 0x28
   d741e:	a821      	add	r0, sp, #132	; 0x84
   d7420:	f7ff fa4a 	bl	d68b8 <_ZN22LocalTimePosixTimezoneaSERKS_>
   d7424:	a820      	add	r0, sp, #128	; 0x80
    LocalTimeConvert &withTime(time_t time) { this->time = time; return *this; };
   d7426:	e9cd 8938 	strd	r8, r9, [sp, #224]	; 0xe0
   d742a:	f7ff ff53 	bl	d72d4 <_ZN16LocalTimeConvert7convertEv>
   d742e:	a80a      	add	r0, sp, #40	; 0x28
   d7430:	f7ff f9a6 	bl	d6780 <_ZN22LocalTimePosixTimezoneD1Ev>
        if (convert.isDST()) {
   d7434:	9820      	ldr	r0, [sp, #128]	; 0x80
   d7436:	f7ff f9d1 	bl	d67dc <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d743a:	b138      	cbz	r0, d744c <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x7a>
            dstTime += config.dstHMS.toSeconds();
   d743c:	f106 0014 	add.w	r0, r6, #20
   d7440:	f7ff fb6a 	bl	d6b18 <_ZNK12LocalTimeHMS9toSecondsEv>
   d7444:	eb14 0800 	adds.w	r8, r4, r0
   d7448:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
class LocalTimeConvert {
   d744c:	a821      	add	r0, sp, #132	; 0x84
   d744e:	f7ff f997 	bl	d6780 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d7452:	4640      	mov	r0, r8
   d7454:	4649      	mov	r1, r9
   d7456:	b05c      	add	sp, #368	; 0x170
   d7458:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

000d745c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>:
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d745c:	b530      	push	{r4, r5, lr}
    if (!hms.ignore) {
   d745e:	f991 3007 	ldrsb.w	r3, [r1, #7]
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d7462:	b097      	sub	sp, #92	; 0x5c
   d7464:	4604      	mov	r4, r0
    if (!hms.ignore) {
   d7466:	b9c3      	cbnz	r3, d749a <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS+0x3e>
        localTimeValue.setHMS(hms);
   d7468:	f100 0568 	add.w	r5, r0, #104	; 0x68
   d746c:	4668      	mov	r0, sp
   d746e:	f7ff f9f7 	bl	d6860 <_ZN12LocalTimeHMSC1ERKS_>
   d7472:	4669      	mov	r1, sp
   d7474:	4628      	mov	r0, r5
   d7476:	f7ff fd43 	bl	d6f00 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>
        time = localTimeValue.toUTC(config);
   d747a:	1d21      	adds	r1, r4, #4
   d747c:	4668      	mov	r0, sp
   d747e:	f7ff fd57 	bl	d6f30 <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d7482:	4669      	mov	r1, sp
   d7484:	4628      	mov	r0, r5
   d7486:	f7ff ffa4 	bl	d73d2 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>
   d748a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   d748e:	4668      	mov	r0, sp
   d7490:	f7ff f976 	bl	d6780 <_ZN22LocalTimePosixTimezoneD1Ev>
        convert();
   d7494:	4620      	mov	r0, r4
   d7496:	f7ff ff1d 	bl	d72d4 <_ZN16LocalTimeConvert7convertEv>
}
   d749a:	b017      	add	sp, #92	; 0x5c
   d749c:	bd30      	pop	{r4, r5, pc}
	...

000d74a0 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>:
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d74a0:	b530      	push	{r4, r5, lr}
    time += 86400;
   d74a2:	e9d0 3218 	ldrd	r3, r2, [r0, #96]	; 0x60
   d74a6:	4d0b      	ldr	r5, [pc, #44]	; (d74d4 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS+0x34>)
   d74a8:	195b      	adds	r3, r3, r5
   d74aa:	f04f 0500 	mov.w	r5, #0
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d74ae:	b085      	sub	sp, #20
    time += 86400;
   d74b0:	eb45 0202 	adc.w	r2, r5, r2
   d74b4:	e9c0 3218 	strd	r3, r2, [r0, #96]	; 0x60
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d74b8:	4604      	mov	r4, r0
   d74ba:	9101      	str	r1, [sp, #4]
    convert();
   d74bc:	f7ff ff0a 	bl	d72d4 <_ZN16LocalTimeConvert7convertEv>
    atLocalTime(hms);
   d74c0:	9901      	ldr	r1, [sp, #4]
   d74c2:	a802      	add	r0, sp, #8
   d74c4:	f7ff f9cc 	bl	d6860 <_ZN12LocalTimeHMSC1ERKS_>
   d74c8:	a902      	add	r1, sp, #8
   d74ca:	4620      	mov	r0, r4
   d74cc:	f7ff ffc6 	bl	d745c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
}
   d74d0:	b005      	add	sp, #20
   d74d2:	bd30      	pop	{r4, r5, pc}
   d74d4:	00015180 	.word	0x00015180

000d74d8 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>:

// [static]
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d74d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d74dc:	b08a      	sub	sp, #40	; 0x28
   d74de:	4617      	mov	r7, r2
   d74e0:	4606      	mov	r6, r0
   d74e2:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d74e4:	2224      	movs	r2, #36	; 0x24
   d74e6:	2100      	movs	r1, #0
   d74e8:	a801      	add	r0, sp, #4
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d74ea:	461c      	mov	r4, r3
    struct tm timeInfo = {0};
   d74ec:	f007 fa38 	bl	de960 <memset>

    if (dayOfWeek < 0 || dayOfWeek >= 7) {
   d74f0:	2f06      	cmp	r7, #6
   d74f2:	d829      	bhi.n	d7548 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        // Invalid values of dayOfWeek can cause infinite loop below
        return 0;
    }

    int lastDay = lastDayOfMonth(year, month);
   d74f4:	4629      	mov	r1, r5
   d74f6:	4630      	mov	r0, r6
   d74f8:	f7ff fe8e 	bl	d7218 <_ZN9LocalTime14lastDayOfMonthEii>

    if (ordinal > 0) {
   d74fc:	2c00      	cmp	r4, #0
    int lastDay = lastDayOfMonth(year, month);
   d74fe:	4680      	mov	r8, r0
    if (ordinal > 0) {
   d7500:	dd24      	ble.n	d754c <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x74>
        timeInfo.tm_year = year - 1900;
   d7502:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
        timeInfo.tm_mon = month - 1;
   d7506:	3d01      	subs	r5, #1
        timeInfo.tm_year = year - 1900;
   d7508:	9606      	str	r6, [sp, #24]
        timeInfo.tm_mon = month - 1;
   d750a:	9505      	str	r5, [sp, #20]
        timeInfo.tm_mday = 1;
   d750c:	2301      	movs	r3, #1
        tmToTime(&timeInfo);
   d750e:	a801      	add	r0, sp, #4
        timeInfo.tm_mday = 1;
   d7510:	9304      	str	r3, [sp, #16]
        tmToTime(&timeInfo);
   d7512:	f7ff fe7f 	bl	d7214 <_ZN9LocalTime8tmToTimeEP2tm>

        while(timeInfo.tm_wday != dayOfWeek) {
   d7516:	9a07      	ldr	r2, [sp, #28]
   d7518:	9b04      	ldr	r3, [sp, #16]
   d751a:	42ba      	cmp	r2, r7
   d751c:	d001      	beq.n	d7522 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4a>
            timeInfo.tm_mday++;
   d751e:	3301      	adds	r3, #1
   d7520:	e7f5      	b.n	d750e <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x36>
   d7522:	2100      	movs	r1, #0
            tmToTime(&timeInfo);
        }

        for(int loops = 1; loops <= 5; loops++) {
   d7524:	2201      	movs	r2, #1
            if (loops >= ordinal) {
   d7526:	4294      	cmp	r4, r2
   d7528:	d106      	bne.n	d7538 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x60>
   d752a:	b101      	cbz	r1, d752e <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d752c:	9304      	str	r3, [sp, #16]
            timeInfo.tm_mday--;
            tmToTime(&timeInfo);
        }
        for(int loops = 1; loops <= 5; loops++) {
            if (loops >= -ordinal) {
                return timeInfo.tm_mday;
   d752e:	9c04      	ldr	r4, [sp, #16]
        }
    }

    
    return 0;
}
   d7530:	4620      	mov	r0, r4
   d7532:	b00a      	add	sp, #40	; 0x28
   d7534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            timeInfo.tm_mday += 7;
   d7538:	3307      	adds	r3, #7
            if (timeInfo.tm_mday > lastDay) {
   d753a:	4543      	cmp	r3, r8
   d753c:	dc04      	bgt.n	d7548 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d753e:	3201      	adds	r2, #1
   d7540:	2a06      	cmp	r2, #6
   d7542:	f04f 0101 	mov.w	r1, #1
   d7546:	d1ee      	bne.n	d7526 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4e>
                return 0;
   d7548:	2400      	movs	r4, #0
   d754a:	e7f1      	b.n	d7530 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
    if (ordinal < 0) {
   d754c:	d0f0      	beq.n	d7530 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
        timeInfo.tm_mon = month - 1;
   d754e:	3d01      	subs	r5, #1
        timeInfo.tm_mday = lastDay;
   d7550:	e9cd 0504 	strd	r0, r5, [sp, #16]
        timeInfo.tm_year = year - 1900;
   d7554:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   d7558:	9606      	str	r6, [sp, #24]
        tmToTime(&timeInfo);
   d755a:	a801      	add	r0, sp, #4
   d755c:	f7ff fe5a 	bl	d7214 <_ZN9LocalTime8tmToTimeEP2tm>
        while(timeInfo.tm_wday != dayOfWeek) {
   d7560:	9b07      	ldr	r3, [sp, #28]
   d7562:	9904      	ldr	r1, [sp, #16]
   d7564:	42bb      	cmp	r3, r7
   d7566:	d002      	beq.n	d756e <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x96>
            timeInfo.tm_mday--;
   d7568:	3901      	subs	r1, #1
   d756a:	9104      	str	r1, [sp, #16]
            tmToTime(&timeInfo);
   d756c:	e7f5      	b.n	d755a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x82>
   d756e:	2000      	movs	r0, #0
        for(int loops = 1; loops <= 5; loops++) {
   d7570:	2201      	movs	r2, #1
            if (loops >= -ordinal) {
   d7572:	4264      	negs	r4, r4
   d7574:	4294      	cmp	r4, r2
   d7576:	dc03      	bgt.n	d7580 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0xa8>
   d7578:	2800      	cmp	r0, #0
   d757a:	d0d8      	beq.n	d752e <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d757c:	9104      	str	r1, [sp, #16]
   d757e:	e7d6      	b.n	d752e <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
            timeInfo.tm_mday -= 7;
   d7580:	3907      	subs	r1, #7
            if (timeInfo.tm_mday < 1) {
   d7582:	2900      	cmp	r1, #0
   d7584:	dde0      	ble.n	d7548 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d7586:	3201      	adds	r2, #1
   d7588:	2a06      	cmp	r2, #6
   d758a:	f04f 0001 	mov.w	r0, #1
   d758e:	d1f1      	bne.n	d7574 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x9c>
   d7590:	e7da      	b.n	d7548 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
	...

000d7594 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d7594:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
   d7598:	b0cd      	sub	sp, #308	; 0x134
   d759a:	4604      	mov	r4, r0
    LocalTimeConvert tempConv(conv);
   d759c:	a810      	add	r0, sp, #64	; 0x40
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d759e:	460d      	mov	r5, r1
    LocalTimeConvert tempConv(conv);
   d75a0:	f7ff fcfe 	bl	d6fa0 <_ZN16LocalTimeConvertC1ERKS_>
        ymd.year = ymd.month = ymd.day = 0;
   d75a4:	2300      	movs	r3, #0
        return LocalTimeRestrictedDate::getExpirationDate();
   d75a6:	4620      	mov	r0, r4
        ymd.year = ymd.month = ymd.day = 0;
   d75a8:	9302      	str	r3, [sp, #8]
        return LocalTimeRestrictedDate::getExpirationDate();
   d75aa:	f7ff fb35 	bl	d6c18 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>
    if (expirationDate.isEmpty()) {
   d75ae:	bb58      	cbnz	r0, d7608 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x74>
    *this = value.ymd();
   d75b0:	a82a      	add	r0, sp, #168	; 0xa8
   d75b2:	f7ff fcb2 	bl	d6f1a <_ZNK14LocalTimeValue3ymdEv>
        endYMD = tempConv.getLocalTimeYMD();
   d75b6:	9002      	str	r0, [sp, #8]
        endYMD.addDay(LocalTime::instance().getScheduleLookaheadDays());
   d75b8:	f7ff fe14 	bl	d71e4 <_ZN9LocalTime8instanceEv>
   d75bc:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
   d75be:	a802      	add	r0, sp, #8
   d75c0:	f7ff f9f7 	bl	d69b2 <_ZN12LocalTimeYMD6addDayEi>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d75c4:	f8df a20c 	ldr.w	sl, [pc, #524]	; d77d4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x240>
    *this = value.ymd();
   d75c8:	a82a      	add	r0, sp, #168	; 0xa8
   d75ca:	f7ff fca6 	bl	d6f1a <_ZNK14LocalTimeValue3ymdEv>
        return compareTo(other) > 0; 
   d75ce:	9902      	ldr	r1, [sp, #8]
        LocalTimeYMD curYMD = tempConv.getLocalTimeYMD();
   d75d0:	9003      	str	r0, [sp, #12]
    *this = value.ymd();
   d75d2:	4606      	mov	r6, r0
   d75d4:	a803      	add	r0, sp, #12
   d75d6:	f7ff fa11 	bl	d69fc <_ZNK12LocalTimeYMD9compareToES_>
        if (curYMD > endYMD) {
   d75da:	2800      	cmp	r0, #0
   d75dc:	f300 80f2 	bgt.w	d77c4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x230>
        return LocalTimeRestrictedDate::isValid(ymd);
   d75e0:	4631      	mov	r1, r6
   d75e2:	4620      	mov	r0, r4
   d75e4:	f7ff fafd 	bl	d6be2 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
        if (!timeRange.isValidDate(curYMD)) {
   d75e8:	4607      	mov	r7, r0
   d75ea:	2800      	cmp	r0, #0
   d75ec:	f000 8094 	beq.w	d7718 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
        switch(scheduleItemType) {
   d75f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d75f2:	3b01      	subs	r3, #1
   d75f4:	2b04      	cmp	r3, #4
   d75f6:	f200 808f 	bhi.w	d7718 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d75fa:	e8df f013 	tbh	[pc, r3, lsl #1]
   d75fe:	0007      	.short	0x0007
   d7600:	00960007 	.word	0x00960007
   d7604:	00d500b8 	.word	0x00d500b8
        endYMD = expirationDate;
   d7608:	9002      	str	r0, [sp, #8]
   d760a:	e7db      	b.n	d75c4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x30>
                int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d760c:	a92a      	add	r1, sp, #168	; 0xa8
   d760e:	a807      	add	r0, sp, #28
   d7610:	f7ff fc58 	bl	d6ec4 <_ZNK14LocalTimeValue3hmsEv>
   d7614:	a907      	add	r1, sp, #28
   d7616:	4620      	mov	r0, r4
   d7618:	f7ff f937 	bl	d688a <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                if (cmp < 0) {
   d761c:	2800      	cmp	r0, #0
   d761e:	da0d      	bge.n	d763c <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xa8>
                    tempConv.atLocalTime(timeRange.hmsStart);
   d7620:	f104 011c 	add.w	r1, r4, #28
   d7624:	a807      	add	r0, sp, #28
   d7626:	f7ff f91b 	bl	d6860 <_ZN12LocalTimeHMSC1ERKS_>
   d762a:	a907      	add	r1, sp, #28
   d762c:	a810      	add	r0, sp, #64	; 0x40
   d762e:	f7ff ff15 	bl	d745c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                        conv.time = tempConv.time;
   d7632:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d7636:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
   d763a:	e094      	b.n	d7766 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1d2>
                if (cmp == 0) {
   d763c:	d16c      	bne.n	d7718 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    switch(scheduleItemType) {
   d763e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d7640:	2b01      	cmp	r3, #1
   d7642:	d025      	beq.n	d7690 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xfc>
   d7644:	2b02      	cmp	r3, #2
   d7646:	d167      	bne.n	d7718 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d7648:	f104 011c 	add.w	r1, r4, #28
   d764c:	a804      	add	r0, sp, #16
   d764e:	f7ff f907 	bl	d6860 <_ZN12LocalTimeHMSC1ERKS_>
   d7652:	f104 0924 	add.w	r9, r4, #36	; 0x24
        return compareTo(other) <= 0;
   d7656:	4649      	mov	r1, r9
   d7658:	a804      	add	r0, sp, #16
   d765a:	f7ff f8e3 	bl	d6824 <_ZNK12LocalTimeHMS9compareToERKS_>
   d765e:	2800      	cmp	r0, #0
   d7660:	dc5a      	bgt.n	d7718 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                            tempConv.atLocalTime(tempHMS);
   d7662:	a904      	add	r1, sp, #16
   d7664:	a807      	add	r0, sp, #28
   d7666:	f7ff f8fb 	bl	d6860 <_ZN12LocalTimeHMSC1ERKS_>
   d766a:	a907      	add	r1, sp, #28
   d766c:	a810      	add	r0, sp, #64	; 0x40
   d766e:	f7ff fef5 	bl	d745c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                            if (tempConv.time > conv.time) {
   d7672:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	; 0x60
   d7676:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d767a:	4290      	cmp	r0, r2
   d767c:	eb71 0303 	sbcs.w	r3, r1, r3
   d7680:	db41      	blt.n	d7706 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x172>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d7682:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d7686:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d7688:	4413      	add	r3, r2
   d768a:	f88d 3014 	strb.w	r3, [sp, #20]
   d768e:	e7e2      	b.n	d7656 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xc2>
                        startingModulo = timeRange.hmsStart.minute % increment;
   d7690:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d7692:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   d7696:	fb93 f6f2 	sdiv	r6, r3, r2
                        tempConv.time += increment * 60;
   d769a:	213c      	movs	r1, #60	; 0x3c
   d769c:	4351      	muls	r1, r2
                        startingModulo = timeRange.hmsStart.minute % increment;
   d769e:	fb02 3616 	mls	r6, r2, r6, r3
                        tempConv.time += increment * 60;
   d76a2:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d76a6:	1852      	adds	r2, r2, r1
   d76a8:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
                        tempConv.convert();
   d76ac:	a810      	add	r0, sp, #64	; 0x40
                        tempConv.time += increment * 60;
   d76ae:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
                        tempConv.convert();
   d76b2:	f7ff fe0f 	bl	d72d4 <_ZN16LocalTimeConvert7convertEv>
                        LocalTime::timeToTm(tempConv.time, &timeInfo);
   d76b6:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
    localtime_r(&time, pTimeInfo);
   d76ba:	a907      	add	r1, sp, #28
   d76bc:	a804      	add	r0, sp, #16
   d76be:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d76c2:	f003 fb9d 	bl	dae00 <localtime_r>
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d76c6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   d76c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d76ca:	1b9b      	subs	r3, r3, r6
   d76cc:	fb93 f2f1 	sdiv	r2, r3, r1
   d76d0:	fb01 3312 	mls	r3, r1, r2, r3
   d76d4:	9a08      	ldr	r2, [sp, #32]
    return mktime(pTimeInfo);
   d76d6:	a807      	add	r0, sp, #28
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d76d8:	1ad2      	subs	r2, r2, r3
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d76da:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d76de:	9208      	str	r2, [sp, #32]
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d76e0:	9307      	str	r3, [sp, #28]
    return mktime(pTimeInfo);
   d76e2:	f003 fb9d 	bl	dae20 <mktime>
                        tempConv.time = LocalTime::tmToTime(&timeInfo);
   d76e6:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
                        tempConv.convert();
   d76ea:	a810      	add	r0, sp, #64	; 0x40
   d76ec:	f7ff fdf2 	bl	d72d4 <_ZN16LocalTimeConvert7convertEv>
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   d76f0:	a92a      	add	r1, sp, #168	; 0xa8
   d76f2:	a804      	add	r0, sp, #16
   d76f4:	f7ff fbf2 	bl	d6edc <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
        return compareTo(other) < 0;
   d76f8:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d76fc:	a804      	add	r0, sp, #16
   d76fe:	f7ff f891 	bl	d6824 <_ZNK12LocalTimeHMS9compareToERKS_>
                        if (tempConv.getLocalTimeHMS() < timeRange.hmsEnd) {
   d7702:	2800      	cmp	r0, #0
   d7704:	da08      	bge.n	d7718 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
    *this = value.ymd();
   d7706:	a82a      	add	r0, sp, #168	; 0xa8
   d7708:	f7ff fc07 	bl	d6f1a <_ZNK14LocalTimeValue3ymdEv>
   d770c:	4601      	mov	r1, r0
        return LocalTimeRestrictedDate::isValid(ymd);
   d770e:	4620      	mov	r0, r4
   d7710:	f7ff fa67 	bl	d6be2 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
                        if (!timeRange.isValidDate(tempConv.getLocalTimeYMD())) {
   d7714:	2800      	cmp	r0, #0
   d7716:	d18c      	bne.n	d7632 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x9e>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d7718:	4651      	mov	r1, sl
   d771a:	a807      	add	r0, sp, #28
   d771c:	f7ff f9ca 	bl	d6ab4 <_ZN12LocalTimeHMSC1EPKc>
   d7720:	a907      	add	r1, sp, #28
   d7722:	a810      	add	r0, sp, #64	; 0x40
   d7724:	f7ff febc 	bl	d74a0 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>
    }
   d7728:	e74e      	b.n	d75c8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x34>
                int day = LocalTime::dayOfWeekOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month(), dayOfWeek, increment);
   d772a:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d772c:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d772e:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
   d7732:	3101      	adds	r1, #1
   d7734:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d7738:	f7ff fece 	bl	d74d8 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>
                if (day == tempConv.localTimeValue.day()) {
   d773c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   d773e:	4298      	cmp	r0, r3
   d7740:	d1ea      	bne.n	d7718 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        tempConv.atLocalTime(timeRange.hmsStart);
   d7742:	f104 011c 	add.w	r1, r4, #28
                tempConv.atLocalTime(timeRange.hmsStart);
   d7746:	a807      	add	r0, sp, #28
   d7748:	f7ff f88a 	bl	d6860 <_ZN12LocalTimeHMSC1ERKS_>
   d774c:	a907      	add	r1, sp, #28
   d774e:	a810      	add	r0, sp, #64	; 0x40
   d7750:	f7ff fe84 	bl	d745c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                if (tempConv.time > conv.time) {
   d7754:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
   d7758:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d775c:	4282      	cmp	r2, r0
   d775e:	418b      	sbcs	r3, r1
   d7760:	dada      	bge.n	d7718 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    conv.time = tempConv.time;
   d7762:	e9c5 0118 	strd	r0, r1, [r5, #96]	; 0x60
                        conv.convert();
   d7766:	4628      	mov	r0, r5
   d7768:	f7ff fdb4 	bl	d72d4 <_ZN16LocalTimeConvert7convertEv>
                        return true;
   d776c:	e02b      	b.n	d77c6 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x232>
                int tempIncrement = increment;
   d776e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                if (tempIncrement < 0) {
   d7770:	2e00      	cmp	r6, #0
   d7772:	da08      	bge.n	d7786 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1f2>
                    tempIncrement = LocalTime::lastDayOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month()) + tempIncrement + 1;
   d7774:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d7776:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d7778:	3101      	adds	r1, #1
   d777a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d777e:	f7ff fd4b 	bl	d7218 <_ZN9LocalTime14lastDayOfMonthEii>
   d7782:	4430      	add	r0, r6
   d7784:	1c46      	adds	r6, r0, #1
                if (tempConv.localTimeValue.ymd().getDay() == tempIncrement) {
   d7786:	a82a      	add	r0, sp, #168	; 0xa8
   d7788:	f7ff fbc7 	bl	d6f1a <_ZNK14LocalTimeValue3ymdEv>
   d778c:	ebb6 6fd0 	cmp.w	r6, r0, lsr #27
   d7790:	d1c2      	bne.n	d7718 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d7792:	a92a      	add	r1, sp, #168	; 0xa8
   d7794:	a807      	add	r0, sp, #28
   d7796:	f7ff fb95 	bl	d6ec4 <_ZNK14LocalTimeValue3hmsEv>
   d779a:	a907      	add	r1, sp, #28
   d779c:	4620      	mov	r0, r4
   d779e:	f7ff f874 	bl	d688a <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                    if (cmp <= 0) {
   d77a2:	2800      	cmp	r0, #0
   d77a4:	dcb8      	bgt.n	d7718 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d77a6:	e7cc      	b.n	d7742 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1ae>
            if (tempConv.localTimeValue.hms() <= timeRange.hmsStart) {
   d77a8:	a92a      	add	r1, sp, #168	; 0xa8
   d77aa:	a807      	add	r0, sp, #28
   d77ac:	f7ff fb8a 	bl	d6ec4 <_ZNK14LocalTimeValue3hmsEv>
   d77b0:	f104 011c 	add.w	r1, r4, #28
        return compareTo(other) <= 0;
   d77b4:	a807      	add	r0, sp, #28
   d77b6:	9101      	str	r1, [sp, #4]
   d77b8:	f7ff f834 	bl	d6824 <_ZNK12LocalTimeHMS9compareToERKS_>
   d77bc:	2800      	cmp	r0, #0
   d77be:	9901      	ldr	r1, [sp, #4]
   d77c0:	dcaa      	bgt.n	d7718 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d77c2:	e7c0      	b.n	d7746 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1b2>
    return false;
   d77c4:	2700      	movs	r7, #0
class LocalTimeConvert {
   d77c6:	a811      	add	r0, sp, #68	; 0x44
   d77c8:	f7fe ffda 	bl	d6780 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d77cc:	4638      	mov	r0, r7
   d77ce:	b04d      	add	sp, #308	; 0x134
   d77d0:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
   d77d4:	000df931 	.word	0x000df931

000d77d8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d77d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d77da:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d77dc:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d77de:	4668      	mov	r0, sp
   d77e0:	f7ff f817 	bl	d6812 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   d77e4:	466a      	mov	r2, sp
   d77e6:	4629      	mov	r1, r5
   d77e8:	4620      	mov	r0, r4
   d77ea:	f004 fab3 	bl	dbd54 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d77ee:	a801      	add	r0, sp, #4
   d77f0:	f7fd fb21 	bl	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d77f4:	4620      	mov	r0, r4
   d77f6:	b003      	add	sp, #12
   d77f8:	bd30      	pop	{r4, r5, pc}

000d77fa <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d77fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d77fc:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d77fe:	4604      	mov	r4, r0
   d7800:	4668      	mov	r0, sp
   d7802:	f7ff f806 	bl	d6812 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   d7806:	466a      	mov	r2, sp
   d7808:	4629      	mov	r1, r5
   d780a:	4620      	mov	r0, r4
   d780c:	f004 fa7e 	bl	dbd0c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d7810:	a801      	add	r0, sp, #4
   d7812:	f7fd fb10 	bl	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7816:	4620      	mov	r0, r4
   d7818:	b003      	add	sp, #12
   d781a:	bd30      	pop	{r4, r5, pc}

000d781c <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d781c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d781e:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7820:	4604      	mov	r4, r0
   d7822:	4668      	mov	r0, sp
   d7824:	f7fe fff5 	bl	d6812 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   d7828:	466a      	mov	r2, sp
   d782a:	4629      	mov	r1, r5
   d782c:	4620      	mov	r0, r4
   d782e:	f004 fa16 	bl	dbc5e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d7832:	a801      	add	r0, sp, #4
   d7834:	f7fd faff 	bl	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7838:	4620      	mov	r0, r4
   d783a:	b003      	add	sp, #12
   d783c:	bd30      	pop	{r4, r5, pc}

000d783e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>:
       *  (i.e. capacity() == size() in the new %vector).
       *
       *  The newly-created %vector uses a copy of the allocator object used
       *  by @a __x (unless the allocator traits dictate a different object).
       */
      vector(const vector& __x)
   d783e:	b570      	push	{r4, r5, r6, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7840:	e9d1 3600 	ldrd	r3, r6, [r1]
   d7844:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   d7846:	2300      	movs	r3, #0
   d7848:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   d784c:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   d784e:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   d7850:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   d7852:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   d7854:	f7fe ffd0 	bl	d67f8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d7858:	e9d5 5300 	ldrd	r5, r3, [r5]
	this->_M_impl._M_finish = this->_M_impl._M_start;
   d785c:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   d7860:	4406      	add	r6, r0
   d7862:	60a6      	str	r6, [r4, #8]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   d7864:	462a      	mov	r2, r5
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
   d7866:	4601      	mov	r1, r0
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   d7868:	4293      	cmp	r3, r2
   d786a:	d005      	beq.n	d7878 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x3a>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d786c:	b109      	cbz	r1, d7872 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x34>
   d786e:	6816      	ldr	r6, [r2, #0]
   d7870:	600e      	str	r6, [r1, #0]
   d7872:	3104      	adds	r1, #4
   d7874:	3204      	adds	r2, #4
   d7876:	e7f7      	b.n	d7868 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x2a>
	this->_M_impl._M_finish =
   d7878:	1b5b      	subs	r3, r3, r5
   d787a:	4418      	add	r0, r3
   d787c:	6060      	str	r0, [r4, #4]
      }
   d787e:	4620      	mov	r0, r4
   d7880:	bd70      	pop	{r4, r5, r6, pc}

000d7882 <_ZN23LocalTimeRestrictedDateC1ERKS_>:
class LocalTimeRestrictedDate {
   d7882:	b538      	push	{r3, r4, r5, lr}
   d7884:	460d      	mov	r5, r1
   d7886:	f811 3b04 	ldrb.w	r3, [r1], #4
   d788a:	4604      	mov	r4, r0
   d788c:	f800 3b04 	strb.w	r3, [r0], #4
   d7890:	f7ff ffd5 	bl	d783e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d7894:	f105 0110 	add.w	r1, r5, #16
   d7898:	f104 0010 	add.w	r0, r4, #16
   d789c:	f7ff ffcf 	bl	d783e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d78a0:	4620      	mov	r0, r4
   d78a2:	bd38      	pop	{r3, r4, r5, pc}

000d78a4 <_ZN21LocalTimeScheduleItemC1ERKS_>:
class LocalTimeScheduleItem {
   d78a4:	b538      	push	{r3, r4, r5, lr}
   d78a6:	4604      	mov	r4, r0
   d78a8:	460d      	mov	r5, r1
class LocalTimeRange : public LocalTimeRestrictedDate {
   d78aa:	f7ff ffea 	bl	d7882 <_ZN23LocalTimeRestrictedDateC1ERKS_>
   d78ae:	f105 011c 	add.w	r1, r5, #28
   d78b2:	f104 001c 	add.w	r0, r4, #28
   d78b6:	f7fe ffd3 	bl	d6860 <_ZN12LocalTimeHMSC1ERKS_>
   d78ba:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d78be:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d78c2:	f7fe ffcd 	bl	d6860 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeScheduleItem {
   d78c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   d78c8:	62e3      	str	r3, [r4, #44]	; 0x2c
   d78ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d78cc:	6323      	str	r3, [r4, #48]	; 0x30
   d78ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   d78d0:	6363      	str	r3, [r4, #52]	; 0x34
   d78d2:	f105 0138 	add.w	r1, r5, #56	; 0x38
   d78d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d78da:	f005 fdf9 	bl	dd4d0 <_ZN6StringC1ERKS_>
   d78de:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d78e0:	64a3      	str	r3, [r4, #72]	; 0x48
   d78e2:	4620      	mov	r0, r4
   d78e4:	bd38      	pop	{r3, r4, r5, pc}

000d78e6 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv, std::function<bool(LocalTimeScheduleItem &item)> filter) const {
   d78e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d78ea:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d78ee:	b0d1      	sub	sp, #324	; 0x144
   d78f0:	4681      	mov	r9, r0
   d78f2:	460c      	mov	r4, r1
   d78f4:	4615      	mov	r5, r2
    time_t closestTime = 0;
   d78f6:	2600      	movs	r6, #0
   d78f8:	2700      	movs	r7, #0
    for(auto it = scheduleItems.begin(); it != scheduleItems.end(); ++it) {
   d78fa:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   d78fe:	4543      	cmp	r3, r8
   d7900:	d029      	beq.n	d7956 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x70>
        LocalTimeScheduleItem item = *it;
   d7902:	4641      	mov	r1, r8
   d7904:	a801      	add	r0, sp, #4
   d7906:	f7ff ffcd 	bl	d78a4 <_ZN21LocalTimeScheduleItemC1ERKS_>
      if (_M_empty())
   d790a:	68ab      	ldr	r3, [r5, #8]
   d790c:	b90b      	cbnz	r3, d7912 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x2c>
	__throw_bad_function_call();
   d790e:	f006 fb7f 	bl	de010 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7912:	68eb      	ldr	r3, [r5, #12]
   d7914:	a901      	add	r1, sp, #4
   d7916:	4628      	mov	r0, r5
   d7918:	4798      	blx	r3
        if (filter(item)) {
   d791a:	b1b0      	cbz	r0, d794a <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x64>
            LocalTimeConvert tmpConvert(conv);
   d791c:	4621      	mov	r1, r4
   d791e:	a814      	add	r0, sp, #80	; 0x50
   d7920:	f7ff fb3e 	bl	d6fa0 <_ZN16LocalTimeConvertC1ERKS_>
            bool bResult = item.getNextScheduledTime(tmpConvert);
   d7924:	a914      	add	r1, sp, #80	; 0x50
   d7926:	a801      	add	r0, sp, #4
   d7928:	f7ff fe34 	bl	d7594 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>
            if (bResult && closestTime == 0 || tmpConvert.time < closestTime) {
   d792c:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
   d7930:	b110      	cbz	r0, d7938 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x52>
   d7932:	ea56 0107 	orrs.w	r1, r6, r7
   d7936:	d003      	beq.n	d7940 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5a>
   d7938:	42b2      	cmp	r2, r6
   d793a:	eb73 0107 	sbcs.w	r1, r3, r7
   d793e:	da01      	bge.n	d7944 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5e>
                closestTime = tmpConvert.time;
   d7940:	4616      	mov	r6, r2
   d7942:	461f      	mov	r7, r3
class LocalTimeConvert {
   d7944:	a815      	add	r0, sp, #84	; 0x54
   d7946:	f7fe ff1b 	bl	d6780 <_ZN22LocalTimePosixTimezoneD1Ev>
        LocalTimeScheduleItem item = *it;
   d794a:	a801      	add	r0, sp, #4
   d794c:	f7ff fb5c 	bl	d7008 <_ZN21LocalTimeScheduleItemD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   d7950:	f108 084c 	add.w	r8, r8, #76	; 0x4c
	return *this;
   d7954:	e7d1      	b.n	d78fa <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x14>
    if (closestTime != 0) {
   d7956:	ea56 0307 	orrs.w	r3, r6, r7
   d795a:	d008      	beq.n	d796e <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x88>
        conv.convert();
   d795c:	4620      	mov	r0, r4
        conv.time = closestTime;
   d795e:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
        conv.convert();
   d7962:	f7ff fcb7 	bl	d72d4 <_ZN16LocalTimeConvert7convertEv>
        return true;
   d7966:	2001      	movs	r0, #1
}
   d7968:	b051      	add	sp, #324	; 0x144
   d796a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
   d796e:	2000      	movs	r0, #0
   d7970:	e7fa      	b.n	d7968 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x82>
	...

000d7974 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv) const {
   d7974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	    _M_invoker = &_My_handler::_M_invoke;
   d7976:	4b08      	ldr	r3, [pc, #32]	; (d7998 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x24>)
   d7978:	9303      	str	r3, [sp, #12]
    return getNextScheduledTime(conv, [](LocalTimeScheduleItem &item) {
   d797a:	466a      	mov	r2, sp
	    _M_manager = &_My_handler::_M_manager;
   d797c:	4b07      	ldr	r3, [pc, #28]	; (d799c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x28>)
   d797e:	9302      	str	r3, [sp, #8]
   d7980:	f7ff ffb1 	bl	d78e6 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>
      if (_M_manager)
   d7984:	9b02      	ldr	r3, [sp, #8]
   d7986:	4604      	mov	r4, r0
   d7988:	b11b      	cbz	r3, d7992 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x1e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d798a:	4669      	mov	r1, sp
   d798c:	2203      	movs	r2, #3
   d798e:	4608      	mov	r0, r1
   d7990:	4798      	blx	r3
}
   d7992:	4620      	mov	r0, r4
   d7994:	b004      	add	sp, #16
   d7996:	bd10      	pop	{r4, pc}
   d7998:	000d6757 	.word	0x000d6757
   d799c:	000d675b 	.word	0x000d675b

000d79a0 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx>:
bool LocalTimeSchedule::isScheduledTime(LocalTimeConvert &conv, time_t timeNow) {
   d79a0:	b570      	push	{r4, r5, r6, lr}
   d79a2:	4604      	mov	r4, r0
   d79a4:	460d      	mov	r5, r1
   d79a6:	4610      	mov	r0, r2
   d79a8:	4619      	mov	r1, r3
    if (nextTime != 0 && nextTime <= timeNow) {
   d79aa:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d79ae:	ea52 0603 	orrs.w	r6, r2, r3
   d79b2:	d013      	beq.n	d79dc <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x3c>
   d79b4:	4290      	cmp	r0, r2
   d79b6:	eb71 0303 	sbcs.w	r3, r1, r3
   d79ba:	db0f      	blt.n	d79dc <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x3c>
        nextTime = 0;
   d79bc:	2200      	movs	r2, #0
   d79be:	2300      	movs	r3, #0
   d79c0:	e9c4 2306 	strd	r2, r3, [r4, #24]
        result = true;
   d79c4:	2601      	movs	r6, #1
    if (getNextScheduledTime(conv)) {
   d79c6:	4629      	mov	r1, r5
   d79c8:	4620      	mov	r0, r4
   d79ca:	f7ff ffd3 	bl	d7974 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d79ce:	b118      	cbz	r0, d79d8 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x38>
        nextTime = conv.time;
   d79d0:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d79d4:	e9c4 2306 	strd	r2, r3, [r4, #24]
}
   d79d8:	4630      	mov	r0, r6
   d79da:	bd70      	pop	{r4, r5, r6, pc}
    bool result = false;
   d79dc:	2600      	movs	r6, #0
   d79de:	e7f2      	b.n	d79c6 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x26>

000d79e0 <_ZN17LocalTimeSchedule15isScheduledTimeEv>:
bool LocalTimeSchedule::isScheduledTime() {
   d79e0:	b530      	push	{r4, r5, lr}
   d79e2:	b0bd      	sub	sp, #244	; 0xf4
   d79e4:	4605      	mov	r5, r0
    if (!Time.isValid()) {
   d79e6:	f006 f803 	bl	dd9f0 <_ZN9TimeClass7isValidEv>
   d79ea:	4604      	mov	r4, r0
   d79ec:	b1c0      	cbz	r0, d7a20 <_ZN17LocalTimeSchedule15isScheduledTimeEv+0x40>
   d79ee:	2306      	movs	r3, #6
   d79f0:	a801      	add	r0, sp, #4
   d79f2:	9300      	str	r3, [sp, #0]
   d79f4:	f7ff f988 	bl	d6d08 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d79f8:	f006 f817 	bl	dda2a <_ZN9TimeClass3nowEv>
   d79fc:	17c1      	asrs	r1, r0, #31
   d79fe:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    conv.withCurrentTime().convert();
   d7a02:	4668      	mov	r0, sp
   d7a04:	f7ff fc66 	bl	d72d4 <_ZN16LocalTimeConvert7convertEv>
    return isScheduledTime(conv, Time.now());
   d7a08:	f006 f80f 	bl	dda2a <_ZN9TimeClass3nowEv>
   d7a0c:	4669      	mov	r1, sp
   d7a0e:	4602      	mov	r2, r0
   d7a10:	17c3      	asrs	r3, r0, #31
   d7a12:	4628      	mov	r0, r5
   d7a14:	f7ff ffc4 	bl	d79a0 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx>
   d7a18:	4604      	mov	r4, r0
class LocalTimeConvert {
   d7a1a:	a801      	add	r0, sp, #4
   d7a1c:	f7fe feb0 	bl	d6780 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d7a20:	4620      	mov	r0, r4
   d7a22:	b03d      	add	sp, #244	; 0xf4
   d7a24:	bd30      	pop	{r4, r5, pc}

000d7a26 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   d7a26:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   d7a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7a2c:	4604      	mov	r4, r0
   d7a2e:	460e      	mov	r6, r1
      if (&__x != this)
   d7a30:	d022      	beq.n	d7a78 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x52>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7a32:	e9d1 5800 	ldrd	r5, r8, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   d7a36:	6800      	ldr	r0, [r0, #0]
   d7a38:	68a3      	ldr	r3, [r4, #8]
   d7a3a:	1a1b      	subs	r3, r3, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7a3c:	eba8 0705 	sub.w	r7, r8, r5
			 - this->_M_impl._M_start); }
   d7a40:	109b      	asrs	r3, r3, #2
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   d7a42:	ebb3 0fa7 	cmp.w	r3, r7, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7a46:	ea4f 01a7 	mov.w	r1, r7, asr #2
   d7a4a:	d218      	bcs.n	d7a7e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   d7a4c:	4608      	mov	r0, r1
   d7a4e:	f7fe fed3 	bl	d67f8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d7a52:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   d7a54:	4603      	mov	r3, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d7a56:	45a8      	cmp	r8, r5
   d7a58:	d005      	beq.n	d7a66 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x40>
   d7a5a:	b10b      	cbz	r3, d7a60 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x3a>
   d7a5c:	682a      	ldr	r2, [r5, #0]
   d7a5e:	601a      	str	r2, [r3, #0]
   d7a60:	3304      	adds	r3, #4
   d7a62:	3504      	adds	r5, #4
   d7a64:	e7f7      	b.n	d7a56 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x30>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
   d7a66:	6820      	ldr	r0, [r4, #0]
   d7a68:	f7fe fec2 	bl	d67f0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
   d7a6c:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   d7a6e:	443e      	add	r6, r7
   d7a70:	60a6      	str	r6, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   d7a72:	6823      	ldr	r3, [r4, #0]
   d7a74:	441f      	add	r7, r3
   d7a76:	6067      	str	r7, [r4, #4]
	}
      return *this;
    }
   d7a78:	4620      	mov	r0, r4
   d7a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7a7e:	6862      	ldr	r2, [r4, #4]
   d7a80:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   d7a82:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
   d7a86:	d806      	bhi.n	d7a96 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x70>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d7a88:	45a8      	cmp	r8, r5
   d7a8a:	d0f2      	beq.n	d7a72 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d7a8c:	463a      	mov	r2, r7
   d7a8e:	4629      	mov	r1, r5
   d7a90:	f006 ff4c 	bl	de92c <memmove>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d7a94:	e7ed      	b.n	d7a72 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	  if (_Num)
   d7a96:	b112      	cbz	r2, d7a9e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d7a98:	4629      	mov	r1, r5
   d7a9a:	f006 ff47 	bl	de92c <memmove>
   d7a9e:	e9d4 3200 	ldrd	r3, r2, [r4]
   d7aa2:	1ad1      	subs	r1, r2, r3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   d7aa4:	6833      	ldr	r3, [r6, #0]
   d7aa6:	440b      	add	r3, r1
					  __x._M_impl._M_finish,
   d7aa8:	6871      	ldr	r1, [r6, #4]
   d7aaa:	4299      	cmp	r1, r3
   d7aac:	d0e1      	beq.n	d7a72 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
   d7aae:	b10a      	cbz	r2, d7ab4 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x8e>
   d7ab0:	6818      	ldr	r0, [r3, #0]
   d7ab2:	6010      	str	r0, [r2, #0]
   d7ab4:	3304      	adds	r3, #4
   d7ab6:	3204      	adds	r2, #4
   d7ab8:	e7f7      	b.n	d7aaa <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x84>

000d7aba <_ZN14LocalTimeRangeaSERKS_>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d7aba:	b538      	push	{r3, r4, r5, lr}
   d7abc:	460d      	mov	r5, r1
class LocalTimeRestrictedDate {
   d7abe:	f811 3b04 	ldrb.w	r3, [r1], #4
class LocalTimeRange : public LocalTimeRestrictedDate {
   d7ac2:	4604      	mov	r4, r0
class LocalTimeRestrictedDate {
   d7ac4:	f800 3b04 	strb.w	r3, [r0], #4
   d7ac8:	f7ff ffad 	bl	d7a26 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
   d7acc:	f105 0110 	add.w	r1, r5, #16
   d7ad0:	f104 0010 	add.w	r0, r4, #16
   d7ad4:	f7ff ffa7 	bl	d7a26 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
class LocalTimeRange : public LocalTimeRestrictedDate {
   d7ad8:	f105 011c 	add.w	r1, r5, #28
   d7adc:	f104 001c 	add.w	r0, r4, #28
   d7ae0:	f7fe fec6 	bl	d6870 <_ZN12LocalTimeHMSaSERKS_>
   d7ae4:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d7ae8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7aec:	f7fe fec0 	bl	d6870 <_ZN12LocalTimeHMSaSERKS_>
   d7af0:	4620      	mov	r0, r4
   d7af2:	bd38      	pop	{r3, r4, r5, pc}

000d7af4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d7af4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7af8:	e9d0 6900 	ldrd	r6, r9, [r0]
   d7afc:	4d3b      	ldr	r5, [pc, #236]	; (d7bec <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   d7afe:	4b3c      	ldr	r3, [pc, #240]	; (d7bf0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7b00:	eba9 0406 	sub.w	r4, r9, r6
   d7b04:	10a4      	asrs	r4, r4, #2
   d7b06:	436c      	muls	r4, r5
	if (max_size() - size() < __n)
   d7b08:	429c      	cmp	r4, r3
   d7b0a:	468a      	mov	sl, r1
   d7b0c:	4607      	mov	r7, r0
   d7b0e:	4611      	mov	r1, r2
   d7b10:	46a8      	mov	r8, r5
   d7b12:	d102      	bne.n	d7b1a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d7b14:	4837      	ldr	r0, [pc, #220]	; (d7bf4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x100>)
   d7b16:	f006 fa78 	bl	de00a <_ZSt20__throw_length_errorPKc>
   d7b1a:	2c01      	cmp	r4, #1
   d7b1c:	4622      	mov	r2, r4
   d7b1e:	bf38      	it	cc
   d7b20:	2201      	movcc	r2, #1
   d7b22:	18a4      	adds	r4, r4, r2
   d7b24:	ebaa 0506 	sub.w	r5, sl, r6

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d7b28:	d25d      	bcs.n	d7be6 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d7b2a:	b154      	cbz	r4, d7b42 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4e>
   d7b2c:	429c      	cmp	r4, r3
   d7b2e:	bf28      	it	cs
   d7b30:	461c      	movcs	r4, r3
   d7b32:	204c      	movs	r0, #76	; 0x4c
   d7b34:	4360      	muls	r0, r4
   d7b36:	9100      	str	r1, [sp, #0]
   d7b38:	f7fc faad 	bl	d4096 <_Znwj>
   d7b3c:	9900      	ldr	r1, [sp, #0]
   d7b3e:	4683      	mov	fp, r0
   d7b40:	e000      	b.n	d7b44 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x50>
   d7b42:	46a3      	mov	fp, r4
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7b44:	eb1b 0005 	adds.w	r0, fp, r5
   d7b48:	d001      	beq.n	d7b4e <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
   d7b4a:	f7ff feab 	bl	d78a4 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d7b4e:	465b      	mov	r3, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7b50:	4631      	mov	r1, r6
   d7b52:	458a      	cmp	sl, r1
   d7b54:	d00a      	beq.n	d7b6c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
   d7b56:	b133      	cbz	r3, d7b66 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
   d7b58:	4618      	mov	r0, r3
   d7b5a:	9101      	str	r1, [sp, #4]
   d7b5c:	9300      	str	r3, [sp, #0]
   d7b5e:	f7ff fea1 	bl	d78a4 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d7b62:	e9dd 3100 	ldrd	r3, r1, [sp]
   d7b66:	314c      	adds	r1, #76	; 0x4c
   d7b68:	334c      	adds	r3, #76	; 0x4c
   d7b6a:	e7f2      	b.n	d7b52 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
   d7b6c:	08ad      	lsrs	r5, r5, #2
   d7b6e:	fb08 fa05 	mul.w	sl, r8, r5
   d7b72:	f02a 4540 	bic.w	r5, sl, #3221225472	; 0xc0000000
   d7b76:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
   d7b7a:	fb0a fa05 	mul.w	sl, sl, r5
   d7b7e:	eb06 050a 	add.w	r5, r6, sl
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
		 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   d7b82:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   d7b86:	44da      	add	sl, fp
	  _ForwardIterator __cur = __result;
   d7b88:	4653      	mov	r3, sl
   d7b8a:	4629      	mov	r1, r5
	      for (; __first != __last; ++__first, (void)++__cur)
   d7b8c:	4549      	cmp	r1, r9
   d7b8e:	d113      	bne.n	d7bb8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
   d7b90:	eba9 0505 	sub.w	r5, r9, r5
   d7b94:	08ad      	lsrs	r5, r5, #2
   d7b96:	fb08 f505 	mul.w	r5, r8, r5
   d7b9a:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
   d7b9e:	f04f 084c 	mov.w	r8, #76	; 0x4c
   d7ba2:	fb08 a505 	mla	r5, r8, r5, sl
   d7ba6:	46b0      	mov	r8, r6
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d7ba8:	45c8      	cmp	r8, r9
   d7baa:	d00f      	beq.n	d7bcc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
    { __pointer->~_Tp(); }
   d7bac:	4640      	mov	r0, r8
   d7bae:	f7ff fa2b 	bl	d7008 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d7bb2:	f108 084c 	add.w	r8, r8, #76	; 0x4c
   d7bb6:	e7f7      	b.n	d7ba8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d7bb8:	4618      	mov	r0, r3
   d7bba:	9101      	str	r1, [sp, #4]
   d7bbc:	9300      	str	r3, [sp, #0]
   d7bbe:	f7ff fe71 	bl	d78a4 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d7bc2:	9901      	ldr	r1, [sp, #4]
   d7bc4:	9b00      	ldr	r3, [sp, #0]
   d7bc6:	314c      	adds	r1, #76	; 0x4c
   d7bc8:	334c      	adds	r3, #76	; 0x4c
   d7bca:	e7df      	b.n	d7b8c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	if (__p)
   d7bcc:	b116      	cbz	r6, d7bd4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe0>
	::operator delete(__p);
   d7bce:	4630      	mov	r0, r6
   d7bd0:	f7fc fa65 	bl	d409e <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d7bd4:	204c      	movs	r0, #76	; 0x4c
   d7bd6:	fb00 b404 	mla	r4, r0, r4, fp
      this->_M_impl._M_finish = __new_finish;
   d7bda:	e9c7 b500 	strd	fp, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d7bde:	60bc      	str	r4, [r7, #8]
    }
   d7be0:	b003      	add	sp, #12
   d7be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d7be6:	461c      	mov	r4, r3
   d7be8:	e7a3      	b.n	d7b32 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
   d7bea:	bf00      	nop
   d7bec:	286bca1b 	.word	0x286bca1b
   d7bf0:	01af286b 	.word	0x01af286b
   d7bf4:	000df95c 	.word	0x000df95c

000d7bf8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   d7bf8:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d7bfa:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   d7bfe:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   d7c00:	4604      	mov	r4, r0
   d7c02:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d7c04:	d007      	beq.n	d7c16 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7c06:	b113      	cbz	r3, d7c0e <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x16>
   d7c08:	4618      	mov	r0, r3
   d7c0a:	f7ff fe4b 	bl	d78a4 <_ZN21LocalTimeScheduleItemC1ERKS_>
	    ++this->_M_impl._M_finish;
   d7c0e:	6863      	ldr	r3, [r4, #4]
   d7c10:	334c      	adds	r3, #76	; 0x4c
   d7c12:	6063      	str	r3, [r4, #4]
      }
   d7c14:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d7c16:	4619      	mov	r1, r3
   d7c18:	f7ff ff6c 	bl	d7af4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   d7c1c:	e7fa      	b.n	d7c14 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1c>

000d7c1e <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>:
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d7c1e:	b530      	push	{r4, r5, lr}
   d7c20:	b097      	sub	sp, #92	; 0x5c
   d7c22:	4604      	mov	r4, r0
    LocalTimeScheduleItem item;
   d7c24:	a803      	add	r0, sp, #12
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d7c26:	9201      	str	r2, [sp, #4]
   d7c28:	460d      	mov	r5, r1
    LocalTimeScheduleItem item;
   d7c2a:	f7fe ff4f 	bl	d6acc <_ZN21LocalTimeScheduleItemC1Ev>
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d7c2e:	2301      	movs	r3, #1
    item.timeRange = timeRange;
   d7c30:	9901      	ldr	r1, [sp, #4]
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d7c32:	9315      	str	r3, [sp, #84]	; 0x54
    item.timeRange = timeRange;
   d7c34:	a803      	add	r0, sp, #12
    item.increment = increment;
   d7c36:	950e      	str	r5, [sp, #56]	; 0x38
    item.timeRange = timeRange;
   d7c38:	f7ff ff3f 	bl	d7aba <_ZN14LocalTimeRangeaSERKS_>
    scheduleItems.push_back(item);
   d7c3c:	a903      	add	r1, sp, #12
   d7c3e:	f104 0020 	add.w	r0, r4, #32
   d7c42:	f7ff ffd9 	bl	d7bf8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>
    LocalTimeScheduleItem item;
   d7c46:	a803      	add	r0, sp, #12
   d7c48:	f7ff f9de 	bl	d7008 <_ZN21LocalTimeScheduleItemD1Ev>
}
   d7c4c:	4620      	mov	r0, r4
   d7c4e:	b017      	add	sp, #92	; 0x5c
   d7c50:	bd30      	pop	{r4, r5, pc}

000d7c52 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d7c52:	4770      	bx	lr

000d7c54 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d7c54:	b510      	push	{r4, lr}
}
   d7c56:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d7c58:	4604      	mov	r4, r0
}
   d7c5a:	f006 f9cd 	bl	ddff8 <_ZdlPvj>
   d7c5e:	4620      	mov	r0, r4
   d7c60:	bd10      	pop	{r4, pc}

000d7c62 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d7c62:	6803      	ldr	r3, [r0, #0]
   d7c64:	b2c9      	uxtb	r1, r1
   d7c66:	689b      	ldr	r3, [r3, #8]
   d7c68:	4718      	bx	r3
	...

000d7c6c <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d7c6c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d7c6e:	4d03      	ldr	r5, [pc, #12]	; (d7c7c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d7c70:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d7c74:	e9c0 5100 	strd	r5, r1, [r0]
}
   d7c78:	bd30      	pop	{r4, r5, pc}
   d7c7a:	bf00      	nop
   d7c7c:	000df9ec 	.word	0x000df9ec

000d7c80 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d7c80:	6840      	ldr	r0, [r0, #4]
   d7c82:	f003 be4f 	b.w	db924 <_ZN7TwoWire5beginEv>

000d7c86 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7c86:	b510      	push	{r4, lr}
   d7c88:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d7c8a:	6800      	ldr	r0, [r0, #0]
   d7c8c:	f003 fea5 	bl	db9da <_ZN7TwoWire6unlockEv>
   d7c90:	4620      	mov	r0, r4
   d7c92:	bd10      	pop	{r4, pc}

000d7c94 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d7c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7c98:	b08a      	sub	sp, #40	; 0x28
   d7c9a:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d7c9c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7c9e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7ca0:	f003 fe92 	bl	db9c8 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d7ca4:	221e      	movs	r2, #30
   d7ca6:	2100      	movs	r1, #0
   d7ca8:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d7caa:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d7cac:	f006 fe58 	bl	de960 <memset>
		size_t framAddr = 0;
   d7cb0:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d7cb2:	b1ef      	cbz	r7, d7cf0 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d7cb4:	6823      	ldr	r3, [r4, #0]
   d7cb6:	2f1e      	cmp	r7, #30
   d7cb8:	46b8      	mov	r8, r7
   d7cba:	bf28      	it	cs
   d7cbc:	f04f 081e 	movcs.w	r8, #30
   d7cc0:	68dd      	ldr	r5, [r3, #12]
   d7cc2:	aa02      	add	r2, sp, #8
   d7cc4:	4643      	mov	r3, r8
   d7cc6:	4631      	mov	r1, r6
   d7cc8:	4620      	mov	r0, r4
   d7cca:	47a8      	blx	r5
			if (!result) {
   d7ccc:	4605      	mov	r5, r0
   d7cce:	b958      	cbnz	r0, d7ce8 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d7cd0:	480a      	ldr	r0, [pc, #40]	; (d7cfc <_ZN6MB85RC5eraseEv+0x68>)
   d7cd2:	490b      	ldr	r1, [pc, #44]	; (d7d00 <_ZN6MB85RC5eraseEv+0x6c>)
   d7cd4:	4632      	mov	r2, r6
   d7cd6:	f7fc f9f7 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d7cda:	a801      	add	r0, sp, #4
   d7cdc:	f7ff ffd3 	bl	d7c86 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d7ce0:	4628      	mov	r0, r5
   d7ce2:	b00a      	add	sp, #40	; 0x28
   d7ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d7ce8:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d7cec:	4446      	add	r6, r8
		while(totalLen > 0) {
   d7cee:	e7e0      	b.n	d7cb2 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d7cf0:	a801      	add	r0, sp, #4
   d7cf2:	f7ff ffc8 	bl	d7c86 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d7cf6:	2501      	movs	r5, #1
   d7cf8:	e7f2      	b.n	d7ce0 <_ZN6MB85RC5eraseEv+0x4c>
   d7cfa:	bf00      	nop
   d7cfc:	2003e570 	.word	0x2003e570
   d7d00:	000df9b8 	.word	0x000df9b8

000d7d04 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d7d04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d7d08:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7d0a:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7d0c:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d7d0e:	460d      	mov	r5, r1
   d7d10:	4616      	mov	r6, r2
   d7d12:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d7d14:	f003 fe58 	bl	db9c8 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d7d18:	b1a7      	cbz	r7, d7d44 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7d1a:	68e1      	ldr	r1, [r4, #12]
   d7d1c:	6860      	ldr	r0, [r4, #4]
   d7d1e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7d22:	f003 fe32 	bl	db98a <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d7d26:	0a29      	lsrs	r1, r5, #8
   d7d28:	6860      	ldr	r0, [r4, #4]
   d7d2a:	f7ff ff9a 	bl	d7c62 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d7d2e:	4629      	mov	r1, r5
   d7d30:	6860      	ldr	r0, [r4, #4]
   d7d32:	f7ff ff96 	bl	d7c62 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d7d36:	6860      	ldr	r0, [r4, #4]
   d7d38:	2100      	movs	r1, #0
   d7d3a:	f003 fe41 	bl	db9c0 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d7d3e:	b148      	cbz	r0, d7d54 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d7d40:	2400      	movs	r4, #0
   d7d42:	e000      	b.n	d7d46 <_ZN6MB85RC8readDataEjPhj+0x42>
   d7d44:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d7d46:	a801      	add	r0, sp, #4
   d7d48:	f7ff ff9d 	bl	d7c86 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d7d4c:	4620      	mov	r0, r4
   d7d4e:	b003      	add	sp, #12
   d7d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d7d54:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d7d56:	7b21      	ldrb	r1, [r4, #12]
   d7d58:	6860      	ldr	r0, [r4, #4]
   d7d5a:	46b8      	mov	r8, r7
   d7d5c:	bf28      	it	cs
   d7d5e:	f04f 0820 	movcs.w	r8, #32
   d7d62:	2301      	movs	r3, #1
   d7d64:	4642      	mov	r2, r8
   d7d66:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7d6a:	f003 fdf8 	bl	db95e <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d7d6e:	f006 f8fb 	bl	ddf68 <_Z19__fetch_global_Wirev>
   d7d72:	6803      	ldr	r3, [r0, #0]
   d7d74:	691b      	ldr	r3, [r3, #16]
   d7d76:	4798      	blx	r3
   d7d78:	4540      	cmp	r0, r8
   d7d7a:	dbe1      	blt.n	d7d40 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d7d7c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d7d80:	f006 f8f2 	bl	ddf68 <_Z19__fetch_global_Wirev>
   d7d84:	6803      	ldr	r3, [r0, #0]
   d7d86:	695b      	ldr	r3, [r3, #20]
   d7d88:	4798      	blx	r3
   d7d8a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d7d8e:	454e      	cmp	r6, r9
   d7d90:	d1f6      	bne.n	d7d80 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d7d92:	4445      	add	r5, r8
   d7d94:	eba7 0708 	sub.w	r7, r7, r8
   d7d98:	e7be      	b.n	d7d18 <_ZN6MB85RC8readDataEjPhj+0x14>

000d7d9a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d7d9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d9e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7da0:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7da2:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d7da4:	460e      	mov	r6, r1
   d7da6:	4690      	mov	r8, r2
   d7da8:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d7daa:	f003 fe0d 	bl	db9c8 <_ZN7TwoWire4lockEv>
   d7dae:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d7db2:	f1b9 0f00 	cmp.w	r9, #0
   d7db6:	d02a      	beq.n	d7e0e <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d7db8:	b34d      	cbz	r5, d7e0e <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7dba:	68e1      	ldr	r1, [r4, #12]
   d7dbc:	6860      	ldr	r0, [r4, #4]
   d7dbe:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7dc2:	f003 fde2 	bl	db98a <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d7dc6:	0a31      	lsrs	r1, r6, #8
   d7dc8:	6860      	ldr	r0, [r4, #4]
   d7dca:	f7ff ff4a 	bl	d7c62 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d7dce:	6860      	ldr	r0, [r4, #4]
   d7dd0:	4631      	mov	r1, r6
   d7dd2:	f7ff ff46 	bl	d7c62 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7dd6:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d7dda:	4647      	mov	r7, r8
   d7ddc:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d7de0:	6860      	ldr	r0, [r4, #4]
   d7de2:	f817 1b01 	ldrb.w	r1, [r7], #1
   d7de6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d7de8:	3d01      	subs	r5, #1
				wire.write(*data);
   d7dea:	689b      	ldr	r3, [r3, #8]
   d7dec:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7dee:	4555      	cmp	r5, sl
   d7df0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d7df4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7df6:	d001      	beq.n	d7dfc <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d7df8:	2d00      	cmp	r5, #0
   d7dfa:	d1f1      	bne.n	d7de0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d7dfc:	6860      	ldr	r0, [r4, #4]
   d7dfe:	2101      	movs	r1, #1
   d7e00:	f003 fdde 	bl	db9c0 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d7e04:	2800      	cmp	r0, #0
   d7e06:	d0d7      	beq.n	d7db8 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d7e08:	f04f 0900 	mov.w	r9, #0
   d7e0c:	e7d1      	b.n	d7db2 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d7e0e:	a801      	add	r0, sp, #4
   d7e10:	f7ff ff39 	bl	d7c86 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d7e14:	4648      	mov	r0, r9
   d7e16:	b003      	add	sp, #12
   d7e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7e1c <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7e20:	b08b      	sub	sp, #44	; 0x2c
   d7e22:	460e      	mov	r6, r1
   d7e24:	4615      	mov	r5, r2
   d7e26:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d7e28:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7e2a:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7e2c:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d7e2e:	f003 fdcb 	bl	db9c8 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d7e32:	42ae      	cmp	r6, r5
   d7e34:	d229      	bcs.n	d7e8a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d7e36:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d7e38:	4425      	add	r5, r4
			while(numBytes > 0) {
   d7e3a:	b18c      	cbz	r4, d7e60 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d7e3c:	2c1e      	cmp	r4, #30
   d7e3e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d7e40:	f8d8 3000 	ldr.w	r3, [r8]
   d7e44:	bf28      	it	cs
   d7e46:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d7e48:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d7e4a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d7e4e:	aa02      	add	r2, sp, #8
   d7e50:	463b      	mov	r3, r7
   d7e52:	4631      	mov	r1, r6
   d7e54:	4640      	mov	r0, r8
				framAddrTo -= count;
   d7e56:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d7e58:	47c8      	blx	r9
				if (!result) {
   d7e5a:	b948      	cbnz	r0, d7e70 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7e5c:	2400      	movs	r4, #0
   d7e5e:	e000      	b.n	d7e62 <_ZN6MB85RC8moveDataEjjj+0x46>
   d7e60:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d7e62:	a801      	add	r0, sp, #4
   d7e64:	f7ff ff0f 	bl	d7c86 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d7e68:	4620      	mov	r0, r4
   d7e6a:	b00b      	add	sp, #44	; 0x2c
   d7e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d7e70:	f8d8 3000 	ldr.w	r3, [r8]
   d7e74:	aa02      	add	r2, sp, #8
   d7e76:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d7e7a:	4629      	mov	r1, r5
   d7e7c:	463b      	mov	r3, r7
   d7e7e:	4640      	mov	r0, r8
   d7e80:	47c8      	blx	r9
				if (!result) {
   d7e82:	2800      	cmp	r0, #0
   d7e84:	d0ea      	beq.n	d7e5c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d7e86:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d7e88:	e7d7      	b.n	d7e3a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d7e8a:	d9e9      	bls.n	d7e60 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d7e8c:	2c00      	cmp	r4, #0
   d7e8e:	d0e7      	beq.n	d7e60 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d7e90:	f8d8 3000 	ldr.w	r3, [r8]
   d7e94:	2c1e      	cmp	r4, #30
   d7e96:	4627      	mov	r7, r4
   d7e98:	bf28      	it	cs
   d7e9a:	271e      	movcs	r7, #30
   d7e9c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d7ea0:	aa02      	add	r2, sp, #8
   d7ea2:	463b      	mov	r3, r7
   d7ea4:	4631      	mov	r1, r6
   d7ea6:	4640      	mov	r0, r8
   d7ea8:	47c8      	blx	r9
				if (!result) {
   d7eaa:	2800      	cmp	r0, #0
   d7eac:	d0d6      	beq.n	d7e5c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d7eae:	f8d8 3000 	ldr.w	r3, [r8]
   d7eb2:	aa02      	add	r2, sp, #8
   d7eb4:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d7eb8:	4629      	mov	r1, r5
   d7eba:	463b      	mov	r3, r7
   d7ebc:	4640      	mov	r0, r8
   d7ebe:	47c8      	blx	r9
				if (!result) {
   d7ec0:	2800      	cmp	r0, #0
   d7ec2:	d0cb      	beq.n	d7e5c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d7ec4:	443e      	add	r6, r7
				framAddrTo += count;
   d7ec6:	443d      	add	r5, r7
				numBytes -= count;
   d7ec8:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d7eca:	e7df      	b.n	d7e8c <_ZN6MB85RC8moveDataEjjj+0x70>

000d7ecc <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:
	(*_Base::_M_get_pointer(__functor))(
   d7ecc:	6803      	ldr	r3, [r0, #0]
   d7ece:	780a      	ldrb	r2, [r1, #0]
    return result;
}

void PublishQueuePosix::publishCompleteCallback(bool succeeded, const char *eventName, const char *eventData) {
    publishComplete = true;
    publishSuccess = succeeded;
   d7ed0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   d7ed4:	2101      	movs	r1, #1
   d7ed6:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   d7eda:	4770      	bx	lr

000d7edc <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d7edc:	2a02      	cmp	r2, #2
   d7ede:	d006      	beq.n	d7eee <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d7ee0:	2a03      	cmp	r2, #3
   d7ee2:	d002      	beq.n	d7eea <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d7ee4:	2a01      	cmp	r2, #1
   d7ee6:	d100      	bne.n	d7eea <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7ee8:	6001      	str	r1, [r0, #0]
	}
   d7eea:	2000      	movs	r0, #0
   d7eec:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7eee:	680b      	ldr	r3, [r1, #0]
   d7ef0:	6003      	str	r3, [r0, #0]
	}
   d7ef2:	e7fa      	b.n	d7eea <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d7ef4 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d7ef4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d7ef6:	4603      	mov	r3, r0
	switch (__op)
   d7ef8:	d102      	bne.n	d7f00 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d7efa:	6001      	str	r1, [r0, #0]
      }
   d7efc:	2000      	movs	r0, #0
   d7efe:	4770      	bx	lr
	  switch (__op)
   d7f00:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7f02:	bf04      	itt	eq
   d7f04:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d7f08:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d7f0c:	e7f6      	b.n	d7efc <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d7f0e <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7f0e:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d7f10:	6842      	ldr	r2, [r0, #4]
   d7f12:	4603      	mov	r3, r0
   d7f14:	1054      	asrs	r4, r2, #1
   d7f16:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d7f1a:	07d2      	lsls	r2, r2, #31
   d7f1c:	bf48      	it	mi
   d7f1e:	590a      	ldrmi	r2, [r1, r4]
   d7f20:	681b      	ldr	r3, [r3, #0]
      }
   d7f22:	f85d 4b04 	ldr.w	r4, [sp], #4
   d7f26:	bf48      	it	mi
   d7f28:	58d3      	ldrmi	r3, [r2, r3]
   d7f2a:	4718      	bx	r3

000d7f2c <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   d7f2c:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   d7f30:	4601      	mov	r1, r0
    if (stateHandler) {
   d7f32:	b11b      	cbz	r3, d7f3c <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7f34:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   d7f38:	30c0      	adds	r0, #192	; 0xc0
   d7f3a:	4718      	bx	r3
}
   d7f3c:	4770      	bx	lr
	...

000d7f40 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d7f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   d7f42:	4d12      	ldr	r5, [pc, #72]	; (d7f8c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d7f44:	4608      	mov	r0, r1
        eventData = "";
   d7f46:	2a00      	cmp	r2, #0
   d7f48:	bf18      	it	ne
   d7f4a:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d7f4c:	460f      	mov	r7, r1
   d7f4e:	461e      	mov	r6, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d7f50:	f006 fdad 	bl	deaae <strlen>
   d7f54:	2840      	cmp	r0, #64	; 0x40
   d7f56:	d817      	bhi.n	d7f88 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   d7f58:	4628      	mov	r0, r5
   d7f5a:	f006 fda8 	bl	deaae <strlen>
   d7f5e:	f240 236e 	movw	r3, #622	; 0x26e
   d7f62:	4298      	cmp	r0, r3
   d7f64:	d810      	bhi.n	d7f88 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   d7f66:	3043      	adds	r0, #67	; 0x43
   d7f68:	f7fc f897 	bl	d409a <_Znaj>
    if (event) {
   d7f6c:	4604      	mov	r4, r0
   d7f6e:	b148      	cbz	r0, d7f84 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
        strcpy(event->eventName, eventName);
   d7f70:	4639      	mov	r1, r7
        event->flags = flags;
   d7f72:	f800 6b01 	strb.w	r6, [r0], #1
        strcpy(event->eventName, eventName);
   d7f76:	f006 fd74 	bl	dea62 <strcpy>
        strcpy(event->eventData, eventData);
   d7f7a:	4629      	mov	r1, r5
   d7f7c:	f104 0042 	add.w	r0, r4, #66	; 0x42
   d7f80:	f006 fd6f 	bl	dea62 <strcpy>
}
   d7f84:	4620      	mov	r0, r4
   d7f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   d7f88:	2400      	movs	r4, #0
   d7f8a:	e7fb      	b.n	d7f84 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
   d7f8c:	000e0190 	.word	0x000e0190

000d7f90 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d7f90:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7f92:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d7f94:	460a      	mov	r2, r1
   d7f96:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d7f98:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d7f9a:	1d01      	adds	r1, r0, #4
   d7f9c:	a808      	add	r0, sp, #32
   d7f9e:	f002 f85f 	bl	da060 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d7fa2:	9808      	ldr	r0, [sp, #32]
   d7fa4:	2100      	movs	r1, #0
   d7fa6:	f006 fe8d 	bl	decc4 <open>
   d7faa:	4605      	mov	r5, r0
   d7fac:	a808      	add	r0, sp, #32
   d7fae:	f005 f9f9 	bl	dd3a4 <_ZN6StringD1Ev>
    if (fd) {
   d7fb2:	2d00      	cmp	r5, #0
   d7fb4:	d060      	beq.n	d8078 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   d7fb6:	a908      	add	r1, sp, #32
   d7fb8:	4628      	mov	r0, r5
   d7fba:	f006 fe71 	bl	deca0 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   d7fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7fc0:	492e      	ldr	r1, [pc, #184]	; (d807c <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   d7fc2:	482f      	ldr	r0, [pc, #188]	; (d8080 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d7fc4:	4632      	mov	r2, r6
   d7fc6:	f7fd fcbd 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   d7fca:	2200      	movs	r2, #0
   d7fcc:	4611      	mov	r1, r2
   d7fce:	4628      	mov	r0, r5
   d7fd0:	f006 fe6e 	bl	decb0 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   d7fd4:	2208      	movs	r2, #8
   d7fd6:	a906      	add	r1, sp, #24
   d7fd8:	4628      	mov	r0, r5
   d7fda:	f006 fe87 	bl	decec <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   d7fde:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d7fe0:	2f4a      	cmp	r7, #74	; 0x4a
   d7fe2:	dd39      	ble.n	d8058 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   d7fe4:	4b27      	ldr	r3, [pc, #156]	; (d8084 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   d7fe6:	9a06      	ldr	r2, [sp, #24]
   d7fe8:	429a      	cmp	r2, r3
   d7fea:	d135      	bne.n	d8058 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   d7fec:	4b26      	ldr	r3, [pc, #152]	; (d8088 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   d7fee:	9a07      	ldr	r2, [sp, #28]
   d7ff0:	429a      	cmp	r2, r3
   d7ff2:	d131      	bne.n	d8058 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   d7ff4:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   d7ff8:	4610      	mov	r0, r2
   d7ffa:	9205      	str	r2, [sp, #20]
   d7ffc:	f7fc f84d 	bl	d409a <_Znaj>
            if (result) {
   d8000:	4604      	mov	r4, r0
   d8002:	b1c0      	cbz	r0, d8036 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d8004:	4427      	add	r7, r4
                read(fd, result, eventSize);
   d8006:	4601      	mov	r1, r0
   d8008:	9a05      	ldr	r2, [sp, #20]
   d800a:	4628      	mov	r0, r5
   d800c:	f006 fe6e 	bl	decec <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d8010:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   d8014:	b9ab      	cbnz	r3, d8042 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   d8016:	1c63      	adds	r3, r4, #1
   d8018:	4618      	mov	r0, r3
   d801a:	9305      	str	r3, [sp, #20]
   d801c:	f006 fd47 	bl	deaae <strlen>
   d8020:	283f      	cmp	r0, #63	; 0x3f
   d8022:	9b05      	ldr	r3, [sp, #20]
   d8024:	d80d      	bhi.n	d8042 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   d8026:	f104 0242 	add.w	r2, r4, #66	; 0x42
   d802a:	9200      	str	r2, [sp, #0]
   d802c:	4917      	ldr	r1, [pc, #92]	; (d808c <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   d802e:	4814      	ldr	r0, [pc, #80]	; (d8080 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d8030:	4632      	mov	r2, r6
   d8032:	f7fd fc87 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   d8036:	4628      	mov	r0, r5
   d8038:	f006 fe2a 	bl	dec90 <close>
}
   d803c:	4620      	mov	r0, r4
   d803e:	b01f      	add	sp, #124	; 0x7c
   d8040:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   d8042:	4913      	ldr	r1, [pc, #76]	; (d8090 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   d8044:	480e      	ldr	r0, [pc, #56]	; (d8080 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d8046:	4632      	mov	r2, r6
   d8048:	f7fd fc7c 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   d804c:	2143      	movs	r1, #67	; 0x43
   d804e:	4620      	mov	r0, r4
   d8050:	f005 ffd2 	bl	ddff8 <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   d8054:	2400      	movs	r4, #0
   d8056:	e7ee      	b.n	d8036 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   d8058:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d805c:	9302      	str	r3, [sp, #8]
   d805e:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d8062:	9301      	str	r3, [sp, #4]
   d8064:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d8068:	9300      	str	r3, [sp, #0]
   d806a:	490a      	ldr	r1, [pc, #40]	; (d8094 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   d806c:	9b06      	ldr	r3, [sp, #24]
   d806e:	4804      	ldr	r0, [pc, #16]	; (d8080 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d8070:	4632      	mov	r2, r6
   d8072:	f7fd fc67 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
   d8076:	e7ed      	b.n	d8054 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   d8078:	462c      	mov	r4, r5
    return result;
   d807a:	e7df      	b.n	d803c <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   d807c:	000dfa00 	.word	0x000dfa00
   d8080:	2003e260 	.word	0x2003e260
   d8084:	31b67663 	.word	0x31b67663
   d8088:	00410801 	.word	0x00410801
   d808c:	000dfa14 	.word	0x000dfa14
   d8090:	000dfa36 	.word	0x000dfa36
   d8094:	000dfa64 	.word	0x000dfa64

000d8098 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   d8098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d809c:	4680      	mov	r8, r0
   d809e:	4b28      	ldr	r3, [pc, #160]	; (d8140 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   d80a0:	f848 3b04 	str.w	r3, [r8], #4
   d80a4:	4604      	mov	r4, r0
   d80a6:	4640      	mov	r0, r8
   d80a8:	f001 fef2 	bl	d9e90 <_ZN14SequentialFileC1Ev>
   d80ac:	2202      	movs	r2, #2
   d80ae:	2364      	movs	r3, #100	; 0x64
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
   d80b0:	2500      	movs	r5, #0
   d80b2:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d80b6:	2308      	movs	r3, #8
   d80b8:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d80ba:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   d80be:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   d80c2:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   d80c6:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	  _M_start(), _M_finish()
   d80ca:	67a5      	str	r5, [r4, #120]	; 0x78
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d80cc:	2020      	movs	r0, #32
   d80ce:	f7fb ffe2 	bl	d4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d80d2:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d80d4:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d80d6:	3e01      	subs	r6, #1
   d80d8:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d80da:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   d80de:	4607      	mov	r7, r0
   d80e0:	f44f 7000 	mov.w	r0, #512	; 0x200
   d80e4:	f7fb ffd7 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d80e8:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d80ec:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   d80f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d80f4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d80f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d80fc:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   d8100:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   d8104:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   d8108:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d810c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d8110:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   d8114:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   d8118:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   d811c:	4909      	ldr	r1, [pc, #36]	; (d8144 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   d811e:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   d8122:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   d8126:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   d812a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   d812e:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   d8132:	4640      	mov	r0, r8
   d8134:	f001 fef2 	bl	d9f1c <_ZN14SequentialFile11withDirPathEPKc>
}
   d8138:	4620      	mov	r0, r4
   d813a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d813e:	bf00      	nop
   d8140:	000dfc80 	.word	0x000dfc80
   d8144:	000dfaa9 	.word	0x000dfaa9

000d8148 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   d8148:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d814a:	4c06      	ldr	r4, [pc, #24]	; (d8164 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   d814c:	6823      	ldr	r3, [r4, #0]
   d814e:	b93b      	cbnz	r3, d8160 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   d8150:	20d0      	movs	r0, #208	; 0xd0
   d8152:	f7fb ffa0 	bl	d4096 <_Znwj>
   d8156:	4605      	mov	r5, r0
   d8158:	b108      	cbz	r0, d815e <_ZN17PublishQueuePosix8instanceEv+0x16>
   d815a:	f7ff ff9d 	bl	d8098 <_ZN17PublishQueuePosixC1Ev>
   d815e:	6025      	str	r5, [r4, #0]
}
   d8160:	6820      	ldr	r0, [r4, #0]
   d8162:	bd38      	pop	{r3, r4, r5, pc}
   d8164:	2003e264 	.word	0x2003e264

000d8168 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d8168:	b510      	push	{r4, lr}
   d816a:	e9d1 2300 	ldrd	r2, r3, [r1]
   d816e:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d8170:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d8172:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d8174:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d8176:	b90a      	cbnz	r2, d817c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d8178:	07d9      	lsls	r1, r3, #31
   d817a:	d505      	bpl.n	d8188 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d817c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d8180:	4b0f      	ldr	r3, [pc, #60]	; (d81c0 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d8182:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d8184:	4b0f      	ldr	r3, [pc, #60]	; (d81c4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d8186:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8188:	ab02      	add	r3, sp, #8
   d818a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d818e:	466a      	mov	r2, sp
   d8190:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8194:	e894 0003 	ldmia.w	r4, {r0, r1}
   d8198:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d819c:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d81a0:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d81a2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d81a6:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d81a8:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d81aa:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d81ac:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d81ae:	4618      	mov	r0, r3
   d81b0:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d81b2:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d81b4:	9105      	str	r1, [sp, #20]
   d81b6:	f7fe f8e1 	bl	d637c <_ZNSt14_Function_baseD1Ev>
	}
   d81ba:	4620      	mov	r0, r4
   d81bc:	b006      	add	sp, #24
   d81be:	bd10      	pop	{r4, pc}
   d81c0:	000d7f0f 	.word	0x000d7f0f
   d81c4:	000d7ef5 	.word	0x000d7ef5

000d81c8 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>:
      ~lock_guard()
   d81c8:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d81ca:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d81cc:	4604      	mov	r4, r0
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   d81ce:	6f58      	ldr	r0, [r3, #116]	; 0x74
   d81d0:	f002 fa04 	bl	da5dc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d81d4:	4620      	mov	r0, r4
   d81d6:	bd10      	pop	{r4, pc}

000d81d8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   d81d8:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   d81da:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   d81dc:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   d81de:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d81e0:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   d81e2:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   d81e4:	d002      	beq.n	d81ec <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(this->_M_impl,
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   d81e6:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d81e8:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   d81ea:	bd10      	pop	{r4, pc}
	::operator delete(__p);
   d81ec:	68c0      	ldr	r0, [r0, #12]
   d81ee:	f7fb ff56 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d81f2:	6963      	ldr	r3, [r4, #20]
   d81f4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d81f6:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   d81f8:	685b      	ldr	r3, [r3, #4]
   d81fa:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d81fc:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d8200:	6122      	str	r2, [r4, #16]
   d8202:	e7f1      	b.n	d81e8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>

000d8204 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   d8204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8208:	b087      	sub	sp, #28
   d820a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d820c:	9001      	str	r0, [sp, #4]
    void lock() { os_mutex_recursive_lock(mutex); };
   d820e:	6f40      	ldr	r0, [r0, #116]	; 0x74
                hdr.magic = FILE_MAGIC;
   d8210:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d82bc <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                hdr.version = FILE_VERSION;
   d8214:	f8df a0a8 	ldr.w	sl, [pc, #168]	; d82c0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
   d8218:	f002 f9d8 	bl	da5cc <os_mutex_recursive_lock>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d821c:	f8df b0a4 	ldr.w	fp, [pc, #164]	; d82c4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xc0>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d8220:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   d8224:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d8228:	4293      	cmp	r3, r2
   d822a:	d105      	bne.n	d8238 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x34>
    WITH_LOCK(*this) {
   d822c:	a801      	add	r0, sp, #4
   d822e:	f7ff ffcb 	bl	d81c8 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d8232:	b007      	add	sp, #28
   d8234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ramQueue.pop_front();
   d8238:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   d823c:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   d8240:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   d8242:	f7ff ffc9 	bl	d81d8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   d8246:	4640      	mov	r0, r8
   d8248:	f002 f8fe 	bl	da448 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d824c:	2300      	movs	r3, #0
   d824e:	4602      	mov	r2, r0
   d8250:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   d8252:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d8254:	a802      	add	r0, sp, #8
   d8256:	f001 ff03 	bl	da060 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d825a:	9802      	ldr	r0, [sp, #8]
   d825c:	f240 2102 	movw	r1, #514	; 0x202
   d8260:	f006 fd30 	bl	decc4 <open>
   d8264:	4605      	mov	r5, r0
   d8266:	a802      	add	r0, sp, #8
   d8268:	f005 f89c 	bl	dd3a4 <_ZN6StringD1Ev>
            if (fd) {
   d826c:	b1cd      	cbz	r5, d82a2 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x9e>
                write(fd, &hdr, sizeof(hdr));
   d826e:	2208      	movs	r2, #8
   d8270:	eb0d 0102 	add.w	r1, sp, r2
   d8274:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   d8276:	e9cd 9a02 	strd	r9, sl, [sp, #8]
                write(fd, &hdr, sizeof(hdr));
   d827a:	f006 fd49 	bl	ded10 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   d827e:	f107 0042 	add.w	r0, r7, #66	; 0x42
   d8282:	f006 fc14 	bl	deaae <strlen>
   d8286:	4639      	mov	r1, r7
   d8288:	f100 0243 	add.w	r2, r0, #67	; 0x43
   d828c:	4628      	mov	r0, r5
   d828e:	f006 fd3f 	bl	ded10 <write>
                close(fd);
   d8292:	4628      	mov	r0, r5
   d8294:	f006 fcfc 	bl	dec90 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d8298:	4807      	ldr	r0, [pc, #28]	; (d82b8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>)
   d829a:	4632      	mov	r2, r6
   d829c:	4659      	mov	r1, fp
   d829e:	f7fd fb51 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   d82a2:	4631      	mov	r1, r6
   d82a4:	4640      	mov	r0, r8
   d82a6:	f002 f90f 	bl	da4c8 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   d82aa:	2f00      	cmp	r7, #0
   d82ac:	d0b8      	beq.n	d8220 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x1c>
   d82ae:	2143      	movs	r1, #67	; 0x43
   d82b0:	4638      	mov	r0, r7
   d82b2:	f005 fea1 	bl	ddff8 <_ZdlPvj>
   d82b6:	e7b1      	b.n	d821c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   d82b8:	2003e260 	.word	0x2003e260
   d82bc:	31b67663 	.word	0x31b67663
   d82c0:	00410801 	.word	0x00410801
   d82c4:	000dfab7 	.word	0x000dfab7

000d82c8 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:
PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d82c8:	2900      	cmp	r1, #0
   d82ca:	bf08      	it	eq
   d82cc:	f5b0 6f00 	cmpeq.w	r0, #2048	; 0x800
void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   d82d0:	b538      	push	{r3, r4, r5, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d82d2:	d005      	beq.n	d82e0 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x18>
   d82d4:	2900      	cmp	r1, #0
   d82d6:	bf08      	it	eq
   d82d8:	2840      	cmpeq	r0, #64	; 0x40
   d82da:	d10b      	bne.n	d82f4 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
   d82dc:	2a09      	cmp	r2, #9
   d82de:	d109      	bne.n	d82f4 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
        _log.trace("reset or disconnect event, save files to queue");
   d82e0:	4905      	ldr	r1, [pc, #20]	; (d82f8 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   d82e2:	4806      	ldr	r0, [pc, #24]	; (d82fc <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x34>)
   d82e4:	f7fd fb2e 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   d82e8:	f7ff ff2e 	bl	d8148 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   d82ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   d82f0:	f7ff bf88 	b.w	d8204 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   d82f4:	bd38      	pop	{r3, r4, r5, pc}
   d82f6:	bf00      	nop
   d82f8:	000dfad4 	.word	0x000dfad4
   d82fc:	2003e260 	.word	0x2003e260

000d8300 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   d8300:	b570      	push	{r4, r5, r6, lr}
   d8302:	b086      	sub	sp, #24
   d8304:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8306:	f002 fc7b 	bl	dac00 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   d830a:	b948      	cbnz	r0, d8320 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   d830c:	4b43      	ldr	r3, [pc, #268]	; (d841c <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   d830e:	a902      	add	r1, sp, #8
   d8310:	e9cd 3002 	strd	r3, r0, [sp, #8]
   d8314:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8318:	f7ff ff26 	bl	d8168 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d831c:	b006      	add	sp, #24
   d831e:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   d8320:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   d8324:	b11d      	cbz	r5, d832e <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   d8326:	2301      	movs	r3, #1
   d8328:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   d832c:	e7f6      	b.n	d831c <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   d832e:	f002 f985 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   d8332:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   d8336:	1ac0      	subs	r0, r0, r3
   d8338:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   d833c:	4298      	cmp	r0, r3
   d833e:	d3ed      	bcc.n	d831c <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   d8340:	1d26      	adds	r6, r4, #4
   d8342:	4629      	mov	r1, r5
   d8344:	4630      	mov	r0, r6
   d8346:	f002 f88b 	bl	da460 <_ZN14SequentialFile16getFileFromQueueEb>
   d834a:	4601      	mov	r1, r0
   d834c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   d8350:	2800      	cmp	r0, #0
   d8352:	d052      	beq.n	d83fa <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   d8354:	4620      	mov	r0, r4
   d8356:	f7ff fe1b 	bl	d7f90 <_ZN17PublishQueuePosix13readQueueFileEi>
   d835a:	4605      	mov	r5, r0
   d835c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   d8360:	2800      	cmp	r0, #0
   d8362:	d035      	beq.n	d83d0 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   d8364:	f002 f96a 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   d8368:	ae02      	add	r6, sp, #8
   d836a:	2500      	movs	r5, #0
   d836c:	4b2c      	ldr	r3, [pc, #176]	; (d8420 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   d836e:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   d8372:	4631      	mov	r1, r6
   d8374:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8378:	9302      	str	r3, [sp, #8]
   d837a:	9503      	str	r5, [sp, #12]
   d837c:	f7ff fef4 	bl	d8168 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d8380:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   d8384:	f103 0242 	add.w	r2, r3, #66	; 0x42
   d8388:	9200      	str	r2, [sp, #0]
   d838a:	4926      	ldr	r1, [pc, #152]	; (d8424 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   d838c:	4a26      	ldr	r2, [pc, #152]	; (d8428 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   d838e:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d8392:	42a8      	cmp	r0, r5
   d8394:	bf08      	it	eq
   d8396:	460a      	moveq	r2, r1
   d8398:	3301      	adds	r3, #1
   d839a:	4924      	ldr	r1, [pc, #144]	; (d842c <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   d839c:	4824      	ldr	r0, [pc, #144]	; (d8430 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   d839e:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d83a2:	f7fd facf 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   d83a6:	f7fe f82d 	bl	d6404 <_ZN19BackgroundPublishRK8instanceEv>
   d83aa:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   d83ae:	4b21      	ldr	r3, [pc, #132]	; (d8434 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   d83b0:	9305      	str	r3, [sp, #20]
   d83b2:	e9cd 6500 	strd	r6, r5, [sp]
   d83b6:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   d83b8:	4b1f      	ldr	r3, [pc, #124]	; (d8438 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d83ba:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d83bc:	9304      	str	r3, [sp, #16]
   d83be:	f811 3b01 	ldrb.w	r3, [r1], #1
   d83c2:	3242      	adds	r2, #66	; 0x42
   d83c4:	f7fe f968 	bl	d6698 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   d83c8:	4630      	mov	r0, r6
   d83ca:	f7fd ffd7 	bl	d637c <_ZNSt14_Function_baseD1Ev>
   d83ce:	e7a5      	b.n	d831c <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   d83d0:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   d83d4:	4919      	ldr	r1, [pc, #100]	; (d843c <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   d83d6:	4816      	ldr	r0, [pc, #88]	; (d8430 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   d83d8:	f7fb fe76 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   d83dc:	2101      	movs	r1, #1
   d83de:	4630      	mov	r0, r6
   d83e0:	f002 f83e 	bl	da460 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   d83e4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   d83e8:	462a      	mov	r2, r5
   d83ea:	4630      	mov	r0, r6
   d83ec:	f001 fe74 	bl	da0d8 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   d83f0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   d83f4:	2b00      	cmp	r3, #0
   d83f6:	d1b5      	bne.n	d8364 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   d83f8:	e795      	b.n	d8326 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   d83fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   d83fe:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d8402:	429a      	cmp	r2, r3
   d8404:	d007      	beq.n	d8416 <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   d8406:	681b      	ldr	r3, [r3, #0]
   d8408:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   d840c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d8410:	f7ff fee2 	bl	d81d8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   d8414:	e7ec      	b.n	d83f0 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   d8416:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   d841a:	e784      	b.n	d8326 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   d841c:	000d84a1 	.word	0x000d84a1
   d8420:	000d87f9 	.word	0x000d87f9
   d8424:	000dfb03 	.word	0x000dfb03
   d8428:	000e0008 	.word	0x000e0008
   d842c:	000dfb24 	.word	0x000dfb24
   d8430:	2003e260 	.word	0x2003e260
   d8434:	000d7ecd 	.word	0x000d7ecd
   d8438:	000d7edd 	.word	0x000d7edd
   d843c:	000dfb07 	.word	0x000dfb07

000d8440 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d8440:	68c3      	ldr	r3, [r0, #12]
   d8442:	68ca      	ldr	r2, [r1, #12]
   d8444:	1a9b      	subs	r3, r3, r2
   d8446:	109b      	asrs	r3, r3, #2
   d8448:	1e5a      	subs	r2, r3, #1
   d844a:	e9d0 3000 	ldrd	r3, r0, [r0]
   d844e:	1a1b      	subs	r3, r3, r0
   d8450:	109b      	asrs	r3, r3, #2
   d8452:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d8456:	6888      	ldr	r0, [r1, #8]
   d8458:	680a      	ldr	r2, [r1, #0]
   d845a:	1a80      	subs	r0, r0, r2
    }
   d845c:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d8460:	4770      	bx	lr

000d8462 <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   d8462:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8464:	4605      	mov	r5, r0
   d8466:	9001      	str	r0, [sp, #4]
   d8468:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d846a:	f002 f8af 	bl	da5cc <os_mutex_recursive_lock>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d846e:	f105 0180 	add.w	r1, r5, #128	; 0x80
   d8472:	f105 0090 	add.w	r0, r5, #144	; 0x90
   d8476:	f7ff ffe3 	bl	d8440 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (result == 0) {
   d847a:	4604      	mov	r4, r0
   d847c:	b950      	cbnz	r0, d8494 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
            result = fileQueue.getQueueLen();
   d847e:	1d28      	adds	r0, r5, #4
   d8480:	f002 f83c 	bl	da4fc <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   d8484:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   d8488:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   d848a:	b11b      	cbz	r3, d8494 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
   d848c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   d8490:	b903      	cbnz	r3, d8494 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
                result++;
   d8492:	3401      	adds	r4, #1
    WITH_LOCK(*this) {
   d8494:	a801      	add	r0, sp, #4
   d8496:	f7ff fe97 	bl	d81c8 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d849a:	4620      	mov	r0, r4
   d849c:	b003      	add	sp, #12
   d849e:	bd30      	pop	{r4, r5, pc}

000d84a0 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   d84a0:	b513      	push	{r0, r1, r4, lr}
   d84a2:	4604      	mov	r4, r0
   d84a4:	f002 fbac 	bl	dac00 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d84a8:	b190      	cbz	r0, d84d0 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   d84aa:	f002 f8c7 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   d84ae:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   d84b2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   d84b6:	4b0d      	ldr	r3, [pc, #52]	; (d84ec <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   d84b8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   d84bc:	9300      	str	r3, [sp, #0]
   d84be:	4669      	mov	r1, sp
   d84c0:	2300      	movs	r3, #0
   d84c2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d84c6:	9301      	str	r3, [sp, #4]
   d84c8:	f7ff fe4e 	bl	d8168 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d84cc:	b002      	add	sp, #8
   d84ce:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   d84d0:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   d84d4:	b11b      	cbz	r3, d84de <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   d84d6:	2301      	movs	r3, #1
   d84d8:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   d84dc:	e7f6      	b.n	d84cc <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   d84de:	4620      	mov	r0, r4
   d84e0:	f7ff ffbf 	bl	d8462 <_ZN17PublishQueuePosix12getNumEventsEv>
   d84e4:	2800      	cmp	r0, #0
   d84e6:	d0f6      	beq.n	d84d6 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   d84e8:	e7f0      	b.n	d84cc <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   d84ea:	bf00      	nop
   d84ec:	000d8301 	.word	0x000d8301

000d84f0 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   d84f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d84f4:	4604      	mov	r4, r0
   d84f6:	9001      	str	r0, [sp, #4]
   d84f8:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d84fa:	f002 f867 	bl	da5cc <os_mutex_recursive_lock>
   d84fe:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d8502:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d8506:	f7ff ff9b 	bl	d8440 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (ramQueue.size() > ramQueueSize) {
   d850a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d850c:	4283      	cmp	r3, r0
   d850e:	d202      	bcs.n	d8516 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
            writeQueueToFiles();
   d8510:	4620      	mov	r0, r4
   d8512:	f7ff fe77 	bl	d8204 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   d8516:	f8df 8048 	ldr.w	r8, [pc, #72]	; d8560 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x70>
   d851a:	4f10      	ldr	r7, [pc, #64]	; (d855c <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x6c>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   d851c:	1d26      	adds	r6, r4, #4
   d851e:	4630      	mov	r0, r6
   d8520:	f001 ffec 	bl	da4fc <_ZNK14SequentialFile11getQueueLenEv>
   d8524:	6f23      	ldr	r3, [r4, #112]	; 0x70
   d8526:	4298      	cmp	r0, r3
   d8528:	dc05      	bgt.n	d8536 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x46>
    WITH_LOCK(*this) {
   d852a:	a801      	add	r0, sp, #4
   d852c:	f7ff fe4c 	bl	d81c8 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d8530:	b002      	add	sp, #8
   d8532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            int fileNum = fileQueue.getFileFromQueue(true);
   d8536:	2101      	movs	r1, #1
   d8538:	4630      	mov	r0, r6
   d853a:	f001 ff91 	bl	da460 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   d853e:	4605      	mov	r5, r0
   d8540:	2800      	cmp	r0, #0
   d8542:	d0ec      	beq.n	d851e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
                fileQueue.removeFileNum(fileNum, false);
   d8544:	4601      	mov	r1, r0
   d8546:	2200      	movs	r2, #0
   d8548:	4630      	mov	r0, r6
   d854a:	f001 fdc5 	bl	da0d8 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   d854e:	462a      	mov	r2, r5
   d8550:	4641      	mov	r1, r8
   d8552:	4638      	mov	r0, r7
   d8554:	f7fb fdb8 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d8558:	e7e1      	b.n	d851e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
   d855a:	bf00      	nop
   d855c:	2003e260 	.word	0x2003e260
   d8560:	000dfb43 	.word	0x000dfb43

000d8564 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   d8564:	b513      	push	{r0, r1, r4, lr}
   d8566:	4604      	mov	r4, r0
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   d8568:	2000      	movs	r0, #0
   d856a:	f002 faf1 	bl	dab50 <system_thread_get_state>
   d856e:	2801      	cmp	r0, #1
   d8570:	d005      	beq.n	d857e <_ZN17PublishQueuePosix5setupEv+0x1a>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   d8572:	4912      	ldr	r1, [pc, #72]	; (d85bc <_ZN17PublishQueuePosix5setupEv+0x58>)
   d8574:	4812      	ldr	r0, [pc, #72]	; (d85c0 <_ZN17PublishQueuePosix5setupEv+0x5c>)
   d8576:	f7fd f9fc 	bl	d5972 <_ZNK5spark6Logger5errorEPKcz>
}
   d857a:	b002      	add	sp, #8
   d857c:	bd10      	pop	{r4, pc}
    os_mutex_recursive_create(&mutex);
   d857e:	f104 0074 	add.w	r0, r4, #116	; 0x74
   d8582:	f002 f813 	bl	da5ac <os_mutex_recursive_create>
   d8586:	4a0f      	ldr	r2, [pc, #60]	; (d85c4 <_ZN17PublishQueuePosix5setupEv+0x60>)
   d8588:	2300      	movs	r3, #0
   d858a:	2100      	movs	r1, #0
   d858c:	f44f 6004 	mov.w	r0, #2112	; 0x840
   d8590:	f002 fabe 	bl	dab10 <system_subscribe_event>
    BackgroundPublishRK::instance().start();
   d8594:	f7fd ff36 	bl	d6404 <_ZN19BackgroundPublishRK8instanceEv>
   d8598:	f7fe f858 	bl	d664c <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   d859c:	1d20      	adds	r0, r4, #4
   d859e:	f001 fedb 	bl	da358 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   d85a2:	4620      	mov	r0, r4
   d85a4:	f7ff ffa4 	bl	d84f0 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   d85a8:	4b07      	ldr	r3, [pc, #28]	; (d85c8 <_ZN17PublishQueuePosix5setupEv+0x64>)
   d85aa:	9300      	str	r3, [sp, #0]
   d85ac:	4669      	mov	r1, sp
   d85ae:	2300      	movs	r3, #0
   d85b0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d85b4:	9301      	str	r3, [sp, #4]
   d85b6:	f7ff fdd7 	bl	d8168 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d85ba:	e7de      	b.n	d857a <_ZN17PublishQueuePosix5setupEv+0x16>
   d85bc:	000dfb56 	.word	0x000dfb56
   d85c0:	2003e260 	.word	0x2003e260
   d85c4:	000d82c9 	.word	0x000d82c9
   d85c8:	000d84a1 	.word	0x000d84a1

000d85cc <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d85cc:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d85ce:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d85d0:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d85d2:	b163      	cbz	r3, d85ee <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d85d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d85d6:	6945      	ldr	r5, [r0, #20]
   d85d8:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d85da:	42ae      	cmp	r6, r5
   d85dc:	d904      	bls.n	d85e8 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x1c>
   d85de:	f855 0b04 	ldr.w	r0, [r5], #4
   d85e2:	f7fb fd5c 	bl	d409e <_ZdlPv>
   d85e6:	e7f8      	b.n	d85da <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   d85e8:	6820      	ldr	r0, [r4, #0]
   d85ea:	f7fb fd58 	bl	d409e <_ZdlPv>
    }
   d85ee:	4620      	mov	r0, r4
   d85f0:	bd70      	pop	{r4, r5, r6, pc}

000d85f2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   d85f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d85f6:	4606      	mov	r6, r0
   d85f8:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d85fa:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d85fc:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d85fe:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d8600:	1a47      	subs	r7, r0, r1
   d8602:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d8606:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d8608:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   d860c:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d860e:	d927      	bls.n	d8660 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   d8610:	1b5d      	subs	r5, r3, r5
   d8612:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d8614:	6832      	ldr	r2, [r6, #0]
   d8616:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d8618:	b10c      	cbz	r4, d861e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   d861a:	ea4f 0489 	mov.w	r4, r9, lsl #2
   d861e:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d8620:	4414      	add	r4, r2
   d8622:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d8624:	42a1      	cmp	r1, r4
   d8626:	eba3 0201 	sub.w	r2, r3, r1
   d862a:	d913      	bls.n	d8654 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   d862c:	4299      	cmp	r1, r3
   d862e:	d002      	beq.n	d8636 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d8630:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d8632:	f006 f97b 	bl	de92c <memmove>
	_M_node = __new_node;
   d8636:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   d8638:	6823      	ldr	r3, [r4, #0]
   d863a:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d863c:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d8640:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d8642:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   d8644:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   d8646:	59e3      	ldr	r3, [r4, r7]
   d8648:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d864a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d864e:	6233      	str	r3, [r6, #32]
    }
   d8650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d8654:	4299      	cmp	r1, r3
   d8656:	d0ee      	beq.n	d8636 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d8658:	1d38      	adds	r0, r7, #4
   d865a:	1a80      	subs	r0, r0, r2
   d865c:	4420      	add	r0, r4
   d865e:	e7e8      	b.n	d8632 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d8660:	f103 0802 	add.w	r8, r3, #2
   d8664:	454b      	cmp	r3, r9
   d8666:	bf2c      	ite	cs
   d8668:	4498      	addcs	r8, r3
   d866a:	44c8      	addcc	r8, r9
	if (__n > this->max_size())
   d866c:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   d8670:	d301      	bcc.n	d8676 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   d8672:	f005 fcc7 	bl	de004 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8676:	ea4f 0088 	mov.w	r0, r8, lsl #2
   d867a:	f7fb fd0c 	bl	d4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d867e:	eba8 0505 	sub.w	r5, r8, r5
   d8682:	086d      	lsrs	r5, r5, #1
   d8684:	4682      	mov	sl, r0
   d8686:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d8688:	b10c      	cbz	r4, d868e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   d868a:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   d868e:	6a72      	ldr	r2, [r6, #36]	; 0x24
   d8690:	6971      	ldr	r1, [r6, #20]
   d8692:	3204      	adds	r2, #4
	                 + (__add_at_front ? __nodes_to_add : 0);
   d8694:	442c      	add	r4, r5
	  if (_Num)
   d8696:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d8698:	4454      	add	r4, sl
   d869a:	d003      	beq.n	d86a4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d869c:	1a52      	subs	r2, r2, r1
   d869e:	4620      	mov	r0, r4
   d86a0:	f006 f944 	bl	de92c <memmove>
	::operator delete(__p);
   d86a4:	6830      	ldr	r0, [r6, #0]
   d86a6:	f7fb fcfa 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d86aa:	e9c6 a800 	strd	sl, r8, [r6]
   d86ae:	e7c2      	b.n	d8636 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>

000d86b0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d86b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d86b4:	b086      	sub	sp, #24
   d86b6:	4604      	mov	r4, r0
   d86b8:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   d86bc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d86c0:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d86c2:	460f      	mov	r7, r1
   d86c4:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d86c6:	f7ff fc3b 	bl	d7f40 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   d86ca:	4605      	mov	r5, r0
   d86cc:	2800      	cmp	r0, #0
   d86ce:	d042      	beq.n	d8756 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xa6>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   d86d0:	4b43      	ldr	r3, [pc, #268]	; (d87e0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   d86d2:	4944      	ldr	r1, [pc, #272]	; (d87e4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x134>)
   d86d4:	4844      	ldr	r0, [pc, #272]	; (d87e8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d86d6:	2e00      	cmp	r6, #0
   d86d8:	bf18      	it	ne
   d86da:	4633      	movne	r3, r6
   d86dc:	463a      	mov	r2, r7
   d86de:	f7fd f931 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
   d86e2:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d86e4:	9405      	str	r4, [sp, #20]
   d86e6:	f001 ff71 	bl	da5cc <os_mutex_recursive_lock>
	    != this->_M_impl._M_finish._M_last - 1)
   d86ea:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   d86ee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   d86f2:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   d86f4:	4293      	cmp	r3, r2
   d86f6:	f104 0878 	add.w	r8, r4, #120	; 0x78
   d86fa:	f104 0690 	add.w	r6, r4, #144	; 0x90
   d86fe:	f104 0780 	add.w	r7, r4, #128	; 0x80
   d8702:	d02b      	beq.n	d875c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xac>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8704:	b103      	cbz	r3, d8708 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x58>
   d8706:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d8708:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   d870c:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   d870e:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d8710:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   d8714:	4628      	mov	r0, r5
   d8716:	f001 fef1 	bl	da4fc <_ZNK14SequentialFile11getQueueLenEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d871a:	4639      	mov	r1, r7
   d871c:	9003      	str	r0, [sp, #12]
   d871e:	4630      	mov	r0, r6
   d8720:	f7ff fe8e 	bl	d8440 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
   d8724:	9002      	str	r0, [sp, #8]
   d8726:	f002 fa6b 	bl	dac00 <spark_cloud_flag_connected>
   d872a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   d872e:	9000      	str	r0, [sp, #0]
   d8730:	492e      	ldr	r1, [pc, #184]	; (d87ec <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x13c>)
   d8732:	482d      	ldr	r0, [pc, #180]	; (d87e8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d8734:	f7fd f906 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d8738:	4628      	mov	r0, r5
   d873a:	f001 fedf 	bl	da4fc <_ZNK14SequentialFile11getQueueLenEv>
   d873e:	2800      	cmp	r0, #0
   d8740:	d03e      	beq.n	d87c0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x110>
            writeQueueToFiles();
   d8742:	4620      	mov	r0, r4
   d8744:	f7ff fd5e 	bl	d8204 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   d8748:	4620      	mov	r0, r4
   d874a:	f7ff fed1 	bl	d84f0 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    WITH_LOCK(*this) {
   d874e:	a805      	add	r0, sp, #20
   d8750:	f7ff fd3a 	bl	d81c8 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
    return true;
   d8754:	2001      	movs	r0, #1
}
   d8756:	b006      	add	sp, #24
   d8758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d875c:	4639      	mov	r1, r7
   d875e:	4630      	mov	r0, r6
   d8760:	f7ff fe6e 	bl	d8440 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d8764:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d8768:	4298      	cmp	r0, r3
   d876a:	d102      	bne.n	d8772 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xc2>
	  __throw_length_error(
   d876c:	4820      	ldr	r0, [pc, #128]	; (d87f0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x140>)
   d876e:	f005 fc4c 	bl	de00a <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d8772:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d8776:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   d8778:	1a9a      	subs	r2, r3, r2
   d877a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   d877c:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d8780:	2b01      	cmp	r3, #1
   d8782:	d804      	bhi.n	d878e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xde>
	  _M_reallocate_map(__nodes_to_add, false);
   d8784:	2200      	movs	r2, #0
   d8786:	2101      	movs	r1, #1
   d8788:	4640      	mov	r0, r8
   d878a:	f7ff ff32 	bl	d85f2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d878e:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d8792:	f8d4 809c 	ldr.w	r8, [r4, #156]	; 0x9c
   d8796:	f7fb fc7e 	bl	d4096 <_Znwj>
   d879a:	f8c8 0004 	str.w	r0, [r8, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d879e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d87a2:	b103      	cbz	r3, d87a6 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf6>
   d87a4:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d87a6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d87aa:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d87ac:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   d87b0:	685b      	ldr	r3, [r3, #4]
   d87b2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   d87b6:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d87ba:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   d87be:	e7a6      	b.n	d870e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x5e>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d87c0:	4639      	mov	r1, r7
   d87c2:	4630      	mov	r0, r6
   d87c4:	f7ff fe3c 	bl	d8440 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d87c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d87ca:	4283      	cmp	r3, r0
   d87cc:	d3b9      	bcc.n	d8742 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
   d87ce:	f002 fa17 	bl	dac00 <spark_cloud_flag_connected>
   d87d2:	2800      	cmp	r0, #0
   d87d4:	d0b5      	beq.n	d8742 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
            _log.trace("queued to ramQueue");
   d87d6:	4907      	ldr	r1, [pc, #28]	; (d87f4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x144>)
   d87d8:	4803      	ldr	r0, [pc, #12]	; (d87e8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d87da:	f7fd f8b3 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
   d87de:	e7b3      	b.n	d8748 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
   d87e0:	000e0190 	.word	0x000e0190
   d87e4:	000dfb79 	.word	0x000dfb79
   d87e8:	2003e260 	.word	0x2003e260
   d87ec:	000dfbd1 	.word	0x000dfbd1
   d87f0:	000dfba1 	.word	0x000dfba1
   d87f4:	000dfbfd 	.word	0x000dfbfd

000d87f8 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   d87f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   d87fa:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   d87fe:	4604      	mov	r4, r0
    if (!publishComplete) {
   d8800:	2b00      	cmp	r3, #0
   d8802:	d041      	beq.n	d8888 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   d8804:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
   d8808:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
   d880c:	2b00      	cmp	r3, #0
   d880e:	d03d      	beq.n	d888c <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   d8810:	4952      	ldr	r1, [pc, #328]	; (d895c <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   d8812:	4853      	ldr	r0, [pc, #332]	; (d8960 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d8814:	f7fd f896 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   d8818:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d881c:	b1d3      	cbz	r3, d8854 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   d881e:	1d26      	adds	r6, r4, #4
   d8820:	2100      	movs	r1, #0
   d8822:	4630      	mov	r0, r6
   d8824:	f001 fe1c 	bl	da460 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   d8828:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d882c:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   d882e:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   d8830:	d10d      	bne.n	d884e <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   d8832:	2101      	movs	r1, #1
   d8834:	4630      	mov	r0, r6
   d8836:	f001 fe13 	bl	da460 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   d883a:	2200      	movs	r2, #0
   d883c:	4629      	mov	r1, r5
   d883e:	4630      	mov	r0, r6
   d8840:	f001 fc4a 	bl	da0d8 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   d8844:	4947      	ldr	r1, [pc, #284]	; (d8964 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   d8846:	4846      	ldr	r0, [pc, #280]	; (d8960 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d8848:	462a      	mov	r2, r5
   d884a:	f7fd f87b 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   d884e:	2300      	movs	r3, #0
   d8850:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   d8854:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d8858:	b110      	cbz	r0, d8860 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   d885a:	2143      	movs	r1, #67	; 0x43
   d885c:	f005 fbcc 	bl	ddff8 <_ZdlPvj>
        curEvent = NULL;
   d8860:	2300      	movs	r3, #0
   d8862:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   d8866:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   d886a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   d886e:	4b3e      	ldr	r3, [pc, #248]	; (d8968 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   d8870:	9300      	str	r3, [sp, #0]
   d8872:	4669      	mov	r1, sp
   d8874:	2300      	movs	r3, #0
   d8876:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d887a:	9301      	str	r3, [sp, #4]
   d887c:	f7ff fc74 	bl	d8168 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d8880:	f001 fedc 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d8884:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   d8888:	b002      	add	sp, #8
   d888a:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   d888c:	4937      	ldr	r1, [pc, #220]	; (d896c <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   d888e:	4834      	ldr	r0, [pc, #208]	; (d8960 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d8890:	f7fd f858 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   d8894:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   d8898:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   d889c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d88a0:	b14b      	cbz	r3, d88b6 <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   d88a2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d88a6:	b110      	cbz	r0, d88ae <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   d88a8:	2143      	movs	r1, #67	; 0x43
   d88aa:	f005 fba5 	bl	ddff8 <_ZdlPvj>
            curEvent = NULL;
   d88ae:	2300      	movs	r3, #0
   d88b0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   d88b4:	e7db      	b.n	d886e <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   d88b6:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d88b8:	9400      	str	r4, [sp, #0]
   d88ba:	f001 fe87 	bl	da5cc <os_mutex_recursive_lock>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   d88be:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   d88c2:	4293      	cmp	r3, r2
   d88c4:	d013      	beq.n	d88ee <_ZN17PublishQueuePosix16statePublishWaitEv+0xf6>
	    _Alloc_traits::construct(this->_M_impl,
   d88c6:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   d88ca:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   d88ce:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   d88d2:	3b04      	subs	r3, #4
   d88d4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            WITH_LOCK(*this) {
   d88d8:	4668      	mov	r0, sp
   d88da:	f7ff fc75 	bl	d81c8 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
            _log.trace("writing to files after publish failure");
   d88de:	4924      	ldr	r1, [pc, #144]	; (d8970 <_ZN17PublishQueuePosix16statePublishWaitEv+0x178>)
   d88e0:	481f      	ldr	r0, [pc, #124]	; (d8960 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d88e2:	f7fd f82f 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   d88e6:	4620      	mov	r0, r4
   d88e8:	f7ff fc8c 	bl	d8204 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   d88ec:	e7bf      	b.n	d886e <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d88ee:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d88f2:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d88f6:	f7ff fda3 	bl	d8440 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d88fa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d88fe:	4298      	cmp	r0, r3
   d8900:	f104 0578 	add.w	r5, r4, #120	; 0x78
   d8904:	d102      	bne.n	d890c <_ZN17PublishQueuePosix16statePublishWaitEv+0x114>
	  __throw_length_error(
   d8906:	481b      	ldr	r0, [pc, #108]	; (d8974 <_ZN17PublishQueuePosix16statePublishWaitEv+0x17c>)
   d8908:	f005 fb7f 	bl	de00a <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   d890c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   d8910:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   d8912:	429a      	cmp	r2, r3
   d8914:	d104      	bne.n	d8920 <_ZN17PublishQueuePosix16statePublishWaitEv+0x128>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   d8916:	2201      	movs	r2, #1
   d8918:	4611      	mov	r1, r2
   d891a:	4628      	mov	r0, r5
   d891c:	f7ff fe69 	bl	d85f2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8920:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   d8924:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   d8928:	f7fb fbb5 	bl	d4096 <_Znwj>
   d892c:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   d8930:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   d8934:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   d8936:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   d893a:	f853 3c04 	ldr.w	r3, [r3, #-4]
   d893e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8942:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d8946:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   d894a:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   d894e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	    _Alloc_traits::construct(this->_M_impl,
   d8952:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8956:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   d895a:	e7bd      	b.n	d88d8 <_ZN17PublishQueuePosix16statePublishWaitEv+0xe0>
   d895c:	000dfc10 	.word	0x000dfc10
   d8960:	2003e260 	.word	0x2003e260
   d8964:	000dfc23 	.word	0x000dfc23
   d8968:	000d8301 	.word	0x000d8301
   d896c:	000dfc33 	.word	0x000dfc33
   d8970:	000dfc45 	.word	0x000dfc45
   d8974:	000dfba1 	.word	0x000dfba1

000d8978 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   d8978:	4b01      	ldr	r3, [pc, #4]	; (d8980 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   d897a:	4a02      	ldr	r2, [pc, #8]	; (d8984 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   d897c:	601a      	str	r2, [r3, #0]
}
   d897e:	4770      	bx	lr
   d8980:	2003e260 	.word	0x2003e260
   d8984:	000dfc6c 	.word	0x000dfc6c

000d8988 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d8988:	b510      	push	{r4, lr}
   d898a:	4b07      	ldr	r3, [pc, #28]	; (d89a8 <_ZN17PublishQueuePosixD1Ev+0x20>)
   d898c:	4604      	mov	r4, r0
   d898e:	f840 3bc0 	str.w	r3, [r0], #192
   d8992:	f7fd fcf3 	bl	d637c <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d8996:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d899a:	f7ff fe17 	bl	d85cc <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   d899e:	1d20      	adds	r0, r4, #4
   d89a0:	f001 fc18 	bl	da1d4 <_ZN14SequentialFileD1Ev>
}
   d89a4:	4620      	mov	r0, r4
   d89a6:	bd10      	pop	{r4, pc}
   d89a8:	000dfc80 	.word	0x000dfc80

000d89ac <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d89ac:	b510      	push	{r4, lr}
   d89ae:	4604      	mov	r4, r0
}
   d89b0:	f7ff ffea 	bl	d8988 <_ZN17PublishQueuePosixD1Ev>
   d89b4:	4620      	mov	r0, r4
   d89b6:	21d0      	movs	r1, #208	; 0xd0
   d89b8:	f005 fb1e 	bl	ddff8 <_ZdlPvj>
   d89bc:	4620      	mov	r0, r4
   d89be:	bd10      	pop	{r4, pc}

000d89c0 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   d89c0:	6001      	str	r1, [r0, #0]
   d89c2:	7102      	strb	r2, [r0, #4]
{
}
   d89c4:	4770      	bx	lr

000d89c6 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   d89c6:	6800      	ldr	r0, [r0, #0]
   d89c8:	6803      	ldr	r3, [r0, #0]
   d89ca:	68db      	ldr	r3, [r3, #12]
   d89cc:	4718      	bx	r3

000d89ce <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   d89ce:	6800      	ldr	r0, [r0, #0]
   d89d0:	6803      	ldr	r3, [r0, #0]
   d89d2:	6a1b      	ldr	r3, [r3, #32]
   d89d4:	4718      	bx	r3

000d89d6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   d89d6:	6800      	ldr	r0, [r0, #0]
   d89d8:	6803      	ldr	r3, [r0, #0]
   d89da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d89dc:	4718      	bx	r3

000d89de <_ZN10RHDatagram11setHeaderToEh>:
    return _thisAddress;
}

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   d89de:	6800      	ldr	r0, [r0, #0]
   d89e0:	6803      	ldr	r3, [r0, #0]
   d89e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d89e4:	4718      	bx	r3

000d89e6 <_ZN10RHDatagram6sendtoEPhhh>:
{
   d89e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d89e8:	4605      	mov	r5, r0
   d89ea:	460c      	mov	r4, r1
    setHeaderTo(address);
   d89ec:	4619      	mov	r1, r3
{
   d89ee:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   d89f0:	f7ff fff5 	bl	d89de <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   d89f4:	6828      	ldr	r0, [r5, #0]
   d89f6:	9a01      	ldr	r2, [sp, #4]
   d89f8:	6803      	ldr	r3, [r0, #0]
   d89fa:	695b      	ldr	r3, [r3, #20]
   d89fc:	4621      	mov	r1, r4
}
   d89fe:	b003      	add	sp, #12
   d8a00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   d8a04:	4718      	bx	r3

000d8a06 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   d8a06:	6800      	ldr	r0, [r0, #0]
   d8a08:	6803      	ldr	r3, [r0, #0]
   d8a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8a0c:	4718      	bx	r3

000d8a0e <_ZN10RHDatagram14setThisAddressEh>:
{
   d8a0e:	b538      	push	{r3, r4, r5, lr}
   d8a10:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   d8a12:	6800      	ldr	r0, [r0, #0]
   d8a14:	6803      	ldr	r3, [r0, #0]
{
   d8a16:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   d8a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8a1a:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   d8a1c:	4629      	mov	r1, r5
   d8a1e:	4620      	mov	r0, r4
   d8a20:	f7ff fff1 	bl	d8a06 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   d8a24:	7125      	strb	r5, [r4, #4]
}
   d8a26:	bd38      	pop	{r3, r4, r5, pc}

000d8a28 <_ZN10RHDatagram4initEv>:
{
   d8a28:	b538      	push	{r3, r4, r5, lr}
   d8a2a:	4604      	mov	r4, r0
    bool ret = _driver.init();
   d8a2c:	6800      	ldr	r0, [r0, #0]
   d8a2e:	6803      	ldr	r3, [r0, #0]
   d8a30:	689b      	ldr	r3, [r3, #8]
   d8a32:	4798      	blx	r3
    if (ret)
   d8a34:	4605      	mov	r5, r0
   d8a36:	b118      	cbz	r0, d8a40 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   d8a38:	7921      	ldrb	r1, [r4, #4]
   d8a3a:	4620      	mov	r0, r4
   d8a3c:	f7ff ffe7 	bl	d8a0e <_ZN10RHDatagram14setThisAddressEh>
}
   d8a40:	4628      	mov	r0, r5
   d8a42:	bd38      	pop	{r3, r4, r5, pc}

000d8a44 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   d8a44:	6800      	ldr	r0, [r0, #0]
   d8a46:	6803      	ldr	r3, [r0, #0]
   d8a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8a4a:	4718      	bx	r3

000d8a4c <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   d8a4c:	6800      	ldr	r0, [r0, #0]
   d8a4e:	6803      	ldr	r3, [r0, #0]
   d8a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8a52:	4718      	bx	r3

000d8a54 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   d8a54:	6800      	ldr	r0, [r0, #0]
   d8a56:	6803      	ldr	r3, [r0, #0]
   d8a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8a5a:	4718      	bx	r3

000d8a5c <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   d8a5c:	6800      	ldr	r0, [r0, #0]
   d8a5e:	6803      	ldr	r3, [r0, #0]
   d8a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8a62:	4718      	bx	r3

000d8a64 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   d8a64:	6800      	ldr	r0, [r0, #0]
   d8a66:	6803      	ldr	r3, [r0, #0]
   d8a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8a6a:	4718      	bx	r3

000d8a6c <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   d8a6c:	6800      	ldr	r0, [r0, #0]
   d8a6e:	6803      	ldr	r3, [r0, #0]
   d8a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8a72:	4718      	bx	r3

000d8a74 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   d8a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8a78:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   d8a7a:	6800      	ldr	r0, [r0, #0]
{
   d8a7c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   d8a7e:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   d8a80:	6803      	ldr	r3, [r0, #0]
   d8a82:	691b      	ldr	r3, [r3, #16]
{
   d8a84:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   d8a88:	4798      	blx	r3
   d8a8a:	4605      	mov	r5, r0
   d8a8c:	b1c8      	cbz	r0, d8ac2 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   d8a8e:	b11e      	cbz	r6, d8a98 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   d8a90:	4620      	mov	r0, r4
   d8a92:	f7ff ffe3 	bl	d8a5c <_ZN10RHDatagram10headerFromEv>
   d8a96:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   d8a98:	f1b9 0f00 	cmp.w	r9, #0
   d8a9c:	d004      	beq.n	d8aa8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   d8a9e:	4620      	mov	r0, r4
   d8aa0:	f7ff ffd8 	bl	d8a54 <_ZN10RHDatagram8headerToEv>
   d8aa4:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   d8aa8:	f1b8 0f00 	cmp.w	r8, #0
   d8aac:	d004      	beq.n	d8ab8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   d8aae:	4620      	mov	r0, r4
   d8ab0:	f7ff ffd8 	bl	d8a64 <_ZN10RHDatagram8headerIdEv>
   d8ab4:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   d8ab8:	b11f      	cbz	r7, d8ac2 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   d8aba:	4620      	mov	r0, r4
   d8abc:	f7ff ffd6 	bl	d8a6c <_ZN10RHDatagram11headerFlagsEv>
   d8ac0:	7038      	strb	r0, [r7, #0]
}
   d8ac2:	4628      	mov	r0, r5
   d8ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d8ac8 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   d8ac8:	2001      	movs	r0, #1
   d8aca:	4770      	bx	lr

000d8acc <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   d8acc:	7903      	ldrb	r3, [r0, #4]
   d8ace:	2b03      	cmp	r3, #3
   d8ad0:	d0fc      	beq.n	d8acc <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   d8ad2:	2001      	movs	r0, #1
   d8ad4:	4770      	bx	lr

000d8ad6 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   d8ad6:	2000      	movs	r0, #0
   d8ad8:	4770      	bx	lr

000d8ada <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   d8ada:	7181      	strb	r1, [r0, #6]
}
   d8adc:	4770      	bx	lr

000d8ade <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   d8ade:	7141      	strb	r1, [r0, #5]
}
   d8ae0:	4770      	bx	lr

000d8ae2 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   d8ae2:	72c1      	strb	r1, [r0, #11]
}
   d8ae4:	4770      	bx	lr

000d8ae6 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   d8ae6:	7301      	strb	r1, [r0, #12]
}
   d8ae8:	4770      	bx	lr

000d8aea <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   d8aea:	7341      	strb	r1, [r0, #13]
}
   d8aec:	4770      	bx	lr

000d8aee <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   d8aee:	7b83      	ldrb	r3, [r0, #14]
   d8af0:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   d8af4:	4311      	orrs	r1, r2
   d8af6:	7381      	strb	r1, [r0, #14]
}
   d8af8:	4770      	bx	lr

000d8afa <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   d8afa:	79c0      	ldrb	r0, [r0, #7]
}
   d8afc:	4770      	bx	lr

000d8afe <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   d8afe:	7a00      	ldrb	r0, [r0, #8]
}
   d8b00:	4770      	bx	lr

000d8b02 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   d8b02:	7a40      	ldrb	r0, [r0, #9]
}
   d8b04:	4770      	bx	lr

000d8b06 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   d8b06:	7a80      	ldrb	r0, [r0, #10]
}
   d8b08:	4770      	bx	lr

000d8b0a <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   d8b0a:	8a00      	ldrh	r0, [r0, #16]
}
   d8b0c:	b200      	sxth	r0, r0
   d8b0e:	4770      	bx	lr

000d8b10 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   d8b10:	7900      	ldrb	r0, [r0, #4]
}
   d8b12:	4770      	bx	lr

000d8b14 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   d8b14:	7101      	strb	r1, [r0, #4]
}
   d8b16:	4770      	bx	lr

000d8b18 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   d8b18:	8a40      	ldrh	r0, [r0, #18]
}
   d8b1a:	b280      	uxth	r0, r0
   d8b1c:	4770      	bx	lr

000d8b1e <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   d8b1e:	8a80      	ldrh	r0, [r0, #20]
}
   d8b20:	b280      	uxth	r0, r0
   d8b22:	4770      	bx	lr

000d8b24 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   d8b24:	8ac0      	ldrh	r0, [r0, #22]
}
   d8b26:	b280      	uxth	r0, r0
   d8b28:	4770      	bx	lr

000d8b2a <_ZN15RHGenericDriver13waitAvailableEt>:
{
   d8b2a:	b538      	push	{r3, r4, r5, lr}
   d8b2c:	4605      	mov	r5, r0
   d8b2e:	460c      	mov	r4, r1
    while (!available())
   d8b30:	682b      	ldr	r3, [r5, #0]
   d8b32:	4628      	mov	r0, r5
   d8b34:	68db      	ldr	r3, [r3, #12]
   d8b36:	4798      	blx	r3
   d8b38:	b928      	cbnz	r0, d8b46 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   d8b3a:	2c00      	cmp	r4, #0
   d8b3c:	d0f8      	beq.n	d8b30 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   d8b3e:	4620      	mov	r0, r4
   d8b40:	f002 f976 	bl	dae30 <delay>
   d8b44:	e7f4      	b.n	d8b30 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   d8b46:	bd38      	pop	{r3, r4, r5, pc}

000d8b48 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   d8b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8b4a:	4605      	mov	r5, r0
   d8b4c:	460f      	mov	r7, r1
   d8b4e:	4614      	mov	r4, r2
   d8b50:	f001 fd74 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
   d8b54:	4606      	mov	r6, r0
   d8b56:	f001 fd71 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d8b5a:	1b80      	subs	r0, r0, r6
   d8b5c:	42b8      	cmp	r0, r7
   d8b5e:	d20a      	bcs.n	d8b76 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   d8b60:	682b      	ldr	r3, [r5, #0]
   d8b62:	4628      	mov	r0, r5
   d8b64:	68db      	ldr	r3, [r3, #12]
   d8b66:	4798      	blx	r3
   d8b68:	b930      	cbnz	r0, d8b78 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   d8b6a:	2c00      	cmp	r4, #0
   d8b6c:	d0f3      	beq.n	d8b56 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   d8b6e:	4620      	mov	r0, r4
   d8b70:	f002 f95e 	bl	dae30 <delay>
   d8b74:	e7ef      	b.n	d8b56 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   d8b76:	2000      	movs	r0, #0
}
   d8b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8b7a <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   d8b7a:	b570      	push	{r4, r5, r6, lr}
   d8b7c:	4604      	mov	r4, r0
   d8b7e:	460e      	mov	r6, r1
   d8b80:	f001 fd5c 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
   d8b84:	4605      	mov	r5, r0
   d8b86:	f001 fd59 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d8b8a:	1b40      	subs	r0, r0, r5
   d8b8c:	42b0      	cmp	r0, r6
   d8b8e:	d204      	bcs.n	d8b9a <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   d8b90:	7923      	ldrb	r3, [r4, #4]
   d8b92:	2b03      	cmp	r3, #3
   d8b94:	d0f7      	beq.n	d8b86 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   d8b96:	2001      	movs	r0, #1
}
   d8b98:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d8b9a:	2000      	movs	r0, #0
   d8b9c:	e7fc      	b.n	d8b98 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000d8b9e <_ZN15RHGenericDriver7waitCADEv>:
{
   d8b9e:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   d8ba0:	69c3      	ldr	r3, [r0, #28]
{
   d8ba2:	4604      	mov	r4, r0
    if (!_cad_timeout)
   d8ba4:	b1b3      	cbz	r3, d8bd4 <_ZN15RHGenericDriver7waitCADEv+0x36>
   d8ba6:	f001 fd49 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d8baa:	2664      	movs	r6, #100	; 0x64
   d8bac:	4605      	mov	r5, r0
    while (isChannelActive())
   d8bae:	6823      	ldr	r3, [r4, #0]
   d8bb0:	4620      	mov	r0, r4
   d8bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8bb4:	4798      	blx	r3
   d8bb6:	b168      	cbz	r0, d8bd4 <_ZN15RHGenericDriver7waitCADEv+0x36>
   d8bb8:	f001 fd40 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   d8bbc:	69e3      	ldr	r3, [r4, #28]
   d8bbe:	1b40      	subs	r0, r0, r5
   d8bc0:	4298      	cmp	r0, r3
   d8bc2:	d809      	bhi.n	d8bd8 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d8bc4:	210a      	movs	r1, #10
   d8bc6:	2001      	movs	r0, #1
   d8bc8:	f004 fb1c 	bl	dd204 <_Z6randomii>
   d8bcc:	4370      	muls	r0, r6
   d8bce:	f002 f92f 	bl	dae30 <delay>
    while (isChannelActive())
   d8bd2:	e7ec      	b.n	d8bae <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   d8bd4:	2001      	movs	r0, #1
}
   d8bd6:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   d8bd8:	2000      	movs	r0, #0
   d8bda:	e7fc      	b.n	d8bd6 <_ZN15RHGenericDriver7waitCADEv+0x38>

000d8bdc <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   d8bdc:	4a06      	ldr	r2, [pc, #24]	; (d8bf8 <_ZN15RHGenericDriverC1Ev+0x1c>)
   d8bde:	6002      	str	r2, [r0, #0]
   d8be0:	21ff      	movs	r1, #255	; 0xff
   d8be2:	2200      	movs	r2, #0
   d8be4:	7102      	strb	r2, [r0, #4]
   d8be6:	7141      	strb	r1, [r0, #5]
   d8be8:	8242      	strh	r2, [r0, #18]
   d8bea:	72c1      	strb	r1, [r0, #11]
   d8bec:	8282      	strh	r2, [r0, #20]
   d8bee:	8181      	strh	r1, [r0, #12]
   d8bf0:	7382      	strb	r2, [r0, #14]
   d8bf2:	82c2      	strh	r2, [r0, #22]
   d8bf4:	61c2      	str	r2, [r0, #28]
}
   d8bf6:	4770      	bx	lr
   d8bf8:	000dfc94 	.word	0x000dfc94

000d8bfc <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   d8bfc:	4770      	bx	lr

000d8bfe <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   d8bfe:	4770      	bx	lr

000d8c00 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   d8c00:	4770      	bx	lr

000d8c02 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   d8c02:	4770      	bx	lr

000d8c04 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   d8c04:	4770      	bx	lr

000d8c06 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   d8c06:	7141      	strb	r1, [r0, #5]
}
   d8c08:	4770      	bx	lr

000d8c0a <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   d8c0a:	7181      	strb	r1, [r0, #6]
}
   d8c0c:	4770      	bx	lr

000d8c0e <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   d8c0e:	7101      	strb	r1, [r0, #4]
}
   d8c10:	4770      	bx	lr
	...

000d8c14 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d8c14:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   d8c16:	4d03      	ldr	r5, [pc, #12]	; (d8c24 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   d8c18:	6005      	str	r5, [r0, #0]
   d8c1a:	7101      	strb	r1, [r0, #4]
   d8c1c:	7142      	strb	r2, [r0, #5]
   d8c1e:	7183      	strb	r3, [r0, #6]
}
   d8c20:	bd30      	pop	{r4, r5, pc}
   d8c22:	bf00      	nop
   d8c24:	000dfd14 	.word	0x000dfd14

000d8c28 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d8c28:	4770      	bx	lr

000d8c2a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d8c2a:	b510      	push	{r4, lr}
  }
   d8c2c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d8c2e:	4604      	mov	r4, r0
  }
   d8c30:	f005 f9e2 	bl	ddff8 <_ZdlPvj>
   d8c34:	4620      	mov	r0, r4
   d8c36:	bd10      	pop	{r4, pc}

000d8c38 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d8c38:	b40e      	push	{r1, r2, r3}
   d8c3a:	b503      	push	{r0, r1, lr}
   d8c3c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d8c3e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d8c40:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d8c44:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d8c46:	f004 faa1 	bl	dd18c <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d8c4a:	b002      	add	sp, #8
   d8c4c:	f85d eb04 	ldr.w	lr, [sp], #4
   d8c50:	b003      	add	sp, #12
   d8c52:	4770      	bx	lr

000d8c54 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d8c54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8c56:	4604      	mov	r4, r0
   d8c58:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d8c5a:	7922      	ldrb	r2, [r4, #4]
   d8c5c:	68a3      	ldr	r3, [r4, #8]
   d8c5e:	b132      	cbz	r2, d8c6e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d8c60:	b9a3      	cbnz	r3, d8c8c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d8c62:	490b      	ldr	r1, [pc, #44]	; (d8c90 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d8c64:	b002      	add	sp, #8
   d8c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d8c6a:	f004 ba5e 	b.w	dd12a <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d8c6e:	4a09      	ldr	r2, [pc, #36]	; (d8c94 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d8c70:	7b26      	ldrb	r6, [r4, #12]
   d8c72:	4d09      	ldr	r5, [pc, #36]	; (d8c98 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d8c74:	4909      	ldr	r1, [pc, #36]	; (d8c9c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d8c76:	7b64      	ldrb	r4, [r4, #13]
   d8c78:	2e01      	cmp	r6, #1
   d8c7a:	bf18      	it	ne
   d8c7c:	4629      	movne	r1, r5
   d8c7e:	e9cd 1400 	strd	r1, r4, [sp]
   d8c82:	4907      	ldr	r1, [pc, #28]	; (d8ca0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d8c84:	f7ff ffd8 	bl	d8c38 <_ZN5Print6printfEPKcz>
  }
   d8c88:	b002      	add	sp, #8
   d8c8a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d8c8c:	4a05      	ldr	r2, [pc, #20]	; (d8ca4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d8c8e:	e7ef      	b.n	d8c70 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d8c90:	000dfd51 	.word	0x000dfd51
   d8c94:	000e0190 	.word	0x000e0190
   d8c98:	000dfd4d 	.word	0x000dfd4d
   d8c9c:	000dfd49 	.word	0x000dfd49
   d8ca0:	000dfd67 	.word	0x000dfd67
   d8ca4:	000dfd40 	.word	0x000dfd40

000d8ca8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d8ca8:	b510      	push	{r4, lr}
   d8caa:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   d8cac:	f7ff ffb2 	bl	d8c14 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   d8cb0:	4b05      	ldr	r3, [pc, #20]	; (d8cc8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   d8cb2:	6023      	str	r3, [r4, #0]
  {
   d8cb4:	4b05      	ldr	r3, [pc, #20]	; (d8ccc <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   d8cb6:	60a3      	str	r3, [r4, #8]
   d8cb8:	2301      	movs	r3, #1
   d8cba:	7323      	strb	r3, [r4, #12]
   d8cbc:	2300      	movs	r3, #0
   d8cbe:	6123      	str	r3, [r4, #16]
   d8cc0:	82a3      	strh	r3, [r4, #20]
{
}
   d8cc2:	4620      	mov	r0, r4
   d8cc4:	bd10      	pop	{r4, pc}
   d8cc6:	bf00      	nop
   d8cc8:	000dfda0 	.word	0x000dfda0
   d8ccc:	000dfd8c 	.word	0x000dfd8c

000d8cd0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d8cd0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d8cd2:	4c0b      	ldr	r4, [pc, #44]	; (d8d00 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d8cd4:	7821      	ldrb	r1, [r4, #0]
   d8cd6:	f3bf 8f5b 	dmb	ish
   d8cda:	f011 0101 	ands.w	r1, r1, #1
   d8cde:	d10b      	bne.n	d8cf8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d8ce0:	4620      	mov	r0, r4
   d8ce2:	9101      	str	r1, [sp, #4]
   d8ce4:	f7fb f9e8 	bl	d40b8 <__cxa_guard_acquire>
   d8ce8:	9901      	ldr	r1, [sp, #4]
   d8cea:	b128      	cbz	r0, d8cf8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d8cec:	4805      	ldr	r0, [pc, #20]	; (d8d04 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d8cee:	f004 fa9f 	bl	dd230 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8cf2:	4620      	mov	r0, r4
   d8cf4:	f7fb f9e5 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d8cf8:	4802      	ldr	r0, [pc, #8]	; (d8d04 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d8cfa:	b002      	add	sp, #8
   d8cfc:	bd10      	pop	{r4, pc}
   d8cfe:	bf00      	nop
   d8d00:	2003e268 	.word	0x2003e268
   d8d04:	2003e26c 	.word	0x2003e26c

000d8d08 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   d8d08:	b507      	push	{r0, r1, r2, lr}
   d8d0a:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d8d0c:	f7ff ffe0 	bl	d8cd0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8d10:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   d8d12:	b003      	add	sp, #12
   d8d14:	f85d eb04 	ldr.w	lr, [sp], #4
   d8d18:	f004 bb3c 	b.w	dd394 <_ZN8SPIClass8transferEh>

000d8d1c <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   d8d1c:	b508      	push	{r3, lr}
    }
    void transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   d8d1e:	f7ff ffd7 	bl	d8cd0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   d8d22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d8d26:	f004 bb3b 	b.w	dd3a0 <_ZN8SPIClass15attachInterruptEv>

000d8d2a <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   d8d2a:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   d8d2c:	f7ff ffd0 	bl	d8cd0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   d8d30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d8d34:	f004 bb35 	b.w	dd3a2 <_ZN8SPIClass15detachInterruptEv>

000d8d38 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   d8d38:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   d8d3a:	7903      	ldrb	r3, [r0, #4]
   d8d3c:	2b04      	cmp	r3, #4
   d8d3e:	d020      	beq.n	d8d82 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   d8d40:	2b03      	cmp	r3, #3
   d8d42:	d020      	beq.n	d8d86 <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   d8d44:	2b02      	cmp	r3, #2
   d8d46:	d020      	beq.n	d8d8a <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   d8d48:	4a11      	ldr	r2, [pc, #68]	; (d8d90 <_ZN13RHHardwareSPI5beginEv+0x58>)
   d8d4a:	4912      	ldr	r1, [pc, #72]	; (d8d94 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   d8d4c:	2b01      	cmp	r3, #1
   d8d4e:	bf18      	it	ne
   d8d50:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   d8d52:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   d8d54:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   d8d56:	3901      	subs	r1, #1
   d8d58:	bf18      	it	ne
   d8d5a:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   d8d5c:	b133      	cbz	r3, d8d6c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   d8d5e:	2b01      	cmp	r3, #1
   d8d60:	d004      	beq.n	d8d6c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   d8d62:	2b02      	cmp	r3, #2
   d8d64:	d002      	beq.n	d8d6c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   d8d66:	2b03      	cmp	r3, #3
   d8d68:	bf18      	it	ne
   d8d6a:	2300      	movne	r3, #0
class SPISettings : public Printable {
   d8d6c:	2400      	movs	r4, #0
   d8d6e:	7304      	strb	r4, [r0, #12]
   d8d70:	6102      	str	r2, [r0, #16]
   d8d72:	7501      	strb	r1, [r0, #20]
   d8d74:	7543      	strb	r3, [r0, #21]
        instance().begin();
   d8d76:	f7ff ffab 	bl	d8cd0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   d8d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8d7e:	f004 ba61 	b.w	dd244 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   d8d82:	4a05      	ldr	r2, [pc, #20]	; (d8d98 <_ZN13RHHardwareSPI5beginEv+0x60>)
   d8d84:	e7e5      	b.n	d8d52 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   d8d86:	4a05      	ldr	r2, [pc, #20]	; (d8d9c <_ZN13RHHardwareSPI5beginEv+0x64>)
   d8d88:	e7e3      	b.n	d8d52 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   d8d8a:	4a05      	ldr	r2, [pc, #20]	; (d8da0 <_ZN13RHHardwareSPI5beginEv+0x68>)
   d8d8c:	e7e1      	b.n	d8d52 <_ZN13RHHardwareSPI5beginEv+0x1a>
   d8d8e:	bf00      	nop
   d8d90:	001e8480 	.word	0x001e8480
   d8d94:	000f4240 	.word	0x000f4240
   d8d98:	00f42400 	.word	0x00f42400
   d8d9c:	007a1200 	.word	0x007a1200
   d8da0:	003d0900 	.word	0x003d0900

000d8da4 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   d8da4:	b508      	push	{r3, lr}
        instance().end();
   d8da6:	f7ff ff93 	bl	d8cd0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   d8daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d8dae:	f004 ba5a 	b.w	dd266 <_ZN8SPIClass3endEv>

000d8db2 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   d8db2:	b510      	push	{r4, lr}
   d8db4:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d8db6:	f7ff ff8b 	bl	d8cd0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8dba:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   d8dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8dc2:	f004 ba79 	b.w	dd2b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d8dc6 <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   d8dc6:	b508      	push	{r3, lr}
        instance().endTransaction();
   d8dc8:	f7ff ff82 	bl	d8cd0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   d8dcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d8dd0:	f004 ba58 	b.w	dd284 <_ZN8SPIClass14endTransactionEv>

000d8dd4 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   d8dd4:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   d8dd6:	f7ff ff7b 	bl	d8cd0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   d8dda:	bd08      	pop	{r3, pc}

000d8ddc <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   d8ddc:	2300      	movs	r3, #0
   d8dde:	4802      	ldr	r0, [pc, #8]	; (d8de8 <_GLOBAL__sub_I_hardware_spi+0xc>)
   d8de0:	461a      	mov	r2, r3
   d8de2:	4619      	mov	r1, r3
   d8de4:	f7ff bf60 	b.w	d8ca8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   d8de8:	2003e274 	.word	0x2003e274

000d8dec <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   d8dec:	2a01      	cmp	r2, #1
   d8dee:	d105      	bne.n	d8dfc <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   d8df0:	7a00      	ldrb	r0, [r0, #8]
   d8df2:	780b      	ldrb	r3, [r1, #0]
   d8df4:	1a1b      	subs	r3, r3, r0
   d8df6:	4258      	negs	r0, r3
   d8df8:	4158      	adcs	r0, r3
   d8dfa:	4770      	bx	lr
   d8dfc:	2000      	movs	r0, #0
}
   d8dfe:	4770      	bx	lr

000d8e00 <_ZN6RHMesh5doArpEh>:
{
   d8e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d8e04:	4d26      	ldr	r5, [pc, #152]	; (d8ea0 <_ZN6RHMesh5doArpEh+0xa0>)
   d8e06:	2301      	movs	r3, #1
{
   d8e08:	b087      	sub	sp, #28
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d8e0a:	702b      	strb	r3, [r5, #0]
    p->destlen = 1; 
   d8e0c:	706b      	strb	r3, [r5, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d8e0e:	2300      	movs	r3, #0
{
   d8e10:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   d8e12:	70a9      	strb	r1, [r5, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d8e14:	9300      	str	r3, [sp, #0]
   d8e16:	2203      	movs	r2, #3
   d8e18:	23ff      	movs	r3, #255	; 0xff
   d8e1a:	4629      	mov	r1, r5
{
   d8e1c:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d8e1e:	f000 fbe7 	bl	d95f0 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   d8e22:	b120      	cbz	r0, d8e2e <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   d8e24:	2400      	movs	r4, #0
}
   d8e26:	4620      	mov	r0, r4
   d8e28:	b007      	add	sp, #28
   d8e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   d8e2e:	23fa      	movs	r3, #250	; 0xfa
   d8e30:	f88d 3017 	strb.w	r3, [sp, #23]
   d8e34:	f001 fc02 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   d8e38:	f106 0904 	add.w	r9, r6, #4
   d8e3c:	4680      	mov	r8, r0
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d8e3e:	46aa      	mov	sl, r5
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   d8e40:	f508 647a 	add.w	r4, r8, #4000	; 0xfa0
   d8e44:	f001 fbfa 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
   d8e48:	1a20      	subs	r0, r4, r0
   d8e4a:	2800      	cmp	r0, #0
   d8e4c:	ddea      	ble.n	d8e24 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   d8e4e:	b281      	uxth	r1, r0
   d8e50:	2200      	movs	r2, #0
   d8e52:	4648      	mov	r0, r9
   d8e54:	f7ff fdbf 	bl	d89d6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d8e58:	2800      	cmp	r0, #0
   d8e5a:	d0f3      	beq.n	d8e44 <_ZN6RHMesh5doArpEh+0x44>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d8e5c:	2300      	movs	r3, #0
   d8e5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d8e62:	e9cd 3300 	strd	r3, r3, [sp]
   d8e66:	f10d 0217 	add.w	r2, sp, #23
   d8e6a:	4651      	mov	r1, sl
   d8e6c:	4630      	mov	r0, r6
   d8e6e:	f000 fbc9 	bl	d9604 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d8e72:	4604      	mov	r4, r0
   d8e74:	2800      	cmp	r0, #0
   d8e76:	d0e3      	beq.n	d8e40 <_ZN6RHMesh5doArpEh+0x40>
		if (   messageLen > 1
   d8e78:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d8e7c:	2b01      	cmp	r3, #1
   d8e7e:	d9df      	bls.n	d8e40 <_ZN6RHMesh5doArpEh+0x40>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d8e80:	f895 b000 	ldrb.w	fp, [r5]
   d8e84:	f1bb 0f02 	cmp.w	fp, #2
   d8e88:	d1da      	bne.n	d8e40 <_ZN6RHMesh5doArpEh+0x40>
		    addRouteTo(address, headerFrom());
   d8e8a:	4648      	mov	r0, r9
   d8e8c:	f7ff fde6 	bl	d8a5c <_ZN10RHDatagram10headerFromEv>
   d8e90:	465b      	mov	r3, fp
   d8e92:	4602      	mov	r2, r0
   d8e94:	4639      	mov	r1, r7
   d8e96:	4630      	mov	r0, r6
   d8e98:	f000 fb21 	bl	d94de <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   d8e9c:	e7c3      	b.n	d8e26 <_ZN6RHMesh5doArpEh+0x26>
   d8e9e:	bf00      	nop
   d8ea0:	2003e28c 	.word	0x2003e28c

000d8ea4 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   d8ea4:	2a01      	cmp	r2, #1
{
   d8ea6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d8eaa:	4607      	mov	r7, r0
   d8eac:	460e      	mov	r6, r1
   d8eae:	4614      	mov	r4, r2
    if (   messageLen > 1 
   d8eb0:	d93b      	bls.n	d8f2a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d8eb2:	794d      	ldrb	r5, [r1, #5]
   d8eb4:	2d02      	cmp	r5, #2
   d8eb6:	d130      	bne.n	d8f1a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   d8eb8:	f100 0804 	add.w	r8, r0, #4
   d8ebc:	79c9      	ldrb	r1, [r1, #7]
   d8ebe:	9101      	str	r1, [sp, #4]
   d8ec0:	4640      	mov	r0, r8
   d8ec2:	f7ff fdcb 	bl	d8a5c <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d8ec6:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   d8ec8:	462b      	mov	r3, r5
   d8eca:	4602      	mov	r2, r0
   d8ecc:	9901      	ldr	r1, [sp, #4]
   d8ece:	4638      	mov	r0, r7
   d8ed0:	f000 fb05 	bl	d94de <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d8ed4:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   d8ed6:	f106 0308 	add.w	r3, r6, #8
   d8eda:	2400      	movs	r4, #0
   d8edc:	4622      	mov	r2, r4
   d8ede:	4295      	cmp	r5, r2
   d8ee0:	f104 0401 	add.w	r4, r4, #1
   d8ee4:	b2e4      	uxtb	r4, r4
   d8ee6:	d904      	bls.n	d8ef2 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   d8ee8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8eec:	7a39      	ldrb	r1, [r7, #8]
   d8eee:	4291      	cmp	r1, r2
   d8ef0:	d1f4      	bne.n	d8edc <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   d8ef2:	f104 0108 	add.w	r1, r4, #8
   d8ef6:	440e      	add	r6, r1
	while (i < numRoutes)
   d8ef8:	42a5      	cmp	r5, r4
   d8efa:	d916      	bls.n	d8f2a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   d8efc:	f816 1b01 	ldrb.w	r1, [r6], #1
   d8f00:	9101      	str	r1, [sp, #4]
   d8f02:	4640      	mov	r0, r8
   d8f04:	f7ff fdaa 	bl	d8a5c <_ZN10RHDatagram10headerFromEv>
   d8f08:	3401      	adds	r4, #1
   d8f0a:	4602      	mov	r2, r0
   d8f0c:	9901      	ldr	r1, [sp, #4]
   d8f0e:	2302      	movs	r3, #2
   d8f10:	4638      	mov	r0, r7
   d8f12:	b2e4      	uxtb	r4, r4
   d8f14:	f000 fae3 	bl	d94de <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   d8f18:	e7ee      	b.n	d8ef8 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   d8f1a:	2d03      	cmp	r5, #3
   d8f1c:	d105      	bne.n	d8f2a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   d8f1e:	7989      	ldrb	r1, [r1, #6]
}
   d8f20:	b002      	add	sp, #8
   d8f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   d8f26:	f000 bac3 	b.w	d94b0 <_ZN8RHRouter13deleteRouteToEh>
}
   d8f2a:	b002      	add	sp, #8
   d8f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8f30 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   d8f30:	b510      	push	{r4, lr}
   d8f32:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   d8f34:	f000 fb14 	bl	d9560 <_ZN8RHRouterC1ER15RHGenericDriverh>
   d8f38:	4b01      	ldr	r3, [pc, #4]	; (d8f40 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   d8f3a:	6023      	str	r3, [r4, #0]
}
   d8f3c:	4620      	mov	r0, r4
   d8f3e:	bd10      	pop	{r4, pc}
   d8f40:	000dfdd4 	.word	0x000dfdd4

000d8f44 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   d8f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d8f48:	2af9      	cmp	r2, #249	; 0xf9
{
   d8f4a:	f89d 9020 	ldrb.w	r9, [sp, #32]
   d8f4e:	4606      	mov	r6, r0
   d8f50:	460f      	mov	r7, r1
   d8f52:	4614      	mov	r4, r2
   d8f54:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d8f56:	d825      	bhi.n	d8fa4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   d8f58:	2bff      	cmp	r3, #255	; 0xff
   d8f5a:	d114      	bne.n	d8f86 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d8f5c:	f8df 8048 	ldr.w	r8, [pc, #72]	; d8fa8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   d8f60:	4640      	mov	r0, r8
   d8f62:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   d8f64:	4622      	mov	r2, r4
   d8f66:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d8f68:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   d8f6c:	f005 fcd0 	bl	de910 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d8f70:	1c62      	adds	r2, r4, #1
   d8f72:	f8cd 9020 	str.w	r9, [sp, #32]
   d8f76:	462b      	mov	r3, r5
   d8f78:	4641      	mov	r1, r8
   d8f7a:	4630      	mov	r0, r6
   d8f7c:	b2d2      	uxtb	r2, r2
}
   d8f7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d8f82:	f000 bb35 	b.w	d95f0 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   d8f86:	4619      	mov	r1, r3
   d8f88:	f000 fa4e 	bl	d9428 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   d8f8c:	2800      	cmp	r0, #0
   d8f8e:	d1e5      	bne.n	d8f5c <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   d8f90:	6833      	ldr	r3, [r6, #0]
   d8f92:	4629      	mov	r1, r5
   d8f94:	689b      	ldr	r3, [r3, #8]
   d8f96:	4630      	mov	r0, r6
   d8f98:	4798      	blx	r3
   d8f9a:	2800      	cmp	r0, #0
   d8f9c:	d1de      	bne.n	d8f5c <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d8f9e:	2002      	movs	r0, #2
}
   d8fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   d8fa4:	2001      	movs	r0, #1
   d8fa6:	e7fb      	b.n	d8fa0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   d8fa8:	2003e28c 	.word	0x2003e28c

000d8fac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   d8fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8fb0:	b089      	sub	sp, #36	; 0x24
   d8fb2:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d8fb4:	23fa      	movs	r3, #250	; 0xfa
   d8fb6:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d8fba:	f10d 031f 	add.w	r3, sp, #31
   d8fbe:	9303      	str	r3, [sp, #12]
   d8fc0:	f10d 031e 	add.w	r3, sp, #30
   d8fc4:	f8df a180 	ldr.w	sl, [pc, #384]	; d9148 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>
   d8fc8:	9302      	str	r3, [sp, #8]
   d8fca:	f10d 031d 	add.w	r3, sp, #29
   d8fce:	9301      	str	r3, [sp, #4]
   d8fd0:	ab07      	add	r3, sp, #28
   d8fd2:	9300      	str	r3, [sp, #0]
{     
   d8fd4:	4689      	mov	r9, r1
   d8fd6:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d8fd8:	f10d 031b 	add.w	r3, sp, #27
   d8fdc:	f10d 021a 	add.w	r2, sp, #26
   d8fe0:	4651      	mov	r1, sl
{     
   d8fe2:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   d8fe6:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d8fe8:	f000 fb0c 	bl	d9604 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d8fec:	4656      	mov	r6, sl
   d8fee:	4604      	mov	r4, r0
   d8ff0:	b920      	cbnz	r0, d8ffc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x50>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   d8ff2:	2400      	movs	r4, #0
}
   d8ff4:	4620      	mov	r0, r4
   d8ff6:	b009      	add	sp, #36	; 0x24
   d8ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   d8ffc:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d9000:	b373      	cbz	r3, d9060 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   d9002:	f89a 2000 	ldrb.w	r2, [sl]
   d9006:	bb5a      	cbnz	r2, d9060 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    if (source) *source = _source;
   d9008:	f1b8 0f00 	cmp.w	r8, #0
   d900c:	d003      	beq.n	d9016 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x6a>
   d900e:	f89d 201b 	ldrb.w	r2, [sp, #27]
   d9012:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   d9016:	f1bb 0f00 	cmp.w	fp, #0
   d901a:	d003      	beq.n	d9024 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x78>
   d901c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d9020:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   d9024:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d9026:	b11a      	cbz	r2, d9030 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d9028:	9913      	ldr	r1, [sp, #76]	; 0x4c
   d902a:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d902e:	700a      	strb	r2, [r1, #0]
	    if (flags)  *flags  = _flags;
   d9030:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9032:	b11a      	cbz	r2, d903c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d9034:	9914      	ldr	r1, [sp, #80]	; 0x50
   d9036:	f89d 201e 	ldrb.w	r2, [sp, #30]
   d903a:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   d903c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   d903e:	b11a      	cbz	r2, d9048 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d9040:	9915      	ldr	r1, [sp, #84]	; 0x54
   d9042:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d9046:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   d9048:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   d904a:	493d      	ldr	r1, [pc, #244]	; (d9140 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   d904c:	3b01      	subs	r3, #1
   d904e:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d9050:	429a      	cmp	r2, r3
		*len = msgLen;
   d9052:	bf88      	it	hi
   d9054:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   d9056:	783a      	ldrb	r2, [r7, #0]
   d9058:	4648      	mov	r0, r9
   d905a:	f005 fc59 	bl	de910 <memcpy>
	    return true;
   d905e:	e7c9      	b.n	d8ff4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   d9060:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d9064:	2aff      	cmp	r2, #255	; 0xff
   d9066:	d1c4      	bne.n	d8ff2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && tmpMessageLen > 1 
   d9068:	2b01      	cmp	r3, #1
   d906a:	d9c2      	bls.n	d8ff2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   d906c:	7832      	ldrb	r2, [r6, #0]
   d906e:	2a01      	cmp	r2, #1
   d9070:	d1bf      	bne.n	d8ff2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    if (_source == _thisAddress)
   d9072:	7a2a      	ldrb	r2, [r5, #8]
   d9074:	f89d 401b 	ldrb.w	r4, [sp, #27]
   d9078:	42a2      	cmp	r2, r4
   d907a:	d0ba      	beq.n	d8ff2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   d907c:	1edf      	subs	r7, r3, #3
   d907e:	4931      	ldr	r1, [pc, #196]	; (d9144 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   d9080:	b2ff      	uxtb	r7, r7
   d9082:	2300      	movs	r3, #0
   d9084:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   d9088:	4547      	cmp	r7, r8
   d908a:	d906      	bls.n	d909a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xee>
		if (d->route[i] == _thisAddress)
   d908c:	f811 0b01 	ldrb.w	r0, [r1], #1
   d9090:	4282      	cmp	r2, r0
   d9092:	f103 0301 	add.w	r3, r3, #1
   d9096:	d1f5      	bne.n	d9084 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd8>
   d9098:	e7ab      	b.n	d8ff2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   d909a:	f105 0904 	add.w	r9, r5, #4
   d909e:	4648      	mov	r0, r9
   d90a0:	f7ff fcdc 	bl	d8a5c <_ZN10RHDatagram10headerFromEv>
   d90a4:	2302      	movs	r3, #2
   d90a6:	4602      	mov	r2, r0
   d90a8:	4621      	mov	r1, r4
   d90aa:	4628      	mov	r0, r5
   d90ac:	f000 fa17 	bl	d94de <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   d90b0:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d90b4:	b193      	cbz	r3, d90dc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x130>
   d90b6:	4c24      	ldr	r4, [pc, #144]	; (d9148 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
	        for (i = 0; i < numRoutes; i++)
   d90b8:	1ba3      	subs	r3, r4, r6
   d90ba:	b2db      	uxtb	r3, r3
   d90bc:	429f      	cmp	r7, r3
   d90be:	d90c      	bls.n	d90da <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12e>
		    addRouteTo(d->route[i], headerFrom());
   d90c0:	78e1      	ldrb	r1, [r4, #3]
   d90c2:	9105      	str	r1, [sp, #20]
   d90c4:	4648      	mov	r0, r9
   d90c6:	f7ff fcc9 	bl	d8a5c <_ZN10RHDatagram10headerFromEv>
   d90ca:	9905      	ldr	r1, [sp, #20]
   d90cc:	4602      	mov	r2, r0
   d90ce:	2302      	movs	r3, #2
   d90d0:	4628      	mov	r0, r5
   d90d2:	f000 fa04 	bl	d94de <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   d90d6:	3401      	adds	r4, #1
   d90d8:	e7ee      	b.n	d90b8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x10c>
   d90da:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   d90dc:	682b      	ldr	r3, [r5, #0]
   d90de:	7872      	ldrb	r2, [r6, #1]
   d90e0:	68db      	ldr	r3, [r3, #12]
   d90e2:	491a      	ldr	r1, [pc, #104]	; (d914c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x1a0>)
   d90e4:	4628      	mov	r0, r5
   d90e6:	4798      	blx	r3
   d90e8:	4604      	mov	r4, r0
   d90ea:	b160      	cbz	r0, d9106 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x15a>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d90ec:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d90ee:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d90f0:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d90f2:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d90f6:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d90fa:	4913      	ldr	r1, [pc, #76]	; (d9148 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   d90fc:	9400      	str	r4, [sp, #0]
   d90fe:	4628      	mov	r0, r5
   d9100:	f000 fa76 	bl	d95f0 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d9104:	e776      	b.n	d8ff4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	    else if ((i < _max_hops) && _isa_router)
   d9106:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   d910a:	4543      	cmp	r3, r8
   d910c:	f67f af71 	bls.w	d8ff2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
   d9110:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d9114:	2b00      	cmp	r3, #0
   d9116:	f43f af6c 	beq.w	d8ff2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		tmpMessageLen++;
   d911a:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   d911e:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d9120:	4909      	ldr	r1, [pc, #36]	; (d9148 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
		d->route[numRoutes] = _thisAddress;
   d9122:	443e      	add	r6, r7
		tmpMessageLen++;
   d9124:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   d9126:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d9128:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d912c:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   d912e:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d9130:	9300      	str	r3, [sp, #0]
   d9132:	4628      	mov	r0, r5
   d9134:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   d9136:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d913a:	f000 fa23 	bl	d9584 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   d913e:	e759      	b.n	d8ff4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
   d9140:	2003e28d 	.word	0x2003e28d
   d9144:	2003e28f 	.word	0x2003e28f
   d9148:	2003e28c 	.word	0x2003e28c
   d914c:	2003e28e 	.word	0x2003e28e

000d9150 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAckTimeout(uint8_t* buf, uint8_t* len, uint16_t timeout, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d9150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9154:	b085      	sub	sp, #20
   d9156:	4680      	mov	r8, r0
   d9158:	461c      	mov	r4, r3
   d915a:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
   d915e:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d9160:	4689      	mov	r9, r1
   d9162:	4692      	mov	sl, r2
   d9164:	f001 fa6a 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    int32_t timeLeft;
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
    {
	if (waitAvailableTimeout(timeLeft))
   d9168:	f108 0b04 	add.w	fp, r8, #4
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
   d916c:	4404      	add	r4, r0
   d916e:	f001 fa65 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
   d9172:	1a20      	subs	r0, r4, r0
   d9174:	2800      	cmp	r0, #0
   d9176:	dd16      	ble.n	d91a6 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x56>
	if (waitAvailableTimeout(timeLeft))
   d9178:	b281      	uxth	r1, r0
   d917a:	2200      	movs	r2, #0
   d917c:	4658      	mov	r0, fp
   d917e:	f7ff fc2a 	bl	d89d6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d9182:	2800      	cmp	r0, #0
   d9184:	d0f3      	beq.n	d916e <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
	{
	    if (recvfromAck(buf, len, from, to, id, flags, hops))
   d9186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9188:	9300      	str	r3, [sp, #0]
   d918a:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d918e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d9190:	9501      	str	r5, [sp, #4]
   d9192:	4652      	mov	r2, sl
   d9194:	4649      	mov	r1, r9
   d9196:	4640      	mov	r0, r8
   d9198:	f7ff ff08 	bl	d8fac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d919c:	2800      	cmp	r0, #0
   d919e:	d0e6      	beq.n	d916e <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
		return true;
	    YIELD;
	}
    }
    return false;
}
   d91a0:	b005      	add	sp, #20
   d91a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
   d91a6:	2000      	movs	r0, #0
   d91a8:	e7fa      	b.n	d91a0 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x50>
	...

000d91ac <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   d91ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d91ae:	b085      	sub	sp, #20
   d91b0:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d91b2:	3004      	adds	r0, #4
{
   d91b4:	460e      	mov	r6, r1
   d91b6:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d91b8:	f7ff fc50 	bl	d8a5c <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   d91bc:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d91be:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   d91c0:	4631      	mov	r1, r6
   d91c2:	4628      	mov	r0, r5
   d91c4:	f000 f947 	bl	d9456 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d91c8:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   d91ca:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d91cc:	d001      	beq.n	d91d2 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   d91ce:	2805      	cmp	r0, #5
   d91d0:	d11b      	bne.n	d920a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   d91d2:	7831      	ldrb	r1, [r6, #0]
   d91d4:	4628      	mov	r0, r5
   d91d6:	f000 f96b 	bl	d94b0 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   d91da:	7872      	ldrb	r2, [r6, #1]
   d91dc:	7a2b      	ldrb	r3, [r5, #8]
   d91de:	429a      	cmp	r2, r3
   d91e0:	d013      	beq.n	d920a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   d91e2:	4c0b      	ldr	r4, [pc, #44]	; (d9210 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   d91e4:	2303      	movs	r3, #3
   d91e6:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   d91e8:	7833      	ldrb	r3, [r6, #0]
   d91ea:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   d91ec:	7871      	ldrb	r1, [r6, #1]
   d91ee:	2302      	movs	r3, #2
   d91f0:	463a      	mov	r2, r7
   d91f2:	4628      	mov	r0, r5
   d91f4:	f000 f973 	bl	d94de <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   d91f8:	2300      	movs	r3, #0
   d91fa:	9300      	str	r3, [sp, #0]
   d91fc:	4621      	mov	r1, r4
   d91fe:	7873      	ldrb	r3, [r6, #1]
   d9200:	2202      	movs	r2, #2
   d9202:	4628      	mov	r0, r5
   d9204:	f000 f9f4 	bl	d95f0 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d9208:	4604      	mov	r4, r0
}
   d920a:	4620      	mov	r0, r4
   d920c:	b005      	add	sp, #20
   d920e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9210:	2003e28c 	.word	0x2003e28c

000d9214 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   d9214:	b510      	push	{r4, lr}
   d9216:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   d9218:	f7ff fbd2 	bl	d89c0 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   d921c:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   d921e:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   d9220:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   d9222:	2303      	movs	r3, #3
    _retransmissions = 0;
   d9224:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   d9226:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   d9228:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   d922a:	f44f 7280 	mov.w	r2, #256	; 0x100
   d922e:	f104 0011 	add.w	r0, r4, #17
   d9232:	f005 fb95 	bl	de960 <memset>
}
   d9236:	4620      	mov	r0, r4
   d9238:	bd10      	pop	{r4, pc}

000d923a <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   d923a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d923c:	4604      	mov	r4, r0
   d923e:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   d9240:	f7ff fc00 	bl	d8a44 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   d9244:	4620      	mov	r0, r4
   d9246:	2200      	movs	r2, #0
   d9248:	2180      	movs	r1, #128	; 0x80
   d924a:	f7ff fbff 	bl	d8a4c <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   d924e:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   d9250:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   d9252:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   d9256:	f10d 010f 	add.w	r1, sp, #15
   d925a:	2201      	movs	r2, #1
   d925c:	4620      	mov	r0, r4
   d925e:	f7ff fbc2 	bl	d89e6 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   d9262:	4620      	mov	r0, r4
   d9264:	f7ff fbb3 	bl	d89ce <_ZN10RHDatagram14waitPacketSentEv>
}
   d9268:	b004      	add	sp, #16
   d926a:	bd10      	pop	{r4, pc}

000d926c <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   d926c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d9270:	7b05      	ldrb	r5, [r0, #12]
   d9272:	3501      	adds	r5, #1
   d9274:	b2ed      	uxtb	r5, r5
{
   d9276:	b087      	sub	sp, #28
   d9278:	4604      	mov	r4, r0
   d927a:	4689      	mov	r9, r1
   d927c:	4692      	mov	sl, r2
   d927e:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d9280:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   d9282:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   d9284:	7c22      	ldrb	r2, [r4, #16]
   d9286:	463b      	mov	r3, r7
   d9288:	429a      	cmp	r2, r3
   d928a:	f107 0701 	add.w	r7, r7, #1
   d928e:	b2ff      	uxtb	r7, r7
   d9290:	d36b      	bcc.n	d936a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   d9292:	4629      	mov	r1, r5
   d9294:	4620      	mov	r0, r4
   d9296:	f7ff fbd5 	bl	d8a44 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   d929a:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   d929c:	bf0d      	iteet	eq
   d929e:	22c0      	moveq	r2, #192	; 0xc0
   d92a0:	2280      	movne	r2, #128	; 0x80
   d92a2:	2140      	movne	r1, #64	; 0x40
   d92a4:	2100      	moveq	r1, #0
   d92a6:	4620      	mov	r0, r4
   d92a8:	f7ff fbd0 	bl	d8a4c <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   d92ac:	4643      	mov	r3, r8
   d92ae:	4652      	mov	r2, sl
   d92b0:	4649      	mov	r1, r9
   d92b2:	4620      	mov	r0, r4
   d92b4:	f7ff fb97 	bl	d89e6 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   d92b8:	4620      	mov	r0, r4
   d92ba:	f7ff fb88 	bl	d89ce <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   d92be:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d92c2:	d054      	beq.n	d936e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   d92c4:	2f01      	cmp	r7, #1
	    _retransmissions++;
   d92c6:	bf82      	ittt	hi
   d92c8:	68a3      	ldrhi	r3, [r4, #8]
   d92ca:	3301      	addhi	r3, #1
   d92cc:	60a3      	strhi	r3, [r4, #8]
   d92ce:	f001 f9b5 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   d92d2:	f44f 7180 	mov.w	r1, #256	; 0x100
   d92d6:	4683      	mov	fp, r0
   d92d8:	2000      	movs	r0, #0
   d92da:	89e6      	ldrh	r6, [r4, #14]
   d92dc:	f003 ff92 	bl	dd204 <_Z6randomii>
   d92e0:	4370      	muls	r0, r6
   d92e2:	bf48      	it	mi
   d92e4:	30ff      	addmi	r0, #255	; 0xff
   d92e6:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   d92ea:	fa1b f686 	uxtah	r6, fp, r6
   d92ee:	f001 f9a5 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
   d92f2:	1a30      	subs	r0, r6, r0
   d92f4:	2800      	cmp	r0, #0
   d92f6:	ddc5      	ble.n	d9284 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   d92f8:	b281      	uxth	r1, r0
   d92fa:	2200      	movs	r2, #0
   d92fc:	4620      	mov	r0, r4
   d92fe:	f7ff fb6a 	bl	d89d6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d9302:	2800      	cmp	r0, #0
   d9304:	d0f3      	beq.n	d92ee <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   d9306:	f10d 0317 	add.w	r3, sp, #23
   d930a:	9302      	str	r3, [sp, #8]
   d930c:	f10d 0316 	add.w	r3, sp, #22
   d9310:	9301      	str	r3, [sp, #4]
   d9312:	2200      	movs	r2, #0
   d9314:	f10d 0315 	add.w	r3, sp, #21
   d9318:	9300      	str	r3, [sp, #0]
   d931a:	4611      	mov	r1, r2
   d931c:	ab05      	add	r3, sp, #20
   d931e:	4620      	mov	r0, r4
   d9320:	f7ff fba8 	bl	d8a74 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d9324:	2800      	cmp	r0, #0
   d9326:	d0e2      	beq.n	d92ee <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   d9328:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d932c:	f99d 3017 	ldrsb.w	r3, [sp, #23]
   d9330:	4542      	cmp	r2, r8
   d9332:	d10e      	bne.n	d9352 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   d9334:	f894 c004 	ldrb.w	ip, [r4, #4]
   d9338:	f89d 1015 	ldrb.w	r1, [sp, #21]
   d933c:	458c      	cmp	ip, r1
   d933e:	d108      	bne.n	d9352 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   d9340:	2b00      	cmp	r3, #0
   d9342:	da08      	bge.n	d9356 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   d9344:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d9348:	42ab      	cmp	r3, r5
   d934a:	d1d0      	bne.n	d92ee <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   d934c:	b007      	add	sp, #28
   d934e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   d9352:	2b00      	cmp	r3, #0
   d9354:	dbcb      	blt.n	d92ee <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   d9356:	18a1      	adds	r1, r4, r2
   d9358:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d935c:	7c49      	ldrb	r1, [r1, #17]
   d935e:	4299      	cmp	r1, r3
   d9360:	d1c5      	bne.n	d92ee <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   d9362:	4620      	mov	r0, r4
   d9364:	f7ff ff69 	bl	d923a <_ZN18RHReliableDatagram11acknowledgeEhh>
   d9368:	e7c1      	b.n	d92ee <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   d936a:	2000      	movs	r0, #0
   d936c:	e7ee      	b.n	d934c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   d936e:	2001      	movs	r0, #1
   d9370:	e7ec      	b.n	d934c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000d9372 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   d9372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9376:	b089      	sub	sp, #36	; 0x24
   d9378:	e9cd 2104 	strd	r2, r1, [sp, #16]
   d937c:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   d9380:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d9382:	4604      	mov	r4, r0
   d9384:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d9386:	f7ff fb1e 	bl	d89c6 <_ZN10RHDatagram9availableEv>
   d938a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d938e:	b920      	cbnz	r0, d939a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   d9390:	2500      	movs	r5, #0
}
   d9392:	4628      	mov	r0, r5
   d9394:	b009      	add	sp, #36	; 0x24
   d9396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d939a:	f10d 031f 	add.w	r3, sp, #31
   d939e:	9302      	str	r3, [sp, #8]
   d93a0:	f10d 031e 	add.w	r3, sp, #30
   d93a4:	9301      	str	r3, [sp, #4]
   d93a6:	f10d 031d 	add.w	r3, sp, #29
   d93aa:	9300      	str	r3, [sp, #0]
   d93ac:	4620      	mov	r0, r4
   d93ae:	ab07      	add	r3, sp, #28
   d93b0:	f7ff fb60 	bl	d8a74 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d93b4:	4605      	mov	r5, r0
   d93b6:	2800      	cmp	r0, #0
   d93b8:	d0ea      	beq.n	d9390 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   d93ba:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   d93be:	2b00      	cmp	r3, #0
   d93c0:	dbe6      	blt.n	d9390 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   d93c2:	7922      	ldrb	r2, [r4, #4]
   d93c4:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d93c8:	429a      	cmp	r2, r3
   d93ca:	d106      	bne.n	d93da <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   d93cc:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d93d0:	f89d 101e 	ldrb.w	r1, [sp, #30]
   d93d4:	4620      	mov	r0, r4
   d93d6:	f7ff ff30 	bl	d923a <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   d93da:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d93de:	f89d 301e 	ldrb.w	r3, [sp, #30]
   d93e2:	4414      	add	r4, r2
   d93e4:	7c61      	ldrb	r1, [r4, #17]
   d93e6:	4299      	cmp	r1, r3
   d93e8:	d0d2      	beq.n	d9390 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   d93ea:	b106      	cbz	r6, d93ee <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x7c>
   d93ec:	7032      	strb	r2, [r6, #0]
		if (to)    *to =    _to;
   d93ee:	f1b9 0f00 	cmp.w	r9, #0
   d93f2:	d003      	beq.n	d93fc <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x8a>
   d93f4:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d93f8:	f889 2000 	strb.w	r2, [r9]
		if (id)    *id =    _id;
   d93fc:	f1b8 0f00 	cmp.w	r8, #0
   d9400:	d001      	beq.n	d9406 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   d9402:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   d9406:	b117      	cbz	r7, d940e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9c>
   d9408:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d940c:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   d940e:	7463      	strb	r3, [r4, #17]
		return true;
   d9410:	e7bf      	b.n	d9392 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000d9412 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   d9412:	4770      	bx	lr

000d9414 <_ZN8RHRouter4initEv>:
{
   d9414:	b510      	push	{r4, lr}
   d9416:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   d9418:	3004      	adds	r0, #4
   d941a:	f7ff fb05 	bl	d8a28 <_ZN10RHDatagram4initEv>
    if (ret)
   d941e:	b110      	cbz	r0, d9426 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   d9420:	231e      	movs	r3, #30
   d9422:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   d9426:	bd10      	pop	{r4, pc}

000d9428 <_ZN8RHRouter10getRouteToEh>:
{
   d9428:	b510      	push	{r4, lr}
   d942a:	4602      	mov	r2, r0
   d942c:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   d942e:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   d9432:	428c      	cmp	r4, r1
   d9434:	d108      	bne.n	d9448 <_ZN8RHRouter10getRouteToEh+0x20>
   d9436:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   d943a:	b12c      	cbz	r4, d9448 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   d943c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d9440:	f503 738c 	add.w	r3, r3, #280	; 0x118
   d9444:	4418      	add	r0, r3
}
   d9446:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d9448:	3301      	adds	r3, #1
   d944a:	2b0a      	cmp	r3, #10
   d944c:	f102 0203 	add.w	r2, r2, #3
   d9450:	d1ed      	bne.n	d942e <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   d9452:	2000      	movs	r0, #0
   d9454:	e7f7      	b.n	d9446 <_ZN8RHRouter10getRouteToEh+0x1e>

000d9456 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   d9456:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d9458:	780b      	ldrb	r3, [r1, #0]
   d945a:	2bff      	cmp	r3, #255	; 0xff
{
   d945c:	4605      	mov	r5, r0
   d945e:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d9460:	d006      	beq.n	d9470 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   d9462:	4619      	mov	r1, r3
   d9464:	9201      	str	r2, [sp, #4]
   d9466:	f7ff ffdf 	bl	d9428 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   d946a:	b158      	cbz	r0, d9484 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   d946c:	7843      	ldrb	r3, [r0, #1]
   d946e:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   d9470:	4621      	mov	r1, r4
   d9472:	1d28      	adds	r0, r5, #4
   d9474:	f7ff fefa 	bl	d926c <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   d9478:	2800      	cmp	r0, #0
   d947a:	bf14      	ite	ne
   d947c:	2000      	movne	r0, #0
   d947e:	2005      	moveq	r0, #5
}
   d9480:	b003      	add	sp, #12
   d9482:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d9484:	2002      	movs	r0, #2
   d9486:	e7fb      	b.n	d9480 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000d9488 <_ZN8RHRouter11deleteRouteEh>:
{
   d9488:	b510      	push	{r4, lr}
   d948a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   d948e:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   d9490:	f1c1 0209 	rsb	r2, r1, #9
    memcpy(&_routes[index], &_routes[index+1], 
   d9494:	f503 708c 	add.w	r0, r3, #280	; 0x118
   d9498:	f203 111b 	addw	r1, r3, #283	; 0x11b
   d949c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d94a0:	4421      	add	r1, r4
   d94a2:	4420      	add	r0, r4
   d94a4:	f005 fa34 	bl	de910 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   d94a8:	2300      	movs	r3, #0
   d94aa:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
}
   d94ae:	bd10      	pop	{r4, pc}

000d94b0 <_ZN8RHRouter13deleteRouteToEh>:
{
   d94b0:	b538      	push	{r3, r4, r5, lr}
   d94b2:	460a      	mov	r2, r1
   d94b4:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d94b6:	f500 748c 	add.w	r4, r0, #280	; 0x118
   d94ba:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   d94be:	b2d9      	uxtb	r1, r3
   d94c0:	5d65      	ldrb	r5, [r4, r5]
   d94c2:	4295      	cmp	r5, r2
   d94c4:	d103      	bne.n	d94ce <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   d94c6:	f7ff ffdf 	bl	d9488 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   d94ca:	2001      	movs	r0, #1
}
   d94cc:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d94ce:	3301      	adds	r3, #1
   d94d0:	2b0a      	cmp	r3, #10
   d94d2:	d1f2      	bne.n	d94ba <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   d94d4:	2000      	movs	r0, #0
   d94d6:	e7f9      	b.n	d94cc <_ZN8RHRouter13deleteRouteToEh+0x1c>

000d94d8 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   d94d8:	2100      	movs	r1, #0
   d94da:	f7ff bfd5 	b.w	d9488 <_ZN8RHRouter11deleteRouteEh>

000d94de <_ZN8RHRouter10addRouteToEhhh>:
{
   d94de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d94e0:	4616      	mov	r6, r2
   d94e2:	461f      	mov	r7, r3
   d94e4:	4604      	mov	r4, r0
   d94e6:	460d      	mov	r5, r1
   d94e8:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d94ea:	f500 728c 	add.w	r2, r0, #280	; 0x118
   d94ee:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d94f2:	5c11      	ldrb	r1, [r2, r0]
   d94f4:	42a9      	cmp	r1, r5
   d94f6:	d105      	bne.n	d9504 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   d94f8:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   d94fa:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d94fe:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   d9502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d9504:	3301      	adds	r3, #1
   d9506:	2b0a      	cmp	r3, #10
   d9508:	d1f1      	bne.n	d94ee <_ZN8RHRouter10addRouteToEhhh+0x10>
   d950a:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   d950c:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   d9510:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d9514:	5c11      	ldrb	r1, [r2, r0]
   d9516:	b919      	cbnz	r1, d9520 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   d9518:	4420      	add	r0, r4
   d951a:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   d951e:	e7ec      	b.n	d94fa <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d9520:	3301      	adds	r3, #1
   d9522:	2b0a      	cmp	r3, #10
   d9524:	d1f4      	bne.n	d9510 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   d9526:	4620      	mov	r0, r4
   d9528:	f7ff ffd6 	bl	d94d8 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d952c:	4620      	mov	r0, r4
   d952e:	f104 031e 	add.w	r3, r4, #30
	if (_routes[i].state == Invalid)
   d9532:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   d9536:	b92a      	cbnz	r2, d9544 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   d9538:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   d953c:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d9540:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d9544:	3003      	adds	r0, #3
   d9546:	4298      	cmp	r0, r3
   d9548:	d1f3      	bne.n	d9532 <_ZN8RHRouter10addRouteToEhhh+0x54>
   d954a:	e7da      	b.n	d9502 <_ZN8RHRouter10addRouteToEhhh+0x24>

000d954c <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d954c:	f100 031e 	add.w	r3, r0, #30
	_routes[i].state = Invalid;
   d9550:	2200      	movs	r2, #0
   d9552:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d9556:	3003      	adds	r0, #3
   d9558:	4298      	cmp	r0, r3
   d955a:	d1fa      	bne.n	d9552 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   d955c:	4770      	bx	lr
	...

000d9560 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   d9560:	b510      	push	{r4, lr}
   d9562:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   d9564:	3004      	adds	r0, #4
   d9566:	f7ff fe55 	bl	d9214 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   d956a:	4b05      	ldr	r3, [pc, #20]	; (d9580 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   d956c:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d956e:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   d9572:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d9574:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   d9578:	f7ff ffe8 	bl	d954c <_ZN8RHRouter17clearRoutingTableEv>
}
   d957c:	4620      	mov	r0, r4
   d957e:	bd10      	pop	{r4, pc}
   d9580:	000dfdec 	.word	0x000dfdec

000d9584 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   d9584:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d9588:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d958a:	6840      	ldr	r0, [r0, #4]
{
   d958c:	9101      	str	r1, [sp, #4]
   d958e:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d9590:	6803      	ldr	r3, [r0, #0]
{
   d9592:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d9596:	699b      	ldr	r3, [r3, #24]
{
   d9598:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d959c:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d959e:	4798      	blx	r3
   d95a0:	f106 0805 	add.w	r8, r6, #5
   d95a4:	4580      	cmp	r8, r0
   d95a6:	d81c      	bhi.n	d95e2 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   d95a8:	4d10      	ldr	r5, [pc, #64]	; (d95ec <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   d95aa:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   d95ac:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   d95b0:	2300      	movs	r3, #0
   d95b2:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   d95b4:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   d95b8:	70eb      	strb	r3, [r5, #3]
   d95ba:	1c5a      	adds	r2, r3, #1
   d95bc:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   d95c0:	1d68      	adds	r0, r5, #5
   d95c2:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   d95c4:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   d95c6:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   d95ca:	f005 f9a1 	bl	de910 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d95ce:	6823      	ldr	r3, [r4, #0]
   d95d0:	685b      	ldr	r3, [r3, #4]
   d95d2:	fa5f f288 	uxtb.w	r2, r8
   d95d6:	4629      	mov	r1, r5
   d95d8:	4620      	mov	r0, r4
}
   d95da:	b002      	add	sp, #8
   d95dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d95e0:	4718      	bx	r3
}
   d95e2:	2001      	movs	r0, #1
   d95e4:	b002      	add	sp, #8
   d95e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d95ea:	bf00      	nop
   d95ec:	2003e386 	.word	0x2003e386

000d95f0 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   d95f0:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   d95f2:	f89d 4010 	ldrb.w	r4, [sp, #16]
   d95f6:	9401      	str	r4, [sp, #4]
   d95f8:	7a04      	ldrb	r4, [r0, #8]
   d95fa:	9400      	str	r4, [sp, #0]
   d95fc:	f7ff ffc2 	bl	d9584 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   d9600:	b002      	add	sp, #8
   d9602:	bd10      	pop	{r4, pc}

000d9604 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d9604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9608:	b087      	sub	sp, #28
   d960a:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d960c:	23ff      	movs	r3, #255	; 0xff
   d960e:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d9612:	f10d 0317 	add.w	r3, sp, #23
   d9616:	9302      	str	r3, [sp, #8]
   d9618:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d96ec <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   d961c:	f10d 0316 	add.w	r3, sp, #22
   d9620:	9301      	str	r3, [sp, #4]
   d9622:	f10d 0315 	add.w	r3, sp, #21
   d9626:	9300      	str	r3, [sp, #0]
{  
   d9628:	4604      	mov	r4, r0
   d962a:	4688      	mov	r8, r1
   d962c:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d962e:	ab05      	add	r3, sp, #20
   d9630:	f10d 0213 	add.w	r2, sp, #19
   d9634:	4649      	mov	r1, r9
   d9636:	3004      	adds	r0, #4
{  
   d9638:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d963c:	f7ff fe99 	bl	d9372 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   d9640:	4605      	mov	r5, r0
   d9642:	b908      	cbnz	r0, d9648 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   d9644:	2500      	movs	r5, #0
   d9646:	e038      	b.n	d96ba <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   d9648:	6823      	ldr	r3, [r4, #0]
   d964a:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d964e:	681b      	ldr	r3, [r3, #0]
   d9650:	4649      	mov	r1, r9
   d9652:	4620      	mov	r0, r4
   d9654:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   d9656:	f899 3000 	ldrb.w	r3, [r9]
   d965a:	7a22      	ldrb	r2, [r4, #8]
   d965c:	429a      	cmp	r2, r3
   d965e:	d001      	beq.n	d9664 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   d9660:	2bff      	cmp	r3, #255	; 0xff
   d9662:	d12e      	bne.n	d96c2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   d9664:	b117      	cbz	r7, d966c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   d9666:	4b21      	ldr	r3, [pc, #132]	; (d96ec <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d9668:	785b      	ldrb	r3, [r3, #1]
   d966a:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   d966c:	f1bb 0f00 	cmp.w	fp, #0
   d9670:	d003      	beq.n	d967a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   d9672:	4b1e      	ldr	r3, [pc, #120]	; (d96ec <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d9674:	781b      	ldrb	r3, [r3, #0]
   d9676:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   d967a:	f1ba 0f00 	cmp.w	sl, #0
   d967e:	d003      	beq.n	d9688 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d9680:	4b1a      	ldr	r3, [pc, #104]	; (d96ec <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d9682:	78db      	ldrb	r3, [r3, #3]
   d9684:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   d9688:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d968a:	b11b      	cbz	r3, d9694 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d968c:	4b17      	ldr	r3, [pc, #92]	; (d96ec <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d968e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d9690:	791b      	ldrb	r3, [r3, #4]
   d9692:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   d9694:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d9696:	b11b      	cbz	r3, d96a0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d9698:	4b14      	ldr	r3, [pc, #80]	; (d96ec <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d969a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d969c:	789b      	ldrb	r3, [r3, #2]
   d969e:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d96a0:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   d96a4:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d96a6:	4912      	ldr	r1, [pc, #72]	; (d96f0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d96a8:	3b05      	subs	r3, #5
   d96aa:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d96ac:	429a      	cmp	r2, r3
		*len = msgLen;
   d96ae:	bf88      	it	hi
   d96b0:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d96b2:	7832      	ldrb	r2, [r6, #0]
   d96b4:	4640      	mov	r0, r8
   d96b6:	f005 f92b 	bl	de910 <memcpy>
}
   d96ba:	4628      	mov	r0, r5
   d96bc:	b007      	add	sp, #28
   d96be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   d96c2:	f899 3002 	ldrb.w	r3, [r9, #2]
   d96c6:	1c5a      	adds	r2, r3, #1
   d96c8:	f889 2002 	strb.w	r2, [r9, #2]
   d96cc:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   d96d0:	429a      	cmp	r2, r3
   d96d2:	d9b7      	bls.n	d9644 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   d96d4:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   d96d8:	2b00      	cmp	r3, #0
   d96da:	d0b3      	beq.n	d9644 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   d96dc:	6823      	ldr	r3, [r4, #0]
   d96de:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d96e2:	685b      	ldr	r3, [r3, #4]
   d96e4:	4649      	mov	r1, r9
   d96e6:	4620      	mov	r0, r4
   d96e8:	4798      	blx	r3
   d96ea:	e7ab      	b.n	d9644 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   d96ec:	2003e386 	.word	0x2003e386
   d96f0:	2003e38b 	.word	0x2003e38b

000d96f4 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   d96f4:	b510      	push	{r4, lr}
   d96f6:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   d96f8:	6a00      	ldr	r0, [r0, #32]
   d96fa:	6803      	ldr	r3, [r0, #0]
   d96fc:	68db      	ldr	r3, [r3, #12]
   d96fe:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   d9700:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   d9704:	28ff      	cmp	r0, #255	; 0xff
   d9706:	d002      	beq.n	d970e <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   d9708:	2101      	movs	r1, #1
   d970a:	f004 fba7 	bl	dde5c <pinMode>

    deselectSlave();
   d970e:	6823      	ldr	r3, [r4, #0]
   d9710:	4620      	mov	r0, r4
   d9712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d9714:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   d9716:	2064      	movs	r0, #100	; 0x64
   d9718:	f001 fb8a 	bl	dae30 <delay>
#endif
    
    return true;
}
   d971c:	2001      	movs	r0, #1
   d971e:	bd10      	pop	{r4, pc}

000d9720 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   d9720:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d9724:	2100      	movs	r1, #0
   d9726:	f004 bbaa 	b.w	dde7e <digitalWrite>

000d972a <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   d972a:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d972e:	2101      	movs	r1, #1
   d9730:	f004 bba5 	b.w	dde7e <digitalWrite>

000d9734 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   d9734:	b570      	push	{r4, r5, r6, lr}
   d9736:	4604      	mov	r4, r0
   d9738:	460d      	mov	r5, r1
   d973a:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   d973c:	f7ff fa4e 	bl	d8bdc <_ZN15RHGenericDriverC1Ev>
   d9740:	4b03      	ldr	r3, [pc, #12]	; (d9750 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   d9742:	6023      	str	r3, [r4, #0]
   d9744:	6226      	str	r6, [r4, #32]
   d9746:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   d974a:	4620      	mov	r0, r4
   d974c:	bd70      	pop	{r4, r5, r6, pc}
   d974e:	bf00      	nop
   d9750:	000dfdfc 	.word	0x000dfdfc

000d9754 <_ZN11RHSPIDriver7spiReadEh>:
{
   d9754:	b538      	push	{r3, r4, r5, lr}
   d9756:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d9758:	6a00      	ldr	r0, [r0, #32]
   d975a:	6803      	ldr	r3, [r0, #0]
   d975c:	6a1b      	ldr	r3, [r3, #32]
{
   d975e:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d9760:	4798      	blx	r3
    selectSlave();
   d9762:	6823      	ldr	r3, [r4, #0]
   d9764:	4620      	mov	r0, r4
   d9766:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d9768:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   d976a:	6a20      	ldr	r0, [r4, #32]
   d976c:	6803      	ldr	r3, [r0, #0]
   d976e:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d9772:	681b      	ldr	r3, [r3, #0]
   d9774:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d9776:	6a20      	ldr	r0, [r4, #32]
   d9778:	6803      	ldr	r3, [r0, #0]
   d977a:	2100      	movs	r1, #0
   d977c:	681b      	ldr	r3, [r3, #0]
   d977e:	4798      	blx	r3
    deselectSlave();
   d9780:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d9782:	4605      	mov	r5, r0
    deselectSlave();
   d9784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d9786:	4620      	mov	r0, r4
   d9788:	4798      	blx	r3
    _spi.endTransaction();
   d978a:	6a20      	ldr	r0, [r4, #32]
   d978c:	6803      	ldr	r3, [r0, #0]
   d978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9790:	4798      	blx	r3
}
   d9792:	4628      	mov	r0, r5
   d9794:	bd38      	pop	{r3, r4, r5, pc}

000d9796 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   d9796:	b570      	push	{r4, r5, r6, lr}
   d9798:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d979a:	6a00      	ldr	r0, [r0, #32]
   d979c:	6803      	ldr	r3, [r0, #0]
   d979e:	6a1b      	ldr	r3, [r3, #32]
{
   d97a0:	4616      	mov	r6, r2
   d97a2:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d97a4:	4798      	blx	r3
    selectSlave();
   d97a6:	6823      	ldr	r3, [r4, #0]
   d97a8:	4620      	mov	r0, r4
   d97aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d97ac:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   d97ae:	6a20      	ldr	r0, [r4, #32]
   d97b0:	6803      	ldr	r3, [r0, #0]
   d97b2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d97b6:	681b      	ldr	r3, [r3, #0]
   d97b8:	4798      	blx	r3
   d97ba:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   d97bc:	6a20      	ldr	r0, [r4, #32]
   d97be:	6803      	ldr	r3, [r0, #0]
   d97c0:	4631      	mov	r1, r6
   d97c2:	681b      	ldr	r3, [r3, #0]
   d97c4:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d97c6:	2001      	movs	r0, #1
   d97c8:	f000 ff30 	bl	da62c <HAL_Delay_Microseconds>
    deselectSlave();
   d97cc:	6823      	ldr	r3, [r4, #0]
   d97ce:	4620      	mov	r0, r4
   d97d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d97d2:	4798      	blx	r3
    _spi.endTransaction();
   d97d4:	6a20      	ldr	r0, [r4, #32]
   d97d6:	6803      	ldr	r3, [r0, #0]
   d97d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d97da:	4798      	blx	r3
}
   d97dc:	4628      	mov	r0, r5
   d97de:	bd70      	pop	{r4, r5, r6, pc}

000d97e0 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   d97e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d97e2:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d97e4:	6a00      	ldr	r0, [r0, #32]
{
   d97e6:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d97e8:	6803      	ldr	r3, [r0, #0]
   d97ea:	6a1b      	ldr	r3, [r3, #32]
{
   d97ec:	460f      	mov	r7, r1
   d97ee:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d97f0:	4798      	blx	r3
    selectSlave();
   d97f2:	6823      	ldr	r3, [r4, #0]
   d97f4:	4620      	mov	r0, r4
   d97f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d97f8:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   d97fa:	6a20      	ldr	r0, [r4, #32]
   d97fc:	6803      	ldr	r3, [r0, #0]
   d97fe:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   d9802:	681b      	ldr	r3, [r3, #0]
   d9804:	4798      	blx	r3
   d9806:	442e      	add	r6, r5
   d9808:	4607      	mov	r7, r0
    while (len--)
   d980a:	42b5      	cmp	r5, r6
   d980c:	d007      	beq.n	d981e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   d980e:	6a20      	ldr	r0, [r4, #32]
   d9810:	6803      	ldr	r3, [r0, #0]
   d9812:	2100      	movs	r1, #0
   d9814:	681b      	ldr	r3, [r3, #0]
   d9816:	4798      	blx	r3
   d9818:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   d981c:	e7f5      	b.n	d980a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   d981e:	6823      	ldr	r3, [r4, #0]
   d9820:	4620      	mov	r0, r4
   d9822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d9824:	4798      	blx	r3
    _spi.endTransaction();
   d9826:	6a20      	ldr	r0, [r4, #32]
   d9828:	6803      	ldr	r3, [r0, #0]
   d982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d982c:	4798      	blx	r3
}
   d982e:	4638      	mov	r0, r7
   d9830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9832 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   d9832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9834:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d9836:	6a00      	ldr	r0, [r0, #32]
{
   d9838:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d983a:	6803      	ldr	r3, [r0, #0]
   d983c:	6a1b      	ldr	r3, [r3, #32]
{
   d983e:	460f      	mov	r7, r1
   d9840:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d9842:	4798      	blx	r3
    selectSlave();
   d9844:	6823      	ldr	r3, [r4, #0]
   d9846:	4620      	mov	r0, r4
   d9848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d984a:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   d984c:	6a20      	ldr	r0, [r4, #32]
   d984e:	6803      	ldr	r3, [r0, #0]
   d9850:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d9854:	681b      	ldr	r3, [r3, #0]
   d9856:	4798      	blx	r3
   d9858:	442e      	add	r6, r5
   d985a:	4607      	mov	r7, r0
    while (len--)
   d985c:	42b5      	cmp	r5, r6
   d985e:	d006      	beq.n	d986e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   d9860:	6a20      	ldr	r0, [r4, #32]
   d9862:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9866:	6803      	ldr	r3, [r0, #0]
   d9868:	681b      	ldr	r3, [r3, #0]
   d986a:	4798      	blx	r3
    while (len--)
   d986c:	e7f6      	b.n	d985c <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   d986e:	6823      	ldr	r3, [r4, #0]
   d9870:	4620      	mov	r0, r4
   d9872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d9874:	4798      	blx	r3
    _spi.endTransaction();
   d9876:	6a20      	ldr	r0, [r4, #32]
   d9878:	6803      	ldr	r3, [r0, #0]
   d987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d987c:	4798      	blx	r3
}
   d987e:	4638      	mov	r0, r7
   d9880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9882 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   d9882:	6a00      	ldr	r0, [r0, #32]
   d9884:	6803      	ldr	r3, [r0, #0]
   d9886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9888:	4718      	bx	r3

000d988a <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   d988a:	2001      	movs	r0, #1
   d988c:	4770      	bx	lr

000d988e <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   d988e:	20fb      	movs	r0, #251	; 0xfb
   d9890:	4770      	bx	lr

000d9892 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   d9892:	4770      	bx	lr

000d9894 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   d9894:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   d9896:	7903      	ldrb	r3, [r0, #4]
   d9898:	2b05      	cmp	r3, #5
{
   d989a:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   d989c:	d010      	beq.n	d98c0 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   d989e:	6803      	ldr	r3, [r0, #0]
   d98a0:	2105      	movs	r1, #5
   d98a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d98a6:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   d98a8:	2207      	movs	r2, #7
   d98aa:	2101      	movs	r1, #1
   d98ac:	4620      	mov	r0, r4
   d98ae:	f7ff ff72 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   d98b2:	2280      	movs	r2, #128	; 0x80
   d98b4:	2140      	movs	r1, #64	; 0x40
   d98b6:	4620      	mov	r0, r4
   d98b8:	f7ff ff6d 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   d98bc:	2305      	movs	r3, #5
   d98be:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   d98c0:	7923      	ldrb	r3, [r4, #4]
   d98c2:	2b05      	cmp	r3, #5
   d98c4:	d0fc      	beq.n	d98c0 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   d98c6:	7e20      	ldrb	r0, [r4, #24]
}
   d98c8:	bd10      	pop	{r4, pc}

000d98ca <_ZN7RH_RF95D0Ev>:
   d98ca:	b510      	push	{r4, lr}
   d98cc:	f44f 7198 	mov.w	r1, #304	; 0x130
   d98d0:	4604      	mov	r4, r0
   d98d2:	f004 fb91 	bl	ddff8 <_ZdlPvj>
   d98d6:	4620      	mov	r0, r4
   d98d8:	bd10      	pop	{r4, pc}

000d98da <_ZN7RH_RF955sleepEv>:
{
   d98da:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   d98dc:	7903      	ldrb	r3, [r0, #4]
   d98de:	2b01      	cmp	r3, #1
{
   d98e0:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   d98e2:	d00b      	beq.n	d98fc <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   d98e4:	6803      	ldr	r3, [r0, #0]
   d98e6:	2101      	movs	r1, #1
   d98e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d98ec:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   d98ee:	2200      	movs	r2, #0
   d98f0:	2101      	movs	r1, #1
   d98f2:	4620      	mov	r0, r4
   d98f4:	f7ff ff4f 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   d98f8:	2301      	movs	r3, #1
   d98fa:	7123      	strb	r3, [r4, #4]
}
   d98fc:	2001      	movs	r0, #1
   d98fe:	bd10      	pop	{r4, pc}

000d9900 <_ZN7RH_RF954recvEPhS0_>:
{
   d9900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   d9902:	6803      	ldr	r3, [r0, #0]
   d9904:	68db      	ldr	r3, [r3, #12]
{
   d9906:	4604      	mov	r4, r0
   d9908:	460f      	mov	r7, r1
   d990a:	4615      	mov	r5, r2
    if (!available())
   d990c:	4798      	blx	r3
   d990e:	4606      	mov	r6, r0
   d9910:	b1b0      	cbz	r0, d9940 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   d9912:	b187      	cbz	r7, d9936 <_ZN7RH_RF954recvEPhS0_+0x36>
   d9914:	b17d      	cbz	r5, d9936 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   d9916:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d991a:	782a      	ldrb	r2, [r5, #0]
   d991c:	3b03      	subs	r3, #3
   d991e:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   d9920:	bfde      	ittt	le
   d9922:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   d9926:	3b04      	suble	r3, #4
   d9928:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   d992a:	782a      	ldrb	r2, [r5, #0]
   d992c:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d9930:	4638      	mov	r0, r7
   d9932:	f004 ffed 	bl	de910 <memcpy>
    _rxBufValid = false;
   d9936:	2300      	movs	r3, #0
   d9938:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d993c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   d9940:	4630      	mov	r0, r6
   d9942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9944 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   d9944:	b538      	push	{r3, r4, r5, lr}
   d9946:	4604      	mov	r4, r0
   d9948:	4615      	mov	r5, r2
    _rxBufValid(0)
   d994a:	461a      	mov	r2, r3
   d994c:	f7ff fef2 	bl	d9734 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   d9950:	4b09      	ldr	r3, [pc, #36]	; (d9978 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   d9952:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   d9954:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   d9956:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   d9958:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   d995c:	2201      	movs	r2, #1
    _rxBufValid(0)
   d995e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   d9962:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   d9966:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   d996a:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   d996e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   d9972:	4620      	mov	r0, r4
   d9974:	bd38      	pop	{r3, r4, r5, pc}
   d9976:	bf00      	nop
   d9978:	000dfe94 	.word	0x000dfe94

000d997c <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   d997c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   d9980:	2b03      	cmp	r3, #3
   d9982:	d91b      	bls.n	d99bc <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   d9984:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d9988:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   d998a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   d998e:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   d9990:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   d9994:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   d9996:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d999a:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   d999c:	7983      	ldrb	r3, [r0, #6]
   d999e:	b933      	cbnz	r3, d99ae <_ZN7RH_RF9513validateRxBufEv+0x32>
   d99a0:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   d99a2:	7942      	ldrb	r2, [r0, #5]
   d99a4:	429a      	cmp	r2, r3
   d99a6:	d002      	beq.n	d99ae <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   d99a8:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   d99aa:	2bff      	cmp	r3, #255	; 0xff
   d99ac:	d106      	bne.n	d99bc <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   d99ae:	8a83      	ldrh	r3, [r0, #20]
   d99b0:	3301      	adds	r3, #1
   d99b2:	b29b      	uxth	r3, r3
   d99b4:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   d99b6:	2301      	movs	r3, #1
   d99b8:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   d99bc:	4770      	bx	lr
	...

000d99c0 <_ZN7RH_RF9512setFrequencyEf>:
{
   d99c0:	b538      	push	{r3, r4, r5, lr}
   d99c2:	4604      	mov	r4, r0
   d99c4:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d99c8:	ee10 0a10 	vmov	r0, s0
{
   d99cc:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d99d0:	f004 fc86 	bl	de2e0 <__aeabi_f2d>
   d99d4:	a317      	add	r3, pc, #92	; (adr r3, d9a34 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   d99d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d99da:	f004 fcd9 	bl	de390 <__aeabi_dmul>
   d99de:	a317      	add	r3, pc, #92	; (adr r3, d9a3c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   d99e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d99e4:	f004 fdfe 	bl	de5e4 <__aeabi_ddiv>
   d99e8:	f004 fee4 	bl	de7b4 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d99ec:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d99ee:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d99f0:	f3c0 4207 	ubfx	r2, r0, #16, #8
   d99f4:	4620      	mov	r0, r4
   d99f6:	f7ff fece 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   d99fa:	f3c5 2207 	ubfx	r2, r5, #8, #8
   d99fe:	2107      	movs	r1, #7
   d9a00:	4620      	mov	r0, r4
   d9a02:	f7ff fec8 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   d9a06:	b2ea      	uxtb	r2, r5
   d9a08:	2108      	movs	r1, #8
   d9a0a:	4620      	mov	r0, r4
   d9a0c:	f7ff fec3 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   d9a10:	eddf 7a07 	vldr	s15, [pc, #28]	; d9a30 <_ZN7RH_RF9512setFrequencyEf+0x70>
   d9a14:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   d9a18:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   d9a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9a20:	bfac      	ite	ge
   d9a22:	2301      	movge	r3, #1
   d9a24:	2300      	movlt	r3, #0
}
   d9a26:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   d9a28:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   d9a2c:	bd38      	pop	{r3, r4, r5, pc}
   d9a2e:	bf00      	nop
   d9a30:	4442c000 	.word	0x4442c000
   d9a34:	00000000 	.word	0x00000000
   d9a38:	412e8480 	.word	0x412e8480
   d9a3c:	00000000 	.word	0x00000000
   d9a40:	404e8480 	.word	0x404e8480

000d9a44 <_ZN7RH_RF9511setModeIdleEv>:
{
   d9a44:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   d9a46:	7903      	ldrb	r3, [r0, #4]
   d9a48:	2b02      	cmp	r3, #2
{
   d9a4a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   d9a4c:	d00b      	beq.n	d9a66 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   d9a4e:	6803      	ldr	r3, [r0, #0]
   d9a50:	2102      	movs	r1, #2
   d9a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d9a56:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   d9a58:	2201      	movs	r2, #1
   d9a5a:	4611      	mov	r1, r2
   d9a5c:	4620      	mov	r0, r4
   d9a5e:	f7ff fe9a 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   d9a62:	2302      	movs	r3, #2
   d9a64:	7123      	strb	r3, [r4, #4]
}
   d9a66:	bd10      	pop	{r4, pc}

000d9a68 <_ZN7RH_RF9515handleInterruptEv>:
{
   d9a68:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d9a6a:	2112      	movs	r1, #18
{
   d9a6c:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d9a6e:	f7ff fe71 	bl	d9754 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d9a72:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d9a74:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d9a76:	4620      	mov	r0, r4
   d9a78:	f7ff fe6c 	bl	d9754 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d9a7c:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d9a7e:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d9a80:	2112      	movs	r1, #18
   d9a82:	4620      	mov	r0, r4
   d9a84:	f7ff fe87 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   d9a88:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   d9a8a:	2b04      	cmp	r3, #4
   d9a8c:	d107      	bne.n	d9a9e <_ZN7RH_RF9515handleInterruptEv+0x36>
   d9a8e:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   d9a92:	d117      	bne.n	d9ac4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   d9a94:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   d9a98:	b10b      	cbz	r3, d9a9e <_ZN7RH_RF9515handleInterruptEv+0x36>
   d9a9a:	0670      	lsls	r0, r6, #25
   d9a9c:	d512      	bpl.n	d9ac4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   d9a9e:	7923      	ldrb	r3, [r4, #4]
   d9aa0:	2b04      	cmp	r3, #4
   d9aa2:	d101      	bne.n	d9aa8 <_ZN7RH_RF9515handleInterruptEv+0x40>
   d9aa4:	0669      	lsls	r1, r5, #25
   d9aa6:	d422      	bmi.n	d9aee <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   d9aa8:	7923      	ldrb	r3, [r4, #4]
   d9aaa:	2b03      	cmp	r3, #3
   d9aac:	d101      	bne.n	d9ab2 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   d9aae:	072a      	lsls	r2, r5, #28
   d9ab0:	d469      	bmi.n	d9b86 <_ZN7RH_RF9515handleInterruptEv+0x11e>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   d9ab2:	7923      	ldrb	r3, [r4, #4]
   d9ab4:	2b05      	cmp	r3, #5
   d9ab6:	d10e      	bne.n	d9ad6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   d9ab8:	076b      	lsls	r3, r5, #29
   d9aba:	d50c      	bpl.n	d9ad6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   d9abc:	f005 0501 	and.w	r5, r5, #1
   d9ac0:	7625      	strb	r5, [r4, #24]
   d9ac2:	e059      	b.n	d9b78 <_ZN7RH_RF9515handleInterruptEv+0x110>
	_rxBad++;
   d9ac4:	8a63      	ldrh	r3, [r4, #18]
   d9ac6:	3301      	adds	r3, #1
   d9ac8:	b29b      	uxth	r3, r3
   d9aca:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   d9acc:	2300      	movs	r3, #0
   d9ace:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d9ad2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d9ad6:	22ff      	movs	r2, #255	; 0xff
   d9ad8:	2112      	movs	r1, #18
   d9ada:	4620      	mov	r0, r4
   d9adc:	f7ff fe5b 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d9ae0:	4620      	mov	r0, r4
   d9ae2:	22ff      	movs	r2, #255	; 0xff
}
   d9ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d9ae8:	2112      	movs	r1, #18
   d9aea:	f7ff be54 	b.w	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d9aee:	2113      	movs	r1, #19
   d9af0:	4620      	mov	r0, r4
   d9af2:	f7ff fe2f 	bl	d9754 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d9af6:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d9af8:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d9afa:	4620      	mov	r0, r4
   d9afc:	f7ff fe2a 	bl	d9754 <_ZN11RHSPIDriver7spiReadEh>
   d9b00:	210d      	movs	r1, #13
   d9b02:	4602      	mov	r2, r0
   d9b04:	4620      	mov	r0, r4
   d9b06:	f7ff fe46 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   d9b0a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   d9b0e:	462b      	mov	r3, r5
   d9b10:	2100      	movs	r1, #0
   d9b12:	4620      	mov	r0, r4
   d9b14:	f7ff fe64 	bl	d97e0 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d9b18:	2119      	movs	r1, #25
	_bufLen = len;
   d9b1a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d9b1e:	4620      	mov	r0, r4
   d9b20:	f7ff fe18 	bl	d9754 <_ZN11RHSPIDriver7spiReadEh>
   d9b24:	b240      	sxtb	r0, r0
   d9b26:	2800      	cmp	r0, #0
   d9b28:	bfb8      	it	lt
   d9b2a:	3003      	addlt	r0, #3
   d9b2c:	1080      	asrs	r0, r0, #2
   d9b2e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d9b32:	211a      	movs	r1, #26
   d9b34:	4620      	mov	r0, r4
   d9b36:	f7ff fe0d 	bl	d9754 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   d9b3a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d9b3e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   d9b40:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d9b42:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d9b44:	bfa9      	itett	ge
   d9b46:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   d9b48:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d9b4a:	b21b      	sxthge	r3, r3
   d9b4c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   d9b4e:	bfb2      	itee	lt
   d9b50:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d9b52:	220f      	movge	r2, #15
   d9b54:	fb93 f3f2 	sdivge	r3, r3, r2
   d9b58:	b21b      	sxth	r3, r3
   d9b5a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   d9b5c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   d9b60:	b173      	cbz	r3, d9b80 <_ZN7RH_RF9515handleInterruptEv+0x118>
	    _lastRssi -= 157;
   d9b62:	8a23      	ldrh	r3, [r4, #16]
   d9b64:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   d9b66:	b21b      	sxth	r3, r3
   d9b68:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   d9b6a:	4620      	mov	r0, r4
   d9b6c:	f7ff ff06 	bl	d997c <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   d9b70:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   d9b74:	2b00      	cmp	r3, #0
   d9b76:	d0ae      	beq.n	d9ad6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   d9b78:	4620      	mov	r0, r4
   d9b7a:	f7ff ff63 	bl	d9a44 <_ZN7RH_RF9511setModeIdleEv>
   d9b7e:	e7aa      	b.n	d9ad6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   d9b80:	8a23      	ldrh	r3, [r4, #16]
   d9b82:	3ba4      	subs	r3, #164	; 0xa4
   d9b84:	e7ef      	b.n	d9b66 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   d9b86:	8ae3      	ldrh	r3, [r4, #22]
   d9b88:	3301      	adds	r3, #1
   d9b8a:	b29b      	uxth	r3, r3
   d9b8c:	82e3      	strh	r3, [r4, #22]
	setModeIdle();
   d9b8e:	e7f3      	b.n	d9b78 <_ZN7RH_RF9515handleInterruptEv+0x110>

000d9b90 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   d9b90:	4b02      	ldr	r3, [pc, #8]	; (d9b9c <_ZN7RH_RF954isr0Ev+0xc>)
   d9b92:	6818      	ldr	r0, [r3, #0]
   d9b94:	b108      	cbz	r0, d9b9a <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   d9b96:	f7ff bf67 	b.w	d9a68 <_ZN7RH_RF9515handleInterruptEv>
}
   d9b9a:	4770      	bx	lr
   d9b9c:	2003e488 	.word	0x2003e488

000d9ba0 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   d9ba0:	4b02      	ldr	r3, [pc, #8]	; (d9bac <_ZN7RH_RF954isr1Ev+0xc>)
   d9ba2:	6858      	ldr	r0, [r3, #4]
   d9ba4:	b108      	cbz	r0, d9baa <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   d9ba6:	f7ff bf5f 	b.w	d9a68 <_ZN7RH_RF9515handleInterruptEv>
}
   d9baa:	4770      	bx	lr
   d9bac:	2003e488 	.word	0x2003e488

000d9bb0 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   d9bb0:	4b02      	ldr	r3, [pc, #8]	; (d9bbc <_ZN7RH_RF954isr2Ev+0xc>)
   d9bb2:	6898      	ldr	r0, [r3, #8]
   d9bb4:	b108      	cbz	r0, d9bba <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   d9bb6:	f7ff bf57 	b.w	d9a68 <_ZN7RH_RF9515handleInterruptEv>
}
   d9bba:	4770      	bx	lr
   d9bbc:	2003e488 	.word	0x2003e488

000d9bc0 <_ZN7RH_RF959setModeRxEv>:
{
   d9bc0:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   d9bc2:	7903      	ldrb	r3, [r0, #4]
   d9bc4:	2b04      	cmp	r3, #4
{
   d9bc6:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   d9bc8:	d010      	beq.n	d9bec <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   d9bca:	6803      	ldr	r3, [r0, #0]
   d9bcc:	2104      	movs	r1, #4
   d9bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d9bd2:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   d9bd4:	2205      	movs	r2, #5
   d9bd6:	2101      	movs	r1, #1
   d9bd8:	4620      	mov	r0, r4
   d9bda:	f7ff fddc 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   d9bde:	2200      	movs	r2, #0
   d9be0:	2140      	movs	r1, #64	; 0x40
   d9be2:	4620      	mov	r0, r4
   d9be4:	f7ff fdd7 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   d9be8:	2304      	movs	r3, #4
   d9bea:	7123      	strb	r3, [r4, #4]
}
   d9bec:	bd10      	pop	{r4, pc}

000d9bee <_ZN7RH_RF959availableEv>:
{
   d9bee:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   d9bf0:	7903      	ldrb	r3, [r0, #4]
   d9bf2:	2b03      	cmp	r3, #3
{
   d9bf4:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   d9bf6:	d005      	beq.n	d9c04 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   d9bf8:	f7ff ffe2 	bl	d9bc0 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   d9bfc:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   d9c00:	b2c0      	uxtb	r0, r0
}
   d9c02:	bd10      	pop	{r4, pc}
	return false;
   d9c04:	2000      	movs	r0, #0
   d9c06:	e7fc      	b.n	d9c02 <_ZN7RH_RF959availableEv+0x14>

000d9c08 <_ZN7RH_RF959setModeTxEv>:
{
   d9c08:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   d9c0a:	7903      	ldrb	r3, [r0, #4]
   d9c0c:	2b03      	cmp	r3, #3
{
   d9c0e:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   d9c10:	d010      	beq.n	d9c34 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   d9c12:	6803      	ldr	r3, [r0, #0]
   d9c14:	2103      	movs	r1, #3
   d9c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d9c1a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   d9c1c:	2203      	movs	r2, #3
   d9c1e:	2101      	movs	r1, #1
   d9c20:	4620      	mov	r0, r4
   d9c22:	f7ff fdb8 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   d9c26:	2240      	movs	r2, #64	; 0x40
   d9c28:	4611      	mov	r1, r2
   d9c2a:	4620      	mov	r0, r4
   d9c2c:	f7ff fdb3 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   d9c30:	2303      	movs	r3, #3
   d9c32:	7123      	strb	r3, [r4, #4]
}
   d9c34:	bd10      	pop	{r4, pc}

000d9c36 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d9c36:	2afb      	cmp	r2, #251	; 0xfb
{
   d9c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9c3a:	4604      	mov	r4, r0
   d9c3c:	460f      	mov	r7, r1
   d9c3e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d9c40:	d902      	bls.n	d9c48 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   d9c42:	2600      	movs	r6, #0
}
   d9c44:	4630      	mov	r0, r6
   d9c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   d9c48:	6803      	ldr	r3, [r0, #0]
   d9c4a:	6a1b      	ldr	r3, [r3, #32]
   d9c4c:	4798      	blx	r3
    setModeIdle();
   d9c4e:	4620      	mov	r0, r4
   d9c50:	f7ff fef8 	bl	d9a44 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   d9c54:	6823      	ldr	r3, [r4, #0]
   d9c56:	4620      	mov	r0, r4
   d9c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9c5a:	4798      	blx	r3
   d9c5c:	4606      	mov	r6, r0
   d9c5e:	2800      	cmp	r0, #0
   d9c60:	d0ef      	beq.n	d9c42 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   d9c62:	2200      	movs	r2, #0
   d9c64:	210d      	movs	r1, #13
   d9c66:	4620      	mov	r0, r4
   d9c68:	f7ff fd95 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   d9c6c:	7ae2      	ldrb	r2, [r4, #11]
   d9c6e:	2100      	movs	r1, #0
   d9c70:	4620      	mov	r0, r4
   d9c72:	f7ff fd90 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   d9c76:	7b22      	ldrb	r2, [r4, #12]
   d9c78:	2100      	movs	r1, #0
   d9c7a:	4620      	mov	r0, r4
   d9c7c:	f7ff fd8b 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   d9c80:	7b62      	ldrb	r2, [r4, #13]
   d9c82:	2100      	movs	r1, #0
   d9c84:	4620      	mov	r0, r4
   d9c86:	f7ff fd86 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   d9c8a:	7ba2      	ldrb	r2, [r4, #14]
   d9c8c:	2100      	movs	r1, #0
   d9c8e:	4620      	mov	r0, r4
   d9c90:	f7ff fd81 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   d9c94:	462b      	mov	r3, r5
   d9c96:	463a      	mov	r2, r7
   d9c98:	2100      	movs	r1, #0
   d9c9a:	4620      	mov	r0, r4
   d9c9c:	f7ff fdc9 	bl	d9832 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   d9ca0:	1d2a      	adds	r2, r5, #4
   d9ca2:	b2d2      	uxtb	r2, r2
   d9ca4:	2122      	movs	r1, #34	; 0x22
   d9ca6:	4620      	mov	r0, r4
   d9ca8:	f7ff fd75 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   d9cac:	4620      	mov	r0, r4
   d9cae:	f7ff ffab 	bl	d9c08 <_ZN7RH_RF959setModeTxEv>
    return true;
   d9cb2:	e7c7      	b.n	d9c44 <_ZN7RH_RF954sendEPKhh+0xe>

000d9cb4 <_ZN7RH_RF9510setTxPowerEab>:
{
   d9cb4:	b538      	push	{r3, r4, r5, lr}
   d9cb6:	4605      	mov	r5, r0
   d9cb8:	460c      	mov	r4, r1
    _useRFO = useRFO;
   d9cba:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   d9cbe:	b172      	cbz	r2, d9cde <_ZN7RH_RF9510setTxPowerEab+0x2a>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   d9cc0:	f381 0204 	usat	r2, #4, r1
   d9cc4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d9cc8:	b2d2      	uxtb	r2, r2
   d9cca:	2109      	movs	r1, #9
   d9ccc:	f7ff fd63 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d9cd0:	2204      	movs	r2, #4
   d9cd2:	214d      	movs	r1, #77	; 0x4d
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d9cd4:	4628      	mov	r0, r5
}
   d9cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d9cda:	f7ff bd5c 	b.w	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
	if (power > 20)
   d9cde:	2914      	cmp	r1, #20
   d9ce0:	dc10      	bgt.n	d9d04 <_ZN7RH_RF9510setTxPowerEab+0x50>
	if (power < 2)
   d9ce2:	2901      	cmp	r1, #1
   d9ce4:	dd10      	ble.n	d9d08 <_ZN7RH_RF9510setTxPowerEab+0x54>
	if (power > 17)
   d9ce6:	2911      	cmp	r1, #17
   d9ce8:	dd0f      	ble.n	d9d0a <_ZN7RH_RF9510setTxPowerEab+0x56>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   d9cea:	2207      	movs	r2, #7
   d9cec:	214d      	movs	r1, #77	; 0x4d
   d9cee:	4628      	mov	r0, r5
   d9cf0:	f7ff fd51 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   d9cf4:	3c03      	subs	r4, #3
   d9cf6:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d9cf8:	1ea2      	subs	r2, r4, #2
   d9cfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
   d9cfe:	b2d2      	uxtb	r2, r2
   d9d00:	2109      	movs	r1, #9
   d9d02:	e7e7      	b.n	d9cd4 <_ZN7RH_RF9510setTxPowerEab+0x20>
	    power = 20;
   d9d04:	2414      	movs	r4, #20
   d9d06:	e7f0      	b.n	d9cea <_ZN7RH_RF9510setTxPowerEab+0x36>
	    power = 2;
   d9d08:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d9d0a:	2204      	movs	r2, #4
   d9d0c:	214d      	movs	r1, #77	; 0x4d
   d9d0e:	4628      	mov	r0, r5
   d9d10:	f7ff fd41 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
   d9d14:	e7f0      	b.n	d9cf8 <_ZN7RH_RF9510setTxPowerEab+0x44>

000d9d16 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   d9d16:	b538      	push	{r3, r4, r5, lr}
   d9d18:	460c      	mov	r4, r1
   d9d1a:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   d9d1c:	780a      	ldrb	r2, [r1, #0]
   d9d1e:	211d      	movs	r1, #29
   d9d20:	f7ff fd39 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   d9d24:	7862      	ldrb	r2, [r4, #1]
   d9d26:	211e      	movs	r1, #30
   d9d28:	4628      	mov	r0, r5
   d9d2a:	f7ff fd34 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d9d2e:	78a2      	ldrb	r2, [r4, #2]
   d9d30:	4628      	mov	r0, r5
   d9d32:	2126      	movs	r1, #38	; 0x26
}
   d9d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d9d38:	f7ff bd2d 	b.w	d9796 <_ZN11RHSPIDriver8spiWriteEhh>

000d9d3c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d9d3c:	2905      	cmp	r1, #5
{
   d9d3e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d9d40:	d80f      	bhi.n	d9d62 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d9d42:	4b09      	ldr	r3, [pc, #36]	; (d9d68 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   d9d44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d9d48:	185c      	adds	r4, r3, r1
   d9d4a:	5a5a      	ldrh	r2, [r3, r1]
   d9d4c:	78a3      	ldrb	r3, [r4, #2]
   d9d4e:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   d9d52:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d9d54:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   d9d58:	f7ff ffdd 	bl	d9d16 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   d9d5c:	2001      	movs	r0, #1
}
   d9d5e:	b002      	add	sp, #8
   d9d60:	bd10      	pop	{r4, pc}
        return false;
   d9d62:	2000      	movs	r0, #0
   d9d64:	e7fb      	b.n	d9d5e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   d9d66:	bf00      	nop
   d9d68:	000dfe7c 	.word	0x000dfe7c

000d9d6c <_ZN7RH_RF9517setPreambleLengthEt>:
{
   d9d6c:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d9d6e:	0a0a      	lsrs	r2, r1, #8
{
   d9d70:	4605      	mov	r5, r0
   d9d72:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d9d74:	2120      	movs	r1, #32
   d9d76:	f7ff fd0e 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d9d7a:	b2e2      	uxtb	r2, r4
   d9d7c:	4628      	mov	r0, r5
   d9d7e:	2121      	movs	r1, #33	; 0x21
}
   d9d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d9d84:	f7ff bd07 	b.w	d9796 <_ZN11RHSPIDriver8spiWriteEhh>

000d9d88 <_ZN7RH_RF954initEv>:
{
   d9d88:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9d8a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   d9d8c:	f7ff fcb2 	bl	d96f4 <_ZN11RHSPIDriver4initEv>
   d9d90:	4606      	mov	r6, r0
   d9d92:	b918      	cbnz	r0, d9d9c <_ZN7RH_RF954initEv+0x14>
	return false;
   d9d94:	2600      	movs	r6, #0
}
   d9d96:	4630      	mov	r0, r6
   d9d98:	b002      	add	sp, #8
   d9d9a:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   d9d9c:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   d9da0:	2dff      	cmp	r5, #255	; 0xff
   d9da2:	d052      	beq.n	d9e4a <_ZN7RH_RF954initEv+0xc2>
	spiUsingInterrupt(interruptNumber);
   d9da4:	4629      	mov	r1, r5
   d9da6:	4620      	mov	r0, r4
   d9da8:	f7ff fd6b 	bl	d9882 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   d9dac:	2280      	movs	r2, #128	; 0x80
   d9dae:	2101      	movs	r1, #1
   d9db0:	4620      	mov	r0, r4
   d9db2:	f7ff fcf0 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   d9db6:	200a      	movs	r0, #10
   d9db8:	f001 f83a 	bl	dae30 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   d9dbc:	2101      	movs	r1, #1
   d9dbe:	4620      	mov	r0, r4
   d9dc0:	f7ff fcc8 	bl	d9754 <_ZN11RHSPIDriver7spiReadEh>
   d9dc4:	2880      	cmp	r0, #128	; 0x80
   d9dc6:	d1e5      	bne.n	d9d94 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   d9dc8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   d9dcc:	28ff      	cmp	r0, #255	; 0xff
   d9dce:	d01c      	beq.n	d9e0a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   d9dd0:	2100      	movs	r1, #0
   d9dd2:	f004 f843 	bl	dde5c <pinMode>
	if (_myInterruptIndex == 0xff)
   d9dd6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d9dda:	2bff      	cmp	r3, #255	; 0xff
   d9ddc:	d107      	bne.n	d9dee <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   d9dde:	4a25      	ldr	r2, [pc, #148]	; (d9e74 <_ZN7RH_RF954initEv+0xec>)
   d9de0:	7813      	ldrb	r3, [r2, #0]
   d9de2:	2b03      	cmp	r3, #3
   d9de4:	d8d6      	bhi.n	d9d94 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   d9de6:	1c59      	adds	r1, r3, #1
   d9de8:	7011      	strb	r1, [r2, #0]
   d9dea:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   d9dee:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   d9df2:	4b21      	ldr	r3, [pc, #132]	; (d9e78 <_ZN7RH_RF954initEv+0xf0>)
   d9df4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   d9df8:	bb52      	cbnz	r2, d9e50 <_ZN7RH_RF954initEv+0xc8>
	    attachInterrupt(interruptNumber, isr0, RISING);
   d9dfa:	4920      	ldr	r1, [pc, #128]	; (d9e7c <_ZN7RH_RF954initEv+0xf4>)
   d9dfc:	9200      	str	r2, [sp, #0]
   d9dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9e02:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   d9e04:	b2a8      	uxth	r0, r5
   d9e06:	f001 fdf3 	bl	db9f0 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   d9e0a:	2200      	movs	r2, #0
   d9e0c:	210e      	movs	r1, #14
   d9e0e:	4620      	mov	r0, r4
   d9e10:	f7ff fcc1 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   d9e14:	2200      	movs	r2, #0
   d9e16:	210f      	movs	r1, #15
   d9e18:	4620      	mov	r0, r4
   d9e1a:	f7ff fcbc 	bl	d9796 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   d9e1e:	4620      	mov	r0, r4
   d9e20:	f7ff fe10 	bl	d9a44 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   d9e24:	2100      	movs	r1, #0
   d9e26:	4620      	mov	r0, r4
   d9e28:	f7ff ff88 	bl	d9d3c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   d9e2c:	2108      	movs	r1, #8
   d9e2e:	4620      	mov	r0, r4
   d9e30:	f7ff ff9c 	bl	d9d6c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   d9e34:	ed9f 0a12 	vldr	s0, [pc, #72]	; d9e80 <_ZN7RH_RF954initEv+0xf8>
   d9e38:	4620      	mov	r0, r4
   d9e3a:	f7ff fdc1 	bl	d99c0 <_ZN7RH_RF9512setFrequencyEf>
    setTxPower(13);
   d9e3e:	2200      	movs	r2, #0
   d9e40:	210d      	movs	r1, #13
   d9e42:	4620      	mov	r0, r4
   d9e44:	f7ff ff36 	bl	d9cb4 <_ZN7RH_RF9510setTxPowerEab>
    return true;
   d9e48:	e7a5      	b.n	d9d96 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   d9e4a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d9e4e:	e7ad      	b.n	d9dac <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   d9e50:	2a01      	cmp	r2, #1
   d9e52:	f04f 0300 	mov.w	r3, #0
   d9e56:	d104      	bne.n	d9e62 <_ZN7RH_RF954initEv+0xda>
	    attachInterrupt(interruptNumber, isr1, RISING);
   d9e58:	9300      	str	r3, [sp, #0]
   d9e5a:	490a      	ldr	r1, [pc, #40]	; (d9e84 <_ZN7RH_RF954initEv+0xfc>)
   d9e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9e60:	e7d0      	b.n	d9e04 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   d9e62:	2a02      	cmp	r2, #2
   d9e64:	d196      	bne.n	d9d94 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   d9e66:	9300      	str	r3, [sp, #0]
   d9e68:	4907      	ldr	r1, [pc, #28]	; (d9e88 <_ZN7RH_RF954initEv+0x100>)
   d9e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9e6e:	2201      	movs	r2, #1
   d9e70:	e7c8      	b.n	d9e04 <_ZN7RH_RF954initEv+0x7c>
   d9e72:	bf00      	nop
   d9e74:	2003e485 	.word	0x2003e485
   d9e78:	2003e488 	.word	0x2003e488
   d9e7c:	000d9b91 	.word	0x000d9b91
   d9e80:	43d90000 	.word	0x43d90000
   d9e84:	000d9ba1 	.word	0x000d9ba1
   d9e88:	000d9bb1 	.word	0x000d9bb1

000d9e8c <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   d9e8c:	2001      	movs	r0, #1
   d9e8e:	4770      	bx	lr

000d9e90 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   d9e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9e92:	4d1f      	ldr	r5, [pc, #124]	; (d9f10 <_ZN14SequentialFileC1Ev+0x80>)
   d9e94:	4b1f      	ldr	r3, [pc, #124]	; (d9f14 <_ZN14SequentialFileC1Ev+0x84>)
   d9e96:	4604      	mov	r4, r0
   d9e98:	4629      	mov	r1, r5
   d9e9a:	f840 3b04 	str.w	r3, [r0], #4
   d9e9e:	f003 facc 	bl	dd43a <_ZN6StringC1EPKc>
   d9ea2:	491d      	ldr	r1, [pc, #116]	; (d9f18 <_ZN14SequentialFileC1Ev+0x88>)
   d9ea4:	f104 0014 	add.w	r0, r4, #20
   d9ea8:	f003 fac7 	bl	dd43a <_ZN6StringC1EPKc>
   d9eac:	4629      	mov	r1, r5
   d9eae:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d9eb2:	f003 fac2 	bl	dd43a <_ZN6StringC1EPKc>
   d9eb6:	2300      	movs	r3, #0
   d9eb8:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d9ebc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   d9ec0:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   d9ec4:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   d9ec8:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   d9ecc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	  _M_start(), _M_finish()
   d9ed0:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d9ed2:	2308      	movs	r3, #8
   d9ed4:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9ed6:	2020      	movs	r0, #32
   d9ed8:	f7fa f8dd 	bl	d4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d9edc:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d9ede:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d9ee0:	3d01      	subs	r5, #1
   d9ee2:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d9ee4:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   d9ee8:	4606      	mov	r6, r0
   d9eea:	f44f 7000 	mov.w	r0, #512	; 0x200
   d9eee:	f7fa f8d2 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d9ef2:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d9ef6:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   d9efa:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   d9efe:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d9f00:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d9f02:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   d9f04:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   d9f06:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   d9f08:	6667      	str	r7, [r4, #100]	; 0x64

}
   d9f0a:	4620      	mov	r0, r4
   d9f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9f0e:	bf00      	nop
   d9f10:	000e0190 	.word	0x000e0190
   d9f14:	000e0018 	.word	0x000e0018
   d9f18:	000dff18 	.word	0x000dff18

000d9f1c <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d9f1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   d9f1e:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d9f20:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   d9f22:	4628      	mov	r0, r5
   d9f24:	f003 fae7 	bl	dd4f6 <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   d9f28:	490e      	ldr	r1, [pc, #56]	; (d9f64 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   d9f2a:	4668      	mov	r0, sp
   d9f2c:	f003 fa85 	bl	dd43a <_ZN6StringC1EPKc>
   d9f30:	4669      	mov	r1, sp
   d9f32:	4628      	mov	r0, r5
   d9f34:	f003 fb4c 	bl	dd5d0 <_ZNK6String8endsWithERKS_>
   d9f38:	4606      	mov	r6, r0
   d9f3a:	4668      	mov	r0, sp
   d9f3c:	f003 fa32 	bl	dd3a4 <_ZN6StringD1Ev>
   d9f40:	b16e      	cbz	r6, d9f5e <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   d9f42:	68e3      	ldr	r3, [r4, #12]
   d9f44:	2200      	movs	r2, #0
   d9f46:	3b01      	subs	r3, #1
   d9f48:	4629      	mov	r1, r5
   d9f4a:	4668      	mov	r0, sp
   d9f4c:	f003 fb56 	bl	dd5fc <_ZNK6String9substringEjj>
   d9f50:	4669      	mov	r1, sp
   d9f52:	4628      	mov	r0, r5
   d9f54:	f003 fac7 	bl	dd4e6 <_ZN6StringaSEOS_>
   d9f58:	4668      	mov	r0, sp
   d9f5a:	f003 fa23 	bl	dd3a4 <_ZN6StringD1Ev>
    }
    return *this; 
};
   d9f5e:	4620      	mov	r0, r4
   d9f60:	b004      	add	sp, #16
   d9f62:	bd70      	pop	{r4, r5, r6, pc}
   d9f64:	000dff1d 	.word	0x000dff1d

000d9f68 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   d9f68:	b510      	push	{r4, lr}
    if (!queueMutex) {
   d9f6a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   d9f6c:	4604      	mov	r4, r0
    if (!queueMutex) {
   d9f6e:	b913      	cbnz	r3, d9f76 <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   d9f70:	303c      	adds	r0, #60	; 0x3c
   d9f72:	f000 fb03 	bl	da57c <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   d9f76:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   d9f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   d9f7c:	f000 bb06 	b.w	da58c <os_mutex_lock>

000d9f80 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   d9f80:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d9f82:	f000 bb0b 	b.w	da59c <os_mutex_unlock>
	...

000d9f88 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   d9f88:	b510      	push	{r4, lr}
   d9f8a:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   d9f8c:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   d9f8e:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   d9f90:	f000 fcb4 	bl	da8fc <stat>
    if (result == 0) {
   d9f94:	b9d0      	cbnz	r0, d9fcc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d9f96:	9b01      	ldr	r3, [sp, #4]
   d9f98:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   d9f9a:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d9f9c:	d506      	bpl.n	d9fac <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   d9f9e:	4915      	ldr	r1, [pc, #84]	; (d9ff4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   d9fa0:	4815      	ldr	r0, [pc, #84]	; (d9ff8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d9fa2:	f7fa f891 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
        return true;
   d9fa6:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   d9fa8:	b016      	add	sp, #88	; 0x58
   d9faa:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   d9fac:	4812      	ldr	r0, [pc, #72]	; (d9ff8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d9fae:	4913      	ldr	r1, [pc, #76]	; (d9ffc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   d9fb0:	f7fb fcdf 	bl	d5972 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   d9fb4:	4620      	mov	r0, r4
   d9fb6:	f004 fea3 	bl	ded00 <unlink>
    result = mkdir(path, 0777);
   d9fba:	f240 11ff 	movw	r1, #511	; 0x1ff
   d9fbe:	4620      	mov	r0, r4
   d9fc0:	f000 fca4 	bl	da90c <mkdir>
    if (result == 0) {
   d9fc4:	b980      	cbnz	r0, d9fe8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   d9fc6:	490e      	ldr	r1, [pc, #56]	; (da000 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   d9fc8:	4622      	mov	r2, r4
   d9fca:	e7e9      	b.n	d9fa0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   d9fcc:	f000 ff00 	bl	dadd0 <__errno>
   d9fd0:	6803      	ldr	r3, [r0, #0]
   d9fd2:	2b02      	cmp	r3, #2
   d9fd4:	d0f1      	beq.n	d9fba <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   d9fd6:	f000 fefb 	bl	dadd0 <__errno>
   d9fda:	490a      	ldr	r1, [pc, #40]	; (da004 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   d9fdc:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   d9fde:	4806      	ldr	r0, [pc, #24]	; (d9ff8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d9fe0:	f7fb fcc7 	bl	d5972 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d9fe4:	2000      	movs	r0, #0
   d9fe6:	e7df      	b.n	d9fa8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   d9fe8:	f000 fef2 	bl	dadd0 <__errno>
   d9fec:	4906      	ldr	r1, [pc, #24]	; (da008 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   d9fee:	6802      	ldr	r2, [r0, #0]
   d9ff0:	e7f5      	b.n	d9fde <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   d9ff2:	bf00      	nop
   d9ff4:	000dff2a 	.word	0x000dff2a
   d9ff8:	2003e494 	.word	0x2003e494
   d9ffc:	000dff47 	.word	0x000dff47
   da000:	000dff78 	.word	0x000dff78
   da004:	000dff64 	.word	0x000dff64
   da008:	000dff87 	.word	0x000dff87

000da00c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   da00c:	b538      	push	{r3, r4, r5, lr}
   da00e:	4615      	mov	r5, r2
   da010:	4604      	mov	r4, r0
    String result = name;
   da012:	f003 fa12 	bl	dd43a <_ZN6StringC1EPKc>

    if (ext && *ext) {
   da016:	b14d      	cbz	r5, da02c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   da018:	782b      	ldrb	r3, [r5, #0]
   da01a:	b13b      	cbz	r3, da02c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   da01c:	4904      	ldr	r1, [pc, #16]	; (da030 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   da01e:	4620      	mov	r0, r4
   da020:	f003 fa92 	bl	dd548 <_ZN6String6concatEPKc>
   da024:	4629      	mov	r1, r5
   da026:	4620      	mov	r0, r4
   da028:	f003 fa8e 	bl	dd548 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   da02c:	4620      	mov	r0, r4
   da02e:	bd38      	pop	{r3, r4, r5, pc}
   da030:	000e0290 	.word	0x000e0290

000da034 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   da034:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   da036:	4605      	mov	r5, r0
   da038:	460e      	mov	r6, r1
   da03a:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   da03c:	6949      	ldr	r1, [r1, #20]
   da03e:	4668      	mov	r0, sp
   da040:	f003 fafc 	bl	dd63c <_ZN6String6formatEPKcz>
        operator const char*() const { return c_str(); }
   da044:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   da046:	b904      	cbnz	r4, da04a <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   da048:	6a74      	ldr	r4, [r6, #36]	; 0x24
   da04a:	4622      	mov	r2, r4
   da04c:	4628      	mov	r0, r5
   da04e:	f7ff ffdd 	bl	da00c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   da052:	4668      	mov	r0, sp
   da054:	f003 f9a6 	bl	dd3a4 <_ZN6StringD1Ev>
}
   da058:	4628      	mov	r0, r5
   da05a:	b004      	add	sp, #16
   da05c:	bd70      	pop	{r4, r5, r6, pc}
	...

000da060 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   da060:	b570      	push	{r4, r5, r6, lr}
   da062:	460c      	mov	r4, r1
   da064:	b08e      	sub	sp, #56	; 0x38
    String result;
   da066:	491a      	ldr	r1, [pc, #104]	; (da0d0 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   da068:	e9cd 3200 	strd	r3, r2, [sp]
   da06c:	4605      	mov	r5, r0
    String result;
   da06e:	f003 f9e4 	bl	dd43a <_ZN6StringC1EPKc>
    result.reserve(dirPath.length() + pattern.length() + 4);
   da072:	69e0      	ldr	r0, [r4, #28]
   da074:	68e1      	ldr	r1, [r4, #12]
   da076:	4401      	add	r1, r0
   da078:	3104      	adds	r1, #4
   da07a:	4628      	mov	r0, r5
   da07c:	f003 f9b0 	bl	dd3e0 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   da080:	1d21      	adds	r1, r4, #4
   da082:	a806      	add	r0, sp, #24
   da084:	f003 fa24 	bl	dd4d0 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   da088:	4912      	ldr	r1, [pc, #72]	; (da0d4 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   da08a:	a802      	add	r0, sp, #8
   da08c:	f003 f9d5 	bl	dd43a <_ZN6StringC1EPKc>
   da090:	a902      	add	r1, sp, #8
   da092:	a806      	add	r0, sp, #24
   da094:	f003 fa69 	bl	dd56a <_ZplRK15StringSumHelperRK6String>
   da098:	e9dd 3200 	ldrd	r3, r2, [sp]
   da09c:	4606      	mov	r6, r0
   da09e:	4621      	mov	r1, r4
   da0a0:	a80a      	add	r0, sp, #40	; 0x28
   da0a2:	f7ff ffc7 	bl	da034 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   da0a6:	a90a      	add	r1, sp, #40	; 0x28
   da0a8:	4630      	mov	r0, r6
   da0aa:	f003 fa5e 	bl	dd56a <_ZplRK15StringSumHelperRK6String>
   da0ae:	4601      	mov	r1, r0
   da0b0:	4628      	mov	r0, r5
   da0b2:	f003 f9fe 	bl	dd4b2 <_ZN6StringaSERKS_>
   da0b6:	a80a      	add	r0, sp, #40	; 0x28
   da0b8:	f003 f974 	bl	dd3a4 <_ZN6StringD1Ev>
   da0bc:	a802      	add	r0, sp, #8
   da0be:	f003 f971 	bl	dd3a4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   da0c2:	a806      	add	r0, sp, #24
   da0c4:	f003 f96e 	bl	dd3a4 <_ZN6StringD1Ev>
}
   da0c8:	4628      	mov	r0, r5
   da0ca:	b00e      	add	sp, #56	; 0x38
   da0cc:	bd70      	pop	{r4, r5, r6, pc}
   da0ce:	bf00      	nop
   da0d0:	000e0190 	.word	0x000e0190
   da0d4:	000dff1d 	.word	0x000dff1d

000da0d8 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   da0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   da0dc:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   da0de:	b08e      	sub	sp, #56	; 0x38
   da0e0:	4605      	mov	r5, r0
   da0e2:	460f      	mov	r7, r1
    if (allExtensions) {
   da0e4:	2a00      	cmp	r2, #0
   da0e6:	d04a      	beq.n	da17e <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   da0e8:	6840      	ldr	r0, [r0, #4]
   da0ea:	f000 fc1f 	bl	da92c <opendir>
        if (dir) {
   da0ee:	4606      	mov	r6, r0
   da0f0:	2800      	cmp	r0, #0
   da0f2:	d041      	beq.n	da178 <_ZN14SequentialFile13removeFileNumEib+0xa0>
                        String path = dirPath + String("/") + ent->d_name;
   da0f4:	f8df a0b0 	ldr.w	sl, [pc, #176]	; da1a8 <_ZN14SequentialFile13removeFileNumEib+0xd0>
                        _log.trace("removed %s", path.c_str());
   da0f8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; da1a0 <_ZN14SequentialFile13removeFileNumEib+0xc8>
   da0fc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; da1a4 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   da100:	4630      	mov	r0, r6
   da102:	f000 fc1b 	bl	da93c <readdir>
                if (!ent) {
   da106:	2800      	cmp	r0, #0
   da108:	d033      	beq.n	da172 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   da10a:	7a82      	ldrb	r2, [r0, #10]
   da10c:	2a08      	cmp	r2, #8
   da10e:	d1f7      	bne.n	da100 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   da110:	f100 040b 	add.w	r4, r0, #11
   da114:	6969      	ldr	r1, [r5, #20]
   da116:	aa01      	add	r2, sp, #4
   da118:	4620      	mov	r0, r4
   da11a:	f000 fe31 	bl	dad80 <sscanf>
   da11e:	2801      	cmp	r0, #1
   da120:	d1ee      	bne.n	da100 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   da122:	9b01      	ldr	r3, [sp, #4]
   da124:	429f      	cmp	r7, r3
   da126:	d1eb      	bne.n	da100 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   da128:	1d29      	adds	r1, r5, #4
   da12a:	a806      	add	r0, sp, #24
   da12c:	f003 f9d0 	bl	dd4d0 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   da130:	4651      	mov	r1, sl
   da132:	a80a      	add	r0, sp, #40	; 0x28
   da134:	f003 f981 	bl	dd43a <_ZN6StringC1EPKc>
   da138:	a90a      	add	r1, sp, #40	; 0x28
   da13a:	a806      	add	r0, sp, #24
   da13c:	f003 fa15 	bl	dd56a <_ZplRK15StringSumHelperRK6String>
   da140:	4621      	mov	r1, r4
   da142:	f003 fa1e 	bl	dd582 <_ZplRK15StringSumHelperPKc>
   da146:	4601      	mov	r1, r0
   da148:	a802      	add	r0, sp, #8
   da14a:	f003 f9c1 	bl	dd4d0 <_ZN6StringC1ERKS_>
   da14e:	a80a      	add	r0, sp, #40	; 0x28
   da150:	f003 f928 	bl	dd3a4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   da154:	a806      	add	r0, sp, #24
   da156:	f003 f925 	bl	dd3a4 <_ZN6StringD1Ev>
                        unlink(path);
   da15a:	9802      	ldr	r0, [sp, #8]
   da15c:	f004 fdd0 	bl	ded00 <unlink>
                        _log.trace("removed %s", path.c_str());
   da160:	4640      	mov	r0, r8
   da162:	9a02      	ldr	r2, [sp, #8]
   da164:	4649      	mov	r1, r9
   da166:	f7fb fbed 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   da16a:	a802      	add	r0, sp, #8
   da16c:	f003 f91a 	bl	dd3a4 <_ZN6StringD1Ev>
                    continue;
   da170:	e7c6      	b.n	da100 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   da172:	4630      	mov	r0, r6
   da174:	f000 fbea 	bl	da94c <closedir>
}
   da178:	b00e      	add	sp, #56	; 0x38
   da17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        String path = getPathForFileNum(fileNum); 
   da17e:	460a      	mov	r2, r1
   da180:	4601      	mov	r1, r0
   da182:	a80a      	add	r0, sp, #40	; 0x28
   da184:	f7ff ff6c 	bl	da060 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   da188:	980a      	ldr	r0, [sp, #40]	; 0x28
   da18a:	f004 fdb9 	bl	ded00 <unlink>
        _log.trace("removed %s", path.c_str());
   da18e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   da190:	4903      	ldr	r1, [pc, #12]	; (da1a0 <_ZN14SequentialFile13removeFileNumEib+0xc8>)
   da192:	4804      	ldr	r0, [pc, #16]	; (da1a4 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   da194:	f7fb fbd6 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   da198:	a80a      	add	r0, sp, #40	; 0x28
   da19a:	f003 f903 	bl	dd3a4 <_ZN6StringD1Ev>
}
   da19e:	e7eb      	b.n	da178 <_ZN14SequentialFile13removeFileNumEib+0xa0>
   da1a0:	000dff1f 	.word	0x000dff1f
   da1a4:	2003e494 	.word	0x2003e494
   da1a8:	000dff1d 	.word	0x000dff1d

000da1ac <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   da1ac:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   da1ae:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   da1b0:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   da1b2:	b163      	cbz	r3, da1ce <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   da1b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   da1b6:	6945      	ldr	r5, [r0, #20]
   da1b8:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   da1ba:	42ae      	cmp	r6, r5
   da1bc:	d904      	bls.n	da1c8 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x1c>
	::operator delete(__p);
   da1be:	f855 0b04 	ldr.w	r0, [r5], #4
   da1c2:	f7f9 ff6c 	bl	d409e <_ZdlPv>
   da1c6:	e7f8      	b.n	da1ba <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   da1c8:	6820      	ldr	r0, [r4, #0]
   da1ca:	f7f9 ff68 	bl	d409e <_ZdlPv>
    }
   da1ce:	4620      	mov	r0, r4
   da1d0:	bd70      	pop	{r4, r5, r6, pc}
	...

000da1d4 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   da1d4:	b510      	push	{r4, lr}
   da1d6:	4b09      	ldr	r3, [pc, #36]	; (da1fc <_ZN14SequentialFileD1Ev+0x28>)
   da1d8:	4604      	mov	r4, r0
   da1da:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   da1de:	f7ff ffe5 	bl	da1ac <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   da1e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   da1e6:	f003 f8dd 	bl	dd3a4 <_ZN6StringD1Ev>
   da1ea:	f104 0014 	add.w	r0, r4, #20
   da1ee:	f003 f8d9 	bl	dd3a4 <_ZN6StringD1Ev>
   da1f2:	1d20      	adds	r0, r4, #4
   da1f4:	f003 f8d6 	bl	dd3a4 <_ZN6StringD1Ev>
}
   da1f8:	4620      	mov	r0, r4
   da1fa:	bd10      	pop	{r4, pc}
   da1fc:	000e0018 	.word	0x000e0018

000da200 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   da200:	b510      	push	{r4, lr}
   da202:	4604      	mov	r4, r0
}
   da204:	f7ff ffe6 	bl	da1d4 <_ZN14SequentialFileD1Ev>
   da208:	4620      	mov	r0, r4
   da20a:	2168      	movs	r1, #104	; 0x68
   da20c:	f003 fef4 	bl	ddff8 <_ZdlPvj>
   da210:	4620      	mov	r0, r4
   da212:	bd10      	pop	{r4, pc}

000da214 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   da214:	68c3      	ldr	r3, [r0, #12]
   da216:	68ca      	ldr	r2, [r1, #12]
   da218:	1a9b      	subs	r3, r3, r2
   da21a:	109b      	asrs	r3, r3, #2
   da21c:	1e5a      	subs	r2, r3, #1
   da21e:	e9d0 3000 	ldrd	r3, r0, [r0]
   da222:	1a1b      	subs	r3, r3, r0
   da224:	109b      	asrs	r3, r3, #2
   da226:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   da22a:	6888      	ldr	r0, [r1, #8]
   da22c:	680a      	ldr	r2, [r1, #0]
   da22e:	1a80      	subs	r0, r0, r2
    }
   da230:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   da234:	4770      	bx	lr
	...

000da238 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>:
      deque<_Tp, _Alloc>::
   da238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da23c:	4604      	mov	r4, r0
   da23e:	4688      	mov	r8, r1
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   da240:	f100 0108 	add.w	r1, r0, #8
   da244:	3018      	adds	r0, #24
   da246:	f7ff ffe5 	bl	da214 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
	if (size() == max_size())
   da24a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   da24e:	4298      	cmp	r0, r3
   da250:	d102      	bne.n	da258 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x20>
	  __throw_length_error(
   da252:	4837      	ldr	r0, [pc, #220]	; (da330 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xf8>)
   da254:	f003 fed9 	bl	de00a <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   da258:	6a62      	ldr	r2, [r4, #36]	; 0x24
   da25a:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   da25c:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   da25e:	1a11      	subs	r1, r2, r0
   da260:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   da264:	2901      	cmp	r1, #1
   da266:	d821      	bhi.n	da2ac <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x74>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   da268:	6961      	ldr	r1, [r4, #20]
   da26a:	1a57      	subs	r7, r2, r1
   da26c:	10be      	asrs	r6, r7, #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   da26e:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   da270:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   da274:	d936      	bls.n	da2e4 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xac>
					 - __new_num_nodes) / 2
   da276:	1b5d      	subs	r5, r3, r5
   da278:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   da27a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   da27e:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   da280:	42a9      	cmp	r1, r5
   da282:	eba3 0201 	sub.w	r2, r3, r1
   da286:	d927      	bls.n	da2d8 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xa0>
	  if (_Num)
   da288:	4299      	cmp	r1, r3
   da28a:	d002      	beq.n	da292 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   da28c:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   da28e:	f004 fb4d 	bl	de92c <memmove>
	_M_node = __new_node;
   da292:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   da294:	682b      	ldr	r3, [r5, #0]
   da296:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   da298:	f503 7300 	add.w	r3, r3, #512	; 0x200
   da29c:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   da29e:	19eb      	adds	r3, r5, r7
	_M_node = __new_node;
   da2a0:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   da2a2:	59eb      	ldr	r3, [r5, r7]
   da2a4:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   da2a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   da2aa:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da2ac:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   da2b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   da2b2:	f7f9 fef0 	bl	d4096 <_Znwj>
   da2b6:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   da2b8:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da2ba:	b113      	cbz	r3, da2c2 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x8a>
   da2bc:	f8d8 2000 	ldr.w	r2, [r8]
   da2c0:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   da2c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da2c4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   da2c6:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   da2c8:	685b      	ldr	r3, [r3, #4]
   da2ca:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   da2cc:	f503 7200 	add.w	r2, r3, #512	; 0x200
   da2d0:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   da2d2:	61a3      	str	r3, [r4, #24]
      }
   da2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   da2d8:	4299      	cmp	r1, r3
   da2da:	d0da      	beq.n	da292 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   da2dc:	1d38      	adds	r0, r7, #4
   da2de:	1a80      	subs	r0, r0, r2
   da2e0:	4428      	add	r0, r5
   da2e2:	e7d4      	b.n	da28e <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x56>
	  size_type __new_map_size = this->_M_impl._M_map_size
   da2e4:	f103 0902 	add.w	r9, r3, #2
   da2e8:	2b01      	cmp	r3, #1
   da2ea:	bf2c      	ite	cs
   da2ec:	4499      	addcs	r9, r3
   da2ee:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->max_size())
   da2f2:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   da2f6:	d301      	bcc.n	da2fc <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xc4>
	  std::__throw_bad_alloc();
   da2f8:	f003 fe84 	bl	de004 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da2fc:	ea4f 0089 	mov.w	r0, r9, lsl #2
   da300:	f7f9 fec9 	bl	d4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   da304:	6a62      	ldr	r2, [r4, #36]	; 0x24
   da306:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   da308:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   da30c:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   da30e:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   da310:	4291      	cmp	r1, r2
   da312:	4682      	mov	sl, r0
   da314:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   da318:	d003      	beq.n	da322 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xea>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   da31a:	1a52      	subs	r2, r2, r1
   da31c:	4628      	mov	r0, r5
   da31e:	f004 fb05 	bl	de92c <memmove>
	::operator delete(__p);
   da322:	6820      	ldr	r0, [r4, #0]
   da324:	f7f9 febb 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   da328:	e9c4 a900 	strd	sl, r9, [r4]
   da32c:	e7b1      	b.n	da292 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
   da32e:	bf00      	nop
   da330:	000dfba1 	.word	0x000dfba1

000da334 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   da334:	b538      	push	{r3, r4, r5, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   da336:	6a05      	ldr	r5, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   da338:	6982      	ldr	r2, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   da33a:	3d04      	subs	r5, #4
	if (this->_M_impl._M_finish._M_cur
   da33c:	42aa      	cmp	r2, r5
      push_back(const value_type& __x)
   da33e:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish._M_cur
   da340:	d006      	beq.n	da350 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da342:	b10a      	cbz	r2, da348 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x14>
	    _Alloc_traits::construct(this->_M_impl,
   da344:	6809      	ldr	r1, [r1, #0]
   da346:	6011      	str	r1, [r2, #0]
	    ++this->_M_impl._M_finish._M_cur;
   da348:	699a      	ldr	r2, [r3, #24]
   da34a:	3204      	adds	r2, #4
   da34c:	619a      	str	r2, [r3, #24]
      }
   da34e:	bd38      	pop	{r3, r4, r5, pc}
	  _M_push_back_aux(__x);
   da350:	f7ff ff72 	bl	da238 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>
      }
   da354:	e7fb      	b.n	da34e <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1a>
	...

000da358 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   da358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   da35c:	68c3      	ldr	r3, [r0, #12]
   da35e:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   da360:	b086      	sub	sp, #24
   da362:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   da364:	d808      	bhi.n	da378 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   da366:	4934      	ldr	r1, [pc, #208]	; (da438 <_ZN14SequentialFile7scanDirEv+0xe0>)
   da368:	4834      	ldr	r0, [pc, #208]	; (da43c <_ZN14SequentialFile7scanDirEv+0xe4>)
   da36a:	f7fb fb02 	bl	d5972 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   da36e:	2600      	movs	r6, #0
}
   da370:	4630      	mov	r0, r6
   da372:	b006      	add	sp, #24
   da374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   da378:	6840      	ldr	r0, [r0, #4]
   da37a:	f7ff fe05 	bl	d9f88 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   da37e:	4606      	mov	r6, r0
   da380:	2800      	cmp	r0, #0
   da382:	d0f4      	beq.n	da36e <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   da384:	6963      	ldr	r3, [r4, #20]
   da386:	6862      	ldr	r2, [r4, #4]
   da388:	492d      	ldr	r1, [pc, #180]	; (da440 <_ZN14SequentialFile7scanDirEv+0xe8>)
   da38a:	482c      	ldr	r0, [pc, #176]	; (da43c <_ZN14SequentialFile7scanDirEv+0xe4>)
   da38c:	f7fb fada 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   da390:	6860      	ldr	r0, [r4, #4]
   da392:	f000 facb 	bl	da92c <opendir>
    if (!dir) {
   da396:	4607      	mov	r7, r0
   da398:	2800      	cmp	r0, #0
   da39a:	d0e8      	beq.n	da36e <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   da39c:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   da39e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; da444 <_ZN14SequentialFile7scanDirEv+0xec>
   da3a2:	f8df 8098 	ldr.w	r8, [pc, #152]	; da43c <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   da3a6:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   da3a8:	4638      	mov	r0, r7
   da3aa:	f000 fac7 	bl	da93c <readdir>
        if (!ent) {
   da3ae:	4605      	mov	r5, r0
   da3b0:	2800      	cmp	r0, #0
   da3b2:	d039      	beq.n	da428 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   da3b4:	7a83      	ldrb	r3, [r0, #10]
   da3b6:	2b08      	cmp	r3, #8
   da3b8:	d1f6      	bne.n	da3a8 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   da3ba:	350b      	adds	r5, #11
   da3bc:	6961      	ldr	r1, [r4, #20]
   da3be:	aa01      	add	r2, sp, #4
   da3c0:	4628      	mov	r0, r5
   da3c2:	f000 fcdd 	bl	dad80 <sscanf>
   da3c6:	2801      	cmp	r0, #1
   da3c8:	d1ee      	bne.n	da3a8 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   da3ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   da3cc:	b17b      	cbz	r3, da3ee <_ZN14SequentialFile7scanDirEv+0x96>
   da3ce:	4629      	mov	r1, r5
   da3d0:	a802      	add	r0, sp, #8
   da3d2:	f003 f832 	bl	dd43a <_ZN6StringC1EPKc>
   da3d6:	f104 0124 	add.w	r1, r4, #36	; 0x24
   da3da:	a802      	add	r0, sp, #8
   da3dc:	f003 f8f8 	bl	dd5d0 <_ZNK6String8endsWithERKS_>
   da3e0:	4682      	mov	sl, r0
   da3e2:	a802      	add	r0, sp, #8
   da3e4:	f002 ffde 	bl	dd3a4 <_ZN6StringD1Ev>
   da3e8:	f1ba 0f00 	cmp.w	sl, #0
   da3ec:	d0dc      	beq.n	da3a8 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   da3ee:	6823      	ldr	r3, [r4, #0]
   da3f0:	4629      	mov	r1, r5
   da3f2:	689b      	ldr	r3, [r3, #8]
   da3f4:	4620      	mov	r0, r4
   da3f6:	4798      	blx	r3
   da3f8:	2800      	cmp	r0, #0
   da3fa:	d0d5      	beq.n	da3a8 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   da3fc:	9a01      	ldr	r2, [sp, #4]
   da3fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da400:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   da402:	bfb8      	it	lt
   da404:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   da406:	462b      	mov	r3, r5
   da408:	4649      	mov	r1, r9
   da40a:	4640      	mov	r0, r8
   da40c:	f7fb fa9a 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   da410:	4620      	mov	r0, r4
   da412:	f7ff fda9 	bl	d9f68 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   da416:	f104 0040 	add.w	r0, r4, #64	; 0x40
   da41a:	a901      	add	r1, sp, #4
   da41c:	f7ff ff8a 	bl	da334 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   da420:	4620      	mov	r0, r4
   da422:	f7ff fdad 	bl	d9f80 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   da426:	e7bf      	b.n	da3a8 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   da428:	4638      	mov	r0, r7
   da42a:	f000 fa8f 	bl	da94c <closedir>
    scanDirCompleted = true;
   da42e:	2301      	movs	r3, #1
   da430:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   da434:	e79c      	b.n	da370 <_ZN14SequentialFile7scanDirEv+0x18>
   da436:	bf00      	nop
   da438:	000dff9d 	.word	0x000dff9d
   da43c:	2003e494 	.word	0x2003e494
   da440:	000dffb2 	.word	0x000dffb2
   da444:	000dffce 	.word	0x000dffce

000da448 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   da448:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   da44a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   da44e:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   da450:	b90b      	cbnz	r3, da456 <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   da452:	f7ff ff81 	bl	da358 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   da456:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   da458:	3001      	adds	r0, #1
   da45a:	63a0      	str	r0, [r4, #56]	; 0x38
}
   da45c:	bd10      	pop	{r4, pc}
	...

000da460 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   da460:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   da462:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   da466:	4604      	mov	r4, r0
   da468:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   da46a:	b90b      	cbnz	r3, da470 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   da46c:	f7ff ff74 	bl	da358 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   da470:	4620      	mov	r0, r4
   da472:	f7ff fd79 	bl	d9f68 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   da476:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   da478:	6da2      	ldr	r2, [r4, #88]	; 0x58
   da47a:	4293      	cmp	r3, r2
   da47c:	d01e      	beq.n	da4bc <_ZN14SequentialFile16getFileFromQueueEb+0x5c>
        fileNum = queue.front();
   da47e:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   da480:	b12e      	cbz	r6, da48e <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
	    != this->_M_impl._M_start._M_last - 1)
   da482:	6d22      	ldr	r2, [r4, #80]	; 0x50
   da484:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   da486:	4293      	cmp	r3, r2
   da488:	d00c      	beq.n	da4a4 <_ZN14SequentialFile16getFileFromQueueEb+0x44>
	    ++this->_M_impl._M_start._M_cur;
   da48a:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   da48c:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   da48e:	4620      	mov	r0, r4
   da490:	f7ff fd76 	bl	d9f80 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   da494:	b125      	cbz	r5, da4a0 <_ZN14SequentialFile16getFileFromQueueEb+0x40>
        _log.trace("getFileFromQueue returned %d", fileNum);
   da496:	490a      	ldr	r1, [pc, #40]	; (da4c0 <_ZN14SequentialFile16getFileFromQueueEb+0x60>)
   da498:	480a      	ldr	r0, [pc, #40]	; (da4c4 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   da49a:	462a      	mov	r2, r5
   da49c:	f7fb fa52 	bl	d5944 <_ZNK5spark6Logger5traceEPKcz>
}
   da4a0:	4628      	mov	r0, r5
   da4a2:	bd70      	pop	{r4, r5, r6, pc}
	::operator delete(__p);
   da4a4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   da4a6:	f7f9 fdfa 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   da4aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
   da4ac:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   da4ae:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   da4b0:	685b      	ldr	r3, [r3, #4]
   da4b2:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   da4b4:	f503 7200 	add.w	r2, r3, #512	; 0x200
   da4b8:	6522      	str	r2, [r4, #80]	; 0x50
   da4ba:	e7e7      	b.n	da48c <_ZN14SequentialFile16getFileFromQueueEb+0x2c>
    int fileNum = 0;
   da4bc:	2500      	movs	r5, #0
   da4be:	e7e6      	b.n	da48e <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
   da4c0:	000dffe4 	.word	0x000dffe4
   da4c4:	2003e494 	.word	0x2003e494

000da4c8 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   da4c8:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   da4ca:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   da4ce:	9101      	str	r1, [sp, #4]
   da4d0:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   da4d2:	b90b      	cbnz	r3, da4d8 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   da4d4:	f7ff ff40 	bl	da358 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   da4d8:	9b01      	ldr	r3, [sp, #4]
   da4da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   da4dc:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   da4de:	bfb8      	it	lt
   da4e0:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   da4e2:	4620      	mov	r0, r4
   da4e4:	f7ff fd40 	bl	d9f68 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   da4e8:	a901      	add	r1, sp, #4
   da4ea:	f104 0040 	add.w	r0, r4, #64	; 0x40
   da4ee:	f7ff ff21 	bl	da334 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   da4f2:	4620      	mov	r0, r4
   da4f4:	f7ff fd44 	bl	d9f80 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   da4f8:	b002      	add	sp, #8
   da4fa:	bd10      	pop	{r4, pc}

000da4fc <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   da4fc:	b538      	push	{r3, r4, r5, lr}
   da4fe:	4604      	mov	r4, r0
    queueMutexLock();
   da500:	f7ff fd32 	bl	d9f68 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   da504:	f104 0148 	add.w	r1, r4, #72	; 0x48
   da508:	f104 0058 	add.w	r0, r4, #88	; 0x58
   da50c:	f7ff fe82 	bl	da214 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
   da510:	4605      	mov	r5, r0
    queueMutexUnlock();
   da512:	4620      	mov	r0, r4
   da514:	f7ff fd34 	bl	d9f80 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   da518:	4628      	mov	r0, r5
   da51a:	bd38      	pop	{r3, r4, r5, pc}

000da51c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   da51c:	4b01      	ldr	r3, [pc, #4]	; (da524 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   da51e:	4a02      	ldr	r2, [pc, #8]	; (da528 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   da520:	601a      	str	r2, [r3, #0]
}
   da522:	4770      	bx	lr
   da524:	2003e494 	.word	0x2003e494
   da528:	000e0001 	.word	0x000e0001

000da52c <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   da52c:	b508      	push	{r3, lr}
   da52e:	4b02      	ldr	r3, [pc, #8]	; (da538 <cellular_signal+0xc>)
   da530:	681b      	ldr	r3, [r3, #0]
   da532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da534:	9301      	str	r3, [sp, #4]
   da536:	bd08      	pop	{r3, pc}
   da538:	00030274 	.word	0x00030274

000da53c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   da53c:	b508      	push	{r3, lr}
   da53e:	4b02      	ldr	r3, [pc, #8]	; (da548 <os_thread_create+0xc>)
   da540:	681b      	ldr	r3, [r3, #0]
   da542:	685b      	ldr	r3, [r3, #4]
   da544:	9301      	str	r3, [sp, #4]
   da546:	bd08      	pop	{r3, pc}
   da548:	00030248 	.word	0x00030248

000da54c <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   da54c:	b508      	push	{r3, lr}
   da54e:	4b02      	ldr	r3, [pc, #8]	; (da558 <os_thread_is_current+0xc>)
   da550:	681b      	ldr	r3, [r3, #0]
   da552:	689b      	ldr	r3, [r3, #8]
   da554:	9301      	str	r3, [sp, #4]
   da556:	bd08      	pop	{r3, pc}
   da558:	00030248 	.word	0x00030248

000da55c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   da55c:	b508      	push	{r3, lr}
   da55e:	4b02      	ldr	r3, [pc, #8]	; (da568 <os_thread_join+0xc>)
   da560:	681b      	ldr	r3, [r3, #0]
   da562:	691b      	ldr	r3, [r3, #16]
   da564:	9301      	str	r3, [sp, #4]
   da566:	bd08      	pop	{r3, pc}
   da568:	00030248 	.word	0x00030248

000da56c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   da56c:	b508      	push	{r3, lr}
   da56e:	4b02      	ldr	r3, [pc, #8]	; (da578 <os_thread_cleanup+0xc>)
   da570:	681b      	ldr	r3, [r3, #0]
   da572:	695b      	ldr	r3, [r3, #20]
   da574:	9301      	str	r3, [sp, #4]
   da576:	bd08      	pop	{r3, pc}
   da578:	00030248 	.word	0x00030248

000da57c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   da57c:	b508      	push	{r3, lr}
   da57e:	4b02      	ldr	r3, [pc, #8]	; (da588 <os_mutex_create+0xc>)
   da580:	681b      	ldr	r3, [r3, #0]
   da582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da584:	9301      	str	r3, [sp, #4]
   da586:	bd08      	pop	{r3, pc}
   da588:	00030248 	.word	0x00030248

000da58c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   da58c:	b508      	push	{r3, lr}
   da58e:	4b02      	ldr	r3, [pc, #8]	; (da598 <os_mutex_lock+0xc>)
   da590:	681b      	ldr	r3, [r3, #0]
   da592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   da594:	9301      	str	r3, [sp, #4]
   da596:	bd08      	pop	{r3, pc}
   da598:	00030248 	.word	0x00030248

000da59c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   da59c:	b508      	push	{r3, lr}
   da59e:	4b02      	ldr	r3, [pc, #8]	; (da5a8 <os_mutex_unlock+0xc>)
   da5a0:	681b      	ldr	r3, [r3, #0]
   da5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da5a4:	9301      	str	r3, [sp, #4]
   da5a6:	bd08      	pop	{r3, pc}
   da5a8:	00030248 	.word	0x00030248

000da5ac <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   da5ac:	b508      	push	{r3, lr}
   da5ae:	4b02      	ldr	r3, [pc, #8]	; (da5b8 <os_mutex_recursive_create+0xc>)
   da5b0:	681b      	ldr	r3, [r3, #0]
   da5b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da5b4:	9301      	str	r3, [sp, #4]
   da5b6:	bd08      	pop	{r3, pc}
   da5b8:	00030248 	.word	0x00030248

000da5bc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   da5bc:	b508      	push	{r3, lr}
   da5be:	4b02      	ldr	r3, [pc, #8]	; (da5c8 <os_mutex_recursive_destroy+0xc>)
   da5c0:	681b      	ldr	r3, [r3, #0]
   da5c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   da5c4:	9301      	str	r3, [sp, #4]
   da5c6:	bd08      	pop	{r3, pc}
   da5c8:	00030248 	.word	0x00030248

000da5cc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   da5cc:	b508      	push	{r3, lr}
   da5ce:	4b02      	ldr	r3, [pc, #8]	; (da5d8 <os_mutex_recursive_lock+0xc>)
   da5d0:	681b      	ldr	r3, [r3, #0]
   da5d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   da5d4:	9301      	str	r3, [sp, #4]
   da5d6:	bd08      	pop	{r3, pc}
   da5d8:	00030248 	.word	0x00030248

000da5dc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   da5dc:	b508      	push	{r3, lr}
   da5de:	4b02      	ldr	r3, [pc, #8]	; (da5e8 <os_mutex_recursive_unlock+0xc>)
   da5e0:	681b      	ldr	r3, [r3, #0]
   da5e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   da5e4:	9301      	str	r3, [sp, #4]
   da5e6:	bd08      	pop	{r3, pc}
   da5e8:	00030248 	.word	0x00030248

000da5ec <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   da5ec:	b508      	push	{r3, lr}
   da5ee:	4b02      	ldr	r3, [pc, #8]	; (da5f8 <os_thread_exit+0xc>)
   da5f0:	681b      	ldr	r3, [r3, #0]
   da5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   da5f4:	9301      	str	r3, [sp, #4]
   da5f6:	bd08      	pop	{r3, pc}
   da5f8:	00030248 	.word	0x00030248

000da5fc <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   da5fc:	b508      	push	{r3, lr}
   da5fe:	4b02      	ldr	r3, [pc, #8]	; (da608 <HAL_Feature_Set+0xc>)
   da600:	681b      	ldr	r3, [r3, #0]
   da602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   da604:	9301      	str	r3, [sp, #4]
   da606:	bd08      	pop	{r3, pc}
   da608:	00030234 	.word	0x00030234

000da60c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   da60c:	b508      	push	{r3, lr}
   da60e:	4b02      	ldr	r3, [pc, #8]	; (da618 <HAL_RNG_GetRandomNumber+0xc>)
   da610:	681b      	ldr	r3, [r3, #0]
   da612:	685b      	ldr	r3, [r3, #4]
   da614:	9301      	str	r3, [sp, #4]
   da616:	bd08      	pop	{r3, pc}
   da618:	00030218 	.word	0x00030218

000da61c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   da61c:	b508      	push	{r3, lr}
   da61e:	4b02      	ldr	r3, [pc, #8]	; (da628 <HAL_Delay_Milliseconds+0xc>)
   da620:	681b      	ldr	r3, [r3, #0]
   da622:	689b      	ldr	r3, [r3, #8]
   da624:	9301      	str	r3, [sp, #4]
   da626:	bd08      	pop	{r3, pc}
   da628:	00030218 	.word	0x00030218

000da62c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   da62c:	b508      	push	{r3, lr}
   da62e:	4b02      	ldr	r3, [pc, #8]	; (da638 <HAL_Delay_Microseconds+0xc>)
   da630:	681b      	ldr	r3, [r3, #0]
   da632:	68db      	ldr	r3, [r3, #12]
   da634:	9301      	str	r3, [sp, #4]
   da636:	bd08      	pop	{r3, pc}
   da638:	00030218 	.word	0x00030218

000da63c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   da63c:	b508      	push	{r3, lr}
   da63e:	4b02      	ldr	r3, [pc, #8]	; (da648 <HAL_Timer_Get_Milli_Seconds+0xc>)
   da640:	681b      	ldr	r3, [r3, #0]
   da642:	695b      	ldr	r3, [r3, #20]
   da644:	9301      	str	r3, [sp, #4]
   da646:	bd08      	pop	{r3, pc}
   da648:	00030218 	.word	0x00030218

000da64c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   da64c:	b508      	push	{r3, lr}
   da64e:	4b02      	ldr	r3, [pc, #8]	; (da658 <hal_rtc_time_is_valid+0xc>)
   da650:	681b      	ldr	r3, [r3, #0]
   da652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   da654:	9301      	str	r3, [sp, #4]
   da656:	bd08      	pop	{r3, pc}
   da658:	00030218 	.word	0x00030218

000da65c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   da65c:	b508      	push	{r3, lr}
   da65e:	4b02      	ldr	r3, [pc, #8]	; (da668 <hal_timer_millis+0xc>)
   da660:	681b      	ldr	r3, [r3, #0]
   da662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   da664:	9301      	str	r3, [sp, #4]
   da666:	bd08      	pop	{r3, pc}
   da668:	00030218 	.word	0x00030218

000da66c <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   da66c:	b508      	push	{r3, lr}
   da66e:	4b02      	ldr	r3, [pc, #8]	; (da678 <hal_rtc_get_time+0xc>)
   da670:	681b      	ldr	r3, [r3, #0]
   da672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   da674:	9301      	str	r3, [sp, #4]
   da676:	bd08      	pop	{r3, pc}
   da678:	00030218 	.word	0x00030218

000da67c <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   da67c:	b508      	push	{r3, lr}
   da67e:	4b02      	ldr	r3, [pc, #8]	; (da688 <hal_rtc_set_time+0xc>)
   da680:	681b      	ldr	r3, [r3, #0]
   da682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   da684:	9301      	str	r3, [sp, #4]
   da686:	bd08      	pop	{r3, pc}
   da688:	00030218 	.word	0x00030218

000da68c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   da68c:	b508      	push	{r3, lr}
   da68e:	4b02      	ldr	r3, [pc, #8]	; (da698 <HAL_Validate_Pin_Function+0xc>)
   da690:	681b      	ldr	r3, [r3, #0]
   da692:	685b      	ldr	r3, [r3, #4]
   da694:	9301      	str	r3, [sp, #4]
   da696:	bd08      	pop	{r3, pc}
   da698:	0003022c 	.word	0x0003022c

000da69c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   da69c:	b508      	push	{r3, lr}
   da69e:	4b02      	ldr	r3, [pc, #8]	; (da6a8 <HAL_Pin_Mode+0xc>)
   da6a0:	681b      	ldr	r3, [r3, #0]
   da6a2:	689b      	ldr	r3, [r3, #8]
   da6a4:	9301      	str	r3, [sp, #4]
   da6a6:	bd08      	pop	{r3, pc}
   da6a8:	0003022c 	.word	0x0003022c

000da6ac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   da6ac:	b508      	push	{r3, lr}
   da6ae:	4b02      	ldr	r3, [pc, #8]	; (da6b8 <HAL_Get_Pin_Mode+0xc>)
   da6b0:	681b      	ldr	r3, [r3, #0]
   da6b2:	68db      	ldr	r3, [r3, #12]
   da6b4:	9301      	str	r3, [sp, #4]
   da6b6:	bd08      	pop	{r3, pc}
   da6b8:	0003022c 	.word	0x0003022c

000da6bc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   da6bc:	b508      	push	{r3, lr}
   da6be:	4b02      	ldr	r3, [pc, #8]	; (da6c8 <HAL_GPIO_Write+0xc>)
   da6c0:	681b      	ldr	r3, [r3, #0]
   da6c2:	691b      	ldr	r3, [r3, #16]
   da6c4:	9301      	str	r3, [sp, #4]
   da6c6:	bd08      	pop	{r3, pc}
   da6c8:	0003022c 	.word	0x0003022c

000da6cc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   da6cc:	b508      	push	{r3, lr}
   da6ce:	4b02      	ldr	r3, [pc, #8]	; (da6d8 <HAL_GPIO_Read+0xc>)
   da6d0:	681b      	ldr	r3, [r3, #0]
   da6d2:	695b      	ldr	r3, [r3, #20]
   da6d4:	9301      	str	r3, [sp, #4]
   da6d6:	bd08      	pop	{r3, pc}
   da6d8:	0003022c 	.word	0x0003022c

000da6dc <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   da6dc:	b508      	push	{r3, lr}
   da6de:	4b02      	ldr	r3, [pc, #8]	; (da6e8 <HAL_Interrupts_Attach+0xc>)
   da6e0:	681b      	ldr	r3, [r3, #0]
   da6e2:	699b      	ldr	r3, [r3, #24]
   da6e4:	9301      	str	r3, [sp, #4]
   da6e6:	bd08      	pop	{r3, pc}
   da6e8:	0003022c 	.word	0x0003022c

000da6ec <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   da6ec:	b508      	push	{r3, lr}
   da6ee:	4b02      	ldr	r3, [pc, #8]	; (da6f8 <HAL_Interrupts_Detach+0xc>)
   da6f0:	681b      	ldr	r3, [r3, #0]
   da6f2:	69db      	ldr	r3, [r3, #28]
   da6f4:	9301      	str	r3, [sp, #4]
   da6f6:	bd08      	pop	{r3, pc}
   da6f8:	0003022c 	.word	0x0003022c

000da6fc <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   da6fc:	b508      	push	{r3, lr}
   da6fe:	4b02      	ldr	r3, [pc, #8]	; (da708 <hal_adc_read+0xc>)
   da700:	681b      	ldr	r3, [r3, #0]
   da702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da704:	9301      	str	r3, [sp, #4]
   da706:	bd08      	pop	{r3, pc}
   da708:	0003022c 	.word	0x0003022c

000da70c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   da70c:	b508      	push	{r3, lr}
   da70e:	4b02      	ldr	r3, [pc, #8]	; (da718 <hal_i2c_begin+0xc>)
   da710:	681b      	ldr	r3, [r3, #0]
   da712:	68db      	ldr	r3, [r3, #12]
   da714:	9301      	str	r3, [sp, #4]
   da716:	bd08      	pop	{r3, pc}
   da718:	00030228 	.word	0x00030228

000da71c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   da71c:	b508      	push	{r3, lr}
   da71e:	4b02      	ldr	r3, [pc, #8]	; (da728 <hal_i2c_begin_transmission+0xc>)
   da720:	681b      	ldr	r3, [r3, #0]
   da722:	699b      	ldr	r3, [r3, #24]
   da724:	9301      	str	r3, [sp, #4]
   da726:	bd08      	pop	{r3, pc}
   da728:	00030228 	.word	0x00030228

000da72c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   da72c:	b508      	push	{r3, lr}
   da72e:	4b02      	ldr	r3, [pc, #8]	; (da738 <hal_i2c_end_transmission+0xc>)
   da730:	681b      	ldr	r3, [r3, #0]
   da732:	69db      	ldr	r3, [r3, #28]
   da734:	9301      	str	r3, [sp, #4]
   da736:	bd08      	pop	{r3, pc}
   da738:	00030228 	.word	0x00030228

000da73c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   da73c:	b508      	push	{r3, lr}
   da73e:	4b02      	ldr	r3, [pc, #8]	; (da748 <hal_i2c_write+0xc>)
   da740:	681b      	ldr	r3, [r3, #0]
   da742:	6a1b      	ldr	r3, [r3, #32]
   da744:	9301      	str	r3, [sp, #4]
   da746:	bd08      	pop	{r3, pc}
   da748:	00030228 	.word	0x00030228

000da74c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   da74c:	b508      	push	{r3, lr}
   da74e:	4b02      	ldr	r3, [pc, #8]	; (da758 <hal_i2c_available+0xc>)
   da750:	681b      	ldr	r3, [r3, #0]
   da752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   da754:	9301      	str	r3, [sp, #4]
   da756:	bd08      	pop	{r3, pc}
   da758:	00030228 	.word	0x00030228

000da75c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   da75c:	b508      	push	{r3, lr}
   da75e:	4b02      	ldr	r3, [pc, #8]	; (da768 <hal_i2c_read+0xc>)
   da760:	681b      	ldr	r3, [r3, #0]
   da762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da764:	9301      	str	r3, [sp, #4]
   da766:	bd08      	pop	{r3, pc}
   da768:	00030228 	.word	0x00030228

000da76c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   da76c:	b508      	push	{r3, lr}
   da76e:	4b02      	ldr	r3, [pc, #8]	; (da778 <hal_i2c_peek+0xc>)
   da770:	681b      	ldr	r3, [r3, #0]
   da772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da774:	9301      	str	r3, [sp, #4]
   da776:	bd08      	pop	{r3, pc}
   da778:	00030228 	.word	0x00030228

000da77c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   da77c:	b508      	push	{r3, lr}
   da77e:	4b02      	ldr	r3, [pc, #8]	; (da788 <hal_i2c_flush+0xc>)
   da780:	681b      	ldr	r3, [r3, #0]
   da782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da784:	9301      	str	r3, [sp, #4]
   da786:	bd08      	pop	{r3, pc}
   da788:	00030228 	.word	0x00030228

000da78c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   da78c:	b508      	push	{r3, lr}
   da78e:	4b02      	ldr	r3, [pc, #8]	; (da798 <hal_i2c_is_enabled+0xc>)
   da790:	681b      	ldr	r3, [r3, #0]
   da792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   da794:	9301      	str	r3, [sp, #4]
   da796:	bd08      	pop	{r3, pc}
   da798:	00030228 	.word	0x00030228

000da79c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   da79c:	b508      	push	{r3, lr}
   da79e:	4b02      	ldr	r3, [pc, #8]	; (da7a8 <hal_i2c_init+0xc>)
   da7a0:	681b      	ldr	r3, [r3, #0]
   da7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da7a4:	9301      	str	r3, [sp, #4]
   da7a6:	bd08      	pop	{r3, pc}
   da7a8:	00030228 	.word	0x00030228

000da7ac <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   da7ac:	b508      	push	{r3, lr}
   da7ae:	4b02      	ldr	r3, [pc, #8]	; (da7b8 <hal_i2c_lock+0xc>)
   da7b0:	681b      	ldr	r3, [r3, #0]
   da7b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   da7b4:	9301      	str	r3, [sp, #4]
   da7b6:	bd08      	pop	{r3, pc}
   da7b8:	00030228 	.word	0x00030228

000da7bc <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   da7bc:	b508      	push	{r3, lr}
   da7be:	4b02      	ldr	r3, [pc, #8]	; (da7c8 <hal_i2c_unlock+0xc>)
   da7c0:	681b      	ldr	r3, [r3, #0]
   da7c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   da7c4:	9301      	str	r3, [sp, #4]
   da7c6:	bd08      	pop	{r3, pc}
   da7c8:	00030228 	.word	0x00030228

000da7cc <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   da7cc:	b508      	push	{r3, lr}
   da7ce:	4b02      	ldr	r3, [pc, #8]	; (da7d8 <hal_i2c_request_ex+0xc>)
   da7d0:	681b      	ldr	r3, [r3, #0]
   da7d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   da7d4:	9301      	str	r3, [sp, #4]
   da7d6:	bd08      	pop	{r3, pc}
   da7d8:	00030228 	.word	0x00030228

000da7dc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   da7dc:	b508      	push	{r3, lr}
   da7de:	4b02      	ldr	r3, [pc, #8]	; (da7e8 <inet_inet_ntop+0xc>)
   da7e0:	681b      	ldr	r3, [r3, #0]
   da7e2:	695b      	ldr	r3, [r3, #20]
   da7e4:	9301      	str	r3, [sp, #4]
   da7e6:	bd08      	pop	{r3, pc}
   da7e8:	00030264 	.word	0x00030264

000da7ec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   da7ec:	b508      	push	{r3, lr}
   da7ee:	4b02      	ldr	r3, [pc, #8]	; (da7f8 <netdb_freeaddrinfo+0xc>)
   da7f0:	681b      	ldr	r3, [r3, #0]
   da7f2:	689b      	ldr	r3, [r3, #8]
   da7f4:	9301      	str	r3, [sp, #4]
   da7f6:	bd08      	pop	{r3, pc}
   da7f8:	00030268 	.word	0x00030268

000da7fc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   da7fc:	b508      	push	{r3, lr}
   da7fe:	4b02      	ldr	r3, [pc, #8]	; (da808 <netdb_getaddrinfo+0xc>)
   da800:	681b      	ldr	r3, [r3, #0]
   da802:	68db      	ldr	r3, [r3, #12]
   da804:	9301      	str	r3, [sp, #4]
   da806:	bd08      	pop	{r3, pc}
   da808:	00030268 	.word	0x00030268

000da80c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   da80c:	b508      	push	{r3, lr}
   da80e:	4b02      	ldr	r3, [pc, #8]	; (da818 <hal_spi_begin+0xc>)
   da810:	681b      	ldr	r3, [r3, #0]
   da812:	681b      	ldr	r3, [r3, #0]
   da814:	9301      	str	r3, [sp, #4]
   da816:	bd08      	pop	{r3, pc}
   da818:	00030230 	.word	0x00030230

000da81c <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   da81c:	b508      	push	{r3, lr}
   da81e:	4b02      	ldr	r3, [pc, #8]	; (da828 <hal_spi_end+0xc>)
   da820:	681b      	ldr	r3, [r3, #0]
   da822:	685b      	ldr	r3, [r3, #4]
   da824:	9301      	str	r3, [sp, #4]
   da826:	bd08      	pop	{r3, pc}
   da828:	00030230 	.word	0x00030230

000da82c <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   da82c:	b508      	push	{r3, lr}
   da82e:	4b02      	ldr	r3, [pc, #8]	; (da838 <hal_spi_transfer+0xc>)
   da830:	681b      	ldr	r3, [r3, #0]
   da832:	695b      	ldr	r3, [r3, #20]
   da834:	9301      	str	r3, [sp, #4]
   da836:	bd08      	pop	{r3, pc}
   da838:	00030230 	.word	0x00030230

000da83c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   da83c:	b508      	push	{r3, lr}
   da83e:	4b02      	ldr	r3, [pc, #8]	; (da848 <hal_spi_init+0xc>)
   da840:	681b      	ldr	r3, [r3, #0]
   da842:	69db      	ldr	r3, [r3, #28]
   da844:	9301      	str	r3, [sp, #4]
   da846:	bd08      	pop	{r3, pc}
   da848:	00030230 	.word	0x00030230

000da84c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   da84c:	b508      	push	{r3, lr}
   da84e:	4b02      	ldr	r3, [pc, #8]	; (da858 <hal_spi_is_enabled+0xc>)
   da850:	681b      	ldr	r3, [r3, #0]
   da852:	6a1b      	ldr	r3, [r3, #32]
   da854:	9301      	str	r3, [sp, #4]
   da856:	bd08      	pop	{r3, pc}
   da858:	00030230 	.word	0x00030230

000da85c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   da85c:	b508      	push	{r3, lr}
   da85e:	4b02      	ldr	r3, [pc, #8]	; (da868 <hal_spi_info+0xc>)
   da860:	681b      	ldr	r3, [r3, #0]
   da862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   da864:	9301      	str	r3, [sp, #4]
   da866:	bd08      	pop	{r3, pc}
   da868:	00030230 	.word	0x00030230

000da86c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   da86c:	b508      	push	{r3, lr}
   da86e:	4b02      	ldr	r3, [pc, #8]	; (da878 <hal_spi_set_settings+0xc>)
   da870:	681b      	ldr	r3, [r3, #0]
   da872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   da874:	9301      	str	r3, [sp, #4]
   da876:	bd08      	pop	{r3, pc}
   da878:	00030230 	.word	0x00030230

000da87c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   da87c:	b508      	push	{r3, lr}
   da87e:	4b02      	ldr	r3, [pc, #8]	; (da888 <hal_spi_acquire+0xc>)
   da880:	681b      	ldr	r3, [r3, #0]
   da882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da884:	9301      	str	r3, [sp, #4]
   da886:	bd08      	pop	{r3, pc}
   da888:	00030230 	.word	0x00030230

000da88c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   da88c:	b508      	push	{r3, lr}
   da88e:	4b02      	ldr	r3, [pc, #8]	; (da898 <hal_spi_release+0xc>)
   da890:	681b      	ldr	r3, [r3, #0]
   da892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da894:	9301      	str	r3, [sp, #4]
   da896:	bd08      	pop	{r3, pc}
   da898:	00030230 	.word	0x00030230

000da89c <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   da89c:	b508      	push	{r3, lr}
   da89e:	4b02      	ldr	r3, [pc, #8]	; (da8a8 <_open+0xc>)
   da8a0:	681b      	ldr	r3, [r3, #0]
   da8a2:	681b      	ldr	r3, [r3, #0]
   da8a4:	9301      	str	r3, [sp, #4]
   da8a6:	bd08      	pop	{r3, pc}
   da8a8:	00030284 	.word	0x00030284

000da8ac <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   da8ac:	b508      	push	{r3, lr}
   da8ae:	4b02      	ldr	r3, [pc, #8]	; (da8b8 <_write+0xc>)
   da8b0:	681b      	ldr	r3, [r3, #0]
   da8b2:	685b      	ldr	r3, [r3, #4]
   da8b4:	9301      	str	r3, [sp, #4]
   da8b6:	bd08      	pop	{r3, pc}
   da8b8:	00030284 	.word	0x00030284

000da8bc <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   da8bc:	b508      	push	{r3, lr}
   da8be:	4b02      	ldr	r3, [pc, #8]	; (da8c8 <_read+0xc>)
   da8c0:	681b      	ldr	r3, [r3, #0]
   da8c2:	689b      	ldr	r3, [r3, #8]
   da8c4:	9301      	str	r3, [sp, #4]
   da8c6:	bd08      	pop	{r3, pc}
   da8c8:	00030284 	.word	0x00030284

000da8cc <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   da8cc:	b508      	push	{r3, lr}
   da8ce:	4b02      	ldr	r3, [pc, #8]	; (da8d8 <_close+0xc>)
   da8d0:	681b      	ldr	r3, [r3, #0]
   da8d2:	68db      	ldr	r3, [r3, #12]
   da8d4:	9301      	str	r3, [sp, #4]
   da8d6:	bd08      	pop	{r3, pc}
   da8d8:	00030284 	.word	0x00030284

000da8dc <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   da8dc:	b508      	push	{r3, lr}
   da8de:	4b02      	ldr	r3, [pc, #8]	; (da8e8 <_fstat+0xc>)
   da8e0:	681b      	ldr	r3, [r3, #0]
   da8e2:	695b      	ldr	r3, [r3, #20]
   da8e4:	9301      	str	r3, [sp, #4]
   da8e6:	bd08      	pop	{r3, pc}
   da8e8:	00030284 	.word	0x00030284

000da8ec <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   da8ec:	b508      	push	{r3, lr}
   da8ee:	4b02      	ldr	r3, [pc, #8]	; (da8f8 <_lseek+0xc>)
   da8f0:	681b      	ldr	r3, [r3, #0]
   da8f2:	6a1b      	ldr	r3, [r3, #32]
   da8f4:	9301      	str	r3, [sp, #4]
   da8f6:	bd08      	pop	{r3, pc}
   da8f8:	00030284 	.word	0x00030284

000da8fc <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   da8fc:	b508      	push	{r3, lr}
   da8fe:	4b02      	ldr	r3, [pc, #8]	; (da908 <stat+0xc>)
   da900:	681b      	ldr	r3, [r3, #0]
   da902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   da904:	9301      	str	r3, [sp, #4]
   da906:	bd08      	pop	{r3, pc}
   da908:	00030284 	.word	0x00030284

000da90c <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   da90c:	b508      	push	{r3, lr}
   da90e:	4b02      	ldr	r3, [pc, #8]	; (da918 <mkdir+0xc>)
   da910:	681b      	ldr	r3, [r3, #0]
   da912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da914:	9301      	str	r3, [sp, #4]
   da916:	bd08      	pop	{r3, pc}
   da918:	00030284 	.word	0x00030284

000da91c <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   da91c:	b508      	push	{r3, lr}
   da91e:	4b02      	ldr	r3, [pc, #8]	; (da928 <_unlink+0xc>)
   da920:	681b      	ldr	r3, [r3, #0]
   da922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da924:	9301      	str	r3, [sp, #4]
   da926:	bd08      	pop	{r3, pc}
   da928:	00030284 	.word	0x00030284

000da92c <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   da92c:	b508      	push	{r3, lr}
   da92e:	4b02      	ldr	r3, [pc, #8]	; (da938 <opendir+0xc>)
   da930:	681b      	ldr	r3, [r3, #0]
   da932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   da934:	9301      	str	r3, [sp, #4]
   da936:	bd08      	pop	{r3, pc}
   da938:	00030284 	.word	0x00030284

000da93c <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   da93c:	b508      	push	{r3, lr}
   da93e:	4b02      	ldr	r3, [pc, #8]	; (da948 <readdir+0xc>)
   da940:	681b      	ldr	r3, [r3, #0]
   da942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da944:	9301      	str	r3, [sp, #4]
   da946:	bd08      	pop	{r3, pc}
   da948:	00030284 	.word	0x00030284

000da94c <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   da94c:	b508      	push	{r3, lr}
   da94e:	4b02      	ldr	r3, [pc, #8]	; (da958 <closedir+0xc>)
   da950:	681b      	ldr	r3, [r3, #0]
   da952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   da954:	9301      	str	r3, [sp, #4]
   da956:	bd08      	pop	{r3, pc}
   da958:	00030284 	.word	0x00030284

000da95c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   da95c:	b508      	push	{r3, lr}
   da95e:	4b02      	ldr	r3, [pc, #8]	; (da968 <hal_usart_init+0xc>)
   da960:	681b      	ldr	r3, [r3, #0]
   da962:	681b      	ldr	r3, [r3, #0]
   da964:	9301      	str	r3, [sp, #4]
   da966:	bd08      	pop	{r3, pc}
   da968:	0003023c 	.word	0x0003023c

000da96c <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   da96c:	b508      	push	{r3, lr}
   da96e:	4b02      	ldr	r3, [pc, #8]	; (da978 <hal_usart_end+0xc>)
   da970:	681b      	ldr	r3, [r3, #0]
   da972:	689b      	ldr	r3, [r3, #8]
   da974:	9301      	str	r3, [sp, #4]
   da976:	bd08      	pop	{r3, pc}
   da978:	0003023c 	.word	0x0003023c

000da97c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   da97c:	b508      	push	{r3, lr}
   da97e:	4b02      	ldr	r3, [pc, #8]	; (da988 <hal_usart_write+0xc>)
   da980:	681b      	ldr	r3, [r3, #0]
   da982:	68db      	ldr	r3, [r3, #12]
   da984:	9301      	str	r3, [sp, #4]
   da986:	bd08      	pop	{r3, pc}
   da988:	0003023c 	.word	0x0003023c

000da98c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   da98c:	b508      	push	{r3, lr}
   da98e:	4b02      	ldr	r3, [pc, #8]	; (da998 <hal_usart_available+0xc>)
   da990:	681b      	ldr	r3, [r3, #0]
   da992:	691b      	ldr	r3, [r3, #16]
   da994:	9301      	str	r3, [sp, #4]
   da996:	bd08      	pop	{r3, pc}
   da998:	0003023c 	.word	0x0003023c

000da99c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   da99c:	b508      	push	{r3, lr}
   da99e:	4b02      	ldr	r3, [pc, #8]	; (da9a8 <hal_usart_read+0xc>)
   da9a0:	681b      	ldr	r3, [r3, #0]
   da9a2:	695b      	ldr	r3, [r3, #20]
   da9a4:	9301      	str	r3, [sp, #4]
   da9a6:	bd08      	pop	{r3, pc}
   da9a8:	0003023c 	.word	0x0003023c

000da9ac <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   da9ac:	b508      	push	{r3, lr}
   da9ae:	4b02      	ldr	r3, [pc, #8]	; (da9b8 <hal_usart_peek+0xc>)
   da9b0:	681b      	ldr	r3, [r3, #0]
   da9b2:	699b      	ldr	r3, [r3, #24]
   da9b4:	9301      	str	r3, [sp, #4]
   da9b6:	bd08      	pop	{r3, pc}
   da9b8:	0003023c 	.word	0x0003023c

000da9bc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   da9bc:	b508      	push	{r3, lr}
   da9be:	4b02      	ldr	r3, [pc, #8]	; (da9c8 <hal_usart_flush+0xc>)
   da9c0:	681b      	ldr	r3, [r3, #0]
   da9c2:	69db      	ldr	r3, [r3, #28]
   da9c4:	9301      	str	r3, [sp, #4]
   da9c6:	bd08      	pop	{r3, pc}
   da9c8:	0003023c 	.word	0x0003023c

000da9cc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   da9cc:	b508      	push	{r3, lr}
   da9ce:	4b02      	ldr	r3, [pc, #8]	; (da9d8 <hal_usart_is_enabled+0xc>)
   da9d0:	681b      	ldr	r3, [r3, #0]
   da9d2:	6a1b      	ldr	r3, [r3, #32]
   da9d4:	9301      	str	r3, [sp, #4]
   da9d6:	bd08      	pop	{r3, pc}
   da9d8:	0003023c 	.word	0x0003023c

000da9dc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   da9dc:	b508      	push	{r3, lr}
   da9de:	4b02      	ldr	r3, [pc, #8]	; (da9e8 <hal_usart_available_data_for_write+0xc>)
   da9e0:	681b      	ldr	r3, [r3, #0]
   da9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da9e4:	9301      	str	r3, [sp, #4]
   da9e6:	bd08      	pop	{r3, pc}
   da9e8:	0003023c 	.word	0x0003023c

000da9ec <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   da9ec:	b508      	push	{r3, lr}
   da9ee:	4b02      	ldr	r3, [pc, #8]	; (da9f8 <hal_usart_begin_config+0xc>)
   da9f0:	681b      	ldr	r3, [r3, #0]
   da9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da9f4:	9301      	str	r3, [sp, #4]
   da9f6:	bd08      	pop	{r3, pc}
   da9f8:	0003023c 	.word	0x0003023c

000da9fc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   da9fc:	b508      	push	{r3, lr}
   da9fe:	4b02      	ldr	r3, [pc, #8]	; (daa08 <HAL_USB_USART_Init+0xc>)
   daa00:	681b      	ldr	r3, [r3, #0]
   daa02:	681b      	ldr	r3, [r3, #0]
   daa04:	9301      	str	r3, [sp, #4]
   daa06:	bd08      	pop	{r3, pc}
   daa08:	0003024c 	.word	0x0003024c

000daa0c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   daa0c:	b508      	push	{r3, lr}
   daa0e:	4b02      	ldr	r3, [pc, #8]	; (daa18 <HAL_USB_USART_Begin+0xc>)
   daa10:	681b      	ldr	r3, [r3, #0]
   daa12:	685b      	ldr	r3, [r3, #4]
   daa14:	9301      	str	r3, [sp, #4]
   daa16:	bd08      	pop	{r3, pc}
   daa18:	0003024c 	.word	0x0003024c

000daa1c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   daa1c:	b508      	push	{r3, lr}
   daa1e:	4b02      	ldr	r3, [pc, #8]	; (daa28 <HAL_USB_USART_End+0xc>)
   daa20:	681b      	ldr	r3, [r3, #0]
   daa22:	689b      	ldr	r3, [r3, #8]
   daa24:	9301      	str	r3, [sp, #4]
   daa26:	bd08      	pop	{r3, pc}
   daa28:	0003024c 	.word	0x0003024c

000daa2c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   daa2c:	b508      	push	{r3, lr}
   daa2e:	4b02      	ldr	r3, [pc, #8]	; (daa38 <HAL_USB_USART_Available_Data+0xc>)
   daa30:	681b      	ldr	r3, [r3, #0]
   daa32:	691b      	ldr	r3, [r3, #16]
   daa34:	9301      	str	r3, [sp, #4]
   daa36:	bd08      	pop	{r3, pc}
   daa38:	0003024c 	.word	0x0003024c

000daa3c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   daa3c:	b508      	push	{r3, lr}
   daa3e:	4b02      	ldr	r3, [pc, #8]	; (daa48 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   daa40:	681b      	ldr	r3, [r3, #0]
   daa42:	695b      	ldr	r3, [r3, #20]
   daa44:	9301      	str	r3, [sp, #4]
   daa46:	bd08      	pop	{r3, pc}
   daa48:	0003024c 	.word	0x0003024c

000daa4c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   daa4c:	b508      	push	{r3, lr}
   daa4e:	4b02      	ldr	r3, [pc, #8]	; (daa58 <HAL_USB_USART_Receive_Data+0xc>)
   daa50:	681b      	ldr	r3, [r3, #0]
   daa52:	699b      	ldr	r3, [r3, #24]
   daa54:	9301      	str	r3, [sp, #4]
   daa56:	bd08      	pop	{r3, pc}
   daa58:	0003024c 	.word	0x0003024c

000daa5c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   daa5c:	b508      	push	{r3, lr}
   daa5e:	4b02      	ldr	r3, [pc, #8]	; (daa68 <HAL_USB_USART_Send_Data+0xc>)
   daa60:	681b      	ldr	r3, [r3, #0]
   daa62:	69db      	ldr	r3, [r3, #28]
   daa64:	9301      	str	r3, [sp, #4]
   daa66:	bd08      	pop	{r3, pc}
   daa68:	0003024c 	.word	0x0003024c

000daa6c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   daa6c:	b508      	push	{r3, lr}
   daa6e:	4b02      	ldr	r3, [pc, #8]	; (daa78 <HAL_USB_USART_Flush_Data+0xc>)
   daa70:	681b      	ldr	r3, [r3, #0]
   daa72:	6a1b      	ldr	r3, [r3, #32]
   daa74:	9301      	str	r3, [sp, #4]
   daa76:	bd08      	pop	{r3, pc}
   daa78:	0003024c 	.word	0x0003024c

000daa7c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   daa7c:	b508      	push	{r3, lr}
   daa7e:	4b02      	ldr	r3, [pc, #8]	; (daa88 <panic_+0xc>)
   daa80:	681b      	ldr	r3, [r3, #0]
   daa82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   daa84:	9301      	str	r3, [sp, #4]
   daa86:	bd08      	pop	{r3, pc}
   daa88:	00030260 	.word	0x00030260

000daa8c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   daa8c:	b508      	push	{r3, lr}
   daa8e:	4b02      	ldr	r3, [pc, #8]	; (daa98 <log_message+0xc>)
   daa90:	681b      	ldr	r3, [r3, #0]
   daa92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   daa94:	9301      	str	r3, [sp, #4]
   daa96:	bd08      	pop	{r3, pc}
   daa98:	00030260 	.word	0x00030260

000daa9c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   daa9c:	b508      	push	{r3, lr}
   daa9e:	4b02      	ldr	r3, [pc, #8]	; (daaa8 <log_message_v+0xc>)
   daaa0:	681b      	ldr	r3, [r3, #0]
   daaa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   daaa4:	9301      	str	r3, [sp, #4]
   daaa6:	bd08      	pop	{r3, pc}
   daaa8:	00030260 	.word	0x00030260

000daaac <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   daaac:	b508      	push	{r3, lr}
   daaae:	4b02      	ldr	r3, [pc, #8]	; (daab8 <log_level_name+0xc>)
   daab0:	681b      	ldr	r3, [r3, #0]
   daab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   daab4:	9301      	str	r3, [sp, #4]
   daab6:	bd08      	pop	{r3, pc}
   daab8:	00030260 	.word	0x00030260

000daabc <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   daabc:	b508      	push	{r3, lr}
   daabe:	4b02      	ldr	r3, [pc, #8]	; (daac8 <log_set_callbacks+0xc>)
   daac0:	681b      	ldr	r3, [r3, #0]
   daac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   daac4:	9301      	str	r3, [sp, #4]
   daac6:	bd08      	pop	{r3, pc}
   daac8:	00030260 	.word	0x00030260

000daacc <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   daacc:	b508      	push	{r3, lr}
   daace:	4b03      	ldr	r3, [pc, #12]	; (daadc <diag_get_source+0x10>)
   daad0:	681b      	ldr	r3, [r3, #0]
   daad2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   daad6:	9301      	str	r3, [sp, #4]
   daad8:	bd08      	pop	{r3, pc}
   daada:	0000      	.short	0x0000
   daadc:	00030260 	.word	0x00030260

000daae0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   daae0:	b508      	push	{r3, lr}
   daae2:	4b02      	ldr	r3, [pc, #8]	; (daaec <system_mode+0xc>)
   daae4:	681b      	ldr	r3, [r3, #0]
   daae6:	681b      	ldr	r3, [r3, #0]
   daae8:	9301      	str	r3, [sp, #4]
   daaea:	bd08      	pop	{r3, pc}
   daaec:	00030220 	.word	0x00030220

000daaf0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   daaf0:	b508      	push	{r3, lr}
   daaf2:	4b02      	ldr	r3, [pc, #8]	; (daafc <set_system_mode+0xc>)
   daaf4:	681b      	ldr	r3, [r3, #0]
   daaf6:	685b      	ldr	r3, [r3, #4]
   daaf8:	9301      	str	r3, [sp, #4]
   daafa:	bd08      	pop	{r3, pc}
   daafc:	00030220 	.word	0x00030220

000dab00 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   dab00:	b508      	push	{r3, lr}
   dab02:	4b02      	ldr	r3, [pc, #8]	; (dab0c <system_delay_ms+0xc>)
   dab04:	681b      	ldr	r3, [r3, #0]
   dab06:	695b      	ldr	r3, [r3, #20]
   dab08:	9301      	str	r3, [sp, #4]
   dab0a:	bd08      	pop	{r3, pc}
   dab0c:	00030220 	.word	0x00030220

000dab10 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   dab10:	b508      	push	{r3, lr}
   dab12:	4b02      	ldr	r3, [pc, #8]	; (dab1c <system_subscribe_event+0xc>)
   dab14:	681b      	ldr	r3, [r3, #0]
   dab16:	6a1b      	ldr	r3, [r3, #32]
   dab18:	9301      	str	r3, [sp, #4]
   dab1a:	bd08      	pop	{r3, pc}
   dab1c:	00030220 	.word	0x00030220

000dab20 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   dab20:	b508      	push	{r3, lr}
   dab22:	4b02      	ldr	r3, [pc, #8]	; (dab2c <system_thread_set_state+0xc>)
   dab24:	681b      	ldr	r3, [r3, #0]
   dab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dab28:	9301      	str	r3, [sp, #4]
   dab2a:	bd08      	pop	{r3, pc}
   dab2c:	00030220 	.word	0x00030220

000dab30 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   dab30:	b508      	push	{r3, lr}
   dab32:	4b02      	ldr	r3, [pc, #8]	; (dab3c <application_thread_current+0xc>)
   dab34:	681b      	ldr	r3, [r3, #0]
   dab36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dab38:	9301      	str	r3, [sp, #4]
   dab3a:	bd08      	pop	{r3, pc}
   dab3c:	00030220 	.word	0x00030220

000dab40 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   dab40:	b508      	push	{r3, lr}
   dab42:	4b02      	ldr	r3, [pc, #8]	; (dab4c <application_thread_invoke+0xc>)
   dab44:	681b      	ldr	r3, [r3, #0]
   dab46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dab48:	9301      	str	r3, [sp, #4]
   dab4a:	bd08      	pop	{r3, pc}
   dab4c:	00030220 	.word	0x00030220

000dab50 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   dab50:	b508      	push	{r3, lr}
   dab52:	4b02      	ldr	r3, [pc, #8]	; (dab5c <system_thread_get_state+0xc>)
   dab54:	681b      	ldr	r3, [r3, #0]
   dab56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dab58:	9301      	str	r3, [sp, #4]
   dab5a:	bd08      	pop	{r3, pc}
   dab5c:	00030220 	.word	0x00030220

000dab60 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   dab60:	b508      	push	{r3, lr}
   dab62:	4b02      	ldr	r3, [pc, #8]	; (dab6c <system_notify_time_changed+0xc>)
   dab64:	681b      	ldr	r3, [r3, #0]
   dab66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   dab68:	9301      	str	r3, [sp, #4]
   dab6a:	bd08      	pop	{r3, pc}
   dab6c:	00030220 	.word	0x00030220

000dab70 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   dab70:	b508      	push	{r3, lr}
   dab72:	4b03      	ldr	r3, [pc, #12]	; (dab80 <system_ctrl_set_app_request_handler+0x10>)
   dab74:	681b      	ldr	r3, [r3, #0]
   dab76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   dab7a:	9301      	str	r3, [sp, #4]
   dab7c:	bd08      	pop	{r3, pc}
   dab7e:	0000      	.short	0x0000
   dab80:	00030220 	.word	0x00030220

000dab84 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   dab84:	b508      	push	{r3, lr}
   dab86:	4b03      	ldr	r3, [pc, #12]	; (dab94 <system_ctrl_set_result+0x10>)
   dab88:	681b      	ldr	r3, [r3, #0]
   dab8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   dab8e:	9301      	str	r3, [sp, #4]
   dab90:	bd08      	pop	{r3, pc}
   dab92:	0000      	.short	0x0000
   dab94:	00030220 	.word	0x00030220

000dab98 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   dab98:	b508      	push	{r3, lr}
   dab9a:	4b03      	ldr	r3, [pc, #12]	; (daba8 <system_power_management_set_config+0x10>)
   dab9c:	681b      	ldr	r3, [r3, #0]
   dab9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   daba2:	9301      	str	r3, [sp, #4]
   daba4:	bd08      	pop	{r3, pc}
   daba6:	0000      	.short	0x0000
   daba8:	00030220 	.word	0x00030220

000dabac <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   dabac:	b508      	push	{r3, lr}
   dabae:	4b03      	ldr	r3, [pc, #12]	; (dabbc <system_sleep_ext+0x10>)
   dabb0:	681b      	ldr	r3, [r3, #0]
   dabb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   dabb6:	9301      	str	r3, [sp, #4]
   dabb8:	bd08      	pop	{r3, pc}
   dabba:	0000      	.short	0x0000
   dabbc:	00030220 	.word	0x00030220

000dabc0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   dabc0:	b508      	push	{r3, lr}
   dabc2:	4b02      	ldr	r3, [pc, #8]	; (dabcc <spark_variable+0xc>)
   dabc4:	681b      	ldr	r3, [r3, #0]
   dabc6:	681b      	ldr	r3, [r3, #0]
   dabc8:	9301      	str	r3, [sp, #4]
   dabca:	bd08      	pop	{r3, pc}
   dabcc:	00030244 	.word	0x00030244

000dabd0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   dabd0:	b508      	push	{r3, lr}
   dabd2:	4b02      	ldr	r3, [pc, #8]	; (dabdc <spark_function+0xc>)
   dabd4:	681b      	ldr	r3, [r3, #0]
   dabd6:	685b      	ldr	r3, [r3, #4]
   dabd8:	9301      	str	r3, [sp, #4]
   dabda:	bd08      	pop	{r3, pc}
   dabdc:	00030244 	.word	0x00030244

000dabe0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   dabe0:	b508      	push	{r3, lr}
   dabe2:	4b02      	ldr	r3, [pc, #8]	; (dabec <spark_process+0xc>)
   dabe4:	681b      	ldr	r3, [r3, #0]
   dabe6:	689b      	ldr	r3, [r3, #8]
   dabe8:	9301      	str	r3, [sp, #4]
   dabea:	bd08      	pop	{r3, pc}
   dabec:	00030244 	.word	0x00030244

000dabf0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   dabf0:	b508      	push	{r3, lr}
   dabf2:	4b02      	ldr	r3, [pc, #8]	; (dabfc <spark_cloud_flag_connect+0xc>)
   dabf4:	681b      	ldr	r3, [r3, #0]
   dabf6:	68db      	ldr	r3, [r3, #12]
   dabf8:	9301      	str	r3, [sp, #4]
   dabfa:	bd08      	pop	{r3, pc}
   dabfc:	00030244 	.word	0x00030244

000dac00 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   dac00:	b508      	push	{r3, lr}
   dac02:	4b02      	ldr	r3, [pc, #8]	; (dac0c <spark_cloud_flag_connected+0xc>)
   dac04:	681b      	ldr	r3, [r3, #0]
   dac06:	695b      	ldr	r3, [r3, #20]
   dac08:	9301      	str	r3, [sp, #4]
   dac0a:	bd08      	pop	{r3, pc}
   dac0c:	00030244 	.word	0x00030244

000dac10 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   dac10:	b508      	push	{r3, lr}
   dac12:	4b02      	ldr	r3, [pc, #8]	; (dac1c <spark_send_event+0xc>)
   dac14:	681b      	ldr	r3, [r3, #0]
   dac16:	6a1b      	ldr	r3, [r3, #32]
   dac18:	9301      	str	r3, [sp, #4]
   dac1a:	bd08      	pop	{r3, pc}
   dac1c:	00030244 	.word	0x00030244

000dac20 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   dac20:	b508      	push	{r3, lr}
   dac22:	4b02      	ldr	r3, [pc, #8]	; (dac2c <spark_sync_time+0xc>)
   dac24:	681b      	ldr	r3, [r3, #0]
   dac26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dac28:	9301      	str	r3, [sp, #4]
   dac2a:	bd08      	pop	{r3, pc}
   dac2c:	00030244 	.word	0x00030244

000dac30 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   dac30:	b508      	push	{r3, lr}
   dac32:	4b02      	ldr	r3, [pc, #8]	; (dac3c <spark_sync_time_pending+0xc>)
   dac34:	681b      	ldr	r3, [r3, #0]
   dac36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dac38:	9301      	str	r3, [sp, #4]
   dac3a:	bd08      	pop	{r3, pc}
   dac3c:	00030244 	.word	0x00030244

000dac40 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   dac40:	b508      	push	{r3, lr}
   dac42:	4b02      	ldr	r3, [pc, #8]	; (dac4c <spark_sync_time_last+0xc>)
   dac44:	681b      	ldr	r3, [r3, #0]
   dac46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dac48:	9301      	str	r3, [sp, #4]
   dac4a:	bd08      	pop	{r3, pc}
   dac4c:	00030244 	.word	0x00030244

000dac50 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   dac50:	b508      	push	{r3, lr}
   dac52:	4b02      	ldr	r3, [pc, #8]	; (dac5c <spark_set_connection_property+0xc>)
   dac54:	681b      	ldr	r3, [r3, #0]
   dac56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   dac58:	9301      	str	r3, [sp, #4]
   dac5a:	bd08      	pop	{r3, pc}
   dac5c:	00030244 	.word	0x00030244

000dac60 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   dac60:	b508      	push	{r3, lr}
   dac62:	4b02      	ldr	r3, [pc, #8]	; (dac6c <spark_set_random_seed_from_cloud_handler+0xc>)
   dac64:	681b      	ldr	r3, [r3, #0]
   dac66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dac68:	9301      	str	r3, [sp, #4]
   dac6a:	bd08      	pop	{r3, pc}
   dac6c:	00030244 	.word	0x00030244

000dac70 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   dac70:	b508      	push	{r3, lr}
   dac72:	4b02      	ldr	r3, [pc, #8]	; (dac7c <spark_cloud_disconnect+0xc>)
   dac74:	681b      	ldr	r3, [r3, #0]
   dac76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dac78:	9301      	str	r3, [sp, #4]
   dac7a:	bd08      	pop	{r3, pc}
   dac7c:	00030244 	.word	0x00030244

000dac80 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   dac80:	b508      	push	{r3, lr}
   dac82:	4b02      	ldr	r3, [pc, #8]	; (dac8c <network_connect+0xc>)
   dac84:	681b      	ldr	r3, [r3, #0]
   dac86:	685b      	ldr	r3, [r3, #4]
   dac88:	9301      	str	r3, [sp, #4]
   dac8a:	bd08      	pop	{r3, pc}
   dac8c:	00030240 	.word	0x00030240

000dac90 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   dac90:	b508      	push	{r3, lr}
   dac92:	4b02      	ldr	r3, [pc, #8]	; (dac9c <network_connecting+0xc>)
   dac94:	681b      	ldr	r3, [r3, #0]
   dac96:	689b      	ldr	r3, [r3, #8]
   dac98:	9301      	str	r3, [sp, #4]
   dac9a:	bd08      	pop	{r3, pc}
   dac9c:	00030240 	.word	0x00030240

000daca0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   daca0:	b508      	push	{r3, lr}
   daca2:	4b02      	ldr	r3, [pc, #8]	; (dacac <network_disconnect+0xc>)
   daca4:	681b      	ldr	r3, [r3, #0]
   daca6:	68db      	ldr	r3, [r3, #12]
   daca8:	9301      	str	r3, [sp, #4]
   dacaa:	bd08      	pop	{r3, pc}
   dacac:	00030240 	.word	0x00030240

000dacb0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   dacb0:	b508      	push	{r3, lr}
   dacb2:	4b02      	ldr	r3, [pc, #8]	; (dacbc <network_ready+0xc>)
   dacb4:	681b      	ldr	r3, [r3, #0]
   dacb6:	691b      	ldr	r3, [r3, #16]
   dacb8:	9301      	str	r3, [sp, #4]
   dacba:	bd08      	pop	{r3, pc}
   dacbc:	00030240 	.word	0x00030240

000dacc0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   dacc0:	b508      	push	{r3, lr}
   dacc2:	4b02      	ldr	r3, [pc, #8]	; (daccc <network_on+0xc>)
   dacc4:	681b      	ldr	r3, [r3, #0]
   dacc6:	695b      	ldr	r3, [r3, #20]
   dacc8:	9301      	str	r3, [sp, #4]
   dacca:	bd08      	pop	{r3, pc}
   daccc:	00030240 	.word	0x00030240

000dacd0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   dacd0:	b508      	push	{r3, lr}
   dacd2:	4b02      	ldr	r3, [pc, #8]	; (dacdc <network_off+0xc>)
   dacd4:	681b      	ldr	r3, [r3, #0]
   dacd6:	699b      	ldr	r3, [r3, #24]
   dacd8:	9301      	str	r3, [sp, #4]
   dacda:	bd08      	pop	{r3, pc}
   dacdc:	00030240 	.word	0x00030240

000dace0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   dace0:	b508      	push	{r3, lr}
   dace2:	4b02      	ldr	r3, [pc, #8]	; (dacec <network_listen+0xc>)
   dace4:	681b      	ldr	r3, [r3, #0]
   dace6:	69db      	ldr	r3, [r3, #28]
   dace8:	9301      	str	r3, [sp, #4]
   dacea:	bd08      	pop	{r3, pc}
   dacec:	00030240 	.word	0x00030240

000dacf0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   dacf0:	b508      	push	{r3, lr}
   dacf2:	4b02      	ldr	r3, [pc, #8]	; (dacfc <network_listening+0xc>)
   dacf4:	681b      	ldr	r3, [r3, #0]
   dacf6:	6a1b      	ldr	r3, [r3, #32]
   dacf8:	9301      	str	r3, [sp, #4]
   dacfa:	bd08      	pop	{r3, pc}
   dacfc:	00030240 	.word	0x00030240

000dad00 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   dad00:	b508      	push	{r3, lr}
   dad02:	4b02      	ldr	r3, [pc, #8]	; (dad0c <network_set_listen_timeout+0xc>)
   dad04:	681b      	ldr	r3, [r3, #0]
   dad06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dad08:	9301      	str	r3, [sp, #4]
   dad0a:	bd08      	pop	{r3, pc}
   dad0c:	00030240 	.word	0x00030240

000dad10 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   dad10:	b508      	push	{r3, lr}
   dad12:	4b02      	ldr	r3, [pc, #8]	; (dad1c <network_get_listen_timeout+0xc>)
   dad14:	681b      	ldr	r3, [r3, #0]
   dad16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dad18:	9301      	str	r3, [sp, #4]
   dad1a:	bd08      	pop	{r3, pc}
   dad1c:	00030240 	.word	0x00030240

000dad20 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   dad20:	b508      	push	{r3, lr}
   dad22:	4b02      	ldr	r3, [pc, #8]	; (dad2c <network_is_on+0xc>)
   dad24:	681b      	ldr	r3, [r3, #0]
   dad26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dad28:	9301      	str	r3, [sp, #4]
   dad2a:	bd08      	pop	{r3, pc}
   dad2c:	00030240 	.word	0x00030240

000dad30 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   dad30:	b508      	push	{r3, lr}
   dad32:	4b02      	ldr	r3, [pc, #8]	; (dad3c <network_is_off+0xc>)
   dad34:	681b      	ldr	r3, [r3, #0]
   dad36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dad38:	9301      	str	r3, [sp, #4]
   dad3a:	bd08      	pop	{r3, pc}
   dad3c:	00030240 	.word	0x00030240

000dad40 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   dad40:	b508      	push	{r3, lr}
   dad42:	4b02      	ldr	r3, [pc, #8]	; (dad4c <malloc+0xc>)
   dad44:	681b      	ldr	r3, [r3, #0]
   dad46:	681b      	ldr	r3, [r3, #0]
   dad48:	9301      	str	r3, [sp, #4]
   dad4a:	bd08      	pop	{r3, pc}
   dad4c:	0003021c 	.word	0x0003021c

000dad50 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   dad50:	b508      	push	{r3, lr}
   dad52:	4b02      	ldr	r3, [pc, #8]	; (dad5c <free+0xc>)
   dad54:	681b      	ldr	r3, [r3, #0]
   dad56:	685b      	ldr	r3, [r3, #4]
   dad58:	9301      	str	r3, [sp, #4]
   dad5a:	bd08      	pop	{r3, pc}
   dad5c:	0003021c 	.word	0x0003021c

000dad60 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   dad60:	b508      	push	{r3, lr}
   dad62:	4b02      	ldr	r3, [pc, #8]	; (dad6c <realloc+0xc>)
   dad64:	681b      	ldr	r3, [r3, #0]
   dad66:	689b      	ldr	r3, [r3, #8]
   dad68:	9301      	str	r3, [sp, #4]
   dad6a:	bd08      	pop	{r3, pc}
   dad6c:	0003021c 	.word	0x0003021c

000dad70 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   dad70:	b508      	push	{r3, lr}
   dad72:	4b02      	ldr	r3, [pc, #8]	; (dad7c <siprintf+0xc>)
   dad74:	681b      	ldr	r3, [r3, #0]
   dad76:	691b      	ldr	r3, [r3, #16]
   dad78:	9301      	str	r3, [sp, #4]
   dad7a:	bd08      	pop	{r3, pc}
   dad7c:	0003021c 	.word	0x0003021c

000dad80 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   dad80:	b508      	push	{r3, lr}
   dad82:	4b02      	ldr	r3, [pc, #8]	; (dad8c <sscanf+0xc>)
   dad84:	681b      	ldr	r3, [r3, #0]
   dad86:	695b      	ldr	r3, [r3, #20]
   dad88:	9301      	str	r3, [sp, #4]
   dad8a:	bd08      	pop	{r3, pc}
   dad8c:	0003021c 	.word	0x0003021c

000dad90 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   dad90:	b508      	push	{r3, lr}
   dad92:	4b02      	ldr	r3, [pc, #8]	; (dad9c <snprintf+0xc>)
   dad94:	681b      	ldr	r3, [r3, #0]
   dad96:	69db      	ldr	r3, [r3, #28]
   dad98:	9301      	str	r3, [sp, #4]
   dad9a:	bd08      	pop	{r3, pc}
   dad9c:	0003021c 	.word	0x0003021c

000dada0 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   dada0:	b508      	push	{r3, lr}
   dada2:	4b02      	ldr	r3, [pc, #8]	; (dadac <vsnprintf+0xc>)
   dada4:	681b      	ldr	r3, [r3, #0]
   dada6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dada8:	9301      	str	r3, [sp, #4]
   dadaa:	bd08      	pop	{r3, pc}
   dadac:	0003021c 	.word	0x0003021c

000dadb0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   dadb0:	b508      	push	{r3, lr}
   dadb2:	4b02      	ldr	r3, [pc, #8]	; (dadbc <abort+0xc>)
   dadb4:	681b      	ldr	r3, [r3, #0]
   dadb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dadb8:	9301      	str	r3, [sp, #4]
   dadba:	bd08      	pop	{r3, pc}
   dadbc:	0003021c 	.word	0x0003021c

000dadc0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   dadc0:	b508      	push	{r3, lr}
   dadc2:	4b02      	ldr	r3, [pc, #8]	; (dadcc <_malloc_r+0xc>)
   dadc4:	681b      	ldr	r3, [r3, #0]
   dadc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dadc8:	9301      	str	r3, [sp, #4]
   dadca:	bd08      	pop	{r3, pc}
   dadcc:	0003021c 	.word	0x0003021c

000dadd0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   dadd0:	b508      	push	{r3, lr}
   dadd2:	4b02      	ldr	r3, [pc, #8]	; (daddc <__errno+0xc>)
   dadd4:	681b      	ldr	r3, [r3, #0]
   dadd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dadd8:	9301      	str	r3, [sp, #4]
   dadda:	bd08      	pop	{r3, pc}
   daddc:	0003021c 	.word	0x0003021c

000dade0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   dade0:	b508      	push	{r3, lr}
   dade2:	4b02      	ldr	r3, [pc, #8]	; (dadec <newlib_impure_ptr_callback+0xc>)
   dade4:	681b      	ldr	r3, [r3, #0]
   dade6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dade8:	9301      	str	r3, [sp, #4]
   dadea:	bd08      	pop	{r3, pc}
   dadec:	0003021c 	.word	0x0003021c

000dadf0 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   dadf0:	b508      	push	{r3, lr}
   dadf2:	4b02      	ldr	r3, [pc, #8]	; (dadfc <strftime+0xc>)
   dadf4:	681b      	ldr	r3, [r3, #0]
   dadf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dadf8:	9301      	str	r3, [sp, #4]
   dadfa:	bd08      	pop	{r3, pc}
   dadfc:	0003021c 	.word	0x0003021c

000dae00 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   dae00:	b508      	push	{r3, lr}
   dae02:	4b02      	ldr	r3, [pc, #8]	; (dae0c <localtime_r+0xc>)
   dae04:	681b      	ldr	r3, [r3, #0]
   dae06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dae08:	9301      	str	r3, [sp, #4]
   dae0a:	bd08      	pop	{r3, pc}
   dae0c:	0003021c 	.word	0x0003021c

000dae10 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   dae10:	b508      	push	{r3, lr}
   dae12:	4b02      	ldr	r3, [pc, #8]	; (dae1c <gmtime_r+0xc>)
   dae14:	681b      	ldr	r3, [r3, #0]
   dae16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   dae18:	9301      	str	r3, [sp, #4]
   dae1a:	bd08      	pop	{r3, pc}
   dae1c:	0003021c 	.word	0x0003021c

000dae20 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   dae20:	b508      	push	{r3, lr}
   dae22:	4b02      	ldr	r3, [pc, #8]	; (dae2c <mktime+0xc>)
   dae24:	681b      	ldr	r3, [r3, #0]
   dae26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dae28:	9301      	str	r3, [sp, #4]
   dae2a:	bd08      	pop	{r3, pc}
   dae2c:	0003021c 	.word	0x0003021c

000dae30 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   dae30:	2100      	movs	r1, #0
   dae32:	f7ff be65 	b.w	dab00 <system_delay_ms>

000dae36 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   dae36:	b510      	push	{r4, lr}
      if (_M_empty())
   dae38:	6883      	ldr	r3, [r0, #8]
   dae3a:	4604      	mov	r4, r0
   dae3c:	b90b      	cbnz	r3, dae42 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   dae3e:	f003 f8e7 	bl	de010 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dae42:	68c3      	ldr	r3, [r0, #12]
   dae44:	4798      	blx	r3
      if (_M_manager)
   dae46:	68a3      	ldr	r3, [r4, #8]
   dae48:	b11b      	cbz	r3, dae52 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dae4a:	2203      	movs	r2, #3
   dae4c:	4621      	mov	r1, r4
   dae4e:	4620      	mov	r0, r4
   dae50:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dae52:	4620      	mov	r0, r4
   dae54:	2110      	movs	r1, #16
}
   dae56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   dae5a:	f003 b8cd 	b.w	ddff8 <_ZdlPvj>

000dae5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   dae5e:	680b      	ldr	r3, [r1, #0]
   dae60:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   dae62:	b113      	cbz	r3, dae6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   dae64:	685a      	ldr	r2, [r3, #4]
   dae66:	3201      	adds	r2, #1
   dae68:	605a      	str	r2, [r3, #4]
      }
   dae6a:	4770      	bx	lr

000dae6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dae6c:	4802      	ldr	r0, [pc, #8]	; (dae78 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   dae6e:	2300      	movs	r3, #0
   dae70:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   dae72:	f7ff bb9b 	b.w	da5ac <os_mutex_recursive_create>
   dae76:	bf00      	nop
   dae78:	2003e498 	.word	0x2003e498

000dae7c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   dae7c:	2200      	movs	r2, #0
   dae7e:	6840      	ldr	r0, [r0, #4]
   dae80:	4611      	mov	r1, r2
   dae82:	f7ff bf15 	b.w	dacb0 <network_ready>

000dae86 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   dae86:	2200      	movs	r2, #0
   dae88:	6840      	ldr	r0, [r0, #4]
   dae8a:	4611      	mov	r1, r2
   dae8c:	f7ff bf30 	b.w	dacf0 <network_listening>

000dae90 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   dae90:	2200      	movs	r2, #0
   dae92:	6840      	ldr	r0, [r0, #4]
   dae94:	4611      	mov	r1, r2
   dae96:	f7ff bf3b 	b.w	dad10 <network_get_listen_timeout>

000dae9a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   dae9a:	6840      	ldr	r0, [r0, #4]
   dae9c:	2200      	movs	r2, #0
   dae9e:	f7ff bf2f 	b.w	dad00 <network_set_listen_timeout>

000daea2 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   daea2:	6840      	ldr	r0, [r0, #4]
   daea4:	2200      	movs	r2, #0
   daea6:	f081 0101 	eor.w	r1, r1, #1
   daeaa:	f7ff bf19 	b.w	dace0 <network_listen>

000daeae <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   daeae:	2300      	movs	r3, #0
   daeb0:	6840      	ldr	r0, [r0, #4]
   daeb2:	461a      	mov	r2, r3
   daeb4:	4619      	mov	r1, r3
   daeb6:	f7ff bf0b 	b.w	dacd0 <network_off>

000daeba <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   daeba:	2300      	movs	r3, #0
   daebc:	6840      	ldr	r0, [r0, #4]
   daebe:	461a      	mov	r2, r3
   daec0:	4619      	mov	r1, r3
   daec2:	f7ff befd 	b.w	dacc0 <network_on>

000daec6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   daec6:	2200      	movs	r2, #0
   daec8:	6840      	ldr	r0, [r0, #4]
   daeca:	4611      	mov	r1, r2
   daecc:	f7ff bee0 	b.w	dac90 <network_connecting>

000daed0 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   daed0:	6840      	ldr	r0, [r0, #4]
   daed2:	2200      	movs	r2, #0
   daed4:	2102      	movs	r1, #2
   daed6:	f7ff bee3 	b.w	daca0 <network_disconnect>

000daeda <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   daeda:	2300      	movs	r3, #0
   daedc:	6840      	ldr	r0, [r0, #4]
   daede:	461a      	mov	r2, r3
   daee0:	f7ff bece 	b.w	dac80 <network_connect>

000daee4 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   daee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   daee6:	4b1b      	ldr	r3, [pc, #108]	; (daf54 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   daee8:	6003      	str	r3, [r0, #0]
   daeea:	2500      	movs	r5, #0
   daeec:	460f      	mov	r7, r1
   daeee:	3330      	adds	r3, #48	; 0x30
   daef0:	2618      	movs	r6, #24
   daef2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   daef6:	b089      	sub	sp, #36	; 0x24
   daef8:	6043      	str	r3, [r0, #4]
   daefa:	4632      	mov	r2, r6
   daefc:	4629      	mov	r1, r5
   daefe:	4604      	mov	r4, r0
   daf00:	3010      	adds	r0, #16
   daf02:	f003 fd2d 	bl	de960 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   daf06:	6878      	ldr	r0, [r7, #4]
   daf08:	462a      	mov	r2, r5
   daf0a:	4629      	mov	r1, r5
   daf0c:	f7ff fed0 	bl	dacb0 <network_ready>
   daf10:	b918      	cbnz	r0, daf1a <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   daf12:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   daf14:	4620      	mov	r0, r4
   daf16:	b009      	add	sp, #36	; 0x24
   daf18:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   daf1a:	4629      	mov	r1, r5
   daf1c:	4632      	mov	r2, r6
   daf1e:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   daf20:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   daf24:	f003 fd1c 	bl	de960 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   daf28:	a902      	add	r1, sp, #8
   daf2a:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   daf2c:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   daf30:	f7ff fafc 	bl	da52c <cellular_signal>
   daf34:	b110      	cbz	r0, daf3c <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   daf36:	2301      	movs	r3, #1
   daf38:	60a3      	str	r3, [r4, #8]
            return sig;
   daf3a:	e7eb      	b.n	daf14 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   daf3c:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   daf3e:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   daf40:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   daf42:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   daf44:	b90b      	cbnz	r3, daf4a <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   daf46:	2302      	movs	r3, #2
   daf48:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   daf4a:	a902      	add	r1, sp, #8
   daf4c:	4620      	mov	r0, r4
   daf4e:	f000 f8c0 	bl	db0d2 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   daf52:	e7df      	b.n	daf14 <_ZN5spark13CellularClass4RSSIEv+0x30>
   daf54:	000e0068 	.word	0x000e0068

000daf58 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   daf58:	4b08      	ldr	r3, [pc, #32]	; (daf7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   daf5a:	b510      	push	{r4, lr}
   daf5c:	2428      	movs	r4, #40	; 0x28
   daf5e:	4622      	mov	r2, r4
   daf60:	4618      	mov	r0, r3
   daf62:	2100      	movs	r1, #0
   daf64:	f003 fcfc 	bl	de960 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   daf68:	4b05      	ldr	r3, [pc, #20]	; (daf80 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   daf6a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   daf6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   daf70:	6042      	str	r2, [r0, #4]
   daf72:	2204      	movs	r2, #4
   daf74:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   daf76:	4a03      	ldr	r2, [pc, #12]	; (daf84 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   daf78:	601a      	str	r2, [r3, #0]
   daf7a:	bd10      	pop	{r4, pc}
   daf7c:	2003e4a4 	.word	0x2003e4a4
   daf80:	2003e49c 	.word	0x2003e49c
   daf84:	000e002c 	.word	0x000e002c

000daf88 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   daf88:	4770      	bx	lr

000daf8a <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   daf8a:	7d00      	ldrb	r0, [r0, #20]
   daf8c:	4770      	bx	lr

000daf8e <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   daf8e:	7d03      	ldrb	r3, [r0, #20]
   daf90:	b14b      	cbz	r3, dafa6 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   daf92:	6983      	ldr	r3, [r0, #24]
   daf94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   daf98:	d005      	beq.n	dafa6 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   daf9a:	6a00      	ldr	r0, [r0, #32]
   daf9c:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   dafa0:	bf18      	it	ne
   dafa2:	2001      	movne	r0, #1
   dafa4:	4770      	bx	lr
   dafa6:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   dafa8:	4770      	bx	lr

000dafaa <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   dafaa:	6803      	ldr	r3, [r0, #0]
   dafac:	6a1b      	ldr	r3, [r3, #32]
   dafae:	4718      	bx	r3

000dafb0 <_ZN14CellularSignalD0Ev>:
   dafb0:	b510      	push	{r4, lr}
   dafb2:	2128      	movs	r1, #40	; 0x28
   dafb4:	4604      	mov	r4, r0
   dafb6:	f003 f81f 	bl	ddff8 <_ZdlPvj>
   dafba:	4620      	mov	r0, r4
   dafbc:	bd10      	pop	{r4, pc}
	...

000dafc0 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   dafc0:	7d03      	ldrb	r3, [r0, #20]
   dafc2:	b17b      	cbz	r3, dafe4 <_ZNK14CellularSignal11getStrengthEv+0x24>
   dafc4:	69c3      	ldr	r3, [r0, #28]
   dafc6:	2b00      	cmp	r3, #0
   dafc8:	db0c      	blt.n	dafe4 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   dafca:	ee07 3a90 	vmov	s15, r3
   dafce:	ed9f 7a07 	vldr	s14, [pc, #28]	; dafec <_ZNK14CellularSignal11getStrengthEv+0x2c>
   dafd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dafd6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   dafda:	eddf 7a05 	vldr	s15, [pc, #20]	; daff0 <_ZNK14CellularSignal11getStrengthEv+0x30>
   dafde:	ee20 0a27 	vmul.f32	s0, s0, s15
   dafe2:	4770      	bx	lr
    return -1.0f;
   dafe4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   dafe8:	4770      	bx	lr
   dafea:	bf00      	nop
   dafec:	477fff00 	.word	0x477fff00
   daff0:	42c80000 	.word	0x42c80000

000daff4 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   daff4:	7d03      	ldrb	r3, [r0, #20]
   daff6:	b163      	cbz	r3, db012 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   daff8:	6983      	ldr	r3, [r0, #24]
   daffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   daffe:	d008      	beq.n	db012 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   db000:	ee07 3a90 	vmov	s15, r3
   db004:	ed9f 7a04 	vldr	s14, [pc, #16]	; db018 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   db008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db00c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   db010:	4770      	bx	lr
    return 0.0f;
   db012:	ed9f 0a02 	vldr	s0, [pc, #8]	; db01c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   db016:	4770      	bx	lr
   db018:	42c80000 	.word	0x42c80000
   db01c:	00000000 	.word	0x00000000

000db020 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   db020:	7d03      	ldrb	r3, [r0, #20]
   db022:	b17b      	cbz	r3, db044 <_ZNK14CellularSignal10getQualityEv+0x24>
   db024:	6a43      	ldr	r3, [r0, #36]	; 0x24
   db026:	2b00      	cmp	r3, #0
   db028:	db0c      	blt.n	db044 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   db02a:	ee07 3a90 	vmov	s15, r3
   db02e:	ed9f 7a07 	vldr	s14, [pc, #28]	; db04c <_ZNK14CellularSignal10getQualityEv+0x2c>
   db032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db036:	ee87 0a87 	vdiv.f32	s0, s15, s14
   db03a:	eddf 7a05 	vldr	s15, [pc, #20]	; db050 <_ZNK14CellularSignal10getQualityEv+0x30>
   db03e:	ee20 0a27 	vmul.f32	s0, s0, s15
   db042:	4770      	bx	lr
    return -1.0f;
   db044:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   db048:	4770      	bx	lr
   db04a:	bf00      	nop
   db04c:	477fff00 	.word	0x477fff00
   db050:	42c80000 	.word	0x42c80000

000db054 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   db054:	7d03      	ldrb	r3, [r0, #20]
   db056:	b163      	cbz	r3, db072 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   db058:	6a03      	ldr	r3, [r0, #32]
   db05a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   db05e:	d008      	beq.n	db072 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   db060:	ee07 3a90 	vmov	s15, r3
   db064:	ed9f 7a04 	vldr	s14, [pc, #16]	; db078 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   db068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db06c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   db070:	4770      	bx	lr
    return 0.0f;
   db072:	ed9f 0a02 	vldr	s0, [pc, #8]	; db07c <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   db076:	4770      	bx	lr
   db078:	42c80000 	.word	0x42c80000
   db07c:	00000000 	.word	0x00000000

000db080 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   db080:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   db082:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   db084:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   db086:	da0a      	bge.n	db09e <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   db088:	212d      	movs	r1, #45	; 0x2d
   db08a:	f002 f852 	bl	dd132 <_ZN5Print5printEc>
            val = -n;
   db08e:	4261      	negs	r1, r4
            t = print('-');
   db090:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   db092:	220a      	movs	r2, #10
   db094:	4630      	mov	r0, r6
   db096:	f002 f85b 	bl	dd150 <_ZN5Print11printNumberEmh>
    }
}
   db09a:	4428      	add	r0, r5
   db09c:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   db09e:	4621      	mov	r1, r4
        size_t t = 0;
   db0a0:	2500      	movs	r5, #0
   db0a2:	e7f6      	b.n	db092 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000db0a4 <_ZNK14CellularSignal7printToER5Print>:
{
   db0a4:	b570      	push	{r4, r5, r6, lr}
   db0a6:	460c      	mov	r4, r1
   db0a8:	4605      	mov	r5, r0
   db0aa:	6881      	ldr	r1, [r0, #8]
   db0ac:	4620      	mov	r0, r4
   db0ae:	f7ff ffe7 	bl	db080 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   db0b2:	212c      	movs	r1, #44	; 0x2c
   db0b4:	4606      	mov	r6, r0
   db0b6:	4620      	mov	r0, r4
   db0b8:	f002 f83b 	bl	dd132 <_ZN5Print5printEc>
   db0bc:	68e9      	ldr	r1, [r5, #12]
   db0be:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   db0c0:	4620      	mov	r0, r4
   db0c2:	f7ff ffdd 	bl	db080 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   db0c6:	4430      	add	r0, r6
   db0c8:	bd70      	pop	{r4, r5, r6, pc}

000db0ca <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   db0ca:	f1a0 0004 	sub.w	r0, r0, #4
   db0ce:	f7ff bfe9 	b.w	db0a4 <_ZNK14CellularSignal7printToER5Print>

000db0d2 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   db0d2:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   db0d4:	460d      	mov	r5, r1
   db0d6:	f100 0410 	add.w	r4, r0, #16
   db0da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db0dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db0de:	e895 0003 	ldmia.w	r5, {r0, r1}
   db0e2:	e884 0003 	stmia.w	r4, {r0, r1}
}
   db0e6:	2001      	movs	r0, #1
   db0e8:	bd30      	pop	{r4, r5, pc}

000db0ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   db0ea:	4770      	bx	lr

000db0ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   db0ec:	2000      	movs	r0, #0
   db0ee:	4770      	bx	lr

000db0f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   db0f0:	b510      	push	{r4, lr}
   db0f2:	2110      	movs	r1, #16
   db0f4:	4604      	mov	r4, r0
   db0f6:	f002 ff7f 	bl	ddff8 <_ZdlPvj>
   db0fa:	4620      	mov	r0, r4
   db0fc:	bd10      	pop	{r4, pc}

000db0fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   db0fe:	b508      	push	{r3, lr}
      { delete this; }
   db100:	f7ff fff6 	bl	db0f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   db104:	bd08      	pop	{r3, pc}

000db106 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   db106:	b530      	push	{r4, r5, lr}
        type_(type) {
   db108:	2200      	movs	r2, #0
   db10a:	f64f 749c 	movw	r4, #65436	; 0xff9c
   db10e:	6002      	str	r2, [r0, #0]
   db110:	8084      	strh	r4, [r0, #4]
   db112:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   db114:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   db116:	680c      	ldr	r4, [r1, #0]
   db118:	8085      	strh	r5, [r0, #4]
   db11a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   db11c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   db11e:	bd30      	pop	{r4, r5, pc}

000db120 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   db120:	b510      	push	{r4, lr}
   db122:	4604      	mov	r4, r0
    free((void*)msg_);
   db124:	6800      	ldr	r0, [r0, #0]
   db126:	f7ff fe13 	bl	dad50 <free>
}
   db12a:	4620      	mov	r0, r4
   db12c:	bd10      	pop	{r4, pc}

000db12e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   db12e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   db130:	68c4      	ldr	r4, [r0, #12]
   db132:	b1f4      	cbz	r4, db172 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   db134:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   db136:	2b02      	cmp	r3, #2
   db138:	d103      	bne.n	db142 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   db13a:	f104 000c 	add.w	r0, r4, #12
   db13e:	f7ff ffef 	bl	db120 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   db142:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   db144:	b135      	cbz	r5, db154 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   db146:	4628      	mov	r0, r5
   db148:	f7fb f918 	bl	d637c <_ZNSt14_Function_baseD1Ev>
   db14c:	2110      	movs	r1, #16
   db14e:	4628      	mov	r0, r5
   db150:	f002 ff52 	bl	ddff8 <_ZdlPvj>
   db154:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   db156:	b135      	cbz	r5, db166 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   db158:	4628      	mov	r0, r5
   db15a:	f7fb f90f 	bl	d637c <_ZNSt14_Function_baseD1Ev>
   db15e:	2110      	movs	r1, #16
   db160:	4628      	mov	r0, r5
   db162:	f002 ff49 	bl	ddff8 <_ZdlPvj>
   db166:	4620      	mov	r0, r4
   db168:	2114      	movs	r1, #20
   db16a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db16e:	f002 bf43 	b.w	ddff8 <_ZdlPvj>
   db172:	bd38      	pop	{r3, r4, r5, pc}

000db174 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   db174:	b510      	push	{r4, lr}
   db176:	b088      	sub	sp, #32
   db178:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   db17a:	4668      	mov	r0, sp
   db17c:	f002 f95d 	bl	dd43a <_ZN6StringC1EPKc>
    return (*fn)(p);
   db180:	4669      	mov	r1, sp
   db182:	a804      	add	r0, sp, #16
   db184:	f002 f9a4 	bl	dd4d0 <_ZN6StringC1ERKS_>
   db188:	a804      	add	r0, sp, #16
   db18a:	47a0      	blx	r4
   db18c:	4604      	mov	r4, r0
   db18e:	a804      	add	r0, sp, #16
   db190:	f002 f908 	bl	dd3a4 <_ZN6StringD1Ev>
    String p(param);
   db194:	4668      	mov	r0, sp
   db196:	f002 f905 	bl	dd3a4 <_ZN6StringD1Ev>
}
   db19a:	4620      	mov	r0, r4
   db19c:	b008      	add	sp, #32
   db19e:	bd10      	pop	{r4, pc}

000db1a0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   db1a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   db1a2:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   db1a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   db1a8:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   db1aa:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   db1ac:	461a      	mov	r2, r3
   db1ae:	4669      	mov	r1, sp
   db1b0:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   db1b2:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   db1b6:	f8ad 4000 	strh.w	r4, [sp]
   db1ba:	f7ff fd09 	bl	dabd0 <spark_function>
}
   db1be:	b004      	add	sp, #16
   db1c0:	bd10      	pop	{r4, pc}

000db1c2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   db1c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   db1c4:	230c      	movs	r3, #12
   db1c6:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   db1ca:	6803      	ldr	r3, [r0, #0]
   db1cc:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   db1d0:	7a03      	ldrb	r3, [r0, #8]
   db1d2:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   db1d6:	6843      	ldr	r3, [r0, #4]
   db1d8:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   db1da:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   db1dc:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   db1de:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   db1e2:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   db1e4:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   db1e8:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   db1ec:	f7ff fd40 	bl	dac70 <spark_cloud_disconnect>
}
   db1f0:	b005      	add	sp, #20
   db1f2:	f85d fb04 	ldr.w	pc, [sp], #4

000db1f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   db1f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   db1f8:	460e      	mov	r6, r1
   db1fa:	4604      	mov	r4, r0
   db1fc:	f856 3b04 	ldr.w	r3, [r6], #4
   db200:	9300      	str	r3, [sp, #0]
   db202:	460d      	mov	r5, r1
   db204:	a801      	add	r0, sp, #4
   db206:	4631      	mov	r1, r6
   db208:	f7ff fe29 	bl	dae5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   db20c:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   db20e:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   db210:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   db212:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   db214:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   db216:	2300      	movs	r3, #0
   db218:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   db21a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   db21c:	f7f9 fe0b 	bl	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   db220:	4630      	mov	r0, r6
   db222:	f7f9 fe08 	bl	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   db226:	4628      	mov	r0, r5
   db228:	2108      	movs	r1, #8
   db22a:	f002 fee5 	bl	ddff8 <_ZdlPvj>
        return p;
    }
   db22e:	4620      	mov	r0, r4
   db230:	b002      	add	sp, #8
   db232:	bd70      	pop	{r4, r5, r6, pc}

000db234 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   db234:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   db236:	b510      	push	{r4, lr}
      if (_M_empty())
   db238:	b90a      	cbnz	r2, db23e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   db23a:	f002 fee9 	bl	de010 <_ZSt25__throw_bad_function_callv>
    }
   db23e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   db242:	68c3      	ldr	r3, [r0, #12]
   db244:	4718      	bx	r3

000db246 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   db246:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   db248:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   db24a:	f100 0110 	add.w	r1, r0, #16
   db24e:	f7ff fff1 	bl	db234 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   db252:	bd08      	pop	{r3, pc}

000db254 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   db254:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   db256:	b510      	push	{r4, lr}
      if (_M_empty())
   db258:	b90a      	cbnz	r2, db25e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   db25a:	f002 fed9 	bl	de010 <_ZSt25__throw_bad_function_callv>
    }
   db25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   db262:	68c3      	ldr	r3, [r0, #12]
   db264:	4718      	bx	r3

000db266 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   db266:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   db268:	6800      	ldr	r0, [r0, #0]
   db26a:	f100 0110 	add.w	r1, r0, #16
   db26e:	f7ff fff1 	bl	db254 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   db272:	bd08      	pop	{r3, pc}

000db274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   db274:	b538      	push	{r3, r4, r5, lr}
   db276:	2300      	movs	r3, #0
   db278:	4604      	mov	r4, r0
   db27a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   db27c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   db27e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   db280:	f7f8 ff09 	bl	d4096 <_Znwj>
   db284:	b128      	cbz	r0, db292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   db286:	2301      	movs	r3, #1
   db288:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   db28c:	4b02      	ldr	r3, [pc, #8]	; (db298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   db28e:	6003      	str	r3, [r0, #0]
   db290:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   db292:	6020      	str	r0, [r4, #0]
	}
   db294:	4620      	mov	r0, r4
   db296:	bd38      	pop	{r3, r4, r5, pc}
   db298:	000e00a4 	.word	0x000e00a4

000db29c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   db29c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   db29e:	2300      	movs	r3, #0
   db2a0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   db2a2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   db2a4:	4604      	mov	r4, r0
   db2a6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   db2a8:	b12b      	cbz	r3, db2b6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   db2aa:	2202      	movs	r2, #2
   db2ac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   db2ae:	68eb      	ldr	r3, [r5, #12]
   db2b0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   db2b2:	68ab      	ldr	r3, [r5, #8]
   db2b4:	60a3      	str	r3, [r4, #8]
    }
   db2b6:	4620      	mov	r0, r4
   db2b8:	bd38      	pop	{r3, r4, r5, pc}
	...

000db2bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   db2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   db2be:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   db2c0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   db2c2:	4668      	mov	r0, sp
   db2c4:	f7ff ff1f 	bl	db106 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   db2c8:	f04f 0302 	mov.w	r3, #2
   db2cc:	e8d4 2f4f 	ldrexb	r2, [r4]
   db2d0:	2a00      	cmp	r2, #0
   db2d2:	d103      	bne.n	db2dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   db2d4:	e8c4 3f41 	strexb	r1, r3, [r4]
   db2d8:	2900      	cmp	r1, #0
   db2da:	d1f7      	bne.n	db2cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   db2dc:	d125      	bne.n	db32a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   db2de:	f104 050c 	add.w	r5, r4, #12
   db2e2:	4669      	mov	r1, sp
   db2e4:	4628      	mov	r0, r5
   db2e6:	f7ff ff0e 	bl	db106 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   db2ea:	f3bf 8f5b 	dmb	ish
   db2ee:	2301      	movs	r3, #1
   db2f0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   db2f2:	2000      	movs	r0, #0
   db2f4:	f104 0308 	add.w	r3, r4, #8
   db2f8:	f3bf 8f5b 	dmb	ish
   db2fc:	e853 6f00 	ldrex	r6, [r3]
   db300:	e843 0200 	strex	r2, r0, [r3]
   db304:	2a00      	cmp	r2, #0
   db306:	d1f9      	bne.n	db2fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   db308:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   db30c:	b16e      	cbz	r6, db32a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   db30e:	f7ff fc0f 	bl	dab30 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   db312:	b178      	cbz	r0, db334 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   db314:	4629      	mov	r1, r5
   db316:	4630      	mov	r0, r6
   db318:	f7ff ff8c 	bl	db234 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   db31c:	4630      	mov	r0, r6
   db31e:	f7fb f82d 	bl	d637c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   db322:	2110      	movs	r1, #16
   db324:	4630      	mov	r0, r6
   db326:	f002 fe67 	bl	ddff8 <_ZdlPvj>
        p_->setError(std::move(error));
   db32a:	4668      	mov	r0, sp
   db32c:	f7ff fef8 	bl	db120 <_ZN8particle5ErrorD1Ev>
    }
   db330:	b009      	add	sp, #36	; 0x24
   db332:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   db334:	4631      	mov	r1, r6
   db336:	a802      	add	r0, sp, #8
   db338:	f7ff ffb0 	bl	db29c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   db33c:	68e0      	ldr	r0, [r4, #12]
   db33e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   db342:	b108      	cbz	r0, db348 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   db344:	f003 fb96 	bl	dea74 <strdup>
        type_(type) {
   db348:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   db34a:	2010      	movs	r0, #16
   db34c:	f8ad 501c 	strh.w	r5, [sp, #28]
   db350:	f7f8 fea1 	bl	d4096 <_Znwj>
   db354:	4605      	mov	r5, r0
   db356:	b1e8      	cbz	r0, db394 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   db358:	2700      	movs	r7, #0
   db35a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db35c:	2018      	movs	r0, #24
   db35e:	f7f8 fe9a 	bl	d4096 <_Znwj>
   db362:	4604      	mov	r4, r0
   db364:	b188      	cbz	r0, db38a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   db366:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   db368:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   db36a:	a802      	add	r0, sp, #8
   db36c:	f7fb f905 	bl	d657a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db370:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   db372:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   db374:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db376:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   db378:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   db37a:	a906      	add	r1, sp, #24
   db37c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   db37e:	60e3      	str	r3, [r4, #12]
   db380:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   db384:	9205      	str	r2, [sp, #20]
   db386:	f7ff febe 	bl	db106 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   db38a:	4b08      	ldr	r3, [pc, #32]	; (db3ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   db38c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   db38e:	4b08      	ldr	r3, [pc, #32]	; (db3b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db390:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   db392:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   db394:	a806      	add	r0, sp, #24
   db396:	f7ff fec3 	bl	db120 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   db39a:	a802      	add	r0, sp, #8
   db39c:	f7fa ffee 	bl	d637c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   db3a0:	2200      	movs	r2, #0
   db3a2:	4629      	mov	r1, r5
   db3a4:	4803      	ldr	r0, [pc, #12]	; (db3b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   db3a6:	f7ff fbcb 	bl	dab40 <application_thread_invoke>
   db3aa:	e7b7      	b.n	db31c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   db3ac:	000db247 	.word	0x000db247
   db3b0:	000db4dd 	.word	0x000db4dd
   db3b4:	000dae37 	.word	0x000dae37

000db3b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   db3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db3bc:	b08a      	sub	sp, #40	; 0x28
   db3be:	4605      	mov	r5, r0
   db3c0:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   db3c4:	460c      	mov	r4, r1
   db3c6:	4617      	mov	r7, r2
   db3c8:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   db3ca:	f7ff fc19 	bl	dac00 <spark_cloud_flag_connected>
   db3ce:	ae07      	add	r6, sp, #28
    if (!connected()) {
   db3d0:	4682      	mov	sl, r0
   db3d2:	bb38      	cbnz	r0, db424 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   db3d4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   db3d8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   db3da:	a905      	add	r1, sp, #20
   db3dc:	4630      	mov	r0, r6
   db3de:	f8ad 3018 	strh.w	r3, [sp, #24]
   db3e2:	f7ff fe90 	bl	db106 <_ZN8particle5ErrorC1EOS0_>
   db3e6:	2014      	movs	r0, #20
   db3e8:	f7f8 fe55 	bl	d4096 <_Znwj>
   db3ec:	4604      	mov	r4, r0
   db3ee:	b148      	cbz	r0, db404 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   db3f0:	2302      	movs	r3, #2
   db3f2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db3f4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   db3f6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db3fa:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   db3fc:	4631      	mov	r1, r6
   db3fe:	300c      	adds	r0, #12
   db400:	f7ff fe81 	bl	db106 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   db404:	4628      	mov	r0, r5
	: __shared_count(__p)
   db406:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   db408:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   db40c:	f7ff ff32 	bl	db274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   db410:	4630      	mov	r0, r6
   db412:	f7ff fe85 	bl	db120 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   db416:	a805      	add	r0, sp, #20
   db418:	f7ff fe82 	bl	db120 <_ZN8particle5ErrorD1Ev>
}
   db41c:	4628      	mov	r0, r5
   db41e:	b00a      	add	sp, #40	; 0x28
   db420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   db424:	230c      	movs	r3, #12
   db426:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   db42a:	2014      	movs	r0, #20
   db42c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   db430:	9307      	str	r3, [sp, #28]
   db432:	f7f8 fe30 	bl	d4096 <_Znwj>
   db436:	4601      	mov	r1, r0
   db438:	b128      	cbz	r0, db446 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   db43a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   db43e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db442:	f880 a001 	strb.w	sl, [r0, #1]
   db446:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   db448:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   db44a:	f7ff ff13 	bl	db274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   db44e:	4b22      	ldr	r3, [pc, #136]	; (db4d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   db450:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   db452:	2008      	movs	r0, #8
   db454:	f7f8 fe1f 	bl	d4096 <_Znwj>
   db458:	4682      	mov	sl, r0
   db45a:	b128      	cbz	r0, db468 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   db45c:	9b03      	ldr	r3, [sp, #12]
   db45e:	f840 3b04 	str.w	r3, [r0], #4
   db462:	a904      	add	r1, sp, #16
   db464:	f7ff fcfb 	bl	dae5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   db468:	9600      	str	r6, [sp, #0]
   db46a:	fa5f f389 	uxtb.w	r3, r9
   db46e:	4642      	mov	r2, r8
   db470:	4639      	mov	r1, r7
   db472:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   db474:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   db478:	f7ff fbca 	bl	dac10 <spark_send_event>
   db47c:	b9b8      	cbnz	r0, db4ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   db47e:	9b03      	ldr	r3, [sp, #12]
   db480:	785b      	ldrb	r3, [r3, #1]
   db482:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   db486:	b993      	cbnz	r3, db4ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   db488:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   db48c:	a905      	add	r1, sp, #20
   db48e:	a803      	add	r0, sp, #12
   db490:	9205      	str	r2, [sp, #20]
   db492:	f8ad 3018 	strh.w	r3, [sp, #24]
   db496:	f7ff ff11 	bl	db2bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   db49a:	a805      	add	r0, sp, #20
   db49c:	f7ff fe40 	bl	db120 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   db4a0:	a805      	add	r0, sp, #20
   db4a2:	9909      	ldr	r1, [sp, #36]	; 0x24
   db4a4:	f7ff fea7 	bl	db1f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   db4a8:	a806      	add	r0, sp, #24
   db4aa:	f7f9 fcc4 	bl	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   db4ae:	9b03      	ldr	r3, [sp, #12]
   db4b0:	9305      	str	r3, [sp, #20]
   db4b2:	a904      	add	r1, sp, #16
   db4b4:	a806      	add	r0, sp, #24
   db4b6:	f7ff fcd2 	bl	dae5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   db4ba:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   db4bc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   db4be:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   db4c0:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   db4c2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   db4c4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   db4c6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   db4c8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   db4ca:	f7f9 fcb4 	bl	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   db4ce:	a804      	add	r0, sp, #16
   db4d0:	f7f9 fcb1 	bl	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   db4d4:	e7a2      	b.n	db41c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   db4d6:	bf00      	nop
   db4d8:	000db5a1 	.word	0x000db5a1

000db4dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   db4dc:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   db4de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db4e0:	4605      	mov	r5, r0
	  switch (__op)
   db4e2:	d007      	beq.n	db4f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   db4e4:	2a03      	cmp	r2, #3
   db4e6:	d018      	beq.n	db51a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   db4e8:	2a01      	cmp	r2, #1
   db4ea:	d101      	bne.n	db4f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   db4ec:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db4ee:	6003      	str	r3, [r0, #0]
	}
   db4f0:	2000      	movs	r0, #0
   db4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   db4f4:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   db4f6:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   db4f8:	f7f8 fdcd 	bl	d4096 <_Znwj>
   db4fc:	4604      	mov	r4, r0
   db4fe:	b150      	cbz	r0, db516 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   db500:	4631      	mov	r1, r6
   db502:	f7ff fecb 	bl	db29c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   db506:	6930      	ldr	r0, [r6, #16]
   db508:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   db50c:	b108      	cbz	r0, db512 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   db50e:	f003 fab1 	bl	dea74 <strdup>
        type_(type) {
   db512:	6120      	str	r0, [r4, #16]
   db514:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   db516:	602c      	str	r4, [r5, #0]
	}
   db518:	e7ea      	b.n	db4f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   db51a:	6804      	ldr	r4, [r0, #0]
   db51c:	2c00      	cmp	r4, #0
   db51e:	d0e7      	beq.n	db4f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   db520:	f104 0010 	add.w	r0, r4, #16
   db524:	f7ff fdfc 	bl	db120 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   db528:	4620      	mov	r0, r4
   db52a:	f7fa ff27 	bl	d637c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   db52e:	2118      	movs	r1, #24
   db530:	4620      	mov	r0, r4
   db532:	f002 fd61 	bl	ddff8 <_ZdlPvj>
   db536:	e7db      	b.n	db4f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000db538 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   db538:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   db53a:	2300      	movs	r3, #0
   db53c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   db53e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   db540:	4604      	mov	r4, r0
   db542:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   db544:	b12b      	cbz	r3, db552 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   db546:	2202      	movs	r2, #2
   db548:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   db54a:	68eb      	ldr	r3, [r5, #12]
   db54c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   db54e:	68ab      	ldr	r3, [r5, #8]
   db550:	60a3      	str	r3, [r4, #8]
    }
   db552:	4620      	mov	r0, r4
   db554:	bd38      	pop	{r3, r4, r5, pc}

000db556 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   db556:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   db558:	b570      	push	{r4, r5, r6, lr}
   db55a:	4604      	mov	r4, r0
	  switch (__op)
   db55c:	d007      	beq.n	db56e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   db55e:	2a03      	cmp	r2, #3
   db560:	d012      	beq.n	db588 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   db562:	2a01      	cmp	r2, #1
   db564:	d101      	bne.n	db56a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   db566:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db568:	6003      	str	r3, [r0, #0]
	}
   db56a:	2000      	movs	r0, #0
   db56c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   db56e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   db570:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   db572:	f7f8 fd90 	bl	d4096 <_Znwj>
   db576:	4605      	mov	r5, r0
   db578:	b120      	cbz	r0, db584 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   db57a:	4631      	mov	r1, r6
   db57c:	f7ff ffdc 	bl	db538 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   db580:	7c33      	ldrb	r3, [r6, #16]
   db582:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   db584:	6025      	str	r5, [r4, #0]
	}
   db586:	e7f0      	b.n	db56a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   db588:	6804      	ldr	r4, [r0, #0]
   db58a:	2c00      	cmp	r4, #0
   db58c:	d0ed      	beq.n	db56a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   db58e:	4620      	mov	r0, r4
   db590:	f7fa fef4 	bl	d637c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   db594:	2114      	movs	r1, #20
   db596:	4620      	mov	r0, r4
   db598:	f002 fd2e 	bl	ddff8 <_ZdlPvj>
   db59c:	e7e5      	b.n	db56a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000db5a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   db5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   db5a2:	b089      	sub	sp, #36	; 0x24
   db5a4:	4604      	mov	r4, r0
   db5a6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   db5a8:	a801      	add	r0, sp, #4
   db5aa:	4611      	mov	r1, r2
   db5ac:	f7ff fe23 	bl	db1f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   db5b0:	b1a4      	cbz	r4, db5dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   db5b2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   db5b4:	b11d      	cbz	r5, db5be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   db5b6:	4628      	mov	r0, r5
   db5b8:	f003 fa5c 	bl	dea74 <strdup>
   db5bc:	4605      	mov	r5, r0
   db5be:	a801      	add	r0, sp, #4
   db5c0:	a903      	add	r1, sp, #12
        type_(type) {
   db5c2:	9503      	str	r5, [sp, #12]
   db5c4:	f8ad 4010 	strh.w	r4, [sp, #16]
   db5c8:	f7ff fe78 	bl	db2bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   db5cc:	a803      	add	r0, sp, #12
   db5ce:	f7ff fda7 	bl	db120 <_ZN8particle5ErrorD1Ev>
   db5d2:	a802      	add	r0, sp, #8
   db5d4:	f7f9 fc2f 	bl	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   db5d8:	b009      	add	sp, #36	; 0x24
   db5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   db5dc:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   db5de:	2301      	movs	r3, #1
   db5e0:	e8d5 2f4f 	ldrexb	r2, [r5]
   db5e4:	2a00      	cmp	r2, #0
   db5e6:	d103      	bne.n	db5f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   db5e8:	e8c5 3f41 	strexb	r1, r3, [r5]
   db5ec:	2900      	cmp	r1, #0
   db5ee:	d1f7      	bne.n	db5e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   db5f0:	d1ef      	bne.n	db5d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   db5f2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   db5f4:	f3bf 8f5b 	dmb	ish
   db5f8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   db5fa:	1d2b      	adds	r3, r5, #4
   db5fc:	f3bf 8f5b 	dmb	ish
   db600:	e853 6f00 	ldrex	r6, [r3]
   db604:	e843 4200 	strex	r2, r4, [r3]
   db608:	2a00      	cmp	r2, #0
   db60a:	d1f9      	bne.n	db600 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   db60c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   db610:	2e00      	cmp	r6, #0
   db612:	d0de      	beq.n	db5d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   db614:	4620      	mov	r0, r4
   db616:	f7ff fa8b 	bl	dab30 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   db61a:	4607      	mov	r7, r0
   db61c:	b160      	cbz	r0, db638 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   db61e:	f105 010c 	add.w	r1, r5, #12
   db622:	4630      	mov	r0, r6
   db624:	f7ff fe16 	bl	db254 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   db628:	4630      	mov	r0, r6
   db62a:	f7fa fea7 	bl	d637c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   db62e:	2110      	movs	r1, #16
   db630:	4630      	mov	r0, r6
   db632:	f002 fce1 	bl	ddff8 <_ZdlPvj>
   db636:	e7cc      	b.n	db5d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   db638:	4631      	mov	r1, r6
   db63a:	a803      	add	r0, sp, #12
   db63c:	f7ff ff7c 	bl	db538 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   db640:	7b2b      	ldrb	r3, [r5, #12]
   db642:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   db646:	2010      	movs	r0, #16
   db648:	f7f8 fd25 	bl	d4096 <_Znwj>
   db64c:	4605      	mov	r5, r0
   db64e:	b1d0      	cbz	r0, db686 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   db650:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db652:	2014      	movs	r0, #20
   db654:	f7f8 fd1f 	bl	d4096 <_Znwj>
   db658:	4604      	mov	r4, r0
   db65a:	b178      	cbz	r0, db67c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   db65c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   db65e:	4601      	mov	r1, r0
   db660:	a803      	add	r0, sp, #12
   db662:	f7fa ff8a 	bl	d657a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db666:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   db668:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   db66a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db66c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   db66e:	9205      	str	r2, [sp, #20]
   db670:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   db672:	60e3      	str	r3, [r4, #12]
   db674:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   db678:	9206      	str	r2, [sp, #24]
   db67a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   db67c:	4b06      	ldr	r3, [pc, #24]	; (db698 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   db67e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   db680:	4b06      	ldr	r3, [pc, #24]	; (db69c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db682:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   db684:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   db686:	a803      	add	r0, sp, #12
   db688:	f7fa fe78 	bl	d637c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   db68c:	2200      	movs	r2, #0
   db68e:	4629      	mov	r1, r5
   db690:	4803      	ldr	r0, [pc, #12]	; (db6a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   db692:	f7ff fa55 	bl	dab40 <application_thread_invoke>
   db696:	e7c7      	b.n	db628 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   db698:	000db267 	.word	0x000db267
   db69c:	000db557 	.word	0x000db557
   db6a0:	000dae37 	.word	0x000dae37

000db6a4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   db6a4:	2200      	movs	r2, #0
   db6a6:	6840      	ldr	r0, [r0, #4]
   db6a8:	4611      	mov	r1, r2
   db6aa:	f7ff bb21 	b.w	dacf0 <network_listening>

000db6ae <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   db6ae:	2200      	movs	r2, #0
   db6b0:	6840      	ldr	r0, [r0, #4]
   db6b2:	4611      	mov	r1, r2
   db6b4:	f7ff bb2c 	b.w	dad10 <network_get_listen_timeout>

000db6b8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   db6b8:	6840      	ldr	r0, [r0, #4]
   db6ba:	2200      	movs	r2, #0
   db6bc:	f7ff bb20 	b.w	dad00 <network_set_listen_timeout>

000db6c0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   db6c0:	6840      	ldr	r0, [r0, #4]
   db6c2:	2200      	movs	r2, #0
   db6c4:	f081 0101 	eor.w	r1, r1, #1
   db6c8:	f7ff bb0a 	b.w	dace0 <network_listen>

000db6cc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   db6cc:	2300      	movs	r3, #0
   db6ce:	6840      	ldr	r0, [r0, #4]
   db6d0:	461a      	mov	r2, r3
   db6d2:	4619      	mov	r1, r3
   db6d4:	f7ff bafc 	b.w	dacd0 <network_off>

000db6d8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   db6d8:	2300      	movs	r3, #0
   db6da:	6840      	ldr	r0, [r0, #4]
   db6dc:	461a      	mov	r2, r3
   db6de:	4619      	mov	r1, r3
   db6e0:	f7ff baee 	b.w	dacc0 <network_on>

000db6e4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   db6e4:	2200      	movs	r2, #0
   db6e6:	6840      	ldr	r0, [r0, #4]
   db6e8:	4611      	mov	r1, r2
   db6ea:	f7ff bae1 	b.w	dacb0 <network_ready>

000db6ee <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   db6ee:	2200      	movs	r2, #0
   db6f0:	6840      	ldr	r0, [r0, #4]
   db6f2:	4611      	mov	r1, r2
   db6f4:	f7ff bacc 	b.w	dac90 <network_connecting>

000db6f8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db6f8:	6840      	ldr	r0, [r0, #4]
   db6fa:	2200      	movs	r2, #0
   db6fc:	2102      	movs	r1, #2
   db6fe:	f7ff bacf 	b.w	daca0 <network_disconnect>

000db702 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   db702:	2300      	movs	r3, #0
   db704:	6840      	ldr	r0, [r0, #4]
   db706:	461a      	mov	r2, r3
   db708:	f7ff baba 	b.w	dac80 <network_connect>

000db70c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   db70c:	4b02      	ldr	r3, [pc, #8]	; (db718 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   db70e:	2203      	movs	r2, #3
   db710:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   db712:	4a02      	ldr	r2, [pc, #8]	; (db71c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   db714:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   db716:	4770      	bx	lr
   db718:	2003e4cc 	.word	0x2003e4cc
   db71c:	000e00c0 	.word	0x000e00c0

000db720 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   db720:	6800      	ldr	r0, [r0, #0]
   db722:	f000 b951 	b.w	db9c8 <_ZN7TwoWire4lockEv>

000db726 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   db726:	b510      	push	{r4, lr}
   db728:	4604      	mov	r4, r0
      lock_(_lock) {
   db72a:	6001      	str	r1, [r0, #0]
   db72c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   db72e:	b10a      	cbz	r2, db734 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   db730:	f7ff fff6 	bl	db720 <_ZN9FuelGauge4lockEv>
}
   db734:	4620      	mov	r0, r4
   db736:	bd10      	pop	{r4, pc}

000db738 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   db738:	b513      	push	{r0, r1, r4, lr}
   db73a:	4604      	mov	r4, r0
   db73c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   db73e:	f002 fc37 	bl	ddfb0 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   db742:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   db744:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   db746:	4620      	mov	r0, r4
   db748:	f7ff ffed 	bl	db726 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   db74c:	4620      	mov	r0, r4
   db74e:	b002      	add	sp, #8
   db750:	bd10      	pop	{r4, pc}

000db752 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   db752:	6800      	ldr	r0, [r0, #0]
   db754:	f000 b941 	b.w	db9da <_ZN7TwoWire6unlockEv>

000db758 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   db758:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   db75c:	4604      	mov	r4, r0
   db75e:	460d      	mov	r5, r1
   db760:	4617      	mov	r7, r2
   db762:	461e      	mov	r6, r3
      { _M_device.lock(); }
   db764:	f7ff ffdc 	bl	db720 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db768:	2336      	movs	r3, #54	; 0x36
   db76a:	f88d 3000 	strb.w	r3, [sp]
   db76e:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   db770:	6820      	ldr	r0, [r4, #0]
   db772:	9301      	str	r3, [sp, #4]
   db774:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   db778:	230a      	movs	r3, #10
   db77a:	4669      	mov	r1, sp
   db77c:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db77e:	f88d 8008 	strb.w	r8, [sp, #8]
   db782:	f000 f905 	bl	db990 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   db786:	6820      	ldr	r0, [r4, #0]
   db788:	6803      	ldr	r3, [r0, #0]
   db78a:	4629      	mov	r1, r5
   db78c:	689b      	ldr	r3, [r3, #8]
   db78e:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   db790:	6820      	ldr	r0, [r4, #0]
   db792:	4641      	mov	r1, r8
   db794:	f000 f914 	bl	db9c0 <_ZN7TwoWire15endTransmissionEh>
   db798:	4605      	mov	r5, r0
   db79a:	b140      	cbz	r0, db7ae <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   db79c:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   db7a0:	4620      	mov	r0, r4
   db7a2:	f7ff ffd6 	bl	db752 <_ZN9FuelGauge6unlockEv>
}
   db7a6:	4628      	mov	r0, r5
   db7a8:	b004      	add	sp, #16
   db7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   db7ae:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   db7b0:	6820      	ldr	r0, [r4, #0]
   db7b2:	9301      	str	r3, [sp, #4]
   db7b4:	4669      	mov	r1, sp
   db7b6:	f000 f8bb 	bl	db930 <_ZN7TwoWire11requestFromERK16WireTransmission>
   db7ba:	2802      	cmp	r0, #2
   db7bc:	d1ee      	bne.n	db79c <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   db7be:	6820      	ldr	r0, [r4, #0]
   db7c0:	6803      	ldr	r3, [r0, #0]
   db7c2:	695b      	ldr	r3, [r3, #20]
   db7c4:	4798      	blx	r3
   db7c6:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   db7c8:	6820      	ldr	r0, [r4, #0]
   db7ca:	6803      	ldr	r3, [r0, #0]
   db7cc:	695b      	ldr	r3, [r3, #20]
   db7ce:	4798      	blx	r3
   db7d0:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   db7d2:	e7e5      	b.n	db7a0 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000db7d4 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   db7d4:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   db7d6:	2300      	movs	r3, #0
   db7d8:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   db7dc:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   db7e0:	f10d 0206 	add.w	r2, sp, #6
   db7e4:	f10d 0307 	add.w	r3, sp, #7
   db7e8:	2104      	movs	r1, #4
   db7ea:	f7ff ffb5 	bl	db758 <_ZN9FuelGauge12readRegisterEhRhS0_>
   db7ee:	b9b0      	cbnz	r0, db81e <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   db7f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   db7f4:	f002 fd62 	bl	de2bc <__aeabi_i2d>
   db7f8:	4b0a      	ldr	r3, [pc, #40]	; (db824 <_ZN9FuelGauge6getSoCEv+0x50>)
   db7fa:	2200      	movs	r2, #0
   db7fc:	f002 fdc8 	bl	de390 <__aeabi_dmul>
   db800:	f002 fff8 	bl	de7f4 <__aeabi_d2f>
        return MSB + decimal;
   db804:	f89d 3006 	ldrb.w	r3, [sp, #6]
   db808:	ee00 3a10 	vmov	s0, r3
   db80c:	ee07 0a90 	vmov	s15, r0
   db810:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   db814:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   db818:	b003      	add	sp, #12
   db81a:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   db81e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   db822:	e7f9      	b.n	db818 <_ZN9FuelGauge6getSoCEv+0x44>
   db824:	3f700000 	.word	0x3f700000

000db828 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   db828:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   db82c:	4616      	mov	r6, r2
   db82e:	4604      	mov	r4, r0
   db830:	461d      	mov	r5, r3
   db832:	460f      	mov	r7, r1
      { _M_device.lock(); }
   db834:	f7ff ff74 	bl	db720 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db838:	2336      	movs	r3, #54	; 0x36
   db83a:	f88d 3000 	strb.w	r3, [sp]
   db83e:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   db840:	6820      	ldr	r0, [r4, #0]
   db842:	9301      	str	r3, [sp, #4]
   db844:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   db848:	230a      	movs	r3, #10
   db84a:	4669      	mov	r1, sp
   db84c:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db84e:	f88d 8008 	strb.w	r8, [sp, #8]
   db852:	f000 f89d 	bl	db990 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   db856:	6820      	ldr	r0, [r4, #0]
   db858:	6803      	ldr	r3, [r0, #0]
   db85a:	4639      	mov	r1, r7
   db85c:	689b      	ldr	r3, [r3, #8]
   db85e:	4798      	blx	r3
    i2c_.write(MSB);
   db860:	6820      	ldr	r0, [r4, #0]
   db862:	6803      	ldr	r3, [r0, #0]
   db864:	4631      	mov	r1, r6
   db866:	689b      	ldr	r3, [r3, #8]
   db868:	4798      	blx	r3
    i2c_.write(LSB);
   db86a:	6820      	ldr	r0, [r4, #0]
   db86c:	6803      	ldr	r3, [r0, #0]
   db86e:	4629      	mov	r1, r5
   db870:	689b      	ldr	r3, [r3, #8]
   db872:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   db874:	4641      	mov	r1, r8
   db876:	6820      	ldr	r0, [r4, #0]
   db878:	f000 f8a2 	bl	db9c0 <_ZN7TwoWire15endTransmissionEh>
   db87c:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   db87e:	4620      	mov	r0, r4
   db880:	bf0c      	ite	eq
   db882:	2500      	moveq	r5, #0
   db884:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   db888:	f7ff ff63 	bl	db752 <_ZN9FuelGauge6unlockEv>
}
   db88c:	4628      	mov	r0, r5
   db88e:	b004      	add	sp, #16
   db890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db894 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   db894:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   db896:	2240      	movs	r2, #64	; 0x40
   db898:	2300      	movs	r3, #0
   db89a:	2106      	movs	r1, #6
   db89c:	f7ff ffc4 	bl	db828 <_ZN9FuelGauge13writeRegisterEhhh>
}
   db8a0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   db8a4:	bd08      	pop	{r3, pc}

000db8a6 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   db8a6:	4770      	bx	lr

000db8a8 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   db8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db8aa:	4606      	mov	r6, r0
   db8ac:	4615      	mov	r5, r2
   db8ae:	460c      	mov	r4, r1
   db8b0:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   db8b2:	42bc      	cmp	r4, r7
   db8b4:	d006      	beq.n	db8c4 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   db8b6:	6833      	ldr	r3, [r6, #0]
   db8b8:	f814 1b01 	ldrb.w	r1, [r4], #1
   db8bc:	689b      	ldr	r3, [r3, #8]
   db8be:	4630      	mov	r0, r6
   db8c0:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   db8c2:	e7f6      	b.n	db8b2 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   db8c4:	4628      	mov	r0, r5
   db8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db8c8 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   db8c8:	7c00      	ldrb	r0, [r0, #16]
   db8ca:	2200      	movs	r2, #0
   db8cc:	f7fe bf36 	b.w	da73c <hal_i2c_write>

000db8d0 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   db8d0:	7c00      	ldrb	r0, [r0, #16]
   db8d2:	2100      	movs	r1, #0
   db8d4:	f7fe bf3a 	b.w	da74c <hal_i2c_available>

000db8d8 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   db8d8:	7c00      	ldrb	r0, [r0, #16]
   db8da:	2100      	movs	r1, #0
   db8dc:	f7fe bf3e 	b.w	da75c <hal_i2c_read>

000db8e0 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   db8e0:	7c00      	ldrb	r0, [r0, #16]
   db8e2:	2100      	movs	r1, #0
   db8e4:	f7fe bf42 	b.w	da76c <hal_i2c_peek>

000db8e8 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   db8e8:	7c00      	ldrb	r0, [r0, #16]
   db8ea:	2100      	movs	r1, #0
   db8ec:	f7fe bf46 	b.w	da77c <hal_i2c_flush>

000db8f0 <_ZN7TwoWireD0Ev>:
   db8f0:	b510      	push	{r4, lr}
   db8f2:	2114      	movs	r1, #20
   db8f4:	4604      	mov	r4, r0
   db8f6:	f002 fb7f 	bl	ddff8 <_ZdlPvj>
   db8fa:	4620      	mov	r0, r4
   db8fc:	bd10      	pop	{r4, pc}
	...

000db900 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   db900:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   db902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db906:	4604      	mov	r4, r0
   db908:	4608      	mov	r0, r1
   db90a:	2100      	movs	r1, #0
   db90c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   db910:	4b03      	ldr	r3, [pc, #12]	; (db920 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   db912:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   db914:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   db916:	4611      	mov	r1, r2
   db918:	f7fe ff40 	bl	da79c <hal_i2c_init>
}
   db91c:	4620      	mov	r0, r4
   db91e:	bd10      	pop	{r4, pc}
   db920:	000e00fc 	.word	0x000e00fc

000db924 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   db924:	2300      	movs	r3, #0
   db926:	7c00      	ldrb	r0, [r0, #16]
   db928:	461a      	mov	r2, r3
   db92a:	4619      	mov	r1, r3
   db92c:	f7fe beee 	b.w	da70c <hal_i2c_begin>

000db930 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   db930:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   db932:	2200      	movs	r2, #0
   db934:	2314      	movs	r3, #20
   db936:	e9cd 2201 	strd	r2, r2, [sp, #4]
   db93a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   db93e:	780b      	ldrb	r3, [r1, #0]
   db940:	f88d 3008 	strb.w	r3, [sp, #8]
   db944:	684b      	ldr	r3, [r1, #4]
   db946:	9303      	str	r3, [sp, #12]
   db948:	68cb      	ldr	r3, [r1, #12]
   db94a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   db94c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   db94e:	7a0b      	ldrb	r3, [r1, #8]
   db950:	9305      	str	r3, [sp, #20]
   db952:	a901      	add	r1, sp, #4
   db954:	f7fe ff3a 	bl	da7cc <hal_i2c_request_ex>
}
   db958:	b007      	add	sp, #28
   db95a:	f85d fb04 	ldr.w	pc, [sp], #4

000db95e <_ZN7TwoWire11requestFromEhjh>:
{
   db95e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   db960:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db962:	f88d 1000 	strb.w	r1, [sp]
   db966:	f04f 0164 	mov.w	r1, #100	; 0x64
   db96a:	9103      	str	r1, [sp, #12]
   db96c:	bf18      	it	ne
   db96e:	2301      	movne	r3, #1
   db970:	4669      	mov	r1, sp
    size_ = size;
   db972:	9201      	str	r2, [sp, #4]
   db974:	f88d 3008 	strb.w	r3, [sp, #8]
   db978:	f7ff ffda 	bl	db930 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   db97c:	b005      	add	sp, #20
   db97e:	f85d fb04 	ldr.w	pc, [sp], #4

000db982 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   db982:	7c00      	ldrb	r0, [r0, #16]
   db984:	2200      	movs	r2, #0
   db986:	f7fe bec9 	b.w	da71c <hal_i2c_begin_transmission>

000db98a <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   db98a:	b2c9      	uxtb	r1, r1
   db98c:	f7ff bff9 	b.w	db982 <_ZN7TwoWire17beginTransmissionEh>

000db990 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   db990:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   db992:	2300      	movs	r3, #0
   db994:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   db998:	684a      	ldr	r2, [r1, #4]
   db99a:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   db99c:	2314      	movs	r3, #20
    };
   db99e:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   db9a0:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   db9a4:	780b      	ldrb	r3, [r1, #0]
    };
   db9a6:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   db9a8:	7a0a      	ldrb	r2, [r1, #8]
   db9aa:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   db9ac:	7c00      	ldrb	r0, [r0, #16]
    };
   db9ae:	f88d 3008 	strb.w	r3, [sp, #8]
   db9b2:	aa01      	add	r2, sp, #4
   db9b4:	4619      	mov	r1, r3
   db9b6:	f7fe feb1 	bl	da71c <hal_i2c_begin_transmission>
}
   db9ba:	b007      	add	sp, #28
   db9bc:	f85d fb04 	ldr.w	pc, [sp], #4

000db9c0 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   db9c0:	7c00      	ldrb	r0, [r0, #16]
   db9c2:	2200      	movs	r2, #0
   db9c4:	f7fe beb2 	b.w	da72c <hal_i2c_end_transmission>

000db9c8 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   db9c8:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   db9ca:	2100      	movs	r1, #0
   db9cc:	7c00      	ldrb	r0, [r0, #16]
   db9ce:	f7fe feed 	bl	da7ac <hal_i2c_lock>
}
   db9d2:	fab0 f080 	clz	r0, r0
   db9d6:	0940      	lsrs	r0, r0, #5
   db9d8:	bd08      	pop	{r3, pc}

000db9da <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   db9da:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   db9dc:	2100      	movs	r1, #0
   db9de:	7c00      	ldrb	r0, [r0, #16]
   db9e0:	f7fe feec 	bl	da7bc <hal_i2c_unlock>
}
   db9e4:	fab0 f080 	clz	r0, r0
   db9e8:	0940      	lsrs	r0, r0, #5
   db9ea:	bd08      	pop	{r3, pc}

000db9ec <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   db9ec:	4700      	bx	r0
	...

000db9f0 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   db9f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   db9f4:	2400      	movs	r4, #0
{
   db9f6:	461d      	mov	r5, r3
   db9f8:	460f      	mov	r7, r1
   db9fa:	4690      	mov	r8, r2
   db9fc:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   db9fe:	f7fe fe75 	bl	da6ec <HAL_Interrupts_Detach>
  if (priority >= 0) {
   dba02:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dba04:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   dba08:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dba0c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   dba10:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   dba14:	bfa2      	ittt	ge
   dba16:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   dba1a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   dba1e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dba20:	4907      	ldr	r1, [pc, #28]	; (dba40 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   dba22:	9400      	str	r4, [sp, #0]
   dba24:	4643      	mov	r3, r8
   dba26:	463a      	mov	r2, r7
   dba28:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   dba2a:	bfa8      	it	ge
   dba2c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dba30:	f7fe fe54 	bl	da6dc <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   dba34:	fab0 f080 	clz	r0, r0
   dba38:	0940      	lsrs	r0, r0, #5
   dba3a:	b004      	add	sp, #16
   dba3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dba40:	000db9ed 	.word	0x000db9ed

000dba44 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   dba44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dba46:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   dba48:	f7fe fe50 	bl	da6ec <HAL_Interrupts_Detach>
   dba4c:	4605      	mov	r5, r0
   dba4e:	b970      	cbnz	r0, dba6e <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   dba50:	4f08      	ldr	r7, [pc, #32]	; (dba74 <_Z15detachInterruptt+0x30>)
   dba52:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   dba56:	b146      	cbz	r6, dba6a <_Z15detachInterruptt+0x26>
   dba58:	4630      	mov	r0, r6
   dba5a:	f7fa fc8f 	bl	d637c <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   dba5e:	2110      	movs	r1, #16
   dba60:	4630      	mov	r0, r6
   dba62:	f002 fac9 	bl	ddff8 <_ZdlPvj>
        handlers[pin] = nullptr;
   dba66:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   dba6a:	2001      	movs	r0, #1
   dba6c:	e000      	b.n	dba70 <_Z15detachInterruptt+0x2c>
        return false;
   dba6e:	2000      	movs	r0, #0
    }
    return true;
}
   dba70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dba72:	bf00      	nop
   dba74:	2003e4d4 	.word	0x2003e4d4

000dba78 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   dba78:	4770      	bx	lr

000dba7a <_ZN9IPAddressD0Ev>:
   dba7a:	b510      	push	{r4, lr}
   dba7c:	2118      	movs	r1, #24
   dba7e:	4604      	mov	r4, r0
   dba80:	f002 faba 	bl	ddff8 <_ZdlPvj>
   dba84:	4620      	mov	r0, r4
   dba86:	bd10      	pop	{r4, pc}

000dba88 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dba88:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dba8a:	7d03      	ldrb	r3, [r0, #20]
   dba8c:	2b06      	cmp	r3, #6
{
   dba8e:	b08d      	sub	sp, #52	; 0x34
   dba90:	460e      	mov	r6, r1
   dba92:	f100 0704 	add.w	r7, r0, #4
   dba96:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   dba9a:	d012      	beq.n	dbac2 <_ZNK9IPAddress7printToER5Print+0x3a>
   dba9c:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   dbaa0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   dbaa4:	220a      	movs	r2, #10
   dbaa6:	4630      	mov	r0, r6
   dbaa8:	f001 fb52 	bl	dd150 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dbaac:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dbaae:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   dbab0:	d019      	beq.n	dbae6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   dbab2:	2c00      	cmp	r4, #0
   dbab4:	d0f4      	beq.n	dbaa0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   dbab6:	212e      	movs	r1, #46	; 0x2e
   dbab8:	4630      	mov	r0, r6
   dbaba:	f001 fb3a 	bl	dd132 <_ZN5Print5printEc>
   dbabe:	4404      	add	r4, r0
   dbac0:	e7ee      	b.n	dbaa0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dbac2:	232f      	movs	r3, #47	; 0x2f
   dbac4:	466a      	mov	r2, sp
   dbac6:	4639      	mov	r1, r7
   dbac8:	200a      	movs	r0, #10
		buf[0] = 0;
   dbaca:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dbace:	f7fe fe85 	bl	da7dc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   dbad2:	4668      	mov	r0, sp
   dbad4:	f002 ffeb 	bl	deaae <strlen>
   dbad8:	6833      	ldr	r3, [r6, #0]
   dbada:	4602      	mov	r2, r0
   dbadc:	68db      	ldr	r3, [r3, #12]
   dbade:	4669      	mov	r1, sp
   dbae0:	4630      	mov	r0, r6
   dbae2:	4798      	blx	r3
   dbae4:	4604      	mov	r4, r0
    }
    return n;
}
   dbae6:	4620      	mov	r0, r4
   dbae8:	b00d      	add	sp, #52	; 0x34
   dbaea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dbaec <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   dbaec:	b510      	push	{r4, lr}
   dbaee:	4b05      	ldr	r3, [pc, #20]	; (dbb04 <_ZN9IPAddressC1Ev+0x18>)
   dbaf0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dbaf2:	2211      	movs	r2, #17
   dbaf4:	f840 3b04 	str.w	r3, [r0], #4
   dbaf8:	2100      	movs	r1, #0
   dbafa:	f002 ff31 	bl	de960 <memset>
}
   dbafe:	4620      	mov	r0, r4
   dbb00:	bd10      	pop	{r4, pc}
   dbb02:	bf00      	nop
   dbb04:	000e0124 	.word	0x000e0124

000dbb08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   dbb08:	4603      	mov	r3, r0
   dbb0a:	4a07      	ldr	r2, [pc, #28]	; (dbb28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   dbb0c:	b510      	push	{r4, lr}
   dbb0e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   dbb12:	f101 0210 	add.w	r2, r1, #16
   dbb16:	f851 4b04 	ldr.w	r4, [r1], #4
   dbb1a:	f843 4b04 	str.w	r4, [r3], #4
   dbb1e:	4291      	cmp	r1, r2
   dbb20:	d1f9      	bne.n	dbb16 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dbb22:	780a      	ldrb	r2, [r1, #0]
   dbb24:	701a      	strb	r2, [r3, #0]
}
   dbb26:	bd10      	pop	{r4, pc}
   dbb28:	000e0124 	.word	0x000e0124

000dbb2c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   dbb2c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dbb2e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dbb32:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dbb36:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dbb3a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   dbb3e:	2304      	movs	r3, #4
   dbb40:	6041      	str	r1, [r0, #4]
   dbb42:	7503      	strb	r3, [r0, #20]
}
   dbb44:	bd10      	pop	{r4, pc}

000dbb46 <_ZN9IPAddressaSEPKh>:
{
   dbb46:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   dbb48:	78cb      	ldrb	r3, [r1, #3]
   dbb4a:	9300      	str	r3, [sp, #0]
   dbb4c:	788b      	ldrb	r3, [r1, #2]
   dbb4e:	784a      	ldrb	r2, [r1, #1]
   dbb50:	7809      	ldrb	r1, [r1, #0]
   dbb52:	f7ff ffeb 	bl	dbb2c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   dbb56:	b002      	add	sp, #8
   dbb58:	bd10      	pop	{r4, pc}

000dbb5a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   dbb5a:	f100 0310 	add.w	r3, r0, #16
   dbb5e:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   dbb60:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   dbb64:	2901      	cmp	r1, #1
   dbb66:	4618      	mov	r0, r3
   dbb68:	d108      	bne.n	dbb7c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   dbb6a:	f853 1c04 	ldr.w	r1, [r3, #-4]
   dbb6e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   dbb72:	3a01      	subs	r2, #1
   dbb74:	f103 0310 	add.w	r3, r3, #16
   dbb78:	d1f2      	bne.n	dbb60 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   dbb7a:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   dbb7c:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   dbb7e:	bf04      	itt	eq
   dbb80:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   dbb84:	1852      	addeq	r2, r2, r1
   dbb86:	e7f4      	b.n	dbb72 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000dbb88 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   dbb88:	b40e      	push	{r1, r2, r3}
   dbb8a:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbb8c:	b088      	sub	sp, #32
   dbb8e:	af00      	add	r7, sp, #0
   dbb90:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dbb94:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   dbb96:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dbb9a:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   dbb9c:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dbb9e:	462b      	mov	r3, r5
   dbba0:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   dbba2:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dbba4:	f7ff f8fc 	bl	dada0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   dbba8:	280f      	cmp	r0, #15
   dbbaa:	687a      	ldr	r2, [r7, #4]
   dbbac:	d91a      	bls.n	dbbe4 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   dbbae:	f100 0308 	add.w	r3, r0, #8
   dbbb2:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   dbbb6:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   dbbb8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   dbbbc:	1c41      	adds	r1, r0, #1
   dbbbe:	462b      	mov	r3, r5
   dbbc0:	4668      	mov	r0, sp
        va_start(args, fmt);
   dbbc2:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   dbbc4:	f7ff f8ec 	bl	dada0 <vsnprintf>
        if (n > 0) {
   dbbc8:	1e02      	subs	r2, r0, #0
   dbbca:	dd04      	ble.n	dbbd6 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   dbbcc:	6823      	ldr	r3, [r4, #0]
   dbbce:	4669      	mov	r1, sp
   dbbd0:	689b      	ldr	r3, [r3, #8]
   dbbd2:	4620      	mov	r0, r4
   dbbd4:	4798      	blx	r3
   dbbd6:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   dbbd8:	3720      	adds	r7, #32
   dbbda:	46bd      	mov	sp, r7
   dbbdc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   dbbe0:	b003      	add	sp, #12
   dbbe2:	4770      	bx	lr
    } else if (n > 0) {
   dbbe4:	2800      	cmp	r0, #0
   dbbe6:	d0f7      	beq.n	dbbd8 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   dbbe8:	6823      	ldr	r3, [r4, #0]
   dbbea:	4602      	mov	r2, r0
   dbbec:	689b      	ldr	r3, [r3, #8]
   dbbee:	f107 0110 	add.w	r1, r7, #16
   dbbf2:	4620      	mov	r0, r4
   dbbf4:	4798      	blx	r3
}
   dbbf6:	e7ef      	b.n	dbbd8 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000dbbf8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dbbf8:	b510      	push	{r4, lr}
          _M_dispose();
   dbbfa:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dbbfc:	4604      	mov	r4, r0
          _M_dispose();
   dbbfe:	689b      	ldr	r3, [r3, #8]
   dbc00:	4798      	blx	r3
          if (--_M_weak_count == 0)
   dbc02:	68a3      	ldr	r3, [r4, #8]
   dbc04:	3b01      	subs	r3, #1
   dbc06:	60a3      	str	r3, [r4, #8]
   dbc08:	b92b      	cbnz	r3, dbc16 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   dbc0a:	6823      	ldr	r3, [r4, #0]
   dbc0c:	4620      	mov	r0, r4
   dbc0e:	68db      	ldr	r3, [r3, #12]
    }
   dbc10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   dbc14:	4718      	bx	r3
    }
   dbc16:	bd10      	pop	{r4, pc}

000dbc18 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   dbc18:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   dbc1a:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   dbc1c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   dbc20:	689b      	ldr	r3, [r3, #8]
   dbc22:	2201      	movs	r2, #1
   dbc24:	f10d 0107 	add.w	r1, sp, #7
   dbc28:	4798      	blx	r3
}
   dbc2a:	b003      	add	sp, #12
   dbc2c:	f85d fb04 	ldr.w	pc, [sp], #4

000dbc30 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   dbc30:	b538      	push	{r3, r4, r5, lr}
   dbc32:	680b      	ldr	r3, [r1, #0]
   dbc34:	6003      	str	r3, [r0, #0]
   dbc36:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   dbc38:	6843      	ldr	r3, [r0, #4]
   dbc3a:	429d      	cmp	r5, r3
    class __shared_ptr
   dbc3c:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   dbc3e:	d00c      	beq.n	dbc5a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   dbc40:	b115      	cbz	r5, dbc48 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   dbc42:	686b      	ldr	r3, [r5, #4]
   dbc44:	3301      	adds	r3, #1
   dbc46:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   dbc48:	6860      	ldr	r0, [r4, #4]
   dbc4a:	b128      	cbz	r0, dbc58 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   dbc4c:	6843      	ldr	r3, [r0, #4]
   dbc4e:	3b01      	subs	r3, #1
   dbc50:	6043      	str	r3, [r0, #4]
   dbc52:	b90b      	cbnz	r3, dbc58 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   dbc54:	f7ff ffd0 	bl	dbbf8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   dbc58:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   dbc5a:	4620      	mov	r0, r4
   dbc5c:	bd38      	pop	{r3, r4, r5, pc}

000dbc5e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   dbc5e:	460b      	mov	r3, r1
   dbc60:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   dbc62:	2200      	movs	r2, #0
   dbc64:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   dbc66:	e9c0 2200 	strd	r2, r2, [r0]
   dbc6a:	4604      	mov	r4, r0
        t_ = t;
   dbc6c:	6083      	str	r3, [r0, #8]
    if (t) {
   dbc6e:	b90b      	cbnz	r3, dbc74 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   dbc70:	4620      	mov	r0, r4
   dbc72:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   dbc74:	f7ff ffdc 	bl	dbc30 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   dbc78:	e7fa      	b.n	dbc70 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000dbc7a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   dbc7a:	6883      	ldr	r3, [r0, #8]
   dbc7c:	b1eb      	cbz	r3, dbcba <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   dbc7e:	781a      	ldrb	r2, [r3, #0]
   dbc80:	2a03      	cmp	r2, #3
   dbc82:	d81a      	bhi.n	dbcba <_ZNK5spark9JSONValue4typeEv+0x40>
   dbc84:	e8df f002 	tbb	[pc, r2]
   dbc88:	1b021704 	.word	0x1b021704
   dbc8c:	2005      	movs	r0, #5
   dbc8e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   dbc90:	6802      	ldr	r2, [r0, #0]
   dbc92:	685b      	ldr	r3, [r3, #4]
   dbc94:	6852      	ldr	r2, [r2, #4]
   dbc96:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   dbc98:	282d      	cmp	r0, #45	; 0x2d
   dbc9a:	d012      	beq.n	dbcc2 <_ZNK5spark9JSONValue4typeEv+0x48>
   dbc9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dbca0:	2b09      	cmp	r3, #9
   dbca2:	d90e      	bls.n	dbcc2 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   dbca4:	2874      	cmp	r0, #116	; 0x74
   dbca6:	d00e      	beq.n	dbcc6 <_ZNK5spark9JSONValue4typeEv+0x4c>
   dbca8:	2866      	cmp	r0, #102	; 0x66
   dbcaa:	d00c      	beq.n	dbcc6 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   dbcac:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   dbcb0:	4258      	negs	r0, r3
   dbcb2:	4158      	adcs	r0, r3
   dbcb4:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   dbcb6:	2006      	movs	r0, #6
   dbcb8:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   dbcba:	2000      	movs	r0, #0
   dbcbc:	4770      	bx	lr
        return JSON_TYPE_STRING;
   dbcbe:	2004      	movs	r0, #4
   dbcc0:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   dbcc2:	2003      	movs	r0, #3
   dbcc4:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   dbcc6:	2002      	movs	r0, #2
}
   dbcc8:	4770      	bx	lr

000dbcca <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   dbcca:	b510      	push	{r4, lr}
   dbccc:	4604      	mov	r4, r0
    switch (type()) {
   dbcce:	f7ff ffd4 	bl	dbc7a <_ZNK5spark9JSONValue4typeEv>
   dbcd2:	2802      	cmp	r0, #2
   dbcd4:	d00e      	beq.n	dbcf4 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   dbcd6:	1ec3      	subs	r3, r0, #3
   dbcd8:	b2db      	uxtb	r3, r3
   dbcda:	2b01      	cmp	r3, #1
   dbcdc:	d814      	bhi.n	dbd08 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   dbcde:	6822      	ldr	r2, [r4, #0]
   dbce0:	68a3      	ldr	r3, [r4, #8]
   dbce2:	6850      	ldr	r0, [r2, #4]
   dbce4:	685b      	ldr	r3, [r3, #4]
}
   dbce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   dbcea:	220a      	movs	r2, #10
   dbcec:	2100      	movs	r1, #0
   dbcee:	4418      	add	r0, r3
   dbcf0:	f002 bfc4 	b.w	dec7c <strtol>
        const char* const s = d_->json + t_->start;
   dbcf4:	6822      	ldr	r2, [r4, #0]
   dbcf6:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   dbcf8:	6852      	ldr	r2, [r2, #4]
   dbcfa:	685b      	ldr	r3, [r3, #4]
   dbcfc:	5cd0      	ldrb	r0, [r2, r3]
   dbcfe:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   dbd02:	4258      	negs	r0, r3
   dbd04:	4158      	adcs	r0, r3
}
   dbd06:	bd10      	pop	{r4, pc}
    switch (type()) {
   dbd08:	2000      	movs	r0, #0
   dbd0a:	e7fc      	b.n	dbd06 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000dbd0c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   dbd0c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   dbd0e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   dbd10:	e9c0 3300 	strd	r3, r3, [r0]
   dbd14:	4604      	mov	r4, r0
        n_(0) {
   dbd16:	480e      	ldr	r0, [pc, #56]	; (dbd50 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   dbd18:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   dbd1c:	b1a9      	cbz	r1, dbd4a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   dbd1e:	780b      	ldrb	r3, [r1, #0]
   dbd20:	2b03      	cmp	r3, #3
   dbd22:	d006      	beq.n	dbd32 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   dbd24:	b98b      	cbnz	r3, dbd4a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   dbd26:	6813      	ldr	r3, [r2, #0]
   dbd28:	6858      	ldr	r0, [r3, #4]
   dbd2a:	684b      	ldr	r3, [r1, #4]
   dbd2c:	5cc3      	ldrb	r3, [r0, r3]
   dbd2e:	2b6e      	cmp	r3, #110	; 0x6e
   dbd30:	d007      	beq.n	dbd42 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   dbd32:	6813      	ldr	r3, [r2, #0]
   dbd34:	684d      	ldr	r5, [r1, #4]
   dbd36:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   dbd38:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   dbd3a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   dbd3c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   dbd3e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   dbd40:	60e3      	str	r3, [r4, #12]
   dbd42:	4611      	mov	r1, r2
   dbd44:	4620      	mov	r0, r4
   dbd46:	f7ff ff73 	bl	dbc30 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   dbd4a:	4620      	mov	r0, r4
   dbd4c:	bd38      	pop	{r3, r4, r5, pc}
   dbd4e:	bf00      	nop
   dbd50:	000e0190 	.word	0x000e0190

000dbd54 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   dbd54:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   dbd56:	2500      	movs	r5, #0
   dbd58:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   dbd5a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   dbd5e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   dbd62:	e9c0 5504 	strd	r5, r5, [r0, #16]
   dbd66:	4604      	mov	r4, r0
   dbd68:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   dbd6a:	b14b      	cbz	r3, dbd80 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   dbd6c:	781a      	ldrb	r2, [r3, #0]
   dbd6e:	2a01      	cmp	r2, #1
   dbd70:	d106      	bne.n	dbd80 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   dbd72:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   dbd76:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   dbd78:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   dbd7a:	6143      	str	r3, [r0, #20]
   dbd7c:	f7ff ff58 	bl	dbc30 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   dbd80:	4620      	mov	r0, r4
   dbd82:	bd38      	pop	{r3, r4, r5, pc}

000dbd84 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   dbd84:	b510      	push	{r4, lr}
    if (!n_) {
   dbd86:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   dbd88:	4604      	mov	r4, r0
    if (!n_) {
   dbd8a:	b163      	cbz	r3, dbda6 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   dbd8c:	6880      	ldr	r0, [r0, #8]
   dbd8e:	60e0      	str	r0, [r4, #12]
    --n_;
   dbd90:	3b01      	subs	r3, #1
    ++t_;
   dbd92:	3010      	adds	r0, #16
   dbd94:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   dbd96:	6120      	str	r0, [r4, #16]
    --n_;
   dbd98:	6163      	str	r3, [r4, #20]
    if (n_) {
   dbd9a:	b113      	cbz	r3, dbda2 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   dbd9c:	f7ff fedd 	bl	dbb5a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   dbda0:	60a0      	str	r0, [r4, #8]
    return true;
   dbda2:	2001      	movs	r0, #1
   dbda4:	e000      	b.n	dbda8 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   dbda6:	4618      	mov	r0, r3
}
   dbda8:	bd10      	pop	{r4, pc}

000dbdaa <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   dbdaa:	b510      	push	{r4, lr}
    write('}');
   dbdac:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   dbdae:	4604      	mov	r4, r0
    write('}');
   dbdb0:	f7ff ff32 	bl	dbc18 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   dbdb4:	2301      	movs	r3, #1
   dbdb6:	7123      	strb	r3, [r4, #4]
}
   dbdb8:	4620      	mov	r0, r4
   dbdba:	bd10      	pop	{r4, pc}

000dbdbc <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   dbdbc:	b508      	push	{r3, lr}
    switch (state_) {
   dbdbe:	7903      	ldrb	r3, [r0, #4]
   dbdc0:	2b01      	cmp	r3, #1
   dbdc2:	d002      	beq.n	dbdca <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   dbdc4:	2b02      	cmp	r3, #2
   dbdc6:	d004      	beq.n	dbdd2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   dbdc8:	bd08      	pop	{r3, pc}
        write(',');
   dbdca:	212c      	movs	r1, #44	; 0x2c
        write(':');
   dbdcc:	f7ff ff24 	bl	dbc18 <_ZN5spark10JSONWriter5writeEc>
}
   dbdd0:	e7fa      	b.n	dbdc8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   dbdd2:	213a      	movs	r1, #58	; 0x3a
   dbdd4:	e7fa      	b.n	dbdcc <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000dbdd6 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   dbdd6:	b510      	push	{r4, lr}
   dbdd8:	4604      	mov	r4, r0
    writeSeparator();
   dbdda:	f7ff ffef 	bl	dbdbc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   dbdde:	4620      	mov	r0, r4
   dbde0:	217b      	movs	r1, #123	; 0x7b
   dbde2:	f7ff ff19 	bl	dbc18 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   dbde6:	2300      	movs	r3, #0
   dbde8:	7123      	strb	r3, [r4, #4]
}
   dbdea:	4620      	mov	r0, r4
   dbdec:	bd10      	pop	{r4, pc}
	...

000dbdf0 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   dbdf0:	b513      	push	{r0, r1, r4, lr}
   dbdf2:	4604      	mov	r4, r0
   dbdf4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   dbdf6:	f7ff ffe1 	bl	dbdbc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   dbdfa:	6823      	ldr	r3, [r4, #0]
   dbdfc:	9a01      	ldr	r2, [sp, #4]
   dbdfe:	68db      	ldr	r3, [r3, #12]
   dbe00:	4903      	ldr	r1, [pc, #12]	; (dbe10 <_ZN5spark10JSONWriter5valueEi+0x20>)
   dbe02:	4620      	mov	r0, r4
   dbe04:	4798      	blx	r3
    state_ = NEXT;
   dbe06:	2301      	movs	r3, #1
}
   dbe08:	4620      	mov	r0, r4
    state_ = NEXT;
   dbe0a:	7123      	strb	r3, [r4, #4]
}
   dbe0c:	b002      	add	sp, #8
   dbe0e:	bd10      	pop	{r4, pc}
   dbe10:	000df787 	.word	0x000df787

000dbe14 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   dbe14:	b513      	push	{r0, r1, r4, lr}
   dbe16:	4604      	mov	r4, r0
   dbe18:	9101      	str	r1, [sp, #4]
    writeSeparator();
   dbe1a:	f7ff ffcf 	bl	dbdbc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   dbe1e:	6823      	ldr	r3, [r4, #0]
   dbe20:	9a01      	ldr	r2, [sp, #4]
   dbe22:	68db      	ldr	r3, [r3, #12]
   dbe24:	4903      	ldr	r1, [pc, #12]	; (dbe34 <_ZN5spark10JSONWriter5valueEj+0x20>)
   dbe26:	4620      	mov	r0, r4
   dbe28:	4798      	blx	r3
    state_ = NEXT;
   dbe2a:	2301      	movs	r3, #1
}
   dbe2c:	4620      	mov	r0, r4
    state_ = NEXT;
   dbe2e:	7123      	strb	r3, [r4, #4]
}
   dbe30:	b002      	add	sp, #8
   dbe32:	bd10      	pop	{r4, pc}
   dbe34:	000dfaa6 	.word	0x000dfaa6

000dbe38 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   dbe38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dbe3c:	460d      	mov	r5, r1
   dbe3e:	4617      	mov	r7, r2
    write('"');
   dbe40:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   dbe42:	f8df 80a0 	ldr.w	r8, [pc, #160]	; dbee4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   dbe46:	4604      	mov	r4, r0
    const char* const end = str + size;
   dbe48:	442f      	add	r7, r5
    write('"');
   dbe4a:	f7ff fee5 	bl	dbc18 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   dbe4e:	4629      	mov	r1, r5
    while (s != end) {
   dbe50:	42bd      	cmp	r5, r7
   dbe52:	462a      	mov	r2, r5
   dbe54:	d038      	beq.n	dbec8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   dbe56:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   dbe5a:	2e22      	cmp	r6, #34	; 0x22
   dbe5c:	d003      	beq.n	dbe66 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   dbe5e:	2e5c      	cmp	r6, #92	; 0x5c
   dbe60:	d001      	beq.n	dbe66 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   dbe62:	2e1f      	cmp	r6, #31
   dbe64:	d8f4      	bhi.n	dbe50 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   dbe66:	6823      	ldr	r3, [r4, #0]
   dbe68:	1a52      	subs	r2, r2, r1
   dbe6a:	689b      	ldr	r3, [r3, #8]
   dbe6c:	4620      	mov	r0, r4
   dbe6e:	4798      	blx	r3
            write('\\');
   dbe70:	215c      	movs	r1, #92	; 0x5c
   dbe72:	4620      	mov	r0, r4
   dbe74:	f7ff fed0 	bl	dbc18 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   dbe78:	2e0d      	cmp	r6, #13
   dbe7a:	d80a      	bhi.n	dbe92 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   dbe7c:	2e07      	cmp	r6, #7
   dbe7e:	d91c      	bls.n	dbeba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   dbe80:	f1a6 0308 	sub.w	r3, r6, #8
   dbe84:	2b05      	cmp	r3, #5
   dbe86:	d818      	bhi.n	dbeba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   dbe88:	e8df f003 	tbb	[pc, r3]
   dbe8c:	17110f0d 	.word	0x17110f0d
   dbe90:	1513      	.short	0x1513
   dbe92:	2e22      	cmp	r6, #34	; 0x22
   dbe94:	d001      	beq.n	dbe9a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   dbe96:	2e5c      	cmp	r6, #92	; 0x5c
   dbe98:	d10f      	bne.n	dbeba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   dbe9a:	4631      	mov	r1, r6
                write('b');
   dbe9c:	4620      	mov	r0, r4
   dbe9e:	f7ff febb 	bl	dbc18 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   dbea2:	4629      	mov	r1, r5
    while (s != end) {
   dbea4:	e7d4      	b.n	dbe50 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   dbea6:	2162      	movs	r1, #98	; 0x62
   dbea8:	e7f8      	b.n	dbe9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   dbeaa:	2174      	movs	r1, #116	; 0x74
   dbeac:	e7f6      	b.n	dbe9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   dbeae:	216e      	movs	r1, #110	; 0x6e
   dbeb0:	e7f4      	b.n	dbe9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   dbeb2:	2166      	movs	r1, #102	; 0x66
   dbeb4:	e7f2      	b.n	dbe9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   dbeb6:	2172      	movs	r1, #114	; 0x72
   dbeb8:	e7f0      	b.n	dbe9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   dbeba:	6823      	ldr	r3, [r4, #0]
   dbebc:	4632      	mov	r2, r6
   dbebe:	68db      	ldr	r3, [r3, #12]
   dbec0:	4641      	mov	r1, r8
   dbec2:	4620      	mov	r0, r4
   dbec4:	4798      	blx	r3
                break;
   dbec6:	e7ec      	b.n	dbea2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   dbec8:	428d      	cmp	r5, r1
   dbeca:	d004      	beq.n	dbed6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   dbecc:	6823      	ldr	r3, [r4, #0]
   dbece:	1a6a      	subs	r2, r5, r1
   dbed0:	689b      	ldr	r3, [r3, #8]
   dbed2:	4620      	mov	r0, r4
   dbed4:	4798      	blx	r3
    }
    write('"');
   dbed6:	2122      	movs	r1, #34	; 0x22
   dbed8:	4620      	mov	r0, r4
   dbeda:	f7ff fe9d 	bl	dbc18 <_ZN5spark10JSONWriter5writeEc>
}
   dbede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dbee2:	bf00      	nop
   dbee4:	000e0130 	.word	0x000e0130

000dbee8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   dbee8:	b513      	push	{r0, r1, r4, lr}
   dbeea:	4604      	mov	r4, r0
   dbeec:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   dbef0:	f7ff ff64 	bl	dbdbc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   dbef4:	4620      	mov	r0, r4
   dbef6:	e9dd 2100 	ldrd	r2, r1, [sp]
   dbefa:	f7ff ff9d 	bl	dbe38 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   dbefe:	2302      	movs	r3, #2
}
   dbf00:	4620      	mov	r0, r4
    state_ = VALUE;
   dbf02:	7123      	strb	r3, [r4, #4]
}
   dbf04:	b002      	add	sp, #8
   dbf06:	bd10      	pop	{r4, pc}

000dbf08 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   dbf08:	b513      	push	{r0, r1, r4, lr}
   dbf0a:	4604      	mov	r4, r0
   dbf0c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   dbf10:	f7ff ff54 	bl	dbdbc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   dbf14:	4620      	mov	r0, r4
   dbf16:	e9dd 2100 	ldrd	r2, r1, [sp]
   dbf1a:	f7ff ff8d 	bl	dbe38 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   dbf1e:	2301      	movs	r3, #1
}
   dbf20:	4620      	mov	r0, r4
    state_ = NEXT;
   dbf22:	7123      	strb	r3, [r4, #4]
}
   dbf24:	b002      	add	sp, #8
   dbf26:	bd10      	pop	{r4, pc}

000dbf28 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   dbf28:	6880      	ldr	r0, [r0, #8]
   dbf2a:	6803      	ldr	r3, [r0, #0]
   dbf2c:	68db      	ldr	r3, [r3, #12]
   dbf2e:	4718      	bx	r3

000dbf30 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   dbf30:	4770      	bx	lr

000dbf32 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   dbf32:	4608      	mov	r0, r1
   dbf34:	b111      	cbz	r1, dbf3c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   dbf36:	680b      	ldr	r3, [r1, #0]
   dbf38:	685b      	ldr	r3, [r3, #4]
   dbf3a:	4718      	bx	r3
}
   dbf3c:	4770      	bx	lr

000dbf3e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   dbf3e:	4770      	bx	lr

000dbf40 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   dbf40:	4770      	bx	lr

000dbf42 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   dbf42:	4770      	bx	lr

000dbf44 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   dbf44:	4770      	bx	lr

000dbf46 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   dbf46:	b538      	push	{r3, r4, r5, lr}
   dbf48:	4604      	mov	r4, r0
   dbf4a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   dbf4c:	6800      	ldr	r0, [r0, #0]
   dbf4e:	212e      	movs	r1, #46	; 0x2e
   dbf50:	f002 fd73 	bl	dea3a <strchrnul>
    size = s - category;
   dbf54:	6823      	ldr	r3, [r4, #0]
   dbf56:	1ac3      	subs	r3, r0, r3
   dbf58:	602b      	str	r3, [r5, #0]
    if (size) {
   dbf5a:	b123      	cbz	r3, dbf66 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   dbf5c:	7803      	ldrb	r3, [r0, #0]
   dbf5e:	b103      	cbz	r3, dbf62 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   dbf60:	3001      	adds	r0, #1
   dbf62:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dbf64:	6020      	str	r0, [r4, #0]
}
   dbf66:	4618      	mov	r0, r3
   dbf68:	bd38      	pop	{r3, r4, r5, pc}

000dbf6a <_ZN5spark16JSONStreamWriterD0Ev>:
   dbf6a:	b510      	push	{r4, lr}
   dbf6c:	210c      	movs	r1, #12
   dbf6e:	4604      	mov	r4, r0
   dbf70:	f002 f842 	bl	ddff8 <_ZdlPvj>
   dbf74:	4620      	mov	r0, r4
   dbf76:	bd10      	pop	{r4, pc}

000dbf78 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   dbf78:	b510      	push	{r4, lr}
   dbf7a:	2104      	movs	r1, #4
   dbf7c:	4604      	mov	r4, r0
   dbf7e:	f002 f83b 	bl	ddff8 <_ZdlPvj>
   dbf82:	4620      	mov	r0, r4
   dbf84:	bd10      	pop	{r4, pc}

000dbf86 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   dbf86:	b510      	push	{r4, lr}
   dbf88:	2104      	movs	r1, #4
   dbf8a:	4604      	mov	r4, r0
   dbf8c:	f002 f834 	bl	ddff8 <_ZdlPvj>
   dbf90:	4620      	mov	r0, r4
   dbf92:	bd10      	pop	{r4, pc}

000dbf94 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   dbf94:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   dbf96:	f002 fd5a 	bl	dea4e <strcmp>
}
   dbf9a:	fab0 f080 	clz	r0, r0
   dbf9e:	0940      	lsrs	r0, r0, #5
   dbfa0:	bd08      	pop	{r3, pc}

000dbfa2 <__tcf_1>:
   dbfa2:	4770      	bx	lr

000dbfa4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   dbfa4:	b510      	push	{r4, lr}
   dbfa6:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   dbfa8:	f001 fe40 	bl	ddc2c <_Z16_fetch_usbserialv>
   dbfac:	4284      	cmp	r4, r0
   dbfae:	d010      	beq.n	dbfd2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   dbfb0:	f001 fdb4 	bl	ddb1c <_Z22__fetch_global_Serial1v>
   dbfb4:	4284      	cmp	r4, r0
   dbfb6:	d105      	bne.n	dbfc4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   dbfb8:	f001 fdb0 	bl	ddb1c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   dbfbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   dbfc0:	f001 bda9 	b.w	ddb16 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   dbfc4:	b12c      	cbz	r4, dbfd2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   dbfc6:	6823      	ldr	r3, [r4, #0]
   dbfc8:	4620      	mov	r0, r4
   dbfca:	685b      	ldr	r3, [r3, #4]
}
   dbfcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dbfd0:	4718      	bx	r3
   dbfd2:	bd10      	pop	{r4, pc}

000dbfd4 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   dbfd4:	b513      	push	{r0, r1, r4, lr}
   dbfd6:	4604      	mov	r4, r0
    return value(val, strlen(val));
   dbfd8:	4608      	mov	r0, r1
   dbfda:	9101      	str	r1, [sp, #4]
   dbfdc:	f002 fd67 	bl	deaae <strlen>
   dbfe0:	9901      	ldr	r1, [sp, #4]
   dbfe2:	4602      	mov	r2, r0
   dbfe4:	4620      	mov	r0, r4
}
   dbfe6:	b002      	add	sp, #8
   dbfe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   dbfec:	f7ff bf8c 	b.w	dbf08 <_ZN5spark10JSONWriter5valueEPKcj>

000dbff0 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   dbff0:	b513      	push	{r0, r1, r4, lr}
   dbff2:	4604      	mov	r4, r0
    write(str, strlen(str));
   dbff4:	4608      	mov	r0, r1
   dbff6:	9101      	str	r1, [sp, #4]
   dbff8:	f002 fd59 	bl	deaae <strlen>
   dbffc:	6823      	ldr	r3, [r4, #0]
   dbffe:	9901      	ldr	r1, [sp, #4]
   dc000:	68db      	ldr	r3, [r3, #12]
   dc002:	4602      	mov	r2, r0
   dc004:	4620      	mov	r0, r4
}
   dc006:	b002      	add	sp, #8
   dc008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   dc00c:	4718      	bx	r3

000dc00e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   dc00e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   dc010:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   dc012:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   dc016:	68db      	ldr	r3, [r3, #12]
   dc018:	2201      	movs	r2, #1
   dc01a:	f10d 0107 	add.w	r1, sp, #7
   dc01e:	4798      	blx	r3
}
   dc020:	b003      	add	sp, #12
   dc022:	f85d fb04 	ldr.w	pc, [sp], #4

000dc026 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   dc026:	b40e      	push	{r1, r2, r3}
   dc028:	b503      	push	{r0, r1, lr}
   dc02a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   dc02c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   dc02e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   dc032:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   dc034:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   dc036:	f001 f8a9 	bl	dd18c <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   dc03a:	b002      	add	sp, #8
   dc03c:	f85d eb04 	ldr.w	lr, [sp], #4
   dc040:	b003      	add	sp, #12
   dc042:	4770      	bx	lr

000dc044 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   dc044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   dc048:	e9d0 9500 	ldrd	r9, r5, [r0]
   dc04c:	f04f 0814 	mov.w	r8, #20
   dc050:	fb08 f505 	mul.w	r5, r8, r5
   dc054:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   dc056:	10ab      	asrs	r3, r5, #2
   dc058:	4d18      	ldr	r5, [pc, #96]	; (dc0bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   dc05a:	4617      	mov	r7, r2
   dc05c:	435d      	muls	r5, r3
   dc05e:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   dc060:	2d00      	cmp	r5, #0
   dc062:	dd23      	ble.n	dc0ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   dc064:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   dc066:	fb08 f006 	mul.w	r0, r8, r6
   dc06a:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   dc06e:	463a      	mov	r2, r7
   dc070:	f8ba b004 	ldrh.w	fp, [sl, #4]
   dc074:	5820      	ldr	r0, [r4, r0]
   dc076:	9101      	str	r1, [sp, #4]
   dc078:	455f      	cmp	r7, fp
   dc07a:	bf28      	it	cs
   dc07c:	465a      	movcs	r2, fp
   dc07e:	f002 fd1e 	bl	deabe <strncmp>
                if (cmp == 0) {
   dc082:	9901      	ldr	r1, [sp, #4]
   dc084:	2301      	movs	r3, #1
   dc086:	b978      	cbnz	r0, dc0a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   dc088:	455f      	cmp	r7, fp
   dc08a:	d103      	bne.n	dc094 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   dc08c:	9a00      	ldr	r2, [sp, #0]
   dc08e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   dc090:	4635      	mov	r5, r6
   dc092:	e7e5      	b.n	dc060 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   dc094:	bf8c      	ite	hi
   dc096:	2001      	movhi	r0, #1
   dc098:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   dc09a:	2800      	cmp	r0, #0
   dc09c:	d0f8      	beq.n	dc090 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   dc09e:	1bae      	subs	r6, r5, r6
	      ++__first;
   dc0a0:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   dc0a4:	3e01      	subs	r6, #1
   dc0a6:	e7f3      	b.n	dc090 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   dc0a8:	0fc0      	lsrs	r0, r0, #31
   dc0aa:	e7f6      	b.n	dc09a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   dc0ac:	eba4 0409 	sub.w	r4, r4, r9
}
   dc0b0:	4802      	ldr	r0, [pc, #8]	; (dc0bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   dc0b2:	10a4      	asrs	r4, r4, #2
   dc0b4:	4360      	muls	r0, r4
   dc0b6:	b003      	add	sp, #12
   dc0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc0bc:	cccccccd 	.word	0xcccccccd

000dc0c0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   dc0c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   dc0c2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   dc0c4:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   dc0c6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   dc0c8:	b30b      	cbz	r3, dc10e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   dc0ca:	b301      	cbz	r1, dc10e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   dc0cc:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   dc0ce:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   dc0d2:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   dc0d4:	a903      	add	r1, sp, #12
   dc0d6:	a801      	add	r0, sp, #4
   dc0d8:	f7ff ff35 	bl	dbf46 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   dc0dc:	4601      	mov	r1, r0
   dc0de:	b1b0      	cbz	r0, dc10e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   dc0e0:	f10d 030b 	add.w	r3, sp, #11
   dc0e4:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   dc0e6:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   dc0ea:	4620      	mov	r0, r4
   dc0ec:	f7ff ffaa 	bl	dc044 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   dc0f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   dc0f4:	b15b      	cbz	r3, dc10e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   dc0f6:	6824      	ldr	r4, [r4, #0]
   dc0f8:	2314      	movs	r3, #20
   dc0fa:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   dc0fe:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   dc102:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   dc106:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   dc108:	bfa8      	it	ge
   dc10a:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   dc10c:	e7e2      	b.n	dc0d4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   dc10e:	4630      	mov	r0, r6
   dc110:	b004      	add	sp, #16
   dc112:	bd70      	pop	{r4, r5, r6, pc}

000dc114 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   dc114:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   dc116:	4c09      	ldr	r4, [pc, #36]	; (dc13c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   dc118:	7823      	ldrb	r3, [r4, #0]
   dc11a:	f3bf 8f5b 	dmb	ish
   dc11e:	07db      	lsls	r3, r3, #31
   dc120:	d409      	bmi.n	dc136 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   dc122:	4620      	mov	r0, r4
   dc124:	f7f7 ffc8 	bl	d40b8 <__cxa_guard_acquire>
   dc128:	b128      	cbz	r0, dc136 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   dc12a:	4620      	mov	r0, r4
   dc12c:	f7f7 ffc9 	bl	d40c2 <__cxa_guard_release>
   dc130:	4803      	ldr	r0, [pc, #12]	; (dc140 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   dc132:	f002 fbd5 	bl	de8e0 <atexit>
}
   dc136:	4803      	ldr	r0, [pc, #12]	; (dc144 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   dc138:	bd10      	pop	{r4, pc}
   dc13a:	bf00      	nop
   dc13c:	2003e568 	.word	0x2003e568
   dc140:	000dbf3f 	.word	0x000dbf3f
   dc144:	2003dc3c 	.word	0x2003dc3c

000dc148 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   dc148:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   dc14a:	4c09      	ldr	r4, [pc, #36]	; (dc170 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   dc14c:	7823      	ldrb	r3, [r4, #0]
   dc14e:	f3bf 8f5b 	dmb	ish
   dc152:	07db      	lsls	r3, r3, #31
   dc154:	d409      	bmi.n	dc16a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   dc156:	4620      	mov	r0, r4
   dc158:	f7f7 ffae 	bl	d40b8 <__cxa_guard_acquire>
   dc15c:	b128      	cbz	r0, dc16a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   dc15e:	4620      	mov	r0, r4
   dc160:	f7f7 ffaf 	bl	d40c2 <__cxa_guard_release>
   dc164:	4803      	ldr	r0, [pc, #12]	; (dc174 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   dc166:	f002 fbbb 	bl	de8e0 <atexit>
    return &factory;
}
   dc16a:	4803      	ldr	r0, [pc, #12]	; (dc178 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   dc16c:	bd10      	pop	{r4, pc}
   dc16e:	bf00      	nop
   dc170:	2003e56c 	.word	0x2003e56c
   dc174:	000dbfa3 	.word	0x000dbfa3
   dc178:	2003dc40 	.word	0x2003dc40

000dc17c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   dc17c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   dc17e:	2500      	movs	r5, #0
   dc180:	4604      	mov	r4, r0
   dc182:	e9c0 5500 	strd	r5, r5, [r0]
   dc186:	e9c0 5504 	strd	r5, r5, [r0, #16]
   dc18a:	6085      	str	r5, [r0, #8]
   dc18c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   dc18e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   dc192:	f7fe fa0b 	bl	da5ac <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   dc196:	f7ff ffbd 	bl	dc114 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   dc19a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   dc19c:	f7ff ffd4 	bl	dc148 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   dc1a0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   dc1a2:	6220      	str	r0, [r4, #32]
}
   dc1a4:	4620      	mov	r0, r4
   dc1a6:	bd38      	pop	{r3, r4, r5, pc}

000dc1a8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   dc1a8:	b510      	push	{r4, lr}
    static LogManager mgr;
   dc1aa:	4c0a      	ldr	r4, [pc, #40]	; (dc1d4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   dc1ac:	7823      	ldrb	r3, [r4, #0]
   dc1ae:	f3bf 8f5b 	dmb	ish
   dc1b2:	07db      	lsls	r3, r3, #31
   dc1b4:	d40c      	bmi.n	dc1d0 <_ZN5spark10LogManager8instanceEv+0x28>
   dc1b6:	4620      	mov	r0, r4
   dc1b8:	f7f7 ff7e 	bl	d40b8 <__cxa_guard_acquire>
   dc1bc:	b140      	cbz	r0, dc1d0 <_ZN5spark10LogManager8instanceEv+0x28>
   dc1be:	4806      	ldr	r0, [pc, #24]	; (dc1d8 <_ZN5spark10LogManager8instanceEv+0x30>)
   dc1c0:	f7ff ffdc 	bl	dc17c <_ZN5spark10LogManagerC1Ev>
   dc1c4:	4620      	mov	r0, r4
   dc1c6:	f7f7 ff7c 	bl	d40c2 <__cxa_guard_release>
   dc1ca:	4804      	ldr	r0, [pc, #16]	; (dc1dc <_ZN5spark10LogManager8instanceEv+0x34>)
   dc1cc:	f002 fb88 	bl	de8e0 <atexit>
    return &mgr;
}
   dc1d0:	4801      	ldr	r0, [pc, #4]	; (dc1d8 <_ZN5spark10LogManager8instanceEv+0x30>)
   dc1d2:	bd10      	pop	{r4, pc}
   dc1d4:	2003e564 	.word	0x2003e564
   dc1d8:	2003e574 	.word	0x2003e574
   dc1dc:	000dc611 	.word	0x000dc611

000dc1e0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   dc1e0:	4a02      	ldr	r2, [pc, #8]	; (dc1ec <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   dc1e2:	4903      	ldr	r1, [pc, #12]	; (dc1f0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   dc1e4:	4803      	ldr	r0, [pc, #12]	; (dc1f4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   dc1e6:	2300      	movs	r3, #0
   dc1e8:	f7fe bc68 	b.w	daabc <log_set_callbacks>
   dc1ec:	000dc499 	.word	0x000dc499
   dc1f0:	000dc425 	.word	0x000dc425
   dc1f4:	000dc3a5 	.word	0x000dc3a5

000dc1f8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   dc1f8:	2300      	movs	r3, #0
   dc1fa:	461a      	mov	r2, r3
   dc1fc:	4619      	mov	r1, r3
   dc1fe:	4618      	mov	r0, r3
   dc200:	f7fe bc5c 	b.w	daabc <log_set_callbacks>

000dc204 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   dc204:	b570      	push	{r4, r5, r6, lr}
   dc206:	b08a      	sub	sp, #40	; 0x28
   dc208:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   dc20a:	4601      	mov	r1, r0
   dc20c:	a804      	add	r0, sp, #16
   dc20e:	f7fb fae3 	bl	d77d8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   dc212:	4e14      	ldr	r6, [pc, #80]	; (dc264 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   dc214:	a804      	add	r0, sp, #16
   dc216:	f7ff fdb5 	bl	dbd84 <_ZN5spark18JSONObjectIterator4nextEv>
   dc21a:	b1e8      	cbz	r0, dc258 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   dc21c:	a904      	add	r1, sp, #16
   dc21e:	4668      	mov	r0, sp
   dc220:	f7fb faeb 	bl	d77fa <_ZNK5spark18JSONObjectIterator4nameEv>
   dc224:	9802      	ldr	r0, [sp, #8]
   dc226:	4631      	mov	r1, r6
   dc228:	f7ff feb4 	bl	dbf94 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   dc22c:	4604      	mov	r4, r0
   dc22e:	b110      	cbz	r0, dc236 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   dc230:	1e2c      	subs	r4, r5, #0
   dc232:	bf18      	it	ne
   dc234:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   dc236:	a801      	add	r0, sp, #4
   dc238:	f7f8 fdfd 	bl	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc23c:	2c00      	cmp	r4, #0
   dc23e:	d0e9      	beq.n	dc214 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   dc240:	a904      	add	r1, sp, #16
   dc242:	4668      	mov	r0, sp
   dc244:	f7fb faea 	bl	d781c <_ZNK5spark18JSONObjectIterator5valueEv>
   dc248:	4668      	mov	r0, sp
   dc24a:	f7ff fd3e 	bl	dbcca <_ZNK5spark9JSONValue5toIntEv>
   dc24e:	6028      	str	r0, [r5, #0]
   dc250:	a801      	add	r0, sp, #4
   dc252:	f7f8 fdf0 	bl	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc256:	e7dd      	b.n	dc214 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   dc258:	a805      	add	r0, sp, #20
   dc25a:	f7f8 fdec 	bl	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   dc25e:	b00a      	add	sp, #40	; 0x28
   dc260:	bd70      	pop	{r4, r5, r6, pc}
   dc262:	bf00      	nop
   dc264:	000e0136 	.word	0x000e0136

000dc268 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   dc268:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dc26a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   dc26c:	4620      	mov	r0, r4
   dc26e:	4912      	ldr	r1, [pc, #72]	; (dc2b8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   dc270:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   dc272:	f002 fbec 	bl	dea4e <strcmp>
   dc276:	b948      	cbnz	r0, dc28c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   dc278:	f001 fcd8 	bl	ddc2c <_Z16_fetch_usbserialv>
   dc27c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   dc280:	f001 fcc4 	bl	ddc0c <_ZN9USBSerial5beginEl>
        return &Serial;
   dc284:	f001 fcd2 	bl	ddc2c <_Z16_fetch_usbserialv>
}
   dc288:	b003      	add	sp, #12
   dc28a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   dc28c:	490b      	ldr	r1, [pc, #44]	; (dc2bc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   dc28e:	4620      	mov	r0, r4
   dc290:	f002 fbdd 	bl	dea4e <strcmp>
   dc294:	b970      	cbnz	r0, dc2b4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   dc296:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   dc29a:	a901      	add	r1, sp, #4
   dc29c:	4628      	mov	r0, r5
        int baud = 9600;
   dc29e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   dc2a0:	f7ff ffb0 	bl	dc204 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   dc2a4:	f001 fc3a 	bl	ddb1c <_Z22__fetch_global_Serial1v>
   dc2a8:	9901      	ldr	r1, [sp, #4]
   dc2aa:	f001 fc31 	bl	ddb10 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   dc2ae:	f001 fc35 	bl	ddb1c <_Z22__fetch_global_Serial1v>
   dc2b2:	e7e9      	b.n	dc288 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   dc2b4:	2000      	movs	r0, #0
   dc2b6:	e7e7      	b.n	dc288 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   dc2b8:	000e013b 	.word	0x000e013b
   dc2bc:	000e0142 	.word	0x000e0142

000dc2c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   dc2c0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   dc2c2:	e9d0 5300 	ldrd	r5, r3, [r0]
   dc2c6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   dc2c8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   dc2ca:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dc2ce:	42ae      	cmp	r6, r5
   dc2d0:	d005      	beq.n	dc2de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   dc2d2:	f105 0008 	add.w	r0, r5, #8
   dc2d6:	f7ff fff3 	bl	dc2c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   dc2da:	3514      	adds	r5, #20
   dc2dc:	e7f7      	b.n	dc2ce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   dc2de:	6820      	ldr	r0, [r4, #0]
   dc2e0:	f7fe fd36 	bl	dad50 <free>
}
   dc2e4:	4620      	mov	r0, r4
   dc2e6:	bd70      	pop	{r4, r5, r6, pc}

000dc2e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   dc2e8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   dc2ea:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   dc2ee:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   dc2f0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   dc2f4:	42ae      	cmp	r6, r5
   dc2f6:	d004      	beq.n	dc302 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   dc2f8:	4628      	mov	r0, r5
   dc2fa:	f001 f853 	bl	dd3a4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   dc2fe:	3510      	adds	r5, #16
   dc300:	e7f8      	b.n	dc2f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   dc302:	6820      	ldr	r0, [r4, #0]
   dc304:	f7fe fd24 	bl	dad50 <free>
}
   dc308:	4620      	mov	r0, r4
   dc30a:	bd70      	pop	{r4, r5, r6, pc}

000dc30c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   dc30c:	b510      	push	{r4, lr}
   dc30e:	4604      	mov	r4, r0
   dc310:	300c      	adds	r0, #12
   dc312:	f7ff ffd5 	bl	dc2c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   dc316:	4620      	mov	r0, r4
   dc318:	f7ff ffe6 	bl	dc2e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   dc31c:	4620      	mov	r0, r4
   dc31e:	bd10      	pop	{r4, pc}

000dc320 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   dc320:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   dc322:	4b04      	ldr	r3, [pc, #16]	; (dc334 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   dc324:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   dc326:	f840 3b04 	str.w	r3, [r0], #4
   dc32a:	f7ff ffef 	bl	dc30c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   dc32e:	4620      	mov	r0, r4
   dc330:	bd10      	pop	{r4, pc}
   dc332:	bf00      	nop
   dc334:	000df524 	.word	0x000df524

000dc338 <_ZN5spark16StreamLogHandlerD0Ev>:
   dc338:	b510      	push	{r4, lr}
   dc33a:	4604      	mov	r4, r0
   dc33c:	f7ff fff0 	bl	dc320 <_ZN5spark16StreamLogHandlerD1Ev>
   dc340:	4620      	mov	r0, r4
   dc342:	2124      	movs	r1, #36	; 0x24
   dc344:	f001 fe58 	bl	ddff8 <_ZdlPvj>
   dc348:	4620      	mov	r0, r4
   dc34a:	bd10      	pop	{r4, pc}

000dc34c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   dc34c:	b510      	push	{r4, lr}
   dc34e:	4b03      	ldr	r3, [pc, #12]	; (dc35c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   dc350:	6003      	str	r3, [r0, #0]
   dc352:	4604      	mov	r4, r0
   dc354:	f7ff ffe4 	bl	dc320 <_ZN5spark16StreamLogHandlerD1Ev>
   dc358:	4620      	mov	r0, r4
   dc35a:	bd10      	pop	{r4, pc}
   dc35c:	000e01e0 	.word	0x000e01e0

000dc360 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   dc360:	b510      	push	{r4, lr}
   dc362:	4604      	mov	r4, r0
   dc364:	f7ff fff2 	bl	dc34c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   dc368:	4620      	mov	r0, r4
   dc36a:	2124      	movs	r1, #36	; 0x24
   dc36c:	f001 fe44 	bl	ddff8 <_ZdlPvj>
   dc370:	4620      	mov	r0, r4
   dc372:	bd10      	pop	{r4, pc}

000dc374 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   dc374:	2200      	movs	r2, #0
   dc376:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   dc37a:	b510      	push	{r4, lr}
        capacity_(0) {
   dc37c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   dc37e:	680c      	ldr	r4, [r1, #0]
   dc380:	6004      	str	r4, [r0, #0]
   dc382:	684c      	ldr	r4, [r1, #4]
   dc384:	6044      	str	r4, [r0, #4]
   dc386:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc388:	600a      	str	r2, [r1, #0]
   dc38a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   dc38c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc38e:	608a      	str	r2, [r1, #8]
}
   dc390:	bd10      	pop	{r4, pc}

000dc392 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   dc392:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   dc394:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   dc396:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   dc398:	6818      	ldr	r0, [r3, #0]
   dc39a:	f7fe f91f 	bl	da5dc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   dc39e:	4620      	mov	r0, r4
   dc3a0:	bd10      	pop	{r4, pc}
	...

000dc3a4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   dc3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc3a8:	b087      	sub	sp, #28
   dc3aa:	4680      	mov	r8, r0
   dc3ac:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   dc3ae:	4b1c      	ldr	r3, [pc, #112]	; (dc420 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   dc3b0:	685b      	ldr	r3, [r3, #4]
   dc3b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   dc3b6:	4689      	mov	r9, r1
   dc3b8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   dc3ba:	b96b      	cbnz	r3, dc3d8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   dc3bc:	f7ff fef4 	bl	dc1a8 <_ZN5spark10LogManager8instanceEv>
   dc3c0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   dc3c2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   dc3c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dc3c8:	9305      	str	r3, [sp, #20]
   dc3ca:	f7fe f8ff 	bl	da5cc <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   dc3ce:	7b23      	ldrb	r3, [r4, #12]
   dc3d0:	b12b      	cbz	r3, dc3de <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   dc3d2:	a805      	add	r0, sp, #20
   dc3d4:	f7ff ffdd 	bl	dc392 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   dc3d8:	b007      	add	sp, #28
   dc3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   dc3de:	2301      	movs	r3, #1
   dc3e0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   dc3e2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   dc3e6:	fa5f f989 	uxtb.w	r9, r9
   dc3ea:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   dc3ee:	45aa      	cmp	sl, r5
   dc3f0:	d012      	beq.n	dc418 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   dc3f2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   dc3f6:	4631      	mov	r1, r6
   dc3f8:	1d38      	adds	r0, r7, #4
   dc3fa:	f7ff fe61 	bl	dc0c0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   dc3fe:	4581      	cmp	r9, r0
   dc400:	d3f5      	bcc.n	dc3ee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   dc402:	683b      	ldr	r3, [r7, #0]
   dc404:	9a03      	ldr	r2, [sp, #12]
   dc406:	9200      	str	r2, [sp, #0]
   dc408:	f8d3 b008 	ldr.w	fp, [r3, #8]
   dc40c:	464a      	mov	r2, r9
   dc40e:	4633      	mov	r3, r6
   dc410:	4641      	mov	r1, r8
   dc412:	4638      	mov	r0, r7
   dc414:	47d8      	blx	fp
   dc416:	e7ea      	b.n	dc3ee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   dc418:	2300      	movs	r3, #0
   dc41a:	7323      	strb	r3, [r4, #12]
   dc41c:	e7d9      	b.n	dc3d2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   dc41e:	bf00      	nop
   dc420:	e000ed00 	.word	0xe000ed00

000dc424 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   dc424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc428:	469b      	mov	fp, r3
   dc42a:	4b1a      	ldr	r3, [pc, #104]	; (dc494 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   dc42c:	685b      	ldr	r3, [r3, #4]
   dc42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   dc432:	4680      	mov	r8, r0
   dc434:	4689      	mov	r9, r1
   dc436:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   dc438:	b96b      	cbnz	r3, dc456 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   dc43a:	f7ff feb5 	bl	dc1a8 <_ZN5spark10LogManager8instanceEv>
   dc43e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   dc440:	f100 0324 	add.w	r3, r0, #36	; 0x24
   dc444:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dc446:	9301      	str	r3, [sp, #4]
   dc448:	f7fe f8c0 	bl	da5cc <os_mutex_recursive_lock>
        if (that->isActive()) {
   dc44c:	7b23      	ldrb	r3, [r4, #12]
   dc44e:	b12b      	cbz	r3, dc45c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   dc450:	a801      	add	r0, sp, #4
   dc452:	f7ff ff9e 	bl	dc392 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   dc456:	b003      	add	sp, #12
   dc458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   dc45c:	2301      	movs	r3, #1
   dc45e:	7323      	strb	r3, [r4, #12]
   dc460:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   dc464:	b2f6      	uxtb	r6, r6
   dc466:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   dc46a:	4555      	cmp	r5, sl
   dc46c:	d00e      	beq.n	dc48c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   dc46e:	f855 7b04 	ldr.w	r7, [r5], #4
   dc472:	4659      	mov	r1, fp
   dc474:	1d38      	adds	r0, r7, #4
   dc476:	f7ff fe23 	bl	dc0c0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   dc47a:	4286      	cmp	r6, r0
   dc47c:	d3f5      	bcc.n	dc46a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   dc47e:	683b      	ldr	r3, [r7, #0]
   dc480:	464a      	mov	r2, r9
   dc482:	68db      	ldr	r3, [r3, #12]
   dc484:	4641      	mov	r1, r8
   dc486:	4638      	mov	r0, r7
   dc488:	4798      	blx	r3
   dc48a:	e7ee      	b.n	dc46a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   dc48c:	2300      	movs	r3, #0
   dc48e:	7323      	strb	r3, [r4, #12]
   dc490:	e7de      	b.n	dc450 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   dc492:	bf00      	nop
   dc494:	e000ed00 	.word	0xe000ed00

000dc498 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   dc498:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   dc49c:	4b16      	ldr	r3, [pc, #88]	; (dc4f8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   dc49e:	685b      	ldr	r3, [r3, #4]
   dc4a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   dc4a4:	4605      	mov	r5, r0
   dc4a6:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   dc4a8:	bb1b      	cbnz	r3, dc4f2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   dc4aa:	f7ff fe7d 	bl	dc1a8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   dc4ae:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   dc4b2:	4604      	mov	r4, r0
   dc4b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dc4b6:	9301      	str	r3, [sp, #4]
   dc4b8:	f7fe f888 	bl	da5cc <os_mutex_recursive_lock>
   dc4bc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   dc4c0:	2446      	movs	r4, #70	; 0x46
   dc4c2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   dc4c6:	45b0      	cmp	r8, r6
   dc4c8:	d109      	bne.n	dc4de <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   dc4ca:	a801      	add	r0, sp, #4
   dc4cc:	f7ff ff61 	bl	dc392 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   dc4d0:	42a5      	cmp	r5, r4
   dc4d2:	bfb4      	ite	lt
   dc4d4:	2000      	movlt	r0, #0
   dc4d6:	2001      	movge	r0, #1
}
   dc4d8:	b002      	add	sp, #8
   dc4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   dc4de:	f856 0b04 	ldr.w	r0, [r6], #4
   dc4e2:	4639      	mov	r1, r7
   dc4e4:	3004      	adds	r0, #4
   dc4e6:	f7ff fdeb 	bl	dc0c0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   dc4ea:	4284      	cmp	r4, r0
   dc4ec:	bfa8      	it	ge
   dc4ee:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   dc4f0:	e7e9      	b.n	dc4c6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   dc4f2:	2000      	movs	r0, #0
   dc4f4:	e7f0      	b.n	dc4d8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   dc4f6:	bf00      	nop
   dc4f8:	e000ed00 	.word	0xe000ed00

000dc4fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   dc4fc:	b570      	push	{r4, r5, r6, lr}
   dc4fe:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   dc500:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   dc504:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   dc506:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   dc50a:	4282      	cmp	r2, r0
   dc50c:	d007      	beq.n	dc51e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   dc50e:	4601      	mov	r1, r0
            if (*p == value) {
   dc510:	681d      	ldr	r5, [r3, #0]
   dc512:	f851 6b04 	ldr.w	r6, [r1], #4
   dc516:	42ae      	cmp	r6, r5
   dc518:	d003      	beq.n	dc522 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   dc51a:	4608      	mov	r0, r1
   dc51c:	e7f5      	b.n	dc50a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   dc51e:	2000      	movs	r0, #0
}
   dc520:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   dc522:	1a52      	subs	r2, r2, r1
   dc524:	f002 fa02 	bl	de92c <memmove>
    --size_;
   dc528:	6863      	ldr	r3, [r4, #4]
   dc52a:	3b01      	subs	r3, #1
   dc52c:	6063      	str	r3, [r4, #4]
    return true;
   dc52e:	2001      	movs	r0, #1
   dc530:	e7f6      	b.n	dc520 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000dc532 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   dc532:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   dc534:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   dc538:	4604      	mov	r4, r0
   dc53a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dc53c:	9101      	str	r1, [sp, #4]
   dc53e:	9303      	str	r3, [sp, #12]
   dc540:	f7fe f844 	bl	da5cc <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   dc544:	a901      	add	r1, sp, #4
   dc546:	4620      	mov	r0, r4
   dc548:	f7ff ffd8 	bl	dc4fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   dc54c:	b118      	cbz	r0, dc556 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   dc54e:	6863      	ldr	r3, [r4, #4]
   dc550:	b90b      	cbnz	r3, dc556 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   dc552:	f7ff fe51 	bl	dc1f8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   dc556:	a803      	add	r0, sp, #12
   dc558:	f7ff ff1b 	bl	dc392 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   dc55c:	b004      	add	sp, #16
   dc55e:	bd10      	pop	{r4, pc}

000dc560 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   dc560:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   dc562:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   dc566:	2318      	movs	r3, #24
   dc568:	4604      	mov	r4, r0
   dc56a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   dc56e:	42ae      	cmp	r6, r5
   dc570:	d015      	beq.n	dc59e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   dc572:	f105 0110 	add.w	r1, r5, #16
   dc576:	4620      	mov	r0, r4
   dc578:	f7ff ffc0 	bl	dc4fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   dc57c:	6863      	ldr	r3, [r4, #4]
   dc57e:	b90b      	cbnz	r3, dc584 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   dc580:	f7ff fe3a 	bl	dc1f8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   dc584:	69e0      	ldr	r0, [r4, #28]
   dc586:	6929      	ldr	r1, [r5, #16]
   dc588:	6803      	ldr	r3, [r0, #0]
   dc58a:	68db      	ldr	r3, [r3, #12]
   dc58c:	4798      	blx	r3
        if (h.stream) {
   dc58e:	6969      	ldr	r1, [r5, #20]
   dc590:	b119      	cbz	r1, dc59a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   dc592:	6a20      	ldr	r0, [r4, #32]
   dc594:	6803      	ldr	r3, [r0, #0]
   dc596:	68db      	ldr	r3, [r3, #12]
   dc598:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   dc59a:	3518      	adds	r5, #24
   dc59c:	e7e7      	b.n	dc56e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   dc59e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   dc5a2:	2618      	movs	r6, #24
   dc5a4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dc5a8:	42ae      	cmp	r6, r5
   dc5aa:	d004      	beq.n	dc5b6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   dc5ac:	4628      	mov	r0, r5
   dc5ae:	f000 fef9 	bl	dd3a4 <_ZN6StringD1Ev>
   dc5b2:	3518      	adds	r5, #24
   dc5b4:	e7f8      	b.n	dc5a8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   dc5b6:	2300      	movs	r3, #0
   dc5b8:	6163      	str	r3, [r4, #20]
}
   dc5ba:	bd70      	pop	{r4, r5, r6, pc}

000dc5bc <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   dc5bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   dc5be:	4604      	mov	r4, r0
    resetSystemCallbacks();
   dc5c0:	f7ff fe1a 	bl	dc1f8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   dc5c4:	f104 0324 	add.w	r3, r4, #36	; 0x24
   dc5c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   dc5ca:	9301      	str	r3, [sp, #4]
   dc5cc:	f7fd fffe 	bl	da5cc <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   dc5d0:	4620      	mov	r0, r4
   dc5d2:	f7ff ffc5 	bl	dc560 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   dc5d6:	a801      	add	r0, sp, #4
   dc5d8:	f7ff fedb 	bl	dc392 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   dc5dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   dc5de:	b108      	cbz	r0, dc5e4 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   dc5e0:	f7fd ffec 	bl	da5bc <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   dc5e4:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   dc5e8:	2618      	movs	r6, #24
   dc5ea:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dc5ee:	42ae      	cmp	r6, r5
   dc5f0:	d004      	beq.n	dc5fc <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   dc5f2:	4628      	mov	r0, r5
   dc5f4:	f000 fed6 	bl	dd3a4 <_ZN6StringD1Ev>
   dc5f8:	3518      	adds	r5, #24
   dc5fa:	e7f8      	b.n	dc5ee <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   dc5fc:	6920      	ldr	r0, [r4, #16]
   dc5fe:	f7fe fba7 	bl	dad50 <free>
   dc602:	6820      	ldr	r0, [r4, #0]
   dc604:	f7fe fba4 	bl	dad50 <free>
}
   dc608:	4620      	mov	r0, r4
   dc60a:	b002      	add	sp, #8
   dc60c:	bd70      	pop	{r4, r5, r6, pc}
	...

000dc610 <__tcf_2>:
    static LogManager mgr;
   dc610:	4801      	ldr	r0, [pc, #4]	; (dc618 <__tcf_2+0x8>)
   dc612:	f7ff bfd3 	b.w	dc5bc <_ZN5spark10LogManagerD1Ev>
   dc616:	bf00      	nop
   dc618:	2003e574 	.word	0x2003e574

000dc61c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   dc61c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   dc61e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc620:	4606      	mov	r6, r0
   dc622:	460c      	mov	r4, r1
   dc624:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   dc626:	d927      	bls.n	dc678 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   dc628:	4290      	cmp	r0, r2
   dc62a:	d226      	bcs.n	dc67a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   dc62c:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   dc630:	1a6c      	subs	r4, r5, r1
   dc632:	f1a1 0714 	sub.w	r7, r1, #20
   dc636:	4404      	add	r4, r0
        capacity_(0) {
   dc638:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   dc63a:	42af      	cmp	r7, r5
   dc63c:	d03d      	beq.n	dc6ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   dc63e:	b1a4      	cbz	r4, dc66a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   dc640:	682b      	ldr	r3, [r5, #0]
   dc642:	6023      	str	r3, [r4, #0]
   dc644:	88ab      	ldrh	r3, [r5, #4]
   dc646:	80a3      	strh	r3, [r4, #4]
   dc648:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   dc64c:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   dc64e:	e9c4 6602 	strd	r6, r6, [r4, #8]
   dc652:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc654:	68ab      	ldr	r3, [r5, #8]
   dc656:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc658:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc65a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dc65c:	68ea      	ldr	r2, [r5, #12]
   dc65e:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dc660:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc662:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc664:	692a      	ldr	r2, [r5, #16]
   dc666:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dc668:	612b      	str	r3, [r5, #16]
   dc66a:	f105 0008 	add.w	r0, r5, #8
   dc66e:	f7ff fe27 	bl	dc2c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   dc672:	3d14      	subs	r5, #20
   dc674:	3c14      	subs	r4, #20
   dc676:	e7e0      	b.n	dc63a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   dc678:	d01f      	beq.n	dc6ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   dc67a:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   dc67c:	42ac      	cmp	r4, r5
   dc67e:	d01c      	beq.n	dc6ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   dc680:	b1a6      	cbz	r6, dc6ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   dc682:	6823      	ldr	r3, [r4, #0]
   dc684:	6033      	str	r3, [r6, #0]
   dc686:	88a3      	ldrh	r3, [r4, #4]
   dc688:	80b3      	strh	r3, [r6, #4]
   dc68a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   dc68e:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   dc690:	e9c6 7702 	strd	r7, r7, [r6, #8]
   dc694:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc696:	68a3      	ldr	r3, [r4, #8]
   dc698:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc69a:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc69c:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   dc69e:	68e2      	ldr	r2, [r4, #12]
   dc6a0:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dc6a2:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc6a4:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc6a6:	6922      	ldr	r2, [r4, #16]
   dc6a8:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dc6aa:	6123      	str	r3, [r4, #16]
   dc6ac:	f104 0008 	add.w	r0, r4, #8
   dc6b0:	f7ff fe06 	bl	dc2c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   dc6b4:	3414      	adds	r4, #20
   dc6b6:	3614      	adds	r6, #20
   dc6b8:	e7e0      	b.n	dc67c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   dc6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc6bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   dc6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dc6be:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   dc6c2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   dc6c4:	4604      	mov	r4, r0
   dc6c6:	460e      	mov	r6, r1
   dc6c8:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dc6ca:	db0d      	blt.n	dc6e8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   dc6cc:	3501      	adds	r5, #1
        if (n > 0) {
   dc6ce:	2d00      	cmp	r5, #0
   dc6d0:	6800      	ldr	r0, [r0, #0]
   dc6d2:	dd04      	ble.n	dc6de <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   dc6d4:	00a9      	lsls	r1, r5, #2
   dc6d6:	f7fe fb43 	bl	dad60 <realloc>
            if (!d) {
   dc6da:	b918      	cbnz	r0, dc6e4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   dc6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   dc6de:	f7fe fb37 	bl	dad50 <free>
        T* d = nullptr;
   dc6e2:	2000      	movs	r0, #0
        data_ = d;
   dc6e4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   dc6e6:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   dc6e8:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   dc6ea:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   dc6ec:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   dc6f0:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   dc6f2:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   dc6f6:	1d08      	adds	r0, r1, #4
   dc6f8:	f002 f918 	bl	de92c <memmove>
    new(p) T(std::move(value));
   dc6fc:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   dc700:	6863      	ldr	r3, [r4, #4]
   dc702:	3301      	adds	r3, #1
   dc704:	6063      	str	r3, [r4, #4]
    return true;
   dc706:	2001      	movs	r0, #1
   dc708:	e7e8      	b.n	dc6dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000dc70a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   dc70a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   dc70c:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   dc710:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   dc712:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dc714:	9301      	str	r3, [sp, #4]
   dc716:	460d      	mov	r5, r1
   dc718:	f7fd ff58 	bl	da5cc <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   dc71c:	e9d4 3100 	ldrd	r3, r1, [r4]
   dc720:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   dc724:	4283      	cmp	r3, r0
   dc726:	461a      	mov	r2, r3
   dc728:	d00b      	beq.n	dc742 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   dc72a:	6812      	ldr	r2, [r2, #0]
   dc72c:	42aa      	cmp	r2, r5
   dc72e:	f103 0304 	add.w	r3, r3, #4
   dc732:	d1f7      	bne.n	dc724 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   dc734:	a801      	add	r0, sp, #4
   dc736:	f7ff fe2c 	bl	dc392 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   dc73a:	2500      	movs	r5, #0
}
   dc73c:	4628      	mov	r0, r5
   dc73e:	b003      	add	sp, #12
   dc740:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   dc742:	462a      	mov	r2, r5
   dc744:	4620      	mov	r0, r4
   dc746:	f7ff ffb9 	bl	dc6bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   dc74a:	4605      	mov	r5, r0
   dc74c:	2800      	cmp	r0, #0
   dc74e:	d0f1      	beq.n	dc734 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   dc750:	6863      	ldr	r3, [r4, #4]
   dc752:	2b01      	cmp	r3, #1
   dc754:	d101      	bne.n	dc75a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   dc756:	f7ff fd43 	bl	dc1e0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   dc75a:	a801      	add	r0, sp, #4
   dc75c:	f7ff fe19 	bl	dc392 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   dc760:	e7ec      	b.n	dc73c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000dc762 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   dc762:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   dc764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc766:	4604      	mov	r4, r0
   dc768:	460d      	mov	r5, r1
   dc76a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   dc76c:	d914      	bls.n	dc798 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   dc76e:	4290      	cmp	r0, r2
   dc770:	d213      	bcs.n	dc79a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   dc772:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   dc776:	1a75      	subs	r5, r6, r1
   dc778:	f1a1 0710 	sub.w	r7, r1, #16
   dc77c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   dc77e:	42b7      	cmp	r7, r6
   dc780:	d018      	beq.n	dc7b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   dc782:	b11c      	cbz	r4, dc78c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   dc784:	4631      	mov	r1, r6
   dc786:	4620      	mov	r0, r4
   dc788:	f000 fe88 	bl	dd49c <_ZN6StringC1EOS_>
                end->~T();
   dc78c:	4630      	mov	r0, r6
   dc78e:	f000 fe09 	bl	dd3a4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   dc792:	3e10      	subs	r6, #16
   dc794:	3c10      	subs	r4, #16
   dc796:	e7f2      	b.n	dc77e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   dc798:	d00c      	beq.n	dc7b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   dc79a:	42b5      	cmp	r5, r6
   dc79c:	d00a      	beq.n	dc7b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   dc79e:	b11c      	cbz	r4, dc7a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   dc7a0:	4629      	mov	r1, r5
   dc7a2:	4620      	mov	r0, r4
   dc7a4:	f000 fe7a 	bl	dd49c <_ZN6StringC1EOS_>
                p->~T();
   dc7a8:	4628      	mov	r0, r5
   dc7aa:	f000 fdfb 	bl	dd3a4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   dc7ae:	3510      	adds	r5, #16
   dc7b0:	3410      	adds	r4, #16
   dc7b2:	e7f2      	b.n	dc79a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   dc7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc7b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   dc7b6:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   dc7b8:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   dc7ba:	4605      	mov	r5, r0
        if (n > 0) {
   dc7bc:	dd11      	ble.n	dc7e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   dc7be:	0130      	lsls	r0, r6, #4
   dc7c0:	f7fe fabe 	bl	dad40 <malloc>
            if (!d) {
   dc7c4:	4604      	mov	r4, r0
   dc7c6:	b158      	cbz	r0, dc7e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   dc7c8:	e9d5 1200 	ldrd	r1, r2, [r5]
   dc7cc:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   dc7d0:	f7ff ffc7 	bl	dc762 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   dc7d4:	6828      	ldr	r0, [r5, #0]
   dc7d6:	f7fe fabb 	bl	dad50 <free>
        data_ = d;
   dc7da:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   dc7dc:	60ae      	str	r6, [r5, #8]
        return true;
   dc7de:	2001      	movs	r0, #1
    }
   dc7e0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   dc7e2:	2400      	movs	r4, #0
   dc7e4:	e7f6      	b.n	dc7d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000dc7e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   dc7e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc7ea:	4691      	mov	r9, r2
   dc7ec:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   dc7ee:	2300      	movs	r3, #0
   dc7f0:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   dc7f2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   dc7f6:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   dc7f8:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   dc7fa:	4299      	cmp	r1, r3
        capacity_(0) {
   dc7fc:	e9c0 3300 	strd	r3, r3, [r0]
   dc800:	e9c0 3302 	strd	r3, r3, [r0, #8]
   dc804:	e9c0 3304 	strd	r3, r3, [r0, #16]
   dc808:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   dc80c:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   dc80e:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   dc810:	dc23      	bgt.n	dc85a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   dc812:	e9d9 5700 	ldrd	r5, r7, [r9]
   dc816:	2314      	movs	r3, #20
   dc818:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   dc81c:	42af      	cmp	r7, r5
   dc81e:	d03b      	beq.n	dc898 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   dc820:	4629      	mov	r1, r5
   dc822:	a80d      	add	r0, sp, #52	; 0x34
   dc824:	f000 fe3a 	bl	dd49c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   dc828:	a90d      	add	r1, sp, #52	; 0x34
   dc82a:	a811      	add	r0, sp, #68	; 0x44
   dc82c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   dc82e:	f000 fe35 	bl	dd49c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dc832:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   dc836:	4299      	cmp	r1, r3
   dc838:	da1b      	bge.n	dc872 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   dc83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   dc83c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   dc83e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   dc842:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   dc846:	4631      	mov	r1, r6
   dc848:	f106 0010 	add.w	r0, r6, #16
   dc84c:	f7ff ff89 	bl	dc762 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   dc850:	b9ee      	cbnz	r6, dc88e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   dc852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dc854:	3301      	adds	r3, #1
   dc856:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   dc858:	e011      	b.n	dc87e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   dc85a:	a80a      	add	r0, sp, #40	; 0x28
   dc85c:	f7ff ffab 	bl	dc7b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   dc860:	2800      	cmp	r0, #0
   dc862:	d1d6      	bne.n	dc812 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   dc864:	a80a      	add	r0, sp, #40	; 0x28
   dc866:	f7ff fd3f 	bl	dc2e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   dc86a:	4620      	mov	r0, r4
   dc86c:	b017      	add	sp, #92	; 0x5c
   dc86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dc872:	3101      	adds	r1, #1
   dc874:	a80a      	add	r0, sp, #40	; 0x28
   dc876:	f7ff ff9e 	bl	dc7b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   dc87a:	2800      	cmp	r0, #0
   dc87c:	d1dd      	bne.n	dc83a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   dc87e:	a811      	add	r0, sp, #68	; 0x44
   dc880:	f000 fd90 	bl	dd3a4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   dc884:	a80d      	add	r0, sp, #52	; 0x34
   dc886:	f000 fd8d 	bl	dd3a4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   dc88a:	3514      	adds	r5, #20
   dc88c:	e7c6      	b.n	dc81c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   dc88e:	a911      	add	r1, sp, #68	; 0x44
   dc890:	4630      	mov	r0, r6
   dc892:	f000 fe03 	bl	dd49c <_ZN6StringC1EOS_>
   dc896:	e7dc      	b.n	dc852 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   dc898:	2600      	movs	r6, #0
   dc89a:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   dc89e:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   dc8a0:	4637      	mov	r7, r6
   dc8a2:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   dc8a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dc8aa:	429e      	cmp	r6, r3
   dc8ac:	f280 8097 	bge.w	dc9de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   dc8b0:	0133      	lsls	r3, r6, #4
   dc8b2:	58d3      	ldr	r3, [r2, r3]
   dc8b4:	9308      	str	r3, [sp, #32]
        if (!category) {
   dc8b6:	b90b      	cbnz	r3, dc8bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   dc8b8:	3601      	adds	r6, #1
   dc8ba:	e7f4      	b.n	dc8a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   dc8bc:	fb0a f306 	mul.w	r3, sl, r6
   dc8c0:	9709      	str	r7, [sp, #36]	; 0x24
   dc8c2:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   dc8c4:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   dc8c6:	a909      	add	r1, sp, #36	; 0x24
   dc8c8:	a808      	add	r0, sp, #32
   dc8ca:	f7ff fb3c 	bl	dbf46 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   dc8ce:	4683      	mov	fp, r0
   dc8d0:	2800      	cmp	r0, #0
   dc8d2:	d0f1      	beq.n	dc8b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   dc8d4:	4601      	mov	r1, r0
   dc8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   dc8d8:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   dc8dc:	f10d 031f 	add.w	r3, sp, #31
   dc8e0:	4628      	mov	r0, r5
   dc8e2:	f7ff fbaf 	bl	dc044 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dc8e6:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   dc8ea:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dc8ec:	f1b8 0f00 	cmp.w	r8, #0
   dc8f0:	d166      	bne.n	dc9c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   dc8f2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   dc8f6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   dc8fa:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   dc8fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dc902:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   dc906:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   dc90a:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dc90e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   dc912:	4293      	cmp	r3, r2
   dc914:	db1a      	blt.n	dc94c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   dc916:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   dc91a:	f1bb 0f00 	cmp.w	fp, #0
   dc91e:	dd4a      	ble.n	dc9b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   dc920:	fb0a f00b 	mul.w	r0, sl, fp
   dc924:	f7fe fa0c 	bl	dad40 <malloc>
            if (!d) {
   dc928:	9004      	str	r0, [sp, #16]
   dc92a:	2800      	cmp	r0, #0
   dc92c:	d045      	beq.n	dc9ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   dc92e:	e9d5 1200 	ldrd	r1, r2, [r5]
   dc932:	fb0a 1202 	mla	r2, sl, r2, r1
   dc936:	f7ff fe71 	bl	dc61c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   dc93a:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   dc93c:	6828      	ldr	r0, [r5, #0]
   dc93e:	9304      	str	r3, [sp, #16]
   dc940:	f7fe fa06 	bl	dad50 <free>
        data_ = d;
   dc944:	9b04      	ldr	r3, [sp, #16]
   dc946:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   dc948:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   dc94c:	9b01      	ldr	r3, [sp, #4]
   dc94e:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   dc952:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   dc954:	fb0a f303 	mul.w	r3, sl, r3
   dc958:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   dc95c:	f101 0014 	add.w	r0, r1, #20
   dc960:	fb0a b202 	mla	r2, sl, r2, fp
   dc964:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   dc966:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   dc968:	f7ff fe58 	bl	dc61c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   dc96c:	9904      	ldr	r1, [sp, #16]
   dc96e:	b1a9      	cbz	r1, dc99c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   dc970:	9b05      	ldr	r3, [sp, #20]
   dc972:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc974:	f84b 2003 	str.w	r2, [fp, r3]
   dc978:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   dc97c:	808b      	strh	r3, [r1, #4]
   dc97e:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   dc982:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   dc984:	e9c1 7702 	strd	r7, r7, [r1, #8]
   dc988:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc98a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   dc98c:	608b      	str	r3, [r1, #8]
   dc98e:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   dc990:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   dc992:	60cb      	str	r3, [r1, #12]
   dc994:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   dc996:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   dc998:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dc99a:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   dc99c:	686b      	ldr	r3, [r5, #4]
   dc99e:	3301      	adds	r3, #1
   dc9a0:	606b      	str	r3, [r5, #4]
   dc9a2:	a813      	add	r0, sp, #76	; 0x4c
   dc9a4:	f7ff fc8c 	bl	dc2c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dc9a8:	f1b8 0f00 	cmp.w	r8, #0
   dc9ac:	d008      	beq.n	dc9c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   dc9ae:	a80d      	add	r0, sp, #52	; 0x34
   dc9b0:	f7ff fc86 	bl	dc2c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   dc9b4:	e756      	b.n	dc864 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   dc9b6:	4643      	mov	r3, r8
   dc9b8:	e7c0      	b.n	dc93c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dc9ba:	f04f 0801 	mov.w	r8, #1
   dc9be:	e7f0      	b.n	dc9a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   dc9c0:	9b01      	ldr	r3, [sp, #4]
   dc9c2:	682d      	ldr	r5, [r5, #0]
   dc9c4:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   dc9c8:	9b08      	ldr	r3, [sp, #32]
   dc9ca:	781b      	ldrb	r3, [r3, #0]
   dc9cc:	b92b      	cbnz	r3, dc9da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   dc9ce:	f8d9 3000 	ldr.w	r3, [r9]
   dc9d2:	9a02      	ldr	r2, [sp, #8]
   dc9d4:	4413      	add	r3, r2
   dc9d6:	7c1b      	ldrb	r3, [r3, #16]
   dc9d8:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   dc9da:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   dc9dc:	e773      	b.n	dc8c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc9de:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   dc9e0:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc9e2:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   dc9e4:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc9e6:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc9e8:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   dc9ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   dc9ec:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc9ee:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dc9f0:	60a2      	str	r2, [r4, #8]
   dc9f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   dc9f4:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc9f6:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc9f8:	60e2      	str	r2, [r4, #12]
   dc9fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   dc9fc:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc9fe:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   dca00:	6122      	str	r2, [r4, #16]
   dca02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   dca04:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   dca06:	9b03      	ldr	r3, [sp, #12]
   dca08:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   dca0a:	6162      	str	r2, [r4, #20]
   dca0c:	7623      	strb	r3, [r4, #24]
   dca0e:	e7ce      	b.n	dc9ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000dca10 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   dca10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   dca12:	4605      	mov	r5, r0
   dca14:	4b09      	ldr	r3, [pc, #36]	; (dca3c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   dca16:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   dca1a:	4604      	mov	r4, r0
   dca1c:	460e      	mov	r6, r1
        filter_(level, filters) {
   dca1e:	a801      	add	r0, sp, #4
   dca20:	4611      	mov	r1, r2
   dca22:	f7f8 fb58 	bl	d50d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dca26:	aa01      	add	r2, sp, #4
   dca28:	4631      	mov	r1, r6
   dca2a:	4628      	mov	r0, r5
   dca2c:	f7ff fedb 	bl	dc7e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dca30:	a801      	add	r0, sp, #4
   dca32:	f7f8 fb0f 	bl	d5054 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   dca36:	4620      	mov	r0, r4
   dca38:	b004      	add	sp, #16
   dca3a:	bd70      	pop	{r4, r5, r6, pc}
   dca3c:	000df524 	.word	0x000df524

000dca40 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   dca40:	b5f0      	push	{r4, r5, r6, r7, lr}
   dca42:	460f      	mov	r7, r1
   dca44:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dca46:	4926      	ldr	r1, [pc, #152]	; (dcae0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   dca48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dca4a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   dca4c:	4616      	mov	r6, r2
   dca4e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dca50:	f001 fffd 	bl	dea4e <strcmp>
   dca54:	bb00      	cbnz	r0, dca98 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   dca56:	b1e4      	cbz	r4, dca92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   dca58:	4629      	mov	r1, r5
   dca5a:	4668      	mov	r0, sp
   dca5c:	f7ff fc8a 	bl	dc374 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dca60:	4920      	ldr	r1, [pc, #128]	; (dcae4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   dca62:	2024      	movs	r0, #36	; 0x24
   dca64:	f001 faca 	bl	ddffc <_ZnwjRKSt9nothrow_t>
   dca68:	4605      	mov	r5, r0
   dca6a:	b170      	cbz	r0, dca8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   dca6c:	4669      	mov	r1, sp
   dca6e:	a803      	add	r0, sp, #12
   dca70:	f7f8 fb31 	bl	d50d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dca74:	aa03      	add	r2, sp, #12
   dca76:	4631      	mov	r1, r6
   dca78:	4628      	mov	r0, r5
   dca7a:	f7ff ffc9 	bl	dca10 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dca7e:	a803      	add	r0, sp, #12
   dca80:	f7f8 fae8 	bl	d5054 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   dca84:	4b18      	ldr	r3, [pc, #96]	; (dcae8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   dca86:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   dca88:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   dca8a:	4668      	mov	r0, sp
   dca8c:	f7f8 fae2 	bl	d5054 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dca90:	462c      	mov	r4, r5
}
   dca92:	4620      	mov	r0, r4
   dca94:	b007      	add	sp, #28
   dca96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   dca98:	4914      	ldr	r1, [pc, #80]	; (dcaec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   dca9a:	4638      	mov	r0, r7
   dca9c:	f001 ffd7 	bl	dea4e <strcmp>
   dcaa0:	b9e0      	cbnz	r0, dcadc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   dcaa2:	2c00      	cmp	r4, #0
   dcaa4:	d0f5      	beq.n	dca92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   dcaa6:	4629      	mov	r1, r5
   dcaa8:	4668      	mov	r0, sp
   dcaaa:	f7ff fc63 	bl	dc374 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dcaae:	490d      	ldr	r1, [pc, #52]	; (dcae4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   dcab0:	2024      	movs	r0, #36	; 0x24
   dcab2:	f001 faa3 	bl	ddffc <_ZnwjRKSt9nothrow_t>
   dcab6:	4605      	mov	r5, r0
   dcab8:	2800      	cmp	r0, #0
   dcaba:	d0e6      	beq.n	dca8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   dcabc:	4669      	mov	r1, sp
   dcabe:	a803      	add	r0, sp, #12
   dcac0:	f7f8 fb09 	bl	d50d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dcac4:	aa03      	add	r2, sp, #12
   dcac6:	4631      	mov	r1, r6
   dcac8:	4628      	mov	r0, r5
   dcaca:	f7ff ffa1 	bl	dca10 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dcace:	a803      	add	r0, sp, #12
   dcad0:	f7f8 fac0 	bl	d5054 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dcad4:	4b06      	ldr	r3, [pc, #24]	; (dcaf0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   dcad6:	602b      	str	r3, [r5, #0]
   dcad8:	622c      	str	r4, [r5, #32]
}
   dcada:	e7d6      	b.n	dca8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   dcadc:	2400      	movs	r4, #0
   dcade:	e7d8      	b.n	dca92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   dcae0:	000e014a 	.word	0x000e014a
   dcae4:	000e0310 	.word	0x000e0310
   dcae8:	000e01e0 	.word	0x000e01e0
   dcaec:	000e014e 	.word	0x000e014e
   dcaf0:	000e01c8 	.word	0x000e01c8

000dcaf4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   dcaf4:	4b01      	ldr	r3, [pc, #4]	; (dcafc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   dcaf6:	4a02      	ldr	r2, [pc, #8]	; (dcb00 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   dcaf8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   dcafa:	4770      	bx	lr
   dcafc:	2003e570 	.word	0x2003e570
   dcb00:	000e015f 	.word	0x000e015f

000dcb04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dcb04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dcb08:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   dcb0a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dcb0e:	4604      	mov	r4, r0
   dcb10:	460e      	mov	r6, r1
   dcb12:	4617      	mov	r7, r2
   dcb14:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   dcb16:	f001 f889 	bl	ddc2c <_Z16_fetch_usbserialv>
   dcb1a:	4581      	cmp	r9, r0
   dcb1c:	d04c      	beq.n	dcbb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   dcb1e:	792b      	ldrb	r3, [r5, #4]
   dcb20:	0719      	lsls	r1, r3, #28
   dcb22:	d504      	bpl.n	dcb2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   dcb24:	696a      	ldr	r2, [r5, #20]
   dcb26:	4954      	ldr	r1, [pc, #336]	; (dcc78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   dcb28:	4620      	mov	r0, r4
   dcb2a:	f7ff fa7c 	bl	dc026 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   dcb2e:	f1b8 0f00 	cmp.w	r8, #0
   dcb32:	d00d      	beq.n	dcb50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   dcb34:	215b      	movs	r1, #91	; 0x5b
   dcb36:	4620      	mov	r0, r4
   dcb38:	f7ff fa69 	bl	dc00e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   dcb3c:	4641      	mov	r1, r8
   dcb3e:	4620      	mov	r0, r4
   dcb40:	f7ff fa56 	bl	dbff0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   dcb44:	6823      	ldr	r3, [r4, #0]
   dcb46:	494d      	ldr	r1, [pc, #308]	; (dcc7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   dcb48:	68db      	ldr	r3, [r3, #12]
   dcb4a:	2202      	movs	r2, #2
   dcb4c:	4620      	mov	r0, r4
   dcb4e:	4798      	blx	r3
    if (attr.has_file) {
   dcb50:	792b      	ldrb	r3, [r5, #4]
   dcb52:	07da      	lsls	r2, r3, #31
   dcb54:	d523      	bpl.n	dcb9e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   dcb56:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   dcb5a:	212f      	movs	r1, #47	; 0x2f
   dcb5c:	4640      	mov	r0, r8
   dcb5e:	f001 ffd3 	bl	deb08 <strrchr>
    if (s1) {
   dcb62:	b108      	cbz	r0, dcb68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   dcb64:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   dcb68:	4641      	mov	r1, r8
   dcb6a:	4620      	mov	r0, r4
   dcb6c:	f7ff fa40 	bl	dbff0 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   dcb70:	792b      	ldrb	r3, [r5, #4]
   dcb72:	079b      	lsls	r3, r3, #30
   dcb74:	d508      	bpl.n	dcb88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   dcb76:	213a      	movs	r1, #58	; 0x3a
   dcb78:	4620      	mov	r0, r4
   dcb7a:	f7ff fa48 	bl	dc00e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   dcb7e:	68ea      	ldr	r2, [r5, #12]
   dcb80:	493f      	ldr	r1, [pc, #252]	; (dcc80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   dcb82:	4620      	mov	r0, r4
   dcb84:	f7ff fa4f 	bl	dc026 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   dcb88:	792a      	ldrb	r2, [r5, #4]
   dcb8a:	6823      	ldr	r3, [r4, #0]
   dcb8c:	f012 0f04 	tst.w	r2, #4
   dcb90:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   dcb92:	bf14      	ite	ne
   dcb94:	493b      	ldrne	r1, [pc, #236]	; (dcc84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   dcb96:	493c      	ldreq	r1, [pc, #240]	; (dcc88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   dcb98:	2202      	movs	r2, #2
            write(": ", 2);
   dcb9a:	4620      	mov	r0, r4
   dcb9c:	4798      	blx	r3
    if (attr.has_function) {
   dcb9e:	792b      	ldrb	r3, [r5, #4]
   dcba0:	0758      	lsls	r0, r3, #29
   dcba2:	d51d      	bpl.n	dcbe0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   dcba4:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   dcba6:	460b      	mov	r3, r1
   dcba8:	461a      	mov	r2, r3
    for (; *s; ++s) {
   dcbaa:	f813 0b01 	ldrb.w	r0, [r3], #1
   dcbae:	b160      	cbz	r0, dcbca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   dcbb0:	2820      	cmp	r0, #32
   dcbb2:	d108      	bne.n	dcbc6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   dcbb4:	4619      	mov	r1, r3
   dcbb6:	e7f7      	b.n	dcba8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   dcbb8:	4834      	ldr	r0, [pc, #208]	; (dcc8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   dcbba:	f000 f966 	bl	dce8a <_ZN5spark12NetworkClass9listeningEv>
   dcbbe:	2800      	cmp	r0, #0
   dcbc0:	d0ad      	beq.n	dcb1e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   dcbc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   dcbc6:	2828      	cmp	r0, #40	; 0x28
   dcbc8:	d1ee      	bne.n	dcba8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   dcbca:	6823      	ldr	r3, [r4, #0]
   dcbcc:	1a52      	subs	r2, r2, r1
   dcbce:	68db      	ldr	r3, [r3, #12]
   dcbd0:	4620      	mov	r0, r4
   dcbd2:	4798      	blx	r3
        write("(): ", 4);
   dcbd4:	6823      	ldr	r3, [r4, #0]
   dcbd6:	492e      	ldr	r1, [pc, #184]	; (dcc90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   dcbd8:	68db      	ldr	r3, [r3, #12]
   dcbda:	2204      	movs	r2, #4
   dcbdc:	4620      	mov	r0, r4
   dcbde:	4798      	blx	r3
    return log_level_name(level, nullptr);
   dcbe0:	2100      	movs	r1, #0
   dcbe2:	4638      	mov	r0, r7
   dcbe4:	f7fd ff62 	bl	daaac <log_level_name>
   dcbe8:	4601      	mov	r1, r0
    write(s);
   dcbea:	4620      	mov	r0, r4
   dcbec:	f7ff fa00 	bl	dbff0 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   dcbf0:	6823      	ldr	r3, [r4, #0]
   dcbf2:	4925      	ldr	r1, [pc, #148]	; (dcc88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   dcbf4:	68db      	ldr	r3, [r3, #12]
   dcbf6:	2202      	movs	r2, #2
   dcbf8:	4620      	mov	r0, r4
   dcbfa:	4798      	blx	r3
    if (msg) {
   dcbfc:	b11e      	cbz	r6, dcc06 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   dcbfe:	4631      	mov	r1, r6
   dcc00:	4620      	mov	r0, r4
   dcc02:	f7ff f9f5 	bl	dbff0 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   dcc06:	792b      	ldrb	r3, [r5, #4]
   dcc08:	f013 0f30 	tst.w	r3, #48	; 0x30
   dcc0c:	d02c      	beq.n	dcc68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   dcc0e:	6823      	ldr	r3, [r4, #0]
   dcc10:	4920      	ldr	r1, [pc, #128]	; (dcc94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   dcc12:	68db      	ldr	r3, [r3, #12]
   dcc14:	2202      	movs	r2, #2
   dcc16:	4620      	mov	r0, r4
   dcc18:	4798      	blx	r3
        if (attr.has_code) {
   dcc1a:	792b      	ldrb	r3, [r5, #4]
   dcc1c:	06d9      	lsls	r1, r3, #27
   dcc1e:	d50a      	bpl.n	dcc36 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   dcc20:	6823      	ldr	r3, [r4, #0]
   dcc22:	491d      	ldr	r1, [pc, #116]	; (dcc98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   dcc24:	68db      	ldr	r3, [r3, #12]
   dcc26:	2207      	movs	r2, #7
   dcc28:	4620      	mov	r0, r4
   dcc2a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   dcc2c:	69aa      	ldr	r2, [r5, #24]
   dcc2e:	491b      	ldr	r1, [pc, #108]	; (dcc9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   dcc30:	4620      	mov	r0, r4
   dcc32:	f7ff f9f8 	bl	dc026 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   dcc36:	792b      	ldrb	r3, [r5, #4]
   dcc38:	069a      	lsls	r2, r3, #26
   dcc3a:	d511      	bpl.n	dcc60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   dcc3c:	06db      	lsls	r3, r3, #27
   dcc3e:	d505      	bpl.n	dcc4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   dcc40:	6823      	ldr	r3, [r4, #0]
   dcc42:	4910      	ldr	r1, [pc, #64]	; (dcc84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   dcc44:	68db      	ldr	r3, [r3, #12]
   dcc46:	2202      	movs	r2, #2
   dcc48:	4620      	mov	r0, r4
   dcc4a:	4798      	blx	r3
            write("details = ", 10);
   dcc4c:	6823      	ldr	r3, [r4, #0]
   dcc4e:	4914      	ldr	r1, [pc, #80]	; (dcca0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   dcc50:	68db      	ldr	r3, [r3, #12]
   dcc52:	4620      	mov	r0, r4
   dcc54:	220a      	movs	r2, #10
   dcc56:	4798      	blx	r3
            write(attr.details);
   dcc58:	69e9      	ldr	r1, [r5, #28]
   dcc5a:	4620      	mov	r0, r4
   dcc5c:	f7ff f9c8 	bl	dbff0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   dcc60:	215d      	movs	r1, #93	; 0x5d
   dcc62:	4620      	mov	r0, r4
   dcc64:	f7ff f9d3 	bl	dc00e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   dcc68:	6823      	ldr	r3, [r4, #0]
   dcc6a:	490e      	ldr	r1, [pc, #56]	; (dcca4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   dcc6c:	68db      	ldr	r3, [r3, #12]
   dcc6e:	4620      	mov	r0, r4
   dcc70:	2202      	movs	r2, #2
}
   dcc72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   dcc76:	4718      	bx	r3
   dcc78:	000e0163 	.word	0x000e0163
   dcc7c:	000e016a 	.word	0x000e016a
   dcc80:	000df787 	.word	0x000df787
   dcc84:	000e016d 	.word	0x000e016d
   dcc88:	000e0172 	.word	0x000e0172
   dcc8c:	2003e59c 	.word	0x2003e59c
   dcc90:	000e0170 	.word	0x000e0170
   dcc94:	000e0175 	.word	0x000e0175
   dcc98:	000e0178 	.word	0x000e0178
   dcc9c:	000e0180 	.word	0x000e0180
   dcca0:	000e0183 	.word	0x000e0183
   dcca4:	000e018e 	.word	0x000e018e

000dcca8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dcca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dccac:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   dccae:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dccb2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   dccb4:	4605      	mov	r5, r0
   dccb6:	460f      	mov	r7, r1
   dccb8:	4690      	mov	r8, r2
   dccba:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   dccbc:	f000 ffb6 	bl	ddc2c <_Z16_fetch_usbserialv>
   dccc0:	4581      	cmp	r9, r0
   dccc2:	d105      	bne.n	dccd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   dccc4:	4849      	ldr	r0, [pc, #292]	; (dcdec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   dccc6:	f000 f8e0 	bl	dce8a <_ZN5spark12NetworkClass9listeningEv>
   dccca:	2800      	cmp	r0, #0
   dcccc:	f040 808a 	bne.w	dcde4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   dccd0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   dccd2:	4a47      	ldr	r2, [pc, #284]	; (dcdf0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   dccd4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   dccd6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   dccda:	a801      	add	r0, sp, #4
        strm_(stream) {
   dccdc:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   dccde:	f88d 9008 	strb.w	r9, [sp, #8]
   dcce2:	f7ff f878 	bl	dbdd6 <_ZN5spark10JSONWriter11beginObjectEv>
   dcce6:	4649      	mov	r1, r9
   dcce8:	4640      	mov	r0, r8
   dccea:	f7fd fedf 	bl	daaac <log_level_name>
    json.name("l", 1).value(s);
   dccee:	4941      	ldr	r1, [pc, #260]	; (dcdf4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   dccf0:	4680      	mov	r8, r0
   dccf2:	2201      	movs	r2, #1
   dccf4:	a801      	add	r0, sp, #4
   dccf6:	f7ff f8f7 	bl	dbee8 <_ZN5spark10JSONWriter4nameEPKcj>
   dccfa:	4641      	mov	r1, r8
   dccfc:	f7ff f96a 	bl	dbfd4 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   dcd00:	b13f      	cbz	r7, dcd12 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   dcd02:	493d      	ldr	r1, [pc, #244]	; (dcdf8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   dcd04:	2201      	movs	r2, #1
   dcd06:	a801      	add	r0, sp, #4
   dcd08:	f7ff f8ee 	bl	dbee8 <_ZN5spark10JSONWriter4nameEPKcj>
   dcd0c:	4639      	mov	r1, r7
   dcd0e:	f7ff f961 	bl	dbfd4 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   dcd12:	b13e      	cbz	r6, dcd24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   dcd14:	4939      	ldr	r1, [pc, #228]	; (dcdfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   dcd16:	2201      	movs	r2, #1
   dcd18:	a801      	add	r0, sp, #4
   dcd1a:	f7ff f8e5 	bl	dbee8 <_ZN5spark10JSONWriter4nameEPKcj>
   dcd1e:	4631      	mov	r1, r6
   dcd20:	f7ff f958 	bl	dbfd4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   dcd24:	7923      	ldrb	r3, [r4, #4]
   dcd26:	07df      	lsls	r7, r3, #31
   dcd28:	d50e      	bpl.n	dcd48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   dcd2a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   dcd2c:	212f      	movs	r1, #47	; 0x2f
   dcd2e:	4630      	mov	r0, r6
   dcd30:	f001 feea 	bl	deb08 <strrchr>
    if (s1) {
   dcd34:	b100      	cbz	r0, dcd38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   dcd36:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   dcd38:	4931      	ldr	r1, [pc, #196]	; (dce00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   dcd3a:	2201      	movs	r2, #1
   dcd3c:	a801      	add	r0, sp, #4
   dcd3e:	f7ff f8d3 	bl	dbee8 <_ZN5spark10JSONWriter4nameEPKcj>
   dcd42:	4631      	mov	r1, r6
   dcd44:	f7ff f946 	bl	dbfd4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   dcd48:	7923      	ldrb	r3, [r4, #4]
   dcd4a:	079e      	lsls	r6, r3, #30
   dcd4c:	d507      	bpl.n	dcd5e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   dcd4e:	492d      	ldr	r1, [pc, #180]	; (dce04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   dcd50:	2202      	movs	r2, #2
   dcd52:	a801      	add	r0, sp, #4
   dcd54:	f7ff f8c8 	bl	dbee8 <_ZN5spark10JSONWriter4nameEPKcj>
   dcd58:	68e1      	ldr	r1, [r4, #12]
   dcd5a:	f7ff f849 	bl	dbdf0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   dcd5e:	7923      	ldrb	r3, [r4, #4]
   dcd60:	0758      	lsls	r0, r3, #29
   dcd62:	d514      	bpl.n	dcd8e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   dcd64:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   dcd66:	4633      	mov	r3, r6
   dcd68:	461f      	mov	r7, r3
    for (; *s; ++s) {
   dcd6a:	f813 2b01 	ldrb.w	r2, [r3], #1
   dcd6e:	b12a      	cbz	r2, dcd7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   dcd70:	2a20      	cmp	r2, #32
   dcd72:	d101      	bne.n	dcd78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   dcd74:	461e      	mov	r6, r3
   dcd76:	e7f7      	b.n	dcd68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   dcd78:	2a28      	cmp	r2, #40	; 0x28
   dcd7a:	d1f5      	bne.n	dcd68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   dcd7c:	4922      	ldr	r1, [pc, #136]	; (dce08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   dcd7e:	2202      	movs	r2, #2
   dcd80:	a801      	add	r0, sp, #4
   dcd82:	f7ff f8b1 	bl	dbee8 <_ZN5spark10JSONWriter4nameEPKcj>
   dcd86:	1bba      	subs	r2, r7, r6
   dcd88:	4631      	mov	r1, r6
   dcd8a:	f7ff f8bd 	bl	dbf08 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   dcd8e:	7923      	ldrb	r3, [r4, #4]
   dcd90:	0719      	lsls	r1, r3, #28
   dcd92:	d507      	bpl.n	dcda4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   dcd94:	491d      	ldr	r1, [pc, #116]	; (dce0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   dcd96:	2201      	movs	r2, #1
   dcd98:	a801      	add	r0, sp, #4
   dcd9a:	f7ff f8a5 	bl	dbee8 <_ZN5spark10JSONWriter4nameEPKcj>
   dcd9e:	6961      	ldr	r1, [r4, #20]
   dcda0:	f7ff f838 	bl	dbe14 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   dcda4:	7923      	ldrb	r3, [r4, #4]
   dcda6:	06da      	lsls	r2, r3, #27
   dcda8:	d508      	bpl.n	dcdbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   dcdaa:	2204      	movs	r2, #4
   dcdac:	4918      	ldr	r1, [pc, #96]	; (dce10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   dcdae:	eb0d 0002 	add.w	r0, sp, r2
   dcdb2:	f7ff f899 	bl	dbee8 <_ZN5spark10JSONWriter4nameEPKcj>
   dcdb6:	69a1      	ldr	r1, [r4, #24]
   dcdb8:	f7ff f81a 	bl	dbdf0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   dcdbc:	7923      	ldrb	r3, [r4, #4]
   dcdbe:	069b      	lsls	r3, r3, #26
   dcdc0:	d507      	bpl.n	dcdd2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   dcdc2:	4914      	ldr	r1, [pc, #80]	; (dce14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   dcdc4:	2206      	movs	r2, #6
   dcdc6:	a801      	add	r0, sp, #4
   dcdc8:	f7ff f88e 	bl	dbee8 <_ZN5spark10JSONWriter4nameEPKcj>
   dcdcc:	69e1      	ldr	r1, [r4, #28]
   dcdce:	f7ff f901 	bl	dbfd4 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   dcdd2:	a801      	add	r0, sp, #4
   dcdd4:	f7fe ffe9 	bl	dbdaa <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   dcdd8:	6a28      	ldr	r0, [r5, #32]
   dcdda:	490f      	ldr	r1, [pc, #60]	; (dce18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   dcddc:	6803      	ldr	r3, [r0, #0]
   dcdde:	2202      	movs	r2, #2
   dcde0:	68db      	ldr	r3, [r3, #12]
   dcde2:	4798      	blx	r3
}
   dcde4:	b005      	add	sp, #20
   dcde6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcdea:	bf00      	nop
   dcdec:	2003e59c 	.word	0x2003e59c
   dcdf0:	000e01b0 	.word	0x000e01b0
   dcdf4:	000e0140 	.word	0x000e0140
   dcdf8:	000dfb05 	.word	0x000dfb05
   dcdfc:	000e0191 	.word	0x000e0191
   dce00:	000df0bb 	.word	0x000df0bb
   dce04:	000e0193 	.word	0x000e0193
   dce08:	000e0196 	.word	0x000e0196
   dce0c:	000df2bf 	.word	0x000df2bf
   dce10:	000e0199 	.word	0x000e0199
   dce14:	000e019e 	.word	0x000e019e
   dce18:	000e018e 	.word	0x000e018e

000dce1c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   dce1c:	2300      	movs	r3, #0
   dce1e:	6840      	ldr	r0, [r0, #4]
   dce20:	461a      	mov	r2, r3
   dce22:	f7fd bf2d 	b.w	dac80 <network_connect>

000dce26 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   dce26:	6840      	ldr	r0, [r0, #4]
   dce28:	2200      	movs	r2, #0
   dce2a:	2102      	movs	r1, #2
   dce2c:	f7fd bf38 	b.w	daca0 <network_disconnect>

000dce30 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   dce30:	2200      	movs	r2, #0
   dce32:	6840      	ldr	r0, [r0, #4]
   dce34:	4611      	mov	r1, r2
   dce36:	f7fd bf2b 	b.w	dac90 <network_connecting>

000dce3a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   dce3a:	2200      	movs	r2, #0
   dce3c:	6840      	ldr	r0, [r0, #4]
   dce3e:	4611      	mov	r1, r2
   dce40:	f7fd bf36 	b.w	dacb0 <network_ready>

000dce44 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   dce44:	2300      	movs	r3, #0
   dce46:	6840      	ldr	r0, [r0, #4]
   dce48:	461a      	mov	r2, r3
   dce4a:	4619      	mov	r1, r3
   dce4c:	f7fd bf38 	b.w	dacc0 <network_on>

000dce50 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   dce50:	2300      	movs	r3, #0
   dce52:	6840      	ldr	r0, [r0, #4]
   dce54:	461a      	mov	r2, r3
   dce56:	4619      	mov	r1, r3
   dce58:	f7fd bf3a 	b.w	dacd0 <network_off>

000dce5c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   dce5c:	6840      	ldr	r0, [r0, #4]
   dce5e:	2100      	movs	r1, #0
   dce60:	f7fd bf5e 	b.w	dad20 <network_is_on>

000dce64 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   dce64:	6840      	ldr	r0, [r0, #4]
   dce66:	2100      	movs	r1, #0
   dce68:	f7fd bf62 	b.w	dad30 <network_is_off>

000dce6c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   dce6c:	6840      	ldr	r0, [r0, #4]
   dce6e:	2200      	movs	r2, #0
   dce70:	f081 0101 	eor.w	r1, r1, #1
   dce74:	f7fd bf34 	b.w	dace0 <network_listen>

000dce78 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   dce78:	6840      	ldr	r0, [r0, #4]
   dce7a:	2200      	movs	r2, #0
   dce7c:	f7fd bf40 	b.w	dad00 <network_set_listen_timeout>

000dce80 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   dce80:	2200      	movs	r2, #0
   dce82:	6840      	ldr	r0, [r0, #4]
   dce84:	4611      	mov	r1, r2
   dce86:	f7fd bf43 	b.w	dad10 <network_get_listen_timeout>

000dce8a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   dce8a:	2200      	movs	r2, #0
   dce8c:	6840      	ldr	r0, [r0, #4]
   dce8e:	4611      	mov	r1, r2
   dce90:	f7fd bf2e 	b.w	dacf0 <network_listening>

000dce94 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   dce94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   dce98:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   dce9a:	b095      	sub	sp, #84	; 0x54
   dce9c:	4616      	mov	r6, r2
   dce9e:	460d      	mov	r5, r1
   dcea0:	4607      	mov	r7, r0
    IPAddress addr;
   dcea2:	f7fe fe23 	bl	dbaec <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   dcea6:	4621      	mov	r1, r4
   dcea8:	2218      	movs	r2, #24
   dceaa:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   dceac:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   dceae:	f001 fd57 	bl	de960 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   dceb2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   dceb4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   dceb8:	4621      	mov	r1, r4
   dceba:	466b      	mov	r3, sp
   dcebc:	aa0c      	add	r2, sp, #48	; 0x30
   dcebe:	4630      	mov	r0, r6
   dcec0:	f7fd fc9c 	bl	da7fc <netdb_getaddrinfo>
    if (!r) {
   dcec4:	4604      	mov	r4, r0
   dcec6:	2800      	cmp	r0, #0
   dcec8:	d146      	bne.n	dcf58 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dceca:	4602      	mov	r2, r0
   dcecc:	2101      	movs	r1, #1
   dcece:	6868      	ldr	r0, [r5, #4]
   dced0:	f7fd feee 	bl	dacb0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dced4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dced6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dced8:	4622      	mov	r2, r4
   dceda:	6868      	ldr	r0, [r5, #4]
   dcedc:	f7fd fee8 	bl	dacb0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dcee0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dcee2:	4681      	mov	r9, r0
        bool ok = false;
   dcee4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dcee6:	2e00      	cmp	r6, #0
   dcee8:	d036      	beq.n	dcf58 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   dceea:	2900      	cmp	r1, #0
   dceec:	d134      	bne.n	dcf58 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   dceee:	6873      	ldr	r3, [r6, #4]
   dcef0:	2b02      	cmp	r3, #2
   dcef2:	d003      	beq.n	dcefc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   dcef4:	2b0a      	cmp	r3, #10
   dcef6:	d00b      	beq.n	dcf10 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dcef8:	69f6      	ldr	r6, [r6, #28]
   dcefa:	e7f4      	b.n	dcee6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   dcefc:	f1b8 0f00 	cmp.w	r8, #0
   dcf00:	d004      	beq.n	dcf0c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   dcf02:	6971      	ldr	r1, [r6, #20]
   dcf04:	4638      	mov	r0, r7
   dcf06:	3104      	adds	r1, #4
   dcf08:	f7fe fe1d 	bl	dbb46 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   dcf0c:	4641      	mov	r1, r8
   dcf0e:	e7f3      	b.n	dcef8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   dcf10:	f1b9 0f00 	cmp.w	r9, #0
   dcf14:	d101      	bne.n	dcf1a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   dcf16:	4649      	mov	r1, r9
   dcf18:	e7ee      	b.n	dcef8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   dcf1a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   dcf1c:	2210      	movs	r2, #16
   dcf1e:	a801      	add	r0, sp, #4
   dcf20:	f001 fd1e 	bl	de960 <memset>
                    a.v = 6;
   dcf24:	2306      	movs	r3, #6
   dcf26:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   dcf2a:	ad01      	add	r5, sp, #4
   dcf2c:	f104 0308 	add.w	r3, r4, #8
   dcf30:	3418      	adds	r4, #24
   dcf32:	6818      	ldr	r0, [r3, #0]
   dcf34:	6859      	ldr	r1, [r3, #4]
   dcf36:	462a      	mov	r2, r5
   dcf38:	c203      	stmia	r2!, {r0, r1}
   dcf3a:	3308      	adds	r3, #8
   dcf3c:	42a3      	cmp	r3, r4
   dcf3e:	4615      	mov	r5, r2
   dcf40:	d1f7      	bne.n	dcf32 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   dcf42:	a901      	add	r1, sp, #4
   dcf44:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   dcf46:	ad07      	add	r5, sp, #28
   dcf48:	f7fe fdde 	bl	dbb08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dcf4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dcf4e:	1d3c      	adds	r4, r7, #4
   dcf50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dcf52:	682b      	ldr	r3, [r5, #0]
   dcf54:	7023      	strb	r3, [r4, #0]
   dcf56:	e7de      	b.n	dcf16 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   dcf58:	9800      	ldr	r0, [sp, #0]
   dcf5a:	f7fd fc47 	bl	da7ec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   dcf5e:	4638      	mov	r0, r7
   dcf60:	b015      	add	sp, #84	; 0x54
   dcf62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000dcf68 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   dcf68:	4b02      	ldr	r3, [pc, #8]	; (dcf74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   dcf6a:	4a03      	ldr	r2, [pc, #12]	; (dcf78 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   dcf6c:	601a      	str	r2, [r3, #0]
   dcf6e:	2200      	movs	r2, #0
   dcf70:	605a      	str	r2, [r3, #4]

} // spark
   dcf72:	4770      	bx	lr
   dcf74:	2003e59c 	.word	0x2003e59c
   dcf78:	000e0228 	.word	0x000e0228

000dcf7c <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   dcf7c:	b508      	push	{r3, lr}
            return &Wire1;
   dcf7e:	f001 f817 	bl	ddfb0 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   dcf82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   dcf86:	f7fe bd1f 	b.w	db9c8 <_ZN7TwoWire4lockEv>

000dcf8a <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   dcf8a:	b510      	push	{r4, lr}
   dcf8c:	4604      	mov	r4, r0
    lock_(_lock)
   dcf8e:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   dcf90:	b109      	cbz	r1, dcf96 <_ZN4PMICC1Eb+0xc>
        lock();
   dcf92:	f7ff fff3 	bl	dcf7c <_ZN4PMIC4lockEv.constprop.0>
}
   dcf96:	4620      	mov	r0, r4
   dcf98:	bd10      	pop	{r4, pc}

000dcf9a <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   dcf9a:	b508      	push	{r3, lr}
            return &Wire1;
   dcf9c:	f001 f808 	bl	ddfb0 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   dcfa0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   dcfa4:	f7fe bd19 	b.w	db9da <_ZN7TwoWire6unlockEv>

000dcfa8 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   dcfa8:	b510      	push	{r4, lr}
    if (lock_) {
   dcfaa:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   dcfac:	4604      	mov	r4, r0
    if (lock_) {
   dcfae:	b10b      	cbz	r3, dcfb4 <_ZN4PMICD1Ev+0xc>
        unlock();
   dcfb0:	f7ff fff3 	bl	dcf9a <_ZN4PMIC6unlockEv>
}
   dcfb4:	4620      	mov	r0, r4
   dcfb6:	bd10      	pop	{r4, pc}

000dcfb8 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   dcfb8:	b510      	push	{r4, lr}
   dcfba:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   dcfbc:	6800      	ldr	r0, [r0, #0]
   dcfbe:	f7ff ffec 	bl	dcf9a <_ZN4PMIC6unlockEv>
   dcfc2:	4620      	mov	r0, r4
   dcfc4:	bd10      	pop	{r4, pc}

000dcfc6 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   dcfc6:	b530      	push	{r4, r5, lr}
   dcfc8:	b087      	sub	sp, #28
   dcfca:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dcfcc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   dcfce:	f7ff ffd5 	bl	dcf7c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dcfd2:	236b      	movs	r3, #107	; 0x6b
   dcfd4:	f88d 3008 	strb.w	r3, [sp, #8]
   dcfd8:	2300      	movs	r3, #0
   dcfda:	2401      	movs	r4, #1
   dcfdc:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   dcfde:	230a      	movs	r3, #10
   dcfe0:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dcfe2:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   dcfe6:	f000 ffe3 	bl	ddfb0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   dcfea:	a902      	add	r1, sp, #8
   dcfec:	f7fe fcd0 	bl	db990 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   dcff0:	f000 ffde 	bl	ddfb0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   dcff4:	6803      	ldr	r3, [r0, #0]
   dcff6:	4629      	mov	r1, r5
   dcff8:	689b      	ldr	r3, [r3, #8]
   dcffa:	4798      	blx	r3
            return &Wire1;
   dcffc:	f000 ffd8 	bl	ddfb0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   dd000:	4621      	mov	r1, r4
   dd002:	f7fe fcdd 	bl	db9c0 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   dd006:	9403      	str	r4, [sp, #12]
            return &Wire1;
   dd008:	f000 ffd2 	bl	ddfb0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   dd00c:	a902      	add	r1, sp, #8
   dd00e:	f7fe fc8f 	bl	db930 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   dd012:	f000 ffcd 	bl	ddfb0 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   dd016:	6803      	ldr	r3, [r0, #0]
   dd018:	695b      	ldr	r3, [r3, #20]
   dd01a:	4798      	blx	r3
   dd01c:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   dd01e:	a801      	add	r0, sp, #4
   dd020:	f7ff ffca 	bl	dcfb8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   dd024:	b2e0      	uxtb	r0, r4
   dd026:	b007      	add	sp, #28
   dd028:	bd30      	pop	{r4, r5, pc}

000dd02a <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   dd02a:	b570      	push	{r4, r5, r6, lr}
   dd02c:	b086      	sub	sp, #24
   dd02e:	4614      	mov	r4, r2
   dd030:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dd032:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   dd034:	f7ff ffa2 	bl	dcf7c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dd038:	236b      	movs	r3, #107	; 0x6b
   dd03a:	f88d 3008 	strb.w	r3, [sp, #8]
   dd03e:	2300      	movs	r3, #0
   dd040:	9303      	str	r3, [sp, #12]
   dd042:	2601      	movs	r6, #1
    timeout_ = ms;
   dd044:	230a      	movs	r3, #10
   dd046:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dd048:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   dd04c:	f000 ffb0 	bl	ddfb0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   dd050:	a902      	add	r1, sp, #8
   dd052:	f7fe fc9d 	bl	db990 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   dd056:	f000 ffab 	bl	ddfb0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   dd05a:	6803      	ldr	r3, [r0, #0]
   dd05c:	4629      	mov	r1, r5
   dd05e:	689b      	ldr	r3, [r3, #8]
   dd060:	4798      	blx	r3
            return &Wire1;
   dd062:	f000 ffa5 	bl	ddfb0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   dd066:	6803      	ldr	r3, [r0, #0]
   dd068:	4621      	mov	r1, r4
   dd06a:	689b      	ldr	r3, [r3, #8]
   dd06c:	4798      	blx	r3
            return &Wire1;
   dd06e:	f000 ff9f 	bl	ddfb0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   dd072:	4631      	mov	r1, r6
   dd074:	f7fe fca4 	bl	db9c0 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   dd078:	a801      	add	r0, sp, #4
   dd07a:	f7ff ff9d 	bl	dcfb8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   dd07e:	b006      	add	sp, #24
   dd080:	bd70      	pop	{r4, r5, r6, pc}

000dd082 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   dd082:	b513      	push	{r0, r1, r4, lr}
   dd084:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dd086:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   dd088:	f7ff ff78 	bl	dcf7c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   dd08c:	2101      	movs	r1, #1
   dd08e:	4620      	mov	r0, r4
   dd090:	f7ff ff99 	bl	dcfc6 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   dd094:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   dd098:	f040 0210 	orr.w	r2, r0, #16
   dd09c:	2101      	movs	r1, #1
   dd09e:	4620      	mov	r0, r4
   dd0a0:	f7ff ffc3 	bl	dd02a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   dd0a4:	a801      	add	r0, sp, #4
   dd0a6:	f7ff ff87 	bl	dcfb8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   dd0aa:	2001      	movs	r0, #1
   dd0ac:	b002      	add	sp, #8
   dd0ae:	bd10      	pop	{r4, pc}

000dd0b0 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   dd0b0:	b513      	push	{r0, r1, r4, lr}
   dd0b2:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dd0b4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   dd0b6:	f7ff ff61 	bl	dcf7c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   dd0ba:	2101      	movs	r1, #1
   dd0bc:	4620      	mov	r0, r4
   dd0be:	f7ff ff82 	bl	dcfc6 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   dd0c2:	2101      	movs	r1, #1
   dd0c4:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   dd0c8:	4620      	mov	r0, r4
   dd0ca:	f7ff ffae 	bl	dd02a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   dd0ce:	a801      	add	r0, sp, #4
   dd0d0:	f7ff ff72 	bl	dcfb8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   dd0d4:	2001      	movs	r0, #1
   dd0d6:	b002      	add	sp, #8
   dd0d8:	bd10      	pop	{r4, pc}

000dd0da <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   dd0da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd0dc:	4606      	mov	r6, r0
   dd0de:	460d      	mov	r5, r1
  size_t n = 0;
   dd0e0:	188f      	adds	r7, r1, r2
   dd0e2:	2400      	movs	r4, #0
  while (size--) {
   dd0e4:	42bd      	cmp	r5, r7
   dd0e6:	d00c      	beq.n	dd102 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   dd0e8:	6833      	ldr	r3, [r6, #0]
   dd0ea:	f815 1b01 	ldrb.w	r1, [r5], #1
   dd0ee:	689b      	ldr	r3, [r3, #8]
   dd0f0:	4630      	mov	r0, r6
   dd0f2:	4798      	blx	r3
     if (chunk>=0)
   dd0f4:	1e03      	subs	r3, r0, #0
   dd0f6:	db01      	blt.n	dd0fc <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   dd0f8:	441c      	add	r4, r3
  while (size--) {
   dd0fa:	e7f3      	b.n	dd0e4 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   dd0fc:	2c00      	cmp	r4, #0
   dd0fe:	bf08      	it	eq
   dd100:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   dd102:	4620      	mov	r0, r4
   dd104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dd106 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   dd106:	b513      	push	{r0, r1, r4, lr}
   dd108:	4604      	mov	r4, r0
    }
   dd10a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   dd10c:	b159      	cbz	r1, dd126 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   dd10e:	9101      	str	r1, [sp, #4]
   dd110:	f001 fccd 	bl	deaae <strlen>
   dd114:	6823      	ldr	r3, [r4, #0]
   dd116:	9901      	ldr	r1, [sp, #4]
   dd118:	68db      	ldr	r3, [r3, #12]
   dd11a:	4602      	mov	r2, r0
   dd11c:	4620      	mov	r0, r4
    }
   dd11e:	b002      	add	sp, #8
   dd120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   dd124:	4718      	bx	r3
    }
   dd126:	b002      	add	sp, #8
   dd128:	bd10      	pop	{r4, pc}

000dd12a <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   dd12a:	b508      	push	{r3, lr}
  return write(str);
   dd12c:	f7ff ffeb 	bl	dd106 <_ZN5Print5writeEPKc>
}
   dd130:	bd08      	pop	{r3, pc}

000dd132 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   dd132:	6803      	ldr	r3, [r0, #0]
   dd134:	689b      	ldr	r3, [r3, #8]
   dd136:	4718      	bx	r3

000dd138 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   dd138:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   dd13a:	210d      	movs	r1, #13
{
   dd13c:	4605      	mov	r5, r0
  size_t n = print('\r');
   dd13e:	f7ff fff8 	bl	dd132 <_ZN5Print5printEc>
  n += print('\n');
   dd142:	210a      	movs	r1, #10
  size_t n = print('\r');
   dd144:	4604      	mov	r4, r0
  n += print('\n');
   dd146:	4628      	mov	r0, r5
   dd148:	f7ff fff3 	bl	dd132 <_ZN5Print5printEc>
  return n;
}
   dd14c:	4420      	add	r0, r4
   dd14e:	bd38      	pop	{r3, r4, r5, pc}

000dd150 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   dd150:	b530      	push	{r4, r5, lr}
   dd152:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   dd154:	2300      	movs	r3, #0
   dd156:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   dd15a:	2a01      	cmp	r2, #1
   dd15c:	bf98      	it	ls
   dd15e:	220a      	movls	r2, #10
   dd160:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   dd162:	460d      	mov	r5, r1
   dd164:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   dd168:	fb01 5312 	mls	r3, r1, r2, r5
   dd16c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dd170:	2b09      	cmp	r3, #9
   dd172:	bf94      	ite	ls
   dd174:	3330      	addls	r3, #48	; 0x30
   dd176:	3337      	addhi	r3, #55	; 0x37
   dd178:	b2db      	uxtb	r3, r3
  } while(n);
   dd17a:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dd17c:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   dd180:	d9ef      	bls.n	dd162 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   dd182:	4621      	mov	r1, r4
   dd184:	f7ff ffbf 	bl	dd106 <_ZN5Print5writeEPKc>
}
   dd188:	b00b      	add	sp, #44	; 0x2c
   dd18a:	bd30      	pop	{r4, r5, pc}

000dd18c <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   dd18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd190:	b086      	sub	sp, #24
   dd192:	af00      	add	r7, sp, #0
   dd194:	4605      	mov	r5, r0
   dd196:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   dd198:	1d38      	adds	r0, r7, #4
   dd19a:	2114      	movs	r1, #20
{
   dd19c:	4614      	mov	r4, r2
    va_copy(args2, args);
   dd19e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   dd1a0:	f7fd fdfe 	bl	dada0 <vsnprintf>

    if (n<bufsize)
   dd1a4:	2813      	cmp	r0, #19
   dd1a6:	d80e      	bhi.n	dd1c6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   dd1a8:	1d39      	adds	r1, r7, #4
   dd1aa:	4628      	mov	r0, r5
   dd1ac:	f7ff ffab 	bl	dd106 <_ZN5Print5writeEPKc>
   dd1b0:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   dd1b2:	b11e      	cbz	r6, dd1bc <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   dd1b4:	4628      	mov	r0, r5
   dd1b6:	f7ff ffbf 	bl	dd138 <_ZN5Print7printlnEv>
   dd1ba:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   dd1bc:	4620      	mov	r0, r4
   dd1be:	3718      	adds	r7, #24
   dd1c0:	46bd      	mov	sp, r7
   dd1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   dd1c6:	f100 0308 	add.w	r3, r0, #8
   dd1ca:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   dd1ce:	46e8      	mov	r8, sp
        char bigger[n+1];
   dd1d0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   dd1d4:	4622      	mov	r2, r4
   dd1d6:	1c41      	adds	r1, r0, #1
   dd1d8:	683b      	ldr	r3, [r7, #0]
   dd1da:	4668      	mov	r0, sp
   dd1dc:	f7fd fde0 	bl	dada0 <vsnprintf>
  return write(str);
   dd1e0:	4669      	mov	r1, sp
   dd1e2:	4628      	mov	r0, r5
   dd1e4:	f7ff ff8f 	bl	dd106 <_ZN5Print5writeEPKc>
   dd1e8:	4604      	mov	r4, r0
   dd1ea:	46c5      	mov	sp, r8
   dd1ec:	e7e1      	b.n	dd1b2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000dd1ee <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   dd1ee:	b510      	push	{r4, lr}
  if (0 == max) {
   dd1f0:	4604      	mov	r4, r0
   dd1f2:	b128      	cbz	r0, dd200 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   dd1f4:	f001 fbe0 	bl	de9b8 <rand>
   dd1f8:	fb90 f3f4 	sdiv	r3, r0, r4
   dd1fc:	fb03 0414 	mls	r4, r3, r4, r0
}
   dd200:	4620      	mov	r0, r4
   dd202:	bd10      	pop	{r4, pc}

000dd204 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   dd204:	4288      	cmp	r0, r1
{
   dd206:	b510      	push	{r4, lr}
   dd208:	4604      	mov	r4, r0
  if (min >= max) {
   dd20a:	da03      	bge.n	dd214 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   dd20c:	1a08      	subs	r0, r1, r0
   dd20e:	f7ff ffee 	bl	dd1ee <_Z6randomi>
   dd212:	4404      	add	r4, r0
}
   dd214:	4620      	mov	r0, r4
   dd216:	bd10      	pop	{r4, pc}

000dd218 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   dd218:	4b01      	ldr	r3, [pc, #4]	; (dd220 <_GLOBAL__sub_I_RGB+0x8>)
   dd21a:	2200      	movs	r2, #0
   dd21c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   dd21e:	4770      	bx	lr
   dd220:	2003e5a4 	.word	0x2003e5a4

000dd224 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   dd224:	2100      	movs	r1, #0
   dd226:	f7fd bb29 	b.w	da87c <hal_spi_acquire>

000dd22a <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   dd22a:	2100      	movs	r1, #0
   dd22c:	f7fd bb2e 	b.w	da88c <hal_spi_release>

000dd230 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   dd230:	b510      	push	{r4, lr}
   dd232:	4604      	mov	r4, r0
   dd234:	4608      	mov	r0, r1
{
    _spi = spi;
   dd236:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   dd238:	f7fd fb00 	bl	da83c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   dd23c:	2300      	movs	r3, #0
   dd23e:	6063      	str	r3, [r4, #4]
}
   dd240:	4620      	mov	r0, r4
   dd242:	bd10      	pop	{r4, pc}

000dd244 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   dd244:	b510      	push	{r4, lr}
   dd246:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   dd248:	7800      	ldrb	r0, [r0, #0]
   dd24a:	f7ff ffeb 	bl	dd224 <_ZN8SPIClass4lockEv.isra.0>
   dd24e:	b948      	cbnz	r0, dd264 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   dd250:	7820      	ldrb	r0, [r4, #0]
   dd252:	f64f 71ff 	movw	r1, #65535	; 0xffff
   dd256:	f7fd fad9 	bl	da80c <hal_spi_begin>
        unlock();
   dd25a:	7820      	ldrb	r0, [r4, #0]
    }
}
   dd25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   dd260:	f7ff bfe3 	b.w	dd22a <_ZN8SPIClass6unlockEv.isra.0>
}
   dd264:	bd10      	pop	{r4, pc}

000dd266 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   dd266:	b510      	push	{r4, lr}
   dd268:	4604      	mov	r4, r0
    if (!lock())
   dd26a:	7800      	ldrb	r0, [r0, #0]
   dd26c:	f7ff ffda 	bl	dd224 <_ZN8SPIClass4lockEv.isra.0>
   dd270:	b938      	cbnz	r0, dd282 <_ZN8SPIClass3endEv+0x1c>
    {
        hal_spi_end(_spi);
   dd272:	7820      	ldrb	r0, [r4, #0]
   dd274:	f7fd fad2 	bl	da81c <hal_spi_end>
        unlock();
   dd278:	7820      	ldrb	r0, [r4, #0]
    }
}
   dd27a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   dd27e:	f7ff bfd4 	b.w	dd22a <_ZN8SPIClass6unlockEv.isra.0>
}
   dd282:	bd10      	pop	{r4, pc}

000dd284 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   dd284:	7800      	ldrb	r0, [r0, #0]
   dd286:	f7ff bfd0 	b.w	dd22a <_ZN8SPIClass6unlockEv.isra.0>
	...

000dd28c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   dd28c:	0840      	lsrs	r0, r0, #1
{
   dd28e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   dd290:	6018      	str	r0, [r3, #0]
   dd292:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   dd294:	6818      	ldr	r0, [r3, #0]
   dd296:	4288      	cmp	r0, r1
   dd298:	b2e5      	uxtb	r5, r4
   dd29a:	d906      	bls.n	dd2aa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   dd29c:	3401      	adds	r4, #1
   dd29e:	2c08      	cmp	r4, #8
   dd2a0:	d002      	beq.n	dd2a8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   dd2a2:	0840      	lsrs	r0, r0, #1
   dd2a4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   dd2a6:	e7f5      	b.n	dd294 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   dd2a8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   dd2aa:	4b02      	ldr	r3, [pc, #8]	; (dd2b4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   dd2ac:	5d5b      	ldrb	r3, [r3, r5]
   dd2ae:	7013      	strb	r3, [r2, #0]
}
   dd2b0:	bd30      	pop	{r4, r5, pc}
   dd2b2:	bf00      	nop
   dd2b4:	000e025c 	.word	0x000e025c

000dd2b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   dd2b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dd2bc:	4606      	mov	r6, r0
   dd2be:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   dd2c0:	7800      	ldrb	r0, [r0, #0]
{
   dd2c2:	460c      	mov	r4, r1
    CHECK(lock());
   dd2c4:	f7ff ffae 	bl	dd224 <_ZN8SPIClass4lockEv.isra.0>
   dd2c8:	2800      	cmp	r0, #0
   dd2ca:	db1b      	blt.n	dd304 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   dd2cc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   dd2ce:	2214      	movs	r2, #20
   dd2d0:	2100      	movs	r1, #0
   dd2d2:	a809      	add	r0, sp, #36	; 0x24
   dd2d4:	f001 fb44 	bl	de960 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   dd2d8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   dd2da:	2200      	movs	r2, #0
   dd2dc:	a909      	add	r1, sp, #36	; 0x24
   dd2de:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   dd2e0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   dd2e4:	f7fd faba 	bl	da85c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   dd2e8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   dd2ec:	b113      	cbz	r3, dd2f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   dd2ee:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   dd2f2:	b155      	cbz	r5, dd30a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   dd2f4:	2700      	movs	r7, #0
   dd2f6:	46b9      	mov	r9, r7
   dd2f8:	46b8      	mov	r8, r7
   dd2fa:	2501      	movs	r5, #1
    if (default_ && other.default_)
   dd2fc:	7923      	ldrb	r3, [r4, #4]
   dd2fe:	b15d      	cbz	r5, dd318 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   dd300:	b1c3      	cbz	r3, dd334 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   dd302:	2000      	movs	r0, #0
}
   dd304:	b00f      	add	sp, #60	; 0x3c
   dd306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   dd30a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   dd30e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   dd312:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   dd316:	e7f1      	b.n	dd2fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   dd318:	2b00      	cmp	r3, #0
   dd31a:	d135      	bne.n	dd388 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   dd31c:	68a3      	ldr	r3, [r4, #8]
   dd31e:	4543      	cmp	r3, r8
   dd320:	d108      	bne.n	dd334 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   dd322:	f88d 9020 	strb.w	r9, [sp, #32]
   dd326:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   dd32a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   dd32e:	89a3      	ldrh	r3, [r4, #12]
   dd330:	429a      	cmp	r2, r3
   dd332:	d0e6      	beq.n	dd302 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   dd334:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   dd336:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   dd338:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   dd33c:	980a      	ldr	r0, [sp, #40]	; 0x28
   dd33e:	ab04      	add	r3, sp, #16
   dd340:	f10d 020f 	add.w	r2, sp, #15
   dd344:	f7ff ffa2 	bl	dd28c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   dd348:	7921      	ldrb	r1, [r4, #4]
   dd34a:	b985      	cbnz	r5, dd36e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   dd34c:	b989      	cbnz	r1, dd372 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   dd34e:	68a3      	ldr	r3, [r4, #8]
   dd350:	4543      	cmp	r3, r8
   dd352:	d30e      	bcc.n	dd372 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   dd354:	f88d 9020 	strb.w	r9, [sp, #32]
   dd358:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   dd35c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   dd360:	89a3      	ldrh	r3, [r4, #12]
   dd362:	429a      	cmp	r2, r3
   dd364:	d105      	bne.n	dd372 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   dd366:	9b04      	ldr	r3, [sp, #16]
   dd368:	4543      	cmp	r3, r8
   dd36a:	d102      	bne.n	dd372 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   dd36c:	e7c9      	b.n	dd302 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   dd36e:	2900      	cmp	r1, #0
   dd370:	d1f9      	bne.n	dd366 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   dd372:	2300      	movs	r3, #0
   dd374:	9301      	str	r3, [sp, #4]
   dd376:	7b63      	ldrb	r3, [r4, #13]
   dd378:	9300      	str	r3, [sp, #0]
   dd37a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   dd37e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   dd380:	7830      	ldrb	r0, [r6, #0]
   dd382:	f7fd fa73 	bl	da86c <hal_spi_set_settings>
   dd386:	e7bc      	b.n	dd302 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   dd388:	e9cd 5500 	strd	r5, r5, [sp]
   dd38c:	462b      	mov	r3, r5
   dd38e:	462a      	mov	r2, r5
   dd390:	2101      	movs	r1, #1
   dd392:	e7f5      	b.n	dd380 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000dd394 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   dd394:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   dd396:	7800      	ldrb	r0, [r0, #0]
   dd398:	f7fd fa48 	bl	da82c <hal_spi_transfer>
}
   dd39c:	b2c0      	uxtb	r0, r0
   dd39e:	bd08      	pop	{r3, pc}

000dd3a0 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   dd3a0:	4770      	bx	lr

000dd3a2 <_ZN8SPIClass15detachInterruptEv>:
   dd3a2:	4770      	bx	lr

000dd3a4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   dd3a4:	b510      	push	{r4, lr}
   dd3a6:	4604      	mov	r4, r0
{
	free(buffer);
   dd3a8:	6800      	ldr	r0, [r0, #0]
   dd3aa:	f7fd fcd1 	bl	dad50 <free>
}
   dd3ae:	4620      	mov	r0, r4
   dd3b0:	bd10      	pop	{r4, pc}

000dd3b2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   dd3b2:	b510      	push	{r4, lr}
   dd3b4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   dd3b6:	6800      	ldr	r0, [r0, #0]
   dd3b8:	b108      	cbz	r0, dd3be <_ZN6String10invalidateEv+0xc>
   dd3ba:	f7fd fcc9 	bl	dad50 <free>
	buffer = NULL;
   dd3be:	2300      	movs	r3, #0
	capacity = len = 0;
   dd3c0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   dd3c4:	6023      	str	r3, [r4, #0]
}
   dd3c6:	bd10      	pop	{r4, pc}

000dd3c8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   dd3c8:	b538      	push	{r3, r4, r5, lr}
   dd3ca:	4604      	mov	r4, r0
   dd3cc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   dd3ce:	6800      	ldr	r0, [r0, #0]
   dd3d0:	3101      	adds	r1, #1
   dd3d2:	f7fd fcc5 	bl	dad60 <realloc>
	if (newbuffer) {
   dd3d6:	b110      	cbz	r0, dd3de <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   dd3d8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   dd3dc:	2001      	movs	r0, #1
	}
	return 0;
}
   dd3de:	bd38      	pop	{r3, r4, r5, pc}

000dd3e0 <_ZN6String7reserveEj>:
{
   dd3e0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   dd3e2:	6803      	ldr	r3, [r0, #0]
{
   dd3e4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   dd3e6:	b123      	cbz	r3, dd3f2 <_ZN6String7reserveEj+0x12>
   dd3e8:	6843      	ldr	r3, [r0, #4]
   dd3ea:	428b      	cmp	r3, r1
   dd3ec:	d301      	bcc.n	dd3f2 <_ZN6String7reserveEj+0x12>
   dd3ee:	2001      	movs	r0, #1
}
   dd3f0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   dd3f2:	4620      	mov	r0, r4
   dd3f4:	f7ff ffe8 	bl	dd3c8 <_ZN6String12changeBufferEj>
   dd3f8:	2800      	cmp	r0, #0
   dd3fa:	d0f9      	beq.n	dd3f0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   dd3fc:	68a3      	ldr	r3, [r4, #8]
   dd3fe:	2b00      	cmp	r3, #0
   dd400:	d1f5      	bne.n	dd3ee <_ZN6String7reserveEj+0xe>
   dd402:	6822      	ldr	r2, [r4, #0]
   dd404:	7013      	strb	r3, [r2, #0]
   dd406:	e7f2      	b.n	dd3ee <_ZN6String7reserveEj+0xe>

000dd408 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dd408:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dd40a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   dd40c:	4611      	mov	r1, r2
   dd40e:	9201      	str	r2, [sp, #4]
{
   dd410:	4604      	mov	r4, r0
	if (!reserve(length)) {
   dd412:	f7ff ffe5 	bl	dd3e0 <_ZN6String7reserveEj>
   dd416:	9a01      	ldr	r2, [sp, #4]
   dd418:	b928      	cbnz	r0, dd426 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   dd41a:	4620      	mov	r0, r4
   dd41c:	f7ff ffc9 	bl	dd3b2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   dd420:	4620      	mov	r0, r4
   dd422:	b003      	add	sp, #12
   dd424:	bd30      	pop	{r4, r5, pc}
	len = length;
   dd426:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   dd428:	4629      	mov	r1, r5
   dd42a:	6820      	ldr	r0, [r4, #0]
   dd42c:	f001 fa70 	bl	de910 <memcpy>
	buffer[len] = 0;
   dd430:	6822      	ldr	r2, [r4, #0]
   dd432:	68a3      	ldr	r3, [r4, #8]
   dd434:	2100      	movs	r1, #0
   dd436:	54d1      	strb	r1, [r2, r3]
	return *this;
   dd438:	e7f2      	b.n	dd420 <_ZN6String4copyEPKcj+0x18>

000dd43a <_ZN6StringC1EPKc>:
	buffer = NULL;
   dd43a:	2300      	movs	r3, #0
String::String(const char *cstr)
   dd43c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   dd43e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   dd442:	4604      	mov	r4, r0
	len = 0;
   dd444:	6083      	str	r3, [r0, #8]
	flags = 0;
   dd446:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   dd448:	b141      	cbz	r1, dd45c <_ZN6StringC1EPKc+0x22>
   dd44a:	4608      	mov	r0, r1
   dd44c:	9101      	str	r1, [sp, #4]
   dd44e:	f001 fb2e 	bl	deaae <strlen>
   dd452:	9901      	ldr	r1, [sp, #4]
   dd454:	4602      	mov	r2, r0
   dd456:	4620      	mov	r0, r4
   dd458:	f7ff ffd6 	bl	dd408 <_ZN6String4copyEPKcj>
}
   dd45c:	4620      	mov	r0, r4
   dd45e:	b002      	add	sp, #8
   dd460:	bd10      	pop	{r4, pc}

000dd462 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   dd462:	b538      	push	{r3, r4, r5, lr}
   dd464:	4605      	mov	r5, r0
	if (buffer) {
   dd466:	6800      	ldr	r0, [r0, #0]
{
   dd468:	460c      	mov	r4, r1
	if (buffer) {
   dd46a:	b168      	cbz	r0, dd488 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   dd46c:	686a      	ldr	r2, [r5, #4]
   dd46e:	688b      	ldr	r3, [r1, #8]
   dd470:	429a      	cmp	r2, r3
   dd472:	d307      	bcc.n	dd484 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   dd474:	6809      	ldr	r1, [r1, #0]
   dd476:	f001 faf4 	bl	dea62 <strcpy>
			len = rhs.len;
   dd47a:	68a3      	ldr	r3, [r4, #8]
   dd47c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   dd47e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   dd480:	60a3      	str	r3, [r4, #8]
}
   dd482:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   dd484:	f7fd fc64 	bl	dad50 <free>
	buffer = rhs.buffer;
   dd488:	6823      	ldr	r3, [r4, #0]
   dd48a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   dd48c:	6863      	ldr	r3, [r4, #4]
   dd48e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   dd490:	68a3      	ldr	r3, [r4, #8]
   dd492:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   dd494:	2300      	movs	r3, #0
	rhs.capacity = 0;
   dd496:	e9c4 3300 	strd	r3, r3, [r4]
   dd49a:	e7f1      	b.n	dd480 <_ZN6String4moveERS_+0x1e>

000dd49c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   dd49c:	b510      	push	{r4, lr}
	buffer = NULL;
   dd49e:	2300      	movs	r3, #0
	capacity = 0;
   dd4a0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   dd4a4:	4604      	mov	r4, r0
	len = 0;
   dd4a6:	6083      	str	r3, [r0, #8]
	flags = 0;
   dd4a8:	7303      	strb	r3, [r0, #12]
	move(rval);
   dd4aa:	f7ff ffda 	bl	dd462 <_ZN6String4moveERS_>
}
   dd4ae:	4620      	mov	r0, r4
   dd4b0:	bd10      	pop	{r4, pc}

000dd4b2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   dd4b2:	4288      	cmp	r0, r1
{
   dd4b4:	b510      	push	{r4, lr}
   dd4b6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   dd4b8:	d005      	beq.n	dd4c6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   dd4ba:	680b      	ldr	r3, [r1, #0]
   dd4bc:	b12b      	cbz	r3, dd4ca <_ZN6StringaSERKS_+0x18>
   dd4be:	688a      	ldr	r2, [r1, #8]
   dd4c0:	4619      	mov	r1, r3
   dd4c2:	f7ff ffa1 	bl	dd408 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   dd4c6:	4620      	mov	r0, r4
   dd4c8:	bd10      	pop	{r4, pc}
	else invalidate();
   dd4ca:	f7ff ff72 	bl	dd3b2 <_ZN6String10invalidateEv>
   dd4ce:	e7fa      	b.n	dd4c6 <_ZN6StringaSERKS_+0x14>

000dd4d0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   dd4d0:	b510      	push	{r4, lr}
	buffer = NULL;
   dd4d2:	2300      	movs	r3, #0
String::String(const String &value)
   dd4d4:	4604      	mov	r4, r0
	capacity = 0;
   dd4d6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   dd4da:	6083      	str	r3, [r0, #8]
	flags = 0;
   dd4dc:	7303      	strb	r3, [r0, #12]
	*this = value;
   dd4de:	f7ff ffe8 	bl	dd4b2 <_ZN6StringaSERKS_>
}
   dd4e2:	4620      	mov	r0, r4
   dd4e4:	bd10      	pop	{r4, pc}

000dd4e6 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   dd4e6:	4288      	cmp	r0, r1
{
   dd4e8:	b510      	push	{r4, lr}
   dd4ea:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   dd4ec:	d001      	beq.n	dd4f2 <_ZN6StringaSEOS_+0xc>
   dd4ee:	f7ff ffb8 	bl	dd462 <_ZN6String4moveERS_>
	return *this;
}
   dd4f2:	4620      	mov	r0, r4
   dd4f4:	bd10      	pop	{r4, pc}

000dd4f6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   dd4f6:	b513      	push	{r0, r1, r4, lr}
   dd4f8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   dd4fa:	b159      	cbz	r1, dd514 <_ZN6StringaSEPKc+0x1e>
   dd4fc:	4608      	mov	r0, r1
   dd4fe:	9101      	str	r1, [sp, #4]
   dd500:	f001 fad5 	bl	deaae <strlen>
   dd504:	9901      	ldr	r1, [sp, #4]
   dd506:	4602      	mov	r2, r0
   dd508:	4620      	mov	r0, r4
   dd50a:	f7ff ff7d 	bl	dd408 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   dd50e:	4620      	mov	r0, r4
   dd510:	b002      	add	sp, #8
   dd512:	bd10      	pop	{r4, pc}
	else invalidate();
   dd514:	f7ff ff4d 	bl	dd3b2 <_ZN6String10invalidateEv>
   dd518:	e7f9      	b.n	dd50e <_ZN6StringaSEPKc+0x18>

000dd51a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   dd51a:	b570      	push	{r4, r5, r6, lr}
   dd51c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   dd51e:	460e      	mov	r6, r1
   dd520:	b909      	cbnz	r1, dd526 <_ZN6String6concatEPKcj+0xc>
   dd522:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   dd524:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   dd526:	b16a      	cbz	r2, dd544 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   dd528:	6884      	ldr	r4, [r0, #8]
   dd52a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   dd52c:	4621      	mov	r1, r4
   dd52e:	f7ff ff57 	bl	dd3e0 <_ZN6String7reserveEj>
   dd532:	2800      	cmp	r0, #0
   dd534:	d0f5      	beq.n	dd522 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   dd536:	6828      	ldr	r0, [r5, #0]
   dd538:	68ab      	ldr	r3, [r5, #8]
   dd53a:	4631      	mov	r1, r6
   dd53c:	4418      	add	r0, r3
   dd53e:	f001 fa90 	bl	dea62 <strcpy>
	len = newlen;
   dd542:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   dd544:	2001      	movs	r0, #1
   dd546:	e7ed      	b.n	dd524 <_ZN6String6concatEPKcj+0xa>

000dd548 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   dd548:	b513      	push	{r0, r1, r4, lr}
   dd54a:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   dd54c:	4608      	mov	r0, r1
	if (!cstr) return 0;
   dd54e:	b151      	cbz	r1, dd566 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   dd550:	9101      	str	r1, [sp, #4]
   dd552:	f001 faac 	bl	deaae <strlen>
   dd556:	9901      	ldr	r1, [sp, #4]
   dd558:	4602      	mov	r2, r0
   dd55a:	4620      	mov	r0, r4
}
   dd55c:	b002      	add	sp, #8
   dd55e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   dd562:	f7ff bfda 	b.w	dd51a <_ZN6String6concatEPKcj>
}
   dd566:	b002      	add	sp, #8
   dd568:	bd10      	pop	{r4, pc}

000dd56a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   dd56a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dd56c:	688a      	ldr	r2, [r1, #8]
   dd56e:	6809      	ldr	r1, [r1, #0]
{
   dd570:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dd572:	f7ff ffd2 	bl	dd51a <_ZN6String6concatEPKcj>
   dd576:	b910      	cbnz	r0, dd57e <_ZplRK15StringSumHelperRK6String+0x14>
   dd578:	4620      	mov	r0, r4
   dd57a:	f7ff ff1a 	bl	dd3b2 <_ZN6String10invalidateEv>
	return a;
}
   dd57e:	4620      	mov	r0, r4
   dd580:	bd10      	pop	{r4, pc}

000dd582 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   dd582:	b513      	push	{r0, r1, r4, lr}
   dd584:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dd586:	b929      	cbnz	r1, dd594 <_ZplRK15StringSumHelperPKc+0x12>
   dd588:	4620      	mov	r0, r4
   dd58a:	f7ff ff12 	bl	dd3b2 <_ZN6String10invalidateEv>
	return a;
}
   dd58e:	4620      	mov	r0, r4
   dd590:	b002      	add	sp, #8
   dd592:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dd594:	4608      	mov	r0, r1
   dd596:	9101      	str	r1, [sp, #4]
   dd598:	f001 fa89 	bl	deaae <strlen>
   dd59c:	9901      	ldr	r1, [sp, #4]
   dd59e:	4602      	mov	r2, r0
   dd5a0:	4620      	mov	r0, r4
   dd5a2:	f7ff ffba 	bl	dd51a <_ZN6String6concatEPKcj>
   dd5a6:	2800      	cmp	r0, #0
   dd5a8:	d0ee      	beq.n	dd588 <_ZplRK15StringSumHelperPKc+0x6>
   dd5aa:	e7f0      	b.n	dd58e <_ZplRK15StringSumHelperPKc+0xc>

000dd5ac <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   dd5ac:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dd5ae:	6882      	ldr	r2, [r0, #8]
   dd5b0:	b93a      	cbnz	r2, dd5c2 <_ZNK6String6equalsEPKc+0x16>
   dd5b2:	b121      	cbz	r1, dd5be <_ZNK6String6equalsEPKc+0x12>
   dd5b4:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   dd5b6:	fab0 f080 	clz	r0, r0
   dd5ba:	0940      	lsrs	r0, r0, #5
   dd5bc:	e000      	b.n	dd5c0 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dd5be:	2001      	movs	r0, #1
}
   dd5c0:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   dd5c2:	6800      	ldr	r0, [r0, #0]
   dd5c4:	b909      	cbnz	r1, dd5ca <_ZNK6String6equalsEPKc+0x1e>
   dd5c6:	7800      	ldrb	r0, [r0, #0]
   dd5c8:	e7f5      	b.n	dd5b6 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   dd5ca:	f001 fa40 	bl	dea4e <strcmp>
   dd5ce:	e7f2      	b.n	dd5b6 <_ZNK6String6equalsEPKc+0xa>

000dd5d0 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   dd5d0:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   dd5d2:	6883      	ldr	r3, [r0, #8]
   dd5d4:	688a      	ldr	r2, [r1, #8]
   dd5d6:	4293      	cmp	r3, r2
   dd5d8:	d30b      	bcc.n	dd5f2 <_ZNK6String8endsWithERKS_+0x22>
   dd5da:	6800      	ldr	r0, [r0, #0]
   dd5dc:	b140      	cbz	r0, dd5f0 <_ZNK6String8endsWithERKS_+0x20>
   dd5de:	6809      	ldr	r1, [r1, #0]
   dd5e0:	b149      	cbz	r1, dd5f6 <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   dd5e2:	1a9b      	subs	r3, r3, r2
   dd5e4:	4418      	add	r0, r3
   dd5e6:	f001 fa32 	bl	dea4e <strcmp>
   dd5ea:	fab0 f080 	clz	r0, r0
   dd5ee:	0940      	lsrs	r0, r0, #5
}
   dd5f0:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   dd5f2:	2000      	movs	r0, #0
   dd5f4:	e7fc      	b.n	dd5f0 <_ZNK6String8endsWithERKS_+0x20>
   dd5f6:	4608      	mov	r0, r1
   dd5f8:	e7fa      	b.n	dd5f0 <_ZNK6String8endsWithERKS_+0x20>
	...

000dd5fc <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   dd5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   dd5fe:	429a      	cmp	r2, r3
{
   dd600:	460f      	mov	r7, r1
   dd602:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   dd604:	490c      	ldr	r1, [pc, #48]	; (dd638 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   dd606:	bf88      	it	hi
   dd608:	4613      	movhi	r3, r2
{
   dd60a:	4614      	mov	r4, r2
   dd60c:	4606      	mov	r6, r0
	if (left > right) {
   dd60e:	bf84      	itt	hi
   dd610:	462c      	movhi	r4, r5
   dd612:	461d      	movhi	r5, r3
	String out;
   dd614:	f7ff ff11 	bl	dd43a <_ZN6StringC1EPKc>
	if (left > len) return out;
   dd618:	68ba      	ldr	r2, [r7, #8]
   dd61a:	42a2      	cmp	r2, r4
   dd61c:	d30a      	bcc.n	dd634 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   dd61e:	6839      	ldr	r1, [r7, #0]
   dd620:	42aa      	cmp	r2, r5
   dd622:	bf94      	ite	ls
   dd624:	ebc4 0202 	rsbls	r2, r4, r2
   dd628:	ebc4 0205 	rsbhi	r2, r4, r5
   dd62c:	4421      	add	r1, r4
   dd62e:	4630      	mov	r0, r6
   dd630:	f7ff feea 	bl	dd408 <_ZN6String4copyEPKcj>
	return out;
}
   dd634:	4630      	mov	r0, r6
   dd636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dd638:	000e0190 	.word	0x000e0190

000dd63c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   dd63c:	b40e      	push	{r1, r2, r3}
   dd63e:	b570      	push	{r4, r5, r6, lr}
   dd640:	b087      	sub	sp, #28
   dd642:	ad0b      	add	r5, sp, #44	; 0x2c
   dd644:	4604      	mov	r4, r0
   dd646:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dd64a:	9201      	str	r2, [sp, #4]
   dd64c:	462b      	mov	r3, r5
   dd64e:	2105      	movs	r1, #5
   dd650:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   dd652:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dd654:	f7fd fba4 	bl	dada0 <vsnprintf>
    va_end(marker);

    String result;
   dd658:	490b      	ldr	r1, [pc, #44]	; (dd688 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dd65a:	4606      	mov	r6, r0
    String result;
   dd65c:	4620      	mov	r0, r4
   dd65e:	f7ff feec 	bl	dd43a <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   dd662:	4631      	mov	r1, r6
   dd664:	4620      	mov	r0, r4
   dd666:	f7ff febb 	bl	dd3e0 <_ZN6String7reserveEj>
    if (result.buffer) {
   dd66a:	6820      	ldr	r0, [r4, #0]
   dd66c:	b130      	cbz	r0, dd67c <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dd66e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   dd670:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dd672:	462b      	mov	r3, r5
   dd674:	1c71      	adds	r1, r6, #1
   dd676:	f7fd fb93 	bl	dada0 <vsnprintf>
        va_end(marker);
        result.len = n;
   dd67a:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   dd67c:	4620      	mov	r0, r4
   dd67e:	b007      	add	sp, #28
   dd680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dd684:	b003      	add	sp, #12
   dd686:	4770      	bx	lr
   dd688:	000e0190 	.word	0x000e0190

000dd68c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   dd68c:	b510      	push	{r4, lr}
   dd68e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   dd690:	6800      	ldr	r0, [r0, #0]
   dd692:	b118      	cbz	r0, dd69c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   dd694:	f7fd fb5c 	bl	dad50 <free>
            wakeupSource_ = nullptr;
   dd698:	2300      	movs	r3, #0
   dd69a:	6023      	str	r3, [r4, #0]
        }
    }
   dd69c:	bd10      	pop	{r4, pc}

000dd69e <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dd69e:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   dd6a0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   dd6a4:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   dd6a6:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dd6a8:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   dd6aa:	f853 2f06 	ldr.w	r2, [r3, #6]!
   dd6ae:	f8c0 2006 	str.w	r2, [r0, #6]
   dd6b2:	889b      	ldrh	r3, [r3, #4]
   dd6b4:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dd6b6:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   dd6b8:	f7ff ffe8 	bl	dd68c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   dd6bc:	682b      	ldr	r3, [r5, #0]
   dd6be:	b113      	cbz	r3, dd6c6 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   dd6c0:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   dd6c2:	2300      	movs	r3, #0
   dd6c4:	602b      	str	r3, [r5, #0]
    }
   dd6c6:	4620      	mov	r0, r4
   dd6c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000dd6cc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   dd6cc:	b538      	push	{r3, r4, r5, lr}
   dd6ce:	460c      	mov	r4, r1
   dd6d0:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   dd6d2:	f7ff ffdb 	bl	dd68c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   dd6d6:	b144      	cbz	r4, dd6ea <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   dd6d8:	8820      	ldrh	r0, [r4, #0]
   dd6da:	f7fd fb31 	bl	dad40 <malloc>
   dd6de:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   dd6e0:	b128      	cbz	r0, dd6ee <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   dd6e2:	8822      	ldrh	r2, [r4, #0]
   dd6e4:	4621      	mov	r1, r4
   dd6e6:	f001 f913 	bl	de910 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   dd6ea:	2000      	movs	r0, #0
    }
   dd6ec:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   dd6ee:	4801      	ldr	r0, [pc, #4]	; (dd6f4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   dd6f0:	e7fc      	b.n	dd6ec <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   dd6f2:	bf00      	nop
   dd6f4:	fffffefc 	.word	0xfffffefc

000dd6f8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   dd6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd6fa:	4d2d      	ldr	r5, [pc, #180]	; (dd7b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   dd6fc:	7d0b      	ldrb	r3, [r1, #20]
   dd6fe:	4604      	mov	r4, r0
   dd700:	b08b      	sub	sp, #44	; 0x2c
   dd702:	4608      	mov	r0, r1
   dd704:	1daf      	adds	r7, r5, #6
   dd706:	2b00      	cmp	r3, #0
   dd708:	d038      	beq.n	dd77c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   dd70a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   dd70c:	791b      	ldrb	r3, [r3, #4]
   dd70e:	2b00      	cmp	r3, #0
   dd710:	d034      	beq.n	dd77c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   dd712:	2200      	movs	r2, #0
    SleepResult() {}
   dd714:	4b27      	ldr	r3, [pc, #156]	; (dd7b4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dd716:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   dd718:	a902      	add	r1, sp, #8
   dd71a:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   dd71c:	9202      	str	r2, [sp, #8]
   dd71e:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   dd722:	f88d 200e 	strb.w	r2, [sp, #14]
   dd726:	f7fd fa41 	bl	dabac <system_sleep_ext>
        compatResult_ = result.compatResult_;
   dd72a:	f8dd 300e 	ldr.w	r3, [sp, #14]
   dd72e:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   dd732:	b200      	sxth	r0, r0
   dd734:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   dd738:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   dd73c:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   dd73e:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   dd740:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dd742:	4628      	mov	r0, r5
   dd744:	f7ff ffc2 	bl	dd6cc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   dd748:	a802      	add	r0, sp, #8
   dd74a:	f7ff ff9f 	bl	dd68c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   dd74e:	2300      	movs	r3, #0
   dd750:	6023      	str	r3, [r4, #0]
   dd752:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   dd754:	71a3      	strb	r3, [r4, #6]
   dd756:	8123      	strh	r3, [r4, #8]
   dd758:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dd75c:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   dd75e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   dd762:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   dd764:	683b      	ldr	r3, [r7, #0]
   dd766:	f8c4 3006 	str.w	r3, [r4, #6]
   dd76a:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dd76c:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   dd76e:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   dd770:	4620      	mov	r0, r4
   dd772:	f7ff ffab 	bl	dd6cc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   dd776:	4620      	mov	r0, r4
   dd778:	b00b      	add	sp, #44	; 0x2c
   dd77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   dd77c:	2600      	movs	r6, #0
   dd77e:	2320      	movs	r3, #32
   dd780:	e9cd 3602 	strd	r3, r6, [sp, #8]
   dd784:	4b0c      	ldr	r3, [pc, #48]	; (dd7b8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   dd786:	9300      	str	r3, [sp, #0]
   dd788:	490c      	ldr	r1, [pc, #48]	; (dd7bc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   dd78a:	4633      	mov	r3, r6
   dd78c:	aa02      	add	r2, sp, #8
   dd78e:	2032      	movs	r0, #50	; 0x32
   dd790:	f7fd f97c 	bl	daa8c <log_message>
    SleepResult() {}
   dd794:	4b07      	ldr	r3, [pc, #28]	; (dd7b4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dd796:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   dd798:	a902      	add	r1, sp, #8
        error_ = error;
   dd79a:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   dd79e:	4804      	ldr	r0, [pc, #16]	; (dd7b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   dd7a0:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   dd7a2:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   dd7a6:	f8ad 300c 	strh.w	r3, [sp, #12]
   dd7aa:	f7ff ff78 	bl	dd69e <_ZN17SystemSleepResultaSEOS_>
   dd7ae:	e7cb      	b.n	dd748 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   dd7b0:	2003e5b4 	.word	0x2003e5b4
   dd7b4:	ffff0000 	.word	0xffff0000
   dd7b8:	000e026b 	.word	0x000e026b
   dd7bc:	000e0264 	.word	0x000e0264

000dd7c0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   dd7c0:	4b05      	ldr	r3, [pc, #20]	; (dd7d8 <_GLOBAL__sub_I_System+0x18>)
   dd7c2:	2202      	movs	r2, #2
   dd7c4:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   dd7c6:	4b05      	ldr	r3, [pc, #20]	; (dd7dc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   dd7c8:	4a05      	ldr	r2, [pc, #20]	; (dd7e0 <_GLOBAL__sub_I_System+0x20>)
   dd7ca:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   dd7cc:	2000      	movs	r0, #0
   dd7ce:	6018      	str	r0, [r3, #0]
   dd7d0:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   dd7d2:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   dd7d4:	f7fd b98c 	b.w	daaf0 <set_system_mode>
   dd7d8:	2003e5c0 	.word	0x2003e5c0
   dd7dc:	2003e5b4 	.word	0x2003e5b4
   dd7e0:	ffff0000 	.word	0xffff0000

000dd7e4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   dd7e4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dd7e6:	2000      	movs	r0, #0
   dd7e8:	f7fd fa22 	bl	dac30 <spark_sync_time_pending>
   dd7ec:	b128      	cbz	r0, dd7fa <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   dd7ee:	f7fd fa07 	bl	dac00 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   dd7f2:	f080 0001 	eor.w	r0, r0, #1
   dd7f6:	b2c0      	uxtb	r0, r0
    }
   dd7f8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dd7fa:	2001      	movs	r0, #1
   dd7fc:	e7fc      	b.n	dd7f8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000dd7fe <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   dd7fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   dd800:	4602      	mov	r2, r0
   dd802:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dd804:	4668      	mov	r0, sp
    struct timeval tv = {
   dd806:	2100      	movs	r1, #0
    };
   dd808:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   dd80c:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dd810:	f7fc ff34 	bl	da67c <hal_rtc_set_time>
   dd814:	4602      	mov	r2, r0
   dd816:	b910      	cbnz	r0, dd81e <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   dd818:	4601      	mov	r1, r0
   dd81a:	f7fd f9a1 	bl	dab60 <system_notify_time_changed>
    }
}
   dd81e:	b005      	add	sp, #20
   dd820:	f85d fb04 	ldr.w	pc, [sp], #4

000dd824 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dd824:	b530      	push	{r4, r5, lr}
   dd826:	4604      	mov	r4, r0
    t += time_zone_cache;
   dd828:	4818      	ldr	r0, [pc, #96]	; (dd88c <_ZN9TimeClass7timeStrEx+0x68>)
   dd82a:	e9d0 1000 	ldrd	r1, r0, [r0]
   dd82e:	1852      	adds	r2, r2, r1
   dd830:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   dd834:	4816      	ldr	r0, [pc, #88]	; (dd890 <_ZN9TimeClass7timeStrEx+0x6c>)
   dd836:	e9d0 1000 	ldrd	r1, r0, [r0]
   dd83a:	1852      	adds	r2, r2, r1
{
   dd83c:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   dd83e:	eb40 0303 	adc.w	r3, r0, r3
   dd842:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   dd846:	2224      	movs	r2, #36	; 0x24
   dd848:	eb0d 0002 	add.w	r0, sp, r2
   dd84c:	2100      	movs	r1, #0
   dd84e:	f001 f887 	bl	de960 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   dd852:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   dd854:	a909      	add	r1, sp, #36	; 0x24
   dd856:	4668      	mov	r0, sp
   dd858:	f7fd fad2 	bl	dae00 <localtime_r>
    char ascstr[26] = {};
   dd85c:	2216      	movs	r2, #22
   dd85e:	4629      	mov	r1, r5
   dd860:	a803      	add	r0, sp, #12
   dd862:	9502      	str	r5, [sp, #8]
   dd864:	f001 f87c 	bl	de960 <memset>
    asctime_r(&calendar_time, ascstr);
   dd868:	a902      	add	r1, sp, #8
   dd86a:	a809      	add	r0, sp, #36	; 0x24
   dd86c:	f001 f812 	bl	de894 <asctime_r>
    int len = strlen(ascstr);
   dd870:	a802      	add	r0, sp, #8
   dd872:	f001 f91c 	bl	deaae <strlen>
    ascstr[len-1] = 0; // remove final newline
   dd876:	ab12      	add	r3, sp, #72	; 0x48
   dd878:	4418      	add	r0, r3
    return String(ascstr);
   dd87a:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   dd87c:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   dd880:	4620      	mov	r0, r4
   dd882:	f7ff fdda 	bl	dd43a <_ZN6StringC1EPKc>
}
   dd886:	4620      	mov	r0, r4
   dd888:	b013      	add	sp, #76	; 0x4c
   dd88a:	bd30      	pop	{r4, r5, pc}
   dd88c:	2003e5d8 	.word	0x2003e5d8
   dd890:	2003e5d0 	.word	0x2003e5d0

000dd894 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dd894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd898:	b0a5      	sub	sp, #148	; 0x94
   dd89a:	4607      	mov	r7, r0
   dd89c:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dd89e:	a814      	add	r0, sp, #80	; 0x50
{
   dd8a0:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dd8a2:	223f      	movs	r2, #63	; 0x3f
{
   dd8a4:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dd8a6:	f001 f91c 	bl	deae2 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dd8aa:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dd8ac:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dd8ae:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dd8b2:	f001 f8fc 	bl	deaae <strlen>
   dd8b6:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   dd8b8:	bb5d      	cbnz	r5, dd912 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   dd8ba:	492a      	ldr	r1, [pc, #168]	; (dd964 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   dd8bc:	a803      	add	r0, sp, #12
   dd8be:	f001 f8d0 	bl	dea62 <strcpy>
   dd8c2:	ae14      	add	r6, sp, #80	; 0x50
{
   dd8c4:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dd8c6:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   dd8ca:	45ab      	cmp	fp, r5
   dd8cc:	d936      	bls.n	dd93c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   dd8ce:	46b1      	mov	r9, r6
   dd8d0:	f105 0a01 	add.w	sl, r5, #1
   dd8d4:	f819 3b01 	ldrb.w	r3, [r9], #1
   dd8d8:	2b25      	cmp	r3, #37	; 0x25
   dd8da:	d117      	bne.n	dd90c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   dd8dc:	7873      	ldrb	r3, [r6, #1]
   dd8de:	2b7a      	cmp	r3, #122	; 0x7a
   dd8e0:	d114      	bne.n	dd90c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   dd8e2:	a803      	add	r0, sp, #12
   dd8e4:	f001 f8e3 	bl	deaae <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dd8e8:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   dd8ea:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dd8ec:	1828      	adds	r0, r5, r0
   dd8ee:	4418      	add	r0, r3
   dd8f0:	ebab 0205 	sub.w	r2, fp, r5
   dd8f4:	1cb1      	adds	r1, r6, #2
   dd8f6:	f001 f80b 	bl	de910 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   dd8fa:	4622      	mov	r2, r4
   dd8fc:	a903      	add	r1, sp, #12
   dd8fe:	4630      	mov	r0, r6
   dd900:	f001 f806 	bl	de910 <memcpy>
            len = strlen(format_str);
   dd904:	a814      	add	r0, sp, #80	; 0x50
   dd906:	f001 f8d2 	bl	deaae <strlen>
   dd90a:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   dd90c:	464e      	mov	r6, r9
   dd90e:	4655      	mov	r5, sl
   dd910:	e7d9      	b.n	dd8c6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   dd912:	213c      	movs	r1, #60	; 0x3c
   dd914:	fb95 f3f1 	sdiv	r3, r5, r1
   dd918:	2b00      	cmp	r3, #0
   dd91a:	bfb8      	it	lt
   dd91c:	425b      	neglt	r3, r3
   dd91e:	fbb3 f2f1 	udiv	r2, r3, r1
   dd922:	fb01 3312 	mls	r3, r1, r2, r3
   dd926:	9300      	str	r3, [sp, #0]
   dd928:	4a0f      	ldr	r2, [pc, #60]	; (dd968 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   dd92a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dd92e:	2110      	movs	r1, #16
   dd930:	a803      	add	r0, sp, #12
   dd932:	fb95 f3f3 	sdiv	r3, r5, r3
   dd936:	f7fd fa2b 	bl	dad90 <snprintf>
   dd93a:	e7c2      	b.n	dd8c2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   dd93c:	2100      	movs	r1, #0
   dd93e:	222e      	movs	r2, #46	; 0x2e
   dd940:	a808      	add	r0, sp, #32
   dd942:	9107      	str	r1, [sp, #28]
   dd944:	f001 f80c 	bl	de960 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   dd948:	4643      	mov	r3, r8
   dd94a:	aa14      	add	r2, sp, #80	; 0x50
   dd94c:	2132      	movs	r1, #50	; 0x32
   dd94e:	a807      	add	r0, sp, #28
   dd950:	f7fd fa4e 	bl	dadf0 <strftime>
    return String(buf);
   dd954:	a907      	add	r1, sp, #28
   dd956:	4638      	mov	r0, r7
   dd958:	f7ff fd6f 	bl	dd43a <_ZN6StringC1EPKc>
}
   dd95c:	4638      	mov	r0, r7
   dd95e:	b025      	add	sp, #148	; 0x94
   dd960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd964:	000df94f 	.word	0x000df94f
   dd968:	000df951 	.word	0x000df951

000dd96c <_ZN9TimeClass6formatExPKc>:
{
   dd96c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd96e:	b08d      	sub	sp, #52	; 0x34
   dd970:	e9cd 2300 	strd	r2, r3, [sp]
   dd974:	9d12      	ldr	r5, [sp, #72]	; 0x48
   dd976:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   dd978:	b915      	cbnz	r5, dd980 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   dd97a:	4b19      	ldr	r3, [pc, #100]	; (dd9e0 <_ZN9TimeClass6formatExPKc+0x74>)
   dd97c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   dd97e:	b12d      	cbz	r5, dd98c <_ZN9TimeClass6formatExPKc+0x20>
   dd980:	4b18      	ldr	r3, [pc, #96]	; (dd9e4 <_ZN9TimeClass6formatExPKc+0x78>)
   dd982:	4628      	mov	r0, r5
   dd984:	6819      	ldr	r1, [r3, #0]
   dd986:	f001 f862 	bl	dea4e <strcmp>
   dd98a:	b938      	cbnz	r0, dd99c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   dd98c:	e9dd 2300 	ldrd	r2, r3, [sp]
   dd990:	4620      	mov	r0, r4
   dd992:	f7ff ff47 	bl	dd824 <_ZN9TimeClass7timeStrEx>
}
   dd996:	4620      	mov	r0, r4
   dd998:	b00d      	add	sp, #52	; 0x34
   dd99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   dd99c:	4e12      	ldr	r6, [pc, #72]	; (dd9e8 <_ZN9TimeClass6formatExPKc+0x7c>)
   dd99e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   dd9a0:	4f12      	ldr	r7, [pc, #72]	; (dd9ec <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   dd9a2:	e9d6 3200 	ldrd	r3, r2, [r6]
   dd9a6:	185b      	adds	r3, r3, r1
   dd9a8:	9901      	ldr	r1, [sp, #4]
   dd9aa:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   dd9ae:	e9d7 0100 	ldrd	r0, r1, [r7]
   dd9b2:	181b      	adds	r3, r3, r0
   dd9b4:	eb41 0202 	adc.w	r2, r1, r2
   dd9b8:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   dd9bc:	2100      	movs	r1, #0
   dd9be:	2224      	movs	r2, #36	; 0x24
   dd9c0:	a803      	add	r0, sp, #12
   dd9c2:	f000 ffcd 	bl	de960 <memset>
    localtime_r(&t, &calendar_time);
   dd9c6:	a903      	add	r1, sp, #12
   dd9c8:	4668      	mov	r0, sp
   dd9ca:	f7fd fa19 	bl	dae00 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   dd9ce:	6832      	ldr	r2, [r6, #0]
   dd9d0:	683b      	ldr	r3, [r7, #0]
   dd9d2:	a903      	add	r1, sp, #12
   dd9d4:	4413      	add	r3, r2
   dd9d6:	4620      	mov	r0, r4
   dd9d8:	462a      	mov	r2, r5
   dd9da:	f7ff ff5b 	bl	dd894 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   dd9de:	e7da      	b.n	dd996 <_ZN9TimeClass6formatExPKc+0x2a>
   dd9e0:	2003e5c8 	.word	0x2003e5c8
   dd9e4:	2003dc44 	.word	0x2003dc44
   dd9e8:	2003e5d8 	.word	0x2003e5d8
   dd9ec:	2003e5d0 	.word	0x2003e5d0

000dd9f0 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   dd9f0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   dd9f2:	2000      	movs	r0, #0
   dd9f4:	f7fc fe2a 	bl	da64c <hal_rtc_time_is_valid>
    if (rtcstate)
   dd9f8:	4604      	mov	r4, r0
   dd9fa:	b9a0      	cbnz	r0, dda26 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   dd9fc:	f7fd f870 	bl	daae0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   dda00:	2801      	cmp	r0, #1
   dda02:	d110      	bne.n	dda26 <_ZN9TimeClass7isValidEv+0x36>
   dda04:	4620      	mov	r0, r4
   dda06:	f7fd f8a3 	bl	dab50 <system_thread_get_state>
   dda0a:	b960      	cbnz	r0, dda26 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   dda0c:	f7ff feea 	bl	dd7e4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   dda10:	b910      	cbnz	r0, dda18 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   dda12:	f7fd f8e5 	bl	dabe0 <spark_process>
        while (_while() && !_condition()) {
   dda16:	e7f9      	b.n	dda0c <_ZN9TimeClass7isValidEv+0x1c>
   dda18:	f7ff fee4 	bl	dd7e4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   dda1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   dda20:	2000      	movs	r0, #0
   dda22:	f7fc be13 	b.w	da64c <hal_rtc_time_is_valid>
}
   dda26:	4620      	mov	r0, r4
   dda28:	bd10      	pop	{r4, pc}

000dda2a <_ZN9TimeClass3nowEv>:
{
   dda2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   dda2c:	f7ff ffe0 	bl	dd9f0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   dda30:	2210      	movs	r2, #16
   dda32:	2100      	movs	r1, #0
   dda34:	4668      	mov	r0, sp
   dda36:	f000 ff93 	bl	de960 <memset>
    hal_rtc_get_time(&tv, nullptr);
   dda3a:	2100      	movs	r1, #0
   dda3c:	4668      	mov	r0, sp
   dda3e:	f7fc fe15 	bl	da66c <hal_rtc_get_time>
}
   dda42:	9800      	ldr	r0, [sp, #0]
   dda44:	b005      	add	sp, #20
   dda46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dda4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   dda4c:	4b02      	ldr	r3, [pc, #8]	; (dda58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   dda4e:	681a      	ldr	r2, [r3, #0]
   dda50:	4b02      	ldr	r3, [pc, #8]	; (dda5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   dda52:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   dda54:	4770      	bx	lr
   dda56:	bf00      	nop
   dda58:	2003dc44 	.word	0x2003dc44
   dda5c:	2003e5c8 	.word	0x2003e5c8

000dda60 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   dda60:	4770      	bx	lr

000dda62 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dda62:	7441      	strb	r1, [r0, #17]
}
   dda64:	4770      	bx	lr

000dda66 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dda66:	4770      	bx	lr

000dda68 <_ZN11USARTSerial17availableForWriteEv>:
{
   dda68:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   dda6a:	7c00      	ldrb	r0, [r0, #16]
   dda6c:	f7fc ffb6 	bl	da9dc <hal_usart_available_data_for_write>
}
   dda70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dda74:	bd08      	pop	{r3, pc}

000dda76 <_ZN11USARTSerial9availableEv>:
{
   dda76:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   dda78:	7c00      	ldrb	r0, [r0, #16]
   dda7a:	f7fc ff87 	bl	da98c <hal_usart_available>
}
   dda7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dda82:	bd08      	pop	{r3, pc}

000dda84 <_ZN11USARTSerial4peekEv>:
{
   dda84:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   dda86:	7c00      	ldrb	r0, [r0, #16]
   dda88:	f7fc ff90 	bl	da9ac <hal_usart_peek>
}
   dda8c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dda90:	bd08      	pop	{r3, pc}

000dda92 <_ZN11USARTSerial4readEv>:
{
   dda92:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   dda94:	7c00      	ldrb	r0, [r0, #16]
   dda96:	f7fc ff81 	bl	da99c <hal_usart_read>
}
   dda9a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dda9e:	bd08      	pop	{r3, pc}

000ddaa0 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   ddaa0:	7c00      	ldrb	r0, [r0, #16]
   ddaa2:	f7fc bf8b 	b.w	da9bc <hal_usart_flush>

000ddaa6 <_ZN11USARTSerial5writeEh>:
{
   ddaa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ddaa8:	7c45      	ldrb	r5, [r0, #17]
{
   ddaaa:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ddaac:	b12d      	cbz	r5, ddaba <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   ddaae:	7c20      	ldrb	r0, [r4, #16]
}
   ddab0:	b003      	add	sp, #12
   ddab2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   ddab6:	f7fc bf61 	b.w	da97c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ddaba:	7c00      	ldrb	r0, [r0, #16]
   ddabc:	9101      	str	r1, [sp, #4]
   ddabe:	f7fc ff8d 	bl	da9dc <hal_usart_available_data_for_write>
   ddac2:	2800      	cmp	r0, #0
   ddac4:	9901      	ldr	r1, [sp, #4]
   ddac6:	dcf2      	bgt.n	ddaae <_ZN11USARTSerial5writeEh+0x8>
}
   ddac8:	4628      	mov	r0, r5
   ddaca:	b003      	add	sp, #12
   ddacc:	bd30      	pop	{r4, r5, pc}

000ddace <_ZN11USARTSerialD0Ev>:
   ddace:	b510      	push	{r4, lr}
   ddad0:	2114      	movs	r1, #20
   ddad2:	4604      	mov	r4, r0
   ddad4:	f000 fa90 	bl	ddff8 <_ZdlPvj>
   ddad8:	4620      	mov	r0, r4
   ddada:	bd10      	pop	{r4, pc}

000ddadc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   ddadc:	b510      	push	{r4, lr}
   ddade:	f04f 0c00 	mov.w	ip, #0
   ddae2:	4604      	mov	r4, r0
   ddae4:	4608      	mov	r0, r1
   ddae6:	4611      	mov	r1, r2
   ddae8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   ddaec:	e9c4 c201 	strd	ip, r2, [r4, #4]
   ddaf0:	4a04      	ldr	r2, [pc, #16]	; (ddb04 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   ddaf2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   ddaf4:	2201      	movs	r2, #1
  _serial = serial;
   ddaf6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ddaf8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   ddafa:	461a      	mov	r2, r3
   ddafc:	f7fc ff2e 	bl	da95c <hal_usart_init>
}
   ddb00:	4620      	mov	r0, r4
   ddb02:	bd10      	pop	{r4, pc}
   ddb04:	000e02b8 	.word	0x000e02b8

000ddb08 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   ddb08:	7c00      	ldrb	r0, [r0, #16]
   ddb0a:	2300      	movs	r3, #0
   ddb0c:	f7fc bf6e 	b.w	da9ec <hal_usart_begin_config>

000ddb10 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   ddb10:	2200      	movs	r2, #0
   ddb12:	f7ff bff9 	b.w	ddb08 <_ZN11USARTSerial5beginEmm>

000ddb16 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   ddb16:	7c00      	ldrb	r0, [r0, #16]
   ddb18:	f7fc bf28 	b.w	da96c <hal_usart_end>

000ddb1c <_Z22__fetch_global_Serial1v>:
{
   ddb1c:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   ddb1e:	4c0d      	ldr	r4, [pc, #52]	; (ddb54 <_Z22__fetch_global_Serial1v+0x38>)
   ddb20:	7821      	ldrb	r1, [r4, #0]
   ddb22:	f3bf 8f5b 	dmb	ish
   ddb26:	f011 0101 	ands.w	r1, r1, #1
   ddb2a:	d110      	bne.n	ddb4e <_Z22__fetch_global_Serial1v+0x32>
   ddb2c:	4620      	mov	r0, r4
   ddb2e:	9101      	str	r1, [sp, #4]
   ddb30:	f7f6 fac2 	bl	d40b8 <__cxa_guard_acquire>
   ddb34:	9901      	ldr	r1, [sp, #4]
   ddb36:	b150      	cbz	r0, ddb4e <_Z22__fetch_global_Serial1v+0x32>
   ddb38:	4b07      	ldr	r3, [pc, #28]	; (ddb58 <_Z22__fetch_global_Serial1v+0x3c>)
   ddb3a:	4a08      	ldr	r2, [pc, #32]	; (ddb5c <_Z22__fetch_global_Serial1v+0x40>)
   ddb3c:	4808      	ldr	r0, [pc, #32]	; (ddb60 <_Z22__fetch_global_Serial1v+0x44>)
   ddb3e:	f7ff ffcd 	bl	ddadc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   ddb42:	4620      	mov	r0, r4
   ddb44:	f7f6 fabd 	bl	d40c2 <__cxa_guard_release>
   ddb48:	4806      	ldr	r0, [pc, #24]	; (ddb64 <_Z22__fetch_global_Serial1v+0x48>)
   ddb4a:	f000 fec9 	bl	de8e0 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   ddb4e:	4804      	ldr	r0, [pc, #16]	; (ddb60 <_Z22__fetch_global_Serial1v+0x44>)
   ddb50:	b002      	add	sp, #8
   ddb52:	bd10      	pop	{r4, pc}
   ddb54:	2003e5e0 	.word	0x2003e5e0
   ddb58:	2003e668 	.word	0x2003e668
   ddb5c:	2003e5e4 	.word	0x2003e5e4
   ddb60:	2003e6ec 	.word	0x2003e6ec
   ddb64:	000dda67 	.word	0x000dda67

000ddb68 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ddb68:	7441      	strb	r1, [r0, #17]
}
   ddb6a:	4770      	bx	lr

000ddb6c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ddb6c:	4770      	bx	lr

000ddb6e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   ddb6e:	4770      	bx	lr

000ddb70 <_ZN9USBSerial4readEv>:
{
   ddb70:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   ddb72:	2100      	movs	r1, #0
   ddb74:	7c00      	ldrb	r0, [r0, #16]
   ddb76:	f7fc ff69 	bl	daa4c <HAL_USB_USART_Receive_Data>
}
   ddb7a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ddb7e:	bd08      	pop	{r3, pc}

000ddb80 <_ZN9USBSerial4peekEv>:
{
   ddb80:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   ddb82:	2101      	movs	r1, #1
   ddb84:	7c00      	ldrb	r0, [r0, #16]
   ddb86:	f7fc ff61 	bl	daa4c <HAL_USB_USART_Receive_Data>
}
   ddb8a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ddb8e:	bd08      	pop	{r3, pc}

000ddb90 <_ZN9USBSerial17availableForWriteEv>:
{
   ddb90:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   ddb92:	7c00      	ldrb	r0, [r0, #16]
   ddb94:	f7fc ff52 	bl	daa3c <HAL_USB_USART_Available_Data_For_Write>
}
   ddb98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ddb9c:	bd08      	pop	{r3, pc}

000ddb9e <_ZN9USBSerial9availableEv>:
{
   ddb9e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   ddba0:	7c00      	ldrb	r0, [r0, #16]
   ddba2:	f7fc ff43 	bl	daa2c <HAL_USB_USART_Available_Data>
}
   ddba6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ddbaa:	bd08      	pop	{r3, pc}

000ddbac <_ZN9USBSerial5writeEh>:
{
   ddbac:	b513      	push	{r0, r1, r4, lr}
   ddbae:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ddbb0:	7c00      	ldrb	r0, [r0, #16]
{
   ddbb2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ddbb4:	f7fc ff42 	bl	daa3c <HAL_USB_USART_Available_Data_For_Write>
   ddbb8:	2800      	cmp	r0, #0
   ddbba:	9901      	ldr	r1, [sp, #4]
   ddbbc:	dc01      	bgt.n	ddbc2 <_ZN9USBSerial5writeEh+0x16>
   ddbbe:	7c60      	ldrb	r0, [r4, #17]
   ddbc0:	b120      	cbz	r0, ddbcc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   ddbc2:	7c20      	ldrb	r0, [r4, #16]
   ddbc4:	f7fc ff4a 	bl	daa5c <HAL_USB_USART_Send_Data>
   ddbc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   ddbcc:	b002      	add	sp, #8
   ddbce:	bd10      	pop	{r4, pc}

000ddbd0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   ddbd0:	7c00      	ldrb	r0, [r0, #16]
   ddbd2:	f7fc bf4b 	b.w	daa6c <HAL_USB_USART_Flush_Data>

000ddbd6 <_ZN9USBSerialD0Ev>:
   ddbd6:	b510      	push	{r4, lr}
   ddbd8:	2114      	movs	r1, #20
   ddbda:	4604      	mov	r4, r0
   ddbdc:	f000 fa0c 	bl	ddff8 <_ZdlPvj>
   ddbe0:	4620      	mov	r0, r4
   ddbe2:	bd10      	pop	{r4, pc}

000ddbe4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   ddbe4:	b510      	push	{r4, lr}
   ddbe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ddbea:	4604      	mov	r4, r0
   ddbec:	4608      	mov	r0, r1
   ddbee:	2100      	movs	r1, #0
   ddbf0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ddbf4:	4b04      	ldr	r3, [pc, #16]	; (ddc08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   ddbf6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ddbf8:	2301      	movs	r3, #1
  _serial = serial;
   ddbfa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ddbfc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   ddbfe:	4611      	mov	r1, r2
   ddc00:	f7fc fefc 	bl	da9fc <HAL_USB_USART_Init>
}
   ddc04:	4620      	mov	r0, r4
   ddc06:	bd10      	pop	{r4, pc}
   ddc08:	000e02e8 	.word	0x000e02e8

000ddc0c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   ddc0c:	7c00      	ldrb	r0, [r0, #16]
   ddc0e:	2200      	movs	r2, #0
   ddc10:	f7fc befc 	b.w	daa0c <HAL_USB_USART_Begin>

000ddc14 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   ddc14:	7c00      	ldrb	r0, [r0, #16]
   ddc16:	f7fc bf01 	b.w	daa1c <HAL_USB_USART_End>

000ddc1a <_Z19acquireSerialBufferv>:
{
   ddc1a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   ddc1c:	2214      	movs	r2, #20
{
   ddc1e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   ddc20:	2100      	movs	r1, #0
   ddc22:	f000 fe9d 	bl	de960 <memset>
}
   ddc26:	4620      	mov	r0, r4
   ddc28:	bd10      	pop	{r4, pc}
	...

000ddc2c <_Z16_fetch_usbserialv>:
{
   ddc2c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ddc2e:	4c0f      	ldr	r4, [pc, #60]	; (ddc6c <_Z16_fetch_usbserialv+0x40>)
{
   ddc30:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   ddc32:	a803      	add	r0, sp, #12
   ddc34:	f7ff fff1 	bl	ddc1a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ddc38:	7821      	ldrb	r1, [r4, #0]
   ddc3a:	f3bf 8f5b 	dmb	ish
   ddc3e:	f011 0101 	ands.w	r1, r1, #1
   ddc42:	d10f      	bne.n	ddc64 <_Z16_fetch_usbserialv+0x38>
   ddc44:	4620      	mov	r0, r4
   ddc46:	9101      	str	r1, [sp, #4]
   ddc48:	f7f6 fa36 	bl	d40b8 <__cxa_guard_acquire>
   ddc4c:	9901      	ldr	r1, [sp, #4]
   ddc4e:	b148      	cbz	r0, ddc64 <_Z16_fetch_usbserialv+0x38>
   ddc50:	aa03      	add	r2, sp, #12
   ddc52:	4807      	ldr	r0, [pc, #28]	; (ddc70 <_Z16_fetch_usbserialv+0x44>)
   ddc54:	f7ff ffc6 	bl	ddbe4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   ddc58:	4620      	mov	r0, r4
   ddc5a:	f7f6 fa32 	bl	d40c2 <__cxa_guard_release>
   ddc5e:	4805      	ldr	r0, [pc, #20]	; (ddc74 <_Z16_fetch_usbserialv+0x48>)
   ddc60:	f000 fe3e 	bl	de8e0 <atexit>
	return _usbserial;
}
   ddc64:	4802      	ldr	r0, [pc, #8]	; (ddc70 <_Z16_fetch_usbserialv+0x44>)
   ddc66:	b008      	add	sp, #32
   ddc68:	bd10      	pop	{r4, pc}
   ddc6a:	bf00      	nop
   ddc6c:	2003e700 	.word	0x2003e700
   ddc70:	2003e704 	.word	0x2003e704
   ddc74:	000ddb6d 	.word	0x000ddb6d

000ddc78 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ddc78:	4b01      	ldr	r3, [pc, #4]	; (ddc80 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ddc7a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ddc7c:	4770      	bx	lr
   ddc7e:	bf00      	nop
   ddc80:	2003dc4c 	.word	0x2003dc4c

000ddc84 <serialEventRun>:
{
   ddc84:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   ddc86:	4b0b      	ldr	r3, [pc, #44]	; (ddcb4 <serialEventRun+0x30>)
   ddc88:	b143      	cbz	r3, ddc9c <serialEventRun+0x18>
   ddc8a:	f7ff ffcf 	bl	ddc2c <_Z16_fetch_usbserialv>
   ddc8e:	6803      	ldr	r3, [r0, #0]
   ddc90:	691b      	ldr	r3, [r3, #16]
   ddc92:	4798      	blx	r3
   ddc94:	2800      	cmp	r0, #0
   ddc96:	dd01      	ble.n	ddc9c <serialEventRun+0x18>
        serialEvent();
   ddc98:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   ddc9c:	4b06      	ldr	r3, [pc, #24]	; (ddcb8 <serialEventRun+0x34>)
   ddc9e:	b143      	cbz	r3, ddcb2 <serialEventRun+0x2e>
   ddca0:	f7ff ff3c 	bl	ddb1c <_Z22__fetch_global_Serial1v>
   ddca4:	6803      	ldr	r3, [r0, #0]
   ddca6:	691b      	ldr	r3, [r3, #16]
   ddca8:	4798      	blx	r3
   ddcaa:	2800      	cmp	r0, #0
   ddcac:	dd01      	ble.n	ddcb2 <serialEventRun+0x2e>
        serialEvent1();
   ddcae:	f3af 8000 	nop.w
}
   ddcb2:	bd08      	pop	{r3, pc}
	...

000ddcbc <_post_loop>:
{
   ddcbc:	b508      	push	{r3, lr}
	serialEventRun();
   ddcbe:	f7ff ffe1 	bl	ddc84 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   ddcc2:	f7fc fcbb 	bl	da63c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   ddcc6:	4b01      	ldr	r3, [pc, #4]	; (ddccc <_post_loop+0x10>)
   ddcc8:	6018      	str	r0, [r3, #0]
}
   ddcca:	bd08      	pop	{r3, pc}
   ddccc:	2003e720 	.word	0x2003e720

000ddcd0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ddcd0:	4805      	ldr	r0, [pc, #20]	; (ddce8 <_Z33system_initialize_user_backup_ramv+0x18>)
   ddcd2:	4a06      	ldr	r2, [pc, #24]	; (ddcec <_Z33system_initialize_user_backup_ramv+0x1c>)
   ddcd4:	4906      	ldr	r1, [pc, #24]	; (ddcf0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   ddcd6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ddcd8:	1a12      	subs	r2, r2, r0
   ddcda:	f000 fe19 	bl	de910 <memcpy>
    __backup_sram_signature = signature;
   ddcde:	4b05      	ldr	r3, [pc, #20]	; (ddcf4 <_Z33system_initialize_user_backup_ramv+0x24>)
   ddce0:	4a05      	ldr	r2, [pc, #20]	; (ddcf8 <_Z33system_initialize_user_backup_ramv+0x28>)
   ddce2:	601a      	str	r2, [r3, #0]
}
   ddce4:	bd08      	pop	{r3, pc}
   ddce6:	bf00      	nop
   ddce8:	2003f400 	.word	0x2003f400
   ddcec:	2003f404 	.word	0x2003f404
   ddcf0:	000e04b0 	.word	0x000e04b0
   ddcf4:	2003f400 	.word	0x2003f400
   ddcf8:	9a271c1e 	.word	0x9a271c1e

000ddcfc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ddcfc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ddcfe:	2300      	movs	r3, #0
   ddd00:	9300      	str	r3, [sp, #0]
   ddd02:	461a      	mov	r2, r3
   ddd04:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ddd08:	f7fc ff3c 	bl	dab84 <system_ctrl_set_result>
}
   ddd0c:	b003      	add	sp, #12
   ddd0e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ddd14 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ddd14:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ddd16:	8843      	ldrh	r3, [r0, #2]
   ddd18:	2b0a      	cmp	r3, #10
   ddd1a:	d008      	beq.n	ddd2e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ddd1c:	2b50      	cmp	r3, #80	; 0x50
   ddd1e:	d10b      	bne.n	ddd38 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ddd20:	4b09      	ldr	r3, [pc, #36]	; (ddd48 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ddd22:	681b      	ldr	r3, [r3, #0]
   ddd24:	b14b      	cbz	r3, ddd3a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ddd26:	b003      	add	sp, #12
   ddd28:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ddd2c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ddd2e:	f7ff ffe5 	bl	ddcfc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ddd32:	b003      	add	sp, #12
   ddd34:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ddd38:	2300      	movs	r3, #0
   ddd3a:	9300      	str	r3, [sp, #0]
   ddd3c:	461a      	mov	r2, r3
   ddd3e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ddd42:	f7fc ff1f 	bl	dab84 <system_ctrl_set_result>
}
   ddd46:	e7f4      	b.n	ddd32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ddd48:	2003e71c 	.word	0x2003e71c

000ddd4c <module_user_init_hook>:
{
   ddd4c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ddd4e:	4812      	ldr	r0, [pc, #72]	; (ddd98 <module_user_init_hook+0x4c>)
   ddd50:	2100      	movs	r1, #0
   ddd52:	f7fd f845 	bl	dade0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ddd56:	4b11      	ldr	r3, [pc, #68]	; (ddd9c <module_user_init_hook+0x50>)
   ddd58:	681a      	ldr	r2, [r3, #0]
   ddd5a:	4b11      	ldr	r3, [pc, #68]	; (ddda0 <module_user_init_hook+0x54>)
   ddd5c:	429a      	cmp	r2, r3
   ddd5e:	4b11      	ldr	r3, [pc, #68]	; (ddda4 <module_user_init_hook+0x58>)
   ddd60:	bf0c      	ite	eq
   ddd62:	2201      	moveq	r2, #1
   ddd64:	2200      	movne	r2, #0
   ddd66:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   ddd68:	d001      	beq.n	ddd6e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   ddd6a:	f7ff ffb1 	bl	ddcd0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ddd6e:	f7fc fc4d 	bl	da60c <HAL_RNG_GetRandomNumber>
   ddd72:	4604      	mov	r4, r0
    srand(seed);
   ddd74:	f000 fdfc 	bl	de970 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ddd78:	4b0b      	ldr	r3, [pc, #44]	; (ddda8 <module_user_init_hook+0x5c>)
   ddd7a:	b113      	cbz	r3, ddd82 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ddd7c:	4620      	mov	r0, r4
   ddd7e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ddd82:	2100      	movs	r1, #0
   ddd84:	4808      	ldr	r0, [pc, #32]	; (ddda8 <module_user_init_hook+0x5c>)
   ddd86:	f7fc ff6b 	bl	dac60 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ddd8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ddd8e:	4807      	ldr	r0, [pc, #28]	; (dddac <module_user_init_hook+0x60>)
   ddd90:	2100      	movs	r1, #0
   ddd92:	f7fc beed 	b.w	dab70 <system_ctrl_set_app_request_handler>
   ddd96:	bf00      	nop
   ddd98:	000ddc79 	.word	0x000ddc79
   ddd9c:	2003f400 	.word	0x2003f400
   ddda0:	9a271c1e 	.word	0x9a271c1e
   ddda4:	2003e718 	.word	0x2003e718
   ddda8:	00000000 	.word	0x00000000
   dddac:	000ddd15 	.word	0x000ddd15

000dddb0 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   dddb0:	b508      	push	{r3, lr}
   dddb2:	4b02      	ldr	r3, [pc, #8]	; (dddbc <spark_protocol_instance+0xc>)
   dddb4:	681b      	ldr	r3, [r3, #0]
   dddb6:	681b      	ldr	r3, [r3, #0]
   dddb8:	9301      	str	r3, [sp, #4]
   dddba:	bd08      	pop	{r3, pc}
   dddbc:	0003025c 	.word	0x0003025c

000dddc0 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   dddc0:	b508      	push	{r3, lr}
   dddc2:	4b02      	ldr	r3, [pc, #8]	; (dddcc <spark_protocol_set_product_id+0xc>)
   dddc4:	681b      	ldr	r3, [r3, #0]
   dddc6:	685b      	ldr	r3, [r3, #4]
   dddc8:	9301      	str	r3, [sp, #4]
   dddca:	bd08      	pop	{r3, pc}
   dddcc:	0003025c 	.word	0x0003025c

000dddd0 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   dddd0:	b508      	push	{r3, lr}
   dddd2:	4b02      	ldr	r3, [pc, #8]	; (ddddc <spark_protocol_set_product_firmware_version+0xc>)
   dddd4:	681b      	ldr	r3, [r3, #0]
   dddd6:	689b      	ldr	r3, [r3, #8]
   dddd8:	9301      	str	r3, [sp, #4]
   dddda:	bd08      	pop	{r3, pc}
   ddddc:	0003025c 	.word	0x0003025c

000ddde0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   ddde0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   ddde2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   ddde4:	d902      	bls.n	dddec <pinAvailable+0xc>
    return false;
   ddde6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   ddde8:	b002      	add	sp, #8
   dddea:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   dddec:	f1a0 030b 	sub.w	r3, r0, #11
   dddf0:	2b02      	cmp	r3, #2
   dddf2:	d81a      	bhi.n	dde2a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   dddf4:	4c17      	ldr	r4, [pc, #92]	; (dde54 <pinAvailable+0x74>)
   dddf6:	7821      	ldrb	r1, [r4, #0]
   dddf8:	f3bf 8f5b 	dmb	ish
   dddfc:	f011 0101 	ands.w	r1, r1, #1
   dde00:	d10b      	bne.n	dde1a <pinAvailable+0x3a>
   dde02:	4620      	mov	r0, r4
   dde04:	9101      	str	r1, [sp, #4]
   dde06:	f7f6 f957 	bl	d40b8 <__cxa_guard_acquire>
   dde0a:	9901      	ldr	r1, [sp, #4]
   dde0c:	b128      	cbz	r0, dde1a <pinAvailable+0x3a>
   dde0e:	4812      	ldr	r0, [pc, #72]	; (dde58 <pinAvailable+0x78>)
   dde10:	f7ff fa0e 	bl	dd230 <_ZN8SPIClassC1E19hal_spi_interface_t>
   dde14:	4620      	mov	r0, r4
   dde16:	f7f6 f954 	bl	d40c2 <__cxa_guard_release>
   dde1a:	4b0f      	ldr	r3, [pc, #60]	; (dde58 <pinAvailable+0x78>)
   dde1c:	7818      	ldrb	r0, [r3, #0]
   dde1e:	f7fc fd15 	bl	da84c <hal_spi_is_enabled>
   dde22:	2800      	cmp	r0, #0
   dde24:	d1df      	bne.n	ddde6 <pinAvailable+0x6>
  return true; // 'pin' is available
   dde26:	2001      	movs	r0, #1
   dde28:	e7de      	b.n	ddde8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   dde2a:	2801      	cmp	r0, #1
   dde2c:	d809      	bhi.n	dde42 <pinAvailable+0x62>
   dde2e:	f000 f89b 	bl	ddf68 <_Z19__fetch_global_Wirev>
   dde32:	2100      	movs	r1, #0
   dde34:	7c00      	ldrb	r0, [r0, #16]
   dde36:	f7fc fca9 	bl	da78c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   dde3a:	f080 0001 	eor.w	r0, r0, #1
   dde3e:	b2c0      	uxtb	r0, r0
   dde40:	e7d2      	b.n	ddde8 <pinAvailable+0x8>
   dde42:	3809      	subs	r0, #9
   dde44:	2801      	cmp	r0, #1
   dde46:	d8ee      	bhi.n	dde26 <pinAvailable+0x46>
   dde48:	f7ff fe68 	bl	ddb1c <_Z22__fetch_global_Serial1v>
   dde4c:	7c00      	ldrb	r0, [r0, #16]
   dde4e:	f7fc fdbd 	bl	da9cc <hal_usart_is_enabled>
   dde52:	e7f2      	b.n	dde3a <pinAvailable+0x5a>
   dde54:	2003e268 	.word	0x2003e268
   dde58:	2003e26c 	.word	0x2003e26c

000dde5c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dde5c:	2823      	cmp	r0, #35	; 0x23
{
   dde5e:	b538      	push	{r3, r4, r5, lr}
   dde60:	4604      	mov	r4, r0
   dde62:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dde64:	d80a      	bhi.n	dde7c <pinMode+0x20>
   dde66:	29ff      	cmp	r1, #255	; 0xff
   dde68:	d008      	beq.n	dde7c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   dde6a:	f7ff ffb9 	bl	ddde0 <pinAvailable>
   dde6e:	b128      	cbz	r0, dde7c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   dde70:	4629      	mov	r1, r5
   dde72:	4620      	mov	r0, r4
}
   dde74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   dde78:	f7fc bc10 	b.w	da69c <HAL_Pin_Mode>
}
   dde7c:	bd38      	pop	{r3, r4, r5, pc}

000dde7e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dde7e:	b538      	push	{r3, r4, r5, lr}
   dde80:	4604      	mov	r4, r0
   dde82:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dde84:	f7fc fc12 	bl	da6ac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dde88:	28ff      	cmp	r0, #255	; 0xff
   dde8a:	d010      	beq.n	ddeae <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   dde8c:	2806      	cmp	r0, #6
   dde8e:	d804      	bhi.n	dde9a <digitalWrite+0x1c>
   dde90:	234d      	movs	r3, #77	; 0x4d
   dde92:	fa23 f000 	lsr.w	r0, r3, r0
   dde96:	07c3      	lsls	r3, r0, #31
   dde98:	d409      	bmi.n	ddeae <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   dde9a:	4620      	mov	r0, r4
   dde9c:	f7ff ffa0 	bl	ddde0 <pinAvailable>
   ddea0:	b128      	cbz	r0, ddeae <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   ddea2:	4629      	mov	r1, r5
   ddea4:	4620      	mov	r0, r4
}
   ddea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   ddeaa:	f7fc bc07 	b.w	da6bc <HAL_GPIO_Write>
}
   ddeae:	bd38      	pop	{r3, r4, r5, pc}

000ddeb0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   ddeb0:	b510      	push	{r4, lr}
   ddeb2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   ddeb4:	f7fc fbfa 	bl	da6ac <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   ddeb8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   ddeba:	b2db      	uxtb	r3, r3
   ddebc:	2b01      	cmp	r3, #1
   ddebe:	d908      	bls.n	dded2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   ddec0:	4620      	mov	r0, r4
   ddec2:	f7ff ff8d 	bl	ddde0 <pinAvailable>
   ddec6:	b120      	cbz	r0, dded2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   ddec8:	4620      	mov	r0, r4
}
   ddeca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   ddece:	f7fc bbfd 	b.w	da6cc <HAL_GPIO_Read>
}
   dded2:	2000      	movs	r0, #0
   dded4:	bd10      	pop	{r4, pc}

000dded6 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   dded6:	280d      	cmp	r0, #13
{
   dded8:	b510      	push	{r4, lr}
   ddeda:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   ddedc:	bf9c      	itt	ls
   ddede:	340e      	addls	r4, #14
   ddee0:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   ddee2:	4620      	mov	r0, r4
   ddee4:	f7ff ff7c 	bl	ddde0 <pinAvailable>
   ddee8:	b150      	cbz	r0, ddf00 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   ddeea:	2103      	movs	r1, #3
   ddeec:	4620      	mov	r0, r4
   ddeee:	f7fc fbcd 	bl	da68c <HAL_Validate_Pin_Function>
   ddef2:	2803      	cmp	r0, #3
   ddef4:	d104      	bne.n	ddf00 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   ddef6:	4620      	mov	r0, r4
}
   ddef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   ddefc:	f7fc bbfe 	b.w	da6fc <hal_adc_read>
}
   ddf00:	2000      	movs	r0, #0
   ddf02:	bd10      	pop	{r4, pc}

000ddf04 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ddf04:	4770      	bx	lr

000ddf06 <__tcf_1>:
   ddf06:	4770      	bx	lr

000ddf08 <_Z17acquireWireBufferv>:
{
   ddf08:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   ddf0a:	2300      	movs	r3, #0
   ddf0c:	2520      	movs	r5, #32
   ddf0e:	8043      	strh	r3, [r0, #2]
   ddf10:	2314      	movs	r3, #20
{
   ddf12:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   ddf14:	8003      	strh	r3, [r0, #0]
   ddf16:	6085      	str	r5, [r0, #8]
   ddf18:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   ddf1a:	4906      	ldr	r1, [pc, #24]	; (ddf34 <_Z17acquireWireBufferv+0x2c>)
   ddf1c:	4628      	mov	r0, r5
   ddf1e:	f000 f86f 	bl	de000 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   ddf22:	4904      	ldr	r1, [pc, #16]	; (ddf34 <_Z17acquireWireBufferv+0x2c>)
	};
   ddf24:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   ddf26:	4628      	mov	r0, r5
   ddf28:	f000 f86a 	bl	de000 <_ZnajRKSt9nothrow_t>
	};
   ddf2c:	60e0      	str	r0, [r4, #12]
}
   ddf2e:	4620      	mov	r0, r4
   ddf30:	bd38      	pop	{r3, r4, r5, pc}
   ddf32:	bf00      	nop
   ddf34:	000e0310 	.word	0x000e0310

000ddf38 <_Z18acquireWire1Bufferv>:
   ddf38:	b538      	push	{r3, r4, r5, lr}
   ddf3a:	2300      	movs	r3, #0
   ddf3c:	2520      	movs	r5, #32
   ddf3e:	8043      	strh	r3, [r0, #2]
   ddf40:	2314      	movs	r3, #20
   ddf42:	4604      	mov	r4, r0
   ddf44:	8003      	strh	r3, [r0, #0]
   ddf46:	6085      	str	r5, [r0, #8]
   ddf48:	6105      	str	r5, [r0, #16]
   ddf4a:	4906      	ldr	r1, [pc, #24]	; (ddf64 <_Z18acquireWire1Bufferv+0x2c>)
   ddf4c:	4628      	mov	r0, r5
   ddf4e:	f000 f857 	bl	de000 <_ZnajRKSt9nothrow_t>
   ddf52:	4904      	ldr	r1, [pc, #16]	; (ddf64 <_Z18acquireWire1Bufferv+0x2c>)
   ddf54:	6060      	str	r0, [r4, #4]
   ddf56:	4628      	mov	r0, r5
   ddf58:	f000 f852 	bl	de000 <_ZnajRKSt9nothrow_t>
   ddf5c:	60e0      	str	r0, [r4, #12]
   ddf5e:	4620      	mov	r0, r4
   ddf60:	bd38      	pop	{r3, r4, r5, pc}
   ddf62:	bf00      	nop
   ddf64:	000e0310 	.word	0x000e0310

000ddf68 <_Z19__fetch_global_Wirev>:
{
   ddf68:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ddf6a:	4d0e      	ldr	r5, [pc, #56]	; (ddfa4 <_Z19__fetch_global_Wirev+0x3c>)
   ddf6c:	7829      	ldrb	r1, [r5, #0]
   ddf6e:	f3bf 8f5b 	dmb	ish
   ddf72:	f011 0401 	ands.w	r4, r1, #1
{
   ddf76:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ddf78:	d111      	bne.n	ddf9e <_Z19__fetch_global_Wirev+0x36>
   ddf7a:	4628      	mov	r0, r5
   ddf7c:	f7f6 f89c 	bl	d40b8 <__cxa_guard_acquire>
   ddf80:	b168      	cbz	r0, ddf9e <_Z19__fetch_global_Wirev+0x36>
   ddf82:	a801      	add	r0, sp, #4
   ddf84:	f7ff ffc0 	bl	ddf08 <_Z17acquireWireBufferv>
   ddf88:	aa01      	add	r2, sp, #4
   ddf8a:	4621      	mov	r1, r4
   ddf8c:	4806      	ldr	r0, [pc, #24]	; (ddfa8 <_Z19__fetch_global_Wirev+0x40>)
   ddf8e:	f7fd fcb7 	bl	db900 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ddf92:	4628      	mov	r0, r5
   ddf94:	f7f6 f895 	bl	d40c2 <__cxa_guard_release>
   ddf98:	4804      	ldr	r0, [pc, #16]	; (ddfac <_Z19__fetch_global_Wirev+0x44>)
   ddf9a:	f000 fca1 	bl	de8e0 <atexit>
	return wire;
}
   ddf9e:	4802      	ldr	r0, [pc, #8]	; (ddfa8 <_Z19__fetch_global_Wirev+0x40>)
   ddfa0:	b007      	add	sp, #28
   ddfa2:	bd30      	pop	{r4, r5, pc}
   ddfa4:	2003e724 	.word	0x2003e724
   ddfa8:	2003e72c 	.word	0x2003e72c
   ddfac:	000ddf05 	.word	0x000ddf05

000ddfb0 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   ddfb0:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   ddfb2:	4c0e      	ldr	r4, [pc, #56]	; (ddfec <_Z20__fetch_global_Wire1v+0x3c>)
   ddfb4:	7823      	ldrb	r3, [r4, #0]
   ddfb6:	f3bf 8f5b 	dmb	ish
   ddfba:	07db      	lsls	r3, r3, #31
{
   ddfbc:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   ddfbe:	d411      	bmi.n	ddfe4 <_Z20__fetch_global_Wire1v+0x34>
   ddfc0:	4620      	mov	r0, r4
   ddfc2:	f7f6 f879 	bl	d40b8 <__cxa_guard_acquire>
   ddfc6:	b168      	cbz	r0, ddfe4 <_Z20__fetch_global_Wire1v+0x34>
   ddfc8:	a801      	add	r0, sp, #4
   ddfca:	f7ff ffb5 	bl	ddf38 <_Z18acquireWire1Bufferv>
   ddfce:	aa01      	add	r2, sp, #4
   ddfd0:	2101      	movs	r1, #1
   ddfd2:	4807      	ldr	r0, [pc, #28]	; (ddff0 <_Z20__fetch_global_Wire1v+0x40>)
   ddfd4:	f7fd fc94 	bl	db900 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ddfd8:	4620      	mov	r0, r4
   ddfda:	f7f6 f872 	bl	d40c2 <__cxa_guard_release>
   ddfde:	4805      	ldr	r0, [pc, #20]	; (ddff4 <_Z20__fetch_global_Wire1v+0x44>)
   ddfe0:	f000 fc7e 	bl	de8e0 <atexit>
	return wire;
}
   ddfe4:	4802      	ldr	r0, [pc, #8]	; (ddff0 <_Z20__fetch_global_Wire1v+0x40>)
   ddfe6:	b006      	add	sp, #24
   ddfe8:	bd10      	pop	{r4, pc}
   ddfea:	bf00      	nop
   ddfec:	2003e728 	.word	0x2003e728
   ddff0:	2003e740 	.word	0x2003e740
   ddff4:	000ddf07 	.word	0x000ddf07

000ddff8 <_ZdlPvj>:
   ddff8:	f7f6 b851 	b.w	d409e <_ZdlPv>

000ddffc <_ZnwjRKSt9nothrow_t>:
   ddffc:	f7f6 b84b 	b.w	d4096 <_Znwj>

000de000 <_ZnajRKSt9nothrow_t>:
   de000:	f7f6 b84b 	b.w	d409a <_Znaj>

000de004 <_ZSt17__throw_bad_allocv>:
   de004:	b508      	push	{r3, lr}
   de006:	f7fc fed3 	bl	dadb0 <abort>

000de00a <_ZSt20__throw_length_errorPKc>:
   de00a:	b508      	push	{r3, lr}
   de00c:	f7fc fed0 	bl	dadb0 <abort>

000de010 <_ZSt25__throw_bad_function_callv>:
   de010:	b508      	push	{r3, lr}
   de012:	f7fc fecd 	bl	dadb0 <abort>
	...

000de018 <__aeabi_drsub>:
   de018:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   de01c:	e002      	b.n	de024 <__adddf3>
   de01e:	bf00      	nop

000de020 <__aeabi_dsub>:
   de020:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000de024 <__adddf3>:
   de024:	b530      	push	{r4, r5, lr}
   de026:	ea4f 0441 	mov.w	r4, r1, lsl #1
   de02a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   de02e:	ea94 0f05 	teq	r4, r5
   de032:	bf08      	it	eq
   de034:	ea90 0f02 	teqeq	r0, r2
   de038:	bf1f      	itttt	ne
   de03a:	ea54 0c00 	orrsne.w	ip, r4, r0
   de03e:	ea55 0c02 	orrsne.w	ip, r5, r2
   de042:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   de046:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   de04a:	f000 80e2 	beq.w	de212 <__adddf3+0x1ee>
   de04e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   de052:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   de056:	bfb8      	it	lt
   de058:	426d      	neglt	r5, r5
   de05a:	dd0c      	ble.n	de076 <__adddf3+0x52>
   de05c:	442c      	add	r4, r5
   de05e:	ea80 0202 	eor.w	r2, r0, r2
   de062:	ea81 0303 	eor.w	r3, r1, r3
   de066:	ea82 0000 	eor.w	r0, r2, r0
   de06a:	ea83 0101 	eor.w	r1, r3, r1
   de06e:	ea80 0202 	eor.w	r2, r0, r2
   de072:	ea81 0303 	eor.w	r3, r1, r3
   de076:	2d36      	cmp	r5, #54	; 0x36
   de078:	bf88      	it	hi
   de07a:	bd30      	pophi	{r4, r5, pc}
   de07c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   de080:	ea4f 3101 	mov.w	r1, r1, lsl #12
   de084:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   de088:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   de08c:	d002      	beq.n	de094 <__adddf3+0x70>
   de08e:	4240      	negs	r0, r0
   de090:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   de094:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   de098:	ea4f 3303 	mov.w	r3, r3, lsl #12
   de09c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   de0a0:	d002      	beq.n	de0a8 <__adddf3+0x84>
   de0a2:	4252      	negs	r2, r2
   de0a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   de0a8:	ea94 0f05 	teq	r4, r5
   de0ac:	f000 80a7 	beq.w	de1fe <__adddf3+0x1da>
   de0b0:	f1a4 0401 	sub.w	r4, r4, #1
   de0b4:	f1d5 0e20 	rsbs	lr, r5, #32
   de0b8:	db0d      	blt.n	de0d6 <__adddf3+0xb2>
   de0ba:	fa02 fc0e 	lsl.w	ip, r2, lr
   de0be:	fa22 f205 	lsr.w	r2, r2, r5
   de0c2:	1880      	adds	r0, r0, r2
   de0c4:	f141 0100 	adc.w	r1, r1, #0
   de0c8:	fa03 f20e 	lsl.w	r2, r3, lr
   de0cc:	1880      	adds	r0, r0, r2
   de0ce:	fa43 f305 	asr.w	r3, r3, r5
   de0d2:	4159      	adcs	r1, r3
   de0d4:	e00e      	b.n	de0f4 <__adddf3+0xd0>
   de0d6:	f1a5 0520 	sub.w	r5, r5, #32
   de0da:	f10e 0e20 	add.w	lr, lr, #32
   de0de:	2a01      	cmp	r2, #1
   de0e0:	fa03 fc0e 	lsl.w	ip, r3, lr
   de0e4:	bf28      	it	cs
   de0e6:	f04c 0c02 	orrcs.w	ip, ip, #2
   de0ea:	fa43 f305 	asr.w	r3, r3, r5
   de0ee:	18c0      	adds	r0, r0, r3
   de0f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   de0f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   de0f8:	d507      	bpl.n	de10a <__adddf3+0xe6>
   de0fa:	f04f 0e00 	mov.w	lr, #0
   de0fe:	f1dc 0c00 	rsbs	ip, ip, #0
   de102:	eb7e 0000 	sbcs.w	r0, lr, r0
   de106:	eb6e 0101 	sbc.w	r1, lr, r1
   de10a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   de10e:	d31b      	bcc.n	de148 <__adddf3+0x124>
   de110:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   de114:	d30c      	bcc.n	de130 <__adddf3+0x10c>
   de116:	0849      	lsrs	r1, r1, #1
   de118:	ea5f 0030 	movs.w	r0, r0, rrx
   de11c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   de120:	f104 0401 	add.w	r4, r4, #1
   de124:	ea4f 5244 	mov.w	r2, r4, lsl #21
   de128:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   de12c:	f080 809a 	bcs.w	de264 <__adddf3+0x240>
   de130:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   de134:	bf08      	it	eq
   de136:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   de13a:	f150 0000 	adcs.w	r0, r0, #0
   de13e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   de142:	ea41 0105 	orr.w	r1, r1, r5
   de146:	bd30      	pop	{r4, r5, pc}
   de148:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   de14c:	4140      	adcs	r0, r0
   de14e:	eb41 0101 	adc.w	r1, r1, r1
   de152:	3c01      	subs	r4, #1
   de154:	bf28      	it	cs
   de156:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   de15a:	d2e9      	bcs.n	de130 <__adddf3+0x10c>
   de15c:	f091 0f00 	teq	r1, #0
   de160:	bf04      	itt	eq
   de162:	4601      	moveq	r1, r0
   de164:	2000      	moveq	r0, #0
   de166:	fab1 f381 	clz	r3, r1
   de16a:	bf08      	it	eq
   de16c:	3320      	addeq	r3, #32
   de16e:	f1a3 030b 	sub.w	r3, r3, #11
   de172:	f1b3 0220 	subs.w	r2, r3, #32
   de176:	da0c      	bge.n	de192 <__adddf3+0x16e>
   de178:	320c      	adds	r2, #12
   de17a:	dd08      	ble.n	de18e <__adddf3+0x16a>
   de17c:	f102 0c14 	add.w	ip, r2, #20
   de180:	f1c2 020c 	rsb	r2, r2, #12
   de184:	fa01 f00c 	lsl.w	r0, r1, ip
   de188:	fa21 f102 	lsr.w	r1, r1, r2
   de18c:	e00c      	b.n	de1a8 <__adddf3+0x184>
   de18e:	f102 0214 	add.w	r2, r2, #20
   de192:	bfd8      	it	le
   de194:	f1c2 0c20 	rsble	ip, r2, #32
   de198:	fa01 f102 	lsl.w	r1, r1, r2
   de19c:	fa20 fc0c 	lsr.w	ip, r0, ip
   de1a0:	bfdc      	itt	le
   de1a2:	ea41 010c 	orrle.w	r1, r1, ip
   de1a6:	4090      	lslle	r0, r2
   de1a8:	1ae4      	subs	r4, r4, r3
   de1aa:	bfa2      	ittt	ge
   de1ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   de1b0:	4329      	orrge	r1, r5
   de1b2:	bd30      	popge	{r4, r5, pc}
   de1b4:	ea6f 0404 	mvn.w	r4, r4
   de1b8:	3c1f      	subs	r4, #31
   de1ba:	da1c      	bge.n	de1f6 <__adddf3+0x1d2>
   de1bc:	340c      	adds	r4, #12
   de1be:	dc0e      	bgt.n	de1de <__adddf3+0x1ba>
   de1c0:	f104 0414 	add.w	r4, r4, #20
   de1c4:	f1c4 0220 	rsb	r2, r4, #32
   de1c8:	fa20 f004 	lsr.w	r0, r0, r4
   de1cc:	fa01 f302 	lsl.w	r3, r1, r2
   de1d0:	ea40 0003 	orr.w	r0, r0, r3
   de1d4:	fa21 f304 	lsr.w	r3, r1, r4
   de1d8:	ea45 0103 	orr.w	r1, r5, r3
   de1dc:	bd30      	pop	{r4, r5, pc}
   de1de:	f1c4 040c 	rsb	r4, r4, #12
   de1e2:	f1c4 0220 	rsb	r2, r4, #32
   de1e6:	fa20 f002 	lsr.w	r0, r0, r2
   de1ea:	fa01 f304 	lsl.w	r3, r1, r4
   de1ee:	ea40 0003 	orr.w	r0, r0, r3
   de1f2:	4629      	mov	r1, r5
   de1f4:	bd30      	pop	{r4, r5, pc}
   de1f6:	fa21 f004 	lsr.w	r0, r1, r4
   de1fa:	4629      	mov	r1, r5
   de1fc:	bd30      	pop	{r4, r5, pc}
   de1fe:	f094 0f00 	teq	r4, #0
   de202:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   de206:	bf06      	itte	eq
   de208:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   de20c:	3401      	addeq	r4, #1
   de20e:	3d01      	subne	r5, #1
   de210:	e74e      	b.n	de0b0 <__adddf3+0x8c>
   de212:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   de216:	bf18      	it	ne
   de218:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   de21c:	d029      	beq.n	de272 <__adddf3+0x24e>
   de21e:	ea94 0f05 	teq	r4, r5
   de222:	bf08      	it	eq
   de224:	ea90 0f02 	teqeq	r0, r2
   de228:	d005      	beq.n	de236 <__adddf3+0x212>
   de22a:	ea54 0c00 	orrs.w	ip, r4, r0
   de22e:	bf04      	itt	eq
   de230:	4619      	moveq	r1, r3
   de232:	4610      	moveq	r0, r2
   de234:	bd30      	pop	{r4, r5, pc}
   de236:	ea91 0f03 	teq	r1, r3
   de23a:	bf1e      	ittt	ne
   de23c:	2100      	movne	r1, #0
   de23e:	2000      	movne	r0, #0
   de240:	bd30      	popne	{r4, r5, pc}
   de242:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   de246:	d105      	bne.n	de254 <__adddf3+0x230>
   de248:	0040      	lsls	r0, r0, #1
   de24a:	4149      	adcs	r1, r1
   de24c:	bf28      	it	cs
   de24e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   de252:	bd30      	pop	{r4, r5, pc}
   de254:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   de258:	bf3c      	itt	cc
   de25a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   de25e:	bd30      	popcc	{r4, r5, pc}
   de260:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   de264:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   de268:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   de26c:	f04f 0000 	mov.w	r0, #0
   de270:	bd30      	pop	{r4, r5, pc}
   de272:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   de276:	bf1a      	itte	ne
   de278:	4619      	movne	r1, r3
   de27a:	4610      	movne	r0, r2
   de27c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   de280:	bf1c      	itt	ne
   de282:	460b      	movne	r3, r1
   de284:	4602      	movne	r2, r0
   de286:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   de28a:	bf06      	itte	eq
   de28c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   de290:	ea91 0f03 	teqeq	r1, r3
   de294:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   de298:	bd30      	pop	{r4, r5, pc}
   de29a:	bf00      	nop

000de29c <__aeabi_ui2d>:
   de29c:	f090 0f00 	teq	r0, #0
   de2a0:	bf04      	itt	eq
   de2a2:	2100      	moveq	r1, #0
   de2a4:	4770      	bxeq	lr
   de2a6:	b530      	push	{r4, r5, lr}
   de2a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   de2ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   de2b0:	f04f 0500 	mov.w	r5, #0
   de2b4:	f04f 0100 	mov.w	r1, #0
   de2b8:	e750      	b.n	de15c <__adddf3+0x138>
   de2ba:	bf00      	nop

000de2bc <__aeabi_i2d>:
   de2bc:	f090 0f00 	teq	r0, #0
   de2c0:	bf04      	itt	eq
   de2c2:	2100      	moveq	r1, #0
   de2c4:	4770      	bxeq	lr
   de2c6:	b530      	push	{r4, r5, lr}
   de2c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   de2cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   de2d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   de2d4:	bf48      	it	mi
   de2d6:	4240      	negmi	r0, r0
   de2d8:	f04f 0100 	mov.w	r1, #0
   de2dc:	e73e      	b.n	de15c <__adddf3+0x138>
   de2de:	bf00      	nop

000de2e0 <__aeabi_f2d>:
   de2e0:	0042      	lsls	r2, r0, #1
   de2e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   de2e6:	ea4f 0131 	mov.w	r1, r1, rrx
   de2ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   de2ee:	bf1f      	itttt	ne
   de2f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   de2f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   de2f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   de2fc:	4770      	bxne	lr
   de2fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   de302:	bf08      	it	eq
   de304:	4770      	bxeq	lr
   de306:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   de30a:	bf04      	itt	eq
   de30c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   de310:	4770      	bxeq	lr
   de312:	b530      	push	{r4, r5, lr}
   de314:	f44f 7460 	mov.w	r4, #896	; 0x380
   de318:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   de31c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   de320:	e71c      	b.n	de15c <__adddf3+0x138>
   de322:	bf00      	nop

000de324 <__aeabi_ul2d>:
   de324:	ea50 0201 	orrs.w	r2, r0, r1
   de328:	bf08      	it	eq
   de32a:	4770      	bxeq	lr
   de32c:	b530      	push	{r4, r5, lr}
   de32e:	f04f 0500 	mov.w	r5, #0
   de332:	e00a      	b.n	de34a <__aeabi_l2d+0x16>

000de334 <__aeabi_l2d>:
   de334:	ea50 0201 	orrs.w	r2, r0, r1
   de338:	bf08      	it	eq
   de33a:	4770      	bxeq	lr
   de33c:	b530      	push	{r4, r5, lr}
   de33e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   de342:	d502      	bpl.n	de34a <__aeabi_l2d+0x16>
   de344:	4240      	negs	r0, r0
   de346:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   de34a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   de34e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   de352:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   de356:	f43f aed8 	beq.w	de10a <__adddf3+0xe6>
   de35a:	f04f 0203 	mov.w	r2, #3
   de35e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   de362:	bf18      	it	ne
   de364:	3203      	addne	r2, #3
   de366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   de36a:	bf18      	it	ne
   de36c:	3203      	addne	r2, #3
   de36e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   de372:	f1c2 0320 	rsb	r3, r2, #32
   de376:	fa00 fc03 	lsl.w	ip, r0, r3
   de37a:	fa20 f002 	lsr.w	r0, r0, r2
   de37e:	fa01 fe03 	lsl.w	lr, r1, r3
   de382:	ea40 000e 	orr.w	r0, r0, lr
   de386:	fa21 f102 	lsr.w	r1, r1, r2
   de38a:	4414      	add	r4, r2
   de38c:	e6bd      	b.n	de10a <__adddf3+0xe6>
   de38e:	bf00      	nop

000de390 <__aeabi_dmul>:
   de390:	b570      	push	{r4, r5, r6, lr}
   de392:	f04f 0cff 	mov.w	ip, #255	; 0xff
   de396:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   de39a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   de39e:	bf1d      	ittte	ne
   de3a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   de3a4:	ea94 0f0c 	teqne	r4, ip
   de3a8:	ea95 0f0c 	teqne	r5, ip
   de3ac:	f000 f8de 	bleq	de56c <__aeabi_dmul+0x1dc>
   de3b0:	442c      	add	r4, r5
   de3b2:	ea81 0603 	eor.w	r6, r1, r3
   de3b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   de3ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   de3be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   de3c2:	bf18      	it	ne
   de3c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   de3c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   de3cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   de3d0:	d038      	beq.n	de444 <__aeabi_dmul+0xb4>
   de3d2:	fba0 ce02 	umull	ip, lr, r0, r2
   de3d6:	f04f 0500 	mov.w	r5, #0
   de3da:	fbe1 e502 	umlal	lr, r5, r1, r2
   de3de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   de3e2:	fbe0 e503 	umlal	lr, r5, r0, r3
   de3e6:	f04f 0600 	mov.w	r6, #0
   de3ea:	fbe1 5603 	umlal	r5, r6, r1, r3
   de3ee:	f09c 0f00 	teq	ip, #0
   de3f2:	bf18      	it	ne
   de3f4:	f04e 0e01 	orrne.w	lr, lr, #1
   de3f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   de3fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   de400:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   de404:	d204      	bcs.n	de410 <__aeabi_dmul+0x80>
   de406:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   de40a:	416d      	adcs	r5, r5
   de40c:	eb46 0606 	adc.w	r6, r6, r6
   de410:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   de414:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   de418:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   de41c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   de420:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   de424:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   de428:	bf88      	it	hi
   de42a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   de42e:	d81e      	bhi.n	de46e <__aeabi_dmul+0xde>
   de430:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   de434:	bf08      	it	eq
   de436:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   de43a:	f150 0000 	adcs.w	r0, r0, #0
   de43e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   de442:	bd70      	pop	{r4, r5, r6, pc}
   de444:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   de448:	ea46 0101 	orr.w	r1, r6, r1
   de44c:	ea40 0002 	orr.w	r0, r0, r2
   de450:	ea81 0103 	eor.w	r1, r1, r3
   de454:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   de458:	bfc2      	ittt	gt
   de45a:	ebd4 050c 	rsbsgt	r5, r4, ip
   de45e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   de462:	bd70      	popgt	{r4, r5, r6, pc}
   de464:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   de468:	f04f 0e00 	mov.w	lr, #0
   de46c:	3c01      	subs	r4, #1
   de46e:	f300 80ab 	bgt.w	de5c8 <__aeabi_dmul+0x238>
   de472:	f114 0f36 	cmn.w	r4, #54	; 0x36
   de476:	bfde      	ittt	le
   de478:	2000      	movle	r0, #0
   de47a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   de47e:	bd70      	pople	{r4, r5, r6, pc}
   de480:	f1c4 0400 	rsb	r4, r4, #0
   de484:	3c20      	subs	r4, #32
   de486:	da35      	bge.n	de4f4 <__aeabi_dmul+0x164>
   de488:	340c      	adds	r4, #12
   de48a:	dc1b      	bgt.n	de4c4 <__aeabi_dmul+0x134>
   de48c:	f104 0414 	add.w	r4, r4, #20
   de490:	f1c4 0520 	rsb	r5, r4, #32
   de494:	fa00 f305 	lsl.w	r3, r0, r5
   de498:	fa20 f004 	lsr.w	r0, r0, r4
   de49c:	fa01 f205 	lsl.w	r2, r1, r5
   de4a0:	ea40 0002 	orr.w	r0, r0, r2
   de4a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   de4a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   de4ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   de4b0:	fa21 f604 	lsr.w	r6, r1, r4
   de4b4:	eb42 0106 	adc.w	r1, r2, r6
   de4b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   de4bc:	bf08      	it	eq
   de4be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   de4c2:	bd70      	pop	{r4, r5, r6, pc}
   de4c4:	f1c4 040c 	rsb	r4, r4, #12
   de4c8:	f1c4 0520 	rsb	r5, r4, #32
   de4cc:	fa00 f304 	lsl.w	r3, r0, r4
   de4d0:	fa20 f005 	lsr.w	r0, r0, r5
   de4d4:	fa01 f204 	lsl.w	r2, r1, r4
   de4d8:	ea40 0002 	orr.w	r0, r0, r2
   de4dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   de4e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   de4e4:	f141 0100 	adc.w	r1, r1, #0
   de4e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   de4ec:	bf08      	it	eq
   de4ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   de4f2:	bd70      	pop	{r4, r5, r6, pc}
   de4f4:	f1c4 0520 	rsb	r5, r4, #32
   de4f8:	fa00 f205 	lsl.w	r2, r0, r5
   de4fc:	ea4e 0e02 	orr.w	lr, lr, r2
   de500:	fa20 f304 	lsr.w	r3, r0, r4
   de504:	fa01 f205 	lsl.w	r2, r1, r5
   de508:	ea43 0302 	orr.w	r3, r3, r2
   de50c:	fa21 f004 	lsr.w	r0, r1, r4
   de510:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   de514:	fa21 f204 	lsr.w	r2, r1, r4
   de518:	ea20 0002 	bic.w	r0, r0, r2
   de51c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   de520:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   de524:	bf08      	it	eq
   de526:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   de52a:	bd70      	pop	{r4, r5, r6, pc}
   de52c:	f094 0f00 	teq	r4, #0
   de530:	d10f      	bne.n	de552 <__aeabi_dmul+0x1c2>
   de532:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   de536:	0040      	lsls	r0, r0, #1
   de538:	eb41 0101 	adc.w	r1, r1, r1
   de53c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   de540:	bf08      	it	eq
   de542:	3c01      	subeq	r4, #1
   de544:	d0f7      	beq.n	de536 <__aeabi_dmul+0x1a6>
   de546:	ea41 0106 	orr.w	r1, r1, r6
   de54a:	f095 0f00 	teq	r5, #0
   de54e:	bf18      	it	ne
   de550:	4770      	bxne	lr
   de552:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   de556:	0052      	lsls	r2, r2, #1
   de558:	eb43 0303 	adc.w	r3, r3, r3
   de55c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   de560:	bf08      	it	eq
   de562:	3d01      	subeq	r5, #1
   de564:	d0f7      	beq.n	de556 <__aeabi_dmul+0x1c6>
   de566:	ea43 0306 	orr.w	r3, r3, r6
   de56a:	4770      	bx	lr
   de56c:	ea94 0f0c 	teq	r4, ip
   de570:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   de574:	bf18      	it	ne
   de576:	ea95 0f0c 	teqne	r5, ip
   de57a:	d00c      	beq.n	de596 <__aeabi_dmul+0x206>
   de57c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   de580:	bf18      	it	ne
   de582:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   de586:	d1d1      	bne.n	de52c <__aeabi_dmul+0x19c>
   de588:	ea81 0103 	eor.w	r1, r1, r3
   de58c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   de590:	f04f 0000 	mov.w	r0, #0
   de594:	bd70      	pop	{r4, r5, r6, pc}
   de596:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   de59a:	bf06      	itte	eq
   de59c:	4610      	moveq	r0, r2
   de59e:	4619      	moveq	r1, r3
   de5a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   de5a4:	d019      	beq.n	de5da <__aeabi_dmul+0x24a>
   de5a6:	ea94 0f0c 	teq	r4, ip
   de5aa:	d102      	bne.n	de5b2 <__aeabi_dmul+0x222>
   de5ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   de5b0:	d113      	bne.n	de5da <__aeabi_dmul+0x24a>
   de5b2:	ea95 0f0c 	teq	r5, ip
   de5b6:	d105      	bne.n	de5c4 <__aeabi_dmul+0x234>
   de5b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   de5bc:	bf1c      	itt	ne
   de5be:	4610      	movne	r0, r2
   de5c0:	4619      	movne	r1, r3
   de5c2:	d10a      	bne.n	de5da <__aeabi_dmul+0x24a>
   de5c4:	ea81 0103 	eor.w	r1, r1, r3
   de5c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   de5cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   de5d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   de5d4:	f04f 0000 	mov.w	r0, #0
   de5d8:	bd70      	pop	{r4, r5, r6, pc}
   de5da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   de5de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   de5e2:	bd70      	pop	{r4, r5, r6, pc}

000de5e4 <__aeabi_ddiv>:
   de5e4:	b570      	push	{r4, r5, r6, lr}
   de5e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   de5ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   de5ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   de5f2:	bf1d      	ittte	ne
   de5f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   de5f8:	ea94 0f0c 	teqne	r4, ip
   de5fc:	ea95 0f0c 	teqne	r5, ip
   de600:	f000 f8a7 	bleq	de752 <__aeabi_ddiv+0x16e>
   de604:	eba4 0405 	sub.w	r4, r4, r5
   de608:	ea81 0e03 	eor.w	lr, r1, r3
   de60c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   de610:	ea4f 3101 	mov.w	r1, r1, lsl #12
   de614:	f000 8088 	beq.w	de728 <__aeabi_ddiv+0x144>
   de618:	ea4f 3303 	mov.w	r3, r3, lsl #12
   de61c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   de620:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   de624:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   de628:	ea4f 2202 	mov.w	r2, r2, lsl #8
   de62c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   de630:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   de634:	ea4f 2600 	mov.w	r6, r0, lsl #8
   de638:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   de63c:	429d      	cmp	r5, r3
   de63e:	bf08      	it	eq
   de640:	4296      	cmpeq	r6, r2
   de642:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   de646:	f504 7440 	add.w	r4, r4, #768	; 0x300
   de64a:	d202      	bcs.n	de652 <__aeabi_ddiv+0x6e>
   de64c:	085b      	lsrs	r3, r3, #1
   de64e:	ea4f 0232 	mov.w	r2, r2, rrx
   de652:	1ab6      	subs	r6, r6, r2
   de654:	eb65 0503 	sbc.w	r5, r5, r3
   de658:	085b      	lsrs	r3, r3, #1
   de65a:	ea4f 0232 	mov.w	r2, r2, rrx
   de65e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   de662:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   de666:	ebb6 0e02 	subs.w	lr, r6, r2
   de66a:	eb75 0e03 	sbcs.w	lr, r5, r3
   de66e:	bf22      	ittt	cs
   de670:	1ab6      	subcs	r6, r6, r2
   de672:	4675      	movcs	r5, lr
   de674:	ea40 000c 	orrcs.w	r0, r0, ip
   de678:	085b      	lsrs	r3, r3, #1
   de67a:	ea4f 0232 	mov.w	r2, r2, rrx
   de67e:	ebb6 0e02 	subs.w	lr, r6, r2
   de682:	eb75 0e03 	sbcs.w	lr, r5, r3
   de686:	bf22      	ittt	cs
   de688:	1ab6      	subcs	r6, r6, r2
   de68a:	4675      	movcs	r5, lr
   de68c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   de690:	085b      	lsrs	r3, r3, #1
   de692:	ea4f 0232 	mov.w	r2, r2, rrx
   de696:	ebb6 0e02 	subs.w	lr, r6, r2
   de69a:	eb75 0e03 	sbcs.w	lr, r5, r3
   de69e:	bf22      	ittt	cs
   de6a0:	1ab6      	subcs	r6, r6, r2
   de6a2:	4675      	movcs	r5, lr
   de6a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   de6a8:	085b      	lsrs	r3, r3, #1
   de6aa:	ea4f 0232 	mov.w	r2, r2, rrx
   de6ae:	ebb6 0e02 	subs.w	lr, r6, r2
   de6b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   de6b6:	bf22      	ittt	cs
   de6b8:	1ab6      	subcs	r6, r6, r2
   de6ba:	4675      	movcs	r5, lr
   de6bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   de6c0:	ea55 0e06 	orrs.w	lr, r5, r6
   de6c4:	d018      	beq.n	de6f8 <__aeabi_ddiv+0x114>
   de6c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   de6ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   de6ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
   de6d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   de6d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   de6da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   de6de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   de6e2:	d1c0      	bne.n	de666 <__aeabi_ddiv+0x82>
   de6e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   de6e8:	d10b      	bne.n	de702 <__aeabi_ddiv+0x11e>
   de6ea:	ea41 0100 	orr.w	r1, r1, r0
   de6ee:	f04f 0000 	mov.w	r0, #0
   de6f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   de6f6:	e7b6      	b.n	de666 <__aeabi_ddiv+0x82>
   de6f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   de6fc:	bf04      	itt	eq
   de6fe:	4301      	orreq	r1, r0
   de700:	2000      	moveq	r0, #0
   de702:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   de706:	bf88      	it	hi
   de708:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   de70c:	f63f aeaf 	bhi.w	de46e <__aeabi_dmul+0xde>
   de710:	ebb5 0c03 	subs.w	ip, r5, r3
   de714:	bf04      	itt	eq
   de716:	ebb6 0c02 	subseq.w	ip, r6, r2
   de71a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   de71e:	f150 0000 	adcs.w	r0, r0, #0
   de722:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   de726:	bd70      	pop	{r4, r5, r6, pc}
   de728:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   de72c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   de730:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   de734:	bfc2      	ittt	gt
   de736:	ebd4 050c 	rsbsgt	r5, r4, ip
   de73a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   de73e:	bd70      	popgt	{r4, r5, r6, pc}
   de740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   de744:	f04f 0e00 	mov.w	lr, #0
   de748:	3c01      	subs	r4, #1
   de74a:	e690      	b.n	de46e <__aeabi_dmul+0xde>
   de74c:	ea45 0e06 	orr.w	lr, r5, r6
   de750:	e68d      	b.n	de46e <__aeabi_dmul+0xde>
   de752:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   de756:	ea94 0f0c 	teq	r4, ip
   de75a:	bf08      	it	eq
   de75c:	ea95 0f0c 	teqeq	r5, ip
   de760:	f43f af3b 	beq.w	de5da <__aeabi_dmul+0x24a>
   de764:	ea94 0f0c 	teq	r4, ip
   de768:	d10a      	bne.n	de780 <__aeabi_ddiv+0x19c>
   de76a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   de76e:	f47f af34 	bne.w	de5da <__aeabi_dmul+0x24a>
   de772:	ea95 0f0c 	teq	r5, ip
   de776:	f47f af25 	bne.w	de5c4 <__aeabi_dmul+0x234>
   de77a:	4610      	mov	r0, r2
   de77c:	4619      	mov	r1, r3
   de77e:	e72c      	b.n	de5da <__aeabi_dmul+0x24a>
   de780:	ea95 0f0c 	teq	r5, ip
   de784:	d106      	bne.n	de794 <__aeabi_ddiv+0x1b0>
   de786:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   de78a:	f43f aefd 	beq.w	de588 <__aeabi_dmul+0x1f8>
   de78e:	4610      	mov	r0, r2
   de790:	4619      	mov	r1, r3
   de792:	e722      	b.n	de5da <__aeabi_dmul+0x24a>
   de794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   de798:	bf18      	it	ne
   de79a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   de79e:	f47f aec5 	bne.w	de52c <__aeabi_dmul+0x19c>
   de7a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   de7a6:	f47f af0d 	bne.w	de5c4 <__aeabi_dmul+0x234>
   de7aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   de7ae:	f47f aeeb 	bne.w	de588 <__aeabi_dmul+0x1f8>
   de7b2:	e712      	b.n	de5da <__aeabi_dmul+0x24a>

000de7b4 <__aeabi_d2uiz>:
   de7b4:	004a      	lsls	r2, r1, #1
   de7b6:	d211      	bcs.n	de7dc <__aeabi_d2uiz+0x28>
   de7b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   de7bc:	d211      	bcs.n	de7e2 <__aeabi_d2uiz+0x2e>
   de7be:	d50d      	bpl.n	de7dc <__aeabi_d2uiz+0x28>
   de7c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   de7c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   de7c8:	d40e      	bmi.n	de7e8 <__aeabi_d2uiz+0x34>
   de7ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   de7ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   de7d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   de7d6:	fa23 f002 	lsr.w	r0, r3, r2
   de7da:	4770      	bx	lr
   de7dc:	f04f 0000 	mov.w	r0, #0
   de7e0:	4770      	bx	lr
   de7e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   de7e6:	d102      	bne.n	de7ee <__aeabi_d2uiz+0x3a>
   de7e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   de7ec:	4770      	bx	lr
   de7ee:	f04f 0000 	mov.w	r0, #0
   de7f2:	4770      	bx	lr

000de7f4 <__aeabi_d2f>:
   de7f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   de7f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   de7fc:	bf24      	itt	cs
   de7fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   de802:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   de806:	d90d      	bls.n	de824 <__aeabi_d2f+0x30>
   de808:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   de80c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   de810:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   de814:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   de818:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   de81c:	bf08      	it	eq
   de81e:	f020 0001 	biceq.w	r0, r0, #1
   de822:	4770      	bx	lr
   de824:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   de828:	d121      	bne.n	de86e <__aeabi_d2f+0x7a>
   de82a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   de82e:	bfbc      	itt	lt
   de830:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   de834:	4770      	bxlt	lr
   de836:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   de83a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   de83e:	f1c2 0218 	rsb	r2, r2, #24
   de842:	f1c2 0c20 	rsb	ip, r2, #32
   de846:	fa10 f30c 	lsls.w	r3, r0, ip
   de84a:	fa20 f002 	lsr.w	r0, r0, r2
   de84e:	bf18      	it	ne
   de850:	f040 0001 	orrne.w	r0, r0, #1
   de854:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   de858:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   de85c:	fa03 fc0c 	lsl.w	ip, r3, ip
   de860:	ea40 000c 	orr.w	r0, r0, ip
   de864:	fa23 f302 	lsr.w	r3, r3, r2
   de868:	ea4f 0343 	mov.w	r3, r3, lsl #1
   de86c:	e7cc      	b.n	de808 <__aeabi_d2f+0x14>
   de86e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   de872:	d107      	bne.n	de884 <__aeabi_d2f+0x90>
   de874:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   de878:	bf1e      	ittt	ne
   de87a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   de87e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   de882:	4770      	bxne	lr
   de884:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   de888:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   de88c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   de890:	4770      	bx	lr
   de892:	bf00      	nop

000de894 <asctime_r>:
   de894:	b510      	push	{r4, lr}
   de896:	460c      	mov	r4, r1
   de898:	6941      	ldr	r1, [r0, #20]
   de89a:	6903      	ldr	r3, [r0, #16]
   de89c:	6982      	ldr	r2, [r0, #24]
   de89e:	b086      	sub	sp, #24
   de8a0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   de8a4:	9104      	str	r1, [sp, #16]
   de8a6:	6801      	ldr	r1, [r0, #0]
   de8a8:	9103      	str	r1, [sp, #12]
   de8aa:	6841      	ldr	r1, [r0, #4]
   de8ac:	9102      	str	r1, [sp, #8]
   de8ae:	6881      	ldr	r1, [r0, #8]
   de8b0:	9101      	str	r1, [sp, #4]
   de8b2:	68c1      	ldr	r1, [r0, #12]
   de8b4:	9100      	str	r1, [sp, #0]
   de8b6:	4907      	ldr	r1, [pc, #28]	; (de8d4 <asctime_r+0x40>)
   de8b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   de8bc:	440b      	add	r3, r1
   de8be:	4906      	ldr	r1, [pc, #24]	; (de8d8 <asctime_r+0x44>)
   de8c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   de8c4:	440a      	add	r2, r1
   de8c6:	4620      	mov	r0, r4
   de8c8:	4904      	ldr	r1, [pc, #16]	; (de8dc <asctime_r+0x48>)
   de8ca:	f7fc fa51 	bl	dad70 <siprintf>
   de8ce:	4620      	mov	r0, r4
   de8d0:	b006      	add	sp, #24
   de8d2:	bd10      	pop	{r4, pc}
   de8d4:	000e0346 	.word	0x000e0346
   de8d8:	000e0331 	.word	0x000e0331
   de8dc:	000e0311 	.word	0x000e0311

000de8e0 <atexit>:
   de8e0:	2300      	movs	r3, #0
   de8e2:	4601      	mov	r1, r0
   de8e4:	461a      	mov	r2, r3
   de8e6:	4618      	mov	r0, r3
   de8e8:	f000 ba3e 	b.w	ded68 <__register_exitproc>

000de8ec <gmtime>:
   de8ec:	b538      	push	{r3, r4, r5, lr}
   de8ee:	4b07      	ldr	r3, [pc, #28]	; (de90c <gmtime+0x20>)
   de8f0:	681d      	ldr	r5, [r3, #0]
   de8f2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   de8f4:	4604      	mov	r4, r0
   de8f6:	b91b      	cbnz	r3, de900 <gmtime+0x14>
   de8f8:	2024      	movs	r0, #36	; 0x24
   de8fa:	f7fc fa21 	bl	dad40 <malloc>
   de8fe:	63e8      	str	r0, [r5, #60]	; 0x3c
   de900:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   de902:	4620      	mov	r0, r4
   de904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   de908:	f7fc ba82 	b.w	dae10 <gmtime_r>
   de90c:	2003dc4c 	.word	0x2003dc4c

000de910 <memcpy>:
   de910:	440a      	add	r2, r1
   de912:	4291      	cmp	r1, r2
   de914:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   de918:	d100      	bne.n	de91c <memcpy+0xc>
   de91a:	4770      	bx	lr
   de91c:	b510      	push	{r4, lr}
   de91e:	f811 4b01 	ldrb.w	r4, [r1], #1
   de922:	f803 4f01 	strb.w	r4, [r3, #1]!
   de926:	4291      	cmp	r1, r2
   de928:	d1f9      	bne.n	de91e <memcpy+0xe>
   de92a:	bd10      	pop	{r4, pc}

000de92c <memmove>:
   de92c:	4288      	cmp	r0, r1
   de92e:	b510      	push	{r4, lr}
   de930:	eb01 0402 	add.w	r4, r1, r2
   de934:	d902      	bls.n	de93c <memmove+0x10>
   de936:	4284      	cmp	r4, r0
   de938:	4623      	mov	r3, r4
   de93a:	d807      	bhi.n	de94c <memmove+0x20>
   de93c:	1e43      	subs	r3, r0, #1
   de93e:	42a1      	cmp	r1, r4
   de940:	d008      	beq.n	de954 <memmove+0x28>
   de942:	f811 2b01 	ldrb.w	r2, [r1], #1
   de946:	f803 2f01 	strb.w	r2, [r3, #1]!
   de94a:	e7f8      	b.n	de93e <memmove+0x12>
   de94c:	4402      	add	r2, r0
   de94e:	4601      	mov	r1, r0
   de950:	428a      	cmp	r2, r1
   de952:	d100      	bne.n	de956 <memmove+0x2a>
   de954:	bd10      	pop	{r4, pc}
   de956:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   de95a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   de95e:	e7f7      	b.n	de950 <memmove+0x24>

000de960 <memset>:
   de960:	4402      	add	r2, r0
   de962:	4603      	mov	r3, r0
   de964:	4293      	cmp	r3, r2
   de966:	d100      	bne.n	de96a <memset+0xa>
   de968:	4770      	bx	lr
   de96a:	f803 1b01 	strb.w	r1, [r3], #1
   de96e:	e7f9      	b.n	de964 <memset+0x4>

000de970 <srand>:
   de970:	b538      	push	{r3, r4, r5, lr}
   de972:	4b0d      	ldr	r3, [pc, #52]	; (de9a8 <srand+0x38>)
   de974:	681d      	ldr	r5, [r3, #0]
   de976:	6bab      	ldr	r3, [r5, #56]	; 0x38
   de978:	4604      	mov	r4, r0
   de97a:	b97b      	cbnz	r3, de99c <srand+0x2c>
   de97c:	2018      	movs	r0, #24
   de97e:	f7fc f9df 	bl	dad40 <malloc>
   de982:	4a0a      	ldr	r2, [pc, #40]	; (de9ac <srand+0x3c>)
   de984:	4b0a      	ldr	r3, [pc, #40]	; (de9b0 <srand+0x40>)
   de986:	63a8      	str	r0, [r5, #56]	; 0x38
   de988:	e9c0 2300 	strd	r2, r3, [r0]
   de98c:	4b09      	ldr	r3, [pc, #36]	; (de9b4 <srand+0x44>)
   de98e:	6083      	str	r3, [r0, #8]
   de990:	230b      	movs	r3, #11
   de992:	8183      	strh	r3, [r0, #12]
   de994:	2201      	movs	r2, #1
   de996:	2300      	movs	r3, #0
   de998:	e9c0 2304 	strd	r2, r3, [r0, #16]
   de99c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   de99e:	2200      	movs	r2, #0
   de9a0:	611c      	str	r4, [r3, #16]
   de9a2:	615a      	str	r2, [r3, #20]
   de9a4:	bd38      	pop	{r3, r4, r5, pc}
   de9a6:	bf00      	nop
   de9a8:	2003dc4c 	.word	0x2003dc4c
   de9ac:	abcd330e 	.word	0xabcd330e
   de9b0:	e66d1234 	.word	0xe66d1234
   de9b4:	0005deec 	.word	0x0005deec

000de9b8 <rand>:
   de9b8:	4b13      	ldr	r3, [pc, #76]	; (dea08 <rand+0x50>)
   de9ba:	b510      	push	{r4, lr}
   de9bc:	681c      	ldr	r4, [r3, #0]
   de9be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   de9c0:	b97b      	cbnz	r3, de9e2 <rand+0x2a>
   de9c2:	2018      	movs	r0, #24
   de9c4:	f7fc f9bc 	bl	dad40 <malloc>
   de9c8:	4a10      	ldr	r2, [pc, #64]	; (dea0c <rand+0x54>)
   de9ca:	4b11      	ldr	r3, [pc, #68]	; (dea10 <rand+0x58>)
   de9cc:	63a0      	str	r0, [r4, #56]	; 0x38
   de9ce:	e9c0 2300 	strd	r2, r3, [r0]
   de9d2:	4b10      	ldr	r3, [pc, #64]	; (dea14 <rand+0x5c>)
   de9d4:	6083      	str	r3, [r0, #8]
   de9d6:	230b      	movs	r3, #11
   de9d8:	8183      	strh	r3, [r0, #12]
   de9da:	2201      	movs	r2, #1
   de9dc:	2300      	movs	r3, #0
   de9de:	e9c0 2304 	strd	r2, r3, [r0, #16]
   de9e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   de9e4:	480c      	ldr	r0, [pc, #48]	; (dea18 <rand+0x60>)
   de9e6:	690a      	ldr	r2, [r1, #16]
   de9e8:	694b      	ldr	r3, [r1, #20]
   de9ea:	4c0c      	ldr	r4, [pc, #48]	; (dea1c <rand+0x64>)
   de9ec:	4350      	muls	r0, r2
   de9ee:	fb04 0003 	mla	r0, r4, r3, r0
   de9f2:	fba2 3404 	umull	r3, r4, r2, r4
   de9f6:	1c5a      	adds	r2, r3, #1
   de9f8:	4404      	add	r4, r0
   de9fa:	f144 0000 	adc.w	r0, r4, #0
   de9fe:	e9c1 2004 	strd	r2, r0, [r1, #16]
   dea02:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   dea06:	bd10      	pop	{r4, pc}
   dea08:	2003dc4c 	.word	0x2003dc4c
   dea0c:	abcd330e 	.word	0xabcd330e
   dea10:	e66d1234 	.word	0xe66d1234
   dea14:	0005deec 	.word	0x0005deec
   dea18:	5851f42d 	.word	0x5851f42d
   dea1c:	4c957f2d 	.word	0x4c957f2d

000dea20 <strchr>:
   dea20:	b2c9      	uxtb	r1, r1
   dea22:	4603      	mov	r3, r0
   dea24:	f810 2b01 	ldrb.w	r2, [r0], #1
   dea28:	b11a      	cbz	r2, dea32 <strchr+0x12>
   dea2a:	428a      	cmp	r2, r1
   dea2c:	d1f9      	bne.n	dea22 <strchr+0x2>
   dea2e:	4618      	mov	r0, r3
   dea30:	4770      	bx	lr
   dea32:	2900      	cmp	r1, #0
   dea34:	bf18      	it	ne
   dea36:	2300      	movne	r3, #0
   dea38:	e7f9      	b.n	dea2e <strchr+0xe>

000dea3a <strchrnul>:
   dea3a:	b510      	push	{r4, lr}
   dea3c:	4604      	mov	r4, r0
   dea3e:	f7ff ffef 	bl	dea20 <strchr>
   dea42:	b918      	cbnz	r0, dea4c <strchrnul+0x12>
   dea44:	4620      	mov	r0, r4
   dea46:	f000 f832 	bl	deaae <strlen>
   dea4a:	4420      	add	r0, r4
   dea4c:	bd10      	pop	{r4, pc}

000dea4e <strcmp>:
   dea4e:	f810 2b01 	ldrb.w	r2, [r0], #1
   dea52:	f811 3b01 	ldrb.w	r3, [r1], #1
   dea56:	2a01      	cmp	r2, #1
   dea58:	bf28      	it	cs
   dea5a:	429a      	cmpcs	r2, r3
   dea5c:	d0f7      	beq.n	dea4e <strcmp>
   dea5e:	1ad0      	subs	r0, r2, r3
   dea60:	4770      	bx	lr

000dea62 <strcpy>:
   dea62:	4603      	mov	r3, r0
   dea64:	f811 2b01 	ldrb.w	r2, [r1], #1
   dea68:	f803 2b01 	strb.w	r2, [r3], #1
   dea6c:	2a00      	cmp	r2, #0
   dea6e:	d1f9      	bne.n	dea64 <strcpy+0x2>
   dea70:	4770      	bx	lr
	...

000dea74 <strdup>:
   dea74:	4b02      	ldr	r3, [pc, #8]	; (dea80 <strdup+0xc>)
   dea76:	4601      	mov	r1, r0
   dea78:	6818      	ldr	r0, [r3, #0]
   dea7a:	f000 b803 	b.w	dea84 <_strdup_r>
   dea7e:	bf00      	nop
   dea80:	2003dc4c 	.word	0x2003dc4c

000dea84 <_strdup_r>:
   dea84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dea86:	4604      	mov	r4, r0
   dea88:	4608      	mov	r0, r1
   dea8a:	460d      	mov	r5, r1
   dea8c:	f000 f80f 	bl	deaae <strlen>
   dea90:	1c42      	adds	r2, r0, #1
   dea92:	4611      	mov	r1, r2
   dea94:	4620      	mov	r0, r4
   dea96:	9201      	str	r2, [sp, #4]
   dea98:	f7fc f992 	bl	dadc0 <_malloc_r>
   dea9c:	4604      	mov	r4, r0
   dea9e:	b118      	cbz	r0, deaa8 <_strdup_r+0x24>
   deaa0:	9a01      	ldr	r2, [sp, #4]
   deaa2:	4629      	mov	r1, r5
   deaa4:	f7ff ff34 	bl	de910 <memcpy>
   deaa8:	4620      	mov	r0, r4
   deaaa:	b003      	add	sp, #12
   deaac:	bd30      	pop	{r4, r5, pc}

000deaae <strlen>:
   deaae:	4603      	mov	r3, r0
   deab0:	f813 2b01 	ldrb.w	r2, [r3], #1
   deab4:	2a00      	cmp	r2, #0
   deab6:	d1fb      	bne.n	deab0 <strlen+0x2>
   deab8:	1a18      	subs	r0, r3, r0
   deaba:	3801      	subs	r0, #1
   deabc:	4770      	bx	lr

000deabe <strncmp>:
   deabe:	b510      	push	{r4, lr}
   deac0:	b16a      	cbz	r2, deade <strncmp+0x20>
   deac2:	3901      	subs	r1, #1
   deac4:	1884      	adds	r4, r0, r2
   deac6:	f810 3b01 	ldrb.w	r3, [r0], #1
   deaca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   deace:	4293      	cmp	r3, r2
   dead0:	d103      	bne.n	deada <strncmp+0x1c>
   dead2:	42a0      	cmp	r0, r4
   dead4:	d001      	beq.n	deada <strncmp+0x1c>
   dead6:	2b00      	cmp	r3, #0
   dead8:	d1f5      	bne.n	deac6 <strncmp+0x8>
   deada:	1a98      	subs	r0, r3, r2
   deadc:	bd10      	pop	{r4, pc}
   deade:	4610      	mov	r0, r2
   deae0:	e7fc      	b.n	deadc <strncmp+0x1e>

000deae2 <strncpy>:
   deae2:	b510      	push	{r4, lr}
   deae4:	3901      	subs	r1, #1
   deae6:	4603      	mov	r3, r0
   deae8:	b132      	cbz	r2, deaf8 <strncpy+0x16>
   deaea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   deaee:	f803 4b01 	strb.w	r4, [r3], #1
   deaf2:	3a01      	subs	r2, #1
   deaf4:	2c00      	cmp	r4, #0
   deaf6:	d1f7      	bne.n	deae8 <strncpy+0x6>
   deaf8:	441a      	add	r2, r3
   deafa:	2100      	movs	r1, #0
   deafc:	4293      	cmp	r3, r2
   deafe:	d100      	bne.n	deb02 <strncpy+0x20>
   deb00:	bd10      	pop	{r4, pc}
   deb02:	f803 1b01 	strb.w	r1, [r3], #1
   deb06:	e7f9      	b.n	deafc <strncpy+0x1a>

000deb08 <strrchr>:
   deb08:	b538      	push	{r3, r4, r5, lr}
   deb0a:	4603      	mov	r3, r0
   deb0c:	460c      	mov	r4, r1
   deb0e:	b969      	cbnz	r1, deb2c <strrchr+0x24>
   deb10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   deb14:	f7ff bf84 	b.w	dea20 <strchr>
   deb18:	1c43      	adds	r3, r0, #1
   deb1a:	4605      	mov	r5, r0
   deb1c:	4621      	mov	r1, r4
   deb1e:	4618      	mov	r0, r3
   deb20:	f7ff ff7e 	bl	dea20 <strchr>
   deb24:	2800      	cmp	r0, #0
   deb26:	d1f7      	bne.n	deb18 <strrchr+0x10>
   deb28:	4628      	mov	r0, r5
   deb2a:	bd38      	pop	{r3, r4, r5, pc}
   deb2c:	2500      	movs	r5, #0
   deb2e:	e7f5      	b.n	deb1c <strrchr+0x14>

000deb30 <__strtok_r>:
   deb30:	b5f0      	push	{r4, r5, r6, r7, lr}
   deb32:	b908      	cbnz	r0, deb38 <__strtok_r+0x8>
   deb34:	6810      	ldr	r0, [r2, #0]
   deb36:	b188      	cbz	r0, deb5c <__strtok_r+0x2c>
   deb38:	4604      	mov	r4, r0
   deb3a:	4620      	mov	r0, r4
   deb3c:	f814 5b01 	ldrb.w	r5, [r4], #1
   deb40:	460f      	mov	r7, r1
   deb42:	f817 6b01 	ldrb.w	r6, [r7], #1
   deb46:	b91e      	cbnz	r6, deb50 <__strtok_r+0x20>
   deb48:	b965      	cbnz	r5, deb64 <__strtok_r+0x34>
   deb4a:	6015      	str	r5, [r2, #0]
   deb4c:	4628      	mov	r0, r5
   deb4e:	e005      	b.n	deb5c <__strtok_r+0x2c>
   deb50:	42b5      	cmp	r5, r6
   deb52:	d1f6      	bne.n	deb42 <__strtok_r+0x12>
   deb54:	2b00      	cmp	r3, #0
   deb56:	d1f0      	bne.n	deb3a <__strtok_r+0xa>
   deb58:	6014      	str	r4, [r2, #0]
   deb5a:	7003      	strb	r3, [r0, #0]
   deb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   deb5e:	461c      	mov	r4, r3
   deb60:	e00c      	b.n	deb7c <__strtok_r+0x4c>
   deb62:	b915      	cbnz	r5, deb6a <__strtok_r+0x3a>
   deb64:	f814 3b01 	ldrb.w	r3, [r4], #1
   deb68:	460e      	mov	r6, r1
   deb6a:	f816 5b01 	ldrb.w	r5, [r6], #1
   deb6e:	42ab      	cmp	r3, r5
   deb70:	d1f7      	bne.n	deb62 <__strtok_r+0x32>
   deb72:	2b00      	cmp	r3, #0
   deb74:	d0f3      	beq.n	deb5e <__strtok_r+0x2e>
   deb76:	2300      	movs	r3, #0
   deb78:	f804 3c01 	strb.w	r3, [r4, #-1]
   deb7c:	6014      	str	r4, [r2, #0]
   deb7e:	e7ed      	b.n	deb5c <__strtok_r+0x2c>

000deb80 <strtok_r>:
   deb80:	2301      	movs	r3, #1
   deb82:	f7ff bfd5 	b.w	deb30 <__strtok_r>
	...

000deb88 <_strtol_l.isra.0>:
   deb88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   deb8c:	4e3a      	ldr	r6, [pc, #232]	; (dec78 <_strtol_l.isra.0+0xf0>)
   deb8e:	4686      	mov	lr, r0
   deb90:	468c      	mov	ip, r1
   deb92:	4660      	mov	r0, ip
   deb94:	f81c 4b01 	ldrb.w	r4, [ip], #1
   deb98:	5da5      	ldrb	r5, [r4, r6]
   deb9a:	f015 0508 	ands.w	r5, r5, #8
   deb9e:	d1f8      	bne.n	deb92 <_strtol_l.isra.0+0xa>
   deba0:	2c2d      	cmp	r4, #45	; 0x2d
   deba2:	d133      	bne.n	dec0c <_strtol_l.isra.0+0x84>
   deba4:	f89c 4000 	ldrb.w	r4, [ip]
   deba8:	f04f 0801 	mov.w	r8, #1
   debac:	f100 0c02 	add.w	ip, r0, #2
   debb0:	2b00      	cmp	r3, #0
   debb2:	d05c      	beq.n	dec6e <_strtol_l.isra.0+0xe6>
   debb4:	2b10      	cmp	r3, #16
   debb6:	d10c      	bne.n	debd2 <_strtol_l.isra.0+0x4a>
   debb8:	2c30      	cmp	r4, #48	; 0x30
   debba:	d10a      	bne.n	debd2 <_strtol_l.isra.0+0x4a>
   debbc:	f89c 0000 	ldrb.w	r0, [ip]
   debc0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   debc4:	2858      	cmp	r0, #88	; 0x58
   debc6:	d14d      	bne.n	dec64 <_strtol_l.isra.0+0xdc>
   debc8:	f89c 4001 	ldrb.w	r4, [ip, #1]
   debcc:	2310      	movs	r3, #16
   debce:	f10c 0c02 	add.w	ip, ip, #2
   debd2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   debd6:	3f01      	subs	r7, #1
   debd8:	2600      	movs	r6, #0
   debda:	fbb7 f9f3 	udiv	r9, r7, r3
   debde:	4630      	mov	r0, r6
   debe0:	fb03 7a19 	mls	sl, r3, r9, r7
   debe4:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   debe8:	2d09      	cmp	r5, #9
   debea:	d818      	bhi.n	dec1e <_strtol_l.isra.0+0x96>
   debec:	462c      	mov	r4, r5
   debee:	42a3      	cmp	r3, r4
   debf0:	dd24      	ble.n	dec3c <_strtol_l.isra.0+0xb4>
   debf2:	1c75      	adds	r5, r6, #1
   debf4:	d007      	beq.n	dec06 <_strtol_l.isra.0+0x7e>
   debf6:	4581      	cmp	r9, r0
   debf8:	d31d      	bcc.n	dec36 <_strtol_l.isra.0+0xae>
   debfa:	d101      	bne.n	dec00 <_strtol_l.isra.0+0x78>
   debfc:	45a2      	cmp	sl, r4
   debfe:	db1a      	blt.n	dec36 <_strtol_l.isra.0+0xae>
   dec00:	fb00 4003 	mla	r0, r0, r3, r4
   dec04:	2601      	movs	r6, #1
   dec06:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dec0a:	e7eb      	b.n	debe4 <_strtol_l.isra.0+0x5c>
   dec0c:	2c2b      	cmp	r4, #43	; 0x2b
   dec0e:	bf08      	it	eq
   dec10:	f89c 4000 	ldrbeq.w	r4, [ip]
   dec14:	46a8      	mov	r8, r5
   dec16:	bf08      	it	eq
   dec18:	f100 0c02 	addeq.w	ip, r0, #2
   dec1c:	e7c8      	b.n	debb0 <_strtol_l.isra.0+0x28>
   dec1e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dec22:	2d19      	cmp	r5, #25
   dec24:	d801      	bhi.n	dec2a <_strtol_l.isra.0+0xa2>
   dec26:	3c37      	subs	r4, #55	; 0x37
   dec28:	e7e1      	b.n	debee <_strtol_l.isra.0+0x66>
   dec2a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dec2e:	2d19      	cmp	r5, #25
   dec30:	d804      	bhi.n	dec3c <_strtol_l.isra.0+0xb4>
   dec32:	3c57      	subs	r4, #87	; 0x57
   dec34:	e7db      	b.n	debee <_strtol_l.isra.0+0x66>
   dec36:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dec3a:	e7e4      	b.n	dec06 <_strtol_l.isra.0+0x7e>
   dec3c:	1c73      	adds	r3, r6, #1
   dec3e:	d106      	bne.n	dec4e <_strtol_l.isra.0+0xc6>
   dec40:	2322      	movs	r3, #34	; 0x22
   dec42:	f8ce 3000 	str.w	r3, [lr]
   dec46:	4638      	mov	r0, r7
   dec48:	b942      	cbnz	r2, dec5c <_strtol_l.isra.0+0xd4>
   dec4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dec4e:	f1b8 0f00 	cmp.w	r8, #0
   dec52:	d000      	beq.n	dec56 <_strtol_l.isra.0+0xce>
   dec54:	4240      	negs	r0, r0
   dec56:	2a00      	cmp	r2, #0
   dec58:	d0f7      	beq.n	dec4a <_strtol_l.isra.0+0xc2>
   dec5a:	b10e      	cbz	r6, dec60 <_strtol_l.isra.0+0xd8>
   dec5c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dec60:	6011      	str	r1, [r2, #0]
   dec62:	e7f2      	b.n	dec4a <_strtol_l.isra.0+0xc2>
   dec64:	2430      	movs	r4, #48	; 0x30
   dec66:	2b00      	cmp	r3, #0
   dec68:	d1b3      	bne.n	debd2 <_strtol_l.isra.0+0x4a>
   dec6a:	2308      	movs	r3, #8
   dec6c:	e7b1      	b.n	debd2 <_strtol_l.isra.0+0x4a>
   dec6e:	2c30      	cmp	r4, #48	; 0x30
   dec70:	d0a4      	beq.n	debbc <_strtol_l.isra.0+0x34>
   dec72:	230a      	movs	r3, #10
   dec74:	e7ad      	b.n	debd2 <_strtol_l.isra.0+0x4a>
   dec76:	bf00      	nop
   dec78:	000e036b 	.word	0x000e036b

000dec7c <strtol>:
   dec7c:	4613      	mov	r3, r2
   dec7e:	460a      	mov	r2, r1
   dec80:	4601      	mov	r1, r0
   dec82:	4802      	ldr	r0, [pc, #8]	; (dec8c <strtol+0x10>)
   dec84:	6800      	ldr	r0, [r0, #0]
   dec86:	f7ff bf7f 	b.w	deb88 <_strtol_l.isra.0>
   dec8a:	bf00      	nop
   dec8c:	2003dc4c 	.word	0x2003dc4c

000dec90 <close>:
   dec90:	4b02      	ldr	r3, [pc, #8]	; (dec9c <close+0xc>)
   dec92:	4601      	mov	r1, r0
   dec94:	6818      	ldr	r0, [r3, #0]
   dec96:	f000 b8c9 	b.w	dee2c <_close_r>
   dec9a:	bf00      	nop
   dec9c:	2003dc4c 	.word	0x2003dc4c

000deca0 <fstat>:
   deca0:	4b02      	ldr	r3, [pc, #8]	; (decac <fstat+0xc>)
   deca2:	460a      	mov	r2, r1
   deca4:	4601      	mov	r1, r0
   deca6:	6818      	ldr	r0, [r3, #0]
   deca8:	f000 b8d0 	b.w	dee4c <_fstat_r>
   decac:	2003dc4c 	.word	0x2003dc4c

000decb0 <lseek>:
   decb0:	4613      	mov	r3, r2
   decb2:	460a      	mov	r2, r1
   decb4:	4601      	mov	r1, r0
   decb6:	4802      	ldr	r0, [pc, #8]	; (decc0 <lseek+0x10>)
   decb8:	6800      	ldr	r0, [r0, #0]
   decba:	f000 b8dd 	b.w	dee78 <_lseek_r>
   decbe:	bf00      	nop
   decc0:	2003dc4c 	.word	0x2003dc4c

000decc4 <open>:
   decc4:	b40e      	push	{r1, r2, r3}
   decc6:	b503      	push	{r0, r1, lr}
   decc8:	ab03      	add	r3, sp, #12
   decca:	4601      	mov	r1, r0
   deccc:	4806      	ldr	r0, [pc, #24]	; (dece8 <open+0x24>)
   decce:	f853 2b04 	ldr.w	r2, [r3], #4
   decd2:	9301      	str	r3, [sp, #4]
   decd4:	6800      	ldr	r0, [r0, #0]
   decd6:	9b04      	ldr	r3, [sp, #16]
   decd8:	f000 f8e0 	bl	dee9c <_open_r>
   decdc:	b002      	add	sp, #8
   decde:	f85d eb04 	ldr.w	lr, [sp], #4
   dece2:	b003      	add	sp, #12
   dece4:	4770      	bx	lr
   dece6:	bf00      	nop
   dece8:	2003dc4c 	.word	0x2003dc4c

000decec <read>:
   decec:	4613      	mov	r3, r2
   decee:	460a      	mov	r2, r1
   decf0:	4601      	mov	r1, r0
   decf2:	4802      	ldr	r0, [pc, #8]	; (decfc <read+0x10>)
   decf4:	6800      	ldr	r0, [r0, #0]
   decf6:	f000 b8e3 	b.w	deec0 <_read_r>
   decfa:	bf00      	nop
   decfc:	2003dc4c 	.word	0x2003dc4c

000ded00 <unlink>:
   ded00:	4b02      	ldr	r3, [pc, #8]	; (ded0c <unlink+0xc>)
   ded02:	4601      	mov	r1, r0
   ded04:	6818      	ldr	r0, [r3, #0]
   ded06:	f000 b80d 	b.w	ded24 <_unlink_r>
   ded0a:	bf00      	nop
   ded0c:	2003dc4c 	.word	0x2003dc4c

000ded10 <write>:
   ded10:	4613      	mov	r3, r2
   ded12:	460a      	mov	r2, r1
   ded14:	4601      	mov	r1, r0
   ded16:	4802      	ldr	r0, [pc, #8]	; (ded20 <write+0x10>)
   ded18:	6800      	ldr	r0, [r0, #0]
   ded1a:	f000 b813 	b.w	ded44 <_write_r>
   ded1e:	bf00      	nop
   ded20:	2003dc4c 	.word	0x2003dc4c

000ded24 <_unlink_r>:
   ded24:	b538      	push	{r3, r4, r5, lr}
   ded26:	4d06      	ldr	r5, [pc, #24]	; (ded40 <_unlink_r+0x1c>)
   ded28:	2300      	movs	r3, #0
   ded2a:	4604      	mov	r4, r0
   ded2c:	4608      	mov	r0, r1
   ded2e:	602b      	str	r3, [r5, #0]
   ded30:	f7fb fdf4 	bl	da91c <_unlink>
   ded34:	1c43      	adds	r3, r0, #1
   ded36:	d102      	bne.n	ded3e <_unlink_r+0x1a>
   ded38:	682b      	ldr	r3, [r5, #0]
   ded3a:	b103      	cbz	r3, ded3e <_unlink_r+0x1a>
   ded3c:	6023      	str	r3, [r4, #0]
   ded3e:	bd38      	pop	{r3, r4, r5, pc}
   ded40:	2003e7f0 	.word	0x2003e7f0

000ded44 <_write_r>:
   ded44:	b538      	push	{r3, r4, r5, lr}
   ded46:	4d07      	ldr	r5, [pc, #28]	; (ded64 <_write_r+0x20>)
   ded48:	4604      	mov	r4, r0
   ded4a:	4608      	mov	r0, r1
   ded4c:	4611      	mov	r1, r2
   ded4e:	2200      	movs	r2, #0
   ded50:	602a      	str	r2, [r5, #0]
   ded52:	461a      	mov	r2, r3
   ded54:	f7fb fdaa 	bl	da8ac <_write>
   ded58:	1c43      	adds	r3, r0, #1
   ded5a:	d102      	bne.n	ded62 <_write_r+0x1e>
   ded5c:	682b      	ldr	r3, [r5, #0]
   ded5e:	b103      	cbz	r3, ded62 <_write_r+0x1e>
   ded60:	6023      	str	r3, [r4, #0]
   ded62:	bd38      	pop	{r3, r4, r5, pc}
   ded64:	2003e7f0 	.word	0x2003e7f0

000ded68 <__register_exitproc>:
   ded68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ded6c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dee28 <__register_exitproc+0xc0>
   ded70:	4606      	mov	r6, r0
   ded72:	f8d8 0000 	ldr.w	r0, [r8]
   ded76:	461f      	mov	r7, r3
   ded78:	460d      	mov	r5, r1
   ded7a:	4691      	mov	r9, r2
   ded7c:	f000 f878 	bl	dee70 <__retarget_lock_acquire_recursive>
   ded80:	4b25      	ldr	r3, [pc, #148]	; (dee18 <__register_exitproc+0xb0>)
   ded82:	681c      	ldr	r4, [r3, #0]
   ded84:	b934      	cbnz	r4, ded94 <__register_exitproc+0x2c>
   ded86:	4c25      	ldr	r4, [pc, #148]	; (dee1c <__register_exitproc+0xb4>)
   ded88:	601c      	str	r4, [r3, #0]
   ded8a:	4b25      	ldr	r3, [pc, #148]	; (dee20 <__register_exitproc+0xb8>)
   ded8c:	b113      	cbz	r3, ded94 <__register_exitproc+0x2c>
   ded8e:	681b      	ldr	r3, [r3, #0]
   ded90:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ded94:	6863      	ldr	r3, [r4, #4]
   ded96:	2b1f      	cmp	r3, #31
   ded98:	dd07      	ble.n	dedaa <__register_exitproc+0x42>
   ded9a:	f8d8 0000 	ldr.w	r0, [r8]
   ded9e:	f000 f869 	bl	dee74 <__retarget_lock_release_recursive>
   deda2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   deda6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dedaa:	b34e      	cbz	r6, dee00 <__register_exitproc+0x98>
   dedac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dedb0:	b988      	cbnz	r0, dedd6 <__register_exitproc+0x6e>
   dedb2:	4b1c      	ldr	r3, [pc, #112]	; (dee24 <__register_exitproc+0xbc>)
   dedb4:	b923      	cbnz	r3, dedc0 <__register_exitproc+0x58>
   dedb6:	f8d8 0000 	ldr.w	r0, [r8]
   dedba:	f000 f85a 	bl	dee72 <__retarget_lock_release>
   dedbe:	e7f0      	b.n	deda2 <__register_exitproc+0x3a>
   dedc0:	f44f 7084 	mov.w	r0, #264	; 0x108
   dedc4:	f7fb ffbc 	bl	dad40 <malloc>
   dedc8:	2800      	cmp	r0, #0
   dedca:	d0f4      	beq.n	dedb6 <__register_exitproc+0x4e>
   dedcc:	2300      	movs	r3, #0
   dedce:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dedd2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dedd6:	6863      	ldr	r3, [r4, #4]
   dedd8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   deddc:	2201      	movs	r2, #1
   dedde:	409a      	lsls	r2, r3
   dede0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dede4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dede8:	4313      	orrs	r3, r2
   dedea:	2e02      	cmp	r6, #2
   dedec:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dedf0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dedf4:	bf02      	ittt	eq
   dedf6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dedfa:	431a      	orreq	r2, r3
   dedfc:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dee00:	6863      	ldr	r3, [r4, #4]
   dee02:	f8d8 0000 	ldr.w	r0, [r8]
   dee06:	1c5a      	adds	r2, r3, #1
   dee08:	3302      	adds	r3, #2
   dee0a:	6062      	str	r2, [r4, #4]
   dee0c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dee10:	f000 f830 	bl	dee74 <__retarget_lock_release_recursive>
   dee14:	2000      	movs	r0, #0
   dee16:	e7c6      	b.n	deda6 <__register_exitproc+0x3e>
   dee18:	2003e7e0 	.word	0x2003e7e0
   dee1c:	2003e754 	.word	0x2003e754
   dee20:	00000000 	.word	0x00000000
   dee24:	000dad41 	.word	0x000dad41
   dee28:	2003dcb0 	.word	0x2003dcb0

000dee2c <_close_r>:
   dee2c:	b538      	push	{r3, r4, r5, lr}
   dee2e:	4d06      	ldr	r5, [pc, #24]	; (dee48 <_close_r+0x1c>)
   dee30:	2300      	movs	r3, #0
   dee32:	4604      	mov	r4, r0
   dee34:	4608      	mov	r0, r1
   dee36:	602b      	str	r3, [r5, #0]
   dee38:	f7fb fd48 	bl	da8cc <_close>
   dee3c:	1c43      	adds	r3, r0, #1
   dee3e:	d102      	bne.n	dee46 <_close_r+0x1a>
   dee40:	682b      	ldr	r3, [r5, #0]
   dee42:	b103      	cbz	r3, dee46 <_close_r+0x1a>
   dee44:	6023      	str	r3, [r4, #0]
   dee46:	bd38      	pop	{r3, r4, r5, pc}
   dee48:	2003e7f0 	.word	0x2003e7f0

000dee4c <_fstat_r>:
   dee4c:	b538      	push	{r3, r4, r5, lr}
   dee4e:	4d07      	ldr	r5, [pc, #28]	; (dee6c <_fstat_r+0x20>)
   dee50:	2300      	movs	r3, #0
   dee52:	4604      	mov	r4, r0
   dee54:	4608      	mov	r0, r1
   dee56:	4611      	mov	r1, r2
   dee58:	602b      	str	r3, [r5, #0]
   dee5a:	f7fb fd3f 	bl	da8dc <_fstat>
   dee5e:	1c43      	adds	r3, r0, #1
   dee60:	d102      	bne.n	dee68 <_fstat_r+0x1c>
   dee62:	682b      	ldr	r3, [r5, #0]
   dee64:	b103      	cbz	r3, dee68 <_fstat_r+0x1c>
   dee66:	6023      	str	r3, [r4, #0]
   dee68:	bd38      	pop	{r3, r4, r5, pc}
   dee6a:	bf00      	nop
   dee6c:	2003e7f0 	.word	0x2003e7f0

000dee70 <__retarget_lock_acquire_recursive>:
   dee70:	4770      	bx	lr

000dee72 <__retarget_lock_release>:
   dee72:	4770      	bx	lr

000dee74 <__retarget_lock_release_recursive>:
   dee74:	4770      	bx	lr
	...

000dee78 <_lseek_r>:
   dee78:	b538      	push	{r3, r4, r5, lr}
   dee7a:	4d07      	ldr	r5, [pc, #28]	; (dee98 <_lseek_r+0x20>)
   dee7c:	4604      	mov	r4, r0
   dee7e:	4608      	mov	r0, r1
   dee80:	4611      	mov	r1, r2
   dee82:	2200      	movs	r2, #0
   dee84:	602a      	str	r2, [r5, #0]
   dee86:	461a      	mov	r2, r3
   dee88:	f7fb fd30 	bl	da8ec <_lseek>
   dee8c:	1c43      	adds	r3, r0, #1
   dee8e:	d102      	bne.n	dee96 <_lseek_r+0x1e>
   dee90:	682b      	ldr	r3, [r5, #0]
   dee92:	b103      	cbz	r3, dee96 <_lseek_r+0x1e>
   dee94:	6023      	str	r3, [r4, #0]
   dee96:	bd38      	pop	{r3, r4, r5, pc}
   dee98:	2003e7f0 	.word	0x2003e7f0

000dee9c <_open_r>:
   dee9c:	b538      	push	{r3, r4, r5, lr}
   dee9e:	4d07      	ldr	r5, [pc, #28]	; (deebc <_open_r+0x20>)
   deea0:	4604      	mov	r4, r0
   deea2:	4608      	mov	r0, r1
   deea4:	4611      	mov	r1, r2
   deea6:	2200      	movs	r2, #0
   deea8:	602a      	str	r2, [r5, #0]
   deeaa:	461a      	mov	r2, r3
   deeac:	f7fb fcf6 	bl	da89c <_open>
   deeb0:	1c43      	adds	r3, r0, #1
   deeb2:	d102      	bne.n	deeba <_open_r+0x1e>
   deeb4:	682b      	ldr	r3, [r5, #0]
   deeb6:	b103      	cbz	r3, deeba <_open_r+0x1e>
   deeb8:	6023      	str	r3, [r4, #0]
   deeba:	bd38      	pop	{r3, r4, r5, pc}
   deebc:	2003e7f0 	.word	0x2003e7f0

000deec0 <_read_r>:
   deec0:	b538      	push	{r3, r4, r5, lr}
   deec2:	4d07      	ldr	r5, [pc, #28]	; (deee0 <_read_r+0x20>)
   deec4:	4604      	mov	r4, r0
   deec6:	4608      	mov	r0, r1
   deec8:	4611      	mov	r1, r2
   deeca:	2200      	movs	r2, #0
   deecc:	602a      	str	r2, [r5, #0]
   deece:	461a      	mov	r2, r3
   deed0:	f7fb fcf4 	bl	da8bc <_read>
   deed4:	1c43      	adds	r3, r0, #1
   deed6:	d102      	bne.n	deede <_read_r+0x1e>
   deed8:	682b      	ldr	r3, [r5, #0]
   deeda:	b103      	cbz	r3, deede <_read_r+0x1e>
   deedc:	6023      	str	r3, [r4, #0]
   deede:	bd38      	pop	{r3, r4, r5, pc}
   deee0:	2003e7f0 	.word	0x2003e7f0

000deee4 <dynalib_user>:
   deee4:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   deef4:	00000000 74696e69 69616620 0064656c     ....init failed.
   def04:	746e6553 73657220 736e6f70 6f742065     Sent response to
   def14:	696c6320 20746e65 7373656d 20656761      client message 
   def24:	6425203d 6974202c 3d20656d 2c732520     = %d, time = %s,
   def34:	78656e20 65722074 74726f70 25203d20      next report = %
   def44:	696d2075 6574756e 65520073 6e6f7073     u minutes.Respon
   def54:	72206573 69656365 20646576 63637573     se received succ
   def64:	66737365 796c6c75 73655200 736e6f70     essfully.Respons
   def74:	6f6e2065 63612074 776f6e6b 6764656c     e not acknowledg
   def84:	4d006465 61737365 69206567 6e65746e     ed.Message inten
   def94:	20646564 20726f66 746f6e61 20726568     ded for another 
   defa4:	65646f6e 72724500 2d20726f 206f6e20     node.Error - no 
   defb4:	7373656d 20656761 67616c66 63657220     message flag rec
   defc4:	65766965 65440064 65706963 676e6972     eived.Decipering
   defd4:	74616420 65722061 74726f70 63654400      data report.Dec
   defe4:	72657069 6420676e 20617461 6e6b6361     iperng data ackn
   deff4:	656c776f 00656764 65636552 64657669     owledge.Received
   df004:	6f726620 6f6e206d 25206564 69772064      from node %d wi
   df014:	72206874 3d697373 2d206425 25206120     th rssi=%d - a %
   df024:	656d2073 67617373 666f2065 6e656c20     s message of len
   df034:	20687467 46006425 206d6f72 74207325     gth %d.From %s t
   df044:	7325206f 61745300 54206574 736e6172     o %s.State Trans
   df054:	6f697469 5345006e 44453554 334d2c54     ition.EST5EDT,M3
   df064:	302e322e 303a322f 30303a30 31314d2c     .2.0/2:00:00,M11
   df074:	302e312e 303a322f 30303a30 3a363000     .1.0/2:00:00.06:
   df084:	303a3030 32320030 3a39353a 53003935     00:00.22:59:59.S
   df094:	74726174 63207075 6c706d6f 20657465     tartup complete 
   df0a4:	25207461 69772073 62206874 65747461     at %s with batte
   df0b4:	25207972 66322e34 636f6c00 74206c61     ry %4.2f.local t
   df0c4:	3a656d69 00732520 656d6974 20666f20     ime: %s.time of 
   df0d4:	7478656e 65766520 6920746e 25203a73     next event is: %
   df0e4:	68772073 20686369 25207369 7320756c     s which is %lu s
   df0f4:	6e6f6365 61207364 00796177 65656c53     econds away.Slee
   df104:	6f662070 69252072 63657320 73646e6f     p for %i seconds
   df114:	6b6f5700 69772065 75206874 20726573     .Woke with user 
   df124:	74747562 2d206e6f 726f6e20 206c616d     button - normal 
   df134:	7265706f 6f697461 4900736e 6874206e     operations.In th
   df144:	6f4c2065 73204152 65746174 74697720     e LoRA state wit
   df154:	20612068 71657266 636e6575 666f2079     h a frequency of
   df164:	20752520 756e696d 00736574 353a3132      %u minutes.21:5
   df174:	39353a39 6e227b00 6965646f 253a2264     9:59.{"nodeid":%
   df184:	22202c75 72756f68 3a22796c 202c7525     u, "hourly":%u, 
   df194:	69616422 3a22796c 222c7525 74746162     "daily":%u,"batt
   df1a4:	22797265 2c64253a 79656b22 223a2231     ery":%d,"key1":"
   df1b4:	2c227325 6d657422 253a2270 22202c64     %s","temp":%d, "
   df1c4:	65736572 3a227374 202c6425 656c6122     resets":%d, "ale
   df1d4:	22737472 2c64253a 73737222 253a2269     rts":%d,"rssi":%
   df1e4:	22202c64 2267736d 2c64253a 6d697422     d, "msg":%d,"tim
   df1f4:	61747365 3a22706d 30756c25 007d3030     estamp":%lu000}.
   df204:	64696255 2d73746f 41526f4c 6f6f482d     Ubidots-LoRA-Hoo
   df214:	31762d6b 00000000                       k-v1....

000df21c <_ZTV8MB85RC64>:
	...
   df224:	000d4469 000d447d 000d7d05 000d7d9b     iD..}D...}...}..
   df234:	000d7e1d 74696e49 7a696c61 20676e69     .~..Initalizing 
   df244:	20656874 4d6e6970 7365646f 696e4900     the pinModes.Ini
   df254:	6c616974 6e697a69 6f502067 20726577     tializing Power 
   df264:	666e6f43 00006769                       Config..

000df26c <BLUE_LED>:
   df26c:	                                         ..

000df26e <BUTTON_PIN>:
   df26e:	                                         ..

000df270 <RFM95_CS>:
   df270:	                                         ..

000df272 <RFM95_INT>:
   df272:	                                         ..

000df274 <TMP36_SENSE_PIN>:
   df274:	7525000f 6e696d20 73657275 70655200     ..%u minures.Rep
   df284:	2074726f 71657266 636e6575 69772079     ort frequency wi
   df294:	62206c6c 65732065 6f742074 20692520     ll be set to %i 
   df2a4:	756e696d 20736574 6e207461 20747865     minutes at next 
   df2b4:	41526f4c 6e6f6320 7463656e 6d695400     LoRA connect.Tim
   df2c4:	68530065 2074726f 6f706572 6e697472     e.Short reportin
   df2d4:	72662067 65757165 2079636e 7265766f     g frequency over
   df2e4:	6469722d 6c207365 7020776f 7265776f     -rides low power
   df2f4:	73657900 006f6e00 72636e49 69736165     .yes.no.Increasi
   df304:	7220676e 726f7065 676e6974 65726620     ng reporting fre
   df314:	6e657571 74207963 3231206f 6e696d20     quency to 12 min
   df324:	73657475 20734900 20776f4c 65776f50     utes.Is Low Powe
   df334:	6f4d2072 73206564 203f7465 53007325     r Mode set? %s.S
   df344:	74207465 6556206f 6f7a6972 4953206e     et to Verizon SI
   df354:	6553004d 6f742074 72615020 6c636974     M.Set to Particl
   df364:	49532065 6e49004d 65687420 73696420     e SIM.In the dis
   df374:	6e6e6f63 20746365 6d6f7266 72615020     connect from Par
   df384:	6c636974 75662065 6974636e 46006e6f     ticle function.F
   df394:	656c6961 6f742064 73696420 6e6e6f63     ailed to disconn
   df3a4:	20746365 6d6f7266 72615020 6c636974     ect from Particl
   df3b4:	69440065 6e6f6373 7463656e 66206465     e.Disconnected f
   df3c4:	206d6f72 74726150 656c6369 206e6920     rom Particle in 
   df3d4:	73206925 6e6f6365 46007364 656c6961     %i seconds.Faile
   df3e4:	6f742064 72757420 666f206e 68742066     d to turn off th
   df3f4:	65432065 6c756c6c 6d207261 6d65646f     e Cellular modem
   df404:	72755400 2064656e 2066666f 20656874     .Turned off the 
   df414:	6c6c6563 72616c75 646f6d20 69206d65     cellular modem i
   df424:	6925206e 63657320 73646e6f 73655900     n %i seconds.Yes
   df434:	006f4e00 69726556 006e6f7a 6e6b6e55     .No.Verizon.Unkn
   df444:	006e776f 20746f4e 72616843 676e6967     own.Not Charging
   df454:	61684300 64656772 73694400 72616863     .Charged.Dischar
   df464:	676e6967 75614600 4400746c 6e6f6369     ging.Fault.Dicon
   df474:	7463656e 49006465 6974696e 7a696c61     nected.Initializ
   df484:	20676e69 74726150 656c6369 6e756620     ing Particle fun
   df494:	6f697463 6120736e 7620646e 61697261     ctions and varia
   df4a4:	73656c62 776f4c00 776f5020 4d207265     bles.Low Power M
   df4b4:	0065646f 656c6552 00657361 6e676953     ode.Release.Sign
   df4c4:	73006c61 65746174 6843664f 61420067     al.stateOfChg.Ba
   df4d4:	72657474 6e6f4379 74786574 70655200     tteryContext.Rep
   df4e4:	6974726f 4620676e 75716572 79636e65     orting Frequency
   df4f4:	4d495300 72614320 65530064 6f4c2074     .SIM Card.Set Lo
   df504:	6f502077 00726577 20746553 71657246     w Power.Set Freq
   df514:	636e6575 00000079                       uency...

000df51c <_ZTVN5spark10LogHandlerE>:
	...
   df52c:	000d40a5 000d4d41                       .@..AM..

000df534 <_ZTVN5spark16SerialLogHandlerE>:
	...
   df53c:	000d4dc9 000d4dfd 000dcb05 000d4d43     .M...M......CM..
   df54c:	64616f4c 20676e69 74737953 44206d65     Loading System D
   df55c:	75616665 0073746c 64616f4c 20676e69     efaults.Loading 
   df56c:	74737973 64206d65 75616665 0073746c     system defaults.
   df57c:	53737973 73756174 6a626f20 20746365     sysStaus object 
   df58c:	726f7473 61206465 6820646e 20687361     stored and hash 
   df59c:	61647075 00646574 72727563 20746e65     updated.current 
   df5ac:	656a626f 73207463 65726f74 6e612064     object stored an
   df5bc:	61682064 75206873 74616470 49006465     d hash updated.I
   df5cc:	6974696e 7a696c61 20676e69 20656874     nitializing the 
   df5dc:	656a624f 53207463 65726f74 41524600     Object Store.FRA
   df5ec:	696d204d 74616d73 202c6863 73617265     M mismatch, eras
   df5fc:	20676e69 20646e61 61636f6c 676e6966     ing and locafing
   df60c:	66656420 746c7561 66692073 20746920      defaults if it 
   df61c:	63656863 6f20736b 46007475 204d4152     checks out.FRAM 
   df62c:	74696e69 696c6169 2c64657a 616f6c20     initialized, loa
   df63c:	676e6964 6a626f20 73746365 00000000     ding objects....

000df64c <_ZL17FRAMversionNumber>:
   df64c:	00000001 656e6f4e 46695700 53470069     ....None.WiFi.GS
   df65c:	4d55004d 43005354 00414d44 0045544c     M.UMTS.CDMA.LTE.
   df66c:	45454549 31323038 4c003435 435f4554     IEEE802154.LTE_C
   df67c:	4d5f5441 544c0031 41435f45 424e5f54     AT_M1.LTE_CAT_NB
   df68c:	73250031 253a5320 66302e32 202c2525     1.%s S:%2.0f%%, 
   df69c:	32253a51 2566302e 25002025 00432069     Q:%2.0f%% .%i C.
   df6ac:	65746e49 6c616e72 6d655420 61726570     Internal Tempera
   df6bc:	65727574 20736920 00007325 000df440     ture is %s..@...
   df6cc:	000df650 000df655 000df65a 000df65e     P...U...Z...^...
   df6dc:	000df663 000df668 000df66c 000df677     c...h...l...w...
   df6ec:	000df682 6c696166 74206465 6572206f     ....failed to re
   df6fc:	72206461 64416765 253d7264 20783230     ad regAddr=%02x 
   df70c:	6e756f63 75253d74 69616600 2064656c     count=%u.failed 
   df71c:	72206f74 20646165 41676572 3d726464     to read regAddr=
   df72c:	78323025 61747320 64253d74 554f4600     %02x stat=%d.FOU
   df73c:	69642054 6f6e2064 6f672074 47494820     T did not go HIG
   df74c:	6f6e0048 65642074 74636574 66006465     H.not detected.f
   df75c:	656c6961 6f742064 69727720 72206574     ailed to write r
   df76c:	64416765 253d7264 20783230 74617473     egAddr=%02x stat
   df77c:	0064253d 57746573 25205444 61770064     =%d.setWDT %d.wa
   df78c:	64686374 6320676f 7261656c 62206465     tchdog cleared b
   df79c:	75736552 253d746c 61770064 64686374     Result=%d.watchd
   df7ac:	7320676f 66207465 5372756f 3d736365     og set fourSecs=
   df7bc:	62206425 75736552 253d746c 65720064     %d bResult=%d.re
   df7cc:	43746573 69666e6f 78302867 6c383025     setConfig(0x%08l
   df7dc:	57002978 48435441 00474f44 50454544     x).WATCHDOG.DEEP
   df7ec:	574f505f 445f5245 004e574f 4e554f43     _POWER_DOWN.COUN
   df7fc:	574f4454 49545f4e 0052454d 52414c41     TDOWN_TIMER.ALAR
   df80c:	6166004d 72756c69 6e692065 64707520     M.failure in upd
   df81c:	57657461 52656b61 6f736165 6425206e     ateWakeReason %d
   df82c:	6b617700 65722065 6e6f7361 25203d20     .wake reason = %
   df83c:	30250073 252d6434 2d643230 64323025     s.%04d-%02d-%02d
   df84c:	32302520 30253a64 253a6432 00643230      %02d:%02d:%02d.
   df85c:	52746567 73416374 25206d54 65730073     getRtcAsTm %s.se
   df86c:	79732074 6d657473 6f6c6320 66206b63     t system clock f
   df87c:	206d6f72 20435452 66007325 656c6961     rom RTC %s.faile
   df88c:	6f742064 74656420 20746365 38314241     d to detect AB18
   df89c:	73003530 74527465 54734163 7325206d     05.setRtcAsTm %s
   df8ac:	69616600 6572756c 206e6920 52746573     .failure in setR
   df8bc:	72466374 6d546d6f 00642520 20746573     tcFromTm %d.set 
   df8cc:	20435452 6d6f7266 6f6c6320 25206475     RTC from cloud %
   df8dc:	70610073 62612e70 35303831 00000000     s.app.ab1805....

000df8ec <_ZTV6AB1805>:
	...
   df8f4:	000d5935 000d5937 000d5ea3 000d5f29     5Y..7Y...^..)_..
   df904:	6b636142 756f7267 7550646e 73696c62     BackgroundPublis
   df914:	004b5268                                hRK.

000df918 <_ZTV19BackgroundPublishRK>:
	...
   df920:	000d6459 000d6475 253a6425 64253a64     Yd..ud..%d:%d:%d
   df930:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   df940:	4d003935 252e6425 64252e64 5a002c00     59.M%d.%d.%d.,.Z
   df950:	302b2500 253a6433 00753230 74636576     .%+03d:%02u.vect
   df960:	3a3a726f 725f4d5f 6c6c6165 695f636f     or::_M_realloc_i
   df970:	7265736e 00000074                       nsert...

000df978 <_ZTV9LocalTime>:
	...
   df980:	000d67b1 000d67c9                       .g...g..

000df988 <_ZTV12LocalTimeHMS>:
	...
   df990:	000d6753 000d6765                       Sg..eg..

000df998 <_ZTV15LocalTimeChange>:
	...
   df9a0:	000d6755 000d6773                       Ug..sg..

000df9a8 <_ZTV22LocalTimePosixTimezone>:
	...
   df9b0:	000d6781 000d679d 74697277 74614465     .g...g..writeDat
   df9c0:	61662061 64656c69 72756420 20676e69     a failed during 
   df9d0:	73617265 72662065 64416d61 253d7264     erase framAddr=%
   df9e0:	00000075                                u...

000df9e4 <_ZTV6MB85RC>:
	...
   df9ec:	000d7c53 000d7c55 000d7d05 000d7d9b     S|..U|...}...}..
   df9fc:	000d7e1d 656c6966 3d6d754e 73206425     .~..fileNum=%d s
   dfa0c:	3d657a69 00646c25 64616572 75657551     ize=%ld.readQueu
   dfa1c:	6c694665 64252065 65766520 253d746e     eFile %d event=%
   dfa2c:	61642073 253d6174 65720073 75516461     s data=%s.readQu
   dfa3c:	46657565 20656c69 63206425 7572726f     eueFile %d corru
   dfa4c:	64657470 65766520 6e20746e 20656d61     pted event name 
   dfa5c:	6420726f 00617461 64616572 75657551     or data.readQueu
   dfa6c:	6c694665 64252065 64616220 67616d20     eFile %d bad mag
   dfa7c:	253d6369 786c3830 72657620 6e6f6973     ic=%08lx version
   dfa8c:	2075253d 64616568 69537265 253d657a     =%u headerSize=%
   dfa9c:	616e2075 654c656d 75253d6e 73752f00     u nameLen=%u./us
   dfaac:	75702f72 65757162 77006575 65746972     r/pubqueue.write
   dfabc:	75657551 466f5465 73656c69 6c696620     QueueToFiles fil
   dfacc:	6d754e65 0064253d 65736572 726f2074     eNum=%d.reset or
   dfadc:	73696420 6e6e6f63 20746365 6e657665      disconnect even
   dfaec:	73202c74 20657661 656c6966 6f742073     t, save files to
   dfafc:	65757120 72006575 64006d61 61637369      queue.ram.disca
   dfb0c:	6e696472 6f632067 70757272 20646574     rding corrupted 
   dfb1c:	656c6966 00642520 6c627570 69687369     file %d.publishi
   dfb2c:	2520676e 76652073 3d746e65 64207325     ng %s event=%s d
   dfb3c:	3d617461 64007325 61637369 64656472     ata=%s.discarded
   dfb4c:	65766520 2520746e 59530064 4d455453      event %d.SYSTEM
   dfb5c:	5248545f 28444145 42414e45 2944454c     _THREAD(ENABLED)
   dfb6c:	20736920 75716572 64657269 62757000      is required.pub
   dfb7c:	6873696c 6d6d6f43 65206e6f 746e6576     lishCommon event
   dfb8c:	656d614e 2073253d 6e657665 74614474     Name=%s eventDat
   dfb9c:	73253d61 6e616300 20746f6e 61657263     a=%s.cannot crea
   dfbac:	73206574 3a3a6474 75716564 616c2065     te std::deque la
   dfbbc:	72656772 61687420 616d206e 69735f78     rger than max_si
   dfbcc:	2928657a 6c696600 65755165 654c6575     ze().fileQueueLe
   dfbdc:	75253d6e 6d617220 75657551 6e654c65     n=%u ramQueueLen
   dfbec:	2075253d 6e6e6f63 65746365 64253d64     =%u connected=%d
   dfbfc:	65757100 20646575 72206f74 75516d61     .queued to ramQu
   dfc0c:	00657565 6c627570 20687369 63637573     eue.publish succ
   dfc1c:	20737365 72006425 766f6d65 66206465     ess %d.removed f
   dfc2c:	20656c69 70006425 696c6275 66206873     ile %d.publish f
   dfc3c:	656c6961 64252064 69727700 676e6974     ailed %d.writing
   dfc4c:	206f7420 656c6966 66612073 20726574      to files after 
   dfc5c:	6c627570 20687369 6c696166 00657275     publish failure.
   dfc6c:	2e707061 71627570 00000000              app.pubq....

000dfc78 <_ZTV17PublishQueuePosix>:
	...
   dfc80:	000d86b1 000d8989 000d89ad              ............

000dfc8c <_ZTV15RHGenericDriver>:
	...
   dfc9c:	000d8ac9 000d40a5 000d40a5 000d40a5     .....@...@...@..
   dfcac:	000d40a5 000d8b2b 000d8acd 000d8b7b     .@..+.......{...
   dfcbc:	000d8b49 000d8b9f 000d8ad7 000d8adf     I...............
   dfccc:	000d8ae3 000d8ae7 000d8aeb 000d8aef     ................
   dfcdc:	000d8adb 000d8afb 000d8aff 000d8b03     ................
   dfcec:	000d8b07 000d8b0b 000d8b11 000d8b15     ................
   dfcfc:	000d8ad7 000d8b19 000d8b1f 000d8b25     ............%...

000dfd0c <_ZTV12RHGenericSPI>:
	...
   dfd14:	000d40a5 000d8bfd 000d8bff 000d40a5     .@...........@..
   dfd24:	000d40a5 000d8c07 000d8c0b 000d8c0f     .@..............
   dfd34:	000d8c01 000d8c03 000d8c05 61666564     ............defa
   dfd44:	20746c75 42534d00 42534c00 50533c00     ult .MSB.LSB.<SP
   dfd54:	74655349 676e6974 65642073 6c756166     ISettings defaul
   dfd64:	3c003e74 53495053 69747465 2073676e     t>.<SPISettings 
   dfd74:	75257325 20732520 45444f4d 003e7525     %s%u %s MODE%u>.

000dfd84 <_ZTVN8particle11SPISettingsE>:
	...
   dfd8c:	000d8c55 000d8c29 000d8c2b              U...)...+...

000dfd98 <_ZTV13RHHardwareSPI>:
	...
   dfda0:	000d8d09 000d8d1d 000d8d2b 000d8d39     ........+...9...
   dfdb0:	000d8da5 000d8c07 000d8c0b 000d8c0f     ................
   dfdc0:	000d8db3 000d8dc7 000d8dd5              ............

000dfdcc <_ZTV6RHMesh>:
	...
   dfdd4:	000d8ea5 000d91ad 000d8e01 000d8ded     ................

000dfde4 <_ZTV8RHRouter>:
	...
   dfdec:	000d9413 000d9457                       ....W...

000dfdf4 <_ZTV11RHSPIDriver>:
	...
   dfe04:	000d96f5 000d40a5 000d40a5 000d40a5     .....@...@...@..
   dfe14:	000d40a5 000d8b2b 000d8acd 000d8b7b     .@..+.......{...
   dfe24:	000d8b49 000d8b9f 000d8ad7 000d8adf     I...............
   dfe34:	000d8ae3 000d8ae7 000d8aeb 000d8aef     ................
   dfe44:	000d8adb 000d8afb 000d8aff 000d8b03     ................
   dfe54:	000d8b07 000d8b0b 000d8b11 000d8b15     ................
   dfe64:	000d8ad7 000d8b19 000d8b1f 000d8b25     ............%...
   dfe74:	000d9721 000d972b                       !...+...

000dfe7c <_ZL18MODEM_CONFIG_TABLE>:
   dfe7c:	92047472 94480474 0cc47804 0004b472     rt..t.H..x..r...

000dfe8c <_ZTV7RH_RF95>:
	...
   dfe94:	000d9893 000d98cb 000d9d89 000d9bef     ................
   dfea4:	000d9901 000d9c37 000d988f 000d8b2b     ....7.......+...
   dfeb4:	000d8acd 000d8b7b 000d8b49 000d8b9f     ....{...I.......
   dfec4:	000d9895 000d8adf 000d8ae3 000d8ae7     ................
   dfed4:	000d8aeb 000d8aef 000d8adb 000d8afb     ................
   dfee4:	000d8aff 000d8b03 000d8b07 000d8b0b     ................
   dfef4:	000d8b11 000d8b15 000d98db 000d8b19     ................
   dff04:	000d8b1f 000d8b25 000d9721 000d972b     ....%...!...+...
   dff14:	000d988b 64383025 72002f00 766f6d65     ....%08d./.remov
   dff24:	25206465 73250073 69786520 20737473     ed %s.%s exists 
   dff34:	20646e61 61207369 72696420 6f746365     and is a directo
   dff44:	66007972 20656c69 74206e69 77206568     ry.file in the w
   dff54:	202c7961 656c6564 676e6974 00732520     ay, deleting %s.
   dff64:	74617473 6c696620 65206465 6f6e7272     stat filed errno
   dff74:	0064253d 61657263 20646574 20726964     =%d.created dir 
   dff84:	6d007325 7269646b 69616620 2064656c     %s.mkdir failed 
   dff94:	6e727265 64253d6f 636e7500 69666e6f     errno=%d.unconfi
   dffa4:	65727567 69642064 74615072 63730068     gured dirPath.sc
   dffb4:	696e6e61 2520676e 69772073 70206874     anning %s with p
   dffc4:	65747461 25206e72 64610073 676e6964     attern %s.adding
   dffd4:	206f7420 75657571 64252065 00732520      to queue %d %s.
   dffe4:	46746567 46656c69 516d6f72 65756575     getFileFromQueue
   dfff4:	74657220 656e7275 64252064 70706100      returned %d.app
   e0004:	7165732e 656c6966 00000000              .seqfile....

000e0010 <_ZTV14SequentialFile>:
	...
   e0018:	000da1d5 000da201 000d9e8d              ............

000e0024 <_ZTVN5spark13CellularClassE>:
	...
   e002c:	000daedb 000daed1 000daec7 000dae7d     ............}...
   e003c:	000daebb 000daeaf 000dce5d 000dce65     ........]...e...
   e004c:	000daea3 000dae9b 000dae91 000dae87     ................
   e005c:	000dce95                                ....

000e0060 <_ZTV14CellularSignal>:
	...
   e0068:	000daf89 000dafb1 000daf8b 000dafc1     ................
   e0078:	000daff5 000db021 000db055 000db0a5     ....!...U.......
   e0088:	000daf8f 000dafab fffffffc 00000000     ................
   e0098:	000db0cb                                ....

000e009c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e00a4:	000db0eb 000db0f1 000db12f 000db0ff     ......../.......
   e00b4:	000db0ed                                ....

000e00b8 <_ZTVN5spark13EthernetClassE>:
	...
   e00c0:	000db703 000db6f9 000db6ef 000db6e5     ................
   e00d0:	000db6d9 000db6cd 000dce5d 000dce65     ........]...e...
   e00e0:	000db6c1 000db6b9 000db6af 000db6a5     ................
   e00f0:	000dce95                                ....

000e00f4 <_ZTV7TwoWire>:
	...
   e00fc:	000db8a7 000db8f1 000db8c9 000db8a9     ................
   e010c:	000db8d1 000db8d9 000db8e1 000db8e9     ................

000e011c <_ZTV9IPAddress>:
	...
   e0124:	000dba89 000dba79 000dba7b 34302575     ....y...{...u%04
   e0134:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   e0144:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   e0154:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   e0164:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   e0174:	005b2000 65646f63 00203d20 64006925     . [.code = .%i.d
   e0184:	69617465 3d20736c 0a0d0020 6c006300     etails = ....c.l
   e0194:	6e66006e 646f6300 65640065 6c696174     n.fn.code.detail
   e01a4:	00000000                                ....

000e01a8 <_ZTVN5spark16JSONStreamWriterE>:
	...
   e01b0:	000dbf45 000dbf6b 000dbf29 000dbb89     E...k...).......

000e01c0 <_ZTVN5spark16StreamLogHandlerE>:
	...
   e01c8:	000dc321 000dc339 000dcb05 000d4d43     !...9.......CM..

000e01d8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   e01e0:	000dc34d 000dc361 000dcca9 000dbf31     M...a.......1...

000e01f0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   e01f8:	000dbf43 000dbf79 000dca41 000dbf33     C...y...A...3...

000e0208 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   e0210:	000dbf41 000dbf87 000dc269 000dbfa5     A.......i.......

000e0220 <_ZTVN5spark12NetworkClassE>:
	...
   e0228:	000dce1d 000dce27 000dce31 000dce3b     ....'...1...;...
   e0238:	000dce45 000dce51 000dce5d 000dce65     E...Q...]...e...
   e0248:	000dce6d 000dce79 000dce81 000dce8b     m...y...........
   e0258:	000dce95                                ....

000e025c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   e025c:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   e026c:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   e027c:	72756769 6f697461 7369206e 766e6920     iguration is inv
   e028c:	64696c61 5925002e 2d6d252d 25546425     alid..%Y-%m-%dT%
   e029c:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   e02ac:	00000065                                e...

000e02b0 <_ZTV11USARTSerial>:
	...
   e02b8:	000dda61 000ddacf 000ddaa7 000dd0db     a...............
   e02c8:	000dda77 000dda93 000dda85 000ddaa1     w...............
   e02d8:	000dda63 000dda69                       c...i...

000e02e0 <_ZTV9USBSerial>:
	...
   e02e8:	000ddb6f 000ddbd7 000ddbad 000dd0db     o...............
   e02f8:	000ddb9f 000ddb71 000ddb81 000ddbd1     ....q...........
   e0308:	000ddb91 000ddb69                       ....i...

000e0310 <_ZSt7nothrow>:
   e0310:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   e0320:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000e0331 <day_name.6145>:
   e0331:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   e0341:	61536972                                 riSat

000e0346 <mon_name.6146>:
   e0346:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   e0356:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   e0366:	63654476                                vDec

000e036a <_ctype_>:
   e036a:	20202000 20202020 28282020 20282828     .         ((((( 
   e037a:	20202020 20202020 20202020 20202020                     
   e038a:	10108820 10101010 10101010 10101010      ...............
   e039a:	04040410 04040404 10040404 10101010     ................
   e03aa:	41411010 41414141 01010101 01010101     ..AAAAAA........
   e03ba:	01010101 01010101 01010101 10101010     ................
   e03ca:	42421010 42424242 02020202 02020202     ..BBBBBB........
   e03da:	02020202 02020202 02020202 10101010     ................
   e03ea:	00000020 00000000 00000000 00000000      ...............
	...

000e046b <link_const_variable_data_end>:
	...

000e046c <link_constructors_location>:
   e046c:	000d4425 	.word	0x000d4425
   e0470:	000d4601 	.word	0x000d4601
   e0474:	000d513d 	.word	0x000d513d
   e0478:	000d55b5 	.word	0x000d55b5
   e047c:	000d5929 	.word	0x000d5929
   e0480:	000d6325 	.word	0x000d6325
   e0484:	000d8979 	.word	0x000d8979
   e0488:	000d8ddd 	.word	0x000d8ddd
   e048c:	000da51d 	.word	0x000da51d
   e0490:	000dae6d 	.word	0x000dae6d
   e0494:	000daf59 	.word	0x000daf59
   e0498:	000db70d 	.word	0x000db70d
   e049c:	000dcaf5 	.word	0x000dcaf5
   e04a0:	000dcf69 	.word	0x000dcf69
   e04a4:	000dd219 	.word	0x000dd219
   e04a8:	000dd7c1 	.word	0x000dd7c1
   e04ac:	000dda4d 	.word	0x000dda4d
